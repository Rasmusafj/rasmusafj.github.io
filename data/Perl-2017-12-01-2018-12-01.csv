author,comment,timestamp
petdance,"We need to know far more about what you are talking about if we are going to help you.

Do you have some code that you are working on?  Show us the code and explain what you would like the code to do.

",1543540647.0
_kst_,"So you want to change ""application"" to ""app51""?

The solution to that specific problem is just to write ""app51"". Or you could substitute with:

    s/lication/51/;

I presume you're looking for a solution to some more general problem, but it's difficult to tell what that general problem is from the very specific problem you've shown us. Can you describe it? (Accurately describing a problem is a *big* step in solving it.)

Here's one possibility of what you might be looking for:

    my $s = ""application"";
    $s =~ s/^(app).*/${1}51/;

You might also want to use a more descriptive subject line next time. ""I am suffering please help"" won't necessarily attract the attention of people who can help you.",1543542241.0
Grinnz,"There's an example for setting the format callback in the documentation. https://metacpan.org/pod/Mojo::Log#format

By the way, the default format was changed in Mojolicious 8.06 to what you specified (in order to be able to show subseconds): https://metacpan.org/source/SRI/Mojolicious-8.07/Changes#L14-15",1543542654.0
hahainternet,"It's a callback attribute. [Here's](https://metacpan.org/source/SRI/Mojolicious-8.07/lib/Mojo/Log.pm#L10) the default

    has format => sub { shift->short ? \&_short : \&_default };

Just call it with something that formats it as you see fit.",1543540327.0
perlancar,"I'm suspecting you are thinking about regex? :) The easiest way would be to decode your JSON and then simply access the element you want via Perl, e.g. $jira\_tickets\[5\]{key} and $jira\_tickets\[5\]{fields}{timespent}.",1543320392.0
plainblackquy,"Cool book, very easy to read. The Perl 6 in this book seems -really- similar to Perl 5.",1543334279.0
daxim,"I bought this as dead tree issue half a year ago.

The title is a bit misleading, the content does not go particularly deep, in fact most chapters are quite shallow; it's a rapid fire of ""this is how it works, that's some example code for illustration"". But it does cover every topic, compare the [table of contents](https://www.packtpub.com/application-development/perl-6-deep-dive#book-info-toc) with the topics of the language spec.

Do get the book in case you are already an experienced programmer and need to get up to speed with the language quickly; the book also works fine as a reference/aide-mémoire.",1543323459.0
beermad,"Apart from the fact that Larry's involved, I really struggle to see any connection between Perl 5 and ""Perl"" 6.

A couple of years ago, out of curiosity, I installed Perl 6 and had a go at writing some code in it. And quickly gave up because it bore no relationship whatsoever to the language I already knew how to write. And I really couldn't see any value in the effort that would be required to learn what to all intents and purposes is a whole new language that I'll probably never have a use for.

Six really ought to have a different name - not pretend to be a development of Perl itself. Perl 5 was  a huge development from Perl 4, but the basic language itself was essentially the same.",1543360429.0
albertferrico,I really enjoyed a lot.,1543247000.0
AlexOn365,"Are there videos or slide decks anywhere?

&#x200B;",1543282988.0
davorg,"> I personally think that is totally ok to write small things as CGI 

I think this nicely sums up the confusion in a lot of the conversations I've had on this topic.

No-one is seriously suggesting that it's not OK to write small things as CGI programs. What we are saying (or, at least, what **I'm** saying) is that you should not write those small CGI programs using CGI.pm. Even the most trivial of programs will get benefits from being written using PSGI/Plack.

[**Edit:** Added the (very important!) word ""not""]",1543216426.0
davorg,"> the fact that CGI.pm comes (or rather just came) with standard Perl that eliminates (eliminated) the need for installations

It rather depends what your standards are for a minimal CGI working environment, I suppose.

Currently, two of the most popular OSes for hosting providers are Centos 6 and 7 (and their RHEL equivalents). A default installation of both of these OSes does not include CGI.pm. This is not because CGI.pm was removed from the core (they both ship with versions that should include the module) but, rather, because Red Hat decided to split the standard Perl distribution into two parts and only the minimal installation (which doesn't include CGI.pm) is included in the base installation. It's simple enough for the sysadmin to fix that (`yum install perl-CGI` to just install CGI.pm or `yum install perl-core` to install all of the missing parts of Perl), but given how little the hosting industry cares about Perl these days, how many will bother?

So, on many hosting providers, you **will** be able to run a CGI program. But you'll be hand-rolling your parameter parsing (or copying it from Matt's Scripts!) and including raw HTML in your Perl code. And I really hope no-one is advocating that as a sane approach to writing CGI programs.

Even if you're lucky and you get a hosting provider that has installed CGI.pm - you're still missing the Template Toolkit or some other sane way to product output.

My point is that even for the most trivial CGI program, your life gets easier if you have non-standard parts of Perl installed. And while you're persuading the sysadmin to install CGI.pm and the Template Toolkit, why not ask her to install Plack as well?

I guess I can feel another blog post coming on...",1543220352.0
gerikson,"Ever since I found out that I could quite easily generate HTML using CGI.pm, that's what I've been using for my simple web apps.

Sure I could use a templating engine but frankly the startup cost for a new project is so damn low that I've never felt the need to delve into them.

",1543230812.0
Grinnz,"Very poorly biased weekly, seems to be confusing CGI.pm and CGI the protocol.",1543214184.0
daxim,"The problem is that in each loop you read paragraph by paragraph, and the odds have the IP and the evens have the title, but you try to match at the same time. You print on successful match, which are the even paragraphs, and IP is always empty because it did not, could not match.

This can be solved by reading the even paragraphs from the program, advancing the loop manually. Put `$_ = readline;` between the two match operations.",1543181470.0
oalders,I really enjoy these sorts of posts.  Very upbeat and some good information in there as well.  I really want to make it to LPW sometime.,1543349277.0
MattEOates,"How, if at all, was William Angell associated with the Perl programming language, other than his father was named Perl? ",1543055131.0
Chtorrr,You are welcome to post this in r/FreeEBOOKS :) ,1542913658.0
tarje,more like a slideshow,1542914353.0
davorg,PDFs are not eBooks. If you're going to advertise something as an eBook then it should be in mobi or epub format.,1542966275.0
perlancar,Any videos for Perl Quiz I and II?,1542966660.0
three18ti, Why would anyone migrate from p5 to p6?,1542913351.0
Grinnz,"This probably is outside your scope, but if you want it to work for uppercasing non-ascii letters you might have to get creative - modern Unixlikes tend to store filenames in UTF-8, but everything in Perl tends to work with filenames as bytes, but you need characters for `uc` to understand what to do; it gets more complicated because on Windows they aren't bytes, but let's stick with Linux for now...

    prename 'utf8::decode($_); s/^([^.]+)/\U$1/; utf8::encode($_)' résumé.txt",1542853218.0
perlancar,"One way:

    prename 's/(.+)(?=\.)/uc $1/e' blabla.txt
",1542851645.0
Grinnz,What's prename?,1542851418.0
perlancar,"FWIW, Quora carries a lot of these ""heavily loaded"", controversial questions (e.g. ""Which country is more racist? A or B?"" or ""Are all X people hostile towards foreigners?"") that seem to have the sole purpose of provoking reactive answers, i.e. generating pageviews. This is compounded by the fact that it's currently not obvious how to find out who posted the questions. It has made the site less interesting to me.",1542858557.0
davorg,[My answer](https://www.quora.com/Outside-the-academic-and-research-world-is-Perl-still-used-In-which-areas/answer/Dave-Cross),1542868334.0
perlancar,Seems like quite a lot got done. Great job!,1542851430.0
petdance,"No, it is not a bug.  It is a well-documented feature of how hashes work in Perl.  See `perldoc perlref`.  Calling `exists` does not save you from the autovivification.

It *is* a common gotcha, and many people have stumbled over it. I was once asked in a job interview about autovivification, and I explained it, and my interviewer said I was incorrect, so I had to pull out my laptop and demonstrate that in fact it was *his* understanding that was wrong.",1542811911.0
mfontani,"Checking a hash ""layer by layer"" is exactly what you ought to be doing.

    $ perl -MData::Dumper::Concise=Dumper -lE'my %foo; say ""exists"" if exists $foo{bar}{baz}; say Dumper \%foo'
    {
      bar => {}
    }

vs.

    $ perl -MData::Dumper::Concise=Dumper -lE'my %foo; say ""exists"" if exists $foo{bar} && exists $foo{bar}{baz}; say Dumper \%foo'
    {}

",1542806508.0
crocandial,[no](https://perldoc.perl.org/functions/no.html) autovivification or Data::Diver or Hash::Util,1542806409.0
hobbified,At some point it becomes a question whether a bug is still a bug after 20 years of people treating it as expected behavior.,1542814648.0
perlancar,"The perlfunc manpage on exists() (read with \`perldoc -f exists\`) admits that it can be a bug and it *may* be fixed in a future release (emphasis mine).

I guess to avoid autovivification, you currently have to do it like in most other languages, which is check layer by layer, e.g.:

    print ""exists"" if $foo{bar} && exists $foo{bar}{mar};

Since you imply that $foo{bar} needs to be a hashref, you can just test with $foo{bar} because all hashrefs evaluate to true.",1542806470.0
liztormato,"FWIW, this is a bug fixed / feature missing in Perl 6.",1542819240.0
frezik,"You should have a healthy fear of `eval(STRING)`. You should not avoid it entirely. I've seen some devs write a complicated series of coding gymnastics trying to avoid `eval(STRING)`, when simply letting it happen would have been straightforward.

It's for loading code at runtime that you couldn't at compile time. The old mod_perl2 `ModPerl::Registry` uses `eval(STRING)` to load ""scripts"" at run time. So does any templating system that lets you embed Perl inside, such as `Mojo::Template`.

Then there's dynamic code generation. `Graphics::GVG::OpenGLRenderer` takes a GVG document (a simple vector graphics format) and generates a Perl class with a `draw()` method. Call that, and you get the vector graphics rendered using OpenGL. This is done by creating Perl code for the class and running through `eval(STRING)`. This means translating the vectors happens only once at compile time.",1542808815.0
pagraphdrux,"> The first problem is that to make sure that this eval statement works correctly, one has to validate the input sufficiently.

You have to validate user input! *gasps*",1542809459.0
Grinnz,"Carton does not store installation results, so there is something else going on - check your cpanm build log. You can remove the cpanfile.snapshot and local/ directory to start fresh (but this will unpin any versions of modules you have already installed).",1542752822.0
davehodg,—force?,1542752589.0
daxim,"[Tilli-Willi says: good job!](https://i.imgur.com/dZyiG3a.png)

----

✨ [support the Camelcade/Perl5-IDEA author](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=HJCUADZKY5G7E) ✨",1542708829.0
hurricup,"If you have execution problems after upgrading to 2018.3, re-create the interpreter. Seems migration fails sometimes. Sorry...",1542716345.0
I_need_this_to_vote,When I tried to install the WSL plugin pycharm says the plugin requires intelliJ ultimate. Is it available for pycharm and is it only supported in professional versions of the IDEs?,1542832346.0
hobbified,"DBI is synchronous, races aren't really possible unless you're doing something exotic... and DBI doesn't provide a method called `Query`, so whatever is going wrong is probably *not* at the layer of DBI.",1542576467.0
nofretting,"[https://metacpan.org/pod/DBI#RaiseError](https://metacpan.org/pod/DBI#RaiseError)

The RaiseError attribute can be used to force errors to raise exceptions rather than simply return error codes in the normal way. It is ""off"" by default. When set ""on"", any method which results in an error will cause the DBI to effectively do a die(""$class $method failed: $DBI::errstr""), where $class is the driver class and $method is the name of the method that failed.",1542578570.0
petdance,"> Can't call method ""Query"" on an undefined value

We need to see more code to be able to tell what the specific problem is, but the short version is that you've got an object of some kind and you're trying to call the `Query` method on it but `$dbh` is `undef` at the time you're invoking a method with it.

Typically this looks like this:

    my $dbh = ... do something to establish a connection.
    $dbh->Query( 'SELECT * FROM....' );

The problem is that the code to initialize `$dbh` failed for some reason, but that error condition hasn't been caught.  You need to do something like

    my $dbh = ... do something to establish a connection.
    if ( $dbh ) {
        $dbh->Query( 'SELECT * FROM....' );
    }
    else {
        die ""Unable to create a DB connection"";
    }",1542573235.0
davorg,"We need more information in order to be much help. `Query()` is not a standard DBI method, so we need to know where it is defined and how it is called.

As others have pointed out (and as the error message makes clear) the problem is that you have an object that you are calling a method on but, occasionally, that object isn't created successfully, but your code tries to use it anyway.

So, basically, your code looks something like this:

    my $obj = SomeDatabaseClass->new(...);

    # and then later on

    $obj->Query(...);

You need to add some error checking where the object is created. Something like this, perhaps:

    my $obj = SomeDatabaseClass->new(...)
      or die ""Cannot create database object"";

If you're lucky, then `SomeDatabaseClass` will include some way to get more details about the problem. But without knowing more about that class it's impossible to be much more help.

So please edit your question to add a) the code that creates your database object and b) the code where you call the `Query()` method.",1542699761.0
ThirdEncounter,"But I don't want to write a full-fledged web app. I just want to host a couple of forms and process their fields on submit. CGI is perfect for that, esp. on cheap web hosts.


What's the alternative besides using frameworks?",1542574207.0
redditoni,"Give me an easy way to offer web apps written in Perl to be run on a cheap shared hosting account like what Bluehost (or any cPanel-based host) offers, and I won't. 

Like, do you think I wanna? 


",1542569667.0
Chicken_Dump_Ling,I use CGI.pm in production. I've never used PSGI in my life. How would I leap from one to the other? Is there a way?,1542571563.0
mytoh,"I'm waiting for someone to write an article titled ""Please Don't Use Perl"".",1542559892.0
Grinnz,"I attempted to respond on the post but my comment was held for moderation, which usually means it will never appear; thus I will reproduce it here.

I appreciate the example of a lower-level alternative, since my post only showed a Mojolicious solution for brevity and because that is where my experience is, and this is certainly a good alternative as well. However, ""the Mojolicious example derives most of its concision from the lack of any error handling"" is incorrect, since error handling (similar to that I added to the CGI.pm example, but much more useful) is built in to Mojolicious, as well as most other higher level alternatives. It is a common problem with CGI.pm-based scripts that unhandled exceptions result in no useful response to the user at best, and broken/missing response headers at worst.

(I have since updated my post to make it clearer Mojolicious is but one option.)",1542562883.0
avetik,"Question: if your job is to maintain someone else's scripts, which script is easier to   
   a) understand,   
   b) debug,   
   c) update  
My guess is [CGI.pm](https://CGI.pm) solution is still much easier to comprehend and break into pieces for debugging.  
Mojolicious is a package which may contain a whole lot of cool things in it, but fewer lines of code does not necessarily mean a more robust solution. IMHO, of course, I'm not judging.",1542499531.0
tarje,excellent response: http://blogs.perl.org/users/aristotle/2018/11/modern-perl-cgi.html,1542525846.0
tektektektektek,"> Be concise. Be flexible. Be modern. Don't use CGI.pm.

Let's break that down:

> Be concise

If this achieves the goal of maintainability then it is a worthy aim.

> Be flexible

This works with fewer hard-and-fast rules, such as ""don't this"" and ""don't that"".

> Be modern

That really needs a justification. Adhering to a latest fad instead of tried-and-tested historical norms leaves code open to early rot if the fad passes, and reduces the portability of any such script.

> Don't use `CGI.pm`

The `CGI.pm` module has been around for decades, and while it may not be the cleanest module it is one of the most battle-tested in Internet history.

Certainly a script that depends on `CGI.pm` is more likely to run anywhere. And almost anybody familiar with Perl will also be familiar with this module.

A great advantage of `CGI.pm` is that it avoids dependency-hell - I can't speak for Mojolicious - but there is a lot of value in small, quick modules that don't need to pull in tens or hundreds of other modules, all treated as objects, demanding vastly increased system resources.

Also, and this is important, making a rule ""Don't use CGI.pm"" violates the ""Be flexible"" principle.",1542494400.0
wsppan,Holy shit. Nice! ,1542486140.0
bart2019,"Define ""effective"".  Caching isn't free. Where are the benchmarks?

It is highly likely that, with a simpe function like that, that the cache performs much worse than the original service.",1542442801.0
Grinnz,The new version of Mojo::Redis has a [pretty cool caching module!](https://metacpan.org/pod/Mojo::Redis::Cache),1542412623.0
saiftynet,"Scratch your itch first: Do things that you like or need doing first.  Work related calculators, (e.g. electronics calculators if that is what you do) Toos that make your job easier will make somebody else's job easier too.

Command line tools: Create tools that simplify common tasks. Tasks like playing background music can be done from the command line, but you could try to make this easy , then add to it e.g. with playlists and shuffle etc.

Desktop projects: I would suggest a child friendly desktop applications.  Sort of like [childsplay](http://childsplay.sourceforge.net/) . These would 1) be modular and you can add projects as time goes on 2) encourage others to contribute to your projects 3) be a good demo of the capabilities to encourage others to develop in Perl.  Trouble? GUI programming is not trivial in Perl even though everything is possible.  GUIDeFATE might be of interest though getting it installed hasn't been easy for every one to install, and it is rather basic.

&#x200B;",1542285592.0
pre_action,"John SJ Anderson (@genehack) says a Static Site Generator should be the project you use to learn a new language, and I agree with his reasoning: https://www.slideshare.net/genehackdotorg/a-static-site-generator-should-be-your-next-language-learning-project",1542316188.0
whitey_b_the_devil,"Can you maybe write a little about your interests in the perl world? Do you do text processing? Client side web scraping? Server side web apps?  

What about real world interests? Hobbies? ",1542265076.0
scottchiefbaker,How about writing a scripts the extracts the most commonly used words from some free [Project Gutenburg](http://www.gutenberg.org/browse/scores/top) text files?,1542297721.0
doomvox,"It occurs to me I'd be really interested in seeing a tutorial about how to, say, create a Debian package from a CPAN project. 

Update:  to answer my own question, I see there's a FAQ, https://wiki.debian.org/PerlFAQ, which mentions a ""dh-make-perl"" tool.
",1542303953.0
nickbernstein,"I always think a good quick project to start off with is to write a quick program that will take input for how much money you have in the bank, how much you add every month, and then calculate the amount that you'll make based on your interest rate. 

Mainly because a lot of people underestimate compound interest, but it's a really simple program so it's good for a starting place.",1542342056.0
bonkly68,"How about the ""Go Fish"" card game?",1542348637.0
Urist_McPencil,"Make a script that will remove C/C++-style and Perl comments from any file you point it at, and save it to a new file. Do not nuke the original file. The script must accept an arbitrary amount of file locations as command line parameters, or be typed in by a user; for bonus marks, remove all comments from the current working directory of the script.

    First two lines of the script must be:
    #!/usr/bin/perl -w
    use strict;
    
    comments look like:
    //a single-line comment
    /*a
      multi-block
      comment
    */
    if(1=1)  { dostuff(); } //another comment, preceding code must not be harmed.
    #perl comment
    my $input = <STDIN>; #another perl comment.

Not super complicated but not dead-simple, you'll have to at least learn a little bit of Perl to do this.",1542343743.0
three18ti,"This is pretty slick!

But this:

    curl http://example.com > foo.txt

Is way over complicated with the generator...  I can do that with LWP::Simple (which I believe is part of the standard lib?):

    perl -MLWP::Simple -e 'getprint $ARGV[0]' http://example.com > foo.txt

[This is the result I receive](http://paste.scsys.co.uk/582236)",1542262128.0
Grinnz,"neat, but why is WWW::Mechanize used?",1542231464.0
WirelesslyWired,"curl --max-time 10     
Unknown option: max-time 

curl -m 10     
Unknown option: m 

Oh well, it was worth a shot.",1542261781.0
pagraphdrux,https://i.kym-cdn.com/photos/images/original/000/110/545/tumblr_lihynlRomV1qzr81to1_400.jpg,1542247260.0
davorg,"> Perl was introduced in 1987 as a utilitarian scripting language, evolving from CGI scripting.

Where do people get these ideas from?",1542184851.0
hobbified,"Punningly, it means ""the way of the camel"". 駱駝 (rakuda; らくだ) means camel, and 道 (dō; どう) means road/way/set of principles (it's the same root as Taoism). So rakuda-dō gets contracted to rakudo, the way of the camel.",1542142117.0
neverbetterthanks,"An article promoting CGI.pm in 2018? For shame.

As someone else said, use Mojolicious.

Use *anything else* over CGI.pm. Please.",1542062544.0
ether_reddit,I'm disappointed that [this thread was locked](https://github.com/tpf/perldotcom/pull/156) -- constructive discussion is far better done on github than here.,1542222791.0
dnmfarrell,"I edited and published the article on Perl.com. I've read through the comments here and wanted to respond and give you more context about my decision to publish it.

The article is part of our [popular search terms](https://github.com/tpf/perldotcom/projects) project which aims to write articles that people are Googling for. This was borne out the realization that our most popular Perl articles were not our newest ones, last time I checked our most popular article was ""Perl command line options"" written in 2004 by Dave Cross.

When we publish articles about things people are not Googling for, we get a brief spike in traffic, which represents the Perl community checking in. Once that spike is over, the articles see only a few clicks per week. I've written hundreds of articles like that. Like it or not, CGI is a term strongly associated with Perl on Google searches: we want to capture that traffic to grow the site's popularity.

A more popular Perl.com is a good thing for all of us: it helps us reach more people with community news, promote Perl events and introduce them to modern Perl ideas.

So then if we're going to write about CGI, what tack should we take? What do we think people searching for Perl and CGI want to read? I took a guess and proposed the following structure:

* How to create a simple web app with CGI
* Recommend CGI resources
* Why CGI is not recommended
* CGI alternatives (Plack, Dancer, Mojolicious)

I felt that would both entice readers looking to build / fix something in CGI, and nudge them in a better direction. Dave Jacoby manages CGI applications for $work, and he kindly volunteered to write the article. He submitted a rough draft with over 2000 words of content. That took a lot of his time!

Dave had assembled some great technical information in his article that I didn't want to lose, but we also wanted to trim the article down to a reasonable length, so with my feedback he trimmed it down and re-shuffled some sections. I think we ended up at about 1250 words, with 280 words describing the shortcomings of CGI and proposing alternatives. That's around 20% of the article. That's not exactly what I had in mind, but it's close enough. He also included a lot of things I hadn't considered or wasn't aware of (like avoiding the builtin HTML generation functions). This is how editing goes, and I think we ended up with a decent article, thanks to Dave's hard work.

I agree there are better options than CGI scripting and I hope to keep writing and editing articles of the kind the Perl community likes to read. But I also hope by publishing articles that folks are Googling for, we can capture new readers and grow Perl.com and the Perl community.

The article may not be to your taste. I've seen some good suggestions for ""post CGI"" articles: e.g. how to migrate your CGI application to something better or why not to use CGI anymore. We need more authors and I'd be happy to publish articles like that too. If you'd like to write for Perl.com, check out our [contributing guide](https://github.com/tpf/perldotcom/blob/master/CONTRIBUTING.md).",1542337635.0
mweather,Ricardo and SawyerX are good ppl but not perfect. I still use CGI.pm daily and users don’t mind or care how you get there only getting things done it’s what matters. ,1542043974.0
mao_neko,"CGI may be archaic and terrible, but playing devil's advocate for a moment here, it also makes it easy to keep your server stateless, because you *cannot* maintain state in-process between page requests.",1542074548.0
briandfoy,Very cool! That's a good excuse to come down looking for barbecue.,1542235228.0
bart2019,"Not ""List::AllUtil""?",1542048375.0
jplindstrom,"\> What meaningful metrics could be used to measure Perls growth?

Is there a Perl client library for each new cool technology project, alongside the common languages? (you know which ones they are)

**a)** When there is a Perl community provided client for every project, we have won half the battle.

**b)** When there is a Perl client library provided by the new technology project (because they know it's needed for them to be taken seriously), we have won the war.

Start with a.

&#x200B;",1542046389.0
Oflameo,"The answer is simple, and I told you all of the way back in 2013 at the Pittsburgh Perl Workshop what needed to be done to promote Perl.

With in the new constraints, what I would do is spend all 10K USD on bribing Larry Wall to retcon the version numbers of the next release of Perl on to drop the major version like Java did so non-Perl programmers can see progress easier. The next release of Perl will be Perl 29.

Q : But Oflameo, what about comparability breaks? 

A : That is what errata is for.

Q : But Oflameo, what about Perl 6?

A : What about it! It was released from March of 2000. You needed an Upgrade To your OS  15 years ago.

Q : But Oflameo, what about Perl 6 The Language?

A : You mean Rakudo, or Rakudo Star, or Raku, or Parrot VM, or Diwali? Don't worry about it, it is not in production.

Q : But Oflameo, you don't make a Silicon Valley income so does your opinion really count?

A : Okay, you don't want help. I like Perl better, but I already learned Python, and there is more compatible implementations and support for it. You didn't want my help with the Pittsburgh Perl Workshop either, and guess what, there hasn't been one since 2015.",1542151515.0
AiHasBeenSolved,"Although the first working artificial intelligence programs are coded in **[Perl](http://ai.neocities.org/perlmind.txt)**, **[JavaScript](http://ai.neocities.org/FirstWorkingAGI.html)** and **[Forth](http://ai.neocities.org/mindforth.txt)**, only the Perl free AI source code is shown in the fifty **[documentation pages](http://ai.neocities.org/AiTree.html)**, so the whole AI community must focus on Perl to comprehend AI. ",1542028686.0
cygnus83,Hey there! I'm getting a 404 on the link; may want to double check it. =),1542029647.0
sshaw_,[json-schema-shorthand](https://www.npmjs.com/package/json-schema-shorthand). Good idea. ,1541950644.0
hymie0,"IMHO he missed a great opportunity.

One key left of each letter in PERL is OWEK.  A made-up name with a meaning.",1541854867.0
xabean,"suddenly, Roku gets angry.",1541887890.0
jplindstrom,"I must say, that Diwali butterfly is absolutely gorgeous! That would be a fantastic logo for Perl 6 (or, you know, whatever :) )

You know that thing about first impressions? Pick this one.",1542038473.0
calibos,Yay!  Just in time!,1541906105.0
wrongway,Too late    If they had done this from the beginning  maybe perl5 could have lived on...,1541852810.0
mpersico,"Any press is good press these days - let the debate continue, civilly, until a consensus is reached. The debate is fine - the tone hasn't been.",1541771809.0
plainblackquy,I'm starting to think (from this series of articles) that Perl 6 might be an option for me.,1541870195.0
Dagger0,"If you're asking ""what's the zone for reverse DNS in v6?"" then:

    # dig -x 2001:db8::1 | grep -A1 QUESTION
    ;; QUESTION SECTION:
    ;1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa. IN PTR

But you should be able to name the file whatever you like, so long as BIND is configured to point to the file.",1541617037.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/ipv6] [Would like some help fixing a DNS file writing issue](https://www.reddit.com/r/ipv6/comments/9v1rtt/would_like_some_help_fixing_a_dns_file_writing/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1541614371.0
daxim,"* http://p3rl.org/todo
* http://p3rl.org/deprecation

afaict there is no roadmap; there aren't any means of enforcing it, anyway.

----

<https://lwn.net/Articles/485569/>:

> The Perl 5 Porters are the volunteers who develop and maintain the Perl 5 language. They consist of anyone who cares enough about Perl 5 to participate in discussions on the perl5-porters email list. There's no formal membership, and influence is based on a combination of hacking skill and the ability to not be a jerk. The more you contribute and the more you communicate, the more control you have over the future of Perl 5. This should sound familiar if you know how other FOSS projects work.

<https://www.nntp.perl.org/group/perl.perl5.porters/2014/09/msg219255.html>:

> perl5 does not have a road map.  While I'm [rjbs] holding the pumpkin, I think it is
*extremely* unlikely that it will.",1541611703.0
tux68,"You might want to checkout http://dev.perl.org/perl5/

There has been a lot of good work done over the last few years, but IMO some questionable decisions too.  Not sure an ambitious development roadmap would even be a good thing.  Even if development does become quiet, Perl will continue to be useful for a long time.",1541609937.0
davorg,I bet there's something in [BioPerl](https://metacpan.org/release/BioPerl) that will make this job far easier.,1541591674.0
tektektektektek,What have you tried so far?,1541592405.0
nofretting,[https://metacpan.org/search?q=fasta](https://metacpan.org/search?q=fasta),1541594468.0
melezhik,just wrote an article about this new feature - https://dev.to/melezhik/sparrow-as-a-reasonable-alternative-to-dotfiles-a1n,1541634507.0
melezhik,The feature released - [https://metacpan.org/release/MELEZHIK/Sparrow-0.3.5](https://metacpan.org/release/MELEZHIK/Sparrow-0.3.5) ,1541706498.0
matthewt,"Note that the perl6 community already discussed this at https://www.reddit.com/r/perl6/comments/9uo5cm/on_raku_lizmats_ramblings/

Those of us on the perl5 side of things need to remember we're well aware how feeling trapped by names feels, and would do best to err on the side of compassion over schadenfreude while the 6ers talk this out.",1541536792.0
kentnl,"Personally don't think the ""Stage name"" analogy makes any sense here. All the examples cited seem to involve a name which was relatively unknown, and unappealing on *face value*, for which an alternative was crafted, and the alternative was what made them unique and known.

Whereas with Perl 6, a major component in the real name is *already* well known, so its more like if Bob Dylan was his original name, and he decided (just theoretical mind) he'd made too many racial epithets in his career, and decided to separate himself from his public and embarrassing past by adopting a new name of Zimmerman.

You can imagine that such a strategy would be far less successful, as the truth to his past would ultimately be associated with the new stage name.

Conversations would be all ""I love this track by Robert Zimmerman"", ""Who?"", ... ""Oh, right, so Bob Dylan"" ( eg: I personally consider ""A Perfect Circle"" and ""Puscifer"" as ""Tool"", even though they're by definition not, but by association, are, as when you're trying to communicate a track under one of those titles to somebody unfamiliar with that title, you're almost certain to pick one of the others they *are* familiar with )

Its not to say it *can't* happen, but its an uphill battle.

Its about as hard to popularize a new name as it is to change the image of an existing, established one.

I won't stand in the way of whatever ya'll in P6 are doing, I just don't think stamping a new name on the box will necessarily be the silver bullet you're hoping for. (*even* if you go out of your way to remove associations in the official documentation, because you have no control over what people say and think)

And as long as P6 people aren't going to hold any kind of weaponry to my head and obstruct what I'm doing, we'll all just get along fine.",1541541257.0
lindleyw,"> Perl 6 is the successor of Perl 5. Just like Perl 5 was the successor of Perl 4. That is the way it was intended originally, and that is the way that it should go in the future. Anything else would do a disservice to all people involved in the Perl community.

""Perl6"" is a whole different language, which breaks compatibility with the Unix toolchain (bash, awk, perl5) at innumerable levels.  We who grew up with Perl see no reason to trash our knowledge, abilities, and the language we have grown to love.  Liz, can you not see why we are justifiably upset?  ",1541542169.0
cluelessbilly,"So many emotions for a language with less than 1% market penetration, storm in a teacup.",1541629436.0
mpersico," Posted by

[u/\_perly\_bot](https://www.reddit.com/user/_perly_bot)

[13 days ago](https://www.reddit.com/r/perl/comments/9qutd5/use_terminal_colors_to_distinguish_information/) ",1541522684.0
zoffix,"Reading that article, it sounds to me like it proposes a hostile fork of the language… and I don't understand why that would be beneficial to the language, especially considering the proposal also involves killing Perl 5.",1541513050.0
sunshine_killer,I like that butterfly pic.,1541445529.0
tektektektektek,"If ""Raku"" is what we're calling Perl 6 now, then I like it.",1541399206.0
tarje,"if it's a bug, report it: https://rt.cpan.org/Public/Dist/Display.html?Name=Reddit-Client",1541381092.0
moldykobold,"I just use the REST API.

https://github.com/mikeymiked/preddit/blob/master/preddit.pl",1541382026.0
Shortl4ndo,Pretty cool. I remember seeing someone ask for this a few days ago,1541388160.0
xeeeeeeeeeeeeeeeeenu,"For those who don't know: ""TimToady"" is Larry Wall",1541288687.0
NickK-,"Yupp, that's good. ""raku"" means simple, easy, comfortable. But my Japanese is a bit rusty. :D",1541337425.0
zoffix,For context: https://rakudo.party/post/A-Request-to-Larry-Wall-to-Create-a-Language-Name-Alias-for-Perl-6,1541272442.0
Grinnz,Love it. The similarity to the compiler's name is very intuitive.,1541277353.0
ether_reddit,#[FREE AT LAST](https://mamg.makeameme.org/free-at-last-5bdf36.jpg),1541355327.0
sshaw_,Does this mean that if/when Perl 5 has a major release it can be 6.0? Or was this never a possibility?  ,1541339773.0
mschweini,"I would really love sqllite to support MySQL's 

INSERT INTO table SET col = 'value'

Syntax. Does anyone know if there is a compatability layer for that?",1541276157.0
avetik,Very cool!,1541273456.0
0rac1e,"As u/pseydtonne said, nothing to do with the Perl programming language. However, Calder's work is at least tangentially related to computer science. His piece ""Big Red"" adorns the cover of ""Introduction to Algorithms"" (CLRS)",1541315898.0
pseydtonne,"Too bad this article doesn't belong here. It's a wonderful assessment of Calder's sculptures in a West Coast context.

However Jed Perl, a specialist in Calder's work, has no relation to the Perl programming language or community.",1541311622.0
FiveYearsAgoOnReddit,"Post your actual assignment here. Don't hide it in PMs.

As long as you learn something from it, it's fine.",1541160742.0
davehodg,Stackoverflow is probably best.,1541160666.0
gmorningyana,I failed to open 5 PRs. But it was fun and self-education! Thanks to you.,1541111365.0
shlomif,Thanks for sharing! I decided to skip Hacktoberfest this year because I have too many T-shirts as it is…,1541274975.0
shlomif,Thanks for sharing! I decided to skip Hacktoberfest this year because I have too many T-shirts as it is…,1541275000.0
TotalPerspective,"I found this while looking at various implementations of fuzzy match modules. I couldn't believe it wasn't more known. The one example in the description is cool, but it doesn't show that you are also getting all the Perl regex magic variables for 'free' as well, which is hard to come by in a fuzzy match implementation.

Once I realized you can swap out regex engines, I did a little [search](https://metacpan.org/search?q=re%3A%3Aengine). So many cool options! Including a PCRE that uses a jit! ",1541080060.0
moldykobold,IRC Freenode has basically everything tech related you’d ever want.,1541078847.0
Kajayacht,"For Perl, it's all about IRC.

Also, here's a thing
https://www.codercommunities.com/",1541078895.0
petdance,"There's no centralized Slack workspace about Perl that I'm aware of.

In the Chicago Tech Slack, there's a #perl channel.

The Test2 team has set up a Slack workspace.

I've set up a Slack workspace for discussing the ack and vim-perl projects.

There are probably many others around, but nothing that's become a _de facto_ standard centralized place to meet.",1541083334.0
Grinnz,"Slack is designed for corporate invite-only teams so it's not ideal for open source communities. Freenode's [#perl](https://kiwiirc.com/nextclient/#irc://irc.freenode.net/#perl?nick=mc-guest-?) and the [Perl IRC network](http://www.irc.perl.org/) ([#perl](https://kiwiirc.com/nextclient/#irc://irc.perl.org/#perl?nick=mc-guest-?) for social, [#perl-help](https://kiwiirc.com/nextclient/#irc://irc.perl.org/#perl-help?nick=mc-guest-?) for help, though the distinction doesn't matter a lot these days) are the main chat communities. I created a [Discord server](https://discord.gg/Mnbj6th) in case things move that way, since Discord is better designed for public communities than Slack at least, but it seems unlikely at this point as IRC still works fine.",1541101423.0
daxim,"    Global symbol ""$foo"" requires explicit package name (did you forget to declare ""my $foo""?) at /tmp/reddit-9sx4xg.pl line 4.
    Execution of /tmp/reddit-9sx4xg.pl aborted due to compilation errors.

https://perlmaven.com/always-use-strict-and-use-warnings

----

Edit: I replaced the whole program just because there's something wrong on every single line.

    use strict;
    use warnings;
    use autodie;

    my $filename = shift @ARGV;
    die 'no filename' unless $filename;

    open my $fh, '<', $filename;
    while (my $line = readline $fh) {
        printf ""on line %d: %s\n"",
            $fh->input_line_number,
            join ' ; ', $line =~ /
                \$          # literal dollar
                (           # capture
                    [^""]+   # everything until literal double quote
                )
            /gx;            # multiple times
    }

You should rather use a [JSON parser](http://p3rl.org/JSON::MaybeXS), but no one can help you unless you show the whole input.",1540980005.0
FiveYearsAgoOnReddit,"“Without code” here seems to mean “with minimal code”?

Why would I use this instead of the traditional JSON module?",1540861081.0
mfontani,It seems similar to https://stedolan.github.io/jq/ in many respects.,1540918432.0
Grinnz,"FWIW, Mojo::DOM's behavior is based on HTML5.",1540840761.0
mjd,tl;dr,1540905531.0
aanzeijar,"Do you still have the benchmarks you used in that blog* post? I took a look at the code, and want to see what difference a recursive get\_collisions\_for\_aabb would make.",1541170900.0
randomwordsforname,"Recently I started using pastebin more, so I decided to make a small CLI for it! I’m still somewhat inexperienced when it comes to Perl, so let me know if anything sticks out!",1540665174.0
zoffix,"No, keep Perl 5 as Perl. Just Perl.",1540542745.0
FiveYearsAgoOnReddit,Perl 6 is getting a new name?,1540544197.0
jahero,"Inspiring,  thank you!",1540446446.0
cazador481,"For the case that you really can't run perl -MCarp::Always you can set the **PERL5OPT** env variable to **-MCARP::Aways**.   
",1540396448.0
hobbified,"In the words of the great sage Travis Meeks: ""Sometimes, there are always problems.""",1540396409.0
perlancar,"""use Carp::Always"" shouldn't probably be explicitly written in the code, but instead added as a runtime flag (e.g. via perl -M, or PERL5OPT). Users should be given the choice to turn stack tracing on/off.

Also, [Devel::Confess](https://metacpan.org/pod/Devel::Confess) should be superior to Carp::Always in almost every aspect.

&#x200B;",1540412979.0
redditoni,"I'd get rid of the Schwern mention in the docs, tbh. 

Also, what's the difference between this and, 

    use Carp; 
    Carp::VERBOSE = 1; ",1540401372.0
zoffix,"*clicks*

*sees Perl folks fighting in the first few comments about which Perl is the bestest*

*closes the page*",1540409852.0
vgy7ujm,I thought there was information of interest that got highlighted in the discussion. Yes there was some cruft but also at least as much interesting comments.,1540555670.0
TotalPerspective,"What I thought was super cool about the projects listed on the Perl 11 page was that there is continued parallel development of Perl5, similar to pypy for python. The comments totally didn't go that route though.

I really wish there was more info on 'Modern Perl5', more than just the book. But discussion of things like autobox in production, or a distribution of perl that was batteries included etc.

Maybe some of this stuff exists and I just haven't seen it. I'm coming back to perl after a long break, and the quality of packages for making life better is amazing. The new features that have come out are also awesome.

I almost feel like someone could release a new language... or dare I say a Slang, just by including a few packages by default and turning on a few pragmas.... ",1540839929.0
scottchiefbaker,I'm a huge fan of colors in a terminal to give additional information.,1540346244.0
GlauchanGuy,Had a laugh when I saw the Business::US::USPS::WebTools module. I couldn't find anything like it on metacpan and ended up writing my own module. Now I see this!,1540417945.0
daxim,"Perlish solution combining map/grep (which you know as Array#filter):

    use List::Util qw(sum); # this module is part of Perl
    sub species_count {
        my ($target, $species) = @_;
        return sum
            map { $_->{how_many} }
            grep { $target eq $_->{species} }
            @$species;
    }
    my $species = [
        {""date"" => ""09/09/18"", ""how_many"" => 11, ""species"" => ""XXXXX""},
        {""date"" => ""04/11/17"", ""how_many"" => 41, ""species"" => ""TTTTTT""},
        {""date"" => ""17/03/18"", ""how_many"" => 30, ""species"" => ""DDDDDDDD""},
        {""date"" => ""17/08/18"", ""how_many"" => 31, ""species"" => ""XXXXX""}
    ];
    my $target = 'XXXXX';
    print species_count($target, $species); # output: 42
",1540294541.0
jplindstrom,"Please show what code you have so far.

`reduce` is available in `List::Util`, which is in core Perl (so you can just use it without installation).

[https://metacpan.org/pod/List::Util#reduce](https://metacpan.org/pod/List::Util#reduce)

(If you use other CPAN modules already, use `List::AllUtils` instead, since you then dont have to care about in which module your list functions come from.)",1540293471.0
xeeeeeeeeeeeeeeeeenu,">Only pair in map hash assignment allowed while ""strict hashpairs"", got 4 elements at 

This error definitely comes from cperl. ""Normal"" perl doesn't have ""strict hashpairs"".",1540227713.0
nickbernstein,"Well, #1 on the list would be to take a look at the build log.",1540226100.0
liztormato,Less than 14 hours to go!,1540198866.0
neverbetterthanks,"Looks like if the page doesn't get the cookie that it expects (that was set on the previous request by the javascript) it redirects to that page with the javascript.

Should not pose a problem, but you'll need to set a cookie that emulates what that javascript is doing.

In this case you'll just need to set ""beget=begetok"" I guess.

There's no general solution without reading the javascript and understanding their requirements, in each case.

Additionally, you may find Mojo::UserAgent an easier to use tool over LWP::UserAgent.",1540177119.0
,[removed],1540167834.0
gslavik,"https://perldoc.perl.org/functions/grep.html

As /u/rrohbeck has said, pastebin your code, it would be easier to tell you what you are doing wrong. My thought is that you are doing something semantically wrong.",1540167879.0
digicow,"Normally when we think of arrays, we think of them as being homogeneous (each item is the same type, and contains the same kind of data, as the other items). Perl doesn't require this, but when using heterogeneous arrays, a justification or explanation on behalf of the programmer is appropriate.

Your pseudo-code arrays don't make sense to me (or the other skilled programmers responding to you). Not the syntax, but the actual data values you're displaying. You haven't told us enough about what the values they contain are, or why, for us to be able to help answer your question.

Which is why you've had a number of requests for non-pseduo-code, because the real code might enlighten us to the real meanings here.",1540168569.0
,[removed],1540166773.0
xelf,"Aw man, I got here late and everything is deleted. Feel like I missed a gem here.",1540178781.0
raevnos,"To see what's happening, add this line after setting `$temp`: `print "">$temp<\n"";`. Then think about why you're using `chomp` in some places and not others.",1540152330.0
digicow,"To add to the other comment, if you were using positive comparisons instead of negative (`eq` rather than `ne`), your code would be simpler and more-intuitive and you probably would've determined your issue sooner",1540155697.0
bart2019,"You don't chomp `$temp`.

Why is you expression for `$temp ne 'C'` quoted?",1540193508.0
unkz,"Have you tried connecting to localhost on port 3306 with telnet?  Maybe try 127.0.0.1, localhost might magically try to use /tmp/mysql.sock or something.",1540102386.0
FiveYearsAgoOnReddit,"Which Perl are you using?

I had endless DBI problems on Windows but switching to Strawberry Perl fixed them.",1540104148.0
clamdiggin,"If you want a simple to install web dev environment in Perl, have a look at https://mojolicious.org

You can get it up and running with a simple command and there are good tutorials on how to get started ",1539924092.0
oldmanwillow21,"I don't know why you chose to use Perl for developing web applications, but I'm personally glad you did and I hope you stick with it. I'd understand if you decided to go with something else, it'd just feel good to see you succeed.

I use Perl and Catalyst for my web applications. I run them docker for local development, and have gotten one of my apps running with Kubernetes. I promised someone on the Perl Programmers Facebook group that I'd make a writeup once I got things working, and I intend to follow through on that. I'm also kicking around the idea of creating a service based off it. The only framework I know at the moment, though, is Catalyst.

There's help out there, though. Just ask questions about what you're trying to do. It might not be as easy as with other languages, but that will never change as long as we're telling people to go look elsewhere.",1539923895.0
readparse,"I've been a Perl guy for a long time, and I want to encourage you.  But I can't help but wonder why a _beginning_ web developer would choose Perl for that.

The problem is one of adoption and support.  The more supported something is, the more documentation can be found, and tricks and tips, and simple, supported hosting options, etc.

I would be happy to help anybody do web development with Perl, if that's really what they want to do, because I use it for web development, and I think it's a wonderful language, of course.

I guess I'm just not as much of an evangelist as I used to be.  It's harder to encourage people to use Perl in the face of decreasing adoption.",1539957035.0
raiph,"> I'm wondering if there is a trick I'm missing...

One of Perl's ""weaknesses"" is that it has so many options with documentation scattered all over the shop over so many years that it can be hard to find the right document/help for figuring out which way to go. But there will be a reasonable way to do whatever it is you want done (unless you want to do something unreasonable, and maybe even then). 

So the trick is to ask questions -- as you've just done. :) Just keep asking questions whenever you get stuck or remain confused. Perl folk will then guide you all the way, even as they disagree among themselves. (Beware simplistic answers that don't get significantly upvoted. Other than that, if you don't get the answers that you need, post some follow up comments explaining where you're still confused or stuck to move things along.)

I look forward to seeing you post a dozen follow up questions with interesting answers here on the way to a great web site. :)

PS. Imo rage_311's answer looks to be the most on the money answer so far.",1539951687.0
,[deleted],1539922342.0
briandfoy,"The `-D` switch to cpan can do this:

	$ cpan -D Mojolicious
	Reading '/Users/brian/.cpan/Metadata'
	  Database was generated on Mon, 22 Oct 2018 01:54:17 GMT
	Mojolicious
	-------------------------------------------------------------------------
		(no description)
		S/SR/SRI/Mojolicious-8.04.tar.gz
		/usr/local/perls/perl-5.28.0/lib/site_perl/5.28.0/Mojolicious.pm
		Installed: 8.02
		CPAN:      8.04  Not up to date
		Sebastian Riedel (SRI)
		kraihx@googlemail.com",1540214225.0
waterkip,"Why not just do: `perl -MCarp -e 'print $Carp::VERSION, $/;'`

&#x200B;",1539881484.0
workrestplay,"How about https://metacpan.org/pod/Module::Version for `mversion`.

```
$ mversion Mojolicious
```",1539891272.0
kilinrax,"    $criteria->{'history_entries.date'}{"">=""} = $from if defined $from;
    $criteria->{'history_entries.date'}{""<=""} = $to if defined $to;

Will *probably* do what you want.  Difficult to know without seeing what's consuming the structure.",1539869715.0
sjoshuan,"Yes! A good place to have this discussion is on the #epo channel on [irc.perl.org](https://irc.perl.org). They also accept pull requests with suggestions, if you have some good ideas. :)  


[https://github.com/EnlightenedPerlOrganisation/task-kensho](https://github.com/EnlightenedPerlOrganisation/task-kensho)  


Did you have something specific in mind?",1539862782.0
Grinnz,Note also that there are many pending suggestions: https://github.com/EnlightenedPerlOrganisation/task-kensho/issues,1539905567.0
davorg,Definitely! Well volunteered :-),1539871002.0
sjoshuan,"I, for one, would love to see Test2 on the list :)",1539875309.0
neilhwatson,"IIRC python's RE engine is, or is very close to PCRE, so little to no conversion should be needed. And those regexes would greatly benefit with some /x, m||, and other love.",1539786554.0
raiph,"You perhaps already know this but to recap:

* `$` means ""treat this as a single item"". Note how the symbol overlays an `S` for `S`ingle with an `I` for item to emphasize treating it as a singular thing (even if that singular thing is a reference to an array).

* `@` means ""treat this as an integer indexed array of items"". Note how the symbol is an ""at"" symbol that overlays a `0` with an `a` for `a`rray because an array contains zero or more items indexed ""at"" indices starting with `0`.

* `%` means ""treat this as a dict (hash) of key/value pairs"". Mnemonic is that it's a key`/`value pair that uses two `0`s because it contains zero or more pairs.

* `_` means ""fill in the blank"".

So:

* `$_` means ""it"" aka the topic in a given context. What is it in the current context as I write this? It's your question. What is it at any given point in code? It's the current topic aka `$_`.

* `@_` means ""them, by number"" aka the arguments, numbered one by one, in a given context. What are the numbered arguments provided in the current context as I write this? It's the comments replying to your question if we assume a particular order. What is it at any point in code? It's the current list of arguments aka `@_`.

* `%_` means ""them, by name"". In Perl 6 these are named arguments. What are the named arguments provided in the current context as I write this? It's the comments replying to your question indexed by the author who wrote them. What is it at any point in P6 code? It's the current list of named arguments aka `%_`. (Note that my analogies are weak. In P6 an argument must be either numbered or named, it can't be both.)",1539781814.0
briandfoy,All of the special variables are documented in [perlvar](https://perldoc.perl.org/perlvar.html). `$_` is the default topic variable and `@_` is the subroutine argument list.,1539776065.0
davorg,"All (at least, I can't think of an exception) of Perl's ""special variables"" are package variables. And Perl's package variables are stored in a data structure called a ""glob"". A glob has slots to store variables of all kinds, which means that once you create a package variable of one kind, you've actually created slots to store package variables of all kinds. This means that you can have strangely-named package variables that have no special use in Perl.

So, we're looking at the glob that contains package variables called `_`. This has slots for five variables called `_`.

Two of them have special uses.

* `$_` - this is the ""default variable"" or ""topic"". It's read or written to by many Perl functions and operators if they aren't given an explicit variable to use. If you look at a piece of Perl code an it seems to be missing a variable, that will be because it's using `$_` instead.

* `@_` - this array contains the list of arguments that are passed to a subroutine.

Three of them are just variables.

* `%_` - is a hash. It has no special meaning in Perl (well, in Perl 5 - it's used in Perl 6, I understand).

* `&_` - is a subroutine. It doesn't do anything useful until you associate some code with it (`sub _ { ... }`), but the slot for it exists.

* `_` - is a filehandle. I felt sure that `_` was some kind of special filehandle in Perl, but I can't find any documentation for it - so I must have misremembered.

The lesson to learn here is that just because a variable **looks** like one of Perl's special variables, that doesn't mean it **is** one of Perl's special variables.",1539782875.0
barwhack,"Short answer:

> [*EVERYTHING*](https://www.reddit.com/r/perl/comments/9oxrg8/what_are_used_for/e7xkzhr/?utm_content=permalink&utm_medium=front&utm_source=reddit&utm_name=perl).",1539782479.0
reggie-drax,"Hi,

I can't remember all of them, but $_ is, or was, the most used I suspect - it's the default variable, the one everything works with unless you specify something. So, here's a little script which uses $_ even though it doesn't explicitly say so anywhere.

    open(F, 'a_file.txt');
    while(<F>){
        print;
    }

Create a file called a_file.txt and put some lines of text into it, then put the little script above into a .pl file and run it.

The while(<F>) statement reads lines, one at a time, from the file F - and puts each line into a variable called $_

The print; line, prints the contents of $_

Both statements work on $_ unless you tell them otherwise.

Using default variables is probably bad for the blood pressure of anyone who has to maintain your scripts, I don't recommend using them.

Documented here: http://perldoc.perl.org/perlvar.html

In the Special Variables section.",1539776299.0
liztormato,"Since you also mention `%_`, which doesn't have a standard meaning in Perl 5 afaik, I thought I'd mention Perl 6, just in case that is what you meant.

In Perl 6, `%_` is where all of the uncaught named arguments wind up inside a `method`.

    class A {
        method b(:$a) {
            say $a;
            say %_;
        }
    }
    A.b( a => 42, b => 666 );
    # 42
    # {b => 666}

That works because each `method` in Perl 6 has a `*%_` (aka a slurpy hash) added to its signature to catch all of excess named arguments.

Of course, you can also use it explicitely in a sub signature as a slurpy hash:

    sub foo(:$a, *%_) { say %_ }
    foo( a => 42, b => 666 );   # {b => 666}",1539778716.0
sigzero,Excellent. He has done a tremendous amount for the Perl community.,1539887932.0
Grinnz,"Many of its strengths are shared with those of other languages, but in my opinion, its main strengths are first-class regex support, the prevalence of lexical scoping (variables exist where you see them), the vast repository of [CPAN](https://www.cpan.org), and the flexibility to solve problems in the way that works best for each author and each set of requirements, whether that's a highly structured Catalyst+Moose application or a one-off oneliner or anything in between. Here's a [similar but slightly different](https://www.reddit.com/r/perl/comments/7xccke/why_do_people_like_perl/) thread from a while back.",1539644383.0
AbstractTherapy,"Text manipulation, especially creating and manipulating secure code from itself and other languages on the fly.",1539646260.0
scottchiefbaker,It's really powerful for system administration tasks.,1539644241.0
wsppan,"Text processing, Regex built in, has some OO constructs (more so with Moose), higher order constructs like closures, some nice basic data structures like arrays and hashes built in, nice Database API via DBI, nice web frameworks like Mojolicious and Catalyst, nice command line options, awesome community and documentation, rapid development and prototyping.",1539642682.0
GermanShitox,Personally I like Perl because you can do many things with short code and it is a good option for hacking or security in general. ,1539642164.0
raevnos,"Anything involving untrusted data (I don't know of any other language with something like perl's taint mode)

Anything involving doing stuff with text files or other textual data.

Anything a bit more complicated than you'd want to do with a shell script.


",1539642328.0
readparse,"It's good at many things, but one of my favorites is [Autovivification](https://en.wikipedia.org/wiki/Autovivification).   Basically you can just start assigning arbitrary values as far down a hash structure as you want, without having to define that those structure exist or what they're called.

That's particularly useful if you want to make a two-dimensional hash.  Say you're going through a bunch of names of people and cities.  And you want to see an index of first names, and then cities for each name.

    $index->{$first_name}->{$city}++;

Then you change your mind and you want to see cities, and the names in each city.  You just change how the data structure gets populated, but there is no definition to change around:

    $index->{$city}->{$first_name}++;

The typical use case for me on things like that is two levels deep, but you can go as deep as you want.",1539669413.0
FiveYearsAgoOnReddit,"Someone once described Perl as ""the Cliff's notes to Unix"".",1539657759.0
zyzzogeton,"A classic answer, which is still true in my opinion, is perl's ""[whipupitude](http://modernperlbooks.com/mt/2012/07/whipupitude-versus-very-serious-perl.html)"" in that it is easy to ""whip up"" proof of concept code quickly to test an idea out.  Sometimes that code works well enough that it just ends up in production... which is also one of perl's strengths... but also a weakness in that an apparently obfuscated one liner that ""just works"" and uses weird default variables and very odd, seemingly undocumented (and nearly ungoogleable) non standard syntax is a bitch to maintain.",1539661652.0
2A_is_the_best_A,"Glue. I know of no other language that makes it as easy (sometimes) or possible (other times) to stich together libraries from a bunch of different languages.

There are lots of other things as well, but I've yet to see this done well in other languages yet.",1539701623.0
AchillesDev,"Any sort of text or string processing is amazing with Perl, as is any sort of interaction with a unix system. In my previous job we used it on a massive ETL pipeline that processed millions of jobs per week, most of which consisted of text data. It was a breeze. ",1539718679.0
BLOKDAK,"When I program in Perl, it's almost as though I'm able to engage the natural language part of my brain - the part that processes spoken/written languages like English. If you think about how powerful that is, that here is this programming language that enables you to be expressive with your right-brain, well - it's powerful. I'm not saying I make great code when I'm programming like that. But when you program Perl for long enough, your intuition has a shortcut to becoming code.

That's the best thing about it. It comes out as easily as writing sentences in English (for a native speaker with good reading comprehension, I suppose).
",1539691234.0
eneville,* perlcritic,1539673000.0
frezik,"Its approach automated testing is much better than frameworks in other languages. Most other languages seemed to take jUnit as a model, and it's one layer of abstraction too many. In Perl, a test script can be as simple as printing out a series of ""ok""/""not ok"" lines. Then, if you want the extra abstraction, it's easy to add on top.

I've seen a few cases in the jUnit approach where a minor problem in using the API causes the test to pass, but never having run the test cases *at all*. This is more likely when you're first learning the API and don't realize you've made a mistake. If that happens at all in Perl (which is rare), it's at the more complicated end, when you've allowed complexity to run away from you. It's almost always obvious if you've run the test code or not.",1539695929.0
EvanCarroll,"Here, I'll give it a shot. There are a lot of things not to like about Perl, but one of the things that I do like is that everything does something, regardless of whether it's sane. For example, hashes behave as lists in list context. There is no particular reason why they should, but why the fuck not -- right? It's Perl.

     perl -we'print ""\n$_"" for %{+{foo => 1, baz => 2}}'
     perl -we'print ""\n$_"" for (foo => 1, baz => 2)'

The opposite is also true. And that makes a little more sense: because functions are only ever supplied a list of arguments declaring a function that receives a hash means that the function will coerce the list into behaving as a hash.

    perl -we'sub foo { my %args = @_; print $args{foo} } foo( foo => 1, foo => 2 );'

And, because why not. It's Perl. Perl teaches you to think like ""well that may work, so let me try it."" And sometimes that's nifty. I have production code that uses [`|=` on strings.](https://metacpan.org/source/ECARROLL/DataExtract-FixedWidth-0.09/lib/DataExtract/FixedWidth.pm#L108)",1539715281.0
ribasushi,"Something I wrote back in July 2014 for u/vtivti still mostly holds true ( although rampant mismanagement invalidated a part of this lately )


> (2014) I think the main strength of Perl definitely is not CPAN. It isn't the CPAN Testers network nor services like CPANTS. It's not the ease of prototyping a.k.a whipuptitude and not the freedom of [TIMTOWTDI](https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it). I do not even think it is the community (which by the way I personally hold very dear). No, the killer feature of Perl are its stability and ubiquity. Perl can truly be found on almost any platform: starting from the z/OS dinosaurs (if you've never heard of EBCDIC – read about it), all the way up to miniature linux distributions [crammed into an SD card](http://haxit.blogspot.de/2013/08/hacking-transcend-wifi-sd-cards.html). What's more – a well written application will work identically on any hardware and with minimal effort on any version of perl from past decade**s**. If one is to take a step back and squint just right: Perl managed to do what Java could not, and that was done despite the unfathomable differences in available financial and human resources. Perl currently holds the holy grail of “Write Once – Run Anywhere”. And I really don't think it matters that this particular feature isn't sexy and attractive for newcomers. Nor do I care that it makes the “Modern Perl” devotees roll their eyes. The feature is here, it works, and a small but sufficient contingent of key developers are ready to keep it this way. One could and should rely on this.",1539675002.0
rrohbeck,"I once wrote a data analysis script within a few hours because we had made more than 65,535 widgets in one quarter and the Excel spreadsheet blew up. Import CSV, mangle the data and run the same statistics as the spreadsheet, write CSV. Done.",1539661054.0
digimer,"Systems level stuff, hands down. It's a scripting language on steroids. Making systems calls, database calls, processing their output and taking actions on that data. It's strength as a web programming language was, I think, more from the early days. I think modern stuff like Python, Ruby and Go (and others) are better for web stuff.

I say this as someone who writes backend and front-end code, all in perl. ",1539658924.0
EvanCarroll,"My favorite thing about these threads is the absolutely insane things people come up with

* *""Painters pallet""*
* *""creative computing""*
* *""whipupitude""*
",1539668900.0
FiniteStates,Its the JB weld of \*nix. ,1540068444.0
smutaduck,"perl scales better than anything else I know (for a given value of scale). From thowaway onliners to huge applications [1], it can do it all.

[1] Here be dragons - huge applications can be a mess in any language.",1540434506.0
Philluminati,"Python is a better Perl for any non-trivial script these days and to be honest I think we could simplify and improve a lot of Linux distros by putting in a concerted effort to eliminate Perl entirely.

Problems with Perl include:

* duplicate ways of declaring things (reference vs non-reference)
* the begin block arms-race
* no parameter declarations and people depending on “the last statement” accidentally.
* bad multi-threading support
* use of warn instead of carp croak means frustrating to debug other peoples code.
* the other 500 things people do from PBP because they have no brains. (Eg return false instead of undef)
* people using wantarray (e.g. Dbix::class)
* try catch implemented by using two closures (which subtly changes return keyword behaviour and has a syntax gotcha)
* forgetting to use <=> instead of eq or vice verse.
* having to read the same blog post every week that you aren’t using the right open file method.
* people who think “use utf8” makes your app support utf8.
* having to “use strict; use warnings” everywhere, but oh no not in Dancer, we import it for you so you can forget that easy to follow and consistent rule you had for everyone.
* having to convert objects between blessed/moose etc
* serialisation libraries that can’t decode booleans or “1” (number-as-a-string)
* no sane sigterm/interrupt handling. Hope that library with a thousand dependencies doesn’t interfere with your shit bro.
* cpan generally crashes out of the box on Debian last time I checked. Thousands of failing tests and locale comparison failures.
* having to use a push function that can’t use a reference because it’s overloaded poorly.

I forget the other reasons I dislike it.",1539722329.0
daxim,"You want to read a config file, but do not describe the format in sufficient detail. If you control the config file, replace it with [ini](http://enwp.org/INI_file) and read it with [Config::Tiny](http://p3rl.org/Config::Tiny). Otherwise you need to provide the real config file, not an approximation of it.

----

Other style improvements:

Please do not retype your code, instead use copy/paste. You should not make the people who want to help you guess what the real code is.

incorrect|correct
---------|-------
`10::Socket::SSL`|`IO::Socket::SSL`
`SSL cipher list`|`SSL_cipher_list`
`'ECDH+AES128…'A`|`'ECDH+AES128…'`
`II`|&#124;&#124;

You do not need to put quotes around single variables, Perl is not shell; e.g. instead of `""${address}""`, simply write `$address`. The space in the hash key `' config'` is unusual and most likely a mistake.",1539690575.0
Grinnz,Don't let File::Slurp's high number of votes fool you: [it's fundamentally broken](http://blogs.perl.org/users/leon_timmermans/2015/08/fileslurp-is-broken-and-wrong.html) (despite genio's heroic efforts to fix the maintenance problem).,1539487810.0
anossov,"«
There have been some comments about the somewhat unusual version number.
The problem was that David used a future date (2004.0904) in his version
number, and the only way I could get CPAN to index my new module was to
make it have a version number higher than the old one, so I chose the
9999 prefix and appended the real revision number to it.
»

https://metacpan.org/source/CAPOEIRAB/File-Slurp-9999.21/README",1539480690.0
clamdiggin,"I know this isn’t what was asked. But Path:Tiny is so much easier to use for slurping files and managing paths. It is also more correct with regards to UTF-8 as mentioned in other comments above. 

There is really no reason to use File::Slurp these days ",1539521602.0
bennymack,"They wanted to mess with people who use this idiom for finding the installed version

    perl -MFile::Slurp\ 9999",1539881701.0
AbstractTherapy,Probably 0.9.21 ,1539479380.0
daxim,"[thrall](http://p3rl.org/thrall#DESCRIPTION)

Install modules:

* `Plack::Handler::Thrall`
* `CGI::Emulate::PSGI`
* `CGI::Compile`

and put into `app.psgi` (tested):

    use Plack::App::Directory qw();
    use Plack::App::CGIBin qw();
    use Plack::Builder qw();
    my $builder = Plack::Builder->new;
    $builder->mount(
        '/' => Plack::App::Directory->new({root => ""/path/to/htdocs""})->to_app
    );
    $builder->mount(
        '/cgi-bin' => Plack::App::CGIBin->new(root => ""/path/to/cgi-bin"")->to_app
    );
    $builder->to_app;",1539469476.0
wrongway,[https://www.ritlabs.com/en/products/tinyweb/](https://www.ritlabs.com/en/products/tinyweb/),1539490411.0
avecfrites,why not apache?,1539465420.0
dominix_pf,Alternatively you can install cygwin and proceed like you could have done on a linux system. (If you feel more comfortable this way),1539475491.0
NicheArchitecture,There is always WSL (Windows Subsystem for Linux) if you need something quick and easy.,1539481605.0
SinanUnur,Apache 2.4 builds very easily on versions of Windows where you can install a recent version of Visual Studio. You can also install IIS.,1539469798.0
FiveYearsAgoOnReddit,"Just because it isn't here already, if you've got Python installed you can start a web server on the command line.

https://docs.python.org/2/library/cgihttpserver.html

I use it at work and it runs Perl CGI just fine.",1539503652.0
DigitalCthulhu,Seems like Keno Antigen will never launch (sad tears here).,1539449511.0
zoffix,"Great game.

Don't have any free time to play it anymore, but I still log in almost daily to do a gym workout and hit the market for some cheap rations.",1539473359.0
minimim,"Larry Wall is a linguist and has talked about it, you should seek his interviews. He also explains it in his books.",1539377867.0
choroba,"dclone() creates a ""deep copy"" of a structure. In Perl, nested structures are created by references, if you say

    my $ref1 = { key => [ ""a"", ""b"" ] };

then $ref1 is a hash reference which stores an array reference under its only key. When you assign 

    my $ref2 = $ref1;


$ref2 now contains the same reference, i.e. both of them refer to the same hash. Changing anything in $ref2 changes $ref1 in the same way. The next step to fix it is to do a ""shallow copy"":

    my $ref3 = { %$ref1 };

i.e. you de-reference the original reference and point a new hash reference to it. Now, changing $ref3->{key} won't change the hash referenced by $ref1, but the array referenced under the key is still the same, so something like

    push @{ $ref3->{key} }, 'c';

would change the array in $ref1, too.

To get a totally independent structure, you need to do

    my $ref4;
    for my $key (keys %$ref1) {
        $ref4->{$key} = [ @{ $ref1->{$key} } ];
    }

But what if there's another reference deeper in the structure? And that's what dclone() does for you. It copies all the values to new references, regardless of how deep they are, so you can change the structure without influencing the original one.",1539352974.0
MrDavidCrane,"Dclone is storable method of ""deep cloning"".
It simply serializes the data you give it and deserializes it to create a copy of the object passed in.",1539352501.0
daxim,"Cloning means to duplicate a data structure.

Shallow cloning duplicates the top level only.

Deep cloning duplicates everything. This is used to make sure that existing references into the existing data structure are not able to change the copy. This is best illustrated with an example, perhaps another redditor can provide one.

The code you show does not appear to use the hooks mentioned specific to the Storable module: http://p3rl.org/Storable#Deep-Cloning This means you should be able to replace `dclone` with a similar working module that's hopefully faster: http://p3rl.org/Clone http://p3rl.org/Data::Clone",1539353466.0
briandfoy,"Here's my explanation: [Make deep copies](https://www.effectiveperlprogramming.com/2010/03/make-deep-copies/). But, there's also [The Storable security problem](https://www.masteringperl.org/2012/12/the-storable-security-problem/) to think about.

",1539360024.0
elcravo,Thanks guys! You really helped me understand how dclone works. Not I only have to solve that bug :D,1539355674.0
WhatTheGentlyCaress,There is a [pandoc module](https://metacpan.org/pod/Pandoc) available that might work for you.,1539239038.0
plainblackguy,Just posting in case you get an answer.,1539232062.0
briandfoy,My [The Effective Perler](https://www.effectiveperlprogramming.com/) site covers most of the new features of each Perl.,1539182541.0
tm604,"YAPC or TPC searches on Youtube might show up a few useful videos, if you're into that sort of thing.

https://www.youtube.com/user/yapcna

Any particular area you're interested in?",1539166857.0
Cyclinged,"I thought Paul Fenwick's ""The Perl Renaissance"" from linux.conf.au 2013 was an inspiring overview of a selection of modern Perl resources and modules.  He champions the use of cpanm, Moose, perlbrew, Dancer and more.  Highly recommended.  [http://lanyrd.com/2013/linuxconfau/szzxt/](http://lanyrd.com/2013/linuxconfau/szzxt/)",1539169421.0
davorg,"This might be a good start - [Top 20 Perl Programming Blogs, News Websites & Newsletters in 2018](https://blog.feedspot.com/perl_programming_blogs/).",1539161717.0
rage_311,"As far as good, modern Perl code bases are concerned, in my opinion, it doesn't get much better than Mojolicious:  
https://github.com/mojolicious/mojo  
https://mojolicious.org/

It's very elegant, consistent, and clever without being unreadably clever.",1539187301.0
dale_glass,"You're doing it wrong, the whole point of IO::Socket::SSL is to avoid all the getaddrinfo() and socket() stuff. The manpage you should be reading is IO::Socket::SSL (or ""perldoc IO::Socket::SSL"" which is really the same thing), not Socket.

For IO::Socket::SSL it's simply:

    my $sock = IO::Socket::SSL->new($ai->{addr});",1539088100.0
scottchiefbaker,"If I understand this correctly, there is now a Perl6 VM that can run inside of JS?",1539038344.0
gdjfklgj,"Hey, this https://perl6.github.io/6pad/ is a super cool stuff!! Is it really running inside the browser?

Is there already a way to manipulate the DOM with Perl 6, and tap on browser events? Or at least to access the javascript browser API?

Will be finally allowed to do: <script language=""perl""> ",1539243287.0
sunshine_killer,i get moarvm and the jvm but JavaScript....why,1539049016.0
daxim,"If you have errant newlines and don't know what you're up to, trust [`\R`](http://p3rl.org/perlrebackslash#\\R).

    › hex f*
    ---- f0 ----
    0000  30                                                0
    ---- f1 ----
    0000  31 0d 0a                                          1..
    ---- f2 ----
    0000  32 0d 0a 0d 0a                                    2....
    ---- f3 ----
    0000  33 0d 0a 0d 0a 0d 0a                              3......

    › perl -MYAML=Dump -0777 -lne'
        my ($tail) = /(\R*)\z/;
        printf ""file_name: %s\tCRLF_count: %d\tnewlines_dump: %s"",
            $ARGV, scalar(() = $tail =~ /\r\n/g), Dump $tail
    ' f*
    file_name: f0   CRLF_count: 0   newlines_dump: --- ''
    file_name: f1   CRLF_count: 1   newlines_dump: --- ""\r\n""
    file_name: f2   CRLF_count: 2   newlines_dump: --- ""\r\n\r\n""
    file_name: f3   CRLF_count: 3   newlines_dump: --- ""\r\n\r\n\r\n""
",1539021021.0
Grinnz,"I assume you mean to find where lines end in CRLF instead of just LF.

`perl -E'my @lines; push @lines, m/\r$/ ? $. : () while readline; my $count = @lines; say ""Count: $count, Lines: @lines""'  foo.txt`

Note that on windows, CRLF is translated to \n by default, so you might need more complicated logic.",1539018760.0
briandfoy,Don't use smart matching. It was a stable feature for a bit then turned into an experimental one. It has almost no chance of being stable again. [`given-when` was almost removed from v5.28](https://www.effectiveperlprogramming.com/2017/12/beware-of-the-removal-of-when-in-perl-v5-28/).,1538941824.0
Grinnz,"Yes, that's why it is marked experimental. What aspect of smartmatch are you looking to use?",1538934887.0
PleaseBeSerious,Yes,1538939064.0
tektektektektek,"Rakudo is hands-down the best.

Three syllables, so a little tricky, but difficult to confuse when Googling.

Easy to pronounce in a consonant-vowel pairing in each syllable.

Translatable to Japanese, Russian.

Issues with Camelia:

   * 4 syllables
   * has confusing vowel-vowel pair
   * uses a C as a hard K sound
",1538902328.0
saiftynet,"As a Perl 5 user, one hopes that the name change might encourage modernisation of Perl 5 instead of the distraction to Perl 6",1538904300.0
WebFishingPete,"The discussion would speed up a lot when the next release of Perl 5 would be Perl 7.

Some might argue this is offensive. But hey, this Perl 6 guys over there are completely different and just by historical accident, have the same name. So, why care? Just do it.",1538900673.0
pcjftw,"**Star 6**

> *6 its a pointer to Perl 6 ;)",1538990781.0
bastardoperator,"I'm just going to say it as someone that has written a fair amount of perl, and really does like the language. Perl 6 marketing is trash. The [Perl6.org](https://Perl6.org) site looks like amateur hour. From it's bootstrap template down to it's color scheme. Unfortunately, we know people judge books by their covers. The butterfly is childish, and I get that it should be considering it's origin, but it doesn't convey the message of ""use this language"".

&#x200B;

When we look at other language org pages you can see a big difference:

[https://www.ruby-lang.org/en/](https://www.ruby-lang.org/en/)

[https://www.rust-lang.org/en-US/](https://www.rust-lang.org/en-US/)

[https://golang.org/](https://golang.org/)

[https://www.python.org/](https://www.python.org/)

[https://elixir-lang.org/](https://elixir-lang.org/) 

&#x200B;

Perl 6 has features most languages wont see for another ten years. It's a work of art and I appreciate all of the hard work many people have put into it. I haven't used it for anything professionally but I do dabble from time to time checking in regularly and watching it evolve. I'm consistently amazed with it's features. I just wish they could hire someone with some marketing skills and a frontend developer to push their message. ",1539015871.0
ether_reddit,"> With the 6.d release around the corner...

So if ""6"" is part of the language name, how can it *also* be part of the version number? Shouldn't this be the 1.0 d release, or something like that? Or is Perl 6 also doomed to never get a major version bump, just as Perl 5 is?",1538969484.0
plainblackquy,"I'm really grateful for all Larry has created, but given that Perl 6 was the community's rewrite of Perl, it feels wrong that the community's opinion is (evidently) disregarded. Where's the benevolence?",1538922523.0
lindleyw,"A well reasoned and well written article, which begs the question: Is the one person in the universe who remains to be convinced, willing to listen?",1538890575.0
cjxgm,"""Camelia"" sounds like a good alias to me.",1538890530.0
sxw2k,Rakudo +1,1539060622.0
leaningtoweravenger,"TL;DR please change name because I feel ashamed of telling other Hacker News chaps that I use Perl

/s (but not too much)",1538890320.0
bdmatatu,"How about `px`?  (or `p5x`, like `i18n`)",1539607590.0
marcusramberg,💖,1538897117.0
mao_neko,Nice.,1538908711.0
,[deleted],1539119137.0
briandfoy,"A curious article with some serious research. 

Here are some interesting things I pulled out of it:

> Perl’s success in the 1990s was tied to its culture of synthesis, or having it both ways.

> Wall’s work suggested a commitment to a civic order of worth, or regime of justification that privileges the interests of collectives over individuals

I don't know if this is true but it seems plausible:

> Given that the first version of the GPL was published just a few months before Perl 3.0 was released, Perl was likely one of the first non-GNU projects to bear the license.

Having been in the room when Perl 6 was invented, I'd agree that what we have now is much more modest than what we thought we'd have in 2001 (but, isn't that the case in any green field development):

> Perl 6’s development trudged forward, but in its nearly 20-year history implementations have yet to live up to the lofty goals outlined by Wall and the community at the outset.",1538927962.0
wsppan,"The page you were trying to reach cannot be found.

Not sure why the upvotes?",1538754371.0
xeeeeeeeeeeeeeeeeenu,It's funny. They asked for community's feedback but their moderation isn't approving submitted comments. ,1538762558.0
tm604,"yay, comments are finally showing up - the mention of having to remove 700 spam messages is depressing, perhaps the next Perl5 grant needs to be for machine learning...",1539049032.0
sunshine_killer,very cool.,1538584272.0
sigzero,"Excellent work.
",1538594052.0
choroba,"I don't know where you found the snippet, so I wrote a new one:

    #!/usr/bin/perl
    use warnings;
    use strict;
    use feature qw{ say };

    sub dircompare {
        my ($dir1, $dir2) = @_;
        opendir my $dh1, $dir1 or die ""$dir1: $!"";
        opendir my $dh2, $dir2 or die ""$dir2: $!"";
        my %size1 = map { $_ => -s ""$dir1/$_"" } readdir $dh1;
        my %size2 = map { $_ => -s ""$dir2/$_"" } readdir $dh2;
        for my $file (keys %size1) {
            return if ! exists $size2{$file} || $size1{$file} != $size2{$file};
            open my $fh1, '<', ""$dir1/$file"" or die ""$dir1/$file: $!"";
            open my $fh2, '<', ""$dir2/$file"" or die ""$dir2/$file: $!"";
            while (sysread $fh1, my $buff1, 65535) {
                sysread $fh2, my $buff2, 65535 or return;
                return unless $buff1 eq $buff2;
            }
            sysread $fh2, my $buff, 1 and return;
            delete $size2{$file};
        }
        return if keys %size2;
        return 1
    }

    say dircompare(@ARGV);
",1538388540.0
spizzat2,"Will there be a hard copy of the book?

I bought several ebooks in the past. I have yet to complete a single one. I just don't like reading them. I find it hard to maintain focus.",1538406880.0
flexibeast,"Well, for a start, this:

> open ($FILE3, '<',$finalPath or print ""failed"");

should be this:

> open($FILE3, '<', $finalPath) or print ""failed"";

But of course, if the `open` fails, why go on to try to do things with the filehandle?",1538370998.0
davorg,"You're passing three arguments to `open()`:

1. `$FILE3`
1. `'<'`
1. `$finalPath or print ""failed""`

The last one is probably not what you intended. I think you wanted:

    open ($FILE3, '<',$finalPath) or print ""failed"";

But, because of the way Boolean expression evaluation works, this actually doesn't cause your problem (although you'll never see the error message and you won't know if the file is opened successfully).

In order to be more help in tracking down the actual problem, we'd need to see more of the code. And you'd need to tell us which line it is that generates the error.

Also, just printing ""failed"" isn't a great way to deal with an error from `open()`. I'd recommend killing the program with a useful error message at that point. And use a lexical variable for `$FILE3`.

    open (my $FILE3, '<', $finalPath)
      or die ""Cannot open '$FILE3': $!\n"";
",1538379117.0
perimus,TIL about the *defined-or* operator `//=` : thanks for that,1538339096.0
Aliessil,"/(\\d+):(.\*)/

The round brackets are to capture the matches in $1 and $2 respectively.",1538293739.0
dale_glass,"you can also do:

    ($num, $file) = split(/:/, $input_line);

This doesn't have the benefit of checking whether the first one is a number, though.",1538314585.0
sprocket,"my $str = ""12:sound.wav"";

my ($num, $file) = $str =~ /\^\(\\d+):(.+)$/;
",1538347915.0
dajoli,"The error arises because the style of ""while"" loop you are using is trying to read from $outFh, but $outFh is only opened for writing.

I would advise breaking down the problem further. For now, don't worry about the output file. First, see if you can print the required data to standard output (i.e. you see it in the console). When you can do that, then it's easier to modify your code to print the same thing in the file instead.",1538232164.0
dale_glass,"By the way:

    die join("" "", ""Can't open outfile"", $outFh, ""for writing:"", $!);

is over-complicated. This does the same thing:

    die ""Can't open outfile $outfile for writing: $!"";

Variables are interpolated inside double quotes. If you don't want that, use single quotes instead.

**edit:** Also, a more idiomatic way would be:

    open ($outFh, "">"", $outfile) or die ""Can't open outfile $outfile for writing: $!"";


The 'unless' isn't incorrect of course, but Perl has a certain style to it that a lot of people use, and it's good to at least be familiar with it.

**edit2:** You want to print $outfile, not $outFh. $outfile is a human-readable name, $outFh is a filehandle that doesn't tell people anything useful.

",1538242122.0
davorg,"This is strange:

    while (<$inFh>) {
      print $_;
      my @arr = <$inFh>
    }

As you read all of the file into `@arr` on the first iteration of the loop, there's nothing left for any subsequent iterations.

It's basically the same as:

    print scalar <$inFh>;
    my @arr = <$inFh>;

But in your version, `@arr` goes out of scope immediately, and you lose all of the data.

The second time you do it is even weirder, as that time you read from `$outFh` - which is your output filehandle. So that's what is causing your error.

Oh, and then at the end, you create another array called `@arr`, and populate it by reading all of the data from `$inFh`. But as you've already read all of the data from that filehandle, you end up with nothing in `@arr`.

I'm afraid your code is all rather confused. It's hard to help much as I can't work out what you were trying to achieve.",1538249664.0
eritain,"Part 1. This code is right, but you may not understand it:

    open ($outFh, "">"", $outfile)

`$outFh` contains the filehandle you're opening. `$outfile` contains the name of the file it's a handle for. What about `"">""`? It's pointing *into* `$outfile` so it says to make a filehandle that writes to `$outfile`. Writing is the filehandle's **mode.**

(Specifically, `"">""` mode replaces anything that's already in `$outfile`. [Here are the docs for `open`](http://perldoc.perl.org/functions/open.html) if you want to read more about that.)

Part 2. This is wrong:

    <$outFh>

`<>` is the [**readline operator,**](http://perldoc.perl.org/perlop.html#I%2fO-Operators) and the filehandle you're reading from goes inside. Perl is giving you the ""line 24"" warning because you're trying to read from a filehandle that's in write-only mode. The 24th line of your code is the first (but not the only) place you've made that mistake. 

Part 3. This is right:

    close $inFh;

It's good hygiene to close your own filehandles as soon as you don't need them anymore. 

Part 4. This is well-formed Perl, but it's not what you want to do:

    while (<$inFh>) {
        my @arr = <$inFh>
    }

You can either read the lines from `$inFh`one at a time (with the `while` loop) or you can read them all at once (with `@arr = <$inFh>`, but mixing the two approaches will not do what you want.)

""Wait,"" you might be asking, ""so does `<>` read one line or all the lines? You said both."" I did say both. Perl operators and functions can do different things, depending on what you say you'll do with their return value. This is called **context.** If you are returning to something that expects one value, it's called **scalar context,** and `<>` will return the next line it hasn't read yet. The `while (<>)` form assigns to `$_` so it's a scalar context. If you are returning to something that expects a list of values, it's called **list context,** and `<>` will read *all* the lines it hasn't read yet and return them all. Assigning to `@arr` is a list context. So your code is going to put the first line of the file into `$_` and the rest of the lines into `@arr`.

One other thing. You've declared `@arr` with `my`, which is a good practice. A `my` declaration limits which lines of code can get to that array via the name `@arr` (and that means that in the rest of your program, you don't have to worry about messing the array up by accidentally reusing the name `@arr`). But in this case, it's a little too limited. The `my` is inside the `while` loop body, which means that the name `@arr` is only visible inside the loop body. The loop body is its **scope,** and if you use the name outside that scope, Perl won't know what you're talking about. In fact, the scope of `@arr` is a single time around the loop: If the loop body runs more than once, each iteration gets its very own `@arr`, unaffected by what was in `@arr` the previous time around. 

OK, one other other thing. Descriptive names. `$inFh` and `$outFh` are good names. I would probably just call them `$in` and `$out` but if your assignment requires the `Fh` part, whatever. `@arr` is not a good name. We already know it's an array from the @ sign. Tell us what's in it, maybe `@lines`. 

Part 4. At the end of your code, you again say

    my @arr = <$inFh>;

which is where the ""line 30"" error message comes in. You already closed `$inFh` which means you can't use it anymore. So `<>` chokes on it and complains.

Part 5. You should write your output to a different file than you get your input from. You are going to run your code several times in the process of working it out. If you overwrite `fastaFile.txt` each time, you have to put it back the way it was before you can run the code and read from it again. 

Part 6: Resources for you. 

1. You need to know about [perldoc.](http://perldoc.perl.org/) When error messages say things like 'See ""open"" in perlfunc,"" `perlfunc` is the name of a perldoc page that has a summary of Perl's built-in functions, including `open`.
2. [Modern Perl](http://modernperlbooks.com/books/modern_perl_2016/index.html) is probably the best book for beginners, and you can read it online for free. Start with [The Perl Philosophy.](http://modernperlbooks.com/books/modern_perl_2016/01-perl-philosophy.html#VGhlUGVybFBoaWxvc29waHk).
3. If the best book for beginners is *not* Modern Perl, it's probably Learning Perl. Mostly they cover the same things, but from different angles, so I recommend you read them in parallel. You can find a used copy cheap. 4th edition or later will all be fine. 
4. Avoid any tutorial materials that call it PERL (in all caps). Trust me on this. ",1538272923.0
tarje,or you can use standard unix tools: `sort -nr` and `wc -l`,1538210938.0
FiveYearsAgoOnReddit,"Here's one way just off the top of my head:

	my %lines = ();
	while(<>){
		chomp();
		my ($number,$line)= split(' ',$_,2);
		$lines{$number}=$line;
	}
	foreach(sort {$a <=> $b} (keys(%lines))){
		print ""$_ $lines{$_}\n"";
	}

you would run it like `scriptname.pl logfilename`;

… *But*, it's probably better to solve this problem some other way.

What's going on with this part of your question?

>It seems hard to append a new line at the bottom of the file

What are you trying? What happens when you try? It should not be hard to append a line to the bottom of a file.",1538208811.0
Grinnz,"While I don't mind the occasional Rakudo news as it relates to Perl, can we have the bot repost this particular blog to /r/perl6 instead?",1538236347.0
Grinnz,"All servers I develop Perl on have Perls separate from the system perl, whether it's just a standalone Perl from [perl-build](https://metacpan.org/pod/perl-build) or multiple Perls managed by [plenv](https://github.com/tokuhirom/plenv). Then for any project I manage its dependencies in a [cpanfile](https://metacpan.org/pod/cpanfile), which allows me to either install its dependencies as necessary or install and track them locally in [Carton](https://metacpan.org/pod/Carton). The carton bundle can be included along with the deployment and installed with cpanm on the build server for production.",1538236092.0
waterkip,"I use a combination of locallib and Docker for my development env. I run tests on my local box with locallib and then I have Gitlab CI with Docker for pipelines.

At work we use primarily Docker, so every developer has the exact same development environment. So they grab a Perl layer with all the deps installed and hack away.

For a presenation about Docker and perl: https://youtu.be/Y3TH8dJhEwE?t=1465
https://gitlab.com/waterkip/docker-yapc/

And the speaker of this talk does it a bit different: https://youtu.be/9QYBMNRaFw0?t=7480. He has a docker image with perlbrew.

If you are going to take the Docker route I would look into Docker Compose, it is really easy to setup a database and additional services within a project.
 ",1538306672.0
smutaduck,"I’m currently working on a sane plenv based Docker environment to spin up microservicesish things.  Complicating factor - for work purposes, oracle is involved. Plenv is your friend, Docker or otherwise. ",1538207151.0
jteikon,"Docker Perl Image. I have separate configurations so I can run docker-compose to run tests, dev mode, and production mode once deployed. Each docker compose file, is about 8 lines long. 

&#x200B;

All dependencies are pulled into the container, so once Jenkins pulls an image to build the container and run the app, it works the same as on my laptop. I love this.",1538264373.0
pfp-disciple,"I forget the exact syntax, but you want to provide a custom compare. Something like

    # I'm pretty sure this isn't exactly right, it's been a few months...
    sort { $b->{found_count} <=> $a->{found_count} || $b->{level} <=> $a->{level} } values %cefr

The idea is to compare by `food_count`, and if they are equal then compare by `level`. ",1538165258.0
Md8X5s7LY04cr3cMUTfm,"I suspect you are looking for a combined comparison:

`sort { $b->{found_count} <=> $a->{found_count} || $b->{level} <=> $a->{level} } values %cefr`

Nonetheless an example with the desired output would be helpful…",1538165680.0
daxim,Please edit the question and provide `%cefr`.,1538164306.0
jplindstrom,"The answers by /u/pfp-disciple and u/Md8X5s7LY04cr3cMUTfm shows a good way to do this in vanilla Perl.

What follows is probably a bit heavyweight for *just* sorting something, but IMHO a good example of a succinct and readable way to sort more complex things:

    use autobox::Core;
    use autobox::Transform;
    
    my %cefr = (
        abc => { found_count => 2, level => 1 },
        def => { found_count => 5, level => 2 },
        ghi => { found_count => 5, level => 8 },
    );
    
    for my $stat ( %cefr->values->order_by(found_count => [""num"", ""desc""], level => ""num"") ) {
        print ""found_count: $stat->{found_count}, level: $stat->{level}\n"";
    }

Output:

    found_count: 5, level: 2
    found_count: 5, level: 8
    found_count: 2, level: 1

This uses `autobox` which makes it possible to call methods on regular Perl datatypes like hashes, arrayrefs, etc. So pretty far from vanilla Perl, but quite nice for some things, sorting in particular.

(note: I wrote [autobox::Transform](https://metacpan.org/pod/autobox::Transform), so there's your bias :) )",1538392420.0
gslavik,"My initial though is to filter through ever possible found_count (that appears in the list). Then I thought about about splitting the array of hashes into slices based on the same found_count. At some point while writing this reply and thinking of how I would do it, I thought ""don't sort the list, dummy. sort the indexes instead"".

Finally, I think the best way would be a radix sort. You can make it generic and pass a list of keys in the on which to sort based on them.",1538164555.0
trwyantiii,"There is no Perl built-in called ""move"". You need to

&#x200B;

`use File::Copy;`

&#x200B;

to have it available to you. The built-in is ""rename"", but File::Copy comes with Perl since 5.2, and appears to be what you want.

You also want to check the return status of your ""move"". Something like

`move( ... ) or die ""Failed to move file: $!"";`

will save trouble down the road. I suspect trouble based on the fact that your description says you are trying to move the file to the `apples` directory that is a subdirectory of `Desktop`, but your code tries to move it to a top-level directory.

&#x200B;

One more thing -- there is no need to quote $file when you pass it to move().",1538140374.0
aioeu,"> Undefiend subroutine &main::move

Modulo the typo, that's pretty clear. You're calling a sub that doesn't exist.

Did you intend to use the `move` sub from [`File::Copy`](https://metacpan.org/pod/File::Copy)? If so, did you `use` the module and import this sub?

Alternatively, did you want to use the [`rename`](https://metacpan.org/pod/distribution/perl/pod/perlfunc.pod#rename) builtin? If so, you'll have to make sure the target is the desired new filename, not just a directory name.",1538139861.0
until0,"You could use try and make a unique selector that doesn't involve an ID, maybe something like:

    button.button.js-multirecommendCountButton[data-action-value]

Although you would need to check to see if that pulls a unique element. You might also be able to use the parent to help select, but without knowing the HTML structure, it's tough to say.

You'd likely be better off triggering a form submit manually as opposed to attempting to click the button to trigger the action.

https://metacpan.org/pod/WWW::Mechanize#$mech-%3Esubmit_form(-...-)",1538077787.0
gslavik,How does this compare with something like Test::More?,1537998316.0
anossov,"`$sep` will take the first value, and `@list` will take the rest.

Just try it!

This isn't really about  `@_` or `my`, it boils down to assigning a list to a list.

So:

    ($a, @b) = (1, 2, 3, 4) 
    # $a is 1, @b is (2, 3, 4)
     
    ($a, $b, @c) = (1, 2, 3, 4)
    # $a is 1, $b is 2, @c is (3, 4)

    # The first list on the left side eats everything it can:
    ($a, @b, $c) = (1, 2, 3, 4)
    # $a is 1, @b is (2, 3, 4), $c is undef

    # You can skip values by using undef on the left side:
    ($a, undef, @c) = (1, 2, 3, 4)
    # $a is 1, @c is (3, 4), 2 is skipped",1537997491.0
Grinnz,"To clarify, that whole expression is still in a list context, just one item in the list is a scalar variable. Assigning @_ to any list of things will assign its first element to the first thing in the list, the second to the second, and so on. `@list` in your example ends up slurping up the remaining items after the first is assigned, if any.

Further reading: http://altreus.blogspot.com/2011/08/lists-and-things-made-of-lists.html",1538002201.0
davorg,"> As I understand it, @_ is all the variables in a list context

That's not really accurate. `@_` is an *array* (not a list, the two things are very different in Perl) which contains all of the *parameters* (parameters don't need to be variables) that were passed to the subroutine.

There are basically two things you need to know in order to understand list assignment in Perl.

1. List assignment works from the left-hand end of the two lists and assigns values from the right-hand side of the `=` operator into the variables on the left-hand side.
1. Arrays on the left-hand side are greedy and will take all remaining values from the right-hand side.

Some simple list assignments:

    ($x, $y) = (1, 2);   # $x is 1 and $y is 2
    @array   = ($x, $y); # @array contains the list (1, 2)
    @array   = (1, 2);   # Same effect
    ($x, $y) = ($y, $x); # $x is 2 and $y is 1

Let's make it a bit more complex:

    ($x, @array) = (1 .. 10); # $x is 1 and @array is (2, 3, ... 10)
    (@a1, @a2)   = (1 .. 10); # @a1 is (1 .. 10) and @a2 is ()
                              # (because @a1 is greedy)
    (@array, $x) = (1 .. 10); # @array is (1 .. 10) and $x is undef
                              # (for the same reason)

So, let's look at your example. Assume we call the subroutine as:

    my_join(',', 1, 2, 3);

This means that `@_` contains `(',', 1, 2, 3)`. And the first line of your subroutine is the equivalent of:

    my ($sep, @list) = (',', 1, 2, 3);

So `$sep` is given `,` and `@list` contains `(1, 2, 3)`.

But as others have said, just try it. See what happens.

    sub my_join {
      my ($sep, @list) = @_;

      print ""sep is: $sep\n"";
      print ""list is: @list\n"";

      # rest of your code
    }

    my_join(',', 1, 2, 3);

If you see behaviour that you don't understand, feel free to ask here.",1538144290.0
arsenale,any sample chapter available? thanks,1537996430.0
Paddy3118,"Vivid green on black text detracts from the message.
",1537975255.0
ThirdEncounter,What's your level of proficiency in other programming languages?,1537937462.0
Yourothercat,Got a link to it? Wouldn't mind checking it out myself.,1537941500.0
hobbified,"Git in *anything* isn't the easiest project, but it could be an interesting experience for sure, and Perl is up to the job. For an example of a small piece of the work you'd have to do (sans Perl), I recommend looking at [this](https://stackoverflow.com/questions/36657399/assigning-gits-sha-of-a-directory-without-git/).

If you're interested in seeing someone else's work on implementing Git stuff in Perl, look at Git::PurePerl, which is used as the backend for Gitalist, a gitweb/viewvc type thing written in Perl and Catalyst. That's not a git CLI, so it doesn't solve the same exact problem, but it should give you an idea how to deal with the git data structures.",1537968215.0
bookperl,"The best way to learn a programming language is to have some project and build it with it. The project itself doesn't really matter, so long as it motivates you enough.

For some existing Git object database access modules in Perl, you can have a look at Git::PurePerl and Cogit. I didn't like the duplication of read/write objects in Git::PurePerl, so when I wanted to force myself to learn Moose, I made my own version of it with Moose.

This eventually led to more Git-related stuff: http://blogs.perl.org/users/book/2016/09/announcing-gitdatabase.html",1538120070.0
joadbrotherfollower,"This would be a great project, and I have done similar before.

I would do the following, with reference to: [http://eagain.net/articles/git-for-computer-scientists/](http://eagain.net/articles/git-for-computer-scientists/)

* Create a set of classes representing each of the storage types, in abstract, listed in the above. Don't worry about reading actual data yet, but think through the attributes each should have, and how they should link to each other. Build some tests that represent some very simple branches, commits, etc, to check your model works. You could have extra fun by creating some graphing functions that take an object, and use GraphViz to draw what you have
* OK, now start with playing around with the structure of an actual repository, read-only. Start with a tool that given a local git directory and the hash of a blob can instantiate one of your classes with that. Add any methods you missed in your original blob class. Build up through the storage types again, allowing them to be read from a passed-in directory. Eventually get to a point where you can read most of a simple repo, and then use your graphing tools to draw it
* Try writing some repository filters at this point, that take an input repository, apply some changes to it, and then write out an output repository with the same structure. Have a filter for removing all traces of a file that was checked in, so it no longer appears in the history. Maybe one to retroactively run a code formatter over each of the files in a repo for each commit? Generalize it so that a function that makes the changes can be passed in, and you've written the code to just go through commit by commit, apply the function, write out a new commit in a different repo. If you want something \_really\_ challenging, try writing something that would support a function that splits each commit into a series of smaller commits, each affecting only one file. At that point you've become properly comfortable with creating and editing commits
* Write a script to diff a directory on the filesystem with the directory at a certain commit in the tree in a git directory
* Learn more about how stage and stash are implemented

For your capstone, write a transform that takes a repo, and rewrites it, such that every commit starts with a specified prefix. This will get exponentially harder the longer the prefix you target, but by this point you should have a pretty good idea how to do it.

Happy hunting!",1538219446.0
petdance,I don't think this would be a good choice for learning a new language.,1537929693.0
HerbyHoover,Looking forward to part 3!,1538014765.0
0rac1e,"[`Function::Paramaters`](https://metacpan.org/pod/Function::Parameters) supports `:$named` arguments similar to Perl 6.

    use Function::Parameters { sub => 'function' }; # Use 'sub' instead of 'fun'

    sub foo($bar, :$baz, :$qux) {
        say ""bar: $bar"";
        say ""baz: $baz"";
        say ""qux: $qux"";
    }   

    foo('BAR', qux => 'QUX', baz => 'BAZ')

Output:

    bar: BAR
    baz: BAZ
    qux: QUX

This is _absolutely_ a feature I hope makes it's way into the core signatures.",1537852605.0
MattEOates,"Just double checking you're aware of modern signature functionality from the last 4 major releases of Perl 5? As it does exactly what you want. There are also CPAN modules to get the same thing  as your hashing needs backwards compatible to much older Perl 5. Probably a lot easier than rolling your own. Though the generality of doing this for any unpack is interesting.

    use v5.20;
    use feature 'signatures';
    no warnings 'experimental::signatures';
    
    sub _build_r_z($self, $f=, $beta_star=, $beta=, $r0=, $z0=, $xi=) { ... }
",1537823412.0
briandfoy,"I don't think any of these approaches will keep you from accidentally putting the wrong value in the wrong place. Even when I've labeled arguments I've done stupid things like `y => $x, x => $y`.

",1537831053.0
tm604,"Not really an answer to your question, but regarding lexical_unwrap: I think you'd need to defer the lookup, I'd expect `peek_my` won't have the information yet if you try to declare the variables in the parameter list.

For example:

    $ perl -le'
    use strict;
    use warnings;
    use PadWalker ();
    sub lexical_unwrap {
     my @in = map PadWalker::var_name(1, \$_), @_;
     sub {
      my $args = shift;
      my $vars = PadWalker::peek_my(1);
      for my $var_name (@in) {
       my ($name) = $var_name =~ /\$(.+)$/ 
        or die ""invalid parameter passed, expects scalars only"";
       die $var_name . "" not found in args""
        unless exists $args->{$name};
       ${$vars->{$var_name}} = $args->{$name};
      }
     }
    }
    # Make sure the variables are created in one statement...
    my $setup = lexical_unwrap my ($x, $something, $z, $y);
    # ... then use them in a separate statement
    $setup->({ x => 456, y => 88, z => ""hi"", something => ""xxx"" });
    print for $x, $y, $z, $something;
    '
    456
    88
    hi
    xxx
",1537847929.0
Grinnz,In general I consider anything requiring PadWalker to be too hacky for production use. Lexical variables exist for the primary purpose of not affecting or being affected by other files. The signatures feature and various keyword plugins like Function::Parameters offer a nicer approach to the problem. Perhaps your unwrap function could be implemented as a keyword. [Keyword::Declare](https://metacpan.org/pod/Keyword::Declare) is useful for proof-of-concept so you don't have to know XS or reinvent the parser to create keyword plugins.,1537850910.0
raiph,"This sounds like an opportunity for P5/P6 cross pollination:

    sub _build_r_z ( :$self, :$f, :$beta_star, :$beta, :$r0, :$z0, :$xi ) { ... }
    ...
    my ( $f, $beta, $r0, $beta_star, $z0, $xi );
    ...
    _build_r_z( :$f, :$beta, :$ro, :$beta_star, :$z0, :$xi);

The `:$f` in the sig is a parameter `$f` that's bound to the value of a pair argument with key `f`.

The `:$f` in the call is an argument `f => $f`.

Does that achieve what you want, albeit in P6? If so, can P5 follow suit?",1537835887.0
MattEOates,Jonathan Worthington has some implementations of [lock free datastructures](https://modules.perl6.org/search/?q=lock-free) using `cas` so that you can avoid the need for explicit locking in your code that are worth a look. The [stack implementation](https://modules.perl6.org/dist/Concurrent::Stack:cpan:JNTHN/lib/Concurrent/Stack.pm6) is probably the simplest to understand.,1537872494.0
aaronsherman,"More detail: https://docs.perl6.org/type/atomicint
",1537863175.0
HerbyHoover,Rookie question: what type of scenarios or projects could this functionality be useful?,1537930630.0
lasix75,That's a really nice location!,1537858575.0
m0llusk,"lol @ initial commit message: ""useless humongous commit with all the stuff"" \^_^",1537798012.0
xeeeeeeeeeeeeeeeeenu,The way how brian indents his code really grinds my gears.,1537729260.0
tm604,"Useful article! Took me a moment to realise the thumbnail did not actually say ""perl lol""...

Given the target audience, perhaps the wording here is a tiny bit misleading?

> If you change the topic you change the original value if the list source is an array (the values are read-only otherwise and you’ll get an error)

Since it's iterating over a list of values, arrays are (mostly!) irrelevant here:

    for (3) {
     ++$_; # this is not going to work so well
    }

(the exception for an array that you modify in the loop is covered well, kudos)

I find it's not always immediately obvious to new Perl programmers that constructs such as this are valid:

    for(my $x = 7) {
     ++$_; # totally fine, if somewhat pointless
    }

or, maybe more useful:

    for($some_variable) {
     s/\s+$//; # trim trailing whitespace
     s/^\s+//; # trim leading whitespace
    }

or even

    s/\s+/ /g for values %hash; # normalise spaces

(edit: fixed spacing on examples)",1537719428.0
mschweini,Huh. I didn't know that $_ was an alias and can be used to manipulate the original array. Cool!,1537731219.0
RoganTheGypo,Pearl lol?,1537731602.0
pmz,is there a tutorial on Perl?,1537717492.0
Quipyowert,"[https://perldoc.perl.org/perlintro](https://perldoc.perl.org/perlintro) or type ""perldoc perlintro"" into a terminal (except cmd or powershell).

oops I meant this to be reply to pmz.",1537768621.0
petdance,"I went to go look at it and saw that I already did and was no use back then, either. :-(",1537417276.0
ltriant,"I'm happy to get involved.

In the past for modules that I use regularly there have been existing pull requests on github, but they're often so incredibly stale (12+ months old) and I'm not even sure they're worth reviewing anymore, because it certainly looks like the author hasn't touched them. Or is that a common thing?",1537487829.0
sshaw_,You can try tagging the PRs with [Hacktober Fest](https://hacktoberfest.digitalocean.com/). ,1537579603.0
leonmt,I have 2 bottles at home. They can be bought at many Perl events ;-),1537387891.0
liztormato,"[Fine Wine](https://www.schmitt-weber.de) from [Perl](https://en.wikipedia.org/wiki/Perl,_Saarland)!",1537381106.0
saiftynet,Probably made in a perlbrewery,1537372381.0
liztormato,Wendy van Dijk has made a Flickr album of Perl Wine: https://www.flickr.com/photos/wendyga/sets/72157673618245248,1537435381.0
tm604,"Note that the same applies to a pad slot, for example:

    $ perl -e'use Devel::Peek; for(1..2) { my $x; $x = ""x"" x 1_000_000 if $_ < 2; $x = """"; print Dump($x) }'
    SV = PV(0x55c07e99efd0) at 0x55c07e9c5370
      REFCNT = 1
      FLAGS = (POK,pPOK)
      PV = 0x7fc35199d010 """"\0
      CUR = 0
      LEN = 1000002
    SV = PV(0x55c07e99efd0) at 0x55c07e9c5370
      REFCNT = 1
      FLAGS = (POK,pPOK)
      PV = 0x7fc35199d010 """"\0
      CUR = 0
      LEN = 1000002 <-- full size still allocated

the `undef $x` / `$x = undef` distinction is mildly annoying and counterintuitive, but in the Mojo case discarding the scalar entirely (via `delete $self->{buffer}`) should hopefully be just as effective...",1537362453.0
sshaw_,Good to know. Perl programs have been know to create some BIG strings.,1537580634.0
niceperl,"So Perl is not in such a bad position like others are trying to show us, isn’t it?",1537380445.0
omission9,"Ok, Perl is still in the top 20 which is nice, I can't see either Haskell or Lua gaining at all in the near future so any displacement of Perl is likley to come by other, newer, languages moving up over time. 

That said, the methodology of scanning github and stack overflow is commonly suspect. Are their any metrics like this that, say, actually sample developers as to what tools they use? I'm thinking this area would be perfect for a long term longitudinal survey started when developers graduate with their B.S. degrees and start their first jobs and follow up every year throughout their careers. Such surveys exist in many other areas but I have never head of something like this in technology. Does it exist already? Such a survey would remove any of the biases by looking at S.O., for example, since that forum clearly targets beginners struggling with basic concepts vs the work of more experienced practitioners.",1537381479.0
davorg,"It would be useful if you could edit your question to include your existing code. That way, we could see where your misunderstandings are and could probably offer better advice.",1537184965.0
wbazant,Is this homework?,1537220343.0
Grinnz,Cross-posted discussion: http://perlmonks.org/?node_id=1222431,1537225802.0
sigzero,"Excellent. The ""admin ui"" for Minion looks nice and useful.",1537199652.0
sshaw_,Glad to see things are going strong.,1537580968.0
visualdescript,"We use mojo and minion for a few key services at work, thank you. ",1537965013.0
inspector71,"Whilst this looks handy, why is this JavaScript code in a Perl sub?",1537495353.0
MattEOates,If you're on Linux and have root you can probably just use the system `logrotate` to do everything you want but way better. The way its configured is a bit of a mashup between make and cron and not too complex. At least I'm fairly sure you can specify a copy option so that nothing gets truncated but does get backed up and even compressed renamed etc.,1537092196.0
0rac1e,"As others have mentioned, there are better ways to manage backups. Apart from that, the logic of this script is a bit confused. One glaring thing that stands out is that you iterate over each `$file` in `@files`, but you never use that variable?

I _think_ what you are trying to achieve is something like this

    use strict;
    use warnings;
    use File::Copy;

    my $original = shift @ARGV or die;
    my $n = 0;

    my $backup = "".$original.$n"";

    while (-e $backup) {
        $n++;
        $backup = "".$original.$n"";
    }

    copy($original, $backup);
    print ""Backup of '$original' saved as '$backup'\n"";

The `while` loop keeps incrementing `$n` until `.$original.$n` doesn't exists, then it creates the copy. If this is not exactly what you want, you can probably modify it to suit your needs.",1537092537.0
1s44c,"That script is pretty hacky. That's probably not the behavior you want anyway.

You should put your backups in another directory, or ideally on another machine. You might want to compress them too. There are tools that do this. If you want a dead simple backup an easy way is to use rsync to copy the files to a directory with a timestamp in its name on another machine.

    rsync -a source dest-`date -Iseconds`

What you are trying to do is very close to the old VMS idea of versioned files. That was abandoned long ago.",1537089214.0
raiph,"> the files aren't ordered properly with sort, so some cases don't work right

You've used `sort` without specifying the sort order so it sorts according to a default ordering. If you've picked what you consider a proper ordering and it doesn't match the default ordering then you need to direct `sort` to use the ordering you want. The same notion will apply to any programming language.

So a useful question to answer is what is the ordering you want?",1537096253.0
liztormato,Have you considered using `git`?,1537089814.0
aaptel,"    #!/bin/sh
    
    orig=""$1""
    n=0
    
    backup_name() {
        echo "".$orig.$n""
    }
    
    while [ -e ""$(backup_name)"" ]; do
        n=$(expr $n + 1)
    done
    
    cp -v ""$orig"" ""$(backup_name)""
",1537122647.0
moldykobold,"Ruby has similar syntax.

    result = /^my-regex$/.match('some string')",1536974242.0
kisses_joy,"Pretty much every language nowadays.

Javascript:

    ""123"".replace(/\d+/i, ""a"");

And I'd argue that's hella lot easier to understand than Perl's obtuse `=~` thingy.

The only trickiness where you need to get into `new RegExp()` is when dealing with capturing/etc.",1536976878.0
bonkly68,"In my dream perls (5/6), sigils function like they do now!

* Sigils make for easy variable interpolation into quoted strings. 
* Follows the language design rule of ""different things look different""
* IOW, having the name indicate the data structure makes code easier to read  
* Sigils allow the same name to be used for hash, array, scalar 

I think perl6 sigil syntax is an improvement, but both are so fine!",1536909656.0
raiph,"I love the P6 take on sigils:

* `$` generically denotes a single item or a scalar container containing a single item. The `$` looks like an `|` overlapped with an `S`. The `|` inside the `S` is mnemonic for either an `I`tem or a `S`calar container containing an `I`tem.

* `@` denotes a subset of `$`, a positionally indexed multiple item container. The `@` looks like an `a` for an `a`rr`a`y. The `@` looks like it's an `a` surrounded by a `0`. By default `@` containers contain things ""at"" integer 0 based indexes.

* `%` denotes a subset of `$`, an associatively indexed multiple item container. `%` looks like a pair of things. The pair of `o`s remind one that these can be object/object pairs (although by default keys are strings).",1536947033.0
saiftynet,"I am a naive programmer and not particularly skilled at it.  I like sigils.

1. The are visual signals that help describe a variable. For example,when I code in Javascript, I can not tell just by looking whether a word is an object, a string or an array or a function.
2. Another benefit I see in Perl is the back-end parsing of the code is probably easier that way, and certainly IDEs probably are able to identify things better.
3. About using only the dollar sign...I would say meh... The beauty of Perl 5 is its *optionally* object orientated programming.  Treating everything as an object gives a certain amount of power, by sacrificing a lot of performance, memory usage and adding unnecessary complexity.

There is plenty of hate towards sigils, particularly from people coding in other languages.  I would suggest a module that allows a sigil-free coding without disrupting the code and thought processes of those  who find them useful.",1537003092.0
latkde,"Sigils were a nice idea, before Perl5. It's really nice to have easy shell-like string interpolation, and it's nice to have some static type information in the variable name. And I find that sigils give my code more visual rhythm and makes it easier to read, e.g. as compared to Python where every identifier looks the same, whether it's a variable, function, method, or class.

However:

* Sigils are *not necessary* for convenient string interpolation. E.g. Ruby's `""#{foo}""` syntax, Python's `f""{foo}""`, C#'s `$""{foo}""` etc. are just as convenient – and arguably better because you can provide additional formatting info and interpolate arbitrary expressions. And there's no reason why $ couldn't just be a interpolation marker rather than a sigil, e.g. the sigil-less variable `foo` could be interpolated as `""$foo""`. This is actually exactly how the Posix shell works.  

* The type information via sigils becomes pointless the moment you have user-defined types. Perl5 only has 5 sigil-types: scalars, arrays, hashes, code, and typeglobs. All strings, numbers, references, and user-defined types are scalars. So any nontrivial program will almost exclusively use scalars. Those sigils are no longer valuable type indicators, they are just visual noise. You also cannot provide user-defined implementations for arrays or hashes unless you use the `tie` mechanism, reducing the utility of those sigils. This inconvenience might be part of the reason why special collection types (sets, queues, ordered hash tables, …) are rarely used in Perl5 code.  

* Sigil variance is totally confusing and was a mistake. It can be argued linguistically why it made sense (singular vs plural), and it has deep connections with scalar context vs list context (`@foo[bar()]` and `$foo[bar()]` both access the `@foo` array, but `bar()` is evaluated in different contexts, possibly leading to different indices). This can be a quite subtle cause of bugs. Also, that `$foo` and `$foo[0]` refer to unrelated variables…  

* Prior to the post-deref feature working with references was rather annoying, e.g. having to use a circumfix operator `@{ foo() }` to get a flat list from a function that returns an arrayref. Now it's much better with the postfix `foo()->@*`.  
Part of the problem here is that sigils aren't just variable prefixes, but type casting operators. This kind of makes sense if you interpret all variable names as strings that must be “dereferenced” to get the variable contents, but symbolic references/varvars aren't exactly good style.  

* I've never encountered a case where string interpolation of arrays or hashes did what I wanted it to do. I know I can set `$""` to change the list interpolation separator, but it's usually better to just format the list explicitly. Confusingly (if one isn't aware of scalar context), concatenation `""foo"" . @bar` results in different output from interpolation `""foo@bar""`.  

* Sigils are mildly inconvenient to type depending on keyboard layout.

So from my experience with Perl5, I don't consider sigils to be a terribly valuable language design decision. Perl6 fixes many of these problems and makes some subtleties of the data model more accessible (e.g. the dual role of scalars etc as objects and as a reification of variables), but doubles down on sigils by adding twigils with scope-information. Compare also Ruby with `$global, @instance, local` variables. I'm torn on this, but it's definitively more convenient than [`self.foo`](https://self.foo) in Python or `$self->{foo}` in vanilla Perl5. Even Java needs the occasional [`this.foo`](https://this.foo) to disambiguate a local variable from a field.

Unless you have to combine sigils with other Perl specialties (such as list context), carefully consider whether some more boring syntax wouldn't work as well. E.g. C++ needs to disambiguate at parse time whether an identifier refers to a type name, template, or variable. Because C++ doesn't have sigils, some code needs the sigil-like keyword `typename` instead, as in `typename foo<42>::bar`. Similarly, Java places methods in a separate namespace which is usually disambiguated by the method call syntax. To refer to a method `Foo.bar()` as a value rather than calling it, you need to use the `::` operator, as in `Foo::bar`.",1536918632.0
raevnos,"I like sigils the way they are.

If I wanted to use a language where everything was an object, I'd be writing python, not perl.",1537031370.0
shlomif,"Larry Wall [notes in an interview](http://www.drdobbs.com/a-conversation-with-larry-wall/184410483) that «On a syntactic level, in the particular case of Perl, I placed variable names in a separate namespace from reserved words. That's one of the reasons there are funny characters on the front of variable names -- dollar signs and so forth. That allowed me to add new reserved words without breaking old programs.». Furthermore, first order lists [allow for cleaner code](https://bitbucket.org/shlomif/use.perl.org-journal-entries/src/5443068e1abbc6a5f0b37cdf5ad609783a58a8bf/use.perl-journal.html?at=default&fileviewer=file-view-default#use.perl-journal.html-3491) sometimes. So I think sigils are great, but naturally inexperienced people often complain that they add clutter or make the code ""unreadable"" or ""messy"".",1537160665.0
raiph,"Note that it's easy to sharply reduce use of sigils in P6. I think you might be able to remove them entirely from your own code if you feel the need, though I've never tried to push it that far on a broad basis and suspect it introduces sharp limits to expressivity. Also, some error messages will still mention them -- and of course the doc.",1537085548.0
kkrev,"They worked well in the context of old school perl.

There are just so few problems where you need a super terse scripting language anymore. You either need a full-on native oriented type system for performance reasons, or you need a super simple syntax some junior employee can learn in a few months and use for a year before getting a better job. Your ""one liner"" will be thrown away and replaced by a guy who can't read it.",1536992095.0
quote-only-eeee,"I feel that sigils are very convenient in languages like Perl. I think that they are especially useful, and should be used more, in shell languages. I would love a shell that treated `$var` as a literal variable substitution without word splitting and `@var` as the same, except *with* word splitting.

Also, I [cross-posted][pl] this thread to /r/ProgrammingLanguages, as this is just the thing I imagine they'd be interested in.

[pl]: https://www.reddit.com/r/ProgrammingLanguages/comments/9mgqod/xpost_rperl_what_are_your_thoughts_on_sigils/",1539019318.0
lasix75,"I think so. I emailed them a few times because we ran into a problem while pulling.

So we switched to a local [Pinto](https://metacpan.org/pod/Pinto) repo. Basically Stratopan is a web frontend for Pinto.",1536925486.0
el7al,"I don't have enough experience with both of the libraries i am interesting what the thought of the experts on the field .

Below are some comparsaion which i did :

&#x200B;

1.Blocking/Non Blocking : Mojo::UserAgent support both while with Requests you can only do blocking requests

2.WebSockets : Mojo::UserAgent supports websocket request while Requests didn not

3.Pasring DOM/XML : Mojo::UserAgent has built in support for parsing DOM through Mojo::DOM while Requests require other python libraries to do this job

4.CSS selects/JSON Pointers queries : are built in on Mojo::UserAgent while Requests you need to install other libraries

5.HTTPS requests : supported by default with Requests through python , while on Perl it requires  [IO::Socket::SSL](https://mojolicious.org/perldoc/IO/Socket/SSL)  2.009+ version of IO::Socket::SSL which could no easy to install on older versions of perl like 5.16 ,which installed on older linux systems which supports older verison of OPENSSL

&#x200B;

6.JavaScript support : both of the libraries not supporting javascript

&#x200B;

any thoughts ?

&#x200B;

&#x200B;",1536931779.0
jplindstrom,How about you chip in yourself to kick off the discussion? :),1536928397.0
liztormato,There still seem to be quite a few presentations missing.  Is the upload completed already or not?,1536865043.0
perlancar,Great article. Every single point comes with example. Thanks!,1536828597.0
davorg,"`[0-9]*` matches zero or more digits. So that matches an empty string and you'll end up with far too many Zs.

You want at least one digit. So you need `[0-9]+`.

But then I saw you wrote this in a comment:

>it is parsing ""100's"" as ""Z's"" instead of ""ZZZ's""

Which I take to mean that you want to convert every digit into a Z. So that's simpler. You don't need to worry about `*` or `+` at all.

    s/[0-9]/Z/g;

You'll see people suggesting `\d` instead of `[0-9]`. There's a subtle difference there. `[0-9]` matches exactly the ten characters between '0' and '9' in your character set, whereas `\d` matches all digits and that will include many [Unicode characters that are defined as digits](https://www.fileformat.info/info/unicode/category/Nd/list.htm).

It's likely that your data contains none of the non-Arabic digits, in which case the two solutions will be equivalent. But if there's a chance you'll be getting more esoteric data, then you'll need to decide which approach is right for you.",1536758166.0
crocandial,s/\[0-9\]+/Z/g; #s/\\d+/Z/g;,1536753665.0
kujeger,"as a oneliner:
    perl -pi -e 's/\d/Z/g' foo.txt

In any case the regex
  s/\d/Z/g
in your above code will work. The /g bit means it is global, and applies to every instance in the line.",1536757264.0
thseeling,"Obviously it doesn't work as you expect. \[0-9\]\* matches any number of digits, including zero. This means that the empty string matches and so this is an endless loop.

The repeat character you'd need to use is ""+"" which means ""one or more matches"", not ""\*"" for ""zero or more matches"" - if you really want to fold successive digits into one ""Z"". If you want to substitute every single digit with one ""Z"" you need to use \[0-9\] which means ""exactly one digit"", or you could use the meta character \\d.",1536759036.0
buovjaga,[The video](https://www.youtube.com/watch?v=0jIk3s7GsEo) is up now :),1536734978.0
sigzero,Great presentation. Exciting that Bugzilla is moving to Mojo.,1537281812.0
Grinnz,"Can't say I'm a fan of requiring parentheses for sub calls, but I would prefer for Perl to shed the optional whitespace between a sub and its parentheses, as well as a variable and its sigil; these two cause no end of parser/human confusion and are used by very few.

    foo (1+3)*2; # interpreted as foo(1+3) * 2

EDIT: and for the sigil one:

    foo * bar; # interpreted as foo(*bar)",1536681066.0
unkz,"Pretty aggressive.  I feel like this is probably more disruptive than the python2->python3 switch, but less disruptive than trying to convert perl5->perl6.

> prototypes (but improve signatures!) 

This breaks modules at such a high point in the CPAN river, I can't imagine that anything would work at all.  Like, anything.

>    all sub calls need parens (no perl poetry mode or different arities) (how does this affect $_ defaults.

This probably rules out 30% of CPAN.

>    move some platform specific keywords to modules (kill was the focus of that part)

This probably breaks most of the most important modules for people in devops.

>    indirect object notation

This probably rules out 50% of CPAN, and like 95% of all the older stuff.

>    require m on // for a match operator 

This probably rules out 100% of all deployed code larger than 2k LOC.",1536685267.0
tm604,"Removing prototypes would break List::Util, Try::Tiny and equivalents, and many of the DSL implementations... bold strategy, let's see if it pays off!",1536682573.0
Grinnz,"I'm not sure if I'm interpreting the question right, but as a start use [MetaCPAN::Pod::XHTML](https://metacpan.org/pod/MetaCPAN::Pod::XHTML) which is a Pod::Simple::XHTML subclass used by metacpan (I'm using this for [perldoc.pl](https://github.com/Grinnz/perldoc-browser/blob/782336e4feb0f82e66470ced29447e97bb6ee469/lib/PerldocBrowser/Plugin/PerldocRenderer.pm#L505-L514)). You may need to configure the WithLinkMappings role and look at other processing metacpan does like stripping disallowed HTML tags. Then you'd need the CSS and JS that metacpan uses to apply to that. The [pod renderer](https://metacpan.org/pod2html) tool on metacpan also lets you preview how metacpan would render pod.",1536641346.0
FiveYearsAgoOnReddit,"I'm a bit confused. You're the maintainer of pod2html but you're asking for advice on how to do the HTML part?

But anyway, what's the context/use case for this. How is it going to be viewed? On disk, online?

The main task would be figuring out how to do the CSS. Normally CSS is served up from a URL via separate HTTP request.",1536654424.0
Grinnz,"FYI, the module in question has had first-come permissions transferred to [DUFFEE](https://metacpan.org/author/DUFFEE), though they have only done a [trial release](https://metacpan.org/release/DUFFEE/Boost-Graph-1.4_001) and it seems the permissions for the other modules in the distribution were missed in this transfer. https://cpanmeta.grinnz.com/perms#~Boost::Graph

My recommendation would be to send an email to both DBURDICK and DUFFEE's listed contact emails asking about the situation, and cc modules@perl.org.",1536602406.0
Grinnz,[Test::Warnings](https://metacpan.org/pod/Test::Warnings) is a better all-around option for this task.,1536602178.0
Grinnz,"See also my guide: http://blogs.perl.org/users/grinnz/2018/04/a-guide-to-versions-in-perl.html

Using x.yy is perfectly fine, once you read that so you understand how that version is interpreted. You can use semver with that form, it just looks like x.yyzz instead of x.yy.zz. You can also go full semver, ideally using both the leading 'v' and three or more integer components at all times, it's simple as long as you only plan to support 5.10+ and don't intend to use underscores in versions. The benefit being that you no longer have to worry about how many digits to use for each component, because they're integers. Just don't go over 3 digits per component so it can still be converted, and don't change schemes mid-major version.",1536601764.0
jonathancast,"Yep. It's unfortunate that Perl has this trap, but it's been that way since Perl 5.001, so we may as well learn to live with it.",1536593239.0
,[deleted],1536590940.0
Grinnz,"There's three parts to your problem.

1. Getting the strings you enter on the command line. If you are just referring to strings that you pass as arguments to the script, these will be in [@ARGV](https://perldoc.pl/variables/@ARGV). If you're referring to strings you will enter after running the script, your script will need to read them from STDIN, using [readline](https://perldoc.pl/functions/readline) (also known as the <> operator) and [chomp](https://perldoc.pl/functions/chomp).

2. Sorting the strings, which is simple with [sort](https://perldoc.pl/functions/sort).

3. Outputting the sorted strings, using [print](https://perldoc.pl/functions/print) or [say](https://perldoc.pl/functions/say).",1536557990.0
Tyler_Zoro,"    (echo 'pear'; echo 'mellon'; echo 'apple'; echo 'banana') | \
      perl -nlE 'push @words, $_; END { say for sort @words }'
    apple
    banana
    mellon
    pear

There are other ways to do this that are simpler, but I think that this illustrates the general form of the sort of thing you want to do best.
",1536556679.0
flexibeast,What are the specific issues you're having? i assume you're already aware of [the `sort` function](http://perldoc.perl.org/functions/sort.html)? ,1536548121.0
daxim,"> alphabetize strings

When you find that [`sort`](http://p3rl.org/sort) does not work correctly, use [`sort` from Unicode::Collate](http://p3rl.org/Unicode::Collate#Methods-for-Collation) instead.",1536572203.0
briandfoy,"A closure are a bit more than a sub reference; they know about variables that have gone out of scope:

    sub make_counter {
        my $n = shift // 0;
        sub { $n++ }
		}

    my $counter1 = make_counter( 9 );
    my $counter2 = make_counter( -5 );

	say $counter1->(); # 9
	say $counter1->(); # 10
	say $counter2->(); # -5

But, as you say, these are quite nice. I write quite a bit about them in [Mastering Perl](https://www.masteringperl.org/) and [Effective Perl Programming](https://www.effectiveperlprogramming.com).",1536539176.0
drzowie,"Closures are mind-blowingly powerful, and a ton of fun.  I use them in PDL::Transform, to produce parameterized coordinate transformations on-the-fly.  They're a bit like the Star Trek transporter -- there are very few problems that can't be solved with appropriate use of closures.",1536539246.0
choroba,"    push @aryFuncs, $funcName; push @aryFuncs, $funcCmnt;

can be shortened to

    push @aryFuncs, $funcName, $funcCmnt;",1536604154.0
raiph,"Hi. What do you need the answer for? (For work, play, school, self-education, ...?)

Perl 5:

    $_ = 'Tom tom tom boy';
    print $count = () = /tom/gi; # 3

The `g` tells the regex engine to match `g`lobally (as many matches as there are in the string, not just one). The `i` tells it to `i`gnore case.

The `()` establishes a plural context for assigning the result of the match. It's like saying ""these match"" instead of ""this match"". In plural context the match engine returns three matches, ""Tom"", ""tom"", ""tom"" rather than one match ""Tomtomtom"".

The `$count` establishes singular context for assigning the list of three strings. In singular context a list becomes its length.

----

Perl 6:

    $_ = 'Tom tom tom boy';
    print +m:g:i/tom/;

The `m` means ""match"". You have to use it if you want to specify regex adverbs.

The `:g` and `:i` are regex adverbs, the Perl 6 equivalent of the `g` and `i` in the Perl 5 above. Given those adverbs, the match engine returns a list of matches.

The `+` coerces its right hand side to a number. If it's a list, the result is its length.",1536483649.0
davehodg,"No. Now you have two problems.

Use one of the html parsing modules.",1536421771.0
daxim,"Out of curiosity, how does one get into a situation where one gets exposed to Perl for two days and then a test comes?

Vague question, vague answer: https://stackoverflow.com/search?q=user%3A46395+%22Web%3A%3AQuery%22
",1536423972.0
briandfoy,"Instead of a regex, check out using [Mojo::DOM](https://metacpan.org/pod/Mojo::DOM) so you can use CSS selectors to find and extract what you want.",1536540634.0
SilentMobius,"You cannot reliably use a regular expression to parse a non regular markup (like HTML)

More detail and humour is available here:

https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454",1536447268.0
,[deleted],1536423293.0
EpicShaggy,"Haha!  It's a job interview, the test is meant to be done in perl, and so I had to get as much information as I could.  Thanks!",1536424061.0
petdance,"You don't want to use regexes to extract data from arbitrary HTML.

http://htmlparsing.com/regexes.html",1536609296.0
FiveYearsAgoOnReddit,"    $line =~ \/$([0-9])/ or die;

That doesn't look right. Did you copy it from a working script?

I'm going to assume that you or someone else messed it up and it's supposed to be

    $line =~ /\$([0-9])/

Ignoring the ""or die"" part, this basically means ""the variable $line contains a dollar sign, followed by a number, and I want to keep the number in the variable $1"".

To break it down:

    $ 

means literally a dollar sign, but we put a slash before it, otherwise it has a special meaning

    [0-9]

the characters from zero to nine (any of the digits, in other words)

    ([0-9]) 

wrapping the parentheses around the previous thing means ""and keep this in a variable"". The variable will be $1 because there's nothing else being kept.

As for the other one:

    $line =~ /""(.*)""/

This means ""double-quote, absolutely anything or even zero things (except linebreaks), then another double-quote"". This is a rather naïve regex because of what it does when it matches on this string:

    ""let's go to the pub"" she said, ""I need a beer""

Hope this helps.",1536387214.0
davorg,"The code as you have given it won't compile. I'm assuming you have the `/` and `\` at the start the wrong way round and you actually mean:

    $line =~ /\$([0-9])/ or die;

The outer `/ ... /` isn't part of the regex. It's the match operator. It's the bit of Perl syntax that means ""match the pattern between these two characters"".

As you say, the `\` is there to remove the special meaning from (we call it ""escaping"") characters. In a regex, a `$` means ""the end of the string"", so having the `\` there removes the special meaning and makes it just match a dollar sign.

The parentheses (round brackets) are there to ""capture"" a section of the matched string. Your pattern matches a dollar sign, followed by a digit from `0` to `9`. And the digit is ""captured"". That means that once the pattern has been matched, the digit will be available in a variable called `$1`. Typically, you'd use that in code like:

    my $digit;
    if ($line =~ /\$([0-9)/) {
      $digit = $1;
    }

Your `or die` has a similar effect, so you could write:

    $line =~ /\$([0-9])/ or die;
    my $digit = $1;

You can have multiple sets of capturing parentheses in a regex. The text captured from the first set goes into `$1`, the text captured from the second set goes into `$2`, and so on.

Your second example also uses capturing parentheses.

    $line =~ /""(.*)""/

This says ""look for something (or nothing!) between two double-quote characters and put the string found into `$1`"".",1536387587.0
aioeu,">but why is there another one at the end and in the beginning, but reversed?

This looks like a mistake.

It's not *syntactically* invalid, but it's unlikely to do what the programmer wanted. (You *can* take a reference to the result of a match, then use the stringification of that reference itself as a regex... but it's rather nonsensical.)

Are you sure you just didn't transcribe that correctly?

>Also, I am not sure why there is a circle bracket inside a square bracket

Um, they're *outside* the square brackets.

>I read something about grouping

So parentheses (round brackets or ""circle brackets"" as you call them) have a few purposes.

First, yes, they *group* parts of the regex. For instance, in:

    /prefix(a|b|c)suffix/

the alternation is only between the sub-regexes inside the parentheses.

They also mean a quantifier like `*` or `+` can act on more than one token:

     /(abc)+/

matches a sequence of one or more ""abc"" strings.

They also *capture* the portion of the string being matched. You can get the results of captured through Perl's `$1`, `$2` etc. variables, or by performing a match in list context:

    ($key, $value) = /^(.+?)=(.*)$/

Finally, parentheses are part of the syntax for all sorts of extra regex features. As just one example, you can create a *non-capturing* group with `(?:...)`. There's all sort of other things available using parentheses in regexes. Take a look at the [""Extended Patterns"" section of `perlre`](https://perldoc.perl.org/perlre.html#Extended-Patterns).

(Blimey, this took me a couple of dozen attempts before Reddit would accept this comment...)",1536388450.0
nofretting,"There's a gotcha in the second example. Unless there are only two quotes in the text the regex is examining, you're probably going to get more in $1 than you wanted. As it's written, it will capture everything between the first and last double-quote characters it finds.

If you want only what's between the first two double-quote characters, use /""(.*?)""/",1536427776.0
nofretting,"I wonder why reddit thinks there are 32 comments on this post?
",1536522602.0
Grinnz,"Don't have time to watch the whole video, but starting with strawberry perl, perlbrew, and use strict+use warnings is a good start. The switch feature not so much.",1536290954.0
AlexOn365,I searched through the subreddit but couldn't find the same video posted. So hopefully its not a duplicate.,1536288114.0
ac1235,Where does it talk about references?,1536303866.0
saiftynet,The same but different..I see.  Nice explanation,1536433771.0
Grinnz,"This seems like some sort of hacky attempt to get the source code to show up in POD. There's no universe where this is a good idea. But I think the problem is that pp strips the pod sections, so the `=for ;` which is supposed to satisfy the code parser is missing in the resulting package, as well as probably all of the source code for that module.

Gory details: https://metacpan.org/source/SPROUT/CSS-DOM-0.17/lib/CSS/DOM/Interface.pm#L84

`0 and q r` and the following `=for ;` gets parsed by the Perl parser as `0 and 'some string';` using [q''](https://perldoc.pl/functions/q) with `r` as the delimiter, at compile time. At runtime it does nothing, since `0 and` short-circuits. This prevents it from seeing `=for` as a POD directive and skipping it, since to the parser it's within a string literal, so the following paragraphs of POD are also parsed as code. For the POD parser, it sees the `=for ;` directive which doesn't do anything but activates a POD section, so the following paragraphs show up in POD.",1536252031.0
davehodg,What does line 85 look like? And it’s probably only a non-fatal warning.,1536220665.0
bubblesnout,"I've managed to sort this out, for anybody who stumbles across this with the same question I used Dependency Walker (depends.exe) and managed to find out that the following DLL's needed to be included with the -l C:\\path\\to\\dll\\file.dll arguments:

\- C:\\pperl\\c\\bin\\libcrypto-1\_1-x64\_\_.dll

\- C:\\pperl\\c\\bin\\zlib1\_\_.dll

\-C:\\pperl\\c\\bin\\libssl-1\_1-x64\_\_.dll",1536217884.0
sfandino,You may like to check [Win32::Packer](https://metacpan.org/pod/Win32::Packer) which detects DLLs automatically.,1536229118.0
Grinnz,"Other notes: [Syntax::Keyword::Try](https://metacpan.org/pod/Syntax::Keyword::Try) is what you want to use, not Syntax::Feature::Try, despite the name similarity they are very different. You can use [Devel::Confess](https://metacpan.org/pod/Devel::Confess) to cause all exceptions to be thrown with a stacktrace (via Carp), though this is normally only used in debugging because it can surprise modules that expect certain error strings (and of course is more verbose than some may want). Throwable is just a role, but Throwable::Error is an exception object that uses Throwable as well as StackTrace::Auto to include stacktraces via Devel::StackTrace. Also see [Throwable::SugarFactory](https://metacpan.org/pod/Throwable::SugarFactory) for a Throwable interface more similar to Exception::Class.",1536198274.0
Grinnz,"Your conclusions seem correct to me. Just to simplify the example code you gave (reddit markdown requires indenting by 4 spaces, rather than ``` fences, for code blocks):

    my $error;
    {
      local $@;
      unless (eval { ...; 1 }) { $error = $@ || 'Error' }
    }
    if (defined $error) {
      # handle exception
    }

By depending on the defined-ness of $error, and always setting it to a defined value, you can simplify the logic a bit. I'm partially to blame for the verboseness as I gave the initial examples that led to the [example you probably used](http://mvp.kablamo.org/essentials/die-eval/).",1536195062.0
xabean,Webperl (the thing that this is written on top of) is beautiful and an abomination if I ever saw one.  +1 from me.,1536159574.0
liztormato,See https://webperl.zero-g.net for the story behind it.,1536179624.0
FiveYearsAgoOnReddit,"Useful but *really* needs a makeover.

Not just to make it prettier, but to make it easier to understand.",1536180978.0
davorg,"I've taken some liberties here. The Bash doesn't use a named variable for the filename. And I've opened a filehandle to write to the file. But this is functionally equivalent, I think.

    #!/usr/bin/perl

    use strict;
    use warnings;
    use feature 'say';

    my ($counter, $max, $file) = @ARGV;
    $max++;

    open my $fh, '>>', $file or die $!;

    while ($counter < $max) {
      say $fh $counter++;
    }",1536149069.0
mpersico,"Here's your bash file. You should see [www.shellcheck.net](https://www.shellcheck.net) if you are learning bash - great resource.  


    #!/bin/bash
    
    # Need error checks on these
    # to make sure they are numeric. Also, upper case 
    # is traditionally reserved for values in the environment
    # passed to multiple scripts. Locals use lowercase.
    declare counter=$1
    declare max=$2
    
    # Don't use $n multiple times in a program. 
    # If you rearrange args, you have to do many edits.
    declare file=$3
    
    # Why? 'max' isn't max enough? A comment explaining
    # this would do wonders, even in a throwaway script.
    ((max+=1))
    
    # If you do not want to create a new file each time,
    # the '>>' will append to the existing file, and create
    # it the first time if wanted. 
    # If your intent is to re-init each time, then you use
    # echo -n > ""$file""
    # which will echo zero characters (-n means no newline)
    # into the file and using '>' will create it anew if it exists.
    touch ""$file""
    
    while (( counter > max)) do
         echo ""$counter"" >> ""$file""
         ((counter+=1)) 
    done

&#x200B;",1536155310.0
Lord_Mhoram,"The shell variables $1, $2,... are found in Perl as `$ARGV[0]`, `$ARGV[1]`, etc. Yes, they're indexed starting at zero.

So it looks like you want to append the numbers from $1 to $2 to the file $3, one per line. Here's how I'd do that in Perl. There's no error-checking to make sure the numbers are numbers, or that the first is less than the second.

    #!/usr/bin/env perl
    use 5.010; use warnings; use strict;

    open my $out, '>>', $ARGV[2] or die $!;
    say $out $_ for ($ARGV[0]..$ARGV[1]);
",1536261315.0
bart2019,"If you're using CPAN, it's likely thse tests.

You can instead use prebuilt modules, these don't have the compilation phases, and they also skip the tests. This is lightning fast.

For this, you need to run PPM instead of CPAN.

Originally that's a script made by ActiveState, for ActivePerl, but now Strawberry Perl includes its own version.

* [Tutorial](https://www.perl.com/pub/2007/01/11/painless-ppm.html/)

The perl version I have installed is 2 years old (upgrading is a chore, because you need to install every extra module you use in every project) and the ppm repository it uses no longer exists. You *may* need to find an alternative repository.",1536132697.0
batlock666,So GopherCon is about Go-the-programming-language. Kinda disappointing. I hoped it would be about Gopher-the-protocol. And I'm only half kidding.,1536085257.0
quintus_horatius,"> I just need the dates to appear in MM/DD/YYYY format. I don't need the extra data in the cell.

Well, the easy solution is to split on a space and throw away the back half, like this: `my ( $date ) = split /\s+/, $source_sheet->{Cells}[$row_index][$col_index];`

`split` returns a string, and saying `my ( $date ) = split` says to read the value(s) returned from `split` as a list.  The first value is assigned to $date, and the remaining values are thrown away.

I would tend to plan ahead, though, because programs often have larger and longer lives than any plans for.  I would pull in the DateTime module and use the value to create new objects.  The you can reformat the date into any format you wish.",1536023617.0
mishagale,"`04/23/2018 18.58 a` becoming `MM/23/2018 18.04 a` makes me think there is something wrong with either the formatting code of the spreadsheet, or with the way `Spreadsheet::ParseExcel` parses that format.

I would guess that it's seeing `mm` (lowercase) meaning ""minutes"" and interpreting it as ""months"", hence `18.04`, and not understanding the `MM` (months) and just rendering it as literal characters. I don't *think* `MM` (uppercase) is actually valid as an Excel date format, but I don't have Excel handy to check, since I'm on a Linux box.

According to [this doc](https://support.office.com/en-us/article/format-a-date-the-way-you-want-8e10019e-d5d8-47a1-ba95-db95123d273e):

>If you’re modifying a format that includes time values, and you use ""m"" immediately after the ""h"" or ""hh"" code or immediately before the ""ss"" code, Excel displays minutes instead of the month.

It sounds like `Spreadsheet::ParseExcel` isn't aware of this rule, or has a bug in it's implementation.

If you are able to modify the actual spreadsheet, maybe you could try fixing the date formatting codes. If that's not an option, you could have your script detect those cells, and manually format them - see https://metacpan.org/pod/Spreadsheet::ParseExcel::Cell#Dates-and-Time-in-Excel (basically, get the `->unformatted()` cell contents, convert it to a DateTime object with [DateTime::Format::Excel](https://metacpan.org/pod/DateTime::Format::Excel), and finally use `strftime()` or `format_cldr()` to turn it into a ""MM/DD/YYYY"" string)",1536068052.0
moldykobold,"Because I’m too dumb to understand functional programming 

- Me",1536030726.0
ac1235,"TL;DR: The author is incapable of keeping focus.

A working code snippet is literally in the first half of the article, the rest is just trying to generalize for no reason whatsoever.",1536304809.0
sshaw_,👏,1536009265.0
subogero,"    perl -lane '$seen{$F[2]} = 1; END { print for sort keys %seen }'

Explanation in comments if necessary.",1535867282.0
ew73,"Perl is not always the best option.  If you're in a linux-esque shell, look at `sort -k 3 somefile`.  ",1535861572.0
bart2019,"This sounds like homework, so I'll merely point to what look look up in the docs, for example on [perldoc.perl.org](http://perldoc.perl.org/):

> takes in a file name as its first argument

`@ARGV` (though that may be unnecessary with  `<>`)

> a text file

Again, `<FILEHANDLE>` where FILEHANDLE is a name you give your filehandle. without one perl will read from STDIN, or if that is empty, it'll use up the first argument in `@ARGV`, try to open it as a file (`$ARGV`) and read from it (`ARGV`). See also perlrun, probably.

> space-delimited, and reads the third column,

`split` although you could use `-F` as a command line option, see perlrun

> basically making a hash table of all unique values that occur. 

The common idiom for that has already been addressed in other replies.

> Also, they would then be listed in alphabetical order.

`sort`

> The pair would correspond to a numeric value but I can figure that out.

I think you best use regular expressions, see perlretut, and use something involving `/\d+/` or `/[0-9]+/`

> The rest is something I can do (such as: converting all to lowercase, 

`lc`

> deleting trailing ""G"" if present (which is a code we use externally). 

`s/G$//`

> I heard CPAN can help me with this, but I'm just not quite sure where to look

Frankly, these requirements seem all so simple that you can do each with a single Perl expression or construct, so using a module and passing the proper arguments to them involves more work than doing them in plain Perl. Perl isn't Java, or some other corporate bulky crap.",1535870694.0
briandfoy,I just wrote about [Powerful command line options](https://www.learning-perl.com/2018/08/powerful-command-line-options/) that has a example close to what you want. It's a simple program.,1535860978.0
Xerg,"You should be able to do that with just unix commands.

    cat FILENAME | cut -f3 -d' ' | sed 's/G$//g' | sort | uniq",1535932066.0
ether_reddit,Is this for your work?,1535860956.0
davorg,"There's really no need for CPAN here. This is all standard Perl code.

    # Always use these
    use strict;
    use warnings;

    # Turn on say()
    use feature 'say';

    # To store the data (terrible name for a 
    # variable!)
    my %data;

    # Read through any files passed on the command
    # line one line at a time
    while (<>) {
      # Get the 3rd space-delimited field.
      # Note: split splits on whitespace by default
      my $field = (split)[2];

      # Do any other transformations you need
      # on $field.
      $field = lc $field;
      $field =~ s/G$//;

      # Store $field in %data
      $data{$field} = 1;
    }

    # Print the keys from %data, sorted
    say for sort keys %data;",1535961839.0
roberterniereg,A good module to help with this would be Text::CSV_XS. You can specify a delimiter and there’s an example of reading a specific column in the docs. https://metacpan.org/pod/Text::CSV_XS#Reading-only-a-single-column,1535875115.0
BRAF-V600E,"I don't have an editor with me to check, and I'm pretty drunk, but try this:

    #!/usr/bin/perl
    use strict;
    use warnings;
    
    # Get file path.
    my $file = ARGV[0];
    
    # Create file handle to file.
    open $in_fh, '<', $file or
        die;
    
    # Declare hash to hold data in column 3.
    my %col_3_hash;
    
    # Initialize hash to hold data in column 3 with data in column 3.
    while (<$in_fh>) {
        chomp;  # Remove trailing newline on each line.
        my @cols = split ' ', $_;  # Split row on space.
        $col_3_hash{ $cols[2] }++;  # Increment key for column 3 value.
    }
    
    # Close file handle to file.
    close $in_fh;",1535861495.0
davorg,"Please don't post images of code. One of the best way to help you in cases like this is to run the code ourselves and with an image we'd have to retype it all - which, obviously, makes it less likely that someone will help you.

&#x200B;

Code is text. So it's far more sensible to copy the text into your question.",1535811827.0
aioeu,"Use parentheses in the regex to capture the part you're interested in, e.g.:

    / ([0-9][0-9]) [a-zA-Z]/

The captured text is then available in `$1`.

If you work your way through [`perlretut`](https://metacpan.org/pod/perlretut) you'll find this in the ""Extracting matches"" section.",1535794049.0
nofretting,"> Basically, I have a file with a few columns, delimited by a space.

[split](https://perldoc.perl.org/functions/split.html) might be your friend here, rather than a regex.",1535840331.0
Grinnz,You should really submit these as links rather than text posts.,1535775415.0
Grinnz,I find [ojo](https://metacpan.org/pod/ojo) pretty inspirational in its power of making complex queries or tests into simple oneliners.,1535773498.0
anotherProgrammerGuy,I've been thinking about adding Perl to my list of languages for a while. Is this book worth getting?,1535835665.0
bart2019,"What, no `-n` or `-p`? `-a` Is only an extension of those, and it used to not enable them by default. In those days you *had* to use `-n`or `-p`, or nothing would happen.",1535889131.0
EdibleEnergy,How’s SQLeet compare to sqlcipher?,1535754075.0
davorg,I wrote an [altogether far longer version](https://www.perl.com/pub/2004/08/09/commandline.html/) of this for [perl.com](https://perl.com) back in 2004.,1535726725.0
briandfoy,Gabor neglected to mention that [perlrun](https://perldoc.perl.org/perlrun.html) lists _all_ of the useful command-line options.,1535741761.0
luxgladius,If you ask me -l and -a are way more useful than the compiler or version information.,1535724598.0
sshaw_,"You forgot `-M`:

    /tmp >perl -MData::Dump -E'dd {a => 123, b => 456}'
    { a => 123, b => 456 }
    /tmp >perl -MData::Dump=ddx -E'ddx {a => 123, b => 456}'
    # -e:1: { a => 123, b => 456 }


Though `ddx` is exported by default so... ",1535751451.0
crashorbit,I do quite a bit at the command line using \`perl -lane\`.,1535725059.0
lindleyw,q and qq with -e/-E are incredibly useful and often forgotten.  But note that `perl -n -E 'say if /code/'` will emit the newline from the input as well as an extra blank line (thus the suggestions below for -l),1535730195.0
davehodg,"Also, stackoverflow is probably a better forum.

",1535712491.0
plainblackquy,"I'd try this, it might work:

    my $response = $mg->send( { to => $email, etc... } );
    print $response;",1535682255.0
duskwuff,Reading from `<STDIN>` includes the newline. `chomp $x;` to remove it.,1535596909.0
briandfoy,"The point of your `!!!` is to compartmentalize the variable so that you see what's in the variable and what comes from the rest of the string. You see your terminal newline past the `!!!` because there's cone before the `5`.

It's a common debugging situation and you'll run into the same sort of problem again. No big whoop.",1535664756.0
Tyler_Zoro,"Note that there are multiple shortcuts for appending newlines to output. Here's one:

    local $\ = ""\n"";
    print ""4"";
    print ""5"";

output:

    4
    5

And another that works in more recent perl versions:

    use v5.20.0;
    say ""4"";
    say ""5"";

output:

    4
    5

Enjoy!
",1535655294.0
treenaks,"You can check the return values of the chown() and chmod() calls, or ""use autodie;"" to automatically raise an exception if they return an error.

Also remember that you can't always change ownership of a file if you're not root -- and you shouldn't be running your Mojo app as root, for security reasons.",1535538640.0
jonathancast,"Are you running as 'my_user:my_user'?  If so, you don't need the chown/chgrp, since it's a newly created file.  On the other hand, if you aren't, then your chmod will fail because you're not the owner any more.  Try putting the chmod before the chown/chgrp calls.

And either `use autodie;` or

    chown $uid, $gid, $my_file_full_path or die ""Cannot chown $my_file_full_path: $!"";

(or warn or . . ., but handle the error somehow).",1535580281.0
aioeu,"Totally random idea: is this app running in some kind chroot or similar? Perhaps (if running on Linux) within a different mount namespace?

Is `$file_path1` an absolute path or a relative path? If it's relative, are you sure your app's working directory is what you think it is?",1535452257.0
amoe_,Post a sample of the log output with filenames included.,1535458598.0
kentnl,"Side note: you almost never want -f as that excludes non-files that can be used as files ( eg: devices, sockets )

For that you want !-d

So you really want -e and !-d

Also, try logging the value of ""$! $?"" After the -f call and see if it contains anything interesting.",1535450688.0
pfp-disciple,"Crazy question. Is it printing ""file1 exists""? If not, then that block of code isn't being reached, or the logging isn't working",1535480023.0
bigrich68,Maybe try '-e' instead of '-f'. That should check for actual existence.,1535450331.0
Narfhole,What's $file_path1?,1535497409.0
madmouser,"I just tried that on a Mac and a CentOS 7 host, both worked correctly.

A couple things. First, you've got a DOS line break in the log entry in the else clause, but no line breaks in the one in the then clause. That makes me wonder if you're on a Windows system. Is that the case? And can you post example paths?",1535465625.0
doomvox,"""Dark PAN"" is a name that used to be used for any proprietary code-base that was set-up to use the CPAN tool-chain.  It behaves like CPAN, but it's not generally accessible. 

",1535388308.0
kentnl,"There's also ""greypan"", which is publicly accessible, but published outside the  cpan infrastructure, resulting in a codebase that is factually public, but functionally non existent from the perspective of CPAN, as things can't really depend on it, and subsequently doesn't get b subjected to multi Arch testing with every release, and critical breakage is likely to go unnoticed until too late.


Hence, it's a darkpan that doesn't immediately appear ""dark"", but functions with most of the downsides of a darkpan",1535409498.0
crashorbit,Darkpan is the straw man that shows up whenever someone wants to remove support for old versions of their CPAN modules.,1535597986.0
gah_fine,"FWIW, I'd say it'd have to be a mini CPAN. To me half the point is being able to install in-house code using cpanm, carton, and the like.",1535758715.0
Grinnz,"Apologies in advance but this is all the title makes me think of...

http://weknowmemes.com/wp-content/uploads/2014/09/cnn-who-is-this-4chan-gif.jpg",1535488253.0
perlancar,"the XPAN (where X != ""C"") are usually misnomers because they refer to a single directory or site, whereas CPAN is a *network*.",1535606610.0
Grinnz,"In every popular object system on CPAN, the getter and setter for attributes is the attribute name by default, so it's expected if you're using an object that you'll use the method of the same name to access an attribute. The `_set_$attr` style writer comes from [MooseX::AttributeShortcuts](https://metacpan.org/pod/MooseX::AttributeShortcuts#is-=%3E-'rwp') or Moo (which has the 'rwp' attribute type by default). It's a convention where you will be setting the attribute internally, but outside code shouldn't be setting it. There's nothing *stopping* any code from using the setter, but the leading underscore is a convention for private methods and the 'some_attr' method no longer allows setting the attribute, so in that sense it's a hidden setter, and leaves the attribute read-only from the outside.",1535354578.0
zyzzogeton,"Oh, man... at first I thought you meant Rexx... that is a language I haven't thought about in a *long* time.",1535295038.0
readparse,"The beginning of the Worldwide Web started a coding boom.  I'm not talking about the beginning of the Internet, which started long before.  I'm talking about the mid-1990s.

Perl was there and ready for this boom.  PHP was not, Python was not.  No other simple, non-complied language that you might name was there, except JavaScript, and JavaScript's only domain was inside the browser.  So Perl was really the only option accessible to people who didn't already have a background in programming.

People like me.

So I'll take some responsibility for this.  Though I'm proud of the code I write today, I was certainly writing pretty crappy code over 20 years ago, when I first started writing code.  I was also learning from people who weren't writing great code.

However, a lot of that crappy code that we wrote did its job pretty well, at least for a time.  And so that code sat around and did its job.  All the while, it was becoming ""legacy code.""

So, generation after generation of programmers came along and had to deal with this ""legacy code.""   A lot of the oldest stuff was written in Perl.   They complained about it, as programmers do.  These complaints snowballed into something bigger than all the beautiful code in the world could ever cover up.

So you can certainly write elegant code today in Perl.  And you can still do things in Perl that you can't do nearly as elegantly in other languages.  But the world doesn't care.   They hate Perl.",1535344861.0
wsppan,The same reason I find it awesome. Sigils and TIMTOWTDI. ,1535303457.0
InformalValuable,Bad practices by inexperienced people. Seems to ruin lots of modern languages.,1535334916.0
LearnedByError,"Hello, my name is lbe, I'm a recovering perl programmer.  It has been 10 mins since my last one liner, 2 hours since I played golf and a day since I wrote code using implicit punctuation variables :(

I do have peers and friends who treat my use of perl as a psychological problems bordering on addiction.  In some ways, maybe they are right - when I see a problem and think about how to solve it, perl approaches come quickly to mind.  Have my synapses reorganized themselves to match perl?  I hope not, maybe its my denial, but I ""believe"" that perl allows me to describe a solutions in an expressive manner that matches how my mind naturally processes ""things.""

Enough about me - back to the OP ?  I think /u/neilhwatson's response covers things pretty well.  My only addition is an observation of the human condition -- we tend to look for what is currently in style.  perl went out of style 2 decades ago.  Consequently, humans tend to dismiss perl as being old which in the US at least is often equated with being bad.

These days I don't write much code for production purposes.  I generally use perl for analytical purposes and to create proof of concepts.  My only concern about using perl for this purpose is that it can be difficult when I try to pass this on to developers that we note evening born when I began writing perl :)  I often get scowls, pushback and bad attitudes ( not sure if perl is the cause of these behaviors or if it is just a millenial attitude at dealing with an old person :)! ).  But I do smile when they come back to me with their Java/C# ... and ask for help to implement functionality that is inherent to perl core or part of a long toothed CPAN module.

Absent theoretical preferences about language purity and programming paradigms, my choice to use perl is really based upon the realization of Larry's 2nd Slogan of perl - ""Easy things should be easy, and hard things should be possible.""  In many, if not most cases, I can do what I need to do more quickly in perl than in most other languages.  Some of this may be due to my decades of experience in perl; however, I think most of the speed is from standing on the shoulders of perl's giants (i.e. LWALL, DCONWAY, NEILB, DAGOLDEN, TOBYINK, OALDERS, OVID, RJBS, LEEJO, SHLOMIF, MARIOROY, JDHEDDEN and many others).  Their contributions, in my experience, often make hard things easy!  My ""Thank You"" to all of them.

I hate to see perl hated.  Fortunately for us, those committed to maintaining and developing perl continue forward irrespective of hate. As a result, perl is alive and thriving!",1537901413.0
gnubyter,"I dislike perl in the sense that the syntax is implicit not explicit. The documentation at times is a bridge between very well done, and ""hasnt been touched in years, and the last guy who wrote docs wrote them like a robot"".

When documentation is on par, the language is a blast. Otherwise it isn't too bad. I'm enjoying re-learning it coming from C++, PHP, and Python currently. It is just a language that doesn't seem to abide by what I'd expect from any other language. Even Ruby and Java felt more standard than perl does.",1535659845.0
zetaconvex,"In the late 90's I discovered Perl. There were things I didn't like about it, thought ""what a load of crap"", and glad when I discovered Python.

I tried a little project in it Perl 5 recently, and I noticed that it has its little ""affordances"" that other languages don't seem to have. I'm noticing that Perl is ""a straight line from A to B"", whilst other languages make me jump through some hoops.",1536051895.0
unkz,"The main reason is a large amount of early Perl code was written by sysadmins without using OOP, and was illegible garbage not intended for widespread distribution outside of whatever one-off problem it was solving.  Modern perl with Moose is great, but that’s not the picture people have in their head when they think of Perl.",1535317623.0
derrickcope,Perl was the first language I learned. I love it. It is a great first language.,1535333095.0
Paddy3118,Form your own opinion by comparing and contrasting solutions to tasks in Perl and other languages on [Rosetta Code](http://rosettacode.org/wiki/Category:Perl).,1535304579.0
sshaw_,"Perl is great, but the biggest portion of software development is maintenance.   Unless you write Java/C in Perl (which you should _never_ do), it can be difficult to go back to code written months and years ago and comprehend it at a very basic level. i.e., without understanding business logic/context.  

It's common to have/work with multiple languages on a project. If you go several months without working in Perl, this is exacerbated. 

Exporting, strictness, warnings and compile time/runtime behavior can be confusing and make it hard to develop bulletproof code. 

JavaScript is a bit like this but it powers the platform of the 21st century so...




",1535348427.0
liztormato,The first in a series of many,1535288203.0
bsd_lore,"I understand what this does, but not *how*, and I am trying to wrap my head around

    $x += 1/$_ for 1..50_000_000;

Could somebody explain how this unfold to somebody non fluent with Perl?",1535639762.0
lindleyw,"Although I am happy Perl is keeping up, honestly, does anyone think that moving from 26 letters to thousands of ideograms is a good idea?

Anything past smiley-face, I read as ""blob"" -- it's impossible to tell what most of those ""emoji"" things are supposed to mean.  I was recently informed that what I thought was the ""One dollar"" ""emoji"" was supposed to mean ""perfect"" -- huh?  It clearly says 1.00

I have started to receive text-messages on my flip-phone that just read, blob blob blob blob.  Then I have to call the sender to ask what the heck all the blobs mean. Why not just write a real message?

/r/ForgetUnicodeBringBackHollerith",1535285216.0
FiveYearsAgoOnReddit,"OK, I'll bite. Why do these posts come with lower-case roman numerals in parentheses?",1535239948.0
aioeu,"Nice article!

I wonder how feasible it would be for the first case described there to be optimized automatically. I'm thinking it should be reasonably easy to see if all of the operations inside the block are definitely ""safe"" &mdash; that is, they don't set up anything to be done upon leaving the scope.",1535179347.0
aioeu,"I think it might be cleaner if you detect which implementation is available and import it into your package all within the `BEGIN` block.

For your fallback implementation, you can use something like:

    *any = \&_fallback_any;

or even just:

    *any = sub (&@) { ... };

Doing all the binding in `BEGIN` means the sub doesn't need to do those tests each time it is called. You can still re-export whichever sub ended up bound to `any`.",1535170341.0
Grinnz,"You could use [List::Util::MaybeXS](https://metacpan.org/pod/List::Util::MaybeXS) to automatically use the core List::Util version or a pure-perl fallback, since it's pure-perl itself it can be [fatpacked](https://metacpan.org/pod/App::FatPacker) so you don't need to install it on the target machines, if that helps. You could also copy the implementation of the `any` function from [List::Util::PP](https://metacpan.org/source/List::Util::PP) that it would use. Just make sure you are not relying on the contents of `@_` within the any block, as pureperl implementations will treat it differently.",1535170596.0
raevnos,"`if exists $$c{$_}`, maybe?

Also, `$a` and `$b` are special in perl and usually shouldn't be used outside of sort comparisons.",1535163363.0
briandfoy,"Just looking at the code, we don't know what that's supposed to do. That's why people want to remove the smartmatch feature.

What are you trying to do? Smartmatching against the result of `keys` likely won't work. That's the number of keys in the hash. This only works if you happen to have a key that is also the count of the keys. 

Perhaps you meant to smartwatch against the hash itself:

    $a{ $_ } = $b->{ $_ } if $_ ~~ %$c;

But here's the trick. We don't know what that will do until we know what `$_` is. It's not as simple as checking for the existence of the value of `$_`.  The intent of the programmer who wrote that might have been that, but someone else might be using other features of smart matching. 

* What if a regex reference is in `$_`? It finds all keys that match that regex. Then the key in `$b` is the stringified regex and you don't know which value it will have because multiple matches are all using the same key.
* What if `$_` is an array reference? It's the same thing with something like `ARRAY(0x7fcee9800708)` as the key.
* What if `$_` is an array reference with regex reference items? ",1535211269.0
Grinnz,"Dispatch tables have many uses, but this sort of use where you're explicitly only using a specific element of it is just adding misdirection that makes it 10 times as hard for anyone to understand the code. Just use strings when you need strings, or use [constants](https://perldoc.pl/constant) (but mind the last paragraph in the [CAVEATS](https://perldoc.pl/constant#CAVEATS) section) if you want typo checking.",1535150247.0
unkz,This is actually kinda awesome.,1535085024.0
2A_is_the_best_A,"I write that verbose stuff, maybe even more enterprisey than shown. But it's easy to read and not necessarily slower to write, and by God it's reliable that way. 

I guess I'm saying that the fact that my code isn't elegant in the minimalist sense doesn't limit me in any way. It's not like most of my time is taken up by typing.",1535080071.0
aanzeijar,"      croak(""…"")  if $nth !~ /^+?\d+$/a;

This line is an abomination. This is obviously meant to check whether the argument is a unsigned integer. To check that it stringifies it and launches a broken regex on it.

Doesn't it bother you that this gets posted in a post about making core better? Shouldn't something so basic have a better way to do regardless of function signatures? If you use Scalar::Util::looks_like_number, that also recognizes floats and Inf and ignores get magic. I'd expect the code to check ""int($nth) > 0"" instead, but the subtle difference here is that the above code tries to check what the argument *is*, whereas my code only checks the implications of using it as a number.

It's very easy in Perl to use a value as something but it's extremely hard to figure out what it *is*. This isn't the first time that pops up. There was the same problem with the utf flag in strings, the same problem with the identity of arguments in smart match, the same problem with auto-deref of tied arrays and hashes. It's not even clear whether an IOK/POK scalar was originally a string or a number.

Typed signatures are meant to catch programming errors. But checking whether something can be used as an unsigned integer isn't even remotely the same. For every proposed implementation here and on perlmonks, give the fibonacci sub a ref. If it accepts it (because: a ref works fantastically as a uint), the type system won't do its job.",1535112090.0
briandfoy,"Although Curtis wants to focus on the aspects besides the actual computation of Fibonacci numbers, I spent a lot of time in [Mastering Perl](https://www.masteringperl.org/) showing that you don't need recursion to do this problem. You only ever see it in a recursive form because we rely on other language compilers to not actually do what we literally typed out.

Module maintenance and architecture complexity is the biggest problem I see with the big companies I work with. They end up writing a lot more code in many more files to support the frameworks and OO systems they decide to use. Once they commit, they are stuck in that for years and people grow to hate it. Since they are writing more code (like the big Moose example he shows at the end), there's many more opportunities for bugs. Upgrades to perl and modules become a major risk (easy enough to mitigate with the right sort of management and deployment strategy).

I had a friend recount to me that there was a big push to remove caching from their code. Everyone was writing caching code into everything they touched. Caching at the low levels (and caching what's already remembered at lower levels) had become the biggest performance suck across the entire codebase.

There's not any particular way that will win in every circumstances, but every approach is going to have drawbacks. It's up to the people managing the enterprise (not the programmers necessarily!) to decide between those drawbacks, but only if we make them plain. If you can't come up with a short list of higher-level drawbacks, you probably don't understand the situation (I'm sure Curtis could easily come up with this list, but that wasn't the point of his post). It's not about finding the situation with no drawbacks (how has that ever worked out?), it's finding the one with drawbacks that least affect you.

Curtis is purposely focusing on the differences between an experienced programmer and a junior programmer. Depending on how you decide to hire and train people and how hard you try to retain them, you have different tolerances for those trade-offs.",1535129851.0
zhouzhen1,"You actually can have function signatures with gradual typing via Function::Parameters and Type::Tiny. 

```
use 5.014;
use warnings;

BEGIN {
    package My::Types {
        no thanks;      # inline a package but can still ""use"" it.
        use Type::Library -base, -declare => qw(NonNegativeInt);
        use Type::Utils -all;
        use Types::Standard qw(Int);

        declare NonNegativeInt, as Int->where( sub { $_ >= 0 } );
    }
}

use Function::Parameters;
use My::Types qw(NonNegativeInt);

fun fib( NonNegativeInt $nth ) {
    return $nth if $nth <= 1;
    return fib( $nth - 1 ) + fib( $nth - 2 );
}

package Cache::LRU {
    use Moo;
    use Hash::Ordered;
    use Types::Standard qw(Str);
    use My::Types qw(NonNegativeInt);

    has _x => ( is => 'ro', default => sub { Hash::Ordered->new } );
    has max_size => ( is => 'ro', isa => NonNegativeInt, default => 20 );

    method set( Str $key, $value ) {
        if ( $self->_x->exists($key) ) {
            $self->_x->delete($key);
        }
        elsif ( $self->_x->keys > $self->max_size ) {
            $self->_x->shift;
        }
        $self->_x->set( $key, $value );
    }

    method get( Str $key) {
        return unless $self->_x->exists($key);
        return $self->_x->set( $key, $self->_x->delete($key) );
    }
}
```
",1535106316.0
,[deleted],1535134169.0
workrestplay,"For reliable email delivery I would usually use a local mail server like postfix and deliver to it. It will retry emails until they send for free.

If resources are scarce you could use something like https://metacpan.org/pod/Retry which makes it easier to retry with back off periods etc. I've never used it myself, but seems sensible.",1535052567.0
sunshine_killer,"dont send an email unless the network is available so under the while() but before the email::send, run a network check to see if there is network connectivity. Then if the email does die, catch that and attempt again.",1535051870.0
exseven,"easy way, just wrap it in a looping shell script that reruns the job until it exits normally.",1535052469.0
doomvox,"And they have the R statistical language in the number one place on the doomed list... I've been looking at R lately, and there are some remarkably similarities with perl-- it's got a really strong programming community with a lot of really useful libraries, a lot of new development, and some of ti's libraries are arguably some of the best things of they're kind ever written (notably the ggplot2 data plotting package).  

I can't imagine why the programming world would want to abandon all of this and re-write it from scratch... it's almost as though it were dominated by irrational trend-chasing teenagers or something. 
",1534918007.0
tm604,"> In the TIOBE Index, R has tumbled from 18th to 15th place over the past year

unless you're holding that index upside down, I'd suggest ""tumbled"" is perhaps not quite the right term.",1534910286.0
The_Hindmost,"*checks the calendar*

Yep, another ""these languages are all going to die real soon now ^(tm) - we really mean it this time!"" article, same as there is pretty much every month. Must have been a slow news day.",1534923284.0
crb3,"And my opinion is, ""You wish."" 

Perl5 (can't speak about Perl6, no experience there), while sprawling and at times quite complex, is built such that you can grasp it one task at a time, and the documentation on its use is thorough enough (and interesting enough) that an intelligent stranger can self-study, mess about with little test scripts to verify assumptions, and so accomplish their little tasks... And that's how it starts, as success builds on success and comfortable familiarity grows. No license or pricey IDE required, instead there's a community that shares its its wealth (CPAN) and coaches from expertise (Perlmonks etc). That's been my experience.

As with (Gnu/)Linux, you'll never know exactly how many users Perl has, because it's built to avoid tollbooths.",1534918735.0
polycro,"Didn't COBOL die 40 years ago?

I'm over here supporting users in HPC running Fortran. Isn't it supposed to be dead too?",1534913105.0
bonkly68,"Thanks for the entertainment, however, news of Perl's death (as well as that of other languages) is greatly exaggerated.",1534927537.0
batlock666,"Doomed! DOOMED!!

But on a serious note: Perl is fun and all, but it's Python that has been paying my bills for the last 16 years.",1534929375.0
liztormato,Two words: repeating prejudice.,1534926771.0
synchronium,"All the comments here are laughing about the fact that people have been predicting the death of Perl for years.

No, I don’t think it will ever truly die. But good luck hiring Perl developers, or trying to convince other developers to join your company and learn Perl. 

I’m in that position now and it’s an incredibly tedious process.",1534970648.0
avetik,That's it! I'm going back to batch files.,1534951168.0
kanliot,pretty sure this whole article could be written in 5 overlong sentences,1534975516.0
saiftynet,Very clever indeed.,1534881413.0
sshaw_,"Fun stuff. 

AFAIK Groovy is the only langue with [built-in functionality](http://groovy-lang.org/grape.html) for this. ",1534993049.0
ericnyamu,as a hardworking programmer .....mhhhhh,1534953929.0
tm604,"Useful tool, but not a great naming choice IMHO.

""lazy"" is more commonly associated with object attributes these days (Moo, Moose etc.). I've had code in the past which used the `lazy` namespace to allow things like

    $object->lazy::accessor

for allowing autogenerated object fields (not necessarily a good idea, mind you - just an example of the semantic conflict here).

I think something like `-Mautodeps` or perhaps something with `install` in the name would've been more discoverable.
",1535000039.0
Boolean263,"A pretty common perl paradigm is to copy an array into the keys of a hash, since it's trivial to look up hash keys. This only works if your arrays don't have duplicate entries, though.

Something like:

    my @haystack = qw(Alice Bob Charlie Don Ethel); # array to search
    my @needles = qw(Alice Don);                    # find these
    my %needles = map { $_ => 1 } @needles;         # flip to a hash
    my @not_found = grep { ! $needles{$_} } @haystack;
    print ""$_\n"" for @not_found;",1534857151.0
digicow,"    #!/usr/bin/env perl                                                             
    
    my @arr1 = (""A"",""B"",""C"");
    my @arr2 = (""C"",""B"",""D"");
    
    #convert to hash                                                                
    my %arr1 = map { $_ => 1 } @arr1;
    
    #delete common entries
    delete($arr1{$_}) for (@arr2);

    #print remaining entries
    print join("", "", keys(%arr1)),""\n"";",1534856608.0
UniquePointer,"have you looked in Perl Cookbook? :)

```perl
my %seen = ();
my @aonly = ();

# build lookup table
foreach $item (@B) { $seen{$item} = 1 }

# find only elements in @A and not in @B
foreach $item (@A) {
    unless ($seen{$item}) {
        # it's not in %seen, so add to @aonly
        push(@aonly, $item);
    }
}
```",1534856646.0
Grinnz,"Others have presented great solutions already, but I just want to note that [List::Util](https://perldoc.pl/List::Util) does come with stock Perl and may be helpful, though the functions it will have stock depends on your version of Perl. Also, the reason `!/$name/` may not have worked is that this does not account for regex metacharacters that $name may contain; you wanted `!/\A\Q$name\E\z/`. \Q / \E is a shortcut for running the following text through [quotemeta](https://perldoc.pl/functions/quotemeta), and \A and \z bound the string so it can't succeed on a partial match. However, a simple string [equality](https://perldoc.pl/perlop#Equality-Operators) test is more straightforward.",1534894322.0
TWasell,"You can try somthing like this: Suppose you have 

    @a = qw( abc cde def ghi 123 );
    @b = qw( def mno 123 xyz );

You want to find the words in `@a` that are not also in `@b`. First make a hash with keys (and values) from `@a`:

    @h{@a} = @a;

Then delete `@b` from `%h`:

    delete @h{@b};

Now `keys %h` are the words you wanted, i.e. `abc, cde, ghi`.
",1534857301.0
bart2019,"Strings?

 - populate  a hash with the names as the hash keys
 - with grep, check if each name in the other array is in the hash.

It's very little code. For example:

    my %A;
    $A{$_} = 1 foreach(@A);
    my @diff = grep !$A{$_}, @B;
    my @intersect = grep $A{$_}, @B;
 
Now @intersect will contain the names that exist in both, and @diff those names only in @B.

p.s. I use the same name for the hash and one array. I like that because it shows the connection between the two data structures. Some people get really confused by that.
",1534872960.0
scruss," Markdown::Pod installs fine under 5.26.2.  You seem to be running 5.16.3, which is 5 years older than any maintained version",1534782183.0
redditoni,"no, [because](https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129).",1534712529.0
distalzou,"Check the standard unicode preamble article by Tom Christiansen...

https://www.perl.com/pub/2012/04/perlunicook-standard-preamble.html/",1534727203.0
unkz,"People sure complained about the massive breaking changes in python3 because of the total conceptual changes around Unicode, but in retrospect I wish Perl had done something similar.",1534720365.0
davehodg,"Generally you can’t. Write a new file and append the old one.

Then worry about locking.

I’m surprised you asked this!",1534711582.0
briandfoy,"If you are going to do this, write the new data to a new filename. There's an [answer in perlfaq5](https://perldoc.perl.org/perlfaq5.html#How-do-I-change%2c-delete%2c-or-insert-a-line-in-a-file%2c-or-append-to-the-beginning-of-a-file%3f), for example. I also cover this in [The Effective Perler](https://www.effectiveperlprogramming.com/) when I covered [tmpnam's removal in v5.26](https://www.effectiveperlprogramming.com/2017/09/dont-use-posix-to-create-temporary-files/).

Here's the FAQ answer:

    open my $in,  '<',  $file      or die ""Can't read old file: $!"";
    open my $out, '>', ""$file.new"" or die ""Can't write new file: $!"";
    while( <$in> ) {
            print $out $_;
    }
    close $out;

Futhermore, don't read in the entire file at once. Perl Maven shows:

    local $/ = undef;  # turn on ""slurp mode""
    my $content = <$in>;

That might work in situations where the data are small, but I've heard plenty of people say that and later end up using it for very large files. It's easy to avoid that situation and not code this bad example.
",1535656478.0
BigRedS,"You've described the thing you want to match, but you don't say what the useful information that you need to get out is, or what the general patterns are here - we've only got one example, so can our regex assume that there's only one `tex_args` bit, for example? Can you show us a few different versions of what the input would be?

On the face of it, though, this looks like it might be a reasonable job for a getopt module (which are for parsing the `-<name> <value>` style options)",1534704132.0
commandlineluser,"Is there anything you can rely on?

Will `-tex` always be there? 
Will `-tex_args`? And if so does it always have a closing `-tex_args-`? (You've already mentioned there can be multiple instances)

Will `-sub_args` always have at least 1 ""argument"" present?

From the examples you've shown already it looks like we can say tab over when we see `-tex` and `-tex_args` and tab back when we see the closing `-tex_args-` - correct?",1534786790.0
Grinnz,"For completeness, OP was cross-posted to https://perlmonks.org/?node_id=1220646",1534800293.0
matthewt,"(edit: If you didn't notice because tl;dr, this is mst posting a more informed summary of the real events)

Ok.

Look.

Firstly, that quote either isn't from the right lightning talk or is equivalently (non) controversial in your head to the content of the lightning talk, which, well, the fact that that's not a universally held opinion is why it's gone.

Secondly, the talk in question was satirical and that's always risky, because good satire is only somewhat distinguishable from its target.

Thirdly, this wasn't a bully, it was somebody who was genuinely upset by the talk. Now, I would *suspect* that that means they interpreted it from a baseline of assuming bad faith, but if people have been dicks to you repeatedly in a particular way in the past then it's entirely understandable that that might happen.

Fourthly, the reason why somebody might assume bad faith is because the actual bad faith stuff is often laughed off/not taken seriously. Making it clear that it is, is an important signal to send, specifically to try and create a world where people can assume good faith and expect to be right.

Fifthly, if the talk can be misinterpreted by somebody in the room who's already immersed in its context, then removing it from the videos so that that doesn't happen again except in a worse way because of lack of context is a reasonable measure, in a ""defensive programming"" style.

Sixthly, the lightning talk is not necessarily dead, I'm pretty convinced it can be re-worked in a way that avoids it being misconstrued and have already chatted to the speaker a bit about that.

Seventhly, having chatted about the situation to the speaker they feel pretty much exactly the way I do about it, for pretty much the same reasons I've outlined above.

Eighthly, throwing a public tantrum about this doesn't help mdk, doesn't help the speaker, and definitely doesn't help the cause of getting people to believe things will be enforced so that they start assuming good faith - you're welcome to think that the complainant's upset was unreasonable, but calling them a coward and threatening retaliation because they got upset is just unncessary and counterproductive nastiness.

Ninthly, I've dealt with actual attempted incursions by the sort of asshole self-proclaimed activists that I really wish would stop claiming to be within shouting distance of feminism, and it didn't look like this in the slightest - and when I did deal with such things, I did it carefully and quietly because the actual assholes feed off public pushback, and I wanted rid of them without handing them free ammunition. So it'd be nice if you didn't hand them an entire box again, please.

Tenthly, ""psychologically manipulated"" is frankly insulting to mdk. His reasoning as I understand it is also consistent with my take on the situation, and he did actually make a coherent and rational decision. If I thought that anything dark had happened, I'd already be on the warpath, and I think you well know I tend to be a little protective of people I consider valuable community contributors.

So get off your damn high horse and quit fueling the fires of stupidity by publically imagining culture war bullshit that doesn't exist in a manner likely to *create* culture war bullshit that wouldn't've needed to exist if you'd had the basic common sense to trust mdk to know what he was doing in the first place.

Oh, and I liked the news post. Confession my arse.

  -- mst",1534704416.0
davehodg,I’m confused. It’s all so vague as to be meaningless.,1534700439.0
jplindstrom,"Wait, what?

Was the lightning talk the one with ""how to ruin a tech talk?"" or something like that? That's what it sounds like from your post:

> if you want your talk to fail, forget to bring your video adapter and drain your laptop charge

That talk seemed quite uncontroversial to me.",1534766059.0
EvanCarroll,"This is the most drama-seeking reactionary post in the sub. You're angry that some dude was held accountable in the eyes of some other people and you want us to sympathize with him without knowing what he did, and without speaking of allegations themselves?

20 years in the Perl community here: it's always been a bunch of white dudes (I can think of three of exceptions). The culture is highly problematic. Knowing that someone is trying something -- you've got a huge barrier to climb before I shit on that effort. ",1534700938.0
duskwuff,"> If I ever get to find out who you are, you're going on my shitlist and earn a lifetime ban from the conferences I help organise

And what conferences might those be, precisely?",1534715559.0
SinanUnur,Will pointing out that [*_privilidge_*](https://act.perlconference.org/tpc-2018-glasgow/news/1568) is misspelled cause offence?,1534735514.0
Narfhole,"I don't want to deal with identity politics and the easily offended when it comes to something as logical as programming, why I fucked off from github after the WEBM for Retards ban. Is the Perl community actually being infested by SJWs? :/",1534738594.0
123nige,"Perl 5 should get its own distinctive name. There are plans for Perl 6 to get a new marketing name - Perl 5 should get one too.

Checkout: [http://nigelhamilton.com/perl-branding-proposal.html](http://nigelhamilton.com/perl-branding-proposal.html)",1534832747.0
wisdom_wise,"> The first (meta) things are to

 >   Identify what ""Perl"" means

 >   Who the target groups are

 >   What (used to make) makes Perl great

>    Which market developments helped promoting Perl 

I would like to see answers to these questions. ",1534683282.0
barryoff,"perl needs function signatures and a more compact way to make objects, it's a shame to see people have been talking about this for years. 

I also would like some way to pass two lists without having to dereference them in another line. something like this

        fucnt(\@arr ,\%hash , $var);  #sub-routine call

        sub fucnt ()
        {
           my (\@arr ,\%hash , $var) = @_;
             #same as    @arr=@{$_[0]};
         }

or one step further would be

        sub fucnt(\@arr ,\%hash , $var)
         {
         #...........
         }",1534699708.0
sunshine_killer,The future of Perl 5 is Perl 7. I said it. We've all talked about it and it needs to happen. It would help with marketing. Perl is my go to for webdev and scripting for my sysadmin stuff. Its not going away.,1534779667.0
xelf,"On a related note, there's also a simplified math formula you can use. 

fib (n) = round((((√5 + 1)/2)\^n)/√5);

note: this is limited by the precision of your floating point. If you use Math::BigFloat you should be ok up to some pretty high numbers and it executes in constant time.

    #!/usr/bin/perl
    
    use Math::BigFloat;
    
    $n = 150;
    
    $r5 = Math::BigFloat->new(5);
    $r5->bpow(.5);
    
    $phi = Math::BigFloat->new(1 + $r5);
    $phi->bdiv(2);
    
    $fib = Math::BigFloat->new($phi); 
    $fib->bpow($n);
    $fib->bdiv($r5);
    
    print ""fib($n) = "" . int ( 0.5 + $fib );

> fib (150) = 9,969,216,677,189,303,386,214,405,760,200.
    
This is just math, so it executes pretty fast. Be awesome if the original author could benchmark something like that on their system for a comparison.
",1534546469.0
briandfoy,"As one of the editors of Perl.com, I'm here to help anyone that has questions. :)",1534452689.0
Chicken_Dump_Ling,Looks like good clean fun. I may give it a try.,1534444887.0
tm604,"> This doesn’t seem especially useful since you can do the same thing to a hash with the old slice syntax. 

It feels like this article somewhat misses the key point of the feature - the useful part IMHO is the return value from `delete`: you can now do things like

    $obj->login(delete %args{qw(user password)});
    $obj->buy_stuff(delete %args{qw(basket)});
    $obj->pay_for_stuff(delete %args{qw(things relating to payment)});


instead of tortuous convolutions such as

```
$obj->login(map {; $_ => delete $args{$_} } qw(user password));
```

and as /u/Grinnz says, `delete` on arrays is perhaps best avoided.",1534306292.0
Grinnz,"It's probably prudent to include that deleting elements from arrays is discouraged. From https://perldoc.pl/functions/delete :

> WARNING: Calling delete on array values is strongly discouraged. The notion of deleting or checking the existence of Perl array elements is not conceptually coherent, and can lead to surprising behavior.",1534302415.0
mweather,"It's been a while but there is a parameter in the DBI where you specify if these values are truncated or not. 

$statementhandle->{LongTruncOk=1}; if you want it to err in case of truncation and

$statementhandle->{'LongReadLen'} = 30000; to set up the lenght of your field",1534245106.0
cshelton,"Are you using a version of the Sybase database or client libraries older than version 12.5?  If so, then that is likely why you are limited to 255 characters.  Prior to 12.5, Sybase varchar fields could be not larger than 255 characters.  

See [https://github.com/opinkerfi/DBD-Sybase/blob/master/dbd-sybase.pod](https://github.com/opinkerfi/DBD-Sybase/blob/master/dbd-sybase.pod) for more info.",1534256243.0
waterkip,What does $dbh->type_info_all tell you about the varchar type?,1534251139.0
Grinnz,"Try https://metacpan.org/pod/Mojolicious::Plugin::CGI, with your unchanged CGI scripts, if you are trying to integrate this into a Mojolicious application.

CGI::Emulate::PSGI translates it to PSGI, which is not what Mojolicious uses directly (though it is compatible) - I would tend to use https://metacpan.org/pod/Plack::App::WrapCGI or https://metacpan.org/pod/Plack::App::CGIBin (also not requiring modifications to the CGI scripts) and a PSGI server (like Starman or Gazelle) rather than Mojolicious if you want to go that route.

> And since 'use::CGI' is inside the handler sub, do I put all of my other 'use' statements inside the handler sub too?

[use](https://perldoc.pl/functions/use) runs at compile time, so the scope you put it in doesn't matter (except for scoped pragmas like strict and warnings).",1534201545.0
anonymous_subroutine,"I don't see the relation between CGI::Emulate::PSGI and Mojolicious. What are you trying to do? Integrate with an existing Mojolicious app? If not, then you're not using Mojolicious at all, PSGI is not part of Mojolicious, it's a web server <-> application server specification.

> do I put all of my other 'use' statements inside the handler sub too?

No, and it doesn't matter where your `use` statements are, Perl always executes `use` statements at compile-time. 

> but later the documentation

That's if you want to use CGI::PSGI in place of CGI, the documentation states this is optional.",1534201947.0
reggie-drax,"This is exactly the kind of clever trick that led to the ""line noise"" jokes. ",1534142958.0
,[deleted],1534135024.0
dave_the_m2,"Strictly speaking, a single /e doesn't do an eval; the replacement text is treated as part of the body of the code at compile time. For example, if $& was hypothetically usable as an lvalue, then these would be equivalent (where RRR represents whatever physical text is present in the replacement part of the source code):

    s/abc/RRR/;      same as   /abc/ and $& = qq/RRR/;
    s/abc/RRR/e;     same as   /abc/ and $& = RRR;
    s/abc/RRR/ee;    same as   /abc/ and $& = eval RRR;",1534154764.0
EdibleEnergy,"Oh cool, didn't know that feature was in there.",1534098290.0
workrestplay,"His blog posts on Type::Tiny have been great. Inkster, if you're around, keep it up!

I really wish there was a better way of quickly indicating how useful a post is on blogs.perl.org - I'd even settle for those stupid Medium claps... 👏",1534100796.0
3rd_Shift,"""Which Type of Types are you using?""  

Perl is such garbage holy shit.",1534122121.0
calibos,"I clicked through the link without thinking and  I was like ""Whoah!  I gotta brush up on modern perl!  I don't even recognize this stuff!""",1534097256.0
zoffix,"Fibonacci sequence, with cache, using the Perl 6's sequence operator:

    @fib = 1, 1, *+* … ∞; say @fib[99] # OUTPUT: «354224848179261915075␤»

Piece of Perl 6 code that runs for 1 second, parallelized over 4 cores, quartering the total runtime:

    ^4 .race(:batch).map: { sleep 1 }; say now - ENTER now; # OUTPUT: «1.0488641␤»",1534096962.0
xelf,"This one is moderately legendary, it's the ""no punctuation"" JAPH.

> not exp log srand xor s qq qx xor
s x x length uc ord and print chr
ord for qw q join use sub tied qx
xor eval xor print qq q q xor int
eval lc q m cos and print chr ord
for qw y abs ne open tied hex exp
ref y m xor scalar srand print qq
q q xor int eval lc qq y sqrt cos
and print chr ord for qw x printf
each return local x y or print qq
s s and eval q s undef or oct xor
time xor ref print chr int ord lc
foreach qw y hex alarm chdir kill
exec return y s gt sin sort split

output: ""just another perl hacker""

explanation on perlmonks: https://www.perlmonks.org/?node_id=290623",1534103778.0
hymie0,"comp.lang.perl.misc used to have a regular poster named Abigail.  Abigail posted this once:

`perl -E 'say ""Prime"" if (1 x shift) !~ /^1?$|^(11+?)\1+$/' $1`

The moment I figured out how it worked, it was like the sky opened up and the angels sang.",1534119935.0
aanzeijar,"Not really one line, but the coolest Perl5 trick I saw in recent years is CoW aliasing to abuse internal regex engine state. I saw it first in Math::Prime::Util::PP. It creates a large string as a sieve because an array would be too much overhead, and more compression with vec or bitmasks would be slow. Then it can access it 0-indexed to set composites with substr:

    substr $sieve, $pos, 1, '1'

But as the last stage you want to extract the positions of primes from the string, and there comes this genius bit:

    $_ = substr($sieve, 1);
    push @primes, pos while m/0/g;

The first line creates a copy-on-write version that doesn't touch the actual hundreds of megabytes of sieve, and the global match runs blazingly fast (for Perl at least) through it and extracts the now 1-indexed positions.",1534330094.0
Grinnz,"It might be easier to follow if you start by restructuring your workflow here so that rather than creating a new promise and trying to resolve or reject it based on what happens, you just return the promise resulting from your ->then chain. Each call to ->then or ->catch returns a new promise which resolves or rejects according to the callback you pass. Then in each step you can just return a value (resolves the promise with that value passing it to the next ->then) or die (rejects the promise passing the error to the next ->catch), or return a promise from something you called. You can always pass along data structures or a list of items if you need to pass multiple items to later in the chain.",1534037663.0
Grinnz,"I would recommend instead using [lib::relative](https://metacpan.org/pod/lib::relative) and [Module::Runtime](https://metacpan.org/pod/Module::Runtime), because FindBin and string eval introduce complexities that aren't needed for this use case.",1533931323.0
rage_311,"Is there any specific reason to use `eval ""use $module""` instead of `eval ""require $module""`?",1533921669.0
EvanCarroll,"When you realize that you can't dynamically unload modules because Perl sucks, loading them at run time seems a lot less impressive.",1533910512.0
Grinnz,This is undefined behavior. There are no guarantees whether $x will be decremented before or after it is added to itself then assigned to $y. See: https://perldoc.pl/perlop#Auto-increment-and-Auto-decrement,1533852163.0
nofretting,"If you're using Modern::Perl, you might consider using ""say"" instead of ""print"".",1533870646.0
xeeeeeeeeeeeeeeeeenu,"I know it's off-topic, but please don't use c-style for. The following code is **much** more readable:

    for my $count (0..4) {
        ...
    }",1533919255.0
lindleyw,"Here's another fun one, for those of you raised on C:

    use v5.10;
    my $x = 7;
    say $x--;
    say $x;
    say $++x;
    say $x;

What do the last two lines print, and why?",1533942740.0
plainblackquy,"YoungQuavo, not trying to harsh but why not at least run the code and see?",1534028991.0
justAnotherCodeGuy,"The answer to this is:  ""Your fired.  Clean out your desk and get out""",1533907509.0
autarch,Maybe delete this post and repost it as a link?,1533916572.0
mhd,"I was doing something similar, but for each customer (determined by virtual host), so the count was pretty small. Logic was connect before request, access db via app object and close after request (e.g. use a `db` helper and `around_dispatch` hook). As our ""user"" count was small, no further optimization was required, and with Postgres as backend, I'd rather be more tame about the connection count.

So you can just set the `max_connections` of `Mojo::mysql` to 1 and be done with it. You can keep the connections object in a hash directly if you want to avoid reconnecting before each request.

Also be aware that you get your connections per worker process if running under a prefork setup (like HypnoToad). That might matter if you really need to cut down on connections, but generally a MySQL server can handle quite a few connections (default is about 150, but that's rather conservative and can easily be raised on a modern server).",1533825546.0
0rac1e,"Most people would recommend against using the `CGI` module these days. In fact, it has been removed from core Perl. Current best practice is to instead use a web framework. The main popular onea are [Catalyst](http://www.catalystframework.org/), [Dancer](http://perldancer.org/), and [Mojolicious](https://mojolicious.org/). My preference, particularly for ""lite"" webapps is Mojolicious, as it makes it pretty easy to create a small webapp in a single file, and deploy via CGI if required.

Secondly, you are requesting XML data, but not converting that XML to something you can easily query. It's probably easier to request JSON and convert that to a Perl hash... In fact, Mojolicious has built-in support for that.

Here's a simple webapp for you that I hope is simple enough for you to expand upon

    #!/usr/bin/env perl

    use Mojolicious::Lite;

    get '/' => sub {
        my $c = shift;
        $c->render(template => 'index');
    };

    post '/results' => sub {
        my $c = shift;
        my $q = $c->param('q');
        my $h = $c->param('h');
        my $url = ""http://dblp.org/search/publ/api?q=$q&h=$h&c=4&f=0&format=json"";
        my $json = $c->ua->get($url)->result->json;
        $c->render(json => $json);
    };

    app->start;

    __DATA__
    @@ index.html.ep
    <!DOCTYPE html>
    <html>
    <head>
    <title>Perl Statistics Form</title>
    </head>
    <body>
      <form action=""results"" method=""post"">
        <input size=""100"" type=""text"" name=""q"" placeholder=""Query""   ><br />
        <input size=""100"" type=""text"" name=""h"" placeholder=""Max Hits""><br />
        <input class=""button"" type=""submit"" value=""Submit"">
      </form>
    </body>
    <html>

You can test this with Mojolicious' built in development webserver `morbo`, ie. If your file is called `webapp.pl`, then run `morbo webapp.pl`. You app is now reachable at http://server-ip:3000.

This will just dump the raw JSON as a result, but you could format it however you like. If you want to play around with the data you get back, here's another small script using the [Mojo::UserAgent](https://metacpan.org/pod/Mojo::UserAgent) (from Mojolicious) and my data dumper of choice, [Data::Printer](https://metacpan.org/pod/Data::Printer).

    use strict
    use warnings;
    use Mojo::UserAgent;
    use Data::Printer;

    my ($q, $h, $c, $f) = ('query', 10, 4, 0);

    my $ua = Mojo::UserAgent->new();
    my $url = ""http://dblp.org/search/publ/api?q=$q&h=$h&c=$c&f=$f&format=json"";

    my $res = $ua->get($url)->res;

    if ($res->is_error) {
        say {*STDERR} '%ERROR: ' . $res->message;
        exit(1);
    }

    my $content = $res->json;

    p $content->{result}{hits};

Once you have the json as a Hash ref (eg. `$content`), you can pull out whatever data you need, for example

    for my $hit (@{ $content->{result}{hits}{hit} }) {
        printf(""%10d: %s\n"", $hit->{'@id'}, $hit->{info}{title});
    }

When you are ready to deploy, you can switch from the development server `morbo` to the production per-forking server `hypnotoad`. Can then throw it behind a nginx reverse proxy as desired.

Hope this helps! Mojolicious has extensive [documentation](https://mojolicious.org/perldoc) on everything. It's a little overwhelming at first, but I've found it the easiest web framework to learn, given I'm not really a web guy.",1533705379.0
raevnos,"You have to use CGI because this is for a class, right? (At least someone is still teaching perl...)

A few things: you're making that http request without using data from the form's fields as part of the url. That doesn't seem right.

You're using an empty string for the form action. IIRC the default action with CGI.pm start_form if none is given is to use the url of the script, but I don't think an empty string does that. So how do you expect the form to be able to be submitted to the right place?

You are aware that CGI isn't interactive like writing to and reading from a terminal, right? Your code looks like you're trying to send the form, and wait for it to be filled out and submitted and that data processed by the same invocation of the cgi script. That's not how it works, though. The request that displays the form and one that handles a submitted form are different (though the latter can certainly display a form too. They can even be the same script/url if you check to see if it's being run as a result of a form submission or not before producing the appropriate output). See that mojo example for a guide as to the workflow you should have.",1533715455.0
davorg,"You don't say what your problem is, so it's hard to be much help. But here are some general points about your code.

1. Always `use strict` and `use warnings`. And fix the problems they show you.
1. You set your `$url` variable and make the `get()` request without looking at the data that you're getting from the HTTP request.
1. Please don't use the HTML generation functions from CGI.pm. I know you have to use CGI.pm, but that doesn't mean you need to use those functions.
1. You're asking for XML from the website, but it will also give you JSON, which is probably far easier to deal with (just replace `xml` in the URL with `json`).
1. `$query = Query` and `$maxhit = maxHits` is just you trying random syntax in the hope it works, right? You use the `param()` function to get your query parameters.

All in all, you seem to have missed something pretty fundamental about how CGI programs work. It's a two-phase process. On the first run, your program sends the form to the browser. You then need to process a completely separate run where you deal with the data.

I'd write it something like this (well, if it was fifteen years ago and I was still writing CGI programs):

    #!/usr/bin/perl

    use strict;
    use warnings;
    use CGI qw[param header];
    use LWP::Simple;

    print header;

    # If the user has sent us parameters...
    if (param) {
      my $query   = param('Query');
      my $maxhits = param('maxHits');

      my $url = ""http://www.dblp.org/search/api/?q=$query&h=$maxhits&c=4&f=0&format=json"";
      my $json = get($url);

      # At this point, you need to do something
      # with the JSON document that you've stored
      # in $json.
      display_results($json);
    }

    # Display the input form. I've assumed it's in a
    # subroutine to hide away all the complexity.
    display_form();

    # Display the results
    sub display_results {
      my $json = shift;

      # Do something with the JSON string and print
      # some output.
    }

    sub display_form {
      print header;
      # other stuff to print the actual form.
    }",1533730023.0
quintus_horatius,"You should define your project a little more carefully.  **If it's a homework question you should be up front about it.**  If there are special requirements then you should be up front about that, too.

People here are clearly putting in a lot of thought and time in their responses, and your way of tossing those answers away with ""sorry, can't do it that way"" is kind of a slap in the face.  IMHO it's pretty rude.",1533763805.0
mpersico,"WITHDRAWN: Stupid typos in three places. This works just fine without the xsd\_files references, just using   


$build->add\_build\_element('xsd')  
",1533676538.0
Grinnz,It's just perl code. Can you be more specific about what doesn't work? Your foreach loop should set $_ to each element of the array as in a normal loop.,1533667131.0
zoffix,"What errors do you get?

That syntax looks right to me. Note that `$_->[0]` is for accessing en element in an array ref. Does `@flag_array` contain a bunch of arrayrefs?",1533667167.0
davorg,"The way to make an HTTP request in Perl is to use the [LWP](https://metacpan.org/release/libwww-perl) modules. In this case, I suspect that [LWP::Simple](https://metacpan.org/pod/LWP::Simple) will be enough. You'll also need an XML parser to parse the XML that you get back. I like [XML::LibXML](https://metacpan.org/pod/XML::LibXML).

I'll reiterate what other people have mentioned. It's a shame that your course is suggesting that you use such outdated Perl practices. It's not terrible to write a CGI program, it's not even terrible to write it using [CGI.pm](https://metacpan.org/pod/CGI). But we've known for almost twenty years that the HTML-generation functions in that module were a terrible idea.

Please look at [CGI::Alternatives](https://metacpan.org/pod/CGI::Alternatives) for a gentle introduction to more modern ways to write web applications in Perl. You might also consider passing the link on to your lecturer in the hope that future classes won't be sent out into industry with outdated skills.

**Update:** You should also include `use strict` and `use warnings` in all of your Perl programs. In this case, you'll get errors because you haven't declared your variable `$key`. You can fix that with the keyword `my`.

    foreach my $key (param()) {
      ...
    }",1533622222.0
raevnos,"Those html generating functions were deprecated a long time ago. All of CGI.pm might be, come to think of it...

Look into using Mojolicious or a similar tool for perl web-based apps.",1533605119.0
raevnos,"Anyways, are you asking how to fetch a URL?",1533605722.0
Grinnz,"The range operator uses the magical string autoincrement when given strings (which has very specific, if odd rules): https://perldoc.pl/perlop#Auto-increment-and-Auto-decrement",1533595677.0
Roknor,"""aa"" .. ""zz"" works too. ",1533589880.0
Haodemon,Did you get the job?,1533603713.0
EvanCarroll,"From the wonderful world of..  IT MIGHT WORK.

    perl -E'say for ""-10""..""01"";'

(doesn't work)",1533593226.0
ywBBxNqW,Happy anniversary!,1533545553.0
gslavik,"My understanding of the docs and using helpers in a Mojo::Lite context is that 'my_cookie_manager' creates a method in the controller, not the app.

The controller is passed in for every request.",1533355365.0
zoffix,"As a Perl 6 programmer who sometimes has to write Perl 5, I wouldn't mind seeing a similar guide going the other way. Core Perl 6 has a ton of features core Perl 5 doesn't. There's a gazillion modules that offer some of the features, but what do the cool kids use these days?

Unless you're an active participant in the Perl 5 community, it's very hard to know those things. There's `Task::Kensho`, but IMO it's too generic. I wouldn't be using `HTTP::UserAgent` in a `Mojolicious` web app. ",1533136296.0
beermad,"I think the question that has to be asked is, ""why would you bother?""

Is there any benefit whatsoever from migrating to Perl 6 that would justify the effort involved and the risk that a hitherto working system might break?",1533121013.0
steve_mynott,"I have a bad feeling about this thread.
 
It probably should be locked or deleted.",1533130530.0
cluelessbilly,"Please don't stop here, I'd enjoy reading comments on Python, Go and Node subs. Perl5 is a pretty small fish, think bigger.",1533134296.0
audioen,"The program is designed to break computer arithmetic. This is not a joke. Even perl6 breaks:

    $ ./breakperl6.pl 
    00 | 4.0000000000 | 4.0000000000 | 4/1
    01 | 4.2500000000 | 4.2500000000 | 17/4
    02 | 4.4705882353 | 4.4705882353 | 76/17
    03 | 4.6447368421 | 4.6447368421 | 353/76
    04 | 4.7705382436 | 4.7705382436 | 1684/353
    05 | 4.8557007126 | 4.8557007126 | 8177/1684
    06 | 4.9108474991 | 4.9108474991 | 40156/8177
    07 | 4.9455374041 | 4.9455374035 | 198593/40156
    08 | 4.9669625818 | 4.9669625693 | 986404/198593
    09 | 4.9800457014 | 4.9800454510 | 4912337/986404
    10 | 4.9879794485 | 4.9879744208 | 24502636/4912337
    11 | 4.9927702881 | 4.9926694965 | 122336033/24502636
    12 | 4.9956558915 | 4.9936371620 | 611148724/122336033
    13 | 4.9973912684 | 4.9569659720 | 3054149297/611148724
    14 | 4.9984339439 | 4.1829179009 | 15265963516/3054149297
    15 | 4.9990600720 | -14.4971549507 | 76315468673/15265963516
    16 | 4.9994359371 | 139.4819461498 | 381534296644/76315468673
    17 | 4.9996615241 | 101.4151436597 | 1907542343057/381534296644
    18 | 4.9997969007 | 100.0697650170 | 9537324294796/1907542343057
    19 | 4.9998781355 | 100.0034856744 | 47685459212513/9537324294796
    20 | 4.9999268795 | 100.0001742733 | 238423809278164/47685459212513
    21 | 4.9999561271 | 100.0000087135 | 1192108586037617/238423809278164
    22 | 4.9999736760 | 100.0000004357 | 5960511549128476/1192108586037617
    23 | 4.9999842055 | 100.0000000218 | 29802463602463553/5960511549128476
    24 | 4.9999905233 | 100.0000000011 | 149012035582781284/29802463602463553
    25 | 4.9999943140 | 100.0000000001 | 745059330625296977/149012035582781284
    26 | 4.9999965884 | 100.0000000000 | 3725294111260656556/745059330625296977
    27 | 4.9999979530 | 100.0000000000 | 18626462930705797793/3725294111260656556
    28 | 4.9999987718 | 100.0000000000 | 4071034/814207
    29 | 4.9999992631 | 100.0000000000 | 5/1
    30 | 4.9999995579 | 100.0000000000 | 5/1
    31 | 4.9999997347 | 100.0000000000 | 5/1
    32 | 4.9999998415 | 100.0000000000 | 5/1
    33 | 4.9999999178 | 100.0000000000 | 5/1
    34 | 5.0000002093 | 100.0000000000 | 5/1
    35 | 5.0000052983 | 100.0000000000 | 943696/188739
    36 | 5.0001066330 | 100.0000000000 | 46886/9377
    37 | 5.0021330151 | 100.0000000000 | 2346/469
    38 | 5.0426423508 | 100.0000000000 | 6031/1196
    39 | 5.8456351856 | 100.0000000000 | 15602/2669
    40 | 19.4660958648 | 100.0000000000 | 27272/1401
    41 | 79.3143153484 | 100.0000000000 | 76459/964
    42 | 98.6959677737 | 100.0000000000 | 122383/1240
    43 | 99.9339369046 | 100.0000000000 | 77149/772
    44 | 99.9966946616 | 100.0000000000 | 60498/605
    45 | 99.9998347276 | 100.0000000000 | 604999/6050
    46 | 99.9999917364 | 100.0000000000 | 12101199/121012
    47 | 99.9999995868 | 100.0000000000 | 100/1
    48 | 99.9999999793 | 100.0000000000 | 100/1
    49 | 99.9999999990 | 100.0000000000 | 100/1
    50 | 99.9999999999 | 100.0000000000 | 100/1
    51 | 100.0000000000 | 100.0000000000 | 100/1

By iteration 51, perl6's Rat has converged to same answer as floating point. The issue is with performance. Rat tries a little bit harder to be more precise, but it degrades to an approximation eventually, and does it silently and behind your back. In other words, Perl 6 will also give you the wrong answer.",1533044361.0
raiph,"**Update**. Edited per audioen's comment.

Three options:

* **100% accurate**, but slowest. Use **unlimited precision rational** numerics, aka `FatRat`. If you set the number of iterations high enough the calculation will take absurdly long. If you display the result of an iteration using `print`, as I do in the code below, it is displayed as `4.9999999999999999...` at iteration ""74"" and rounded to just `5` from iteration ""75"" onwards. See audioen's comment below and my reply to theirs for further discussion of this.
* Less accuracy, but faster. Use **whatever precision** numerics. Sequence goes haywire at around iteration ""35"".
* Least accuracy, but fastest. Use **floating point precision** numerics, aka `Num`, double floats. Sequence goes haywire at around iteration ""15"".​​

​

    sub rational { ( 108 - ( 815 - 1500/$^y ) / $^z ) .FatRat }
    sub whatever {   108 - ( 815 - 1500/$^y ) / $^z           }
    sub floating { ( 108 - ( 815 - 1500/$^y ) / $^z ) .Num    }
    
    constant iterations-of-interest = <2 3 12 13 14 17 28 34 40 52 53 74 75 1000>;
    
    constant numeric-types-of-interest = [&rational, &whatever, &floating];
    
    for iterations-of-interest -> $nth
    {print ""\n$nth"";
     for numeric-types-of-interest -> &type
     {print ""\n&type.name(): \t"";
      print .[$nth] given 4, 4.25, &type ... Inf}}

displays:

    2
    rational: 	4.470588
    whatever: 	4.470588
    floating: 	4.470588235294118
    3
    rational: 	4.644737
    whatever: 	4.644737
    floating: 	4.64473684210526
    12
    rational: 	4.9956558915
    whatever: 	4.9956558915
    floating: 	4.993637162006792
    13
    rational: 	4.9973912684
    whatever: 	4.9973912684
    floating: 	4.956965971956066
    14
    rational: 	4.99843394394
    whatever: 	4.99843394394
    floating: 	4.182917900925375
    17
    rational: 	4.9996615241038
    whatever: 	4.9996615241038
    floating: 	101.41514365970045
    28
    rational: 	4.999998771812311329999
    whatever: 	4.999998771812315
    floating: 	100
    34
    rational: 	4.9999999426976416501660969
    whatever: 	5.0000002093320575
    floating: 	100
    40
    rational: 	4.99999999732650109580505138658
    whatever: 	19.466095864788358
    floating: 	100
    52
    rational: 	4.99999999999418037480227063278209046744
    whatever: 	99.99999999999987
    floating: 	100
    53
    rational: 	4.99999999999650822488135831550476123014
    whatever: 	100
    floating: 	100
    74
    rational: 	4.99999999999999992340110157492410507214191742577871705
    whatever: 	100
    floating: 	100
    75
    rational: 	5
    whatever: 	100
    floating: 	100
    1000
    rational: 	5
    whatever: 	100
    floating: 	100

The *rationals* (`FatRat`) sequence maintains **100% accuracy throughout** in the underlying values. However, each value is displayed using `print` in the above code and `print` stops printing digits after a while rather than print out potentially infinite digits. At iteration “75” `print` prints `5` and does not change thereafter even though the underlying fractions grow ever larger numerators and denominators. See audioen's comment below and my reply.

The *whatever* sequence, which shows the default results the language returns if you don’t specify what number types you want, starts out as a `Rat`. A `Rat` is like a `FatRat` except it gives up on 100% accuracy and slims down to a `Num` when the denominator of a user visible stored result would exceeds 64 bits. This yields exactly the same results as the *rational* sequence (`FatRat`) until iteration “28” when it switches to `Num` (float) and the two sequences begin to diverge. Note that it’s still way better than the *floating* sequence that uses `Num` from the start. When the *whatever* sequence first diverges it is actually closer to `5` than the `FatRat` sequence. It soon overshoots `5` at iteration “34”, loses the plot by iteration “40”, hits `100` at iteration “53” and never moves off it thereafter.

The *floating* (`Num`) sequence becomes the least accurate from iteration “3”. It begins to noticeably lose the plot around iteration “12” and completely lose it by iteration “15”. It hits `100` at iteration “28” and never moves off it thereafter.",1533090915.0
mithaldu,"I don't know if there is a backup, but you might be able to build a dist of it with this: https://metacpan.org/release/Perl-Dist-Strawberry",1532958022.0
plainblackquy,"It seems to be up now:

[http://strawberryperl.com/releases.html](http://strawberryperl.com/releases.html)",1533009380.0
cluelessbilly,"    use Date::Calc qw(Add_Delta_Days); 
    my ($y, $m, $d) = Add_Delta_Days(2012,1,1,186); 
    use POSIX qw(strftime);
    print strftime(""%B%e, %Y\n"", 0, 0, 0, $d, $m-1, $y-1900);

    July 5, 2012
",1532721467.0
2A_is_the_best_A,"So, as maybe the last user that uses Date::Calc left on the planet (it seems), I gotta say you should at least be using the object oriented version...

    $date = Date::Calc->new($selected_year, 1, 1 ) + [0,0,$day[0]-1];
    $date->date_format(3); # Or a coderef to your custom format
    ""$date"";
> Thursday, July 5th 2012

You can pass it a custom handler for whatever format you want, though. I don't believe the built in 4-5 formats are exactly the one you're looking for, however.",1532723214.0
tarje,"see the sidebar: ""Want coding help? Asking at PerlMonks or Stack Overflow may give faster assistance."" irc will also get you faster help.",1532720132.0
smutaduck,"That appears to be instructions to port CGI::Application things to mojo.  I don't know anything about CGI::Application but it appears to use \`?rm=whatever\` for dispatch.  In which case it would be a perfectly good way of providing persistence - althought the docs there are a bit light.  Note the old CGI protocol support in perl is  and evil (it bad things with \`STDIN\` and \`%ENV\`) , so you'd want to do your best to avoid writing new code using that approach.",1532694857.0
davehodg,"./moss.pl

Possibly

 perl ./moss.pl",1532678827.0
daxim,"Some very basic sanity checks:

Run `pwd` (**p**rint **w**orking **d**irectory) in the terminal. Is this the directory you expect?

Use Spotlight or another search tool to locate `moss.pl`. Is it in the directory you think it was?",1532667141.0
davehodg,"ls -l moss.pl

Does moss.pl have a correct hashbang line?",1532681840.0
djerius,"I use Moo in part because I need to be able to [fatpack](https://metacpan.org/pod/distribution/App-FatPacker/bin/fatpack) executables, so while Moo *can* use XS modules, it doesn't *have* to.  Pure Perl still has its place.

There was a time early on when Mouse wasn't feature-complete with regards to Moose.  I stayed with Moose because of that, and when Moo came out switched to that for its much faster startup time (at $work software is on centralized NFS volumes, and loading modules is sloooooow).

I admit that I've never gone back to see if Mouse has achieved parity with Moose features.",1532631629.0
Grinnz,"The main issue is that interoperability between Moose and Mouse is the fundamentally flawed [Any::Moose](https://metacpan.org/pod/Any::Moose), whereas interoperability between Moo and Moose is built-in to Moo and just works. And while yes, Mouse is going to be faster than Moo in a sprint (and especially when using the metaclass which in Moo will just use Moose), Moo is hyper-optimized to the point where the average user wouldn't notice a difference, and has extensibility options for further optimization if it becomes necessary.",1532628649.0
dominix_pf,"So, if not Dot, why not Moxie ? https://metacpan.org/release/Moxie",1532663931.0
minimim,"Did you try 6model, available in Perl 6?",1532696743.0
meat_eggplant,"Hello, Mr. Kolyshev, I think [Dot](https://metacpan.org/pod/Dot) meets your requirement, it's an object system without code, thus:

* the lightest : zero dependency including itself, since there's no code.
* the most stable : no code, no bug.
* the fastest : since there's no code, you can't spend any time executing it.

Maybe it could be added as an option.

Regards.",1532653268.0
allak,"         my $dt = DateTime->from_day_of_year( year => 2018, day_of_year => 31 );

This should work.",1532614499.0
daxim,"Because one can't code in *anything* without looking stuff up (at least some of the time). Human memory is imperfect, so people forget and misremember things they don't use often (like `tie`). A good IDE with inline hints that can jog the memory goes a long way.

`pack`'s excuse is its terse design - it's a language within a language, just like regex, getopt, sprintf, strftime and uniprops. Can we blame C culture for that? I can certainly imagine alternative, more verbose expressions for these features and they would be more memorable, but possibly also more unwieldy; this needs experimental confirmation.

Personal ""anecdata"": I distinctly remember using ""jump to context help"" in QuickBASIC and Turbo Pascal all the time. I know tie, but not how to use Tie::StdScalar. I don't know

* which way int, floor, ceil round
* what autodie catches, and what not
* the API of especially big libraries like LibXML or DBIC or DateTime (synopses are *great*! why don't docs in other languages have that?)
* the name of MHX's hash module
* the syntax for named regex backrefs
* the posix charclass name for hexdigits
* what the name of the dwimmy json module is (not ::DWIM, the other one)
* my favourite -D switches for `perlbrew install`
* the command-line for Deparse
* in which Perl version which `use feature` was added
* how the variants of POD =item render as HTML
* the name of that email header encoding supported by Encode
* how to get perldoc with user contrib
* what the magic method for ""no"" is
* zero-padding with sprintf
* the module name for undoing PERLQQ or C escapes

… and much much more. And some recent non-Perl things:

* which the non-characters in Unicode are
* how shell quoting for single delimited within single delimited works (is it `'\'''`?)
* how to upload files via Web form with curl
* `chcp UTF-8` is wrong, what's the magic number?
* how to make a throw-away database self-contained in a directory with mysql
* CSS3 selectors
* preparations for profiling with kcachegrind
* additions to a .pro file for Verdigris
* the xattr command that's not stupid

I only can get things done because I'm good at looking up information (heartfelt thank you, [Fravia](http://enwp.org/Fravia)+ and [Searchlores](http://search.lores.eu/indexo.htm)) and I can remember decently where I was seeing things before on a mailing list or on the Web. I also have many crutches so I don't need to remember things so often; the most productive is [realias](http://www.modernperlbooks.com/mt/2009/10/remove-the-little-pessimizations.html).",1532592979.0
Grinnz,"pack and unpack for me, definitely. Even after rereading the documentation it takes two or three tries to use it correctly. substr and splice argument order I sometimes have to look up. Various low level functions have odd error checking requirements, particularly do EXPR and syscalls.",1532590545.0
perlancar,"For the longest time I always need to look at the documentation whenever I want to use `splice`.

Also any function which returns an array of information: `getpw*`, `getgr*`, `localtime`/`gmtime`, `stat`, `caller`. ",1532588094.0
exploding_cat_wizard,"The order of the match operator

    =~
or

    ~=

I learn that anew everytime I start a new project. Somehow it doesn't stick.",1532598263.0
choroba,"The syntax of lookaround assertions (was it `?!=` or `?!<`).

Preventing `sort function(@list)` from using `function` as a comparator.

Order of arguments for Encode's `encode` and `decode`.

Also, ""And I ne""...?",1532588360.0
mithaldu,Hash slice syntax.,1532590932.0
djerius,"The ""indirect object"" form of the `exec` and `system` functions. (I still can't figure out why it's called that.  I don't see an object anywhere.)

I always forget that it's `exec { $cmd } $cmd, @args`, not `exec { $cmd } @args` and wonder why nothing ever works.",1532632020.0
RandalSchwartz,Even Larry Wall says he has to look up things from time to time.,1532805900.0
talexbatreddit,"Here's a somewhat obscure one .. I was opening a bunch of file handles that were being stored in a hash table. However, printing to those filehandles was a problem .. it turned out I needed to do this:

    print { $hash{$key} } ""Line for $key file"";

In other words, put the filehandle inside a scope. It's not something you do more than once a year.",1532697705.0
aanzeijar,"I always have to look up the calling conventions for standard modules. Getopt::Long, IO::File, Time::HiRes, B::Deparse, B::Concise, Exporter, overload for example.

As for the language core: AUTOLOAD. Every time I need some dynamic method dispatch, I have to look up the boilerplate to do it properly. Also regexp control verbs.",1532613559.0
minimim,"As the story goes, no one is able, even to save their own life, to remember how `tar` command line switches work.

https://xkcd.com/1168/

It's not Perl specific at all.",1532617187.0
zakame,"For me, probably [formats](https://perldoc.pl/perlform), simply because I haven't used them much yet.  I suspect a lot do not use it much either.",1532974858.0
saiftynet,"Not used the module before but the formula you show uses semicolons as separators, and my version of LO uses commas.  When I enter manually using semicolons, the formulas are autocorrected to commas again...so this may represent why your manual edits corrects the formula.  Also after $lookup you have a ""."", whereas my version of LO requires a "","".  ",1532536100.0
thseeling,"Problem solved. The syntax for the perl module should look like this:

    =IFERROR(VLOOKUP(A1,Lookup!$A$1:$B$10000,2,0),"""")",1532611798.0
cluelessbilly,"Does this application currently work via http ? https is usually transparent and handled by the server, switching a tls version should not break anything.",1532472191.0
Tad2much,"Perl CGIs don't normally terminate encryption.  What OS, webserver, and openssl versions do you have?  If you are running on something like rhel/centos 5 I think they used openssl 0.9.8 which didn't have tls 1.2 support IIRC.",1532476030.0
daxim,"Repost to reddit because the blog software ate my comment.

----

There is nothing wrong with installing things from CPAN. Moops gets you very far to code block №3.

    # ovid-moops1.pl
    use Moops qw(class method);
    class Cache::LRU {
        use Hash::Ordered qw();
        use Types::XSD::Lite qw(PositiveInteger);
        my $x = Hash::Ordered->new; # private
        has max_size => (
            isa => PositiveInteger,
            default => 20,
            required => 1,
            is => 'rw',
        );
        method set(Str $key, Any $value → Undef) {
            $x->shift if $x->keys > $self->max_size;
            $x->delete($value);
            $x->set($key, $value);
        }
        method get(Str $key → Any) { $x->get($key) }
    }
    class main {
        my $cache = Cache::LRU->new(max_size => 100);
        $cache->set(foo => 42);
        say $cache->get('foo');
        use DDP; p $cache;
    }

The ""has"" above feels verbose compared to your variant reminiscent of <https://github.com/stevan/p5-mop-redux/blob/master/lib/mop.pm#L340>. It is not well specced out, but I can run with it.

    # ovid-moops2.pl
    use Moops qw(class method);
    BEGIN {
        Keyword::Simple::define 'bikeshed_has', sub {
            require MooseX::Has::Sugar;
            my ($code) = @_;
            # I must be crazy to parse Perl that way.
            my $semicolon_pos = index $$code, ';';
            my @tokens = split ' ', substr $$code, 0, $semicolon_pos;
            my $type = shift @tokens;
            my $default_value = pop @tokens;
            pop @tokens; # '='
            my $attr_name = pop @tokens;
            my $sugar_traits = join ',', map { s/^://r } @tokens;
            my $macro = ""use MooseX::Has::Sugar qw(required rw); has $attr_name => (isa => $type, default => $default_value, $sugar_traits);"";
            substr $$code, 0, $semicolon_pos, $macro;
        };
    }
    class Cache::LRU {
        use Hash::Ordered qw();
        use Types::XSD::Lite qw(PositiveInteger);
        my $x = Hash::Ordered->new; # private
        bikeshed_has PositiveInteger :rw :required max_size = 20;
        method set(Str $key, Any $value → Undef) {
            $x->shift if $x->keys > $self->max_size;
            $x->delete($value);
            $x->set($key, $value);
        }
        method get(Str $key → Any) { $x->get($key) }
    }
    class main {
        my $cache = Cache::LRU->new(max_size => 100);
        $cache->set(foo => 42);
        say $cache->get('foo');
        use DDP; p $cache;
    }

I wish I had this kind of power in other popular languages.",1532467019.0
minimim,Some people actually consider the goofy clusterfuck Damian invented for a presentation as a serious contender.,1532481044.0
0rac1e,">For ""is $x in @y""-type queries...

Is there any parser ambiguity preventing p5p from implementing an `in` infix op similar to Python?

For one, being able to do `if ($x in @y)` might sate those smartmatch stalwarts who don't want to move away from it because they find `if ($x ~~ @y)` too valuable to give up.

Secondly, if it was context aware so it would also work with scalars on the RHS, `if ($substring in $string)` is a helluva lot nicer to write and read than `if (index($string, $substring) >= 0)`, and could also take advantage of 5.28's recent optimisation to `index()`.",1532496687.0
briandfoy,I cover in-dpeth most of the interesting user-level additions (and sometimes removals) at the Effective Perler under [new features](https://www.effectiveperlprogramming.com/category/perl/new-features/).,1532538289.0
Grinnz,"This article is a good start: https://www.activestate.com/blog/2017/05/upgrading-perl-modern-version-activestate-guide

In general you can look at the perldelta of each major version: https://perldoc.pl/perl5100delta, https://perldoc.pl/perl5120delta, https://perldoc.pl/perl5140delta, etc",1532407863.0
tm604,"This only covers the changes between 5.14 to 5.24, but might be an easier read than the individual perldeltas: https://www.reddit.com/r/perl/comments/91ghjb/perl_improvements_going_from_514_to_524/ (apologies for the terrible title image, but I really couldn't face yet another camel/onion montage)

I'll work on an updated one for 5.24 -> 5.28... it'll be a bit shorter!",1532431202.0
subogero,"For me the two most useful new features were these:

* Perl 5.10: the `//` defined-or operator
* Perl 5.20: the `List::Util` core module gains `pairmap` and `pairgrep`, to allow transforming hashes in a functional way.

Example:

    use List::Util qw(pairgrep);
    my %odd = pairgrep { $b % 2 } qw(one 1 two 2 three 3 four 4 five 5);

Results in `(one => 1, three => 3, five => 5)`",1532444585.0
0rac1e,"If you work with nested lists, experimental `decalred_refs` feature added in 5.26 makes them a lot nicer to iterate over.

    use v5.26;
    use warnings;
    use experimental qw( refaliasing declared_refs );
    
    my @lists = ([1, 2, 3], [4, 5, 6], [7, 8, 9]);
    
    for my \@list (@lists) {
        say join(', ', @list)
    }

If you are moving to 5.28, `refaliasing` is no longer experimental, so you don't need to explicitly enable that.

If you want to play with experimental features, I recommend installing the [`experimental`](https://metacpan.org/pod/experimental) module, which enables the feature and disables the warning. There's also an [`experimentals`](https://metacpan.org/pod/experimentals) module that enables all experimental features for your version of Perl.",1532495929.0
davorg,"Two courses I've run at the London Perl Workshop.

* [Modern Core Perl](https://www.slideshare.net/davorg/modern-core-perl) covers Perl 5.10 to 5.14
* [Modern Perl Catch-up](https://www.slideshare.net/davorg/modern-perl-catchup) covers Perl 5.16 to 5.24",1532549697.0
bennymack,https://www.effectiveperlprogramming.com/category/perl/new-features/,1532959525.0
davehodg,"I heard rumblings about the latest being a bit flaky. Blame Zefram. 

I used to be religious about brewing a recent perl, but now distros are relatively recent, I’m not.",1532419472.0
niceperl,"[DBIx::Class](https://metacpan.org/pod/DBIx::Class) is your friend

If you are developing your web app with Mojolicious, [this example helps you](https://github.com/tempire/MojoExample) a lot.",1532414199.0
jplindstrom,"> Would there be a good way to maintain good test data that could easily populate either database depending on the setting? 

My current go-to for database migrations is [App::JESP](https://metacpan.org/pod/App::JESP). It's the least amount of functionality that you actually need.

I've used Sqitch a lot, but found it's just trying to do too much. I think it's also a bit too much inspired by Git without taking into account the difference between managing source code (light weight to upgrade/downgrade) and data (very heavy weight to upgrade/downgrade).
",1532429190.0
Grinnz,"The Mojo wrappers both provide Migrations which allow seamless schema management.

For models, you could get away with using the same query for certain simple queries, especially via the SQL::Abstract helpers, but I would design it from the start to have an abstraction for each backend you want to support because at some point there's going to be differences.",1532444691.0
pre_action,"Another tool you might find helpful for this is [Yancy](https://metacpan.org/pod/Yancy): The [Yancy::Backend API](https://metacpan.org/pod/distribution/Yancy/lib/Yancy/Backend.pod) can be used with either Mojo::mysql or Mojo::SQLite, so which database you use becomes configuration. I wrote it for CPAN Testers, which also uses DBIx::Class (which Yancy also supports).

I keep thinking I should extract the Yancy::Backend classes to make some kind of model class for Mojolicious, but I've not done so as yet.",1532629899.0
kkrev,"Why? Just use MySQL for development, too.",1532976922.0
mr_chromatic,What if the module has a syntax error?,1532399237.0
Grinnz,"If I had to guess, I would say this exists because require is implemented via [do FILE](https://perldoc.pl/functions/do) which returns undef when it fails, which is indistinguishable from a file that returns undef. (But I could be totally wrong, because all of this happens in C.) And also probably because early Perl tended to avoid exceptions.",1532389061.0
frezik,"An alternative would be a pure Perl implementation, though you wouldn't be able to override `use`. Call it `load($@)`. Have it search through `@INC` as is done in the C implementation (there are a few advanced uses here, like having a subref in `@INC`). Then slurp the file and `eval(STRING)` it, and check `$@` for errors. Then pass the array that was passed to `load($@)` to `import()`.",1532396382.0
cluelessbilly,One of most useless and annoying 'features'. Just kill it with fire.,1532371453.0
daxim,"If you want this now, solutions are for years available on CPAN:

* http://p3rl.org/true
* http://p3rl.org/perl5i#true",1532418178.0
Grinnz,"Discussion thread on p5p: https://www.nntp.perl.org/group/perl.perl5.porters/2018/07/msg251647.html

And a reply mentioning that there is actually a possibly usable (though underdocumented) difference between dying and returning false from require: https://www.nntp.perl.org/group/perl.perl5.porters/2018/07/msg251670.html",1532969625.0
duckduckgoose9,"Thank you to all who allowed, appear in, captured, posted (and spread the word about) the videos.  

As someone who used to go to these type conferences, but haven't in many years (work doesn't send employees; vacation spoken for), it keeps me connected to the community and I learn useful and cool things.",1533062234.0
Grinnz,"Often the best solution to this is to run the code in an unrelated process. Minion is a possible solution as the workers are started separately and the application workers have no bearing on it, and you could use the locking logic to ensure only one job is run at a time. Another solution is to run a separate process either started yourself or forked from application startup (startup is only run once, not per worker), but you cannot use a Mojo subprocess for this because it won't start until the event loop starts in each worker. When not using Minion, you can communicate with the external process via a database or pubsub, and it can manage the timers itself.",1532274173.0
workrestplay,Does the background process need to be always running? If it's something that just needs to run periodically and update a cache I wouldn't over engineer it and run a cron job at relevant intervals.,1532250416.0
GlauchanGuy,Going through the same thing right now. The only conclusion I could come to was that I'd have to spin up a separate app server with only a single process and communicate between the two somehow. I don't know anything about communicating between processes so I'm just treating it as a web app and POSTing JSON to it. Thankfully I have the luxury of building this thing from the ground up.,1532360964.0
Grinnz,"    use List::Util 1.33 'none';
    sub only_in_first {
      my ($first, $second) = @_;
      return [grep { my $x = $_; none { $_ eq $x } @$second } @$first];
    }

    sub only_in_first {
      my ($first, $second) = @_;
      my %in_second = map { ($_ => 1) } @$second;
      return [grep { !$in_second{$_} } @$first];
    }",1532206500.0
tektektektektek,"If I knew list _b_ was not going to get too large I'd perform an additional step of putting each item from _b_ into a temporary hash for extremely fast look-up which would speed iteration over list _a_:

    sub only_in_a {
      my ( $ref_list_a, $ref_list_b ) = @_;
    
      my %hash_of_b = map { $_ => 1 } @$ref_list_b;
      my @list_result = grep { ! $hash_of_b{$_} } @$ref_list_a;
      return( @list_result );
    }
    
    my @list_a = qw( red green blue yellow );
    my @list_b = qw( pink blue orange );
    print( join( "","", only_in_a( \@list_a, \@list_b ) ) );

Outputs:

    red,green,yellow",1532209923.0
audioen,"On assumption that the values in list are strings, there exists:

    my %tmp;
    @tmp{@a} = ();
    delete @tmp{@b};
    return keys %tmp;

This, of course, avoids list scanning so the algorithm is efficient. Unfortunately, Perl hash keys have not been generalized to be arbitrary objects, so there is that significant limitation with this approach.",1532245131.0
MattEOates,In Perl 6 I wouldnt bother with a function since there is an operator `@a (-) @b`,1532207270.0
djerius,"In the Perl equivalents, for maximum efficiency, don't use `map` to populate the flag hash.  Use an assignment:

    @foo{@array} = undef;

Similarly, don't check the flag as a boolean, check if it exists:

    grep { exists $foo{_} } @array

Here are some timings (on Perl 5.28.0)

    %foo = map { $_ => 1 } @array    3690/s
    @foo{@array} = @array            5236/s
    @foo{@array} = (1) x @array      7752/s
    @foo{@array} = undef             8850/s

and

    grep { $_ } @foo{@array}         18939/s
    grep { exists $foo{_} } @array   25773/s

See [this gist](https://gist.github.com/djerius/085fc1dacc14162ad303a5cadc2266a9) for the code",1532281813.0
daxim,"Is it common to do set arithmetic in Python on lists?

    › re.pl
    $ use Set::Scalar qw()
    $ Set::Scalar->new(15..50) - Set::Scalar->new(23..42)
    (15 16 17 18 19 20 21 22 43 44 45 46 47 48 49 50)

An expression isn't worth a function.",1532207989.0
cluelessbilly,"Most efficient Perl 5 solution that preserves order is:

    use Array::Utils qw(array_minus); 
    my @a = 0..10000; 
    my @b = 5000..10000; 
    array_minus(@a, @b);

This is how it's defined in the module:

    sub array_minus(\@\@) {
        my %e = map{ $_ => undef } @{$_[1]};
        return grep( ! exists( $e{$_} ), @{$_[0]} ); 
    }

By the way, never use your original code on large lists, it's orders of magnitude slower than any solution that involves an intermediate hash/set/dict.

    a.difference(b)

does not work on lists, you need to convert them to sets first but is very efficient.
It's akin to another solution posted:

    my %tmp;
    @tmp{@a} = ();
    delete @tmp{@b};
    return keys %tmp;

And for last, a literal translation to perl of your original construct, it's very slow, slower than the python's solution (I guess it is somewhat optimized in python, cause it's an idiom)

    my @a = 0..10000;
    my @b = 5000..10000; 
    grep { my $i = $_; !grep { $i eq $_ } @b } @a;
",1532270151.0
subogero,"A small example program, measuring times for small (100) and large (10000) lists. Two methods, O(n^2) linear search, and a O(log n)?? hash based search. The hash based search could be faster, but the Python example preserves both order and duplicate elements in `a`, same here.

    use strict;
    use warnings;
    use Time::HiRes qw(time);

    my @a1 = map { int rand 2000 } 1 .. 10000;
    my @b1 = map { int rand 2000 } 1 .. 10000;

    my @a = @a1[0 .. 99];
    my @b = @b1[0 .. 99];

    my $t0 = 1000 * time;
    my $f = grep { my $a = $_; not grep { $_ == $a } @b } @a;
    my $t = 1000 * time;
    my $f1 = grep { my $a = $_; not grep { $_ == $a } @b1 } @a1;
    my $t1 = 1000 * time;
    $t1 = 1000 * time;
    printf ""Linear search - %3d/100: %9.3fms, %5d/10000: %9.3fms\n"", $f, $t - $t0, $f1, $t1 - $t;

    $t0 = 1000 * time;
    my %h;
    @h{@b} = ();
    $f = grep { not exists $h{$_} } @a;
    $t = 1000 * time;
    my %h1;
    @h1{@b1} = ();
    $f1 = grep { not exists $h1{$_} } @a1;
    $t1 = 1000 * time;
    printf ""  Hash search - %3d/100: %9.3fms, %5d/10000: %9.3fms\n"", $f, $t - $t0, $f1, $t1 - $t;

I print runtimes, plus the size of the filtered lists, just to make sure the two algorithms give the same results.

    Linear search -  98/100:     0.749ms,    60/10000:  7036.516ms
      Hash search -  98/100:     0.092ms,    60/10000:     6.896ms
",1532605036.0
glgraca,"I'd use the smartmatch operator:

    #/usr/bin/perl
    
    use experimental 'smartmatch';
    
    my @a=qw(1 2 3);
    my @b=qw(2 4 5);
    
    sub diff(\@\@) {
      my $a=shift;
      my $b=shift;
      grep { !($_ ~~ @$b) } @$a;
    }
    
    print join ',', diff @a, @b;",1532970381.0
adrianorf,"
    use Mojo::Base -strict, -signatures;
    use Set::Light;

    sub do_the_thing($a, $b) {
        my $x = Set::Light->new(@$b);
        [ grep !$x->contains($_), @$a ];
    }
",1532308161.0
saiftynet,That was filed in 2016...should that not be already patched in the versions on CPAN?,1532551082.0
commandlineluser,Thank you for creating this \o/,1532199928.0
cluelessbilly,"Yep, thanks Grinnz. Very nice tool. ",1532224751.0
mithaldu,"You might be out of luck installing that on strawberry. Nobody has reported a successful install of that on windows yet: http://matrix.cpantesters.org/?dist=PDL-NetCDF+4.20

That said, Strawberry has a package with PDL preinstalled, maybe if you grab that it might have the dependences for netcdf.

Otherwise it might simply be easier to do it on linux.",1532040938.0
briandfoy,"The `merge` doesn't return a URL. That's a [Mojo::Parameters](https://mojolicious.org/perldoc/Mojo/Parameters#merge) object. The URL has already been modified in place so use that same variable:

	use v5.10;
	use Mojo::DOM;
	use Mojo::URL;

	my $html = '... <a href=""http://www.example.com/foo?bar=baz""> ...';
	$doc = Mojo::DOM->new( $html );

	$doc
		->find('a')
		->each( sub {
			my $url = Mojo::URL->new( $_->attr( 'href' ) );

			my $new_query = $url->query
				->merge( 'q_key1' => 'something', 'q_key2' => 'something2' );
			# say ""new query is "", ref $new_query;  # Mojo::Parameters
			$_->attr( 'href', $url );
			} );

	say $doc;
",1531923716.0
liztormato,dupe of https://www.reddit.com/r/perl/comments/8z9kpa/a_salutary_tale_of_language_addiction/ ?,1531906683.0
daxim,"> system(""mkdir -p $cacheDir 2> /dev/null"");

Don't use shell commands for stuff that Perl already can do. You're also suppressing any error that might occur, that's bad programming, you just run into bugs and don't know what's going on.

Instead use the `make_path` function. It will throw an error when something goes wrong.

    use File::Path qw(make_path);
    make_path $cacheDir;
    # program might abort here, e.g.
    # ""mkdir /root/foobar: Permission denied at …""

You could catch the error if aborting is not acceptable:

    use File::Path qw(make_path);
    use TryCatch;
    try {
        make_path $cacheDir;
    } catch($err) {
        warn ""could not create directory: $err"";
        # Now what? Try another directory from configuration?
        # Ask the user for a different one?
    }
",1531851133.0
dannywoodz,Have a look at make\_path from the core File::Path module.  It's better than shelling out to mkdir.,1531850390.0
Grinnz,"Mojo comes with [Mojo::File](https://metacpan.org/pod/Mojo::File) which wraps several operations like this with proper error checking, a mini-clone of the venerable [Path::Tiny](https://metacpan.org/pod/Path::Tiny) which you could also use easily enough. In general I use one of these for all filesystem operations as they have a clean, consistent API and are most likely to get things right. I'm going to assume the write_file you are using is most likely from File::Slurp, which is [likely to get things wrong](http://blogs.perl.org/users/leon_timmermans/2015/08/fileslurp-is-broken-and-wrong.html).",1531852587.0
plainblackquy,Are you saying that someone may remove the directory just before you attempt to write the file to that directory?,1531846181.0
n30h80r,Well I see from your snippet you are doing a syscall to make the directory before writing. Why not add a syscall to touch the file after that as well?,1531847420.0
atsider,"`IO::All` has a method, `assert`, that creates the path in the same operation if it does not exist:

https://metacpan.org/pod/IO::All#assert",1531848714.0
daxim,"This topic should be ideally documented with Perl, but I can't find something relevant apart from http://p3rl.org/perl5120delta#@INC-reorganization

> is C:\Perl\site a common folder

No idea what common folder is.

> how do files get in there?

By user installation, from CPAN clients and manual installation.

When you install a fresh Perl, you will see that `site` is empty.

The other two directory trees are `vendor` where OS-provided packages go (or in the case of Strawberry Perl, extra modules that the Strawberry maintainers thought are nice to have), and the prefix-less one where core modules (i.e. the modules that ship with Perl itself) go.

    › /usr/bin/perl -E'say for @INC'
    /usr/lib/perl5/site_perl/5.26.2/x86_64-linux-thread-multi
    /usr/lib/perl5/site_perl/5.26.2
    /usr/lib/perl5/vendor_perl/5.26.2/x86_64-linux-thread-multi
    /usr/lib/perl5/vendor_perl/5.26.2
    /usr/lib/perl5/5.26.2/x86_64-linux-thread-multi
    /usr/lib/perl5/5.26.2
    /usr/lib/perl5/site_perl

Vendor is optional, e.g. my self-compiled Perl:

    › perl -E'say for @INC'
    /home/daxim/local/share/perlbrew/perls/perl-5.26.2/lib/site_perl/5.26.2/x86_64-linux-thread-multi-ld
    /home/daxim/local/share/perlbrew/perls/perl-5.26.2/lib/site_perl/5.26.2
    /home/daxim/local/share/perlbrew/perls/perl-5.26.2/lib/5.26.2/x86_64-linux-thread-multi-ld
    /home/daxim/local/share/perlbrew/perls/perl-5.26.2/lib/5.26.2

> I just copied the site folder from the old installation... but I have a feeling that's not the correct course of action...

Yes, that's not going to work in the general case. Perl is not binary compatible between versions (e.g. 26 → 28), but only between subversions (e.g. 26.1 → 26.2), so all XS modules (those C extensions that compile to DLLs) and similar stuff breaks. Run the [`recompile` command](http://p3rl.org/CPAN#recompile) in the CPAN shell to fix this.",1531850079.0
plainblackquy,Did it fix the 502?,1531846218.0
prodevel,"I'm two minutes in and this guy is smarmy.  I waiting to see some code, but I've been doing code for longer, so we shall see.  BASIC/Pascal/Fortran/bit of COBOL.

Edit: Meh.",1531801148.0
vashtiii,Do you think we should tell him the camel book is on its 4th edition?,1531738880.0
tm604,that last paragraph is very depressing :'(,1531735116.0
mpersico,[https://opensource.com/article/18/7/confessions-recovering-perl-hacker#comment-159016](https://opensource.com/article/18/7/confessions-recovering-perl-hacker#comment-159016),1531748664.0
latkde,"The error should disappear if you load the role before you write a type check that uses the role. So in your `Foo` package I'd expect a `use This::Is::The::Role`. Unfortunately, module loading has global effects in Perl so this kind of problem can go undetected depending on the order in which a downstream module imports its dependencies.

Note that Moose cannot tell in advance whether an  `isa => 'Something'` type constraint is supposed to constrain on a role or class – it needs to inspect the `Something` package for that. It is not possible to load the package implicitly because the package might not be a module (i.e. when you have a single .pm file that declares multiple packages/classes). So by default, Moose seems to assume that unknown type names are class constraints, not role constraints.",1531647374.0
cluelessbilly,"https://metacpan.org/pod/release/ETHER/Moose-2.2010/lib/Moose/Util/TypeConstraints.pm#role_type-($role,-?$options)

    package Foo;
    use Moose::Util::TypeConstraints;
    role_type 'This::Is::The::Role::Type';
    ",1531638332.0
ether_reddit,"with native Moose types:

    use List::Util 1.33 'all';
    has an_attribute => (
        is => 'ro',
        isa => subtype(as 'HashRef', where { all { $_->does('This::Is::The::Role') } values %$_ }),
        required => 1,
    );


with Type::Tiny (recommended):

    use Types::Standard 'HashRef', 'ConsumerOf';
    has an_attribute => (
        is => 'ro',
        isa => HashRef[ConsumerOf('This::Is::The::Role')],
        required => 1,
    );

",1533452521.0
sergeykolychev,"By the way, currently AI::MXNet supports Linux and Mac. MXNet's Python API works on Windows as well. I have no experience with Windows platform.

Anybody  needs AI::MXNet on Windows to a point of helping to port it ?",1531864525.0
liztormato,"As you may have found, the first way is a syntax error.

You might want to use the ternary operator instead:

    my $my_var = cond1 ? 'a' : 
                 cond2 ? 'b' :
                 cond3 ? 'c' : 'd';",1531584726.0
lindleyw,"This does work, with [`do`](https://perldoc.perl.org/functions/do.html)

      my $my_var = do {
        if (cond1) {
            'a';
        } elsif (cond2) {
            'b';
        } elsif (cond3) {
            'c';
        } elsif (cond4) {
            'd';
        };
      };",1531586127.0
xeeeeeeeeeeeeeeeeenu,"If your conditions look like this:

    my $my_var;
    if ($foo eq 'abc') {
        $my_var = 'a';
    }
    elsif ($foo eq 'def') {
        $my_var = 'b';
    }
    ...

you can replace them with this:

    my $my_var = {
        abc => 'a',
        def => 'b',
        ...
    }->{$foo};
Of course, it's not a universal solution.",1531625275.0
raiph,"For those interested in P5's ""little sister"" language P6, here are P6 versions of the P5 solutions in this thread at the time of writing this comment.

(I've edited this comment in response to grinnz' reply and to emphasize the way in which @Larry put a great deal of effort into ensuring P5 devs could leverage P5 syntax knowledge to get going in P6 and then take advantage of improvements that P6 provides.)

----

Your ""is this the only way"" code works in P6 unchanged.

So does lindleyw's `do` version.

P6 doesn't require braces after the `do` if only one statement is being `do`d; doesn't require a semi-colon at the end of a line if the last character on the line is a `}`; and doesn't require parentheses around conditions. Putting all of this together yields:

    my $my_var = do
       if cond1 { 'a' }
    elsif cond2 { 'b' }
    elsif cond3 { 'c' }
    elsif cond4 { 'd' }

This code has the same issue that grinnz notes for the P5 version. If none of the conditions match, `$my_var` will end up not being explicitly defined.

Because P6 gives such undefined values a typed (though still ""undefined"") value anyway, any resulting bug may be less pernicious -- you might get by with just an apple rather than sandwiches -- but it's still there.

One solution in both P5 and P6 is to include a final `else`. P6 provides another option:

      my $my_var is default(42) = ...

If `Nil` is assigned to `$my_var` at any time, as a result of its initializing expression returning `Nil`, as it would if none of the conditions matched, or at any time later on in the program, `$my_var` will take on the default value instead.

----

Trying xeeeeeeeeeeeeeeeeenu's hash solution in P6 yields a *compile-time* error:

    Unsupported use of ->(), ->{} or ->[] as postfix dereferencer;
    in Perl 6 please use .(), .[] or .{} to deref

The period is almost always optional. This works:

    my $my_var = {
      abc => 'a',
      def => 'b',
      ...
    }{$foo}

----

Trying liztormato's ternary solution in P6 yields a *compile-time* error:

    Unsupported use of ? and : for the ternary conditional operator;
    in Perl 6 please use ?? and !!

A common formatting option among P6 devs is:

    my $my_var = cond1 ?? 'a'
              !! cond2 ?? 'b'
              !! cond3 ?? 'c'
              !!          'd';

----

codon011's solution works as is.

@Larry carefully designed the precedence tables for Perls. As far as I know you can drop the parentheses in both P5 and P6 and it'll still work.

----

FiveYearsAgoOnReddit's sub solution is by far the most problematic in terms of its conversion to P6.

Trying their solution in P6 yields a *compile-time* error:

    Strange text after block (missing semicolon or comma?)

and points to the word `else`. The compiler has not guessed that this is P5 code and the error message is not especially helpful.

One rule of thumb that P5ers will find useful when writing P6 is that P6 sometimes needs whitespace where P5 doesn't and there are two examples of that in this code. But that's not all.

Here's a solution that makes the minimal incremental changes necessary to get it to compile (insertion of a space in two places) and to get it to stop producing run-time errors and instead work as intended (insertion of a `()` in two places):

    my $x = 1;
    my $var = &{sub {if ($x ==1) {return 'foo'}else{return 'bar'}}()}();
    print ""var = $var\n"";

An idiomatic version of this would simplify to something like:

    my $x = 1;
    my $var = sub { if $x == 1 { return 'foo' } else { return 'bar' } }();
    :$var.say;

which would display:

    var => foo",1531655550.0
angusmcflurry,"Have a look here:
  
https://perldoc.perl.org/perlsyn.html#Basic-BLOCKs",1531585415.0
codon011,"TMTOWTDI

```
my $var = ( cond1  && 'a' ) ||
          ( cond2  && 'b' ) ||
          ( cond3  && 'c' ) ||
          'd';
```

But just because you can doesn't mean you should. ",1531624544.0
FiveYearsAgoOnReddit,"How about an anonymous subroutine?

    $x = 1;
    my $var = &{sub {if($x ==1){return 'foo'}else{return 'bar'}}};
    print ""var = $var\n"";",1531621763.0
daxim,"EC2 is just a Linux VM, right? You should be able to install Apache httpd with mod_cgi or mod_perl to run the existing CGI programs like in the past. Simple beats modern here, I think.

Or is using nginx a hard requirement? Or do you want to rewrite the CGI programs?
",1531566866.0
DCLXV,using [fcgiwrap](https://www.nginx.com/resources/wiki/start/topics/examples/fcgiwrap/) will be the most straightforward way to do it,1531581681.0
davehodg,You can hide cgi behind nginx I believe. You don’t have to go the whole framework hog.,1531565271.0
Grinnz,"Since you specifically mentioned email scripting, this bit will be separate from however you choose to write and deploy the web application. I recommend [Email::MIME](https://metacpan.org/pod/Email::MIME) and [Email::Sender](https://metacpan.org/pod/Email::Sender), or [Email::Stuffer](https://metacpan.org/pod/Email::Stuffer) for a simple combination of those two.",1531596103.0
GlauchanGuy,"Even if you write it with [CGI.pm](https://CGI.pm), it might be better to run it as a Plack/PSGI app with one of the following:

[https://metacpan.org/pod/CGI::Emulate::PSGI](https://metacpan.org/pod/CGI::Emulate::PSGI)

[https://metacpan.org/pod/CGI::Compile](https://metacpan.org/pod/CGI::Compile)",1531606344.0
Grinnz,"Despite the Perl slogan TIMTOWTDI, I've also learned over time that insisting on your API consumers/callers to pass arguments a certain way simplifies things greatly in the long run, especially when you want to add features or fix bugs later. You don't want to have to deal with maintaining compatibility for 17 ways to specify a parameter. Allow the formats that are convenient, and no more.",1531446788.0
mpersico,"I used to write this way; no longer and for the exact reason you state - I am not taking input from a human, a function is being called from another function. Let the programmer read the docs and get it right.",1531447491.0
minimim,"Just making an observation:

This becomes so simple in Perl 6, by using duck-typing instead...

Ask for a Str(Any) and Perl 6 solves it for you. It will call the .Str method on the Object if it's not a Str already. (Even then, .Str in an Str object just returns .self).

So any Object that can be treated as a Str just needs to implement a Str method and done.",1531485320.0
cluelessbilly,"Function::Parameters, look it up.",1531526372.0
Grinnz,"Mojolicious is built from the ground up to be asynchronous and works in tandem with the Mojo::IOLoop event loop (which is compatible with all of the other major CPAN event loops). Dancer2's asynchronous support only works when deployed on Twiggy (unfortunately an AnyEvent based server) which is a bit of a hack since asynchronous responses are not originally part of the PSGI protocol.

Either of them can work with pretty much any part of the ecosystem, because Mojolicious is compatible with PSGI (though losing async features in that case) and pretty much anything else, and Dancer2 is built on Plack so of course is also PSGI compatible. They also both have substantial communities. My recommendation is just to go with Mojolicious since it was designed for what you're looking for from the start. But both are very simple to try out and answer your other questions for yourself.",1531446501.0
Grinnz,"I would chastise the very first example as well. Although it's Java like, in Perl indirect object notation is a [problematic parser quirk](https://shadow.cat/blog/matt-s-trout/indirect-but-still-fatal/) and it's recommended to always use direct method syntax.

The web toolkit and framework [Mojolicious](https://mojolicious.org) is probably the heaviest user of method chaining in Perl. Its object base system Mojo::Base implements chained attribute setters, and provides a method ""tap"" to allow chaining methods that don't normally return $self. This style is referred to by Mojo as [fluent programming](https://en.m.wikipedia.org/wiki/Fluent_interface).",1531320437.0
liztormato,"Not sure why this has the flair ""camelia"", but I'll take the bait :-).

I'm glad to see that syntax wise, all of this is also possible in Perl 6: just replace `->` with `.` and `new Bicycle` with `Bicycle.new`.",1531305759.0
daxim,"The headline does not fit with the article body. Chaining methods is not what functional programming means! You (= wbazant) should know that because you learned Haskell, which is a functional programming language.

The rough equivalent to LWP is <https://hackage.haskell.org/package/HTTP/docs/Network-HTTP.html>, but that code doesn't really tell one anything about the difference between OO and functional.",1531312602.0
codon011,What to call a programming paradigm that is all about chaining methods? Bound to be some good pun-ishment here somewhere. ,1531391353.0
yoyoq12,whats perl6 ?,1531240334.0
cluelessbilly,"Tried it again, slower 10 times than perl5 on average on simple tasks.

Solid F.

On other hand perl5 28.0 substantially faster than python. Good job, perlporters! ",1531281571.0
mithaldu,"For a good overview of different learning materials that will help you decide as well, go to: http://perl-tutorial.org",1531159079.0
raiph,"If you provide answers to the following basic questions you'll probably get helpful guidance:

* Roughly how many coders are there at your workplace? Does anyone else know Perl?

* Will you be mainly working on existing Perl code? (If so, share any info you're allowed to share about that code, eg how many files have names ending in .pl and how many ending in .pm, and paste an example of the first 10 lines of code of a random example of each of these two types of file.)

* How did tryperl.pl work out for you?

* Do you have the rest of July to learn Perl before you start changing or writing real code or just a few hours?",1531170250.0
daxim,http://tryperl.pl/,1531146033.0
davorg,[learn.perl.org](https://learn.perl.org),1531147044.0
hrh2nd,[https://perlmaven.com/perl-tutorial](https://perlmaven.com/perl-tutorial),1531159877.0
Grinnz,"https://learnxinyminutes.com/docs/perl/

http://mvp.kablamo.org",1531146988.0
Cat_Slapper_69,"Personally I found the O'Reilly books to be really useful if you can get your hands on them.

Programming Perl (for in-depth understanding)

Learning Perl (for basics)

Perl Cookbook (for good code snippets and examples)

I also used these websites

Perldocs (Documentation)

Perl Maven (Snippets and Examples)

Perl Monks (Answers to questions)",1531189304.0
ReactDOM,Epic answers in this thread! Here's some more curated tutorials to [learn Perl](https://reactdom.com/perl),1540252274.0
bart2019,"That was quick.

",1531213101.0
hsfrey,"So, is there anything I can do with 5.28, that I can't do with 5.24?",1531183084.0
wbazant,I want to be a programmer that can solve people's problems. Which editor do I need to learn?,1531124861.0
tm604,"The first point is wrong - it's specifically restricting the instance to the requested class, rather than a subclass, so yes, it *is* doing something - and there's no context for this: why was the check added in the first place? What was the original author's intention here? Does the new version of the code preserve that intent?",1530957752.0
smutaduck,"I'm guessing this post was prompted by finding something similar in the wild.  Without docs, exactly the kind of thing that would drive me nuts.",1531034827.0
waterkip,"I would also add a predicate, so I can see if the value is set(`predicate => 'has_widget'` and then later on do `$self->widget->rotate if $self->has_widget`. And if you don't want a `isa => ""Foo::Bar""`, you could also describe that it must comply with a particular role or use [`duck_type`](https://metacpan.org/pod/Moose::Util::TypeConstraints#duck_type-($name,-%5C@methods)) so you only worry about the particular interface, because you want the thing to support `rotate`",1531053054.0
zakame,I'm reminded of Ruby's [safe navigation`&.`](http://mitrev.net/ruby/2015/11/13/the-operator-in-ruby/) operator...,1531730790.0
Grinnz,I'm relaying a suggestion from jkeenan to send the same information to webmaster@perl.org.,1530995721.0
N3rdRag3PC,I remember the head of METACPAN made a blog post the other day about the move to a single site and gave an address there to email also,1530995560.0
Grinnz,"As an update, ranguard mentioned on IRC that the CPAN mirrors are organized by [Henk Penning](http://www.staff.science.uu.nl/~penni101/) (who also maintains http://mirrors.cpan.org/), and that cpan@perl.org is the correct address, he probably just hasn't gotten to it yet.",1531265959.0
EvanCarroll,"You don't need all that stuff... You're trying too hard, and it looks way too complex.

    use strict;
    use warnings;
    use feature ""say"";
    use constant WEEKLY_MIN => 40;
    
    say ""What is your name?"";
    my $name = <STDIN>;
    
    say ""How many hours did you work?"";
    my $hours = <STDIN>;
    
    say ""What is your pay?"";
    my $pay = <STDIN>;
    
    my ($basepay, $overtime) = (0,0);
    if ( $hours > WEEKLY_MIN ) {
      $overtime = ($hours - WEEKLY_MIN) * 2 * $pay;
      $basepay  = $pay * WEEKLY_MIN;
    }
    else {
      $basepay = $hours * $pay;
    }
    my $total = $basepay + $overtime;
    
    sub money_usd { sprintf( ""USD %08.2d"", $_[0] ) };

    printf(""\nYou have a credit for %d"", money_usd($total) );
    printf(""\n\t[Hours (REGULAR)]\t%d"", money_usd($basepay) );
    printf(""\n\t[Hours (OVERTIME)]\t%d\n"", money_usd($overtime) );",1530850049.0
davorg,"You seem to be guessing at Perl syntax - which is never a good idea. Perhaps take a little more notice of what's actually being taught in the class :-)

But here are the (really quite basic) errors that you're making:

* `use strict` means that you need to declare your variables (using `my`). So where you have, for example, `$channel1 <STDIN>;`, you need `my $channel1 <STDIN>;`.
* You're trying to assign values to variables. And for that, you need the assignment operator (`=`). So those lines actually need to be `my $channel1 = <STDIN>;`
* You've missed the semi-colon off the end of `use feature ""switch""` and `use v5.22.1` (and you're not using a switch, so you can remove that line completely).
* Your final line is bizarre. You need to quote any strings you want to print and I'm not sure where the whole `$[...]` think comes from. Oh, wait. Yes I do. You're getting confused between Perl and bash. Yeah, different programming languages have different syntax :-)

All in all, I think that this is what you were struggling towards:

    #!/usr/bin/perl

    use strict;
    use warnings;
    use diagnostics;
    use feature ""say"";
    use v5.22.1;

    say ""What is your name?"";

    my $channel1 = <STDIN>;

    say ""How many hours did you work?"";

    my $channel2 = <STDIN>;

    say ""What is your pay?"";

    my $channel3 = <STDIN>;

    say $channel1;

    say 'Check Amount = ',  (40*$channel3)+(($channel2-40)*$channel3*2);

This still needs some cleaning up (what's with those unhelpful variable names?) but it works.",1530963801.0
duskwuff,"You are missing a bunch of `my`s, some quotation marks, and a few semicolons and equal signs. And I'm not sure what the square brackets on the last line are supposed to be.",1530912068.0
allak,"TIL of perldoc.pl.

Thanks, a very nice resource.",1530865371.0
MattEOates,This is really great! For the special variables it might be helpful to just put in the title of the doc pages the names from \`use English\` next to the variable for immediate recognition.,1530883404.0
Grinnz,Sure but I'd recommend a more up to date reference. That edition is from 18 years ago.,1530809344.0
minimim,"You not only need a developer, you also need at least a sysadmin. This certainly isn't an one-person job.",1530757046.0
nofretting,"> I have here the binarys

> What I would have you do is take this code, compile it,

You want someone to compile binaries?
",1530761452.0
mjd,"I checked out that book the guy said was ""brilliant"" and all the examples are in cobol.  WTF?",1530722698.0
_Mr_Fancy_Pants_,https://metacpan.org/pod/GraphQL ?,1530708577.0
liztormato,Looking forward to this year's!,1530730094.0
daxim,"I'm under the assumption that you care about Internet standards because you recognise that by putting effort into making use of them even when they appear esoteric you reap certain benefits. If not, then simply disregard this reply and do what you want.

> should wallflower read the X-No-Archive: yes header in a HTTP response as ""you can follow the links, but don't save this file as part of your crawling""?

No, because [X- prefix is deprecated](https://tools.ietf.org/html/rfc6648).

For HTML documents, you can use [`<meta name=""robots"" content=""noindex"">`](http://www.robotstxt.org/meta.html). This doesn't help you with non-HTML resources, and you want an HTTP header.

The genericised way to attach meta information there is the [Link header](https://tools.ietf.org/html/rfc8288). It is equivalent to the `<link rel` and `<a rel` elements from HTML2. Unfortunately, there is no way standard way to map the [attributes of `meta`](https://developer.mozilla.org/docs/Web/HTML/Element/meta) into the Link header, so you could instead coin a new [link relation](https://www.iana.org/assignments/link-relations/link-relations.xhtml).

Relations that are simple words require registration, either at [Microformats](http://microformats.org/wiki/existing-rel-values#proposals) or IANA:

Alternative 1: `noindex` (as an analogue to the existing `nofollow`)

Link relations that are URIs are exempt from registration. The idea is that not only serves the URI as an identifier, but when dereferenced in a user agent, it also leads to an human-readable explanation of the semantics of the link relation:

Alternative 2: `http://www.robotstxt.org/meta.html#noindex`

If you think Web authors could misunderstand or get confused by the (too clever?) re-use of that page for a link relation, then write your own explanation:

Alternative 3: `http://philippe.bruhat.net/2018/noindex/`

This identifier needs to live forever! If you cannot guarantee that you never lose control of the bruhat.net domain, then solve the problem by introducing a level of indirection: register a [PURL](http://enwp.org/PURL) (e.g. with [purl.org](http://purl.org) or [w3id](https://w3id.org)), use that as an identifier, and in a case of catastrophe you simply redirect somewhere else on the Web.

> Can anyone think of other such well-known URL?

* https://tools.ietf.org/html/rfc5785
* https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml
",1530695672.0
kentrak,"I generally use Ghostscript, with code like:

    my $pdf_data = ... # Get PDF data here
    open( my $gsfh, '|-', ""gs -q -dNOPAUSE -sDEVICE=pdfwrite -dCompatibilityLevel=1.3 -sOUTPUTFILE=$outfile -dBATCH -"") or die $!;
    print $gsfh $pdf_data or die ""Unable to push all data through GS for PDF conversion! $!"";
    close($gsfh);


Or just use that command (possibly without piping and batch options) to do it on the command line.",1530565780.0
TeslaDelMar,"Are you getting an error, unexpected response data, or if not what is going wrong?",1530550893.0
treenaks,Which operating system are you running this on? Does your OpenSSL support TLS 1.2?,1530551978.0
mephinet,"You shouldn't need to modify your Perl code at all - no additional parameters for LWP::UserAgent are required.
LWP::UserAgent does not implement HTTPS by itself, but relies on  IO::Socket::SSL, falling back to Net::SSL.
You should try to update these modules. If you let us know where your perl comes from, someone here who knows Windows might be able to help you how to perform that update...",1530556709.0
cluelessbilly,"It'll depend if you have appropriate versions of the modules, but just try this.

use IO::Socket::SSL;

use LWP;

IO::Socket::SSL::set_client_defaults(SSL_version => 'TLSv12');

my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 0 });
",1530632905.0
plainblackquy,"Try adding this near the top of your script:

    $ENV{HTTPS_DEBUG} = 1;",1530557938.0
daxim,"> How to fix that?

AMP is invalid HTML. [Complain at its vendor](https://github.com/ampproject/amphtml/blob/master/CONTRIBUTING.md#reporting-issues-with-amp) so that they can come into compliance with the existing open, accessible, and universal Web standards.",1530462712.0
davehodg,"Which switch makes it fail?

Find that and file a speculative bug.",1530432206.0
Lord_Mhoram,"He talks interchangeably about Perl and Perl 6, but I think the answer to his question depends greatly on which he means.

Perl has been an invaluable tool for me for over 20 years. To me, it's ""viable"" as long as I can expect it to be available as packages or compileable on any systems I'm likely to work on. I'm completely confident that that is the case. Even if development on new features stopped -- even if it had stopped back around 5.8 or 5.10 or so -- I'm confident that there's enough of a userbase to ensure that it continues to be viable for my use. I don't think there's much chance that I will outlive Perl.

Perl 6, on the other hand, is a more open question. I've tinkered with it and found it interesting, wrote some blog posts about it, but didn't find it *useful* for me, so I drifted away. I'll probably try it again one of these days, as I've been doing every couple years since I first heard of it. My impression (which could be wrong) is that there's a large overlap between people *using* Perl 6 and those *developing* Perl 6. In other words, I don't know if there are many people who have picked up Perl 6 as a tool, without any investment in the language itself.  So if a handful of the main developers drifted away from the project, I don't know what would happen. If I write a program today in Perl 6, I don't know what the odds are that people will be able to use it 5-10 years from now, or what hoops they might have to jump through to get it working.

I don't mean that as a slam on Perl 6. They're just two different languages at different stages of development, so I dont think you can lump them together in terms of viability.",1530457807.0
leaningtoweravenger,"Using a search like '<language> tutorial', in the best case, returns you the amount of new users that some language is getting or how difficult it is to find resources for through the canonical web page of the project.  

If I just look for 'perl' on Google (Italian version) as the second and fourth results I find two introduction tutorials in Italian (one of the two from an university).

Just completeness, I do not believe in the TIOBE index either.",1530429600.0
bart2019,"I don't think the number of people who want to learn a language, whuch what searching for a language tutorial gets you, is representative of the viability of that language.

Instead, you should measure the number of people who keep using a language once they're past the beginner stage.",1530456411.0
nermid,"Am I hallucinating, or are all of those lines trending down?",1530432868.0
hzhou321,"Is it intentional to use Perl refer to perl6?
",1530449292.0
thepaintsaint,"Searching ""Perl tutorial"" will yield way more results than ""Perl 6 tutorial"".  I've yet to see any demos of Perl 6 out there unless you pointedly look for them, while I do see Perl stuff regularly.  Big difference.",1530455410.0
cluelessbilly,"Perl reddit:
11,296 readers
32 users here now

Python reddit:
253,766 readers 
1,368 users here now

That's how viable is Perl, nobody younger than 40 wants to touch perl. When we, old school, die, so will Perl.

Perl 6 is dead on arrival though. Being so different from Perl 5 killed chances to be used by the Perl 5 old guard.

Using hated and ridiculed 'Perl' name turned away all younglings.
   ",1530473365.0
Grinnz,"This is primarily in reference to https://perldoc.pl/perl5280delta#Mixed-Unicode-scripts-are-now-detectable, a feature [long in the works](https://groups.google.com/d/msg/perl.perl5.porters/5orbYJ4ILlM/qXcpjFwpAgAJ) by Karl Williamson.",1530381667.0
tarje,open an issue here: https://github.com/rizen/Facebook-Graph/issues,1530369266.0
treenaks,"The only way I can think of, with the current spec (https://metacpan.org/pod/CPAN::Meta::Spec#PREREQUISITES) is to split out the dependency-specific parts into separate distributions, and warn your users to install one, a bit like DBI and the DBD modules are split.

After reading some more, it may be possible using dynamic configuration:
https://metacpan.org/pod/CPAN::Meta::Spec#Prerequisites-for-dynamically-configured-distributions

That way, you get a chance to probe the target system (""Is at least one of my prerequisite options installed"") and add one to the list of prereqs if none is currently installed.",1530278466.0
daxim,"You have Pulseaudio, so use `pactl` instead of ALSA mixer.

 is not a volume icon, but [private use](http://enwp.org/Private_Use_Areas). For other people it either just appears as a placeholder or fallback, or all kinds of different glyphs.

The speaker characters should work better:

* 🔇 `\N{SPEAKER WITH CANCELLATION STROKE}`
* 🔈 `\N{SPEAKER}`
* 🔉 `\N{SPEAKER WITH ONE SOUND WAVE}`
* 🔊 `\N{SPEAKER WITH THREE SOUND WAVES}`",1530192616.0
bradheff,"I should note as you can not see it in the code block,  $volume = ""\[volume icon\] $volume""; so when the index looks for if 100&#37; exists in the string it looks for ""\[icon\] 100&#37;"" was having trouble with the click event 5 (mouse scroll down) as when volume at 100 90 80 70......... it wasnt working as finding 0&#37; in the string...... you see what was happening lol. so added the icon to the string and that fixed it. 

i wanted to use

    if ($volume eq '100%')

but that wasnt working for some reason. didnt spend a lot of time on it so just went with index()

The button numbers work from left to right

1 = left mouse button

2 = middle mouse button (mouse wheel click for me)

3 = right mouse button

4 = scroll up

5 = scroll down",1530188055.0
liztormato,I don't get the humour.,1530190218.0
,[deleted],1530200275.0
,[removed],1530197104.0
minimim,"~~People are still working on it~~. Perl 6 used it in the past but development on there stalled and was removed at some point.

/u/reini_urban can tell you all about it.",1530121210.0
daxim,http://modernperlbooks.com/mt/2013/02/goodnight-parrot.html,1530167166.0
mr_chromatic,People stopped working on it [for various reasons](https://www.reddit.com/r/perl6/comments/8p26bb/is_perl6_faster_than_perl_5_on_average/e0df6jq/).,1530139427.0
n30h80r,RIP,1530055881.0
GrayTShirt,I can't find dependency graphs on metacpan.,1530091019.0
EvanCarroll,be nice open source it now that it's defunct.,1530067118.0
jplindstrom,"(Dependency management is unrelated to Mojo itself)

A good first step is to use a cpanfile which declares the dependencies and then use cpanminus to install them.

https://github.com/kraih/mojo/wiki/Installation-of-cpan-modules-by-cpanm-and-cpanfile

This is actually a much larger topic, because at some point you'll want to deal with module versions in various environments (dev/test/prod) to ensure the code you installed and tested is the same as is being deployed. There are a bunch of different ways to do that.

But start with cpanm.

**Edit**: This is assuming you're not writing a CPAN module, in which case you'd declare it in the Build.PL/Makefile.PL, or a dist.ini file (for Dist::Zilla), or again use a cpanfile.",1530030590.0
daxim,Cross-post: https://stackoverflow.com/q/51045626,1530026350.0
rage_311,I don't think you can expect a great answer with so little information.  What are you trying to do?  Use the module in your app?  Distribute your app?  Which system or method of distribution are you using?,1530026489.0
angusmcflurry,And here I thought it was THE [SCO](https://en.wikipedia.org/wiki/Santa_Cruz_Operation).,1529966971.0
daxim,"* http://p3rl.org/Plack::Middleware::HTMLMinify
* http://p3rl.org/Mojolicious::Guides::Cookbook#Plack-middleware",1529937225.0
titanofold,"Since you're using Mojolicious, you should be able to use hooks to achieve what you're looking to do. Particularly, the `after_render` hook.

https://mojolicious.org/perldoc/Mojolicious#HOOKS

https://mojolicious.org/perldoc/Mojolicious#after_render",1529925140.0
dicey,[relevant xkcd](https://www.xkcd.com/224/),1529961183.0
ahua77,This sounds like a classic example of what Perl was made for.,1529984416.0
davorg,"This seems to have gone well. Currently, [a Google search for ""perl conference""](https://www.google.co.uk/search?q=perl+conference) returns the Glasgow site as the first result.

Now I want to try to get some results snippets on the result page.",1530006164.0
daxim,"[annotated slides](https://archive.org/download/yatpc2018-ecosystem/03-yatpc2018-ecosystem-with_speaker_notes.pdf) (PDF, 27 MiB)",1529911379.0
pawelmurias,"Super depressing talk, talking about extinction of Perl and offering a solution that I don't believe would make a significant difference.",1530003143.0
Grinnz,"It's always important to consider that the technical merit of your argument or advice is not usually as important as how you deliver it, regardless of how much you may think it should be.",1529900676.0
mr_chromatic,"I'd like to see a benchmark of:

    my $hash = EVAL ""{}"", :lang<Perl5>;

... though from skimming the bug report, it might be better to abstract that away behind a function.",1529801863.0
tm604,"So one Perl application was doing the equivalent work of 500 Python+Go microservices? nice! 

(I didn't see a proper breakdown of that list linked from the article)",1529764214.0
davorg,">In addition to scaling issues BuzzFeed were finding it harder and harder  to find engineers who both knew Perl and wanted to work with it. 

Yep. There's the standard reason again :-)",1529767488.0
clamdiggin,"I suspect there are still a lot of perl monolith applications out there that were started more than a decade ago.  I suspect there are quite a few python monolith applications out there as well that are hard to maintain.

It sounds like they made some good choices in redesigning their infrastructure to be more maintainable and scalable.  I just get disappointed that they imply in the title that Perl was part of the problem.  Python and Go don't stop you from building a giant monolith, just as Perl doesn't stop you from doing it.

",1529759570.0
tarje,"this is not specific to perl, unless you're asking for somebody to do your homework for you.",1529732074.0
macbrett,This will likely require the use of some basic [trigonometry](https://en.wikipedia.org/wiki/Trigonometry).,1529790992.0
macbrett,"Assuming that you want to generate a parallel line of the same length as the original but translated in a direction perpendicular to the original line so that connecting corresponding endpoints creates a rectangle, here's what needs to happen.  You need to first determine the angle of the original line.  Then depending on which direction you intend to translate the new line, you will need to generate new endpoints from each endpoint in a direction of either plus or minus 90 degrees with respect to the original angle.",1529869840.0
saiftynet,"Try [this](http://tpcg.io/uynzFP)  This gives the result you seem to want.
The code merely takes your line as a string and the the amount to extend the line by,  finds the angle of the line required and simple trigonometry to yield the appropriate new coordinates, which is returned as a string.  The result is unrounded...that is left for you to do as needed.

    #
    # Line extended to rectangle Subroutine
    #
    print extendLine(""0 0 0 4"",1);

     sub extendLine{
     my ($lineString, $extension)=@_;
     my $theta;

     my ($x1,$y1, $x2, $y2)=split(/ /,$lineString);
           # extract coordinates

      if ($x1 == $x2){
        $theta=2 * atan2(1, 1);
        # if vertical then angle is pi/2
     }
     else {
        $theta=atan2($y1-$y2,$x1-$x2); 
        # else arctan of gradient
     }; 
     return join ("" "", ( $x1-($extension*sin($theta)) ,
                       $y1-($extension*cos($theta)) ,
                       $x2+($extension*sin($theta)) ,
                       $y2+($extension*cos($theta))) );
      }
",1529941757.0
cristoforo_perl,"With some minor changes to saiftynet's code (which didn't get the diagonal coordinates). Reversed the `sin` and `cos` functions and changed argument to the 2 functions to `$theta+ pi/2`. Output from running this program is after the `__END__` token.

    #!/usr/bin/perl
    use strict;
    use warnings;
    use constant pi => 4 * atan2(1,1);
    
    #
    # Line extended to rectangle Subroutine
    #
    
    # https://www.reddit.com/r/perl/comments/8t7mt2/how_can_you_expand_a_line_by_x_units_from_both/?st=jj1qcg27&sh=277127b0
    
    for my $line ('0 0 4 0', '0 0 4 4', '0 0 0 4', '0 0 -4 4') {
        print $line, ""\n"";
        print extendLine($line,1), ""\n\n"";
    }
    
    
    sub extendLine{
        my ($lineString, $extension)=@_;
        my $theta;
        
        my ($x1,$y1, $x2, $y2)=split(/ /,$lineString);
           # extract coordinates
        
        if ($x1 == $x2){
            $theta=2 * atan2(1, 1);
            # if vertical then angle is pi/2
         }
        else {
            $theta=atan2($y1-$y2,$x1-$x2); 
            # else arctan of gradient
        } 
        return join ("" "", map {sprintf ""%.1f"",$_} ($x1+($extension*cos($theta+pi/2)) ,
                                                   $y1+($extension*sin($theta+pi/2)) ,
                                                   $x2-($extension*cos($theta+pi/2)) ,
                                                   $y2-($extension*sin($theta+pi/2))) );
    }
    __END__
    C:\Old_Data\perlp>perl line_extend_my.pl
    0 0 4 0
    -0.0 -1.0 4.0 1.0
    
    0 0 4 4
    0.7 -0.7 3.3 4.7
    
    0 0 0 4
    -1.0 0.0 1.0 4.0
    
    0 0 -4 4
    0.7 0.7 -4.7 3.3
    

To get all 4 points of the rectangle:


    sub extendLine{
    	 my ($lineString, $extension)=@_;
    	 my $theta;
    	
    	 my ($x1,$y1, $x2, $y2)=split(/ /,$lineString);
    	       # extract coordinates
    	
    	  if ($x1 == $x2){
    	    $theta=2 * atan2(1, 1);
    	    # if vertical then angle is pi/2
    	 }
    	 else {
    	    $theta=atan2($y1-$y2,$x1-$x2); 
    	    # else arctan of gradient
    	 }
    	 my $cos_factor = $extension*cos($theta+pi/2);
    	 my $sin_factor = $extension*sin($theta+pi/2);
    	 
    	 my $X1 = $x1 + $cos_factor;
    	 my $Y1 = $y1 + $sin_factor;
    	 
    	 my $X2 = $x1 - $cos_factor;
    	 my $Y2 = $y1 - $sin_factor;
    	 
    	 my $X3 = $x2 - $cos_factor;  
    	 my $Y3 = $y2 - $sin_factor;
    	 
    	 my $X4 = $x2 + $cos_factor;  
    	 my $Y4 = $y2 + $sin_factor;
    	 
    	 return join ("" "", map {sprintf ""%.1f"",$_} $X1,$Y1,$X2,$Y2,$X3,$Y3,$X4,$Y4 );
    }
",1531063857.0
Grinnz,Changes: https://perldoc.pl/perl5280delta,1529723180.0
niceperl,"    $> perlbrew install perl-5.28.0
    ... 20 minutes after ...
    $> perlbrew use perl-5.28.0
    $> perl -E 'say ""Hello from Perl $]""'
     Hello from Perl 5.028000",1529740030.0
perlancar,"BTW, is ""perlbrew available"" working for you guys? It's not returning any result on my laptop here since a few of days ago I tried.",1529752512.0
benjubb,Looks ridiculous on my iphone6s,1529719238.0
swingthesickle,"I use perldoc.perl.org frequently. I'll be bookmarking this.

How about linkifying functions and keywords in code examples like on perldoc.perl.org? For example,

http://perldoc.perl.org/functions/splice.html

The code example at the bottom, links ""my"" and ""shift"" on line 2, etc.",1529720196.0
Grinnz,"Minor detail: [JSON](https://metacpan.org/pod/JSON) is not a ""native"" Perl package (it has never been core), it's just an unfortunately named module; [JSON::MaybeXS](https://metacpan.org/pod/JSON::MaybeXS) is better (and almost drop-in compatible). (DBI also has never been core, but it's still the preferred database driver backend, though not always the preferred wrapper interface.) Also, JSON (the format or the module) is never actually used in these examples, despite the variable names.",1529621440.0
bart2019,"If you use

      $digit = int(rand(9));

Your digit will never be 9, but only between 0 an 8, inclusive.


",1529636001.0
linxdev,"10 years ago I needed mock company names for a test database.  we think we can come up with names, but it's not that simple.

I found a company that sold fake data.  Names, contacts, addresses, etc.  They sold it as a sqlite db file.  50MB was free.  I used that.",1529626136.0
yongbin,"how about faker? it also play lol pretty well ;-)

https://metacpan.org/pod/Faker",1529629144.0
lucastakushi,"Why not use Data::Fake for simple stuff like e-mail, gender etc?",1529686161.0
subogero,"I remember it was more than 10 years ago when I first saw some Perl scripts at work. I was scared! Fast forward to 2018, and I'm a very happy Perl developer.

After doing a fair bit of Linux shell programming, Perl suddenly looked elegant. I was no more scared by the $@% sigils.

### The scary stuff

Sigils. Especially sigil variance: `%h; $h{foo}; @h{'foo','bar'}` when addressing a container, the sigil changes according to what you take out of it.

Context. Confusing but extremely powerful. `if (@a)` or `$size = @a` : an array returns its size in scalar context.

Lack of strong typing. Many people are afraid of it, but it's a feature. No more `toString` boilerplate. Learn to work with values and nested data structures.

Lists. Those temporary, anonymous things that are not arrays, but allow turning a function arguments into a hash: `my %h = @_;` They also allow easy copying of data structures `%h2 = %h1`, which is a complete nightmare in Python.

### Useful stuff to learn

Get rid of the line noise! We must use sigils, but you can get rid of other noise: quotes and parens. Word characters are auto-quoted in hash-addressing `$h{foo}` and before the fat version of the comma `%h = (one => 1, two => 2);` If you want to generate a list without quotes and even commas, use `qw(one 1 two 2 three 3)`

Learn the various form of string interpolation. You can place scalars and arrays directly into double quoted strings: `""foo $bar @baz""`. If you must use double quotes inside an interpolating string, use `qq(<node attr=""$foo"">)`.

Stay away from `Moose`. It turns Perl into another language, and managing its dependency list in a production setting is not something for human beings. Perl's native OO `bless` is good enough. Learn Perl's core functional features instead: `grep`, `map`, `List::Util` and closures.

`Mojolicious`. An awesome web backend framework.",1529648485.0
outzider,Why the switch?,1529600663.0
neilhwatson,"What parts of Perl are you struggling with? This book might help: http://modernperlbooks.com/books/modern_perl_2016/index.html

",1529599770.0
digicow,"My two main languages are Swift (at home) and perl (at work, along with ruby and Java).

Of course, I learned Objective-C first, then perl, then Swift.

Perl applications vary greatly depending on what paradigm and modules you're using. Even going from Moose-based CLI apps to Mojolicious-based web apps was practically like learning a new language.",1529600518.0
reggie-drax,"Sorry to hear you're having problems.

Post some specific stuff and I'm sure we'll help you out.",1529603626.0
code4pay,Intellij with the perl plugin will give you the most complete ide experience.,1529647565.0
exiestjw,"Get the book ""Learning Perl"" and be sure to do the exercises. A proficient software dev could do it in a weekend.

Then check out a perl web application platform like Mojolicious:

https://metacpan.org/pod/Mojolicious

Hope you stick with perl, in my opinion its the best general development platform available and I've been paid to code for almost 20 years now.
",1529786276.0
daxim,"https://stackoverflow.com/q/50842274

Lose the negative mindset, it's detrimental for getting stuff done. You should know by now that you get help if you ask specific questions.",1529600925.0
phire14,"Perl is a language that is very easy to write once you get the hang of it... but it can be very hard to read. It is not an especially maintainable language. It is excellent for short scripts that do one thing well. It is considerably harder for driving enterprise software. So if you feel a little lost, know it’s not just you, and it gets easier with practice.

Make sure you understand @_ and $_

",1529638306.0
briandfoy,"[""You can add - or + to the immediate start or end of a directive tag to control the whitespace chomping options. See the PRE_CHOMP and POST_CHOMP options for further details.""](http://www.template-toolkit.org/docs/manual/Syntax.html)",1529525120.0
Grinnz,"Include the newlines in the condition so when it's false they aren't output.

    a
    [% IF b %] b
    [% END %]c

Or see the [PRE_CHOMP and POST_CHOMP](https://metacpan.org/pod/Template::Manual::Config#PRE_CHOMP,-POST_CHOMP) configuration options.",1529525080.0
davorg,"Putting a `-` at the end of your final directive will do that.

    a
    [% IF b  %] b [% END -%]
    c",1529561917.0
dragonfly_blue,"I hope I can learn Perl6 a little bit quicker than I learned Perl5.

( hint: still struggling to learn Perl5. )",1529483833.0
perigrin,I think some people have gathered together in Utah to celebrate it.,1529433199.0
saiftynet,"All this talk of CPAN death and mourning is overly dramatic rubbish...Why can't MetaCPAN be seen as just an evolution of or an alias for CPAN?  Then it wouldn't be dead, just reborn, resurrected and redirected. MetaCPAN>=CPAN",1529486734.0
tm604,"The [->post](https://metacpan.org/pod/Mojo::UserAgent#post) method appears to expect a hashref for the header, you're passing a hash.

Try `$useragent->post($request{endpoint}, \%header, $request{message})` instead?

Alternatively, you should be able to pass `message` as a data structure if you leave out the `Content-Type` header and use `$useragent->post($request{endpoint}, \%header, ($request{tokena} ? 'json' : 'form'), $request{message})`, let Mojo::UserAgent handle encoding for you.",1529358518.0
jbdmp,"For the sake of closure: In the end, I used this:

`my  $response   =   $useragent->post(   $request{ endpoint }    =>  \%header    =>  $request{ message } );`

Later I added `->res->json` at the end so that I'd get a hash.",1529418825.0
hsfrey,"How much backward incompatibility is there with perl 5?

If much, is there a program to convert perl 5 programs to perl 6?",1529366726.0
daxim,"[Kavorka](http://p3rl.org/Kavorka) compares very favourably. I had to change very little to translate the code from Perl 6. Most of the demonstrated features are also available to you in 5. Differences:

* signatures have different defaults for traits `alias`, `copy`, `ro`, `rw`
* lexical variables in signatures (work-around possible)
* nested subs are not private (work-around possible)
* named and slurpy in the same definition

----

    use 5.026;
    use Kavorka qw(fun multi);

    fun a_sub($param1, $param2) {
        say $param1 + $param2;
    }

    a_sub(1, 2); # Output: 3

    ####

    fun b_sub(Int $param1, Int $param2) {
        say $param1 + $param2;
    }

    b_sub(1, 2);   # Output: 3
    b_sub(1.01, 2); # Throws an error
    #Value ""1.01"" did not pass type constraint ""Int"" at …
    #    Value ""1.01"" did not pass type constraint ""Int""
    #    ""Int"" is defined as: (defined($_) and !ref($_) and $_ =~ /\A-?[0-9]+\z/)

    ####

    fun c_sub(Int $param1 where {$_ > 0}, Int $param2 where {$_ % 2 == 0}) {
        say $param1 + $param2;
    }

    c_sub(1, 2);  # Output: 3
    c_sub(0, 2);  # Throws an error because $param1 has to be > 0
    c_sub(1, 3);  # Throws an error because $param2 has to be even

    ####

    fun d_sub(Int $param1, Int $param2 where {$_ > $param1}) {
        say $param1 + $param2;
    }

    # Global symbol ""$param1"" requires explicit package name (did you forget to declare ""my $param1""?)
    # see http://p3rl.org/Kavorka::Manual::Signatures
    # ""However, the use of any lexical variables within the term is currently broken.""
    # possible work-around with ""our""?

    d_sub(1, 2); # Output: 3
    d_sub(2, 1); # Throws an error

    ####

    use PadWalker qw(peek_my);
    fun d2_sub(Int $param1, Int $param2 where {$_ > peek_my(1)->{'$param1'}}) {
        say $param1 + $param2;
    }

    d2_sub(1, 2); # Output: 3
    d2_sub(2, 1); # Throws an error
    # $param2 failed value constraint at …

    ####

    fun e_sub($param1, $param2) {
        $param2 *= 2;
        say $param1 + $param2;
    }

    e_sub(1,2); # Output: 5

    ####

    fun f_sub($param1, $param2 is ro) {
        $param2 *= 2;
        say $param1 + $param2;
    }

    f_sub(1,2); # Throws an error:
    #             # Modification of a read-only value attempted at …

    ####

    fun g_sub($param1, $param2 is alias) {
        $param2 *= 2;
        say $param1 + $param2;
    }

    my $value = 2;
    g_sub(1, $value); # Output: 5
    say $value;       # Output: 4

    ####

    fun h_sub($param1, $param2) {
        fun max_val() {
            return $param2 > $param1 ? $param2 : $param1;
        }
        say ""Of these, "" . max_val() . "" is biggest, and sum is "" .
            ($param1 + $param2);
    }

    h_sub(1, 2); # Output: Of these 2 is biggest, and sum is 3
    max_val();   # not an error, identifier is package scoped

    ####

    fun h2_sub($param1, $param2) {
        my $max_val = fun() {
            return $param2 > $param1 ? $param2 : $param1;
        };
        say ""Of these, "" . $max_val->() . "" is biggest, and sum is "" .
            ($param1 + $param2);
    }

    h2_sub(1, 2); # Output: Of these 2 is biggest, and sum is 3
    $max_val->(); # Variable ""$max_val"" is not imported at …

    ####

    fun i_sub(@a) {
        say join ', ', @a;
    }

    i_sub(1, 2, 3, 4, 5); # Output: 1, 2, 3, 4, 5

    ####

    fun i2_sub(slurpy ArrayRef $r) {
        say join ', ', $r->@*;
    }

    i2_sub(1, 2, 3, 4, 5); # Output: 1, 2, 3, 4, 5

    ####

    fun j_sub($param1, $param2, @a) {
        say ""Sum is "" . ($param1 + $param2) . "" and rest is "" .
            join ', ', @a;
    }

    j_sub(1, 2, 3, 4, 5); # Output: Sum is 3 and rest is 3, 4, 5

    ####

    fun k_sub(:$param1 = 1, :$param2 = 2, @a) {
        say ""Sum is "" . ($param1 + $param2) . "" and rest is "" .
            join ', ', @a;
    }
    # Cannot have a slurpy array for a function with named parameters at …

    k_sub(param1 => 1, param2 => 2, 3, 4, 5);
    k_sub(3, 4, 5);

    ####

    fun l_sub(:$a1, %h) {
        use Data::Dx; Dx %h;
    }

    l_sub(a1 => 1, a2 => 2, a3 => 3, a4 => 4);
    # Output: %h = { a2 => 2, a3 => 3, a4 => 4 }

    ####

    multi fun n_sub($param1, $param2) {
        say ""Sub 1: "" . ($param1 + $param2);
    }

    multi fun n_sub($param1, $param2, $param3) {
        say ""Sub 2: "" . ($param1 + $param2 + $param3);
    }

    multi fun n_sub(@params) {
        use List::AllUtils qw(reduce);
        say ""Sub 3: "" . reduce { $a + $b } @params;
    }

    n_sub(1, 2);             # Output: Sub 1: 3
    n_sub(1, 2, 3);          # Output: Sub 2: 6
    n_sub(1, 2, 3, 4, 5, 6); # Output: Sub 3: 21
    n_sub(1..7);             # Output: Sub 3: 28
",1529391159.0
,[deleted],1529327623.0
raevnos,"Yes
",1529223401.0
briandfoy,"You might like [Logic Programming with Perl and Prolog](https://www.perl.com/pub/2005/12/15/perl_prolog.html/).

Ovid has some interesting links in the docs for [AI::Prolog](https://metacpan.org/pod/AI::Prolog) and has written about the sorts of problems Prolog is good at.",1529258030.0
sfandino,"There are two things I miss from prolog when programming in any imperative language:

* Structure pattern matching, that's like perl regular expressions but applied to arbitrary data structures.
* Being able to backtrack: having points on my program where I can say, I am going to try that strategy now but if it fails come back here and do that instead.

On a higher level, those features allow one to implement search algorithms in an easy manner.

In Perl, you can always implement the same algorithms but you would have to take care of the low level details. Have you ever tried to implement searching a string for a pattern in a language without regular expression support? It is the same feeling.",1529483591.0
grewil,"I suppose declarative programming in Perl is a bit of a stretch? Iirc, declarative Prolog programs can be run forwards or backwards with the same result.",1529226437.0
unkz,This article makes two references to requisite intellectual capacity — I’m unclear on what is being said here.  It kinda sounds like it is saying that Perl is too difficult for some people who would be better off writing code in a different language.,1529027959.0
perlancar,"Ugh, at least mention Archive::Tar in the subject.",1528933376.0
daxim,"This is blogspam for [CVE-2018-12015](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12015).

----

[Fixed in Archive-Tar-2.28](https://metacpan.org/changes/distribution/Archive-Tar).",1528957770.0
Grinnz,The relevant perl bug report: https://rt.cpan.org/Ticket/Display.html?id=125523,1528933515.0
zl0ty,"Ugh, I though Perl conf Is going to be held in Poland. Need to improve my English...",1528915350.0
bobthecimmerian,"On the topic of introducing people to Perl 6, my first look at the language in depth was Andrew Shitov's Perl 6 Deep Dive.  I was impressed with the book and the language.

But I'm not an expert in the language nor have I read any of the other books, so I can't measure them against each other.",1529496451.0
SinanUnur,This is very [cute](http://news.perlfoundation.org/2016/12/grant-proposal-learning-perl-6.html) coming from people who vociferously opposed the grant application for this book and accused the author of various shady things (and later asked their posts to be removed from the site).,1528935076.0
Grinnz,"I'm highly skeptical of anyone writing CPAN clients without having spent time working on the Perl toolchain and its many quirks. There are too many things you can get wrong by misunderstanding backwards compatibility or current practices. It seems from the [grant proposal](http://news.perlfoundation.org/2018/06/grant-proposal-apprs---the-fir.html) that the author has put a lot of thought into this, so it's a shame they don't seem to be active in toolchain.

Regarding ""reference counting"", this is something that dnf does by default in Fedora and the first thing I do on every Fedora install is disable the option to automatically remove ""unused"" dependencies. Just because I didn't explicitly say I wanted the dependency doesn't mean I'm not using it.",1528999015.0
saiftynet,I think this is great.  Nice to be able to manage your modules like a distros package managers.,1528992050.0
daxim,"Download and watch at 4× speed to minimise annoyance. The presentation form was chosen poorly, this does not deserve to be a video.",1528918926.0
rage_311,"In your code snippet, you set the level (the minimum level required for a message to be logged) to `warn` with `level => 'warn'`.  You then try to log a message at level `info`, which is lower than `warn`.  That won't work.  You need to either set your minimum log level lower (`debug` or `info` are both lower than `warn`), or log your actual ""test123"" message at a higher level (`warn`, `error`, or `fatal`), ie `$log->warn('test123')`.

https://mojolicious.org/perldoc/Mojo/Log#SYNOPSIS

You allude to trying that in another message... I think.  Regardless, you can print some info right before your `$log->info...` call to make sure your log config looks how you think it should (and nothing else has changed it inadvertently), eg:

    get '/' => sub {
      say 'log level: ', $log->level;
      say 'log path:  ', $log->path;
      $log->warn('test123');
      ...
    };

https://mojolicious.org/perldoc/Mojo/Log#level

/u/dreadpiratemiley's example works perfectly for me as well.
",1528924833.0
titanofold,"Because info is lower than warn, so it's excluded.

Either use `level => 'info'` or use `$log->warn(""test123"")`.",1528894524.0
briandfoy,The fix got a bit lost in all that but there was a fix.,1528848109.0
Grinnz,Good example of the misunderstandings that can occur when either side doesn't read carefully or projects unintended tone. Glad it was resolved in this case.,1528848427.0
SinanUnur,"For reference, here's the documentation for [Perl's unlink](https://perldoc.perl.org/functions/unlink.html):

>  On failure, it returns false and sets `$!` (errno)

and C's [`unlink`](http://pubs.opengroup.org/onlinepubs/9699919799/functions/unlink.html):

> Upon successful completion, these functions shall return `0`. Otherwise, these functions shall return `-1` and set errno to indicate the error. If `-1` is returned, the named file shall not be changed.

Clearly contradicting [this](https://github.com/perl6/doc/issues/2096#issuecomment-396419612):

> It copies the way Perl 5 does it and it in turns copies the way it's done in C.

For completeness,

    #include <errno.h>
    #include <stdio.h>
    #include <unistd.h>

    int main(void)
    {
        int r = unlink(""file.which.does.not.exist"");
        if (r != 0)
        {
            printf(""return value = %d, errno = %d\n"", r, errno);
            perror(""Failed to unlink"");
        }

        return 0;
    }

Let's compile and run:

    $ gcc u.c -o u
    $ ./u
    return value = -1, errno = 2
    Failed to unlink: No such file or directory

The [current Perl 6 docs state](https://github.com/perl6/doc/blob/bbbce35fd58dbce568d3c2738b68dd853747fa99/doc/Type/IO/Path.pod6#L1012):

> The subroutine form returns the names of all the files in the list, excluding
those for which the filesystem raised some error; **since trying to delete a file
that does not exist does not raise any error at that level**, this list will
include the names of the files in the list that do not exist. (*emphasis mine*)

That is obviously not true. I do not understand how longstanding Perl, C, Unix etc behavior is causing this much [confusion](http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-12#l569).

",1528847858.0
saiftynet,"On Windows 10
Start Menu > All Apps > Strawberry Perl > CPAN Client
This should bring up a console for you to enter the module you want to load, e.g. `install App::cpanminus`",1528838198.0
tarje,https://metacpan.org/pod/App::cpanminus,1528836677.0
GoHomeGrandmaUrHigh,Btw: is PAUSE still the place to upload modules to the CPAN?,1528837960.0
wbazant,I'm a bit afraid that I will have to pay you money to program these projects with you. Will you let me do it for free?,1528806093.0
riding_qwerty,Last time I checked the shebang isn’t necessary on Windows.  The file extension will cause it to be invoked by the interpreter.,1528772048.0
cliffm,"Completely unnecessary on Windows, but a good habit to be in. Makes transition to Linux/Unix easier, and makes your scripts shareable. There is also at least one option, -T (taint checking) that can only be done on the shebang. (Well also perl -T on the command line, but it sounds like you're invoking the script by double clicking it)",1528774389.0
doomvox,"It's unlikely to matter much on Windows, but then I don't use windows.  That first ""#"" makes it a comment as far as perl is concerned, so it isn't going to hurt to have it there. 

Try writing a simple perl program, like 

    print ""Hello World\n"";

Can you get it to run, however you like to run things?  I'd recommend trying it with the ""#!"" line, and leave it there if it works.  It also might help to use the standard perl script file extension on the name of the file: "".pl"".

",1528773172.0
scottchiefbaker,"Not required, but no reason **not** to include it. I'd include it just for consistency.",1528779371.0
nnmmnxxc,Can I just use like #!perl ,1528779755.0
hobbified,"You don't have to do anything, but `#!perl` is not a bad idea.",1528781070.0
scottchiefbaker,"Can you elaborate? That syntax is 100% valid and correct.

Sample: https://perlbot.pl/p/m8ql3e",1528749136.0
davorg,"`chomp()`. It's always `chomp()`.

Without reading any other answers, my guess is that `$feeling` is being read from `<STDIN>`. That variable will come with a newline attached to it that you need to remove using `chomp()`.

    say 'How are you feeling?';
    my $feeling = <STDIN>;
    chomp($feeling);
    if ($feeling eq 'Good') {
      say ""That's good to hear"";
    }",1528790780.0
gillysuit,"    [[0,1,2,3,4,5],[1],[2],[3],[4],[5]]

The easiest way to determine the structure is to use Data::Dumper

    perl -MData::Dumper -wE""@d = ( [0 .. 5], map { [$_] } 1 .. 5); say Dumper \@d""",1528743428.0
raevnos,Are you really embedding untrusted user-supplied strings directly into a SQL query?,1528720930.0
perlpunk,"Please read http://bobby-tables.com/

Also, this is a crosspost: https://stackoverflow.com/questions/50794517/perl-web-development",1528726157.0
Grinnz,"With [Mojolicious](https://mojolicious.org) and [Mojo::mysql](https://metacpan.org/pod/Mojo::mysql):

    use Mojolicious::Lite;
    use Mojo::mysql;
    my $mysql;
    helper mysql => sub { $mysql //= Mojo::mysql->new(""mysql://$user:$pass@$host/$dbname"") };

    post '/' => sub {
      my $c = shift;
      my $company = $c->param('company');
      my $job = $c->param('job');
      my $salary = $c->param('salary');
      my $eligibility = $c->param('eligibility');
      my $updated_rows = $c->mysql->db->update('company', {post_job => $job, salary => $salary, eligibility_criteria => $eligibility}, {name => $company})->rows;
      $c->render(text => ""Updated $updated_rows rows"");
    };
    app->start;

This can be transparently [served as a CGI script](https://metacpan.org/pod/Mojolicious::Guides::Cookbook#Apache/CGI) or with [more performant options](https://metacpan.org/pod/Mojolicious::Guides::Cookbook#DEPLOYMENT).

Another option is [Dancer2](https://metacpan.org/pod/Dancer2) which can be simpler to get the hang of for smaller applications and also supports a wide array of deployment strategies (via Plack/PSGI), templating systems, and you can use Mojo::mysql with it similarly.

Mojo::mysql handles several potential pitfalls for you, including providing a [nice syntax](https://metacpan.org/pod/SQL::Abstract) for constructing queries with parameters (as in the example code) or providing parameters to constructed queries using the [->query method](https://metacpan.org/pod/Mojo::mysql::Database#query), and handling reconnections as needed. You need to get the user/pass/host/dbname for connection to DBI from somewhere, preferably a [config file](https://metacpan.org/pod/Mojolicious::Guides::Cookbook#Adding-a-configuration-file).",1528731017.0
kentrak,"PHP, since it was envisioned as and historically used as purely a language for handling web requests, internalized the HTTP param handling portion that most languages use a library/module for as core language constructs.  That's why there are variables that already exist on every execution that contain the parsed parameters.

The way those variables are *actually* gotten by PHP if it's a CGI script (and similarly if it's included as a HTTP module, it's not quite true but it works well enough) is through environment variables which are set by the web server.

If your server environment is running linux or some UNIX-alike (FreeBSD, MacOS, etc), you can actually see this very simply by creating a very minimal CGI using bash:

    cat > mybashvars <<EOBASHVARS
    echo ""Content-type: text/plain""
    echo """"
    env
    EOBASHVARS
    chmod +x mybashvars # Set it executable

You can run it from the shell (./mybashvars) to see the current environment variables, or you can throw it into a cgi folder and access it as a CGI through a browser and the web server to see the environment variables the web server sets.

Now, you *could* parse those environment variables manually in Perl, they are accessible through the %ENV hash, which similarly to PHP, Perl sets on start so you can access environment variables easily (PHP as a global environment variables as well, it's just not often needed).  I don't recommend that though, since there are *many* modules that will do it for you.

The CGI module is one of them, but like others here have noted, it's fairly cumbersome and does much more than you are looking for, complicating it's use and finding features in the documentation.  It's a very old module that has acquired a lot of features over time.  That said, if your needs are fairly simple, it might be the easiest and most familiar way to existing Perlers to do this simply through actual CGI, so you can find help if needed (as long as you're willing to deal with people telling you to do it a different way.  They're *technically* right, but that doesn't always help if your constraints are tight, and knowledge and ability in a target language are constraints).  If you want to use CGI, see the top level comment by /u/amdpox.

The thing you'll need in addition to that though is to either put `print $q->header();` on a line or `print ""Content-type: text/html\n\n"";`, which should be equivalent.  CGI allows you to output the headers of your request, and expects those first, and an empty line by itself afterwards, before you output the actual content to display.

Lastly, if you have the ability to proxy the connection to another server on a different port,or you can replace the service with something of your own, you might find a Perl framework (instead of CGI) to be easier to deal with.  For example, check out [Mojolicious](https://mojolicious.org).  It may look like some of the examples include more code, but that's because they are actually including a lot more stuff explicitly (but concisely, it's not that much more code) which helps when you want to change something, and it's all under a good set of documentation and guides.  It appears there's also a way to run Mojolicious behind/as a CGI, but I'm not too familiar with that.  You can see more info on that in the [deployment guide](https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#Apache-CGI) and [CGI submodule of Mojolicious](https://mojolicious.org/perldoc/Mojo/Server/CGI), but depending on your skill level with Perl or other languages, that may be too much to tackle all at once.

Finally, as some people have mentioned, you need to be very careful with using user provided data in the SQL queries.  I believe modern PHP actually does some automatic variable escaping in the $_POST and $_GET global vars, so you have some automatic protection there, but Perl won't be providing you with that same initial protection just be accessing the variables.  Instead, you'll either want to run them through something that escapes the more problematic ways people can abuse them, or preferably you use bound variables (which the mysqli database driver in PHP also supports, IIRC, so you should be able to find similar documentation there of the how and why, if that helps with understanding).

Hope that helps!",1528731917.0
amdpox,"This depends on how your script is being executed by the web server. Assuming you're using [CGI](https://metacpan.org/pod/release/LDS/CGI.pm-3.43/CGI.pm), it's something like this:

    use CGI;
    my $q = CGI->new;
    my $company = $q->param('company');",1528712367.0
beermad,An interesting concept. Though I wonder if any performance gain will make it worth the extra work of populating the database every time it runs. I suppose that depends what you're doing...,1528721170.0
luckyleprechaun,"I work with SQLite all the time at work with the DB being on a RAM disk.  For RHEL (Red Hat Enterprise Linux) I can create the DB in /dev/shm which by default is half the size of your total RAM.

This has the advantage of being persistent across run times if the host hasn't been rebooted and you can copy the file to disk for more permanent data storage (after a reboot it could be restored for the disk this way).

All OS's support RAM disks and you can usually tweat it to use as much memory as you want.  Usually not a good idea to let it consume 100% as this will usually end up crashing the OS.

",1528726697.0
Grinnz,"Another potential problem aside from lack of persistence is if you have to reconnect for whatever reason, you'll also lose the database; for this reason I recommend and default to using a tempfile database instead for such purposes in [Mojo::SQLite](https://metacpan.org/pod/Mojo::SQLite#DESCRIPTION). Personally I only end up using this for testing.",1528738839.0
hobbified,A miserable pile of secrets (which may be true or false)!,1528670064.0
SinanUnur,"I am baffled by the author's charts. Tiny, hard to read labels on axes, huge wide bars ... Combinations of squiggly lines and colored bars.

Just to take one example, consider the first bar chart. The author says:

> I have closed more than 80 issues during April:

After zooming in all the way to read the [tiny y-axis labels](https://jj.github.io/TPF-Grant/illos/closed-issues-may.png), I note that the `JJ` bar is at about 160. So, does the preceding statement have anything to do with the chart?

And, in [this chart](https://jj.github.io/TPF-Grant/illos/issues-open-closed-diff.png) using a different color for each bar with red for the supposedly good thing is extremely harmful to the message you are trying to convey. Red is the color of alarm. Instead, the author should just use a single color, use `closed - opened` as the y-axis label so that the numbers are negative until you arrive, and turn positive after you do.

Effective use of color can be useful in charts, but, when in doubt, stick with black & white.

I haven't really looked at the content of the work, but I have seen some of the questions the author posted on Stackoverflow as part of the effort to carry Perl 6 content from the IRC channel to the Stackoverflow. In most cases, the resultant posts do not have descriptive titles which could help others who might have similar problems in the future. They might make sense if only ever intended to be read by the participants of the related discussion on IRC, but I think that's just a waste of time to move the discussion to Stackoverflow in that case.

I haven't reviewed the content of the author's grant work, but the presentation leaves much to be desired.",1528647366.0
anossov,"It gets the first element of `@_`, that is, the first argument to this function (I'm guessing some sort of a request object).",1528556854.0
Grinnz,"https://metacpan.org/pod/perlfunc#shift

You should not use $a and $b as variables outside a sort block. Just declaring `my $a` can screw up sort blocks in that scope. Any other single letter is fine (like $c used for the controller object in Mojolicious and Catalyst) but it's often better to use more descriptive names outside of examples and oneliners.",1528558210.0
lindleyw,"Looks like Mojolicious. As anossov mentioned, shift with no arguments removes and returns the first element from @_, the argument array.  In Mojolicious, that is the Controller object, whose [param method returns the get/post parameters](https://mojolicious.org/perldoc/Mojolicious/Guides/Tutorial#GET-POST-parameters).",1528557279.0
perimus,"Shift is using an assumed variable.  There's many situations where, if you use a function without a variable, perl will assume one.  Read here under the section /General Variables/ for more information abut when and why  [https://perldoc.perl.org/perlvar.html](https://perldoc.perl.org/perlvar.html) ",1528570624.0
davorg,"Many Perl built\-in functions work on default inputs if they aren't given a specific input. In many cases, that default input is `$_`. The `shift` function is unusual in a couple of ways. Firstly, it doesn't work on `$_` by default and, secondly, what it does work on depends on where it is called.

* If `shift` is called without an argument outside of a subroutine, it works on `@ARGV` (the command line arguments passed to your program).
* If `shift` is called without an argument inside of a subroutine, it works on `@_` (the arguments passed to the subroutine).

See [`perldoc -f shift`](https://perldoc.perl.org/functions/shift.html) for more details.",1528576787.0
codon011,`perl -d`?,1528434738.0
tm604,"- https://metacpan.org/pod/Devel::hdb
- https://metacpan.org/pod/Devel::Trepan
",1528435502.0
zakame,There is a [Pry](https://metacpan.org/pod/Pry) for Perl which is similar to Ruby's.  `perl -d` is also available out-of-the-box (see [perldebug](http://perldoc.perl.org/perldebug.html) as well as [Effective Perler](https://www.effectiveperlprogramming.com/2011/11/trace-your-perl-programs/).),1528436182.0
jplindstrom,"`perl -d` works, but isn't very usable when it comes to showing where you are in the source.

If you use Emacs, there's cperl-mode which has a slightly nicer interface to `perl -d` via the standard Emacs debugger.",1528446664.0
codon011,"To follow up on my quick response from last night: IntelliJ (community edition) has decent Perl support one you get some plugins on board. It also has a debugger integration for running code locally under the debugger or attaching to a remote process. I've tried to get this set up for work so I can step through an Apache/mod_perl request. I did manage to get it to connect and step through part of the request, but my mod_perl wasn't built with debugging hooks so it gets to a point and then doesn't stop until it hits a DBI method. Such promise but such miss. ",1528498973.0
davorg,"I generally just use `perl -d`, but I remember [Devel::ebug](https://metacpan.org/pod/Devel::ebug) being rather nice to use.",1528450472.0
mpersico,[http://search.cpan.org/\~aepage/Devel\-ptkdb/ptkdb.pm](http://search.cpan.org/~aepage/Devel-ptkdb/ptkdb.pm),1528464875.0
Grinnz,"Your code is missing where you declared and assigned to the $dt variable, which seems to have been done incorrectly, as it contains a string and not a DateTime object. Also, your posted use statements are incorrect, keywords in Perl like 'use' are case sensitive and lowercase.",1528400315.0
digicow,You need to parse the datetime string into a DateTime object before you can call object methods on it. Look at DateTime::Format::Strptime,1528396546.0
briandfoy,"Remember to include the program you were actually running instead of typing it in by hand. Before you can do something with a value you have to turn it into the object that you want. In this case you have to turn the date string that you have into a DateTime object. That module doesn't parse strings so there's an extra step involved:

	use v5.010;
	use strict;
	use warnings;
	use DateTime;
	use Date::Parse qw(str2time);

	# start with your date in a string
	my $date_string = '2010-01-10T10:50:30.000Z';

	# convert that to an epoch time with Date::Parse. This is a single
	# number
	my $epoch       = str2time($date_string);

	# construct the DateTime object from the epoch time. The DateTime
	# module does no parsing.
	my $dt = DateTime->from_epoch( epoch => $epoch );

	# Now do your thing with the DateTime object:
	say 'DateTime: ', $dt->ymd('-');

	# Instead of DateTime you might like the lightweight Time::Moment:
	use Time::Moment;
	my $tm = Time::Moment->from_string( $date_string );
	say 'Time::Moment: ', $tm->strftime( '%Y.%m.%d' );
",1528424210.0
davehodg,You’re not creating $dt. Strict and warnings are your friends.,1528397503.0
arthurloin,You could also pop a `--rm` in there to automatically remove the container on exit,1528374338.0
tarje,metacpan favorites have never worked properly for me. i tested the feature when it was first added years ago and have still not to this day been able to unfavorite them.,1528354404.0
saiftynet,"Is there somewhere the number of times a module is downloaded recorded, or the number of dependants a module has?  Would this a reasonably objective  metric for qualifying how useful a module is without requiring a user to submit a review?",1528376382.0
perlancar,"Sigh, another service going down. Although search.cpan.org and cpanratings.perl.org are not in great shape nowadays anyway so, well.",1528385746.0
jpsalvesen,"Why are you using UDP for this project? UDP does not provide any way of detecting and handling packet loss, so in my understanding you could be missing events. ",1528235336.0
frezik,"With these projects, I want to mirror the phrase ""don't invent your own crypto"" for physical security. Problem is, that phrase is based on the fact that publicly verified encryption algorithms are pretty damn good. Conversely, common home security systems on the market are invariably shit, and you can almost certainly do as good or better on your own.",1528208353.0
jplindstrom,"> but here is the problem, when I come the next day I have to run the hypnotoad command again but only once and it says hot deployment and I can use it fine again.

This is the part where you forgot to state the actual problem.

I suspect what you want to say is: if you make a request to the server the next day, it doesn't respond. Is that right?
",1528196207.0
73616D4777697365,"I've seen this before with an app which had a persistent database connection open. It was fine until the next day, then nothing from it until we restarted it and no particularly useful error messages. Do you think this might be a possible cause in your case?",1528203298.0
aioeu,"Please don't take this post the wrong way, since I don't mean to downplay your efforts. But are you sure this really warrants a separate module?

Anybody that's familiar with `JSON` and `IO::Uncompress` will recognize that both of them have incremental modes, and that gluing those together is just going to need a simple loop. Moreover, many people requiring incremental parsing are likely to need integration with some _other_ part of their code &mdash; e.g. they may be streaming the JSON blob from a remote server, so they will want to hook it into their LWP response handling or network event loop &mdash; and it's not clear whether your proposed module would be useful in those kinds of situations.

Maybe it's just that I don't fully understand what extra benefits your module will provide. I do think it ought to provide something over and above what can be achieved simply by gluing those two modules together manually. For instance, one thing I think would be _really_ neat would be some kind of SAX-like streaming evaluator for JSON.",1528151560.0
tarje,you should also see if JSON::SL helps your use case.,1528155403.0
Grinnz,"Incremental parsing is tricky. But setting that aside for the moment, [File::JSON::Slurper](https://metacpan.org/pod/File::JSON::Slurper) is a cute little module that combines the recommended approaches for reading in a file quickly and decoding JSON quickly. (Special note: JSON.pm uses JSON::XS by default which has many bugs that are fixed in Cpanel::JSON::XS, and also adds overhead to JSON::XS's normally speedy parsing; JSON::MaybeXS uses Cpanel::JSON::XS directly and with no added overhead.)",1528154983.0
leejo,"This is rather unfortunate given, for example, [commit messages](https://github.com/search?q=irclog.perlgeek.de&type=Commits) that reference the site, along with [issues](https://github.com/search?q=irclog.perlgeek.de&type=Issues) that also reference the site (along with even more [code](https://github.com/search?q=irclog.perlgeek.de&type=Code)). So now a tonne of history has effectively been destroyed.

I think the lesson is clear, always put full context into your commit logs/issues where possible and avoid only providing links. I mean, we know this already but still...",1528208693.0
hobbified,I hate what the internet has become.,1528179127.0
mkosmo,"I'm not sure I agree with his interpretation of GDPR.  Nicks, especially when you can't prove they're authenticated, are not PII by any means.  As such, none of the data is linked or related to an individual.",1528206352.0
jplindstrom,"Isn't Reddit or StackOverflow essentially the same thing?

If not, what is the difference?",1528186999.0
sshaw_,I liked this site. ,1528167447.0
AbstractTherapy, Concern trolls ruin everything,1528144062.0
lindleyw,"Congratulations, EU. You killed the internet. -- These logs were valuable ways of learning code, avoiding asking redundant questions, and establishing a community. And still no-one has explained how a European law could be enforced against those of us not under its jurisdiction. Utterly infuriating.",1528147306.0
liztormato,"`Set`s in Perl 6 are immutable.  As are `Bag`s and `Mix`es.

    my $s = <a b c d>.Set;

Documentation at https://docs.perl6.org/language/setbagmix",1528138544.0
briandfoy,"You might be interested in Perl 6's Lists and Maps, although you need to be careful to decontainerize some things. You can also bind (instead of assign) literal values.",1528198740.0
raiph,"Hi again, Bob.

I'm a tad late to the discussion. While I'm now spending less time writing on P6 outside the perl subs, I'm still writing long posts in the perl subs and this is a topic I've thought about a bit. Plus I wanted to chat about something light. :)

>I love how Perl 6 supports just about any programming language paradigm and coding style you can imagine. But one of the features I don't see highlighted in the docs is convenient immutable complex data structures. I'm sure you can build this with the Perl 6 object system. I'm just wondering if it's built in, and I missed it in the documentation.

I've thought along similar lines. Plus I agree it can valuably simplify reasoning about code.

I see there's been discussion but everyone will have gone by now so I'll just write from scratch. I'll probably cover a lot of stuff you already know but I'll not worry about that because you can skim.

Overall I think P6 scores low marks for language support for a 100&#37; immutable programming paradigm. But let me imagine it's nevertheless worth discussing it from a positive perspective. :)

Given that P6 syntax and semantics are ultimately completely programmable, so one could in principle, ignoring performance, write clojure in P6, or something hybridish if that's preferred and/or regains performance, I can *imagine* doing 100&#37; immutable programming in P6 at some point in the future. But I have an active imagination that runs far ahead of reality, sometimes infinitely far. :) Anyhoo, it's this possibility that led me to write that P6 scores low marks for language support for 100&#37; immutable programming. Without it I'd have given it an even lower score. :)

**So, returning to what there is now and could plausibly be in the near term...**

First, there's `List` which seems like a start. By *default* it is *shallowly* immutable. But `(1,$a) === (1,$a)` will always be `False` for one of two reasons. First, the `$a` is typically a `Scalar` container which is mutable. Secondly, each list behaves like its own object rather than as a type of value so even `(1,2) === (1,2)` will always be `False`!

**All things considered** `List` **is a... false start. :)**

The `say (1,2) === (1,2); # False` example is especially striking though `(1,$a) === (1,$a)` is no less important.

Going further, we might consider arbitrarily nested lists and arrays such as `(1,($a,[2,@b])) === (1,($a,[2,@b]))`.

**There's already been talk of a** `Tuple` **type** that's like a `List` but replaces nested lists and arrays with their immutable `Tuple` equivalent, replaces scalars like `$a` with their value, and acts as a value type so that `(1,($a,[2,@b])).Tuple === (1,($a,[2,@b])).Tuple` is `True`. Perhaps there'd also be some syntax sugar to avoid lots of `.Tuple`s.

But imo, while that might work as a step forward, it's only a step.

**Imo we also need something that covers associative types** (`%foo`) and I'd prefer a single solution that covers those too.

Perhaps a generic `ro` function/method that ""deep freezes"" a data structure by replacing all `Scalar` containers with their contents (whether they're on their own, or elements of a list/array, or values of key/value pairs), iterates `Iterable`s, and returns a new object with immutable value semantics. So that `(1,($a,[2,@b,{:c,:d[3,4]}])).ro === (1,($a,[2,@b,{:c,:d[3,4]}])).ro` is `True`.

**But there are other issues.**

First, what about objects with mutable object semantics? Do you count objects as complex data structures? While P6's overall architecture is such that you could indeed grow an entirely new immutable object system that sits within the larger system, much of the out-of-the-box functionality, the standard library if you will, is predicated on using built in objects and some of those are mutable and get mutated. Object mutation isn't a problem in the face of concurrency if you use the right features such as [OO::Monitors](https://github.com/jnthn/oo-monitors) that automatically serialize method calls of instances of classes declared with `monitor` rather than `class`. And that's idiomatic. But objects are a form of complex data structure, and a good number of those shipped as part of the out-of-the-box P6 experience are mutable and get mutated, and I suspect it would be a major undertaking to grow a 100&#37; immutable alternative to them.

But maybe you don't mean objects in general but just nested arrays and hashes and the like.

No matter what approach one comes up with for coding with immutable complex data structures or objects, **there'd still be the issue of accidentally/incidentally creating mutable ones when you meant to create immutable ones**. I hear clojure makes it hard to do that. I suspect that's a good thing and perhaps critical.

And even if you ignore that, you'd still have the problem of accidentally/incidentally calling functions that attempt to mutate and then raise errors when they find they can't *at run-time*. I'm guessing clojure doesn't have that problem.

And if you fix that by writing versions of functions that statically match immutable types -- which I think is an unrealistic proposition as a general solution -- you'd now have to make doubly sure you don't accidentally/incidentally create and pass mutable data/objects because that would be statically multiply-dispatched to the original functions that accept mutable data/objects and they'd mutate your supposedly immutable data/object without error.

Anyhoo, I'm written out. Thanks to anyone who reads this for listening. :)",1529272653.0
flamey,"EDIT: sorry, didn't see your edit when I typed it :)
-----------
if you run `say $tree->findnodes( $xpath0 )->[0]->as_XML_indented;` you'll see there's a `<ul>` after that div.
so it looks like this:

    <div aria-labelledby=""relatedLessons"" id=""panelRelatedLessons"" role=""tabpanel"">
      <ul>
        <li class=""list-group-item"">
          <div class=""media"">
          ...
          </div></li>
        <li class=""list-group-item"">
        
I know you are saying WTF, it's not in source and not in Chrome dev tools. But there it is in Tree Builder. And that's why your xpath doesn't work.

Why it is there is another question. I'll have to guess it tries to fix invalid HTML. I'm lazy to look up, but as far as I know `<li>` tags should be surrounded by `<ul>` or `<ol>`. Maybe TreeBuilder needs to have valid HTML before it parses it into it's object, so it tries to be smart and fix anything that it thinks is invalid. Just my 2 cents.

So, add `ul` to your xpath for quick result. Or head over to metacpan to read docs if you want to get to the bottom of it.",1528059000.0
EvanCarroll,"Perl needs a lot of things, an AppStore isn't one. CPAN got a much needed code-refresh with Meta.CPAN. The problem is that it's lagging other languages and the community has shifted from an adventurous community of hackers with a unique culture to a cesspool of a few large companies, and IBM consultant-wannabes with long hair. It's not that you can't go that route and be successful, it's that perl is less well-poised to succeed in that direction.",1527963307.0
davorg,There's [a scripts section on CPAN](https://www.cpan.org/scripts/). It never took off. I don't know why that is. Patches welcome :\-\),1528009022.0
FiveYearsAgoOnReddit,"The key point here is that people who work in Perl create great applications, but they create them from scratch, using \(we hope\) trusted components.

Your suggestion is like saying a company which makes bricks, mortar and concrete blocks ought to start a house store.

Prebuilt houses, mobile homes, emergency shelters and double\-wide trailers all exist. But that's not the business we're in. That's someone else's business.",1528014502.0
srynearson1,It’s called dockerhub.,1527969955.0
plainblackquy,"I love this idea.

Years ago, people did try to rewrite Matt's Script stuff.  It's possible that WordPress plugins consumed a lot of those use cases.

By any chance, are you familiar with this? https://sparrowhub.org/
",1527964807.0
FiveYearsAgoOnReddit,Damn. Matt's Scripts still exists?,1528014201.0
davehodg,  Not Matt’s Script already exists.,1527968125.0
hobbified,There's no legitimate reason for an app store user to give a shit what language something is written in.,1527993874.0
amdpox,You should be able to just use `<$lessonDir/*.mp4>`.,1527905567.0
0rac1e,"As u/amdpox mentioned, you can just do `<$some_dir/*>` (or `glob(""$some_dir/*"")`), which will return a list of strings of the relative directory.

    for my $f ( <'../files/*'> ) { 
        say $f;  # ../files/some_file.mp4
    }

Using `opendir` and `readdir` will iterate through the directory. There are a few things to remember. Unlike `glob`, it will return files in a random order, and will include hidden files          (including `.` and `..` on Unix-like file systems). Additionally, if you `opendir` on a different directory, it returns only the basename of the file

    opendir(my $dir, '../files');
    while ( my $f = readdir($dir) ) {
        say $f;  # some_file.mp4
    }
    closedir($dir);

Be careful with this, because if you then delete a file (`unlink $f`), _you may be operating on a file in your CWD_, **not** the file in the directory you opened. The solution is to prepend the directory.  Also, there's no way to filter files with `readdir` so you have to handle it yourself in the loop.

    opendir(my $dir, '../files');
    while ( my $f = readdir($dir) ) {
        next if index($f, '.') == 0; # Skip hidden files
        next unless substr( $f, rindex($f, '.') ) eq '.mp4';
        my $path = ""../files/$f"";
        say $path;  # ../files/some_file.mp4
    }
    closedir($dir);

Alternatively, you could `chdir` to the directory before doing anything.

To be honest, I wouldn't recommend using `opendir`/`readdir` unless you are working with a lot of paths (eg. doing a recursive directory walk) and don't want to use up a lot of memory.

Personally, I like to use a module like [`Path::Tiny`](https://metacpan.org/pod/Path::Tiny) so I get file objects, rather than just strings. You can give the `children` method a compiled regex to     filter the returned objects. Additionally, you can use methods like `basename` when you want to work with just the filename.

    for my $f ( path('../files')->children(qr/\.mp4$/) ) {
        say $f;            # ../files/some_file.mp4
        say $f->basename;  # some_file.mp4
    }",1527932252.0
codon011,Perhaps `opendir` and `readdir` would better suit your needs. ,1527917612.0
rage_311,"Mojolicious lets you do a lot of things more concisely than some other frameworks/modules, too.  This type of setup/flow is normally what I use in my client-side scripts:

    my $ua = Mojo::UserAgent->new;

    my $post_result = $ua->post(
      $endpoint,
      { SOAPAction => $soapaction, 'Content-Type' => 'text/xml' }, # headers
      $message # request body
    )->result;
",1527788079.0
marcusramberg,https://mojolicious.org/perldoc/Mojo/UserAgent#build_tx shows how to post request bodies. ,1527785825.0
Grinnz,"Don't be mislead by the documentation for each individual module in the Mojo toolkit; when you are using many modules together, they often instantiate the other objects for you, in this case you only need to construct the UserAgent object. Take a look at the [post method](https://metacpan.org/pod/Mojo::UserAgent#post) and the tx method it links to for more ways it accepts arguments.",1527794783.0
zakame,"I suspect [Mojolicious::Guides::Cookbook](https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#USER-AGENT) can show a few pointers here (not necessarily SOAP, but the general way of using Mojo::UA.)

To ""see"" the request the way Mojo::UA would see it, I'd run with your script with `MOJO_USERAGENT_DEBUG=1` to see the full request/response.",1527817607.0
fr1ction,Why are you moving to mojo\-based tools?,1527824194.0
lastone23,I use vim...,1527730859.0
I_need_this_to_vote,"No, Eclipse is not what it once was.... If you can get it going it works well  but can quickly turn into its own project. 

Everyone is going to tell you to use vim. Perl folks love them some vim (or emacs).

The best thing I've found on windows is IntelliJ IDEA with the Camelcade perl plug-in installed.  The plug-in is actively developed and works well.  Both IntelliJ and the plugin can be had for free but if you like it consider throwing the plugin author a couple bucks on the plugin page.

The other OK IDE for perl is Komodo Edit. Its specifically built for perl but interestingly I find IntelliJ with Camelcade perl to work way better than the community or pro versions of Komodo.

Good Luck!",1527740550.0
skylos,For perl? IDE don't help that much anyway. You can use padre though I hear byterock uses it all the time. As for me... I use vim. With tabs and perl tidy and exuberant and all that kind of help. It's not bad. ,1527734389.0
runester,"I use Atom and it does code completion, smart colors, paren matching and more. For Perl, for free.",1527741104.0
bart2019,"For Java or Java Runtime, and for Eclipse, you can use the hasslefree installer from [Ninite](https://ninite.com). 

You can keep the installer to update to the newest version ,later.

I have no idea what ""EPIC"" is. A record label? Healthcare software? A movie? 
",1527751140.0
tarje,https://stackoverflow.com/questions/14236318/perl-alternatives-to-template-toolkit,1527690166.0
sunshine_killer,text::xslate is really fast.... i think mojo::template exists...on mobile so thats the best i got for now.,1527693380.0
grewil,"It’s been a while, but as I recall, TT worked fine for most cases. What features do you miss? Perhaps you could create own extensions to TT if it’s only one or two features you miss?",1527689105.0
sigzero,[Text::Template](https://metacpan.org/pod/Text::Template),1527710956.0
davorg,"Honestly, I think that the Template Toolkit is the most fully\-featured templating engine available for Perl. If you're having problems with it, I'd suggest that your best approach would be to post descriptions of those problems here so that we can help you address them.",1527760424.0
mfontani,"At `$work` I mainly use Template Toolkit, as that's what was present prior, and it works Just Fine for the most part.

But, it's _slow_. It's good, but _slow_.

So, for personal projects this days I mostly use `Text::Xslate` instead. It's got most features TT also has (_aside from_ `PROCESS file.tt`, that is - but there are ways around that), and it's _fricking fast_.

See: https://darkpan.com/files/compare-templates-cleaned.pl.txt

…and another benchmark I've been doing to test the speedup gained by migrating a few ""choice template kinds"" from TT to TX:

    TT:  Template Toolkit with disk cache
    TX:  Text::Xslate     with disk cache and cache => 1 (default)
    Function                            TT/s     TX/s      ±TX/TT
    1s 100_runtime_inclusion             4978.58  35301.28  +609.06%
    1s 030_include_for_macro_call        1365.62  13958.02  +922.10%
    1s 020_macro_loop_data               2680.44  44021.18 +1542.31%
    1s 020_macro_loop                    3379.81  54103.07 +1500.77%
    1s 011_include_small_variable       10791.85  88554.30  +720.57%
    1s 010_include_small_literal        12210.76  79163.14  +548.31%
    1s 005_deep_data_structure          15066.95 113540.64  +653.57%
    1s 004_simple_loop_if_else_constant  1162.41  11586.22  +896.74%
    1s 004_simple_loop_if_else           1469.15  14714.50  +901.56%
    1s 003_urls_pipe_uri                 6776.07  49334.74  +628.07%
    1s 002_simple_loop_vars              1991.73  41346.86 +1975.93%
    1s 002_simple_loop                   1227.68  12007.29  +878.04%
    1s 001_simple_loop                   6874.87 110738.92 +1510.78%
    1s 001_simple_hashref                6185.73  55478.98  +796.89%
    1s 000_two_vars                     13795.08 136378.87  +888.60%
    1s 000_single_var                   18210.24 150477.13  +726.33%
    1s 000_literal_text                 22882.55 167636.03  +632.59%
",1527871666.0
melezhik,"I really appreciate all answers, will take a look more closely later and make a decision :))",1527702397.0
davehodg,"TT is the only sane one for me and I've probably used all of them. 

Catalyst uses TT by default and that's good enough for me.",1527761302.0
mR_N0body122,"here's something you can try [HTML::Template](http://search.cpan.org/~samtregar/HTML-Template-2.6/Template.pm) 

Been using it @ work for about 3 years now. 
",1527703266.0
subogero,"Perl has a built-in templating system: string interpolation.

    print <<EOF;
    [Random section 1]
    randomvalue: $var1
    [Random section 2]
    somevalue: @{[ random_function $var2 ]}
    othervalue: @{[ $var3 ? $var4 : $var5 ]}
    EOF",1527710875.0
sjoshuan,"FWIW, I think it would be valuable to see job postings in this subreddit. I think the signal effect would be good \(Perl\-people \*are\* in demand\) and who knows, maybe new people can be reached and join the Perl community? :\)",1527678870.0
ribasushi,"+1 on posting here ( *and* on the rest of the sites mentioned, *and* in 2 days on https://news.ycombinator.com/submitted?id=whoishiring )

If the position is legit ( as you said: not a recruiter ) there is no practical way to ""overdo it"".",1527697744.0
marvin_sirius,Probably better to just post on jobs.perl.org.,1527624968.0
ThirdEncounter,I'd love to hear about Perl jobs on this sub from time to time.,1527699381.0
tm604,"For Linux, Windows and OSX support without spending time debugging on those systems, I'd go with Docker. One advantage is that you can push the image to a (free) service like hub.docker.com and not have to worry too much about distribution or updates.

https://docs.docker.com/get-started/",1527629550.0
daxim,"Previous discussion: http://redd.it/758qaw#do4h69w

> I'm trying to figure out a better way

Again, the teflon-tape correct answer to your problem is to learn packaging. You will distribute your application as a package that is appropriate for each target platform. You are correct in your surmise that the setup you have now in the code repo is developer friendly, but not end user friendly. Ideally, your installation instructions boil down to only one command.

> Automatically determine project dependencies

I like [scan_prereqs](http://p3rl.org/Perl::PrereqScanner::App). See http://neilb.org/reviews/dependencies.html#conclusion

----

The first step is to modify your application into a dist that produces a CPAN-ready tarball because then all the packaging tools that you will use later work semi-automatically. CPAN-ready does not mean that you are required to upload the software to PAUSE/CPAN, instead just that it conforms to the format expected by backend PAUSE and the various CPAN clients.

For your code in concrete, you need to add a build system, a version number, a manifest, a metafile and some documentation for the end user; and decide on a dist name (`App-steam_sell_trading_cards` is fine). Nice to have are documentation for the maintenance programmer, a changelog, and tests. The easiest ways to achieve that are probably using [ExtUtils::MakeMaker::CPANfile](http://p3rl.org/ExtUtils::MakeMaker::CPANfile) to leverage your existing cpanfile, or making a new dist skeleton with [Module::Starter::PBP](http://p3rl.org/Module::Starter::PBP) and then flesh it out by transferring your existing code into it. The main .pl file goes into a [subdirectory named `script`](https://perlmaven.com/distribution-directory-layout).

Since you cannot rely anymore on the end user being able to write into the installdir, you also need to change the config location. Supply a sensible default (`File::HomeDir->my_config` should work once RT#76717 is resolved), but also let the user override the file name with a command-line option.

Run the build system to create a tarball (`make dist` or perhaps `./Build dist`). Since this is probably your first time, it's a good idea to ask volunteers to check whether it installs correctly on various Perl installations, try [Perlmonks](http://perlmonks.org/) or [module-authors](https://lists.perl.org/list/module-authors.html).

----

The next step is packaging. This is different for each platform, but the concepts are broadly the same. Learn and do it yourself (look into [OBS](http://enwp.org/Open_Build_Service), you get many platforms at once), or befriend packagers and have them do it. Perhaps start with the Debian pkg-perl group, they are nice people.",1527672944.0
srynearson1,"Don't underestimate the power of docker here.  The ability to hand off a container that is completely pre-build with all the needed libraries, etc, is a very powerful way to quicker adoption.",1527657527.0
hobbified,"If you're coming to Salt Lake, I'll be giving a talk on this topic, or at least [a very closely related one](https://perlconference.us/tpc-2018-slc/session/fatpack-it-full-featured-perl-apps-in-a-single-file/).",1527624226.0
MattEOates,Not sure if its still a good choice but PAR Packer worked well for me about 7 years ago when I cared about distributing a binary [http://search.cpan.org/\~rschupp/PAR\-Packer\-1.043/lib/pp.pm](http://search.cpan.org/~rschupp/PAR-Packer-1.043/lib/pp.pm) It works in such a way its probably still totally viable though compared to the Perl 5.8 perlcc which went away :\(,1527698676.0
flamey,"don't be too sure :\-\)

anyway, you may find [Perl Executing Browser](https://github.com/ddmitov/perl-executing-browser) interesting...",1527623426.0
djcp,"You might consider deploying it as a [button app](https://devcenter.heroku.com/articles/heroku-button) on heroku via a perl buildpack, [perhaps this one](https://elements.heroku.com/buildpacks/pnu/heroku-buildpack-perl). I would love to see more perl usage on Heroku.  If your app isn't too complex, it can most likely fit in the free tier.",1527687106.0
melezhik,Hi! [sparrow](https://sparrowhub.org) - scripts distribution system could be of interest for you.,1527687822.0
barryoff,"This link might help https://www.perl.org/learn.html 

",1527613189.0
byrel,"Yes, it's quite possible, the $1 variable might be a good thing for you to start looking at",1527623331.0
elbitjusticiero,"I would use a special flair for Perl6 but leave all Perl5 posts unflaired. There is a specific subreddit for Perl6 so Perl5 should be kind of the ""default"" here. But this is admittedly my personal preference and YMMV.",1527606796.0
Grinnz,"There are already flairs you can select after posting (camel and raptor would be Perl 5, camelia would be Perl 6), not sure if they work from the title as you mentioned. I would say it would be useful to have the option to filter by flair, but there's really not enough traffic for it to matter even if people flaired their posts. As long as the title clearly mentions Perl 6 when it's not relevant to Perl 5, I'm satisfied. /r/perl6 already works pretty well for anyone only interested in P6.",1527614237.0
bonkly68,"Some sample code:

    use strict;
    use warnings;
    use feature 'say';
    sub graphical {
            my $obj = shift;
            $obj->{foo} = sub { ""graphical foo""  };
            $obj;
    }
    sub textical {
            my $obj = shift;
            $obj->{foo} = sub { ""textical foo""  };
            $obj;
    }
    my $g = graphical({}); # constructor
    my $t = textical({});
    say $g->{foo}();       # method call
    say $t->{foo}();
    # transform from one class to another by initializing
    say graphical($t)->{foo}()
    # looks like you don't know the class your objects belong to
    # unless you provide a field to hold the class name
",1527554076.0
elbitjusticiero,"You're smart. 

",1527607313.0
marvin_sirius,Looks Javascript-y.,1527606736.0
runester,"From my initial look at this, here are my thoughts:

Pros:

* truly private data and methods
* trivially easy inheritance

Cons:

* nonstandard method call syntax
* not sure how well it would work with other classes

Here's my sample code:

*path: ./lib/Local/NameHandler.pm*

    package NameHandler;
    use feature qw/say/;
    use strict;
    use warnings;
    use Data::Dumper;
    
    sub new {
      # public hash ref, only holds public method
      my $obj = shift;
    
      # private hash ref
      my $priv = {'name'=>'Bob'};
    
      # private method
      my $expand = sub {
        my $str = shift @_;
        my @p = split(//, $str);
        return join('_', @p);
      };
    
      # public method
      $obj->{hello} = sub {
        my $tmp = $expand->($priv->{name});
        say ""Hello, $tmp"";
      };
    
      # public method
      $obj->{rename} = sub {
        $priv->{name} = shift @_;
      };
    
      # public method, attr getter
      $obj->{getName} = sub{ $priv->{name} };
    
      return $obj;
    }
    
    # subclass to add another public method
    # this subclass has NO ACCESS to parent class' private data or methods
    package NameHandler2;
    sub new {
      my $obj = shift;
      $obj->{formal} = sub {
        my $name = $obj->{getName}();
        say ""Salutations, Sir or Madam $name"";
      };
    
      return $obj;
    }
    1;

*path: ./test.pl*

    #!/usr/bin/perl
    use feature qw/say/;
    use strict;
    use warnings;
    use Data::Dumper;
    use FindBin qw/$Bin/;
    use lib ""./lib"";
    use Local::NameHandler;
    
    
    my $f1 = NameHandler2::new(NameHandler::new({}));
    $f1->{hello}();
    $f1->{rename}('Edward');
    $f1->{hello}();
    $f1->{formal}();
    
    my $f2 = NameHandler::new({});
    $f2->{hello}();
    
    print Dumper $f1, $f2;
    
    $f2->{discombobulate}(); # not a real method

*here's the output:*

    Hello, B_o_b
    Hello, E_d_w_a_r_d
    Salutations, Sir or Madam Edward
    Hello, B_o_b
    $VAR1 = {
              'getName' => sub { ""DUMMY"" },
              'hello' => sub { ""DUMMY"" },
              'rename' => sub { ""DUMMY"" },
              'formal' => sub { ""DUMMY"" }
            };
    $VAR2 = {
              'rename' => sub { ""DUMMY"" },
              'hello' => sub { ""DUMMY"" },
              'getName' => sub { ""DUMMY"" }
            };
    Can't use an undefined value as a subroutine reference at ./test.pl line 22.",1528133035.0
runester,"I was also able to create a singleton.

*path: ./lib/Local/Singleton.pm*

    package Singleton;
    my $obj;
    my $priv;
    
    sub new {
      if( defined $obj ){
        return $obj;
      }
      $obj = shift @_;
      $obj->{setFruitPrice} = sub {
        my($fruit,$price) = @_;
        $priv->{$fruit} = $price;
        return 1;
      };
      $obj->{getFruitPrice} = sub {
        my $fruit = shift;
        if( defined $priv->{$fruit} ){
          return $priv->{$fruit};
        }else{
          return undef;
        }
      };
      $obj;
    }
    1;

*path: ./test2.pl*

    #!/usr/bin/perl
    use feature qw/say/;
    use strict;
    use warnings;
    use Data::Dumper;
    use FindBin qw/$Bin/;
    use lib ""./lib"";
    use Local::Singleton;
    
    my $o1 = Singleton::new({});
    say ""set prices in object 1"";
    $o1->{setFruitPrice}('Apple',1.00);
    $o1->{setFruitPrice}('Banana',1.25);
    $o1->{setFruitPrice}('Cherry',0.15);
    
    my $o2 = Singleton::new({});
    say ""get prices from object 2"";
    say $o2->{getFruitPrice}('Apple');
    say $o2->{getFruitPrice}('Banana');
    say $o2->{getFruitPrice}('Cherry');
    
    print Dumper $o2;

*output:*

    set prices in object 1
    get prices from object 2
    1
    1.25
    0.15
    $VAR1 = {
              'setFruitPrice' => sub { ""DUMMY"" },
              'getFruitPrice' => sub { ""DUMMY"" }
            };",1528134467.0
MattEOates,"This is a bit of a poor title. ""Reducing Docker image size for a Cro webapp"" might be better. Tuning a web application I expected to see something more relating to requests per second and improving that...",1527511098.0
Lance_W,"Thanks for the share liztormato.

As for title... I wrote the title before the blog post, have updated the title, but left the original url for now",1527581955.0
beermad,"As a Perl lover who's been using it for something like 20 years, I had a play with Perl 6 last year out of curiosity. I very quickly gave up on it as I came to realise *just* how utterly unrelated the two languages are.

I'm not sure I really understand why they don't give it a different name, rather than pretending it's a natural successor to the Perl I know and love. I'm not really sure what niche ""Perl"" 6 is aimed at; certainly I can't see any good reason to spend any time learning it when ""real"" Perl is so much more familiar and productive.",1527458575.0
pravic,"Oh, come on. It's not about Perl, it's all about Gnome2::VFS.

> I guess that the options are: 

> * port shutter from Gnome2::VFS to GVFS or GIO 

> * replace Gnome2::VFS with other Perl modules. 

> Unfortunately, Debian perl team do not have the skills or bandwidth to work on this port, I hope that someone will be able to help.

https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=870418#96",1527503552.0
saiftynet,"Should be possible to get a screenshot using ImageMagick or Imager::Screenshot. That might work, presumably, regardless of Desktop environment and automatically better than something that is Gnome specific.  So one could either weave these screen grabbing tools into Shutter, or create a new one...",1527616681.0
6timo,"holy crap, i just tested it out and it's gorgeous! so many nice little \(and big\) useful features!",1527631103.0
tux68,"From the author* of Git::Repository:

> You're entering the realm of emulating user interaction, which I always shy
> away from. :-) The nice thing about git, after all, is that it is also supposed
> to talk to programs.
>
> Anyway, to solve your problem, I would try to do this:
>
> $repository->run( 'pull', { input => ""$git_pw\n"" } );

> But it's very likely to fail, for example because the password would be
> sent too early. I'm interested in the results of your attempts, if only to
> update the documentation. (I'm the author of Git::Repository.)
>
> A completely different solution would involve a public key and ssh-agent,
> and would remove the need to type a password.

In short, what you want to do is get anyone using your script to use ssh-add to setup the github identity and obviate the need to type a passphrase inside your script.

\* https://stackoverflow.com/questions/18586595/use-password-with-gitrepository",1527447555.0
DonkiestOfKongs,"It looks to me like you would want to be dynamically composing the xpath to get the values you want, maybe? Then just store the values in whatever structure as you find them. That would be my approach, but I haven’t worked with xpath a whole lot. 

Edit: to elaborate, you would use your current xpath as a stub, then inside of your loop just append to it some generated xpath values and use that to grab the new values. You would want to generate an xpath to get each value you are grabbing and store them in some structure initialized in the outer scope. ",1527399117.0
unkz,"$node is an [HTML::Element](https://metacpan.org/pod/HTML::Element) so call

    my $attr = $node->attr(""attribute""); # will return attr0 and attr1

and

    my $text = $node->as_text; # to get the text

Here's a tip, next time you don't know what you are looking at in a variable like $node, do this:

    use Data::Dumper;
    print Dump($node);

and it will give you the perl code needed to construct the object, including the class name so you can look it up.

Or, if you were wondering how to do relative searches from the TR tags, you can do this:

    foreach my $node (@nodes) {
       foreach my $span ($node->findnodes("".//span"")) {
          printf ""attribute: %s\n"",$span->attr(""attribute"");
       }
       foreach my $td ($node->findnodes("".//td"")) {
          printf ""content: %s\n"",$td->as_text;
       }
    }
    

which will output:

    attribute: attr0
    content:
    content: text0
    attribute: attr1
    content:
    content: text1
    ",1527405708.0
cmcjacob,"    WWW::Mechanize::TreeBuilder->meta->apply($mech);
    
    $mech->get($url);
    
    my $dom = HTML::Grabber->new( html => $mech->content );
    
    $dom->find('td.alt2 a')->each(sub {
    
    	push @links, $_->attr('href');  # you can also use ->HTML(), or as_text() instead
    
    });
    
    foreach my $result (@resultlist) {
        # Process $result
    }",1527408508.0
daxim,"Shortest solution:

    use Web::Query::LibXML 'wq';
    my $html = ...;
    wq($html)->find('tr')->each(sub {
        say wq($_)->find('td.class1 span')->attr('attribute');
        say wq($_)->find('td:not(.class1)')->text;
    });
    __END__
    attr0
    text0
    attr1
    text1
",1527412427.0
zoffix,"Says the password is encrypted. Would've thought it'd be hashed.

Out of curiosity, what algo is used for encryption?",1527244904.0
daxim,"Safe file name depends on the file system type, not the operating system. I know about [encodef](https://www.dwheeler.com/encodef/) which follows POSIX semantics.",1527234814.0
leaningtoweravenger,"Can you please clarify, maybe with an example, what you mean by ""converting a string to a *safe* filename""?
Potentially, ""hello world"" is a fine file name in the current directory",1527242687.0
batlock666,Encode::Safename?,1527258297.0
bart2019,Replace the `*` with a `+`.,1527221639.0
tm604,"note that you can leave out the `floor`, since those numbers are integers anyway - so `perl -i.bak -pe ""s/([0-9]+)/$1+1/ge"" sample.txt` should work",1527222906.0
mpersico,"What does this print:

    my $pwd = $ENV{PWD};
    print ""PWD is '$pwd'\n"";
    $o{certificate} ||= $pwd . 'some_path_to_a_cert';",1527168509.0
zeekar,What shell is invoking the Perl script? It might be one that doesn't export `PWD` into the environment.,1527168845.0
whitechapel8733,"By writing lots of Perl. It’s a different mindset. I came from Python, and I thought of things in a Pythonic way, and I was writing more verbose Perl. I started writing more Perl, and before you knew it I was using more Perl functions and modules which are really slick like chomp or Perl’s regex to strip characters. Perl is a great language. I’m kind of sad it doesn’t get the same attention as it once did. EDIT: Actually, the real reason I even had to write Perl at all is that I work with old SysOps guys on a Cloud Team and they are old school Tcl and Perl fanatics who don’t care about Python. I was kind of bummed out at first, but now I love Perl, just in a different way than Python. ",1527160368.0
,"Well this book is from 2005, I'm not sure how relevant it is today (don't use perl much).. maybe someone else can comment on that, but it was instrumental for me back in the day:

[Higher-Order Perl by Mark Jason Dominus](https://hop.perl.plover.com/)",1527162675.0
barryoff,"try [modern perl.](http://modernperlbooks.com/) the best part is, it's free",1527174619.0
BLOKDAK,"The best way I can describe it is to think of Perl more like using a spoken language. I find I can turn down the logical, analytical parts of my brain and get really fluent writing Perl. It's a strange thing, unlike any other programming language. I think the contextual nature of it, combined with TMTOWTDI has something to do with it. It feels more like creative writing than programming, sometimes.",1527205153.0
sfinae,"Yes, I have had this experience.

I would recommend that you get the book ""Programming Perl"", and work your way through it.

That's what I did as an intermediate, 16 year old BASIC programmer.",1527161003.0
nofretting,One thing that might help is to spend some time on the perlmonks site and see the answers proposed by others. That will expose you to aspects of the language you've overlooked.,1527167024.0
darkon,"You might try *[The Perl Cookbook](http://shop.oreilly.com/product/9780596003135.do)*. It's getting old, and some newer CPAN modules have made parts of it unnecessary (particularly for arrays), but there's still lots of good material in it. I also learned a lot from *[Learning Perl Objects, References, and Modules](http://shop.oreilly.com/product/9780596004781.do)*. Even if you use Moose (or whatever), it's still good to know how to design Perl objects from scratch. I'll second MJD's *Higher Order Perl*, and add Conway's *Object Oriented Perl*.
",1527169485.0
codon011,"Perl can be somewhat opaque at times. However it is also a very powerful language. I wish that I could offer updated book recommendations, but it's been at least a decade since I bought a Perl book and any recommendations I would have are about as old. However, Randall Shwartz's Objects and References book was a great addition to my library. It filled a gap that existed between Intermediate Perl and Advanced Perl. Perl Best Practices was both good and controversial when it came out, but a lot of the details has become dated even as reasoning behind it is still solid. 

To get into some of the more powerful features of Perl, Higher Order Perl is great. Passing functions as arguments to functions is a something that can take work to wrap your head around, but it's been a part of Perl for decades. My two favorite examples are `map` and `grep`. Understanding those might be a good step in unlocking one aspect of Perl's power features. 

",1527176398.0
sshaw_,"Perl man pages are a great way to see how folks think in Perl and pickup its depths. Some pages that come to mind: 

* [perlre](https://perldoc.perl.org/perlre.html)
* [perlfaq](https://perldoc.perl.org/perlfaq.html)
* [perlipc](https://perldoc.perl.org/perlipc.html) 

The [Perl section](http://pleac.sourceforge.net/pleac_perl/index.html) of the Programming Language Examples Alike Cookbook is great too. ",1527218269.0
davorg,"The book that took me from ""a programmer who uses Perl"" to ""a Perl Programmer"" was the first edition of *Effective Perl Programming*. The second edition is just as good.",1527236080.0
neverbetterthanks,"There is no need for the URL filename to be readable at all, right?

    $ perl -MDigest -E 'my $url = ""https://foo.bar/bang""; say Digest->new(""MD5"")->add($url)->hexdigest;'
    3e34ffeda47954672af034f7013d9a9f

A simple hash like that would do the trick.",1527130052.0
bart2019,">After some testing, I found that the problem is the percent sign. It's a legal filename character on Linux, but for some reason, $mech->get_local() chokes on it.

Just a guess: I think this is not considered as a filename, but as an *url-encoded* filename, so Mechanize will unencode it first before using it as a file name.

Try to encode it once more, for example with

    s/%/%25/g
",1527146482.0
unkz,Try double percent encoding the file name?,1527128122.0
BigRedS,"> Also, this is supposed to be a ""quick and dirty"" hobbyist project. I'm not after creating a framework. I'm trying to get something functional in the shortest amount of time / least amount of effort.

If it were me, I'd set up a webserver serving the files on http://localhost, and so not need to work around get_local - the idea is to get something together that'll download over HTTP, and it's quite easy to just have your own thing serving HTTP.",1527149447.0
Grinnz,List of DWHEELER's current perms (look for first-come): https://cpanmeta.grinnz.com/perms#dwheeler~,1527097723.0
hobbified,"Aw :(

Best of luck, though!",1527111167.0
sfinae,"Those age group numbers are quite striking, fewer than 15&#37; under 30. It would be interesting to see solid number of other languages, but this seems massively skewed an older crowd.",1526989166.0
zoffix,"> Here we have a slight change from 2017 that does not bode well for Perl 6 [...] The yes option dropped 9% from last year

An odd conclusion. The available data only tells, compared to last year, 9 percentage points fewer of people who completed this survey have tried Perl 6. You can't infer how well that bodes for Perl 6. Especially since when the survey was shared, multiple people said it was a Perl survey and not Perl 6 survey, thus discouraging Perl 6 programmers from participating in it.

The survey question is flawed as well. Both a person who says ""Perl 6 looks amazing, but I haven't had the time to try it"" and one who says ""I fucking hate Perl 6, I never tried it and I hope it dies"" can only choose ""No"" as a valid response, yet they represent diametrically opposed viewpoints on Perl 6. The same is true for the ""Yes"" option: both a person who tried it out for an hour, got disappointed, and will never touch it again, and one who makes a living programming in Perl 6 are combined in this answer, giving a very flawed gauge for the interest in the language.

It would be nice to have those combined data separated with more response options for this question in future years.

As for the survey itself, it'd be nice if it were clearer on whether it's collecting data on Perl 5 and Perl 6 programmers or just on Perl 5. It starts off by referring to ""Perl 5"" in the first question and ""Perl"" in the next, suggesting it covers both languages, yet later questions (e.g. frameworks) only include Perl 5's frameworks.",1526995787.0
kraih,"The percentages have been calculated very strangely in the report. Looking only at the numbers, Mojolicious remained steady in the Framework survey at 31% from 2017 to 2018. (2018: 319 out of 1024, 2017: 268 out of 849)",1526990271.0
drquicksilver,Donut charts :(,1527010119.0
sshaw_,"It would be interesting to know:

1. How those with less than 1 year of experience got started with Perl
1. How many new Perl projects have folks started in the past year
  - What type of project it was
  - Why Perl was chosen


",1527207503.0
liztormato,"I wonder who came up with the icon for this blog post.

It's probably projection on my part, but I feels to me that the red part signifies a crossed out butterfly.  Leaving the interpretation of the symbolism of that as an exercise to the reader.",1527025426.0
briandfoy,"In my experience in teaching live, in-person Perl classes, this error message shows up as a wall of text to people. They treat it as a single unit of impenetrable obscurity.  It's also a common question in places like StackOverflow.

It's not that the message is incorrect or uninformative. It's first seen as a big hunk. Newbies typically haven't developed the skills to realize that pages and pages of error messages are often solved by looking at the first couple of lines and fixing that. Everything they've probably experienced with computers has inculcated a feeling of helplessness and despair. All they know is that they did something wrong and they have to try something else without ever understanding it because most feedback from computers is cryptic. 

It doesn't matter if we think that people should just read it because they tend to not do that. Our opinion doesn't matter there when that's the actual observed behavior. That I believe the world should be different doesn't change what the world actually is or how people actually interact with it.

Some simple formatting can break down that wall of text and drive behavior the way that we want it. ",1527088077.0
dreadpiratemiley,"Enabling diagnostics will give you a more verbose message.
",1526949325.0
treenaks,"It says right there, in the original error message:

> you may need to install the Foo::Bar module

What's cryptic about that?

A missing module isn't always the result of not installing it - it could be a typo in the ""use"" statement.",1526979236.0
raiph,"\(Edited to strikeout ironically judgmental thinking/wording of my own.\)

While I agree with your sentiment that the error message is not as newbie friendly as it could be, you've expressed your point using language that's perhaps so provocative that your point may be lost in a blizzard of indignant responses.

In addition, your suggested replacement seems to contain a ~~very~~ false element:

\> is \*not\* found on your system

I get the point that it \*wasn't found\* but many folk might interpret that wording to mean that the error message is saying it \*isn't there\*. \(Which may be true some of the time but is too assertive logically and sometimes practically speaking.\)

Anyhoo, if you decide to post about this again some time, I recommend you avoid judgmental thinking/wording such as ""is not very helpful"" or ""should"". If you feel you must make and express a judgment, try qualifying with ""imo"" or similar.

Other than my nits above, and the issue that your vision of newbie friendliness would suggest changes to many other error messages despite \-\- imo \-\- Perl already having relatively friendly error messages compared to most languages, I'm with you.",1526996185.0
hobbified,"> If a script attempts to use a module that you don't have installed you get a pretty cryptic error message

No you don't, and throwing around words like that is insulting.",1526978262.0
subogero,"That error message is as clear as the blue sky. Plus do not suggest running `cpan`. It may not be installed on the system.

On the other hand, what is a bit cryptic is this error message:

    Can't locate object method ""method"" via package ""0"" (perhaps you forgot to load ""0""?) at ./err line 5.

And the code emitting it:

    #!/usr/bin/perl
    use strict;
    use warnings;
    sub should_return_object { 0 };
    should_return_object()->method();

EDIT: It's a good example of an error message trying to be too clever, thereby misleading the user. In 100% of the cases I saw, it was not a missing package, but a method call on something that should have been a blessed ref, but wasn't.",1527026840.0
scottchiefbaker,"Things of note:

1. [In-place editing is now safer](https://metacpan.org/pod/release/XSAWYERX/perl-5.28.0-RC1/pod/perldelta.pod#In-place-editing-is-now-safer)
2. [Sort algorithm can no longer be specified](https://metacpan.org/pod/release/XSAWYERX/perl-5.28.0-RC1/pod/perldelta.pod#Sort-algorithm-can-no-longer-be-specified)
3. [Performance enhancements](https://metacpan.org/pod/release/XSAWYERX/perl-5.28.0-RC1/pod/perldelta.pod#Performance-Enhancements)
4. Lots of [updated modules](https://metacpan.org/pod/release/XSAWYERX/perl-5.28.0-RC1/pod/perldelta.pod#Updated-Modules-and-Pragmata)

Mostly behind the scenes stuff. About what you'd expect from a mature language like Perl.",1526935733.0
ottaky3,"Take the paragraph, remove hyphens (and their unicode cousins) , remove new lines, let Text::Wrap format what's left.

    use Text::Wrap qw($columns &wrap);

    my $original = qq|It is also important to remember that Article 227 of the Treaty of Versailles provided for the constitution of a special tribunal, com-
    posed of representatives of five of the Allied and Associated Powers which had been belligerents in the First World War opposed to Ger-
    many, to try the former German Emperor ?for a supreme offence against international morality and the sanctity of treaties.? The purpose
    of this trial was expressed to be ?to vindicate the solemn obli- gations of international undertakings, and the validity of interna-
    tional morality.?
    |;

    $original =~ s/-( |\n)//msg;
    $original =~ s/\n/ /msg;

    $columns = 40;

    print wrap('', '', ($original));

Prints ..

    It is also important to remember that
    Article 227 of the Treaty of Versailles
    provided for the constitution of a
    special tribunal, composed of
    representatives of five of the Allied
    and Associated Powers which had been
    belligerents in the First World War
    opposed to Germany, to try the former
    German Emperor ?for a supreme offence
    against international morality and the
    sanctity of treaties.? The purpose of
    this trial was expressed to be ?to
    vindicate the solemn obligations of
    international undertakings, and the
    validity of international morality.? 


",1526831660.0
Grinnz,"I'm not sure exactly if this is what you're looking for, but [Mojolicious](https://mojolicious.org) can be deployed as a persistent daemon process that can serve requests asynchronously (including websockets) with the help of its built in event loop and promises. It's also one of the most popular web frameworks in Perl.",1526858647.0
nofretting,"I found https://metacpan.org/pod/Continuity
",1526831246.0
sigzero,"Congrats on publishing another.
",1526949083.0
caffeine314,"How is Selenium different from PhantomJS?

Can I use Selenium + XPath for web scraping?",1527392469.0
Grinnz,For learning resources check out the tutorial site from the sidebar: http://perl-tutorial.org/ as well as https://learn.perl.org and https://books.perl.org depending what you're looking for.,1526683898.0
barryoff,"I've said this a few times on here. there are websites made exactly for this. https://alternativeto.net/software/codefights/ . i use codefights.com (FYI i dont work for them) , i'd been coding in perl for about a year or so. these little challenges made me far more nimble at my real projects. As for scripts, if you using *nix, i recommend getting comfortable for Bash too.",1526730443.0
reggie-drax,*sigh* how do you format code in here again?,1526716132.0
reggie-drax,"I used to use Perl to process the output of Unix commands, for instance, before top was available, I wrote a script that ran ps \-ef and displayed the top twenty processes, then top came along and I turned the output of iostat into a histogram style graph showing disk activity \- updating once a second.

Run the command ""on the end of a pipe"", read each line of output and do something with it.

Disclaime: Code may be completely untested. Possibly.

E.G.

while\(\){

  open\(PS, ""ps \-ef|""\);

  while\(\<PS\>\){

if\(/line is interesting/\){

fiddle\_with\_it;

print;

}

  }

  close PS;

  sleep 1;

}
",1526715823.0
Grinnz,"Yes, anything within the parentheses after the subroutine name is passed as arguments. These are accessible within the subroutine from the special `@_` array. Note that passing a hash directly like you did will *flatten* it, which means the subroutine will not receive the hash but a list of keys and values (which you can assign to another hash); this also is what happens when you return a hash. If you want to retain the hash structure, you want to pass and return it as a [reference](http://mvp.kablamo.org/basics/references/) (which is actually how you passed it to Data::Dumper in this example), but both passing as a reference and as a list of the contents will work, you just need to make sure you stay consistent.

There are lots of tutorials on http://perl-tutorial.org/ that have good info on this like [MVP](http://mvp.kablamo.org/basics/functions/) but here's the basics:

    # passing as ref
    sub get_hash {
      my %foo = ...;
      return \%foo;
    }
    sub pass_hash {
      my ($hashref) = @_;
      my $value = $hashref->{key};
    }

    my $ref = get_hash;
    pass_hash($ref);

    # passing as list
    sub get_hash {
      my %foo = ...;
      return %foo;
    }
    sub pass_hash {
      my %hash = @_;
      my $value = $hash{key};
    }

    my %hash = get_hash;
    pass_hash(%hash);",1526668066.0
LearnedByError,"Either you have typos in what you posted or you don't understand the fundamentals of perl's subroutines.  I suggest you Google perlsub. This should take you to perl subroutine documentation. 

If that doesn't answer your question, please late a short, but representative example of of your code showing what you think should work. This code should read from to to bottom so that we can test, modify and return to you.

Hth, lbe",1526668282.0
Grinnz,"According to http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF 2 can mean a syntax error or a permissions problem, but of course it could be anything else. Taking a look at [the test file](https://metacpan.org/source/DFARRELL/Test2-Tools-SkipUntil-0.03_2/t/03-skip_all_until.t) I confirmed that 2 is the error code resulting from Perl failing to load a module.

This is probably because you are using `system $^X` to execute a new perl interpreter which does not maintain the current interpreter's `@INC`. You could try a trick more like https://github.com/Grinnz/Unix-Groups-FFI/blob/master/xt/author/sudo.t#L12 (but note I usually only do this in author tests, because it can fail if there are too many or too long directories in @INC, or if @INC contains relative paths and the directory has been changed, etc)",1526667268.0
waterkip,"Maybe you are not allowed to run a sub process from the other box? Maybe there are some shell env settings that mess with your system() call. The path, perl5lib etc isn't set correctly?

What happens when you test it with a Dockerfile locally? https://hub.docker.com/r/library/perl/tags/has 5.8.9 threaded so you could see if that is the problem or not.

And from the docs of system:

Alternatively, you may inspect the value of${^CHILD_ERROR_NATIVE} with the W*() calls from the POSIX module.",1526665197.0
thehalfwit,"**What!?**

Oh, they're working on metacpan.org to replace. Looks like somebody's headed to a well-deserved retirement.",1526536126.0
allak,"Goodbye, and thanks for all the fish.

I truly spent uncountable hours on that site back in the days before metacpan.",1526545303.0
briandfoy,We're now trying to update all the links in Perl.com. That website is in GitHub and there's an [issue that lists all the affected articles](https://github.com/dnmfarrell/perldotcom/issues/77). Fix a couple and submit pulls requests.,1526570634.0
jjolla888,It has a nice choice of syntax highlighting which you don't get on metacpan.org .. I wish they adopt it before it dies,1526544459.0
Excalibor,"It was a truly life\-savior and it deserves a high place in the History of the language and the community.

Cheers!",1526568205.0
a-p,"Personally I’m puzzled by the lack of MetaCPAN Google juice.

Sure, there’s all the old links to s.c.o boosting its ranking. If it was 2013, I could buy that that puts a ceiling on MetaCPAN’s SEO.

But when I search for Perl stuff on Google, MetaCPAN is often not just second or third place, it’s not even on the map. At all. I don’t think that can possibly be because of s.c.o.

I mean heck, when GitHub renders POD, module links go to MetaCPAN. That should be a hell of a lot of Google juice right there. And yet somehow it’s not doing much for MetaCPAN.

Given the facts of the situation I cannot buy that the reason is something other than MetaCPAN itself. I have no idea why that would be the case. Nor do I have reason to believe it is unfixable, though I don’t know how.

However, I therefore cannot believe that killing s.c.o will improve whatever MetaCPAN’s primary SEO problem is.

So if we try to 301 s.c.o to MetaCPAN, even if this does boost it, the problem won’t be gone, so the Google juice won’t transfer 1:1.

The bottom line I expect is that Perl module related Google search results will thus tank quite a bit as a whole. Let’s just say that I’m already pessimistic about the relevance of Perl given what I’ve been seeing in the job market lately, so imagining this outcome makes me a little queasy.

If we *are* going to kill off s.c.o, can we postpone that until after someone figures out why MetaCPAN continues to rank so poorly? (Do we have any in with anyone in even the vicinity of the Google search team who could maybe tell us why for real?)",1526713693.0
davorg,[This blog post from 2013](https://perlhacks.com/2013/01/give-me-metacpan/) has some suggestions for how to redirect any CPAN links you click to MetaCPAN \(so you can get the full experience before the site implements the redirects itself\).,1526571558.0
cmcjacob,What does this mean for people that install modules via cpanm? ,1526599465.0
Grinnz,"First you need to turn that bitstring into the bytes that represent the float:

    my $packed = pack 'B32', '01000011011011111011111111000100';
    # or from the integers you started with, which are 16-bit:
    my $packed = pack 'nn', 17263, 49092;

Then you need to extract the float represented by those bytes. Since you know it's an IEEE-754 single precision float, this seems to work:

    my $float = unpack 'f>', $packed;

See https://metacpan.org/pod/perlfunc#pack - it's very difficult to keep straight and I still mostly just stumble through it until it works, but it's exactly what you need for these sorts of operations.",1526513967.0
sunburnd,"my @bytes = ( 0xC2, 0xED, 0x40, 0x00 );
my $float = unpack 'f', pack 'C4', @bytes;

Or if the source and destination have Different endianness.

$float = unpack 'f', pack 'C4', reverse @bytes;

On my phone so not tested and a guess based on IEEE-754 numbers.",1526515286.0
BLOKDAK,"You could write a program that submits your binary to the form on those online converters and then scrape the answer from the HTML.

(Mostly joking... But it would work)",1526512095.0
Grinnz,Great overview and explanation of why it's necessary. This was done in [Perl 5.18](https://metacpan.org/pod/perl5180delta#Hash-randomization) as well.,1526506597.0
dgryski,"SipHash1-3 should be sufficient for hash tables and is significantly faster than SipHash2-4, the default.  (Rust and Perl5 now both use Sip1-3).",1527094875.0
zoffix,"The collection contains `Mojo::DOM` objects, each representing one found `ns2:msisdn` element. So you can think of one `Mojo::DOM` object containing a tree of other `Mojo::DOM` objects and methods like [`->find`](https://metacpan.org/pod/Mojo::DOM#find) and [`->at`](https://metacpan.org/pod/Mojo::DOM#at) find you many (and you get a `Mojo::Collection` of them) or just one of those inner `Mojo::DOM` objects. And you can call methods on those inner pieces to get stuff you want. Like, in this case, the text inside the element.

You can [`->map`](https://metacpan.org/pod/Mojo::Collection#map) over the collection and get the [`->text`](https://metacpan.org/pod/Mojo::DOM#text) from each of the found `Mojo::DOM` objects.

    say for $dom->find('msisdn')->map('text')->@*;

or using [`->each`](https://metacpan.org/pod/Mojo::Collection#each):

    $dom->find('msisdn')->each(sub{ say $_->text });

If collections are giving you trouble, you can just treat them as plain array refs:

    say $_->text for $dom->find('msisdn')->@*;",1526324185.0
jbdmp,"Thanks, folks. I hope you're still feeling generous because I'm not getting anywhere. The above data remains unchanged, here's my code:

    my $dom = Mojo::DOM->new( $data );
    
    say '1';
    say for @{ $dom->find( 'ns2:msisidn' )->map( 'text' ) };
    
    say '2';
    $dom->find( 'ns2:msisdn' )->each( sub{ say $_->text } );
    
    say '3';
    say $_->text for @{ $dom->find( 'ns2:msisdn' ) };

Here's my output:

    jbdmp@DevBox01:~/temp$ ./test.pl
    1
    2
    3

Do you have any more suggestions?",1526392956.0
jbdmp,"Thanks, everyone. I now have 'collection' arrays that have information about each wireless widget.

My next question: I'm trying to find only the widgets that have a status of Active. I'm currently iterating over the collection like so:

    for my  $wireless ($dom->find( 'wireless' )->each ) {
        say $1 if $wireless =~ /<ns2:status>Active<\/ns2:status>/ && $wireless =~ /<ns2:msisdn>(\d{10})<\/ns2:msisdn>/;
        # do cool stuff here
    }

Surely there's a better way to do this?",1526484578.0
tux68,"use strict;

use warnings;

say 'no';",1526315182.0
Xaayer,Y tho,1526328717.0
FiveYearsAgoOnReddit,Whose DNA?,1526331855.0
1s44c,"The bible was written, transliterated, and altered by people. As far as I know no branch of the christian church has ever claimed it was written by g.d himself.

This is just bible codes, tea leaves, and cloud shapes again.",1526334725.0
cmcjacob,Good bot?,1526203774.0
FiveYearsAgoOnReddit,Why doesn't it maintain the login session?,1526116188.0
captainjimboba,I'd be interested in a P6 translation.,1526157424.0
grewil,"I love Perl and always will, but I must admit that these things are more elegant in Lisp.",1526107226.0
smutaduck,hopefully someone will fix the code where it says `apply($first-&gt;($val)`,1526113396.0
perlpunk,"I accidentally introduced a new bug: https://github.com/ingydotnet/yaml-pm/issues/208
Fixed in 1.25_002",1526596582.0
mpersico,"From the article:

*Now, to declare a variable:*

    $str=”My name is Akshay”;
    print “$str\n”; 

*Output: My name is Akshay*

I understand that these are simple examples, but you really should introduce

    use strict;
    use warnings;

then explain that they are IMPLIED for all future examples and make sure they would run under those statements. The example should read:

    my $str=""My name is Akshay"";
    print ""$str\n""; 

with the correct quotes. I've duped this on medium.",1525961686.0
marvin_sirius,https://www.reddit.com/r/perl/comments/8i4pvl/what_is_perl_how_relevant_it_is_and_how_to_get/,1525969168.0
Grinnz,I would recommend checking out the tutorials linked in [the sidebar](http://perl-tutorial.org); the tutorial you referenced is [not very good](http://perl-tutorial.org/rejected/).,1525969011.0
barryoff,"i suggest codefights.com , i'd been coding in perl for about a year. these little challenges made me far more nimble at my real projects. FYI there are other similar sites which can be found here https://alternativeto.net/software/codefights/",1525975898.0
jkister,write a program to give you random numbers according to [Mega Millions rules](http://www.megamillions.com/how-to-play) -- give yourself five balls between 1-70 and one between 1-25.  dont forget to take away the ball it gave you from the 1-70 before you pick another ball from that range.,1525957493.0
saiftynet,"I would do a fun program, that you could progressively extend.  The first significant program I wrote in Perl was one that drew pictures on a console window by printing ""\*""s and spaces.  It started off by plotting ""\*"" in a grid of spaces, given row and column parameters.  Then I extended the plot function into a drawline function, then circles etc, eventually creating a Logo-like script interpreter....effectively creating your own programming language. ",1525978607.0
mikelieman,Automate All The Things!,1526027397.0
davorg,"I saw this list on Medium earlier. Might be useful.

[The secret to being a top developer is building things! Here’s a list of fun apps to build!](https://medium.freecodecamp.org/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c)",1526046321.0
mpersico,"http://perldoc.perl.org/perlcheat.html is a handy reference while you are coding.  As far as a project, what kind of things do you do every day on a computer that would work nicely if automated? And if your computer is a WindowsPC, fear not:

http://strawberryperl.com

https://www.cygwin.com

https://www.bing.com/search?q=windows+linux+subsystem&FORM=R5FD4

",1526059934.0
FiniteStates,"use wget to grab a web page, parse out a number and send an email if the number meets certain criteria.

Initially do everything with system calls then convert to perl modules.

For example check powerball every day and email you if the expected value is greater than $1.",1526234090.0
SufficientBison,Thanks a lot folks. Much appreciated :),1526217279.0
ac1235,"$z == * is not valid perl code and I have no idea what you want to do there. First of all * is not a valid Perl value and also == compares numbers, which * is neither. 

In case you want to check if $z literally is the string '*', do that:

    $z eq '*'

A little tip to get quality help here: do not just say what doesn't work but also say what you have intended/expected. This might not be as obvious to us as it is to you ;)",1525935743.0
redditoni,"Change, 

    $z == *

to, 

    $z eq 'x'

and give it another try. 

""eq"" is used for string comparisons; ""=="" is used for number comparison. 

""*"" could potentially be seen in Perl as a special character as well (or interpreted as a shell command), so you'll want to quote it - I chose single quotes, and use something a little more benign. ",1525931253.0
codon011,Because your conditional is a syntax error. ,1525931087.0
Grinnz,"> Perl is not a programming language by itself, but rather a group of programming languages which are interpreted and dynamic. The family includes Perl 5 and Perl 6 and development of both languages take place independent of each other.

While the second sentence is correct, the first one is confusing since the rest of the article is only about Perl (5). I don't believe it's useful to talk about ""the Perl family of languages"" unless you're talking about the shared community and infrastructure.

Also, the examples don't use strict and warnings, abuse the `$a` and `$b` special sort globals, and are invalid syntax because the quotes got converted to smart quotes in whatever editor the author used. I can't recommend that anyone read this.",1525887762.0
sigzero,"I wouldn't have said ""more powerful"". That just invites attacks. Articles on Perl should just show it.",1525874025.0
saiftynet,"Minor code error in array example ( `scalar @array` should be `scalar @days` )  unless demonstrating that size of an undefined array is 0. Nice intro for those who have never heard of Perl, though.",1525890784.0
bart2019,"The article claims Python is the reason for the decline in popularity of Perl. What bullshit. Python is almost as old as Perl.
",1525877036.0
,[deleted],1525865029.0
Grinnz,"This is how I would get started using [Mojo::DOM](https://metacpan.org/pod/Mojo::DOM), a parser with CSS-based traversal:

    use Mojo::DOM;
    my $dom = Mojo::DOM->new($html);
    my $forms = $dom->find('form'); # the CSS query 'form' just matches any form tag in the document
    foreach my $form (@$forms) {
      # $form is a Mojo::DOM object that stringifies to the form tag and its contents
    }",1525817326.0
ew73,"Do not use regular expressions.  You didn't say you were, but don't think about it.

Use HTML::TreeParser or a similar parsing module.  The docs are super helpful, be sure to read em first.",1525807496.0
FiveYearsAgoOnReddit,"> I seem to find that input tags can appear essentially anywhere and just refer to a form so I'm not sure whether this will be enough?

These days because of AJAX there may well be input tags or other form elements which are not within `<form>` and `</form>` elements. If that's true of the code you're working with, basically you're screwed. 

But it doesn't sound like that's the case, because you were asked to extract the forms, so let's assume it's going to be OK.

Don't use regular expressions to parse HTML … is good advice.

But if you're in a real hurry and/or you're having module trouble, you want to:

* read all the HTML into one big scalar variable
* match `/<form[^>]*>.*?</form>/g`
",1525813678.0
petdance,"Why are you scraping the <form> tags?  What will you do once you have them?  Are you going to do form submissions back to a web server?  If so, go look at WWW::Mechanize which will take care of all that for you without having to parse anything yourself.",1525887258.0
egency,"Thanks to everybody! I went with the regex since I figure I can fix it in post, but I need to get this done now and don't strictly need to parse anything at this point. The points about Mojo::DOM and HTML:TreeParser are well noted however, I'm going to look into them now that I have a bit of breathing room again. :)

You guys saved my arse! :)",1525826086.0
briandfoy,"That will be your entire life of programming and not just in Perl.

But sometimes you'll find a module that almost does what you want and you could have saved yourself a lot of time by doing it yourself.

You usually don't find out which situation you had until you've done all the unnecessary work.",1525782943.0
deusnefum,"The opposite happens too. You find a cpan module that seems to do exactly what you want. You fiddle and fight with it, wasting hours and then finally realize this module ins't going to work and it isn't *that* hard or *that* much work to just roll your own solution.",1525795373.0
liztormato,"I've learned very early in my career that you make your life a lot easier if you make it about the journey, rather than reaching the goal.

So, whenever you find out that you could have saved yourself a lot of work, ask yourself: what did you learn from doing the work, and what did you learn from finding out you didn't need to have done it.",1525783539.0
northrupthebandgeek,"Not in Perl, but once upon a time I had the brilliant idea of writing a module in Elixir that would implement the `X-Clacks-Overhead` header for Plug-based applications.  To be clever, I even decided to pun on it a bit and call it ""ExClacks"".

Well I tried to upload it to Hex.pm, only to get an error saying a package with that name already exists.  Turns out there was already an ExClacks package that did the exact same thing as mine.

On the plus side, it was fun writing it.",1525784133.0
saiftynet,"Constantly.  But then I learn.  Most people do things better than me, in which case I know what to do in the future.  Occasionally I can  do things better...in which case opportunity to request a pull",1525785289.0
grewil,"Yes indeed. For interesting tasks, I almost hope that there is no ready module for it, even if it would mean I would save time using it. Nowadays I mostly work with JavaEE, and it almost feels like I’m not a programmer anymore, as all I do is to piece together ready modules and frameworks in an IDE that does much of the gluing for you. A bit boring actually.",1525790118.0
Cybernicus,"Heh, heh! It happens frequently.  Sometimes I'll also write some code only to find later that I've already written it before some years previously, and had forgotten about it.  (Periodically, I'll find old code and integrate it into my archive.  When looking for the 'best' place to put it, I'll occasionally find a totally different program that does basically the same thing.)",1525793389.0
DontwakemeUp46,Thank you for your answers.,1525800303.0
iarna,"I have a dear friend who spent literally years being paralyzed by these thoughts. As folks say, this is inevitable. Yes, do a search for something that already meets your needs, but don't let that consume you. Certainly, don't spend more time searching for something that it would take to write it!

If the libraries you do find are under documented or are a poor match for your use case, don't feel bad about just moving on with your own implementation.",1525809256.0
PhesteringSoars,"I had this boss one time . . . \(They're like ""Hold my beer and watch this."" stories . . .\) . . .

He wanted us to use the pre\-built modules to ""save time"" writing a bunch of reports.  But after we'd have 98&#37; of the project done, he'd always throw in one late requirement like, ""We need an Asterisk \* between the Actual and Standard Efficiencies on the report, if the Actual is more than 2&#37; off \(higher or lower\) the Standard.""

Invariably, the ""pre\-built module"" wouldn't allow that, and we'd either spend more time trying to edit/rebuild the ""time saving"" pre\-built module, to do that one exotic thing, or just give up and write the report line the hard way.

My point is, ""pre\-built"" things \(of any type\) are only valuable, as long as you are willing and able to adhere to what they were pre\-designed and originally intended to do. As soon as you start to veer off the original design, you'll either pay for it in writing the exception code, or pay for it \(100 times over\) later, when the pre\-built library is updated, and it breaks all your custom edits.",1525813595.0
dallaylaen,"Happens to me all the time. 

I think an attempt at solving a problem on one's own is crucial to understanding the underlying logic, caveats, and limitations of a stock module that would later fit the bill. 

It would also save from an ""all you have is a hammer"" situation. That happened a lot, too - trying to adapt a module that says it does what I need, only to find out later that my code around it exceeds the size of an ad-hoc solution.

Or, as some guy on some Russian forum said long ago: Add $$$ to your salary expectations if you had the wit to write a framework. Add the same amount again if you had the courage to throw it away.",1525867980.0
petdance,"> has anyone ever written code/program, only to find out later on that there was a module available in CPAN, which would have saved you tons of work?

Sure, but then I learned to scour CPAN, too.",1525887314.0
daxim,"I've recently used it like this:


    … CFLAGS=""-g -finstrument-functions"" …

    uftrace record ./a.out ; \
    uftrace dump --flame-graph | \
    flamegraph > uftrace.svg",1525706383.0
tux68,Is this somehow specifically Perl related?,1525706563.0
daxim,"See <http://seriot.ch/parsing_json.php> for context. The article was recently updated with the latest JSON RFC and also the result from the Cpanel::JSON::XS module is new in this version.

----

JSON's value is overrated by its users, mistaking popularity for quality. You can anecdotally verify that by going to your next tech meetup and interviewing people abouts its merits in comparison to formats that occupy the same problem space.

----

Now, the thing is, we would not need to be in this situation of this mind-boggling incompatibility among implementations of the format – seventeen years into its existence – if it were properly designed. The blame falls on the shoulders of format authors like Crockford and Gruber who do not make good governance for properly shepherding their creation. JSON and Markdown could be really good, but because they are the persons they are, it's impossible. 

It's one thing to adamantly say no to change requests, but throwing up one's arms and walking away after putting it into the world, never even wanting to take care of removing low-hanging design mistakes such as well-known warts, undefined behaviour and opportunities for misparsing (as detailed in the article), *but then also* blocking other people from getting it done, I find reprehensive and foul. Their irresponsible behaviour is to be exposed and they deserve to be criticised and shamed for externalising costs over many years to millions of developers.

At least Markdown has a hostile fork that gained some traction, but I can't see that happening with JSON.
",1525534458.0
atsider,Nothing Perl related...,1525458186.0
tm604,"No.

However, see https://github.com/jgm/pandoc/pull/497 and https://metacpan.org/pod/Pod::Pandoc - or use one of the formats with common converters, e.g. markdown.",1525407514.0
clamdiggin,">> When you dereference a question like this: `my %ACD = %{ $keyhash->{D}->{AC} };`

>> Does this create a copy of the hash pointed to?

It creates a shallow copy of the hash.  That means that the keys and values will be copied into the new hash.  So changing the value of a key in one hash will not change it in the second hash.

However, if you have references to other data structures in your hash, then those references will still point to the same data.

    my %hash1 = (
        blah => {
            a => 1,
            b => { foo => 'bar' },
        },
    );
    my %hash2 = %{ $hash1{blah} };
    $hash1{blah}{a} = 2;
    $hash1{blah}{b}{foo} = 'baz';

    say $hash2{a};         # not changed, will display 1
    say $hash2{b}{foo}; # has changed, will display 'baz'

As for the scoping question, perl keeps a count of how many references are pointing to a data structure.  The data does not go away until all of the references pointing to it disappear.

So in your example, if @one goes out of scope, but $ACD->{one} still points to the data in that array, then the data is still accessible.  If you then do `$ACD->{one} = [1,2]`, now the original array data disappears, and a new array is created and a reference to it stored in this hash.",1525358087.0
choroba,"TITS, or ""Try It To See"":

    #!/usr/bin/perl
    use warnings;
    use strict;
    use feature qw{ say };

    my $keyhash = { D => { AC => { key => 'value' } } };
    my %ACD = %{ $keyhash->{D}->{AC} };

    say $keyhash->{D}{AC}, ' == ', \%ACD, ' ?';  # No.

    my $ACD;  # Not the same as %ACD.

    {   my @one = qw( 1 2 );
        my @two = qw( 42 43 );

        $ACD->{one} = \@one;  # @ was missing.
        $ACD->{two} = \@two;  # Same here.
    }  # End of scope.

    say ""@$_"" for @$ACD{qw{ one two }};
",1525355993.0
MattEOates,"Just as an FYI `$keyhash->{D}->{AC}` is the same as `$keyhash->{D}{AC}`. After the first arrow the rest are assumed. For calling a function from in the hash I usually then add in an arrow `->()` to make it obvious that's happening, as just `()` in the middle of something might look like a simple access. But hey TIMTOWTDI.",1525363007.0
plainblackquy,I've never heard of G-WAN.  Can anyone confirm it lives up to the bold claims?,1525316150.0
ErikTheRed1975,"Based on a cursory examination of the website, G-WAN sounds too good to be true: faster, easier, less resource intensive, language agnostic, etc.  

Despite being active since 1999, I had never heard of G-WAN prior to today.  However, according to their website they've been around a long time.
>Since its first release in June 2009, G-WAN is the undisputed technical leader of a well-financed (20 years old) market.
Maybe this is why our customer base is so loyal since 1998.

If the technology is truly superior, and it's been available since 2009 (but they've had customers since 1998?!?) why isn't it even a blip on the Netcraft webserver stats?

It's very intriguing but something doesn't smell right.",1525317917.0
cornel,"Way too many dependencies

>  Bailing out the installation for App-genpw-0.007.

> 147 distributions installed
",1525270880.0
justAnotherCodeGuy,"I doubt you'll find anything perl specific, but that's ok, because all the things you need to learn are language agnostic.  ML is a lot of matrix math, and data clean up.

I took Andrew Ng's online class, and used octave, which translates pretty easy to perl's pdl.",1525194006.0
proverbialbunny,"Perl is a pretty great language for ML, but I don't know of any books for it.",1525229656.0
lolinux,"Apparently Perl people just like to work; they don't talk much (many Perl threads have only a few comments, if any)",1525169697.0
xeeeeeeeeeeeeeeeeenu,"For comparison, this is the [perl5 implementation](https://metacpan.org/source/ETHER/Acme-LookOfDisapproval-0.006/lib/Acme/LookOfDisapproval.pm/):

```
sub ಠ_ಠ { goto &CORE::warn }
```
",1525188809.0
proverbialbunny,👍 'Right on.',1525145466.0
douglas_in_philly,"Well, guys, and gals.....I apologize if this seems to be the wrong place for the question.  The application is all Perl, and I had been asking here before for help with the Ajax aspects of it, so I posted here in the hopes that someone--anyone--might be able to help out.  I also posted in the Javascript sub, and got some good tips over there.

Sorry to have polluted the sub, so to speak.  :-)",1525118376.0
1024KiB,"Unless the front-end is somehow perl code compiled to javascript (as I was writing this reply I found about [perlito](https://github.com/fglock/Perlito), I'm definitely going to try that), I fail to see how the *perl* sub is going to help you.",1525111094.0
Grinnz,This doesn't really seem like a problem with the Perl code...,1525110941.0
Grinnz,"Global event loops such as [IO::Async](https://metacpan.org/pod/IO::Async::Stream) or [Mojo::IOLoop](https://metacpan.org/pod/Mojo::IOLoop) can watch a socket and perform a callback when it's readable, as well as waiting on any number of other handles or timers at the same time, making it easy to integrate this with other non-blocking behavior in your program.",1525110463.0
,Maybe you use sock() and work with the IO::Socket object it returns?,1525109552.0
cowens,Can you provide an example of what you want to do with poll?,1525140049.0
flamey,"> **Mojolicious:** Due to lack of domain experts on the team, Windows is no longer officially supported.

sad :-/",1524949863.0
scruss,I guess those that missed the Indiegogo have no way of getting it?,1524948844.0
inspector71,This is very good news. Maybe my car computer project might get back on it's feet after all.,1525049075.0
mao_neko,Cool. I've always wondered if it would be viable to rewrite init systems etc in Perl and have it be the base of a Linux distro.,1524823302.0
sunshine_killer,"We need to get this as a pi image. I will try this later, looks cool.",1524855533.0
xeeeeeeeeeeeeeeeeenu,"Mandrivia's package manager, urpmi, is also written in Perl.",1524875428.0
Grinnz,"What have you tried so far?

You can use regex to identify the line that says ""start"" (this would be a simple one: `$line =~ m/^start$/`), but you don't really need it for the rest of the problem. [split](http://perldoc.perl.org/functions/split.html), [join](http://perldoc.perl.org/functions/join.html), and [sort](http://perldoc.perl.org/functions/sort.html) will probably be useful.",1524779629.0
tux68,"Lots of different ways to get there and some good ones already posted.  This one doesn't use too much magic and doesn't slurp the entire standard input into ram:

local $/='start';
while (<>) {
  next unless my (@a) = /(\d+)/g;
  print ""startEdited\n"", someFunc(""@a""), ""\n"";
}

",1524796503.0
Stiegurt,"    $/=undef;
    $filecontents = <>; #read entirety of file into variable
    $filecontents =~ s/start(((?!start).)*)/""startEdited"".somefunction($1)/gse; 
    #entire file will be in $filecontents, 

somefunction will get the numbers in a single string block including newlines (which you can easily split)",1524785554.0
byrel,"Just push each line onto an array and when you hit the next start label, run a function that arranges so the data in the array however you want, then empty the array",1524779521.0
choroba,"    #!/usr/bin/perl
    use warnings;
    use strict;
    use feature qw{ say };

    sub func { join ' ', sort { $a <=> $b } @_ }
    sub output {
        return unless @_;
        say 'startEdited';
        say func(@_);
    }

    my @numbers;
    while (<>) {
        chomp;
        if (/start/) {
            output(@numbers);
            @numbers = ();
        } else {
            push @numbers, split;
        }
    }
    output(@numbers);
 
Note that output is called twice, once after the loop end to print the last section.
",1524780244.0
Lord_Mhoram,"I'm not sure I understand your requirements.  You want a function that takes a list of numbers like `(5 6 2 8 5 2 6 4)` and returns `(1 2 3 4 5 6 7 8)`?  How do you want it to decide what numbers to return?  Should it just return the first counting numbers equal to the quantity of numbers in the original lines?  So if there are 10 numbers in the original set of lines, should the function return `(1 2 3 4 5 6 7 8 9 10)`?",1524785927.0
gillysuit,"One-liner (bash shell):

    echo 'start
    5 6 2 8
    5 2 6 4
    start
    1 2 8 2
    6 8 5 5' |   perl -0777 -wnE'($a = $_) =~ s/(?<=\d)\n(?=\d)/ /g;  @b = map { /^\d/ ? join("" "",  map { int(rand(9))} split) : ""${_}Edited""  } split /\n/, $a; say foreach @b'
",1524782349.0
tm604,"With [Future.pm](https://metacpan.org/pod/Future), I'd suggest the [fmap_concat](https://metacpan.org/pod/Future::Utils#fmap_concat) helper function. It allows you to set the number of concurrent requests to have active, sometimes useful if you want to avoid overloading the target system(s).

Futures also allow you to do something like

    sub request { my $self = shift; $self->{request} ||= $self->fetch_all_items()->on_ready(sub { delete $self->{request} }) }

if multiple things can be requesting the data at the same time, and you want to consolidate those into a single DB request without caching it indefinitely.

Do at most 4 concurrent DB queries at a time, allowing 5 seconds for each one:

    sub fetch_all_items {
        my ($self) = @_;
        return fmap_concat {
            Future->wait_any(
                timeout(5), # anything that returns a Future which fails after N seconds
                $self->fetch_single_item($_)
            )->else(sub {
                Future->done() # empty list if there was a timeout or failure
            })
        } foreach => [ @items ], # presumably these come from a method or constant somewhere
           concurrent => 4
    }
    my @results = $self->request->get;

The idea behind promises is similar, but unfortunately the API is not compatible.",1524737582.0
Grinnz,"The first question is what database you are using. Non-blocking query support varies wildly between databases, and if you can't do a non-blocking query, you're going to need to fork in order to do any of this concurrently.",1524770700.0
inspector71,Thanks for the quality answers everyone. Exactly what I needed!,1524957834.0
duskwuff,Nope. Not a thing.,1524712907.0
raevnos,    $help = 0 unless defined $specific_question;,1524621197.0
davorg,"It's seven hours since you posted your urgent request, so your deadline might have passed. But you you post a specific question, you're very likely to get useful help here.",1524641430.0
zoffix,Sure. What is it and what part of it are you having trouble with?,1524623221.0
tektektektektek,"How much money are you offering?

*update - explanation for post*: asking people to do your homework is like asking someone to mow your lawns or clean your house. It is labour - and something you're clearly trying to avoid hoping someone else does it for you.

The tech community love to *educate* and *help out* when somebody has made a clear effort to understand or try something but can't quite figure it out.

But the tech community are not your slaves/servants. It is highly disrespectful to treat them this way.

If you are genuinely stuck on a Perl problem then outline all that you've tried and what you're failing to understand. Ensure you've done a decent amount of Google-ing for your issue. Chances are - if it is Perl related - there's an article out there that explains everything.

Once you've demonstrated you've put some time and effort into the issue - others will be more willing to step in and give you the pointers you're looking for.",1524619909.0
,Create a Perl 5 script to do your homework for you.  ,1524652838.0
spore_777_mexen,"I have been playing this during lunch for a few days now. It's really good. Really, really good. It's text based so it's SFW which I absolutely love because I rarely leave my desk anyway.",1524545792.0
sunshine_killer,"So today i started building a mojo web app to see if mojo will work for my new project at work. its awesome. Perl is very alive...the world is confused on Perl 6 and the future of Perl, and i think the post got it that it has hurt Perl 5..but we all know this on /r/perl its almost a weekly post.

[Edit] I am still in favor of a Perl 5->7 release. A Perl 7 book needs to come out, I think the raspberry pi Perl book will help. I think thats where/when Python started to really take off is when the Pi offered Python tutorials and that Pi hyped itself very well.

[Edit 2]: Lets not forget that duckduckgo is Perl.",1524533995.0
Grinnz,"Rather defensive statement from TIOBE, painting Perl users as ""diehards"" starting a ""religious war"" and an out of context inclusion of an [active Perl developer](https://metacpan.org/author/STEVAN/releases)'s talk and a pointless extrapolation of a trend; as always, its index should be taken with several grains of salt.

That said, I agree with the assessment of the issue with continuing Perl 6 confusion.",1524522650.0
petdance,"I don't know why anyone bothers reading TIOBE.  It tells you nothing more than ""These things appeared in some searches more than others"".  What possible use is that information?  

I certainly hope nobody makes any sort of decisions based on the raw data and punditry.

As a moderator of /r/perl, I approved this posting.  As a participant, I downvoted it immediately.",1524532856.0
plainblackquy,"Dying since 2008, then?",1524522880.0
davorg,"I'm not comfortable with the ""religious war"" and ""diehards"" language but, other than that, I can't disagree with anything in that post.

Perl has been dying since 2005 (probably before that). Lots of people have put a lot of effort in trying to turn that around and they've certainly slowed things down, but I don't think we've done enough to stop the decline.

There is far less Perl work in London now than there was in 2000. Pretty much every client I've worked for in the last ten years has begun (or even finished) a project to move away from Perl. The only reason that I can get work these days is because programmers are abandoning Perl at a faster rate than companies are.

Of course, the Perl tools that are available get better and better all the time. But what does that matter if people outside of the community don't know that and have no interest in finding out?

Here are three questions I ask myself to judge how well Perl is doing:

* When did you last hear of a company using Perl that you were previously unaware of?
* When did you last read a general programming book that used Perl in any of its examples?
* When did you last use a new API that included Perl examples in its documentation?

For me, the answer to all three questions is ""I can't remember"".

I'm old. I'm really past caring. I'm pretty sure I can make enough of a living maintaining old Perl code until I retire. But I really wouldn't recommend anyone younger than me investing any time in it.",1524558085.0
subogero,"Apple abandoned Objective-C.

Larry Wall abandoned Perl5.",1524547420.0
crashorbit,Seems like I need to be using C more.  Oh wait!,1524523617.0
zoffix,"Here we go again. Why post this? Too good a week, what with the TauStation going public, eh? Need to bring people down? Wallow in misery as a group?

What's the goal here? I don't get it.",1524525277.0
SparkeyG,Thank you for the report and the hard work. ,1524479769.0
unkz,"How about some articles on interfacing with Python?  Calling Python from Perl, Perl from Python, sharing message queues, things of that nature.",1524498901.0
randomwordsforname,"I funnily started learning Perl 5 as a mistake originally. I was listening to a Q&A by John Carmack (the doom, wolfenstein, id software guy) where he was talking about how he started learning Lisp by rewriting doom in it. I thought that sounded cool, so I went to my local bookstore a few days later and in the programming section, I saw a book called
“Learning Perl.” For some reason, my brain thought Perl was Lisp, so I bought the book. When I got home, needless to say I was a little surprised 😂

However, I stuck with the book and now use Perl in my daily life. It’s by far one of my favorite languages, and I couldn’t see myself NOT doing it! Thanks John Carmack... I guess?",1524411185.0
tektektektektek,"> A number of times in recent weeks people say you should use Python, nobody uses Perl anymore.

People who say this are not developers - they couldn't code in C and they probably couldn't write a BASH script.

Perl offered the best of both worlds - the readable syntax of C with the power of BASH scripting - and a reasonable execution speed for a scripting language.

I've experimented with so many languages and Perl won me over because it was fast, extensible, and practical. Python, on the other hand, brought a better object model at significant cost: an unprofessional indentation scheme that made re-formatting with a pretty-printer next to impossible.

Sadly we live in a world now where we expect so little of our developers and system administrators. It is as if the world went into a race to the bottom - where ""devops"" is now an unskilled job for operators to use off-the-shelf tools and paste together the most basic of scripts. Ten years ago ""devops"" was all Perl because the scripts were advanced and maintained by skilled developers.",1524479298.0
barryoff,"I started to learn perl about 18 months ago. The work systems are running linux and i wanted to start scripting some mundane tasks.  At uni i had been taught C,PHP,javascript,java, + little bit of matlab.  

I read up on many of the big ones :- 

bash - tried it for a while, but it was too slow and awkard. took a long time to make progress, too much debugging. spent a couple of months on it. Still use it all the time, just not for scripts. 

TCL - again tried it for a while, it's OK but the capture groups for regex make it very slow going. Plus the syntax was very clunky, a scipt had to run before it crashed.

ruby - looked very nice, but not really supported on the work system. did spend a week or so learning the syntax

python - look like ruby crossed with vb6 from the naughties. I saw it very much like ruby but ruby just looked a nicer syntax. I did not like the enforced formatting on either. 


perl - finally i gave perl a try. On the internet people said it's old. but the work system was old, and this was a strength, it means all my questions would have been answered years ago.

---------------------------

 I wrote very php like code at the start. It took me about a month to get to a point where i could write scripts more than a couple of lines. Now i wish i had have picked it up earlier. The speed i can chuck something together compared to colleagues is amazing. The fact i can make a script to my rules is really a selling point for me. I'm really glad i spent the time to choose a language, not just pick the one someone said on the Internet is good.",1524491664.0
Lord_Mhoram,"I was working at an ISP in about 1995, and my boss dropped ""Learn Perl in 21 Days"" on my desk and said I needed to learn to write CGI programs so we could make web sites for people.  So I did.  It was pretty ugly back then -- CGI.pm wasn't around yet (or I hadn't found it), but there was a small library that at least parsed query strings.  Perl's come a long way.",1524432048.0
skaurus,"I was a beginner PHP developer. Thеn, quite suddenly, I ended up in a big company on a new important Perl project (as part of the team)... In six months I was a proficient Perler.

Love that language since. Too bad it got a write-once vibe from the old times. I feel like this is the reason why it is declining.",1524439383.0
RandalSchwartz,"""nobody uses Perl anymore""

In truth, there is more Perl activity *today* than during the dot com boom.  Take a look at the uploads to CPAN (many greenfield), the regular releases of Perl 5, the continued development of Perl 6, the modernization with things like Moo and Catalyst. The problem is that while the absolute activity is much greater, it's a much smaller piece of a much much bigger pie.

The biggest danger to Perl is that I know personally of managers who cannot get *enough* Perl developers, and have to switch to other technologies.  Yes, people, there are not *enough* current Perl developers. (To fix that, I can recommend a couple of good books. :)",1524948121.0
flamey,"Amen! :)

Same here. I'm not an everyday developer, but in 15 years I made countless scripts and small tools that made mine, colleagues, friend's life easier, and it was almost all made with Perl (mostly for Windows!). I've done some stuff in C#, php, JS, earlier in VB over the years, tried Python for some tasks, but whenever possible I always use Perl. Perl 5 is an amazing language.",1524404577.0
elbitjusticiero,"> The sense of pride

... and accomplishment?",1524459116.0
davehodg,"I like the scaffold. It's all there: tests, profiling, debugging, web frameworks.

And of course dealing with CSV, JSON, XML is a breeze.",1524479158.0
SinanUnur,"> ""*My passion is for Perl 5 programming language*""

Otherwise known as Perl. ""Perl 6"" is not Perl. It is something else. Given another decade or so, it may end up being great, but it still won't be Perl.",1524410395.0
leaningtoweravenger,"""nobody uses perl anymore"" — not too fast, punk 😉 Perl has still a bunch of niches in which it's the perfect tool for the job.  One of them is programming tools, code generation and wrappers on top of compilation chains which age made too complex and variegated to be managed by any other scripting language.  ",1524408031.0
hsfrey,"Why is this better than just setting a 'debug' flag, and maybe setting it by reading a command line or environment variable?",1524347745.0
elbitjusticiero,Interesting!,1524212004.0
raiph,"Parsing experts, please critique the following:

> In the strict sense, a recognizer cannot driver a compiler -- a compiler needs a parser. But recognizers can be far easier to write, and are often hacked up and pressed into service as parsers. For example, if your semantics is simple and non-recursive, you might be able to drive your semantics phase with the output of a regex engine, using captures.

If one replaces ""recognizers"" per current formal parsing theory terminology  (finite state machines that either accept or reject a string as matching) with ""recognizers-too"" per practical common sense (sufficiently powerful automata -- turing machines if necessary -- that either accept or reject a string as matching), then one can replace the above paragraph with:

> A recognizer-too can driver a compiler. Recognizer-toos can be far easier to write than other forms of parsers, and are often ideal as parsers. For example, even if your semantics are turing complete, you can easily drive your semantics phase with the output of a recognizer-too equipped grammar engine, using captures.

Hence, P6 grammars.

Is this a reasonable perspective?",1524212193.0
OvidPerl,"So, um, yeah, this is a bit self-serving, but I've been talking about this game for years and it's *finally* publicly available. The backend is entirely written in Perl using a standard Catalyst, DBIx::Class, Template Toolkit stack (we're very conservative with our technology choices because we're building a product, not a CV).

Currently it's all Perl 5.24, using signatures, and too much Moose (I hate saying that, but it's a performance issue and we should have stuck with Moo for most of our work).

I have some talks on Youtube about this. The best is probably my [Modeling a Universe in Perl](https://www.youtube.com/watch?v=UmLwYLSmTSs) talk that I gave in Amsterdam.

People keep saying ""don't talk about Perl, show the great things you can build with Perl!"" Well, here's my attempt. Give it a shot and let me know what you think.

Also, if you have any friends who are blind, color-blind, have mobility issues, or are otherwise challenged using a web-browser, please let them know about the game. We've worked hard on accessibility. So far our blind players have been very happy with it.

And the game is entirely free to play, but if you spend money (you'll see the ""Shop"" link in the upper-righthand corner), it will help keep the lights on.

Feel free to fire away with any questions you like.

Oh, and of course /r/taustation exists.",1524065561.0
,I love seeing successful examples of Perl 5 coding.  Good work.,1524127823.0
spore_777_mexen,"Signed up. It looks very, very well done. I am super inspired by your efforts.",1524131074.0
hurricup,Does it written using vim?,1524077976.0
zakame,"This is great, congratulations!

Still waiting on seeing your cats in-game though :3",1524191846.0
Chicken_Dump_Ling,I signed up. Look forward to checking it out.,1524070673.0
kuwze,Congratulations!,1524087933.0
raevnos,"So, a mud with a browser interface?",1524075230.0
davorg,"No need for regexes here. I'd use the `tr//` operator.

    #!/usr/bin/env perl

    use strict;
    use warnings;
    use feature 'say';

    # tr/// works on $_ by default
    $_ = shift;

    tr/0-9A-Z//cd;

    say;

The `/c` option ""complements"" (or inverts) the list of characters. And the `/d` option removes anything that isn't in the list of characters.

So this means ""remove anything that isn't a digit or an upper case letter.",1524058543.0
rudolfo_christ,"One easy way is this (not sure if it is the *easiest* and I doubt this is the *best* way):

    #!/usr/bin/env perl

    use warnings;
    use strict;
    use v5.26;

    my $text = shift;
    $text =~ s/[a-z ]//g;
    say $text;

Otuput:

    $ ./upperdigit.pl 'Mickey Mouse 2018'
    MM2018
    $ ./upperdigit.pl 'PJ Masks 3'
    PJM3",1524040099.0
perlancar,"Argh, the survey does not provide Back/Previous.
",1524055587.0
SinanUnur,[My observations](https://www.reddit.com/r/perl/comments/8a12lr/built_in_perls_perl_developer_survey_2018/dx2hien/).,1524137972.0
matthewt,"Damnit, it uses its own custom http://p3rl.org/Devel::Declare based signature parser. Speaking as the author of Devel::Declare, CUT THAT SHIT OUT THE KEYWORD API WAS ADDED TO CORE BECAUSE Devel::Declare IS A MASSIVE MASSIVE HACK AND ENTIRELY MADE OUT OF DUCT TAPE AND CRACK.

If you want sane signatures, look at http://p3rl.org/Function::Parameters instead.

  -- mst",1523996684.0
Grinnz,"Fair warning: lots of these ""fixes"" are controversial because of surprises or performance issues. You'd be best using this in an isolated project and making sure to consistently use it across the project.",1523991401.0
daxim,/u/nohuhu might be interested in this.,1523958783.0
saiftynet,Such things are brilliant.  What would be more brilliant is if things like this can be gradually shifted into the core.,1523988214.0
cluelessbilly,Nice module if a bit dated.,1523991868.0
digicow,"This looks really interesting, but I'm unable to get it to install using carton in an ubuntu docker container:

    Error evaling version line ' my $dummy = q#  Hide from _packages_inside()
        #; package Module::Metadata::_version::p3229;
        use version;
        sub {
          local $VERSION;
          use perl5i::VERSION; our $VERSION = perl5i::VERSION->VERSION;;
          $VERSION
        };
      ' in /carton/local/lib/perl5/perl5i.pm: Can't locate perl5i/VERSION.pm in @INC (you may need to install the perl5i::VERSION module) (@INC contains: FatPacked::25398176=HASH(0x1838ba0) /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.22.1 /usr/local/share/perl/5.22.1 /usr/lib/x86_64-linux-gnu/perl5/5.22 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.22 /usr/share/perl/5.22 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base .) at (eval 6148) line 6, <$handle> line 11.
    BEGIN failed--compilation aborted at (eval 6148) line 6, <$handle> line 11.
    
    failed to build version sub for /carton/local/lib/perl5/perl5i.pm at /usr/share/perl5/App/cpanminus/fatscript.pm line 4928.
    Installing modules failed",1523970132.0
jplindstrom,Nice to see autobox being promoted.,1523961923.0
Grinnz,"> When releasing a distribution Dist::Zilla will create a Makefile.PL file. Some developers add this to their version control system, even though they probably should not.

Absolutely disagree. Makefile.PL or Build.PL and META.json are added to the repository in order to enable contribution without requiring the use of Dist::Zilla, as described in my [contributing document](https://metacpan.org/source/DBOOK/Dist-Zilla-PluginBundle-Author-DBOOK-0.035/CONTRIBUTING.md) -- the difficulty of contributing to a Dist::Zilla distribution that does not do this is one of the biggest issues in the Dist::Zilla ecosystem. In addition it allows Travis CI to test the distribution without installing the Dist::Zilla dependencies, and the module to be installable by cpanm directly from git. This is also done by Dist::Milla and Minilla for these reasons.

Regarding having both Makefile.PL and Build.PL, this is an error if the author is primarily using Build.PL, but for [different reasons](https://metacpan.org/pod/release/LEONT/Module-Build-0.42_26/lib/Module/Build/Compat.pm#WARNING). A fallback Makefile.PL may also be generated for compatibility with perl 5.8 and older, but this should not be committed as you said.",1523992512.0
geekuni,"As the person who not only completed the courses, but wrote them too :\-\) I'd be happy to answer any questions you might have.",1523973503.0
spore_777_mexen,"I am new to Perl. I just read about CPAN and decided to try it out. I ended up using Mail::Lite to send reports generated by a web app I wrote some months back. 

Perl intimidates me. I am still reading Beginning Perl but I still feel foolish. I have written small scripts for personal use (savings management after paying bills, a database of my colleague's work lines), nothing CPAN worthy by a long shot. I still get confused and I know there are many tutorials out there which I embrace. Perldocs is amazing... I just feel dumb.

What would I like to read? Once a month, a story of how whomever is willing to share went through a tough time but ended up victorious. What lessons they learned, the discipline they put in to solve their problem.

I am still reading Pragmatic Perl Interviews and that gave me motivation to go on (yours hit home for me).

I guess, I just want to know that I am going to be okay if I keep practicing and getting inspiration from those who have been at it for far much longer than I have.",1523874717.0
readparse,"If it's one of your favorite pieces of code, it might be useful to say what it does, rather than everybody having to read the code to determine if it's an interesting problem to them.

I realize there are two comments in the code, but... if it's so useful, I assume this is a use case that you encounter quite a bit.  And by sharing it, I assume you think others have the same use case from time to time.",1523723351.0
SinanUnur,"Are you reinventing [`map`](https://perldoc.perl.org/functions/map.html) or [`grep`](https://perldoc.perl.org/functions/grep.html)?

More broadly, is the purpose of this code to select a random subset of `@temparray`?

If the answer is yes, see [Combinatorial Algorithms](https://www.math.upenn.edu/~wilf/website/CombAlgDownld.html).",1523717667.0
tm604,"This is using the bitmask from $decider to select which items to include in @temparray2? e.g. `$decider = 0b0101` would result in the 1st and 3rd?

If so, I think you could avoid the double loop and repeated `2**` calculations by using the shift-right operator instead?

    my @output = do {
     my $running_mask = $decider;
     grep {
      my $bit = $running_mask & 1; $running_mask >>= 1; $bit
     } @input
    };

(where `@input` corresponds to your `@temparray`, `@output` is `@temparray2`)",1523717600.0
davorg,"I'd recommend moving from the C-style `for` loop to `foreach`. The two examples in your code then become:

    for my $c (0 .. $#temparray)

And:

    for my $d (0 .. $c - 1)

They both seem easier to understand to me.",1523716825.0
crankysysop,"    sub fisher_yates_shuffle {
      my $array = shift;
      my $i;

      if (@$array < 2) {
        return;
      }

      for ($i = @$array; --$i; ) {
        my $j = int rand ($i+1);
        next if $i == $j;
        @$array[$i,$j] = @$array[$j,$i];
      }
    }

One of my favorite subs...

to use; `fisher_yates_shuffle(\@array);`",1523729146.0
subogero,"In the true spirit of Perl, let's play some golf:

    my $shift = 0;                       
    my @temparray2 = grep { $decider & 1 << $shift++ } @temparray;
",1524634481.0
daxim,"Good overview of what's possible. I'll add my opinion of best practices of version numbers, presented in my packaging basics talk (I deleted the stuff that was already said in the article, like underscores and v-strings):

----

Problem: CPAN always reinstalls the module

Diagnosis:

* module version number is undefined
* but `undef < 0.86`
* so it thinks it needs the update

Solution:

* give every module a version number
* same number in each module and the distro
* otherwise it is problematic to accurately specify a dependency when a distribution is split

* revision number, a literal dot as separator and a version number, altogether in
the form `y.xxx`
* `y` is a natural number, `xxx` are exactly three zero-padded digits

        revision       version
                ↘     ↙
                 y.xxx
                   ↑↑↑ zero padded

e.g.

    our $VERSION = '2.001'; # 2nd version of revision 2
    our $VERSION = '2.420'; # 421st version of revision 2

* [perlobj/$VERSION](http://p3rl.org/perlobj#VERSION%28$need%29)
* increase distro and module version numbers in lockstep
* use `perl-reversion`, part of [Perl::Version](http://p3rl.org/Perl::Version)

completely prevents:

* trailing zeros from disappearing because it's a quoted string
* the confusion about `1.10 < 1.9`
* the confusion about `5.10.1 == 5.010001`
* that ugly `v` prefix in the distro package name

fully compatible with:

* [perlmodstyle](http://p3rl.org/perlmodstyle)
* [version.pm](http://p3rl.org/version)
* [""strict"" version rules](http://p3rl.org/perl5120delta#Version-number-formats)
* [""Version numbers should be boring""](http://www.dagolden.com/index.php/369/)
* [PCP::ValuesAndExpressions::ProhibitVersionStrings](http://p3rl.org/Perl::Critic::Policy::ValuesAndExpressions::ProhibitVersionStrings)
* [PCP::ValuesAndExpressions::RequireNumericVersion](http://p3rl.org/Perl::Critic::Policy::ValuesAndExpressions::RequireNumericVersion)

incompatible with [semver](http://semver.org) (not a big loss)
",1523839347.0
perlancar,"I don't think the first segment is limited to 999, you can compare v1000.999.999 with v5000.999.999 with no problem, for example.",1523792680.0
sigzero,TMTOWTDI for version numbers too.  :),1523827985.0
grewil,"For web pages that are built withJS, I find that this package works better - it works really well as a matter of fact - as long as you don’t require headless:

http://search.cpan.org/~corion/WWW-Mechanize-Firefox/lib/WWW/Mechanize/Firefox.pm",1523636392.0
tm604,"One of my favourite WWW::Mechanize practices is ""try something else first"": the underlying LWP::UserAgent is not very scalable, so if you want to implement test code, for example, then you'll be stuck with serial processing. Contrast this with, say, Net::Async::HTTP or Mojolicious, where you can efficiently request hundreds of pages in parallel, or [the Chrome devtools protocol](https://chromedevtools.github.io/devtools-protocol/) which allows similar for pages where the JS or rendering are important.

of course, for one or two static pages, WWW::Mechanize is serviceable enough, and in that context these suggestions are helpful.",1523797327.0
Chicken_Dump_Ling,Very cool!,1523557899.0
readparse,"Wait.  Is the author of the blog post saying that ""The replacement list is longer than the search list"" wasn't intended to be part of the message?  I thought it was really cute and spent a moment thinking about what he meant by that.

And I'll tell you.

He meant that all the women in the world (the search list) could not fill the hole in his life that losing her would create (the replacement list).",1523579303.0
spizzat2,"So, he produced some obfuscated code for her, and she just ran it? That does not sound like marriage-material to me!",1523586062.0
Grinnz,Is this written in Perl? I don't see any relevance on the website.,1523396557.0
Xaayer,I'd suggest Mojo since that's what we are moving to. The cgis then become subroutines in modules that render template toolkit files. ,1523387200.0
davorg,"If you're thinking ""web apps"" and ""Perl"", you should be thinking ""[PSGI](https://metacpan.org/pod/distribution/PSGI/PSGI.pm)"". Running your code in a PSGI environment gives you three immediate advantages.

* Your code is immediately decoupled from your deployment environment. You can take exactly the same code and run it as a CGI program, under `mod_perl` or even as a separate service behind a proxy.
* You get access to great testing and debugging tools.
* You get access to the Plack Middleware ecosystem.

Getting legacy CGI programs into a PSGI environment isn't hard. There are three steps you can take.

* Use [CGI::Emulate::CGI](https://metacpan.org/pod/CGI::Emulate::PSGI) to get your existing code running under PSGI.
* Use the techniques I describe in [this blog post](https://perlhacks.com/2016/01/easy-psgi/) to move to a more ""pure PSGI"" approach.
* Rewrite your code to use a PSGI-based framework like Dancer2 or Catalyst.

[CGI::Alternatives](https://metacpan.org/pod/CGI::Alternatives) is an interesting and useful discussion of some other simple approaches you can take.",1523424370.0
sobrique,"""stop using CGI"" is hyperbole. 

CGI the library is indeed somewhat dated, and there are flaws.... But if your script is simple ish, then no one cares. 

CGI:: Simple  is an easy replacement though. I wouldn't spend too much effort on ""upgrading"" something that's stable and working. 
 
For new code or rewrites PSGI/Plack or Mojolicous are worth a look, and perhaps Dancer or Catalyst.
 
Stuff listed under CGI::Alternatives basically ",1523384586.0
northrupthebandgeek,"I'd wait a couple years.  ""Serverless"" is the new hotness right now, and it basically boils down to ""CGI scripts but with a different interface and running on AWS Lambda"" ;)

But yeah, Mojolicious and Catalyst are the typical approaches to doing ""modern"" web development with Perl.  Whether there's anything you can salvage from the legacy scripts depends on what all you're doing in each script and how you have things organized; business logic should be relatively easy to migrate, but anything directly associated with CGI mechanics will obviously be irrelevant in the new world of ""one long-running Perl program handling everything instead of spawning a bunch of smaller scripts on each request"".",1523428385.0
frezik,"Just slapping on mod_perl with `ModPerl::PerlRun` should get you a free speed boost with little to no backwards compatibility issues. Using `ModPerl::Registry` will do even better, though there may be a few more compatibility issues, especially in messy code.

Also, if you don't need threads (you usually don't, unless you're on Windows), then compile your perl without. You'll also need your mod_perl to be compiled against this version.

For the long run, you should look at the more modern web frameworks, such as Dancer or Mojolicious.",1523383532.0
avecfrites,The module Speedy::CGI gets you a dramatic speed increase with minimal modifications to your main calling script.,1523449396.0
AbstractTherapy,"I too have issues with maintaining legacy sites. Is there a best practices for cgi, or should it be completely forsaken? I ask from a security standpoint, speed has never been an issue. I just don’t see someone kicking around with my servers enough to really do any damage unless they’re basically capable of wreaking such havok anywhere should they be so inclined.",1523384035.0
username223,">  Is it possible to salvage the legacy Perl scripts?

Can you profile them?  Spawning processes to use CGI may not be your problem.  Instead, your server ""rat[ing] as 'poor' in speed"" may be due to loading lots of images or third-party JavaScript.  Modern browsers have decent profiling tools, so I would start there.",1523385431.0
readparse,"Of the feelings I have had about Perl 6, none of them have been fear.  I'll say it again:  I feel _exactly_ the same way about Perl 6 that I feel about every other new language that I haven't learned yet.

Except for one thing.  No other language chose to take on the name ""Perl,"" which is a ball-and-chain in 2018, and so I feel a sense of bewilderment at the tone-deafness of that.

But not fear.  I'm not afraid of any language.  I just don't need most of them.",1523364906.0
nohuhu,"This article is quite right stating that the language is developed by community and has been this way for a long time. What I really don't understand is why the worldwide community that has much at stake is held hostage at the whim of one man.

No, seriously? It must be obvious that Mr. Wall made a big mistake. Naming aside, the divide created in the community and handling of this divide till now (or lack thereof) is evident. From what I see it is not likely that Mr. Wall changes his mind so maybe it's up to the community to take steps to solve this problem?

Maybe the right answer is not to rename Perl 6 to something else, but rename Perl 5 to something else. Fork it, rename and move on from whatever version seems logical. The new name does not even have to be related to Perl, camels, or whatever; who cares anymore? I certainly don't as long as it's the same trusty old perl under the hood; the baggage attached to the name Perl is more of a liability than asset at this point anyway.

Say, let's rename Perl to Prune to keep the P* and all acronyms intact, just for convenience. This would both open the path for major releases and allow ditching most egregious backwards compatibility issues moving forward.

With all due respect to Mr. Wall, this situation does not seem to be resolving itself. If the mountain won't come to Muhammad...  

\* The logically following demotion of Pumking to mere Duke is of course but a pure coincidence.",1523421335.0
,"As a business and as a new coder I have adopted Perl 5.  I won't use another programming language, neither Perl 6 which is a different programming language to Perl 5.  

Perl 5 in my opinion will always be supported and there will always be Perl 5 developers around.  It appears to me Perl 6 should change its name and rebrand as something else.  ",1523604685.0
hymie0,Because 7 8 9?,1523361545.0
Grinnz,"> What I like about Perl 6 is that Perl 5 still plays a role. It is being worked on Perl 6 to execute Perl 5 code directly. Some special cases like concurrency are excluded. Perl 4 code also runs in Perl 5, so Perl 5 code should also be able to run in Perl 6. So you want to continue the Perl idea, that the business does not loose its once developed solutions, just because you install a recent version on newer systems. You can renew code, but you do not have to do it necessarily. For security reasons, I can work with the latest version of Perl without disturbing the development process of the company.

This entire paragraph (if the translation is accurate) speaks to ignorance of the current state of affairs, and an excellent example of the confusion the Perl 6 name is continuing to cause.",1523388343.0
123nige,If you have suggestions for new brand names/aliases for Perl 5 or Perl 6 - I can add them to the growing list: http://nigelhamilton.com/perl-branding-proposal.html,1523955193.0
tm604,"heh - today's sales pitch is ""it'll only take you 7 years to reach the same perl6 level as you already have in perl5"", then?

It's a bold strategy, Cotton - let's see if it plays out...",1523368636.0
mr_chromatic,"> It is said that Perl 5 is being actively developed. But that only means that Perl 5 can be made more stable and somewhat more modern. Basically architecture can not change because of backward compatibility.

> Perl 4 code also runs in Perl 5, so Perl 5 code should also be able to run in Perl 6.

Perhaps it's the translation, but I don't follow this reasoning at all.",1523375772.0
obfuscinator,"I hear a lot of proposals about forking, or having perl6 change its name because it  is not a true perl. I haven't heard the following proposal yet: Why don't we just bunny hop over perl6? Pretend like it never existed or treat it as a mistake.  Make a perl7, one that perl5 developers can get up and running within a day without feeling like its a completely different language. Have it be backwards compatible with most of perl5 just as perl4 was mostly compatible with perl5 because most syntax stayed the same. win, win. The only loser is perl6 which essentially locks them out of implementing its next major iteration. but lets be honest, no one cares about the future of perl6. ",1524092641.0
,[deleted],1523360109.0
SinanUnur,"[`use CGI::Simple;`](https://metacpan.org/pod/CGI::Simple) Describe what the program is supposed to do, then write the program to do it.

For this particular piece of noise, you might want to start with:

    $ perl -MO=Deparse -e '$c=defined$ENV{REQUEST_METHOD};sub M{$q=~s,R,$M=~s;.*\nT.*q..#;;xs,e,print($c&&
    $l,$M,$c&&$L)}seek(DATA,0,0),read DATA,$M,113245;($j,$n,$q)=$c?split""&"",(print($g
    ),$\=$b,$M=~s,<,""&"".""lt;"",ge).""&"".$ENV{QUERY_STRING}:@ARGV[3,0,1];sub b{$_=$p[#
    rand(@p)],s;($r);$s{$1}->[rand(@{$s{$1}})];eg,s;\b(a) ([aeiou]);$1n $2;ig,print
    while$n--}--$j;for($q,$n){$_||=1}$n=~y;0-9;;cd;$r=""("".join("")|("",keys%s)."")"";($
    q!~/o/)?&b:&M;$\=""\n"",$c&&print$f
    __END__
    $j--*=$_/&s||1,s;ENV;space (rent);aeiouy&&q_L__DATA__qq;#
    '
    $c = defined $ENV{'REQUEST_METHOD'};
    sub M {
        $q =~ s[R][$M =~ s/.*\nT.*q..#
    //sx;]e, print($c && $l, $M, $c && $L);
    }
    seek(DATA, 0, 0), read(DATA, $M, 113245);
    ($j, $n, $q) = $c ? split(/&/, (print($g), $\ = $b, $M =~ s/</'&lt;';/eg) . '&' . $ENV{'QUERY_STRING'}, 0) : @ARGV[3, 0, 1];
    sub b {
        $_ = $p[rand @p], s/($r)/$s{$1}[rand @{$s{$1};}];/eg, s/\b(a) ([aeiou])/$1n $2/gi, print($_) while $n--;
    }
    --$j;
    foreach $_ ($q, $n) {
        $_ ||= 1;
    }
    $n =~ tr/0-9//cd;
    $r = '(' . join(')|(', keys %s) . ')';
    !($q =~ /o/) ? &b : &M;
    $\ = ""\n"", $c && print($f);
    __DATA__
",1523307249.0
jabb422,This is the stuff that give perl it's bad rep.,1523329536.0
daxim,Provide various input data and we can deobfuscate.,1523348672.0
ermac14,well you could start with some line breaks,1523326224.0
cluelessbilly,"It's fashionable to be down on Perl. The best we can do is to keep chipping away at this attitude by actually coding something new and interesting in Perl even if it's only for github/CPAN.
Also I'd like moderators to consider the value these 'perl is dead' posts have for this board.
To me personally they add no value and I'd like to see them promptly removed.
",1523296183.0
plainblackquy,Not according to Zip Recruiter.,1523274758.0
Grinnz,"Perl hasn't cared much for the popularity contest in a long time. All that's useful for is ensuring a large community of code and resources available, and CPAN is already there.",1523303127.0
mishagale,"I know of a lot of businesses that have software which is Too Big To Reimplement - monolithic applications which handle all or almost all of their core products.

Even if perl *does* go extinct for new development, it will still be around for a long while supporting those existing applications.

Not to mention how many systems still rely on it as a scripting language - try doing `sudo rm /usr/bin/perl` on even a bleeding-edge unix system, and see how long it stays up.",1523285877.0
saiftynet,"Trouble is any language can be used to code any app.  To make Perl sustainable, one must *prove* that any app can be codedin Perl as easily as any language. Whenever I see an application coded in Python, I used to think..""hey, that could be done so much easier in Perl"".  Now with Python getting more and more modern libraries which are not in CPAN (at least not in an updated form), this may not be so certain. 

Secondly Perl's existence currently relies on the fact that is a built-in for many systems.  For Perl to survive, it must remain a built-in.  When people are able to port Perl utilities to other language, then it can be potentially be built-out, leading to the end (IMO) of it as a language.

Perl is going to survive or die by the community.  The Perl community, you and me included, could let it decline easily. Or we could make sure it remains a dependency in systems; one that can replace other scripted languages rather than be replaced by them.",1523289791.0
leaningtoweravenger,"Good!

Perl coders will be very valuable, even just for rewriting old apps in any other language (do you still have spec from 15 years ago? Maybe you need to have someone understanding it first).

Maintenance of old apps could be even more lucrative as some systems have way too many dependencies to be killed.  The same goes for other languages or systems, e.g., the run porting from Solaris to other Unixes / Linux after Oracle's moves.

I recently had to rewrite a full application from Fortran (not a math app, just old as me) to a bunch of Python scripts: it was good fun!",1523302464.0
raevnos,What alternative? Is there anything that even comes close to perl for manipulating text?,1523315411.0
ermac14,"while I am also tired of the 'perl is dead' thing, the point about the community is totally correct IMO. all I see the perl community do is complain and deflect from the perl6 issue. outside of perl-related websites and content, i haven't heard anything about perl6 for years. ",1523327521.0
,[deleted],1523292998.0
crashorbit,https://www.youtube.com/watch?v=Xe1TZaElTAs,1523312044.0
mmpqq,"perl is dead as far as well compensated employment is concerned.  The writing has been on the wall for a long time. If you are still employed doing perl, chances are it's on a project to reimplement in python or something else.",1523318236.0
drm00,nice ;) just backed the ebook.,1523360580.0
ermac14,how about you use that money to finish perl6 instead?,1523327616.0
eythian,"Over half of this site on mobile is contents page, the content itself is saying don't use ""or"" when you want ""||"".",1523221604.0
ogniloud,"I'm not sure I understand what you mean by formatting the input but if you want to use the subroutines declared in the module S17, this is how you do it:

1. The module must end with a .pm extension and must be named appropriately. Also if you look inside the module you see the following: `package HT::Conlang::S17`. The module's name is S17 and the words HT and Conlang dictate where it's located. In Linux, it could be something like this: `HT/Conlang/S17`.
If you want you can create a directory `mydir` where you can place the main.pl (for example) and the module itself. So the directory tree is as follows: `mydir/main.pl` and `mydir/HT/Conlang/S17.pm`

2. Now we're in the main.pl file and we should have the following in order to use the subroutines:
     
        use strict;
        use warnings;

        # We could have listed the module directory in the
        # standard directory of perl but we didn't so we'll use lib to tell perl 
        # where to find our module directory.
        use lib './';
		
        # Now we can use the module and export the subroutines we'll use. 
        use HT::Conlang::S17 qw( 
				split_syl 
				step_EIS_ISorth
				step_EIS_MIS
				step_Latin_PG
		);
		
		my $word = ""doctor"";
		
		print split_syl($word), ""\n"";
		print step_EIS_ISorth($word), ""\n"";
		print step_EIS_MIS($word), ""\n"";
		print step_Latin_PG($word), ""\n"";
        
        __END__
        doctor
        dokjtor
        toctor
        Doctor

[More about lib](http://perldoc.perl.org/lib.html).",1523110917.0
tm604,"Probably worth including a link to your earlier question, for context:

https://www.reddit.com/r/perl/comments/6df68a/desperate_how_can_i_get_this_perl_module_to_work/",1523115991.0
cluelessbilly,https://github.com/apache/incubator-mxnet/tree/master/perl-package,1523054630.0
JohnCub,"One way to do AI is with AIML (Artificial intelligence markup language) and in that vein, there is Program V, a parser for aiml.

https://github.com/kirsle/programv

There might be others but I'm not aware of them.


tl;dr: yes.",1523102166.0
MaxNumOfCharsForUser,"Possible? Yes, but the library support is pretty low I'm guessing. Whatever could be lumped into the category of 'AI' would require a lot of supporting code. I think Perl has some image recognition tools?",1523054750.0
proverbialbunny,"Yes.  I wrote a nearest neighbor categorizer in 2010 in Perl.  It was tons of fun and came out well!

But as another commented here, there was no library support.  I did it all myself.",1523940603.0
unkz,"I mean, I probably wouldn't.  Python is where all the action is.",1523069720.0
,I did the survey as a first year noob.,1522967304.0
jonathancast,"Oh man, this survey is all over the place.  I wouldn't take the results seriously, at all.",1523024019.0
plainblackquy,"Nice to see this.

Just FYI, before you start, make sure you've enabled JS (otherwise, you'll have to do it twice).",1523118276.0
SinanUnur,"The ""age group"" question is required. Instead, having a ""prefer not to answer"" category would increase confidence in the other responses.

The only question about Perl 6 is whether the respondent has tried it out. By not following up on whether the respondent liked it, or whether the respondent plans to sink further time into it, the question is designed so that it can be stretched to imply that Perl 6 is gaining in popularity among Perl programmers. Chances are someone who is involved in Perl enough to find this survey might have tried it. Whether they think the effort to use it is worth the opportunity cost is the operative question.

It is possible to give blank answers in ""Yes/No/Other"" questions which clearly ought to have been ""Yes/No/Prefer not to answer"" questions.

Generally, you ask identifying questions (e.g. email address) after the survey has been completed so that the respondent is not constantly thinking about what other ways the survey designers may want to associate one's identity with one's responses and use it in their marketing. The yuck effect of this approach is compounded by the fact that nowhere do they state how the results of the survey will be used, how much information will be retained etc.

Survey design is finicky business. Sometimes, just getting a single question correct (i.e., effective in eliciting a truthful and useful response) can take several hundred drafts. This seems to be the first draft. ",1523281355.0
sigzero,Is the whole of Bugzilla moving to Mojo?,1522965022.0
davorg,"Are you sure it'll be an RSS feed? I ask because people often use the term ""RSS feed"" when they actually mean ""web feed"" (which could be either RSS or Atom).

For that reason, I recommend [XML::Feed](https://metacpan.org/pod/XML::Feed). It handles both types of feed in the same way.

If you're sure about the type of feed you're getting and you're confident that it will never change - then use [XML::RSS](https://metacpan.org/pod/XML::RSS) or [XML::Atom](https://metacpan.org/pod/XML::Atom) as appropriate (XML::Feed is actually just a wrapper around those two modules).",1522931010.0
Grinnz,"You can set the cookie attributes normally, you should not violate the object's encapsulation. `$cookie->http_only(0);` See [Dancer2::Core::Cookie](https://metacpan.org/pod/Dancer2::Core::Cookie)

However I would use the cookie function itself to set this attribute as described in the [manual](https://metacpan.org/pod/Dancer2::Manual#cookie):

    cookie 'browser_id', $value, http_only => 0;",1522864557.0
clueless_developer,"In the meantime I've set my cookies to vars, and am just writing them as variables between script tags, which works for now!",1522852009.0
perlancar,"A couple of recent favorites:

* [File::fgets](https://metacpan.org/pod/File::fgets) (or PerlIO::fgets) to do fgets(), which Perl surprisingly lacks.
* [File::SortedSeek](https://metacpan.org/pod/File::SortedSeek) to do binary search over a sorted file.",1522844313.0
sobrique,"- Always `use strict;` and `use warnings;`. 
- Meaningful variable names, consistently used. (Never one letter names, unless it's 'special' variables like `$a` and `$b` in a sort)
- Format your code - `perltidy -pbp` is a pretty good default. (You can customise perltidy to 'house style' if you prefer). 
- Subroutines that stay shorter than 'a page' on screen, so they're readable in one go. (That also goes for your 'main' program). 
- Don't go nuts with ""clever"" code - perl lets you do this really easily, and it's a massive temptation - but write _clear_ code first, even if it's longer. 
- Don't prematurely optimise - write the code to be clear, optimise later if you've profiled it and it needs it (it often doesn't).
- Profile code if you're trying to get it to be fast, don't guess. 
- Use perl inbuilt functions rather than shelling out. (e.g. don't call `sed` to do a search/replace)
- Don't magic-regex. If your regex is getting complicated, decompose the problem into multiple. It's a lot clearer to have two regexes for ""must contain a letter"" and ""must contain a number"" than it is to try and glue them together into a single one.  
- Use `x` with any regexes that are looking slightly complicated, and format and comment them. 
- you will forget what it does in 6 months. Make it easy to come back to. This will also help other maintenance programmers. 
- Use standards for data interchange. JSON is a pretty good way of passing data between programs. YAML is great if it's being written to or read from a file. XML is almost certainly overkill for what you want. (Whatever it is. XML is extremely powerful, but it's also potentially very complicated). Storable might look like a good idea, but it rarely is because it's perl (and sometimes version/platform) specific. 
- Use source code control. git isn't hard. 
- Get to grips with perlcritic - it's sometimes too fussy, but it's customisable. So take your time to customise it, and then implement a mechanism where any code 'commits' need to pass critic first. 
- Whilst you're at it - run incoming code through a `perltidy` filter, so you're rarely ""rewriting the whole thing"" because every line has gained an indent or something. 
- Use modules - there's a lot of prior art, and they've probably solved your problem already, more robustly and cleanly than you can (and maintain). 
- Write modules - if there's 'shared code' or 'shared values' then stick them in a module - but be selective about this. Don't cargo cult everything you ""might need"" into a single module. 

",1522744034.0
Grinnz,"Most of my stylistic suggestions would be represented by what these policies I wrote check for: https://metacpan.org/pod/Perl::Critic::Freenode

More generally, modularity (in organizing your code in actual modules, as well as in subroutines that do specific straightforward things) and testing (which is easier with more modular code) are qualities important to keep code maintainable that are often skipped when trying to hack up solutions quickly. You can always add them/refactor later but it's even better to start with them in mind.

Don't be afraid of CPAN. Set up a mechanism to be able to install and deploy with any CPAN modules you might want to use in the future. [Carton](https://metacpan.org/pod/Carton) is a good way to manage this and pin your dependency versions to avoid surprises (and carton exec is not actually needed, see https://github.com/perl-carton/carton/issues/197). Alternatively you can use a package management system like RPM.",1522741600.0
digimer,Prioritize readability over cleverness. ,1522763790.0
briandfoy,"Many people focus on the syntax and what you type, but I'd rather you wrote baby Perl in a well organized and thoughtfully architected bit of code than the other way around. 

Instead of thinking at the statement level, organize the much larger picture. Make it clear why you are doing something (task, not syntax), how it fits into the sequence of the steps around them, and why it's as complicated as it should be. If it's hard to explain the process, the code is going to be really ugly. Get that right before you start coding.  It's easier to later go back to improve statements than it is to change the organization or process. 

I recently worked with a programmer who had a program that was a mixture of Perl and calls to shell commands with backticks. That's not a good general practice but the process made sense. We later went back and dealt with the backticks issues. Sometimes there was an easy Perl fix and sometimes there wasn't. But it was very clear what he was trying to accomplish. That's much more valuable.

Don't give programmer opinion too much weight in your business decisions. You want good, maintainable code but you also want to make money and contribute value. ""Perfect"" code or style often doesn't increase either of those.

Finally, don't try to make big changes right away. Stay on task. Try a few changes, such as adding strict or warnings to a couple of files. Fix any problems. Later, go a bit further. Don't break everything at once!",1522778961.0
codon011,"`use strict` but don't declare everything at the top of the file or with `use vars`. That defeats half the purpose of strict. 

`use warnings` and fix the source of the warnings. Code should not produce warnings; if it does you didn't account for something. 

If you generate SQL statements from code, always prefer bind parameters rather than quoting.  Don't become the vector through which SQL injection occurs. 

Write meaningful unit tests for your code. Keep them to date. Run the tests. Fix any that fail. I would suggest starting with the test but that can be a difficult mindset to get into properly. 

Sanitize all user input. ALL OF IT. I would say ""trust but verify"" but that's wrong. ""Trust nothing and verify everything. """,1522751545.0
wsppan,"Do people still use Perl::Critic? I found that useful. Also, chromatic's Modern Perl and Moose.",1522771157.0
,"As a still relatively new noob to Perl, thanks for all the feedback on how to code well in Perl 5.  I am sure this feedback will be useful for many new people to Perl in years to come.  I am thinking about all the feedback, and am thinking how to apply it as I code all my business processes in Perl 5.  This has already helped me improve my code for something I wrote last night.  ",1522830198.0
subogero,"See suggestions of u/sobrique below. Very good advice.

Some of my own advice after 9 years Perl development. Perl if often criticized for being line noise, mostly due to `$@%` sigils. Few people know you can remove so much line noise of other kinds: quotes and parens.

Learn the precedence of *commonly used* operators, avoid parens if unnecessary

    if ($foo == 2 && $bar == 42) # e.g. (un)equality operator always take precedence over logical ones

Predeclared function calls don't need parens, unless it's ambiguous

    open FH, $filename;

Addressing hashes auto-quotes keys, if consisting of word chars

    $foo{bar}
    $foo{'baz-spam'}

Use the fat-comma `=>` operator in lists, e.g. key-value pairs, it auto-quotes strings in front of them

    %nums = (one => 1, two => 2, three => 3);

Use `qw` to define a list of strings

    @words = ('foo', 'bar', 'baz', 'spam'); # ugly like Python
    @words = qw(foo bar baz spam);

Use `qq` to define a double-quoted string containing double quotes, instead of escaping them

    $xml = ""<node attr=\""foo\"">$variable</node>""; # Ugly
    $xml = qq(<node attr=""foo"">$variable</node>); # Nice

Use here-docs for defining multi-line strings, instead of concatenating multiple ones. Also helps other languages embedded in Perl to stand out:

    $sql = ""select * from foo f\n"" .
        ""left join bar b on f.baz = b.baz\n"" .
        ""where f.spam = 'egg';"";

    $sql = <<EOF;
    select * from foo f
    left join bar b on f.baz = b.baz
    where f.spam = 'egg';
    EOF

Git friendly coding, taking advantage of Git's auto-merging where possible, even if it's contrary to [perlstyle](https://perldoc.perl.org/perlstyle.html):

In long lists of key-value pairs, each pair stands alone on a line, and each is closed by a comma, even the last one, and the pairs are NOT lined up. Thus you never need to modify lines containing existing key-value pairs, helping to merge engine to find context for changes.

Original code:

    aliens(
        'Casey Stoner' => 27,
        'Marc Marquez' => 93,
    );

Changed on one branch:

    aliens(
        'Casey Stoner' => 27,
        'Jorge Lorenzo' => 99,
        'Marc Marquez' => 93,
    );

Changed on another branch:

    aliens(
        'Valentino Rossi' => 46,
        'Casey Stoner' => 27,
        'Marc Marquez' => 93,
        'Johann Zarco' => 5,
    );

Merged automatically

    aliens(
        'Valentino Rossi' => 46,
        'Casey Stoner' => 27,
        'Jorge Lorenzo' => 99,
        'Marc Marquez' => 93,
        'Johann Zarco' => 5,
    );

EDIT add the obvious:

Functions should fit in a 80x50 box. This may sound sooo 20th century for many, but it's not. It makes your code so much more readable and understandable. Most projects are complex and a much better use of a fullHD screen resolution is editing 3 files vertically split at the same time.",1522747499.0
TWasell,"Short answer: write *idiomatic* Perl.

Slightly longer answer: read [Higher-Order
Perl](https://hop.perl.plover.com/) or just about anything by the great
masters of the craft.
",1522753983.0
crashorbit,Write code that you will be able understand when you come back to it in 6 months or 6 years.   ,1522775486.0
smutaduck,"`use warnings; use strict;`.  Or `use Moo;`.  If learning Moo, learn about lazy attributes early, and use them often.  This has the effect of making it easy to create objects with the minimum number of things required to make a `->new` one.  And really makes extending/modifying things later easy.  Learn about lexical scope, and use it to your advantage.  ",1522745610.0
vtivti,Try kritika.io too. It has some preconfigured rules that you can later adjust.,1522785141.0
deakannoying,"Lots of good suggestions here.

My snarky $.02 is that many Perl 5 devs are going to make fun of you or be patronizing, no matter [what you do](https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it).

Looking at you, [PerlMonks](http://perlmonks.org/). I started coding in Perl in y2k, then moved to languages where there are fewer jerks in the community.

I love Perl. I still have applications written in Perl written in 2004 running in various countries around the world, processing massive amounts of telecom data. Hopefully the community has lightened up a bit.",1522765546.0
jonathancast,"`use strict;` and `use warnings;` at the top of *every* file (except the ones starting `use Moo;`, `use Moose;`, or `use Moops;`).

Run `perlcritic -5` or `-4` regularly.  If you want to go further, examine each coding practice and follow it.

Use the `/x` flag on complicated regexes or, better, don't write them in the first place.

Use CPAN.  Particularly, use modern libraries, like `Moo` / `Moose` and DBIC (`DBIx::Class`).

Use a recent version of Perl, and learn its features (subroutine signatures, `->@*` de-referencing, etc.).",1522795520.0
smells_like_bleach,"While you're reviewing, explain your code to your sock puppet. If you can, and you're proud of it, it's good. If your sock puppet doesn't get what it's doing, you're writing bad code.",1522796492.0
nagaabroadsila,"For starters, as much as possible, utilise only up until column 80.

Adhere to a coding standards. I myself use a modified version of the Drupal coding standards. ",1522741426.0
flamey,"I wonder if time would be better spent trying to figure out why you ""active state modules"" don't work on strawberry, and fix them to work on strawberry/both.. I didn't have any problems making Prima and Wx work on the recent strawberry releases (Win x64), and since working with GUI in Perl is always a pain, I'd get other parts working to reduce pain points.",1522738728.0
Grinnz,"I'd say that especially given you are trying to do this on windows, local sockets are definitely not too much for what you're doing, as anything less will probably not work. If they were forked from the same process you could easily set this up with [IO::Pipely](https://metacpan.org/pod/IO::Pipely) but since they are unrelated processes you will have to do it a bit more manually.

Another way to go about it would be to use an intermediary process that both processes can easily interact with, such as a [Mercury](https://metacpan.org/pod/mercury) websocket server or Postgres or Redis pubsub (depending what you're able to run on Windows, of course).

From another angle, what modules are you having trouble with on Strawberry Perl?",1522736231.0
MattEOates,$0.02 Once you're already in the world of coordinating two programs separating logic from GUI that much just use a web interface and standalone webapp packaging its own server. It's a lot easier with far more support in the world than a perl binding for a native GUI library. In Perl 6 you could use a [single page app via Cro](http://cro.services/docs/intro/spa-with-cro) in Perl 5 Mojolicious?,1522765792.0
liztormato,"OOC, why can't you give it a GUI in Perl 6?",1522734412.0
simcop2387,"Sys::Linux::Syscall::Execve! That's me! As it documents, it's mostly useless to anybody who isn't using Seccomp or similar sand boxing technologies.  I'm using it as part of App::EvalServerAdvanced that powers https://perl.bot/ and the perlbot IRC bot on freenode, magnet and oftc.",1522736317.0
Grinnz,https://shadow.cat/blog/matt-s-trout/mstpan-1/ goes over them pretty well.,1522739429.0
smutaduck,"1.  Perl 6 taking 20 years and being seen as ""The next version of perl"" for the first 10 didn't help.
2.  Really seriously crappy .com boom code giving it a bad rep.
3.  Perl is easy to learn, but has a lot of depth - so it's hard to master.  In a crowded landscape where you're expected to have fluency in javascript, python, ruby, PHP,  go, java and others, that's a tall ask, so in many environments it's fallen off the radar.
4.  Perl's provides a programming environment that's highly pragmatic - and thus lacks the theoretical purity of other languages (or is not filthy-dirty-pragmatic like PHP).  So academics - i.e. influencers of students - tend to really hate it.  Managers can be not fond of it too, because you can do a lot with a small team of competent perl developers, so understanding and demonstrating your staffs' productivity can be difficult. 

5.  Perl's biggest strength is also its biggest weakness - 'There's more than one way to do it'.

However, for any 'normal' programming task perl is absolutely fine, and will give any other language a run for its money, (pragmatic)performance wise, readability wise and reliability wise.  Personally my perl skills have been in such high demand over the last 10 years I've not had the opportunity to learn another language in the same depth.  I'd quite like to do so - as long as said other language wasn't java or c#",1522657935.0
ThirdEncounter,"Long story short: because of an implementation of Perl 6 arriving way too late, and because of Perl 6 being perceived as a completely different language from Perl 5.",1522655006.0
gdjfklgj,"It feels like it is not being developed anymore: that is lack of open big corporation support, like Google, Microsoft, or Facebook. Even the most impressive effort put currently at core development, that is MoarVM back-end in Perl6, feels like a three souls hobby project with big trolling issues, that could get a huge use of 10 fulltime paid developers.

In fact it is the whole free software concept and perhaps internet as a whole that has been mostly taken over. But it is very difficult to grasp at a short sight.",1522673030.0
saiftynet,"Perl is too clever,  too flexible, too powerful, too extensile with CPAN modules. Sounds like no reasons to give on Perl? Well because TIMTOWTDI, people code in Perl differently. This gives the impression of obfuscation. People prefer simplicity over cleverness or power.",1522657407.0
audioen,"Here's my laundry list of what currently is pretty bad in Perl:

* Low performance
* High memory usage
* Lack of threading
* obtuse syntax with tons of {} %@$ crap
* the named-vs-referenced container dichotomy, e.g. @foo vs. @$foo,
* lack of standardized exception model, and no stack trace when program dies,
* too many language shortcuts / odd features that keep on surprising even people who already use the language.

My favorite example of the last category:

    $ perl -wle 'for my $x (qw(foo foo)) { print ""yes"" if $x =~ m?foo?; }'
    yes
    $ perl -wle 'for my $x (qw(foo foo)) { print ""yes"" if $x =~ m/foo/; }'
    yes
    yes

Edit: To answer the question, most languages written in the 90s and after just do not have shortcomings like the above. They can be performant, have compact object representations, support threading, and have a syntax that is easy to read, e.g. instead of ungoogleable operator gibberish, you have a plaintext function or method call which can even describe its own intent in its name. Language purists would yawn at list like above but these already make a huge difference to a working programmer who doesn't care about anything fancy.",1522682901.0
,"Thanks for all the answers.  I think it is the freedom and creativity that the Perl language gives me which makes it appealing.  I am also a guy who likes simplicity in life, so it is only one language I will work with, one that satisfies my needs.

I won't use Perl 6 as it is a different language.

Perl 5 is and will be the principle language that my business uses.  ",1522665027.0
pfp-disciple,"My experience from colleagues: 

* perl is perceived as being less maintainable
* Python is perceived as having a much more robust suite of libraries

A former colleague of mine, who was quite fluent in perl (although he tended to write ""c-like perl""), spoke of learning Python and appreciating its being high-level. He also said ""I can go back six months later and understand what I wrote.""

In my experience, I learned Python because I had trouble finding libraries to format my output to my liking. I was able to, in about a day, learn Python and write a program that reds an Excel spreadsheet, extract and correlate data, and then present formatted data. 

I still like perl and will likely continue using it when I need to do ""system level"" stuff -- a step above Bash scripts. For team-oriented things, and for maintainability, I will likely use Python. ",1522690324.0
ac1235,"No one did that here, so let me blame education. 

Can we expect people learning to code in Java to value flexibility and TIMTOWTDI-ness?
These programmers confuse there are many ways to do it with let's do it in the most fucked up way possible. 

No explicit casting between numbers and strings IMO is awesome. But I heard other smart people say it gives programmers too much freedom to make a mess. Maybe true, but I trust myself and other people I trust to get their hands at my codebase not to and use these features appropriately.

In a world where we teach students to not trust themselves and fellow coders by teaching them an orthodox language we can not expect them to love Perl the way smart hackers neither sworn to Lisp nor APL do.

The good news however: Smart people will continue to use hacker languages for hobby projects. And as these projects grow into larger businesses, Perl/Lisp/APL will still be what drives them.",1522658474.0
shagieIsMe,"My first programming job was perl back in '97 for the LAMP stack. There was a lot of neat things that I did with it back then... and clever too. I remember writing a neat Tie::Array that was backed by a database... and then undoing it because it was too clever and not something that was maintainable.

The last time I touched perl professionally was in '09 during the perl winter. The web stack was moving in other directions - especially that of Java (I'm a corporate back end line of business keep the gears of the company turning type). I write boring code - which is good. Boring code doesn't surprise people and when I pull it up from 10 years ago, it still works. I try to avoid clever code now - it takes too long to get back into the mindset that I had when I wrote it. I'll admit to one bit of clever code with annotations on an enum that I've written in the past half decade... and that is in place to force what would be runtime errors to be compile time errors instead.

I looked at perl 6... there's even a [bug report with my name on it](https://github.com/rakudo/rakudo/commit/8d04bec). I really want to like the language - it makes me think about some things differently... and here's the ""but"". But it all feels too clever. Code needs to be reasonable - something that I can come back to later and pick up again and continue on with minimal switching of the mind. Unicode operators, Junctions (as neat as they are), redefining operators... its letting me and encouraging me to write clever code.

I pull up the docs and see things from [Operators - Common Perl 6 infixes, prefixes, postfixes, and more!](https://docs.perl6.org/language/operators) that make me wonder if its gone too far. There's more than one way to do it... but there are more of them than [Java 8's list](https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html). I feel that there's more than one way is ""more than one approach"" not ""more than one way to type '+'"".

The code just doesn't feel reasonable anymore.

For what its worth, after not touching perl professional since '09, this past month I was called on to fix a LAMP stack. There's the CGI with a nice 'use CGI.pm' (the last change time on the file was from 2011). I was able to open it up, read it, debug it, and fix it in under an hour. It was straight forward, sensible, and reasonable code. I shutter to think what it will be like in another decade if someone comes by and asks someone to debug some 10 year old perl6 code and they open it up to find unicode scattered through it and trying to remember what =~= or ∘ does.

For my scripting needs now... I've been a Java coder for the past decade. When I want a script I'm more likely to fire up groovy. It runs, its stable, and it doesn't try to make me write clever code.

Sorry perl... you're just not my go to language for thought to code anymore.. and thinking in perl6 just isn't something that I'll find myself easily writing once or being able to figure out when coming back to later.

And perl5, you aren't what the industry is calling for anymore.  As I said, I've been a Java coder for the past decade. It pays the bills quite nicely and I know that if I keep up with that tech stack, I'll always have a job without having to look too far.  To pivot back to perl as a language, the jobs that list perl now are a handful of sysadmin and bioinformatics (which I don't know squat about).  LAMP isn't a stack that is asked for anymore.

Schools are turning out programmers that have a not awful fit for Java or C# shops and the industry is asking for those skills.  Building big code in Perl is certainly possible, but its harder to teach to students that only know one language.  The free wheeling thoughts that are so easy to express in perl are the anathema of larger organizations that need consistency of code and desire the ability to juggle developers from team to team or onboard more quickly.  Hiring someone out of college for perl means months of getting them adjusted to a way of thinking that was never conceived of in college... and hiring another perl programmer means months of shifting to the conventions of that stack.  It takes a lot of work to keep the scripting languages reasonable when its too easy to do things that might not be the best thing to do.

The ROI is debatable on hiring another perl coder (the only time the experienced ones show up is when another company closes... and then half of the perl coders from that company retire instead).  It is possibly better to shift that code to python (no, I don't like that language at all) or ruby on rails (ick), or powershell (which doesn't look too unperlish) and be able to hire people out of bootcamps more easily.",1522716867.0
deusnefum,"Legacy code. It's a victim of it's own popularity. Easy to pick up. Easy to say you know it. Easy to make something that works, even if it isn't easy to maintain. Hell that last one has lead to my day job--I maintain some ugly-ass perl code. (on 5.10, no less :-| ).

Give it more time and I think similar things will happen with python and other tremendously popular languages--I've seen some ugly python code in our code base too.

We're constantly chasing the next big thing--look at ruby, it's sprang up as better-perl but is rapidly losing favor.",1522678953.0
FiveYearsAgoOnReddit,"I think it's sad that nobody challenged the assumption here. This is a perfect example of what's called begging the question.

What does it mean for perl to be ""unpopular""? Where's the evidence that it is being abandoned?",1522703486.0
randarrow,"Simple.  Perl 6 isn't there and solves nothing.  And, Perl 5 lacks a benevolent dictator/corporate bandwagon and frankly is rotting.

Active Perl 5 developer here.",1522991234.0
cluelessbilly,"It's perceived as old and ugly. Herd behavior. Everything dies.

However I noticed 300% percent of increase in browsing of this sub within last 12 months.",1522692596.0
crashorbit,Do you know how hard it is to find a good COBOL programmer these days?,1522689837.0
username223,"Which other languages?  Today's flashy, shiny companies are all ad-tech, i.e. ""surveilling people's web browsing and shoving targeted ads at their faces.""  That's JS on the front-end and something like C for analysis on the back-end.  Google standardized on Python for its scripting, while (I think) Facebook uses PHP; I'm not sure what MS uses internally, but I doubt it's Perl.

So I'd say Perl's unpopularity is mostly a historical accident.  And although it may not be a ""cool"" language, it's still a great glue language, and it's not going away anytime soon.",1522675645.0
ChristopherBurr,"  *  Nobody is doing new work in Perl 5 because Perl 6 has arrived.  Why would you learn the outdated language?  If it's not outdated, why do you have two languages named the same thing that are different?  There is a lot of confusion about the naming and the Perl community has done very little to address it.  

  * Python - which fills the exact same space as Perl has surpassed Java as the language of choice for Colleges and Universities to teach students with.  Students are leaving schools already knowing Python - why would they learn another language that doesn't buy them anything, and why would businesses start new projects in Perl, when most of their new employees already know Python.

I like Perl 5, but it's time to move on.  Technology continues to change, and so must we.  I know plenty of COBOL programmers that couldn't get a job because they didn't update their skills and stay current.  RPG3 - it was great for reports, but nobody ever hears of it now.  DOS?  Windows NT, HP-UX, Fortran, BASIC?  Yea, some of that is still around - sort of.  But you can't get a job doing them as your primary skill.  Perl is headed this way.  Here's the TIOBE index: https://www.tiobe.com/tiobe-index/   Perl used to be #3 on the list.  In a few years it won't even be in the top 20  ",1522678608.0
runester,Why accept Bash but not Perl? :(,1522601908.0
liztormato,"I think it all boils down to knowhow drain: if you don't have enough people available to judge results, then you cannot be expected to accept results in that language  :-(

I also find this worrying.",1522606191.0
rage_311,"> We may expand the list of supported languages prior to the launch of the Qualification Round, and we will keep the FAQs updated accordingly.

https://code.google.com/codejam/resources/faq#languages

Maybe there's a feedback link somewhere to request Perl support?",1522613489.0
sobrique,Yet more anti perl bigotry it seems :/,1522605868.0
lindleyw,"Disturbingly, this is *not* an April Fools joke. ",1522600489.0
hzhou321,"> I had to use Bash (yes, it's supported) and Java (where floats were needed)

There is nothing in-between?  Bash and Java are such two opposite ends from Perl. The time spent bashing could be used to pick up ... python for example.",1522612097.0
Technologist_EE,"Just out of curiosity, I googled the typical questions.. I felt very lost when trying to figure out the problems. What's the best way to learn how to solve the problems ? Is there a specific book(s) that I could pick up to learn more ? ",1522623637.0
subnu,"I don't have time to code this all out, but the main problem seems to be with your external script.  It should be ""Content-Type: application/x-www-form-urlencoded; charset=UTF-8"", and instead of *returning* the ""results"", they need to be printed to STDOUT encoded in JSON.

...

@rows = $sth->fetchrow();

$result_supervisory_org = $rows[0];

$sth->finish();

push @results, $result_supervisory_org;

**print to_json(@results);**

**return;**

Whatever is picking up the results from the external script should run them through the ""from_json"" function in the JSON library to encode them back into a perl hash/array structure.

Just a note, the work doing the JSON calls should really be in javascript, if there is any time that a perl script needs to call another perl script for information, it should be done using object oriented programming, or just copying the code from the external script into the internal script.  Do the dynamic stuff *after* the page loads.",1522509738.0
,This is a good question to answer.  I would have liked to see an article in the link rather than a promotion of an event. ,1522367678.0
saiftynet,"I would change that title to ""How can we..."".  Ultimately, this is a question not not easy to answer and opinions are not often based on solid evidence.  For that question everyone in this subreddit will have a different, yet reasonably valid response. Ultimately it is perceived usefulness and usability not ideology that drives adoption.",1522395985.0
xeeeeeeeeeeeeeeeeenu,"Considering that liz is the author of [that controversial open letter](https://www.reddit.com/r/perl/comments/7r1b33/an_open_letter_to_the_perl_community/), I'm rather skeptical about this talk.",1522375836.0
eneville,"I can't travel due to family commitments, is this going to be available online afterwards? If so, please update this thread with a link :)",1522402264.0
123nige,"One way to solve the problem is to make the ""Perl"" brand an umbrella brand - and create sub-brands for Perl-related languages, projects and conferences etc.

A proposal for Perl's branding has been recently updated with some new sub-brand names for Perl 6:

http://nigelhamilton.com/perl-branding-proposal.html


",1522593999.0
Grinnz,"Here are the docs for File::stat for reference: [File::stat](https://metacpan.org/pod/File::stat)

You can use [stat](https://metacpan.org/pod/perlfunc#stat) without that module but the object oriented interface is much less error prone. 

On a separate topic, I would recommend considering making it a real [module](http://metacpan.org/pod/perlmod) - requiring a perl script into another perl script was something you did in Perl 4 because modules didn't exist yet. Mostly you just change the file extension to .pm, give it a package name matching the file path, and add the containing directory to your @INC using [lib](https://metacpan.org/pod/lib) or wrappers like [lib::relative](https://metacpan.org/pod/lib::relative) or [the -I switch](https://metacpan.org/pod/perlrun#-Idirectory) or [PERL5LIB](https://metacpan.org/pod/perlrun#PERL5LIB). Then you can ""use My::Module;"" to load My/Module.pm from @INC (hopefully you come up with a better name, though!). The subroutines will be defined in that module's package rather than main so you will either need to include the namespace when calling them (`My::Module::getfiledatetime()`) or have your module export them (commonly with [Exporter](https://metacpan.org/pod/Exporter)).",1522266953.0
duskwuff,"This is not a particularly impressive sample. The information you're covering is all generic; none of it is specific to Perl, or to your book. Additionally, I can see a couple of obvious errors in your writing, such as:

> The initial offerings were the Pi Model A and B in 2012.

The initial offering was the Model B. The Model A didn't become available until early 2013.

> The Model A had 256MB of RAM for $25, while the Model B had 512MB for $35.

The original release of the Model B had 256 MB of RAM. [This was upgraded to 512MB in late 2012.](https://www.raspberrypi.org/blog/model-b-now-ships-with-512mb-of-ram/)

> The CanaKit micro USB power adapter is the standard way to power the Pi.

CanaKit is one of many Amazon sellers of Raspberry Pi accessories. There is nothing especially ""standard"" about their power adapter.",1522266139.0
daxim,"Another improvement: use statements for control flow, not variables.

    while ($g_bRunApp==1) {
        ⋮
        $g_bRunApp=0;

becomes

    while () {
        ⋮
        last;
",1522225817.0
choroba,"You can write sub references directly to the dispatch table:

    quit => [ ""End program"", \&finalCleanup ]",1522248773.0
mpersico,+1,1522245321.0
tm604,"Somewhat tangential, but just in case anyone's trying to find documentation on this: the terminology here is slightly unusual, `AAry` is normally called a hash in perl. The order changes when items are added or removed, so it doesn't really behave like an array.

- http://perldoc.perl.org/perldsc.html
- http://perldoc.perl.org/perldata.html",1522254337.0
MattEOates,This is super out dated to the point of being completely misleading to discuss the state of languages today. The JS engines are from 2007! JavaScript has had considerably more work done on optimisation in that decade than Perl. Something like these results are more like reality as it stands [https://benchmarksgame.alioth.debian.org/u64q/which\-programs\-are\-fastest.html](https://benchmarksgame.alioth.debian.org/u64q/which-programs-are-fastest.html),1522217626.0
mpersico,"I see a new catchphrase:

If your Perl code is not beautiful you're doing it wrong - there is another, nice way.

There Is Another Nice Way

I like that. That being said, I'd love to see what the numbers would be today.",1522243691.0
rodrigolive,"Out of curiosity, I've decided to try 2 benchmarks on my machine, but reducing it to 1/4 of the string size since I don't have all that free time to spare waiting for benchmark results.

This is perl 5, version 16, subversion 3 (v5.16.3) built for darwin-2level

    exec.tm.sec    str.length
    2sec           256kb
    9sec           512kb
    21sec          768kb
    37sec          1024kb

    real    0m38.127s
    user    0m37.402s
    sys     0m0.164s

node -v
v9.8.0

    exec.tm.sec    str.length
    1sec           256kb
    7sec           512kb
    29sec          768kb
    61sec          1024kb

    real           1m3.537s
    user           0m45.787s
    sys            0m23.746s

I usually believe these regex string tests are more revealing of the regex implementation than of the language, compiler or framework itself.

Here it seems (this is very unscientific) that Node darts out but as string growth becomes a burden, it just starts slowing down. I checked memory during the process, and Perl used somewhere between 2.5MB - 5MB real mem (this is OSX 10.10), whereas node stayed in the 40MB - 60MB ram range.",1522312290.0
Grinnz,"Quite outdated, and mostly seems to be regarding positive experiences with Perl and negative experiences with Java. I think it could be taken as an opinion piece if you ignore the benchmarking (they mostly happen to be opinions I agree with), but it's difficult to view it as impartial.",1522195777.0
daxim,"Create an [ODG](http://enwp.org/.odg) or HTML document, then run [unoconv](http://dag.wiee.rs/home-made/unoconv/).",1522167159.0
GlauchanGuy,PDF::API2 could do it,1522174359.0
saiftynet,"[PDF::Create](http://search.cpan.org/~manwar/PDF-Create-1.43/lib/PDF/Create.pm) seems to have everything you need and the man file describes exactly how to do it.  You can get the size and proportions of the image, and resize it using Image::Magick.",1522178556.0
zuvembi,"I've been doing some things on the Raspberry Pi in Perl.  And it's pretty doable, but of course almost everything out there is Python oriented.  I contributed mainly in the hope of growing the ecosystem for Perl on the RPi a little bit.

And the project ""Indoor Grow Room"" may come in handy if I do a mini-greenhouse on my balcony as I'm thinking of doing this fall.",1522165067.0
jonathancast,"One thing that may not be completely clear: in Perl, classes are sets of values (i.e., types).  In Haskell, classes are sets of *types*.  When a Perl class is the natural fit for your problem, a Haskell type class is almost always the wrong solution.

Usually, when a Perl class is the right fit for your solution, a Haskell record is the right fit, as well.",1522176580.0
minimim,"Not only the first implementation of Haskell was written in Perl6, the two languages were developed side by side for a long time. Perl6 used to be the only big application developed in Haskell too, driving the development of the compiler.

Does anyone know if LLFOURN has a reddit account?",1522121407.0
crankysysop,"The UTF-8 variables make me want to cry. It's time for me to learn carpentry and leave coding and systems to the ""cool"" kids.",1522124572.0
Grinnz,Easiest way is to have a separate checkout where you make your changes first and git pull to the checkout that's in use once it's tested.,1522031388.0
choroba,"It's not that easy. After an upgrade, the internal data structures might be different than before, so a simple ""undo"" might not work: if you stored the structures offline somehow (session, database, ...), the app wouldn't be able to work with them.",1522048885.0
mao_neko,"Have Dev, Staging, and Production branches. Maybe your Dev branches are just short-lived feature branches made off of master, you can test the app there, and merge to the production branch when you are happy.

If something is really wrong on the production branch, you can reset it to the previous commit. That way, it reverts the entire feature rather than expecting your user to know how many commits to back up through to get back to the previous behaviour.",1522064605.0
umib0zu,"Does this one user really care that much to worry about this? Just search ""git workflow"" and start using it. If the user complains and you really want to help them for whatever reason, just deploy a front end just for them with the old website.",1522068511.0
saiftynet,"I now have a Windows License, so could develop a back-end that is more reliable for Windows users wishing to try [GUIDeFATE](https://github.com/saiftynet/GUIDeFATE) .  So now Win32 joins Gtk, Qt, Wx, Tk as potential usable back-ends.  Of course only a handful of widgets are possible a menu, simple messageboxes, buttons, single and multi-line text boxes.  A few example applications include now a Image Magick GUI scripting tool, allowing all (100 or so) functions to be scripted. [Try](https://github.com/saiftynet/GUIDeFATE/tree/master/Win32) without installing GUIDeFATE first please, and let me know if it works for you. (You need Perl, ImageMagick-Perl and Win32::GUI)",1522010695.0
,What a fascinating library.,1522028747.0
elbitjusticiero,YESSSSSSSS,1522044040.0
elbitjusticiero,"Awesome! You're definitely getting there. 

The `Executioner.pl` script launches [flawlessly](https://i.imgur.com/5vEQlaC.png) from the test folder. It only launches the examples if I *don't* select a backend in the dropdown, though. If I select a backend (even `Win32`), a console window flashes and disappears. Obviously I'm getting an error but I can't see it because the console disappears so fast. 

The ImageMagick example fails to load images with a series of errors. [This is what I get as soon as I launch it.](https://i.imgur.com/eBUGTho.png) Then I choose any image (the lizard, for example) but I get the scissors every time, with more errors. [Screenshot.](https://i.imgur.com/2vMBntg.png)

",1522100250.0
titanofold,"I like using [Strawberry Perl](http://strawberryperl.com/) on Windows.

It comes with all the tools you need to work with Perl.",1521993043.0
saiftynet,"Trying to use perl in Windows through Ubuntu running as WSL, is probably too convoluted.  Perl runs on Windows without Ubuntu...Strawberry Perl or ActiveState both deliver a comprehensive versions of perl with all the build tools necessary.  Once these are installed, open a command line and install your module using

`ppm install Clone` or

`cpan install Clone`

",1522009843.0
LearnedByError,"You need to be more specific. What are the steps to recreate this problem. You mention Windows Subsystem for Linux, but the error message sounds like it is from some perk installation on Windows that doesn't have a full set of build tools included.",1521994555.0
edimusrex,I use active state perl and installed directly in windows 10 using the chocolaty package manager,1522009713.0
raevnos,"Do you have the build-essential package installed?

Ubuntu has a bunch of perl modules in it's package manager too. Probably better to install that way if what you need is one of them.",1522023739.0
Grinnz,"Aside from the regex questions, that's an ISO8601 format so there are many tools to easily parse that without stumbling through the format yourself. For example [DateTime::Format::ISO8601](https://metacpan.org/pod/DateTime::Format::ISO8601).",1521829386.0
moldykobold,"If a parser exists, and it does, you should not use RegEx.",1521833779.0
duskwuff,"> Is `(?<day_of_year>\d{3})` trying to match `-01`.

No, it's trying to match three digits, which is why it isn't working.",1521827760.0
nabrok,"Looks like the regexp question has already been answered, but as I don't see anybody else explicitly mentioning it ... with that date format the second number is going to be the month, not the day.",1521837862.0
scottchiefbaker,"I came up with: `^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})\.(\d{3})`. For this type of thing I highly recommend [regexpal.com](https://www.regexpal.com/)

This is the above example: https://www.regexpal.com/?fam=102920",1521831982.0
eneville,"I think you're after something along the lines of this that I've just knocked up for you. I've followed the general rules for the most popular ISO8601 (up to the second) since I've very rarely seen the time zone specified, but you use the second snippet if you really want. The vast majority of people using 8601 will use UTC, since they're bothered about people reading it later:

    perl -e 'my $date = ""2009-01-10T18:50:30.000Z""; if( $date =~ /^(?<year>\d{4})-(?<mon>\d{2})-(?<day>\d{2})T(?<hour>\d{2}):(?<min>\d{2}):(?<sec>\d{2})/ ) { foreach my $k (sort keys %+) { print $k, "": "", $+{$k}, ""\n"";} }'

With TZ, optional

    perl -e 'my $date = ""2009-01-10T18:50:30.000Z""; if( $date =~ /^(?<year>\d{4})-(?<mon>\d{2})-(?<day>\d{2})T(?<hour>\d{2}):(?<min>\d{2}):(?<sec>\d{2})\.?(?<tz>\d{3,4}Z)?/ ) { foreach my $k (sort keys %+) { print $k, "": "", $+{$k}, ""\n"";} }'",1521832222.0
username223,"`use_ok` runs at run-time, while `use` runs at compile-time.  Wrap your mocking code in a `BEGIN`.",1521771528.0
obfuscinator,"use ""use lib qw(/path/to/library1 /path/to/library2);"" at the top of your entry scripts. this is essentially the same concept as installing. ",1521766640.0
duskwuff,That isn't specifically Perl; it's just a regular expression. It's broad enough that we can't really tell what you're supposed to get from it without some more (probably a lot more) context.,1521750046.0
readparse,"It looks like there are a couple of asterisks in the expression (not a surprise), which cause parts of the expression to be *indented*.  These could also be underscores, but they're probably asterisks. 

Could you please post it as code?   You do that by putting 4 spaces the beginning...

    like this",1521752352.0
Edmob,"Tools like https://regex101.com/ can help you understand what each pattern is trying to match, so you don't have to decipher the expression.

EDIT: I removed the output, as I'm bad at formatting.",1521758027.0
cowens,A regex matches a string. So you are probably supposed to use the context of the clue to find the string it matches. Can you give us more info on the context?,1521767417.0
Grinnz,This seems like a question better suited for the [p5p list](https://lists.perl.org/list/perl5-porters.html) or [irc channel](https://kiwiirc.com/client/irc.perl.org/p5p).,1521738719.0
mishagale,"I managed to figure this out: The solution is to add `--extra=+q` to the `~/.ctags` file. From the manpage:

>Include an extra class-qualified tag entry for each tag which is a member of a class (for languages for which this information is extracted; currently C++, Eiffel, and Java).  The                   actual  form  of  the  qualified  tag depends upon the language from which the tag was derived (using a form that is most natural for how qualified calls are specified in the language). For C++, it is in the form ""class::member""; for Eiffel and Java, it is in the form ""class.member"". This may allow easier location of a specific tags when  multiple  occurrences of a tag name occur in the tag file. Note, however, that this could potentially more than double the size of the tag file.

Although the man page doesn't say Perl is supported, it seems to work fine.",1521642870.0
steve_mynott,"universal ctags is a more actively maintained fork https://ctags.io/

Oddly distros don't seem to have picked up on it!",1521706907.0
frezik,"> Finally, we decided to use Cpanel::JSON::XS (as it fixes some flaws of JSON::XS) and enhance it by a type-enforcing system.

This was what we did, too. Specifically, we wrote a type-enforcing system around `JSON::Schema`, where each service had a schema defined, and then the converter walks the tree and converts the types as needed. Speed seems to be acceptable for us.

It also solved some of our old problems with booleans. Most JSON encoders in Perl will handle booleans if you go out of your way to give it one, but it's too easy to let it pass through as a 1 or 0.",1521647976.0
jplindstrom,"**Advantages of Syntax::Keyword::Try**

* It's a keyword, so doesn't require a trailing semicolon.
* `return` works like it should, which is *very* nice for clean flow control.

**Advantages of Try::Tiny**

* It's an expression, so the return value of the `try` or `catch` can be used. This is also very nice.
",1521636875.0
Boolean263,"Pretty brief, but it gets the point across and communicates the gotchas.

My personal preference for exception-style programming in perl is [Try::Tiny](https://metacpan.org/pod/Try::Tiny). There are a billion other modules on CPAN of course.",1521597077.0
choroba,"In older Perls, `$@` could be empty after eval if a destructor is called at the end of the eval that calls another eval. Therefore, testing for `$@` after eval is not safe. You should always use

    eval { ... ; 1 } or handle_error($@);

See also [Bug in eval in pre-5.14](http://www.perlmonks.org/?node_id=1153468).

",1521617541.0
daxim,Also see: [`TryCatch` with exception type matching](https://stackoverflow.com/a/48985396/46395),1521650767.0
gslavik,What does output look like? Does it actually listen on 8080? What does nginx proxy config look like?,1521583012.0
mpyne,"One thing to try is to see if running the script's own preforking web server (I think it's Morbo underneath?) actually works.

Presumably something like './script/hello_world daemon' ?",1521590631.0
smells_like_bleach,"what interface is hypnotoad listening on? (sudo netstat -plnt) 

Note . you've copy pasted a config block that expects hypnotoad to listen on localhost only.

The way I read that config is that nginx expects a request to http://myapp, and that needs to resolve to localhost/127.0.0.1. What does mojo.mydomain.com resolve to?",1521592232.0
Grinnz,"Bad Gateway is usually returned by nginx when it can't reach the backend server, so the first step is to check the nginx error log and make sure that your app is reachable on port 8080 locally.

    mojo get http://localhost:8080/",1521593201.0
choroba,[Crossposted to PerlMonks](http://www.perlmonks.org/?node_id=1211372).,1521579033.0
mpersico,"IIRC, that sub is run in the context of the logical loop inside File::Find that is actually traverses the file system. However, to be safe I would recode as 

    File::Find::find( sub { 
        if( $File::Find::name ) {
            (-r && !-d) and 
              push ( @files, substr($File::Find::name, 5) );
        }} , 'blib' );
",1521642439.0
cowens,"Wow, next is a loop seeking missile:

    #!/usr/bin/perl
    
    use strict;
    use feature qw/say/;
    use warnings;
    
    sub c { next; say ""c"" }
    sub b { c; say ""b"" }
    sub a { b; say ""a"" }
    
    for (1 .. 2) {
            a;
            say ""in loop"";
    }

output:
    
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.

And if it doesn't find a loop, it will destroy your program:

    #!/usr/bin/perl
    
    use strict;
    use feature qw/say/;
    use warnings;
    
    sub c { next; say ""c"" }
    sub b { c; say ""b"" }
    sub a { b; say ""a"" }
    
    a;
    
output: 
   
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.
    Exiting subroutine via next at t.pl line 7.
    Can't ""next"" outside a loop block at t.pl line 7.

I would say either the code or the docs need to change.  Probably the docs as there is undoubtedly code expecting this odd behavior.",1521633789.0
sobrique,"You need to use an anchor - sometimes you can just use the `\b` word boundary - it might not be appropriate in every case:

    s/\binMyWorld\b//g;

If `\b` doesn't work you can  instead use a zero width assertion:

    s/(?>\s)inMyWorld(?=\s)//g;

But because your pattern _might_ be 'start or end' of line, you also want to have those as alternate anchors:

    s/(?>\s|^)inMyWorld(?=\s|$)//g;

Alternatively - you could use `split` and `grep` to work 'per word':

       print join "" "", grep { not $_ eq ""inMyWorld"" } split;

(But this will meddle with your delimiters potentially, replacing any whitespace with single space)",1521564285.0
SparkeyG,"You will want to test for word boundies (\b)

    s/\b inMyWorld \b//gx
    
To test:
https://regex101.com/r/vdaTW7/2

I also used the /x flag to ignore white space and make it easier to see the difference between \b and the string you are looking for.",1521564186.0
funboixero,"s/'InMyWorld '/' '/

I think that works",1521564294.0
Grinnz,"What you actually need is LWP::Protocol::https. Crypt::SSLeay is an antiquated implementation and you don't want to use it, LWP::Protocol::https now defaults to using IO::Socket::SSL if available (and will try to install it if you don't have it). Recent versions of SOAP::Lite will install the correct modules so make sure you are up to date, the latest version is [1.26](https://metacpan.org/release/SOAP-Lite).

The specific error message you mentioned means that whatever line of code is referenced tried to run `LWP::Protocol::https::Socket` and either that package does not exist or it doesn't have a `new` method. SOAP::Lite is a very crufty distribution that has been completely rewritten a few times so you should make sure you have the latest version before anything else can really be debugged.",1521510410.0
daxim,Is this the equivalent of [Catalyst::Model](http://p3rl.org/Catalyst::Model) or something more complicated?,1521547608.0
Grinnz,"Not really familiar with the problem space, so from a purely module-distribution point of view: I would have your COPYRIGHT section say COPYRIGHT AND LICENSE, and use http://dev.perl.org/licenses/ as the license link (since the license is not only the Artistic license); and have the full text of the Perl 5 license in your LICENSE file (you can generate such by installing App::Software::License and running `software-license --holder='Samuel Smith' --year=2018 --license=Perl_5 --type=license > LICENSE`).",1521502050.0
davorg,Ani fule kno that Pi day is 22 july :-),1521465011.0
Grinnz,"I would use JSON for both the signature and storing the data, as Data::Dumper is more for debugging purposes. JSON::PP is core since perl 5.14 (though very slow compared to Cpanel::JSON::XS). Just make sure to use the ->canonical setting when computing the signature and it will sort hash keys for you.

(And in a real-world use case, I would use a database.)",1521399334.0
choroba,"At work, we use version numbers. Each structure knows its version (one of the mandatory keys in the hash). Modules exist named UpdateFrom_1.23 etc. which provide code to upgrade to the next version, so you can load arbitrarily old data (there's a limit related to our backup retention policy).",1521394681.0
daxim,"If adoption is a goal, add a tutorial for migrating tests from Test::Simple/Test::More. Show how using TTx avoids their flaws.",1521276600.0
Grinnz,"I've never used Test::Class or similar so I can't really provide feedback, but it's nice to see more things built on the new Test2 framework.",1521245385.0
Grinnz,"The primary syntax error is that you have a system line that's passed a double-quoted string, but you have unescaped double-quotes inside that string. Escape the double quotes or use `qq{string here}` instead (this works the same as `""string here""` but won't clash with double quotes in the string). Next, the `-e` operator takes a string, but you gave it a bareword: quote the file path. Next, all of your statements need to end in semicolons to separate them, newlines are not significant in Perl. Finally you need to declare your variables. $userdir needs to be declared on line 15 (`my $userdir = ...`).

You should also add `use warnings;`  as well, it can help with more issues during compilation and runtime (like pointing out if you accidentally did something wrong but it still sort of works).

I would recommend taking a look at a tutorial or two such as those mentioned in the [sidebar](http://perl-tutorial.org/), some of them are very short and will quickly cover these basics.",1521158759.0
zoffix,"> Brad Gilbert shows the long hard way

Christoph also showed the short, simple way: `Numeric() $ where Int`

> It turns out that this feature is broken and doesn't have a timeline for repair […] My advice is to not use this at all.

It's not broken. It works exactly as designed in 6.c language. The ticket you link to explicitly refers to your proposal as ""extending features"" and it's unfortunate you're giving that advice. If you wish to pay for extra typechecks in 6.c language, simply add a `where` clause to your signature.",1521202156.0
liztormato,"> I don’t like that and don’t think that 3.14 is 3.

How is that not true?  If you ask for an integer representation of `pi`, you will get `3`

And about a coercion method returning something other than it pretends to be: well, I guess that's in the spirit of Perl giving you enough rope to shoot yourself in the foot.

Having thought about this some more, I'm starting to lean towards allowing `method Int ( --> Str:D ) { 'Hello' }`, as there you've expressed twice that you want to return a string.

About `method Int () { 'Hello' }`, I'm inclined to have the compiler automatically add a return type if the method name is the same as an existing class.  So that the above would compile as `method Int ( --> Int ) { 'Hello' }`, which would then (at least at the moment) generate a runtime error on the return value typecheck.  With a little work, the above could be turned into a compile time error, as the return value is static, so we could check this in the optimization phase.",1521113808.0
raiph,"> I ... don’t think that 3.14 is 3.

While some languages use the word ""coercion"" to mean something closer to ""convert"", its usage in P6 is intended to match the English word ""coerce"", i.e. to imply force. To me it makes sense that `3.14` is *forced* to convert to `3` rather than just being rejected.

That said, Brad's SO answer shows that you aren't forced to stick with the built in notion of coercion but can instead customize it as needed.",1521119919.0
lindleyw,"Check for a line in your inline javascript that starts with a % or otherwise causes the EP engine to interpret as Perl.  The ""Bad name after ___"" is a Perl diagnostic (see: `perldoc perldiag`) so the following bit of code would indeed trigger that warning:

    %= javascript begin
        $var = 'myvar';
    %   $sym = mypack::$var;
    % end",1521057302.0
Grinnz,I am not seeing the error you mention using those tags. Perhaps the syntax error is elsewhere?,1521057155.0
GlauchanGuy,I don't do much async programming but it sounds like something is blocking Twiggy's event loop,1521036804.0
GrayTShirt,"I'd probably move the websocket code into a seperate daemon using net::websocket::server and front both with nginx, also I'd probably switch starman for monoceros or gazelle, because of the need for speed. ",1521056978.0
daxim,Can you prepare a minimal test case that reproduces the problem?,1521039447.0
clueless_developer,"Thanks for the feedback!
I ended up writing a management script that controls Starman:5000 and Twiggy:5001 behind a lighttpd reverse proxy.
When a websocket comes in, the process is marked as the websocket handler, and monitors /tmp/websocket_messages with AnyEvent timer, which gets populated by the starman process with json.

It works, and it's fast!
Now I just have to figure out how to identify each browser so the server can initiate individual messages. ",1521066277.0
treenaks,I've just released a new version of [Document::OOXML](https://metacpan.org/release/MSTREEK/Document-OOXML-0.180740) (0.180740) that has a way to do this :),1521092620.0
,"Have never used this module so not sure how it works, but it was the only thing I could find in relation to editing word docs with Perl.I think word has as search and replace function. 

http://search.cpan.org/~johanl/Win32-Word-Writer-0.02/lib/Win32/Word/Writer.pm",1521032109.0
petdance,This sounds like something that's going to require a tool other than Perl to do it.  Perhaps the Mac scripting engine?,1521046474.0
b2gills,"It is a bit of a mischaracterization to call all the questions brian d foy asked as “gotchas and design flaws”.

Some of them are gotchas, some are design limitations, some are bugs, but the majority are from his lack of knowledge. Which is to be expected as he's trying to document things which may not be fully documented yet.",1521514579.0
minimim,"It's all Larry Wall. He still holds BDFL status over Perl5 too.

Perl5 tries all the time to copy Perl6 features only to learn they can't really implement them because it would break too much stuff.",1521046376.0
daxim,"/u/nanis, the majority of your audience is classical Western educated and exceedingly likely to never even have heard of Khayyam and Sabbah before. I wish you would allow everyone to share in your happiness and write in a way that is conducive to understanding and explain the Perl simile. Which parts of the biographies apply to it?",1521020713.0
steve_mynott,"teaser! ""In the autumn, we started work on our next Perl 6 product – which we’ll be announcing in just a couple more weeks""",1520982251.0
buovjaga,"[It's starting to work!](https://dylan.hardison.net/2018/03/11/bugzilla-harmony-unstable-is-kinda-sorta-working/)

I practically live in Bugzilla so I am excited.",1520843515.0
Grinnz,Very interested to see how this turns out!,1520989940.0
Grinnz,Honestly? Web app.,1520820166.0
lindleyw,"In the late 90s, Perl/Tk was my solution to this problem for a mixed Windows/Solaris environment.  At one time that worked on OSX, but haven't heard any updates since 2002-ish... anyone?",1520858120.0
ghms,"I have been binding zenity to Lua for usage in Mac OS X and Linux machines... Maybe you can do the same in Perl... Also it's a nice project. 

Btw: zenity in mac os x is possible trough homebrew.",1520824670.0
beermad,"I haven't attempted to install PerlQt for some time, but I always gave up on it.

I seem to remember it's essentially orphaned and hasn't been maintained for years, so even if it *will* install, it's probably not going to be compatible with more recent Qt versions.

Though I'd love to be wrong, as it's something that would be useful to me as well.",1520789181.0
xeeeeeeeeeeeeeeeeenu,Describing your problem (e.g. by pasting error messages) will increase the probability of getting any answers.,1520786492.0
codon011,Have you installed all of the qt-devel and/or kde-devel packages? (The last/only time I installed PerlQt would have been around 2002.),1520790191.0
saiftynet,"Ok so it seems fairly easy for me to add back-ends for [GUIDeFATE](https://github.com/saiftynet/GUIDeFATE). Have now also added combo box support and improved the example scripts.  But I have two problems.
1) Most users are not able to  (or need to) install all the  back-ends.  But if I put the dependencies for all the back ends as a ""Requirement"" then most users, I guess, will not be able to install GUIDeFATE...is there any way to suggest that the install can proceed even if dependencies are not completely met?  Would that be wise? Especially if pretty soon some back-ends may be platform specific (e.g Win32)
2) Having done this for a couple of weeks, I realise a significant rewrite of some components would make the code neater and be easier for someone else to modify.  But it seems to work as it is.  Is it better to do this rewrite now and put other features and other tool-kits on hold...or should I wait until I have a more comprehensive set of features?
3) I clearly need to do some tests...I can see how utilities such as a calculator can be tested...how might one go about testing to see if graphical interface generator is working?
",1520458896.0
moldykobold,"https://github.com/saiftynet/GUIDeFATE/blob/master/README.md

This is cool, but: y tho?",1520465444.0
iarna,"Ah, that's super cool!",1520473690.0
rrohbeck,"Access to HW that's specific to the RPi. Not another generic Linux or programming book with ""Raspberry Pi"" on the title.",1520301908.0
choroba,Why the Czech flag?,1520527221.0
sanburg,Interfacing with Google Home would be nice.,1520530875.0
Technologist_EE,"You beat me to the punch! I was planning on doing something similar. 

If you could show how to merge Web Application Programming with Embedded systems ( monitor your raspberry pi remotely ). 

You could also touch on XS with Raspberry Pi as well ? ",1520913649.0
n30h80r,"While genuintely you should probably parse xml/html otherwise, you can clump the whole file together with `local $/ = undef` when reading in and do regex replace on whole file:

    #!/usr/bin/perl                                                                                                                                               

    use strict;
    use warnings;

    my $input = ""input.txt"";

    open(my $fh, ""<"", $input) or die ""$!"";
    local $/ = undef;
    my $text = <$fh>;
    close($fh);

    while ($text =~ m/txt/g) {
        $text =~ s/<text [^>]+>\s+<textarea>\s+txt\s+<\/textarea>\s+<\/text>//smg;
    }

    print $text . ""\n"";
",1520267432.0
MattEOates,"I think the following is roughly what you mean. Your current code is kind of completely confused and doesn't appear to do anything. I can sort of see you vaguely wanted a flag to decide to print or not, but you iterate the entire file with your original first while loop. So the flag changing to 1 or 0 needs to be in that while loop. But the reality is you dont need a flag you just need to use the logic of if you should stay in the loop for that line or skip to the \*next\* one. See if you can follow my code and let me know if its what you wanted or not.

     use strict;
     use warnings;
    
     #You've got one or die message but what about the rest?
     use autodie;
    
     my $input = ""xx"";
     my $output = ""xx"";
    
     #Use three argument form of open, use a scoped lexical for your filehandles
     #The reason for 3 argument open is imagine if $output had the value "">xx"" your code would open to append to a file called xx! Which is probably not what you wanted.
     open my $DATEI, '<', ""$input"" or die ""Couldn't find $input ! "";
     open my $OUTPUT, '>', ""$output"";
    
     #Code if you want to ignore the whole line
     while (my $record = <$DATEI>) {
         #Skip to the next iteration if the record matches the regex, grabs the next line
         next if $record =~ /<textarea>txt<\/textarea>/;
         #If the code didnt skip to the next iteration of the loop then we should print the line out
         print $OUTPUT $record;
     }
    
     #OR
    
     #Code if you want to specifically get rid of all the <text> tags, assuming they aren't nested
     #With your example input it means you keep blank lines
     while (my $record = <$DATEI>) {
         if ($record =~ /<textarea>txt<\/textarea>/) {
             #Watch out for nested <text> as this might delete more than you wanted, the .* is greedy and will try and match the last instance of </text> though
             $record =~ s/<text[ >].*<\/text>//g;
         }
         print $OUTPUT $record;
     }
    
     close $DATEI;
     close $OUTPUT;",1520264942.0
siriusfrz,"Maybe this needs an update, being 9 years old and all?",1520244952.0
anossov,"That's right, it works and there's nothing weird, but consider

`$pat = qr/a.c/;`

for clarity and performance (in your code the regexp in `$pat` will be recompiled every time it's used).",1520179072.0
Grinnz,"Keep in mind the delimiters are not just delimiters but an operator. You're really doing `m/$pat/` to apply the `m//` matching operator to the string, using `$pat` as the regex. You could instead apply `s///` or `tr///` operators in the same way, but it assumes you meant to use `m//` when it's not specified. I prefer to always specify it for clarity.

From https://metacpan.org/pod/perlop#Binding-Operators : ""If the right argument is an expression rather than a search pattern, substitution, or transliteration, it is interpreted as a search pattern at run time.""",1520189405.0
scottchiefbaker,"I didn't know that it would work that way. For clarity I think I would always do the first example, it's clearer and more standard.",1520190139.0
sshaw_,Who knew? Glad to see it. ,1520051745.0
liztormato,"There is actually an idiom in Perl 6 for infinite recycling sequences. Basically `Slip xx *`:

    .say for |<red green blue> xx *; # red green blue red green blue….",1520154711.0
tektektektektek,"> It could be a module but this isn’t node.

I don't get this. And shouldn't ""node"" be capitalised as ""Node""?",1520114763.0
hobbified,"Yes, you can do better. Your current code is O(n*m), it checks every element of `$hash_ref_1` against every element of `$hash_ref_2`, and runs `get_prefix` twice for each comparison. But there's another way that is only O(n+m) and also solves your concern about duplicates.

    sub get_prefix_matches {
        my ($hash_ref_1, $hash_ref_2) = @_;
        my %by_prefix;
        for my $key (keys %$hash_ref_2) {
            $by_prefix{ get_prefix($key) } = 1;
        }

        my %fasta_hash;
        for my $key (keys %$hash_ref_1) {
            if $by_prefix{ get_prefix($key) } {
                $fasta_hash{$key} = $hash_ref_1->{$key};
            }
        }

        return \%fasta_hash;
    }

In the first loop we extract all of the prefixes from `$hash_ref_2` (it'd be nice if these had more descriptive names, btw) and use them to populate a hash that contains true/false whether a given prefix exists. In the second loop, we scan `$hash_ref_1` for prefixes that we saw in the first loop. And there's no *nested* loop.

You can probably also get a small speedup in `get_prefix` by changing the regex from `/^>(.*?)_.*$/` to `/^>([^_]*)/`. There's no need for it to pingpong back and forth between the ""match everything"" state and the ""match underscore"" state; instead it just has a ""match everything but underscore"" state. And there's no need to say ""and then some stuff that I don't care about, until the end"", which is what `.*$` means. You can just stop matching when you find what you do care about.",1520015239.0
unkz,"I think you might want to consider this:

http://search.cpan.org/~arc/Text-Match-FastAlternatives-1.05/lib/Text/Match/FastAlternatives.pm

Basically, precompute a search trie of the second hash, then iterate over the first hash using it.  It's orders of magnitude faster at searching.

",1520030459.0
cndgeek,"It is worth considering btrees instead of hash searching:
http://search.cpan.org/dist/Btrees/lib/Btrees.pm
it happily managed 20,000+ matches per second against a 1-million record hash in my tests.
(you may need to tweak the $cmp operator to suit your regex though)",1520134888.0
oalders,Thanks to /u/vtivti for making this available. :),1520023670.0
spore_777_mexen,Good read. Really insightful.,1520246871.0
treenaks,"The header text is stored in separate files (""parts"", in Office Open XML-speak) inside the document. Figuring out which files can be a bit of a hassle (it involves parsing multiple *other* XML files from the .docx to get it right)

My module [Document::OOXML](https://metacpan.org/pod/Document::OOXML) can extract all the parts you need (there's probably not a public API to do this yet; please submit a patch if you can/want to :))

There's more information about the file format on: http://officeopenxml.com/WPheaders.php (note that the relation name is wrong in the first example, it says ""footers"" where it should say ""headers"")
",1519984522.0
Grinnz,"I seriously hope nobody is using these as advice. This post describes adding a plugin to dist.ini, saying it does nothing (which is false), then adding a test file which does the same thing as the plugin (with no apparent reason for doing so), and then removing it from the build; it's all incredibly pointless.",1519802018.0
liztormato,"I find it ironic that Larry is overlooked, especially since he lives only about a stone's throw away from the Computer History Museum.  So travel and stay costs would be minimal when inducting him.",1519820856.0
Kylearean,"As long as Knuth is in there, that’s all that matters to me.

",1519795972.0
zoffix,"> Where the hell is Larry?

Both Perl and Larry are featured in the Museum's *Software &amp; Languages* exhibit http://www.computerhistory.org/timeline/software-languages/ (which lacks both Guido and Python)",1519836201.0
mpersico,"For the record, the OP has come to the conclusion that he needs to get more sleep and a LOT less Facebook. And should probably not post to reddit after dark. Lol",1519916296.0
unkz,"No Python without Perl?  Perl only predates Python by 2 years, and I would say Python takes decidedly little from Perl.",1519798411.0
zoffix,[Who cares...](https://www.amazon.ca/Subtle-Art-Not-Giving-Counterintuitive-ebook/dp/B019MMUA8S),1519785670.0
Grinnz,"Threads are overkill for this task, as most of the operation is just waiting, and threads in Perl are not lightweight. An event loop like [IO::Async](https://metacpan.org/pod/IO::Async::Socket) can help you wait on multiple operations simultaneously, and has components like  [IO::Async::Socket](https://metacpan.org/pod/IO::Async::Socket) which helps you set up a UDP server or client.",1519765807.0
beermad,"It would have been more readable if you'd put each statement on a single line, but what you seem to want to do could be achieved by adding

    $array[2]++;
    $array[3]++;
    print(join("":"",@array) . ""\n"");

after your split statement. To join by tab, just pub a tab character in instead of your **:**. (I can't type a tab in this field).

Your die statements would be better as 

    die($!);

as this would tell you **why** it fails if it does.",1519760706.0
saiftynet,"Try this (I have split instructions ino separate lines for clarity)

    use strict; use warnings;
    open(IN, ""<$ARGV[0]"") or die ""error reading $ARGV[0].dat for reading"";
    open(OUT1, "">$ARGV[0].out1"") or die ""error creating $ARGV[0].out1"";

    my @array; 

    while  (<IN>) {
      @array = split("":"", $_);
      $array[2]+=1;
      $array[3]+=1;
      print OUT1 join(""\t"",@array);
    }

    close IN;
    close OUT1;",1519761890.0
davorg,"(Adding four spaces to the start of a line on Reddit formats the line as code)

The code below uses more modern Perl idioms to achieve your required result. I don't know what sources you're using to teach yourself Perl, but it looks like they were written in the 1990s :-)

The most important change I've made is in the call to split. You were just splitting on colons, but you also need to split on spaces.

    use strict;
    use warnings;

    # Lexical filehandles are automatically closed when they go out of scope
    # Three-arg version of open is safer
    # Include $! in error messages
    open my $in_fh,  '<',  $ARGV[0]       or die ""error opening $ARGV[0] for reading: $!"";
    open my $out_fh, '>', ""$ARGV[0].out1"" or die ""error creating $ARGV[0].out1: $!"";

    # Use default variable ($_) instead of $line1
    while (<$in_fh>) {
      # Declare @array inside the loop
      # First arg to split should be a regex
      # split() uses $_ as its second arg by default
      # You want to split on whitespace *and* colons
      my @array = split /[\s:]/;

      # Increment columns 2 and 3 (which have indexes 1 and 2)
      $array[1]++;
      $array[2]++;

      # Use join() to create the output line
      print $out_fh join ""\t"", @array;
    }

**Edit:** Removed use of `say()` as it's unnecessary in this case.",1519809842.0
zoffix,"> Should there really be rounding inconsistencies at 4 decimal places

There can be yes, consider this famous example:

    $ perl -wlE 'say .1 + .2 == .3 ? ""True"" : ""False""'
    False

It's that way in many languages…

    $ python -c 'print .1 + .2 == .3'
    False

    $ ruby -e 'puts 0.1 + 0.2 == 0.3'
    false

…but not all:

    $ perl6 -e 'say .1 + .2 == .3'
    True

The reason is you're looking at them as decimals, but they're represented in binary, and in that base these are [repeating](https://docs.perl6.org/routine/base-repeating.html), and so can't be exactly represented:

    $ perl6 -e 'say 1.01625.base-repeating: 2'
    (1.00000 10000101000111101011)

    $ perl6 -e 'say 1.05625.base-repeating: 2'
    (1.00001 1100)

There's [a handy online tool](http://www.exploringbinary.com/floating-point-converter/) that can tell you if the float is inexact (it'd have a checkmark next to ""Inexact"" at the bottom) And there's the [*""What Every Computer Scientist Should Know About Floating-Point Arithmetic""*](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html) paper that I see quoted a lot, but personally haven't read (yet).",1519760555.0
Grinnz,"Math::Round is indeed the best practice since it has a workaround for native floating-point imprecision. The alternative is to do all your math with Math::BigFloat or Math::BigRat objects, this will be more like how P6 works but slower:

    printf '%s %s', Math::BigFloat->new('1.01625')->bround(5), Math::BigFloat->new('1.05625')->bround(5);

See https://metacpan.org/pod/Math::BigFloat#Rounding for how this works.",1519761200.0
tm604,"Note that sprintf tends to use even rounding, rather than nearest. For example:

    $ perl -e'use Math::Round qw(round_even); printf ""%s => %.0f (%s)\n"", $_, $_, round_even($_) for -2.5, -1.5, -0.5, 0.5, 1.5, 2.5'
    -2.5 => -2 (-2)
    -1.5 => -2 (-2)
    -0.5 => -0 (0)
    0.5 => 0 (0)
    1.5 => 2 (2)
    2.5 => 2 (2)

Best to be explicit, https://en.wikipedia.org/wiki/Rounding#Round_half_to_even has more details.",1519788321.0
audioen,"This is actually a very subtle point.

    $ perl -wle 'print sprintf ""%.70f"", 1.05625'
    1.0562499999999999111821580299874767661094665527343750000000000000000000
    $ perl -wle 'print sprintf ""%.70f"", 1.01625'
    1.0162500000000000976996261670137755572795867919921875000000000000000000

As you can see, these constants are not precisely expressed to begin with, and what is worse, doing any arithmetic at all with these constants replaces these approximations with other approximations. To use floating point and get correct results, you have to be careful to always round results to appropriate precision at each step and maybe add small bias constants to ensure that .5 style results get rounded correctly.",1519825547.0
choroba,"in bash:

    $ printf '%0.20f %0.20f\n' 1.01625 1.05625
    1.01625000000000000001 1.05624999999999999998
",1519826494.0
digicow,"You probably mean

    while ($number != 1)

not

    for ($number != 1)

The latter syntax takes a list to iterate over within the parens. $number !=1 evaluates to 0, so your loop is evaluated for $_ = 0 and then ends.    ",1519583687.0
BRAF-V600E,"You're using the for loop wrong. Exiting the for loop requires a test expression, without it, you'll never exit the loop without doing something like `last` or `next`.

I'd change it out to a while loop.",1519583819.0
saiftynet,"So now I have completed a mechanism to allow multiple back-ends, learnt to use Tk, and created a backend for this.  This has required a lot of jiggery pokery to adjust sizing of widgets (Tk uses quite a different paradigm for button sizing compared to Wx).  Have also adapted the API so that it is easier to use. I have also created a simple [test environment](https://github.com/saiftynet/GUIDeFATE/blob/master/GUIDeFATE-0.061%20Test%20Environment.zip) for folk to download and try out without installing GUIDeFATE itself (though its many dependencies do need to be installed...Wx, Tk etc), and suggest any mods.  Delivery to CPAN will occur in a couple of days...for version 0.07 a partial rewrite to ease development of other backends.  I would appreciate a wish list of others to try (Win32::GUI, gtk, qt and ??Primo...what's that?) and other widgets to include. Most importantly though, I do not want start making things overly complex.",1519557879.0
subogero,"Whenever I see young people mock Perl, I just smile.

They just help me land in ever more lucrative jobs.

Thank you very much.",1519560568.0
autarch,"What's unprofessional is that they wrote ""perl"" instead of ""Perl"".",1519534739.0
zoffix,"Python and quips about Perl go hand in hand. Their philosophy of ""there should be one—and preferably only one—obvious way to do it"" is diametrically opposed to Perl's TIMTOADYness.

> What kind of professional attitude is that?

To my ear, it sounds more like the posting is showing a humorous side of the company. It's a Python job and I imagine a hard-core Python person would have a chuckle when reading that line.",1519531540.0
plainblackquy,"I think it's meant as a (healthy, ancient) rivalry.  I think many Perl programmers would laugh. Honestly, it's flattering if you think about it. Better than being ignored.",1519530079.0
mpersico,"In the harsh light of day, I admit that I probably over-reacted. But it was the third anti-Perl thing I had read that day and I had had enough, on top of all the other nonsense I had been reading. Perhaps I need to stop Facebook for a while. LOL",1519658621.0
mpersico,"Well, I just sent an email to company expressing my opinion. Guess that's one place I'll never work. LOL",1519536794.0
sshaw_,"Several links are broken: libwww::perl, PathTools, Scalar::List::Utils",1519531004.0
zoffix,"I don't know why some folks are so keen on using Apache as some quintessential example of Things Done Right. 

All I see is a recognizable label slapped in front of 356 random products. Maybe I live under a rock, but I'm hard-pressed to find a product I ever even heard of. *Apache Pig* anyone? How about *Apache Rat*? Or the all-time-favourite *Apache Isis*? There's just one name I recognize: *Flex*. I didn't know Adobe donated it to Apache. And I thought Microsoft had it... Is that the same thing? I only ever saw a single site that actually used *Flex* and when I loaded that site right now I see they no longer do.

Pick a random tech person and ask them what the hell ""Apache"" is. What would you rather bet on: the person says ""it's a flourishing ecosystem of 356 projects"" or the person says ""it's a Web server""?

We already tried slapping a recognizable label on Perl 6—that's why it got ""Perl"" in it. And it was a mistake.",1519423752.0
mr_chromatic,"Two thoughts.

First, if this were implemented, it wouldn't be retroactive. The Perl 5.10 binary or whatever that ships with RHEL/CentOS 6 isn't going to change its name or what it prints for `-V` and `-v`. It's been difficult enough getting the majority of installed Perl binaries out there to something released in the past ten years. That's at least ten more years of branding confusion for the binaries alone, not to mention books, tutorials, forum posts, et cetera.

Second, this has the same flaw as the ""6 is just a part of the name, not a version number"" strategy. If you have to read a couple of pages of justification to understand the difference between two names, you're going to move on to something less incoherent. Perl struggles enough against the perception that it's deliberately different, weird, and cutesy. Putting up more barriers to learning is counterproductive.

There's only one good solution. Change the name of P6.",1519504748.0
Grinnz,"The article conveniently ignores the fact that Apache is actually still the name of the webserver product, and it would be crazy for them to change that.",1519433856.0
sunshine_killer,"Okay i'll start:

* Perl Butterfly (Perl 6)
* Perl Camel (Perl 5)

I get what the author is saying, im on the fence about doing a Perl brand vs just renaming the language. Apache has products not programming languages.",1519422381.0
frezik,"The modern way is to have a web framework (like Dancer or Mojolicious) run under Plack. This could be from inside mod_perl, but can also run on its own without Apache.

That said, most non-trivial web site operators don't trust vendor packages for Apache. Compiling and updating on your own is still a viable option, and mod_perl is still semi-supported.

I say semi-supported, because there's been a noticeable slow down in its development. There was a [segfault bug](https://rt.cpan.org/Public/Bug/Display.html?id=101962#txn-1508463) in mod_perl against perl 5.22. They were notified of the issue in Feb 2015, when the new perl release was still in development. It wasn't fixed until Oct 2016, by which point perl 5.24 had already been released.

I'm also noticing that while debugging, a lot of error messages are getting hidden that were being logged properly under older versions of perl/mod_perl. Admittedly, this may be due to the messiness of the system I work on from day to day, but it's odd.

In short, you have ways of continuing with mod_perl, but you'd be wise to switch to something else.",1519407052.0
GrayTShirt,"You don't seem to be doing anything too complicated, nginx should be able to do most of that out of the box, bit it also has a perl module as well. 

I've don't plenty of header modification and IP whitelisting using nginx.",1519407015.0
Grinnz,"mod_perl is in the [EPEL 7](https://apps.fedoraproject.org/packages/mod_perl) repository, but I assume you are considering that ""not supported""? It's not going to work any worse than when it was ""supported"", but if that's super important (in which case I assume building your own Apache+mod_perl is also out of the question) then you're going to need to find some other way to hook into Apache. It may be possible to do the tasks you mentioned through configuration but it probably won't be pretty.",1519441605.0
singingfish42,[this](https://metacpan.org/release/Plack-App-FakeApache) might work for you. ,1519414385.0
beermad,"Unless I'm very much mistaken (possible, of course), anything that runs through mod_perl should also run simply using the Perl interpreter.  My understanding is that mod_perl simply keeps Perl scripts in memory and compiled, to avoid the overhead of loading/compiling each time.

[edit] Evidently I **was** talking crap. Ho hum...",1519406672.0
codon011,"Am I missing something when you say ""upgrade to RedHat 7.4""? That's a distro that is at least 18 years old. I'm fairly certain that mod_perl has been a supported package on ""modem"" distributions for at least the past 10 years. ",1519439623.0
xeeeeeeeeeeeeeeeeenu,Docker is IMO a huge overkill for this.,1519365974.0
jplindstrom,"Exemplary comms, and a smart (hah!) decision to revert the change given the fallout.

After this, what are the plans regarding smartmatch?",1519404764.0
hsfrey,What was Smartmatch supposed to do?,1519337639.0
sobrique,"Your example XML is invalid for starters. Try again with something that _is_ valid. 

And when you've got that - try using a parser. `XML::Twig` lets you use `get_xpath` to find e.g. `$xml -> get_xpath('//this_element[@metadata1=""value""]'` to locate any nodes with that name and attribute. 

Whilst we're at it `$_` is undefined within your while loop - use `$line` instead if you're setting it in the iterator. ",1519227229.0
daxim,"Use the [repetition operator](http://perldoc.perl.org/perlop.html#Multiplicative-Operators) `x`.

    sub elegant {
        my ($input, $lower, $upper) = @_;
        if ($input < $lower) {
            return 'to' . 'o' x ($lower - $input) . ' short';
        } elsif ($input > $upper) {
            return 'to' . 'o' x ($input - $upper) . ' long';
        } else {
            return 'just right';
        }
    }
    say elegant($_, 5, 10) for 0..15;
",1519220914.0
roerd,"So the amount of extra ""O""s should depend on the difference of the number to the limit? This could be achieved with the `x` operator, e.g.:

    $ perl -E 'say ""O"" x 5;'
    OOOOO",1519221007.0
mpersico,"If it exists, it's on CPAN. If not, it doesn't look that difficult:  http://www.readabilityformulas.com/smog-readability-formula.php",1519226048.0
daxim,"Scrolling with Space key produces the alert `Sorry, there are no further pages`. Do not hijack browser functionality.

The substitution operator and the other forms of the match operator and the trailing flags are missing. That's a frequently asked syntax identification request.

`{}` does a lot of other things than just anon hashref. That's probably the most overloaded piece of syntax in Perl.

Delete XML::Simple and replace with XML::LibXML and the [10 minute XPath tutorial](http://archive.oreilly.com/pub/a/perl/excerpts/system-admin-with-perl/ten-minute-xpath-utorial.html).",1519221687.0
daxim,"With warnings enabled: http://perldoc.perl.org/perldiag.html#Argument-%22%s%22-isn't-numeric%s

The aslice listop (Perl's internal name for the `@foo[$bar]` syntax) really expects a list expression of numeric indexes, not a comma delimited string. The function `split` returns the former from the latter.",1519143835.0
elbitjusticiero,Did you really link to an article that presents a problem and requires a premium subscription to read the solution? This is infuriating. ,1519398741.0
readparse,"My first move is usually `du -ks /* | sort -n`.  Not only do I specifically target the drive root, but I tell `du` to not summarize _everything_, but to summarize everything directly under the root separately.  I don't ever bother with getting the usage of _individual files_.  I deal with directories only, until I have better targeted where the problem is.  This means I don't have a problem with sorting, because the list returning by `du` is always quite short, and easy to sort.

Then, 99% of the time, I target the directory on the bottom of that sorted list (which, very often, is `/home`, I'm afraid.   So then I repeat the command, but add `/home` to it:

    du -ks /home/* | sort -n

This, of course, gives me the worst offenders in home, which I also know are the worst offenders system-wide, because `/home` is worst offender system-wide.  I just keep going down these paths until I find the problem.

...which, on a Mac, is nearly always the iTunes streaming cache :)",1519107555.0
The_Hindmost,"`rm - r /home/!($user)` 

usually works for me ;) </bofh>",1519119094.0
GL0B4L,"Your error is at this line, basically you evaluating your hash in scalar context, 
        
    my  %info   =   SIMInfo( $id )  ||  die 'invalid identifier provided';

Try this instead:

    ( my  %info   =   SIMInfo( $id )  ) ||  die 'invalid identifier provided';


More detailed information can be found here:
https://stackoverflow.com/questions/6723172/what-is-4-16-in-hashes",1519057016.0
mr-osh-vegas," GL0B4L gave the answer but the 'More Detail' was off  

 This has to do with Operator Precendence

 ......    
 ||    
 ......    
 = += -= *= and so on    
 ......    
 or xor    

-----    
 Kinda like     
  open my $fh, '<', $fn || die ""dude: $!""; # bad    
  VS     
  open my $fh, '<', $fn or die ""dude: $!""; # correct    

----    
Tools to add to your belt to ease amount of chanting   
   Prerequisite:   CPAN moudle B::Deparse    
     $ perl -MO=Deparse pgm.pl    
     AND    
     $ perl -MO=Deparse,-p pgm.pl     

----
    #!/usr/bin/env perl
    use strict; use warnings; use Data::Dumper;
    sub SIMInfo {
       my ($id, $value) = @_;
       my  %info;
       $info{ kind } = $value if  $id =~  /^\d{10}$/;
       return  %info;
    }
    my $id1='1234567890';
    my %info1 = SIMInfo( $id1, 'one' )  or  warn 'Invalid Identifier Provided1';
    print Dumper( \%info1 ) . ""\n"";
    my $id2='123456789'; 
    my %info2 = SIMInfo( $id2, 'two' )  or  warn 'Invalid Identifier Provided2a';
    print Dumper( \%info2 ) . ""\n""; 
    #  Give ID2 a new number
    $id2='0123456789';
    %info2 = SIMInfo( $id2, 'two' )  or  warn 'Invalid Identifier Provided2b';
    print Dumper( \%info2 ) . ""\n"";
    exit 0;
",1519245495.0
justAnotherCodeGuy,"is kind a constant?
Try:

    $info{ 'kind' }   =   'WTN'       if  $id =~  /^\d{10}$/;

edit: oh, no, the first Dumper shows it correct.  So that's not it.

",1519057053.0
quintus_horatius,"Is there a way to have Apache start the hypnotoad process automatically, so you don't have to maintain a separate service?",1519006375.0
perlpunk,"I added a short review of this post here: http://blogs.perl.org/users/byterock/2018/02/distzilla-a-bath-for-your-distro.html#comment-1796972
",1518960197.0
ether_reddit,"Wow, the advice here is terrible. He's completely missing that some prereqs, e.g. Test::Fatal, are being added because *something he's using* is using that -- so it is *not* safe to remove the prereq that AutoPrereqs (correctly) added.",1519322821.0
choroba,"I'd probably use a hash to determine the result, not elsifs.

    my @figures = qw( rock paper scissors lizzard spock );

    my %beats = (rock     => {scissors => 'crush',
                              lizzard  => 'crush'},
                 paper    => {rock     => 'cover',
                              spock    => 'disprove'},
                 scissors => {paper    => 'cut',
                              lizzard  => 'decapitate'},
                 lizzard  => {spock    => 'poison',
                              paper    => 'eat'},
                 spock    => {scissors => 'smash',
                              rock     => 'vaporize'});
    my $computer = $figures[ rand @figures ];

    ...

    if ($beats{$player}{$computer}) {
        say ""You $beats{$player}{$computer} me!"";
    } elsif ($player eq $computer) {
        say ""Draw."";
    } else {
        say ""I $beats{$computer}{$player} you!"";
    }



",1518883207.0
saiftynet,"As promised.  An example application.  Module now submitted to PrePAN for review though I am sure the code can be made much better.  Has code auto-generation ( `convert($window,""a"")` ) to now produce a text file with all the widgets found with their respective keys, and a skeleton of the function called when event triggered.  Having subpanels next to one another was causing problems and this has been corrected.  A small subroutine to change images is included (see example) and images now scale to fit the panel.  Developing actual applications highlights more features that need to be included....next update will be done by next weekend.  I have only tested on Ubuntu and have no other platforms for me to test on, sorry.",1518873223.0
choroba,"Wow, even this works:

    perl -MO=Deparse vq.pl | perl | diff - vq.pl",1518862563.0
zoffix,"~~I think there's a syntax error in third example. You can't omit type when using a type smiley (there's no clear default type for them, when you consider invocants, signature unpacking, and parametarization).~~ looks like that was just a rendering issue in Wordpress.

Also, `:_` type smiley is discarded during parse stage (since that's the default), so  specifying it is kinda pointless.",1518784205.0
ThirdEncounter,"Welp, this author will keep posting with ridiculous titles and images. I love Perl, but this is it for me. Farewell, all.",1518761258.0
SinanUnur,"> So the dilemma today is to decide what to call my next series ...

Let's please dispense with the drama ... A conundrum does not a dilemma make.",1518882536.0
ThirdEncounter,"Apparently, this will be the last installment for a while. I just hope the while is really, really long.",1518679640.0
jahero,Brilliant. Looking forward to seeing it on CPAN!,1518705457.0
elbitjusticiero,Wx? Is it available? I use ActivePerl and the only options I have are Tkx and Prima which gives me a runtime error with images. ,1518842429.0
,"Kick-ass regexes, scope not defined by indentation.",1518554508.0
crb3,"- It's complete enough to go anywhere I want to go. It's my go-to language. If I need more speed or smaller footprint, porting from the generalities of Perl to specifics in C isn't hard. If I need a GUI, Perl/Tk has stayed available while other toolkits didn't. I can write short admin snippets or a dialup-and-smtp state-machine -- there's no ""can't get there from here"".

- Progressive learning. The way Perl is set up, you can learn just enough to get going on what you need to do at the time; the rest will keep until you have time to explore. That's how it was in '98 when I wrote tooling on Windows to help a multi-tier cross-assembly through an empty-segment hump by substituting resolved symbols: trading on C and assembler and BASIC prior knowledge, I learned enough Perl to make it work. Now I informally label myself as journeyman-level in Perl, and my machines are littered with scripts I've written to make things happen how I want them. Dial-up state-machine? With GUI front end? Done. Text to multichapter HTML conversion with word-count graphs and topical index? It runs. Helper scripts to extract people-with-kids-compatible scheduling from *cron*? Done, I even got it to scrape pages so as to reschedule on snow days. There's still lots of corners of Perl I haven't looked in yet, and a copy of *Modern Perl* sits waiting for me to find a large block of distraction-free time to study and apply it in, but it'll all keep until I get there; what I know now works.

- It's expressive. I can sit down, write up a short outline with indented bullet-points, turn that into Perl comments, then code to that as a spec, and I seldom have to rip-up-and-retry. I might spawn off little test scripts to verify my assumptions on something or test a process, but the finished work will flow logically. Compare that with how I react to bash, where I'm often struck by how awkward it is to get equivalent behavior -- it's like 8048 compared to 8051. Somebody said that Perl isn't so much a language as a close-flying swarm of special features -- well, at least in Perl those features have logical names and invocations and the gotchas implicit in their interactions are pretty much all machined off. I like that kind of dependability: if I can express it, it'll run.",1518557926.0
Grinnz,"1. First and foremost, because I have been using it longer than any other language and I was immediately more comfortable in it than any other language I knew at the time. This could have occurred with almost any other scripting language but it happened to be Perl.
2. CPAN and everything that goes into modern Perl.
3. Lexical scoping, since forever.
4. use strict, since forever.
5. Having so many ways to do things so that we can choose either the best way, the most useful way, or the prettiest way.",1518563997.0
doomvox,"It works, and there's lots of ways to get things working.   

The programming world is grossly faddish and trend-obsessed, and the beginnings of sanity is to get off of that merry-go-round.  If you're using perl you'll never have to work with perl-haters, ",1518563013.0
tektektektektek,"Perl is something people fall into as it provides a nice intersection between the low-level speed of C and the flexibility and power of scripting. Rather there are reasons people *dislike* Perl:

* they don't have any experience or understanding of operating systems and their facilities, from file handles to sockets to pipes to locks
* they find anything with curly braces so dangerous as the formatting is left up to the author
* it looks too much like C and that scares them
* it is just too powerful and that scares them
",1518582955.0
zoffix,"Perl's TIMTOWTDI lets you use it a lot like a natural language. In Perl I can I ""speak"". In many other language, I ""code"".
",1518565841.0
daxim,"I'm disappointed that so little response was given to the statement

> I mean, there isn't even arguments to functions

It's an underhanded critique hiding behind the skirts of the question in the previous sentence that at least superficially appears honest. He could have formulated it as another question, e.g. ""Is it true that there isn't even arguments to functions?"", or ""I can't believe there isn't even arguments to functions! Tell me it ain't so.""

I think that if answers do not address all the points a critic is making, they give a wishy-washy impression, and let him get away with his badmouthing, intentional or not. You didn't perhaps notice, but your brain did.

We should be wise to those shenanigans, and not let outdated or untrue info to go unchallenged, especially since [in Perl you have a copious amount of choice of solutions for the problem space of signatures](https://stackoverflow.com/a/18390800/46395). And that's why I like Perl, it gives you the means to achieve the functionality Kavorka provides. Node.js for instance does not have the means, as there is no built-in macro system or the like in ES, so you need to use an external thing like sweetjs or babel, but they're all incompatible with each other.

----

Thanks for reading the rant to the end, I offer my [meme tax](https://i.imgur.com/vwqUzWB.jpg)",1518567441.0
cluelessbilly,What's not to like ? I think that people who don't like Perl never gave it any substantial time.,1518564077.0
beermad,It usually takes me less time to code something in Perl than I expected. In a language like Java it always takes longer.,1518563391.0
UnpossibleJim,"Perl is a handy language that can be used to do almost anything, as it has a community that loves MacGyver and Duct Tape.... that being said, to be honest, it's no better than Python at this point. It comes down to what YOU, the individual, happen to like and are comfortable with, to be brutally honest. I seem to be comfortable with using run on sentences and too many commas. 

They call it the Swiss army chainsaw of programming languages because people have made so many ridiculous libraries for it, you can stitch together anything at this point or ask the community how. It was made for language processing for the NSA or something goofy like that, and just kept getting more generalized (correct me if I'm mistaken about that one).

I like Perl, but !GASP! I tend to stick to 5 with some forays into 6. There was a split when the ""upgrade"" happenned and a lot of people got upset and didn't change over. I think Perl 6 did a lot fracture the Perl community, but it seems to be calming down, but I might be misreading the situation. I've never been that good at understanding people, to tell the truth =)",1518572349.0
readparse,"I prefer Perl for the same reason I prefer English.  It's my first language, and I'm able to truly express myself in it, better than in any other language.

Just as with English, you can tell other languages are not my first.   My phrasing is clumsy, my pronunciation is wrong, and I have to carry a dictionary with me everywhere I go.  I can order off the menu, but I can't tell anybody what I _really_ thought of the food.

More than that, though:  Seriously, one-liners.  I have not seen anything that does one-liners as well as Perl.  I can just throw it into a pipeline, just like any other command.",1518578351.0
lolinux,"Sorry for being off topic, but...


I hate you guys! :(


I sorta fell in love with Perl about 2 years ago, after I completed some tutorials online. It felt very powerful, fast, expressive..


I almost felt I could do almost anything with it. Then, I started looking at code from the CPAN. I realized I was some 3-4 months of learning to even call myself a Perl newbie.

I mean it felt that a lot of documentation (tutorials) online is outdated, and CPAN modules lack some basic information for noobs. Basically, 2-3 days later I felt like an idiot :)


So I am jealous of you guys, who managed to move past where I've been, and thrived :).


Currently I work as a sort of an automation engineer in Windows, using Powershell.",1518718618.0
derrickcope,It was tte first language I learned. Very useful on Linux.,1518568534.0
masta,"I like the siguls, or rather I dislike when the lack of siguls makes data ambiguous in other scripting languages. With perl, by the time I got to the perl manual on lists of lists, lists of hash, hash of lists, etc... it was pretty much game over. Could do anything in perl.",1518581832.0
ac1235,"If I don't like a feature, there are other ways to do it. If I don't like a syntax, I can roll my own. 
Perl feels a lot more like lisp than most expect. ",1518593420.0
djdawson,"For me it's the quick access to powerful text-processing features, including but not limited to regular expressions - kinda like ""awk"" on steroids.  ",1518629324.0
scottchiefbaker,This is a pretty great response actually.,1518567790.0
elbitjusticiero,ITT: why people like themselves. ,1518617906.0
sshaw_,"Because of modules [like this](https://metacpan.org/pod/Acme::Bleach) and programs [like this](https://metacpan.org/pod/rxrx). (Oddly enough, they're both by Damian Conway). ",1518674007.0
anossov,"Hashes are inherently unordered, but you can sort its values:

    my @sorted = sort { $b->{found_count} <=> $a->{found_count} } values %master;",1518545736.0
gorkish,"Barring the application of something like Tie::Hash::Sorted (which comes with a major performance impact) a Perl hash can't be sorted in situ, and retrieval of elements by iterator is not guaranteed to have a consistent sequence. In your case you need to sort at access time with a custom sort function.

    foreach my $key ( sort { $a->{$key}->{found_count} <=> $b->{$key}->{found_count} keys %master ) {
        print Dumper($master{$key}); #do whatever
    }

If you need to operate on sorted hashes frequently but your data needs to be able to be quickly updated by key (index), a technique that is frequently used is to store the data in a hash of hashes and then store an array of hash refs sorted however you want so that you maintain access to the data both by key and in sorted order. Of course it will be up to you to keep these consistent with one another.",1518546788.0
Grinnz,"Along with the other answers given, [List::UtilsBy](https://metacpan.org/pod/List::UtilsBy) may be convenient for this sort of operation.

    use List::UtilsBy 'nsort_by';
    my @sorted_words = nsort_by { $master{$_}{found_count} } keys %master;
    my @sorted_hashes = nsort_by { $_->{found_count} } values %master;

And with a little hash slicing you can get one from the other:

    my @sorted_hashes = @master{@sorted_words};",1518564189.0
daxim,Post better content instead of complaining.,1518508371.0
zoffix,"Instead of going for quantity-over-quality, you could slow down, write one post per week, and have the entire week to go over the writing as well as what you're trying to say.

Two weeks ago, a person [politely pointed out](https://www.reddit.com/r/perl/comments/7tj5ui/little_moose_tries_to_run/) the titles could be more descriptive about the content of the articles. 10 days ago, [a person with autism had trouble understanding the titles and asked for clarification](https://www.reddit.com/r/perl/comments/7uqzb4/proper_moose/).

But ... instead of taking that feedback into account, you went onto a scatological spree that culminated with [a literal picture of shit in your blog post](https://www.reddit.com/r/perl/comments/7wrxid/osti_d%C3%A9pais_de_marde_dorignal/). And today, you even went as far as mock that autistic person for pointing out a flaw in *your writing*, while [posting yet another worthless post](http://blogs.perl.org/users/byterock/2018/02/yamp.html) that trolls the other people who gave you feedback.

Sorry, it's not *""r/perl lately""*. You just can't take a hint.",1518522384.0
ThirdEncounter,Huh?,1518492366.0
readparse,"I don't know the rules that well, but yeah, I can see why we might not want to have double-posts of every Perl question on stackoverflow.

But, uh... your project doesn't even use Perl.   The CGI script is written in bash, and all it does is print out ""hello world"", so it always ""works"".

However, it certainly isn't stopping a bot.  It's not doing anything.",1518472243.0
daxim,"I am amused. These UI mocks look as childish as a coloured pencil drawing but convey the task and workflow better than most specs I have received in the professional workplace.

I think an expert can knock out this idea as a Web application prototype in a day or two, excluding the [telephony](https://developer.mozilla.org/docs/Glossary/WebRTC) part.",1518447576.0
kevinero851,"How the thing works:

In ""main"" you can call or text your friends just as skype or icq.

when you are in the app, you need to put informations in your profile
about (age, gender, location, first language, second language, knowledge of).

""notifications"" is where you receive notifications !
it's a message.

""people"" is the list of all that are online


Lets say have a question about nebuchadnezzar.
You go to ""people"", use the filter and select ""knowledge of history""
after applying the filter, you find 32 000 matching people out of 500 000 online. 
you send a notification to them,
they will receive the notification and will reply to you, also by notification
or by instant message or by calling.
From the 32 000 , there will be like 15 that know the subject very well.

last step: call them and enjoy your instant answer !
",1518445802.0
kevinero851,"Let's say you did not understand a whole field (chemestry for example). Quora and google makes you search, search, post messages and wait a long time for a reply to give you a short text. Quora and google makes you read a ton of things. All by yourself. At the end of the week you did only a little bit of progress. This is long, lonely and painful. This program makes you call immediatly with skilled HUMANS. You just sit, relax and enjoy talking to them and will be dedicated to you to make you master the field. isn't it right ?",1518448989.0
saiftynet,"Nice idea, Kevinero.  Yahoo Answers does something similar to what you describe...presumably though, you will be pushing notifications onto peoples desktops/devices in order to get immediate replies....can imagine with a large community this could get difficult.   Would be interested to follow your progress through this development.",1518465706.0
perlpunk,"These articles

* are hard to read
* every 2nd sentence or so starts with ""Well""
* need much more punctuation
* use profane language
* need a table of contents
* need better titles
* I'm tired of Moose!!",1518445520.0
ltriant,Very cool. I can't wait to give it a shot when I've got the spare time! Nice to have more options to consider for prod deployments.,1518414126.0
plainblackquy,"What would be the pros and cons of running an app.psgi via this new nginx capability, vs. Starman, Hypnotoad etc.?",1518483926.0
frezik,"You can add keyword searches to Firefox and Chrome. In Firefox add a bookmark:

`https://metacpan.org/search?q=%s`

With the keyword `cpan`. Whatever you type after that will be filled into the `%s`.

In Chrome, you add it as a new search engine with the same string above.",1518440625.0
sshaw_," I use [s](https://github.com/zquestz/s) for searching from the terminal and [engine-mode](https://github.com/hrs/engine-mode) for searching from my editor (Emacs).

",1518413851.0
Grinnz,"> Getting there though, can be tiresome. I open a new browser tab, start typing “metacpan”, my browser then autocompletes it to the most recent metacpan address I viewed, which is inevitably not the one I want, so I highlight the module name in the URL, and replace it with the one I’m looking for.

Chrome has very nice behavior for this. If you tab-complete metacpan.org (after visiting the site a few times) it will turn it into a working metacpan search right in your address bar.",1518412595.0
oylenshpeegul,"I usually type

    !perl Foo::Bar

in the address bar and let DuckDuckGo open the metacpan page for me.

",1518445145.0
ThirdEncounter,"Seriously.  **HOW THE HELL DO YOU PUT A PICTURE OF MOOSE POOP IN A PERL CODING BLOG**?


This is not good for Moose.  At all.",1518402071.0
FuzzyBear2017,I've tried inspecting the xml files but nothing jumps out.,1518286188.0
ryobiguy,"Fuck this bullshit, last /r/perl post I'm reading.",1518262306.0
commandlineluser,"Well that error is because you're missing the closing single quote for the awk command on the `my $times2` line.

You're also missing the backslash before `$0` on that line.

I'm not sure what is going on with the `$times1` line

    my $times1 = `awk -F'[: ]' '%H:%M:%S <= $systime && %H:%M:%S >= $subsys 


What is using `%H:%M:%S` in a comparison supposed to do here?

If you're shelling out to date and awk - it would probably simplify things to just write it as a shell script instead.

",1518214927.0
davorg,"As others have pointed out, you're really not writing Perl here. A more Perlish solution would look something like this:

    #!/usr/bin/perl

    use strict;
    use warnings;

    use Time::Piece;
    use Time::Seconds;

    my $now = localtime;
    my $then = $now - (10 * ONE_MINUTE);

    while (<>) {
      my $time = ...; # code to extract timestamp from log record

      if ($then->strftime('%H:%M:%S') le $time
        and $time le $now->strftime('%H:%M:%S')) {
        # $time is in the last ten minutes
      }
    }

We've used [Time::Piece](https://metacpan.org/pod/Time::Piece) to get the times and you should note that the `while (<>)` construct reads data a record at a time from the file that is given on the command line (and stores it in `$_`). So if you put this code in `filter_time` and the log file is called `something.log`, you can then run this as:

    $ ./filter_time something.log

It's up to you to a) write code that extracts the timestamp from each record of the log and b) do whatever needs doing if the record is in the last ten minutes.",1518277716.0
Lt_Zechs,"Hi everyone, thanks for the replies. I apologize if this wasn't perl and was posted in the wrong sub. Also, thanks everyone for the replies, it is really appreciated. ",1518451860.0
aanzeijar,"Honestly? My idealized version would be to make sigils completely optional. Here's why.

Sigils in Perl5 were intended to be a visual marker for determining types. crashorbit already mentioned Hungarian notation. Since Perl5 has the 3 built-in types scalar, array and hash, it's three sigils to distinguish those. But since you know Perl, you immediately know that this is a lie. There are more than 3 built-in types, which you see by taking references of various things. There are also regexp objects, formats, globs, coderefs, lvalues, and version objects among other stuff. Those just don't have a dedicated sigil and work just fine. Code and globs even have their own sigil, you just rarely see them. And it gets really muddy when using objects because all classes behave differently but are lumped together by the common type that their reference has: scalar.

So you say: Aha, but Perl5 has 3 different _contexts_, and you can see the context from the used sigil. To access a scalar value from an array or a hash you have to use a $-sigil. Makes perfect sense. But there's no hash-context. Instead there's list, scalar and void context. So that doesn't work out too well either. And in Perl6 it's not only different but also inconsistent because Perl6 allows you to overload operators. So to access a scalar from an array you write @array[$index], but to access a scalar from a buffer you write $buffer[$index], because the buffer is an object, stored in a scalar with a postcircumfix[] method. Makes sense internally, but is bonkers when justifying sigils. 

So what do sigils actually do in Perl5? They resemble shell, make syntax-highlighting easier, and make runtime access slightly faster because the type of the requested element can be predicted by the parser. In an idealized world I'd don't need the first, and get the other two by having the language statically parseable. Perl5 will never be fully statically parseable without seriously restricting the language both practically and in design, but I'd argue that all real life production code comes with implicit guarantees for types anyway, otherwise it's not realistically maintainable. Making it easier to capitalize on these implicit type guarantees, both when parsing to find errors early, and during runtime to find errors and speed up execution would be something I'd really like, but which sigils in their current form simply can't deliver.

Twigils on the other hand do have their value, and that is for making universal methods and variables without having to worry too much about screwing up the namespace down the line. There's I'd say it's a tradeoff between cognitive load (use English exists for a reason) and what you can do with it. I don't think I have a preference on this one.

Edit: cna't spel",1518194709.0
zoffix,"Perl 6's assortment of sigils, twigils, and sigil-less terms does a fine job for me. If I wanted to indulge I could wish for a *'definite-assignment'* sigil/twigil: something that stays as a type object by default, but on assignment/binding accepts only definite values.

Without thinking much on what it'd look like, say, let it be `$D|` for definite, `$U|` for type objects, then this:

    class Foo {
        has Int $D|.foo;
    }

Would be equivalent to this:

    class Foo {
        has Int $.foo;
        submethod TWEAK () {
            %_<foo>:exists and -> Int:D $!foo {}(%_<foo>);
        }
        method foo is rw {
            Proxy.new: :FETCH{ $!foo }, :STORE(-> $, Int:D $!foo {})
        }
    }

So essentially it's a `:D` type-smiley constrained variable but whose default-default is a type object:

    .foo.say with Foo.new: :42foo; # OUTPUT: «42␤»
    .foo.say with Foo.new;         # OUTPUT: «(Int)␤»
    (try Foo.new: :foo(Int)) orelse say 'typecheck failure';  # OUTPUT: «typecheck failure␤»

    with Foo.new {
        .foo = 42; # OUTPUT: «42␤»
        .foo.say;
        try { .foo = Int; 1 } orelse say 'typecheck failure'; # OUTPUT: «typecheck failure␤»
    }
",1518184077.0
crashorbit,"Sigils represent a formalized kind of [hungarian notation](https://en.wikipedia.org/wiki/Hungarian_notation).  It's turned out that such things are easy to get wrong and hard to be as useful as they are intended.  On the other hand good notations make reasoning about code easier.

I'll be interested in seeing unicode wingding characters start appearing in this role.   ",1518192613.0
subogero,"Without the current sigils of Perl5, a few very useful things would stop working:

* Variable interpolation into strings
* Addressing hashes with unquoted word-character strings
* Unquoted word-character strings before fat commas `=>`

That would be hell.",1518268998.0
minimim,"Sigils make the language grammar simpler and can't be beaten at that. It's more of a feature for language developers.

Any discussion of it has to start at that since it's their main use.",1518303340.0
ThirdEncounter,"I'm sorry, but these titles are becoming more ridiculous. I feel like hiding the post instead of being compelled to read it. This is not good for Moose.
",1518189823.0
Grinnz,"Very neat! GUI in perl has never been a simple task.

Just a few stylistic criticisms (let me know if you want clarification/reasoning for any):

1. You should really use strict and warnings in each file, and don't use -w in the script's shebang.
2. I'd recommend putting MyFrame in its own .pm file, and namespacing it like GUIDeFATE::MyFrame (so it would go in GUIDeFATE/MyFrame.pm).
3. The convention is to put all perl modules in projects under a lib/ directory. Then in your main script you can do `use lib 'lib';`, or run it like `perl -Ilib calculator.pl` to load it for that execution. (Note the current directory is no longer included by default as of perl 5.26, so you need to do this in some form anyway.)
4. It's best to use `parent` rather than `base` as it's much simpler; you are already using it in some places, so just make it consistent.
5. There's no reason to do `package Main;` in the script. The default package is `main` (note the casing) and scripts should not generally change packages. Additionally this causes you to not be able to use the `$frame` variable you imported into `main` just above.
6. No need to use GUIDeFATE twice in the script; one `use` statement with the import args you want is enough.
7. The shebang `#!/usr/bin/env perl` is recommended for scripts that aren't shipped to CPAN, as that will use the user's preferred perl.
8. No need to inherit from Exporter! `use Exporter 'import';` will give you the functionality, while not introducing confusing multiple inheritance to your module.",1518132620.0
saiftynet,"As a noob programmer, with little graphical interface design skills, but an ability to cut and paste other peoples hard work and knowledge, I am trying to develop a simple way to create graphical applications using nothing more than a text editor.  Credits to [Jouke's wx Tutorial](https://www.perl.com/pub/2001/09/12/wxtutorial1.html/) and  [James M. Lynes, Jr.](http://www.perlmonks.org/?node=More%20WxPerl%20Examples) in creating this module that can convert something like: -
    
    +------------------------+
    |T  Calculator           |
    +M-----------------------+
    |  [                  ]  |
    |  { V }{ % }{ C }{AC }  |
    |  { 1 }{ 2 }{ 3 }{ + }  |
    |  { 4 }{ 5 }{ 6 }{ - }  |
    |  { 7 }{ 8 }{ 9 }{ * }  |
    |  { . }{ 0 }{ = }{ / }  |
    |  made with GUIdeFATE   |
    +------------------------+
    
into something that looks like a desktop application...

Criticism and suggestions welcome.",1518128727.0
rage_311,"This is a really cool concept.  I'm going to have to give it a try.

A screenshot of the rendered conversion in the github repo could be helpful, too.",1518129692.0
crashorbit,"I'll second the ""this is cool"" vote.  Maybe take a look at http://perldoc.perl.org/perlnewmod.html for some ideas on how to stuff it into CPAN.  ",1518132733.0
mpersico,"This. Is. Cool. I won't repeat prior stylistic comments, except to emphasize 'use strict', 'use warnings', no -w and '#!/usr/bin/env perl'

Reading one of your comments about extending to TK, GTK, etc, start thinking NOW about how you'd break this code up to support that. Start looking around at other modules that do environment abstractions and see how to split up the code so that you can just plug in TK, GTK at a later date, OR, maybe SOMEONE ELSE can contribute TK or GTK.

I would pursue that,  before dealing with menus or fonts. I wouldn't want to create all that stuff and then have to unwind it later. Now's a good time to modify the architecture - not too early (you have something to work with), not too late (code not that big yet)",1518189186.0
joelberger,"This is a very cool concept. I wonder how you intend to link the graphical elements into the code? Say in the calculator example, how will the eventual program know what to do on button click and what should be shown in the text box? Solve that as cleverly as you have the layout and you might really be on to something!",1518717145.0
Grinnz,"Selenium and PhantomJS were the ways to run javascript in headless applications, but now chrome headless (like the module you mentioned) has pretty much obsoleted them. Another implementation is at https://github.com/jberger/Mojo-Chrome (not yet on CPAN) but I haven't tried either one.",1518120082.0
flamey,"[WWW::Mechanize::PhantomJS](https://metacpan.org/release/WWW-Mechanize-PhantomJS) - headless WebKit is another option, which I used a few times for scraping.",1518120098.0
frezik,"A long time ago, I used WWW::Mechanize::Plugin::JavaScript for this, and it worked better than I expected. Looks like it's been pulled and superseded by [WWW::Scripter](https://metacpan.org/pod/distribution/WWW-Scripter/lib/WWW/Scripter.pod).

I suspect direct browser integration will work better, but I think it's cool that you can go without.",1518141493.0
vividsnow,"Gtk3 WebKit2 bindings
for example: https://github.com/potyl/Webkit",1518169717.0
sobrique,"Not equivalent exactly, because the focus of perl is considerably broader than R. 

But in terms of creating an application on a server, you can do some nice things using Mojolicious. ",1518109257.0
zhouzhen1,"No if you want those Shiny widgets for interactive data visualization/exploration. 

For generic web server app, Mojolicious can do more than what's in the R space.  ",1518150604.0
justAnotherCodeGuy,"You might be able to plug pdl into IPython.  

See also App::Prima::REPL
",1518117472.0
quitehairy,"I don't think you can get the page orientation directly, but you can infer it from the shape of the media box.  This is from memory so apologies if not quite right but something like:

my $mb = $page->mediabox();

then dump that with Data::Dumper and have a look ... there's an array in there with origin and size dimensions.  Might need to check if there's a rotation applied too.

print Dumper($mb->{MediaBox});",1517948421.0
subogero,"I think the explanation in not 100% correct. The OS does not reset everything after a child process with a changed working directory has finished. There is actually nothing to reset.

The most important thing to understand is that in a shell `cd` is not a command. It's a shell builtin that calls the `chdir` system call in the same shell process.",1517954185.0
bart2019,Note that `getcwd` has an alias by tha name of `cwd`.,1517915502.0
Grinnz,"Unfortunately there is no way to tell what the context of an expression is in general until that expression is actually evaluated. Consider:

    sub foo { @stuff }
    
    foo();
    my $count = foo();
    my @things = foo();

What context should @stuff be highlighted as?",1517878460.0
mpersico,"What kind of coloring do want to see? I have emacs that colors the function-looking things in pink (print, qw) the strings in gold (foo bar) (3 4), $s in white, @a in yellow and || in a grey (operator). Are you expecting the thing that you put in the comment to be in a different color in the editor?",1517868239.0
pfp-disciple,"I just had to refresh my memory on this and similar data structures in perl. I found the answers by looking up `perl hash of lists` and, for my purposes, `perl list of hash`. I think there are man pages for those. The results were very helpful. 

The syntax is a bit awkward, but you've gotten good answers already.
",1517773880.0
ogniloud,"> When I iterate through the items in {SummaryText} I get the output: ARRAY(0x7fc763e0a0d8)

`$key{SummaryText};` is a key holding a reference to an anonymous array. If you want to iterate over its content you must first dereference it with something like `@{$key{SummaryText}}` and then loop over its elements.

---
As for how your data structure should look like, I think the job could be done with a hash representing the ~~root~~ main directory where a key is either (1) the name of a subdirectory which holds a reference to an anonymous array of anonymous hashes containing the files' details or (2) the name of a file which holds a reference to an anonymous hash containing the file's details. For example, a directory with the following file structure
    
    dir/
	 |---- mammals/
    	    |---- giraffe.txt
    	    |---- whale.txt
	 |---- birds/
	        |---- eagle.txt
	 |---- computer.txt
	 |---- retrowave.txt


could be represented by the following data structure:

    my %dir = (
	""mammals/"" => [
        {
            size => 15,
            MD5  => 'dac9630aec642a428cd73f4be0a03569',
            filename => 'giraffe.txt',
            owner => 'LW',
            permission => 'rx',
            summaryText => [""Hey, we're elephants, we love giraffes.""],
        },
        {
            size => 20,
            MD5  => '5aa90e2b89e67b8c30b995ce16863e31',
            filename => 'whale.txt',
            owner => 'JE',
            permission => 'rw',
            summaryText => [""This file is about mammals.""],
        },
    ],
    ""birds/"" => [
        {
            size => 12,
            MD5  => 'b2df7bd755e831752e533934475aede7',
            filename => 'eagle.txt',
            owner => 'AL',
            permission => 'x',
            summaryText => [""This file is about eagles.""],
        },
    ],
    ""computer.txt"" => {
        size => 15,
        MD5  => '30fd3933f4f6b3aeece038dad5b576bb',
        filename => 'computer.txt',
        owner => 'LW',
        permission => 'rw',
        summaryText => [""What's my file extension?""],
    },
    ""retrowave.txt"" => {
        size => 20,
        MD5  => '6052a5b3295f8c7c35718c4351d5976a',
        filename => 'retrowave.txt',
        owner => 'JE',
        permission => 'rw',
        summaryText => ['this is retrowave', 'this is supposed to be a summary'],
    },
    );

If you want to add a new file to a subdirectory:

    my %lion;
    $lion{filename} = 'lion.txt';
    $lion{size} = 18;
    $lion{owner} = ""AT"";
    $lion{MD5} = ""8c7c35718c4351d5976a6052a5b3295"";
    $lion{summaryText} = [""This file is about a lion.""];
    
    # Pushing it to the subdirectory mammals/
	push @{$dir{""mammals/""}}, \%lion;

Iterating over the main directory and its subdirectories:
 
    for (keys %dir) {
	    if (ref $dir{$_} eq 'ARRAY') { 
	        for my $file (@{$dir{$_}}) {
	            print $file->{filename}, ""\n----------------\n"";
	            printf(""%-12s %10s\n"", ""Size:"", $file->{size});
	            printf(""%-12s %10s\n"", ""Owner:"", $file->{owner});
	            printf(""%-20s %10s\n"", ""MD5:"", $file->{MD5});
	            printf(""%-20s %10s\n"", ""Summary text:"", $file->{summaryText}->[0]);
	            print ""\n"";
	        }
	    }
    
	    if (ref $dir{$_} eq 'HASH') {
            my $file = $dir{$_};
            print $file->{filename}, ""\n----------------\n"";
            printf(""%-12s %10s\n"", ""Size:"", $file->{size});
            printf(""%-12s %10s\n"", ""Owner:"", $file->{owner});
            printf(""%-20s %10s\n"", ""MD5:"", $file->{MD5});
            printf(""%-20s %10s\n"", ""Summary text:"", $file->{summaryText}->[0]);
            print ""\n"";
	    } 
	}

And you get something like this if you wanted to print it out:

    retrowave.txt
    ----------------
    Size:                20
    Owner:               JE
    MD5:                 6052a5b3295f8c7c35718c4351d5976a
    Summary text:        this is retrowave

	eagle.txt
	----------------
	Size:                12
	Owner:               AL
	MD5:                 b2df7bd755e831752e533934475aede7
	Summary text:        This file is about eagles.

	giraffe.txt
	----------------
	Size:                15
	Owner:               LW
	MD5:                 dac9630aec642a428cd73f4be0a03569
	Summary text:        Hey, we're elephants, we love giraffes.

	whale.txt
	----------------
	Size:                20
	Owner:               JE
	MD5:                 5aa90e2b89e67b8c30b995ce16863e31
	Summary text:        This file is about mammals.

	lion.txt
	----------------
	Size:                18
	Owner:               AT
	MD5:                 8c7c35718c4351d5976a6052a5b3295
	Summary text:        This file is about a lion.

	computer.txt
	----------------
	Size:                15
	Owner:               LW
	MD5:                 30fd3933f4f6b3aeece038dad5b576bb
	Summary text:        What's my file extension?


    

",1517802798.0
eritain,"> When I iterate through the items in {SummaryText} I get the output: ARRAY(0x7fc763e0a0d8)

If you mean that `$archivedetails[0]->{SummaryText}` returns `ARRAY(0x7fc763e0a0d8)`, that is what it is supposed to do. You need to go into that array and work with its contents. 

If you are in fact getting into that array, looking at `$archivedetails[0]->{SummaryText}->[0]` and you're still seeing `ARRAY(0x7fc763e0a0d8)`, that means you have stored arrayrefs into your SummaryText array, which it sounds like you don't intend to do. 

I recommend reading [perlreftut](http://perldoc.perl.org/perlreftut.html) to get clear about nesting data structures.",1517854679.0
scottchiefbaker,"You can't just push an array on to an already existing hash (well not and expect it to do what you want).

You probably want to store an arrayref in the hash instead. Something like 

```
$key{my_array} = \@archivedetails.
```

Then to pull it out you do:

```
my @array = @{$key{my_array}};
```",1517769183.0
waterbellie,Sounds like you need to store the reference to the array as the hash key. Dereference to print it. ,1517768297.0
sshaw_,When did perltricks.com move to perl.com? Is there an announcement I can read? ,1517768714.0
invalid_dictorian,"Use a file lock or a Unix socket

Or each forked process creates and remove their own file while each process checks for the existence of the other process's file.",1517681333.0
subogero,Use the `socketpair` system call before `fork` to have bidirectional communication. Send two different commands to the other process for icrement and quit.,1517699546.0
Grinnz,Another option is [IO::Async::Process](https://metacpan.org/pod/IO::Async::Process) which can manage input and output from the child process in several ways.,1517700333.0
davorg,"Is this homework? The bullet points make me think that it is, and if that's the case it would be polite to tell us.

I think you might be overthinking this a bit. I don't think there's any need for communication between the two processes other than a blocking lock on the file.

I'd solve this problem something like this:

    #!/usr/bin/perl

    use strict;
    use warnings;
    use feature 'say';

    use Fcntl qw[:DEFAULT :flock];

    my $max = shift || 10;
    my $file = 'count.txt';

    my $proc = fork ? 'Parent' : 'Child';

    while (1) {
      sysopen my $fh, $file, O_RDWR|O_CREAT
        or die ""Can't open file: $!\n"";

      flock $fh, LOCK_EX or die ""Can't lock file: $!\n"";

      my $num = <$fh>;
      $num //= 0;

      last if $num >= $max;

      say ""$$ [$proc]: Writing file"";

      seek $fh, 0, 0;
      truncate $fh, 0;
      print $fh ++$num;

      close $fh;

      sleep 1;
    }

It's possible I've missed something in your spec that means it can't be this simple.
",1517775410.0
jondo3beatzz,"I got this far. The program alternates the counter in a file, but I still can't get the processes to talk to each other, so they do double the work specified. 

    use strict;
    use warnings;
    use diagnostics;
    use POSIX "":sys_wait_h""; # for nonblocking read
 
    print ""How many times should the process increment?: ""; #print first message

    my $input = <>; #user int value

    my $int_val = 0; #initial int value

    my $j = 0;

    my $i = 0;


    my $out = 'message.txt';
    open(OUT, '>', $out) or die(""Can't create $out.\n"");


    open (FILE, '+>message.txt') or die ""Can't open file: $!""; #create file
    print FILE ""$int_val\n""; #write integer zero to file


    my %children;

    $SIG{CHLD} = sub {
        # don't change $! and $? outside handler
        local ($!, $?);
        while ( (my $pid = waitpid(-1, WNOHANG)) > 0 ) {
            delete $children{$pid};
            cleanup_child($pid, $?);
        }
    };

    for (my $i = 0; $i < ($input/2); $i++) {
        my $pid = fork();
        die ""cannot fork"" unless defined $pid;
        if ($pid == 0) {
		
		my $in = 'message.txt';
			open(IN, $in) or die(""Input file $input not found.\n"");
			while (my $line = <IN>) {
				$line++;
			open (OUT, '+>message.txt') or die ""Can't open file: $!""; #create file
			print OUT $line;
			}
			++$j;
            print ""($j) The child incremented the file\n"";
			close(IN);
			close(OUT);
            exit 0;
        } else {
            $children{$pid}=1;
			
			my $in = 'message.txt';
			open(IN, $in) or die(""Input file $input not found.\n"");
			while (my $line = <IN>) {
				$line++;
			open (OUT, '+>message.txt') or die ""Can't open file: $!""; #create file
			print OUT $line;
			}
			++$j;
            print ""($j) The parent incremented the file\n"";
			close(IN);
			close(OUT);
           # system($command);
           waitpid($pid,0);
		   
      }
    }

",1517707020.0
Grinnz,"Sometimes the easiest option is to have processes communicate over pubsub provided by a broker process such as Redis, PostgreSQL, or [mercury](https://metacpan.org/pod/mercury#Server-side-Communication).",1517681814.0
davehodg,"You can’t. Communication is one-way generally. 

This is why we have shared memory,
semaphores, message queues and such.",1517680668.0
zoffix,"> people outside of the community would think Perl6 has to deprecate 

It's not *would* think. [They *do* think](https://github.com/github/linguist/issues/3637#issuecomment-319026186). Hell, even people *in* the community [are confused that it would](https://www.reddit.com/r/perl6/comments/7s9yj6/201804_its_time_for_optimism_weekly_changes_in/dt8vw9y/).

Just because it hasn't happened to `$foo` is not evidence that it can't ever happen.",1517701369.0
Grinnz,"Unfortunately saying people shouldn't think something isn't going to change the reality of how people interpret project names and versions. Can the perception be fixed over time? Sure, but since neither Perl nor Perl 6 are very popular, it's going to be a *long* time before any of the damage is fixed.",1517681999.0
123nige,"It's good when brands are honest and clear. 

Perl 6 and Perl 5 are two distinct languages. Yes - they both share the ""Perl Way"" - but the two languages are different - the Perl Foundation should be clear and unambiguous about that.

""Perl"" is a master brand and we need distinctive sub-brands for the respective language(s) and Perl-related projects, conferences etc. 

The Apache foundation have done this really well. The goodwill in the ""Apache Way"" is protected by the ""Apache"" master trade mark - in combination with the numerous Apache subprojects: Apache Ant, Apache Cassandra, Hive, HBase, Ignite etc etc. Subprojects are free to come up with their own sub-branding.

The Apache community ecosystem is thriving and growing. Who would have thought it was once 'just' a web server? They protect the Apache way through their management of the ""Apache"" master mark - while creating a thriving space for sub-projects to grow.

The Perl community and its numerous subprojects can grow likewise. The honest reality is the ""Perl"" trade mark has outgrown its original use - a designator of just one computer language.  ""Apache"" is now much more than just a webserver. ""Perl"" is now much more than just one language runtime. Let's be honest about that. 

Just like the master ""Apache"" trade mark. ""Perl"" is a master trade mark of the ""Perl Way"". We should create distinctive, sub-brands for each language/project - ideally something non-numeric to avoid ""versioning"" the brands into the future.

This will mean honest communication in marketing, effective branding and no collisions on the command-line! 

I wish the Perl Foundation would take the lead here and get a grip of this. Taking inspiration from the Apache Foundation's master brand model would be great for Perl. 

There is lots of opportunity here for clarity, honesty and growth. 

",1517816197.0
plainblackquy,"Very cool and informative.  I think your last sentence lacks credibility, though:

> This is why to me the argument, that people outside of the community would think Perl6 has to deprecate Perl5, simply makes no sense.

Maybe by ""simply makes no sense,"" you're actually arguing, ""is not the final word.""",1517670260.0
mr_chromatic,"Isn't K a proprietary language? The version numbering of proprietary software seems like a confusing example; I'm old enough to remember Windows, Word Perfect, Oracle, Visual Basic, Java, and a few other things....",1517690114.0
rb_me,"The naming confusion thing is just ridiculous and is a joke when used as an excuse.  Anyone who takes the time to read up on Perl can figure out what Perl 5 and Perl 6 is all about in 10 seconds. Doesn't take a rocket scientist. Someone new to Perl who reads the web pages can understand what's going on with Perl in seconds. I'm new to Perl family and it took me 5 seconds to figure out what's up with Perl5 and Perl 6.  There are only two people who are confused with the Perl5 and Perl6 naming convention.
Those who hate Perl and want to bash it will use the naming thing to do do so. The other group are Perl 5 die hards that blame Perl6  for its lack of popularity. Perl5's lack of popularity was due to Python and Ruby/Rails. Not that they are better languages. Pyhton/Ruby  just took off and got hyped up for whatever reasons. Doesn't matter why they just did and Perl got left behind.  Nothing to do with the Perl6 name.  Anyone who is serious and takes an honest look at Perl can figure out all this out in seconds. Saying it's confusing people is just ridiculous.  
",1517709525.0
zoffix,"> What am I missing?

Two things: `qr/.../` constructs a Regex (so you could store it in a variable or use with the `=~` binding operator) and it's a true value, so your grep is always true. Drop `qr` (or replace it with `m`) to actually match stuff.

Also, the `/(?!foo|bar)/` is *anything not followed by ""foo"" or ""bar""*. The end of string would be such a place for any string, so it'll always match, thus that gives you all the files.

The proper way to write would be `/\A((?!foo|bar).)*\z/` *from start to end, zero or more characters each of which isn't followed by either ""foo"" nor ""bar""*, but as I mentioned earlier, just negate the grep's assertion rather than regex.",1517636064.0
zoffix,"You can run `perldoc -f grep` in your terminal to get [documentation for grep](http://perldoc.perl.org/functions/grep.html)

It'd just be something akin to:

    say for grep /foo|bar|baz/, @files

With the regex being just [a bunch of alternatives](https://perldoc.perl.org/perlretut.html#Matching-this-or-that).

Depending on what's in your strings, you may wish [to quote them](http://perldoc.perl.org/functions/quotemeta.html), to ensure they're taken as literals instead of regex syntax.

    say for grep /\QMy (first)? Perl Script\E  |  \QSomething Else\E  |  Perl\s+[56]/x, @files",1517635513.0
jkister,"not sure if you mean:

    my $sql = 'select id,page, ...';
    my $sth = $dbh->prepare($sql);
    $sth->execute;
    while(my $row = $sth->fetchrow_hashref){
     print ""value of id is: "", $row->{id}, ""\n"";
     print ""value of page is: "", $row->{page}, ""\n"";
    }
 ",1517606909.0
marvin_sirius,"If you want to use a hash without the overhead of fetchrow_hashref, you can reuse the same hash for each fetch by using bind_columns. The other trick is to put the list of selected columns in perl so that you only define them once. Then you can use that list to generate the SQL.

See: https://www.perl.com/pub/2001/03/dbiokay.html/#binding%20columns",1517619254.0
sunburnd,"my $fields = $sth->{NAME};

for my $each (@{$fields}){
         print $each;
}

Mix with fetchrow_hashref and don't forget to alias your column returns with 'as'.

Forgive syntax posting from phone....",1517626857.0
NicheArchitecture,"Could somebody explain to me what all the moose references mean? I'm not understanding all these references to moose. Is this just for comedic effect, or am I not understanding something? ",1517592619.0
Twirrim,"That seems fine, but you're going to have to consider the update situation.

Nginx has no clue when the data gets old, so you have to clear it from the application side, but your application has to know _when_ clear the file.  What logic triggers a clean up?

It gets even worse when you consider horizontally scaling up the application servers.  Now you've got to not only have the application (or nginx) aware of when the cache needs cleaned, it also has to co-ordinate with the other servers in the cluster.

I would generally aim to have a small, short term cache in the application logic.  It looks like the CHI library should handle the use case (https://metacpan.org/pod/CHI), meaning you could drop in a quick:

    my $response = $cache->get(""foo"");
    if ( !defined $response ){
        $response = generate_response(""foo"");
        $cache->set(""foo"", $response, ""1 minute"");
    };
    .... do whatever ...",1517590153.0
sobrique,"If the file handle is never closed, there will be no EOF, then it will stall waiting for IO indefinitely. 

So it depends what your shell prog and shell args are.

Also - you'd be far better off using lexical filehandles:

     open2 ( my $output, my $input, ""command here"" ); 

    print {$input} ""Stuff\n"";
    while ( <$output> ) {
         #more stuff; 
    }

But you may find `IO::Select` to be useful here, because you can use the `can_read` method (with a timeout) to see if a fh is currently readable. ",1517501993.0
briandfoy,"I've often found that these issues depend on what the particular program is trying to do. 

Have you tried IPC::Open3 and reading STDERR too? Maybe the program is stuck trying to tell you something.",1517513598.0
bobthecimmerian,"I know Java well and only have weak familiarity with Perl.  But my position on interfaces and mocking has an extra level of depth to it - if your interface requires any complicated effort to mock, *then* it's a code smell or design failure.

Interface has five methods, and stubbing those methods well enough so that you can effectively test something takes a minute each?  Rock on.  Interface has 37 methods, or some of the methods return another class or interface that is required in your test, and those classes or interfaces have methods of their own that return another class or interface that is required in your test?  Something is wildly wrong.

This is the beast of ten thousand Java tentacles that needs to be untangled at my work.  Hundreds of lines of code, if not thousands, need to be executed to initialize everything we need for the most trivial of unit tests.  I dream of burning the whole thing down and starting over, but the million line monster is profitable so it's not going anywhere.",1517748482.0
daxim,[Tie::Hash::Indexed](http://p3rl.org/Tie::Hash::Indexed) is faster.,1517403553.0
ew73,"That's easy to fix.  Stop saying, ""No remote workers,"" and suddenly you're rolling in developers.  ",1517379802.0
perlpunk,"Also good suggestions for recruiters:

- Consider replying to your applicants. If an application from a perl dev with 20 years of experience and a good match of desired skills doesn't at least get a reply from you, that's embarrasing.
(I'm not saying this is generally the case, but it was my experience for my last two perl applications)

- Also tell potential applicants up front if you are able to hire people from other countries. It's annoying to find that out after you prepared your CV files and went through the cumbersome form filling and upload process, that 'remote' only means ""Oh, we only meant US people"".

- Allow remote, like ew73 already said.",1517408270.0
sobrique,"Pretty sure part of the reason ""perl"" is a highly paid language is because it's a utility thing. I am a skilled sysadmin who uses perl loads. 

If you think of me as a just a perl developer, then frankly I am overpriced. ",1517386410.0
zakame,"Its a challenge also for Perl developers seeking jobs like me, who is in a country where Perl opportunities have all but dried up, and have to look at either (a) moving out to somewhere that has such opportunities, or (b) find someplace that offers remote work.  Thankfully, I'm currently on (b), and while (a) is an attractive option, under my current circumstances I'd prefer not moving around for the time being.

FWIW, diversifying my own skills to work on other opportunities is a given; it seems an easy flip for me to go into a sysadmin/devops role, but I like to work more on developing with Perl (in whatever form, be it 5 or 6) as much as I can.",1517458566.0
hawkshade,How do you suggest someone who has been coding in Perl for bioinformatics break into this field? Ive sent dozens of applications for strictly Perl Developer jobs and I haven't received a single response. I grew to love it after creating functions for my professor's Bioperl wrapper application. It seems that the demand is high for just mid-senior level developers in NYC.,1517413373.0
crashorbit,"Convincing my boss that I can make good use of remote perl talent is hard.  Lots of people list perl on their resumes but when asked they don't know what Moose or Catalyst are.  
As always [Sturgeon's law](https://en.wikipedia.org/wiki/Sturgeon%27s_law) applies
",1517411737.0
zoffix,Why are you [spamming this](https://www.reddit.com/r/perl/comments/7t8y7o/perlbrew/) here? I'd wager most of users in this sub know what `perlbrew` is.,1517325445.0
daxim,"> I have also implemented the [Unicode Collation Algorithm](http://unicode.org/reports/tr10/) which allows us to sort strings in a unicode aware manner. Javascript has a [Intl.Collator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator) functionality buitin but unfortunately it uses a slightly different semantics so I had to write my own implementation.

/u/pmurias, I would like to learn the details of the difference. Are both implementations Unicode compliant?

I noticed that you extracted the UCA [into its own module](https://github.com/pmurias/unicode-collation-algorithm) so it can be used independently of rakudojs. Can the same be done for the NFG string implementation? I think it would be very valuable for Node to have non-shitty strings.",1517322869.0
perlancar,"The Perl 6 port of Perl 5 CPAN modules are also a great way for Perl 5 programmers to learn about the differences between Perl 5 and Perl 6. The modules come with good documentation on this ([one such example](http://modules.perl6.org/dist/List::Util:cpan:ELIZABETH)). Nice work, Liz!",1517466182.0
scottchiefbaker,I heart SQLite so much.,1517272003.0
daxim,"Minor style problem: package names should reflect the purpose, not a particular mechanism of the implementation. Remove the `Role` part from the package name. Programmers don't name their abstract base classes `…::ABC::…` or their plain classes `…::Class::…`, either.

----

You are trying to reduce the complexity of your [god object](https://en.wikipedia.org/wiki/God_object) by grouping together particular functionality and giving it a (delegated) name, but that's akin to sweeping dust under the rug: it's hidden from initial sight, but still exists. By accreting such a big object, it is likely that you have fallen into the trap mentioned in the article:

> Because this object holds so much data and requires so many methods, its role in the program becomes God-like (all-knowing and all-encompassing). Instead of program objects communicating among themselves directly, the other objects within the program rely on the single God object for most of their information and interaction. Since this object is tightly coupled to (referenced by) so much of the other code, maintenance becomes more difficult than it would be in a more evenly divided programming design.

Try and think along this line: could the logging/configuration/cache possibly be provided by a different implementation than each role you have? Perhaps you have written tests and want to use a stub/mock implementation there instead of the real code; that already counts. Then instead of roles, use object instances in the constructor (aka dependency injection pattern):

    method new(     # not Moose, but I think you get the idea
        # ↓ named param key
        #          ↓ associated default value
        :$log    = MyApp::Log->new,
        :$config = MyApp::Config->new,
        :$cache  = MyApp::Cache->new,
        → MyApp
    ) { ... }

    # provide default implementations
    MyApp->new();

    # use a certain implementation supplied by the caller
    MyApp->new(config => t::MyApp::Mocked::Config);

Doing so makes for loose coupling. Let me know whether this works for you.",1517247075.0
Grinnz,"> The requirement to make several requests to other services hurt us though. The kicker was, we had to make the requests concurrently and compute concurrently on the responses. This was because the data needed for one request was coming from two separate data stores that could be fetched and processed and rendered concurrently. In other words, we needed threading.

Threading would be great for this, but since it sucks in Perl, forking is another viable option and has far less performance drawbacks in Unix. IO::Async and Mojo have [wrappers](https://metacpan.org/pod/IO::Async::Function) to make it [as easy](https://metacpan.org/pod/Mojo::IOLoop::Subprocess) as using threads for that purpose (I even wrote a [plugin](https://metacpan.org/pod/Mojolicious::Plugin::Subprocess) to make it even easier in Mojolicious apps). Of course you need a webserver that runs an event loop you can use, like the ones provided by Mojolicious.",1517201040.0
codon011,"While working for a then-popular online phone directory, we developed a system that used mod_perl with a custom connection handler to do parallel searches against multiple data stores. It involved opening multiple socket connections and doing non-blocking polls to get results as soon as they were ready. Once our allotted time was up we would merge the results from the queries that were done and return the results up the chain. These queries could have multiple levels of parallel and serial searches. ",1517226103.0
subogero,I wonder how Mojolicious' non-blocking user-agent would have performed on a single thread.,1517211953.0
jplindstrom,"I've been working a fair amount with the Mojo async Promises recently and it's very nice once you get your head around it.

You don't have to necessarily use the Mojo web server or Hypnotoad just to use the IOLoop for making concurrent web requests. Calling `->wait` on a promise will spin up an event loop if needed.

Look at `Promise->all` and the `Mojo::UserAgent->get_p` method.

I have no idea how performant this is though, so I'm interested in any benchmarks you might do :)",1517241057.0
xiaoyafeng,"I think [Coro::Multicore](https://metacpan.org/pod/Coro::Multicore) might be a right way to go: keep perl in a single thread, run multi-tasks in Coro.",1517224886.0
ThirdEncounter,"I wish these blog posts had better, more descriptive titles.",1517144603.0
tm604,"Welcome to planet Perl!

One way of writing this in perl5:

    #!/usr/bin/env perl
    use strict;
    use warnings;
    # Declare a hash for word => count lookups - http://perldoc.perl.org/perldata.html
    my %word;
    # From right to left:
    # @ARGV is the list of files from commandline
    # map { local $ARGV = $_; <>} is a way to read the lines for each file into a list
    # map { /(\w+)/g } extracts a list of words (defined as sequences of a-zA-Z0-9_ characters) from each line
    # ++$word{$_} for increments the count for each of the words in the final list
    ++$word{$_} for map { /(\w+)/g } map { local $ARGV = $_; <> } @ARGV;
    # Display the results, most popular first
    print ""$_ => $word{$_}\n"" for sort { $word{$b} <=> $word{$a} } keys %word;

It can be neater, though - even for something as simple as this I'd use modules such as [List::UtilsBy](https://metacpan.org/pod/List::UtilsBy#rev_nsort_by) and  [Path::Tiny](https://metacpan.org/pod/Path::Tiny#lines,-lines_raw,-lines_utf8).

This version would mainly be suitable for writing directly on the commandline and for use on a small number of files. With large amounts of data it uses more memory than it should.

Note that this is perl5. Given the Cixl name, I'd imagine that a Perl6 version would be of more interest - presumably someone will oblige!

EDIT: sorry, just noticed the STDIN part - that would be more like:

    perl -e'++$word{$_} for map /(\w+)/g, <>; print ""$_ => $word{$_}\n"" for sort { $word{$b} <=> $word{$a} } keys %word' CMakeLists.txt < file1 ... fileN
",1517035305.0
raiph,"    .put for words».uc.Bag.sort({ -.value, .key })».&{ .key ~ ' => ' ~ .value } ;

The rest of this comment explains how I arrived at the above P6 statement. I started with:

    .put for words ;

`.put` is a method that coerces its *invocant* to a string, displays it, and appends a newline. The invocant, if explicit, is to the immediate left. In this case there is no explicit invocant so `.put` instead acts on the implicit *it* (aka ""the current topic""). So read `.put` as ""put it"".

`for` in the middle of a statement does the operation on its left for each element in the list on its right.

`words` yields a list of the words read from stdin (which in turn automatically comes from the files you pipe in to the script). (In more detail, `words` calls a method on [`$*ARGFILES`](https://docs.perl6.org/language/variables#Dynamic_variables), specifically [`IO::CatHandle.words`](https://docs.perl6.org/routine/words#(IO::CatHandle%29_method_words).)

This gets us something like:

    foo
    bar
    foo
    baz
    bar
    qux
    ...

The above first version of the statement displays the words in the input, in the order they're encountered, one per line. Continuing:

    .put for words».uc ;

This prints exactly the same list, in the same order, but with the words uppercased.

(`»` invokes the operation that follows it on each element of the list that precedes it. `»` also tells the compiler that it has the right to do the operations in parallel if it wants to. Regardless of whether the compiler actually does them in parallel or not, the end result is returned in the same order as the input. That doesn't matter in this case given the histogram end result we're heading toward but I'll return to this point.)

To get a histogram, `.Bag` the list:

    .put for words».uc.Bag ;

At this point we've got something like:

    FOO     3
    BAR     1
    BAZ     12
    ...

Now sort the list by descending count:

    .put for words».uc.Bag.sort: &{ - .value } ;

`&{ ... }` is an anonymous closure (function). The code in the closure reads as ""negate its value"" where ""it"" is the histogram entry, the entry's key is the word and its value is the count for that word. So the sort is by the count, in descending order.

Finally, improve the sort closure to include a secondary sort by the word itself (and stick it in parens so we can follow it with a chained inline method closure) and append said closure that switches to the format chosen by /u/tm604:

    .put for words».uc.Bag.sort(&{ -.value, .key })».&{ .key ~ ' => ' ~ .value } ;",1517104348.0
Grinnz,What about it?,1517013985.0
hobbified,"FWIW, that tutorial is a great example of the right way to do things... in 1996. Here is a version of the server with far less nonsense:

    #!/usr/bin/perl
    use strict;
    use warnings;
    use IO::Socket::IP;

    my $port = shift || 7890;
    my $listen_addr = ""localhost"";

    my $server = IO::Socket::IP->new(
      LocalAddr => $listen_addr,
      LocalPort => $port,
      Listen => 5,
    ) or die ""Couldn't listen: $@"";

    while (my $client = $server->accept) {
      my $name = $client->peerhostname;
      print ""Connection received from $name\n"";
      print $client ""Hello!\n"";
      $client->close;
    }

and for the client:

    #!/usr/bin/perl
    use strict;
    use warnings;
    use IO::Socket::IP;

    my $host = shift || 'localhost';
    my $port = shift || 7890;

    my $sock = IO::Socket::IP->new(
      PeerHost => $host,
      PeerPort => $port,
    ) or die ""Couldn't connect: $@"";

    while (my $line = <$sock>) {
      print $line;
    }
    close $sock;

If your perl is a little bit older (more than six years, but less than twenty), you can substitute IO::Socket::INET for IO::Socket::IP.",1517028324.0
davorg,"To back up what [hobbified wrote](https://www.reddit.com/r/perl/comments/7t8l66/what_is_connection_recieved_from/dtb3t69/), please don't use the TutorialsPoint site. They have no interest in keeping their tutorials up to date. As far as I can see, they're just there in order to make money from the adverts.",1517123444.0
I0I0I0I,Err... NAT,1517009687.0
Grinnz,"Thank you for this well-reasoned response, jnthn.",1517013949.0
ogniloud,"In the light of what has happened lately,  this was quite refreshing to read. ",1517020062.0
masta,"Meh.... 

Here is an awk one liner

    awk -F '^""|"",""|""$' '{print $2,$3}' whatever.csv

",1516983196.0
Grinnz,"Proposal for reassignment: http://lists.scsys.co.uk/pipermail/dbix-class/2018-January/012740.html

mst's response: http://lists.scsys.co.uk/pipermail/dbix-class/2018-January/012770.html

Current DBIx::Class permissions: https://cpanmeta.grinnz.com/perms#=DBIx::Class",1516839090.0
EdibleEnergy,"I didn't participate in the vote, but I'm glad all parties came to an agreement and I'm glad ribasushi is still interested in maintaining the project.",1516910090.0
scottchiefbaker,Is this related to the `DBD::MariaDB` stuff going on?,1516850586.0
indigo_kat,"Next time somebody proposes that they take over someone else’s CPAN publishing rights, there should be a requirement that this person delivers a tar ball within a calendar month. If not, then the change ought to be reverted to the previous owner. No exceptions. ",1516878501.0
zoffix,Gah! Comic Sans! [How could you](http://www.comicsanscriminal.com/)! 😂,1516813521.0
zakame,"FWIW there's [Docker Hub](https://hub.docker.com/_/perl/) images of perl, covering almost all releases down to 5.8.9, and latest releases now also being built on arm64 and other architectures.",1517536358.0
indigo_kat,"More of this sort of article, pretty please, and less of the divisive BS. Thx in advance.",1516690403.0
mao_neko,Great Scott!,1516704051.0
justAnotherCodeGuy,"I could not find what sort of hardware this is running on.
Also how hard was it to get the info (speed, temp, etc) from the car?

Pretty graphics!",1516727040.0
FuzzyBear2017,"got it:
		$text =~ s/\[HYPERLINK: \S+\]//g;


closed.",1516623910.0
cluelessbilly,"I understand your desire for something new to teach/write blogs/books about, but there's a bunch of Perl 5 programmers that just want to code in the language they love.",1516655970.0
Grinnz,"""A call for cooperation"" is a rather one-sided description of the blog.",1516641970.0
Grinnz,"In order to make sure you are matching the characters you want, make sure to `use utf8;` in the script (so the source code, including regexes, is decoded from UTF-8), and also decode your input from UTF-8 as you read it from the file (either by setting the `:encoding(UTF-8)` layer on the filehandle you open, or running each line through `my $decoded = Encode::decode('UTF-8', $input)`. (And you will also probably want to encode the results back to UTF-8 for however you are outputting them.) If only one of these things is occurring, your regexes won't match the input characters.

Regarding `$`, remember that it is not just the end of line character, but it also matches the newline at the end of the line (as `\Z` does, but `\z` does not). This is probably not your issue, but in your example substitution, you will be removing the newline character at the end of the line if one exists.",1516567401.0
PerlNacho,"If you expect this string to contain multiple line endings, include the /m modifier on the regex to match all of them:

    s/(ð$)/θ/mgi;

Also you don't need the parentheses:


    s/ð$/θ/mgi;
",1516565783.0
kumogami,"Probably has something to do with encoding. The following program: &nbsp;

    my $str = 'boop test meowð';
    my $str = ""boop test meow\ð"";                                                                                       
    $str =~ s/^\w+\s//;                                                                                                 
    $str =~ s/\s\w+ð$//;
    print $str . ""\n"";

produces:&nbsp;

    ð testð
but the following:&nbsp;

    use utf8;
    my $str = ""boop test meow\ð"";                                                                                       
    $str =~ s/^\w+\s//;                                                                                                 
    $str =~ s/\s\w+ð$//;
    print $str . ""\n"";

might produce:&nbsp;

    test 

Does that help?&nbsp;",1516566377.0
duskwuff,"`^` and `$` refer to the beginning and end of the entire input (or a line if `/m` is set), not the beginning or end of a word.

You probably want `\b`, which matches a word boundary -- `ð\b` will match a `ð` at the end of a word, for instance.",1516574959.0
haaarg,"This could be due to line endings.  Files created on windows may end up with \r\n line endings, and depending on how you are reading those lines, they may not be stripped off.  $ will ignore the trailing \n, but not the \r.  It may help to examine the content of the strings more carefully.  You should be able to see things like non-printables easier with something like:

    use Data::Dumper;
    $Data::Dumper::Useqq = 1;
    print Dumper($var);",1516638516.0
leonmt,Good stuff :-),1516698760.0
EdibleEnergy,"I left a comment on the blog itself, but wanted to reiterate that this is awesome.

When I first saw async/await for javascript I didn't understand why it was anything transformative, as it's really just syntactic sugar.. but once you start using it you can see how it really cleans up your code and renders it as or almost as readable as synchronous code.",1516976475.0
perlgeek,"I really hope that subroutine signatures will work out fine, so far it's looking good. That's also one of the must-haves.

Other things where Perl 5 really needs to improve:

* The string/bytes distinction. There is simply way too much that can go wrong here at the moment, with accidental concatenation of strings and bytes leading to encoding messes all over
* A good syntax for classes and attribute, in core. Yes, ""in core"" matters, otherwise your project ends up using Moose, Mojo::Object, Mo and Moo all in the same process (brought in through different dependencies), and that simply isn't a productive state, nor good for teaching and marketing
* a better concurrency story (yes, that's something where Perl 6 really does do better)

On the meta level, I get the impression that Perl 5 lacks a coherent vision and steering in the language development process. But, not being subscribed to p5p, that might not be the case, and it simply isn't communicated to the outside well enough for me to pick it up.",1516483847.0
leonerduk,"I would say the best way to answer that is to look at what sorts of things CPAN has been trying to provide for the language. For example, there's quite the number of modules using the pluggable keyword hook to provide new behaviours into the language, which might look like candidates for being migrated into core itself.

A few that come to mind are MAUKE's `Function::Parameters` (which looks like it's inspiring signatures), `Switch::Plain`, and my own `Syntax::Keyword::Try` and `Future::AsyncAwait`.

My medium-term goal with the two I wrote at least, is to continue to experiment with the ideas as CPAN modules until they seem nicely stable and widely-used, and if such time comes that they become the de-facto way to provide that kind of behaviour, consider at that time moving the functionality into core itself, with the module becoming a simple wrapper around the appropriate `use feature` flag.

To answer your question on what language features Perl 5 needs, I'd then list

 * Signatures
 * One-of-many value dispatch
 * `try/catch`
 * `async/await`

All four of these are already available on CPAN however; moving them to core is really just an exercise in convenience and minor feature or performance improvement.",1516493650.0
zhouzhen1,"* Better to put something like Moose into core, and make it a ""standard"", make it taught in the Perl books. 
* Function signatures as mentioned by others. IMO Function::Parameters is good enough. It's better compared to that stll-experimental core feature. So why not just port features of Function::Parameters into Perl core? Similar to the case of Moose sometimes I feel that there are too many CPAN modules to do one thing, like OO, signature, try/catch, async, json/yaml, etc. They can be distracting sometimes. i.e. I see quite a few people today either do not know Moose/Moo, or know them but struggling in selecting among Moosei/Moo/Mouse/Mo/Moops/etc. Why not having some of them ""standardized"", moved into core, and have the books/tools better focused? 
* Smartmatch. If it cannot be perfectly fixed, why not limit it to its several existing common use cases like ""in"" operator for arrayref/hashref?",1516591923.0
DeepFriedDinosaur,"A good build and deployment solution for applications written in perl that given an app organized like a typical CPAN dist, a .cpanfile and a few other config values will:

 * build the perl I specified
 * ""build"" my app 
 * install 3rd party modules alongside said app
 * bundle it all in a tar/zip for easy deployment to another system (assuming identical OS to the build system.

I have build and used a bunch of homegrown systems over the years but would like to find one that works like this, with a lot more collaborators.  Documentation and particlalry examples are key. It would make it easier to provide packaged software solutions and do automated upgrades/downgrades into clusters.",1516723233.0
jteikon,First class support for try catch.,1516611771.0
saiftynet,I personally don't feel the language itself needs to change much....too much change and things break and we end up with something that is not Perl 5. Damien Conway's [DIOS](http://search.cpan.org/~dconway/Dios-0.000007/lib/Dios.pm) seems like something that may make Perl much easier to use.  ,1516626272.0
zoffix,"At least some of [Perl 6's colonpair shortcuts](https://twitter.com/zoffix/status/839807414211854337). Boolean ones in particular.

This is the one thing lacking I notice right away when switching from Perl 6 to Perl 5 code because its lack makes my code a lot more verbose.",1516491540.0
mr_chromatic,"> Someone commented that no new Perl 5 feature has been successful since LW began work on Perl 6.

That's an odd statement. I'm thinking Moose, DBIx::Class, Mojolicious, NYTProf, defined-or, substitute-and-return, pluggable keywords, foldcase, named captures, hash complexity hardening, the feature pragma, lower memory use, Plack/PSGI, Test::Builder, cpanm, and a few more things I use all the time.

(Yes, I deliberately mentioned CPAN modules at the start and end. Understanding why is left as an exercise for the reader.)",1516481184.0
cygx,"> Someone commented that no new Perl 5 feature has been successful since LW began work on Perl 6.

I know of at least one person who [pushes this narrative](http://perl11.org/blog/p5p-incompetence.html).

> I suppose that memory management and concurrency would be the two features that would make me switch, assuming comparable performance in the common use-cases.

A far as I can see, Perl 6 does indeed have the better concurrency story to tell. Performance, however, is still an issue, and it is an open question if the theoretically achievable speed-up will manifest in practice any time soon. The fact that NQP - or in rare cases, even Perl 6 - can sometimes outperfom Perl 5 show that the potential is there, but that has been the case since the Parrot days when people got excited about PIR microbenchmarks...",1516483475.0
batlock666,"* gradual typing
* generators
",1516611193.0
aanzeijar,"I would really like ""package"" to return a lexical representation of the package. Then you can:

- omit the final ""1;"" in modules, because a file that consists of one giant package block will return itself
- save those return values in scoped variables which generally works really well in node and python.
- hopefully you can have anonymous packages",1516628875.0
petdance,"The article is by brian d foy, not Damian Conway.",1516634949.0
anonymous_subroutine,Everything in cperl,1516520393.0
FuzzyBear2017,"Fixed.

Just had to move this out of the loop:

$pdf->update(); ",1516458964.0
anonymous_subroutine,"Rakudo

(edit: Has the benefit of being 6 letters as a subtle homage to the old name)",1516390743.0
neilbowers,"Roku

It's a four-letter word.
It's Japanese for ""six"".
It's similar to Rakudo.",1516434556.0
mohawkperl,Full rename to allow release of a future version of Perl 5 as Perl 7+,1516385040.0
marvin_sirius,Camelia,1516389431.0
elbitjusticiero,"6lang (pronounced Slang)

EDIT: Not my idea! See /u/ogniloud's comment below for the source.",1516401406.0
hzhou321,I thought rakudo already sticks. Who really care about the compiler/interpreter/language distinction (as a serious question)?,1516389597.0
kaiorafael,Q6 or P++,1516384524.0
hercynium,"Kyō (興, Japanese for joy/fun/delight)",1516392556.0
bonkly68,p6,1516404885.0
jferrero,"Perl

(Yes, only ""Perl"")

When I want to write a program, I just need to put

    #!/usr/bin/perl

If I want to write a program in Perl 5, I just have to add

    use v5;

If I want to write it in Perl 6 ... well ...

    use v6;

Easy, right? We just need to have ONE binary perl (or maybe a script) in the system.
",1516411963.0
saiftynet,"just 6.  Here are 6 reasons.

1) No reason a programming language has to match [A..z]+

2) Identifies a language that is a constant (as opposed to a variable)

3) Is more likely to be distinct, recognisable, and mark a radical difference in other programming paradigms

4) Perl 5 fans will know it is derivative of Perl, Perl haters will say ""Pheww..at least it's not Perl.""

5) A Butterfly has 6 legs, as does Larry riding a camel.

6) Lastly, in Swedish it is ""sex"", and who doesn't like Swedish sex?",1516399888.0
MattEOates,"YamaScript, just `yama` for the CLI invocation. Where Yama is a god in many eastern cultures including vedic and buddhist related ones. He's depicted with six limbs and the sanskrit of the name means ""twin"", riding a water buffalo (we can make it a camel right?). In charge of death and controlling the cycle of rebirth.",1516410186.0
GlauchanGuy,"I wonder how Larry feels about all of this. I know you don't want any discussion, but I think his comments on this situation would provide some valuable insight. I'm just a Perl 5 programmer. As cool as Perl 6 is I haven't done much with it at all, and am not very confident my input will have considered the Perl 6 side of things",1516393863.0
scruss,Python 4.,1516414984.0
jjmerelo,"þerl
(looks like Perl, easy key access -- altgr-P, Unicode hasn't been used in language names so far, and Unicode is important in Perl6, pronounced therl)",1516437581.0
neilhwatson,Llama,1516382421.0
indigo_kat,"You are wasting your time.These are Larry Wall’s languages and he gets to name them, not you.",1516402549.0
mohawkperl,Perl 6 (i.e. no rename),1516381587.0
steve_mynott,Beryl,1516382276.0
zoffix,ZofLang :),1516381893.0
frezik,"Capricious ANalytical Tool of Enumerating Repetitive Binary URbane Yaks

(Canterbury)",1516383654.0
SmokeMachFCO,Lang6,1516674156.0
comborico1611,"6lerp, pronounced Slurp",1516891312.0
treenaks,ES6,1516388010.0
rrohbeck,Perm.,1516449775.0
sunshine_killer,XLang,1516388140.0
sunshine_killer,ArrowLang.io (io for being trendy?),1516387048.0
saiftynet,"The principle issue is targeting an ever diminishing Perl developer base to the right area, to ensure that the decline is reversed.
1) A VM back-end will a) constrain the platform to those being VM capable, and b) apply an unnecessary overhead.  Sure performance will improve...it will largely be because our CPUs get faster, and memory available larger.

2) porting Perl 5 modules to Perl 6 sounds great, but this dilutes a developer base whose man-hours are finite, and IMO should be concentrating in developing new modules and updating existing ones.

The value of programming language lies in performance (any change that reduces performance, IMO, is an unacceptable regression) and utility. Let's not focus on things that reduce either.


I would like Perl 6 to be able to become backwards (or sideways..seeing as Perl 6 is not Perl 5's descendant) capable so that it can use Perl 5 modules (suddenly CPAN is Perl 6's oyster) and I would suggest developing Perl 5 modules that incrementally introduces Perl 6 features into Perl 5, creating an easier future transition should the developer desire it. This would mean that the language developers continue making their program more accessible, and Perl users can focus on using Perl whichever version serves their purpose.",1516397422.0
Grinnz,"I appreciate your perspective on this Zoffix, and I hope more of the community shares it, but I think the author's intent was clearly shown to be how we interpreted it in the followup in the #perl6 channel and the reddit post.",1516384050.0
scottchiefbaker,I'm glad to read this follow up/clarification. I feel better about both projects and the communities that support them.,1516378571.0
frezik,"Odd that porting Perl5 to a new backend is a non-starter. I thought it was one of the better ideas of the original Open Letter. Porting Perl5 to a modern VM, treating it like one of the many platforms Perl5 already supports, seems like a good idea to me.

As for rewriting existing Perl5 modules, the problem isn't the multitude of pure-Perl distributions. Most of those could likely be ported to Perl6 (or a pidgin of it, anyway) without too much trouble. XS modules are where the headaches are going to be.",1516373722.0
cluelessbilly,"Glad to hear about the alias. 
Hopefully Perl 5 porters will use it as a chance to release most recent Perl 5 as Perl 7 with best 'modern perl' modules added into the core so the community can market it as a new page.",1516396239.0
zoffix,"In Perl 5 you can use [List::Util::pairs](https://metacpan.org/pod/List::Util#pairs) or [List::Util::pairmap](https://metacpan.org/pod/List::Util#pairmap)

    use List::Util qw/pairmap/;
    my @a = pairmap { [ $a, $b ] } split "" "", ""3179500 3241420 3179500 3241820 3180300 3240926 3180300 3242314"";

In Perl 6, you can [rotor](https://docs.perl6.org/routine/rotor) over [words](https://docs.perl6.org/routine/words):

    ""3179500 3241420 3179500 3241820 3180300 3240926 3180300 3242314"".words.rotor: 2",1516292475.0
linxdev,One of my biggest issue with my programs is memory size over time.   Once a system boots it is intended that some Perl programs run 24x7.  They'll have a worker function that is called from a while() loop which sleeps N seconds left after execution of the worker().  One way I handle memory issues over long periods is to fork() the worker.  The only long running Perl program is simply the main() function which does the execute and sleep loop.,1516290745.0
sunshine_killer,"started to heavy breathe over this since I missed the last SLC one, told my wife she then told me it was the same time as her family reunion and we haven't seen these people for years. :( so sad because I haven't been to one of these yet and use Perl every day. frustrated. I will try to make one or two days we'll see.",1516637846.0
dereferenestrated,"Sounds like you're looking for the [Graham scan of a convex hull](https://en.m.wikipedia.org/wiki/Graham_scan).

You could check out [Math::ConvexHull](http://search.cpan.org/~smueller/Math-ConvexHull-1.04/lib/Math/ConvexHull.pm).",1516222590.0
readparse,"Some facts and one opinion:

* Getting people to adopt a language is a marketing problem, whether you like it or not.  
* Perl 6 is not the same language as Perl 5.  It's a completely new language.
* If you want people to adopt a new language, they have to be drawn to it.
* One of the worst ways to draw people to a language in 2018 is to call it Perl.

I assume Perl 6 is amazing.  I haven't used it because, I as I have said many times, if I had time to deal with a new language, it would be a language that will get me work.  That's essentially Node and Python today.  

Perl 6 _deserves_ a chance to be adopted (to use the author's ""daughter with a difficult childhood"" analogy).  Let's give her that chance by allowing her to carry a name that doesn't come with 20 years of baggage.  

Undeserved baggage?  Absolutely.  But in marketing, it doesn't matter.",1516205494.0
cluelessbilly,"I have only one thing to say to Perl6 people.

Please stop hurting Perl 5. Your project will never be widely adopted and keeping the same name is hurting real workhorse.",1516222465.0
petdance,"It's frustrating to me that the Perl 6 folks are in love with the idea of Perl 6 and don’t understand that the people who aren't in love with it have no reason to be.

Show me something awesome being done with Perl 6 that illustrates the benefit I will see in moving from Perl 5 to Perl 6.",1516207756.0
pre_action,"Side note: Why aren't comments allowed on Perl.com? A blog without comments isn't a blog.

If you want the Perls 5 and 6 communities to be closer, you need to explain how it will benefit Perl 5, and how the Perl 6 community will contribute to the effort. You have done neither: This article says that the Perl 5 people should make Perl 5 run on Perl 6 so that Perl 6 can benefit from the Perl 5 community's work. You even admit that the effort will be to Perl 5's detriment (although you believe that will be temporary). You also say that people should port Perl 5 modules to Perl 6, but why? What benefit does that give Perl 5?

I have tried to help the Perl 6 community with Perl 5 tools (CPAN Testers), and it seems to me that they do not want help, and would prefer to do their own things (http://testers.perl6.org). All the conversations about CPAN Testers for Perl 6 I've had are about how I, a Perl 5 user, should do more work to make CPAN Testers available and useful for Perl 6. This mirrors the conversations about CPAN for Perl 6 and the way that was imposed on Perl 5 to Perl 5's detriment. I'm still open to any contributions for making CPAN Testers work better for Perl 6 modules, but it continually sounds like the Perl 6 community wants to take resources from the Perl 5 community without giving the Perl 5 community anything in return.

So, until Perl 6 stops being an ungrateful, demanding, headstrong, rebellious teenager, you're going to be hard-pressed to get gracious help from their parent, Perl 5. If we are all in this together (which we are), show the Perl 5 community that they will gain some benefit from this melding of communities.",1516213348.0
joelberger,"Look, I've tried to be as accepting as possible of Perl 6. I get that it has been a labor of love for its implementors for a long time. Please, stop trying to force Perl 5 users to adopt it. If it is its own language (a notion that has been promulgated for years by both communities) then it needs to stand and attract new users as any new language would. If it shares enough common heritage with Perl 5 then yes Perl 5 users are likely to migrate.

That said, I can't help but read this article and see it as a change of tone back to when Perl 6 was going to replace Perl 5. This reads as (and indeed actually kinda says) a change of the ""sister language"" dogma back to replacement language. I'm not a fan of this change.

If you really would like to heal the divides between Perl 5 and Perl 6, stop hurting Perl 5. Instead this article proposes stopping Perl 5 development and porting all of CPAN to Perl 6. Sure. Effectively ""let's heal the divide by killing Perl 5."" I'm sorry, no, this isn't healing, this is conquering and it is doing so by giving the lie to the apparent fiction that was the ""sister languages"" argument.

Perl 5 users are proficient in a highly productive language. We write code solving problems and making business successes every day in Perl 5. Last I heard Perl 6 still has trouble with https (this was from a recent blog post). Meanwhile the marketing troubles of people outside Perl not understanding the 5/6 difference continues, the difficulty of marketing Perl 6 as new and different continues, the perception that Perl 5 hasn't had a major version release in 20 years continues, the fact that we can't make a major version release that the outside world sees as a major version release continues.

So if you want to actually heal the divide. Yes, make porting easier, a Perl 5 slang would be great! Meanwhile help us show that Perl 5 isn't dead; the easiest way to do so would be blessing a release of Perl 5 called say Perl 7 or Perl 28 or some other name that ends the confusion. This could be done with or without renaming Perl 6 since of course if the contention is that the version numbers aren't confusing then we could certainly take the higher one for a while, right? This isn't an abstract request, there are some major-version-like features that we would like to highlight and some other things that we could change to give our users sane defaults. This has recently worked wonders for PHP with the recent release of PHP7, a move that was seen as a major public relations win for the much maligned language.",1516209262.0
tm604,"The butterfly and CPAN butterfly projects seem contradictory: if perl5 code can run unmodified in perl6, what's the point of rewriting it?

The idea of stopping all perl 5 development so it can be ported to a slower abstraction layer does not appeal. Presumably anyone in p5p can make (and already has made) their own decision about whether this is something they'd like to do, the existence of perl 6 isn't exactly a secret!

It sounds like the aim is for most of CPAN to be forked, and eventually perl5 code will start using and integrating with perl6. Neither of those seem particularly palatable - reasons I avoid perl6 include the complexity, and because I dislike the syntax. I don't know how widely those reasons are shared, but having to deal with perl6 alongside perl5 when debugging existing/legacy code does *not* sound like a great way to win over new users.

The first proposal would cause me to drop perl in favour of alternatives: options include ES6, Rust, Swift, Nim, C++17... plenty of good choices around these days. We use Perl5 extensively at $work and I'm not sure if it'd mean I'd find another job, or work on porting to a different language: I would not spend time on moving to perl6.

The second proposal seems like wasted effort from a perl5 perspective.

A counter-proposal of ""let them diverge"", on the other hand - that's something I'd really like to see!",1516205243.0
angryxpeh,"> A radical idea would be that the Perl 5 Porters would go back to their original goal: porting Perl 5. But this time, not to different operating systems, but porting Perl 5 to different Virtual Machines. Place a moratorium on new features, with development confined to maintenance on the current runtime. 

How about ""no""?

I don't want my working tool to stop evolving and having new features because your failure of a language is not gaining momentum. 

I don't want Perl 6's world to be built at the expense of Perl. Perl already suffered greatly because of Perl 6 and lost a lot. 

> This should make 2018 the year that people really start to migrate their code from Perl 5 to Perl 6. Be it because they can, they want to try, or just to see how Perl 6 will work out for them.

Someone must be really distant from reality to assume that any company that is using Perl now would do a migration to Perl 6 and not Java, Python, or node.js. Maybe craigslist, and even that is unlikely.
",1516240834.0
Grinnz,"Let me draw your attention to the (much maligned) sidebar description of this subreddit. ""The Perl Programming Language, including both Perl 5 and Perl 6."" One could say as the sidebar does that we are all Perl programmers. Some may use both Perl 5 and Perl 6. Indeed some people use both C and Ruby, or Python and PHP.

Where the conflation breaks down is if you start assuming this means that Perl 5 and Perl 6 programmers are the same. That Perl 5 programmers *want* to port their code to Perl 6, or that Perl 5 porters *want* to stop improving Perl 5, just because we share community space and Perl 6 is ""better"". There is overlap, as with any languages, but they are still separate languages, they have separate applications, have been used in different time periods and places, and thus have separate user bases. Many people (myself included) have their livelihood tied to Perl 5 and/or enjoy using Perl 5. Personally, I have no compelling reason to ""migrate"" any of my code, or suggest such a migration in my place of employment, to Perl 6 or Node or Python, and frankly the latter two would currently make more sense.

If Perl 5 and Perl 6 are not sister languages, the only remaining options are that they are not related or that one of them ceases to exist. We do not intend nor desire for Perl 5 to cease to exist. That is why this letter has been met with such hostility.",1516225112.0
aanzeijar,"I would love writing Perl 6. I like it as a language.

But any of my attempts to port real code so far have been a disaster. Either I can't get it to run in the first place because of the million things that make Perl6 different (most of them in a good way), or worse it's still orders of magnitude slower than the Perl5 version, which is already slow compared to Python.

How do you implement a reasonably fast Sieve of Erathostenes in rakudo? The perl5 version of Math::Prime::Util sieves up to 100mio in 7s on my machine, with some tweaks I can get that down to 5s but it uses COW string hackery that's not easy to port to perl6. The perl6 versions on RosettaStone on the other hand can't even get to 100000 in that time.

This might seem trivial, but unless I know how to push around some integers and memory, all the junctions and hyper-ops in the world are useless to me.",1516210577.0
linxdev,"I develop a product where all the heavy lifting is done in Perl 5.   The first version of this product was written in C back in 2000 and I used Perl to automate testing.  I need to use a lot of these devices together so I expanded testing to include one Perl app on Linux.  We decided to create a J2EE web server piece using this one Perl app as a data collector.  I needed CGI config pages, email notification, heart beat, etc and I wrote those all in Perl.  I moved to using mostly Perl for the next revision of our device.  It is faster for me to add functionality using Perl than C. I have maybe half-million or more lines of Perl 5 code that does REAL work 24x7 for those that depend on what it does.  These folks work 24x7 too.

I looked at Python years back, but I needed a strong community support.  I needed a mature CPAN type repository.  I believe, but there could be doubt, that I use the Perl module Expect more than anyone else.  Python at that time did not have pyexpect.   Same went for Ruby.  The Perl 6 development cycle had me looking at abandoning Perl 5 many many times.  Python looks better each year.

I compile over 200 CPAN modules when I do a firmware build.  I use DBI and various DBD drivers. I use XML, JSON, XS, SOAP::Lite, etc.  My #1 issue today is that developers are abandoning their projects on CPAN.   SOAP::Lite is a fine example of this. Net::Pcap is another.    When I upgraded our firmware build to 5.22.3 I had many issues.  So many in fact that I had to include a PERL_TEST variable in our Makefiles to not test certain modules.  They would fail in areas, but will work with our code. 

Our current firmware runs on 2 pieces of hardware.  Both X86.  One with 1G of ram the other 2.  The previous is older and discontinued by the manufacture, but I still code for it.  It is i586 (not i686).  

My confusion about Perl 6 is that I am not sure where I'd even start.  In our build I am compiling MoarVM and Parrot as extra packages.  I can load them remotely outside of firmware.  Even if I overcome that obstacle I still have issues with all the modules I NEED. 

I'm mostly a one man shop and Perl 6 reminds me so much of my own shortcomings when it comes to completion.  I have many projects that have been in testing for years, but are not complete...
",1516288261.0
ktown007,"Perl was created to solve needs that other tools did not. I use Perl 5 every day for this same reason.

Perl 6 is not solving a need I have. I assume other are not adopting it for the same reason. More modules will not change this.
",1516328751.0
saiftynet,"Perl5 is Perl, and Perl 6 isn't.

Sure they may have commonalities, sure Perl 6 is ""superior"" in many ways.  It corrects many of Perl 5's ""failings""  But in terms of performance Perl 6 fails.  In terms of terms of available useful modules it fails.  In terms of available resources, documentation and standard implementations it fails.

Attention to Perl 6 hurts Perl 5, and Perl 6 is (IMO) the biggest cause of migration away from Perl, to much inferior languages like Python. Python's popularity (again IMO) is down to its deficiencies...which made it easier to learn, and hence the rapid development of module base.

Perl 6 IMO should be an optional extension to Perl 5, and future development should be directed to Perl 5.",1516214647.0
xeeeeeeeeeeeeeeeeenu,"No, I don't support killing Perl 5.",1516200054.0
maxc01,"From my point of view, Perl6 core developers should slow down their pace of improving the core language, and focus more on practical modules.  A wonderful but bare-bone language is not fun if it cannot solve everyday problems easily. When I need to parse json/yaml, or handle serialization, I have to search the internet and compare these libraries if there exists many of them. Doing these things is cumbersome and time-consuming. 

Making more practical modules built into the language itself will attract more users and have a positive feedback on the development of the core language.",1516275539.0
DontwakemeUp46,"Interesting video about making Perl 5 behave like Perl 6 by Damian Conway in his lecture ""Three words"" on Youtube:
https://youtu.be/e1T7WbKox6s",1516261800.0
cygx,"A lot of the comments make is sound as if the mere fact that a programming language with the name 'Perl 6' exists is at the core of Perl 5's problems, and if you could just take back the name, everything would be fine.

That's a pipe dream, because the problem is not the marketing, but the technology: A turtle will still be a turtle (old, ugly and slow) even if you name it 'Racer'.

If you added proper support for things like types, classes, signatures, etc to Perl 5 (cf Reini Urban's [cperl](http://perl11.org/cperl/STATUS.html) for his shot at this), *then* you could start thinking about how to work around the existence of Perl 6 as far as marketing Perl 5 is concerned - and that is a problem that can be solved. Calling it something like, say, *Perl 5k* might work.

But just changing the name of either Perl 5 or Perl 6 without putting in the hard work of improving the technology won't generate sustainable new interest in a language on the decline...
",1516366907.0
pbpstl,"I created account just to comment on this (which is also first post I read on reddit). I am no one in perl community but have been learning and using perl5 for few years now. And I love it! All I got from the letter and discussion here is that I'll have to start learning python3. 
No way I'll invest time/effort to learn perl6 which can't help me find a job. Perl5 is doing great as of now and I still get job offers but I think I'll have to plan for future by learning python3.
I know Python also has same problem of python 2 vs 3. But all I know is that 2 & 3 are not that different as perl5 vs 6. 
A no one like me care about how I can get job using the language that I know/learn.

Note: Author seem more true to herself on IRC than here. And her tone seem to have changed after someone provided a link to IRC discussion.",1516835718.0
-Penfold-,"Sometimes (r)evolutionary experiments fail.  If Perl 6 is an experiment that the majority of the Perl community feels has failed then the logical way forward is to make a clean break.  This is especially true if ""leadership"" has pitched its tent in the experimental Perl 6 camp and have, as a result, effectively abandoned Perl 5.  There is no sane reason for the Perl 5 community to voluntarily self-terminate by continuing to follow the dictates of such ""leadership"".

Solution:  Perl 5 needs to undergo a major version change — go straight to Perl 7, (re)claim the namespace and get on with its life.

Hindsight allows us to clearly see that it was a huge mistake to name the experiment Perl 6.  The mutation of the language was too large.  The community has been fractured.  The popularity of Perl has suffered as a direct result.

If Perl 6 is as good as its proponents seem to think it is, then it should be able to stand on its own feet.  Personally, I would like to see Perl 6 rename itself ""Rakudo"" or something.  Even ""Rakudo Perl"" would be acceptable.  So long as it doesn't have a version number that competes with Perl 5/7.

The version number issue is supremely important.  2 kills/cannibalises 1.  3 kills 2.  4 kills 3.  5 kills 4.  6 is killing/cannibalising 5.  It has to stop.  The only way to stop the carnage is to deal with the source of the problem.  ""Perl 6"" — the name, not the language — is the problem.",1521168897.0
,"I made a personal choice as to what language I would code my business processes, and I decided Perl 5.  It is a stable well supported language, simple to learn, and ticks all the boxes I wanted for a coding language.  I won't use Perl 6 because it is a new language, and I am not keen on complicating my systems with multiple different languages.

Despite the unfortunate rejection of Perl by a large majority of coders in favour of popular languages such as Python, I am loyal to Perl 5 and that will be the language I shall use in all my projects.  ",1522419949.0
mohawkperl,"Trying to add light to the considerable heat here, I have created a thread to capture and allow voting on possible names for P6: https://www.reddit.com/r/perl/comments/7rjr8u/new_name_for_perl_6_languageenvironment/",1516381738.0
xdg,I read the letter and most of the comments here and realized there's nothing I want to say that I didn't already say two years ago in [Perl 5 and Perl 6 are mortal enemies](http://www.dagolden.com/index.php/2589/perl-5-and-perl-6-are-mortal-enemies/).,1516472493.0
mohawkperl,"I wonder whether some of the problem with this ongoing situation is that Larry (pbuh) is:

* the IP owner for ""Perl""
* seemingly not interested anymore in what happens to Perl 5
* not economically dependent on what happens to Perl 5 - in other words, economically his interests and the interests of the Perl 5 folks do not align",1516573990.0
rb_me,"Perl 5 is not dead. It will live on for quite some time due to all the code that's out there. But the fact remains , Perl 5 is not growing its user base. It's not advancing. It's not. It's not. Everyone who commented on the article is obviously passionate about their language. You can continue to have these wars about Perl6 . It killed Perl 5. It's not a Perl 5 upgrade it's a new language. Continue to do this for 10 more years why don't you , until so much more time has passed that nothing advances. It's now 2028 and where are you now Perl 5? What do you think is going to happen? Perl 6 stops development and everyone goes back to Perl 5?
At some point you need to take that leap.  It may not be what you want. It'll go against your core beliefs. Perl 6 may not be better than Perl 5. But if there is any chance, any chance for the Perl community to get out of this infinite loop of nothing, is to take be open to  Perl 6. It has some momentum. It may not be much , but its 100 times more momentum than Perl 5.  The ideas to have Perl 5 run on the Perl6 run time. Why not. The MoarVM is advancing. Why not port Perl 5 modules to Perl 6? doesn't mean you have to use Perl 6. It just opens the door. Your efforts to stop or fight Perl 6 is not going to benefit Perl 5. It's not. How has it gone for you so far? How has this war benefited  Perl5 users?  Go with the momentum . Not saying switch to Perl 6. But be open to ideas like running on the moarVM etc.. Or stay in your infinite loop of nothingness..",1516322515.0
Technologist_EE,"To be honest, I'm new to the Perl scene and I bought a couple of books and I've gone through 2-3 of them already. 

This thread basically convinced me to go with another scripting language. Outside of software maintenance and ""prototyping"", I think Perl 5 and 6 is essentially dead. ",1517510735.0
zakame,"Is there a current effort to get Perl 6 as an out-of-the-box supported language (or, daresay, _default_,) in any Unix-like OS lately?  If I'm not mistaken, there is none.

Perhaps some effort about getting usage of Perl 6 out to more systems (as Perl 5 has done so, ages ago, and what other languages like Python and Go are doing _now_) would be more fruitful rather than pre-supposing the Perl 5 community would jump over to Perl 6 in order to protect its ""future.""",1516463777.0
,[removed],1516201473.0
jjmerelo,"May I propose þerl as a new name? (Read: Therl). The ""þorn"" is just a funny P, reflecting the fact that Perl6 is optimized for fun https://perl6.org/fun/ (and Unicode)",1516381044.0
ottaky3,"It does sound a bit weird (I skimmed your post) .. but sometimes that's how things evolve and nobody has the time or inclination to go and fix them.

It *sounds* like you could do with using perlbrew ..

https://perlbrew.pl/

.. which allows you to install different versions of perl alongside each other.

You may also want to take a look at cpanm ..

http://search.cpan.org/~miyagawa/Menlo-1.9005/script/cpanm-menlo

.. which gives you a relatively pain free way to specify a bunch of modules to install by creating a cpanfile, adding the module names (with version numbers if you need to) to it and  then you can install them all with cpanm --installdeps .

",1516124893.0
clamdiggin,"As mentioned above, perlbrew is a great way to go, but as always there is more than one option.  I have been using `plenv` on my mac and it is also very easy to use.  If you are using to use `brew`, you can install it very easily with `brew install plenv`.

https://github.com/tokuhirom/plenv

Have a look at both solutions and decide which works better for you.
",1516141034.0
MattEOates,You might want to look at Carton for managing bundles of dependencies http://search.cpan.org/~miyagawa/Carton-v1.0.28/lib/Carton.pm,1516148998.0
lindleyw,"A quick way to get a feel for which modules the program uses would be:

    egrep -r '^\s*use\b' .

Assuming the current directory contains the main program and not too many other files other than programs.  Then use either plenv or perlbrew, along with cpanm, to build a personal copy of Perl and install the required modules into that.",1516314290.0
raiph,"> should ... redo his entire code base in a functional manner that is scalable and extensible.

In Perl?",1516159346.0
tarje,"`say` has been a core feature since 5.10 (actually 5.9.5), so enabling it via `experimental` is odd.",1516116322.0
,"Talking about XML validation: both DTD and XSD are horrible. DTD is very simplistic and forces a specific order of elements, and XSD is bloat and impossible to write.

What happened to RelaxNG? That was my favourite. You can write in easily readable compact form, transform it to XML which can be used for validation in `XML::LibXML`.

EDIT: just a clarification: as Gabor Szabo's newsletter summarized your article with ""not every liked it (sic)"" with a link to this comment section. That's not the case! I liked your article! It's just that I'm not particularly fond of XML. When I ask people why they use it, I often get: ""You can validate it!"" My next question of course is what they use for validation, on which I usually get a blank stare, which I interpret as: ""we could if we wished to so"", so the question of which they use - DTD or XSD - answered itself.",1516118384.0
jteikon,"The experimental thing can is minor imo. I don't like XSD or for that matter DTD but I work with 3rd parties API who still use XSD a lot. So I think this is a good intro for someone whose never seen dinosaur Schemas.

The author mentions XML::Simple elsewhere I saw recently, so it would have been good to mention that and any alternatives also :)",1516609825.0
Grinnz,"I'm not familiar with the module enough to say for sure - is there no way you can test yourself whether it works?

From the source code it looks like it will die unless either a password or identity file is provided. https://metacpan.org/source/RYBSKEJ/Net-SCP-Expect-0.16/Expect.pm#L167",1516049656.0
cshelton,"I would suggest considering Net::SFTP::Foreign, if you don't mind a modest amount of script reworking.  The CPAN page is located at:
http://search.cpan.org/~salva/Net-SFTP-Foreign-1.87/

We explored several of the SCP and SFTP related perl modules several years ago, and settled on Net::SFTP::Foreign for all of our sftp transfers that use perl.  The module has worked very well for us for a long time.

",1516220036.0
Grinnz,"Elasticsearch queries are generally hash-based data structures (or rather, get converted to object-based JSON) so you can take two approaches: pass around the hash structure itself and have each component modify it as desired, or write an object class that holds the hash structure as an attribute and provides methods to modify it. Whether the abstraction is worth it is situation dependent. In one case I have an object class that defines each part of the query as an attribute and assembles the hash structure from that.",1516047314.0
davorg,Code [on Github](https://github.com/davorg/succession/).,1516010478.0
plainblackquy,Error message?,1515874360.0
commandlineluser,"How did you attempt to install Gtk2?

Did it install successfully? Was there any debug output/errors?

Looking at the homepage for GCstart it says it can run anywhere gtk-perl is supported.

Looking at the gtk-perl FAQ https://wiki.gnome.org/Projects/GTK-Perl/FrequentlyAskedQuestions#Can_i_get_Gtk2-Perl_for_Microsoft_Windows.3F

It says the easiest way is to use a prebuilt binary and links to the previous FAQ entry - there is also a win32 page at http://gtk2-perl.sourceforge.net/win32/

Searching the internet for ""Strawberry Perl Gtk"" does not seem to yield much information sadly.

What exactly does this program do that is a useful time saver for you?

It fetches data from boardgamegeek - what input do you give it? what output do you need to receive? what do you need to do with this output?",1515923050.0
saiftynet,Agreed install GTK2...BUT according [this](https://code.activestate.com/ppm/Gtk2/) site GTK2 fails to build on Windows environments.,1516218897.0
mishagale,"It appears to be a result of this [issue](https://github.com/jgm/sep-offprint/issues/1) which from many years ago, which the script's author has marked as ""resolved"" (although it's clearly not...)

The problem is that there is actually another dependency, lwp-rget, which isn't documented. Try running `ppm install lwp-rget` in a command-line window, and see if that fixes it.",1515864747.0
dgryski,"If you're dealing with any sort of data format, remember to fuzz your code.  Here's a tutorial I wrote, since it's a bit tricky to get afl working through XS: https://medium.com/@dgryski/fuzzing-perl-xs-modules-with-afl-4bfc2335dd90",1515804278.0
Grinnz,"You left out a lot of specifics, but I am assuming that _exec_and_fetch_all is returning an arrayref of rows. If you mean the 3rd element of each row, then you can update it directly:

    $_->[2] = 'replace me';

You can also make the loop postfix rather than explicit if it's simple enough:

    $_->[2] = 'replace me' for @$returndata;",1515701374.0
saiftynet,"Maybe, don't need to loop?....[splice](https://perldoc.perl.org/functions/splice.html)


    splice(@$returndata,2,1,""replace with this string"")
",1515701379.0
DeepFriedDinosaur,"These are called NGrams. NGrams can be by character, bytes or word.

There are a number of modules on CPAN that can  simplify this for you:

[NGrams on CPAN](https://metacpan.org/search?q=ngram)",1515697251.0
zoffix,"With Perl 6, it'd just be (where ""words"" are defined as `\S+`):

    ""text.txt"".IO.words.rotor(2 => -1)».join("" "").Bag.sort(-*.value).head.say

Same thing for three-word-pair, except the `.rotor` would be `(3 => -2)`",1515693255.0
flamey,"> Read time is based on the average reading speed of an adult (roughly 275 WPM). We take the total word count of a post and translate it into minutes. Then, we add 12 seconds for each inline image. Boom, read time.

Source: [Medium](https://blog.medium.com/read-time-and-you-bc2048ab620c). Maybe you can just wrap that into a simple module...",1515681787.0
KevZero,@_,1515648550.0
PM_ZIT_PICS,"""japh"" (just another perl hacker)

monk, short for perlmonk, is also popular.",1515655067.0
desalted,developerl,1515655389.0
lindleyw,Perl Monger is what we call members of the [several hundred user groups](http://www.pm.org),1515678322.0
sobrique,"There isn't one. Perl user is the default state. 

It's kinda like we don't have a word for 'people with heads'. It's because the people without heads are the aberration. ",1515684573.0
tsjr,"Huh, I always thought ""Perlist"" is a common one, but now that I look around the internet nobody seems to use it.",1515667039.0
,"I always heard perlmonks, or monks (http://perlmonks.com/)",1515677338.0
zoffix,"""Perlers"" is what I typically seen in use.",1515685215.0
2A_is_the_best_A,"Perl Guru is the traditional form, I think. Pretty sure that predates monger, monk, etc...",1515685288.0
indigo_kat,“Programmer” 🐪,1516446379.0
singingfish42,perlverts,1516944139.0
minimim,"Eggplants, since Perl is short for Purple eggplant, rather large.",1515667888.0
skulgnome,Beard.,1515720762.0
Wonkothealmostsane,"In Perl 5:

    my @tags = qw( APPLE BANANA WATERMELON PEACH );

    my $string1 = ""this is the name of something APPLE"";

    if ( scalar grep { $string1 =~ /\b$_\b/ } @tags ) {
        print ""FOUND!\n"";
    }
",1515593662.0
minimim,"In Perl 6:

    > my @words = <APPLE BANANA WATERMELON>
    [APPLE BANANA WATERMELON]
    > ""this is the name of something APPLE"" ~~ /@words/
    ｢APPLE｣
    > $/.prematch
    this is the name of something 
    > ""the capital of Belgium is Brussels WATERMELON"" ~~ /@words/
    ｢WATERMELON｣
    > $/.prematch
    the capital of Belgium is Brussels 
    > ""the BANANA capital of the world PEACH"" ~~ /@words$$/ #Only matches at the end of a line
    Nil",1515586938.0
Chicken_Dump_Ling,"> Unfortunately CGI.pm has been removed from core Perl, but there are still lots of applications out there that use CGI.pm. I even encountered one built in 2017 by people who have not learned newer techniques. The thing is, CGI is perfectly good for small things and for trying out new concepts without forcing the developer to learn some new technology.

Am I not supposed to be using CGI.pm? And if so, what's the new concept that replaces it? Thanks!",1515601927.0
flarkis,"I'm an Electrical Engineer. I've worked at a few of the large CPU and GPU companies.

Perl is used extensively. Probably the second most common language after tcl, since most tools are controlled using tcl. Perls biggest use is its text processing abilities. Usually stuff like taking a report generated by a tool, parsing out the required information, doing some calculations, and finally outputting a new report.

Things we look for in the industry are usually:

 * Experience using the EDA tools (lec, rtl compiler, ic, etc).
 * Understanding of basic hardware concepts
    * Area/Power/Timing trade off
    * Hold time and setup time requirements
    * Effects of raising or lowering voltage
    * etc
 * Tcl coding experience
 * Perl coding experience (less important than tcl)",1515561343.0
ThirdEncounter,"I don't know much about Perl in the hardware (other than, well, hardware running it), but [this link seems to have some good info](https://www.doulos.com/knowhow/perl/).",1515552442.0
JaqenHghaar08,"Perl is used as the name suggests, extraction and reporting tool.

My experience has been handling huge files and data processing them using regular expressions etc using Perl.",1515557742.0
tektektektektek,"My questions:

> `Str:D`, `Int:D`, `Callable:D`

Why do they all end in `:D`? Seems like a lot of extra typing when declaring a type.

> `my Str:D @table = $digit-str.comb;`

Why not index directly into the string? Surely that would both be fast (indexed memory access) *and* save memory? Why explode it all into another array?

> @table.[ $digit ]

Adding a dot just to access an element of an array in Perl 6 is more verbose than Perl 5 which doesn't require a dot.",1515541393.0
davorg,"> Practically every number or string attribute I declare will be 'rw'.

You should probably rethink that. Most of your attributes should be 'ro'. It's rare that you'll really need a 'rw' attribute. Immutable objects are cool :-)",1515508423.0
Grinnz,"I'm not sure if anyone has written exactly that for Moose, but check out [MooseX::AttributeShortcuts](https://metacpan.org/pod/MooseX::AttributeShortcuts); a lot of [Moo](https://metacpan.org/pod/Moo)'s default supported syntax is inspired by that moose extension so it's a good set to use.

If by chance you don't need things like triggers, type checking, or the metaprotocol, [Class::Tiny](https://metacpan.org/pod/Class::Tiny) / [Class::Tiny::Chained](https://metacpan.org/pod/Class::Tiny::Chained) / [Mojo::Base](https://metacpan.org/pod/Mojo::Base) don't require any options for attributes except an optional default; but be warned, they are *very* stupid-simple (in a good way, if that's what you need). Or you could try [Mew](https://metacpan.org/pod/Mew) which is built on Moo, and thus can still take advantage of the metaprotocol (through Moo inflation) and type checking (via Type::Tiny).",1515467497.0
ogniloud,"From this [SO's answer](https://stackoverflow.com/questions/4452403/how-do-i-define-default-attribute-property-values-in-moose) and [ Moose::Cookbook::Extending](https://metacpan.org/pod/distribution/Moose/lib/Moose/Cookbook/Extending/Mooseish_MooseSugar.pod):

    package MyApp::Mooseish;
    use Moose ();
    use Moose::Exporter;
    Moose::Exporter->setup_import_methods(
    install     => [ qw(import unimport init_meta) ],
    with_meta   => ['has_table'],
    also        => 'Moose',
    );
    sub has_table {
	    my ($meta, $name, %config) = @_;
         $meta->add_attribute(
            $name,
            # overridable defaults.
            is => 'rw',
            isa => 'Str',   # any defined non-reference; hopefully the caller
                        # passed their own type, which will override
                        # this one.
            # other options you may wish to supply, or calculate based on
            # other arguments passed to this function...
         %config,
       );
    }
    1;

I created a Student class with several attributes and the above method seems to work as you have described in your post:
		
		package MyApp::Student;
		use strict;
		use warnings;
		use lib '/home/';
		use MyApp::Mooseish;
		
		# I have overridden the default ""is"" property provided by the
		# function has_table here.
		has_table 'first_name' => ( 'is' => 'ro' );
		has_table 'last_name' =>  ( 'is' => 'ro' );

		# These ones continue to be ""rw"".
		has_table 'year' => ();
	    has_table 'gpa' => ( 'isa' => 'Int' );
	    1;


Hopefully it helps!",1515476605.0
readparse,"I thought about doing this by subclassing Moose, because it's a _moderate_ pain in the ass.  But only a moderate one, so I haven't done it.  I assume I could override `has` to default it to `rw`in my subclass.  But of course then I would have to `use My::Moose` or whatever, instead of `use Moose`.  Probably not worth it for me, especially since I always end up giving my attributes a bunch of properties anyway, so that would just save me that one.",1515481322.0
neilhwatson,Post a code snippet displaying the problem.,1515426964.0
Lludd_Llaw_Eraint,$string = '\ssfamily';,1515430239.0
tm604,"> The most influential members help me find meaning of my existences in this Online Programming Community.

in two words: `use strict`.

Some of the questions are a bit odd:

>The most influential members  make me aware that my account will be terminated if I post a religious or racial vilification

our code of conduct is pretty simple: ""be civil or be banned"". What you describe would be off-topic - and influential or no, I'd expect, hope and trust that people would step up and point out any inappropriate behaviour.",1515322717.0
saiftynet,"So you dont want to match : but happy to match space?...how about 

    if ($_ =~ /\bOD\s){ print $_ ; }

?",1515191380.0
raevnos,"Something like

    (?<=\A|\s)OD(?=\Z|\s)

or if you don't care about including surrounding characters in the match,

    (?:\A|\s)OD(?:\Z|\s)

",1515199614.0
MattEOates,Why is Camelia a bee :Z,1515166575.0
,He looks kind of like this guy: https://i.kinja-img.com/gawker-media/image/upload/izx6u5yowfmzbiq1lqyu.jpg,1515184447.0
xeeeeeeeeeeeeeeeeenu,"_Programming Perl_ was intended as a complete Perl reference. It's unrelated to the other two books. _Learning Perl_ is a tutorial for beginners and _Intermediate Perl_ is its continuation.

_Advanced Perl_ is also unrelated to those books, it was written by a different author. It assumes that you already know Perl and it mostly covers perl's **uses**, not the language itself.

If you already know how to program in a different language, my recommendation is [Modern Perl](http://modernperlbooks.com/). It's a free, no-nonsense guide to perl, which also covers very important topics like modern OO (Moose/Moo) which AFAIK the books you've mentioned skip.",1515181546.0
davorg,"You can see the tables of contents for the books at the O'Reilly site.

* [Learning Perl](http://shop.oreilly.com/product/0636920018452.do)
* [Intermediate Perl](http://shop.oreilly.com/product/0636920012689.do)
* [Mastering Perl](http://shop.oreilly.com/product/0636920012702.do)

These three books are designed as a tutorial that takes you through everything you need to know in order to use Perl.

* [Programming Perl](http://shop.oreilly.com/product/9780596004927.do)

This covers similar topics to the Learning/Intermediate/Mastering trilogy. But it is intended as a reference book, not a tutorial - so it is a lot terser.

* [Advanced Perl Programming](http://shop.oreilly.com/product/9780596004569.do)

This is also intended as a tutorial. But it hasn't been updated for over ten years, so I really can't recommend it anymore.",1515181772.0
SisyphusCoffeeBreak,Read them all.,1515206927.0
lindleyw,"If you are looking at the second code example on page 13, there is no ""my"" before $wife in that line.  Take ""my %wife;"" from page 12 (please! -- Henny Youngman), use that, and follow with everything except  the ""my"" in your code, and all should be well.",1515112078.0
MattEOates,"you want something like:

     my %wife;
     $wife{""Jacob""} = [""Leah"", ""Rachel"", ""Bilah"", ""Zilpah""];
     print $wife, ""\n"";

where %wife is a hash variable being declared, otherwise Perl gets confused about if you meant to access $wife which is a different variable",1515104677.0
choroba,"If you want to declare a hash variable and initialize it at the same time, you can't assign just to one key:

    my %wife = ( Jacob => [ 'Leah', 'Rachel', 'Bilah', 'Zilpah' ] );",1515106465.0
davorg,"When you add `use strict` to your code, you are agreeing to declare all of the variables that you use (usually using `my`).

Your code is slightly confused in two ways:

* You try to declare `$wife{""Jacob"")` which is not a variable. It's just part of a hash. Perl has trouble parsing that statement, which leads to the error message that you're seeing. The easiest fix is to declare the hash (`my %wife`) on one line and the have the assignment (but removing the `my`) on another line.
* You then try to print the scalar variable `$wife`. The scalar `$wife` is completely different to the hash `%wife` - and you haven't declared the scalar variable. You probably want to print one of the values from deeper inside your hash.

        my %wife;
        $wife{""Jacob""} = [""Leah"", ""Rachel"", ""Bilah"", ""Zilpah""];
        print $wife{""Jacob""}[0], ""\n""; # Jacob's first wife",1515131783.0
CaptainDickbag,"What ever you wind up doing, rate limit, and spread your load. DNS servers can and will blacklist you, or take other anti-abuse measures.",1515086591.0
nofretting,"Have you looked at MCE?

In particular, look at https://github.com/marioroy/mce-examples/tree/master/asynchrony. There are a couple of DNS-related examples there that might have something you can use.",1515119406.0
0rac1e,"One of the features of `Getopt::Long` that I really appreciate is the ability to pass a hashref as the first parameter, which then gets populated by provided options.

That means that this example...

    my $config = {
        dot    => 0,
        height => 600,
        width  => 600,
        step   => 10,
        file   => 'graph.svg',
    };

    GetOptions(
        'man'      => \$config->{man},
        'height=i' => \$config->{height},
        'width=i'  => \$config->{width},
        'step=i'   => \$config->{step},
        'dot'      => \$config->{dot},
        'file=s'   => \$config->{file},
    );

... can instead be written as

    my $config = {
        dot    => 0,
        height => 600,
        width  => 600,
        step   => 10,
        file   => 'graph.svg',
    };

    GetOptions( $config,
        'man',
        'height=i',
        'width=i',
        'step=i',
        'dot',
        'file=s',
    );

... which saves a lot of redundant typing.

The article also mentions that `-help and --height will compete for -h`. Another feature of `Getopt::Long` is the ability to specify which single letter flags associate to which options, for example...

    sub usage {
        say {*STDERR} 'Usage: blah...';
        exit 1;
    }

    GetOptions( $config,
        'height|h=i',
        'help|?' => \&usage,
    );

Now `-h` will only ever mean `height`. To get help you would do `--help` or `-?`.

With regards to the hashref keys, the `|` and subsequent text is helpfully ignored, eg. When running with`-h 200`, the value `200` will be assigned to `$config->{height}` (not `$config->{'height|h'}`)",1515035571.0
scruss,"the writer's coding style brings me out in hives: spaces before ‘;’, and indented final ‘}’.

perltidy soothes everything …",1515036696.0
davorg,"    my $sq =  @_;

This puts the number of elements in `@_` into `$sq`. And I bet you're always passing one parameter to `square()` so it's always 1 - and that means `Compounding()` will always return 1.

You probably want:

    my ($sq) =  @_;

The parentheses around `$sq` make it a list assignment, so you get the first element from `@_` not the number of elements.",1514980068.0
Grinnz,"Be careful with the conditional return from sub square. If the condition is not true it does not have defined behavior for what should be returned (usually it will be the condition itself) so you should explicitly return something else (such as by adding another `return` after the conditional one, or a `die` or `croak` if it's a case of unexpected input.) See https://metacpan.org/pod/Perl::Critic::Policy::Freenode::ConditionalImplicitReturn",1514999878.0
mrnix,You are missing a _ after the first @.,1514979554.0
Sogemplow,I thout this was about why we always put a 1; at the end of our includes. Had a chuckle.,1515029907.0
tm604,"A dangerous article:

- `keys` or `values` will also reset the iterator, leading to infinite loops
- any code you call within the loop also risks modifying the hash
- the output even has the new Perl warning about resetting the hash iterator, but none of the examples attempt to do this (via `keys %h` for example)

I'd normally suggest avoiding `each`, use a loop over `keys` or List::Util's [pairmap](https://metacpan.org/pod/List::Util#pairmap) instead.

(I downvoted article due to IMHO bad advice, even though that may not be how Reddit is supposed to work...)",1514886327.0
raevnos,a2p was removed from the core perl distribution in 5.22. It's available from cpan as App::a2p and possibly in your OS's package manager.,1514812657.0
Grinnz,"Not to dissuade you but code generators like these often come up with quite opaque or over-complex code that's more designed to ""just work"" than to be a learning tool. Maybe they could be a useful reference but I would suggest it's more useful just to stick to tutorials like those linked from the sidebar, or if that's not sufficient, asking here or in IRC how one might accomplish a certain thing in Perl.",1514830294.0
commandlineluser,"Not sure what features of awk you're using but the following may be of use to you.

`perl` has `-F` which will populate the `@F` array.

    $ echo 'foo:bar:baz' | perl -F: -ple '$_ = $F[1]'
    bar

We can use `-MO=Deparse` to see the code generated.

    $ echo 'foo:bar:baz' | perl -MO=Deparse -F: -nle 'print $F[1]'
    BEGIN { $/ = ""\n""; $\ = ""\n""; }
    LINE: while (defined($_ = <ARGV>)) {
        chomp $_;
        our @F = split(/:/, $_, 0);
        print $F[1];
    }
    -e syntax OK

With newer versions of perl `-F` implies `-a` and `-a` is what populates `@F` so you will need to explicitly pass `-a` for older perls.

`-p` creates the *""while (getline) print""* type loop and `$_` in this case would be similar to `$0` in awk i.e. contains the current *""line""*.

There is also `-n` which does the same except there is no implicit print (similar to `sed -n`)

    $ echo 'foo:bar:baz' | perl -F: -nle 'print $F[1]'
    bar
 
Because arrays are zero-indexed the first field would be `$F[0]` (as opposed to `$1` in awk).

`$.` in perl would be how you write `NR` from awk

    $ perl -nle 'print ""$.  $_""' <<< $'a\nb\nc'
    1  a
    2  b
    3  c
    $ awk '{ print NR "" "" $0 }' <<< $'a\nb\nc'
    1 a
    2 b
    3 c

There is `s///` for `sub()` and `s///g` for `gsub()` and you can use `//`

    $ awk -F: '/z$/ && NR < 5 { print $2 }' <<< $'foo:bar:baz\nomg:lol:bbq'
    bar
    $ perl -F: -nle 'print $F[1] if /z$/ && $. < 5' <<< $'foo:bar:baz\nomg:lol:bbq'
    bar

One difference is that to explicitly match against something in awk you use `~` but you use `=~` in perl.

Instead of having to create an explicit loop to process each field (e.g. `for (i=1; i<=NF; i++)`) `grep` and `map` can come in handy.

Some random examples.

    $ perl -F: -nle 'print join "":"", grep { /a/ } @F' <<< foo:bar:baz
    bar:baz
    $ perl -lane 'print join "" "", grep { $_ > 3 } @F' <<< '1 2 3 4 5'
    4 5

Note in the second example we pass `-a ` to populate `@F` as we did not use `-F` so it will split on *""whitespace""* by default similar to awk.",1514973279.0
zoffix,Mojolicious is more popular than perl itself! :),1514797435.0
tektektektektek,"**TRAILING COMMA**

> For the first item I store the original array. I have a significant trailing comma there:
>
>     state @permutations = [ @array, ];
>
> If I only use a single array argument (the single argument), the array is automatically flattened.

In Perl5 we never had the confusion of an array inside an array - we used references for this; e.g. `my @arrayinarray = ( \@innerarray );`.

Perl6, however, has the opportunity to really confuse people by allowing arrays within arrays!

Is this, in retrospect, a mistake? At least scalar objects can be any type - but the array type has always been special and to use the `@` sigil instead of `$` for arrays when arrays can behave just like any other kind of object is odd, is it not?

Funnily enough in PowerShell, which borrowed a lot from Perl, a *leading* comma is needed to put an array within an array.

Editor's note: the actual line in the code uses the `clone` method: `state @permutations = [ @array.clone, ];`

**FLATTENING**

>     state @A = |@permutations.[0].clone;

Several questions here. `@permutations[0]` contains the original array. Surely assigning one array to another copies the elements from one to another? Why is flattening necessary?

Then why the `clone` operation? Isn't assigning one array to another a copy operation of the contained elements?

Is this completely unnecessarily complex or have I missed some basic elements of Perl6 that are wildly different from Perl5?

",1514764724.0
Grinnz,Pretty neat idea. If only something like this was even remotely feasible for Perl 5.,1514584660.0
hankache,There's RPerl and CPerl and a bunch of other projects listed on http://perl11.org,1514551850.0
raiph,"It's not (currently?) open source, but there's [agentzh's / OpenResty's fanlang](https://www.google.com/search?q=agentzh%27s+%2F+OpenResty%27s+fanlang&ie=utf-8&oe=utf-8).",1514569672.0
commandlineluser,"No sigils, but something which may be of interest.

https://metacpan.org/pod/Sidef

https://github.com/trizen/sidef/wiki",1514581729.0
a-p,"There was [Kurila](http://www.ggoossen.net/kurila/) but it died quite a while ago.

Besides the projects listed on the Perl11 page, there’s also [stableperl](http://software.schmorp.de/pkg/stableperl.html).",1514666033.0
minimim,"> Ruby

Is just Perl rebranded.",1514562610.0
newbadsmell,but this time without the music,1514525501.0
subogero,And a Perl win: Perl beats Python!,1514493045.0
workrestplay,"Does your environment restrict the version of Mojolicous you need to run? If not, just install the latest Mojolicous and set that as the minimum requirement?",1514401542.0
Grinnz,"There's no generic method, however the Mojolicious [changelog](https://metacpan.org/changes/distribution/Mojolicious) is easy to scan for specific features. If in doubt do as /u/workrestplay said and specify the version you have installed, since that's a version you are sure works, and you can test older versions later if needed.",1514419785.0
mikelieman,"When you 'use' the Mojolicious modules, you should be able to specify a minimum version.

https://perldoc.perl.org/functions/use.html
",1514432781.0
Ragamano,"Looking back in my life when I was born a year after Tavish Armstrong, I just feel so, disappointed how my life turned out to be. I had similar dreams and hope but they didn't work out in the end.

Only if I told my younger self to actually go through the Macromedia Flash book I borrowed once in high school, I would have had my first glimpse in computing. But during my early days, I never had anyone who was remotely interested in computers. I wasn't great at socializing either which would have lead me to people who were in machines. There was AP CS course at my university but I never took it only because I thought it was too hard and instead took AP Calc.

Without any concept of computing or the power of programming, how can a kid get into life of software development? All the random success stories I've read of popular programmers these days, all of their younger days began with someone giving them a gift or some 'assembly' language computer and started from there.

Wish the pursuit of programming caught me much earlier in life than right now, went into wrong major and always thought about programming, programming. Having friends and family who aren't into computers didn't help either until last year. So much life was wasted.",1514400106.0
quintus_horatius,"The thread isn't a conversation, it's not even a debate, it's an argument.  It doesn't help anyone.

Why is it posted here?  Also, why is this post linked to a Twitter post about the post rather than the post itself?

Link for the lazy: https://www.nntp.perl.org/group/perl.perl5.porters/2017/12/msg248369.html",1514306522.0
ruincreep,"I fully agree with the answer he got [here](https://www.nntp.perl.org/group/perl.perl5.porters/2017/12/msg248387.html). His mail is a completely useless waste of swear words and time, because he just picked a sentence to rant about, not realizing that guy he's yelling at is actually agreeing with him.",1514306366.0
sigzero,"He lost me at:

> Talking *with* #p5p is not a viable option 

> I can only talk *down at* them

That being said. I think, for the most part, the Perl community isn't any better or worse that most of the programming language communities out there. Perl will be around for a long long long time and hopefully improving and not stagnating.",1514306090.0
hobbified,You won't find any widely-used language that has been nearly as *conservative* about changes as Perl has.,1514334628.0
Grinnz,"If you are not going to debate technically, you will not get a technical debate.",1514318216.0
ptomen,"It's certainly not a good look for a newbie like me trying to learn the language.  Although driven by interest, with the only prospect using Perl being a personal project, seeing feature changes and consequent fighting leaves a bad taste. It would suck, while learning, if something new and interesting was inconspicuously labeled as experimental and suddenly disappears. 😕",1514535736.0
sigzero,"Cool, I'll start watching it more to see what kind of content goes up.
",1514165826.0
crashorbit,This is unfortunate and will be viewed as another reason to migrate the few remaining bits of perl in our deployments to some other language.  ,1514157822.0
tarje,"agreed, p5p screwed the pooch on this.",1514037747.0
bart2019,"I've never used smart match before, as I never felt it would fix any of my problems, and this post convinced me I will *never* bother with ,in any form or incarnation.

I do not need a ""do what I mean"" syntax, where it's absolutely unclear what I could mean, to either side, i.e. eihter the programmer or the program.

Some explicitness, similar to the use of the word `scalar`sprinkled in at some places, is not necessarily a bad thing.

And I definitely don't need a feature that requires to write a whole library just to be able to use a core language feature. That is just.... ""everything that is wrong with Java"".


",1514092672.0
tm604,"Would it be feasible to develop this as a CPAN module first, or is that totally unworkable?",1514044888.0
raevnos,"Welp, that's going to break more than a few of my programs.",1514079258.0
zhouzhen1,"I just saw this and I completely agree with Leon's point. IMO it could become a disaster if p5p is really going to make this kind of breaking changes. 

Smartmatch was introduced since Perl 5.10 and considered by many people as an official feature until it was announced to be experimental in Perl 5.18. Huge amount of code using smartmatch has been produced between those several years, and some people could still use it after Perl 5.18. At my workplace today Perl 5.10 and Perl 5.14 are still the most used perls among the list of versions we have access to. And I believe we are not alone. Look at 27:10 of this video from ActiveState https://www.youtube.com/watch?v=mmG0LsS_eMY , you see Perl through 5.10 to 5.16 are heavily used by Enterprise users. 

I know you guys looking at this reddit/r/perl are active Perl users, you always keep an eye on what's going on in Perl and you already know to avoid smartmatch, so some of you might not think it a big problem having this change in Perl 5.27.7. But I believe there are way more people out there not knowing so clearly about the story of smartmatch, and there are already too much production code there using smartmatch that they cannot be easily updated. Having this kind of breaking changes would just drive people away from Perl, or make them believe that they should stay on Perl 5.8 thus largely makes the efforts since Perl 5.10 to vein. ",1515566395.0
,[deleted],1514020794.0
davorg,"The contents of the block probably don't matter. All you need to do is to process the file a line at a time and recognise when a new block begins. Something like this will work:

    #!/usr/bin/perl

    use strict;
    use warnings;
    use feature 'say';

    use Data::Dumper;

    # Store the contents of the current block
    my $block = '';
    # Store the blocks
    my @blocks;

    while (<DATA>) {
      # If we find a header line
      if (/^Header/) {
        # The first line in the file is a header line,
        # so the ""if"" here ensures that an empty block
        # isn't added to the array.
        push @blocks, $block if $block;
        $block = '';
      }

      $block .= $_;
    }

    # Ensure the final block is in the array.
    push @blocks, $block;

    say Dumper \@blocks;

    __DATA__
    Headerx

    30 30 1 Jun 12 12:30:40 2017

    some sentence X

    p 1 2

    32 23

    23 33

    HeaderY

    30 30 1 Jun 12 1:20:31 2017

    some sentence Y

    p 1 2

    32 23

    23 33
",1513932015.0
tektektektektek,"I would personally tend to use a global regular expression to capture blocks as follows:

    use strict;
    
    my $data = <<'DATA';
    Headerx
    30 30 1 Jun 12 12:30:40 2017
    some sentence X
    p 1 2
    32 23
    23 33
    HeaderY
    30 30 1 Jun 12 1:20:31 2017
    some sentence Y
    p 1 2
    32 23
    23 33
    DATA
    
    my @blocks;
    while (
      $data =~ m/
        (?:\A|[\r\n])       # start of data or newline char
        Header              # literal text
        (.*?)               # match as little text as possible
        (?=[\r\n]Header|\z) # until Header line or end of data
      /xsg                  # expanded, multiline, global
    ) {
      push( @blocks, $1 );
    }
    
    foreach ( @blocks ) {
      print( ""----BLOCK----\n\n$_\n\n"" );
    }

This would output:

    ----BLOCK----
    
    x
    30 30 1 Jun 12 12:30:40 2017
    some sentence X
    p 1 2
    32 23
    23 33
    
    ----BLOCK----
    
    Y
    30 30 1 Jun 12 1:20:31 2017
    some sentence Y
    p 1 2
    32 23
    23 33
    
",1513902503.0
shobble,"how about `perl -ne'print if /^begin/../^end/' < lines.txt`?

`-p` is the wrong choice here, since it mostly assumes you'll be modifying the line and so it unconditionally prints it. The `//s` regex modifier also won't work because `-n/-p` are line-oriented, so you never see the whole multiline string to match on (without messing to force full-input slurping, but you probably don't want that).

The `..` operator ([range or flip-flop](https://perldoc.perl.org/perlop.html#Range-Operators)) works nicely here, returning true after LHS is true, until RHS is also true.
",1513800970.0
rrohbeck,"This will work if you leave out the -p and set $/ to undef so you slurp the whole input into $_ instead of reading line by line:

``perl -e 'undef $/;$_=<>;print $1 if /(begin.+end)/s'``

Edit: Or use ``perl -0777 -ne 'print $1 if /(begin.+end)/s'``",1513825967.0
briandfoy,I talk about self testing code in the Modulinos chapter in [Mastering Perl](https://www.masteringperl.org/). ,1514099270.0
scottchiefbaker,These are awesome!,1513787212.0
mpyne,Mojolicious is the one that got me.  2008 feels about twice as long ago as would have thought for its release.,1513820138.0
mpersico,SSL Issue?,1513782740.0
daxim,"/u/koorchik, do you have a comparison table for LIVR, Kwalify, Rx, Relax NG, JSON Schema, XSD?",1513678047.0
bschmalhofer,🎂,1513607930.0
perlancar,"    perl -Mutf8 -E'binmode STDOUT, ""utf8""; say ""🎂"" x 30'
",1513690923.0
Grinnz,"As an interesting aside, this is how you normally create 'required' attributes in Mojo::Base and Class::Tiny, mainly because they have no way to enforce it on creation. Though I did write an as-of-yet unreleased Class::Tiny [subclass](https://github.com/Grinnz/Class-Tiny-Immutable) that allows you to require all attributes to be provided in the constructor or lazy, which I'd mostly forgotten about.",1513643653.0
Grinnz,"Other strawberry perl users have reported the same issue, it's an issue that will have to be fixed in the test itself: https://rt.cpan.org/Public/Bug/Display.html?id=120926

Since it's only this failing test, you can force the install and the module should still work correctly.",1513568205.0
GlauchanGuy,"I've had issues like this on practically every platform and using plenv to manage my Perl binaries and modules solved it for me. Perlbrew can also handle this but I've had better luck across Debian, Ubuntu and OS X using plenv. Using Carton is also a good idea.",1513635058.0
Grinnz,"It certainly exists: https://metacpan.org/pod/Spreadsheet::ParseExcel

Can you post the command you tried and the output? (note that case *is* significant)",1513568323.0
anonymous_subroutine,Best guess is you have more than one perl install and they're interfering with each other. Have you installed MacPorts by chance? Or compiled/installed your own perl from source?,1513569234.0
tm604,"very minor point, but: since these are tutorials, I think the post title might work better without the question mark?",1513493862.0
rcsheets,I'm not a fan of how that link broke my back button.,1513496188.0
minimim,"Free Software developers should learn to not rely on closed platforms for their support, I recommend creating accounts in more than one service to avoid a SPOF:

* https://en.liberapay.com/ Doesn't support perks, it's purely a donation platform. This project s open-source so it's a good thing to support them. They don't process donations at cost and ask that people donate to their open-source project;  
* https://www.bountysource.com/ Supports one-off donations, recurring donations and donations for specific features. This is part of GitHub.",1513434594.0
Grinnz,"Very nicely put together. I would suggest mentioning [Syntax::Keyword::Try](https://metacpan.org/pod/Syntax::Keyword::Try) as preferred over Try::Tiny when you are able to use it (it requires XS support and perl 5.14+). It does not suffer from many of the caveats of Try::Tiny, including the speed penalty.

Also, if you are going to document how to use raw eval, you should not include any 'if $@' tests, as that is fundamentally flawed (as the Try::Tiny docs note). Instead you should always make evals return 1, and check the return value to determine if an exception was thrown; when an exception is thrown, the eval returns undef.

I have added this as a tutorial to http://perl-tutorial.org/.",1513379308.0
perlpunk,"What caught my attention directly: You are talking about lists when you mean arrays. Since that's an important distinction in Perl, I think you should change it.",1513355015.0
KonomiKitten,"Cursory glance, it looks like a pretty good read.",1513341877.0
arkaros,I like it. Is it open source? Would like to make the webpage more mobile friendly.,1513353225.0
spore_777_mexen,"Hi, OP. Firstly, congratulations on your new book. I think it's great.

Is it possible to get Next and Previous buttons for improved navigation? If I missed them, please let me know. Thanks.

Edit: I am reading this alongside Modern Perl. Your book makes certain things clearer. For instance, I just saw sub in Modern Perl and I had no idea what it was until I went through your book. I am referencing your book now. Cheers.",1513605873.0
sigzero,"You should talk to Dave:

https://perlhacks.com/2017/12/regenerating-perl-school/",1513876993.0
Grinnz,"In addition to what other comments said about not being in the right directory, '*.docx' will not be expanded in the list form of system() since it does not pass its arguments through the shell. If you use the string form then the shell will expand it, otherwise you can use glob() to expand it. Additionally you can temporarily change directories in perl using a module like [File::chdir](https://metacpan.org/pod/File::chdir):

    use File::chdir;
    {
      local $CWD = $subdirectory;
      if ( system('unoconv', '-f', 'pdf', glob('*.docx')) == 0 ) { ... }
    }",1513208700.0
GL0B4L,"if ( system (""cd $subdirectory && unoconv -f pdf *.docx"" ) == 0 ) # success!
 
{
        print "" ... ok!\n"";
}",1513199917.0
xelf,"You've got some good answers already, as an alternative, you don't always have to use perl, you could do this from the command line using find.

    $ find . -name *.docx -exec unoconv -f pdf {} \;

Hope you find this useful, even if it's not the answer you're looking for.",1513234284.0
bart2019,">I can't see an option in unoconv to specify the source directory so I'm attempting to run the system process from the directory in which the files for conversion are located.

Except that the program probably isn't in that directory.

All you have to do is `chdir` to that directory before you call `system`.",1513204625.0
IWillNotBeBroken,"Is the unoconv binary in the same directory as your .docx files?  You're trying to run `./subdirectory1/subdirectory/unoconv`, not  `cd subdirectory1/subdirectory2` followed by `unoconv -f pdf *.docx`, which I think is your intention.",1513206344.0
leonmt,"It's a cute trick, but I can't think of a single circumstance where a modulino would be helpful in practice.",1513159208.0
subogero,"The inventor of the word ""modulino"" must have been Italian.

    Prendo il motorino per l'ufficio e scrivo un modulino in Perla.",1513168491.0
Paddy3118,"Rosetta Code has the (still draft) task [Modulinos](http://rosettacode.org/wiki/Modulinos). It floundered a little and didn't make full task status [issues](http://rosettacode.org/wiki/Talk:Modulinos).

It did spawn the full Task [Executable library](http://rosettacode.org/wiki/Executable_library) which has solutions in many, (28), languages including Perl and Perl6.

The Perl code depends on

    unless (caller) {...

",1513170332.0
joelberger,"And if you want to catch up, see all the posts on the site front page: https://mojolicious.io",1513089307.0
rage_311,"Thanks for these, /u/joelberger. I've really been enjoying them. I've been using mojolicious for a while now, and I learn new aspects on every topic you've covered -- even topics that I ""knew"".",1513100327.0
username223,"Interesting `whois` results, especially when I looked at the obvious `mojolicio.us` domain.",1513123010.0
daxim,"    › cat diff.t
    #!/usr/bin/env perl
    use strictures;
    use Test::More import => [qw(done_testing)];
    use Test::Differences qw(eq_or_diff_text);
    use IPC::System::Simple qw(capturex);

    eq_or_diff_text scalar capturex($^X, './d12.pl'), <<'';
    1. connections to '0': 306
    2. total groups      : 200

    done_testing;

    › prove -v diff.t   # for d12.pl correct output
    diff.t ..
    ok 1
    1..1
    ok
    All tests successful.
    Files=1, Tests=1,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.05 cusr  0.01 csys =  0.08 CPU)
    Result: PASS

    › prove -v diff.t   # for d12.pl wrong output
    diff.t ..
    not ok 1
    #   Failed test at diff.t line 6.
    # +---+-------------------------------+-------------------------------+
    # | Ln|Got                            |Expected                       |
    # +---+-------------------------------+-------------------------------+
    # |  1|'1. connections to \'0\': 306  |'1. connections to \'0\': 306  |
    # *  2|2. total groups      : 200xxx  |2. total groups      : 200     *
    # |  3|'                              |'                              |
    # +---+-------------------------------+-------------------------------+
    1..1
    # Looks like you failed 1 test of 1.
    Dubious, test returned 1 (wstat 256, 0x100)
    Failed 1/1 subtests

    Test Summary Report
    -------------------
    diff.t (Wstat: 256 Tests: 1 Failed: 1)
    Failed test:  1
    Non-zero exit status: 1
    Files=1, Tests=1,  0 wallclock secs ( 0.02 usr  0.00 sys +  0.05 cusr  0.01 csys =  0.08 CPU)
    Result: FAIL",1513096448.0
jplindstrom,"Put either or both of the input and the expected outcome in files that you don't check in?

> The answers depend on the input anyway, which I don't post.

I'm curious why not. I don't see what would be so bad about putting it into source control.",1513084342.0
davorg,"That's what modules like [Text::CSV](https://metacpan.org/pod/Text::CSV) are for.

    #!/usr/bin/perl

    use strict;
    use warnings;
    use feature 'say';

    use Text::CSV;
    use Data::Dumper;

    my $in = '017-12-05T15:00:00.805Z,56.223.12.32,""Re: The man, the myth, the legend."",blah';

    my $csv = Text::CSV->new;

    if ($csv->parse($in)) {
      say Dumper [ $csv->fields ];
    }

And the output is:

    $VAR1 = [
          '017-12-05T15:00:00.805Z',
          '56.223.12.32',
          'Re: The man, the myth, the legend.',
          'blah'
    ];

...which has  the required four fields.",1513009574.0
shobble,"> However, things are made complicated by the fact that each field can possibly also include a comma, and in that case, the whole field is enclosed in quotes "" 

But what happens if a field contains a quote? :)

like subject=`Re: ""O'brians email, about commas""` or worse?

In the best case, they're doing ""proper"" CSV encoding of the vars, which should handle the quoting and other issues. If so, something like [Text::CSV](http://search.cpan.org/~ishigaki/Text-CSV-1.95/lib/Text/CSV.pm) is probably the way to go.

Otherwise, you need to figure out all the twisty little edge-cases yourself, and see how they encode them, and then parse appropriately.",1513007053.0
sigzero,If you have a Mac...[Calibre](https://calibre-ebook.com/) (sponsorware) is good for converting between ebook platforms.,1513019496.0
Grinnz,This is really cool. The Perl Taster ebook looks quite useful as a recommendation.,1513034416.0
xeeeeeeeeeeeeeeeeenu,"Code examples in the preview look bad, I think they should stand out more from the rest of the text.",1513053126.0
saiftynet,"I would suggest it may be easier for people to write mini chapters of books rather than a whole book. e.g. Mathematics on Perl, Game making on Perl, GUI applications in Perl, IOT applications in Perl, Raspberry Pi and Perl.  People would contribute their personal applications in chapter form to be edited and compiled by an interested controller person.",1513184436.0
Shortl4ndo,Very cool - not only duplications but also points out if you have weird naming conventions - too many extra lines etc...,1513051368.0
nofretting,"From a command line:
perl -V

The last bit of information is @INC, which is where Perl will look for modules. Putting the module in one of those directories will let Perl find it when you refer to the module with ""use"" in your program. It's not necessarily the best way to accomplish this in the long term, but it will work.

I suggest you google for 'perl install module locally' for more information.",1512867702.0
Br0shaan,">Once it generates the Perl module, I have no idea what to do with it! It's supposed to apply a set of sound changes to any word that you enter but I don't know how to make it do this.

This is my problem aswell",1512871661.0
Grinnz,"First: \/m has no effect on that regex. \/s is what allows `.` to match newlines; ""treat as a single line"".

Second: you are matching against a variable you just declared, so it's going to be undef. (With `use warnings;` as you should have, you would get a warning about trying to match an undefined value.) You want:

    my $text = ...;
    if ($text =~ /.../s) {
      my $match = $1;
      ... use $match here ...
    } else {
      ... didn't match ...
    }",1512776664.0
shobble,"You possibly want the `//s` modifier instead/as-well, otherwise `.` won't match the newlines.

See [perlre](https://perldoc.perl.org/perlre.html#Modifiers) for details.",1512771546.0
Grinnz,"eq is case sensitive, so what you wrote should work. But ucfirst doesn't operate in place, so you need to assign it back to $word.",1512719464.0
sobrique,"Pardon if I'm being daft, but .... why does it matter if you `ucfirst` a word that's already uppercase:

     for my $word ( qw ( reddit Reddit REDDIT ) ) {
       print ucfirst $word, ""\n"";
    }

Because in all but the first case, `ucfirst` doesn't change anything. ",1512746564.0
davorg,"I think you might be falling into a surprisingly common misconception here. `ucfirst` does exactly what its name suggests. It only affects the first character of the string.

In training courses, I often come across people who believe it converts the first character to uppercase and all other characters to lowercase. It doesn't. It changes the first character to uppercase and leaves all the other characters alone.

All of which means that:

    $word = ucfirst $word;

is **exactly** the same as:

    $word = ucfirst $word unless $word eq uc $word;",1512752514.0
The_Hindmost,"As another way to do it, regular expressions would probably be your friend here. Something like the below should work:

    $word =~ s/(\w)(\w+)/\u$1$2/;",1512723273.0
OmegaNaughtEquals1,"I would use a hash on the pin name. Something like

	use strict;
	use warnings;
	
	my %pinout;
	
	while(<DATA>) {
		chomp;
		my ($dir, $pin, $size) = split(' ');
		($size,$pin) = ($pin,$size) if $size;
		
		if(exists $pinout{$pin} && !($pinout{$pin}{dir} eq $dir)) {
			$dir = 'inout';
		}
		$pinout{$pin} = {'dir' => $dir, 'size' => $size};
	}
	
	for my $p (sort {$a ge $b} keys %pinout) {
		print join(' ', $p, $pinout{$p}->{dir}, ($pinout{$p}->{size} or '')), ""\n"";
	}
	
	__DATA__
	input x
	output y
	output x
	inout z
	output y
	input [2:0] t
	inout [3:0] j",1512690308.0
MattEOates,"Similar to the other example but I'd go fancy with a named regex and preserve the file order.

     use strict;
     use warnings;
     use English;
     use v5.10;

     my %pins;

     #Read lines from files given as cli arguments
     while (my $line = <>) {
         #Trim the newline
         chomp $line;
         #Use a named capture regex to breakup the line into tokens populating %+ AKA %LAST_PAREN_MATCH
         $line =~ /(?<io>input|output|inout) (?<size>\[[^\]]+\] )?(?<name>.)/ or next;
         my $pin = $LAST_PAREN_MATCH{name};

         if (exists $pins{$pin}) {
             #Handle the case of promoting to 'inout' if we've already seen one of the other directions
             $pins{$pin}{io} = ($pins{$pin}{io} ne $LAST_PAREN_MATCH{io}) ? 'inout' : $pins{$pin}{io};
         } else {
             $pins{$pin}{io} = $LAST_PAREN_MATCH{io};
             #Keep track of the first line we saw this pin name and treat that as the output order
             $pins{$pin}{sort_order} = $INPUT_LINE_NUMBER;
         }
         #Overwrite the size each time with the last seen pin
         $pins{$pin}{size} = $LAST_PAREN_MATCH{size} || '';
     }

     #For the pins in the original order we first saw them in the file
     foreach my $pin (sort {$pins{$a}{sort_order} <=> $pins{$b}{sort_order}} keys %pins) {
         say ""$pins{$pin}{io} $pins{$pin}{size}$pin"";
     }",1512693627.0
Grinnz,"When in doubt, localize any change to global variables. The only time not to is if you explicitly want to affect something outside the current scope, like when setting signal handlers for other parts of the code. Note that 'local' is dynamically scoped, not lexically scoped (like 'my' is), so ""the current scope"" includes any subroutines you call within that scope.",1512691159.0
ruincreep,"Depends on whether you want to read input from other sources afterwards. A common idiom for reading a whole file for example without affecting the separator for other input sources is this:

    my $content;
    { local $/; $content = <FH> }

Note that a new scope is started and the input record is localized and undefined inside it. FH is then read till EOF. Outside the scope $/ is reset to its default value so it won't have any weird effects if you read front another handle sometime later. So it's always advisable to localize changes to the separator to avoid confusion and weird effects later or in other places you don't control like used modules. In general it's always advisable to only change global variables in a local scope.",1512678183.0
briandfoy,"It's a bit hard to read the way that you formatted it, but it doesn't look like you ever called your subroutine.",1512618897.0
davorg,Could you please edit your question so all of the code is formatted as code (add four spaces at the start of the code lines).,1512626554.0
ovadbar,"you are calling your function inside itself. This will lead to an infinite loop.
Try moving 

    guess_my_number(maxnum => 50, tries => 5);

Right before exit",1512628379.0
,[deleted],1512628837.0
davorg,"Your code basically boils down to this:

    sub guess_my_number {
        ...
    }

    exit;

You have defined a subroutine, but you never actually call it. Try changing your code to this:

    sub guess_my_number {
        # your existing subroutine code here
    }

    guess_my_number(); # call the subroutine
    exit;

Also note, it looks like you have `use strict` and `use warnings` before your shebang line (`#!/usr/bin/perl`). The shebang line should be the first thing in your file.

**Update:** There's another problem. The first thing you do when calling `guess_my_number()` is to call `guess_my_number()` again. So that leads to infinite recursion (well, perhaps no infinite - but until the Perl compiler notices and complains!) If you remove that call (you can move the arguments into the call that I suggested you added if you like) then the program starts to work as expected.

It seems that you are struggling a bit with very basic programming concepts here. How much programming have you done before?",1512631459.0
steihamm,"This function will return the value of Mojo::IOLoop->start;
You have to keep MyAPI::User->new( json => $tx->res->json ) in an variable which is declared before $self->ua->get....
and returned after Mojo::IOLoop->start.
",1512571173.0
tm604,"Try [HTML::TreeBuilder](https://metacpan.org/pod/HTML::TreeBuilder) or [Mojo::DOM](https://metacpan.org/pod/Mojo::DOM) instead.

    my @matches = $html->look_down(_tag => 'li', sub { $_->as_text =~ /stop/ })
",1512566331.0
SilentMobius,"Obligatory link regarding parsing HTML with regular expressions:

https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454",1512580085.0
davorg,"With the caveat that parsing HTML with regexes is a really bad idea...

    #!/usr/bin/perl

    use strict;
    use warnings;
    use feature 'say';

    while (<DATA>) {
      chomp;
      if (m{<li>(.*?\bstop\b.*?)</li>}) {
        say ""$_: Got '$1'"";
      } else {
        say ""$_: No match"";
      }
    }

    __DATA__
    <li>something</li>
    <li>some stop text</li>
    <li>embeddedstop</li>
    <li>stop first</li>
    <li>last stop</li>
    <li>stop</li>
",1512566168.0
saiftynet,"or to do davorgs solution in one line...

    #!/usr/bin/perl
    my $htm=<<ENDDATA;
         <li>something</li>
         <li>some stop text</li>
         <li>embeddedstop</li>
         <li>stop first</li>
         <li>last stop</li>
         <li>stop</li>
    ENDDATA

    print join(""\n"",($htm=~ /<li>(.*?\bstop\b.*?)<\/li>/g));",1512596682.0
Axillent,"You don't need lookahead/lookbehind. Simple regexp like this is all You need:

    var str=""<li>test - this is a stop that is tested...</li>""; 

    var extract = str.match(/\\<li\>(.*)\<\\/li\>/).pop();

    document.write(extract);

Now You simply test if the variable 'extract' contains Your word stop...

    if ( new RegExp('\\bstop\\b').test(extract) ) { console.log(""ok""); } else { console.log(""NO""); }

",1512564185.0
PhesteringSoars,"The test for OS and google Drive load at the bottom . . . makes me suspicious of viruses, so no way I'm going to run it.

Why are 1 and 2 and 2 (instead of 1 and 2 and 3) in the prints/choices in the menu?

(Just for my personal sanity) . . . pull all your global ""my"" variables to the top.  Put the main program next, and all the sub(routines) below the mainline. 

And I'd get rid of the menu subroutine, and just put the while loop in the mainline.  I can't tell from what I see above, if you just press enter and don't pick 1,2,3 . . . wouldn't it just fall out the end of the mainline after the &game(); call?  Maybe that's what you're seeing.",1512509787.0
d4rkeagle,"Your using the menu subroutine like a goto label statement, which is horrible practice In general, and this example is one of the more common reasons why. 

When you are calling menu, it's not starting at the menu subroutine and continuing down to the if statement that spawns a game, it's just ending where it was at the line you called it and continuing with the program, causing it to end. 

Like the other responder stated, put the whole thing in a while loop with the menu display and selection prompts at the top of the loop. ",1512523759.0
WebFishingPete,What about testing this? Might be a good idea anyway...,1512498571.0
ink_on_my_face,"If you have LibreOffice, use the option

    --convert-to pdf *.doc",1512445807.0
komtiedanhe,"If you have the option to manually convert from .docx to .odf (Open office format) first, you might be able to use [PDF::Create](http://search.cpan.org/~manwar/PDF-Create-1.43/lib/PDF/Create.pm) and [OpenOffice::OODoc](http://search.cpan.org/~jmgdoc/OpenOffice-OODoc-2.125/OODoc.pod).

That's all I could find on CPAN. Disclaimer: the only Office thing I've ever done with perl is create Excel sheets.",1512433408.0
Grinnz,Honestly I'd do it with LibreOffice. It can export any document as pdf.,1512440628.0
h0rst_,"The square brackets (`['empty']`) indicate a reference to an array. The extra backslash indicates a reference. Combined this makes it a reference to a reference to an array. If we dereference it, we get a reference to an array:

    my $var = \[""empty""];
    print Dumper($$var);

Which outputs:

    $VAR1 = [
              'empty'
            ];

This might look a bit more familiar. To get the string, we can use the first element of that arrayref:

    my $var = \[""empty""];
    print Dumper($$var->[0]);

But I've got no idea if you would alway want the first element of the  reference to the reference of the array. If that was the case, this construction feels incredibly complicated.",1512416212.0
be-happier,"${$VAR1}[0]

Should do it",1512421269.0
tektektektektek,"I'll be honest: as soon as I start seeing Unicode characters in code I stop reading.

If I can't type it into my keyboard then it doesn't have any relevance to me.",1512344489.0
atsider,"So you can use any letter of your choice as `$^þ`, with the same behavior of `$a` and `$b` in perl, right?",1512302040.0
treenaks,I solved this with Docker,1512285952.0
tm604,"I believe https://metacpan.org/pod/local::lib should work with any CPAN installer, including cpm/cpan/cpanm/pancake.",1512308947.0
__david__,"I prefer [Carton](http://search.cpan.org/perldoc?Carton). It's like Ruby's bundler or npm, where each project has a copy of its dependencies.",1512364059.0
busy_falling,I love getting my holiday Mojo on.,1512241645.0
atsider,Great! Mojo makes so many tasks so easy...,1512308926.0
scottchiefbaker,"> Luckily Perl is able to represent all Unicode characters in a simple, readable, ASCII encodable way: You can use the \N{...} sequence with the official name of the character

So... Perl has a mapping of all [280k](http://www.babelstone.co.uk/Unicode/HowMany.html) odd Unicode characters and their ""official names""?",1512169434.0
