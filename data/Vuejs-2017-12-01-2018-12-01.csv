author,comment,timestamp
whofromwhere,It looks like that code should work. Is something not working? ,1543630970.0
pd-andy,"I don’t think it has anything to do with your problem, but you’re performing an assignment not a comparison in your v-if.

It seems possible that vue might not allow you to inject html willy nilly? Create a method `htmlFromReply` or something similar, and simply return the html from that function (that would be a good time to sanitise it anyway).

    ...
    methods: {
      htmlFromReply (reply) {
        // maybe sanitise first
        return (reply.data.body_html)
      }
    }
    ...
    <span v-html=“htmlFromReply(reply)”/>
    ...

Try this.",1543659517.0
JohnMellor89,"I got an error almost instantly on the git demo

×

TypeError

this.$props.setQueryOptions is not a function

at VueComponent.handleSortChange (https://54l2m5rqxl.codesandbox.io/node_modules/@appbaseio/reactivesearch-vue/dist/

appbaseio/reactivesearch-vue.cjs.js:1059:16

invoker

https://54l2m5rqxl.codesandbox.io/node_modules/vue/dist/vue.common.js:2029:18

HTMLSelectElement.fn._withTask.fn._withTask

https://54l2m5rqxl.codesandbox.io/node_modules/vue/dist/vue.common.js:1828:18

This screen is visible only in development. It will not appear if the app crashes in production.
Open your browser’s developer console to further inspect this error.
This error overlay is powered by `react-error-overlay` used in `create-react-app`.

",1543615273.0
Exybore,"This component looks really cool ! I'll test it one day 😉

And also, I'll explore your open source projects, I think that I'll find some really useful things 😋",1543669414.0
_sirberus_,"Guys, you have to do these on /r/javascript or /r/webdev if you want engagement. Don't do an AMA on a subreddit that doesn't even get 100-point posts. I tell you this because I want Vue to thrive.",1543616085.0
sylvainpv,"Did you come up with the idea of Vue UI by yourself, and how was this idea welcomed by Vue core team ?",1543602909.0
damnitjanicewhatsup,I heard that you hacked the displays at Vue Toronto to show VueJS videos. How did you do it?,1543601973.0
Akryum,"Thank you for your great questions! It's time for me to go have dinner ([raclette](https://www.google.com/search?tbm=isch&q=raclette)) with some friends and family!

Thanks again for my awesome patrons support! https://www.patreon.com/akryum",1543604866.0
cotufa82,What motivated you to do apollo-vue?,1543601804.0
Mekhami,What's your workday like that you're able to balance so many different Vue projects and responsibilities?,1543601830.0
ronildocs,What is the next big project you will tackle?,1543602568.0
henkdevriesch,Why did you decide to start to develop using Vue? What did you like about it? ,1543602687.0
ronildocs,"I'm going to start learning GraphQL pretty soon, any resource you would indicate for newbies??",1543603301.0
henkdevriesch,Thanks for the very detailed answer! It was about the same for me. But its nice to read the perspective of somebody working in/on/with it on your level. ,1543603395.0
catskulll,"What would you recommend for someone who loves Vue and would like to emulate what you've done (contribute new modules to the official Vue ecosystem, improve existing modules/libraries, etc)?",1543604181.0
Jwkicklighter,"Outside of Vue, Apollo, and JS in general, what are some technologies you like to work with?",1543604719.0
bob_lazer,"I‘ve seen that you‘re using Linux for development on your Dell laptop (Elementary OS?), how happy are you with it?  ",1543607382.0
tommulkins,Why can't we make CSS as easy as Vue?,1543610853.0
defunctAI,"Hi Guillaume, thanks for the AMA. 

&#x200B;

My question is simple :)

Aside from vue itself, which libraries or components (nuxt, vuetify, nativescript-vue ... ) do you like most?",1543628431.0
ShetlandJames,"I'm surprised that ""bloated and complex"" is a top 5 negative people had about Vue. 

It feels incredibly lightweight when held up next to the alternatives. Especially Vuex.

I'm a fairly new developer, so I probably don't have enough experience to say but I don't think I could find 5 things that frustrate me about Vue.",1543591874.0
Lelectrolux,"https://ilikekillnerds.com/2018/11/the-state-of-js-survey-is-a-farce/

---

**Edit:**

Because in this day and age, you always have to specify, I agree with the article concerns over a probable bias in the collected data. I don't agree with part of the author opinions though, mostly the suposed justification for this and that.

Still, I feel that, at least for the biased data part, it's worth sharing.",1543592774.0
yeahdixon,Seems like healthy numbers to me. ,1543590673.0
yeahdixon,You use bootstrap-vue? Or include main script,1543590588.0
okBeer,"How about this one?
https://youtu.be/Fa4cRMaTDUI",1543627538.0
thiswasprobablyatust,"Mongo is absolute garbage. No one in their right mind uses that to build production apps.

(Seriously, if you aren't aware of this — google 'mongodb problems' and you'll see a laundry list of people posting not just ""oh, mongo isn't so great at these things"", but rather ""holy fuck it almost ruined our business never ever ever use this pile of flaming dog shit"")",1543591056.0
woowebdev,"you'd set up Nested Routes with Vue-Router:

[https://router.vuejs.org/guide/essentials/nested-routes.html](https://router.vuejs.org/guide/essentials/nested-routes.html)

&#x200B;

And for direct links you'd do something like:

[Named routes](https://router.vuejs.org/api/#router-link)

`<router-link :to=""{ name: 'user', params: { userId: 123 }}"">User</router-link>`

&#x200B;

Sidenote: I'm also new to Vue but I hope this answers your question.",1543589803.0
thiswasprobablyatust,"I had some trouble understanding what is called when, but for what you're doing I usually prefer to move all these API-kickoff calls to the router (use `beforeEnter`) and use nested routes if they share some API dependency like login or user data.",1543562500.0
i_ate_god,"Since you bring up Amazon, I'll ask you this:

If Amazon spent the time and money using their UI developer resources to refactor Amazon to use Vue, how will that directly translate into increased shareholder value?

Because ultimately, that's the only thing that matters for publicly traded companies. So if you want to do large scale refactoring, you must justify it beyond ""Vue is nice to use"". You must demonstrate that it will bring about increased shareholder value.

That said, Alibaba uses Vue and they are the largest retailer on the planet.",1543523442.0
SecretAnteater,"I assume that by ""the entire site"", you mean that routing, and every bit of text would be rendered using Vue. 

For an eCommerce site, you're going to want to keep SEO a focus, which means you are going to want to use server-side rendering (SSR). Google does run some JS on pages, so their crawlers might capture yours content that gets displayed after Vue initializes, but I don't think that anyone knows for certain. It's a gamble, but you could try A/B testing a page to see if you see a difference between SSR and Front-end rendering. 

Vue and React and Angular are all great for Apps that web crawlers don't need to read. SSR is great, and you can get the best of both worlds using it, but can make things harder to maintain. 

Some examples: Netflix uses SSR to render their landing page (SEO/marketing driven), but that is only one page, not an entire ecommerce site. If they found a problem with SSR, they could easily pivot to a static page or another server-side framework. (They might also use it for their app, but I forget...)

**How I would start:**
A great place for Vue on an ecommerce would be a shopping cart widget, which doesn't get crawled by google. That might be a great place to start as that same component could easily be dropped into another app (say, the version of your site that uses vue-router front-end routing) without much reconfiguring. 

Next would be the Admin-side of your site. That's all behind a login wall, and doesn't need to be indexed. You will be able to see how the router works, and find any hutles you might have working with the API (assuming that's how you would get the products to display).

Now that you've got vue-router working and more complex pages working against an API, start a test website intended to be crawled by Google, but not linked to your brand. Just something that displays some test products and basic proof-of-concept stuff. User session, etc. 

Check out Nuxt for a nice framework around your framework. It abstracts a lot of concepts (which can be dangerous), but makes SSR really simple. 
",1543534354.0
extraxt,"The best option today for ecommerces and Vue is:
https://github.com/DivanteLtd/vue-storefront",1543531780.0
SnowyMovies,"Server-side rendering is annoying on medium sized sites, and absolute hell on large sites. If you don't use it, say goodbye to search indexing on all providers but Google.

If you don't care about Bing and Yahoo, go to town. We recently did a marketing site with Vue. All Metadata is rendered on the server side, content on the client with an initial state object. Lighthouse rates it 100 in SEO, client is happy - so that's nice.

Though we're scrapping Vue for future projects. As we learned, my colleagues aren't great at structuring projects. Angular enforces a standard that's a bit easier to maintain. I really like Vue, and will use it on a hobby basis.",1543523546.0
ataraxy,If you want to go down this route I'd consider looking into something like pre-rendering product pages. Either [yourself](https://github.com/SolarLiner/vue-cli-plugin-prerender-spa) or through a [service](https://prerender.io/).,1543539262.0
Vheissu_,"It's the age-old adage of just because you can, doesn't mean you should.

I would never recommend using a library or framework for anything other than an area behind a login screen that doesn't need to be indexed. For an e-commerce site, you're going to want it to be as fast as possible and you only get that kind of speed with server-rendered pages and vanilla JS. As fast as Vue is, it comes with overhead.

Server-side rendering can help, but there are special considerations you need to account for here as well. If you're using any jQuery plugins you're going to have a bad time getting those to work, if your backend is anything other than Node.js, you're going to have a hard time getting server-side rendering added in as well because all SSR solutions rely on Node.js.

I feel like tools such as React and Vue have made front-end development easier, but they make all problems look like nails and these frameworks/libraries are the hammers. But when you go blindly hammering, you get a tonne of unintended side effects and once you're locked into a specific framework or library, it can be hard to break out of it.",1543551642.0
tonjohn,"How many products are in your store? How many products get added each year? Is the store being actively developed or mostly in maintenance mode?

I’m building an online catalog of dental continuing education courses. It’s a static site using Nuxt. Great SEO and performance and all the joy of Vue hosted on free CDN. We trade upfront build time for enduser benefit. Our catalog of ~1600 courses takes 6 minutes to generate on my old MacBook Air using ‘nuxt generate’

As far as migrating an existing site goes, I recently had to do just that - it wasn’t as painful as I imagined! There are still remnants of jquery but those are slowly getting removed each sprint. I wrote a tool that takes a naive approach in converting html files into Vue files (if your markup is generated on the server, you could use Puppeteer for this). I’m working on a blog post that talks about this and will share when published.

From a technical standpoint, there really isnt anything stopping you. Most of the concerns identified in this thread are solved problems. It really comes down to the business justification and budget. Personally, I’m 10x more productive writing Vue so it would be easy for me to justify. But I don’t know how big the site is, how much spaghetti JavaScript you have, etc.

",1543558477.0
,[deleted],1543523449.0
archivedsofa,"SPAs have many drawbacks and very few benefits and should *never* be the default starting point unless the project really demands it. For example, Gmail, Office 365, etc, are good use cases for SPA. Also mobile hybrid apps. But other than that, SPAs have been overused. Even the new Reddit web for desktop is a crappy SPA.

Since e-commerce websites rely heavily on SEO, it's just better to have HTML rendered on the server.

You can certainly render your markup with Vue/React/etc and Node on the server, and then let client side Vue/React/etc take over the markup (the technical term is 'hydrating').

You could also render your markup with any server side language (PHP, Python, Go, etc) and then do hydrating as mentioned before.",1543540393.0
cyberst0rm,"if you are compiling with *.vue components, you can scope the style section.

https://vue-loader.vuejs.org/guide/scoped-css.html",1543551700.0
ZireaelStargaze,"From what you wrote I gather you're already using Router.

You wrote you're not using scoped CSS - but what you want to achieve would be best done with scoped CSS in each .vue file

If not scoped CSS, then maybe you could use Vue CSS modules instead ([https://cli.vuejs.org/guide/css.html#css-modules](https://cli.vuejs.org/guide/css.html#css-modules))? Note: scoped and module aren't that compatible with each other, better do one or the other in one .vue component.

&#x200B;

I think your solution is fairly simple to do. Have one main App.vue component, but it will be actually almost empty - only a sidebar/topbar with links to other 'views' (login, register, basket, etc).

Then use Router to load other views into App.vue main view. (Alternative here, if your website is very simple, instead of using Router components, you could do with 'dynamic components' loaded into App.vue).

&#x200B;

Anyway, here's my skeleton (Router, Vuex - compile with webpack / Vue CLI v3) for a solution that would work for your need (probably):

&#x200B;

[https://pastebin.com/CngDiyDf](https://pastebin.com/CngDiyDf)

&#x200B;

If you think you need several Vue instances running on the same page, then you've gone a wrong path. Unless you're slowly rewriting existing solution, from like jQuery one widget at a time, I guess.

&#x200B;",1543599012.0
ataraxy,"If you want something truly custom you'll have to roll your own. Perhaps merely creating your own components with something such as [tailwind.css](https://tailwindcss.com/docs/what-is-tailwind/) can help you with this.

Similarly, there's nothing stopping you from using something like Vuetify and changing how it looks yourself. For example even just changing the base font will immediately change the material look.",1543502025.0
mwassler,"There really isn't a good UI library for custom design, using a UI library is basically trading originality for productivity. 

",1543501830.0
mikrochipkid,"When working with Vue I tend to use Element.ui is very nice to use and simple! 
https://element.eleme.io/#/en-US/component/installation",1543509018.0
gregos919,"for now buefy is most customizable library i found, default design is simple with as little css as possible, 90% style is changable with their sass variables and components are simple",1543504754.0
fucking_passwords,"Semantic UI, while not my favorite thing in the world, has a whole theming system. I’ve only ever used the jquery version and the build process and workflow was pretty outdated, but maybe the Vue version has resolved those issues",1543500604.0
Lelectrolux,"I'd love to see a full [render prop/renderless components](https://adamwathan.me/renderless-components-in-vuejs/) library where each component has the behaviour, and let the design to the implementer (a la [paypal/downshift](https://github.com/paypal/downshift)).

That's the perfect reuse library, as no style will ever bite you in the ass, and we might have a companion package using thoses ""engines only"" components to give basic bootstrap/bulma/material looks",1543507446.0
visualjerk,"If you want to have lots of components, working out of the box, [element UI](https://element.eleme.io/#/en-US) is a solid choice. It has good looking (and tested) components and isn't that hard to customize.

If you need something more customizable, consider building your own design system. It is a great way to keep everything consistent and documented, which will come in handy as your project grows. You can use a [boilerplate like this](https://cion.visualjerk.de) to give you a little head start.",1543585652.0
denis_invader,"At my work, we solved this problem by creating our own UI library.",1543499595.0
i_ate_god,"https://bootstrap-vue.js.org/

We use this at work, in a large company that has its own UI standards for look and feel (though no standard tech stack). It has worked just fine.",1543523574.0
ThoseThingsAreWeird,"I'm going to put in a recommendation for Quasar. Their component library is well documented, and it's [quite easy](https://quasar-framework.org/guide/quasar-theming.html) to modify the styling for their components since it's built on top of Stylus - you can quite easily build different styles so you could possibly make `client_a.styl` and `client_b.styl`.

I've run into a handful of bugs with some components in the past, but they're gearing up for a 1.0 release so the focus (afaik) is currently on bug hunting. They're also pretty active in [their Discord server](http://chat.quasar-framework.org/) if you ever need some help.",1543525272.0
itshotinjuly,Why not just use bootstrap's grid system and design your own components?,1543558708.0
josewhitetower,check on ElementUI [http://element.eleme.io/#/en-US/component/installation](http://element.eleme.io/#/en-US/component/installation) and Mint UI [http://mint-ui.github.io/docs/#/](http://mint-ui.github.io/docs/#/) for mobile,1543500280.0
nzshu,Yeah just wrap vuex action in a promise ,1543470444.0
vueser,"Maybe I misunderstand the problem, but couldn't you simply add a flag to the store, e.g. user.loaded, initialized to false. You then set the flag to true after getting the user data from the API.

The router.beforeEach function should then behave differently depending on the value of user.loaded. Additionally you could show some loader animation as long as user.loaded is false.",1543490604.0
CaptainJamie,"So I had to build a lot of forms at work constantly, so to ease the pain I started building this to make it much faster and less mind numbing. There's still quite a bit I want to add, but here it is for now.",1543441323.0
re_marks,"Based on the codepen, the `data-server-rendered=""true""` is only for when you're using Vue server-side to render the DOM. Generally you'd use Vue on the client-side so you don't need that flag. On page load, Vue will mount the data and render it in the DOM. Unless you use a custom SSR environment or something like Nuxt, this shouldn't be an issue.",1543439496.0
Arkhenstone,"I've used vue-beautify since then. Not a solution to your problem, but this is an alternative.",1543421222.0
RoastedB,"Try changing the default formatter for Html, JS etc in the Vetur settings to none",1543426696.0
silentdragon,"The most recent update changed the formatter stuff so that might be your issue.

https://vuejs.github.io/vetur/formatting.html#formatters",1543427790.0
noemaillard,"Vue does not detect index based changes in an array, you have two options `Vue.set(array, index, value)` or `array.splice(index, 1, value)` ",1543421195.0
heresjeffrey,"Hi, to me this doesn't seem like a very logical approach. Do you have a jsfiddle example perhaps? 

Input 1 checken could be written like this too I think:
this.quanti2[1] = !(this.quanti1[0] == """" || this.quanti1[0] == null);
or even this might work:
this.quanti2[1] = !this.quanti1[0];

And in the template I think you could just use v-show directly on the input element.

Ik heb zo'n vermoeden dat je ook nederlands spreek (nogAantal). Dus eventueel kan ik je ook in NL verder helpen. :)",1543432257.0
mred_wtfe,Please stop spamming the subs with affiliate links.,1543421992.0
Sir_Poot,"I would recommend adding any of the typography classes to the <Td> element as you stated. Not sure why that would not would not.  You could even dynamically apply the proper class based on your content. 

https://vuetifyjs.com/en/style/typography

I did overwrite the font size with a custom class which works and ran into some formatting / spacing issues so I removed it.",1543406439.0
imshubhamsingh,pretty good! I would love if there is a swipe or keyboard feature to change images.,1543410476.0
akhu117,Brilliant documentation <3,1543407390.0
Syn3t,Nice component. Good job man.,1543409744.0
odinsride,This is really really cool. Nice job!,1543425404.0
JinSantosAndria,"A single file component is a set of multiple things:

\- The visual composition part wrapped in a template tag  
\- The logic wrapped in a script tag  
\- The visual styling part wrapped in a style tag

So if your client needs all this and represents a visual component used in the GUI, yes, you would have a Client.vue. Otherwise, just use a Client.js and include that.

The components are also extensible with other plugins, like i18n, if a component needs to manage its own translation.",1543397443.0
petr31052018,"There are multiple parts (template, JavaScript, CSS) that form a .vue file. The script/JavaScript part is equivalent to JavaScript module (file), not object. You create the component object inside it manually. ",1543405021.0
dzkn,Did you even try to read the documentation?,1543576962.0
JZumun,"It looks like you're not actually removing the event listener you set up in created(), which means that the instance components can't be garbage collected. You should save a reference to the function you're using as callback and remove it by calling `eventBus.$off(""sayHello"", callbackFn)` on the `destroyed()` lifecycle hook",1543397015.0
archivedsofa,"Vuex is what people usually use for application state. Depending on the size of the projects you could get away with a single store, but usually it's recommended to use different modules.

Depending on your use case,  you could use the [store pattern](https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch), or use a Vue instance as a store, then access it via computed properties.",1543361505.0
cyberst0rm,vuex with vuex-pathify makes a straight forward way to easily make getters and mutations for a basic crud setup.,1543377284.0
acklavidian,"Vuex-ORM let's you interact with your vuex store through models and relational mappings. 
",1543602937.0
finroller,Why are you doing this instead of using one of the packages made to be used with Vue?,1543381142.0
JZumun,"Will you be using the braintree on ur entire app? If so, you could put it directly on index.html instead",1543362887.0
waitingonmyclone,"If you're using the latest vue-cli to generate your project, webpack is included but is not obvious. Check out the docs for vue-cli to see where to put your config: https://cli.vuejs.org/guide/webpack.html",1543349906.0
archivedsofa,"Yes, but you'd have to learn Webpack, NPM, etc, or move your project to Vue CLI (single-page app).

If you are using `<script>` tag to include Vue it won't be easy to configure Webpack. I have a Jekyll project with Webpack that could serve you as reference:

https://github.com/PierBover/jekyll-vue-webpack-starter-kit",1543354268.0
ThatSpookySJW,Are you including vue as a script tag? If you want to use webpack you will have to set it up as a node project. It might be easier to do some compile-time script that replaces variables in the file.,1543346888.0
thinkadrian,"I'd make an AJAX request for the content and check the response headers, then insert into the iFrame if the content is good.",1543343362.0
__neone,"Maybe something like this?

        computed: {
        
           iFrameEmpty() {
        
              return document.getElementById(""iFrame"").textContent.length
         
         }
        
        }",1543356579.0
SnowyMovies,"If the user doesn't have the data they need, you need to throw an error.

Write e2e tests as part of your work flow.",1543340044.0
Demivan,"For PWA you only need manifest.json and service worker js file.

Manifest can be created manually. But how to generate service worker will depend on your build tool.  
If you use Webpack look into `workbox-webpack-plugin` [https://developers.google.com/web/tools/workbox/guides/codelabs/webpack](https://developers.google.com/web/tools/workbox/guides/codelabs/webpack)",1543333675.0
AwesomeInPerson,"In case you created your project with the Vue CLI but just didn't select `pwa` as option when you created it, you can run `vue add @vue/pwa` and it will add the plugin to your existing project.  
Otherwise roll your own using the workbox plugin the manual way.",1543340122.0
lukeajtodd,"You can either use an arrow function as the callback to \`done\` in your ajax call or you could assign a variable before the ajax call along the lines of \`let self = this\` and use self instead of this inside your callback.

&#x200B;

The issue you're having is that the \`this\` context in your done callback is referring to the jQuery this, not the Vue instance.",1543326724.0
jeefsiebs,"In addition to using an arrow function, you can use `.bind(this)` on your function to give it context

    $.ajax(settings).done(function(response) {
      this.outlines = response.Data;
      console.log(response.Data);
    }.bind(this));",1543327086.0
OmegaVesko,"The `function () {}` syntax binds its own `this`, that's why your code isn't working. The easy way to fix this is to change that callback to an arrow function:

    $.ajax(settings).done(response => {
      this.outlines = response.Data;
      console.log(response.Data);
    });

I suggest you read up on how `this` works in JavaScript, it's a little convoluted.",1543326837.0
desproyer,Thanks everyone appreciate all the solutions u gave me!,1543329346.0
djxfade,"    <script>
      export default {
        name: 'quickQuote',

        data: () => ({
          msg: 'Hier komt de quickQuote',
          token: 'AB2E2DB9C0894F0CAAE8ABBCBDA5E981',
          checked: false,
          outlines: [],
          gekozenOutline: null
        }),

        async created () {
          // call voor outlines
          const url = 'http://10.250.252.1:43001/parameter-api/calculation/outlines/'

          const request = await fetch(url, {
            method: 'GET',
            redirect: 'follow',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${ this.token }`,
              'Access-Control-Allow-Origin': '*'
            }
          })

          const response = await request.json()

          console.log(response.Data)
          this.outlines = response.Data
        }
      }
    </script>
    ",1543331959.0
manu144x,"Isn't Data supposed to be lowercase? [response.data](https://response.data)?  
That's how I've always used it.  


And please use axios with vuejs, jquery has no place here :)  


this is working that way only if use something like webpack, which will automatically make  all the adjustments, based on the vue configuration.  


Otherwise you must assign this to a variable before the ajax call, and then use it with that variable:

&#x200B;

        let _this = this;
        $.ajax(settings).done(function(response) {
          _this.outlines = response.Data;
          console.log(response.Data);
        });
        this.outlines will now equal your response data :)

&#x200B;",1543328949.0
JZumun,"What i did with my projects was to set up a simple express server, and point static assets to the dist folder, and the desired endpoint to my index.html. You can add other server side logic to the router as well",1543319923.0
JinSantosAndria,"Just keep it separate. You Vue project has nothing to do with any server, it will end up as a static set of files that can be put into any kind of webserver, be it nginx, apache, go or express. Just create another project and build your API and point the Vue API URIs to this backend. Doesnt matter if its a node express server or a simple golang project.",1543321160.0
WakeskaterX,"As mentioned, express is nice and would work well, but if you're using the new ES6 functionality / async/await and Node8+, I'd recommend Koa instead.  It supports async functions by design and is a little lighter, letting you import just the libraries you need.",1543326562.0
tonjohn,"Have you considered using Nuxt?

My preference is to use FaaS and avoid maintaining infrastructure as much as possible. If you need web sockets, you can use Azure SignalR with Azure Functions and Logic apps. No standalone server needed!",1543375905.0
archivedsofa,"Look at Zeit now.

In single repo you can have static assets and cloud functions that can act as REST APIs. Much cheaper than having a Node server running 24/7.",1543432326.0
ResponsibleLife,Try https://github.com/feathersjs/feathers,1543321352.0
chrissilich,Learn js properly first. ,1543301569.0
finroller,"I think this depends a bit on the person learning. All these replies where people say ""learn proper js first"" ought to read ""learnproper js before you start doing js publicly or for living"", until then whatever rocks your boat is the way to go.

So, you definately can learn as you go. Whether or not you should is a matter of taste and depends on the situation.",1543317972.0
pmbanugo,"Hey, I suggest you learn some fundamental JS first, otherwise, you won't understand some syntaxes or things they say. Also, it'll help with your understanding of Vue.js and make you better at using it. Since you use Pluralsight I'll recommend two courses unrelated to Vue.

&#x200B;

1. [Javascript fundamentals.](https://app.pluralsight.com/library/courses/javascript-fundamentals/table-of-contents) This will explain some fundamentals and also talks about DOM. 
2. [Rapid ES6](https://app.pluralsight.com/library/courses/rapid-es6-training). ES6 is essential to working with Vue. I think this course will help you with that.

Once you're finished, you can watch the Vue course you want. Aside, if you want to really appreciate Vue and other frameworks, or learn JS more, you can build side project with vanilla JS. I think JavaScript in 30 days by Wes bos might help with that",1543390028.0
thinkadrian,"JavaScript isn’t that dissimilar to Java, because both are simplified languages. ES6 puts more focus on OO as well, which you will have great use of for component-based frameworks like Vue and React.

Check egghead.io – they’ve got both paid and free video tutorials. Kent C Dodds is usually a React guy, but he teaches JavaScript fundamentals as well.

Deffo learn JS properly first.",1543302645.0
jasnah_,Agree that you need to learn javascript properly first. Try Wes Bos’ free courses — https://wesbos.com/courses/,1543305715.0
penguingspe,you should learn react,1543301538.0
JohnMellor89,"I annotated the jsfiddle with comments so hopefully it makes sense. The idea is that this would be a mixin and at any point you could call `pendingToast('My Message', callback)` with the callback most likely an axios request.",1543300701.0
JohnMellor89,"I annotated the jsfiddle with comments so hopefully it makes sense. The idea is that this would be a mixin and at any point you could call `pendingToast('My Message', callback)` with the callback most likely an axios request.",1543299649.0
ShetlandJames,"If anyone's looking to achieve conditional loading without yet another NPM package, it's simple:

    <template>
     <div v-if=""loading>
         loading content goes here
     </div>
    
     <div v-else> 
         main content here
     </div>
    </template>
   
    <script>
    async created() {
        this.loading = true;
        await this.$store.dispatch('API_CALL_YOU_ARE_MAKING');
        this.loading = false;
    }
    </script>

Here's an example of loading in action: https://streamable.com/ye8hx

I've used setTimeout to enforce a delay but the principle is the same.",1543316767.0
gitcommitmentissues,"You may have been burned by a security vulnerability in a deep dependency of the CLI- npm removed the malicious package and broke any dependent installs. You should try again now, Guillaume has published a fix. [https://twitter.com/Akryum/status/1067357616844808192](https://twitter.com/Akryum/status/1067357616844808192)",1543326194.0
CaptainInsane-o,"npm install -g @vue/cli@latest

That will get you the latest version. Try that. ",1543287460.0
dballz12,"I’m not sure if this will help, but you need to uninstall any previous vue-cli before installing @vue/cli. I read this at some point(of course I can’t find it now), but if you didn’t initially do that, could be the root of the issue. I will look for the doc that said this, I believe it was the official vue doc but like I said, can’t find it at the moment.

Edit: Here it is - right at the top, it says you need to npm uninstall vue-cli first. Also - make sure you are using node 8.9 or above.

https://cli.vuejs.org/guide/installation.html",1543325725.0
chandher_05,Try updating your npm and check if it's the latest version. I'm guessing here. ,1543385261.0
fucking_passwords,"IME most of the time when you want vector graphics to be resizable, you want them to be inline so you can let them inherit base colors, maybe conditionally hide parts of the graphic, etc.

Put your inline SVGs into Vue components. I almost always end up cleaning up the SVG XML when I do this, remove unneeded tags and selectors, which is a little extra work but it’s worth it when I need to come back and change a color later",1543272179.0
watMartin,"To everyone interested, look into vue svg loader. It lets you automatically use svg files as vue components without having to actually write the component out, and allows you to leverage all the power that having them as components gives you.",1543279576.0
imGnarly,"That depends, SVGs are usually very light. How many of them do you have? 

I have handled them in many ways, but my preferred method is to host them somewhere like Google Storage and handle the icons with the links. ",1543271095.0
xaksis,"I wrote a blog regarding my experience with inline svg in a vue project. [it might help](https://blog.crayonbits.com/2018/10/30/how-to-add-svg/).

Tldr - I tried a few npm packages but then ended up creating svg components myself. Don't know if this is the best way, but works well for me. ",1543309989.0
Parasin,"I have been looking for a way to turn my SVG’s into a Vue component, care to share an article or example of how you did it?",1543277160.0
so_lost_im_faded,"Sadly I can't recommend a solution for you, but perhaps another alternative.

I use VeeValidate and I created a wrapper component that inherits settings as props, passes them to the input and displays an error message automatically.

You can choose which input to validate and which not, either by using your custom component like I did, or simply using the VeeValidate parameters. If you don't specify any, the input won't be validated automatically.",1543264611.0
TomdanizerWork,"I also use VeeValidate, which allows you to disable validations from running.
https://baianat.github.io/vee-validate/guide/events.html#disabling-events-validation",1543265018.0
hamzaouiii,"I think if you want to share this here, you maybe should share your Vue code with us. ",1543189909.0
acangiano,"You have a usability bug. I enter a search term. Press ENTER and the input disappears. Type it again, press ENTER, and this time nothing happens. The button works fine, however.",1543197978.0
visitredditreviews,"If anyone has suggestions, questions, ideas, or even wants to contribute - let me know!",1543189016.0
FrodoTBaggins88,Nice work man. And a useful little app too. Keep up the learning!,1543220175.0
SandFriend,"Nice job!

Not sure if there is some api limitation but only some posts seem to show the date. It would be helpful if the date of the post could be displayed for all results. The date would also be easier for the user to parse if it was formatted like reddit displays dates, e.g. ""4 months ago"", ""1 year ago"", or ""2 days ago"".

Another useful option would be the ability to order by date.",1543259916.0
dougalg,"Nice! One small thing I noticed is that when there are no results, nothing seems to happen, I just kept clicking the submit button, thinking it was broken.  Probably a ""no results found"" message would be helpful for this case",1543233867.0
isowolf,"Neat app. Here are few suggestions:

Maybe show upvotes/number of comments so we know from the start how relevant are the links?

Can you add pagination, so we can list more than 1 page?

Add dates to each post.

Maybe make the whole v-card clickable. ",1543259200.0
Mionel_,RemindMe!,1543217568.0
AwesomeInPerson,"It didn't switch to `false` when the state changed because stuff in data doesn't update automatically – computed properties do. Remove `disableButton` from the data object and turn it into a computed property instead.  
So add  
    disableButton() {
      return this.handle.length === 0
    }  
below the `...mapState` in the `computed` Object.",1543172415.0
wgpiv4,"What if you just used your computed property `handle`  in the vbind for disable and do your boolean check there? ie: `:disabled=""handle.length === 0""`",1543173372.0
CoffeeToCode,"I've never used VeeValidate, but a quick look at the docs shows that `validate` returns a Promise.  Should probably check before posting /u/maniakh.

https://baianat.github.io/vee-validate/api/validator.html#api",1543168686.0
MrButttons,"I think vue-cli handles the heavy work for you, you just need to import the relevant sass file in whatever component you're using it in. 

Or if these are global css files, then just import them in main.js

Importing in JS-
import '@/assets/css/style.scss';
",1543125678.0
cyberst0rm,":id for router creates a $router.params property. its arbitrary as far as what you use it for.

you can learn more about it by learning about the props function use: https://router.vuejs.org/guide/essentials/passing-props.html#object-mode",1543112789.0
ImReddit,Honestly try out Nuxt.js. ,1543082940.0
Payfarer,For your purposes I'd recommend a Vue CLI 3 boilerplate with the official vuecli3-vuetify plugin,1543076621.0
getsiked,"If I can provide some anecdotal experience based on building [my portfolio](https://benjamintaylorportfolio.netlify.com/#/) with Vue.js & a REST API- I would definitely recommend using Vue CLI to take the hassle out of the managing the build process. Also, Vue Router will help immensely for loading and viewing components.

For styling, since it's your portfolio- 100% build your own ""foundation"" and style from scratch. You stated your purpose is to show you have good front end skills- not only will doing this show prospective employers your skills as a front end developer, but it will provide a valuable learning experience and allow you to understand why and where frameworks provide benefits and drawbacks- and these translate to really good talking points during an interview. Vue's single file components make this process a lot easier as well!

Would be happy to answer any questions you have as well with it. Also don't listen to anyone who says using a REST API is overkill, what you're doing is building for longevity and not just a ""one and done"" website. Why in the world would you want to mess with code each time you want to add or update a project piece? It makes much more sense to put in a little extra work to enjoy the ease of being a ""content manager"" instead of just copying and pasting code for management.



",1543081376.0
CSEngineer13,Why is no one mentioning VuePress? The Vue static site generator?,1543086981.0
shounenwrath,"I actually wrote my thesis about writing a portfolio website with Vue.js and dove heavily into the ecosystem related to it. I ended up using Vuetify. There were some shortcomings in the props some of those components used, but nothing you can't work around.",1543079594.0
twentz0r,"I'd go with plain nuxt and SSR either on your end or hosting via netlify so you don't have to setup that yourself (it can be a real trouble). If SEO is important to you, and I'm sure it is, consider nuxt and/or netlify.",1543106065.0
wordythebyrd,"Vuetify can be added as a plug-in with Vue CLI 3.  Also, check out [vuepress](https://vuepress.vuejs.org), which I used for my portfolio site.",1543081368.0
BrianKimball,"Use nuxt https://nuxtjs.org. use tailwinds if you want full control of your design, vuetify for material design, or bootstrap-vue for bootstrap. ",1543098890.0
neotorama,"Overkill.

Just use static site generator like jekyll or hugo",1543079402.0
htom3heb,Static site generator hosted on a CDN. Write your own ssg if you feel it's not complicated enough :-).,1543090338.0
Mekhami,"Vue (and other SPA frameworks) are for making -applications-. That means things with complex user interactions, rich interfaces. A portfolio is just a static site with some links to your stuff, some styles, some images, niceified with some css and maybe a little javascript effect magic.

What makes you think you need or should use Vue for this? Using Vue 'because you can' and because using it shows you can use it actually doesn't prove anything except that you're not picking the right tools for the job.",1543076839.0
JohnMellor89,"I use bootstrap sass and then pull in a few components from Vue bootstrap. Some are really good (forms, tooltips) and others are really crap (tabs). Just pull in the 4 or 5 components you actually need you'll barely notice you're even using it.",1543025682.0
bayareawebpro,Not even close.  Vuetify by a mile.  Or... Quasar.,1543026288.0
PinkyWrinkle,Vuetify is the gold standard of ui frameworks.,1543025701.0
finroller,"The question is: Do you want your company website to be material design based? If so, Vuetify is probably the best choice.",1543032046.0
RAZLFRAZ,"As long as vuetify has all of the components you need, or you feel comfortable modifying them, I'd go with vuetify all the way. It's the best material design library I've used. Way better than angular-material at least. Also, go vuetify  if you want to ditch jQuery. If I remember correctly, some bootstrap still uses jQuery.",1543034887.0
mmcnl,"I use vanilla Bootstrap (not vue-bootstrap). I can see the benefits it offers, but for me the cost of having to consult documentation for two projects instead of one is not worth it. And there's nothing in Bootstrap that you can't easily implement yourself anyway. My advise would be to only use Vue-specific UI frameworks if the benefit it provides is ultra-clear, otherwise just use a vanilla UI framework. Vue is extremely flexible and modular so 90% of the time you won't need it anyway.",1543069357.0
_3psilon_,"🇻​🇺​🇪​🇹​🇮​🇫​🇾​ all the way if you need all the Material design stuff  (layout and components). It really is a very powerful library. Also has flex layout implemented just as Bootstrap did e.g. `xs12 md6` and similar attributes. But it also has *tons* of powerful components, from menus to app drawers and data iterator tables.

&#x200B;

Disclaimer: I'm using Vuetify to build some nice UIs. I'm also helping with the development a tad bit. :)",1543069424.0
ENx5vP,"vuetify comes with Material Design, bootstrap-vue with Bootstrap. While both are pretty well maintained, they serve different purposes on a lower level. From Wikipedia:

- Bootstrap is a front-end framework 
- Material Design is a design language

That's the reason you find more content within vuetify (e. g.: component transitions).",1543042700.0
samsquamchh,"Most recently I used https://vuematerial.io/. I guess it's technically in beta and they say the API won't change but warn against using it in production, but I had a pretty good time using it. Vuetify looks more feature-packed and complete though.

",1543040462.0
le_fieber,I can recommend quasar. It offers material design and iOS style in one codebase and has tons of components. I have been really satisfied by using it.,1543060086.0
scottocom,I chose vuetify because I sick of seeing Bootstrap. ,1543023772.0
BrianKimball,"I've used both. They're both nice, vuetify has more components and sticks to material design. If your other teammates are used to bootstrap, they may be more productive more quickly with bootstrap-vue.
",1543062716.0
i_ate_god,"Since you're already using Bootstrap, then I'd recommend https://bootstrap-vue.js.org/

If you really want to rewrite everything from scratch, then look at Vuetify. But, Vuetify will not make it easy for you to create a custom look and feel, while Bootstrap will.",1543259820.0
mobiledevguy5554,Vuetify is fantastic.  i built a decent sized app in it and did not hit a single issue with it.  Whichever framework you end up going with please donate to the authors! ,1543275810.0
yeahdixon,"I believe Vuetify maybe be more than a css framework , having not just css , but actual vue components  as well.  ",1543025255.0
bob_lazer,"Vue Bootstrap is supported by Nuxt core devs. 

Personally I wouldn't pick Vuetify for a serious project because I'd be unsure about its future, it uses Stylus under the hood, which is kinda dead. Last commit 9 months ago..

I'd pick between Vue Bootstrap or Tailwind.",1543064659.0
n0phear,I’m waiting for vue 3 when it makes more sense.  You may want to do the same.  Things will change then.  ,1543030351.0
tehghettosmurf,"I don't know of a class that combines the two, but both the [Vue](https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/) and [Typescript](https://www.udemy.com/understanding-typescript/learn/v4/) courses on Udemy by Maximilian Schwarzmüller were fantastic.",1543033646.0
RabbitLogic,"Not a guide, but I have a simple base project for Vue/Typescript with routing and a Vuex store https://github.com/Projkt-James/VueTypescript-Simple-Base",1543027269.0
nightmarecinemajesty,"I don't know of any really great courses or tutorials that use both, but the Vue CLI does a very great job setting up a Vue project with TypeScript.  IMO, Vue with TypeScript is a little hacky in comparison to Ts with other frameworks. But, it is totally doable.  We're just beginning to migrate an app at our company with Vue/Ts.  You gotta use TS strict null checks to get the intellisense going (that is defaulted in the Vue CLI default TS project setup).",1543027609.0
mwh1989,Egghead.io has some good vue typescript classes,1543062190.0
bot_not_hot,Look up the TypeScript class in the Ultimate Angular site,1543037040.0
gntsketches,"Ok, solved! For reference: the path to the Mp3 should be specified from index.html, not from the file where the code is written.",1543013926.0
stormist,"This course is awesome and totally worth it: https://www.udemy.com/vuejs-2-the-complete-guide/ The teacher, Maximilian Schwarzmüller, has a great teaching style. ",1543004639.0
green-raven,"There's no point in using a framework. You can't decouple javascript from a javascript framework. I get wanting to know javascript as an intellectual exercise,  but the framework is developed to simplify and organize things.  JQuery is just a wrapper,  but who wouldn't rather use it if it's available? Vue is great,  but I use ""raw"" javascript all the time in my components.  After all,  you're just inside a script tag,  and that script is javascript. ",1543082379.0
UntestedMethod,"Vue is a front-end framework, so in the decoupled scheme its primary purpose is presentation and user input.  Vuex provides a shared state with a straightforward get/set interface (getters and actions/mutations), this makes it a very usable link between the UI and the data.

For a Model/Controller structure that's decoupled from Vue, consider building these parts as JavaScript objects (or classes if you are willing to consider ES6 as vanilla enough*) that are tapped by Vuex actions and getters.

If you want to go as far as decoupling some of the presentation layer, I think the most that could be achieved is to move CSS into external files (versus in single-file components).  It's hard for me to imagine this being convenient though as moving to a different front-end framework would typically result in at least some restructuring of the DOM and CSS.  In that case I would probably be copying and pasting blocks of CSS during the port.

I have also decoupled in the other direction to extend the presentation layer with another UI library (ex. a paper.js canvas).  I wrote a decoupled JavaScript module that provides methods to control the paper.js canvas and have my Vue component call those methods and listen for input events from the module.  I could import this same module into another frontend and still use the customized canvas in the same way (just with different UI code to link between input->data-processing->output).

* using automated tooling (webpack, etc) to run ES6 code through a transpiler is pretty standard in modern JavaScripting.",1543023621.0
bob_lazer,">I've started to use VueJS but I'm feeling I'm learning a framework instead of learning JavaScript..

You could look for [content](https://www.youtube.com/watch?v=dUlz4tc9LSo) that teaches you React without JSX. It's basically just Javascript.

",1543017291.0
DirectGamerHD,"Check out the free JS course from Flatiron schools. That’s all I needed for a quick intro to JS.

Edit: [Link](https://flatironschool.com/free-courses/learn-javascript/) 

I come from a C# background.",1543012402.0
StandNTroll,Why is this even NSFW? ,1543304909.0
avenp,I've been using StandardJS and loving it. I think it's the default in the CLI.,1542996374.0
thinkadrian,"`eslint-essential` is very basic.

`airbnb` is popular, but very harsh. I usually set Airbnb and customise some rules separately depending on how they disturb my own pattern.

It's good to start strict when your a newbie, though - that's how you learn how to write cleanest code. It's also good to learn how to follow team rules (by pretending that AirBnB is your team)",1542993726.0
HokieFreak,I like Prettier ,1542999634.0
Hadora,"I personnaly ditched eslint for prettier

Easier conf file and plugin for many IDE

If you work alone, don't waste too much time with big compagnies solutions",1542995907.0
UntestedMethod,"I used the default ""standard"" but updated my .eslintrc to force semicolons after reading reactions to a poll in r/javascript about this odd ""standard"" of not using semicolons.",1543009371.0
yeahdixon,"Personally, I don’t think it matters much. It’s mostly just formatting of code. Airbnb occasionally gives me errors that I need to disable.  Standard is fine once you get used to no semicolons. ",1543015250.0
krendel122,"We are using the combination of three:
""airbnb-base"", ""plugin:vue/strongly-recommended"", ""plugin:prettier/recommended""",1543056961.0
AnthongRedbeard,Electron for apps. Between node vue and angular you have enough to stay busy a while. Then focus on techniques and libraries to accomplish things. JavaScript has so many fun things. Alasql papaparse d3 cytoscape rxjs lodash the list goes on,1542982025.0
bordini,"Nuxt (vue SSR framework) and GraphQL/Apollo are two things definitely worth checking out!

https://nuxtjs.org/  
https://www.apollographql.com/

",1542985626.0
finroller,I think Laravel is very popular among Vue developers. I myself am developing against a Spring Boot backend and a custom php-thingie. Jumping between languages isn't a big deal after you get used to it and compartmentalize properly.,1542985596.0
JinSantosAndria,Vue / Vuetify in combination with self written Golang API server or PHP Symfony Backends and some Docker to keep things clean.,1542983430.0
writetehcodez,"I work in a Microsoft shop, so we use Vuejs for reactive frontend components for our ASP.NET MVC applications. ",1543008685.0
lucuma,"Vue, vuetify and service stack (.net)",1542984551.0
ScientistSeven,Quasar-framework.com can give you a lot of flexibility,1542989718.0
vueser,"Vue + Vuex + Element-UI (if needed) + Coffeescript for the front and Python + Flask + Apache + PostgreSQL for the back.
A bit of a learning curve but it's a super productive combination, and I like that coffeescript makes the front-end code look more like Python (list comprehension, semantic whitespace etc), which makes the jumping between languages more manageable.",1543011318.0
YolognaiSwagetti,"Occasionally when I have a backand task I have to develop a little bit here and there in Elixir/Phoenix. Wouldn't really recommend it though as it is fairly hard to learn, even after java and javascript because it's quite different and there are a lot of funky things that you can do in it. The same old stuff like rest endpoints etc. is not all that different from anything else though- but i like developing node.js backends much better.",1543002948.0
pimpante,Container and nginx for backend and non relational dB such as Mongo,1542983562.0
wikitih,"It is hard to give you some orientation without some code or context. Are you able to reproduce this error on a small project? That way, you may share with us that code, and try to analyze it.",1542979970.0
psyick,"OK scrap the popper.js stuff, I manually removed the  sourcemapping URL (and then the next errors for bootstrap .js.map and [aos.js.ma](https://aos.js.ma)p) from the compiled app.js and while the debug errors have gone, the rendering errors persist.",1542980137.0
psyick,"I’m coming back to reply to myself here in case it helps anyone googling in the future. Eventually I fixed it, there were two issues:

1) somehow, sometimes JSON with relations passed as props needed single not double quotes round it. This helped, but didn’t fix the problem. Which might make sense given the below, if it is parsed and slower in doubles.

2) Calling app.js asynchronously at the top of page worked fine in development, on production Vue was sometimes being initiated before the rest of the page had loaded, so then wouldn’t render as the el div was not fully loaded. No errors though for some reason. Removing async or moving to bottom of page finally fixed it.",1543529228.0
AddictedToCoding,"It's with ESLint, 'vue/html-indent' rule.  Setting thise up can take time.

https://github.com/vuejs/eslint-plugin-vue/blob/master/README.md#uncategorized",1542962142.0
333nuc,The way you formatted the code in your post I can't see the difference,1542960437.0
sdiown,"In vue-cli 3, if you hit command 'nmp run lint' it will format all of your vue and other js files. Not a exactly what you want but..",1542964964.0
ameo02,"@[zookz42](https://www.reddit.com/user/zookz42) hey, is it ok to pm you to ask you some questions about this template.

I have this one as well, and I'm a real n00b.",1542973751.0
ataraxy,"Not sure what formatter you're using with VSCode, but I haven't had any problems with using https://github.com/vuejs/vetur and changing an eslint rule here and there.",1543008794.0
DisneyLegalTeam,"The way I understand your question you’ll want to set an input’s [tab index](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex). If you don’t want an input to be tabbed to you can give it a negative tab index. 

Or you can [force the focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus)  to the input you want in Vue’s `afterCreate` event. ",1542938208.0
lenswipe,"* I think what you're looking for might be `this.$refs.<ref>.focus`

Sec...HMB.

EDIT: Here you go - https://codesandbox.io/s/0vx2py1z7n

I trimmed the component code down a bit to use ES6 and took some of the bootstrap stuff out while I worked with it. You should be able to put that back fairly easily (though this might be a good time to look into just using your own CSS and ditch bootstrap! :D)

Here's the code:

    <template>
        <div>
            <input type=""number"" placeholder=""CD"" v-model=""TrackId"" @blur=""getTrack"">
            <input type=""text"" placeholder=""Artist"" v-model=""Artist"" :disabled=""isDisabled"" ref=""artist"">
            <input type=""text"" placeholder=""Title"" v-model=""Title"" :disabled=""isDisabled"">

            <input type=""text"" v-if=""isNew"" placeholder=""SoMe"">
        </div>
    </template>

    <script>
    export default {
        name: 'TrackLine',
        props: {
            tracks: {
                type: Array,
                default: () => [{
                    // Push some initial data into the data array on component - you can safely delete 
                    // this and just have default: () => []. It's just for demo purposes...
                    id: 9001,
                    title: 'Never gonna give you up',
                    artist: 'Rick Astley'
                }]
            },
            number: {
                type: Number
            }
        },
        data: () => ({
            isNew: undefined,
            isDisabled: false,
            TrackId: undefined,
            Artist: '',
            Title: ''
        }),
        methods: {
            getTrack() {
                let tracks = this.tracks;
                let id = this.TrackId;

                if (id) {
                    const track = tracks.find(track => track.id == id);
                    if (track) {
                        this.Artist = track.artist;
                        this.Title = track.title;
                        this.isNew = false;
                        this.$refs.artist.focus();
                    } else {
                        this.isNew = true;
                    }
                }
            }
        }
    };
    </script>
",1542939326.0
djrasmusp,"Thanks u/DisneyLegalTeam and u/lenswipe :) Got it to work with a mix of your answers :)  
Added the tabindex to my ""inputCD""-field and made an event, with $refs to set focus on the ""artist""-field if it was a new track ",1542986239.0
tonjohn,Vue School has a good guide on code splitting and async components- https://vueschool.io/articles/vuejs-tutorials/async-vuejs-components/,1542936167.0
ataraxy,"Are you using firebase auth as well? Since that should do this for you anyway.

Otherwise you may have some success looking [in this direction](https://firebase.google.com/docs/auth/admin/verify-id-tokens#verify_id_tokens_using_a_third-party_jwt_library) or [this one](https://firebase.google.com/docs/auth/web/custom-auth).",1542914833.0
stukjetaart,"I don't have a lot of experience with Firestore but I assume that you can't change the users UUID? So that means when a user is compromised, he is unable to revoke the accesstoken (UUID in this case)

You should look into the authentication flow of oauth or OpenID.

The other commenter suggested that such a thing is even implemented in Firebase.

Just don't use the UUID of the user and you should be good ",1542958113.0
romancm,You can store the session using vuex and make it persist. Check out my implementation https://github.com/romancmx/gamebrary,1542959251.0
Binnenhorster,"Firebase is holding the the current user and session on its own. You don't need to implement it. You just need to listen to the state:

`observeLoginStatus(onChange) {`

`FirebaseApp.auth().onAuthStateChanged(user => {`

`if(user){`

`onChange(true)`

`} else {`

`onChange(false)`

`}`

`})`

`},`",1542981142.0
so_lost_im_faded,"I do use them for simple data rendering.

As you said, they're buggy and lacking. I guess it depends on what you want to display, sometimes it's efficient to wrap a component around your table (I have one like this with filtering & pagination) to handle the stuff that the ElTable can't.

Also sometimes it's better to use just simple HTML table for me when I want to display a lot of custom content. In that case I import bootstrap and style it to look like ElTable for visual consistency. #Hackerman

However, I still haven't found a better solution than element-ui. I despise the material Google Vuetify design (not material design in overall).",1542901802.0
daneren2005,Is this a wrapper around the big PDF viewer library or their own native implementation? The reason I ask is the PDF spec is a beast with a lot of edge cases that other ones have mostly solved already,1542905455.0
arkokoley,GitHub: [https://github.com/arkokoley/pdfvuer](https://github.com/arkokoley/pdfvuer),1542925944.0
Mekhami,Yes?,1542827952.0
keesbeemsterkaas,Yes.,1542828743.0
lun_ux,Why not?,1542828861.0
pverma8172,"Ubuntu Budgie 18.10 + Nginx + to test my app on reverse proxy while it's in development stage.  
For additional softwares which run only on windows I've Vmware Workstation.  
",1542856960.0
COUNTERBUG,You might specify your intention. Do you want to know how to deploy your app on a linux server?,1542829189.0
thePiet,Of course!,1542830971.0
drunken-coder,Yep,1542832887.0
iamnotnotnotafrog,Yes,1542833039.0
mac_iver,Yeees,1542839413.0
campbeln,Uh-huh...,1542840001.0
leolleocomp,Yeah,1542846700.0
jezmck,Probably the majority.,1542847317.0
arkokoley,"Yes, Ubuntu Budgie 18.04 + docker for my deployments. ",1542872616.0
mxtherock,"Hm, yes why not? ",1542878497.0
raublekick,"I believe MapBox.js is based on Leaflet.js, which is a framework-and-service-agnostic library for maps. There are a few Vue plugins for leaflet but you don't really need them. ",1542831754.0
chinesetypewriter,"Built a smaller project with the two a while back. The repo I believe is private, but did you have any specific questions or just want some code examples?

Here's the project: https://idk.fun

I did like working with mapbox and their documentation is pretty great also. ",1542860129.0
ataraxy,"I've used them both together pretty extensively but I don't have any examples to offer you. If you have a question maybe I could point you in the right direction though.

I will say it's pretty powerful. You can bind and manipulate mapbox-gl-js to  computed models for example. I had built map designer people could use to design their own map styles targeting things like road/water fill styles among other things. Realistically you can probably do whatever you're thinking of.",1542826140.0
Noclue4u,"I’m building a project with it right now, but most of my logic comes from D3. I mainly use vue to toggle some generated information and keep track of the state.

It’s not live yet, but it will be on friday. Still not completely finished by then but it’s for a school project with lower standards haha.

I can share it by then if you want. 

Mapbox works really great and has a great amount of built in features. I would say just take it for a spin and create something beatiful. It’s great fun to work with.",1542839059.0
SkyLunat1c,"Tegola (tileserver) uses mapboxgl with Vue for their default renderer: [LINK](https://github.com/go-spatial/tegola/tree/master/server/static)

You also have mapboxgl mappings for Vue: [LINK](https://github.com/phegman/vue-mapbox-gl) ",1542873849.0
lenswipe,"That looks good to me, to be honest. Though I would say you could probably trim that action down a little using async/await..

    async createUserAddress({ commit }) {
        commit('fetchUsersRequest');
        
        try{
            const { users } = await fetchUsers().data;
        
            commit('recieveUsers', users);
            commit('fetchUsersSuccess');

            return users;
        } catch (error) {
            commit('fetchUsersFailure', error);
            throw new Error(error);
        }
    }

EDIT: for sanity I'd suggest using redux style constants",1542822087.0
ataraxy,"Depending on how much control you want, you could check out vuex-orm: https://vuex-orm.github.io/vuex-orm/

It also has an axios plugin which would let you hook into different request related error states: https://github.com/vuex-orm/plugin-axios

Personally I like the simpler async option you were offered below but more options can't hurt.",1542825781.0
Robodude,"This seems good to me. Perhaps I'm a little lazy, but I would just keep the `users` list in this module too. If you insist, I would namespace the modules to help make it extremely clear where the module could be found that contains the list of users",1542822970.0
archivedsofa,"That's the usual way of doing it.

Personally I've moved all the API stuff outside of Vuex, and barely use actions anymore.",1542822908.0
NominalAeon,"Looks good, I'd only recommend using [Vue.set](https://vuejs.org/v2/api/#Vue-set) to assign state values",1542822057.0
crazyarai,"That's the whole point of Vue. It manipulates the DOM for you so you can focus on your business logic. You won't be manipulating the DOM directly often when developing with Vue.

P.S. look up virtual DOM Vue, here's one of the first results that looked decent to start you off (though I only quickly skimmed it): https://medium.com/js-dojo/whats-the-deal-with-vue-s-virtual-dom-3ed4fc0dbb20
",1542815909.0
Impressionable-Youth,"Whoever told you to forget about jQuery is being short-sighted.  Thousands of websites still use it and it has its use cases.  That said, DOM manipulations are not explicit in Vue as they are in jQuery.  For instance if you want to change the class of an element in Vue you would bind the class to a truthy value and switch the value of that variable and Vue would handle adding and removing the class.  To show and hide elements you may use something like `v-show` or `v-if`.  To change the text of something you would use mustache syntax and a variable and change the variable's value.  The [docs](https://vuejs.org/v2/guide) go through this pretty thoroughly.",1542816457.0
mattisthenation,"Yea- there will always be cases to us jQuery still for a long time. In fact, you can use Vue and jQuery together.

If you are trying to do simple DOM manipulation, like changing classes or hiding/showing things, jQuery or vanilla js would be the way to go still.

It all depends on what you're trying to do.",1542817177.0
Thomasan1999,it has to be coins.base.symbol,1542810621.0
CaptainInsane-o,"So coins is all of the coins.  You want an indivial coin symbol.

You will need to write a for loop like this:

    <div class=""page"" v-for=""coin in coins"">
      <p>{{ coin }}</p>
      <p>{{ coin.symbol }}</p>
    </div>

Also, you need to assign this.coins to resp.data.coins",1542810718.0
ENx5vP,Isn't it `this.coins = resp.data.coins`? Also this is an array you have to iterate.,1542810794.0
birdspider,method getCoins does not capture `this`,1542811054.0
mattisthenation,"Couple small pieces missing:

1. like /u/birdspider said, ""this"" becomes ""this"" of the axios function and not your Vue app any long. So you need to either bind ""this"" or assign it to another variable (see below)
2. like u/ENx5vP said, you're assigning all of the data response to this.coins, which would make this.coins equal to all the data that comes back. 

`<template>`

  `<div class=""page"">`

`<h1>Coin List</h1>`

`<div v-for=""coin in coins"">`

`<p>{{` [`coin.name`](https://coin.name) `}}: {{ coin.symbol }}</p>`

`</div>`

`</div>`

  `</div>`

`</template>`

&#x200B;

`<script>`

`import axios from 'axios';`

`let COINRANK_API = '`[`https://api.coinranking.com/v1/public`](https://api.coinranking.com/v1/public)`';`

&#x200B;

`export default {`

  `data() {`

`return {`

`coins: [],`

`}`

  `},`

  `created: function() {`

`this.getCoins()`

  `},`

  `methods: {`

`getCoins: function () {`

`let vm = this;`

`axios.get(COINRANK_API + '/coins')`

`.then((resp) => {`

`vm.coins = resp.data.coins;`

`})`

`}`

  `},`

`}`

`</script>`",1542812111.0
michael_v92,Do you mind to give a link or at least some details of where did you take that screenshot?,1542804253.0
unsung_unshift,How is this any different than Vue for anybody?,1542795754.0
jmar31,This was useful to get a quick overview. I appreciate the post. ,1542803886.0
nivijah,"WTH did I just read ?      
I mean, kudos for the effort, but why the unnecessary clickbait ?",1542819486.0
_3psilon_,"There's not much jQuery in the article at all... Anyway, are there still any 'jQuery developers' out there? :D",1542821372.0
CaptainInsane-o,"You have to give us more information.  What error codes are you getting?  

Can you link us to the site?",1542753084.0
JinSantosAndria,Where do you [mount](https://vuejs.org/v2/guide/index.html#Declarative-Rendering) vue?,1542760498.0
DesignatedDecoy,Is it possible you're trying to load an http asset over https? What does the developer console say?,1542755372.0
doubouil,"I was going to say to set your path as ""/blog:dummy?"" : it's a different URL since you have a parameter, but it's an optional one so you don't need to ever set it, but I think the confusion will still be there.

So the only solution I see is to have a common route component like BlogSwitcher which will look for ""route.query.p"" and have a dynamic component to display either the BlogHome or BlogPost (via the [:is](https://vuejs.org/v2/api/#is) attribute on the [<component>](https://vuejs.org/v2/guide/components.html#Dynamic-Components) component).",1542748599.0
anamorphism,"why not

    path: '/blog/:slug',
    props: true,
    name: 'blog-post',
    component: BlogPost

?",1542748177.0
tiberiousr,"If you're just serving static content it seems like an ideal use-case for [Hugo](https://gohugo.io/)

Probably not the answer you're looking for, sorry, just a suggestion.",1542755553.0
ENx5vP,"I created a repository to show you that it works:

https://github.com/ndabAP/progress-vuetify

Follow these steps:

1. Download it
2. `$ npm i`
3. `$ npm run build`
4. `$ npx http-server dist/`

It works for both environments.",1542735717.0
sicjoshsic,My guess is you're applying additional CSS processing in production that is changing the order your rules are applied in,1542750854.0
fullheap,I think you should rethink your architecture and stop using a global function.,1542762878.0
YolognaiSwagetti,So it turns out I had a bad path in one of my require paths in an unrelated function and the one I posted works pretty well after fixing that.,1542801970.0
boxidea,"Create a `browserslist` field in `package.json` or a `.browserslistrc` file with list of browsers you want to support. 

It's mentioned here:

https://cli.vuejs.org/guide/browser-compatibility.html#browserslist

Go here to test out your query: https://browserl.ist

Try this. It would support latest 2 versions of all browsers except IE, IE Mobile, and Opera Mini:

    last 2 versions, not ie > 0, not ie_mob > 0, not op_mini all, not dead",1542718635.0
minus0,"Just pass ""--modern"" to the build. Vue-cli@3+ supports automatically building two versions. One for real browsers, one for IE. So you don't even need to concern yourself.",1542749767.0
bring_the_thunder,"How are you handling the setting of readonly/writable form elements? Props? Computed properties? Lifecycle hooks? Route name directly?

Need a bit more info. Maybe a code snippet. ",1542715729.0
archivedsofa,"What's happening is that since you are using the same component for the route Vue is not really reloading the components to be more efficient.

There are a couple of solutions here.

I'd say the easiest one is to use the `onUpdate` hook to check the route and change some data variable to reflect the change from reading mode to writing mode.",1542741726.0
ZireaelStargaze,"The course is decent and gives you show & tell on Vue, Router and Vuex and I've found it useful to follow to build my own boilerplate based on projects described. Can recommend, however, most of the material covered you can see by going through official documentation chapter by chapter.

Useful to visualise how it all gets put together, tho.

I don't think it will get much outdated with v3, the changes incoming aren't that core-breaking.",1542740108.0
prawnsalad,A bit late with v3 right around the corner?,1542719390.0
tinchox5,Here is the repo https://github.com/anvaka/vs,1542670942.0
usx-tv,"I'd be happy to help you out over Voip. No money required. Have been working with Vue for the past year.

Shoot me a PM if you're still looking.",1542706761.0
i_mahe,"1. While bootstrapping the application set the initial state of an app using the following line.  
 `if (window.__INITIAL_STATE__) { store.replaceState(window.__INITIAL_STATE__) }`  
You can refer the following links for more on this   
[https://ssr.vuejs.org/guide/data.html#server-data-fetching](https://ssr.vuejs.org/guide/data.html#server-data-fetching)  
[https://vuex.vuejs.org/api/#replacestate](https://vuex.vuejs.org/api/#replacestate)  

2. Use One wrapper component to manage the layout and state. If the UI element has a logical implementation then create that as a component. You can reuse that later and it will help while debugging.
&#8203;

    <Layout>
      <SideBar></SideBar>
       <User>
          <UserInfo></UserInfo>
           <Video></Video>
       </User>
       <Footer></Footer>
    </Layout>

I used to decouple an app like the above.  


3. Yes, you can use mounted hook to do all jQuery interaction. But try to minimize jQuery inside Vue.",1542805987.0
mvaneijgen,"Experience, would be a big word, but I feel that I got a grasp what Vue.js is and wants from you. I've build a few apps my self now mostly personal things. But I'm coming from a graphic design background and love the way I can work with Vue. 

Would be glad to help a fellow front-end developer out, not for money though. I'm in the process of getting my team up and running with vue and find it a fun idea to see if talking vue is something that works now that I have build a few things in the framework (a lot of it in Nuxt.js) and seen that we would probably learn both from these coding sessions.

If you're up for it, shoot me a PM and we can hop on a Discord chat and take it from there.",1542655848.0
OriginalEXE,"The part with pinging the server would have nothing to do with Vue; all Vue would do is pick up the status of the pings from some kind of db and display them on the page.  
A server script should handle the actual pinging, either continually running, or running on a schedule (cron).",1542648558.0
so_lost_im_faded,"I guess the most simple way is something like this (I'll demonstrate using a vuex action but basically you can just import axios and call the endpoint to give you the server status, replacing GET\_SERVER\_STATUS())

    <template>
      <div>
        {{ isOnline }}
      </div>
    </template>
    
    <script>
    import { mapActions } from 'vuex'
    
    export default {
      data () {
        return {
          isOnline: false
        }
      },
      created () {
        setInterval(() => {
          this.changeServerStatus()
        }, 30000)
      },
      methods: {
        ...mapActions([
          'GET_SERVER_STATUS'
        ]),
        async changeServerStatus () {
          this.isOnline = await this.GET_SERVER_STATUS()
        }
      }
    }
    </script>
    ",1542657608.0
_3psilon_,"You can also use Websocket if you are writing the server code, too. This way the server can push new data to the client.

Otherwise yeah, simply use some client-side request library with `setInterval` to periodically refresh your data model.",1542669078.0
stemid85,Why re-invent the wheel? Use Grafana for the dashboard and prometheus for the monitoring part.,1542703885.0
wikitih,"I'm assuming that `currentBook` is a javascript object (`{}`). Since reactivity is preserved on your application, and since you're pushing a reference (not a copy) of your object into an array, you need to create a copy of your `currentBook` object to remove that ""observable"" behaviour that is mutating your new object.

There are many ways to do so. Googling a bit, I found that `Object.assign` might be used for shallow copying:

    var tmp = Object.assign({}, this.currentBook);
    this.books.push(tmp);

Otherwise, if you have multiple levels of arrays and objects on `currentBook`, you might need to create a deep copy of it. Here's a quick and dirt way of doing so:

    var tmp = JSON.parse(JSON.stringify(this.currentBook));
    this.books.push(tmp);

More information [here](https://stackoverflow.com/questions/49028609/how-to-make-a-copy-of-object-in-javascript-vuejs).",1542637952.0
mvaneijgen,"This has not really something to do with Vue.js. There is probably a 'vue-y' way to do this, but it isn't really a vue related question, you want to show an animation with some logic, so CSS and some plain Javascript is all you need. 

Depending on your setup and how much you favour to have it SEO friendly, screen reader friendly there would be several ways to accomplish this. I would suggest setting up a [Codepen](https://codepen.io/pen) (and [here is a pen with Vue.js already setup](https://codepen.io/mvaneijgen/pen/LrNEZG)) and come back here with your demo, so we can help you further.",1542628470.0
pd-andy,"The docs are open source no? Submit a PR and fix it yourself.

Edit: fwiw this came out way sassy-er than I intended. ",1542625321.0
NovelLurker0_0,99% of my clients...,1542629584.0
Viusand,Literally unusable! ,1542626798.0
michael_v92,Now that you mention.. ,1542618206.0
ncksnydr,"Asking someone else to do something that’s incredibly easy while demeaning the hard work of an open source project by being picky in the most unhelpful way...

I’m going to guess that your business card says *Idea Guy* or *SEO Expert*. ",1542696592.0
StandNTroll,"`margin-left: 5px; `

Ah ha! That should fix it. ",1542635306.0
theLorknessMonster,"1. right click -> open image in new tab
2. see a doctor to treat your OCD",1542651604.0
,Leave it! I just want to see the world burn! Muhahahahahahaha!,1542658655.0
DeathlyOak,"I made the fix here, make the PR for me.

https://github.com/Sylk/vuejs.org",1542639919.0
El_Matella,"I fixed the image, feel free to submit a PR: [https://i.stack.imgur.com/7ds0O.png](https://i.stack.imgur.com/7ds0O.png)",1542658467.0
unsung_unshift,OCD OCD,1542627690.0
geggleto,you rat bastard. this triggers me so hard.,1542636562.0
19741280,Pretty smooth :),1542644331.0
NPAterrorist,Just in case you are wondering where this page is.  [https://vuejs.org/v2/guide/instance.html](https://vuejs.org/v2/guide/instance.html),1542676958.0
toadkicker,Is there a webmaster in the house?,1542628239.0
gcjbr,"OMFG, why did you show me this?",1542663784.0
i_mahe,[https://element.eleme.io](https://element.eleme.io) is an amazing UI library I came across.  ,1542693987.0
denis_invader,Why not use rollup? It's easier to setup than webpack,1542617813.0
Catalyzm,"These might get you started...
https://medium.com/codingthesmartway-com-blog/vue-js-2-firebase-e4b2479e35a8

https://appdividend.com/2018/04/21/vue-firebase-crud-example/

https://grokonez.com/frontend/vue-js/vue-js-firebase-database-example-crud-operations

https://www.djamware.com/post/5bc9313680aca7466989441e/vuejs-firebase-tutorial-build-firestore-crud-web-application

If there's anything specific you have questions about after one of those then feel free to ask.

",1542589403.0
pabswilder,"Ohh mate you're going to love [vue-firestore](https://github.com/gdg-tangier/vue-firestore)  
The Vue community is constantly putting together integrations with other services, it's fantastic.",1542589604.0
archivedsofa,"As usual, there's more than one way to skin a cat.

There are no rules on how to structure your components, but the idea is that components are units of presentation and logic.

So if you have a list of things, and you want that when clicking on a thing that becomes a form that you can submit somewhere, I think it makes sense that each thing is a component.

To transform your thing from list item to form is easy enough. Here's a quick and dirty example.

https://gist.github.com/PierBover/0426686821c57332961fe6171f03e387

I haven't tested this, it's just to give you an idea. I've used DOM templates since I don't know if you are using .vue files or what.",1542593648.0
autumnwoodberry,"\> Or rather, is there anything I should not be caching?

Yes, don't cache anything that has user information. If your header has user name for instance, you should not be caching that. If you have user profile pages you should not be caching those. Basically if a user is logged in you can't be caching that.

A word of advice - if you don't currently have a problem that can be solved by caching, it doesn't provide any benefit to implement it, and can cause you a lot of headaches. If you have a problem that can be solved by caching, you will know exactly what needs to be cached at that point.

&#x200B;

Don't cache everything and then think of things to exclude. Only cache the things you need to when you need to.",1542515910.0
aaa3255,"I would cache any static content first, then cache whatever requests that do not have to be updated constantly, and leave our any dynamic content. ",1542512870.0
so_lost_im_faded,"Well, is searchResults supposed to be an array? If yes, make it so and then manipulate it. Vue acts weird if you don't set the initial data correctly, especially with arrays, but also for example with objects and adding unknown properties to them.",1542488141.0
coding_for_funyuns,"So, doing my best to read the formatting of that code per the snippet: I'm not seeing the action, responsible for committing the mutation?

While the mutation exists, there must be something that dispatches the action, which in turn commits the mutation. Based on reading the code above, it makes sense that your state prop continues to have the default values.",1542516656.0
lukeajtodd,"Have you tried making use of `Vue.set` or array destructuring e.g. `state.searchResults = [...state.searchResults, ...payload]` if you're wanting to maintain results? 

Don't have links right now as it's late and I'm on mobile but send me a message if you need assistance and I'll get back in the morning.",1542587418.0
manu_8487,"Build stuff. Start small and make it more complex over time. You will make some bad design decisions on the way, learn from them and get pretty good at it eventually.",1542468345.0
N3KIO,"Build a blog, will teach you tons of stuff",1542477336.0
devdarker,Just find a personal problem you'd like to solve and programm the application to it. This is how i learn some new stuff,1542496649.0
sdq-sts,Build stuff and read the Vue's style guide,1542480425.0
ataraxy,"The best resource is the official vue docs, honestly it's really good.

Otherwise, pick something you're interested in and start working on it. Trial and error it out. Google what you don't understand as it comes up. You'll get better over time as you begin to remember things and run into new problems that you have to solve etc.",1542502676.0
_3psilon_,What is 'pretty good' on your terms? What are you struggling with?,1542519966.0
OF_Shervin,practice practice practice,1542579994.0
SXHarrasmentPanda,Any word on how painful/painless upgrading from Vue 2.x to 3.x will be?,1542464878.0
neotorama,Best js library ever. We migrated react to vue. Our devs are more happier ,1542456940.0
DecadeMoon,"Wow, wasn't expecting that many features. My favs:

- Multiple root elements
- It looks like slots are rendered using functions now (like scoped slots) so they can avoid being rendered if the component chooses not to render it
- Proxy-based observations (fixes current observation limitations)
- Speed + memory improvements
- Typescript + TSX",1542493887.0
yioshie,"Wow, I'm hyped! When will be seeing 3.0?",1542462596.0
mgambati,"Holy, this has a way more than I expected. I was happy about TSX and TS support and rewrite coming but this is alot more than I could imagine.",1542456389.0
thePiet,Awesome stuff. ,1542457320.0
ezio93,Is there a video of the conference yet?,1542469646.0
mmcgu1966,hella impressed!! How compatible is Vue 2.1 code?? is it worth dropping into a large project in development?,1542464582.0
aitchnyu,Will functional components get attention? They don't show up in dev tools and their methods and syntax seems tough.,1542511635.0
less_is_more_13,"What does ""Flow -> TypeScript"" exactly mean? Does this mean that they will use Flow for type checking? ",1542533618.0
hoijean,"I originate from React, when I look at vue 3.0 I see some react structure 😅",1542536814.0
JonggChan,I don't know it.but i will try.,1542461248.0
archivedsofa,Repost: https://www.reddit.com/r/vuejs/comments/9xc3y6/vue_3_updates_presentation_by_evan_you/,1542464457.0
DanijelH,"https://github.com/danijelh/aspnetcore-vue-typescript-template

I made this template as an example or starting point on how to use Vue as a multi-page app, maybe it can help :)",1542443838.0
Reashu,"1) Don't keep track of it. Start a new one.

2) The same way as always. URL parameters, query parameters, post body, cookies, session storage, ...

3) Why doesn't `Vue.component(...)` work? 

I'm going out on a limb here but it seems like you should take some time to learn the basics of the web and JavaScript. ",1542429214.0
juliomrqz,"A Cross-browser storage for **Vue.js** and **Nuxt.js**, with plugins support and easy extensibility based on **Store.js**.

This plugin will **pick the best available browser storage**, and automatically **falls back to the first available** storage that works.

## Features

* Backed by the great library \[Store.js\]\[storejs\]
* Support for multiple Storages (localStorage, cookies, etc.)
* Basic key/value storage functionality (`get/set/remove/each`)
* Easy integration with Vue.js
* Support for Nuxt.js
* Get notified with Vuex when the stored values change

## Why use this plugin

Some reasons why you could consider to use this plugin:

* Use a **fallback Browser storage** method in case the user's browser has limitations. Safari in Private mode can deny writing data in localStorage.
* Easy extensibility with **Plugins**. Support for expiring stored values at a given time, declare default values, etc.
* A **consistent API** across browsers for a key/value storage functionality.
* Easy definition of **alternative Storage methods**. For example: you could reuse a Vue Component, that relies on a storage method, in the user's browser (using **localStorage**) or a mobile app (using **NativeScript application-settings** module) just by changing the storage method without modifying the internal logic of the component.
* **Synchronization** of stored values changes with **Vuex**.",1542410962.0
gamprin,"You just described me in some ways. I’m very visual and also not sure how to feel about front end frameworks. I’m learning vue after trying to learn react and I’ve been able to go very far without much struggle. I recently implemented JWT authentication, and I filled up several dry erase boards as I mapped out the flow of how things work. It’s nice how everything is encapsulated in small files, but this makes it harder for me to see the big picture easily. I recommend taking visual notes on everything you read. I did this while reading through the Vue and docker documentation and it has helped me a lot as a highly visual thinker.  ",1542415604.0
finroller,"How is this the age of just google it when there has never been such a plethora of video material for learning programming? I personally am a little bit annoyed and confused as to why when I search for information I get video results, but it ought to be awesome for you.",1542434642.0
tonjohn,"I found Vue School to be a great resource for learning. In their master class, you watch them build a forum from start to finish. And there is currently a sale!

https://vueschool.io/plans",1542421732.0
lucuma,You can use an online template or pass it an Id to a template in the html.  I suggest if you are building an app to look into single file Vue components. ,1542417151.0
zmasta94,Currently working on a NativeScript app using Vue. Not exactly what you’re asking for but meh,1542404389.0
avenp,We have an app on the iOS and Android app stores using Cordova. The performance isn't quite as good but it feels native. I'd share the name but you need a paid account to login to it so it would be pointless.,1542398208.0
mgambati,"I'm a long time nativescript and react native Dev. I'm ditching both for flutter (which is almost ready for 1.0 release).

React native feels like really bad with the bridge errors and constant breaks. Same with NS.

I mean, they are really good in comparison to XML, Java and objetive c but there's many things that makes me want to flip my table.

With flutter there's no bridge, all code is completely compiled to ARM and x86/x64. The performance is superb, the devtools is awesome, ecosystem libraries are getting really strong. Cross platform REALLY Impressive.

The only things that I don't like is Dart. Dart is really behind typescript... And state management is bit complex if you never used rxjs like state management.

Take a look, really worth.",1542421011.0
neotorama,Check out all alibaba apps. Build with weex,1542425680.0
ShetlandJames,I recommend giving React Native a go while we wait for Vue's Native to get more support. It's actually not bad when you get past the red screens of death ,1542399504.0
jezmck,"Definitely. The one I've written for a start.

Cordova, vuejs.",1542410462.0
djxfade,"Yes. I have several apps built with Vue on the App Store and Google Play.

It’s Cordova based though. The next app project I will probably use NativeScript Vue, because Cordova is horrible to work with",1542453187.0
psierak,What is wrong with progressive web app?,1542403275.0
seamouse3,"Our app is built using Vuetify and Cordova. https://f93sp.app.goo.gl/HtTC

Edit: The website is also Vuetify",1542405273.0
Lansett,"The content of [message.data](https://message.data) will tell if it's from you're iFrame or not, because it can contains everything you need.

If staying on a string format, you could prepend data with a command like `sendMessage('commandA:somthing')` and then in listener: `if (message.data.startsWith('commandA:')`

Maybe better would be to `JSON.stringify` an object before passing to sendMessage, you can then (and also checking origin):

    window.addEventListener('message', message => {
      if (typeof message.data !== 'string') return
    
      const a = document.createElement('a')
      a.href = message.origin
      const origin = a.hostname
      a.href = window.location.href
      const local = a.hostname
      if (origin !== local) return
    
      const command = JSON.parse(message.data)
      switch (command.type) {
        case 'something':
            // ...
            break;
      }
    }",1542354004.0
carrot_gg,"Don't have the full code right now but this is how I solved it:

`<link rel=""stylesheet"" type=""text/css"" href=""@CdnService.GetFileNameByMask(""/css"", ""site.*.min.css"")"" asp-append-version=""false"" />`

GetFileNameByMask basically gets a file in the ""/css"" folder that matches the pattern ""site.\*.min.css""",1542333349.0
stealthd,"Either configure your vue build NOT to append a hash, and then use `asp-append-version` to append a hash/version for you, or use something like `asp-src-include=“~/dist/app.*.js”` instead of the regular `src` attribute to include script tags for all matching scripts. ",1542411402.0
Payfarer,"`<script src=""~/dist/app.js"" asp-append-version=""true""></script>`

Depending on your webpack/compiler setup, `asp-append-version=""true"">` should append the latest hash.",1542361722.0
DanijelH,"I created a template which combines Vue and .NET core but without using Vue CLI. Maybe it can help you :)
https://github.com/danijelh/aspnetcore-vue-typescript-template ",1542380188.0
tarelda,Looking like cachet doppleganger (https://cachethq.io/) 🤔,1542367500.0
tonjohn,I want a Vueitfy version of this for work XD,1542421796.0
LynusBorg,This looks pretty dope!,1542364760.0
juliomrqz,"[Statusfy](https://statusfy.co/) is a Status Page System, easy to use and completely Open Source. You can easily create a fast System either **Static Generated** or **Server Rendered** and easily deploy it to a variety of hosting services. The goal behind is to lower costs and complexity providing a simpler and versatile Open Source alternative.

&#x200B;

Statusfy is different, it was designed to generate a Status Page System that acts as a Web Application with the JAMstack and Serverless architecture in mind. It can also be created an Isomorphic application with Server Side Rendering if static contents are not a suitable choice. With these approaches, we wanted to enjoy a Status Page System that gives us better performance, higher security, cheaper hosting, and a better user experience.",1542410684.0
LloydAtkinson,All the examples link to github repos with no screenshots.,1542555469.0
biinjo,"2 questions:

1. What does this have to do with VueJS?

2. How does this differentiate from the 1001 other status page systems out there (such as mentioned Cachet)",1542392524.0
Fastidius,"Looks nice on screenshots, but inspiring little confidence when the demo doesn’t work. ",1542429485.0
carrot_gg,"Yes, all your points are correct.",1542332634.0
pimpante,"Yes, and search engine crawlers ask directly the urls to the server",1542334253.0
_sirberus_,"Vuetify leverages an insane mixin architecture to maximize code reuse. Vuetify components are borderline illegible - as far as Vue code goes, I would not use these as examples of how to build 99% of sites. The CLI boilerplate is a much better example for that. That said, if you find yourself wiring up your own component library and you intend to have a gajillion features and target all the platforms, Vuetify's patterns will be much more applicable.",1542330618.0
_3psilon_,"One advantage for [SFCs](https://vuejs.org/v2/guide/single-file-components.html) (single file components) is that you can have [hot module replacement](https://vue-loader.vuejs.org/guide/hot-reload.html) in Webpack which makes development a lot easier.

Note that you can always import from external files into the `.vue` file by using the `src` attribute.

My rule of thumb is that I keep the component in a single file if all the code fits on one screen. Otherwise, I use `.vue.html`, `.vue.ts` files imported into the `.vue` file - reaping all the benefits of single-file components.

I prefer having the JS/TS and HTML files to be separated, I usually edit them in two editor panes anyway.",1542324613.0
theLorknessMonster,"If you're building an app, you should probably use mostly `.vue` files supported by some mixins in script files.

If you're building a large library or framework like Vuetify, there could be some disadvantage to using SFC due to the highly custom nature of the architecture.",1542344912.0
_sirberus_,"I'm no expert in this, but one of my new coworkers is rather savvy in this space and has been educating us. We use Cloudinary and he's of the mindset that leveraging Cloudinary as much as possible is the best route. Leveraging it in 3 ways - it caches its transforms, using named transforms to enforce uniform image sizes when needed (`thumbnail` as an alias for `h_80,w_80` for example), and srcset helpers. Looking into it for a personal project, I also found that their free tier was very generous. I'd be happy to use it again, but I don't have experience with anything else in this space so take all of this with a huge grain of salt.",1542320913.0
xserio,"I think about a solution to provide responsive images as well, but don't want to pay for an on-demand hosting service because it can get quite expensive (been there...).

I'm looking into building my own Server, where i can host Images and found this:
http://charlesleifer.com/blog/nginx-a-caching-thumbnailing-reverse-proxying-image-server-/
I didn't tried it yet, but it looks promising.

What i have tried tho, is doing it with PHP/Laravel (https://github.com/thephpleague/glide) which is quite easy, but not as performant as i wish it would be...with some kind of long-term caching, that might not be a big problem.

Anyone with experience, building a server with a small API to host images? How did you do it?
",1542325775.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Responsive \/ Adaptive Images (i.e. Cloudinary, preprocessing w\/ Webpack, ImageKit.io, tiny.pictures, etc.)](https://www.reddit.com/r/javascript/comments/9xeb8g/responsive_adaptive_images_ie_cloudinary/)

- [/r/webdev] [Responsive \/ Adaptive Images (i.e. Cloudinary, preprocessing w\/ Webpack, ImageKit.io, tiny.pictures, etc.)](https://www.reddit.com/r/webdev/comments/9xeeon/responsive_adaptive_images_ie_cloudinary/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1542310435.0
hip_modernism,"I'd recommend Webfaction, it's sort of the midpoint between DigitalOcean (here's a server, you figure it out) and Namecheap (here's a control panel, you can only do these things).

Webfaction has a lot of pre-configured packages for common app stacks as well as databases (they have mongodb), but you also have ""console"" (terminal access via ssh) too. Webfaction also has a pretty large support forum and if you have a problem you can usually find someone who already had the same issue issue and fix it there.

So webfaciton has both ""click to set it up"" and terminal access, which is maybe where you're at right now?",1542300365.0
unsung_unshift,"This is only tangentially related to Vue.  I'd research your options for hosting on a Node.js platform.  Where I host (nearlyfreespeech.net) they have ""custom"" hosting options, where instead of Apache, you can run Ruby on Rails, Node, what have you.  Their prices are extremely inexpensive too.  However, be prepared to do a lot of configuring of the server yourself.",1542298993.0
raccoonranger73,"hi there. I just did something similar.

First of all, with Vue, you have the option of building your SPA into a single index.html file and a few .js and .css files. With this method, all you need is a simple web server (like nginx) to serve these *static* files and voila! You have your frontend SPA online.

Normally, with this set-up, you will also have another server running a backend API (for example, Nodejs will run on this server and accept incoming requests from your SPA and respond accordingly - normally it will deal with database queries related tasks). You will have reverse proxy configured on your nginx so it will pass specific routes (e.g. www.hello.com/api) to a port Nodejs is running on. (e.g. localhost:3000). In a nutshell, when you go to www.hello.com, nginx will serve the static files, and any calls to www.hello.com/api, nginx will alert your Nodejs app to deal with this request.

The above is possible to set up with services like DigitalOcean which is known as IaaS (infrastructure as a service). This means that you will be given a server machine with nothing on it. From there you can install Linux and later on, you could from your local machine, SSH into the remote server and have complete access to the console/terminal and install other necessary stuff like Nodejs. This approach requires more work as you have to set up on your own, but with the reward of flexibility.

++

Services like Heroku is what's called PaaS (platform as a service). I've only used this a few times with Nodejs Apps and all I had to do was install a Heroku client which will allow me to push my code directly to the server. Can't comment much here as I only have minimal experience with PaaS. Personally I prefer having more control over set-up so IaaS is the way to go for me.",1542299518.0
usx-tv,"Look into netlify.

Free hosting, SSR, and you only pay when you start scaling.",1542362064.0
jesusbot,"As others have mentioned, this is not a Vue-specific problem at all. However, both your MEVN stack and Nuxt are NodeJS on the server-side, so what you actually need is Node hosting. There are tons of services for this kind of thing, but a domain name registrar like Namecheap is probably not ideal for that. I don't know exactly what hosting Namecheap offers, but this is not their strong suit, and you can point a Namecheap-purchased domain to other Node hosting providers (eg Heroku, DigitalOcean, [now.sh](https://now.sh) , etc) via DNS configuration.  
For the MEVN vs. Nuxt discussion, I don't have much to offer other than whether or not SSR is important to you. If not, I'd probably start with the MEVN stack.",1542300797.0
IR0NFIRE,If cost is a big factor you can always look into serverless hosting. ,1542312874.0
benabus,"I use dreamhost and they're pretty okay.

Alternatively, since Vue is mostly frontend, If you don't really need databases or anything server side, you could go with something like https://neocities.org/ which just serves up static pages (and javascript).  ",1542313934.0
_sirberus_,"After a lot of development in this space in the last 2 years, I strongly encourage you to decouple your frontend and deploy to something like Netlify, a static host. Your development process will be so much cleaner if you do this.

For backend I personally prefer Digital Ocean - while it does throw you in the deepend, it does a lot of the hard part by having pre-configured droplet ready-to-go, and once you know what you're doing you can be up and ready in minutes. Spin up an Ubunto droplet w/ your SSH key, remote in, `git clone something.git` or `npm i -g foo`, create a service that runs your stuff, start the service. First time will take you a bit, but thereafter it's easy. And $5/mo prorated for the amount you lose, really hard to beat that.",1542331997.0
archivedsofa,"Vue 3 solves many of the problems and limitations of previous versions and it comes with 100% TS support, observables a la MobX, 10KB Gzipped, and double the performance.

Very fucking impressive.",1542296081.0
enkafan,"Try a link tag with an rel attribute of ""icon"" pointing to the favicon you want",1542287260.0
incubated,"It's in manifest as well, in public folder, or just update the favicon file in there ",1542288583.0
okendokenn,"OP is here.

We have been working on lots of Vue.js projects recently and decided to extract our knowledge into a starter kit to help other developers save their time developing Vue applications.

Let me know if you have any questions!",1542273856.0
ALLUPPERCASEONEWORD,Excellent question and I wish I had an answer for you. The community of devs for vuetify are really not here but rather here [https://discordapp.com/channels/340160225338195969/375817719037296650](https://discordapp.com/channels/340160225338195969/375817719037296650). Good luck!,1542240424.0
Pyro979,"Why not have the tabs wrapped in screen only class, and create a separate component that's wrapped in a print only class?",1542241485.0
kaelwd,"You can override the `display` property if the tabs aren't lazy, would still need to add another element for the headings though: https://codepen.io/anon/pen/BGRzNX",1542244869.0
letsjustbefriendz,Use vs code and use webpack. ,1542232394.0
_sirberus_,"If you have NPM access in this project, `npm install vue` then figure out how to configure webpack and vue-loader so you can write .vue files and start livin the good life. Should be pretty googlable.

If you don't have access to NPM, you're a lot more limited.

As for dev environment, VS Code w/ Vetur and you're good.",1542235908.0
Catalyzm,"Good = Webpack build process

Better = Webpack and VS Code for front end, VS for backend

Best = Webpack and Jetbrains Rider for front and back end

Once you get webpack going, add Babel to support writing the latest JS, and start using Vue components. Set up VSCode or Rider with ESLint to check your JS code and use  eslint-plugin-vue to add linting for your Vue components.",1542243237.0
,[deleted],1542222199.0
inhalingsounds,"Given that one of the purposes of components is to be as independent as they can be, just write scoped css/SCSS/LESS/Stylus blocks. Think of it as if ""if I copied this component to a different project, would I get the same feature out-of-the-box?"".

&#x200B;

I personally have a ""global"" scss file with base styles but everything else is component-based.",1542221193.0
CaptainInsane-o,I personally don't like CSS in my Vue files and find scss the more organized and cleaner option so that's what I've been using. ,1542220689.0
archivedsofa,"I mix the two approaches. In component for component scoped stuff, and .scss files for CSS helpers/layout/global things.",1542221527.0
_sirberus_,A dangerous thread! Vue Core Team and major players would advocate for putting CSS in your components so that all the information about the component can be centralized. Splitting out into multiple files is pretty un-Vue - it flies in the face of one of the most prominent patterns of the framework.,1542234985.0
Yurishimo,"Depends on the project. On ones where I use Vue as a replacement for jQuery plugins, usually I'll just add the CSS to the site's main CSS file with a SCSS partial.

I'm really digging Tailwind CSS currently so I've been using that for more full featured Vue apps. So far I really like it and hardly ever have to write any CSS.

I'm starting on a new Laravel/Vue app now and will be using Tailwind as well. I'm thinking I can probably build the whole thing and write less than 100 lines of CSS for the entire site (10-15 screens).",1542266342.0
MrMaverick82,I use tailwind which limits the amount of CSS I need to write. Any additional classes usualy go into the Vue file. ,1542272013.0
tahazsh,"I try to keep it as simple as possible. I use scoped CSS. I only write single-level selectors (no nested selectors). For example:

    .title
      color: black
    
    .title:hover
      color: red

Doing this allows me to use simple class names instead of adding prefixes or using something like BEM. Remember, I don't care if this class name is used somewhere else because I'm using scoped CSS.",1542294413.0
JIMETHYRUMPLEKINS,"I use sass / css modules within components wherever possible, prefer it over scoped CSS as I like directly binding classes using the $style object. I also have a variables file, and a few other global sass files for low level stuff: normalize, grid, typography, etc.",1542238391.0
stemid85,"I use vue-cli which handles webpack in the background so without even touching a webpack config I have my src/scss/ files compiled into css for me and included into the html.

I have very rare use for scoped scss in components but it happens. I think most examples of using scoped scss in a component could be replaced by global scss but I don't mind it.",1542274824.0
abhay676,"I think it is a good idea to use scoped css with every components because 

1. Debugging become easy
2. Easy to add-on new css to component after release 
3. It look more clean and help to understand the code easily 


If you have same styling throughout the app in that case you should not go with scoped css  . ",1542285582.0
i_ate_god,"We currently have scss files

I think this is fine at the application level, but we also have a component library and I'd like to see that component library have it's specific sass in the component itself while global styles such as corporate branding can remain in external scss files.",1542221496.0
ShetlandJames,"Well almost everyone has said SCSS but I'm prefer vanilla CSS so I just use it on the component, scoped. ",1542231265.0
bot_not_hot,"Create a global css file (or sass with .scss), link file to main application",1542233028.0
LynusBorg,"Why are you doing that in App.vue? 

I usually load it right when I create the store, so before the app is mounted.",1542212847.0
daamsie,"I do something pretty similar in my routes, but the logging in with JWT is done in the route, not in App.vue

In this case, it fires off an ajax call to confirm the JWT, then when that resolves, it proceeds to next() or to /login if needed.

See my example below:

beforeEnter: (to, from, next) => {store.dispatch('loginWithJWT').then(() => {if (to.matched.some(route => route.meta.requiresAuth)) {if (!store.getters.isLoggedIn) {next({path: '/login',query: {redirect: to.fullPath}})} else {next()}} else {next()}});},

Not sure if this is the best way, but it seems to work :)

edit: sorry for the lame formatting.",1542236856.0
vietquocnguyen,Checkout Chris Fritz's Vue Enterprise boiler plate too. Here's a code snippet of what you're talking about. https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/router/routes.js,1542250572.0
dododavid006,"This line: `{{ getSingleCart(items.cartId) }}` 

In template, you should not call a function which will update `data`.",1542192053.0
RedditsMastermind,Really a cool guide without anyone advertising their 50€/m PaaS Solution. Keep posting more like that.,1542213306.0
sanjibukai,"So is that allow the ""app"" to being a Progressive Web App or having some AMP features?",1542208495.0
tonjohn,"Without seeing more of your code it is hard to troubleshoot but based on your description `active[props.index]` is a **string**, not a **boolean**. 

So `active[props.index]` == `""true""` (string) and `!active[props.index]` == `false` (bool).

If you want to convert from string to bool, `JSON.parse(active[props.index].toLowerCase())`",1542172726.0
nzshu,"Try wrapping your props.index in ‘${props.index}’
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals

Or post a codepen or jsfiddle, so I can see more details. ",1542168999.0
nathancjohnson,"Websockets are definitely the way to go for realtime.

If you don't have to host the data, you could look into Firebase Realtime Database or Firebase Cloud Firestore (basically a newer Realtime DB). Firebase uses websockets and is completely realtime. Whenever a node in the DB updates, your page will receive the updated data if it is listening to that part of the database (which is basically a JSON object).

You could also use websockets with NodeJS and Socket.io if you want to have the data on your own server. Socket.io is fairly easy to use.",1542178776.0
tonjohn,"I would look into using SignalR for your real-time solution. Azure now provides it as a service so no need to run your own server. And it’s free*! :)

* https://azure.microsoft.com/en-us/pricing/details/signalr-service/",1542172100.0
monsieurninja,"I'm also in the process of choosing a real-time framework to work side by side with vuejs so I'd be curious to hear what others have to say.

So far, I still have to choose between **Meteor**, **FeathersJs**, or just roll my own **Express** server with websockets.

You could also have a look at **Firebase**, which will save you a lot of headaches since it's just a few clicks to setup and pretty well documented. I'm not going for it because I have to host the data, but if I had a choice that's probably what I would have gone for.",1542175485.0
Cyb3rWaste,i would recommend `vue` in combination with `feathers` and use `feathers-vuex` to keep it in sync.,1542207412.0
spays_marine,"You can catch changes to the object and emit the entire object, no need to do it for each property.",1542144449.0
bardaxx,"Pass a callback to the child from the parent with object mutation, try to keep unidirectional data Flow.",1542155402.0
tonjohn,"I recommend using either an event bus, emitting the new object from the child and listening for the event in the parent

Or use Vuex store",1542168589.0
bttf1742,"Pass it as a prop to the child component ad change whatever you want. Passing the object in reality just passes a pointer to the object, so any changes you make to that prop in the child will be reflected in the parent. They are both looking st the same object.",1542145842.0
ChypRiotE,I'd say using a store would be the best solution most of the times. However it depends on what you are trying to do. What's the context ?,1542191044.0
RedditsMastermind,"Vuex-map-fields

https://github.com/maoberlehner/vuex-map-fields",1542297338.0
nzshu,Vuex,1542171407.0
placidified,Are you doing any sort of build processing via webpack ? ,1542147446.0
ferrybig,"According to [https://stackoverflow.com/questions/51824509/edge-throws-script5007-object-expected](https://stackoverflow.com/questions/51824509/edge-throws-script5007-object-expected)  


Edge throws this error when you try to call a method on undefined, so you are probably using an API that is not yet made for Edge.

&#x200B;

I suggest turning of JS minification, and then doing another production build, because then you can see the actual line numbers in edge, and that makes finding the exact cause of the bug easier",1542183158.0
ohadron,"It's actually a shortcut, that is less verbose. It allows you to render components that use the parent scope without having to pass both the component and the scope to the child. ",1542119525.0
aesamattki,"Slots are for templates, props are for data.",1542164110.0
Downvotes-All-Memes,"Just to contrast one of your points, from my experience vue documentation has been more than adequate. The core team provides not just a getting started guide or examples, but a cookbook of common topics and best practices on the vuejs website. ",1542109903.0
cheese_bread_boye,Vue has over 15 people all around the globe working on it. It's not only Evan anymore.,1542111216.0
DukeBerith,"I'm a dev who uses both React and Vue quite a lot. I personally prefer Vue when starting a new project because the concepts ""just work"" and the patterns are more in line with how I tend to code my things.

If your team loves typescript, React's typescript support shits all over Vue any day of the week hands down. Vue's TS support feels very hacky, awkward and unnatural, but the next version of Vue is being written with TS support from the ground up and I'm excited to see where they take it.

React's landscape and best practices are constantly changing (this is both good and bad) and sadly a lot of patterns leave new developers going ""huh?"", for example `child as a function` pattern is not obvious when a component requires it, or equally ugly  `render prop` pattern where a render function is passed in as a prop. React has multiple ways of doing the same thing in its API, because of experimental and legacy reasons, for example: `const C = React.createClass({})` vs `class C extends React.Component` vs `class C extends React.PureComponent` vs `const C = (props) => <div {...props}>{props.children}</div>`, a dev fresh to the ecosystem wouldn't know which is the obvious choice to use and when. Also learn to love the [JSS / css-in-js](https://cssinjs.org/?v=v9.8.7) pattern because it's used often over there. 

React's base methodology when it comes to reacting to change is all about callbacks, so when a component does something it will execute the parent component callback. On the other hand, Vue uses the event driven paradigm, so when a component updates you trigger an event and the parent listens to it.  Though either can be implemented in both libraries.

React has much better native support than Vue does, so if you plan to make a native app then I would favour React so you can share a lot of your codebase. If you're not planning on making a native app then don't worry. Vue has support through nativescript but it's not official like React Native is. 

As others have mentioned, the Vue team is not just 1 person anymore and hasn't been for a while. As for big companies as backers, [Gitlab uses Vue heavily](https://about.gitlab.com/2016/10/20/why-we-chose-vue/).


They both do the same thing really, and both have their strengths and weaknesses. Have your team do the exact same (small!) project in both and see which one you favour.",1542117568.0
unsung_unshift,"I've worked with a lot of frameworks, starting with ExtJS ten years ago.  Spent 5 years with that and have since bounced around a lot: Backbone, AngularJS, Angular2, Vue.js and finally React for a couple of months from August through October.

Vue *is* much simpler.  And not only that, ""React fatigue"" is the new ""Javascript fatigue"".  Best practices are continually changing.  Now they're onto a thing called ""hooks"".  React has proven to be a continually changing landscape in this regard.  I think you are safe to avoid React for the time being especially as there is going to be a big game changer around the corner in a few years anyway (WebAssembly)",1542109051.0
Node_edm,Haven’t tried react myself. Have tried Angular and i looooove Vue. Development time is lightning fast and you don’t have a steep learning curve. I don’t want to use react mainly because of how much I hate Facebook.,1542109304.0
so_lost_im_faded,"Vue.js is great to pick up and start learning. Personally I find it very programmer friendly and pleasant to work with.

I wouldn't say there are worse extensions or dependency on just one person. You will often find yourself using libraries like lodash, moment or axios that are not at all vue-related and can be used with js-anything. If you need Vue.js components, you can always code them yourself. As for the javascript logic the components use, there's probably a bunch of npm packages that do what you need. There are also various UI kits that are good (element-ui, at-ui) and even if they are abandoned now, they will still serve their purpose.

Also Vue.js documentation is wonderful. Personally I think it's better than React docs.",1542111531.0
Yajjackson,I find Vue more intuitive than react. Another thing to consider about this post is that it was made in the /vuejs sub. If you want a larger sample size of opinions I would suggest making the same post to /reactjs. *edit* I didn't notice you'd already done this. :thumbsup:,1542116796.0
bmarkovic,"If you're already decided on Laravel it's also of note that Laravel has already somewhat invested into integration with Vue, more so than to React or Angular by a decent margin.

So if for no other reason that should tip the scale for you.

But really on merit:

* React's design is pretty much the VDOM-PoC-gone-production. Vue has a great advantage of hindsight there.
* JSX is really ~~JSP (sorry, former J2EE guy)~~ PHP-with-inline-HTML done all over again in frontend. It's better than composing render calls, and Vue supports it for that reason (and that reason alone should be it) but the template approach in Vue is simply a better design **and** better dev experience
* A lot of React's ecosystem is about preachy, philosophical decisions by people who'd like to be Haskell programmers but can't. Vue is pragmatic, yet superior in both performance and scaling to problem complexity almost always and in every regard.
* It's much harder to find, onboard and retain people when chosing React. It's an endless cost sink for a company. That huge number of React jobs is in great part due to the sheer manpower required to maintain React projects.

Other than that I'd say they're pretty much the same. Some of the things I labeled as disadvantageous to React are actually considered as advantages by it's proponents, but I kinda find it rare that experienced developers really think that way. Most of popularity of React is for three reasons:

* It was there first and kicked Angular's ass performance wyse
* It's got Facebook backing
* It's popular because it's already popular (virtuous cycle, Vue is on the low start of such a cycle as well, just late by a couple of years).
",1542110021.0
archivedsofa,"I have 20 years of web dev under my belt, did PHP in the early 2000s. I've been using React and Vue for almost 4 years, and JavaScript since 99 or so.

Seriously, go with Vue.

If you are coming from a PHP + jQuery background React is **definitely** not a good fit for you. React is great, but it only works on teams that have very strong ES6/7 JavaScript skills.

Do you have designers doing HTML or PHP devs writing HTML? React will break their brains.

So if you go with React be ready to paddle in the mud for a couple of months, because not only you need to learn React and its ever changing best practices, but you will need to learn React-Router, Redux or Mobx or whatever state solution, etc.

Vue is not perfect by any means, but it's simple to understand. Anyone that understands HTML can modify a component. Another plus point for Vue is you don't need to use Webpack and Babel. You can start with good old ES5 and intregrate it progressively in your code base to replace (most likely) jQuery.

As for the other points you mention:

* Vue has much better documentation than React
* Vue is growing really fast, and so is the ecosystem
* AliBaba (China's Amazon) is super invested in Vue

React is great if the codebase is controlled by JS devs, otherwise it's a terrible fit.",1542120282.0
Electrohead614,"I haven’t tried react, but I am happily building a web app with Vue and its incredibly simple to work with. That said, I have used Angular, and develop with C# and .NET professionally. Given the choice, I’d much rather build a UI in Vue rather than Microsoft’s stack. ",1542110325.0
manu144x,"If you want to be productive sooner, Vue. 

I tried react simply because of all the hype, and I hated it. 

Everything is a big spaghetti. Everything is constantly changing. What is recommended today, may not be tomorrow.

Vue is just to the point. It separates components wonderfully. CSS is CSS, javascript is JavaScript and HTML is just that, HTML.

I am not that advanced but I can already use the same component in multiple projects that are totally unrelated. If you write the component well, there's literally zero configuration.

I didn't go far into react, I must admit. I just dreaded it. Vue was so obvious and I was able to be productive so fast I just said forget it.",1542118244.0
aromines,"Oh man, after reading this and the post in the React subreddit, I'm definitely curious what you guys end up picking. You should do a one and six month look-back blog post about your team's experience!",1542130854.0
rdbinteractive,"I picked up a front-end project a few months back. It's being built on Laravel/Vue. Prior to this, I worked mainly with PHP, CSS, HTML & jQuery. My knowledge of vanilla JS was barebones.

Vue is my first JS framework.

I watched some Laracasts, skimmed through the Vue documentation, and started coding almost immediately.

Once the Vue syntax and concepts ""clicked"" in my head, I was off to the races. Vue has simply made my life easier. I've been quickly ripping through components that would've taken me forever (and most likely would've been a huge pile of spaghetti) with JS/jQuery.

State management is a breeze, routing is dead simple. Axios makes requesting data from the server amazingly easy. My code is clean and organized. Building reusable components is trivial. I can't say enough good things about it.

Laravel Mix takes all of the confusion out of Webpack, configuration is nothing. It also makes versioning and cache-busting trivial.

Best of luck to you!",1542130188.0
i_ate_god,"VueJS and React have more similarities than they do differences.

The concepts of ""reactivity"" and the virtual dom are pretty much the same, the data flow (parent gives data to child, child triggers events for parent, and everything else exists in a quasi global scope) is pretty much the same.

React uses JSX, and VueJS has it's own by-convention Single File Component. SFC is, in my opinion, much nicer than JSX which looks hacky and strange and I don't think I'd ever get used to it but frankly, that's just my opinion. I don't think there is any technical/objective advantage either approach has over the other since they both get compiled down to plain old JS anyways. A lot of people swear by JSX, I swear by SFC.

In terms of external support and the long term viability of Vue:

1. Vue is great now. If that one developer got hit by a car and Vue never changes again, then it will remain great until someone creates an entirely new paradigm of web UI development that make Vue (and React) obsolete and you can decide then what to do.
2. There are plenty of large and small frameworks / component libraries for Vue. We use https://bootstrap-vue.js.org/ for example.
3. Vue is sufficiently popular that you can google your questions and get answers for them without much fuss.
4. React community is larger and there may be more out of the box react components, but a lot of the JS world has moved away from jQuery and as such, a lot of UI widgets are now standalone and framework agnostic, and so integrating them into a Vue component is trivial.",1542134349.0
__galvez__,"Go with Nuxt.js (Vue framework) :)

http://hire.jonasgalvez.com.br/2018/Aug/12/The-Thing-About-Nuxt",1542135690.0
DisneyLegalTeam,"Facebook only has 4 dedicated React Devs. Plus 8 working on React Native. 

Vue has over 25 members on their [core team](https://vuejs.org/v2/guide/team.html) ",1542156696.0
boehmli,"Laravel has great support for vue.js, look also at laracast, they have many vue js laravel tuts. Many laravel composer packages use vue, like laravel media manager.
Also many Laravel Crud Admin packages use vue. Js. E.g craftable or Backpack. I would recommend Backpack for a production build. 
For Laravel I would definitely pick vue. ",1542119270.0
benabus,"I picked vue because I'm an old school php/jquery guy and when I needed a legit frontend framework for a project, vue was the easiest for me to pick up and made the most sense to me with my background. After a while I found it enjoyable and powerful.  Full disclosure, I've never used React, so I won't comment on it.",1542136912.0
rk06,"I would select Vue because **Vue team cares about developer experience more than React team**

If you look at react's history and background, you will realise that React's raison d'etre is Facebook' UI. React team *does care about devs and react community*, but that is not the primary focus. 

As example: 1. React's router package is not from fb (which ideally should be)

2. React's licence was not changed despite community continuous complaint about it *because it is required for legal reasons*. Yet, it was changed to MIT after WordPress announced it is removing React.

On other hand, vue team is developer focused. With Vue team's lead Evan You, depending directly from community.

Vue team has made many improvements with developer experience in mind. 

Eg: 1. Providing vue environment i.e. core vue, router, state management.

2. Actively communication with community via github, Reddit, Twitter etc on major features and feedback

**Other than that, it is toss up.** 


Additional noteworthy stuff:

React is a leader in JS community, and spearheads many of the new  features . however also causes churn .

Vue integrates latest advancements from JS community at a steady, but slow pace. Meaning vue will see support for ""modern"" features much later than react (past examples: SSR, devtools improv, State management) However, when Vue does get them, the new integrate existing ecosystem well and without causing churn.",1542118518.0
mgambati,"Since I only use typescript, react is really superior. But when you look at next version of Vue being written in this soon will be a no problem and a think a I will start projects with Vue again",1542130825.0
pyran1208,With laravel vue is a safe bet and your best choice!,1542144438.0
ProgrammaticallyMeow,In case you need to convince someone...https://horacekeung.github.io/why-vue/,1542148335.0
pyran1208,"Hm i didnt knew that, thanks for clearing things up. But anyway, check their FAQ to see what they are saying about replacing javascript:

„Is WebAssembly trying to replace JavaScript?

No! WebAssembly is designed to be a complement to, not replacement of, JavaScript. While WebAssembly will, over time, allow many languages to be compiled to the Web, JavaScript has an incredible amount of momentum and will remain the single, privileged (as described above) dynamic language of the Web. Furthermore, it is expected that JavaScript and WebAssembly will be used together in a number of configurations: [...]“

https://webassembly.org/docs/faq/",1542179628.0
CocoaChoco,"For my personal projects, and at my old position, I use(d) React (and Redux for data management) with Vue only for certain very small projects. At my current position, I currently use Vue for everything (along with Vuex).

# Typescript

Typescript support in Vue current leave's a LOT to be desired. I decided early on to use Typescript for everything here since the backends are written mostly in C#, and it adds an extra level of clarity and specificity that makes things a whole lot easier. Except...in Vue. Type checking in template is non-existent, so your IDE's intellisense probably won't help you out much when coding those. There won't be any type checking, so it kind of negates a lot of the benefits of Typescript, and slows you down.

And let's not even talk about using non-reactive data in a component. Well no, let's talk about it. If I want to set some non-reactive properties for a SFC, either Typescript needs to be disabled for that file or you need to convert it to a class component. And well....

    @Component({
      components: {
        ChildComponent
      },
      computed: {
        ...mapGetters(['some_data'])
      }
    })
    export default class MyComponent extends Vue {
      @Prop() data!: UnitData;

Ehh...it's just messy. To use Vuex and a class component you basically need to use some hybrid of standard syntax and class-syntax like above. It really is overly-complicated to use Typescript with Vue and you don't even get all the benefits.

As has been mentioned by others, Vue 3 is supposed to have better support for Typescript, and I am eagerly looking forward to that. And if you're not using Typescript, most of this won't be relevant to you at all!

# Strings or Symbols?

I enjoy data handling in both React and Vue, but man do I really prefer React's use of symbols (not the Symbol type, but using actual functions and variables that are in scope) over Vue/Vuex's use of strings.

With React/Redux you must directly use objects, functions, constants, etc. This allows Intellisense/type-checking to work, and and takes a lot of cognitive load off of you. I always feel more ""secure"" for me to use the actual symbols instead of string representations of them.

But with Vue/Vuex, so many functions/objects are referenced by strings. Therefore the IDE cannot intelligent give you the information you may need about your usage of a certain variable or function, you need to look it up again yourself.

React's use of symbols and needing to import each function, object, or component being used does allow you the IDE to give you more information intelligently, and keep you from having to look things up manually or have to remember function signatures or types, or guess.

Some people just won't care about that at all.

# Use of the Language

A lot of people talk about how React is ""just javascript"". And it basically is. There is some syntatic sugar for converting JSX into `React.createElement` functions, sure. From my perspective, it's really no different from we now use the spread operator instead of Object.assign. It's just easier for the developers. So even when using JSX, you cannot break the rules of Javascript, you just have more syntax available to you.

Vue, like Angular, ditches this concept for template. At first I didn't like this, but honestly it's pretty similar to just syntactic sugar too, it all gets converted to function calls as well. So no biggie, and honestly a **huge win for Vue** is the existence of `v-if`. Man, `v-if` is just so great. It certainly beats the ternary statements, IIFE's, or other trickery necessary in React to do a simple conditional render of something. Man, `v-if` is awesome. 

However, a **huge win for React** in it being just Javascript is it's ability to use all aspects of the language in it's templates, namely, constants and functions. In what way?

If I have a constant or a function in Vue that I want to use in the template, I either have to set it as an instance property on the component (or in the case of methods, add them to the `methods` collection), or use a computed property, etc etc. I can't just use my constants or functions inside the template. I feel that is a loss.

In React, you can call any function or reference any constant or other object without any extra fuss. Nice and easy.

Of course, Vue allows you to use a render function and JSX as well! That comes at the sacrifice of the Vue template syntax's handy features though, oh bother.

So how would I summarize this? Vue gives you more features that are going to be helpful to UI/UX in it's template language. React allows you to use all features of Javascript inside of `render`, however certain UI/UX things are a little more verbose/complicated to make happen.

# Redux vs Vuex

I've been referencing Redux and Vuex throughout this post. However there are just a couple things I want to bring out exclusive to each of these state mangagement libraries that don't deal with the rest of React/Vue.

Vuex modules are nice...but not that composable. In a Vuex module, it's very easy to deal with the local module state. However, when you need to communicate with a module outside of the current one, oyyy, things get messy.

You need to run your commits in a form like `commit('otherModule/an_action', data, { root: true})`; That means that any times you call on an external mutation, action, getters, or state, you need to know the *entire path* to that mutation, action, getter, or state. Well that's confusing, because modules themselves have no notion of what their position is in the tree. A module can have it's own namespace, but it is not the master of it's own namespace. It's namespace depends on it's overall position in the Vuex module tree. So what if you want to have two modules that you want to interact with each other? If they want to call on each other's properties, they need to always be at the same position in the tree, because they need to be `commit`ed or whatever by their full position relative to the root. Oof.

Since reducers are just plain functions, and actions don't rely on the tree structure as much, they are much more reusable and composable, albiet also more verbose.

Redux of course, does not have an build-in notion of side effects like Vuex does with actions. Middleware solves this, but I feel like a some basic built-in implementation would cut out much complexity. But again, it's an intentional choice so I can't dock Redux much for it.

# Final Thoughts

So at the end of all this, what would I recommend? You got to actually use them and see which one is better. Because even with all the detractors I mentioned, I still really enjoy Vue and Vuex and will continue to use them. And I'm at least some of those complaints will be resolved by feature releases, maybe even within the next couple months! I do currently find React more verbose but also more sturdy. I do find Vue more fun and simpler.

But I wanted to bring out a lot of drawbacks I've experienced with Vue because many people seem to act like Vue is so infallible next to React. Like, it's is such an obviously better choice than React because React is so hyped, or that since React is currently on top usage-wise, we gotta tout 'oh no Vue is *actually* better because x y and z', or because React has certain drawbacks 'well Vue doesn't have that problem it's so much better'.

I don't really care about that noise. People love to create competitions of superiority where none are necessary.  I do get the appeal to root for the underdog, but Vue has many detractors just like React does. They both approach the problem of front end development in different ways, and therefore they will both always one-up each other in different areas.

&#x200B;

Personally, I feel in however long it's going, 2 weeks or 2 months or whatever, Vue 3 and React 16.7 are going to be here with many of their past problems fixed, and with new opportunities available in each. A lot of what I talked about in this post will be gone. They will have all new points of comparison, and honestly I feel like they will have diverged a little bit more. But they will both be more usable for developers, so it may be even harder to recommend one over the other. Right tool for the right job. Based on the pros and cons I've listed here, maybe something will stand out as to why one would be better than the other for your use case.",1542324849.0
johnorford,"Easier isn’t of course simpler. Vue has many more features than React does, some which can shoot you in the foot",1542109668.0
zampa,"If you're coming from Joomla, I'd say not only should you use Vue, but you should take a strong look at [VuePress](https://vuepress.vuejs.org) as your base over Laravel.",1542112656.0
ShetlandJames,"OP if you're worried about size and scale at all with Vue, our SaaS has over 100 Vue files ",1542116601.0
paliwalgaurav,"Consider your use case first and then check the team skills. 
If positivity of above statement will is satisfying you then go with React, because you’re right community factor favours.


",1542116765.0
aviderambo,"At contrata.com.do we migrated from Wordpress to NodeJS/VueJS 5 months ago.

The team had no experience with it, but they learned in no time.

Great experience overall.",1542118521.0
mmcnl,Vue's documentation is more than excellent. It's the main reason I recommend Vue to people with no prior experience with modern frameworks.,1542148397.0
DressedUpNowhere2Go,"I work at a startup where 6 of the 8 Devs had no web development experience (they did have lots of C++ and Python) and we chose Vue due to it being easier to pickup. We are happy with our decision.

before starting at this job I only knew React. I was able to pick up Vue in a week or so and start contributing very quickly. 

 I think the one thing React has going for it is more third party extensions. If you think you'll be using lots of React specific third party extensions then React may be a better choice. 

I'd probably choose vue, unless you have a specific React-only extension that you might need.",1542162671.0
Vahlk,"If your team has Angular experience, go with Vue as it provides routing, state management, directives, and other goodies, right out the box and you can still use JSX for renderProp goodness or just if you'd prefer it over vue templates. My day job is exclusive to react and I lean towards react over vue just for the simple fact that I love jsx and javascript but if I give react a 10/10, ill be giving vue a 9.5/10. 

It should come down to what your team did before and how much new learning can they budget.",1542163189.0
Puritanicall,"I hope that you realize that you are asking this question on Vue subreddit, so the answers will be heavily biased :P

In my opinion React ecosystem is far more mature than Vue's, but choose what you're comfortable working with.",1542278628.0
Max_Stern,!remindme 6 months,1542343267.0
Blockchain0,Vue. React is an overengineered mess. React will crush your soul.,1542372374.0
animflynny2012,"Also new to github, so any tips on making this more appealing etc would be appreciated.",1542107856.0
seamouse3,This is like the sixth time I've seen this article being posted in the last 2 days.,1542106809.0
kcolttam,Easy way is make the render of the component conditional.  (v-if) - you can ensure the data is there before a null value is checked for.,1542069751.0
noctiK,I've used nextTick to get around this,1542084921.0
ForScale,Maybe you need to set a default active row... Initialize the active array to have a row in it right off the bat.,1542066443.0
Lansett,"You pass an undefined v-model. It seems b-form-checkbox returns null in such case.

You'd really need to initialize the active array properly with initial states. When fetching data, do something like [`this.active`](https://this.active) `= Array(rows.length).fill(false)`

Then the @change handler could be simpler :

    @change=""value => updateActive(props.row.id, value)""
    
    updateActive: function(id, active){
        axios.post('/updateActive', { id, active });
    },

&#x200B;

&#x200B;",1542068614.0
plainblackguy,I had to add a 200ms delay to my updates to account for this.,1542079599.0
RedFing,"Another way around is to use a computed property which will hold the default values until data values are not fetched.

&#x200B;

    computed: {
        actives(){
            if (this.loading) return this.active.map(e => false);
            return this.active;    
        }    
    }

And in your updateActive method set the loading property to true, and after in the then handler of your axios call to false.",1542098862.0
zebbadee,"if actions aren't getting too full then that's ok, otherwise i make a helpers.js file to keep it clean",1542059301.0
seamouse3,"Axios has a `transformResponse` function, allows changes to the response data to be made before it is passed to then/catch. Check out the [Request config](https://github.com/axios/axios#request-config) that can be used with `axios.request(config)` or `axios#request(config)`(When creating an axios instance).",1542054537.0
LanFeusT23,"When you make your Axios call if your data manipulation is simple (say convert string date to JS Date) do it right there in the `.then` of your call.

But if you have a lot more manipulation needed, or that requires more calls, then store your data as is in your store and instead create `getters` that return you the data in the shape that you want.",1542053459.0
porksmash,"I prefer to do this in vuex actions. My use case was normalizing API data using normalizr. I have the code up on [github](https://github.com/PeteAndersen/mmegfarm-fe/blob/master/src/state/menagerie/store.js) if you want to peek. It was my first Vue project so I may not have done things in the best way, though.",1542058212.0
awnton,"Quizify is a ""local multiplayer real time music intro quiz"" with a Spotify integration. When you've created a quiz others can join your ""room"" with their own devices and then use them as buzzers. You can try it here: https://qzfy.se

It's built with a #nestjs + #mongodb backend and a #vuejs frontend, which have been a really pleasant experience. Nest is heavily inspired by Angular, which I have almost zero experience with, but I found it really easy to get started with regardless.

I've also tried to make it as accessible as possible, both in regards to the usual #a11y issues like useability for screen readers etc, but also by adding localization so that people like my parents can understand it.",1541967931.0
RedFing,"Watchers are expensive, but $emits shouldn't be. I know it because I'm currently using a color pallete components, in which when you drag to select the color, an $emit is called for every color that is being hovered on, and it's smooth, although the devTools crash when I inspect all the events.",1542099253.0
brainbag,"I worked on the first Rock Band for PS2 so I'm familiar with how much loop timing performance can affect audio!

Not sure of how your component is working, but can you use JavaScript [`requestAnimationFrame`](https://flaviocopes.com/requestanimationframe/) and maybe Vue's [`nextTick`](https://vuejs.org/v2/api/#Vue-nextTick) to get at least accurate enough? `requestAnimationFrame` is the steadiest and most reliable way to get looped timing information via JavaScript. You can use it for precise timing, and then when you need to do an update, you can call `nextTick` and Vue will do the UI update at the next available time. `nextTick` might not even be necessary if you're not updating a ton of stuff. `requestAnimationFrame` unfortunately only works when the browser tab is active, which might not work for your use case. 

You might consider looking at [MainLoop.js](https://github.com/IceCreamYou/MainLoop.js), which is the most reliable and precise ""game loop"" library I've seen in JavaScript. The author wrote [an article about the trials and tribulations of JavaScript timing](http://www.isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing). You could either have a MainLoop on the side that writes to your store when necessary, which Vue then updates whenever it wants, or you could perhaps put the loop in the single component (if you only have one that cares) and then handle it there.",1542119525.0
earthboundkid,"For music, timing is critical, but JavaScript makes no guarantees about event timing, so I wouldn’t trust it to happen as quickly as you need. ",1541964544.0
N3KIO,"Don't worry about it, build it first then optimize it with better code. ",1541954989.0
morficus,"I've been using Vue and Vuex as my ""daily drivers"" for well over 2 years. I'm at the point where I use Vuex less and less than when I started. My Vuex state is rather small in my newer apps and more components have ""local state"" ",1541952438.0
g-money-cheats,"Just a heads up. This example is not mutating the state. It is an equality check. 

```
store.state.name == ‘NOOOOOOO’
```",1541950711.0
dreamer_soul,This is by far the best explanation I stumbled upon thank you!,1541969636.0
ShetlandJames,"Would love to hear everyone's views on Redux. I'm playing about with React Native right now and I have to be honest, I hate Redux. I'm going to consider MobX as an alt.",1541946875.0
twentz0r,I love Vuex but on some really huge apps you have to weigh down on when to use it and when not. For example I had a huge modal menu appear with Vuex which turned out to be slow on some mobile phones. So I turned to local state for components that are used only once or triggered from a single place for example. But it completely replaced events for me even for the dumbest of cases around a year ago.,1541974570.0
mgambati,Fucking hate vuex so much.,1541967547.0
thiswasprobablyatust,"In your current implementation, yes you would need to alter the import paths.

I would recommend you instead `extend` or `mixin` the Buefy component.

    import BuefySnackbar from 'buefy/src/components/snackbar/Snackbar.vue'

    export default {
      extend: BuefySnackbar
      ...(only the new things for your version, instead of a complete copy/paste from the original)
    }


In terms of how you would programmatically create an instance of Snackbar, you can look at the original `open` method [here](https://github.com/buefy/buefy/blob/dev/src/components/snackbar/index.js#L7).",1541923241.0
budd222,You can use vue as a replacement for jQuery. JQuery is no longer needed ,1541876132.0
rnenjoy,"Vue is the best for sites with heavy interactivity and also has great support for animations and transitions.

Some examples i found
https://madewithvuejs.com/websites",1541868854.0
Mekhami,"nope, vue is for simulating horse racing only. idk where you got the idea that vue was for web development.",1541863377.0
tonjohn,"I think Vue is a great fit for design agencies!

Building websites using components feels natural and Vue’s single file components help with organization. Over time you’ll build up a library of components that you can leverage as you create new sites for customers.

Vue is great for animations and there are plenty of articles on integrating with Greensock (gsap).",1541908256.0
road_pizza,"It will depend on the type of website whether it’s an advantage or not. Vue will be great for web app type sites with a lot of UI that depends on states. Or perhaps something like a complex product customizer with lots of data. 

If you already have a good system it won’t make sense for every website. I’d say try out a few basic builds using components and just importing Vue into a static site.

In terms of animations the Vue transition groups are quick to set up and very handy. ",1541896421.0
lucuma,"I don't really understand your last paragraph and what that has to do with Vue?

Also you make a point about introducing change in your process which has nothing to do with Vue either in that we have no idea whether it will suit you or not. 

You really need to learn how these modern development frameworks work and then make a decision on how they might help you. ",1541905696.0
mwassler,">Currently we don't use a framework - we use instead a combination of libraries - jQuery, gsap, anime.js, Barba.js, ScrollMagic, Rellax.js...

For the most part these libraries really aren't competing with what Vue would be doing - you would probably still need them (besides jQuery) with Vue or any framework. You dont build sites with these you just animate stuff on the sites. 

When you say switch to Vue I dont understand what your switching from. Are your current sites just a bunch of static HTML files? ",1542405069.0
Hydrotechnics,"Great plugin. My one quibble would be to import just the debounce function from lodash (if you don't plan on using the rest of the library).

Import debounce from ""lodash/debounce""

Cheers.",1541859883.0
coskuns,"You have a mistake at:

    const VuexLocalStorage = (store) => {
      // Plugin goes here!
    }
    export default VuexLocalStorePlugin;

Constraint and the export has different names if for some reason that was not intentional. ",1541863572.0
thiswasprobablyatust,"Reusability is the main factor we use. The second being how testable it is.

JS (or TS) files are a bit more portable and we move things we start seeing over and over again into shared libs - then we make sure those are well versioned/tested.",1541844740.0
Thomasan1999,"if it is related to DOM then I add it to a component, for example I use a custom scrollbar for my sites so I make a component Scrollbar which has some Vanilla JS in it, but when it is non-DOM related then I add it to a js folder and import it to a component when needed, for example I have a self-made class to improve the working with random numbers, that is not related to DOM because I'm just working with numbers so I keep it in an external file",1541959341.0
brainbag,"The only thing I have in my components is minimal component/display logic.

The only thing I have in my state is minimal state logic.

All business logic goes either on the server (via GraphQL typically) or in external TypeScript files. It's way more easy to manage, reason about, and test. 

The worst habit I see people recommending is to put all of their business logic in their state manager (usually Vuex). It's a recipe for future disaster. I feel sad for their future selves who inevitably have to refactor it.",1542118432.0
ShetlandJames,"I keep most vanilla js in various helper files if the function, ie `formatDate` is something I use in more than one place. If I have the exact function in two .vue files that's a flag that I should extract it into a helper. ",1541845852.0
jgmcelwain,The last two routes have a functionally identical path - that might be the issue you are experiencing.,1541799576.0
penguingspe,change it to `/category/:category` and it should work.,1541799741.0
archivedsofa,"The router cannot really distinguish between `/:slug` and `/:category`. If you receive `/something` how will it know if it's a slug or a category?

As others have said use something like `/slugs/:slug`.",1541803066.0
phenomix,Thanks for the help! that is the fix,1541822166.0
Pyjamarame,I use computed field for that purpose.,1541793884.0
Pyro979,"Add others said, computed property. Additionally you can definitely use lodash. Just import it and use. I do this all the time where appropriate.",1541814883.0
cheese_bread_boye,Nice! I didn't know sicoob is into open source. Nice seeing big banking companies adopting Vue.js.,1541786866.0
ameo02,where is demo? demo link is dead.,1541798067.0
MrMaverick82,FYI: “Opa” is the Dutch word for grandfather. ,1541833143.0
Mekhami,"i've thought about this quite a bit myself. one thing you could do is set the boolean value in the client that says whether the thing is visible/accessible, but then also do an api call to verify authorization when the user tries to actually do a thing with that feature. this means usually, your user won't even see the feature; but if they fiddle with stuff, or the flag gets messed up, they still can't change it because the server still verifies their authorization.",1541785955.0
COUNTERBUG,"Basically, your server should check the authorization and send back the right status code in in the response.  
So 400 (Unauthorized) if user is not logged in or 403 (Forbidden) if the authenticated user does not have permissions for the action. I think 403 fits your case.  
Then your client http library (Axios in my case) has to react to the response's status code.",1542826955.0
Pyro979,"Why not refactor it all properly? It'll take a little bit of time, but will probably be better and more maintenable in the end.",1541817076.0
jefwillems,Why would you want to avoid npm for this use case?,1541852955.0
Enoxice,"I'm not sure if I'm exactly picturing what you're describing or if this will miss a critical component, but I also operate a collection of disparate Vue apps and a portal app. I put them behind CloudFront, a single distribution with separate behaviors for each app (/app1, /app2). They share a component library so they all have a unified look and feel but they are as separate as the backends that drive them.

But if you need to like grab widgets from each front end and show them all on a page at the same time obviously won't work as well.",1542000133.0
workandfocus,"Hmm, why not use the official vue one? 

https://github.com/yyx990803/pug-plain-loader",1541782590.0
ataraxy,"Hey, this is very cool.

One suggestion is to put together something like this: https://html2jade.org/

It makes it easier for someone to come in and convert existing templates and perhaps also get a better idea of how it Louk's so to speak.

Personally I'm not thrilled with the component section templating here but maybe that's just me.",1541799993.0
Hdandhf,This looks great. Looking forward to working with it.,1541783205.0
JZumun,"This looks super neat!

&#x200B;

How does it handle cases like

    p.sample Hello {{user}}!

Would it be something like the following, with (hypothetically allowed) text node children?

    p
    .sample
        "" Hello
        span user // <- unsure how to put this without a wrapping tag
        "" !",1541792385.0
bmarkovic,"I love Vue.js and Pug combo.

I think there's a lot of power in it that is lost this way. Actually an example from the article (the fact that there's Pug presentation logic and Vue.js presentation logic) is a great advantage as soon as one is aware that there's a ""build time"" (where one could use pug logic) and ""run time"" in a Vue SFC application. ",1541795592.0
zampa,"Now all we need is a way to simplify the code inside the script block!

    export default {
          methods: {
              greet: function() { alert('Hello!') }
          },
          data: function() {
            return {'Greet'}
          }
    }    

Maybe something like:

    methods:
         greet()
              alert(Hello!)
    data()
         return Greet

?",1541792336.0
mraible,"I published a new tutorial this week that shows how to integrate Spring Boot, OAuth 2.0, and Vue (using TypeScript). Maybe it will help? [https://developer.okta.com/blog/2018/12/03/bootiful-spring-boot-java-vue-typescript](https://developer.okta.com/blog/2018/12/03/bootiful-spring-boot-java-vue-typescript)",1543933926.0
finroller,If you create a nuxt app with the oauth and maybe vuex mutations for the api access they could just clone it and start adding pages and components. Does spring have to serve the front-end too?,1541754624.0
imadp,"It feels like you are trying to combine two different things here. I would view Spring as the Rest API and Vue as an independent front end. I've used both technologies on a project in the past, but I didn't want to force one IDE for two very different technologies. I essentially had Eclipse for Spring and Visual Studio Code for Vue, two different stacks with different tools.

With that said its easy to create a spring template, its practically already made for you with Spring Boot. The same can be said from the CLI tool provided by Vue, I guess you can just expand on them a little bit.",1541780904.0
elementboarder,Woah I had no idea they added sync back to Vue. I believe it was in v1 and then dropped when v2 came out. Maybe they wrote the one way data flow section of the docs back when sync was not available? It's also handy to know that you shouldn't be modifying props unless you explicitly set sync.,1541718612.0
earthboundkid,"With .sync, the child component has no ability to control the modifications. It’s all controlled by the parent. The child just sends an event, but by convention the parent interprets it as a request to modify the object. ",1541727940.0
toqy,"If the majority of your site is just static content, then i'd pull in vue just for the quiz feature. ",1541703906.0
jmking,"> Is Vue just overkill for my project? 

Totally. Static content should not rely on JS in any way. Serve documents from your server fully pre-rendered.

> Should I drop down to server side rendering templates with Node and just ignoring Vue?

Absolutely

> Or building a small Vue component for a quiz feature on my site?

Maybe. The point of these libraries is to deal with the headache of keeping UI in sync when state changes.

Websites aren't applications. If you have very simple needs, stick to very simple solutions",1541733072.0
manu144x,"You could simply use the router, have a single route with a parameter being the content identifier, and just have a doc with v-html on it, some boilerplate to request the data from the server on route component mounted() and you should be fine.

Vuejs is a data driven framework. So if you don't need or manipulate data, you don't need it.

But if you really want to just because, yea, do what I said above.",1541715209.0
manu144x,"Markdown is really not something I would use to give to average Joe. They will quickly get frustrated with syntax errors.

You can do with a tinymce (the have nice Vue support) and save the HTML generated directly to the filesystem.",1541716464.0
BlamRob,"We use Vue in conjunction with a CMS for run of the mill content. We use Umbraco CMS, but what CMS doesn’t matter too much. It takes a bit more to set up, I don’t recommend Vue-Cli (but if you can make that work, more power to you).

To mix Vue and CMS content, you can either use inline-templates, or REST APIs. We just did something with GraphQL and it worked great!",1541735375.0
archivedsofa,You don’t even need to go the single page app route. You could use Jekyll with Vue as a much nicer jQuery substitute.,1541741686.0
ZivBK1,"If you really want to use Vue, but also want a nice editing UI, check out the VuePress and Forestry.io combo.  I personally use Hugo to build my site, with a little bit of Vue in certain areas that I need some interactivity or external data binding in partials. I also use Forestry for the Web Editor UI for my content creators/editors.
 https://forestry.io/blog/vuepress-brings-your-documentation-to-life/",1541774746.0
lucuma,I use string constants in the definition and mapping. It is very verbose but works well. ,1541700069.0
LynusBorg,"The why is pretty simple: 

 Typescript wasn't a big deal when vuex was designed, and it making the api easy to annotate wasn't a thing that we has n mind back then. 

We definitely want to change that with the next major release, but we're srill. In the design phase...",1541756522.0
Lelectrolux,"Because redux and vuex are js libraries, even when they are written using typescript/flow.

And because some of us don't want to use typescript/flow everytimes.

And for vuex, because vue also targets nonjs backend rendered stuff, not only spa, where typescript/flow are another extra tech you might not want to buy into.",1541757048.0
,[deleted],1541776289.0
mwh1989,"Jest is great at mocking, create a mock store making getters return some fake data and make actions and mutations a jest.fn() so you can test that the action / mutation was fired. If you are using to many actions you may find (I am not stating whether this is your case) that you want to break the code into further components. 

Just remember that you are not interested in the actions results or if what they are doing is correct simply that they fire correctly. They can have their own unit tests to correctly test them. ",1541711213.0
DreaMinder,"its sounds like you don't understand what nuxt is. No, it will never be part of vue-cli and no, vue-cli plugins can't offer alternative to nuxt.",1541716367.0
lucuma,I think you'd have to build the mechanism to log them in your actions. ,1541766535.0
jemminger,"This is by the author of vuex-pathify: https://github.com/davestewart/axios-actions
",1541696185.0
sifex,"This is where VueMC really shines, have a check of it on GitHub , has collection support as well

https://vuemc.io",1541707011.0
balls_of_glory,Looks like Rails.,1541692242.0
lenswipe,"Btw, OP. You could replace that `.then` with `async`/`await`",1541698106.0
Quadraxas,graphql,1541692202.0
i_ate_god,"At work, I wrote some code that emulates Backbone models and collections. While not exact copies, I followed the same concepts and it works extremely well.

There might be OSS solutions that do something similar. This approach works best for my needs.
",1541693939.0
Downvotes-All-Memes,"Where is that code taking place? It looks exactly like Mongoose on the server (and I'm sure that looks like many other wrappers).

What is your question exactly?",1541694273.0
djvirgen,"Monocle API https://github.com/ifwe/monocle-api

Sorry for the plug but thought it'd be a good opportunity to share. It's an API framework for nodejs that my team built. It's built on a foundation of REST, but adds features that make it flexible like GraphQL. It encourages consistency by requiring schemas, which it uses for all input/output validation and to auto-generate documentation.

There's a JS client available for browsers and nodejs that understands Monocle's property filtering features and uses intelligent caching to automatically cache/expire resources and all nested resources.

Usage is pretty simple:

```
monocle.get('/users/1', {
  props: ['displayName']
}).then((user) => {
  user.displayName += ' edited';
  return monocle.patch('/users/1', {
    props: ['displayName'],
    resource: user
  });
});
```

In the example above, lots of optimizations are in play:

- monocle client will reason the get with a cached copy if it exists.
- if it doesn't exist, the http request is and response is very small. By specifying which properties you're interested in, the backed will only do the lookups required to fulfill the request instead of returning a giant user resource.
- if the response contains cache control headers, monocle client will honor them
- the `patch` will expire the cached entry in addition to making the network request.
- the `patch` only modifies the specified property
- monocle encourages shared schemas between http verbs, so anything you `get` can be modified and then went to back to the server in a `patch`.",1541695938.0
JohnMellor89,I was just about to start using this but haven't actually tried it yet: https://github.com/aarondfrancis/vue-model,1541711023.0
Sphism,Js data is pretty nice. ,1541741013.0
JohnMellor89,/u/MrMaverick82 did you try any of the suggestions? Any feedback on what worked best?,1542682301.0
FreeHandGrifter,"When I go to remove the cli from the global packages it doesn't seem to work in the way expected. When I go to update the cli it works, but when I try and create a new project it asks me to install it again. When I check the version I have it tells me I already have a later version than what I tried to install. I have tried a couple different ways to get it to remove the old package but have received nothing but more headaches. Any ideas?",1541722315.0
bozanicjosip,Why is your face in the thread image?,1541678436.0
toppotom,This is my first article on medium.com and I would be happy about some feedback :),1541669578.0
getsiked,https://jsonplaceholder.typicode.com/,1541663219.0
joneironaut,"Swapi.com
It’s the star wars api :)",1541674348.0
Whale_Eating_Cheese,"If you just want a get API I love this Dog CEO : )

[https://dog.ceo/dog-api/](https://dog.ceo/dog-api/)",1541687383.0
drewsmiff,Json-server plus faker is pretty great,1541687369.0
qbxk,i like https://www.mockaroo.com/,1541717481.0
Sphism,Sail.js is amazing. ,1541674158.0
Alskttiio,This isn't a VueJS question. This is a basic JS question. ,1541653365.0
maniakh,"This is a simple problem but can go over your head if you overthink it, have your data object like this - (i'm on phone so bear with me if there are formatting mistakes)
`
			meals - [
						{
							title,
							description, 
							price,
							ingredients: [
									{
												name, 
												quantity
									} 
							]
						}, 
				]
`

To summarize, meals is an array of objects containing the meal information and the ingredient info, ingredient is also an array of objects, now to loop through is super easy. ",1541656074.0
originallowercased,"    storeMeal(){
        axios.post('/meals', {
            title: this.newMeal.title,
            description: this.newMeal.description,
            price: this.newMeal.price,
            ingredients: [
             {ingredient:A, qty:2},
             {ingredient:B, qty:3},
             {ingredient:c, qty:7},
            ]
        });

???",1541646528.0
KissMeHelga,"Isn't this parent->child communication? Use props. For this scenario, two modals, i'd create two variables, changed by the button, and send them down via props, one for each modal.  
  
Edit: per the docs, ""$refs are only populated after the component has been rendered, and they are not reactive. It is only meant as an escape hatch for direct child manipulation - you should avoid accessing $refs from within templates or computed properties.""",1541636161.0
ENx5vP,">this.$refs\[target\].showModal()

This is not recommend since the result is a tight coupling between parent and child, which is most times no sensible for a modal (think about a sign-in modal which can be opened from many places). The caller (button) shouldn't be aware of the underlying architecture (that's encapsulation).

`props` would be a good way, like @KissMeHelga said. I'd do something like this:

`<modal is-visible-modal.sync=""isVisibleModal"">Modal #1</modal>`

The `sync` modifier enables the modal to handle the closing process by itself (animations and so on). The modal component can mutate the variable with it.

I use `ref` for third-party libraries only where the DOM is involved heavily.",1541653492.0
astarch,">Edit: Can I just use this.$refs[target].showModal() ?

Yes.

If you don't have a reference on the target component, you might be interested in events and/or in an eventbus.",1541633415.0
percykins,"It's difficult to tell exactly what you're asking. Generally, if you want one component to listen for changes from another, what you want to do is simply use a variable in the parent component and have both interact with that variable.

So, in your situation, what you'd want is to pass ""item.value"" into mtz-status-addon and have mtz-status-addon react to changes in the value, either through ""watch"" or directly. So it would just look like:

    <mtz-status-addon :value=""item.value""></mtz-status-addon>",1541629022.0
yeahdixon,"Idk if it helps cause I don’t know bootstrap  that well, or know what exactly the outcomes are, but you can change classes with 

:class=“‘main ‘+state”

Also 

<span v-if=“state==‘success’”> success </span>

",1541631838.0
amulchinock,Take a look at [Recursive Components](https://vuejs.org/v2/guide/components-edge-cases.html#Recursive-Components) in Vue's documentation :),1541604057.0
tribak,<dormammu-ive-come-to-bargain/>,1541623419.0
bjornkrols,"Ooo, I'm curious, when would you use recursive components?",1541612413.0
Hadora,"Yes it is.

    import MyComponent from './myComponent.vue'
    export default {    
     name: 'my-component',     
     components: { MyComponent },
    }

i personnaly use this kind of behavior for a deeply nested tree display. It works like a charm.",1541604098.0
DOG-ZILLA,"You can do dynamic code splitting in your router file. 

Instead of static imports to your views, you simply use import() on each route. 

Vue will load only that route on-demand. ",1541582389.0
so_lost_im_faded,"If you use Vue CLI 3 and don't change the config in any way, the production build will generate small .js chunks that will be downloaded once called via the App. This is for any v-if-ed views like components that hide and show,  components in router view.. basically anything that is conditionally rendered and initially hidden.",1541580632.0
hypernautical,"As others have pointed out, you can code-split using vue-router, webpack, and dynamic import functions that will divide your js file into chunks loaded when a user arrives at a certain path.

You can ALSO use this dynamic import feature INSIDE of Single File Components to dynamically load content such as ""below the fold"" and in a v-show/v-if situation. Check out this piece for examples of all three: https://medium.com/js-dojo/3-code-splitting-patterns-for-vuejs-and-webpack-b8fff1ea0ba4",1541643977.0
vaaski,"just grab the current webpack template from @vue/cli 3 and make sure to include vue-router. the ./src/router.js should contain an example of route-based codesplitting with codechunks, like the other comment said.",1541581597.0
archivedsofa,"Usually your JS bundle contains all your JS code. That code does not run until the user actually visits each page.

You can split your JS code in chunks so that only the bare minimum JS is loaded when your user starts the single page application. The rest of the chunks are loaded dynamically as needed. This is a Webpack configuration unrelated to Vue.",1541597281.0
creatio_o,"If you want a SPA, you'll probably will want the compilation steps, seeing that webpack does dead code elimination and minimization of your files. 

If you want the possibility to just upload e .js file and refresh the page, you will have to instantiate manually the a VueJs object on each page.",1541594852.0
DanijelH,"There's more than one way to achieve this and it indeed depends if you want to have completely SPA or multi-page application which you will enhance with Vue. Creating SPA should be pretty straightforward

* Create a new dotnet project
* Create a folder inside dotnet solution. For instance, VueApp, ClientApp, or something.
* Scaffold a new Vue project inside that folder using Vue cli.
* Change the output directory to point to something like ""../../wwwroot/dist""
* Build your app. Take note though if you're building for dev or production, output structure will be different.
* In your \_Layout.cshtml or Index.cshtml, however, you want to organize it, reference those outputted files.
* Add <div id=""app""></div> into your .cshtml
* You're done, enjoy.

If you want a multi-page solution, you can take a look at this template as an example or starting point. [https://github.com/danijelh/aspnetcore-vue-typescript-template](https://github.com/danijelh/aspnetcore-vue-typescript-template)  ",1541616021.0
Mekhami,"if the information is static, store it as json. keep it in s3 or something cheap. no need to run a database if information is never being written or updated in it.",1541576003.0
boxidea,"Agree with u/Mekhami about storing as JSON if it's static.

In addition, I wouldn't even bother with s3 if it's only something like 1000 entries and you're using webpack. Just import it into your component:

    import data from 'someJsonFile.json'

Then use it like an object/list of objects/whatever it is.",1541592347.0
AddictedToCoding,"Make slim return data in JSON:API (Content-Type: application/vnd.api+json) with an output serializer.  Maybe an entity map'er too for data manipulation.

Then use Nuxt.js.

That's my last 4 months. It's just amazing.",1541575798.0
MadMikeyB,"Hey guys, above is my blog post on how I have traditionally approached multi-stepped forms with VueJS and I would love thoughts on how others do / have done it. I'm always looking to learn :)",1541543206.0
djxfade,"NativeScript Vue is the Vue framework adaptet to work along with NativeScript.
Here is a popular demo app:

https://github.com/tralves/groceries-ns-vue",1541538964.0
bnlv,"Fellow ex-PHPer too. Vue, like Rails, was breath of fresh air for me. You should look at NativeScript as the Vue Native answer. Weex works too, but NativeScript is more aligned with Vue.",1541537408.0
serious_case_of_derp,"Can't use async ( ajax ) in mutations. But, you can use ajax in actions which can ultimately mutate the state ",1541537326.0
Minasokoni,"```
export default new Vuex.Store({
    state: {
        currentUser: 'Unknown'
    },
    mutations: {
        setUser(state, user) {
          state.currentUser = user
        }
    },
    actions: {
        updateUser({commit}, state) {
        
            this.$http.get('https://website.org/api/')
                .then(response => {
                  commit('setUser', response.json().sm_full_name)
                })
        }
    }
})
```
In your app.vue:

```
   <template>
        <div>
            <h1>Current User: {{ user }}</h1>
        </div>
    </template>

   <script>
        import {mapState} from 'vuex'
        export default {
            name: 'app',
            computed: {,
                ...mapState({
                  user: state => state.currentUser
                })
            },
            created(){
              this.$store.dispatch('updateUser')
            }
        }
    
    </script>
```
Dispatch calls the vuex action in the component which gets the user data
With vuex you have access to the mapState function which allows you to map the state within your component so you have access to user.

If you wanted to update the user prop from your component you can just call `this.$store.commit('setUser', <new user>)` 

Hope this helps",1541542405.0
,[deleted],1541532263.0
1makfly,Love what you've done with Zircle UI. :) Thanks for sharing.,1541552387.0
sosquad,"This is pretty cool. Definitely creative, might try it out on a project that categorizes and displays info from the YouTube api I’m about to start. ",1541579555.0
thinkadrian,Animations are too slow. Aim for speeds below 300ms. ,1541537628.0
tinchox5,"Yeah I see you are not convinced :). It’s all right. When I made zircle I tried to speed transitions but it wasn’t pleasant, a bit dizzy I think",1541538191.0
tinchox5,"Why?
Github offers the possibility of see the repositories and developers that are more appealing for the community daily, weekly and monthly. Also you can filter them by selecting your preferred coding language. It’s pretty good for having an idea of what the community is most excited about.

However, I want to add some features. For example, the ability to know how much time the repo/dev is on the spot and its relative gain/loss positions during the permanency on the trending chart.

For those reasons and because I want to show some uses for zircle-ui is that I'm trying to present an alternative approach.

Repository: https://github.com/zircleUI/github-trending-plus

Comments, feedbacks, issues highly appreciated :)",1541529882.0
ssp0929,"We do the same thing with Vue for our legacy ColdFusion pages. You can import Vue from a CDN as a script tag and use it as a replacement for JQuery. It depends on what you are trying to do. If you want SFC, a more streamlined build pipeline, etc. you're not going to get that with this method but if all you need is a replacement for JQuery for more easily handling a dynamic data-driven page or application on a non-node backend then Vue is perfect for that.",1541562879.0
Mekhami,"i don't understand a word of what you said, but if you're saying 'is it weird that vue includes it's own dependencies', then no, that's not weird, it's pretty standard across every open source library.",1541529106.0
meezohd,"It depends on what you wanna do. If you are building a whole app using vue, you will run into some limitations or complexity where you would need a build step (compile). Usually front-end apps are built (compiled) using node...ex: webpack",1541530312.0
Reashu,"You would ""need"" node if you want to use SFCs or any of the other build-time tools, but there's no need for it to be running on the server just for that. ",1541537052.0
Lelectrolux,"That's actually one of the strength of vue compared to react and angular. You can easily use it like you would use jQuery.


In non-js mostly backend rendered environements, that's golden. Don't need to buy in the whole node/webpack madness for simple stuff. Only refactor to it once you have a real need.",1541601334.0
o-piispanen,"I think it's better to have vue, vuex, vue-router loaded that way instead of a vendor bundle or in the app bundle itself created with node/webpack. This is because browsers can load multiple assets at the same time. Multiple smaller files are better than a few big files, basicly.",1541626416.0
pixel7000,"i have not tried it, nor do I have a windows machine to try, but may I just ask – out of sheer curiosity – what you are trying to accomplish?",1541527178.0
red-powerranger,This might be useful: https://ngrok.com,1541536507.0
commitpushdrink,"Open the failing url in the browser, you can accept the cert the same way you did for the app",1541530013.0
doubouil,"I've managed to have a valid certificate for my localhost, on Mac but the steps should be the same.

Since I'm using a Vue Cli 3 project I had to set up a [devServer in vue.config.js](https://cli.vuejs.org/config/#devserver).

I just had to set my host to local.myproject.com and https : true to have a self-signed certificate. Since I have a wildcard for my project I had to change this true value to [pass my certificate as requested by webpack-dev-server](https://webpack.js.org/configuration/dev-server/#devserver-https) (be careful with path on windows, and don't forget to require('fs')).

Hope this helps you !",1541531186.0
vaaski,"yeah just don't use any cert. when you see the untrusted error (when opening the page), just click advanced>proceed.

that should whitelist all https calls to that ip for your current session.",1541532472.0
Lanseuo,"Thanks, I finally found a solution:

&#x200B;

`npm install --save es5-shim es6-shim`

`// in your src/main.js, as early as possible`  
`require('es5-shim');`  
`require('es6-shim');`

&#x200B;

Now Googlebot is able render it (almost) correctly.

&#x200B;

[This article](https://medium.com/@lakesare/how-to-debug-fetch-as-google-for-an-spa-e5196391c169) helped me a lot.",1541535525.0
web_dev_etc,"google's bot (googlebot) uses their WRS service (web rendering service). as far as i know, it doesn't support as many JS features as chrome or other browsers. 

try running your code through something like jshint.com (or local scripts), check for errors. or try fetching as google with unminified scripts, see if it loads properly for it then

check out https://developers.google.com/search/docs/guides/debug-rendering  - there is some code to help with logging errors...maybe it'll catch something you don't see in your browser...",1541522709.0
rsoares88,"    Vue.component('login-quotes', {
        data: function () {
            return {
                quote: [],
                message : null,
                author : null
            }
        },
        created: function () {
            this.worksOk();
            this.fetchData(); // fetch's data, but doesn't update the DOM
        },
        methods: {
            fetchData: function () {
                let self=this;
                fetch('https://favqs.com/api/qotd')
                    .then(function(response) {
                        return response.json();
                    })
                    .then(function(myJson) {
                        let object = JSON.stringify(myJson);
                        self.quote = JSON.parse(object);
                        self.message = self.quote.quote.body;
                        self.author =  self.quote.quote.author;
                        // console.log(this.quote);
                        console.log(self.message);
                    })
            },
            worksOk : function () {
                //this.message = ""New Message"";
                //this.author = ""New author"";
            }
        },
        template: '<div class=""container""> <h1 class=""title""> {{author}} </h1> <h2 class=""subtitle"">{{message}} </h2> </div>'
    });

Fixed",1541521407.0
_ihab,"You can use vue-google-maps package in npm and give it as a position the value of your search input. 

https://alligator.io/vuejs/vue-google-maps/",1541533198.0
ezaquarii_com,"Oh, another one...",1541520477.0
Devinant,Just use Vue CLI and be done with it.,1541538342.0
BlackFeather97,Im a beginner. I dont know nuxt yet. Can someone clarify when do i use nuxt or normal vue js? Is it okay if i use nuxt all the time? Sorry if it sounds dumb.,1541495811.0
thelonecabbage,"I just go to work in the morning and boom, there it is.  We are hiring btw.. https://jobs.lever.co/bluevine

PM.  And I can help ",1541488425.0
Pandazaur,https://vuejobs.com you can find some jobs here,1541486818.0
thinkadrian,"By making sure my LinkedIn profile is written in such a way to attract the right recruiters, then being really picky with those who contact me.",1541497551.0
StandNTroll,"I love using Vue and would wish to work for a company that is using them. However, in Singapore, most of the companies are worshipping React. (Yes, the word worship is deliberately used to describe the situation.)",1541498058.0
wrath447,maybe you can find something https://joblist.app/t/vuejs-jobs here 😊,1541506169.0
SuperFluffyPunch,Venom stack. I like it.,1541495340.0
ThoseThingsAreWeird,What made you go with Mongo over something a bit more robust like Couchbase or Postgres?,1541490451.0
zmasta94,"Functionally it works great. Not quite sure the UI has been tuned to make it user friendly and easy to navigate. For example the blue colour is too bold and distracting from the content. 

Good work though!",1541488538.0
BlackFeather97,"Love the functionalities. I'm a beginner in mongodb (or backend in general). How do you handle image uploads? Is there a storage limitation in mongodb/heroku/netlify? If you have links to some tutorials, I'd appreciate it so much. Thanks. 😁",1541495424.0
Yajjackson,I love the api documentation format! What does `None[2]` meant in the Variables column?,1541510997.0
RobertoSnap,Can not register,1541484495.0
Preece,Is it because you're capitalizing Router when you instantiate Vue?,1541476649.0
zmasta94,"Ionic is changing very rapidly and v4 will be framework agnostic. You’ll be able to build Ionic apps with any framework that supports web component apis (Vue, Angular, React)",1541458321.0
itshotinjuly,https://vue-native.io/,1541469235.0
Flascher,"Disclaimer: I haven't developed a mobile app with Vue, though I did use Ionic ages ago when it was still angular 1 only.

From what I've seen around lately, the more popular options with Vue are NativeScript with Vue, and [Weex](https://weex.incubator.apache.org/guide/index.html).

Unfortunately I can't give you any insight on how the development experience is with either of those.

Just something to note though, unless things have changed, Ionic is for hybird mobile apps while (I believe) both NativeScript and Weex are comparable to React Native. This means that an Ionic app is essentially still running in a browser. It runs in the OS's web view, so performance was iffy for more complicated things last I saw. Hardware access is also limited to whatever modules they have available for you, and I didn't use any of those either, so I'm entirely clueless as to how those perform and what's available.

Of course my knowledge may be out of date. Someone please feel free to correct me if I'm wrong about anything!

EDIT: Scrolling through my feed I saw this also posted to this subreddit: [Vue Native](https://vue-native.io/). From my quick look it seems to compile Vue syntax to whatever runtime React Native is running on. Looks like its still early days for this, but might be worth a look!",1541457087.0
archivedsofa,"Ionic runs on a web view while React Native is completely different beast. There is really no point of comparison IMO.

NativeScript is indeed similar to React Native, as in a JavaScript engine giving orders to a native renderer. There's also Weex based on Vue which afaik follows a similar approach.

Personally I wouldn't waste time with either of those.

If you know Vue, and don't want to learn anything else, use Vue with a web view. There are plenty of successful web apps that run on a web view with excellent performance like the missive email client:

https://medium.com/missive-app/our-dirty-little-secret-cross-platform-email-client-with-nothing-but-html-aa12fc33bb02

Although, personally, I think Flutter is about to become the best choice for cross platform mobile dev.",1541469761.0
SuspensefulSausage,"It's already been said, but to add my 2¢, I've found it _so_ easy to build native apps with Nativescript and Vue. 

Checkout Nativescript Sidekick which now has support for Vue, or even better for small experiments Nativescript Playground is easy and requires no local setup. 

Don't work for anyone in the game, just like building stuff with Vue 🤷‍♀️",1541547719.0
syyvius,Quasar Framework occupies a lot of the same space as those frameworks. NativeScript also has Vue Support now.,1541457045.0
ocajian,I've used Framework 7 with the vue webpack tooling. It works with Cordova. It's hybrid but for simple apps does the job and saves a lot of time. ,1541464031.0
vaxo101,"Vue has Vue Native - I believe it is some sort of react native extension thought, never used it.",1541475072.0
ibra5him,"You can implement this in your own. Use Vue-router, and either build your modals or use external library like sweet-alert2. [https://sweetalert2.github.io/](https://sweetalert2.github.io/) ",1541448539.0
josevelez363,"Did you tried using v-bind for the class?? or any other property you want to change. v-bind:class=""column-size""

[See Docs](https://vuejs.org/v2/guide/class-and-style.html)",1541443263.0
kingdaro,"You want to install `@vue/cli`, not `vue-cli` https://cli.vuejs.org/guide/",1541434715.0
hamzaouiii,"Make sure if you are having the latest version of the CLI and then run Vue create my_project

You will be then asked on your preferences, you should chose typescript and that's it. ",1541432600.0
DanijelH,"Run `vue ui` command to create your projects, it's an awesome feature.",1541453683.0
mcdronkz,"Interaction design is a bit more involved than applying a bunch of patterns.

Designing great products is all about helping people achieve their goals. Therefore you must really understand the people using your product. In other words: research, research, research before coming up with solutions.

Books like *""The Design of Everyday Things""* and *""About Face: The Essentials of Interaction Design""* are great on this subject.",1541447102.0
zetecvan,This is just what I've been looking for. Bookmarked and signed up.,1541441634.0
Kyan1te,How have people found Vue native so far? Worth switching to from React Native as someone who loves working with Vue?,1541436264.0
hip_modernism,"Weird I'd not heard of this at all, only familiar with nativescript-vue.

&#x200B;

Anyone have a sense of how the two compare in terms of community support?",1541438348.0
shwetassft,You might like to check our website https://vue-native.io/ and the github repo https://github.com/GeekyAnts/vue-native-core,1541508735.0
gdormoy,"Hi,

&#x200B;

I would do it in the Action. 

&#x200B;

I like my component to be as simple as possible for testing purposes et re-usability. Your component doesn't need to know how your state is generated or mutated it only needs to know where to get the data it needs.

&#x200B;

Hope this helps.",1541415544.0
archivedsofa,"As a general rule your components should be as simple as possible.

Move all writing logic to actions and all filtering/reading logic to getters.",1541424892.0
kelhen,"I would put all the logic into your store’s actions. 
Why ?
None of your components will have to worry about any storage logic. 
This also means more testability and re usability on component and store level. ",1541416116.0
tokol,"Probably action, but going the more conceptual route: 

If the logic is one of the component's ""core concerns"" or ""business logic"" (e.g. you'd consider writing a functional test for it), I'd group it with the rest of that logic. Mostly that would be in the component itself, but in a Vuex-heavy component (where actions/getters are potentially tightly-coupled and logic-heavy), I'd make it an action.

If the logic is an implementation detail that only concerns how I want to read/write the data, I want to really abstract it away, and it will never be asynchronous, I'd consider putting it in the mutation.

Regardless, if the logic controls communications or signals meaning to other components/APIs via the store, I'd make it an action.",1541431852.0
ShetlandJames,"I always do: 

State => actions => mutations => getters

    import Vue from 'vue'
    import Vuex from 'vuex'
    
    Vue.use(Vuex)
    
    export default new Vuex.Store({
      state: {
        stateName: []
      },
      actions: {
        async UPPER_CASE_NAME(context, payload) {
        
          const route = Routing.generate('routeName', payload);
          const request = new Request(route, {
              method: 'GET',
              credentials: 'same-origin'
            });
    
          try {
            let response = await fetch(request);
            let json = await response.json();
    
            return context.commit('MUTATION_NAME', json.data);
          } catch(err) {
            console.error(err)
          }
    
        }
    
      },
      mutations: {
        MUTATION_NAME(state, payload) {
          state.stateName = payload;
        }
      },
    
      getters: {
        stateName(state) {
          return state.stateName;
        }
      }
    
    });
",1541425345.0
DandyRandysMandy,Ugh...... Probably a vueify issue,1541408945.0
Heyokalol,"As long as your app mode is set to universal yes, it works. You can check that it works by inspecting the page source on first load.",1541372415.0
buddythicc,"Pretty much any CMS that supports headless architecture would work well. That is, any CMS that supplies JSON endpoints, GraphQL, or other means of accessing it's content via API.

After that, it'd mostly be a matter of preference and weighing the strengths of particular CMSs based on the needs of the project.",1541363635.0
poldixd,I like cockpit: https://getcockpit.com,1541373046.0
Brachamul,"I like Contentful.

[https://www.contentful.com/](https://www.contentful.com/)",1541369975.0
Catalyzm,If you do a search for CMS on https://github.com/vuejs/awesome-vue you'll see a dozen options of various types.,1541369263.0
androiddrew,Wagtail (Django CMS) has an API. You can tap into that for CMS backend also,1541375222.0
datlean,You can even use WordPress. I did it once just to play around with and it works perfectly. There’s a json api plug-in for Wordpress. ,1541379049.0
so_lost_im_faded,"Hi,

I think the effect you're trying to achieve isn't the best example for transition-group usage. Any time I think about image gallery that slides to the left or right, I immediately think about CSS3 transforms. In my opinion that's so much better way to achieve this with CSS than forcing Vue to do something it's not meant to. Transition group works with elements that hide and show. I wouldn't want to v-if my gallery images in some weird way just to achieve sliding transitions.

*(I'm adding a note: I also tried this with transition-group but I couldn't get the sliding effect done both ways. It was either to the right or to the left, conditioning it with whether I'm going to previous picture or next picture would've been too much spaghetti code)*

I'm including my fiddle as an example for how I **think** this should be done. This could be of course done in a cleaner, more dynamic way, but it's just for preview purposes. Of course you don't have to agree with my approach, but checking it out can't hurt anybody.

[http://jsfiddle.net/wqhj869s/](http://jsfiddle.net/wqhj869s/)",1541431835.0
samdbeckham,"If you’re using Chrome, the service worker will be sitting inside the Application tab in chrome dev tools. But it sounds more like you want to know what a service worker actually does.

In a nutshell, a service worker is a bit of JavaScript code, cached by your browser, that allows you to intercept network requests to and from your website. There’s all sorts you can do with them, but their most common use (and what Vue is using it for here) is to allow your files to be cached and served offline. 

When you first load your site, the service worker installs itself. Then it activates and stores your website files in the browser cache. Then it waits. The next time you load up that site, the service worker kicks in and serves your files from the cache instead of making a request to your server. Not only does this make the load times a lot quicker, but it also serves up your website when the user is offline. 

The file you’ve shown in your post looks like a helper file for a service worker. So you have lifecycle hooks for when your service worker is in a particular state. I’d suggest looking at the Vue cli docs for more information on the specifics here. ",1541336198.0
graydoubt,"It is not a silly question at all. I went down this path last weekend, and there are five hurdles I had to overcome:

1. Understanding what service workers are, and that they don't run as part of your website, but it in the browser as sort of a proxy.
2. The service-worker.js file should not be cashed by the web server (which is generally unlike other (static / js / css) assets. This is because when visiting your site, you want to ensure the browser checks for a new service worker, because otherwise you can easily get users stuck on an old version of your app until that cache expires.
3. Understanding how service workers get updated. Refreshing the page (CMD+R / F5) doesn't work, because the old service worker won't ""let go"" until you're navigating away from the site (in all tabs!). Say what? Right, so when you visit your site, the browser checks for a new ""service-worker.js"" (or whatever you have registered). If a new one is found, it's marked as ""waiting"" (you can see that in the dev-tools as well). So until the old service worker goes away, the new one will keep waiting. You can force it to install itself, though. The new/waiting service worker just needs to call self.skipWaiting(), but how?
4. You can only communicate with your service worker via the .postMessage API (because service workers are web workers and run in separate threads/processes).
5. VueJS PWA uses workbox, and by default it's in ""generateSW"" mode, which provides out-of-the-box zero-config functionality caching for assets, but if you want anything else (push notifications, etc), then this mode is useless, and you'll want to configure it to be ""injectManifest"". You \*then\* can create your ""service-worker.js"" file, and have access to the ""workbox"" object, which is injected (because ""injectManifest""). And now you can add any custom logic, like listening to the .postMessage event and calling self.skipWaiting().",1541378404.0
yeahdixon,I think you can use require(“...css”)  and it will drop it right in ,1541289191.0
morficus,"Are you using webpack in your Vue project? if so then you should just be able to do this: \`\~jQueryPlugin/CSSfile.css\`

&#x200B;

a few other questions: 

1. Where are you trying to include this? a Vue file or a Laravel view/template or an HTML file??
2. If this is in a .vue file.... then I would recommend using \`@import\` inside your \`<style>\` block
3. If you are trying to import this to your index.html (or w/e the Laravel equivalent is), then I would recommend placing this CSS file in your App.vue file",1541310895.0
Lansett,The most practical way is to write the component handling the different cases with a render function (no template) ,1541275244.0
yeahdixon,"I still would use is: and make a component per modal  .If there is a base modal use mixins.    Use a v-if to toggle on if received a modal event. This should be at your root , maybe app.vue. .I would have a global object that you can emit to from anywhere to trigger any modal from anywhere",1541289904.0
mmcnl,I think you need to create a wrapper component. ,1541291311.0
Cheshamone,"Portal Vue will solve issues 1 and 2, not sure how it figures out render order though so I'm not sure about 3. Probably worth giving it a look to see if it would work though.",1541303679.0
fullheap,"Just push all the props into an array, then v-for v-bind (including is) that Array.",1541327890.0
thinsoldier,"That colon should not be there.

Did you put it at the bottom of the body but *before* other script tags?",1541274359.0
CaptainInsane-o,"Well it might have worked but thats against best practice and an indicator that something else is wrong.

Did you use the Vue CLI to make the app?  THats the easiest way to get started
",1541271780.0
archivedsofa,"Give a key to the cached elements and change it when you want them to reset.

https://forum.vuejs.org/t/how-to-destroy-a-vuejs-component-that-is-being-cached-by-keep-alive/27132",1541261193.0
amoshydra,"This is cool! I wasn't aware that we could attach event listener to listen for storage changed. 

I have been looking for a mechanism to perform cross tab communication before this. ",1541224035.0
LookAtMyKeyboard,"Seems like a good idea, it would be nicer if there was a way to implement this so that you could define what modules in your store are supposed to sync across tabs.

Definitely interesting though for the realm of realtime web applications.",1541231618.0
masterchief1676,"wow, listening localstorage how **brilliant idea**",1541244932.0
Lelectrolux,"Been there, done that, but I didn't abstract it to it's own package. Thx, might use it sometimes.

My only grip is this https://github.com/Almoullim/vue-tabevents/blob/master/src/index.js#L3

Why poluting the Vue base namespace with uneeded properties ? Using a local function would have worked too. And it's not even in the ""public"" api, as you didn't document it.

A simple 

    const IsJsonString = str => {
      try {
        JSON.parse(str)
        return true
      } catch (e) {
        return false
      }
    }

before `const vueTabEvents = {` would do the same job in a cleaner way.


You either have a doc or namespace pollution problem",1541271976.0
Groxan,What can it be used for? I'm curious in which cases the app should communicate with the same app but on another tab?,1541253529.0
Hwarner03,"Typically the view portion of the app will be generated by a template engine (ie pug, jade etc) or via a front end framework like Vue, Aguilar, etc. 

If the former you would make a call to the dB and then render it in html using the view template. For the latter you would return the data in json to the front end app.

Seems like you should start with something very simple. Find some fully integrated tutorials that walk you through the full process.",1541175766.0
ENx5vP,I think it's because you mutate `lastPassedDay` inside your `dateHasNotBeenPassed` and this forces your `day` condition to recheck. Or maybe the fact that `lastPassedDay` is a reference to `date`.,1541154405.0
Reashu,"In dateHasNotBeenPassed, you are both comparing with and mutating lastPassedDay. You are doing this inside a loop. Reactivity will cause vue to reevaluate the function in an endless loop, as long as the loop is over at least two instances with different dates.

Don't mutate state in ""checking"" functions. ",1541175973.0
azzamaurice,"All that “Pie charts are bad” stuff aside, this tool is great and works well!
Well done!",1541623113.0
avenp,"Cool library, and I don't mean to rain on your parade, but in general pie and donut charts are bad UX. This is why [https://medium.com/@KristinHenry/in-defense-of-pie-charts-and-why-you-shouldnt-use-them-df2e8ccb5f76](https://medium.com/@KristinHenry/in-defense-of-pie-charts-and-why-you-shouldnt-use-them-df2e8ccb5f76)",1541174257.0
JinSantosAndria,"Thats why JWT are not the best idea for consumer apps. JWT are issued and valid until you revoke access inside your server for the given user (not session). If you want sessions, use sessions. If you need API or OAuth keys, use them. Once you start mixing different approaches you are already look for trouble. JWTs are nice for systems that need to connect, they are total overkill for basic session/access management.",1541140107.0
vueser,"You can't delete the cookie on the client side, because you should not have access to the cookie from javascript. Your cookie should be set to httponly, If you can access the cookie from javascript then anybody who injects JS into your site (XSS) will also have access to the cookie, so your XSS protection is gone.

See this for a guide: http://www.redotheweb.com/2015/11/09/api-security.html

I haven't work with refreshing tokens, but if the server sends a new httponly cookie then it probably overwrites the old httponly cookie. Similar for logging out: if the server no longer accepts the current httponly cookie, then you're effectively logged out, even if the JWT token is still valid (but the client should delete it anyway).",1541199997.0
brainbag,"I just rebuilt a major site using Vue from Rails (with Rails still as a backend) and my biggest regret was using webpacker. It's very opinionated, which made it very easy to set up the project, but on the other hand, it's difficult to configure. Plus, it's not compatible with Vue CLI 3, which really sucks. I would much rather have my front end tool configuring itself than the back end tool.

That said, you *absolutely* should keep them in the same repository. It doesn't matter how you set it up (separate `client`, `server` directories, or the base Rails directory with a `client` folder next to `app`) etc. 

If you keep them in separate repositories it might work fine at first but eventually you will have an endless nightmare of versioning and trying to link releases based on version numbers instead of repository state. I have seen it done both ways many times and have separate repos for the same project is *always* an unsolvably shitty experience that never gets better.

If I were going to do it again, I would have a `client` and `server` folder in the base repo, set up a `config.ru` file in the base folder to launch Rails from a subdirectory (on Heroku), and then use Vue CLI 3 for the client and let Rails know nothing about the client.

I built a prototype Rails app as described, here's the commit: https://github.com/bbugh/rails-5-vue-cli3-sample/commit/cb093d834935dfdc2c6aaa69b96aaa510470e6e8",1541165251.0
finroller,"Uuh. As someone who is at the moment separating a hybrid stack or whatever it is called when you mix the front and the backend together, please, separate them from the beginning or you're going to be sorry if they stop developing Vue the next year of if it turns out Rails causes impotency or something and you need to stop using them.",1541135891.0
command-tab,"I’d make them totally separate things, but stored in the same repo so you can version them together. I just built a Vue/Nuxt app with a Python API, and they’re so separate that I could swap out Vue/Nuxt for React/Next and not have to change any Python code. The universal app lives in an `app/` folder in the project root, and the API lives in `api/`. It has worked really well, and I think the same approach would work fine with Rails as an API.",1541304163.0
Reashu,"On mobile, so no code, but you should either:

* Use events to notify the parent when you want to make an update, and have the parent pass down the new value as a prop
* Use ""data"" (instead of props) to manage the local state manually (you can still get an initial value from props) 
* Use ""v-model"" to manage the local state automatically",1541109424.0
lucuma,"The warning is telling you exactly what the issue is.  I assume you have a prop name userAge and maybe you have a textbox with a v-model set to that prop or you are doing this.userAge = in your component to change that value.  You should not do this. 

What you'll want to do is :

data() { 
  return { 
    userAgeInternal: this.userAge
  }
}


And use userAgeInternal in your component. If you want the parent to receive the value look into the sync modifier. 


https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier

You should also look into custom components and using v-model in the Vue documentation. It is important to understand that concept before you start getting into vuex etc. 

On mobile so can't see your code but the concept and warning are obvious to what is the issue. ",1541123994.0
ImReddit,"You have passed userAge as a prop. You then change that property. 

You cannot change a property directly in this manner. 

If what you want, is a property that is accessible in multiple places, you should look into states and using Vuex. 

https://vuex.vuejs.org/",1541116068.0
finroller,"In you component you do:

    this.myName = ""Max"";
    this.$emit(""nameWasReset"", this.myName);

Instead you could do just: `this.$emit(""nameWasReset"");` and in the User.vue `@nameWasReset=""resetName""`  
Then do the same with a parameterized function for the name change. ie. emi('nameChange', newname) and @nameChange=""changeName(param)"" and write the nameChange funtion to take one string parameter and stick it to User.vue data name.  
",1541137140.0
paladincubano,"Use v-model in your parent component. 

And within the component, try to use value and @input to emit the data.

&#x200B;",1541453601.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/learnjavascript] [Why is this not working?! Vuejs Question](https://www.reddit.com/r/learnjavascript/comments/9tczha/why_is_this_not_working_vuejs_question/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1541103133.0
CaptainInsane-o,"I think the config object you are sending as the second argument to your fetch call might be part of the issue.  The fetch API assumes that if there are no more arguments other than a URL then the request is a GET.

EDIT:  Also, what browser and verson are you in?  I know Safari has some support issues and IE doesnt support it at all.",1541104296.0
tiberiousr,"It's probably wrong but I wonder if firing off async requests with fetch in a for loop isn't possibly part of the problem. Does this help:

```
(async () => {
  for (let id of initial_ids) {
    console.log('id', id);
    let response = await fetch(`http://swapi.co/api/${this.type}/${id}`, {
      method: 'GET'
    })
    let myJson = await response.json()
    this.items.push(myJson)
  }
})()",1541113254.0
arie3,Maybe should try to fetch the three `initial_ids` before navigating to the `/data/:type` route in the `beforeRouteEnter` navigation guard. You can find the example of this in Vue router official guide: https://router.vuejs.org/guide/advanced/data-fetching.html#fetching-before-navigation,1541124754.0
voipme,Do you need to use `https` instead of `http`?,1541103923.0
voipme,"Your `getToken()` method is making an asynchronous call (which is a promise), and returning a value that may or may not be set.  Ideally, you want to make `getToken` return a promise which resolves the token:

    getToken(payload) {
      const path = 'http://192.168.14.24/api/getToken';
      return axios.get(path, payload)
    	.then(res => res.data.data.token)
    	.catch((error) => {
    	  console.error(error);
    	});
    },

Then you can change your later code to this:

    this.getToken(payload).then(token => {
        console.log(`Here's a token: ${token}`);
    });

You'll definitely want to test this before using it, obviously.",1541103099.0
CaptainInsane-o,"What is your goal here?  What do you mean when you say ""this isnt working""?",1541101064.0
Dnlgrwd,"When you call getToken(), the code where you log the value of token is being run before your api call resolves. This is normal async behavior. /u/voipme has the best solution ",1541123824.0
camelBasketCase,I'm not that familiar with vue but is this.getToken definitely getting called? I would expect it to be this.methods.getToken but maybe vue adds the methods onto the object through the constructor or binds this. My suggestion would be to breakpoint and step through.,1541101873.0
Timnolet,"Looks great, but that site must be the most annoying site to use ever. I'm fighting popups and screen takeovers trying to read the content. ",1541098045.0
iamnekosama,"The live preview has some issues on mobile view like the nav bar items and the manage tickets component.
Is this mobile ready?
",1541120140.0
thiswasprobablyatust,"If you really want to do this, you should use something like [vuex-map-fields](https://github.com/maoberlehner/vuex-map-fields). It will set up mutations for you, and you can reference the state just like it's `data` in your component.",1541094889.0
ENx5vP,Activate [strict mode](https://vuex.vuejs.org/guide/strict.html) an see what happens ;) Hint: Strict mode is the mode that helps you to write better code.,1541095068.0
inhalingsounds,"Being simple and compact doesn't mean it's right. The whole point of centralizing behavior in vuex is ... to have it centralized. Which means you always know where changes are coming from, and where they are going to go. 

Doing stuff like this might seem nice now, but it'll become chaos in a mid/large-sized project very, very fast.",1541095856.0
f3man,"You can define computed property, that will have getter and setter, where setter commits mutation. So than you can pass that computed property to v-model, and it will look clear as you wish.

Or you can use vuex-map-fields as people said upper",1541098722.0
i_ate_god,"In Vuex, yes you do. No one is forcing you to use Vuex though and it's relatively simple to roll out your own solutions just using [Vue.set\(\)](https://vuejs.org/v2/api/#Vue-set).",1541096223.0
elbojoloco,"I didn't even know you could bind a model to the state, that's pretty sick.",1541094020.0
blinger44,you're asking for trouble when mutating,1541126578.0
acklavidian,"I would look up the [flux pattern](https://facebook.github.io/flux/docs/overview.html). Vuex helps us structure our app using the flux pattern and many libraries build on this popular pattern.  Reducers/mutations is a core concept of flux. So if you're interested in the intricacies of some vuex concepts I might would look at flux pattern documentation.  However, I believe the short answer to your question is that by mutating the state directly you create a situation where the state could get over written. State in vuex is expected to be read-only and tries to act as a mediator between all your components async and sync state operations. Unexpected changes during this can result in some un expected situations.
",1541440863.0
CaptainInsane-o,I believe that unless a mutation is committed to the state then it will not observe it.,1541093528.0
elementboarder,"I would recommend using vuex and setting the user information in your signInSuccessful method. You're also already storing it in localstorage, so another option would be to pull it from localstorage in the mounted method in the component that you'd like to display it in.",1541080739.0
Cyb3rWaste,"You can try this:

```
export default {
  name: 'Navigation',
  data () {
    return {
      email: ''
    }
  },
  mounted () {
    this.email = localStorage.getItem('email') ||  ''
  }
}
```
`mounted` is a component lifecycle hook, you might want to read up on those ;-)

I also strongly reccomend you to start learning vuex!",1541084852.0
itshotinjuly,"Add a claim in your JWT that has the username (email address) and whenever the JWT is renewed (should be every 15 minutes), update a username property in vuex from that username claim. Use that property to display the value in your app.

This will be similar flow on how you know when your JWT's expire and need to be renewed -> you should have an expiration property in vuex, that is checked against before every request (to avoid console errors on expired tokens).",1541086889.0
rtheunissen,Could http://vuemc.io solve this? ,1541082059.0
percykins,">Since Vue 2 cannot detect the addition of new properties without defining the entire object in its data property

This is incorrect - you should be using [Vue.set](https://vuejs.org/v2/api/#Vue-set). If you use Vue.set to set a new property on an object, Vue detects the change, and if the property is itself an object, that object will now be reactive. 

However, as you've noted, you can't use a variable in v-model that doesn't yet exist, that's not about reactivity really. As intoxination mentions, I'd use v-if in these cases. ",1541107039.0
balls_of_glory,"props: { json: Object }

Am I missing something?  You shouldn't need to actually define the whole model. Or is the problem the size of the payload?",1541076789.0
ezio93,"Vue has allowed our company to do great things with it.

What I personally really love about it is openness of its abstraction layers coupled with its incredibly friendly developer-interface. Junior devs can easily pick it up and get going with most tasks. Senior devs can dig into the deeper layers of the library and really tap its true potential.

To be fair, we moved straight from KnockoutJS to VueJS so the difference for us was astronomical. That influenced the pitch to my boss to a certain extent lol, but Vue is still pretty revolutionary.",1541028791.0
ShetlandJames,"Poor bloke in the comments:

>We switched from VueJS to ReactJS!!

",1541023019.0
flyingmeteor,"Either #2 or #3 but with #3 you should create a computed property that returns your bound function. If you do `.bind()` within your render or template, then on every render your child component will receive a newly bound function.",1541008870.0
MrMaverick82,"Beautiful! Unfortunately I usually work with tailwind, so I prefer not to add another library. But for simple UI projects this could be perfect.",1540991857.0
fffam,"Nice! For a quick project this would be a really useful library.

I've spotted a few bugs, hopefully its okay for me to lazy report them here rather than open GH issues?

1) I'm getting a subpixel rendering glitch on the buttons: When hovering over a button so that it slightly enlarges, the button text is extremely blurry during the transition and any 1px border also becomes blurry during the transition. It makes the effect look really jarring because it snaps back to normal subpixel rendering at the end of the transition.

I changed the font to the default browser sans stack and it continue to happen. Some of the usual tricks (-webkit-font-smoothing:subpixel-antialiased, toggling backface visibility) also unofrtunately don't seem to fix it.

In GIF form (but its more pronounced than the GIF shows): https://gyazo.com/ad5ff9bc806e4c900386505a7c2ce122 and with the transition duration changed to 2s https://gyazo.com/dbbb6c4facf90e9e4a5d32a85fe7d775

Windows 10 Home  
Chrome Version 70.0.3538  

2) The dropdowns on Windows/Chrome are only showing the options when hovered/selected. Looks like /u/thasmog has already flagged this one, but I snapped a quick gif just in case it helps explain https://gyazo.com/7986914adcd4f28c36b085e9da5e3ff4

3) The resize grab area isn't showing up on the textareas",1541026796.0
Hectate,Looks good!,1541003271.0
rq60,"Maybe it's just me, but it seems like a poor separation of concerns to have a _theme_ tied to your component framework.  Seems like it should be a CSS framework.  Looks nice though.",1541009933.0
cyberst0rm,quasar-framework.org would be another framework to see if you could integrate there.,1541004348.0
thasmog,"Select input elements look weird on chrome. Only hovered value will be visible.

&#x200B;",1541004713.0
usercricket,Looks nice!! Now I want to redo my web theme with this. ,1541006904.0
djxfade,"This looks really nice. It just seems to be a small bug with the toggles on iOS Safari. When checked, there is a black outline around it",1541014232.0
ifkas,"This is great, needs more components :)

Keep up the good work!",1541058218.0
mvaneijgen,"Can you try adding a \`:key\` to your \`v-for\` loop. Eg \`<div v-for=""(item, index) in itemList"" :key=""index"">\` and to my knowledge you should use the getters function \`itemList\`. But same here not a really skilled Vue.js developer.",1540985798.0
moomeister,"I'd go with Nuxt (not used V2 yet) due to SSR.

Personally I've used it for static-site generation (Firebase as the database and hosting) and it's worked flawlessly.",1540974532.0
Maxtream,"You're comparing Command Line Tool with Web-app framework? Those are 2 different things. CLI is there to help you control your project, bootstrap it, configure it and remove repetitive stuff.  

Nuxt on the other hand allow you to go for VueJS webapp with prerendered option inside of it.  

Plain vue is completely find with prerender/rendertron. So if you don't want to write universal code, just go with those. On all of my project I use latest prerender and it works fine.",1540970011.0
yeahdixon,Nuxt allows rendering of your routes . This helps with SEO.  It also has its own way of organizing and creating Pages  in vue that many people like.  Both nuxt has a cli and vue have clis. So the big question is if you want to use nuxt or not.,1540971232.0
camoranns,"I did very well  using Nuxt, I used it together with laravel with this package:  https://github.com/skyrpex/laravel-nuxt, personally I think Nuxt  improves the organization in a bigger project",1542430392.0
penguingspe,I don't think there's any reason to use nuxt.,1540963330.0
ISNT_A_NOVELTY,"Nuxt forces you onto Node as your server, so don't choose Nuxt if that isn't a good option for you.",1541036709.0
ForScale,"Even without a central store like VueX, Vue doesn't really use controllers. It has no v-controller directive and you never declare a Vue.controller instance. Vue doesn't even describe itself as MVC, it describes itself as MVVM. The original docs went on about it: [https://012.vuejs.org/guide/](https://012.vuejs.org/guide/).

&#x200B;

You have a view (component or template), data, and methods. View is what you see, data is the model driving it, and the methods are what you use for dynamism and interactivity.",1540936635.0
,[deleted],1540938337.0
Incraigulous,I was unaware Vue had a concept of controllers. Can you explain what you mean by Vue controllers  for my benefit?,1540945323.0
CaptainInsane-o,"I think there are two different needs here.

Say I want a filtered list of names.  Well, I can do that with javascript easily through vuex and get the filtered list with a getter.

If I wanted a certain JSON structure to fit the needs for my display, this is where a controller could come in handy.  So if I get the data via an API, It should be returned how I as a front end need it.

So I think of it like this, a controller can be used ot do the heavy lifting since typically server side there would be much more computing power.",1540932508.0
ISBJ0RN,"That's just the way slot scope works, it gives you an object with access to the childs scope. If you add additional data to the child component you will see it becomes available in your ""test"" object too. So to access your child value of test either do what /u/maximsfw said above, or you can destruct the params from slot scope like this:

    <test>
        <template slot-scope=""{ test }"">
            <p>{{ test }}</p>
        </template>
    </test>",1540935290.0
maximsfw,"try {{ test.test }}

to access the value in an object, call the name of its key",1540934527.0
Jovaage,"It is an object, because that is what happens when you use v-bind.  
`:test=""test""` is the same as `v-bind:test=""test""`, which is in essence the same as binding `{ test }` to the scoped slot.  
This is so that you can bind more than one prop at a time.  
The recommended way to make use of this, is to destructure `test` out of the bound object in the `slot-scope` attribute, like /u/ISBJ0RN proposed.  
If that doesn't do it for you, you can instead do `v-bind=""test""`. Then `test` will be the entirety of what is bound to the slot.",1540940627.0
drewbeta,"I don't have much experience with Vue, but I have been working with Kendo for the last 2 years. Progress has been pretty good at returning support requests, so I would say submit a request for documentation (because I'm not seeing very robust documentation for their Vue implementation online). Even when I post on the forum I normally get a reply from an admin within 24 hours.",1540936768.0
i_ate_god,"> In general, this is a bad pattern because when you want to swap webpack for another module bundler the new bundler needs to supports this feature too. Since you cannot make sure that this is the case, we should remove this custom behavior and normalize it to the normal relative pattern.

relative imports are the worst thing for refactoring.",1540912743.0
AwesomeInPerson,"> In most of the cases, elements should be wrapped with the proper HTML elements. To know them all is really hard. But using a div or a span is better than using nothing in most cases.

Are you kidding me?  

You're a *web developer*, with enough experience and/or aspiration to think about how to best refactor components for readability and reuse, but knowing HTML is hard, just use some `<div>` and call it a day? Not to speak of how improper HTML can break Server Side Rendering...


> the curly braces are rendered if the value is not given yet. This can happen if you make HTTP requests to fetch data and is causing a bad user experience. With v-text , this can be circumvented. It also gives us the opportunity to self-close more elements which are generally recommended if you want to attract the JSX community.

I think `v-text` is way less readable in 9 out of 10 cases, especially because default syntax highlighting treats it like every other prop while moustache expressions are highlighted differently. The issue with visible curly braces can be fixed with `v-cloak` or your own solution (e.g. simply remove a pre-existing `.invisible` class once data is fetched).  
And are we developers or teenage girls, why is ""attracting the JSX community"" a priority while refactoring? And in JSX, unless you always use `dangerouslySetInnerHTML`, you can't self-close nodes with content anyhow, so the JSX developer you try to impress should not try to escape once he/she sees your end tag, lol.


Also, `eslint-plugin-vue` will yell at you for most things like missing prop types, using `v-for` without keys or wrong template formatting and indentation, no manual checks needed.",1540939705.0
visualbam,"So refactoring your imports.. you’re refactoring the import incase you switch module loaders somewhere in the future. Now, how is this “enhancement” benefiting us? Is using the prefix slowing down development? Is it preventing you from implementing some new feature? Is it making the code more readable? I don’t see any value in doing this now vs if a new module loader comes out in the future.. I would literally be doing the same thing.. except when I actually need to do it. Time is not only valuable but it’s expensive!",1540934567.0
Pyjamarame,"It's a good read, but I'm surprised it doesn't mention the eslint plugin for vue. With the recommended configuration it rise errors on the absence of v-key for example.",1540934307.0
Catalyzm,"When I use these frameworks with Vue I only use the Vue components for features that would normally require javascript/jQuery to function. For all the standard HTML I just use the regular Bootstrap etc class names.

I also couldn't guess to the why of it, unless there's some ability to tree shake the CSS so you don't need the full Bootstrap.css file?",1540914588.0
__neone,"What are you trying to solve for here? Let's say that you chose to use ""just"" Bootstrap CSS, and only standard HTML tags... well, now you have a Bootstrap app that is dependent on those specific CSS classes. Is that better or worse than being dependent on a library that roles in the CSS with some HTML/JS into a single component?

I think what you're asking for (and doesn't exist) is a ""meta API"" for all component libraries. Like, imagine there was a `tab` and a `navbar` and you could say `use bulma` or `use element` and auto-magically all your elements would take on the implementation of the imported library, maybe even falling back to a base implementation if it wasn't customized.

Failing that... you're in a situation where you sorta have to make some choices. You can choose to use a CSS library, and then you might think that you'd like to have the `navbar` as a component, so you write a `my-project-navbar`... is that really any different than `b-navbar`?

My view is that you need to make a choice to commit to a component library and go all-in with it, or commit to use best-in-class components where possible, and manage more of the HTML/CSS yourself in your components. For one project, I chose Element, I think it's robust, actively developed, and easy enough to customize to make it feel premium. For another project I chose Vuetify, I think that Material design is great for certain use cases and Vuetify does a great job.

I would like to see an even lower level library that is easier to customize the CSS for... but that's a hard problem to solve.",1540918789.0
Reashu,"Why? Because it makes the html and css classes an implementation detail that you can stop thinking about. 

It doesn't really tie you up any more than just using the html and css yourself (I would argue *less*, actually). It *does* come at a performance cost. ",1540920058.0
JohnMellor89,"I'm using bootstrap vue. I agree about the crazy components, I mostly use the plain HTML equivelant were possible (why do I need <btn-group>.

Some things really suck with it, such as tabs. You're much better off rolling your own tabs.

But the CSS is still great and you can import just the components you want. Off the top of my head I use modal, select, checkbox and tooltip. The size of what's imported is pretty minimal then.",1540924899.0
TheOffTopicBuffalo,So many components! It can make some of the dev tooling almost worthless because you have to drill so deep through conponents to find what you are looking for. I was helping a friend with a project that used vuetify and it was beyond irritating. ,1540956922.0
greatpier,"I had exactly the same issue with Buefy. Bulma already has a fully configurable html/css syntax. There is no need to re-implement everything in Vue again. Maybe some people like the higher level syntax, but I feel it's less efficient. It's why I decided to create my own Bulma ""bindings"" for my own projects.",1540995432.0
LEOtheCOOL,"Sorry if this is too rambling.  You will need to implement the back-end so that it can keep track of two different versions of the profile.  The back-end should return the approved profiles, but the models and the approvers should have another api to return unapproved profiles.  On the front end you will need some way to show the list of unapproved profile changes, but if you just use a route blocker instead of handling this in the back-end, you will need a separate route to handle the case where a model wants to see their own profile vs the case where the client wants to see all unapproved profiles.  Instead of simply having the back-end return all unapproved profiles that are visible to the user.  Basically.. treat unapproved profiles like an entirely different section of the site, and move the profile from the unapproved section to the approved section when they are approved.",1540912320.0
usx-tv,"This seems like something that would be handled more on the backend then the front end. I'm supposing there should be some kind of approved flag, and endpoints should only return approved one on the UI.

You would need an administration UI with roles that would be allowed to see unapproved one and change the state.

Nothing really to do with Vue at this point, until you have the various needed endpoints on the backend.",1540912304.0
fyzbo,"It seems like these two are contenders, does anyone have experience with them:

&#x200B;

[https://github.com/epicmaxco/vuestic-admin](https://github.com/epicmaxco/vuestic-admin)

&#x200B;

[https://github.com/PanJiaChen/vue-element-admin](https://github.com/PanJiaChen/vue-element-admin)

&#x200B;

&#x200B;",1540906285.0
ImReddit,https://semantic-ui-vue.github.io/#/,1540898757.0
miggadabigganig,"Don't even bother with the Vue semantic component library. It's buggy, very rarely updated and wont have all that you need. We just used the vanilla css library and it's worked out well. Make components when things get wordy. Element UI is also one to check out.

 ",1540901121.0
archivedsofa,"You just use the CSS, and implement the JS on the components that you need.",1540906923.0
BlamRob,"If you are focusing on Front-end Development, I always say... it's cool to keep up on what frameworks are doing. But find out what they're doing that you like and implement it yourself.

I keep a boilerplate that I start a site with. It originally started with the HTML5 boilerplate (many years ago), but I've added a lot to it (and removed some things). I have a grid that started as Boilerplate's flex grid, that I've made small changes to. I have a set of sass files broken up in to bits that I like, a reset file, variables, mixins, forms, etc...

The end result is very low overhead site. It doesn't have any mystery meat in there.",1540908538.0
manu_8487,Already thought about that too.,1540896522.0
percykins,">I understand that you should avoid using v-show within a v-for loop because it isn't reactive.

This is wrong - v-show, like everything else in Vue, is definitely reactive, inside or outside of a v-for. It may be that you've misunderstood something - v-show simply hides content but doesn't actually remove it from the DOM, so if you actually *never* want to show something and filter it right out, v-if is the way to go. In your case, however, v-show is definitely what you want, using something like what /u/__neone showed.",1540879628.0
__neone,"    <div v-for=""item in array"" :key=""item.id"">
       <div>
       <div v-if=""!item.hide"">
            CONTENT
        </div>
        <button @click=""item.hide = !item.hide>
       </div>
    </div>        ",1540877348.0
Reashu,"Are they really not reactive inside v-for? I've never needed reactivity in this case, myself, but it seems like a very odd limitation. ",1540878759.0
ForScale,"Let's see some code.

Seems :class=""{}"" might work.",1540879146.0
kelhen,Use js array.filter is an option too depending on your case,1540891710.0
ChypRiotE,"You may have misread, you should not be using v-if and v-for on the same element, but you can definitely use a v-if or v-show inside a v-for
See [vue-styleguide](http://vuejs.org/v2/style-guide/#Avoid-v-if-with-v-for-essential)",1540892314.0
mattisthenation,"There's a few ways you could do this, but I would lean towards using a computed property for your v-for so that the loop reacts when the data changes. Then you would add the class to the <content> depending on the value. It would be like using a filter without any filtering happening.

&#x200B;

Also, in your vue template, I would avoid using <title> for your tag as it is a standard html tag and could cause unforeseen issues

&#x200B;",1540904711.0
jeankev,"A nice rule of thumb for a start : always (and only) have a component inside a v-for, this way you can easily deal with a single id. In your case just declare a content_visible data in your child component and put your logic here. ",1540885799.0
manu144x,"I do this in a very simple way:

I use an index for the loop first of all.

Then what I do is I have an array under data, where I keep the indexes of the minimized ones.

Then in the loop I just do an index of > -1 or not.

It is reactive because the reactivity is triggered by the variable in which I keep the minimized state.

It's just a basic toggle, insert or splice the index from the array and that's it.",1540894159.0
RareYogurt,"Yes you're missing an obvious answer, vue.js is a component based framework, you'll need to make a component with its own logic `open: false` and pass the data through props. What you're doing is spaghet",1540881206.0
CaptainInsane-o,"> (such as in the contact component pictures for each contact) 

So you want the static image assets to live inside the component?  Can you give an example how?",1540828496.0
stencillicnets,also when referencing a css background with `background-image: url(@/assets/image.png)` it throws an error that no resource at `./@assets/image.png` could be found. When referencing the image with a relative path in my case `../../assets/image.png` it works as expected. Is there a prettier way to reference the asset's path?,1540828577.0
mvaneijgen,"I just got D3 to play nice with Vue.js, by reading a lot over the weekend and trying a lot of things out! I love that I don't have to create dom elements with D3 and just have my graph already laid out and just populated the shapes with D3. 

[Here is a demo](https://codepen.io/mvaneijgen/pen/BqEWya)",1540821590.0
CristiJ,"Here are some resources. They use Chart.js and vue chartjs.  
Demo: [https://demos.creative-tim.com/vue-black-dashboard/](https://demos.creative-tim.com/vue-black-dashboard/?_ga=2.69929360.1829024623.1540834096-1215692048.1510951128#/dashboard)

Repo: [https://github.com/creativetimofficial/vue-black-dashboard](https://github.com/creativetimofficial/vue-black-dashboard)  


This one is paid:

Demo: [https://www.creative-tim.com/product/vue-now-ui-dashboard-pro](https://www.creative-tim.com/product/vue-now-ui-dashboard-pro)  


They have charts for line chart, bar chart and pie chart but you can extend them to whatever you need I guess. If you're needs are charts oriented would suggest going with the free one and see if it's ok for you

&#x200B;",1540834283.0
darxkies,You should check out echarts https://ecomfe.github.io/echarts-doc/public/en/index.html. It works very well with Vue.,1540884280.0
retr0guylife77,We use buefy at work. The components that it gives out of the box has been very useful to speed up our development process. I encourage you to give it a chance!,1540819672.0
mitchill,"Buefy is a VueJS component framework based on Bulma, Bulma is a CSS framework. Buefy ships ready to use VueJS components like dialogs, inputs, calendar inputs, etc. while Bulma ships only the CSS required to create those elements.

&#x200B;

Buefy introduced an API change in a minor version (they used to export a \`Dialog\` object in the library to programmatically render a Dialog, but then refactored that functionality out) which broke an application of mine completely in production. I would not recommend using it on mission-critical software, but it should be fine for something like a prototype or smaller-scale app that won't result in explicit dollar-lost if it breaks. It is much better looking than Bootstrap and comes with a ton of additional components that Bulma doesn't have.",1540819589.0
bangorlol,"I use buefy for my admin panels some some of my frontend apps. It's been mostly reliable, but sometimes they ship with obvious bugs that slip through their tests.

Using third party UI components with Buefy and scoped styles can either be super easy or a huge pain in the ass to make it match bulma's styling (specifically on inputs). I've had to write quite a few custom components because of this issue.

That being said, the time I save by using buefy more than makes up for it. The scss setup makes things easy as hell to style things how I like.",1540825153.0
workandfocus,"Depends if you want to take that risk I guess, but Buefy seems to have been super active and updates quickly along side Bulma. 

Using it will remove a lot of the legwork of adapting the CSS to common JS functions. On the other hand, Bulma is so easy and intuitive it's not super necessary.

Ultimately it depends on your use case and is a decision you have to make for yourself :)",1540816711.0
edanceee,"I don't really see a point in buefy. Bulma is a css only framework, I had great experience just dropping it in a project.",1540817063.0
bathyscaaf,"We are using Buefy, but only to a degree -- most of our UI is just using Bulma + roll your own js/css interactions due to flexibility, but there are a few things we use (quite a bit) in a modular fashion.  We use their tables, mostly -- the card view on mobile is nice and they are generally more ""responsive"" than a lot of other options -- I think vue-bootstrap and quasar also offer card views of tables at ""mobile"" screen sizes, though in those cases I believe (not positive) that you're pretty much going to have to commit to using the entire framework (or at least including it in your package).",1540846119.0
tweettranscriberbot,"^The linked tweet was tweeted by [@youyuxi](https://twitter.com/youyuxi) on Oct 27, 2018 04:38:22 UTC (159 Retweets | 642 Favorites)

-------------------------------------------------

Ok I can’t really help myself… use hooks in Vue (via userland lib in under 100 LOC): [https://codesandbox.io/s/jpqo566289](https://codesandbox.io/s/jpqo566289)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1540807053.0
Incraigulous,Is the only purpose of hooks to expose state to functional components?,1540843393.0
imGnarly,"As u/lucuma says, look into computed properties, that's exactly what they're for.

[Here's a pen with an example.](https://codepen.io/anon/pen/XxGvbV)

Computed properties are reactive, and, though you might be tempted to use watchers (which Vuejs comes with out of the box), especially if you're coming from a framework such as Angular, as the Vue documentation says, most of the times you can solve everything with computed properties, which are less complicated.

Cheers!

edit: thanks, bot!",1540776610.0
archivedsofa,"Your data is fine.

Could you explain your problem more clearly?",1540769759.0
lucuma,"Look into computed {

fullname()
  return this.first + this.last; // whatever 
{
}

usage
<div>{{fullname}}</div>",1540768210.0
percykins,"In addition to what other people have said, I suspect the culprit for the problem you describe here ""sometimes they are null and other times all the friends for all the profiles change once I close the dialog form"" is because you're pushing ""this.form"" into profiles. This is a problem because profiles will contain a *reference* to ""this.form"", it won't *copy* it. 

[Here's](https://jsfiddle.net/mxwoLnur/) a fiddle example. When you click the button to add a profile, it appears above the text box... but note that if you change the text box, it still affects the profile. That's not what you want.

So what you need to do is construct a new object, and then fill it in with the ""form"" fields. So it's OK to do the following:

    var newProfile = {};
    newProfile.email = this.form.email;
    newProfile.firstname = this.form.firstname;
    newProfile.lastname = this.form.lastname;
    this.profiles[index].friends.push(newProfile);",1540801091.0
cyanydeez,<3 quasar,1540774294.0
ffffrozen,This is what you might be looking for: computed props and watchers [https://vuejs.org/v2/guide/computed.html#Watchers](https://vuejs.org/v2/guide/computed.html#Watchers),1540762462.0
cyanydeez,"i would open up a issue with vue-session and request they add events. the plugin is pretty simple, you could probably modify it y9urself, also.",1540774248.0
aaronksaunders,"The React Native plugins should work with vue-native.

For native-script according to the docs, [https://nativescript-vue.org/en/docs/getting-started/nativescript-plugins/](https://nativescript-vue.org/en/docs/getting-started/nativescript-plugins/) you just need to find a nativescript compatible plugin and you should be good to go.",1540755825.0
ENx5vP,"Vue.js evaluates lazy and [can't detect array or object changes](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) (will change in Vue.js 3.0). When Vue.js doesn't detect such deep changes, it doesn't update the view. With `$forceUpdate()` you force Vue.js to look for changes. It's considered a bad practice to use this method. There is always another way.

I would help you more but it seems you think your local environment differs from that link you posted. Can't say anything about that, I don't know your local environment. Maybe check it again at jsfiddle?",1540727162.0
archivedsofa,"If you have a reactive array in your component state, Vue will know when the array itself changes, but not when the items of the array change. The items are not reactive.

It's one of the limitations of Vue's reactivity system.

A solution is to use an immutable functional approach. You could replace the entire array when you change an element. So you do something like:

    // clone the array
    const items = this.items.sclice();
    //modify the item you want to change
    items[123].selected = true;
    // replace the complete array
    this.items = items;

Another approach is to replace a single item, and ""let know Vue"" that it has changed. You do that with [Vue.set\(\)](https://vuejs.org/v2/api/#Vue-set). Something like this:

    // get the item
    const item = this.items[123];
    // modify the item
    item.selected = true;
    // reinsert it
    Vue.set(this.items, 123, item);
    
For the sake of completeness you could also have a [watcher with the deep option](https://vuejs.org/v2/api/#watch) and do something when the state you are interested in changes.",1540746244.0
fffam,You should consider making it accessible or it will be difficult to use it professionally. Theres a good guide on accessible collapsible selections at https://inclusive-components.design/collapsible-sections/ which might inform your use of aria roles/attrs.,1540686055.0
Zeroeh,I like it! really nifty. ,1540681475.0
abaicus,"Don't want to burst your bubble, but... 

Basically v-show-slide?

[https://www.npmjs.com/package/v-show-slide](https://www.npmjs.com/package/v-show-slide)

[DEMO](http://v-show-slide.peterhegman.com/)",1540685574.0
petr31052018,"Vue.js doesn't use classes by default...

For me, the default way of writing Vue.js components looks MUCH better than the hooks alternative. And anyway, why change the way apps are written every couple of months? Seems like React community is always trying to invent something new...",1540674770.0
hhofstaetter,"What's the difference to this: https://github.com/xkeshi/vue-barcode/

",1540630412.0
drewsky2009,Does this do 2D?  Also- anyone gone through reading barcodes with Vue?,1540661845.0
duemu,You have to put your decoded html into the v-html attribut. See [https://jsfiddle.net/cthw40ub/5/](https://jsfiddle.net/cthw40ub/5/),1540588847.0
wafflelator,"> after getting pretty frustrated with vue-cli3

Why?",1540611829.0
Brahminmeat,Live Preview broken on Android.,1540578040.0
thexerdo,[The site is sooo broken.](https://i.imgur.com/E6N6M2P.png),1540619895.0
tonjohn,"While unlikely related to your core issue, you should probably use your v-html with a div instead of a paragraph. 

Your example html response contains an h1 tag, a block level element, which cannot be inside a p tag.

So change <p v-html=“content”></p> to <div v-html=“content”></div>",1540607978.0
GMSteuart,"So there is a solution to your problem, but I’m going to ask, would it be better to fetch only the data necessary to populate reactive elements rather than trying to grab an already rendered html block?",1540582866.0
budd222,"Try using a promise after your axios call before storing the data in this.content. .then()

Not entirely sure this is the issue, but I've never made a call with axios without using a promise",1540590886.0
BehindTheMath,"What exactly happens, and what's the issue? ",1540580028.0
GMSteuart,"Are you slotting in anything currently or trying to test out your default slot buttons?

If latter, I’m assuming your methods are not being called?",1540584494.0
brainbag,"This is a misunderstanding in how slots work! I've had an issue like this before with a slightly different context. 

The gist is, when slots are rendered, they're all within the context of the component that includes them. In your case, if `comment`, `text-editor`, `text-toolbar` or `button` emit events, those events will be captured by whatever component your sample code belongs to. (Maybe like a `Comments.vue`?) With your setup, you cannot emit an event in `text-toolbar` and hope that it is captured by `text-editor`, for example.

However! There's a workaround using scoped slots that pass methods. [Here's a full code sandbox](https://codesandbox.io/s/r1m14z4xqm?expanddevtools=1&view=preview) - the top example is what you're trying to do, and the bottom example is what you'll probably need to do. The relevant code is:

---

    <slot-container>
      <!-- pass sayHello from SlotContainer scoped slot -->
      <template slot-scope=""{ sayHello }"">
        <h1>Scoped slots</h1>
        <p>SlotContainer.vue will receive this emit</p>

        <!-- pass the event into the scoped slot method -->
        <slot-emitter @sayHello=""sayHello($event)""/>
      </template>
    </slot-container>

---

Here, the `slot-container` is passing a bound scope method `sayHello` to the slot, and when the `slot-emitter` emits an event, it calls the `sayHello` *method* of `slot-container`.

The Apollo Mutation Components of `vue-apollo` use this technique as well if you want a real world reference.",1540727078.0
SandFriend,"The Vue docs on watchers describe a good way to limit how often an event will trigger a data update: https://vuejs.org/v2/guide/computed.html#Watchers

Also sounds like your filter logic could potentially get to cleaned up a bit to combine some of those array filter functions. One suggestion: the list should be presorted before you attempt to filter it, so that sorting doesn't have to happen on every keystroke. Move the sorting logic into its own computed property / vuex getter if it's not already, then filter on that sorted array. 

Typically search functionality like this would be performed by your db behind an api so that you don't have to load tens of thousands of movies into client side memory and attempt to filter through them, so that could be something to strive for in the future! Good luck. ",1540570595.0
kasuriya,Google debounce,1540588144.0
tonjohn,"You’ll probably want to use Lodash Debounce. Here is the first article I found googling Vue debounce:

https://alligator.io/vuejs/lodash-throttle-debounce/",1540738181.0
brainbag,"> I have NO idea where the vue config file

It doesn't exist until you create it. In your project root wherever `package.json` is, just make a `vue.config.js` and Vue will pick it up.

> I would need a bit of guidance on how to get started with webpack + vue.

Vue CLI3 already comes with webpack fully configured in optimal development/production settings. That's one of the major values of Vue CLI3.  Unless you need to add custom plugins or change the `baseUrl` or something, there's no reason to worry about .

> imported my custom css file before those two

You should be importing all of your app scss/css ***after*** the bootstrap includes, or bootstrap will be overriding all of your styles. 

1. Your primary framework should always be included first.
2. Any third party CSS libraries (like notifications) should be included next.
3. Your site code should be last and final, so it can override everything else easily.

Personally, I prefer to have one single scss include in my `main.js` file, and then that stylesheet does all of the including. The JavaScript should know as little as possible.

    // main.js
    import './assets/stylesheets/application.scss'

Then you handle bootstrap there:

    // assets/stylesheets/application.scss

    // Variables (which can override bootstrap's variables)
    @import 'variables';

    // Frameworks - always before site code and other libraries
    @import 'node_modules/bootstrap/scss/bootstrap';
    @import 'bootstrap-vue/dist/bootstrap-vue.css';

    // Libraries - Always after the main framework, before the site code
    @import 'notifications';

    // Site-specific code
    @import 'site_theme';
",1540727872.0
NickJHS,"More concrete example, for example I have a b-navbar and I want to make all the b-nav-item to have a text color of BLACK. I tried attaching a class to it and then writing in my scss file, but that didn't work. I think it's because b-nav-item is like a component so maybe it works different. Thanks",1540571469.0
NickJHS,"I got part of my answer from this thread: [https://github.com/bootstrap-vue/bootstrap-vue/issues/1395](https://github.com/bootstrap-vue/bootstrap-vue/issues/1395)

&#x200B;

Check out tvld's answer for having your own custom sass file.",1540581425.0
cutety,"Why are there two separate codebases for web & mobile? I thought one of the major benefits of Quasar was that it was one single codebase for everything. Unless the web codebase existed before the mobile one, I just don't see why they're separate.

However, the good news is, there are ^(at least) two ways to accomplish this.

Using a mixin:

    // src/mixins/foo-mixin.js
    export default {
      props: {
        foo: { type: String },
      },
      data() {
        return {
          bar: 'bar',
        };
      },
      computed: {
        fooBar() {
          return `${this.foo} ${this.bar}`;
        },
      },
      methods: {
        updateBar(value) {
          this.bar = value;
        },
      },
    };

    // web/components/Foo
    <template>
      <div>
        {{ fooBar }}
        <input v-model=""bar"" />
      </div>
    </template>

    <script>
    import fooMixin from 'mixins/foo-mixin';

    export default {
      mixins: [fooMixin],
    };
    </script>

    // mobile/components/Foo
    <template>
      <div class=""mobile"">
        {{ foo }} {{ bar }}
        <input v-model=""foo"" />
      </div> 
    </template>

    <script>
    import fooMixin from 'mixins/foo-mixin';

    export default {
      mixins: [fooMixin],
    };
    </script>

Or you can use a renderless component:

    // shared/components/RenderlessFoo
    export default {
      props: {
        foo: { type: String },
      },
      data() {
        return {
          bar: 'bar',
        };
      },
      computed: {
        fooBar() {
          return `${this.foo} ${this.bar}`;
        },
      },
      methods: {
        updateFoo(value) {
          this.foo = value;
        },
        updateBar(value) {
          this.bar = value;
        },
      },
      render() {
        return this.$scopedSlots({
          foo: this.foo,
          bar: this.bar,
          fooBar: this.fooBar,
          updateFoo: this.updateFoo,
          updateBar: this.updateBar,
        });
      },
    };

    // web/components/Foo
    <template>
      <renderless-foo v-bind=""$data"" v-on=""$listeners"">
        <template slot-scope=""{ bar, fooBar, updateBar }"">
          {{ fooBar }}
          <input :value=""bar"" @input=""updateBar"" />
        </template>
      </renderless-foo>
    </template>

    <script>
    import RenderlessFoo from 'shared/components/RenderlessFoo';

    export default {
      inheritAttrs: false,
      components: { RenderlessFoo },
    };
    </script>

    // mobile/components/Foo
    <template>
      <renderless-foo v-bind=""$data"" v-on=""$listeners"">
        <template slot-scope=""{ bar, foo, updateFoo }"">
          {{ foo }} {{ bar }}
          <input :value=""foo"" @input=""updateFoo"" />
        </template>
      </renderless-foo> 
    </template>

    <script>
    import RenderlessFoo from 'shared/components/RenderlessFoo';

    export default {
      inheritAttrs: false,
      components: { RenderlessFoo },
    };
    </script>
",1540562178.0
Arkhenstone,I would simply do a template that works on both showing a part or the other depending of screensize. What if the user of your web app want to browse it in a small space ?,1540562591.0
brainbag,[Vuetify](https://github.com/vuetifyjs/vuetify/tree/dev/test/unit/components) unit tests have a little custom boiler plate (the `test` function) but are generally basic Vue tests.,1540577643.0
samdbeckham,https://gitlab.com/gitlab-org/gitlab-ce/tree/master/spec/javascripts ,1540592395.0
adstwlearn,"Hey - just added some unit tests to my [vue-cookie-accept-decline](https://github.com/promosis/vue-cookie-accept-decline) component. I used `@vue/test-utils` of course. They're pretty simple and straightforward so it should be helpful getting a foothold.

[Here's a link](https://github.com/promosis/vue-cookie-accept-decline/blob/master/test/VueCookieAcceptDecline.spec.js) directly to the test file.",1540618129.0
samdbeckham,Glad this helps 😀 Most of the components in the /JavaScript folder are Vue components. The web ide folder is a great place to look. I’m on mobile at the moment so I can’t point out any specific examples,1540599301.0
lenswipe,"Check out `vue-test-utils`. You can mount the component and then make assertions about what different elements contain and don't contain etc.

Don't use snapshots, they complicate things and encourage ""bad"" behaviour imo.",1540595675.0
adamchenwei,"hey, just made this one. hope it helps you a bit! Feel free to contribute!

[https://github.com/adamchenwei/vuejs-storybook-storyshot-jest-webpack-boilerplate](https://github.com/adamchenwei/vuejs-storybook-storyshot-jest-webpack-boilerplate)",1540580462.0
jeweltheme,"Basix Admin is the best and Complete example you're looking at. Analyze all components and files. You'll get real picture how Vue Component works.

[https://vuejsadmin.com/product/basix-admin/](https://vuejsadmin.com/product/basix-admin/)",1540576774.0
multiplegeorges,"That's a bunch of traffic for a small app, nice work! You clearly hit a need.

A lot of your data management and persisting can be simplified if you take a look into adding a VueX store and one of the persistence plugins, like vuex-persist.

    mounted() {
        if (localStorage.getItem(""activeMissions""))
          this.missions.active = JSON.parse(localStorage.getItem(""activeMissions""));
      }

This could be simplified to:

```
    mounted () {
        this.missions.active = this.$store.getters('activeMission;);
    }
```

",1540558484.0
toadkicker,Hey great job! If you need help or have questions feel free to PM me!,1540557640.0
miniMilton88,"Great Job!  Learned something new, and solved a need for yourself and others! ",1540563433.0
archivedsofa,"Old school here (started in 98). I've been focused on modern JS for the past 4 years or so.

If need help PM me.",1540564714.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/u_mrcat323] [Wow, awesome, should check out](https://www.reddit.com/r/u_mrcat323/comments/9rmg7k/wow_awesome_should_check_out/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1540572830.0
datlean,Sprinkle in some firebase if you want a free database and some user authentication. ,1540556702.0
0x4567,Can you show us your folder structure?,1540550222.0
miggadabigganig,Remove the .vue from import BirthdayToday from '../BirthdaysToday.vue';,1540555577.0
destraht,You can source them somehow in your webpack config and then use the DefinePlugin to pass them into JS.  The ones that you don't use will be minified out in a production build.,1540528301.0
AwesomeInPerson,"Add [dotenv-webpack](https://www.npmjs.com/package/dotenv-webpack) to your webpack plugins and pass it the path to the `.env` file you need.  

Will probably look similar to this in your `vue.config.js`:

    webpackConfig: {
        plugins: [
            new dotenvWebpack({
                path: path.resolve(__dirname, '../../../.env')
            })
        ]
    }",1540537030.0
jkuhl_prog,"I found one site that suggests adding a shell script to your build process: [https://www.simonewebdesign.it/how-to-get-environment-variables-in-the-browser/](https://www.simonewebdesign.it/how-to-get-environment-variables-in-the-browser/)  


You could also look at: [https://www.npmjs.com/package/browser-env-vars](https://www.npmjs.com/package/browser-env-vars)",1540528092.0
thinkadrian,npm dotenv and webpack defineplugin.,1540536627.0
Pyro979,https://i.imgur.com/IoVyWjt.png,1540561858.0
Pyro979,You can set the host somewhere in the ui. When I'm by a PC I'll look it up.,1540514363.0
theLorknessMonster,"Its not a warning, the client is waiting for a connection to the webpack dev server. I'm not sure why you're getting this message, I never see it for more than 3-5 seconds but clearly there is a problem with the communication between your dev server and the browser. Ensure that you are running the dev server on the correct host and port, I guess.",1540524335.0
manu144x,Why not just convert directly into Unix int and sort based on that?,1540515762.0
feihcsim,"https://youtu.be/Bohm6Yhaxvo

Edd Yerburgh is a pioneer in Vue testing",1540527605.0
johnorford,There's a Testing in Vue book which is really enjoyable to read (i.e. well written).,1540538705.0
TovarishFin,"For anyone else interested... I found this... which is at least a very light intro to testing with vue:

https://www.youtube.com/watch?v=vQ4A7EfAHOg

It includes some information on vue specific setup you need for running unit tests.",1540540450.0
usx-tv,Something like this maybe? https://github.com/mcibique/vue-testing-examples,1540541909.0
0x4567,"Honestly if you google things like “end to end testing vue js”, “unit testing in vue” you’ll find dozens of tutorials from medium, sitepoint, alligator.io, laracast etc. or even YouTube. ",1540500536.0
PaulJP,"The way I do that is using a Bus, with the component and bus watcher in the main App.vue page. **E** So you set the error details in the bus from your components, and the main component picks up those changes and does whatever with them. ",1540485087.0
ImReddit,"Use vuex.

Set an `error` on state somewhere.

You can then just watch that state, commit errors to it, clear it etc.

Vuex is what you want, instead of ""emitting an event that contains an error to display it"", you want to ""set an error"" and ""display an error""",1540495933.0
Mr-Silly-Bear,I know it's not best practice but you could use $root.$emit. this makes it pretty easy to call the Erie component from anywhere.,1540488833.0
CSEngineer13,"Hmm.. We have something similar, but it's mostly for rendering network errors caught in an `axios` interceptor.

I really want to caution against displaying _every_ error. Maybe start by adding `sentry` exception tracking and get a feel for just how many hidden exceptions are lurking in your code base? We have a production app that sees ~15,000 unique daily visitors, and it was eye opening.",1540496618.0
Agranok,"You may want to look into ""Error Boundaries"".  It is basically just a Vue component that has the `errorCaptured` hook.  Wrap that component around your other components and the errors will bubble up to it.  Here are the [docs](https://vuejs.org/v2/api/#errorCaptured) to the  lifecycle hook mentioned above.  Also an [article](https://medium.com/@dillonchanis/handling-errors-in-vue-with-error-boundaries-91f6ead0093b) I wrote about the concept awhile back.",1540502624.0
mmusket,"Awesome, thanks for sharing.

Are there examples/blog posts  of dotnetify used in production? ",1540502592.0
horusporcus,"Awesome, sounds like something I was looking for.",1540527608.0
MonkeyOnARock1,"Your components are usually quite nice, and this one is no different. It's nice, clean, and simple.

I like that there is minimal change in the size of the element as you change pages (i.e. going from page 9 to page 10, as the number ""10"" takes up more element space). Some pagination elements can change the size/spacing of the pagination element itself dramatically as you click the arrow  to go through different pages, and it drives me nuts. Your pagination element is designed nicely in this respect.",1540457568.0
Sir_Poot,"Have you tried the flat prop?


You also may consider vertical dividers.

https://vuetifyjs.com/en/components/dividers",1540437361.0
eamonbell334,"Use the `depressed` attribute for the button.

Example (from documentation):

``` html
<v-btn depressed color=""primary"">Primary</v-btn>
```",1540437428.0
liloow1,"I like the general idea and the amount of research you've made prior to actually taking the matter into your own hands!

That being said, unless you really have a massive array and your mutation is only altering one element in that same gigantic array (and even then thanks to how Vue cache stuff),  there is actually a simple and very short alternative :

```
  state: {
      arr: [{id: 0, key: value}, {id: 1, key: value},..]
  },
  mutations: {
    change:  (state, payload) => {
       // Consider a payload of type {id, key: newValue}
       state.arr.find(el => el.id === payload.id)[key] = payload[key])
    
       // So this is our generic function.
       // unfortunately, it doesn't trigger any reactivity actions 
       // Well you can simply do
       return state.arr = [...state.arr] // return isn't mandatory for this to work
     },
    }
```
No need for any complicated implementation or anything... And if you are worried about performances, know that Vue does a deepEqual with its cache before deciding to fully re-render something.

So if you are facing performance issues using this, it would rather suggest that you need to rethink your data structure rather than writing a custom module!

**tl;dr**: Initiative, general idea, motivations and documentation is great, unfortunately, the specific use case (unless I am wrong or missing something) is not as great!

Overall, Kudos! Looking forward to seeing your next idea!",1540448510.0
yeahdixon,How bout a description or at least something in read me,1540424951.0
jaxn,Why not just use the default slot to create layouts?,1540446091.0
tonjohn,"Vue doesn’t care what your backend is - it’s just calling API endpoints, right?

The formula I use is to host the frontend (Vue) on CDN (Netlify in my case) and then the backend uses Azure Functions.

Is there something more specific you are struggling with? For example auth - that’s always a pain point for me",1540416825.0
daamsie,"I have a couple of Vue apps that integrate with Lambda functions behind an AWS API gateway.   


Really, Vue doesn't care how the API is setup. It's like calling any API.   


One of my functions requires auth - for that I use JWTs.   


Important to note here that I only use the cloud functions for very specific things that are well suited to this and need to scale. The rest of my infrastructure is on a dedicated server.",1540428068.0
tonjohn,"Can you post your actual code or example code that demonstrates the issue?

&#x200B;

Here is a working example: [https://codesandbox.io/s/1ojoy5xln3](https://codesandbox.io/s/1ojoy5xln3)

&#x200B;

Hopefully my example is helpful. Let me know if you have any questions!

    <template>
      <section>
      <h3>{{username}} <span v-if=""this.hospitalName"">@ {{hospitalName}}</span></h3>
      <h3 v-if=""this.location"">{{location}}</h3>
      </section>
    </template>
    
    <script>
    export default {
      name: ""MyPatient"",
      props: {
        hospital: String,
        patientProfile: Object
      },
      data() {
        return {
          hospitalName: this.hospital,
          ...this.patientProfile
        };
      }
    };
    </script>

&#x200B;

    <template>
      <div id=""app"">
        <img width=""25%"" src=""./assets/logo.png"">
        <h1>Example 1</h1>
        <MyPatient :patient-profile=""{username:'tonjohn', bloodType:'AB'}""/>
        <h1>Example 2</h1>
        <MyPatient :patient-profile=""{username: 'bob'}"" :hospital=""'Sacred Heart'"" />
        <h1>Example 3</h1>
        <MyPatient :patient-profile=""{username:'tonjohn', bloodType:'AB', location: 'Bend, Oregon'}"" />
      </div>
    </template>
    
    <script>
    import MyPatient from ""./components/MyPatient"";
    
    export default {
      name: ""App"",
      components: {
     MyPatient
      }
    };
    </script>

  


&#x200B;",1540413690.0
,[deleted],1540407258.0
re_marks,The Vue docs has an even easier way to automatically register global components: [https://vuejs.org/v2/guide/components-registration.html#Automatic-Global-Registration-of-Base-Components](https://vuejs.org/v2/guide/components-registration.html#Automatic-Global-Registration-of-Base-Components),1540448450.0
adstwlearn,"Just pushed an update to my library [vue-cookie-accept-decline - github link](https://github.com/promosis/vue-cookie-accept-decline).

It's a simple component to let you show messages to your users, let them accept/dismiss or decline, and then store that selection in a cookie. Makes the whole process really easy. The new update adds a nice floating panel and the option to use multiple instances of the component on the same page. It's MIT licensed so go ahead and fork it if you like.",1540388039.0
letsjustbefriendz,"I've been moving over to PWA, saves space and generally more performance and responsive. ",1540388627.0
Djbm,"PWAs still suck IMO

The issue is the browser vendors (Apple and Google).

Until there is a way to get some basic control over fundamental controls like `input` PWAs are doomed.

Try and create an input with auto-complete disabled and install it on Android... Google has decided to ignore your auto-complete instructions. If your input acts as a list filter, you’ll now have a browser-injected suggestion list rendered where you don’t want it and no way to do anything about it.

Try and apply some custom styling to an `<input type=“search”>` in mobile safari and see how much fun you have.

Until the browser vendors give developers the control they need over simple html controls, PWAs aren’t going to work for rich applications.",1540428446.0
ShetlandJames,"Curious to hear from other devs here:

What's your number of apps installed in the past 6 months VS the number of PWA's added to your homepage? 

For me it's probably like: 

Apps: 5-10   
PWAs: 0",1540379206.0
Dnlgrwd,"You're correct. The function in your watch property will only fire when userId is updated, so clicking on the same user twice will not cause the modal to appear.

Personally, I would attach the button click event to a method in your Customers component that does the axios call to get the data, then send that returned data in as a prop to your View Customer component. This way you could get rid of the watch property.

I'm new to this, so I'd wait for others to chime in! ",1540357124.0
plong0,">Is it because once the watcher gets called it stops watching for that specific instance?

The watcher fires when the value *changes*.  Reassigning the same value it already has will not cause the watcher to fire.",1540360665.0
EclecticMind,You might want to try `this.$route` instead of `$this.route`,1540338229.0
JinSantosAndria,"Do you use something like https://kazupon.github.io/vue-i18n/guide/locale.html? The spa-prerender normally does not care what you do, as it just wraps the page in electron and saves the generated HTML. Just make sure that the locale part of the route sets the correct token => translation catalogue. That catalogue can come from a lazy loading JSON, imported es6 module or any other means. Just make sure the topmost component makes sure the current language is set and your good to go for spa prerendering.

On how to do it: vue-router should handle the language switching, something like `path: '/:locale' as root, then make sure that the router.beforeEach looks at the to.params.locale and uses your library switch to the correct translation catalogue",1540399371.0
stencillicnets,Mnot really proposing a solution but since i just started to work with vue I'm rather interested why you make the change to react?,1540330085.0
Downvotes-All-Memes,"Maybe ask on the react subreddit? Not trying to be tribal, but it seems like you're targeting the wrong audience here.",1540397551.0
1stKunoichi,What is the reason you are changing?,1540503803.0
usx-tv,"Some minor things:

- on `toDoInput`, you have scoped styles, yet nested classes. No need for nested classes if you're scoping the css. I'd also personally consider BEM.

- on `toDoItem`, you have a function `timeAgo`. I'd easily see this function extracted into a helper file, as it can easily be re-used elsewhere in the future.

- Your indentation on templates is not consistent. Sometimes 4 spaces, sometimes 2. `toDoItem` l.3

- You have trailing vue image asset

Overall the Vue side is good, just minor improvements that will make the codebase look cleaner.",1540393873.0
androiddrew,"I’m primarily a python developer, but a have an affinity fo vue. So take this not as an expert but a fellow learner’s feedback.

Overall, you have a pretty textbook application. Very glad to see that you have tests. I think you should add users/ auth now, then implement a real backend. The backend  interaction will add some complexity to your vuex actions and its worth figuring that out now. ",1540346342.0
Yajjackson,"This looks really great! I have a few suggestions that might improve the user experience.

1. Add some kind of indication that the system is searching for results, this could be anything from a simple rotating circle, to something more robust as talked about in [this awesome article](https://blog.iamsuleiman.com/stop-using-loading-spinner-theres-something-better/)
2. Consider using [staggered list transitions](https://vuejs.org/v2/guide/transitions.html#Staggering-List-Transitions) ([demo](https://codepen.io/afalchi82/pen/veKBYy)), I think they would help here a ton!
3. Don't forget to let the user know that the site wasn't able to find anything. Although as a developer it's easy to assume that the user will understand what a blank screen means when they search for ""lasdfkjhehelf"", it's generally good practice to include some explicit feedback. *What if you searched for a video on youtube and the only feedback you received was a blank screen?*",1540312354.0
SoulOfKrishna,php backend ?,1540319599.0
Dispersia,"Getting CORS when I try and use it

>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at r/[https://itunes.apple.com/search?term=tobymac&entity=album](https://itunes.apple.com/search?term=tobymac&entity=album). (Reason: CORS header ‘Access-Control-Allow-Origin’ missing).\[Learn More\]  
>  
>Unhandled promise rejection Error: ""Network Error""  exports r/[http://itunes-search.romanpaprotsky.com/js/chunk-vendors.9e80750e.js:14:62695](http://itunes-search.romanpaprotsky.com/js/chunk-vendors.9e80750e.js:14:62695) onerror r/[http://itunes-search.romanpaprotsky.com/js/chunk-vendors.9e80750e.js:14:106602](http://itunes-search.romanpaprotsky.com/js/chunk-vendors.9e80750e.js:14:106602)

&#x200B;",1540485115.0
manu_8487,"I tried this stack for my Vue.js app #2 and found it overly complicated. Too much magic, too many layers. I'm talking about the whole Amplify ""package"", not just Cognito. The documentation is sparse and Amplify seems to be merged from other existing libs AWS had before. Eventually I just used Django as backend. No vendor lock-in required.

This also allows you to use a cookie instead of the JWT token suggested here. With the problem being that every script on your site can steal the JWT token from localStorage. With a http-only cookie that's not the case.

If you still want to use AWS, they have a very comprehensive sample app here: [https://github.com/aws-samples/aws-amplify-vue](https://github.com/aws-samples/aws-amplify-vue)",1540344158.0
datlean,You could just use Firebase for authentication and database. It’s super easy to use. ,1540348023.0
Cyis,You mentioned you could remove the phone number from the Amplify SignUp page component... If you have a link describing how to do that I'd appreciate it as I've attempted to remove it unsuccessfully so I actually resorted to building my own authentication page components.,1540568141.0
JZumun,is this with vs code? I have a vue-cli 3 -based project as well and for me intellisense is working ok using jsconfig.json . Do you have a sample project with the issue you're having that you can share?,1540360869.0
garfonzo,">Do you build the backend as a simple ReST API and then build the front end and then fill in the gaps as you need more complicated models/relationships?

Yes. My go-to backend is Django with the Django Rest Framework, so may not be completely in line with your question. I will build a few models and basics API endpoints, and then build out the frontend to consume those endpoints.

>Should I build a Vue admin page that can CRUD a model and then build those routes in the backend?

If you need it, sure. It really depends on what your project is trying to do. If the end user will be managing data (like a set of contacts, for example) then just build the frontend that they will use to consume the Contacts API endpoints. no need for a separate admin page for that.

>Should I have one project folder split into ""client"" and ""server"" folders? Or two separate repositories (that's how I have it now to so i can deploy them easier)?

I always have two completely separate repos. I like to keep things clean and separate, with no ""cross contamination"" as it were. But to each their own. 

>Do you hop back and forth and iterate a small bit at a time so you can wire it from the backend to the frontend all in one go? 

Exactly like that, yup.

>Or are you experienced enough to build a fake frontend knowing what you will eventually need and then build out a backend to meet those needs?

Nope. I build the real thing (both ""ends"") at the same time. 

&#x200B;",1540353762.0
Hwarner03,Not exactly answering your question but If you are using Node backend and interested in creating a universal app you could take a look at NUXT. This helps you separate the Vue frontend from backend API into separate folders but ties it together in one app to make development imo faster. Also  will help with routing on the front end.,1540306628.0
endjynn,"> Do you build the backend as a simple ReST API and then build the front end and then fill in the gaps as you need more complicated models/relationships? 

As your front end will most likely dictate your back end API I usually code both together or the front end first with mock data.

> Should I build a Vue admin page that can CRUD a model and then build those routes in the backend? 

Only build what you're 100% sure you'll need.

>Should I have one project folder split into ""client"" and ""server"" folders? Or two separate repositories (that's how I have it now to so i can deploy them easier)? 

Either way is fine, whichever you prefer.

> Do you hop back and forth and iterate a small bit at a time so you can wire it from the backend to the frontend all in one go? Or are you experienced enough to build a fake frontend knowing what you will eventually need and then build out a backend to meet those needs? 

It depends on many factors. The size of the project, how well it's been scoped/documented before hand etc.  
However, even with an excellent documented plan you'll still find yourself bouncing back and forth to wire things up.  
Either way is fine, whichever you prefer.",1540307303.0
sv-2,Take a look at this boilerplate: [https://github.com/slanatech/vue-monorepo-boilerplate](https://github.com/slanatech/vue-monorepo-boilerplate),1540354554.0
Towerful,"NOTE: This didnt post last time, sorry if its a double post.

    axios
        .get('/api/post/' + this.postId)
        .then(response => {
    
            this.post = {
                ...response.data,
                ...{
                    created_at: moment(response.data.created_at),
                    updated_at: moment(response.data.updated_at),
                    last_comment_at: moment(response.data.last_comment_at)
                }
            }
        });

FTFY.

I make data defaulters, for lack of a better term. There probably is a library out there, but unlikely that it will fit your needs. Data can be quite difficult to generalise.  

Essentially a file of functions that take API data, and return an object that has the data generalised and default values filled in.  
I used lodash to make it very robust.  
Been a while since I've done some coding, but along the lines of (and the code here might actually be wrong, but it will give you an idea, hopefully!)

    export function DefaultUser(data) {
        return {
            username: _.get(data, 'username', 'Guest'),
            firstname: _.get(data, 'name.first', 'Guest'),
            registered: moment(_.get(data, 'created_at', new Date())),
            /* and so on */
        }
    }

then just use it as follows:  

    import DefaultUser from '../Models/Defaults.js';
    /* ... */
    get: function() {
        axios.get('/me').then(data => this.user = DefaultUser(data));
    }


It allows for one location (or directory) where all your transformers are.  

It allows you to easily change default data. You could make it process an array of objects easily (or make an array processor and pass in the relevant defaulter).  

You could even have laravel load in the model type, and create a super function that picks the correct Default function depending on the objects 'model_type' field, for example.  

Its easy to add in extra manipulations. These could even be extracted to reusable functions.  
using the date for example:  

    function GetDefaultDateNow(data, field) {
        return moment(_.get(data, field, new Date())
    }
    /* ... */
    export function DefaultUser(data) {
        return {
            username: _.get(data, 'username', 'Guest'),
            firstname: _.get(data, 'name.first', 'Guest'),
            registered: GetDefaultDateNow(data, 'created_at'),
            /* and so on */
        }
    }",1540305023.0
JZumun,Sounds like in the parent component u have a line like `data.username` where `data` (or whatever variable you used) can be null or undefined. Add null checking there and the warning should go away. ,1540270094.0
PinkyWrinkle,"Without seeing your code, I can think of a couple ways to deal with this -- who knows which makes sense with your app.

wrap your {{ username }} in an if statement
<p v-if=""username""> {{ username }} </p


or maybe something like this

{{ () => { return username } }}",1540268423.0
gabdelacruz,"It's hard to help you without showing your code. But if it's a 'prop', then you can use default values or prop validation.",1540289051.0
juanloco,"Hard to tell without looking at the code but seems you need to not render the element unless the data has been passed. 

A simple v-if=“foo.username” on the relevant part of the child component template should work. 

Again, just guessing here. If you have code. Please post it. ",1540291532.0
intoxination,"Do you realize, even with your fix, you are creating an ENORMOUS security vulnerability? Anything within HTML attributes MUST be encoded. If switching from double to single quotes is the fix (or even single to double), that means you have an attribute that is not escaped and need to go back and look.

  
In Wordpress this is easy with the [esc\_attr](https://developer.wordpress.org/reference/functions/esc_attr/) function. Just wrap your json\_encode in esc\_attr() and then the type of quotes won't matter.  If you're using plain old PHP you can do this:

    echo htmlspecialchars(json_encode($my_data), ENT_QUOTES, 'UTF-8'))

Even if this is a project you are doing for just yourself and don't think people will be able to get in and do naughty things, it's still best to get used to doing proper escaping. 

&#x200B;",1540241673.0
thinkadrian,Use the Wordpress JSON API can call for data with AJAX.,1540236831.0
,[deleted],1540237650.0
manu144x,First you are starting the quotes but you are not ending them :),1540240032.0
ShetlandJames,"We use Vue/Symfony at work, and we were strangling out an older, shittier part of the code and opted for Node/Nuxt - but it felt pretty unstable and we weren't comfortable using it for an important part of the site. We ended up just going back to using Symfony for SSR. Hopefully Nuxt 2 will be an improvement. I think we'll look at it again in the future. ",1540227248.0
theZeteWhoDied,"I'd still use @vue/test-utils and Jest. Even if you're only calling your component's methods, it's still helpful to have the context of a Vue component. For example, if a function is supposed to reference internal component state (data property), all of that is properly bound within the context of a shallowly-mounted component generated with @vue/test-utils. Try getting started here: [https://vue-test-utils.vuejs.org/guides/getting-started.html](https://vue-test-utils.vuejs.org/guides/getting-started.html)",1540222620.0
enkafan,if these functions aren't coupled to the components then the most effective would be moving them into their own module and unit testing it and not worrying about vue at all when testing.,1540222771.0
Robodude,"You can also consider just testing your components with any js testing framework but treating them as normal js objects. 

So that you'd do something like this

    import Component from './Component.vue'
    ...
    const context = { $emit: jest.fn() }
    const payload = ""whatever""
    Component.methods.clickHandler.call(context, payload)
    expect(context.$emit).toHaveBeenCalledWith(""clickHappened"", ""whatever"")",1540305501.0
DOOMitru,I'm not aware of any online courses that combine [Asp.NET](https://Asp.NET) Core and Vue.JS but there is a book that I found (and bought for $18 USD) called exactly that ([Asp.NET](https://Asp.NET) Core 2 and Vue.js) by Stuart Ratcliffe.  I found it quite useful.,1540222003.0
streeeeeeeet,Shawn Wildermuth has a course: [https://courses.wilderminds.com/p/vue-js-by-example](https://courses.wilderminds.com/p/vue-js-by-example),1540232852.0
estevanj,But create an api with asp.net core and a separated vue app that consumes the api. This approach is better because the vue app uses the cli and you get all the updates. That's it.,1540242642.0
discohpig,"Just checkout the MSDN SPA templates. 

https://blogs.msdn.microsoft.com/webdev/2017/02/14/building-single-page-applications-on-asp-net-core-with-javascriptservices/
",1540329612.0
ssp0929,"Either use a router to hit a login route first that does all your login stuff before pushing the regular app route. Use beforeEnter to run your login logic.

...

Or setup a watcher on a vuex storeval. Trigger your login logic in the created() hook.",1540211120.0
Arkhenstone,"In JS, your login is asynchronous. It means that in order for anything to be called after, and only after an asynchronous call, is to put code in the callback. For example, on mounted hook, I would do all actions that goes before the login (if there's some, like a loading) then call the login, and run a function that do everything that needs to be logged in the callback of the login function (and dismiss the login).

Remember this : the only way to ensure something comes after an async call, is to put the code in the callback. ",1540213830.0
fistyit,Do it in mounted() for app? ,1540201019.0
Mekhami,"in App.vue, or whatever your highest-level component is, you can define it in the <style> tag  under the #app id.",1540155153.0
n_0ir,You can include is as usual with a link tag,1540156680.0
zeroskillz,We have Cordova options in our vue cli plugin. I'd suggest checking it out and coming to the community if you have questions. https://community.vuetifyjs.com,1540145442.0
seamouse3,"Use the [Vuetify](https://github.com/vuetifyjs/vue-cli-plugin-vuetify) cli plugin, with the [Cordova](https://github.com/m0dch3n/vue-cli-plugin-cordova) plugin. ",1540153657.0
aaronksaunders,"another option - https://vue-native.io/
",1540220568.0
zmasta94,Put it in to an Ionic 4 project ,1540150512.0
finroller,"Add some debugging code to your createPost method. Check it gets called and check the value of this.posts after the async call. You should probably install vue dev tools for chrome to be able to peek into the variables, but you can also use simple console.log.",1540135267.0
thickoat,Add a form tag around the button if you want a full native reload,1540161555.0
Brahminmeat,"1) grab a set of random users
2) insert winner at 5th place (or wherever)
3) start animation, scroll right to winner",1540184238.0
flyingmeteor,I've been using Vue since before v1.0 and this just blew my mind. Great tip!,1540155879.0
morficus,Are there a lot of folks that just this functional (aka: JSX) style components? Is it just a personal preference thing?,1540187961.0
inhalingsounds,Can you give examples of where those functional components would be better than using regular ones?,1540132648.0
so_lost_im_faded,"I always use only one Vue instance and develop clean Vue.js SPAs, no server-sided rendering.",1540120170.0
PissBlaster2k,"Finally, been sick of all the dishonest Vue questions lately!",1540123308.0
_3psilon_,"""Export default obj"" doesn't create a Vue instance, only ""new Vue"" does.

If you can make a complete hierarchy of pages/components (eg. with a router) then only one ""new Vue"", one root instance is needed.

Multiple instances may be needed when Vue is only used on part of the webpage e.g. when the main framework is not Vue but you'd like to embed multiple components, or when you just want to create some nice widgets with Vue.",1540120506.0
ryan_developer,"There isn’t a min or max. It all depends on the parts of your application. It might make sense to break up instances by domain: profile management, checking out, searching, messaging, etc. if you have different people working in different areas of the application, they might all have their own instance that binds to a specific section. Your application may also just need one.

And as a side note, components are all new instances.
",1540134293.0
finroller,That depends on some CSS right? You might want to elaborate on that in the readme.,1540119766.0
1_eyed_willie,"thank you, this is awesome!",1540274335.0
esquinato,Thanks! I’ll check this out,1540152728.0
ameo02,"1. how to search per everything?
2. how to search per email | adress?

like if one could use switch to choose per what to search.",1540155470.0
zeroskillz,"Some of these are good but some are just bad advice.

* Q6 - That is how to build an application not deploy it
* Q7 - Registering a component needs way more context, such as showing your component import
* Q10 - No idea what the purpose of this is
* Q12 - Should explain that this requires the use of `vue-router`
* Q20 - Using a global bus was only useful when upgrading from v1.0 to v2.0. Even for smaller applications it is better to simply use `vuex`

",1540097976.0
n0phear,I would never asked this.  I would prefer to see a component created and available on GitHub.  Have a general discussion about decisions they made.  I would probably ask them if they liked vuex and why.   ,1540100050.0
technicaldemon,Perfect timing. Trying to get better with Vue and also interviewing with a company that's pivoting to Vue. Thanks!,1540086954.0
ronaldtveen,Q16 about Angular Services comes out the blue. What if there is no experience with Angular or other frameworks/libraries but in-depth knowledge of vuejs?,1540119306.0
ShetlandJames,"Q5 I think it's best practice to do it like:

    props: {
       <propName>: {
            type: <Proptype>
        }
    }",1540123011.0
percykins,"The ""@"" commands are for events that occur *inside* that component. So the ""showModal"" in this line:
    
    <ShowCustomer @showModal=""view(props.row.id)""></ShowCustomer> 

will only be triggered when you call ""$emit(""showModal"") inside ShowCustomer's code. Emitting is for communicating from a child component to a parent component. So that's not what you want. 

What you'll want to do instead is pass the user id into the ShowCustomer dialog like so: 

    <ShowCustomer :user-id=""selectedUserId""></ShowCustomer>

Then in the button you'd have something like:

    <button @click=""selectedUserId = props.row.id"">

Finally, inside of ShowCustomer, you'd have a watch function:

    watch: {
        userId: function(newValue) {
            // your axios stuff
        }
    }
",1540080104.0
foyy,"If you haven’t yet, look into event binding. ",1540080099.0
connor11528,"You can use an event bus:

https://blog.jscrambler.com/communicating-between-vue-2-components-and-google-maps/

https://link.medium.com/XyXDlq6wbR

",1540091812.0
armmm__,Use an event bus.,1540098191.0
Reashu,"I'm not fully following how your components are linked together, but there are at least a few problems here.

* The modal cannot listen to events from the buttons, since the buttons are not contained in the modal.
* The listener in the ""root"" component cannot call the ""view"" method since it is defined on the modal.
* You don't have access to the ""id"" prop in the event listener, instead you need to extract that data from the event (since you *are* adding it as event data)

Move the ""view"" method to the root component, update it so that it extracts the id from the event instead of trying to pass it in directly in the template, and make it set some data on the root element which is given to the modal as a prop.",1540104388.0
inhalingsounds,"It is impossible to answer without knowing the project. You will most likely need to tweak things a bit if you have auth set up, so it can sync your client and server seamlessly. Other than that things are pretty straightforward, and there are tons of tutorials for you to learn the basics (depending on the language you currently use).",1540064274.0
r4ymonf,"If you hit the login endpoint then that's how they know you logged in from a different place.

They use JWT for the most part.",1540298001.0
eindbaas,"A server can see a client's ip-address, that's all you need. ",1540019111.0
oscarteg,What the other dude said. Store ip addresses and check if the IP address is known. ,1540037345.0
thinkadrian,"It's a good question, but too broad. You can ask r/discordapp what authentication frameworks they use.

Auth0/Passport is otherwise an excellent framework.",1540039976.0
TheElix,"I'd do something Like this:
Try the login, if a certain cookie is set and it's stored on the server database the device is known, otherwise it is unknown and we should send the confirmation email",1540073097.0
chovy,You need to emit an event ,1540012293.0
plong0,"Someone already mentioned to use events for child to trigger action on parent, but to answer your question about scoped-slots...

Slots in general are for passing components from the parent to the child.  Scoped slots allow the child to inject props (data) into the components it receives from the parent.

https://vuejs.org/v2/guide/components-slots.html",1540013469.0
yg64,The scope of this inside your axios callback is different than outside it. Try using an arrow function instead. It should work.,1539994945.0
penguingspe,Use an arrow function or bind.,1539995178.0
ENx5vP,Maybe this helps you: https://github.com/ndabAP/vue-sails-example/blob/master/frontend/src/components/help/Help.desktop.vue,1539999867.0
stpf7957,"We use signalr (but that may only work if you use aspnet core on the backend) and have specific components that use web sockets, while others do not. If you use c# on the backend it might be worth giving [signalr](http://signalr.net) a try.",1540040853.0
manu_8487,There is a vuex integration for websockets. Don't know the name right now. It triggers actions on incoming WS messages. I used that for an auction test app.,1539996679.0
fullheap,Maybe someone on /r/https can help.,1540043261.0
eindbaas,Does it have a template or render function?,1540018778.0
syropian,A demo or at least a gif of it in action would be nice.,1539971142.0
finroller," 

    v-model=""selectedValues"" :selected-values=""selectedValues""

Hmm.....",1540031046.0
manu_8487,Kudos for not using a jwt token.,1539996961.0
johnnyaardvark,"This would be much more accessible by styling input type=""checkbox""s and label elements.  Recreating what are essentially form elements with divs means you need to build your own keyboard focus, keyboard listeners (just listening for @click isn't OK), aria-roles and then also apply all of that to your labels. And even then the ARIA-tree probably isn't going to be right. Use what the browser already gives you.",1539964741.0
isakdev,"I don't think divs make good switch buttons.  
You can have an onClick listener on anything but buttons are buttons for a reason.  
Semantics matter, and these div buttons won't do well with screen readers and other accessibility issues.   
",1539966259.0
Brachamul,"Hi there !

In my humble opinion, you should not use switch buttons in this scenario. The checkbox is a far superior UX pattern, as it is much clearer. There is no ambiguity as to the fact that the box is checked or not. There is, however, ambiguity on whether your switch button is on or not.

Switch buttons are cool if there are options on either side of the button, and you have to choose either one of them. They are not cool as a replacement for the checkbox pattern, which is great and universally understood (=intuitive).",1539970866.0
HFoletto,"Really nice, Vue is great!  
Maybe you could consider using Vuetify, which provides many UI components, including a very interesting and easy to use [Switch button](https://vuetifyjs.com/pt-BR/components/selection-controls#example-switches-boolean)!",1539959566.0
Parasin,Looks great! It does give a bit of a jarring animation though; a kind of “flashing” effect as the switch is toggled.,1539961065.0
fryktelig,"Cool, I like it when people make UI themselves instead of using libraries, but the edges on some of them look a bit scruffy in the off state here on Safari: https://imgur.com/a/4kNGfiM",1539962197.0
crescentfresh,"What does `:style=""{'--color'` do? What is that dash dash all about?",1539969955.0
stevefan1999,"Cool, but you shouldn't reinvent the wheels. Try vuetify for example.",1540010027.0
eindbaas,"Not sure how that library works, but there probably is a reactive property somewhere that contains the data.if you watch that, you can emit it when it changes.",1540019329.0
thinkadrian,Have you tried asking in a minio forum?,1539949194.0
benjamineich,"Maybe you could create a route alias/redirect for that special transitions. 
https://router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect

Then you might be able to catch that the special transition is desired and either start the transaction (alias) or remember to start the transition when you eventually hit the redirected route.

Alias would have the disadvantage that the same content is available under different urls.

I never did that but this would be my first approach. I hope it helps.",1539948720.0
,[deleted],1539951649.0
kaelwd,"> Vue offers no ad-hoc way of stuffing extra data into a route

I swear I've used `:to=""{path: '/page', meta: { something }}""` before, but it doesn't seem to work any more and I can't find where I did it. ",1539966555.0
Aterbonus,"If you use router-view inside a transition component, you can change the name prop of the transition before a router.go",1539969087.0
Lemmings4Friends,"I'd say using the referer [sic] header in HTTP is what you want. Then you can store state of the previous page upon navigation, and it is in HTTP standard, so won't change being supported ever.

Another very simple option would be to have a service class in just pure JS, which has a stack that is populated with the extra data pre-transition, then processed/cleared on transition. That would amount to under 50 lines of javascript, be very light weight, and very understandable.",1539963188.0
piratbodil,"The [Vue docs](https://vuejs.org/v2/examples/grid-component.html) have something similar, not sure if that's what you're looking for",1539981603.0
oscarteg,"This is the exact same tutorial as https://snipcart.com/blog/vuepress-tutorial-vuejs-documentation 
....",1539937465.0
samdbeckham,"We use bootstrap-vue at GitLab. We’re slowly incorporating it into our UI component library

https://gitlab.com/gitlab-org/gitlab-ui",1539902428.0
yioshie,"I prefer Bulma over Bootstrap, it's easy to use and doesn't need JavaScript.",1539922234.0
percykins,"I can't speak for bootstrap-vue - I will say that I'm using [vue-strap](https://github.com/wffranco/vue-strap) in production and it's working rather well, although we did have to make some minor changes. It's not very well organized, though - we're actually using the ""wffranco"" fork because the original ""yuche"" fork just wasn't well maintained. Vue-strap is Bootstrap v3, though.",1539898317.0
Mekhami,"On the content itself, i think it would have been nice to include e2e tests as part of your workflow. A common web development TDD process would be e2e test (cypress, nightwatch, selenium) failing, unit test failing, code till unit tests passing, verify e2e test passing, refactor, commit. the e2e testing allows you to write your user stories which guides what you're writing for your unit tests and code.

But that's super strict TDD, where the test has to always describe what the application does as well as what the code does.",1539880531.0
Mekhami,There's quite a few misspellings/wrong words. I can proofread this for you later if you're interested.,1539880346.0
Dokiace,"I'm interested in how can I test a webpages, I'll be seeing this part through the end.",1539933698.0
hugo__df,"Vuepress is a good shout since you can use markdown and Vue components within it.

&#x200B;

As far as I understand it, Vuepress doesn't compile the markdown + templates to HTML/JS/CSS on the fly. So to leverage it you would need to drive your editorial process through a CMS that integrated with git.

&#x200B;

Luckily for you, there is such a CMS: Netlify CMS. Using that + Netlify Identity you can have a hosted CMS backed by git with authorisation for multiple non-technical users.

&#x200B;

&#x200B;",1539875061.0
sajapan,"&#x200B;

There are a few pieces to what you want to do, so I'll tackle each one in turn:

# Live editing Vue templates / components

There is a version of Vue with the full compiler. It's not the one usually shipped because it's heavier in file size.

This project uses the full compiler to show code + live preview side by side:

[https://github.com/QingWei-Li/vuep/](https://github.com/QingWei-Li/vuep/)

I would recommend that approach only for the editing UI.

# Rendering the site for visitors

Depending on the needs of your app, you'll want to investigate how you'll display the pages to users (as opposed to the editors). One option of course is just to use Vue components / JS inside a page of a standard web app in Rails or similar. So you're not ""full-stack"" Vue but rather using it just where needed for the dynamic content and quizzes.

NuxtJS and VuePress are unique in that they compile entire static sites and do not need a web application. Running your app on Netlify (or similar) with a cloud database like Firestore or AWS App Sync may mean you don't need servers.

# Markdown

VuePress sort of stands alone in its ability to embed Vue components in markdown files as you've described. Nuxt, for example, has modules that will load markdown, but only for it to become static HTML inside of an existing component. It can't resolve new components inside the markdown it loads.

VuePress \_does\_ have a nice local editing experience with instant browser previews. However, that would require some familiarity from your editors with text editors, Node, and the command line. If you want it to be an in-browser experience, you'll need to have a process that starts with markdown conversion (there are many JS libraries available for that) and then passes those results to something like Vuep above to use inside a template.

&#x200B;",1539894882.0
Downvotes-All-Memes,"The Vue.js Cookbook has a great example of this, you'll just have to adapt it to your own data source but the pattern is there:

https://vuejs.org/v2/cookbook/serverless-blog.html#Display-posts",1539867962.0
eindbaas,"Maybe i'm overlooking things but cant your page or component just have an internal page-index property? Click a button, it updates, you watch that prop for changes and retrieve new data for the new page.",1540019536.0
stpf7957,"Check out vuetify, it’s super useful and they have [data-table](https://vuetifyjs.com/en/components/data-tables) components that come prebuilt with this kind of thing. ",1539866932.0
Catalyzm,"You're close but you need to take in 2 values, convert them both, and then compare them

     customSorting: {
                        TotalPaid: function(ascending) {
                                return function(a, b) {
                                    var numA = parseInt(a);
                                    var numB = parseInt(b);
                                    if (ascending)
                                        return numA >= numB ? 1 : -1;
                                    return numA <= numB ? 1 : -1;
                            }
                     } ",1539831115.0
imGnarly,"Can you use lodash? `_.sortBy(array);` will do the trick. You can also use collections (lists of objects), in which case `_.sortBy(array, i => i.prop)` should work. In that case, `prop` is the object property by which you would like to sort.",1539829801.0
Brahminmeat,"I think you may be overcomplicating it in this case. There doesn't appear to be multiple catch-alls in the example you provided. Instead, GitHub likely organizes their routes like so:

/features

/Vuejs

/:slug

*

Always start specific and fallback to the more general routes in order.",1539787689.0
coskuns,"The vue router doesn't support very complicated cases. However, it does support enough complications. So, in case it doesn't support what you want to achieve, I suggest you re-consider the way you want to achieve it since it might be wrong. 

I'm not saying everything vue router doesn't support is a wrong approach. It is a library after all and might not support all the cases. 

Just saying that it is usually us, the developers, who over complicate the things. ",1539811092.0
Demivan,Have you considered using dynamic components? Point all routes to one wrapper component and inside choose which child component to render.,1539787927.0
Wingelote,"Vue pwa uses workbox library to cache files.I suggest you to take a look to the documentation.

Here is how workbox is precaching files (in production mode)[https://developers.google.com/web/tools/workbox/modules/workbox-precaching](https://developers.google.com/web/tools/workbox/modules/workbox-precaching)

And how to use WB with webpack

[https://developers.google.com/web/tools/workbox/guides/codelabs/webpack](https://developers.google.com/web/tools/workbox/guides/codelabs/webpack)",1539784850.0
Demivan,"If your app is SPA you need to customize workbox in pwa plugin. If you use GenerateSW mode (this is default) you need to set navigateFallback option.

  


PS: Never cache service-worker or cache it for short duration using http headers so you can update it. And never cache service worker inside service worker because you will never be able to update it :)",1539789688.0
ImjusttestingBANG,Are  you perhaps using v-model which is updating the vue then closing the box? If so use v-bind instead.,1539779388.0
ifkas,"I guess, what you want is that after user signs up, you need to create a new document with the userid? And inside that document have other collections (or as you say fields)? Check this: [https://stackoverflow.com/questions/50086515/firebase-document-for-each-user](https://stackoverflow.com/questions/50086515/firebase-document-for-each-user)

&#x200B;

Also follow Frank van Puffelen, his answers about anything firebase related are always very precise on stackoverflow.

Hope this helps.",1539784746.0
Catalyzm,"If the library has a version packaged for the browser, like a CDN version, then you can add that to the page using a script tag. Whatever is exposed by the library will be available in your other files like your Vue components in the global namespace.

So you won't import it, you'll just use it as if it was already imported. For example if you add a script tag for jQuery to your page then you can use $.whatever() in you Vue code without doing anything extra.

Linting might complain about undeclared code, like ES Lint might give you a no-undef error. You can fix that by adding values to the linting config under Globals. https://eslint.org/docs/user-guide/configuring#specifying-globals

",1539740330.0
aesamattki,Why won't `import` work?,1539735866.0
thinkadrian,Please don’t write three question marks in a row. Makes the title look like spam.,1539760159.0
percykins,"Your problem is quite simply that your code doesn't insert anything into anything. You create a *new* array which consists of your old array with the element in the middle, but you don't actually do anything with that array besides log it. 

Instead of doing the whole incredibly complicated ""insertIntoArray"" function, simply replace the call to insertIntoArray with ""arr.splice(0, 0, newArr)"". [Here's](https://jsfiddle.net/fmpnhz59/4/) the updated fiddle with that.",1539714079.0
austencam,"Nice job on making a package! It's a great step in understanding all of this npm magic we often take for granted. However, why would you want to initially hide those fields from your users? Does that affect autocomplete?",1539713104.0
kwartel,"Awesome package, but I noticed a small bug in the demo. It seems the name field is a number field, because on my phone it showed the number block for input.",1539724418.0
ENx5vP,You should use a linter and write tests.,1539738321.0
usx-tv,"Using tab to get to new fields doesn't work.

Consider accessibility for screen-readers as ",1539861763.0
techmighty,Strings arent being interpolated in edge. weird behaviour in edge mobile browser. ,1540371402.0
CaptainInsane-o,"// this one imports the base bootstrapvue dependency

    import BootstrapVue from 'bootstrap-vue'



// this imports the base bootstrap css file

    import 'bootstrap/dist/css/bootstrap.css'


// this imports the vue specific css file

    import 'bootstrap-vue/dist/bootstrap-vue.css'


// this registeres the component on the Vue instance

    Vue.use(BootstrapVue)


Basically, the css files are dependencies of BootstrapVue.  For BootstrapVue to work right, you will need them. ",1539707153.0
Reashu,Bundle your application with something like webpack so that all dependencies are included. ,1539707746.0
1_nude_dude,"Vue cli uses single-file-components. It’s another way to declare components, it gives your project a better structure to work with. 

Read the guide:
https://vuejs.org/v2/guide/single-file-components.html",1539692109.0
Arkhenstone,"I've seen that layout on pi-hole administration pages, it's neat !",1539699174.0
thinkadrian,"You don't need extra state management if your app is that shallow. But you don't need two versions of the data either - it'll create hell for you when there's a mismatch. Have core data, and a function that filters the data and returns a new object/array that the renderer will use.

Also do come up with a clever way of caching the computed data so your app/component doesn't re-render if the data hasn't changed.",1539681276.0
toadkicker,"If you are writing it TDD style I would give yourself six weeks. It is always better to over estimate and exceed the goal than under estimate and miss it.

Come up with a project plan by scoring your goals from major to minor. The major ones should be weeks-end goals while the minor ones are more specific tasks.

Think small, win small.
",1539664927.0
penguingspe,Minimum 1 month. I'd charge him 20k/month.,1539664895.0
Balduracuir,"From my experience you cannot fix scope AND deadline. (Video game industry has tons of examples that talk to everyone : one recent would be No man sky)

What I would do is take the smallest increment that can be done to do the migration and I would push it to production. I would work in multiple steps, each time adding one thing to achieve the goal. The objective is to have the smallest step possible each time. If you happen to discover that you are not in the right direction, you can always rollback : one day of rollback code is always better than one month... :)
Doing that your customer will be happier because he will see progress in your dev, and he will accept more easily changes in the global estimate.
If it happens to be more difficult than you estimated, you won't end up working every night to finish the project. And as every step is going to production, if your customer does not have any money left, you can stop working and still deliver something (every part is happy)

One last thing, precision in your estimate is really important. Telling that it will take one month is really different than telling it will take 4 weeks or 22 days. In the first case your precision goes to the month : so it can be one, or two if you were optimistic or 3 if everything is bad. In the last case, it is 23 days if you were optimistic or 24 if everything is bad (at least in the mind of your customer)

tl;dr Try to sell one day to one week of work and acquire your customer as a regular one than sell a one time stressing project.
That's my 2 cents.",1539759107.0
RetardWizard,"Some good advice in here. I personally think 20k is a lot but it depends on your situation I guess and also the website itself. 

Sounds more to me like 8-10k job but I’m sure I’ll get downvoted. MAYBE less than 8k if a lot Of those pages are just repeats of the other ones but different content. But if most of those pages are different and all require special attention I could see it going above 10k also. 

Also depends on your level of friendship with the guy. I know everyone on this reddit basically says to charge even your mother full price and “never work for free” which I get but I’ve never helped out a friend at full price. And generally those friends lead to more clients. 

One more thing, if this friend of yours has a very successful business and understands why he wants to move in the SPA direction or has expansion plans in the future ignore what I said above. I’m just imagining a guy that has some money and a business and said to you “I want my site to be faster.” Going to be hard to get him at 20k and sell him on Nuxt. But if he is tech savvy, successful, and requested these semi specialized technologies from you then I’m sure you’ll have an easier time getting the $$$$. 


Edit: I want to add context to what I mean about how it could even (in my opinion) be worth less than 8k. I worked at a small agency but dealt a lot with actually making the deals and interfacing with the clients and owner regarding pricing and timelines etc. we had a client that had a window tinting business. Their website had about 25 pages I forget but it was super dumb. They basically thought people treated their website like the Wikipedia of tinting. Their info ranged from skin cancer to energy efficiency and everything in between. However, there was only 5 real pages worth of design if you know what I mean. In that case, I really didn’t care if the customer wanted 40 pages because all but 4 were identical. Just different copy text and images copied and pasted over from their old site. Took me an extra hour or two to pull some images and optimize them and then took the content guy an extra hour to press ctrl c and ctrl v from their old site. 

If we had approached that from an angle of “we price by page count” (super dumb IMO) we would have 100% lost that deal. At the end of the day even some “big” sites end up being a lot of reused pages and layouts, which when we are being fair, really probably shouldn’t be passed to the client as a per page price. ",1539810663.0
_3psilon_,"And  of course price depends on the country the freelancer is working in.  I'm living in Hungary, and I'm pretty sure that for $20k (\~€20k) an  agency could do the project, or a freelancer could do it for much  cheaper.

I'm doing full stack + Vue work  at a small company (currently working on a business statistics module),  but for €20k/mo, I would definitely go freelancing after getting more  experience. :P

The questions are for  example whether you explicitly need Vue or could do with similar libs,  or whether you need SPA/SSR at all, how complex the backend is, how well  developed the current API is etc.

I would even dare to ask how you had gotten to the conclusion, that nuxt.js is the best choice for the project?

For  example, 34 pages doesn't say anything - are they static, semi-dynamic,  or completely dynamic, based on user data? It makes a huge difference.

It  would surely take 1 month, and it could even take more if the current  codebase is not so good or if it's a complex app with a lot of API calls  and business logic to be considered and data to be stored on the client  side.

I'm pretty sure that since IT is a  global business, there are a lot of sites and options for hiring  freelancers, and it's definitely worth looking around a bit, checking  out references etc. If you do your homework, you could be able to do  this for probably less than €10k if the business logic is relatively  simple.",1539675618.0
hkd987,"Take the period out...... to=“/home”

",1539659123.0
njchava,"Your vue router isn't configured the way you want it to be. Take a look at:

[https://stackoverflow.com/questions/34623833/how-to-remove-hashbang-from-url](https://stackoverflow.com/questions/34623833/how-to-remove-hashbang-from-url)

&#x200B;

It's hard to tell without look at code, but it looks like you have /home as your base url, and then #profile is the route.

&#x200B;

From what I understand from your post, you want your base url as just /, and then routes after that without a bang",1539624503.0
mainst,Hard to tell without any code. ,1539623297.0
the_polar,I'd use history mode with the Vue router if you aren't already. Each page or view  should consist of components. ,1539624388.0
dougieled,Try have a look at using Vue-router. You can create pages and components with the .vue extension. But yea hard to tell how your getting /home/profile with no code,1539623499.0
shanestillwell,"I would use [Nuxt](https://nuxtjs.org). Even if you don’t use it for server side rendering, the conventions and configurations are very good. ",1539633727.0
htom3heb,"Whether or not the whole project is vue components (a single page app) or laravel serving html with vue components (traditional ssr) is up to you. It depends on your requirements. If you opt for a SPA, read the docs on vue-router. If you opt to let laravel handle it, read their documentation regarding routes.

If you don't know what you should do, I'm going to opt for you to do the boring thing and let laravel handle your routing and generating your html. Only use vue components when you actually need it (ui elements with high or difficult interactivity requirements) and otherwise use blade templates for the majority of your views.",1539634472.0
karen_jd,!Remindme 10 hours,1539669822.0
alinnert,"There are VS Code extensions that enable html highlighting for tagged templates. But since these are not tagged it won't work.

Is there a special reason why you put your templates into a property? Generally, I'd **highly** recommend using [Single File Components](https://vuejs.org/v2/guide/single-file-components.html) aka .vue-files. They also solve this problem.",1539616112.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/learnjavascript] [Change Yellow HTML in Vue.js file with VSCode?](https://www.reddit.com/r/learnjavascript/comments/9ocij3/change_yellow_html_in_vuejs_file_with_vscode/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1539609111.0
zarlss43,"Pretty sure you have to create your own theme, import the theme you are using as a starting point, then modify it to use the color you would like.  May be more trouble than you would like. Here is the best article i could find on creating themes [https://css-tricks.com/creating-a-vs-code-theme/](https://css-tricks.com/creating-a-vs-code-theme/). ",1539610467.0
lordfuoco,I believe if you start by writing down the essence of your approach it would be easier to chyme in and help :) ,1539614786.0
legendairy,I had something somewhat similar and had a few issues with ChartJS.  Might want to check out [vue-apexcharts](https://github.com/apexcharts/vue-apexcharts).  A bit more powerful and handled rendering my reactive data much better.,1539755937.0
monderelon,"I would try this method.( If your excel files are standart )

I would directly upload excel file to backend server to analyze. Backend server push new data to clients. Your data wont be as big as you thought. Compress them before send and use gzip.

In frontend I would use Vuex to manage this new data. I wouldnt want to start again.

Still it won't be fast as light but clients can wait for 130k data progress.

&#x200B;

About connection backend and frontend. Its plain web services. Nothing special. You will make ajax calls from your client side to backend.

&#x200B;

&#x200B;",1539594943.0
imGnarly,"130k entries isn't really THAT much, depending on how nested your data is. If it's just one table and you're just gonna use one-level queries, you should be able to use something like Firebase + fb queries without even going beyond the free threshold. If you need deeper relations, you could use firestore. If you start to stress your back end too much, then I wouldn't recommend firebase, because it gets expensive quite quickly. 

I've been using GraphQL lately, which is a querying language, to run something similar to what you've got. Definitely the best way to go for an app or platform that's running a lot of complex requests.

It really depends a lot on what your userbase will be demanding. Like, ok, your WHOLE db could be 130k entries big, but that doesn't mean a user is gonna load ALL the data every time they use your app. Measure the average query request, if it's below thousand, and there aren't a lot of columns in your table, you can even run that stuff client side. 

If you need to run data-heavy operations in order to get results which your users are gonna consult and you're not granting them the ability to run custom queries, then I'd suggest running all those operations chronically on server and then just render them client side. 

All of these are really simple methods. Gathering the data is usually the hardest part of the job. 

Whatever road you go through, stress test that bad boy to the limit before deploying production. ",1539609932.0
ours,"130k entries in a database is peanuts.

If you are going to only show aggregated data, you may want to do that process when the data is uploaded depending on what you want to do.

Seems you know the client side well, on the server side you are going to make an API (Web API) that will respond to your client's request (get the data for chart XYZ with the parameters abc) and usually return the result in JSON.",1539621589.0
finroller,"Putting the data in a database is most definately what you want to do. Those things are optimized for dealing with data. Heh, hence the ""data"" part of the word database.

After you got that done, you can start figuring out
1. How to display this data. Do you show all 130k things at once or is there paging etc.
2. How to do that most efficiently.
In that order, because you need to know the 1 before you can start figuring out the 2.

After that it's most likely just bolting some sort of API, rest and graphql are popular, on top of the database and the wiring the frontend to use said API.",1539599219.0
N8Coding,"The easy way is, if your data is small enough, you can include it in your frontend as JSON by using csv-loader. You'll only ever fetch one file from the server. No database is needed.  This is a static website and good for SEO unless the file is very large.

The medium way is to use something like AWS S3 Select. This is bad for SEO.

The hard way is to create a separate app to load data into a database. Do this by using papaparse or csv-loader to transform each row into JSON and insert it into a NoSQL database. This is also bad for SEO.

The harder way is if you require SEO on that first page load, then you'll have to use SSR or prerendering, which loses SPA functionality.

The very hard way is to use a script to generate the initial HTML from the 130,000 entry JSON using csv-loader, remove said script from the DOM, then prerender the HTML. If you must have the SPA functionality, then you can still prerender the first load but the dynamic data for subsequent loads can be fetched from S3 Select or a database. This is a SPA with SEO.",1539616578.0
6bytesunder,"Where do you get stock data from? Google, Yahoo, somewhere else?",1539609294.0
usx-tv,Does this have anything to do with Vue? You don't even mention that your app was made with Vue.js.,1539589741.0
beefyjon,Looks fantastic. Love the suggestion of using it like an interactive photo frame. Much respect to those who think outside the box!,1539549730.0
yavanepl,"Cool to use with smart mirror project, when You hide screen right under glass. ",1539555597.0
romancm,Great idea!,1539557038.0
digitalundernet,Google or apple calendar integration? I've been thinking about starting something similar so me and my girlfriend can keep track of homework or chores. Very slick UI.,1539573459.0
Twinsen343,looks great dude!,1539571263.0
redberryofdoom,"This is awesome! I really love the minimalist design.

I have been thinking about something similar to this for a while but never got past the ""wouldn't it be cool if..."" stage.

You have definitely inspired me!",1539592431.0
CaptainInsane-o,I really like it. Well done.,1539610742.0
Charly1811,Awesome!! I've been playing with docker lately and this is exactly what I needed!!! Thank you !!,1539610661.0
Reashu,Put your setinterval in created() (and clear it in destroyed()) and make it update a property on your component's data.,1539523714.0
brrose,"I wrote a package for this that you might find useful

example here (which is exactly the example youre asking for, oddly enough)

https://jsfiddle.net/brianrosamilia/7fq4nrbe

package here

https://www.npmjs.com/package/vue-crono",1539526699.0
jaredcheeda,http://jsfiddle.net/4m7uzqcg/,1539524246.0
ataraxy,"You can always also set your interval function as a data object whenever you set it up so you have access to clear it anywhere if you need to.

ie.
    this.time =  setInterval(() => moment().format(), 1000)",1539550466.0
jzelez,"You are on the right track, but since you're calling moment().format() in a separate scope, the displayTime function never returns anything.

&#x200B;

Here is a simple example with setTimeout: [https://jsfiddle.net/jzelez/eywraw8t/417900/](https://jsfiddle.net/jzelez/eywraw8t/417900/) and one with setInterval: [https://jsfiddle.net/jzelez/nbpf8qwu/1/](https://jsfiddle.net/jzelez/nbpf8qwu/1/)",1539524265.0
snowseth,"Maybe use a computed property to generated a sorted array of objects? Then v-for the computed prop.

Not even an array of full objects, just the keys.    
\*correction: actually, with duplicate keys you'd probably need the parent object and key or such",1539520160.0
percykins,"[Here's](https://jsfiddle.net/botvph30/3/) a fiddle using the spread operator as /u/DickyDickinson mentioned and a computed property as /u/snowseth mentioned. 

    new Vue({
      el: ""#app"",
      data: {
        volunteers: {
          0: { title: 'Vol 1', order: 3, volProperty: [] },
          1: { title: 'Vol 2', order: 1, volProperty: [] }
        },
        freelancers: {
          0: { title: 'Free 1', order: 2, freeProperty: {} },
          1: { title: 'Free 2', order: 0, freeProperty: {} }
        }
      },
      computed: {
      	displayObjects: function() {
          let ret = [];
          ret.push(...Object.values(this.volunteers));
          ret.push(...Object.values(this.freelancers));
          ret.sort((a, b) => a.order - b.order);
          return ret;
        }
      },
      methods: {
        changeOrder: function() {
          this.displayObjects.forEach(obj => obj.order = Math.random() * 3);
        }
      }
    })

If you care about the keys in the objects then you might do it a little differently, but this is the basic idea. I added in a button that allows you to randomize the order, showing you that the ordering is reactive and that the objects in displayObjects are in fact references to the objects in volunteers and freelancers, not copies.",1539541105.0
DickyDickinson,Use the spread operator to combine them and then sort them as you would normally,1539520089.0
kcolttam,"So what I would do is use [vue-async-computed](https://github.com/foxbenjaminfox/vue-async-computed) to set a variable called allPostings.  Then you can handle it a ton of ways, but I'd use lodash with the get method and set computed variables from there.  So:

`freelances() { return get(this.allPostings.freelances); }`

Then you could just do v-for with those computed variables.  Hope this helps!  ",1539524573.0
Cheshamone,"Vue dev tools! You can use it to inspect all your components use it to see data, props, etc: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en",1539491130.0
Pyro979,console.debug(JSON.parse(JSON.stringify(obj)));,1539524625.0
so_lost_im_faded,"Still waiting for Slovakia to discover it. It can take another 5 years here, almost everyone is stuck using old versions of Angular.",1539442144.0
DukeBerith,"Happened in Australia too :) 

A few years ago it was React and Angular only with a few Vue rumours. Now I see it occasionally mentioned along side them, and one interview I did a few months ago was a Vue specific role. ",1539449651.0
volgorean,What is the pay rate like for front-end / full-stack developers in Germany?,1539439017.0
hypercluster,"Yeah, more present at local conferences as well. Angular is still prevalent for some reason, probably due to the popularity of AngularJS but slowly getting phased out. 
Introduced Vue in our company and trying to spread the word!",1539442162.0
nathancjohnson,Now all we need is US companies to start using it. It seems many of them are too in love with React though.,1539446865.0
inhalingsounds,I think it is happening all around Europe. Plenty of companies using Vue in Portugal too.,1539442237.0
1makfly,"That's awesome to hear. I am now 6 months in and built some quite sophisticated applications with VueJS and I always hoped (well, expected) it will pick up pace around the globe. :) ",1539471302.0
crazyeyes420,"Also some jobs in the very comparatively small Riga, Latvia. Good jobs with decent companies.

I'm doing asp.net + vue, and there are quite a few php + vue as well. ",1539513389.0
BabblingDruid,Cant wait till it becomes more popular in the US. I started learning it in preparation for that day.,1539519743.0
Lelectrolux,"I'd say it was a problem in 2016, not today. They actively took steps to deal with that. Don't ask me do fetch the articles tho, I didn't bookmark those.

A decent number of companies have invested in Vue, including some of the biggest chinese companies (alibaba, etc.). And don't forget the licensing shit react went through a few month ago. They reverted it, but big companies aren't the holy grail....

I'm pretty sure that if it comes to it, a fork would be made. It's open source.",1539436107.0
ShetlandJames,"I would say you are right to ask questions. Vue might be open source, but it definitely has a Bus Factor problem. Look at the contributions to the GitHub:

https://github.com/vuejs/vue/graphs/contributors",1539414400.0
ENx5vP,The Vue.js founder just released a road map: https://medium.com/the-vue-point/plans-for-the-next-iteration-of-vue-js-777ffea6fabf,1539387379.0
finroller,"Companies, in general, are volatile and pull support all the time.",1539416504.0
originallowercased,"support for vue will last longer than most of the projects that get built on it will be maintained.

whatever techniques and platforms react/vue/etc are targeting today won't be the same 5-7 years from now, so the front-end stuff will need to be rebuilt/updated anyway.  adaptive moves are generally better than large rebuilds, but you can't predict the future that much (or, the time spent trying to future-proof yourself may have diminishing returns compared to just moving ahead with something that works now).

The ""react = big company"" thing doesn't mean they won't at some point hit a wall of utility at those large companies, and some other project will start getting more attention/support, to the detriment of react.  New leadership at larger companies, strategic vision changes, mergers, etc can all lead to priorities shifting and support reducing.

Nothing stays the same forever, and in tech, usually not even 10 years.",1539572740.0
monderelon,"you cant use  v-model=""rules.status === enabled""  this way. it will create error.

you need to do this way   :checked=""rules.status === enabled""

this way your checkbox will be created with correct status. then you need to create a method and bind to checkbox which will change their rules.status state. if you use v-model every checkbox will behave as one. little bit messy. ",1539608344.0
Wompingsnatterpuss,It's a beautiful thing when you find a technology that just makes you feel good using it. Glad you found yours. ,1539377206.0
campbeln,"I'm now making the switch from an AngularJS site to VueJS and my initial tests were **great** but now that I'm deep into the move some warts have started to show, namely the documentation is not complete/somewhat fragmented (just show me all the interfaces and what they get passed, *guldernit*!).

Prior to my move from AngularJS, I was able to condense the AngularJS-specific JS code (read: not the HTML templates, just the directives/filters/etc.) to less than 200 lines, but the cutover has been more difficult than I anticipated :(

Now... it doesn't help that I'm trying to 1:1 port my thinned down AngularJS interfaces into VueJS (and I used AngularJS's `$compile` service a few times to build more complex directives) but `Vue.compile` is a good example of the documentation being difficult to consume to a nubie to VueJS. I believe I've finally found an example of [`$compile(_element)($scope)`](https://jsfiddle.net/b47h8zfa/) in VueJS, but yea... the documentation looks great but isn't very comprehensive as to interfaces and their arguments (its there, mostly, but you have to dig).

Anyway... any suggestions for an AngularJS convert (other than drink the koolaid and just do it the VueJS way)?",1539381646.0
moltar,Check out Nuxt too. ,1539390224.0
stemid85,"I'm almost the other way around. I was a good backend coder but always struggled with anything frontend related, be it CSS, HTML or JS.

All my previous frontend projects have been ugly, hackish and a real struggle to get through.

My last frontend project was actually my first payed frontend project. First paying client who wanted me to write JS.

I chose vue-cli, first time user. 

In 4 weeks I had a finished product that I could deliver to my client. A frontend I'm actually proud of, using vue and vuex, connecting to my Python backend in AWS.

Of course using Bootstrap4 because CSS is still something I don't want to touch. But vue-cli's ability to hide webpack from me was priceless. I was able to use the latest ES syntax, hot-reload dev server and build command without knowing any webpack.",1539413700.0
FTUTA,It's fantastic. Combine it with Laravel and you have a match made in heaven.,1539377810.0
sinus,"I wrote a simole tool a few months ago using vuejs. Later this week, i had to add a feature. I was bkown away how short and simple the code was. ",1539417941.0
OldShoe,"It's important to have tools that makes you fluent in expressing your ideas. For me and my web ideas, this is currently VueJS.",1539417773.0
Kindrik76,"Its the best. Sad thing is, no one will hire you for it.",1539381479.0
JasonAller,In addition to hugs (provided that they are consensual) it is also possible to support them with https://vuejs.org/support-vuejs/,1539386107.0
waiting4op2deliver,Same,1539379324.0
ajitid,I'm not its author. He is -> [https://twitter.com/tommyvedvik](https://twitter.com/tommyvedvik).,1539356489.0
tonjohn,Curious to try it! I love Nuxt but wish it had some of the features that Gatsby has...,1539375039.0
,There are some mobile problems on promotion site,1539367564.0
FURyannnn,This looks quite promising. We'll watch it's career with great interest.,1539361331.0
LloydAtkinson,-8 productivity buff,1539359324.0
Reashu,Vue-cli-service uses webpack behind the scenes. You can configure it using vue.config.js. Check the docs for more info. ,1539344244.0
paladincubano,Why on earth you want to disable that??,1539359569.0
archivedsofa,"You start doing authentication logic in the store, and before you know it Vuex becomes a monster that controls all your application logic.

For small projects and tutorials it doesn't seem like a big deal, but in my experience for serious projects this is a huge mistake.",1539352725.0
joce21,I hate Telerik,1539345511.0
,[deleted],1539311562.0
BambooMiel,"Found a temporary solution :

Setting a ref on <PhotoEditor> works it we disable the renderUi method in the PhotoEditor component (from the git).

I can retrieve this ref in another component, that's child to the same parent, with : `$this.$parent.$refs.myphotoeditor`

&#x200B;

I don't know if this is a good solution, I could also try to emit and retrieve an event.",1539309252.0
hovokhc,"You could abstract API calls into a separate file e.g., api.js, and then call them from your Vuex actions.

**api/auth.js**

    import axios from 'axios'
    
    const instance = axios.create({
      baseURL: `/auth`,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
    
    const authAPI = {
      Login (loginForm) {
        return instance.post('/login', {...loginForm})
      },
      Register (registerForm) {
        return instance.post('/register', {...registerForm})
      }
    }
    
    export default authAPI

Hope this helps.

**P.S.** Please wrap your code in a code block, it's difficult to read.",1539301951.0
avenp,"I use the fetch API, not Axios, so I'm not sure if Axios returns promises or not, but in general I like my actions to return a promise so I can do work in my components after the call succeeds/fails. Actions are by their nature meant to be asynchronous so if you're going to be doing API calls anywhere in your store, an action is the place to do it. Committing a mutation on success/error is good practice AFAIK, and is what I typically do. I also make a point of never committing a mutation from a component, and only dispatching actions.

&#x200B;

Also, pleaseeeeee use the code tags next time you post code on Reddit. It's extremely tedious trying to read code with no formatting. The button is right at the bottom of the editor. It looks like </>. If you're on mobile or not using the redesign, you can wrap your code in graves (\`) to add formatting. There are also tools like jsfiddle and hastebin you can put code into and link to.",1539299841.0
newp,"My god, why are people still touting mongodb in 2018? What happens when you want to search tasks? Relate people to tasks? Relate tags to tasks? Search for all tasks that have a tag or a person? What happens if you're a SaaS with a hundred million tasks between all your tenants? Mongodb sucks and anytime a company gets to a certain level always regrets choosing it, and refactors back to an RDBMS. Just learn SQL people. It's good for you.",1539307148.0
andreich1980,There are so many to-do-lists I don't have that many tasks.,1539334662.0
jacob__s,"I did something similar using Vue and Flask. Web sockets would work, but I would check out [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) if the communication is only one-way.

Here is a small code snippet for the client-side:

    const es = new EventSource('http://example.com/the/url');
    
    es.onmessage = (event) => {
      // do something with event.data
    };
    
    es.onerror = (event) => {
      if (event.eventPhase === EventSource.CLOSED) {
        es.close();
      } else {
        // something went wrong
      }
    };",1539256489.0
CristiJ,"Really cool stuff. Looks great.   
Minor thing: The transitions don't seem very smooth sometimes especially for lists. Otherwise looks awesome",1539253474.0
dave__stewart,FYI: proyects is spelled projects! :D,1539285731.0
janakaontomatrix,">Ups! we are currently in maintenance   
WOW thanks to your visits we are making a change of servers   
Thanks for your understanding and support

&#x200B;",1539274845.0
gabdelacruz,"Ok, now I'm convinced, I'll use vuesax on my next project. The only thing bothering me as of this point is the lack of SASS support.. ",1539260734.0
Car333,Is it down for anyone else right now?,1539301394.0
donkeypunchblowjobs,if youre looking for a great headless CMS - check out [Strapi.io](https://Strapi.io) \- not to detract from the post - but i just really like it.,1539245241.0
enkafan,This is damn close to how I dipped my toes into Vue. When working with asp.net I always prefer feature folders for organizing. Id like to sit down and try and work out how to configure webpack and the rest of echoes Staten to play nice with having a different app per feature folder but still have common dependencies shared among all the features.,1539232311.0
,Vue js is ok for existing app. But typescript should not be included. ,1539280259.0
brainbag,"This was the link https://medium.com/magnetis-backstage/working-an-application-in-vue-js-with-tdd-an-extensive-guide-for-people-who-have-time-part-1-3be791dafa2b and I think it's a good article.

/u/dkuroski don't let assholes on the internet ruin your good time. I found the article useful, and it wasn't dry or stupid like most of the articles that get posted here. This subreddit does get a lot of poorly written garbage advertisement material posted to it, but I can tell you put a lot of time and effort into this, it really shows.

Please keep writing and add the other parts. I'll appreciate reading them!

",1539189995.0
lenswipe,Please put some effort into shit like this. ,1539176404.0
thiswasprobablyatust,What a high quality contribution to the Vue.js community you've made here! You should be proud. I'm sure based on your anecdote from your region of the entire fucking world and whatever 1-2 job boards you're looking on we will all run and hide to our home offices to start learning Angular!,1539150890.0
usx-tv,"We're past september. Hiring season is going down. Jobs using Vue.js aren't that common as of yet, and it only makes sense that going into off-season it's going to be more difficult. ",1539157792.0
Boydbme,"I’m actively trying to hire devs with JavaScript experience, with Vue and Nuxt skills being major plusses. So.. one anecdote to another, I guess it depends on who you know. ",1539179439.0
brainbag,"I don't have a solution for you, but I can explain why it's happening. 

Vue currently overwrites Array `__proto__` for part of the reactivity control, which means your custom Array subclasses won't be your subclass after it becomes reactive. There is an unresolved discussion about this here with your exact use case: https://github.com/vuejs/vue/issues/6943

The good news is that when Vue switches to Proxies, this won't be an issue. 

The bad news is that won't work for you today. There is a vuejs fork in that issue, but no telling if it's reliable, and who wants to fork their main library? 
",1539259157.0
phu54321,"if you can automate those things w/ bash script, you can just use plain old crontab.",1539126363.0
enkafan,"so what people do is use something like travis to deploy. Travis watches git for changes, usually a specific branch like master, and when it sees those it runs a specific script. For webpack and in your case Rmarkdown it first runs the code need to make a deployable unit. Then there are a ton of options on where you deploy it. Since it is just a static site you have even more options.

[Here's the appveyor script](https://github.com/phil-scott-78/showplan.js/blob/master/appveyor.yml) I use for one site. Appveyor is like travis, I just have more experience using it so that's what I tend to use. The first part sets up the environment for deployment, just some secure settings I need for the CDN and Azure. Second part runs the first steps to get a PC ready to run, in this case ensuring the right version of node is there and that all my npm packages are up to date. I then run my unit tests. If those succeed I do a `npm run build` which knows how to do the webpack. Finally I have a script that takes the dist folder created by the build command and pushes it to azure.

That's the basics, which probably seems like a ton. The key for you is to get your process working locally in a script. Once you have that script it's time to try and move it to travis and whatever host you have. There are so many options here there is no ""the way"" to do it so you'll need to work it out on your own or find something close to what you want and work from there.",1539138207.0
tonjohn,"You can use GitLab’s pipeline feature to deploy those files to your server on commit.

https://docs.gitlab.com/ee/ci/pipelines.html",1539138394.0
,[deleted],1539136715.0
letsjustbefriendz,Check out vee-validate,1539116282.0
liloow1,"Something like this? https://codepen.io/liloow/pen/ZqeebK

EDIT: I trimmed the code a bit but it's my first time with the lib so if you have any question, don't worry it's probably my fault !",1539119463.0
bathyscaaf,"There are some pretty [good examples](https://monterail.github.io/vuelidate/#sub-validator-parameters) on the Vuelidate page itself.

I've been able to set up custom, asynchronous, and dynamic validations following their examples",1539137723.0
Droid2Win,"Ok, so I'm assuming you understand how to use a client like axios to make your ajax calls and whatnot.

&#x200B;

First of all, authentication should be simple. You authenticate with your API in whatever way your API requires. If it's needed as a precursor to each set of calls, or if you can do it once and use it for your whole session, etc. If there is a token or something that must be sent on each request, your ajax client (like Axios) will have the means to configure this. That part is not VueJS specific.

&#x200B;

Beyond that, all authentication is done on the backend. The server with the API decides if the requests are authenticated or not, period. If the server doesn't like the request, the request fails, period.

&#x200B;

You don't need to worry about the data in Vuex for security purposes. Vuex runs in the browser, meaning it's only there so long as the person who has logged in has their browser/tab open. So you don't need to worry about the data in Vuex, it only gets to Vuex if the user is authenticated in the first place, and Vuex goes away as soon as the browser is closed.

&#x200B;

Lastly, you want to use ""actions"" for your communication with the database. Actions are designed to support complex workflows including asynchronous code that read/write to/from Vuex.

&#x200B;

That's about it. So study up on Axios and Vuex in general, and keep all your authentication server side because otherwise it won't be worth shit.",1539112346.0
jordanaustino,"So it sounds like you have two issues here: a) you need to figure out how the data in your API is authenticated and authorized b) how you access that data through your front end.

For your question about savvy users, you should never ever ever ever send data to a user the shouldnt be able to see. That's an issue of authroization. Think of your API as an API, people can (potentially) request data from it outside of your front end. If you are exposing information people shouldn't be able to see you have a huge security issue.

For the vuex, you can use actions to either grab the data from your store if it already exists or make the database call, mutate the store to hold it for reuse later. Call that action upon first upon component using the state loading. Keep in mind that multiple clients accessing and mutating data could result in stale data in your store, especially if you use something like a persisted store to cache and reduce API calls.",1539112848.0
dave__stewart,"We run a large financial portal and we've moved away from using Vuex for REST, except where the data might be shared or serve as a hub page, in which case we only store the index.

There are several reasons for this:

- there's a lot of machinery to set up Vuex for any kind of data IO
- using Vuex requires additional code to be imported and set up into each of your components that need Vuex
- none of the CRUD operations actually need to be shared or live outside of the component, so this is all needless cruft
- maintaining a rigid folder of Vuex stores, modules and paths makes the application somewhat brittle

Instead, we developed our own lightweight wrapper class for endpoints that can be configured and instantiated per resource, and shared extremely easily. Each component that needs to access an endpoint imports a single instance, then calls a single method and optionally passes a payload, in vanilla JavaScript. Load progress is also tracked inside the class and can be easily referenced from your templates, so no more `commit('SET_LOADING', true)` type calls polluting your stores.

We've radically reduced and simplified files, code, wiring and complexity and now just call endpoints directly from the components that need them:

- index: index, delete
- single view: read
- form view: read, create, update

The authentication you should be doing outside of the main API anyway; when you log in set the token on the Axios instance and you're good to go.

The lib in question we're now using is Axios Actions:

- https://github.com/davestewart/axios-actions

Take a look and see how you go.",1539116543.0
chipsa,"Your API should never return data that you don't intend for that user to see. They don't necessarily have to use your front end to pull the data. A black hat can use curl, or similar, and pull it all out without ever using the browser.

So you can't trust that any of your front end code will in fact ever run. This also applies to your API recieving data from the front end. You have to validate the data in the backend before doing anything with it.",1539155550.0
archivedsofa,"The common practice is to use axios and make your HTTP requests in Vuex actions.

I did that for a couple of years but as the project grows Vuex becomes a monster that engulfs too much stuff. What I do now is that I barely use Vuex actions, if at all. Vuex is now only concerned about central state.

I have an `api` module that makes the HTTP requests and when it received data and directly calls the Vuex mutation if the project is small or through some sort of mediator that decouples modules of my application.

`auth` is another module that is responsible for decoding the JWT, saving it to localStorage, etc.

You get the idea. Basically remove everything from Vuex that is not about central state. It makes a lot more sense for me and my team.",1539117845.0
Downvotes-All-Memes,Post some code here so I don't have to go to SO.,1539097579.0
Downvotes-All-Memes,"Are you using the Vue Dev Tools? Is your 'addTodo' mutation firing? Any errors anywhere?

So far, I'm not seeing anything obvious about why it isn't working if all your other http verb requests are working.",1539102445.0
__neone,"For whatever reason it seems like `state.todos.push(todo)`, that's the method that needs to trigger the reactive update.

It *should* work, but it clearly not. I would start with that mutation log / pause what happens after that push. 

Maybe copy the array, push onto it, then use `Vue.set` to force a reactive update
",1539124135.0
Pyro979,"Are you saying the initial load isn't working? if so i think you want this. Obviously import Vue. If this is not correct, someone correct me as I'm also a noob.


    import Vue from ""vue"";    

mutation

    setTodos(state, todos) {
                Vue.set(state,""todos"", todos);
    },",1539128703.0
JZumun,Have you tried using the [mapGetters helper](https://vuex.vuejs.org/guide/getters.html#the-mapgetters-helper)? ,1539101397.0
SandFriend,"I'm guessing you're seeing console warnings about using duplicate keys in your v-for. If every to do has an ID of 10 then Vue may be attempting to reuse the same component for every item in your list, leading to your update issues. I would try using a random number generator for your ids and see if that helps.

Edit - nevermind. Saw that you're increasing the id with each item so that's probably fine! I'll look for a different issue... ",1539102103.0
Moulinette_,"Now that I know 9GAG ans Buzzfeed used VueJS, I'm really confident with learning it!",1539076637.0
Extremuss,"Blizzard Entertainment has recently starting to use Vue for their new websites.

Also here in Sweden, the biggest company for electronic goods uses Vue. https://www.webhallen.com/

Edit: a word",1539098147.0
crosstalk22,"soccer.com uses it for their sites(including store.fifa.com)
",1539102660.0
one_lame_programmer,Great ,1539096525.0
quinncuatro,"Not sure, off the top of my head. But run:

    $ vue ui

to get the UI version of Vue CLI. Poke around in there and make sure your settings make sense for everything you've done to your project.",1539040460.0
Maklite,"The href binding is expecting an object, you’re giving it a string. Either change your ButtonLink href prop to be an object or use a computed prop that converts the string into an object and bind to that. ",1539020403.0
penguingspe,Get that typescript outta here man.,1539016783.0
azzamaurice,"I’ll chime in here too because no-one has mentioned NativeScript Vue.
https://nativescript-vue.org/
Might be just what you’re after!",1539051926.0
thrstn,Right now I'm using https://quasar-framework.org and it's going great. I recommend at least checking it out.,1539021976.0
AndrewAtBrisaBoards,"I also switched from React to Vue. After about 5 minutes, I was totally sold on Vue :)

&#x200B;

I've used React Native in the past and actually had a pleasant experience with few hiccups. I'm pretty excited to give NativeScript a try with Vue. It sounds like it has a better data model for general development compared to RN.",1539061252.0
fucking_passwords,"Another option is to build a Cordova app with Vue, I’ve done this is in production and it worked quite well, though setup had some overhead.",1539021800.0
VIM_GT_EMACS,"How long ago is ""the past"" in regards to your react native experience and what were you trying to build? I too tried it years ago and it was a sour experience but it is much much better now, especially with something great and more mature now like Expo. 

I love vue, but i'm not using it to build a mobile app just because the choices out there seem like if you get stuck in some issues you have far less documentation/prior github issues/etc to reference. ",1539023733.0
333nuc,You have plenty of suggestions here. It's worth mentioning Nativescript Vue is already supported in the beta version of Vue devtools though (Nativescript Vue =/= Vue native),1539025353.0
r0ck0,"I don't know what I'm talking about here, never done any kind of mobile dev... 

But I have my sights on PWAs in the future if I do want to build one.  Seems like a good ""build once"" solution for most typical stuff that isn't media/performance heavy.  

Not supported on all devices yet, but seems to be catching on.",1539062736.0
Vrigoth,"Also take a look at [vuetify](https://vuetifyjs.com/en/getting-started/quick-start), it comes with a bunch of premade components that are very easy to use and give great results.",1539067916.0
thenumber24,"Vue-native would be my first choice. They’re working fast and pretty well supported. Quasar would be my second choice, as it supports native mobile apps and PWAs as well, which is nice. My third choice would be handrolling Vue into Cordova. Vue Native is the most promising of all these options and already has a good support base. 

https://vue-native.io/",1539024078.0
AceBacker,"This is almost to production:  [https://capacitor.ionicframework.com/](https://capacitor.ionicframework.com/)

once it's done it will be a pretty good solution to use vue/webpack with.",1539025865.0
benabus,I'm just using Cordova to compile a standard vue.js to mobile.,1539026726.0
valgern1,A huge thanks to everyone for sharing your opinions and experience. Hopefully this thread will help everyone who's starting mobile development with Vue.js.,1539174710.0
seamouse3,"Try flutter.io, it uses the same widget framework as RN. But has many advantages to RN. PM me if you want more details, I can find some good links explaining why it has so much potential.",1539027979.0
Catalyzm,"There are two approaches to using third party API from the front end.

1) Restrict access to your API key by IP address or domain. This is available to APIs that are meant to be consumed by the client such as Maps.

2) Create your own backend that Vue calls, which then calls API. 

The Admin SDK supports either approach. Javascript instructions including how to set up the ""VAPID"" access keys are at https://firebase.google.com/docs/cloud-messaging/js/client

",1539000157.0
Adamelevate,"You should use the Firebase Cloud Functions, they are secured and super easy to use, you don’t even need to make API calls(which you can) as the functions let you make changes on document updates/creations... and I’m not a proper dev, just learned a lot of it myself recently. ",1539011110.0
Adamelevate,"Cloud functions are built on top of express.js, so you can call them exactly like API’s, but you can ALSO use them for triggered db events.",1539012151.0
inhalingsounds,Can't you just import your Router and do router.push()? There are probably other ways to do it but that one works. I'm doing so conditionally so that I always fire a push to an 'error' + statusCode page.,1538992960.0
andyb12,Just go to a new route and pass it an error msg as a get param? Or just a generic error component,1538998358.0
ColtenP,"Yes it is.

Here's the process to make that work.

1) create a new div element and append it to the body
2) create a new Vue instance (using new Vue()) and pass the Component you wish to view as the render function
3) then mount that Vue instance on the newly appended div",1538996046.0
cyberst0rm,"at the begjnning of a vue function, set vm = this so you can perserve the context in vm and use it in other function scopes ",1538959935.0
thiswasprobablyatust,"This screams for a refactor, that's some ugly code bruh.

I don't see any reason for `calculateAndDisplayRoute` to be nested inside the `getDirection` parent, you're passing in parent variables as a param anyhow.

Instead of doing preserving `this` in a variable you can also call your inner function with `bind`.",1538982512.0
LEOtheCOOL,"I'm still on CLI 2, but this is how I add a build target in my csproj that will automatically run the vue CLI.   I have mine configured so that while I am developing, I can do a server-only debug build, since the cli will be serving the page anyway at dev time.  So I have a build configuration called ""ServerOnly"". 
 
    <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets"" />
    <Target Name=""RunNpmBuild"" Condition=""'$(Configuration)' != 'ServerOnly'"">
        <Exec Command=""yarn"" WorkingDirectory=""./www"" />
        <Exec Command=""npm run build"" WorkingDirectory=""./www"" />
    </Target>
    <Target Name=""BeforeBuild"" DependsOnTargets=""RunNpmBuild"">

From there you just need to figure out how to serve static files from your app, modify the webpack config to put the SPA in the right place, and make it so when you run the CLI at dev time, it proxies your api calls to your local debug server.",1538926145.0
BlueKnight3108,"What I'm thinking is two projects.  One with net core web api,  so all the logic and server processes stay there and with vue.js you make the front end ",1538927614.0
cafedo84,"If we want that the [ASP.NET](https://ASP.NET) Core project can also host the UI, what about creating under the root folder the following two other folders?

1) vue-ui (it contains the vue project created with vue-cli 3)

2) netCore-backend (it containes a Asp Net Core MVC project, created with the *dotnet new* command) 

In (1) configure web pack to put the resultant files in the wwwroot/dist folder of (2)

In (1) put also a index.cshtml that refers to the javascript files situated in wwwroot/dist.",1538939183.0
cafedo84,"Another approach is putting a vuecli3 project inside an AspNetCore project, like in this dotnet custom template: https://dotnetnew.azurewebsites.net/template/Soukoku.Spa.VueTemplate/Soukoku.Spa.VueTemplate

(Here is the repo https://github.com/soukoku/aspnetcore-vue)",1538988191.0
quinncuatro,"I can actually help for once! I just finished a build tool that uses Webpack to process Vue (CLI 3) into a pre-built Docker container (ColdFusion) that uses some CFM scripts to interact with a different (but networked) MySQL container.

I'm cleaning up the readme at work tomorrow and then posting it. I can report back with it when that's done if you think it might help!



",1539040704.0
cz_libi,"I wrote a tutorial about integrating [ASP.NET](https://ASP.NET) Core with Vue CLI 3.0 at [Medium](https://medium.com/software-ateliers/asp-net-core-vue-template-with-custom-configuration-using-cli-3-0-8288e18ae80b). Starter project is available in github repository at [https://github.com/SoftwareAteliers/asp-net-core-vue-starter](https://github.com/SoftwareAteliers/asp-net-core-vue-starter).

If you wish to separate both projects, you just need to install  `Microsoft.AspNetCore.NodeServices` NuGet and configure proxy to the client app in startup file:

`spa.UseProxyToSpaDevelopmentServer(""`[`http://localhost:8080`](http://localhost:8080)`"");` // your vue app port

The client app has to be running before starting .NET Core.

I prefer a configuration with client app included inside of [ASP.NET](https://ASP.NET) Core for easier deployment - back end serves both client static files and exposes API endpoints. Then you can install  `VueCliMiddleware` NuGet and start separate npm process with vue application by setting `spa.UseVueCli(npmScript: ""serve"", port: 8080);` in startup file.",1540012573.0
alreadyheard,"This was great. I'd love to see other examples of vue and d3. I've been looking at making chart components for my project at work but been having trouble deciding how to go about it. It feels dirty letting d3 do any DOM manipulation within a Vue component, but then you lose the enter-update-exit pattern by letting Vue handle the elements. 🤷‍♂️",1538927065.0
yeahdixon,Kind of a side question. Do you know if it’s possible to download static tiles from the servers? I want to pre-download a map for off-line use.,1538967091.0
moca__,Wow not bad hey! Quite smart. ,1538910191.0
moca__,Enjoy and share the outcome! I'm a big fan of nativescript. It really gives you that native look and feel instead of pushing a web app into a webview. ,1538911799.0
Lelectrolux,"Fun little game good work on the look and code, but your ""false answer algorithm"" is a bit too simple and can be ""cheated"" :

    What is 17 + 22?    What is 25 + 33?
    
            37   34             61   53
            39   36             55   58

Instead of doing `17 + 22` or `25 + 33` I'll just do `7 + 2` or `5 + 3` which gives me `9` and `8`. As only one results has the good rightmost digit, I can bypass the other part of the sum.


I found that on the third try, and confirmed it in your code : 


    do {
        randomval = this.getRandomInt(this.answer-5,this.answer+5) // This is the line a bit too naive, might want to expand to -10 +10
    } while(randomval == this.answer || this.options.slice(0,index+1).indexOf(parseInt(randomval)) != -1) //for each value to be unique",1538936408.0
Onegodoneloveoneway,Good work. ,1538912620.0
kosciak9,Very well done. Maybe additonal points for time as a feature request?,1538917766.0
tribak,"Nice!  
Adding to the score tip, create hotkeys for the buttons, that way the user won't need to move the cursor and click, just press the key and you're done.",1539040867.0
SayIt2Gart,Do you have a Medium article on how to make this step by step? :),1539068745.0
jeweltheme,Played the game with a good score :) Very nice work.,1538947367.0
plong0,"`v-if` works by actually removing elements from the DOM

`v-show` leaves the elements in DOM, but toggles `display: none;` on them  


From what I understand, Vue has some optimizations under the hood where it attempts to recycle elements where it can.  I see you are using the `onkeypress` attribute vs a Vue-style binding.  What I think might be happening is that Vue is recycling the `input` element, but because `onkeypress` is not bound through Vue, it is not managing/removing that event handler.


The reason switching to `v-show` vs `v-if` would solve it, is that with `v-show` those elements are always there so it would never try to recycle it like it does with `v-if`.  Although in this case the `input` elements *are* nested in `v-if` blocks (which would be removed/inserted as whole blocks), Vue isn't considering the `input` for recycling because the `v-if` is not directly on them.",1538901719.0
NateExMachina,"You're using jQuery events with your vue app? You're selecting with input[name=?] when you have an id? Then you posted it on stack overflow in lengthy instead of concise example? You even posted it with the wrong search tags, Laravel instead of Vue? You reposted it here and who knows how many other places? Oh and you embedded JS logic all over your HTML? If you ever get this to work, it's the least of your problems.

The other poster is correct that it probably reused DOM elements, which had unpredictable behavior when you bound an event with vanilla JavaScript or jQuery. I would have expected v-if to destroy the element, making the keypress stop functioning even if the v-if reappeared. Either way, v-if should not work. If you want to force vue to stop reusing elements, you can do so by adding a key to the element.

https://stackoverflow.com/questions/46758441/preventing-vue-from-aggresively-reusing-dom-elements

I'd advise you not to edit the DOM directly, including to add event listeners.
https://github.com/vuejs/vue/issues/3587",1538904301.0
oberhamsi,"the guide as a section for a very basic setup without webpack

&#x200B;

[https://vuejs.org/v2/guide/#Getting-Started](https://vuejs.org/v2/guide/#Getting-Started)

and this is the running helloworld app [https://jsfiddle.net/chrisvfritz/50wL7mdz/](https://jsfiddle.net/chrisvfritz/50wL7mdz/)",1538892178.0
FlandreKawaii,"I use rollup to build my userscript. What rollup do is compile all `.vue` file to render function and use `new Vue()` at entry.  

Here is the source: [https://github.com/FlandreDaisuki/Patchouli](https://github.com/FlandreDaisuki/Patchouli)",1538901597.0
Dot_Pot,"Hey guys, i ended up finding a good solution 

[https://laracasts.com/discuss/channels/vue/how-do-i-handle-loginregistration-and-sessions-with-vue-router-and-axios-for-an-spa](https://laracasts.com/discuss/channels/vue/how-do-i-handle-loginregistration-and-sessions-with-vue-router-and-axios-for-an-spa)  


And I chose not to use JWTs for my app, just good old cookie sids, this is why:

[http://cryto.net/\~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/)",1538882033.0
lenswipe,"1. The user visits your app
1. You check to see if they have a token in localstorage
1. If they don't, you show them a login page, this submits to the API which issues a JWT which you store in localstorage
1. If they do, then you assume that they're logged in and attach said token to the header of every subsequent request using Axios middleware",1538875583.0
nannooo,"A vue app by itself isn't communicating constantly with the server. You are only making request when necessary. The only exception here is when you are using websockets - which works fine with Vue. When you use websockets, you can pass a message to the client when the user has been logged out. On the front end you can react to that and send the user back to the login page. As easy as that. Setting up websockets takes a bit of time though.

&#x200B;

If you don't want to set up websockets, then you have two other options. One that I would consider bad practice, but I am showing it to you anyways:

1. (bad practice one) Sending a request to the server every x seconds to a link that requires authentication. When you get an UNAUTHORIZED response back, you know the user has been logged out and you send them back to the login page. This doesn't require any actions from the user. So they could be directed to the login page without having done anything at all.
2. You add an interceptor to Axios. As soon as the user needs to make a new request to the server (to save data, to get data etc), you could intercept the response of that request and then send the user back to the login page. You can easily check this based on the UNAUTHORIZED status code.",1538876529.0
JinSantosAndria,"To get back to the exact question: use a pusher like centrifugo, pusher or any other websocket or http2 push. If someone logs out, push this event to any private user channel currently connected (or queued) to simultaneously log all clients out. This event can be based on whatever you choose, session id, client id, user id. Just handle the event in your frontend and do what you expect.",1538900608.0
Downvotes-All-Memes,"There’s some really great medium walkthroughs that cover this so definitely do some searching. I found one that was mongo express vue node in two parts.

I basically do this by building a vue single page app (so use vue-router) and any data I need gets called either on demand or during a created/mounted hook when the route is loaded. The express backend is just a REST api that returns json for the vue frontend to consume. So they’re pretty independent parts of your application. Not really like passing a template from express at all. ",1538850716.0
Cynical-Potato,I think you'd be far better off just going with Nuxt.js.  the Nuxt CLI allows you to expose server configuration in your favorite framework. It will also give you better organization and structure to your project out of the box.,1538866422.0
Quadraxas,nuxt.js is vue server side rendering library. works great with express.,1538849790.0
BrianKimball,"Create-nuxt-app will allow you to set up a nuxt app, and choose a server. 

https://github.com/nuxt/create-nuxt-app",1538870524.0
RespectableCafe,"Ah, thanks, that makes a lot more sense. I’ll try and do it like you said. ",1538851448.0
achtung82,"> So should i use VueJs.

I would say there can be many cases where you would want to use Vue/react/Angular even if you have no intention of making it into a SPA. Its more of a question how complex the functionality you want to implement is. 

Is it very simple and you have a working jquery implementation then perhaps just keep that, if its more complex where you need to keep state and render different things depending on user choises Vue would be a good way to go.

> And if yes, what part of vueJs should i consider

Just use normal vue. If you find you need a store, get vuex. However for non SPAs thats usually not neccesary.


> Or how well it play with jQuery.

There is no problem using Vue and jQuery at the same time. But for the dom manipulation you should keep to one of them. However if you want to use jQuery for its other uses there is no problem with that.

> Can it play alone without jquery.

And yes you can manage without jquery also if you feel its overkill when you stop using it for dom manipulation.

http://youmightnotneedjquery.com/ has some examples but for ajax requests for example there are lots of packages that do the same thing without being as big.

> Any guidance please.

Read the official documentation https://vuejs.org/v2/guide/, its great and a good reason to choose vue over alternatives.",1538855256.0
Quadraxas,"consider this: would you use angularjs for this purpose if vue did not exist? 
the answer is same for half of your questions.
vue does not care about jquery. you should be fine with it and without.

if you are going to use jquery go with plain jquery. because for your purposes both jquery and vue would  more or less do the same thing(dom manipulation). imho using vue for just that is kind of an overkill if you never plan to go spa in the future. Vue does not do ajax, people mainly use axios for that with vue. 

so you need ajax + dom manipulation - jquery will give you both.


",1538850246.0
earthboundkid,"1.	Django CMS is bad. Use Wagtail instead. 
2.	jQuery is not necessary if you support IE11+. All of the things it was used for are now standard parts of the browser DOM JS. 
3.	Vue is good but you should use it once you know more about JS. It solves problems you don’t have yet. ",1538869066.0
devinthehouse,"I just wrote an article how we are doing this.

Yes you can use it alongside jquery, although I would recommend a page either uses Vue or Jquery not both.

Yes you should use as its the most flexible solution for this case, why they call it the progressive framework.

I would recommend you just use the main Vue library until you are comfortable with how you want to model all the data for your app. At that point you may see a need to Vuex, or a different type of state management

&#x200B;

[https://medium.com/@seanwdiamond/using-typescript-vue-js-within-an-existing-mvc-multipage-application-88e8c2290bc4](https://medium.com/@seanwdiamond/using-typescript-vue-js-within-an-existing-mvc-multipage-application-88e8c2290bc4)",1539193056.0
AmericanJBert,"If you own the API, then you should think about using WebSockets.

That way, the API will let you know when the status changes instead of polling it.

If you don't own the API, then probably store the status in Vuex and then have a global component do the setTimeout and setInterval and store all of the timing stuff in Vuex or something along those lines.",1538834761.0
finroller,"In the then, besides changing this status, also add a new timeout with the same function as a parameter. Not going to write it for you on my cell, but think of it this way:
checker () {
if status = ready, just set the status.
if statis = not ready, set status and run checker again in 10 minutes.
}

ie. use settimeout instead of set interval.",1538818875.0
OliverEady7,"    data() {
    
    return { status: null, pollInterval: null }
    
    },
    
    ...
    
    methods() {
        fetchData() {
            axios.get('r/http://api/process/status')
            .then((response) => {
                //check if status is completed, if it is stop polling 
                if(response.data.status = 'completed') {
                     clearInterval(this.pollInterval) //won't be polled anymore 
                }
                this.status = response; 
             });
        }
    },
    
    mounted() {
        this.fetchData()
        //check if the status is completed, if not fetch data every 10minutes
        if(this.status.status != 'completed') {
            this.pollInterval = setInterval(this.fetchData(), 600000) //save reference to the interval
            setTimeout(() => {clearInterval(this.pollInterval}, 36000000) //stop polling after an hour
        }
    }

Just a quick one, if you're waiting to change some state on the front end because you're waiting for something to complete on the backend. The better option would be websockets, however it may be overkill for this use case.",1538832915.0
JinSantosAndria,Try tail self calling? Start a setTimeout a global App component or js import and set it to 10 minutes (or a specific value stored in local storage if its a remainder after a hard page reload) and do a setTimeout inside that function again that calls itself?,1538822900.0
Balduracuir,"I have a similar component in a project for that exact purpose. Not sure if it works properly as I don't use it for now in the project... :/
I use a graphql client but it is fairly easy to change that to axios or fetch. And I don't have the timeout implemented (as I want to pull indefinitely in my project) but I think it is not impossible to add.
https://github.com/udebella/Github-dashboard/blob/master/src/components/network-polling/network-polling.js

Would be great if you could give me feedback on this component. I'm starting with vuejs, I'm still looking for best practices",1538823757.0
miggadabigganig,"Just use a setTimeout, anything more is over engineering. Unless you want to completely restructure your backend to use web sockets.",1538828106.0
Proxiez03,"This sounds like a great use case for a web socket. That is if you are working with the API dev or are the API dev and can have them implement it. Otherwise, setInterval seems like the best candidate. ",1538836275.0
chris_jung,Is the component rendered and active all the time? If not: use a service pattern or check if the keep-alive property is sufficient.,1538838146.0
brrose,"I wrote an npm package to accomplish this with Vue 

https://www.npmjs.com/package/vue-crono

Let me know what you think!",1538828667.0
CaptainInsane-o,Because you are mutating a computed property. Change that computed property to be a method. Call it in mounted and assign it's result to the data object. Then mutating that data object will cause the Dom to reflect it. ,1538794497.0
bnlv,"You’re posting in Vue, so there’s bound to be a skew in answers. That said, and having done production work with both, that Vue is the better starting point. The documentation is useful and concise, the ways things work together is 95% sensible and predictable and there’s not a lot of scope for variance in how to do things.
Since you are coming at this quite new, Vue also leads you into good routines and practices for how to build systems reactively. In addition to learning the specifics of Vue, you’ll pick up a lot of reusable general knowledge that’ll serve you well in future coding endeavors.",1538782377.0
RelapsedRaccoon,"I had to do the exact same choice two month ago haha. I only knew HTML/CSS, jQuery and some vanillaJS basics. I chose vue because I saw that it was the easiest framework between react angular and vue. I learned by practicing along with YouTube videos (I recommand The Net Ninja), this was super easy to get started and I really love this framework. I think I will stick to it even if react is more powerful, it looks like way more complicated and messy than vue! ",1538783631.0
toqy,"I personally prefer Vue but you won't go wrong learning either one or the other first, overall they are pretty similar. If you are specifically looking to gain experience in something that people are asking for in job listings, then React is probably a better choice. ",1538785331.0
phaedrus322,"Vue is a lot easier to learn from an html/css standpoint. React does everything it can to be it’s own version of existing web technologies but what would anyone expect from Facebook?

I’m by no means saying one is any better than the other. Don’t want any developer nazis jumping up my ass, but there’s a lot I didn’t get in react until vue’s methodology made it understandable to me.",1538789357.0
bnlv,"To add: the official Vue documentation is great, and you’ll want to take this course (by far the best for this framework): https://www.udemy.com/vuejs-2-the-complete-guide/
",1538782473.0
mac_iver,"Im currently working with Vue but have worked with React and they're both really good frameworks, core functionality is pretty much the same. Why people might suggest to start with React I think is the difference in the boilerplate. In react you write ""pure"" JavaScript and then opt-in html using jsx if you build a web app. If you come from a non-web background this would make the most sense, since development outside the web don't necessarily use as much markup. 

If you think about it markup is sort of like types for the browser, theoretically you can write most of your markup as div and it will still look good, but a blind person wouldn't be able to use it. 

Compared to React, Vue provides some more syntactic sugar that makes it a bit easier to develop web applications. The framework helps you to leverage existing tech and you can  write your html, js and css pure and in the same file. 

That said to be a great web developer you need to be able to write good html, css, and js. Since it's harder to learn programming/js than markup, that's were most people have a hard time. Job opportunities will depend on were you come from, React has a head start and considered a bit safer since it's being backed by Facebook. But you shouldn't be too worried about job opportunities if you choose Vue either. 

Hope it helped a bit :)",1538826318.0
bathyscaaf,"I had dabbled with backbone and spent a few hours with angular 1 (didn't care for it) a while before I started with Vue.  Vue was easy to pick up without ever having touched React.  The docs are top notch, plenty of resources out there.  I don't think React would help you learn Vue any more than starting with Vue itself.

&#x200B;

*But* I've the learning curve for React is a little higher, and React is currently used by more companies that will pay a dev, so maybe learning React first due to that?  My back-end dev knows React, and he keeps making comments about Vue being impressively common sense, etc. -- so maybe learning React after learning Vue might be irritating/frustrating in a ""why did they do it that way"" vein.  Don't know.  If your end goal is just to learn Vue, then just start with Vue.  If you want to learn both, start with React and you may appreciate Vue more....",1538900793.0
SuperFluffyPunch,"For fun: Vue

For a job: React",1538812094.0
superMDguy,"I've never streamed before, but I've been doing Vue since the beginning of the year and it sounds like it'd be fun. I have a talk I've given at conferences a couple of times where I livecode building an app that's focused on vuex. Would anyone be interested?",1538792703.0
Hectate,I could steam but it would be embarrassing to have chat call out all my bugs lol.,1538767005.0
wrath447,"I picked up streaming a week ago, and am now completely hooked :) - I try to stream regularly and build+launch full Products.

This week I built https://makerwidget.com (Laravel + Vue.js) Live on Twitch (only the coding part, design/concept came from my Partner)

-> https://shipstreams.com/arminulrich 🚢",1538825173.0
plong0,"I've been doing a bit of practice live streaming of some of my LED project builds.  I was thinking about streaming some coding sessions, but didn't realize there would be an audience for it.

Currently working on an electron-vue app that features a paper.js element with data and events being passed between vue/vuex and paper.js

&#x200B;

Which streaming platform do you think is best for coding streams?",1538795023.0
DAWTSF,"Nothing wrong with videos of people developing in real time, but I want some of the less experienced people out there to know that Adam and other streamers out there prepare for these things and are not doing it off the cuff.

Its also a good thought to remind yourself that they are working with a new project with no thoughts on how anything affects other parts of the app.

Take it to account that this is not necessarily an insight into how experienced people program day to day.",1538806259.0
thestamp,"I can stream tonight, but just like many others, i am beyond green at Vue :P 

I've been going through the trials and tribulations of getting vue set up, and noting down my steps to make it easier. If I were to tackle it tonight, I would look at some business domain service implementation approaches. Lots of research and experimentation!",1538771608.0
Mekhami,link to the adam wathan stream?,1538766023.0
i_ate_god,"You want to use the webpack html plugin which will automatically add any necessary scripts and stylesheets to an existing html page. 
https://github.com/jantimon/html-webpack-plugin",1538764212.0
fireyplatypus,"Is it because you’re importing to the variable Vue (captial V) and referencing vue (lowercase)?

No need to include a CDN link if you’re including via NPM. ",1538764333.0
passoca,"Account created in 'September 28, 2018'. at least 2 comments have the same creation date.

hmmm...",1538755442.0
JJohnson0x,save post,1538752799.0
nricu,Do you mean like this? [https://github.com/ebisbe/skedr.io-landing/blob/master/nuxt.config.js#L44](https://github.com/ebisbe/skedr.io-landing/blob/master/nuxt.config.js#L44) This is my project and it's working. Feel free to look around. I have not done anything different.,1538751526.0
mwassler,"[Here is mine.](https://gist.github.com/mpwassler/6402b63336e5c037ca1385badc70763c) I set it up a while ago and I don't really think about it but it works.

Then I have a folder `assets/styles/` with an index.scss file that imports any of my other files i.e. variables, mixins.",1538768486.0
tonjohn,"In your template, simply use {{ title }} instead of {{ props.title }}

",1538747086.0
Catalyzm,"Thanks for this, the built-in validation is one of the few things I didn't like about Element UI.",1538762485.0
dave__stewart,"Alpha 2 adds new driver functionality which allows you to set per-form validation engines:  


  


[https://vee-element.netlify.com](https://vee-element.netlify.com)",1539096196.0
fucking_passwords,Check in the network tab to make sure the new data is in the request. Print the data inside a pre tag to make sure nothing is getting filtered out. Are there any errors in the console?,1538741721.0
creynir,"How looks your code on server side? I wrote [socket.io](https://socket.io) plugin for vuex with demo example, maybe this demo may  help you to configure your socket connection properly? 

[https://github.com/creynir/vuex-socketio/tree/master/demo](https://github.com/creynir/vuex-socketio/tree/master/demo)",1538731615.0
sajapan,"Can the HTML you generate be wrapped in a `<template/>` tag? That's all a Vue SFC needs to be a valid component. (And files in the Nuxt pages/ folder are SFCs.) If you can wrap it in a template tag, then you could easily import the component dynamically. If not that, there are Webpack loaders available for HTML files that you could extend the webpack config to support.

&#x200B;

Both of these methods would allow you to bring this content in via JS imports and would not require a server to be running to answer the http request.",1538778008.0
DreaMinder,"your problem is - when you run generate, static server doesn't work to serve your html files. Why don't you just run npm run dev in one terminal and generate in other one?",1538721556.0
r1segago,"Happiness... Write vue is very confortable... Vue's learning time is 60 minutes, angular takes too long",1538694255.0
Kyan1te,"Try both, use what you prefer.",1538695250.0
domainkiller,"Vue pulls the best parts of Angular and React, and leaves the ugly out. It’s a joy to work with. ",1538705718.0
Sphism,Not sure about angular these days but I found vue to be. Easy to learn. Elegant code style. Very fast. ,1538725202.0
phaedrus322,Why do you have to pick one? There’s no reason to not learn both. But starting out I would recommend vue. It’s easier to learn and angular will be fairly easy once you understand the concepts. ,1538701365.0
ctorx,It's all about time.  You can achieve the same output with both but Vue is so straight forward you'll save a ton of time up front not having to learn overly complex patterns and techniques.,1538708536.0
ingrown_hair,"With Angular (and React) what you don’t know will cause you pain. If you’re not crystal clear on how something works, you’re gonna have a Bad Time.  Vue is much more forgiving and, for me anyways, when I goof something up, easier to diagnose.

",1538739406.0
ShakeNBake16,"Coming from a professional angular dev working in a HUGE project.. just mess around with angular's module system for a few hours and then make your decision.

Also try to figure out how to nest an angular 2+ project inside a ""portal"".

What I really enjoy about vue is that it doesnt care where its run. I can hook it up to a div and take off. Plus I can hook up a single component or a whole application. Angular wants to own the page and I find that obnoxious.",1539347988.0
elimcjah,"The [Awesome Vue Github Repo](https://github.com/vuejs/awesome-vue#frameworks) has a lot of options.  I am a software engineer for a Fortune 200 company.  In the project I am working on, we inherited a frontend code base that uses [Element UI](http://element.eleme.io/#/en-US).  At first, I wasn't that impressed.  Although its in the ""Responsive"" section, its not fully responsive.  Also, making changes to an element isn't super straight forward.  You have to use the CLI which isn't that big of a deal once you figure it all out.  On the positive, it has a LOT of built in goodness.  [Lots of UI elements](http://element.eleme.io/#/en-US/component/layout) for sure.  It's easy to implement and once you get the hang of it, you can create complex components/views in an extremely short amount of time.

I've heard a lot of good things about Quasar, but I've personally never used it.  The other big names have been mentioned already:  [Vuetify](https://vuetifyjs.com/en/), [Vue Material](https://vuematerial.io/), & [Buefy](https://buefy.github.io/#/).  

Holy shit... I just wrote all of that based on your title without reading deeper into your question. A lot of your assumptions have me confused, esp #3. Also, if SEO matters and you are wanting to do this with Vue, you might want to look into [Google's Progressive Web App](https://developers.google.com/web/progressive-web-apps/) qualifications and Google's suggestions on [Search Engine Optimization](https://developers.google.com/web/fundamentals/discovery/search-optimization/).  

Good luck out there. You're making the right choice getting away from Wordpress.  
",1538707186.0
usx-tv,"Nothing related to UI libraries since many have been shared already, however:

If SEO is really important for your projects, make sure to check and consider Nuxt next time you need to build a project. SSR Vue.js essentially, much better for SEO.",1538724918.0
budd222,"You could look into vuetify https://vuetifyjs.com/en/ Also, foundation > than bootstrap in my opinion, but either work fine. 

I use vue with WordPress projects without creating a full SPA theme. That's what is nice about vue. I have created an SPA theme before using the rest API but I don't really prefer it for themes. 
",1538699270.0
SharpSeeer,"My favorite is Bulma with Buefy. Bulma is pure CSS with no JavaScript.  Buefy is a set of Vue components on top of Bulma. 

I would never do what you do with WordPress. I have that platform. The fact that you do, be and can, good on you. It sounds like you are building these companies websites they can update themselves but not have something that looks like a canned WordPress site. 

I build custom web apps using Vue on the frontend. Fairly complex interfaces, but Vue makes them easy. ",1538700114.0
nzshu,Bootstrap v4 is pretty great with Vue. Vuetify and Vuesax are also pretty good. ,1538697308.0
CaptainInsane-o,But y tho,1538681339.0
Mekhami,"an interesting proof of concept! probably not too useful yet, but maybe some paradigm shift in the future makes this approach more popular, compiling stuff down to wasm or js",1538712580.0
SharpSeeer,"So it can take components written in Python and allow you to use them in your Vue app? Burn it. Burn it with fire. I may be in the minority, but I hate Python. For my own reasons. ",1538700376.0
bandrez,"I work with Django/Vue a lot and the best thing I decided to do was not serve the frontend code from Django, it caused a ton of headaches and splitting them into separate projects gave a lot more freedom and flexibility.

&#x200B;

Frontend hosting: [netlify.com](https://netlify.com) they have an extremely generous free tier and give you auto-deploys for free from github/gitlab.  Use vue-cli to setup your frontend project and use the build commands in netlify to have it build for you automatically anytime you push your code.

&#x200B;

Backend hosting I would suggest Heroku as its extremely easy to setup.

&#x200B;

Django-Rest-Framework for your apis from Django to Vue.

&#x200B;

Django-cors-headers will be necessary as your frontend api requests will now be coming from a different domain.  You'll need to whitelist the ips/domains from your frontend.

&#x200B;

VuetifyJS is a great VueJS design framework, it'll make your frontend development/design go way faster.

&#x200B;

As far as authentication, if you just want email/password you'll be fine, but if you want social authentication [https://django-rest-auth.readthedocs.io/en/latest/](https://django-rest-auth.readthedocs.io/en/latest/) is helpful with django-rest-framework.",1538700478.0
manzha,"I am not an expert, but you might want to read about CD/CI and for hosting I have read that aws is one of the best options, but you also have alternatives as digitalocean and heroku, also another alternative that looks cheap and good for personal projects (or projects that are starting) is scaleway (personally I have just used DO and have no experience with the others).

You also miss to explain wich DB are using, and if you plan it to host it in the same server (heroku or other), if you are using a mongodb I think there's an online service wich a free tier to host your db, so you could use heroku+this other service in the free tier. ",1538696541.0
shiningflint,"I can't help with everything but here are the stuff I learned:

Deploying to heroku skips most of the headaches of devops. It can get you up and quickly share it to everybody.

For front & back separation. Try to have it under the same domain, it avoids a lot of CORS issues which are painful stuff to fix. [This SO answer](https://stackoverflow.com/questions/17980385/separate-back-end-and-front-end-apps-on-same-domain/18000368#18000368) explains it nicely.

Having a dream project is exciting and wonderful. Be careful not to fall into a trap of 'it has to be perfect' & ending up never showing it to anybody.

I got a lot of my learning materials from udemy & tylermcginnis videos (those are react videos, I'm just giving examples since I came from react before jumping to vue). I would put some money into learning if it's my own special project.

Hope it helps!",1538700556.0
mccorkle,"I'm on mobile, so I'll make this short. 

1) you have to acknowledge that best practices are there for a reason. It's okay to say you don't want to follow best practices (like one setup for dev and another for production) but you *must* understand why before you can dismiss it. 

2) django (or any other python framework) will do fine as a middle tier / back end platform. It's a bit of a headache to mix django templates and vuejs templates though, so I recommend picking one for your presentation layer and sticking to it. 

3) ask specific questions, and make the situation you are describing as clear as possible when you do. This makes it easier for people to help you without having to have a long conversation back and forth. 

Best of luck on your project!",1538725770.0
thestamp,Not mobile friendly :(,1538690801.0
vaxo101,Mobile version is no good in the preview.,1538724333.0
rdrigocs,Create a GitHub repo for it and add it as a node module ,1538678420.0
richardtallent,"Two other options for you

1. use git-based package URLs in your package.json. (Disadvantage: have to ""npm install"" for every update, as the URL is versionless.)

2. ""../""",1538718558.0
desiktar,You can also setup a Proget server and run your own npm repo for company packages.,1538681928.0
mico9,There’s also [bit.](https://bitsrc.io) ,1538689208.0
kefirchik,"Can you elaborate on why you want to have the structure match? You should not have to be thinking about build output folder structure. Your assets should be loaded based on their location in your `src` folder.

But indeed, there are quite a few discrepancies like this between dev and production builds. ",1538664390.0
waiting4op2deliver,https://gtmetrix.com/leverage-browser-caching.html,1538673241.0
archivedsofa,"Move your project to Firebase hosting. It's free, it has CDN, HTTPS and yes, caching.",1538662137.0
saintPirelli,Your brain is trying to make excuses for putting the project off. Just start already.,1538652633.0
nricu,"There is no release date for Vue 3 so why bother with that? Further more if you see their roadmap [https://github.com/vuejs/roadmap#3x](https://github.com/vuejs/roadmap#3x) they say: 

\`\`\`

Breaking changes only made where necessary, and will be communicated through the RFC process.

\`\`\`

I think that if you have to start a project start it with what you have and not with it may exists in the future. 

&#x200B;

Just my 2 cents on what I think.",1538645678.0
Pandazaur,"I think you should start your project with Vue.js 2.

I think Vue.js 3 will not break many things and if they do, they'll release an awesome tool for the migration from v2 to v3.

&#x200B;

They did it for migrating from v1 to v2.

&#x200B;

&#x200B;",1538654514.0
HokieFreak,Agreed with the others. Learn Vue 2. It is simple and awesome and Vue 3 will be backward compatible if I’ve understood what I’ve read. ,1538658341.0
HFoletto,"Just start! The new [CLI 3.0](https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb) makes it much, much easier. Also, the interface is gorgeous and really helpful!",1538660019.0
iillexial,This is my first open source project. I would welcome any suggestions and criticism.,1538601860.0
Reashu,`import jsonData from 'path/to/file.json';`?,1538591690.0
nmarshall23,"Did you use the [Vue CLI](https://cli.vuejs.org/) tool to create this app? 

    import jsonData from '@/common/jsonData.json'

Works fine for me. ",1538598967.0
jezmck,Show us the beginning of the json file.,1538599627.0
CaptainInsane-o,"Have you assigned your Json block to a variable and exported it?

Also just save it as a js file. There's no reason for it to be a json file. ",1538601741.0
wishinghand,I recall seeing a similar issue when I was showing someone Vuejs. I  think they used the older CLI but it was surprising that importing data from a JSON file was so problematic.,1538606172.0
randomNext,"Please paste the error messages here as it is impossible figure out what is wrong.

",1538655350.0
krlpbl,Run.,1538601099.0
brs14ku,"Sitecore. Not once, not never. Well....once or twice actually. But never again!",1538632050.0
berni_dev,I used `Dropzone.js` for this. There even exists a vue component for this to make it easier https://rowanwins.github.io/vue-dropzone/docs/dist/index.html#/installation,1538630558.0
toadkicker,It sounds like a job for Uppy http://uppy.io/,1538634738.0
krlpbl,I thought Vuex is for sharing common states amongst the components? Does it also work well as a model layer?,1538605556.0
IAmJSP,"I recently used Firebase in a project, check the source [here](https://github.com/ColossalPercy/reninsane-viewer-map/tree/master/src/store). 

You initialise the firebase app, use the firestore, open a collection and use the `onSnapshot` event of the collection to check for real time changes and then commit that to the store. 

In the store you can have an action to add a document to the firestore then you can access that from all of your components. ",1538620218.0
DarthOobie,I wrote a blog post about my experience tinkering with firebase and Vuex if you're looking for more examples: [https://www.scottstadt.com/2018/07/07/vue-firebase-chat.html](https://www.scottstadt.com/2018/07/07/vue-firebase-chat.html),1538659559.0
pull_my_finger_AGAIN,"On Udemy there is one with Vue and Firebase/store, but I do not recall if they get into Vuex.",1538614207.0
crypt0lover,Vueschool Master class,1538629787.0
kefirchik,"This article provides sophomoric advice regarding deployments to S3. It seems like the sort of ""deployment"" that happens when you're working on a student project or a prototype and not actually shipping software. 

If you're actually shipping software,

   1. You almost certainly are going to use CloudFront (or similar) in front of S3, to get HTTPS, a real domain, and to deal with caching and everything else that CloudFront helps with. This includes gzip compression, so don't go wasting your time manually gzipping your bundles.
   2. Learn how to use the aws cli, including parameters like `--delete`. Don't mess around with rsyncing your `dist` folder in advance, stripping gzip extensions, or the other mess that they have in their quick script. Spend a very modest amount of time reading about the aws cli.



N.B - Why do people write technical articles and then say things like,

> You definitely can make this script better [...] and we probably will do it but not now.

If you're going to talk about a topic, talk about it right, don't just do a surface pass. There is already plenty of lightweight content out there.",1538575545.0
airarrazaval,I use Netlify... does everything for free.,1538630392.0
JinSantosAndria,"Aside from what LaSalsiccione said, get your media managment under control. The site loaded 57.9MB just by keeping it open for 30 seconds. Top of the stats is a mp4 video that is not properly streamed, followed by multiple jpgs far beyond 500kb each. Please also fix your deployment pipeline, your app.js is 780kb compressed and it looks pretty unoptimized.",1538564273.0
LaSalsiccione,"If you want your SPA to be indexed properly by Google then you will need to look into [pre-rendering](https://www.npmjs.com/package/prerender-spa-plugin) or [server-side rendering](https://vuejs.org/v2/guide/ssr.html). I would recommend pre-render if you can.

Also, as an aside, your website took 20 seconds to load before the site is cached and I'm on a gigabit connection. This will be a far greater issue for you than whether Google can index your site.",1538557249.0
ABadWomanDriver,"I actually used this to manage state in a large application at work. The app deals with a lot of complex data objects that contain many relationships. The accompanying api is a dotnet core server that uses entity framework as the basis for its data layer. What’s nice about vuex ORM is that it’s api is very similar to that of entity framework, you can basically pass over the entity framework models and have vuex orm store and transform them while maintaining the relationships. Documentation is good and it’s fairly easy to work with. It is rather new however so you will most likely encounter a bug here and there. The maintainer is very active though and has even provided personal support via its slack channel which ultimately helped me get passed whatever issues I had run into. As already noted, it’s not yet hit 1.0 so breaking changes are not entirely out of the ordinary with updates. There was a time or two where I had to go back and modify quiet a bit of my code to accommodate package updates. 

Edit : one more thing to note - unless the data your application relies on has a fair amount of complexity to it, the package is probably overkill. ",1538539442.0
jemminger,"Looks nice, how mature is it?",1538532411.0
cyberst0rm,"check out vuex pathify, works fairly well to setup",1538533032.0
Zokkar,I don't really understand the use case for this. Why not just store objects as is inside a vuex module?,1538532927.0
RoganTheGypo,"Personally I prefer to have all the heavy lifting in the backend. We use knex in the backend to simplfy the objects as best we can, which in my opinion is a bit easier than stitching all the objects together.",1538549766.0
LtNicekiwi,Looks interesting.. though I'm not sure I have a real world use case for it; will give it a go xD,1538535457.0
muraii,"I’m floundering in the shallow end so apologies if you’re already well beyond this suggestion, but have you looked at axios.js? I’ll soon be building a super-basic app which uses axios to hit an API I’m also building, stores those data objects as Vue objects, then perhaps uses Chart.js for basic visualization.

RemindMe! “Vue to Laravel API”",1538506492.0
cesarsucio,"Funny, I used the stock photo in that third hero image on my [second best post](https://www.reddit.com/r/funny/comments/2zpfb1/do_what_you_love/)",1538547719.0
avenp,"Looks nice, but... seems more like you're trying to promote your product than showcase VueJS. Is there anything out of the ordinary you did here with Vue that you think might interest the community? That's fine if there isn't but maybe this isn't the right place to post this if that's the case.",1538518281.0
OmegaVesko,"1. If your frontend is a SPA (single page application) built with Vue and your backend is Django, then yes, that's how it works.
2. Sorry, can't help you there.
3. This is why you'll sometimes see Vue referred to as a ""progressive"" framework - Yes, you can use it to build an SPA, but you can _also_ have Vue components in a traditional server-rendered Django app, sort of like a modern equivalent to jQuery. When the page loads and Vue runs, it'll compile the templates of the components inside the page on the fly, and ""hydrate"" them in place.",1538491747.0
percykins,"So, I've been gradually transitioning a commercial Django app to use Vue over about the last year and a half, so here would be my answers.

1. You *can* but that's not necessary. I presume that currently most of your pages are templated. For the most part, we use the templating system to dump the relevant server data for a given page into a Javascript global variable which the Vue component for that page then includes in its data. We don't have a SPA, so on the Django side, everything looks the same with views and whatnot. Sometimes that's gotten problematic, such as where the data is enormous and too unwieldy to send over all at once, and in those cases it's not too much of a trick to change it into an asynchronous call to the server. 

2. Vue is simply a client-side library, so I think looking for a specific Vue/Django tutorial is unnecessary. Most of my initial forays were using the [Vue guide itself](https://vuejs.org/v2/guide/). You can easily go through that ""Introduction"" step with your existing Django app right now and see for yourself how you can make your app reactive. This was one of the big reasons we used Vue as opposed to React or Angular - it's very easy to take baby steps. Initially we only made a few pages reactive, and we simply kept *exactly* what we already had on the page, but created a Vue component in code and pointed it at the main panel's ID. Almost all our initial child components were dialogs. 

3. It isn't ""best practice"", but perfect is always the enemy of the good. Start with baby steps and go from there. *Eventually*, yes, you'll want to move to using Webpack and .vue files (although not all our pages are .vue yet by a long shot).",1538499466.0
chanamasala4life,"Re 2: Take a look at these

https://www.reddit.com/r/vuejs/comments/8vgfis/building_a_todo_app_using_vuejs_and_django_as_the

https://www.reddit.com/r/Python/comments/8lays5/building_modern_applications_with_django_and_vuejs
Maybe they're a start.
",1538503941.0
androiddrew,"1.) That is the most sensible, but remember that you could be using vuejs just like you do today with [jQuery in your templates](https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/). Most people I have seen instead choose to use the more advanced webpack tooling and dive right into using ES6, single page apps, and the .vue component files.

&#x200B;

2.) I don't think you are going to find a course specifically for your stack. My recommendation is to learn Django REST and Vuejs in separate courses then just do the work in understanding the different deployment concerns. For example I would reserve proxy api calls from nginx to Django, but if I built a SPA as the client I would use Nginx to distribute the static files that were built by the CLI. If you want to use server side rendering you could create a deployment where Nodejs is calling your Django ReST API and performing the compilation and distributing that to the browser. Many ways you can skin that cat, and no one is going to tell you one way is right or wrong.

I would recommend avoiding Udemy courses, with the exception of courses from two people, Anthony Gore and Maximilian Schwarzmüller.  If you do buy their course you should reach out to them directly for their referral code so that udemy will pay them what their course is actually worth, otherwise all your money really goes to the company not the content creator. There is also [Vue Mastery](https://www.vuemastery.com/) has some higher quality content. As far as free content I think Lara Casts has some decent stuff.

&#x200B;

3.) If you get caught up on ""Best Practice"" you are going to suffer from analysis paralysis. I don't look at things as ""best practice"" it's only best practice for them or for very specific situations. I have adopted my colleagues stance of ""There are no best practices, only better practices"". In that screen cast (which I did not watch) it sounds like he is doing exactly what I said you ""Could"" do in my response to 1. You picked up correctly that you may be missing out on the advanced tooling or benefits that you get from using the newer JavaScript syntax features. So it's up to you, personally I think using the CLI is a better practice that is more scalable, than trying to keep all of the interactions of multiple js files in my head like I had to with Angularjs or jQuery.",1538493041.0
ezaquarii_com,"You might find some inspiration in this Django-Vue amalgamation project:

https://github.com/ezaquarii/openvpn-at-home/",1538503471.0
itshotinjuly,"In a nutshell - here's what you need to do.

1. Two separate apps. One is the django api and the other is vue with a node backend. Configure CORS on the api to only talk with the vue/node front end.

2. It doesn't matter which tutorial you use because you'll have two separate apps and will be utilizing the api for your data. Check out the [most popular Vue course on Udemy](https://www.udemy.com/vuejs-2-the-complete-guide/) and you should be good.

3. Forget that screencast and use this [course](https://www.udemy.com/vuejs-2-the-complete-guide/).

4. You're probably wondering about hosting the two separate apps. You do it like the following. Your django api will live on a subdomain of your website, so api.yourwebsite.com. The Vue app will be the regular domain -> yourwebsite.com. Make sure to enable isomorphic prerendering on your Vue app.

Hope this helps.",1538508530.0
varfoo,"I found this guide useful https://scotch.io/bar-talk/build-an-app-with-vuejs-and-django-part-one. It helped me with a newbie issue I was having, mixing vue delimiters in my jinja views - they both use the double curly braces.",1538544102.0
chanamasala4life,"Not tutorials but three Django-related links from the Awesome Vue.js repo that could get you started quickly:

https://github.com/rokups/hello-vue-django (example project)

Two starter kits:

https://github.com/NdagiStanley/vue-django

https://github.com/vchaptsev/cookiecutter-django-vue

All other links in the repo here: https://github.com/vuejs/awesome-vue",1538748382.0
nannooo,"I feel like the other comments already give you a solid overview of your first and third question. As for your second question. I have built a course that is targeted to Django and VueJS developers, using VueJS as an SPA. You can find it [here](https://courses.djangowaves.com), if you are interested.

If you have any other specific questions, feel free to ask.",1538496572.0
nwsm,"2. If your Django experiences includes Django REST APIs, just watch a Vue tutorial that includes talking to backend REST and it should be the same. If not, find a Django REST tutorial and then move on to Vue.

3. If you want to build apps from the ground up using Vue (ie, not add Vue to a single part of an existing app), you should go with the routes/npm setup. Vue can be used in small pockets of apps, but you'll have a better time using it like a full framework if you are going to build a full app with it.",1538507846.0
hynding,"Unless you're specifically trying to host Vue.js using Django, I'd recommend using Nuxt.js and proxy to your REST API. 

1) Nuxt.js is a highly opinionated, server-side rendered framework for Vue.js that has out-of-the-box tools and configuration settings to proxy external REST APIs. 

2) The nuxtjs.org site is well documented with some very helpful, real-world examples for getting familiar with its concepts. I was brand new to Vue when I started diving in (from an Angular and jQuery background) and found it very easy to navigate and find solutions to my tasks at hand.

3) Routes are built dynamically based on the architecture of your /pages directory. Their routing page (https://nuxtjs.org/guide/routing) diagrams the router configuration built from the directory structure.

Even if you don't go with Nuxt for your project, it's a great way to learn Vue without having to guess at best practices.",1538495601.0
nannooo,"You will need to do 'npm run build'. That Will create a dist folder which will have the files you need. Up next, you will have to add links to the files in your template. 'npm run dev' will not create the files. That's Just for local development.

That's actually the ugly wat of doing that. It's better to separate them completely. If you are interested, I have built a course around that: http://courses.djangowaves.com",1538471760.0
romancm,"I would start withe their documentation, it's very well written and easy to follow.",1538454894.0
inhalingsounds,"Search for Maximillian's course on Udemy. Makes little to no sense to buy books about web technologies, they become obsolete in a matter of months.",1538487655.0
stencillicnets,I'm currently applying both (C++ and Vue) and i figured the official documentation really gets you started and beyond. Further theres a udemy course which i really enjoyed from 'maximilian ...' forgot the last name. He gets you through vue basics and advanced stuff (vue vue-router vuex) und explains it very well.,1538485325.0
archivedsofa,"So you learned C++ first, right? And I'm guessing after that you learned Boost or whatever framework/library you wanted to use.

Same thing with Vue. You need to learn modern ES6/ES7 JavaScript first. Then you won't probably need a Vue book at all.",1538489801.0
bathyscaaf,"The [documentation](https://vuejs.org/v2/guide/) provided by [Vuejs.org](https://Vuejs.org) itself is very good.  Actually it is one of Vue's best selling points (besides just generally making sense in a pretty straightforward way).

A strange place for it, but [css-tricks.com](https://css-tricks.com) has an [Intro to Vue](https://css-tricks.com/intro-to-vue-1-rendering-directives-events/) series by Sarah Drasner --I've only used her bits on Transitions, but what I read is quite good.  In her words 

>""This is *my own* introductory take on Vue. It's the article I wish I had when I was first learning Vue. If you'd like a more non-partisan approach, please visit Vue's very well thought out and easy to follow [Guide](https://vuejs.org/v2/guide/).""

&#x200B;

Books... I haven't read any of them, but I've always had good lucj with O'Reilly and Associates, and this comes up in a quick search (along with several others): [Vue.js: Up and Running](http://shop.oreilly.com/product/0636920103455.do)

Pakt publishing has ""Vue.js 2 Cookbook"" -- haven't really read it yet, they gave it away as a promotion for free a few weeks ago.  It's not really a cookbook in the O'Reilly & Assoc. sense though -- the ""recipes"" are more ""this is how you do this big general thing most people using Vue will likely be doing"" and how to use the various features of Vue.js.  That said, setting up with Webpack isn't until Chapter 8 and Chapter 2 is ""Basic Features of Vue.js""

&#x200B;

&#x200B;",1538525606.0
usx-tv,"The Vue.js docs is a great place to start.

If you want something a bit more in-depth (an extension to the actual documentation), https://www.amazon.com/Vue-js-Running-Building-Accessible-Performant/dp/1491997249 is pretty good.",1538561016.0
njchava,"I know vue and typescript pretty well, but I recently started my first vue + typescript project, and I can tell you that the learning resources and examples are pretty surface level and scarce. Vue wasn't built with Typescript in mind, and that's something Evan You says he'd like to address in Vue 3.0 which will be written completely in TypeScript ( [source](https://medium.com/the-vue-point/plans-for-the-next-iteration-of-vue-js-777ffea6fabf))

So rather than wasting time looking for a good Vue + Typescript tutorial, I would suggest you look for each topic separately, where you will find plenty of thorough examples.",1538438378.0
bearcherian,"Basically where I find myself as well. As others have mentioned, the resources on Vue.js w/ Typescript is not out there, but it is viable. This is what I have setup that has seemed to be helpful:

* Setup your project using the Vue CLI to start with some boilerplate that has some Components with Typescript.
* Use VSCode with the Vetur and ESLint extensions. This and VSCode's TS support will help with seeing errors in your code where you might be doing things the JS way instead of the TS way.
* When ever you find code examples you need, but are not in Typescript, search on how to do it in Typescript, but not Vue specific.

It's an uphill battle.",1538444058.0
bangorlol,"For strict typing and other language features, you're better off looking up a Typescript course. For vue-router and vuex, I mean... the documentation for both is pretty simple and Vue's ""Style Guide"" and lifecycle documentation cover most things with the framework itself.  

[Here's a decent Vuex tutorial](https://coursetro.com/posts/code/144/A-Vuex-Tutorial-by-Example---Learn-Vue-State-Management). They might have one for the router, too.",1538432737.0
keepcalmrollon,"This series just started over on Medium, looks like it's heading in the right direction: [https://medium.com/coding-blocks/the-joy-of-building-vue-apps-in-typescript-part-1-vue-class-components-8291bb6213d8](https://medium.com/coding-blocks/the-joy-of-building-vue-apps-in-typescript-part-1-vue-class-components-8291bb6213d8)",1538531629.0
OldShoe,"Are you sure you need an SPA?

You could use simple server-side MVC and map/route this server-side to more or less static HTML files.

Making a ""template"" in static HTML and then use Vue to make it alive with some data from the server is pretty effective. You can then use some components to make the site more consistent and to not repeat yourself.

I've successfully done an app at work like this. We have to support IE11, but I put my JS code into .ts files so I could use `` for my components template property.

It turns out the amount of Javascript it pretty low for most pages. And the one with more code in it still have less lines of JS than static HTML.

While I'm sure some people want to use all ES6+ features of NodeJS and many ""cool"" packages from NPM, there's something beautiful about less tooling and magic and being in near total control, especially near deadlines.",1538512520.0
ergnui34tj8934t0,"Are you familiar with [Array.prototype.filter\(\)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)?
",1538431851.0
tonjohn,"Have you looked into Algolia? They have support for Vue and make all the filtering, etc. trivial. I’m using it on a side project and love it.",1538537391.0
PaulJP,"Yes. The TL;DR is build a .Net API like normal (using any .Net API tutorial), then use something like Axios in Vue to make calls to it, just like dealing with any other API. ",1538406210.0
_imjosh,It sounds like you don’t know how to use JavaScript. Maybe you should start there before adding the complexity of a framework. ,1538408464.0
LEOtheCOOL,"Let me google that for you: 
https://blog.bitsrc.io/getting-started-with-vue-js-in-net-core-using-visual-studio-efbb43703630",1538414287.0
quinncuatro,Totally. I'm using VueJS with a ColdFusion/Informix backend for a work project. Anything's possible. Just more legwork for disparate technologies.,1538423574.0
crazyeyes420,Doing that every day at work. 👌,1538427323.0
Tzombio,"First, SPA is good for web applications and not so good for websites. If you are building a website that you want rank well in Google you should consider using MPA instead of SPA. 

SPA has it's benefits as you only load data that is needed instead of drawing whole page. This give you more control to transitions when updating content. In MPA you make HTTP call to another URL which draws entire page. You can ""hack"" some transitions and ""SPA alike"" experience in but really its not that easy. ",1538417098.0
N3KIO,"whole point of SSR is to render it on the server side, so when client views it, its instant, server renders it.

I think thats how to simply explain it.

* more technical [https://medium.freecodecamp.org/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d](https://medium.freecodecamp.org/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d)",1538420232.0
tonjohn,"""Prerendering"" and ""static generated sites"" aren't the same but you can use one to help the other.

I'm currently using Nuxt with Netlify to generate a static site (example page [https://admiralce.netlify.com/courses/c1/](https://admiralce.netlify.com/courses/c1/) ). With Nuxt, you can leverage the SSR at build time to generate html files from the prerendered site.

&#x200B;

If you use `nuxt generate` in *spa* mode, the files generated will only contain a loader. This means no SEO benefits. To generate the real html, you need to set the mode to *universal*. 

&#x200B;

If your app has dynamic routes (eg /courses/%CourseID%), you will need to edit nuxt.config.js to generate those pages. Here is a snippet from mine:

    generate: {
        routes: function(callback) {
          routes = Object.values(sourceData.courses).map(course => {
            return {
              route: ""/courses/"" + course["".key""],
              payload: course
            };
          });
    
          callback(null, routes);
        }
      }

In my case, the data is being fetched from a json file. But yours would most likely read from a database or CMS. By setting a payload, my page will get hydrated via AsyncData:

    <script>
    import sourceData from ""~/data/ada_ccepr"";
    export default {
      async asyncData({ params, error, payload }) {
        if (payload) return { course: payload };
      },
      data() {
        return {
          course: sourceData.courses[this.$route.params.id]
        };
      },
      head() {
        return {
          title: this.course.title,
          meta: [
            {
              hid: ""description"",
              name: ""description"",
              content: this.course.description
            }
          ]
        };
      }
    };
    </script>
    


&#x200B;

TLDR: `nuxt generate` is awesome and you should use it :)",1538426677.0
finroller,What is it you are trying to do? [https://en.wikipedia.org/wiki/XY\_problem](https://en.wikipedia.org/wiki/XY_problem),1538415042.0
nwsm,"does this code replace the head's html with the same page you're already on?
Won't this make an infinite loop of stuffing full pages into headers?

If so, you want to make your http request using axios or something similar (or just JavaScript's XMLHttpRequest or fetch), then put the result in a variable, and use the [v-html directive](https://vuejs.org/v2/guide/syntax.html#Raw-HTML) to display it.",1538401570.0
bathyscaaf,"Not sure I'm following you here or why you have it set up like this BUT since the header is outside of Vue and you have successfully accomplished what you want to do via Jquery, just replace your jQuery code with vanilla JS, e.g.

let elem = document.getElementById('head')

elem.innerHtml = \`<span>${myPageTitle}</span>\`

&#x200B;

Or something like that.  I don't have time to test this out at the moment.  Since ""head"" is outside of vue I think you should be able to access it via document.getElementById (if it was inside you would have to use $refs)

&#x200B;

I just saw your other post; I think you could avoid the watcher on route change and just execute the code based on the Vue lifecycle hooks -- like on ""mounted"" for instance.  So once the Vue page has been created or mounted or whatever you replace the contents of the head

Edit: I guess the above should be  elem.innerHtml = \`<title>${myPageTitle}</title>\` if I was following through your various posts.",1538772492.0
Hectate,Why is your subject a question but your post an advertisement?,1538408656.0
,[deleted],1538409047.0
,[deleted],1538409970.0
keepcalmrollon,"I think you'll need to use  `window.location.reload()`

&#x200B;

AFAIK, vue-router never actually reloads the page. It just uses the history API to simulate changing pages in the URL.",1538397579.0
fucking_passwords,"Why do you want to refresh head? There is likely a better way to achieve what you’re after, I’d be happy to try to help if you can provide some more information ",1538399262.0
Quertun,"Don't know vue but is this what you are looking for.
https://alligator.io/vuejs/vue-router-modify-head/",1538399001.0
LynusBorg,"Feel free to ask questions about these news if you have any. 

I will try my best to answer them.",1538430030.0
jsdotjs,You can only read headers in Javascript by making an Ajax call.,1538358857.0
lucuma,You could easily expose this to the client by having the server write it to the page.  ,1538361802.0
inhalingsounds,I don't think you can read headers without a request.,1538368788.0
RoganTheGypo,use geolocation? It requires user permission though.,1538389374.0
elmo61,"No you cannot. Vuejs isn't run until the page is fully request is returned and the page itself says to include the vuejs file. So vuejs only knows able requests it makes itself. (Ajax calls) 

",1538721867.0
richardtallent,"Looks good so far!

Two suggestions:

1. sometimes the number of tags exceeds what could be reasonably sent to ""all"". It would be good to be able to have an event as the user types, so ""all"" can be replaced with search results. This could also provide a means of external validation (i.e., have a prop so the parent can tell the component if the user's current typed-in phrase is valid).

2. Consider allowing the developer to have a scoped slot for the tags, so they can replace the tag markup with markup fitting their application. This avoids the problem of trying to support every possible styling preference.",1538345641.0
OutdatedVersion,This is pretty slick! Excellent job; especially for your first(?) Vue/JS project.,1538344826.0
mastastealth,"I don't for sure, but I _think_ since you're only running off `mounted`, you're just checking the DOM of the component specifically. The HTMLCollection shows a length of 0 so maybe the `for` loop in your template doesn't count as part of the render.

Regardless, I think the better way to do it for a Vue app would not be to manipulate DOM directly, You already loop through every child in the **template**, so have each child do a `:style=""colorGrid(i)""` where you can calculate off the index what color you want for a guarantee return (since you know it iterated the child on _render_).",1538342409.0
ferrybig,"Your issue is caused that `this.$el.children` is empty the moment you try to access it.

Notice how your console shows a information box near the output of your first console log, that is because it says it was just evaluated at the moment you click to expand it, and not at the moment your code was executing. A common trap when using Google Chrome during debugging",1538377687.0
letsjustbefriendz,What error are you getting? What does your code look like for the component? ,1538320059.0
SponsoredByMLGMtnDew,"[\[Original Source for this Comment\]](https://www.reddit.com/r/vuejs/comments/7i18kq/extremely_serious_okay_why_would_i_use_vuejs/dqw27u9/)


You can pretty much just stop doing all of the following things:

- rendering html strings manually or with a templating tool
- loading, compiling, and caching templates
- creating dom elements or fragments by hand
- binding event handlers
- cleaning up event handlers when you are done with the view.
- directly managing view lifecycles (and handling nested views cleanly)
- putting ids or classes on elements just to be able to query them
- caching references to dom nodes so you don't have to query them all the time
- re-cache dom references when templates are re-rendered
- dynamically manipulating elements, attributes, or text nodes
- keeping track of changes to data.
- updating entire views because it's too hard to diff new state against the dom to do partial updates.
- escaping content for dom injection (still recognize security concerns).

Instead of those things, you define views with simple syntax that binds data where it is used, update the data whenever you want, and allow Vue to do the tedious stuff. The hard part is up-front tooling and the learning curve. After that, you just stop doing all of those things except in rare circumstances.

I used to think those things were unavoidable. Boilerplate stuff. Standard fare for a sufficiently advanced app. They just don't come up anymore. They're just classes of code I stopped having to write.

",1538294333.0
RoganTheGypo,"Of course a JavaScript framework stops working when you turn off JavaScript. Believe it or not it will break jQuery.

 Frontend frameworks like react, angular and Vue aren't jist about improving the users experience. Lots of it is about making the developers experience better. They improve productivity and understanding, DOM reactivity is a huge plus in my experience.",1538294361.0
Djbm,"I've been doing web dev since pre-jQuery days. Once jQuery was out I worked on a number of sites using jQuery.

When Angular first came out, I built web apps/sites with that. I've also used React and Vue quite extensively.

Here's what I think the largest differences are:

 - **Easy to see relationship between template and logic**: With jQuery, you create your site in HTML/CSS, then you manipulate that site with the jQuery. The jQuery code is separate from the site structure though. When you start working on more complex web apps or when you work in larger teams, it becomes harder to understand how the jQuery code and the HTML site relate. You can't look at the HTML and immediately tell if there is any logic attached via jQuery. You also can't look at the jQuery and easily tell what parts of the HTML are impacted. With Vue, (if you use it to it's full potential via single-file components) the template and the related logic are well encapsulated so it's trivial to understand how a lot of the logic and template relate.
 - **Performance**: When you're working with larger data sets, the virtual DOM system that Vue and React employs blows jQuery out of the park. When you have tables with hundreds of rows that are asynchronously updated as you scroll, Vue will remain snappy and efficient compared to methods that directly manipulate the DOM
 - **Re-use**: The concept of components that combine the DOM elements with related JS logic and expose a powerful API (via props and events) help you to build up a bank of re-usable components that you can very easily reuse within a project as well as across projects.",1538300164.0
crazyw0rld,"It helps modularize JavaScript for large applications. I run a SaaS app originally built in jQuery, and it got way too bloated and messy that it slows down development and maintenance. Converting to Vue makes it sane again, as well as allows for more asynchronous behaviors that improve UX.",1538294179.0
n0phear,"You should likely look at nuxt.  Might interest you.   Before vuejs I didn’t really enjoy web dev.  Vuejs is enjoyable.  Legibility of the code is fantastic compared to jquery.   You can still use jquery with it, but most people try to avoid the additional baggage, and only use it if they have dependencies they are wrapping like a favourite calendar.  

I’ve known people to use twig with vuejs.  We currently have a 250 page nuxt 2.0 app running in spa mode.  It’s easy to scale a team and get velocity.  Dev immediately know where the page is that they need to work on.  Code legibility makes it easy even in a large app to find what you want because it’s opinionated like rails.

It’s a paradigm shift.   There is a great udemy course for it and for nuxt by the same guy.  He’s an amazing teacher.  

Nuxt has some cool features like statically generating all of your pages.  Makes it insanely quick on any host or even s3 backed by a domain should work.  I’d comment more about nuxt but we just started using it not to long ago and I’ve been to busy to really jump into it deeply.   

Hopefully that’s helpful.

",1538294734.0
hypernautical,"I think there are a few answers, depending on context, one of which being your current stack. Generally the answers would be 1. developer experience (DX) and 2. performance gain.

1. If this question were be repositioned as ""Why should I build a single-page app (SPA) instead of a webpage or multi-page app (MPA)?"", then I think you could find lots of answers on google, agnostic to the framework used (React, Vue, Angular). I think the general answers would be about the benefits of a. ""componentization"" and b. performance of a virtual-DOM and ""reactivity"". 
**Componentization**: Building a larger app by creating smaller, self-enclosed components of code handling a single UI responsibility makes it easier to reuse code and easier to grok your code and reason about its function. 
**Reactivity**: It's usually likely that sites/apps using jQuery directly manipulate the DOM, and the code doing so is as a result of triggers vs. as a result of data change, and so the DOM updates might be firing even when the value displayed on the UI is not changed. DOM look-ups and changes are costly in performance. Frameworks like Vue with a virtual DOM use a JS object to track the state of the DOM and diff the changes before making any changes, which is faster than a DOM look-up and will result in avoiding redundant updates where nothing really changes for the user.

2. In an answer more directly related to your stack, just using a CDN link for Vue and using Vue instances might result in: a. more readable and composable code due the structure of the Vue instance, b. faster load time (Vue is smaller in size than jQuery), c. better user performance (more efficient DOM manipulation). Later if you had need for a SPA, the Vue instances could be converted to single-file components (.vue files) with relative ease.",1538295109.0
devlob,"A lot of the problems you mentioned can be solved using nuxt.js which is a library built on top of Vue.js for server side rendering.

You can fix all the problems you mentioned using nuxt and you make the Javascript code easier to read and maintain.

Its approach solves different problems.

Neither is wrong just depends on the use case.

Here is an example.

Reddit is written in react. People will complain that they download huge Javascript files and the first loading is super slow.

However, the thing is that you don't go on reddit just to visit 1 page. You will most probably spend a lot of time on it.

Thus, after that initial loading the next ones are super fast, since you have already downloaded the Javascript part.",1538294572.0
nikoz84,"The minification and compression of your JavaScript code, Emacscript (advanced JavaScript), import JavaScript with webpack all of this stuff are implemented in vue.js. Compiling your JavaScript for old browser if your use Babel and divide your code into chunk's. 

For large aplication project you need all this stuff for clean code, optimization code and code like in the ""backend"", for reuse your code. 
",1538319511.0
calimio6,"Reactivity

E: so why don't you use react, you may be asking.

Because of the syntax and the CSS within js thing. Using Vue it's not much different from working on scratch code and that is what makes it so good.",1538319678.0
slaphappie,For me it makes make more complex interactive interfaces easy that would get really messy if done in jQuery alone. And also a bonus I didn't see mentioned is the ability to make a PWA easily so your website is basically now offline capable and installable. ,1538322405.0
mmcnl,"There's a difference between websites and webapps (SPA's). Server-side rendered websites can work perfectly fine without Vue or React (React is very similar to Vue although some people may disagree). However, if you're creating a web application that heavily communicates with a REST API backend, then it makes much more sense to Vue or React. I think the benefits of using Vue or React correlates strongly with the degree of user interaction of your website.",1538323377.0
crescentfresh,"I think I was in your frame of mind in the last project I worked on. Had a good functional code base for a multi-page app and didn't need Vue per say, a bit of jQuery here and there and things were all right.

I started to introduce Vue into the app in the tiniest ways just to see how something could work. For example I newed up a `Vue` instance pointing to some element inside a modal just to see if I could make the code driving this one modal simpler, and it worked out beautifully. The code before was using jQuery to query the dom inside that modal directly, building html in my js and using `.html()` to render things, and event handlers were hooked up to the modal buttons (using jQuery as well) to have a functional modal. There were some if/else statements to render ""no xxx found"" in-case there was no data, some manually escaping of data to avoid injection attacks, etc.

All of that went away with Vue. Instead, my Vue instance queried the API on startup (ie when the modal was shown), and set a property on itself. The template iterated said property and the if/else stuff I mentioned was embedded in the template. As users add/deleted things inside the modal I simply `.push()`ed onto my property (etc) and the dom automatically updated. I didn't manually escape anything, that just worked ootb.

That's about when the light bulb went off, and anytime I needed some piece of an existing page to render something dynamically from user input without hitting a server page reload I used a Vue instance (then eventually realized Vue components were clearer). The code just became more ""intention""-based, if that makes sense. It wasn't just jQuery selectors and event bindings littered throughout anymore, it was instead small, well-named methods on a component that mutated its state (properties) in obvious and intentional ways, and the dom (re)rendering just came along for free after that.",1538327609.0
AndrewAtBrisaBoards,"If you want great SEO, straightforward experiences with high backwards compatibility, it is OK to choose the tool that fits the job, which often means not using a frontend framework. It's ok, and it can take a lot of work to build with a framework and then get all of the features that are important to you. I would not use Vue on an e-commerce site.

To say you're not impressed with what it's capable of seems strange to me. Vue/React/Angular (and more) are used to build incredible apps every day. GMail, Facebook, etc are made with frameworks because the code becomes unwieldy very quickly. Each framework has it's pros and cons, but it often comes down to personal preference.

If someone insists you should use a particular tool, don't listen to them. Use what fits the job :)

&#x200B;",1538333619.0
Eiskis,"For me it's a lot about not having to deal with other server-side languages and environments anymore. Everything runs on JS and node, both my development environments and production servers, and on the client-side it's just JS too. This radically simplifies and improves the quality of my code as well as the development experience.

I can share a lot of code between client(s) and backend(s) (although I must say the word is still often ""duplicate"" and not ""share"").

Nuxt is the best experience I've ever had developing a web site (not flawless but still the best), as it's so easy to write complex client-side components in a scalable way. And again, I can share that code with other parts of my project. I use Contentful as my headless CMS and can easily use it throughout a service, not just the public web site.

If you only make the selection of which development environments you get familiar with based on conversion rates, it'll be tough to pull you in into anything new. Honestly there's also probably nothing wrong with the end result that one could come up with using the technologies you mentioned. But personally I was once where you are now, and I always struggled to write complex client-side components that didn't do exactly what some bloated library didn't already provide. When Nuxt came along and was mature enough I ditched what I had even though I had to rewrite a lot of stuff - the quality and scalability was just way better.",1538298620.0
frompadgwithH8,"It's a SPA framework. There are many SPA frameworks. If you're not making a SPA, you don't need it (although it can be used to generate static sites). If you've never used a SPA framework before, you don't know what you're missing. ",1538319649.0
N3KIO,"Nice advertisement for made with vue website, how. much did they pay you? you won't trick me silly wabbit... 
",1538308297.0
LtNicekiwi,Have you tried vuex-router-sync ? https://www.npmjs.com/package/vuex-router-sync,1538270186.0
berni_dev,"Use a method `callConfirmMethod` in your component which calls your external function and give this method to the on click handler 

Alternatively you could put your external function in a mixin and use this 

The problem with your code is that the imported function was not made known to `this`
The onclick handler tries to access `this.confirmWorking` which is not defined",1538239256.0
romancm,https://vuejs.org/v2/guide/mixins.html,1538252396.0
mftr,"You could assign a variable to `confirmWorking` in the `created` lifecycle. 

```
created(){
this.confirmWorking = confirmWorking
}
```",1538240007.0
waiting4op2deliver,"Bolt that bitch onto window, dom bitches love window",1538255542.0
Hadora,"you can `npm run build` to see the service-worker.js generated by vuecli  

if you want to use your own service-worker logic, you can inject option to webpack with the vue.config.js  

[https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa#example-configuration](https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa#example-configuration)

&#x200B;

I'd love to help you more but, like you, i'm struggling to wrap my head around pwa and service-worker.  It took me 2 days to get 100% with lighthouse...

 ",1538231463.0
dougalg,"I'm pretty surprised, because this seems like pretty expected behaviour for a webpack plugin, but unfortunately this looks like an existing bug/feature request in the workbox-webpack-plugin page, see here: https://github.com/GoogleChrome/workbox/issues/1513

I would recommend creating your service worker as a separate project and building it, and then passing that built file to `swSrc`. It kinda sucks ass, but seems like your best option for now.",1538298655.0
archivedsofa,"Others will differ, but I think making queries in your Vue components is an aberration. Vue/React/Angular components should only be concerned about painting to the DOM and receiving user input.

I wouldn't put those queries in Vuex either, because your store (Vuex, Redux, Mobx, etc) should only be concerned about managing state.

The ideal solution, IMO, is simply to create a decoupled API module that only has one responsibility: fetching data.

Then I would use a mediator to do `api.getProducts()` and then write the response to the store.",1538247197.0
Mando0975,"My company uses Vue for our front end, and we use the second example with Vue-Apollo smart queries. We like it because it keeps all the queries in one place, and makes it easy to access their data from anywhere in the component. ",1538237640.0
Mekhami,"In my experience, I use the components (<apollo-query>, <apollo-mutation>) only in more trivial cases where i know i'll never want to do anything with the data other than render it. If you end up needing to perform methods on that data, you won't be able to use computed properties, so you'll have to write a method that takes that data as a prop. Then your method is tied to the shape of the data.

If it's trivial, just rendering, go for it. Otherwise, I'd define your query and data on the apollo object as in the second example.

I've had to rewrite component queries as object queries several times now, so I lean towards using the apollo object queries.",1538237921.0
cyanydeez,"ive found vue-async-computed plus simple-graphql as a plugin works powerfully.

",1538227796.0
jhanschoo,"Whatever works and is maintainable. I found that I didn't use the `vue-apollo` query bindings at all since I very much preferred to put fetched data into the `vuex` store and propagate from there.

edit: the template tag approach is mentioned later on in the docs

https://akryum.github.io/vue-apollo/guide/components/query.html",1538224994.0
DOG-ZILLA,"Both are valid. The first approach looks to be using the new Apollo Boost, where you can query with a provider tag. ",1538224691.0
mwassler,"    function clickLeButton() {
        document.querySelector('.counter button').click()
        setTimeout(() => {
            clickLeButton()
        }, 10)
    }
    clickLeButton()

I click button many times. ",1538176776.0
gustix,Aaand the backend is down.,1538179633.0
slinkywafflepants,Please disable zoom on mobile so I can click faster,1538180823.0
dichra,/r/incremental_games,1538175272.0
plong0,"huh? it doesn't update the total across concurrent browser tabs... this simple website could be more complicated.  


(I get it, it's a cool proof of concept, lots of useful bits happening under the hood)",1538197109.0
Badya122,Illuminati confirmed! ,1538211007.0
nathancjohnson,"""Illuminati"" country? What is this sorcery?",1538275704.0
LinkinMedo,"I was busy this past few days, I will work on version two of the website when I have some free time.

It was really fun watching you guys destroy it 😂

The biggest issue I had was that I had too much interactions with the db which was too much for the small server to handle, I will try to optimize this in the next version and also validate the sent data on the server side.

please let me know if you have any suggestions and thank you again for trying it out, it was such a great learning experience.",1538390795.0
coreycarter4288,The fact that America has almost double the amount of clicks than the next leading country is kinda telling... ,1538193529.0
nzshu,Use lodash throttle ,1538181913.0
AceBacker,I did a little bit and it looks great.  but I can't bring myself to use a product that isn't out of beta yet for a real project.  When you search TODO on the project 3 pages of stuff comes up.  [https://github.com/ionic-team/capacitor/search?q=todo](https://github.com/ionic-team/capacitor/search?q=todo),1538154465.0
alhemyo,"Well the whole point of using vuex as a central state, is to be central. So when you write your api requests you should write vuex actions for fetching data, and than use them wherever you want to. For example let's say that you have a vuex module for users named users.js.

&#x200B;

In it you have state, mutations, and actions.

&#x200B;

so you can fetch your users in your module actions and mutate your state in the action.

&#x200B;

    state: {
        users: []
    },
    
    mutations: {
        updateUsers( state, users ) { state.users = users }
    },
    
    actions: {
    
        // No promise
        
        GET_USERS({commit}) {
            axios({
                url: yourapi/users,
                method: 'GET',
                headers: { // Pass headers here if you need to }
            })
            .then(response => {
                // you mutate your state here in the action
                commit( 'updateUsers', response.data.users )
            })
            .catch( err => handle your error here )
        }
    
        // Promise
        
        GET_USERS({commit}) {
            return new Promise((resolve, reject) => {
                axios({
                url: yourapi/users,
                method: 'GET',
                headers: { // Pass headers here if you need to }
                })
                .then(response => {
                    // you mutate your state here in the action
                    commit( 'updateUsers', response.data.users )
                    
                    resolve(response)
                })
                .catch( err => reject(err) )
    
            })
        }
    }

So then in your component you can use the created hook or any method you like to fetch, and you can reuse this action in other components without writing the axios call again

    // no promise
    
    created() {
        this.$store.dispatch( 'GET_USERS' )
    }

It is also usefull to wrap your action axios call in promise so you can do something after in the component if you want to.

    // promise
    
    created() {
        this.$store.dispatch( 'GET_USERS' )
        .then( // do something when users are fetched )
    }

&#x200B;",1538163855.0
maxxtraxx,"Don't know if you are into PHP but Laravel has an excellent collection of Vue tutorials on their Laracasts network, here is a good one for building a crud app...  https://medium.com/js-dojo/the-ultimate-vue-js-laravel-crud-tutorial-3640baf7eda0",1538157322.0
AJLeeStyles,"Main aim: Less code in development, configurable form - easily to upgrade form, maintain,...",1538102715.0
LEOtheCOOL,You need to configure your webserver to serve your SPA at any route.,1538055352.0
JZumun,"If you're using vue-router (or really,if your app is a SPA as your post implies, not even necessarily due to vue-router), this page in the documentation shows how to set up the server to serve your page for all the routes: [https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations) . For example, if you're using an express server, it recommends  [**connect-history-api-fallback middleware**](https://github.com/bripkens/connect-history-api-fallback)**.**",1538064256.0
parth115,"Yes, unless its backed by localStorage.

If you want to share the vuex store instance across multiple tabs, look into [vuex-persistedstate](https://github.com/robinvdvleuten/vuex-persistedstate)",1538052828.0
androiddrew,There are newer APIs coming online in browsers that can also allow for sharing across tabs. Your biggest problem will be that there is no polyfill possible for older browsers if you try to use them.,1538079704.0
CWagner,yes.,1538052671.0
nricu,Wondering what's your case? It's a really interesting question that has never pop up in my head. Do you mind explaining?,1538083036.0
exxy-,"VueJS implements a [Virtual DOM](https://medium.com/js-dojo/whats-the-deal-with-vue-s-virtual-dom-3ed4fc0dbb20).  This makes it more challenging to [use VueJS with libraries like Jquery](https://vuejsdevelopers.com/2017/05/20/vue-js-safely-jquery-plugin/), but still totally doable if coded a particular way.  In your case, `stream.js` does a few things that compete with VueJS.  

First, `stream.js` doesn't appear to written in an import friendly manner, it doesn't encapsulate itself in a callable function and it includes its own `$(document).ready(function() {});` call which doesn't allow you to control when it's called.

Second, and most important, it uses Jquery to update elements in the DOM directly by their `id` whenever a new message comes through the socket.  
> The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM [..]. This process is called reconciliation.

If Jquery is successfully updating those elements then VueJS is likely immediately overwriting that.

Two ways I can think to make this work: (1) repurpose the code from `stream.js` and replace the functionality that `displayData` provides by outputting an object/array of data and using Vue to render that. (2) use the script as is, but make sure the target elements are outside of your Vue's root div, basically separating Vue and this script.

",1538009723.0
CaptainInsane-o,"What is your goal?  There might be an easier way than grabbing at someone elses code. 

It does use socket.io and jquery.  To get this to work you would have to install both of those via a package manager like NPM.

In your component you would import that file and import your dependencies where you need them.  Then you can reference that file in your vue component by importing the stream.js file and accessing its variables.",1537998236.0
Yodiddlyyo,"I hope I don't come off as sounding like a jerk, but it just from the way your phrased the question and the question itself, it sounds like you don't know how to use Vue at all, and you may not even know javascript all that well. 

This is one of those things that's literally impossible if you don't have a foundational understanding of what you're working with. If you did, you'd understand that the way you phrased the question doesn't make sense, and you could figure it out in one sitting.  For example, I understand what you're trying to do, but 

>The stream.js file allows you to put certain element ids and class ids into divs that will change the value of the div.

makes no sense at all. 

You should go do some online courses to learn javascript, and then watch some videos and read some articles as well as the official vue docs and learn how to use Vue first.

It would be like if you were trying to translate a calculus book into german, but you don't know how to speak german, and you don't know calculus.",1538025624.0
thinkadrian,"It’s a small JS file, so I recommend just mimicking the behaviour in a pure VueJS project rather than trying to shoehorn it in. That JS files is built for that HTML alone.

Start from scratch.

There might even be npm modules already built that fulfil your need.

",1538033791.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/webdev] [\[VueJS Question\] How would I include these files into a component and have them work?](https://www.reddit.com/r/webdev/comments/9j6nl2/vuejs_question_how_would_i_include_these_files/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1537996896.0
archivedsofa,"Use your browser's perf tools. Even React has given up on trying to measure performance with JS.

https://reactjs.org/docs/perf.html",1538021142.0
btfrost,Google's Lighthouse chrome extension will have that info and much more. It's generally useful  pointing out areas of improvement.,1538174528.0
RoganTheGypo,"a. yes, all though i've never actually used it, I'd hazard a guess at you mount vue in the index.html (or maybe the index.chtml) page or whatever they call them. Personally I'd seperate them though.

b. This is a personal preference thing I guess. I prefer to keep my front and back end separated tbh. I'd write a ASP core api and a vue cli frontend",1537973666.0
ctorx,"(A) It depends on what you're doing.  If the entire app is an SPA you don't need to use ASP.NET core to serve the entry point (index.html) though you could if you wanted.  Typical setups with vue cli or webpack alone will create the index file for you, which is independent of asp.net.  You could also wire Vue directly to an element on an existing asp.net server rendered page.  Again it depends on what you're doing.

(B) The API will be written in some server side language be it php, node or asp.net.  It doesn't matter what you use as Vue does not force anything on you in this regard.

(C) Google ""vue with dotnet core"" and you'll find a ton of examples.",1537985662.0
LEOtheCOOL,Its an alternative to React.,1537994186.0
DanijelH,"With the release of new Vue cli 3 and it's UI, I would use that for projects and output build files into wwwroot. So steps would be like in the answer.

[https://stackoverflow.com/a/52500928/5265610](https://stackoverflow.com/a/52500928/5265610)",1538050190.0
josh1nator,Just use the mounted() hook of the about-component and start your CSS animations (or you could use pretty much everything thats working in vue from there).,1537978514.0
alhemyo,"You can bind classes to the elements that get true when you route changes.
You can watch the route to track change. 
You can also use beforeEnter function inside your route.",1538006274.0
usx-tv,"I always separate my back-end from my front-end on a project level.

Just have a new folder / repo for your Vue project, and consume the APIs when needed",1537967549.0
RoganTheGypo,"IDK about anyone else but the stability isn't great in 5.0, I know its beta and that's cool but its a bit of a chore seeing whats in the store especially at scale.",1537956461.0
doubouil,Any idea why the router tab is not showing anything in my app ? I'm using vuex-router-sync and I can see a PR for a test about it (https://github.com/vuejs/vue-devtools/pull/510) but not much more so I assume it's supposed to be compatible ?,1537990950.0
CaptainInsane-o,"Try this.

<tr v-for=""(internship, index) in internships"" :key=""internship.id"">

And where you are passing the internship to the modal try 

:internshipData=""internships[index]""",1537984241.0
fullheap,"I don’t think your bug is what you’re assuming it is. I think it opens **all** modals.

Look at the `v-if` of the modal, how is it supposed to know which one to open? You’re just telling it `true` and all of the `v-if`s are suddenly `true`, causing **all** modals to Open simultaneously.",1538218617.0
xenetics123,"Something like...

&#x200B;

    <button @click=""authenticate"">Sign In</button>
    
    methods: {
      authenticate() {
        // checkAuth is some API 
        // not sure how you handle auth in your app.
        checkAuth({ username, password }).then((res) => {
          if (res.status === 200) {
            this.$router.push('/dashboard')
          } else {
            // show notification
          }
        })
      }
    }

&#x200B;

&#x200B;",1537931193.0
alhemyo,"To make sure you are rly authenticathing your routes you should use navigation guards.

Otherwise if i just type the route i can get trough without sign in.

https://router.vuejs.org/guide/advanced/navigation-guards.html",1538006609.0
Downvotes-All-Memes,"Well it could be more complicated with vuex and other stuff, but I think you’d basically want to make your login check in a component and, if successful, use the router.push() method? function? To navigate to /dashboard. ",1537931281.0
inhalingsounds,"I've been working with Vue ever since v2 was launched professionally. Worked with it in two large applications (still going) and a couple of small projects. I've also launched four differently sized applications built on top of Nuxt, three of them coupled with Express, and one with Adonis (using Adonuxt).

Let me know if you need a hand!",1537929454.0
KodiakSA,Sent you a DM,1537907697.0
Kindrik76,"I can help you with that,",1537907900.0
DKDreams,I've been working with Nuxt for some months now and love it. Also saw already some good courses about it so I can compare.,1537912395.0
watMartin,"I’ve worked with nuxt for almost 18 months now, and have found your tutorials helpful in the past, dm me if you’re interested!",1537922142.0
autoboxer,"I’d be happy to review it from the perspective of someone very familiar with JavaScript, moderately familiar with Vue, and not familiar with Nuxt.",1537908446.0
ezio93,"This is one dirty way of doing it. On your `router-view` add a `key` property binding, like so:

```
<router-view :key=""$route.fullPath""></router-view>
```

This will force the `router-view` to reload based on the change that occurs in `$route.fullPath` (assuming that your query or some URL param changes). You can use any value in its place of course, and changing that value will cause a full refresh of that view.

This works but is especially dirty because this violates the principles of a componentized single-page architecture since it reloads the whole view instead of the parts of the view that require a reload.",1537905167.0
CaptainInsane-o,Give us an example. I'm not understanding the problem ,1537903258.0
bensmuda,The vue-router docs has a section on fetching data. Pretty sure you want to look at that. Basically either add a watch on $route or use navigation guards in your component.,1537910262.0
midasso,"Maybe you are using <keep-alive>? If you exclude the component you are talking about, it will be reconstructed everytime.",1537904303.0
rnenjoy,"This is what i do:

&#x200B;

in nuxt.config.js

&#x200B;

 

`// Proxy`  
  `proxy: {`  
 `// Proxies /graphql to http://localhost:3001/graphql`  
 `// We tell the graphql client to connect to host:sameport/graphql to not get cors protection`  
 `// Then we proxy it locally to the real graphql server that is located on the ports below.`  
 `'/api': { target: 'http://localhost:3001', ws: false },`  
 `'/graphql': { target: 'http://localhost:3001/graphql', ws: false },`  
 `'/graphqlws': { target: 'http://localhost:3002/graphql', ws: true },`  
  `},`

&#x200B;

And then i use nuxt-proxy module",1537907797.0
shif,"If it was up to me i would use nginx location blocks, I used a framework called quasar recently and it has requirements similar to yours, solved it by doing location blocks, if the url started with `/api` it redirected the request to php otherwise it would route to the index.html from the built app, it worked out nicely",1537908728.0
thasmog,"Got it to work !
`Alias /v1 /mnt/c/Users/AlanAasmaa/Code/app/public`

    <Location /v1>
      ProxyPass !
      Order allow,deny
      Allow from all
      Require all granted
    </Location>  ",1537960801.0
thiswasprobablyatust,"High quality shitpost bud.

There's a super lightweight alternative called ""Vue.js"", you should check it out.",1537887131.0
finroller,"As someone evaluating nuxt atm, I'd like a more elaborate explanation. I've been building stuff with it for a while and have't had much trouble. Not a fanboy either, I'd really like to know any and every thing that is wrong with nuxt before I recommend it to be used for this product. Errors major and minor.",1537888588.0
whofromwhere,"As someone running a nuxt app in production with hundreds of concurrent users, I won't disagree that it's messy and there's some disorganization within the nuxt project/community, but I do believe that it works well in production, in fact it runs much more efficiently than I was expecting.",1537895556.0
Hwarner03,"I somewhat agree that auth does not seem ready for prime time. Lack of documentation and examples. I ended up doing my own client auth and I’m glad I did.

Otherwise have only had good experiences with NUXT + Express. Looking forward to the 2.0 upgrade.",1537892622.0
r0ck0,"Hey there... I've had a couple of frustrating days trying to get Nuxt+typescript+apollo working together so I'm feeling a bit like you were.

Wondering where you are now with all of this?

I too really liked the idea of Nuxt, and been mostly happy with it... but I seem to be spending more time troubleshooting what seems like a mysterious blackbox with too many parts for me to understand.  

I've had some super simple bugs in my own code, and the whole thing explodes with some very vague low-level errors that make it sound like there's bugs in the underlying libraries... when it's actually just a simple bug in my own code.  But it can take a day or more to figure that out, and a couple of times has involved me basically starting the project from scratch and adding my own code back in again a piece at a time to isolate the problem.



Every time I have a problem I'm not sure whether to search for nuxt-specific results or not, and the creators don't seem to have much interest in getting nuxt to play nicely with Typescript, so more complications and niche variables here too.  I don't even know what to search for with most problems.

From https://github.com/nuxt/create-nuxt-app/issues/23

> we still have a long way to go with TS. In case you plan to build full-featured heavy SPA - TS currently is not the way to go since you will face quite a lot of bugs in Nuxt dependencies, most of which weren't even build with TS in mind, but again, that's just my experience.



Also I've read multiple descriptions of the differences between ""modules"" and ""plugins"" in Nuxt, and still totally confused.

> Most nuxt-comunity modules broken

This seems to be my experience too. Especially with typescript thrown into the mix.

I'm currently fighting with vue-apollo, and have no idea why it just silently does nothing with Nuxt.  So many of the examples projects I'm downloading and stuff I'm reading online do things in wildly different ways (probably because they're all different version numbers) to the point that I now have about 6 example projects downloaded and I don't understand how to get Apollo to work with any of them aside from a fresh plain non-typescript non-ssr vue-cli created project.

I want the most ""mainstream"" Vue set up I can have, but with SSR... it would be amazing if it became a core Vue feature rather than needing Nuxt, especially with Vue itself being ported to typescript for version 3. 

I don't care about the filesystem layout stuff that Nuxt comes with, I'd rather do the routing myself anyway.

Even considered giving up on SSR altogether seeing apparently Google can index sites with content from AJAX now anyway.  But it's no good for social media sharing and stuff like that, and the load times probably harm your SEO even with Google anyway.

Were you using Nuxt mainly for SSR, or some other features too?

I see ream + vueneue mentioned here in the thread.  Have you tried them?  

Any suggestions in general for the most ""mainstream"" way to do Vue+TypeScript+SSR?  

I've also been wondering if I might be better off even just trying to do SSR entirely myself from https://ssr.vuejs.org/ rather than trying to figure out how to do everything the nuxt way.  Maybe it would be a better investment of my time and give me a better understanding of it all.
  But I'm still pretty new to node + vue, and don't know anything about webpack and all of the terminology that comes with all this stuff.",1540717121.0
RoganTheGypo,"I got round it.

I couldn't see the wood for the trees and focused on the mjpg instead of the component.

I now render the component dynamically, in this case when the tab is set to 'facility view' it will only render the component on mounted collect the mjpg url. It's automatically destroyed by vue when not in view... Seems obvious now!",1537876546.0
androiddrew,"Yeah, i filed an issue back in beta where i was dealing with all those settings. I don’t remeber how to do it off the top of my head, but It can be done. You just have to find the correct setting in the vue config file. Read through this and get googling. https://github.com/vuejs/vue-cli/issues/1954",1537876691.0
TomdanizerWork,"I used '[indexPath](https://cli.vuejs.org/config/#indexpath)' to specify where I want the output file to be.
To set what template it used, I used the chainWebpack config option that looks something like this:

    config.plugin('html').tap(args => {
        	args[0].template = 'index.template.html'
        	args[0].inject = false
        	return args
        })

index.template.html is located on the same level as src folder.

[baseUrl](https://cli.vuejs.org/config/#baseurl) might also be something you're looking for.",1537878883.0
CWagner,"It does not seem that bad…

The relevant part is this: 

> If you become rich through modifications, related works/services, or supporting the original work, share the love. Only a dick would make loads off this work and not buy the original work's creator(s) a pint.

Source: https://github.com/RIAEvangelist/js-message/blob/master/licence.md",1537856778.0
KimJongIlLover,Did you actually read the license in question?,1537940525.0
fk_the_system,Any news ?,1537998753.0
puchnazisintheface,Find the code and start a replacement project. To hell with these people.,1537904538.0
PaulJP,".Net framework can do everything core can do except cross platform stuff, so I'm not sure what response you're expecting specific to framework.  There are some old project types only available in Framework, but I'd strongly suggest not using them at this point anyway (they have their uses, but if you're looking at using Vue then your project is not one of them).

Right now I'm working on a solution template with a 
.NET API back end, Vue front end, and publishing it as a single app (importing the Vue output to the API's wwwroot directory and serving it as the API's homepage).

I'm using the Vue Typescript project template for the Vue portion. Little different to get used to vs javascript, but so so nice once you really get into it what with predictable types and intellisense support. Only real annoyance is that it can take a few minutes to launch a debug session - I haven't dug into it but it seems like VS builds the Vue project then triggers Node to build it too. Once it's running though the default template has live recompilation set up so it's not really noticeable outside the initial launch.",1537836226.0
justrhysism,"I’ve been using VS for 10 years, and whilst it has come a long way - I wouldn’t recommend it for FE development. 

But it can be done. However personally I find the tools for FE dev in the .NET world very clunky; but I guess they’ve been designed with .NET devs in mind. 

Having built many Vue projects with a .NET backend I’ve always run them as separate projects. It is possible to run Vue (and, if you must, bundle your JS) from within a single MVC project- but personally I find it messy and prefer to separate client and server. ",1537867902.0
Xlfishbone,"I currently use a 3 project approach. My circumstance requires initial security. I keep both Studio and Code open while working. 

Solution 
  - web site
  - API
  - MVC

Web site ( client app):
I use a web site project type bc i have to use TFS and it plays better in the initial stages bc your adding so many little files. All the front end code is here Vue and Stylus. I use web pack to build it all and put it in a dist folder. That is pulled out later using Cake. 

During development I use web pack dev server pointed to a different port than my MVC app so I get hot reloading and all that good ness. 

I pretty much only use Code when doing front end. The experience is way better imo. 

Api:
Regular old Api. Secured via JWT. 

MVC:
Only a wrapper for the front end code. I do this so I can run security server side before handing the JS to the client browser. That way unauthorized users never get the JS. 

This also allows me to preload some data like Api end point address, config values and drop down list entries so I don’t have to do it later. 

In my layout I check for release and if true link to the prod front end stuff. If not I link to the url of the web pack dev server. 

Debug settings:
The Api and MVC are set to wait for another application to call them. So no browser runs when you start debugging. Since we aren’t using session for anything you can almost hit this once in the morning and debug all day. 


In Codes command window I run npm start to kick off my dev server and hot reload stuff. I use the chrome debugger for Code and point to the URL of the MVC site. This allows me to debug ES6 code from the correct file. 

This isn’t always perfect but gets the job done without me wanting to go full office space on a laptop. ",1537901112.0
weffe,"I have about 8 months experience using .NET Framework (specifically .NET Web API) with React instead of Vue but they can be interchanged pretty easily. I actually like the .NET Web API as it is pretty solid when developing a REST service. I take advantage of Attributes (Routes & Http) heavily throughout my application to make things more readable/easier when developing. Another thing I really like is strongly typed params for my controller methods so I typically have a folder where I declare my classes for the different params my methods might take. Overall, I enjoy coding up a REST service using .NET Web API and don't have any big issues with it.

&#x200B;

For the frontend, I typically use [Axios](https://github.com/axios/axios) to manage my API methods. If I have to make a severe change to some naming on some REST endpoints, then with Axios it's not too much of a big deal updating the routes.

&#x200B;

For a development standpoint, I typically just use Visual Studio for .NET and then have VS Code open for my React project or in your case a Vue project. I find that VS Code does a good job with React/Vue support that I don't mind having two separate applications open for development. Although I do understand it can be kind of cumbersome to have to start both up for development but that's something that I just don't mind too much.",1537853018.0
raublekick,"The way the completely cohesive single-project configurations works requires a lot of behind the scenes things being stitched together. 

At the highest level, if you make the \_Layout.cshtml file your entry point for your Vue app (like the index.html file if you created a new Vue app using vue-cli) you've basically integrated your Vue app into the .NET pipeline. Any time you click in your browser's URL bar and press enter, your application will go through a full request cycle through .NET. 

To make your codebase nice you're going to have to configure webpack or whatever packaging tools you use to output builds into the correct, desired directories. In .NET Framework I guess this location is relatively arbitrary, but it's probably going to be outside the src directory for the rest of your front end, and you need to tell webpack where to put that output.

Then you need to make sure Visual Studio is actually running the webpack scripts on build or whatever events you like. You can use the built in task runner for this. 

This is pretty much all the ""integrated"" projects are doing, like the Angular and React templates. Someone just did the work to make it all work nice in Visual Studio.

However, IMO, it is much easier to just use .NET for what it's good at: the web API, and use vue-cli for what it's good at: generating a front-end with workable defaults. I'm much happier after I gave up trying to make everything work nicely together in a single project in Visual Studio. ",1537893990.0
vuestrik,"I have always preferred to use Vue CLI and having the client project somewhat disconnected (without csproj etc) from the .net stuff. I use Visual Studio Code for Vue and VS 2017 for .Net. In debug I launch API and client App separately (Vue from the console). It seems clunky at first glance but actually I prefer it over alternative solutions such as the aspnetcore-Vue-starter or similar ones. Such solutions are good when you don't know modern frontend development but apart from that they are an unnecessary abstraction.

Regarding production builds, I run them in the cloud ([visualstudio.com](https://visualstudio.com)) where creating a combined .net and Vue build is pretty trivial + I set the Vue dist folder to [asp.net](https://asp.net) wwwroot so the Vue app is served by the [asp.net](https://asp.net) in production. We prefer a similar approach also at my work for our production Angular 6 app. I do understand that this approach seems weird, I had the same feelings when I started with React and Webpack in 2015 - ""oh gosh, I have to use console? I cannot just press F5 and make my React app launch?"". But since then I have never looked back...

One more thing, few weeks ago I had to troubleshoot a React app that I saw for the first time. This app was based on an outdated version of the [asp.net](https://asp.net) spa template. It used some deprecated [asp.net](https://asp.net) related npm packages and it wasn't that fun to make it work. It made me angry since it took me faster to update an equally old (about one year) and big Vue app from Vue CLI 2 to 3 + all packages to latest versions (vee-validate, vuetify and few others). To sum it up, modern front end CLIs are high quality (somewhat), well documented and always up to date. Introducing something like [asp.net](https://asp.net) SPA templates on top of them is introducing additional and unnecessary dependency that might in the end complicate everything.",1537913331.0
fidelcastroruz,"Maybe this helps:

You can use the aspnetcore the React template project and convert it to be vue by using a basic project created by using vue-cli and moving some of the configuration.

Look at the JavascriptServices extensions, they added recently a series of apis which allow to use the vue-cli infrastructure by proxying the calls from the kestrel/iis host, this will allow you to have both the api and files together. You could even use mvc views instead of the index.html template/generation.

Warning: some assembly required",1538025233.0
chrissilich,The vue docs are actually among the best docs I’ve ever seen for a js framework. ,1537834328.0
ioslipstream,Laracasts has a completely free course covering Vue. ,1537829526.0
elimcjah,"For real, the docs for all official [Vue.js](https://vuejs.org/) libraries are phenomenal and read chronologically like a book. These libraries, tools, and style guide have great docs:

  - [Vue Docs](https://vuejs.org/)
  - [Vuex Docs](https://vuex.vuejs.org/)
  - [Vue Router Docs](https://router.vuejs.org/)
  - [Vue Official Style Guide](https://vuejs.org/v2/style-guide/)
  - [Vue Loader Docs](https://vue-loader.vuejs.org/)
  - [Vue CLI 3 Docs](https://cli.vuejs.org/)
  - [Vue Devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en)

For everything else Vue.js related the [Awesome Vue](https://github.com/vuejs/awesome-vue) list on Github has a TON of options.  Good luck.  Hope this is helpful. 


Just a quick Edit:
Nobody hires someone because they are a good Vue developer. I help with hiring(my project has a frontend that uses Vue, Vuex, Vue Router, Vue etc.) and we look for strong programmers, specifically we want people that are strong JavaScript devs. Slightly more important than your JavaScript skills is your ability to work well within our department.  Like the person below said, likability. I can't stress how important it is in the interview to be yourself(unless you're an asshole, then be someone else).  We have to work together in occasionally high stress times.  Its important that you are able to meld into the existing team.",1537842926.0
Camopy,[This](https://www.youtube.com/playlist?list=PL55RiY5tL51qxUbODJG9cgrsVd7ZHbPrt) is a good start,1537847233.0
LeoPantero,Are you coming from jQuery? I'm working on a live course that aims to do exactly this. You can shoot your email here if you're interested: [Link](https://goo.gl/forms/NfIPeawyG2eugKfh1),1537901900.0
crypt0lover,I have watched many courses/tutorials so far. One of my favorites is vueschool.io and its vuejs master class. Its not for absolute beginners though. You fan checkout first their other courses and then sign up for the master class. The lecturer is core member and he shows valueable techniques,1537942084.0
bink821,Anything by Maximilian Schwartzmuller is usually fantastic. He has a bunch of YouTube videos and some really good courses on udemy,1538978659.0
nickelpony,Can't really tell from your error but generally you'll need to build your vue project in release mode \`npm run build\` and then run \`firebase deploy\`,1537869333.0
Aerosphere24,"Are you using visual studio code?

I have a colleague that has a similar issue when he sometimes saves an scss file that is watched by gulp... we haven't really looked into it yet though, but it might offer you a direction to look into ",1537897392.0
Cheshamone,If you are ok with dropping some money on it Adam Wathan's [Advanced Vue Component Design](https://adamwathan.me/advanced-vue-component-design/) is pretty good for advanced concepts. He's got a couple of blog posts that are worth reading even if you don't want pay for anything so if nothing else check those out.,1537815626.0
Boydbme,"I built a website for a local tech unconference that uses Nuxt.js (just an opinionated way of using Vue to get server side rendering goodness). There are plenty of examples of Vue components in the project.

Source: https://github.com/wearebraid/be.camp
Website: https://be.camp",1537829120.0
Arkhenstone,Looks great but totally off on mobile. Headers and content are not reliable. Used :Firefox on Android,1537805857.0
CristiJ,"Looking great but on the website, it doesn't load any data for the tables ",1537798595.0
dodotdot,this is very cool,1537844250.0
csgo-dead-game,Link is not working,1537811665.0
tgitz,"Looks good , but not responsive in my Android with chrome ",1537838430.0
aemadrid,Looks really off in FF for some elements: [screenshot](https://my.pcloud.com/publink/show?code=XZY0se7ZTVbb3BNNIv8qJQteEHToIJKU05VV),1538008773.0
finroller,":class=""{ 'css-class-name': item.checked }",1537738623.0
Norrbrinken,"I'm just guessing, but I think you can use ref on the input to get if it is checked.

<input type=""checkbox"" ref=""foo"" />

And in methods console.log ""this.$refs.foo"" there might be a checked value you can use",1537738800.0
r4ymonf,">`""bootstrap"": ""^4.0.0-alpha.6"",`

Well, there's your issue. If you don't get it, update bootstrap to the latest version (4.1.3).",1537673903.0
StrangeQuark9,"If you need any other info I am happy to find it, it is just frustrating trying to setup a project when i want to just get going building things! :) have a nice day anyway",1537660152.0
galaxymover,Anything show up in the console? JQuery is set up properly?,1537660227.0
StrangeQuark9,"This is a screenshot of the ""form group"" as built in my setup:

https://imgur.com/j4RfYqd

You can see the buttons aren't quite  right and then the appended input group text blocks are not appearing properly at all",1537662619.0
shanmukhateja94,Could you setup a JSFiddle or a Gitlab repo for us to view? It's hard determining the cause without the source in your case.,1537673286.0
doubouil,"bootstrap-vue already ships bootstrap, so you don't need to import both ! Here's my setup where I import only the needed components when I need them :

    import Vue from ""vue"";
    import Layout from ""bootstrap-vue/es/components/layout"";
    import Button from ""bootstrap-vue/es/components/button"";
    import Link from ""bootstrap-vue/es/components/link"";
    // import { Popover } from ""bootstrap-vue/es/directives"";
    import ""../assets/scss/bootstrap.scss"";
    // Vue.use(Popover);
    Vue.use(Layout);
    Vue.use(Button);
    Vue.use(Link);

Bootstrap.scss :

    @import ""../../../node_modules/bootstrap/scss/functions"";
    @import ""../../../node_modules/bootstrap/scss/variables"";
    @import ""../../../node_modules/bootstrap/scss/mixins"";
    @import ""../../../node_modules/bootstrap/scss/root"";
    @import ""../../../node_modules/bootstrap/scss/reboot"";
    @import ""../../../node_modules/bootstrap/scss/type"";
    // @import ""../../../node_modules/bootstrap/scss/images"";
    // @import ""../../../node_modules/bootstrap/scss/code"";
    @import ""../../../node_modules/bootstrap/scss/grid"";
    // @import ""../../../node_modules/bootstrap/scss/tables"";
    @import ""../../../node_modules/bootstrap/scss/forms"";
    @import ""../../../node_modules/bootstrap/scss/buttons"";
    @import ""../../../node_modules/bootstrap/scss/transitions"";
    @import ""../../../node_modules/bootstrap/scss/dropdown"";
    @import ""../../../node_modules/bootstrap/scss/button-group"";
    @import ""../../../node_modules/bootstrap/scss/input-group"";
    // @import ""../../../node_modules/bootstrap/scss/custom-forms"";
    @import ""../../../node_modules/bootstrap/scss/nav"";
    @import ""../../../node_modules/bootstrap/scss/navbar"";
    // @import ""../../../node_modules/bootstrap/scss/card"";
    // @import ""../../../node_modules/bootstrap/scss/breadcrumb"";
    // @import ""../../../node_modules/bootstrap/scss/pagination"";
    // @import ""../../../node_modules/bootstrap/scss/badge"";
    // @import ""../../../node_modules/bootstrap/scss/jumbotron"";
    @import ""../../../node_modules/bootstrap/scss/alert"";
    // @import ""../../../node_modules/bootstrap/scss/progress"";
    // @import ""../../../node_modules/bootstrap/scss/media"";
    // @import ""../../../node_modules/bootstrap/scss/list-group"";
    // @import ""../../../node_modules/bootstrap/scss/close"";
    // @import ""../../../node_modules/bootstrap/scss/modal"";
    // @import ""../../../node_modules/bootstrap/scss/tooltip"";
    // @import ""../../../node_modules/bootstrap/scss/popover"";
    // @import ""../../../node_modules/bootstrap/scss/carousel"";
    @import ""../../../node_modules/bootstrap/scss/utilities"";
    // @import ""../../../node_modules/bootstrap/scss/print"";

Example of my form component :

    export default {
      name: ""UserForm"",
      components: {
        bForm: () => import(/* webpackChunkName: ""bs.form"" */""bootstrap-vue/es/components/form/form""),
        bFormGroup: () => import(/* webpackChunkName: ""bs.formGroup"" */""bootstrap-vue/es/components/form-group/form-group""),
        bFormInput: () => import(/* webpackChunkName: ""bs.formInput"" */""bootstrap-vue/es/components/form-input/form-input""),
        bFormTextarea: () => import(/* webpackChunkName: ""bs.formTextarea"" */""bootstrap-vue/es/components/form-textarea/form-textarea""),
        bFormCheckbox: () => import(/* webpackChunkName: ""bs.formCheckbox"" */""bootstrap-vue/es/components/form-checkbox/form-checkbox""),
        bFormCheckboxGroup: () => import(/* webpackChunkName: ""bs.formCheckboxGroup"" */""bootstrap-vue/es/components/form-checkbox/form-checkbox-group""),
        bFormRadioGroup: () => import(/* webpackChunkName: ""bs.formRadioGroup"" */""bootstrap-vue/es/components/form-radio/form-radio-group""),
        bFormSelect: () => import(/* webpackChunkName: ""bs.formSelect"" */""bootstrap-vue/es/components/form-select/form-select""),
        bAlert: () => import(/* webpackChunkName: ""bs.alert"" */""bootstrap-vue/es/components/alert/alert""),
      },",1537690788.0
camelBasketCase,Visual studio code?,1537632124.0
finroller,What is computed ()?,1537640330.0
lyons4231,"Can you help me understand the use case for this? We use a Vue/Python stack at work, and have never had any issues and do not run a Node server in production, just locally to build the bundle. 

On initial load, when a user visits the `/` route we serve up the `index.html` within the pre-built js and css injected. The rest of our components are dynamicly loaded through code splitting Vue modules. 

So would this just cut out the part if having to prebuild the js bundle? Do you know if code splitting would still be supported?",1537629828.0
Ashaltiriak,"As a proof of concept, this seems pretty cool.

However, I don't see this replacing the entire NodeJS build systems, even the rather simple vue-cli template build tools. 

What about webpack, babel, imagemin, tree-shaking, workbox, scss, sourcemaps?

I'm a JS dev, not a Python guy - so I'm probably not terribly objective here :)",1537628438.0
OldShoe,"Would be cool to have a plugin for Visual Studio(not Code) so one can use .vue without complicating the build. A compile .vue-on-save feature would be great.
",1537630721.0
dreamer_soul,"So at work I can't install nodejs because our info sec team goes by ""Block everything"" rule this might be the solution! Thanks",1537628708.0
androiddrew,Interesting that they went that route. I myself did a POC doing server side rendering for vuejs web apps in python https://github.com/androiddrew/py_vue_ssr_poc . I offloaded the compilation though using the v8 engine since its c++ and there are readily available bindings. ,1537675209.0
Korvv,"I'd consider renaming your data property called 'props' to something else like sliderOptions or even just sliderProps.

Change your form property to something like this
    
          form: {
            high: 0,
            low: 5,
            high_warning: 10,
            low_warning: 15,
          },

And add a computed data property for handles

      computed: {
        handles() {
          return [this.form.high, this.form.low, this.form.high_warning, this.form.low_warning]
        }
      }

Your component for your slider now needs to be something like

    <veeno v-bind=""sliderOptions"" :handles=""handles""></veeno>

I don't think you need the 'componentType' data property by the way, nor have an 'is' prop.

Your form inputs need to use a v-model on the form properties we just created. Here's an example for one: (You could use v-for here!)

    <input v-model=""form.low_warning"" type=""number"" step=""any"" name=""low_warning"" id=""low_warning"" class=""form-control"">

Don't forget the quotation marks that you have forgotten around **form-inputs** too.

Hope this gives you some help to see how they would work together.
",1537562345.0
nmarshall23,"Make veeno's props a Computed Property. Like this:

    computed: {
      props() {
        return {
           handles: [this.form.high, this.form.low, this.form.high_warning, this.form.low_warning],
           tooltips: [true, true, true, true],
           connect: [false, true, false, true, false],  
           step: 5,   
           pipsy: { mode: 'range', density: 3},
           range: { 'min': 0, 'max': 100 }
        }
      }

Now that I think about it, not sure that veeno will pick up the new handles values. Use [vue-devtools](https://github.com/vuejs/vue-devtools) to inspect the values of vue components.

&#x200B;",1537562895.0
frostshoxxreddit,"I'm using Visual Studio 2017 for ""backend"" APIs  ([ASP.NET](https://ASP.NET) CORE 2.x) that the frontend Vuetify webapp call (using webpack for hosting). As for the frontend vue/js code, I use Visual Studio Code. The main reason to do it this way is mostly for code formatting and to avoid having to configure web essential or other automated tasks that I need for other projects for messing up with my Vue frontend part of the project.

&#x200B;

&#x200B;",1537546723.0
codechinchilla,"One of the most recent updates to VS2017 improved Vue support: https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes#improved-vuejs-support

Sounds like it's definitely on their radar to improve going forward.",1537547046.0
breakingcups,"We do. All our new web applications are written in Vue, using Webpack. Have a look at asp.net core JavascriptServices. It's tricky to set up at first but it allows for Hot Module Reloading which makes a huge difference in time.",1537548902.0
Maxie93,"I usually use VS code as the vetur extension is better than the support in VS. However it is mostly functional in VS. It handles typescript fine but it doesn't handle css preprocessors like stylus. 

I have created projects that use asp.net core as the Web server and then serve the Vue app.

If you are interested in how to combine the vue-cli with the asp. Net spa services package and iis express let me know. I could send you a few things to get you started. I prefer using the cli now rather than making a webpack config myself like some other templates for integrating with asp.net core.",1537551509.0
Semi_Chenga,"Sounds like a pain in the ass. My team uses vs code for our vue/azure/node project. Seems to work out pretty well for us, but I also personally don’t really like the full on visual studio cause it reminds me of the c++ course I took at uni and brings back bad memories. And after getting used to vs code, actual vs just feels so fat and clunky. ",1537546883.0
Catalyzm,In my experience you're better off having Visual Studio open for the backend/API work and another editor for the front end work at the same time. VS Code is great but Webstorm is better for Vue development and you get the full IDE experience.,1537550504.0
whitebearphantom,"Hey OP.  
I am using Visual Studio for Vue in my personal project. It's a .net core web api + vuejs. I only use MVC to boostrap the SPA.

&#x200B;

BTW, here is the starter template i used:  


[https://github.com/MarkPieszak/aspnetcore-Vue-starter](https://github.com/MarkPieszak/aspnetcore-Vue-starter)  


&#x200B;",1537546250.0
diracsdeltae,LOL I am not compelled by this reason ,1537906982.0
diracsdeltae,lol why on earth would yuo want to use visual studio for anything though lmao,1537578330.0
i_ate_god,"not sure what problems you're looking to solve, but I work in a Java team and thus the backend is all ""restful"" apis.

I simply setup a dev server using express, http-proxy-middleware, and webpack's dev middleware that proxies requests to the backend, and the build process generates a zip file for maven to munch on.

Works great for the most part",1537550579.0
brainbag,"Yes, VSCode can do this with the Vetur extension and it works great, as long as you use typical Vue syntax and not the 3rd party class-based prop-based syntax. Personally after using both for a while, I strongly prefer the typical Vue syntax for components.

Microsoft hired the Vetur author to work on it full time, and he's also on the Vue core team, so it's basically a first party extension. It works wonderfully.

To save you some time, when you define a component with TypeScript, you use this template:

    <template>
      <div />
    </template>

    <script lang=""ts""> // Notice this
    import Vue from 'vue'

    export default Vue.extend({ // use Vue.extend instead of object literal
      name: ""MyAwesomeTypeScriptComponent"",
      ...
    })
    </script>

I also recommend that you install the TSLint extension.

Our Vue app is fully TypeScript barring a few random older components, so feel free to ask me if you run into problems.",1537528510.0
BurritoBashr,"WebStorm does a pretty OK job in template error checking, if you want true type checking in your JS you have to use Class style components over object style.",1537515566.0
ClickerMonkey,"(sorry mobile users, you might not see columns unless you reduce the column width - this is best experience on a desktop where you can resize the browser.)",1537503942.0
thinkadrian,"Why would you not use the CDN links in dev mode? You probably have the resources cached as well.

If you feel this not to be optimal, then using CDN in production isn’t optimal either.

BTW, there is little point in relying on CDNs for big projects, as it’s not guaranteed the user has had Vue downloaded before, for example. Also, code minimisers like UglifyJS use various forms of tree shaking - deleting functions and variables that aren’t in use by your app. It’s highly likely you’ll end up with a smaller Vue package (for example) if you just bundle the vendor.

Webpack has nifty code splitting features you can activate that would have the browser download more and smaller files, possibly increase download speed of your site. A browser can have 6-10 concurrent  connections.

*Edit: grammar*",1537511808.0
enkafan,vue cli is using webpack behind the scenes so something like this plugin should work https://github.com/van-nguyen/webpack-cdn-plugin,1537498483.0
thomasswilliams,"I used steps from r/https://webpack.js.org/configuration/externals/

A gotcha for me was that the NPM packages still need to be present in your project e.g. in `package.json` as dependencies. You can confirm the files are not in your vendor bundle (if you're using `webpack-bundle-analyzer`) by building with `--report` argument.",1537499861.0
androiddrew,"Hmmm, I am no front end developer but I imagine you could leverage the process.env.NODE_ENV to dynamically determine which links to embed in your index.html file.",1537498610.0
HiroshiFS,"I dont like CDNs.
I recommend to save this content in your static folder or whatever.
Less dependentions is better, except for specific situations.",1537534459.0
Wuma,"Never used it and don't know much about it, but in the Kendo Vue Grid documentation it has the following [https://www.telerik.com/kendo-vue-ui/components/grid/#toc-events](https://www.telerik.com/kendo-vue-ui/components/grid/#toc-events).

They've put v-on:change=""onChange"" on their component tag, and then put the following method on their vue instance:

         onChange: function(ev) {
            var selected = $.map(ev.sender.select(), function(item) {
                return $(item).text();
            });

            console.log(""Selected: "" + selected.length + "" item(s), ["" + selected.join("", "") + ""]"");
        }, 

",1537530001.0
CaptainInsane-o,"Install it with a package manager like npm or yarn, then import it where you want it in a component and make your requests. Or you can make a service and utilize it through there. Have you taken a look at the axios documentation? 

Op it's fine to be a beginner. Let me know if anything I said above doesn't make sense.",1537484908.0
B93RN,You can even instal Axios with the Vue CLI 3 GUI,1537542641.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/webdev] [\[BEGINNER WARNING\] How do I have libraries like 'axios' run on the client-side when building a project with the Vue CLI?](https://www.reddit.com/r/webdev/comments/9hjy2e/beginner_warning_how_do_i_have_libraries_like/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1537484933.0
Lelectrolux,"Some less than optimal stuff, at least on the php side of things, but no completely stupid stuff.

You could know your tools a bit better before creating a tutorial. It's kind of stupid to not use that many of laravel powers, but it won't bit you in the ass either.

Just a part :

I didn't see any mention about Laravel Passeport and implicit grant, but might have missed that.

Use an enum in DB for roles. The performance benefit of using 1 and 2 instead of 'admin' and 'default' is not worth the loss in readability.

#### Authentication endpoints creation

Instead of dealing with creating the validator yourself, [FormRequest]() would be better  

Also, 422 are sent by FormRequest by default, so no need to manually craft that.

A `setPasswordAttribute` could do the hashing automatically instead of doing it manually in controllers.

No need to specify the 200 return code, it's the default.

No validation for the login form. Not that bad but could be better

Use laravel default translation feature for login error message.

    class Register extends FormRequest
    {
        public function rules()
        {
            return [
                'email' => 'required|email|unique:users',
                'password'  => 'required|min:3|confirmed',
            ];
        }
    }

    class Login extends FormRequest
    {
        public function rules()
        {
            return [
                'email' => 'required|email',
                'password'  => 'required|min:3',
            ];
        }
    }


    class AuthController extends Controller
    {
    
        public function register(RegisterRequest $request)
        {
            $user = User::create($request->validated());

            return response()->json(['status' => 'success']);
        }


        public function login(Login $request)
        {
            $credentials = $request->validated();

            if ($token = $this->guard()->attempt($credentials)) {
                return response()->json(['status' => 'success'])->header('Authorization', $token);
            }

            return response()->json(['error' => __('auth.failed')], 401);
        }

You could use the base laravel `can` middleware and laravel gates and policies instead of recreating the same logic yourself in your CheckIsAdmin and CheckIsAdminOrSelf middleware.


That was a quick glance, I'm pretty sure I could find the same kind of missuse in the rest of the post.


Like I said it's far from terrible, also but far from optimal. But I think it is too soon to do tutorials for you, at least on Laravel.",1537567098.0
andyRtCh,"Vue & Laravel === ""Superman in the Development""  
\------  
I can't wait until I'm able to do some very big projects with these technologies.",1537829642.0
,[deleted],1537529372.0
volcomer,"As a concept it looks cool, but the PHP puts me off.",1537529456.0
arviddesign,"PWA is an interesting concept but I don't understand why not just build a real mobile app instead and have a website using only normal technology.

But hey I guess it's nice for things you want to be able to use on a computer offline like Google docs but I don't see the use of offline mobile websites.",1537474817.0
ClickerMonkey,"I've been working on a few apps with these technologies - and subsequently created a few libraries to help me do that. Along with vue, vue-router, vuex, and firebase, I created [fiery-vuex](https://github.com/fiery-data/fiery-vuex) and [vuex-router-actions](https://github.com/ClickerMonkey/vuex-router-actions). They really helped me out, especially with structuring an app and working with Firestore.

",1537532141.0
quinncuatro,"Nah, keep that up. I'm just diving into CLI 3 myself.",1537464524.0
botojomomo,This is a 404 and has nothing to do with Vue. ,1537438377.0
keepcalmrollon,"You'll need to set up different environment variables for the base URL for your requests. So in development, you can have `localhost:8080`, while in production it can be `your-app-name.herokuapp.com`.

&#x200B;

[This article](https://alligator.io/vuejs/working-with-environment-variables/) gives a good rundown of how to implement this.

&#x200B;",1537427652.0
RoganTheGypo,"localhost means the little webserver is running on your machine, once its running on heroku its address is different. Heroku have a guide of restapi and angular, instead of angular you are using vue so ignore that big but follow how to get your server on the heroku site and then point your frontend vue app at your new heroku url

[**https://devcenter.heroku.com/articles/mean-apps-restful-api**](https://devcenter.heroku.com/articles/mean-apps-restful-api)",1537429894.0
Dokiace,A little out of topic but do you have the tutorial to MEVN stack?,1537430522.0
josewhitetower,RemindMe!,1537427596.0
BrianKimball,"A couple things:

You have 2 vuex stores, which could be consolidated to one and use modules to consolidate your actions, etc. Modules 
https://vuex.vuejs.org/guide/modules.html

I don't think you need an Eventbus. For example you're listening for a teamsLoaded event, but you can really check if teams exist in your store inside the component. 

You're pulling all of your components and views at one time. You can lazy load your views as described here https://router.vuejs.org/guide/advanced/lazy-loading.html

Lastly since your lists can be large, you may want to consider virtual scroll found here https://github.com/Akryum/vue-virtual-scroller

I just skimmed your codebase but hopefully these suggestions help.

Happy coding!",1537437643.0
Smona,"Opening the rendering panel of dev tools and turning on paint flashing can help you figure out which areas of the page are having their layout recalculated. Try not to animate properties besides transform and opacity. 

How big of a table are we talking here? Memory usage could be an issue if it's 1000s of rows on the same page",1537429165.0
ZippyV,"This is not a Vue issue. Tables have always been slow because a browser can't start drawing the first row unless it knows the width of each column. If you don't specify the width (with the `<col />` element) the browser needs to wait until the last row has loaded to calculate the widths of the columns.

But it seems you are using the matches table for layout rather than data. All your rows except the first aren't using columns. Instead of tables use [Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) for lists or [Grid](https://css-tricks.com/snippets/css/complete-guide-grid/) for complicated layouts.",1537469768.0
RoganTheGypo,"The structure of the vue app is certainly a little different but not to my knowledge inherently wrong. Generally exporting store and router to their own file means it's easier to deal with but I'm not sure why performance would be an issue tbh. I'm wondering if its the sass import  `@import '../../sass/variables';` this could be done only once in app.vue, as your router-view is there. You won't need to use it in your other views/components as its already called in. It might be a little bit of a I/O issue.

&#x200B;

There is a decent style guide too, this covers performance and has some decent do's and don'ts [https://vuejs.org/v2/style-guide/](https://vuejs.org/v2/style-guide/)",1537429443.0
archivedsofa,"Some ideas.

Tables are really slow (it's not Vue's fault). Try to replace those tables with `<div>` instead and performance should increase considerably. [Here is a discussion about this](https://github.com/vuejs/vue/issues/2000).

You could also [keep components alive](https://vuejs.org/v2/guide/components-dynamic-async.html#keep-alive-with-Dynamic-Components) so that previously rendered components views are kept in memory.

Finally you could lazy load table rows instead of trying to brute force all the hundreds of rows when the view opens.",1537454616.0
achtung82,">I won’t go to deep into what SEO means and how it works but it short it stands for Search Engine Optimization and in practice it’s a set of meta tags in the head of each html document.

I kind of stopped reading after that.",1537382156.0
fk_the_system,"What about prerendering a spa with the prerender  spa plugin? You are just teasing every subject, no real information. Does anyone really still use the keywords meta tag?

In most use cases SSR is overkill. If you care about seo which you should, build a spa with the prerender-spa-plugin

Edit: soz if my comment sounds mad, but I've wasted 5 min reading this :-D

Edit2: rephrased a sentence ",1537372075.0
ConsoleTVs,"Most crawlers for seo use something called a sitemap first. if they can't find it, they go look for everything else they can. What if you deploy a SPA with a sitemap? Would this make any changes?",1537897595.0
fobocaster,"Just use CSS.  


[https://codepen.io/markheath/pen/mpweLY](https://codepen.io/markheath/pen/mpweLY)",1537361822.0
hugo__df,"a:not(:last-of-type)::after { content: "", ""; }",1537372631.0
xaksis,"    <span v-for=""(item, idx) in items"">
        <my-comp :item=""item""></my-comp>
        <span v-if=""idx !== items.length-1"">,&nbsp;</span>
    </span>

just add a comma (with space) after every item except the last one.",1537356684.0
usx-tv,"This plugin essentially removes the need to wrap multiple DOM elements in a template with a single `div` (or other) element.

Essentially instead of:

```
<template>
  <div>
    <component />
    <component />
  </div>
</template>
```

You can do:

```
<template>
  <v-fragment>
    <component />
    <component />
  </v-fragment>
</template>
```

The `v-fragment` will not render a `div` or any other DOM element",1537344165.0
pull_my_finger_AGAIN,Is this the same as a renderless component?,1537346862.0
RoganTheGypo,"This is basically the store anyway, in terms of performance i don't think it would make a difference to be honest, you can pull the store in as computed property with vuex anyway.

`...mapState({ state: state => store })`

&#x200B;

You might lose some functionality that is regarded as a given when using vue and using this approach though, I'd have a read of [https://vuejs.org/v2/guide/reactivity.html](https://vuejs.org/v2/guide/reactivity.html) this might clear things up for you.",1537339908.0
waiting4op2deliver,"You're just keeping a reference to the store, don't worry about bloat when stuffing data into the store. You're more likely going to run into data size problems during heavy iteration or if you make slow API calls.",1537346147.0
brainbag,"[This article](https://markus.oberlehner.net/blog/should-i-store-this-data-in-vuex/) is really good about explaining what should go in the store vs what should stay in components. It talks about Vuex, but it's identical for any other store.

As far as performance goes, I've been playing around with incremental games that have a ton of 60fps calculations, and storing/updating many values in the store has had no performance impact.

PS you might check out vue-stash, it's an already-built super-simple vue store. https://github.com/cklmercer/vue-stash ",1537355293.0
le_fieber,"Thank you, all! Your answers helped me!",1537380200.0
buddythicc,"Try replacing the `import TweenLite [...]` with something like this:
    
    let TweenLite;
    if (process.browser) {
      TweenLite = require(""gsap/TweenLite"");
    }",1537337496.0
AwesomeInPerson,"Have a look at this: https://webpack.js.org/configuration/watch/#watchoptions-poll/

Basically, you need to put `poll: <interval>` into the `devServer` configuration object. Are you using Vue CLI 3?",1537416829.0
RoganTheGypo,So you are editing files on the host but its being served from the VM? ,1537344950.0
Boydbme,"Not possible unless you control both the parent and the iframe content. If you **did** then you’d use `postMessage()` to talk between the two. 

https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",1537316441.0
aesamattki,If you want anything modern like responsive design then get rid of iFrames.,1537313170.0
enchufadoo,"Hi, I get this error when I go to the site on FF and Chrome

> Uncaught ReferenceError: Vue is not defined

:)

",1537309518.0
isharaekanayaka,This is amazing and loved the article you have written in Medium. Thanks for sharing this and this project is very inspiring. ,1537334494.0
Arkhenstone,"Now do you handpicks sources, or you test all apis and see what's responding ? If it auto fetch sources, just wow.",1537358320.0
lesha39,Really impresive,1537323709.0
RoganTheGypo,Looks great dude! The src could be used as a better example of a actual real world app too imo. ,1537339300.0
Dokiace,"Whoa, got the feeling that your app is made with Vue, but then your post popped up on r/vuejs too! Awesome!",1537359282.0
_fka_,This is very cool. Will definitely have to download this when I get home from work... Does it have DBZ?,1537367444.0
mrcat323,"Mate, ur best, to share the miracle like this is more than something, thanks",1537383058.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/u_mrcat323] [Vue + Electron in a practice](https://www.reddit.com/r/u_mrcat323/comments/9h7wj5/vue_electron_in_a_practice/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1537383280.0
noahklayman,"I was looking through the source code for your app, and I noticed that you used my plugin, vue-cli-plugin-electron-builder. I was wondering if you wouldn't mind sharing your experience using the plugin in a production environment, and if there were any issues you encountered. I'd love to hear any suggestions you may have for me. Thanks for your feedback!",1537570575.0
lan__solo,"Despite I was in the position of having development lead in my team, I used following points to convince them:

* Bringing up the time invested maintaining one specific client project over a timeframe of two years: We started the project with Angular 2 and had to update up to Angular 6 everytime a new version came out. This always took a lot of time, including breaking changes that happened in minor releases.
* Angular was easy to learn for everyone with a backend background because its similarities to back-end frameworks. For pure front-end devs, in my experience, it is more difficult to learn due to it's complete abstractions like the immense workarounds for using browser APIs.
* CSS maintenance is a catastophe in Angular and for CSS developers, Vue.js is much easier because scoping can easily be used per component in Vue.js, even easily mixing scoping and non-scoping in one component. Styling in Angalar took much more time for us, always, just because Angular wrapper elements are always rendered to the DOM, changing the whole cascade.
* Vue.js alone is only the UI layer. Everything else can be added. Angular already adding a bunch of stuff you might not need. Try to create a small Angular app. Even a simple hello world blows up the bundle size and honestly, I could never manage to really optimize it. This either means my whole Webpack knowledge is useless or it might not be that easy.

All in all the end argument was: It takes less time to develop and maintain a solution with Vue.js, with the same or better results compared to Angular, thus saving us time and the customers money. It's easier to introduce new developers to it.

Last but not least: Angular is designed for big enterprise applications. In my experience, it just doesn't work for small projects and doesn't work when performance (size, loading speed) is crucial. On the other site, Vue.js works very well with small applications but also very big applications (see Vue.js references of the companies using it).

I hope this helps you.",1537306483.0
xaksis,"I was building a frontend team last year from ground up and chose vue as the framework of choice. Other than the reasons mentioned here one of the big factors for me was that I needed to cater to a team of fairly inexperienced frontend developers. 

Angular's learning curve is pretty steep. To get the team to be productive would take much Time and training. React on the other hand offers too much flexibility and it's all too easy for inexperienced programmers to fk up the code base fast (speaking from experience) 

Vue hit the sweet spot with my tests. It provides enough structure to keep you organized and the learning curve is very gentle. Looking back, the decision was the right one. The team maintains half a dozen significantly complex apps today and vue has never been in the way. Hope this helps. ",1537313011.0
Catalyzm,You could load Modernizr by adding it to your webpack config with the webpack modernizr loader. Or you can npm install it and import it into your JS file (assuming you're using something like webpack) Another option is loading a shim or polyfill for object-fit like https://github.com/constancecchen/object-fit-polyfill,1537305611.0
jemminger,So we're just posting random files from the repo now?,1537293317.0
whosdustin,"Do you have a `vue.config.js` file in the root of your project? If you don't I recommend adding one and potentially adding the code below inside. That might help.

    module.exports = {
      css: {
        sourceMap: true
      }
    }

&#x200B;",1537478542.0
wtr665,Is this VS Code? If so you can overwrite the setting in JSON (see top of settings). The visual settings are pretty new and i can imagine it doen’t work for 100%,1537294385.0
LloydAtkinson,"People need to stop conflating DOM libraries (jQuery) with frameworks.

People also need to stop abusing DOM libraries (jQuery) into a full blown application framework.",1537277496.0
hoijean,Here we go again 😫,1537283514.0
Boydbme,"Well, you can start by removing jQuery unless you’re just trying to do some light DOM manipulation inside a WordPress theme (or similar). ",1537623261.0
ConsoleTVs,React learning curve Low and moderate vs vue moderate? You kidding me?,1537885676.0
Djbm,"For shared utility functions, I just export a JavaScript function from a file and import it where I need to use it.

If the function isn’t doing anything Vue specific, there’s no need to use the Vue framework to share the function.",1537277712.0
xaksis,I usually create a utils mixin and import it where needed. The reason I don't use vuex for this is what if tomorrow I want to switch out vuex layer with something new? It helps me keep the vuex layer purely as a state manager and nothing more. Don't know if this is the correct way of thinking though... Let's see what others say. ,1537270712.0
JeremyTiki,"A mixin is best to use if the functionality is going to be shared across most (if not all) of your other components. Vue has a way to automatically added mixins to every instantiated Vue instance.

You could make it an extra component if you are going to reuse the method in mutliple places, but it won't be used in \*every\* component.

You should only add the method to Vuex if it is going to directly work with or affect the data you are storing in Vuex.",1537279792.0
crazyeyes420,Don't use mixins if they are for many components in a single page. It's a compete nightmare to debug in large systems. ,1537289585.0
chrissilich,What’s the method?,1537271673.0
spamguy21,"I would propose another possibility, which may or may not have merit. If your methods have strong associations with a particular group of data, consider building out classes and drop your methods there.

I love vuex, but I discovered it's easy to dump all your code there, even getters. Using vuex to store class instances lets you at least reclaim some control. Needless to say, if data writes are involved, leave that to vuex.",1537339300.0
DOG-ZILLA,Would love fragments!,1537284454.0
JoakimVonAnd,Never. Vue is just a tool that can be used to create single page applications of any kind and structure. The decision of whether to use such a tool or not will never have an effect on your data schema. ,1537269326.0
alhemyo,"Nope.

Your database schemas are handled by your backend code, vue works on the frontend. ",1537269480.0
JinSantosAndria,"Schema no, API design maybe. As with any frontend layer you want to minimise and optimise the call count. Maybe aggregate many single API calls into a single one to initialise the application with only one backend call. But all this can be done with the facade pattern. The schema design might have an impact on how you want to type JavaScript objects or if you want to use something like typescript from the beginning. Most of the time it's better to not use a one-to-one mapped copies of the backend objects though. ",1537270647.0
platoprincipal,"You can put an import right in the style tag on the component. Import from “../../node_modules/path/to/cssfile.css

Just make sure your pathing is correct.",1537244499.0
lowmess,"if you have `style-loader` set up, you can import CSS files the same as you would any other module file.

```
import 'module/path/to/file.css'
```

You can use the ExtractText plugin to make this CSS output on build as well.",1537250092.0
JZumun,"""cross-env"" is an npm package that is likely a dependency of the Vue CLI package, but the logs imply that it isnt installed.

Have you tried reinstalling/updating the vue cli?",1537242810.0
leBeardedDev,"From my experience, delete the node_modules folder on your project and then use yarn instead of npm install.

rm -rf node_modules

yarn

Give it a global installation to yarn first if u haven't already

Then to start up the project try yarn serve",1537422632.0
Mekhami,\`typeof $scopedSlot === 'undefined'\`,1537282933.0
enkafan,Are you happening to use typescript? If so how are your props defined?,1537241446.0
ImSolay,Check out vuetify. ,1537222226.0
le_fieber,Also take a look to quasar framework. Offers tons of components and options. For example iOS theme for developing iOS apps and Android apps at the same time with different themes.,1537337593.0
Downvotes-All-Memes,"I used my /views as the shell with some boilerplate stuff. So the /components would be something like a ""ProductsList"" that might be used on a bunch of different views, whereas you might have a ""ShoppingCart"" view that shows a ""ProductsList"" of everything you have in your cart, or a ""AllProducts"" view that has a ProductsList of (you guessed it) all your products.

Does that make sense?

Personally I don't have a bunch of functionality in mine other than rendering lists or something.",1537221913.0
wordythebyrd,"In general with Vue I’m always scoping functionality to components to make them as modular as possible.

Views are simply components with routes associated with them, meaning it’s likely you may need to leverage the vue-router lifecycle hooks on the view to fetch data.  I would extract that API functionality to a separate ES module in that case.

",1537251118.0
dougalg,"I've been using Vue for a number of years now, but just recently I used Vue CLI for the first time, and so I asked myself the same question. What I'm trying out for this app is to have the views be any API and set-up logic with little to no presentation; and then they mostly just funnel that data into components.

We'll see how it goes...",1537251245.0
bmarkovic,"> Do you retrieve data from an API and pass it to other components?

This is a good one. Let's just assume that we all agree API data somehow ends up in Vuex or some other centralized state store.

On one hand, it's smart to:

* Trigger store action that fetches data from the router view
* Pass down data as props to display/presentation components
* Propagate events back up to the view to update store state in a single, context-aware place.

since now you're making sure your display components are reusable and decoupled from the store implementation functions.

However, there are issues:

* What if the component should always present the same part of some API datapoint. It's not coupled to precise store datapoint, but it's now coupled to the parent component.
* Popping events up the component chain is tedious.

I've found that a lot of approaches that will help keep code DRY-er are in fact ok, including, but not limited to passing method and getter names as props to child components so that I can keep specific presentation data transformations in store modules. Also, an Event Bus is sometimes a solution to get state changes to the right place without tightly coupling components to store methods. I've never really had a project as complex as to require mental overhead of something like RxJS but I can see where that would be helpful to decouple component events from both parent components as well as store methods/actions.",1537261272.0
riotaylor,I bought a new router for my work but the router doesn’t detect the MyCloud. Mycloud was on Static IP and i make all the connection with the help of [Linksys Support](https://www.linksysroutersupportnumber.com/linksys-router-support-number-dubai/) what to do to connect it? please help me.,1538982708.0
bobbaan,"Okey, seems like i've solved it all.

Had to add the following to Form.vue

    @Inject('validator')
    public $validator: any;

public $validator: any;

And the following to Edit.vue & Create.vue

    @Provide('validator')
    public $validator: any = this.$validator;",1537216504.0
Hinduuism,"Yes if you're using single-file vue components, then whenever Vue mounts, it will overwrite the content of the div it is mounting to.  An alternative to this is to use inline-templates for your components on the page itself which will allow Vue to mount onto the page itself.  You do this by setting the inline-template attribute like so: 

    <!-- index.html -->
    <div id=""app"">
        <component-name inline-template>
            <div> Hello </div>
        </component-name>
    </div>

See #4 on [this page](https://medium.com/js-dojo/7-ways-to-define-a-component-template-in-vuejs-c04e0c72900d).",1537194802.0
Downvotes-All-Memes,"Why would you target an element with content if you didn't want it to overwrite that content?

Why not create another element, they're free.

Or add your content to the vue template so it is rendered by vue isntead of the rest of your app.",1537194806.0
regretdeletingthat,"Your other option is to enable the Vue runtime template compiler as described in the docs here:

https://cli.vuejs.org/config/#runtimecompiler

You can then mount your Vue instance without specifying a render function, for example:

`new Vue({ el: ‘#app’ })`

And then you can drop your components anywhere you like within that root element, and existing content will not be replaced. 

This is slower than precompiling everything as it has to parse that root element on the fly, but not drastically so, and I’ve found it by far the most flexible option for incrementally adopting Vue into an existing layout. ",1537216016.0
percykins,"This code is a bit confusing. The rows come from ""tanksFiltered"", which comes from ""tanksWithPercentages"", which comes from ""tanks"". You do not reference the ""sites"" variable anywhere in your JS. If you want the values in ""sites"" to be used in the table when you set the filter, you would want tanksWithPercentage to look something like:

     let tanks = this.currentFilter in this.sites ? this.sites[this.currentFilter].tanks : this.tanks;
     return tanks.map(tank => {
        tank.percentage = 
          (tank.avgLitresPerDay / tank.safefill * 100).toFixed(2) + '%'
        return tank
      })

Or better yet, leave everything exactly as it is now, but change the ""tanks"" variable in data to ""tanksDefault"". Then create a computed ""tanks"" which is simply:

    return (this.currentFilter in this.sites ? this.sites[this.currentFilter].tanks : this.tanksDefault);

Then you just reference ""tanks"" for everything and it's automatically either filtered or not.

**BUT** I'm not sure what you expect to see because so far as I can tell, Rome and California's ""tanks"" variables are exactly the same as the base tanks variable.",1537158077.0
caboosesw,Can you describe where you are stuck?,1537147954.0
readitmeow,"I'm not 100% sure what you mean. It seems like you don't want to rewrite your express app (a backend server) to a vue-cli project (purely frontend).

The examples you read using AWS/Firebase I believe are examples of a vue-cli frontend and serverless architecture.


The easiest solution is to have your node app be an api that can still handle the twitter stream or read images and then separately build your frontend with vue-cli and make requests to your node api with axios or some request library. 


If you want node to serve your vue app(sounds like this might be what you're going for?), I'd do this:

I'd have a backend folder and frontend folder. The backend is node+express. The frontend is generated from vue-cli3

In production, you need to configure node+express routes that hit all  root requests(`/*`) except `/api*`  to serve the `index.html` in the `dist` created from `npm run build`in your vue app. 

For development, you would start your vue app with `npm run serve` to spin it on `localhost:8080` and in your node app, the route `/` would send the response from request.get('localhost:8080') . That way, when you go to root on your node app on `localhost:3000/`, it will serve you your dev-vue-app on `localhost:8080`. `localhost:3000/home` should return the response from `request.get('localhost:8080/home')` so vue-router can handle it.

Thats the frontend setup. 

For anything database related or image processing or twitter streams like you mentioned, keep those in express and on routes like `/api/process_twitter_stream` or `/api/users` and your vue app would make requests to the api when it needs the server to handle something like returning users or the processing you mentioned. Now your node+express app is serving both the vue app and acting as the api

Is this what you were going for?




",1537143226.0
backsliders,"I was able to create a small work around (however sloppy) by transitioning the max-height from 0 to larger than the element's height would need, delaying it on enter for the same amount of time as the leave transition and using a step-start/step-end transition timing function. This is still a very unclean way of doing things and doesn't fix all the issues, but it's a start. This seems like a pretty default scenario so I'm not sure why there's no default functionality for this.

After a few hours of searching, I found that most try to circumvent this using the v-move class, which requires ""position: absolute"" on the ""leave-active"" class, but it seems really finicky unless you're using it for rearranging only. If any element leaves, it'll shoot up to the top of the screen. A useful tool if it would work correctly.

[I made a fiddle to see if anyone else could take a crack at it.](https://jsfiddle.net/markdibarry/eywraw8t/374041/)",1537241384.0
brainbag,"You need `require`.

    <ul>
      <li v-for=""x in files"">
        <img :src=""require('../assets/gallery/thumb/'+x)"">
      </li>
    </ul>",1537119231.0
RoganTheGypo,Source code is usually the best place to go tbh,1537103381.0
hypernautical,"This guided reading of the source code might be helpful: https://github.com/numbbbbb/read-vue-source-code/blob/master/README.md

I also found this monetrail blog on building a Vue-like simple reactivity system illuminating: https://www.monterail.com/blog/2016/how-to-build-a-reactive-engine-in-javascript-part-1-observable-objects ",1537113836.0
Dpakoh13,"[https://www.vuemastery.com/courses/advanced-components/build-a-reactivity-system](https://www.vuemastery.com/courses/advanced-components/build-a-reactivity-system)

Build a Reactivity System

In this lesson we will build a simple reactivity system using the very same techniques you’ll find in the Vue source code. This will give you a better understanding of Vue.js and it’s design patterns, as well as get you familiar with watchers and the Dep class.",1537112192.0
felondejure,Vue Mastery explains it pretty good in the second module check them out,1537186860.0
Dnlgrwd,Shaun is an amazing instructor and a cool person. He offers so much free content on YouTube and his Udemy classes are really good. I was actually able to build a full fledged Pokémon database with vue and Firestore thanks to him. ,1537109912.0
sickhippie,Anywhere other than Udemy to get this course?  I don't support their shady business practices.,1537150020.0
snotsnot,"I do something like the below. Possible see the docker-compose.yml file as well.

https://github.com/tonsV2/oneliners-web/blob/master/Dockerfile

If you don't care about specifying the backend you can remove line 9 and 10.",1537092199.0
irphunky,"I build outside of docker and then place the dist into a nginx container and deploy that to my environments.

If I was to have the build process as part of the docker image I would use a multi-step build to keep node and vue-cli out of the final image.",1537087970.0
snotsnot,Doesn't work for me - https://github.com/tonsV2,1537086465.0
GMSteuart,"In the case that you’re doing a style change: add the column name as a class and update the css accordingly.

In the case you want custom link: call a function based off the column name, pass the data to it, return the formatted output like a link.",1537080687.0
criveros,Use css and flexbox and the flexbox order property. You can also have conditional css.,1537083347.0
chicagobearsrocks,One solution would be to create a hash map with column name as key and the formatting function as value,1537080421.0
Sphism,"Why not add a class to all the td’s that contains the data key, eg td class=‘city’",1537083633.0
earthboundkid,"To change the order create a computed prop that sorts the array based on whatever you want, and use that computed array in the loop, not the original. ",1537096883.0
ingrown_hair,"Just for reference there are some good, flexible table components for Vue.",1537099352.0
Dpakoh13,"If you install  vue cli version 3  (not 3 beta 7, etc )

in command line vue ui, and you get graphical interface in browser. 

Task tab. ""Serve"" - to local development with hot reloading. 

""build"" - for production build. After build files in ""dist"" folder  you need put to  you hosting.",1537080565.0
gazreyn,"As Dpakoh13 said, the latest vue cli actually comes with a super nice and intuitive UI using \`vue ui\` in command line. From here you can serve your project (which creates a local development server) whilst developing and once you're done just build the project and then serve that over HTTP. You can test it locally (the built files) using \`http-server\` npm package or like you said a github page.

&#x200B;

P.S. Yes, you can makea complete SPA that includes vue-router. Setting up the project with vue-cli will ask which modules and packages you want to add including vue-router and vuex",1537082345.0
alhemyo,"Vue build files should be served from a web server, you can't see it otherwise, you can use Apache or [nginx](https://nginx.org/en/) for local hosting.

&#x200B;",1537195151.0
kvdveer,"> I used vue-cli v3 to build the default website it comes with. But when I open the index.html in chrome it's just blank.

That means you're doing it wrong, and you should solve that, instead of coming up with workarounds that will have their own drawbacks.

Just opening the index.html is not the way vuejs is supposed to be run. It is supposed to be hosted over http. If you use filesystem instead, the paths and security model will be different, which may interfere with proper functioning. 

For development, use the `npm run dev` command mentioned in the tutorial. For deployment, use deployment instructions.",1537081636.0
galaxymover,You could have a VM with a clean install of Chrome and reset it for each extension when testing it. The extensions will only have access to the Chrome in the VM and not to your production machine.,1537072188.0
caboosesw,The point being is they won't have orders if they set up an Amazon account that day. I'm just looking for a simple site or someone could set up an account for free I'm thinking I might just have them do YouTube,1537112540.0
caboosesw,And the other thing is I want to take their code and run it against my sample set to make sure it works,1537112575.0
N3KIO,"only if your paying for the tickets, plane and hotel and food :P

Kappa",1537060759.0
Mesqueeb,Are the London talk videos going to be posted online anywhere? I've been looking for them like crazy XD,1537753694.0
eddyerburgh,I'll be at the meetup and the conference after party 🤗,1537075107.0
dave__stewart,"Yep, I'll be at the workshops and conference!

There's also a meetup on the weds.",1537104707.0
le_fieber,"Wow, never heard about it. Looks great! Finally something different from material!",1537027906.0
Parasin,"Beautiful component, I love the bounce effect on hover",1537027104.0
lmusliu,"I recently tested Vuesax, its a really beautiful framework. A bit of change from material its draining my eyes...",1537029613.0
wordythebyrd,How does the sidenav handle menu items overflowing?,1537027948.0
nricu,"Why don't you do that in the mounted method of the App.vue? Set an interval and you are fine to go.  

By the way, Can I ask why do you have to do that every minute?",1536949588.0
hybsuns,"Axios request interceptor maybe able to help you, if you are using axios: [https://github.com/axios/axios#interceptors](https://github.com/axios/axios#interceptors)",1536950294.0
workandfocus,The vue-auth package does this (refresh function that you can customize) and more. It's very well done.,1536960474.0
brainbag,"You can do this easily with a mixin that you import into your App.vue

    // mixins/LoginWatcher.js
    const LOGIN_CHECK_TIME = 1000 * 60
    
    export default {
      data () {
        return {
          loginWatcherIntervalHandle: 0
        }
      },
      created () {
        this.checkLogin()
        this.loginWatcherIntervalHandle = setInterval(this.checkLogin, LOGIN_CHECK_TIME)
      },
      destroyed () {
        clearInterval(this.loginWatcherIntervalHandle)
      },
      methods: {
        checkLogin () {
          // do login stuff here
          if (!loggedIn) {
            this.$router.push({ name: 'login' })
          }
        }
      }
    }
    
Then import it in your App.vue

    // App.vue
    import LoginWatcher from '@/mixins/LoginWatcher'
    
    export default {
      mixins: [LoginWatcher]
    }",1537097692.0
cyberst0rm,cron-schedule as a plugin will routinely run any function,1536976651.0
creathir,"Just from casual observation, absolute beginners appear to have issues understanding the entire data binding process. 

Ensuring you have a solid understanding of how a template interacts with the underlying data model is essential to being able to develop effectively with Vue. 

Another subject people gloss over but shouldn’t is the entire component lifecycle.

Having a firm grasp on what events fire and when they do will save a lot of headaches in the long run. 

Finally, just having a solid understanding of ES6 and what the features it brings to the language is extremely beneficial in ensuring you don’t make silly mistakes which could end up wasting a lot of time, particularly surrounding arrow functions and the scoping involved with them. ",1536918320.0
regretdeletingthat,"Something you should definitely take the time to learn, but not until you’ve mastered the basics, is renderless components via scoped-slots. 

They can be tricky to wrap your head around, but it is a very powerful technique once you do. 

https://adamwathan.me/renderless-components-in-vuejs/

This blog post by Adam Wathan is a good starting point. ",1536923003.0
usx-tv,"- Communication between components (parent, children, grandchildren)
- Understanding when a store is actually needed (and then learning vuex for those rare times)
- Reactivity
- Importance of not thinking DOM (I see so many bad practices with people coming from jQuery)
- Class components and property decorators (for prettier code) / typescript
- avoriaz / vue-test-utils ",1536929317.0
wordythebyrd,"Read through **all** of the [docs](https://vuejs.org/v2/guide/).  In my experience, Vue was quite easy to learn, the challenging parts are outside of Vue itself such as tooling and JS fundamentals.  

For instance, Webpack, while made zero config by Vue CLI 3, still requires some learning in order to properly implement code-splitting and understanding how to package your libraries.  

Also, Vue doesn't force you into doing everything a certain way, for example like Angular with services that are shared via dependency injection.  Vue has several ways to share data between components and understanding when each is appropriate is important.  In this case, understanding how to use ES modules can be critical to create shared helper functions, if Vuex or mixins are not appropriate.",1536950187.0
pterencephalon,"I started learning Vue by reading the installation instructions, the first page of the intro in the official documentation, getting impatient, and trying to build the project I wanted to make by googling, Ctrl+F in the Vue documentation, and looking at the source code for similar components/projects.

It's not a method I'd recommend...",1536949011.0
n0phear,"I had no idea they called it a pattern.   I stand corrected.  I’m not sure that many people outside of the react community would recognize it as a pattern.  But I maybe wrong.  Pretty sure it was inspired by elm, and elm was inspired by event sourcing and event sourcing was inspired by a Gang of Four pattern I believe.",1536966336.0
mypirateapp,"newbie here, computed properties vs methods, I would say has been a little difficult for me to decide, I understand methods fire everytime and computed properties dont but a simple example that seals this thought in my head would be super appreciated",1536984839.0
chrissilich,Good use of vue/view puns is a real challenge for a lot of vue devs. I’d work on that. ,1536925644.0
Sphism,"Npm is built to answer all those questions.

Either 30 npm packages and 30 repositories or group them a bit.

I think you can point an npm project to a sub folder of a repo so you may get get away with 1 repository for them all.

I think you can actually have local npm projects. So the install url is on your network instead of github etc.

Lots of options. ",1536914012.0
dougalg,"We did this at my work. We didn't bother making an npm package because we didn't want it public and didn't want to pay. But you can just pull in a GitHub repo as an npm dependency and then import individual components from there, and in your package.json you can lock the got repo at whatever tag you if you want proper versioning. 

This was pretty straightforward for us to set up with webpack in each app that needed things.",1536914027.0
brainbag,"There's a past thread about this you might find useful: https://www.reddit.com/r/javascript/comments/89y2sp/best_way_to_share_code_between_projects/?depth=3

I haven't used it, but one of the main VueJS sponsors is a SaaS tool to solve the issue: https://bitsrc.io

Personally, if I was going to do it, I'd probably use [Lerna](https://github.com/lerna/lerna). ",1536971246.0
mftr,You should look into web sockets and socket.io (http://socket.io),1536887825.0
nothingduploading,"vue could do it, that's not the hard part. how would you communicate between the two devices? If it can be done in javascript you can use vue.",1536887355.0
SKozan,"Hey, just did this and it worked pretty great. At the end tho i had to switch 'next.meta.auth' with 'to.meta.auth' and it worked. Not sure if it's a typo or something. Didn't realize there was a video until now, hah. Also from only doing the written copy the location of the meta tag was a little unclear.

Great guide btw. You should do a firebase data exchange/store one next! Like getting uid from auth and storing with user data, a form getting name etc for example 

I really enjoyed it and you did an excellent job. ",1538200392.0
principe_borodin,"Vue also accept JSX. =D

[https://vuejs.org/v2/guide/render-function.html#JSX](https://vuejs.org/v2/guide/render-function.html#JSX)",1536858738.0
tonjohn,"For me it comes down one thing - which frameworks mental model matches mine. For me, it’s Vue. Took me ~15min of reading docs before I was able to start my own app. In the case of React, I’ve attended several workshops but it still hasn’t clicked for me. Doesn’t mean that Vue is better than react just that Vue is better fit for my brain.

The issues you seem to be hitting now sound common and framework agnostic. While state management is arguably easier in Vue, it is still a complicated topic with no right approach.

At the end of the day, you shouldn’t have to be convinced of a framework unless you are the leader of an engineering team. Pick what works for you and ship, ship, ship.",1536860001.0
mvaneijgen,"I am a self thought developer, but came from a graphic design background. I myself want to write clean readable code and don't care in what language it is written. I took a look at React and didn't even know where to start, picked up a Vue course and went of building my first three apps in a couple of weeks. 

&#x200B;

I love magic, boot up my PC in the morning, everything works and I have no intrest to know how a CPU works, for all I care it could be magic. At the end of the day I want a working product that is easy to maintain and even easier to collaborate on with other people.

&#x200B;

I always wanted to learn JS, but never figured it out, until ES6 came around and you could just write code that felt logical to me. What I don't get is why you feel JS is taken away from you. You can still write all the JS in the world,  just write it in methods, life cycle hooks or any other of the features. Or you could  even build your own utilities and reference them in side your components where you want to use them. Maybe you need to write more complex apps in Vue.js, because .maps(), .filters(), ,forEach() are great for transforming your data and I have them all throughout my apps.",1536858933.0
Lelectrolux,"To each is own, and they both can do the same things, really.


If you like React, no need to force yourself to learn vue if it doesn't match you mental model. I can't for the life of me get started in React. You can't in Vue. No biggies
",1536862420.0
wishinghand,There are some thoughts here from someone more experienced than I: https://www.reddit.com/r/javascript/comments/8o781t/vuejs_or_react_which_you_would_chose_and_why/e01qn55/,1536858798.0
sayanriju,The time you spent in thinking and actually writing this post. You could have learnt Vue in it. Sounds convincing enough?,1536862552.0
usx-tv,"You shouldn't pick a framework based off of personal preference. In my humble opinion you should be comparing performance, project needs, longevity, scaling, and many other factors.

A lot of people in FE these days choose React with a herd mentality, I am a massive fan of Vue and would choose it for 70% of my projects, however there are situations where I wouldn't (for example a native app: I would prefer React native since it is a lot more mature then Vue solutions).

There are some personal factors that come into play (like jsx over html), but these shouldn't influence your decision too much.

Vue.js has a specific ecosystem (vue-x, vue-router) that can be replaced with other solutions (redux for example), you will have the same pitfalls as React eventually if you need routing and state management. If you are looking for an all-in-one solution, maybe you can look into Angular.

As for jsx, it was mentioned earlier that you can use it with Vue. Please do consider the following: It isn't common using jsx with Vue, and if someone will need to maintain your application in the future, they may not have that knowledge. There is a preference here for SFC using HTML template, and a good reason for it. Back in the PHP days people strived to remove the mixed PHP/HTML, now many strive to have a mixed JS/HTML. HTML might not be beautiful to write, but it is not hard to pick up, easy to read, quick to edit (unlike, in my opinion, jsx).",1536911222.0
phaedrus322,Have you tried Vue CLI?,1536860839.0
dave__stewart,"""I come in peace"" - LOL!",1537105012.0
jaesung2061,"Too much magic? Anyone heard of JSX? Wait you have. You mean you understand the internals of how JSX works?

If you like React, go with it. No one is stopping you.",1536860494.0
btaskaya,hi,1536950687.0
lambdalkan,hi,1536994651.0
btfrost,"Instance properties are generally more useful. They're tidier in that you're not polluting your methods, etc, with function names that other people may choose to use.

I see mixins as just for special cases where you need that functionality everywhere, with few exceptions. More probably on a mounted hook or something than a method...",1536880582.0
mmcgu1966,"I have several global mixins I use for date-formatting, with moment.js. They're used in about half my components. ",1536931867.0
dave__stewart,"For example Vuex `$store` is a global mixin. I find this useful.

VeeValidate adds everything as a global mixin by default, which I don't like.

At my current contract they have an instance mixin which imports filters and methods for finance. They way they've done this, it mixes in way, way too much for my liking; like 50 methods. My preference would be to either namespace this under a further `.finance` namespace, or mix them in individually, or using a helper function like Lodash's `pick()`.

So it really depends on your use case. There's no write or wrong, just tradeoffs.",1537104951.0
matt_hammond,"I'm on mobile and when I visit a page talking about an UI kit, I primarily want to se the UI elements and interact with them. This page made me look for far to long and then I quit.

You should improve the website UX. ",1536852279.0
Parasin,"What would you say to someone who uses Vuetify already? Specifically, what differentiates this from other visual libraries for Vue?

I know it is new, but if I go to Vuetify on my mobile device it works flawlessly. Unfortunately, the docs for This library is not responsive (yet).

When I look at the official site, I don’t really get a full picture of what this capable of. I mean I can read the content, but I want to interact with all the things being mentioned, not just be told about them. ",1536853723.0
brainbag,"I appreciate the work that went into this, but why do we need yet another Bootstrap Vue library? There's at least two others that are already complete. What's this one bring that the others don't? It looks identical to me.",1536853776.0
CasuallyHardcoding,"For some reason animations for accordions and modals in latest Chrome are laggy as hell. Safari freezes up to 3 seconds in desperate attempts to open a modal. Code style is inconsistent. Weird naming convention for components that doesn't follow [vue styleguide](https://vuejs.org/v2/style-guide/). I would suggest you to have a look at [vuejs/ui](https://github.com/vuejs/ui) repository and it's [demo page](https://vuejs.github.io/ui/), where everything runs smoothly, even though there're dozens of components.

I like colours and typography though, wish you luck. ",1536870809.0
le_fieber,"A solid framework I would say, but not more. The wow effect is missing in comparison to other frameworks like quasar, vuetify and Vuesax.

Nevertheless, good work. Maybe try a completely new style like Microsoft did it with their new UI.",1537380965.0
aesamattki,Can't take a UI library seriously that [looks like this on mobile](https://i.imgur.com/tYtLqcG.png),1536876919.0
Towerful,"So, this is actually e-commerce using someone else's backend... right?",1536835709.0
Sphism,"I can’t stand the phrase ‘serverless’, it makes no sense. How does the client load the files? ",1536835858.0
railsr7,"Another guy promoting his medium -_-

Did a similar thing in the past but I used jekyll, firebase and some payment service similar to paypal express checkout now. Now sure what's special here that it deserves a separate post :O",1536835108.0
apexJCL,"Fancy words for ""REST Client""",1536842826.0
gabdelacruz,"No, you didn't.",1536847143.0
fyzbo,Snipcart is a backend.,1536863370.0
FURyannnn,Can anyone explain the benefit of defining the product in the page markup (like what Snipcart or Foxy.io do) and not somewhere else? It seems like an ecommerce setup like that _should_ allow you to just configure and manage products in one place rather than potentially multiple.,1536858399.0
chewm_,"don't blame the author, the terrible definition about server-less is becoming popular, you can find more here

&#x200B;

[https://jamstack.org/resources/](https://jamstack.org/resources/)

[https://www.youtube.com/watch?v=XpveOehxvoM](https://www.youtube.com/watch?v=XpveOehxvoM)

&#x200B;

I don't know if it's just a a badly used term, like isomorphic (functional guy  cry every time that ear this term from js guys) or it's about a bad adoption for the term: you could say serverless **stack** (as the youtube guy did), because you don't need develop server code in your stack, but use plain serverless sounds pretty ambiguous...",1536845341.0
thinkadrian,"This is not limited to vue.

What you did in JQuery you can do with vanilla JavaScript. You might need to use Babel if you’re using very recent array functions like filter()

Look up “comparing arrays in javascript” on stackoverflow for a whole host of variations.",1536824810.0
earthboundkid,"You’ll need to play with the Webpack chain config, iirc. ",1536803944.0
Semi_Chenga,Have you heard of buefy? Pretty good stuff if you like vue and bulma. ,1536872980.0
retr0guylife77,Why not use webpack/vue loader to include bulma? ,1536931566.0
CaptainInsane-o,"Vue can’t detect mutations via $parent.  So if you are mutating $parent and expecting the parent component to react to the mutation, it wont do that.  You should use $emit to send an emission to the parent which Vue will detect.",1536765917.0
so_lost_im_faded,"The point of components is to be small, dynamic, independent and usable anywhere - a stand-alone piece of logic, that receives something, does something and returns something. Binding it to a direct parent destroys the concept of using the component anywhere.

Can you elaborate the situation that makes you consider doing this? I might try to recommend a better solution.",1536772112.0
kwartel,"I think it's better to use .sync on props or v-model

The snippets below are typed on my phone, so it may not be formatted correctly or be completely correct as far as names go, but the concept should correct.

You can use a computed property to keep things simple, while also use clearly defined props and no implicit connection with the parent which you can break in the lifespan of the app by accident. Another reason is that you may want to reformat the object in your form later on and reuse the components. With examples below, the components do not care how the parent looks, only about what the component receives and what it gives back. This is how you keep the dataflow clean and without implicit code.

.sync example

    {
      props: {
        foo: {
          type: Number,
          required: true,
        },
      },
      computed: {
        syncedFoo: {
          get() { return this.foo },
          set(val) { this.$emit('updated:foo', val) },
        },
      }
    }

This way, you have a prop foo, but inside the component you can freely set syncedFoo and it will pass through up.

In the template of the parent you can do
`<child :foo.sync=""foo"" />`



You can do the same with v-model

    {
      props: {
        value: {
          type: Number,
          required: true,
        },
      },
      computed: {
        syncedFoo: {
          get() { return this.value },
          set(val) { this.$emit('input', val) },
        },
      }
    }

This would result in the following parent template:

`<child v-model=""foo"" />`


You can also change the prop and event names for v-model, because the defaults are clearly derived from input fields.


    {
      model: {
        prop: 'propName',
        event: 'eventName',
      },
      props: {
        propName: {
          type: Number,
          required: true,
        },
      },
      computed: {
        syncedFoo: {
          get() { return this.propName },
          set(val) { this.$emit('eventName', val) },
        },
      }
    }

EDIT: typo's formatting and a little more explanation",1536780316.0
mattisthenation,Are you using Vuex?,1536774731.0
TheBrillo,"I'm not sure his intent here on fetching the data at this point.  Typically I use the  mounted event or some other custom event for fetching data.  Maybe his way is better, but like most things in Vuejs, it is pretty forgiving in the technique you use. 

&#x200B;

However, I want to help you clear up a misconception you had when you said this:  ""It stands to reason that this data will only be fetched when the router is used to reach this page based on what we see here, but what about when a user manually refreshes the page? ""

&#x200B;

Remember vue is entirely client side. The routing is client side as well, which is why by default the url has a # after the domain and before the routes. When a user refreshes the page, they are basically getting a new instance of the application and all of their javascript data is lost (unless you explicitly saved it or used a module that would save it).  If you refresh the page, the URL is preserved so the vuejs router will need to do its work all over again to figure out what to display for the user. In this case, it will re-fetch the server side data. ",1536781494.0
marinespl,I know it's not NS's or Vue's fault but those sample apps look tragic. More appealing ones would attract more devs IMO.,1536758036.0
AndrewAtBrisaBoards,"I've been working on my first big VueJS project (coming from React, and Angular before that). I hope I get far enough along to build a mobile app with NativeScript-Vue. Sounds like a nice change from React Native, and RN was already pretty damn fun to use.

Next up, what framework do I use for Vue native desktop? :)",1536776617.0
matt_hammond,What's the state of Vue NS ecosystem? I wanted to use it but I feel like there's not that many people using it. Are there enough packages out there that I won't realize i need something that doesn’t exist halfway through a project. ,1536777964.0
Dispersia,"Is there a template for typescript/class syntax, or do we have to implement that ourselves? Would be super cool if those were options.",1536783744.0
dougalg,"Interesting, but it seems like most of these problems can just be solved by using v-for in the parent template which seems more idiomatic to me anyway. That said I'm sure there are cases where this would be useful",1536732150.0
DOG-ZILLA,Nice plugin! ,1536708634.0
sundogbillionaire,Awesome post!,1536791045.0
daddypig42,"You can combine the class property, only binding on necessary classes, like this (it's much more readable)

    <div class=""class-one class-two"" :class=""{'class-three': someCondition'}"">",1536689948.0
yeenthings,"You could make use of a computed property, this is more lightweight than methods as it only updates the return value when one of its dependants updates.

You could do something like; 

```javascript
computed: { 
    someComputedProperty() { 
        return { 
            ‘a bunch of static classes’: true, 
            ‘a dynamic class’: this.someBooleanProperty 
        } 
    } 
}
```

If this is a set of classes you want to reuse across multiple components you could even pull this out to a helper method and import that into your components so then your computed method becomes one line.",1536684939.0
Sphism,If your :class values get too long you can bind an object to it instead and deal with it in javascript,1536698469.0
nmarshall23,"So the great thing about Vue is you can use just plain JavaScript. If it's simpler to add animations directly to an tag you can get the HTML tag reference from $el. 

If you do use functions outside of your component do not expect them to be reactive. 

What I mean here is try to follow the Vue idioms, if it's a computed property place it in the computed section of your component.

It sounds like you are doing a lot with animations have you read the docs about state change animations, and transitions?",1536690290.0
adstwlearn,"Here's the link to the [GitHub page](https://github.com/promosis/vue-programmatic-invisible-google-recaptcha).

I made this because I like to trigger Google's invisible reCAPTCHA manually - and sometimes that's a bit tough to set up easily each time. So I created this which strictly focuses on the manual implementation (Google sorta tries to nudge you towards using the submit function of a form).

This basically lets you trigger the reCAPTCHA and then listen for its callback to grab the token. Tried to make it as simple and reliable to use as I could. Check it out if you're interested.",1536681479.0
adstwlearn,"Here's the link to the \[GitHub page\]([https://github.com/promosis/vue-programmatic-invisible-google-recaptcha](https://github.com/promosis/vue-programmatic-invisible-google-recaptcha)).

I made this because I like to trigger Google's invisible reCAPTCHA manually - and sometimes that's a bit tough to set up easily each time. So I created this which strictly focuses on the manual implementation (Google sorta tries to nudge you towards using the submit function of a form).

This basically lets you trigger the reCAPTCHA and then listen for its callback to grab the token. Tried to make it as simple and reliable to use as I could. Check it out if you're interested.",1536679850.0
Korvv,"My auth guard is pretty simple.

    function authGuard(routes) {
      return beforeEnter(routes, (to, from, next) => {
        if (!store.getters.userCheck) {
          next({
            name: 'login',
            query: { redirect: to.fullPath },
          });
        } else {
          next();
        }
      });
    }    

**store.getters.userCheck** checks if the user is not equal to null.

Basic routes to be something like this:

    export default ({ authGuard, guestGuard }) => [
    
      // Authenticated routes.
      ...authGuard([
        {
          path: '/',
          name: 'dashboard',
          component: () => import(/* webpackChunkName: ""Dashboard"" */ '@/views/pages/Dashboard.vue'),
        },
      ]),
    
      // Guest routes.
      ...guestGuard([
        {
          path: '/login',
          name: 'login',
          component: () => import(/* webpackChunkName: ""Login"" */ '@/views/pages/Auth/Login.vue'),
          meta: { layout: 'login' },
        },
      ]),
    
      { path: '*', redirect: { name: 'login' } },
    ];

Hope it helps!",1536672002.0
c_pepin,"I recently implemented something similar to this at my job.  I ended up building a Vue plugin, that upon installation would check the meta field of the `to` route in `beforeRouteEnter`, and determined whether or not to let them through based on their roles/permissions.

    export default {
      install(Vue) {
        Vue.mixin({
          beforeRouteEnter: async (to, _, next) => {
            // I do a bit more in here, but this is the general
            // idea.
    
            if (userHasAccess(to.meta.access)) {
              next();
            } else {
              // redirect them somewhere
            }
          },
        });
      },
    };

You can then define those roles/permissions/etc. on the route object.

    const routeConfig = {
      mode: 'history',
      routes: [
        {
          path: '/adminPage',
          component: AdminHomePage,
          meta: {
           access: {
             roles: [ADMIN],
           }
         },
        },
      ],
    };",1536748950.0
thiswasprobablyatust,"Maybe instead of a thinly-veiled, garbage Medium article that tries to sell your courses you could...you know, post your courses and say why people should buy them.

That's the most constructive version of ""fuck you this is spam"" I could come up with.",1536668134.0
shimst3r,Just started learning Vue. Maybe I'll invest some time into translating. :),1536677262.0
blackw212,"""translating into German""

""Dmitri Pisarenko""",1537868404.0
andersdev,"And if you need more info to understand the problem, please let me know",1536661400.0
brainbag,"You mentioned vue-loader but didn't say what version you were on. In vue-loader v14, they changed the way CSS was compiled into production, which could result in production and development CSS being different. They reverted this change in v15. If you're on v14, I recommend upgrading and seeing if you still have the issue.

Otherwise, make sure you're not using `scoped` on some component code expecting it to appear in other components.",1536697566.0
atopetek,thanks!!,1536672455.0
,[deleted],1536685024.0
,[deleted],1536671329.0
Switchroo,"<Error>

<Code>AccessDenied</Code>

<Message>Access denied</Message>

</Error>",1536670482.0
majorius,"a tutorial

https://alligator.io/vuejs/recursive-components


docs


https://vuejs.org/v2/guide/components-edge-cases.html#Recursive-Components


you just need to register your component in the same component and use it with some condition",1536636000.0
Pyro979,what's this limitation? maybe there is an easier way to do it in Vue? I'm not sure what you're trying to do would work very well.,1536626185.0
nathancjohnson,"I don't think it's good to purposely mix frameworks unless you're transitioning from one to another. What problem are you trying to solve? There may be a solution in Vue that would make things more simple in the long run.

You can still access and modify the DOM while using Vue and I'm sure you can load HTML into an element fairly easily as well using `v-html`.",1536627693.0
usx-tv,"So just to sum up what you are essentially trying to do:

1 - Have Vue for your app

2 - Use an Angular component because you cannot find one that suits your needs

3 - This component renders a ""RMarkdown"" code that in turn uses jQuery and DOM manipulation

This is overly complex. You are trying to use 2 frameworks in order to use something that has quite old-school front-end tech. I understand you must have limitations here (using RMarkdown), but stacking up multiple frameworks will just make the whole thing messier.

If you really have no other solution and have to use RMarkdown, skip Vue and use Angular. At least you will be limiting the damage somewhat. You need to use frameworks / tech that work with what you're trying to build, you've essentially found out here that Vue will not work, so do not use it. I know your intentions are good with Vue (easier to learn as you said), but here you're over complicating the whole thing, making it actually more difficult in the end.

Edit: Formatting and grammar",1536652342.0
RedFing,This has nothing to do with vue. ,1536648466.0
toqy,"If i'm not using vuex for something it's usually because it's not something that multiple components will care about. In that case i fetch it at the page component level, and then pass it down to the components that need it. Or if i have a super specific component it'll fetch it's own data. 

I'd like to move to graphql and see how much of the state store and whatnot I can get rid of. Not going to happen on my current project though. ",1536624681.0
archivedsofa,"It's fine to not use Vuex, but (IMO) you are overcomplicating things by using a bus.

It would be much simpler to just use a Vue instance as a store. See the docs: https://vuejs.org/v2/guide/state-management.html",1536630653.0
Maranux,",t
K.x 
,xss,,, ",1536684009.0
Maranux,"C q/ s66
8ag
 Mn

F.m.dr.    /x
 .
M
 .
66",1536684680.0
kitanga-nday,"When you use `npm run serve` it serves the files from your system (localhost/127.0.0.1), this means that the files loaded extremely fast. You can augment this in Chrome by going into the `Network` tab in the devtools and changing the selected item in the far right drop down menu from 'online' to something slower. This will show you how slow your images load.",1536612831.0
btfrost,"The issue seems to be just that it takes time to request the image from the server, which is not really something you can avoid.

You could preload more images, but I err on the side of trying to limit my use of the user's data.

It think a loading animation would be the fastest answer.

Morphing svgs with some sort of amorphous intermediary state could be fun as well, but that would probably take much more time...",1536610157.0
nathancjohnson,"What I would do is add a loading icon in place of the images while they load. The easiest way to do this is to set a loading icon gif as the image's CSS background property. Once the image loads, the loading icon will be covered up.

BTW - awesome site! I think it's pretty nice especially for it being your first comprehensive project. Definitely be proud of your work :D",1536627206.0
backsliders,"Nothing useful to add. Just wanted to say ""sweet site"". Great job!",1536627886.0
AmericanJBert,"Where are you hosting the app?

You can serve your static content through S3 (with CloudFront as your CDN). 

That should give you a good performance boost.",1536619931.0
Kankatruama,"Man, I feel bad looking a projects like this. I also started studying JS 3 or 4 months ago, and started Vue maybe 1 month ago, and I cant even imagine how to achieve what you have done. Congratulations, by the way, very beautiful colors and shapes, liked it. ",1536638180.0
maxverse,"Can't help much, but wanted to say the project is _awesome_, and looks beautiful",1536684904.0
slaphappie,Where are you hosting? A good host like Netlify will put your images on a CDN automatically so that may fix your issue.,1536613693.0
AmazeCPK,"There is no flickering when going through the various of the same evolution.
Reason being (from what I could tell), is the client has already downloaded the various evolution images on the initial page load. (Look at your evolution chain section)

When you advance pokemon (from base to evolution or vice versa) the image is already cached and stored in browsers memory, where it can quickly recall and display the same image (at a larger scale), without redownloading the image from your server.

When a user advances far enough to a new pokemon, the client has to download all evolution images, and that takes time.",1536623380.0
SuperFluffyPunch,Honestly don't see the problem. Maybe you've fixed it by now. ,1536629514.0
Brahminmeat,Css :after of the element you wish to hide. Z-index it up and position absolute. ,1536612902.0
mattisthenation,"I'm currently using: https://github.com/ankurk91/vue-loading-overlay

It's pretty straightforward to implement",1536619888.0
tweettranscriberbot,"^The linked tweet was tweeted by [@blakenewman](https://twitter.com/blakenewman) on Sep 10, 2018 18:28:58 UTC (3 Retweets | 10 Favorites)

-------------------------------------------------

Last call for sponsors for [@vue\_london](https://twitter.com/vue\_london)  - email sponsors@vuejs.london



Be part of the growing [@vuejs ](https://twitter.com/vuejs ) and friends community at our epic event! [http://vuejs.london/why](http://vuejs.london/why) 

[Attached photo](https://pbs.twimg.com/media/DmwMVajWsAIS8Vh.jpg:orig) | [imgur Mirror](https://i.imgur.com/YvycYnY.jpg)

 [Attached photo](https://pbs.twimg.com/media/DmwMU5EW0AAG1-E.jpg:orig) | [imgur Mirror](https://i.imgur.com/WhoHxbq.jpg)

 [Attached photo](https://pbs.twimg.com/media/DmwMWIHXoAAW_k1.jpg:orig) | [imgur Mirror](https://i.imgur.com/Gn6qTbR.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1536605176.0
rayshinn,There are tons of open source fully completed solutions out there already for you to use? Is this for work or personal dev experience?,1536584024.0
4022a,Pay for a third-party solution. This is already a solved problem.,1536583391.0
usx-tv,"1- I'd avoid VuePress for this as it is not the target. If you really need SSR, use Nuxt. To me this seems like it could be a simple SPA, just use Vue.js natively.

2 - No suggestions on this as I've yet to need a WYSIWYG on Vue.

3 - This really depends on how much this app is going to be used, and your available budget towards it. Make sure Firebase free pricing plan will suffice, and if they allow what you're trying to do in their T&C's.

4 - Do you need SEO for this? Do you really need this code rendered server side? If not, just use Vue.js. If so, consider Nuxt.

This seems like a fairly simple CRUD app, probably with some difficulty around permissions and handling cases where users edit the same content at the same time. I would consider 3rd party solutions if you're going down a complex rabbit hole (versioning etc). If this is meant to be something really basic and simple, you shouldn't have much difficulty.",1536591809.0
Arkhenstone,"Just so you know, wiki are generally the least thing you want to spend time while working in intern. The more you work, test, and comment the code, the less the wiki is useful.   
We are 3 in my IT departement, and to share knowledge, we went the EXTRA EASY route : we just mail on a wiki mail adress we're all logged onto. Because in mails app, you can just search for whatever in seconds, and it's just a mail so no new habit. For a small team, it's viable. The downsides is that to modify, we need to copy the previous, update the content, and send back (removing the previous if it's small fixes), and formatting. The upside is that we can join fixes, patch or doc.   
It's certainly not ideal solution, but it comes to the advantage of low risk solution with easy integrations.

(DISCLAIMER: we're not all developpers and some of us move outside of the company, they can still contribute easily, and acces to information).",1536592628.0
plainblackguy,Cool I’ve been looking for something like this. A lot of the ones that are out there suck.,1536591217.0
ThatSpookySJW,What makes this better than vue-dropzone?,1536594670.0
stevefan1999,"Here, take my kudos",1536599576.0
fobocaster,"1. Basics of JavaScript [https://developer.mozilla.org/en-US/docs/Web/API/Document\_Object\_Model/Examples#Example\_5:\_Event\_Propagation](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples#Example_5:_Event_Propagation)
2. Basics of Vue [https://vuejs.org/v2/guide/events.html#Event-Modifiers](https://vuejs.org/v2/guide/events.html#Event-Modifiers)",1536558555.0
ENDNOTE1337,"I know people have helped you out already, but a keep in mind that you could just use @ instead of v-on. For me it's much mor elegant to say @click=""smth"" then v-on:click=""smth"" ",1536568918.0
red-powerranger,"Could you set the outer button to position relative, and the inner part to absolute so you can place it on top?",1536558441.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascriptframeworks] [Advantages of VueJs](https://www.reddit.com/r/javascriptFrameworks/comments/9ekgkd/advantages_of_vuejs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1536561678.0
dzkn,This blog post is completely worthless... you should put a little bit more effort into providing value to your readers.,1537944602.0
Brahminmeat,I believe you're looking for v-model. https://vuejs.org/v2/guide/forms.html#Select,1536560582.0
_tinymachine,"Here's an example based off of /u/brainbag's that uses [`v-model`](https://vuejs.org/v2/guide/forms.html#Select) (like  /u/Brahminmeat suggested) instead of a method called on the `@input` event. (This example binds v-model directly to a toy object, instead of passing a string and then using the Array.filter method to return an object.)

[https://jsfiddle.net/tinymachine/o82qjwr9/](https://jsfiddle.net/tinymachine/o82qjwr9/)",1536599557.0
brainbag,"Here's a working example:

https://codesandbox.io/s/k3o37lq815?module=%2Fsrc%2Fcomponents%2FToys.vue

",1536584786.0
cyberst0rm,any reason you are doing this by hand? ,1536548992.0
AndrewAtBrisaBoards,"I use and love this library! It is pretty slick and has improved my UIs so much. I'm bad at UI, so that might not be saying much ;-) Built drag and drop kanbans and sheets with very little effort on the UI. Works with mouse and finger touch. Stylus works as well, but, possibly as a browser implementation detail in Chrome, you have to hold the stylus down for a second before it puts the item into drag mode.

Couple notes:
1. It would be nice to have some Escape key handling built-in. But I think you can handle the esc key and cancel the drag manually, just haven't gotten to it.
2. It says it doesn't support nesting, but I haven't tested to see if that means you can't nest draggable groups, or if it's just not able to do multi-dimensional arrays in one group. I want to build an outline and other multi-level lists, and not sure if this will handle it. Crossing my fingers!

I'm not complaining. This is one of my favorite libraries. I have so many interfaces before I learned about it that have clunky arrows to sort arrays (or worse, just not allowing users to arrange items).",1536535719.0
ImAJampire,This looks great.,1536572563.0
perkia,My eyes can only support so many ads before bursting in a pool of blood.,1536545328.0
j_shor,"Angular formly has metastasized to vue now, fantastic.",1536584678.0
thiswasprobablyatust,"If you're doing headless API there's no need to integrate at all. You can run a JS dev server like webpack-serve for hot-reloading in dev, and then serve production files with any number of things (express, nginx, whatever).",1536490066.0
Downvotes-All-Memes,"I’m not sure what your question is. If you have a headless api (isn’t that just... an API?), then there is nothing to integrate with vuejs. Just build it and hit your endpoints like any other API. ",1536500812.0
ignisphaseone,"Depending on how you are considering deployment (Django ""dist"" folder), you can always webpack your VueJS and just have django serve it directly.

However, as someone who also prefers VueJS frontend and Flask backend, you can do your development with the Vue hot-reloader, and then compile it before you deploy.",1536561022.0
rackmountrambo,"I'm really wishing there was a Vue form builder that could get it's hints from Django generated and serialized forms. Django.forms has some really good stuff that we should be able to use.

I am also playing with V8eval to build for vue-server-renderer. I hope to put out an adpater package soon.",1536850327.0
thiswasprobablyatust,"You can assign object properties to each column, if that's not what you're asking you should define your question better.

`<div v-for=""e in myArrayOfObjects""> <input v-model=""e.one""/><input v-model=""e.two""/></div>`",1536489512.0
Robodude,This looks interesting. I appreciate that you made an example but would have preferred the example to not be in typescript and in a separate repo. There's a ton of cognitive load I need to expend in order to just get a good idea of what is going on. Maybe even a 'getting started' section would be greatly appreciated.,1536589169.0
toadkicker,I don’t know because as crazy as this sounds sometimes a synchronous action is good design.,1536462390.0
gabemachida,"Because you don't have to worry about callbacks and nesting.

If you want it async, use async/await. If you want it sync, just leave out the async keyword.",1536471288.0
,[deleted],1536477510.0
androiddrew,"Why keep something that works? Its been 6 months, we should just rewrite everything.",1536462590.0
Bionictoe,"I would suggest using @keyup or @keydown in your markup. 
This way you are explicitly retrieving each keystroke, as the user types. 
I would only ever use v-model to retrieve an input field value if I didn’t need it to be updated as the user types, maybe during a form submit method for example. 
You can even test for what button has been pressed in the event listener method. Add behaviour for enter key etc.
You can reliably predict behavior this way. 
Just an opinion. I’m open to correction. ",1536450463.0
ifkas,"Try the “lazy” modifier, more info here: https://vuejs.org/v2/guide/forms.html",1536468636.0
crespo_modesto,"Getting used to SCSS sucks when you don't have a 'preprocessor'? Running locally that does the compiling/minifcation ahh, gotta get something running. Not having the nesting sucks. Using grunt currently, just run it and code/save/refresh.",1536444079.0
nothingduploading,i'm confused if you want to include ./src/styles/global.scss do you have to load that anywhere else besides vue.config.js?,1536455454.0
MatrixClaw,"Confused on what the plugin does for you? To import globally, all you need to do is import your SCSS file into the main.js file, or the App.vue wrapper. Unless I'm missing something, the plugin just adds unnecessary abstraction.",1536506954.0
Agranok,There was a GitHub repo cataloguing Vue patterns. It looks like the owner made it into a site. It has examples and links to resources for further learning. [Check it out here](https://learn-vuejs.github.io/vue-patterns/). ,1536490452.0
thiswasprobablyatust,"What are you looking for in ""extra"" that you feel the main docs lack?

This isn't a very well defined question for as lazy as it is. There's tons of JS beginners guides posted on r/javascript, and at least a tutorial or two per week here.",1536427080.0
so_lost_im_faded,"[https://vuejs-tips.github.io/cheatsheet/](https://vuejs-tips.github.io/cheatsheet/)

[https://alligator.io/vuejs/](https://alligator.io/vuejs/)

Also I recomment Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex) by Maximilian Schwarzmüller / Academind",1536484841.0
_sirberus_,"This is a very complex task for a beginner. If you really want to do this, I'd recommend starting a python site in Django or Flask. There, you make an api which receives the path, does your python logic, then returns the data. Now your vue side is radically simplified - it doesn't know how the data is processed, it just knows that it sends a path to this API and it gets the data back.

To be very clear, I'm suggesting making two simpler websites rather than one complicated one.

Why not bake in the python? I've done it and it's slow as molasses and very difficult to program it to be asynchronous in this context. But I've been doing this with Django for a year now and it's fast as hell!",1536434206.0
michealjroberts,How complex is your application going to be? What will it be in the future?,1536430522.0
lmapii,"I am building something very similar (vue frontend for python test framework), as long as you stick to compatible packages that handle the asynchronous part its ok (like flask). As soon as you start mixing them (like adding a websocket connection from a different package) hell breaks loose. I can second flask and/or gRPC (though the documentation for it is pretty horrible).",1536483065.0
mzfr98,Is your web app open source? If yes then can you please share a link?,1536500313.0
DOG-ZILLA,"Umm, local data and props for a component are not mutually exclusive from using Vuex. They all work together and each has its place / role. 

No I don’t think Vuex should be bundled into core. There’s simply no reason to do so as it works just fine the way it is and takes about 5 seconds to install if you need it.

I’d like any work from the Vue team to focus on new features and bug fixes. Not creating new problems that don’t need solving. ",1536404042.0
Dynamitesushiii,"Is it really wise to store everything in the global store? Following from the Redux methodology, you don’t need to cram everything into the global store if it doesn’t need to talk to other parts of the application. ",1536406675.0
Hinduuism,"The Vuex store is most useful when you have a scenario where multiple deeply nested and/or disconnected components require frequent manipulation and reading of the global state.  Its really not a problem that every project finds itself having.  

Vuex is very powerful, but it can be a bit overkill in some scenarios, and after using it on a couple projects, my team has opted to revert to just handling API calls at the “container” component level where it just can pass the response data down through a v-for and a prop.  This keeps the data in an area that’s just where it’s needed and, overall, I’ve found that it can greatly simplify development.  Instead of having to commit any changes, you can just modify the local data object and you can immediately see what manipulations are occurring, you can utilize v-model without needing to set up computed getters and setters, and you can still separate out your API calls if necessary into a separate JS file if that helps maintainability.

Overall, I loved Vuex in the one project I did that I felt required it, but it adds some unnecessary hassles for apps that are streamlined/simple enough to not actually make use of the features that Vuex offers.

",1536412085.0
morficus,"To quote parts of the Linux philosophy:

*Use programs that do only one task, but do it well.
* To accomplish complex tasks, use several programs linked together
* There is no ""one true way"" to do anything

Just because YOU feel that Vuex ""is the best way"" that does not make it true for the other 10M developers out there. In my 10 years of experience (3 with Vue) I can say with confidence that not all (not even most) applications benefit from having a central state management system. 

A generally regarded good practice when building large/""enterprise""-scale software is to have small, simple pieces that you compose to create larger more complex things. You never build a complex thing.... Instead you build a lot of small things that can then be connected together.

",1536418469.0
jingle66,"Parent child communication is messy without vuex. Besides, I use vuex for state management AND as a local database for mobile apps that need to work offline and sync when online again.
Vuex is rock solid. I love it. Even for small projects",1536431594.0
CardboardJ,"So another perspective to consider.  In the last 5 sites that I've put together with vue I've used it as a jquery replacement 4 times and only needed vuex once.  Most of these sites were very 'brochure + very basic functionality' style sites, but one had enough complexity that it warranted using vuex.

So I'd say, no.  I like that I can convince clients to drop jquery for vue on even the very light weight sites that we have to do.",1536456289.0
Mekhami,"absolutely not, and your proposal makes absolutely no sense.",1536431516.0
NateExMachina,Most things can be done with parent child communication and there are other options if you truly need a global store. The point of it is being able to debug async calls with time travel debugging. I suggest you try alternatives because it should be obvious why it's not included. Your projects probably don't even need vuex.,1536417583.0
archivedsofa,"Vuex is a bureaucratic necessity for medium to large projects. For small projects it's perfectly fine to use a Vue instance as a central store, and Vuex will cause more problems than it solves.

So, no, I don't think it would be a good idea to remove local component state.",1536429490.0
gmdm1234,"I have a few reactions... first off, you sound like a fairly inexperienced developer (and thus don't have a lot of credibility when it comes to suggesting core changes to complex frameworks). You've identified how ""easy"" it is to have globally-accessible state.  Experienced developers will tell you that globally-accessible state is a ""code smell.""  Its not automatically wrong, and there are certain limited use cases where global state is necessary and idiomatic - but its definitely suspicious.  My issue with vuex is that, in my opinion, it solves the *wrong problem.*

There's also the issue of overhead.  In small apps (where global state may be an acceptable pattern), you don't really need to the overhead of vuex.  In large apps, which might justify incurring that overhead, you start to run into some of the architectural flaws associated with global state, which means that, perhaps, veux shouldn't be used at all.  So the number of apps where it truly makes sense to use vuex seems quite small, assuming there are any at all.

I generally don't think client frameworks should follow the ""kitchen sink"" mentality, where they include everything under the sun that anyone might need. That mentality is more acceptable for server-side frameworks, where unused features don't really incur a lot of overhead. Client frameworks are quite different, as every byte of library code, used or unused, must be downloaded by every client to visit the site. Since, in my opinion, vuex has a very narrow slice of acceptable use cases, it hardly makes sense to insist that everyone developing a Vue application incur that overhead - that's simply insane, and fortunately, not the philosophy which the Vue core team has adopted.

Your final question is kind of weird... you want the shell project to include example code?  Is it really that challenging to read the official docs and any of the hundreds of articles and tutorials on the subject?

What's the actual problem you're looking to solve here?",1536497767.0
macguyvok,"Actually, I just finished converting our extremely large and complicated line of business application to Vue. I evaluated Vuex, and decided against it. Instead, we follow a manager / resource access pattern. The manager holds whatever shared state is required, and the resource access provides a single point of API access. We almost were able to use the default reactivity system of Vue, but a few edge cases in it drove us to leverage RxJS and vuerx. (vuerx helpfully is just a mixin the components needs to know about) It works extremely well, and the code is a lot easier for our Junior devs to reason about than Vuex.

Also, and super important IMHO, it let us keep the business logic outside the UI framework. (RxJS is universal, and the ""magic"" of vuerx is inside the components, and holds zero logic) We could convert to React (or some next gen ui framework) tomorrow, and all we rewrite are the components.

I agree with the benefits you saw from Vuex. It certainly isn't wrong by any means. But some of us don't like getting that deeply into bed with our UI libraries... We've been hurt before, and now prefer to keep our distance. *looks ruefully at Angular* Vue's default system is exactly the kind of ""no strings attached"" relationship I was looking for. ",1536508318.0
Skarsnik101,KISS,1536407576.0
MatrixClaw,"Unless you're writing a gigantic application, VueX is rarely needed. I've built and deployed 25+ Vue apps to production and the only ones that I've felt the need to use VueX were out of simplicity, not necessity. For the vast majority of applications, using Vuex will only over-complicate things.",1536507590.0
archivedsofa,"Nope. Vue and Vuex are two different things.

> could we agree that when we install Vuex via the @vue/cli that beginners get to see a usable example of store/state/mutations/getters/setters ... rather than the defaulted blank store.js file that I'm sure many learners would just glaze over without knowing what it is they've installed?

That's why there are docs.

¯\\\_(ツ)\_/¯",1537500956.0
sirluiss,WhatsApp about Mobx with vue?,1536429057.0
DOG-ZILLA,"This title is inaccurate. 

You can access instance properties within computed properties just fine. 

The issue / work around here is to do with dynamic imports with Webpack specifically. ",1536399951.0
tweettranscriberbot,"^The linked tweet was tweeted by [@alexjoverm](https://twitter.com/alexjoverm) on Sep 05, 2018 07:19:03 UTC (59 Retweets | 230 Favorites)

-------------------------------------------------

✍️ Gotcha: If you access an instance property within the dynamic import function on a computed prop, it won't work. 



✅ You must do it outside so that [@vuejs ](https://twitter.com/vuejs ) is aware of that dependency. This is commonly used for dynamic components and code splitting ✄ 

[Attached photo](https://pbs.twimg.com/media/DmUDEVbXgAA3fGI.png:orig) | [imgur Mirror](https://i.imgur.com/9Gu6a74.png)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1536398664.0
btfrost,"Arrow functions don't pass this as an argument.

So the issue would be more a javascript gotcha than an issue with Vue ~

A workaround:

let vm = this

() => {
  // use vm in place of this
}",1536414205.0
seamouse3,"Have you tried Vuetify's PWA template? I found that one to be the best. Also their cordova template is a PWA wrapped in cordova which might help?

&#x200B;

As for the facebook login, you should be able to specify whether the login happens via popup or in a new browser window. This is how it works with the firebase auth integrations, but when I last implemented it they said it was a facebook limitation so I assume it would be that way with any plugin. ",1536391631.0
jake619,[non-blogspam](https://hackernoon.com/checklist-for-writing-highly-reusable-components-in-react-and-vue-531f963864bd),1536381621.0
imapersonithink,Is this a new page or something? I think I've read through it before.,1536357573.0
toqy,???,1536357577.0
CrustyJugglerSr,">re-renders but doesn't re-render the nested components

Yes, it does but state is empty now, meaning there's no chicken soup anymore. A page refresh will reset the state to its initial state. And that's expected behaviour.  [See here](https://github.com/vuejs/vuex/issues/198#issuecomment-230483073)

If you want a persistent state, you can look into packages like [this](https://www.npmjs.com/package/vuex-persistedstate) or implement your own.

&#x200B;",1536378945.0
BehindTheMath,"When you refresh the page, everything should re-render. When do you see everything?

You can use Vue devtools to check if the components actually loaded. ",1536335864.0
btfrost,"Vuex stores dont persist across sessions. 

I think what you're looking for is something like vuex-persist.

It gives you choices as to where you want to store the data and specify what you want persisted. ",1536415337.0
vue-rocks,This should just work. Are there any errors in the console? There’s little we can do without your code.,1536338674.0
yeenthings,I've been looking for something exactly like this recently; thanks!,1536332095.0
mrcat323,"Thanks mate, nice post",1536403242.0
Sphism,"Looks like a useful post but man the mobile header is obnoxious when I scroll up, gave up and might check back on desktop. ",1536317801.0
Arkhenstone,"I'd like to add to this apexcharts, even though it's made of simple js and svgjs, there is an official vue-wrapper (and priority of the dev). It's open-source and licensed under MIT and it's really a neat one, easy to use, powerful enough to do industry based charts (using it for hydroelectricity powerplants charts).

&#x200B;

Here is the site : [https://apexcharts.com](https://apexcharts.com)",1536326677.0
JohnMellor89,"It's a helpful list but the text is so bland as to be pointless. It would be better if it included some stats like GitHub stars, age, open issues, filesize in kb, number of charts available. Maybe even an example for each assuming it can be simplified to 1-10 lines for each one.",1536349517.0
StrangeSound,"Nice article, although personally I would declare the props inside your App.vue, like you would any other component. It seems weird to do it a different way than you would any other. 

I'd also look at keeping the chunks, and maybe calling them via another script. Multiple requests over HTTP/2 mean that your widget is likely to load faster!",1536340861.0
usx-tv,"There is a plugin for Nuxt on github, however it did not work for me when I tried it on windows about 10 days ago.

I'd stick to the template for now, until stable versions are released.

https://github.com/andoshin11/vue-cli-plugin-nuxt-starter-template

",1536305229.0
AndrewAtBrisaBoards,"I'm working on a pretty large project using Vue with draggable, but embarrassingly not using Vuex (I keep promising myself I'll get to it one day haha). They do have a section on using Vuex. My guess is that you've seen it though:

[https://github.com/SortableJS/Vue.Draggable#with-vuex](https://github.com/SortableJS/Vue.Draggable#with-vuex)

&#x200B;

I'm confused about why Vuex would affect this. The data returned from it isn't immutable, is it? I haven't gotten up to hundreds of items in a list yet (simple kanban or spreadsheet-style views with draggable to move them around), but the size doesn't seem to have had an impact on draggable when I had \~75 items in a spreadsheet.",1536361646.0
gevera,"This is very nice. It is perfect for interactive classes, presentations. Just wow.",1536286955.0
ladybro,"Hey everybody 👋

After years of being jQuery-only kinda guy, I finally bit the bullet and decided to learn Vue in January of this year and I couldn't be happier to have done so. It makes things so much simpler from a view / data management standpoint and I'm sure I'm not even using half of it's power yet! 

⚡️[Mindstamp](https://mindstamp.io?ref=vue) lets you add interactive notes, questions, and personalization any video in seconds before sharing. It was born out of my desire to share videos with my friends back home with context, and refined to it's current state based on some interest I had in using it for business. You can see how it works in 2 minutes via the [interactive demo](https://mindstamp.io/demo?ref=vue). 

It's built using Rails, Heroku, and [Vuetify](https://vuetifyjs.com) as a UI framework that's given me a huge productivity boost as a solo maker.

I'm happy to answer any questions or hear any feedback you might have ✨

",1536275815.0
NathanielBlack912,"This is a pretty cool concept, Brad. 

Good luck! ",1536300192.0
francishero,This is great,1536352945.0
olafviking,"Amazing dude!   
Great tool, you really have a potential market here I believe!   
Keep up the good work! ",1536305944.0
Affectionate_Tie,"This looks amazing, both product and website, so very well done ladybro!

&#x200B;

How did you start learning Vue, could you give a brief summary of your journey?

&#x200B;

Cheers! (:",1536314237.0
jones1618,"Nice. This seems supremely useful and well put together.  


You might want to gear your pitch and pricing to the education and student markets because I'm sure you'll attract a lot of interest there. Offer free trials and discounts for .edu domains, for example.  


Suggestion: You offer video, sound and text stamps. Why not image stamps? Being able to popup a graph or overlay some circles or arrows seems like core functionality to me.",1536333597.0
VIM_GT_EMACS,"I'm a little confused at why mutating a property in the state is problematic, since you're using vuex. I'm using Nuxt, but its still vue so i wouldn't think our cases are too different but for example I have a method tied to a button click in a nested component that mutates state like so:

    methods: {
        toggleModal(e) {
          e.preventDefault();
          this.$store.commit('toggleModal', !this.$store.state.isModalOpen);
        },
     }

This works just fine in my case. Can you post some code for us to see?",1536277055.0
d1sxeyes,"Keep input in local state then fire your mutation on the button being clicked, not on the input changes?

Set up your inputs with their v-models and a button with a click event to call your method.

    data () {
      input1: null
      ...
      input8: null
    },
    methods: {
      CommitResponsesToStore () {
        this.$store.commit('FormResponses', this.data)
      }
    }",1536301186.0
pull_my_finger_AGAIN,"It's basically the shitty game you make when you do Max's Vue tutorial, except slower with interstitial screens and pictures.",1536320178.0
BunsOfAluminum,"Ugh. I want to see what you made, but the ""Public Demo"" is a website that requires an account. I caved and signed in with Google. Then the website says the content is restricted and I need to ""Send 30 Gratia to get 30 minutes of access.""

Sorry, but that's not a ""Public Demo."" That's just awful.",1536259513.0
Mrmnml,What’s the benefit of using this over vue-pdf?,1536260102.0
arkokoley,"Hi, I'm the author of the Pdfvuer. I have put up a Public demo at r/http://blog.koley.in/pdfvuer",1536312184.0
RoganTheGypo,"use vue-meta and prerender for SEO of CLI apps or go nuxt for SSR. Depends on use case tbh.

[https://alligator.io/vuejs/vue-seo-tips/](https://alligator.io/vuejs/vue-seo-tips/)

&#x200B;

Edit: Also I just wanna say alligator is a awesome resource for vue stuff tbh",1536229633.0
DOG-ZILLA,"Use Nuxt if you’re concerned about SEO. 

However, if you use the Cli, there are many prerender services out there. 

It’s not an issue exclusive to Vue. All SPA frameworks are the same in this regard. 

Your JS components CAN be indexed in an SPA, but it’s async requests that Google wont wait around for. ",1536233243.0
imapersonithink,"You seem to have a basic misunderstanding of the purpose of Vue and the CLI. Vue is for building front-ends with components. That has nothing to do with SEO. I'd suggest reading up on the differences between SPA, Prerendered, and SSR websites.",1536241662.0
hugo__df,It doesn't but you can pre-render using `vue add prerender-spa` and setting that up. That's pretty good for SEO.,1536250373.0
bob_lazer,Why not combine Vuepress and CLI3 in a web presence?,1536263122.0
cars10k,"Sound like you want to mark the active route. Add `active-class=""selected""` to your `router-link`s. See [https://router.vuejs.org/api/#active-class](https://router.vuejs.org/api/#active-class)",1536228713.0
josewhitetower,"Hey, I built something for you in case you want to make your nav more configurable.

I created a computed property that returns an array with the nav items, according to the user state. (Be aware of the ternary boolean operator).

Then in template I just iterate using v-for.

Here an [example](http://jsfiddle.net/eywraw8t/341334/) for you. Just change the return value of the user computed property an see what happens.

I case you want to add more items to your nav, you will only have to add a new item to the array.

In the practice menu items can be stored in a configuration file, and then imported in the nav component.

EDIT:

The conditions are the other way round, but I hope you get what I mean.",1536265320.0
RoganTheGypo,"so `:class=""data""` isnt working? Can you share how you are trying to do it, you can even mix strings and data areas with v-bind e.g: `:class=""['title', textColour]""` title being a class and textColour being a computed property",1536229043.0
RoganTheGypo,"[https://vuex.vuejs.org/guide/mutations.html#on-to-actions](https://vuex.vuejs.org/guide/mutations.html#on-to-actions)

Basically async, more than one thing could be committing at a time making it hard to debug. Its obviously not always the case in smaller apps and that's why you can still mutate the state directly if you want. One of our larger vue apps hits at times 200+ mutations a second and I can track every single one because of the way we use actions.",1536221927.0
qizmo,Neat! Going to use this in my next project.,1536272804.0
benasp,Can you give a quick pros and cons of using it vs vuexfire? ,1536783068.0
tripflex,"This looks AMAZING! You're correct too, most other libs out there were basic enough to where I was just going to roll my  own ... then I stumbled upon this, which is exactly what I need (no reason to reinvent the wheel!) .. can't wait to start using it!",1543424144.0
tripflex,"u/ClickerMonkey Any chance of you jumping on Vue.JS discord chat at all? Would love to write a full blog post tutorial on using this lib (i get ~2000 uniques a day), had a few things I wanted to run by you (my username is `tripflex` on there as well), thanks!

http://chat.vuejs.org

",1544210912.0
SecretAnteater,"Unless I missed some changes to Vue CLI, comparing it to Nuxt is like comparing apples to orange boxes.  

I've never worked with Nuxt, but I think it is just a strongly opinionated way of building Vue apps so that they can be rendered server-side (or anywhere else). That can certainly help with long-living applications, I'd say that having ESLint configured with strong rules will do you better. 

I'd say it is up to you, but if you know you will never have to worry about SSR, then you probably don't need Nuxt. ",1536175079.0
JIMETHYRUMPLEKINS,"Nuxt is great but quite opinionated, I use it for two reasons: it makes either SSR or generating static sites (depending on which I need) incredibly easy. If I'm building a straightforward site for a client, I know it's very unlikely I'm going to have to tinker with any of that stuff, so Nuxt saves me a lot of work.

If SEO is not a concern, then I will choose as vanilla Vue as I can get, *especially* if it's a complex app. With Nuxt you ultimately sacrifice some flexibility down the line for convenience at the start.

Nuxt is fantastic and I've probably used it for more projects now than vanilla Vue, but I wouldn't use it so much if I worked on projects where SEO was not a concern. I prefer less opinionated Vue, having the flexibility to programmatically build my routes, for example. I was disappointed to see that Evan seems to have ruled out an SSR module for the CLI, so I'll continue to use Nuxt for now. But if you don't need that functionality, I would say you'd be better off using the CLI for your project.",1536190542.0
brainbag,"Nuxt was created before VueCLI3, and there's very little it does that isn't built into the new CLI if you don't need SSR. It's still the ""hot thing"" so everybody just recommends it by default as you can see in this thread. Nuxt is a tool like anything else - unless you specifically need its SSR/SEO features, I strongly recommend you stick to the Vue CLI installation.",1536186534.0
joce21,"Thanks all for the great responses! With what I read, I think sticking with the CLI would be a better choice for my project since I won't be limited in anyway with that kind of project. I know I might have a lot of weird scenario and need the big flexibility the CLI offer since it is closer to raw Vue than NUXT can be.",1536235186.0
DreaMinder,"I would go with Nuxt. It has SPA-mode, so I don't see any overkill. If you don't need custom webpack configs or some weird things, Nuxt will save your time on start.",1536174900.0
MatrixClaw,"Unless you need to generate a static site, I see little use for Nuxt. It can do SSR, sure, but you can do that without a whole framework built on top of Vue. Vue as a framework is extremely flexible, it's hard for me to imagine a large app that would need to utilize SSR because it needs to care about SEO on every single page. Maybe building a large blog that renders pages dynamically from an API?",1536207901.0
AlexUrquhart,"For the front-end I used:

- Vue
- Bootstrap 4 (w/ bootstrap-vue)
- Leaflet + Turf for the maps
- HERE API for the basemap tiles and routing

The backend (just for saving/loading routes for now) uses a Node/Typescript/Express/Postgres stack.

Some of the things I'm looking to add in the future are:

- Elevation profiles to show vertical climb of a route
- Service areas (showing you the maximum extent you can reach in a given time or distance, using manhattan distance instead of just a straight buffer)
- Export route to KML/GPX/Shapefile, etc

I also have an off-shoot project from this, [vue-bootstrap-typeahead](https://github.com/alexurquhart/vue-bootstrap-typeahead) is a custom autocomplete component that I want to continue developing.
",1536175783.0
RedditPlsSthap,Nice! How long did you work on this? Is it open source?,1536173775.0
hellix08,Very nice! I'm working on a similar project. Can I ask you what did you use for routing/calculating directions? I'm using MapBox,1536173839.0
thallisphp,Great job!,1536184577.0
daamsie,"Looks pretty nice!  


I've been building a large trip mapping solution in Vue myself (using mapboxgl) so was quite interested to see what you did.

  
I found it a little clunky editing the routes. My test case was a bike trip I did here in Melbourne, Aus with my kids a couple of months ago. The routes just weren't followed by the lines - it kept forcing it back to the main roads. Maybe HERE doesn't have sufficient cycle path data. This particular one is one of the most well known ones in Melbourne, so I would have expected it to be available.   


The autocomplete was laggy for me also. That is a hard problem to solve though. I know, because I've tried. Currently I'm using the Mapbox autocompleter, which is halfway decent, though still nowhere near as snappy as the Google one. Have you looked at using Bloodhound? If I was building my own, that's where I'd start. It does a great job of balancing data that is prefetched (ie, your top 500 locations for example) and remote data.   


Good luck with it. ",1536190593.0
F14D,"It looks really nice.

Any reason for the white bar running along the bottom of the page?",1536192495.0
nothingduploading,I don't get it,1536221795.0
stencillicnets,"Hey one thing that is missing for biking is a more detailed map with forest tracks trails etc.

Otherwise good work. Maybe integrate strava if they have a decent api.",1536225643.0
bathyscaaf,[https://greensock.com/svg-tips](https://greensock.com/svg-tips),1536212140.0
teslatek,Are you talking about those lines that get filled in as the user scroll down [like this](https://css-tricks.com/svg-line-animation-works/) ? Those are done by manipulating the stroke-dasharray and stroke-dashoffset of the svg path.  Just bind those attributes to something in your vue instance that changes when the user scrolls. ,1536277673.0
miggadabigganig,"vuetify 

[https://vuetifyjs.com/en/](https://vuetifyjs.com/en/)",1536156314.0
,[deleted],1536158171.0
qizmo,Check out Quasar [https://quasar-framework.org/](https://quasar-framework.org/),1536273976.0
cyberst0rm,"for 1, its because most deployments minify, uglify and obscure the code

for 2, it might be w feature you could request, but it might not be easy to manage the ddependencies

for 3, you could alwaye make your app more modular


overall, building vue apps are because theyre spa and trying to monkey patch will make them unstable. those build steps do a lot of things that building an app in html doesnt do. things such as code shaking, ie, not brining in code not being used.

",1536152043.0
multiplegeorges,It's interesting that Dan Abramov will be attending. ,1536152897.0
ntrabue,I would love to go. I'm a huge Dan Abramov fan and I love Vue. Unfortunately London is far away and the conference itself is out of the budget. Maybe next year I'll go to a vue conf in the US.,1536166885.0
jdmiller82,I'd go if I could. Was at the Vue.js New Orleans conference and it was great. Especially all the after-partys :D,1536156722.0
samdbeckham,I’ll be there! ,1536156863.0
distark,"My friend is footing the bill out of his own pocket for a real good reason. That why I'm going at least </plug>


honestly though.... Just because it exists is a good reason (I'm old enough to remember the first Linux expo in the UK)... It was empty, but I was there ;p",1536172120.0
vibezad,Oh my gawd those ticket prices. Event looks great though. Unfortunately I am a cheapskate. Will the talks be posted sometime later online?,1536158663.0
enyapnad,I'd have gone if it wasn't so expensive to attend. ,1536163377.0
ezaquarii_com,I'm not sure. The agenda looks like it's targeting entry-level enthusiasts.,1536166441.0
Preece,"Make a custom v model on the child component. When they check or uncheck a box, add or remove that element from the value passed by the parent. Then the parent will have an array that reflects the state of the child component.",1536129982.0
matteoo7,Am on my phone so can’t type more than bare answers but you can look into either an event bus or learn state management through vuex,1536123959.0
fobocaster,"Hi there! I think it will be useful for you to see this example (but read carefully)  
[https://jsfiddle.net/fobocaster/b7etrkmb/](https://jsfiddle.net/fobocaster/b7etrkmb/)",1536139674.0
Domsdey,"1. v-model https://vuejs.org/v2/guide/forms.html  
2. Event emitting  
3. Vuex  
4. Event bus  

I would go with either 1. or 2. You don't need state management for small apps, however you need good planning - if your intent is to build a medium to large app, I would start with vuex.",1536140399.0
brainbag,"Using an event bus is overkill for this (and is generally a bad idea overall). Vuex might also be overkill. If you only need the parent to access the filters (and not the global app) then you shouldn't use Vuex. Just use v-model on your custom component. You don't have to even use any events.

Here's a working example based on your example.

https://codesandbox.io/s/qzpj7llrv6

Look at `components/Filters.vue` and how it's used in `App.vue`",1536166809.0
lastcommit,"If you don’t have control of the model data coming into the app, try creating a computed property that sorts the model data so that elements with children are sorted first in each branch. Use the computed property as your html’s data source.

Good luck with Adobe CEP! I find working back and forth in Vue and Extendscript tough. It’s hard to rewind your brain to the old ways of working when you have all that shiny newness available on the front end.",1536119645.0
nikoz84,"Mounted : function(){
    Fetch.get()

}",1536092515.0
aesamattki,Don't immediately invoke `mounted`. It will invoke itself.,1536093640.0
toqy,"Looks neat

FYI on your demo site, if you click one of the `wip` ones, it breaks selecting the other ones",1536087492.0
mbj36,Hit star if you like it,1536084771.0
Hanlonsrazorburns,"I noticed some glitches in your demo site.  One of them slides the wrong way when it's on the right side and then the wip ones that are listed below break the other buttons.

&#x200B;",1536113372.0
MatrixClaw,Does Vuejs Developers not work for anyone else? I've been seeing their posts come through my feed the last couple of weeks but when I try to access the site I get an SSL error or connection timed out :(,1536158315.0
buddythicc,This looks absolutely top notch 🙌,1536083208.0
Lachlantula,Looks fantastic. Definitely going to give this a shot,1536127668.0
SuperFluffyPunch,hawt,1536091509.0
archivedsofa,"It's nice that it can make something draggable very easily, but without drop support I feel it's not of much use.",1536097372.0
tweettranscriberbot,"^The linked tweet was tweeted by [@popmotionjs](https://twitter.com/popmotionjs) on Sep 04, 2018 16:22:21 UTC (2 Retweets | 4 Favorites)

-------------------------------------------------

🚀 Introducing Pose for Vue!



I know some of you are fans of Vue so hopefully this will make it seamless to incorporate Pose into your Vue projects.



Read the full details here: [https://popmotion.io/blog/20180904-introducing-pose-for-vue](https://popmotion.io/blog/20180904-introducing-pose-for-vue) or check the incoming Tweet storm 

[Attached photo](https://pbs.twimg.com/media/DmQvWFfXgAIDNmf.jpg:orig) | [imgur Mirror](https://i.imgur.com/aGxkSuT.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1536078679.0
RoastedB,"Looks great, think I'm going to give this a try! ",1536097658.0
jaredcheeda,"""Just use a CSS-*like* syntax"". And ya lost me. I've been down this road, CSS ""like"" is not the same as CSS.",1536086367.0
Hadora,"Use lodash

[https://lodash.com/docs/4.17.10#filter](https://lodash.com/docs/4.17.10#filter)

i do it on one of my project. I use also paparse to generate a csv",1536077812.0
usx-tv,"Disclaimer: We don't have a full implementation of TypeScript.

We do however use a few modules to give us a TypeScript like experience:

https://github.com/vuejs/vue-class-component
https://github.com/kaorun343/vue-property-decorator
https://github.com/championswimmer/vuex-module-decorators (implementing in the short future)

This works pretty well with out setup. All of our components are class based using decorators. This really makes Vue components a lot more readable, and enjoyable to write.

Edit: I forgot to mention, some of us use vscode, other intellij. Works seamlessly on both, a .jsconfig file is needed for vscode",1536146976.0
RealPatience,"No clue on webstorm, but at our company we're using Vue (with all extras) with Typescript (decorators) and it works like a charm! I think the Vue TS decorator GitHub had some examples - check them out!",1536075631.0
BehindTheMath,"I'm currently using Webstorm with SFCs and decorators. There's no type checking by TS in the templates, and in the class it only works sometimes, but I haven't figured out when or why. ",1536124221.0
jpolito,"Here's a [similar thread](https://www.reddit.com/r/javascript/comments/8o781t/vuejs_or_react_which_you_would_chose_and_why/) where /u/evilpingwin did an absolutely phenomenal breakdown ([direct link](https://www.reddit.com/r/javascript/comments/8o781t/vuejs_or_react_which_you_would_chose_and_why/e01qn55/)):
> tldr: The difference are significant but it isn't just a case of JSX vs Templates or large API vs small API. The choices that React and Vue devs have made may have consequences down the road that you may not realise when you first pick up one or the other. The important question to ask when choosing a framework is 'where do I want my complexity'.
> 
> React and Vue can accomplish much the same thing, they just go about it in very different ways. From some of the responses I wonder if people have actually used both libraries for anything beyond simple components as that is when you really start to see the difference outside of relatively superficial differences.
> 
> As you may or not know, Vue pushes the idea of Single File Components. A file with a separate block for your template, script and styles. Some people find this comforting as there is an element of familiarity with traditional front-end development. I personally really like them, not because it 'looks like html' but because it creates structural landmarks on the page which make it quicker to navigate the file itself. React's JS/JSX combo works fine but things are a little more muddled (especially when you add styled components to the mix). You get used to it regardless. It is worth pointing out that the use of SFCs requires a build step, while Vue itself does not. I doubt this is a concern if you are considering React as an option because JSX requires a build step. if you need the ability to drop some script files into a project without a build step then React is not really an option unless you're willing to drop JSX and use React.createElement(). In this case, Vue would be the obvious choice.
> 
> The other criticism of Vue that it uses a DSL and has a large API surface area. Both of these things are true, at least it has a larger API surface area than React, it is quite small compared to some. These are separate but related concerns. The DSL that Vue uses is just another abstraction, just like SFCs are. They are designed to make you more productive and keep your code clean and declarative. JSX exists for the same reason, it is also a non-standard abstraction but allows you to leverage the full power of JavaScript within it. JSX is not JavaScript and never will be, airbnb's style guide prohibits the inclusion of JSX inside .js files for example as they are non-standard. They must go in their own .jsx file.
> 
> This is a personal choice, once you know Vue's DSL you can be more productive due to lots of helper methods and shorthand. On the flip side you have more Vue specific syntax to learn. Some people talk about cognitive overhead regarding learning new APIs and its a valid concern (although I would question it) but I would argue that React introduces significant cognitive overhead itself for the exact opposite reason, it's small API means we need to use relatively complex patterns in order to achieve certain things. I'll come to this. Lets not forget that React's API size is growing and continues to grow at a reasonable rate. We recently got the context API and we will get Time Slicing and Suspense at some point. And bear in mind that React is subject to change as well. The React team are responsive to the needs of React users and make changes where they think it makes sense. Context, Time Slicing, Suspense features have been added / will be added although it is likely that the React API will remain small and features will only be added when they make sense.
> 
> Also worth pointing out the Vue documentation is the gold standard for API docs and are incredibly clear. React docs are average but still fine, it's a smaller API so you shouldn't need them as much in principle. This comment has been criticised but I stand by it, just because other documentation is shit doesn't make React docs great and they definitely pale in comparison to the Vue docs. I don't think the React docs are particularly bad, they're just about what you'd expect from a great OS library, average.
> 
> Let's talk about abstractions though. All of these frontend frameworks are abstractions to a greater or lesser degree. Writing UI components in a declarative fashion is incredibly difficult with pure JS so React and Vue provide ways of doing this, along with a whole host of other helpful additions that allows us to bind State to the DOM without storing that state in the DOM and render changes in a performant manner.
> 
> All this said, you don't have to use Vue's templates and DSL if you don't want to. You can use JSX or the `createElement() function just as you can with React. You can also use a template language of your choice such as Pug. Vue is very flexible in this regard, which I'm not sure people realise. Being able to write real UI components with SFCs, write renderless components with only JS (exporting only the script block with no template or styles) and then switch to JSX or render functions based on your needs give you an incredible amount of control over the way you work and can keep your code clean.
> 
> When you start writing more advanced components or want to write truly reusable components (especially components that wrap other components giving them additional behaviour) you will start to see some stark differences. With React you will need to make use of one or more of Higher Order Components, Render Props, or the Function as a Child Component pattern. There is nothing wrong with these patterns at all, they're great solutions to real problems but they add significant cognitive overhead (more so than learning new syntax does) as they are relatively complex patterns. In Vue they are mostly unnecessary due to the larger API exposing a number of methods of passing data around (look into Scoped Slots if you are interested). That said you can use these patterns or similar patterns in one form or another with Vue (scoped slots are similar to render props).
> 
> This is not to say that that Vue is not as complex as React or that React is confusing in particular (scoped slots are at least as confusing as render props/ FaCC ) the important issue which some people have missed is that you need to reach for these patterns sooner when using React (many popular libraries make use of them), whereas scoped slots with Vue are not needed as often. There are a variety of reasons for this but, again, the important distinction is not what each library is capable of but rather how often you need to reach for more complex solutions to solve common problems.
> 
> They are both powerful libraries with their own advantages and anything you can do with one, you can do with the other (pretty much). React has a much larger ecosystem and better tooling, there are more jobs for React devs. Vue is faster to get started and provides remarkable flexibility and an API that allows you to avoid some of the more complex patterns required when working with React and work in a more idiomatic 'Vue' way. Things like emitting events to parents rather than passing down callbacks as props. It can make your code cleaner but it is also an additional abstraction. Vue also has more core libraries that offer tight integration with Vue while working in much the same way that alternatives for other frameworks do. React has fewer core libraries (some standard functionality in Vue requires a library with React, like checking prop types) but more libraries in general (authored by the community). It's worth bearing in mind that as ecosystems grow you end up with lots of libraries doing broadly the same thing and most of the libraries I use with React or Vue have nothing to do with the library itself outside of styling (and React will ask you to rethink everything you know about styling, which isn't necessarily a bad thing), so your mileage may vary there. In my opinion, the most significant impact of a large ecosystem is the likelihood that someone has already solved the problem you are now facing, this is the greatest benefit of React's popularity and is an important consideration.
> 
> I use both, I like both. They both annoy me in different ways. They both have their own quirks that you have to get used to. If I had to pick one? I'd choose Vue. But that doesn't mean you should. Try them out for yourself and see what you think. Take any harsh criticism or excessive praise with a grain of salt as they are both really excellent libraries made by really smart people and you won't go far wrong with either. I've tried to be impartial and note the significant differences, I may have failed, some irritations are worse than others.
> 
> Edit: I forgot to mention vue-cli which is like create-react-app+. It's a really great tool and will soon have a visual UI, which is pretty interesting. So in some ways tooling for Vue is really amazing. I also forgot to mention that Typescript integration with Vue isn't perfect right now and you might have better mileage integrating TS with React. Food for thought.
> 
> Go and play.
> 
> Edit: Clarified and corrected a few points.

",1536071518.0
LaSalsiccione,It seems fairly irresponsible to me to migrate to either based on internet opinions when no one on your team has much experience with either. Surely you'd be best served by prototyping a few things in both and coming to your own conclusions? Then you'll pick up some best practices on the way too. Otherwise you'll almost certainly end up creating a mess!  ,1536075420.0
crypt0lover,"I have built projects with both, but VueJS is so simple IMO, i don’t know how somebody would prefer React. And redux compared to vuex is so complicated, you need to install additional libraries, and in vuex its out of the box",1536092633.0
jvnk,"The Vue docs have a pretty comprehensive comparison between the two(and other frameworks as well):

https://vuejs.org/v2/guide/comparison.html",1536120334.0
felondejure,To get started with Vue is much easier than React. Also mind the difference as React is a library but vue is Framework. Mostly vanilla js. If you want to get started quick vue is a way really. I spend around 4 month on it. My code is not the perfect one but I am pretty comfortable with most aspects of it,1536079172.0
042e,"Hi, please note that I just want to provide some constructive feedback here. I understand producing a course is an immense amount of work and I applaud you for doing it.

I think at this pricing you should provide some more details about how this differentiate from other Vue courses. This is already a surprisingly crowded space, I won't link the other courses but I don't really see any reason why I would pick this over existing alternatives. I would be glad to discuss with you about potential options to make you stand out if you want bounce off some ideas and get more feedback.",1536069613.0
toadkicker,Hello all! I'm the author and if you have any questions or feedback feel free to shoot me a message.,1536065725.0
kirbyfan64sos,"Simplest? Just Vue. 

Seriously, the best thing about it is that you can start with vanilla Vue and add other components as you see fit!

If you're looking to include backend serverless functions, then Firebase is probably the easiest to use. 

One other thing: make sure you understand what the options are doing and most importantly *where they stand*.

- Firebase is a serverless development platform. 
- Apollo is a sort of GraphQL toolkit. 
- Graphcool is a GraphQL framework. Based on my limited knowledge, Apollo leans more towards frontend and GraphQL towards backend. 
- I think Prisma is a more flexible (but more complicated) Graphcool alternative (honestly I started to get a bit lost here). 
- Strapi is a...database of sorts that automatically creates a GraphQL API?
- AWS AppSync is a GraphQL/Apollo-powered realtime update service that sort of competes with parts of Firebase.
- AWS Lambda is a compute service that competes with Firebase Google Cloud Functions. 
- Netlify is a static website hosting service (with some dynamic capabilities) that sort of competes with Firebase Hosting. 
- Nuxt is a framework on top of Vue. 

Basically you described Firebase, a bunch of stuff that, when combined, is an alternative to Firebase, every GraphQL service you can thing of, and...Nuxt. ",1536043706.0
jingle66,"If you have highly related data I would think twice before using firebase.
Hasura.io might be a good alternative. Its a graphql server, mapping to postgres and also has serverless capabilities. There's a vue/vuex example on their github account. Looks pretty clean.",1536091358.0
Scwewywabbit,"hey!

I might be able to help.

1. For the front-end, using Vue plus Nuxt makes building PWA, server-side rendered apps a breeze
2. For data currently I'm actually currently running Airtable, along their API. It's a bit slow, and doesn't scale well, but insanely fast for prototyping. I'm using a serverless system called webtask to handle auth, running express.js
3. For a more scalable data backend, I'm setting up to switch to GraphQL using Prisma, which is an implementation of GraphQL (Prisma and [graph.cool](https://graph.cool) are the same company, Prisma is their latest, open sourced iteration), on Prisma Cloud, which is a cloud-based database setup (right now it's in beta and just for testing, they'll have db as a service later I think). It gets a little confusing though: Prisma consists of a database (like MySQL), the Prisma DB interface, and a Prisma server, which talks to the prisma+db interface. You can host your Prisma server on something like Zeit Now, for serverless behavior.
4. LASTLY...... I'm using Apollo (more precisely, nuxt/apollo) on top of vue/nuxt to actually access the data that's hosted on that prisma system

I haven't moved my data over yet, but it seems to work. I should set up a quick ""todo list"" tutorial for confused people, because I was confused (until 20 minutes ago). And to get it setup is actually pretty fast. You just have to... follow a few different tutorials.

As for Firebase, I considered using it. But I'm prepping my system to scale up to tens of thousands of data points, and firebase can get quite confusing b/c once you start changing your data's shape, it gets really messy. Import and export is messy, search is messy, etc. What's nice with Prisma is that it sits on top of a regular SQL db and you can do whatever you want with it. Firebase is probably more proven and might be more stable (despite their weird bugs and downtimes) but I'm testing the waters with Prisma.

Hope that helps!",1543035611.0
ISNT_A_NOVELTY,"You don't need typings to use some javascript module in your TS project. They're nice to have for sure, but not needed. https://stackoverflow.com/questions/43529328/how-to-use-an-node-module-without-typings-from-typescript",1536037614.0
ImReddit,https://vuejs.org/v2/guide/components-registration.html#Global-Registration,1536025516.0
,[deleted],1536041401.0
brainbag,"According to [the official Vue Style Guide](https://vuejs.org/v2/style-guide/#Base-component-names-strongly-recommended), you're on the right track. They suggest that you create some base components (prefixed by ""Base"") and then register them globally.

The docs also show how to do the global registration in bulk - https://vuejs.org/v2/guide/components-registration.html#Automatic-Global-Registration-of-Base-Components

However, if you're using TypeScript for some of your components, that won't work. Here's our code that supports loading standard components, TypeScript components, and components that don't have a ""name"" property set:

    const requireComponent = require.context('./components/base', true, /^.*\.(vue|js|ts)$/)
    requireComponent.keys().forEach(function (fileName) {
      let baseComponentConfig = requireComponent(fileName)
      baseComponentConfig = baseComponentConfig.default || baseComponentConfig
    
      let componentName = null
    
      // Catch Vue.extend components that are functions instead of objects
      if (baseComponentConfig.options && baseComponentConfig.options.name) {
        componentName = baseComponentConfig.options.name
      } else if (baseComponentConfig.name) { // Regular ""export default {}"" objects
        componentName = baseComponentConfig.name
      } else {
        componentName = fileName.replace(/^\.\/(.*)\.\w+$/, '$1')
      }
    
      Vue.component(componentName.replace(/^Base/, ''), baseComponentConfig)
    })

Note that it doesn't matter if you register Vue components with `TitleCase` or `kebab-case`, you can use them either way in templates.

As the Vue style guide recommends, we prefix our base components with Base, but then remove ""base"" when we register, so we can simply use `form-input` instead of `base-form-input` in our templates.",1536064518.0
GoogleMac,"In your main JavaScript file that initializes Vue, you can import components there and then there's some function you can pass the component to (I don't have my computer with me right now), like `Vue.bind(component);` I don't remember the function name. ",1536033368.0
vuehero,"""<form v-on:click.prevent=""submit""></form>""  
I think you mean:  
""<form v-on:submit.prevent=""submit""></form>""",1536037661.0
jones1618,"Doing it the Vue.js/Router way: [StackOverflow - Vue.js Get URL Parameter](https://stackoverflow.com/questions/42309986/vuejs-get-url-query)

​

Or, why not use plain JavaScript?: [Get Query String Parameters](https://davidwalsh.name/query-string-javascript)",1536025389.0
tonjohn,Are you using Vue Router?,1536010906.0
ratnose,"So a few steps forward, thanks to you guys...

Here is the code I am trying to get to work atm, as long as I had methods nothing happend, but I need that function to run when the page loads.

new Vue ({  
 el: '#game',  
 data: {  
 json: null,  
 geturl: ""r/http://my,python.api:6750/setup/""+window.location.search.slice(-1),  
},  
 methods: {  
 getGame: function () {  
 console.log(geturl);  
 axios   
.get(geturl)  
.then(response => (this.json = response))  
.catch(error => console.log(error))  
}  
}  
})

&#x200B;

getGame();

&#x200B;

This gives me an error:

Uncaught ReferenceError: getGame is not defined

Say what? Nad nothing gets printed to the log either.",1536034435.0
liloow1,"Try with : 
```js 
props: {
  selectedExchange: {
    type: String,
    default: 'acx',
  },
},
```
Also, remember that for the default option to be used as a fallback, the actual attribute shouldn't exist or at least be undefined in the parent. (`null`, `""""` are considered as values)  
And by checking the type of the props, Vue will actually raise an error as well of the passed value is not what was expected",1536008880.0
kokodama,Ive trying to wire this up just today. I stumbled upon this repo which uses Nuxt (Vue lib for server side rendering) and the WordPress API. Might be worth it to check out! ,1536007872.0
DavNej,"Hi guys! Thanks a lot for the tip. NuxtJS looks very interesting I'm diving into it. I'm still looking for complementary resources and I'll go deeper on the nuxt-worpress-pwa repo too.

But it didn't really understand how the server will manage to do its work. If I have wordpress installed with a vue/nuxt theme, should the server run php code as well as node code? What if I want to edit the functions.php file to add some actions to it for example?",1536134129.0
jfmasterson,"Hi there, 

I'm pretty sure that all of the above are included in the ag-Grid Community version.

Worth checking out.

HTH.",1535985000.0
nmarshall23,"I'd really question if you really need all of those features. Even using ag-Grid that's going to require plenty of configuration and testing.

I've used ag-Grid Enterprise it's a lovely piec*e* of kit. Does feel like it does everything and you will spend some time just to understand how all of those features works, and it's particulars. Only ended up using it because the client insisted they needed an spreadsheet like experience. 

&#x200B;

Have you taken a look at the list from [awesome-vue](https://github.com/vuejs/awesome-vue#table), you should spend a few days just trying out the other options. There are a bunch of new ones since I last looked. 

My next project will need admin interface, vue-crud-x and vue Data Table are looking good for my uses. But I don't want infinite scrolling, or user customization of the UI.",1536045441.0
guanzo,"jQuery Datatables can do all of that and more, it's a fantastic project. The obvious hurdle is that you need to integrate it with Vue. It should be easy enough with a few watchers.",1536123269.0
Darkwind791,Been looking at Tabulator (http://Tabulator.info) which now that v4 has removed the jquery requirement will need to fork and see what viewifying it needs. ,1536865229.0
brainbag,Existing thread with discussion: https://www.reddit.com/r/vuejs/comments/9aovcj/tiptap_a_renderless_richtext_editor_for_vuejs/,1535980777.0
themoofinman,"Hey folks,

Mod here. I hear you loud and clear, and we need to figure out a better way to do this. There are a lot of articles that are actually being filtered out, mainly spammy stuff, but the _getting started_ posts are a bit trickier to catch. The downvote method works, but it also still clutters the subreddit with garbage. I'll also add that flagging posts as spam really helps bring it to my attention. There isn't a lot of moderator action on this sub, but it's something I'm working on.

Regarding the getting started sticky, that's a really great idea. It will go no the list of *todos* along with getting the new version of the subreddit up to par. I'm also very open to other suggestions etc on how to make the community better for people that are Vue newbies all the way to veterans.

More to come.",1535999769.0
Lachlantula,"I agree. Let's be real, also; the official docs are probably the best (text-based) place to start, anyway.",1535957958.0
Brachamul,"Could we just sticky a ""Getting Started"" thread and let people post tutorials there ? Would be a good place for newbies who sub here to start.",1535968285.0
inhalingsounds,"Fully agree, given that all of those articles are basically copying what the official docs have written.",1535962109.0
AlexJoverM,"I don't agree with this since I'm not sure if that would be the best solution. Is true that there are many introductory articles, but they still have (at least) 2 purposes:

 \- Help spreading the word about Vuejs

 \- To beginners, they can be helpful  


Yes, Vue docs are amazing,  but sometimes you need the concepts explained in different ways. That said, probably some of these articles are spam, just copy/pasted with low effort. Those are the worst indeed.  


But please, keep in mind there are articles written with great effort by authors which could feel really sad if that happens to them.",1535969852.0
androiddrew,"At first i wanted to jump on this bandwagon, but I think the democratic method of down voting poor content should be the mechanism for control. I don’t think 2-3 moderators should be making that decision whether this is an introductory post or not. 

It could also prevent people from writing more advanced posts. In my experience i start at the beginning assuming nothing from the reader. Then when building the foundation I move on to the more advanced concepts. Sometimes I’ve seen people do this across multiple posts. I don’t want them to be discouraged from writing that fifth or six post continuing a series.",1535980116.0
Zanktus,"While I agree with you I also have to say that everything that helps to spread the word is a good thing. One of these ""Getting started with Vue"" posts lured me in years ago even tho it was a really low effort one.

I think we need better quality filters and stuff, but not ban them, because they are important for us as a growing community.",1535959138.0
IamTheFreshmaker,Could we not? The original reason I came here initially was because of a getting started article and I believe that other people may have exactly the same reason for seeking out this sub. How hard is it really to just ignore(including not down voting it) an article that doesn't pique your interest? Start a r/vuejspro that has some restrictions.,1535991065.0
Tiquortoo,Just auto repost the Laracasts tutorial weekly and be done with it.,1535976561.0
Downvotes-All-Memes,"I downvote anything that isn't using Vue CLI 3 at this point as well. Out of (very stable and usable) beta now, time to get some up-to-date tutorials.",1535996279.0
matteoo7,"Honest feedback. This is tapestry for shit. I hope you’re not proud of this absolute waste of click effort. Edit the damned thing to make it at least even remotely helpful to whoever your target audience is. In fact, a link to the official documentation would have been more helpful For ffsakes..",1535958481.0
nmarshall23,"It's a bad idea to define a class definition inside of your component's methods list. I can think of no good reason would be useful. Move the Stopwatch class to a separate file.

Once you have done that look at your code once more and I'm sure you will see that Stopwatch's this isn't the component's this.

&#x200B;

&#x200B;

On Importing js files.. Your Stopwatch.js could look like:

`const Stopwatch = function(elem) {}`

`export default Stopwatch;`

Then in your component `import Stopwatch from './Stopwatch';`

You will need to change any references to `var watch = new Stopwatch(...)`

Mine your this's...",1535965621.0
RoganTheGypo,"Hmm, this is odd. This **MIGHT** be a webpack issue, can you try building and deploying with the mixin and see if it still happens? I tried it in a nextTick too for mounted and has the same issue? Might be worth asking on the forum too as the core guys lurk more there. ",1535964082.0
fk_the_system,Anyone worked with this cms already? Any opinions?,1535993065.0
RoganTheGypo,Personally. I'd render instance first and show a simple loader. Providing user with feedback on what the application is doing is a big deal. Everyone understands that apps need time to load. So in short I think this isn't a great way to do it,1535914109.0
irphunky,"I assume your going yo have more than one page? If so look at vue-router and beforeRouteEnter, you can use that to kickoff your api call and continue the route change on success.",1535914020.0
rocksride,check Nuxt.js which is Vue.js on steroids. You can fetch data on the server and prerender the page there  ,1535926896.0
thiswasprobablyatust,"Spawning the entire app only after API calls have completed doesn't make sense to me. You could easily shift these to your Layout component, and render a spinner/bar if the calls are still in progress.",1535914122.0
GoogleMac,"No offense, but I think you may be going about this in direct opposition to the idea of Vue and of a SPA. Typically, people want to see something on the page. Even if that is a loadng icon, they are satisfied. 

There are some preconfigured loading components you can find. I like Element UI's full page loading. 

You can have Vue attach, then in the mounted function set this.loaded to false (which starts the animation), then send the request for the data. In the function or promise-resolution responsible for handling the returned data, set this.loaded to true, which could trigger the loading screen to go away. ",1535920275.0
tonjohn,"Cool!

&#x200B;

First and foremost, I recommend making your variable names slightly more descriptive and avoid using names that collide with existing properties on Javascript objects, particularly ""length"". This will both make it easier on your future-self and for anyone else that might read your code.

&#x200B;

I suspect your next/previous buttons aren't working due to how you are changing state. Since you are updating the property (progress\_comment) of an object (last\_update), the change isn't picked up by the [reactivity system](https://vuejs.org/v2/guide/reactivity.html). To fix your code as is, either assign last\_update to a new object `this.last_update = this.updates[this.index]` or use` Vue.set(this.last_update, progress_comment,  this.updates[this.index].progress_comment `)

&#x200B;

I've updated your variables and simplified things a bit. Let me know if you have questions!

    <template>
    ...
    <div class=""book-progress"">
        <h3 class=""book-title"">Book Title</h3>
        <p class=""book-author"">by Book Author</p>
        <p class=""book-comment"">{{ rgComments[curCommentIdx].progress_comment }}</p>
        <div><span v-if=""curCommentIdx > 0"" @click=""previousComment"">Previous</span> | <span v-if=""curCommentIdx < rgComments.length-1"" @click=""nextComment"">Next</span></div>
    </div>
    ...
    </template>
    
    data () {
            return {
                rgComments:     [],
                newestComment: {},
                curCommentIdx: null,
                errMsg: """"
            };
        },
        created () {
            this.fetchData();
        },
        mounted () {
            
            
        },
        methods: {
            fetchData: function () {
                fetch('http://rcno.local/wp-json/rcno/v1/currently-reading').then(function(response) {
                    return response.json();
                }).then(function (data) {
                    this.rgComments     = data;
                    this.newestComment = data[data.length - 1];
                    this.curCommentIdx       = data.length - 1;
                }).catch(function(err) {
                    this.errMsg = err;
                    console.log(err);
                });
            },
            previousComment: function () {
                if( this.curCommentIdx > 0 )
                {
                    this.curCommentIdx--;
                }       
                console.log(this.curCommentIdx);
            },
            nextComment: function () {
                if( this.curCommentIdx < this.rgComments.length - 1)
                {
                    this.curCommentIdx++;
                }       
                console.log(this.curCommentIdx);
            }
        }

&#x200B;",1535941794.0
cyberst0rm,"I like the vuejs plug in async-computed

It adds a top level asyncComputed property that works exactly like computed, but uses returned promises.

So, create a fetch function

    fetchData () { 
        new Promise ((resolve, reject) => fetch(this.computedUrl).then ((response) => resolve (response)))
    } 

Now, you created a computedUrl that you update via component data. Everytime computedUrl changes , fetchData will resolve the response and it will be available  at this.fetchData

If you need to monitor it, you can watch it and do whatever.

This works well for me and allows me to properly structure in the context of vues reactivity system",1535937864.0
ABuchou,"Hi.  You could use the spread operator as such:

    export default new Vuex.Store({
        ...rootState,
        modules: {
            user: user,
            cart: cart,
        }

    }) 

I also have a blog where I just did an article on a way to clean up code for including modules in vuex as well.

If you're interested, please take a look:  https://remotedevdaily.com/vuex-productivity-hack-how-to-import-all-vuex-modules-automatically/
",1535920756.0
thiswasprobablyatust,"If you have a lot of machinery/logic, Typescript can _absolutely_ be a benefit. As in, if you have a lot of code that could/should easily be pulled out of a component and into a library, or is otherwise highly testable outside of a component-setting.

In this setting it makes it a lot easier to reason about what's happening at any one point, and can provide some extra confidence (just like a good test would) about methods.

In my experience, in a pure CRUD setting, Typescript provides less benefit in Vue just because of the nature of Vue. I also currently _hate_ how Typescript is half-shoehorned into Vue SFCs — and IMO breaks one of my favorite things about Vue; namely that there's always ""one true way"" of doing things. There's like 5-6 ways of doing a Typescript Vue component, and all of them feel like an afterthought.

",1535908170.0
hypernautical,"Currently using TS for the first time in an app of decent size (50+ components I think). The set up and integration can be painful making it work across vue and with libraries, but when it works I'm starting to find I really appreciate its documentation of my data structures. If I have to jump back into a feature I haven't looked at in a month or so, looking at the data passed around between multiple components, TS reminds me and reassures me what data is needed and available in the setting. No wondering if a property is a string or a number or if I can blend arrays of different but compatible objects for my interfacing requirements. ",1535910697.0
binarytide,VSCode can give you approximation of type checking if that is a concern. As someone that doesn’t currently use ts the benefit would come from interfaces when writing helpers for vuex stuff.,1535908307.0
championswimmer,"Things that Typescript can help with is like this 
 https://pbs.twimg.com/media/DmHTMiJUYAAcv2K.jpg 

Did you think you can get autocompletion (with data types) for mutations and actions ?? Typescript (+ some decorators) go a long way to make sure you are always writing code that passes basic checks of datatypes, nullability etc. 

vue-property-decorators
vuex-module-decorators

These two are highly recommended (disclaimer: I am author of 2nd one) to enhance your Typescript experience. 

Although if you prefer recursive higher order functions and currying over writing Java/C# -like Object oriented code, then it might entirely be your cup of tea. (One way isn't better than the other, just different)",1535918777.0
Pyro979,"Nice. You should add hours as well, just in case.",1535897344.0
kallexander,"Good job on the tutorial, but you should really start using [Emmet](https://emmet.io/) for HTML element creation.",1535878421.0
so_lost_im_faded,"I didn't know about this, thanks! Looks beautiful, I love the material ^(but not the ugly Google kind of material) look. It's very clean, can't wait to use it in my next project.",1535889309.0
tweettranscriberbot,"^The linked tweet was tweeted by [@Akryum](https://twitter.com/Akryum) on Sep 01, 2018 01:05:43 UTC (91 Retweets | 274 Favorites)

-------------------------------------------------

🔥 It's finally here! [@vuejs ](https://twitter.com/vuejs ) devtools 5.0.0-beta.1 🔥



Routing tab, Performance tab, Settings tab and countless other improvements! 🐈



Firefox download and changelog: [https://github.com/vuejs/vue-devtools/releases/tag/v5.0.0-beta.1](https://github.com/vuejs/vue-devtools/releases/tag/v5.0.0-beta.1)

Chrome download: [https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg](https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1535802049.0
KingPrice_,Really cool.,1535811146.0
ciscokidx,Saweeeeeet,1535849441.0
chekchek09,good work hope the swipe finger touch in mobile will be available next update,1536349887.0
janakaontomatrix,What's the output? Any errors?,1535774883.0
earthboundkid,CORS error?,1535826352.0
manu_8487,"I looked into firebase, parse and aws amplify while freshening up my vue skills this week. Didn't like either. Amplify is probably the most mature, but I ended up with a simple django backend to do graphql (including registration and authentication via jwt). 

I wouldn't bother with these BaaS services because they will eventually limit you in some technical way or become too expensive. Especially since coding your own backend is very easy with today's libs and boilerplates.",1535763072.0
BunsOfAluminum,"If you could post an example of a bus that breaks this way to JSFiddle, it would probably be a lot easier to diagnose.",1535751956.0
cyberst0rm,"Most likely is the event bus listen $on is happening after the $emit

The structure of the app would make the emitter either a parent or a sibling that gets rendered first.

",1535775362.0
Downvotes-All-Memes,"If you're using CLI3 you probably noticed there's a ""views"" directory and a ""components"" directory. I use my ""views"" as the page sandbox and assemble components into that sandbox as necessary.

So make a Blog view and include those layout components, then make another view for whatever page doesn't need to include those. This is a pretty basic usage of the Vue Router, so don't overthink it. 

Ask more questions if you still don't get it and I can try to expand.",1535740395.0
RoganTheGypo,"https://vuejs.org/v2/guide/conditional.html 
there's a few ways to conditionally render in Vue bud.",1535738485.0
tweettranscriberbot,"^The linked tweet was tweeted by [@vue_london](https://twitter.com/vue_london) on Aug 29, 2018 13:15:18 UTC (87 Retweets | 584 Favorites)

-------------------------------------------------

📚💡Expert Announcement💡📚



We would like to extend a warm welcome to the fantastic Dan Abramov - [@dan\_abramov ](https://twitter.com/dan\_abramov ) He will be joining us at Vue.js London as an Advice Lounge Expert.



Find out more at [https://vuejs.london](https://vuejs.london) 

[Attached photo](https://pbs.twimg.com/media/DlxRelhV4AIjtDn.jpg:orig) | [imgur Mirror](https://i.imgur.com/f5cqBnB.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1535732566.0
jaesung2061,"Lol the guy that’s responsible for the most wasteful, useless, state management package that easily tripled the development time for anything larger than a simple app? The guy that can be defined as the exact opposite of a practical programmer? The guy that prefers “design patterns” that sound advanced so it must be good? I’d love to hear the amount of fancy 20 letter design patterns that he brings up and hints that the Vue community should be following.",1535735353.0
Wompingsnatterpuss,This is a react-powered page. ,1535711487.0
tribak,"Props down, events up.",1535684607.0
jemminger,https://vuejs.org/v2/guide/components.html#Using-v-model-on-Components,1535680901.0
jingle66,I use vuex as much as possible to avoid props and events juggling,1535748434.0
not_a_racoon,"This is a good write up, but it might also be good to look into how one can also use v-model for this sort of thing. It’s syntactic sugar to implement v-on (as you showed here) and also v-bind:value, which lets you set up 2-way binding between parent and child components. 

See more here: https://vuejs.org/v2/guide/components.html#Using-v-model-on-Components

And here: https://vuejs.org/v2/guide/components.html#Using-v-model-on-Components",1535674439.0
CWagner,"Just a tiny thing that was bugging me:  
`class Dep { // Stands for dependency`

So… why not:  
`class Dependency { // Still stands for dependency but now this comment can be removed`

edit: Just so this doesn't sound too negative, the article itself is really great, this was just a nitpick that stood out, especially because it's such an easy thing to fix.",1535692160.0
YouSeeWhereBradAt,Way to go!,1535663019.0
nricu,Very interesting. Thanks to share!,1535703627.0
SuperFluffyPunch,"Some text editors can work with vuejs components but with added plugins. Such as:
Atom, Sublime Text, vim, etc.",1535663305.0
teh_capn,"Never heard of this editor, but the first FAQ tells me everything I need to know.

>FAQs  
>  
>Does micro support Vi keybindings?  
>  
>No, if you want to use Vim then use Vim.

&#x200B;

Translation: we don't give a shit about users",1535672812.0
toqy,"Maybe track this issue

https://github.com/zyedidia/micro/issues/1138",1535670925.0
ozkarmg,"Exactly like you described:

www.site.com/posts/:id

grab the id. pull it from the database.

https://router.vuejs.org/guide/essentials/dynamic-matching.html",1535641196.0
Downvotes-All-Memes,"https://router.vuejs.org/guide/essentials/named-routes.html

https://router.vuejs.org/guide/essentials/dynamic-matching.html#reacting-to-params-changes

You should be able to figure it out between those two sections of the docs.

Basically as you loop over your posts, you'd create a link at that time (maybe make the heading or a ""read more..."" a link?) and use a post ID or title (something unique) as a way for your router to know which component to use and then *I think* you could hit your database in that component using the $route.params.(ID, post title, whatever).",1535641208.0
chewm_,"amazing, I need check how integrate this with my nuxt code...thank you!!!",1535639664.0
Aerosphere24,Going to try this in the weekend. This would sure make my work much cleaner!,1535633699.0
codechinchilla,"Been waiting to use Vuex until something like this came out, excited to try it out!",1535641335.0
desnoth,Wow this looks great!,1535655606.0
ABadWomanDriver,Epic,1535671862.0
mwh1989,"Yes finally, going to try this just what I have been looking for",1535816928.0
championswimmer,"UPDATE: Take a look at the autocomplete it provides 

https://pbs.twimg.com/media/DmHTMiJUYAAcv2K.jpg ",1535918549.0
desnoth,Anybody having problems with the devtool?,1536048453.0
NonsenseFactory,you can do this with css grids?,1535624640.0
RoganTheGypo,"Without knowing the whole use case, you could use promises and then on success/error have a timer in there before it emits the result to simulate a terminal? It’s hard to suggest stuff with little to go on.",1535658080.0
Omario,"The stuff in your js files must be exported so you can import them in your .vue file (or any other js file), look up js export/import to do that.

If you want to make a handler for template events (on key up or w/e), a new function must be defined in the methods object of your Vue Component object, just define it there and call your imported function from there directly.

Hope this helps, goodluck!
",1535596386.0
majorius,"cool approach, didn't think about passing props to slots ",1535578281.0
Kritical02,"This is something I've been looking to use for an upcoming project of mine.

https://vuido.mimec.org/

https://github.com/mimecorg/vuido

edit: Nevermind I realized you still wish it to operate as a webapp. Will keep up for anyone else looking for such a solution however.",1535575697.0
ColtenP,"By any chance is the close button, the default focused items when the modal is selected?

&#x200B;

If so, then it could be that it is selected and when you press enter, it triggers the ""click"" event.",1535572901.0
dave__stewart,Is there a form in your modal? A button without a type=button with a click handler will fire on a keyboard enter as it will trigger the form submit and seems to fire the click handler,1535991674.0
Dispersia,"This is in no way a ""zero to hero"" guide. This teaches you nothing about Vue.

>Has Vue passed React in popularity yet? YES

This is highly misleading. More stars has absolutely nothing to do with the popularity of a framework. Look at Angular, it has like 1/4 of the others, and it's still more popular than Vue.

I also find this hilarious:

>There are many reason I would choose Vue over any other framework

and then the very next line:

>Pick the right tool for the right job. If you have a hammer everything looks like a nail.

That sounds like you're using Vue as your hammer.

Is the comparisons seriously an image you just added to the page?...

​

EDIT: Ah. You literally took an image of their web page to make yours longer. Wow.

EDIT 2: Ah, it's a ""zero to hero"" guide because it's a multi-part. That sweet sweet Ad revenue, I guess.",1535561392.0
defiantBoomer,"I would just dispatch a request for the data on some component 'created' method if the data does not exist in the store. This way even if you unmount and remount that component, the data would already exist in your store, and it won't dispatch a new request.",1535568751.0
binarytide,"set up a watch in the component to trigger the initialization of data, and wire the computed property like normal",1535573919.0
multiplegeorges,"Not only should you not use getters for this, I think the getter result will be cached by VueX for the life of the app. When you request it later, I think you'll get the old resolved Promise back -- but I'd have to test this to be 100% sure.

Actions are made for this, so I'd use them in this case. I would have the root-level component dispatch an action on `created` that contained the async request and `commit` the result with a mutation that modifies the configuration data.

Since getters are reactive to their dependencies you can watch `$store.getters.configData` where ever you need it and react accordingly.

",1535583355.0
Sphism,I was recently struggling with a similar data loading issue. The solution was to load the data into JSdata and use it from there. ,1535621918.0
Wuma,"I don't know about any patterns as I'm still fairly new to vuex too, but I tend to have a vuex store representing one object, in your case a single shop. The store will have actions to collect a store by id from the database via an API, and to post the state back to the database via an API. You can add a bunch of mutations to edit the state of the store in vuex, and your vue components can use two way computed properties to both get and set data using vuex as the single state source. e.g.

    computed: {
        shop: {
            get() {
                return this.$stote.state.Shop.shop;
            },
            set(value) {
                this.$store.commit('Shop/update', {
                    shop: value,
                });
            }
        },
        location: {
            get() {
                return this.$stote.state.Shop.location;
            },
            set(value) {
                this.$store.commit('Shop/update', {
                    location: value,
                });
            }
        },    
    }

My mutation would be something like:

    update(state, options) {
        if (typeof options !== 'object') {
            return false;
        }
        Object.keys(options).forEach((key) => {
            if (typeof state[key] !== 'undefined' && key !== 'id') {
                state[key] = options[key];
            }
        });
    },

And your state would be:

    state: {
        id: '',
        shop: '',
        location: '',
    }

This all works for me, my biggest problem is how verbose it is typing out all the two way computed properties, but there are plugins out that to handle that for you. e.g. [https://github.com/maoberlehner/vuex-map-fields](https://github.com/maoberlehner/vuex-map-fields)

Edit: Added key !== 'id' to the mutation as you don't want people being able to modify that.",1535572021.0
jpugas,"If a user can have more than one store, I would generally have two objects in my store. First would be an empty array and the second an empty object. 

Prior to the export call I would define an initial state to the store object. Then you're running everything through getters, mutations and actions. I wouldn't imagine that you need the computed setter and getter in the computed property unless you're trying to display something in real time, this seems like you would be able to do it by simply running the object through an action on submit. 

In your actions you want to first get all stores belonging to a user and set that to the array. Then you can pull it from a getter like this.$store.getters.getAllStores

Then if they click add a new store, use object.assign method to copy initial state object to your store.shop. Then on submit call this.$store.dispatch('createShop') and after it successfully saves to your API, use a mutation to copy that object to your store.shop object. If that's what the ux calls for. Or, simply push that object into your shops array and redirect user back to their shops list. ",1535666478.0
karapirtik,I haven't seen any library like this before. Is this a Prezi like new trend? What is the target device for this library? Desktop/mobile?,1535561267.0
ImReddit,"I bring this project up all the time at work. It cracks me up. 

It seems amazing, yet so wonderfully specific I can’t see anyone using it. ",1535598158.0
Arswaw,"I think this looks cool. The examples are compelling. They make sense for specific cases, and not necessarily most web-pages.",1535568829.0
tinchox5,"Hi @magenta_plancenta I'm Martin, the creator of zircle-ui. Thank you very much for publish this post!!!",1535642515.0
vuehero,"It's okay that you downvote my thread, but would you mind sharing why?

Is it the app, is it the content, is it the pricing?

The app is built using Electron Vue and it contains information about Vue and Firebase,

so I felt it was a good fit for this subreddit.",1535544123.0
DOG-ZILLA,"No offense, but how can you be a Software Manager and say something like ""...the syntax (and this might be more of an ECMA 2016 concern) seems very counter intuitive and obfuscated at times.""?

​

Sounds like what you're looking at is standard JavaScript. I don't know how that confuses you. If you're not familiar with new methods and API's in JavaScript, I recommend [https://es6.io/](https://es6.io/) to get familiar with it. People have been writing this way since the popularity of Babel.

​

1. If you're using Nuxt, then SEO should not be a problem for you, since you can server render with it. How to do that though depends on your setup, but that's what it's built for so I assume that's why your developers chose it (good choice).
2. Routing is entirely up to you. You could have them all defined in Vue Router, or have a ""catch all"" that links in with your API somehow. It really depends. EDIT: You do not have to use Nuxt’s default, folder-based approach. You can extend the routes. 
3. See above. ES6 and up is much simpler and nicer to work with. This should not be a problem.
4. Vue is not as new as you might think (initial release in 2014) but it is now gaining huge traction. It's not going anywhere anytime soon and has had the best development workflow I've ever seen with a JS framework when using the Vue Cli. Vue is not even version 3 yet, but it's come along over the years with constant improvements whilst also maintaining a very stable and common sense API.

​",1535478462.0
hugo__df,"1. SEO

Nuxt can be set up to server-render (or even statically render) pages, meta description and so on can be added to the head. So this isn't really a valid concern if your team is aware this is a requirement.

2. Routing

Nuxt should be handling this, not sure what the codebase looks like (there's tons of ways to shoot yourself in the foot but it can be done correctly).

3. ES2016

This is the latest ECMA standard, might take you a bit to get used to but it's the future of JavaScript and mostly allows you to write better code faster.

4. Long-term support of Vue

Vue is set up to be sustainable (ish), if you want to make sure of this, donate to [Evan You's patreon](https://www.patreon.com/evanyou) and the [Vue open collective](https://opencollective.com/vuejs).",1535475583.0
,[deleted],1535575001.0
earthboundkid,"Your first two concerns are totally valid and underrated by SPA proponents. Don't use Vue, React, whatever for web_sites_, use them for web_apps_. If you have a bunch of interior pages that need SEO, you're making a site, not an app, so you can and should render the pages on the backend. You can still use Vue to enhance your pages, but using, e.g., Vue Router is crazy and just going to make everything harder and not easier. There's nothing wrong with just pulling in HTML blobs from the backend to keep things simple.

As for modern JS, I dunno man, just complain to the ECMA committee. It is what it is.",1535487159.0
ataraxy,It's not going anywhere any time soon.,1535478722.0
rnenjoy,Very fine and crafted UI library!,1535485693.0
SharpSeeer,Nice! Congratulations! ,1535499989.0
zepecat,cool!,1535507127.0
imapersonithink,I love the release schedule and constant improvement.,1535509651.0
kiarash-irandoust,Well done! Congratulations!,1535550450.0
funtimerhyme,Vuetify is easily one of the best UI libraries I have ever used,1535552629.0
enkafan,"Has this been deployed? If so not sure if this still fits in the spirit of what Lighthouse is hoping to deliver for performance. It's still downloading almost 33 files in about 2s for a total of 2mb just to show the login screen.  In fact, the only way I can get the Lighthouse score above a 30 is if I disable the default throttling at which point you'd have to have some super slow internet or a horribly optimized site to not get a good score. 

I've spent quite some time working with Vue and my bundles to get a good first impression going. Async like is described in this article is the way to go. But still bringing in so much of lodash, moment and other libraries just for a login screen implies to me that you are still bringing in a ton of baggage globally. To put things in perspective the initial load of the site I've been working on for a quick first impression is 9 requests with 100kb. And I still think I can get that lower if I stop registering Font Awesome and some filters globally. ",1535483407.0
BehindTheMath,"That error means you're sending an Authorization header, but the API doesn't allow that. ",1535472565.0
yhc44,Try [cors Package](https://www.npmjs.com/package/cors),1535563367.0
Dpakoh13,Looks like you need setup server: google CORS ,1535475358.0
RumilSH,"Yo can simply emit from the table an array with the selected checkboxes. If that array has any item, you make the button to appear. (I'm supposing here that they are 2 separate components) ",1535466900.0
hapikacsa,"Since your action bar and user list are a different components(?) you can use Vuex, but you could emit an event as well.

In that case when every row is a component better to use a store prop to check that is there any active checkbox - to do this better to move everything into your store. 
In that case when the table is lower-level component maybe a method - which emitting an event - is enough.

If you chose Vuex you should do all the CRUD operations with it. And let the components to be a presentational layer only. 
",1535467470.0
bnlv,"Yes. I resisted, thought it’d be too hard, tried to find ways around it, went crazy with props and emits... and in the end spent the three hours it takes to get to know Vuex and now wonder why I didn’t before. There’s way more magic in using Vuex than I anticipated too. It’s worth the investment in brain time.",1535479949.0
michaelthiessen,"In general, state management libraries like VueX and Redux should only be used when necessary. This means that you start without it, and once your app really really needs it, you refactor it a bit to integrate VueX in.

Starting with extra libs you don't need can slow you down and make your code more complex. If you need it later you can always add it in.

**To solve your problem**

You can keep your checkbox state in a parent component (I'm assuming a lot about how your app is structured here):

    <template>
      <action-bar :selected-ids=""selectedIds"" @perform-action=""performAction"" />
      <table :selected-ids=""selectedIds"" @select-id=""selectId"" />
    </template>

And then for the logic:

    export default {
      data() {
        return {
          selectedIds: [],
        };
      },
      methods: {
        selectId(id) {
          this.selectedIds.push(id);
        },
        performAction(action) {
          // perform action with selected ids here
        }
      }
    }

You just keep `selectedIds` in the `data` of your parent component and pass it down as necessary. When you need to select something you emit an event from the child into this parent container.",1535491697.0
LloydAtkinson,Yes. I highly recommend it.,1535542575.0
dave__stewart,"We've completely moved away from vuex for crud. Way too much needless overhead for just syncing with a server.

As such we really looked at what we really needed for crud, and developed Axios Actions:

- https://github.com/davestewart/axios-actions

It makes it almost effortless to set up and manage crud:

- all the config and logic goes in one place
- resources are represented by simple classes
- no layers of mapping or needles stores
- core classes can be extended as models

Check it out, it's a fraction of the effort and overhead.

As for your problem, I'd probably develop or find an existing data table which stores selection data as ids, with which you can then pass to another service and call the server with.

Vuex is useful, but not for crud IMHO.",1535992213.0
pull_my_finger_AGAIN,Why this being posted here?,1535467119.0
Baltimer,"I've just started to learn Vue, but did you try finding some courses at e-learning plataforms? Like udemy and similars.
Saved your links for future references :P",1535524945.0
crypt0lover,"The best ones are in vueschool IMO, i am currently finishing the Vue Mastery course there and i can say its very good. Teacher speaks a little bit fast but you can put it on slower speed. Only best practices by core developer. Maybe after that i will go with Adam’s techniques ",1535534852.0
shaftshot,"What a title. Agree with you, but wow that could be said in a much more succinct way.",1535475282.0
notop20,"Just thinking out loud: is ""key"" a prop on `car-card`?

It tells you that you have defined ""key"" (perhaps in another component as `data()`) somewhere else in your app.",1535434689.0
dickeandballs,"I'm trying to v-for a bunch of cars from a JSON file and it works, the key is actually parsed and shown in the Vue dev tools, but it gives me this error My code is:

```
<div class=""row"">
     <car-card v-for=""car in cars""
       :key=""car.id""
       :name=""car.name""
       :type=""car.type""
       :brand=""car.brand""
       :year=""car.year""
       :price=""car.price""
       :image=""car.image""
       :desc=""car.description""
     />
</div>
```

On another note, please feel free to suggest more efficient methods of accomplishing this. I have listed `:key` properly to my knowledge, exactly as in the documentation, and `id` is a valid property within my JSON file. I'm not sure why it tells me to declare `key` even though it's reserved.",1535434190.0
dickeandballs,"I figured out the issue—I tried to use `key` in the template for `car-card`, got confused and overlooked it. Still new to this but thanks for helping nonetheless.",1535437348.0
RoganTheGypo,I don't understand what this for? Is it just a built project using the cli anyway?,1535444461.0
nothingduploading,what is this fucking angular now?,1535426371.0
gevera,"That's an interesting project. I wonder how the guys from Vuepress will approach the question regarding tags, categories and posts. I do find your page to be straightforward. Thanks for detailed information",1535401131.0
s_busso,Nice theme with very interesting and original design ideas. Looking forward to see how it will evolve.,1541262478.0
RumilSH,"Just today I asked myself the same thing. There's a project I want to prototype, and I would like to use one. Hope someone answer 😅",1535402771.0
jaesung2061,"Go Vuetify. If they charged a $100 license fee I would pay it in a heartbeat to continue using it. It's crazy easy to use, premium quality, stellar documentation, jam-packed full of convenience features, and so much more. Go Vuetify and never look back.",1535404005.0
_sirberus_,"I feel bad for not offering a real answer but I also want to vouch for Vuetify. I've had minor issues with it in *very* particular cases, but overall it's very nice and very full-featured.",1535443783.0
zmpeg,Been using vuetify for a project at work. No significant issues. Tried prototyping a simple app with vue material and ran into zindex problems in more than one place. For example date picker in a dialog. Vuetify seems more complete.,1535468620.0
Alitron1,"Vuetify is love, Vuetify is life.",1535448109.0
RoganTheGypo,Vuetify is the Vue material goto. Its a framework you could put on your CV like bootstrap imo.,1535444639.0
Super_Start,"Not bad.  I like Vue and I like aspnetcore.  I'll probably not use okta, but it is always nice to see articles/tutorials about this combo.",1535427298.0
MrMaverick82,"As much as I love Font Awesome, this guide shows exactly what I hate about the new version. It's so cumbersome to use. All the imports and configuration that is necessary to simple start using an icon (while preventing large js bundles) really is such a let down.

&#x200B;

Now, to be honest, I can't think of a good solution to tackle this problem, but I wish things were as simple as in the previous versions (while preventing the large bundles).",1535461996.0
yopla,It sounds like you might be looking for a Learning Management System; if that's correct you might want to look at https://moodle.com.,1535396713.0
creatio_o,"You need to set default values, i.e. your `charData` return object must look like the JSON returned but with default values. I usually just put enough fields inside the object such that an error does not occur.",1535382475.0
toqy,"You essentially have 2 options 

1.	Load data before the view loads with beforeRouteEnter hook (or asyncData in nuxt)
2.	Load your data when your component is created, but account for the fact that it’s not ready yet


You should do as the other user said and store the general shape of your data in your store. This will prevent the errors, but I also like doing it because it’s like documentation of the api response. 

But you should also have a “loading” state in your component to prevent confusion for the user. For example, if you working in a shopping cart and the user abandoned cart and came back later, you’d want to show a loading state for the cart contents rather than just load your empty default state from vuex because it would make the cart appear empty until the data loaded. 

Right now I’m working on a project using nuxt and we load all of our own data through asyncData. usually anything that relies on 3rd party apis we do in the created hook because we have no control of their response times and they are slow, so rather than have a loading state for the whole view/page we minimize it to the component that is dependent on the data. ",1535422169.0
hellix08,Wow this is amazing! Looks really nice. Definitely going to use it if I need a text editor. What does renderless mean in this context though?,1535395820.0
Kritical02,"I was literally just looking at another project thought to myself I should go look for an RTF editor to implement on my admin portal... then stumble across this! 

Definitely gonna toy around with it looks solid!",1535399272.0
jpolito,I've been waiting for this!,1535394629.0
druski,"In Firefox 61.0.2, when typing in the Basic demo, spaces between words are deleted as I type.  Soeverythingendsupasonelongstring.",1535400559.0
cooldoganytime,"This looks awesome, thank you for sharing!",1535418175.0
N3KIO,"this is cool and all, but does it have image support, some kind of api for upload.",1535432499.0
plainblackguy,Is it markdown behind the scenes or HTML?,1535434096.0
kraffslol,Looks great! Any chance for adding the option to export the data as markdown?,1535447302.0
paul2491,wow looks really nice. playing around with it currently. is it somehow possible to pass own properties into extensions? and render them in the vue-template of that extension?,1535470161.0
archivedsofa,"This is awesome. I will use this is in a project.

I was going to use Slate (made with React) using Vuera. It works quite well, but a pure Vue solution is just so much better.

ProseMirror is excellent, but it's quite difficult to use. I fiddled with it for a week and I kept banging my head against a wall.",1535982681.0
PhouvanhKCSV,Does it support Tree-Shaking?,1536248473.0
toqy,"Seems to have skipped how to get nuxt to generate dynamic routes 

https://nuxtjs.org/api/configuration-generate/",1535425000.0
SharpSeeer,Interesting UI concept.  I was hoping it also included code for actually connecting to different smart home devices... :) But that would be a WHOLE other project in itself now wouldn't it.,1535385742.0
ISNT_A_NOVELTY,"Article claims to give instructions for Vue CLI 3, but gives an install command for vue-cli 2.",1535328225.0
porksmash,"[Vuex state is reactive](https://vuex.vuejs.org/guide/mutations.html#mutations-follow-vue-s-reactivity-rules) and you don't need to do anything special when using state in a component. For updating state, just fire off actions or mutations from wherever you need to. ",1535335570.0
gelom04,"if you want to explicitly done by yourself you can use [store.watch](https://store.watch)((state) => {

// some logic to watch particular state

})",1538014614.0
systematical,"Call me crazy, but isn't that a lot of work for a simple login form. Does everything NEED to be handled in JavaScript? While we use VueJS where it makes sense, here is what our login form looks like:

    <?php
        echo $this->Form->create(null, [
        	'url' => '/admin/login',
            'nonce' => $__nonce,
        ]);
        echo $this->Form->input('email_address', ['class'=>'', 'placeholder'=>'Enter email or username', 'label' => false]);
        echo $this->Form->input('password', ['class'=>'', 'placeholder'=>'Password', 'label' => false]); 
        echo $this->Form->button('Login') 
    ?>
    <p class=""forgot"">
        <a href=""/admin/forgot"" class="""">Forgot password</a>
    </p>
    <?php 
        echo $this->Form->end(['nonce'=> $__nonce]);    

Also, who needs a spinner? Authentication should take less than a second.",1535331312.0
,[deleted],1535307707.0
eihen,This looks pretty slick. I'm curious as to why this and not build off of vuefire? Is there a big difference between these two?,1535363159.0
FreeVariable,Sorry didn't have to read yet but how does this library compare with [vuexfire](https://github.com/posva/vuexfire)?,1535371102.0
dejong12,"Does this library have the ability to react to changes in a subcollection? For example, would it react when I add a city?: https://imgur.com/a/3kCHMbo",1542140397.0
DOG-ZILLA,[https://alligator.io/vuejs/lazy-image/#a-note-on-performance](https://alligator.io/vuejs/lazy-image/#a-note-on-performance),1535306453.0
aesamattki,How else would you do it? The intersection observer observes if an object like an image intersects with the viewport. These have to be different for each image.,1535307740.0
chrissilich,This title is why the developer community is unapproachable. ,1535305710.0
paul_h,"Hmm, maybe it is not a filter that I want, but a *Vue SFC*:

    <inputizeTree model=""path.to.thing""/>

",1535289610.0
batistr,thank you great tutorial,1535274971.0
sifex,"It sounds bad, but this looks like a laravel dev went nuts with how similar this is to laravel.",1535236325.0
Bergerton,"> Things change over time, with javascript’s ecosystem changing daily so should the way you write things.

I found the junior developer!!!

",1535233162.0
paul_h,"
> // Dependency Injection example
> let $http = this.app.make(""$http"");

Careful now, that's a slippery slope to the opposite of DI: ServiceLocator. Specifically, DI was and IoC before it was in part an antidote to ServiceLocator and (GoangOfFour) Singletons.",1535244567.0
ofan,"White background with small font and low contrast colors, this is killing my eyes.",1535240350.0
grozz,[https://imgur.com/a/Droo2yH](https://imgur.com/a/Droo2yH),1535249275.0
wishinghand,"On the landing page this links to, one of the Notable Features is a 'fluent router'. Does that actually mean something or was the author wanting an adjective to put in front of just having a router?",1535306823.0
JinSantosAndria,"Uhm, any tests or just alot of confidence?",1535241524.0
JohnMellor89,Does anyone actually use the concept of models within vuejs,1535286611.0
aesamattki,"Not a fan of things like this or Laravel at all. I feel like developers who like these things just want code to work and don't care about actual code. This separates you from the real things happening under the hood, so you stop thinking in JS and start thinking in whatever, or stop thinking in PHP and start thinking in Laravel.",1535246621.0
thiswasprobablyatust,"The React code you posted is bad practice, it's not the right way to bind functions.

The Vue code is fine, `handleClick` is already bound to `this`, and sending a param is fine if you need to there. Though in most cases `param` might already exist in the component, so there might be better ways of doing what you're trying to do.",1535213628.0
brainbag,"No, that is perfectly valid and quite common. I'd say it's more common to call functions with a value like you demonstrated than it is to just pass in a function handler.

**With arguments**

    <div @click=""handleClick(param)"" />

This will call the `handleClick` function with the `param` any time the div is clicked. Whatever the event sends will be ignored.

    handleClick (param) {}

---

**With no arguments**

    <div @click=""handleClick"" />

This will call the `handleClick` function, passing in the event as the first parameter. 

    handleClick (event) {}

---

**Re-emit**

    <div @click=""$emit('special-click', $event)"">

This will emit an event to the parent called ""special-click"" and send the value of the click event to the event.

Then the parent can do this:

    <child-component @special-click=""handleClick"" >

    handleClick (event) {
      console.log(event)
    }",1535214907.0
SharpSeeer,"I'm glad to see others say it's perfectly fine.  I do this all the time, especially inside loops.  

I wouldn't, however, use a function call with a parameter when using v-bind, as stated in the title.  ",1535642607.0
keepcalmrollon,"First, you should probably bind your select element to a data property (`this.car`, for example).

    <select v-model=""car"">

​ **Native:** `$route.query.car` will be equal to `""audi""` in your example. Then you can call `this.car = $route.query.car` where appropriate. ​

**Vue-router version:** You can set the router to [pass query parameters as props](https://router.vuejs.org/guide/essentials/passing-props.html).",1535179608.0
Wuma,"I have something similar on a website I'm in the middle of writing, I'm using History mode with vue-router, and depending on how I want the input to behave, I either use this.$router.push, or this.$router.replace.

this.$router.push will trigger a router navigation event, this.$router.replace will change the URL but won't trigger anything. In my app, on the search page I want the URL to update, but I'm not triggering a route change each time because I'm also updating the results as soon as the change happens. This way, if a customer bookmarks the page and comes back, all the changes they made are persisted via the URL, but whilst they're using the app, the results update seamlessly. If you just wanted to navigate every time they changed it however, just use this.$router.push(). Also what you're looking for is the query key, not the params key. params are things like /model/:id where :id is the model. query is /?model=whatever. An example in my app, when the customer clicks next page, the following is triggered:

    let curQuery = {...this.$route.query};
    curQuery.page = curPage;
    this.$router.replace({name: 'used-results', query: curQuery});

The spread operator on this.$route.query prevents reactivity issues, I then change the page parameter and replace the current URL with the changed query parameters.",1535191802.0
brainbag,"Here's a full working example. Keep in mind that child components (ones that aren't in your ""views"" folder) shouldn't reference the query string - they should get a property. If this is going to be a reusable component, then you should have a ""default"" property where you pass in whatever the default is.

    <template>
      <select v-model=""car"">
        <option value=""volvo"">Volvo</option>
        <option value=""saab"">Saab</option>
        <option value=""mercedes"">Mercedes</option>
        <option value=""audi"">Audi</option>
      </select>
    </template>

    <script>
    export default {
      data () {
        return {
          car: this.$route.query.car
        }
      }
    }
    </script>
",1535285491.0
thiswasprobablyatust,"Generally, you should use global state when more than one component needs the data, or the data will be accessed more than once — as in, a component could be un/re-mounted and would have to re-download the data.

There's nothing ""wrong"" with keeping your fetched data in Vuex if that fits your mental-model of your app and you're not throwing _tons_ of data in there, so don't worry about this too much. :)",1535175167.0
AwesomeInPerson,Is this GDPR compliant?,1535192672.0
bunjomin,"Thanks for sharing! I love checking out other peoples' components to find inspiration for different approaches. Also, this stuff makes it super easy to just kinda doodle around with different views and see what a layout will actually feel like to use.",1535121212.0
sensibleprocurer,Are there any libraries for all of d3.js? Or is it not necessary to develop vue components for d3?,1535136671.0
yhc44,Try to use Letsencrypt or Cloudflare for free SSL,1535141784.0
Downvotes-All-Memes,"Awesome resource, but it feels weird that the breadcrumbs (""Utilities"" > ""Storage"") don't work how I expected them to (they don't do anything), and same thing for when I scroll down to click things, the next page is also scrolled all the way down. It's probably nit picky, but it just feels weird to me.",1535148661.0
brainbag,"Hurray! I was looking for something like this recently.

1. ~~I noticed that the subviews aren't sorting the libraries by rank~~. Search results are sorting by some algorithm that isn't ""ranking"". It would be *really* helpful to be able to sort results by the calculated rank and not the search algorithm match.

2. the cards highlight but aren't clickable. I think the user experience would be better if we could click on the card and not just the small name of the library.

Looking really good! Thank you for putting this together.",1535154420.0
seldomactive,"Great idea for a site but usability (at least on mobile) is not good.

1. When you navigate into a category and then go back your scroll position is lost.
1. The cards for each library should be clickable instead of just the name of the library
1. The links to each category on the home page are pretty small.

Also, I think it would be really useful to have the ability to just list all of the libraries by rating. 

Great work tho on the library details. They're fantastic.",1535157543.0
tootubular,"Nice thanks for this. Curious, is this inspired by https://www.ruby-toolbox.com ? I wonder if there's lots of other toolboxes out there that I haven't known about.",1535163261.0
thasmog,"Thanks this is awesome site!

I didn't find a package ""I read your mind and build all automatically"" though.",1535174194.0
red-powerranger,The website shows an error right now. Great idea though :) will check it out once it's working again,1535192967.0
yhc44,"I did not say this is not a great resource, there is simply no reason not using ssl",1535213966.0
eindbaas,"Maybe i am overlooking useful usecases, but this doesn't sound like an approach i would ever choose - it sounds way too hacky for me. Why not re-instantiate an instance with the data it needs.",1535198498.0
MrButttons,"Haven't used it with vue, but I've tried it. It's fantastic. You can use it as an Express middleware too. It just takes a database connection and returns your whole graphQL schema with basic CRUD functions for your database schema. 

To create more mutations/queries you can make PgSQL functions and they will be available with your graphQL endpoint.",1535104764.0
savunit,You should make a pull request!,1535072816.0
DOG-ZILLA,Probably a bit outdated or written before it was placed into recommendation. ,1535064037.0
nmarshall23,"Great to have Wired report the same justification for using Vue that I gave my boss.

>The big reason for Vue's success, developers who rely on it say, is its simplicity. More companies want to build web applications that, like Google Docs, feel as snappy as a native application. But few actually build applications as complex as Facebook’s or Google’s. What developers often really want is a framework for building small, interactive web apps. Angular can be overkill for simple applications, while React has a steep learning curve even for experienced developers.

&#x200B;",1535070363.0
shobeurself,Jianjiang!,1535064542.0
paul_h,"I always knew AnguarJS would win, I just didn’t know it’d be called Vue.js when it did!",1535102892.0
crypt0lover,I think when you want to fetch the initial data for your store. For example promise.all and in it few dispatch(‘getStuff’) actions that will feed  your vuex,1535048835.0
ibra5him,"I am not an expert but I will guide you a bit. If the component that you will be building going to have a lot of v-if's then I would suggest making them into separate components. However, you can make them in one component, but that going to make the component too complex to be understood but will your changes to be in one file. I would suggest you to think about how similar and how different these usages are, and then think how to refactor your component(s) before implementing. 

Good luck.",1535030950.0
thiswasprobablyatust,"This doesn't seem to exist yet, you can pretty easily just clone the Vue repo and build a fresh copy though.",1535026792.0
YourCupOTea,Evan has stated in follow-up interviews that the CLI ended up taking them much longer than expected.  They are starting work on core again now.,1535044349.0
archivedsofa,"> Proxy based reactivity system

Finally. No more reactivity funny business.",1535046222.0
KingNg,"Yay i won. Also, I think in minesweeper you can never lose off the first click. ",1535030346.0
eindbaas,"Some things i noticed:

​

1. you should avoid calling methods on a child-component like this:

​

    startNewGame() {
       this.$refs.minefield.createField()
    }

i know, it works, it's easy to do but you should find other solutions to do this. these components should not talk to each other like this, parents should only pass data down (to their children) and children should emit events to their parents

2. move as much stuff out of components as possible. when i look at the minefield component, nearly all logic for the game is in there. i would move a lot of stuff out of that file and use components as much for just displaying data and catching user interaction as possible. you can move a lot of stuff just to a file that exports single functions, you can create a game class that you instantiate and which can play the game without any UI or any component. (it's always a good idea to separate logic from ui)",1535039305.0
Hypnotik_Paradiz,"First click -> bomb

Yay",1535037457.0
Singularity42,Well done. Not that it matters but you missed the feature where if you press the left and right mouse buttons together it reveals all the squares around that one.,1535027362.0
SharpSeeer,"What a great way to learn!  Sure, it's not a perfect clone of Minesweeper, but it works exceptionally well.  Well done.  ",1535036289.0
das_thicc,"Should probably be using const/let instead of var, but very well done!",1535045244.0
calvers70,"Nice one! 

Also [yay](https://i.imgur.com/CPVoJAO.png)",1535025930.0
sebnukem,Thank you for posting this. It's by reading projects like yours that I learn best. ,1535030984.0
so_lost_im_faded,"Very nice, works well, looks clean, great work.",1535032217.0
jcromualdo24,Really nice,1535038359.0
Nerzhus,Great work dude!,1535045015.0
cwncool,"Nice dude!  That's a fun project.  I made a vue minesweeper when I was learning too, if you wanna compare code !

[https://github.com/chrisnorwood/vue-minesweeper](https://github.com/chrisnorwood/vue-minesweeper)

[https://vue-minesweeper.herokuapp.com/](https://vue-minesweeper.herokuapp.com/)",1535051088.0
TRP_me,"Pressing Enter when in the Size input doesn't submit the form. Maybe you should wrap the Input and Button in a Form. Other than that, good job!",1535058812.0
Arkaad,"I'm still learning the ropes.  
Is it usual to import all the Vue components in main.js?  


I thought the norm was to import a component where you need it.  
",1535068813.0
ataraxy,Cool. One very minor detail is not allowing people to go below 1 grid size in the number input. Also maybe limit it to something reasonable. Perhaps the maximum grid cell size should end up being the size of the bomb sprite so they don't overlap when you do something silly like set it to 200.,1535087265.0
DOG-ZILLA,"No offence, but if you’re a UX guy, you should see really quickly how bad the UX is for this. 

It looks pretty, but sliding categories is painfully slow. It’s also a pattern that doesn’t work well for TODO lists. Actual LISTS work better for this kind of thing. 

In your case, your categories should simply be top-level headings. You could maybe even make them position sticky like an iOS phone book. 

The obsession with turning things into cards all the time is an odd one to me. Especially big empty ones. ",1535008304.0
yopla,The horizontal scrolling of the task categories is super slow and to be honest it looks like a case of form over function.,1535004550.0
Parasin,Looks like the site isn’t working at the moment,1535152071.0
4022a,Looks like hype driven design. Straight trash interface with glowy shadows and cards. Totally no imagination. ,1535021204.0
LloydAtkinson,`this.name = 'foo';`,1534980695.0
earthboundkid,"At the end of the day, Vue is just JavaScript. It’s clear based on your comments that you don’t understand JS. That’s how everyone starts, so don’t feel bad! But you have to learn it now or else you’ll just be endlessly frustrated by it. Just to give a single example, “this” is a special name in JavaScript and only works inside of a class invocation. It’s a complicated concept and you won’t figure it out by guessing. You’re going to have to at minimum read a JS language tutorial, and reading a book probably won’t hurt either. ",1535329213.0
Ohnegott,"this.$options.name

anything outside of data: is accessible with this.$options",1534998349.0
Elxeno,"Read title and thought: ""How would u build a cryptocurrency with vue?""",1534983353.0
botojomomo,"If you're putting styles in your components, which is a good idea, make sure that you give your components the top level class and then put any component related CSS under that top level class. Otherwise your CSS will collide.",1534986521.0
ibra5him,"Refer to the docs

[https://nuxtjs.org/api/pages-transition/](https://nuxtjs.org/api/pages-transition/)",1534958896.0
Radinax,"I use Vue mostly because of Vuex, compared to Redux its a heaven send.",1534957777.0
rackmountrambo,">Why Vue.js got so popular?

Honestly, I switched to Vue becasue I don't want to beholden to a Facebook owned technology.",1534951644.0
RedFing,"Been using it for 4 months, and still loving it more and more everyday! ",1534949497.0
rawghi,"I’m head coaching a team of 15~20 devs, sometimes I like to get my hands dirty so I handpick some items (when not on day long confcalls and meeting) and code (was a UI coder).
I really love both React and Vue, but Vue.. don’t know I find it so much straightforward that when I develop for fun (it happens) I go with it every time!

Edit: mispelling

Edit edit: misspelled misspelling",1534961069.0
recrof,"> While VueJS may be dominanting in tearms of how fast the project is growing, it’s still far behind React when it comes to the NPM downloads. Although the monthly downloads have doubled compared to the beginning of 2018, Vue is not in a position to take React down anytime soon.

Main difference between react and vue is that you don't need to download anything at all from npm when you want to use vue. You either use unpkg or just download vue.js from their homepage. I don't feel that npm as usage metric is fair.",1534948901.0
toadkicker,React brigading is strong in this thread.,1534974085.0
crypt0lover,"I recently started using vuex-pathify, a package that reduces vuex boilerplate to minimum(autogenerating actions, mutations, getters and so). Its the missing piece",1535040925.0
crypt0lover,I would say Laravel as a backend. It has all the basic functionalities you’d need and you can use Laravel password for authentication between the two and for authorization there is as well packages like spatie laravel permissions and so. Just google them and it should be relatively easy to setup,1534938630.0
IamTheFreshmaker,Python - Flask. Done several projects with it. The API is very small and very performant.,1535120447.0
Gloumy,"I'd say it depends what you're comfortable with for the backend. 

For a work project, I've used a VueJS frontend that called a Rails API, it worked fine. Using the devise gem for authentication with devise\_token\_auth plugin,  it connected almost naturally with vue-auth.",1534928301.0
fessacchiotto,If you are proficient in python for your backend programming go with Django and DRF (Django Rest Framework). ,1534953484.0
so_lost_im_faded,"Hi. I use either Laravel for PHP, this is the tutorial that I'm building my endpoints with [https://www.toptal.com/laravel/restful-laravel-api-tutorial](https://www.toptal.com/laravel/restful-laravel-api-tutorial)

or AdonisJS for Node backend. It's simple, it's got a neat documentation also.

&#x200B;

I had no problem building a basic CRUD backend with both.

&#x200B;

Also, use Axios in Vue. You might do some Vuex reading - you use Axios in the actions to call the URL and send/retrieve the data. If you want a simple app, you might import and use Axios in the component that you're using, but generally the app is more clean if you use Vuex/store properly.",1534939236.0
SharpSeeer,"In my opinion, frontend and backend are typically completely separate apps, neither of which can exist without the other.  You have a large range of choices for the backend:

* Node - javascript
* Laravel - PHP
* Django - Python
* .Net/.Net Core - C#

All of the above provide a solid framework for building an API and communicating with MySQL.  My favorite is .Net Core with C#, followed by Node using Express.js.  But my background is with .Net and C# already - I recommend picking one you are already familiar with.  Unless you want to learn another language anyway.  Also, don't pick Laravel, because it uses PHP, and, well, come on, PHP.  :P (Please don't kill me)

.Net Core is cross platform, provides a solid structure for building an API, and includes Entity Framework Core, which is an ORM for reading and writing to a database, of which MySQL is supported.

Again, all the frameworks listed above also provide all those features.  So pick the one you have the most familiarity with.

You mentioned running on your current host, and running a VPS.  Today you can just run your app in the cloud.  Deploy your app to the cloud, deploy your database to the cloud, and not have to manage any servers at all.  All the big cloud providers support pretty much all the frameworks listed above too.

&#x200B;

Good luck!

&#x200B;",1534954790.0
MrMaverick82,+1 for Laravel,1534962435.0
RoganTheGypo,"I'd probably recommend a node backend. This is server side JavaScript. And I'd strongly recommend using express in your case. It super easy to pick up.

You create a webserver that responds to a port e.g. http://serveradress.com:3000. In your app youll then configure routes which when navigated do execute the function inside of them, in this case execute some SQL and respond with the data. I'd recommend using knex with express too as it makes everything lots more streamline.

I'm on my mobile so this is super vauge. But look in to Node/express & knex",1534926374.0
heavyGl0w,"A bit late but this other guy doesn't seem to be answering your questions. 

Not everything *has* to be a component in Vue, but everything will be in a component. Your `index.html` has the same purpose it always does: its the starting point of your app. But your Vue app will mount to it, and you do not have to interact with it that much (depending on if you used the vue-cli). Think of your `App.vue` as your new `index.html`. It's the root of your Vue app, and all your components will render through it.

Assuming your app always has a navbar at the top and a footer at the bottom (or any other page structure as you said), it would be a good idea to put them in your `App.vue` template with your `<router-view />` sandwiched between them.

As your components get bigger, try to find parts that could exist on their own or will be used multiple times and extract those into their own components. The navbar and footer are a couple good examples of things that should be their own component.",1534946932.0
nikoz84,Index html it's the file on the final build are load,1534907672.0
nikoz84,"In your app.vue 

Tamplate
       Div id=app
                * Nav
                * Routerview
                * Footer

Script
Import nav from '@/components/nav.vue'
Import footer from '@/components/footer.vue'

Export default {
  Name: 'app'
  Components:{
    nav, footer
 }
}
\script",1534905356.0
SharpSeeer,"Oh very nice!  One of the biggest problems with learning new frameworks like vue.js is finding code to see how things are done in the real world, rather than in the tutorials.  Having this code for reference will be fantastic!",1534955013.0
,[deleted],1534922603.0
modic137,thanks man,1534894239.0
,Cheers,1534898886.0
hashimss,Thanks buddy,1534901004.0
SharpSeeer,"It's nice, but not as nice as [https://vuejs-tips.github.io/cheatsheet/](https://vuejs-tips.github.io/cheatsheet/)",1534953730.0
tucsonflyer,"If you haven’t seen Vue Nativescript, it’s promising! I’m excited to play with it ",1534876175.0
archivedsofa,"It seems your best shot is simply to use Cordova with your web components. I don't think it's a bad option. There are plenty of great apps made like that. For example the [Missive email client](https://medium.com/missive-app/our-dirty-little-secret-cross-platform-email-client-with-nothing-but-html-aa12fc33bb02).

If you decide on rewriting your app for mobile, I would go with Flutter.",1534878203.0
Dispersia,"Another option is Capacitor. It's new from the Ionic team, but unlike cordova, most things you use work everywhere. Making a Toast, or opening the gallery works not only on mobile, but in your browser too, so you can create your whole app like normal, then just deploy to android when wanted. I will say it's bleeding edge, but it's worked really well for me so far.

&#x200B;

[https://capacitor.ionicframework.com/](https://capacitor.ionicframework.com/)

&#x200B;

(and no, you don't have to use ionic to use it)",1534957588.0
xneo27,"It sounds like what you are looking for is slots. using slots would allow you to create a modal component that accepted the correct contents for the specific page you are looking for. 

Example:

`<template>`

`<div v-if=""open"" class=""modal"">`

`<div class=""modal__card"">`

`<div class=""modal__content"">`

`<div class=""modal__header"">`

`<slot name=""header""></slot>`

`</div>`

`<slot></slot>`

`<div class=""modal__footer"">`

`<slot name=""footer""></slot>`

`</div>`

`</div>`

`</div>`

`</div>`

`</template>`

`<script>`

`export default {`

  `name: 'Modal',`

  `props: {`

`open: Boolean`

  `},`

  `methods:{`

`closeModal: function(){`

`this.$emit('close');`

`},`

  `}`

`}`

`</script>`",1534873499.0
jesalg,I [replied](https://stackoverflow.com/a/51957657/20092) to your post on StackOverflow :),1534915391.0
heavyGl0w,"I'm currently dealing with the same issue while trying to deploy to firebase. It only happens when I change `buildDir` in my `nuxt.config.js`. Getting rid of the `buildDir` option fixed it temporarily. This [SO thread](https://stackoverflow.com/questions/48839593/nuxt-ssr-with-firebase-integration) may be of some help, even if you don't plan on using Firebase.

edit: added SO thread",1534870403.0
El_Matella,"Are you sure that you can use the `no-ssr` component as root for your component?

I would use the `no-ssr` component on the parent:

```
<no-ssr>
    <the-slider />
</no-ssr>
```

and in the slider as a regular component:

```
<template>
    
    <div class=""main"">
      
      <div id=""slider"" class=""slider"" >
        <v-touch @pan=""mouseMoving"" @panend=""stopDrag"" @swipe=""startDrag"">
          <div class=""slider-cards"" :style=""`transform: translate3d(${cardsX}px,0,0)`"">
            <div
            
            v-for=""num in 3""
            class=""slider-card""
            >
            <Card />
          </div>
        </div>
      </v-touch>
      
    </div>
    
  </div>

</template>
```",1534926716.0
vuehero,"Are you using the correct version?
In their read me, it says that this is not compatible with version 2 of Vue: https://github.com/vuejs/vue-touch

The version for v2 is described here:
https://github.com/vuejs/vue-touch/tree/next",1534849736.0
bmarkovic,"You can use Vuex store for this as another option. You can should expose PIXI to a module of your store (mutations and actions, in this case) so that the Vue can interact with PIXI with an abstraction layer, and expose the store to the PIXI portion of the application so that it can alter the state itself.

You can then use a Vue component(s) to watch for changes to the state and eventually call other mutations/actions or react in the DOM etc.

It's not going to be exactly lightweight (I don't understand what you really meant by heavy-handed) but it would allow enough ""abstraction buffering"" to be easier to manage than any mechanism with provide/inject I can think of.",1534838285.0
fleaspoon,"What you can do is to manage the state with vuex, it think it would be simpler and less hacky.",1534855125.0
multiplegeorges,"You could also just wrap the PIXI canvas in a component and have that component do `this.$emit('pixi_event_foo', dataObj)` and listen to that with the standard Vue props, like `<PixiCanvasComponent @pixi_event_foo=""handleFoo"" />`.

Might be easier than pulling in Vuex, but could give you trouble if your events and handlers get too numerous.",1534864149.0
yeenthings,"Not sure why the parent would need the HTML content of the child?

As for accessing state, you could use methods that are passed down into the child component from the parent that will call the parent method when run, similar to React. 

Alternatively, you could look at using [Vuex](https://vuex.vuejs.org/) to handle application stage which would be as easy as this.$store.state.property

Lastly, you might need to reload at how you have structured your components as in most cases you should data flow down the component tree, not up, if you need data across multiple components then that is where state management like Vuex comes in.",1534834253.0
brainbag,"Vuex is probably overkill - vuex should usually only be global shared state, not state interaction between components.

To get data from the child, you can use the `sync` modifier to have multiple ""automatic"" updates from the child.

https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier

It's like having `v-model` but for multiple values. I've found it most useful for things like modals where you want the modal to be able to set its own visible state, but also want the parent to be able to set a visible state as well.",1534857121.0
anthony_doan,"Vuex is overkill.

I've stumbled across an answer to when to use Vuex on this subreddit and it is a pretty good rule of thumb: If the data/state is share globally across the web application then use Vuex other wise use prop.

You should use prop in your case.

https://vuejs.org/v2/guide/components.html#Passing-Data-to-Child-Components-with-Props

> how to share data between them and how can parent component get the html content from child?

I don't know why you want this. The only thing I can think of immediately is perhaps you're trying to have some logic of the child component in the parent component. If that is the case just leave the child component logic in the child component file.

If you're talking about passing back data to the parent you have to do emit.

https://vuejs.org/v2/guide/components.html#Sending-Messages-to-Parents-with-Events
https://forum.vuejs.org/t/passing-data-back-to-parent/1201

",1534866431.0
Maxalos,Very good tutorial from laracast and free. All about vue and laravel with vue chect it out. [full tutorial](https://www.youtube.com/playlist?list=PL3VM-unCzF8iRyPotjFsgy7EfuCITvr_3) \- [what you want.](https://www.youtube.com/watch?v=6UONKCN9Iwc&index=23&list=PL3VM-unCzF8iRyPotjFsgy7EfuCITvr_3).,1534833263.0
scootstah,"Either run a script that triggers each build process separately, or do Laravel stuff inside the npm script or vise versa.",1534826898.0
PulangKalabaw,should i delete the node_modules after build-ing the vue app inside laravel?,1534827215.0
sdiown,"Just run npm run prod for production, for development you can run npm run watch",1535008097.0
xneo27,"Not exactly masonry, but I have had a lot of success with this vue grid layout: [https://github.com/jbaysolutions/vue-grid-layout](https://github.com/jbaysolutions/vue-grid-layout) . Provides draggable layout, I have used it for re-sizable dashboards where you could add your own panels and such. I think with a little effort you might be able to make this work.",1534823949.0
Thecoss,"You should be able to do 
```<draggable><masonry>...<masonry //><draggable ///>```
Draggable will most likely require some configuration to tell it what the draggable items are but it should work.",1534832783.0
anthony_doan,"https://en.wikipedia.org/wiki/Mixin

They're like traits in Scala.

The benefits is you don't have to create a class and deal with inheritance. 


The most obvious reason to use a mixin is when you have a function that is used often enough across different classes but those classes aren't related to each other. Say the a print function and you have several classes or whatever that uses the same functionality/logic (print). Instead of doing abstract class and forcing classes to inhierate the abstract class you can just do mixin and you don't deal with accidental abuse of polymorphism. 


",1534867014.0
lucuma,"Implementing them is quite easy but I think there is some overlap with just importing from a library.  That being said, if you use your SDK on the templates (say, formatting text or something) you're probably better off exposing it via a mixin so it can be called in all the components.

For our sdk's, in that when we call the the api, we just import that in and make the calls.  I wouldn't necessary use a mixin for that.  I guess it just depends.. ",1534800744.0
ctorx,"One major benefit of a mixin is when it is applied via a plug-in.  This essentially ads behavior to all your components automatically without any extra work.

",1534825431.0
scootstah,"Mixins are kind of like components for components. They're more capable than just a simple utility method, although they can be used that way as well. Mixins share the same overall structure as components, and their properties will be merged with the components that use them.

I think the documentation does a good job of explaining what they're for. Where exactly are you struggling?",1534827785.0
SharpSeeer,"Mixins are like utility methods that you import and use, except you write them just like you are writing a standard vue component.  You can include data, props, computed, methods, anything you can do in a normal component.  Just without the `<template/>` and `<script/>` sections.  

A mixin can provide additional functionality for all components in the app by including it at the global level in main.js:

```js
import MyTotallyAwesomePowerfulMixin from 'mixins'
Vue.mixin(MyTotallyAwesomePowerfulMixin)
```

Or you can use it only in components that need the functionality:

```js
import MySpecificUtilityMixin from 'mixins'
export default {
  mixins: [ MySpecificUtilityMixin ],
  data() {
  }
  // props blah blah blah
}
```

The benefit of a mixin over just a utility function is that you can interact with the current component through `this`.",1534862596.0
VIM_GT_EMACS,this topic has been reposted often...,1534801330.0
ezaquarii_com,"Documentation is Work In Progress - says the page.

And there is only 1 developer on it and to make it worse, it's a core Vue.js developer focused on more important stuff (judging from his commit activity).

I wouldn't bet on this horse. I'd use semantic-ui or bootstrap instead.
",1534795678.0
theRetrograde,"This is a good find, I love seeing code written by members of the core team.  I've been building out my own components and I've picked up a few nice improvements after my first look through it. ",1534856960.0
compubomb,"it's there, you just have to go straight to the source, https://github.com/vuejs/ui/tree/master/docs-src",1534822061.0
N3KIO,"try http://bulma.io

its similar.

but i would go with bootstrap, you know, something that gets updated and maintained XD",1534802220.0
archivedsofa,"You can do that, but it's a common pattern that Vuex mutations should only be used to modify state.

I guess most people would do that in Vuex actions. I've stopped using actions altogether so I would have some module that changes the body classes and triggers the mutation.

As for changing the body classes there is really no other way than to do it in vanilla since Vue cannot be mounted on the body tag.

See this: https://forum.vuejs.org/t/how-do-i-add-remove-classes-to-body/1219",1534788048.0
brainbag,"Yes it's bad practice to modify via the Vuex. However, what you're suggesting is how vue-bootstrap does it for modals, they just don't do it from the store. 

If you have a modal component, I'd suggest changing the body from inside the modal component code instead, perhaps with a watcher?

    // components/BaseModal.vue
    watch: { 
      modalOpen (state) { 
        if (state) { 
          addBodyClass('modal-open') 
        } else { 
          removeBodyClass('modal-open')
        }
      }
    }

PS if you're using modals regularly, it's far easier to plan ahead to have stacked modals than to add it on later. I've never built an app that was modal-y that didn't eventually want to have more than one open at once. You might consider that early on when it's easy to make it stackable",1534851508.0
MatekCopatek,"Just like React, Vue is a much smaller framework than Angular. This means it also prescribes much less, which can be helpful if you want to do things your way, but also lets you mess more things up if you're not careful.

Large apps often use the official router and vuex (global state management). If you follow the tutorials for those, they'll touch on best practices that will help you structure your app. But on the other hand there's no direct alternative to something like an angular service. That's because it's often nothing more than some specific functionality extracted into a singleton. With Vue, you just... implement that yourself as a generic JS module and import it into your component.

As I said at the start, it's both good and bad. See for yourself how you handle that freedom, talk to your team, establish your own practices and if you get stuck, take a look at demo apps such as [vue hackernews](https://github.com/vuejs/vue-hackernews-2.0) and try to follow the patterns you find there.

TypeScript support is OK, you can use the class syntax which will work slightly better (TS-wise) but will also force you to translate everything from the default every-component-just-exports-an-object style used in tutorials. You can stick to the object syntax, which can be kinda spotty at times. Take a look at [official docs](https://vuejs.org/v2/guide/typescript.html) for details.",1534777356.0
inhalingsounds,"I'm not familiar with Angular, but I'd recommend you check out how vuex works and what it does. It seems it will dissipate some of your organization questions.",1534777200.0
mattaugamer,">  Is there anything like modules in this framework?

No, not even a bit. Modules are a unique abstraction to Angular. Even comparable frameworks like Ember or Aurelia don't have any such notion.

> What are parts of vue.js that are comparable to services / factories? I know about mixins, but it does not seem to work like 1 on 1.

The short answer is nothing. Vue isn't intended to handle that sort of thing. If you need services you can often just create a native ES6 (or typescript, whatever) class and import it directly. DI in JavaScript is more of a service location concept, so as long as you can tell it where to find the service you can do much the same. It's up to you to figure out how to get dependencies into your components. For the most part you can import them yourself.

Typescript isn't the default, and you'll encounter some points of friction. It's usually best to stick with the idiomatic way to build any framework. I'd recommend just using standard ES6 with Vue or any non-Angular framework. Get some experience first, and if you want to change to TS you can do so from a more informed point of view.",1535003715.0
archivedsofa,"I used `vue-touch` in a project and it was as easy as:

	<v-touch @pan=""onPan"" @panend=""onPanend"" @pinch=""onPinch"" @pinchend=""onPinchend"">
		...
	</v-touch>",1534773952.0
heavyGl0w,"[Here's a solution](https://codepen.io/heavygl0w/pen/vzYrZq) I made on codepen. 

It uses a [computed setter](https://vuejs.org/v2/guide/computed.html#Computed-Setter) to create an interval that will push new items into the array of items in your data object every 500ms. That way you can add an array of new items to your list with `this.newItems = [some_array]`.

It also uses a [transition group](https://vuejs.org/v2/guide/transitions.html#List-Transitions) to handle animating changes to the list.",1534822461.0
afkie,"You can map over these items in your computed properties and return each item with a setTimeout.

Sorry, I'm not able to provide you with code right now as I'm on mobile.",1534785494.0
sombreroseal,"here's another option

```
export default {
 name: ""app"",
 data: () => ({
  msg: ""Hello World""
})
```",1534767963.0
rnenjoy,"Excuse me if im wrong here. But i think i do this, and its my favourite.

    export default { 
      name: ""app"", 
      data() { 
        return { 
          msg: ""Hello World"" 
        } 
      }, 
      mounted() { 
        // bla bla bla 
      }, 
      methods() { 
        open(id) { 
          // Do something 
        }, 
        close(id) { 
          // Do something 
        } 
      } 
    }",1534791348.0
KillerShad,"Does the second option even compile for you? Because 'data' expects a function, and the second option is not a proper function definition",1534763734.0
compscimemes,In the second one you need to remove the colon between data and (),1534802845.0
theL3g3ndOfZack,"The second is not a proper JS syntax.
Just remove the ` : `
It’s actually the shorthand for object’s `key` and `anonymous function`.

    export default {
        data() {
        },
        data: function () {
        }
     };

The example above is just the same.",1534828487.0
chrissilich,"Either is fine. I’m still getting used to all the new(ish) shorthand, so I tend to go for he longer, clearer version, but it’s trendy to be more terse. ",1534767157.0
gammarray,"We adopted Typescript early on and the changes over the last year have been a bit of a PITA to keep up with. That said, I think it’s much easier now than before and it is definitely worthwhile. Adding it one component at a time is a nice way to ramp up. 

We found we were writing a lot of type checking into our code anyhow and adding Typescript allowed us to do so in a much more programmatic manner. It certainly does involve a bit of a learning curve, but so does everything else. 

It’s quite nice to have a language server in your editor give instant feedback on where your code needs to be more strongly typed, but it can also slow development when you’re unfamiliar with error messages and have to research how to appease the compiler.  

Adding Typescript to an existing project may be a bit frustrating if it’s your first time writing Typescript because your code that worked before won’t compile until you’ve converted the entire file. You may want to try writing some test components fresh in Typescript first to get the hang of it before trying to convert components on your existing code base. ",1534807250.0
enkafan,"A nice thing about learning Vue and typescript at the same time is that you really really learn both because their integration isn't 100% smooth. You'll be adding d.ts files left and right for most 3rd party things you bring in. Things like vuex aren't fully baked. And you'll spend a lot of time converting code samples into typescript because few people use it.

It was a headache to learn. But with the CLI 3 and my now expertise gained in the trials and tribulations of learning I wouldn't do Vue without it",1534869808.0
chrissilich,"Learn one thing at a time.  
  
Edit: I should rephrase that to: learn a simple stack and then expand. I’d even say drop vueX for the time being. Add it and TS when you’re confident in Vue, Axios, APIs. ",1534767795.0
RoganTheGypo,"Thanks for sharing but this is like the 9th time its been posted in the past 2 days, its up to part 5 by the way...

[https://itnext.io/@kenzotakahashi2](https://itnext.io/@kenzotakahashi2)",1534763295.0
Mekhami,what a clickbaity headline. ,1534732529.0
cyberst0rm,It looks quite useful for project management. Needs more git integration though.,1534728877.0
mattaugamer,"Strange article. Surely the answer is ""a useful tool still missing some features but a nice step in the right direction"".

> I am personally eager to see if it will change people’s habits, and if we will progressively see similar tools or vue-cli adapters for other technologies, such as React or Angular.

What an odd thing to say. React already has Create React App that isn't enormously different. Angular has AngularCLI that has some features VueCLI doesn't (such as code generation), and Ember has EmberCLI which has all that plus even more extensive features including addon support, testing, serving, etc.

The only thing VueCLI has that's unique is VueUI, which is... nice, I guess. I'm not convinced that putting a GUI in a CLI is really the right approach, but whatever.",1535004087.0
toqy,"v-if 

But seriously it’s hard to say without more details. You could use something fancy like Vue-kindergarten, or you could just do it simply with some conditional logic. ",1534730400.0
CristiJ,"I usually use vuex for this stuff.
Assume you set a role property inside vuex after logging in. Let's say like this

   state: { role: 'user'}

You can then create a getter 

    getters: {
       isAdmin: state => state.user.role === 'admin',
       isUser: state => state.user.role === 'user'
    }

After that you can simply import these as computed and use them along with `v-if`. Assuming you have a component for sidebar items, you can have something like this

    import {mapGetters} from 'vuex'
    computed: {
     ...mapGetters(['isAdmin'])
    }

 And in the template
    
     <sidebar-item v-if=""isAdmin"">Item for admins only</sidebar-item>

For restricting routes, for these users, you'd use vue router `beforeEach`
",1534766578.0
SharpSeeer,Damn that looks really nice.  Like you spent a good amount of time working on it and perfecting it. Nicely done. I starred it on GitHub so I can use it later. ,1534707028.0
brainbag,"This looks awesome! I'm definitely going to try it out. 

A couple of feedbacks - the web site doesn't have a link to github, that would be really nice. Some example code on the web site would be helpful too!",1534711727.0
so_lost_im_faded,"Looks very nice, I'll try it in a project I'm working on!

Edit: Already tried it, works great! The installation is simple and clear and I came across no errors. I can see that this will be a common mixin for my hiding elements. Thanks a lot, OP.",1534707151.0
DOG-ZILLA,Thanks for sharing! Looks great :),1534709048.0
kaelwd,Something similar but as a directive: https://github.com/JamieCurnow/v-smoothresize,1534743963.0
compscimemes,"Woah, Thanks!",1534747801.0
The5thElephant,I love it. Perfect addition to Vue’s already excellent animation tools. Thank you. ,1534729814.0
OF_Shervin,"Oh this is awesome , good job man 
You saved my time",1534739591.0
theolereacharound,Would I need to add the $smoothReflow to every individual element I want to be affected by the mixin? Or can I just add it to el?,1534786130.0
Madd0g,"good stuff, works as intended",1534815620.0
JohnMellor89,"Got an error for me:

`ERROR in ./node_modules/vue-smooth-reflow/src/index.js`

`Module parse failed: Unexpected token (106:12)`

`You may need an appropriate loader to handle this file type.`

`|             hideOverflow: true,`

`|             debug: false,`

`|             ...userOptions`

`|         }`

`|         let properties = this.parsePropertyOption(`[`options.property`](https://options.property)`)`

 `@ ./node_modules/babel-loader/lib?{""cacheDirectory"":true,""presets"":[[""env"",{""modules"":false,""targets"":{""browsers"":[""> 2%""],""uglify"":true}}]],""plugins"":[""transform-object-rest-spread"",[""transform-runtime"",{""polyfill"":false,""helpers"":false}]]}!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./resources/assets/js/components/RecordForm.vue 46:0-45`

 `@ ./resources/assets/js/components/RecordForm.vue`

 `@ ./resources/assets/js/app.js`

 `@ multi ./resources/assets/js/app.js ./resources/assets/sass/app.scss`",1534864610.0
cutety,"How I would do this is have a property in your vuex state that contains the key of the selected option (in addition to one that stores all the options). Then define two vuex getters, one that returns a list of options to pass to the select component (e.g. an array of objects containing the value & label), then one that will return the features for the selected option (or return an empty object if nothing has been selected). Then you can just hookup the state, getters, and the mutation to set the selected option in your component.

[Here's a codesandbox that demonstrates the above, and more-or-less achieves what you're looking for in the posted image](https://codesandbox.io/s/m7q984p2zx?module=%2Fsrc%2FApp.vue).

Or if you'd rather just see the code:

    export default new Vuex.Store({
      state: {
        // where SELECT_OPTS is the options object
        options: SELECT_OPTS,
        selected: null
      },
      getters: {
        optionsList({ options }) {
          return Object.keys(options).map(id => ({
            value: id,
            label: options[id].title
          }));
        },
        selectedFeatures({ options, selected }) {
          if (!selected) return {};
          return options[selected].features;
        }
      },
      mutations: {
        setSelected(state, { id }) {
          state.selected = id;
        }
      }
    });

    <template>
      <div id=""app"">
        <v-select placeholder=""Select an Option"" :options=""optionsList"" @input=""select"" />
        <div class=""features"">
          <div v-for=""feature in features"" :key=""feature.title"">
            <h2>{{ feature.title }}</h2>
            <p>{{ feature.description }}</p>
          </div>
        </div>
      </div>
    </template>

    <script>
    import vSelect from ""vue-select"";
    import { mapGetters, mapMutations } from ""vuex"";

    export default {
      name: ""App"",
      components: {
        vSelect,
      },
      computed: {
        features() {
          return Object.values(this.selectedFeatures);
        },
        ...mapGetters([""optionsList"", ""selectedFeatures""]),
      },
      methods: {
        select(selected) {
          this.setSelected({ id: selected ? selected.value : null });
        },
        ...mapMutations([""setSelected""]),
      },
    };
    </script>
",1534663693.0
fake-love,"You can also do it without vue-select library:  


store:

    state: {
      food_options: [
        {
          name: 'fruits',
          food: [
            'apple',
            'banana',
            'kiwi'
          ]
        },
        {
          name: 'veggies',
          food: [
            'potato',
            'tomato',
            'yam'
          ]
        },
        {
          name: 'meat',
          food: [
            'fish',
            'chicken',
            'red meat'
          ]
        }
      ],
      current_food: '' // currently selected food
    },
    mutations: {
      setCurrentFood (state, food) {
        // find an object from food options array that matches the selected food
        state.current_food = state.food_options.find(option => option.name === food)
      }
    },
    getters: {
      getCurrentFood: state => state.current_food, // get the state of currently selected food
      getFoodOptions: state => state.food_options // get the state of food options available
    }

and template:

    <template>
      <div>
        <select @input=""setCurrentFood"">
          <!-- iterate over food options -->
          <option v-for=""(option, index) in getFoodOptions"" :key=""index"">{{option.name}}</option>
        </select>
        <ul>
          <!-- iterate over selected food array -->
          <li v-for=""(food, index) in getCurrentFood.food"" :key=""index"">{{food}}</li>
        </ul>
      </div>
    </template>
    
    <script>
    import {mapGetters} from 'vuex'
    
    export default {
      computed: {
        ...mapGetters([
          'getFoodOptions',
          'getCurrentFood'
        ])
      },
      methods: {
        setCurrentFood (selection) {
          //get the option value from dropdown and mutate current food state
          this.$store.commit('setCurrentFood', selection.target.value)
        }
      }
    }
    </script>",1534721226.0
anthony_doan,"> what alternate can I use to sharing methods between vue components?

Use mixins.

https://vuejs.org/v2/guide/mixins.html

> Mixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be “mixed” into the component’s own options.

",1534626967.0
jemminger,"BTW, this is the VueJS sub.  Did you have thoughts on how this would be handled in Vue?",1534632438.0
jaxn,No pricing? Did you just launch?,1534750420.0
vuestrik,"If you use Vue with asp.net mvc then use SpaRouteExtensions.MapSpaFallback. If it's just static files hosted in IIS then use IIS rewrites: https://gingter.org/2017/03/20/deep-link-angular-spa-iis/ 

If your Vue app is hosted together with a PHP app then you have to figure out how to do something like the asp.net mvc MapSpaFallback equivalent in your PHP framework of choice.",1534632356.0
tucsonflyer,"What is your webserver? If Apache, use .htaccess rewrites? ",1534623253.0
xRoxel,There's a thread on the front page with the same problem lmfao would love any guidance for doing this without Node if possible though ,1534622944.0
archivedsofa,"For static hosting just use Firebase. It's free, it has CDN and HTTPS.

You can configure redirects and other stuff easily.",1534626918.0
r3dh4r7,"If you don't mind the '#', use hash mode. ",1534640424.0
ExpatTeacher,"I picked this up about 6 months ago, and he's updated or amended the course at least 3 times since then.

It's very good. He just added Vue CLI 3 a week or so ago - I need to get to that.

Any updates he makes to maintain the course are free.",1534594042.0
NivekNTH,"I do agree,  Maximilian is a great instructor!",1534594973.0
men_nas_io,"Can't recommend this course more! It's really incredible. I still come back to this course when I  want to remember something or figure out stuff. Max is an incredible teacher. For those of you who have finished the Vue course I would also recommend to start the Nuxt.js course ->  [https://www.udemy.com/nuxtjs-vuejs-on-steroids/](https://www.udemy.com/nuxtjs-vuejs-on-steroids/)  . You will dive deeper into server side rendering, universal apps and everything else that Nuxt offers. Max once again does an excellent job in covering all the concepts and the course project is very well developed as well. ",1534590844.0
gdffff,"looks like an ad, and so do comments here",1534606580.0
crypt0lover,I haven’t tried this course. Currently i’m taking vue mastery from vueschool and its the best so far for me.  Would preview this one too! Thanks,1534596864.0
felondejure,Same i took this one and then went on to create projects myself. This is the key in the beginning i believe. Reading docs are not enough. Someone explaining you all the concepts and then you go dive in yourself. Max is greates on udemy for React and also Vue,1534603767.0
so_lost_im_faded,"Also agree. 

I was first introduced to Udemy and this particular course at my workplace. They didn't have more Max's courses there, but I've bought React, Angular and React Native courses with my personal account. I've also purchased the same Vue.js course I've already completed at my work. Then my BF started to learn SPA development and his go-to course was this particular Vue.js course - again. And he's bought more courses from Max - TypeScript, CSS, ES6 JS. Max is basically 80-90% of our Udemy portfolio lol. Any things we want to learn, we first check Max's videos.",1534610250.0
Spooky_614,"Couldn't agree more, if you need to learn Vue quickly and thoroughly, there is no better course",1534610298.0
the_ju66ernaut,I agree. I have taken a vue course of his on udemy and now a react course by him on udemy and both are very well done. I picked up a css course by him as well because I enjoyed the first two so much ,1534625170.0
CereteanVadim,True,1534696974.0
naptownrich,"Agreed.  This was the best Vue course I could find.  Incredibly detailed and comprehensive.  He is an amazing instructor and very engaging, and I've invested in a few of his other Udemy courses that I am looking forward to watching.  Also, check this out if you want to understand some of the advanced features of Vue.js: [https://frontendmasters.com/courses/advanced-vue/](https://frontendmasters.com/courses/advanced-vue/)",1534598623.0
usx-tv,"The code in this example is jQuery.

IMHO, you should not be using jQuery with Vue. They are two completely different eco-systems. One is based on DOM manipulation (jQuery) and the other is a framework where DOM manipulation is extremely rare, and IF needed, generally means something is going wrong.

Instead of trying to copy paste this code, try to understand what it's doing, and google a way to do those things in Vue. You will gain a lot more knowledge this way as well.",1534750194.0
toadkicker,Shit post is shit,1534582519.0
ScarredUpID,Title has hit a build error ,1534582979.0
SharpSeeer,Or they figure after learning and using javascript you are ready to give in and find god.,1534863264.0
Whale_Eating_Cheese,"This should help:

https://stackoverflow.com/questions/26349497/node-express-with-static-html-how-to-route-all-requests-to-index-html

It depends what language your backend is written in but the above is for node/JavaScript",1534573810.0
nokj_,Might be that you are using router's history mode and don't have the server configured to fallback to index.html? More info here https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations,1534573828.0
Maxalos,"Please share your code, its like you want to find a brooch on sand. For fast and easy recording, just use this [screentogif](https://www.screentogif.com/).",1534776345.0
PulangKalabaw,"hey guys, i fixed it. i configured using htaccess. and the base inside VueRouter. thanks ",1534777096.0
SharpSeeer,"Slightly off topic, but screencast software is your friend: [https://getsharex.com/](https://getsharex.com/).  ",1534863433.0
Prpleredfox,[the first and only answer](https://youtu.be/nn2FB1P_Mn8),1534572386.0
PulangKalabaw,"this is my setup, i have a backend LARAVEL and then i have a vuejs application separately.",1534573989.0
tarellel,"Just link to the dam article, rather than hoping for a few hits - [https://itnext.io/build-a-project-management-software-with-vue-js-and-apollo-part1-d12ee75a7641](https://itnext.io/build-a-project-management-software-with-vue-js-and-apollo-part1-d12ee75a7641)",1534551491.0
tribak,"I don't get why everyone needs to say: Do done shit using \*framework\*, \*node\*, etc... I mean, can you use those frameworks without node?",1534565378.0
NivekNTH,"You should populate this.rows in the mounted vue component hook. I haven't read all because I am not used to JS Fiddle but:

1- add a the mounted hook in which u call loadFromFirebase method

2- in loadFromFirebase method, populate your v-model this.rows with the data u get from firebase",1534524385.0
gazreyn,Tried https://github.com/SortableJS/Vue.Draggable ?,1534524194.0
ksu12,"VueDraggable is also what we use, but I had to make some changes to both SortableJS and VueDraggable to get it to work for our use case.  Other than that it was an easy implementation.",1534527935.0
gabriel-et-al,"> should I just write my responsive web app and wrap it in Cordova to deploy it on mobile devices?

If your app is going to be simple (i.e. no heavy interaction with phone hardware etc), then it's a fine option.

The real question is, do you _really_ need an app? Isn't a responsive website enough?

If you don't plan to rely on phone specific capabilities, just let them access your responsive website with their phone's browser. You may even instruct them to create a PWA from it.
",1534535695.0
archivedsofa,"IMO there are two good approaches:

1) Create a monorepo where you have a folder for shared code, and a folder for each project (web, mobile).  Then import the shared code in each project as you see fit.

2) Create a single Vue app, and simply pass env vars at compile time to configure its behavior (eg: `PLATFORM=mobile`). You can do many types of config with that. For example you could have a folder `components/platform/mobile` and `components/platform/web` and dynamically resolve with Webpack which folder should be used when importing `components/platform/MyComponent.vue`.",1534518948.0
64robots,Just use Quasar ,1534566442.0
ogabosses,Check out nativescript ,1534634832.0
pancakeses,"I've been looking at the same thing. Two options that seem promising:

https://nativescript-vue.org

https://vue-native.io",1535030981.0
yeenthings,"Depending on how much data you need to sync across and providing it isn’t anything sensitive, you could make use of localStorage or sessionStorage events; https://developer.mozilla.org/en-US/docs/Web/Events/storage

",1534492709.0
anthony_doan,"https://stackoverflow.com/questions/30040441/javascript-add-event-listener-to-document-opened-in-new-window

It seems like you can have a reference to the new open window and from there just add a listener.

Would that work?

edit for the vue solution:

https://stackoverflow.com/questions/50490561/computed-property-reactive-to-window-innerwidth-in-vuejs",1534492761.0
idiomatik,"Link takes me to hiring page. 
",1534492108.0
,[deleted],1534493282.0
anthony_doan,"Yes it's a centralize place for all truth.

When you change the state you either use mutation or action method depending on if it's a sync or async call.

> https://vuex.vuejs.org/guide/state.html

> Vuex uses a single state tree - that is, this single object contains all your application level state and serves as the ""single source of truth""",1534467870.0
crazyeyes420,"Looks so cool, makes me want to contribute. ",1534463104.0
anthony_doan,"If you're talking about secret key you cannot store it on the client side.

If you're stuck doing only clientside then you need a system that does not require secret key and only client key.

An example:

Tumblr api gives developer a client key which is safe to store on client side and you can just connect to Tumblr's api and it'll give you a token and keep track of your client key stat. If it goes over the rate limit you get time out for a time interval.

With secret keys you store it on the server side and the client ask the server to authenticate on their behalf or make api calls on their behalf like a middle man if it's a third party API or just two way if it's just your server API.

---

edit_update:

It's a bit more nuance, the linkedin API, once the server authenticate the user, linkedin will give you an access token which the user can use to call linkedin instead of calling the server directly. But the authentication part with secret key will be on server side.",1534446685.0
chipsa,"If the key is being used by the client software, you're kinda hosed. You have to give the key from the client to the server, and there's no good way to stop them from just sniffing the traffic. If you want something more secure, you're going to have to have something other than just an API key, that links the authorization to the specific client.",1534446696.0
pd-andy,"This is really slick, well done.",1534409521.0
cssgareth87,LOVE IT! ,1534411874.0
trevoreyre,Why macOS only if it’s made with Electron? Looks really slick!,1534423061.0
Alitron1,"Try capitalizing the first letter 

vue -> Vue",1534403667.0
tucsonflyer,Vuex,1534402405.0
wishinghand,I agree with /u/tucsonflyer that Vuex is the way to go for global data.,1534402957.0
thiswasprobablyatust,"I'm not aware of any, probably because this technique is kinda silly unless you _are_ as big as Facebook or Google. Shorting class names in a medium size app is going to save you _maybe_ 3-5k (pre-gzip)?

Do you really want more bullshit in your build-pipeline, and have a significantly worse time debugging errors in staging/prod, just to save 1k gzip?",1534395476.0
JasZon,You can achieve this with Css modules. Have a look at https://vue-loader.vuejs.org/guide/css-modules.html#usage. ,1534401703.0
porksmash,Keys only need to be unique within a list,1534367661.0
anthony_doan,"If it's computationally expensive then you should do it on the server side there shouldn't be an assumption that your client can handle that work load. 

Unless you don't care about accessibility.",1534362325.0
protocol114,"Depends on the data set, but no, you would usually want it to be on the serverside.",1534364333.0
4022a,No. It is not performant enough for large datasets.,1534361132.0
autoboxer,"If you wanted all the data client side for other uses, you could fetch it in two calls, filtered for initial display, and the rest in a second call to be filtered client side after initial render.",1534375801.0
WeRequireCoffee,"This is my biggest hangup with VueX... the lack of type safety and the proliferation of magic strings.

I've researched solutions to both of those and there really isn't any good one. I'd love to be proven wrong on that one as VueX would be nice to use (someone accept my challenge?)

Until then VueX isn't really a viable option for me. The concepts they incorporate are definitely used in my builds but the library itself is not.",1534375799.0
,[deleted],1534408506.0
acklavidian,Vuex-orm has provided a nice class interface for our store.  Very nice. https://github.com/vuex-orm/vuex-orm,1534453537.0
vip8830,"https://medium.com/@cheungken/autocomplete-for-vuex-store-by-typescript-941724faddd0

What do you guys think about this approach? No more magic strings if you use this approach",1538278121.0
chanon,"Hi! I've made an example bare-bones project that enables hot reloading for Vue.js + TypeScript.
Main objective is that it is simple and easy to read and modify further to suit your needs. (With the project that you get with `vue-cli`, the webpack config is hidden and pretty hard to customize.)

# Features
- Vue.js `.vue` single file components that hot-reload
- Fast TypeScript incremental compilation with hot-reloads
- Use TypeScript in `.vue` component files
- Simple explicit `webpack 4` configuration files that are commented and readable so you are able to customize further to suit your needs.
- Uses latest recommended cli tools `webpack-serve` for development and `webpack-command` for building production assets.
- Bare-bones with the least complexity possible. It doesn't include anything additional such as Vuex, testing frameworks etc. since you might not want to use them.",1534348446.0
4022a,What's the recommended backend here?,1534348553.0
JasZon,"Definitely give [Devour](https://github.com/twg/devour) a try! It is build on top of Axios. However, if you want a more low level solution (e.g. when you make the requests yourself) have a look at [json-api-normalizer](https://github.com/yury-dymov/json-api-normalizer). Or take a look at [http://jsonapi.org/implementations/#client-libraries-javascript](http://jsonapi.org/implementations/#client-libraries-javascript).",1534345847.0
tsterker,"[jsorm](https://jsonapi-suite.github.io/jsonapi_suite/js/home) looks interesting and comes with [""vue bindings""](https://github.com/jsonapi-suite/jsorm-vue), when needed. Written in [Typescript](https://www.typescriptlang.org/) but works in plain old ES5 as well.",1536863189.0
Brahminmeat,"Axios, my friend",1534342446.0
Brahminmeat,"Return them as a set.

getBlockOfThings() 
on created

Can do the API call OR just merge the already present articles, lists, posts into a new array: things

Then in the template you can just do

<div v-for=""thing in things"">

Then in each of you can do

<post v-if=""thing.type == ""post""></post>
<otherThing v-if=""thing.type == ""otherThing""></otherThing>",1534308617.0
thiswasprobablyatust,"1. Based on what you mentioned I would use Promise.all, and then just combine the API call results in one method/data attribute.

2. Computed are just that, computed from data. So they have no persistence of their own. For ""load more"" you would typically just append to the array, not wipe it.

3. You can dynamically switch components based on the type property you described. Look into - Dynamic Components - in the Vue docs.

",1534309077.0
dougieled,npm run serve or npm run dev,1534291753.0
niveshsaharan,I accidentally opened it on my mobile and it looks scary. ,1534300866.0
bmarkovic,"Impressive. Actually one of the projects we use Vue for does something similar (pulls massive amounts of realtime data and aggregates, plots and displays it)

Minor irk: Socket is TCP/UDP socket, has been and will be. JavaScript in the browser, unfortunately, **still cannot make raw Socket connections** (can in Node.js but that's another matter).

https://www.w3.org/TR/tcp-udp-sockets/

What you are actually using and talking about is called WebSockets, which are a separate, different thing. Historically, TCP Sockets predate HTTP by about 15 years, and WebSockets are predated by HTTP by about 20-something years which makes them nearly 40 years younger than Sockets. 

The ""Web"" in WebSockets  is stipulated for a reason. It's an ""upgrade"" to HTTP that provides lightweight packets (with message frame headers that are significantly smaller than HTTP headers) between client and webserver but the persistent TCP connection is initiated through HTTP so it's much more akin to HTTP/2 persistent connections than to ""classic"" TCP socket connections. 

Like HTTP and HTTP/2, WSS is a layer 7 protocol, whereas TCP/UDP sockets are layer 3 protocols.",1534313521.0
aneuhold,Boy that's a lotta data.,1534293125.0
compubomb,That is pretty neato. Good job.,1534302979.0
Tetracyclic,"I like to call it The Wall of Depression.

^Nice ^work ^though.",1534340627.0
Dokiace,this is amazing,1534346820.0
Cheshamone,"What error are you getting? Are those consts being exported from your helpers file? You can export them by adding export in front of the const declaration if they aren't, ie:

    export const theDegrees = ['Root', 'b2/b9', '2/9', 'b3rd/♯9', '3rd', '4th', 'b5th', '5th', '♯5/b13', '6/13', 'b7th', '7th']
    export const theNames = {
      sharps: ['A', 'A♯', 'B', 'C', 'C♯', 'D', 'D♯', 'E', 'F', 'F♯', 'G', 'G♯'],
      flats: ['A', 'B♭', 'B', 'C', 'D♭', 'D', 'E♭', 'E', 'F', 'G♭', 'G', 'A♭']
    }",1534292889.0
cyberst0rm,Use a mixin,1534297091.0
SharpSeeer,This looks like a problem that would be much better solved using css instead of javascript.  I put together a [codepen sample](https://codepen.io/SharpSeeEr/pen/JBqpBb) that I think gives you the layout you are looking for without any javascript code.,1534345051.0
vuehero,"When I click the ""Build Web Apps with Vue JS 2 & Firebase"" I'm sent to a React course on Udemy. Is this just affiliate links?",1534246341.0
TehMadWolf,This is a referral/affiliate link to this course,1534931498.0
mvaneijgen,"This isn't really a Vue.js question, but more a Pageclip question. 

If I check there docs, you can choose two options. The standard form attributed option or their API option and as you describe above here, you are looking for the API option. There is an example on their homepage.

```
let data = {name: 'Bill', email: 'b@ex.co'}
Pageclip.send('abc123def456', data)
```

So you want to create a `method` in Vue which sends a JSON object stored in a data element on the form submit with a `@click.prevent=""sendForm""` method. Just populate the your JSON object with v-model and send with their API call `Pageclip.send('abc123def456', YOUR_JSON_OBJECT)`

There is more info on their docs https://pageclip.co/docs#rest-api",1534244372.0
brainbag,"If you have *all* of your validations client side and are confident they are correct, then you could validate the form on submit, and then choose to only `preventDefault` if the validation fails.",1534244660.0
stpf7957,"Very nice overview, thanks for sharing",1534285517.0
SharpSeeer,"Thanks for this!  I have struggled with vue components being passed objects and with the .sync concept, but this actually helped me understand.  Passing objects is still sightly more complex, as the objects I'm dealing with are usually much bigger at the top of the app, passing smaller bits as I go.  

The main thing is, this clearly explained how to use .sync as the consumer of a component and as a component author.  So thanks again!",1534341252.0
thiswasprobablyatust,"Any reason you didn't just re-use Vue's native v-model and write a `computed` proxy to handle the different cases?

IMO you did this the hard way and it made for some rather hard to read/maintain code.",1534233039.0
l2usted,its this.routes not data.routes,1534224448.0
RoganTheGypo,"the component has a prop for transition, have you tried passing a transition name?

`props: {      transitionName: {        type: String,        default: 'flash-transition',      },` 

Generally I just use whatever is part of the library im working with.",1534227219.0
hovokhc,Hope you find this useful: https://github.com/vuejs/awesome-vue/blob/master/README.md#drag-and-drop,1534196491.0
1makfly,"I've been using vue-draggable for a few projects (menu editor, content editor etc.). Link: https://github.com/SortableJS/Vue.Draggable",1534198784.0
Love4rty,"I believe a lot of the core team’s time has been devoted to the 3.0 version of the CLI recently, which was just released officially. Try checking the commits there.

Edit: added CLI version",1534165503.0
evilpingwin,"The team has been focused on tooling recently. They're going back to core soon, if I recall. If you check the PRs there are loads ready to be merged and lots of others besides. I think now that vue cli 3.0 has been released the focus will switch back to core.",1534166166.0
DOG-ZILLA,"There’s a lot around tooling that’s been worked on. Cli 3 and the UI. As well as things like the Vue Dev Tools etc. 

In my mind, it’s just as important as the core, but since Vue is rather solid already they appear to have taken the time on the former. 

Nothing to be worrying about here. ",1534176877.0
brainbag,There's a roadmap you can view https://github.com/vuejs/roadmap,1534195767.0
lucisferre,Yay for stability!,1534205016.0
StephenNotSteve,"Nice work, Lee.",1534214603.0
thinkadrian,"The source is empty *because* it’s an SPA. The content is rendered by JavaScript after the skeleton HTML is downloaded, and has zero SSR by default.

Depending on the implementation, google is able to crawl a JS-based site, but you need to review it with various SEO tools like Google Site Manager. 

Server-side rendering is pretty vital to a big catalogue site, though.",1534162274.0
earthboundkid,This is a bad use of SPA. It’s not an “Application.” It’s a catalog. You will hurt your SEO. ,1534160980.0
RoganTheGypo,how do you mean empty? Once the site is deployed its been packed up by webpack so stuff makes less sense in its deployed state. You need to do all your source viewing and debugging while serving the app locally.,1534160688.0
Kazanian,SSR or Prerendering important pages will help with good SEO results.,1534168951.0
Maxtream,Use nuxt.js to go with SSR out of the box or rendertron/prerender if you already done something in Vuejs. Both works well with SEO.,1534224925.0
Alitron1,"I am a little confused, but I think you'll find your answer here:

https://vuejs.org/v2/guide/components-dynamic-async.html

Perhaps the one with the 'require' syntax?",1534160524.0
techmighty,you can use web pack code spliting to send several small chunks build.js files and load them lazily. ,1535209847.0
masterchief1676,at least,1534155412.0
quinncuatro,"I saw [the blog post from Evan](https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb).

Could someone explain the ""Building as Web Components"" part to me? Seems like it's just shifting the components from Vue to a more common standard. Is there something cooler going on than that? I feel like I'm missing something.",1534170368.0
imGnarly,"Less configuring, same coding. But yes, I love 3.0",1534177657.0
nothingduploading,Does the vue cli have any code generators built into it?,1534205883.0
endjynn,"I'm not sure if the development time it took to create Vue CLI 3.0 was worth it. Sure, it's good to lower the barrier to entry but core development has slowed dramatically. I hope they now prioritize things like better TypeScript support in core.",1534177144.0
ataraxy,"Got around to playing with 3.0 last night for the first time and I'm completely sold by some of the convenience it gives you. Things like managing npm module dependencies right from the UI for example.

One thing I wasn't able to immediately identify was how to configure the location of SSL certs for when you enable the HTTPS toggle on 'serve' through the UI.",1534183494.0
tweettranscriberbot,"^The linked tweet was tweeted by [@alexjoverm](https://twitter.com/alexjoverm) on Aug 13, 2018 07:34:04 UTC (3 Retweets | 13 Favorites)

-------------------------------------------------

When you need arguments in a computed prop, it's time to create a new component. Often it's the case of the ""items"" in a v-for directive.



You get for free: 

✔️ Simpler components

💼 Structured and modularized code

⚡️ Leverage computed prop's caching



Inspired by [@beliolfa](https://twitter.com/beliolfa)  😉 

[Attached photo](https://pbs.twimg.com/media/Dkdp8MYXoAA_lAf.jpg:orig) | [imgur Mirror](https://i.imgur.com/bhaPv7d.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1534147996.0
letharus,"Have you tried Vuefire?

[https://github.com/vuejs/vuefire/tree/firestore](https://github.com/vuejs/vuefire/tree/firestore)",1534149748.0
inhalingsounds,":class=""{ active: day === currentDay }"" where you get currentDay via computed property should do the job.",1534108901.0
fake-love,"I don't know what format your date variable is, but you can get current date with [Date.now](https://Date.now)()  
So you bind your class like so:

    :class=""{ currentDayClass: day === Date.now() }""

so when ""day === [Date.now](https://Date.now)()"" is truthy, it will bind your 'currentDayClass' class.

    <template>
        <div class=""calender col s4 z-depth-3 white-text"">
          <div id=""month"">{{monthLabels[7]}}</div>
          <div :class=""{ currentDayClass: day === Date.now() }""
               class=""day center-align"" v-for=""day in daysInMonths[7]""
               :key=""day"">
               {{ day }}
          </div>
        </div>
    </template>

Hope this makes sense",1534109080.0
_Odaeus_,I think [bootstrap-vue](https://bootstrap-vue.js.org/) covers all the form components already.,1534142843.0
tucsonflyer,Vuex would be great for this ,1534103272.0
cutety,"As the other comment says, using Vuex is the “proper” way to do this.

However, you can force a component to update by using the `key` attribute (almost always only used with `v-for`, but can be used anywhere), when you bind a value to this when that value changes it will make Vue re-render that component. So, you could do this `<NavBar :key=“loggedIn”>`, and when the value of `loggedIn` changes, the nav bar will be re-rendered.",1534113838.0
Sphism,"Vuex is probably what you need

But also your logged in state should probably be in app and passed to the nav bar component as a prop. ",1534150108.0
archivedsofa,"IMO neither.

Components should only care about rendering stuff and getting user input. Stores should only care about managing data.

API logic should go in its own module.",1534088646.0
LloydAtkinson,You should abstract your API client in it's own `api.js` (for example) ES module and import it and use it in the Vuex actions.,1534089739.0
LEOtheCOOL,No / Yes / Both / Neither / It depends.,1534086921.0
porksmash,Calling API in actions is fine. Just be sure to keep them out of your mutations. I don't like components making API calls - that should all be contained in the state code.,1534087067.0
compubomb,"Anything ASYNC should go in actions in my opinion. Actions are the perfect place for that kind of thing. You can build a separate set / collection of API calls, but if you have to make multiple calls to an API, combine it into a standardized action which in theory could be used accross your application. Also lets not forget the namespacing of vuex stores, which you can leverage as well, which would allow you to modularize your vuex store/action/getters/mutators providing more specificity to the purpose of what you're doing. check out https://vuex.vuejs.org/guide/modules.html ",1534117300.0
winnipegr,"This article posted yesterday in this sub explains this really well. Not sure if it's ""giant production app"" ready but it helped me a lot.

https://scotch.io/tutorials/handling-authentication-in-vue-using-vuex",1534118365.0
omarsotillofranco,"It depends in the scope of the request call. If you are going to use it in Vuex like keeping information, the ones that are gonna be reused many times across the software, then yes.

But there are some sort of api calls which somehow don't need to pass through the state and therefore should be kept within the component. Example post of forms, click events logging information, etc

Feel free to ask me privately :) ",1534092844.0
thinkadrian,"You’re best off looking for [VueJS tutorial](https://vuejs.org/v2/guide/index.html)  than asking such a broad question.

Here’s a page of a few different solutions https://vuejsdevelopers.com/2017/08/28/vue-js-ajax-recipes/",1534081481.0
reditoro,Thanks all for the replies. AJAX Requests with jQuery or Axios seems to be doing what I was looking for.,1535201044.0
thiswasprobablyatust,"If these functions are fast, and you want them to be available immediately when the page loads, you can put them on the window object.

```
<script>
window.data = SOME_WAY_FLASK_DOES_TEMPLATING_I_DONT_KNOW
</script>
```

Otherwise if they're slow, or the page should ask for them upon some user action, that's a normal API request to the [Flask server](https://flask-restless.readthedocs.io/en/stable/basicusage.html).


edit//Downvoted for presenting two viable options to the OPs question? Sweeeeet.",1534076679.0
zyioump,Vuetify<3,1534074620.0
alphavoice,I am using it together with Node.js,1534065000.0
notop20,I'm using Nuxt on top of it for superb SSR,1534067381.0
N3KIO,"Nuxt for frontend and ssr

Then you need a api, so I went with expressjs and mongodb


",1534092190.0
mark_deshark,Using it with Laravel since it comes with it by default. Gonna try use it with node on my next project!,1534149182.0
SharpSeeer,"The apps I've been building lately essentially use vue.js alone.  I use other client side libraries, like vuetify or buefy.  But my server side is completely separate, providing an api.  My favorite is .net core.",1534297232.0
f12_amish,"I used Vue router guard with an API. https://router.vuejs.org/guide/advanced/navigation-guards.html#global-guards

https://github.com/maxdobeck/basic-app-frontend/blob/master/src/router/index.js",1534038700.0
winnipegr,Great article/tutorial. I have always struggled with understanding where to put the calls for auth. I like how the author approaches it... Man Vue is sweet!! ,1534052556.0
RoganTheGypo,I like that he addressed he's previous article tbh.,1534065646.0
nwsm,"How would firebase auth fit in? Should I just not use it? I'm building an app with firestore and it would be really nice for firebase to handle auth as well.

Basically I think vuex actions should handle all firebase auth calls? But I don't want to actually replicate the user data in a state property because the data is always stored in firebase.auth().currentUser. So I'm not sure how to make sure Vuex knows data has been updated to push it out to components?",1534100370.0
brainbag,"It sounds like you might be able to combine [vue-markdown-loader](https://github.com/QingWei-Li/vue-markdown-loader) with [prerender-spa-plugin](https://github.com/chrisvfritz/prerender-spa-plugin) to generate the pages you want.  vue-markdown-loader converts `.md` files into Vue components, and `prerender-spa-plugin` will prerender any components you specify.

There's a lot more markdown stuff here if that doesn't fit your needs: https://github.com/vuejs/awesome-vue",1533990026.0
_cameleon_,"I think your issue is to ask a question which is not really focused on something. You ask something large with specific technologies on a topic which is not that important IMHO.

I have no answer for you sadly since I never tested anything. And won't ever do it since I want to avoid big projects where this would be required. But SO seems to be more oriented on being stuck, than how can I improve. If you want to make tests, it's better to take time on the doc of karma.js or something like that.

After that, it's just one downvote and it's possible nobody may have an answer. It's just my point of view, don't get mad at me :)",1533982939.0
Sphism,Because SO is really odd and super anal about stuff like that. ,1534150203.0
forestrangernolan,"[Forestry.io](https://Forestry.io) developer here. 

Working on this feature was my first introduction to Vue and VuePress, and it was great one. I'm really impressed with how simple and straightforward VuePress is for creating doc sites. 

Really looking forward to getting some feedback from the Vue community on how we can make Forestry even better at managing content with VuePress!",1533921472.0
Cursed_vayne,"For static web projects (HTML,CSS,JS Vamilla or with a framework ) i would recommend Netlify for hosting, but when you start creating your own full stack projects front and back i recommend starting with heroku because its free and easy to setup just to get  familiar with the workflow then you can expand and move on to AWS (Amazon web Services) or digital ocean",1533925903.0
HydrA-,Hey /r/veujs! I haven't done much frontend the last few years. How is Vue coming along compared to say Angular 6? At least seeing this CLI tool come along is giving me a nice impression,1533930974.0
712Jefferson,"As a web developer who's just getting my feet wet with  Vue, would you recommend I move forward on a brand new commercial project (that will expand over time) with the new CLI 3.0 or go with Nuxt as the foundation?  Or am I missing something completely and the two compliment each other perfectly?",1533973298.0
DOG-ZILLA,"Fucking yes!!

I’ve been using it through RC even for production projects and not hit one issue. These guys have been masterful in their releases. 

Well done Vue crew! ",1533944130.0
Programmurr,I don't use nodejs in the backend.  To what extent does this take away from using vuecli?,1533997484.0
mayhempk1,Awesome!! Vue CLI is great.,1534003846.0
quinncuatro,"Can anyone explain the ""Building as Web Components"" part to me? Seems like it's just shifting components from Vue to a more common standard. Is there anything more going on there? I feel like I'm missing something.",1534170616.0
makotech222,"Damn, does anyone else just add a link to a vue.min.js file to their page? Lol, I really detest all this webpack stuff so much.

Anyways, hoping to see something on Vue.js 3.0 or whatever the next major version will be.",1533925294.0
urmyheartBeatStopR,"ugh i'm stuck in 2.x whatever land.

Too far into the project to refactor i'll do it when I have the time T___T. I also like a one to one comparison of what changed I know the dir layout is different.

Would love it if somebody write a work flow for 3 vs 2.x changed and such.
",1533937567.0
raf_all,"I think I would have used embedded client-side routing with vue-router to obtain the expected behaviour, however your solution doesn't sound particularly tricky, it happened to me once to bind the value of the clicked menu button into an event listener which triggered modifications in other components, which was not a so bad solution",1533922822.0
inhalingsounds,This is exactly the reason why computed properties exist!,1533909271.0
prawnsalad,Try `{{ product['name_'+language] }}`? ,1533908470.0
ChefQuix,"Use the square brackets instead of a '.'

`<template>`

 `<h1>{{ test['name_' + lang] }}</h1>`

`</template>`

`<script>`

`export default {`  
 `data() {`  
 `return {`  
 `test: {`  
 `name_fr: 'value',`  
`},`  
 `lang: 'fr',`  
`}`  
  `},`

`}`

`</script>`",1533908888.0
veldenar,Try: product[name_ + language],1533909236.0
Kyan1te,Sexy! Hope it becomes an easy to use npm package like buefy.,1533917284.0
nightman,"Looks very nice, but is missing basic things like **select**. Anyway really slick!",1533923822.0
teerryn,"Looks like Stripe, very nice",1533910132.0
aragonix,"What do you mean by installing it ""manually""? Did you install the  `libgtk2.0-0` package? Or did you just download the lib and move into your usr folder? Anyhow, try reinstalling `libgtk2.0-0`.",1533898904.0
aragonix,"I think what you want is to set `no-inferrable-types` to `false`. It forces you to declare types, although they could be inferred by the compiler. Edit: You might also want to explicitly set `typedef` to `true`. See https://palantir.github.io/tslint/rules/no-inferrable-types/ and https://palantir.github.io/tslint/rules/typedef/",1533893880.0
aragonix,"Just a little follow-up. I created a quick test project with the vue-cli and chose Typescript+Tslint. Everything works as expected.

    expected member-variable-declaration: 'testVar' to have a typedef (typedef)
      16 | })
      17 | export default class App extends Vue {
    > 18 |   public testVar = 'test';
         |         ^
      19 | }",1533904546.0
SuperImaginativeName,Great. Just as I started a library to do this too. Always nice to be beaten to it...,1533850705.0
,What's Apex got that chartjs doesn't?,1533894978.0
DetroitEnglish,"Nice work - thanks!

How's ApexCharts in terms of bundle size? Gzipped Charts.js adds 46kb to my bundle with moment.js excluded.",1533907522.0
vue-rocks,The link doesn’t work.,1533813430.0
Jazoom,"Looks good, but why did you leave out Cerebro from your ""Comparing with other frontends"" section? IMO it's the best of them all and I'm wondering what this project provides that Cerebro doesn't?",1533814448.0
hamzaouiii,"I am not very familiar with elastic search, could you please explain what is its use and what do you do with it? ",1533824342.0
gtalarico,"Very cool!  I am def. going to try this out.

I got into elastic myself recently and I also made a mini vuejs elastic tool, to help me understand

tokenizers and token filters:

[https://github.com/gtalarico/interactive-elastic-analyzer](https://github.com/gtalarico/interactive-elastic-analyzer)",1533879624.0
Sphism,Great combo. I built a vue front end on an elastic search backend and it is insanely fast. ,1534058078.0
nricu,Have you tried algolia? I think it's what you are bulding.,1533840780.0
Viccco,"Hello, we created standalone PWA and Headless storefront for eCommerce in Vue.js. It allow to connect with any eCommerce backend (eg. Magento, Pimcore, Prestashop or Shopware) through the API.

Github: [https://github.com/DivanteLtd/vue-storefront](https://github.com/DivanteLtd/vue-storefront)

Website here: [https://www.vuestorefront.io/](https://www.vuestorefront.io/)",1533801782.0
defunctAI,"Can you move files from one place to another, like drag and drop?",1533834171.0
_sirberus_,"Everything from Maximillian is excellent. I've taken this class and had 3 coworkers take it too. I do recommend it, but I recommend that you also get his course on Nuxt. I feel that the Nuxt course introduces tools and concepts that you'll be very interested in which are missing from the Vue course.",1533773702.0
inhalingsounds,"This is, by far, the best dev-related course I've ever seen. I've been working exclusively with Vue ever since I finished it (well, it's never finished as Max keeps updating it!) and I have to thank Max for all the freelance projects I've embraced ever since.

If you're new to Vue or just looking to consolidate your skills ... this is the best ten bucks you'll ever spend.",1533782892.0
yagaboosh,"I took this course over a week or so, it was excellent. In the middle of a big project at work using Vue, plus a couple side projects. I regularly watch videos from this guy, he's great.",1533778180.0
extraxt,One of the best! You won't regret it! Max is incredible and answers all the questions! I made it and now I can say that I know what I'm doing in Vue. The Nuxt one is great too!,1533780101.0
SuperEnergyDrink,"The best => https://framework7.io/

The have ready made [Vue templates](https://framework7.io/templates/)",1533786803.0
SpeakInCode6,"Buy the course! Not only is it fantastic, but when your actually building Vue apps and you forget certain things, that courses table of contents is a fantastic reference to a quick 3 min video explaining exact what you’re looking for. Get it!",1533793389.0
red-powerranger,"I am currently doing this course, it's really great! It's my first time using Vue, and after about 30 3-min videos I'm already getting really comfortable with it. Great tutor!",1533794693.0
DonPhelippe,"Max really knows his trade and his other videos either in udemy or in YouTube are very informative. The man knows how to get you there with simple steps and great explanations. Try the course, you ll like it (atm at 75%, doing the stock market project). ",1533809450.0
gabdelacruz,"When I started Vue early this year,  I was very obsessed in watching all tutorial vids that has Vue in it. This course was the best out of all that I had watched so far, nuff said.",1533810435.0
majormunky,"Just finishing up this course now, what a great instructor! ",1533829669.0
earthboundkid,"When you look in the storage tab of the developer debugger, are the cookies there? Are they marked HTTP only?",1533783193.0
phyllotaxis,"In the past I've used a textarea that is completely transparent and which overlays a div of identical dimensions (and font style) which contains the actual styled and formatted content. Its a super hacky approach (and is a major pain in the ass if you need a multi-line input and you're not using a monospace font) but i've used it to good effect in several  components where I wanted to have syntax highlighting in a textarea. Unfortunately it probably wouldn't work in a context where you need to show things other than text characters (borders, rounded shapes, etc). And unless you hijack all the mouse events inside the textarea, the user will still be able to see the 'transparent' text when they highlight text.

For even more customization you might have to use an approach like codemirror... they use a hidden (0x0 px) textarea or textareas to accept keyboard input, but they capture nearly every mouse event and most keyboard events in the host element(s) to replicate the appearance and behavior of a code editor (clicking on the displayed text will focus the hidden textarea, custom caret appearance/behavior, custom text highlighting behavior, copy/paste functionality, etc)    https://github.com/codemirror/CodeMirror/tree/master/src",1533762017.0
phouri,"Google document range etc, you can control the cursor’s positioning, also, you can separate the value in the contenteditable div and the change, put them in 2 variables so vue doesn’t keep rerendering.

If you don’t want full blown text editor I think that’s the best way to go, or, multiple input elements, input, tag, input tag etc. 

Not the easiest component to do, aren’t there ready made ones?",1533765073.0
theRetrograde,"I think this is what you are looking for https://vuetifyjs.com/en/components/combobox#example-advanced

You can add a header out of the box and include a search field using slots. ",1533760283.0
ISNT_A_NOVELTY,"https://vuetifyjs.com/en/components/autocompletes

The search field is built into the main part of the dropdown that is always visible, not hidden away inside the menu that opens when you click.",1533768733.0
kaelwd,[Vuetify 1.2](https://github.com/vuetifyjs/vuetify/releases/tag/v1.2.0-beta.0) also adds `prepend-item` and `append-item` slots to all the select components: https://github.com/vuetifyjs/vuetify/pull/4179,1533786937.0
SandFriend,"Not that I'm aware of. Options I see are:

1. Use vuex, commit that data to the store so that any component can access it
1. Use an in-component guard like `beforeRouteEnter` and perform the lookup in the component, this way you'd be able to save the value to the component (this could be implemented as a mixin if multiple components need it)
1. maybe you could add the data string as a query param to the next route, like `next({ path: to.path, query: { token: r.data } })`",1533750584.0
lolrogii,"You can pass props to route component. Add `{props: true}` to your route, example:

    {
        path: '/login',
        name: 'auth.login',
        component: () => import('./../views/auth/Login'),
        props: true,
        meta: {auth: false, layout: 'blank'},
    },

Make sure to register the prop in your component:

    <template>
        <h1>Login</h1>
    </template>
    
    <script>
        export default {
            name: 'view-auth-login',
            props: {
                redirect: {
                    type: String,
                    required: false,
                    default: '/'
                }
            }
        }
    </script>

It will then let you pass props when pushing a route through $router.push() or next().

    next({name: 'auth.login', params: {redirect: to.path}});",1533769626.0
SpoilerAlertsAhead,"I wrestled with the all day today. I ended up putting everything I needed in the path, so I could authenticate, then redirect based on the query string.",1533769682.0
binarytide,maybe try  `watch`,1533757978.0
urmyheartBeatStopR,"Weird... i saw the watch solution.

I've encountered this problem before and i did a mutate instead of an action and that works for me. The reasoning for me at least was the plugin was not reactive.",1533796794.0
archivedsofa,"> Does anybody know why this happens?

Because that's how Vue's reactivity works.

If you add new properties to the component data after the component has been instantiated those will not be reactive. So either add those properties with `Vue.set()` or create them beforehand with a `null` value.

https://vuejs.org/v2/guide/reactivity.html",1533823423.0
inhalingsounds,"Can't you split the component into smaller, relatively independent parts where props and $emit would kick in as necessary?",1533740298.0
nzshu,Have you ever seen VUE PORTALS: [https://github.com/LinusBorg/portal-vue](https://github.com/LinusBorg/portal-vue),1533785763.0
platoprincipal,"Yeah you can keep the two way functionality just by using props and events.

But I feel yeah, sometimes it’s better to just keep things in 1 component though for understanding.",1533740565.0
majormunky,"I think, possibly, that it might be that your root Vue instance is missing either a template or render.  Try adding: render: h => h(Test) to your vm instance and see if that helps.  (Note, im a vue noob, I may be offbase here... =)",1533762561.0
Love4rty,"The following line has a typo that would prevent it from working:

Vue.component('test', Tree);

It should be:

Vue.component('test', Test);
",1533731231.0
earthboundkid,"No, because having the HTML on the page doesn't actually help with rendering. It all gets dropped and rerendered in client side JS, so they don't emit it in the first place. If you want to output static HTML, Vue is the wrong tool to use.",1533760765.0
Maxtream,"My guess would be:.   
1) don't use Vue router.  
2) use iframe that you place into modal and load Vue app under the same domain name",1533730789.0
Heyokalol,"So op has had problems with Angular and bad managers, gotcha.",1533721058.0
thiswasprobablyatust,In my experience trying to be agnostic more than doubles development time instead of just getting it done in Vue/React. It really doesn't matter if it takes a week down the line to upgrade if it saves you a month making the thing in the first place.,1533728849.0
Lelectrolux,"This is based on several unsaid assumptions :

1. **You will do several projects**  
1 project/product companies are out, I guess. Why bother if you don't expect to ever reuse your code in another project.
2. **You will switch framework on some projects.**  
Well, from my window, most companies double down on one stack and don't really want to manage 7 techs across their stack, even less these days where you can do most things in any of the big three.
3. **You will want to reuse your code from project to project.**  
How much of a codebase is transferable and worth transfering between projects ? This assume most of your projects have the same needs. Will I ever need my huge and complex calendar planner on the next project ?

And you definitely have some downsides/points against it :

1. Less idiomatic code which means harder to grasp for your juniors.
2. You loose a bit of the framework powers as some particularities that would help you (scoped slots?) are not available in the 2 other.
3. It is based on an hypothetic framework change that might never happen. Why loose a month now if you don't even know it will be usefull. YAGNI should be a thing in JS world too.
4. How long would the conversion be anyway ? Is it reasonable to pay the price before it is needed ?
5. I also don't like the ""do it for everything everywhere"" that the article seems to imply. If I am going to use 100% of my vuejs codebase in react latter, it might be a good idea, but what if I spend two extra month on making it agnostic, but only reuse a quarter of the code ? Even if coding it in react from scratch would take a full month, well you wasted one month too much in the first place.

It's seems too tailored to your own expercience to be usefull general advice, even more when some other red flags where raised, principally project management.

Why have that many stacks to begin with ? rationalize your tech and workforce skills, and evaluate the impact of a tech upgrade upfront, not after doing it...Bad planning, bad hiring, and bad research explains those 3 examples you gave, which in my book are part of project management.",1533737863.0
inocencz,Looks like author had problem with angular and it's versioning madness. Thats not a valid argument in case of vue and react.,1533769327.0
majorius,"yeah, cool, oh wait, we need to support ie10 ...",1533720094.0
thiswasprobablyatust,"So worry about installing, understanding, and maintaining all the shit in this article, or...use Nuxt? Because I'd think Nuxt is the 'easiest' way to do this.

I'm also not sure how pre-rendering is improving a Vue.js application, it helps with SEO and _sometimes_ with first-render UX.",1533716100.0
fyzbo,Gotta say **VENM** is much cooler than **MEVN**.,1533733364.0
didinj,"good idea, but I don't see someone else write tutorial using \`VENM\` term, they use \`MEVN\` too.",1533736464.0
lan__solo,"Oh god, another acronym is born.",1533758354.0
inocencz,Yeah. Long time ago I thought that MEVN is ugly and stupid so I figured out that there is much cooler VENoM. Wanted to post it here but didnt....,1533767208.0
systematical,"You know you can post code into here, right?

    let there = 'be code';                

You'll probably get more help that way. Images aren't good for code samples.",1533699579.0
jam_pod_,"I feel like you may not be structuring your component right?  `calculateAndDisplayRoute` should be a method, and then you would do something like `this.distance = response.routes[0].legs[0].distance.value` with the result. From what I can see it looks like instead you're maybe adding these functions outside the component, then trying to update the component from them? Which wouldn't work",1533705526.0
sonic_molson,sounds like it may be the place for a computed variable,1533695997.0
Love4rty,Did you set the key attribute on the outer v-for loops? Can you post a pseudo version of the loops with the inner v-if? We need to figure out why/how the two parameters become undefined,1533703323.0
imGnarly,"This is very nice, just a question: why not do it with Css?",1533693896.0
vladfaust,Nice!,1533681662.0
denis_invader,"Why do you use event bust, not just `window.addEventListener('resize', () => {...})`?",1533727704.0
Nycran,"Is it more or less the same thing as:
https://github.com/apertureless/vue-breakpoints
?",1533731733.0
earthboundkid,"> Have you ever wanted to execute a function in your Vue application just by holding a button down for a few seconds?

https://twitter.com/earthboundkid/status/1026581794609659904",1533680552.0
acklavidian,"Check in to:
[`updated`](https://vuejs.org/v2/api/#updated)
[`beforeRouteUpdate`](https://router.vuejs.org/guide/advanced/navigation-guards.html#in-component-guards)",1533656676.0
SandFriend,The in-component route guard `beforeRouteUpdate` will run if the route path changes but the rendered component remains the same - e.g. if a path or query parameter changes. That might work for you. ,1533656782.0
boing_boing_splat,"Both of these should be fine for you yep, just make sure to call next() :)",1533658134.0
gabriel-et-al,"These boolean variables:

    this.isShort
    this.isFair
    this.isExcellent
    this.isInitial

Oonly one of them is true at a time, and their values can be infered by the content of `passwordStregnth`, so no need to set them everytime, you can just create boolean computed properties that check the content of `passwordStregnth`. Same for `passValid`. This way you don't repeat yourself so much.

Also... This:

    if (x <= 1) {
        // ...
    } else if (x > 1 && x < 6) {
        // ...
    } else if (x >= 6 && x < 10) {
        // ...
    } else if (x >= 10) {
        // ...
    }

Can be shortened to (assuming `x` in integer):

    if (x <= 1) {
        // ...
    } else if (x < 6) {
        // ...
    } else if (x < 10) {
        // ...
    } else {
        // ...
    }

If the condition `x < 1` is false, you don't need to test `x >= 1`, because it's obviously true. (And so on)",1533650291.0
DiademBedfordshire,"What you have is fine, but here is my take on this.

https://codepen.io/anon/pen/LBgYPG",1533649320.0
archivedsofa,"Just to add some more info on password validation, this is a really great library by Dropbox:

https://github.com/dropbox/zxcvbn",1533667244.0
Vinballe,"When I create a component I try to think about the state and data first. Like how do I represent component state with the data object as simple as possible? In this case the only state you need is the password values and if they're visible in clear text or not.  


Password strength checker and form validation is something you can use computed properties for or simple methods.  
Another advice is to use pure functions when possible. They are much easier to test and reuse.  


Quick example: [https://codepen.io/anon/pen/XBxaeg](https://codepen.io/anon/pen/XBxaeg)",1533684073.0
jemminger,"Yo dawg, I heard you like virtual DOMS",1533664909.0
foehammer23,1. Why?,1533645335.0
VIM_GT_EMACS,can we... not just have this sub be a place where we post shitty articles? what's this article have that any of the other vuex ones posted here dont? ,1533596247.0
zevdg,"I'd recommend that you export ServiceVar with es6 exports in services.js and then import it with es6 imports in the script section of BasicNav.vue.

Here's a good intro article
  https://medium.com/craft-academy/es6-modules-imports-and-exports-1e5b552ddca9

Edit: switched to a simpler article",1533577522.0
cyrusol,"I solved it through debugging.

Turns out that if the router's `base` property is undefined it doesn't just fall back to `""/""` - as documented - but it checks for the `<base ...>` tag and tries to strip the URL scheme and host and use the remainder at base.

But if `<base ...>` has a protocol-relative URL this does not work, it still includes the `//hostname`.

    function normalizeBase (base) {
      if (!base) {
        if (inBrowser) {
          // respect <base> tag
          var baseEl = document.querySelector('base');
          base = (baseEl && baseEl.getAttribute('href')) || '/';
          // strip full URL origin
          base = base.replace(/^https?:\/\/[^\/]+/, '');
        } else {
          base = '/';
        }
      }
      // make sure there's the starting slash
      if (base.charAt(0) !== '/') {
        base = '/' + base;
      }
      // remove trailing slash
      return base.replace(/\/$/, '')
    }


I could probably provide a fix on GitHub. But I'm unsure whether that would be the best approach because as I interpret the HTML5 spec, `<base>` is expecting an absolute URL for its `href` and absolute URLs are defined including the scheme.",1533576967.0
BrownMeerkat,"Try this.$router.push('/foo')

You don't have to import the router in every file/component if it's in the main.js",1533570714.0
orangereddit,Add vue-animate-scroll to your project: [https://www.npmjs.com/package/vue-animate-scroll](https://www.npmjs.com/package/vue-animate-scroll),1533577352.0
53rd-and-3rd,"That's not how Vue works. Props go down, events go up. That's how it is supposed to work and that's why it is called a 'one way data flow'.  
You can use a state manager to handle state mutation on a global level so that you're not forced to pass props around your components. Otherwise you make the children emit an event to the parent so that the parent can react to it and do whatever it wants (like updating the prop).

To avoid a lot of bolierplate, Vue provides syntactical sugar for that: prop.sync   
[https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier)",1533545658.0
tribak,"Other than the prop.sync proposal, I suggest you to read about using v-model and two way data binding.  
There are times when you don't want to ""automatically"" send the data back to the parent, in those cases you can do the emit() when you processed the input.

As an example, I made a component that parses E164 valid phone number string like ""+1234567890"", adds values based on that to multiple child inputs, then based on the inner data structure changes, it recreates the E164 format and then sends it back to the parent.

This is an easy way to get used to this pattern: [https://alligator.io/vuejs/add-v-model-support/](https://alligator.io/vuejs/add-v-model-support/)",1533596593.0
shaftshot,"I cannot agree more with this article. As a newer frontend dev, (almost 2ish years now) Vue just feels like an additional feature set on top of the core languages of the web. Add Nuxt to the mix, and it's honestly insane how much more natural it feels. I tried Angular/React initially, and it was so insanely overwhelming.",1533566195.0
infamoustrey,Good article. Misspelled fond.,1533584364.0
ibra5him,"**What's the real purpose of root instance (var app = new Vue)?**

It is where the vue application starts, it is needed to use vue and its components.

**Why don't just use the component itself to get the data?**

You can do that, there are different approaches, you can do it the way that suit you and your needs best.

**Should I have 3 root instances for each or I only need one root instance per app for all components?**

Vue apps should have one root instance, and everything will work/run through that instance. You make components and you can use that as you like.

**Part 2**

I am not really an expert in this area, but, it is about how use structure your data and how you implement the components and how they interact with each other.

**Why don't just use the component itself to render the list? Is there any differences?**

Using components you simplify the code and make it more readable and understandable and also you apply separation of concerns.

**Can someone give me a sample of CRUD app like ToDoApp using VueJS (best practice one if possible)?**

I am pretty sure that there are a lot of these, search in google or github and you will see a lot of them.",1533484380.0
bring_the_thunder,"RE: Number 2 -

This is exactly what Vuex is for.  Pass data from parent to child with props, child to parent with $emit and v-on, and handle everything else with Vuex mutations.  In a lot of cases, Vuex can be a better option than $emit, too.

You don't *need* to know Vuex to get the gist of Vue, but it's an important part of the ecosystem.",1533485870.0
ISNT_A_NOVELTY,"> If I have 2 components ToDoItem and ToDoNew; I get the data from JSON in ToDoItem, let's call it ""todos"" and if I want to add new item via ToDoNew, how can I pass the new todo object to ""todos"" data in the ToDoItem component? Is it using $emit?

Consider a different design: 3 components - ToDoList, ToDoItem, and ToDoEditor. ToDoList has ownership of the button for adding a new item. Because the list already has the collection of data, it can easily add another one. The list then renders a ToDoEditor instead of a ToDoItem for the new item.",1533489783.0
kirbyfan64sos,">1. What's the real purpose of root instance (var app = new Vue)? I saw in the Vue's guide page they use it to obtain data and passing it to a component, why don't just use the component itself to get the data? Also if I had 3 pages, e.g.: ToDo List, Products and Profile, should I have 3 root instances for each or I only need one root instance per app for all components?

The root instance basically creates, manages, and renders all of the components inside it. Of course, it can also be used as a data store, which is what that example was doing. 

In general, you'll have one per page. Sometimes, you might use another one to use as a separate ""event bus"" of sorts, but you're probably not going to really care about that!

>2. If I have 2 components ToDoItem and ToDoNew; I get the data from JSON in ToDoItem, let's call it ""todos"" and if I want to add new item via ToDoNew, how can I pass the new todo object to  ""todos"" data in the ToDoItem component? Is it using $emit?

Yup, `$emit` is the way to pass data up the tree. 

>3. In the Vue guide, they using component to iterate through the array data given from parent component. Why don't just use the component itself to render the list? Is there any differences?

I'm not sure which part exactly you're talking about? It may have been an example on passing arrays and other data structures between components, but it's hard to tell without a precise example..

>4. Can someone give me a sample of CRUD app like ToDoApp using VueJS (best practice one if possible)? The one in Vue website doesn't use components, so it's not helping much.

It's kind of hard, just because there are a bunch of different ways to approach a to-do list...

That being said, I personally like: https://scotch.io/tutorials/build-a-to-do-app-with-vue-js-2",1533492506.0
DAWTSF,I just want to say Vue 3's CLI is fucking amazing.,1533483159.0
archivedsofa,"> When creating a reusable component, emitting events on key interactions is cleaner than just setting entry points for callback functions. Again, this is simply an opinion of mine.

It's common programming wisdom that decoupled or loosely coupled code is generally better than coupled code.",1533440767.0
kirbyfan64sos,">What is all of this VueJs CLI stuff? Why can't I just include vueJs with <script> tags?

Using the CLI nets you some advantages over script tags:

- You can bundle all your dependencies into a single .js file. 
- You can use single-file components, which is basically a much nicer way of definining Vue components. 
- You're able to easily lock your Vue version. 

>What is a component? Actions? Mutations? Modules?

A component is basically you defining what looks like an HTML element. For instance, I can definite a component named `PostList` and insert it into my HTML via something like `<post-list something=""123"">stuff</post-list>`. Vue will automatically insert the PostList's HTML inside.

The other stuff is part of Vuex, a state management library that you probably aren't going to need for a long time. 

>Are there any good resources out there for getting started making vueJS web apps? I've seen a lot of guides that make components (I think??), but they never discuss workflow for making larger scale projects with hundreds of pages.

I'd say the official documentation is a great place to start. It's hard to know how big exactly your project is...but realistically, it's most likely going to be the exact same guidelines, just on a bigger scale. 

>Is there anybody out there who also came from Vanilla javascript and jQuery that understands my pain and has advice? useful tips and tricks?

*raises hand* I used to make fun of web frameworks for a really long time. Honestly, Vue is a great place to start!! 

**EDIT:** Thanks for the gold!!",1533393639.0
thinkadrian,"Class-based JS and bundlers have existed since at least 2010, when NodeJS and serverJS started making their rounds.

“just adding script.js to head” became less and less common when developers started concatenating and minifying all their scripts into one to have less concurrent downloads in the browser.

In the end, you’re doing the same as before. The bundler (be it webpack or grunt or gulp), takes all your files and turns them into one or more files that are added to your index.html. The difference is that you’re splitting your files into smaller modules. You’ll learn to appreciate it because you won’t have thousands of lines in each file anymore.

PHP is a script-language, but you missed when JS started to become proper OO.

*Edit: damn it I was sloppy when typing this. Fixed some typos.*",1533393963.0
ScruffyVonScruff,"Same boat. Wish I could help. CLI took over when I wasn’t looking, with brute-force JS + CSS being replaced with SASS, gulp, bower, and a whole slew of other tools with custom syntax for “easier” maintenance. The CLI squirts out browser-friendly CSS, minifys and packs the payload. 

It’s kind of amazing but it’s exactly like going back to your high school 4 years later and *you can’t understand a goddam thing people are saying*.

Jquery is still valid but is decidedly out of fashion, for some reason. 

Frameworks took over, possibly for the better.

It’s daunting tbh.",1533393025.0
sebbasttian,"I think the missing key here is the concept of [single-page applications (SPA)](https://en.wikipedia.org/wiki/Single-page_application) and its natural evolution [progressive web applications (PWA)](https://en.wikipedia.org/wiki/Progressive_Web_Apps). The idea behind this new libraries/frameworks is for you to be able to ""build"" high performance web pages/sites, even if they are complex in structure. And for that they build on the idea of [Web Components](https://en.wikipedia.org/wiki/Web_Components), each library/framework in it's own way.

For example, instead of using jQuery to read or change the value or content of an html element (like `<h1>`), you create you own element, with its own logic, and its own style, and you name it whatever you want (like `<cool-title-and-not-that-boring-header-1>`), and you will always have access to its properties and be able to read or change them, but in a more efficient and secure way.

And where do you write this custom elements? Inside `modules`, that you can import wherever you need to import them. But this have a cost, if you include several modules each with several dependencies, the page will try to make hundred of requests, and that's not good at all. To avoid that, we now have `bundles`. So before you deploy your site, you bundle all of its core libraries, and dependencies, and custom modules, in just a few files, and in the process you take the chance to minify them. (More about modules [here](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/) and [here](https://developers.google.com/web/fundamentals/primers/modules)).

But creating a component/module can be a little bit cumbersome, there is always to much boilerplate to complete, just to start. So in order to avoid that, each library/framework has its own cli program that allows you to do just that, but easily. And they also give you the tools to bundle it, and test it. 

So...

* **What is a component?** Your own custom html element.
* **What is a module?** The building blocks of you component (sort of speak).
* **Why can't you just include $library with script tags?** You can, but  now we know better ways to deploy our sites.
* **What is all this CLI stuff?** Tooling for create, test and build your bundles.

Actions and mutations are stuff of another concept, that is ""The Store"", a place where you save the state of you webapp, in a robust way. The best way to understand what it does and why, for me is [this course about Redux in egghead](https://egghead.io/lessons/react-redux-the-single-immutable-state-tree) (in VueJS we use Vuex instead of Redux, but the core concepts are the same).

--- 

Now... 

> Are there any good resources out there for getting started making vueJS web apps? I've seen a lot of guides that make components (I think??), **but they never discuss workflow for making larger scale projects with hundreds of pages**.

For that you want to take a look at [Nuxt](https://nuxtjs.org/), but this is where the different libraries/frameworks shine in a very different way. I can argue that if you want to create a really large project with literally hundreds of pages and a lot of complexity, The Vue Environment may not be the best tool. For really complicated and large project my personal opinion is that Angular (v2+) is better. This may change in the future, The Vue Environment is growing fast and strong. But it also can be argued that Netflix is a large scale and complicated project and they use React, so... take this with a grain of salt.

---

btw, since you remarked that you have a strong backgound on jquery, I shall warn you: you never ever ever want to mix jquery with this technologies, if you are still trying to do it then you didn't understand yet what is that they are for.

Hope this helps!",1533400996.0
fablus,"Don’t overthink it; I also built frontends using vanilla JS and jQuery before, and VueJS makes essentially everything easier through structure and reusability.

I would recommend taking this course on Udemy, it explains everything from the basics to how to structure more advanced applications:
https://www.udemy.com/vuejs-2-the-complete-guide

I’ve heard lots of good things about Vue CLI 3, but as it’s still in beta it can be considered as optional if you intend to build production-level applications.",1533393721.0
humanculture,"OP, how do you feel about all of this?",1533395089.0
FinnxJake,"I've read some medium article that I think will story-tell you what happened to javascript ecosystem. This will introduce you to modern JS in a not boring way.

[Modern JavaScript Explained For Dinosaurs](https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70) and [How it feels to learn JavaScript in 2016](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f)",1533398250.0
firemouth55,"I think that including Vue with script tags is a great way to get your feet wet. The Vue CLI (or any CLI, for that matter) is really just there to help automate the process of getting a project started. Yes, there is magic involved... but there are a lot of resources available too. 

My default for building APIs has been Express... so I was super pumped when I realized there was a Vue/Express option through the CLI. There are tons of options out there... and even more middleware. 

I have heard it said, however, that today’s current M.O. of JavaScript programming is producing more and more developers who can’t code as well as their predecessors. I’m not sure how true that is... but what I can say is, why reinvent the wheel on every project? If someone else has solved a problem that you are experiencing, why pound your head against the wall trying to solve it?",1533401985.0
andreud,"I agree the landascape has changed a lot, the cli and budler stuff is not mandatory to dig in vuejs, you can start including it as a script tag just as you did with jquery or just alongside it, I suggest you start that way with vue, here is a good tutorial; [https://laracasts.com/series/learn-vue-2-step-by-step](https://laracasts.com/series/learn-vue-2-step-by-step)

then you can start learnig about javascript moduels here [https://laracasts.com/series/es6-cliffsnotes](https://laracasts.com/series/es6-cliffsnotes) (specifically the modules lesson) and webpack  by reading the webpack documentation [https://webpack.js.org/](https://webpack.js.org/) and view some basic webpack tutorials on youtube,

after that you can start using the vue cli actually knowing what it does for you

Edit; im asuming you know the bare basiscs of nodejs an npm for that second paragraph",1533397857.0
wial,"I'm trying to make a similar transition so maybe this will be helpful:

What seems to be missing in your take on thigs is node.js and its package manager npm, which emerged as part of the development of chromium and the Chrome browser. The emergence of node is to my mind behind a lot of the new stuff, and it's already second nature to the new generation of developers so they forget to mention it. Wrap your head around that, and how it straddles the server and client sides, and how it makes dependency management and incorporation of ecosystem components much easier, and a lot will start making sense.  It's revolutionary the way Maven was for Java, if that's any help, defining project structure and managing dependencies at the same time, but a lot more than that too.

You can include Vue.js as a script tag, but the whole point of it is to package features into components, nicely saved in single files including the html-like template, the javascript, and the css, stored in a standard place in the folder hierarchy.  And you can limit the scope of the css, so everything you need for the appearance and function of the component is all in one place.

Then also you can include a package like vuetify (or many others) that follows the Google Material Design rules for UI appearance, giving your whole app a consistent look and feel.

More importantly, Angular started a revolution in two way data binding that made single page applications more feasible and attractive. Change the data on one screen and the other screens pick it up without a lot of effort on the part of the developer, and with the right libraries keeping watch, that can be synced with the backend data too, much more easily than in the past. React and Vue (and their ecosystem components such as Redux) took that to another level in several ways.  On the one hand they enforce immutability -- that is you never change data, you copy it, change the copy and return the copy, keeping the old one for posterity and/or undoing -- and also, relatedly, their data variables are ""reactive"". That can be a hard concept to understand, but as a start you can think of the problem it solves:  it's very hard conceptually for humans to understand independent changes to objects on a timeline. Reactive variables can have methods that make sorting all that out much less fussy and easier to comprehend.  Evan Yu the creator of Vue can be very clear on the subject so search for his talks on youtube. That kind of problem occurs all the time, e.g. in facebook tracking which chat requests have been seen when, via multiple screens (and that specific problem is a lot of what prompted all this).

Also important to take in, React/Vue use a ""virtual dom"" which is a vast improvement, but which also means a complete break with JQuery.  JQuery functions change the dom directly, and thus are very inefficient, requiring a lot more work behind the scenes than necessary.  React/Vue keep a lightweight version of the dom, a blueprint rather than a house, if you will, and when a change happens they compare the old virtual dom with the new one, and then surgically only change the part of the actual dom that really has to change.  But this means if you have JQuery in the mix, it will change the actual dom and screw up React/Vue's tracking of state.  There's a workaround, you can tell React not to touch certain dom elements, e.g. the table tag used as a landing zone for DataTables, but you'll find some very nice grid libraries that work with react and vue so that might not be necessary.

Another amazing new technology by the way is GraphQL, which completely replaces the way we use multiple REST controllers with multiple endpoints to deliver data via Ajax.  You design a single controller on the server side with a single endpoint (url) that can deliver the whole menu of data options (presumably at a given security level) and then use GraphQL to make very specific lightweight requests of the endpoint, analogous to SQL queries. Cool beans!!

I hope this helps, but the tl;dr: is: install node and npm, and try out some tutorials if you haven't already.  One word of warning as of just this week: recent changes to Mac OS may have broken certain parts of npm and they haven't been fixed yet, at least as far as my computer is concerned, and some frantic online forum discussions.  I found I had to go back to npm 5.6 (per a forum comment) to get react to even install a new project, and had similar problems with the amazing new Vue UI webbased project manager. If you get a ""cb() never called!"" error that might be it.  Figuring all that out I found NVM to be a great tool too btw.",1533408746.0
Radinax,Check net ninja YouTube videos about Vue. ,1533416890.0
RedFing,"Just want to add a thing about the scaling you mentioned: When I started with React, I made really dumb components. Changing them was a bit hard, but if you learn how to properly make components, you can use them on small or big projects. It doesn't care about scaling. Composition over inheritance and isolation over coupling is very important to learn. I am now a vuejs developer and seeing from what background you came, it seems like a good choice to pursue vue. It will feel more natural to you and easier to master than react. but keep in mind that react is more popular and has at least 10x more open positions. ",1533403403.0
chrissilich,"If you want to try a SPA framework, you picked the right one. Vue is nice, and is in pretty plain old JS. Start with the script tag, not the cli. Learn one thing at a time, i.e. not vue AND all the cli magic.   
  
Jquery is fine, but everything it offered is now in vanilla js, with as short or close to as short syntax. Classlist, forEach, queryselector[all] are the big ones I had to switch over before dropping jquery. Oh, and Ajax and animation. Get axios for Ajax and tweenmax for animation.  
  
You’ll adapt just fine if you don’t try to dive into the deep end by picking up 20 different modern trendy time saving things at once. ",1533404619.0
mayhempk1,I recommend Laracasts for learning Vue: https://laracasts.com/series/learn-vue-2-step-by-step,1533415165.0
WhatYouThinkinAbout,"My suggestion is to look at some job boards and get a feel for where you want to go.  If this is a side hobby then Vue is fine. 

Vue is a good framework and probably the easiest to learn but it also ranks way behind in popularity when compared to React and even the now de-throwned Angular 2+.   Vue appears to be increasing in popularity but I doubt it will ever get close to React.  Likely something will replace React before Vue even gets close. 

If you are going to put all the effort into learning a JS framework, you may want to reconsider React. It is more complicated but similar to Vue conceptually.   The learning curve is a bit steeper but end of the day you'll have put the effort into something more likely to get a job.  That said, you could do Vue first for easier learning then move to React and know both.  Really depends on how much time/effort you have.

My 2 cents.

",1533417909.0
midnightFreddie,"A good start: https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70

In the macro sense, the current favored paradigm is a framework that allows testable programmatic components that compile/transpile into quick-loading minified versioned javascript applications. Whereas the old paradigm was templated content, the current is ""web components"" which might seem superficially like templates--and indeed each includes a template of some sort--but are themselves potentially conditional, repeatable, extendable, and includable in various places.

VueJS seems to be the current favorite of those who want to program web components but not be required to buy in to the opinionated conventions of frameworks like Angular (which is distinct from AngularJS) or React, so it's probably quite a good framework for you to begin your transition from old school to web components.

Things are further complicated (as compared to the jQuery days) by the expectation of task runners, minification, routing in SPAs, and even split server/client processing and/or pregeneration in the same application/repo.",1533420572.0
CommandLionInterface,"You can include Vue as a script tag, and that’s a great way to use it, but you’re missing out on the absolutely incredible repository of libraries on NPM. (Maybe there’s a way to add npm scripts via script tag - I don’t know, but most libraries assume you’re importing them). 


Just my $0.02",1533449397.0
Arkaad,"> What is a component? Actions? Mutations? Modules? 

You could read the documentation. It doesn't take that long.",1533396363.0
Kindrik76,"Also, we rarely use multiple pages nowadays, there's a thing called a spa. Single page application. You use routes to load components into a base container, so the user only ever sees one page, jist changing the data that is loaded Into it.",1533393864.0
N3KIO,"***LET ME EXPLAIN***
------------------------------------

This is what happened

* https://github.com/kamranahmedse/developer-roadmap

Did you get it?

as for Vuejs, btw im using it myself but, nuxtjs with SSR (server side rendering)

* https://nuxtjs.org

as for Guide, not much to it, vue is pretty straight forward and the documentation is excellent.

* https://github.com/vuejs/awesome-vue

* https://vuejs.org/v2/guide/

* https://vuejs.org/v2/cookbook/index.html

* https://nuxtjs.org/guide

* https://scotch.io/tutorials?hFR%5Bcategory%5D%5B0%5D=Tutorials&dFR%5B_tags%5D%5B0%5D=vue

* https://vuejsexamples.com/",1533415034.0
nonamemeknow,"Change v-model=""count_loans"" to v-model.number=""count_loans"". 


""This is often useful, because even with type=""number"", the value of HTML input elements always returns a string.""

https://vuejs.org/v2/guide/forms.html#number",1533388844.0
sv-2,"Take a look at https://github.com/slanatech/vue-monorepo-boilerplate
",1533403561.0
randomNext,"Maybe you should consider just building one universal app instead of a webapp + a single page app?

It sounds like duplicate work to maintain 2 client apps.

Have a look at nuxtjs, it comes with batteries included SSR and a simple folder convention for routing. ",1533390441.0
Love4rty,"If you have the time, I recommend that you try a small weekend project from scratch and using the CLI. See what you learn. In my case, I got a lot from both experiences early on and ultimately helped round up my toolset. The team did a great job with the CLI and I use it on many projects, but I also like to understand what’s behind the curtain. ",1533525103.0
vue-rocks,"It depends, how well do you know webpack? (or some other bundler)

If you don’t know it that well, maybe use the CLI. If you don’t want something too complicated try the webpack-simple template, it’s a good way to learn. ",1533327044.0
Samuell1,"You dont lose control with vue cli, its more simplier to maintain, upgrade project then upgrading your full custom solution.

Can i know what specific things about you are afraid of?",1533367307.0
osama7901,"When you use VUE CLI 3, you still have full control on Webpack. you can customize it (add loaders, Webpack plugins,... etc). you can see the output Webpack configs with `vue inspect`",1537652112.0
DOG-ZILLA,"Looks incredible! Not tried it in depth, but at first glance it seems really slick.

Thanks for open sourcing it and sharing with us.",1533328700.0
f12_amish,"Thank you so much. Working on a scheduler website that needs a calendar.  Are you looking for pull requests or any help?

On mobile I'm unable to use the calendar in certain ways fyi",1533330280.0
toadkicker,Awesome! I hate my current solution and I’m going to pull this in a d contribute.,1533382450.0
danthedangerman,"Nice, thanks! ",1533387568.0
workandfocus,"Hey seems nice! I could definitely use it. It seems like there's only a week view and day view on the demo, not a month view like you've suggested! A month view is what I definitely need.",1533330779.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/webdev] [Events Calendar for VueJS](https://www.reddit.com/r/webdev/comments/94j0is/events_calendar_for_vuejs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1533388439.0
jemminger,Check out https://github.com/davestewart/vuex-pathify - it basically does this for you,1533309694.0
bmarkovic,"I might be missing the obvious, but you can emulate slow 3g and observe per file load times in the network tab of Chrome dev tools and execution in performance tab (likewise in Firefox and other browsers).

If you are using Vue CLI there is a bundle analyzer included that you can use to look at sizes of bundle files. ",1533296672.0
LloydAtkinson,"The nearest is Vuex and/or mixins and/or plain .js file imports. I would advise against creating a Vue plugin.

If you need prerendering maybe look at Nuxt.",1533298630.0
brainbag,"I don't know about the answer to your particular question but Vue has > 2.2, you can use the newish `performance` setting, which allows you to have a really nice analysis with Chrome's performance tab and possibly others. Maybe this can help you track it down more easily.

https://vuejs.org/v2/api/#performance",1533325663.0
sammysounder,"As a guy looking at transforming a massove Angular 1 stack to something else.... Im looking at this same question now.  I dont see something akin in Vue.

Services in Vue are simply imported objects.  They may or may not be used with Vuex, depending on the situation.   

In short, grab your returned objext from your Angular service, remove the angular specific code, move it to an exportable object, and import it to your Vue component 

Done.",1533358016.0
thiswasprobablyatust,"This should be a `watch`, not a computed. You want to watch `valueCache` and update it on certain conditions, at least from the example code you have here all your `return` statements from your computed are meaningless.",1533299633.0
aesamattki,I don't think this is actually memoized. What is getValue?,1533293786.0
brainbag,"There could be more to the code that we don't see in the example, but maybe you don't know that computed properties are already cached and reactive based on their dependencies. If the dependencies don't change, you'll get the same result on repeat calls without rerunning the code. You can test this easily with a `console.log`.

https://vuejs.org/v2/guide/computed.html#Computed-Caching-vs-Methods

Have you explored using Vue's automatic caching already?",1533305854.0
onig90,Don't see how using parcel with Vue would be different than using it with any other library/framework. +1 for parcel though,1533281678.0
prawnsalad,"""zero configuration"" ... then continues to use configuration.

I see this time and time again with Parcel related blogs and tutorials. Almost any application that isn't a quick example demo will end up using config, so lets just stop calling it ""zero configuration"".",1533294815.0
Lelectrolux,Either [css modules](https://vue-loader.vuejs.org/guide/css-modules.html) or [css variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables). Or a bit of both.,1533250800.0
nothingduploading,You can import a base stylesheet with body.night and body.day.,1533250552.0
TheBrillo,"We have been looking into something like this as well.  More so, we are looking for changes of the parent's state to be reflected in child components (think alert level). 

There isn't a way through sass variables to implement anything like this by itself. The reason for this is that Sass is done entirely at build time, leaving you with CSS files containing only ""hard coded"" values. 

If you are willing to drop support for IE10/11, then CSS Variables make this trivial. Simply use the same variables throughout the components and then set them in their parent's style. Only child components inherit values set in these variables so you can have the same component multiple times on the page using different values for that variable. 

If you need ie10/11 support, I recommend having a value in your data model that represents the theme being used and use that to dynamically change the class on the components utilizing Dynamic Class Bindings. Each of those classes can then utilize SASS variables to making development easier.  Utilize imports and style scoping to limit how much you repeat yourself.  ",1533310339.0
jaesung2061,"I remember doing something like this:

    @import 'bootstrap';
    
    #app {
        @import 'theme-1';
    }
    
    #other-app {
        @import 'theme-2';
    }

Not sure if this will work in your case but you should try it?",1533314124.0
brainbag,"I'm not sure that an example is necessary, as the difference between views and components if is very simple.

1. Any components that a route points to goes in `/views`.
2. All other components are in `/components`.

Under the views folder you can organize it however you want. We have a rather large site and planned on breaking it up into folders, but even with a lot of views just giving the views good names (like `EditProject.vue`) have kept it clear enough that we haven't had to bother with directories.

Related to this structure, I highly recommend that you don't break parts of views out into components until you're sure you need to reuse it in other views/components. The reason for this is that you can really rapidly refactor/redesign pages when all of the functionality is in one place, and you don't get stuck in an props/events API that you thought was useful a while back. This is going to seem weird if you're coming from React, but you'll see an improvement in productivity really quickly.

The only exception to this rule is forms - they almost always get reused (like `NewProject` and `EditProject`), and they share enough common behavior that you can make a `FormMixin` and simplify a lot of the effort (like validations).",1533242981.0
platoprincipal,Depends I typically just use it in the form on the component if I only need it there. But if the inputs need to be stored in the state for use in other components than it should be pushed to the state.,1533235787.0
syropian,"It's up to you, but if you want to go the Vuex route, there's some good documentation in the official docs: https://vuex.vuejs.org/guide/forms.html",1533250008.0
dave__stewart,Definitely the component. Only when validated should you commit to Vuex (if you need to),1533600152.0
Lelectrolux,"I'm sorry to be that guy, but I'm not sure it brings anything over the [official docs](https://vuejs.org/v2/guide/components-slots.html#ad) tbh.

Tutos for vuejs should focus on weak points in the docs, like non spa use (patterns to use with another backend than nodejs but server rendered), big project setup (how does the bricks are setup together), renderless components for a gmaps integration, any stuff where info is hard to find...

Would you have made a video tutorial, at least the medium wouldn't be the same, and some people could prefer video over text. But I can't find a reason to go to your tuto instead of the docs on this case.

Usually try to find pain points and add value to what exists by answering those. Sadly for you the vuejs doc is outstanding, so there is no low hanging fruit ...",1533253103.0
vuehero,Would love some feedback on my little lesson!,1533229899.0
kreapz,Great lesson and easy to understand! Would love to see more off these!,1533242429.0
thiswasprobablyatust,Fuck off with your thinly veiled advertising. What a garbage post. Try solving a problem people actually have then you won't have to resort to shit like this.,1533231004.0
paul_h,Can someone TL;DR? Why am I not managing my Vue.js based project/application from the command line?,1533231915.0
Kriem,How do I install this?,1533573706.0
jzelez,Maybe have a look at GraphQL?,1533218426.0
workandfocus,"1. Nothing it just sets ESLint config to match AirBNB's standards
1. https://www.npmjs.com/package/eslint-config-airbnb-base
1. It confiugures ESLint to match the [Vue Style Guide](https://vuejs.org/v2/style-guide/) based on priority, so if you do `plugin:vue/recommended` it lints any rule from A-C
1. Those are two different standards so just pick the one you like, I use `standard` over `airbnb` ",1533214752.0
thiswasprobablyatust,"IMO there's only so many usecases functional components make sense for until `components` functionality is merged in. They're great for low-level use-cases right now, but it's almost impossible to use them often in bigger apps.",1533205540.0
danstansrevolution,"Check out this [post](https://stackoverflow.com/questions/46083220/how-to-vuejs-router-link-active-style), Specifically this excerpt and beyond.

> vue-router automatically applies two active classes, .router-link-active and .router-link-exact-active, to the <router-link> component.

In other words, you may be able to just move your .is-active styles to .router-link-active.

",1533165365.0
anamorphism,"if you start each line of code with four spaces, it'll preserve your formatting.

but i'm guessing it's because you're not awaiting your setData call so you're logging `this.data.videos` before everything has finished loading.",1533167266.0
f12_amish,"On mobile so I can't copy paste easy but there's some async stuff in my project here:
https://github.com/maxdobeck/basic-app-frontend",1533188559.0
cssgareth87,Lovely stuff! ,1533203149.0
CommandLionInterface,Why do CSS only anything need JS integration? Isn’t the lack of JS the whole point?,1533205819.0
techmighty,saved,1533268907.0
RoganTheGypo,This looks awesome :),1533157270.0
dr_leo_marvin,r/outrun,1533171535.0
kevinleedrum,The use of CSS \`perspective\` for the grid line animation is awesome.,1533221126.0
shiftclickpoint,this is awesome!,1533161387.0
chaseyio,Cool project :) This reminds me of playing F-Zero back in the day!,1533167287.0
orgilnm11,"Nice loading, like arcade game loading :D",1533204614.0
,Good job! ,1533212067.0
Pineapple_Flow,Awesome ,1533270636.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/coding] [Making an Interactive Password Validator with JavaScript, CSS, and VueJS • r\/vuejs](https://www.reddit.com/r/coding/comments/93oaeb/making_an_interactive_password_validator_with/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1533124606.0
Heyokalol,"I've never heard anyone call Vue components controllers. The primary function of a controller is usually to take in a request, process it and send back a response. [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)",1533113924.0
thinkadrian,"I’d call that bad practice. A component should only render the results. Business logic that isn’t handled back-end, I’d do in what Angular would call “services” - separate classes that store and mutate data. That usually comes with the package if you use any kind of Flux plugin. ",1533125499.0
awsfanboy,Never trust the client is among  the topbackend rules. All vuejs code is a mere guideline. Clients can still mess you up with malicious api calls,1533145310.0
morficus,Sounds like a team you don't want to work with.,1533125110.0
jemminger,"I'd have told him ""I'm going to stop right here and not hire you as my employer.""",1533138910.0
nzquagmire,"It needs to be in both places.  Without frontend business logic your user experience is extremely bad (oh another failure message for incorrect date format, how delightful!). Without backend business logic validation your inputs are unsanitised and will quickly lead to all sorts of damage.  Having said that I have seen some internal projects running Mongo end to end and they were fine.",1533139555.0
letharus,"Well I suppose in theory you can do it that way if you really want, but you're going to run into fun performance issues with all the business logic in the front end. So you shouldn't. ",1533113111.0
george-silva,"Pretty hard to have it in both places.

I keep seeing services folder in vue projects. For example, you usually need to set some vuex state, do two API calls, wait for both, set another vuex things and unset another.

That is front end logic for me and it fits a service, rather then a direct vuex action, for example. concrete example: login logic.

However, lets say you have a requirement that once you login, you invalidate all previous tokens. This is something a bit bad for the frontend.

Like: 

1. Loggedin correctly
2. BE returns token
3. FE requests invalidation of previous tokens
4. BE replies ok
5. FE requests other startup data 

Very weird the case he is pushing forward...",1533119891.0
lucuma,"In a loose way you can both be right but the counter is always that the backend always should validate and thus contain all business logic. An example might be some calculation like for an invoice.  You might have the line (qty * price) update the UI (total) as they user changed the qty but when they press save the backend will calculate it, store it and return the total value.  ",1533124053.0
synergychen,"Make vue focus on presentation logic. 
It's easy to put heavy business logic in front end(very likely validation in FE as well) but soon you would regret: performance, security, maintainance issues, and consistence issues(for some important logic, people might duplicates them in backend as well). Then what will happen is next developer does not understand why you do that and git blame... now you are in their special list.",1533130340.0
zergUser1,"So then you release an IOS app, an Android app, a Windows desktop app. You have to duplicate all the business logic in different languages?

Sure you can technically use react native for IOS and Android, and Electron for desktop apps, so you could keep everything with Javascript, however, you need a way to share all that code on every platform, makes your build process much more difficult, if there is a security issue or a bug, you now need to push the changes everywhere and you are not guaranteed everybody will get the latest version, whereas with an API, everything is centralised & an update is immediate across all platforms as they can all use the same API.

The only benefit I can see to doing client side business logic is to reduce your cloud infrastructure costs, as you are basically using your user's compute",1533139349.0
archivedsofa,"Although you can write all kinds of logic in components (api calls, business logic, etc), IMO that is a terrible practice.",1533134547.0
zmasta94,Loosely speaking (s)he is correct but I think the more appropriate term is presentational logic. ,1533146783.0
thinkadrian,"Not related to VueJS, but have you checked if `wind` is defined?

Have you defined `this.weather`? No you haven't! Because it's in a different scope! `this` is referring to the $ scope. But you can use arrow functions to keep the context from what was outside:

`getJSON(url, (data) => {`

`}`

I'd also advice against using JQuery when in Angular, Vue, React or similar. You're loading lots of code for things that already exist. Use the Fetch API for requests, or this polyfill: [https://www.npmjs.com/package/fetch](https://www.npmjs.com/package/fetch)",1533111865.0
Spooky_614,"I'm new to Vue as well, but I believe you need to import you're home brew version of like this:   
   
`import HomebrewGenerator from '*file path*';`   
   

And then define it in the `components` object on your Vue instance, hope this helps at all.   
",1533165811.0
irphunky,"The best way I find to learn is to help others.

Hangout in chat and on the forums and help people fix their problems, it'll expose you to more situations than your likely to on your own.

Then after that look at building some small components, not apps but look at pushing them as far as you can.",1533105459.0
migpok35,"I’m in the middle of building my first vue app at work. 

I started with angularjs and made a single component drag and drop thing that I thought was pretty slick. Thinking about the implementation now makes me want to puke, but I still think the end result was pretty cool. That was the first time I stepped away from jquery type stuff. 

Then I jumped into making an angular/Django framework of sorts with a coworker. I got to do all the js stuff. I tend to think that making a framework (even if it’s with a framework) is easier than making a specific app is easier, because it forces you to think in generalities instead of getting hung up on the specifics of what your solving. 

Then I made an angular checklist app that sat inside the “framework”. I mention that because it was the first time I had considered placing something inside something else while they remained separate. It was definitely a learning experience. With this project I abandoned a lot of the angular stuff and used redux. It was a rather pleasant experience. It allowed me to treat angular like just a view layer, (and I had done some handlebars stuff previously that I liked) while still having the creature comforts of injecting whatever I wanted. 

Now I’m at a new job doing a vue application. I’m still learning things everyday about how I think things should be structured or split up. 

I went through all of those because it was the journey before vue that gives me any type of confidence in what I’m doing. At the end of the day angular isn’t that different from vue from react. You can do some of the same patterns in all of them. But doing things and figuring out why things hurt not because the framework you chose, but because the solution you tried and packing that knowledge away for later. 

I’m more opinionated than most (of my coworkers anyways) in coding style when it comes to front end stuff. But I force myself to be very intentional with all of my decisions, and I can justify to anyone who asks why I’ve done something a certain way. 

To actually answer the question in he title, the angular/Django framework is where I learned the most. Working with someone else who had full control of a or I relied on and never bent over backwards for what I thought I needed, really taught me the difference between what I can know and what I can’t know in my processes. There’s would be certain information I would badger him for in the api that he refused to put in because “we can’t know that”. And I thought it was so easy. But a week later, oh hey, we’re in a situation where that is unknowable. 

He also taught me that coding style can communicate intent. And intent is super powerful when reading code. If there’s 4 ways to do something, each way tells the next reader a specific thing about what you ( and they) can expect to be true about the system. 

Edit: because I forgot about the end. 

I learned to read the docs really well. And swayed more towards their people’s repos or stackoverflow examples. I’ve always been dissatisfied with front end tutorials because they never show what things are like at full scale. Or they make assumptions that your able to start from scratch instead of shoving something into a 13 year old app. 

I check out the vue corporate boilerplate repo every now and again. I don’t think all of it is amazing, but thy spring some new concepts on me that I definitely take into consideration. ",1533102461.0
gabriel-et-al,"I created a pokemon damage simulator. You would add as many pokemons as you want (its name, hp, speed etc) and moves (its name, damage etc), then you would pick 2 pokemons and 1 move and the website would display the final damage of the first pokemon applying the move into the second pokemon.
",1533123877.0
graydoubt,"I came to Vuejs as mostly as a backend developer who can sort of code a UI with Bootstrap and jQuery as crutch. My foundational knowledge is that I've been coding since the mid 90s. I've done an Angular \~1.2 tutorial before, and heard/read a lot about React, so I'm familiar with it in concept, but what attracted me to Vuejs specifically was the simplicity, and the single component files.

A couple of years ago, when [Web components](https://en.wikipedia.org/wiki/Web_Components) came around and [Polymer](https://www.polymer-project.org/) was making a dent, I immediately became a fan of the concept. I had been doing something very similar for most of my career, but on the backend, and referred to them as widgets instead. Doing all this stuff on the client-side makes much more sense, though.

I feel Vuejs expands on the web components concept the right way, and if someone knows some basic html, javascript, and css, they can easily get started with Vuejs.

As a first step, I wanted to wire up some Vuejs components into an existing website. But I scratched that plan almost immediately and ""went all in,"" and rewrote the entire UI (there's only a few pages, really) to a thing I had built previously called [ARKbrowser](https://arkbrowser.com/servers?q=is%3Aofficial). That site is neither finished nor polished, but it's been helping me test various technologies. The site queries game servers every few minutes and shows which servers are up and who's playing on them. It started out as a PHP+MySQL+Elasticsearch, then I added beanstalkd because I needed a queue. Then I ripped out MySQL and used ES as primary data store. The UI was just PHP Twig templates with bootstrap.

So the goal was to replace the old UI with something entirely written in Vuejs, which has since happened.

I wanted to get a better feel for the separation of concerns. How do you effectively interact with an API? What are the advantages of ""Single Page App (SPA) + API"" vs server-side rendered pages? Just from a caching standpoint alone it's hugely advantageous -- I was able to add [Varnish](https://varnish-cache.org/) fairly easily.

When does it make sense to use a Vuex store, and when should you not? I first wrote it without Vuex, then added Vuex in to see how things will/could change if I needed to share state across pages.

Some of it was to validate some overall architectural approaches. If I wanted to authenticate users, how would I best go about that? I implemented an [OpenID Connect server](https://bshaffer.github.io/oauth2-server-php-docs/overview/openid-connect/) on the backend and used [oidc-client-js](https://github.com/IdentityModel/oidc-client-js/wiki) to manage user state, so there are no session cookies (outside of the OIDC server). That isn't live yet (because right now there's nothing to do once logged in). It's also probably overkill to go full OIDC, but I wanted to learn it, so I could apply the concepts to larger sites, and especially sites that are broken down into smaller, fairly independent services. E.g. Using key-pair signed JWTs to better divorce service provider (when validating credentials) from the authentication provider and not have that be a bottleneck.

Reusability is another piece: I have a bunch of ecommerce websites that need seller onboarding. If I can build a backend component and a vuejs component to handle the UI, how do I write it so it's essentially a drop-in with a single custom tag on all the sites, but can still be styled to match? I don't have the answer to that yet, but that's why these little sites are my playground; I can prototype and implement features, and if something breaks or doesn't scale, that's okay. Once I think I know what I'm doing, I can transfer that knowledge into projects that actually matter.

Some stuff I didn't think or care about initially, like SEO impact. Google can crawl SPAs, so you're sort of covered there (with some caveats), but page-specific meta data is another issue; things like [Open Graph](http://ogp.me/), which is often used to generate link previews in things like Facebook, Slack, and Discord. Those sites tend to make a request to the page, and extract the metadata from the html, obviously that won't work if it's all client-side rendered, but there are a few different approaches to solving that.

Then I got distracted a bit and created another related thing called [ARKstats](https://aberration.arkbrowser.com/), which isn't terribly exciting to look at unless you're playing the game and have an account on the server that the installation belongs to. It started out as a data viewer for administrative purposes, to get more insight underneath the hood. Over a few month it's now a tool that's accessible to players with a few features to help them out. But the UI was also slapped together real quick. The home page is still called ""HelloComponent"" from the quickstart template, ha. The goal was to make something small and fast. That definitely hasn't been accomplished yet. So many little things; like how much space moment.js sucks up when locales are included. Or providing proper loading screens while AJAX calls are still in flight. Or wrapping my head around the asset minification process.

Overall, everything took quite a bit of time, probably because I'm trying to implement both client and the server-side pieces at the same time, but seeing how everything goes together and discovering some of the best practices has been really helpful, and fun.

So, that was a bit all over the place. But my recommendation is to just play with everything. You can't fake experience, so the next best thing is to just take initiative and dabble with everything. ""Extreme dabbling."" :)

For example, I've got my eyes set on form and file upload handling next, because that's often where a lot of application complexity comes from (a melting pot of backend, frontend, and UX), but last night I found a post in this subreddit that introduced me to [Axios-actions](https://www.npmjs.com/package/axios-actions), which I'm now itching to implement, because it means I get to rip out a bunch of custom code. And I'm a huge fan of negative code.",1533146286.0
tquinn35,Looks like it’s alright to me. They have been closing issues and merging pull requests in the past week which is always a good sign. Maybe they are a little short on help. I lm not sure about the the slack thing though.,1533090503.0
Lelectrolux,"I guess [Vue portals](https://github.com/LinusBorg/portal-vue) might be an elegant idea. It allows you to ""teleport"" part of the rendered html while keeping all the context goodies.

You could have a portal target in the header, and in your views, use a portal to that header target. This way, even the context is shared between the header buttons and the view.

In your header :

    <template>
    <div>
    // ...
    <portal-target name=""header""/>
    // ...
    </div>
    </template>

In one of your Project view SFC :

    <template>
    <div>
        <portal to=""header"">
            <create-project-button :some-props=""someData""/>
    
            <!-- Or just inline it
            <button @click=""openModal = true"">Create Project</button>
            <modal open=""openModal"" @close=""openModal = false"">
                <form>
                    //How to create the project
                </form>
            </modal>
            -->
        </portal>
        <table>
            // The projects list
        </table>
    </div>
    </template>
    
    <script>
    export default {
        data() {
            return {
                someData: '',
                /* If you go the inline route
                openModal: false,
                */
            };
        }
    }
    </script>

The quick and dirty is a big \`v-if/v-else-if\` backed by global state (vuex or event bus, or shared root data), the intermediate is creating a header component alongside each view and using dynamic component.

I prefer the portal solution. It's very powerfull once you get used to it.",1533090304.0
imapersonithink,"Either use an [Event Bus](https://alligator.io/vuejs/global-event-bus/) or a Vuex store. If it is a small app, you should use the Event Bus.",1533084984.0
whofromwhere,"`data` should be a function, not a lone object

e: https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",1533062630.0
Lelectrolux,"~~Can you post the stack trace ? Because we don't have enough here.~~

You can't reference a data key in the data object only props, as `this` is not binded to the good object yet when `data` is resolved. It's a javascript error, not really a Vue one.

To prove it, run this code in any browser, and look at the console :

    {
        foo: console.log(this)
    }

You'll see that `this` is the global `window` object

You want to use a [computed prop](https://vuejs.org/v2/guide/computed.html) instead for any value that is dependant of another value.

    var App = new Vue({
        el: '#App',
    
        data: {
            lat: '51.50',
            lon: '-0.12',
        },
        
        computed: {
            url() {
                return `https://fcc-weather-api.glitch.me/api/current?lat=${this.lat}&lon=${this.lon}`;
            },
        },
        
        methods: {
            // ...
        }
    
    });",1533065081.0
on606,do u need that comma at the end of url: line?,1533062490.0
vdallaire,Great article! Thanks!,1533081440.0
orgilnm11,nice,1533118428.0
botojomomo,"The link goes to some random blog, was it taken down? ",1533122952.0
binarytide,[https://itnext.io/vue-a-pattern-for-idiomatic-performant-component-registration-you-might-not-know-about-9f3c091846f5](https://itnext.io/vue-a-pattern-for-idiomatic-performant-component-registration-you-might-not-know-about-9f3c091846f5),1533067280.0
Spooky_614,I'm currently taking this class for work and it's great!,1533167149.0
irphunky,"Your not going to like this answer...

But your gonna need to go through everything bit by bit to upgrade to 15+

I've recently done this and we was even running on the latest edge version prior to 15 being released.

It was a huge PITA and has tainted my thoughts of quasar due to such huge breaking changes being introduced at such a late change.

Thankfully we only had a few things to fix, but it took a good couple if weeks.",1533068240.0
CaptainInsane-o,"Have you tried to 
    sudo npm install -g @vue/cli 
",1533054298.0
capricata,"Have you tried uninstalling the previous version, it did work for me.

If you have the previous

    vue-cli

(1.x or 2.x) package installed globally, you need to uninstall it first with

    npm uninstall vue-cli -g

or

    yarn global remove vue-cli

You can check the docs  [here](https://cli.vuejs.org/guide/installation.html), let us know if it worked..",1533074690.0
NathanielBlack912,"This is exactly what I needed, thank you! ",1533151072.0
gabriel-et-al,"You must make clear that you are the one with expertise in software development and thus the technical decisions are up to you.

If your boss can't code and won't maintain the codebase himself, then he better listen to you.

I fully understand how hard is to impose yourself, but it's absolutely necessary for your professional career (in _any_ career, not only software development).
",1533048133.0
sir_eeps,"IMO,

* Vue is easier to pick up than React or Angular - if someone is solid in JavaScript/HTML/CSS - they can pick up the basics of Vue quickly. 
* If someone knows React or Angular - they can likely jump into a Vue project and be productive with minimal ramp-up time. 

I've used Angular 1.x for years, early adopter of Angular 2, know React - after reading the getting started guide + reviewing the API docs for Vue, I was able to start building out things in Vue that would still leave me scratching my head in Angular.

Was sort of ""ok, I got the basics - what is a current pain point I have in Angular right now, and how would I do it in Vue?"" (for me, it was dynamic components) - in 3 hours I got fairly far in building a dynamic form generator - that I still don't know how I'd do it in Angular. I know the few blog posts, areas of the API, and things I'd need to do to get it done - but would take me far longer to get the same end result. 

* The core of it is very light weight, and offers ""just enough opinions""  

React is great, it's powerful - but things like say, handling Forms is a bit of a pain. Even needing to think through the context of 'this' when binding events / etc. The template language with Vue sort of smooths out the rough edges. 

Angular, has too many opinions - and I also find it's hard to learn it in small chunks. Quite a few concepts are pushed onto developers quickly. I've used it on a few production projects, and have also trained / leveled up other teams with it - and have seen the learning curve, challenges that people hit. 

I haven't had to train up a team on Vue yet, but confident I could do it in a fraction of the time. 

* Scales up

Since Vue is easy to get started with, people seem to think it's only good for ""basic"" things - but with Vuex for state management, vue router, great dev tools - it grows with you as you need it, or can plug in your own alternatives (vue-redux if you want, roll your own router, whatever). 

With lazy loading, async components, etc out of the box - there are a number of things that are ""so easy, it's almost boring"" in Vue, that if it wasn't for trying to solve similar things in React or Angular and how frustrating it can be, I'd just expect ""well, isn't this how things should work?""

If the template language gets in your way - and you don't want to use it. Can provide your own render method, and/or use JSX if you want.

So while Vue does provide some guide-rails on how to use it / do things, when you want to be ""Hey Vue, get out of the way - I got this"", you can get control back. I find this can be a ""fight"" with Angular at times.

Vue is being used by a number of large companies in China already: Alibaba, Baidu, Xiomi, Nintendo, and lots of other companies like: GitLab, Codeship, Adobe (Behance) amongst others. 

The main issue that seems to crop up is ""what is the Native story?"" - like ReactNative 

There is

* Weex - used in production by Alibababa, main concern though is support / documentation in English can be an issue, but is improving
* NativeScript with Vue - just hit a 1.0 release 
* Vue-Native - just saw this pop up recently, haven't had a chance to look into it yet

Or, if wanting to go hybrid / PWA - Ionic 4 and Capacitor could be a solid option. Ionic is moving away from being tied to a specific framework, and Capacitor is supposed to be a big improvement ontop of Cordova 

",1533062743.0
ryan_developer,"It sounds like you need to make it clear that vue gives him exactly what he wants. By using vue, or other similar frameworks/libs, you will be implementing some form of standards, that are already documented, and fairly easy to pick up. Additionally, you could make an  unmaintainable mess even without it, but by using it it will be an organized mess. Another thing to show him is the rise in popularity of vue, make sure he understands that there are lots of people out there using it and finding resources to pick it up won’t be difficult (angular, react, knockout, etc users won’t typically have a hard time picking it up)",1533053006.0
TatzyXY,Why Node JavaScript for the backend? Whats wrong with PHP?,1533054568.0
ctorx,">I told him I was using Vue, and that I would prefer to keep using it. I gave him a few articles talking about why Vue is great, including the comparison on the VueJS website. I pointed out that GitLab uses Vue for their frontend. Things like that.

This is a good start but if you want your boss (and the business) to sign off on these initiatives you need to provide some business value other than ""here's why vue is good"" or ""here's why what we have now is bad"".

Something along the lines of:  ""If we switch to Vue, my productivity will significantly increase allowing me to develop and maintain features faster than is currently possible.  Secondly, migrating to Vue will allow us to more easily test our code, identify edge cases and reduce user complaints"".

Make your argument about how the change helps the business and you'll get more buy in.",1533055803.0
guszi,"I agree that considering your position in the team your opinion should be respected. If you have free time to crunch, make a PoC using your favorite development pattern, and the next time it comes up mention that you already have something that kinda works - having a working piece of business logic means that your boss saves time following your initiative so it can help.",1533057000.0
bmarkovic,"If replacement is his biggest concern tell your boss the following:

- JavaScript is by far the biggest programming language in the world. There are thousands of JS programmers in the market (this will work well for Node.js, but TBH knowing JS and being a decent Node.js programmer is far apart).
- Vue.js is by far the easiest front-end technology to learn and especially, learn to properly use. Much less complex than React, much smaller than Angular.
- Selling over React: To add a programmer to a React team you need to find someone deeply knowledgable in functional JavaScript. These people aren't quite easy to find. Vue provides the same benefits while shedding a lot of that philosophical/computer-sciencey complexitty. You can easily board backend, OO-experienced developers on Vue and they'll still grok it easily. React requires a lot more of a paradigm shift to use, Vue provides that same paradigm shift with much less mental overhead. Try to find stories about projects falling into difficulties because of inability to find decent JS developers to meet the requirements of React codebases. There are quite a few online.",1533060532.0
DOG-ZILLA,"Vue, React, it doesn’t matter in itself really. 

What does matter is what the team feels good with. For you that’s Vue and so that’s what you should do. 

Vue and React are comparable, so it’s not like choosing React for the sake of it is going to give you any more benefits over Vue. 

It’s 2018 and Vue has grown like crazy. There are some big devs and smart people behind it now. It will only keep improving. 

Give him a tour of the Vue Cli 3 with the UI to show him just how easy it is to get going with a new project. ",1533062363.0
i_ate_god,"1. If your PHP application broken?

Just because something isn't technically excellent, doesn't mean in any way that it's broken. A lot of the world works on code that would make even the most cynical, battle-hardened neck beard programmer vomit a little in their mouth, but the code works, and the customers are none the wiser.

2. Are you unable to deliver features in a timely fashion and your customers are complaining?

If the answer is yes, then any arguments for a complete rewrite of your software should be centred around productivity/stability. If the answer is no, then what is the business value of spending the time and money on a rewrite?

3. ""His primary concern is 'if I fall off a cliff,' he can replace me easily with someone else who knows the framework. 

I prefer Vue over React just as I prefer python over Java. From a business standpoint though, it's far easier to find a java developer than a python developer. So your boss has a perfectly valid concern, what is your counterpoint to it? You can try ""well, React and Vue are similar enough that one can switch between them without much ramp up time"". You can also try ""Well, Vue's popularity is surging, increasing the labour pool"".
",1533063874.0
rnenjoy,"Stare right into his eyes. Take two fingers and point at his eyes and then point att your eyes. Then say: ""Look at me!! Im the captain now!"" ",1533069661.0
____________13,">His primary concern is 'if I fall off a cliff,' he can replace me easily with someone else who knows the framework.

This is anecdotal, but this sort of happened at my current place of work. The frontend dev built everything in Vue, and then died.

I won't go over all the details, but they would have had an easier time replacing him if things were built in react.",1533075811.0
synergychen,"Besides above great points, one thing you might want to confirm is ""Make sure the most important features are working in IE or if possible, let customer not use IE"" to make your life much easier, since VueJS has many issues with IE and won't support IE(if I remember correctly) in new version. You definitely don't want spend a lot time find polyfills or wrote your own polyfill just because of IE - Probably hard for your boss to understand why you spend a whole week to fix an issue just because of IE.",1533129575.0
chris97425,"Ok i finally found the solution.

I forget the bus element to pass data and i start to use vuex store like this:

`Vue.use(Vuex)`

`const store = new` [`Vuex.Store`](https://Vuex.Store)`({`

`state: {`

`data: null`

`}`

`})`

And in the file i want to send data i do that:

`goRetro: function (item) {`

`this.$store.replaceState(item)`

`}`

And finally to capture data in the target component i do that:

`created () {`

`var dataValue = this.$store.state`

`this.itemTitle = dataValue.title`

`}`

\[Finally have my title\]\[1\]

  \[1\]: [https://i.stack.imgur.com/ZG2YF.png](https://i.stack.imgur.com/ZG2YF.png)

I hope it can help people ",1533054652.0
apexJCL,"Make a mixin that adds a listener to whatever component you use it, then, debounce the listener, maybe 20ms it's enough.

In the mixin, commit to the store with the listener and add a computed property to access directly on the component and voilá!.

Don't forget to destroy listeners when the component dies, or else you'll have multiple listeners submitting changes.

Another approach would be to create a plug-in that  does that for you and that way you only have one instance and nothing else, it all depends on your use case.

EDIT:
Added more info to the reply.",1533037872.0
archivedsofa,"> Would it be a bad idea to commit the mouse position to the store on mousemove?

Maybe. Reactivity has an overhead and I doubt it would be a good idea to use Vuex for data that has to be updated on every frame (mouse position, scroll position, etc).

Personally, I would not use reactivity for this.",1533053679.0
dzkn,"Do you actually need clientX and clientY as global variables? Most likely you don't need that.

You most probably can get away with a single mousemove listener that publishes coordinate changes. Then any part of the application that needs the position can subscribe to these changes.",1535373038.0
ReGGaeBAWS,"Nice, would want to option to set easing/momentum tho, is that planned? Giving a simialr result as https://idiotwu.github.io/smooth-scrollbar/",1533030832.0
procrastornado,"hey, 

on your demo site i got weird flickering in the settings widgets of each component.

chrome on win 10 with 4k res",1533046947.0
tweettranscriberbot,"^The linked tweet was tweeted by [@alexjoverm](https://twitter.com/alexjoverm) on Jul 30, 2018 07:30:07 UTC (52 Retweets | 140 Favorites)

-------------------------------------------------

🙌 Since [@vuejs ](https://twitter.com/vuejs ) 2.5, you can use the new hook errorCaptured to handle errors from the component or any of its children 

[Attached photo](https://pbs.twimg.com/media/DjVixqhW0AE0Nkn.png:orig) | [imgur Mirror](https://i.imgur.com/wcPzHey.png)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1533019546.0
nothingduploading,"in angular you have to pass 'true' for watching an object deeply. I wonder if vue has something similar.

yes it does. pass \`{ deep: true }\`

[https://stackoverflow.com/questions/42133894/vue-js-how-to-properly-watch-for-nested-data](https://stackoverflow.com/questions/42133894/vue-js-how-to-properly-watch-for-nested-data)",1533019582.0
brainbag,"Thanks, this was a helpful outline, and good timing - I was thinking about whether to use a callback prop today for something. The callback is required for the API to function and it would be nice to require the parent component to implement a particular event to prevent subtle runtime errors. Nothing in Vue for it using emit, unfortunately.",1532984235.0
dave__stewart,"The other big difference as I see it, is that events can't *return* a value, callbacks can.

Let's say for example you have a custom Form component which builds a form from a config (I did this the other day) but you need custom validation by way of a function. You can pass this in as a `validate()` callback prop along with the form configuration, then when you submit, the `validate()` function is run, and only if it returns `true` does the form `submit()`.

With events you have no way to return a result to the emitting component.

I suppose you could pass a reference to the generic component or even a handler (such as `submit()`) in the event payload... but it feels like it's abusing the event mechanism a bit",1532985817.0
042e,"I took a quick look at the readme. Can you add some information about the use cases or the philosophy behind this library? I don’t really know when, or if, I would want to use this.",1532989759.0
ISNT_A_NOVELTY,I don't see any examples in your readme of how this would actually be used in a component,1533016135.0
imapersonithink,"Yeah, Vue is a tool to manage and render components. It can do most whatever you want.",1532966755.0
pd-andy,"https://www.npmjs.com/package/vue-golden-layout
",1532967197.0
_pearofducks,"```
if (customerSettingThing) {
  require('./some.css')
}
```",1532946051.0
brainbag,"1. Use something like https://github.com/ktquez/vue-head and have dynamic `link rel` depending on the customer.

2. You could also simply put the `link rel` in the body of the component. It's not *technically* valid HTML, but it's going to work fine on any browser. If you have your specificity rules set up properly in your styles, then they'll override whatever is before.

        <template>
          <link rel=""stylesheet"" 
                type=""text/css"" 
                :href=""customerStyle"">
        </template>
        
        <script>
        export default = {
          computed: {
            customerStyle () {
              return `custom_user_sheet-${user.id}.css`
            }
          }
        }

3. Use a customer namespace, like tag the top level element with their special custom class, and then all of the styles below it will be affected by that selector.
        
        // App.vue
        <template>
          <div id=""app"" :class=""customerStyle"">
        </template>
        
        // customer stylesheet
        .customerStyle .something { }
        ",1532954005.0
defunctAI,Check where that error is coming from. I don't think it is from the component you showed,1532899029.0
kingdaro,"It looks like an error from eslint. Try setting `parserOptions.sourceType` to `""module""`: https://eslint.org/docs/user-guide/configuring#specifying-parser-options",1532911623.0
sonic_molson,"""even after both frameworks being in existence for the past four years, I couldn’t find anything that tackled this — surely I wasn’t the only person who wanted to see a side-by-side code comparison"" 


http://todomvc.com",1532879267.0
eloc49,I'm really only interested in the sizes of the js files.,1532905190.0
vue-rocks,"I recently tried Burma and rather enjoyed it once I got to grips with it. It’s built with sass and flex box. Or if you like material design, check out Vuetify.

Hope these help",1532871089.0
defaultbr,You can try quasar framework,1532884989.0
richardtallent,"I just can't get into the Material spec completely, so Vuetify wasn't the right library for me, but if you're all in on Google's design language, it's the best choice IMHO.

For my own projects, I'm now just using Bulma as a ""baseline"" CSS library and building my own UI components. With VueJS components and modern CSS and JavaScript, most controls you'd need are fairly easy to build yourself. The hardest things to build, like date pickers, multi-level drop-down menus, calendars, and combo boxes are easy to integrate from other libraries (the exception being rich text editors--I haven't found a ""native"" Vue one I like yet, I just wrap Trumbo).",1532885732.0
Splendiferous_,I've used Vuetify for a prototype and was very happy with it.,1532893396.0
darkphenyx,Look into Nuxt it integrates Vue and Express in the same project. It's super awesome. ,1532868505.0
jaxn,"I think this is an example of what you are wanting to do.
https://github.com/zestgeek/Auth-using-Vuejs-express-jwt-nodejs",1532868463.0
RoganTheGypo,Check Nuxt out: https://github.com/nuxt-community/express-template/blob/master/README.md,1532870334.0
majorius,"this one is a bit hard, vue can only register components when the first run happens.
So basically you can create a vue instance inside your main app and reinitialize it after you add or modify a template. Also you'll need to include vue with template compiler, or compile components somehow on the server.",1532863047.0
vietquocnguyen,Will this help? https://www.reddit.com/r/vuejs/comments/92p12a/a_vue_pattern_for_idiomatic_performant_component/?utm_source=reddit-android,1532870492.0
_pearofducks,"1. Get a demo site up! 

2. The Vuex dependency is a bit of a bummer, and I don't see any reason for it since there should only be one instance of your component.

3. Your `.overlay` style should be _way_ more specific (e.g. `notivuecation--overlay`) or `scoped`. Polluting global CSS with something that generic is a no-no.

4. I've run into several cases without access to the `Vue` prototype, it'd be nice to be able to access your `alert` and `confirm` methods via some `import` instead of on `this`.


_Extremely_ minor: Maybe make the plugin invocation your `default` export? This seems to be the norm for smaller plugins.",1532846518.0
dave__stewart,"Certainly useful, in fact I built a local plugin to do this a couple of days ago. Why does it need vuex though?",1532891869.0
shad0proxy,typescript garbage.,1532848014.0
TwoTapes,"Check out the ""javascript rendered forms"" section https://www.netlify.com/docs/form-handling/. It may be your solution ",1532842798.0
teh_inquisition,"This blew my mind. I didn't know you could do that. I've tried dynamic imports before but I couldn't get anything to work. 

I'll have to add this to my apps. ",1532831167.0
DOG-ZILLA,Brilliant talk by Sean. ,1532860124.0
S4von,Wish I could upvote this a lot more!,1532884674.0
xneo27,I was able to use this approach along with environment variables to deploy different sets of functionality for different customers completely excluding the code from the bundle for customers who did not need that functionality. Really great talk.,1533140387.0
,"I've got the dropdown running here but yeah, no idea how I could connect them. Any help would be appreciated

https://codepen.io/anon/pen/QBOgKm",1532805046.0
042e,"Welcome to Vue.js!

You were quite close already in the two Codepens you linked. Following up on what gabemachida said, I want to highlight two points.

1.	Together with the `v-on:change` event, you need to use methods in your logic code. 

2.	When deciding on the variables you have under `data`, it is common practice to have one variable per http request. For example if you have saved `response.data` as `this.info`, there is no need to have another variable for abilities. Instead you can access `abilities` via `this.info`: `this.info.abilities`.

Imo at this point it probably helps you the most to see the full working example. Here is a fork I put together that connects your two Codepens, https://codepen.io/anon/pen/BPmxGe?editors=1011",1532859434.0
ifkas,"Hey, maybe this can help: [https://madewithvuejs.com/](https://madewithvuejs.com/) ",1532808495.0
jasonrichardsmith,"If you are looking to contribute, I could use some help  
[https://github.com/jasonrichardsmith/rbac-view](https://github.com/jasonrichardsmith/rbac-view)",1532839041.0
orangereddit,"Yep. What's the IP address of the computer on your network? ""ifconfig"" in the terminal should tell you this (""ipconfig"" on Windows)

Now browse to http://computer-ip:8080 on your iPhone.",1532807332.0
bowersbros,"Your best bet is using ngrok to share your localhost.

",1532811304.0
nwsm,"you can't do localhost on your phone because ""localhost"" means ""this computer""

so it looks for the app being served from your phone.

depending on what firewalls are in place on your computer, you should be able to go to yourip:8080",1532807331.0
1_nude_dude,If you use cli3 that should be included!,1532812697.0
StephenNotSteve,[This tutorial](https://www.thepolyglotdeveloper.com/2018/04/vuejs-app-using-axios-vuex/) using Vuex + Axios should start you down a good path.,1532798298.0
dave__stewart,"We've recently given up on using Vuex for CRUD, and do all updates in the components.

We use Axios Actions to encapsulate setup and logic and have drastically reduced application complexity without sacrificing separation of concerns.

https://github.com/davestewart/axios-actions ",1532815839.0
binarytide,"we use parse for back end. everything goes through vuex, but only certain items are saved in state. we make use of vuex actions for functionality required outside of state so the functionality remains consolidated.",1532824957.0
owen800q,Did you try fetch  api ,1532949709.0
p_r_m_n_,This seems overly complicated. Why not use two routes /login and /register and take advantage of route hooks? Otherwise vue won’t rerender a route component based of parameters. The component should have a ‘$route’ watcher that can react to those changes. ,1532799006.0
landscape_relic,"This is a tough one. I'm looking into the same issue where if Vue sees that the router-link is matched (ie you're already on the url / component for that router) and you click the link again, no event is emitted. 

One approach I'm working on is using the event bus to register a click event every time the router is clicked. From there you could try to hook in your props update or remount the component, but I have not figured that part out yet.

I'm curious if there is a better solution built into Vue rather than hacking an event.",1532798153.0
Wuma,I think you can watch for param changes from within the login/register component: [Reacting to Params Changes](https://router.vuejs.org/guide/essentials/dynamic-matching.html#reacting-to-params-changes),1532803157.0
piousp,beforeRouteUpdate,1532804970.0
johncarter2679,"Hello, I have in trouble with my router, I cannot log in in my  router there was a problem with my admin password, any solution how recover or change the password? reply. If anyone have issue with their router like configuration, slow data speed, dead spot and other router related problem go to the [Netgear Arlo Support](https://www.netgearroutersupportnumber.com/netgear-arlo-support/) for help. Here you can find the all the solutions of error.",1538631509.0
RedditsMastermind,"Is there any advantage using parcel.js instead of fuseboxjs ?   
Currently my private project creates and watches the server and client application.  
My Vue templates uses typescript( with Component decorators), stylus and pug.  
Is this also possible in parcel.js ?  


See: [**https://github.com/Bomberus/WGly/blob/master/fuse.js**](https://github.com/Bomberus/WGly/blob/master/fuse.js)",1532779329.0
archivedsofa,I tried Parcel with Vue but [this bug](https://github.com/parcel-bundler/parcel/issues/5) was a deal breaker. It prevents using relative URLs on the `<style>` of single file components.,1532824065.0
carrot_gg,LOL,1532716213.0
platoprincipal,"Looks great man! Even on mobile, might I suggest eventually adding video tutorials and documents on Vuex and the state. Otherwise, keep expanding it and get some feedback!",1532706641.0
olafviking,Looks really nice and amazingly fast 😯 good job ro,1532710668.0
BehindTheMath,"Looks good.

On mobile, the code snippets are really small. You might want to consider making the lines narrower by breaking them up. ",1532712731.0
IWantACuteLamb,"I saw your reference of v-show, why not also teaching them v-model as well? ",1532719332.0
maximsfw,"really nice site, super snappy and clean! Not seeing much that isn't covered in the documentation so would love more content (which I assume you're working on). otherwise i don't see why one would visit your site rather than just reading the docs",1532723828.0
Sir_Poot,"I reviewed the UI and UX on mobile and all of this is my humble opinion. 

The menu display transition is unpleasant - It just shows up. A smooth transition really polish up a site. Looks like you are using vue-router, you can also transition on page load.

When you click on a page from the menu, the menu does not collapse.

The menu height is a little tall for mobile. Reducing the site will also allow more room for content.

https://vuehero.com/courses/getting-started-with-vuejs/part-three/, the tip breaks out of the tip box and goes off the screen. 

The back and next buttons should be on the far left and far right of the screen.

I’ll go through the course when I have more time.",1532744042.0
ameo02,maybe if you had examples in jsfiddle or codesandbox?,1532791413.0
cap12354,Really liking the site! Is it in a git repository somewhere? I found a couple typos.,1532807782.0
vuehero,"Just converted all of the lessons on my ""Getting started with Vue.js"" course to videos. I hope you like it. Would love if someone would see them and give me some feedback on them!
The videos are found under each of the lessons here: https://vuehero.com/courses/getting-started-with-vuejs/ and I also created a YouTube channel here with the videoes: https://www.youtube.com/channel/UCfVoYvY8BfTDeF63JQmQJvg",1533881764.0
octarino,">Passing data back to **it's** parent component

*its",1534732242.0
hutilicious,your templates should be written in vue and your api in slimphp then(json restful) . Use vue router to simplify building multi page apps,1532672660.0
iampaoloXD,Axios is one perfect fit with vue for apis.. and you cant directly use php templating to vue files ,1532671193.0
brainbag,"It's a beautiful component, but nothing is more disappointing than seeing great components tied to opinionated CSS frameworks, making it unusable in every other Vue app. ",1532690589.0
jineshshah36,"There are definitely iOS bugs. Fixed modals in iOS are super buggy so you will need to do extensive testing to fix those issues. 

https://i.imgur.com/f4VEoHs.jpg",1532711922.0
FurryFirefly,"This is an awesome component, great work.
If I had to point out something , when you go to edit an event and untick the all day checkbox, when prompted with the ""are you sure ?"" message and click ""no"" the mode is kept as appropriate but the checkbox is not reverted to the ticked state :)",1532703715.0
mckpotato,Tried usage and example code from Readme.txt. Doesnt work.,1539024130.0
p_r_m_n_,"Nice. I hope so. Typescript with class style components  and decorators is very nice in my opinion. It’s very clean, easy to read, and less error prone. I don’t understand the hate for typescript but to each his own. ",1532674388.0
crazyeyes420,"It's a great enterprise compromise. A bit verbose for home projects, but I like it at work. It's easier for our junior devs as it's more explicit. ",1532712121.0
skipbridge,Gross. I hope not. ,1532664286.0
androiddrew,"From my experience using projects with little or poor documentation, the project becomes the work on the library instead of your own work. I latched on to some fun projects this way and learned a lot, but it didn’t help with getting the immediate job done.",1532659364.0
_ariel_,"Hi, I recently started a project with iView, it's really similar to Element: [https://element.eleme.io/](https://element.eleme.io/) but I found iView more complete, with more examples in certain components (for example the layout options), etc.

So far I don't have any issue, and I'm using lot of components. I think it's the best UI Toolkit for Vue.

Anyone have other recommendations?",1532685251.0
ThaFresh,I often look around for new UI libs when starting a new project and end up back with vuetify,1532781595.0
makotech222,"I think you can use something like

Declare interface HTMLInputElement{
 value : string
}

And typescript should basically add that property to the class.

But i agree in some cases. It feels like typescript isn't 100% yet. My specific case is that it doesn't detect props/methods from an inherited Mixin or Extend, So i have to cast my instance to any before i can use any inherited methods.",1532642934.0
daekano,"Let me start by saying that I agree. I have attempted to use TypeScript in Vue SFCs a couple times now and have ultimately decided that it's not quite mature enough, though it is getting close.

I'm not sure what you are trying to accomplish in your example though. What do you mean by ""satisfy TypeScript""? Why are you using `$refs` in the first place? Are you resorting to `$refs` because `v-model` isn't working the way you expect with TS? Why do you need type safety in `$refs`, `v-model`, or otherwise form input bindings, and what does it look like to you?",1532640285.0
g5insider,Thank you!,1532654892.0
Ignasiuz,"This is NOT a logo for Vue.js but for a Vue.js Conference.

Just clearing it out before someone starts making wrong assumptions :)

Reference: [https://twitter.com/vue\_london/status/1022381127359770625](https://twitter.com/vue_london/status/1022381127359770625)",1532611460.0
gabriel-et-al,r/unexpectedthanos,1532606211.0
skipfish,"Mr You, I don’t feel so good ",1532611732.0
redberryofdoom,I need this on a t-shirt.,1532599975.0
spays_marine,"Looks nice as a graphic, probably a bit too detailed to work as a real logo. I think it could use some tension by adding asymmetry between the left and right side and having varying sizes of the small triangles.",1532622999.0
techmighty,vue must survive,1532839853.0
delta662,reminds me of the polymer logo,1532609619.0
legitimate_johnson,"Nice library, but maybe run a spell check on the text on your website. There's a bunch of typos.",1532603950.0
NivekNTH,Nice job,1532600363.0
raphaelarias,Nice,1532606984.0
thiswasprobablyatust,"I've never had a single problem with createElement. Usually if I'm using a functional component's `render` function there's a good cause for it. Throwing in JSX sounds like someone who wants to functional-component-AllTheThings, without any strong justification — and sounds like a bit of a Vue anti-pattern IMO.

Otherwise you can make a functional component using `template` and just carry on doing normal Vue template things.",1532594648.0
brainbag,"No no no no no.  For React, JSX was invented because it sucks to write HTML with JavaScript. There's no other (good) way to use HTML.  However, in Vue, that's not true. Vue's design for single file components (including functional ones) using templates with directives allows you to easily write straight HTML with some extra functionality. JSX is never a good decision to mix with Vue - Vue has the same and better features built in.

Functional components in Vue can have templates; at build time they're  [compiled out into a function just like you'd expect by `vue-loader`](https://vue-loader.vuejs.org/guide/functional.html). 

Here's an example: 

    <template functional> <!-- notice ""functional"" here -->
      <!-- no ""this"" so you use the functional ""props"" 
           and ""listeners"" -->
      <label :for=""props.for"" class=""form-label-class"">
        {{ props.label }}
      </label>
    </template>

    <script>
    // everything else is normal, just no ""this""
    export default {
      props: ['for', 'label']
    }
    </script>

    <style>
    .form-label-class {
      background-color: red;
    }
    </style>

One thing to keep in mind though is that functional components are *always* redrawn when their parent redraws (same as React). There's no memoization. If you're using a lot of the same small components (like stateless `li` in a large list) functional component can be useful.

However, a bit of advice from having built a large site in React and one recently in Vue, I *highly* recommend that you don't use small components like this unless you're absolutely sure you need the same code in multiple places. Use functional ones only when you're sure you need a lot of it for performance.

In React the standard practice is to make absolutely everything a component (because of how it is designed). Going component-crazy in Vue wastes a lot of the value of developer productivity and ease. Unless you're certain a piece of code will be resused, don't make it a component - just keep it in the parent template. You can extract it later.",1532606385.0
SkettiCode,I typically call data load functions from the parent oncreate and then pass a store getter to a prop on the child. This has the benefit of reusable children since they aren't tied to a particular field in the store and they can't refresh each other.,1532576703.0
gabemachida,"from a consistency perspective, i'd make the call from whichever is reading the data from vuex. 

i decouple simple (and potentially reusable) components like lists away from vuex and use props. so the parent would read the necessary data from vuex and send that data to the child component via props. i think it's simpler, more maintainable and if the boss decides in a month that he wants another child component that uses the same/overlapping data on the page, i have less wiring to do because writing vuex bindings is just tedious. i have yet to try something like vuex-bound.

if you do it that way, then it makes sense to make the dispatch from the parent component.

however, if you've got the child component tied to vuex already, then i suggest you make the dispatch from the child. this way, you have everything in one vue file which makes for better readability in 6 months when you're trying to track down a random bug. the only exception that i'd make to this is if the dispatch is used to populate more data than just that child component.

there's really no hard rule for what you're asking and depends completely on style and purpose.",1532577813.0
Lochlan,"You should be able to do this with v-for.

Just to v-for on each <tr> and put the rest of the data in nested <td>s.",1532562767.0
dballz12,"I’m doing this at work with the vue-tables-2 plugin. Read up on that here: [vue tables 2](https://www.npmjs.com/package/vue-tables-2) 

This should help you immensely. I can go into further detail if necessary. Good luck!",1532557847.0
cyberst0rm,"I use quasar framework and their integrated datatable.

",1532559853.0
buddythicc,"I noticed that the mixin docs state the data from a mixin is merged with a shallow comparison vs deep compare. Could this be impacting your components?

https://vuejs.org/v2/guide/mixins.html",1532566458.0
niveshsaharan,"Lol, someone downvoted this. ",1532528920.0
vaaski,"maybe not garbage, but I kinda get what you're trying to say",1532513763.0
eptftz,"In this (large) company, we use all three. Sometimes people have to touch much older stuff too and we'd not hire someone who only wanted to use one, so it's probably a good pre-qualifier to not say. Basically, if you want to use a specific technology don't apply to a company that mentions others. Yes, that does limit your opportunities significantly.",1532569642.0
Brahminmeat,"By putting React, Angular, etc in their job postings, I believe what they are trying to communicate is that you must have some solid js framework experience.

What I would hope to see is elsewhere in the job posting, they describe their actual dev stack being used. There is should say Vuejs if they are infact working with Vuejs.

If not, then that should be a question to ask them in the interview.",1532543813.0
vaaski,"I'm having a similar setup and I always run into problems.

I have my Microsoft Surface Pro 4 as my portable machine and my dock right beside my primary computer at my desk at home. Both are connected to my network, so I can have all my projects on my laptop, run them there and edit off of my main rig via network sharing.

I think you'd have to set the server address in your Vue dev config to something that your other machine can contact your host at.


TL;DR: change host from localhost to some local address to fix sockets",1532515755.0
Gilroy-Danse,"I'm a little confused as to what you are asking for. I made this codepen to try and replicate what you said in the post. Is this what you are trying to accomplish?
https://codepen.io/anon/pen/WKOEdR",1532499247.0
androiddrew,"Yeah it is pretty fucking sweet. I can’t believe these guys took the time to build the UI but it really does make a huge difference. 

I struggle a little though because I never really used webpack before jumping into Vue and now the configuration is abstracted away so much that I am left hanging until someone decides to break the damn thing. Always makes me nervous.",1532518807.0
mmcgu1966,"I'm still wrapping my head around using the Components vs Views folder and where to put static CSS, fonts,  and Images",1532528765.0
,It's amazing and the sole reason I'm getting into using typescript. Having testing ready to go out  of the box can only lead to better codebases as well.,1532542750.0
jaesung2061,I've been trying to upgrade it with an existing app but it's causing too many issues so I reverted. Do you mind explaining what benefits I gain?,1532498889.0
,[deleted],1532557288.0
justsomeguy9999999,I'm really curious about vuecliservice.  Is it possible to create self contained package of a component and it's dependencies and compile to be deoyed at runtime dynamically?,1532568602.0
KiNgOfSpEEdOJaCK,"Can anyone please explain to me what is CLI?

I'm new in Vue.js ",1532599509.0
ThatLemur,"This is my first blog post. Disqus isn't implemented yet, but feedback and comments are welcome here",1532488321.0
legitimate_johnson,"Note that even if you go the pre-rendered route, your SPA will need to have access to your API server, or you will have to pre-fetch all the data you're going to use and write it to disk beforehand yourself. This might not be a problem for some but it came as a surprise to me. See these issues:

https://github.com/nuxt/nuxt.js/issues/1940

https://github.com/nuxt/nuxt.js/issues/2149",1532588163.0
jaesung2061,"Call this *inside* your promise/callback, not outside of it.

    this.photos = data

`v-for` will then repeat over the array.",1532491441.0
anamorphism,"users of axios, why do you use axios over vanilla fetch these days?",1532458104.0
shredmaster007,"Seems adding  ***compression-webpack-plugin*** and creating a vue.config.js works for generating .gz files - it does give me some warnings about exceeding 244kb, guess I need to look at code splitting or something like that? Of course I literally only have a single page at the moment...",1532401845.0
Badya122,Big problem with these renderless components is that they are not self contained. All of the logic and functionality for it now depends on the parent component or app itself ,1532431256.0
paul_h,I feel like need a TLDR for what renderless is in a nutshell ..,1532432735.0
ataraxy,"I once used Vue in a node app because I just wanted super easy computed properties in a pinch.

*That's* renderless ;)",1532539409.0
waitingonmyclone,"Ok, fair enough, but instead of mixing js into templates, this is mixing templates into the JS.",1532380443.0
brandonchinn178,"TL;DR I wrote my own framework and it SUCKED. Use a well tested and well supported framework to handle the UI logic so that you can focus on the business logic (the stuff that actually matters).

While I understand the desire to understand what's happening under the hood and implementing it yourself, I don't think front-end frameworks are something you can just hack together. Sure, it might be sufficient for a small task (like that timer example), but I guarantee it will not scale.

I had done the exact same thing, eschewing any front-end framework in my project to avoid being boxed into their methods and project layout. It was a pretty complex system and fully modularized, with each class knowing how to render itself and controller classes that orchestrate the re-rendering of various sections of the UI. But when I took a step back, the code path jumped all over the place, the code was getting close to unmaintainable (despite being DRY and modular), and it was SLOW. Like 5-10 seconds re-rendering slow.

Then I switched to Vue and it was fast and it put the logic in the right place. No more jQuery selectors, no more remembering which parent element I had added a component to. In a complex project as this, you actually *want* template logic, because concatenating a bunch of strings (like in the Todo list demo) will lead to bugs and poorly written code.

Trust me when I say that a framework will definitely be better than writing your own. Let the framework handle when to render and which element to display. The framework maintainers are already testing it and maintaining it much better and much faster than you can. Focus on your business logic and make sure that's solid.",1532387436.0
evilpingwin,But as soon as someone installs your library their JS is no longer vanilla.,1532387688.0
jemminger,"TL;DR: To sell my ""vanillajsguides""",1532380744.0
bilzen,"https://vuex.vuejs.org/guide/forms.html#two-way-computed-property

It's in the doc too.",1532412117.0
AlexJoverM,This is in fact the technique some higher level libraries use to access the store! Some examples are [vuex-pathify](https://github.com/davestewart/vuex-pathify) and [vuex-map-fields](https://github.com/maoberlehner/vuex-map-fields),1532370348.0
tweettranscriberbot,"^The linked tweet was tweeted by [@alexjoverm](https://twitter.com/alexjoverm) on Jul 23, 2018 07:28:03 UTC (23 Retweets | 95 Favorites)

-------------------------------------------------

🦄Interesting [@vuejs ](https://twitter.com/vuejs ) tip: you can use a computed property with get and set in combination with v-model to easily read and write from a Vuex store. 

[Attached photo](https://pbs.twimg.com/media/DixfLPCVAAAbEFX.png:orig) | [imgur Mirror](https://i.imgur.com/AoUclJn.png)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1532370244.0
archivedsofa,"Maybe the bootcamp format could work if the participants already know ES6/7, Webpack, etc, but I doubt someone with that skill level would even bother when the online materials are more than enough. So basically you would be targeting front end dev novices.

You could cover a lot of material in 1 week, but assimilating all that material would take much longer than that. I think that is the reason bootcamps have been going out of business lately.

I think there is value in providing a structured path to follow and being there when the student needs you, but maybe the bootcamp format is not so great after all for something like that.

Just my opinion.

Edit: http://hackeducation.com/2017/07/22/bootcamp-bust",1532366087.0
readytogetstarted,"I will do this if it's not toooo expensive. Well, I will still do this if it's just go somewhere, workout, code, and make friends and you don't teach me vue too.",1532421994.0
courtintheact,"I'm currently playing around with https://github.com/laravel-enso/Enso which uses it's own datagrid component. I like the way you can use a json config for both the datagrid and edit/create forms. Still learning, so not sure how it handles custom columns/actions etc.",1532369209.0
urmyheartBeatStopR,"Sweet thanks!

I've been using CLI 2.9.6 while learning vuejs in action book. It's pretty good but when I tried 3 I got lost. The layout is pretty different. I think I'm better at vuejs now to know what's what and take another stab at version 3.",1532368955.0
multiplegeorges,"The CLI is a really massive improvement for developer happiness. Once it goes stable, I think Vue will see a ton of coverage and a good increase in popularity.

Making plugins for it is quite easy and should further increase the usefulness of Vue.",1532388638.0
Droid2Win,"I'll also recommend the official docs, as well as Academind videos. The guy who does them, Maximillian Schwarzmueller, is one of the best programming instructors I've seen in online courses. It's literally at the point where if I see he's done a course, I'll consider taking it just for that reason I like him so much. But I digress.

Here are a few bones to point you in the right direction.

First, Vue is a ""progressive framework"". Buzzwords aside, that means you don't have to completely embrace the entire Vue ecosystem all at once, like Angular, however Vue does provide far more out-of-the-box resources than React does. It occupies a nice middle ground between them.

So when you're importing the CDN into an HTML file, that's a very limited use of Vue. That's basically only good for creating some cute widgets or making a page have some simple dynamic content. However, if you're new to Vue, I would recommend doing it this way. It'll teach you a lot of the fundamentals, and the cool thing about Vue is the API is basically the same across all styles of writing it.

When working with Vue, keep in mind that everything is basically an object literal with specific properties. So ""data"" for your state, ""methods"" for your behavior, etc. Again, use the official docs, they're great. You'll find there is an easy, intuitive spot in this DSL-like API for anything you would need.

Once you have the basics down, it's time to move on to components. If you're familiar with React, you'll understand the concept of components. Vue does them with .vue files, they are single-file components. Vue uses a style similar to Angular 1.x (only it performs WAY better under the hood, React-like speed) for defining its HTML templates. You can use JSX if you really want to, but I would start with Vue's normal templates because more of the documentation out there will be based on them. A .vue file is divided into three sections: HTML template, JavaScript, and CSS. All of which are scoped to that one component.

You compose components in a similar way to React, although there are some differences. One of the biggest is that Vue components can emit events like normal HTML elements, so the parent component just has to listen for an event rather than pass down a function to the child component through props. If you've never worked with Vue before, that might sound a bit confusing, but it's something I personally prefer over React's event handling style.

You create the workflow for building components (.vue files) with the Vue CLI. Yes, Vue CLI 3 just came out, it's brand spanking new. If you find tutorials for Vue CLI 2, don't stress it, it'll still help you learn how to work with Vue in general, which is what you need right now. Think of the Vue CLI like create-react-app, it's the same concept. It'll set up all your webpack stuff and whatnot.

Lastly, like I said Vue offers more out-of-the-box than React, but it's all bundled separately. Vue Router and Vuex (state management) are separate packages but they are maintained by the Vue team, so you'll find that they are very similar in design and behavior to Vue itself. You won't need to wander through forums wondering what is the best option for this or that, since Vue already provides it all.

So, that's a nice little overview of Vue. I hope I helped clarify some things. Definitely dive in, I've found Vue to be the easiest to learn of all the JS frameworks, it's really quite nice.",1532780490.0
Impressionable-Youth,"You're going to have a real difficult time finding anything better than the official documentation, it's essentially the gold standard in technical documentation in my opinion.  If you're having trouble with that, then maybe a video tutorial would be easier to follow along with.  I'd recommend the [Academind - Getting Started](https://www.youtube.com/playlist?list=PL55RiY5tL51p-YU-Uw90qQH419BM4Iz07) playlist.",1532355154.0
niveshsaharan,Laracasts is way better ,1532364272.0
poltermouse,The docs,1532351807.0
heavyGl0w,"It would seem to me that your issue is caused because your mixin is not backed by any constant data. Unless your component is wrapped in a [`<keep-alive />`](https://vuejs.org/v2/guide/components-dynamic-async.html#keep-alive-with-Dynamic-Components), it will be destroyed (with its data) when not rendered and recreated when it is needed again. This means all of your mixin merging happens again and resets to the initial state. I'm a little fuzzy on the specifics of mixins, but I'm fairly sure this is how it works. 

You can read more about `keep-alive` on this SO [thread](https://stackoverflow.com/questions/48501978/how-to-use-keep-alive-in-vuejs), though I it might be better in this instance to set up a new vue instance to hold the data for your mixin, while still keeping it reactive.",1532369236.0
Raenix,"Use vuerx, it's officially supported by the Vue team.
https://github.com/vuejs/vue-rx",1532777583.0
nothingduploading,Keep that garbage out of vue please.,1532337476.0
r4ymonf,">coming from a React background

Cool! How do you feel about Vue after using it?",1532309448.0
a7medo778,I think the demo is down,1537053702.0
zmasta94,I'm not familiar with using Google Trends but surely you should be search Vue search term against Angular search term and React search term?,1532292306.0
Zilhah,What’s exactly are you calling on mouse move? Functions? Or are you using the mouse position data in components outside of the one that the current user is in. ,1532410127.0
gustafson75,"You nee it only once, read on router and slots to see how to glue all your components together
Https://router.vuejs.org

https://vuejs.org/v2/guide/components-slots.html",1532275015.0
ryan_developer,"There's nothing in the official documentation (that I've found) that explicitly discourages multiple instances. Components themselves are actually new named instances, so if you're using components you're already using multiple. Most of the examples I've seen all use one instance with sub components, but in the future you may find cases where multiple instances with their own sub-components works better.

Since this is a practice application, why not try it with a single vue instance and then with multiple?",1532442056.0
plainblackguy,"As many times as works well for you. I have pages with a dozen, and pages with just 1.",1532282846.0
dave__stewart,"We're now using this package at work, and have managed to completely remove Vuex from a lot of the app.

When I first arrived, Vuex was everywhere, with everything being stored several namespaces down, and a whole tangle of dispatches to do the most basic CRUD.

Now we just pull in an endpoint to our forms and call create / update / delete and globally reload (using Vuex)

    this.api.update(data).then(() => this.$store.dispatch('items/index'))

I'll post some more examples in the next few days, working on a few different ideas, including a store generator, but also a plugin, probably of this kind of form:

    this.api = new ApiEndpoint(axios, 'comments/:id')
      .use('vuex', 'comments/loadAll')

Note that all endpoints also track their own load state, so easy to do things like this:

    <error v-if=""api.error"">{{ api.error }}</error>
    <loading v-else-if=""api.loading"" />
    <div v-else>
      <comment v-for=""comment in comments"" :model=""comment"" />
    </div>",1532266243.0
-GenghisDong,"Yea this is the way to go, it's very easy ",1532296432.0
dave__stewart,"Finally got the first stab at the demo up!

- https://axios-actions.netlify.com
- https://github.com/davestewart/axios-actions/blob/master/demo/src/examples",1533002666.0
redmamoth,Does it normalize? I'm having real issues with normalizr at the moment.,1532288188.0
acklavidian,Doesn't this break the flux pattern?,1532360102.0
thiswasprobablyatust,"No, and it's unlikely to happen.

Preact and Inferno largely came from stripping away all the extra stuff needed to support React Native (and a few other bells/whistles/code things).

Vue doesn't have that, so there's really not much you can start chipping away at without taking out things that make Vue work.

So you won't find a ""compat"" package from something smaller that does all the same things, because it really isn't practical.",1532246262.0
gpyh,I think that Moon fits the bill.,1532244625.0
,[deleted],1532244954.0
lusaxweb,Github: [https://github.com/lusaxweb/vuesax](https://github.com/lusaxweb/vuesax),1532208877.0
plainblackguy,very nice,1532240236.0
dick_ey,"In your template:

    <input type=""text"" v-model=""newUser.name"">

    ...

    <div v-if=""success"" class=""text-center mt-3"">
      <h3 class=""text-white"">Success!</h3>
      <p><i class=""fa fa-user fa-3x mt-2""></i></p>
      <p>User  {{ newUser.name }} Created!!</p>
    </div>

In your script:
    data(){
      return {
        success: true || false
        newUser: {
           name: """"
        }
      }
    }",1532189807.0
stuckinspace,"I might be understanding this wrong but what actually is the issue? As in:

    user {
        name: ‘’,
        email: ‘’,
    }

Vs 

    userName: ‘’,
    userEmail: ‘’

Instantiates 1 extra observer for the parent or something? If that’s the case, that’s not that big of a deal for the benefit of readability. 

Or am I missing some n+1 thing with observer nesting or something?

I think readability can’t be overlooked too much, especially when working on team projects, and until your app gets to a point where you are actually experiencing performance problems I don’t think this is an issue. 

Also prefixing variables is definitely a type of “code smell” (not in all cases of course) but at that point you should be potentially looking at extracting to a component right? ",1532258290.0
Epick_362,"Thanks for the informative post, I’ve worked with Nuxt a little while back and it was really pleasant experience overall but I wish I knew some of these tips back then",1532181897.0
toadkicker,I also want to add if you want to ask me any questions feel free to post here or visit me in the [gitter](https://gitter.im/nuxt/nuxt.js) chat room. I'm happy to help.,1532175916.0
cheese_bread_boye,"very useful, didn't know about this website at all",1532116535.0
danpastori,"Awesome article! I've really wanted to look into Nuxt and using it with an SPA. Have you implemented SSR yet? If so, has it worked with SEO?",1532125016.0
DoktorJeep,Is SSR 100% required for spa sites? What use cases are valid for ssr?,1532134731.0
Dokiace,really? It's the same as their docs,1532084099.0
lolrogii,Use slots http://vuejs.org/v2/guide/components-slots.html,1532077975.0
DanubeRS,"I regularly use dynamic components to deal with runtime configuration.
https://vuejs.org/v2/guide/components.html#Dynamic-Components",1532085632.0
skipbridge,"This structure would probably get the job done. 

-parent component
 -> slot v-for
 - - <component :is=“childComponentKey”>",1532743639.0
thinkadrian,No frontend framework is safe enough. Always handle secret tokens server-side.,1532071155.0
scootstah,Are you talking about like an implicit grant? Client secrets in that case are less secure by necessity. It's no different than storing a session id or JWT token.,1532093567.0
vincent_g88,"I just ran it and it worked just fine, i kept entering addresses and the list changed.",1532152923.0
poltermouse,"A test I've made:  
[https://github.com/panietoar/baraton-test](https://github.com/panietoar/baraton-test)",1532036282.0
f12_amish,"https://github.com/maxdobeck/basic-app-frontend

I posted this recently but it functions with a sibling repo basic-app-api. You can see my approach to vuex but just an fyi it isn't a good example of how to make fetch requests. 

It turns out it's better to make the actual fetch request in the vuex actions and then call the other actions and setters there. ",1532050306.0
danpastori,Here’s an open source app I made: https://github.com/serversideup/roastandbrew all tutorials are listed too fee free to reach out if you have questions! ,1532063703.0
syropian,"Here's an example: https://github.com/astralapp/astral/tree/v3/resources/assets/js/store

Also, it's just `Vuex`, not `VueX` :)",1532045506.0
Wanicode,I would probably lay a script type application/json next to the div you use as root and render the json in there and read it from there in your JS.,1532025548.0
ph0am,"Maybe you could try setting `filterItems` as a `prop` of `AppFilters` component. Then you could assign your data to the `prop`. The error you get usually mean that a variable isn't properly linked to the template.

Cheers.",1532027705.0
cyrusol,"/u/Wanicode, /u/ph0am, /u/Brahminmeat, I'd like to thank you all. I tried the suggestions but I guess the main problem I had was the lack of understanding of Vue's lifecycles, how it interacts with the DOM etc. It's just __impossible__ to access the DOM element Vue's going to bind itself through Vue's properties, i.e. without `document.get....` calls. And I was confused between what I can (not) do within 'new Vue({...})' call in JS with the runtime-only build. But I now managed to create a Vue instance that ""eats"" the DOM by accessing the DOM in the render function and pass it all to `createElement`:


    new Vue({
        el: filters,
        render: createElement => createElement(AppFilters, {
            props: {
                filterItems: JSON.parse(filters.dataset.filterItems)
            }
        })
    })

And then the `AppFilters.vue` just has `props: ['filterItems']` and it's finally available. Still, thank you.

Perhaps there is a way to automate parsing data attributes this way and just have `props` populated with the same name.",1532078029.0
Brahminmeat,"Instead of defining data as json in your Vue mount, import the json like so in app.js

```import 'filters' from '.../pathtojson'```

Then in the `mounted()` lifecycle hook for your Vue initialization, run this

```Vue.set(this, 'filters', filters)```

Prob not perfect as I'm writing on phone, but hope that helps.",1532024419.0
jimithatsme,"It’s pretty straight forward in the vuejs documentation.  I got the list move transition to work following this doc, and with very little code.

https://vuejs.org/v2/guide/transitions.html",1532050714.0
tonjohn,I almost worked at Skilljar! Thanks for the great write up :),1532033070.0
cyberst0rm,Webpack 4 is broken,1532039589.0
eyeruleall,"https://router.vuejs.org/guide/essentials/passing-props.html#function-mode

It sounds like the team should be a prop that you can then use a function with to return the proper cards.",1532012607.0
,[deleted],1532007931.0
creatio_o,"From what backend environment are you coming from?

> Anyhow, installed a router (the routes just dont work as you would expect a route to work)

What exactly does not work as you would expect? 


> , why is it so hard to put a different layout like when the user is logged out vs in, the route that wasn't logged is using the logged out component, and the children are in that view router (same for logged in)... a store in place (mutations yay) 

I think you're thinking of [Dynamic Components](https://vuejs.org/v2/guide/components.html#Dynamic-Components), which is found on components guide page and the API documentation on the [`component`](https://vuejs.org/v2/api/#component) component. I must admin, initially I didn't see a use for dynamic components, since you could just `v-if` the components, but, this is more elegant I think. And what you might be looking for.


> it was supposed that vue SFC hat styles defined in them that where supposed to ""live"" as long as the component is in the dom... NOOOOOOOPE, my two layout components that both have different styles import, both are present in the dom, even though only one layout component is active... 

Are you using the [`scoped`](https://vue-loader.vuejs.org/guide/scoped-css.html) attribute on your styles? 


>And now the cherry on top, when building for production (to test, npm run build), the stylesheets are compiled in a different fucking order vs what I actually wrote in my code, like did frontend devs forgot that stylesheets cascade, the order is very important (nope again, there are outstanding git issues, months maybe years and this is not an easy fix) (who the hell has time to learn all that webpack configs or just write a new one from scratch [again, more wasted time]) 

Interesting, you have a link to issues? I'm assuming you meant github issues.

Anyway, it seems you issue is more with the frontend environment (atleast the webpack version for vuejs) itself, and not really the language itself.",1532009928.0
BultacoMetralla,I'm another backend guy. I cannot agree more with you. ,1532007483.0
hwutang,"I think you're trying to do too many things all at once. Try with only one technology that's new to you at a time, then slowly add more as you get more comfortable. Vue, Webpack, a store/state, and javascript too it sounds like? I can see why you're so frustrated when you're being stretched so thin amongst all these new things. Maybe try just building an application without any framework, to see if javascript actually is what you hate (it might be, it's not the prettiest language).

P.S. webpack is a beast, and it was designed like that. I wouldn't have even gone near it if i were you.",1532017206.0
endjynn,"This is great and all but by definition a modal window is blocking :)  
As in, the user must complete the modal action before continuing.",1532003674.0
r3dh4r7,"Modals should block their parent.

Fix this as the default, then maybe use props to disable blocking on demand.",1532005720.0
_pearofducks,It isn't readily parseable. It's written by a non-native English speaker. There are quite a lot of sentences on that project page that simply mean nothing or need clarifiaction.,1531996027.0
thinkadrian,"That area chart is horrible. There is no indication on how little ""Admin"", or ""Sales"", that turquoise area has.

[link to image](https://camo.githubusercontent.com/8708a8dcb49d365b1786a5093d8f3fd37aeb18a2/68747470733a2f2f7770696d672e77616c6c7374636e2e636f6d2f61353839346331622d663661662d343536652d383264662d3131353164613038333962662e706e67)",1531999831.0
LynusBorg,"I think the author just tries to say that this project aims to be used as an admin GUI for the backend for an application, not as a template to build a user-facing frontend upon.

I would assume he's just trying to clarify in which direction his vision for this project is aiming and what kind of contributions in that direction he would accept.

But s others have said, this seems to be poorly translated (not the athors fault, I don't know any chinese either), so it's more of a guess.",1532026535.0
DukeBerith,"I'm not a fan of the fact that they are using Vue as if it were react, but then blames Vue for being ""buggy"" when the only reason they think it is buggy is because their code is just not vue-like.

Here's the exact same logic, ""bug"" free, and more vue style

      const vm = new Vue({
        el: '#app',
        template:`<main id=""app"">
          <h1 class=""score"">{{ score }}</h1>
          <button :class=""{selected: vote === 1}"" class=""upvote"" @click=""upvote"">↑</button>
          <button :class=""{selected: vote === -1}"" class=""downvote"" @click=""downvote"">↓</button>
      </main>
      `,
        data(){
          return {
            vote:0 ,
            initial_score: 100 // pretend it came from the server this way
          }
        },
        computed: {
          score(){
            return this.vote + this.initial_score
          },
        },
        methods :  {
          upvote(){
            this.vote = this.vote === 1 ? 0 : 1;
          },
          downvote(){
            this.vote = this.vote === -1 ? 0 : -1;
          },
        }
      })

Upvote and Downvote can be merged into a single method if you have the urge to do so


The logic breakdown: The votes can be either upvote, downvote, or neutral. From upvote you can only go to neutral or negative, and from downvote you can only go to neutral or positive. Each time you click one of the votes it determines the current state, then sets the vote direction. The score is computed by adding the `vote` to the `initial_score`. 

",1532041719.0
thinkadrian,"React

`button onClick={() =>` [`this.vote`](https://this.vote)`(1)}`

`button onClick={() => this.vote(-1)}`

should be

`button onClick={this.upvote}`

`button onClick={this.downvote}`

to not init an anonymous function every time a button is clicked. you gain a teensy bit of performance improvement, and it's encouraged when you have the choice.",1531990483.0
yuyaaaar,what is this vscode theme?,1531991921.0
marinespl,The logic behind vote() method in React is so bad I've stopped reading. Like WTF.,1531997619.0
nothingduploading,all garbage except vanilla and vue.,1531989514.0
oweiler,Hyperapp blows all other frameworks out of the water. The only thing that's currently missing is a good component library.,1532014588.0
f12_amish,"How are you rendering your routes?  Are you using router link or anything like below?

https://router.vuejs.org/api/#exact-active-class",1531979956.0
N3KIO,"i use expressjs/koajs, so no idea how flask works, sorry

the way it should work is, you generate token on server, save it to database for the user on the server, user logins in vue, the token is pushed from server to vue, you use the localstorage in vue to save the token, then you use it in auth throughout the vue application.

that's like the bear minimus gist of it.

",1531966613.0
rayshinn,Just use node instead. ,1531964743.0
xneo27,Why not just watch your route params and act on change?,1532098685.0
kirbyfan64sos,"Huh? You can put as many script tags as you want, but they have to be in your main .html file. ",1531924820.0
vinnyfs89,Did you tried this? [https://www.npmjs.com/package/vue-google-picker](https://www.npmjs.com/package/vue-google-picker),1538211420.0
jemminger,"SFC, it's just great to have everything in one file",1531884086.0
gallowdp,"In my experience SFC is way more readable and clean looking than JSX. Also after working on a project with React/JSX for over a year, I still type out class instead of className and those few seconds of frustration add up over time.",1531886187.0
archivedsofa,I switched to Vue in part to move away from JSX...,1531891293.0
syropian,"I think you have your terminology confused. `SFC` stands for ""Single-File Component"". SFC can contain a template, script and style tag. You use templates or JSX _inside_ SFCs.",1531920715.0
rufescent,"I’m definitely more of a React fan so that probably sways me, but having gone through the transition from Angular1 to React and being thankful to be rid of templates, when I do use Vue it’s with JSX. They’re still SFCs though because you can include style. ",1531915421.0
segphault,I use neither. I put my Vue templates in template literals and define my components as plain objects. I want to write completely standards-based code and avoid locking myself into heavyweight boilerplates and transpiler-based tool sets. I have no build step during development. The modest advantages of using SFC don’t justify the additional tooling overhead and complexity in my opinion. JSX is so gratuitously non-standard that I consider it unwise to use at all.,1531927766.0
1makfly,For me SFC is so much cleaner than JSX. I've been working 6 about months with each framework and very much prefer SFC for its readability and tidiness. I like the clean structure and separation (on top of that a good set of linting rules helps to keep your code maintainable) that VueJS brings in. Obviously that's just an opinion. :) ,1531905478.0
fzy_,"Both. Mostly SFC but JSX can be useful for more advanced rendering logic, like recursive constructs.",1531914859.0
vuestrik,"I mostly use SFC, it feels much cleaner and readable. On the other hand, at least the TSX in React is unbeatable in terms of type safety and tooling (autocomplete etc.) if this is your preference. I have not tried this combination with Vue but if it's close to React then this might be a reason why I would consider to use JSX (TSX) with Vue even for standard scenarios.",1531950801.0
SandFriend,"This is happening because you are using the loop index as your v-bind key. If you use a unique value on your campaign object such as a database ID then Vue will be able to properly update your components when the array data changes. 

https://vuejs.org/v2/guide/list.html#key",1531893419.0
majorius,"The question is how you are setting the nested property of settingsData.campaigns.
Maybe this will help
https://vuejs.org/v2/guide/reactivity.html
(Vue.set)",1531885414.0
Brahminmeat,One of the gotchas. You'll have to update the whole array with the new value. Vue will not watch a single value change in an array without help.,1531893100.0
Sphism,Vue.set usually sorts things like that out. ,1531895553.0
toqy,"I haven’t started a new project in a while, but back in the day depending on which project type you generated it came with webpack dev server which is what you are looking for ",1531876985.0
tabtabtabtabtabtab,This is what I was looking for:  [https://github.com/vuejs/vue-cli/issues/1120](https://github.com/vuejs/vue-cli/issues/1120) then I found [https://www.npmjs.com/package/vue-cli-plugin-build-watch](https://www.npmjs.com/package/vue-cli-plugin-build-watch). ,1531879608.0
madeintaipei,"I bought this a week ago and have started it (not complete yet), but so far I am very impressed with the course. Definitely one of the better course I purchased on Udemy.",1532102576.0
VIM_GT_EMACS,Time for me to shamelessly plug Nuxt - its the shit. ,1531866574.0
readitmeow,"I've been in the market for 2 months, it's a shame that there are so few positions that mention Vue. React is fine and I've been using it daily for over a year, but Vue makes working on the frontend a pleasure I don't experience with other frameworks.",1531884068.0
AndyJessop,"> In the frustratingly fast-paced, ever-shifty and profoundly fashion-driven JavaScript web development ecosystem, it’s not easy to find something that one can even stand to use,

Balderdash. Some libraries I've enjoyed using over the last 2 years: React, Vue, Cycle, Svelte, Stencil, Redux, RxJS, Most, I could go on.",1531862259.0
urmyheartBeatStopR,"I share the same sentiment. I left the industry after ember vs angular 1 shit, and I did web dev for 6 years.

The first paragraph encapsulate my experience with front end. I left industry for a graduate degree and now I have an internship as a ""data scientist"". In reality I'm just doing web app. I chose to replace the legacy code angularjs 1 with vuejs. It's fucking beautiful and better than ember or angular 1 bullshit. VueJS seems to be well thought out even though I know very little about ES6. It gives me so many options of help make my code clean and organize. 

",1531890081.0
Brahminmeat,"Just a beginner with vuex myself, but have you tried overwriting the whole object in question using Object.assign?


```
let contentsNew = {
    new: var
}

contentsNew = Object.assign(state.contents, contentsNew)

Vue.set(state, 'contents', contentsNew)
```",1531851516.0
archivedsofa,"> Adding a dozen items can take almost 1 second

I've had Vuex stores with thousands of items and never saw a performance slowdown.

Why do you need to use `Vue.set`?

Have you tried flattening your data as much as possible?",1531845842.0
f12_amish,I thought this might be cool to share and get feedback on. I have a lot of operations type stuff going on too in case you wanted to deploy to heroku or AWS S3. ,1531841882.0
smartapant,"Hello everyone!  


We stand behind [https://github.com/epicmaxco/vuestic-admin](https://github.com/epicmaxco/vuestic-admin) and [https://github.com/epicmaxco/epic-spinners](https://github.com/epicmaxco/epic-spinners)    


Soon my team will start sharing a great content including our products updates, web development articles and cool stories about our little software development team's day-to-day struggles.     


We're Vue.js fans, so we'll be also sharing helpful materials and open source projects that will definitely help you become a better Vue.js developer.    


We promise to be unobtrusive and helpful, so don't be afraid to subscribe 😇",1531827199.0
gabriel-et-al,Exactly. Many devs who are new to reactive programming do this. They're used to think in terms of side effects so it's natural for them.,1531828237.0
ataraxy,"Is that really a common occurance? It always made immediate sense to me that was the point of computed properties. I tend to only use watch when I need to trigger something else based on a value change without having the luxury of triggering it by the user directly.

For example, a user would modify a value in a slider to change a color of something within a canvas that couldn't be bound directly to the model. I use watch there to watch for the value change and update the color. That sort of thing.",1531846841.0
paladincubano,"So dirty!!!

computed rocks!",1531860345.0
wishinghand,What are things best suited for `watch`?,1531874190.0
Dokiace,"I still don't get it.

Let's say that I want a filter an array if my 'sort_A' is true, should I watch it or compute it?",1531843812.0
,[deleted],1531823304.0
irphunky,"`beforeEach` runs before the route changes, so this will happen before the routes component is created.

If your wanting to persist vuex with local storage you'll be better using https://github.com/robinvdvleuten/vuex-persistedstate rather than rolling your own.

But just so you know, you can import the store into your router and then check the dispatch the event directly from `beforeRoute`.",1531825693.0
danpastori,"You can also do a watch on Vuex data. This way once the data has been loaded and ready for access, you can do whatever you need to for the navigation. The watch method would be something like this:

    function requireLocalStorage( to, from, next ){
       function proceed () {
    
        if ( store.getters.getLocalStorageSession() == 2 ) {
    
          next();
          /*
            or next('/route-name');
          */
        }
    }
    
    store.dispatch( 'ASSIGN_LOCAL_STORAGE_SESSION' );
    
    		/*
    			Watch for the assignment. When ready, proceed
    			we proceed.
    		*/
    		store.watch( store.getters.getLocalStorageSession, function(){
    			if( store.getters.getLocalStorageSession() == 'WHATEVER' ){
    				proceed();
    			}
    		});
    }

In proceed, you can direct the user where they need to go. This would be the method as the beforeEach() method.",1531848091.0
irphunky,FYI you can use [$ref](https://vuejs.org/v2/api/#ref) to access a DOM element and then play with it as you would usually.,1531816424.0
p01ymath,I solved this issue by using `@submit.prevent='methodName'` and by using SubmitEvent in the method!,1531814660.0
namanyayg,"I don't think there's any way for the client's site to dynamically pull in your source Vue components. You'll probably need to maintain customer cart state completely on the client's side, and only send it to your new app when the customer wants to check out. 

If the client's site already has an ecommerce cart architecture (and thus supports 'add to cart' functionality with cart icons, etc) then you can simply modify those existing functions to redirect to your app on checkout (possibly with GET parameters). You'll also need to change your app to allow this.

Modifying the client's existing site to support Vue might cause things to break and would be too much off a hassle, in my opinion. If you're interested in additional assistance with the approach I mentioned, feel free to send me a message.
",1531802494.0
archivedsofa,"The back button should work out of the box either in history mode or with a hash.

> reload and direct access to URL are not triggering content loading using router-views

Are you running on a server online or with the local dev server?",1531781714.0
modic137,Mode is to be added to router object not to vue instance in main.js ,1531879806.0
TheDecentM,"Welcome! 
I think it would be a good idea to look at GitHub issues that have ""help needed"" tags or similar.  

If you can't find anything you fancy trying, I'd personally love to see some sort of integration or synchronisation between Apollo (GraphQL) local state and Vuex. ",1531776655.0
ataraxy,That's a pretty cool take. What's going on in the backend?,1531847269.0
oweiler,So much Penis...,1531751417.0
benabus,This is brilliant.  I used similar apps as exemplars in my master's thesis.,1531753292.0
new_human_obj,"wow that's pretty cool, but yeah hahaha that's people for ya hahaha",1531797486.0
archivedsofa,"The problem is that computed properties cannot be async. For this example use a method instead and save the results into component state.

Although ""the right way"" would be to be to have a data fetching module and put the results into Vuex or a [Vue instance that you use as a store](https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch) which would feed your components.",1531746180.0
Sphism,You can’t have a tags inside a tags in html. So that whole block will link to github. You could add an on click event to each icon then change window location but that seems like an odd approach. ,1531738715.0
Reminice,"Actually, its quite easy. Simply change the data object from an array of icons to a multi dimensional array of objects, then, just wrap the `v-icon` in an anchor tag with the appropriate values.

ex:
```
<template>
  <v-footer
    dark
    height=""auto""
    fixed
  >
    <v-card
      class=""flex""
      flat
      tile
    >
      <v-card-title>
        <strong class=""subheading"">Get connected with us on social networks!</strong>
        <v-spacer></v-spacer>
        <v-btn
          v-for=""icon in icons""
          :key=""icon""
          class=""mx-3""
          dark
          icon
        >
          <a :href=""icon.url"" :target=""icon.target""><v-icon size=""24px"">{{ icon.name }}</v-icon></a>
        </v-btn>
      </v-card-title>
      <v-card-actions class=""grey darken-3 justify-center"">
        &copy;2018 — <strong>Vuetify</strong>
      </v-card-actions>
    </v-card></v-footer></template>
```
    
     export default {
        data: () => ({
          icons: [
            {
                name:'fab fa-twitter',
                url: 'https://www.twitter.com/',
                target: '_blank'
            },
            {
                name:'fab fa-github',
                url: 'https://www.github.com/AfricanTurtles',
                target: '_blank'
            },
            {
                name:'fab fa-linkedin',
                url: 'https://www.linkedin.com/in/AfricanTurtles',
                target: '_blank'
            },
            {
                name:'fab fa-instagram',
                url: 'https://www.instagram.com/AfricanTurtles',
                target: '_blank'
            }
          ]
        })
      }
    
    ",1539797467.0
iltegin,[https://github.com/abdullah/vuex-module-generator](https://github.com/abdullah/vuex-module-generator),1531696517.0
zevdg,"For the PWA part, I'd start by installing the beta of the Vue cli v3 and using the PWA plugin https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-plugin-pwa/README.md

Then you'll want to learn about service worker, the cache API, and indexedDB

https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/offline-for-pwa

Good luck!",1531689874.0
tonjohn,"While service workers might be the “right” way to do it, you can probably just start by storing data with indexeddb and pushing it to the server when the user comes back online (Navigator.onLine)",1531704352.0
defaultbr,Take i look at this SO question: https://stackoverflow.com/questions/51335678/pwa-wrong-to-consider-api-cache-instead-of-db maybe it ca  help a little,1531707820.0
AlexJoverM,"Hi! First you'll need a service worker to make your app work offline by caching the static resources. In this link I quickly explain how I did it with my blog https://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/.

Then you'll need a runtime way to cache that user data. Since the data seems dependant on the current user, the best you can do is to use a tailored way that you have control over. Best you can do is to use localforage https://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/",1531696886.0
Alskttiio,Why is this posted? ,1531684122.0
buddythicc,"Could you create a jsfiddle or a codepen so folks can see actual code? Without seeing specifics, I can only comment from a high level.

One method to solve this would be to create an event handler for the add-to-cart button that fires on click (and/or when someone presses ""enter"" within the quantity input). 

FYI, you can attach event handlers with arguments directly in your Vue template:

```
<button @click=""(event) => { addProductToCart(event, product) } />
```

If you're binding the quantity input to data in the Vue component, it'd be easy to pull that information within your addProductToCart event handler and then trigger a call to your ecommerce backend with a request to add X amount of product Y to the cart.

Happy to take a peek if you can share some code!",1531681058.0
eclev91,Would making each row its own form solve the issue?,1531695538.0
crespo_modesto,"Making an ass of myself right here:

Hmm curious, why is it here?(vue)

I think I read there's pros/cons to using what are these called ""transpilers?"" where they compared React Native to Android... Although React Native is not as good of a comparison as ElectronJS to desktop apps. I think they have other ones like PhoneGap and what's the one for .Net/C ... Xamarin that's it.

Well I'm obviously confused but are these always limited since they're not as ""close to the metal"" with the native language eg. Android/Swift maybe you can't access as many system level processes. Or does the native language bridge to this by abstracted interfaces.

At any rate, it's great though I mean you don't have to learn as many things to access all platforms. I like Electronjs.",1531608102.0
jaredcheeda,"Electron support, but no NW.js support. Pity",1531669686.0
jaredcheeda,"Electron support, but no NW.js support. Pity",1531669705.0
paul_h,"Selenium co-creator here (v1, 2004). The site does not mention Selenium or WebDriver. I'm not going to buy a technology until I know what UI test automation looks like for me as a developer and my army of CI nodes.",1531720283.0
Kindrik76,"local storage does not expire. I would push the items into an array, then store that object into storage, when they log in, you can populate that cart with the items in storage.",1531572615.0
spays_marine,"Store an identifier in the cookie (like an ID) and keep the data in your database. You don't need to check the IP, you're just storing cart contents, and would need physical access to someone's PC to steal the cookie just to get a collection of items on your website. There's nothing to gain from doing that.",1531572842.0
slaphappie,"Use local storage, infact use this library https://github.com/localForage/localForage it will choose the best client side storage method automatically based on the browsers capabilities. It usually will use the browsers database because of its speed.",1531578907.0
reversiblehash,"/u/p01ymath I think that it depends on what your goal is for your e-commerce is. 

An example reason to push cart items to a database is to record items often looked at together, to develop heuristics for suggested products algorithms. 

db storage is fairly cheap, start storing this sort of information from the outset, and your dataset can be a very valuable resource down the line.

this isn't really a vuejs question though, its more of an application architecture problem. I'd xpost over at /r/learnprogramming they are a community with a bunch of folks at all levels that can give you the pros and cons of various architecture decisions.",1531579122.0
Pedrock10,"This is usually stored on the database, so that you can get information about the abandoned carts.",1531600279.0
Veloxy,"Either options come with pros and cons, if you store cart items client side, you lose the ability to notify users of stock or price changes (if they have accounts at least) of items they have in their cart. I suggest you think about possible future features you might want/need and figure out if that's possible with client side carts.",1531652905.0
Heyokalol,RemindMe! 2 Days,1531571975.0
Sphism,I’ve only ever used js files in vue. No idea how you’ve set it up to use ts files. ,1531558013.0
Eloiole,Take a look at the webpack config if any to see how it resolve URL.,1531551406.0
skipbridge,Are they in /static/ or /assets/? Asset assets get a hash that can mess up the path and static assets don’t. ,1531576964.0
p_r_m_n_,"You should be able to access it is using `store.state.account.loggedin`.

    import store from '@/store'
    ...
    const routes = [
        ...
      {
        path: '/protected',
        component: Protected,
        beforeEnter(to, from, next) {
          // console.log(state) 
          store.state.account.loggedin ? next() : to('/login')      
        },
      },
    ]

Probably need some more info regarding the state.route especially how it is saved. You can get information about the route from the route object [https://router.vuejs.org/api/#the-route-object](https://router.vuejs.org/api/#the-route-object).",1531536061.0
zaratedev,Thanks for the series of vuex. ,1531540595.0
botojomomo,"Sorry to say, this isn't great. I'll try to give you some constructive criticism because it seems like you want to produce useful content, and I don't want you to get discouraged by harsh feedback. 

Firstly, who is your target market with this? When you want to teach something, you have to explain why you made certain decisions, what the trade offs were, and most importantly actually explain how things are working. This is basically a Github gist - there's no explanation of your choices, no outline of how things work, just some code with a couple of comments.

Here is some critical feedback questions that came up when I looked at it that I as a reader want to know why you made these decisions:

- Why'd you structure the CSS like that with base element selectors instead of with classes? Specificity is very important for extensibility especially when building reusable components.
- Why did you choose to use `refs` instead of getting the file from the event? Vue suggests that you use `refs` only when there is no other way to accomplish something.
- Why are you validating the file extension rather than the FileReader mime type? Someone could easily upload `virus.exe.jpg` by testing the file format. 
- *""We set the image-uploaded which is the div around the field to be relative.""* This is a statement of fact that can be read in the code above. Why did you do this?

I think we always want to encourage more Vue content, and I hope that you continue to improve your output. I think you could make a big boost to the quality by challenging yourself to explain ""why"" and ""how"" more.",1531492786.0
CharlesWiltgen,This would appear to have only positive repercussions. Why would this be a concern for you?,1531438140.0
koehr,"Until now, Vue is written with Flow and I guess you didn't even notice that. So don't worry, you will not be forced to use Typescript and at the same time Vue development benefits from it.",1531477560.0
BoleroDan,"I'm just curious. even if the project owners decided to write Vue with Typescript, how does that affect you or your code?",1531437851.0
pull_my_finger_AGAIN,"TypeScript just compiles to JS, similar to CoffeeScript but solving modern problems. By the time you, the end user, deal with a TS project, it *is* JS. Saying you have a problem with a project using TS is similar to saying you have a problem with them using unit testing during development. ",1531444681.0
archivedsofa,"If that's true it's actually a great idea.

SPAs are becoming really complex and the lack of types in JavaScript is not helping.

I'm actually considering trying Angular because of TS and because it has better architecture than Vue.",1531439696.0
Gold3nstar99,"While on this subject, does anyone have a good tutorial for combining Vuex and Typescript?",1531493081.0
KiNgOfSpEEdOJaCK,"A Javascript beginner considering Vue.js here. Why Typescript with Vue 3.0 is bad? And if not, then what the good we will get from this?",1531516299.0
,[deleted],1531440258.0
imGnarly,"A new front end dev came to our team and I was showing him the Vuejs basics. We ended up building this in a little over half an hour. I love Vue and Css grid, makes things so simple.

Of course this is definitely not the best version possible, but it really works if you wan to show off the awesome framework your office uses. I hope it comes in useful to someone.

don't restart before it's finished haha… we didn't take the time to fix that",1531435972.0
enkafan,not sure if I'm going crazy with this already having 5 upvotes but this just points to a random dice codepen,1531445225.0
redberryofdoom,"It's certainly a nice, visual reminder of how not random random number generators tend to be.",1531480310.0
batahkoinonia,Would you perhaps be able to push your code to a git repo? It’s hard to give much advice without seeing your code unfortunately?,1531451226.0
WerGimity,doc site is broken on mobile :/,1531426579.0
r3dh4r7,I don't fancy UI libraries that present demos and docs in unresponsive pages. Says a lot about the effort on perfection (which is absolutely required in this field),1531483858.0
pull_my_finger_AGAIN,When you go to a site for Vue Components and their buttons don't work 😑,1531443587.0
botojomomo,"What is the use case for this when bootstrap-vue exists already? It looks like the exact same thing.

I was hoping for a component library that had no ties to any style framework. :/",1531496032.0
ahackersday,"It's a nice site!

I would maybe do something with the pagination. The next button appears to be placed too far to the right and when I see a (1) and no other number I automatically think that there are only one page.

Other than that I must say that this is a great way of learning :-)",1531458446.0
pd-andy,Do you have a more real-world example? It feels like your 'sub-component' is more the parent in this instance.,1531413938.0
brainbag,"You can't extend templates in Vue. Your options are:

1. Use Pug to [extend the templates](https://vuejsdevelopers.com/2017/06/11/vue-js-extending-components/) like how you're envisioning. I tried this and it's a hassle, but it does work.
2. Use the parent component in the child component as both `extends: Parent` and `components: { Parent }`, then use `<parent />` in the template. [I outlined how to do this here](https://github.com/vuejs/vue/issues/6811#issuecomment-401044165). 

Lots of discussion about it here: https://github.com/vuejs/vue/issues/6811",1531496411.0
MrMaverick82,Unfortunately it doesn’t work on mobile. ,1531426358.0
batistr,Great work! I have learned so much from this article.,1531401341.0
phyllotaxis,"Its usually pretty trivial to convert a web component to a Vue component, so unless this company header is really really complex, I bet you'd be able to re-write it in less time than it will take to research a solution for importing it natively :p",1531337528.0
DandyRandysMandy,Is this [Article](https://alligator.io/vuejs/vue-integrate-web-components/) any use?,1531335756.0
i_am_unco,Scrimba is amazing ... and built on ... not vue,1531335834.0
shitty_instagram,"Last time I tried Scrimba, it seems to be buggy for Firefox. ill give it a shot again.",1531402572.0
arne,Where can I find info about pricing? Having to give you my e-mail before I get information about pricing make me not wanting to give you my e-mail.,1531305369.0
Gazzooks,have to purchase pro version to get vue. pass,1531301168.0
AmishPanda00,"I just open sourced my boilerplate frontend + API. My router might help you. But look at the vue docs on routers. 
https://github.com/maxdobeck/basic-app-frontend


https://github.com/maxdobeck/basic-app-api",1531696422.0
nothingduploading,It prevents the default behavior which is to submit the form.,1531270174.0
koehr,I wrote this as an abstraction to OpenLayers with the goal to make it very simple to use instead of just wrapping their objects into components. I need feedback to learn what people need and expect from such a library.,1531252208.0
shanmukhateja94,"Hey there, your project seems interesting however I'm on mobile most of the time?

Would it be possible for you to host a demo website with this project? It'll b le really helpful.",1531542147.0
pkej,"Clustering would definitely be one thing. Different map styles. Maps that supports transitions, for example zoom in or pan when shifting from one map to another. ",1531856072.0
thisisprobablyatust,"I'm all for well reasoned discussion/critique, this is not that. But we can quickly wade through the author's crappy points:

* ""Vue handles this neatly with a two-way reactive data-binding system."" —— Nope. Not two-way.
* First bitches about component syntax, then says: ""Vue also offers a class based syntax, but it’s really more of an afterthought."" —— Exactly what part of it is an afterthought? Handwaving the counterpoint to your bitching doesn't make it any less of a counterpoint.
* ""If you hit a roadblock the chat is probably your best bet since the official forums are a desolate land, and don’t you dare ask a question on Github."" —— First off, the forums get _great_ answers, and almost always within 24h. Using Github issues for questions is pretty commonly known to be bad practice, so this is a pretty childish point to make.
* The ""Not so magic"" area. These all feel pretty nit-picky, and I'd be fine with them being listed. But closing this section with ""it seems every time you start scratching the surface another minor annoyance pops up"" is just more childish bitching without justification. Everything in this field has minor annoyances and some functionality that works in less-than-perfect ways - IMO the difference between a ""good"" quirk or a ""bad"" quirk is when the quirk is driven by necessity (IIRC the reactivity system is driven by underlying JS functionality, not ""oops we missed that"").
* ""is it better to handle API requests in your components or in Vuex?"" —— why is this an ""ugly""? There's zero justification for why this is considered such a wart besides ""no one told me how and I can't figure for myself"".
* ""But, convenience always has a cost and, in my opinion, that cost is not justified here. Webpack is not as difficult as a lot of people claim it is and creating your own starter kit will alleviate most of the configuration time."" —— Written like someone who has never been through a major Webpack revision. Vue CLI isn't for everyone, but it will avoid those who want to completely avoid all the bullshit that comes with Webpack-yak-shaving and get best-practice implementations that can be iterated on instead of ejected from.",1531245369.0
SecretAnteater,Posted recently.,1531261343.0
archivedsofa,"This is wrong on so many levels.

1) The JWT in `localStorage` should be refreshed and validated by the server before the application starts.

2) Authentication and authorization logic does not belong into the router or the components. Neither do http requests in components. These are architectural code smells.

3) Using `localStorage` to store application state is lazy. It makes sense to store the JWT there because we need persistence, but user info should go somewhere else. A Vuex store, even [using a Vue instance as a store](https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch), but definitely not `localStorage`.

4) Where is the logout logic?",1531250769.0
namanyayg,"That definitely works for a smaller project, but Vuex (or more exactly, the Flux architecture) allow an immutable and enforces unidirectional data flow that make larger applications easier to reason about.",1531198106.0
NukeMeNow,This is what I do. No issues personally.,1531195560.0
TerryZeng,"Maybe your can try this way  
`Vue.prototype.yourObject = {};`  
  
And in your every page/component use to `console.log(this.yourObject)`
",1531197794.0
matzeso,I think this is not a good tutorial. Too boring for intermediates and too hard for beginners. ,1531217258.0
twentz0r,"Cockpit is really cool! We've built this with regular Vue and cockpit on the back: [http://india70democracy.net/](http://india70democracy.net/#/). The only thing I'm really missing is having slugs instead of IDs so I can fetch posts without passing IDs as either props or queries. But aside from that it's super easy to use. We're using a custom made CMS and even Netlify CMS now though, but for newcomers I'd say cockpit is the better option.",1531178561.0
archivedsofa,"    <router-link :to=""to()"">prev</router-link>

And then create a `to()` method in your component that returns an object in any way you prefer.",1531164319.0
anamorphism,"if you really want to inline it `searchTerm ? {query: {q: searchTerm, p: currentPage - 1}} : {query: {p: currentPage - 1}}` would probably work.

but, i'd just make a quick method or computed prop to do that in an easier-to-read way and bind to it.",1531163430.0
InuAlias,"I had exactly the same issue just a few days ago. The solution is to call `reset` on recaptcha component in `beforeDestroy` hook. I have wrapped `vue-recaptcha` in another component to handle that, as well as include recaptcha script on first render.",1531699633.0
konaraddio,"I built a Vue.js web app that turns your smartphone into a 3D controller (think Wii remote). No need to install a mobile or desktop app.

Just visit [web-riimote.herokuapp.com](https://web-riimote.herokuapp.com) on a smartphone (it'll be your controller) *and* a laptop/desktop (it'll be your display). [Here's a video showing it in action](https://www.youtube.com/watch?v=O2r1-lR6Xq8). Works best in Chrome.

This project was inspired by the [2016 Android Experiments Winner](https://experiments.withgoogle.com/3d-controller). The 2016 Android Experiments winner turns your smartphone into a 3D controller using Chromecast and an Android app. But `web-riimote` demonstrates that it's possible to do the same with only a web app.

Built with Vue.js and Node.js",1531142423.0
Robodude,"This is pretty great!

There is an issue with the 'pointing at the screen' feature. it's only detecting when pointing directly away from the monitor and as a result the controls are inverted.",1531149787.0
Schpaencoder,That’s what feminism does I guess ,1531154867.0
Heyokalol,Why the need to restrict access to women only?,1531151859.0
konaraddio,"I built a Vue.js web app that turns your smartphone into a 3D controller (think Wii remote). No need to install a mobile or desktop app.

Just visit [web-riimote.herokuapp.com](https://web-riimote.herokuapp.com) on a smartphone (it'll be your controller) *and* a laptop/desktop (it'll be your display). [Here's a video showing it in action](https://www.youtube.com/watch?v=O2r1-lR6Xq8). Works best in Chrome.

This project was inspired by the [2016 Android Experiments Winner](https://experiments.withgoogle.com/3d-controller). The 2016 Android Experiments winner turns your smartphone into a 3D controller using Chromecast and an Android app. But `web-riimote` demonstrates that it's possible to do the same with only a web app.

Built with Vue.js and Node.js",1531137688.0
ThatSpookySJW,It might be caused by another font loading over it? ,1531139511.0
MrHudson2212,Vue and patience.,1531130237.0
keeper7k,"Stylus, if you want to mess with the themes (or change the default icons etc)",1531201180.0
thinkadrian,"Vue is Vue, React is React. Angular is Angular. You don't need to know one to learn the other. They are all JavaScript front-end frameworks that connect to some database for data. But Quasar uses Vue.

Django is a full-stack framework, thus overkill if you're going to build something from scratch. You only need some API to fetch data from. That could be anything from running a Python or NodeJS server somewhere, or host a database on AWS or try Contentful. The latter has a free tier which is perfect for early stages when you need to focus on building the app rather than managing a back-end.

Then I suggest just trying Quasar and google every step you don't get. The best thing to learn is to just jump into the deep end.
",1531130683.0
wishinghand,"If you want to keep using Python, look into Flask for building a more basic API. Knowing the basics of REST and how it works on the front end is key. An HTTP request library like Axios will make it fairly easy for you.

But really you just gotta know: Javascript, Vue, Stylus (for reasons that /u/keeper7k  said), and a bit of HTML. You won't use HTML as much as Quasar components though.",1531290548.0
ISNT_A_NOVELTY,"Would be great if the example on the home page was an actual, interactive example instead of a jpg. I clicked it and was just taken to github.",1531195472.0
brainbag,"This is really impressive. There's some minor issues (typing doesn't do any filtering, center/right alignment boxes don't handle screen edges like the left align one does) but this is the nicest of all of the select boxes I've seen. Do you plan on having a drop down chevron style built in? That's the only thing missing other than the bug fixes, I think.

",1531162893.0
Sphism,"ooo nice, element queries are the way forward, media queries are hacky and crap",1531122799.0
Pyro979,Neat,1531171334.0
ewliang,A eCommerce Store with a authentication and authorization protected CMS along with functional payment system via Stripe (since the concepts will cover how to make a blog/forum anyways). ,1531072346.0
imapersonithink,"* Clown Car: Find local people to see how many can fit in your car.
* An interactive map of local trees ranked by climb-ability.
* A birthday party finder for all those people who don't have friends.
* Charity site for sending thoughts and prayers.
* Political term generator for learning to sound smart without having to make sense.
* Do You Doo-Doo? Social dating site for those freaky skat lovers.
* Parade Paradise: Schedule local parades with randomly found people.
* Water Weigher: Rate water by location.

I can think of more if you'd like me to. ",1531069986.0
labtocat,auth pls,1531072420.0
Rorixrebel,No todo app plz,1531096503.0
rdbinteractive,"I'd like to see a ""proper"" implementation of search and filter functionality.",1531069564.0
Hydrotechnics,"Currently building a production application that uses Vue, Vuex, Vue-Router,  Vuetify and Stripe on the front end. So far have had a lot of success despite the lack of guides in this space. Once all the kinks are ironed out I'm going to write some guides to help others along the same path! ",1531065205.0
CrypticWriter,"I'd be interested in a real time chat project. This also gives the opportunity for stuff like login/auth/profiles. The server side for these applications can be pretty small.

I find that a lot of courses cover the same sort of stuff... you know, the typical to-do sort of app. I rarely see much on chat applications",1531073095.0
skryking,Discord clone.,1531100673.0
ezaquarii_com,Basket has potential to be relevant example.,1531064459.0
mistakes_are_gold,"I’m looking for Booking System course or any like AirBnB system, with Vue & Laravel. 

Would be interested to learn. ",1531068332.0
itsdatnguyen,I think that the most common topic would probably be a to-do app as a starter. You could filtering as well as normal CRUD.,1531069984.0
franzdarelle,do it please. it would be awesome :),1531096643.0
firdaus,"Evernote alternative - but not just note taking

Evernote is a lot more than notes!",1531104008.0
_cs,"Just want to throw out the idea of making a project with a Firebase backend, since you’ve said in multiple comments here you don’t want to have to worry about writing your own backend. Firebase eliminates the need!",1531321032.0
Dokiace,full fledged store webapp,1531072832.0
killerbake,SAAS setup where a user can subscribe to your app and get a custom subdomain and admin panel. ,1531101310.0
_sirberus_,"I'm interested in a from-scratch event calendar, but I'm too late to the party for this to matter.",1531106900.0
irrational_design,"CRUD application including list, pagination, sort, search, filter, select, multi-select, add, edit, delete, batch add, batch delete, batch edit, etc. The add/edit modal dialog box should be complex with multiple tabs, tree select controls, input, text area, radio, checkbox, select, etc. Filtering should be complex. Perhaps a slideout drawer from the left side with a tree select control showing the filtering options. The app should be responsive and be a PWA application. It should also include a way to route to additional CRUD applications. ",1531106951.0
vansayko,"I would like to see a way to filter list data (v-for) with many different filters simultaneously.  Checkboxes as well as search boxes all working together.   For example: checkboxes of S, M, L, XL, XXL and colors of blue, red, green, yellow.  If you check S and blue, you should only see small blue items.  If you search while filtered to small, blue, you should only see titles relating to small and blue items. ",1531169853.0
usedprestige,"fetching flat json, stripe/paypal",1531226509.0
Yomete,"Have you thought of saving each pokemon's data in localStorage? That way, after the first call to Firestore to get a pokemon's data, you save in the localStorage. 
Then subsequent calls would see you showing the data in the localStorage FIRST before fetching from Firestore. You can decide to save the data to localStorage by using the name + ID of the pokemon's entry in Firestore.",1531064416.0
rithvikvibhu,"u/Yomete's comment looks good. I'd like to add a few things to this.

* LocalStorage can persist over sessions so it'll really reduce fetching from firestore. In fact, you can have some sort of version number. Every time your page loads, check for latest version and if available, replace everything with 1 fetch.

* Having all data locally opens up different ways to manipulate and search stuff. You could use something like [Fuse.js - JavaScript fuzzy-search library](http://fusejs.io), or other filters which wouldn't be possible with firestore directly.",1531065085.0
DerJuggernawt,"I'd create a `dataInit method` in the *store* and perform the api calls on login. Then you have all characters in the `store.state` and can just go from there.

`this.$store.state.characters.filter(char => char.name => 'charizard')`

I mainly work with nuxt so I could be off.",1531065657.0
DaBigums,"One the awesome things about Firestore is it's flexibility. It can also be a huge downside. It sounds like you're having an issue with how you structure your data in Firestore. 

If you have a collection of Pokemon, and you create a document for each Pokemon, then make a sub collection for all of it's moves, you're going to be repeating data across alot of Pokemon. In stead, you might have to take a lesson from older relational databases and have a few ""pivot tables"".

Basically you would have a collection of Pokemon documents, with information unique to that Pokemon (name, health, picture url... ECT). Then you would have another root collection of documents for the moves. Then in each of the moves, you would pass in the document ID of each Pokemon that can learn that move. 

This might not be the best way, but it might give help with sorting the data and give you an idea of how to improve on it. ",1531070482.0
Dnlgrwd,"Thanks for all the quick replies! I'll definitely look into the suggestions when I have more time. I'm glad I posted here rather than stack overflow, much nicer community it seems ",1531065949.0
thinkadrian,"`this` is not in the same context inside an async function as the calling function. You need to bind `this` to the function if you want to keep the reference. Arrow functions as mentioned by u/DOG-ZILLA is usually the easiest way.

Other ways include:

```
**const self = this;**
fetch('/task/api/' + tableName + '/'
        ).then(function (response) {
            return response.json();
        }).then(function (json) {
            **self**.tasks = (json.results);
            // ...
        }
```

```
fetch('/task/api/' + tableName + '/'
        ).then(function (response) {
            return response.json();
        }).then(function (json) {
            this.tasks = (json.results);
            // ...
        }**.bind(this)**
```

*(the latter example might not work because it's chained to the previous `then()` function)*",1531042895.0
DOG-ZILLA,"Have you tried arrow functions instead?

E.g. .then((json) => { console.log(this.tasks) })",1531041861.0
paladincubano,What a mess! Did you try async/await?,1531054570.0
NovelLurker0_0,Use arrow functions ,1531068835.0
1makfly,"Define `let instance = this` at the beginning of your method.

Now you can use `instance` from within your promise because it's a clone of `this`.",1531043420.0
thiswasprobablyatust,What do you get when you console.log(this) inside of `fetchSpecific`?,1531042309.0
_sirberus_,"Vuepress literally does this, probably take a look at that.

But check this out: https://github.com/miaolz123/vue-markdown

Seems like a nice compromise because you're still technically in an the HTML template, so you can drop down to HTML if you need elements and components beyond markdown's limited choices.",1531005737.0
batahkoinonia,"I haven't tried it myself, but you could chain [the Markdown loader](https://www.npmjs.com/package/markdown-loader) with [the Vue template loader](https://github.com/ktsn/vue-template-loader).",1530986960.0
ShortyEx,Have a look at Vuepress ;-),1530988396.0
DerJuggernawt,"https://jsfiddle.net/hvsya6td/

If you inspect your `this` you'll find that your items are inside of the `inventory` attribute, as defined in your `data`. 

So on click I passed the `index` and then I can just find the clicked item by using the `index` on the `inventory` array.",1530967215.0
_sirberus_,k,1530993663.0
tweettranscriberbot,"^The linked tweet was tweeted by [@vue_london](https://twitter.com/vue_london) on Jul 07, 2018 10:12:00 UTC (3 Retweets | 6 Favorites)

-------------------------------------------------

To celebrate \#PrideInLondon we are giving you this 15% discount code 'PRIDE-LONDON' to be used this weekend only! 



We want to embrace diversity at [http://vuejs.london.](http://vuejs.london.) So to who are all underrepresented in our industry, we welcome you to be part of our awesome day!

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1530959074.0
SecretAnteater,"I would probably check out VueX and start moving shared functions and state from each component into VueX. Keep data unique to each component inside the component, and anything that is shared (or that might be shared in the future) should be in VueX. 

That will get you a good start.",1530911451.0
ABadWomanDriver,"Check out this [Vue Enterprise Boilerplate](https://github.com/chrisvfritz/vue-enterprise-boilerplate) . It’s maintained by one of the Vue core team members and should give you a good starting spot. Solid documentation, even if you don’t completely follow the project structure, by reading through the docs you should be able to pull some best practices and useful patterns out of it.",1530915962.0
goshdarnyou,"Have you already seen the ""Scaling Up"" section of the guide and found it insufficient? In case you just missed it: https://vuejs.org/v2/guide/routing.html",1530910543.0
gabriel-et-al,"One of the projects I'm working on is the front end of a b2b application which uses Vue.js. Currently it has ~100 components.

[routing](https://github.com/vuejs/vue-router) and [global storage](https://github.com/vuejs/vuex) are really simple to use. I don't know any specific hint I could give you, just keep these 3 things in mind:

* Don't put all the [actions](https://vuex.vuejs.org/guide/actions.html) in a single file. It becomes a mess before you notice.
* Don't use jQuery. It may seem a good idea sometimes, but it's going to cause you headaches. If you come to a situation you _have_ to use, do it wisely.
* Don't use a second Vue instance as an event bus. It becomes a huge, horrible mess and you'll spend many hours refactoring it out. Make good use of Vuex and Vue's reactivity system, it's all you need.",1530913244.0
Nerzhus,"I don't have enouth knowlage to help im still green, but have you tried vuex? https://vuex.vuejs.org",1530911257.0
G5Corp,"Vuex — especially a store split into modules — is a necessity IMO, as are nested routes.  I also like to load components asynchronously when possible and lazy load components in the router to reduce bundle sizes.  I haven’t felt any growing pains when using those constructs. ",1530911480.0
felondejure,"Not much experience(in vue), but I have started to build a large application 2 months ago and it's going smooth. Did a course in Udemy couple of month back.(took around 3 days to finish) I think it's good to listen someone talk about everything not to just learn but know what is where and what is your options before getting into it. I'm using vuex for state management, vue-router for routing. ",1530915145.0
paul_h,I keep wanting to do a decent decomposition experiment with https://github.com/RonnieSan/vue-browser-sfc but don't have the time. I should pay for someone on UpWork to do the experiment for me in the way I'd like.,1530948423.0
kylemh,"I created a larger application using Vue, Vuex, and Vue Router thanks to the lessons learned within [this tutorial, from Max Schwarzmüller](https://www.udemy.com/vuejs-2-the-complete-guide/). He dives into scalable/best practices with each tool.

It sounds like it's time for you to use Vuex and be sure to maintain immutability on your own since isn't enforced (unlike Redux). If it comes time to use server-side rendering, you will likely use Nuxt. Razzle is another option.",1530917929.0
fobocaster,"[https://vuejs.org/v2/guide/](https://vuejs.org/v2/guide/)  
[https://laracasts.com/series/learn-vue-2-step-by-step](https://laracasts.com/series/learn-vue-2-step-by-step)  


I would not advise books, because they retell the documentation",1530878018.0
tonjohn,"I highly recommend this workshop by Microsoft’s Micah Godbolt: https://frontendmasters.com/workshops/design-systems/

Other good resources:

https://css-tricks.com/tag/vue/

https://www.vuemastery.com/

https://vueschool.io/

https://devchat.tv/views-on-vue

http://www.fullstackradio.com/",1530885353.0
FormerBrick,"I already know html,javascript and css, im not a complete beginner, its just that i havent used a javascript frame work before",1530903111.0
archivedsofa,First learn JavaScript+HTML+CSS then learn Vue.,1530895856.0
keesbeemsterkaas,"Tl;dr: author shared a workflow using i18n-next and the locize.com service to edit translations live in the app. 

>Our goal is to extend vue-i18n to to use it’s existing missing function to directly send new texts to the translation managment tool and to directly load translations from there.",1530867177.0
raphaelarias,We use locize. Even though it works it looks like hasn’t been updated in years.,1530881795.0
archivedsofa,"The only way to do it is by using `document.execCommand('copy')`.

You need a reference to the DOM element you want to copy from and then something like this:

    const range = document.createRange();
    range.selectNode(element);
    window.getSelection().addRange(range);
    document.execCommand('copy');

To get the element you can use good old:

    const element = document.querySelector('#my-element');

Or use [Vue refs](https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-Child-Component-Instances-amp-Child-Elements).",1530829427.0
nickmandev,You can copy the inner html of the paragraph.,1530858093.0
Clashtoon,The documentation was plenty to get me started - it's a lot easier to learn than most js frameworks.,1530841707.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Making a 3D Animated Widget – Vue, JavaScript, CSS • r\/vuejs](https://www.reddit.com/r/javascript/comments/8wdwkj/making_a_3d_animated_widget_vue_javascript_css/)

- [/r/webdev] [Making a 3D Animated Widget – Vue, JavaScript, CSS • r\/vuejs](https://www.reddit.com/r/webdev/comments/8wdwru/making_a_3d_animated_widget_vue_javascript_css/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1530823296.0
SandFriend,"I'm not sure you really need the two-way data binding (based on what I see at this point), so it might be easier to get away with just listening for the `input` event on your number input and then updating an object in your data when then input event fires.

1. Add a new Object to your component's `data()` return object: `datePayloads: {}`
2. add username keys to datePayload object after initialize function runs `this.username.forEach(username => this.$set(this.datePayloads, username.name, {}));`
  - now you have an object in component data like `datePayloads: { Joe: {}, Erik: {}, ""King Push"": {} }`
  - really each username should have a unique id associated with them which would be used instead of the `name` property
3. listen for the input event and pass the necessary arguments to a handler function `<input type=""number"" style=""..."" @input=""handleTimeInput($event, props.item, row)"">`
4. update your data in the event handler `methods: { handleTimeInput(ev, user, date) { this.$set(this.datePayloads[user.name], date, ev.target.value); }`

If Erik entered the number 5 into the date ""4 10"" the you would end up with an object like

    {
      Erik: {
        ""4 10"": 5,
      },
      ...
    }

I would probably change up the keys to use an id for the username and a better formatted date string for the date key, but this would work. ",1530826315.0
irphunky,"I've done similar when building a fasting app, it's simpler to just store a `new Date()` for each marker such as start and end of a range and then use computed props to calculate duration and such.

Just store them in an array and away you go ;)",1530826885.0
raublekick,"I was looking for something similar recently and honestly found the docs here to be better than anything else I found: https://vue-test-utils.vuejs.org/
",1530832446.0
andreich1980,Take a look at Laracasts. Jeffrey has a great series about testing Vue,1530820521.0
itsdatnguyen,"Usually i end up having a file that exports a whole bunch of const strings like 
const CHANGE_FOO_MUTATION = 'changeFoo'. I import that and use that instead of using a hardcoded string. You could use that in a computed property name for your mutations",1530836670.0
wuppie22,"You should take a look at [vuex-typex](https://github.com/mrcrowl/vuex-typex). This provides you with the possibility to create a strongly typed store, where all you dispatchers will have intellisense and auto completion. [This article by Mitchell Garcia](https://frontendsociety.com/writing-vuex-stores-in-typescript-b570ca34c2a), explains in more detail how you could use vuex-typex to create a strongly typed Vuex store. I've been using it myself, and while you do have some overhead for creating the store. I'm accepting that because of the ""full"" typescript support that comes with it. Only drawback is the fact that it hasn't been actively maintained.",1530873307.0
BoleroDan,"Yes. Use dynamic route matching. You would have one component that is your ""Projects"" component. You determine what project you are looking at, based on the routers dynamic route matching parameter.

your route would look like this

    {
      path: ""/projects/:id"",
      component: Project,
      props: true
    }

Now you'll notice the `:id` . We can access this variable within our Project component, to determine which project we may want to load, say over Ajax, or some sort of genreic state. You'll also notice we set `props: true`. This means it will pass the defined dynamic router param `:id` and pass it to your Project componet. So we will have to define `id` as a prop

Within your component

    props: ['id']

then you will be able to use that ID and do as you please for what ever logic you may have.
You can read more of this on the vue-router document page
https://router.vuejs.org/guide/essentials/passing-props.html

",1530811608.0
fzy_,"> `await fs.readFileSync('./data.json')`

Ugh, not sure about that.",1530876855.0
Metropolis1927Remix,"Same here.  I might be mistaken, and I haven’t tried this yet, but I understand this might be an Nginx config.  Otherwise it seems to you need to serve your app in Node with pm2 [Edit: for transitions to work].",1531030816.0
rando2018,"Does auth-module support server side httpOnly cookies? Using tokens and client cookies is insecure and should be avoided:

[https://www.rdegges.com/2018/please-stop-using-local-storage/](https://www.rdegges.com/2018/please-stop-using-local-storage/)

[This](https://nuxtjs.org/examples/auth-routes/) looks like a better approach, use express-session to keep sessions server side only and carefully pass relevant user info through nuxtServerInit or fetch. If you are using a third party API that requires an auth token (e.g. backend Django/Rails/Laravel app) just store that in the server session and proxy API calls through that node script.",1530792269.0
ABadWomanDriver,"Check out [Vuex ORM](https://github.com/vuex-orm/vuex-orm) it’s a pretty robust library for this kind of stuff. I’m using it to drive the entire data layer of an enterprise application I’m working on. It takes care of normalizing the data for you, I believe it even uses normalizr under the hood",1530916576.0
jlugao,"If you are building the static files why would you want to use docker to serve it? Seems like a waste of resources to me (seriously firebase hosting, s3, and other static hosting options are available).

However you could benefit from building the files with docker in a ci pipeline that deploys those files later. Or if you were to use ssr this approach would make more sense ",1530756267.0
Listefano,"You could use multi stage Docker builds. With this you can build your vue app inside the container but without having the node dependency in the final image. 

Links to the docs: https://docs.docker.com/develop/develop-images/multistage-build/",1530775463.0
techmighty,whats the best approach for a backend to this? ,1530755236.0
gargle41,"Does the listener have to be a component? Is there a visual element to it?  It sounds like more like a singleton service that should be bootstrapped on app load. Haven’t done this myself, but googling around, it looks like there are options to mutate vuex outside a component. 

https://forum.vuejs.org/t/access-vuex-store-outside-of-components/9295

There may also be a clean way to perform this listening logic in the Vuex module as well. ",1530729492.0
ergnui34tj8934t0,Could you get this done using Vue mixins?,1530742725.0
ohmynano,"lol, the acronym said out loud gives it a french vibe.",1530721079.0
androiddrew,"Interesting, I will be watching this closely.  Btw it is possible to get Vue SSR running through python. Here is a POC https://github.com/androiddrew/py_vue_ssr_poc",1530732981.0
archivedsofa,If you are on macOS an alternative is to use [Alfred](https://www.alfredapp.com/)'s clipboard snippets.,1530716788.0
robotkana,"This looks awsome, will definitly look into it",1530728860.0
shanmukhateja94,Why are you using Vue and Ruby on Rails? Vue 2.0 has Server side rendering?,1530725170.0
toadkicker,"Why wouldn’t you just make the getters the state you want instead of doing a bunch of front-end heavy computation?

Move this to the back end and query for only what your state requires.",1530701065.0
cyberst0rm,"I'd remove the item via array splice. The filter is setting a new array and the child may not be getting the new array

",1530677706.0
draedo,"I had the same issue yesterday, spent two hours trying out different solutions to a problem only to find out my first solution actually worked.",1530697515.0
1makfly,Have you tried updating your object with vm.$set (https://vuejs.org/v2/api/#Vue-set)?,1530849935.0
CristiJ,"As far as my understanding in how components are registered goes, there is no real perf advantage of having components globally registered. The advantage is not having to always register these components. 

Let's dive a bit into the Vue source code and see what happens to a registered component. 
In the render function (your template converts to render functions), https://github.com/vuejs/vue/blob/dev/src/core/vdom/create-element.js#L105
there is a `resolveAsset(context.$options, 'components', tag)`. So basically if you have 

         components: {
           MyComponent
        }

The line above will try to search for `tag` inside your component `$options.components` which is basically the component object.

Now, with globally registered components, your component gets registered on the Vue prototype. https://github.com/vuejs/vue/blob/dev/src/core/global-api/assets.js#L22 
Since all components are basically `instances` of Vue class https://github.com/vuejs/vue/blob/dev/src/core/vdom/create-component.js#L115
they will automatically inherit global options such as components, directives etc.

So what really happens when you declare a component `<custom-button>` somewhere in your app, upon render, Vue (along with javascript) does this:

1. Search for `custom-button` property inside the current component `components` object.  
2. If this property is found, return `custom-button` value, else go to next step.
3. At this step, Javascript prototype chain kicks in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain Since the `custom-button` property was not found, javascript will try to search for this property on the `prototype` of the object. The prototype will be actually the global `Vue` class. If it doesn't find `custom-button` on `Vue.options.components`, it will return undefined and error out during render that `custom-button` is not defined. 

Here's a way to test this.
Go to Vue dev tools and click on some component. Then write 
`$vm0.$options.components`. This will show only locally registered components. Now try to type `$vm0.$options.components['Transition']`. Although `transition` won't be displayed in the initial list, you will see that it finds it, because it finds it in the Vue prototype actually.

So getting back to your question, NO, there will be no performance benefit. Javascript will actually do an additional property search on the prototype chain when your component is registered globally which is slower than a simple lookup. How much slower? I don't know to be honest. https://developer.mozilla.org/en-US/docs/Web/JavaScript/The_performance_hazards_of__%5B%5BPrototype%5D%5D_mutation
",1530701219.0
GoogleMac,"It's the other way around. Importing it only when needed is better than doing a global import. There isn't always a benefit, but sometimes you would globally register a whole package, whereas if you import only when needed, you might only take a small part of the package. ",1530666974.0
VIM_GT_EMACS,I use the combo of AWS api gateway proxying a lambda script as a backend coupled with nuxt front end in an s3 bucket a lot. for almost all of my use cases its a great alternative compared to setting up an EC2 instance.,1530650811.0
LloydAtkinson,"You’re not doing anything wrong and neither is vue-cli. GitHub pages is a badly designed product and possibly purposely crippled in that it isn’t capable of properly serving files that are in other directories like you can with a normal web server.

I spent three days on this and realised what was wrong so wrote it off. I suggest https://www.netlify.com instead. I had it setup in less than five minutes and it’s free. Every time you push to your GitHub repo it will pull it deploy it. Have fun!",1530637425.0
danstansrevolution,"I don't know if this is the root of your problem, but I know I had issues with content showing up with github pages, the solution is to change any references of ""href=/js/..."" to ""href=js/..."" in your index.html. 

This fixed the problems for me. However, I've since moved on to using netlify. :)",1530653970.0
gwvt,"Add this line to your vue.config.js:

`baseUrl: './',`

&#x200B;",1538535703.0
vaaski,"Just use the `v-if` directive on the root of your component until it's data has been fetched. `v-if` doesn't render anything until it's evaluated to true.

So if you have a data property for the stuff that's going to be fetched, just set it to `false` by default and use that property in the `v-if`.

Edit: if you want to show a spinner like the other comment suggests, just use a `v-else` for it's wrapper.",1530611874.0
yomamen,I found this article has helped me over and over again when trying to find info about mounting data on vue https://alligator.io/vuejs/component-lifecycle/,1530622809.0
wikitih,"I think it depends on how do you want your site to behave. If you don't want to display the site until the data is retrieved, then use a `beforeEnter` guard and store the data somewhere (for example, on a vuex store). Otherwise, just use the `created` hook. In this case, you may also use a `isDownloading` boolean flag to display a spinner until the resource is fully downloaded.",1530610588.0
GoogleMac,"I suggest using the mounted method. As mentioned by others, you can display a spinner until it's loaded. Check out Element ( http://element.eleme.io/1.4/#/en-US/component/loading ). For this package, you can just add a v-loading=""isLoading"" on the body where the data would be loaded. Then change that value to false when the data is fetched. ",1530622248.0
cutety,"So, creating a reusable form component is actually one of the few cases (outside plugin/library development) where Vue's [provide/inject](https://vuejs.org/v2/api/#provide-inject) api could be used*. This will allow you to create your wrapper components `FormMessages`, `FormGroup`, and inputs like `FormTextInput` or `FormSelectInput`, and they all can then inject values from the root form like the form data, any error messages, whether they should be disabled (i.e. because you're waiting on a response from the server), and other things. To handle communication from the children to the parent from children you can inject an event bus (`new Vue()`)  for things like updating a value, or listen to `@change` events on inputs to then tell the form to validate. This will eliminate a lot of the duplication/setup code you are currently experiencing. This is more-or-less how component libs, like [Element UI's Form Component](http://element.eleme.io/#/en-US/component/form) work.

I threw together (in ~15 minutes so it's not perfect) a proof of concept ""app"" to give you the idea of how it could work. [Here's the codesandbox](https://codesandbox.io/s/wy7vn5027l?module=%2Fsrc%2FApp.vue). 

The main App component looks like this:

    <template>
      <div id=""app"">
        <BaseForm v-model=""formData""
                  :submit-fn=""submitFn""
                  :submit=""submitForm"">
          <FormGroup attr=""firstName"" label=""First Name"">
            <FormInput />
          </FormGroup>
          <FormGroup attr=""lastName"">
            <label slot=""label""><strong>Last Name</strong></label>
            <FormInput required />
          </FormGroup>
        </BaseForm>

        <button @click=""submit"">Submit</button>
      </div>
    </template>

    <script>
    import BaseForm from ""./components/Form"";
    import FormGroup from ""./components/FormGroup"";
    import FormInput from ""./components/FormInput"";

    import formMixin from ""./mixins/form-mixin"";

    export default {
      name: ""App"",
      mixins: [formMixin],
      components: {
        BaseForm,
        FormGroup,
        FormInput
      },
      data() {
        return {
          formData: { firstName: """", lastName: """" }
        };
      },
      methods: {
        submitFn() {
          return new Promise(res =>
            setTimeout(() => res(console.log(this.formData)), 5000)
          );
        }
      }
    };
    </script>

And you can look around the specific components in the components directory to see how each of them works/play around with them. But, if you have any questions/concerns/comments, just let me know and I'll (hopefully) be able to help you out or at least point you in the right direction. The only thing really missing is the validation logic, but how that is implemented can be up to you, there are multiple ways of achieving it (like defining a single validationRules object with all the validation rules and passing it to the parent form component, or you could pass in the rules to each input/group component and have them register their validations with the parent form when the component is created).

*Edit: I figured I should also mention why this is the case, especially if you're just getting into Vue. The first reason why `provide/inject` should be avoided is because it increases complexity and adds a level of indirection as where the data coming from isn't being explicitly laid out (unlike passing down through props which is very explicit) -- and it's not an api the anyone not already fairly familiar and comfortable with vue are aware of. Fortunately, (in my opinion) it's not hard to grasp once you realize it's being used (and more importantly why), and the docs on the api are fairly comprehensive and easy to understand. Though, I'm doubtful you'll come across it often unless you start working with plugins/component libraries.

However, the main reason it should be avoided in your day-to-day usage is it **greatly** increases coupling between components. The main reason you would want to use a component based library like Vue is to do the exact opposite -- decrease coupling -- you ideally want to be able to use your components like lego blocks, plugging them in wherever without having to rely on a bunch of other components/functionality to be in place for them to be useful. But, by nature, a form component and it's children are going to be very tightly coupled. You wouldn't use a `FormGroup` component (I hope) outside a form, there's no use for it outside of one. So, since these components are going to be tightly coupled and only used alongside each other and always nested under one single `BaseForm`, `provide/inject` is actually super useful as it will allow you to create a much less brittle/easier to use api for your forms because it allows you to not have to worry about making sure all the children are getting the correct props are passed, hooking up the events for them to talk to each/aware of some global state, while still being able to just plug in/remove pieces of your form with components.",1530592541.0
__neone,Try Element or Vuetify.... all this is baked into their form components.,1530595077.0
zebbadee,May want to look into vee-validate package. Provides a really simple yet powerful way of dealing with front + back end validation,1530604117.0
ctorx,"Thanks for the tips.  

I looked at each of these but ended up solving this more simply without having to take on additional dependencies.

This is now solved using two mixins: FormMixin and FormChildMixin.

The FormMixin defines a data property called ""isBaseForm"".  The FormChildMixin, onCreate, traverses the parent tree until it finds the parent with the property ""isBaseForm"" and sets it's  own data property 'baseForm' to the parent instance, essentially linking the parent to the child regardless of how deeply nested the child is.

This allows me to directly access the ""inProgress"" and ""messages"" properties of the outer vue component without having to repeat myself at each level of component nesting.",1530642384.0
dave__stewart,"Hey, great series! Well done.",1530581235.0
hashimss,Appreciated your work!!,1530601983.0
archivedsofa,"Most of my CSS is written in components. I have some global CSS but it's like 5% or probably less.

If you need color themes you could simply use SCSS or SASS variables and functions to create your different themes, and then switch the theme simply with a class change.

If you want to let your users define color themes, you will need to create dynamic CSS at runtime for each component that needs to be customized, and then either store the user setting on your API or `localStorage`. [See this article](https://alligator.io/vuejs/dynamic-styles/).",1530540968.0
plong0,"For themeable (and generally reusable) components, focus on assigning good classnames to the components and keep their base styles as minimal as possible.

I would describe ""**good classnames**"" as **semantically specific** and **generically descriptive**.  Semantically specific meaning it says exactly what it is (ex. `page-title`, `username`).  Generically descriptive suggests its form and function in as generic terms as possible (ex. `highlight`, `size-lg`, `input`).

In that approach, I start with the semantically specific classnames and very carefully add as few generically descriptive classnames as needed to achieve the theming requirements (with reusability as a high priority.)",1530575739.0
LEOtheCOOL,"You need to tell it to recalculate.

https://codepen.io/anon/pen/NzJNxw

",1530541265.0
androiddrew,Are you using the Vue-Bootstrap package or are you trying to go at it yourself? ,1530532961.0
ocajian,I would recommend you having a look at vue-bootstrap. ,1530607354.0
Maxtream,"Like this  

:class={ 'your-class-here': isDropdownOpen }  

So in case it's true, your class will be added, in case of false it won't",1530515331.0
Kritical02,"I have seen a resurgance of Django usage for the back end lately.

Ive only played around with it once and it was years ago. But I just assumed it had lost support as I never really saw much about it last couple years.

Until recently. Any reasoning? I don't do back end for anything but side projects so doubt I'll jump but just curious.",1530672732.0
ahackersday,"Would love some feedback about the tutorial and how I write. I'm not english native as most of you can see, so if I write some weird things, please have me excused.",1530514222.0
raul338,When I open a select It moves the viewport to the top ,1530572466.0
6bytesunder,"I actually deployed a small Nuxt + ExpressJS API app today, on a Raspberry Pi, and it's dead simple. It probably depends on what your app will actually do, but I'll tell you what it took me to deploy the site.

All you most likely need is Node with npm and a webserver, nginx in my case. I didn't have to do any extra configurations, Nuxt did it all. All my plugins and modules were added via nuxt.config.js That includes things like axios for backend use and jQuery or Bootstrap for frontend.

Simple step by step of what I did:

1. Pull your project files to the server
2. `npm install`
3. Configure nginx
4. `sudo npm install -g pm2`  
\# this is to keep your Node app running without any hustle
5. Generate your production bundle: `npm run build`
6. `pm2 start npm --name ""name-of-your-app"" -- start`

That's almost it. To make sure pm2 restarts the service after your server restarts, run `pm2 startup` pm2 should tell you exactly what you need to do next. It'll ask you to run a command similar to this  
`sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u pi --hp /home/pi`   
obviously it depends on your setup, then `pm2 save`

You can have multiple Node apps running with pm2. To see what's currently running use `pm2 list` It should give you a nice output like this

    ┌────────────────────┬────┬───────┬──────┬─────────┬──────────┬─────────┬─────┬────────────┬───────┬───────────┐
    │ App name         │ id │ mode │ pid  │ status │ restart │ uptime │ cpu │ mem       │ user │ watching │
    ├────────────────────┼────┼───────┼──────┼─────────┼──────────┼─────────┼─────┼────────────┼───────┼───────────┤
    │ name-of-your-app │ 0  │ fork │ 6270 │ online │ 0       │ 10h    │ 0%  │ 37.1 MB   │ pi   │ disabled │
    └────────────────────┴────┴───────┴──────┴─────────┴──────────┴─────────┴─────┴────────────┴───────┴───────────┘
     Use `pm2 show <id|name>` to get more details about an app

Hope that helps a little :)",1530481428.0
imapersonithink,"It depends what you're trying to build for all points. Personally, I built my site with the below boilerplate then deployed it with Docker.



1.  Just Node. It seems a bit weird that Lambda is required... [I currently have my Nuxt server based on this boilerplate.] (https://github.com/nuxt-community/koa-template) I only added hamster to manage my Node instance.
2. If you're coming from Vue SSR, basically everything. Nuxt takes care of most all of the build setup.
3. Yes. See below.


There are three things you should consider. Plugins, middleware, and modules.

Plugins are usually packages like Vue-Awesome which manages icons. Having plugins separated by plugin allows you to specify whether it is server-side rendered or not in the Nuxt config. It also gives you a better way to organize your defaults for the package.

Middleware has two parts, front-end and back-end. Front-end middleware can be used for something like device detection. I'm currently using it to tell the server to either render a mobile or desktop version of a page (I found some difficulty using responsive design on a few pages with v-if or v-show). Back-end middleware can be used for receiving requests from the front-end after it has already been rendered. Think authentication management.

Modules are basically plugins, but you can add a module's config object into the Nuxt config. The most important factor is that it doesn't need the front-end to be running to work. Sometimes modules are mean't only for the build stage. I'm currently using a module to generate a sitemap before and sometimes during requests.
",1530479205.0
odinti,"I have deployed nuxt a couple of times and feel ok doing it, if you don't mind we can chat and help you set it up",1530471029.0
propelol,"The easiest way to deploy Nuxt or any other node app is by using Now, imo (https://zeit.co/now). You run one command in terminal while in the project directory, and it deploys. ",1530536883.0
waitingonmyclone,"What do you mean that all 7 buttons open at once? The 7 buttons display on the page, but do the modals open when you click them? What is the current behavior?",1530468417.0
brainbag,"Here's what you're missing:

    // MainComp
    v-b-modal.modal1

    // ModalComp
    <b-modal id=""modal1""

Bootstrap-vue uses directive modifiers such as `v-b-modal.modal1` to choose the modal to open, in this case the modal with the `id` `""modal1""`. You've hard-coded that value into your component, so any time you press the button, it opens all of the models you've defined (because they all have `id=""modal1""`).

I don't know the use case for your solution, but here's references to the docs for the various ways of implementing.

1. [you can set the activation attributes](https://bootstrap-vue.js.org/docs/components/modal#toggle-modal-visibility) - probably with a prop. Here's an example:

        // MainComp
        :v-b-modal=""modalIdToOpen"" 

        // ModalComp
        <b-modal :id=""modalId""

2. You can also [manually trigger showing and hiding with `$refs`](https://bootstrap-vue.js.org/docs/components/modal#toggle-modal-visibility) if that's better for your use case.

3. You can just [use `v-model` if your show/hide is a boolean](https://bootstrap-vue.js.org/docs/components/modal#toggle-modal-visibility)",1530672207.0
animagnam,"You want `v-for=""image in images""` rather than `v-bind=""images""`

Would make a pr and make sure that was the only problem but am on mobile at moment",1530428404.0
requiemsword,"This question doesn't really make sense - jQuery and Vue are very different things. While it is true that you probably don't need jQuery anymore, asking how to ""swap"" out jQuery for Vue is going to depend heavily on what your code base looks like, how you're using jQuery, and how you're planning on using Vue.

Honestly, don't sweat the legacy jQuery. Learn how to do things with a modern development stack and your jQuery needs will dwindle over time as you swap out outdated parts of your application for new things.

Couple pointers anyway.

Get webpack up and going if you haven't already.

Look into using axios for your ajaxy needs.

Change any animations to css.

Once those things are done, you should be left mostly with dom manipulation, which you can switch to Vue/Vuex over time.",1530394200.0
ShetlandJames,Sarah Drasner did a good article about this very topic https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/,1530399559.0
Cyzor,I was at Vuejs Amsterdam and there was a talk about exactly this subject. Check it out here: [Roman Kuba - Scaling Vue in an existing stack](https://youtu.be/XmouoW1Gfro),1530394053.0
evilmaus,"I'd have Vue managing the application state and serving as the frame around d3 visualizations. Use Vue's watchers to react to changes in data and kick off d3's enter/update/exit cycle. You would be calling d3's functions from within Vue's methods and watcher callbacks. Remember that while Vue is a framework, d3 is ""just"" a low-level toolkit, on par with jQuery in where it occupies the front-end stack.",1530390879.0
setholito,"I found this post on Medium, may be helpful:  
[https://medium.com/tyrone-tudehope/composing-d3-visualizations-with-vue-js-c65084ccb686](https://medium.com/tyrone-tudehope/composing-d3-visualizations-with-vue-js-c65084ccb686)",1530463231.0
GaritoYanged,"There are some vue plugins that integrates d3 like vue-echarts
Perhaps one of then serves you
If not you could check how they integrates in vue as a guide",1530410575.0
daxdax89,I am also working on project that will have to implement data with D3. I am not really sure if Vue will work well with it but i would like to know more possibilities for sure and see how other devs handle it. ,1530448105.0
yeahdixon,[https://www.reddit.com/r/vuejs/comments/9m5hca/how\_to\_create\_map\_view\_component\_with\_vue\_and\_d3/](https://www.reddit.com/r/vuejs/comments/9m5hca/how_to_create_map_view_component_with_vue_and_d3/),1539021316.0
Ignoreintuition,I have been working on a Vue plugin for this specifically: [https://github.com/ignoreintuition/v-chart-plugin](https://github.com/ignoreintuition/v-chart-plugin),1540147102.0
wbsgrepit,spam.,1530383551.0
Nerzhus,Awesome!,1530439175.0
watMartin,"Nuxt is definitely the best option. Once you get used to the directory based route structure you won’t want to go back. I’ve been using it for over a year, with multiple pretty large projects relying on it in production and don’t regret a thing. The reason a lot of the questions don’t go answered is because they are the same honestly, and the devs don’t have enough time to keep answering the concerns of newbies. I’ve seen them before and the chances of a question being asked that has no answer after a couple of extra minutes searching online or asking in the vue discord (or on gitter like someone else mentioned) are very low. Also migration of a large project shouldn’t take long at all, at most a couple of hours? and then maybe a couple more of you convert your api fetching to asyncdata for dynamic ssr content.",1530365569.0
toadkicker,I’ve personally taken up more interest in helping people with Nuxt because I’ve seen the same thing where it seemed hard to get answers. But honestly the source for it is pretty well organized and I often figure it out reading it.,1530366505.0
toqy,did you check the nuxt gitter to see if there are responsive people on there?,1530365045.0
VIM_GT_EMACS,"Nuxt has been great for me, and most of the issues i run into are plain vuejs based anyways and not nuxt based. I definitely vote you explore nuxt more. ",1530379078.0
Metropolis1927Remix,I really like Nuxt.  But I have no experience with any other SSR. I like that I don't have to mess with routing.  I spend all my time in the layout template and components.,1530390754.0
mingyjongo,"+1 for Nuxt as well! I've also been using it for over a year, and it's a no brainer for me as a first pick for any project where I can use it. Comes with a ton out of the box, ever growing community, at the very least decent support from maintainers. Static site generating is a little less than ideal, but again, to have something practically out of the box is insanely valuable",1530410587.0
JIMETHYRUMPLEKINS,"Warnings won't result in build failure, errors will.",1530370170.0
TG__,"I'm not sure if this is the best approach, but I noticed that the CLI generated config has `emitWarning: true` which throws warnings instead of failing a build.

To change this, inside `vue.config.js` I added:

```
chainWebpack: config => {
    config.module.rule('eslint').use('eslint-loader')
      .tap(opts => ({ ...opts, emitWarning: false }));
}
```",1530378259.0
chicagobearsrocks,close your img tag,1530349610.0
mododev,"Not much to go off of.

Might want to try giving us a jsfiddle to view the error.",1530345487.0
TheMarkBranly,Unexpected token errors quite often manifest on the line of code *right after* the line where the problem is. What does the line before this look like?,1530358226.0
herve76,+1 NIM /u/NimiqTipbot,1530340891.0
fzy_,"I've been wondering what a set up like this would look like for quite a while so that's really handy, thanks!",1530367075.0
irphunky,"Use a render component, then the multi-root isn't a problem or have two components within the loop.",1530306320.0
dynamitre_pork,Upvote for good word play,1530300486.0
keesbeemsterkaas,"What is nimq you ask?

>Unleashing Blockchain  
>  
>Nimiq is the blockchain designed for simplicity.  
Nimiq aims to be the best performing and easiest-to-use decentralized payment protocol & ecosystem.  
The project combines state-of-the-art blockchain research and web technology.  
Nano clients synchronize in seconds. Nimiq is browser-based and installation-free.

I still have no idea, but I'm sure glad they're using vuejs.",1530292438.0
herve76,+1 NIM /u/NimiqTipbot,1530343753.0
MitsuAttax,"The term commonly used for introducing a user to software (among other things) is called onboarding. You’re either looking for an onboarding library or a way to do it yourself. Quick google resulted in this https://github.com/alex-oleshkevich/vue-introjs
Hope this helps!",1530271532.0
fzy_,"I did that a while back. I had a component that showed some help bubble and I scattered a bunch of them in the app with a unique name (using a prop). Then, I made the help bubble only show up if its name was the name of the current bubble in my Vuex store. The bubble component had a ""content"" slot to let me write what I wanted to show to the user. I also had a ""next button"" slot in which I would add a button and hook up the click event to a function that changed the name of the current bubble in my Vuex store.",1530272353.0
jiffier,I'd say that this look has more to do with mastering CCS than nuxt or vuetify.. Awesome website btw.,1530256693.0
Lachlantula,Not too sure why you'd want to use Vuetify let alone Nuxt to do that.,1530363842.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/nuxt] [How to get this look using nuxt and vuetify?](https://www.reddit.com/r/Nuxt/comments/8urej4/how_to_get_this_look_using_nuxt_and_vuetify/)

- [/r/vuetifyjs] [How to get this look using nuxt and vuetify?](https://www.reddit.com/r/vuetifyjs/comments/8urtv1/how_to_get_this_look_using_nuxt_and_vuetify/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1530259277.0
modic137,Props down and events up. No event bus :) ,1530255039.0
SHA-384,"There might not be a consensus, but my vote is to use Vue for the whole thing. Keeping your codebase consolidated might help you feel organized and singular. Also, you never know when you want to drop a small component into a static page. You might thank yourself for using Vue all along",1530228517.0
jiffier,"In some ocasions I've used an MVC framework, where the view layer sends an HTML which includes the app.js generated from vue-cli. I also use server-side sessions, which works and it's easy. The main drawback I see in this approach is that your app or ""dynamic section"" can only live inside a div. If you have another section of the page that needs to be dynamic or react to data changes, you'll have to rely on some handmade hack.",1530256043.0
vaaski,"let's say you have one component for all the states of the second drop-down menu. you could feed it with a data prop containing the options for each page and select which menu gets displayed based on the current route.

If you give me your source I could quickly write up such component.",1530195492.0
1_nude_dude,"I don’t know if that is actually helpful, but if you don’t want to use props, which i would recommend since it’s the easiest way, I’d do it with routes. You can inject different layouts depending on the route:
<main>
    <nav>
        ....
        <routerview>
     <\nav>
</main>

Then you can have 2 components that you render depending on which route you are on. It’s also possible to have many different name views.
Just look into the docs.",1530270715.0
Schpaencoder,Well written and informative. What’s not to like?,1530215471.0
DOG-ZILLA,"Did a fair bit of React but absolutely love Vue. 

JSX vs templates? It’s a fallacy. Both render and execute fast. I guess it’s just syntax preference, but I prefer the Vue helpers in this regard for binding and events. ",1530224179.0
ComfyGangsta,"You can completely avoid mutations as well. You don't need them. In fact, a much easier approach over vuex is to simply use a new vue instance as a store since it's already reactive.",1530333646.0
dennythecoder,It's an informative presentation by a member of the Vue Core Team.  He put the slides at https://github.com/chrisvfritz/7-secret-patterns,1530205462.0
cheese_bread_boye,We clickbaiting frameworks now?,1530184790.0
Thilerion,"Came for checking out funny comments and people being mad at clickbait title. But I actually checked out the link and it was really interesting, thanks for posting!",1530261833.0
ScrewpyNoopers,I'm just assuming OP did the title as a joke. ,1530202305.0
_sirberus_,"I downvoted this, not because I'm a retard who can't understand that the title is the actual title of the talk, but because it's a repost and I'd prefer something new. 

It really is a good talk, anything Chris does is worth paying attention to.",1530386732.0
doodirock,This title makes me want to punch OP with a thousand fists. ,1530191715.0
defunctAI,rubish title,1530190820.0
,[deleted],1530202780.0
zevdg,"Ok, so there are a few ways you could handle this. Instead of trying to understand your needs for you, I'll just present all the options and you can pick for yourself.  All of these variants are things that an intermediate vue developer would be expected to know and understand.

So the first and simplest option is to bypass trying to update props entirely.  Just use the properties to initialize some data.  If you only need input from the parent when the prop is first created, then this is the way to go. https://codepen.io/zevdg/pen/PaxwpK?editors=1010

Based on your post, it sounds like you do need the parent to be able to update these props after creation in some cases, so this simpler option wont work for **all** of your props.

### Actually changing props

Props seem static, but they aren't really.  It's just that they can only be updated by the parent.  The child can't update them directly, but it can politely ask the parent to update them.  For a child to ask its parent to update a prop named ""foo"" to 3, the code would be `this.$emit(""update:foo"", 3)`.  Now the parent can choose to ignore this request, and that's what it does by default, but it's very easy to tell the parent to always update the prop on these requests.  You could do it all manually, but [the `.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) does it for you.  Here is how it looks in action.
https://codepen.io/zevdg/pen/oyQNPr?editors=1010

So that works, but you can see that there is some amount of duplication.  I had to remember to add `.sync` to every property and make a setter for each property.  Those explicit setters and `.sync` modifiers are good when you only have a few props that need it, but if you have a ton of properties that you want to update from both inside and outside the child, you might want to move towards a more general approach like this.  https://codepen.io/zevdg/pen/dKQPXY?editors=1010

P.S. Feel free to mix and match these approaches.  If most of your props just initialize data fields and only 1 or two actually need the full syncing, then only `.sync` the ones that need it. https://codepen.io/zevdg/pen/JZeogb?editors=1010
",1530153740.0
cheese_bread_boye,"hahaa I just saw this on StackOverflow, been trying to help you there. Have you looked into Vuex yet?",1530146499.0
archivedsofa,"Instead of passing the data via props, you could pass it via a method of the instance.",1530145068.0
thomasswilliams,"This sort of ease to get started, is what got me started with Vue. Great article.",1530164208.0
keesbeemsterkaas,What's wrong with configuration?,1530163700.0
onig90,Interesting article! Already saw it featured on VueJS news. I read that the next version of Vue will also include a proxy-based mutation tracking.,1530172177.0
jemminger,"Mutations receive state as their first argument, with an optional payload second argument:

https://vuex.vuejs.org/guide/mutations.html#mutations

",1530131174.0
ibra5him,"If you are familiar with bootstrap or bulma, there are libraries that uses them. Otherwise, you can use them or use element, vuetify (material) or a lot others.

[Check them out](https://github.com/vuejs/awesome-vue#responsive)

Give their websites visits and see their components/examples and decide upon it.",1530117216.0
GoogleMac,"Element is one of my favorites. Buefy (I think) is another good one based on Bulma. VueSax is great too, though I have had some issues with certain components that are still in development. They fixed my issues quickly though. ",1530157340.0
tetshi,"u/agranok wrote a framework called Banshee that's pretty sick. It doesn't make any UI assumptions and allows you to style everything how you'd like. Also includes examples of using it in whatever CSS framework you're currently using.

[https://github.com/banshee-ui/banshee](https://github.com/banshee-ui/banshee)

Edit: Forgot to mention, this is a (mostly) renderless UI library. ",1530549522.0
KillerShad,"I did exactly the same transition. 
What I've done is set up my MVC C# Backend with Razor. In my index.cshtml I put my root Vue component in the HTML section and render my dist/app.js and dist/vendor.js in the @Script section.
For the Vue part, i use Webpack to bundle my whole Vue project to the /dist/ folder. And everything works great.",1530113591.0
kodiashi,"I use Webpack to build single-file Vue components and have it setup to load, build and output multiple files depending on if the components are front-end or admin.

My Webpack setup has two parts, 1) an init script that runs rimraf to delete the deployment directory, shows a build message with spinner icon and then runs my config.  2) config file contains all the paths, plugins and settings for parsing Sass, Vue and any other JS.

This is running for Laravel, but you could easily apply it to any framework.  Source files are in /resources and output is in /public/assets.  That assets directory is deleted on each build, its just easier that way.  I use Yarn to load dependencies and run my scripts.  I have different commands for watch, dev and prod.

In my master layouts, I load my compressed js and css files and append a timestamp using the file modification time, this gives me automatic cache busting.  You could do this a bunch of different ways, but this was easiest for me.",1530121881.0
DOG-ZILLA,"You might want to ask on a Laravel Forum? I know that they use Vue with MVC style setup. 

I’m afraid I’ve only ever used Vue in the context of a full blown SPA and not as part of an existing traditional website. ",1530111659.0
syropian,"Just keep in mind the paradigm shift required to properly go from writing jQuery-style JS to Vue. Frameworks like Vue are _data-driven_, so avoid the temptation to pull in jQuery and manually update the DOM with it. This goes for displaying data, adding/removing element classes, showing/hiding DOM els (optionally with animations), etc. ",1530103861.0
DukeBerith,"When you're having trouble wondering how much or how little you should put into a component, consider reading this as a guide : http://bradfrost.com/blog/post/atomic-web-design/",1530102965.0
Lelectrolux,"As /u/syropian said, for as long as you can, forget about the dom. You will have to replace the jQuery reflexes with Vuejs ones.


Instead of `find element(s) in the dom -> get their data -> do work -> save data into the dom element(s)`, the dom driven source of truth, you will need to get around using a js data source of truth : `What does my data looks like -> what does my template looks like depending on current data state`.


In some ways, vuejs is a lot more descriptive whereas jQuery is full on imperative.  
In the js parts of vuejs, you only think about data, never html/dom, and you give it transformations (computed properties) and abilities (methods).  
Then in the template part of vuejs, you describe what should happens based on the current data, and bind the events (button click) to methods.


I've obviously simplified, but it""s a good start",1530109516.0
yetinthedark,"Not sure what to mention specifically relating to someone with a C# MVC background, but a general tip I'd recommend to anyone getting into Vue is to just about always use [Vuex](https://vuex.vuejs.org/) from the beginning. I started off a bunch of projects thinking ""I won't need Vuex"", but I would have saved a lot of time if I'd just used it from the beginning. Small, uncomplicated projects easily blow out... In my mind, there's no reason not to use Vuex any more.",1530102633.0
dave__stewart,A masterclass in how [absolutely](https://github.com/maoberlehner/how-to-structure-a-complex-vuex-store/blob/33b6b211dbcc58d597adfe1d2c2ddec5ce2c4258/src/components/page/PageCustomer.vue#L179) \> [not](https://github.com/maoberlehner/how-to-structure-a-complex-vuex-store/search?q=mapContactMultiRowFields&unscoped_q=mapContactMultiRowFields) \> [to](https://github.com/maoberlehner/how-to-structure-a-complex-vuex-store/blob/ca966c0f31ccac43c0c64d76bf4c4b0fd2d6df78/src/store/modules/customer.js#L81) \> [abstract](https://github.com/maoberlehner/how-to-structure-a-complex-vuex-store/search?q=updateField&unscoped_q=updateField).,1530129334.0
BehindTheMath,"There's no way to completely hide tokens on the client-side. You can either obfuscate it, or use a server to make the API calls. ",1530054410.0
ymhr,"If you're using webpack, then try this: https://github.com/mrsteele/dotenv-webpack.

It uses webpack to globally provide `.env` variables, and you would be able to access them as `process.env.VARIABLE` like you want.",1530097108.0
MildlyVague,Depending on the complexity and how many components you end up having to pass this info down through you may want to look into Vuex for storing User data.  Vuex is essentially a global store of information that all your components know about and can access values from,1530052269.0
moriartie1,I've written a blog post about multiple ways of how to pass data between components: [https://markus.oberlehner.net/blog/should-i-store-this-data-in-vuex/](https://markus.oberlehner.net/blog/should-i-store-this-data-in-vuex/),1530069448.0
cyberst0rm,"Props can have .sync now which shortcuts the events.

Also, it'd be more instructive to discuss which operations are reactive, specifically things like array mutations.",1530066653.0
dennythecoder,"Has early ordering at [https://www.manning.com/dotd](https://www.manning.com/dotd)

Preview of Chapter 1 at [https://manning-content.s3.amazonaws.com/download/d/4a65f87-0ea8-4612-b71d-612c4eb524ee/Yerburgh\_TVA\_MEAP\_V05\_ch1.pdf](https://manning-content.s3.amazonaws.com/download/d/4a65f87-0ea8-4612-b71d-612c4eb524ee/Yerburgh_TVA_MEAP_V05_ch1.pdf)",1530040237.0
paul_h,The PDF of the table of contents and chapter 1 doesn't mention Selenium or WebDriver. Is the book going to get into that?,1530092536.0
worst-case-scenario-,"Thanks for the suggestion. Since we are. Anybody have other recommendation?  Whatever: blog post, tutorials, books.I want to learn this topic, and is a bit daunting at first.If somebody passed safely through the learning process can suggest some sources?Thanks guys!  


EDIT: Could be nice free.",1530093618.0
,[deleted],1530072693.0
archivedsofa,"You can use Vue js like you use jQuery. Import in your head, then write your JS as usual.

You could also create a SPA with Vue and read the entries from the REST API of Wordpress.",1530039530.0
usx-tv,"A few thoughts:

1 - Why force javascript on a user only for ""forms and stuff""? Some users disable javascript. See solution in point 3.

2 - I personally dislike using Vue for as a small part of a project, I'd either go all the way and use Vue entirely (in this case, using the headless API) or not at all.

Why? Let's say in the future someone needs to pickup the project. It won't be obvious at start that it contains some Vue code, and might cause issues for the future person continuing development. If Vue is used from the start, it would be spottable early on and precautions can be taken.

3 - Consider SSR + Vue + WP if you do decide to go down this route. Some examples and proof of concept are available on github (https://github.com/srhise/nuxt-wordpress-pwa)",1530178848.0
4ever_youngz,"Yes, just include vue as a dependency and import into your JS files you will be using Vue.",1530037470.0
budd222,"With your project, just include vue in the footer with your other scripts and begin. ",1530051641.0
magenta_placenta,Direct link here: https://www.dropbox.com/s/ai7j5ei0f24aoz6/The%20Vue.js%20Handbook.pdf?dl=0,1530019837.0
slinkywafflepants,Thanks! Will give this a read sometime.,1530035867.0
everBeliever,I guess the banner picture is stolen from another reddit post. Nice write up BTW.,1530022958.0
dave__stewart,"Well done for – and good luck with – organising Blake!

See you there :)",1530047441.0
cutety,"If you'd just like to get the number of visible items in your current implementation it'd be fairly simple with a computed property:

    computed: {
      numVisible() {
        return this.allNotes.map(({ notes }) =>
          notes.filter(({ isHidden }) => !isHidden),
        ).flat().length;
      },
    }

However, how I'd personally would do this is just use a property to store the visible notes, then use a computed property for all notes that maps through a constant that contains all the static note information (i.e. letter, string, octave, & fret) and checks if that note is in the visible notes array, and sets the `isHidden` value that way. Some quick (untested) code to give you the idea:

    const NUM_FRETS = 22;
    const GUITAR_TUNING = [
      [""E"", ""F"", ""F#"", ""G"", ""G#"", ""A"", ""A#"", ""B"", ""C"", ""C#"", ""D"", ""D#""],
      // ...the other strings
    ];

    const ALL_NOTES = GUITAR_TUNING.map((stringNotes, strIndex) => {
      // initialize to -1 so on the first iteration below it gets incremented to 0
      let noteIndex = -1;
      let currentOctave = 0;

      return Array(NUM_FRETS).keys().map(fretNum => {
        if (fretNum % 12 === 0) {
          noteIndex += 1;
          currentOctave += 1;
        }

        const letter = stringNotes[noteIndex]
        const octave = currentOctave;
        const strNum = strIndex + 1;

        return { letter, octave, strNum, fretNum };
      });
    }).flat();

    export default {
      data() {
        return {
          visible: [],
        };
      },
      computed: {
        allNotes() {
          return ALL_NOTES.map(note => {
            const isHidden = this.visible.some(visible =>
              Object.keys(note).every(key => visible[key] === note[key]),
            );

            return { ...note, isHidden };
          });
        },
      },
      methods: {
        eventChild(fretNum, interval, octave, isHidden, strNum) {
          const note = { letter: notename, fretNum, octave, strNum };
          if (!isHidden) return this.visible = [...this.visible, note];

          this.visible = this.visible.filter(visible =>
            Object.keys(note).every(key => visible[key] === note[key]),
          );
        },
      },
    };

Then to get the visible items you’d just have to do `this.visible.length`.",1529980235.0
VIM_GT_EMACS,"I dont mind react, but I can definitely say redux is far more cumbersome than something great like Vuex. 

If you're doing static sites with no state though, then the change between vue/nuxt to react/next/gatsby isn't tough at all. ",1529936482.0
adstwlearn,"Funny you bring this up - but I just published the React version of my open-source notes app built with Vue and Koa. I've been interested in React for a bit so I figured it'd be good to remake the exact same app - but instead of using Vue, Vuex, and Vue-Router - I'd use React, Redux, and React-Router.

In the end I like the Vue world a bit better. React is nice, but it seems to have less batteries installed. I know that some may find that to be a plus - and it is at first while you're learning - but after a while it just means you're writing a bit of extra code.

Check out them out:

[Link to the React version demo](https://johndatserakis.github.io/koa-react-notes-web/#/) | [Link to the React version github](https://github.com/johndatserakis/koa-react-notes-web) 

[Link to the Vue version demo](https://koa-vue-notes-web.innermonkdesign.com/) | [Link to the Vue version github](https://github.com/johndatserakis/koa-vue-notes-web)
 
[Link to the backend Koa github](https://github.com/johndatserakis/koa-vue-notes-api)",1529946747.0
fucking_passwords,"Just start playing around with React, I think you’ll find that the overall concepts are very similar.",1529940159.0
AceBacker,"Every thing requires more lines of code.  And jsx takes a little reading to figure out the cool things you can do with it.  Development takes longer.

Other than that it's pretty simple stuff.",1529942780.0
drunk_puppies,I read recently that vue makes it easy to write JavaScript in your html with templates. React makes it easy to write html in your JavaScript with jsx. Thinking about it this way might help you transition. ,1529945293.0
horses_arent_friends,"I’ve been picking up react in preparation for moving to a new team - so far everything has been straight forward and a lot of concepts translate well from Vue. So far my experience has been that React prioritizes simplicity over ease of use (e.g. sometimes you have to be more particular about which lifecycle hooks you use, thankfully it’s all easy to reason about). Sometimes the language in the docs/community can be obnoxious (lots of pseudo-FP concepts are explained more poorly than in Elm, an actual FP language lol)

Setting up a react project with typescript is a little more janky than I would have hoped, probably pebcac on my part though

Overall the experience is fine, and it’s nice having access to a larger ecosystem and English speaking community. ",1529940326.0
jeppews,I come form a vue background and just finished a react native project that I started with no more react knowledge than what i've read on various medium articles and such. It certainly takes a bit of getting used to. Especially connecting redux to components took me a while. But I would say that if you have good enough understanding of js then you should be fine. Just start playing around with it a bit and you'll be confident faster than you think. ,1529955011.0
CristiJ,"Personally, the transition was pretty smooth for me. In the end, these 2 libraries are very similar in what and how they do things. React does require more boilerplate code, especially for binding data, setting state and ""watching changes"" but you'll get used to it. It can be frustrating knowing that there is another library that makes your life easier but I guess you'll get used to it.",1529988776.0
AwesomeInPerson,"Most concepts are very very similar, but you need external packages for a lot of things that are included with Vue - especially styling and transitions. Generally you need to write more to achieve the same and it's (imo) more cognitive load.  
I still like both very much and the huge React ecosystem is definitely nice.",1530010430.0
SuperFluffyPunch,I tried learning react but hated the architecture. Switched to vue and everythings pleasant. It sucks that more jobs want react instead of vue. I can't see myself professionally working with react. It would be so painful.,1534788180.0
archivedsofa,"Yeah, React is still far more popular in the western world.

I use both and IMO the major points you should look into are:

* JSX
* Redux or MobX
* React Router (unofficial router that most people seem to use in React)",1529940322.0
archivedsofa,"You need to look into SSR (server side rendering) with Nuxt.

You'll need a Node server to run that. Heroku has free dynos that are easy to use and work fine for dev.",1529940956.0
mobiman1,"Look at ""Nuxt.js - Vue.js on Steroids"" by Maximilian Schwarzmuller on Udemy: https://www.udemy.com/nuxtjs-vuejs-on-steroids/learn/v4/

He goes over building Universal Apps, where the first page is rendered on the server and sent to the client as static HTML (for SEO), and each page after that is rendered locally.",1529942275.0
Eloiole,I encourage server rendering but you can also have a read at that : https://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157,1529950837.0
raphaelarias,I find better to put as meta in the router and with two lines change the title of the page according the route the user is in.,1529925570.0
vinicius73,https://busy.org/@vinicius73/vue-page-title,1529868899.0
savunit,"It’s scaffolding and boilerplate, not a drop in replacement for your environment and specific needs.",1529857246.0
fzy_,"Well, I think you know the answer to your question. You already have your own thing, and it seems too foreign from what vue-cli has to offer to benefit from it. Vue-cli is _the_ way to create and manage idiomatic vue projects. It's an opinionated tool that lets you extend it however you want but within a certain boundary. Your project doesn't seem to fit within this boundary, so all the defaults that come with vue-cli will only get in your way. That is, unless you're willing to start refactoring to benefit from the vue-cli workflow in the future.",1529857631.0
DOG-ZILLA,"Nobody is forcing you to use it of course. 

Your setup sounds very specific, so maybe you’re better off going it alone anyway. Every tool has a job and all that. 

It’s great for getting a project up and running that”just works” in a matter of minutes. 

What’s great about Vue Cli 3 over 2, is that all the config is no longer directly in the project. You simply “augment” the webpack config with webpack chain. The docs explain this too. 

It makes upgrading things much easier going forward. 

Not every tool is the correct tool. Use what makes most common sense. If that’s a custom webpack config then so be it. 
",1529860081.0
-GenghisDong,"I like the fast setup and Vue UI of it, all your commands in one place with error logs and easy installing of extensions etc. Maybe if you are fast with the commands yourself it's not useful but I like a UI myself. ",1529857953.0
endjynn,vue-cli is designed for one purpose - to reduce the barrier of entry. If you're comfortable writing (and managing) your own Webpack config then you should not use vue-cli. Although it is a very elegant solution it is simply an abstraction around your build process. Don't bother using it if it will just get in your way :),1529859976.0
d_abernathy89,">  I would have to overwrite many of the defaults anyway because my project is a legacy multi-page app, already handles publication of assets (hashes, immutable caching, web manifest), has multiple tenants (therefore needs multiple webpack outputs for different scopes).

There is your answer. Vue CLI 3 is not a great fit for your project.",1529874818.0
pier25,"I totally agree with you, there is really no need of Vue CLI. But this is generally an unpopular opinion in /r/vuejs and the Vue community in general.",1529877550.0
DocileDino,"Not the fanciest solution, but I often just add a v-if in the parent component to check if the required data is present before showing the component. However, sometimes I need the component showing something even when the data isn't available, in which case I just move that v-if into the child component.",1529856038.0
irphunky,"Make your child component expect this situation. 

Allow it to except null and handle that  as you wish and then when the parent passes the changed value it can deal with that also.

So rather than using `created` you want to `watch` for the props value change and then trigger the actions.",1529872471.0
AmishPanda00,"Similar questions on the Vue forum. Looks like a fairly common issue. The above comment is the common solution but looks like you can use $watch too. 
https://forum.vuejs.org/t/user-data-via-ajax-from-parent-to-component/2301",1529864252.0
FrederikET,"As mentioned by @DocileDino can you add an v-if statement to check if all required field is present. I would personally prefer adding a if statement in the function that check if the data isn't invalid data.

I believe another and simpler solution is to change the created function i nChartUsage to mounted. It isn't something i have tested and i don't know what the best practice would be in this situation.",1529863906.0
Marviuz,"So uhm...

My problem was just because `create-nuxt-app` installed vuetify version 0.17.x which is not compatible to the latest vue. So `npm install vuetify@latest` fixed my problem.",1529842941.0
Heyokalol,Seems like the transition expects a String for its name prop. Either the prop is null or it somehow is a boolean.,1529836065.0
toadkicker,"Form elements require a 'name' attribute, and I guess v-select returns false if one isn't set.",1529839094.0
Kindrik76,"JQuery might be your issue. Vue uses a virtual Dom, angular does not.",1529792164.0
getsiked,I'm going to PM you to try and help if that's OK!,1529790710.0
Lochlan,I've got a solution. Shall I make a PR?,1529794810.0
kefirchik,"A different computed property for each key won't solve the underlying problem that you're modifying Vuex state from within your component. All changes to state need to flow through a mutation. 

We tend to use the following pattern,


    <template>
       <input type=""number"" :value=""myObj.foo"" @input=""updateMyObj({ foo: $event.target.value })""/>
    </template>
    <script>
    import { mapGetters, mapMutations } from 'vuex'
    
    export default {
       // ...
       computed: {
          ...mapGetters(['myObj']),
       },
       methods: {
          ...mapMutations(['updateMyObj']),
       }
    }
    </script>

    // In your store
    export const updateMyObj(state, changes) {
       Object.assign(state.myObj, changes)
    } 
 
You also can perform the mutation from within a computed setter (https://vuejs.org/v2/guide/computed.html#Computed-Setter), which will clean up your markup (allowing you to use `v-model` directly) but imho is less clean overall.

Disclaimer: The sample code above is mostly from memory and untested, but should set you on the right direction.",1529705641.0
lben18,"You can only change a state using a mutator, v-model is not a vuex mutator. One strategy is use v-model with some variable, watch the variable and when the variable changes you dispatch a mutation. But if you can try to use mapGetters and mapSetters (I don't recall the name right now sorry) ",1529709879.0
pier25,"Personally I would question if you should really put the form state in Vuex instead of a component.

Vuex is meant for application central state, and maybe (maybe) you are over complicating this.",1529774704.0
VIM_GT_EMACS,newish to vuex but isn't this directly caused by vuex running in strict mode which disallows use of v-model?,1529704073.0
juanloco,"If you can code, might be worth to look for some freelance web dev work, regardless of your chosen framework.",1529694085.0
hmaddocks,Making money with little to no effort. Let us know how that works out for you. ,1529703533.0
tonjohn,"I recommend joining this community: https://www.indiehackers.com/

You may also want to read [The $100 Startup](http://100startup.com/)",1529968755.0
pwkeygen,"awesome, i'm in. Do you have any connections in other businesses?",1529694429.0
irphunky,"Your not calling the method or passing anything through to it.

    v-for=""items in callMethod(param)""

However I wouldn't call them method within v-for, I would either use a computed prop or call this on create and store the response on a data value.",1529648745.0
pier25,"`getByCat` doesn't return anything so `v-for=""items in getByCat""` will iterate on undefined.

You should use this `v-for=""item in items""` and call `getByCat` on `mounted()` or something.",1529774313.0
brandonchinn178,try this https://stackoverflow.com/questions/42193278/vue-js-ajax-computed-property,1529648719.0
Brahminmeat,"So a few things. 

First, in the v-for I believe you mean something like ""v-for='item in items'""

Then, there's not need to put a direct API call as a return of items (or getByCat) as you called it.

Simply, on created() run ""this.getByCat""

Then in your methods you can setup your getByCat method and inside it's promise you can set the response into items

getByCat(){

    // Do API call

        //Then...

        ""this.items = response"" or ""Vue.set(this.items, response)""

},

Alternatively if your goal is to get just one item from your API then I suggest you do something similar but instead of setting items then looping through using a v-for, you can just set the response as item. 

Edit: On second look it seems like you're almost there. Just swap out the v-for for ""item in items"" and run ""this.getbycat"" on ""created()"" of the lifecycle.

Edit edit: Actually on created () do:

// created() {

//     let 🐈 = 'hot'

//     this.getbycat(🐈)

// }",1529648813.0
GoogleMac,"Everything looks good except for your v-for needs to be looping through items, not the getByCat.",1529676868.0
janslu,Take a look at nuxtjs - this is vuejs rendered on the server. You may easily expand the server side with express and keep it as a single project.,1529641719.0
gallowdp,Check out Laravel. It has Vue built into it. You can build your API and host the HTML with Laravel and use Vue for front-end all within the same server.,1529638113.0
irphunky,"Create a component that you pass the SRC through as a prop and have it create a computed prop for you.

Or just use a filter...",1529649129.0
pier25,"> but you can't use interpolation in an <img src>

Well you can with `<img :src=""..."">` but using a computed property or filter is a better approach since you want as less logic as possible in your templates.",1529779077.0
dballz12,Oh man i’m sure I’ve done something similar... I’m on mobile but will check this tomorrow and update if no one has responded. ,1529630814.0
pier25,"You should use `v-model` for sure.

The error you are getting seems to be coming from the linter so your code might be perfectly valid.

https://github.com/vuejs/eslint-plugin-vue/issues/240

If you need more specific help you should create a reproducible use case in JSFiddle, JSBin, or something like that.

> Am I sending my data from the API the right way?

Personally I would have 2 endpoints:

1) To get the product and its configurations. Eg: `/products/123`

2) To get all the possible configurations for a product type Eg: `/product-configuration/123`.

Even if you maintain the current structure, there is no need to repeat what each thing is in your arrays:

    {""id"": 1,""name"": ""iPod- 32gb, white"",""attributes"": [
        {""id"": 1,""name"": ""Steel"",""attribute_id"": 1},
        {""id"": 3,""name"": ""Black"",""attribute_id"": 2}
        ],
    
        ""configuration"": {""id"": 5, ""name"": ""Lounge Chair"",""attributes"": [
            {""id"": 1,""name"": ""Size"",""values"": [
                {""id"": 1,""name"": ""32gb""},
                {""id"": 2,""name"": ""64gb""}
                ]},
            {""id"": 2,""name"": ""Color"",""values"": [
                {""id"": 3,""name"": ""white""},
                {""id"": 4,""name"": ""black""}
                ]}",1529775669.0
dballz12,Nice work!,1530044590.0
d_abernathy89,"It's pretty common to need to create a wrapper component, either for a 3rd party component that you want to decorate or reduce your dependence on, or for reusability within your own code. It took me a little while to figure out how to wrap a component that relies heavily on named slots & scoped slots, so I put together this example in case it might be helpful to others.",1529595910.0
Arswaw,"By stepper do you mean wizard?

How different is the view for each step?

Why can't you just route a certain part of the page rather than the whole page?

Example, all the space underneath the button can change.

Am I understanding your problem right?",1529599236.0
aeksco,"Alternatively you could build a custom component with the `next` method defined, and pass your route (i.e. `/Housing`) as a prop.

I think this approach is fine - the component could also store regarding which step you're on and your template could render different parts of the form with `v-if`",1529600728.0
ahackersday,"Nice tutorial, easy to follow :-)",1529662193.0
sheeplipid,Why not make each seat a component and pass in all its dada from the array? Looks good. ,1529587462.0
mynameiscody07,"Agree with other comments heres.  Each seat can be a component that you pass it's data to.  With this you can add new state for a seat called obstructed. and let the component deal with obstructed seats.

For things like SoundBooth you can have another component to handle those.  This component could take a title and maybe a seat-span prop which allows you to dynamically create these other things in the rows of seats.",1529597131.0
Metropolis1927Remix,"I've always wanted to use this UI for something.

https://tympanus.net/codrops/2016/01/12/cinema-seat-preview-experiment/",1530706221.0
thinkadrian,How about [Bootstrap-Vue?](https://bootstrap-vue.js.org) ,1529579899.0
ezaquarii_com,"Pretty much the same way. Vue supports HTML templates, just use bootstrap or semantic UI and you're done.

There are some issues with animated elements. You might want to use curated Vue components, such as semantic-ui-vue or bootstrap-vue.",1529579951.0
-GenghisDong,Element UI has components for everything and uses bootstrap-like columns. It also depends on the style you want as there are also Material Design libraries etc. ,1529580642.0
chrissilich,"Style tag and classes, just like everything else (except react). ",1529585664.0
arne,"I really like [atUI](https://at-ui.github.io/at-ui/#/en)

Some of the documentation isn't that we'll translated yet, but the styling and utility of it is great.",1529824252.0
DukeBerith,"If those scripts you require come before your script, then they'll be fine. 

Otherwise the other poster's response will do the trick.",1529569192.0
Brahminmeat,"import './libs/jQuery.js' in your app.js (or in a specific component)

@import './styles.css' in your *.scss

",1529560106.0
thomasswilliams,"If you're using webpack, I found I needed (webpack 4.6.0, webpack-cli 2.0.15, vue 2.5.16, vue-cli 2.9.3):

* `npm install jquery --save`
* `import $ from 'jquery'` in component
* (can use jQuery from a CDN as script tag, and external in webpack.base.conf.js as per [https://webpack.js.org/configuration/externals/](https://webpack.js.org/configuration/externals/))",1529632685.0
GoogleMac,"A couple things I see: Your code looks simple and clean, so props. Your console logging would not be showing a response because you are not returning anything. Second, there is nothing in your JavaScript to either remove that record from the table or refresh the table. Lastly, I would try using @click.prevent to see if that makes a difference. ",1529555538.0
6bytesunder,"Am I the only one who sees ""deleteAddress"" on the button click event and then ""deleteUser"" as the script that is supposed to be run? Is this just a typo pasting the code here or is that the root cause?",1529571416.0
irphunky,"Do you see a ajax request when you click the button? If you do, does it return a successful response?",1529563100.0
Danakin,"Just checking if the token exists should be enough. You should check the token at every API call on the backend anyway, and send data accordingly. No real need to protect frontend routes if the displayed content is empty.",1529541772.0
Impressionable-Youth,"That's correct, they could, but would it matter if they did?  They need the correct token to get data and post data so even if they get ""into"" your application they won't see anything except your layout and static content.

The other option is to send a token check to your api on every route change.",1529541364.0
3lpsy,"The front end (vue-router) guard is a UX feature, not a security feature. Assume that users will be able to access all front end routes. ",1529554240.0
d_abernathy89,"BTW, if possible you could consider secure, http only cookies instead of local storage for storing JWTs:

https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage",1529595722.0
desnoth,"In my app we have a specific api route for refreshing the JWT, it verify the tokens server side and refresh user infos too. (Symfony 3 in back-end). I can link the Vue repo if you want",1529604648.0
pier25,"> is this not really something I should be worrying about?

You really shouldn't worry much about this.

Front end security is nil.

Strong security is enforced at the server level so even if someone could access the route `/users/123` the API would respond with an error.",1529773663.0
rdbinteractive,"You may find this article useful: [https://inclusive-components.design/cards/](https://inclusive-components.design/cards/)  


It won't take you all the way to your goal, but should give you a solid foundation to work from.",1529509878.0
denorm,"Unfortunately this is just a generic list of Vue UI component libraries ordered seemingly by number of Github stars.  As such I find it pretty useless.  Having tested almost each one of these I can say they have different use cases.  Some are simply adapting a favorite CSS framework, like Bulma and Bootstrap, while others like Vuetify and Element are aiming to be more full-fledged UI frameworks.  Some, like Element, are great for desktop, but suck on mobile, while others are pretty much mobile-only.  Some, like Keen-UI, may have thousands of stars but haven't been updated in a long time or have poor support.  (Keen-UI components *are* nice but haven't been updated in about a year!)  So yeah, anyone can hack together such a list of ""popular"" projects, but please at least try to provide some kind of analysis as well.",1529532540.0
The5thElephant,"I feel like web apps that use UI libraries tend to end up looking the same. Sure you can customize colors and some details, but you can usually tell.

Also if the library has a drop down component for example that doesn’t have a feature you need, you have to add another 3rd party library or struggle to extend the UI library. ",1529526745.0
Tuyendz,I using Vuetify for my project. It's a awesome framework to Vue frontend developer. 9 point for vuetify.,1529568792.0
cyanydeez,"I think quasar has the most value to learning a UI framework, but I'd like to see a lightweight comparison to quasar vs others.",1529511943.0
2ht,"The fact that there are 21 different UI libraries for Vue.js is kind of silly.

The fact that this is a list of the ""21 top"" UI libraries is just absurd.",1529522194.0
omgdracula,Can someone explain the main reason vue was used for this?,1529505554.0
phonerat,"Thanks for this. I am learning Vue right now so I appreciate any kind of example code that utilizes it. 

I feel like this tutorial could be more valuable if you created a card component instead of putting all of the code into one single Vue instance, and then showed how you would take a more generic card component and reuse/style it in different ways. ",1529600304.0
thinkadrian,You can do this with just CSS.,1529512875.0
jcdyer3,"I appreciate the use of slot's as the cover image.
",1529490809.0
evilpingwin,"Someone wishing to understand slots would probably be better off looking into the Web Components spec as `slots` in a variety of frameworks are simply modelled after the official spec. 

[MDN - Using templates and slots.](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots)",1529489488.0
toadkicker,It’s short because its easy to understand.,1529485577.0
shanmukhateja94,That's a hideous picture. Why oh why would you scare me?,1529507352.0
unsung_unshift,""" If you hit a roadblock the chat is probably your best bet since the official forums are a desolate land "" -- huh?  I've had nothing but positive experiences on the forum, a man named Linus responded in such a way to help me out close to a half dozen times, and always within a half hour.",1529447410.0
unsung_unshift,""" Component boilerplate"" (meh) -- you mean as opposed to Angular1's ""kitchen sink"": $scope?  Where you put properties \*and\* methods?  This is one of the places Vue is a vast \*improvement\* -- considering (sub) objects such as ""data"" and ""methods"", within an object, as ""boilerplate"" seems ~~like pure whining~~ specious to me.",1529465589.0
didinj,"Great alternative for React, or maybe Vue will replace React as our frontend framework.",1529450072.0
andyRtCh,"Vue is not good, it's awesome. Its happening boys, NPM downloads are going up and it is surpassing React... Countless hours of learning are paying off",1529446525.0
edanceee,I wish I could read a decent article on medium for once :(,1529501911.0
chicagobearsrocks,Use https://www.npmjs.com/package/dotenv,1529438340.0
Pedrock10,"You can configure nginx to inject the javascript variables into the HTML files, using your environment variables. Take a look at this: https://stackoverflow.com/questions/19700871/how-to-inject-custom-content-via-nginx

EDIT: It might not be trivial to use the environment variables in the nginx config. If that's the case, maybe you can write a script to edit your index.html file when booting the container.",1529454108.0
toqy,Haven’t messed with the new Vue cli yet but the traditional way to do this was to have webpack insert the values at build time. So you’d use process.env.WHATEVER like in node and in your webpack config set up the handling of that. ,1529456551.0
arbalias,"Hi u/trudvang 

Did you ever solve this issue? I have the same requirement and have been spinning my wheels for a week on this.

Using CLI v3.0.5

Thank you.",1540453640.0
VIM_GT_EMACS,"I use the nuxt framework for vue so this might not be 100% transferable, but maybe just worth mentioning. In this case you can place the fonts in either an assets folder or a static folder. Kyle Matthews (GatsbyJS creator for react) also has all google font faces available as a node module you can install with NPM and use ES6 import on. I've only done that in gatsby, but presume it can be done in vue/nuxt if one desires.",1529436403.0
vaaski,"You can just use [Google Fonts](https://fonts.google.com) & import it in css if you don't need it offline.

sass: `@import url(https://fonts.googleapis.com/css?family=Roboto)`",1529474266.0
FarishKash,"Did you try this npm package?

[https://www.npmjs.com/package/google-fonts-webpack-plugin](https://www.npmjs.com/package/google-fonts-webpack-plugin)",1529462703.0
thomasswilliams,I followed a guide at [https://medium.com/@daddycat/using-offline-material-icons-and-roboto-font-in-electron-app-f25082447443](https://medium.com/@daddycat/using-offline-material-icons-and-roboto-font-in-electron-app-f25082447443) to locally host the Roboto font and Material icons needed by Vuetify (website using webpack),1529473682.0
carrot_gg,Use WebFontLoader: https://github.com/typekit/webfontloader,1529501878.0
ClickableLinkBot,"##r/NativeScript
---------------------------------------------
^(For mobile and non-RES users) ^| 
[^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| 
^(-1 to Remove) ^| 
[^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)",1529425202.0
catfilip,Can we get a screenshot from your devtools?,1529461411.0
thomasswilliams,"Simple web app that includes Vue.js in web page (no build step), uses Vuetify and is well documented and explained.",1529367474.0
techmighty,The event bus isn't discussed here. ,1529374673.0
Amimaro,"Any feedback, issue, PRs and likes are welcome :D",1529352305.0
SHA-384,"Look into S3’s Pre-signed POSTs. Sounds like it should be a good solution for you

https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/s3-presigned-post.html",1529340901.0
cheeseboythrowaway,AFAIK there's not a safe way to do that. You need an IAM user to upload and you don't wanna be giving out those kinds of creds to your users. This should be managed by a back end.,1529336247.0
endjynn,"Wait...  
Is this a wrapper (Vue) around a wrapper (React) around a wrapper (React Native)? :D",1529335272.0
pd-andy,"This is how mutations are supposed to work in vuex. Components never mutate state directly, they call mutations which handle that operation; that means you have a single point where your state is being mutated and you can better track what is happening. 

You're right you should never `this.$store.state.x = y` directly. ",1529333681.0
YourCupOTea,"The main difference is you can add or remove various plugins before or after init. Additionally you can do way more config without have to eject and not longer be upgradeable.

https://vuejsdevelopers.com/2018/03/26/vue-cli-3/

It's less about what you get and more about what you can do and configure when you want to.",1529333017.0
jineshshah36,Read the docs,1529327103.0
,Why don't you want to create a NodeJS Express app?,1529331356.0
mobiman1,"You might want to check out the ""Nuxt.js - Vue.js on Steroids"" tutorial on Udemy. Max Schwarzmuller goes over server-side middleware integration: https://www.udemy.com/nuxtjs-vuejs-on-steroids/learn/v4/overview",1529340048.0
6bytesunder,"Just for a moment though :( They are going head in head.  

I have this open in a browser tab [https://hasvuepassedreactyet.surge.sh/](https://hasvuepassedreactyet.surge.sh/)",1529324887.0
surtic86,Stars are not everything :) but i like Vue more then React and specially Angular.,1529345331.0
defunctAI,I have been watching as the gap decreased since about a year ago. I think react had 6k stars and I checked it weekly and saw vue closing in. I am happy vue has more stars now. They are both good frameworks but vue actually makes programing fun. Programing is stressful and I hope we make things like vue that make it kinda fun,1529323196.0
rickdg,"Yes, chinese devs like vue.",1529345056.0
inhalingsounds,"While that's cool and all, it doesn't mean anything.",1529320236.0
thinkadrian,Number of stars doesn’t say how many are actually using Vue.,1529402900.0
cheeseboythrowaway,my github star botnet is working,1529353270.0
ShetlandJames,It passed maybe 3-4 days ago originally ,1529357230.0
RoganTheGypo,"Passport is a backend technology (Normally at least) in that it passes tokens to the front end. 

What are you using for you backend (Server side)? Or is it all frontend at the moment?",1529307161.0
RoganTheGypo,"You can use docx for any site its not automatically generated it just uses MDX as their language of choice which is transpiled to JSX I belive. Which is why it looks like react.

There's a static document utility built with vue called [VuePress](http://VuePress.vuejs.org)",1529307576.0
carlosjs23,Build with Vue.js that is transpiled to React.js that is transpiled to mobile.,1529294665.0
dave__stewart,"If it were me, I'd just build a separate service class or JS module which manages this.

Another approach I've seen is to put the functions at the bottom of your store module, so they're accessible from anywhere in the file.",1529360675.0
aeksco,"In the past I've abstracted them into a separate file in the `store/lib` directory:

    ./src
    └── store
        ├── index.js
        ├── lib
        │   └── helpers.js
        └── user
            ├── actions.js
            ├── constants.js
            ├── getters.js
            ├── index.js
            ├── mutations.js
            └── state.js    

And include them like so:
    
    // @/store/user/actions.js
    
    import { $GET } from '@/store/lib/helpers'
    
    // // // //
    
    export default {
      someAction: ({ commit }) => {
        $GET('/api/users')
        .then(({ page, users}) => {
            commit('users', users)
        })
      },
     
    }
 
Reddit isn't great for sharing code :/

So you can split things up a bit like that if needed. Just make sure the helper functions don't rely on the commit / dispatch / getters object provided to the Vuex action as a argument - instead pass the necessary data into the functions and keep your references to getters/state/commit/dispatch encapsulated in the `actions.js` file. This helps things feel a little more `Vue-esque` and prevents your helper functions being tightly coupled to your Vuex store. A helper class would be suitable as well - just don't implement it in such a way that your helper class maintains its own state, or you'll have a bad time.

TLDR Keep your Vuex stuff in the `@/store/*` directory and and use helper functions or a class to simplify things

",1529374357.0
ransixi,"Github: https://github.com/marktext/marktext

1. Realtime preview and use snabbdom as its render engine.

2. Support CommonMark Spec and GitHub Flavored Markdown Spec.

3. Support paragraphs and inline style shortcuts to improve your writing efficiency.

4. Output HTML and PDF file.

5. Dark and Light themes.

6. Various edit mode: Source Code mode, Typewriter mode, Focus mode.",1529280324.0
pcmaster160,This looks really cool. I've been using Atom with a plug-in to render markdown and it's a very okay solution. I'll give this a try sometime soon!,1529283811.0
zenodub,"It's pretty cool. To be honest, I was a little apprehensive installing an electron app.

This would be pretty useful as a component for other projects. For example, I have a webapp that uses MD for descriptions. The ability to use something like this could be great, but you'd have to figure out where to put all the menus.

Also, if you want people to use this as a desktop app, you might want to consider more friendly packaging options. Consider using electron.build, and set up an Apple developer certificate for packaging. 

Thanks for sharing!
",1529323444.0
batisteo,"I wish it was something like SimpleMDE, which was abandoned and forked.  
[https://github.com/Ionaru/easy-markdown-editor](https://github.com/Ionaru/easy-markdown-editor)

Maybe you would like to adapt your project to make it an awesome textarea?",1529328862.0
cars10k,">Electron

mfw..",1529314594.0
aesamattki,What does this have to do with Vue?,1529292594.0
jemminger,"You don't need to assign the Vue instance to a variable if you aren't going to use it later.  

Just change 

    var question = new Vue({

to 

    new Vue({

",1529246381.0
seamouse3,"You can use front end frameworks that have built in features like that. My favourite is Vuetify, they have [expansion panels](https://vuetifyjs.com/en/components/expansion-panels). It's open source so if you don't want to use their features you can just use the code to see how they did it.",1529252779.0
AndyJessop,You're trying to instantiate your Vue from inside your component. You need a separate file with the `var...etc` and within that file `import` this component.,1529264871.0
kirbyfan64sos,Try [vue-mdc-adapter](https://github.com/stasson/vue-mdc-adapter) or [material-components-vue](https://github.com/matsp/material-components-vue). They both use Google's [official material components for web](https://github.com/material-components/material-components-web). ,1529243417.0
Shibaken500,Have you tried Vuetify or Vuesax? :) ,1529230720.0
Pedrock10,You can also check out Vue Material.,1529236169.0
dennythecoder,"There are a ton of component libs out there for Material design in conjunction with Vue (many listed by the other comments), but I'd like to speak to your question of how to initialize.

Taking from the [Materialize CSS Carousel Example](https://materializecss.com/carousel.html), if you have a component with the template like this:

      <div class=""carousel"">
        <a class=""carousel-item"" href=""#one!"">
          <img src=""https://lorempixel.com/250/250/nature/1"">
        </a>
        <a class=""carousel-item"" href=""#two!"">
            <img src=""https://lorempixel.com/250/250/nature/2"">
        </a>
        <a class=""carousel-item"" href=""#three!"">
            <img src=""https://lorempixel.com/250/250/nature/3"">
        </a>
      </div>

You can initialize it in the mounted function of your component:


    export default {
      mounted(){
        document.addEventListener('DOMContentLoaded', function() {
          // it'll be better to replace the following with this.$el or this.$refs.carousel
          var elems = document.querySelectorAll('.carousel');  
          var instances = M.Carousel.init(elems, options);
        });
      }

    }
",1529251491.0
Marviuz,Is the beta version (1.0) of Vue material good? or is it advisable to use the older version?,1529247664.0
jpieree1,Consider vue-material,1529236102.0
zeroskillz,"We are getting ready to release v1.1 of Vuetify. Lots of documentation improvements, new components and tons of new functionality. https://next.vuetifyjs.com. Since the new MD Spec was release mid development, we will be getting majority of the style updates from md1 to md2 taken care of in v1.2

If you have any questions feel free to ask.",1529277857.0
evilpingwin,All units are issued serial numbers at the time of manufacture.,1529167223.0
hungryelbow,"The number part of his name is a joke about his background. Since he's Chinese and China is a communist country, he made dark red part of his user name. https://www.colorhexa.com/990803",1529178216.0
seamouse3,I found the [vue cheatsheet](https://vuejs-tips.github.io/cheatsheet/) more useful.,1529173799.0
Lachlantula,"Man, those first two words scared me.",1529145376.0
musiton,I mainly use webpack and transpilers to be able to write each component in a .vue file. Templates as a string are ugly and difficult to debug imo. ,1529166028.0
paul_h,"I really wanted to read an article that was decomposing a lager application int multiple .vue files, and using something like https://github.com/RonnieSan/vue-browser-sfc for the reassembly at run time.  ",1529148791.0
HarmonicAscendant,"**Excellent!** If you can skip using dynamic import() and stick with the static import then this all works 100% will all the modern browsers.

In the near future all these build tools and transpilers will be laughed about, they are just an in-between stage till what is needed gets into the language. They are soon going to be legacy and cause a lot of annoyance and wasted time.

I have worked out my own method of using Vue with no webpack and ES6 Modules, it looks a little different to this article. **Anyone want to suggest any improvements? :)**

[index.html](https://github.com/David-Else/vuejs-natural-expression-calculator-app/blob/master/index.html) The index.html contains modern <template> tags (not text/x-template) and imports the entry main.js as a module:

[main.js](https://github.com/David-Else/vuejs-natural-expression-calculator-app/blob/master/src/main.js)...the entry point, just one import. This is so I can also import app.js somewhere else for tests... see the test-runner.html file:


[app.js](https://github.com/David-Else/vuejs-natural-expression-calculator-app/blob/master/src/app.js) Vue is loaded here as an ES6 module with:

    import Vue from '../vendor/vue.esm.browser.js';
",1529168975.0
segphault,"I use native ES6 modules so that I don’t have to deal with a build step during development. I use rollup to bundle for production. It is a huge improvement in the development experience, it radically reduces complexity and simplifies project setup. I like not having to install a ton of fragile crap from npm anymore. I don’t need a transpiler at all anymore because modern, standards-based JavaScript works out of the box in every browser except IE. After giving up the single-file component format, I’ve found that I really don’t miss it at all. The one thing that I feel is missing from this workflow is template precompilation during the production bundling step. I want to make a rollup plug-in that does this so that I can avoid the overhead of compiling all the templates on the client and having to include vue’s template parser in my bundle.",1529157933.0
ergnui34tj8934t0,Not tryna be funny but did you make sure you added `.eslintrc.js` with the dot at the beginning?,1529135655.0
RoganTheGypo,Is there a eslint config file in font awesome repo? If you've added it manually it might be getting picked up somewhere,1529139454.0
evilpingwin,"You are right. If you're repeating the same conversions all of the time you definitely need to abstract it out. Where you do those conversions is an architectural choice but  this sort of thing (since it seems specific to your front-end) should probably take place inside a Vuex action.

When you say getters do you mean Vuex getters? In principle using a Vuex getter for a computed value is fine (and conversions could be considered computed values derived from the original SI value). The problem with this approach is you then have to convert it back to an SI value to update your store and repeat the whole thing constantly. You could (and probably should) just shift that complexity out of your components, I find reducing the amount of work components do, especially to data, make things easier to manage.

I would put the conversion code into an action, then you can reuse this readily. Whether you want to convert as data comes in (from your data source), goes out (to your data source) or within your app (such as when saving it in Vuex state) you can do so with the same action. Since users can switch between unit types you will probably want to have the ability to perform the conversion within your app (unless I'm misunderstanding) as well when you commit or get the data.

You should probably be consistent when using Vuex (that's really the point of it) and always read and write to your data source via Vuex actions. Skipping Vuex and writing directly from a component defeats the object of using Vuex at all. With a more consistent pattern you're always going to know where the read/write actions live (in a Vuex action) which should make maintenance more manageable.

Also a debounce function might give more consistent results rather than using `.lazy`. Lazy fires on `change` rather than `input` which might not be desirable.",1529108870.0
ClickerMonkey,"I recently released unitz-ts - if you aren't satisfied with what you're using you could always check it out. It's Vue friendly! The test page listed below uses VueJS. 

https://clickermonkey.github.io/unitz-ts/tester.html",1530143329.0
tgaz,Please don't break open-in-new-tab functionality by hijacking click for links if you write something for others to use.,1529101297.0
Surajlyo,"This is really cool, there's 7 individual people within a few miles of me who've committed to vue related repos",1529109961.0
alfredmuffin,"This is cool, but those pins seem eerily accurate ",1529113145.0
batisteo,I’m glad to see Pulilab using Vue!,1529329580.0
HarmonicAscendant,That is very cool!,1529089433.0
therealhenrywinkler,"I don’t have much to contribute here, but there exists an extension called Vetur you may be interested in.",1529087269.0
Lelectrolux,"> Have I just been blind, or is there some reason I can find no mention of this obvious method of defining a template in HTML?!

Some browser won't work with that, and some could display it by defaulting the unknown `template` tag to a `div`.

Honestly, just create a shortcut `xtemplate` in vscode which extends with tab to 

    <script type=""text/x-template"">
        
    </script>

It even has full vue syntax highlighting in PHPStorm/WebStorm, so it should work well with **vetur** which like therealhenrywinkler said is a must have when using vue in vscode.

I would use it too if I didn't have to change between vscode and phpstorm based on front/back",1529089736.0
doitstuart,"There are some mentions of <template> in the official docs. Not many, but they do show how markup can be rendered within the tag.",1529100287.0
ibra5him,"You can simply use this css rule:

li>a:hover{
  color:red
}",1529074269.0
ibra5him,[Here is how would I do it using vue](https://codepen.io/ibrahimbeladi/pen/GGMEXq),1529074794.0
ydennisy,"Adding some code ... (not sure on the formatting)
```
import Vue from 'vue';
import App from './App.vue';
export default function fetchAppFromServer() {
Vue.component('App', () => import(/* webpackChunkName: ""ui"" */ './App.vue')
        .then((app) => console.log('here I am!', app))
);
    createDivForMount(); // this makes <div id=""cmp-app""></div>
    const vm = new Vue(App).$mount('#cmp-app');
    Promise.resolve()
}
```",1529138919.0
ancapfrito,"Lots of fake accounts, anyone can create a github account in 2 seconds and star their repo of choice...",1529062542.0
ezaquarii_com,I did my duty and starred. Have you?,1529330569.0
nothingduploading,"those sorts of mobile apps aren't very performant on older devices, its much better to build a native app.

The react-native vue plugin is terrible right now (maybe it'll get better, I see a lot of commits everyday). But it was broken out of the box when I tried it.

NativeScript was also broken out of the box when I tried it. That project looks dead to me.",1529048792.0
bmarkovic,"There is Weex, isn't specifically Vue but it originally supported only (and was built around) Vue:

https://weex.incubator.apache.org/

There is also Quasar if you want web-view based Cordova one like Ionic:

https://quasar-framework.org/",1529060774.0
capraruioan,vue-native.io,1529060571.0
leyenda92,There is framework7 and onsenui.,1529107299.0
usx-tv,"I think the question to ask yourself is, why use vue-x ""non-globally""?

What do you need pages.list for? Where are you sharing that information? If it's only within that component / children, you don't need to use a store. Store is meant to share state across various components / views that are not connected.",1529059013.0
dave__stewart,"Some of the core team members have even said that modules should not really be nested.

I think perhaps you're over-thinking the architecture at this early stage. Get the data in as least-complicatedly as you can, and see how you find it.",1529361525.0
jaesung2061,"I honestly don't think anything else compares to Vue in terms of ease of use, practicality, and productivity.",1529033364.0
enteleform,"**FINAL BATTLE:**  
https://www.npmjs.com/package/vue  
VS  
https://www.npmjs.com/package/react  ",1529044705.0
kisses_joy,"Cool, cool.

* Another data point: 189 contributors in Vue, vs 1192 in React.

* And another: of the ~~3k~~ 2.5k commits in Vue, ~~>66%~~ >79% are from a single contributor. Of the ~10k commits in React, <10% are from any single contributor.

Vue is definitely shining. But let's be honest, it's pretty much all Evan. If he gets hit by a bus, the project won't go much further. This is a huge consideration for larger companies. But I've been on a smallco project, too, using a core tech whose BDFL kinda vanished... it's not a pretty thing if/when that happens.",1529035211.0
DecadeMoon,[...and we're at 100k stars!](https://i.imgur.com/vIf0lAD.gif) 💯,1529064771.0
instantiatedObject,top 10 anime battles,1529083143.0
blacksonic86,HODL star until 100k then panic unstar,1529051702.0
nikaone,"It means nothing, anyway, it is a good news to vue. ",1529036285.0
maks25,Woooo,1529034794.0
kingduqc,I'm having a hard time findind jobs related to vue in my area. Plenty of React or Angular. ,1530811662.0
mypirateapp,"I am new to front end development and have never done react angular or even vue, I used to make my interfaces in plain vanilla JS lol, I just started a course today on Vue and I have to admit, I was scared how this s gonna go, so far looks smooth, learnt a lot of v-\*\*\* tags so far and not sure what this redux vuex etc is, hope it isnt too hard",1536822996.0
Wobbuffet964,"Check out Vue vs. React on Twitter.
Don't take it too seriously https://twitter.com/VsVue?s=17",1529052941.0
nothingduploading,"JWT works fine with vue.

I have not bothered with SSR because its mainly just for search engine indexing but they have gotten a lot better lately at indexing javascript.",1529032348.0
ewliang,"JWT works with Vue. As far as SSR goes, I just don't even bother with Vue.js, and go directly with using Nuxt.js. Nuxt.js is basically the SSR version of Vue.js. Yes, you can say Nuxt is like the Next version of React (but for Vue in this case.)

Additional:
- I too have been in your shoes. I've looked up tutorials in the past in regards to that topic. It does get very vague. Lots of different answers out there. Hence my reason for using Nuxt.js. However, if you don't plan on caring for search engine optimization or getting traffic to your webapp, then by all means just stick with Vue.js as is and avoid implementing SSR. If you plan to release your site and want traffic, then go SSR. Good luck!!! :)

SSR just means the server will generate the HTML CSS stuff, whereas Vuejs, being frontend based, everything is generated once user visits your website. Performance benefits being client side rendering. Less stress on servers.",1529032634.0
eptftz,"If you do SSR you can get much faster client speeds on slower devices, even more so if you cache the output. 

I would not worry about it so much if you're building an admin section or an app entirely behind a login. But a public site it can make a big difference to the user's experienced performance. Also note even though google bot is and others are getting better at rendering javascript sites, even google bot is like 20-30 versions behind chrome in terms of supported features, so for SEO it's a must still.

There are pretty cool ways to do SSR with things like headless chrome pretty easily too.",1529033820.0
toughToFindUsername,"Like the error says, you need to move the import to the top of the component file (inside the script tag). If it's the J's file move all imports at the top. If you actually read the error in detail, it will also show you types of comments to add to your code to disable eslint when there is no other way.",1529067950.0
GoogleMac,"To my knowledge, you can't use it without utilizing Vue. The good news is, you don't need the whole project to be written in Vue. You can just have some small bit of code to instantiate/mount a Vue object and then import that component and use it. ",1529030314.0
ewliang,"I agree with @GoogleMac. Also, can't you just use pure vanilla javascript to implement the slider as a standalone ""library"" component and just import it to your multiple sites? I'm pretty sure that would give you less overhead... unless you plan to convert all sites to be powered by Vue, then ok... Good luck! Let us know what you end up going with. :)",1529032540.0
usx-tv,"You can also have a look at this:

https://github.com/vuejs/vue-web-component-wrapper

Disclaimer: I have never tested this project.",1529059175.0
shanmukhateja94,"Hey there, I have used Firebase NoSQL database for building Android app on real estate listings.

Could you elaborate what did you mean by ""basic queries via a UI""?",1529027371.0
bitbytebit42,"Have you played with the prop ""return-object"" and the selected event?",1529018287.0
zeroskillz,The best way to handle models from a vue store is to use what I call a proxy model. Create a computer property that has a better and setter. Define the getter as returning the store model and define the setter as calling the store mutation to update the value.,1529278363.0
fessacchiotto,Looks great. Keep up the good work! Thanks for sharing. ,1529012517.0
yeahdixon,Once there is an error it’ll show up on screen. Depends on your Eslint settings with vscode,1528970276.0
Jazoom,Vue usually yells at you when you do something weird. Using Vetur in VS Code also helps.,1528979310.0
CSEngineer13,"Eh. This article is okay. I recommend:

https://github.com/chrisvfritz/vue-enterprise-boilerplate

As a better resource, and then just follow naming conventions as layed out in the styleguide and tweak for any preferences or project specific requirements you may have.",1528976107.0
bondzula,[storybook](https://github.com/storybooks/storybook) might interest you,1528986613.0
ClickerMonkey,Look at Vuetify's component documentation... Most of it is perfect IMO,1530143630.0
slinkywafflepants,"Try

authorizeUser() {
var vm = this
....
vm.$router.push ...",1528955666.0
batisteo,"Where can one rant about the slugginess of the landing pase of Vuesax?
I don't feel like using it because of this. ",1528990154.0
lusaxweb,github: https://github.com/lusaxweb/vuesax,1528950668.0
r1segago,"Do u want to run in another pc, or u just want to enter ""[somedomain.com:8080](https://somedomain.com:8080)"" on browser and open your Vue App?",1528927009.0
gustavohenrique_net,"Create or edit the `projectRootDir/vue.config.js` file:

```
module.exports: {
    configureWebpack: {
        devServer: {
            host: 'mycustomdomain',
            port: '8080'
        }
    }
}
```",1542147516.0
thomasswilliams,"Thanks for posting OP \- my quick thoughts are:

* a percentage of browsers (e.g. IE11) will not be able to display the app because of template tags
* allowable values for ""gender"" in app.js look to be ""Male""/""Female"", however you check for ""F"" which may not match
* you're already using ESLint, I would recommend [https://github.com/vuejs/eslint\-plugin\-vue](https://github.com/vuejs/eslint-plugin-vue)

Good luck!",1528949748.0
mvaneijgen,"Im in the same boat as you, but I have not started my first app and was thinking of posting the same question to see if my code was any good. So I can't really critic your app, but I have a pointer. It would me nice if you could enable Github pages, so that people can use your app and use the Vue debugger to see your app in working. Looking at static files isn't that intriguing and it is hard to understand if you don't see the implications the code has.  ",1528903829.0
Alskttiio,this is a really basic question that is covered in the docs. Read that. ,1528937207.0
pier25,"It's not a great idea to use cloud functions for REST APIs feeding user-facing services. It's convenient, and cheap, but cloud functions scale automatically to load, which means it's inevitable to hit cold starts more or less frequently.",1528910517.0
imGnarly,Vuejs \+ Lambda/Firebase functions works like a freakin' charm; this is good news.,1528922025.0
wbsgrepit,No idea why the author shows the refactor into vue as still going deep on dom selectors.   Just about every part of the code that references the dom directly could be done much cleaner in idiomatic vue. ,1528917828.0
cheese_bread_boye,I don't think Vue is a big fan of directly element manipulation. Do you really have to use that or can you think about changing the original code to match Vue's standards?,1528892110.0
irphunky,"It'll depend on what your doing,  but you can access the components DOM via `this.$el` but I wouldn't mess with innerHTML without expecting things to break.",1528891990.0
batahkoinonia,"I'm not sure how you had your first example working, but you'll need to add an event listener to your button (or the form).

`<v-btn @click.native=""onClick"">Log In</v-btn>`

`onClick` would refer to a method defined in your component.",1528899413.0
endjynn,PSA: One of the packages used in this tutorial mocha-webpack does not support Webpack 4 and appears to be no longer maintained.,1528894858.0
ryanmr,"Bootstrap uses jQuery for some components. Instead of using jQuery for that, there are Bootstrap component implementations that will exclude jQuery and instead using Vue or React or whatever the framework is for component functionality. 

There are pros and cons! There has been some development in JS-free css component libraries, like Bulma. ",1528849946.0
SecretAnteater,"Your intuition about when not to use Vue is correct. You don't need it, but it can help in certain (increasingly common) scenarios. 

First, Bootstrap is just a collection of CSS classes and *some* basic Javascript to support those classes. It solves a different problem than a JS framework like VueJS does. Bootstrap is great for basic websites that might have a dropdown navigation or a few HTML forms. 

**The benefits of VueJS (and other frameworks) are:**

- VueJS provides more structure and organization than jQuery (which Bootstrap uses) does. A framework is a good choice for websites that have data-heavy views, or lots of interactions. A framework will make it easier to keep track of any dynamic data on your site, making it easier to debug and work with. While you can certainly achieve this with vanilla JS, the more complex your features are, the more likely you will be to get lost in your code (or other developers getting lost in your code).
- Front-end routing also provides the performance benefit of displaying new routes instantly without waiting for requests to the server. Not everyone needs or wants that, though. 

",1528853882.0
thomasswilliams,"I've taken a similar approach to OP. A simpler web site can benefit from structured CSS and consistency across devices (and more) offered by Bootstrap, but when I start needing a lot of app\-like functionality via plugins \- for example, pop\-up notifications, pickers, loading spinners \- I use the excellent Vuetify framework [https://vuetifyjs.com/en/](https://vuetifyjs.com/en/)",1528935482.0
Droid2Win,"Bootstrap is simply a prebuilt CSS library intended to style HTML elements. It has an accompanying JavaScript library that adds some default behaviors to those elements. Ignoring the JQuery dependence for a moment, you're still stuck with writing each individual element, adding the appropriate bootstrap styles, the JavaScript behavior, etc.

Whereas libraries with prebuilt components for Vue/React have basically done all of that for you. They have already created the HTML elements, added all the styling, integrated the JavaScript for the behavior, and all you need to do is add them to your page. Because these components were made with the framework you're already using, they have great synergy with said framework.

If you're using Vue/React, I would recommend looking at these existing libraries. It doesn't mean you have to do the whole SPA thing, because these component libraries don't care if you have a single page or multi-page app. It's just designed to make it even faster to build powerful, robust UIs.",1528894092.0
SecretAnteater,"Totally up to you. Other than download payload, I don't think there would be a performance difference between either option. I'd be curious to hear if anyone else has any data around this.

If your different views don't share any related data, you might want to make them into separate apps. If you are going to use front-end routing to allow the user to quickly switch between the different views, you might want to bundle them all into the same app.

Either way, if you've organized your components well, whatever components you use in one app should work in your other apps (assuming they all have their required data). They can even share the same Vuex data store, and work together, even though they are separate Vue instances. 

Given your goals, it might make sense to keep the apps separate, especially the Admin dashboard. No sense in potentially exposing Admin data/features to users who don't have permission to see it. If you decide to merge them later, you can use `vue-router` to conditionally render your `<Homepage />`, `<UserDashboard />`, or `<AdminDashboard /> ` components. ",1528845104.0
anamorphism,it would make more sense to me to put them in the root since each module shouldn't technically know about any other modules.,1528847281.0
aeksco,"Check out the [vuex-persistedstate](https://github.com/robinvdvleuten/vuex-persistedstate) Vuex plugin - I've used it for save/load of user data for localstorage-centric apps and it works as advertised. The source code is simple and to the point.

Once in a while you can hit a problem when you mutate your state in such a way that it breaks your app, but you can run `delete localstorage.vuex` in your JS console to reset everything. I recommend populating your base state with a starter project because you will _definitely_ break something and have to start over

Also be sure to use the [vue-devtools](https://github.com/vuejs/vue-devtools) browser extension since it's immensely helpful for debugging vuex.",1529458731.0
bathyscaaf,"I use Bulma (CSS only ""framework"") and tweaked it's modal \-\- overrode a few of the styles with the included scss vars and some regular CSS (well, SCSS), and added some simple transition animations (copied and slightly modified the transition from [https://vuejs.org/v2/examples/modal.html](https://vuejs.org/v2/examples/modal.html)).  Each modal is within it's own component, use v\-if to show and hide so transitions will work (and forms will clear when they are closed).",1528869649.0
SecretAnteater,"I haven't found any that I liked. One of the more popular ones, `vue-js-modal` uses JS for layout, and is really clunky when doing anything that needs to be responsive. I just write my own, now. It is really easy using Vue's Slots feature. 

I used to use `ng-modal` for AngularJS (""the last AngualrJS modal service you'll ever need""), which has the perfect implementation, IMO. ",1528854185.0
anamorphism,"my favorite is to not use them because overlays/modals/etc... have always sucked, in my opinion.",1528847741.0
tucsonflyer,It’s ironic that the site is not mobile responsive,1528827121.0
jineshshah36,What’s the advantage over nativescript vue,1528826004.0
betagenius,What a crappy website,1528874096.0
zergUser1,Is this run by the vue foundation?,1528829127.0
fucking_passwords,"It would be nice to have an about page that explains how this works, this is the first time I’ve ever seen Vue and React Native in the same sentence.",1528828074.0
compubomb,"This is very neat. I wonder how it compares to native script. I know the native script application though has pretty crappy docs, is this any better? docs are okay so far, but how much translation do you have to do from reactjs -> vuejs docs for native workflows?",1528832223.0
CristiJ,Although I'm a Vue fan I don't understand what are the advantages of this thing. It's just a wrapper over react native which imho only creates complexity both for maintainers and end developers. Nativescript Vue is just a better solution for now.,1528957855.0
alollou,Great! Just hunted [https://www.producthunt.com/posts/vue\-native](https://www.producthunt.com/posts/vue-native),1528837187.0
niutech,How does it compare with [Weex](https://weex.incubator.apache.org/) or [NativeScript-Vue](https://nativescript-vue.org/)? What is the rationale for yet another native mobile app framework?,1528900771.0
LunarSword,"I'm confused. Wouldn't ""native"" imply it uses platform widgets rather than HTML?
",1528915777.0
toadkicker,Why would I choose this over ElectronJS?,1529023738.0
Lost_In_The_Past,"When I was building my app I used digital ocean to host the site and followed this guide https://medium.com/@Web_Bailey/deploy-a-vuejs-app-with-digitalocean-fd6e7af07e40

It worked out to be quite simple.",1528816638.0
Robodude,"Firebase was pretty easy: https://www.youtube.com/watch?v=meofoNuK3vo
Works great with vue-cli projects!",1528833481.0
gdffff,simplest one for me was a 1 line rsync script,1528817801.0
CaptainInsane-o,"I use this package. Its been fantastic for me.

https://www.npmjs.com/package/vue-gh-pages",1528819122.0
irphunky,"https://github.com/Phunky/markharwood.info/blob/master/buildspec.yml

Bitbucket Pipelines building, sending to S3 and then updating cloud front cache all on push to master.

",1528827580.0
oski18,Netlify,1528889210.0
OmegaVesko,"I want to point out that the Vue code here actually isn't quite the best way to do this in Vue. The best practice for submitting forms in Vue is to put an `@submit` handler on your form element, rather than an `@click` on your submit button (and then probably also a key event handler, once you realize you also want people to be able to submit the form with their keyboard). An `@submit` handles both of these cases while being cleaner and more declarative. ",1528824411.0
xRockTripodx,Frameworks on top of frameworks. Frameworks all the way down? ,1528731663.0
DOG-ZILLA,"I was wondering how this compares with Nuxt, then on the README you say to check out Ream, which is a Nuxt alternative. 

Is this just for the static part then and not SSR? ",1528728916.0
VIM_GT_EMACS,i like nuxt,1528817933.0
djvirgen,Is there any benefit to using a front-end framework for **static** websites? It seems like plain HTML or at most Google AMP would be sufficient.,1528731276.0
toadkicker,"1) what is a vuejs synthesizer
2) what is a red bull mind gamers
3 what is an ok bye

So I go to your site...aaaand its basically not making any more sense. This post should probably be removed for spam. You’re soliciting for developers.",1528722741.0
enteleform,"Check out [**Tone.js**](https://tonejs.github.io/) for handling the audio. They have a great set of [**Examples**](https://tonejs.github.io/examples/), and the [**Documentation**](https://tonejs.github.io/docs/) is easy to follow. Here are some [**Projects**](https://tonejs.github.io/demos) that were made with Tone.js.

Also here's a basic [**CodePen**](https://codepen.io/enteleform/pen/PepqYV) I made to test out Tone.js & responsive keyboard size.

**Note:** AudioContext can no longer be initialized automatically due to a recent [**Chrome Update**](https://www.theverge.com/2018/5/15/17358752/google-chrome-66-web-audio-api-sound-broken-game-change-delay-apology), which causes some issues (no audio) with web apps that haven't implemented a manual initialization. This is for all libraries that use the Web Audio API, not just Tone.js. Make sure to use [**StartAudioContext**](https://www.npmjs.com/package/startaudiocontext) as shown in my CodePen example, or implement your own workaround.",1528737418.0
toadkicker,You lost me after VueJS with this title...,1528721561.0
rickgarg,"Couple of things:

* Instead of redirecting to login with \* at the top of the file, set it at the bottom. If i'm not mistaken, Vue\-Router checks the order of the pages, so every time you try to enter a page it will redirect to \`/login\`. Also, instead of redirecting to login with \*, redirect to main, and verify if there's a user:

​

    routes: [
    { 
        path: ""/"",
        name: ""Main"",
        beforeEnter: requireAuth /* This is how I use it */
        ...
    },
    {
        path: ""/login"",
        ...
    },
    {
        path: ""*"",
        redirect: ""/""
    }
    
    /* This is an example, has worked really well for several projects */
    function requireAuth(to, from, next) {
      firebase.auth().onAuthStateChanged(function(user) {
        if (!user) {
          next({
            path: ""/login""
          });
        } else {
            next()
        }
    }

* Also, Firebase gives you options to control the session, given in the [Auth State Persistence docs](https://firebase.google.com/docs/auth/web/auth-state-persistence)

Hope it helps!",1528817978.0
neuralvapor,"Currently, your code only performs a login function. Nowhere does it check if the user is authenticated or not. You need to check it whenever the document is ready.
To do so, firebase conveniently adds a firebase.auth().onAuthStateChanged(fn) event handler. Move the code that's supposed to run on login to that function and then it should work. If I recall correctly, it's also triggered on a page reload (I'm pretty sure of that).
Be sure to remove the code on the signInWithPopup callback. It'll be triggered again on authStateChanged.",1528707011.0
OmegaVesko,"If your app is big enough to warrant it, sure. Rewriting a legacy system piece\-by\-piece is a [very common pattern](https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler).",1528701776.0
yeahdixon,"Start small is a good idea. Consider the components.  Def be careful converting legacy code and virtual dom, for instance jquery manipulations. ",1528702149.0
hugo__df,"Hey, I wrote a post about going from AngularJS to Vue, moving from jQuery should be simpler (see [https://codewithhugo.com/from\-angularjs\-to\-vue.js\-commonjs\-and\-jest/](https://codewithhugo.com/from-angularjs-to-vue.js-commonjs-and-jest/))

I would start with bundling, then adding Vue SFCs and rewriting each jQuery module as a Vue component as and when you need to.",1528724464.0
kaelwd,"There's this vue-cli template: https://github.com/SimulatedGREG/electron-vue

And if you like material, vuetify have our own fork of it: https://github.com/vuetifyjs/electron",1528697916.0
tquinn35,"There is this [https://github.com/mimecorg/vuido](https://github.com/mimecorg/vuido) . it is not exactly what you are looking for but it allows you to build native desktop apps using vue without electron. It is light weight runs on windows, mac and linux. ",1528684704.0
lolhowdoes,Quasar is the first that comes to mind. There are also some Vue \+ electron boilerplates kicking around on github.,1528677141.0
Sir_Poot,/r/Vuetify,1528693497.0
amoshydra,"How about nuxt? 

You can also checkout the nuxt awesome page. 
There are 2 electron templates that you  can use/take reference to. 
https://github.com/nuxt-community/awesome-nuxt/blob/master/README.md#starter-template",1528682075.0
nothingduploading,hard to say without seeing the code are you using vuex?,1528673811.0
wikitih,"Sounds like the browser is caching your page, instead of re-requesting it. Does [this](https://blog.55minutes.com/2011/10/how-to-defeat-the-browser-back-button-cache/) help you?",1528716167.0
batistr,great work! thank you,1528658852.0
dick_ey,"In your php file, are you including script src tags for the vue library and your instance (in that order)? ",1528658656.0
thinkadrian,"Why are you using PHP?

Also, is “myvueinstance” the name of the javascript file?",1528645121.0
orange_90,"You should show us your code, and console errors.",1528646406.0
TwoTapes,"I think a better way to store the information would be using the concept of a tag. Instead of using four boolean fields, have one for priority (immediate, urgent) and one for purpose (work, personal, you may want a different name).

This gives you the flexibility to add additional priorities or purposes in the future, while also making filtering them by each property easier.

Consider an array of todos with the following keys: id, description, priority, purpose.

You can use the filter method on a javascript array to pull only the todos you want. 

todos.filter(function(todo) {  
return todo.priority === 'urgent';  
});

Forgive the formatting, on mobile. 
",1528596616.0
irphunky,"Remember you can access an objects properties via `object[prop]` too.

Personally this requiring two separate logic checks is enough for me to move this to its own component.

This allows me to `v-bind` on the to do and set everything up on create and keep that logic out of the parent component.",1528613241.0
tonjohn,"I do something similar [here](https://github.com/tonjohn/vue-getcompared/blob/master/src/views/MortgagesView.vue) 

",1528771997.0
hutilicious,you should be able to do something like this if (process.env.NODE_ENV !== 'production') { ... },1528576259.0
nothingduploading,I'm using vue\-cli 3.0 and there's no webpack config.,1528574290.0
acklavidian,Sounds like you might have the index cached,1528908166.0
-GenghisDong,"Smooth transitions man

Is there also anything for easy searchbar? Maybe with autocomplete or dropdown? ",1528623029.0
lusaxweb,github: https://github.com/lusaxweb/vuesax,1528565327.0
FridgesArePeopleToo,The sidebar looks really nice but that circle that flashes when you click something is hideous.,1528575129.0
Nicksil,"This user spams their linksynergy redirecting referral links all over.

For those genuinely interested in seeing what's behind the curtain, here's a direct link to the content:

https://www.udemy.com/vuejs-2-the-complete-guide/",1528576540.0
antonelapendrakova,What makes this course better than other Vue courses?,1528555745.0
TheCruelWeasel,"Can confirm, I bought that course on Udemy and Maximilian is really good at it ! I started using VueJs on a daily basis for production apps right after, there's all you need to know in this course !",1528558429.0
BuckarooBanzaiAt8D,Awesome Course! ,1528557735.0
mvaneijgen,"A the chapter of building a Stock Trader app at the moment, great course! ",1528558872.0
yagaboosh,"Just bought this course, really enjoying it. ",1528588412.0
d_abernathy89,"Mods: do we have any rules here about affiliate links / redirects? Pretty annoying to see the domain up there as ""highlyrecommend.gabstore.club"" when it's just a redirect to a Udemy course with a referral code in the URL query.",1528590139.0
hank_kingsley,"If you don't mind me asking, what was the other course he taught? I'm in the process of taking this exact one, I really like the way he teaches.",1528555603.0
shounenwrath,This course got me through my thesis. Max is a really good teacher.,1528639073.0
N3KIO,"Call me skeptical, how much did he pay you to say that",1528575884.0
carrot_gg,Set the v-model as a method that receives the object/index in the loop. The method can take of everything else.,1528548814.0
BetterCallBadger,"Not sure if I understand your problem correctly but I think the easiest way to solve it is by making value an array.

https://jsfiddle.net/f3w5t9cj/",1528554114.0
SuspensefulSausage,"Nuxt has 2 types of middleware—router middleware and server middleware. Router middleware is run before _every_ route, whether the route is being loaded on the server or the client. Server middleware is only run on the server. 

In your case I would use server middleware to mount a middleware on the route `/api` which your frontend can call (visible in the network tab) which can then call your backend from the server. This API middleware can use its own path routing to expose different enpoints for your frontend if you want. 

Use the nuxt server middleware docs, they're pretty good but effectively your middleware should export a function which takes `req` and `res` as arguments, and will act a lot like an Express route. Then you can mount it in your nuxt config using the path and handler syntax, which you'll find in the docs. 

As your API route is on the server, you can use environment variables to keep your secrets secret (depending on your deployment setup)",1528552912.0
godof23,"The freeCodeCamp playlist would be a good start:

[https://www.youtube.com/watch?v=Fa4cRMaTDUI](https://www.youtube.com/watch?v=Fa4cRMaTDUI)",1528537996.0
nothingduploading,Is the header a child of page?,1528521105.0
moriartie1,"I've wrote an article about this exact topic: https://markus.oberlehner.net/blog/should-i-store-this-data-in-vuex/ :)

In this article you can read about multiple ways of how to make data accessible across your application and when to use which approach.",1528527000.0
irphunky,"Couple of options for you to do this.

1. Set it in the page and pass it down to both via props.

2. Use a simple store (export var, object or array...), import it into both component and use a computed prop  to access it.

3. Use $ref to navigate through components to get at the value, nasty but simpler sometimes.

3. Use vuex, but if your not already using it #2 is simpler.

But #1 is what you should be doing, structure your data right and using it in components will be much simpler.",1528527606.0
beeboobop91,"Use vuex, and store it in the store.

Would that work?

That's what I would do.",1528524542.0
nwsm,"This is a template for creating a Vue app with Firebase authentication. Just add in your Firebase credentials and it's good to go.

[Demo](https://nwsm.github.io/hypobetical/#/)

Uses:

* bootstrap\-vue
* firebase
* vue\-router
* webpack
* vuex (installed/setup but not used)",1528500403.0
avenp,"I personally think the calls to Firebase should be abstracted into its own file and then called through Vuex actions or another layer. Calling to Firebase directly in a component seems messy and would be a nightmare to update if you had to upgrade to a breaking version of Firebase or a different provider ([Socket.io](https://Socket.io), etc). Just my two cents.",1529364615.0
bobsagatiswatching,Don’t think there’s really a limit per se it just comes down to readability and what’s logical. Can you you combine data elements into a single object/array? Can you split the current component into smaller components? Etc,1528502998.0
d_abernathy89,"> Vue CLI is fully configurable without the need for ejecting. This allows your project to stay up-to-date for the long run.

Is this a common term I'm just not familiar with?",1528484223.0
VAST_BLINKER_SHRINK,Uses vuepress. Yummy!,1528498655.0
hugo__df,Use Nuxt,1528475761.0
SecretAnteater,"I would read their documentation: https://vuejs.org/v2/guide/ssr.html

Then check out Nuxt. ",1528506696.0
nothingduploading,just use a normal  link,1528475098.0
SecretAnteater,"If you use the ExtractTextPlugin to extract all your CSS into a single file, you cna just include that one CSS file in each of your SPAs. Just be sure to optimize the CSS to remove duplicate styles and stuff. ",1528486626.0
nothingduploading,use sass,1528471663.0
haleksandre,"Hard to say without seeing any code but from the explanation you are giving, one thing I can think of is that most likely your validation library gets called inside a $(document).ready() which probably means Vue hasn't update the DOM with it's elements before jQuery triggers the document ready event.

If this assumption is correct, one way to easily fix this is make use of Vue's instance lifecycle, most likely the mounted hook, and call the validation library from there.

For more info on the Vue instance lifecycle take a look at https://vuejs.org/v2/guide/instance.html",1528473920.0
evilpingwin,"I don't know what 'as usual' means, without some codes its difficult to say what is going wrong.

It is likely that you are updating the DOM after calling the validate method on your form (or whatever is being validated). jQuery will not know to validate newly added DOM objects unless you explicitly tell it to. Use lifecycle methods call the validate method again after the new content has been loaded.",1528475325.0
SecretAnteater,"So, fields rendered with VueJS aren't getting validated by the _external_ validation scripts? That's expected. You're telling jQuery Validator to validate these 4 fields, then adding a 5th and not telling it to validate the new field.

You're going to run into trouble trying to validate Vue-rendered fields and non-Vue-rendered fields. 

Your best bet is to use the `mounted()` lifecycle hook to tell jQ Validator ""validate this input"". You will also have to tell jQ Validator ""don't validate this input"" when the input gets removed from the DOM by Vue. If VueJS is submitting the data, you will also have to let VueJS know the validation status of each input to prevent it from submitting data when it shouldn't (jQ Validator might know the input is invalid, but VueJS won't). If you are just using regular HTML forms, then you might be fine with jQ Validation.

",1528486228.0
sarcasmful,"You should be able to reparse the form for the dynamic elements if they're getting the 'data' attributes on them as they come in. 

See this link for the js code to do that: 

https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-2.1#client-side-validation

On my phone or I'd go into more detail... Good luck!",1528497547.0
kwartel,"https://baianat.github.io/vee-validate/configuration.html

It seems you can add the i18n instance as a config parameter for vee-validate.",1528452781.0
dechat,"After digging a bit deeper into the source, I found You can simply add a ""custom"" property to the imported locale object before use.

[Quick example](https://codesandbox.io/s/206q22jr2j)",1528454817.0
fakefred0,"I've been wondering about implementing vuetify and Cordova (or something like that) to my just-started codebase but I suppose that's to much effort for some novice-vue-er like me. I guess I will just get stuck in the docs, and end up abandoning  web-to-native tools. How did you guys start to use Cordova?",1528463297.0
HollandJim,"For those who learn by doing, these short, practical examples are great for picking up the parts of Vue. ",1528434825.0
gargle41,We looked at both vuelidate and vee-validate when we started our project. Ended up going with vee-validate as vuelidate looked to add a lot of messiness to the template — mainly with the error messages. ,1528413233.0
FURyannnn,"First, congrats on graduating.

Second, I think you may want to take a look at https://nuxtjs.org/ - it supports SPA and SSR modes. There are community templates, with many using axios for requests. You can actually integrate it with Express so you can achieve what you mentioned (web app where new users can log in, and view content that other users have posted). The nuxt-express template separates the client and server/api into folders so it's easy to follow. You can then host the app itself on a VPS or a service like Heroku :)",1528399958.0
evilpingwin,"There are many ways to approach this but, yes, the simplest way is to keep everything separate and build them as separate services. Your front-end and back-end should definitely be decoupled. Whether or not you go all in with microservices is an architectural decision you will need to make but in general you would just expose some kind of API for the front-end to consume. This gives you far more flexibility.

When I say decoupled here, I mean completely decoupled. In a lot of cases,  you probably wouldn't even run the front and back end on the same server at all. You would set up your production environment to suit the application that lives there. You might have your backend on an EC2 instance and your front end on a server designed for serving static content (like netlify or AWS S3 with Cloudfront). It really doesn't matter, you could easily put them both on the same server as well but you should be able to develop, test and deploy both apps independently.",1528414197.0
dave__stewart,99 views and a tester ain't one 😂,1528378502.0
toqy,"4 hours is pretty short for all that, I’d probably just pass ",1528413106.0
sir_eeps,"If you are using the vue-cli, can pick between mocha\+chai, or jest 

Either of them are good, and the core syntax of

```
describe('some component',()=>{
    it('should do stuff', ()=> {
    let result = someFunc(args);
    expect(result).toBe(42);
    });
});
```

tends to be the same(ish) 

If possible, I try to focus my tests on pure functions / logic / transforms / etc - not too often I'll get caught up in 'test the rendered DOM/template', although I will at times. 

Say, using Vuex for example - you will probably have a mutation for removing an item from the collection,

```js
import { mutations } from './mutations';

describe('todo list management', () => {
    it('should remove an item', () => {
        let initial = [{id:1},{id:2}];
        let actual = mutations.removeItem(initial,2);
        // expect statement
    });
});
```

Likewise, if using getters / etc, and you have a getter to return a list of 'done' items - setup a state that has a mix of items that are done or not, and verify that the 'done' getter only returns the correct items.

I find that tests that focus on the DOM / rendered template - tend to be flaky, a bit harder to rest - especially if you are writing 'stateful' components. They also have a bit of a higher learning curve on how to write well.

But, ""pure functions"" that basically only rely on the arguments passed in, tend to be easier to test, and a lower barrier of entry to get your head around testing anyways.

",1528390699.0
dave__stewart,"So I went WAY over the suggested limit!

  
It took me 8 hours to get everything done, on top of some initial practice with plugins, and had to do the unit tests after. You can see what I did here:

\- [https://github.com/davestewart/vue-trello-clone](https://github.com/davestewart/vue-trello-clone)",1529315762.0
CaptainInsane-o,"Make a file called like ""firebaseConfig.js""

Put your important firebase stuff in it like the following

>import firebase from 'firebase'
>
>var config = {

>    apiKey: 'APIKEYHERE',

>    databaseURL: 'DB ROOT URL HERE ',

>    storageBucket: 'STORAGE BUCKET HERE'

>}
>
>let db = firebase.initializeApp(config);
>
>export default db;

The above code provides the configuration object for firebase and intialized the connection assigning that connection object to a variable.  Now you can export that object for use wherever you need it.

So now you can import that firebase connection object where you need it across your site with the following:

import db from 'firebaseConfig.js'",1528377626.0
irphunky,"It's a guideline, it's not a must - if you don't like it then don't follow it.

I don't follow this and wasn't aware of it until right now :D but my take on this is for a glorified include - something that is used often but isn't dynamic, hence no props and just wants to be repeated in many pages.",1528376283.0
dave__stewart,"Yep.

Which bit of the style guide did you interpret to mean that?",1528370824.0
thinkadrian,"I prefer to order my components in alphabetical order, so I’d never use The.",1528443550.0
Heyokalol,You're bad at marketing.,1528362869.0
MrHorsetoast,"The code looks right, it should update.
Is <animated-number> your component? Can you show us how it looks inside?",1528346268.0
irphunky,"What is returned by `response.data.data`? Do you even have a value as there is nothing wrong with your code.

Example to show you it working, just as you've done it.
https://codesandbox.io/s/r72j01mm2p?module=%2Fsrc%2FApp.vue",1528370501.0
nothingduploading,that looks correct to me. Maybe used \`mounted()\` instead of \`created()\`,1528338030.0
AmishPanda00,"It sounds like your Axios request has something wrong with it. If this is working properly you should see the request in your network tab on the dev console. Can you confirm there is activity there?  Your variable update depends on the request getting the expected response.

Also fyi you may want to make this a GET reauest as you're technically not updating data but fetching data. Just a syntactic thing that might make life easier down the line.  ",1528384054.0
tunnelsup,"I solved this by doing a `v-if`. 

Template:

    <animated-number v-if=""loaded"" :value=""total""></animated-number>

Script:

    export default {
      data() {
        return {  
          total: 10,
          loaded: false
        }
      },
      created: function {
          axios.post('/dashboard/gettotal', {})
          .then(response => {   
              this.total = response.data.data;
              this.loaded = true;
          })
      }
    }

Thanks everyone for your help.
",1528518562.0
,[deleted],1528346043.0
endjynn,"I would move the $router.push() to only occur after the localstorage has been set.  
You can achieve this through the use of promises.  
    
    // Psuedo code just to give you an idea  
    axios.post(""/login"").then((jwtToken) =>  {  
        LocalStorage.set(""token"", jwtToken); // local storage is synchronous  
        appRouter.push(""/welcome"");  
    }).catch(error) {  
        // Display error to user  
    }  

",1528330872.0
errol59,Try to set your request token in localstorage in the beforedestroy lifecycle hook of your component,1528320445.0
juanloco,"Hey have you tried changing your auth.js file so that the methods can be exported as axios promises? So for example, you could wrap the login method in a promise like:

    const loginUser = (credentials) => {
        return new Promise((resolve, reject) => {
            axios.post(url, credentials).then(response => {
                resolve(response);
            })
            .catch(error => {
                reject(error)
            });
        })
     };

Then in your component you could call the login method like a promise and handle any routing in the .then block. 

    import auth from 'auth'   // ASSUMING YOU EXPORTED THE METHOD AS 
    A MODULE

    auth.loginUser(credentials).then(response => {
        if (response !== 'ANY LOGIN ERROR') {
            localStorage.setItem('etc', etc);
            router.push(etc...)
        }
        else {
            alert(response.error);
        }
        
    })
    .catch(error => {
        alert(error);
    });

DISCLAIMER: There's a chance I have no idea what I'm talking about. :)",1528386869.0
adstwlearn,Show us some code... I'll take a look. You'll def want to be utilizing promises to do what you're saying. Super simple.,1528424048.0
jomosss,"There have a very good document on nested route, see the link below  
[https://router.vuejs.org/guide/essentials/nested\-routes.html](https://router.vuejs.org/guide/essentials/nested-routes.html)

So with regards to handling the 'Cards' Component inside the 'Project' component, you will create a 'project' route with those 'cards' and the children.

Then server the 'cards' in the Project.vue component using router\-view

Example:

**Project1.vue**

`<template>`

`<h1> Project 1 <h1>`

`<router-view></router-view> <!-- this is for cards -->`

`</template>`",1528361776.0
Sphism,This looks freaking amazing. Well done to everyone who worked on it. Great to see so much innovation. ,1528323971.0
d_abernathy89,"Tangential, but I don't think I've ever seen the `u` flag before. Example from the article:

`npm i -g -u @vue/cli`

Doesn't appear on the CLI docs page for `install`.

https://docs.npmjs.com/cli/install",1528324864.0
Flipper3,This is really cool!  Plus I always had trouble getting the command line UI selection working on my Windows PC and had to use my Mac specifically to create a new project.  So this looks like a good alternative.,1528328087.0
dagthomas,Is there any place to specify input template and output index.html name/folder ?,1528355430.0
coryza07,This is neat but wouldn't most people just do all of this on the command line?,1528376847.0
pier25,"Personally, I have moved out of Vue CLI after this new version.

I'd rather pay the price of losing convenience than paying the price of having it.

Edit:

Convenience = less effort but less control too.

Completely losing control over the project configuration and architecture is a price I won't pay. I'd rather deal with Webpack, Parcel, etc.",1528315629.0
_JeanValjean,The component links lead to 404.,1528304934.0
lusaxweb,"Vuesax Github: https://github.com/lusaxweb/vuesax
Example Sidebar: https://lusaxweb.github.io/vuesax/components/sideBar.html",1528301429.0
maks25,"I also use Django \+ Vue, I don't think it makes much sense using a Django view to mount the js file and then somehow re\-rendering it.

Instead  I used DRF to build an API, then for the front end I use Nuxt, which is by far the easiest way to setup a SSR Vue app. With Nuxt you can then even decide on what you want rendered server side and what you don't.

[spacie.ca](https://www.spacie.ca) (built with Django \+ Nuxt/Vue)",1528346665.0
gingernaut3636,"I've been using [vuex-pathify](https://github.com/davestewart/vuex-pathify) in a new project and overall it's been great to work with so far, for those of you who want to continue using Vuex but eliminate a lot of the boilerplate setup around actions/mutations and having to manually create getters.",1528309117.0
codechinchilla,"Thanks for sharing this - I've been trying to get the hang of VueX the past month but it just seems like so much code to do simple store operations.

Managed to get mobx-vue running pretty quickly and seems to work better with typescript as well!",1528343506.0
Glensarge,"are you sure this isn't prerendering?

for ssr why wouldn't you just pick nuxt, it's still just as light weight but you get code splitting, better routing, hot module replacement, http2, great modular architecture, middleware etc",1528302320.0
nothingduploading,"## Step 8: Install vue-toasted library.

Install it via NPM.

npm install vue\-toasted \-\-save 

Now, register the package inside **the main.js** file.

// main.js  import Toasted from 'vue\-toasted' Vue.use(Toasted, {   duration: 1000 }) 

Here, I have passes option as a time duration. You can pass the actual object that contains different properties.

You can also add the link inside toast so that you can cancel that toast. You can use it like this.

// main.js  Vue.use(Toasted, {   duration: 9000,   action : {     text : 'Cancel',     onClick : (e, toastObject) =\> {         toastObject.goAway(0);     }   } }) 

You can find more API on [here](https://github.com/shakee93/vue-toasted#api)

Now, you can use the toast inside the **ItemForm.vue** component.

// ItemForm.vue  methods: {    addItem() {        let uri = 'http://notify.test/api/item/create';        this.axios.post(uri, this.item).then((response) =\> {           this.$toasted.show(response.data.success);       });    } } 

So, finally, **Vue Notification Tutorial Example From Scratch** is over. Thanks for taking.",1528244210.0
usx-tv,"I don't really see a need for this to be an entire plugin on Vue.

Wouldn't this work by simply importing v*ex* on the component directly ? (And configuring the *className* of course).

It just seems a bit overkill for me to register this globally as a plugin. I'd suggest being careful of those things. If your project scales, it can easily get very messy having things globally declared (mixins / plugins). If I were to look at your component, I would start wondering what the hell \`$vex\` is and would have to go hunting to find out what it is.

In a large scale application, that can be an issue.

Also one of the main advantages of Vue is being disregarded when using plugins or mixins like this; re\-usability. By having this as a plugin, you can no longer use this component in another Vue project, without including that plugin as well.

If this was imported on the component, you could copy paste it out anywhere (having the npm dependency too of course).

It really all depends on use cases, there are valid moments where using plugins / mixins are a good thing, but in this case it seems really overkill to me.

Try something like this on your *exampleComponent.vue*:

    <script>
    import vex from 'vex';
    import vexDialog from 'vex-dialog';
    
    export default {
      mounted(){
        vex.registerPlugin(vexDialog);
        vex.defaultOptions = {...vex.defaultOptions, className : 'vex-theme-os'};
    
        vex.dialog.alert('Thanks for checking out vex!'); // it works!
      }
    }
    </script>

EDIT: Formatting",1528275826.0
sleepymansalitre,"Once you defined your data in data() you can use the variable with 'this' e.g. this.foo, this.var. Same with functions, once you define a function inside methods: {}, you can call it with 'this' this.myFunction(), to use the data in the template use {{ foo }}. ",1528213508.0
Djbm,"The way Vue handles CSS is generally not too different o standard HTML. If you’re doing web development, one of the fundamental things you should learn is the [specificity](https://developer.mozilla.org/en-US/docs/CSS/Specificity) of styles.

Without understanding this, you’ll be constantly banging your head against the wall.

So you have several methods of targeting styles:
 - adding an `id` and targeting the styles to the is
 - adding a class and targeting the class
 - writing inline styles for a specific element
 - targeting an element via a child or descendent relationship

Vue also offers a ‘scoped’ attribute for styles too, but I’ve never found the need to use that personally.",1528207370.0
ewliang,"Yes, you can initialize using v-model. 
1. Create the data section in your script.
2. Add the variables you want into the data section.
3. Create a new section called async asyncData and use axios to fetch your API data (or whatever means you've done to retrieve the data)
4. Create a new section called computed: {}
5. Inside created, just assign your variables in the data section the values you retrieved from the API.
6. Add v-model to your UI template stuff.
7. Enjoy! :)

That's how I did it for my application.

    <template>
    ...
    <input type = ""text"" v-model = ""Product.name""/> <!--initializes with existing Product name-->
    ...
    </template>

    async asyncData({params}) {
        try {
          let product = await axios.get(`http://localhost:4000/products/${params.productID}`)
          console.log(product.data)
          return {
            product: product.data
          }
        } catch (err) {
          console.error(err)
        }
      },
      data() {
        return {
          Product: {
            name: ''
          }
        }
      },
      created () {
        //Load existing values from DB into inputs.
  	    setTimeout(() => {
    	    this.Product.name = this.product.name
        }, 200)
      }

This is just a small excerpt of one of my recent projects. :)",1528231869.0
tiagojpdias,"In your case, I wouldn't use computed properties since its a simple operation.

Using an array of multipliers and looping through it is a cleaner solution.

---
    <div id=""App"">
      <label>
        Amount:
        <input type=""number"" name=""Amount"" v-model.number=""amount""/>
      </label>
    
      <p v-for=""(multi, index) in multipliers"">Item {{ index + 1 }}: {{ amount * multi }}</p>
    </div>
---
    var calculator = new Vue({
    	el: '#App',
      data: { 
      	amount: 1,
        multipliers: [10,20,30],
      },
    });

---
[jsfiddle](https://jsfiddle.net/cfw809pj/8/)",1528188821.0
DanijelH,"You should reuse your form for edit and create.

A better practice would be to have for Create.Vue, Edit.Vue and CreateEditForm.vue which both Create and Edit components use.

Otherwise, it's a nice article :\)",1528197565.0
propelol,"Looks good on the surface, but it is a accessibility nightmare behind the scenes. 

I also recommend reading/watching this: [https://www.vuemastery.com/conferences/vueconf\-2018/7\-secret\-patterns\-vue\-consultants\-dont\-want\-you\-to\-know\-chris\-fritz/](https://www.vuemastery.com/conferences/vueconf-2018/7-secret-patterns-vue-consultants-dont-want-you-to-know-chris-fritz/)",1528199369.0
lusaxweb,vuesax github : https://github.com/lusaxweb/vuesax,1528158982.0
imadp,"Great job on the video, its nice to see all the components in action.",1528191547.0
kn0ckle,"Looks neat, hope there is an option to disable these effects.",1528181489.0
pier25,"Seems like a lot of Mexican devs in the project.

Viva México!

Edit: which explains why the English is so weird. For example ""documents"" instead of ""documentation"" or ""reference"".",1528223694.0
sadEmoji,Definitely using this for my next personal project. Looks cool.,1528171312.0
killerbake,Nice!!! ,1528207801.0
dalore,"> install en Proyecto NPM

Huh?",1528216794.0
killerbake,"[https://lusaxweb.github.io/vuesax/components/switch.html#array\-value](https://lusaxweb.github.io/vuesax/components/switch.html#array-value)  
This part of the documentation is not in English.  
[https://lusaxweb.github.io/vuesax/components/selects.html#autocomplete](https://lusaxweb.github.io/vuesax/components/selects.html#autocomplete)  
This is a repeated example of single select.  
",1528218644.0
ataraxy,"I really dig a lot of these components.

One thing I would love to see would be some helpers for things like vertical centering elements and content within elements.",1528324055.0
bmarkovic,"1. In my humble opinion the state management is what makes React and Vue truly worthwhile, so while it might fall into best practices, I'd learn Vuex as quickly as possible. It's sold as some really complex, novel concept but it isn't. It's just a god-object encapsulating a JS database with well defined read/write rules that allow you to form your own little internal API.

2. I don't see how testing components would be an overkill. In an non-e2e view test (i.e. unit view test) you do need to test that the view behaves as you expect it to behave given the data. This mildly contradicts my advice from above as adding Vuex in the mixture does make components less functional (props and events really behave as function input/output) and more state-bound.

3. I'm likely going against the grain here but I always advise people to strongly consider if they'll really get that many benefits using a component library. Many of them slice to way too small pieces which ends up both making you endlessly coupled to their implementation and can additionally potentially jeopardize performance down the road. If you're actually competent with something like Bootstrap roll your own. I'd even wager that implementing some of that jQuery stuff in Vue isn't a big deal at all.

4. Vue now has it's own [testing framework](https://github.com/vuejs/vue-test-utils), and it's generally all about view and unit testing. Mocking and data-related tests are generally outside of the scope, but in case you really want to do things like that people typically use Sinon for quasi-DI mocking of API access etc.

5. You'll commonly see a services file if the project is written by people coming from Angular. In general that really depends on how **you** want to structure your business logic. In a very AJAX-intensive CRUD app I'd typically extrude Model from Vuex so that my actions are cleaner and my state is devoid of all the Model/AJAX overhead required to communicate with the API. OTOH in apps that aren't CRUD-style I've been running requests in actions, typically wrapping requests in more abstract get/put/post helper functions that build headers and URLs, and return Promises to be parsed by specific data logic.

HTH",1528203110.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [How to make an animated ""Wizard"" component with VueJS • r\/vuejs](https://www.reddit.com/r/javascript/comments/8ojeks/how_to_make_an_animated_wizard_component_with/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1528135472.0
LynusBorg,"Probably because people want to use ES6 modules, not commonjs, which comes with the ugly side effect of 1) not being drastically analyzable and 2) having to read the `.default` prop for every import. 

I a usually declare imports inline like that, but with `import()` instead of `require()` to get code split routes.",1528131231.0
evilmaus,Oddly fun. Thanks for sharing.,1528130310.0
KingPrice_,Do you think the 45lbs bar could handle the 23000lbs I just added haha? Nice app. Good work :),1528135967.0
clasic_krap,Thanks for sharing!,1528208471.0
jomosss,"Here are 3 resources I found helpful

1. Their own documentation page [https://vuejs.org/v2/guide/index.html](https://vuejs.org/v2/guide/index.html)
2. Learn Vue 2: Step By Step [https://laracasts.com/series/learn\-vue\-2\-step\-by\-step](https://laracasts.com/series/learn-vue-2-step-by-step)
3. Getting started with Vue.js [https://scotch.io/courses/getting\-started\-with\-vue](https://scotch.io/courses/getting-started-with-vue)",1528115532.0
adstwlearn,"Nice \- I actually just published a component to let you do this nice and easy \- [https://github.com/johndatserakis/vue\-countable](https://github.com/johndatserakis/vue-countable). includes word, character, sentence, and paragraph counts.",1528343918.0
OmegaVesko,"No, Vuex isn't ""secure"", in the sense that you can't assume anything in it hasn't been tampered with \- however, you're misunderstanding the purpose of storing something like an `isLoggedIn` boolean in the store. The point of such a boolean is **only** to help decide whether the user should be able to access protected routes, or otherwise see things in the UI that only authenticated users should see. If it's changed outside of logging in, the only effect will be your frontend looking broken because it's trying to load and display things it doesn't actually have access to.

Your *actual* security mechanism in this situation is a token that you store in localStorage, a cookie or other mechanism, and send along with every request you make, so that the backend can actually verify whether you're authorized to access that resource or not.",1528072061.0
,[deleted],1528148771.0
DukeBerith,"I take this approach too because anyone who's done a large project knows how much easier it is to scan a page like 

	<!-- Some contact list application -->
	<app>
		<card>
			<contact-list>
				<person v-for=""person in people"" v-model=""selected_people""></person>
			</contact-list>
		</card>
	</app>


Rather than

	<!-- Same one without any abstraction -->
	<div id=""app"">
		<div class=""card"">
			<h4 class="""">Contact List</h4>
			<ul class=""contact-list"">
				<li v-for=""person in people"" class=""list-item"">
					<div class=""checkbox-container"">
						<label>
							<input type=""checkbox"" v-if=""person.is_selected"">
						</label>
					</div>
					<div class=""image-container"">
						<img class=""thumbnail"" src=""person.thumbnail"">
					</div>
					<div class=""contact-details"">
						<span class=""contact-name"">{{ person.name }}</span>
						<span class=""contact-phone"">{{ person.phone }}</span>
						<span class=""contact-email"">{{ person.email }}</span>
					</div>
				</li>
			</ul>
		</div>
	</div> 


This is a very basic example so it's not the worst in the world, but on larger codebases if you don't use components it can get very mentally taxing since everything is out on display all at once. ",1528074919.0
OmegaVesko,"Sure, your components should still be as small as they can reasonably be \(which is to say, not to the point where it just becomes counterproductive\).

Probably the single biggest difference in component design between React and Vue is that Vue has the concept of [slots](https://vuejs.org/v2/guide/components-slots.html), which allow you to write components that contain other content in a different, perhaps more immediately intuitive way.",1528071318.0
DukeBerith,"http://bradfrost.com/blog/post/atomic-web-design/

This can help make sense of how small or large to go when components",1528075020.0
dave__stewart,"Looks very simple!

How does this compare to using Nuxt or Ream?",1528130003.0
Heyokalol,"Event buses are now considered a bad practice in Vue, as stated by at least one of the Vue core team members. I don't event think they're still mentioned in the docs anymore.

Use VueX instead.",1528050489.0
StrangeSound,"Cool article!

I recommend putting `width: 100%;` on the textarea in the CodePen example though, when I first tried it out I assumed it was broken and that the component was meddling with it's width.

[Example](https://i.imgur.com/rn6bWhO.png)",1528108083.0
sdraje,"I've done some of the courses you've listed (the Vue course from Max is great), but I think you're overloading yourself with new concepts. Take things slowly: try using pre-configured hosting (Heroku, Zeit Now, etc.) to start and learn the concepts. Same for a CMS, go for a CaaS like Contentful or Storyblok. Then, when you have come to grasp all basic concepts, start looking at expanding your knowledge, otherwise you'll find yourself with a lot of small bits of knowledge, instead of a small amount of good knowledge.

For reference, I've been a web developer for less than two years and I've learned through a mix of online and on-site courses.",1528027270.0
0xRumple,"You haven't missed anything !

Now that you learnt frameworks, it's time to start working on real projects, no more demos.

When you work on your real project, try to improve the core programming skills starting from mastering js itself, I would reccomend this course:

https://www.pluralsight.com/courses/javascript-fundamentals-es6

Remember: never watch the course alone without working on a real project cuz that's mere waste of time.

If you finished powering up your basics, time to take them to the next level, you can start learning design patterns:

https://www.pluralsight.com/courses/javascript-practical-design-patterns

And again, I wanna shout loud and say: WORK ON REAL PROEJCTS.

If you're done with these (not just these but relevant topics as well) and you wanna go to the next level, hit me a PM.",1528108812.0
fakefred0,** Requires 8 years of Vue.js development experience **,1528022884.0
DukeBerith,"I'm in the middle of interviewing at a couple of places in Sydney, Australia. One of them was for a vue specific developer. Happy to see it get the exposure it deserves to reach this point. 

Personally I'm quite comfortable with both Vue and React so I have a plethora of options but if I'm being honest I'd rather take a Vue job as the framework and official libraries feel like they have developers in mind. ",1528026758.0
ShetlandJames,I'm working in a Vue/PHP job. Just have a great CTO who is forward looking. They adopted Vue last year I think.,1528037387.0
dave__stewart,"I've started interviewing after being in a long contract and I can confirm there are actually Vue jobs out there, which had not always been the case. This makes me very happy!",1528030103.0
Kindrik76,"Avoid London then. React rules in London, its like a cult following almost. React is London's religion.",1528032348.0
zmasta94,"Vue is amazing to work with. It's so simple and well thought out. A perfect blend of Angular, React and the old vanilla JS way of doing things. 

I'm still only intermediate with Vue - but I can't see how it would handle a large enterprise scale application (like I know Angular can). That being said, I don't know how React handles large scale applications so I might be biased or oblivious to the obvious.",1528024408.0
maks25,"That's good to hear. For my latest startup I decided on Vue \(well Vue\+Nuxt\), hopefully if it works out I'll be able to add some jobs to that metric :\)",1528036025.0
awsfanboy,Glad to hear this. Combining vuejs and aws for the win. I am enjoying the experience. Evan You(vuejs) and John Leider(Vuetify) among other vuejs builders deserve their patreons.,1528042723.0
pkej,Entity attribute value model.  ,1528009072.0
Lelectrolux,"The trick is to store schema definitions and data appart from one another.


In mongodb (a document oriented database) you can add fields to a reccord without it being a problem like in sql. Deals with the storing of data with custom fields, but not the storage of this structure definition.


For that, basically you create another ""table"" called `field_definitions` (or something like it) which holds that structure.


---
As an aside, while it is really cool to use, it has a lot of drawbacks and is often terrible on the perf side of things, as well as global search capacity, etc. And on this case depends on Mongo (for the good reasons, but I never want to work with Mongo).


Like most thing in our craft, it's a trade off, do you really need its additionnal complexity ? Or is it just the cool factor.",1528007947.0
bobbaan,"So that was easier than i thought.  
Just installed the following package and everything worked...  


[https://www.npmjs.com/package/vuex\-persistedstate](https://www.npmjs.com/package/vuex-persistedstate)",1527985390.0
ewliang,"Since it looks like you've found a solution, I'll just comment down my thoughts.
Disclaimer, I'm pretty new to Vue/Nuxt, but would love to know if I'm correct or on the right track. :)

You said you ""refresh the page"" so I'm guessing that's equivalent to a F5, and not a simple router-link page change. If that's the case, then Vuex to my understanding so far should be cleared (since it is vue we're talking about for SPAs). I guess in a sense, you can solve this by storing the info in a cookie or localStorage (I personally would go with a cookie with https secure enabled). That way, if the page was F5 refreshed, you can probably have Vuex grab data from the cookie or localstorage and bam! You're tracking your existing state again until cookie expires or localstorage is cleared.",1528002014.0
Noodlestar,You should probably put this in a codepen/jsfiddle and post the link instead....,1527962862.0
fryktelig,"There are some errors in your code. Here's a solution without lodash:

https://jsfiddle.net/wcgxom0o/

Let me know if something I did is unclear and I'll try to explain",1527964489.0
DocileDino,"This doesn't fix your issue, but it's really useful. Whenever you have an array of objects with a unique id [{id: 1007, name: 'joe'}, ...]
Rather than iterating through each element and checking each id, you could use an associative array like this {1007: {name: 'Joe'}, ...}

I hope that helps a little.",1527966019.0
Droid2Win,"Um... So if you go to the VueJS documentation, the standard way to include mixins is to either assign them globally with Vue.mixin() or to assign them locally to the individual Vue component they are needed in. Without seeing your code I can't fully comment on your solution but it sounds like you are heavily over engineering a solution to this.",1528029071.0
Sir_Poot,"Beautiful!

I was interested when hearing the podcasts of its capabilities. Thank you for sharing this. I learned something.",1527952060.0
my_name_is_memorable,Agree with the other poster that this is both beautiful and creative. Although a small part of my intuition tells me I shouldn't use this approach in a real project. Probably best to keep data processing outside the templating. I'm open\-minded though.,1528021176.0
deverhart,"Thanks for this, great tutorial!",1527952625.0
MichaelSorensen,Use [Fiddler](https://www.telerik.com/fiddler)  to inspect the request! ✌️,1527892482.0
pendekar_langit0x00,Change header content type with 'multipart/form-data' and put your form data must FormData object you can see on https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects,1527892500.0
nickmandev,I meant this option https://www.getpostman.com/docs/v6/postman/sending_api_requests/generate_code_snippets,1527948431.0
achalaesh,"Check preflight request. Postman doesn't send preflight requests, browser does.

To send preflight from postman:
Send an options request to the server from postman and see the response.",1527920702.0
slinkywafflepants,"CORS errors usually show in console, but you can at least eliminate the the posibility with a CORS chrome plugin. Just search chrome store for “cors”.",1527930735.0
nickmandev,"With postman you have an option to copy the code used to make the call, copy it and try it in your application if it works this way compare with you call and see what you missed",1527933574.0
thepercept,"Guys ! Thanks for your inputs. I solved this issue . The URL in performing the POST request was >http://localhost:8000/api/v1/subscribe
 which after replacing to >http://my website.com/api/v1/subscribe  worked successfully. I was performing with the actual URL , i.e, http://my website.com/api/v1/subscribe in Postman and that's why it was succeeding. Where as in vue I was using the local host which  kept giving error . ☺️ ",1527998847.0
tucsonflyer,"Can you store the refresh promise in vuex, and then, on 401, axios will check if there is a refresh promise stored. If so, return that promise. if not, dispatch the request and store the promise for future 401s.",1527898405.0
corsair330,"This is a thing I tried a couple of months ago, couldn’t get the refresh flow to work reliably. Thanks for this post :)",1527952504.0
awsfanboy,"This is the thing for me too. I know it can be done with vuejs and apigateway, lambda and dynamodb but its harder than firebase to setup. I guess coz aws has more features.

I am also waiting for the aws amplify implementation for vusjs which will make this easier. Angular, ionic and react already out

That being said, there is a sample vuejs app with amplify as it can work with javascript",1527916387.0
danielhep,I'm using AWS Amplify with Vue and it's working very well. I'd highly recommend that.,1527926265.0
JIMETHYRUMPLEKINS,ATM machine.,1527888679.0
binarytide,"firebase or parse\(self hosted\) are good choices for getting started. aws has free tiers, but can get up in price quick",1527890515.0
urmyheartBeatStopR,"Is vuepress like Jekyll?  (https://jekyllrb.com/)

I'm currently using this for my github blog.",1527914344.0
ydennisy,Is it possible to access access the beta of Vue project manager?,1527945232.0
juzten,I haven't used the Luminate api but if it's like every other rest api I don't see how there would be any issue with using it with Vue. I'm assuming you haven't worked with Vue and api's together. If you're looking for someone to work on this for you pm me. ,1527869098.0
adventurecrab,"From reading the soundcloud api docs you linked to you should use the 'bind(eventName, listener)' method to setup event listeners on the widget. You can then use callbacks on the events to fire methods in your component.

Here's a working example - [https://jsfiddle.net/zLg96t4t/](https://jsfiddle.net/zLg96t4t/)

Also here's a github repo (not mine) that you should find helpful - [https://github.com/R3l4x3/soundcloud-webplayer] (https://github.com/R3l4x3/soundcloud-webplayer)",1527971977.0
Zaekof,Insane dude! great job,1527869331.0
jlugao,"Hey, the event card needs some work on mobile (things got crowded onto each other). Using MI a1
But great job. Calendar looks nice",1527906151.0
jiffier,"Awesome, great work. Is it opensource? ",1527864547.0
Gazzooks,"Just as a side note, You have the ability to create an event on a day gone. I know it is an example, but maybe some logic to prevent the modal dialog from appearing.",1527879436.0
NotFromReddit,This looks amazing. Well done. Definitely bookmarking this.,1527881645.0
Dialaninja,"Very cool. Just an fyi, got some mushing together of components on mobile., and some bits when adding an event are illegible (also on mobile, android galaxy s9)",1527906280.0
tribak,You mean like the first example? https://vuejs.org/v2/guide/render-function.html,1527857427.0
MrNate,"There's no native or simple way to include Vue files from the browser, but you can use something like [http-vue-loader](https://github.com/FranckFreiburger/http-vue-loader). I haven't used it.",1527899582.0
gevera,vui UI - next big thing! ,1527825123.0
Grizzer_,Will watch later tonight but can someone give a tldw,1527839466.0
sadEmoji,>tfw ywn be even half as good as these guys :(,1527835012.0
Towerful,"My understanding is that it helps an IDE.  
So if you need to rename something or find all references, you can leverage the power of your IDE to do this.  
Same with autocompletion.

Also, if you are working with other developers, then it gives a nice central place to catalogue and document mutations or actions.

Normally magic numbers and strings are frowned upon, as they don't describe what they do.  
For example, adding a day's worth of seconds:  

    offset += 86400;


Or. 


     const dayInSeconds = 24 * 60 * 60;
     offset += dayInSeconds;

Seeing an import of mutation constants at the top of a file and correctly named constants generally makes things easier to understand",1527803519.0
SecretAnteater,"It is just a helpful JS feature. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const

If a value is defined with `const`, you, or more importantly, other developers, can't change it...sorta. ~~It prevents you from adding new properties to an object, for instance.~~

I've never used that Mutation Type pattern before, but as the guidelines says, it can be helpful for others to quickly get an idea of the types of mutations they have available without having to skim through your entire VueX store. I think it is supposed to be like a table of contents. I don't know why they make a point of mentioning constants, though...you would never alter a mutation name through code.",1527808383.0
mlmcmillion,"The use of constants in that manner is to have a sort of globally importable identifier. This help alleviates bugs cause by misspellings (since you'd be using the constant rather than a string) and helps when changing or updating them across a project (find/replace, etc).",1527813549.0
adstwlearn,"Needed a banner solution for the new gdpr stuff \- came across a few libraries, but they all didn't have support for an \`opt out\` button. Because of that, this was made. Check out the demo here: [https://promosis.github.io/vue\-cookie\-accept\-decline/](https://promosis.github.io/vue-cookie-accept-decline/)",1527795499.0
carrot_gg,You need to include the font loader within the vue loaders section in webpack.js,1527785667.0
CarmineM74,"Great work!

Very nice looking and  useful. Thanks",1529046458.0
yamakadi,"You can check out the demo here:

https://expense-tracker-demo-1.firebaseapp.com/",1527780945.0
dynamicdank,"Nice looking app. Just noticed a little bug: When switching my currency to EUR in my profile settings, it doesn't change the currency in the Expense-section, just defaults to yen.

Was setting up the Google sign-in hard? Would love to try it myself on some Vue project.",1527959641.0
dave__stewart,"Good article.

I still use the \(sometimes\-maligned\) event bus for storing UI state.

I don't want devtools filled up with resize events or notifications or panels opening or closing. This kind of stuff doesn't need to be persisted either, so it goes in a \`new Vue\(\)\` settings file \(effectively the same as a module\) and is imported and used where needed.",1527797068.0
JinSantosAndria,Try to make a simple websocket server in Golang for the message handling or use something like centrifugo which comes with a ready lib,1527748178.0
Jazoom,"I came across a real-time JavaScript framework that people were comparing to meteor. Sorry, I can't remember the name but it might be worth hunting down if it would do some heavy lifting for you. It was mentioned in the same conversations as Adonis.",1527765474.0
WeeLane,Did it give you a list of commands when you typed “vue” ?,1527731305.0
CaramelLatteIsLife,"try 'vue-init'  with -  
works for me without having to install the older version",1527783953.0
syropian,"Here's a fork: https://jsfiddle.net/wf7ju3b9/

The key difference is instead of storing a boolean to hold the expanded state, I'm storing an index, the references which item is open. It then checks if the `activeIndex` is equal to a given item's index and expands it.",1527700956.0
tomagladiator,"Hi, do you have a direct link to the PDF? Because I don't agree with the policy. Thanks.",1527734650.0
FURyannnn,I remember looking at this recently and was really impressed...has there been any work on integrating with Shopify?,1527713823.0
edanceee,run your frontend on a service like netlify or now. ,1527678408.0
WeeLane,"Could you use a service like digital ocean, where you could run both the Wordpress on one droplet then your node on another",1527699572.0
harrygato,"you can also do nuxt generate and make a static version of your app. That way theres nothing but just css, html and js, host that on any static hosting site.",1527934470.0
moriartie1,Can you put your code on https://jsfiddle.net/? It would be way easier to help you that way.,1527755502.0
uhryks,Did you not forget to add the component to the component property of the instance ? Coming from react world I often forget to do so and get this kind of error.,1527655895.0
roryjarrard,"The code is fine,  that doesn't help.  We need to see app.js",1527655667.0
roryjarrard,"In app.js require, try 
...schedule.vue').default);

You are exporting default in your component. ",1527656146.0
roryjarrard,I export default and require default myself. ,1527656295.0
theLorem,"Hi, looks good, very clean and simple.  
Sadly, the week view brakes on mobile [Link](https://i.imgur.com/VcSpEgm.jpg)",1527662801.0
crespo_modesto,"Dang [very nice](http://www.reactiongifs.com/r/vqGeMsr.gif) colors/minimalist design

edit: curious what you sourced the numbers from. When I built a calendar I started with today(day in terms of 0-6 Sun-Sat also actual date eg. 29) and then knowing how many days in a month per what year, reversed it/filled a grid of 7x5. Checked next month if I had some remaining blocks left. It was an interesting challenge to me at the time.",1527641981.0
minidude22,I love this! You did an amazing job. Thanks for sharing.,1527661339.0
DonPhelippe,"Well designed, but the demo is kinda problematic: When i try to create an event it doesn't let me to put times from/to in just hh:mm format PLUS it doesn't let me fill out the seconds field. Dunno if it's due to local timezone or something else. Nonetheless it looks mightly nice and I believe it just needs some tinkering.

Edit: so, it seems that the ""seconds"" are not seconds, but ""AM""/""PM"". First of all this is a nasty approach, a 24h time field is infinitely less ambiguous - plus there is not indication to type ""AM"" or ""PM"". Secondly, does your control support i18n? Because if the strings are hardcoded then it needs ""lots"" of tampering :) 

Personal suggestion: either make it a dropdown for ""AM""/""PM"" with support for localized equivalent or allow 24h clock. 

Also: when one presses on a day to create an event, we end up having to dismiss the create event dialog manually, instead of it being dismissed by create. Additionally I have the nasty feeling them dialogs are not dismissed when switching between month/week/day view, can you confirm that?

",1527675715.0
jbarsoomian,"Hi, looks awesome, great work! A couple of questions re: functionality (without having read the code, sorry!)

How is drag and drop handled? Specifically for the use cases of dragging out a new time range for an event (if the click starts on empty time), or for moving an existing event, snapping to columns etc...

Would adding recurring events be a custom dialog (frequency, how many) and a function to populate on the dialog save event? 

Would it be possible to easily add a 'next 4 weeks' view which has the same layout as the month view, but displays across month boundaries? 

Thanks again, I immediately have at least 2 uses for this :) ",1527684424.0
NukeMeNow,Did you create the UI yourself or is that a library?,1527647179.0
godof23,"Great job on the look and feel! I was just wondering whether you took this from one of the exercises from ""The Ultimate Vue JS 2 Developers Course"" By Anthony Gore at udemy and then added your own flavor to it?

Also, how did you make the docs? some auto generator? ",1527695122.0
GavinXueYL,absolutely love it!! would be great if it supports recurring events,1531206770.0
SecretAnteater,"First, this certainly doesn't have anything to do with Laravel, and isn't a bug with VueJS.

Following [their docs](http://element.eleme.io/#/en-US/component/date-picker), they are using a string in the format `YYYY-MM-DD`. There might be a bug with that component, because when you look at their example using `default-value`, the calendar opens up with the correct year and month, but no date is highlighted. 

Is that what you see happening with yours?

To debug, try adding `<pre>ends_at: {{ ends_at }}</pre>` to your template, as well as a line for your default date).

Also, Don't mix `{{ }}` syntax with bound props.",1527635740.0
borktron,"I've only just started looking at Vue, but it appears that you're invoking `updateVal()` instead of referencing `updateVal`.  Try removing the parens.",1527612178.0
calebroseland,This looks great!,1527622543.0
,"What does the server-side handle wrt this architecture?  Are you putting business logic in a client?
",1527622840.0
anandharne,"Jest is amazing! It is out of the box , takes way less time to run the tests than mocha. A small side note: If you're using a vue js app, you are going to want to take a look at [Vue Test Utils](https://vue-test-utils.vuejs.org/). Makes life so much easier. Also sinon.js for spies and fakes. PM me if you need tips and tricks to start with automated testing. ",1527604556.0
morficus,Jest \+ \( [avoriaz](https://eddyerburgh.gitbooks.io/avoriaz/content) or [Vue Test Utils](https://vue-test-utils.vuejs.org/) \),1527606828.0
i_ate_god,"oh my god Jest is just superior.

I am never going to go back to some convoluted mess of karma/mocha/chai/jasmine/istanbul nonsense again, or at least not to the extent where I'm directly exposed to that mess.

Jest requires a few lines of config in your package.json and *poof* that's that. Everything is tested, everything is reported.",1527783572.0
of_adam,Absolutely Jest. ,1527595929.0
nikaone,"Jest is a complete solution, for example it includes assert,   but I prefer mocha, it is faster with chai. ",1527601902.0
spamguy21,"A word of warning: regardless of your choice, neither seem to work with projects using Webpack 4. I say this from a combination of personal experience and outstanding GitHub tickets I can dig up later.",1527969493.0
rjksn,Thanks for asking the question! Guessing you went with Jest too? :),1539359796.0
pull_my_finger_AGAIN,"I like Mocha, and haven't even tried Jest and won't solely on that base of screw fb. I use Vue and NPM vs react or yarn for the same petty reason. (Vue is pretty great though tbh, I'd probably use it anyway)",1527599214.0
azzamaurice,"Have you considered trying VuePress?
https://vuepress.vuejs.org/
I think it’ll cover what you mentioned and supports routes and markdown!",1527558557.0
batahkoinonia,"I've never used that library/product before, but I think there may be a few options available to you via Webpack. 

First, you can try out the [html\-loader](https://github.com/webpack-contrib/html-loader) to import the static HTML pages as a string and then set that to be the template string for a Vue component. This would allow you to either have a component per static HTML page or perhaps make a factory function that spits out a component object dynamically to be used as a route link.

Another option is to use the [vue\-template\-loader](https://github.com/ktsn/vue-template-loader) to import the static HTML pages. This would transform these files into Vue render functions for more or less the same effect.

There may be a few hurtles to overcome with either of these methods. Some things that come to mind is how the relative paths work out for embedded/included content \(e.g. stylesheets and images\). Another issue you may have to work through is if the static HTML pages are supposed to navigate to one another. Again, this may be easily solved via the relative paths and ensuring your folder structure lines up.",1527558370.0
edgen22,I hope separating the HTML/CSS/JS like that isn't considered best practice. Who determined this is best practice code? ,1527543913.0
tektas_blah_blah,"There are some good things in here, but the separation of the component files is just weird.",1527598903.0
usx-tv,"A few things I consider best practices that aren't applied here:

\- Single file compoents. Besides perhaps the css / sass that can be in a separate file \(this is situational\), there is no reason to not use it.

\- Lack of Class component and Property decorators. This isn't common in github codebases, but a real life changer. They will also be included in 3.0.

\- Store not separated into various files. Once you have a larger application, having an independent file for your states, mutations and actions really helps.

\- gif\-dialogue component has no logic and only uses props, this should be a functional component.

\- Components are calling mutations, not actions. This is wrong as per the vuex documentation. Actions call mutations.

\- Unit tests for each component should be in the folder of each component for scalability, imo.

To anyone visiting this post, do not consider this codebase ""best practices"". Even if best practices are opinionated, there are some undisputed flaws here.

Edit: Words.",1527667476.0
morficus,"Can you share some code snippets? 
Showing the content (at least the CSS block) for each component in question would help a lot.",1527465954.0
Lochlan,"Does setting the index route to ""/"" make any difference?",1527475533.0
batahkoinonia,"I think we would need to see the source code for each component to be sure, but this sounds like an issue of using the same CSS class names for each component. Scoped CSS ensures that your styles within a component shouldn't get applied outside of that component but global styles will still cascade down into your component.

Your best bet would be to A\) always use a class name and not rely on styling a `div` locally and B\) using a unique class name each time.",1527558618.0
ckdownset13,"Keep in mind that scoping applies the CSS to the current component and any sub-components.

Without seeing your app structure, I'd hazard to guess that your 'home' component, although a different route, is loaded within your 'index' component.  ",1527624507.0
zmasta94,Starred! Have been trying to do one of these myself for a while. Will try to make some pull requests later if I find the time! Thanks for sharing. ,1527429613.0
StockHovercraft,Is this similar to https://www.ledger-cli.org/ ? It looks a lot like it!,1527456751.0
sneilaro,Hi. Look Numi up too. ,1527430564.0
movdev,"Doug Engelbart would be proud

https://youtu.be/yJDv-zdhzMY?t=2098",1527432010.0
nickmandev,"Did you include Babel, as mentioned in the documentation https://bootstrap-vue.js.org/docs ?",1527373249.0
omgsizzler,Good in Chrome/FF?  Any errors in the dev tools console?,1527375345.0
redblobgames,"Try changing the newer syntax

          showAlert() {
            return this.name.length > 4 ? true : false;
          }

to the older syntax

          showAlert: function() {
            return this.name.length > 4 ? true : false;
          }

I have no idea why IE11 wasn't giving me any errors though, but after loading a few more times it did show me that error, and then after making the change it loads for me.
",1527455768.0
Droid2Win,"Simple solution: don't support IE.

Unfortunately, we are all developers in the real world and are forced to still support that crap. So... good luck. :)",1527694131.0
r4ymonf,Compile the Vue project and treat it as static (put the generated files into `public`).,1527369655.0
spays_marine,"Just make sure you load your components in your app.vue, in the Vue instance, and include that compiled js file in your html. Then you can use your components anywhere in your blade files as if it were a spa.

Put your vue/js files somewhere so we can have a look if you need more help.",1527445972.0
saimpot,"Make a single blade file named `app.blade.php` in the views folder. In there make sure that you include the `.js` bundle with vue. This file should also have a `<div id=""app""></div>` somewhere. 

Go into `routes/web.php` file, and make a route like the following

`
Route::get('/{any}', 'HomeController@index')->where('any', '.*');`

Of couse that HomeController should have an `index` method, and that indes should return the `app.blade.php` file we mentioned earlier. 

That should really be it. ",1527371195.0
inhalingsounds,"Your dist folder is what is  going to be seen online, so you can either:

1\) pull all your vue repo into the server, run npm run build and make sure your domain is pointing to the dist folder;

2\) copy only the dist folder to the server",1527337931.0
sobolevn,"Check out our two templates for working with `Vue` + `Django`.

Django: https://github.com/wemake-services/wemake-django-template  
Vue: https://github.com/wemake-services/wemake-vue-template

You can also read more about how to link them together: https://wemake-services.gitbook.io/wemake-vue-template/production",1527359679.0
kaspy113,"I've used https://github.com/owais/django-webpack-loader, I configured it using the docs to place my JavaScript bundles into my Django static folder. Then I add the bundle tags to one of my Django templates.

If you go this route you will have to run npm install and npm run build from your vps. Edit: you could probably avoid this if you really prefer by committing your bundles and webpack-stats file.",1527394175.0
frostshoxxreddit,"
Can't see the console error log screenshot on imgur.
Would it work if you change the data() to below?

 data() {
            return {
                course: {},
            }
        },

I have a hunch that it is related to mutation/reactivity issue.",1527287437.0
cheeeehoooo,"Double check that your data from axios is coming back correctly. Usually, when I see oddities like this it's me messing something up on the JSON being kicked back in a different format than I expect.",1527288098.0
ScrewpyNoopers,"**SUPER WEIRD**
I added a computed method ""sectionCount"", which is output on the right, and the image suddenly appears. Also, the computed method is returning an accurate number, but is also throwing it's own error (see the screenshot)

https://pastebin.com/cPG47y83

https://imgur.com/a/piLIfTv",1527288987.0
re_marks,"They're merely blocks. The only difference is semantics. You can use any tag as long as it has only one child: li, a, etc (with exception to functional components). Looking at HTML spec:

> The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements.

I use them as general purpose dividers of elements.

> The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content. Each section should be identified, typically by including a heading (h1-h6 element) as a child of the section element.

It really depends how you include it in your overall application, but you won't do any harm just using divs.",1527283695.0
budd222,Why would that make any difference? Section and div are identical block elements ,1527283674.0
phaedrus322,Section has more relevance semantically for accessibility/screen readers. But even then you would still need to landmark it to truly make it relevant.,1527370992.0
frostshoxxreddit,"This might be a good start.

https://vuejs.org/v2/guide/reactivity.html#ad",1527285230.0
nmarshall23,"There is no need to use the observables api directly. I know of no vue librarys or plugins that directly use the observables api.

Read up on the reactivity guide. Understand that it's the object that has reactivity not the object's fields. Ie, Reactivity in object's is triggered when assigning to a field.",1527370712.0
amberpatrick,"thanks all, I was just a bit confused when starting off. Vue was so easy I forgot to even check here for answers!",1531266640.0
LynusBorg,"> They do not have normal methods and I really dont know how to interact with them.

I'm not sure what you mean by that - they work just like normal objects save for some small caveats that are documented in our guide. 

Can you elaborate what's not working for you?",1527339209.0
Switchy249,"I personally started with Vue a couple years ago, picked up JavaScript along the way now I feel really good with JS :) ",1527272996.0
tarellel,"I absolutely avoided JS for years. Barely touching jQuery or vanilla unless I absolutely had to.

VueJS completely changed that, I jumped right in. I'm no pro frontend developer with 10 years of Xp, but between VueJS and ES6, I've become pretty confident with my JS skills. And A LOT of jobs want you to be frontend developers, but just think all those frontend's need an API/Backend to hit pull requests from, update the databases with, etc. So don't completely drop the backend, I'd go for learning a full\-stack skillset and have the best of both worlds and broaden your opportunities.",1527280139.0
frostshoxxreddit,"Utilize your backend programmer experience as to build up Web APIs then use Vuetify as a frontend to consume the API.

Vue/Vuetify kinda have specific patterns that you need to follow, though. So I would focus more on that and just pick up Javascript along the way.",1527275842.0
n0phear,"You need to be descent at js to write clean vue.  But you can hack your way through it and still be productive.

The vuejs udemy course by max is great.  

For books for just js.

http://eloquentjavascript.net

Is free and has js fiddle build into it.  Really nice.  After that there is the you don’t know js books that are free and online.

If you want to get better at js faster and you are super weak.  Maybe the code academy js stuff if they still have it.  And then if you can afford it.  Watch videos on frontend masters.   The author of you don’t know js has a couple videos on there which personally I prefer but there are other js courses there.   I wouldn’t recommend the vuejs courses there except maybe Evan’s which I assume is good but never had the chance to check it out.  Udemy one is the best for the ground up, I use it to train devs for a base line understanding.  

Depending on your background and language of preference you may want to check out Mozilla page on JavaScript  array, its something you should go through for sure if nothing else.. maybe check out destructuring assignment.. rest and spread operators as well.   I’d also build out some plain old js modules.. get use to exporting and importing.   ",1527296563.0
omgsizzler,"Head to Udemy and pick up one of the most-rated / highest-rated js courses for 10-13 bucks and fly throught it at 2x speed, absorb what u can, more so you know whats in it.  Then get Max S's course on Vue, and refer back to the js course when needed.   You dont need to be a js master for Vue, learn as you go no prob.  There are Rapid ES6 training courses on Udemy.  Pick one of them up as a next step, or for a Vue breather when needed.  30-40 bucks total, can do it in a couple months.  Ps, never buy the udemy courses for full price, they go on sale every couple days.",1527376145.0
andyRtCh,"Dude, I am in the similar position. Vue is perfect for JS noobs like us! Just keep create projects and learn JS on the way! However if you want to learn React, you need good understanding of JS. Good luck! ",1527278608.0
Wobbuffet964,I'm made one web app in vanilla JS and now jumped into vue and that works perfect. Build cool stuff while you are keep learning JS :),1527279443.0
r0ck0,"I tried doing frontend stuff without learning JS properly for like... 19 years.  Only really took the time to learn it properly this year, and really wish I'd done it much earlier.  I'm using JS for everything now and dropping PHP.

> But how would I know I've learned enough to get back to learning a Vue?

What's your background?  For me coming from PHP, I needed to learn how things in JS work like:

* prototype inheritance
* scope
* arrow functions
* what `this` means
* require/import modules

I'm also using Typescript, which makes it more similar to PHP and just gives you more structure and autocomplete etc in general.

To learn JS properly before getting back on with web stuff like Vue, I built a command line system for controlling my servers, and running backup jobs and stuff like that.  It let me focus on learning pure JS properly first, and now Vue and my webdev are an absolute breeze.  Why the fuck didn't I do this sooner.

If you do happen to be coming from PHP, check out ""javascript for php developers""... both the book and video series of the same name.",1527307642.0
Downvotes-All-Memes,"u/n0phear has a great answer.

I would add that you should read through the Vue docs all the way. Don’t get hung up on any one thing but follow along and recreate the examples just so you know what you’re looking for later on.

Then work your way through freecodecamp’s curriculum from the beginning and try to build the projects with vuejs. When you get bored, hack on something until you hit a wall. fCC, udemy, hack, rinse and repeat. 

By the time you get to all the react stuff in fCC you should have vue figured out and be able to be productive.

I think they were reworking FCC anyway so it might even be framework independent by now...",1527553896.0
flaviocopes,"I would say you never fully ""learn"" JavaScript. You can easily learn the basics of Vue without a lot of JavaScript knowledge, and learn new JavaScript along with Vue, when you need it. If you're like me, you will most likely learn much more if you start building something that you want (like a project related to your hobbies) rather than just diving into the theory.

There are some fundamental concepts in JavaScript that might be dramatically different than the backend programming language you come from, especially scope and how to work with asynchronous code, those are not parts you can ""skip"", along with how functions work, and some bits of the new ES6-7-8 functionality is kind of mandatory to at least know what's possible, and what let-const-async-etc allow you to do.

There's a lot on the table, but at least with Vue you can skip a lot of the DOM-related APIs that can be harder than learning JavaScript ""the language"". I have a collection of tutorials [here](https://flaviocopes.com/javascript/) that might help you to get the basics right quickly.",1527593018.0
davideltroll,"Just learn the very basic from JavaScript and jump to Vuejs, you will learn the rest in the meantime.",1527380163.0
mattaugamer,">	Vue.js accompanies culminate adjust to compose rapidly and run straight from the program.

Garbage article spamming for Indian dev services. Reported as spam. Don’t waste your time. ",1527254767.0
lan__solo,"> You can’t promote your application from the app store. It’s a big deal.

Eh, what? How's that something you're gonna expect from a JavaScript library/framework?",1527255973.0
mateusrangel,"Conclusion
VueJS is an open source Mean Stack framework that is fast growing

LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOL",1527261825.0
FlevasGR,">  JS motor V8 

Try using an inline 6 cyl ecoboost ",1527282113.0
kosciak9,This could turn really nice for development. ,1527237294.0
cyanisis,"vue dev tools, no?",1527270756.0
imjoer,"I would 100% suggest going straight in to Vue. 

What I do at the start of each project is sit and write down on a piece of paper the components which I can visually see on a design (header, footer, button etc), once I have the list with a good naming structure I’ll create all the components as empty files - this speeds things up massively when developing 

Vue also has so many advantages when creating a UI, taking advantage of binding expressions and directives are just two things that are a game changer. Also means you can completely eliminate a lot of Vanilla JS/jQuery in the process too.",1527209626.0
evilpingwin,"A good approach, regardless of what library you are using (Vue, React, whatever), is to build a static version without props or state and add those things later. It really helps simplify the process.

Building a UI requires lots of code and not much thinking. Adding in the logic/reactivity requires more thinking and a less code. A generalisation but you get the point. This is also a good time to split things into UI Components and sub components if necessary as you are only thinking about structure/styling.

I'm never super strict on this, of course: if I need to render a list then I'll just loop an array instead of creating one manually but I prefer to keep my logic for later. ",1527210077.0
SecretAnteater,"I used to take your approach, but once I learned AngularJS, and now Vue, I go straight to the framework. It gives you a chance to mock out any data you'll be fetching from an API, and you'll be closer to structuring your app they way you want it for production.

One thing I do end up doing in the early stage is I'll end up with larger components than I know I'll use in the end. Rather than breaking every function up into a small component, just use one large one until you feel like you are going in the right direction, then start to break it up.",1527608561.0
CSEngineer13,"If you're looking for similar concepts, not specific to vue, you can check out Brad Frost's online book ""Atomic Design""

http://atomicdesign.bradfrost.com/

There are also a number of resources that are a bit more framework agnostic on _his other website_:

http://patternlab.io/resources.html",1527169826.0
edanceee,"Not mentioning storybook is a huge mistake.  


Because this is basically storybook \(that already works with Vue\) with concepts taken \(and renamed\) from Atomic design?   


You basically took stuff that already existed, made it worse and sold like your own. I don't really get people like you.",1527176235.0
ABadWomanDriver,"Excellent read, will definitely put this on my list of github projects to sift through. I’ve been looking for a way to bring more structure to my workplace, especially when it comes to the design of our applications.",1527171042.0
crespo_modesto,"I really like that office/collaborative setup, looking forward to being part of something like that.

Everyone has macs too haha... I might have to use one myself, have to get used to it.",1527174442.0
dougieled,That’s a great idea! I’ll hopefully get a crack at it in the next 3-4 weeks. ,1527112271.0
CSEngineer13,"Hey! This looks like it could be a lot of fun. Hopping into the Slack channel. I look forward to seeing what everyone cooks up!

If anyone wants help or guidance, feel free to reach out via Slack. I was actually part of a team that helped recently update a major pizza brand's website, haha. I'm hoping to livestream the process on Twitch, and I'll be pulling inspiration from recent tech posts like:

Sarah Drasner's:

- Page Transitions: https://page-transitions.com
- Serverless Checkout: https://css-tricks.com/creating-vue-js-serverless-checkout-part-one/

And a few UX magic tricks I learned to increase conversations when selling pizzas to 10s of thousands.",1527150256.0
redblobgames,"You might be able to do something with a global mixin, like this:

    COUNTER = 0;
    Vue.mixin({
        mounted() {
            this.$el.setAttribute(""TEST"", COUNTER++);
        }
    });
",1527104871.0
syropian,"Possibly dumb question, but why not just use regular CSS classes?",1527104826.0
dballz12,"I have a couple questions so I can understand better. Does each component need a unique identifier? Can it just be a number? If so, you could add an identifier after the templates are loaded by checking for the div tags on the page. 
The following is code I had to implement to disable the divs in my app that were buttons:
    
    let el = document.getElementsByClassName('button')
        if (this.readOnlyAccess === true) {
            for (var i = 0; i < el.length; i++) {
                el[i].classList.add('disabledDiv')
            }
         }

This isn't exactly what you want, but you should be able to programmatically go through all the divs and add an identifier on the fly. I added this code and other similar code to avoid having to add a disable button to all our input boxes and buttons when a user had read only access.",1527105003.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Build a scrolling card list in Vue.js • r\/vuejs](https://www.reddit.com/r/javascript/comments/8ll4kd/build_a_scrolling_card_list_in_vuejs_rvuejs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1527095979.0
,"I have deployed this in prod and it can get fucking annoying for users on spotty networks if you use a notification/popup.

It's best to use an status icon that shows the network connection. However, both Fontawesome and Glyphicons don't have such icon. 

I'm restructuring our code to use Vuex anyway, then queueing actions requiring net until it becomes available.

Seriously, only flash on/off-line status _if and only if_ the user carries out an action that requires immediate net access. Don't unnecessarily announce connection status.
",1527118888.0
Maxtream,"Interesting approach, but why not use manifest.json and load additional file that handling offline state when browser itself identifies that user is offline?",1527134981.0
SecretAnteater,"NodeJS is only needed to build the Vue app. Node *can* be used as a full server, but in this case it is not.

If you are using Laravel Mix's setup, what it is doing behind the scenes is setting up a server designed for development **only** (pretty sure it is using Webpack's built-in dev-server and/or BrowserSync). In production, you would want to either upload the built JS scripts to a CDN, or host them through Laravel's server. 

p.s. This is the same with any JS asset these days. Webpack (or Gulp or Grunt or whathaveyou) compile your scripts using NodeJS as a runtime, and you get one or more static assets to use in the front-end. Doesn't matter if it is a Vue app or just some vanilla JS. ",1527089967.0
MrMaverick82,I like the effect but I don’t really see why we would need JavaScript for this. Plain css would probably work. I might be convenient to use js to add an active class to the currently selected button. But other than that simple css is enough. ,1527102784.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Making an animated Nav button component in Vue • r\/vuejs](https://www.reddit.com/r/javascript/comments/8liwi5/making_an_animated_nav_button_component_in_vue/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1527078239.0
serious_case_of_derp,Can someone provide a vue.config.js file that will combine all of the js in to one file instead of the vendor separate? ,1527087914.0
SecretAnteater,"Woah there, why are you trying to do that? You might have a legitimate reason to do that, buuut...

It is *really* common to use event handlers in the markup with JS frameworks like Vue (AngularJS introduced a very similar syntax way back in 2010). There is nothing wrong with it, and doesn't go against the idea of ""separation of concerns"". 

What you are saying is ""this event is *bound* to this element""; they are coupled, not separated. If that element is removed, the event-binding code should also be removed, but not necessarily the function that event triggered. That function is separated from your markup, and you could call it whenever you want. The *event binding* is not separate from your markup, so it makes sense to put it there.",1527023163.0
ABadWomanDriver,Can you explain the benefit of having this logic encapsulated within component? Seems to me like it would be more appropriate to live in some authentication service is your JavaScript. The api seems really useful but I’m not sure I understand why you would want your redirects/callbacks living in a component template.,1527190034.0
nwsm,Apartments? My college town had a complex named The Vue too,1527035827.0
NoEsquire,"Skimming through this, it looks quite well structured and paced. Has anyone gone top to toe on this?",1527014655.0
ToosterReeth,"> we prefer tabs over spaces

First time I've heard that in years.",1527010722.0
datlean,Could you go into the rules a bit more? The rules on the new Cloud Firestore are a bit confusing to me. Is there anything in place stopping someone from editing another persons posts? The rules make it seem like you can do whatever as long as you're logged in.,1527099908.0
adracko,"Following along with this and at the stage where Im testing the sign-up / log in, I get this error.

    Function CollectionReference.doc() requires its first argument to be of type string, but it was: undefined",1527108714.0
dick_ey,Tl;dr: started using Vue,1527052976.0
Zanktus,"There is a big and helpful Discord community called Vue Land: [https://discordapp.com/invite/HBherRA](https://discordapp.com/invite/HBherRA)

Might be exactly what you were looking for.",1527003028.0
haukebr,"I  love that thought! I am currently learning vue too, so lets build something :\) Sent you a message with my number for whatsapp or whatever",1527006571.0
irphunky,"For my personal site I don't bother with a backend, I just use vue-router and produce a static build which is then deployed to S3.

When any changes are pushed to Github, CodeBuild will build, push to S3 and invalidate cloud front caches for me.

Works really well and is simple to setup - https://github.com/Phunky/markharwood.info/blob/master/buildspec.yml",1527001954.0
rithvikvibhu,"As others have mentioned, you could host static sites pretty much everywhere like Firebase Hosting, S3, etc. You could also use GitHub pages directly.

But I'd recommend Netlify as it's built specifically for static webaops. It's free plan is *very* generous and easy to link to a GitHub repo.
https://netlify.com",1527015908.0
HelloWorldOfThrowawa,"Hey! You can just deploy to a static hosting environment with no backend. In fact if you deploy to heroku you will need to include a basic Node server in your application so that Heroku can serve your website. 

For purely static hosting, look into surge.sh, you can literally create a URL and deploy your site in less than a minute from the command line. I've used it extensively and really like the work flow. Assuming you've installed the surge CLI globally, your deployment will be as simple as:

1. npm run build

2. cd dist

3. surge

4. Follow surge terminal prompts to create your URL.

5. done.

Just make sure you don't have any sensitive information like API keys and such, since you will effectively be exposing them. ",1526997409.0
kcolttam,"You can also just use firebase hosting - free and doesn't require a back end.  (I have a site with 8000+ users, and no back end!)  Deployment is easy, and I actually use the site as a way of feeling happy about coding after working at my day job of angular 1.59 :D",1527001190.0
danstansrevolution,"I've been a long time user of firebase for hosting, but I've recently switched over to netlify. It is so easy to just push code to master and have it deployed live. +1 Also, my personal site is built without a backend, I just use static JSON or put it in my Vuex state.",1527031791.0
everBeliever,"I was exactly looking for the same, building personal website with Vue to learn it.",1528027741.0
nothingduploading,hard to say without looking the code.,1526951449.0
ocajian,This was a great article and really helped to clear up confusion I had about vuex. Thanks! ,1527029009.0
Kazanian,What is the benefit of missusing store for api Calls instead of using modules from an api.js file? ,1527060799.0
defunctAI,This is insane .. thanks,1526917271.0
seamouse3,Very cool. Any chance you have any performance comparisons to something like electron?,1526934000.0
rrajen,This is awesome. I realize that this is still in early stages of development. How would one distribute apps built with vuido? Would it be possible to build out platform specific binaries (I think Electron does this) and make it available for end users?,1526936921.0
EffectiveTrouble,Great,1526918315.0
patrykmaron,"From reading the post on forum, seems like it has animation and graphical limitations where the OP recommends still electron for that purpose. However, for basic uses this will give you greater performance.

I'd like to see this working fully like a SPA with all the blows and whistles.",1526980871.0
gevera,"The Dreamer in me already sees Vuido OS with all the Vue goodies running on top of GNU/Linux ;)
",1526941856.0
21stCenturyJoku,"Yes, this is *not* about vue-loader, this is simply how data is handled in components. Your root Vue instance (`new Vue({ ... })`) will still have `data` as a simple object, but components need a function.  
 Otherwise all component instances would refer to the same data, so if you'd have a *""Timer""* component three times on your page and would stop one of them, all of them would stop as they share one data object. With data being a function, every time Vue creates a component the component receives its own fresh copy of `data` so they work independently like they should.  

As always, the official docs [explain this perfectly](https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function).",1526922148.0
ImReddit,"This helps you create reusable data in components. 

If your data is just an object, it’s a single source of truth each time you use it. The data remains bound. 

However if you return t as a function, there is new created data for each component you make. 

Best practice leans towards always returning data as a function that returns an object. ",1526916030.0
pd-andy,The store is not persistent; use cookies or some other form of persistent storage.,1526886559.0
Brahminmeat,"Also to stop the hash mode in Vue router, lookup history mode",1526888030.0
toughToFindUsername,"You can set your Vue router mode to 'history', that will disable the # in the URLs. Then in CloudFront distribution, you can set error rules to redirect all routes to your index.html",1526912423.0
acklavidian,Clear application data in devtools and the clear cache and hard reload,1526919484.0
Brahminmeat,"Are you using vue-router ? If so, lookup history mode",1526888138.0
josh1nator,"Maybe less of an Vue related issue but one of your http-server? Like Apache doesn't know what to do with the URL ""example.com/xyz/"" because the folder doesn't exists, and the 404 redirects to your index-file while changing the URL?

https://router.vuejs.org/en/essentials/history-mode.html has more info's on how you need to change the server config to always serve the index-file, regardless of the URL.",1526968837.0
minorvillain,Contentful and Netlify are both good options if you don’t want to manage a server/db.,1526834149.0
FURyannnn,You can roll your own REST API and write an interface to support it or to use something like WordPress. There are hosted options like ButterCMS but I'm not a fan of spending so much money per month. You could also try using a self-hosted headless CMS like Cockpit or Directus,1526848008.0
N3KIO,Strapijs,1526848327.0
Rorixrebel,Django,1526874651.0
shaftshot,Kentico Cloud is dope.,1526849522.0
not_very_creative,This looks nice https://getcockpit.com,1526856009.0
laissezfart,https://prismic.io,1526860045.0
gevera,"It depends on what do you want to do.

If you want to go the monolithic way, I recommend Drupal over Wordpress, since its  REST API decoupled system works out of the box. The downside of it is you still got to spend money on server and hosting.

However, there is the JAM stack path, which is 100% free.
Use Nuxt or Vuepress as a frontend, generate static pages, upload them to Netlify and use their CMS as front-end content management. Be advised that your workflow will be as so github >>> Nuxt/Vuepress >>> NetlifyCMS. The bonus is that this way you can roll back or do atomic upgrades and continuous improvement. It is really cool if you think about it.",1526918476.0
budd222,I'm currently building a WordPress theme with vue.js and the WordPress rest API ,1526835261.0
carnedv,"Directus is an open source headless CMS that might be worth a try. I've only fiddled with it, so not sure if it's ready for primetime or not. 

https://getdirectus.com/",1526870440.0
saintplay,Check https://nuxtdoc.js.org,1526908457.0
mingyjongo,"Wordpress takes very little to get going as a back end for a decoupled app/website, I definitely recommend it. I've had a nightmarish experience with Drupal as a back end. I have yet to work with a hosted cloud solution like Contentful, but it sounds pretty great.",1526837316.0
nothingduploading,find one based on laravel.,1526833424.0
UndefinedB,"You can use Cypress for e2e. It's chrome only but you don't need multiple browsers for e2e testing.
If you want to check if IE/safari/chrome/etc works then you're browser testing.",1526859037.0
mlmcmillion,Why is Selenium considered fragile? We’ve been using. Nightwatch with headless Chrome and it’s been fine. ,1526836687.0
parth115,"We use ghostinspector, see if that helps. It has been super stable for our apps. ",1526834171.0
LanFeusT23,Testcafe is what we have been using for a couple years now. Works well!,1527713038.0
YourCupOTea,"Both do.

Vee validate lets you adjust the events config https://baianat.github.io/vee-validate/configuration.html which you could set to blur or nothing. If you set to nothing you can manually validate with the validate() method.

Vuelidate you control it manually by calling $touch() when you want to validate.",1526820114.0
batisteo,"Google does load JS/Ajax, if it takes less than 800-1000ms. ",1526855548.0
haukebr,"I am currently trying some different approaches to work around SSR and Prerendering.

For that, I took a look at how instagram and netflix do their loading:

\(copied from a not yet published blog post\)

### Instagram

**Loading instagram.com \(within your browser, not the app\) without javascript enabled, you get a white, blank page. That is hardly a surprise if you know that they are using react. So what does the google crawler see then? A bunch of meta tags and javascript variables.**

**To be more specific, the source code of a profile page consists of the basic meta stuff like viewport or robot instructions but also the title, description, author and image if that page.**

**📷**

**There are og tags, but no basic description or title. Looks like it’s not necessary?**

### Netflix

**The approach by netflix is different. On a pageload without Javascript, you get some sort of “above the fold” loading. The remaining site functions will be loaded by react.**

**What I find interesting is that netflix does not use meta tags and in a movie detail page \(second image\) the title is within a div, not a h\-tag. Yet you can find the movie through google. How? I don’t know.**",1526820687.0
desaintflorent,Which solution did you end up with ? Are you happy with the result? I’m working on a similar project and would be happy to have some feedback ;) ,1528825718.0
teh_inquisition,"There is a function called store.replaceState that might be what you're looking for. 

[Vuex api reference](https://vuex.vuejs.org/en/api.html)

I didn't really understand why you needed it, but generally I think it's best practice to avoid modifying the entire state at once except for hydrating or time travel. ",1526822086.0
mrcageman,"Because state is probably a variable defined with “const”, which means it cannot be re-assigned. You can however create a function that recursively updates or replaces the properties of the state object. ",1526810668.0
EffectiveTrouble,"Looks very nice, will try  it in my next project. Anyone tried it yet, is it worth a look?",1526815324.0
TheHappySadGuy,Came for a discussion - vue sucks| why vue sucks? Was dissapointed .,1526804747.0
DerekMartian,"https://eslint.org/docs/2.13.1/user-guide/command-line-interface

eslint --fix

Fix your linting errors as you develop, and they won't pile up. Get in the habit of abiding by your linting rules so you don't have errors to fix. It'll make you a better developer in the long run. ",1526756950.0
leafsounddazzle,"This may can help you!

    // config at your vue.config.js
    module.exports = {
      chainWebpack: config => {
        config.module.rule('eslint').use('eslint-loader').options({
          fix: true
        })
      }
    }",1532173264.0
workandfocus,Are you using VSCode? Because I'm able to have the editor autoformat on save which fixes lots of linting error like the ones you're suggesting.,1526761387.0
danstansrevolution,I'm using vue-cli 3 and I am able to run 'yarn lint' from the command line to fix the linting errors.,1526758286.0
fzy_,"Might not be what you asked for, but adding the possibility for the user to hit enter to deselect the input should remove the need for your shortcut. Just add `@keydown.enter=""$event.target.blur()""` to your inputs.",1526766276.0
kevinleedrum,"Depending on your code, you may be able to use [$refs](https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-Child-Component-Instances-amp-Child-Elements) instead to access your input elements. You can even put a `ref` on a `v-for` to get an array of elements.",1526756761.0
evilmaus,"Have a method on your Vue component like so:

    blur: function (event) {
        event.target.blur();
    },

Use the `created` life-cycle hook to debounce the method:

    created: function () {
        this.blur = _.debounce(this.blur, blurTimeoutInMilliseconds);
    },

Then hook up that method as an event handler for all appropriate inputs:

    <input name=""foo"" @input=""blur"" />",1526756971.0
dtkahl,"Touching the dom is ok. You can also limit the selector to just handle elements of your component by using this.$el instead of document as context for your query selector.

    let el = this.$el.querySelector(':focus');
    If (el) el.blur();

And only one element have focus at the same time so you can use querySelector instead of QuerySelectorAll.",1526768069.0
Mekhami,"I don't feel like this is a good use for components. Components should encapsulate markup and behavior. Why have a component wrapper instead of a css class?

I just don't see a use case for this, at least one that provides significant value.",1526742272.0
_pearofducks,"This seems to do similar things as [vuex-map-fields](https://github.com/maoberlehner/vuex-map-fields) but in a slightly more complicated way[1]?

Is that fair or is there other functionality I missed this offers?

[1] In _vuex-map-fields_ one only needs to use a single helper in the component (in `computed`), where you have two helpers. You could very easily streamline this by using both computed get and set instead of a method.",1526710790.0
Theia123,Super cool,1526831350.0
Brahminmeat,"""Oh damn!"" –Terry Crews",1526715324.0
AlexJoverM,Author here! Thanks for publishing! ,1531139338.0
smiller171,Can you use `debugger` or log statements to see if your event listener is being triggered at all? Also you can use Chrome Dev tools to break on events I believe which should help troubleshooting,1526671567.0
teh_inquisition,If you know what route to watch for you can put a watcher on the route and use it to close the modal. ,1526697836.0
Lelectrolux,"> close a modal when the back button is pressed

Option 1: Do you mean you are on page A, you did something that opened a modal, and you want the back button to close the modal but stay on page A ?


Option 2 : Or do you mean you are started on page A which opens a modal by default, from there you went to page B, and now you want the back button to go back to page A without opening the modal.


I'm guessing option 1.


Anyway, post you code, can't do much without it, you didn't give us enough material to help.",1526737884.0
21stCenturyJoku,"Do you mean the browser's back button? You have to listen for the `popstate` event to react to that.  
It triggers both for forwards *and* backwards buttons though, so you have to do some magic to determine which button it was. Never done it myself, but there are multiple SO threads concerning this topic.",1526749678.0
jineshshah36,It has little to no accessibility consideration. Be careful using it in the real world. ,1526677748.0
LittleAccountOfCalm,I'm not sure the selects work properly [https://lusaxweb.github.io/vuesax/components/selects.html](https://lusaxweb.github.io/vuesax/components/selects.html),1526672109.0
3Dayo,"Hi, I was wondering if you might be willing to write about why you decided to create a new UI framework from scratch instead of contributing or just forking an existing one? 

Was it to scratch an itch? 

Was it because the existing ones were built on fundamental assumptions that you didn't agree with, and therefore could not grow in the direction you wanted? 

It would help the adoption of your framework by explaining the choices you made and the direction you intend to go.

In any case, thank you for another great addition to the VueJS ecosystem!",1526711448.0
Catalyzm,"It'd be great to see a functional comparison of how this differs from Element UI, Vuetify, etc aside from the visual style.",1526677608.0
MrMaverick82,"The notifications seem pretty buggy on iOS. Didnt try out much else. 

I applaud your work though. :)",1526725986.0
DJLaMeche,"On the website landing page, the buttons ""Components"", ""Layout"", ""Contributing"" and ""Contributors"" don't work... Firefox on Windows 10.",1526731509.0
irrg,Am i the only one that mistrusts employers that give out 'assessments' that have an actual impact on their product? It's basically getting work for free. It doesn't sound like a good way to assess your actual development skill. ,1526667390.0
DylonDylonDylon,Import components on an as need basis opposed to global for starts.  Split components where you can.  Make pages out of components. Instead of pages that are spaghetti code.  ,1526661189.0
nothingduploading,"you want to make sure you're minifying your production build js.

also read the getting started guide for vue.js it explains a lot.",1526661824.0
Fzbravozf,"Look up async components, code splitting and lazy loading routes. With Vue CLI it's really simple to do that. 
https://vuejs.org/v2/guide/components-dynamic-async.html
https://router.vuejs.org/en/advanced/lazy-loading.html
",1526661871.0
CSEngineer13,"* [Dynamic Import](https://vuejsdevelopers.com/2017/10/30/vue-js-dynamic-imports-lazy-load/)
    * IE. Code split per route, and per not-immediately visible component
* [Webpack bundle analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer) to identify large chunks
* [Lighthouse to score the app](https://developers.google.com/web/tools/lighthouse/) and generate optimization items",1526662427.0
birdspider,"so you want your backend (php) to do your frontends (vue) job ? this alone will be ""confusing for future dev""",1526635535.0
quinlo,Single file components and separation of backend/frontend I think is the cleanest and most efficient way to do things... But if you find yourself needing to define templates in the php generated html you can do so a few ways.  Check out x-templates and inline templates specifically. See : https://vuejsdevelopers.com/2017/03/24/vue-js-component-templates/,1526641840.0
thinkadrian,"The backend isn't supposed to give you HTML in a vue/angular/react app. It's supposed to give you *data\**.

You can have external template files, but they'll be loaded by the frontend and merged with the data from the backend.

There are various ways of adding server\-side rendering \(SSR\) to your app, but PHP is **not** one of them.

^(\*except certain cases where you allow a user to input) ^(markup) ^(into a field, like a blog app)",1526636799.0
mrunkel,"I'm not understanding why the rendering of HTML isn't a job for the backend.

So are you saying that this is just not possible?  The very first example in the vuejs introduction https://vuejs.org/v2/guide/index.html shows using static HTML and adding the vuejs library and a small vue app to it.

I want to do the same thing, while having my HTML generated by PHP.",1526640193.0
UndefinedB,"You should make a frontend project in Vue, a backend project in PHP and connect them through a API (REST, GraphQL).

That keeps your projects totally separate and you can add dynamic content through the API.",1526636797.0
tinrab,"I do it by setting baseApiUrl to `process.env.NODE_ENV == 'production' ? '`[`https://example.com`](https://example.com)`' : 'http://localhost:8080'` . This is not specific to Vue. You should have your API code abstracted away somewhere, so this changes only one line of code.",1526636317.0
kefirchik,I'll assume your Vue project is a SPA built and served as static files for production. We faced the precise same problem and used a script (basically same as what you're thinking with `sed`) to search and replace the url from the build artifact on container boot based on container env var,1526678800.0
,[deleted],1526592468.0
LEOtheCOOL,"https://vuejs.org/v2/guide/list.html#Array-Change-Detection

Its fine to use arrays, but like the documentation says, you  if you write this:

     panes[1] = someObj

vue will not see the change because of javascript limitations.   Instead, you can write

     Vue.$set(panes, 1, someObj)
",1526596731.0
TwoTapes,"You can use an id/entity pattern (not sure of the official name, maybe normalization?) where you use two data structures to store your information. One for the panes, one for the lines in the panes.

    data: {
      paneIds: ['main', 'pane2', 'pane3', 'pane4'],  // Actually names, but w/e
      paneEntities: {
        main: ['1', '2', '3'],
        pane2: ['1, 2, 3'],
        pane3: [""1, 2,"", ""3""],
        pane4: [""1, 2, 3""],
      }
    },
    computed: {
      panes() {
        return this.paneIds.map(id => {name: id, lines: this.paneEntities[id]});
      }
    }

This means your Pug template will still work, and when you update an array in `paneEntities`, your `panes` computed property will automatically update. It also means that you can easily reorder the panes by just changing your `paneIds` array.

Let me know if you have any questions about it. I suggest making a minimal CodePen or similar and sharing it if you're still struggling.",1526595472.0
neoREgen,"You can massage the data into a format that’s easier for your component to consume within either a `computed` method in the component, or, if you’re using Vuex, a `getter` method in the store.

Make use of the `reduce`, `map`, or `filter` methods that `Array` has natively to do this.

Like others are mentioning though, I don’t see anything particularly ugly or egregious (related to the handling of data) in the example you provided.",1526599799.0
neoREgen,"You can massage the data into a format that’s easier for your component to consume within either a `computed` method in the component, or, if you’re using Vuex, a `getter` method in the store.

Make use of the `reduce`, `map`, or `filter` methods that `Array` has natively to do this.

Like others are mentioning though, I don’t see anything particularly ugly or egregious (related to the handling of data) in the example you provided.

If you’re worried about updating the array, look into a concept called _denormalization_ for your data. It largely requires breaking things down into the flattest possible structure of objects with unique keys for each item and an accompanying array of these keys to specify the order. Then you end up looping through the array by ID, and using that ID to retrieve the data related to it from the object-dictionary.",1526599834.0
irphunky,Make sure the element has `tabindex=1`,1526583412.0
calebroseland,"Direct, external access is probably not recommended.

But, presuming you have access to `vm` in your other file, you can read `vm.$store.state`, where the raw properties are stored. Again, getters would be better. Or perhaps you could have a ""public"" method on the root instance that would access the store.",1526568025.0
jineshshah36,You can actually just import the store from that other file and access it directly. You can also export the vm instance from that root file and import it. Just be careful with circular dependencies.,1526568586.0
usx-tv,"You can, as others explained here access vm.$store. However this is really *not recommended*.

I'd suggest trying to find an alternate solution, could you go a bit more into detail as to what you're trying to access in the store, from where, and why?",1526638540.0
calebroseland,"When you instantiate a Vue instance with `el: '.selector' // or element reference` and do not have a template or render function, it should be able to attach to the element and keep the content in the way you describe. Keep in mind, any {{bindings}} will briefly appear until they are rendered/updated.",1526564714.0
avenp,"Take a look at Vue-server-renderer. You can build a sever bundle and render that HTML onto the page from PHP (calling an API to a node server running the server rendered OR caching the HTML output in PHP) and then have vue “hydrate” from that. 

https://ssr.vuejs.org/en/

There’s also third party solutions like prerender.io",1526564591.0
,[deleted],1526648621.0
Kazanian,"It's possible to replace DOM Elements outside of the vue app with portal\-vue: [https://alligator.io/vuejs/portal\-vue/](https://alligator.io/vuejs/portal-vue/)

Not sure if it's possible to manipulate those elements, though. This 'feature' also might be removed in a future release: [https://github.com/LinusBorg/portal\-vue/issues/74](https://github.com/LinusBorg/portal-vue/issues/74)",1526649249.0
dzkn,"Yes! I have done this and it works very well.

    <div v-text=""someVueVariable"">This text comes from PHP</div>

Instead of using mustache-like templating, use v-text and v-html. This way the PHP-rendered text will be shown up until vue takes over.

This does not work very well with custom components, but best with a single vue instance for data binding.",1527764894.0
thiswasprobablyatust,Comparison between nuxt/vuepress/hugo?,1526562733.0
pro-user,"Congratulations on your new project! However, launching such a project without any documentation is a no-go for me. This makes the difference between trying to dive into the project and try it out or immediately closing the page and forgetting about this. I understand you are excited and eager to share your progress on the project, but good documentation is almost as equally important as good and maintainable (and working) code.",1526591344.0
evilmaus,You're really close. Just replace `something.smart.goes.here` with `categories.includes(thing.slug)`,1526532250.0
DukeBerith,"Do you have to loop with Django instead of using v-for? 

I put an example of how I'd do it with some dummy data into this codepen

https://codepen.io/anon/pen/LmgKom
",1526548005.0
Brahminmeat,"I would imagine that you could use vue-router router.push after detecting that you have scrolled past a certain height threshold. 

I want to ask, why tho?

I don't see why you couldnt just lazy load each ""page"" as a component one after another. Then, if routing based on page means that much to you, you can match all routes as an alias to a single master component. Then when you hit a specific route, you can just load that specific child component as the top. Scrolling up lazyloads the previous component, scrolling down, the next.

You also should be very careful not to scrolljack as it will destroy your ux. ",1526520500.0
jineshshah36,Just use hashes and anchors. The ability to do this has existed far before Vue. You can also polyfills smoothscroll and get smooth scrolling between anchors.,1526571096.0
ShortSynapse,"Do you have an example? Would a webpack dynamic import work better?

Ex.

    const name = 'some-component'
    const component = await import('/path/to/' + name)",1526511488.0
dballz12,"Where are you retrieving data from? I pass parameters to an axios call to get a return from json object. Can you explain a little more how the application works? Where is your data or component you want returned being defined? If it’s static you can just pass the key to a method and have a switch or if statement, etc.",1526511500.0
nothingduploading,look into vuex.,1526495426.0
ours,"[ 9.36 KB ](https://github.com/vuejs/vuex/blob/dev/dist/vuex.min.js)

If you are using vue\-cli's webpack, you can run ""npm run build \-report"" to see the total size of your bundles and what space each package and module takes.

If you are using VS Code for an editor,[ this great plugin](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost) tells you the size cost of each package you import right in the editor.",1526492674.0
JinSantosAndria,"I see it as dependency injection. Whenever a component can live with the injected information, without modifing it and no requirement to be notified about changes, its a prop. Anything else is a hard dependency on live and changing data, like typical ORM/DataMapper/DB stuff.",1526479901.0
syropian,"I'm pretty much in the same boat, my general rule is, if I need to pass a prop deeper than 1 child down, or I need the same data in a totally separate piece of UI I throw it in the Vuex store. There are some edge cases where I'd occasionally use the provide/inject API as well though.",1526476923.0
hugo__df,"Having experience structuring applications in React and Angular that leveraged stores, unless things are shared in components that are not in a parent\-child tree and/or they're only used by one component deep in the tree, try to just pass them through.",1526478883.0
usx-tv,"If I need that prop across multiple components, VueX. Elsewise just pass it down.

If I have a grandchild component that needs a prop from it's grandparent, I will let my parent component just pass it down as well (using v-on=""$listeners"" to share changed with the grandparent).

I will only use VueX if my prop is shared across multiple smart components.",1526560146.0
Mekhami,"why would you ever want to do somethign like this.

christ, people, rewrite your code, stop being bitches about it.",1526513774.0
coryza07,"[https://vueslack.slack.com](https://vueslack.slack.com) is somewhat active.

I think the best spot I've found is [https://vue\-land.js.org/](https://vue-land.js.org/)  which has a link to the discord channel.",1526489520.0
nothingduploading,I haven't seen any meetups specific to vue but there are more general javascript groups which will sometimes talk about vue.,1526440111.0
mcamiano,[https://www.vuemeetups.org/find/#united-states](https://www.vuemeetups.org/find/#united-states),1534127202.0
Doctor-Dapper,"You should use [Dynamic Components](https://vuejs.org/v2/guide/components.html#Dynamic-Components). You can have a button or slider somewhere on the page that toggles an instance variable between two components, and it will switch between them. The examples on the docs are pretty much exactly what you're looking for.",1526559657.0
kefirchik,"> I know Vue has JSX support, but it feels like templates are a significant regression in terms of power and an effort to bring React back to the older paradigm of file based pages rather than apps with living, breathing components.

Some might say that React and JSX are an effort to bring web development back to the much older paradigm of code-within-presentation, ala classic PHP. Vue's separation of concerns encourages you to model the data and behavior of your components separate from the DOM/presentation. It's not relinquishing any ""power"" - if you need to write a render function, it's there, but for the 90% of components you'll ever write it is not necessary and that level of intermingling of code and presentation is often less maintainable.  ",1526413505.0
SecretAnteater,"Read this for a pretty fair comparison: https://vuejs.org/v2/guide/comparison.html

Ultimately, a lot is going to come down to personal preference. Why do you choose React over Vue?

Personally, I hate CSS-in-JS and JSX. I like a clear separation between Markup/Content, Functionality, and Style on projects I am working on, and enjoy using the pre-processors of my choice for HTML and CSS (Pug and SCSS). That is why I chose AngularJS over the other options at the time. I also like knowing that I can use the same framework for a single-page app as I would for a few interactive widgets on a Wordpress blog without feeling like it is overkill.",1526412977.0
segphault,"These are some of the reasons why I prefer Vue's template system over JSX:

* In Vue's template system, you can declaratively express flow control in a way that conveys the underlying intent. You lose that in JSX where, for example, your loops are map invocations on arrays and your conditionals are ternaries. I want my entire template to be declarative, not just some parts of it. Because Vue templates are HTML, they are trivially parseable and can be programmatically manipulated by themselves, whereas doing the same with JSX requires an extensible JavaScript parser.
* JavaScript's native flow control syntax consists of statements rather than expressions, which is objectively a pretty terrible fit for templating. When writing React components with JSX, you often have to either hoist bits of logic out of the templates, use extremely small templates with structure that is dictated by the flow control, or use more non\-standard language features like do blocks.
* JSX itself is a gratuitously non\-standard extension of JavaScript and will never be natively supported by browsers. As such, projects that use JSX will always have to use a transpiler. In a Vue project that uses HTML templates in template literals \(and no single\-file components\), I'm not locked into having a build step during development. I can avoid massive boilerplates, dependency bloat, and all of the complexity of a heavyweight toolchain. Being able to use standards\-compliant JavaScript has huge advantages for maintainability and longevity. I don't have to worry about future language features conflicting with my template syntax and I don't have to worry about breakage or security compromises in the massive dependency graph of complicated build tools.

Aside from templating, Vue's built\-in data binding system is also a lot better than React's, offering more power and flexibility out of the box. It's a lot like MobX, but tightly integrated as an official part of the framework. Features like computed values are really great. Vue also makes it a lot easier to update deeply\-nested properties. I can use Vue's [store pattern](https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch) on a plain JavaScript object to get an elegant state container without having to bring in a separate library. In cases where I need heavier\-weight state management, Vuex requires a lot less ugly boilerplate code than Redux.

Under the hood, React and Vue work in much the same way: they both rely on vdom for performant rendering and Vue's v\-bind is largely just sugar on top of the same unidirectional data flow pattern used in React. But I'd argue that Vue is more ergonomic, more closely aligned with web standards, and provides a better and more coherent experience out of the box—without being heavier.",1526427206.0
BrianKimball,"Single File Components, Computed properties baked in. The other thing is the Vue community has seems to settle on one thing as opposed to React. For example: state management for Vue is Vuex, React has Redux, Mobx, Unstated, etc. 

There are other things, but it's about preferences. I really like them both but I like Vue a little bit more.",1526416484.0
JinSantosAndria,"I came from C#/PHP/Golang. React just isnt my taste. It's some kind of mix between closure\-hell known from jquery, mustache\-riddle and es6 syntax that give you zero clue when all you did before was some jquery fiddling. It was the least comprehensible mixture of so many responsibilities I just closed the checkers tutorial app. That was after I was an hour through Angular ""shit"". Vuejs had a simple vibe, cared enough about seperation of concerns in its tutorials and I can read it without keeping an ES6 bible to brush up my dusty JS. You bind shit to html, seperate that clearly, same with CSS and it wraps around some invisible single file component implementation that only requirement is a god damn root tag for each responsibility.",1526414237.0
austencam,"Scoped slots and render functions are the key to vue's templating power. Not a regression, just a different way of doing a similar thing. Personally I think it makes your apps much easier to reason about.",1526416581.0
gabriel-et-al,"I'm not going to give a full answer for why I use Vue, but you may consider this relevant:

> it feels like templates are a significant regression in terms of power and an effort to bring React back to the older paradigm of file based pages

When you work with a designer, you better avoid code like [this one](https://stackoverflow.com/a/44959541/5281047) because your fellow designer won't understand it, but they can easily understand Vue's template syntax (which is just plain HTML with additional attributes and the {{}} thingy). This is absolutely relevant when choosing what piece of tech your company will use in the next project.",1526420189.0
crimaniak,"We have many years of JSP experience. We have many years of ASP experience. We have many years of PHP experience. And all this experience shouts: do not mix procedural code and HTML markup! Java programmers understood this. ASP.NET programmers understood this. Even PHP programmers understood this (I'm not sure about the authors of Wordpress). Any modern server framework includes some kind of template system that avoids mixing Java / VB / PHP / etc .. and HTML. But no, we are cool Javascript programmers who are not interested in the experience of other languages. Let's take the most shitty technology and make it the standard. This, in short, is what I think about JSX.
Elements of the component should be as close as possible, but not mixed. And that's exactly how the Vue component is made. Javascript there just javascript, css - just css, html - just html. And this is excellent.",1526417903.0
itshotinjuly,"Vue basically perfected Angular 1, it's easy to understand, and you don't have to do fuck all to install it. I can simply drop in the cdn onto a page and get it rolling.

My preferred stack is asp.net core mvc with vue sprinkled in for ajax and animations/effects because it scales like no other.",1526411968.0
tonjohn,"As a jquery dev looking to move to something more modern, Vue was the easiest to grok and allowed me to defer learning all the tooling associated with modern JavaScript libraries.

Put it another way: I could focus on learning Vue without spending potentially hours on setup.",1526413308.0
LEOtheCOOL,"Vue is easier to integrate into 20 year old legacy codebases, and is easier to ramp up with for developers in 20 year old legacy organizations.   ",1526414226.0
edanceee,"What i love about Vue is that it has an official style guide, awesome transition + transition group component and hooks for animations, an official state management tool perfectly integrated with the debugging tool. I have nothing against Jsx but being able to use pug + sass feels really good, throw in bem and I really feel like a fucking fast dev. I enjoy developing with it more, react sometimes can get a little messy.",1526420238.0
Djbm,"I’ve worked on relatively large projects using both frameworks. Some of the reasons I prefer Vue:

 - Single file components make combining related template, logic and styles into a reusable component so easy. React does the template and logic well, but I feel it falls flat on the styles front. Particularly because...
 - You can use preprocessors like Stylus and templating engines like Pug in the single file components. I do a lot of CSS and I love using Stylus.
 - Vuex has so much less boilerplate than Redux. I haven’t looked at all the state engine options for React, but in the projects I’ve worked on with Redux the boilerplate does my head in.
 - Documentation is top notch. I actually don’t have an issue with React’s docs, but I find Vue to have the best documentation to work with.

One other thing, whenever I hit a wall in Vue and think ‘there must be a better way to do this’, I can nearly always find an elegant solution either in the framework options or via a library very quickly.

React has a huge community too, and probably even more third party plugins, but it seems to take me longer when I get stuck to find workarounds. This just might be me though.",1526451960.0
RoganTheGypo,Becuase I really like the greens the logo uses.,1526464176.0
tjlaa,"I've worked with Vue, Angular 5 and React during the last year. Here's my pros for Vue:

* It's not from Facebook, Google or any other large corporation
* It's quite easy to get started with Vue as it's more beginner friendly
* Non-technical web designers can easily create templates and styles as those blocks are separated from the code

Here's some cons:

* While learning curve is beginner friendly, it gets as complicated as any other framework when your app grows larger
* Single file components bring more problems than they solve
* Vuex state leaves all the doors open to do direct state manipulation in the components and it's mutable
* Many tools like automatic refactoring tools might not work with .vue single file components (e.g. changing names of things)
* No Prettier support in the templates (not exactly a problem with Vue though)
* Typo in the interpolated variable name in your <template>? Too bad, you won't see it until you run it in your browser and it doesn't work. In JSX you would see an error in your editor right away (assuming it's configured properly)
* v-attributes and critical conditional logic is easily hidden among other attributes. Very easy to create nasty bugs that are hard to detect. In JSX you can split this logic into smaller chunks like functions that do only one task and return JSX (and are easier to test too)
* You cannot easily use the power of JavaScript in your templates and styles compared to JSX or CSS-in-JS
* Ecosystem and the community is still rather small (same level as Angular 1)
* You see an error, you google it and you only find GitHub issues written in Chinese. Argh!
* Many amazing tools like Styled Components and Storybook are also ported to Vue but they are not widely used, they don't work too well, or they bring too many dependencies (like React)
* TypeScript support in Vue ecosystem is still not perfect but it's improving

In the end you could probably do JSX with Vue and use some CSS-in-JS tools, but why would you use Vue then in the first place as all of this works so much better in React world?

",1526576529.0
kylemh,"I wrote an article on this exact topic just expressing my opinions after using both in commercial apps.

“Yet Another React vs. Vue Article” https://medium.com/@kylemh/yet-another-react-vs-vue-article-a47b5946f1eb?source=messageShare-1d2fc657a20f-1526444151",1526444167.0
Rizens,"> I'm not trying to start a flame war or anything 

You are welcome here as long as you don't involve in inflammatory one liner.

> it feels like templates are a significant regression in terms of power 

But you did here.

Obviously you must be a beginner .

I really want to know where you got that idea that JSX is better than template , X being better than Y is purely subjective .

If you think JSX is that good I would recommend going to the repository of [Spectrum](https://github.com/withspectrum/spectrum) which is a real world application not some stuff from a Youtube / Udemy tutorial . 

The code is chaotic . Some components are declared using type some using litterals , there is no ""unique"" way to declare a component it's purely based on the developer mood / moment . 

Go ahead and look at this [component](https://github.com/withspectrum/spectrum/blob/alpha/src/components/avatar/index.js) is that what you call ""Breathing Component"" ? The code is barely readable it will take most developer a few hours to understand what's the intention behind this component and before being able to do the **least modification** because everything is ""raw code"". Is it a view ? Is it more a like a model or a parent ?

On the other hand if you look at [Vue Hacker News](https://github.com/vuejs/vue-hackernews-2.0/) the code is crystal clear. There is only one way to loop through objects , it's via directive ""v-for""  , one way to listen to events ""v-on"" etc... 

 Template gives developer a productivity that you cannot have with React and render function as well as and incredibly easy and simple code to maintain , because HTML is a markup language and not programming a language.

Meaning you are extremely limited in choices , which is exactly what we want so every time you open a component you don't spend 2 hours figuring out why the previous developer decided to use `.map` rather than `for ... of ` or why he has decided to not re-render the state when a this button is clicked etc... 

Vue abstract almost the entirety of the state with observable and it decide this for you , and in 99% of the case it will do a much better job at doing this than the developer .

>Vue would be beneficial for someone who hasn't become intimately familiar with React

And here as well.

I'll assume you have just finished something like a Udemy tutorial and obviously it promoted React + Redux as the ultimate framework or something similar. I'll also assume you don't have much experience in general in software architecture because React is no where near the best framework on the market otherwise it would have 90% market share , [but it hasn't](https://stateofjs.com/2017/connections/) .

It doesn't matter what framework you choose it's how you use them . Anyway I would first recommend you to study software architecture to make sure you understand how to compare frameworks.",1526413858.0
ataraxy,"It's personal preference, and no it's not more powerful. Just like most tools, they're only as good as the people using them.",1526420296.0
StandNTroll,"While we are on the topic of this, how is the `render()`better than template tags? I actually  prefer the template the over that. And it has a very clean separation of the HTML, css and the script. ",1526437358.0
tresfaim,"There's talk about separation of the model and data, but you can pretty much do this in react as well \- just do all your logic in functions. And you can create HOCs that act as controllers if you don't want your logic near the presentational layer. But at the end of the day, there's gonna be some logic or variable getting shoved into the html no matter what framework, because it is a JS framework you're using. 

Okay but if we have to decide between the two? Vue/Angular are perhaps better if you have designers/css peeps touching html. But they still have to learn how to navigate the code base, and when to stay from ng and vue specific template functions. 

React is great if you want the ability to fully manipulate the html with JS, and have a great amount of flexibility in using whatever JS you want, pretty much where ever you want. This is also available in Vue though... 

Honestly, I use React more because I learned it before Vue, and it's what has been used at my workplaces. If had to use Vue at work I wouldn't have any complaints. Angular might be the one framework that irks me the most, but this is mostly because they keep releasing different shades of the same \*\*\*\*. But it has a lot of stuff out of the box that makes working with others a bit more manageable from the get go. 

Angular and React for more work usage and better guarantee of developer usability. But Vue is pretty much there with the two, and is only a deal breaker if you have grumpy front end dudes that hate learning anything, but I imagine they're still pushing Angular 1.5 or Backbone. ",1526442678.0
bmarkovic,">  know Vue has JSX support, but it feels like templates are a significant regression in terms of power and an effort to bring React back to the older paradigm of file based pages rather than apps with living, breathing components.

Vue compoents are ""living breathing components"" for all intents and purposes. As someone already said, JSX is a regression back to the olden days of PHP and JSP templates that intermingle code and logic. Vue templates keep them nicely separated.

> &: selectors

I don't quite get what you mean but SCSS is supported out of the box and dealt with in compile time.

> but it seems like React is just more powerful in the long run.

Before you can get someone to answer/rebute a frivolous assertion like this you'd need to provide some arguments toward it. I don't see why anyone would think that React is more powerful in run of any length for example.",1526474405.0
raccoonranger73,"Just to make it even clearer. I'm trying to achieve what's in this codepen: https://codepen.io/artze/pen/vjVvEP

It no longer works when I use vuetify v-card in place of the 'div' in the codepen example. Any clue why?",1526532306.0
xero01,"Typically, your webserver would load `/index.html` for `/` and `/info/index.html` for `/info`. In nginx this would be part of the [`try_files`](http://nginx.org/en/docs/http/ngx_http_core_module.html#try_files) directive or in apache it would be the [`DirectoryIndex`](https://httpd.apache.org/docs/2.4/mod/mod_dir.html#directoryindex) directive. What webserver are you using?",1526405143.0
darkylmnx,"Sorry if I felt defensive, it's not the case, that's just the way I write :) Anyway, if you liked or not this article, feel free to read the others, like this response to a React fan https://medium.com/@arieldi/well-well-well-as-usual-though-i-understood-this-is-just-your-opinion-react-lovers-always-use-4f82e735c8a5 (as you can see my way of writting is the same everywhere lol) ",1526321922.0
workandfocus,"Sorry If I'm missing the point but is all that necessary? Why not just use `:value=""computedProp""` instead of v-model where the `computedProp` is just a getter?",1526306383.0
desnoth,Coucou ariel aha,1526379668.0
del_rio,"Have you tried using Webpack to separate module chunks into separate files and loading the visual flair asyncronously? For instance, have all the animations and its dependencies compiled into a fancy.js file and have Vue render a ""lite"" version until it loads.",1526308055.0
lan__solo,"Use server-side rendering, webpack's module splitting and load your bundle async in the footer. It's not really Vuejs' problem. Angular, React and every other framework will score as bad if you have a big bundle size and it takes too long to load.",1526316885.0
TheUnknownFactor,"I haven't had this experience at all. Though I haven't used it for very large sites, my personal site has a performance score of 95. What are the opportunities that lighthouse indicates?",1526373984.0
SecretAnteater,"Try separating out your larger bundles, if you can. Load the WebGL animation separately. Lighthouse does a good job breaking down where your performance hits are coming from, but you should dig into the details to figure out what that low score actually means.

I haven't run all those sties through Lighthouse, but Scrumpy's low score is due to large images being loaded off-screen (UX/performance technique), and their use of several webfonts (and hiding text until the font is downloaded, which can be fixed using `font-display`). 

Also to note, they are loading the background image behind the scenes and fading it into view once it is finished. This gives the page a nicer finish, so you never see a half-loaded image (a more app-like experience). However, Lighthouse is knocking off points because it is waiting for that image to display before recognizing the ""first meaningful paint"". 

Finally, Scrumpy is targeting businesses, who are probably looking at the site on their office/home computer with a fast internet connection, not on their phones with a 3G network. It's important to remember who your audience is because you can spend hours optimizing your site just to get some opinionated scorecard a little higher when your users might not even notice. They've clearly put a lot of thought into optimizing their site from a UX perspective, which may or may not lead to higher conversions (hopefully they keep an eye on their analytics).

---

**tl;dr:** The issues Lighthouse has with Scrumpy aren't related to VueJS, and are probably intentional trade-offs the devs/creatives made after considering their audience and UX. ",1526403800.0
brusername,"You can do the exact same thing with vue as with react.
For me it is an easy pick...go for vue.
It's a whole lot easier to get started, it's much Much easier to jump into someone elses code and the community is growing strong.",1526303539.0
wishinghand,"> It feels like React is more suited to bigger projects

I wish I knew who started this internet rumor.",1526336238.0
gabe1331,"Definitely.. Vue often get's labeled as the small project framework due to it's ease of use, but it scales well and should be considered for all size projects.",1526329374.0
euxneks,Use vuex with vue and you’ll be golden. We have made many apps this way at my work.,1526312711.0
Ariote,Both will work. React is a bit harder. I started with Vue and switched to react because i like JSX ( and it feels a bit more functional) but you take whatever you like. Keep in mind to really think about your components and keep it simple. Don't pass around your state mindlessly. I coded my first big project with vue and realized i have no clue anymore where i need to change things if i want to change things. After i  rewrote it (took some time) i reduced the codebase by 70%. So it is not a question about what library you use rather than how you structure a big project.,1526303851.0
Anoian,"I would advice you to look into asking the same question in a different subreddit, as people in this one here will highly favor vuejs.

Also look at blogposts and comparisons.

Here is my opinion after having some experience with both, but more with vue:

Vue is amazing as it is way closer to what people understand and its complexity is also progressive, which means it gets more complex the more complex the task really is, but for starting with it, you can just use it like you would use jquery and then progressively learn the technologies it uses to scale, so when you are at a point where you need it, you will have the knowledge of further technologies you will need to use and it is usually a breeze to switch to that technology.

Vue also has the advantage of doing most of its performance optimizations under the hood, so that you dont have to deal with that stuff, while react has functions like “shouldComponentUpdate“, which are not only annoying but also introduce some bugs that you couldn't run into with vue.

React has also some advantages though, which are mainly:

Bigger community - More people use React and more people write blogposts about it, make tutorials, there are more libraries for it and most examples of further technologies have examples using react. On udemy for example are courses about Nodejs, progressive web apps, typescript and so on, that all have a section “Using ... with react“, you usualy wont have that with vue, which can be an issue, but the concepts in those cases that work for React, usually also work for Vue.
Still Vuejs has a big community with many people that will help you, many stackoverflow answers regarding it and many libraries that work with it.

More jobs - More people use React, which means that you will find more jobofferings when using React, which in life is an huge advantage.

Easier Native - When you want to make native mobile apps you will have less issues with react as react native is way more mature than nativescript-vue.

In the end you have to think about what future you want for yourself or which usecases you might need, also your knowledge of es6 javascript is, can highly influence your decision.

Good luck! :)",1526363020.0
drewsmiff,I'm fairly certain that Ali Baba uses Vue and is the Asia equivalent to Google. They gained quite a bit of inertia behind that.,1526349813.0
ours,"No Angular? It seems tailored for big projects.

As for Vue, I've only done medium projects with it. But with single file components, Vuex modules, Vue Router, async components and such I think you can make a big app with it \(specially if coupled with Typescript if the vue loader \+ TS performance issue get/got fixed\).

You'll have to come up with your own scheme to organize things since Vue doesn't forces you into any particular style .",1526303772.0
tjlaa,"I think Vue itself doesn't bring much benefits in bigger projects, but React isn't any better. Both require you to think what the architecture should be and how to make it scalable, while keeping components as simple and re-usable as possible.

My personal opinion is that creating lightweight re-usable components is much easier with React, especially if TypeScript is involved.

What comes to state management, Vuex leaves all the doors open to directly manipulate the state from the components. You might want to prevent this from happening to keep the components decoupled from the application logic by using strict mode in the store. You can still commit mutations from component level though, but I'd avoid doing that. React does a better job in this as you can use the component state provided by React for component level state management if that's needed and use MobX, Redux or something else for application wide state management.

I prefer JSX to Vue templates as they can be more easily split to smaller functional components and Styled Components bring lots of power to use a custom UI component library that can be extended when needed. You can use JSX with Vue as well, but I haven't tried setting it up as I'm also using TypeScript and it makes already things much more complicated in Vue world. There is also Styled Components port for Vue, but it seems to be rather niche with only a handful of downloads. 

Quite often the reasons to pick Vue over React is indeed the single file component with HTML-like templates, code and styles combined in the same file in separate blocks. Switching to JSX would make me think why use Vue in the first place as I think it doesn't really bring any other benefits unless you want to avoid using Facebook libraries.

Tooling for Vue lags behind React ecosystem and many awesome libraries are developed for React first and they get ported to Vue much later, if ever. If Vue community keeps growing, this is likely to change in the future, but so far React ecosystem is larger than the rest combined, at least based on NPM downloads.",1526315023.0
mrcageman,"Where I work we’re currently developing a frontend for a big app with Vue. It works, but there are times when I wish we decided on React rather than Vue. 

We chose Vue mainly because most of our developers felt insecure about writing react with pure JavaScript or JSX vs the html like template syntax Vue provides. 

Anyhow, just pick whatever you feel most comfortable with. Both can handle a large application and have their pros and cons.",1526303688.0
itshotinjuly,"In all honesty, I think Angular (6 now?) is suited better for larger projects. Vue and React are both great, but if I was told to start an enterprise app with 50+ views, I'd probably choose angular.",1526336577.0
Heyokalol,"I think the answer depends on what you're trying to build. If you're building a traditional server side rendered website then passing props to your Vue component through a Blade template is the most effective way to do it. On the other hand, if you're building an SPA, then you will need to use some kind of internal api endpoints to fetch you data from.

What you don't want to do, by the way, is having your server side rendered website load a page and then fetch the data you need after the page has been rendered because it takes time for your server to render a page, and then, you also make your user wait for the time it takes your application to fetch the data you need in your components.",1526291788.0
dalore,Props for sure. Components shouldn't be accessing axios directly. You need a services abstraction.,1526297182.0
yetinthedark,"It probably depends on the type and amount of information you need to put in the modal. If it was something simple like a confirmation modal, putting the information directly into the prop doesn't seem too costly, and it could be shown more quickly. If the modal was to display a long list of data, or something that'd be more costly for the initial load, request it with Axios.",1526291959.0
achalaesh,Best way is props.,1526299408.0
irphunky,"It'll be using pushState - https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method

You could handle this really easily with vue-router and the navigation guards.",1526284358.0
kkkaspar,"I have an angularjs project and solved it there by having parallel states. For example, check this link: 
https://addgoals.com/goal/go-ziplining-23361. I’ve set “discover” page as a fallback state. Look what’s happening to the url when you close it and open another goal.

So you need to look up parallel states. ",1526300744.0
ergnui34tj8934t0,"Does it work if you use the `bind` method?

`importedGeneralKeyHandling[k].bind(this)()`

The `bind` method on a function re-maps `this` inside the function to the parameter you pass. In this case, you want it to be `this`. Hope that's at least a little clear! [Read more about `bind` here.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind)

I have no idea if this is very Vue-y, but it should work.
",1526257952.0
nkgentile,"As-is, this sounds like a use-case for a mixin.

That way you can include any data, methods, computed properties, etc that implement this protocol and extend your components.",1526272220.0
unsung_unshift,"How about a `break` in that  loop when the `if` condition is met?  And `hasOwnProperty` is overkill (and noise) when you yourself have created the object, plus [this jsperf](https://jsperf.com/hasownproperty-overkill/1) indicates it may be about 10 times slower.  All in all, this is a habit that a lot of Javascript developers need to break.",1526278893.0
kefirchik,"> Is it a good practice to request api/user each time before making other request which needs authentication?


No. Better is to make the requests you need and watch for a 401 status in response. This indicates to you that your token is invalid and you need to reauth. ",1526236493.0
Maxtream,"Make all your non\-auth endpoints ""public"". Example, if you need to have list of products for all and user specific:  

\<path\>/public/products for all users  

\<path\>/products for logged in users where you check access\_token all the time, if not logged in return 401 and on frontend do the redirect/error message/promt to login",1526279965.0
JinSantosAndria,"just do something like 

    <v-dialog lazy v-model=""show"" persistent :fullscreen=""$vuetify.breakpoint.smAndDown"" max-width=""500px"">    ",1526219598.0
Lelectrolux,"In template :

    <div @click.native=""getCoordinates($event)"">
    </div>


2 things to note : `.native` and `$event`. `.native` allows you to work with a native dom event, not vuejs abstraction of it. `$event` allows you to pass explicitly the event. I'm not sure it is needed, I think that if you do nothing (`@click.native=""getCoordinates""`), vue will still pass the event as the first parameter, but I like to be explicit in those cases.


In js :

    ...
    methods: {
        getCoordinates(event) {
            // Here you can use e.clientX etc.
        }
    }


---
What fzy_ wrote was indeed ES6 destructuring :

    let myObject = {
        foo: 'bar',
        baz: 'something',
        notNeeded: 'whatever',
    };
    
    { foo, baz } = myObject;

    // foo and baz are now variables in this scope (like initiated with let if I remember correctly)
    console.log(foo) // logs 'bar'
    console.log(baz) // logs 'something'
    console.log(notNeeded) // logs undefined
    
    // You can use this with arrays, even in depth (object in object), skip some values, or group those in a catch all variable. You can also use those in function definitions
    // With the same object
    let myFunction = function({ foo }) {
        console.log(foo);
    };
    
    myFunction(myObject); // logs 'bar'


I strongly encourage you to learn this in depth, it tends to remove a lot of extracting code, and once you get used to it, feels very natural.

I also encourage you to read about ES6 arrow functions, as the scoping and the terseness makes those very usefull. However you can't use those as methods/computed properties/lifecycle hooks in Vue, as `this` can't be rebound. But in side those, it's what make it so powerfull.

[Here](https://codepen.io/anon/pen/bMKRbV?editors=1010) is a codepen comparing full ES6 use vs basic js, where you can filter a list of results based on an input.",1526211844.0
fzy_,"Hmm, I don't know, 3 plain simple lines of pure javascript seem to do the trick quite well.

    onClick (event) {
      let { left, top, width, height } = event.currentTarget.getBoundingClientRect()
      this.volume = (event.clientX - left) / width
      this.pitch = (event.clientY - top) / height
    }",1526175512.0
skipbridge,"We pack adds a hash to them so they will change ASAP with each build. Ie. prevents the browser from showing old assets. 

In my webpack config I like to change the default pattern of [filename][hash].[ext] to [filename].[ext]?[hash]. It gets around some loading issues with certain files/calling them from css. 

But, for general images, put them into /static/ and they will behave like normal links and plays nicely with css URL calls. ",1526127236.0
higherlogic,Sometimes you might want to run your raw images through an optimizer or SVG handler too. ,1526137979.0
CaptainInsane-o,"First things first.  You do not want the comments to be fetched from that website.  What happens when they delete your data?

Just save those comment in a JS file like 'comments.js' or something and export the object then import it where you need it.

You can start the app by using the Vue CLI which is highly recommended for people new to Vue. Specifically use the Vue Webpack package.  It will have a working dev environment running as soon as the project is created..

Follow the docs to install Vue here: 

https://vuejs.org/v2/guide/installation.html

Id recommend installing it via NPM if you plan on using it for more than one app.",1526085642.0
_AdminAdmin_,"Vue-test-utils and Jest are amazing for Unit Tests. I highly recommend taking a little bit of time to try it.

 You can view Test Coverage on Vue components with Jest. (I think by default, you just need a single unit test set up for the component)

https://vue-test-utils.vuejs.org/en/guides/testing-SFCs-with-jest.html

EDIT:
As far as E2E I'm not quite sure, I have less experience in that area
",1526074919.0
mkymonkey,I get a blank page. ,1526075580.0
WHATaDEMAGE,"Right now youre using 'myData: ""IDK""', but this sets the type of the myData field. Try 'myData = ""IDK""' instead.",1526058884.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Help with configuring custom service worker using Vue plugin PWA](https://www.reddit.com/r/javascript/comments/8ioobv/help_with_configuring_custom_service_worker_using/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1526052995.0
irphunky,"Read up about `refs` 

https://vuejs.org/v2/api/#vm-refs",1526032470.0
DocileDino,"I would suggest looking into VueX. It lets you store data (like session info) in a globally accessible location. So any component can access it directly without the hassle of props and events to pass info between components.

I personally just learn to use it two weeks ago, but it's extremely easy to learn, and it's light-weight as well. If you have 80 minutes, you can learn everything you need in this tutorial series: https://www.youtube.com/playlist?list=PL4cUxeGkcC9i371QO_Rtkl26MwtiJ30P2",1525996996.0
,[deleted],1526001382.0
Maxtream,"""Properly"" if you want to use just Vue, is to pass props to child elements and emit updated to parent from child components. Which is fine when you have 1\-2 components depth. Afterwards it becomes a mess and this is where VueX comes in and you start value and understand it.  

For session info though, is it JWT? I would just use localstorage as it needs to be persistent over refresh. If this is what you mean for session info.",1526015863.0
JinSantosAndria,Vuex is not overkill if you have the requirement to share the same data between components. Thats exactly why it exists.,1526023073.0
sliver37,"For very simple cases you could always just save it to localstorage and in the components mounted hook grab it from there. 

Vue-stash is the next step up from that which allows you to save data to your root component and all other components can then access it.

Then of course vuex after that which is good to get used to but in your case, maybe stick to one of the above",1526034364.0
tristan_smith_music,"sitting right behind you in class...

Have you tried the global event bus?",1525995480.0
codechinchilla,"I'm kind of coming from the other side - I've worked on a SPA for my company in TypeScript (and a hodge podge of Polymer + other libraries) and we're doing the next version in Vue + TS.

I highly recommend using TypeScript - I find type checking is invaluable, especially for larger single page apps. You can catch tons more bugs before they become a problem, refactoring is easier, and having intellisense is really nice. 

So far Vue's support of TS is not bad, although it definitely has room for improvement (and does seem to be constantly improving). Most notably, unfortunately VueX doesn't really have a good typed solution at the moment. I imagine you'd be able to convert piecemeal, but I'm not totally certain.

As for IDE, I'd recommend VSCode + the Vetur extension. Also if you want to get up and running with a sample project, [Vue Cli](https://github.com/vuejs/vue-cli/blob/dev/docs/README.md) has options to create a boilerplate project with TS.

I'm a Vue newbie, but I've found the combo of Vue and TS good so far! Hope that helps :)",1526004635.0
kaelwd,"I just merged [this PR](https://github.com/vuetifyjs/vuetify/pull/3837) into Vuetify. We've only converted a couple of components to TS so far, but everything's been pretty painless other than trying to figure out how to get mixins working properly. You can port incrementally too, we have the entire build going through tsc without any issues. ",1526033236.0
Maxtream,"Depends on the code, but there should not be any problem in transitioning, TS is superset, so if you port your code from JS to TS it should work out of the box.  

It's like porting plains CSS into SCSS. You can port it with no harm and then start to use TS features as you go and developer new stuff/refactor old stuff.",1526021694.0
thexerdo,Primis aqui también!,1525999447.0
1makfly,Very well done. I really like how the number input field is presented.,1526257371.0
JIMETHYRUMPLEKINS,"This sounds like the right approach, make API calls via vuex actions then commit the response data via mutations.",1525989382.0
WOLV04,"Haha, liiit",1525967431.0
clickclickboo,"I don't know WTF I just looked at but...



WELL DONE!!!  hahahaha",1525976151.0
DanubeRS,Perfect for those error messages!,1526007898.0
Sphism,load the explosion before you click it... otherwise there's a noticeable lag,1525990853.0
killerbake,"~~Works on mobile only in desktop mode. ~~

This is awesome. :)

Edit: cache wipe fixed it. ",1525978014.0
syropian,"I feel like you probably didn't look very hard but:

- https://vuejs.org/v2/guide/single-file-components.html
- Using Rollup: https://github.com/vuejs/rollup-plugin-vue
- Webpack: https://vue-loader-v14.vuejs.org/en/
- Browserify: https://github.com/vuejs/vueify",1525964681.0
fightingpirates,I appear to have fixed it by upgrading to vue-loader v15,1525949598.0
juzten,"I feel like it's a bad idea as it's coupling the two applications together, but until a certain point does that really matter? What benefits would I get from decoupling the two and serving Vue with Express or by an Nginx proxy?
",1525915062.0
Cheshamone,"You could probably accomplish this using dynamic components: https://vuejs.org/v2/guide/components.html#Dynamic-Components. All you'd really need is a list of component names to chose from and then you could just track an array of the components they've added and loop over it and dynamically pull in that component. Something roughly like:

    <template>
    	<div>
    		<select @input=""addedComponents.push($event.target.value)"">
                <option :value=""name"" v-for=""name in allComponents"" :key=""name"">{{ name }}</option>
            </select>
            <component :is=""name"" v-for=""name in addedComponents"" :key=""name""></component>
    	</div>
    </template>
    
    <script>
    export default {
    	data() {
            return {
                allComponents: ['my-component', 'awesome-component', 'third-component'],
                addedComponents: []
            };
        }
    }
    </script>

You'd probably want a more user friendly dropdown, etc, but that's the basic idea. I haven't tested it so I probably made a dumb mistake somewhere too, lol. Keep in mind that you will also need to import all the components somehow or have them registered globally or something.",1525916613.0
sir_eeps,"I wrote a [blog post](http://blog.rangle.io/how-to-create-data-driven-user-interfaces-in-vue) about this a while ago walking through dynamic components. Going from a simple example to building a dynamic form.

",1525955262.0
Zetaphor,"I can't speak to your specific implementation, but I've done something like this a few times:

Say you have an array of objects, in your situation this would be the collection of props for each component. You would iterate through the array, check a property that defines which component to use, and then insert that element into the loop.

Here's a code example:

    <div v-for=""(item, index) in arrayOfObjects"">
        <component-thing v-if=""item.type === 'component-thing'"" :specific-props=""item.specificProps"" />
        <other-thing v-else-if=""item.type === 'other-thing'"" :other-specific-props=""item.otherSpecificProps"" />
    </div>",1525913245.0
behaaki,"You can dynamically insert components using the `component` tag \([https://vuejs.org/v2/api/#component](https://vuejs.org/v2/api/#component)\)

Eg, `<component :is=""div""></component>` will make a `div`.",1526091141.0
jemminger,"Vue is only a view rendering library.  You'd need some server-side library to connect to your database, e.g. https://github.com/tediousjs/node-mssql",1525908221.0
dballz12,"Still expensive to me... not tooting my own horn, but I have been working on a vue app at work that has some advanced capabilities as it relates to data and service calls and I have gotten by with the standard vue guide and other online resources like vue mastery and vue forum. Is this course worth the price? What can it teach me I can’t find elsewhere? ",1525905547.0
darkotic,"I've purchased some of Adam's courses in the past, and he's a great teacher.  I don't do much with vue yet.  If you're doing anything with vue, this is probably well worth the price.",1525908548.0
Cheshamone,"Yeah, he just released it this morning. Highly recommend checking out his youtube channel first if you've never seen his stuff before: https://www.youtube.com/channel/UCy1H38XrN7hi7wHSClfXPqQ/videos. He's got great stuff, definitely worth purchasing yourself or seeing if you can get your company to buy it for you.",1525917038.0
stuckinspace,"Sorry to be that guy but this is straight up shameless self-promotion. It’s not even trying to hide, just a link to the main sales landing page. ",1525901564.0
pyran1208,"With webpack you can achieve that exactly relatively easy. Where did you struggle or what were the Problems you had?

Also why did you needed gulp anyway? Maybe you can explain your use case and current structure a bit more?",1525895730.0
enteleform,"[**gulp-concat**](https://www.npmjs.com/package/gulp-concat) & [**gulp-sass**](https://www.npmjs.com/package/gulp-sass) to merge your JS/CSS files, paired with [**[js, css, html] > vue**](https://github.com/vuejs/vueify/issues/35)?",1525895826.0
achtung82,"Webpack seems the best tool for this. To import the scss files just import the scss file(s) from your js and make sure to include a sass loader in your webpack config. Or if your using .vue files, include the index scss file from your root .vue component in the style part:

    <template>
        <div>
            //content
        </div>
    </template>
    <script>
       //scripts
    </script>
    <style lang=""scss"">
        @import ""./Styles/index.scss"";
    </style>

Also make sure to select extract css in the vue-loader:

    {
        test: /\.vue$/,
        loader: 'vue-loader',
        options: {
            extractCSS: true
        }
    },",1525898130.0
mc7263,"Have you tried poijs? 

https://poi.js.org/

Created by one of the contributors to vue.  Built on top of webpack, has good asset management, as well as watch and hot reload.  Very configureable.",1525895756.0
rackmountrambo,This is what Webpack is for. RTFM,1525897626.0
OmegaVesko,">w would theese communicate .. throught some rest api (json) sent from backend to vuex?

Yes, the frontend communicates with the backend via an API. This could be a typical REST API, it could be GraphQL, whatever.

>We currently have everything in spring, sending .jsp pages to frontend. Is it possible to start to revrite theese jsps to vue so some urls would be in vue and some in jsp .. and piece by piece migrate whole app?

You could, and there's multiple ways you could do this, depending on the structure of your app and what you want to do. 

The ""standard"" solution for this is to have something resembling the [strangler pattern](https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler), where you essentially have a new Vue-based frontend that serves some pages, and the legacy app that serves others.

On the other hand, given Vue's flexible nature, you could also start the migration by just including Vue in the pages currently rendered by your backend, and then converting as much or as little of them to Vue components as you like.",1525865296.0
syukhnevych,"If I were you I would start from *Easier data/JS management: Filtering, displaying, etc,* by implementing components \(e.g. data table, graphs, chat, etc.\) for your app step by step and then you can start making SPA and working towards *Improve page load time feel \(no refreshing on going to a new page\).*

One of the best thing of Vue.js, as for me, that it can be used standalone, so you can put it on a page and create some reusable components.

By doing so you will slowly migrate you existing application to SPA.",1525856517.0
getsiked,"If i'm understanding what you are getting at correctly, you are looking to add routing to your application, this may be what you are looking for.

https://router.vuejs.org/en/essentials/getting-started.html",1525837990.0
Lelectrolux,"FIrst, if you just want it feeling like url, but don't care for actual ones, using vue router in hash mode (the default) is the easiest. It would just replace the first slash after the domain with a hashtag

* domain.com#about 
* domain.com#my/nested/page


If you use one of those in the browser url bar, vue router should find the coresponding component on load.


If you do need actual urls use vue router in [history mode](https://router.vuejs.org/en/essentials/history-mode.html). Then you'll have to include a webserver in the picture (what are you using for hosting ?), telling him to forward all request to the index.html file if it doesn't match a js/css/img file. In the same page, there is example of server config to achieve that. You don't need all of them, just pick the one corresponding to your server, eg the apache one or the nginx one.


You definitly don't have to use Server Side Rendering for that. It only improves SEO and initial load speed. The only reference to SSR in that doc page is to deal with 404, again for SEO improvements, you can still deal with them without SSR.",1525847754.0
irphunky,"You need to setup your webserver to rewrite URLs to your index page.

This will differ dependant on how your hosting the page.

If you want nice URLs then you'll also need to enable history mode of vue-router.",1525847899.0
TheBroox,Put it in a mixin,1525839763.0
Lelectrolux,"Depends of how much and what is duplicated.

If it is just a `parseDate(date)` function with no assumptions about the component, just create either a `helper.js` and export `parseDate` out of it, or a specialised `parseDate.js` and export default.

If it has at any point a reference to `this` where `this` is a vue scope (eg access data fields, call other methods, use `$emit`) then create a mixin, as it has no sense by itself.

And if you want to go all the way, import a pure js `parseDate` function to do all the pure js work in a `ParsingDateInputs` or whatever mixin which you would use in your components. That way, if you need to reuse the base function without the mixins assumptions you could do it easily.",1525858168.0
gevera,"I do like Vuepress. However, it is not straightforward how to use in it an external library like Vant or iView. Also, it is limited in comparison with Nuxt.",1525879071.0
keyeja,I dont have a specific link but have a look at „fetch“ for making http requests to your api. ,1525815646.0
renoirb,"No tutorial.
But better, a working project starting point.

Take a look at https://github.com/clarkdo/hare

It's Nuxt and Koa running side by side, session cookie is created server side by Koa (HttpOnly cookie) and then the browser passes the cookie back to Koa at every requests.
No authentication handling from Nuxt.

It took me weeks to understand and appreciate it all.",1525868352.0
fessacchiotto,Hello! Does your site have a RSS feed to subscribe to?,1525804731.0
,[deleted],1525821962.0
theL3g3ndOfZack,"This is great.
Keep it up!",1525822670.0
greenskyx,Looks great. Just the sort of thing I'm looking for. Does your site have an RSS feed?,1525833259.0
parth115,How about setting up a mailing list? Similar to [Import python](http://importpython.com),1525847894.0
it_is_me_irl,"Looks great! I would love to see more of this type of content.

What sort of schedule are you planning on releasing this on, if any?

I will keep an eye on it and send them round to my dev team, as a number of them are learning Vue, and enjoying it so far.

And lastly, just to add a small tweak with your ES6 - you can return an object literal using the concise body syntax by wrapping it in brackets.

So where you've written

    const getDefaultState = () => {  
      return {  
        items: [],
        status: 'empty'
      }
    }

You can instead write

    const getDefaultState = () => ({
      items: [],
      status: 'empty'
    })

You may know this already, but thought I would mention it just in case you didn't, and in case you prefer it instead of the long form. :)",1525858100.0
ReactDOM,"Nicely done! If anyone's interested, here's more [Vue.js tutorials](https://reactdom.com/vue) ",1535398560.0
Bold3In1MuthaFucka,"I thought your articles were great, your site looks clean and professional. The one thing I'm not so keen on is not using semi colons in your code! Coding without them is of course possible but there are several caveats and it's best to simply always use them to avoid bugs. I mean obviously feel free to do what you like in your own projects but I think a set of articles that seeks to educate should use established best practices. ",1525805450.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [How to build SPA with Vue.js - r\/Vuejs](https://www.reddit.com/r/javascript/comments/8hvyw0/how_to_build_spa_with_vuejs_rvuejs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1525779405.0
bustermente,How is the number determined? ,1525693108.0
josh1nator,"Wouldn't a computed property solve that? Just let the computed property do a bunch of  [substrings](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on your string (and return each column as entry in an array and create the table in your template as usual based on this array (is probably an array of arrays to get rows& columns, but same idea)).",1525757785.0
changsijay,"why the most star repo isn't list inside?
https://github.com/PanJiaChen/vue-element-admin",1525684313.0
smartapant,Great to see Vuestic here :),1525693053.0
irrg,"What is exactly the point of these kind of projects? I always build a dash with just the things that we *need* to *see*, not stuff that's there because it's in a boilerplate. ",1525977871.0
jeweltheme,"A great source of Vue.js Admin Templates: https://vuejsadmin.com
",1531140988.0
unsung_unshift,"If it's something that can churn out JSON, what does it matter?",1525644508.0
clasic_krap,"Thanks very much, I was looking for more information regarding the choice of a backend framework with Vue.js, and wanted to use rails from the start. Considering the microservices method architecture from Rails.  ",1525649546.0
hmaddocks,What ever you are most familiar with.,1525658917.0
N3KIO,Axiosjs,1525609986.0
Inglishmn,"Probably a random place to ask this but hey,l et's see who's reading. I work in system eng in a big way,  I could literally be physocally wiring a 24v supply to I/O one minute and working on a Vue/frontend framework the next. I have absolutely no idea how to make proper https calls over web from an enterprise environment... Within the environment is fine but out on web, clueless...

Let's just say ""IT"" and engineering are very similar physically but functional requirements are different. I collect data from a PLC/IoT type device which, 'in thoery' I can relate to a peice of information on a Aws/azure dB/backend. Beyond.needing to know the URI of a end point, what JS library is capable of this? Node Https? Do I need to be closely aligned with the VPN/proxy team? I know corporate proxies are likely different everywhere but any kind of light on what info I would even need would be amazing.",1525643321.0
Lelectrolux,"Never use arrow functions for methods or computed properties. Vue can't rebind `this` for you with arrow functions, that's why `this.todos` isn't found, and returns undefined. When you call `this.todos.push()` it calls `undefined.push()` which obviously won't work.


Look into arrow functions vs base functions to understand the differences of scoping.


Here is a jsfiddle with a number of comments about that and other things : https://jsfiddle.net/99cdxreu/

EDIT: updated js fiddle to use v-model and v-text


EDIT2: removed dead code and prevented empty todos",1525557471.0
imposter_oak,"Also, your checkbox can be optimized a bit by using v-model to replace the v-on and v-bind. ",1525554081.0
imposter_oak,"Can you paste the error? I think your reference to ""this.data.todos"" should be ""this.todos"" but not sure considering I don't know the error. ",1525554031.0
LEOtheCOOL,data must be a function,1525554015.0
wangyi7099,"You can't use arrow function for your methods,  because this in your arrow function will point to its parent, i.e. window.",1525570367.0
Lelectrolux,"First by no means vuex is to be used in every project. I needed it in only once in my five last sites.


Vuex exists to answer a simple problem : data used in more than one (not easily related) place (like not direct parent children where events can do the trick just fine) and where data changes get hard to track.


I always start without it, and if pain arise, get it set up. But even when you use it, by no mean put all data in vuex store. As long as only one component need a piece of data, don't put it in global scope, use the local data object.


Some red flags pointing to a refactoring to vuex :

* passing the exact same piece of data through props several level of depth when the intermediate doesn't need it (parent -> child -> grand child) (provide / inject is sometimes a better answer than vuex, as well as scoped slots)
* When 2 components need to act on the same data (not just display, modify it) and they aren't in direct up down line (eg events and props wouldn't work without involving a parent to both of those components)
* When you are lost about from where some data was changed


I always wait to feel like I making a mess to refactor as vuex does add a bit of complexity to a powerfull and sane way of doing work.",1525559629.0
dave__stewart,"This post might be useful to you as well; it discusses normalising complex data:

https://forum.vuejs.org/t/vuex-best-practices-for-complex-objects/10143",1525617776.0
defunctAI,"There is nothing difficult about vuex to understand imho, at least as far as I understand it and have been using it for the past year. Just think of it like sessions or cookies to store whatever you want. I don't know about models in vue, there is no model unless you are referring to the data: {} object, which is a simple object that you use to reuse, but as far as vuex is concerned it is just a state holder like a session/cookie",1525551551.0
tjlaa,"As the store is not persistent (page reload resets the store), you might not want to rely on it in storing access tokens. You need to put them in sessionStorage or cookies anyway.

These are all vulnerable to scripts that have access to the page, e.g. malicious code in a browser extension, a script included on the site from a CDN, or an XSS vulnerability.

The main thing would be to prevent XSS and also Cross-Site Request Forgery (CSRF). Don't include code from untrusted sources and always validate any user input. ",1525545159.0
cheeseboythrowaway,isn't this what cookies are for?,1525554311.0
Lelectrolux,"Secure Cookie (https only) is the only good answer, as it is safer and with a smaller attack surface than localStorage and the terrible indexedDB. Cookies are also the most battletested and verified frontend storage piece you can use. Anything else is less secure, it isn't a basic block of http for nothing. But it still isn't good enough if you don't take extra care against xss as someone could still use your csrf token to get to your server.",1525560250.0
dougalg,"With a bit of fiddling, this seems to be what you're looking for:

    // main.js
    import Vue from 'vue'
    import App from './App.vue'
    
    Vue.config.productionTip = false
    
    window.Apppy = {
      init(API_KEY) {
        new Vue({
          render: h => h('app', {
            props: {
              apiKey: API_KEY,
            },
          }),
          components: {
            App,
          },
        }).$mount('#app')    
      },
    };

    // HTML File
    Apppy.init('woooo');

    // App.vue
    export default {
      name: 'app',
      props: [ 'apiKey' ],
    ...

Another (maybe better, depending on your needs) option would be to use Vuex, and initialize the store with some global data from clients that you just access from `window.coolConfig` or whatever

EDIT: Formatting",1525553746.0
theLorknessMonster,"Since u/dougalg seems to have solved your issue, may I suggest HTML5 custom elements instead?",1525578636.0
whofromwhere,Was going to look for a draggable component tonight. Thanks for finding it for me! ,1525541661.0
bmarkovic,"Actually this got borked couple of versions ago, at least in my case. Intellisense used to work in .vue and then it didn't. I just couldn't be bothered to figure it out as a lot of my actual work is in Vuex and Node .js files where it still works. ",1525555041.0
pkej,I guess there is some kind of handler for .js that you might be able to point to .vue files. File a report with Vetur. Best of luck. ,1525510818.0
getsiked,"Forgive me if I misunderstand, but why aren't you using Vue.js [built in](https://vuejs.org/v2/guide/events.html) Event Handling?

",1525509491.0
kitsunekyo,did you try vetur?,1525510007.0
RealPatience,Switch tot Typescript 😉,1525514492.0
hmans,"Black Speech, the language of Mordor.",1525513282.0
lokomotivan,What's up with the frameworks obsession? You should leave frameworks alone and first learn JavaScript and ES6.,1525508186.0
Droid2Win,"I'm gonna echo what everyone else has said. VueJS is written in plain old ordinary JavaScript. If you're using the Vue CLI and single file components, it basically requires the newer ES6 JavaScript features. Focus on that stuff first, then it'll be easier to understand Vue.",1525524823.0
GoogleMac,I will say Vue isn't too hard to get into if you know a fair amount of JavaScript. Laracasts is a great place to start. ,1525549749.0
_sirberus_,"You've got the skills you need, jump into vue now.",1525510650.0
jezmck,Look into JS vs ES6 etc.,1525506863.0
getsiked,"Look into Github Pages:
https://pages.github.com/

If you are using Vue Cli I found this package super useful in conjuction with Github Pages
https://github.com/KieferSivitz/vue-gh-pages",1525490608.0
tristanAG,"GitHub pages is a great option. Really, it’s just like hosting static html. If using Vue-cli, an npm run build will bundle everything up nicely for you 👍",1525496812.0
laissezfart,Netlify.com !!,1525512244.0
drewsmiff,It is not different than hosting a static site. I prefer S3 behind CloudFront. If you have a backend I prefer api gateway to lambda.,1525493822.0
VanGrim,"You could use [Heroku](https://www.heroku.com/). There're serveral Tutorial to describe the deployment of Vue JS Apps to Heroku. Like [this](https://medium.com/netscape/deploying-a-vue-js-2-x-app-to-heroku-in-5-steps-tutorial-a69845ace489), or [this](https://medium.com/techtrument/deploying-a-vuejs-standalone-app-to-heroku-aa95820cc49a). Basically you would use Vue CLI and use the 'yarn build' / 'npm run build' command to bundle your app to static files in /dist. You can easily register this folder as subtree for your Heroku Repository and publish it. Only downside is, that you need some sort of ""server""-File (like in the first example)... but you're not limited to nodeJS. You could use GoLang too. ",1525502301.0
irphunky,"If your using vue-cli its really simply...

https://github.com/Phunky/markharwood.info/blob/master/buildspec.yml

It was more trouble getting cloud formation to invalidate content...",1525503709.0
_sirberus_,You seem to be asking for a diff tool but saying that a diff tool is insufficient.,1525487218.0
NotFromReddit,"I use Laravel with Passport.

[Passport](https://laravel.com/docs/5.6/passport) handles your OAuth authentication.

Laravel's [Eloquent Resources](https://laravel.com/docs/5.6/eloquent-resources) handles formatting of responses. Other frameworks call this technique Transformers.
",1525478623.0
MrNate,"I'm creating APIs in ASP.NET MVC on .NET Core 2. It's quite a bit of fun. The framework is great and the c# language is clean. Also, it's insanely fast.",1525487572.0
Ty199,I like it clean and simple with express,1525479653.0
inhalingsounds,Nuxt has a starter template that bundles with Express. Can't get any better than that.,1525483352.0
GoogleMac,"Laravel all the way! If you pass the data right, there is no 'translating' variables.",1525487997.0
Schmoopi,Laravel! They play together so well and vue is already included on a standard install. Win win... I am pretty sure there are some free tutorials / videos of implementing the two on laracasts.com that are extremely quick and to the point that do a really good job at showing off how powerful the two are together. ,1525489298.0
clasic_krap,"Ruby on Rails, with microservices method",1525542615.0
devsebbe,https://nuxtjs.org/ ,1525482993.0
SepticReVo,Express.js is a great framework to pair with Node.js ,1525480132.0
hovercraftii,"I recommend using a graphql stack. A combination of apollo-client, yoga-server (a ready to go mix of express and apollo-server), and Prisma. Check it out here: https://www.howtographql.com/graphql-js/0-introduction/",1525467751.0
Sphism,Depends on the project but you can't get much simpler than Sails.js,1525513413.0
yippiyeah,"Feathers.js, simple api and real-time by default!",1525518982.0
kitsunekyo,"i can only recommend express.

there are also a few ""prebuilt"" solutions that will save you some boilerplate work. so far i've found KeystoneJS and Strapi (this one looks sweet)

in the end it depends on your usecase. you could just have an api that allows you to interact with data on the db.

or you could have a complete cms solution that has a frontend to edit your backend data. then another frontend (or frontend section) which is public and contains your app/site.

i've seen some people successfully using node with the wordpress api. this also looks nice. i've built our enterprise CRM backend on laravel a few years ago. but now i tend to move from php to JS (or anything that is not php), as php as a language and ecosystem feels broken, resource heavy and juvenile. ",1525522278.0
zenw0lf,"If you are looking for a beautiful technology, I can recommend Elixir (as language) and Phoenix (as backend). In fact that's exactly what I'm using for a new project.

If you want to look at a tutorial to jump start a JSON API for your Vue.js frontend, look no further:
https://lobotuerto.com/blog/building-a-json-api-with-phoenix-and-elixir/

And I'll just leave this here:
https://lobotuerto.com/blog/quickstart-guide-for-a-new-vuejs-project/

Those are basically my notes on my tech stack migration journey: From Rails + Angular to Phoenix + Vue.",1525534516.0
fake-love,Take a look at [https://loopback.io/](https://loopback.io/) dude,1525470594.0
cyanydeez,Postgres with postgraphile would be my choice. ,1525477513.0
Droid2Win,"First of all, I'm a veteran of Vue but I'm still only decent at Vuex. That being said, I have some advice.

1) Never directly access the Vuex state. The whole point of Vuex is to provide a mechanism of controlling access to that state, and getters are how you should read the state. By the same token, never directly access mutations, use actions instead.

2) Never put Vuex getters as data variables. The fact is, Vuex stores your mutable state, and data properties aren't reactive enough for that. Someone else can probably explain it better.

3) Computed properties are your friend. Definitely put them into computed properties, it's not overkill, it's the recommended approach.

    computed: {
    	myGetter1() {
    		return this.$store.getters.myGetter1;
    	},
    	myGetter2() {
    		return this.$store.getters.myGetter2;
    	}
    }

4) Use mapGetters to make your life easier. Vue provides a handy function called mapGetters that you can import:

    import { mapGetters } from 'vuex';

And that will automatically add your getters as computed properties, like so:

    computed: {
    	...mapGetters([
    		'myGetter1',
    		'myGetter2'
    	])
    }

The strings in the array are the names of getters in your Vuex store. The spread operator (...) is used to add them to the computed object after mapGetters resolves them.

You can also rename them by passing an object instead of an array:

    computed: {
    	...mapGetters({
    		renamedGetter1: 'myGetter1',
    		renamedGetter2: 'myGetter2'
    	});
    }

Using this approach I haven't had any issues keeping my data all sync'd up.

I hope this helped.",1525464439.0
GoogleMac,"Are you talking about components or component libraries? You can definitely use many components- that's the point. 

As far as libraries go, you can use many, but if they have styling differences, your site might not look as smooth. 

Here's a couple to check out:
- Vuesax
- Vuetify",1525441856.0
YourCupOTea,"It feels a bit light on the results.  For example the form input and class bindings pages: maybe add some gifs or vue comonents on the page that show results (like the official documentation).

Also I would avoid talking too much about the internals (lifecycle) and put more of the cool results type of stuff up front (loops, class bindings, form handling).

Otherwise, it looks very nice!",1525438388.0
RealPatience,"When we were deciding on a framework at the company I work, we already knew we needed a framework. Our main question was ""why Vue instead of..."". Some obvious competitors are React, Angular, etc. Pick a few popular options and show why you think Vue is a better fit for your company.",1525429374.0
watMartin,"Will need to see your codebase honestly, do you have a repo you can link?",1525377759.0
AmazeCPK,"Your question should be 'Is it okay to use multiple CSS framework libraries in the same project?""

You're fine with doing so, just make sure to import only the component that you need, so that users aren't downloading the entire CSS library for a single component/element.

",1525366031.0
akmikhail92,"I’ve always recommended importing just the CSS, and using the CSS within your own custom components. Using component libraries like bootstrap-vue make it much harder IMO.",1525366455.0
cyanisis,Yes,1525365397.0
i_mahe,"Use 'hash' mode instead of 'history' mode,  else you need to configure that in server.

Check this official doc for more info [https://router.vuejs.org/en/essentials/history\-mode.html](https://router.vuejs.org/en/essentials/history-mode.html)",1525359999.0
pandemi,"If it's only one component it doesn't make a huge difference having it in the component or store. If multiple components call it then store is the better way.

However, in the store it should not be a getter. Rather it should be an action where you commit the mutation. Getters are for retrieving data from the store. They should not have any side effects.",1525350741.0
lucuma,Thanks. I've been looking for something like the hotel one. ,1525354255.0
TREYisRAD,"I've been happy with the one included with Element. [http://element.eleme.io/2.0/#/en\-US/component/date\-picker](http://element.eleme.io/2.0/#/en-US/component/date-picker)

Not sure if its able to be installed as an individual component outside of the framework though.",1525356550.0
dougieled,I found vue flatpickr quite useful! ,1525390247.0
in0pinatus,"""All date pickers suck. This one just sucks less.""",1525410229.0
LloydAtkinson,"The irony of this being a website about Bootstrap which infamously has still not implemented a date/time picker.

Also quite poor to not include IMO the best one: https://github.com/ankurk91/vue-flatpickr-component",1525446666.0
boblauer,"I'd probably use a `v-if` bound to the value. If `!0`, render your `input`, otherwise render your image. You'll just need to provide a way for the user to change the value when rendering the image, so that they're not stuck on `0`.",1525293136.0
sgoogler,"Really useful for me, what I am looking for.",1525323572.0
rk06,"
You need to share the code ehich is causing the issue.

For faster results, create a github project which reproduces this issue.",1525245219.0
acklavidian,"Its really not enough info to properly diagnose the problem. However, it seems that you are suspicious of how you are retrieving data sources/files/videos. I would be more suspicious of the state of the application in memory. It sounds as though your previous video component might still exist on the page and your player control events are handled in an ambiguous way. ie: Your play button event is triggering propagating through multiple video components and triggering video playback for hidden/offscreen elements.",1525278345.0
BRBoer,What build system are you using?,1525235457.0
thomasswilliams,"Have a look in config/index.js \- has webpack ""index"" and ""assetsRoot"" properties in there for me \(using Vue CLI v3\)",1525238091.0
danstansrevolution,I think you also have to remove the / in each src and link for github pages. Have you run into this issue and do you have a webpack solution for it?,1525309382.0
evilpingwin,"Netlify is great. 

Downsides? It's static hosting, kind of. They have an API for 'forms' (for handling form submisions), 'functions' (cloud functions via AWS Lambda) and 'identity' (for auth) if you need a lot of requests then you'd need to upgrade but even the free package comes with generous limits. 

Short verison: if you need control over your server or have a backend to host then it obviosuly isn't going to work. It's basically static hosting with bells and whistles. Powerful bells and whistles but still. If your front and backend are decoupled you could obviously host your backend on a real server and use Netlify for your front end, depends how you've built things.

Advantages? Its free. Hosting, custom domains, one-click lets encrypt SSL, automatic asset optimisation, automatic SSR, global CDN, CI/CD. If you use netlify DNS you can set up new domains with one click too (it's in beta but I've found it to work just great). If you build fron a github/gitlab repo (public or private) you can trigger automatic builds when you push to a specific branch on the repo (you can also setup other branches to do the same for, say, a dev build/staging server or whatever). It simple to use and really quick to get set up. I like it because I really cant be bothered managing my own servers, I'd rather delegate to experts with endless resources for that shit.

The nature of your applications will dictate whether or not it will work. The performance is second to none really but it isn't the same as heroku or DO droplets or w/e as you simply have zero control over the server and cannot host server-side assets (not in the traditional sense) so if they're traditional webapps, it's a no go. I doubt you'd be able to get comparable performance  by going it alone unless you invested a lot of time and at least some money (probably a reasonable amount) and really knew what you were doing on the devops side.

If you give more information about the sites/apps you wish to host (the respective stacks) then people can give you a more concrete answer.",1525217780.0
bobbytuck,"I love Netlify. I have 10\+ Vue projects hosted there \-\- Vue CLI projects as well as Nuxt \(generated\) projects.

Netlify is \*fantastic\*.",1525215940.0
anarchos,"I'm making v2 of a project that uses Vue and have it hosted on Netlify, and have no issues!  I use it as a simple CI/CD as well.  It just builds pull requests automatically, and I have a testing. Url.com setup to build the testing branch of my project.  It really is pretty incredible how easy and seamless it all works for me.  

V1 uses a semi complex docker setup.  Now the API is a lambda function, and all I have to take care of is the Postgres db...and I'm contemplating taking that to a hosted solution as well.  Free lambdas, free Netlify, $5 instance for the db... Incredibly powerful and cheap!!",1525281094.0
N3KIO,"if you know how to build and deploy, you don't need it, you can just use something like docker with gitlab cli.

Especially if you own your own VPS server, simple plan is like $5 per month.

* https://www.vultr.com/pricing/

The catch is, you need to know basic sysops, which most people do not know how to, that's what Netlify solves.",1525206250.0
RoganTheGypo,"This isn't really the nature of a doc site. The idea is \(generally speaking\) that its easily accessible and easily created \(So you are more likely to create documentation to a decent quality\)  If you want to protect the routes in your site you can do this with the vue router but I don't think VuePress is that elaborate bud.  

One way to do it is create the documentation site with VuePress. Copy and paste all the HTML thats created then make them in to vue components in your vue app... No one will ever know ;D",1525291533.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/vuepress] [Access VuePress docs from within a VueJS app?](https://www.reddit.com/r/vuepress/comments/8kogys/access_vuepress_docs_from_within_a_vuejs_app/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1526767704.0
MrSmutje,Nice I like it! Did you use any css framework?,1525192102.0
EffectiveTrouble,Looks very nice! how did you create the thing with the tags in the form?,1525202425.0
wyrmwud,I use this everyday now!  Did you see that the API you are using is going to be taken off line? https://coinmarketcap.com/api/  Thanks for putting this together!,1528822486.0
MaresDoOrgasm,This is awesome! Why the hell isn't Vuex's API like this?,1525196378.0
N3KIO,"I would say you need a live practical example of app using this setup to show what it can do

Something like 

* https://github.com/vuejs/vue-hackernews-2.0

* https://github.com/nuxt/hackernews

other then that I like it",1525192269.0
pearofducks,"Looks great, is there an example of a state mapping with an array?

Example:

    addresses: [
      {
        zip: '12345',
        town: 'Foo Town',
      },
      {
        zip: '54321',
        town: 'Bar Town',
      },
    ],


Then doing `<div v-for=""address in addresses"">` and accessing zip/town for each?",1525190854.0
enteleform,"As someone new to Vue & exploring it's ecosystem, it would be very helpful if there was a simple example that shows a side-by-side comparison of plain Vuex VS Vuex Pathify.",1525809158.0
bmarkovic,"I'm a bit thick right now. This essentially auto writes mutations and state reads, you still can have ""DB view"" style getters and actions?

Does it have some neat mappings to instance methods and computeds? ",1525205969.0
syropian,"This looks awesome! I’m on vacation at the moment, but really looking forward to trying it out. ",1525265364.0
c_pepin,"Really cool.  OP, can you use any array/object function using the '@' syntax?  For example, could I do something like 'items@map'? ",1525284002.0
Robodude,"I'm loving what I've seen so far. Can you perhaps consider this?

Suppose I have: 

    actions: {
        ...actions,
        async loadEventsAsync({ commit }) {
            const events = await self.eventsRepository.getAsync();
            commit(""SET_EVENTS"", events);
        }
    }

Am I required to to use commit here? I think it'd be really cool if the context object ({ commit }) had pathify get/set available to it. Am I just not 'getting' something?

I would prefer not to introduce the cognitive load of 'knowing' how the mutations are setup by pathify.

    actions: {
        ...actions,
        async loadEventsAsync({ set }) {
            const events = await self.eventsRepository.getAsync();
            set(""events"", events);
        }
    }",1525462790.0
dave__stewart,"Version 1.1 is now out!

*### Added*  
**\-** Ability to create new sub\-properties on the fly  
**\-** \`call()\` helper to map actions using the same syntax as \`get()\` and \`sync()\`  
**\-** \`registerModule()\` helper to register wildcard members for dynamic modules  
**\-** State can now be passed to \`make.\*\` as a function  


*### Changed*  
**\-** Wildcards can now appear anywhere in the last segment of a path  
**\-** Wildcards targeting module properties must now be explicit, i.e. \`foo/\*\` rather than \`foo\*\`  
**\-** \`deep\` option format is now 0: disabled, 1: read\-write, 2: read\-write\-create  
**\-** \`deep\` option can now be changed at any time  
**\-** \`Payload#update()\` now **\*\***retur**ns**\*\* the updated state, rather than updating the passed state  
**\-** Unknown modules now throw error rather than log to console (for Nuxt compatibility)  
**\-** \`sync()\` now reads only from state and not getters  
**\-** Removed \`only\` parameter from \`make.\*\` helpers; function now takes single \`state\` / \`keys\` parameter  


*### Fixed*  
**\-** Invalid computed property paths now return empty functions  
**\-** Fixed bug in sync where invalid paths would cause error message to error  
**\-** Fixed invalid wildcard bug which caused Nuxt to bomb  
**\-** Fixed setting of sub\-properties when using mutations **\*\***an**d\***\* actions  
**\-** Vuex getter functions now return as functions not values for computed properties  
**\-** Fixed bug with module\-level wildcard get() not returning getters  
**\-** Fixed error message displaying original package name  


*### Removed*  
**\-** Removed component helpers set() function  
",1528581222.0
andreiglingeanu,"Please beware, this post uses JSX in Vue, which may be a bit counter-intuitive :)",1525174306.0
dave__stewart,"Yep, have downloaded and installed it, then went through the docs start to finish, testing its various configurations and features.

It's definitely going to be core part of the Vue ecosystem, especially for those who want to write docs.

I'd say that [Docsify](https://docsify.js.org/#/) has the edge for ease of use, and is more useful getting up and running quickly for smaller projects, such as libraries. I prefer Docsify's markdown sidebar, as you generally don't need auto-linking when a your pages are well-structured and bite-sized.

You can also write plugins, jQuery style, in Docsify which makes it really easy to add new functionality. They hook into Vue's lifecycle hooks like afterEach, mounted, etc, then you can modify the generated HTML, such as upgrading links, adding  a footer, etc.  

VuePress has a much tighter integration with Vue though:

- you can customise everything if you ""eject"" the default theme, which gives you a folder of components
- you can supposedly add in-page interactive demos a bit more easily than Docsify (though I didn't really play with this yet)

It's only on version 0.43 or something, so I'd expect there's still room for improvement / maturity. ",1525136528.0
samdbeckham,"Just picked it up this weekend. It’s pretty nice. It’s fairly new still so it doesn’t have too many bells and whistles, but I kinda like that about it. I’d recommend taking a look at it. If you already know Vue, it’s pretty easy to pick up",1525130746.0
wangyi7099,Yes. It's a good tool to write documentation. You can leverage Vue in it. ,1525131087.0
DOG-ZILLA,"Not used it, but can see that the response from the community seems very positive about it. I'd say just give it a go!",1525123433.0
tinchox5,"I’m using it! it is very convenient and easy to adapt to your needs. For instance, you can create your own theme to differentiate from the official Vue style. Also it is pretty easy to setup algolia as a default search. 
I’m still developing it, but you can see the beta [here](https://zircleui.github.io/docs/)  ",1525132520.0
N3KIO,"its very nice, but not complete yet

So use it at your own risk.",1525136479.0
tinchox5,I think it’s possible to do that. However you should read the vuepress docs which is pretty easy to understand. ,1525137598.0
tresfaim,Anyone know how this functions in comparison to react-static?,1525156961.0
kitsunekyo,"yes. i played around with it for documentation and really like it.

i feel like the documentation of the setup itself could be improved as it took me some time to get the hang of how to configure the pages with yaml. but i would really recommend it",1525171451.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/vuepress] [Anyone tried VuePress?](https://www.reddit.com/r/vuepress/comments/8g3lf5/anyone_tried_vuepress/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1525128109.0
leyenda92,Use a serverless solution like firebase,1525118153.0
Sphism,"I've wondered about this myself, it feels like it would be insecure to have no server at all... but then maybe it's not.

This should do all the oauth stuff https://www.npmjs.com/package/vue-google-oauth

I wondered about storing sensitive data with https://github.com/softvar/secure-ls

But i've no idea how secure that would be",1525245567.0
Tserkovich,"The preferred way would be:

    <div><font-awesome-icon :icon=""varible""></font-awesome-icon></div>

Or you could look into [render functions](https://vuejs.org/v2/guide/render-function.html).",1525113468.0
irphunky,"Don't forget to protect routes too though, I have something like below in my `beforeRouteEnter`

`if (to.matched.some(record => record.meta.permission && !store.getters.user.can(record.meta.permission)))`

I then just have `v-if=""hasPermission('perm')""` on each of my menu items, with `hasPermission` living in a mixin and permissions being taken from JWT Token.",1525098242.0
Heyokalol,Thank you!,1525097043.0
cheeriohno,Saving for later!,1525146791.0
Dadikey,Saved! Any tips for a treetable component? ,1525276055.0
Eloiole,"Are you certain you don't have errors ? I tried downloading your repo and even after adding some missing dependencies when trying to launch the serverS (I insist on the plural here, it should give you an hint) there is still some missing files.",1525021935.0
kn0ckle,"I have two guesses.

\- You only send auth data from server, so probably there is no #app div in your HTML.

\- Your transition does not firing show transition, might be hidden somewhere.

In any case, you need vue\-dev\-console",1525069151.0
imGnarly,If the url is resending to /# then you should change your mode from hashed to history. I believe hashed is default.,1525073838.0
georgeboot,"Google says, if a user can view it on their screen, the’ll be able to index it. So in general, having a Vue based site won’t decrease your SEO-score. However, you might want to provide them with a (xml) sitemap",1524948075.0
sofarfarso,"I've done more reading on SSR and maybe naively, using Nuxt doesn't appeal to me. I see it as one more thing to learn and maintain, one more thing to go wrong when updated and could be complicated to scale. 

I still like the idea of rendering a page through PHP, maybe at the same time loading some JS files for subsequent page loads. Then have a click listener that flags up for future page loads that it is a human visitor and not a bot and it will just load the Vue SPA.  So each human visitor would have one initial fast loading SR page that would refresh on first click and then everything should be within the SPA.

I'll muddle through this and update on how it goes.",1525023753.0
tinchox5,Did you try vuepress? Is the new and official document generator of vue that is SEO friendly ,1524951139.0
coolnat,"On my PHP site I have a few pages that are Vue components. I have the PHP template render everything server side, then just hook the Vue component onto the same div. Of course when Vue takes over it replaces the DOM instead of hydrating it like a true SSR setup.

It works alright other than the fact that you have to keep the two templates in sync.",1524952224.0
theLorknessMonster,"Actually I'm fairly sure that vue\-cli 3 is way different from 2, at least underneath the hood.

Also, $40 is expensive compared to the price of the official Vue docs, which are excellent.

Edit: Although $40 is cheap compared to my student loans so what do I know.",1524971729.0
N3KIO,"Meh I don't have time to read books, I just read the official documentation, explains pretty much everything. ",1524947736.0
dougieled,Thanks for that. Any specific things in the book that you’ve found useful which help you? ,1524966852.0
proximitysurge,"How's the testing chapter? I've done a couple Udemy courses, but sadly doesn't cover testing. 
Your thoughts?",1524987096.0
Craigg75,Amazon linky?,1524960917.0
evilpingwin,Why is it called fullstack vue? That makes no sense.,1525017956.0
paladincubano,"[Check this](https://blog.sqreen.io/authentication-best-practices-vue/)

Is a good start. ",1524916177.0
sgoogler,"Thanks, for the info about authentication and based on the comment.  I found this link have clear definition on cookies vs  token based approach: https://auth0.com/blog/cookies-vs-tokens-definitive-guide/",1525049526.0
flyingmeteor,"Vuex getters have the same behavior as Vue's computed properties: Unless the dependent properties change, the return value will be the same (it's cached).",1524885048.0
batahkoinonia,"Vuex getters are wrapped in a reactive object so it may be reevaluated when its underlying data changes. This is likely what is causing your issue.

It may be a better idea to setup a service which generates a new track for you. The service could be connected to your store to get specific pieces of data as well.",1524930217.0
gntsketches,"For anyone interested, the answer is here: https://stackoverflow.com/questions/50070900/json-object-copy-in-vuex-getter/50072654?noredirect=1#comment87179550_50072654",1525022573.0
andyb12,"Just started using vue again and ive intregrated it into all our apps, currently around 11, and its a joy to do! ",1524857874.0
DOG-ZILLA,"Bit of a crappy article and it finishes badly. 

However, I do concur with trying out Vue. I love it! ",1524866247.0
campbeln,"We've been on Angular 1.x and the migration plan I have in place is to move towards VueJS. We've already done some small stuff with it and the migration of existing systems looks to be fairly straight forward mostly thanks to keeping Angular to what it does best - rendering - while using Vanilla Javascript for everything else (so we avoid services, have thin directive wrappers with the real functionality in VJS, etc).",1524860782.0
Chamberford,Preaching to the choir!,1524864067.0
N3KIO,"I did, and it's a bullet train",1524860552.0
somethingwithcoffee,"Such a horribly written piece. It’s unfair to compare Angular 1 to VueJS - they are ideas from different generations.


The comparison with React is so stupid. The argument that JSX is forced and it is compiled to HTML ignores the fact that Vue templates are built the exact same way - and VueJs even supports JSX. There’s no point spreading wild misinformation. 





VueJS is a very very nice piece of technology and so pleasant to use. It had enough in its legs to stand on its own without dissing other work. 

",1524890996.0
jeffb68cam,Well that was a horribly written article.... ,1525632510.0
Lachlantula,"I love this article, especially the bit on Redux. Never really made sense to me, but perhaps I haven't ran into a situation where it's truly necessary.",1524904474.0
slynglen,"Please stop spreading misinformation. Fight against fake news, don't embrace it to push your own weird agenda.",1524892447.0
Rizens,"They are of lot of issues with the code ( I added in comment ) but in short :

Vue does not trigger the `mounted` method multiple time when the router refers to the same component in the page.

In your case `/foo` and `/bar` refers to `Page.vue` so when navigating from `/foo` to`/bar` (and vice versa)  vue would not re-render the component.

The solution is to use the `beforeRouteUpdate` to manually update the view

[Working solution](https://codesandbox.io/s/w7pm8415y8)
",1524853694.0
JeffreyWay,http://vuecasts.com,1524828800.0
AmazeCPK,"If you're willing to spend money, please consider what is widely thought of as the best Vue course in existence

https://www.udemy.com/vuejs-2-the-complete-guide/

You can usually get the course for $10USD if you google around for a bit, and look for coupon codes.",1524849264.0
jaxn,"You typically need a backend server that provides an API between the Vuejs frontend app and the PostgreSQL database.

This could be a node app, a Rails API app, etc.",1524792261.0
Arkhenstone,"Well, I don't see any scrollbar beside the native one, Firefox 59 Linux.",1524810771.0
ameo02,I am curious as to why you didnt implement your own scrollbar to main browser scrollbar on your site.,1525082437.0
dynamicdank,"Just used your vuescroll on my personal project yesterday, working fine now and fairly simple get it up and running.

I hope I am assuming correctly and that you can disable the default browser scrollbar and replace it with this one and customize it? I'd also like to use the paging and snapping features on my one page site, snapping using 100vh components/divs so it changes the view when scrolling and then paging to scroll through a gallery component.",1525092411.0
mkymonkey,I feel like this is a ripoff of Alex Garrett: [https://www.codecourse.com/lessons/paginated\-vue\-components\-with\-laravel](https://www.codecourse.com/lessons/paginated-vue-components-with-laravel),1524781762.0
higherlogic,"I was just looking around for the sake of knowing, but is Axios vs native vs vue-resource any faster/slower than the other?",1524786865.0
DukeBerith,"Are you using Vue 2+ ? The events object was a 1.0 feature.

Now, what you do for child/parent events is this: 

	<!-- In parent -->
	<template>
		<child @name-of-child-event=""eventHandler""></child>
	</template>	


	// In vue script
	const vm = new Vue({
		methods: {
			eventHandler(event){
			// do stuff here 

			}
		}
	})

Note: I'm using the shorthand `@` syntax for the event instead of `v-on:name-of-event`
",1524824079.0
irphunky,"I assume your using vue-router? 

They have a whole section about this - https://router.vuejs.org/en/advanced/transitions.html",1524747773.0
HeelToeHer0,"Use a `v-bind:key=“somethingUnique”` on the root element of the transition element where `somethingUnique` will change when you want the animations to run. In your example it could be the text you’re displaying, in other cases I’ve set up an int in the component’s `data` that I increment when I want to fire the transition.

It doesn’t matter if the root node is an HTML element or a Vue component, adding the key manually notifies Vue that it needs to rerender the DOM node. 

Edit: just noticed you’re using Vue-router. If you’ve named your routes you can use `$route.name` for the key. Another solution is using `$route.fullPath`. ",1524749396.0
flyingmeteor,"Check for side-effects in any computed getters. Getters should never mutate state, that's the only thing I can think of that would lead to this kind of behavior.",1524716685.0
IsThatALlama,"If you're using Chrome it may be related to [this bug](https://stackoverflow.com/questions/11284663/console-log-shows-the-changed-value-of-a-variable-before-the-value-actually-ch). I've certainly seen logged output that shows the object at final execution, rather than as it was when logged. Try logging as a JSON string to verify that the properties are as you expect in that moment. ",1524746693.0
renoirb,"Element UI [seems to have good flight of test](https://github.com/ElemeFE/element/blob/dev/test/unit/specs/autocomplete.spec.js).  They're not e2e. Though.

But it was the one I found who has most well-made and tested components. And, also, with many contributors, and an active community and employees paid to maintain it.  Also, it has active ports for [Angular](https://github.com/ElemeFE/element-angular) and React of the same component vocabulary.

I tried Bootstrap Vue, VUIKit, Vue Material, Vuetify.  Element is running in production for a [large chinese grocery corporation.](https://zhuanlan.zhihu.com/ElemeFE). I started using it recently and am still amazed by its qualities.",1524712358.0
bahmutov,You can test Vue components using full browser via Cypress (use this adaptor https://github.com/bahmutov/cypress-vue-unit-test). See this blog post https://www.cypress.io/blog/2018/04/02/sliding-down-the-testing-pyramid/ and video https://youtu.be/5FnalKRjpZk),1524967901.0
instantiatedObject,[here's](https://github.com/vuejs/vuepress) a link to their github if your adblocker is filtering out OP's link like mine was.,1524680306.0
JinSantosAndria,This is Avery beautiful white page on mobile chrome on android,1524684442.0
softwareguy74,Nice,1524702218.0
AwesomeInPerson,"Nope, you don't have to do anything. iOS web apps (at least prior to Safari 11.3) don't get their icons from the manifest but from custom `<meta>` tags in the HTML `<head>`.  

So that's why you don't see them in the manifest, it's on purpose. Build the project, then check out the generated `index.html`. The `<meta>` tags should be there.",1524667796.0
boblauer,"As someone who mostly works with React but is getting more into Vue, this feels like a really great pattern. Passing a ton of handlers is always annoying in React, especially if they need to be passed through multiple layers.",1524687545.0
cyanydeez,"Events can easily turn to spaghetti. They also mimic the observer paradigm, so can be a crutch to reactivity.

That said, under the hood, two way props are using events with .sync syntax",1524692345.0
kelin2025,"So, my reply with some criticism: https://medium.com/@kelin2025/hello-c6aa3b8a40c1",1524699468.0
TheUnknownFactor,"If you use typescript you can do something like:

    interface ComponentData {
      name:String;
      email:String;
      phone:String?;
    }
    
    export default Vue.extend({
      data():ComponentData {
        name: """",
        email: """"
      }
    });",1524664247.0
Lelectrolux,"There is no native solution for that, data can't be validated. Typescript might help during dev, but isn't magical. vee-validate might help ?",1524703781.0
,[deleted],1524701188.0
irphunky,"Rather than `setTimeout` use `this.$nextTick`

https://vuejs.org/v2/api/#Vue-nextTick",1524658672.0
,Neat little project. How did you get into ethereum based programming? Any suggestions as to where to start?,1524625441.0
BackpackerSimon,"App looks awesome. 

Why do you hash the public password so many times? I was under the impression from my forensics course that it doesn’t get stronger the more times it’s hashed? ",1524639779.0
ciwii,">heyheyheeeyy

I love you.",1524665579.0
Ob101010,"1) I see you went with MS Azure hosting. Any specific reason? I only ask because I went with Firebase. I have no idea how the two compare, but its pretty dead-simple to deploy to firebase.

2) Two weeks is about what I spent learning vue as well, maybe thats the whole learning curve time requirement. Had you played with any other component frameworks (angular or react) prior to this? 

3) Didne even know about 'let'? Wow!! Wait till you discover arrow functions and the spread operator!! Fun times ahead!

4) Great video, I watched 10 mins, after work I will watch the rest, thank you for sharing that. I learned from this series: https://www.youtube.com/watch?v=5LYrN_cAJoA&list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa  (In case that URL barfs, youtube 'net ninja vuejs') 

Taking a deeper look at your code now, but it looks good.
",1524668628.0
usx-tv,"Looks good, keep up the good work.

Please do start testing your components though, it will be a lot more future proof :)",1524663441.0
doppio,Cool! Awesome to see some Ethereum applications outside the usual crypto subreddits. Good work!,1524671732.0
sp3co92,Nice project. What iw more interesting to me is that you've built this using Ethereum. Can you give me some resource to help me setup the dev environment for blockchain development ? I'm following CryptoZombies tutorials as well.,1524712156.0
kotaNihal,"nice... looks good.
but loading icon looks old.",1524621930.0
toqy,"looks like it's not packaged properly. has vue 2.4 listed in it's dependencies too which it should not. It also looks like it depends on you having semantic ui set up in your project. If you do, the source is super simple you could just copy and paste it into a file in your project. I assume you don't though since you mentioned bootstrap. 

I would suggest just trying `vue-color`, definitely a better option. https://xiaokaike.github.io/vue-color/",1524618424.0
inhalingsounds,Have you tried doing a fresh npm install?,1524604059.0
wikitih,"You'd probably already sorted this out, but have you tried something like this?

    import colorpicker from 'vuejs-colorpicker/src/index.js';

I guess that that package is missing the `main` property on its `package.json`, and webpack cannot find the entry require point.

However, as other have pointed out, this package seems pretty immature and [simple](https://github.com/vinayakkulkarni/vuejs-colorpicker/blob/master/src/index.js). Consider implementing it yourself, or using [vue-color](https://xiaokaike.github.io/vue-color/) instead.",1524654559.0
pearofducks,"It isn't working because you're passing `countDone` an array of tasks, and asking it (the array) if it has a `done` member (like an Object) that equals `true`.

The idiotmatic way to do this in Vue is to use a `computed`


```
doneTaskCount() {
  return this.tasks.filter(e => e.done).count
}
```",1524572989.0
birdspider,"take a look at  `:is=<dyn-ariable-holding-component-name>` (https://vuejs.org/v2/guide/components.html#Dynamic-Components)

EDIT: acutally you can supply either:

* the name of a registered component, or
* a component’s options object
",1524568631.0
xero01,"I would check out [functional components](https://vuejs.org/v2/guide/render-function.html#Functional-Components). I've used them before for some ""smart inputs"" that would automatically show the right input field based on the data type.

    import TextInput from ""./SmartInput/TextInput"";
    import TextAreaInput from ""./SmartInput/TextAreaInput"";

    function appropriateInputComponent(dataType) {
      switch (dataType) {
        case ""string"":
          return TextInput;
        case ""text"":
          return TextAreaInput;
      }
      return TextInput;
    }

    export default {
      name: ""smart-input"",
      functional: true,
      props: [""dataType""],
      render: function(createElement, context) {
        return createElement(
          appropriateInputComponent(context.props.dataType),
          context.data,
          context.children
        );
      }
    }",1524579210.0
jpolito,Can you provide a sample of your code?,1524570871.0
fucking_passwords,"It sounds like you have circular dependencies. Webpack and other build systems can sometimes resolve these without issue, but these types of errors are tough to shake when you have circular dependencies. Do some research into how to remove the need for CDs, there are definitely other options other than putting everything in one file. If you get really stuck and can’t figure out how to remove them, you can also try an async import/require. Importing a dependency later can help ensure that the circularly dependent module has at least been evaluated properly.",1524574577.0
cyanydeez,"Generally, you would write a plug-in.

https://vuejs.org/v2/guide/plugins.html

How you structure it could be:

- write a series of components, add them at install

- load set Vue.prototype.$SVG to the library

- write a mixin that runs the mount and unmount functionality

",1524521534.0
Kilawaga,"You need something to toggle the drop down from display: none, to display: block. v\-show can do this, or a class that relies on some state being toggled between true or false. Vue will ""sniff"" for classes that have ""slide"" as a sort of prefix, but ONLY if the animation is in the same file as the component or imported from another file directly in to the component. If you're using v\-show make sure you don't already have display: none set on the dropdown.

Whats your animation look like?

    @keyframes slideDown {
    from { transform: translateY(-100%); }
    to { transform: translateY(0); }
    }
    
    and vice versa for the slide up.
    and then for the actual class.
    
    .slide-enter,
    slide-leave-to {
        animation-duration: 250ms,
        animation-timing-function: 'ease'
    }
    .slide-enter {
        animation-name: slideDown
    }
    .slide-leave-to {
        animation-name: slideUp
    }",1524541927.0
thomasswilliams,"Sounds like Vuex ""strict"" mode, useful for debugging: https://vuex.vuejs.org/en/strict.html",1524576201.0
Kazanian,Great. Inspired me to change the page transitions on my current project: https://selenios.netlify.com/,1524615437.0
TG__,Check out quasar.,1524574332.0
DylonDylonDylon,"Vue-Patternfly is progressing.  Might not have all you need though.  I had to build some custom components.

https://mtorromeo.github.io/vue-patternfly/#/",1524509887.0
theLorknessMonster,"Check out [https://github.com/stasson/vue\-mdc\-adapter](https://github.com/stasson/vue-mdc-adapter).

Its still very new but it uses Google's material design components which is the latest, greatest thing in material design.",1524536889.0
renoirb,"I've been through similar research than you.
I've used and experimented with Vuetify and enjoyed it, but in my team we ended up picking Element-UI and Hare as a starting point.",1524571017.0
zeroskillz,"Can definitely understand your skepticism. It's often hard to strike a balance between promoting and force feeding. There are improvements I can make here, let me reach out to our backers.",1524760870.0
byustudent_throwaway,How is this better or different than [vuex persisted state?](https://github.com/robinvdvleuten/vuex-persistedstate),1524529902.0
JinSantosAndria,"Separate it. It makes your life so much easier. Having to deploy a symfony backend app, that compiles templates  in another language like twig is a pain. Just converted an app in the last two weeks.

The amount of uncluttering that had to be done was mind boggling. The old process had a four step multistage dockerfile build process. First get npm. Install dependencies. Then get composer, install dependencies. Build assets through symfony and twig that requires some translation dump from symfony into an js before we can pass it to the frontend. Then copy over the new Vue frontend, test and build the dist version, including the backend translation dump. Deploy static dist into the nginx image, deploy symfony into the php-fpm image, build, push, deploy, pray.

Keep responsibilities separate. Frontend is frontend it needs a loose coupling towards the backend. Backend does what it does best, API, services, mailing, storage and security. Compile as easy as possible, deploy as fast as you can.",1524498987.0
Arkhenstone,"It depends what you want to achieve. Separate app will means you'll do an API (REST?) with your PHP, and do all the interface in an SPA (Single Page Application) with Vue. 

While doing PHP way, your Vue code will only add functionalities to a web page (like you need a component or a script). Every page will be considered like an app in Vue point of view. 

Basically, both have their pros and cons. As you're proficient in PHP, you might go PHP way if your project needs to be done as you'll do it faster that way. If your project for fun of learning, maybe you can just choose what you feel.",1524494116.0
Wobbelsteen,"You're probably familiar with basic HTML, CSS and JS.

If so, you can get most, if not all of the information you'll ever need in the official [Vue documentation](https://vuejs.org/v2/guide/). It's pretty awesomely structured, with examples and whatnot, so you can learn a lot from there.  
That page has most of the basics that you'll need to start working with Vue.

If you're making a more advanced app, there are the official [Vue-router](https://router.vuejs.org/en/) and [Vuex](https://vuex.vuejs.org/en/intro.html) libraries, for route handling and (front-end) state management respectively.

With these 3 libraries (Vue, Vue-router and Vuex) you can pretty much do anything you want in Vue, and all 3 of them are official and well-documented.

Finally, there's a compilation of Vue-stuff called [Awesome-Vue](https://github.com/vuejs/awesome-vue), which contains links to various Vue libraries, plugins, links, ... that could be useful to you.

I hope this somewhat answers your question, good luck.

Edit: Like CapainInsane-o said, Vue in the end is just Javascript, so it plays nicely with most other JS-libraries.",1524491113.0
CaptainInsane-o,"Do you know vanilla JS or only jQuery? 

> There's a lot of noise and I don't know what to focus on -- what are the essentials?

SASS, JavaScript, HTML.  Thats pretty much it.  If you are writing a back end too Id recommend going with Laravel because theres a large community for Laravel and Vue apps.

> Is there a sufficient open source ecosystem available for VueJS to make it a viable option for my needs?

Ya there is.  Lots of packages available for download.  It plays very nicely with third part non vue specific packages too since its just all JS.  VueJS is open source.",1524490515.0
DOG-ZILLA,Nice!,1524489279.0
del_rio,"This is a pretty lean solution to a very common problem!

However, this might be better integrated as a directive instead of a component? An ideal usage would look like this:

    <div class=""news_snippet""
      :break=""{ small: 480, medium: 1600, large: Infinity }""
      :class=""el.break ? 'news_snippet-' + el.break : ''"">
          <some-content />
          <other-content />
    </div>

My pseudocode is probably not possible, but surely it's not too far off?",1524494569.0
gdffff,this is why i subbed here,1524491078.0
aesamattki,You'd want to make a Vue component and use props.,1524480922.0
ksmithbaylor,"[Here's something similar](https://jsfiddle.net/k1z4u7jy/3/)! I'm fairly new at using Vue, but I've been doing React for a while so I'm familiar with the way things fit together. The popover isn't styled the same because bootstrap adds its own styles to it, but the functionality is the same.

Let me know if anything is confusing!

EDIT: changed a few things and updated link",1524487705.0
n2fole00,What a lovely couple. ,1524479869.0
ybrodey,Aw,1524482460.0
vladfaust,Why would a developer set an avatar of himself with his girlfriend? ,1524437614.0
irphunky,"It all depends on where you want this logic to live, if you want to stick it in your `router.js` then you could utilise [route props](https://router.vuejs.org/en/essentials/passing-props.html) or [route meta](https://router.vuejs.org/en/advanced/meta.html).

Another way could be to use `beforeRouteEnter` and `beforeRouteLeave` on the `Sale` component to toggle the close button as that seems to be the thing which determines if this is to be shown or not.",1524432998.0
josh1nator,"The easiest (and probably UX-friendliest version) is to get all entries you want to display, then v-model the select-elements and filter the entries you have based on the select-elements values.

Basically you make one request for an array of entries (you usually have some kind of API behind a frontend-framework like Vue to get data), create a computed property that's using the unfiltered array and is returning a filtered array based on the selected values.",1524425924.0
N3KIO,Axios,1524427580.0
pearofducks,Look into `vuex-map-fields` - it's brilliant and I _think_ will help you do what you want.,1524419720.0
cutety,"You can't pass an argument to the computed property getter, `get(tabIndex)`. So, because you have to lookup the value from an index, if you wanted to use the computed property method, you could just abstract the input to it's own component and pass the `tabIndex` through a prop so the index will be available in the computed property getter using `this.tabIndex`. However, this can also be done simply using a pair of methods instead of a computed property and manually binding the value and listening for the input instead of using `v-model`.

    <template>
      <div class=""tabs"" v-for=""(tab, tabIndex) in tabs"" :key=""tab.id"">
        <input type=""text"" :value=""lookupTitle(tabIndex)"" @input=""v => updateTitle(tabIndex, v)"">
      </div>
    </template>

    <script>
    export default {
      methods: {
        lookupTitle(tabIndex) {
          return this.$store.state.tabs[tabIndex].title;
        },
        updateTitle(tabIndex, value) {
          this.$store.dispatch(""setTabTitle"", { tabIndex, value }); 
        },
      },
    };
    </script>
",1524428052.0
fucking_passwords,"I haven’t tried to build a component library that could be consumed by others, but I have built fairly large applications where 99% of the ui components are built from scratch. A few I’d advise against trying to tackle, like a datepicker, because they are so complex that it will require a ton of focus. Custom select menus are also fairly tricky to get right.

I usually have a private route only available in a dev environment that has a full UI kit to test all of the components. I think it can be worthwhile, especially if you don’t need tons of complex components. It’s also a great learning experience. However, I wouldn’t recommend it for all situations, for instance if you are on a tight timeline.",1524409701.0
kaelwd,"Anything in particular that doesn't work for you? We're currently rewriting all the form components (and a few others) to allow more flexibility for users, and feedback is always welcome. ",1524411135.0
defunctAI,"I have built many small scale components for my current job and I plan to share then on github someday, but basically it was worth it and I recommend anyone to do the same. check my answer on SO how to build your own small component https://stackoverflow.com/questions/47754244/how-to-create-and-publish-a-vuejs-component-on-npm/47757050#47757050",1524421398.0
BrianKimball,"I started to build a component library. It is fun but it takes a long time. I also would spend a lot of time referencing existing libraries (bootstrap-vue, element ui, vuetify) for certain things like how they built tabs and shared state. I used iotacss for the styling, which was nice because I have full control of the look, plus the utility classes make it easy to style on the fly.

For client projects I am using element ui, because I know it's tested better than my custom components and it has components I have not yet built.

I recently came across https://vueds.com which makes me want to build my own full fledge library but I probably won't have the time.",1524410102.0
critic81,I have built our own component library. It’s built around Foundation. Also have just recently started to pull in a couple of components from Element UI. ,1524410326.0
segphault,"My experience has been similar to yours. I find the existing component libraries to be great for prototyping, but I always encounter frustrating limitations as soon as I start trying to adapt the controls to meet the style and interaction requirements of my application. I end up spending so much time working around the shortcomings and assumptions of the library that I find myself wanting to start from scratch. 

I have done it to an extent, but I'm uncomfortable with the maintenance overhead and I'm not especially confident that I've managed to get keyboard accessibility right, especially for intricate controls like the select widget where you basically have to do everything from scratch if you want it to be styled correctly. 

What I would really like is a lightweight third party library with a minimal control set that is totally unstyled, just providing all of the interaction and keyboard accessibility without coupling the presentation or a prescriptive layout system. 

If anybody has suggestions, I'd love to hear them. ",1524413480.0
sneppy13,"I'm actually developing a component library of my own, and I'm using it in my projects. Everytime I create a new component that I think it could be used in other projects I move it in my library instead.
I'm using stylus to style the components and webpack to compile everything.",1524422726.0
watMartin,"Cross component communication/state (global state) is another great reason to use Vuex.

But you're still new, as you use Vue more and more you'll come across more scenarios where you feel Vuex would solve a lot of headaches and make your code cleaner",1524398104.0
fzy_,"> ""Flux libraries are like glasses: you’ll know when you need them.""
> 
> -- Dan Abramov, the author of Redux

This quote actually appears in the [vuex documentation](https://vuex.vuejs.org/en/intro.html). Vuex is not intrinsically tricky to learn, it's just that it'll slow you down by making you write over-engineered code if you don't have the need for it.

Vuex lets you abstract the state your application outside of specific components. Depending on the situation, it can be a good or a bad idea.

Let's say you're fetching some data from your server, a list of posts for instance. You might write a component that performs the request, and displays all the posts one after the other. But what if you want to add some sort of navbar somewhere else on the page that displays the title of all the posts in a list? This component needs to fetch the posts as well.

The solution is to extract this piece of state from your components and put the management of the posts inside of Vuex. Then, you can query the Vuex store from both components and let them both act on the same data.",1524404830.0
chandru89new,"Same boat as you. I've written a few simple vue apps (more like one-page scripts) but never got my hands dirty (a.k.a, vue webpack, vue-cli, vue routers, vue components etc). So 'vuex' seemed completely out of bounds (and I was like, *what exactly is this thing for?* for a long time).

Two days ago, started playing with routes and components.

In Vue, you can have routes just like any other framework. Useful for single-page apps. And you can have components. Useful for segmenting your page/app like so -> you have a header, a sidebar, a body (and may be a footer).

Each of them can be a component. So there's the ""header"" component, there's the ""sidebar"" component.. so on.

Let's say the content inside these components is decided by logic. Like, you want to show a specific set of links in the sidebar only if the user is logged in. Ditto for the header too (like you would show ""Logout"" only if the user is logged in).

When you build an SPA in Vue, you're going to have individual components (in different files) and then bundle them together during run-time/build.

But there's no way to ""share"" data between the components other than relying on browser-based storage (sessionStorage or localStorage or Cookies) or some global variable. We can of course rely on browser-based storage but what about reactivity? (like you want to all your component DOMs when a value changes).

So that's where Vuex store comes in handy. (I'm still learning the ropes).

",1524407525.0
teh_inquisition,"There have already been some good comments here but I'll add two examples that I've used at work. 

First is to have settings that are global (like number of results to display on various pages) or whether to show log data as an absolute time (8:00 am) vs relative (3 hours ago). We use the same settings in multiple parts of our app so having the values in one place is useful. We even save them to local storage so they persist from session to session. 

Second is for the screen loading icon. There are many components within our app that night need to trigger the full screen loading icon, so we have a loading value that components can add to or take away from as needed. If the value is more than 0, we show the loading icon. ",1524409980.0
TopBantsman,"Try building an app where you need to propagate the state of a component up multiple ancestors or even across siblings.
You need to emit an event. Show that the component emits the event and direct to the handler. Handle the event and in the previous examples do this for each component as you bubble the state up. If you need to go on to a sibling this needs to then be passed down in props. Obviously this gets silly quite quickly.
Of course you could use a global event bus using a separate Vue instance but at that point you may as well use Vuex imo for the added perks such as being able to see the state history in your debug bar.
Personally I see the bar as very low for when to start using Vuex. Even if you don't believe your app will be sharing state often that may quickly change in future.",1524412884.0
N3KIO,"Vuex saves state across whole vue application , vuex saves that data, think of it as a store to persist data.

You don't have to use it if you don't need to, most simple apps do not need vuex",1524397699.0
Lelectrolux,Next time post [the official doc page](https://vuejs.org/v2/api/#v-pre) instead of spamming.,1524395143.0
Lelectrolux,Next time post [the official doc page](https://vuejs.org/v2/api/#v-cloak) instead of spamming.,1524395123.0
thiswasprobablyatust,"For:

- Lots of out\-of\-the\-box features like changing colors on elements or built\-in icons/statuses
- Can build simple UIs or UIs that closely align with the project's components very quickly

Against:

- Almost every one of them is coded like shit. Both of the libraries[1] you linked to use `watch` on simple `input` elements.[2]
- It's often hard to style the components away from the original styling without some massive hacks or workarounds \- this isn't true of all, but it is of most.

[1] Jesus christ bootstrap-vue even [uses two watchers per input](https://github.com/bootstrap-vue/bootstrap-vue/blob/dev/src/components/form-input/form-input.js)

[2]  I've built two component libraries now, and several projects in the medium\-large range, I think I've used `watch` less than 5 times.
",1524325848.0
gdffff,"i prefer to start with my own components, including only a couple of external components like modals or dropdowns from external sources (staying away from component libraries though)",1524325761.0
N3KIO,"Depends how much time you have

It's not a question of you should use it or not

If a client wants a website up in 3 days you go with bootstrap or any other framework that has components

Time is the determinating factor",1524327990.0
laissezfart,Am I missing something on why watch is bad?,1524327314.0
Samuell1,For small projects i prefer own components. For bigger i prefer libraries or custom made components that can be reused in multiple projects (it saves me a lot of time).,1524332682.0
yeahdixon,"Depends. Usually air on not using but depends on the scenario. Some reasons I may not :


I Don’t use stuff if you can make it easily yourself because this will create dependencies



If you do use something make sure you can pull it out and replace on your own and/or make sure it’s maintained in case bugs arise



Realize that you may want to customize /add feature down the line and this may not be able to accommodate . 

",1524327136.0
nickforddesign,Use a router if you want different views of your application to be accessible via different urls.,1524324917.0
nwsm,">It seems to be the case the the router is only used when ""external"" calls are being made, but I'm not sure.

Doesn't really make sense to me. Using a router does not help you at all in terms of calling an external service.

If you are making a Vue app from scratch you're probably making a ""Single Page Application"", where the browser is only ever served one html file, and the javascript framework handles showing different sets of information. A router helps you easily manage those sets of information as ""pages"", even though the user is always on the same page.

In your case it could go either way. Each tab could be a separate route, or they could each just be different components and you show the component based on a variable.
",1524329927.0
gdffff,router is awesome and passing tab id as a url param or query will allow users to share links to a certain tab,1524325381.0
blpittman,I don’t see a need to use the router in that case. ,1524322507.0
yeahdixon,"Typical use of a router is to manage browser url changes. So going between pages would trigger url changes and thus respond by triggering a response . Router turns url patterns into variables and helps mantrain state like back and forward  . 

A router could be used to manage content within tabs but could add more complication than it’s worth .  Depends if you want back button to work with tabs really",1524325442.0
not_very_creative,"If you won't have any interaction with a backend, maybe have a look at [vuepress](https://vuepress.vuejs.org)

I haven't used myself but seems simple for static websites.",1524331584.0
JinSantosAndria,"I agree on jimithatsme, sounds like a racing condition because you missed waiting for something to finish correctly, therefor it only work when ""lag"" occurs and something in the chain takes longer then the rest of the code to run. Like having a contact form, submitting the data to an external host but redirecting (and unmounting) the vue component that handles the submission at the same time without waiting.",1524292468.0
eyeruleall,I'll help you if I can. Have any code to share?,1524274529.0
cyanisis,Need to see code!,1524284282.0
Skwai,Never had this problem. Have used the two together a tonne. Could be lacking a polyfill somewhere for that version of IE,1524288351.0
giljjj,"I think it may be Jekyll's template fault, ( https://jekyllrb.com/docs/templates/ 
 / https://shopify.github.io/liquid/basics/introduction/ ):  
According to DevTools, your Vue page (at line 35) has the following html:  

	<div id=""app"">
		<p>
        
		</p>
	</div>
the {{message}} is missing, and I believe it has to do with Jekyll's template somehow.
With DevTools' Local Overrides, I added the missing {{message}} to your html and reloaded the page from my local disk, and the message does appear.  
Good luck!",1524247284.0
dixncox,"We did this with great success a couple months ago at my company. 

We basically instantiate the Backbone View by hand within the Vue component and attach it to the dom manually. Then, we’re slowly rebuilding each screen with Vue, but they live side by side. ",1524255267.0
Rizens,"I think this could be possible but not with 100% of the feature and obviously there is nothing to do this ""out of the box""

Backbone uses factory pattern like Vue :

`var view = Backbone.view.extends({})`


`var vm = new Vue({})`

So technically speaking it would be possible to write a Vue to Backbone loader that transpile `.vue` to the backbone style component.

Otherwise you can consider just integrating Vue and writing a wrapper + fixture to isolate each framework and to guarantee interop' between them.

Obviously I would always advise to re-write the entire stuff from scratch but I'm aware this is rarely possible.",1524248667.0
jbenner,I actually just finished a project at work converting their Backbone codebase to a Backbone/Vue hybrid. We essentially just instantiated a new Vue instance inside of each of our views`render()` methods and binding `el: this.el` in the Vue instantiation. ,1524255087.0
waiting4op2deliver,I chose vue for my project because it could be incrementally adopted. With fair success I might add.,1524265376.0
compubomb,"This would be a walk in the park. Identify all of your controllers in backbone.js identify all your models, build your models into modules with vuex, locate your modem method calls and translate them into vuex updates. Locate your ajax calls and translate these into actions in your modules. Locate your control logic and place this into the methods calls, and then finally, locate your templates and translate them into vue syntax templates. Vue has pretty much everything that exists inside of _.template, which my guess is what you used for your backbone templates. Yes, you could probably do this in a couple of weeks or less. They have a lot of really good vuejs 2.x projects out there. 

Forgot to add. Locate your backbone router, and translate it into vue-router, it's very similar and they have a lot of useful life-cycle events.",1524296603.0
realeaty,What are the painful points with Backbone?,1524251980.0
yeahdixon,"I have converted a rather large app that had Backbone into vuejs. note, I did not have that much Backbone in there though so i probably am not aware of all the pain points.   Personally i would avoid doing a hybrid Backbone and Vue strategy unless unavoidable.  Two very integrated dependencies that are doing the same thing does not sit well with me. Jusst use it or don't thats my advice.   If the app is large, and depending on the code it could be  big undertaking. I would test by setting up a simple router and trying to port over a few  views into their respective components  and pass some data in there.   That right there will give you a real understanding of what needs to get done.  Even though you use backbone, backbone can be done in many ways. From my experience there are a couple things that come to mind and to take note of. ONe is converting to components. Vue and many major frameworks use components. Components tend NOT to have to depend on other components making them more isolated and reuseable, so there could be some reorganizing there.  Having said that you will probably find that single file components (template, styles and code in one page) is just nice. And if you code does not fit nicely into components, well you probably want to that kind of reorg work anyways.  Another thing about vue and also happens to also be in most major new frameworks is the virtual dom. This is a big deal if you are new to this concept.  You should be very careful about manipulation of the dom without changing the virtual dom, because if they get out of sync there could be some unwanted consequences. For instance, you dont manipulate a table by adding new rows via jquery or createElements , you would more likely  change the model or array and that will then trigger a rerender in the template. This is a different approach and  how much worl this is  depends on how your code is setup and how data driven the existing front end is.  this was a pain but looking back, but  the code got a lot cleaner once it was more 'data driven'.   I will say after the work I put into conversion to vue, I really enjoy where its at and have no regrets. There are areas that have vastly cleaned up.",1524273098.0
dougalg,"At my place of work, we are in the process of migrating from Backbone to Vue. Our approach is to completely separate Vue and Backbone components, and only allow them to communicate via event if really needed. We've found that building in Vue is much faster than in BB because of the truly reusable components, so it easier than trying to maintain an integration of 2 different view layers.",1524282718.0
pyran1208,"As far as i know, you are totally right. And it doesnt matter if its a function or a variable, both get executed in the same way. The only way to limit this behaviour and improve perfomance is by using a computed property.",1524237251.0
chrissilich,WHY ARE YOU YELLING?,1524199203.0
ColtenP,"This is a problem with CSS. You can’t transition from absolute to auto values.

It sucks, but that’s just the spec.",1524185822.0
lan__solo,"It will never work like this with height auto. That's just how CSS works. When I would have to solve this with JavaScript, without taking VueJS into account, I would try to make a clone of the DOM element, set height auto, get the computed size and apply the computed height to the original element for the transition. After the transition you then can set height auto to get back all benefits of it (like growing when width changes).

Sorry for not having the VueJS way answer for this.",1524223793.0
inhalingsounds,"And to answer to _why_ - Evan You, the creator of Vue, is Chinese, and the framework is huge in the country.

It's also supported by industry giants from China (Alibaba, Baidu, Tencent, Xiaomi, Didi Chuxing, DJI, Ele.me) which helped spread its popularity like wildfire.",1524171534.0
gustix,"Yes, they are safe to use, although not all have proper English docs which most likely will be your biggest challenge. Element as you mention is well documented. We’re using it at work. ",1524171149.0
OmegaVesko,"Vue happens to be popular in China. That's pretty much it.

Yes, they're safe to use if you're not Chinese. The only thing I'd be wary of is relying on something that doesn't have good (or any) English documentation.",1524171754.0
Hargbarglin,"(1) Because there is a very significant chinese vue adoption.

(2) Security is always going to come down to knowing your software and proper practices as a developer. You'll have to review any code no-matter who wrote it. Generally something like a front end UI shouldn't be too much of a concern if everything else is in order, but you still need to understand what any new UI is doing.",1524171307.0
rk06,"> Why there are many Chinese framework?

1. The creaor Evan You is Chinese and has spoken a lot about his framework at conferences.

2. Vue has Chinese docs from early stage

3. Chineese dev can write  github issues in Chinese. This works as (said in point 1) the author is Chinese and can easily reply in Chinese


> Is it safe?

Yes, you can check source code if you like",1524312698.0
irrational_design,"React tends to be more favored in the west, while Vue tends to be more favored in the east.

As for safety, it's just JavaScript. You can read the code.",1524171429.0
acklavidian,The new 3.0 cli (...still in beta) has a build target for [web components](https://github.com/vuejs/vue-cli/blob/dev/docs/build-targets.md#web-component),1524169085.0
a11yjobs,GraphQL is great thanks for tut about using it with Vuejs.,1524155706.0
adstwlearn,"I have a simple open-source notes app that uses Vue on the front-end and Vuex for managing state: [koa-vue-notes-web](https://github.com/johndatserakis/). The notes on the dashboard are paginated, you can check out how I manage that in the code in `/src/store/note.js`.",1524156337.0
outlawengineer,"I asked the same question here before but didn't get much help. I use the Command pattern so I can control the order of operations and capture the data coming in and out so I can replay user sessions if needed. However, most of the code or ""business logic"" is inside Mediators which is similar to a ViewController in iOS.",1524268135.0
Mekhami,"I'm gonna be honest, from a Vue perspective, this thing offered no value whatsoever. 'install the library and add the component'. maybe the laravel stuff was more meaningful, but this seems more like blogspam to me.",1524113529.0
derSchwamm11,"I didn't find vue-dropzone that useful, especially compared with some React counterparts.  This plugin does not work unless you specify a URL, so you MUST upload whatever file is dropped.   I could not find a Vue plugin that didn't require that including this one, but in React it was no problem.  It was easy enough to write it all in vanilla JS",1524141226.0
swinaallen,"I suggest you feathersjs https://feathersjs.com an opensource complete nodejs backend solution to build rest api or realtime api. Authentication ready included with different strategies (local, jwt, oauth1, oauth2).
Also available as vue plugin (vue-feathers) easy to integrate in your vue project.",1524391784.0
skipbridge,My team got it working with Django rest auth making use of JWT and scraping social info. ,1524108253.0
JinSantosAndria,"It might sound strange but it's not the common knowledge you miss. Its the same flow over and over. Something happens, you get a set of information you need to store.

If it's user pass, you need to check it and escalate it to the frontend on error, otherwise store your ""session"" inside cookie or loacalstorage.

If its a register, look it up if it exists, otherwise validate on backend, escalate errors to frontend.

If it's some kind of oauth, take the information, validate the authenticity in the backend against the provider, check the signature etc. If valid,check if the is is associated with an existing user, if not, fall back to register flow. If yes, create session and push it to the frontend storage.

Extra points are given if you check the email of an oauth user against your backend user database as well and make it possible to associate or join and existing account with a new set of oauth information.",1524109900.0
UndefinedB,"If the third party APIs are public and allow CORS then you can do it from the frontend.

But usually you need some kind of API key and you don't want to expose that so you'll have to proxy your requests through your own API.",1524058312.0
ImReddit,"I regularly have my frontend pull content from prismic.io - works fine.

As others mentioned, if its public facing with CORS, go nuts.",1524076638.0
Foobyx,"Hello, fairly new to vue, but, what is the purpose to convert something (html) into a vue component ?",1524079084.0
kn0ckle,"Not sure it works but did you tried something like this?

    <template>
    <component :is=""MixinReadyComponentName"">
    ... content
    </component >
    </template>",1524059621.0
multiplegeorges,You're going to have to post a lot more than that if you want any serious candidates to even consider this.,1524036631.0
_sirberus_,Good luck to you but 4k/mo to live in a place like UAE is a real hard sell.,1524115890.0
CookingWithIce,Not the best impression of [passport.js](https://www.passportjs.org/) when its website presents me an invalid SSL certificate..,1524137637.0
,[deleted],1523985068.0
adstwlearn,"Recently I've had a few Chrome extension ideas I've wanted to make - but I knew first I would have to learn a little bit about the Chrome extension ecosystem before I could really make anything useful. [Here's a link to the extension in the Chrome store](https://chrome.google.com/webstore/detail/ribbon-reminder/ahdegcekcodbkojmccabgmfcfddabnbd).

A while back I made Ribbon Reminder for iOS in Swift - I felt its simple concept would be a good first Chrome extension project. It's just a simple reminder-like tool that lets you update notification counts on the extension icon so you don't forget important tasks - kinda like a ribbon wrapped around your finger.

At first I set it up just using raw javascript, but I quickly realized I needed a templating system - and why not choose my favorite front-end library for the job? Working with Vue inside the extension made things really simple - that hardest part was getting the project structure set up. It is a little tricky working with the manifest.json and understanding the different script types a Chrome extension can use.

[The code](https://github.com/johndatserakis/chrome-ribbon-reminder) is open-sourced so you can take a look at how it all came together, and use the code yourself. I'd also be happy to answer any questions anyone had on this type of project - although I must confess I really don't know too much haha - in the future I plan to learn how to incorporate background and content scripts into the project. ",1523971598.0
Arkaad,What the hell is that thumbnail?!,1524018379.0
ameo02,"if I made something like that I'd demo it's ability to replace original browser scrollbar as first thing [on codepen]. every single creator of scrolling for vue seems to omit that. don't know why since that's kinda what users are going for,
simplest way to replace browser's scrollbar.",1524085158.0
gevera,Thank you. That is useful ,1523974438.0
,"Vuetify is just superb.

Very thorough list of components and growing daily. ",1523998176.0
BurritoBashr,"I’ve been using Element UI for a project, really well done. Their entire GH is in Chinese so it’s sometimes a barrier but they do a really good job of making sure things are translated into English. Only come across one minor issue while using it so far.",1523990915.0
iamnotnotnotafrog,I highly recommend VuetifyJS. It is a material design framework with an amazing community. The documentation is great and they are constantly improving it while adding new features.,1523999667.0
Flipper3,"Missing my favorite from this list: https://bootstrap-vue.js.org/

Vue-Strap is listed in the list, but it does not seem to be actively maintained and the support is lackluster compared to Boostrap-Vue.",1524000331.0
BlueFolliage,Thanks for the post!!! I was looking for a framework to use today and choose it because of the post. Thanks!!!!,1524007473.0
rluzardo,Vue material https://vuematerial.io,1523998576.0
roryjarrard,"It's a little confusing what your qwertyDisplay is. Like,  is each ""key"" a styled div? If this is a div or something similar,  then event.key is irrelevant, and you can just add a class to the event.target in your click listener.  

$(e.target).addClass(...)

Where e is the event of click and target is the element you clicked. 

The function automatically gets event if there are no other parameters

<div @click=""myfunc"">
...
myfunc: function(e) {}",1523939006.0
Lelectrolux,"Did you try vuejs native [class bindings](https://vuejs.org/v2/guide/class-and-style.html#Object-Syntax) ?


I could give you more pointers, but as I don't know any specifics about your implementation it's a bit hard.",1523956518.0
roryjarrard,"So assuming your events are triggering,  I would form my keyboard with each virtual key having an id like

<div id=""keya"">a</div> 

And in the function

let key = '#key' + event.key;
$(key).addClass('myclass')",1523943385.0
bbslimebeck,This is the programming equivalent of those new kinder surprises where the toy comes prebuilt and you just put a sticker onto it,1523955509.0
VIM_GT_EMACS,nuxt does static site generation and is pretty great,1523912922.0
smitjel,The TODO list mentions blogging support...that sounds pretty cool.,1523932505.0
gevera,I am wondering what's the difference between this and NUXT and what should I focus on? ,1523924791.0
bmarkovic,"Very cool. But in all honesty I'd be happier if all this was available in Vue Devtools though, as I only need this in development and don't like the idea of having multiple tools do the same thing.

Given how the Devtools are an open source project (https://github.com/vuejs/vue-devtools) I wonder if this effort could have been better spent there (I can see them objecting to direct state manipulation b/c time travel, but realistically this is lab JTAG probing we're talking here).",1523894423.0
the__itis,cool idea ,1523888811.0
elimcjah,"This is very interesting.  I will have to look deeper into it later, but can [OP  u/magenta_placenta](https://www.reddit.com/user/magenta_placenta) give us a better idea of why this should be used in conjunction with(or instead of) the [Chrome Vue Devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en)?",1523901026.0
compubomb,"I think this is probably useful. to have i you're in a browser like IE / Safari which don't have ""native"" extensions and you need to debug something in one of them. But I dont' see any component tree's explaining hierarchies.",1523909910.0
khoker,This is great.  I've been working on something fairly similar.  I like how you implemented the slide-out panel.  Might have to borrow that :),1523913018.0
Cheshamone,Are you able to use something like [nuxt](https://nuxtjs.org/) to server render the entire site or do you need the components injected into pages that are being served elsewhere?,1523904447.0
jaredcheeda,"it shows Evans State of Vue in Amsterdam, but his more recent US one just went up on Vue Mastery's youtube channel",1523879815.0
CaptainInsane-o,Show us.  It sounds like you have some architectural issues right off but I wont know until I see the code.,1523884864.0
JonTargaryanTheFirst,"<v-flex xs4>
                            <div v-html=""weather"">
                            </div>
</v-flex> //This is the part within template

weather() {
                return '<a class=""weatherwidget-io"" href=""https://forecast7.com/en/""id""/""town/"" data-font=""Consolas"" data-icons=""Climacons Animated"" data-mode=""Current"" data-days=""3"" data-textcolor=""#ffffff"" data-highcolor=""#ffffff"" data-lowcolor=""#ffffff"" data-suncolor=""#FFFF00"" >Town here</a>'
            }, //And this is the computed function it returns

So to clarify. It works like 50% of the times. And 50% of the times it will only show a blue link saying ""Town here""
",1524117952.0
aesamattki,You should build a Mastodon client with this,1523911966.0
shif,"Thanks, the 4 talks there were great.",1523892195.0
Bergerton,"I’m building out a sizeable project that reuses many single file components and I’ve setup a few git submodules.

Definitely working out for me. ",1523850748.0
RedShift9,Check out this similar thread: https://www.reddit.com/r/javascript/comments/89y2sp/best_way_to_share_code_between_projects/,1523860131.0
irphunky,"We have a separate NPM package that is hosted on private bitbucket and is brought in via GIT+HTTPS with an app key.

Had so much bloody trouble getting it to work with  GIT+SSH it made me want to tear my fricking hair out!

It works now, but I bloody hate it.",1523865743.0
mingyjongo,"So the initial render of a statically generated site in Nuxt is straight plain HTML, so you're right, beforeMount wouldn't be called. But after that, it will behave as an SPA, so every subsequent page/component load will call that hook

(someone please correct me if I'm off)",1523810483.0
kaelwd,"It's called during hydration, before the render function runs. ",1523857975.0
kaelwd,https://i.imgur.com/Br00TCn.gifv,1523809124.0
max__d,I went on this site and I got a subscription to something that I don't even know what it is.Thanks a lot dude,1523785225.0
thiswasprobablyatust,Is there some part that uses it more extensively? Otherwise I don't see anything that can't be done with a single line of javascript \(toggling an accordion\).,1523774834.0
theianjohnson,"I don't know if I'd call my site more extensive, but the plan portion is all Vue  (some jQuery still, but almost all removed) and some bastardized Vuex (which I'm working on migrating to) - https://tripoftrips.com/plan/157?key=xtwk1xa2nm#!/overview",1523813529.0
srtgt,"Thats not a good example, get rid of jQuery :)",1523806936.0
mmcgu1966,"While the vue code may be best-ever, saying it's ""well designed"" is a bit off. If I produced this for a client, they would have a list of things to make it presentable. 
There's a saying: ""An ounce of image is worth a pound of performance"" and the amount of work that went into this example is totally overshadowed by the sub-standard UI. 
",1523800814.0
ABadWomanDriver,You should be using v-model here instead of v-bind:value. The value binding is only one way so it’s not being written back to the Vuex state. You also be using the “key” attribute on your options elements. ,1523820889.0
thinkadrian,Are you using the Vue eslint plugin? https://github.com/vuejs/eslint-plugin-vue,1523757039.0
,[deleted],1523737731.0
sadEmoji,You can make a computed property that returns an object with athelete.id as key and the athlete object as value. So that way when rendering it won't have to go through the array with every iteration. But then again you won't really notice any difference with either strategy. But I would do the map thing.,1523774952.0
irphunky,Perfect timing :) I was just looking at something vue based for my personal site.,1523724644.0
mapaj, Can it use axios to get data from external sources?,1523732675.0
Kazanian,Sadly not the Vue-Version of Gatsby i was hoping for.,1523731814.0
tweettranscriberbot,"^The linked tweet was tweeted by [@youyuxi](https://twitter.com/youyuxi) on Apr 13, 2018 22:15:43 UTC (511 Retweets | 1630 Favorites)

-------------------------------------------------

Something I’ve been working on for the past 2 weeks: a fully Vue-powered static site generator [https://vuepress.vuejs.org/](https://vuepress.vuejs.org/)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1523722100.0
segphault,The full npm install footprint for this is [over 800 packages](http://npm.anvaka.com/#/view/2d/vuepress). This seems enormously complicated for a static site generator. I think I'll pass.,1523726693.0
Downvotes-All-Memes,"I will definitely be waiting for the ""blogging"" part of this to get fleshed out a bit more. I just don't write technical documentation. I don't think this is necessarily the ""static-site generator"" that people think it is.",1523745026.0
phouri,"Usually because it has the benefit of avoiding the annoying Vue.set practice which is a bit hard for beginners to understand.

I personally use maps in such cases.
Edit: which is exactly where your example would’ve failed, you can’t do state.all[id] = ... as it wouldn’t be ‘reactive’ but you’d have to use Vue.set(state.all, id, value)",1523698455.0
SandFriend,"Yep, some of the tutorials mention this as being a better practice. The [hacker news](https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/store/index.js) clone implements it like this. If your data is relational and nested you can also use a tool like denormalizr to remove the nesting and get one level of entities, making utilizing the store like this easier. ",1523718410.0
sqzr1,"So after some research I found this: https://github.com/vuejs/vue-cli/blob/dev/docs/env.md#modes

So I went ahead and created 2 files; `.env.production` and `.env.development.local`. My next step is to add the cmd line arg `--mode development` to my build commands BUT...

My project doesn't call `vue-cli-service` explicity (this is where I need to pass the command line arg). My build commands are like so:

	""scripts"": {
		""dev"": ""node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js"",
		""watch"": ""node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js"",
		""production"": ""node node_modules/cross-env/dist/bin/cross-env.js NODE_ENV=production node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js"",
		""rmdist"": ""rimraf dist""
	},

And if I pass a `--mode xyz` argument here webpack 3.11.0 crashes and complains. Any advice how I can implement this?",1523719605.0
nwsm,"why are new /r/vuejs posts always super high on my home page?

this was #1 for me with 4 points in 30 min",1523640461.0
danstansrevolution,"I've used a couple other markdown applications, stick to the one in VScode for now. I'll give this a try, looks promising.",1523649434.0
amival,"Amazing, this is my favourite markdown editor atm",1534087042.0
bilzen,4/14 is online. What are you talking about?,1523560702.0
,[deleted],1523584759.0
usx-tv,"We have a similar approach at work.

We have a very big product, with various different independent applications doing there own things, accessible via a dashboard.
The dashboard is also it's own application.

Here I would essentially have:

1 - Portal App
2 - ""Dashboard"" App (allowing users to go to X, Y, Z apps)
3 - Other Apps depending on needs.

Separating your portal / login app from the dashboard may also be very beneficial if your application grows in the future.

Your approach sounds solid to me. It will most definitely be easier to maintain in the future.

However, there are a few points I would like to raise:

1 - A single database might not be the way to go. You need to consider if both of these applications will be accessing the same data or not (also publishing etc). Is there a real need for everything to be on one single database, or could there also be an advantage splitting them up?

2 - I am by no means a security expert, however I would add an extra layer on the authentication side of things: From what I understood you want your apps to simply reference the stored auth token. You might want to consider an extra layer of security, having a service that each app calls to make sure the user is authenticated, and would also be able in the future to handle rights etc. (I could possibly be very wrong on this and your approach may be right).",1523605572.0
__neone,You’re losing scope of this when defining the onClick. Use => to keep this in scope. ,1523561414.0
ForSpareParts,"Is there a particular reason you want your components in two files? vue-loader (the webpack add-on that compiles Vue components) isn't really set up to work this way; it assumes that your code will be *in* the `<script>` tag -- that's how most people write them, and it'd probably be easier to do that.

If you really want it in a separate file, you could probably `import` the contents of another module inside the `<script>` tag and then `export default` them again. I'd recommend against it, though.",1523545521.0
parilax,"If I have to guess, I'd say your issue is passing an Array to the components property instead of an Object. ",1523544385.0
irphunky,"The error is being pretty clear, you can't have a component name of 0 - so have you checked the name of the component?

Show your components code, rather than the console error log.",1523543932.0
protocol114,"Can you share the source? Seems to me something is out of place from where Vue expects it, but I can’t tell any further without seeing the source. ",1523543938.0
G5Corp,"I suspect it’s because `filtersPanelActive` is nested in the search page module, while the mapState array notation is looking for that property on the top level.  Have you tried `...mapState({ filtersPanelActive: state => state.searchPage.filtersPanelActive })`?  I’m on mobile, sorry for the formatting.

The “Binding Helpers with Namespace” section [in the docs](https://vuex.vuejs.org/en/modules.html) has some examples. ",1523537212.0
ilthari,"I would recommend using `mapGetters` over `mapState`, as it is generally the preferred syntax for just retrieving the value. You are modifying the state through a mutation, so a getter is a much cleaner syntax:

    getters: {
      filtersPanelActive: state => state.filtersPanelActive,
    },

And then in your component:

    computed: {
      ...mapGetters([
        'filtersPanelActive',
      ],
    },
",1523541059.0
pyran1208,"Component based architecture is always a good thing, especially for code Organisation.",1523523091.0
FergusInLondon,"
A lot of this is personal preference, but I if I was to explain my thought process when it comes to breaking elements out in to their own components, it would look something like this:

1. Is the element used it multiple areas, or likely to be in the future? (i.e form fields) 
2. Does the element contain any specific logic? (i.e forms with validation) 
3. Does the parent element need tidying up, does it look large and busy? (i.e a root element with lots of responsibility and page scaffolding) 

As you can see, it's a mixture component reuse *and* code organisation.

As a good example of the code organisation point; I often find myself making a `layout` directory containing components which are a direct child of my root element; like navbars, footers, or sidebars. 

Although these components are never reused, if I didn't isolate them then my root element would become large and unmaintainable. ",1523528890.0
zmasta94,In addition to the two other comments: components are great for teams too. Multiple developers can make changes to the same area of a web application without treading on each others' toes. One can work on component A whilst another works on component B. Both components might be parts of Feature 1 but the developers are working on two different files so no code/merge conflicts. ,1523560626.0
usx-tv,"Another addition: 

Dummy components are what I find the most useful. I will generally have something like this:

Let's say we have a homepage, some todos, and a checkbox on each todo to change it's state.

I will obviously have a home view, which itself will not do much besides import components.

From here I will have a ""todo"" component, that will contain most of the todo logic.
I will have multiple components imported on the todo, in our case a component to list the todos, and a component to change their state (checkbox).

Now checkbox and list will be as dumb as possible. They will receive props, and will simply trigger emits where needed (checkbox ticked).

It's the actual todo component who will be accessing the store, distributing the needed props down into the children, listening to emits, and triggering actions on the store.

This allows you to easily reuse these dummy components elsewhere when needed. It might seem overkill at first, but it's very future proof, and I find it's a good habit to have.",1523606408.0
janslu,"I'm just a stranger on the inter webs, but I hope this will help you:

> if i'm using vue.js do i need to use vue-routing and cli in the server even though i could just drive it with cdn and then just use regular express.js? 

No. You may just include Vue from cdn. Vue doesn't have to have a server component, unless you need SSR for performance, SEO or other reasons. 

> do i need really need vue-routing to achieve spa does does vue-routing need to be configured in the server aswell to achieve SPA

IF you are going to implement SPA with url path changes when changing content or ""logical"" pages in your app, then vue-routing is the best solution to have it working in Vue application. The server configuration part is only to make sure that when user enters your app using a specific path, the server will serve your app to the user and not a 404 error. During browsing in your app changes of urls are only ""virtual""/programmatic. But once you enter the same url manually and hit enter, the request goes to your server. Will it know to display the main app page or respond with 404?

> is it good software architecture if i only push purely json data from my routes ""e.g views"" for dynamic content and drive all front end stuffs ""e.g public express static""? using
> app.use(""/public"", express.static(__dirname + ""/public""));

It all depends. Do you have to take the SEO issues in the account? Will your site be working ok for google spider? Do you need Facebook sharing (og:* tags cannot be set by javascript, and have to be set in the page source)? How large your app will be after compiling and will the delay in render be noticeable for users (especially if you have a large number of users on slow mobile connections)? ",1523527859.0
LynusBorg,"You probably are missing this in the head of your index.html:

    <link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons' rel=""stylesheet"">

It loads the ""Material Icons"" icon font",1523479387.0
Rockroxx,Not to be a debby downer but you are not building a video player but embedding a youtube video to act similar to youtubes design,1523477461.0
redblobgames,"(I too am using Vue for individual pages instead of a SPA)

Without webpack/browserify/rollup/etc. you're not going to be able to import most components. However, Vue.Draggable *is* built so that it can work without those. See the end of the page, where it shows you can use three `<script>` tags to include it (one for Vue, which you probably already have, and one for Sortable and one for Vue.Draggable).  Vue.Draggable will globally register itself with Vue, so that you can use the `<draggable>` component in your own stuff.
",1523486475.0
mdelally,Look into what Vue calls single-file components. This will allow you to write simple to complex one-off components that you can drop into your markup like this `<component></component>`.,1523484552.0
Boydbme,"These look nice, but I’d also like to see a few boring non-epic ones in there for UIs where being understated is appropriate. ",1523797062.0
mrpmorris,Those are excellent!,1523468548.0
Droid2Win,What is the advantage of using this over animate.css directly?,1523544092.0
mrpmorris,"I found the API for the project to be exceptionally good, probably better than the book I read.

What is it that you find lacking? Just being nosey.",1523469070.0
mattaugamer,"You're asking this in a VueJS subreddit, so you won't get a particularly unbiased assessment.

Trying to understand which frameworks are ""better"" is misleading. In most cases there are priorities, trade-offs, preferences and subjective values. I'd also say that if you **really** want to know the advantages of each you should ask those subreddits too. Seeking information only from a specific source will only confirm your preconceptions, not give you good information.

I've actually written pretty extensively about this, doing a series of articles on [React](https://medium.com/@mattburgess/party-of-five-react-cf755ebe0904), [Angular](https://medium.com/@mattburgess/party-of-five-angular-34689718d194), and [Vue](https://medium.com/@mattburgess/party-of-five-vue-f78f163dde3f), as well as others. 

Essentially React and Vue operate in a similar space, they have a roughly similar scope - a library for binding state to the DOM. Where they differ is in three key ways. First of all, the core libraries used by major frameworks - particularly state management and routing - are first party in Vue, but third in React. That makes them better documented and integrated with Vue than with React. For example, Redux with React requires a pretty crazy amount of boilerplate to get hooked up. Vue's exquivalent (Vuex) takes vastly less. Still a fair bit, but less. A second major difference is JSX vs single file components with templates. Whether JSX is an abomination or the second coming is entirely subjective. Personally I lean towards the former. That said I don't like single file components either. Horses for courses and other cliches.

The last difference is the key one, which is abstraction. Abstraction is the principle of hiding the underlying complexity of a technology. ORMs are an abstraction on SQL, etc. Frameworks live on a continuum from little or no abstraction right through to extensive. React is at the ""none"" end. To compare the difference, here's the syntax between an event or action in React and Ember, which is at the other end of the abstraction spectrum. React: `onClick={() => this.saveUser()}` vs Ember: `{{action 'saveUser'}}`.

There's no right answer to this continuum. I like abstractions myself (I'm actually an Ember user primarily) but React's lack of abstraction provides power that can be dangerous for the less experienced. Vue is more in the middle.

Angular is a very different thing. It's a full framework, that ships with templating, routing, an exceptional state management tool (observables), etc. The experience in something like Angular is significantly more tightly integrated. It has a quite different workflow, Angular has a CLI tool vastly more capable than either React or Vue. (It was actually copied from Ember, where it's even more capable.) This gives it things like code generation and test execution.

There are a ton of advantages to Angular's approach. It's highly opinionated, which means there aren't widely disparate approaches to tooling and architecture like there are with React and Vue. This may sound like it's a disadvantage, but for business and enterprise, stability and nice happy path are critical. This is why you often see businesses using Angular, while more cutting edge startups go with React.",1523523504.0
derSchwamm11,"I recently started using Vue, but when I found out I needed to use React on a project at work, I decided to build the same project twice, once with React, and once with Vue.  I have never been a full-time JS developer so both were relatively new to me.

My big takeaways:


**React - Pros**

- Good documentation

- Lots of third-party support

- Create-react-app works very well


**React - Cons**

- Weird syntax and conventions. Frequently got hung up on small things

- Worse conditional rendering support than Vue, etc. (nothing like v-if)

- Redux is complex - lots of boilerplate


**Vue - Pros**

- Single file components rock

- Vue CLI works very well (out of the box SASS etc)

- Great conditional rendering, looping, etc. in HTML

- Vuex is simple


**Vue - Cons**

- Fewer third-party libraries available

- Slower performance (possibly)


After doing the React version, I thought the Vue version would be faster.  **However**, the Vue site took just as long because some third-party plugins I had used in the React version didn't have a Vue counterpart, and I had to write more code myself.  Vue was overall less frustrating and the clear winner for me (again - I am not a full-time JS dev or frontend engineer).  My only caveat is that my project does a lot of intensive data processing, and the React version seems to perform better, but this could be due to misuse of Vuex or computed props, etc.

I have never used Angular so I can't speak to it
",1523453734.0
Droid2Win,"I haven't used react before, so take any comments on my react comparisons with a grain of salt.

1) Vue is a full framework. React is a ""library"". What this means in practice is the Vue team maintains all of the pieces needed to make vue a full framework (view binding, routing, cli, etc), whereas with React you depend on third party libraries to build it up to that level.

2) Vue has true separation of concerns. This is an opinionated statement, but to me JSX seems like a truly horrible concept. Co-mingling HTML and JavaScript just screams like a violation of every programming principle I've learned my entire career, and it seems to lack the elegance of Vue and Angular. In both of those frameworks, your HTML is in your HTML, and your JavaScript is in your JavaScript, and they stay apart.

3) Compared to angular, Vue is easy. It can do all of the core things that angular can do (while it lacks some of the add-on stuff, like form validation, native http client, dependency injection, etc), but the API for working with it is beyond simple. I was able to build a simple, practice vue application after just 20 minutes of reading the documentation.

4) Vue is convention over configuration. This goes hand in hand with its simplicity. The code you right has a little less flexibility, IMO, but because the convention you must follow is so simple and straightforward, it makes Vue easier to work with, and makes Vue code from anyone easier to read.

5) Use as much or as little of it as you want. Unlike Angular, Vue doesn't force you to build a super complex single page app out of the box. Everything it does is is ""optional"", for lack of a better word. You choose which features to use. It can be as simple as adding it via a script tag in an existing HTML page t add a few cool features, or using the CLI to build a full SPA.

6) It has a robust community. This one is true for all three frameworks, to be honest, so it's not really an advantage for Vue. However, the few things Angular has that Vue doesn't can be found in third party libraries.

And... that's about everything I can think of. Hope this helps.",1523452814.0
cutety,"Haven't used Buefy, only briefly played around with Vuetify and quickly found out I actually didn't like material design, and built a small project with Bootstrap Vue (or some other boostrap vue ui component wrapper library) when Vue was still 1.something (or maybe very early 2).

However, at work I started on a new SaaS application a few months ago, the frontend is a Nuxt.js app, so I opted to go for ElementUI as well instead of slowly just ending up rolling my own similar (but not as great) UI library like I did when building out my last app (though Element didn't exist when I started that one). Thus far Element has been great to work with. The speed at which I've been able to build out the frontend with Vue, Nuxt & Element has been incredible, very enjoyable stack to work with.

One of the requirements when building an app where I work (most are for interal use) they have to (at least try) to follow the branding guidelines. My biggest frustration with other component libraries/frameworks is how much of a pain in the ass it can be to override their styles. However, this has not yet been an issue for me with Element. If you need to adjust the color scheme used by element components, it's just as easy as overriding some SCSS variables. Need to override some styles of a nested element of an Element component? No problem! Element use BEM, and I've had literally zero issues overriding any part of an element component I needed to make an adjustment to (no more throwing `!important` everywhere out of desperation and praying god forgives me for my sins!). I think it also helps that Element's component design is much less opinionated and minimalistic (in my opinion -- at least compared to something like Vuetify).

I'd definitely recommend giving Element a try. My only complaint is that the components aren't fully modular, for example there are some components that can display icons inside them, however if you are wanting to use a different icon library than the one element comes with there's no way of swapping out the element icon's for your own whether that be via some config or a `<slot>` mechanism. But, that's not a deal breaker for me and hasn't really been more than a very minor annoyance. ",1523449005.0
RoganTheGypo,"Been working with Buefy recently and have worked with Element and Bootstrap \(but not vue\) Buefys prob my fave tbh, you get more of a freedom feeling imo. The rest are good, just I like Buefy the bestest.",1523475244.0
OF_Shervin,Bulma! :D,1523606037.0
hadokee,No one are using Quasar? I'm new at vuejs and I al starting with Quasar as UI. Is a good choise?,1523655611.0
shapeshifting_robot,"I just rebuilt a client’s checkout in Vue (was in jquery) and it’s a huge improvement. Customers find the experience much more enjoyable and less buggy. Adding things and making changes is easier, the cart library has a much smaller footprint (went from 58kb to 2kb).

I’m on a campaign to eradicate jquery from that client’s codebase, so my rule is: if it can benefit from Vue, Vue it up!

You mentioned the menu bar. That’s my next project. I just rebuilt the live search and it works so much better than the jquery version. And now that I have all this whole Cart API built, I’m definitely implementing a Vue-driven menu bar to keep that data as real-time as possible.",1523428814.0
tonjohn,"Even for simple projects I’ll use Vue. Building out components just makes so much since!

If you are writing spaghetti JavaScript or have a bunch of state to manage it’s probably worth using Vue. 

One of the best parts of Vue is that you can progressively migrate. Sarah Drasner talks it at https://www.smashingmagazine.com/2018/02/jquery-vue-javascript/",1523510114.0
Arkhenstone,"There is no overkill if you do something that enhance the end user experience or if you're gonna maintain it. 

If what you'll do in vue is worse than what you did, just stick with it. If it's the same or better, do it. ",1524496257.0
thelonecabbage,"Incredible!!  Is it possible to add other component libraries?  (Vuetify, etc..) (not a feature request, just wondering if I should do a PR or not)",1523431904.0
uNki23,Online demo would be great for a first impression ,1523428634.0
evilish,"Wow. Awesome work! Can't believe how many features you've managed to pack in.

I was working on a GUI builder myself but then got side tracked with a freelance gig.

Any issues with me hacking on top of UI? :D",1523445422.0
Zanktus,This is really good for prototyping. Good work!,1523448129.0
LanFeusT23,"Neat idea!

MY team and I have had so much problems with Chromedriver though, I would recommend you use something else for your e2e tests that doesn't use it. [TestCafe](https://devexpress.github.io/testcafe/documentation/test-api/) or [Cypress](https://www.cypress.io/).

I npm install'ed and this happened again:

    npm ERR! chromedriver@2.37.0 install: node install.js",1523459780.0
ataraxy,Super impressive! Just on first glance one thing I would add (that isn't immediately apparent if it exists) is the ability to change div id/class names within the interface.,1523461547.0
gramlin42,Fantastic. Hope to be able to contribute.,1523463599.0
_sirberus_,"I'm gonna read this url as ""vweg"", thanks.

Also, looking forward to the vuetify integration.",1523444510.0
marinespl,http://i2.kym-cdn.com/photos/images/newsfeed/000/129/577/How+About+No.jpg,1523441545.0
jineshshah36,"I would argue that it’s frowned upon because it’s non-idiomatic js, and doing unnecessary magic. On the other hand, importing as an es modules has many benefits. It’s just as easy, allows for tree-shaking, and follows the best practices.",1523421467.0
compubomb,"you need some kind of index 1st. You might be able to build some kind of hook / handle before-compiling, but with regard to fetching from the server and seeing if certain things exist, you'd need a directory that provides some kind of index service / display what is available to be loaded. In languages like php, they will go glob(""*.php"") some standard code interface and the class may be the same as the file, and it impliments some standard interface and set of methods which get kicked off / instantiated when the object is created. So with regard to client-side JS.. probably not the best way to use plugins.. but.. what you could do is maybe server-side render some objects, and if vuejs see's they exist, it attempts to load some external file from some specific directory off the server. Key here are standard interfaces, and life cycle events you can predict in your plugin structure.",1523392820.0
Maklite,"May need some more information before being able to help you. 

What do you mean by ""if they exist""?",1523393366.0
Mekhami,"A better Data Table component. The ones I've used are frustrating.

Even better, but way more involved, is an alternative to Handsontable. I'm not a big fan of their software.",1523388960.0
amoshydra,"How about this? 

> A UI component library that's responsive, lightweight and is not completely material design

",1523409590.0
boultox,A fullcalendar without JQuery,1523386715.0
garfonzo,"One area I've often thought about was creating a better component set for web applications that are data heavy. I develop web apps for large data management, so lots of forms with a lot of fields, then displaying and querying that data, presenting it in different ways. I've never found a solid solution for that kind of scenario. ",1523414502.0
brusername,Typrscript,1523397637.0
keyeja,"Check the head element of your HTML, the styles should be inside a style tag.",1523378110.0
carrot_gg,It will be in your js bundle. If you are using ExtractCSS in webpack it will be loaded as an external css file.,1523384863.0
Zergorc1992,Dude this is epic,1523374967.0
quangpdt,"Great work! The UI is so elegant and the idea is awesome. I also added your project to our website, a collection of many JavaScript stuffs for *Full Stack Warrior*: https://fswarrior.com/detail/26/indian-premier-league-dashboard.",1523602780.0
kn0ckle,"Great work, some transitions would make much smoother i believe.",1523352013.0
Sphism,Maybe vue-orm is the thing i need? But that doesn't look like it syncs to a backend?,1523330109.0
usx-tv,"My VueX store generally functions like this:

- I have an action (`getData()`) who uses and independant service to retrieve data from an API. This service is imported and used like: `let data = await importedService.getDataFromApi()`.

- Once the data is back, I commit a mutation that will add it to the state. Depending on needs I might manipulate a bit beforehand, but I tend to keep it raw and manipulate it elsewhere.

- In the component itself, on `created()` I dispatch this action (`getData()`). Obviously from here I use the state data and use everything as needed.",1523618665.0
ForSpareParts,"You actually can return data from an action. `dispatch` returns a promise that resolves when the action completes. So you can either

1. Return a bare value from your action, in which case it'll just get wrapped in `Promise.resolve()`, or

2. Return a promise from your action (say, to wait on your AJAX call) and then resolve that with the data you want.

But you're right in spirit: actions are expected to call mutations and modify state -- even if you do return data from the action, your action should probably be setting state at some point.

I'm an Ember expat myself, so I know where you're coming from with Ember's models -- they're awesome! Vuex is more general, more flexible, and (for better or worse), less full-featured. IMO it shines when you're sharing non-AJAXy data between components that are spread throughout the app -- the kind of thing you probably would use a service for in Ember. For data that you get from/send to the server, Vuex is... fine. It requires that you do the heavy lifting.

If you want something more like ember-data, I think that [js-data](https://www.js-data.io/) was actually modeled after it? It's kosher to use non-Vue/non-Vuex libraries in Vue -- one of the things I like better about it than Ember -- and you shouldn't feel compelled to use Vuex, for instance, if it doesn't fit with your project. Or you can use it for only some stuff, and js-data for others -- my last big project had a large Vuex store _and_ a separate data model that we built out of vanilla TypeScript classes to house most of our business logic. Whatever makes the most sense for what you're doing.",1523333768.0
_sirberus_,No nuxt?,1523311286.0
Sydtrack,I'm following closely. Will begin a project based on it soon. ,1524355983.0
konaraddio,Clickable link: http://builtforvue.com,1523315939.0
abishekrsrikaanth,"@simlo, thank you.
@konaraddio, appreciate your help posting a clickable link",1523408799.0
simio,That looks great!! good job!,1523336607.0
abishekrsrikaanth,BuiltforVue is now on [ProductHunt](https://www.producthunt.com/posts/builtforvue),1523567548.0
Fzbravozf,"(Author Here) I saw a thread on twitter on this, and I'd thought I would share. ",1523289490.0
higherlogic,Thanks. This is exactly what I need to update an object that was pulled via an API call but depending on the user’s preferences needs to set a default value that I can’t change (because it would mess up the original preference). ,1523300777.0
kaelwd,"**tl;dw:** They're emitted as events, so you can use `@hook:mounted=""onMount""` or `this.$once('hook:mounted', this.onMount)`",1523360798.0
DOG-ZILLA,"Thanks! This is a nice to know tip. 

Does this override the entire hook? As in, can you also have the more traditional hook in place as well, or does one cancel the other?",1523295377.0
Fewthp,"I only just saw it was posted already, via another link. My bad.",1523347562.0
ganjorow,"You need to import variables and mixins you want to use in each component.
You can either import the neccessary files like in your example above, or - if you're using webpack - you can use a loader like shown in https://github.com/vuejs/vue-loader/issues/883#issuecomment-317557131 and there's even a section about using a global variables file on https://vue-loader.vuejs.org/en/configurations/pre-processors.html.",1523276321.0
daekano,https://news.vuejs.org/,1523312410.0
terrymooreii,"Hey Vuejs-ers, 
I created this site as a way to for me to learn Vuejs and it just grew from there.  The goal of this site is to have a central location for all of us to go that would collect the latest Vuejs news, how-tos, and information on components. Check it out and let me know what you think! Any feedback is good feedback ",1523273423.0
DOG-ZILLA,Are you using single file components? I just create a component called AppSlider.vue and put everything in there. This means I can reuse it and pass options / props etc. ,1523271907.0
OliverEady7,"> Can I compile it, add the app.js from the dist folder to the portfolio.html page, and reference the component?

This is the best way to do it",1523227012.0
dixncox,"If you render data that exists within the Vuex store in some arbitrary component, and you change the data using a mutation, your component should render and reflect the changes. There is no need to use a watcher. You can use a JavaScript event handler or something to handle some incoming event, and commit a mutation as a result of this event. ",1523149317.0
paladincubano,Nice but you should use vue cli 3.0 ,1523230514.0
williammck,"They use [Discourse](https://www.discourse.org/), which uses Ember for the frontend and Ruby on Rails for the backend.

There's not really a good, easy way to integrate Discourse into an app (speaking from experience) - most people just have it on a separate subdomain like the Vue.js team has done.",1523134073.0
Sir_Poot,Where is the authentication server? Local or Azure?,1523137981.0
Dday515,"I’ve not done anything like this with on premise AD, check out something like this: 

https://www.npmjs.com/package/activedirectory

If you’re using native “Windows Authentication” and just want to get the username of the current windows user, I don’t know that you can do that in JavaScript without adding in an authentication layer directly in the app.",1523147509.0
jake619,"Read here: https://vuejs.org/v2/guide/components-slots.html

Most answers are there it seems.",1523113530.0
snowboardy,"I'd suggest reading a bit more about Vue event handling and templating.  

1. You can't use curly braces in HTML attributes
2. @click is an event handler. You're trying to pass a href string, instead of a function name to handle the click.

The best way to do what you want is to bind item.href to the ""href"" property of the v-list-tile i.e.

`
<v-list dense>
    <v-list-tile v-for=""item in items"" :key=""item.text"" :href=""item.href"">
`


",1523112447.0
eyeruleall,"I think vuetify wants you to bind to the ""to"" attribute. 

Ex. :to=""item.href""",1523115558.0
vagr,Gitlab.com,1523111243.0
TheWildKernelTrick,Toyota.com,1523133078.0
wishinghand,"Facebook used it for some alternative newsfeed they had. Alibaba uses it for their sites and native app via Weex. 

I’d check the last 2-3 months of the Hacker News threads entitled “Who is Hiring?” And search for Vue to see if you recognize any companies mentioning it in their stack. ",1523122206.0
dchinab,https://madewithvuejs.com/,1523156894.0
GameDevPlayer1337,"The actual competition interface for Google Code Jam. I think you can also see the Vue DevTools light up, if you enter the 2018 practice round.",1523161381.0
slyfoxy12,HotUKDeals.com,1523142788.0
alyndvx,"Habitica.com
https://github.com/HabitRPG/habitica",1523216383.0
snowboardy,"Take a look here for a list: 

https://github.com/vuejs/awesome-vue#projects-using-vuejs",1523112908.0
propelol,"Seems like a problem that only very few projects will have. If you can't find it [here](https://github.com/vuejs/awesome-vue) then it probably doesn't exist.

Why don't you build it yourself? ",1523102621.0
minus0,"Just to clarify, they aren't interacting with the DOM, as Web Workers are unable to. From what I understand, there are still lots of slowness related to passing information into and out of the web worker.

I haven't looked into how they are doing it in the implementations you linked to, but I'm curious how much of a speed difference there really is.",1523119974.0
MichaelSorensen,"Have you tried this?
https://surmon-china.github.io/vue-quill-editor/",1523040818.0
,Built in typescript config sounds great. I never got around to trying to implement typescript but if it's a default option now I think I have to!,1523028590.0
my_name_is_memorable,"Can you upgrade an existing project vuejs project to vue\-cli 3, or does it only work for new projects?",1523042522.0
DOG-ZILLA,"Agreed it’s great!

Webpack config confused me at first though. e.g. I put in a rule for SVG but it kept using the default rule with file-loader. Apparently you have to remove the existing rule in Webpack chain first and only then add your test. 

Would be great to have more info on things like that, though it wasn’t a major problem. ",1523029986.0
aesamattki,Try Parcel as well. They have Vue support now and some super awesome features like auto installing modules you've included.,1523030610.0
cutety,"I'll open with a disclaimer that this is the first time I've ever looked at Tone.js (really cool looking library though -- may have to play with it more in the future), so this solution could be totally wrong. 

It appears that `synth.triggerAttackRelease` modifies the synth object, but also returns the new copy (or might be the same object). Either way, a solution to your problem is to move the call to `triggerAttackRelease` to a mutation, and update the synths array in the state when you call `triggerAttackRelease`. [Here's a simple JSFiddle showing this](https://jsfiddle.net/34bn7n8n/4/). If you open up your console, you'll notice that when you click the ""Play Using Mutation"" button that everything looks good, however, if you click the ""Play Not Using Mutation"" button, you'll see the exact error you're describing get spit out a bunch.

I'd also look into using a `Tone.Transport` to schedule the synth mutation calls, but I'll leave that up to you to implement if you so desire.",1522988741.0
ganjorow,"Don't use Vuex for the synth objects. If you want to share your synth states between components or want to create a history of played notes, just track or record the state of the synth or tones (like pitch, duration and time).

And then maybe think about a factory, that creates the synth object and notes out of the state in the store.",1523011505.0
toqy,"Fyi uBlock Origin does not like your domain

https://imgur.com/a/tX8CM",1522951428.0
DOG-ZILLA,"Nice write up! Is Vue Cli out of Beta now?

I've used it and it's simply amazing how fast you can get running with it. Lots of sensible defaults that I like about it.

Info on the env variables is super helpful. Thanks!",1522964344.0
nothingduploading,please stop promoting vue.js. otherwise millenials will come over from react and ruin it for me.,1522974734.0
acklavidian,Why is show answer an array?,1522963785.0
ColtenP,"No, not at all!

That’s actually why Vuex has a helper called “mapMutations” to well, erm.. map mutations directly to method calls within your components. As long as you’re not modifying the state outside of the mutations, you’re doing just fine!",1522886182.0
events_occur,"So, this is an accepted practice, and clearly Vue does support it. It really does come down to your needs and the scale of your project, but coming from a Redux world, I would like to argue against it. Here's why:

I think the data flow should be like this: a component wants to do something, so it dispatches an action, and the action tells the store ""what happened."" And the component shouldn't know how things update, and what will be updated. By exposing Mutations on the component’s public interface, you have given the component knowledge of how to update something, when logic is extraneous to the component (which should be for rendering), and that logic should be kept in one clean place. 

So we separate the responsibilities clearly, when we want to update the application logic, *just look into the store, never need to touch our components.* If we commit mutations everywhere, it's difficult to find out ""who is committing these mutations?” When putting commit calls inside the component, you’re moving responsibilities (assumptions about the store implementation) to your components, making them difficult to reuse, while also using $store.commit and $store.dispatch within the same component, making your code harder to read.

It would be like calling a Redux reducer directly inside a component, which is a big no-no. It's kinda odd, there is no line on that diagram you posted between the component and a mutation, probably for good reason, it just looks like an anti-pattern to fork the data-flow like that. 

But at the end of the day, Vue supports it, if not encourages with with mapMutations, so they must have really thought there would be tangible benefits to allowing this behavior. 
",1522907330.0
Robodude,"I've posted this previously, but at the latest Vue conference, they discussed potentially combining actions and mutations so that you'll only have 1 way to update state.",1522949536.0
dballz12,"Honestly the Vue docs are the best I’ve found. Vuejs.org I’ve been using it at work and some things are very tricky to find online but this is the best to get started. If you have any questions, I’ll see if I can help. Also - someone posted some vids from the vue conference in New Orleans - I’ll update this when I fine the link.",1522886630.0
matteusbrevik,Check on YouTube the channel by TheNetNinja. He has some very good videos on Vue.js,1522906454.0
Themissinggallagher,The documentation is very helpful. If you like videos I would suggest the Academind YouTube channel. He does a great vue playlist. ,1522939900.0
gazreyn,Vue docs are great. Laracasts also has some awesome tutorials.,1522905421.0
Ssvsgod,https://www.youtube.com/channel/UCLNgu_OupwoeESgtab33CCw,1522906930.0
lolhowdoes,"This is relatively new and is a great reference and should be helpful for whatever tutorial you follow.
https://vuejs.org/v2/cookbook/

 +1 for netninja on youtube. ",1522908943.0
damcclean,I've just used the course from Laracasts https://laracasts.com/series/learn-vue-2-step-by-step,1523009241.0
theLorknessMonster,https://vuejs.org/v2/guide/,1522898577.0
evilmaus,"The reason why you've heard so many different ways of doing it is because it really depends on your specific situation. The way that I tend to use Vue, it's to enhance a page within a multi-page app. So for me, server-side sessions are how I handle authentication. If you were building a SPA that hits multiple APIs, maybe JWT (or a better, but similar standard) would make sense.

As for Vuex, its state is kept in memory. Unless you have some way to persist it set up, that state will be lost when the execution environment (i.e. the page) closes.",1522873325.0
cutety,"Ah, yes the always fun SPA auth dilemma. There's some good points in this thread, but I would like to echo that the reason there is no single ""best way"" is because how context specific the optimal solution is. JWT make work well for some, however it may not even be an option for others.

For example, I just recently had to tackle this myself on my new project at work where the frontend is a SPA Nuxt.js app, however I don't think my solution will be that helpful for your situation, but it'll give you some different ways it can be done (and I'm hoping that if I'm doing something horribly wrong someone will be jumping at the gun to point out my stupidity -- so I can fix it).

So, why didn't I just follow the first JWT tutorial from google and call it a day? Well, (without some major infra configuration), JWT simply isn't an option for me. My project is an internal application, and my organization uses a *(shitty)* SSO provider to provide authentication for all applications. And fortunately for me, it's maintained by a few old school Java enterprise type devs, so you can throw most modern techniques out the window. With this constraint in place, the only sane way to handle auth is with a good ol' server side session. 

A quick rundown of the app's architecture is the frontend is a Nuxt.js in SPA mode, and I'm using the static build, and servering up the compiled HTML files via Apache (v2.2 -- just kill me now fam). The backend is a Rails 5 app in API mode.

So, how do I authenticate users when the first thing they hit is going to be a static HTML file and my only option is a server-side session? The solution I more-or-less follows these basic steps:

* A user visits the application
* The first thing the frontend will do before trying to display anything is make a GET request to the `/api/v1/whoami` endpoint on the backend
* If the user already has session, `/api/v1/whoami` will simply return a JSON object containing information about the current user, the app throws it into Vuex and finishes loading
* If the user does not already have a session (i.e. not logged in), `/api/v1/whoami` will return an unauthorized response, and if the fronted receives an unauthorized response to `/api/v1/whoami` it will stop trying to load the app and immediately redirect to `/login`
* `/login` is redirected by apache to the SSO service, where the user can sign in like they would
* Assuming a successful sign in, the authorized user information is then passed to the rails backend, where `omniauth` parses the information provided by the SSO service and creates the session
* Then Rails server will redirect back to wherever the user originally was, and the frontend will then start off with hitting `/api/v1/whoami`, but this time will receive the user's information back instead of an unauthorized response, and can continue on

That's the gist of how I set up auth given my unique constraints. Maybe this information will be beneficial to you somehow, probably not, but at least it can give you an idea of how many different solutions this problem has.",1522890988.0
bangorlol,"I used [vue-authenticate](https://github.com/dgrubelic/vue-authenticate). It stores the JWT token in localStorage (or a cookie) and makes using it easy. I validate it on the backend for each request and have route guards in place for authorization (roles/scope). It makes it pretty simple to block certain pages from users (public, auth-only, admin-only). The server and Vue client both use the same role names, so changing permissions is pretty simple. The library above lets you hook into Axios, so it feels super clean. Just add vuex methods that use your API classes/objects and go from there.",1522944715.0
,"May I suggest using Amazon Cognito? Specifically, Cognito User Pools.

It's a managed service provided by Amazon Web Services that handles all of that stuff for you. All you need to get started is an AWS account (which you can get for free).

Using this library: https://github.com/aws/aws-amplify/tree/master/packages/amazon-cognito-identity-js you can then make simple API calls like `user.authenticate()` or `user.signUp()` and Cognito handles all of the logic behind that for you. You just need to handle the business logic side of things. (e.g. if login fails, go to this route etc.) You can even integrate it with your server so that any request made to your application must have a valid user token.

As someone who doesn't like directly dealing with tokens and sessions and all that stuff, Cognito was a great option for me.

EDIT: updated repo url. Thanks, I forgot they moved it.",1522874926.0
zmasta94,Google Firebase is the easiest. JWT is my preferred. ,1522881966.0
bmarkovic,"Regarding your third question:

Vue.js is a view-model library (the VVM part of MVVM pattern) -- meaning it only provides HTML views, UI interactivity and data binding. Nothing more. (Do note that Vue router does provide what your first question is concerned with)

It has no concept of data models, and while it does have it's own [application state management](https://vuex.vuejs.org/en/intro.html), the data objects are simple JS objects garnished with reactive observability designed around the needs to interact with the HTML UI. 

However, while being bound to the viewed state through observability, those data objects are not a magical intertwining of local state and AJAX fetches. It is entirely up to the user to design and develop his own networking layer and means of communicating with backend storage.

If you are interested in Backbone-style (i.e. MVC style) models and collections in Vue, you should explore the [vue-mc](http://vuemc.io) library. Bare in mind that it really is a Backbone clone, with very little of it's design leveraging modern (so called ""MOVE""-style) state management best practices (and it has a [rather complicated relationship with Vuex](https://github.com/FiguredLimited/vue-mc/issues/9), but the authors seem interested to address them). 

And if you're interested in a ""all boxes checked"" starter for a PWA but built with modern state management in mind, you should start with the [Vue CLI PWA template](https://github.com/vuejs-templates/pwa).",1522853941.0
cutety,">Does Vue have a history object similar to backbones `Backbone.history`?

Not particularly familiar with `Backbone`, but a quick glance at the `Backbone.history` docs, it looks like `vue-router` (the official router plugin) should be close enough. [Here's the docs](https://router.vuejs.org)

>In vue are there events such as `view_show` and `view_hide`?

[Look no further than Vue's built in Transition & Animation API docs!](https://vuejs.org/v2/guide/transitions.html) I'm by no means an expert on all the JS frameworks, and even much less of a CSS transition/animation expert, but (for me at least) working with transitions and animations in Vue has been fairly easy an pleasant.

>Does Vue have something similar to backbones `backbone.localstorage`?

There isn't any official support via an API or plugin (to my knowledge) for localstorage integration. But, when using [Vuex](https://vuex.vuejs.org/) (the official state management library), it's fairly trivial (at least for my uses) to implement some `localstorage` integration yourself. However, the good news is, the Vue.js community is awesome, and there is a (seemingly well maintained) `vuex` plugin to persist the application state to `localstorage`: [vuex-persitedstate](https://github.com/robinvdvleuten/vuex-persistedstate)

Vue was my first foray into front end frameworks, and really (non-trivial) frontend programming, back when it was still in version `1.something` and I haven't cared to even look at anything else I enjoy working with it so much. So, I don't have much hands on experience with other frameworks like Backbone to compare to, but I have built out two fairly large production apps at work with it over the past two years or so, and I'm currently working on my third (using `Nuxt.js`!^([1])), so if you have any more questions about Vue, feel free to ask, I should be able to answer it, or at least point you in the right direction.

**[1]** *I'm fairly certain now though Vue.js/Nuxt.js has ruined any other kind of frontend programming for me -- going back to a SSRed Django/Rails template system actually sounds like hell*",1522851555.0
OmegaVesko,"Disclaimer: I've never actually used Backbone, so I might be off on some things here.

- Vue has a router (`vue-router`) that should be at least as advanced as Backbone's routing feature.

- Vue has an amazing [transition](https://vuejs.org/v2/guide/transitions.html) component that makes it extremely simple to write transitions to show/hide components in a declarative way.

- In principle Vue doesn't really do this out of the box, however there is at least one [plugin](https://github.com/robinvdvleuten/vuex-persistedstate) for Vuex (Vue's first-party store) that allows you to persist your state to localStorage, and I don't see it being too hard to write the persistence code yourself if you need to.",1522852015.0
Sphism,If you can't use elevation like normal then you should be able to look in your dev tools HTML inspector get the class name of the element then override the css from within your component. ,1522839365.0
MrNate,"There is a way, and you can do that in Vue, yes. I feel like if I told you how, I should get the credits for the class.",1522808732.0
CaptainInsane-o,Yes you can. What steps have you taken to get this vue app started? ,1522810245.0
nightman,Pass parameter to getter - https://github.com/vuejs/vuex/issues/688#issuecomment-285869557,1522834347.0
Hadora,https://vuex.vuejs.org/en/getters.html Method-Style Access,1522838773.0
cyanydeez,"In child HTML

    :my-prop.sync=""data""

Then in child, when ever you want to update the prop

    this.$emit('my-prop:update', newData)

https://medium.com/front-end-hacking/vues-v-model-directive-vs-sync-modifier-d1f83957c57c",1522793604.0
avenp,"I think it would be a good idea to not use template engines when you're trying to show off your library. I had no idea what Pug was before looking at this post and was very confused.

Edit: Cool lib btw! 👍",1522796007.0
phelaz,"From the docs:
When used on elements/components with v-for, the registered reference will be an Array containing DOM nodes or component instances.

[https://vuejs.org/v2/api/#ref](https://vuejs.org/v2/api/#ref) 

You can pass the index in your v-for attribute and pass that to your method to get the specific audio element and play/pause it.",1522787838.0
nwsm,I am no expert but if you are starting from the ground up you will probably just have one instance and use vue-router to go between 'pages',1522778506.0
Lmcsheff81,"Using multiple instances is fine, many legacy apps that integrate vue need to work this way (those using a legacy router etc.). Just ensure each instance is mounted on a distinct dom element and you’ll be fine. Check out tearing down instances too in your app",1522784067.0
Abuzz,"I just started learning as well, but shouldn't each instance just be a component?",1522780656.0
nightman,It's fine approach. For example https://github.com/karol-f/vue-custom-element spawns new instance every time custom-element is used,1522834517.0
AstroDevNerd,"I see most places using a single file component setup for Vue, but I’m definitely of the mind of having your languages broken up into separate files. 

I’d recommend having the js for your component in a separate file (but the same folder) as an html file for your template, then importing that template in your js and defining the template as your imported template.

Then having your sass be completely separate and compiled and minified into a css file that you then include in your base index html file.

If this isn’t making sense or doesn’t answer your actual question, let me know, and I’ll expand on it.",1522763283.0
iqen93,"Hey Folks!

I helped the Fullstack team (the folks behind [Fullstack React](https://www.fullstackreact.com) and [ng-book](https://www.ng-book.com/)) release Fullstack Vue!

A little context on the book. We all know how awesome the Vue documentation is, so Fullstack Vue is **not** geared towards replacing documentation, etc. Like other Fullstack books; Fullstack Vue is a project driven approach to learning (i.e. everything is explained within the context of building a larger application). As a result; in addition to introducing Vue, we explain all the main tools in the Vue ecosystem - (vue-router, Vuex, vue-cli, and vue-test-utils) and show how they can be coupled together.

Here’s a blog post I wrote that explains Fullstack Vue in a lot more detail - [What’s inside Fullstack Vue](https://medium.com/@hassan.djirdeh/whats-inside-fullstack-vue-76181d180099)!",1522762189.0
nightman,"It's basic Objects/Arrays in JS question - you assign only reference of it so you change original object/array.

You can clone it shallowly or if it's not enought deeply. For shallow clone:

- array: e.g. clonedSalesIitems = [].concat(data.data) 

- object: e.g. clonedSalesIitems = Object.assign({}, data.data)",1522751971.0
magenta_placenta,Why are you mixing jquery and vue?,1522762608.0
Singularity42,"If you have no back-end then you should probably just host it in S3 and not elastic beanstalk. It will be cheaper and more reliable. 

You can put cloudfront in front if you want caching, etc.",1522765928.0
DJLaMeche,"Do you mean refreshing the content with what you got from your Axios call? Then the way would be writing the data to your component's data object or the Vuex store. Vue is ""reactive"", and the page will automatically refresh the content when the data changes.",1522743534.0
_AdminAdmin_,"I'm not sure why you want to do this, but you could use location.reload(); inside for the response block. 

What are you trying to accomplish with the page refresh?",1522725847.0
ColtenP,"The way you can achieve this functionality is by setting a computed property on your Vue instance.

    ...
    computed: {
        title () {
            if (this.titles) {
                return 'This is the title'
            }
        }
    }
    ...


and then inside of your template do

```
<div class=""div1"" :title=""title""></div>
```

the : before the title attribute means that it will be bound to a property inside of your Vue instance.",1522719872.0
quinlo,"Interesting... Boolean attributes (like ""disabled"") can be bound and will not even appear in the DOM if bound value is falsy.  But for non bool values like ""title"" that won't work.  I would just add a function to your Vue instance that uses vanilla js to insert the title(s) in the appropriate Dom elements if state.titles === true.",1522720426.0
ReefyMat,"    <div class=""div1"" :title=""titles && 'This is the title'""></div>

See [https://vuejs.org/v2/guide/syntax.html#Attributes](https://vuejs.org/v2/guide/syntax.html#Attributes) for details.",1527880123.0
JoniSar,Works with vue.js as well.,1522689270.0
FergusInLondon,"Interesting, and looks pretty cool. I may have to have a play with it when I get the chance. 

I can't help but wonder what the advantage is compared to having a simple Git repository containing your components, and importing the ones you require? i.e by using the git repository as a yarn/npm dependency. Perhaps I've missed that on the website though.

I can't help but think that if you're building an internal library containing reusable components, surely it makes sense to package and use it like a library? ",1523367947.0
bobbytuck,"More, please. 

Keep going. I'd love to see this go through the entire code. :)",1522709759.0
iamnotoriginal,Going to echo everyone else's comments: I really like this.,1522765763.0
skipbridge,Something about “hypertext” rendering in typescript. I laughed out loud when I googled it. ,1522673299.0
captainair,"The Vue docs offer a brief explanation here:
https://vuejs.org/v2/guide/render-function.html#JSX

> Aliasing createElement to h is a common convention you’ll see in the Vue ecosystem and is actually required for JSX. If h is not available in the scope, your app will throw an error.

There's also a [Gitub issue](https://github.com/vuejs-templates/webpack-simple/issues/29) discussing this further, including a mention of the ""hypertext"" origins already mentioned.",1522727796.0
Tioo,"'h' is used in [hyperscript](https://github.com/hyperhype/hyperscript). Though vue has nothing to do with hyperscript, I think that's where the naming convention comes from.",1522680403.0
DOG-ZILLA,Thanks for asking this. I was wondering the same thing!,1522752559.0
Cheshamone,"Yeah, they're still reactive like a normal Vue app.",1522718259.0
OmegaVesko,">I've implemented a callback function on initialization but then found that it was crashing in Safari but was working great in Chrome. Removed it and made the way to work without this.

I might be misinterpreting what you were going for here, but would `mounted()` have done what you wanted here?

>at first created ""computed"" properties but when found that they are cached so moved them to methods. 

Computed properties being cached means that they only change when their _reactive_ (i.e. managed by Vue) dependencies change. Sometimes a method is just the right solution, but maybe something you used here could've been changed into a reactive dependency, so that it would work as a computed property.

>found no quick way to get the content of the element from the the view so used JQuery for this (like var email_subject = $('#subject').text();). It seems to be not a great way but maybe the ability to use JQuery inside Vue.js can really help in some cases.

The Vue way to do this would've been to use [a `ref` attribute](https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-Child-Component-Instances-amp-Child-Elements). Then you could either give the element object to jQuery, or (preferably) [just get its `innerText`](https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText).

(Although, having to get an element's text imperatively in Vue is a bit of a code smell in the first place - I take it this couldn't have been done with a `v-model`?)",1522672069.0
cyanydeez,"Note: $forceUpdate only works on the current component, and only on connected children via props.

It doesn't rerender everything.

Sometimes what you actually want is something like $parent.$forceUpdate",1522680996.0
TREYisRAD,"Probably not the answer you're looking for since it requires a bigger backend change, but I've been using FeathersJS on top of Node/Express with feathers-vuex and it has really simplified the real-time functionality of my app. It's kinda a DIY Firebase that works with any DB you want. ",1522728418.0
nothingduploading,can you isolate the issue and put it up on the web so we can see it?,1522650194.0
_wanglei,"hi,i met the same problem,did you resolved it?if did it,can you help me?",1531878090.0
Sphism,"Very cool. This is extremely similar to one of teh things I liked most about using Emberjs with Rails. You could just alter the model and .save() and everything persisted automatically, all the relationships and everything.",1522713085.0
Mochaka,"I've been looking for something like this, thanks!",1522662436.0
NotFromReddit,Nice. It looks like Eloquent. ,1522672407.0
jones1618,"Looks great. You should mention that this is a kind of ORM for REST APIs. Also, I think this would work well as a front-end layer for ODATA services, especially.",1522700799.0
nwsm,"Can I assign dynamic refs inside good table? I need to for a context-menu plug-in. 

I can achieve this by making a table with v-for but was not able to with good table v1",1522628485.0
YourCupOTea,Nice work. It looks easy enough to use while still providing some nice advanced features. I'll be giving it a star and trying it out next time I need a table component.,1522667364.0
1makfly,Very nice. :) Are you planning of adding an option men that is giving the user the ability to show or hide columns (and store their table setup in a cookie for instance)? ,1522969206.0
the__itis,are there any vue table components with built in CRUD,1522629273.0
N3KIO,"meh, you can wipe your ass with certificates, diplomas, or degrees

what matters is what you can show, projects you build its what really matters, hands on experience.",1522625035.0
DarkGhostHunter,"I think it could, but it won't, and shouldn't, cost more due to the scope Vue has. It's not big enough as other frameworks: you have a frontend reactive template system, and router and a state management, and that's basically it.

I hope Vue gets a official and lean way for form validation and XMLHttpRequest. Not that vee-validate and axios are not up to the task, but it's almost mandatory to install them once you start with Vue, but still you cannot make a whole front end app with just the basics.",1522625136.0
horses_arent_friends,"A long, rambling version of DOG\-ZILLA's answer with un\-asked\-for opinions: 

A lot of this comes down to your usecase \- I think Vue is much better suited than React for sprinkling in additional functionality on a page that is otherwise static content for the reasons you stated.

However, if you're building something moderately complex you really shouldn't be relying on a presentation layer library \(which both React and Vue aim to be\) for managing your application state \(or, for that matter, anything that isn't purely presentation\). Once you're at that point, it's harder to compare the two libraries directly because the ecosystem around them plays a much larger role. One way binding feels a lot less restrictive \(IMO\) when you're interacting with a centralized data store \(Redux/Vuex/MobX\).

To your second point, I definitely agree that it's tedious to have to manage rerenders yourself, but this also comes down to a matter of preference \- there a lot of developers that are uncomfortable with smart/'magic' features in frameworks/libraries. Keeping the render logic 'stupid' also means that it's simple to understand and reason about. The discussion around Vue vs React tends to confuse simple vs easy \(alternately, hard vs complex\). It's not at all focused on frontend but, if you the have time for it, Rich Hickey has [a fantastic talk](https://www.infoq.com/presentations/Simple-Made-Easy) on simple vs easy.

 Vue is still the tool I tend to reach for when dealing with the presentation layer on frontend applications, but there absolutely are merits to React's design choices \- it might just not be the right fit for your project.

If you'll indulge a tangent:

A common problem you see with poorly implemented projects that use React/Vue is that they tightly couple domains that should be completely unrelated \- core business logic, data validation, XHRs, etc are all mixed into bloated components that are painful to maintain or refactor. If you write unit tests \(read: \*not\* integration tests\) for Vue components that exist solely for validating business logic, mental alarm bells should be going off.

Sorry for rambling!",1522603957.0
DOG-ZILLA,"They’re very similar in concepts but yeah, Vue is easier out of the box for this. Just use whatever framework best suits your needs. ",1522599194.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/reactjs] [Is react core not intelligent compare to Vue.js? True?](https://www.reddit.com/r/reactjs/comments/88rvae/is_react_core_not_intelligent_compare_to_vuejs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1522599266.0
FaceySpacey,"As far as SCU goes, it’s more of a library tool. For example react-redux will use it to prevent unnecessary renders for you when state mapped to props hasn’t changed. You don’t don’t build your app worrying about it. You use it to eek out additional perf at the end if you run into a problem, like dropping frames during animations. And the thing is it’s not always faster. So where Vue gives you no/less recourse, React gives you pro tools to optimize perf and be in control of what’s going on. The long and short of it is that too much automation often leads to problems down the line. That’s true with any tool.

As far as two way bindings go, basically it’s the same as SCU. More control means when you reach that point where you want to do that one thing the library can’t do you don’t pull your hair out. Basically we as developers go gray over workarounds. Whether that be trying to make a social networking site out of Wordpress or a fancier graph than our charting library is capable of. So by offering “low level primitives” at just the “right level of abstraction” a happy place can be reached where workaround hell can be avoided. That’s kind of the mantra of the React/Node/js ecosystem over Rails, jquery, etc. Configuration over convention. A little bit more upfront work for an overall predictable workflow, and the rug not eventually being pulled out from underneath you.

These primitives have enabled lots of form libraries to meet your needs for the efficiency of two way bindings. Check out Final Form and Formic. ",1522619321.0
Canenald,"A talk by Cheng Lou from 2016 explains why 2-way data binding is not a straightforward no-brainer choice. The tl;dl is that we have to give up power to gain control. Related to this specific question, giving up one direction in the 2-way data banding gives us more predictability which translates to fewer bugs and easier maintenance.",1522659816.0
DOG-ZILLA,"They’re very similar in concepts but yeah, Vue is easier out of the box for this. Just use whatever framework best suits your needs. ",1522599215.0
SKozan,"I'm checking it out, pretty neat so far, the routing is wild though! It did 40 mutations on login. Trying to figure out how to simply redirect the root navigation somewhere else and having a rough time. Looks like il be a routing expert in a week. ",1522559515.0
porenSpirit,"I think this is great!

I could not find any documentation for a getting-started, but perhaps you can tell me what I could be doing wrong? https://imgur.com/a/7CyyuBW
",1525231268.0
empire539,"Never forget to check the console. There, you should see that Vue is unable to find the `removeRow` function.

Upon closer examination of the code, you should notice that `removeRow` is not actually inside your `methods` object.",1522552920.0
,"Never remove a visible object. Bind to a model and change that model.

Your rows represent _something_ in an array. Remove that item and the UI should update itself.

You manage models, not the DOM.",1522611096.0
nkgentile,"First of all, you should be mutating state in a mutation *not* an action.

To replace the state, there's an official [API](https://vuex.vuejs.org/en/api.html) method:

> replaceState(state: Object)
>
>Replace the store's root state. Use this only for state hydration / time-travel purposes.

",1522549268.0
DukeBerith,"Someone's made a plugin for what you want, https://www.npmjs.com/package/vuex-persist

",1522551525.0
cyanydeez,"take a look st npm package vuex- persistence

it's fairly straightforward",1522556199.0
DOG-ZILLA,"Have you tried the Vuex Persisted State plugin? 

It’s real easy to set up. You can choose pretty much any storage method you like and only save certain parts of it too if you wanted. ",1522577886.0
,Others are recommending that use a plug-in. My suggestion is that you try to _write_ said plug-in yourself. It's fairly straightforward.,1522612748.0
cyanisis,"Generally the guides are a good start and for further understanding, source code ",1522540759.0
oberhamsi,i learned a lot from reading the unit tests and writing some code against the core. i couldn't find articles about it either. there's a lot of general articles about how vdom and observables work and that's a big part of vue.,1522567746.0
httpix,"Evan You has a course on frontedmasters where he speaks about Vue internals.
Here is the course: https://frontendmasters.com/courses/advanced-vue/",1522654036.0
Zar0s,Oneminutejs has a series about the internals of Vuejs. [Here](https://medium.com/@oneminutejs/a-deep-dive-in-the-vue-js-source-code-fd9638c05c05) is the first part.,1522758835.0
,You can start with this: https://github.com/vuejs/vuex/tree/dev/src,1522531132.0
thiswasprobablyatust,"I wouldn't say this is an absolute, but I would definitely agree that this has a _tendency_ to be true.

IMO the core of this lies with how many ways something (even basic) can be done in React vs Vue.

### Look at using a method to react to a click event:

**In React we have (at least):**

- in `constructor`: `this.handleClick = this.handleClick.bind(this)`
- in `render`: `onClick={this.handleClick.bind(this)}`
- in `render`: `onClick={e => this.handleClick(e)}`
- in the class: `onClick = ( ) => { // do stuff }`


**In Vue** there's really only one way, define `handleClick` in `methods` and then:

`<button @click=""handleClick"">clicky</button>`",1522485966.0
waiting4op2deliver,"I'm brand new to Vue, but I ship my first production code with it Monday. I haven't seen anything yet that indicates it can't be used to write horribly inefficient, poorly structured, and undocumented code. I would bet that when those teams fall apart, it is because the code reached a critical mass of complexity, which is rarely the fault of the technology chosen. https://en.wikipedia.org/wiki/Critical_mass_(software_engineering)
",1522506935.0
pandemi,"No, that's not true. Vue might be easier to learn, but the supply of React devs is way bigger right now, so you'd be more likely to find a new react dev.",1522489358.0
Groady,"Vue has a lot of 'magic' built-in like 2-way binding and computed properties where React is MUCH more explicit (setState()) in what it does. There is also a lot of extra 'stuff' in Vue not present in React like filters, mixins and directives. All these options lead to there being many different ways to solve the same problem which in my experience leads to messier inconsistent code. I suggest googling why the React team removed mixins. I've used Vue professionally in my job for over 12 months and still much prefer React. ",1522539887.0
DanijelH,"My problems with React is that it has no 2way data bindings( you can get those only with third-party libraries like MobX ) and this is really a big feature especially when you have a lot of data that all you need to do is keep in sync! 
Also, it has big optimization efforts because React in its core is not 'intelligent'! You have to use shouldComponentUpdate to tell React not to rerender the whole goddamn subtree and not do unnecessary rerendering and calculations when something changes. Vue does that automatically :) See this for reference https://www.toptal.com/react/optimizing-react-performance ",1522595511.0
SKozan,"Not to mention it's a Facebook product, that's why I have avoided it. ",1522510731.0
Ob101010,The learning curve for Vue seems a lot easier. My 2¢,1522528294.0
ReefyMat,Source?,1522484675.0
,[deleted],1522510586.0
tanguy_k,"Blake Newman (Vue.js core team developer): most excited about _"" [ES6] Proxy support""_ and _""the potential to rewrite Vue with **TypeScript**""_.",1522482269.0
konaraddio,"Vue is a front end library. One commonly used feature of Vue is the ability to organize UI elements into components with [Single File Components](https://vuejs.org/v2/guide/single-file-components.html) with Webpack or Browserify. The single file components are the `.vue` files you may have been using or seen in tutorials. Vuetify is a bunch of Single File Components (or at least mostly Single File Components) that follow Google's Material Design spec. 


EDIT: See u/LynusBorg 's reponse to this comment below",1522445963.0
,[deleted],1522444280.0
SKozan,"Google themed bootstrap.

As short as I could answer 😀 provided you have used bootstrap before. ",1522446156.0
thiswasprobablyatust,"An aside, if you really want to learn front-end development. Don't start using something like Vuetify until you can build a base component. As in, make a simple `input` text element with a `label` that uses v-model and $attrs and some other things.",1522478245.0
,[removed],1522447451.0
nwsm,"Like the other guy it's just a bunch of UI components.

Specifically though, it is a ""Material Design framework"". Material Design is a UI philosophy / set of rules Google created in 2014. More info here: https://material.io/",1522445581.0
breakingcups,"It's like a set of LEGO blocks you can use to make a nice interface which follows Material Design ""rules"".",1522455609.0
patoezequiel,"A library of ready to use Vue components designed according to Google's Material Design specification, which you can easily integrate with your projects by using their props, events and slots, and subcomponents ",1522482315.0
ReefyMat,"* 1. Don't put it in the localStorage as that can be read from JavaScript and thus can be stolen by XSS attacks. Instead use a cookie with the flags httpOnly, secure, and sameSite.
* 2. Return `401 Unauthorized`.
* 3. There is no need to do that in the frontend itself. Make a request (e.g. /me) to the backend and check it from there. If the token is expired or invalid, unset the cookie and redirect to the login page.
* 4. You could do 3. Or just try to fetch some other data and return to the login page in case you get a 401.
* 5. See 3. Every page should check whether the user is authenticated (either by using the API or a local state flag).
* 6. See 3.

And generally speaking: I don't see a good reason to use JWT. It is not very easy to use it correctly and by default it cannot be revoked. If you want to be able to revoke it, you need to add state to the backend which defeats the purpose of JWT. In addition, you almost never only need the data from the JWT token itself but also from the DB, an API or something else. So having a state-less auth-mechanism is kind of useless.",1522435899.0
redmamoth,"Disclaimer, I'm currently working through this all myself, but this is what I've learned so far.

1. Vuex State
2. Yes, probably http 401 (I'm using Django which returns 400)
3. Use jwt_decode client side to the get the expiry from the token
4. Inspect the token in the /login router
5. Inspect the token in all other routers
6. Using jwt decode you can also get the iat, work out the token age, then refresh if needed. You should really be inspecting token, and refreshing if required, on every route.",1522444401.0
zonq,">1. When receiving the token, where do you store it? I usually put it in the localStorage.  

Vuex store

>2. 7 days have passed and we try to use the token, does the server return an error specifically mentioning that the token expired?  

Depends. There are two variations: auto-refresh or expiration. You can handle it however you want. (Dis)advantages of both are briefly discussed [here](https://www.reddit.com/r/vuejs/comments/84wufw/vuejs_and_authentication_with_jwt_and_refresh/dvt9k1x/).
  
>3. How do you guys check from the client side that the token is expired? Do you have a route on the backend that lets you check if a token is expired?  

You can't trust the client-side, since everything can be manipulated there. I have the current state (logged in) and the token in the store (as I said) and the majority of my backend routes are protected via middleware that verify's the JWT. Some non critical routes don't require a valid JWT.
  
>4. How do you prevent a user from accessing the login page after they've already logged in (for example, they type in url.com/login while already authed)? I usually check on the login page localStorage and see if there's a token. If there is, redirect to app and if not, they can stay on the login page)  
 
[v-if](https://vuejs.org/v2/guide/conditional.html) is your friend. Alternatively use middleware for the route to the login page, if this is how it's structured for you.

>5. Like question 4 but flipped around, how do I prevent a user from accessing the app page while not logged in?  

As described in 3, I check in most backend routes the JWT. If the user requests data that's guarded and the JWT is expired, I res.status(401).send(). The frontend has Axios and there I use an interceptor that always forwards the user to the logout page, if it receives a 401 from the backend.

      apiInstance.interceptors.response.use(
        response => response,
        err => {
          if (err.response.status === 401) {
            window.location.href = `/logout?msg=${err.response.data.msg}`
            throw err
          } else {
            throw err
          }
        })
    
>6. Extension of question 4 and 5, how would the client know if their token is expired? Since they have a token, they'd still have access to the app's page but no requests would work since the token is expired.

You can't rely on the frontend, as I explained before. The frontend knows the token is expired when the backend says so. If you have a JWT check in the frontend that is supposed to act upon an expired token, the user can edit the if that checks the JWT and suddenly doesn't get logged out anymore. Therefore you have to handle this via the backend, i.e. how I described in 5.

I recommend that you check out https://github.com/codyseibert/tab-tracker

He has a video tutorial on YT where he codes this. It's how I started and it pretty much addresses all of your concerns. Definitely worth it.",1522465561.0
gt_ride,Checkout this repo for reference : https://github.com/chrisvfritz/vue-enterprise-boilerplate,1522433499.0
rema96,You should start using Vuex to help you with this. You can store the login session in localstorage (not smart but for starter) and use Vuex getters to see if the user is logged in,1522449081.0
gdffff,seems helpful if your api returns nested resources ,1522423303.0
cheeseboythrowaway,i solved this problem by making my API more tightly coupled with my frontend views but this is pretty cool as a middleware.,1522425818.0
the__itis,well i’ll be jumping in this weekend ,1522427406.0
ABadWomanDriver,"I was literally just coming to post this! Glad I checked first. This library is fantastic, it’s still pretty early in development so it has its kinks but the dev is actively working on it. I’ve hopped in the slack channel posted on it’s github twice now and he’s helped me work through some problems and misconceptions I’ve had. ",1522514613.0
DerekMartian,Thanks for sharing! I'm looking forward to seeing Sarah Drasner when she comes to Toronto for SmashingConf ,1522393258.0
commitpushdrink,I thought /u/TheLarkInn's lightning talk on codesplitting was phenomenal. The first class nature within Vue really sets it apart from other frameworks. I'll definitely be sharing it with the team when it's posted.,1522427175.0
Brahminmeat,"Holy Delilah this is swanky! Will definitely check this out. 

Good work anonymous internet person!",1522372997.0
cheeseboythrowaway,"You could use selenium or Chrome Headless and script an interaction with your app. New Relic offers this as a service, it's called Synthetics scripted browser checks, but it's basically just selenium scripts that you write and they host, schedule and run.

I would generally call this ""acceptance testing"" and it can be brittle. I usually use it either in a situation where I've been handed a giant steaming pile of an app and I need to validate basic assumptions on a regular basis or just as a ""just in case"" smoke test to make sure that things a customer is going to rely on to be stable in the API remain stable. It's also good for monitoring things like SSO or other external integrations that are hard / impossible to test with unit testing.",1522349566.0
wishinghand,"Poor choice of title, but it turns out this does work with Vue. Bit of a shame I had to go on to the main site page to find this out. This article has about zero content though. It just barely describes the process in which they re-do the work that webpack does.

The pricing page is confusing with the mention of scopes. It looks like it's an alternative to NPM that isn't open source and is for helping share components and not fully packages..

",1522349430.0
UndefinedB,"Nuxt is server side rendering. For a blog, you can do prerendering (look for the prerender spa plugin) or just nothing since Google is pretty good at handling javascript, even async.

But since SEO is mostly black box magic, you'll have to test it and find out. Just make sure the Google Search Console (and Fetch as Google) shows something that makes sense (so not a white screen which indicates javascript errors).",1522345723.0
ImReddit,"rivalry.gg runs on nuxt, with 100's of pages.

SEO is fine, what is your fear?


If you want to run a nuxt SSR website, you need to run it on node. If there is a chance you won't be running node, you won't be able to run nuxt SSR.",1522345873.0
,"I'm using DENV (DynamoDB, Express, Node, Vue) on AWS Lambda",1522348125.0
Exourion,"I think MEVN exists, not sure though ",1522331765.0
chrissilich,Vue is going to fail because it doesn’t fit well as the third letter in an ME_N stack acronym. ,1522339102.0
gabe1331,"If you’re a fake fullstack dev like me you use GAV

graph.cool, Apollo, Vue.. ",1522387952.0
steeleb88,I've gotten pretty comfortable running Nuxt programmatically behind an express server. Can easily setup API endpoints and a database of your choice if need be,1522455528.0
cheeseboythrowaway,"FPV: Flask + Posgresql + Vue

",1522513702.0
5alpha-reductase,Djano Rest Framework + Vue,1523409823.0
harrygato,you can use any kind of database with Vue. So you can get whatever acronym you want. whats common is anything.,1522498576.0
Robodude,"Imho, if you are hooking into local storage you should do that via an action. Some localstorage libraries, like localforage (https://github.com/localForage/localForage) , use promises/callbacks so actions are the only appropriate place to use them.",1522298579.0
AfternoonSale,"https://github.com/PanJiaChen/vue-element-admin supports i18n.
",1522326307.0
jeweltheme,"Don't forget to checkout Basix Admin by VueJS Admin Template: https://github.com/jeweltheme/basix-admin

Get more FREE Vuejs Admin Templates: https://vuejsadmin.com",1529408711.0
vincent_g88,Would you like us to write one for you if we fail to find one online for free for you?,1522298790.0
KissMeHelga,"Hey. I think you can take advantage of vue's reactivity to take it a large step further. I was excited when I saw this post but felt I bit turned off because it seems a wrapper for d3, when there are large parts of d3 that can be replaced by vue's elements - mainly the d3-select and the rerender, which are, for me at least, the most unintuitive and hard to understand parts of d3. Some months ago I made a test case for replacing that features all together from d3 https://github.com/albertopereira/vuejs-treemap.  
Check it out. I really don't have the time to do it, but I'd love to see a library of components that take advantage of vue's strong points to integrate d3. Keep up the good work!",1522321986.0
gramlin42,Very nice. Looking forward to see where this is going.,1522314515.0
,"This guy seems like he knows what he's doing: https://stackoverflow.com/questions/41916875/is-it-possible-to-cache-an-entire-html5-video-using-the-service-worker-api-for-o

It will involve using service workers.",1522268038.0
gevera,So when is the release? ,1525749792.0
zeroskillz,They will be available for free on vue mastery sometime soon.,1522291637.0
Hadora,"Nope.  
This is the only way. See api doc for getters https://vuex.vuejs.org/en/api.html  
You can only access the state and other getters from a getter.  
In you vue file, you should check if GET_DATA is null early in the lifecycle, like in 'beforeMounted' or 'beforeCreated' then launch FETCH_DATA if true.  
The state management logic can be seen as weird in the beginning but you'll get used to it and start to love it when your project will grow.  
IMO, vuex is still infinitely better and simplier than redux.",1522265343.0
jordanaustino,"No and that's on purpose.

Remember getters are memoized and run when their dependencies update, similar to computer properties. So if this pattern was allowed upon initialization to null the getter would fire and then trigger the action, then the mutation fires, and then the getter runs again. Would open the possibility of infinite looping state updates. ",1522270066.0
slinkywafflepants,Nuxt and Prerender.io does sort of the same thing but in different ways. Why would you want to do both?,1522259842.0
i_ate_god,"well, except for this bit:

> Vue
Vue started as a MVC framework similar to Angular but focusing on being simpler and requiring less boilerplate. The last version already features a component-based approach and a virtual-DOM in a similar way that React does.

> The documentation describes it as a progressive framework, in the sense that it is thought to be progressively adopted and thus allowing a user to start by only using the view-part of the framework and later add more complexity if needed. There is a focus in reducing boilerplate and the number of files used when possible.

But other than that, yes no mention of Vue.",1522260371.0
patoezequiel,Muy interesante,1522270773.0
nricu,"If I where you I'd spend some time in digging around in https://github.com/vuejs/awesome-vue. You can pretty much search everything you are asking. 

First links is docs, and articles. Then you can pretty much choose whatever point you like and see the different options there are. ",1522246269.0
AceBacker,You might like nuxt.js,1522247930.0
TheNerdyHomebrewer,"Thats whats great about vue is that its base functionality is so expansive it doesnt require a bunch of libraries to be useful.  Other than that i think it really depends on the project as far as what dependencies and libraries that you bring in.  The few i have brought in from npm are things like vue-select, vue-rate-it, and v-calendar.

Vue-select is a great one for forms especially if you are working with large data sets because it includes a search and filtering option within that select.  Vue-rate-it is a nice ratings library that integrates with font awesome to easily incoporate customizable ratings.  And v-calendar is exactly as it sounds its a calendar app to show a calendar and scroll through the months.

Regarding form validation i havent tried it in vue but as long as anything is withing a form tag in the template section you should just be able to say required and the form will not submit without all required fields filled out.

Either way i would encourage you to spend time and just play around with it and do some searches and find what may ne useful to you.",1522245263.0
Robodude,"For DI / shared singleton objects I really like:
https://github.com/jpex-js/vue-inject

For form validation I recommend:
https://github.com/monterail/vuelidate",1522327165.0
irphunky,"Same as you would normally in JavaScript with `setInterval` or `setTimeout`.

Take a look at https://github.com/Kelin2025/vue-timers which should make it simpler for you within vue.",1522235173.0
webamboos,"Should every web developer learn Vuejs ?!
Look up for its advantages 👇 It's Vuejs time",1522227279.0
wikitih,"I assume that you are using a bidimensional array, or plain javascript object, as a data table. If you're using an array, you should probably move to a plain javascript object, which will make your life easier since changes are more easily detectable (per attr. Since Vue is detecting that you are replacing the whole structure, your whole table is getting re-rendered.

To avoid that, you may:

* When downloading the data, try to merge with your local data in the following way:
  * Add new rows to your data structure if they are not present.
  * Update those row attributes if they have changed.
  * Delete those rows which are not present in the downloaded data.
* Create a row component and pass the row prop to it; it will be rendered only if the row data changes; the rest of rows will be reused.

Don't forget to use `:key` properties for your rows components to avoid render errors.

Disclaimer: I'm not an expert. I'm currently learning Vue too :)
",1522227999.0
imGnarly,That depends on what data you’re telling vue to update. If you override the whole data set with each AJAX call you’ll get a re render every time. ,1522231427.0
edanceee,There's a lot of examples animating adding and slicing elements of arrays in the official docs. It should be pretty easy if you give that section a look.,1522219411.0
Heyokalol,"My Vuex is HUGE. We have the best Vuexes, folks.",1522220630.0
Sphism,Split into modules? Or all in one?,1522207934.0
cyanydeez,i started using modules. up t0 5 so far,1522208690.0
ganjorow,"100+ actions for state management? Are you sure, that you're only managing state (application-level state) and not also component-level data?

Not everything that can be in a vuex store needs to be in a vuex store.
The primary idea is that you can share data between components without relying on your own implementation of eventbus (which is what vuex basically is).",1522225103.0
digitalmahdi,Big,1522234776.0
mmcgu1966,I'm in the design phase of a new Laravel / Vue project and wondering if I can have larvel dynamically create the vuex store,1522255346.0
zaSmilingIdiot,"Instead of a large vuex store, you can always break a store down into modules. Helps keep things managable. What I find helps in some cases is using dynamic module registration and deletion: 

https://vuex.vuejs.org/en/modules.html#dynamic-module-registration

Essentially, when a component is retrieved, particularly a higher level component like a 'page' that groups other components that share a common concern, the store that the component requires is registered as a store module.  When it leaves scope, the store module is unregistered.

This way, components sharing a common concern have access to the functionality they require while they are in scope, but also keeps the store generally free from clutter that doesn't need to be there at that time. The store have access to the globally available store (which is registered as a module as well), so if they need access to the current user, for example, it is available.",1522263952.0
the__itis,thank you ,1522268366.0
cutety,"How I like to view security when building the frontend, is that any part of the front end can be visible to any user at anytime. What this means is that anything that is programmed with be hidden from certain users (admin components, links, etc...) can be made usable to a user that wants to get it and can open up the dev console. So, for example you have a Vue app that on certain components will display special actions for admin users (being guarded with `v-if=""currentUser.admin""`), and you're storing the current user in `vuex` (with sample user):

    export default {
      state: { currentUser: { id: 1, username: ""foo"", admin: false } },
      mutations: {
        updateUser(state, { userAttrs }) {
          state.currentUser = { ...state.currentUser, userAttrs };
        },
      }
    } 

Then, all a user would have to do (after poking around enough to figure out what to call) is open up the console and enter:

    vm.$store.commit(""updateUser"", { admin: true });

And then all the admin functionality previously hidden becomes visible. Now, of course this trivial example is easy to protect against by not making your root Vue instance (`vm`) available on the global window object in production, but it shows how any data can be modified easily by a user with a enough know-how.

So, how do you protect against this? Well, any protected data or actions need to also be authenticated/authorized by the backend^([1]). There's no guarding or hiding data/functionality once it hits the client (generally). For the above example, if the backend is correctly secured, even though the user can now see the admin only actions they will still receive unauthorized responses from the backend the second they try getting/posting data from/to an endpoint and the app will just show an error. So, they've really only accessed the visual admin elements, but none of the functionality because their changes only affect the client.

There are extra steps you can take to help guard against this with things like using webpack to split your bundles into groups based on access level and then asynchronously load your javascript code from a server that will only serve the bundles necessary for the given user and their access level.

As far as vue-authenticate, I haven't used it personally, but it's just using oauth apis to authenticate with services, and (if setup properly) can probably be considered secure. I haven't ever used Firebase or Okta so I'm not going to try to speak about security regarding those services.

Other than the above, there are still a few security things that should be put into consideration when building a front end like cross site scripting, [here's a list that covers some of those security considerations](https://web-design-weekly.com/2014/07/09/front-end-security-thing-concerned/).

[1] *Or wherever the protected data/functionality is sourced from whether that be a traditional backend API, Firebase, etc. The protected functionality just needs to be secured, authorized, & authenticated wherever the action (data persistence or retrieval) actually occurs outside of the client*",1522193927.0
AfternoonSale,"So, OAuth is a safe way of doing authentication.  

Here is a basic chart on how it should work.  
https://assets.digitalocean.com/articles/oauth/abstract_flow.png

The key is you have no authorization token generation in the SPA and your resource requires the token.  ",1522192534.0
cheeseboythrowaway,"To be honest I have done zero authentication work in the front end. All of my auth is handled by Flask-Login w/ cookies on the backend, which I integrated with Okta SAML in a very straightforward fashion.

The only thing that Vue does is redirect the user to the SAML login if it gets a 403 from the backend. Then we go through the normal SAML redirect chain, log in to Okta, send the SAMLResponse to the back end, and after successful response validation we redirect back to where we started within the Vue app (I'm passing the original URL through as RelayState) only now the fetches to the backend get 200 OK.

Seems to work pretty well. I decided to make my authentication scheme super basic and based it on SAML because that's what i had to work with. OAuth admittedly hurts my brain anyway.",1522514682.0
jgmcelwain,I use the `<style>` tag in components. Having styles next to the markup they affect makes a lot of sense to me.,1522180597.0
AfternoonSale,"The correct answer is when you are creating a component, you use the style tag to include all related component CSS.  However, sometimes you have global CSS and that belongs in a separate location and should be included in the head.  For example, if you wanted to set all the fonts on your whole site, you would do that in a separate CSS file and then each component would automatically have that font.",1522181676.0
viperwooz,"You can check the [Vue.js Style Guide](https://vuejs.org/v2/style-guide/) on their website. 

It says that you have to also use class names inside the scoped Style.
 [Classnames link](https://vuejs.org/v2/style-guide/#Component-style-scoping-essential) 

And to always use scoped or explicit class names or css modules. [Scope Style Guide link](https://vuejs.org/v2/style-guide/#Element-selectors-with-scoped-use-with-caution)",1522231225.0
bmarkovic,"Well, I have mixed feelings. I am all for best practices, but I think the Webpack project that the CLI builds and Docs themselves hint at them plenty.

So in short. Likes: Theo, Vue Styleguidist (didn't know about these before), Component QA process and doc extraction.

Dislikes: The approach to route components and the Atomic Design applied dirrectly to web components (to me, frankly, AD always looked a bit over-engineered) and the fact that this very QA-orientated approach lacks any integration of automated testing.

Re: AD - a style guide and clear definition of UI elements on a higher level is a resounding yes. But however making that seemingly inevitable link between little design boxes and little code boxes looked appealing - it's a bit of technological begging the question.

While Vue is blazing fast, wrapping every DOM nitbit (a link, a button, a paragraph, whatever) into a Vue component is one of the surest ways to get yourself into performance issues down the road. When the number of components on your pages gets big enough that approach of micro-components can easily produce exponential growth of operations per unit of data (which is one of the reasons I prefer just using upstream CSS instead of libs like Buefy).

Just my 2c.",1522222172.0
xLilCrypto,"Thanks for sharing ! 

I can definitely see the good it can bring to a company using this !

I believe the full power of this kind of system is to be able to interoperate between the Devs / UX/UI Designers / Marketing / Some functional profiles as well, sharing a component library between all these parts is a key to succes in my opinion. 
Not all of these profiles are techy though, do you plan on making it more user (non devs) friendly in the future ? 

Thanks again, I'm definitely gonna try it out with friends.",1522168009.0
systematical,"What is this? I don't understand it, maybe because I am more of a backend engineer than frontend?",1522211610.0
AfternoonSale,I like that this can be used as an npm package.  That could make more and more components available to everyone if people allow for their design systems to be publicly released.,1522196405.0
birdspider,"it signifies a dynamic component (https://vuejs.org/v2/guide/components.html#Dynamic-Components) so that `li` would be whatever component is i.e. in `this.individualComment` 

in other words you might hava a static `<li-component-a>` and a static `<li-component-b>` (or more) components, but at runtime one or the other is to be displayed.

Now you could `v-if` or such your way through it, but `<li is='var-with-component-to-display'>` is a much more sensible way. ",1522162050.0
OriginalEXE,"Hello,

You can read about this feature here: https://vuejs.org/v2/guide/components-dynamic-async.html#ad

Basically, it allows you to dynamically specify which component that element should ""display"".",1522161527.0
Sasquach02,"Hey! I just saw this post and I wanted to jump in and add something. The other commenters touched on using ""is"" with dynamic components but I wanted to point out a specific case that I see trip up a lot of new vue devs. 

Some HTML elements restrict the content that they may contain. For instance for the `<ul>` element:
>#####Permitted content

>zero or more `<li>` elements, which in turn often contain nested `<ol>` or `<ul>` elements.


So when we want to make a sweet custom vue component for an item in a list we have to remember that some DOM elements are not even going to let us write
```
<ul><my-sweet-custom-li></my-sweet-custom-li></ul>
```


The browser won't even render it. So we do a little trick using dynamic components and the ""is"" element. We say ```<ul><li is=""my-sweet-custom-li""></li></ul>``` which the DOM is ok with because it follow the ""Permitted content"" rule but still lets us swap out the actual content of the element with our own sweet custom component.

That's basically what's described in the section below the dynamic components one the other commenters linked. It's called [DOM Template Parsing Caveats](https://vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats) and they can really trip you up if you're new.


edit: clarity, spelling, doc link",1522375880.0
jgmcelwain,"Looks like you're setting beforeCreate to be the result of \`this.$store.dispatch\('getRegisteredCourses'\)\` instead of running it.

Try something like this instead:

    beforeCreate() {
      this.$store.dispatch('getRegisteredCourses')
    }",1522150288.0
ash_es_,"Been testing this for the better part of the day, and it's definitely super cool. Works great when you toss in an alias (*vm* in my case). Very nice tool! ",1522118361.0
josh0r,"I did a similar thing in the vue-starter (https://github.com/devCrossNet/vue-starter). it's just called generator-cli, it has AST tools on top which puts the necessary dependencies in the right files (e.g. a route file is referenced in the overall routing configuration). Maybe this could be a nice addition to your CLI.",1522164153.0
ganjorow,use the [webpack bundle analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer) and you'll get a pretty clear picture where the size is coming from.,1522225293.0
cheeseboythrowaway,What are you doing in terms of library imports? I feel like bootstrap-vue must be huge (that's what I'm using). You could directly import the components you need as opposed to globally using those kinds of libraries.,1522113950.0
,Just discovered that a production build is outputting the sourcemap too. Disabling that reduces things. Not sure why vue-cli would have that enabled for a production build?,1522163528.0
ffffrozen,"It's still in beta, but I'd love to see my build process simplified. Every time I working with webpack config, I'm getting shivers.",1522219361.0
SandFriend,I think it would work if your action wasn't synchronous. JS is single threaded so your action with the long synchronous for loop is hogging the thread. Vue can't update its computed properties and thus the dom unless you give up thread execution somehow. If you use a setTimeout instead of a for loop in your action then that would fix it. Alternatively use this.$nextTick after you set the value to 3 which would allow vue to update its computed data before the action starts. ,1521992886.0
fzy_,"This is a problem that's inherent to the javascript runtime itself. It doesn't really have anything to do with Vue.

Your program runs within an event loop. This means that any compute-intensive operation will block the event loop and prevent anything else from running. Concurrent actions taking place inside of promises happen asynchronously, not in parallel.

The solution to your problem is to execute your compute-intensive code outside of the main thread using [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers).",1522012261.0
gallowdp,"I think I'm having the same issue and can't figure it out. I have a group of check boxes that v-model to a vuex var, and changing this var causes a chart to re-render which takes a couple seconds. I'm trying to show a simple loading indicator right when a checkbox is clicked, then hide after the chart has re-rendered.",1522011388.0
DOG-ZILLA,"Shouldn’t the action actually update a value on STATE within Vuex, then you get that value with a getter from the state; not directly from the action?",1521990865.0
YourCupOTea,This looks pretty interesting. Has anyone given it a try before? Any hangups?,1522023970.0
blue0lemming,"It is the compiled version of your website, the one webpack gives the browser, you should ignore it and add it to your gitignore but keep it as it is the most important folder for displaying your application to the browser.",1521916853.0
irphunky,"You don't need to avoid anything, just be aware of the differences between working with Vue's reactivity and any traditional JS libs.

",1521907101.0
kaspy113,"I can't answer your question directly but check out https://github.com/vuejs/awesome-vue, there are a number of drag and drop components that you might be able to get inspiration from (or just use).",1521903907.0
kingdaro,"Generally, you'll want to avoid manually manipulating the DOM, and instead prefer updating data to update the UI that way.

However there are situations where you'll _need_ to query the DOM, like getting the bounding box of an element, or focusing an element. In those situations, it's perfectly fine to use a lifecycle hook like `mounted` or `updated` to perform side effects unrelated to the actual data in a component.

For your case, you could probably make a component for the menu, have it accept a `visible` prop or similar, then rely on CSS transitions for animation.",1521907371.0
SKozan,"Avoid wowjs with nuxt! It behaves strangely with the window and keeps getting compile errors, I've tried disabling ssr, everything. Ended up caving and getting aos and will fiddle with that today. I've gotten other libraries working but I am a bit of a newb at this stuff still, so I may be doing something silly. ",1521918375.0
ianpaschal,One thing that's really nice about Vue is that you can isolate your vue fairly easily from other parts of an app. So you could always make one part (like say the output of all your reactive data) with Vue and the input with some other library and link them together by calling actions on an Vuex store.,1521929739.0
irphunky,"I just setup a timer that triggers an expiry event with my auth module and allows the app to do as it requires.

All depends on your requirements, we wanted to chuck someone out of the app after token expired. So this works well for us and allows us to attempt a token refresh in the background prior to kicking them out.",1521907350.0
kaspy113,"Can you store the token expiry time along with the token? If so, you can check for token expiry without an http request, which should handle most cases.",1521904450.0
,[deleted],1521857706.0
sifex,"Yes! I actually came across this problem from the spaghetti code side of things. Try [http://vuemc.io/](http://vuemc.io/). Definite recommendation to use class\-based Models and Collections\*. Comes with some really useful helpers as well.

One recommendation is to store the Models and Collections like so: [https://github.com/FiguredLimited/vue\-mc/issues/9#issuecomment\-375142071](https://github.com/FiguredLimited/vue-mc/issues/9#issuecomment-375142071).

Edit: \* If you're using ES6.",1521856266.0
cyanydeez,"the full state of a getter

https://vuex.vuejs.org/en/modules.html

read about rootState and rootGetters

Accessing Global Assets in Namespaced Modules

to mutate another module, youll need to create an action that modies the rootState, which voids the warranty.

the other option is:

Binding Helpers with Namespace

",1521863309.0
Gattermeier,"If there aren't any dolphins in the video, I'll be very disappointed.",1521835664.0
mojojj31,The CLIENT_ID doesn't need to be hidden. It's the CLIENT_SECRET that can't be exposed.,1521809286.0
Demivan,"> window.addEventListener('resize', this.$store.commit('setHeight'));

`this.$store.commit('setHeight')` is just called instead of being added as a listener.  
Handler should be a function, for example:  
`() => this.$store.commit('setHeight')`",1521813289.0
acklavidian,Routes are in the Vue devtools and transitions are inspectable via traditional methods via the css/element inspector.,1521814348.0
schrik,"I do not have any professional experience with VueJS, but thought a component like this would come in handy for the community and would be a nice way to get started with Vue.

I've mapped all callbacks and properties to `v-on` and `v-bind` respectively to stay close to how Vue components work. Hoping for some feedback and maybe some tips on how to improve.",1521797986.0
austencam,"I think vue-cli is going to be your best bet here, either [webpack](https://github.com/vuejs-templates/webpack) or [webpack-simple](https://github.com/vuejs-templates/webpack-simple)",1521783593.0
Lelectrolux,codesandbox,1521798181.0
Sphism,Yeah vue cli webpack and then vgc (vue generate component) will do the trick. I think vgc -s will make a single .vue component with template script and style. ,1521792036.0
kamante,nuxt,1521793854.0
marinespl,https://jsfiddle.net/,1521794199.0
skipbridge,"To be honest, sounds like a great component to publish on npm. ",1521779208.0
Sphism,Have you seen the laracasts Vue series? The tutorials are top notch. ,1521791842.0
Catalyzm,Have you tried hanging out in the Vue chat room? Some helpful people on there,1521779618.0
CristiJ,"Hello there. Would be glad to help if you still need it.
I've been working with Vue for more than a year so far and did various projects with it including some open source ones. Like sharing knowledge especially if it's related to Vue. PM if you didn't find help yet. ",1521829177.0
,"What exactly are you having difficulty with?

First off, I would recommend you take this udemy course if you haven't already: https://www.udemy.com/vuejs-2-the-complete-guide/

That course goes through everything: components, props, events, routers, vuex, etc.

If you have some more advanced issue PM me a summary of the issue and I may be able to help.",1521785476.0
kn0ckle,"Hello,

I can try my best to help you, for free. Just drop me a dm if you interested.",1521796903.0
Castemson,"Hi, out of interest, what's wrong with Codementor? Lack of Vue experts or something else?",1521939364.0
kamante,I would highly recommend you to look into nuxtjs ,1521793829.0
cyanydeez,also optional are mixins,1521808781.0
Kritical02,"It's really up to you do you expect to have independent features on each or will one always inherit all the features of the other?

If it's the latter you could create the base component and use Vue.extend to import all of it's properties and add any extra features on the child component.

In your case guest would be the base and host would add all the extra features.

This is actually the way I would code it unless you plan on each component having it's own private methods.

In that case you could create a base component and extend both or just create two separate if it's not worth worrying about going DRY",1521775288.0
irphunky,"If guest is never used on its own and hasnt got any complexity in its JS or CSS then merging can be fine.

",1521789289.0
Pyro979,"Make a common component, then extend the other 2 where there are differences",1522014797.0
CaptainInsane-o,"So I store my firebase configuration in its own file then import it where I want to like this: 

https://github.com/Capocaccia/gameLeaderboard/blob/master/src/firebaseConfig.js

Then when the page load I get a ref of my database and attach it to a data property which updates the view.

https://github.com/Capocaccia/gameLeaderboard/blob/master/src/components/Home.vue",1521764591.0
jinendu,Have you checked out VueFire?,1521777328.0
plainblackguy,"I recently evaluated 6 different toolkits, both from features and implementation. I found quasar to be the most powerful by far, but also the least well documented.

Of the material based frameworks, Vuetify is definitely the best. 

Ultimately I chose Bootstrap + Vue. They had the fewest components, but their documentation was by far the best. Plus their #slack channel always has really helpful people in it.",1521767399.0
mobiledevguy5554,I went with vuetify for a pretty big project and had 0 issues related to either vue or vuetify which is really impressive.  Looks nice too,1521806563.0
hovercraftii,"I recommend usimg quasar (quasar-framework.org). It not only has material and iOS components, but it also has tons of other features to make deploying to electron and Cordova easy, it has a quasar.conf.js that simplifies your webpack config, it has a super powerful starter template, and is blazing fast and easy to use.",1521761588.0
jordanaustino,The vuikit primary button looks outjofbplace with it's huge mouseover shadow drop that none of the other ones have. Why? Just looks cheap and... Well bad.,1521774509.0
greatpier,I wanted to like Vuetify but I found it to be to limiting and it's documentation lacking. If you or an client doens't want to use material design vuetify is useless and you'll need to learn an alternative framework anyway.,1521798321.0
konaraddio,Which components are buggy in Buefy? I recently started a project with Buefy,1521807494.0
Volcanic-Penguin,"I prefer building my own components, that way I know exactly how they work.

Also a set of components is not a framework.",1521883534.0
Ivancz,"What do you guys think of element, seems like the best option if you don't want material",1522731958.0
batahkoinonia,This was a great article. I hadn't considered encapsulating some of my components in that manner before.,1521903037.0
OmegaVesko,Looks like Sublime with the [material theme](https://github.com/equinusocio/material-theme).,1521715159.0
bjornkrols,"Here's a very basic Vue component I wrote, perhaps its configuration could help you (it is Webpack-based):

https://github.com/Botre/vue-lpage

Most important parts:

* package.json
* webpack.config.js

Let me know if you have any questions.

",1521718193.0
ascendant23,Routes are routes and components are components. There’s no rule that says they have to be 1:1 with each other. ,1521708795.0
seamouse3,You can pass [props](https://router.vuejs.org/en/essentials/passing-props.html) to change data without changing the component.,1521711457.0
ours,"It may be that what you need is not routing. 

What if instead of routing the button or link that does the change simply answered to the @click and changed some data in Vuex?

Routing makes more sense if you want a different component to load and replace the current one (i.e. a different ""page"" in an SPA).

Alternatively you can load the same component but with different parameters. So you replace your current component (or perhaps ""page""), and when the component loads it checks for the parameter passed via the routing (i.e. the Id of the item in a product catalog) and from there it loads the related data.",1521747091.0
VIM_GT_EMACS,"OP, this wont help you with doing vue routing but I just wanted to mention if you use Nuxt (which uses Vue) the routing is handled for you. Folder structure is forced on you if you use Nuxt, but I've come to really enjoy using Nuxt so far. 

https://nuxtjs.org/guide/routing/",1521748248.0
,"You can also use like a router guard in this case if you were trying to switch between items so that you can reuse the same component but all the info would update.  Not sure if thats exactly what you are after but never hurts to know more!  

https://router.vuejs.org/en/advanced/navigation-guards.html

I was refering to beforerouteupdate in there but there are a lot of other useful things as well.",1521726650.0
irphunky,"You can do what you like, depends how your handling routing in your app.

From vue-routers point of view your describing [dynamic-matching](https://router.vuejs.org/en/essentials/dynamic-matching.html)",1521729669.0
joroshiba,"Here is a really short sample, you can see not much has changed: https://codepen.io/bytewalls/pen/aYWxpY.

This is not optimized in any way, but gets the job done.",1521726036.0
,[deleted],1521729864.0
sir_eeps,"Number of great talks at FITC: Spotlight: VueJS 2018, but the one that stood out the most to me was the 7 Secrete Patterns - intentionally click-bait title that he has fun with during the presentation.

Some really great examples, advanced use cases - and patterns that can apply to just good JavaScript and not even Vue specific. One of the more advanced talks/topics I've seen about Vue. Some very cool stuff in there.

Repo with the slides: https://github.com/chrisvfritz/7-secret-patterns
",1521672099.0
kallexander,ad?,1521669763.0
juzten,This is the course I'm going through right now and it is very good. I'm currently about 30 percent done. There are a ton of concepts Max goes into. ,1521670241.0
henripal,"OP/author here - I tried building this with React, gave up, then spent four days learning Vue and was able to get a nice enough result.

Happy to get feedback from more advanced Vue users!

Thanks!",1521660398.0
paladincubano,"IDE: Webstorm
Editor: VSCode

If you can afford it, go for webstorm. ",1521661303.0
mdelally,"I've used Sublime, PHPStorm/Webstorm, and VSCode in the last year and I have to say that Webstorm pulls ahead in terms of just pure IDE features.

If you can live with the slightly 'slower' aspect of using a full IDE, roll with Webstorm.

If you're wanting more speed and customization, Atom/VSCode/Sublime are going to have the extensions you need to speed up your Vue workflow without some of the polish afforded by the IntelliJ systems.",1521660462.0
DOG-ZILLA,"By far one of the best is VS Code. It's free and is getting better with every update.

With a few plugins, it can be completely tailored. The Vetur plugin for Vue development is good and you'll probably need a few others, but I'll leave that to you!",1521663346.0
,[deleted],1521660446.0
Maxtream,"It's hard to tell ""the best"" as it is more of a preference, rather than requirement. I've used VSCode for last 1,5-2 years and love it",1521663994.0
TheBroox,Sublime is hard to beat.,1521664571.0
txavasakura,"Why don't give [CodeMix](https://www.genuitec.com/sox/tech/vue-in-eclipse/) a try?, it has Vue support through [Vetur](https://github.com/vuejs/vetur) so you're getting Vue tooling from the creator themselves.",1535491712.0
callpri2,Look at special Vue.js plug-in of CodeLobster IDE: http://www.codelobster.com/vuejs.html,1532008015.0
ValPaliy,"I use vscode + the vue pack, which install all the useful extensions (including vetur). Perfect.",1533180297.0
konaraddio,It's better to share/publish the .vue file because it's easy for other developers to read and modify,1521641158.0
DOG-ZILLA,"I'm not sure if you understand that a .vue file is for development only. You cannot open it in a web browser. It will definitely 100% need to be compiled / processed with Webpack or similar.

If you're doing single file components like this, then I ALWAYS advise people to use the Vue Cli. It will generate a project for you with all of this built in.

Don't struggle and waste time trying to roll out your own build process.

https://github.com/vuejs/vue-cli",1521636335.0
freenudecelebs,If you’re looking to publish the component so people can install with a package manager look into [rollup.js](https://rollupjs.org/guide/en),1521654285.0
irphunky,"A compiled version is more compatible than just a .vue file as it does not require a compilation step, so it could be included directly into the browser if wanted etc.

I suspect vue-cli will now have a template that will make this a lot simpler now, but it's been a long time since I published anything.",1521641846.0
egoistian,both or at least the compiled version.,1521644738.0
pd-andy,"Compiled component in /dist

Single file template in /src",1521645757.0
hugo__df,"You should publish both. One of Vue's strengths is that you can use it without a build pipeline as well as with one, that means that you need to cater to both types of consumers when publishing your component.
Make the compiled version what is loaded by default and document how to load up the .vue component (you can point the main field in package.json to compiled and module to .vue).",1521657811.0
sheepc,"im not too sure about the pattern but you need to be aware of a caveat with using objects with computed since they arent reactive by default.

meaning that only when the object gets reassigned will it trigger an update, because the whole value was updated, not just an attribute change

```
app.model.modelA = newModelFromAPI  // this triggers an update  
```
```
app.model.modelA.name = ""Fido"" // this does not trigger an update  
```",1521626045.0
DukeBerith,"It's not a pattern, it's just property access :) 

I use this in production a lot because I don't want to do `a && a.b && a.b.c && a.b.c.d ? a.b.c.d : null` for obvious reasons. 

The good side about using lodash is after parsing your string, it will be cached the next time so it won't have to recompute how to pull a property out of your object. 

So long as you're aware of when an object has reactive and non reactive properties, you'll be fine. ",1521630362.0
george-silva,"I had a few bugs in production mode while using get. Not sure why, but get sometimes returned undefined to something that was defined.

Not sure If anyone Else saw the same.",1521628055.0
TheUnknownFactor,"The ability to use single file components with scoped (s)css is a pretty big deal. Additionally you'll get much better render performance as the templates get compiled into a render function at build-time, rather than runtime.",1521623144.0
segphault,"Many ES6 features are at just under 90% browser penetration. Depending on the demographics of your audience, you can probably use ES6 without a transpiler. The only place it doesn't work at this point is IE. 

Of course, native ES6 modules are still not quite there yet. What I do is write straight ES6 code and use native modules in the browser during development and then run the code through Rollup before deploying in production. It makes development really easy, there is absolutely no configuration, my code is 100% standards compliant and future-proof, and other people who work with me on the code don't need to install anything from npm.

Personally, I don't want or need single file components. I don't feel like the value of being able to put some CSS in a component is worth taking all the dependencies and locking myself into something non-standard.",1521659999.0
marinespl,"ES5 is a pain in the ass to write. As long as you are not coding a school project you will regret not choosing ES6 and ""alpha nerd tools"".",1521621411.0
irphunky,"Without seeing some code it's going to be impossible to help.

As a stab in the dark, it sounds like whatever logic that controls the display of the button is not reactive and so only works on initial load.",1521650754.0
Ob101010,"Possibly related to 5:20 on this vid : https://www.youtube.com/watch?v=09n2945JW_0&index=28&list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa

Try wrapping it in a 

    <keep-alive>
        ...your component tag here...
    </keep-alive>

Id be interested if this solves your issue. Learning Vue here as well. :-)",1521577198.0
DOG-ZILLA,"I can't speak for Vuetify directly, but I've had this issue before with some of my own components.

It all stems from having a fixed position element within the route transition.

The only way I was able to come to a solution on this, was to check if the sidebar was open with the ""beforeRouteLeave"" navigation guard of the parent component (checking a Vuex store). If it was set to open, I would then close it and call next() within a setTimeout() that gives just enough time for the sidebar to close before moving on.

Obviously this isn't ideal. I'd love to get a proper solution to this without having to close anything first in order to hide the jump.",1521565296.0
imapersonithink,The nav drawer already has a transition on it. You are adding another transition on top of it. You need to move the drawer outside the content wrapper. [Here is an example of where the tags should be.](https://vuetifyjs.com/en/layout/pre-defined),1521569376.0
bdeo,This is a great question for the community at /r/vuetifyjs or our discord channel. Check our sidebar!,1521770994.0
Ob101010,"O look a solution to a problem that didnt exist.

",1521560584.0
i_ate_god,"> Basically, JSX lets us use an HTML-like syntax in JavaScript.

which is precisely why I avoid JSX",1521560558.0
the_ju66ernaut,I think you will have a hard time selling JSX to Vue devs. One of the reasons I chose Vue over React was because of the heavy use of JSX in react. I personally find plain html easier to read and reason about. even with several directives and attributes on it. ,1521562457.0
garth_vader90,I don’t know if it’s just because I’m not used to the syntax but I feel like JSX is so much harder to read. A few lines like the example seem ok I guess but i feel like anymore than that starts to get messy. I just separate out my single file components (which some might find messy too I guess) but having a vue file with my template code and a separate TS class file acting like a controller (in a way. Probably more of a presenter.) makes more sense to me. ,1521561161.0
eihen,"I care because it means devs who like jsx can use vue. I learned react the same time as vue (spent time evaluating both) and then kept up with react with my side project while my day job is all vue. Through all that I still prefer Vue templates way more than just. But I understand why someone might like jsx more.

More ways to code Vue the better! The only thing jsx has over .vue is full prettier support!",1521596950.0
TheUnknownFactor,"This article is rather backwards.

Yes HTML templates get compiled to unreadable render functions. JSX also gets compiled to unreadable render functions.

The only ""oh nice"" thing in this article was the spread operator for props ```<button {...this.largeProps}></button>```",1521632398.0
DOG-ZILLA,"I don't mind JSX...but it would be annoying for me to forgo the Vue template helpers like @submit.prevent and stuff like that. 

",1521564516.0
greven,"It's good to have options, with that said the reason I personally invested my time more into Vue than React was exactly the Vue templates. 
For me Vue templates make more sense when taking the whole Web dev landscape into consideration, they feel like a more natural evolution. ",1521625800.0
DontWorry_Internet,"Does Vue compile the template sections down to JS calls like JSX does? If not, then that's a decent reason to use JSX: you avoid any parsing in the client. JSX is entirely compiled down to direct DOM creation calls. ",1521563230.0
bmarkovic,"Using DOM event listeners in Vue is an antipattern. Use Vue event handlers. For keyboard clicks you can simply use @keyup as per:

https://vuejs.org/v2/guide/events.html#Key-Modifiers

and to boot, every DOM event-handling method (say, you have a method called `handleClick` in your component, and you've placed `@click=""handleClick""`) can receive DOM event object:

    <template>
      <div>
        <span @click=""handleClick($event)"">Click me!</span>
      </div>
    </template>

    <script>
    export default {
      methods: {
        handleClick(event) {
          // here you have your click event so you can
          // check for ctrl + click for example
        }
      }
    }
    </script>
",1521618216.0
cheeseboythrowaway,"It's not ""serverless"" so much as the servers just belong to someone else.",1521525468.0
rebolyte01,"If you want to run your own headless CMS, you can use something like [Ponzu](https://github.com/ponzu-cms/ponzu).",1521529853.0
cyanydeez,wh would someone uild a wensited tied to an api the have no control over,1521517579.0
cyanydeez,"Either vue-router <router-view/> or the generic <component is=""helloComponent"">


View routes can inject properties into components via dynamic function as

    prop (route) { ... }

Returning any props.",1521500074.0
in0pinatus,"I'm transitioning from jQuery to Vue. It doesn't happen overnight and I expect to have both in my main product for some time.
",1521483323.0
i_ate_god,"Because there are lots and lots and lots and lots and lots of very useful libraries that are built as jquery plugins.

Probably the biggest of which is Twitter Bootstrap.

And the effort to work around it is not worth saving the 50kb of code that jquery introduces to your build.",1521481458.0
soAsian,Is there a good replacement for https://datatables.net/ ? I haven't found one that work as good as datatables.,1521520196.0
WittyButNotThatFunny,"For me, I couldn't be bothered doing modals again, so I used the bootstrap modal and therefore jquery",1521481383.0
ukaputnik,"In short: Ajax, PnP with Bootstrap, useful shorthands, super handy dom selection/manipulation tricks - plus access to a billion jQuery-based scripts and widgets. 

It's just got a bunch of useful stuff for a very minimal increase in weight - and with IE support even for promise-ish ajax calls you can save a bunch of polyfills if you need to target the business marked (many many IE users).

Yes, you can do all that with vanilla js - but sometimes you just gotta get stuff done, and jquery lets you ""skip ahead"" in many places.

 \In fact, if you had to replicate the jquery shorthands you need in a large-ish project (plus polyfills), those extra 50kb will be back before you know it.

That being said, I AM trying to transition away from it. No particular reason, but using jQuery does make me feel a little bit ""dirty"" nowadays.
",1521485742.0
AfternoonSale,jQuery is just so easy to use and many developers really know the library well.  The added value you get to cutting down on that code is so little that you might as well use both if you are familiar with it.  ,1521482489.0
savunit,"Instead of attaching to say <div id=""app""></div> attach to whatever DOM Element you where you want the widget to be, and keep building. That widgets instance would need to be within Vue.

You can use Vue as micro-components if you want to, just by a new instance.

Just open up a REST endpoint to interact with your current system.

Otherwise, you're just looking for a library of helpers, the current state of JavaScript mostly anything would be overkill (SPA). There is a ton you can do with ES6 and compile with Babel to polyfill.

All those features you mentioned are pretty minimal to do.",1521472849.0
hugo__df,"Vue allows you to have your templating code in HTML, you can define your templates and then mount Vue to the root node at which point it will populate the fields and make the widget live.",1521475309.0
wangyi7099,"If you want to create a component like alert, you could mount it first, and then append it to body. like [this](https://github.com/ElemeFE/element/blob/dev/packages/message/src/main.js).",1521592964.0
DOG-ZILLA,Script tags? Just put them in your index.html,1521449805.0
ImReddit,"I often use a global listener on something like a drop down, when it is mounted I want to listen for a global click to close it if the click is outside the dropdown...


When my component needs it, I do something like 


document.addEventListener(‘click’, this.handleClick)

Make sure to remove the listener as well (in something like beforeDestroy)",1521460042.0
crimaniak,"Works for me:

    export default {
      name: 'vcd-keyboard',
      created: function () {
        window.addEventListener('keydown', this.onkey)
      },
      beforeDestroy: function () {
        window.removeEventListener('keydown', this.onkey)
      },
      methods: {
     // ...
        onkey (event) {
    // process event...
      }
    // ...
    }
    ",1521469647.0
Rizens,"Ran into the same issues .

Came up with this [solution](https://jsfiddle.net/apxs05ph/2/) .

You also can propagate stuff with $emit if you need children to listen to an events I think.",1521449378.0
vidarc,https://vuejs.org/v2/guide/events.html,1521431395.0
chrissilich,<tr @click=“methodName” ...,1521396867.0
spays_marine,What did you try so far?,1521392974.0
kaspy113,"I'd suggest you start with the vue-cli webpack template with vue-router and have the pages in one project as single file components. You can redirect users to the login screen if they haven't logged in yet.  Actual data should be protected by the backend. 

Try tutorials by Maximilian Schwartzmuller (Academind on YouTube), his Vue + Firebase tutorial deals with logging users in, showing different pages to users etc.

For the 404 page, the vue-router docs suggest to have a catch-all fallback route on your server that always loads your index.html page, and then have a catch-all route within your Vue app that loads the 404 page (which you will make as a Vue component).

edit: link for the youtube Vue+Firebase videos (authentication tutorial): https://www.youtube.com/watch?v=FXY1UyQfSFw&list=PL55RiY5tL51qxUbODJG9cgrsVd7ZHbPrt",1521385416.0
TwoTapes,"Observables are great when used for their purpose. I wouldn't say that they are a complete replacement for promises, but you can use them to chain actions on inputs from a stream.

For instance, you can ""observe"" clicks on  a button. The clicks form a stream. There are methods to debounce the stream (I.e do the next action only if a certain amount of time has passed), methods to combine the result of two Observables (streams) or take a different action based on the last emitted value of a different stream.

Ultimately, you ""subscribe"" to the observable and that's where you handle the output if the stream, similar to the  .then() method of a promise.

I tried once to use them in a Vue project since I've been using them a lot in an Angular project, but it wasn't easy to get it set up. I was also using the class decorators for  Vue components which probably complicated things. I would suggest learning about Observables on their own before Integrating them into Vue. They are very powerful but reactive programming is a paradigm shift and could take a little while to understand. ",1521393349.0
patoezequiel,"Observables are more powerful in general, while promises are better for their use case (a future asynchronous value). Observables work better with asynchronous streams of values like input events or real time websocket interactions. ",1521393852.0
Mittalmailbox,"Ben's tweet for when asyn iterators are not good but observables are
> @rauschma Absolutely! Two different use cases. Async iterator isn't as good for push streams. SSE, sockets, user events, animations, etc. Async iterator is better for cases where you need back pressure control.
https://twitter.com/BenLesh/status/974669600087396352",1521384687.0
,Project github repo  https://github.com/saigowthamr/Vuejs-authentication,1521361551.0
Djbm,"If you want to use single file components, you need to use a bundler.

IMO, single file components are extremely elegant and one of my favorite things about working with Vue.

Because your template, logic and styles related to a component are in one file, this all needs to be ‘compiled’ before the browser can display and run the application.

So if you are just using Vue for a small section in an otherwise static site, you’re fine without WebPack. If you want to build a SPA, you’re far better off using single file components.",1521345269.0
elktamer,"Dependency control, testing, production builds,  structure for complex applications. I wouldn't bother for quick projects.",1521344501.0
tristanAG,Vue-cli will handle all this for you.. super nice tool to get up and running with a webpack optimized Vue app!,1521355215.0
thinkadrian,Article: [Why would I use Webpack](http://tinselcity.net/whys/packers),1521359853.0
hovercraftii,"What webpack does is it compiles all of your files (js, css, html, and in this case, .vue (vue single file components) into minimized and optimized js, css, and html. This allows you to use vue single file components and es6+ js while still supporting older browsers. It is strongly recommended as it can really improve page load times.",1521345636.0
tijanmdr,"You need webpack because you have to compile all the scripts and stylesheets along with images that have been linked with css or scripts. While working with big projects, you may use components or use two or more script files. So, webpack reduces the complexity to bundling all the scripts together and you may minify your code as per your need. ",1521365419.0
chrissilich,"This is the beauty of Vue! You’re a newbie with a small project. Keep doing it the easy way that makes the most sense to you. Then when you get more confident, understand more, and have bigger needs, you can pick up more at your own pace. Enjoy!",1521381506.0
vladfaust,You may also start from gulp and/or browserify,1521365804.0
ianpaschal,You shouldn’t really. It has its benefits on big complicated projects but you will do just fine with some template literally and css objects/style sheet on the side.,1521355697.0
,"Webpack bundles all your JavaScript  files
Into single file so that when we are making http  
Requests it only takes minimum  time to render  ",1521362400.0
TheOffTopicBuffalo,":to, you need to bind the to so it can be interpreted is Javascript instead of a literal string",1521301753.0
Mekhami,you also don't need the inner <a> tag.,1521303470.0
DOG-ZILLA,"I often use Swiper JS, then make my own component wrapper for the things I need with it. Tried that? Not everything has to be built for Vue specifically to use it. ",1521281240.0
mckazi,"Here's a small wrapper around http://idangero.us/swiper/, that also works with SSR

    <template>
        <div class=""swiper-container"">
            <slot name=""before-wrapper""/>
            <div class=""swiper-wrapper"">
                <slot/>
            </div>
            <div v-if=""defaultPagination"" class=""swiper-pagination""/>
            <div v-if=""defaultScrollbars"" class=""swiper-scrollbar""/>
            <div v-if=""defaultNavigation"" class=""swiper-button-next""/>
            <div v-if=""defaultNavigation"" class=""swiper-button-prev""/>
            <slot name=""after-wrapper""/>
        </div>
    </template>
    
    <script>
      import { A11y, Keyboard, Navigation, Swiper } from 'swiper/dist/js/swiper.esm.js'
      import merge from 'lodash-es/merge'
    
      // see http://idangero.us/swiper/api/#custom-build
      Swiper.use([Navigation, Keyboard, A11y])
    
      export default {
        name: 'SwiperSlider',
        props: {
          options: { type: Object, required: true },
        },
    
        computed: {
          defaultPagination() {
            return this.options.pagination && !this.options.pagination.el
          },
          defaultScrollbars() {
            return this.options.scrollbar && !this.options.scrollbar.el
          },
          defaultNavigation() {
            const { navigation: nav } = this.options
            return nav && (!nav.nextEl && !nav.prevEl)
          },
        },
    
        watch: {
          options() {
            this.recreateSwiper()
          },
        },
    
        mounted() {
          this.recreateSwiper()
        },
    
        updated() {
          this.swiper.update()
        },
    
        beforeDestroy() {
          if (this.swiper) this.swiper.destroy()
        },
    
        methods: {
          control(swiper) {
            this.controlled = swiper
            this.recreateSwiper()
          },
    
          recreateSwiper() {
            if (this.swiper) this.swiper.destroy()
    
            this.swiper = new Swiper(
              this.$el,
              merge(
                {
                  preloadImages: false,
                  keyboard: {
                    enabled: true,
                    onlyInViewport: true,
                  },
                  a11y: true,
                  navigation: {},
                },
                this.options,
                {
                  controller: {
                    control: this.controlled,
                  },
                },
              ),
            )
    
            this.$emit('update:swiper', this.swiper)
          },
        },
      }
    </script>",1521432064.0
chriscarpenter12,"I just came across [this link](https://scotch.io/tutorials/how-to-make-netflix-like-swipers-in-vue) in a weekly email I get. 
",1522549205.0
syropian,"If you're using an http lib like Axios, you could set up an interceptor that catches 401 responses, and then fetches the refresh token.",1521223040.0
RoganTheGypo,does your app get a token once you are logged in? Or does it get tokens for something else?,1521224885.0
ckdownset13,"Went through that logic hell not too long ago.  Ended up having to refactor a few times to cover my bases.  Here's what ended up working (note, use the Vuex store and Axios).

In the main app file:

     function getAuthToken () {
      // if the current store token expires soon
        if (jwt(store.getters['auth/token']).exp - 240 <= (Date.now() / 1000).toFixed(0)) {
        // if not already requesting a token
        if (authTokenRequest === null) {
          authTokenRequest = axios.post('/auth/refresh', {}, { withCredentials: true })
              .then(response => {
              // request complete and store
              resetAuthTokenRequest()
              store.commit('auth/refresh', response.data.access_token)
              return response.data.access_token
              })
          }
         return authTokenRequest
        }
        return store.getters['auth/token']
    }

    // tokenRequest dirty bit reseter
    function resetAuthTokenRequest () {
      authTokenRequest = null
    }

    // Axios Intercept Requests
    axios.interceptors.request.use(async function (config) {
      // If not one of these specific pages that doesn't need a token, use method to get the current token or request a new one.  Otherwise, use current token (possibly none)
      if (!config.url.includes('login') && !config.url.includes('refresh') && !config.url.includes('forgot_password') && !config.url.includes('reset_password') && !config.url.includes('activate')) {
        config.headers['Authorization'] = 'Bearer ' + await getAuthToken()
      } else {
        config.headers['Authorization'] = 'Bearer ' + store.getters['auth/token']
      }
      return config
    }, function (error) {
      return Promise.reject(error)
    })

    axios.interceptors.response.use(function (config) {
      return config
    }, function (error) {
      // Prevent endless redirects (login is where you should end up)
      if (error.request !== undefined) {
        if (error.request.responseURL.includes('login')) {
          return Promise.reject(error)
        }
      }

      // If you can't refresh your token or you are sent Unauthorized on any request, logout and go to login
      if (error.request !== undefined && (error.request.responseURL.includes('refresh') || error.request.status === 401 && error.config.__isRetryRequest)) {
        store.dispatch('auth/logout')
        router.push({name: 'Login'})
      } else if (error.request !== undefined && error.request.status === 401) {
        error.config.__isRetryRequest = true
        return axios.request(error.config)
      }
      return Promise.reject(error)
    })

Can be a little nutty with the response handling since you're dealing with Promises.  Let me know if you have any questions.
",1521242754.0
josh0r,"I did it with axios, here is the code: https://github.com/devCrossNet/vue-starter/blob/master/src/app/shared/services/HttpService.ts. It is made with interceptors and retries.",1521242970.0
zonq,"Check out the source here:

https://github.com/noderaider/jwt-autorefresh

Another small example is here:

https://auth0.com/blog/ten-things-you-should-know-about-tokens-and-cookies/#token-expiration

Also, directly on the JWT page, they recommend to make sure that auto-refreshing doesn't introduce security flaws, and also link to this:

https://gist.github.com/ziluvatar/a3feb505c4c0ec37059054537b38fc48

Edit: I have a long expiration (1-2 weeks), and have middleware in (some of) my Express routes that check the JWT and the user in the DB. If he's banned or his token expired, he has to re-login.

Advantages compared to auto-refresh: I can pick the routes that need authorization, compared to an interceptor with Axios and the token still expires, in case someone manages to steal it. The only disadvantage: Users have to relog after X weeks, whatever you set it up to.",1521229183.0
,"Check these github repo  easy way to get 

https://github.com/saigowthamr/Vuejs-authentication",1521351239.0
SKozan,I am doing max's udemy course on nuxt and there is a pretty good section on the tokens. I am just in the process of setting it up myself. Not sure if nuxt does things too differently but the process should be fairly similair. ,1521649473.0
buddman,"Thanks for the answers everyone.  I think what I will end up doing is only invoke the refresh token when a get request to the API gives a 401 error or similar (all pages that require authentication make API requests).  If the refresh token re-authenticates and gives a new ID token, then I'll just have the get request that failed to automatically retry.  If the refresh token expires and won't authenticate, I'll have an authentication modal pop up requesting re-login.  That way if the user has to re-authenticate via the modal, they won't lose their place on the page.  And if the modal is canceled out without authenticating, it redirects them to the home page (maybe I'll even invoke a timeout for modal duration?).

I was thinking I would need to try and trigger a refresh token based on the expiration of the JWT token, but after thinking this through, I think it's better to just catch a failed get request and then invoke the refresh token.

Anyway, let me know what you all think.  Again, appreciate the input!",1521671791.0
richardzcode,"If you are okay with Amazon AWS, check out [aws-amplify](https://github.com/aws/aws-amplify). It handles token refresh for you. Here is a sample app: [AWS Amplify Vue Starter](https://github.com/aws-samples/aws-amplify-vue)",1521230386.0
CaptainInsane-o,"Do you have a front end masters subscription?

https://frontendmasters.com/live-event/vue-js-advanced-features-ground/",1521232602.0
iqen93,I think they may have recorded it? I’ll try and find it.,1521206573.0
ColtenP,"Hey! Getting started with Vue is really easy.

You can install the cli tool with

``
npm i -g vue-cli
``

After that’s done you can navigate to wherever you keep your projects and initiate a new vue project with

``
vue init webpack <project>
``

You can also read the documentation on the vuejs website. It’s by far some of the best documentation for a framework that I’ve ever encountered.

[ VueJS Docs](https://vuejs.org/v2/guide/) 

I really hope you enjoy Vue, it’s a wonderful framework and has a really helpful community built around it! Happy Vue’ing!",1521199944.0
eloc49,[Nuxt](http://nuxtjs.org),1521201844.0
dfcook,"I've started an article on doing this manually, not got up to HMR yet but covered the initial setup

https://medium.com/@petrefax66/vuejs-and-webpack-4-from-scratch-part-1-94c9c28a534a

Obviously you should use the CLI once it supports webpack 4, and I add my vote for Nuxt but I also found it interesting to try building it from scratch.",1521282050.0
waplet,Why would you clone elements instead state rendered html?,1521185635.0
bathyscaaf,"I'm not sure what you're trying to do overall, there may be a better way to go about it, but if you need to call tippy directly why not 

import tippy from 'tippy.js'

then:
 tippy(document.getElementsByClassName('someButton')[0]);

That's how I'm using date-fns in my project:
import dateFns from 'date-fns'


dateFns.format(new Date(), 'MM/DD/YYYY') for example",1521533135.0
irphunky,2 & 3 should be easier with [computed properties](https://vuejs.org/v2/guide/computed.html),1521197853.0
,[deleted],1521203561.0
juzten,"The example on the Vue documentation website will probably be more up to date with current standards in the Vue world
https://vuejs.org/v2/examples/todomvc.html",1521117840.0
wangyi7099,"https://github.com/vuejs/vuex/tree/dev/examples

Vue integrates with state-manage framework 'vuex', including **TO MVC** ",1521190359.0
,Post your code,1521115164.0
dakshinasd,Paste your code in codepen and share it so we can help,1521116949.0
flailsalot,"v-once just specifies that the binding won’t be reactive - it won’t update if your list does. 

What you’re describing is removing duplicates, from what I can tell. You might want to look at a library like Lodash for utility functions like that in JS. Alternatively, if you’re consuming your own API, consider handling this at the controller level. ",1521080220.0
flyingmeteor,"You're iterating over an array with three items so you're going to get three `<span>`s.

If you want to de-dupe by `first_name + last_name` you can use `Array#reduce()` within a Vue computed property like so:

    computed: {
        names() {
            return this.parcel.reduce((names, { owner }) => {
                const name = owner.first_name + ' ' + owner.last_name

                if (names.indexOf(name) === -1) names.push(name)

                return names
            }, [])
        }
    }
",1521090608.0
CristiJ,"You just need to filter out repetitive values. 
One simple way is to use `Map`
        
        let distinctNamesMap = new Map();
        this.parcel.forEach(parcel=>{
          let fullName = parcel.owner.first_name + parcel.owner.last_name;
          distinctNamesMap.set(fullName, parcel)
        });
        this.distinctParcels = distinctNamesMap.values();

Now you have an array duplicate parcels filtered out. You can do a `v-for` on it and be sure that the owner will be displayed only once.

A side note here is that if you have parcels the same owner, the data from last one will be consider because every time we `set` a new value, if the key is the same, the old value will be overwrriten.",1521126858.0
StephenNotSteve,"This is where `computed` methods come in. Start with something like this:

    computed: {
      filteredItems: function() {
        let result = this.items
        return result
      }
    }

Then change your `v-for` loop to something like:

    v-for=""item in filteredItems""

Now manipulate `result` to affect the results.",1521069968.0
juzten,Normally you can view that on a conf website or reach out to an organizer email from the site. ,1521067478.0
HyzerJAK,You could try the [v-cloak directive](https://vuejs.org/v2/api/#v-cloak) to hide it until it renders completely. If it takes a few seconds you might want to show a loading indicator or placeholder while it loads.,1521060793.0
achillean,"I doubt it will fix your issue but I think the ""data"" property is always supposed to be a method and not an object. I.e.:

    data: function () {
        return {
            widgets: ...
        }
    },

https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",1521149668.0
DiademBedfordshire,"I'm finishing up an android / ios responsive app using quasar, and so far it's been very pleasant to work with.",1521055168.0
Janva,Is this like react native but for vue?,1521056234.0
ScarredUpID,"Built an Android/web app for a client in it a year ago... it was really smooth. At the time, Vuetify wasn’t as built out as it’s become and the ease of using its built-in wrappers made it ideal. I enjoyed using it, though I’ve switched to Vuetify these days if I don’t have a need for the wrappers.",1521073321.0
kirbyfan64sos,"IMO if you're looking at mobile, you should try using Weex or NativeScript. Realistically, WebView wrappers like Quasar and Cordova run well on high-end phones but will struggle the second you try it on a low-end or older device. In addition, the space used is almost guaranteed to be far more than a native app. 

Source: recently upgraded from a Nexus 5. Native apps ran well, but apps that were built via things like Ionic stuck out like a sore thumb. ",1521080002.0
propelol,"Meh, it tries to do too much, and I feel it just get in my way. 

If you want to create native apps with Vue, then I recommend https://nativescript-vue.org/",1521099835.0
,"Trialed it, but I much prefer Vuetify.",1521121436.0
le_fieber,I recommend quasar. One of the most complete frameworks I ever used.,1521291618.0
nricu,"At the same moment I started a project with Vuetify I found Qasar. I found the documentation more difficult to follow and some things to quite implemented as Material Design. I stick with Vuetify and I'm really happy with it.
But I think this link it's has a lot more information https://blog.bitsrc.io/11-vue-js-component-libraries-you-should-know-in-2018-3d35ad0ae37f",1521061321.0
ingrown_hair,I like it and found it useful. Some people have complained about the lack of fine grain control for styling; not all the settings are accessible.,1521086373.0
ilmmec,Ive used it a few times and like it! ,1521098843.0
_ansii,"It sounds like vuex would be a good solution. You could then insert the newly subscribed subreddit into the list in the vuex store state using a store action, which would propogate the change to the navbar which would use a store getter. 


If you absolutely do need the order to be the same as from the 'special endpoint', you can simply replace the whole state list using an action after calling that endpoint. Otherwise, your store getter can return a sorted version of the list.",1521047303.0
StephenNotSteve,"You don't need to keep putting quotation marks around ""subreddit""… we're on reddit; it's common vernacular around here.",1521068104.0
juzten,Waves from DC423 ;),1521039639.0
nricu,Nice dashboard! It's handmade the design? ,1521030478.0
Ob101010,Post to github?,1521153900.0
redmamoth,Really nice! But what about the UK? :-(,1521277968.0
LittleAccountOfCalm,"1. Close the script tag where you have the Vue code. It's not closed.
2. Fix the last line, you're having 2 </body> and 2 </html> as well as a script tag. 


        <html>
           <body>
           ...
              <script>
                 new Vue({
                    delimiters:['${', '}'],
                    el: '#app',
                    data(){
                      return{
                        message: 'Hello Vue.js!'
                      }
                    }
                  })
                </script>
            </body>
        </html>",1520982701.0
hoshts,There is something like https://github.com/posva/vim-vue but also consider enable eslint equal in syntastic if you plan to write a lot of vue code.,1521049150.0
hoshts,"You using the Vue CLI v3 beta to scaffold the project?

As you are using class syntax and property decorators you can define props with @Prop() private variable!: string

The @Prop decorator also supports default and required inside it's ""constructor"".

Also for the computed, use a real getter method on the class instead of in the component annotation.

get method(): string {
  return 'some string';
}",1521048742.0
Maxtream,"I guess it would be better to display example in number 1, rather than just explaining how arrow functions works. Otherwise, interesting stuff, didn't though about creating plugins that way.",1521006534.0
ganjorow,"Tip 4 is a bit ""wrongish"" or at least debatable. Or at least the example is a bit misleading, because it looks really easy with this limited scope.

First: the tip confuses ""state"" and ""data"" and is using both terms, as if they are interchangeable - but they are not. That's not good. The title is spot-on, the content no so much.

Using vuex liberally for state and data is ok if you're using vuex in a smaller app with a small set of different data models - but then you really really have to ask yourself, if you need vuex just to keep the user object globally available.

The app architecture can get really messy and full of boilerplate code if the amount of data models grows - especially of they are in a relationship to each other.

Imagine the example also having, besides actors and movies, data for reviews and crew (director, sound guy, etc.), and you want to have different views of this data, e. g. listing movies from a certain director.
If you keep going the vuex way, you'll add a getter like ""GetMoviesOfDirector"".  Then you'll add some more getters, the lines of code blow up until you decide to modularize your store and split it up into different stores - only to use the ""GetMoviesOfDirector"" getter in maybe 1 or 2 places.

Vuex should really only be used for centralized state management and a limited set of data that is neccessary to determine that state.
In other words: Don't store the ""user"" object in vuex, but do store state like ""userIsLoggedIn"" or ""userHasAPaidMembership"" in vuex.
",1521031292.0
dougieled,Thanks for sharing! Tip 1 will be super helpful. ,1520984926.0
Rizens,"Indeed it's a bit sad , but the future is more promising.

According to [this survey](https://medium.freecodecamp.org/i-just-asked-23-000-developers-what-they-think-of-javascript-heres-what-i-learned-9a06b61998fa) a lot of JS devs have heard of Vue and would like to [try](https://imgur.com/zvzac4R) the framework.

Also it's important to keep in mind that a lof the community of Vue is based in [Asia](https://imgur.com/eWKwMjO) , which is not at all represented is the Survey ( less that 2% to be exact with China , Korea and Japan) while India and US are overly represented (more than 30%) which doesn't reflect the reality in some countries. ",1520948244.0
raublekick,"I've been using Vue for about a week in an exploratory capacity. I don't think I've used Stack Overflow once to find an answer to something. Official docs have probably answered 90% of my questions. 

Compare that to my time using AngularJS where the docs rarely help with a real-world understanding. ",1520984626.0
xaksis,"Heh, I believe it is because we were all busy creating amazing things and missed the survey. ",1520947347.0
Kaidawei,"Why would you be sad? Could it be that Vue has a better support and documentation ecosystem that warrants or allows not to be on StackOverflow? 

It’s popularity and lack of StackOverflow “on the radar juice” can mean one of two (or more things): 1. One the ecosystem is awesome and stackoverflow is not as needed, 2. The coders that use Vue aren’t... nevermind.

Vue is definitely on the radar. StackOverflow is somewhat of an indicator of relevance in the tech world but like Vue, Rasa.ai can hardly be found on SO and it’s an amazing growing and popular OS project as well.

",1520962058.0
not_very_creative,"On a separate topic, why do people love react so much?

I know it might not affect my projects, but I stay away from it because of the licensing issues I've seen.

I have been working with Angular at work, and Vue on my personal projects, I like them both, but have been curious on why react gets so much attention.",1520949797.0
gabe1331,That doesn't make since considering it was the most liked js framework on Github last year. ,1521117018.0
LittleAccountOfCalm,"love this thread, keep it going man.",1520942638.0
CristiJ,"Another example with a switch mode to enable edit only when needed
https://codesandbox.io/s/2pv1o4wxxr",1520936226.0
tucsonflyer,Why are you declaring the component twice? It works fine when you delete the duplicate declaration.,1520910344.0
,"I’m curious as well on what’s best practice.

You could send the version number with all api responses but I’m just thinking here. I have the exact same problem to solve ",1520910004.0
cyanydeez,"my naive attempt would be to use router guards, and create a localStorage to track the versions.

everytime your app boots, ie, created() it checks for a newer version, cycling until 404.

but I've never had a backend rendered site.

the latest vue router has beforeRouteEnter where you could check for new versions and reboot.",1520911798.0
JinSantosAndria,"Have a look at prerenderspa plugin. The problem is that the current router is only going to catch stuff if the JavaScript stuff is loaded. Either every route returns your index.html and you use history router mode or you prerender. Both ways need a clear way of handling error pages and at utter importance the http error codes. Prerender might also help with SEO in case there is a public part to your SPA.

As to updates while clients are connected, build a simple checker component that loops a timeout and checks a static backend file for it's json content that has a cache TTL of max 1 minute for both private and public proxies. If content is different from when the app was mounted, show popup to force a window location change (or give a visible notification if your API did not have any BC breaks). Oh and never client cache the index.html (or any HTML related response, may it be / or something/)",1520926647.0
jineshshah36,"You would need to update your html file so when it is served, it will serve the new version. I would suggest using something like vue-cli which pre configured as this and other best practices for you.",1520945586.0
ImReddit,https://github.com/DivanteLtd/vue-storefront,1520874882.0
segphault,"I have an example that demonstrates how to build a Stripe-based storefront with Vue and Express, using Stripe's product and inventory APIs so that all data persistence is on Stripe's platform: https://github.com/segphault/stripe-vue-storefront

It should help you get a sense of how shopping carts and routing might work in a simple storefront SPA built with Vue. It'd probably be easy to adapt it to use Shopify's GraphQL-based API.

(Disclosure: I'm a technical writer at Stripe, but I'm commenting here in a personal capacity.)",1520870114.0
FURyannnn,"I'm also interested in this, particularly with SSR. Seems like the Vue community is definitely interested in integrating with Shopify, which is awesome.",1520910226.0
kaelwd,[Vuetify's store page](https://vuetifyjs.com/en/store) uses shopify ([source](https://github.com/vuetifyjs/vuetifyjs.com/blob/dev/pages/store/IndexPage.vue)). It's pretty easy if you aren't doing anything too fancy. ,1520939343.0
alexchavet,"Hey guys, I have ""translated"" the react-apollo example in Vue 2 + vue-apollo
https://github.com/alexchavet/shopify-storefront-vue-apollo
Hope that will help",1522489859.0
wysewun,"Would love to buy an official theme made with vuejs and tailwindcss.

I would be worried about SEO though",1520915780.0
cheeseboythrowaway,"I use cookies on my backend and need same-origin requests for it to work right, so i just spun up an nginx container that proxies the traffic between the two for me. It has the added bonus of keeping track of all the requests in one log.",1521554606.0
LittleAccountOfCalm,"People not having Windows, probably don't have Consolas.

Consequently it's really hard to read your snippets. Consider using something like:

    Consolas, Menlo, Monaco, ""Andale Mono WT"", ""Andale Mono"", ""Lucida Console"", ""Lucida Sans Typewriter"", ""DejaVu Sans Mono"", ""Bitstream Vera Sans Mono"", ""Liberation Mono"", ""Nimbus Mono L"", ""Courier New"", Courier, monospace
        ",1520846911.0
boing_boing_splat,"I'd be tempted to just roll your own using the CLI tbh. You're probably only looking at a simple:

vue init webpack-simple
dotnet new web

Maybe I'm being dumb though :)",1520794202.0
minus0,"What's .net have to do with it? Seriously wondering. I have a project that is .net based and I treat the API as a completely separate project. It's for all purposes, independent. I just happen to be hitting an APi that uses .NET on the backend.",1520811681.0
SKozan,"https://github.com/MarkPieszak/aspnetcore-Vue-starter

And this one based off it with signalR.

https://github.com/elucidsoft/aspnetcore-Vue-starter-signalR",1520990468.0
te79014,I am starting to run into this issue also.  I was just wondering if you decided to just separate your projects or if you found a maintained temp?  ,1523389739.0
JohnnyCrazyy,"Why do we have so many vue-* libraries, which don't belong in the actual vue ecosystem? This library is not interacting with vue itself, it's just putting its functions under the namespace `Vue.yourFunctionHere` or `this.$yourFunctionHere`. What's wrong with the normal JS approach?

    import storageHelper from 'storage-helper';
    
    // do your stuff

Don't get me wrong, I think your lib could be useful, but it has nothing to do with Vue. (For example, if you would wrap around storage items to generate computed properties, that would be a good justification for using vue-ls instead of ls ;) )",1520788782.0
teh_inquisition,I'm pretty sure the issue you're running into is because your computed property is form while your model is updating form.address. The address key isn't initialized on your form computed property so vue doesn't know to watch for when it gets updated. ,1520717344.0
majorius,"try 'function' instead of just '(){}', maybe your this goes out of scope.",1520712146.0
wilkesreid,"Your issue is that you’re binding your model to the property of a computed property, not the computed property itself, so set() never gets called.

Here’s an article that might shed some light: https://forum.vuejs.org/t/vuex-v-model-on-property-in-nested-object/6242/2",1520734952.0
cyanydeez,"nit picking here, you should show how it works with transitions.",1520737264.0
RoganTheGypo,Thanks for this,1520792889.0
DieselTriceratops,I’ve saved this to check it out soon. I’ve been looking at using vue and visual studio code so I’ll try to get back to you once I go through this.,1520704441.0
dfcook,"My first ever attempt at writing about software development, feedback and criticism would be appreciated!",1520676727.0
imposter_oak,Nice write-up. Comprehensive and easy to follow. My only criticism would be to use the inline and block code syntax in the places where you used italics or quotes for the commands. ,1520725923.0
baddev,I think it looks nice and will work. I would translate a few of the languages before you start publicising it though and have those at the top of the language list. I am on my phone so cannot comment on the code. ,1520661626.0
ameo02,"fun idea. you, however, wrote zero documentation on how to contribute. 
your readme file should have at least location of file and some example template to follow if you want translators to help you do this.

",1520776194.0
LedZeck,"I really liked when I found Vuetify a year ago.
But now, I'm kinda tired of material design and prefer other style libraries.
",1520633690.0
,"It's a nice looking framework, but I stopped using it after a minor update broke the look of my app last year. Since then I've switched to Quasar for stability reasons.

It looks like it's gone through a ton of development since then, so that's promising :)",1520634996.0
phouri,"It’s nice, my only problem with it was I couldn’t use only some parts without including everything",1520630936.0
,"I like vuetify a lot, and am using it for one of my projects. But my general opinion of these types of things is you should only really use them for either prototypes/PoC or internal tools, where you don't want to lose as little time as possible thinking about design. If you're creating a consumer-facing product you should take the time to figure out your own design language, or hire an actual designer if that's not something you're interested in/have time for.

Also, I promise those ripples and animated input placeholders and drop shadows will look super-dated in a couple years. And by that time it's very likely the vuetify devs will have lost interest and move onto something else. Be careful not to become so dependent on vuetify that you wouldn't be able to remove it at some point down the road.",1520646479.0
KodiakSA,I think it's a solid material framework.   It would be tough to port to mobile app with IOS as you'd be stuck with material.  I'd love to see that get solved in the future...but it is a material framework.,1520635325.0
defunctAI,"I don't like it tbh. I tried to use it twice but the theme was too familiar, always the same sidebar, navigation etc.. I like element-ui or buefy for this reason. You can create a website that does not look like a prototype and get away with it :) ",1520655153.0
AmishPanda00,"I'm just starting with vuetify and I used iview in the past.  Compared to iview I feel like I'm being bombarded with colors and shapes during development.  I like it so far because I can see the ultimate purpose behind material design. 

But I'm hesitant to keep moving forward with it. There's something gnawing at me whenever I have to go into the docs and look at all the options available. ",1520640936.0
Oleg18,"It's looks like Materialaze-css.... The same colors, buttons... ",1520653841.0
toqy,The only thing I’d personally consider if for something that is not public facing ,1520691595.0
bdeo,There's an official sub now! /r/vuetifyjs,1520699154.0
anticucho,It’s perfect for an internal application. We built 2 apps with it for chemical compound inventory management. Lots of data tables and forms. ,1520721166.0
imposter_oak,"I built a [codenames](https://codewords.tv) game with it and found the flexbox tiles to be useful. My main complaint is that you're deeply invested in their components and styles that it'll be difficult to make even minor customizations. I like Bulma/Buefy a lot because it's a very minimalist framework that fits well with any design. 

I'd say Vuetify for rapid prototyping and apps you don't need to customize, such as data-driven personal projects. ",1520726890.0
uttles,I like it a lot!,1520636264.0
Oleg18,It is not bad choice. ,1520658371.0
_imjosh,Remindme! 14 days,1520639911.0
RoganTheGypo,"As you are using express you should be using web tokens as it's stateless (there for you shouldn't use session based Auth even though you can) so if you are using passport to decide if a user has Auth (I'm not well versed with passport I usually write vanilla jwt Auth as I work in an enterprise environment) you would have passport pass a token to a client and the client stores that in some manner. Usually this is stored in a cookie but maybe you could store it as a state in vuex with Vue. So the front end is matterless all you would do for you API calls is pass the token as part of the header

Academind has a good express API playlist that takes you through building a express back end and how to protect routes. Also it's important to know your database is irrelevant too. You can use mongo or SQL server or anything that can store data as the logic is all done in the express app. The storage is just strings. Even a json file would do.

Building a RESTful API with Node.js: https://www.youtube.com/playlist?list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q

It starts about video 12/13 I think.


If you are trying to protect a route in your Vue router then maybe read this post https://forum.vuejs.org/t/how-to-set-up-a-global-middleware-or-a-route-guard-to-vue-router-js-help/7893

Basically use vues routing guards. I've never done this, it's easier to just check if the user has Auth against a backend route and if the API responds with a 500 or something then redirect them.

If you have any more questions let me know I'll try post some examples I'm on mobile at the minute.",1520672854.0
Mekhami,"VueRouter gets registered globally across your app, but that app is not what's getting created/run when you unit test your components. Your components get mounted in isolation, so unless you provide the router-link component to your test itself, it has no idea what that is. 

https://eddyerburgh.me/stub-$route-in-vue-unit-tests

https://vue-test-utils.vuejs.org/en/guides/using-with-vue-router.html",1520623923.0
theRetrograde,This is a really great tutorial.  Thanks,1520685976.0
a_fucken_alien,This site is cancer on mobile. Just about crashed the Reddit app.,1520647245.0
thecementmixer,Link?,1520583523.0
mrbakingsoda,Our hero ❤,1520588727.0
shif,"This is an item on my bucketlist, to get a PR approved on a big project that I use regularly, one day...",1520609019.0
neotorama,Thank you ,1520591810.0
frompadgwithH8,"So you meant charting library? D3 is very popular, there are other easier to use libraries out there",1520581477.0
Ssvsgod,Yes. Charting not chatting. ,1520604343.0
nothingduploading,very cool.,1520545137.0
iqen93,"Thanks for recording this!

Strange; on iOS Safari and simply accessing the URL - the pen works well. This might just be arising through the Reddit App perhaps? Interesting nonetheless...",1520529976.0
CaptainInsane-o,Very nice.  Well done with the animation.,1520525418.0
pkej,[the vid](https://www.reddit.com/r/vuejs/comments/82z447/example_showing_the_snap_before_shuffle_on_mobile/?st=JEIRS8Y2&sh=bb87317d) ,1520529178.0
ckdownset13,Nice!  Now try adding in https://github.com/SortableJS/Vue.Draggable to up the challenge.,1520541399.0
irphunky,"Good job, however to up the ante i'd suggest the following;

- Take advantage of deckofcardsapi.com.
- Card and Deck should be own components.

Good start though
",1520594405.0
pkej,"On my mobile (iOS, Reddit app) you can see the cards snap to the next state, then snap back to previous state before the animation takes it forward to the next state. ",1520528525.0
,[deleted],1520545560.0
ktross,"I don't have much interest in the video learning format when it comes to development, but I just wanted to say that it is very well done. If I had to watch this kind of video, I would want it to be one of yours. Nice work!",1520533739.0
RoganTheGypo,Mint videos as usually mate.,1520542052.0
bcmdr,"Cloning a node copies all of its attributes and their values. If you inspect an element with an @click directive, you'll notice the element doesn't actually contain an attribute for the event listener, so there's nothing to clone.

Taking a step back, is what you're looking to do accomplishable with components? Create a component with the @click directive you're looking to clone and instead of cloning it for reuse, just use the component in multiple places.",1520485740.0
pabswilder,[NativeScript looks promising](https://nativescript-vue.org),1520501974.0
aloisdg,"[weex](https://weex.incubator.apache.org/guide/index.html)?

> You may already be familiar with React Native by Facebook which allows you to build native iOS and Android apps using React. Weex is a similar framework by the Alibaba group, which works with Vue.js and allows you to build cross-platform native mobile apps.

> While still in development, Weex is a promising framework and already in use by many companies. You can keep yourself up-to-date with the project on GitHub which is Apache 2.0 licensed.

from: [10 Best Vue.js based UI Frameworks for Building Mobile Apps](https://superdevresources.com/vuejs-mobile-frameworks/)",1520500086.0
HyzerJAK,"You have

    rett.push[str]

instead of

    rett.push(str)",1520470768.0
toqy,You need a linter ,1520472903.0
Second_Fry,It's not Photoshopped or web edited btw: https://i.imgur.com/6vjHQre.gifv,1520467260.0
blaaswix,"I'm doing exactly this for a project now using Nuxt and Prismic. It's not too difficult. Configure [dynamic / dyn. nested routes](https://nuxtjs.org/guide/routing#dynamic-nested-routes) and pass the _slug or document type to the Prismic query in asyncData(context). You may access the params via the context.params.slug - or whatever you named your template. Use the appropriate query method for the Prismic library, and you're good to go.",1520461951.0
StephenNotSteve,Very nice! It would be fun if you added a timer.,1520476517.0
nickforddesign,There is also a little surprise if you beat the game ;),1520450244.0
rrajen,very cool! Is the speech.js file proprietary?,1520461359.0
wbsgrepit,"It does not seem like this would require much of a plugin.   Simply use a grid system that is responsive and set the display of the non priority items to be constrained to larger screen sizes while the high priority items show on all media queries.   add an item for the ""show all"" button that only shows on smaller devices and write some vuejs code to toggle the class of the non -priority items to display in whatever position you want when the toggle is clicked.",1520446389.0
anamorphism,you would need some web api method in the middle. your service method would then run the binary on the server using the supplied parameters.,1520376559.0
frompadgwithH8,"You'd need a server listening for a request

You could post from your vue Webb application to the server, passing anything you want as post data or a query string, which in turn you could pass to the c++ binary

In the server you could do something like 

Call (C++ binary).withyourpostargs (your post args)
.then (response from binary => response.json (response from binary))",1520581862.0
imadp,WHY ARE YOU SHOUTING?,1520378316.0
leviathan123,"Neat! One selfish wish for you, I would love to see a demo of it online with a couple of use cases. If you need help setting up one hit me up! I can do it for you but would probably have a lot of questions. ",1520346628.0
syropian,"I’ve seen a few of these virtual scrolling libraries before and sadly none seem to be able to solve the problem I have. I have an app that pulls in a user’s GitHub stars and displays them in a list with their title, description and also an arbitrary number of tags the user can add. 

This means I don’t really have a way of pre-calculating item heights, which afaik libs like this heavily rely on. Is there anything I can do to make it work? ",1520341773.0
frompadgwithH8,Can you add a section to the Readme describing the problem your library solves?,1520581663.0
SupremeSpez,"Yes, propaganda always confuses me",1520306822.0
xaksis,"Vuex helps a lot when you need to maintain state for data that is shared by various sibling components or multi level nesting components. So, regarding your uaecase: 

Is the modal something that will be shared application wide? For example, ""upgrade to pro account modal"" which can be invoked from multiple places in the app? In that case, i believe is OK to make use of the vuex store to activate /deactivate the modal. If it's only used within a specific component then, indeed vuex should be avoided and you should maintain the modal isActive data within the component.

I read your use case again and if I were to do this, I'd create a shared modal component with a method `open` that takes a date as an optional parameter. Now wherever I add this modal component I'll tag it with a ref (myModal) so I can do:

`this.$refs[myModal].open()` or `this.$refs[myModal].open(date)`

From the parent component.",1520308876.0
cheeseboythrowaway,"I'm in the same boat as you. My application has a similar thing; I have one piece of data that the user selects from a top-level component (it's just one string) and that string gets committed to Vuex state and is available to any other component. 

Before I turned Vuex on I was passing it through as params and updating it via a global message bus, which meeeeehh I feel like that's kinda what I'm doing with Vuex too, except the cascading updates via the computed () {} properties works better than what I was doing.

An example of an event that I am NOT passing on Vuex is the vue-bootstrap ""table"" row-clicked events. The containing class listens for them with a v-on directive but the message doesn't need to go up the chain. I think this counts as a ""UI element"" in how you're thinking.",1520438017.0
frompadgwithH8,I've also seen ui state stored in local storage for persistence,1520581994.0
brandonaaskov,"Granted I’m new to both Vue and this sub, but I hit a similar issue recently in a mobx app with Firebase. In the end I had to use Firebase’s auth change listener to accurately get/store the user info. YMMV. I know that’s not incredibly helpful but perhaps another avenue to test. ",1520369345.0
Skwai,"you should return a promise in your action so that your component knows when it's resolved and can catch errors and react accordingly. Some code i yanked out of a codebase of mine:

    // actions.js
    export const getCurrentUser = () => {
      const authUser = Firebase.auth().currentUser()
      if (authUser) {
        return Promise.resolve(authUser)
      }
      return new Promise((resolve, reject) => {
        Firebase.auth().onAuthStateChanged((user) => {
          if (user) {
            resolve(user)
          } else {
            reject('No authenticated user found')
          }
        })
      })
    }

    export const login = async ({ commit }, { email, password }) => {
      commit(types.SET_PENDING_AUTH)

      try {
        const userRecord = await Firebase.auth().createuserWithEmailAndPassword(email, password)
        const userData = userRecord.user.toJSON()
        commit(types.SET_CURRENT_USER, userData)
      } finally {
        commit(types.RESET_PENDING_AUTH)
      }
    }

    export const loadCurrentUser = async ({ commit }) => {
      commit(types.SET_PENDING_AUTH)

      try {
        const userRecord = await getCurrentUser()

        if (userRecord) {
          const userData = userRecord.toJSON()
          commit(types.SET_CURRENT_USER, userData)
        }
      } catch (err) {
      } finally {
        commit(types.RESET_PENDING_AUTH)
      }
    }

    // component.vue
    {
      computed: {
        currentUser() {
          return this.$store.getters.currentUser
        }
      },
      async created() {
        if (!this.currentUser) {
          this.loading = true
          await this.$dispatch('loadCurrentUser')
          this.loading = false
        }
      },
      methods: {
        async login() {
          this.loading = true
          const { email, password }
          try {
            await this.$dispatch('login', { email, password })
            // if this succeeded we now have a user in our store that we can get with a getter
          } catch (err) {
            this.error = true
          } finally {
            this.loading = false
          }
        }
      }
    }
    } ",1520493511.0
imadp,This seems like a good idea but I can almost guarantee its not going to work unless you get a live demo of those components.,1520296459.0
kimondd,Will people pay for single component?,1520303492.0
andrewm1986,Your website is not written in vue.js,1520304503.0
LittleAccountOfCalm,"This is the wrong approach. 

Good for you, but I'd rather see [awesome-vue](https://github.com/vuejs/awesome-vue) get more populated than steering for priced components.",1520334789.0
g13nn101,Looks like the feedback here has been taken on board. All components are now free to download https://v-components.com/components I also checked their twitter and they are currently running a competition.  More info here https://twitter.com/vuejscomponents/status/971939879994130434 ,1520565516.0
andrekliem,"I think the idea could work if the quality of components is kept really high. A few key things missing are terms of service, the pricing model, fees.

Also to make a purchasing decision, the component pages themselves need more details. Before I make a purchase I would need to see a live usable demo in action like you get with any UI theme. Also, getting an idea of the quality of the code would be useful. e.g. - is it eslinted, following the recommended Vue.js coding style guidelines.

Get the quality up high and I think there's something here!

",1521257839.0
Shonucic,"The answer is to stop event propagation from bubbling up from the child element to the parent.
    
    var vm = new Vue({
      el: '#app',
      data: {
        hoverTarget: 'none'
      },
      methods: {
        parentHover: function() {
          this.hoverTarget = 'parent'
        },
        childHover: function() {
          event.stopPropagation()
          this.hoverTarget = 'child'
        }
      }
    });

Alternately one could use [Event Modifers](https://vuejs.org/v2/guide/events.html#Event-Modifiers)

    <div id='parent' @mouseover.self=""parentHover"">
        ",1520281616.0
wishinghand,"I started playing around with Nativescript for Vue this weekend and was disapointed by the templates provided in the docs. I ended up using [this one](https://github.com/nativescript-vue/vue-cli-template) that installs with the vue-cli instead of the Nativescript cli. I guess I'm too pampered by the scaffolding that vue-cli provides. Since `tns plugin add` won't work with that package, I did some looking around and it seems plugins are just npm packages, so install those with a `-D` flag.",1520282163.0
digitalmahdi,"hope this gets stronger. I'm currently having my app written in vue using quasar framework on cordova, im hoping i can re-do my app on this and use all the native apis.",1520311381.0
macroloft,"I need something similar. In the meantime, have you found a good solution for your case?",1520413685.0
ImReddit,"Post a code example, you'll get more responses.",1520260657.0
hovercraftii,"My recommendation of for quasar (quasar-framework.org). It not only has material and iOS components, but it also has tons of other features to make deploying to electron and Cordova easy, it has a quasar.conf.js that simplifies your webpack config, it has a super powerful starter template, and is blazing fast and easy to use.",1520216038.0
le_fieber,I also recommend quasar,1520279794.0
bdeo,Vuetify is built exactly for this. It's based entirely on Material Design. Many community members have built applications that also leverage other 3rd party libraries for various things. We also have a huge community thats incredibly helpful. /r/vuetifyjs + our discord :),1520776347.0
renoirb,"I tried both Quasar and Vuetify.

If you're looking only for Web and Server-Side Rendered, but NOT desktop app, Android etc, check Nuxt.

Nuxt did hit v1 and Vuetify sems more mature than Quasar.

Nuxt+Vuetify a la carte works well. Look also Evan You's state of VueJS 2018 talk at Vue Conf Amsterdam that happened recently and his @vue/cli demo. Mind blowing.

Quasar pro over Vuetify: more components.

I had to pick a stack, I chose Vuetify a la carte and Nuxt.  The ""a la carte"" will allow me to create my own version.  

Check also Egoist's work: POI, Bili, ...",1520568920.0
renoirb,"Graph, you mean GraphQL, right? (Not Neo4J Graph database)

If so, [look at Pierre's comment about VueX + GraphQL integration pattern](https://github.com/vuejs/vuex/issues/18#issuecomment-348817664) 

",1520569519.0
ABadWomanDriver,"Set selectedCompany = $store.state.users.companyList[0] in your view model.

Binding the v-model to this should set it in the UI. ",1520204606.0
xaksis,"In your mounted hook, you're loading the list I'm guessing asynchronously. This means that if you try to set `this.selectedCompany = $store.state.users.companyList[0]` in mounted it'll probably give you an undefined error. 

What you need to do is either put in a v-if=""listOfCompanies.length"" on your select tag and then do `this.selectedCompany = this.listOfCompanies[0] `

or 

1. Return a promise from your vuex load function

2. do `selectedCompany = this.listOfCompanies[0] ` in the `then` block of the load action in mounted. 

",1520517155.0
duplex_penetratio,You can use a watcher to watch changes from vuex getter,1520201820.0
Abuzz,Django,1520133437.0
Chamberford,"I recently used Laravel for the first time and absolutely love it. It reminds me a lot of building client-side projects with the Vue CLI in the sense that it’s well organized, easy to configure, and a breeze to get up-and-running. Building a RESTful API is ridiculously simple with Laravel. 


Beyond that, Express with Mongo and Mongoose is what I’m used to. ",1520125919.0
i_am_a_programmer,.NET Core.,1520180111.0
tcchen,"Rails and Phoenix. It seems like Laravel and Node are way more popular among Vue.js developers. Rails + Vue.js seems like a much a less common pairing, but I'm not sure why. ",1520137531.0
renemarxis,"Just go(Lang), with echo framework and sqlboiler as ‚orm‘. Very nice to work with and speedy like hell",1520146152.0
Robodude,"Node with express
It's easy and all javascript.

(At work we have asp.net webapi backends)",1520143322.0
snotsnot,Spring boot,1520179115.0
,[deleted],1520129936.0
katzeklo,I’d probably look at running Apollo Server for GraphQL. I think it seems a lot nicer than REST. ,1520148515.0
ffd114,"I use nestjs, it has good documentation. Try it!",1520142159.0
datlean,I’m a beginner with Vue and I use Firebase. It’s stupid simple to integrate with Vue. ,1520165209.0
Kazanian,I use FeathersJS (Express/Socket Wrapper) with Sequelize as ORM for PostgreSQL and having a blast.,1520173545.0
shibuyamizou,Elixir + Phoenix :D,1520474336.0
horses_arent_friends,"Something to consider - do you want something with built in affordances for RESTful design (e.g. automatically building endpoints with boilerplate around common verbs or support for generating code from spec (RAML, Swagger, etc))? Or are you interested in something lighter that doesn’t get in the way of designing a REST api?

On one end of the spectrum you have frameworks like Phoenix (Elixir) that have a lot of built in conveniences ([for example](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Json.html#content)). On the other end you have microframeworks like Flask (Python) that don’t get in your way at all but also require you to do most of the heavy lifting. 

Looking even more broadly: depending on the scope of your project and your requirements, a GraphQL api may be worth considering.

To answer your question: I’m a big fan of frameworks that allow you to opt into complexity and provide opinionated and well thought out solutions when you do. My go-to options are Pyramid (Python) and Phoenix (Elixir).",1520142285.0
bmarkovic,"I typically roll my own with Node, Knex, Objection and Express. I've been using Sails previously but Waterline has subpar support for more advanced PostgreSQL data types and MVC doesn't make much sense for SPAs anymore to me. ",1520158277.0
plainblackguy,Wing - http://wingapi.com,1520175995.0
Oleg18,I used Yii2 before it's the simplest framework. Now learning Laravel..Did you heard about October CMS??? it's  simple cms on Laravel base.... You have to  look ASP.net core also... ,1520261199.0
JinSantosAndria,"Php Symfony 4 slim wih doctrine and as less bundles as possible. Works, like laravel.",1520320900.0
Djbm,"Without knowing the specifics of your application it’s hard to say that any one choice for a back end platform is better than another. 

The nice thing about a REST API from the client perspective (in this case Vue) is that the actual platform serving the API is completely irrelevant.

So if you are asking if there is a particular backend that works particularly well with Vue, the answer is no.

I’d choose based off these factors:
 - What language you are already familiar with.
 - What database you want to use (if any), and whether the language has well documented and supported drivers for the database.


As for what I use? Often Node.js and Express.js. I’ve become quite proficient in JS over the years and I find I’m productive in it.",1520080951.0
billcube,Have you seen what firebase could do for you ? What's the focus of the degree ? The rest service is the complex part.,1520077709.0
johnmaclained,"I'm assuming you already have a general knowledge about REST implementation.
There are lots of stacks to choose from if you are really going in the 'restful' direction. It also depends on what language you want to use/learn or already comfortable with. 
So, here are some example stacks to choose from according to their respective languages which I personally prefer or have used.
    **PHP** - Laravel, has nice documentation, lots of tutorials + [jwt-auth](https://github.com/tymondesigns/jwt-auth)
    ,...**Javascript** - Nodejs + express or sails + [nodejwt](https://github.com/auth0/node-jsonwebtoken)
    ,...**Python** - Django ,...
Again, their are lots to choose from, but to me these are very 'beginner friendly' based on my experience and choosing what stack to use is very subjective and I don't want to trigger other devs lol. Good luck tho.

",1520080037.0
cyanydeez,I'd do vuejs + Postgraphql using postgres,1520093945.0
mobiledevguy5554,Go has been fantastic,1520165669.0
elijahww,"Give this a try. [https://start.spring.io/](https://start.spring.io/). I have not used it before, but it looks promising. You need a boilerplate for your Java/Spring backend. Or you'll spend an eternity getting it just right. Same for Vue app, which is [Vue cli](https://github.com/vuejs/vue-cli) ",1520455865.0
simonepri,"This simple app is used by me to generate leaderboards for the Italian Olympiads of Informatics Training Platform.

Since the project is quite small and can be easily reused for your own leaderboard I thought it would be useful to share it with you!

That's actually my first VueJS based project, so comments are really appreciated.",1520075055.0
Tythtyth1,"I really like ElementUI, they have a lot of pre-built components. The one I was most impressed with was a table the expandable rows to show their information in another way. Check it out!",1520080985.0
mobiledevguy5554,"Just finished a project using vuetify and it was a great experience .  Very few issues.

If you do use it I encourage you to give $$$ to the project .  These folks need to eat",1520086712.0
paladincubano,Buefy is very nice too.,1520123665.0
ours,"Stick to Vuetify. They all have their downsides but Quasar has a long road towards stable and only follows Material design so-so.

The Bootstrap ones have the issue that they depend on Bootstrap so a bit behind the new generation of UIs (i.e. Material and the like).

Vuetify does Material pretty damn good and is quite complete. Doc needs some work but it works well.",1520071041.0
Mr-Silly-Bear,"Try Uikit. Currently my favourite framework for anything, Inc Vue. ",1520080864.0
hovercraftii,"My recommendation of for quasar (quasar-framework.org). It not only has material and iOS components, but it also has tons of other features to make deploying to electron and Cordova easy, it has a quasar.conf.js that simplifies your webpack config, it has a super powerful starter template, and is blazing fast and easy to use.",1520091192.0
wilkesreid,"UIkit 3 is going really well with Vue for me. Just built a production intranet for a major company with it, and it’s pretty solid and people like it.
https://getuikit.com",1520097048.0
RayDawn86,"Way more than just UI, but I have been using quasar for a while and love it. ",1520105163.0
kirdape,Vuetify is stable now with version 1. It used to be cumbersome to update but now it’s smooth. Also the team is great and hard working.,1520106296.0
hi_ma_friendz,I built my app from using bootstrap 3 css. ,1520108549.0
jimithatsme,"I really like vuetify but I can’t use it on projects for the simple fact that it doesn’t work with IE 9/10.  That’s a deal breaker for me.  Some users only have IE 9/10 installed on their work PCs and can’t install an alternate browser.  I really hope the vuetify team releases an IE 9/10 compatible version, even if some features are missing.",1520122484.0
rutierut,"None, in my honest opinion they all suck and you are almost always better of starting from scratch in the long term. ",1520069089.0
DOG-ZILLA,VS Code!,1520034529.0
Neekzorz,"https://github.com/matt-oconnell/vue-monaco-editor

Here's a vue component based on Microsoft's Monaco editor - the one they use in VS Code. I've used it before and really recommend it.",1520041031.0
n1kdotio,Emacs.,1520077088.0
webia1,#VSCode,1520067534.0
thecementmixer,"Never heard of Froala before but seems like it's a WYSIWIG editor, if you want a straight up non-wysiwig editor then can't go wrong with VS Code.",1520059238.0
sleepymansalitre,"Vscode
",1520074796.0
hi_ma_friendz,"I’m using Visual Studio 2017, not ideal but it works. ",1520108639.0
LittleAccountOfCalm,"You can check quill.
There are various ports for vue like this [one](https://github.com/surmon-china/vue-quill-editor)

I would love something like Draft.js for vue though..",1520031530.0
evilmaus,Just drive the table rows off of a computed property. Have that computed property read other state to filter and then sort your data. The filtering and sorting inside of the computed property can be driven by vanilla JS or by Lodash if that's handy.,1520012075.0
Agranok,"Yeah you're going to want to go off of what /u/evilmaus said.  Looking at your Fiddle,

    <tr v-for=""row in filteredRows"" ...>

And filteredRows in this case is your computed property.

    filteredRows () {
      // this will look through the first level of the entire object's keys
      return this.rows.filter(row => {
        return Object.keys(row).some(key => {
          return String(row[key]).toLowerCase().indexOf(this.search) > -1
        })
     })
    }

That computed property is actually ripped straight from the official VueJS examples [Grid Component](https://vuejs.org/v2/examples/grid-component.html) so you can take a look at that to get other ideas.",1520124574.0
inhalingsounds,"Seems like you're trying to emulate the functionality of data tables. There are a number of plugins for that, I'm currently using [vue-tables-2](https://github.com/matfish2/vue-tables-2) and it works pretty well.

Unless you're doing it for learning purposes you might be better off using a package like this.",1520011924.0
corsair330,"Seems okay! The ""use with Laravel"" part feels a bit redundant though, but at the same time, it might help someone coming from the Laravel community.",1520017622.0
m_roth,"Très bien, I've been looking for a Vue port of Photoswipe for a while.

It would useful (to me) if each item could also take an `alt` property that would then be used as each image's alt text. ",1520018781.0
yetinthedark,"My only question is whether I can currently set any of the [options listed in the PhotoSwipe documentation](http://photoswipe.com/documentation/options.html)? 

Overall, it's looking good. I tried to implement PhotoSwipe a few weeks ago, but found it too tedious to set up, so I went with [baguetteBox](https://github.com/feimosi/baguetteBox.js) instead. I found it annoying that when viewing the demo, you see this neat gallery + lightbox, but it isn't an ""include the script, change some options and it works"" kind of thing, and it actually requires 200+ lines in order to make it work like it does in the demo. I mean, if I have to do all this, what is PhotoSwipe actually doing for me?! I like how your package handles all of this immediately.",1520052682.0
acklavidian,I made a pull request for some really low hanging fruit 😆,1520001106.0
zmasta94,Nice!,1520001622.0
OriginalEXE,"Your computed property is set up wrong, and you don't need watcher at all.

The point of the store is to have one centralized source of truth, that benefit is lost if you will end up copying all of the data to your component.

Here is what your component might look like:

    <template>
    <div>
      <b-table :data=""tableData"">TABLE FOO HERE</b-table> 
    </div>
    </template>

    <script>
    export default {
      data() {
        return {
          alarmModal: false
        };
      },
      computed: {
        tableData() {
          if (!Array.isArray(this.$store.state.alarmTable) || !this.$store.state.alarmTable.length) {
            return [];
          }

          return this.$store.state.alarmTable;
        }
      }
    };
    </script>
Vue automatically binds watchers to the store state `alarmTable` property and your component will be updated as soon as the store state updates.

As for whether the store is worth it or not, if you only have this single component/view and only one component needs a single piece of data from the store, then it's probably an overkill.",1519980608.0
jemminger,"I'm new to vuex too.  If I understand correctly your computed property can return the data directly without need for a watcher or a `data` property in your local `data()`

    <b-table  :data=""isEmpty ? [] : tableData"">TABLE FOO HERE</b-table> 



    computed: {
      tableData() {
        return this.$store.state.alarmTable
      }
    },

With more complex stores you can use getters",1519979625.0
cyanydeez,maybe add iy to the static assets,1519962987.0
Bumpynuckz,This looks super cool! Great work.,1519939730.0
snowseth,Why did you link to your tweet instead of your github page?,1519930170.0
BoleroDan,"it's generally recommended to not use classes like this, for this reason. You'll have to rethink how you want to structure data coming into a component, but its generally best to keep it as simple with primitives, objects literals or arrays.
",1519922635.0
cyanydeez,"i would hazard a guess, if yiu want to us a class, its because that class exists already and has methods attacked to it.

If you just want to share methods in components, use mixins.

If you want to have a plugin like object, create a plugin.

https://alligator.io/vuejs/creating-custom-plugins/

this allows you access to the object anyone where

i end up having success integrating  certain third party libraries as plugins.",1519996248.0
jineshshah36,It would help to understand why it needs to be a class,1520004869.0
ikon2112,"This isn't exactly what you were looking for, but Vue does have a decorator for writing components as ES6 classes

https://github.com/vuejs/vue-class-component",1520026470.0
boxidea,"cloc doesn't work for you? Looks like it works for me:

    $ cloc app.vue 
        1 text file.
        1 unique file.                              
        0 files ignored.

    github.com/AlDanial/cloc v 1.76  T=1.02 s (1.0 files/s, 168.5 lines/s)
    -------------------------------------------------------------------------------
    Language                     files          blank        comment           code
    -------------------------------------------------------------------------------
    Vuejs Component                  1             30              4            138
    -------------------------------------------------------------------------------",1519918021.0
konaraddio,"There should be a Unix command for this, perhaps `wc -l *.vue` or something similar. I'm on mobile, so I can't confirm.",1519914764.0
jordanaustino,It might be interesting to build something that does this but breaks down vue file line counts by tag/language as well. For instance grouping your vue script LOC with other js in LOC by language counts (assuming your lang isn't set to coffeescript or something else in which case it would need to know how to deal with that.),1519929042.0
miralize,"What a cancerous website. 

If you insist on forcing popups and permission requests upon readers on first load then you obviously dont your consider your content to be all that good.",1519914585.0
LEOtheCOOL,"Out of curiosity,  can you share some metrics on how successful a blog post like this is for selling your book and getting people to subscribe to those mailing lists?",1519920629.0
jemminger,Anyone using https://parceljs.org/ ?,1519871092.0
Lelectrolux,"[Render functions](https://vuejs.org/v2/guide/render-function.html)

The first example of this doc page is analogous to what you want to do.",1519829660.0
smithunbound,You would think npm might be a better gauge,1519844678.0
AfternoonSale,"Not an exact answer but https://madewithvuejs.com/ shows sites created with vuejs and you could potentially find one of those that is open source if you looked around.  

",1519826475.0
ckdownset13,"Good place to start:
https://vuejs.org/v2/style-guide/#Priority-B-Rules-Strongly-Recommended-Improving-Readability

Can't share our business repo, but we conform to the guidelines above - specifically the naming schema.  As for structure, we have to two root ""component"" folders.  

One is named ""components"" and houses many subfolders for each section of the stie.  The .vue components for main pages (usually ones that have a dedicated route) are housed within.  

The other folder contains the same structure (many folders for each section of the site), but instead of housing core pages, it houses the smaller components used by the core pages.",1519866578.0
zmasta94,.,1519824566.0
bmarkovic,It's hard to come by videos from the conference. I was really looking forward to viewing presentations by the Chopin brothers and Edd Yerburgh -- but every single topic on that conference looks interesting (getting there wasn't an option for me unfortunately).,1519804917.0
jaredcheeda,"mandatory viewing.

very awesome news around vue cli, and vuex",1519802237.0
GMSteuart,"Make the connection using https and not http

Edit: reread your question. The localhost:3000 is what you will use for local dev while your Vue dukes will point to the production backend points if they are currently pointing at localhost:3000",1519797276.0
zmasta94,"JWT is a good balance between ease of implementation, security and flexibility. 

Passportjs and passport-jwt on a Node server works flawlessly with Vue. I implemented it within an hour the other day and will write a guide soon. ",1519824666.0
jineshshah36,"1.	Google can scrape js rendered apps fine as long as the data does not need to be fetched remotely. In the past I have served a vuejs app with all the data it will need on first load set to an object attached to the window. Then, I just load that data into vue on the client and render. You can test that this works by using google’s “fetch as google”. If you’re still worried you can render the initial views with the data first then have vue take over.
2.	Another option would be to use something like pretender.io potentially.
3.	finally you could render the full template client side and then, just attach multiple vue instances to different parts of the page. Vue has no restriction on that.",1519783392.0
toqy,Just give it a shot on a small example page and see what happens. I’d think it would be too easy to mess up even if it would work in theory. Is it really worth the effort do all the markup twice though? ,1519780827.0
wilkesreid," I’m primarily a Vue developer on the front end, and I’d never heard of Parcel. Thanks for this.",1519782019.0
23hearts,Now.sh gives you a randomized url and can be deployed from command line. Almost too easy :),1519799169.0
TheTaiVu,Build and serve up the dist folder online,1519766295.0
zetecvan,"I'm developing something for a client. After the first couple of weeks I went in to see him with my imac (I don't have a laptop). Not ideal. 

So for the next demo I shall be pushing it to Digital Ocean. I won't have a domain name, just an ip address. They can have a play with it and when they've done, delete the droplet until next time. ",1519766330.0
--Petrichor--,"I think compared to React, there is much more Vue specific stuff that you need to learn - for example, Vue directives. When learning best practices for React, you are often just learning best practices for functional modern JavaScript.

Another disadvantage is the size of the community. On the other hand, this can be good if you want to distinguish yourself from other JavaScript developers. On the other, that means fewer resources. On both counts, however, it looks like with Vue's growth that this will be less and less true. 
",1519749796.0
CristiJ,"From my experience of over 1 year with Vue, I could point only a few

- Lack of some common solid plugins/components. (Google maps, calendar, vector maps etc) There are some components for that but are hardly maintained. React has some good options for all of them
- You need to go deep in more complex components/plugins.If you want to develop something very flexible, you just have to get down to render functions/jsx to do that. (e.g render the contents of a slot in another place/component).
- Props have to be specified explicitly. There might be cases when you simply want to transform some css classes to props or  `<button round large>` accept any props. You have to specify these props or use `$attrs` / render functions or jsx.
- Reactivity caveats. If you read the docs, there are some reactivity caveats, like setting an item from an array directly `this.items[key]=value` or adding a new `data` property. This might be both good and bad depending on use cases. Most of the cases it's nice to have everything specified upfront inside `data`

Other than that, I really love Vue and love many of the nice things that it offers and which are probably above other frameworks

- SFC with great tooling, various css integrations (modules, preprocessors, scoped etc)
- Things are very explicit. There is a great breakdown of your code blocks (hooks, data, computed, methods etc)
- Wonderful official plugins and tools (devtools, router, vuex, cli, templates etc)
- Some nice UI libraries (Element, Vuetify) which have a pretty solid component list.
- Wonderful docs
- Cool, active and modest members. 
- Vue makes debates about X vs Y library/tool (css vs jscss, redux vs mobx vs ...) vanish since it offers opinionated but good solutions.",1519756262.0
AwesomeInPerson,"Nothing grave really...

But Single File Components make it really tempting to write waaaay too much CSS, which can be a bit of a problem sometimes.",1519746898.0
phantamines,"TypeScript and Vue feels like an afterthought. VueX wasn't engineered with strong typings in mind and it shows. Class decorators also errode the simplicity and organization of vanilla Vue.js. I'm still struggling with both in a project, and a lack of a specific style guide to guide the community means tons of half baked examples out there.",1519769400.0
OmegaVesko,"The smaller community is the biggest real disadvantage Vue has compared to other frameworks, React especially. It makes it harder to hire developers with previous Vue experience, and also means the ecosystem in general is smaller.",1519747230.0
danielkvist,I don't know anything about Angular but compared to React I think Vue has more advantages than anything else,1519745904.0
Robodude,"Even though you can use render functions and jsx, some people don't like learning a 'templating language' when react's big thing is that it's just javascript. There is a lot of syntax sugar built into the 'templating' language (like input modifiers) too which can be hard to learn about",1519748637.0
ForSpareParts,"Somebody else mentioned reactivity caveats, and I'd second that. The most pernicious (and least obvious) for us has been performance.

Vue gets its clever, granular reactivity by creating a bunch of getters and setters on the objects you set in `data` or `props`, or return from `computed`. Which works remarkably well, but can have a serious performance impact when you store, for instance, a several-thousand-length array of objects on a Vue component -- Vue will go through and set up reactivity on all the objects in the array, and it can take a lot longer than you'd expect. The same system can ""infect"" objects from other libraries if you store them inside of Vue (I believe we saw Highcharts performance suffering because the chart instance was stored in a `chart` property of `data`.

There are two fixes:

1. Use `Object.seal()` on large objects you plan to store on Vue components. This prevents Vue from adding its dependency magic -- so internal changes to the object won't be detected and you'll have to update the object reference at the root.

2. Store things in properties outsides of `data`/`props`/`computed`. This works well for things like the Highcharts instance I mentioned above: when we just stored the chart in `this.chart`, without ever adding it to data, performance got much better. Of course, there was no reactivity on that object at all, but that's fine -- we never wanted to watch for changes on `this.chart` anyway.

FWIW: don't let any of this scare you off using Vue, I think it's fantastic. This is a manageable performance issue that only affects certain apps in certain very specific circumstances -- and the API, templating, and tooling is good enough to make up for it, IMO.",1519764873.0
desnoth,"There is no real disavantage with the Framework. It's still lacking community like react and enterprise recognizing. But I have faith in that it's growing fast and more more websites are adopting it.
I've only seen improvements over React and specificaly Angular.
It maybe lacks a deeper integration with Typescript especialy in templates",1519752662.0
richardzcode,"I build Javascript library which intended to support all frameworks, so had chance to work on React, Vue, and Angular. Personally if I were to make a decision it is really between React and Vue. The advantage of Angular, and one of the advantages of React, is being backed by big name company. So people look up to them, so easy to sell.

If it is not from big name company, I doubt how many developer would tolerate the learning curve of Angular.

Vue is more towards developers. My feeling while developing with it has a lot of ""this makes sense"" moment.

React sometimes I feel not used to at first but with time I get it. I think one of the advantage of React is it has a group of ""loud"" leaders, to convince developers what is the better way of doing things. I don't agree with them all the times but overall they are great.

So to me, the disadvantages of Vue, are big name and ""loud"" leaders.",1519773225.0
TheTraceur,"No way to build native apps like you can with React Native. NativeScript + Vue looks promising but it isn't production ready yet. 

Edit: Actually NativeScript-Vue just reached 1.0 this month and is production ready",1519777950.0
ABadWomanDriver,"Typescript support. Also, vue seems to be evolving rather fast so a lot of the examples you find online may be outdated. ",1519778994.0
CunningFatalist,"I work with both Vue and Angular and I like both quite a lot. However, Angular is way better when it comes to  TypeScript support and form validation. Especially validation's just great in Angular.",1519986909.0
jaesung2061,I’ve used all three. None. There are no disadvantages to Vue.,1519748935.0
BunsOfAluminum,"You can analyze the size of the different bundles in your build by using a tool like `webpack-bundle-analyzer` or by generating a stats.json file and pasting it into https://chrisbateman.github.io/webpack-visualizer/

It will show you all the different libraries and modules being included and how big they are relative to one another. You may just have a lot of code getting included. For example, I recently was using DevExtreme grids in a component of my app. I removed the import and the size of the build went down by 2.5mb.

Check your filesystem for the size of node_modules. I'd bet that it's freaking huge. Way bigger than 2.5mb.",1519759849.0
DOG-ZILLA,"I've never used Webpack to manually build a Vue project before, I've always used the Vue Cli or Nuxt to start a project on which has all the build steps built in. Is there a chance you could port your work over there?

If not, are you sure you're passing the -p flag to Webpack?

In one project I have, I have an NPM script such as:

    ""scripts"": {
        ""build"": ""NODE_ENV='production' webpack -p""
      }

Then in my Webpack file I have:

    plugins: [
        new webpack.DefinePlugin({
          'process.env': {
            'NODE_ENV': JSON.stringify(process.env.NODE_ENV)
          }
        })
    ]

I run 'npm run build' from my package.json file.

Does that help at all?",1519744021.0
smallpom,"Thanks for the tips guys. I just downloaded the official vuetify cli and ran a fresh build and that went out at 2,5mB, so I guess if you include ALL of vuetify then its pretty heavy. None of the users has noticed anything, I guess since its a app mostly for company users(desktop) they have pretty fast connections and doesnt notice the load time.",1519808592.0
,[deleted],1519737602.0
cobyn,Gitlab has free private repository and CI integration right in your source control,1519735179.0
jgmcelwain,"We use [Codeship](http://codeship.com/), highly recommend it. Has a test pipeline and really good integration with Github and Slack, so we know straight away when something fails or doesn't work.",1519729715.0
boxidea,"We use [Bamboo](https://www.atlassian.com/software/bamboo). It has separate build and deployment projects, which is nice. 

The build project runs the tests, runs npm build, and saves the output as a versioned artifact.

The deployment project detects a successful build and pushes the artifacts to the appropriate servers
",1519734794.0
vdallaire,"We use Jenkins for installing, building and testing. If all those steps pass, we build a docker image ans deploy it on OpenShift. We also have a webhook on bitbucket when a commit is pushed to trigger the whole process.",1519736772.0
poldixd,I use Gitlab. It’s free and you can install the software easily on your Server. ,1519737227.0
m0dernj3j3,I use Bitbucket's pipeline to Heroku. it is easy and hassle free. I have beta and prod repo and it automatically deploys to Heroku.,1519743851.0
Eiskis,"Netlify is amazing for deployment and hosting.

For my Nuxt site I ended up getting a droplet from Digital Ocean but I'd love a more automated service. Had some problems witg zeit.co but it seemed promising.

Bitbucket Pipelines for any additional CI stuff, I've deployed APIs from there to Heroku but there's a lot of steps involved in the setup.",1519756386.0
kaelwd,"We use Travis for CI, and Zeit Now to deploy. The travis config is available [here](https://github.com/vuetifyjs/vuetifyjs.com/blob/dev/.travis.yml) if you want to see how it's done. ",1520081617.0
JinSantosAndria,"Using dockerized gitlab, commits create a simple docker image where the tests are run (kidding), if commit is tagged I create backend, nginx, mailer, database, cron containers, copy the current app code into them. Push them into the gitlab docker image registry. Deployment is just a docker-compose rm -sf && docker-compose up -d away. Still learning docker but it works very nicely. Also very impressed with gitlab ci and the out of the box toolset.",1520321368.0
cheeseboythrowaway,I'm using Elastic beanstalk for deployment. I made a docker container that runs nginx and serves the static files. It could be probably be done a better way with S3 but this works for how AWS is set up for my team.,1521574453.0
djbft,I think you are looking for [this](https://developer.mozilla.org/en-US/docs/Web/API/notification).,1519701453.0
carrot_gg,This has nothing to do with Vue.js.,1519698762.0
jimithatsme,"You can use a service worker, currently supported by android and soon iOS.  https://youtu.be/I3jTvWj8JrQ

You’ll need a backend, Firebase is a good option.",1519779931.0
likesnoodles,"For anyone reading this in the future, this was the shortest video I found that could quickly explain push notifications to me. Push notifications ARE NOT the same as browser notifications. Push notifications use the Push API *and* the Notifications API. Browser notifications only use Notifications API. Using only the Notifications API makes notifications appear only when your website is open. Push notifications mean that you can show your user notifications even when their browser is closed.

https://www.youtube.com/watch?v=ggUY0Q4f5ok",1520048428.0
imadp,Just a guess but can you use the content type of application/json instead?,1519740395.0
ianpaschal,Not a very good explanation in my opinion.,1519736325.0
DOG-ZILLA,This site is a bit cancerous on mobile. The popup just wiped out the page!,1519677954.0
evilmaus,"""Graph"" is a valid word for what you're describing, but is also for a mathematical object. Using ""charts"" removes any confusion about which concept you're referring to. FWIW

Vue is not a charting library. You'll want to look around for a charting library to help you with your needs. If you need Vue to manage the part of the page with the chart, then use Vue's lifecycle methods and possibly some data watchers to render, update, and tear down the chart.",1519669312.0
dynamitre_pork,"When you assign the value of x.b to b in your data it just copies the value, and not the reference. In other words, it sets vm.b to 7–the _value_ of x.b at _that_ time.

Later, when you change x.b it doesn’t change the value of vm.b because the value vm.b is not actually x.b. The value of vm.b is just 7 (it was copied when you initially assigned it). 

Vm.b and x.b are in separate points in memory. Therefore, changing one does not affect the other.",1519665148.0
africajam,"I have written a few words about why I chose to rewrite my ember app using vue here:

https://medium.com/@weebrix/why-i-am-migrating-propertywebbuilder-from-ember-js-to-vue-js-ca40925fa633",1519671352.0
JinSantosAndria,"For me, Angular and React always had this very overcomplicated feeling attached. It felt like Java, when all you need is JavaScript. Its like Vim, but you just want to edit a digit and use nano instead, because holy shit you only know three Vim commands anyway. The chances I make some fundamental error within the first three months of using one of both is a given.

With Vuejs it just clicked. Everything was named nicely, nothing was overcomplicated, the templates are easy to install and even to understand with absolutley no prior knowledge (except some webpack details). Documentation is charming, examples are simple, there seem to be only so many traps you can fall into and have to keep in mind. The chances I make a serious error within the first three months is... present but it's so easily corrected.",1519635587.0
segphault,"By introducing non-standard JavaScript syntax that tightly couples templating with the programming language, JSX requires a complex transpiler toolchain that may involve a non-trivial amount of setup. Vue's native templating system doesn't impose that additional complexity, so you can just load it right from a CDN and use it natively in the browser without any other dependencies.

It is worth noting that you can also use react this way if you don't use JSX, instead using plain function calls to build your HTML or an alternative react-compatible templating language such as t7. It is also worth noting that Vue ends up requiring a cumbersome build step and heavy Node.js toolchain just like React with JSX if you opt into Vue's non-standard component file format.

Ultimately, as browser support for modern language features continues to become more robust, I suspect people will start figuring out that life is better without the increasingly superfluous build step during development and the janky npm packages that are used to power it.",1519625759.0
Shadowys,"I can only speak for react here:  
1. create-react-app literally skips all the hard parts of setting up the environment  
2. React is harder to learn because you have to think of it as writing code in a programming language, not a markup language. Personally I found React the easiest to learn because of my FP background, for which React made a lot of sense. ",1519612990.0
mattaugamer,"Can you clarify what was actually difficult? If you’re using CLI tools all frameworks have roughly the same “Getting started” process.

If you’re not... that’s why you’re struggling. ",1519611992.0
hhh333,"Honestly, I don't see how this relates to Vue.js.

You should do input sanitization no matter what frontend framework you are using, this is a backend issue.",1519633039.0
-valorkin-,"Angular has default sanitizer, it's strict and very annoying, cuz it checks everything",1519636629.0
JinSantosAndria,"Oh my. Typical programmer error. PHP manuals are preaching filter_* sanitize filters, strip_tags since forever. In 99% of the use cases there is no valid reason for the enduser to ever submit anything with a tag. We also have stuff like [HTML Purifier](http://htmlpurifier.org/) that revolve around this shit. It's not PHPs or Vuejs fault.

Also `<?=` gives me serious PHP <5.3 vibes. That shit is off in prod and dev since then and even back then it was discouraged and not recommended for portability between unknown hosting servers.

Sanitize user input. Vuejs will transmit unsanatized, so do it in your backend, no matter what language. And when your done sanatizing and validating it, escape it properly for your storage layer!
",1519635145.0
sicjoshsic,"~~Am I missing something here? As far as I can tell, all you're showing here is that PHP will render unsanitised HTML. Vue doesn't come in to it.~~


What I was missing was the rest of the README (I blame mobile... mostly). Can see the problem now. I can't see how this could be fixed in Vue though without breaking the template engine... can the same exploit be applied to Angular I wonder? Or any templated JS framework for that matter...",1519634206.0
Quirino_Exile,Vue-kindergarten. If you need more details on implementation let me know.,1519574967.0
ABadWomanDriver,Awesome looking project! I’ve had issues in the past getting Vue projects up and running with TS so this will be a nice resource. I plan to dive into this and see if I can learn a thing or two.,1519709504.0
dennythecoder,This looks nice for anybody looking for a quick structure with ts/jest/cypress and some other goodies.,1519601182.0
cyanydeez,You should work with quasar framework.,1519572783.0
defunctAI,"Learn vue2. They are basically the same to use, but vue2 is the current version. I don't see any reason to use a version that is outdatted. Leaning v1 will not help you learn v2 ... they are the same for very minor changes, most of the difference between the two is performance.",1519558654.0
DOG-ZILLA,Vue 2. ,1519559336.0
theRetrograde,"Definitely Vue 2. Vue 1 is just not really relevant any longer. There are some syntax differences between them that you would just need to relearn anyway. Also worth noting that vue2 is probably easier to learn - more recent resources, clearer docs, better tooling. ",1519559591.0
chrissilich,"Don’t worry, it’s not like angular, where versions are significantly different, and each have their merits and people still use each (what a mess). Use the latest Vue. ",1519562752.0
Mekhami,"where do people come up with questions like this, idgi.

'should i start with english, or learn  ye olde english first?'

",1519597251.0
desnoth,"Create a checkbox with a v-model pointing to respective boolean value in your rfid?

If you want to update your databasz yeah an event listener with onclick which you will pass the context of the element clicked, then post the update on your url, then inverse the boolean",1519557873.0
TheElectricFire7,"Note: am using Nuxt, shouldn't make a difference though.",1519466035.0
rnenjoy,I can help you fix it. But where is the code? The code on github is the compiled nuxt code? ,1519497150.0
r4ymonf,"    .application--wrap > .layout > .flex {
        width: 100%;
    }
    footer.footer > .container {
        padding: 0;
    }

This CSS should make it slightly better looking. I'm not too familiar with Vuetify, but that at least makes it look slightly better.",1519498346.0
,[removed],1519521754.0
MantraMan,"Hey,

you should remove the ++ on the listOfThings.length
var newItem = { id: this.listOfThings.length, text: this.message };

the ++ operator actually tries to increase the length variable and I'm not sure if that's allowed or what it does. it's enough simply to use length since your ids are starting from 0 and the lenght will always be 1 larger",1519422189.0
tucknut,"/u/MantraMan is correct. 

Remove the ++ from this.listOfThings in your add method. Your array length is always gonna be one more than your largest key so it works. 

As to why it doesn't work with the ++, I'm pretty sure you're causing some conflict with the vuejs reactivity by messing with the array length but that's just my guess. ",1519443714.0
danstansrevolution,":required=""true"" should be okay?",1519419002.0
RobbeBog,"v-bind:required=""myVar"" or :required=""myVar"" (short notation) is correct. There might be an issue somewhere else",1519420338.0
evilmaus,"This sounds like something that you shouldn't be managing with Vue. It just feels shoehorned. I'd ditch Vue to set up something with plain JS, that could optionally be set up and torn down within Vue's lifecycle. Open up an empty file and define a JS class to manage the carousel.",1519418588.0
_eazy__,"You should use nested routes:
https://router.vuejs.org/en/essentials/nested-routes.html",1519401919.0
poltermouse,"If you're not propagating the data from parent to child, then there's no need for the parent to be aware of the child data.
If you still need to work like that, have the data in the parent and pass it to the child as a prop. Then emit an event from the child to let the parent know it has to change the data.

Also the emit method can pass arguments to the listeners like so:
this.$emit('valueChanged', value)

Value will be passed to the parent's listener method.",1519401254.0
acklavidian,"Can you make an example in https://codesandbox.io/s/vue ?
Edit: url",1519400937.0
gallowdp,Look into vuex. Seems complicated at first but just follow the documentation and you'll get it. Once you get it it makes things so much easier for sharing data between all your components.,1519512852.0
Maxtream,"Use $refs  

    <your-component ref=""component""></your-component>    

    export default {
        name: 'your-component',    
        data: function() {  
            return {};  
        }  
        methods: {  
            test: function() {  
                console.log('test-from-component');  
            }  
        }  
    }  

from main file just run this  
this.$refs.component.test();  
  
Keep in mind that this is NOT advised by Vue.  
Edit: formatting",1519425224.0
pd-andy,"This is super hacky and almost certainly not the way to do it *buttttt...*

> If I move the ""const io from 'socket.io' connection to the mount() portion of the component... I lose the global availability of io

    Import SocketIO from 'socket.io'
    
    export default {
      data () {
        return { io: null }
      },
      mounted () {
        // Insert some logic to test if user is logged in then...
        this.io = SocketIO(80)
     }
    }

Im out an on mobile so apologies if the formatting is horrendous. Would this work? ",1519405196.0
jineshshah36,"If you bundle your app using Webpack, it will have no conflict by default. But nothing besides your script will be able to access anything in your script unless you explicitly assign a value to the window. Using Webpack would definitely handle what you want.",1519394910.0
theAlphaActual,I was kind of looking for this. Thanks! ,1519457097.0
nothingduploading,why not koa?,1519441205.0
harrygato,The best way is the guide that Heroku provides. Do you need help on a specific part or are you looking for someone to google this for you?,1519347436.0
highway-to-helvetica,"https://github.com/express-vue/express-vue

Here's a full MVC Example you can use as a starter

https://github.com/express-vue/express-vue-mvc-starter",1519375706.0
maboolio,Best frontend framework ever.  Simply fantastic!,1519359321.0
Robodude,I am! I'll be attending the Animated Interfaces workshop too,1519658557.0
LynusBorg,"Well, without Mutations you can forget about using the Vuex time-travelling in the vue-devtools, for example.

And generally, you have it backwards: You *always* need mutations, but you can completely skip the action in between if you don't need to do anything async. That's how Vuex was designed, so it's not a smart idea to do the opposite,

You can totally do `this.$store.commit('YOUR_MUTATION', someData)` and skip the mutation step.

But personally, I like to be consistent in components and always use actions. For those ""boilerplate"" actions that don't do anything special, I just write small helper functions that generate the necessary code for me.

",1519337394.0
AndyJessop,Personally I don't think you need both mutations and actions. I think0 it's basically to try toconfine where you update the state so it's more controlled.,1519335537.0
imadp,"I'm not qualified to give you a long breakdown about why but this one seems easy to answer:

    Should I expect some unpredictable behaviour down the line?

Yes possibly, since you aren't using the API the way the documentation tells you to.  I can't imagine writing code that may or may not work in order to save time now, it just sounds like something that will probably bite you in the future.",1519335591.0
,[deleted],1519321611.0
zoejaba,"I would add a field like ""priority"" to the todo document in firebase. Then create a  method that runs after dragging that reassigns the priority of each todo in the correct order. Then when fetching data from firebase use the orderBy method to sort the todos by priority. ",1519336103.0
nagai,Wow.. And here I am 3 hours into trying to align some shitty icons in a nav.,1519331871.0
Mekhami,"Disclaimer: This talk is definitely for people who already understand how animations and transitions work, and is more about the Vue contract with animations than about learning how to do them in the first place.

That said, awesome talk!",1519318851.0
pstuart,Slides: http://slides.com/sdrasner/animating-vue-f17#/,1519335838.0
odinti,"Hehe, I remember seeing this same presentation at least twice on different dates, still great!",1519340616.0
jdizzle4,Sarah and all of her talks are awesome. Her passion for js animation is contagious,1519387389.0
Frontend-Developer,"Wow it me!! More talks of our conference coming soon at https://www.youtube.com/channel/UC1nBp6ouBB1o5P8YvPznPOw 

Questions? Drop us a message or reply. Peace out!",1519402521.0
0x4567,She has a great Vue course on Front End Masters. Her passion really shines through ,1519514561.0
cloudrkt,"Nice, i really like your style and pace. Keep it up!",1519330772.0
jaxn,Summary?  Is “deep cloning” keeping client-side data model copies of server-side data?,1519362275.0
DOG-ZILLA,Did you add lang=“stylus” to your style tag in the single file component? ,1519339825.0
jimmerioles,Also here's the [Repo](https://github.com/jimmerioles/progressive-weather-app). Please let me know your thoughts on it. Thanks!,1519301894.0
gevera,Thank you for this beautiful app. It inspires me and gives me an opportunity to look at my own project from a different perspective.,1519317303.0
MrMaverick82,"I love the design! Nice work!

One thing that would make it just a tiny title bit cleaner (in my opinion), is by adding a small border radius to the box when in desktop view.

    main {
        border-radius: 5px;
    }",1519307938.0
deityerpel,Looks great! Another nice to have would be to maintain if you've selected Fahrenheit or Celcius using localstorage so you don't always have to toggle. Nice work.,1519315139.0
Boo2z,"Why does it say ""Please connect to internet to fetch latest forecast :)"" ? ",1519322719.0
temeje,Awesome. I'm just about to embark on my first project with Vue and I'm building a simple weather app (site? I don't know what to call it) but for finding the best spot to view the northern lights in northern Norway. Your project is a super helpful reference. Thanks!,1519337800.0
Splendiferous_,"This isn't my work, it belongs to Chris Fritz, Vue core team member and curator of the Vue docs.",1519260375.0
duncanlock,That looks very interesting - going to check this out and have a poke around tomorrow.,1519285499.0
LittleAccountOfCalm,"Question for anyone who knows. 

I see that there is a prettierrc, does it work with templates? I didn't have any success with it in VS Code.",1519294174.0
chrisvfritz,"Btw, questions/comments/suggestions are all very welcome, either here or in an issue. 🙂",1519337427.0
seamouse3,"Just place the snackbar in your main screen and emit an event from the login page that triggers the snackbar.

Edit: you can also join vuetify's discord server, they're happy to help.",1519239673.0
josewhitetower,"Answering to myself after a few hours of pure headache.
Following this article https://alligator.io/vuejs/global-event-bus/ I was able to emit an event on any on my children components, and as payload I sent the message and the type of noticiation (succes, error, etc) Then listening to them on my App.vue main component. I placed there the snackbar and added the eventbus$on() in the mounted hook. Event bus was the answer to me in this case. I would love to read other solutions",1519245250.0
juanloco,"Somebody posted the video, but there's also a written version of the codingthesmartway tutorial which is great.

https://medium.com/codingthesmartway-com-blog/vue-js-2-firebase-e4b2479e35a8

One particular issue I had was initiating the app globally to use on lots of components since most tutorials only get you set-up with a main page. 

I found this post had a great solution to that problem. 

https://github.com/vuejs/vuefire/issues/21#issuecomment-251887922

Good luck!",1519239374.0
jinendu,"This one helped me: https://www.youtube.com/watch?v=we4zuQIXmnw

And that channel has other Vue videos that are helpful:
https://www.youtube.com/channel/UCLXQoK41TOcIsWtY-BgB_kQ",1519230320.0
eyeruleall,[This](https://www.youtube.com/playlist?list=PL55RiY5tL51qxUbODJG9cgrsVd7ZHbPrt) helped me out. ,1519230618.0
betterhelp,"Instead of `this.smoothScroll = new Smooth()` try `Vue.set(this, 'smoothScroll', new Smooth());`.",1519221034.0
juan8a,"I think the comparison between Vue and PHP doesn't hold.  PHP is a backend language and runs on the server which can also be the place where the dB also runs.  Vue runs entirely in the browser, and you won't be able to interact with a database unless you put a server (like PHP, Node, etc) in between the two.  The best option for connecting a dB directly to Vue would be something like Firebase (unless you're fine with setting up a server sitting in between).",1519212629.0
jillesme,Depends on how much you want to store but for real time data I use Firebase (super easy) and for persistent data I use Django + DRF. Some people really like Flask but I work with Django so know very well and it has been great for me! ,1519204228.0
JinSantosAndria,Just use php and mysql then? Why do you want to hold the database on the client side?,1519214733.0
imGnarly,Firebase or Mongo do the trick quite well.,1519204566.0
maboolio,"Move your var database declaration to the script tag in your Hello.vue.  Don't need the postsRef declaration as this will be handled by Vuefire.

&nbsp;

Then you need in your main.js:

    import Vuefire from 'vuefire'
    Vue.use(Vuefire)

&nbsp;

This will make it available globally so it can be used in your Hello.vue component.

&nbsp;

You don't need the Vuefire firebase object in your main.js, only in your Hello.vue, so move that over there under your Data object or somewhere in there.  You can take 'posts' out of your data object as this will be handled by Vuefire.

    export default {
      data () {
        something: ''
      },
      firebase: {
        posts: database.ref('posts')
      }
    }    

&nbsp;

Also in your v-for in Hello.vue you do not need to use ""this.posts"".  Just use ""post in posts"".
    
&nbsp;

Hope this helps!    

",1519194494.0
imadp,I wonder how much more success things like this would have if they linked to a demo rather than forcing someone to clone a git repo..,1519152246.0
zakali_co,"I've used Weex for one ""serious"" project and while it worked fine for us the main problem you'll encounter is the lack of (english) articles, stackoverflow questions, and example projects to get you rolling.




Once we got the project setup to our liking and got used to the small accommodations weex needs you to make (ie not all html5 element types are supported) its smooth sailing.




The [weex hackernews clone](https://github.com/weexteam/weex-hackernews) is worth checking out for reference.",1519151128.0
DOG-ZILLA,What about Vue NativeScript? Isn’t that gaining traction? ,1519166138.0
coolnat,"The react native community is much larger at this point, but I hope that Weex or something else using Vue takes off.",1519165531.0
naeramarth7,"`redirect` does not handle async calls at all, as far as i can see from the docs.

On the other hand you're not returing anything in the method, so you implicitly return `undefinied` while `redirect` extpects a string; that's why you also get an error with the sync function.

There seems to be a different approach handling promises: https://github.com/vuejs/vue-router/issues/1856",1519144698.0
notsogolden,"Also, does reddit have markup to better format the json in my post?",1519138487.0
irphunky,If each node was it's own component then you'll be able to access it's DOM element via `this.$el`.,1519136250.0
jineshshah36,"It seems premature given how much is missing to consider this 1.0. Last I checked, single file components weren’t even supported. 
",1519093811.0
Hadora,"I have to say i'd normally be very excited by this idea but it's hard to compete with React native + expo.io in this current state. Documentation is light, examples are few and shallow.   
The best example is using webpack on top of it... makes the whole thing so messy. You are so afraid to touch anything.  
Good luck to them to reduce the gap. I'll always have a eye on the project.   Ditching redux is a life-dream :-(
",1519141601.0
TydeusMideia,Have you looked at [vue-cli](https://github.com/vuejs/vue-cli)? It ships with some standard templates that you can adjust to suit your needs. I've adapted the standard template to use `jasmine` instead of `jest` and `testcafe` instead of `nightwatch`. Also I start all my projects with `vuetify` pre-installed for example.,1519045558.0
zenw0lf,"Using `vue-cli` you can choose from a set of prefefined project-templates:

Current available templates include:

* webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing & css extraction.
* webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.
* browserify - A full-featured Browserify + vueify setup with hot-reload, linting & unit testing.
* browserify-simple - A simple Browserify + vueify setup for quick prototyping.
* pwa - PWA template for vue-cli based on the webpack template
* simple - The simplest possible Vue setup in a single HTML file

As I do mostly web projects nowadays, I go with the `webpack` one, I accept all defaults except I go for Yarn instead of NPM when asked.

As for UI frameworks, I've tried Buefy and Vuetify, and I'm really enjoying Vuetify so far, widely recommended.",1519051468.0
smallpom,After trying a couple of frameworks I must say that vuetify is absolutely kickass. Got started in a o couple of mins and it works perfect!,1519226072.0
FilipKappa,"https://mdbootstrap.com/vue/
I don't have any links for a live preview but it's free so you can download and see for yourself. It's a pack of components, navbars, buttons, animations, cards etc. Quick to customize and easy to implement, and I really like the design, definitely improved my work.
I'm still waiting for some new stuff but it's constantly growing and updating so probably more components will be available in the future. And the team behind it (great job guys!) answers literally every question on the support forum. ",1519045421.0
Dasweb,Vuetify.,1519050661.0
aboustayyef,I always use Laravel even if I’m doing a Vue only SPA. You get scaffolding plus an api backend as a bonus.  ,1519047960.0
muimota_,"https://codesandbox.io/embed/qk5zn9y6wq?codemirror=1
",1519003099.0
imadp,"Just a quick comment, a lot of these problems go away if you use a secure cookie to pass the identity token rather than headers. In my main.js file, I make an axios call to the server before I start the Vue application - this way I know where to direct them to at startup.

I used this guide for the token stuff: https://stormpath.com/blog/token-auth-spa

",1518993534.0
imadp,"I've been working on a similar problem and separate repos is way better than a shared folder - especially if the front end is communicating over REST to the backend. In general those two applications are going to have separate lifecycles (I envision my front end being deployed far more than my back end). My backend is Java, so I don't even use the same IDE for my front end which makes the separation fairly obvious.

I do have my separate docker files bundled in with my projects however. This way I'll be able to build and push those containers out separately. Docker-compose doesn't belong in either, that file is really meant to sit on your server somewhere and act as the bridge between these two applications (and possibly others, like a load balancer or database). Hope that helps some!",1518993382.0
zimmund,"It all depends on where you are deploying it and how you will handle the instances on that end. I think you don't need to move docker files outside the repo, just figure a way to handle each part (client/server) independently.

If you are using docker hub (or even from Travis), you can call a webhook on your server after building -or doing any other thing you need-, perhaps [using this tool](https://github.com/adnanh/webhook), and executing a script that pulls/builds the new docker image and restarts it.

To avoid reinventing the wheel I recommend you a pencil and paper: lay out the steps and how they interact with each other (for both server and client), then solve them step by step.

Good luck! :)",1518967567.0
enchufadoo,"> Use Auth0 for the actual authentication backend. I use the social login, username / password login and their JWT service to authenticate the user to the Checkly API. Disclaimer: I have zero point zero affiliation with Auth0, but their service is top notch and very 💵 friendly to startups due to their very liberal free plan.

I had to go through the pain of setting up laravel + vue.js with jwt using [vue-auth](https://github.com/websanova/vue-auth) and [jwt-auth](https://github.com/tymondesigns/jwt-auth).

Its amazing that for something that is supposedly THE WAY of doing authentication this days, there are so many half baked libraries and examples. I honestly can't imagine how beginners deal with this stuff.",1518955946.0
thisisRio,Very Nice.,1518956624.0
jiffier,"In order to cincurvent the complexity on authentication on spa's, I wonder.. how about doing the login in a traditional server-side session authentication, and then, once in, actually run the spa?",1518977468.0
okawei,Way cool! I'm working on a Vue sass app too and am definitely going to be using s3-deploy and vee-validate.,1518963040.0
LynusBorg,"You are overthinking this I believe. 

wrapper.vm gives you the component instance, and since you usually call `this.yourComputedProperty` from inside the component instance, you can simply do `wrapper.vm.yourComputedProperty`",1518953352.0
konaraddio,I'm new to Vue but I think vm.$computed.functionName is what you're looking for.,1518937676.0
zenw0lf,"Hey, assuming you have something like this:

    <script>
    export default {
      name: 'MyComponent',
      computed: {
        algo () {
          return 'alg0!!!'
        }
      }
    }
    </script>

You can test for THAT computed property just calling it by name like this:

    expect(vm.algo)
      .toEqual('alg0!!!')

Or, if you want to go the $options route, you can also do it like this:

    expect(vm.$options.computed.algo())
      .toEqual('alg0!!!')

`vm` is defined like this:

    const Constructor = Vue.extend(MyComponent)
    const vm = new Constructor({}).$mount()

Computed properties, in the end, are just properties in your components, you should test for them just like you test any other non-computed ones.

Hope this helps!",1519052801.0
OmegaVesko,"/r/Frontend, /r/webdev, /r/javascript ",1518926991.0
spays_marine,"I think you're looking for something very straightforward but the way you worded it makes it almost undecipherable.

Do you want to use the ID in the URL to query data?",1518981278.0
josh1nator,"Create a new value, bind it to the button via :disabled and set the value to true in the @click-method. Then set the value to false once the user should be able to click the button again",1518897848.0
mfraser27,"What if the user gets deleted in the remote system? You won't know until the token expires which could allow someone to do damage in the meantime, say a fired employee.

Typically I'd send the token in the same request (in the header as bearer) and return not authed if the token is no longer good.  ",1518881244.0
nothingduploading,what is this do?,1518835028.0
MrMaverick82,Is it possible to create custom UI elements using  NativeScript? Because that’s the power of making native apps. How would you implement gesture recognizeres? ,1518855519.0
eloc49,You should do an example repo with Swift native modules. There's really only one for React Native and this would be a good way to cut into them. (I ditched RN because getting it to work with my existing Swift was a PITA) ,1518886620.0
Elementh,Thanks for writing down all the info!,1518819975.0
DOG-ZILLA,"Cool! Thanks. 

Would be great to know more about vue cli and SSR. I’m not keen on Nuxt really. I love the project setup from cli 3 and the way that works. ",1518836036.0
highway-to-helvetica,Was a good conference. ,1518858462.0
rubenduiveman,Had a great day. Like you said: quality of speakers & relevance of the subjects varied. Atmosphere was great.,1519112013.0
MaresDoOrgasm,"Looking for something like this?

https://nuxtjs.org/guide/vuex-store/#the-nuxtserverinit-action",1518817613.0
Splendiferous_,"Just a heads up that on the Vue Discord channel there was some criticism of the suggestions in this post, so perhaps take its suggestions with a pinch of salt.",1518871721.0
afkie,I talked with one of the organizers and they indeed plan on releasing these talks to YouTube. It just that external company is going to take care of it and it may take up to one month. But they will definitely be available.,1518866404.0
rubenduiveman,"Slides I've found:

* on unit testing: [link](http://slides.com/eddyerburgh/testing-vue-components#/)
* on codesandbox: [link](http://slides.com/ivesvanhoorne/vue-amsterdam#/)
* on scaling vue in an existing stack: [link](https://speakerdeck.com/codebryo/adding-vue-to-an-existing-stack-and-get-ready-to-scale#)
* on nativescript+vue: [link](http://slides.com/telerikdevrel/ns-vue)
* on graphql+apollo+vue: [link](http://slides.com/akryum/vue-amsterdam-2018#/)",1519116138.0
ActuallyDevil,"As far as I know only some slides. Look on twitter for   #vuejsamsterdam
Some of the speakers linked their slides ",1518797623.0
MrMaverick82,I didn’t see any continuously running cameras today. So I don’t think so ...,1518806566.0
josewhitetower,"There were online streaming tickets, maybe they release them later. It was a blast being there",1518816782.0
esaym,Just realized there are no videos online dang :(,1518846024.0
my_name_is_memorable,"how does nativescript compare to react native in terms of features/reliability/community?

",1518815125.0
josewhitetower,And I was there 😍,1518816592.0
imadp,Its not a great practice because presumably the components may have a different look and feel to your users and you have to load two sets of assets for one site.,1518787240.0
trustthemoose,"I think as long as you're being intentional about avoiding unnecessary bloat it shouldn't be too big of a deal.
Vuetify is great, and offers specific a la carte options for their components as well, which could help you minimize impact and still get what you need. ",1518787267.0
imapersonithink,WHY ARE YOU YELLING AT ME?!,1518785793.0
syropian,"Honestly, I love Vue, but I'd also like to stop seeing these silly comparison posts. They recycle the same points, and most look like they've been written by someone who's been using Vue for about a week. 

They're just borderline clickbait at this point.  ",1518789025.0
DOG-ZILLA,"Haven’t used either but I imagine the Vue version is component based so you can only use what you need. Further more, the JS stuff is probably wrapped in a Vue friendly API. 

There’s also Vuetify which seems quite popular. It’s based on Material Design. 

Good luck and welcome to Vue! ",1518770727.0
bark4mark,"You can add the bootstrap CSS and JavaScript to the main html then use the bootstrap in your components as they're available globally, they can be added using npm install --save then referencing straight from the dist folder under npm_modules.

If you use vue-bootstrap or some other plugin the bootstrap code will be minified with yours and it will be scoped for your components, so you won't pollute the page. ",1518775338.0
sleepymansalitre,Use Bulma ,1518780590.0
greatpier,"There's nothing wrong with using plain bootstrap 4 in Vue. You can include the css file on you page or incorporate bootstrap in your build process. Write html according to the bootstrap docs and insert vue directives where needed. Bootstrap JavaScript plugins might need some more work, but most of them can easily be replaces with Vue functionality.

I think the beauty of Vue is that you're not forced to use anything. You can start with vanilla Vue and only add extra plugins when they become necessary (or when you are ready for them).",1518777388.0
imadp,"The reason its frowned upon is that bootstrap relies on JQuery, and a vue app should not have a jquery dependency. If you are just using it for non javascript components, its fine and what I used for prototyping for a long time. But if you want any JS components, you should just install vue-bootstrap so your app is smaller and faster.",1518785768.0
DarkGhostHunter,"There are two options:
- using vue-bootstrap
- injecting Bootstrap JS, jQuery (lite hopefully), and Bootstrap yourself.

People doesn't approve jQuery + Vue for the simple reason that jQuery is not necessary and duplicates a lot of Vue functionality being less reactive, but jQuery CAN coexist with Vue.

That being said, unless you want to have fine grain of control using Bootstrap or you don't want to actually dive deep, vue-bootstrap is the preferred option.",1518786288.0
deverhart,Our team uses regular bootstrap 4 with vue sans jquery,1518839195.0
paladincubano,"Please check this fantastic link

https://github.com/gothinkster/realworld

Search for VueJs front end. ",1518744381.0
imadp,"In my experience, getting JWTs to work with vue doesn't have much to do with vue - really the only thing that vue has to do is make an api call and see if it gets a 403 response code back, in which case you should redirect to a login page.

I store JWTs in cookies, which means the client app doesn't know anything about them. I don't know ASP.net, but I imagine you would want to create a filter there that checks to see if your JWT is found in a cookie, and return a 403 if not. I learned the high level flow from this tutorial: https://stormpath.com/blog/token-auth-spa

",1518743927.0
smallpom,"I've had the same issue and ended up buying a tutorial on udemy.com just to get started. The basic idea is posting login+password to a API and getting a JWT-token in return. This token is then stored in localStorage. Then you connect your Vuex-store to be able to check status of the ID-token in your router(if thats what you want). So after putting the token in my localStorage I then check in a route with beforeEnter like ""this.$store.getters.isAuthenticated"". If this is false then I always redirect to /Login. ",1518772865.0
jaesung2061,"What is your reason for using Typescript? I understand your concern about strict typing ^^^.net... and highly complex apps but Vue at its core is inherently simple. It's so simple and straightforward that strict typing isn't really required, at least at the Javascript level.

At the component level (prop validation), Vue has its own type check system that is very robust and flexible.",1518727013.0
hi_ma_friendz,I’ve been using typescript as a beginner. Not really a pleasant experience so far. I’m seriously considering turning my project into raw JavaScript...,1518731922.0
Outpox,The latest Vue cli (beta 3.0.0) allows you to bootstrap a typescript app,1518805222.0
Noxwell,"I'm assuming you are going to start with microsoft templates for asp.net core..

here is an example...
http://www.dotnetcurry.com/aspnet/1383/modern-web-dev-aspnet-core-webpack-vuejs",1518727216.0
kefirchik,"The versions of those modules are not always the same. When vue-cli bootstraps a project, it goes and pulls the latest version of the project template, including any bug fixes, module updates, etc. So it's not in your best interest to achieve what you're describing.

Additionally, npm actually has many/most of those modules cached locally when you run the install. Much of the time it takes and network activity is to verify versioning, the dependency tree, etc. not to download modules. That said, it will copy everything out of the cache into your new project's folder, consuming additional space. ",1518707301.0
myusernameis___,"Might not be the best answer, but you could just store that node modules folder elsewhere, then copy it in the project when you create an app, it won't be up to date though so ymmv",1518705616.0
i_ate_god,symlink it?,1518716778.0
jaxn,"We are in the middle of the switch from JQuery/Bootstrap to Vue/Vuetify.

For me, it came down to completeness. Richer components for things like selects, tables, etc.
Vuetify (material design) is a more complete spec and is more opinionated. Bootstrap ends up with lots of add-ons.  Add-ons aren’t bad, except the one we choose for drop-downs isn’t the one that is used by the datatable add-on, so we end up with both (and UI inconsistency).

Not fact, just my perspective.",1518665615.0
SKozan,I am in a very similar situation and just recently did some research on both.  I am already familiar with the bootstrap syntax and I am not really sure what other benefit it would give my project so I decided to stick with bootstrap and pushed the 4.0 update.   Would love to hear if anyone more experienced has any thoughts on this.,1518664911.0
GarasiaKartik,I have not used bootstrap but i have some experience with vuetify and components are detaild with animations and reusability is a plus. ,1518681013.0
chrismcgrane,"I prefer to use vue and bootstrap separately, found it easier than using vuetify or others",1518713899.0
chrismcgrane,"I import Bootstrap 4, which provides component functionality, and then the css lib as a require. I’m happy to provide some examples. The benefit in my opinion is that there are different element classes that work better in different situations and these libraries generally go with the standard method. ",1518717156.0
jaesung2061,"As the other guy said, material is opinionated. But it's very complete and you need to do VERY little in terms of custom styling. But you end up with an app that's generally considered Googly (material design is used mainly by Google).

As for these specific UI frameworks, I've tried both. Bootstrap-vue isn't as intuitive as Vuetify. It seems like an amateur made it if I'll be honest. Vuetify is heads and shoulders above bootstrap-vue in terms of quality as well.

So my recommendation: If you need a custom style, go with bootstrap-vue. If you need quality and speedy development, go with Vuetify.",1518726501.0
JimDabell,"When you use `for item in items` to iterate over an object rather than an array, you iterate over the keys, not the values.  So in the loop, you're getting `'item1'`, not `{ link: '…' }`.  You can access the link with `links[link].link` instead (or there are nicer constructs depending upon what version of the language you are using, but that's the most browser compatible).",1518683410.0
,[deleted],1518663592.0
Ururu396,"Also, the title is supposed to be :src not :href :/",1518665685.0
josh1nator,Might be an issue with webpack and not vue itself.  Tried using an absolute path for the item1.link?,1518679073.0
BunsOfAluminum,"You should verify that the image exists at the path you're looking for it, relative to the js file being run (if you're using .vue files that get compiled by Webpack, you need to find the resulting js file, go up a directory and make sure assets/img/img1.png exists).

If you're using a build tool like webpack, you'll need to either make sure the assets are copied to the dist folder, or you'll have to require() the image file so that webpack knows that it's needed.

This would be why doing a simple version on CodePen might work whereas your built version might not.",1518890412.0
jp2y,"hi, have you solved the problem already? if not, try adding ./ at the beginning of items.link path. 

'./../assets/img/img1.png'",1519117332.0
sleepymansalitre,You need to 'require' it,1518716535.0
lucisferre,"Actually this is something I'm wondering might be worth discussing in the Vue forums, which is allowing lifecycle hooks to be async/return-a-promise and being able to await the promise if so. I'm sure there are pros and cons to allowing for this design though, but it is worth a discussion.

As for how to test it. It really depends on how you've set up your code. Can you substitute the async function being called with a spy or mock? If not then you should consider refactoring the component so that you can. 

Another way is to have your component expose the result of the async function (which would be a promise) in a way your test can access and have your test await it as well.

One thing that I often to suggest to people when creating any kind of code component or module is to provide affordances to make testing easier.",1518622319.0
flyingmeteor,This is something better done using plain JavaScript and not a rendering hook. Just store the promise somewhere or have the promise change a property on your component when it resolves/rejects.,1518626143.0
my_name_is_memorable,"I mark some of my mounted() methods as async in my project (class-based pattern using typescript + vue-class-component) and it works fine!

Just FYI ",1518944114.0
josh1nator,"I don't think it's a good idea to use Vuejs (or SPAs / JS Frameworks) for everything. Loading the whole framework just to display some generic landing page or data that's barely changing is in my opinion overkill and a waste of bandwidth.


[This](https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8) might help with the ""why SSR""-question. Its basically for better SEO and performance (like improving usability with slow networks because the client doesn't need to load the whole JS first before the user can see anything).

About tools, pretty much every necessary one is packed in the CLI (webpack, hot-reloading, vue-router, vuex, test-setups). I guess the rest depends on your websites goal.",1518591453.0
nmarshall23,"If the site has transitions and interactivity vue or nuxt could be useful. Having a framework has help me figure out how I wanted to build a a small site that is just for showing off REST API documentation. 

I haven't used SSR, only nuxtjs in SPA mode. ",1518586135.0
cyanydeez,try quasar framework,1518582339.0
yawboakye,"> If we are building a website (not webapp) where data might not change ever, is it a good idea to develop it using Vue.js? Might seem like overkill, but it could be a good exercise.. Should you do it in plan old bootstrap instead?

If all you're building is a website of static pages and you're not making any calls to load data from some remote store then I recommend that you ditch Vue (and all other frontend libraries and frameworks) and use plain HTML, CSS. Check out [Hugo](https://gohugo.io), it's a static site generator. What that means is that it's used for building HTML pages. There's others like Hugo but I've found it to be the most productive.

 > Why should I use SSR (Nuxt.js together with Vue.js) instead of doing everything on the client side? I found some good guides, I just dont understand why server-side rendering is a plus.

For a web application (at this time I think it's safe to assume that you have a web application in mind), SSR comes in handy when SEO and social media/network sharing is important to you. Otherwise don't worry your head. I haven't used Nuxt.js but I've heard good things about it and there's a $10 course on Udemy :)

> Are there any tools that you recommend that could go nicely with Vue.js?

Vue goes well with any backend that can send you JSON or whatever data exchange format you use. It doesn't have a favorite backend (even though you'll find other projects adopting it as their de facto frontend/UI library). Vue isn't developed with any particular backend framework in mind, and that's a good thing.

> Any pointers, tips or general advice is greatly appreciated.
https://chat.vuejs.org",1518615741.0
my_name_is_memorable,"IMO, if you’ve already used Vue (or any SPA framework) for a complex site, then there is no reason to not use it for a simple website unless you are worried about SEO issues. 

SPA’s version of helloworld is as simple as anything else. 

Now if you need to LEARN a framework to build a simple site, then of course it will take longer and is strictly speaking not the fastest way to your goal. ",1518944368.0
paladincubano,Nice!!!,1518582285.0
ProSamHDx,"So far, so good! Everything I'd expect from a music player is there. What would be nice is (if possible) perhaps curate a ""for you"" playlist on a weekly basis based on what a person's listened to. ",1518614009.0
mac_iver,Cool I like it! ,1518614411.0
jpolito,"Very cool. There's a small clipping issue with the right drawer, I think you need to add the `clipped-right` prop to the `v-toolbar` component. Is this an open source project and, if so, are you open to collaboration?",1518616615.0
mmusket,"I dont think there are tools that magically map DTOs between front end and back end. 

But what I usually do is install swashbuckle/swagger on my api  https://github.com/domaindrivendev/Swashbuckle and use that to get the json ""schema"" of my input/outputs. 
",1518561724.0
ozkarmg,"Just return the model as JsonResult from an action, should be automatically serialized.
",1518856144.0
rnenjoy,"Using vuetify now, and im very impressed! ",1518548960.0
zenw0lf,"The first time I bumped into Vuetify I was greatly surprised, what I found was a far more advanced, featureful and complete implementation of the Material Design Guidelines than Angular Material itself.",1518563302.0
jaesung2061,"I've never developed an app so fast in my life. This is the most intuitive, premium quality UI framework I've ever used.",1518577594.0
antyg,"Congrats on the release :) 

Been using it for months, fantastic tool.  I suggest anyone using it for a commercial project consider contributing to John Leider on Patreon - https://www.patreon.com/vuetify.

We're using it to build Gorilla Dash - https://gorilladash.com - and it is awesome with vue and Laravel",1518573988.0
imapersonithink,Yeehaw! Great framework and release frequency.,1518552728.0
bobbytuck,Need the create nuxt app updated with vuetify 1.0 and Vue 2.5+ -- and I'll be set.,1518564969.0
Elementh,Congratulations!!,1518615407.0
skernel,Great! Thanks for this post! ,1518541649.0
paladincubano,Best Vue framework out there!,1518549257.0
craftac,Love it,1518553115.0
Samifall,Amazing framework 🥇,1518555544.0
zetecvan,Started using it yesterday for the datatables. I've fallen in love with it already and will be Vuetifying what I've already done over the next few days. ,1518558536.0
smithunbound,"Could someone explain Vuetify in relation to say bootstrap-vue, is there an overlap?",1518582345.0
MrDrakefang,Nice,1518616247.0
chi11ax,"Congratulations! Definitely one of the best Material frameworks around. One thing I would ask though, is if we could have a nicer scrollbar for the slide out menu panel. 

Using the always visible browser scrollbar is an eyesore to an otherwise beautiful experience. :)",1518650365.0
destraht,Does anyone know if its possible to set a pixel width and height of a container?,1518652182.0
gmerideth,"Looks like your inline-example is missing a / on the close tag?

    <v-content>
        <v-container>Hello world</v-container>
    <v-content> * missing /?",1518700819.0
Lmcsheff81,"Great, but a shame css scoping not in there yet - really struggle integrating it into legacy apps",1518560364.0
,"Kinda cool, love it 😁, did you keep all those manga on the server or feed it using api?",1518519842.0
oddgoo,"Great idea!
Currently the filters don't seem to be working, and all the results return broken links.
Apart from that I would add some loading animations while waiting for the API to respond, but I like the style of it so far :)",1518523217.0
sheepc,"It looks nice, some visual cues here and there would help ux greatly since the api calls take a while and just seeing a blank page shows up makes me wonder if its broken or unimplemented yet",1518528630.0
bobnid,Comment deleted as on the wrong sub *dumbass of the day*,1518513569.0
wbsgrepit,"Modals are interrupters,   ignoring for a second the way to do this I am wondering what in the world would be the use case for doing this?

If it were me,  I would rethink the presentation and simply build a component that uses a timer to periodically update its data from an api.  In that way the data is shown up to date and also not as an interrupter. ",1518638519.0
DJLaMeche,"Basically, you can use `setTimeout` to peridically execute code. For example, setTimeout could fire an API call that fetches data and loads it into your state store, and sets a `showModal` field to true when it's done.

I don't know your use case, but maybe you should think about whether you really want to do this, though. Seems to be pretty disruptive to always open modals.

Another avenue to explore: you could also periodically push data from the server using websockets...",1518683219.0
my_name_is_memorable,"Here’s a little trick I use that I’m proud of. In my Vuex store I have a  reactive “now” variable that’s updated with the current time every second. 

Now, anywhere in my app where I need to use dynamic values or actions that depend on the current time (like countdown timers, etc), I use getters that reference the global vuex NOW. 

If those getters are active (component loaded), that code executes every second, otherwise they don’t. 

",1518944683.0
impreson,I am,1518510231.0
gafitescu,"Any other destinations in mind ?
Maybe Germany or Poland  , I would go .",1518511111.0
Xenik,I'll be there,1518542253.0
CristiJ,me too,1518563546.0
CrixuAMG,I’m there right now!,1518764377.0
ignisphaseone,"Look for examples using ""v-cloak"". It's a special directive(...?) or attribute that says ""don't render me until done."" The official docs should have more details.",1518462890.0
steeleb88,"I usually use an `isDataLoaded` boolean initially set to false in a vuex store. After the data loads, set it to true. Then use mapState in a component to pull in this value. Use `v-if=""isDataLoaded""` on any element displaying something from your loaded data. ",1518468706.0
bmarkovic,Have you tried building the app? This split second flash is often a consequence of webpack injecting things while the page loads. This could be indicative of some large code or content payloads that probably would be really problematic for your users when accessing your site online. You should analyze your app to try to defer loading the heavy payloads after the initial UI is displayed. ,1518463071.0
DOG-ZILLA,v-if ...?,1518463496.0
DOG-ZILLA,"Great article! Glad you’re enjoying Vue, it’s a pleasure to work with. 

Just one note: I quite like to use es2015 objects when importing components...e.g.

import MyButton from ‘@/components/MyButton’

export default {
  name: ‘Example’,
  components: {
    MyButton
  }
}

Then in the template:

<my-button />

(On mobile so hopefully formatting is okay). ",1518463394.0
boxidea,"If you update your main.js file to do this: 
    
    new Vue({ router, store, render: (h) => h(App) }).$mount('#app')

instead of this:

    new Vue({
      el: '#app',
      router,
      store,
      template: '<App/>',
      components: { App }
    })

You can switch to using the runtime build of Vue. The runtime build is 30% smaller and will run a bit faster since it doesn't need to parse template strings at runtime.

https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only

",1518437181.0
Peng_Fei,"When choosing the next song, you must click pause and then the play button again in order for it to work. ",1518410504.0
nimonian,"The pagination. When I switch to the next batch, it should bring my view back to the top of the list. I'm in the odd situation of scrolling up and then down gain to see the next lot. 

Looks cool though! And I had never heard of the genre name before, but I recognised the type of music by the description. ",1518456691.0
,[deleted],1518417751.0
evilmaus,"If you're talking about going to a new page entirely, what's wrong with `setTimeout(function () { window.location = 'foo'; }, 60000);`?",1518394694.0
evilmaus,"Just make a computed property that takes the underlying list from your data and returns it sorted. Lodash is handy for this with `_.sortBy(list, 'score');`",1518389284.0
dennythecoder,"With the arrow function and generation of another function, the Vue app/component is not given an opportunity to inject itself.  You could assign the function in the created handler as a workaround.  Folks around here may be more creative.",1518383879.0
gallowdp,What's the difference between this and the already established Buefy?,1518399971.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Charcoal - Vue.js & Bulma Starter Kit](https://www.reddit.com/r/javascript/comments/7wvi4t/charcoal_vuejs_bulma_starter_kit/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1518382666.0
ichbin1berliner,"Looks promising! I like it very much, thanks.",1518444401.0
DJLaMeche,"Looks cool, but a documentation website would be great. [This](https://github.com/setholito/charcoal/wiki/Components) tells me what components exist, and I'll probably get it to work using the Bulma documentation, but that's not very practical... IMO.",1518682657.0
ameo02,"I'm confused, since someone compared buetify and charcoal..
Is this something that could be used over CDN?
If yes, could you make it available through **unpkg**?",1519746543.0
FoodIsFor,Seems abandoned already.,1525059372.0
dranzerfu,Can you add support for parcel?,1525318604.0
setholito,"Hey y'all - Quick update,  v0.0.4 has just been pushed. Check it out: [https://github.com/setholito/charcoal](https://github.com/setholito/charcoal)",1531692445.0
htr_xorth,"Well if you like Destiny, you may know of DestinyTracker and the Tracker Network. We use vuejs on our stats pages.   We're not a spa yet, and Destiny Tracker was our first time building any major component in Vuejs.  We love it. We're working on a spa now.",1518363343.0
miralize,That site looks like  its  using Knockout?,1518364348.0
HelloControl_,"Bungie.net dev here - we do use Vue.js sparingly for certain things! Most of our site is not client-rendered though. We also do have Knockout, but are moving away from it gradually.",1518483389.0
smithunbound,GitLab uses Vue,1518583713.0
thiswasprobablyatust,"IMO your solution breaks one of the key benefits of Vuex — simplicity.

That simplicity does come with some rather minor boilerplate, but this is _nothing_ compared to some other state management tools.

I completely support something like this being introduced in a plugin or extension, but this absolutely shouldn't be a core concern of Vuex.",1518339009.0
marinespl,"> I'm starting to lose track of how many birds I'm killing with a single stone here, so I'll leave it at this for now. Whatchathink?

None. Doing it your way would be so painful.",1518343462.0
binary_builder,"I got around this by using lodash's get and set APIs in the mutators and exposing actions that allow you to specify a path.

This solves your problem but I still feel dirty about it.",1518337702.0
Maklite,"You could use `Object.assign` to assign the property you want.

    state = {
      foo: 23,
      bar: 43
    }
    mutations = {
      setProp (state, prop) {
        Object.assign(state, prop)
      }
    }
    
    commit('setProp', { foo: 98 })

Not saying it's necessarily a good idea, just that you _could_ do it that way.",1518358225.0
DOG-ZILLA,"But what are you really solving with this when it’s far easier just to type a few more characters? 

To me the benefits aren’t going to be great enough to warrant the inevitable increase on file size in order to have this feature. 

You could do a single line es2015 thing like:

setWhy (state, v) => (state.v = v)

If your components are using these mutations in lots of places and you suddenly want to change the way it calculates, well you’re kinda stuck now. You’d have to go and replace all of these explicit method names. 
",1518346664.0
syropian,"I get that it can be a bit painful when you’re committing a mutation that is relatively simple (appends an item to a list or something) but I’d much rather have the separation of actions and mutations when both my action and my mutation are relatively complex. I don’t really mind the small bit of boilerplate, because I prefer clarity over brevity in this case. ",1518356879.0
Tomseph,"Use an event or an event bus system; If you share props amongst children, the children should not edit the props directly. Instead they pass a message up to the parent to do the editing for them. In this way you take advantage of the props, and each sibling is updated automatically.

https://vuejs.org/v2/guide/components.html#Composing-Components
https://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communication",1518267810.0
DOG-ZILLA,"Use Vuex!

A child will update the store and that in turn will re render the children. ",1518270668.0
_eazy__,"There is a **$grid-columns** variable set to 12 in /src/stylus/settings/_variables.styl
I haven't tried it yet but it should work.",1518185917.0
,"I'm sure you have your reasons, but just in case you were unaware, 12 is a really useful number for grids because it's easily divided into halves, thirds and quarters (it's the last [superior highly composite number](https://en.wikipedia.org/wiki/Superior_highly_composite_number) before 60). 16 can't be divided into thirds, and [thirds are particularly important in design and composition](https://en.wikipedia.org/wiki/Rule_of_thirds).",1518216342.0
Modestyiswimpy,Why?,1518185895.0
garfonzo,"They have a Discord channel that is very active, and the devs are on there pretty much daily. If you ask in there you'll likely get an answer very quickly. 

https://discordapp.com/invite/s93b7Fv",1518211304.0
llexan,"Awesome, thanks for sharing!",1518201520.0
danstansrevolution,"I missed this one, is it possible someone is able to share it with me via PM? If this is not allowed, let me know. ",1518222927.0
bernardomeyer,vue,1527808557.0
amokie,Is your phone in a private tab?,1518113468.0
Kritical02,Are you running localhost or off of file perhaps? I know I've had issues with local storage in iOS and Chrome because of origin requests.,1518114252.0
ckdownset13,"Super long shot, but could narrow it down to a device issue.  Since Safari mobile and Chrome mobile both fail, do you have token logic somehow relying on the display port?  Do those calls fail on your desktop when using debug to simulate mobile?  Something crazy worth checking, I suppose.",1518132130.0
bahaki,"Maybe try running a tcpdump on the api server to see what it's receiving? Can't remember the command to get the headers, but it isn't too hard to find. Quick and dirty way would just to return the invalid token through in the 401 message to see what it says.

Edit: or look at your Django logs in general if you haven't already to see if they're complaining about anything.",1518125468.0
Kritical02,"I was mulling this over in my head most of the day. Could it be a race condition issue? You mention it only gets sent sometimes. I'm wondering if by the time you are verifying that it's there it is but when you send it back to your endpoint it's not.

Just an idea I hope you solve it I know how frustrating some 9f these issues can be but a race condition issue could explain why it is failing on your phone which is probably slower than your laptop. Or the jsengine on iOS doesn't handle whatever async ops you could be using.

Once again just spitballing. Let me know if you ever figure it out!",1518169403.0
Mekhami,"I thought it was ""Divs Against Humanity"" and thought that was more clever than Devs. =P",1518104047.0
irphunky,"You could just do `@click=""item.status = 'active'""` if that's all you was doing to the item.

You could also set the property directly within your `update` method, yo dont need to use `this.$set` here for it to remain reactive.

Take a look at [Change-Detection-Caveats](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) for more detail around when to use `this.$set`
",1518081555.0
mcjimmedy,Thanks! I was looking for a solution to this last week but gave up. ,1518072407.0
ExcoJosh,"Did you consider using refs btw? 

$(<SELECTOR>)[0].dispatchEvent(new Event(""click"")); is really gnarly.",1518096271.0
mcdronkz,"Quite the opposite. There's even (official?) integration:

https://github.com/vuejs/vue-rx",1518042607.0
Rockroxx,"I think their reasoning is for the following:
First lets assume form-component and input-component come from a third party package and you have an component called form-box then the code would look like this

    <form-component  api=""api/user/update""  @aftersubmit=""doSomething()"">
        <form-box>
            <input-component  name=""firstName""></input-component>
            <input-component  name=""lastName""></input-component>
        </form-box>
    </form-component>

So now form-component.$children contains form-box which probably doesn't have the same methods & values as input-component. This however could be prevented by following the guidelines in the vuejs documentation.",1518043440.0
cyanydeez,use v-on with children,1518065373.0
JarrettV,This looks great,1518405000.0
MrDrakefang,"Some how I successfully published it on npm(This was my first time publishing to npm:D)
it has nothing yet (not even read.me doc) Just started what so ever cuz I need one badly...",1518020835.0
josh1nator,"Not sure if I understood your issue, but I think you want a list on the left side and on click display the data in another component, right?

Here is a [Pastebin](https://pastebin.com/k75cxY4G) since I really dislike the reddit-code highlighting.


Just changed a few lines. It ""should"" now pass the current selected object from your clients array down to the component and the component will display it.
Not sure if thats what you need.

for more: https://vuejs.org/v2/guide/components.html#Props ;)",1518027276.0
proskoo,"Great article! It's always interesting to see the ""struggle"" that creators go through when creating something that they think will work. Vue didn't start as a big company project. It started with one man with the passion to do it :)",1517995046.0
the_ju66ernaut,So glad to see Vue finally getting a more mainstream following in the JS community. I think it deserves all the praise its getting. ,1518034714.0
nwsm,">His career up until now is inspiring for every developer out there

haha honestly I got more disheartened than inspired. With no CS degree he created one of the current top 3 js frameworks. He is a very special person, not your average developer who has just had a successful career.",1518045598.0
paul_h,I was a little surprised that I didn't read anything about Angular1 escapees arriving in Vue-land in early 2015.,1518063109.0
bathyscaaf,"Are you using VueRouter?

From my project: the following router-link passes product name to next page, as well as it's UUID.
Next page: ""id"" is used to to look up product in the database as well as display in the address bar, and productName is used to display in address bar and breadcrumbs (with spaces turned to dashes via ""spaceDasher"" mixin).  All params are accessible on the next page via $route.params

<router-link :to=""{ name: 'productDetail', params: { id: props.row.lineItemID, productName: spaceDasher(props.row.productName) }}"">",1518392801.0
Murilirum,Hm. I wasn’t planning on falling in love this evening. ,1517982067.0
Djbm,Cool - I'll take a look. I currently use SVGs extensively in a Vue project and have been looking for a cleaner way to load them.,1517983287.0
imGnarly,"This is a simple brilliant idea, this is the stuff good code is made of.",1517996202.0
jordanaustino,"Hmmm, it seems clean, but I'd be concerned about having my vue components end up build tool dependent. Makes every component you build with an SVG non reusable outside of webpack with this installed.",1518023231.0
delkia,Can you pass parameters to the svg ? I want to change some colors and objects size into the drawing.,1518382304.0
ckdownset13,"If you buy into Vuetify:
https://vuetifyjs.com/components/snackbars

Alternatively, you can just snag the component and modify to use as your own (if you need more features and don't want to implement Vuetify).",1517971896.0
r4ymonf,"    if (process.env.NODE_ENV == 'development')
    {
        Vue.component( ... );
    }

Try that?",1517974533.0
ThatDanishDude,"You could attach a listener to the actual image elements' load event like so: `<img @load=""onLoad"">`",1517957418.0
jemminger,You can use remote debugging in Safari to see if there are errors in the console,1517967387.0
yetinthedark,"I can only think of a couple of things to check first: 
 - Are the environments different between your desktop and iPhone? Or are both dev? Wondering if there’s a dependency or config entry missing? 
 - On your desktop, have you cleared any local storage or cache files that could be making it work, where on your iPhone you could be missing?",1517964398.0
Mojitane,Never got into aws yet. Thank you for sharing!,1517925789.0
highway-to-helvetica,Looks like a harder version of express-vue,1517876568.0
ll_cool_james,How would this compare to something like nuxt.js? Seems quite similar..,1517901092.0
nedpals,"how is this better compared to, lets say,  vue ssr or nuxt?",1518272756.0
StrangeSound,`v-model` is (should be!) tied to either a data or prop value. Setting that value should update whatever your v-model is being used on.,1517897453.0
elijahww,"this jsfiddle demonstrates my question. There are 2 instances of 'test' component, one mounted traditionally and one as if it was in a unit test, with new(), $mount(). I can pass in the model via :value, but it's 1-way.. I can listen to $on('input') events, but it's not the same 2-way data flow as in the first example.

[fiddle](https://jsfiddle.net/elijahww/smgjLcqp/1/)",1517930905.0
cjthomp,"e.g. ""_Final_ Fantasy 15""

They can't all be ""The Ultimate""",1517860236.0
ckdownset13,"Try simplifying things a bit by just passing the selected item as a prop:

Data:

    data () {
      return {
        items: json,
        selectedItem: {}
      }
    }

Items Loop:

    <tr v-for=""(item, index) in items"" @click=""showModal(item)"">

Modal with prop:

    <employee-edit-modal :item=""selectedItem""></employee-edit-modal>

Show Modal method:

    showModal (item) {
      this.selectedItem = item
      this.$modal.show('employee-edit-modal')
    }

Modal prop:

    props: ['item']

Modal template:

    <modal name=""employee-edit-modal"">
      {{ item.FullName }}
      <employee-edit-form />
    </modal>

   ",1517868659.0
angusmcflurry,It's just a bunch of js - there's no rule that says how you have to use it.  I have a custom app that is huge but only uses vue in a few areas where I need the functionality it provides.,1517838981.0
vuestrik,"I would definitely go the full SPA route and use asp.net mvc only for the API if you have that option. Of course, you can you use Vue just for a small part of the app but the full SPA approach is IMHO much cleaner and cohesive. Using Vue just for minor client side enhancements usually makes sense for old legacy applications where the entire architecture is built on Razor/JQuery and where you don't want to introduce yet another paradigm and additional build step. Regarding the additional ajax calls and performance overhead - it will be the other way around since you will be serving all the SPA assets just as static files and basically the ajax calls will do the same amount of work as if you would do the rendering in the server.",1517865614.0
CardboardJ,"I feel like this is the best way to start using vue.  Personally I started it on an MVC5 project where I initially used it on a mildly complex sign up form.  It replaced a nest of nasty jquery, and as a bonus the before and after convinced the other 6 devs on the project to start using it.  Second up was to inject it into a lot of the forms (sign up, change password, view billing), and we're starting to take a product catalog section that used to be 3 pages (landing, category, product) and making a micro spa for just that page on the site.

Vue feels very unlike Angular where it feels punishing if you're not all in.  Go for something small to start, build confidence.  Once you have a page all neat and tidy, build a router for it and the pages near by.  Once you have that look into getting vuex involved for passing state around (or don't!).",1518227305.0
codus_maximus,"Its kind of a nonsensical question -- you can only really use vue when you need to use vue. You attach it to a specific div (usually) that needs vue functionality. It doesnt do anything outside of that scope.

Its a surgeons scalpel. Its not a 'framework' like angular where you have to be all-in.

",1517848021.0
mitchill,"I actually just got this working in VSCode last week! I set babel's source map's as ""inline,"" then ran the jest command using `node --inspect`. How are you running the tests?",1517798727.0
eyeruleall,"    function checkAuth(to, from, next) {
      if (store.getters.user) {
        next()
      } else {
        next('/login' + '?next=' + to.fullPath)
      }
    }    

Then in the route, add ""beforeEnter: checkAuth""  ",1517771384.0
DOG-ZILLA,Maybe in the mounted () method of App.vue??,1517741250.0
ianwalter,Call the auth logic in main.js and just dont wait for the promise to resolve before bootstrapping the app.,1517757662.0
namanyayg,"So what I do in my apps is to have 2 types of route guards,

1. `next()` if client side JWT exists
2. `next()` after server authentication.

If you want to run code only once, add a 'flag' to your store that checks `isCheckedOnce`. Inside the guard, look for the flag, and don't run the code code if `isCheckedOnce` is true.",1517764930.0
zebbadee,beforeRouteEnter(...) Hook on your root instance? Will only load once,1517923582.0
irphunky,"Place it i its own .scss file and @import it into every component that requires it.

You can also extend the loader to auto import files if every component needs them, can be good for variables, mixins and functions.",1517740268.0
mitchill,"That looks like it may be cleaner as a component, <inputs-group />, with the style in that component applied to its children. I say that because SASS re-use in the way you're looking for relies on globally accessible files / mixins that aren't explicitly defined as dependencies. A lot of SASS set ups I've seen like that are a un-refactorable house of cards due to these globals.",1517797504.0
zeroskillz,Very cool indeed. This could be very useful. I was receiving some console errors though and often had to refresh devtools in order to get it to work.,1517763717.0
rick_and_mortvs,This looks really interesting! ,1517736088.0
rashaza,"Very cool, thanks for this! Going to be really handy!",1517940736.0
Maklite,"You can pass them as props.

https://router.vuejs.org/en/essentials/passing-props.html",1517695437.0
mitchill,"The lighthearted way I mean this isn't going to come across in this message, but promise it's there. It is going to take you longer to find a component to do that and customize it yourself than to just do it from scratch. The Vue example is about 80 lines of code.",1517798597.0
Zar0s,"Element UI has one. Maybe you can reuse some of their code?
http://element.eleme.io/#/en-US/component/tree",1518011567.0
hypercluster,"Found it more reliable that Weex for example. Actually quite pleasant! You should check out the slack channel, the project is getting updated constantly and will soon reach 1.0",1517702618.0
mitchill,"They're all pretty much the same, to actually progress in your career: master vanilla Javascript and software engineering (design patterns, pragmatic programming, testing strategies) over specific frameworks. If you just focus on what framework people are hiring fr, you'll peak really early.",1517679285.0
richardzcode,"Vuejs is a new comer compare to the other two. Popularity wise still behind Reactjs but is fastest growing one. Vuejs has best community where React community is more like leader-follower type. I think that is one of reason so many programmer love Vuejs.

From looking for job perspective if you learn these two I think you are golden. And then Angular just in case.

These three are different. They will both stay for a long time in my opinion.

2cents",1517678218.0
Cardiff_Electric,"Did you ever find a good solution to this? I have pretty much the exact same question and background.
",1528834269.0
richardzcode,"If you just want a wrapper of console.log, check this one: https://github.com/richardzcode/fsts-js

It’s tiny. I wrote this for my own use. You could just copy paste the logger source code into your project if don’t like the whole library.",1517676782.0
jingle66,"You might also wanna check quokka.js
It evaluates code as you type in real time, and prints logs and errors inside your code.  Pretty amazing and also very helpful if you're new to javascript.

https://youtu.be/gTRatID3kdM

Ps: it's not targeted specifically to vue, but acts more as a playground to test coding ideas and concepts",1517687804.0
PSVapour,"Off topic:

Does anyone else have an issue with scrolling sideways on mobile? (github)

**Device information**  
    
    Device: OnePlus5    
    Model: OnePlus ONEPLUS A5000    
    Android: 8.0.0",1517695106.0
hi_ma_friendz,Thanks!,1517667698.0
N3KIO,"That was actually helpful, thanks",1517677423.0
monch,I learned so much from this one post!  Thank you!,1517695735.0
duplex_penetratio,"Thought they removed the filter functionality^^ thanks for this, still learned some new things!",1517698975.0
LittleAccountOfCalm,"Depends on how often do you need this information.

If for example you need to display some dropdown options like categories, tags, etc, it's nice to store them in the store. There's no point making extra calls for the same static information. And if any of them gets updated, simply update the state too.

On the other hand, if you're fetching a great amount of data, which only make sense for a specific view, then it's no use to keep them in store. 

You don't have to put everything in your state, be it Vuex, Redux or whatever.

",1517665688.0
richardzcode,"If you need to read/write same data in different places then use vuex. It is a way to decouple code logics.

If all you doing is read then consume then forget about it, then there is no need.

It is actually pretty easy. I would use it in my first couple of projects just for the purpose of learning ",1517677390.0
mitchill,"If you have data that needs to be used in two different places, you definitely want to invest the time (20-30 minutes?) in setting it up.",1517679461.0
jingle66,"I use vuex as a local database that persists in local storage. All components
listen to vuex as one single source of truth and get automatically updated (reactivity) whenever a vuex state changes.
GUI components(.vue) have eg. buttons linked to vuex actions to manipulate data. So for instance there's always one createCompany action in vuex that's reusable in any component. The vuex action createCompany, communicates with the app/db server, updates vuex companyState, then all GUI components linked to vuex companyState, see company data change automatically, etc etc.",1517691952.0
uvimateapp,Thanks for the great post! Your QAs have been added to the **https://www.fullstack.cafe** portal and back-linked!,1530104823.0
ForSpareParts,"In 2.x, the cli generated a project with a complete project configuration for you. In 3.x, the base project configuration lives *inside* the cli itself, and you override only what you wish to change. It's similar to the design of Facebook's `create-react-app` build tool.

The idea is to make it easier to upgrade projects when changes in vue-cli come along. Right now, if a vue-cli template is updated, you'd have to regenerate your project to see any benefits -- say, from updated packages or new features added to the webpack config. Under 3.x, you'd only have to update vue-cli, and your project would immediately begin using the new settings/dependencies.",1517604348.0
blackmorrow,You can also see some of the intended changes in the [Kickoff Issue](https://github.com/vuejs/vue-cli/issues/589). Out of the box typescript setup is also one of the things they're adding.,1517629821.0
maurop123,"Recently made this post all about the new vue-cli 3. Hope it helps.
https://medium.com/vuetify/how-vue-cli-3-will-shape-our-future-eb7c01f4a241",1523460796.0
dfcook,"Javascript Jabber just had an interview with John Papa where he discussed this very process.

There's a blog post about it here:

https://johnpapa.net/vue-typescript/

I did something similar to this about a year ago and I found that it's certainly not as simple as just asking the typescript compiler to build your files, not if you want type checking of props, vuex mappings etc. You have to use the annotations from vue-class-component, vue-property-decorator and use a class based approach to components.

I felt like I ended up with a structure that was not very idiomatic (John Papa says in his interview that the resulting code ended up looking very similar to Angular) and ended up staying with ES6 and an object literal component declaration.",1517605108.0
ForSpareParts,"We just added a TypeScript compiler to our webpack template and started writing new files as `.ts` files and it was pretty seamless. To use it in a `.vue` component file you just need `lang=""ts""` in the script tag.",1517602515.0
hypernautical,"A lot of the tutorials/blogs on the subject deal with the class-based approach to making TS vue components. Since Vue 2.5, however, Vue includes typings which also allow a more Vue-friendly approach by setting script lang to TS and enclosing your component in Vue.extend(). Apparently typings for props still require some overhead with this.

Of all the resources and starters I browsed, I found [Toilal's CLI template](https://github.com/Toilal/vue-webpack-template) to be the best for this the non-class post-Vue 2.5 approach to TS.",1517633298.0
DOG-ZILLA,"Like the first poster says, use Array.slice()

Create a computed property so you can get this into your template. E.g.

computed: {
  top3 () {
    return this.myArray.slice(0, 3)
  }
}

Then in your templates just use ‘top3’ in your v-for. ",1517582498.0
cars10k,"This has nothing to do with vuejs. Simply shorten your array:

    let array = [1,2,3,4,5,6]
    array.slice(0, 3)

Returns

    [1, 2, 3]",1517579802.0
acklavidian,"You could do: 

    <movieBox v-for=""n in Array.from({...upcomingMovies, length: 3})""> {{ n }} </movieBox>",1517609846.0
jemminger,Scrolls way too fast on my trackpad IMO,1517593756.0
ForSpareParts,"So, I'm sure this is a good implementation OP, but I gotta ask: what are you using it for? Off the top of my head, I can't think of any website that used a virtual scrollbar where it was an improvement over the native one.",1517610299.0
Lelectrolux,"If you are using buefy, look into programmatic modals. When using buefy, I almost never use b-modal directly, always the programatic approach.

You will have to edit your AddSite component a bit, as you wont have to deal with b-modal yourself. Just call `this.$parent.close()` in the given modal body component if you want to close it yourself.

As you've given us a code example only dealing with the modal interactions, I can't give you a meaningfull code conversion to programmatic approach, it would end up empty.",1517541876.0
hambalamba,"Are you trying to get the radio name and value of your input and put it in an object? Why dont you use an event listener and pass the event to a function.

Then you can get the name and value using the event and make the object you require. 

Did I misunderstand your problem?",1517539974.0
ours,"When you say they each have their own Vuex store do you mean they each have their own instance of Vuex?

If so I wouldn't recommend that and you should instead have one Vuex *module* per component with a single Vuex instance.

This allows you to cleanly have each component's data defined in separate files but if a component needs to interact with another's actions/mutations/states it will be able to do so.

That said it is not mandatory to use Vuex to communicate between these components as you can use props and events instead.

But in any case have a single Vuex instance is better than multiple ones except for perhaps some extreme case.",1517516068.0
,"Nah, Vue components manage their own state inside `data` and `computed`. The Vuex store is supposed to be a ""single source of truth"" that each component can access, having multiple stores defeats the purpose.

If I could make a suggestion, when you're learning stuff like this it's useful to start with just the bare minimum set up and only add things in as you need them. If you try building your app without Vuex using just props and events it'll quickly become clear what you need to use Vuex for.",1517533649.0
birdspider,"I'm not sure what exaclty is crashing or why you'll need $refs (i'm a vuejs beginner) but putting `<special-card>` in the main component and using `created` instead of `mounted` + assigning the data instead of creating the `SpecialCard` component by hand - worked for me:

https://codesandbox.io/s/l43xzrp047",1517508669.0
zimmund,"  * You'll most probably need to process images server-side and serve JPG/webp previews. Even if you could find/use a javascript decoder for a particular format, I strongly advice against that, it's a waste of resources and a lot of complexity for development (specially if you are just starting the project).
  * You may display html/pdf files ""inline"" using an iframe (though that may have its caveats as well, read about frame hijacking, for example).
  * Word files is a similar case to images, you'd be better of serving a server-side created PDF version or just an image preview. 

I suggest you to start analyzing this from the opposite side (how to implement the server): Focus on what you want to deliver (as product), give it a good thought and implement it. Then come back to the frontend and implement something very simple with what you already know, for example just showing a list of links to the files. You can start making it more rich and complex from there. 

Focus on your MVP first! It doesn't matter if you code it using Vue, React or whatever else you pick. Worrying about this devious details will waste you a lot of time and energy and you'll end up frustrated even before you started! :)

Good luck with your project!",1517452749.0
coolnat,"This is totally sidestepping your question, but why not just use ownCloud?",1517471622.0
acklavidian,"I'm not too big on style conventions for vue (...yet. I'll see how my team abuses that). [The official docs](https://vuejs.org/v2/style-guide/#Component-style-scoping-essential) mention BEM, but just as an example. I just try to focus on having small components. This way no matter what strategy you uses its easier to manage because its mostly constrained to that one file.

edit: formatting",1517412079.0
imapersonithink,"I don't know the major differences between these CSS architectures. Although, I believe that it would depend on how you structure your Vue templates. Because you can scope local styles, the way you deal with CSS in Vue changes.",1517458031.0
ckdownset13,"I don't think Vue necessarily dictates one convention better than the other.  However, it certainly pushes CSS separation of concerns via scoped styles within components.

You should ALWAYS scope CSS within Vue components unless it's within the root application component.",1517507316.0
recrof,just a reminder: mongodb is not relational database and should be rarely used for building traditional website backends. trend of building websites with mongodb is in decline.,1517407823.0
xaksis,Sounds good to me. Vue has been my goto framework these days even for smaller apps. You can get started quickly and learning curve is pretty small. It also is a good idea to start with a solid base for your project even though right now it might be simple as it facilitates for future scale. Good luck. ,1517405452.0
africajam,"Hi there, I created an open source real estate website builder which you can use:

https://github.com/etewiah/property_web_builder

The backend is written in emberjs but this week and next week I will be rewriting it as a vuejs app.

In time I would like to use vuejs for the main frontend too.  ",1517826205.0
SKozan,"I just started an asp.Net core project with vuejs and was pretty easy to get up and rolling. Vuejs has been pretty great to learn so far, I came from angular ( was still learning) and it just seems so much easier and quicker to get things up and running. Angular was def overkill for my project I feel, but vuejs seems lightweight enough with the potential of scaling and adding anything you could require.

This is what I started with:

https://github.com/MarkPieszak/aspnetcore-Vue-starter

Then you can Sql server. ",1517503951.0
nwsm,"I wouldn’t say it’s overkill at all. As you add features / pages and expand the site you’ll be glad you used *any* framework. 

You may have heard Vue be called a “progressive framework”. Basically this means it is in theory a good choice for any size app: the small idea you think you have now, or the large app that it turns into. 

Good luck!",1517507801.0
siamthailand,"Look up theredpin.com . Made in VueJS. They were first ReactJS, then VueJS, ran into bunch of issues with both, and then re-architected it with VueJS.",1517675743.0
ingrown_hair,"Concur. I bought this course last year and I go back to it when I need a tight introduction to a new part if Vue.
",1517398101.0
dougieled,"I use npm. So creating the components within a separate project and publishing that too npm. 

Then install that package to your 3 projects. Meaning you can update the components in one place and republishing again to npm. 

From them all you have to do is get the latest version of the package on your other 3 projects",1517392068.0
CristiJ,"You have several options:

 - npm with https://github.com/vue-land/create-vue-component This is a template to easily publish to npm vue stuff

 - github repo and install with npm from it",1517405102.0
LynusBorg,"It's hard to tell from the short snippets you posted. And since you didn't get code formatting correctly (every line has to be indented by at least 4 spaces) makes it hard to read. 

But this usually happens when you use an arrow function insets dog a normal one as a method ( which is mentioned in the docs and you don't seem to do it anyway. 

There's not other caveats that come to mind.

Can you share some more code?",1517357708.0
jimithatsme,"Might be a path reference somewhere in vue-router or app.js that is not referencing the files correctly when on the production server.

Ex “/home” vs “home” vs “../home”

Compare the browser URLs of Dev vs Prod.  And are there any console errors?",1517339566.0
semicolon_hunter,"So I had the same issue when I recently deployed my Vue app to heroku using express server.  Basically a hard refresh or a reroute gets confused for a new url. 

I added connect-history-api-fallback middleware to my server.js file and it took care of the issue.  
https://github.com/bripkens/connect-history-api-fallback 

Hopefully that takes care of the issue for you as well. 
",1517362420.0
Zar0s,"If you followed [this](https://medium.com/netscape/deploying-a-vue-js-2-x-app-to-heroku-in-5-steps-tutorial-a69845ace489) article, make sure your dist folder is in git and that you have  run `yarn run build`.

When this is done, push your dist folder to git and run `git push heroku master`.",1517482046.0
ignisphaseone,"How familiar are you with asynchronous programming? I think maybe your wrong assumptions are about how actions and mutations map to state (I myself am still a little confused).

AFAIK, ""mutations"" are the synchronous thing you want to do. Set all your values, change state based on whichever mutation happens first. ""Actions"" are an asynchronous call to trigger that mutation, complete with a callback.

I think VueX idea of ""actions"" is that it supposedly implements the JavaScript ES6 Promises asynchonous API, which very cleanly fits with Vue's core philosophies of ""use what tools you want, Vue will play nice"".

Another way to think about it is to break this down into three ways VueX reacts if you try to do something.
1. If you try to modify the store.state directly, VueX warns you not to do that, and says 'commit a mutation instead.'
2. If you call a mutation directly, your client will hang if your mutation takes a while.
3. If you call an action that chains to a mutation, you can set up asynchronous Promises to handle actions after client processing is done.

Hope this helped!",1517337002.0
eindbaas,"I would not immediately put everything in the store(s), it will make things needslessly complicated and harder to get an overview. Some data just belongs to a component and it may be clearer to have the logic there as well. If more components need that data you can still opt for passing props to children (and emitting events to the parent), that wat you still end up with selfcontaining components that dont need to rely on stores. Not that i am against stores, i love vuex. But i mostly use it for application-wide data.

Regarding actions/mutations: i personally use mutations for just simple state mutations (mostly my mutations change 1 state), and actions when multiple things (mutations) have to be done (and async stuff obviously)",1517351615.0
wishinghand,There's not enough detail in your post to answer the question well.,1517333592.0
nickbreaton,"Do you need any native feature such as access to contacts, Bluetooth, etc. Or is high performance a concern? Probably go with RN. 

Otherwise I'd go with a PWA. 

You can also package your PWA with Cordova/Phonegap that way you are on the app stores. This is especially relevant on iOS considering service worker is not yet supported in the browser for offline use. ",1517336372.0
roblauer,With Vue? [NativeScript](https://nativescript-vue.org/#/),1517319120.0
Pedrock10,AngularJS is not the same as Angular.,1517306767.0
JinSantosAndria,"The same way you add any other meta header or content block for each page? Just look at the code, it's right there how that is handled.",1517297640.0
pd-andy,"    export default {
      data () {
        return {
          structuredData: { ""@context"": ""http://schema.org/"" ... }
        }
      }
      
      head () {
        return {
          script: [
            { type: 'application/ld+json', src: JSON.stringify(this.structuredData) }
          ]
        }
      }
    }",1517301391.0
Magick93,Have a look at https://github.com/davidroyer/nuxt-api-example,1517279401.0
poldixd,"Here is my solution:

    <script>
        export default {
            data() {
                return {
                    structuredData: {
                        ""@context"": ""http://schema.org"",
                        ""@type"": ""Hotel"",
                        // more ...
                    }
                }
            },
            head () {
                return {
                    __dangerouslyDisableSanitizers: ['script'],
                    script: [{
                        innerHTML: JSON.stringify(this.structuredData),
                        type: 'application/ld+json'
                    }]
                }
            }
        }
    </script>",1518265270.0
maks25,I use Django+DRF,1517275340.0
endjynn,"How about NodeJS + JavaScript or NodeJS + TypeScript?  
That way you can code your front end and back end in the same language and share code between the two.",1517266726.0
xModulus,I use Laravel for all my backend needs.,1517271763.0
PacNinja,"Parse offers a [JS SDK](http://parseplatform.org/Parse-SDK-JS/api/v1.11.0/) btw.    
I personally use Go + its [http package](https://godoc.org/net/http) but my recommendation would be [Flask](http://flask.pocoo.org/) since it is easy to pick up.
",1517398440.0
8wardialer5,"I used http://quasar-framework.org/, it's a boilerplate built on top of vuejs webpack template ready to build cordova mobile apps and/or electron apps.

Take a look",1517258049.0
Kazanian,"It's absolutely doable to use the webpack starter with cordova. Initialize a cordova app after creating the starter and symlink the dist directory as ""www"" in cordova root. vue-cordova as a Plugin also works like a charm. It's just important to use the 'hash' mode for routes. History mode doesn't work.

I've build an android hybrid app with vuetify this way.",1517346190.0
seamouse3,"Bit late to the party, but Vuetify also have a [cordova template](https://github.com/vuetifyjs/cordova).",1519239965.0
boldlygoingnowhere,"I was looking into this yesterday and found this guide which you might have already seen: 

https://blog.pusher.com/how-to-build-an-android-app-using-cordova-and-vue-js/

There's a link to a github repo at the end of the article. You can create a vue-cli project as normal and then just swap out the project in the repo with your project to build with cordova. Should work with out too much tweaking.
",1517258010.0
Kazanian,"Actions support asynchronous operations. Mutations don't. Source of the data has nothing to do with its purpose.

I've seen separating the APIs from vuex and then call them inside of actions as a common practice.",1517252889.0
endjynn,"This is speculation...  
It's common to want to perform async actions that mutate the store. The question becomes, where should this functionality live?  
* Dumb components  
Bad idea, they should just be responsible for presentation.  
* Smart components/resolver components  
You could place your async logic here but then you're tightly coupling your resolver to your async actions. What if you need to call your async action from elsewhere (a different component)?  
* Singleton service  
But now you have to inject your store into your service and then inject your service wherever you need to call your async actions  
* Vuex store as actions  
Now all of your async logic is globally available as actions that can be used by any component. You could also separate this logic into a singleton service that's injected into your store.  
  
So my guess, it's for convenience - but it doesn't mean that you have to use it.   
Anecdotally I've found them very useful for defining async actions that mutate my store that need to be available to multiple components.",1517253270.0
ianwalter,Maybe you just need to think of Vuex as a state manager and not simply as a store.,1517977183.0
gomespereira,"I really would like to see what more experienced people have to say about this, as I am not experienced, but since I'm studying Vue and its libraries I'll try to share something.

Actions are used to commit mutations, to change the state.

Retrieving through REST is not the only use case. You can for example use it to dispatch a Sign In method that authenticates the user passing its data as payload, and then push him to another route.

Indeed for me it's way more complex, but it's also more controlable and predictable.",1517254103.0
mobiledevguy5554,"I was kind of thinking the same thing,  I do my Async calls (pretty much axios calls) from my views and the commit the data to the vuex store using synchronous commits.  I suppose I could have tried making them actions but them I’m still resolving them in the view to handle errors and perform route actions.  It jut felt weird putting them in the store.",1517277398.0
BoleroDan,"If you absolutely must use `extends` could you not use array notation instead of dot notation?

`child['extends']`",1517233618.0
Emptyless,You can use the lazy modifier:  https://vuejs.org/v2/guide/forms.html#lazy or use something like denounce: https://www.npmjs.com/package/v-debounce. ,1517218953.0
LynusBorg,"Do you want to debounce a custom directive, or one of Vue's? That's not quite clear to me. 

For the scenario you describe, you would usually use something like lodash's debounce() on the method that your `v-on:input` directive is calling.",1517224531.0
irphunky,"I don't believe this should be the inputs responsibility, what happens if the data is invalid? What happens with multiple updates to different inputs at the same time?!

This should be placed in a store, then you can watch it for changes and react when it changes.",1517224935.0
maneKozaroo,"I'm not completely certain, but I think the i18n tag has to contain valid JSON so something like

    {
        ""en"": {
             ""hello"": ""hello world!""
        }
    }

might clear up the issue.




I think there's a way to tell your editor that the tag should be JSON and validate it that way, but you can also use something like https://jsonlint.com/",1517213804.0
dick_ey,"The best I’ve been able to do is use Prettier in combination with eslint and eslint-plugin-html, eslint-plugin-vue. You can configure Prettier to format on save although I haven’t yet found a way to keep some of the indentations of multiple attributes the way that the official style guide recommends.  ",1517200531.0
Playaction,"I'm relatively new to vue as well, but here is my advice. Try to avoid nested arrays, as that's a little tricky to use. If you reference project.todo.description, you have to check if project and todo exist. I have spent way too much time debugging things like that.

Start as simple as you can, with as little nesting as possible. And either reference by id or just include the project details you need in every todo object. ",1517176607.0
irphunky,"Have the indexes of the todos grouped, this will allow you to have them in multiple groups if required - but also means you only have to follow one set of changes for the todo data.",1517181273.0
nothingduploading,"not to belittle your question, but who cares if the parent re-renders?",1517168078.0
Groady,Do you get the same problem is you specify the child components using `template` not `render`?,1517189013.0
endjynn,"I'm not sure what you mean by component-less, can you give more detail?  
Vuex solves a specific problem which is:  
If you have a single piece of state that can be modified by multiple asynchronous actions then it can be difficult to keep track of when changes to that piece of state occur. Vuex solves this by providing a single source of truth (a single place for state) and a method to track whenever changes to that state occur (and what those changes are).",1517085850.0
LynusBorg,"Well, not all components will be reusable, but many will be. 

The usual pattern is that each ""block"" of your YO (say, a user form) that depends on the same / similar data is wrapped in a ""smart"" component, which manages the store updates. All the other nested components don't directly use the store, they get their data from the smart one as props. These components *can* be reused.",1517124185.0
DukeBerith,"I actually code the following way :

None of the components I build except the main `App.vue` has access to the store. The App file exists to compose all he components and logic to respond to all changes. 

Everything else emits events or has its data injected. With this being the case, the components are reusable because they never rely on `this.$store` for anything, ever.",1517094963.0
thecementmixer,"Curious if you found a solution. I have been thinking of using Nuxt and sockets for a project, would love to see an example.  ",1517293950.0
argueta10,"Hi, I developed a project using Nuxt.js, vuetify and vue-socket.io but it has some bugs. Here is the link if you want to take a look and I will be grateful if you help me to fix it.
https://github.com/argueta15/nuxtandsocketio.git",1520377139.0
,[deleted],1517025281.0
N3KIO,"For the low low price of $124.99
",1517010122.0
irphunky,"Please tell me you've seen [chess.com](https://docs.google.com/forms/d/e/1FAIpQLScYnlScFAAIge9erzdYqmVwY-e0TMIykJ9g989WQ3wlryfFPA/viewform?c=0&w=1&usp=send_form) advert for a frontend dev with vue experience.

I'm sure they would love to see this ;) if not and you apply can I get that referral :D",1517132820.0
mshthn,"Wow, really nice!",1517087256.0
vuestrik,"I do both the asp.net and Vue but I have used Vue only with the full SPA approach so take my advice with a grain of salt. Technically you should be fine with having just one entry point. You don't need to do anything special - just normally bootstrap the router.  If you choose this approach then I recommend to use the lazy loading / code splitting otherwise you will be randomly loading the full bundle when navigating through the app. On the asp.net side you will need just one action/view to serve all the SPA urls. You might need to setup the mvc routing and route all the ""non razor"" urls to that SPA entry point razor view. I'm not saying that this is the best approach though...",1517008539.0
bjornkrols,"You don't need Vuex but I would recommend it since you most likely want to access cognito-related state / actions all over your application.

I wrote a module for Vuex to easily link your application to an Amazon Cognito User Pool: https://github.com/Botre/amazon-cognito-vuex-module",1517042424.0
y0ji,I see and hear a lot of praise about Nuxt. Is it worth using if I am not interested in server-side-rendering or pre-rendering though?,1517045904.0
TwoTapes,There is probably some misconfiguration in your settings. Can you get your blog to serve at /blog without nuxt running? How are you serving your nuxt site? Can you post your nginx config for both sites? ,1516945332.0
ewliang,SOLUTION I figured out how to fix it. Used a regular nGinx container (instead of jwilder's). Used 192.168.99.100 as the proxy pass path with respective exposed ports. Removed for /blog (which is the main reason why the framework kept overriding my /blog request). Everything worked perfectly - almost. Just have to figure out how to not expose the two ports to the outside world and only in localhost level... hmmm. and LetsEncrypt into a nginx container.... hmmm,1517068517.0
unrealz19,"ag-grid has a vue component. It’s a full featured data grid. Infinite scroll, infinite columns too, it only loads what’s visible.  Very configurable.

https://www.ag-grid.com/best-vuejs-data-grid/
",1516944812.0
Balduracuir,Not sure if it would meet your requirements but https://github.com/Akryum/vue-virtual-scroller should be good,1516956547.0
datagy,How about vue-infinite-scroll https://stackoverflow.com/q/43198442/1845302,1517051635.0
sicjoshsic,"You've got multiple, possibly unrelated, issues here.


HMR is Hot Module Reload - so that message means HMR isn't working properly, almost certainly a config issue.


Events - could be a compatibility issue, are you getting any errors?


CSS - either your rule isn't quite right (do Dev tools in browser show the style is applied?) or webpack loader isn't configured right


The only way to help more is to see code, do you have a repo?",1516952241.0
dranzerfu,"I am not sure if this is the right place to ask. But I have had really weird errors trying to use Parcel with Vue -- some really non-deterministic errors. I just got started with Vue.js and didn't want to deal with webpack.

In Chrome, it'd be:
`Uncaught TypeError: exists is not a function`
and a few others.

In Safari it varied between:  

    [Error] TypeError: Error.captureStackTrace is not a function. (In 'Error.captureStackTrace(dummy)', 'Error.captureStackTrace' is undefined)'
    [Error] TypeError: undefined is not a function (near '...require(""vueify/lib/insert-css"").insert...')
    [Error] TypeError: _vue2.default.use is not a function. (In '_vue2.default.use(_vuePhotonkit2.default)', '_vue2.default.use' is undefined)
    [Error] [Vue warn]: Unknown custom element: <ph-pane> - did you register the component correctly? For recursive components, make sure to provide the ""name"" option.  

^ This last one was when ph-pane *was* in fact registered.

    [Error] TypeError: hotAPI.install is not a function. (In 'hotAPI.install(require(""vue""), true)', 'hotAPI.install' is undefined)`

It mostly happens when I have multiple .vue files in sub folders. Weird part was, I could get it to work if I commented out the sub-components (import line and the ""tag"" in the template) from my main ""App.vue"" file, have that compile properly and then add them back in one at a time. Then everything works!

Things break again as soon as I add a new dependency using yarn or created a new vue file and added it to the app.

These issues went away once I switched to webpack. Any idea what could be going on?",1517079513.0
elmo61,Do you mean like a lightbox type component?,1517270418.0
evilmaus,The value of `getFromStorage.type` is being used as the method name.,1516901149.0
tiagojpdias,http://es6-features.org/ have fun,1516962500.0
kaelwd,It's an ES2015 feature called [computed property names.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names),1516945824.0
kaelwd,"> update the template to use Vuetify components, which are **Bootstrap 4 based**

you wot m8",1516943711.0
dcschmid,"In which formats will it be available?
",1516876970.0
dennythecoder,Who published it?,1516934933.0
wbsgrepit,"Just some feedback,  I understand you are self publishing and you have made this book and that is awesome.   You may want to spend a little bit of time to refine your styling (especially the code fragments using a fixed width serif font etc)  and look for interested users that can give you feedback/proofing on the content.  Doing a quick glance at the first few chapters in is pretty clear there was no proofing on the book.",1516982956.0
ejiqpep,I created a website for the book with PDF and EPUB versions as promised. Feel free to try them! Here is a website link: https://masteringvuejs.com,1517822836.0
flyingmeteor,I put business logic in a separate file. Component methods should contain interaction between your view and business logic,1517034092.0
Lanseuo,I am currently creating a [reddit clone](https://github.com/Lanseuo/revue) to learn Vue.js too. I used [this tutorial](https://youtube.com/watch?v=Fa4cRMaTDUI) to follow along. Have a look at [awesome-vue](https://github.com/vuejs/awesome-vue/blob/master/README.md) too.,1516861193.0
TalesM,"For what I've seen, it just allow you to start coding faster, skipping the usual boilerplate you'd have to write normally. You also get a setup more similar to what other users have, but for me it is more like a bonus.",1516822089.0
Kindrik76,Rapid development.,1516840437.0
myloman16,"Things I really like about it:

- Almost zero config for me to do
- Kind of standardising workflow and build process
- Kind of standardising folder structure etc

To be honest I don't see any reason why you shouldn't use it. You can extend it or remove things you don't need but in the end it just works so well out the box. ",1516881656.0
CunningFatalist,"Personally, I hate setting up boilerplate over and over again. I also dislike creating testing environments and optimizing build scripts. Therefore, if I can fork a nice starter or use a CLI I definitely will.",1516880407.0
hip_modernism,"Wow everyone of these features is more excellent than the last, great news.",1516853097.0
sir_eeps,"It's rare that I've actually used devtools outside of redux dev tools, but been finding the Vue ones super handy. Been a great experience so far.",1516861658.0
paladincubano,Awesome! Thanks. ,1516845159.0
TheOffTopicBuffalo,Anyone else have an intermittent issue with the tools freezing when mounted dockside to chrome?,1516848155.0
DOG-ZILLA,Any errors in your console?,1516788173.0
aesamattki,Parcel can't do Vue already?,1516795515.0
CristiJ,Very cool to see you can now develop and build Vue with one command no config. Super cool for prototyping,1516905311.0
ffffrozen,Looks good! Does your stuff work with containers that have variable width or height? Your demos are based on containers with fixed witdth and height.,1516793095.0
fyzbo,"What's wrong with just letting the browser handle it?  Less code, users will be familiar with it, less potential for issues.",1516808223.0
torville,"As with many things, there is a sweet spot between 'fuck it, we'll do it live' and complete OCD tyranny.  Start with the smallest bits of discrete useful functionality and assemble them like legos.  It the design isn't what you want, you can re-assemble them differently.",1516795755.0
jingle66,"Thinking upfront about your GUI components (navigation, crud, lists, tabs, views) and how they should function together,  saves you tons of time.  Although its impossible to predict everything, a GUI is relatively simple to mock (and change), and serves as a good blue print for building the underlying code ",1516780301.0
nmarshall23,"It depends on how large of a project this is. If it's 4 pages, do it as you go.

If you have never built anything this large it's likely you will make decisions that you will want to change later. So don't sweat it too much. Having a blueprint of how things should work that you have talked with your friend about is a great idea.

I generally build prototypes of a few pages, to figure how they will work. Then demo those to the stakeholders, and get feedback. Make sure I have identified components that I want to reuse, then revise the larger blueprint. 

My initial plan is never as complete as what I learn doing the prototype, demo, feedback cycle.",1517022497.0
Mekhami,Rarely even possible much less important. ,1516768044.0
nmarshall23,"Kinda of hard to help without knowing what the error out is..

Is it [npm install fails with ""ENOENT: no such file or directory""](https://github.com/npm/npm/issues/17444#issuecomment-359165588)? This is a very puzzling bug with npm. 

Or this could be an eslint problem. Use `// eslint-disable-line` to disable eslint checking for a line.

Maybe your `main.styl` has bad formatting, or a linter that thinks it does. I have not used that before so I have no idea what errors are common with styl files.

Post the error log to pastebin, and give a link so more people can diagnose the issue. ",1516750448.0
acklavidian,Looks like materialize expects to be global  so where ever you include it it will effect all elements. You could import it in to each component with a scoped style but your generated markup would be huge because you would have a copy of materialize for every import. You could try this with their sass file and depending on how it's made you might avoid the duplication. You could over ride elements materialize css with desired css. My recommendation would be to use vue-material or vuetify. These are material ui libs for Vue.,1516724199.0
jpolito,I absolutely agree with /u/acklavidian . Trying to custom roll your own solutions when there are highly supported and feature rich libraries already out there is probably a waste of time. I'm personally a big fan of [Vuetify](https://vuetifyjs.com).,1516726572.0
cptGoNow,"Congratulations. It looks great. The color scheme is a little hard to read. I see you can customize that, so other probably made it look bad.

Your copyright date is 2017. :)

Good job!",1516753338.0
ladybro,"You should be proud, this is great for your first SPA! ",1516816947.0
thick_sauce,Any chance we can peek at your source code ? :D id love to see how you built this !,1516856478.0
kaelwd,We've also just launched a new store with some cool stuff already up for grabs: https://next.vuetifyjs.com/store,1516721533.0
wangyi7099,It's very good! I'm using it in my project now !!!,1516764375.0
Sphism,"I really like it, thanks for all the hard work",1516780644.0
doubleagent700,"I love this, except for the design.

Google Material design looks tremendously awful and has had 0 to little success in the real world, even the apps within their Play Store have hardly adopted it.

Given, this is only my opinion, but do you plan on architecturing a ""stylesheet builder"" where the components can just load their custom styles?

I know we can just simply go ahead and change it our own, but it'd be way nicer for an import to happen.",1516736201.0
bdeo,We also have an official sub now! /r/vuetifyjs ,1520433881.0
,[deleted],1516675532.0
Hadora,"If you want file uploader, you can go on awesome-vue and get one that fit your project.  
https://github.com/typicode/awesome-vue  

 If you want to process excel with js, there is no vuejs library per se. Only pure js library,  
https://github.com/SheetJS/js-xlsx  

i personnaly parse cvs with paparse  
http://papaparse.com/  
",1516700008.0
KillTheBronies,http://lmgtfy.com/?q=Sublime+Text+3+eslint,1516714705.0
bahmutov,Not vue-test-utils but maybe you can get more from your testing time using [Cypress](https://www.cypress.io/) for end-to-end testing https://vuejsdevelopers.com/2018/01/29/vue-js-e2e-test-hacker-news/ or for component testing https://github.com/bahmutov/cypress-vue-unit-test?,1517239582.0
irphunky,"1. Take a look at [this gist](https://gist.github.com/Phunky/a98cab87f4c873bc30c7d026db507384) for an example of how I wrap my own APIs. 

2. I then store auth in vuex and use vuex-persistedstate for handling page refreshes. I also then check the JWT expiry on load to ensure we log people out when they've expired.",1516639752.0
nikaone,"It only contains 3 components: alert, notify, modal. The source is very simple, can be a reference for anyone that have not code these things.  ",1516631299.0
gingernaut3636,"Hey everyone! I wanted to share the boilerplate application I've been building for a while, it's the result of a few evolutions of my personal boilerplate. Open to suggestions and feedback, pull requests are welcome and appreciated!",1516630833.0
kamante,Looks nice and well structured! Will definitely check it out later,1516631299.0
cris9696,"Hey, nice work! And thanks for [linking to my project](https://github.com/crisbal/vue-webpack-ssr-fully-featured) in the credits. I think you even proposed a PR on it.

Looks very good and more focused than mine, we should maybe join up forces and try to put out the best possible project, who knows maybe it gets accepted as an official boilerplate. 

I like you got auth to work without vue-auth since I had many problems with it, especially with server side rendering.

One thing I was hoping to do was to create a template for vue-cli with various selectable features to be enabled and disabled, this should speed up the process for creating the app even more.",1516688867.0
imposter_oak,"This is part 3 of my series on building out a mobile-friendly webapp using Vue, Flask, and Socket.io for real-time communication. Parts 1 and 2 are linked in the post, and touch on the overall architecture overview as well as integrating websockets into a Flask app. This segment covers creating a new Vue app with vue-cli and integrating Vuex.

Feel free to leave comments, criticism, etc here or on the medium post! Part 4 will cover the final piece of the puzzle, integrating Websockets into Vue.",1516629179.0
thelonecabbage,what is taonpm?,1516641507.0
Dasweb,"Unless I'm oversimplifying this, this doesn't sound like it would be hard to do with vue. Using a v model to carry you through the form process, and even possibly introducing Vuex if you're having multi-page forms.",1517088306.0
xaksis,"Also, looks like you are looping one too many times. It should be

(i=0; i < response.data.things.length; i++) ",1516596221.0
xaksis,Can you paste what your json file contains? ,1516596025.0
carrot_gg,"Your loop is wrong. it  should be:

 for (let i = 0; i <= response.data.things.length - 1; i++)
",1516596953.0
xaksis,"Here's a quick rundown 

dispatch the vuex action from your component

In the vuex action, send the put request to your server

In the success handler of your put request, commit the mutation. (push the new task on to your state todos) 

From the vuex action, you should return a promise back to the component

In the catch block of this promise show error notification.

",1516595250.0
ForSpareParts,"This depends on exactly when/how often you expect todos to change without the user's input, and isn't especially specific to Vuex.

If a list has only one user and your users don't generally log in from two places at once, you might not need to check the full after creating a todo. If lists are shared between users and accessed from many different devices simultaneously, you might have to sync very aggressively -- continuously polling for changes or even setting a websocket connection so the server can push data right when the change happens.",1516601614.0
slyfoxy12,My assumption is because you're trying to set the data of an instance of a component from outside Vue instance. Instead you'd need to have a prop passed to the instance which can be updated... In theory. I don't know why you'd want to do what you're doing. It i can't see it having any benefits over an ajax call?,1516579842.0
oldskool73,"Hard to tell exactly without a fiddle etc, but I think the reason you're not seeing any updates, is 
a) because your 'model' is just a plain object, it's not Vue reactive. and/or...
b) because your component's `data` is read from the window property just once on creation, if you used `computed` instead it'd probably update.

take a look at ... https://jsfiddle.net/1ne0hLh9/3/

* your 'model' doesn't need to start with 'empty' data, the data is there on the window from laravel when the app starts (side note... this would be the main advantage over an ajax call, no waiting for the data to load, it's there from the start)
* the above example a basic/dirty way to do this, accessing another Vue instances `$data` feels nasty, I'd probably look at a event bus type setup or vuex",1516587946.0
,"Read this for a better understanding of how reactivity works 
https://vuejs.org/v2/guide/reactivity.html

And don’t use what you’re doing, use Ajax and Vuex.",1516608633.0
fzy_,The official documentation has a chapter about transitioning state https://vuejs.org/v2/guide/transitioning-state.html.,1516572821.0
TwoTapes,"You can use an iterator to iterate over a sequence of characters given a start character, an end character, and a length of characters to emit total.

I wrote a brief example showing how to get the numbers. I'll leave it up to you to integrate it into your component state. Let me know if you have any questions.

https://jsfiddle.net/L6o2y7mf/",1516573723.0
zakali_co,You could make the component accept a styles object as a prop (with sensible defaults.),1516509465.0
eclev91,"Could configure styles for it with modifier classes via props rather than raw styles via a prop:

`.component.component--type-1 {`

and

`.component.component--type-2 {`

",1516514066.0
BithTree,"Slots, especially named ones, are also worth looking up. I just used them today for getting ugly boilerplate stuff out of a component to great effect.",1516518593.0
,Very cool! Good work.,1516516056.0
AbboudAfaneh,"Amazing, really.
Can you tell me a brief (when you are free) about serverless backend? and how is that with AWS?",1516542634.0
YayRomina,"Cool work OP! Seems like people are getting hung up on the serverless label, but what you’ve described is what the term means haha. I’ve been meaning to move my API to a serverless architecture, excited to check yours out! Thank you for sharing with us ",1516561233.0
defunctAI,Good. But can't sign up,1516518075.0
Setheck,"I was recently doing some research on aws lambda and other serverless services and I know lambda gives you the first 1m compute requests free every month. But a chat app on lambda can't be cheap since every message will incur compute costs. Have you done any cost analysis? I'm wondering how much per user the lambda costs are. Would you be willing to give those numbers out? Can just be ballpark, it's just for my curiosity and plans to use lambda in the future. 
Thanks!",1516555589.0
cseibert531,This is great.  Thanks for the hard work.  I wasn’t aware of using IoT for web sockets; very cool.  I need to spend a week just learning about everything AWS can provide.,1516569178.0
valnub,"This video will teach how to build a chat app in 20 minutes using Vue, Framework7 and PubNub https://www.youtube.com/watch?v=LzSAUngoKRw",1520518057.0
Miles360x,How is your vue/frontend section deployed? I see you're using Serverless and it's deploying to Lambda/API/etc. How about the frontend? Your example makes it seem separate ,1531541946.0
SupremeSpez,I don't think it counts as serverless just because you're using AWS as your server,1516492935.0
Modestyiswimpy,"Promises are supported by Edge
https://caniuse.com/#feat=promises",1516458907.0
luke3br,"So, I'm a bit confused. I just read that Chrome is the same way. Only Firefox supports promises!?! I think it's just the browser APIs that don't support them. 

If I was at my computer I'd try writing a promise that just logs something or uses the callback from within .then to test. I could be wrong, the docs are worded oddly.",1516466127.0
g0liadkin,"I usually create a `_base.scss` partial file, and import it in the `App.vue` style.

For other things, like variables or mixins, I also create a partial for each: `_variables.scss` and `_mixins.scss`, and import them in any component needed.",1516423717.0
doesntevenmattertome,"You could make a tooltip component and write the scss there. If there isn't html to go along with it, import the scss into components that you need it it or put in a global.scss file.",1516408349.0
nmarshall23,"This sounds like a complete component, you can have components that are just scss and markup.
If this is a mixin, then add a global mixin file that you import.

Just remember you shouldn't import any scss that will generate css into multiple components. That will lead to that css being imported multiple times. 
",1516410251.0
voi26,Besides avoiding errors all together... Editor is VScode.,1516384069.0
eloc49,If you are hosting your Vue app on S3 I *highly* recommend using Nuxt.js. You can export your whole app to a static site and it automatically takes care of the history api and routing setup for you. Each file in the directory `/pages/` is a route and back and forth works. On static export each file in `/pages/` gets its own directory and `index.html` so deep links work as well. Also your whole app's script is deferred so your site loads faster.,1516396399.0
neon_slippers,"Have you checked out [Quasar](http://quasar-framework.org)? It provides a bunch of components for mobile apps, and it comes with an easy way of integrating your app with Cordova. I'm really liking it so far, but I haven't tried the Cordova integration yet.",1516334847.0
jingle66,"Quasar is very good. Also Vuetify is a great framework focussed on material design.
Both work fluidly with cordova. ",1516366174.0
pod_of_dolphins,I find [framework7](http://framework7.io) to provide a smoother mobile experience than quasar. ,1516408714.0
aesamattki,NativeScript,1516363838.0
josh1nator,"I think the important point is that state management is not vue specific.

https://blog.angular-university.io/angular-ngrx-store-and-effects-crash-course/
Is a great read for that, not particularly the stuff about angular but on facebooks ""unread bug"".

It's basically an issue that's caused by having many components that rely on data from other components. You'll end up losing the control about your data flow and tracking down bugs due to data flow becomes a pain.

That's why we have redux for react, it's basically taking the data from the components and is storing them centralised. 
The vue counterpart to redux would be vuex, that's what you should look for. And there are plenty of resources for vuex and how to use it.

TL;DR: I'd assume a car auction website would have some kind of login, so you'll probably have to control the state of some components based on whether the user is logged in or not. Instead of managing the states of those components by passing down the data from component to component (or even mutating them at some point) you're storing them in a centralised store.",1516358706.0
Dasweb,Anyone use the md-bootstrap for vue yet? Just curious how it is.,1516372650.0
nannooo,"Not using one with Vue right now, but I use https://getcockpit.com. Love it.",1516313120.0
ianwalter,My team has used Contentful on a project. It seems pretty good but I haven’t had to actually use/configure it.,1516335090.0
rabagaz,How about strapi? https://medium.com/@strapi/building-a-static-blog-using-gatsby-and-strapi-8b5acfc82ad8,1516531450.0
rabagaz,Check out https://www.sanity.io,1516346125.0
DerJuggernawt,Jumping on board as I'd like to know this as well. ,1516310825.0
odinti,"I only got experience with GraphCMS

It's been good working with it,I got a couple of details I'd like to remark, like the TTFB last time I checked it took ~300ms to complete the request, I realized this quickly beacuse I was using nuxt and loading one page was making 5 request one after the other instead of parallel so It was taking more than a second to load the page, now that I make all of them parallel I still feel it not so snappy because of the base latency",1516320083.0
odinti,"Something you would like to take a look would be nuepress, which is wordpress as headless cms for nuxt js",1516320134.0
laissezfart,Prismic.io !,1516351603.0
DOG-ZILLA,Does Graph.cool count? It’s a DaaS. Really good! ,1516370455.0
N3KIO,"there is no good Headless CMS, each of the solutions will not have what you want or function as advertised, especially lock in services like GraphCMS, Firebase.. and so on... that lock you in, and you have to pay or your screwed.

Best is to make your own, all CMS does is edit/inserts/manipulates the data in database.

You could use wordpress rest API, but it's a clusterfuck bloated crap, so yeah...",1516324789.0
taserlick,🔥 You can do everything with Drupal. 🔥,1516365570.0
cyanydeez,i s this properly referenced?,1516335330.0
amdelamar,"That was great. One question though for vuex implementation. Would it be better for the mutator methods to add and remove the token from localStorage instead of hoping the components do it?

    localStorage.setItem('user-token', token) // store the token in localstorage
    commit(AUTH_SUCCESS, token)

",1516308136.0
eclev91,"Rather than updating the axios header after a token is received, I set up a getter:

    headers: function( state ) {   
      headers = {};   
      if(state.authToken) {   
        headers.Authorization = state.authToken;
      }
      return headers;
    }

And pass that to all axios calls. Or something to that effect.",1516314824.0
ianwalter,This is pretty much the same as auth systems I’ve set up before In Vue but if you’re talking about “best practices” wouldn’t you want to use a httpOnly cookie for the session key and use this request header method only for a CSRF token?,1516334699.0
,[deleted],1516338747.0
ejdraper,A simple tutorial blog post I wrote on getting started with Vue.js to build out the classic Tic-Tac-Toe game.,1516300144.0
george-silva,"Wow! This seems complete.

I checked out on my phone and It seems Very complete indeed.

Congrats on the good work!",1516312361.0
troynt,Hey Jerry! :),1516312722.0
setholito,Wow! This is a really nice project. Nice work @eiskis,1518721589.0
CunningFatalist,"I have no idea why you're getting downvotes. I just wanted to say thanks for making and sharing this :) 

A small hint: If you want more people to try this or consider using it, you should put up a small demo on [GitHub pages](https://pages.github.com/). Clicking a link is  much less work (and costs less time) than `git clone && npm install` ;)",1516263097.0
uNki23,"What could be a use case? Just wondering, not complaining 😊",1516279048.0
wangyi7099,"Yes, thank  to your suggestions, I have put the demo to Github Pages :)  !
Here is the address:
https://wangyi7099.github.io/vuescroll/",1516348182.0
wangyi7099,It's inspired by jquery slimscroll. :),1516422460.0
flyingmeteor,"I think he means ""register"" instead of ""nest"". When you register a component globally, it is available in every other component. If you register it locally, it is only available in that one component where you registered it and no deeper.",1516264416.0
laissezfart,Pre-rendering and generally following the Google Lighthouse suggestions (Chrome dev tools > Audit). ,1516234098.0
wangyi7099,"1 asynchronously import the component by using the dynamic syntax import.
 () => import(/**/);
2 use webpack-commonsChunkPlugin to extract your vendor library.",1516251082.0
esreborn,"CSS needs
`appearance: none;`

For buttons you need to make sure you style border and background as well.",1516489019.0
endorfiner,I tunneled with ngrok my localhost:8080. When I navigate to the ngrok url with the mobile device (iOs) it looks differentely from the desktop rendering. The browser is always chrome. ,1516219384.0
vandyw95,"Have you check you CSS class valye for certain ""media"" screen size?",1524223165.0
wobbabits,Try using the Bootstrap style normalizer: https://github.com/twbs/bootstrap/blob/v4-dev/dist/css/bootstrap-reboot.css,1516246328.0
AmishPanda00,"Can you add an example section to the site?

Expected input and expected output?",1516234958.0
thick_sauce,can you share the src code? ,1516473962.0
brainbag,Jest coverage doesn't work for me either.,1516228392.0
hobaspirit,"Fixed! I simply had to remove the script tag with type=""x/template"". ",1516205354.0
creatio_o,What have you tried so far?,1516200939.0
codus_maximus,"Its kind of impossible to say without seeing the site. But if *nothing moves* ... then there's not much for vue to do. Vue makes handling 2-way data binding a breeze ... but if you don't have any ... there's not much it can do. 

If youre adding stuff to lists, changing data in the DB on the fly, etc, yea sure, vue is great for that. But if your page is static and unchanging ... meh.

Just because youve got a hammer, doesnt make everything a nail and all that
",1516199155.0
UndefinedB,"Absolutely. Anything you would do with jQuery in the olden days, you can do much easier and more maintainable with Vue.
Think simple stuff like slide-outs or popups. Form validation is also much easier if you combine Vue with an awesome validation plugin like vuelidate. ",1516198153.0
josh1nator,"Hard to tell without seeing the website, but it doesn't sound like its a complex site.

Modern frontend frameworks are great for heavy and complex websites where you have a lot of data that needs to be displayed and updated. But simple contact form validation and other minor stuff is something that can be done with plain JS in a few minutes. Having a framework thats improving your workflow (esp hot reloading) is nice, but you end up forcing the user to load a lot of Javascript thats really not neccessary.

https://hn.svelte.technology/item/15567657 might be interesting. Or as already mentioned take a look at Nuxt / SSR

",1516218019.0
rocketchuck,"Agreed with the above, however you could use Nuxt to generate a static website where the primary benefit is simply using Vue for all the UI templating.",1516205248.0
devsabit,"This is not the best of comparisons.

It would be better if it gave the actual .js file sizes for comparable projects on Vue, React and Angular, rather than just saying Angular is way bigger than React, React is bigger than Vue. While this is probably true, broadly speaking, some numbers would be good here. Also some mention of AoT compilation and how each framework handles AoT would be good.

It does not mention CSS encapsulation at all. Vue's handling of CSS encapsulation is the best of the three (in my opinion). React doesn't deal with it all, you'll need a 3rd party solution. Angular uses shadow DOM, which is only supported on Chrome/Opera/Android, hence requires a polyfill on other browsers. Vue requires use of the 'scoped' keyword to make CSS local, uses postcss to implement this, works everywhere and requires no polyfill.

It's also unclear how scalabilty was assessed, other than Angular is the most scalable, React comes 2nd, Vue comes 3rd. How was this determined?",1516185412.0
jemminger,"> Scaling
> 
> Vue just behind reacting, it is a good choice however it lacks a list of best scaling practices, resulting in a lot of spaghetti code.

WAT",1516198942.0
DOG-ZILLA,"Can’t speak for Laravel but a lot of the time Vuex makes your life much simpler, even on seemingly small apps. 

Before I discovered Vuex I was passing around props like a mad man. Now I basically only use props for formatting and a few conditional things. 

Everything is in Vuex pretty much. ",1516132061.0
DylonDylonDylon,"Yes. Go all in.  I'm not a laravel user, but with any JWT api, it's always going to be a client app and a server app.  ",1516130625.0
ImReddit,"Every time I write a new component or app, I start with “oh I don’t need vuex!”

And everyone ends with “oh wow, this is so much better now that I’m using vuex“",1516134351.0
KodiakSA,"I've just started using nuxtjs for my front-end and Laravel for API.  Authentication etc is stored in nuxt front and backend. 
Also, using VuetifyJS as material framework to handle pagination etc..",1516126765.0
bmarkovic,"The only thing a small app can get away with, short of using Vuex, is to implement its own global store with simpler semantics (trading off time travel, Vue Devtools support and one-way data flow enforcement). And still it's questionable how much typing/thinking you spared and where will it be invoiced to you later. Props and emits are certainly much harder to discipline and handle. ",1516138470.0
hypercluster,What do you mean with paginated tables across multiple pages? ,1516140484.0
jingle66,"Vuex is great. However, you should take some time and look into apollo graphql client. I'm currently replacing vuex with this. It's basically a complete re write so if you haven't invested a lot of time in vuex yet, also check graphql. Main reason i chose graphql is cause it easier to build mobile apps that use the client cache as a ""local database"" to keep working offline / online ",1516193164.0
nimonian,"Vuetify is very opinionated about style and that's a good thing. It's pretty much an implementation of material design. Also, making the design less customisable means the devs can focus on functionality. Part of the reason I use Vuetify is precisely because the css is already good and taken care of and I can just build functional apps, whilst changing things like the color template as necessary. Having said that, I do make tweaks within components now and again.

The main developer has just left his day job to focus on Vuetify full time and they are working on 1.0 Beta, so the 0.17 docs might atrophy whilst 1.0 gets attention. Vuetify isn't a finished product yet, but I still find it great to use. The Discord channel is very active, so you might get more answers there.",1516127415.0
Modestyiswimpy,"Depends on what you're trying to override. If you have to do something hacky or add !important tags, your better off not using a Vuetify component in that instance.

It's still very useful if it helps in other areas though. Use it where it helps and take styles from components where you need more customization. ",1516123021.0
bobbytuck,"Vuetify is *fantastic*.

I've got a site here that I built with Vuetify last week: https://nyt.metaincognita.com

The only issue I ran into was having to back and forth between the beta docs and the current docs to get a sense of the grid layout. Other than that -- Vuetify is fantastic.",1516147575.0
kaelwd,"Depending on what you're trying to change, you might be able to just use the stylus variables.

 - [Guide to setting up your project for custom stylus builds](https://next.vuetifyjs.com/style/theme#stylus-guide)
 - [List of available variables](https://github.com/vuetifyjs/vuetify/blob/master/src/stylus/settings/_variables.styl) (change the branch to dev if you're using 1.0 beta)",1516172874.0
Jewjr,Is this just advertising. Is there any code or documentation?,1516117219.0
lankyweirdo,"Ah, I think i've discovered the point of contention.

https://vuejs.org/2016/02/06/common-gotchas/

*""When you modify an Array by directly setting an index (e.g. arr[0] = val) or modifying its length property""*

Will try moving to splice",1516106857.0
StrangeSound,"It seems like initially you misunderstood how the rendering system works, rather than focus being a problem. As for the components using v-model, I think it's actually safer that way. It stops components being tightly coupled to their parent. 

Here's a short summary in the Vue website - https://vuejs.org/v2/guide/components.html#Composing-Components",1516086438.0
ForSpareParts,"Should be straightforward:

1. Make a login form that posts to his OAuth endpoint (you can use the `fetch()` API, or a wrapper like [axios](https://github.com/axios/axios).
2. Save the resulting token somewhere (if you're using Vuex, the store might be a good place), and then use that with all future requests. I wrapped an axios call with common settings including the token into an `ajax()` helper function I can use anywhere in my app.
3. Use [Navigation Guards](https://router.vuejs.org/en/advanced/navigation-guards.html) in vue-router to kick users back to the login page if they try to access any page without a token.

Also keep in mind that users could futz with your deployed app to get to ""logged in"" pages without a token (it's all frontend code, after all), so you should make sure a malicious user wouldn't find anything interesting/dangerous on those pages if they did that. This usually isn't super hard, since they still couldn't make any network requests without a token.",1516067768.0
,[deleted],1516064825.0
chriscarpenter12,"https://github.com/matfish2/vue-tables-2

I just used this in my last project. Multi column search and pretty easy to use",1516070273.0
paladincubano,If you plan tu use a CSS framework. [Vuetify](https://vuetifyjs.com/components/data-tables) datatables is pretty awesome.,1516117448.0
mgeez,its soooo simple to build your own per your requirements with Vuejs its crazy ..,1516141402.0
,[deleted],1516030175.0
,[deleted],1516129344.0
irphunky,"Hard to tell without seeing expected input and desired output... 

But I would suggest looking at building the SVG around data, something like [D3](https://www.dashingd3js.com/creating-svg-elements-based-on-data) should be able to handle this fairly easily.",1516026848.0
doubleagent700,"Great question. Up.

This is often the most important and least spoken about topic in any programming language.

""How best can I piece all of this together?""",1516024452.0
barry_pederson,"Maybe https://github.com/vuejs/vue-hackernews - written by the man himself.  Shows off vuex, vue-router, .vue components, webpack config.",1516036814.0
igeligel,"Probably another project which is really cool: [realworld](https://github.com/gothinkster/realworld)

it is an open source organization managing different backends and frontends for the same application so you can swap out technology x for technology y.

You can find the Vue.js example [here](https://github.com/gothinkster/vue-realworld-example-app). It works with CORS requests by default but it should be easy to add a development proxy in the settings.",1516111060.0
lehos23,you can try to find something here https://github.com/vuejs/awesome-vue,1516028827.0
imjoer,Maybe like a small app that uses some sort of public API? A News reader with a detail view for articles would be cool - you would also get a good amount of experience with Vue imo ,1516048719.0
mshthn,"I started with this: http://www.impressed.co - still working on it
Edit: not very mobile-friendly.",1516097248.0
onedr0p,"https://github.com/Caiyeon/goldfish

with Bulma CSS framework. Plus it uses golang on the backend!",1516030382.0
smallcoder,"Damn, there's some amazing projects in that list. Big shout out to the Quasar project - defo having a play around with that one.",1515984577.0
Cool-Goose,Any reason why [NuxtJs](https://nuxtjs.org) isn't on that list? ,1516000181.0
Skoulix,I agree. Nuxt.js is such an amazing project and deserves more recognition. ,1516223613.0
rocketchuck,"HTML is valid markdown syntax, so you could just drop a youtube embed script tag into markdown files. Would work as your fallback, at least.

Many CSS frameworks have classes for responsive embeds, too. You could just place good old HTML into your markdown files.",1515956700.0
8wardialer5,"https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70

Modern JavaScript for dinosaurs. It's a brief article on everything you asked. It's a good starting point IMO",1515952724.0
rocketchuck,"Worth checking out Laracasts' vue series, touches webpack
https://laracasts.com/series/learn-vue-2-step-by-step

(Pretty sure the whole series is free)",1515956610.0
,Great video Edd. When espousing the benefits of Test Driven Development oftentimes it’s stated that you should write the tests first and then write the code to get it to pass. In this video you wrote the test after you’d created the component. Do you think that is a better way of testing? Thanks,1515954819.0
dynamitre_pork,Anybody got a mirror?,1516934053.0
KillTheBronies,Is there any reason to use this over vue-meta?,1515938912.0
,[deleted],1515954109.0
rocketchuck,"Can't recommend a best option, but it's not uncommon to use the store for some stuff but not for other stuff. If you don't need data in the store, then don't bother.",1515956777.0
OhItsWildfire,"http://quasar-framework.org/

Been using this at work, it's pretty good and gaining some traction.",1515914980.0
DOG-ZILLA,"http://nativescript-vue.org/#/

",1515925195.0
sheepc,"as far as i know, weex supports vue for native https://weex.apache.org/

only caveat i see with it is that most of the companies behind it are chinese so documentation is... in chinese",1515907062.0
sicjoshsic,"app.js is the webpack ""compiled"" output for the whole project. Essentially, webpack takes all your Vue files and in-project JS and turns it in to one optimized JS file. You might also see a vendor.js - that's your node modules. There's more to it than that but essentially that's what's happening.

As for taking 3 minutes, are you sure webpack had done compiling when you started the request? It's often slower in Dev mode because done optimization is left out to allow for easier debugging, but that's a hell of a long time to wait",1515869967.0
IAmRocketMan,"You might want to disable sourcemaps on the webpack config for the production bundle which would reduce the size of app.js significantly.

https://webpack.js.org/configuration/devtool/

Also, import the minimum necessary dependencies and enable tree shaking for further reduction in size.
",1515900132.0
endorfiner,"I'm a newbie and I'm studying vuejs. I'm trying to create a progressive web app and I have started a vuejs project with the vue-cli and I typed ""vue init pwa MyProjectName"". Then I tunneled my 8080 localhost port with ngrok (https://ngrok.com/) and then I reached the ngrok url as the screenshot shows. But I had to wait 3.3 minutes. I cannot understand why it takes so long! ",1515869392.0
CristiJ,"I would recommend https://github.com/vue-land/create-vue-component

Follow the installation instructions, drop in your code, then `yarn build` and `npm publish`. After you publish it, you will automatically have your code available in the `unpkg.com` cdn. `unpkg.com/YOUR_PACKAGE_NAME`. 

Note: Make sure you have an npm account setup beforehand. 
You could use the cdn later yo achieve your goal :)

From my experience this would be by far the easiest way to do it. 
Another way is to bring your own webpack config, bundle it and also publish on npm.

Step by step:

 1. `yarn global add cvc` (follow the instructions after)
 2. cvc vue-my-component
 3. cd vue-my-component (copy your .vue files/code)
 4. `yarn build`
 5. `npm publish` 
 6. Party hard ",1515854071.0
Sphism,"Yeah i guess you'd use webpack (or similar) so you could write it like all other components.

Then you'd turn it into an npm module and publish it to npm. Then For someone else to use it then can just do:

npm install your-custom-component

import YourCustomComponent from 'your-custom-component'

and maybe

Vue.use(YourCustomComponent) // not sure

I'm pretty new to vue but i guess that's how you'd do it",1515835899.0
CunningFatalist,"I am currently working on a fresh Vue+TS project and was about to write decorators for my store. Scanning your repo lead me to `vuex-class` and I just wanted to say thanks. You saved me quite some time there :) 

I had a look at your project and I think that you did an overall great job. Everything is easy to understand and I like the way you went about building this. I starred your repo and will have another look once I have finished my own setup. Keep up the good work, cheers

Edit: Are you thinking about creating a template for the `vue-cli`? You should, solid options are still missing (or I didn't find them, at least). Let me know if you do; I currently have many projects going on and probably won't be able to help for some time, but that doesn't mean I never will :) ",1516001832.0
Rawbzor,Maybe debug your code with vuejs devtools plugin for chrome. With the plugin you can see all the variables for each component.,1515834140.0
TwoTapes,"How are you adding the item to the array?

Have you tried calling Vue.nextTick() after modifying it? ",1515868229.0
inhalingsounds,"In short, yes. If you feel like you're repeating one-liners of state.x = x you can consider building a do-all method that takes key and value and acts like state[key] = value. No more repetition.",1515820049.0
johnnykb,"It’s supposed to be the good practice, and though my apps tend to be more of a medium-small size so far, I try to maintain this process.

And like u/inhalingsounds says, you can easily transform repetitive mutations with a refactored, abstract function, although that makes the markup more verbose and fragile (by having to match mutation parameters with store variables).",1515838926.0
jaredcheeda,"This is spam. It's a shitty twitter account linking to a shitty site that ad-links to Max's Udemy courses.

You can see all the links without sitting through ads here:

* https://www.udemy.com/vuejs-2-the-complete-guide

TADA!

Max does good shit, if you don't want to give him money, he has a lot of free Vue vids on YouTube.

* Vue - https://www.youtube.com/watch?v=nyJSd6V2DRI&list=PL55RiY5tL51p-YU-Uw90qQH419BM4Iz07
* Vuex - https://www.youtube.com/watch?v=2CSr2vBApSI&list=PL55RiY5tL51pT0DNJraU93FhMzhXxtDAo",1515848302.0
AtmosphericMusk,"Upvote for good luck. 


Just so you know though, ghosts aren't real, aliens are statistically likely to exist and due to the size and scale of both space and time in the universe equally unlikely to have visited earth during your short tenure of consciousness on this tiny rock, and Unidentified Flying Objects are unsurprising in a country with the world's first and second largest air forces with billions per year put into secretive research. Logic is the backbone of programming so I wouldn't expect too many people versed in it to share your opinions you've arrived at through dubious scientific examination. But good luck, the technical scope of the project sounds very whelming.",1515816500.0
nothingduploading,I'm into conspiracies.,1515904795.0
rocketchuck,"Not sure the problem but with webpack, can't you do

    var d3 = require('d3')

instead of the long relative paths? ",1515788746.0
cyanydeez,"webpack shim ?

https://webpack.js.org/guides/shimming/
",1515842948.0
inhalingsounds,"Take a look at Nuxt.js., there's a community driven express template for it. It's super easy to port your app that way.",1515770993.0
feihcsim,"What do you mean by incorporating a Vue component in each page? Do you want each page to be its own component? Separate Vue components in a single page? Or do you want your entire website to be a single page application, where routing is managed by Vue?

If you want to use Vue simply as a template engine, much in the same way as handlebars, use Vue prerendering.

If you would in fact like to continue using express for backend routing but want it delivered in full pages for which Vue is instantiated (ie the client can interact with, data-binding, everything) use Vue server side rendering.",1515771745.0
highway-to-helvetica,"Check out express-vue

That’s exactly what that’s for. You don’t have to replace anything you can just add it in and use the middleware. ",1515786884.0
waitingonmyclone,"The two examples you have are exactly the same. If there's some reason you want to access methods{} outside of Vue, you can do that in the first example, but I don't know why you would.

If there's a method that will be used in & out of Vue, you should first create a reference to it outside of Vue and then pass it in (better practice IMO). But it's hard to know what your reasons are from this.",1515782332.0
somejeff_,"Basically you would use JSON web tokens. Check out http://jwt.io. They have js implementations

1. Post username & password to a /login endpoint.
2. The server side create an jwt token and signs it. ( Keeping the secret on the server side)
3. The token is returned to the client. (You can store this in a cookie, since there's no password or secret)
4. Give this token back as a header in every request back to the server.",1515763172.0
irphunky,"Have a read of the below for an idea about using tokens for auth.

https://auth0.com/blog/vuejs2-authentication-tutorial/

Don't ever save passwords in plaintext ;)

",1515756408.0
DunkleAura,"You have to increase the iterations.

Rule #1 never store passwords in plaintext. But… NO!",1515837711.0
dbalast,You can test how Google will crawl your page with https://www.google.com/webmasters/tools,1515739109.0
alex_feiglstorfer,"SSR with Vuejs is really difficult to configure but I recommend you to take a look at Nuxt.js which has a lot of conventions so that other developers don't mess up the project.

Here's a tutorial that guides you through the setup:
https://www.storyblok.com/tp/nuxt-js-multilanguage-website-tutorial",1515778271.0
kn0ckle,"Just reminder, google only crawl on route changes. If you want to display different content to google, you need to change your url (doesnt matter hashbang or history api)

And, create a sitemap xml if possible.",1515752653.0
Fajkowsky,"In my one project, I was using https://github.com/xkjyeah/vue-google-maps and it was ok but when I started manipulating Streetview then it was not soo good.",1515744459.0
BrianKimball,"Scoped components add a unique data attribute to the root div. The css in that component targets that attribute so the styles are contained and do not leak in to the global scope. It's recommended to use scoped css in the vue style guide .
https://vuejs.org/v2/style-guide/

Most people have a global stylesheet and use scoped css on a per component basis.",1515718206.0
FurryFirefly,Thanks guys for replies :),1515768858.0
cyanydeez,"try mixins and <component is=""notLogged"">",1515724477.0
YourCupOTea,"Vue development in VS is horrible, especially after you've used VSCode + Vetur.  

If you C# app can be converted to .net core you could run it all in VSCode. If not, I would say either just open the project in both and use VSCode for the Vue portion or split off the UI into its own project that you can work on exclusively in VSCode.",1515690807.0
minus0,"It doesn't understand Lang=""ts"" on a script tag. So typescript is out the window, unless you do 

    <script Lang=""ts"" src=""filename.ts"">

It's not a huge loss, and until recently tslint didn't work well inside a SFC anyways. Just something to be aware of. 

We have a c# backend, so VS17 for that and VS Code for Vue is what we do at work. ",1515685481.0
breakingcups,"I'm currently prototyping Visual Studio 2017 ASP.NET Core Vue apps with Webpack and hot module reloading.
It mostly works properly, but I've decided against using .vue files because I'd rather have Typescript. I'm mostly happy about everything but it's not 100% done yet.

Once I've worked out all the kinks I'm considering putting the ASP.NET core template on Github.",1515693456.0
autoboxer,"Just started Vue development, and based on the comments I think I should look outside VSCode.  Anyone try Vuetron?",1515699757.0
__contrarian__,"Our stack using EF/Web API on the backend and I do that development in Visual Studio 2017.  For the front end Vue development though I use Visual Studio Code exclusively with Webpack watch.  I don't yet have a ton of experience with Vue, but this has worked for me thus far.",1515702905.0
i_am_a_programmer,"Extremely late here, but try the Vue.js Pack extension for VS2017.",1516543970.0
PatskyPat,"Ad 1) - I do the same (start client then server) and don't see any problem starting them separately. You could create a batch file / script on your desktop and just put 2 commands for starting a client and server there. Then just start that script with a single command.

Ad 2) have a look here  https://github.com/codyseibert/tab-tracker - I prefer similar folder structure. 
Here are tutorial videos on YT: [Full Stack Web App using Vue.js & Express.js](https://www.youtube.com/watch?v=Fa4cRMaTDUI&list=PLWKjhJtqVAbnadueQ-C5keMQQiQau_i0D) for that repo. Really worth watching. ",1515665591.0
inhalingsounds,I would *definitely* recommend using Nuxt.js for this - even more now that v1.0 came out. They have an awesome [Express template](https://github.com/nuxt-community/express-template) that's ready to use with everything set up so you can just focus on building the app itself.,1515692956.0
exxy-,"Webpack works its magic in a stream-like fashion per entry point.  You can pass an array of entry points and the add ""[name]"" placeholder to your output filename and it will give you two separate files.  That works if you use the same loaders for both server/client.  That's not likely, so in that case you can pass an array of configs to webpack so you can have one for server and client.  ",1517194450.0
dick_ey,"After you import the client side version of socket.io in Chat.vue (which you’re missing at the moment) I think all you need is a method that gathers the user input into  `data` and then calls `this.socket.emit(‘event name’, this.payload)`. 

Then in the server side use `socketio.on(‘event name’, callbackFunction)`.",1515654710.0
carrot_gg,Check the response HTTP headers. Last-Modified is always the same so the response is being cached as instructed by the server.,1515638425.0
nbreyes,"The fetch function you are using is subject to [HTTP cache](https://hacks.mozilla.org/2016/03/referrer-and-cache-control-apis-for-fetch/). If you pass the config object via `fetch(..., { cache: 'no-store' })` this will bypass the cache completely.

Here is a [fiddle](https://jsfiddle.net/nathanreyes/5tozgbcx/9/) to your modified example.",1515640063.0
Tinyrino,"Try to change your ""div"" variable to let. 

    let div = document.createElement(""div"");",1515636027.0
sir_eeps,You'd want to use something like [vuex-persistedstate](https://github.com/robinvdvleuten/vuex-persistedstate) and tell it which slices of state that you want to persist.,1515628474.0
eclev91,"Yeah, intended behavior, and the fix is local storage. Sure, it covers refresh, but also if your user comes back a day later after restarting their computer. You can decide what data should stick around.",1515625811.0
bitbytebit42,"Yup, you can use :key=""varThatChangesValue""
",1515649208.0
YourCupOTea,There discord server for Vue is fairly active and I see people getting answers to their questions regularly. Usually people expect a codepen or something to help you out though.,1515638376.0
brainbag,"That sounds frustrating, sorry you're experiencing that. I haven't had the same experience. The community isn't as big as React, but I've found it generally responsive. Do you have any particular questions you'd like answered to get going? 

For what it's worth, I've spent production time with every JavaScript framework that ever was, and Vue is easily my favorite one. ",1515622084.0
Tinyrino,There is a github repo where Vue components are shared [Vue Awesome](https://github.com/vuejs/awesome-vue) and website [VueJS Feed](https://vuejsfeed.com/),1515636316.0
rocketchuck,"I use both Bulma and Buefy regularly, and I love them both. Bulma's much leaner than Bootstrap 4, no jQuery deps, and can achieve nearly all that BS4 can. Buefy's nicely light-weight and fits in very well. Both are very well-maintained.

Can't answer your impossible question ;) but I think Bulma's going to be around for quite a while, seems solid to me.",1515600668.0
Captain_w00t,"I’ve been using Bulma for around 2 years. At first with React, then I switched to Vue 1 year ago and they fit perfectly. I don’t use buefy or other frameworks, I prefer to craft my components by hand (and eventually reuse them elsewhere).

If you’re still learning Vue, go without frameworks or component libs. Many of them, IMHO, aren’t so good, mostly because they’re crafted to accomplish the most generic goals, rather than solving a well defined use case, and sometimes it leads to poor (or even extremely complex) code.

Bulma works perfectly, usually they add more styles with newer versions, but things haven’t changed too much during the last years (well, just some css selector or html structure for forms).

My 2 cents",1515604594.0
bmarkovic,"For what it's worth there is also this: https://github.com/vue-bulma/vue-admin.

I toyed with it and it seems nice. What I like about Bulma is that it doesn't depend on jQuery, unlike Bootstrap. Still I have yet to use it in a 'serious' project. ",1515607743.0
justafrenchasshole,"I use the CDN of Bulma with VueJS, works well :-)",1515607693.0
sleepymansalitre,"I use bulma with vue constantly.  Now is 0.6.2, but never have any problem. ",1515620767.0
nbreyes,"I have used Bulma and Buefy both for many projects. I recently used them for the [documentation](https://vcalendar.netlify.com) for one of my Vue plugins. I find the Bulma is very well thought out and is the perfect size. Buefy is good as well, but I’d start without it first as there will probably be cases you’ll need to get under the hood and know Bulma anyways. ",1515637023.0
bitbytebit42,Vuetify ftw,1515646929.0
dillonraphael,"Might not be relevant, but have you checked out https://www.renaissancecss.com",1515644269.0
alexmacarthur,"The point of Nuxt is that you can render your Vue code before the user sees it, whether that's on the server or simply prerendering a static site. Then, you can still keep all of the interactive nature of Vue, because it ""hydrates"" the app once it's loaded.

There are two benefits in using this, from what I can see. 

1). SEO. If you're prerendering or SSR your code, search engines can more effectively crawl the content. If you're spinning up a straight Vue app with the CLI, this is a lot more difficult, especially if you're AJAX-ing in content after page load. 

2) Performance. If you're prerendering or SSR your code, the browser doesn't have to do it, and so there's at least a perceived performance gain here. 

I think the trick is just being smart about whether you should use it. Because it's hyped up? No. Because it makes sense for your app? Maybe try it out. 

Personally, I tried it out a few months ago, and wasn't THAT impressed. A bit buggy, and waaaay too much for my use case. However, since v1 is out now, I'm definitely gonna give it another whirl. 

",1515602634.0
smitjel,Could you deploy a site built with Nuxt to an S3 bucket?,1515638654.0
ImReddit,"It's an opinionated framework for how your vue app should be built, that does a ton of heavy lifting for you already.

If you want to build a pure-vue app, that has SEO value, you should use Server Side Rendering, which this does out of the box.

If you're just going to do a pure vue app and not care about SEO, you can use this framework for building a SPA (Single Page App).

Otherwise, there's no real reason to want to use nuxt.",1515617969.0
eloc49,"Yes. I had a full blown custom webpack config, routes, ect and left all that behind for Nuxt and never looked back. Its convention over configuration, but you can hook into the config if you need to. I just hope they got the static site generation bugs fixed for 1.0.0. Ultimately I've moved to React/Next.js but I still like Vue and would gladly use Nuxt on any project.",1515624841.0
mmcgu1966,"I've learned that as a 'best practice' for any javascript-filled content on page load, it's better to have a middle-tier language, like PHP, load the data on page-load and then use javascript (Vue) to replace / update / manipulate it. ",1515686270.0
DOG-ZILLA,"Nuxt is a framework built on top of Vue and (inspired by) Next. 

When you “view source” on a Vue Cli project you’ll see virtually no HTML or content; it’s all JS. 

With Nuxt, you’ll see a lot more physically rendered in the source. This is called server side rendering or static generation. 

Nuxt has its own set of conventions and caveats so it’s not Vue Cli vs Nuxt, but more about choosing which one will best suit your requirements. 

If you need better inital rendering on first load or SEO then Nuxt is for you. If you don’t need to worry about SEO and your app is light, then Vue Cli will work perfectly. 

They achieve different things but run in similar ways so your skills are transferable with both if you already know Vue. ",1515601460.0
rrajen,Excellent write-up for those of us that are relatively new to VueJS. Thanks.,1515601237.0
LynusBorg,"Please be more specific. Why would you need the Vue.prototype?

Did you generate an axio instance with some default options and add that as a property to the prototype?

Why not simply import that axios instance into your store?

Why even have axios on the prototype if you are using vuex - you should do most if not all of your API calls from within actions, not components",1515575361.0
dbvbtm,Checkout http://chat.vuejs.org/,1515580835.0
zephraph,I'll be on for a bit if he hasn't gotten anyone to assist him yet. Handle is the same on discord. ,1515556607.0
Robodude,"You can... you might have something like

    mutations: {
        saveUserInfo(state, { first, last }){
            state.firstName = first;
            state.lastName = last;
        }
    }",1515544269.0
brainbag,"If you're thinking about update multiple things at once in one mutation, instead I'd recommend using an action that does multiple commits. It's a lot easier to track in the debugger, and compositing mutations like this usually result in much simple actions and mutations (and easier to test). Additionally, mutations are intended to always succeed, whereas actions can be used for handling errors (by committing something else instead or throw an error). If you think of mutations as the setters equivalent of getters, it is a lot easier to understand, I think. 

All of the code I've written (or refactored) in this way has been so much better.
",1515609283.0
SupremeSpez,"Pass a giant object to a mutation and have the mutation act accordingly if you just want a single mutation.

But, it'd probably be best to separate out a few mutations based on however your data would be logically separated.",1515544112.0
CristiJ,"My guess is that `the provide and inject bindings are NOT reactive`
and abusing/letting people use them too much will lead to many issues/questions around them. 

Also it's kind of an anti pattern with the rest of the uni-directional data-flow. You might easily override the names for these provide/inject functions/data",1515530701.0
chaoss108,"[axios](https://github.com/axios/axios)

In case you are using nuxt, there is also a bunch of [nuxt modules](https://github.com/nuxt-community/modules).",1515519701.0
sicjoshsic,">I tend to create the header links manually instead of using webpack.. is there a really good reason to do otherwise?

I prefer to webpack for two reasons:

* I know the version in deployment is the exact version I developed against (though this can also be achieved by most CDNs with versioned links)
* My site isn't going to go down if someone else's site goes down

Not saying webpack is the only way to alleviate those issues, but it's an easy one of you're using it anyway",1515569726.0
kn0ckle,"Its not official anymore but i still vue-resource. Its great for pre-defined rest urls. Interceptors are cool, small but really nice alternative for axios.",1515573019.0
DOG-ZILLA,"I use:

Vue Cli
Vue Router
Vuex
Vuex Persisted State (to store Vuex state in local storage)
Vue Meta
Nuxt
Vuelidate (form validation)

Pretty much everything you listed. ",1515519660.0
jimithatsme,"I’m curious what people are using for the UI.  Bootstrap, Vuetify, Framework7, other?",1515543061.0
jimithatsme,"Vue cli
Vue router
Vuefire (firebase database, auth and storage)
Vuetify

I should be using Vuex, that will be included in my next project.

I use croppie for local image manipulation before file uploads.",1515543387.0
zebbadee,"Vuex, vue-router, vee-validate, vue-rx (if you're rxjs inclined), vue-meta, axios....",1515625287.0
ptzlm,"Look for memory leaks. map vs forEach for starters.
Try running the dev code in production if you are using template stringa / spread operators they will mess with minifiers/uglifiers.
Check the versions of node and npm on the machines its working on vs the others.
Enforce package lock to the working versions.",1515530949.0
mmcgu1966,"appending tags is DOM manipulation, which is anti-Vue. You would want  to either use jQuery to do it or have a variable in the markup that is populated with the new tag markup. ",1515515880.0
jaxn,"Ditch the template and start from scratch.

Add a toolbar. Then add a drawer.  ",1515456634.0
lrdrmo,"<v-navigation-drawer clipped>...</v-navigation-drawer>

Or if you have clipped in your components data, set it to true and simply remove the button in the toolbar.",1515489724.0
rrajen,"thanks for the write-up, appreciate it.",1515515741.0
Yerooon,What's the best way to setup permissions with nuxt? Do you recommend CASL?,1515477850.0
statuek,"""We will release in the next week a module called @nuxtjs/typescript to help users get started quickly with TypeScript"" Looking forward to this so I can use it with F# via fable.io and ts2fable :)",1515508073.0
RoganTheGypo,"As someone fairly new to vue and frontend js as a whole, where does nuxt fit in, is it a improvment on vue?",1515494583.0
lucisferre,"Disappointed not to see any comments about improving support for testing. This was the main limitation that made Nuxt a non-starter for us.

The only guidance on testing is end-to-end testing, but unit testing is still crucial and shouldn't be an afterthought.

I liked the model for convention based routing a lot though, but it was easy enough to achieve this with Webpack's `require.context` alone.",1515439617.0
movdev,are there any options for Obfuscation? Would love to see a way to have it generate code that is unreadable....like google does,1515472862.0
amdelamar,"I think its a neat project. Even if you don't profit from sales you at least learnt, built, shipped, and marketed a packaged product with Vue and Electron. Nice work",1515424584.0
PM_ME_UR_PICS_GIRLS,"Great app OP 🙂. Can you tell me what backend services you used ? And how much experience do you have with electron/Vuejs? 

Did you came up with the app mockups or did someone helped you?",1515442483.0
Kodiakpapabear,"While It's impressive, I don't actually see the point in posting this app here other  than the fact you wanting to get exposure. You're not really lending any kind of useable information or really helping others with their questions..

I feel this forum should be helping others code with Vue.js, not stroking ones ego.",1515468994.0
targence,Source code?,1515417261.0
irphunky,"Awesome job, looks really nice.",1515490795.0
jacobedawson,"Well done, looks nice & clean!",1515599747.0
brainbag,"Piffle on those haters, it looks great.

Can you tell us a bit about your process using Electron with Vue? How did you like it? What are the pros and cons? (other than the common ""Electron runs Chrome and takes up a lot of memory"")",1515613755.0
fryktelig,"You might wanna think about doing something with the moon background in your top section, it's stuttering like cray on scroll (safari osx). Imo especially the top part of a product website should be rock solid in order to be convincing. ",1515426745.0
kumakote,Using Bittrex and Binance websocket API. It was really fun to work on this! My favorite side project so far,1515416788.0
BRBoer,"I don't know Vue, so here are my thoughts on the design: 
On mobile at least, the position of the navigation is unintuitive. I thought your site was empty until I read the whole page. I love the overall design of the projects page!",1515433837.0
jesus_christ_is_lord,"If you look at the compiled HTML there is no <comp-children-2> so you're trying to target something that doesn't exist. Vue compiles the HTML as a div - not an actual <comp-children-2> like you might see in Angular. 

Second attempt works because you're targeting the div which does exist in the compiled HTML.

You can style the child by adding a class to the child component but I believe the style tag cannot be scoped - not 100% off the top of my head.",1515368504.0
,[removed],1515271701.0
pd-andy,I don't know the answer but I would also be interested to know how to achieve this.,1515261998.0
irphunky,[router.replace](https://router.vuejs.org/en/essentials/navigation.html) and something like [vue-waypoint](https://github.com/scaccogatto/vue-waypoint) would be a good starting point.,1515363914.0
moarsecode,"Javascript (Vue in this case) alters the DOM, which isn't the same as the markup itself (which you see with ""view source""). Use your browser's ""inspect element"" functionality to see the current DOM.",1515250604.0
steeleb88,"If your looking to have you VueJS application rendered server side, check out NuxtJS (https://nuxtjs.org/guide). This would allow to view:source and it would show the markup",1515270232.0
trudvang,"You can use the v-bind shorthand. For example, :href=“item.link” instead of v-bind:href=“item.link”",1515194631.0
StephenNotSteve,"As u/trudvang pointed out, you can use the shorthand. Other than that, that's the way; you've got it.

I imagine you'll want to have different link text, so you'll be accessing a property like `item.text` rather than showing the full object.",1515198940.0
AlternativeNickname,"Sorry, I don't understand. What is it good for? ",1515199162.0
Hdandhf,"Not a technical answer, but just keep at it. You're not going to get things right, and there WILL be a ton of bugs, but you're learning a ton right now.

Keep it in perspective. There's no need to feel overwhelmed if you know you're going to be fighting all the time. They know who you are, so just do whatever you can. And enjoy the learning process. This is like a hyper booster to level your skills up.

If you want to learn Vuex then work through the weekend and build a project that lets you learn vuex. You get the point. Work harder, basically (for now, to learn).

Good luck!",1515161291.0
CunningFatalist,"Hello there!

The gist of Hdandhf's answer is a good one. Keep at it, keep training. We are all working to improve, and that's a great thing. Okay, now that we got this out of the way, I will try to give some general tips. I did scan your project, but I did not test it. I saw some things that can be improved and hope that this is going to help you. This is not a deep analysis, however, so please keep that in mind.

Use [enums](https://www.typescriptlang.org/docs/handbook/enums.html). They provide a lot of power, because your IDE loves them. For example:

    type Page = ""login"" | ""order1"" | ""order2"" | ""order3"" | ""success"";

Is nice, but it's more comfortable to use and easier to change if you write 

    enum Page { Login, Order, Success }

instead. Also, enums can be handy at runtime.

Your naming and indentation is a inconsistent at times, e.g. here

    page: Page = ""login"";
    confirmationText: string = """";
    exchangeData: any[] = [];
    MAX_WAIT_TIME = 1000 * 60 * 3; // 3 minutes
    is_Success = false;

Although it is not directly related to Vue, the [Angular Styleguide](https://angular.io/guide/styleguide) has some great tips on writing solid TypeScript code. Beautiful code is code that is easier to read and understand. If you use an IDE, you can let it do the formatting for you. For example, I write code and then hit ALT+CMD+L to let PHPStorm beautify everything for me. There is a nice side effect to this. I don't have to think about ""what looks better"". It is more important that everything looks the same, especially when sharing code with others.

Another thing I noticed is that you could [DRY](https://de.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself) your code a lot. If you see something like this


    onPage2() {
      this.page = ""order2"";
    }
    onPage3() {
      this.page = ""order3"";
    }

there is probably a much more generic way to achieve what you want to achieve.

Some more general tips that should help you improve quickly are:

- Do not use jQuery. Don't get me wrong, jQuery is great and I use it for many projects. But if you want to learn ""the Vue way"", try sticking to it. Hybrids are harder to write and maintain.
- You can import single lodash functions and you probably should do that (`import isArray = require('lodash/isArray');`)
- If you removed something by commenting it out (which you do a lot), consider deleting it. Soon enough, it may very well become much more confusing than helpful
- Don't mix inline styles and classes in your templates (e.g. `<div style=""clear: both;""></div>` in `Item.vue`)
- After finishing a component or directive, stop for a moment and ask yourself the following questions: How easy will it be to use this in another context? How easy will it be to change this? How easy will it be to _delete_ this?

I hope this was somewhat helpful. Have a great day & cheers from Berlin mate",1515169474.0
vuestrik,"
**1.** The App.vue component is doing too much work. It's a bit spaghetti. It should be a really dumb container component. Most of the logic can be handled by vuex and router. Really consider using router.

---

**2.** Consider using vuex modules in case you are moving more stuff into the store.

---

**3.** Consider replacing jquery by axios. As the other guys mentioned, you should try to avoid jquery when using Vue. Especially if you need it just  for ajax.

----

**4.** I really don't like the `onSubmit` method in the `App.vue`.  I would do following:

* create new vuex module that's handling global UI stuff such as the loading overlays 
 
* configure a timeout  value in the chosen ajax library

* dispatch a `SHOW_OVERLAY` action/mutation in the `OrderPage3.vue` right before making the ajax call and `HIDE_OVERLAY` in the promise catch 

----

**5.** Stop mutating vuex state outside of mutations. You are for example mutating the state in `Store.ts addItem` action. Use vuex in the 'strict' mode during the development. Mutating store state outside of the mutations definitely decreases maintainability and it is an anti pattern.

---- 

**6.** Avoid using magic constants. I saw this code:  

```javascript
v-show=""dependencyThirdOptions && option1.Value != 4"" 
```

I have no idea what the value '4'  means and you might not either after few months. Move that condition into some descriptive method or use constants

----

**7.** Use properly configured linter in case you are not using it. I saw few unused variables in your code and the linter should have warned you.  Furthermore, I saw code that doesn't seem to be used anywhere. Delete such code!

----

**8.** Group related components into subfolders. Move shared components into for example 'Shared' folder and top level components representing pages/routes into 'Pages' folder. If some page component has child components that are used only in that one parent component then create a subfolder within the 'Pages'  folder for that particular group of components.

----

**9.** Methods such as `Page3OrderLine.vue/isReasonTextVisible` are really horrible. You should almost never use variable names such as a, b, c, d. 

----

**10.** Method  `Page3OrderLine.vue/onDependencySecondOptionChange` is horrible too but in different ways. Basically, the logic there is based on traversing the DOM with jquery. You should  almost never do that.  You can for example directly bind objects in the select options and reduce the whole method to one liner. [Check the Vue documentation] (https://vuejs.org/v2/guide/forms.html#Select-Options)

**11.** You are doing form validation manually. Consider using following libraries:

* <http://vee-validate.logaretm.com/>
* <https://github.com/monterail/vuelidate>


Good luck and happy learning of Vue! 

",1515283511.0
LanFeusT23,"So like /u/_crabz_ said you can import the vars.scss  in your components. But that requires you to do it every time.

If you use webpack here's how you can do it better:

    npm install sass-resources-loader --save-dev    

Then in your webpack.config, in the module/rules section:


    {
        test: /\.vue$/,
        loader: 'vue-loader',
        options: {
            loaders: {
                sass: ['vue-style-loader', 'css-loader', {
                    loader: 'sass-loader',
                    options: {
                        indentedSyntax: true
                    }
                }, {
                    loader: 'sass-resources-loader',
                    options: {
                        resources: path.resolve(__dirname, ""./styles/vars.scss"")
                    }
                }],
                scss: ['vue-style-loader', 'css-loader', 'sass-loader', {
                    loader: 'sass-resources-loader',
                    options: {
                        resources: path.resolve(__dirname, ""./styles/vars.scss"")
                    }
                }]
            }
            // other vue-loader options go here
        }
    }

The resources is supposed to take either a path or an array (so you could also load your mixins for example), however I could never get the array version to work.

So instead I have a merged.scss that imports both my vars and mixins and then I use the merged.scss in my webpack. This way I have access to all my vars and my mixins in my vue components.

EDIT: obviously here you also need to have 'vue-loader', 'vue-style-loader', 'css-loader' and 'sass-loader' installed :)",1515106536.0
_crabz_,"From [this thread](https://github.com/vuejs/vue-loader/issues/328), it looks like you can't define Sass variables globally and use them in child components. This feature would be amazing. For the time-being, you must import the Sass file with your variables like so
    <style lang=""sass"">
     @import ""styles/_vars.scss"";
    </style> 
This is shown in the thread I linked",1515104244.0
OmegaVesko,"Like other people, I just have a `main.scss` file that contains variables used by multiple/many components, and import it in every component that needs it. It'd be amazing if we could just import stuff like this globally, or in a way that doesn't require doing it again for every child component. ",1515105851.0
Ashaltiriak,"Create a _config.scss file that contains your variables. In each component you could then import the file-
 @import ""../../config"";",1515103907.0
hip_modernism,Hmm interested in reply this is something I also haven't really figured out. I have a feeling it involves not being garbage at Webpack ;P,1515103017.0
Rorixrebel,"I know sass lets you import ""partials"" so that should work.",1515105157.0
mmcgu1966,would it be possible to use native CSS variables instead of SASS variables? ,1515162203.0
cinema-tech-on-call,I have been using Firebase and Flamelink CMS (beta) for my current project. So far it’s been pretty straight forward and simple.,1515096160.0
chris_jung,"ContentFul,
https://getcockpit.com/
https://getdirectus.com/
WP-REST-Api can be used, too, see the other link I sent you
",1515242556.0
slackersremorse,"You could use Wordpress, there are a few projects that have pulled that off already, I have been following this for a while and am intending to use it because it has all the tech I want to play with. 

(https://medium.com/@rmmmsy/introducing-vuepress-wordpress-development-with-vue-and-graphql-f5063a97bb69) [Medium Article]
(https://github.com/ramsaylanier/VuePress)[github]",1515094288.0
chris_jung,Maybe you should look at this: https://github.com/alexmacarthur/wp-vue,1515101328.0
SupremeSpez,"Getters are only necessary when you need to manipulate the data in your store and you want to use that manipulated data in multiple components. Instead of rewriting the code to manipulate your store in each component, you put it in a getter and simply access the getter wherever you need it. If you just need the store data as is, you technically don't need to use a getter, just access it like you've already done.

As for setters, the way to update data in your Vuex store is through mutations, which can be thought of as setters. You should never set a property in your store directly ($store.state.myVar = 'whatever' (this will throw a warning in your console)), as this breaks the idea that every change to your store should be trackable. If you need to update myVar, create a mutation to do so. If you need to set myVar from some asynchronous source (such as getting data from a server) create a Vuex action which calls your API and then calls your mutation, passing the value from your API.",1515040256.0
daekano,"Getters are great for another reason that I haven't seen in this thread yet. They decouple your component from the shape of your store. 

Any store that fulfills the getter ""interface"" can be used. ",1515076798.0
cyanydeez,"the means of vuex is to turn random, async variable access into orderly synchrous access. Allowing only one function modify state means debugging the order of operations in complex applications is substantially easier.",1515039507.0
orkhanahmadov,"I use getters to manipulate store data or get new data based on store data.

For example, lets say I have an array in store. If my app requires length of that array in multiple components I can create a getter function to get length of array and return it.",1515044556.0
gabemachida,"vuex is there to make bigger code bases easier to handle. if you have a small codebase / not planning on refactoring, then it definitely doesn't sound useful.

and when you say getters and setters, are you referring to getters and mutations or a computed property within a component that uses getters and setters to communicate with vuex?

you should never directly alter vuex state from a component. that's what muations are for. it feels a bit clunky at first, but it creates a separation of concerns and really helps to debug/refactor code later because you know where to go to see any of the true sources of the state change. ( vue devtools should also give you a message if you try to modify state directly )

finally, directly reading state variables isn't nearly as troublesome, but using a computed getter has a couple of benefits:

it makes the template more readable. especially once you start using modules for vuex directly referencing a state variable can span quite a few letters.(e.g. this.$store.state.reservations.users[0].first_name )

it becomes easier to debug/refactor/add features. let's say that you're storing someone's name as string:

    this.$store.state.currentUser.firstName
if you use it inside the template, it's not so bad. until you or someone else decides that you don't like the way it's formatted. maybe instead of just displaying it, you want it all in uppercase. in vue, you can't use functions inside handlebars.

so long and short, it's all about making it more readable and easier to trace errors and make updates. of course this is a trade off that only the programmer can decide. is it worth taking the time to make it easier to read in case the code base gets larger in the future?",1515049966.0
endjynn,"Vuex is designed to solve a specific problem. If you have multiple asynchronous actions that modify the same state then it can be difficult to determine when that change occurred and by whom. Vuex solves this by using a global store (a single point of truth), making all state changes synchronous and by tracking any state changes that occur (to make debugging easier). If you are using Vuex then you should never modify state directly (e.g. $store.state.myVariable = ""modified"") otherwise you lose all of these benefits. Instead you should modify state using mutations.",1515065284.0
rabagaz,Getters can also be parameterized and are cached.,1515100657.0
CristiJ,"The UI of the website is awesome.
The UI of the tool is also god damn awesome ",1515067445.0
rocketchuck,"This has been bugging me for days, yet after posting this, I managed to get halfway there. Apparently, props from the parent route do get injected into the child routes.

But... I'm still duplicating code in my components. 

Would you use mixins for this kind of thing?
Something else? 

I may bring Vuex into the mix here soon, especially for authentication needs. 

    // updated routes.js
    {
      path: '/:code',
      component: SitesLayout,
      props: (route) => ({ code: route.params.code }),
      children: [
        {
          path: '',
          name: 'site.dashboard',
          component: SiteDashboard
        },
        {
          path: 'schedule',
          name: 'site.schedule',
          component: SiteSchedule
        },
        // and more with the same props
      ]
    }",1515012110.0
Bumpynuckz,This is REALLY cool. Good work!,1515110098.0
stukjetaart,I'm a big fan of the vue2 series on laracasts: https://laracasts.com/series/learn-vue-2-step-by-step,1515014139.0
DerJuggernawt,Appreciate the resources!,1515091210.0
ReactDOM,Some of the [best Vue.js tutorials](https://reactdom.com/vue),1530235946.0
irphunky,"Why does the theme have to touch any of your components? Just include the theme CSS after everything else.

If you must have a way to enable it via a class, i'd usually go with a class on the body which can be used to prepend any theme selectors.

",1514997604.0
awesme,Can you setup a short sample or how you're using it and post it somewhere?,1515135824.0
tjlaa,"I made my first functional Vue components last week and since that I've spent at least 1 day in trying to figure out why something doesn't work. Scope attributes might be totally wrong or tests will fail as they don't understand how to treat functional components.

I'm simply getting the feeling that they are not mature enough to be used.",1523887455.0
slynglen,"If it's anything like angular, I suggest looking into Jasmine. It is a basic unit test library for JavaScript that lets you create spies. A spy can mimic every JavaScript method and return the value you want next time it is called.

In a more general way it's basically a mock or a stub. Maybe something similar is available mocha.",1514960348.0
bahmutov,"Try [Cypress](https://www.cypress.io/), can do everything, you can see each response, lots of examples https://docs.cypress.io/examples/examples/recipes.html and can do unit testing as well. For example for Vue https://github.com/bahmutov/cypress-vue-unit-test

Full disclosure: work at Cypress",1517409052.0
slackersremorse,"Thanks for doing the heavy lifting to get this info up, I was looking into deploying this setup. 

Graph, Vue, and PWA are going to explode this year as solution sets for projects. Safari adoption was a major hurdle that is n the works to being cleared.",1514960439.0
doesntevenmattertome,Seems needlessly complicated. Why not just use the WordPress API?,1514943426.0
mcdronkz,Why is WordPress still popular? Is it literally only because of the well-designed admin interface?,1514997663.0
Mekhami,"Closed the article after ""You can't do SEO without server side rendering""",1514940419.0
,"It seems like the JS ecosystem is settling upon some common workflows/technologies at the moment, and stuff like this makes me really excited at just how easy it'll be to write amazing stuff in a few years. Good work!",1514931873.0
__pulse0ne,"I like the sentiment behind this a lot.  It reminds me of the redux/react-redux split. At first it seemed annoying to have to use two packages, but when I switched from react to vue, it was very nice to have the state management code not change.

Very cool, and I’m excited to try this out",1514943230.0
Intie,I like this. Do you think it's possible to implement an adapter for Angular UI Router? ,1515004960.0
Mobilunity,"If you want to hire a professional Vue.js developer, you should be aware of what skills and knowledge he/she should possess. First of all, mastery of vanilla JavaScript is very important, as it helps developers to correctly understand the purpose of every functionality of JS, so the right framework could be used within the project. That leads to another important skill of [Vue.js developer](https://mobilunity.com/blog/vue-js-developer-for-hire/) - knowledge and experience with other JS frameworks, as Vue can be used with any additional framework. And the last thing for Vue.js developer to be proficient at is understanding of component-based architecture. A good Vue.js developer must have a mastery of how component-based architectures work in order to put this feature to good use. I hope, this helps you to choose the right Vue.js developer for your project. ",1515766007.0
dick_ey,"You were really close! 

https://codepen.io/dick_ey/pen/VyWmVr

Click on the test text to trigger the audio. ",1514860641.0
hovercraftii,"You should hide the category selector on mobile, it really smashes the content into the side.",1514854452.0
LynusBorg,"Looking great!

One question: Any reason you are using `let` for pretty much everything? Not that I'm pedantic about these things (far from it) but it just stuck out to me and I realized I usually only see `const` these days, and `let` is mostly reserved for things like:

    let flag
    try {
      if (something) {
        flag = true
      }
    } catch (e) { ... }",1514911462.0
chandru89new,Curious to know what backend you're using.,1514871228.0
RoganTheGypo,Is that bootstrap bud or did you style it yourself?,1514891205.0
w4ck05,"Really cool!
Congrats...",1514936100.0
SupremeSpez,"What kind of speed improvements are we talking about with this?

This sounds fantastic, if it’s as good as it sounds I’d probably have a use for it in every one of my projects.",1514843757.0
ramboforyourthoughts,"Or perhaps this is a perfectly acceptable way to use Vue, and part of the joys of Node.js flexibility.",1514809959.0
,"I'm creating a chat application right now, and this is the way I've decided to structure my app (using vue-router and vuex)

I have my Vuex state divided into modules, and one of those modules is an mqtt module (my app is using mqtt over websockets for real time communication). When I get communication from the service I trigger an action in another module that let's say adds a new message to a chat.

In my opinion, I would remove the ejs stuff and go strictly Vue. This will give you more fine grained control over the DOM because there are no other sources modifying it. It will probably be easier to maintain in the future as well.",1514826573.0
nedpals,have you tried vue ssr (server side rendering) and/or nuxt?,1514851785.0
ramboforyourthoughts,"So the solution I used (for any future google explorers) was separating the socket.io/express back end and having a completely separate Vue server. It took a bit of work to move all the front end across, but everything feels a lot more organised now.  
The Vue server communicates with the express server using axios (HTTP request module) and vue-socket.io module. I updated the backend (express) server to manage the database, session, and logic, and used the existing socket methods to act as APIs for the Vue server to communicate with.  
The front end build is much smoother and if I ever build the app again on android/iOS I already have an independent API server to communicate with.",1514991626.0
ImReddit,"Lazy answer for solving this, is use the index of the loop as key.

```
  IotaCard(v-for=""(msg, index) in filteredTransactions"" v-bind:key=""index""
```",1514669173.0
RoboSquidTV,"If you disable javascript, the CSS is a little messed up but the elements stay on the page.",1514667347.0
Emptyless,"Cannot test it because I don't have a laptop at hand but you have the unscoped CSS class 'wrapper' layouts/default.vue and the scoped CSS class 'wrapper' in components/global/vf-header.vue

Maybe they are conflicting?",1514777509.0
richardtallent,"While I'm all for decoupling and separation of concerns where it makes sense, there's four other things I'd try to keep in mind:

1. Prefer using props and events as you go ""deeper"" in your component hierarchy. It's reasonable for a ""page"" component to be directly interacting with Vuex state (via mapState, getters, $state, actions, or mutations), but it doesn't make sense for a ""button"" component to do so. In between, where practical, keep components unaware of Vuex where you can and you'll limit the impacts of any store changes. Components are functions, so err on the side of referential transparency and minimizing side effects.

2. If the shape of your store are shifting rapidly, it may be time to take a more sober look at your design, because changes to state shape are going to impact a lot of other things (like actions and mutations), and could be a sign that you should take a step back and figure out your data model before wiring up more components.

3. If you need to ""move fast and break things,"" take advantage of the fact that we have modern IDEs that make it fairly simple to find and replace, rename, etc. when changes happen. Don't make every web browser hitting your site go through abstraction gymnastics when it's really not that difficult to go patch up places that refer to $state.X that now need to refer to $state.fooModule.Y, when and if that happens.

4. To the above point, YAGNI. Don't plan for more moving parts and complexity than you actually need. Add complexity if *actual* changes to your store are becoming an impediment after considering the first three items above.

I'm still a Vuex newbie, but this is the sort of stuff I'm thinking through now as well as I plan my first two fairly complex apps (one is an SPA, another could become a full-blown SPA in the future). Good luck!",1514617094.0
Robodude,"Have you had a chance to look up modules and namespacing? 

https://vuex.vuejs.org/en/modules.html

For larger apps I take full advantage of these features and don't seem to run into many problems.",1515005624.0
jemminger,"You've defined `addToList` inside of the mounted hook?  I'm not sure it'll be in scope anywhere for you to call it.  Add it to `methods` instead, and then call it from `mounted`, or from a button etc",1514608745.0
morficus,"~~Try turning your `data` attribute in to a function in place of a straight up object~~


ignore what I said above... your issue is that you never actually call your `addToList()` function.



    mounted: function() {
        let _self = this;

        function addToList() {
            _self.todos.push( { text: ""Four""} );
        }

        addToList(); // <-- you need to actually call it, not just define it.
    }",1514615233.0
irphunky,The li should be it's own component with data passed through as props or just make sure you pass scope through to the function your calling (at very least the index key of the current item),1514618586.0
laissezfart,"might be a better way but think you could v-model the select and then ""watch"" for changes to the value. in your watch function use this.$router.push(...) ",1514522441.0
LittleAccountOfCalm,"Nitpicking but it's weird to compare based on the LoC.

For example the React toggleFavorite, has 11 lines, two of which are just console logs.

He could just do this
> this.setState({favorite: !this.state.favorite})

Not be best argument..",1514493896.0
kaelwd,"v-cloak prevents DOM templates from being displayed before they are processed, vuetify doesn't touch that. Your problem is probably CSS loading too late. ",1514520801.0
Mekhami,"You assume by vuetify, but did you verify that in the dev console?",1514518164.0
orkhanahmadov,AFAIK Google bots can run synchronous JS content on webpages while crawling. But it cannot wait for async code to finish running.,1514490735.0
StandNTroll,"Regarding the part where you mentioned that Google now can crawl your page without the server side rendering. Yes. Google had a blog address that. 

As for the second part of your post. I cannot guarantee if it’s a 100% safe method. ",1514473102.0
i-downvote-memes,"If you have a great web app / great content, people will find it organically via social media and word of mouth. Chasing down every last SEO optimization is an enormous waste of time!",1514489515.0
oleg_agapov,Nice! What is on back-end?,1514455951.0
Badya122,Looks interesting! Not mobile optimised though. Do you have the meta tag for scale setup? ,1514464421.0
ergnui34tj8934t0,Post some code! ,1514442847.0
flyingmeteor,Vue.js intelligently tracks property accesses within render functions. The render function will only re-run if a property has changed. You'll need to leverage this behavior. A date or a random number would do it just fine,1514444547.0
irphunky,"When you say event do you mean DOM Event or something external of from your VueJS?

Simplest way is to utilise reactive data within your component, this usually requires you to change the way you think of interacting with this data if your new to Vue.

If you can describe what your doing/trying to do better someone will be able to help, but right now your not being specific enough.

But to answer your question, yes you could use setInterval within a component to check every second but that would not be recommended for most scenarios",1514453215.0
zimmund,"Perhaps `$forceUpdate()` may help you ([see documentation](https://vuejs.org/v2/api/#vm-forceUpdate)), but as others said it depends on what you are doing and there may be a more elegant way to solve it!",1514476277.0
Maklite,Form submit will always take the first button and simulate a click. You’ll have to either change the order in css or change the behaviour of the form handling. ,1514458097.0
cooldude0609,"Routes only get intercepted if you use router-link. So if you call your apis from your vue application using axios or fetch, it should work.",1514443147.0
LynusBorg,">  When is that method called?

Immediatly when you register it. 

What happens is that Vue's Reactivity system essentially registers every state property access that you do while that function executes, and registers that piece of state a dependency of this watch. so whenever this piece of state changes later on, the callback function of the watcher will be called.

So the only purpose of that function is to actually access the pieces(s) of state that you want to watch so the reactivity system can register that as a dependency to watch for changes.

What does that mean? Well, in your example you showed this function:

    state => state.discs.find(disc => this.disc === disc).rings,

Vue will run this function once, and during this run, register that it accesses:

* the `state.discs` array
* the `.rings` property of one of the disc objects (the one that `find` returns)

So those are now dependecies of your watcher. Whenever the `discs` array changes (items added/ Removed) or whenever that one `disc` object's `.rings` property changes, the callback function that you propived as the second argument will be called.


> What should it return? 

Nothing. The return value is not important to the concept explained above.

> DO i have to use the state that is passed to it? 

Well, it'S the only way to make Vue aware of the data to watch, so - yes.

> What happens when i do something like this?
>
>     () => Math.random()

Since `Math` is not part of the Vuex state, the Reactivity system doesn't register as a dependency and your watcher callback will never  run.",1514383231.0
CristiJ,"Server environment: 

     const renderer = vueSsr.createRenderer();

     return renderer.renderToString(app)
      .then(html => html)
      .catch(error => error);

In browser
https://codesandbox.io/s/5vjkr5kl3n

    function compileComponent(template, data){
      return new Promise((resolve,reject) => {
        new Vue({
         data() {
           return data
          },
         template: template,
         mounted() {
           resolve(this.$el.outerHTML)
        }
      }).$mount()
     })
    }

Might not be the best solution but a starting point at least.

My recommendation would be to do this on the server if possible, but if you need it in the browser that is also possible",1514384480.0
minus0,"I'm on mobile, and Reddit search sucks, but just a few days ago there was a post on here (I believe it was this subreddit) where there was a plug-in that allowed you to compile in browser. Search back a few days and I'm sure you'll come across it.",1514385705.0
DOG-ZILLA,"This is kinda beyond my level, but isn’t this something that Webpack / loaders are good at? ",1514371041.0
PlainReality,"A project I recently inherited generates HTML, then uses phantom-pdf to rip the page and generate a PDF from the content. Not sure how “correct” it is, but it works.",1514375993.0
irphunky,Because the property doesn't exist until the Ajax completes. Place a v-if on the image so it only displays when it exists.,1514371922.0
doesntevenmattertome,"Thinking this is a Contentful issue and not a Vue issue. I am creating a blog very similar to yours and am able to access images in the way you're describing. I'd try renaming the image field for the article content type, and if that doesn't work maybe try contacting Contentful support.",1514355303.0
RoboSquidTV,"**The issue is solved**


&nbsp;


I couldn't tell you why, but the JSON object behaved very strangely for me. I don't know why I am forced to work this way but the JSON object seems to only be accepting strings as keys in some places.
&nbsp;


&nbsp;

leading to nonsense like this which works.

&nbsp;

` article['fields'].author['fields']['avatar']['fields'].file.url `

",1514409749.0
cyanydeez,"either map this to self at the begineeing of created

    let self = this

    ....map(self.tags.push(tag)

or use an arrow function

your this reference is changed inside the for loopmi believe",1514345971.0
poop_taking_forever,"1) Make sure you have the `tags` array defined in data (just as an empty array, so Vue knows to observe it).

2) Inside your forEach loop, `this` gets redefined (just a general javascript thing, not specific to Vue). Either do something like `var self = this;` before the loop and then use self.tags.push() , or use a fat arrow funcrion which doesn't change `this`: 

    posts.forEach(item => {
        this.tags.push(item.category)
    });",1514346005.0
DOG-ZILLA,...Vuex??,1514326679.0
thecementmixer,Check out Bulma too.,1514318401.0
CristiJ,"- Material
   - [Quasar](http://quasar-framework.org/quasar-play/android/index.html#/showcase)
   - Vuetify, framework 7, OnsenUI 
- Bootstrap 
   - [Bootstrap-vue](https://bootstrap-vue.js.org/docs)
- Ant design
   - [Mint UI](http://mint-ui.github.io/docs/#/en2)
   - [Element UI](http://element.eleme.io/#/en-US/component/installation) Not all components are mobile friendly.
- Bulma
   - [Buefy](https://buefy.github.io/#/documentation/start)
  ",1514319398.0
AmishPanda00,"Iview has good English and Mandarin documentation. It's supported by major Chinese companies. 

In terms of visual flavor it doesn't feel like a Google material design clone. So if you're looking to avoid that Google look it's a good option. 

https://www.iviewui.com",1514324959.0
StandNTroll,I highly recommend Bulma or Vuetify. ,1514339993.0
typerory,Vuetify! They have a great Discord support board too. ,1514386635.0
Splendiferous_,"For your PWA features checkout workbox, it makes adding offline functionality and app shell caching really easy, and it's supported by Google.",1514328604.0
egoistian,PWA is ui-library agnostic,1514350536.0
rayshinn,What about for a mobile PWA app as well?,1514360594.0
,[deleted],1515109941.0
braaaiins,"Check out vue-test-utils package, it's official but still in beta.

Works really well for us",1514286440.0
MichaelSorensen,[vue-quill-editor](https://github.com/surmon-china/vue-quill-editor) ,1514279354.0
skrolz,"If you use vue-cli, it creates a development environment that updates on the fly. Some changes might require a browser refresh, but that shouldn't be an issue.",1514246008.0
Beardo01,Looking good boss. Keep up the good work!,1514255342.0
igeligel,"First of all great article. I think frontend needs more love for testing!

One thing what i hate about TDD in frontend though is that it does not make sense for me in terms of testing HTML structures. Those structures change so often and get redesigned that you would either take care of tests which costs time or you delete unit tests (this costs time too).

You should rather test that key elements are included in those components somehow if you want to test them. This can be quite generic and so on but if you want to test HTML structures and similar i recommend reading the article of [kent c. odds - Making your UI tests resilient to change](https://blog.kentcdodds.com/making-your-ui-tests-resilient-to-change-d37a6ee37269).

Basically what he recommends is to use custom data attributes in the html elements to tag them to get key dom elements into the tests so you do not select based on tree structure or content which is even worse.

    <template>
      <div
        class=""vco-button""
        data-test=""vco-button-delete""
        @click=""deleteComment""
        v-text=""'wdw'""
      />
    </template>

Something like this can now then get selected by `[data-test=""vco-button-delete""]` and next time you want to refactor this you just change the position of the data attribute if it is heavy changes. Obviously these things will not save you from all breaking changes but it will make it easier to refactor and still have tests in place. Also this makes things really easy for e2e test frameworks since good selectors are in place.",1514201186.0
slackersremorse,"I found the presentation stunning, followed by dissapointment with the lack of followup function.

The good news is you got the wow factor right out of the gate.
More good news is all you have to do is keep that level and add additional functions.

Something to consider, you might want to reconsider yellow links",1514151045.0
crapathon,Thoroughly impressed! 10 out of 10. Keep it up!,1514164027.0
recrof,"Are you planning to create SPA or this is just a closed demo that will no longer be developed? Asking just because I noticed that your page is lacking main Vue use-case. Animations are short and not distracting, and page looks well designed. keep it up.",1514193971.0
,[deleted],1514176350.0
Cedricium,"All I can say is: holy shit! The site is really impressive (and I'm on mobile). I'm looking to start learning Vue myself so I'll definitely be looking at this for inspiration.

Nicely done 👍",1514193203.0
Yerooon,Mobile IOS nothing much is happening?,1514214161.0
GameDevPlayer1337,Absolutely stunning. What knowledge would I need to create something this good looking?,1514220069.0
Mekhami,"Okay, but what is the Vue part? This is not really functionally anything to do with Vue.",1514162876.0
mr_bruckner,"^ https://poi.js.org/
^ https://github.com/egoist/poi
I use this in everyday development and when prototyping in React/Vuejs.
You can easily use it with sass/scss or pug, they just need to be installed globally ;)",1514205968.0
vpz,Link?,1514141161.0
oleg_agapov,"Why not to start with this gem? 
https://www.udemy.com/vuejs-2-the-complete-guide/?start=0",1514110563.0
ameo02,"I was there, but had to quit due to some personal money issues. [got refund]
Lessons were few, and it looks like everything is still in early start,
but lessons are added weekly, I believe, so it's a start, but also a progress.
Very good thing is that there is slack community where you can ask others 
any questions, so I guess support is there. ",1514126823.0
ViditM15,"Just following up on this. Have you bought the Masterclass package by now? If so, can you give me a detailed review as I myself am keenly interested on buying this solely looking at the course's credentials (the author of the docs himself? whew!).",1529290878.0
hypercluster,"Interesting!
Right now I'm doing single file components by using x-templates plus extra script tag and rendering the htmls in my view. ",1514134609.0
Sentiententity,"Remember the days when you could just edit a file, refresh your browser, and see your changes? Vue-Vanilla remembers. It's back to files again!

Remember the days when your users didn't have to download your whole website when they wanted to view a page? Vue-Vanilla remembers. It can only load what the user wants to see!

We ditched a nodejs toolchain when we realized that adding npm, transpiling, hash matching, browserify, and requirejs caused stable projects to develop build errors or version clashes in a very short time. If you have one project, this is fine, but if you have more products than developers, build maintenance becomes an expensive liability.

Additionally, since our company mostly distributes WAR files, the nodejs -> updateresources edit-build-test cycle is/was terrible.",1514137646.0
AmishPanda00,"I think this guys short video series will help you out.  He builds an express API w/ a Vue standalone front end.  Its worth a watch to at least see how he tackles the problem, even though you may take a different route.

https://youtu.be/Fa4cRMaTDUI",1514057175.0
vpz,"With a normal Vue CLI webpack template and an Express API backend you usually use a setup with Nginx where the built Vue files (after you run ""npm run build"" there is an index.html and a statc/ folder in your ""dist"" directory) are served via the Nginx web server root and the Express API via a reverse proxy configuration (also in Nginx).

The Vue application communicates to the Express API via Axios (often in conjunction with Vuex).  So the Nginx webserver serves the Vue files (and other static content) to the user's browser where it runs the app.  The app communicates over the internet to the API (which Nginx proxies over to Express).

So in short Express doesn't serve the Vue app - Nginx does - and Nginx fronts the Express server in a reverse proxy setup.",1514062077.0
inhalingsounds,"I would definitely suggest you use Nuxt.js for this. There's even a [boilerplate with everything ready to use](https://github.com/nuxt-community/express-template) - Vue, Node, Express all tied up and good to go.

I'm building a full-fledged app on it and despite some trouble learning the ropes on the server-side (never used node before), it's awesome to work with.",1514083891.0
UndefinedB,"The easiest way is to generate a webpack project using the vue-cli, then host that frontend somewhere. I'd recommend hosting it on Netlify, because it's super easy and reliable.
Connect your frontend with your api and you're done! ",1514068045.0
SupremeSpez,Here's a repo where express is serving Vue. Mind you this is a Vue SSR setup https://github.com/vuejs/vue-hackernews-2.0,1514071048.0
applefreak111,I think it’s `header.fields.headerImage.sys.fields`?,1514055233.0
AndyJessop,"You'll need to add that in yourself. A word of warning is that if your state becomes tool large, persisting it on each mutation will visibly slow down your app. Be prudent.",1514039636.0
chrisgaraffa,"Vue won't be able to get the directory contents itself. At the very least, you'll need to have a server-side script (in PHP or something else) you can make an AJAX request to that Vue can parse and update.",1513985599.0
breakingcups,"If there's no part of the application that needs to run on the server (such as a database, or sending emails) then absolutely you can!",1513868518.0
wishinghand,"If you built your Vue site with the CLI, there’s a command called `npm run generate` you can run that will create a static `dist` folder. This folder can then be dropped into any hosting service’s folder that is exposed to requests coming from the internet. ",1513871414.0
somazx,"For sure, you can deploy to S3. Easy peasy.",1513870590.0
Sentiententity,"I too have wanted this, so I made it.

My company uses it, and it's gh-pages uses it too.

https://www.reddit.com/r/vuejs/comments/7ltf2q/a_vanillajs_loader_with_support_for_functional/?ref=share&ref_source=link",1514092050.0
Maklite,"The method can return the value

    methods: {
      tagColour (type) {
        if (type == 'Facility') {
          return 'is-danger'
        } else if (type == 'Process') {
          return 'is-info'
        } else if (type == 'CT') {
          return 'is-primary'
        } else {
          return 'is-dark'
        }
      }
    }

`<td><span  v-bind:class=""['tag', 'is-rounded', tagColour(item.Text3)]"">{{ item.Text3 }}</span></td>`",1513846626.0
barry_pederson,"Check out https://vuex.vuejs.org/en/forms.html - I recently used the technique at the bottom of the page ""Two-way Computed Property"" with a select input and it worked great.  Didn't need an action, just the mutation.",1513808957.0
the-hero-tata,"Other guy is right about using computed properties.

A note though, you don't need the action if you are just synchronously changing state. Call the commit directly.

You could map a mutation(or action) to a method, then you wouldn't need to write the method code.

You could map subsets to a computed prop to clean up template code.

Take a look at the vuex helpers. But the easiest is just the computed prop suggestion.",1513810828.0
,The only differences between MEAN and MEVN is your front end framework. Meaning all of your server infrastructure can stay the same.,1513786549.0
hackal,"This is how I do it for my ""pet"" projects

VPS at digitalocean.

Static (html/js/) served with nginx

Node/Express running locally using [forever](https://github.com/foreverjs/forever) on local port (for example 3000) + database if needed (mongo/postgresql/sqlite)

Use nginx as reverse proxy (lets say I want my api on api.example.com). This means that nginx is waiting for requests on api.example.com and forwards it to localhost:3000 where your node/express app is running. Response from express is sent back through nginx too.

Free SSL with letsencrypt

Deployment: Usualy using git (having copy of repository on server and use git pull to sync files, then restart forever)

You can easily use this method for hosting multiple apps however I do not recommend this for mission critical apps since this doesn't scale well, has no monitoring, no backup system in place and deployment is pretty much manual. I do this only for small apps.

If you don't know how to do anything from here I would recommend https://www.digitalocean.com/community/tutorials (even if you are not using DO for hosting).

",1513807137.0
N3KIO,"explain your process, what are you stuck on.

details my friend",1513784400.0
Bilal_Tech,"You said you have a few projects so you would definitely want to avoid Heroku and the like. I think they allow only 3 or 5 for free and is very restricted and slow. Go get yourself a nice cheap vps and use nginx as a reverse proxy. 

I use vultr on Debian, but use whatever you’re comfortable with. Here’s a referral link https://www.vultr.com/?ref=7291049

",1513865495.0
irphunky,Host it just as you would any static site? What are you struggling with?,1513780409.0
m0dernj3j3,,1513840827.0
Maxtream,Code snippet/gist would be helpful to understand it better,1513758091.0
hilmar8,"Could this issue be related to [reactivity](https://vuejs.org/v2/guide/reactivity.html)? Let's say you're doing the following.

    <div v-for=""user in users""><button @click=""loadAvatar(user)""></button>{{ user.avatar }}</div>

With an user array.

    [{id: 1}, {id: 2}]

And the loadAvatar function will create a new ""avatar"" key on the user.

    async loadAvatar(user) {
      user.avatar = await..
    }

Problem is, Vue isn't watching every single ""user"" object for new keys. So Vue has no idea something just happened and won't re-render. You'll have to tell Vue that there is a new element that it has to be watching.

    async loadAvatar(user) {
      const avatar = await..
      Vue.set(user, 'avatar', avatar);
    }

And reactivity should work.",1513772169.0
elijahww,"if you are doing something like this:

    <div v-for=""p in people""> 
        {{ getPesonImageUrl(p) }}
    </div>

then you'll have problems... at least it will execute more times than necessary.

In that case you just ""stub out"" the placeholders:

    data: function() {
      var people = [
         {url: '' // unknown now, but will be watched by Vue},
         {url: '' // unknown now, but will be watched by Vue},
       ];
      return {
        people: people
     }},
    mounted: function() {
       someService.fetchUserImages(function(data){
           this.people[0].url = data[0].url;
    }

and template would be:

    <div v-for=""p in people""> 
       {{ p.url }}
    </div>

PS. why can't i format this code right?",1513962630.0
bitbytebit42,"Was in the same position as you.  Tried Vue material and Vuetify. Eventually ended up sticking with Vuetify and now I love it! Version 1.0 is just around the corner. The documentation is OK at best but that should be soon to change. Runs pretty fast for me on mobile. PWA template is also available. 

My current stack is Netlify for (free Https!) hosting, Firebase for user authentication and storage, VueJs and Vuetify. Couldn't be happier. 

Here's a comparison of front end frameworks

https://alligator.io/vuejs/roundup-desktop-components/

And here's a comparison of Buefy Vs Vuetify

https://bayne.github.io/github-compare/#!/compare/vuetifyjs/vuetify/rafaelpimpa/buefy

OnsenUI is one to watch as well. At the moment the number of components is too low for me, but it may suit your needs.

",1513742007.0
nmarshall23,"Working on an experimental project to kick the tires on VueJs. I'm using Buefy, it's good, follows the logic of Bulma. Developer is active and keeping up with Bulma. 

I also really like Bulma, it feels logical and well thought out. I'm far more productive then I was with Bootstrap 3. 

Having said that both are rather minimal. Buefy doesn't add animations, there are hooks for them just none are provided. I also haven't looked deeply into adding animations.",1513760351.0
rocketchuck,"Buefy's quite nice, a just enough/minimal approach. If you know Bulma, you won't be cross-referencing the docs all the time, but it'll of course take time to get to know each. 

At first I thought I'd wish that Buefy had support for things like navbar, columns, and the other things that the Buefy docs simply link over to Bulma docs. But after working with it for a few months, I'm quite glad it doesn't offer these things. Bulma's got it covered; no need to reinvent. The separation is actually beneficial.

It was easy to pickup, once you get the gist of how it works. You'll be able to guess at component props and usually get them right.

I like Vuetify and Bootstrap-Vue, too, but they're much bigger. Buefy IMHO is easier to drop in and use where needed, rather than forcing me to use it for every last thing.",1513778501.0
Mr_Mandrill,"Thanks! I was waiting for someone to do this so I didn't have to do it myself (I haven't looked up if other vue-wp themes exist already, though). Are you planning on keeping it updated regularly?

Also, are there any difficulties I might not be considered before setting something like this up? I'm always a bit scared of using WP REST API for the whole content of a site.",1513739146.0
DOG-ZILLA,Does it handle dynamic wp menus / routes?,1513801037.0
yetinthedark,[localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) is an option!,1513727232.0
jemminger,Store if the animation has been seen in a cookie.  ,1513725554.0
BRBoer,"Use cookies. On page load, check if the cookie exists. If not, run the animation and add the cookie, otherwise don't run the animation. Sorry if that doesn't make sense, I don't know much about cookies (or Vue!)",1513725775.0
bobnid,Why not null?,1513719693.0
jgmcelwain,"If you're using `vue-router` but want stuff to be indexed/crawlable by Google, check out Server-Side Rendering - https://vuejs.org/v2/guide/ssr.html",1513704394.0
N3KIO,use NUXT js if you want easy SSR,1513713160.0
,[deleted],1513699207.0
LynusBorg,"It's mostly personal preference, but two things should be noted:

1 If you can use the `camelCase` variation depends in what environment you work:

* if you have templates directly embedded inside your HTML page, you can't use `camelCase` becaue HTML is case-insensitive, Hence by default, most examples in the docs use `kebab-case` - it also works directly in the browser.
* IF you use string templates / .vue files, you can use `camelCase` because the browser never gets to process the template.

Also, a note about the second version: `ùpdate:something` is used by the [`.sync` modifier](https://vuejs.org/v2/guide/components.html#sync-Modifier) for update events:

",1513687685.0
george-silva,"Scoped CSS is great, until it isn't.

You need to be very consistent with which rules you apply on the scoped CSS, otherwise you might need to track tons of components to see where the rules comes from.

So a primer: never put big layout rules in the components, just ui related (like color, specific padding and margins). A no example is the padding you need to apply to a page and might be reusable.

",1513675847.0
andrekliem,"I haven't used modules but to me scoped CSS is just CSS that is applied only to that component. Saves you from having to write long CSS class names or convoluted CSS specificity rules to be safe from affecting other components. 

CSS modules looks to have a bit more going on, like you can inject the CSS rules into the template as you would with Vue data properties. I'll have to try that one out, seems like it might lend itself well to a utility based approach to CSS usage. ",1513662394.0
impreson,"Hi guys, Hamok is our first webbased Desktop application which we build using VueJS & Electron. The boilerplate we've used can be found [here](https://github.com/SimulatedGREG/electron-vue). Hamok is now in BETA and can be downloaded for free during this time. It would be very much appreciated if you gave us feedback regarding features you miss or bugs you've encountered. If there are any questions regarding the development of the application I'm happy to answer them as well. Enjoy!",1513690026.0
DylonDylonDylon,That looks great. Would love to see what some of those components look like. Great work.,1513710627.0
Beardo01,Looks awesome team. Giving it a whirl now.,1513740388.0
andrekliem,"Nice! I'll add it to the next vuejsradar newsletter. Tweet @vuejsradar when updates are done, I like to showcase cool vuejs projects. Thanks ",1513662545.0
AmazeCPK,"This is such a cool idea. I love this game, and can't wait to try it out with my friends. Looking forward to checking out your blog series when I can set aside some time!",1513644591.0
francishero,"Thanks for this man, I will use the mobile ui as a starter for the project am working on! Looks cool",1513931459.0
andrekliem,"If you mean in terms of mutation types, I see it as a way of replicating Enums, it kind of gives you more type safety if your IDE is smart enough to hint... instead of typing strings which won't be caught by an IDE if the mutation type doesn't exist. Also, it's easier to manage the code, one source to reference.

",1513663155.0
Jiri2941,"Quoting Vuex docs: ""Whether to use constants is largely a preference - it can be helpful in large projects with many developers, but it's totally optional if you don't like them.""

https://vuex.vuejs.org/en/mutations.html#using-constants-for-mutation-types
",1513605561.0
N3KIO,"the reason I use it is becouse I don't want to load everything, I want to load what I want.

that is pretty much the simplest explanation 

export const xxx

export const xx

export const x

import { x, xx } from ''",1513629978.0
nothingduploading,const++,1513605711.0
Pedrock10,I would also like to know how it compares to NativeScript if someone has already tried both.,1513603192.0
hypercluster,"Generally it's a good idea and alternative to React Native however it's still far behind RN in terms of resources and community (English speaking that is) involvement. A lot of the discussion around it happens outside of the dev list etc (which was actually broad up recently by the apache team there) and mainly in Chinese. 

I tried building a basic app with it but it's quite the struggle still. 

Tooling is pretty good, but some things are confusing (web preview doesn't necessarily equal the native view, hot reload sometimes refreshed web view and sometimes playground app on device for mr, I think you have to scan the QR for the playground first and then QR of your app every time you want to debug?). Doesn't help that issues still aren't opened for the apache project and reside in the old repo where it's mainly Chinese again. 

Also for example there's no official navbar or header (though there used to be?) so things like that you have to style yourself according to the platform. And there's a router that pushes sites but you'll have to do some logic your own to figure out where the compiled JS is located (though I found a vue router implementation somewhere). Haven't seen a native implementation of navigation either. 

So yeah although I kinda like it (I mean, it's writing Vue for native and it works!) it feels like too much work to get things done. I hope it'll get a push and grow outside China because it clearly works for Alibaba (recently released a UI framework btw). 

About Cordova: difference certainly is that you get a native app. But because of the hurdles I mentioned I'm looking into Framework7/Onsen/Quasar. 

",1513633986.0
watMartin,go about what?,1513596498.0
Djbm,"You haven’t actually described what you are trying to achieve. Also “REST link” isn’t a common term.

I think you might be asking how to call a REST API from within a Vue app?

Vue doesn’t have an inbuilt HTTP client, but the library [axios](https://github.com/axios/axios) is commonly used.

There are lots of articles and tutorials on using Axios in Vue",1513597876.0
N3KIO,disable the submit button when user clicks it 1 time.,1513575266.0
Cyb3rWaste,"You can make the button a seperate vue component and use that everywhere,

That button component need to have a `isSubmitting`, and then on-click you can use the  `setTimeout(()=>{ this.isSumbitting = false}, 2000)` 

Hope this helps, if not i can build a more elaborate example.",1513757806.0
korylprince,"This is a great example of when a store (vuex) is perfect. I use this pattern to have a global `is_loading` state that can be used in components to disable buttons and end submit handlers early.

    import Vuex from ""vuex""
    const store = new Vuex.Store({
        state: {
            _loading_count: 0
        },
        getters: {
            is_loading(state) {
                return state._loading_count !== 0
            }
        },
        mutations: {
            START_LOADING(state) {
                state._loading_count++
            },
            STOP_LOADING(state) {
                state._loading_count--
            }
        },
        actions: {
            api_call(context, payload) {
                context.commit(""START_LOADING"")

                var promise = api.call(payload)

                promise.finally(() => {
                    context.commit(""STOP_LOADING"")
                })

                return promise
            }
        }
    })
",1514177710.0
nothingduploading,we should get vue to officially support a template for their CLI,1513543814.0
SupremeSpez,"By inappropriate do you mean inefficient? Possibly, just depends on how much code would go into these special tasks. If it's comparatively small to the main apps I'd say just keep them combined, but if it's large enough where you could call it an app all on its own then yeah, break it out if you think it would sprawl across your original app too much.

Personally I don't see any sense in managing multiple apps when one app could've just been extended. There needs to be a clear separation of concern to warrant it imo.",1513527882.0
JinSantosAndria,"It depends on how you version things. Your thing sounds like a main upstream repository and a lot of forks that could sport individual code, even to the backend and/or (docker) configuration. Backend and frontend should stay in the same repository from my perspective as they need to have the exact version and you can't just break backward compatibility by fixing something upstream without noticing. ",1513537202.0
nmarshall23,"I have a few questions does the special workflow as a limited audience? Does the workflow change each year? Does it happen on a regular schedule? Or is it done when it's needed?

If the workflow is regular schedule then you can schedule your maintenance and testing of the site before it's due to be active.
If the workflow has a limited audience then you can make the argument that keeping it separate is part of controlling who has access to it. 

My concern would be that a special web portal that no one touches might be affected by changes to the backend and tested less regularly than the code the larger portal. Think about the failure states, if that special workflow isn't working and unexpectedly they need it, someone's head might be rolling..

Also go **watch** people use the existing web portal, ask them if there are any pain points. There are probably things they would like to see changed that haven't been noticed.  
",1513762040.0
Decimalt,You did what? 😱😱😱😱,1513531946.0
fleaspoon,Nice job!,1513530366.0
doubleagent700,Remove the can...emoticons and you have my up-vote!,1513563654.0
igeligel,The cli was never based on webpack. It's the popular vue-webpack template which is built on webpack. It is one of the official templates but I think the team does not want to change the entire structure in this template. Since it is just dependent on the template someone can create a template based on parcel if it does not exist yet. The problem with that is that a third party developer will maintain it probably it is not officially supported and you do not know if bugs or similar will be fixed in future. ,1513503920.0
jaxondu,In what way is Parcel better than webpack?,1513539373.0
Djbm,"Based off what you have described:

 - You'd use a route parameter in vue-router so you can get the shortened ID for the image from the URL
 - You'd make an AJAX request to the database to get the full URL based off the ID
 - You'd then use Vue to render the image from the full URL",1513520505.0
Lndrc,"You're just creating <img> tags, right? If the <img> tag can take it as a ""src"" attribute, put the <img> tag in your Vue template. Maybe I'm over-simplifying, but truthfully, once you have an array of urls to display, just ""v-for"" across that array and generate some images?",1513500166.0
Hdandhf,"I'm not exactly sure if this is what you're looking for, but this might help: https://webpack.github.io/docs/webpack-dev-server.html#proxy",1513519314.0
SloppyStone,"You should put the font awesome dependency to the plugins folder and register it in the nuxt config. https://github.com/FortAwesome/vue-fontawesome/issues/14#issuecomment-351474573 
 
Let me know if you need more help. 
 
And you shouldn't edit anything in the .nuxt folder.",1513460383.0
N3KIO,"I was testing it, but every time I reloaded the page the icons are like super huge.

so I changed back to fontawesome4",1513468173.0
jeefsiebs,"Definitely!  Vuex is perfect for something like this.  When a player performs an activity, you'll run an action.  This action will send the information to the server, and when the server returns information you'll run a mutation to update the local state.  Similarly, when your websocket broadcasts an event, you can run a mutation to change the state.

So your local state is never adjusted directly by a player.  It is only mutated on server responses.  It keeps your front end all on the same page and updates itself based on your server broadcasts.  Your Vuex state is just how you keep track of your server's status.

While you could manage all the data you have using components (data is passed to child components using props, nested all the way down) Vuex makes it much easier to access data from wherever you need it. 

Here is a stackoverflow answer I wrote that talks about this process: https://stackoverflow.com/questions/38072302/structuring-a-vue-vuex-project/38074979#38074979",1513446436.0
vpz,"I think you may be confusing game state and Vue state.  Vuex manages the state used in the app.  I have a site that doesn't allow the user to update any data in my back-end but I still use Vuex and Axios to manage the app state.  The app state remembers things they've done and set in the app and makes sure that is consistently represented in all components of the app.

Vuex is just a tool to make managing the app state less error prone.  Even if your game engine is the real source of truth you would want the representation of that information to be consistent across all the components of your front-end app.  This is something Vuex can help you do.",1513470577.0
Hdandhf,"In my experience unless you're building a simple and static app with Vue, Vuex is basically the way to go.",1513519070.0
jeefsiebs,"Keeping different components in-sync can be done 2 ways.  

One, you have the parent component of your SPA keep the data, and pass it down as props.  When a child needs to update that data, you should broadcast an event that the parent is listening for, which updates the source of the data for everyone it is passed to.

Two, you could use Vuex.  It allows you to keep your data in a single place that all of your components pull from.  Components can run actions that update Vuex, so all of your components stay up to date.

Post code or more detail if you want more help!",1513447455.0
Lndrc,"I'm not sure I understand what you mean by ""does not inherit the attributes of."" Can you be more concrete?

One interpretation I have is that you have, say, a ""/help"" page that doesn't have like the same navigation bar at the top?

...I'm not sure what other interpretations I have. Not trying to be rude... can you be more clear about what you're asking?",1513499976.0
Maklite,Return the promise from userApi.addUser in the original addUser method (basically just return this line). Then in your test you can check the component state in the callback from this promise.,1513443230.0
,Does this animation have a static duration? If so you could just use a setTimeout on your animation trigger that sets the value back when it's done.,1513388672.0
ABadWomanDriver,"There’s @leave and (I believe) @afterleave events that you can use! I just dealt with this yesterday 

Edit: just checked, there’s v-on:after-leave. I believe this is what you want! Checkout the JavaScript hooks section https://vuejs.org/v2/guide/transitions.html",1513402776.0
AmishPanda00,"I might be wrong but I think you need a global event bus or Vuex. 

Because you're going to have the list component(s) state initiated based on the Submit button action and pass the keywords as a param you need a way for all thee things to talk to each other. 

It's fine if each component holds certain values as data  but orchestrating all these actions requires a globally available communication method. 

Thus setting up a channel to broadcast and receive messages OR setting up a Vuex store to manage state mutations is the only sane way to go. Otherwise you could go down a rabbit hole of implementing half baked state management with props and deeply nested components. 

Some helpful links:
http://vuetips.com/global-event-bus
https://vuex.vuejs.org/en/intro.html

I have some examples to assist setting up a bus and I can link the repos if you want. I had a similar situation where I needed to communicate that X had in component A to component B. ",1514146340.0
,"Have you added a key to your component on the right? By adding a key you force the component to rerender when that key gets updated.

So wherever you have the component in your template you'll have to add a unique key. Firstname + lastname should be good enough.

    <app-congress-person-info :person=""person"" :key=""person.firtname + person.lastName""></app-congress-person-info>",1513357548.0
waitingonmyclone,"Seems to be working for me (Chrome). Also, the Vue.js Chrome extension says it's not detecting Vue. Is this a different version of the page?",1513360887.0
jeefsiebs,"I love the way Laravel and Vue work together.  The Laravel guys make it so easy, even shipping Vue with Laravel now.  And with both Laravel and Vue using REST practices, you can build resources and endpoints in seconds.",1513447257.0
thisisnousername,"I'm developing stuff in the web for 20 years now and try to keep up constantly with all the new stuff. A year ago, when we started to work on a bigger project, we decided to use a modern (but not the newest) tech stack and we are really happy by now.

While developing all this stuff, we faced a lot of challenges these typical ""this is how you build a todo list in angureactvuemberbone in 5 minutes"" tutorials don't tackle. 

We prepared a few articles with our experiences on a bigger project. If you're interested, leave a clap. :)",1513436792.0
22spacedout,"you will need to build a REST api server using something like php Laravel or node Express. Your vue app will make http calls to the server, the server talks to your mysql db and returns data. Just google 'build rest api with express and mysql' and you will find a bunch of tutorials showing you how.
You can then use something like Axios to make http calls to the api from your vue app.",1513342084.0
OmegaVesko,"You don't connect to your database directly from the client. You need a backend server (written in Node, or PHP, or whatever) that actually communicates with your database and performs your other business logic, and then you'll have an API the client is going to use to talk to the backend.",1513342425.0
vpz,"I recently built a new project with VueJS and at first this confused me too.

In the end you will have 

* Database
* REST API
* Webserver
* VueJS application

For me this was 

* PostgreSQL
* PostgREST
* Nginx
* VueJS webpack template + Vuex and Axios


In Development you generally don't need the Webserver component because you can use the built-in VueJS webserver and the REST API directly.  In Production you will build your VueJS application files with ""npm run build"", and then serve them with your Webserver, and you will use a reverse proxy configuration in the Webserver to front-end your REST API.

So from a website user perspective they will make a call to your website, your webserver will serve that request from the server root to deliver the app to their browser (give them the JS files, content, etc).  Their browser will run the app including your Axios calls which will communicate over the internet to the REST API which will hit your reverse proxy on the webserver to send the request to the REST API which will then interact with your database.

Here is an example article on a REST API with MySQL that I found on Google:
https://www.js-tutorials.com/javascript-tutorial/node-js-restify-example-using-mysql/

You can see in this case it uses Express for the REST API server.  Your front-end webserver (the one that will serve your built VueJS files) will reverse proxy this Express server.

So say https://mywebsite.com/index.html will server <webroot>/index.html while https://mywebsite.com/api/employees will reverse proxy that request to your server's REST API at http://localhost:3001/employees to make the call.

",1513357160.0
garfonzo,"I used `localStorage` to set a few items like the user's authentication token. Why can't you just do something like `localStorage.setItem('womenOnly', 'true')` (using your example). Then when you hit refresh on your page, you do `localStorage.getItem('womenOnly')`? Is that not working?",1513343409.0
inhalingsounds,"I am on mobile now so sorry if the answer isn't good enough.

I've had some issues with comparing checkbox values in Vue as well, and from the top of my head I think the value was being stored as 1/0 as string, so when comparing it with true false boolean states things didn't work. Maybe this will help.",1513339587.0
,"I'm not completely sure, but AFAIK localStorage only store strings.

What you could do is: 

- create a string representation of the state

localStorage.set('initial-state', JSON.stringify(this.data))

- and, in the created(), fetch the state like this

let state = JSON.parse(localStorage.get('initial-state'))

- then you'll have the women_only as a boolean

this.women_only = state.women.only",1513344038.0
jgmcelwain,You always have the option of using `JSON.stringify`/`JSON.parse` with `localStorage`: https://jsfiddle.net/v075h6qL/6/,1513350057.0
DOG-ZILLA,"You probably need to use JSON.parse() on the data back from localStorage to get it into the correct ‘type’. 

Cookies and local / session storage will store data as strings, not JavaScript data types. ",1513351161.0
aboustayyef,"Hey guys, thank you for help... Happy to report that I have solved the issue (in my app, didn't update the fiddle). It turns out that it's all about the data types and local storage's inability to store true and false values without converting them to strings.",1513360997.0
poop_taking_forever,"[vue-router docs](https://router.vuejs.org/en/essentials/dynamic-matching.html#advanced-matching-patterns) state:

> vue-router uses path-to-regexp as its path matching engine, so it supports many advanced matching patterns such as optional dynamic segments, zero or more / one or more requirements, and even custom regex patterns.

Clicking through to the [path-to-regexp docs](https://github.com/pillarjs/path-to-regexp#parameter-modifiers) explains:

> Parameters can be suffixed with a question mark (?) to make the parameter optional.

So, this will give you your optional parameter:

    path: '/offers/:member?'",1513316950.0
AmishPanda00,"Hmm if you say you have 19 errors you may have setup the project incorrectly.

I see a couple other signs that you may have not setup Vue-form-wizard incorrectly.

* [I searched for the error you included in the](https://github.com/cristijora/vue-form-wizard/search?utf8=%E2%9C%93&q=addtab&type=).  Looks like the 'addTab' can't be found because your project doesn't know how to get there.

* When I checked out how to register components I noticed you called Vue.use() twice.  Checkout how they register the components in the [example](http://vuejs.creative-tim.com/vue-form-wizard/#/?id=component-registration).  You call   Vue.use(VueFormWizard) in both app.js and NewInstall.vue.

* This is kinda related to my above comment but it looks like you don't actually register the components.  Maybe I missed it?  Kinda late so I apologize if I did.  But we should see the components you're using [somewhere](https://vuejs.org/v2/guide/components.html#Local-Registration).

Check it:
components: {
  FormWizard,
  TabContent
}",1513314824.0
ckdownset13,"With relatively limited experience, I'm inclined to say that you're thinking about your project's structure incorrectly.  Our app has 20+ namespaced* modules in the store and none of them need to communicate between each other.  However, that doesn't mean there might not arise a case where it makes sense to do so - we just haven't run into it yet.

Do you have a use-case in mind where this may seem necessary?",1513293669.0
AmishPanda00,"Something smells wrong. I'm not entirely sure what. I think I see what you want to do and I feel like there's a cleaner way to do it. 

Could you drive what a module is?  Just for clarity?

I re-read the 'one way data flow' section just to be sure. But is this an issue with structure like someone else said?
https://vuejs.org/v2/guide/components.html#One-Way-Data-Flow",1513355423.0
JakeCoble,"I think at least part of my problem boils down to the fact that you can't have namespaced *mutations* but global *actions*. Either you run the risk of naming collisions in modules (which defeats the purpose of having object properties in the first place), or you can't have modules respond to global actions. You've got to write additional glue code if you want multiple namespaced modules to update their state based on certain events.",1513315849.0
stdiopt,https://github.com/vue-hxs/vue-split-layout,1513266214.0
oosthuizenb,Looks awesome!,1513267359.0
Aerosphere24,"I'm not the most experienced Vue developer either, but..

I usually dispatch an action on a view's created or mounted lifecycle event. And that action checks if data needs to be fetched/refreshed.

My getters only return (filtered) data and have no other functionality.",1513249355.0
DOG-ZILLA,"I suppose the way I would do it is to have the getter do that one thing. Get data. 

I would do the logic of deciding whether or not to check the store etc in the component. 

But neither idea is bad. You could have another getter in Vuex that calls another getter etc and do it all from there. ",1513249175.0
BrianBoyko,"I don't think it's the *worst pattern in the world* but I wouldn't do this, for a couple of reasons. 

First, I really think that getters operate best as pure functions which perform read-only operations on an existing state.  What you're describing to me is that you're having a getter that (through the API call), *mutates the state.* That's really not the job of the getter - that's the job of an action/mutator pair.  

Instead of asking ""should you do this,"" I think the better question to ask is ""Is there a better way to do this?"" 

And I think there is, in this case.  

Instead of calling a getter with ""start"" and ""size"" as parameters, store them both in the Vuex store, and then when those values change, (via an action) check to see if the values are in the cache, and if they're not, run the API call.  

So it would be something like this: 
    
    const initialState = {
      results: {}, // results is an object with integers for keys
      size: 0,
      start: 0,
    }

    const localGetters = {
      // get the values that state and size say we should get. 
      values: state => Object.keys(state.results)
        .filter(key => (key >= state.start) && (key < (state.start + state.size)))
        .map(key => state.results[key]),
      results: state => state.results;
    }

    const actions = {
      someApiCall: ({commit}, values) => new Promise((resolve, reject) => {
        makeCall(values)
          .then((response) =>
            commit(types.ADD_RESPONSES_TO_RESULTS, response.data); 
            resolve();
          )
          .catch(e => reject(e))
      }),
      changePagination: ({ commit, dispatch, getters }, size, start) => new Promise((resolve, reject) => {
        // just here to be DRY
        const end = () => {
          commit(types.CHANGE_PAGINATION, { size, start })
          resolve();
        };

        const results = getters.results;
        // list all the keys you need. 
        const requestedKeys = new Array(size)
          .map((x, i) => start + i) 
         // list all the keys you don't have yet. 
        const requiredKeys = requestedKeys.filter(key => !results[key])
         // if you need more keys, get them; 
        if (requiredKeys.length) {
          dispatch('someAPICall', requiredKeys)
            .then(end)
            .catch(e => reject(e))
        } else { // if you don't, just change the pagination. 
          end();
        }
      })
    }

    const mutations = {
      [types.CHANGE_PAGINATION](state, { size, start }) {
        state.size = size;
        state.start = start;
      }
      [types.ADD_RESPONSES_TO_RESULTS](state, responses) {
        Object.assign(state.results, responses);
      }
    }
    

    export default = {
      state: initialState,
      getters: localGetters,
      actions,
      mutations,
    }

This way, calling the ""changePagination"" action will either just change the pagination if you already have the data, or make the call for you THEN change the pagination.  ",1513263822.0
3lpsy,"Call an action instead.

let pagination = this.$store.dispatch('getPagination')

In the action do the following:

1) call getter

2) if there is no data, call API, and update state

3) recall getter and return data",1513267079.0
crimaniak,"Caching getter is o.k. in common, but in this case, if used API is asynchronous, you can't return the dataset from getter, but only promise. For caching case, I'd make the reactive array for data and reflect a range from this array to interface. When the user changes the page, the handler is called which tests new array for the presence of data and make the API call if data is absent. Data returned, inserted into the array and reflected in the interface. 
Also, I hope that you have thought through the problem of expired data well.",1513255576.0
JinSantosAndria,"It's not the responsibility of a getter the check for cache hydration or stale invalidation. That's what actions are for. Action looks at state, decides to call backend and commit into state. Meanwhile return a promise to indicate something to the frontend. Also having the page open on a mobile device and reopening the same page with the state still in place three days later is not a good idea. ",1513270822.0
flyingmeteor,"Make them all separate components. If they share a lot of the same JavaScript, create a mixin. If they share a lot of CSS, use an @import with LessCSS.",1513248112.0
Raenix,"https://github.com/bpampuch/pdfmake

Datatables uses this library to generate pdfs. I haven't used it directly but it may be what you are looking for.",1513226103.0
pzl,"> just printing it, but it's obviously not ideal since the styling goes all weird.

You can have dedicated print styles, you know. `@media print { ...`

If you wanted to stick with jsPDF, you could extract some of the 'line by line'-ness into computed properties or render functions calling the jsPDF API for each component",1513203660.0
kkogovsek,"have you tried media queries fir printing? so you can just add button for printing but already have styles there?
ex. https://joshuawinn.com/css-print-media-query/",1513203690.0
higherlogic,"Only thin I could really find was this:

https://www.google.com/amp/s/scotch.io/amp/@nagasaiaytha/generate-pdf-from-html-using-jquery-and-jspdf

Unfortunately it looks like you’ll have to bring jQuery to the party.",1513206392.0
RhanCandia,If you have a backend you might want to look at wkhtmltopdf. If you're okay with letting the backend take care of generating the PDF.,1513230105.0
kkogovsek,is it maby something in settings for printing?,1513233104.0
of_adam,"Yes, I work on an enterprise healthcare app in Vue and we use pdfmake to generate audiograms and hearing aid order PDFs ",1513243322.0
dballz12,"I found [this blog](https://blog.jayway.com/2017/07/13/open-pdf-downloaded-api-javascript/) after a little research. I was stuck on this for a bit, too. This seems to work (note: not all the way tested in all browsers. Edge seems to wanna save it...still working on that). I altered the code a little bit and you might have to change the spacing, cuz...ya know. See below:

    const showPDF = (function () {
       return function (blob, fileName) {
         var newBlob = new Blob([blob], {type: 'application/pdf'})
         if (window.navigator && window.navigator.msSaveOrOpenBlob) {
         window.navigator.msSaveOrOpenBlob(newBlob)
         return
         }
         const data = window.URL.createObjectURL(newBlob)
         var link = document.createElement('a')
         link.href = data
         link.click()
         window.open(data)
         setTimeout(function () {
           document.body.removeChild(link)
           window.URL.revokeObjectURL(data)
           100
           })
        }
    }())",1516368067.0
elijahww,"I'll be watching what you end up doing about: 
    (this as any)",1513260181.0
DOG-ZILLA,"How can 4,300 people never hear of using ‘no framework’? ",1513174788.0
grussvomkrampus,"If I'm understanding right you could do something like this:
https://codepen.io/anon/pen/xpxNoz

Hopefully this will get you going in the right direction.

edit: removed some unnecessary help that didn't particularly pertain to the question. Since you'll mostly just need `table` markup.  Also…too soon after work for me, so I didn't use tables in the example. Didn't want to mess w/ those. Instead mostly showed how you can nest w/ `v-for`.",1513130817.0
rudemanbilly,"screw it, I am using Jest.",1513115118.0
Downvotes-All-Memes,Listened to her on a JavaScript podcast. Really great speaker with an incredible grasp of all things animation. ,1513109829.0
superdave42,"I was impressed with her on the software engineering daily podcast.  Also this is her website:

https://sarahdrasnerdesign.com",1513121249.0
eindbaas,Does she address how to setup transitions for nested components where for example parents have to wait for children to complete their transition-out animations?,1513158763.0
smartapant,"Hi guys!

We've finally launched this (as we think) nice collection of html/css spinners and I hope you'll find it useful :)",1513086786.0
Chamberford,Very nice! Thanks for sharing. ,1513116438.0
Mypupsup,the demo site doesnt work,1513125888.0
ignisphaseone,"Isn't this just ""vuex-persistedstate"" but set the same key for both instances?

Unless you're actually serving both apps from different urls, so the browser wouldn't let you access two different localstorages, upon which you'd want a server-side storage of some kind.",1513368044.0
awesme,"If I am understanding you properly I think you'd want to utilize something like socket.io to persist your changes from client -> server -> clients. You're going for a realtime product list of some sort shared between different visitors right?

Maybe check out the demos on this repo - https://github.com/MetinSeylan/Vue-Socket.io",1513058789.0
rashaza,"Just started going SSR in one of our existing projects, mainly using ssr.vuejs.org as a reference. This looks like a really good concise summary of whats on there.

Has anyone got any patterns or tips on dealing with ""import"" statements for libraries that use things like ""window"" and ""document"" ? I've seen the use of if (process.browser) but that doesnt allow you to conditionally include a module.",1513003882.0
uNki23,If I'm interested in SSR should I just use Nuxt?,1513084860.0
kevinleedrum,"I had the same problem recently, and I inlined the svg code within the component to make it work.",1512951791.0
irphunky,"I've not kept this maintained but these should give you and idea how I approached it;

https://www.npmjs.com/package/v-svg
https://www.npmjs.com/package/vue-svg-directive",1512976460.0
oldbrows,"D3 can help you manipulate the SVGs. I just did a small project for my girlfriend, and this was the outcome. Might give you some ideas: https://github.com/adrichey/vue-timer

Also: https://d3js.org",1512955445.0
DecadeMoon,"Your SVG spritesheet needs to be inlined into the document, typically just inside the `<body>` tag. Your component looks correct to me, but you might need to check how you're loading SVGs because the `import` probably doesn't inline the SVG into the document.",1513053579.0
NuttingFerociously,"Damn, now that would've fucked me up for a while trying to find the issue",1512973871.0
B1onicSeahorse,"I know this is late, but thanks a bunch for posting this. Saved so much headache. ",1526633139.0
tcitworld,"Nice. Would it be overkill to load translation string from objects (instead of your dot notation system)  ?
What about pluralization ?",1512949623.0
BrianBoyko,"If you see an improvement, or a bug, you can fork the project on github, fix the bug/make the improvement, and submit a pull request for it.  That's how you contribute. 

As for creating a project like Vue.js, you absolutely can.  The problem isn't raw talent, or even knowledge.  Just by developing every day, reading up on new/new-to-you computer science techniques, and the like, you can become a better programmer, and more able to do things quickly. 

I am absolutely certain you could recreate Vue.js if it dissapeared off the face of the earth tomorrow.  It *might take you five years*, but it's doable. 

Here's a better question: Instead of looking at a project like Vue.js and saying: ""How do I do something that big?"", look at a project you've done and say, ""How do I take on a project slightly bigger.  We all grow as engineers by pushing at the edges of our comfort zone.  We're engineers, not just because we know how to do things but we know how to approach the problems we don't yet know how to do.  

So yes, you can re-create Vue.  But it might be better to start with something just outside of your reach and build it into something as great as Vue.",1512888158.0
andrekliem,"I personally think you would want to have a lot of experience working on a similar open source project before you took this on. Evan came from google, had experience with Angular and is kind of what inspired Vue (you should lookup the interviews on Evan you)... this is my own interpretation from memory but I believe he built Vue partly as an experiment but also to make a library that was really lightweight and easy to use.  

I do believe that one takeaway I have is focus on a really good API coupled with excellent documentation. I believe that Evans design background is why Vue is such s pleasure to work with... it just feels like a well design framework or lib with a clear vision. ",1512889864.0
vagol942,"I think the first step would be to answer a question that every frontend developer should be somewhat competent to answer: How does a web browser works?

You know, the web browser, that thing webapps run on top of. I personally believe that every webdeveloper should at least be familiar with the rendering pipeline of a web browser.

That would lead you to the concept of the DOM tree, which is the way we interface with web browser, for the most part. If you understand the core concept of how the DOM tree works, what data structure it represents, and how to interact with it via JS, I think you have basically everything you need to create a framework like VueJS 1.

In the end Vue is about programatically putting and removing stuff from the DOM tree.",1512921830.0
N3KIO,"It's something your born with, that's what I think. ",1512934291.0
pzl,"Was alright. Would have liked more explanation as to why you should use actions when there are only simple mutations to reach for (or mention that actions can be async, mutations can/should not be). 

Also /u/tempusx, please try and contribute to reddit in some way other than just misleadingly posting your own site",1512935183.0
aromines,"To use vue, all you really need is 

   1. The vue library itself (probably included as a <script> tag like

        <script src=""https://cdn.jsdelivr.net/npm/vue""></script>    
   2. An element in your markup (html) that vue can operate on

        <div id=""app"">
          <p>{{ message }}</p>
        </div> 

   
   3. JavaScript that 'instantiates' a vue app on this element
    
        var app = new Vue({
          el: '#app',
          data: {
            message: 'Hello Vue!'
          }
        })
        

  
You would write .vue files (instead of plain old JS and html) if you want to use webpack (and something called 'vue-loader'). As /u/FunkDaddy said, these tools let you 'bundle' code together and transform it from files that are optimized for development to files that are optimized for serving in a web browser.

I would play around with vue without webpack first. [This JSFiddle](https://jsfiddle.net/chrisvfritz/50wL7mdz/) has all you need to get started, and you could pretty easily replicate this with a single html file and a single JS file on your local machine.",1512759372.0
FunkDaddy,You would use .vue files if you have a build tool which generates your web app files. This is a simple webpack setup example: https://github.com/vuejs/vue-loader,1512758376.0
boozahol,"https://laracasts.com/series/learn-vue-2-step-by-step is good tutorial imo.

those are the right files plus one html file ([example](https://github.com/vuejs-templates/webpack-simple/blob/master/template/index.html)). you'll need webpack or something to work with .vue files.  You can use [vue-cli](https://github.com/vuejs/vue-cli) to get a project started.

it's likely your only .js file is a bootstrapper that imports vue and creates the root vue instance. ([example](https://github.com/vuejs-templates/webpack-simple/blob/master/template/src/main.js))

You could use vue for most components in that landing page (sign up form, features icons, what people are saying, etc.) as practice and ignore the dynamic aspect.

You could add some sort of success animation in vue after email signup for practice with state or click behavior somewhere.
",1512758629.0
bogas04,"First of all, Vue [docs](https://vuejs.org/v2/guide/#Getting-Started) are amazing and cover this in detail.

Coming to your question, if you aren't okay using a [CLI](https://vuejs.org/v2/guide/installation.html#CLI) tool that converts your .Vue file into HTML/CSS/JS, then you can simply use what you're used to, i.e. JS and CSS files. This is actually recommended for beginners as per Vue community.",1512758632.0
N3KIO,"All you need is vue, read docs and you can build a static site",1512768143.0
cha55son,"We're using TS/HTML/STYL to build our components. We are bundling with webpack and we're not using any special loaders (at-loader, html-loader, styl-loader). Here's an example component:

	import Vue from 'vue';
	import Component from 'vue-class-component';

	import template from './page-body.html';
	import './page-body.styl';

	@Component({ template })
	export default class PageBody extends Vue {
	  ...
	}

and our file structure looks like this:

    components/
        page-body/
            page-body.html
            page-body.styl
            page-body.ts",1512764977.0
Grafikart,"I love VueJS but I hate working with **.vue** since it creates lots of problem with linters and editors (vuejs ""forces"" you to use **.vue** to achieve Hot Reload and to convert template into virtual dom).

I created this loader to go around these 2 problems while working with pure **.ts** files. 
I guess we could achieve the same result with pure **.js** (I didn't worked on that since I'm not using .js anymore) but if you are interested I could add more features to this loader. 

Am I the only one bothered by the **.vue** format ?",1512741139.0
wishinghand,What about a section for CSS/styling?,1512776594.0
DukeBerith,"I think the misunderstanding here is how you've interpreted computed **properties**. They're automatically called by Vue when needed, and they shouldn't be modifying state at all (no side effects!). Think of a computed property as something you can deduce from a dataset, for example if you a list of numbers, you can figure out which one is the highest and which one is lowest because you have some data to work on. 

Vue works out the value of the property based on the function you make to call it. 

In your example, `computedarray` is the function, and in your HTML you're not referencing it anywhere, you're trying to manipulate some data and have that data returned.


I forked your fiddle and changed some things around https://jsfiddle.net/e1uyewnv/2/

Notice how now the only array that exists in the state is the one in your `data`, and the new `array`,`minIndex`,`maxIndex` all live in the function since we only need them when we're computing it. In the HTML I am using the `computed_array`.

If it doesn't make that much sense, I highly suggest going through the official documentation and following their examples before trying them on yours.",1512724117.0
nickbreaton,I feel like the name might discourage some women developers from joining. ,1512735661.0
ForSpareParts,"A GUI framework should get you a consistent and professional look and feel without your having to think too hard about CSS. If you're not a UI/UX professional, that can be a real benefit -- just the ability to build a prototype and show it to someone else and have it not look embarrassing.

It's a tradeoff, though -- if you end up wanting something that does not exist in your framework of choice you'll have to hack it together. If you have a lot of UI/UX ideas and a really specific look and feel you want, you'll probably end up doing so much work to bend the framework into the shape you want that it's not worth it to use one at all. ",1512692899.0
cyanydeez,check out quasar framework for a very well developed gui,1512698865.0
nmarshall23,I use [named views](https://router.vuejs.org/en/essentials/named-views.html) for  these components shared by pages.,1512680186.0
irphunky,"I utilise vue-router meta to define a layout for each route and then include that component within my app.vue

Works pretty well, but anything else uses layout state.",1512676944.0
eindbaas,"What difficulties are you running into exactly? You can just listen to route changes in a component so it can decide if it should render itself (or certain children).

To keep it orderly, you can also add stuff to a route's metadata (hasFooter, showSidebar).",1512740007.0
pandemi,Don't use arrow functions in methods. I am not sure what your exact issue is but it looks like you will not have correct this in the method.,1512665364.0
horses_arent_friends,"It seems like you are the creator of fish-ui; don't be discouraged by the downvotes - it's happening because [someone posted a link to your work yesterday](https://www.reddit.com/r/vuejs/comments/7i7c09/fishui_a_vuejs_20_ui_toolkit_for_web/) which is still visible on this subreddit's front page.

Thanks for sharing your hard work! It has to take a lot of time and effort to make a UI toolkit of this size",1512675197.0
vpz,This looks really nice.  Kudos.,1512684096.0
horses_arent_friends,"A lot of the larger frameworks have their own datagrid offerings. If you have a webpack setup, importing individual components should help keep the weight down.

* [n3](https://n3-components.github.io/N3-components/component_en.html#n3DataTableDocs):  filtering, pagination, 
 selection, sorting, toggleable column controls
* [element-ui](http://element.eleme.io/#/en-US/component/table): filtering, selecting, sorting (IMO your best option since it has two nice out-of-the-box way of displaying many columns, especially if you have certain columns you want to be always visible)


[There is also this standalone component](https://lucienlee.github.io/vue-data-grid/), but it's at Vue 2.1 and the author hasn't been responding to issues.

",1512678256.0
anticucho,ag-grid free version has suited our needs. I have it working with Vuetify as their grid was a bit too limited and lacked inline editing. ag-grid has VueJS integration. It's pretty straight forward.,1513030854.0
zeroskillz,Looks awesome. Only suggestion would be to make the footer fluid. Keep up the good work!,1512849694.0
neverovatan,"Well, it pretty much depends on what kind of app you want to create. Never heard of Quasar to be honest, but using Laravel or Lumen as a backend can be useful if you know your way around APIs. Also, node.js is amazing if you need fast app and you posses extensive knowledge in this area. ",1512643532.0
kapowza681,I’ve used Quasar and Vuetify. If you’re going with an SPA or want to create Cordova or Electron apps Quasar is amazing. ,1512673262.0
vpz,"IMO there is no ""best"" UI framework or back-end for Vue.  They all have different pros and cons.

The front-end UI projects I hear the most about with Vue are Vuetify for Material, bootstrap-vue for Bootstrap, Buefy for Bulma, and Quasar for hybrid/Electron apps.  Others I hear a bit less frequently but still seem somewhat popular are element-ui, at-ui, and iview-ui.

For the back-end Vue doesn't care. The most popular method is to use ""whatever"" to create a REST back-end API for your Vue app to consume.  Then use Axios in your Vue app (often with Vuex) to interact with that REST API.  

There are a ton of different ways to build that REST back-end API.  Python Flask/Django, PHP Laravel, Node Hapi/Express/etc., Go, etc.  There are even ""out of the box"" API solutions for different databases like PostgreSQL and PostgREST or PostgreSQL and PostGraphQL.  There are really too many ways to build the back-end API to list.
",1512683734.0
rajmagar,u can use iview/ element ui with vue. currently i am using iview for gui!,1512705798.0
benabus,"I use Quasar, but prefer bootstrap for the UI.  ",1512746197.0
jaxondu,"I will go for ElementUI & Vuetify for web. ElemenUI is widely used in China. For mobile apps with native look for Android & iOS: OnsenUI & Quasar. I find Onsen more polished and feel faster, probably there is a team and company behind, where Quasar is one guy. ",1512937416.0
tiberiousr,"Use what works for you. I fucking despise nodejs but I need it to run webpack on my vue projects. I write my server side code in Golang because it's fast, efficient and results in good readable code that's easy to maintain. 

Fuck nodejs.",1512647954.0
nightman,I use http://element.eleme.io/#/en-US and it's pretty good,1512659079.0
FireWetterIntubator,"I ran into a similar issue, and instead of posting all at the same time with a promise loop, when a user uploaded a picture, it did a post for the file immediately, and then returned the reference data needed for the profile submission. I disabled the submit button until I had a successful returned post. I have not used firebase, so I am unsure how relationships work with file references on other data submissions, but this took a lot of the headache out from what I was trying to accomplish. I use drupal as my backend, so if a user uploads the wrong picture, and that picture never gets referenced in the data, it is automatically deleted after a certain time period. ",1512666271.0
jcampbelly,"You can pretty much just stop doing all of the following things:

- rendering html strings manually or with a templating tool
- loading, compiling, and caching templates
- creating dom elements or fragments by hand
- binding event handlers
- cleaning up event handlers when you are done with the view.
- directly managing view lifecycles (and handling nested views cleanly)
- putting ids or classes on elements just to be able to query them
- caching references to dom nodes so you don't have to query them all the time
- re-cache dom references when templates are re-rendered
- dynamically manipulating elements, attributes, or text nodes
- keeping track of changes to data.
- updating entire views because it's too hard to diff new state against the dom to do partial updates.
- escaping content for dom injection (still recognize security concerns).

Instead of those things, you define views with simple syntax that binds data where it is used, update the data whenever you want, and allow Vue to do the tedious stuff. The hard part is up-front tooling and the learning curve. After that, you just stop doing all of those things except in rare circumstances.

I used to think those things were unavoidable. Boilerplate stuff. Standard fare for a sufficiently advanced app. They just don't come up anymore. They're just classes of code I stopped having to write.",1512627472.0
wilkesreid,"I don't think one can demand an answer as cut and dry as ""it solves X"". Vue is one tool among many meant to assist in accomplishing the thing many of us are trying to do: make good, organized, dynamic web pages quickly, easily, and stably.

It's like asking ""Why would I eat bananas? What problem do they solve? Why eat bananas when I can just take vitamin pills?"" The answer IMO is you can eat whatever you want as long as it's sufficiently nutritious and you enjoy it.",1512622384.0
booooomba,One example: Does your JS library provide a Virtual DOM? Are you aware of the benefits of a Virtual DOM?,1512595502.0
yetinthedark,"When building web applications (not typical websites, usually), an application’s state can become difficult to manage the larger and more complicated it gets. 

You can have huge amounts of data that is constantly being altered by users’ input, and being able to organise the flow of the application and also having to write all the controls to allow this level of functionality can become tedious without a framework like Vue. 
",1512604475.0
vpz,"I'm a beginner with web programming so take this as you will.  To me one moves to a framework like VueJS/React/Angular when the need arises.  If you mostly make static sites with limited user interaction, data interaction (like outside APIs or APIs to backend databases), state management, etc. then you can just write your standard html/css/js stuff as you mentioned and be fine.

When the application starts doing more of those things it becomes more difficult to do them without a framework - it can still be done but becomes more tedious and potentially error prone.  Then something like VueJS can become helpful because with something like Vue you no longer need JQuery, interactive websites become simpler to code, interacting with API's becomes simple by adding Axios, managing state becomes simple with Vuex, etc.

Knowing Vue gives you another tool in your toolbox for when you want or need to use it.  You don't always need a torque wrench but it has a nice additional feature that sometimes is needed for specific work.",1512629050.0
Balduracuir,"Any main framework has the benefice that some people know it. So in an interview, if the candidate asks about your stack and you answer with ""my own framework"", some people may want to run. And it is also easier to integrate people when they already learn your lib elsewhere.
It may not be a problem for you but I really think developers' joy should be taken seriously as here a lot of companies have like 20% turnover",1512633553.0
syropian,Kinda just seems like an ElementUI skin.,1512592958.0
Jazoom,"Wow. This site is waaaay faster than these framework sites usually are. Even on mobile. But, it's not responsive.",1512594960.0
,[deleted],1512558045.0
,"It depends how your build process is configured.

So... you're using webpack, which takes the files you write as your develop your project, and turns them into static code that can be run in the browser.

I'm working on a project where webpack is configured to output its files to a folder called /static .

Inside THAT folder is the index.html... as well as folders for assets like CSS and JS, that I need to deploy/upload to where it's eventually hosted

So... when I'm developing in Vue, I use npm run dev - which spins up a webserver in Node.js that can serve content from the .vue files I'm working on (I think?) .... and when I use npm run build, it builds in the /static folder... and I guess you might be able to make nginx serve from that folder?",1512564650.0
vpz,"I use the webpack template and when you run ""npm run build"" it creates an index.html file and a static folder inside of the dist folder.  The static folder has all the images, css, js, etc files in it and the index.html is built with all the appropriate links.  So you just copy the contents of the dist folder to the web root of your Nginx setup and you are done with that part.",1512699344.0
jgmcelwain,"Without seeing the code, it sounds like your app is configured like this:

    const router = new VueRouter({
      mode: 'history',
      ...
    })

In that case, take a look at this repo for some instructions on getting SPA applications working on GH pages: https://github.com/rafrex/spa-github-pages. Essentially you use the 404 page to ""redirect"" the user to the SPA.",1512552618.0
zonq,"I thought about posting a thread like this just yesterday, but didn't, after I remembered this link from my favs:

https://github.com/vuejs/awesome-vue

I don't think it contains *everything* but it'll keep you busy for a while :)",1512553814.0
Heyokalol,"I think SSR, Nuxt and testing Vue components are all good candidates for you.",1512561319.0
CristiJ,"- Testing with test utils
- Vuex module organization and plugins (persisted state, router sync etc)
- Element/iview
- Internationalization plugins
- Vuetify
- Quasar (mobile)
- Validation library (VeeValidate, Vuelidate)
- Third party components that you might need (Google maps, charting)

",1512561661.0
bathyscaaf,GraphQL + Apollo Client 2.0,1512617023.0
of_adam,Vuex,1512570171.0
lyons4231,"I prefer using Typescript along with Vue single file components. This allows you to add all the benefits of types, but also much more with extensible classes, shortcuts for es6+ features etc. ",1512538013.0
Cheshamone,Sounds like it might be caused by IE's over-aggressive caching of ajax requests (who thought that was a good idea?!). You should be able to solve it if it is that using one of the methods here: http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/.,1512532267.0
irphunky,Have the locations setter dispatch an add/edit action for your location store which then uses the index defined in your v-for.,1512547022.0
xSteun,"You'll want to keep everything that has to be accessible to other components in your global store, so you know all the data you have is the same everywhere. You should use getters and setters to retrieve and set this data for the same reason. You can use computed properties to return store data that automatically update when the content changes",1512518005.0
n0vat3k,"I'm working on a fairly complex application with a lot of pages and relational models. You don't have to separate the vuex modules by the component/page that they're being used by. Instead, try to use a site structure agnostic pattern.

I do something like:

/store/

--/modules/

----auth-module.js //contains jwt auth actions and stores the current user and settings

----users-module.js //contains list of users (limited to what is needed of course) with all crud operations for users and array of projects by id.

----projects-module.js //contains list of projects

----organizations-module.js //contains list of organizations with a users array of user ids

----project-create-page-module.js //Contains operations for letting vuex handle form data from the create project page (relies on projects module)

----settings-page-module.js //contains operations for letting user modify their settings from settings form (modifies their own user from users-module)

--store,js

With this pattern, I have vuex modules for different views, if they're necessary for tracking anything, but each model of data in my application is put into its' own module. If I need another module for a view with a form state, I simply call the data model module from the page/view module's actions.

This pattern allows you to separate areas of concern. I quickly ran into the issue of unmaintainability when I linked display and vuex too tightly. Try to keep data and views(pages/components) as separate as possible.  If you're building out anything other than super simple single view app, try not to rely on the global state. You'll quickly litter it with things that should be separated.

The only pain point in this approach is that it REQUIRES you to make heavy use of vuex modules. After working with this pattern for a while, though, I've found it to be much easier with a large amount of data.",1512575459.0
DukeBerith,"I've found Vuex modules make more sense when you group it by feature. 

I always have a root store that sits at top level so that it can compute/combine things from multiple modules. 


For example in some shopping cart app:


	/vuex
		/modules
			cart.js  (handles items, removing from cart, fetching the total costs)
			user.js (handles user status such as guest, or what happens if they sign in while on the page)
			coupon.js (coupon handling, check if valid or not, how much it was worth)
			shipping.js (calculates shipping methods and prices)
		root.js (brings in the final totals of the cart after discounts applied from a coupon, or from bulk discounts, and adds shipping cost)

Anything that doesn't really have a home ends up going into the root, but once they start seeming like they belong in some functionality I will split it off again, or nest another level of modules if I need to. 

I also don't use the module namespace features in Vuex, they're more trouble than they are worth. With my above setup, I can commit a mutation from any of my modules' actions and another module can also process it, which is good, but if I namespace it either I have to pass `{root:true}` as the third param in all actions/mutations or prefix it with the namespace of who I want to target, which means I can't easily add in a new module later and just listen to a mutation.",1512726072.0
iCupid,"Wow, this is actually nice. I was able to find a video and download the song ... do you have the source on github? ",1512483507.0
the-hero-tata,"Would be better f you didn't use alerts, and rendered an error in the dom instead",1512486040.0
GameDevPlayer1337,"Did you use Vuetify for the material design look? If yes, how did you get the toolbar-side-icon working?

Edit: The site works really good too!",1512539330.0
DOG-ZILLA,Nice work!,1512504346.0
,[deleted],1512521521.0
jordanaustino,"You don't necessarily need SSR. You will want to use vue-router though to define your front end routes.

I'd reccomend starting with a vue-cli webpack build. From there you can migrate to SSR async components and such fancier pieces as necessary.",1512451004.0
DOG-ZILLA,"I've used both Vue Cli and Nuxt.

I prefer working with Vue Cli, but Nuxt has some SEO benefits and a few nice things out of the box...like auto-generated routing from files etc.

Whilst Nuxt was cool, I found I hit stumbling blocks because I needed to adjust my way of thinking about building a JS application with SSR. You might want to be aware of some of these too.

Obviously it meant browser globals like window couldn't work. You need to wrap that stuff in checks...but it's not an issue with Nuxt itself, just the concepts in SSR. Window isn't a thing on the server. The same would happen with React's Next.js or Gatsby.

Integrating some plugins became a struggle. I wanted to use Vuex persisted state plugin, but it was incompatible with SSR. There were a few others too and I often had to find workarounds for this. I'm not advanced enough to be submitting pull requests to these popular plugins myself. 

All in all it was rather good though.

For my next project, I'll just stick to Vue Cli and rely on pre-rendering for search engines. Netlify does this. I'm not sure how well it works, so it's really up to you whether or not SEO is important to you.

Try Netlify out though, it's great for hosting SPA sites built on Vue: 
https://www.netlify.com/

Comes with built in pre-rendering, https and you can have it run your build command every time you push to a certain branch on your repo (usually master), so you effectively have continuous deployment.

I don't work for them I promise!


",1512511157.0
ssiddh,"Here is a plugin specifically for embedding Github gists in your VueJs app.
https://www.npmjs.com/package/vue-embed-gist

PS: I created this plugin. Any feedback will be appreciated.",1523177803.0
irphunky,Quick google finds https://github.com/Gomah/vue-embed,1512429355.0
N3KIO,"so you're replacing 1 template for another template

both do the same thing...

seems kind of counterproductive and unnecessary

I would extend Handlebars templates, if you want more functionality.

but to your question yes, you can replace hbs with vue components",1512402435.0
vpz,"I'm pretty new to VueJS and as far as ""jargon-free"" goes it's hard to beat:

    $ npm install -g vue-cli
    $ vue init webpack my-project
    $ cd my-project
    $ npm install
    $ npm run dev

And a cursory scan of the template docs at:

http://vuejs-templates.github.io/webpack/

It basically does everything ""Webpack"" for you and you just write your app.  The VueJS core devs did a great job making a template that ""just works"" for beginners.  

I used this template, never had to worry about the details of webpack, everything worked great and the app is online.  ",1512435053.0
ExpatTeacher,This is pretty timely for me as I just picked up a webpack 2 and a vue 2 courses on udemy,1512427111.0
gsempe,"Exactly like stated in the title. Good one, thank you!",1512430746.0
kenok,I hope OP you continue to follow up this article on how and configuring webpack in the same series.,1512461696.0
StrangeSound,"If you get yourself the vue-cli, you could use the webpack template which will set everything up for you. Vue itself doesn't do any transpilation AFAIK. 

https://github.com/vuejs/vue-cli",1512370813.0
Balduracuir,Vue has nothing to do with Ecmascript versions. That's your web browser that understands or not es2016. So if your browser does not yeah you should use babel or something similar,1512374520.0
jordanaustino,https://github.com/karol-f/vue-custom-element,1512349858.0
dick_ey,"If you can spare $10-$15 there’s a course on Udemy.com called The Complete Guide to VueJS by Max Schwarzmuller. It’s about 20 hrs of 3-5 min lessons that cover everything with examples. I don’t usually go for the paid courses, but it’s honestly worth every penny. ",1512330489.0
Downvotes-All-Memes,"Yep, you definitely need to get Max’s course on Udemy. ",1512393673.0
rocketchuck,"Agree, Max's course is well worth the money!",1512395624.0
zonq,"https://github.com/vuejs/vue-hackernews-2.0 

Helped me quite a bit if you need an example page. There are different frontends like this, so you can compare them really well.

This one is also great, it lets you pick various backends and frontends:

https://github.com/gothinkster/realworld

Also:

https://github.com/vuejs/awesome-vue",1512478912.0
BackpackerSimon,"http://www.travisluong.com/how-to-deploy-a-vue-js-app-to-heroku/

Found my own answer here! ",1512325215.0
spays_marine,"You can type this in Google nowadays by the way.

""10 BTC to BRL""",1512266050.0
gcjbr,"I spent a few hours looking for a website which immediately gave me a conversion to BRL of how many BTC I had. I needed something quick and simple which kept the last amount I entered.
All the big apps are too much of a overkill and took several steps in order to convert, everytime I wanted to do it, so I made this quick little app.
It’s supposed to be just for me, so I very simple and converts only BTC to BRL/USD/EURO. If you guys feel you could use it and want more features, just drop me a line.
I don't know if it's gonna be useful for someone else, probably not, but, here it is, just in case :)
It's also open source
https://github.com/souljacker/vueticoin",1512253697.0
gcjbr,"I spent a few hours looking for a website which immediately gave me a conversion to BRL of how many BTC I had. I needed something quick and simple which kept the last amount I entered.
All the big apps are too much of a overkill and took several steps in order to convert, everytime I wanted to do it, so I made this quick little app.
It’s supposed to be just for me, so I very simple and converts only BTC to BRL/USD/EURO. If you guys feel you could use it and want more features, just drop me a line.
I don't know if it's gonna be useful for someone else, probably not, but, here it is, just in case :)
It's also open source
https://github.com/souljacker/vueticoin",1512253710.0
merelymetadata,"I'd encourage you to integrate Webpack into your project. While you're contemplating on still not using it, click this [link](https://codeburst.io/easy-guide-for-webpack-2-0-from-scratch-fe508a3ce44e) and carry on.",1512235699.0
Lndrc,"Check out Laravel-Mix. It’s a wrapper on top of Webpack that made me stop pulling my hair out feeling like I was building a Webpack config instead of my app.

Yes, it was built for the Laravel app community, but I’m using it on a Phoenix project with no trouble at all.",1512238307.0
volgorean,"Since nobody has answered your question you can just require vue.js in like you do any other JS in your html and then define your vue app below.



If you need routing then download vue-router [pre-built](https://cdnjs.cloudflare.com/ajax/libs/vue-router/3.0.1/vue-router.min.js) instead of building it yourself with webpack.



If you need .vue components you can require [http-vue-loader](https://github.com/FranckFreiburger/http-vue-loader) above your app definition and then you can define a component as httpVueLoader('my-component.vue')



Note that if you use http-vue-loader then you'll need to 'serve' the files in when developing locally instead of just navigating to the file in your browser because most browsers will prevent js from dynamically loading files otherwise. 



I made a quick [gist](https://gist.github.com/volgorean/3ed803f26ffc62b886fcc9f093264447) if you want to take a look at what the basic setup would look like. If you have any questions feel free to ask here or on the gist.",1512288833.0
ours,"If this is possible, I don't think this is a good idea.

An SPA means you'll have a router loading individual components so single-file Vue components seems like a must. And without webpack you can't have single-file Vue components.

So I'm wondering: why you don't want to use Webpack?

If you don't want to learn webpack just use the Vue CLI or grab an existing template.",1512233767.0
Admicos,Try using a wrapper like [poi](https://github.com/egoist/poi). You just start writing JS and poi handles most webpack configuraiton.,1512303879.0
ours,Install the component from NPM (https://www.npmjs.com/package/winwheel) and import it into your own component and use it.,1512233853.0
dick_ey,"Like the users said in other comments, you can import it like usual with npm and store any variables in “data” or “computed”. Then usually you can run the other libraries functions inside the “mounted” lifecycle hook  if they need to be used for initialization. If not then trigger them with a custom function in “methods” if it requires user interaction first. ",1512274287.0
DOG-ZILLA,"You can just import it and use it as you like.

Sometimes people create Vue wrappers for more complex plugins, so that all the features can be accessible in a Vue-like way...but it's not always essential.

Vue is still just plain Vanilla JS inside its own framework. You're free to use whatever JS you like.",1512244458.0
vulgrin,"For your auth issue, use promises. I have an action that I call in my router to check user status and reup their JWT, and fetch user info. The action and api calls are both promises so that I can wait and figure out if they are logged in before I call next() in the router.

As far as other checks and hooks, I've found that if I was relying on a lot of weird code or callbacks to make things work, I was probably doing it wrong.  For the most part, you get into a pattern and then all components work the same way:

Load the component
Show some dummy blocks / default text
Fetch data, if you don't already have it in the store
When data loads, the magic of Vue fills in your layout.

Keep your store very organized. It's easy to let that get out of hand. Same goes with actions, api, and mutations. It can get very unwieldy in a largish app.

I also put 95% of my scss in style files and only use style in the .vue files if there is a really good reason or a one time override, or logic I need to impart.  This keeps css easier to maintain because it makes you think of your css as a theme, rather than a bunch of one off styles.

Having an editor where you can navigate to files with search helps speed things up... like Sublime or Webstorm.",1512226353.0
rutierut,"Having the same problem here, looking at gitlab's best practices helped a bit. ",1512221364.0
igeligel,"> However, even though I haven't started coding the actual application on the frontend, I get a feeling that the frontend codebase is already overwhelming and it's difficult to get a grip on in what order things happen.

Architecting a software in a scalable and understandable way is the hardest part in software engineering after all i think. This requires experience and imagination how it might be in the future. Guess why software architects get more money than a normal software engineer. It is simply the hardest task in this related area in my opinion.

Anyway writing good and modular code helps with this. You can exchange different parts. There are a lot of stuff which can help you to start with this. Contribute to large open source projects (for example vue itself) or read some good books. i can definitely recommend the books by robert c. martin: [Clean Architecture](https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/), [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/), [The Clean Coder](https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073). They are focussed on Java but the principles can be applied to any language in my opinion. Also it might be worth it to follow some people on twitter, medium to get ideas what they are writing about and how do they do scaling in codebases. For example there is [Eric Elliott](https://medium.com/@_ericelliott) who is quite active in the JavaScript world and writes extremly helpful articles in my opinion. They helped me a lot by now.

> How can I make sure that the application is in a certain state before trying to do things?

Do you have anything which documents the flow of your actions of the authentication module of your application. Probably visualizing the problem in a diagram might help to understand where problems might occur. For some people this type of documentation will help them a lot to understand their problems and how to optimize them.

Otherwise you can build unit tests, integration tests on simulating the real world use case. It wont match 100% but maybe catch some bugs here and there. Now there is this term TDD (test driven development) which could help you but is rather hard to think about in my opinion. This also requires high level understanding of problems and designing software.

> How can I structure the frontend code in a modular way that allows me to add features without risk breaking the whole flow of things.

Actually i think you started with one of the hardest parts of applications - The authentication. It is good that you tackle those high level problems in the beginning since in the end it can be quite cumbersome to update all of your modules to fit the authentication later. Also to this breaking issue. Write tests so you can make sure the thing will work even you changed something :)

I also think the Vue.js documentation lacks a bit of recommended ways on how to do large-scale applications. But i think there is more stuff coming with some of the future updates in the documentation. I also wrote a [blog article](https://medium.com/3yourmind/large-scale-vuex-application-structures-651e44863e2f) recently about how to scale Vuex featurewise. Lets see if something like this goes into the documentation at some point.

In the end it is just experience you are getting. Even a fail in your application structure will teach you things for the future. This is what you need to see. You are learning, so dont give up! Also if you have other questions ask the people in the [official Vue.js discord](https://chat.vuejs.org/) or participate in meetups to get to know people who might have more knowledge than you and ask them. Most of the software engineering people are willing to help other engineers to get better at those problems.",1512248993.0
imapersonithink,"> Im doing really basic things that more or less all applications are doing

I think that is the trade-off. Although you are using more boilerplate code, you're project should have less bugs because you're creating a predictable architecture. If you are staying true to best practices, then most developers that have used a library like Redux or Vuex should easily figure out the code base.

> For instance, if a user reloads the application, I hook into beforeCreate

[A vuex persistent state](https://github.com/robinvdvleuten/vuex-persistedstate) plugin might be able to separate your code so it is easier to read.",1512267059.0
zonq,"Our apps/troubles sound so much alike, and seems like you've got about the same experience as me regarding all of this :) If you want, feel free to write me a PM and we can exchange Discord IDs or something and chat away / fire questions at each other. Might be useful! :)",1512721070.0
ianwalter,"Dont put the initial session request in beforeCreate, just put it in main.js and then bootstrap the app after the request has resolved (or rejected). Use async/await instead of promises. Get rid of all the unnecessary “best practices” boilerplate code. For example, many people want to structure Vuex stores like Redux and separate types into a separate file, but it just makes the code more complex and adds a bunch of imports. I don’t even separate http requests into services because they are often one liners (e.g. await http.post(‘sign-in’, this.credentials)) and don’t need to be in their own service. I have one http module in which I set some defaults and add any necessary hooks and I import that where I need it, whether its in a store module or a component (some http request don’t receive state from the server so it would be pointless to create a Vuex action for it).",1512272853.0
jaesung2061,"If I understand you correctly, you want to have some server variables and auth stuff set up before you set up the vue application. It's simple actually.

Before you run `new Vue()` to bootstrap the Vue app, run something like this:

main.js:

    let token = getCookie('token'); // or localStorage or whatever

    axios.post('/authenticate?token=' + token).then((response) => {
        const store = setUpStore(response.data);

        new Vue({...});
    })
    .catch((error) => {
        if (error.response.status === 403) {
            // unauthorized
        }
    })",1512326056.0
mammothana,"Is it necessary to check if the JWT has expired or not. Just fire a xhr request, if it is expired, you get 401 back. Intercept with Axios, to redirect user to login if API request 401.",1512404830.0
of_adam,Where are you defining the components in your Vue instance? ,1512217654.0
JinSantosAndria,"How do you mount the app in general, what template is it based on / you got a js fiddle or something? ",1512318254.0
TheSupergiantKid,"Found the solution.
I wanted to use sass syntax for my css and put a loader for sass in my webpack.config. For an unknown reason this broke my project.

I removed the loader and my sass still works and everything works fine again.",1512319747.0
Downvotes-All-Memes,"Create a larger, but almost as challenging list, please. These look like great tests.

I am working my way through VueJS 2 the complete guide by Max Schwarzmuller on Udemy, and then I'll work through all the Free Code Camp projects, and then pick at some of the projects in this list.",1512253135.0
navisrob,This allows not to waste time on rebuild (e.g. on CI) if sources were not changed. It wuould be great if someone know simpler way! But even this is better then nothing.,1512151773.0
dcdrawk,"And `v-select` and `v-menu` are still broken on `position:static;` elements. It's even on their docs, try scrolling after opening the 'version' or 'transitions' dropdowns in the top right of the toolbar.

These issues have been there for a while now, and it's one of the things that prevents me from using this lib in my projects.",1512172102.0
,[deleted],1512188491.0
BearInBox,"Is it production ready ? On mobile your website ( documentation and examples ) is very buggy. 

There are elements resizing themselves during scroll, and the initial loading shows me unstyled HTML. 

Edit : Oh did not see that it was an alpha, my bad I read 1.0 release.",1512196443.0
OtisWhiskers,I guess if you absolutely hate css then yeah go for it but damn I like my shit custom,1512175663.0
OtisWhiskers,Dude most libs in general bug me like fuck.,1512175627.0
J0shstar,"There's a [discord server for Vue js](https://vue-land.js.org), I think they use to use slack or another similar chat service but ran into issues with user limits.",1512144935.0
acklavidian,"Most editors should have a .vue lang definition plugin. This tells the editor which utils to make available to different sections of the file eg: js, css, html. [There are offical linting tools](https://github.com/vuejs/eslint-plugin-vue) and editor plugins for [vscode](https://github.com/vuejs/vetur) and [sublime](https://github.com/vuejs/vue-syntax-highlight) to help you with these things. There are plenty of unofficial plugins too for most other editors. So in short the utils you mentioned (although i have used only some of them) should work for the most part. Also you might look in to projects like [vue-beautify](https://github.com/peakchen90/vue-beautify) if want a comprehensive file formatter. 

edit: clarity",1512141635.0
the-hero-tata,"For vs code, I've been using prettier with eslint and vetur.

Prettier has eslint integration so it works out well and eslint works in vue files if you configure it. So formatting follows eslint rules and works on html, css, and js simultaneously. It's nice.",1512144828.0
jordanaustino,Been using eslint with the beta vue recommended rule definitions.,1512143863.0
boxidea,"For development, tslint + vetur

For building, tslint + webpack",1512148530.0
imadp,Is there a demo?,1512132367.0
s1eeper21,Is this with Electron?,1512113674.0
