author,comment,timestamp
metis_seeker,Is the video for this posted anywhere?,1543629293.0
ScrimpyCat,"Archives aren't the same as project dependencies. Archives are essentially global application installations you can access from anywhere. So with regards to Phoenix, what you're installing as the archive is actually the tools so you can utilise it without having to be inside a project that has a Phoenix dependency (e.g. if you want to create a new project using the Phoenix template). Knowing that, you actually can create an ordinary project and add Phoenix as a dependency like you would most other dependencies (you'll just have to manually setup the pieces you want to use). ",1543573474.0
thibaut_barrere,"Another option for deployment (afaik quite similar, in a way, to the [Heroku Phoenix Buildpack](https://github.com/gjaldon/heroku-buildpack-phoenix-static), since it runs the command with `mix phx.server`).

This is obviously very different from building releases, but still has its place I think!

I would be curious to know how many deployments are made via releases (=more the ""Erlang way"") vs. running `mix phx.server` directly on the server (=more the ""Ruby way"").",1543571883.0
nwalkr,why would anyone in the world need this thing in presence of godlike nginx and a few tons of supervisors of any kind.,1543577079.0
MrPopinjay,"Wonderful!

It's not the best environment for Erlang/Elixir and I don't think we'll be hosting web services with it, but this is great for little scripts and background processing. Looking forward to not having to use Javascript here :)",1543577607.0
dazzlealex,"Close to the end of the article they mention it:

>We are also working with our partners to provide more open source runtimes:
>
>Erlang (Alert Logic)
>
>Elixir (Alert Logic)",1543567514.0
qqwy,"I talked with a couple of people about this at the Code BEAM Amsterdam. Even tough it is not Elixir's sweet spot, it is nice for two reasons:

1. It might give some people a 'simple environment' that the start to try Elixir in. (and then they get hooked and move on to more full-fledged environments). 
2. It makes sense to run a certain part of your application written in Elixir on top of AWS. Not having to add the impedance mismatch and added developer complexity because you are able to keep using the same language is a great advantage.

",1543617070.0
dipittydoop,I've found I want pattern matching on most minimal when-like-this-do sort of scripts that Lambda is simple at. This could be a good MVP tool.,1543638134.0
chaptor,"I am a complete newbie in Elixir and Erlang but am I right in saying that they don't make too much sense with something like AWS Lambda as Elixir/Erlang are particularly well suited to many potentially long running concurrent processes that communicate with each other?

Though something similar could be said about Node.js being supported on Lambda which is itself suited to multiple concurrent IO calls",1543579820.0
mgwidmann,"I'm curious to see if Elixir's strengths can be utilized here. Lambda will spin up an EC2 instance for you to process your lambda requests, and then further requests will go through that instance up until a point where they spin up another instance. IIF the same beam process is used, you'd be able to put transient data (like a cache) to be used by subsequent requests. 

Also, if your lambda is in your VPC and you use something like libcluster, there's a good chance you'll be able to contact processes within your Auto Scaling Group. I'd be curious to see examples of this kind of testing when it's available. I think Elixir may be better suited for lambda than other people think.",1543627220.0
jibbit,If anyone gets started with this it would make a great blog post. I’d really like learn some AWS,1543651587.0
hswick,Have you gone to any of the DFW erlang meetups?,1543503660.0
spiritmtl,This is fantastic thank you for sharing,1543452683.0
koudelka,There are a lot of decaffeinated brands on the market that are just as tasty as the real thing.,1543437212.0
ryanrwinchester,"Thanks, I need to bookmark and read everything I can find on property testing.",1544333233.0
itb206,Isn't this effectively solved by ETS?,1543431947.0
alvises,"Hi everyone. I've just published a new part of the series. Please comment in the article (or in reddit) if you have any question.

[https://www.reddit.com/r/elixir/comments/a32hqb/build\_a\_simple\_persistent\_keyvalue\_store\_in/](https://www.reddit.com/r/elixir/comments/a32hqb/build_a_simple_persistent_keyvalue_store_in/)

&#x200B;",1543942991.0
chulkilee,"More than 80% I use `case` or short functions with pattern match with expected values. 

Life is not simple so in many cases return value is a tuple not boolean.
",1543381724.0
EmjayFlight,"The rule of thumb I have made for myself recently has been to use if/else if I'm working with only two possible outcomes. 

For everything else, case and cond. Typically case is preferred because it tends to limits you to working with one thing. My experience has been that if I'm using a cond do, I'm trying to do too much in the code. 

This is my off the cuff answer. I'm going to go back through some of my recent work and work of others and see how they've been using it. ",1543380839.0
jake_morrison,"I joke that while I am in my editor thinking about what to write, I just type `case` to save time. It generally ends up being the right thing. In Erlang, `if` is mostly useless, and case works fine. If the case has two choices and is about booleans, then `if/else` is cleaner. `cond` is for special cases where it fits. In practice, I find that I don't use `with` as much as straight matching on results, as well, as it gives better error information when it fails. This is part of the ""let it crash"" philosophy.

You should also use functions and head matching. It is a valuable tool which doesn't exist in other languages, and takes some getting used to. I would almost put it above `if` in usefulness. It avoids deep nesting of logic and excess variable manipulation. This style is quite interesting to study: http://www.gar1t.com/blog/solving-embarrassingly-obvious-problems-in-erlang.html 
It is a bit excessive, but pays off in clarity and makes some testing unnecessary. You can basically assert that you have correct parameters, like in ""design by contract"".",1543388525.0
Findlaech,"if I'm using a `case` on a parameter of a function without any transformation (like a `trim`), I usually put the shape (map, tuple) in the function head. Of course I don't give up my judgement, and if it looks reaaally weird, I use something else.",1543408379.0
smstrickland,"Nice, keep up the good work!",1543343272.0
pus_muffin,"What kinds of peripherals does the ESP32 support? eg: temperature / moisture sensors, etc. I didn’t find much on the site. 

Edit: found docs on GPIO in the datasheet: https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf#page29",1543372026.0
firl,Any plans to bring it into the nerves fold for tooling? I don't know how much overlap there would be though,1543336447.0
Hauleth,"Elixir and Erlang have strong types, however they do not have static types. There is huge difference between these two terms. ",1543312201.0
ReinH,I think this video would have benefitted from a few more takes and some more time spent in editing.,1543252330.0
blue_coal_miner,Seems a bug in Postgres to me. `5.0` is stored as a `float` but `5.0e3` as an `integer`?  Why should `5.0e3` be an `integer` but `5.0` a `float`? Seems inconsistent.,1543287488.0
polypus74,"Learn Erlang. If you already know Elixir it will be easy, basically just syntax. Why? For one, so you can easily read the many great books about Erlang.",1543240789.0
eddw4rd0,"Until Elixir doesn’t compile to itself, keep learning erlang.",1543240564.0
svchator,No you don't need to learn Erlang.  Neither do you need to learn assembly.,1543243114.0
whitfin,"You're very much learning Erlang anyway by learning Elixir; the only difference between the two is basically syntax and a couple of bonuses in the Elixir standard library (most of which wraps existing Erlang functions). 

You will find that if you learn Elixir ""fully"", you'll automatically be able to understand most Erlang code. There are some semantic differences but the overall structure is usually very similar, if you get past the symbols being used. 

Although you might learn Elixir, there are *LOADS* of times you will use Erlang libraries and/or functions, so you'll even be familiar with many parts of the Erlang standard library over time.",1543306202.0
droctagonapus,"I'd say unless you're writing code that's explicitly using some BEAM-specific things (GenServers, Agents, Supervisors, etc) then I'd stick to probably just reading about the built-in Erlang standard library. Things like `:etc` or `:crypto` are nice to learn about and they're Erlang modules. I'd also read up a little on the syntax so you can grok the Erlang documentation. But as far as learning everything about Erlang syntactically? Nah, probably not worth as much as just going through Erlang's libraries and maybe poking around the source code. Once you know the ins-and-outs of Elixir's syntax and what it's doing on a technical level then you can pick up on Erlang syntax really easily most likely.",1543249009.0
cthree87,"Yes if you need to maintain existing Erlang code, otherwise no. There are no features you give up to use Elixir. Instead you give up makefiles and gain hex and mix. Sold!

",1543274269.0
BigHeed87,"Erlang is way more valuable to learn than Elixir. Elixir is mostly syntax, with emphasis on metaprogramming abstractions and libraries to make the language feel like Ruby.

I wouldn't say if you know Elixir you know Erlang. However, if you know Erlang, then you'll mostly know Elixir, or at least how it works. In fact, most of the Elixir code I encounter from people that don't know Erlang isn't great. It's easy to pick up bad habits and patterns in Elixir because you're not forced to deal with how Erlang really works. You're put lengths away from the proper abstractions if you adopt things like the Enum module. But the bearing in the community is to use these tools, so in the end, Elixir devs tend not to be capable of casually writing recursive methods like one normally would in this paradigm.

TL;DR Learn Erlang if you want more foundational knowledge and if you want to develop more hygienic habits around the BEAM",1543247176.0
philly_fan_in_chi,"Your refactoring ease comes down to how many weird features you use. For example, like in Java, if you're dynamically invoking methods by string names, you're going to have a bad time. The equivalents in Elixir being defining functions via macros and using `apply/2` or `apply/3`.  Additionally, refactoring out of a mess is as hard as that mess was to create in the first place. That's all true irrespective of language, imo. 

If you use tools like Credo and Dialyxir (and use type specs!!), you'll find that refactoring is usually really pleasant. Bad Elixir looks really bad visually (at least to me), so it's unlikely to get into the codebase in a meaningful capacity if you use good conventions across your team, you'll ""see"" the weird misbehaved code just by looking at it. If you use things like behaviours and @impls where appropriate, you'll have better compiler messaging when you break something. 

That all said, we've been maintaining an Elixir app at work for 2.5 years and I don't miss a single thing about Java. I find refactoring extremely straightforward, usually just changing some function pointers, pulling things out to separate functions, inlining, etc. If you make your code easily greppable (ignoring the generated stuff I mentioned earlier wherever it's not strictly needed, as well as not using sub-aliases like `alias Foo.Bar` to make typing `Foo.Bar.Baz.frobnicate/0` be `Bar.Baz.frobnicate/0` -- please don't do that, for all that is holy.) you'll have an easier time refactoring. I tend to use fully qualified names for all the calls, and try to make all my functions private where I can.

Also golfing is REALLY fun in this language, so if you like doing that, you'll have a great time. ",1543105041.0
skmz,"In a lot of ways, Elixir as a functional language (with modules just being bags of functions) provides a lot of decoupling. At the least, renaming things is pretty straightforward. As for more in-depth refactoring, seems there are a few resources available for letting you know what's being used where (like `mix xref`):

https://elixirforum.com/t/how-to-refactor-elixir-with-confidence/15396/8",1543104657.0
dipittydoop,"Elixir's maintainability and refactor-ability is one of the big reasons it's a good choice; especially for small teams. With Rails / Django you trade off some of that maintainability for productivity. Spring is powerful and flexible, but it's going to take some time to configure and setup. So we see Spring is common among larger businesses who don't really have the same constraints as small teams. It's not a big deal to have senior engineer configure Maven or what-not for a few days. Can a small startup afford that, let alone the senior engineer? Probably not. However with Elixir+Phoenix maintainability and productivity aren't traded - you get both.

You have first class documentation support and even doc tests which is pretty nice. It's a functional language and as such has a lot of built-in safety from immutability. Between pattern matching, specs, and guard clauses you get most of what you need from type checking. For testing, ExUnit is a very pragmatic and not hard to pick up.

You can still write things badly, but it's going to feel wrong. Following a long the [Phoenix guides](https://hexdocs.pm/phoenix/up_and_running.html) (the contexts one is my favorite) will leave you well served in the CRUD world. The other big deal is if something breaks like a bad request to your webserver - Elixir + Phoenix will keep chugging a long because the failure is isolated. So you get the development experience *and* your boss doesn't call you in the middle of the night to troubleshoot the downed app.",1543106015.0
ScrimpyCat,"> How easy/hard is it to refactor Elixir code? 

Depends on what you're refactoring. If you're just refactoring the code (keeping the overall architecture and data in/out the same) then it's not much effort at all. If you're doing a larger architectural redesign or you're changing the structure of the data in/out then it can be a larger undertaking. With that said I don't find the experience any worse than other languages and in many cases the transition is a lot smoother because of other guarantees the VM provides you (in most scenarios if you make a mistake your entire application isn't suddenly going to break). 

> Do pattern matching and guards give you enough help or will I get to situations where I am not going to find things until runtime, like in Python and Ruby?

Pattern matching won't prevent you from discovering issues at runtime, rather it'll just inform you that you know with complete certainty that only this structure of data is valid here. 

Rather to catch issues ahead of runtime you'll want to opt for things like the dialyzer or helper tools like credo. Dialyzer won't be able to catch everything however, but it definitely makes a big difference. 

With that said, one of the reasons you'll often consider elixir is because of how the Erlang VM handles errors. You'll be designing your architecture around the assumption of how should your system react if a certain part fails (your supervision tree). If you've architected your application structure well, you can be quite confident (with the exception of crashing the VM itself which there aren't many ways to do that) that if something goes wrong the error will be handled accordingly (though maybe that feature might not work at all until it's fixed) and the rest of your system will still function normally. ",1543108236.0
yawaramin,"This talk helped me a lot: https://youtu.be/CQyt9Vlkbis It’s focused on Erlang but applies equally well to Elixir.

For me personally, Elixir refactorability takes a hit because it doesn’t have more powerful static typing, but it makes up almost all the difference with pattern matching, fast feedback, and the fail-fast strategy that it encourages. You’ll need to change your approach a bit to catch refactoring errors—focus on a wider range for testing (think branch-level coverage)—but the payoff is worth it.",1543335510.0
r_bryce_hicks,"I don’t mean to come off as a dick, but it might end up that way; there are two red flags I see this question:

- planning to refactor
- thinking that dynamic languages result in runtime problems

*Planning to Refactor*

Most of what you hear about refactoring is from a certain kind of consultant or someone interested in selling refactoring tools. Refactoring doesn’t mean “fixing ugly code I shouldn’t have written in the first place”. If you read the GoF book, or at least heard a lot about it, you’ll know that the whole process of refactoring centers around learning to identify problems with code — “code smells” — and how to go about fixing them. If you’re able to properly refactor you’ll notice these problems as you’re writing the code. Despite what certain proponents of Agile methods sometimes say, that never means you should plan to write terrible code the first. You’ll be better off developing the skills to write good code in what ever language you’re using the first time. 

*Thinking that Dynamic Languages Result in Runtime Problems*

Dynamic languages don’t cause runtime problems, bad programming causes runtime problems. With the sole excepting of languages with Hindley-Milner type systems, no static language is going to save you from runtime problems. If anything, all that will happen is that you’ll delay finding them since they tend to involve improper memory management, bad casting, or both. All things that are often necessary in static languages but not dynamic. The runtime problems people usually think of — passing totally incorrect data types, a bunch of unexpected nulls, etc — shouldn’t happen in practice. Really, if someone writes code where API clients can send arbitrary datatypes to functions/methods that can’t handle them, that’s a huge mistake in thinking. The compiler isn’t supposed to do the thinking. If that happens, there is something badly wrong with the design or its implementation. As for the nulls, this might happen when using a library for the first few times, but it doesn’t usually happen when you’re working with libraries you know; add to that the fact that, again, initialization problems happen in static languages all the time.

*Back to The Original Question*

If you take the above to heart, then all but the worst languages are fine for what you need. Guards and pattern matching are not only fine for this, but for something like compliance they’re exactly what you want because the business logic can be declaratively written. This makes it extremely easy to verify and test. ",1543200469.0
MrPopinjay,"A statically typed language for the Erlang VM

Typing of multiple modules is nearly done, need to a make a plugin for rebar3 next. After this I'd like to improve type inference of recursive functions, the ergonomics are not as good as I'd like at the moment.

https://github.com/lpil/gleam",1543072314.0
yawaramin,"Prototyping a GraphQL API with Absinthe and Phoenix 1.4, as a proof of concept for something at work. Who knows, if it impresses my client they might even agree to deploy it to prod 😊 (not likely though as they are on the Node train).",1543077433.0
chaitanyapindiproli,Working on building a new app using Phoenix ,1543045787.0
EdChute_,"\[META\] Just a suggestion, but maybe this thread could link to the previous month? I just joined, and would be great to see how the community had been engaging for the past couple months",1543254410.0
Pxzib,"A crawl bot to fetch product information from stores. We pay so much for using Diffbot, that it's actually worth putting four Elixir developers on the case for half a year.",1543082181.0
dplummer,"Phoenix 1.4 app to provide a convenient interface to Helm and Kubernetes deployments in my company's cluster. Just got grpc working to talk to tiller today.

I have dreams of using websockets to push updates to the browser and write the frontend in Elm.",1543047928.0
bustyLaserCannon,"Just finished the Elixir & Phoenix course on Udemy by Stephen Grider - it was great.

&#x200B;

Now I'm building my first real Elixir/Phoenix CRUD app - a job board with a few twists. I'm hoping to add some Stripe integration to it too if the ideas I have for it make it worth paying for!

&#x200B;

Overall super easy to get going with - Phoenix is super productive to work with. Changesets and Ecto make all the data modeling and querying a breeze (after I got used to some error messages trying to do many\_to\_many relationships).",1543330921.0
sb8244,"I am working on an open-source push service/client that can provide server->browser socket pushes.

&#x200B;

This is really just a layer over Phoenix sockets, but providing an interface that is very very fast to get started, built for scale, and has best practices integrated.",1543462632.0
EdChute_,How is this course for a total beginner to FP? (I come from Ruby),1543169431.0
MrPopinjay,I was talking to someone at Pinterest and they're not actively using Elixir any more. Stopped last year I believe.,1542993723.0
lnri,I really want to try Elixir again but I don't feel supported as a developer. The community is small and it's difficult to get project help whereas I can tweet a Node/Mongo question or post in a number of Javascript chatroom and get an answer in 60 seconds. ElixirForums is nice but still takes a bit before people respond :-/,1543013293.0
RustySentinel,Thank you so much!!!,1542985616.0
yawaramin,"I did a quick search for Netflix using Erlang or Elixir, seems to turn up nothing?",1543041086.0
ScrimpyCat,"Nice work, the library looks very easy to work with. And kind of perfect timing too since have wanted to test some distributed behaviour in a project I'm currently working on. 

You mention the library handles copying the current application environment state to the new nodes. When we don't want that behaviour are we able to provide custom configuration to be used instead (if you didn't want the current state to be copied across)? Or will we just have to update the state ourselves after the nodes have been created?",1542950836.0
aseigo,A lot of similarity in execution to the safe_exec_env library I wrote ... ,1542955713.0
,[deleted],1542955558.0
itb206,"You need a table called users_colors with a foreign key on both user_id and color_id and then 

many_to_many :colors, Color, join_through: ""users_colors"" 

On the user model. I think that handles it",1542808118.0
ihumanable,"As someone that has conducted hundreds (if not over a thousand) technical interviews, let me give you some advice.

Elixir Specific:

-	Know how to use `mix`.  If there’s a hands on coding exercise you don’t want to be fumbling trying to remember how to bootstrap a project (`mix new`). Also good to know `mix deps.get` / `mix test` / `mix run`.
-	Get comfortable using `iex`.  It looks good during an interview if you can use the interactive repl to explore a problem space a little, be familiar with the `iex` helpers like `v/0,1` `h/1` and `b/1`
-	Depending on the position, having some idea of what OTP is never hurts.

General Interview Stuff:

-	If you can, think aloud, if you get stuck see if there’s a way to break the problem down into smaller parts.  Lots of candidates, even those that get hired, don’t finish the problem, but they demonstrate their problem solving skills.
-	If the interviewer says “feel free to ask questions” or “I’m here if you need anything” actually take them up on it.  Read the problem carefully, if there’s anything ambiguous, clarify it, this shows a good attention to detail.  If you get stuck or something isn’t working correctly, explain what you are trying to do and don’t hesitate to ask the interviewer for help or if they see something silly you might be missing.  The second part is a bit of a tight-rope, if you ask for help when you legitimately need it it can foster a feeling of camaraderie and the interviewer will most likely end up liking the solution better because they had a hand in making it and most everyone loves their own code, if you overuse this technique you can come off as incompetent, so be careful there.
-	Most interviews end with a part where you get to ask questions, think of these before hand, interviews can be stressful and have a way of making you draw a blank. 

Good questions to ask an interviewer:

-	How long have you worked here?  :: Easy to answer for the interviewer and gives you better context to evaluate the other answers
-	What do you do here / what’s a typical day for you here?  :: This shows interest in the person and can give you valuable information about what the company is like, also people love to talk about themselves so the interviewer will likely remember this as a positive interaction
-	What’s your most favorite thing about working here / what’s your least favorite?  :: Work best in that order because you don’t come off as looking for the bad but instead as genuinely trying to gauge the workplace, also can yield red flags.
-	How does code get from the editor to the cluster (or product if not web based)?  :: I’ve found that deployment often tells you a lot about how much of a pain in the ass working somewhere will be.  There’s nothing more morale killing then fixing a bug in 5 minutes and then having to go through some complex, error prone, multi day process to ship it.  This question normally does a good job of giving you an idea of how good / bad the tooling you would be using on a day to day basis is.
-	Little things that impact Quality of Life but can be easy to forget.  What hours do most people keep?  What source control do you use?  What’s the ratio of coding to not coding for junior engineers? 

Overall, for a junior engineer role, as others have said, knowledge shouldn’t really be the primary thing they are gauging.  Junior Engineers don’t have as much knowledge, that’s why they are junior instead of mid-level or senior or whatever.  That means you’ll be primarily evaluated for attitude, intelligence, and drive.  Do what you can to highlight those attributes, try not to get flustered, if someone offers you help or provides criticism try to show that you are easy to collaborate with, work hard at the problems even if you don’t know how to solve them at first, just start saying the things you do know about the problem and start talking about possible approaches, you’ll be surprised how often the interviewer will give you tons of help.

One last piece of advice, don’t try to bluff, for the love of everything BEAM, don’t try to bluff.  It is 1000000x better to say, “I’m sorry, I’ve never made a bloom filter before and I don’t really know what one is, I could look it up or maybe you could explain it to me.” Then to lie and go, “yes, a bloom filter, I know that” and then proceed to make a mess on the whiteboard or in your vim buffer for 30 minutes.

One last last piece of advice, be confident and calm, you are on a forum asking about how to do this right which means you are more prepared than 80% of junior candidates.  Interviewing kinda sucks, it can be dehumanizing and demoralizing and you might get tripped up and mess something up.  It can be really hard to soldier on when you feel like you’ve failed part of the interview, it’s ok to acknowledge that you struggled to get a grasp on something to the interviewer, it’s ok to not know something, don’t let little mistakes ruin the rest of the interview.

I wish you the very best of luck.",1542786212.0
fuzzy_nate,In my experience junior delevlopers are not hired for their *knowledge* but for their *potential*,1542765484.0
a_blue_ducks,"\> I'd like a very explicit answer if possible

&#x200B;

I think you need to provide more details if you are looking for a detailed answer.",1542748400.0
ABC_AlwaysBeCoding,"Read Dave Thomas' book on it cover to cover.

Then study the functions in the [Enum module](https://hexdocs.pm/elixir/Enum.html), in particular try to understand how pretty much everything in there can be implemented in some way using [reduce](https://hexdocs.pm/elixir/Enum.html#reduce/3). This is a functional paradigm that's just good to understand regardless of language. I'd also study the [List](https://hexdocs.pm/elixir/List.html#content) and [Map](https://hexdocs.pm/elixir/Map.html#content) modules.

I'd also try to understand how `[1, 2, 3]` is really just syntactic sugar for `[1 | [2 | [3 | []] ] ]` and why that is. So for example if you type the latter, you get the former:

`iex(1)> [1 | [2 | [3 | []] ] ]`

`[1, 2, 3]`

Next (or alongside all this) I'd study pattern-matching, in particular how `=` is so different in this language vs. other languages, and how pattern-matching in function heads/arguments works.

You should know when the pin (\^) operator is required and why. (I actually didn't like this syntactic detail at first, but once you understand it all it makes sense that it was necessary.)

Related to this, you should understand why saying `a = 5` and then `a = 6` in the next line is *not* reassignment in the mutable-data sense.",1542750816.0
into_lexicons,"i'd expect a junior dev to have general familiarity with everything covered in the dave thomas book (Programming Elixir). i wouldn't necessarily expect them to know the ins and outs of the BEAM, or deployments, or popular libraries, but i would expect their fundamentals of the language itself to be solid.",1542748770.0
ScrimpyCat,"Honestly I think you could land a junior elixir position without any prior elixir experience, only having other programming experience under your belt (pros would be previous experience with a functional language/paradigm, backend experience, etc.) and being really interested in learning elixir. Reason I think this is I've talked with numerous places that are trying to hire elixir devs and they've always struggled with finding people. I usually tell them that they'll be better off opening the position to anyone that's interested in elixir and just has similar experience in other languages, as well as adapting their onboarding processes to accommodate those that'll be having to learn the language on the job. This is what I did with a previous startup of mine and it worked well, since we interviewed a lot of candidates and not a single one knew elixir (some knew of it/looked into it for the position). 

Now if you're applying for a position and another candidate who already know elixir comes along, chances are they'll give it to the more experienced candidate. So in that scenario I'd just suggest working your way down a list of topics like this (tried structuring from simple to complex):

* Familarise yourself with all the core concepts to get a working program: creating modules, functions, control flow statements (case, if, with, for, etc.), anonymous functions, operations, different types (could skip types like pids or references or records for now, though worthwhile reading about them), etc. 
* Familarise yourself with pattern matching (numbers, atoms, lists, tuples, maps/structs, binaries/strings, etc.). The more comfortable you are with this, the easier it'll be for you to implement any algorithms/code flow. 
* Two bonuses are try to implement your own functions for doing some of the things that are already provided for you (such as functions in the enum or list module), as well as try write some functions that contain no control flow expressions inside their body (so no case/if/with etc. you need to move all that control flow/pattern matching to functions instead). 

Ok the above isn't exactly basic/it's more complicated than some of the stuff you'll find below but it's the crucial first step to be able to build anything. 

At this point you should have implemented a number of functions/algorithms, and be somewhat comfortable being able to achieve the operations you want. 

The next things (not in any particular order) would likely be familiarising yourself with these:

* Mix
* Config/Application env
* Module attributes
* Macros/metaprogramming
* Code docs
* Unit tests
* Typespecs

At this point you could go ahead with learning some libraries/using Phoenix. Or could move on to the following more advanced topics (these are necessary when you want to take full advantage of the Erlang ecosystem, but aren't actually necessary to build a number of simple applications as numerous frameworks/libraries handle some of this for you):

* Concurrency (processes, messages, receive clause, and elixir abstractions like tasks and agents). 
* OTP (understanding what an application is, what are supervision trees, genservers and supervisors, etc.). 
* Distributed Erlang (working/communicating with nodes, failover, etc.). At this point you'll also want to be learning about other distributed concepts such as CAP theorem, consensus algorithms, ordering algorithms, etc. This is the most advanced topic you'll eventually get exposed to and is absolutely not something someone would expect a junior to have exposure to. ",1542902486.0
Semi_Functional_Ken,Located in SF,1542658373.0
tylerpachal,A short article I wrote after learning about inets/httpd and using them for a simple HTTP server without having to add any external dependencies to my project.,1542651487.0
BigHeed87,"Hey! You should check out my library https://hex.pm/packages/ex_health

It seems like you're doing a little more than ex_health is, but I'm sure it'll be good reference if anything",1542671883.0
droctagonapus,"These docs should get you pointed in the right direction: https://stripe.com/docs/quickstart

There's a section on declined payments so I would pattern match on the response when trying to charge the card and do things based on which pattern matched (success or failure).",1542643911.0
nickjj_,"It's also worth pointing out, when it comes time to set up your payment form on the Phoenix side of things, make sure the credit card field never makes its way to your server.

I would go as far as removing the ""name"" property of the form field in the eex template so that Phoenix doesn't even have a chance to process that field. You don't want a user's card details ever showing up on your server, in the logs or anywhere else.

It does mean more work for you if you want to track the last 4 digits which is fine, but it's worth the extra leg work because breaking PCI compliance is a lot worse.",1542711513.0
NippleMustache,"Can a user submission ever go from ""valid"" to ""invalid""? If not, wondering if it makes sense to separate these concerns. 

For example, by validating submissions from users, ""staging"" or marking only that are ready to be paid. Then all those submissions need is a Stripe payment.",1542729847.0
TiuTalk,Oooohhhh... timezone support!,1542405093.0
mgwidmann,"Would like to see Elixir addressing more erlang problems because they bubble up as bigger issues than these things. Take for example the inefficient gossip protocol blocking more than 50-100 nodes from joining a cluster or some of the issues libraries like Horde are addressing. 

Things like the dynamic supervisor and registry we're steps in the right direction but the momentum in elixir core seems to have died down on that regard.",1542412325.0
robbs,Cool! Can you post the whole function at the bottom?,1542312413.0
nietaki,"The amount of permutations grows exponentially with regards to the length of the original list. For 15 element list, there's over a trillion permutations.

Did you think of doing it with streams instead of lists so it would be useful for bigger data?",1542363465.0
Schrockwell,"By what interface do you want to monitor the process? The command line? Maybe a web-based interface, like an API or a page?

Some options that spring to mind:
* Print errors to stdout (`IO.puts`) and just log them
* Store errors in the DB that you're already accessing, and just retrieve them with another client
* Stick your GenServer into a simple Phoenix app, and spit out errors on the web

",1542254501.0
IAmSen,"Without seeing code, it's hard to be specific, but it sounds like you need to study / create a Supervisor for your GenServer.

https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html

https://hexdocs.pm/elixir/Supervisor.html#content",1542258040.0
shaolin_acc,"For stuff like this, where you want manual access to genserver state, I just use the —remsh flag in iex. If you call mix run with the —sname and —cookie flags you can just open a new shell in the running app.",1542284826.0
jibbit,thank you for this and thank you for this great framework. I'm having a lot of fun!,1542396029.0
TheWildRumpusBegins,"This is a really solid explanation of contexts that I wish had been available when Phoenix 1.3 came out. Even if you're not doing an umbrella app, you can apply all of this.",1542230291.0
benco420,"If you haven’t found it already - [Designing for Scalability with Erlang/OTP](https://www.oreilly.com/library/view/designing-for-scalability/9781449361556/)
",1542163628.0
__johnson,"https://www.distributed-systems.net/index.php/books/distributed-systems-3rd-edition-2017/

You'll build a lot of distributed systems in Erlang/Elixir and understanding the architectural impacts of those systems will probably be important.",1542161928.0
menge101,"Episode 78 of the podcast Elixir fountain touched on this - It is titled ""Software Architecture panel with Sas Juric & Lance Halverson""

One of the things I took away from that was what was said about design patterns, in OOP you have all of these gang of four constructs, in elixir & erlang you have modules.

Essentially that the very concepts of functional programming lend themselves to a data driven architecture every time.

-- But don't take the above as an attempt at an authoritative statement from me, i'm an elixir enthusiast, but I have not had the opportunity to work with it professionally.",1542203407.0
seshboyrs,"what. I just looked at the blog post and this is INSANE. I have spent the past year learning the world of containerized applications, build pipelines, and general devops. This blog series looks like the most in depth and practical write up I've seen. I wish there some sort of tip jar.",1542136510.0
droctagonapus,"> This phase of the series is provided purely for educational purposes.

Does that mean there'll be another part going over a more ""production-quality"" way of doing things? I'm a complete Docker/Kubernetes noob but I've always wanted to see how that works with Elixir + Phoenix + Ecto",1542140213.0
nickjj_,"May I suggest you remove this quote:

> Docker Compose is in no way an appropriate mechanism for production-grade deployments serving paying customers

I know you're trying to get people into Kubernetes but that's simply false. Docker Compose is absolutely fine to use in production. Between all of the projects I've worked on over the years, I've served well over 10 million requests through apps run with Docker Compose.

That's apps with paying customers and everything. Some even super critical apps where a Docker Compose driven app was running inside of a custom hardware appliance so stability was a pretty big concern. It works wonderfully even 2 years later.",1542197046.0
p_r_m_n_,">The biggest focus of Horde 0.3.0 has been API parity with Elixir’s own Registry. 

This is cool and smart. I like that is can be a ""drop in"" replacement. ",1542151018.0
Larrywax,"Very interesting, thanks!",1542150416.0
BigHeed87,Why would someone use Hoarde over Elixir's registry?,1542154493.0
philly_fan_in_chi,"> This should be in stdlib

reads code...

>   # not sure if i ever used it, but why not

""Of X"" implies getting a thing out of the call, to me, as a reader. So like `FooBar.of(x)`. I would not use this in any of my codebases.  There is not enough clarity implied by the naming, to me, and this is not extensible without adding even more modules. All to save a few keystrokes. ",1542161498.0
savish,Thanks! There are so many things here that are incredibly useful and fun 👌,1542132238.0
puppet_pals,I took a college course that Dave taught - incredible teacher I’d recommend this course to anybody looking to pick up elixir,1542067217.0
MrPopinjay,That first tip should be avoided. It has no benefit and if your boolean expressions are expensive to compute it will perform worse than using `or`.,1542036699.0
tylerpachal,This is a short article I wrote after playing around in IEx and learning about atoms/modules in Elixir!,1541998366.0
Sentreen,"Concise and clear article. It might be worth mentioning that all uppercase ""names"" are syntactic sugar for atoms (with the ""Elixir"" prefix), even if they don't refer to a module.",1542015117.0
Mamposteao,"Not checking the database could introduce a bug if somehow the cookie gets out of sync with the database and it references a user id of an already deleted user.

Your system would have to be designed around that assumption. You need to decide if that is simpler than rejecting an invalid cookie early in the request. 

I think I would check the database to have a system that’s easier to reason about. And only change strategy when the cost of the database call becomes an intrinsic problem due to scale. ",1541992322.0
sb8244,"One thing that I like  to do is have a user plug which calls assign with the user struct (extracted from session/header, queried, insert into assigns). This allows downstream plugs to check that value and respond differently if it's not present (at a pattern matched level).",1541997932.0
lattenwald,So this link requires me to create an account to view job description? What's the idea behind this?,1541780379.0
no_spoon,Why do I need a video for this...,1541766158.0
iliveinapark,"I don't understand what you mean by ""the examples inside"".",1541811131.0
ScrimpyCat,"Are the examples apart of your project or an external dependency? And if I'm understanding the problem you're getting non-compatible requirements for a dependency (ecto). 

If they're your examples then depending on what you want to do, you have some options such as making ecto an optional dependency, change the requirements, or leave it as is and have the project that requires your project override the ecto dependency. 

If the examples are from an external dependency then you'll have to override the ecto dependency. ",1541888902.0
jamesmacaulay,"Yes. These projects let you write in an ML-family language with a nice type system and run it on the Erlang runtime system:

* https://github.com/alpaca-lang/alpaca
* https://wende.github.io/elchemy
* https://github.com/kjnilsson/fez (very experimental)

And dialyzer gives you at-least-it's-better-than-nothing static type checking for Erlang and Elixir:

* http://erlang.org/doc/apps/dialyzer/dialyzer_chapter.html
* https://github.com/jeremyjh/dialyxir

If you feel like venturing further afield, Rust has a steep learning curve but is very rewarding and has a wonderful community, and there's a very active project called actix that provides an actor system similar to the concurrency model of Erlang/Elixir:

* https://actix.rs
* https://doc.rust-lang.org/book/2018-edition/index.html

**Edit** since you mentioned IDE support: out of all of these languages, Rust has by far the best IDE and editor support. The compile-to-erlang ML languages are great projects but have very few users so they don't really have tooling ecosystems yet. Elchemy is in a nice position because it can piggyback on Elm's editor support. Dialyzer's fairly weak type system doesn't help its IDE story. Meanwhile Rust has a very solid type system, a bunch of full-time contributors including ones dedicated to IDE projects, and a very active community.",1541732124.0
Kingoftheknoll,"Yes and no. There are actor model languages that are statically typed like Pony. But the BEAM is kind of it’s own beast. Process linking and failure isolation were the main design decisions of Erlang and they enforce that unique flavor of actor model which is quite unique.

If you wanna stay on the BEAM Alpaca is an Elm inspired language. I’m not sure if it’s gradually typed since typing the GenServer interface or any Erlang code is quite difficult.  ",1541731480.0
Ravenhaft,"Do you use Typespecs? It’s helped me a lot. 

https://hexdocs.pm/elixir/typespecs.html",1541747134.0
mbuhot,"There’s a couple of projects I’m keeping an eye on i this space:

Gleam is a
a statically typed language for the beam, similar to elchemy:
https://github.com/lpil/gleam/blob/master/README.md

Gradualizer is a gradual typing approach to Erlang / Elixir that should catch more errors than dialyzer for code that contains typespecs:
https://github.com/josefs/Gradualizer

Neither are production ready yet. 
",1541748933.0
yawaramin,"There are a couple of experimental ones, this seems to be the farthest along: https://wende.github.io/elchemy/",1541732104.0
MrPopinjay,"I'm working on one such language, [Gleam](https://github.com/lpil/gleam/). It's not yet ready to use, though I'm getting there :)",1542042343.0
lalolambda3141592,"sorry for my entire ignorance about the topic, but would be possible a real static typed language in the BEAM where the ending code will be optimized?...elixir and erlang are great but not so much for heavy computation codes, I think that this would require an entire new implementation of BEAM right???",1541792042.0
shaolin_acc,nope,1541730675.0
Kingoftheknoll,"Maybe I missed it but wouldn’t this only work in a single node context? With multiple nodes either through PG2 clustering or the redis adapter messages are replicated so you’d process your side effects once on each connected node. 

Edit: typo",1541732881.0
mbuhot,"What are the delivery guarantees for PubSub? If your node dies between committing the DB transaction and broadcasting to the listeners, the messages are lost?",1541797787.0
tyurok,"Nice writeup, thank you.

I was looking for a solution similar to this. I'm using absinthe and internally subscribing to mutations which is kind of a workaround, but this is very neat.",1541691141.0
tdug,"I'm by no means an expert with Webpack, but here is an example I put together using Phoenix 1.3 with Webpack 4.x: [https://tdug.github.io/coding/2018/07/26/phoenix-webpack.html](https://tdug.github.io/coding/2018/07/26/phoenix-webpack.html)",1541802680.0
TheWildRumpusBegins,Nice! Major new features are fun but a nice and easy upgrade is always sweet too.,1541653034.0
nickjj_,"- timex for dealing with times
- arc for dealing with user uploads
- hashids for generating unique ids from strings (useful for user uploaded file names)
- bamboo for email
- quantum for scheduling recurring tasks without cron
",1541763970.0
greygatch,"New to Elixir, but so far I've found the following to be useful in my Phoenix projects:  


excoveralls  
httppoison  
poison  
xml\_builder",1541614654.0
yobagoya,Pow for user auth https://github.com/danschultzer/pow,1541897143.0
GroceryBagHead,Using bootstrap 4? Want to quickly make forms that look nice? https://github.com/GBH/phoenix_bootstrap_form,1541618258.0
sb8244,"Do you intend to take items off of the queue or just use it as a circular buffer? When I look up circular buffers in particular, I get a few hits that sound like they may be what you're looking for:

* [https://github.com/mattsta/cbuf](https://github.com/mattsta/cbuf)
* [https://github.com/mdevilliers/ring\_buffer](https://github.com/mdevilliers/ring_buffer)",1541605624.0
narrowtux,RemindMe! 10 days,1541594204.0
vlatheimpaler,Any ballpark figure on the compensation?,1541943400.0
northrupthebandgeek,"I've actually been fiddling with one on my spare time (which is unfortunately scarce) that I'm calling OTPCL (Open Telecom Platform Command Language).  Inspired heavily by Tcl (hence the naming similarity).  I'm mostly doing it to teach myself how parsers work, namely by hand-writing the lexer/parser instead of the traditional leex/yecc approach (hard work, but Erlang makes this easier to do than it would be for most other languages).  Haven't tackled the BEAM compilation part of it yet, but it looks like Erlang makes that easy as long as I'm generating Erlang-like ASTs (since Erlang/OTP includes everything necessary in the standard library).

My New Year's Resolution this year was to have it usable enough for me to actually switch the Bitbucket repo from private to public.  Only two months left for that deadline :)",1541580346.0
param_module,"I read the source, I have a few nit picks. 

Number one, in horde make a generic Distributor behavior, your current default one that uses hash(pid) % N is very naive, 

Leave it up to the users to implement, and add p2c + jmp hash out of the box, before you even give me the I used it so I could dynamically look up the pid, that doesn't work well if there is a lot of churn so you don't even get that advantage. 

Number 2 in the crdt lib, you synchronize  them by treating them all as pids, and periodically calculating deltas and sending them to neighbors, this doesn't scale, like notifying 1000 peers and doing 1000 join decompositions every 5 seconds per crdt, isn't very efficient, I don't even think it's a good idea past 10 if you have a lot of data structures, and this is assuming distributed erlang pools or multiplexes connections.  

Number 3, this is a relative minor complaint but like I don't like the fact that you are depending on Distributed Erlang to keep your crdt's in sync, and it appears you are forcing it onto the users, distributed Erlang is problematic for large clusters, because it's full mesh every node is connected to every other node, which means the number of connections and the number of nodes they have to monitor is N ^ 2. 




",1541544741.0
shaolin_acc,"I’m like 90% of the way towards hopping on this train. I’m responsible for a smart-city / IoT system, mesh networks connected to gateways connected to our backend. I keep imagining using CRDTs to keep mesh state representations in sync on the gateways and backend servers, but the usual apprehensions about bleeding edge tech scare me off. Anyone have any experience with this?",1541520369.0
nietaki,"Thank you for sharing, u/derekkraan. I've been looking for an alternative to lasp/Riak Core and I look forward to reading more carefully about your approach for both DeltaCrdt and Horde.

&#x200B;

I'm very curious about the details of consistency guarantees of Horde and I'm happy to see \`UniformQuorumDistribution\` mentioned front and centre in the README :D",1541537764.0
Koala_T_User,London’s Elixir scene seems to be thriving. Hope to find a job there soon.,1541501969.0
h0lyalg0rithm,"I think its better to use guard statement 

[https://hexdocs.pm/elixir/master/guards.html](https://hexdocs.pm/elixir/master/guards.html)",1541441402.0
Jacuul,"If you're not opposed to regex ( which, this is exactly what it's used for ) you can use:

`^\d{2}$`

This will match all strings that are two characters long and consist of the numbers 0-9. You don't need to check character values under the hood.

The ""2"" in brackets can be swapped out for whatever length you need, for example, `{2,6}` would return true for any number with a length of 2 to 6, so 00 all the way to 999999.

You can test this out in the console with: `Regex.match?( ~r/^\d{2}$/ , ""00"")` and switch out the string for whatever you want to check.

Further reading is here [https://blog.grillwork.io/https-blog-grillwork-io-mastering-elixir-regex-e5b9f46671af](https://blog.grillwork.io/https-blog-grillwork-io-mastering-elixir-regex-e5b9f46671af) and I can try and answer questions if you need.",1541441421.0
UnknownVariable,"Probably totally not what you want, but I was playing around for a few minutes before leaving work..

    iex()> ""00"" |> String.to_charlist |> Enum.all?(fn x -> x in (48..57 |> Enum.to_list) end)
    true
    iex()> ""99"" |> String.to_charlist |> Enum.all?(fn x -> x in (48..57 |> Enum.to_list) end)
    true
    
    iex()> ""BA"" |> String.to_charlist |> Enum.all?(fn x -> x in (48..57 |> Enum.to_list) end)
    false
    iex()> ""9R"" |> String.to_charlist |> Enum.all?(fn x -> x in (48..57 |> Enum.to_list) end)
    true

But also the length of the initial string isn't checked so it will pass as long as all characters fit the range, regardless if it's two or zero or twenty of them",1541440217.0
smstrickland,Link doesn’t appear to work,1541475090.0
Lakehaus,Probably this: https://youtu.be/6Q9qY_TEteU,1541476415.0
mypetocean,"lol it's hosted on GitHub, what the hell",1541348672.0
,[deleted],1541098702.0
Schrockwell,"That’s not scary! Now a tree of Node dependencies, that’s what keeps me up at night.

Anyway here’s mine! https://twitter.com/Schrockwell/status/1054038420681641984",1541023646.0
ieatkittens,Thought I was in /r/magictcg,1541074412.0
schneidmaster,"> ActiveRecord is arguably the worst approach to deal with the database ever existed.

Really hard to take the article seriously with this opening. Worst ever? Really? Worse than raw SQL embedded in PHP views? I certainly understand that there are reasonable arguments against AR callbacks but this is an absurd bit of hyperbole that really detracts from the rest of the article (which is mostly interesting and insightful).",1540941096.0
p_r_m_n_,"To each his own, but no thanks. In my opinion the explicit nature of the repository pattern is what makes ecto great. Who knows what other stuff could be happening behind the scenes or what changes can be made over time. I just don't see the benefit outside of learning macros. I just don't see any value added. 

For example adding config to your schema and calling `Post.find(100)` doesn't gain much over `Repo.get(Post, 100) |> Repo.preload(:comments, :authors)` . I might be in the minority but I much prefer the repository pattern. I get its a convenience method but I personally don't want to see libraries (or codebases) introduce unnecessary complexity just because. 

I would much rather see this implementation happen in a context module rather than a macro for a schema.",1541001283.0
ClickableLinkBot,"##r/erlang
---------------------------------------------
^(For mobile and non-RES users) ^| 
[^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| 
^(-1 to Remove) ^| 
[^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)",1540903027.0
amarsuperstar,"I'd say roll your own with a Genserver before reaching for a library - it is always an invaluable learning experience.

I use something similar to José's answer here: https://stackoverflow.com/questions/32085258/how-can-i-schedule-code-to-run-every-few-hours-in-elixir-or-phoenix-framework",1540889278.0
FauL0x,"Option 1: Start a process as part of your application that does :timer.apply_interval/2 in its init/1 callback.

Option 2: Use the Quantum library.

I'd personally do Option 1 for these types of intervals",1540887274.0
sasajuric,"In addition to quantum, I've also built my own small helper for setting up periodic jobs called [Periodic](https://hexdocs.pm/parent/Periodic.html#content), which is included in the [parent](https://hex.pm/packages/parent) library.",1540888020.0
onmach,"I just use quantum.  It is easy to drop it into your config with cron syntax and then its just as easy to modify or create jobs programmatically.

Although if I'm using an interval that does not need to be tied to a minute boundary or long running process that couldn't be done simultaneously, I'd probably just use a GenServer with Process.send_after in the init and in the handle_info call to cause it to loop.",1540925127.0
benco420,"Best practice and learning experience to first go with the GenServer route IMO.

&#x200B;

Here is an older example app that you can use for research - [https://github.com/philcallister/ticker-elixir](https://github.com/philcallister/ticker-elixir)",1540931400.0
thibaut_barrere,"I only glanced over it, but I believe your `handle_info` implementation will suffer from a race condition: you are reading a record with `Repo.one`, then running a bit of code, then decrementing based on the value you read before with `Repo.update!` (value which may have changed in database between those two calls, especially if you have a large number of processes doing that operation in parallel).

Using a small delay rather than `1_000` and a large enough database pool will help highlight that (you could also add some `sleep` calls).

Quick ideas to fix this (because I don't have the code handy), I think you'll want to have a look at:

* `inc/dec` in https://hexdocs.pm/ecto/Ecto.Query.html#update/3
* `returning` option to return the `value` (probably)
* or playing with [transactions](https://stackoverflow.com/a/42153731/20302) in [isolation levels](https://keathley.io/elixir/ecto/2018/04/23/setting-isolation-levels-in-ecto-transactions.html) with Postgres etc",1540819263.0
,[deleted],1540857496.0
smstrickland,"Just curious, but pre ""MK50"" what language was you application written in that was failing you?",1541775595.0
mbuhot,"Great post, very thorough.

For dependencies that rely on compile time configuration, should the `config.exs` file be copied into the deps build stage? 

Love the idea of pushing the intermediate build stages to a registry to share between developers. Does it work for sharing dialyzer PLTs? That would be a big saving.",1540765805.0
vlatheimpaler,This is great! I'm really looking forward to the whole series.,1540831739.0
Alezrik,this is awesome! last week I started a game server project where I'm using Kubernetes/Minikube [https://github.com/Alezrik/game\_services\_umbrella](https://github.com/Alezrik/game_services_umbrella) anxious to see how you approach some things (as I was/am completely new to libcluster/swarm/kubernetes.,1540847184.0
mbuhot,"I think in-memory mnesia should “just work” once your nodes are clustered.

It also looks like there is some writable storage available in the container that runs your app, used for downloading releases and doing hot upgrades, so you might be able to persist a small amount of data there.",1540539699.0
mgwidmann,"Out of curiosity, why a new project instead of an ecto adapter? Would an ecto adapter not work?",1540563710.0
the_brizzler,"Take this with a grain of salt because my elixir skills are mediocre....but could you create an async task for this? [https://hexdocs.pm/elixir/Task.html](https://hexdocs.pm/elixir/Task.html) So you don't need to store the current state in a database you just wrap the processing call in Task.async() and then you can have it asynchronously wait for the response of ""pending"", ""complete"" or ""failed""....that way you are hogging up your resources waiting for that 15 second task to complete. ",1540430584.0
mbuhot,"How important is it to have a durable record of the in-progress tasks?

You can take a look at ecto_job for an example that uses GenStage with Postgres. https://github.com/mbuhot/ecto_job

If you don’t need durability for retires across VM restarts, then a GenStage Producer + ConsumerSupervisor with a max_demand setting should do the trick.",1540454257.0
qqwy,"The most important thing in a system like this, is that the user is aware of what is going on: A system does not feel 'slow/unresponsive' if the user has a progress bar (or even an incrementing timer! Useful if the progress is impossible to measure) to look at, and is notified both when the job is done, as well as when it has failed (and also when it goes from the waiting queue to the work pool). Phoenix makes this easy with its websockets :D. ",1540479758.0
aseigo,"Personally I just put an anon fun in the pipeline:

|> (fn name -> user: name end).()",1540393599.0
mbuhot,Why GPLv3 for a utility library? Wouldn’t that affect any applications that bundle it in an escript or distillery release?,1540418593.0
buleria,"Here's some inspiration for you dude
https://github.com/jonschlinkert/is-even/blob/master/index.js",1540589215.0
MrPopinjay,"A statically typed language for the Erlang VM

I've almost just the type inference algorithm working for the main language, now I'm just refactoring to clean things up a bit and to improve codegen using type annotations. Lots of fun :)

https://github.com/lpil/gleam",1540383974.0
nnomae,Just learning Elixir while writing a time management app using Phoenix which tends to involve a lot of googling. I haven't enjoyed web development so much in a long time. ,1540397001.0
Nicd,"Rewriting my blog engine using Raxx. WIP is at https://gitlab.com/Nicd/mebe-2

The old one (Mebe 1) was such a mess, trying to apply all that I have learned now (tests will be added, don't worry). Some of the code (engine side) is from the old version, will go through that to clean it up and document it as well.",1540375906.0
Alezrik,Started a game server project [https://github.com/Alezrik/game\_services\_umbrella](https://github.com/Alezrik/game_services_umbrella) while learning libcluster/swarm/kubernetes still building basic functionality but clustering/deployment was the first thing I tackled.,1540847285.0
jxub,"Doppelganger, a Elixir to Erlang code transformer. It already converts most of the simple Elixir code, but I still need to work on stuff like pipes and with blocks, and has some bugs (wrapping a function in parens for no reason).

&#x200B;

The idea is to build something like Java to Kotlin code transformer in IntelliJ IDEA, and integrate it with different editor extensions. And the reason for doing it is that it's pretty fun ;)

&#x200B;

Repo: [https://github.com/jxub/doppelganger](https://github.com/jxub/doppelganger)",1540554322.0
yawaramin,"I'm having fun building a stub server, [Stubbex](https://github.com/yawaramin/stubbex). Among other things, it can:

- Automatically record and playback stubs
- Store stubs in an hierarchical directory layout corresponding to the URL path structure
- Template stubs using EEx
- Diff stubs against the real responses
- Do JSON Schema validation of stub body schemas against real responses

I've already written a simple frontend test using it and [Cypress](https://www.cypress.io/) for an app that would otherwise need VPN access to develop; works like a charm.",1541384357.0
thedangler,"Lightweight knowledge base website for my service.  I might turn it into a SaaS product because it's a small niche.

This will be simple and clean.

I will be using the following:

1. Elixir
2. Phoenix
3. vuejs
4. postgresql",1542313346.0
mbuhot,New version of \[open\_api\_spex\]([https://github.com/open-api-spex/open\_api\_spex](https://github.com/open-api-spex/open_api_spex)) with support for validating polymorphic swagger 3.0 schemas. Moved the repo from my personal account to a new github org to promote shared ownership.,1540727847.0
redconnors,"I’ve been working on a game for a while, and I’ve finally got something worth showing:

[Future Butcher](https://www.futurebutcher.com)

It’s a Phoenix umbrella app that contains an Elixir engine and a web interface that’s essentially just a GenServer and Phoenix channels. The front end is written in Ember. 

I don’t get to work with Elixir, so it’s been a fun learning experience putting this all together.",1542735038.0
ravernkoh,*Arity,1540186879.0
hmans,The number of arguments that can/must be passed to them.,1540230325.0
mgwidmann,"> Client/Server is just another type of distributed system. What if the whole system can be treated as a group of processes that send messages to each other.

The biggest flaw with this thought process is that there is a very big trust boundary in-between client/server. Without a way to model and understand how to handle that trust relationship (rather than pretending it didn't exist) this cannot succeed. I suggest you make that a focus first.

Also, for an elixir project, don't start the readme off with JavaScript 🤪",1540147181.0
Trevoke,I think this is the same thing as the JavaScript code provided by Phoenix? Maybe? What's the difference?,1540137986.0
Paradox,"Why not just dump the browser and support X11. If we're going back to the mainframe-terminal model, lets use something that could work over a 300 baud connection",1540163425.0
ericlathrop,TIL that Ale is a LSP client. I just thought it ran linters.,1539920160.0
christianpoveda,"It is great to see elixir LS is gaining traction :). Does anyone knows if elixir LS is as good as Alchemist in terms of completions? I don't know if it was my fault, but last time I tried I couldn't get completion for external modules. ",1539940302.0
execb5,Just following the post and getting some configs from the author's vimrc didn't work for me. :'(,1539956255.0
kyusan,"Nice discovery but it seems it only works with mix project ? At least, my configuration doesn't work with single file like a exs script ;/",1540195907.0
Hauleth,Documentation is quite sparse. It would be worth expanding it a little. ,1539939306.0
derekkraan,Can you post the contents of the file you are using to run this? It seems like it's making that call at compile time. Tortoise won't be running yet at compile time.,1539821377.0
shaolin_acc,"I use this at work I can take a look at how I’m using it, watch this space ",1539822365.0
dipittydoop,"You probably need to start some kind of broker process in your application.ex. Then you can send messages to the process, or create child subscribers under the broker supervision tree. We'd have to look at the docs and code. ",1539823658.0
d4be4st,">When I look at the library it looks like a DynamicGenserver but when I use mix run should this genserver not already be running anyway?

No. DynamicGenservers are started dynamicaly, unlike regular Genservers where you have to specify which genserver to start in your application.ex. If you want to start all your DynamicGenservers than you need to manually start them.

i have something like this in my application.ex:

    def start(_type, _args) do
      import Supervisor.Spec, warn: false

      sup = Supervisor.start_link([
        supervisor(MyApp.Server.Supervisor, []),
        {Registry, keys: :unique, name: MyApp.Server},
      ], strategy: :one_for_one, name: MyApp.Supervisor)

      MyApp.Server.restore_all()
      sup
    end

and in my my_app/sever.ex:

    def restore_all() do
      servers = fetch_a_list_of_servers_from_db
      Enum.each(servers, fn(server) -> Supervisor.start_child(server) end)
    end

",1539864384.0
ihumanable,"[put_in/3](https://hexdocs.pm/elixir/Kernel.html#put_in/3) can do this in a much more concise way, especially if you use a helper function of some sort.

Here's the basic version

    iex> inventory = %{
      cameras: %{
        ""Canon"" => %{10004 => ""Canon 50D""},
        ""Nikon"" => %{10001 => ""Nikon D90""}
      }
    }
    iex> put_in(inventory, [Access.key(:cameras, %{}), Access.key(""Canon"", %{}), Access.key(10_005, %{})], ""Canon 80D"")
    %{
      cameras: %{
        ""Canon"" => %{10004 => ""Canon 50D"", 10005 => ""Canon 80D""},
        ""Nikon"" => %{10001 => ""Nikon D90""}
      }
    }

You can further improve this by noticing that the middle part has a lot of repeated code, let's introduce a helper to DRY that up

    iex> lazy = fn keys -> Enum.map(keys, &Access.key(&1, %{})) end
    #Function<6.99386804/1 in :erl_eval.expr/5>
    iex> put_in(inventory, lazy.([:cameras, ""Canon"", 10_005]), ""Canon 80D"")
    %{
      cameras: %{
        ""Canon"" => %{10004 => ""Canon 50D"", 10005 => ""Canon 80D""},
        ""Nikon"" => %{10001 => ""Nikon D90""}
      }
    }

This works for every other example in the blog post as well, and to my eye is far more readable and compact.",1539749957.0
limbsflailing,Good practical post,1539729842.0
Hauleth,"My only gripe with Elixir `Logger` is fact that it is completely separate from Erlang’s logger. I need to configure them separately. Before OTP 21 it was quite understandable as Erlang logging system was a little bit old and convoluted, but now the two share quite a lot. So now we have two almost identical systems which are completely independent from each other and changing that can be hard. Another issue for me is that Elixir logger has only 4 debug levels instead of 7 like the Erlang one (based on syslog protocol). ",1539759710.0
world_on_wheels,Link is broken.,1542592176.0
derekkraan,I love comprehensive blog posts like this one.,1539620194.0
transmut_nina,What is the current protocol used by elixir/erlang for IPC ?,1539586306.0
MrPopinjay,"> The reason this feature had not been added to ethereumex before is that the dogma around IPC with Elixir is that it couldn’t be done

Nonsense! Nothing forces us to use the network, as you've proven here. :)",1539602088.0
whitfin,I recently updated Cachex with sharded support for multiple Erlang processes; figured I'd write up a little about it with an example you can try out to see it in action! ,1539472383.0
benco420,"Nice write up.

“What's even better is that there is practically zero overhead for those people using a cache on a single cluster; “

I think you mean single node?
",1539493062.0
Trevoke,Thanks for your continued work on this!,1539489773.0
beardedeagle87,Nice work!,1539491973.0
dtria,"> This was fairly substantial, especially then you look back and compare it to the current Cachex benchmarks.

Perhaps you mean _when_ you look back? Great read btw!",1539588580.0
selfup,"Wow this is cool I guess I reinvented the wheel here with https://github.com/selfup/smache lol

I'll take a look at your repo and see how you handle the self sharding. I am currently using the modulo (rem) of a key compared to Node.list
",1539627166.0
selfup,Great intro,1539410356.0
selfup,Thanks for this!,1539410338.0
hswick,"Don’t listen to the Elm haters. It is really well designed and Evan is a genius. It takes time getting used to it, but the Elm architecture does most of the thinking for you which is great.",1539373266.0
havord1,"How would I approach this to get a working react configuration, preferably with typescript support? Does anyone know? (I'm new to webpack and frontend in general)",1539518620.0
k-selectride,Elm? No thanks I don't like writing lots and lots of boilerplate.,1539364489.0
Nanosleep,elm is a dead meme,1539366520.0
purephase,The WINDOW support is awesome. Really like the implementation here. Great work (as always).,1539297525.0
nubunto,"Awesome!
I thought we were getting a ""sneak peek"" in LiveView for Phx 1.4, but I think I was mistaken.

Edit: typo",1539127258.0
,[deleted],1539082884.0
lucasvandongen,I would like to have a version in text about this,1538921717.0
Ayrat555,This guy looks like he can cook a delicious pizza,1538985954.0
emergent_reasons,"I haven't worked across multiple VMs yet. I guess you are talking about something like protobuf/RMQ for serialization and transmission? Or does the VM have some built in facility for passing to another VM?

Thanks for the video!",1538961651.0
qqwy,"So my question to you is then: Why use :httpc rather than HttpPoison or HttpPotion? Those are two libraries on HexPM with great Elixir bindings and documentation.

But yes, in your example, it definitely is the network tgat slows down this task, rather than your code itself.",1538905762.0
svartkonst,"I'm not an Erlang or Elixir pro - More like a wet-behind-the-ears rookie, but I'm not sure I agree with everything in the post - Could some of your friction be simple inexperience?   


The effort to rewrite parts in other languages is commendable and a good exercise, but for such a small program, ""it should be faster in X"" is likely flawed when the majority of the speed loss stems from uncontrollable factors (such as disk I/O or network speed).   


You write that: 

>Erlang's :httpc.request – which it turns out has four parameters…  
>  
>`:get, {url, query}, [], []`  
>  
>and   
>  
>`:post, {url, headers, content_type, body}, [], []`  
>  
>both seemed to work, but I had to work that out, you wouldn't know it from the [""documentation""](http://erlang.org/doc/man/httpc.html). I'd show the rest of the code but working out those parameters really was most of the effort.

But - the documentation is fairly clear about this? Looking at the sidebar, it lists: 

>request/1  
>  
>request/2  
>  
>request/4  
>  
>request/5

Which already tells us that there is a method called `request` which accepts 1, 2, 4 or 5 arguments. Looking at the documentation for the method, I'm not sure what they mean by `request(Url) -> request(Url, Profile) -> {ok, Result} | {error, Reason}` exactly, but it seems to indicate that you put in a URL, and get a result back. It also states that this method is ""Equivalent to `httpc:request(get, {Url, []}, [], [])`.""

Just beyond that, you have similar notation for the 4- and 5-argument versions, e.g. `request(Method, Request, HTTPOptions, Options, Profile)`. 

The definition of Request is outlined, too: 

>request()  
>  
>= {url(), headers()}  
>  
>| {url(), headers(), content\_type(), body()}

headers, in turn, are defined as a list of `header()`s

>headers() = \[header()\]

and header()  is defined as

>{field(), value()}

which are in turn defined as 

>field() = string()  
>  
>value() = string()

So, all told, I'm not sure I agree that the documentation is user-hostile and worthless. We just pieced together how to make a request, with headers for authentication, just from the API reference!

You do touch upon that Erlang strings need to be converted to character lists, and I won't deny this as a possible pain, but even I know that Erlang is.... not great at managing strings, so this shouldn't be too much of a surprise. Still annoying though, I'll give you that.   


Then you end the post with some conflation: You begin the post by talking about how you wanted to move to Elixir for speed. Then you utilize straight Erlang libraries and function calls and detailing the pain points you stumbled upon using Erlang, and end by saying that ""moving to Elixir \[didn't offer much\]"" - But you moved to Erlang, not Elixir? I know for a fact that Elixir has way better string handling and a bunch of libraries (Like HTTPoison) that makes simple requests like this very easy to handle. 

&#x200B;",1538909843.0
Nixonite,"Erlang has good documentation, I have no idea why you're complaining. Those parameters were well explained

For your example httpc:

http://erlang.org/doc/man/httpc.html

The request/4 function is on that page and tells you exactly what the types are for the arguments.

At the top of the erlang man pages for libraries - it shows you what values are accepted for each type.

It's literally written there. ",1538906744.0
mikekreuzer,"I blogged. About trying to use Elixir to get a speed boost in a short running script (spoiler: I didn't get it) and my adventures with Erlang's ""documentation."" The latter probably not news to anyone who's spent any amount of time moving between Elixir's genuinely excellent docs and Erlang's... ""docs"".",1538904891.0
AsFarAsItGoes,"Thanks for making these educational videos, I really feel like we are missing easy to follow kind of intermediate content of this format in the elixir community right now.

I would have loved to see an example of things being comparable, maybe just an iex session with your voice explaining what is going on.
Also I still don’t really understand how comparability can be well defined, but actual compares seem to be random.

As a very good example of easy to understand and follow videos on intermediate to advanced level programming is Avdi Grimm in the Ruby community. He has some [free content on ruby tapas](https://www.rubytapas.com/category/freebies/)  if you want to check it out.

Please don’t take this as a negative feedback, I would really like to see you improving and keep contributing this kind of content! Keep it up 👨 ",1538754261.0
mbuhot,Why post this in /r/elixir ?,1538737067.0
acconrad,Thanks for adding my verifying signatures post to the newsletter!,1538708630.0
,Not that I've ever seen.,1538708682.0
ScrimpyCat,"While there's no syntactical element to inform to the compiler that those expressions are grouped together (as is the case in Erlang). The compiler will expect functions to be grouped together and if not will give a warning (IIRC it's a warning and not an error). While that wouldn't detect your mistake, it would catch a mistake if you had say another function above `print_multiple_strings` that was called `print_multiple_times`. 


Other than that you do have a few options. 

The first (and really only one I'd suggest) is dialyzer is able to catch infinite recursion if you have code that is expecting the function to return. 

The other two ideas are more just examples that it's possible but not really suggested. 

You could create a macro that checks all definitions in the body passed to it to make sure they all have the same name. This would solve your issue exactly. But now you have this abstraction that newcomers to your codebase won't understand and will need to lookup your macro to understand. 

Or add a compiler callback for the module and check if there's any function definitions next to each other that have some similarity in their name (to a point where you would consider it to possibly be a typo). Wouldn't catch all mistakes (say if the two names were entirely different), although there's probably some other behaviour you could check for. ",1538860224.0
Afriend4Lyfe,"""Tag instances of bigotry, ad hominem attacks, sexual harassment."" How did you accomplish this?

Also, I thought the random super hero names in the demo chat was cool.",1538806819.0
d4lz3ny,"How useful will this be when LiveView rolls with Phoenix?

Or am I just talking non sense in comparing them ?",1538707282.0
tirvinajx,but you can construct types with tuples and atoms. This can lead to better and safer code,1538683115.0
timezone_bot,"2:00 PM EDT happens when this comment is 1 hour and 33 minutes old.

You can find the live countdown here: https://countle.com/bWSspTFDr

---

I'm a bot, if you want to send feedback, please comment below or send a PM.",1538584010.0
alchemistcamp,The second link is broken. I'd love to check out the stream though. ,1538586146.0
renrutal,"GitHub has a [hacktoberfest](https://github.com/topics/hacktoberfest) topic where they also look for open issues with the label ""help wanted"". There aren't many [Elixir ones](https://github.com/topics/hacktoberfest?l=elixir) listed.",1538521595.0
jaymonster138,"I opened an issue on a project that I help maintain. It is an Elixir [Gremlin](http://tinkerpop.apache.org/) Driver.  


Setting it up and trying it out yourself without knowledge of graph databases might be a little much but if you look at the example PR in the issue, you can see how simple a lot of these functions could be to submit PRs for.  


[https://github.com/Revmaker/gremlex/issues/46](https://github.com/Revmaker/gremlex/issues/46)",1538525341.0
altyaper,[https://github.com/echavezNS/conekta-elixir/issues/7](https://github.com/echavezNS/conekta-elixir/issues/7),1538616502.0
emergent_reasons,"As a newbie, I didn't know that. Thanks for sharing it. Are you the maker of the video?",1538553869.0
Sentreen,Might be worth noting that this is only the case when you pass messages around within the same VM instance. Once you pass messages outside of that bubble (i.e. to another vm instance) any data will have to be serialized and copied.,1538585842.0
tirvinajx,https://goo.gl/forms/U8h58Snvb3h2aB0E3,1538683123.0
Paradox,"Why not move the whole verified up into a plug? I assume that its something you're going to need to do for every request the bot makes to your endpoint, so you could handle it all at a plug layer and not have to worry about it in your controllers",1538538878.0
AlpineCoder,"Nice. I've used Ecto successfully for validating / handling API results casting and it works well, so I think separating the DBAL from the ORM is a good idea for those sorts of uses.",1538425439.0
,[deleted],1538433080.0
tweettranscriberbot,"^The linked tweet was tweeted by [@wstucco](https://twitter.com/wstucco) on Sep 30, 2018 19:42:41 UTC (19 Retweets | 73 Favorites)

-------------------------------------------------

I was wondering if I could create something similar to Flash movieclips with \#ScenicUX and accidentally made Shadow of the Beast 



Thanks to [@BoydMulterer ](https://twitter.com/BoydMulterer ) GUI programming is fun again 

\#ScenicUX is just great



 \#myelixirstatus 

[Attached video](https://video.twimg.com/ext_tw_video/1046485308219559936/pu/vid/888x720/AY0xc60Z62RpACdn.mp4?tag=5)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1538392685.0
techannonfolder,"git: https://github.com/boydm/scenic
",1538398097.0
makis,"The code is online for those interested 

&#x200B;

[https://gitlab.com/wstucco/scenic-sotb](https://gitlab.com/wstucco/scenic-sotb)

&#x200B;

And thank you anonymous friend for the Gold ",1538419927.0
ABC_AlwaysBeCoding,"ha, that didn't take long!",1538405358.0
rolaandoes,"What about [scenic](https://github.com/boydm/scenic) for [Nerves](https://nerves-project.org/)? There's a lot going on with that, the whole device runs on nerves and the GUI is built with scenic or even Elm. But idk, I'm also a n00b. But 💯to the web app use. I want to build something using Phoenix, one day",1538339794.0
kioopi,"According to this video this seems to be the list of things not to use BEAM languages for:

 * computation heavy tasks
 * desktop GUI apps 
 * mobile apps
 * shell scripts
 * deep learning",1538381453.0
hswick,"My library has reached a point to where I feel it can be used for serious projects, and I wanted to share it with the larger community. My hope is that developers with a basic understanding of Ethereum and working with Smart Contracts will be able to get started quickly.",1538244334.0
Aguxez,"Great stuff. I’m developing a dapp at the moment and even though we’re very ahead on it I’ll be considering to include this in the back-end, maybe for simple read operations for checks, who knows. ",1538279622.0
tmjoen,"Try accessing them with `static_url` in your template:

`<link rel=""stylesheet"" href=""<%= static_url(@conn, ""/css/app.css"") %>"" />`

or

`<link rel=""stylesheet"" href=""<%= Routes.static_url(@conn, ""/css/app.css"") %>"" />` if you're on master/1.4

Also, if you're not using any build tools, you have to place your files manually in ""priv/static"", I guess?",1538209477.0
Schrockwell,"The static assets are served at the root of the URL, without the /assets/static part: e.g. /css/app.css.",1538199604.0
Nicd,"Optional parentheses are more of a technical thing now. It allows you to write `if foo, do: ...` instead of `if(foo, do: ...)` for example. Many language features rely on that to look nice.

Optional parentheses for your custom functions are not suggested because they very easily make code ambiguous or hard to read.",1538020222.0
ihumanable,"For what it’s worth, `mix format` has very little configurability, but one of the options it does have is `locals_without_parens` which allows you to define a list of functions that should not have parens added.

This option is what allows tests to have code like `assert foo` without the parens.",1538019731.0
renrutal,"Well, `mix format` came in 1.6, and I believe the optional parentheses are pre-1.0. Dropping them now might break some older code.

They are still required in anonymous function calls, though.",1538019084.0
EldritchSundae,"I don't think of it as the one true style, more a lowest common denominator when team cohesion is more important than personal aesthetics.

I have very opinionated, well-reasoned stylistic preferences in many languages. That goes out the window in large or collaborative projects where agreeing on a standard—any standard–speeds things up by allowing everyone to look past syntax when code changes hands. But when I'm working on personal projects, I write the way I think so I can get back into it even faster.

It's nice to have both.",1538021139.0
ExpensiveHumor,"Remember Elixir has very few keywords. Every time you use `def`, `defmodule`, `if`, `case`, `receive`, etc without parens, you are using the optional parentheses feature. If you actually added parens everywhere they were required, it would look quite verbose:

    defmodule(Foo) do
      def(bar(a, b)) do
        a + b
      end
    end",1538031415.0
SamplingCheese,"I'm surprised no one has mentioned that you can import formatter configs from dependencies.

For instance, to tell `mix format` to not add parens around ecto schema definitions, you can add this to your .formatter.exs

    import_deps: [:ecto]

[https://hexdocs.pm/mix/master/Mix.Tasks.Format.html](https://hexdocs.pm/mix/master/Mix.Tasks.Format.html)",1538097764.0
tastygoods,Idiomatic Elixir is still somewhat young and evolving.,1538018927.0
cthree87,Just mix format. Then it doesn’t matter. ,1538086497.0
lswith,"They don’t really deep dive into their elixir architecture other than to brag about the stats. I’d love to see if they are using genservers to maintain their state, if they are using a cluster of erlang nodes, and if there are any databases in the mix. ",1537947645.0
swiftsubetei,the site has that crisp response feel of a phoenix app,1537804173.0
putin_your_ass_,"I have that problem with pattern matching every single opportunity =)

Very nice article!",1537866410.0
reddlad,@davydog187 good article ...to the point,1537797486.0
sebdd,"Great article! I’m curious, what parts of The Outline are you using web sockets for? Are they an important part on the main site, or mostly for CMS things?",1537808107.0
dc0d,Very nice and informative write up! Thanks for sharing!,1537858805.0
MrPopinjay,"A statically typed language for the Erlang VM :)

https://github.com/lpil/gleam",1538868501.0
Tangui_,"A set of plugs for API access control (and for training - first libs), including:

* Authenticators: HTTP Basic, OAuth2 Bearer RFC7662, OAuth2 JWT RFC7523, TLS client certificate
* Filters: throttler, IP whitelist/blacklist",1538255305.0
synthesezia,I'm working on a multiplayer movie guessing game. React frontend connecting through websockets/channels and using a GenServer to manage each game.,1538828763.0
mattg2425,mythicgaming.net,1538101205.0
ijunaid8989,Working on Elixir application on K8s with Docker.,1539240444.0
bcaccinolo,"Learning new technologies has to be fun!  


When I have implemented 'mini-jurisdictions', my goal was to learn how to create a fast api with the language #elixir. I have learnt about Plug and Cowboy.  


I have also discovered how Ecto is nice, for example Ecto.Multi is easy and great to use. I'm just scratching the surface cause I've not used yet the changesets.  


I've also done a small front with React. It gave me the chance to enhance my #react competencies with a better understanding of the container/component structure :)  


[https://github.com/bcaccinolo/mini-jurisdictions](https://github.com/bcaccinolo/mini-jurisdictions)  


&#x200B;",1539244500.0
tuplelife,An update to a Cheat sheet I released a year or two ago for novice to moderate level to elixir.  Hopefully done in a week or two.  So much info to digest since Elixir 1.2.4,1539651055.0
yawaramin,"I'm working on https://github.com/yawaramin/stubbex , a stub server for HTTP service virtualization. What I think is cool about Stubbex is that it's zero-config and tries to just 'do the right thing'. For example, to start stubbing and immediately serving an endpoint, open http://localhost:4000/stubs/https/github.com (e.g.) in your browser. Stubbex fetches it and saves it for next time. You can find the stub files in `stubbex/stubs/...` organized by host and endpoint.
",1540355494.0
edgar971,I can help you out. I have been writing Elixir and Phoenix for about 2 years.,1537583757.0
thread,"I would be willing to help, too. I'm 3 years in and can probably answer some questions. ",1537585515.0
mijailr,"I'm searching for a coding group (a group to do something deployable like real life project, but for learning) Let's start a project and learn by doing in group. We can make a Telegram group to start and then an organization in GitHub. The product to deploy may be a platform to organize coding groups (meta coding group). Who say yes?

The project is non-profit. And the time expended is on you for the learning. We need some roles to define, but first we have to decide this together.",1537631712.0
tieubao,"We have been working with Elixir for 2 years and we have a training program for interns and juniors who want to learn it. 

Contact me at han@dwarves.foundation",1537632761.0
tyurok,"If you make it open source, you can definitely get some decent help in slack / IRC.",1537636854.0
gasparch,"Hey :) check out my channel - [http://twitch.tv/solutionops](http://twitch.tv/solutionops) and I'm more that stream answers to your questions :) 

If you need private consultation - drop me a message.",1538342782.0
alexjerez,Udemy has a great Elixir course! if you wait around for a special you might be able to get it for ten bucks.,1537591224.0
TextileWasp,"It depends. Phoenix is going to work and it has a good community/docs around it. 

For the DIY approach you may want to look at Cowboy + Plug (also Phoenix uses Plug)",1537455151.0
Schrockwell,"```
mix phx.new --no-html --no-brunch
```

You should absolutely utilize Phoenix for something like this. It is not heavyweight at all - only about 40 files in total. If you attempt roll your own - no matter how simple - you will inevitably end up reinventing the wheel with regards to boring things like routing, content types, error handling, rendering of JSON views, and so on. Save yourself the headache and utilize the existing tool, along with the growing ecosystem around that tool.",1537459484.0
MrPopinjay,I'd likely just use Plug directly. There's a lot of extra rules and convention for Phoenix and I don't think it's worth it unless you're generating HTML.,1537465058.0
floatboth,Using Plug directly is good,1537474023.0
mbuhot,"If it’s your first elixir project, then just go with Phoenix. It is built to be familiar to anyone with experience with MVC style frameworks, and doesn’t incur any performance overhead.

The bigger learning curve for me was Ecto, particularly Changesets. It’s great once you wrap your head around it, but is different to other ORMs I’d used.",1537482042.0
crowdhailer,"(Creator of Ace here)

Ace is not a framwork.
Compared to Phoenix it has less opinions and less magic(macros), but you have to sort out more things on your own.

Not that phoenix has much bad magic/opinions, but it does lead you to certain folder structures and you have to opt of certain things rather than adding what you need as you go along.

In terms of maturity there are several people running Ace in production, we have been for over 18 months and where not the first.

If you want to ask more questions the #raxx slack channel is a good place.
https://elixir-lang.slack.com/messages/C56H3TBH8/",1537542037.0
mgwidmann,"Being new I'd suggest Phoenix because the community support around it is the strongest by far and it will for sure get you what you need with a simple codebase. For your project, there's really no downsides.

People always say they prefer something ""lighter"". There's no evidence that any of these frameworks are actually in any way less taxing on performance or productivity. There has to be a trade off for it to be worth it to move away from the most community supported, well documented and well maintained framework. With Rails to Sinatra or Grape (among others), there are benefits. But those benefits only exist, because of how Rails is built, how opinionated it is, unlike Phoenix which is not built the same way. Theres not a correlation here, Phoenix is not Rails and Raxx/Elli and whatever else are not Sinatra. People are looking for something that doesn't exist, which is what created those frameworks, not an actual need that Phoenix couldn't fulfill.",1537507068.0
ataboy,I've heard some folks like [Raxx](https://github.com/crowdhailer/raxx) for something more simple than Phoenix.,1537458309.0
mbuhot,Nice use of ecto_mnesia! I’ve been wondering lately if using ecto_mnesia with in-memory tables would be a more pleasant experience than direct ETS queries with the cumbersome matchspec tuples.,1537405098.0
ezekg,"Ruby guy here—Elixir really does look like a great language. Do you plan on adding metrics/tracking? I feel like that’s bitly’s main selling point, right? I mean, nobody is shortening links just to shorten them. It’s mostly for marketing purposes.",1537411537.0
doraeminemon,Cooool. I'd love to have a personal server to do this. ,1537418172.0
onesneakymofo,TIL I can make some serious cash for a simple service.,1537500546.0
Schrockwell,"observer_cli really has been a lifesaver for getting memory and CPU usage down on production nodes. I couldn't get forwarding to work with the GUI observer, and this is the next best thing.",1537369665.0
sb8244,"This is one of my favorite modules to install on a new production app. 

&#x200B;

In addition to the level of stats it gets me in a production node, a feature request I requested was built within a few days, and I really appreciated that!",1537392655.0
k-selectride,"Gigalixir is a really nice service though it is a little expensive, but the free tier is quite generous. Having said that, you absolutely get what you pay for, and Jesse (the owner) is awesome and will work with you to get things working if you're stuck.",1537367750.0
mbuhot,"Great to see new features coming to the platform since the initial release. AWS support, free tier, mix mode. 👍",1537404807.0
G4BB3R,Frontend was coded in Elm. For this reason I will give a try :D,1537545260.0
tastygoods,"Sounds like a good start, do you have a live demo running somewhere?",1537302712.0
,[deleted],1537365511.0
tewls,"Disclosure I'm the author, but an already open sourced implementation of something like liveview exists with https://gitlab.com/dgmcguire/texas - its as far from a rails rjs implementation as react is from jQuery

Also I believe drab has some parts of it that are like rjs, but I've been told drab.live is very much like liveview/texas",1537572991.0
Owl_Bear_Snacks,"Positive reaction: “I could have used this for form validation three months ago.  Nice!”
Negative reaction: It’s turbo links and something trying to beJSX.
Actual reaction: I don’t want to discourage this work or comment on a lib I don’t even require in any project yet.

Seems neat, I haven’t watched the key note. For like jquery replacement...sure why not.  What I really want is a native Dart or something concurrent, fun and high level in the browser native.  :/  Webpack with a god-killing Babel ES42 preset while I ride my laser bike in the year 2029.",1537341374.0
Shenrak,Could this be used in a complex chat app? I feel that it could do the job... ,1537357830.0
mgwidmann,"I think it's important to weigh the costs and benefits of this versus just using something well maintained like Phoenix. Time spent performing this work is certainly a resource here and one that is the largest cost in ""rolling your own"". 

But I think people too often make the calculation that ""bringing in the whole library"" is somehow heavy or costly. There are upgrade and other small maintenance costs that can be associated with this path but a historical look at the framework can tell you how much that is (and honestly it is spread over a longer time period and so is easier to absorb). Other than that, the BEAM won't load a module's code if it's never used and Phoenix itself is actually quite small, so I don't see the benefit. 

To prove the value of this you'd have to justify either some performance gain, which would likely be negligible unless you have some extreme use case or a maintainability cost that is more difficult to quantify. There are plenty of gotchas with rolling your own which Phoenix has tried hard to smooth out or eliminate.

In the end I think this is still a choice each person must make. I often believe the justification for not using Phoenix is ever calculated correctly, and I'd be more inclined to see an article reasoning about that then this.",1537291817.0
shibuyamizou,Thanks for the write up! I was thinking of doing the same.,1537282281.0
Elusiveblade,"In a talk by José, he mentioned that services like Heroku aren't great for elixir due to the cores being distributed, and recommends using services where you can get whole machines.

Does this address this? If not, have you had any issues related to this? ",1537296154.0
CBedzz,"Directly rom the Phoenix docs, lots of reasons why Heroku may not be a proper solution:

Limitations

Heroku is a great platform and Elixir performs well on it. However, you may run into limitations if you plan to leverage advanced features provided by Elixir and Phoenix, such as:

* Connections are limited.  

   * Heroku [limits the number of simultaneous connections](https://devcenter.heroku.com/articles/http-routing#request-concurrency) as well as the [duration of each connection](https://devcenter.heroku.com/articles/limits#http-timeouts). It is common to use Elixir for real-time apps which need lots of concurrent, persistent connections, and Phoenix is capable of [handling over 2 million connections on a single server](http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections).
* Distributed clustering is not possible.  

   * Heroku [firewalls dynos off from one another](https://devcenter.heroku.com/articles/dynos#networking). This means things like [distributed Phoenix channels](https://dockyard.com/blog/2016/01/28/running-elixir-and-phoenix-projects-on-a-cluster-of-nodes) and [distributed tasks](https://elixir-lang.org/getting-started/mix-otp/distributed-tasks-and-configuration.html) will need to rely on something like Redis instead of Elixir’s built-in distribution.
* In-memory state such as those in [Agents](https://elixir-lang.org/getting-started/mix-otp/agent.html), [GenServers](https://elixir-lang.org/getting-started/mix-otp/genserver.html), and [ETS](https://elixir-lang.org/getting-started/mix-otp/ets.html) will be lost every 24 hours.  

   * Heroku [restarts dynos](https://devcenter.heroku.com/articles/dynos#restarting) every 24 hours regardless of whether the node is healthy.
* [Remote shells](https://hexdocs.pm/iex/IEx.html#module-remote-shells) and remote observer are not possible.  

   * Heroku does not allow SSH access to your dynos so you can not inspect, debug, or trace your production nodes using things like [the built-in Observer](https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html#observer).

If you are just getting started or you don’t expect to use the features above, Heroku should be enough for your needs. For instance, if you are migrating an existing application running on Heroku to Phoenix, keeping a similar set of features, Elixir will perform just as well or even better than your current stack.",1537580144.0
MajesticNail,Isn't the whole point of Mox to force people to use behaviours? There is even a whole article written on why using mocks without contracts/behaviours is a bad idea™: http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/,1537138290.0
Hauleth,You should add link in your post so people do not need to google the name themselves. ,1537138038.0
hswick,I don’t see why you couldn’t. Just think about your Elixir backend as an API and the Android app as a consumer of that API. ,1537139329.0
Aguxez,"What's been said already, just use the Elixir back-end as an API and send the requests from the application to that back-end. I suppose that you fixed it but I'd like to highlight some errors in the block of code you posted in your blog.

1. You're not assigning `pid` to anything in `start_link/1`
2. You forgot to add the function that `handle_call({:add, lvalue, rvalue}, _from, state)` will handle.",1537139817.0
888ROSSULBRICHT,Your definition sounds like an Android app using retrofit to communicate with a RESTful API written on Elixir + Phoenix,1537178651.0
rameramwe,any updates?,1542033467.0
MrPopinjay,Is there a text version of this content available?,1536961163.0
icehaunter,Is this just a rendering of the page in headless chrome and sending it to the client? (Apart from caching and all that). Or do you actually do rehydration on the client and all that? ,1536994052.0
dj_goku,"Is the existing project Phoenix based? If so just add the channel (The mix task should tell you were to change a few lines of \`user\_socket.ex\`):  
\`mix phoenix.gen.channel Room\`  


Seems reasonable if you are going to allow more than 2 players to play/watch a board game to use channels since you can broadcast a message and all interested parties listening on that channel get the message so you don't have to send messages individually per connected user.",1536946940.0
lucasvandongen,Funny how I decided to use Elixir for a similar project without even knowing Discord was using it too. It wasn't a tough sell luckily but a Big Name using something is always better.,1536925740.0
Shenrak,I really hope elixir will grow :p,1536934503.0
IloSophiep,Your article is lots of fun to read and at the same time very interesting..!,1536916047.0
Ubik415,"I found this really helpful as a noob, no feedback other than a thank you :)",1537830743.0
Kunal4892,Extremely useful! Thankyou for the post.,1540154217.0
eduanlenine,It's funny because the Elixir collector is related to this: [clashroyale.wikia.com/wiki/Elixir\_Collector](https://clashroyale.wikia.com/wiki/Elixir_Collector) lol,1536722175.0
mbuhot,"Looks great! I was just checking if the ecto dependency was optional, then I see 

          {:ecto, ""~> 2.2.0"", potional: true},

Such a perfect typo for Elixir! :)",1536526237.0
Shenrak,It's heartwarming to see interest in that language,1536566388.0
puppet_pals,This looks really cool!  I haven't had a chance to look at it in depth but at a first glance it looks awesome.,1536516944.0
MajesticNail,"You have to execute a script or eval some code. So it would be any of these:

    # Inside the file you read System.argv
    mix run path/to/file.exs 3 4

    # This is equivalent to above but makes the argv more explicit
    mix run path/to/file.exs -- 3 4

    # Using eval
    mix run -e ""MyApp.sum(3, 4)""

    # Mixing both
    mix run -e ""MyApp.run_sum(System.argv)"" -- 3 4
",1536512119.0
Bogl3,"I assume that OP wanted a how to on doing your own mix task, check the documentation for Mix Tasks! [https://hexdocs.pm/mix/Mix.Task.html](https://hexdocs.pm/mix/Mix.Task.html)  


&#x200B;",1536763294.0
Mr__B,"You can look at escript

&#x200B;

[https://elixirschool.com/en/lessons/advanced/escripts/](https://elixirschool.com/en/lessons/advanced/escripts/)

&#x200B;

It makes an executable and you can run that from command line.",1537889031.0
tastygoods,"Good luck and welcome. Elixir on the BEAM is a joy to use. 

The main things to remember are that a process (often via GenServer, or Agent, or Task) always holds your state, or is the basic primitive of getting things done, kind of like the instance part of an OO object, but we can have millions of them.

Then, you push that state around, usually either by tuples, lists (Perl arrays), maps (Perl hashes) or structs which are like named maps with a predetermined shape (specific fields you define ahead of time, similar to the properties part of an OO object), and modules which of course would approximate the class of an OO object.

Basically we separate the class and the instance, for modules and structs, and then instead of the object operating “on its own” we use a fully isolated and independent process (like an OS level thread) to update data.

HTH.
",1536481889.0
mypetocean,"I don't have a terribly similar background — other than starting with BASIC and being on the LAMP stack for a while. 

But ""Spiderman senses"" was my experience as well. I think Elixir is a job-safe direction. It's a sane and dev-friendly choice in a world which has found it needs to stack cores to get the performance it requires. 

The ecosystem is a little young yet, but *if* this becomes an issue, it is mitigated if you're willing to fall back on the Erlang ecosystem, write your own implementations, or (if you really have to) use a microservice built in another language. 

You're going to find that Elixir has borrowed *somewhat* from OOD, though that may just be ""the good parts"" for you for all I know. But yes, the functional paradigm will be a new wrinkle. For me, too. But it's an exciting one I'm eager to tackle. ",1536481584.0
remy_porter,"> I will have to learn it and implement something for a client (I'm freelancing at the moment)

So, until recently, I was doing a lot of freelancing. I found a magic secret to learning new tech stacks. When the recruiter you're working with says, ""Do you know $X?"" you say yes. You always say yes, especially if it's something you want to learn anyway. Never outright lie about your experience, but maybe exaggerate a little bit. NB: This only works if you don't fuck it up, so practice learning things. Learn new things all the time. Experiment constantly. Then, when you pick up an Elixir contract, you might not actually know Elixir, but you can cram enough in the course of a weekend to pretend like you know what you're doing.

I've done a *lot* of contracts in technologies I've never used until the day I showed up to work. My clients were generally very happy. I stopped freelancing because I did a lot of work at client sites and was on the road more than I wanted to be.",1536505233.0
d4lz3ny,"Elixir is so good that even a beginner like me could spot it, you've made a good choice in choosing it to learn.

I spent like 7 months on JavaScript, half the headache wasn't worth it when I started Elixir, where I got things done faster and had a less stressful programming environment, in short, Elixir is the future. Welcome to the community :)",1536511329.0
dipittydoop,"I think I heard someone in the community say something a long the lines of:
> ""Elixir/Erlang is to concurrency and OOP like what Java was to pointers and memory management.""
",1536513542.0
Thomas___Johnson,"I have to tell you as Node/JavaScript developer who has gravitated toward the functional paradigm, discovering Elixir and the underlying BEAM was life-altering. I discovered it due to a client having an abandoned application that was written in Elixir, so it was quite accidental.  I would urge you to initially forego the Phoenix framework and spin up a vanilla Elixir app and experiment with state management processes. I think  understanding GenServer, Task and the supervision process is essential. It has a beautiful core library structure - and coming from node where the over-reliance on external libraries is a fact of life that was a breath of fresh air. I believe Elixir with its concurrency has a bright future, the web is not equipped to rely on real time data, and I think Elixir will prove an excellent tool. ",1536602000.0
help_computar,"Concerns about performance and backend computation of HTML in Elixir using eex are misplaced. This method is probably more performant than a JSON API. 

At compilation time eex templates are turned into IO lists. IO lists are extremely fast when writing to IO. Additionally, IO lists can have dynamic content injected into them in ways that are extremely fast. 

In Elixir when JSON is rendered it is rendered as a binary dynamically which is at least as slow (and probably much slower in most cases) than rendering an eex template. 

Also Chris's demo yesterday was doing full page HTML pushes. He has plans to create a page state diff on the backend and only send required changes to the FE thereby cutting down on bandwidth requirements and increasing performance even more.

If you talk with Chris what he will tell you is that his most major concern is developer productivity. If his work can enable developers who use his software to enter the market place sooner with a competitive product then his mission is accomplished.
",1536451780.0
DavidVII,"I love the idea of Phoenix.LiveView. It won’t keep us from needing JS, but I can see this eliminating a lot of the type of JS that I write. The form validations are a good example of that. I’m curious and excited to see more.",1536449269.0
testing484848,"This looks amazing and definitely a huge productivity boost.  As someone who works with React a lot - that gap he mentions between SPA and HTML only resonates with me.

Curious to see how things play out when the library is more mature:

- Does it degrade for non-JS browsers or will you have to have handle_* actions and regular controller actions?

- How difficult to build a state monitoring on top of this?  This feels very much like the event-bus model of jQuery/Angular that can cause all kinds of issues at scale

- How hard will it be to override these behaviors from client-side JS if the use case doesn't work for you.  I remember Rails had something like this (rjs??) and if you didn't have what you _exactly_ needed then you were in this bizarro world.

If this is done well - I think Elixir has fundamentally shifted how we architect standard CRUD apps and the levels of developer productivity it enables vs Rails.",1536452493.0
moljac024,"I have been thinking about this approach for some time so I'm super glad to see it implemented in phoenix but I'm not sure how scalable this is. The biggest issue I see is the memory footprint - when you keep the state of ALL clients on the server...yeah, that adds up REALLY fast.",1536478106.0
droctagonapus,Looks really cool if you can afford to not be offline capable. Unfortunately it seems that fewer and fewer apps can afford that when the competition does.,1536455857.0
Virviil,It’s much cheaper to calculate on others computers then on yours...,1536447534.0
mrmylanman,"I'm really excited about this feature. Just watched the video and I think I could get rid of a large majority of the Stimulus.js that I have in my app, if they get completed and implemented the way it looks like it's heading. I'm already using Channels quite a bit to implement quicker feedback from form submissions and things like that, so it should also simplify code on the backend, as well.

We don't really have any need for PWA features, or offline-first functionality, so it seems like an easy win.",1536631952.0
isak_s,"Wow, this could be a gamechanger. The example of validating a form live is very compelling, since it is both so common, and so complex to do the normal Javascript way.

I think many people underestimate the complexity of adding a lot of Javascript, because they are not thinking of problems like:

- Balancing code reuse vs asset sizes
- Dealing with bundles that are too big, introducing module splitting, and accidentally bloating your bundle sizes with a bad import
- Internationalization (as Chris mentioned)

",1536714672.0
GroceryBagHead,FIY: There's https://github.com/grych/drab that works on the same principle.,1536455180.0
haqkm,"I think this is a great addition and will help us avoid messing with JS for simple use cases. I am sure chris is going to add the ability to target a particular section of the web page very soon.

The whole concept reminds me of ASP.NET Forms, However, its implementation looks great :)",1536515421.0
TheDemission,"I wonder how this would integrate with vendor javascript libraries.

For the Stripe JS client for instance, wouldn't the DOM updates remove the bindings?

Another use case would be Algolia: it seems that we would need to make the requests to Algolia from the server: client -> server -> algolia -> server -> client?",1536650385.0
TheSquads,"We will IMO always need JS for specific stuff (like Chris mentionned) e.g. When you use spotify to listen to music and browse, you need a Single Page App to be able to achieve that.

Chris didn't mention this, but I think it will also be a huge step-up in communication between back and front... no more API to create or websocket to connect... Phoenix will be able to push data into an invisible TAG, and JS to read it... And I'm not even talking about security, this will allow to secure a lot more easily, not having to secure APIs, or authenticate websockets.",1536655882.0
ebeatyou,Awesome! Good to see some precedence here in Oslo 😁 Will definitely check out ,1536440801.0
bulldog_in_the_dream,"Dockyard https://dockyard.com/phoenix-consulting

As far as I know Chris McCord, creator of Phoenix, works there. ",1536405545.0
BigHeed87,"https://www.matchedpattern.com

We specialize in Elixir and you won't beat our rates.",1536412747.0
dominicdigital,"Full disclosure, I know people associated with this agency, and have not used them myself, but I believe that Dwyl use Elixir as part of their preferred stack.

https://dwyl.com",1536400871.0
rehemiau,See https://elixir-companies.com/industries/technology-consulting,1536407731.0
Mintcore,Seems to be a LOT of good alternatives here but i’d like to add my company as well; https://varvet.com,1536408477.0
mlitwiniuk,"Sure, we at [Prograils](https://prograils.com) do. Make sure to check out our [playbook](https://prograils.com/playbook/) to know about our process, philosophy and stuff.",1536413262.0
_tsuujin,I’ll jump on the bandwagon here with my company: https://www.crystalhelix.com,1536419950.0
kpenchev93,http://quanterall.com - Bulgarian company. I know they work on the Aeternity blockchain and have done a lot of web application projects.,1536423901.0
ppikula,[https://pattern-match.com/elixir-and-erlang/](https://pattern-match.com/elixir-and-erlang/) We specialise in Elixir/Erlang and we can help you with infrastructure and monitoring as well!,1536841257.0
qqwy,"Our company, https://resilia.nl, also regularly works with Elixir, and we're reasonably active in the community :-). ",1536429184.0
cobalt_blade,[http://moove-it.com/](http://moove-it.com/) has elixir devs plus experience on other techs that can help on an elixir based app,1536429204.0
nickgartmann,"👋http://rokkincat.com has a number of elixir devs, we maintain a number of open source elixir projects on behalf of some different dev tools and one of our founders is on the core team for phoenix. PM if you want know more.",1536432963.0
tmpduarte,"We do! [www.coletiv.com](https://www.coletiv.com)  
You can also find a huge list of companies that work with Elixir in: [https://elixir-companies.com](https://elixir-companies.com)",1536573158.0
alec-c4,"http://progress-engine.com - Russian team (I’m CEO) with expertise in web, mobile and high load backend app development",1536408392.0
danbee,We do! https://thoughtbot.com/services/elixir-phoenix,1536405430.0
ChrisWilding,"thoughtbot looks to have moved into Elixir software dev/consultancy
https://thoughtbot.com/services/elixir-phoenix",1536405489.0
Hauleth,https://appunite.com - we have some,1536488720.0
ScrimpyCat,"I wouldn't do that. Not because of some performance concerns, but rather it's a very fragile design. If those processes in-between don't have any reason to receive and forward the message other than because you don't have a way of referencing the destination process, it then leads to a design where if anyone needs to make changes to it in the future, they could easily break that logic if they weren't aware of what's happening. 

As far as what you could do to avoid it, you could maintain your own lookup or you might prefer to name the GenServer (see their name option), or use the Registry, or a distributed lookup service, or you could lookup the IDs from its supervisor, or is there somewhere the sender could be passed the destinations pid so it could hold a reference to it or even monitor it if needed?",1536497669.0
,"It depends on the size of the message. A good rule of thumb is to assume it gets copied whenever a message is sent.

There are a few exceptions like small binaries that are stored in a global heap and as such only a reference to the binary is passed around.",1536352994.0
newreddit0r,You can register the processs in Registry.,1536358683.0
aseigo,"Measure! :)

That said, message passing itself is fast enough for most use cases. It is the cost of copying data that tends to be the issue, and when or how things are copied is a complicated topic. Atoms, despite looking like text, are just integers behind the scenes, and large binaries (and small chunks picked out from larger binaries) are not copied within a node but passed by reference, etc. But unless you are doing high volume (n*100k msgs per second), it probably will not be your bottleneck.

But you may want to ask what is being achieved by multiple hops. Is there a useful abstraction being served by that? Is there decision making or necessary data transformation happening? Is it a way to achieve higher parallelisn, e.g. by using one forward facing process as a fast dispatcher (little to no actual processing done) to a larger number of processes that do the actual work? ...

Keep in mind that a module does not equal a process. You can separate your code and the concerns across multiple modules for ease of maintenance and general modularity and call any mix of those functions from the same process.

Processes are for runtine distribution and isolation of computation. They are units of state and work.

Modules are for organizing concepts represented by code.

So when designing Elixir apps, it is usueful to think about those two steps separately. In OO languages they are tightly coupled (instances at runtime and their interface implementations) but decoupled in Elixir.

So before worrying about performance issues you are unlikely to have (though all things are possible ;), I would step back and look at the design forst and foremost. Refactoring for performance later (if needed) is quite easy in Elixir.",1536388389.0
Americali,https://www.youtube.com/playlist?list=PLqj39LCvnOWaxI87jVkxSdtjG8tlhl7U6,1536437202.0
udfalkso,"Nice article, I wasn't aware of defdelegate",1536254729.0
p_r_m_n_,"Nice!  Context modules can get pretty big. I starting exploring ways to break them up but still wanted to call functions from the root context module. I went as far as quoting the module. For sure I will be using defdelegate going forward, I like the explicit nature of it. ",1536270519.0
Nezteb,If I hadn’t already used all of my PTO to go to ElixirConf I’d totally go to Big Elixir!,1536087473.0
gargar7,"it just shows 'submitting' endlessly :(
",1536429552.0
funmler,"I hope that entry form isn't written in elixir. Doesn't work and isn't a good advertisement. 
Ah built with LEADPAGES ",1536097944.0
Pacodastre,"I started using gigalixir a couple of weeks ago and find it very good. However, I haven't been able to push a Phoenix project that has no database and was created without brunch. Is it possible to deploy a phoenix project without those?
I ended up getting it working by copying some code from the gigalixir example project, but ideally, I'd like to remove this code.",1536272107.0
Americali,"Let’s get started. The first thing we’ll want to do is create an account on on Gigalixir. I’ll create an account through their site. There’s also an option to signup using their CLI too.

",1536437214.0
Americali, how classes get their methods in Ruby and then look at the steps that I took to better understand the world of Elixir.,1536437227.0
buleria,This just keeps getting better. Awesome project!,1535917438.0
Hauleth,"> ensure all calls to Logger.debug and its siblings are given an anonymous function

This is no longer needed in Elixir 1.7+ as this is handled by macro internally.

Other than that, this still isn’t needed as log output by default contains pod of the sender in metadata. All you need to do is to show that by adding `$metadata` somewhere in the `:format` option (it is included in default format) and adding `:pid` to `:metadata` option (or setting it as `:all`). ",1535586772.0
mgwidmann,Where's the code to produce that textual version of the supervision tree?,1535589573.0
sb8244,Short and useful. Excellent!,1535583393.0
xerxesgm,"I use VSCode with ElixirLS extension. In the most recent update, I've noticed it starts showing @spec above my functions and will fill it in if I click on it with my mouse. Just takes a single click.",1535471716.0
ScrimpyCat,"Adding specs doesn't exactly mean better coverage. As dialyzer will try and workout the types itself. The main reasons are if you have very specific types that dialyzer can't infer as accurately on its own (or if you want to show certain results depend on certain inputs), and then for the programmer as a kind of documentation. ",1535492160.0
Cputerace,"Agree with the other comments. You should turn down the opportunity, and learn how to do this before taking any jobs that require it.",1535385401.0
_shreve,"I would recommend learning server-side development before accepting jobs that require it.

If you have no idea how to build online ordering and you are asking about frameworks on r/elixir, you're not ready to write the software someone's business is going to be running on.",1535383951.0
Macioa,Want to make car. But how?,1535382084.0
mistyfud,"Welcome to Elixir! Programming Elixir and Programming Phoenix are great introductions to the ecosystem and will guide you in building a dynamic web application in Elixir. 

It sounds like you will need a database as well. Ecto, the Elixir database library that ships with Phoenix, is best paired with PostgreSQL.

Lastly, you will need a place to host your new application. Heroku has a free tier that is easy to get started. If you want to explore the distribution capabilities of Elixir you may want to look for other cloud providers.",1535385809.0
rambamhamsham,"OP, you may want to look at an off the shelf solution for this - much less risk. I'd personally be interested to see if Shopify could be wrangled to pull this off. I found the templating system surprisingly enjoyable to work with years ago.",1535415249.0
archlich,"If you're in the states, your website will have to be PCI compliant, even if you don't personally perform the credit card transactions. This is no simple undertaking, security is tough, and a lot can go wrong, and either you or your company will be liable.",1535388781.0
p_r_m_n_,On a positive note it sounds like you might be a good salesman ;),1535389334.0
iliveinapark,"Don't do this OP. I've been doing web development for 10 years. I've been doing elixir development professionally for three years. _I_ would not do this, because I have no ecommerce experience. You should not do this.",1535406806.0
xerxesgm,"I don't think you need a framework for this. You should just build the ordering system yourself. It you need to do delivery tracking, you can try something like onfleet.com. If you need to accept payments, use one of the major payment processors like stripe or braintree. ",1535429380.0
voxelbro,Why would I use the ok library when OK.for is pretty much a `with` block?,1535290997.0
MajesticNail,"I think saying ""bad input is not exceptional"" is a very poor summary. Passing an integer to `File.read/1` should always fail because an integer is always wrong in this domain. What makes an input good or bad depends on the context we are working with. It seems the author means the same as I describe here but it is not clear.",1535300934.0
joshleecreates,Why not just use React inside Phoenix if you’re already used to it?,1535294796.0
woberto,"If anyone stumbles across this, I've ended up using marker. It is good so far. I also saw that you can do inline eex templates in your elixir code with something like \`\~E""<div></div>""\` but I'm still not in love with that. ",1537032823.0
waltz,Oof. I'd stay away from developing inside of a Docker container.,1535352070.0
tvaughan,"https://github.com/emacs-pe/docker-tramp.el/blob/master/README.md

I haven’t tried this with elixir, but it works with python and clojure/script via cider. Just open the files over tramp inside a running container and everything should just work[1], like C-c C-c will compile the buffer using whatever python or boot/lein is in the container.

[1] I don’t think this should matter, but just in case: https://github.com/carrete/.emacs.d/blob/master/lisp/setup-python-mode.el

",1535279756.0
Nicd,"First set the rounding context as you described, then do your round operation, then you can use `Decimal.to_float` or `Decimal.to_integer` as you need.",1535262239.0
Bergerton,Take a peek at trunc,1535257060.0
non-private,"a. You can specify the way to round as a third argument to round. It's not well documented, but [the source shows you your rounding options](https://github.com/ericmj/decimal/blob/v1.5.0/lib/decimal.ex#L1498). You want to use `:up` or `:down`.

b. Then proceed as /u/Nicd said: use [Decimal.to_float](https://hexdocs.pm/decimal/Decimal.html#to_float/1) or [Decimal.to_integer](https://hexdocs.pm/decimal/Decimal.html#to_integer/1) to get an elixir float or integer.",1535274754.0
Puppetpals1,"I’m finally finishing up my first production worthy all written using elixir.

It’s a simple web game hosted on https://bulletz.io.

I have a few more crucial optimization’s to make as well as a few features to add but it’s pretty close to done!",1535704117.0
MrPopinjay,"A statically typed language for the Erlang VM [:D](https://github.com/lpil/gleam/)

That and a generic CRUD app for a startup",1535795769.0
fet-o-lat,"I’m working on my first library. I’m new to Elixir and finding my footing. 

I’m making an RDAP client library. RDAP is the new replacement for WHOIS.  So far it’s going ok.",1535098301.0
horvathlg,"I'm working on a headless CMS.   
The plan is to create a CMS that will be able to manage multiple sites from the same admin panel. 

It will be open source but at this early stage, I don't want to share the code.",1535360906.0
vetva,"I was looking for a good backend for a SIP telephone central for VOIP, so far it’s amazing.",1535367901.0
DeltoidSchizachyrium,"This is my first Phoenix project, please bear with me :)

Recently I came up with the idea that household tasks could be managed using a cron-like syntax. So here it is, since it's an scratch-your-own-itch-type side-project I actually find it pretty useful ;)

&#x200B;

[https://github.com/julianrubisch/CronicalChore](https://github.com/julianrubisch/CronicalChore)",1535970302.0
shibuyamizou,"It took me a week from ideation to production of my new app!

propollr.com

ProPollr is realtime polling where the pollrs are anonymous. I find that anonymous feedback leads to honest feedback.

There are still a bunch of things to do but it is in a decent MVP state for usage to happen.",1536082727.0
ClemDev,"I took my first foray into elixir packages. It’s super basic but I’d appreciate some feedback. It’s a heroku-like name generator with a twist, names can either be random or consistent. 

[Link](https://github.com/pejrich/AnonymousNameGenerator)",1536294873.0
CBedzz,"Brand new to Elixir & Phoenix, so just playing around with understanding web sockets. Working on an computer generated art site that will change the art depending on where you are, and where other logged in users are, and what you are chatting about. ",1537578045.0
nubunto,"At the moment going through Stephen Grinder's Udemy course on Elixir and Phoenix.

It's the most fun I had in the past few months!",1537748943.0
Schrockwell,"Awesome. These are ALL pain points I’ve suffered, and they are common from what I’ve seen in the Elixir Slack. Great use of time and effort, and props to Dockyard for pushing this development forward.",1535050111.0
isak_s,"Great to see a solution to runtime configuration. That has been the biggest problem with the Elixir ecosystem, in my opinion.",1535069038.0
firl,nice! glad to see the config system touched. It was a pain for docker deployments,1535057596.0
ericlathrop,"Can someone please elaborate on this paragraph:
> Your application should be designed to receive configuration at boot, read it from the application env, and then pass it down your supervisor tree, rather than reading directly from the application env when needed. There is nothing enforcing this rule, but config providers are specifically designed with this approach in mind, and are not intended to be used to fetch configuration dynamically once the release has booted.

What bad things happen if I am ""reading directly from the application env when needed""?",1535124962.0
fet-o-lat,Ahh the BOM. Reminds me of many fun compiler errors after having edited files on Windows. Great post though. Exporting to CSV always seems to come in handy. ,1535040976.0
Hauleth,"`Application.get_env` is basically as fast as ETS lookup, so this is fast enough for most of your use cases. ",1535024139.0
losvedir,"For production deploys you should _probably_ be using `distillery`. And that provides yet another approach, where you specify your dynamic config with the syntax `""${FOO}""`, which you provide when you boot up your app. Distillery will then essentially find and replace FOO with the value you provide. That, I believe, provides performance akin to the hard coded (module attribute) approach, but lets the run time environment provide the actual configuration values rather than the build environment.",1535031672.0
,[deleted],1535019778.0
vittore29,Do you have more details to the story? Was it already elixir app before? What persistence layer you used before tarantool?,1536073401.0
emmanuelgoldstn,"Yes, nerves is your best bet. ",1534911664.0
techannonfolder,"Can someone ELI5 what is nerves? I have no experience raspberry pi or ""embedded"" programming",1534914743.0
equineranch,Ok Thanks. My main goal is to have a project to learn elixir and frameworks. I built a raspberry pi sprinkler system with python which really helped me learn python. ,1535032981.0
NobbZ,"I mentor myself there, and even as a mentor one can learn a lot, not only how to code, but how to teach as well.",1534876543.0
binaryheadache,"I saw a similar request in r/rust and I'd love to help out in both, but although I've been coding for a long time, I've been using rust and elixir in the past few months.
I assume there's a minimum level for mentoring a language? ",1534879056.0
mgwidmann,"I signed up, I'll try to help as much as I can",1534889247.0
,[deleted],1534880314.0
nathanchere,I've already mentored about 80 solutions on there and it still feels like a lost cause unless you start giving really short or copy/paste 'mentoring' (which I refuse to do) . The backlog is nuts for Elixir already. ,1534967345.0
techannonfolder,"Yes please, I'm waiting for some code review for 4 days now :(",1534891227.0
majorius,"cli installation is awfull, not the guide, but the way itself",1534925551.0
fet-o-lat,"One of the top reasons I love Elixir is the community’s focus on performance and understanding the implications of different language features. Stark contrast to other language communities where performance is only something you think about when the server bills get too high or your app grinds to a halt under pressure, at which point you’re up to your neck in technical debt. ",1534880469.0
cadamis,"I'm thinking of diving into Elixir, and posts like these are exactly what I'm looking for on this sub. This is a great explanation of why Elixir was a great tool for their specific use case.",1534602384.0
Schrockwell,"Pretty awesome how the best solution was also arguably the simplest, from an OTP perspective. Just shows you how far the standard library can get you.",1534592706.0
truckasaurus310,"Great timing, I just ran into a situation where I wanted to use something like this!",1534520957.0
sb8244,"Does this cause the ID sequence to increase at all? I know it does if you're not using ID as the uniqueness constraint, but not sure if the ID is the constraint.

This could be important for estimating the size of your data. I once saw a table with an ID sequence > 2 billion (close to overflow), but only 200million entries in the table. There was \~ 10:1 uniqueness violations per insert and had to be adjusted.",1534712557.0
mbuhot,"When using IDs for bulk updates you may want to wrap the code in a transaction and [lock](https://hexdocs.pm/ecto/Ecto.Query.html#lock/2) the rows so that you can be sure the query condition still holds.

",1534542092.0
_rascal,is parttime an option?,1534396837.0
losvedir,"Nice post! Nitpick, but you shouldn't need to add the `applications:` key to the `mix.exs` file. Since Elixir 1.4, your `deps` are automatically included as applications.  The `applications` key was removed and `extra_applications` was added for those things like `:logger` that _aren't_ already in your `deps` that you still need to start up before your application.",1534340585.0
fet-o-lat,I’m still trying to get my work to send me. I’ll ramp up the nagging. I hope there are tshirts. ,1534278884.0
cthree87,If you are doing concurrency with send/receive you are doing it wrong. ,1534101115.0
Zesky665,This is something I'd contribute to when I get the time. ,1533985637.0
Izwe,what's upman?,1533919027.0
flat235,Just got this to the point of being useful. Any questions and contributions welcome :),1533912444.0
forfunc,Really cool! ,1533900693.0
udfalkso,"I took an old Django webapp that gets approx. 1 million visitors a month and rewrote it with Elixir/Phoenix.  

I ripped out a complicated mess of caching layers along the way, greatly simplifying application logic.  I also added a real-time websocket chat experience in very little time thanks to Phoenix Channels.  

Response times got 5-10 times better (now consistently < 50ms) and I reduced my hosting costs by about 50% as well.  Best move ever.  Have been using Elixir/Phoenix for all my web or api related needs since then on various projects.  ",1533759882.0
Owl_Bear_Snacks,"First Elixir / Phoenix app of any real complexity for an internal app. It’s customer facing but small audience, small duration. Learned a ton but basically would not compromise on my old Rails flow of testing and dotenv. Wrapped it up in Docker with distillery. App is about 90mb in docker/alpine.  Backend is a JSON api using JWT with a React (with little people else) UI.  Less than 3 months to AWS deploy.  Mostly done.

The good:
- “fat” app with db migrations. Go is fine but just not the same. Maybe buffalo will one day get there. A fine project, I just liked Elixir better.
- Libraries are fine and good (guardian and comeonin)
- Mix, pry, testing with exunit
- Project layout with Phoenix 1.3. Contexts are a little bumpy to swallow.  I think I have it now.  Users live in Accounts. You can’t do User.all, use Accounts.get_users
- Pattern matching
- double returns with :ok and :error. It’s just like go for me!

Had to unlearn or retrain myself on some bad habits
- No nested describes, I am used to overly readable betterspecs.org style rspec tests with lots of nesting
- State or module variables trying to save time or associate data with basically modules which are functions
- Contexts and trying to go straight to Repo.all, don’t do that.  Just write a method.

Could be better:
- best practices with ENV: distillery compiles and that changes how ENV works. Hard to explain but basically avoid conform which was a nice idea but is abandoned. I bet even my advice now changes with time and how best practices change
- Getting controller tests started was a little slow for me.  Now it’s fine.
- Usual edge case annoying stuff like proxies or security or env stuff that is specific and not fun `HEX_NO_CERT_CHECK=1` bleh
- Pry timeouts in certain contexts, I understand why and there are workarounds, it was just surprising. Pry isn’t super easy software to write ... just saying

The great:
- Productivity of a high level language
- I love the vscode plugin, actual compile errors and typechecking!  Autoformat is amazing while working, like go fmt.
- Knowing that I can do multi-process or create another app. I haven’t done that yet but it’s a warm fuzzy.
- Docker image with a distillery release in it.
- Ecto and basic relationships.  Trying to model my problem in Go with Gorm just didn’t click for me.  Hard to be critical without sounding like I am bashing. Doing a Go build was trivial, too bad that it didn’t work out.

I think my next project will probably go faster. I have a lot of notes and examples for myself and a better understanding of distillery releases.  But I am pretty pleased with < 3mo for a json api with a UI while learning a ton.",1533785284.0
shaolin_acc,"In the IoT space we’ve been able to replace multiple large, expensive SaaS offerings related to networking fleets of devices with a unified elixir backend that even shares some modules with remote devices. It’s been a force multiplier for us, and idk if we could have done it at the speed required without being able to lean on OTP. Next up is replacing our dependencies on hosted dbms.",1533754213.0
mbuhot,"Built a JSON API over SQL data warehouse with Ecto and Phoenix. 

Ecto was the real hero. Having a orm-like library that feels like composable SQL embedded in Elixir meant we needed very few stored procedures or views. 

The open source community around Elixir is amazing. Elixir, Phoenix, Ecto maintainers are very welcoming of issues and PRs. ",1533768417.0
dogweather,"**A redirect server** which simply responds to requests to several old domains with 301 redirects to the documents' new locations. Hosted on Heroku for $7/mo. Super-simple and nice to write the logic in Elixir instead of, say, Nginx config language.

**An API endpoint** which does a reverse DNS lookup and uses the domain name to determine if you should get a free service upgrade. [Explanation](https://blog.public.law/2018/04/06/automatic-upgrade-for-non-profit-educational-and-govt-users/). Also hosted on Heroku on the same $7 account.

----

Bottom line: these small services are crucial to the production app, highly reliable, use very little memory (easily fitting on a Heroku 512MB VM, cheap to run with capacity to spare, easy to deploy, and easy+fun to write. I created them by starting with a template Phoenix app with no Ecto db.",1534041425.0
dubsrb,"I actually just went through this very lesson. Very excellent tutorials, keep up the good work!",1533734068.0
ClickableLinkBot,"##r/python
---------------------------------------------
^(For mobile and non-RES users) ^| 
[^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| 
^(-1 to Remove) ^| 
[^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)",1533668165.0
kpenchev93,It is my next language. I love it. It still has a pretty small ecosystem but I believe there will be a lot of improvement in the future. ,1534758569.0
MajesticNail,"The downside of native compilation is just that it takes longer to compile and that if you are interfacing between native and bytecode you may see slowdowns. But assuming you compiled everything... you are good to go?

I don't think there is a way to say for it to ignore native though. Unless you run a VM compiled without hipe or delete the `.beam` files.",1533651086.0
mongomanga123,"This is fantastic, just in the first few paragraphs it cleared up some questions I have had. Thank you for posting this, your writing style is excellente the joy to read.

I've been trying to rectify the relationship between genstage and Flow in my head. I'm looking forward to reading through this again with that in mind.",1534010283.0
,[deleted],1533645908.0
sb8244,Is there an advantage to Mox over other mocking services like Mockery?,1533929814.0
_rascal,couldn't find a room with people. forever alone :'(,1533618311.0
Shenrak,"The idea is quite cool but I think that for people to truly believe it, it should be open-source ",1533633501.0
Zesky665,source?,1534967747.0
Koala_T_User,I would love to contribute to the design if needed. This is such a cool idea,1533603280.0
mobilgroma,"It would be really nice if there would be a notification of people leaving a channel, too.",1533645132.0
mallory-erik,"Wow, so cool. 

You asked for comments about making it look better so:

I had the thought that it might feel a tad snappier if you were to use onKeyDown for the Enter key -- not that it feels slow, but there's an added maybe 30 to 300 milliseconds waiting for the onKeyUp, whereas normal typing input is onKeyDown.
 
More importantly on a mobile browser I can't see the chat and input in the same screen without scrolling -- iOS in my case.
",1533690714.0
AceDecade,Neat proof of concept! Any plans to put it on github?,1534541139.0
yawaramin,Link to original (better syntax highlighting): https://brunoripa.com/articles/2018/07/09/genserver/,1533615897.0
pedroassumpcao,This is a blog post I wrote for CityBase blog regarding Elixir umbrella applications and how that concept helps to build code that scale.,1533302181.0
Spoor,"    defmodule Example do

     def func(p1, p2 \\ 2)
     def func(p1, 99) do
        IO.inspect ""you said 99""
      end
      def func(p1, p2) do
        IO.inspect [p1, p2]
      end

    end ",1533308949.0
binora,"i am a newbie myself but a quick search tells me this:  
clause: A clause is basically just the pattern that is matched against when calling the function. check [this](https://www.culttt.com/2016/05/23/multi-clause-functions-pattern-matching-guards-elixir/) .  
default value: this should be quite clear.  


the compiler basically wants you to remove ambiguity.  that's by design.  again, here's a [link](https://elixirforum.com/t/definitions-with-multiple-clauses-and-default-values-require-a-function-head/2643) to the same problem answered [here](https://elixirforum.com/t/definitions-with-multiple-clauses-and-default-values-require-a-function-head/2643/6)  
",1533303833.0
Mr-Krombopulos,"Since others already posted the corrected code I can explain what the wording means. By 'clauses' its talking about multiple functions with the same name and arity, each definition is a clause. By 'default value' its talking about a parameter that is marked with the '\\ value' syntax. So to put it together, the warning is saying that you should declare a header function above when defining a function with multiple clauses (i.e. multiple def statements with the same name and arity) that also have a default value. ",1533310611.0
mgwidmann,This is awesome! Not logging errors when they successfully complete a moment later has been the one thing I've always struggled with. Does this allow any kind of external persistence in order to ensure failed jobs due are retried after a system reboot (of the EVM)?,1533347422.0
ZealousidealRoll,https://threadreaderapp.com/thread/1026434505136132096.html,1533574201.0
TheSultanOfSwagger,Ditch Jenkins and use Gitlab + Kubernetes. ,1533253741.0
Charchris,"A module/function can create an Event struct, and deliver to the EventBus without knowing which modules will consume.",1533415100.0
tshark14,"Event struct that are being sent and received, the other modules will never know.",1533594781.0
voyvolando,And you managed to get blockchain in there too. I'm impressed.,1534175454.0
mbuhot,"Doesn't GenServer have this functionality built in?

>	Returning {:reply, reply, new_state, timeout} is similar to {:reply, reply, new_state} except handle_info(:timeout, new_state) will be called after timeout milliseconds if no messages are received.",1533079098.0
lejboua,"After a lot of work, here's my new book on Elixir! Also written by my friend and colleague Daniel Caixinha, it takes the reader on a journey to develop a Dropbox-like web application and deploy it on the cloud!",1533048298.0
Ironjanowar,"This is awesome! I love the way you merged two awesome things you like :D
Thanks for the post!",1533208041.0
mbuhot,"Is ExMachina really worth it? In Ecto 1.0 it was helpful since inserting required explicitly creating Changesets, but since Ecto 2.0 you can directly build a schema struct and insert it in the repo. Check out chapter 7 of [whats new in Ecto 2.0](http://pages.plataformatec.com.br/ebook-whats-new-in-ecto-2-0) for a detailed example.",1532845325.0
techannonfolder,"MajesticNail is right I had a typo in the schema. Absolutely embarrassing, if anyone has this problem, check your associations in the Repo schemas.

My apoplogies!",1532853833.0
MajesticNail,"The error is saying that you are passing PromoCode where you should be passing a Discount struct. Double check your ""factories"" and also double check your schema definitions.",1532849816.0
k-selectride,"You don't want to use charlists for this, as you've discovered they're painful to use. Everything you need is in the String module. Strings in elixir are utf-8 encoded. This means that one byte is not necessarily a character. The String module therefore uses a type called a `grapheme` to represent a character.

`String.graphemes/1` takes a string as input and returns a list of graphemes. This is probably what you want.",1532810554.0
asonge,"So, while Erlang still uses quite a lot of charlists, they don't show up in most idiomatic Elixir programming. You get handed Elixir strings, which are binaries. Charlists are interesting for a few reasons (having to do with iolists in general), but I don't understand why you would reach for one in the first place.

But here's a slightly clearer way to think of this: `'2'` isn't the number `50`, it's `[?2]` or `[50]`. However, `?2` *is* the number `50`. If you keep in mind that intermediate step, you should be fine. Thus `'026349'` is `[?0, ?2, ?6, ?3, ?4, ?9]`.",1532810371.0
alchemistcamp,"Are you familiar with [ASCII](https://www.cs.cmu.edu/~pattis/15-1XX/common/handouts/ascii.html)? Basically, what's happening is you're encountering how the *character* 2 is represented in memory.

Back when computers were expensive, we just used 128 symbols for everything and mapped them to 7 bits (or the numbers from 0 to 127) in the way shown in the table I linked. Later it was extended to 8 bits (or 0 to 255) for European languages and more characters. As you can see, the letter a is represented as 97 (or as 00110001 in binary) and the number (well actually character) 2 is represented as 50 (or 00110010).

If you do math with characters in character lists, this will actually work with their ASCII values. This used to be fairly common in C programs and even in some scripting languages. Java and just about any language newer tends to use Unicode by default, since it can represent far, far more characters from more languages, emojis, etc. Elixir strings were created with Unicode in mind, but charlists are from an earlier era (and mostly just encountered via Erlang interop).",1532830078.0
Hauleth,In what twisted mind (except insane JS and PHP) `List.first('2') * 2 == 4`?,1532813206.0
into_lexicons,"maybe i don't understand the full context of the exercise, but if you want a data structure to store a list of integers, why use charlists at all, nstead of just lists of integers?

edit: before any pedants point it out i know they're technically the same thing, i'm interested in why OP is working with the character representations of those integers instead of the integers themselves",1532820460.0
ClemDev,It would be great if you added more detailed notes/code to the article. Sometimes I’m not in an area where I can watch a video but I like the topics you cover. ,1532789559.0
,"Coming from a PHP background and generally setting up a non stop worker, cron job or queue and then trying to digest GenServer is what I find most difficult. The setup process, where best to place module files, sending data to GenServer are just a few things I find difficult.

Recently I wanted to setup a GenServer to query an  external API endpoint, check stock levels and return changed data. Shit went south really quick and IEX just kept throwing error after error. 

Like anything related to Elixir though, I suppose it will just take more time before it clicks in my tech tard of a brain. 

There is no written tutorial out there for GenServer either. Most are just copying one another. ",1532919334.0
macbem,Great tutorial! A minor suggestion from me - it would be awesome if you could implement a dark mode for your website.,1536565461.0
,GenServer still confuses the absolute fuck out of me. ,1532793108.0
rizanil,"Some time ago, we built [ex\_schedule](https://github.com/quiqupltd/ex_schedule) to abstract a scheduler behaviour using GenServer. Hope others find it useful.",1532947964.0
pls_pressy4pie,Depends on how you do it or why you need to do it. Elixir and Erlang are great at processesing data like that if you can partition it somehow into chunks that can be executed asynchronously. It may not be the fastest syncronously but it in my opinion has the best language builtins for processing data period. Also it does really good at streaming constant data. What are you trying to to accomplish?,1532719068.0
swiftsubetei,"I'm not sure if it can be considered true but it is definitely easier to set up custom processing for large amounts of text now with https://hexdocs.pm/flow/Flow.html

Used it myself and it is beautiful",1532726327.0
lapin1989,"Elixir has tools like Flow, GenStage and GenServer which ones you can build an efficient text processor.

The thing is it might be slower than other languages but with Flow/GenStage you are spawning processes using the erlang OTP.

That means if your 300kk lines file has a bad encoded line whole process wont crash without having to encapsulate everything inside try/catch and having to code specific logic for crashes. In Elixir you just let it crash.

Also you can stream the file and use it along with AWS Kinesis or similars.

But, if you dont care about the OTP benefits and data streaming then probably you are looking for a different language.

To sum it up, I wouldnt say Elixir suck at processing a lot of text, I would say elixir sucks at processing text faster than other languages but rocks at doing it in a distributed way being 100% fault tolerant and being able to stream it, which, you could do that with other languages but having to code a lot more meanwhile with elixir is plug and play almost.",1533029351.0
yawaramin,It all depends on your exact usage pattern. Elixir can process text very efficiently thanks to iolists. It's part of the reason why Phoenix is so fast. Here's an explanation: https://www.bignerdranch.com/blog/elixir-and-io-lists-part-1-building-output-efficiently/,1532735772.0
,"This is a huge ""it depends"" question. And actually a lot of what you may have heard/seen might not apply as much anymore with the relatively recent changes to file and network socket reading/writing and improvements to optimized binary handling in Erlang/OTP 21 and Elixir 1.7 (I think for Elixir 1.7, but definitely for Erlang/OTP 21).

The best thing is to make sure you are using binaries. 

Here's a relevant example from about a year ago.
https://www.reddit.com/r/elixir/comments/5qsquu/performance_of_idiomatic_elixir_code/
The comparison of the original poster and the 'best' response (by deleted, of course) are what you should look at.

Other good resources are this: https://tech.forzafootball.com/blog/binary-parsing-optimizations-in-elixir

and (though a little dated now): http://erlang.org/euc/07/papers/1700Gustafsson.pdf",1532756175.0
lethly,"We do some heavy XML parsing/processing at my work using https://github.com/willemdj/erlsom. We've managed to get pretty good performance out of it, and Elixir has proven quite flexible for our needs.",1532720348.0
ataboy,"It's pretty fast, and you can use Stream to break large files into manageable chunks for further processing. The standard library has lots of very good tools for it.",1532723987.0
thibaut_barrere,"Some time ago, I benchmarked Elixir vs Ruby for CSV + text transforms, and indeed Ruby was faster. I need to revisit this in the future, though, because both Elixir/OTP and Ruby are changing fast.",1532725772.0
thibaut_barrere,More information at https://twitter.com/Membrane__/status/1022557646677794817,1532689118.0
,"""... or based on improper foundations (such as JVM or GLib).""

I like that opening. The JVM took every choice I would not have made when making a primary language and virtual machine.",1532760506.0
thibaut_barrere,Killing in favor of other entries.,1532689068.0
JPYamamoto,"Just wanted to share with you this post I wrote. I hope you find it interesting. I'm happy to read your feedback and comments. If you want to chat about something in the realm of programming, feel free to PM me.",1532637403.0
,[deleted],1532668247.0
Charchris,"I’ve been learning and playing with it, I have been able to realize how the future of software development looks like.",1533415108.0
ReactDOM,Great points! [Learning Elixir](https://reactdom.com/elixir) may well be worth a look!,1541696302.0
tshark14, It's have been able to realize how the future of software development looks like.,1533594797.0
fet-o-lat,"I wish I were moving along more quickly with my self Elixir teachings. I’ve wanted to work for ThoughtBot for years, but I’m trying to transition away from Rails. Fingers crossed they keep growing their Elixir staff!",1532636057.0
nbwillson,Damn that'd be a dream.,1532661235.0
losvedir,"Interesting article! I found working with `:gen_tcp` to be quite tricky in a project I did for my work. In particular, it doesn't seem to integrate super well with `GenServer`s unless you use `:active` mode. How are you integrating it into the GenServer since you've changed it to a blocking call? Did you give up on handling other kinds of messages? Is it in a supervision tree? Do you have a backpressure mechanism?

I actually went the other way around. I started with an infinite loop and `:gen_tcp.recv` but I found it was more important to have all the OTP goodies, so I switched to the old `active: :once` / `:inet.setopts` approach.",1532656519.0
OrganicRock,"Only just a few, small change. I like it this way 🙂",1532555029.0
bluefish009,"for the record, v1.7.1 released.(bug-fixed version) https://github.com/elixir-lang/elixir/releases/tag/v1.7.1",1532752802.0
k-selectride,Wasn't property testing supposed to be in 1.7 or am i misremembering?,1532614476.0
ABC_AlwaysBeCoding,"I think quality-of-life changes are not a bad thing at all to focus a release on.

""You mean my very-nice language just got nicer? Right on!""

It can get faster some other time, haha",1532621515.0
nbwillson,Love the love for devs.,1532665385.0
mattaugamer,Oh man. I **just** learned 1.6 and now I have to start again. :(,1532595404.0
quaunaut,Page not found!,1532522355.0
i_am_pro,It depends on how you define performance. Mostly for small project speed of development is utmost important. Elixir and Phoenix is capable of doing 99.99% types of projects. Only downside of elixir is lack of libraries as compared to ruby and nodejs. Most of the time small projects builder prefer to use already available libraries so i guess in that point of view elixir can impact performance of small projects. ,1532365631.0
Nixonite,"this is the first time I've heard such a thing

sounds wrong",1532363955.0
ataboy,"Doesn't make much sense to me. Performance is generally going to compare pretty well to competing languages, though there are certainly ways to self-sabotage performance in certain areas. I consider development speed to be very good, though there is a learning curve that varies depending on past experience. i_am_pro's point about fewer libraries is valid, especially if there are large portions of the program that you know there is not already support for in Elixir but there is in other languages.",1532387042.0
swiftsubetei,"Speed on most small projects will actually be very good.  Your options stay flexible if you run into almost any kind of desired functionality.  There are fewer libraries as mentioned than many other languages, however in the erlang ecosystem this is because in many cases one solution was very good and becomes standard.

In a large project speed becomes great because of the maintainability of a functional code base in a lot of cases. In a small project it is usually close enough and faster to develop.

Dunno if I have examples you are looking for but here is:
small project developed fast and modular https://github.com/Tyler-pierce/simplestatex
Small erlang project converted to ex and expanded https://github.com/Tyler-pierce/giza_sphinxsearch
Large project split into smaller parts with modular dependencies (not as much so as it should be as it was an early project) https://github.com/smileys-tavern/smileys_umbrella

much of that code is easy to refactor, concurrent, or was developed twice as fast as I could in the main conventional languages (much of that is purely my experience of course and varies person to person!).  The cost is the up front learning curve if you aren't from a functional language like prolog or erlang",1532451291.0
itb206,"Elixir is a good general purpose language with great async and concurrency abstractions.  


And with its NIF/FFI you even get things like [https://github.com/versilov/matrex](https://github.com/versilov/matrex) which according to their benchmarks even beats NumPy in some cases.  


So I would strongly consider it for many projects.",1532912211.0
Jdonavan,"tl;dr Shell out...

MIND BLOWN.",1532374580.0
quaunaut,"Maps are not preferred, they're for a different purpose.

Think of maps as large pieces of data that you can extract pieces of for operations.

Keyword lists are primarily for operations where you want to go over every piece of it- whether because of duplicate keys, wanting iterative key/value pairs, etc.

The expectation with function calls is that the keywords presence matters.",1532186750.0
davydog187,"    i.e. func(1, 2, a: 1, b: 2) would become (1, 2, [a: 1, b: 2])

Both of these are the same. the example on the left is omitted the square brackets, but compiles to the same thing on the right.

Keyword lists are typically used for options due to their ability to hold duplicate keys. Lets imagine we were building an image editing library.

    options = [crop: ""square""]

Now what if I wanted to pass multiple crops?

    options = [crop: ""square"", crop: ""circle""]

I can't express the same thing in a map, because maps can't have duplicate keys, nor do they preserve an ordering

    iex(1)>  options = %{crop: ""square"", crop: ""circle""}
    %{crop: ""circle""} # it dropped the first one

",1532185842.0
asonge,"There's an entire ecosystem reason to have keyword lists. Keyword lists are compatible with most of Erlang's options arguments in the erlang libraries. Maps are a real newcomer to the Erlang sphere. They landed just before Elixir went fully 1.0, and when Elixir was 1.0, they weren't even as good as HashDict's then (now deprecated and not usable for much).",1532188650.0
EldritchSundae,"It's important to remember that keyword lists are just lists of items, namely tagged tuples.

When used as a function's trailing opts, they are more flexible (b/c of the repeatability mentioned here) and don't need to use an optimal representation (since they will normally be exhaustively consumed).

It's also a very permissive opts API: many erlang libraries accept options lists where tagged tuples are the most common entry—but in edge config cases as needed you can pass simpler/more complicated entries into the options list. This can be made to read well in elixir by treating the last parts of a list literal as a keyword list, only: 

```
[:foo, :bar, :baz, fizz: :buzz]
```

I would think of kw lists to maps as atoms to strings: one is for developers writing code, the other for user input.",1532254231.0
losvedir,"For a function's optional parameters use a keyword list. That's the convention in the Elixir/Erlang ecosystem. It's plausibly mostly due to maps being a relatively recent newcomer to the language.

But one thing to consider is that for just zero, one or two items (which, in my experience, is usually the case when calling a function), keyword lists are [more memory efficient](http://erlang.org/doc/efficiency_guide/advanced.html) than maps. For `n` options, assuming the options are specified as atoms, and excluding the memory size of the options' _values_ which would be the same in either case, a map will take `5 + n` words of memory (on a 64 bit architecture 1 word = 8 bytes) while a keyword list (i.e. a list of tuples) will take `1 + 2n` words. So in the most common case of calling a function with no options `foo(bar, [])` vs. `foo(bar, %{})`, the keyword list only takes 8 bytes while the empty map takes 40 bytes.",1532660739.0
ms4720,Is there a way this could go in the sidebar?  Very useful for outreach,1532147689.0
ClemDev,I've never found genserver to need any cleaning up. I also prefer explicit code which this isn't. Elixir and Erlang benefit from less magic than ruby or rails (or other languages) have. Why try to bring more magic to an ecosystem which actively tries to avoid it? To save a few lines of boilerplate?,1531915734.0
lauritzsh,"Is it by chance [this](https://www.youtube.com/watch?v=6U7cLUygMeI) video? Lib looks cool, have you had a look at [ExActor](https://github.com/sasa1977/exactor)? It might fit your needs too.",1531904461.0
ClemDev,"You should be defining the `start_link` inside the `TestClassic` module. So you can call `TestClassic.start_link`, instead of `GenServer.start_link(TestClassic, ...)`. This allows for setup/config to happen in the file itself. You should not leave the setup/config to the user of the gen_server to handle. The code could be drastically improved from it's current state. I would work on that part before trying to extract boilerplate from gen_server. Perhaps once you use those boilerplate functions as they're intended, you'll see that they server an important purpose.",1531930580.0
exo762,How do you do :gen_server.reply/2 in this model?,1531906723.0
ScrimpyCat,"While I did like the look of the component in Dave Thomas's example, I'm not sure if it's really needed or if the abstraction will just make things more complicated. Like I already avoid having my genservers be very complicated, all the code they contain is simply what messages to respond to and how they manage their state. All of the logic behind that state manipulation I put else where. I also don't make convenient functions to perform the message sending if that GenServer is meant to be a public interface (I'll instead put it in a separate project). Since structuring it that way for publicly exposed genservers becomes a barrier with how dependencies can be structured and how you might like to deploy your app. While I certainly have a lot of repetition, I'm not sure if it's at the point that justifies having it all abstracted away. 

As far as your specific wrapper, I think structuring it that way might end up getting quite complicated (as there's a lot of possible behaviour choices someone might make beyond those simple match expressions or assuming the end result should update state). While I assume you'll have an alternative case as a catch all to include the more complicated logic. If it ends up where you're just using that alternative, then the DSL provides even less usefulness. So to get the most out of it they need to design their genservers in the way your DSL intends for them be done. ",1532230640.0
ABC_AlwaysBeCoding,"you do realize that if you don't pattern-match in the head, you'll have a whole bunch of extra boolean/branch logic inside the function? It's not like it's going to get any less pretty by not doing it in the function head (and you don't have to!)

Also, if it's TOO ugly, that's probably a design smell anyway

Plus, pattern matching in the arguments list is a way to assign a whole bunch of variables to a structured argument at once, which ends up being super convenient",1531841696.0
Linupe,Can you give an example?,1531805207.0
horvathlg,Nobody forces you to do it. I like it very much.,1531821483.0
ABC_AlwaysBeCoding,"    alias Identicon.Image
    def pick_color(%Image{} = image, _y, _x, _z) do
      %Image{hex: [r, g, b | _tail]} = image
      %Image{image | color: {r, g, b}}
    end

That better? :)",1532455801.0
warrendev,"Interesting thread, what would you propose as a cleaner alternative? ",1531865314.0
get-finch,Have you looked at LFE (lisp flavored erlang) ,1531798060.0
Jump3r3,Do you know about Yecc and Leex? ,1531820421.0
conjukt,Erlang for most developers was it’s ecosystem and the language’s syntax. ,1532382932.0
emmanuelgoldstn,Link isn’t working for me. ,1531706387.0
f1sty,"NOTE: For those, ho can't open link in the header, here is short one - [https://youtu.be/laUMgDLthE4](https://youtu.be/laUMgDLthE4)",1531743637.0
Zacis," how to install Elixir on Android phone in no time. Enjoy.
",1531863558.0
mgwidmann,I love how this guy is recording this video at 1:40 AM 😆,1532050660.0
navonreddit,Does anyone know the font on Jose's terminal at 5:05?,1531500127.0
Zacis,which it has grown since its creation back in 2011.,1531863582.0
conjukt,"Amazing, you all rock!﻿


",1532382953.0
possibly_not_a_bot,"Probably interpreting list of numbers as a string, so when you IO.puts it, you get ""garbage."" If you want to see the contents of the list, use IO.inspect instead. ",1531489178.0
UnknownVariable,"Lists of integers are treated as characters when printed through IO.puts.

    $ iex()> IO.puts [104, 101, 108, 108, 111]
    hello
    :ok

For fun, you can see the character code of a character by prefixing it with ?.

    $ iex()> ?a
    97


",1532532362.0
runSudoRun,The “with” tagging pattern is brilliant 👍,1531439708.0
jxub,"It just came out. Nice documentary, shame that it's made by a company which uses spam-like advertising all over reddit. :/",1531494881.0
lethly,"Is there an alternate mirror?
I keep running into ""This video is not authorized to be embedded here. Learn More"" no matter the permissions I throw at the site.",1531470176.0
Conradfr,The mini demo is fun but other than that I'm not sure what is the goal of this documentary.,1531485940.0
Sonyyyyy,So excited!,1531399139.0
Schrockwell,"See [Phoenix.View.render_to_string/3](https://hexdocs.pm/phoenix/Phoenix.View.html#render_to_string/3):

```
string = Phoenix.View.render_to_string(MyAppWeb.MyView, ""my_template.html"", layout: {MyAppWeb.MyLayoutView, ""my_layout.html""})
```",1531401103.0
UnusualHabit,"Can you provide more details? It is not clear what you want to achieve. The more you can elaborate about the problem, the better the answer will be!",1531400727.0
amitizle,"How did you found out, /u/erlangfactory?",1531395418.0
phughes,"> New York, NY, US

Hmmm.",1531334961.0
dmor,See: https://github.com/elixir-plug/plug/issues/723,1531309864.0
ravernkoh,Is the question here asking why is it crashing but still being able to show an error page?,1531291211.0
Bergerton,"Looks like you’re trying a random route that doesn’t exist.
(Looks like you’re navigating to /fdsafdsafdsa..... etc)

If you don’t have a matching route (or a catch all route), this is the type of error I’d expect.

",1531284845.0
pwaclawczyk,"I've got a little bit lost after this part ""You would think that Elixir is excellent at parallelism, but it’s not."". Could you share some more details on why Elixir is not good at parallelism?",1531252968.0
k-selectride,"Hope you don't mind some feedback.

1. Race condition prevention is due to the immutable data, which isn't exclusive to functional programming.

2. You can absolutely deadlock and starve your processes if you're not careful, and even if you're careful sometimes, especially if you're writing a distributed application using `:global`.",1531237199.0
dmor,"Race conditions and deadlocks exist in Elixir/Erlang: https://www.quora.com/Is-it-possible-that-Erlang-Elixir-with-OTP-suffer-from-race-condition

Perhaps you're thinking of Rust, which performs pretty clever analysis to [prevent data races](https://doc.rust-lang.org/nomicon/races.html). It still doesn't solve the general problem though.",1531307349.0
i_am_pro,"Phoenix Framework creates a new process for every request. This processes are lightweight Erlang processes and not OS threads or processes and wholly managed by erlangs VM. Erlang VM uses pre-emptive scheduling which guarantees that every process which exists inside erlang VM will get a slice to CPU time no matter what, even if one of the process is extremely cpu intensive.

So if your app us getting two request simultaneously, there will be two processes and both will get equal cpu time. How they process data is upto you. You may swap more processes to parallelise tasks.  
GenServer is not only for concurrency, they are for fault tolerance and state management. How many request a GenServer can handle at  a time depends on its implementation, by default it works just like a queue, processing one request at a time.",1531207599.0
haqkm,"@i_am_pro has pretty much covered the whole question. Some addendum: Typically when using phoenix cowboy is your webserver. Here is some info from its documentation:

> By default, Cowboy will use one process per connection, plus one process per set of request/response (called a stream, internally).

> The reason it creates a new process for every request is due to the requirements of HTTP/2 where requests are executed concurrently and independently from the connection. The frames from the different requests end up interleaved on the single TCP connection.

> The request processes are never reused. There is therefore no need to perform any cleanup after the response has been sent. The process will terminate and Erlang/OTP will reclaim all memory at once.

> Cowboy ultimately does not require more than one process per connection. It is possible to interact with the connection directly from a stream handler, a low level interface to Cowboy. They are executed from within the connection process, and can handle the incoming requests and send responses. This is however not recommended in normal circumstances, as a stream handler taking too long to execute could have a negative impact on concurrent requests or the state of the connection itself.

Also, typically GenServers are single processes (unless they delegate to other processes by spawning them or using some kind of worker pool). So, if your GenServer is sequential 2 requests would take 20 seconds just because they are stuck at the Genserver. GenServers when not designed properly can become bottlenecks for your applications.",1531212032.0
joshleecreates,"I am far from an expert, but my understanding is that a genserver is really just a thread that can synchronously or asynchronously respond to messages and update or return state. I’ve used it for:

- a “server” that can quickly store data from other processes in memory, respond with an :ok, and then asynchronously save that data to disk, allowing the other process to continue without waiting for an expensive disk write. 

- a “server” that listens for incoming socket connection requests, and then spawns new “servers” to manage those connections

- a server that acts as a gateway to a third party api, with the ability to log and/or throttle requests that come through ",1531149487.0
acconrad,Pretty neat article on building off of `GenServer`. Could anyone provide context for when you would want to do something like this? I'm trying to find a real-world example of when this kind of thing would be useful. My initial guess is a GenServer could be useful if you wanted to roll your own Sidekiq or some other sort of cron job processor.,1531146391.0
sarahjiffy,"As you may guess, this article is not about rebuilding the Elixir GenServer. It’s already there and it works great. And that’s what interests me the most: why it works great?",1531170875.0
conjukt, Elixir GenServer. It’s already there and it works great. ,1531254529.0
Zacis,why it works great?,1531863627.0
Shenrak,"Is that a Phoenix-like app?

Edit : OK I red the readme",1530951896.0
quayquay17,"GitHub is home to over 28 million developers working together to host and review code, manage projects, and build software together.",1531125473.0
i_am_pro,"Check your changeset function and make sure its casting necessary params. Also I think you are passing body as a map `%{body: %{""key1"" => ""var1"", ""key2"" => ""var2""[.....]}`

Why are you using `Plug.Conn.fetch_query_params(conn)` ? You already got params in function arguments. Its not required to fetch it again. Better pattern match of params if possible like

    def handler1(conn, %{""column1"" => column1, ""column2"" => column 2}

This way you filter out unwanted params.",1530871740.0
Bogl3,"It pisses me off when someone writes fizzbuzz without abusing gcd(3,5) = 1",1530879808.0
nickjj_,"I'm still learning the ropes with Elixir but I much prefer the cond examples (2 or 3). In this specific case I prefer 2 over 3 from a readability standpoint, but there is definite value in naming a condition with a function to better describe it (I would use 3 in a more complex example).",1530882602.0
itb206,that was fun,1531062858.0
quayquay17,"Every developer “worth their salt” knows how to implement FizzBuzz, It is a program which prints the following:",1531125505.0
quayquay17,"The compiler is about 10-20% faster. There are lots of factors that contribute to that result - the BEAM emulator is faster itself, the compiler received some performance improvements and the file system was completely overhauled to use NIFs and dirty schedulers instead of port drivers.",1531125525.0
tweettranscriberbot,"^The linked tweet was tweeted by [@honeypotio](https://twitter.com/honeypotio) on Jul 04, 2018 09:51:43 UTC (83 Retweets | 207 Favorites)

-------------------------------------------------

🎥 Get ready to explore the origins and evolution of the \#Elixir \#programming language with [@josevalim](https://twitter.com/josevalim) , [@mobileoverlord](https://twitter.com/mobileoverlord) , [@chris\_mccord](https://twitter.com/chris\_mccord)  &amp; other big names from the \#ElixirCommunity!



Stay tuned for the official release of [@honeypotio'](https://twitter.com/honeypotio') s “ELIXIR: A MINI-DOCUMENTARY” on JULY 12TH! 🍿 

[Attached video](https://video.twimg.com/ext_tw_video/1014437341866446848/pu/vid/1280x720/WzxfBYArkvhI5RHT.mp4?tag=3)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1530752309.0
Honeypotio,"Hey guys, we've just [released the documentary!](http://doc.honeypot.io/elixir-documentary-2018/)! Many thanks once again to José Valim, Chris McCord, Justin Schneck and all the other elixir enthusiasts and experts who helped us make this film!

[http://doc.honeypot.io/elixir-documentary-2018/](http://doc.honeypot.io/elixir-documentary-2018/)",1531397751.0
appleflaxen,!RemindMe 8 days,1530787995.0
quayquay17,@erlang_org @emjii @scrogson @FrancescoC @jlouis666 @cmeik Thought you might want to check this out too! 👀👆😋,1531125614.0
sarahjiffy,honeypotio's “ELIXIR: A MINI-DOCUMENTARY” on JULY 12TH!,1531170865.0
conjukt,"mobileoverlord, chris_mccord & other big names from the ElixirCommunity!",1531254553.0
,[deleted],1530761845.0
alchemistcamp,"> I’m really happy that Phoenix 1.4 will be using Webpack instead of Brunch by default.

>I’m personally not a big fan of creating SPA style Javascript applications. I’m more of a “sprinkle JS when needed” type of person while leveraging server side templates and Turbolinks, but I do rely on a lot of SCSS and some JS to power my apps and Webpack is quite popular and well supported.

It's really not complex to use SCSS with Brunch. I'd say it's a lot simpler than dealing with Webpack, though the point about momentum is very true.",1530770710.0
quayquay17,The main focus of this article will be on getting Webpack working with Phoenix. The Docker bits are all optional.,1531125592.0
urmyheartBeatStopR,"ugh... I've been putting off learning webpack and there's a new version of it.

I've done grunt before but webpack looks disgusting to learn. Is there any book recommendation? I learn via books better than anything else.",1531032723.0
ciawal,Site appears to be down,1530710976.0
quayquay17,"It's slowly becoming more common to serve brotli compressed HTML, CSS, JS and JSON assets, as it speeds up page loads and decreases bandwidth costs.",1531125575.0
Hauleth,"You can’t. Phoenix will always render `”#{Plug.Exception.status(exception).#{format}”`. 

All what you can do is to redirect render to another function if you really need to. ",1530639526.0
,[deleted],1530678238.0
mbuhot,"Nice! Although I'm not sure about configuring this library using app env as described in the README. 

Are there cases where you can't pass all the configuration options directly to `instrument_plug` ?",1530570335.0
quayquay17,A simple plug that can be used to wrap plugs with an instrumentation callback. PipelineInstrumenter can be used in a similar fashion to Plug.Builder to instrument a plug pipeline.,1531125555.0
Burkt,"Are you running this in iex? Functions run within iex use the interpreter which has different performance characteristics. For proper benchmarking you'll want to at least create a `.exs` file and do `elixir foo.exs`. When I do that I get the following results:

    %{avg: 6564.0, min: 4585}
    %{avg: 4035.5, min: 3636}
    %{avg: 3906.8, min: 3193}
    %{avg: 3820.2, min: 3167}

The Integer functions are distinctly faster. Notably your benchmark also includes the time required to iterate 100k items, which will dilute the differences between the `is_` functions. Even still, the built in ones are faster.

You can see what they do by just looking at the source code: https://github.com/elixir-lang/elixir/blob/v1.6.6/lib/elixir/lib/integer.ex#L31",1530464199.0
EldritchSundae,"The guard-compatible functions in `Kernel` (the ones you do not have to require or preface them with a module name) are direct analogs of the ones available in erlang. Each one corresponds to a *single* BIF (built-in-function: a memory-safe, highly-optimized function implemented in C within the VM, those properties being why they are allowed in guards).

The name-spaced guards, as you observed, are implemented via `defguard`. They are effectively compound guards offered as conveniences for common operations within that domain. Adding them to Kernel would mistakenly imply that they are primitive guards like the ones you are thinking of.",1530521118.0
ndaljr,What do you guys thought of this? I watched and it made a lot of sense to me. Wanting to hear your thoughts on these you beautiful people,1530443477.0
beardedeagle87,"I mean what he says makes sense here and there. I don't particularly agree with everything. But I often find that's the case with any of his talks. I don't _personally_ see the issue with how things are now. I find writing Elixir the current way is quite easy and pleasurable. But as always, there is room for improvement.",1530461602.0
dipittydoop,"I think it's only a matter of time before the Elixir community gravitates to a more effective way of using some kind of component organization as described by Dave. It may not be exactly like Dave describes, but there's definitely momentum in that direction. It just feels right to build separate mix applications for different concerns. I especially make effort to separate my persistence/ecto applications. I don't like how Phoenix glues a lot of database into the business logic. 

The challenge is bringing Phoenix's ease of entry to building applications to building things as Dave describes. Phoenix gives you a reasonable structure for applications and lots of generators to get you going. I'd like to see that same level of low-barrier-to-entry using the decoupled component approach.",1530459416.0
chrisrjones1983,"Can't help but think of the influence from how things are currently being done in the ECMAScript community as of right now.

- so many node modules that do just one thing in hopes of doing it well.  _sound familiar at all_ ie, what Dave describes as a library in his talk.
- definitely **don't** agree with using phoenix the framework to manage the frontend aspect of a web application. 🤷‍♂️  especially with so many great ECMAScript libraries to chose from, ie. React, Vue, etc etc.  And the fact that phoenix relies on a templating  engine to produce it's ""HTML output"" just seems like an extra moving part to slow things down.  I mean just look at what the Ember guys n gals have been going through, and how React was able to learn from the prior frameworks / libraries and was able to work with JSX as opposed to using a ""templating engine"".  That said, I think Phoenix will more than likely stick around for a while but not as frontend framework, but more so as an _application_ (insert bad joke there) that behaves as the API aspect of a web application.  That said, if I'm already writing ECMAScript on the fronted why would I want to cause brain hemorrhaging jumping back from Elixir / Erlang 😬 to ECMAScript when I can write the API and the UI all in ECMAScript.  Sure Elixir and it's friends may be more performant for concurrent connections for high availability apps, but for my particular use cases, using Nodejs with Express gets the job done for all things API related with a web app 🤷‍♂️.

That said, knowing that Elixir spawned from the short comings of the Ruby / Rails community, and applied a lot of its short comings, but also solved a lot of the scalability issues with Rails is interesting in of itself.  But something that I find even more interesting is, that I can't help but feel that a lot of people got introduced to Ruby via Rails, nothing wrong with that, but I do little work with rails, and can't help but feel _my crude opinion_ that it's glory days are in the past, but from all the rails apps I cobbled together it's nice knowing how to edit a brew formula when I' m in a pinch.  And in closing I'm particularly more interested in the apps that Elixir could be applied to outside the web application space.

**TL;DR;DC**
Great talk, loved ❤ the passion, and I'll definitely continue to follow Elixir and the community when I can.",1530501880.0
itb206,"I agree that extensive coupling is bad. I disagree to the level at which he wants to decouple everything out and I disagree with his take on project structure but that only follows because I disagree with the first part. Why are what he calls libraries and what many people would call service classes/modules in multiple separate what I call apps what benefit do I derive by now adding an overhead of server communication and the other pitfalls that come with server communication like handling what happens when suddenly my application can't talk to say a calculator like one of the examples he had on one of his slides.

I personally think microservice architectures are the way to go, maybe with a monolith sitting in the middle, maybe not. So, while I can appreciate what he's saying I believe those microservices should be self contained units with their own business logic contained in the unit.

If you find yourself sharing a lot of configuration across multiple microservices you've potentially identified another service that you should have broken out or -- you failed at your separation of concerns.

What I mean by that, for example in something I am building, a service launcher for machine learning cyber security, the api does not need to talk to a database so it has nothing relating to ecto in it while the service that represents a running job doing what ever to the ml model does talk to ecto to store meta info about the job that ran. Initially I thought well couldn't I need to store the model name or time or something from the api and while I could of, that same info was just as easy to make available in the later service and make that the only service that talks to the DB. So when architecting something with a little extra thought you can usually draw lines and either dumb something down like my API or just not add the functionality to begin with if you think it belongs somewhere else.  


Edit: Oh and I agree with him that genserver has a lot of fluff when writing it, but as he showed with his DSL you can simplify that and there are things that do that in elixir already. (Process)",1530451163.0
i_am_pro,"I agree with phoenix framework's directory structure comments, its looks confusing and not to the point. May be this should be discussed in next major releases. ",1530456579.0
ScrimpyCat,"It's an interesting approach. I liked the idea of configuring and deploying assemblies (although I'm not quite sure how noddy should scale exactly). And while I liked the concept of components I have a few issues with them. 

For one I'm worried they would be too granular (especially when he was saying ideally should just be a single file). So would you have a component that sets up and exposes interfaces to a DB, and then other components that manage some functionality of that DB? But then you've introduced tight coupling between those components, need to manage component dependencies, and will likely need to update a number of components in unison. Whereas if you treat components like services then you alleviate those issues, but the restrictiveness of how components need to be built is rather limiting (versus if you were to just structure them as their own application/with their own supervision tree hierarchy). 

Another issue is component inter-dependencies, what happens if two components depend on each other or if a collection of components have a cyclic dependency. Do you move logic into the assembly now to remove those dependencies, or do you make the components granular enough to remove the inter-dependencies (but then suffer the issues with granularity). 

I also don't really agree with his sentiment about umbrella applications. I think they work when you think about them as simply as a way of organising projects. So whenever you're working on a project that should have separate applications, but it makes sense to develop those applications together in a single project. For instance if you had a chat application and an email application, developing those together might not really make much sense, so I'd treat them as separate projects. But if I had a chat application and an API to that chat application then developing those together makes sense, and so I'd stick them in an umbrella project. ",1530894989.0
ABC_AlwaysBeCoding,"Somehow I completely blanked and missed Empex this year. Oops.

There are almost too many elixir conf possibilities now lol",1531424971.0
Kingoftheknoll,"The preemptive scheduler. As far as I know no other mainstream language or VM has one other than operating system kernels.

Most of the interesting things that are in the BEAM are rooted in solving the problem of always being available. There was a recent talk about the solid foundation the BEAM gives us where the speaker started a node with only one scheduler (one os thread) and was still able to make requests while one request was blocking calculating some ridiculous prime number or something. 

So if you compared this to JS or Go which have cooperative schedulers if one request blocks the thread with a synchronous task you’ve screwed your performance. BEAM makes some trade offs to get consistency in a world of chaos. 

Edit:
Gilded for the first time! Thanks kind stranger. Tried to explain to my wife why I was excited and she didn’t get it ¯\\\_(ツ)_/¯

Here is the talk I mentioned. [Solid Ground // Saša Jurić](https://youtu.be/pO4_Wlq8JeI) ",1530375738.0
TheSultanOfSwagger,"It’s not really binary, things exist more on a spectrum. I would say properly using hot code reload and multi-node deployments are advanced. Performance optimization is advanced.",1530375785.0
Nixonite,"supervisors

macros",1530390171.0
code-shoily,"I tweeted about how'd I'd rank my Elixir comfort level once: [https://twitter.com/mafinar/status/972556015588622336](https://twitter.com/mafinar/status/972556015588622336) (I think beyond 5 could be ""advanced""?)",1530410508.0
lnri,"I disagree with calling things ""advanced"" it discourages people new to the language from trying to gain a new skill or understand what's considered by popular opinion to be harder.",1530820370.0
Apie,"I'm on my phone and it is late but isn't this because module attributes are set when compiled whole configuration values are read at runtime. So when the attribute is set there is no confirmation value? Forgive me if I missed it, I've been binge watching the Vietnam war on Netflix and my brain is fried. ",1530377176.0
ParticularHabit,If you provide some code we can execute and see the behaviour it would make it much easier to see what is going wrong. Maybe put the code in gist.github.com.,1530482659.0
ScrimpyCat,"Does mix format pick one or the other? If not I don't know if there's a standard convention. 

The reason for requiring parenthesis for no argument function calls is because it's ambiguous (at first glance) whether it's a variable or a function call without looking to see if there's a function of the same name or a something was bound to that name (variable) in the scope. Defining functions doesn't have that same ambiguity. ",1530355348.0
aseigo,"I do  not know if it is officially recommended, but I always include paren for consistency between definitions, specs, calls.",1530353497.0
dnautics,"I am not an expert, but i suspect that calling with `Module.function()` is recommended for several reasons:

1. to remind you that it's a function, and not, say, a map dereferencing, which could get ambiguous if you're using an `@value`, for example: `@assigned_module.my_fun()` vs `@assigned_map.keyfordereferencing`
2. to remind you that it's a function call, and not, say, a function value.  It's more useful to less experienced programmers whose eyes haven't adjusted to the `&function/arity` notation yet.

doing

`def my_func do`

because it's 100&#37; unambiguous and saves characters on your limited width",1530593619.0
AsFarAsItGoes,"All conventions are shit, unless you follow them and vice versa, all conventions are good unless you disregard them.

I think the most widely spread convention is to omit the parentheses for function definitions without args, but if you prefer to do it with parentheses, I can’t think of a good reason against it.",1530379418.0
Nixonite,"is this smarkets?

I tried interviewing there, I got 2 out of the 3 hackerrank questions correct on all test cases, and the third one correct for like 8/11 test cases. 

Didn't get to an on-site. 

Ridiculously high hiring standards. ",1530293500.0
acroca,Is in on-site? Would you be open to freelancers?,1530890174.0
Shenrak,I really have to motivate myself to begin elixir,1530270882.0
catlion,"Route the page to POST requests only, pass some parameters from purchase page.",1530271102.0
und0ck3d,"You could try for example when the user makes a successful purchase you generate a hash or random unique ID, save it to a key-value store and when the user visits the ""thank you"" page with that hash/unique (in params for example) ID you simply check if it exists in the store. If it does, allow the user and remove it from store, else don't allow the user to access.

Also using the key-value store, you could use the same idea but instead of having to specify the hash/unique ID in request params you could put it in cookies and then check the cookies for that value whenever the user accesses the ""thank you"" page.

(never used either options but seem reasonable IMHO)",1530210200.0
KagatoLNX,"Well, you can’t really stop the user from visiting the URL. And doing this may not be the best design, as browsers may refresh the page in unusual circumstances (i.e. when WiFi drops out briefly on a phone or laptop).

To get your desired behavior, I can think of a few solutions.

You could set a cookie on the browser (say, thanked=<order_number>) on successful purchase. You can even do this on a redirect (though there have been [issues](https://bugs.chromium.org/p/chromium/issues/detail?id=150066) with that. When the page renders, it could validate that the cookie exists the order number matches (to prevent suppression thank yous for concurrent orders). If it does, it can delete the cookie and render the page. If not, it can redirect to somewhere sensible.

Alternatively, you could create a cookie per order number, but you’d want to give those a relatively low expiry time to prevent the browser always spamming you with unneeded cookies and do not trash up the users cookie jar.

You could also give a query param encoding the time and only allow the page to be rendered if the passed in time is within 5 minutes, else redirect somewhere sensible.

Another idea is to render the thank you into the existing page with AJAX, so there’s no URL to hit.",1530219443.0
i_am_pro,"Is there any specific reason you dont want to query DB ? Because it the simplest way to do so. If you are restricting something its best to handle that logic at the endpoint itself. Well there are solutions with cookies, localStorage but why complicate it. In most cases best solution is the simplest one.",1530261671.0
newking34,"Why exactly do you want the user to access it only once per purchase?
Is there an action that is triggered on the success page f.e. a generating a coupon code?
In that case I would recommend you to extract such an action and move it to be triggered after an order has been placed and just before routing the customer to the success page while having all necessary information provided in the URL. This would treat the success page as a simple presentation of previously generated information, which is way more appropriate in my opinion.

For example you might generate a coupon code right after an order has been successfully placed and redirect to the success page with the URL containing that coupon code. (/order/success?orderId=1000&couponCode=100-100-100)


",1530261713.0
alvesl,"I assume when you say db is overkill is prob because you don’t want to explicitly write to the db just for that right? But I think a query is totally acceptable, here’s how I’d do it:

- probably every purchase has a hashed id 
- append the hashed id to the url 
- upon request, server checks if it’s a valid hash, if it is, allow page to render, otherwise redirect.

The only requirement that is not really met is that people might be able to access this pate later if they still have the hash Id (you asked to render only once), but I think that’s totally fine and different than “Accessing freely” - they are just going back to the page tha  displays something about the purchase.
 As a bonus, you could render small info about the purchase, like date, amount... then your page might even be useful.

Hope it helps!",1530285797.0
asdfasdf,"Generate a {:unique_key, true} on order success and store it in a genserver key value store.  Route your thank you page so that it's GET /thanks/:key.  Then if the key is found then delete the key from the store and render the page for them, else redirect.",1530319905.0
alchemistcamp,"I'd just keep it simple. Make an EEx template for a page but don't make a route for it. Render that page from a controller when a purchase is made.

I made a quick video for your question [here](https://youtu.be/rhkbb25B7BU). Hope it helps!

Edit: I made this before seeing in your later comments that you can't make a POST request. Ah well...",1530371342.0
shaolin_acc,The Absinthe GraphQL library makes use of these to implement the subscription API.,1530199578.0
Sentreen,"    def circuit_break(service_name) do
      # ..
      if error_rate < error_threshold do
        false # don’t circuit break
      else
        true # circuit break
      end
    end    

Why not just `error_rate >= error_threshold`?",1530283052.0
sb8244,"Have you thought about sharing the circuit breaker data across servers using pg2 or some type of native erlang messaging? This could allow pure Elixir circuit cache that is updated across the cluster, with very little code change",1530320740.0
resethell,Neeeel: http://www.enterpriseintegrationpatterns.com/patterns/messaging/ !!!,1530275410.0
resethell,You liked that? This is your god now: http://www.enterpriseintegrationpatterns.com/ !!!,1530274542.0
ciawal,"Is there a difference in behaviour for an external service making the request vs you opening it in a browser?

Also, you don't need to use `Kernel.`, `Kernel` is imported by default so just `inspect` is fine.",1530182804.0
Schrockwell,"Something is not quite right here. A few things to try:

* Is your controller action actually named `call`? If so, you must rename it! `call/2` is a callback function reserved for the Plug behaviour and is implemented by the Phoenix controller, and you may be overriding it by accident.
* Change the route to `post ""/my_callback/:key1"", CallbackController, :my_call` (not sure where you got the `param` option from, but I can't find it in the docs - the param name is inferred from the path)
* Make sure your `post` route is within a `scope` block with a proper pipeline to decode the content type, e.g. the default `:browser` pipeline, which includes `plug :accepts, [""html""]`
* Change from `defp my_call` to `def my_call` (controller actions shouldn't be private AFAIK)
* Make sure the `CallbackController` module has `use MyAppWeb, :controller` as the very first line",1530192163.0
Schrockwell,"Suggestion: use the `static_path` helper instead:

    <%= if @conn.assigns[:scripts] do %>
      <%= for script <- @conn.assigns[:scripts] do %>
        <script src=""<%= static_path(@conn, ""#{script}.js"") %>""></script>
      <% end %>
    <% end %>

I don't know how `require` functions in a browser, but I guess it will do the right thing in modern browsers. Surely at least using a `<script>` tag will allow the browser to load the `.js` files during the initial request instead of having to evaluate the JS first.",1530126850.0
astory11,"I was working on a smaller phoenix project today. That was small enough that I didn't want to introduce an SPA, but I needed different js running on different pages.",1530126547.0
alchemistcamp,Are you putting it inside <script></script> tags in the .eex template? ,1530093781.0
i_am_pro,"I'll say create a separate file and new module, something like `assets/js/project.js` and declare module inside it. Something like 

    window.Project = (function() {}
        let insideFunction = function() {}
    
        return {
            outsideFunc: insideFunction
        }
    )();

Import import by adding below line in footer in app.html.eex. This code will execute above function and will set Project as global variable.

    <script>require(""js/project"");</script>

Now you can call `Project.outsideFunction()` from anywhere just as regular javascript code.

    <script type=""text/javascript""> 
        let something = Project.outsideFunc();
    </script>

 Creating modules will help you to seperate code and maintain simplicity. This isn't the only one module pattern and there are other ways you can write modules, don't worry about them for now.",1530106436.0
niahoo,"in your app.js you must add functions you want to call in a global scope.

The simplest is to do 

    window.test = function() { console.log('test') }

So in your templates you can call

    window.test()

But it would be better to export an object of functions to have at least one level of namespace.",1530096394.0
pls_pressy4pie,"You're not talking about running Elixir/the beam VM _on_ the Android device right? 

You could essentially just do something like Cordova right? Ive Never done what you are asking personally, but I know it's been done. ",1530027133.0
itb206,"If you want to do it your way you would make the native app and have it wrap a web view that renders normally like a browser window, that is the entry point into you app is effectively wrapping a browser window, and then nothing changes for normal Phoenix app development except whatever restrictions android's web view has, but last I checked they were just wrapping a decently modern version of webkit so you may be fine.

That said I don't think this is going to be the best user experience by far. Why not build a native UI that makes API calls to an API written with Phoenix instead?",1530062818.0
ream88,"Hey,

Just a few things before I’m gonna tell you what we did at Yodel:

- I’m still a Elixir novice and continue to learn everyday about Elixir and the awesome things you can build with it.
- We moved AWAY from flow again, as we had similar problems bringing ordinary GenStages and flows together. This may change in the future however. After bringing up the issue on Elixirforum [Flow into/from GenStage](https://elixirforum.com/t/flow-into-from-genstage/14262), josevalim [agreed](https://elixirforum.com/t/flow-into-from-genstage/14262/10) to do something about it.

We enrolled something similar to this:

    defmodule MySupervisor do
      use Supervisor

      @flow [
        Producer,
        ProducerConsumer,
        Consumer
      ]

      def start_link(_) do
        Supervisor.start_link(__MODULE__, [], name: __MODULE__)
      end

      def init(_) do
        children = [
          @flow,
          worker(Task, [&create_flow/0], restart: :transient)
        ]

        Supervisor.init(List.flatten(children), strategy: :rest_for_one)
      end

      defp create_flow() do
        @flow
        |> Enum.chunk_every(2, 1, :discard)
        |> Enum.map(fn [producer, consumer] ->
          GenStage.sync_subscribe(consumer, to: producer, cancel: :transient)
        end)
      end
    end

(And yes our flow is way more complicated than this example)
",1530188654.0
mgwidmann,Will this be recorded? Even if it's just informal this would be really cool for all of us outside of London.,1529973263.0
ACrispWinterDay,"Very cool, looks like they use Elixir for GIS. Any details available anywhere? I work in transportation and I'm a pretty big fan of Elixir, currently use R but would definitely be interested in seeing other options",1529966775.0
jxub,"Hi! I'm writing the Elixir client for BarrelDB (a document-oriented distribited database in Erlang) as a part of the Google Summer of Code (https://summerofcode.withgoogle.com/projects/#6150885181227008).

I've already finished a RESTful client (https://gitlab.com/barrel-db/Clients/barrel_ex/tree/develop) and I'm finishing up the stream functionality for the native Elixir client, which will be updated soon in the repo. Next up, I'd love to tackle an ecto integration, where I'll try to emulate the functionality of the ecto_mongo package, in order to make Barrel a viable option for Phoenix developers.

",1529875380.0
derekkraan,"I have been working on Horde, a distributed supervisor and registry, built using CRDTs. Horde was borne out of my experience trying to integrate swarm into a project I am working on.

https://github.com/derekkraan/horde

https://medium.com/@derek.kraan2/introducing-horde-a-distributed-supervisor-in-elixir-4be3259cc142",1529905979.0
Nicd,"I realised it's hypocritical of me to block Google Analytics with uMatrix when I browse the web but then add it on my own sites, so I'm writing my own 1st party analytics thing in Elixir with Raxx and PostgreSQL. It's going to be very minimal and only have the features I need.

Planned features:

* Simple analytics views with session tracking (page, referrer, UA, screen size, device type, GeoIP)
* Realtime view with SSE
* Auto-pruning of old data to get rid of personal information
* Support for multiple sites",1529926710.0
stoplight,I've been working on a GraphQL implementation of the undocumented NHL api. Using absinthe and absinthe_plug (no phoenix). https://github.com/smoak/nhl_graph_api,1529903199.0
SnakeAndBacon,"I'm working on a browser-based game.

[https://i.imgur.com/wnc9VxT.gifv](https://i.imgur.com/wnc9VxT.gifv)

Taking advantage of the umbrella apps to separate the front-end + controllers from the app logic. Using some realtime features/websockets for chat and some player interaction.

Right now experimenting with code organisation and http2.

[https://github.com/archdragon/game\_engine\_elixir\_phoenix](https://github.com/archdragon/game_engine_elixir_phoenix/)",1530371007.0
Shakti213,"Continued learning Elixir by implementing a server and a homegrown publish-subscribe/telemetry-sending protocol.

Mostly I have experimented with code organisation and making parts more modular, often driven by writing integration-tests.

[Server](https://gitlab.com/Shakti213/lighttel-server)

[Shared library](https://gitlab.com/Shakti213/lighttel), intended to be shared by both server and a future client.

[Protocol specification WIP](https://shakti213.gitlab.io/lighttel-specification/#publish) with [source](https://gitlab.com/Shakti213/lighttel-specification)
",1530532543.0
pls_pressy4pie,"I built a project generator that scaffolds a nif for you. https://hexdocs.pm/nif_gen/1.0.0/readme.html#content

I've been doing this manually for so long, and I finally had enough. Hope it's helpful to someone else",1530853564.0
unnawut,I'm working on a digital wallet backend that allow businesses to run their loyalty point programs called [OmiseGO eWallet](https://github.com/omisego/ewallet). Hi!,1534613625.0
pzingg,"I have been learning how to get a frontend UI written in Elm to talk to GraphQL (with subscriptions for realtime updates) over Phoenix WebSocket channels. I ported Evan Czaplicki's TodoMVC Elm application as the frontend just to use as a simple, fun example.

Code is here: [https://github.com/pzingg/todo\_absinthe](https://github.com/pzingg/todo_absinthe)",1529983011.0
sb8244,"I'm working on an APM (Application Performance Monitor) for Elixir apps. The idea is that it only runs commands that you tell it to run, and gives you the outputs per server. Beyond some stats charts, it will be able to do things like ""Give me top 10 processes by memory"" or ""Give me top 10 processes by reductions occurring in a 5s period""

The commands will be configurable, so you could have a custom command for your app specifically like ""Kill the supervisor tree X so it can restart"" or ""Run GC on all processes""

It will be fully OSS",1532307794.0
radvc,Working on an ecommerce tool with the use of elixir phoenix,1533400550.0
mischov,"From ExDoc's README:

> By default, ex_doc produces HTML files, but, you can also create a EPUB document passing the option --formatter epub",1529775133.0
Paradox,"Barring any more official solution, you can turn any HTML document into an Epub using [pandoc](https://pandoc.org/)",1529769305.0
EldritchSundae,"> I also keep forgetting to add the `do` to my function definitions. Why is this needed? Are functions blocks?

Actually, kind of—they are block arguments to a `def` macro. Personally once I got used to this I loved it, because it is entirely consistent through the language: when I write Ruby now I forget that `module`, `class`, `def`, and `if` *don't* need `do` but many other methods and DSLs do: `each`, `it`, and `context` for example.

Small nit: you refer to some Elixir things as classes/methods (rather than modules/functions), which is minor cognitive dissonance that will fade.

Also worth noting: you can configure Ecto to use `created_at` if you'd rather by doing `inserted_at: :created_at` in your schema's [timestamps](https://hexdocs.pm/ecto/Ecto.Schema.html#timestamps/1).

Finally, it's true that the language itself doesn't have first-class support for time zones. The proposal you link to is an attempt to come up with a formal spec to standardize around not because there is no solution in Elixir, but rather too many different ones. [timex](https://github.com/bitwalker/timex) is my preferred library for this at the moment. Hopefully there will be better support in the standard library soon.

Well written!",1529767864.0
scalatronn,"Good article. I was also using rails for a little bit and I must say auth + authorization in Phoenix are things which should be adopted from rails. Like you said, device is great and this is what coherence is going to achieve eventually https://github.com/smpallen99/coherence it just needs more community's love.",1529718619.0
aseigo,"There are two very different answers to this that come to mind:

A) It really depends on what you expect from this ""workhorse"" application and how it will be driven. Having a message broker can indeed simplify a number of things in cases where you need generic message/work queueing, but it is also means more moving parts, more to deploy, more to manage. This can be cheap next to the benefits of not developing your own solution, having something that provides reliable/durable management of the messaging, etc. Emphasis on ""can"", as it can also just be a source of complexity if your application does not really utilize/benefit from the benefits they bring.

It may be easier all around to treat the Elixir app as a ""microservice"" and just pass requests directly to it via HTTP or the socket protocol of your choice. Fewer moving parts, less application complexity .. but then QoS and the rest is up to you. However, depending on your application that may be a complete non-issue.

The other thought that comes to mind is:

B) Phoenix is not the only option for web-on-Elixir. Using Plug on its own is often more than enough for applications that do not need the complexity of Phoenix. There are also libraries like [Raxx](https://github.com/CrowdHailer/raxx) that take a miuch more straight-forward approach (albeit less flexible / powerful) to the topic.

So if you are thinking ""it's gotta be Phoenix or else not Elixir"", take a poke around :) It would make your life a lot easier if you could use Elixir for the whole app (see above)

As for requiring certain python modules, as you note in a comment here, unless those modules are needed to called from within h ot-paths of the appication, you could consider using them via something like [ExPort](https://hex.pm/packages/export).

Out of curiosity: what sort of Python modules do you require that are missing from the Elixirverse?",1529647097.0
bikemowman,"Why not just write the whole back end in Python or Elixir?

It depends on your use case, but Elixir isn't known for being good at number crunching or data processing. It's well suited to a web app though. Check out Phoenix, it's Rails-ish, but in Elixir.",1529638274.0
horses_arent_friends,"I’ve explored this going from the opposite direction (phoenix web app with python interop so I still could use some data science libraries I didn’t want to port)

I initially worked with Kafka (great option but more powerful than I needed), then found faktory which looked very promising. There’s also Apache thrift, but I haven’t explored that route too much.

I ended up just slimming my dependencies down to a single library (https://taku910.github.io/crfpp/) and interacting with it via porcelain + poolboy while writing everything else in elixir. My main reason for not using python was to keep deployments simple.

If this is for a personal project, do whatever suits you. If this is something someone else might have to maintain, make sure the complexity you’re taking on gives enough value vs a simpler monoglot solution. ",1529668330.0
i_am_pro,"Elixir is fantastic language, I'll choose it any day, but Python is more mature and there are tons of library's specially if your are working in Maths and stuff that will help you get up and running fast. If I were in your'll place I would choose only one language that I am comfortable with. Choosing two languages/frameworks will only add more complexity. If you are use to python, use it. There's nothing Elixir can do that python can't. It boils down to your comfort  level. And if you choose to go with Elixir , kudos...",1529761939.0
ParticularHabit,It is nice to see they are mostly quality of life improvements instead of big bang features. It helps keep the language focused.,1529703166.0
d4lz3ny,"How good is this book and is there any other that could help me improve my Elixir knowledge?

Some things you should know:

1. I'm a slow reader and learner, I can only learn in my own pace

2. I have an incredible lack of attention sometimes

3. and other times I could read 400 pages in one sitting

I've been learning to program for 9 months now, I started with Node and Express with JS, with the course Web Development Bootcamp by Colt Steele on Udemy, then I saw that Elixir and Phoenix was the right choice for what I want to build and work, then I got the Elixir Bootcamp course by Stephen Grider, also on Udemy, however, the beginning I felt that it was soooo much easier than JS and OOP, but sometimes it gets so complex that I can't even remember what he said last, there's too much information that I feel that requires me to read a lot of documentation, so a book would be helpful too

Thanks in advance :)

PS: I'll be posting the same on /r/learnprogramming ",1529679295.0
atheist_x,I'm going through [Programming Elixir](https://www.amazon.com/Programming-Elixir-1-6-Functional-Concurrent/dp/1680502999) and loving it! I feel like what I'm reading makes sense and is written in an easy to understand manner.,1531950691.0
asonge,"You should be able to use `:zip.zip_open/1` to get a zip file handle, and then use `{:ok, [contents]} = :zip.zip_get(handle)` to get the contents of the file. If you want to get a list of filenames and extract specific files, `:zip.zip_get/2` and `:zip.zip_list_dir` as needed.

One problem that might be tripping you up is that you have to use character lists with some erlang libraries (as is the case here). If you were supplying that filename by Elixir string, that's a binary. Use `~c""filename.ext""` or `'filename.ext'` instead of `""filename.ext""`.
",1529608580.0
luizcfonseca,"If you have the file path, you can use 
file_path |> String.to_charlist |> :zip.unzip (or any other) and this will return { :ok, list_with_files } so that you can read them in the directory or whatever you want to do. 

The .to_charlist is because of how the :zip on erlang expects to receive an ""Archive"" and not a strijg, as pointed to the other comment here.

If pass { cwd: ""your current dir"" } it will extract the files in the folder specified.",1529614512.0
Nixonite,httpoison,1529592805.0
ParticularHabit,"hackney (httpoison is built on top of it, but I don't find the wrapper necessary)",1529614105.0
onesneakymofo,I prefer Tesla over HTTPoison. I feel like it has a better API.,1529696063.0
chncdcksn,I always just make a tiny wrapper around gun. However I usually work with WebSocket clients and that’s been the most robust solution I’ve found.,1529874839.0
chulkilee,I'm using httpc and hackney with tesla.,1529631210.0
scarfaceDeb,"HTTPoison, at least because it supports SSL correctly: https://blog.voltone.net/post/7",1529683594.0
mgwidmann,"I thought I read about the EVM finally getting a JIT compiler, was this part of that or is that still to come?",1529582155.0
terrcin,"Thats awesome, I was just looking into doing this with elixir/nerves last night. Thanks for posting!",1529453658.0
Tangui_,"Nice article! I'm wondering what are the security guarantees offered by [hex.pm](https://hex.pm) regarding the integrity of the packages: how do I make sure the binary has not been altered by the developper before publishing, or on the [hex.pm](https://hex.pm) platform directly? Because one can imagine, for instance, a plug leaking the HTTP Authorization header to a rogue server (using httpc...).",1529434495.0
narand,"You have to switch the position of the `belongs_to` and `has_one`. `belongs_to` goes into the schema that has the foreign key, so it should be in the `Header` schema in your case.

See also: https://hexdocs.pm/ecto/Ecto.Schema.html#belongs_to/3 ",1529130097.0
astory11,I’m a little new to Ecto. But I think you’d need to add a migration file like you have for the alter_header. And add the names and values as references on the header table if you want them added to the db ,1529120949.0
Alf_InPogForm,"Wow, this fits perfectly into what I'd be wanting to do with Elixir as we do a lot of work with Kafka too. I'd be interested in learning what libraries they use with Kafka and how full-featured they are compared to, say, the confluent streams libraries.",1529042789.0
zerexim,Do they use Phoenix?,1529177769.0
journalctl,Elixir does seem like a perfect fit for the kind of service PagerDuty provides.,1529241046.0
mcdoh,"I had a similar problem at one point and resolved it by installing openssl via Homebrew.

    brew install openssl
",1528978288.0
urmyheartBeatStopR,"I may just use vagrant and set up a vm if I can't find an answer.

Thanks anyway!",1528963001.0
Giggaflop,"I don't use a Mac, but I'm guessing you're missing some the boringSsl libs on your Mac maybe?",1528973099.0
pls_pressy4pie,"Didn't click, but I'm gonna go out on a limb and say this is a fancy wrapper around :erlang.term_to_binary and :erlang.binary_to_term",1528931389.0
mgwidmann,If only they could fix the history without that patch that I always have trouble getting to work...,1528938339.0
eviltofu,Phoenix uses Cowboy. You can just use Cowboy directly.,1528897372.0
Schrockwell,[elixir-socket](https://github.com/meh/elixir-socket) supports both WebSocket servers and clients.,1528892865.0
firl,Why not in phoenix? out of curiosity ,1528919640.0
KagatoLNX,"One core. There is no concurrency within the process so you can’t get any parallelism out of it.

If you want parallelism, you’re going to need to spawn new processes. This is actually pretty easy. You can use a DynamicSupervisor to spawn your workers and have the state of your GenServer track the rest. You’ll want to supervise them so you get crash messages and to find them if you use the observer for debugging.

You may want to use a monitor in your GenServer to handle crashes of workers, though. There is also nothing that requires you to use cast to get parallel requests. Calls can be implemented asynchronously if that fits your use case better (i.e. you can return noreply on the initial call and to send an explicit reply later). Getting it all right has a lot of details.

You could also just create regular Elixir processes, though I can’t vouch for that working well if you start to use Erlang release functionality for code upgrades, app failover, etc.

All of that said, this is all available as a library in the form of poolboy. It provides a pool manager that is a lot like the controlling GenServer and has pools of workers to give controlled parallelism. [Here](http://hashnuke.com/2013/10/03/managing-processes-with-poolboy-in-elixir.html) is an example of using it with Elixir.",1528879398.0
ScrimpyCat,"As the concurrency aspect has already been answered I won't repeat it. But regarding handle_cast vs handle_call, this is more to do with how other processes will interact with your GenServer process. When a process sends a call request to a GenServer process, that process sending the request will wait for a reply from the GenServer process (or timeout). Whereas if a process sends a cast request to a GenServer process, that process sending the request will **not** wait for a reply and continue on regardless of if the GenServer even successfully received the message or not (this is behaviour you could experience when you're working with distributed processes; while I could be wrong I don't think this behaviour should ever occur if the processes are on the same node?). 

If you have many processes sending cast requests to a given GenServer process, that GenServer process mailbox is still pooling them up to operate on them iteratively (one by one). ",1528887644.0
asonge,"While there's been some comments about pools, if you just want to partition your work to utilize multiple cores and you don't fit neatly into the ""pool"" or ""flow/gen_stage"" model, you can use the Registry module and have your GenServer ""route"" different requests to different servers by some kind of partitioning scheme.

Also, not mentioned, but using call's instead of cast's for performance is not always a good idea. It's usually a good idea to use calls for backpressure reasons (so you don't fill up the server's mailbox), but 99% of the time, this is a ""correctness"" decision, not a performance decision.",1528904418.0
alvesl,"A genserver is by itself a single elixir process. If you send more than one instruction it will queue the subsequent ones (in the process mailbox!)

If you want it to perform multiple jobs at once and/or in parallel you can simply fire as many processes as you need from your Genserver. Although you can do that, I recommend checking out some libraries that do that for free, like Poolboy.

All in all Genserver is just an abstraction to help you expose a elixir process that will communicate with other processes.

Hope that helps...

Edit—-
Just saw the handle cast part- sorry I think I’m a little sleepy.
I’m actually not sure if they will run in parallel although I think it simply will not block the process since it does not require a response. I believe it is still a single process and core being used. Still, if you want to do “tons of work “ going with multiple processes is probably a better solution ",1528845539.0
zer01,"I believe that one of the foundations of the actor model is the notion that processes are singular, independent, atomic things.

To that end, when you run a single process it's scheduled on to a CPU. It's always going to be on that 1 CPU, with the ability to only process one message at a time (unless you suspend the process, but that's outside the scope of this question I think). 

I don't believe elixir has any magic that will migrate processes between cores while ""hot"", but I could be mistaken on that. It definitely won't process 2 messages at the same time though - in order to process 2 messages at once you need 2 processes spawned. 

/u/alvesl is correct in that you should probably be using Poolboy for your usecase, since that'll ensure that you can submit your work to a worker pool, which will achieve the desired concurrency/load sharing you want. 

EDIT: Another thing to be mindful of is the fact that `cast`s are essentially throwing messages into an unbounded queue for consumption, and that queue *will* fill up if your worker/s aren't processing the messages fast enough. 

See [:pobox](https://github.com/ferd/pobox), which is a library to ensure that you can load shed if you ever need to (e.g. a situation where you don't actually care if all your messages are processed)",1528851725.0
mbuhot,"There are two use cases for embedded schemas:

1. as the same suggests, embedding a schema inside another schema. These are persisted as JSONB columns in postgres.

2. as a struct with 'typed' fields, supporting casting and validation with `Ecto.Changeset`. You can use these to validate API params, or any other data coming from an external source.
",1528804170.0
horvathlg,Forget to comment after I tried. This is a really nice project. Thank you!,1529144341.0
dj_goku,"You’ll want to follow this:

https://elixirschool.com/en/lessons/advanced/escripts/

You’ll still need to make a elixir module to even if you are writing a single escript. ",1528573647.0
Aguxez,"If you want to just save it as an \`.exs\` you can perfectly do it, if you want the script functionality you can use escript as /u/dj_goku mentioned. You can still use dependencies and yes, you'll need a http client library just like a normal module.",1528590743.0
mbuhot,"You might be able to use the http client included with OTP.

https://virviil.github.io/2018/04/06/elixir-do-you-have-http-requests-you-are-doing-them-wrong/ has some examples and comparisons between the major options.
",1528615403.0
equineranch,"so would it be better to just do a ""mix new ..."" then mix deps.get in the project, then create a script file within the project? Would this be the preferred method rather than creating a stand alone script?  I guess the dependencies would all be published with the project this way? ",1528594601.0
binora,"Hi r/elixir,

I have been trying to learn elixir since quite some time. The one thing i wanted to get a hang of was otp. You only really get it once you build something in it and then the fun starts. As a result, I tried to build a redis clone in elixir that relies heavily on genservers , supervisors, registry. The otp tutorial on official site was helpful as well since it already has something like this.

I've implemented some commands and the project is in no way complete. So I thought maybe I could get some helping hands and we could build something good . what say ? 


",1528562277.0
SamplingCheese,"This is dope. I'm just starting out with Elixir and, after going through a few books, have been looking for *read\-world minimalist* examples. 

Thanks for sharing.",1528584112.0
chncdcksn,"I don’t think I’d say Option #2 (NodeJS Backend) would be as over-engineered as you’d initially think. Take a look at this library I wrote for building a React rendering server on the NodeJS side ([Isorender](https://github.com/chancedickson/isorender-node)). Since it just uses length-prefixed JSON payloads, the server and the client turn out pretty simple. This library has both a client and a server for NodeJS, so you’d have to write a client for Elixir, however if you use Ports (which takes care of length prefixing for you!) and design your server to communicate with stdin/out, it turns out to be a pretty barebones client, just a GenServer that serializing maps into JSON, sends them over the port, waits for a response, unserializes it and then sends it back to the initial request pid. I like this model for working with an external rendering server, however I may be biased since I wrote a small library for doing so. :)",1528550000.0
nickjj_,"As a fellow Rails / Phoenix developer I am biased towards Turbolinks. I really do think server side templates, Turbolinks and sprinkling in a little extra JS where needed is a combo that works wonderfully for most web apps.

With that said, I'm using Turbolinks now with a Phoenix app (I'm learning as I go too) and it's working really well. Sounds like you want to go React either way but I just wanted to say you can make blazing fast sites with Turbolinks outside of Rails and have it all work out.

I also managed to get Phoenix working with Webpack too. It didn't take much effort to use it in 1.3. Basically just deleted all of the Brunch front end code and dropped in Webpack.",1528634687.0
arnaudwetzel,"About ""Reaxt"", it is developed, eavily used  (dozens of big companies's big projects) and maintained by my company Kbrw. Drawbacks for you can be that :

- open sourced examples and docs are not at all up to date... We need to do some work on it for external users
- we do take our time to update to new React or wepack versions because we have to ensure stability to our existing projects
",1528845249.0
chewm_,maybe you'd check react nextjs...I'd write a post about nuxtjs (which is like next but for vuejs) and could be useful for you...basically you will need run a node server (which run react or vuejs) and from here you make restful calls to your backend (although sounds overengineered the real truth is that it's really simple and nextjs and nuxtjs makes a wonderfull job handling the complex part)...,1535153279.0
eddw4rd0,There is an entire book about phoenix framework. https://pragprog.com/book/phoenix/programming-phoenix,1528497378.0
Niicodemus,The [official guide](https://hexdocs.pm/phoenix/overview.html) is quite good.,1528492978.0
ciawal,If you had a real use case for `with` in your test you could also add an `else` case with `flunk`.,1528399850.0
ElFryskai,"Feel bad, I'm student but with a @student.42.fr :c",1528388157.0
vambat,"darn already own it, great book though.",1528447930.0
Theemuts,"> If you have a pragprog.com account with a valid email address ending in .edu

Just wonderful... At least have the honesty to say it's for American students. ",1528455158.0
Nelmers,Wrong sub ,1527989877.0
redconnors,"This is helpful, thanks for sharing.",1527868516.0
heraldryaq," As a bonus, you will see how to use Sagas to organize your domain contexts.",1528931772.0
sunnyohno,"I'm going to try my best to answer this.  Realize, though, that I'm right about at your level when it comes to Elixir.  I've been a fan of it, but haven't built anything substantial with it, just toy apps.

There are two aspects of user management to address: **authentication** and **authorization**.

**Authorization**

Authorization answers the question:

`Are you allowed to do that?`

This is typically handled by some form of Access Control List (ACL) or Role Based Access Control (RBAC).  This is where Guardian _starts_ to fit in, in Elixir land.  Guardian allows for a pretty easy way for you to protect your API/App endpoints.  From what I can tell, though, this is more of a binary `authorized`/`not authorized` fashion.

In order to get something like ACLs/RBACs it looks like you'll have to use something else.  I _just_ found this, so I can't speak to it, but it looks like you might be able to get this with [canary](https://github.com/cpjk/canary).

**Authentication**

Authentication answers the question:

`Are you who you say you are?`

This is where passwords and tokens come in to play.

So before you can ask `Are you allowed to do that?`  you need to know that `""you"" is really ""you""`.  Thankfully Guardian has a sister library that works hand-in-hand with it, called [Ueberauth](https://github.com/ueberauth/ueberauth).  This provides a way to add authentication via simple passwords or external oauth2/openid providers such as Facebook, Google or Auth0.

**Example/Tutorial**

This might be the most thorough walkthrough that I've come across: 

https://medium.brianemory.com/elixir-phoenix-creating-an-app-part-4-using-google-%C3%BCberauth-e7d2ed1a3541

It's a 10-part series of blog posts, that you may want to go to the beginning.  I linked directly to the ueberauth portion, though.",1527732674.0
,[deleted],1527787947.0
jordiee,"https://medium.com/@jpiepkow/accesspass-yet-another-elixir-authentication-library-7ea59734a49

https://github.com/jpiepkow/accesspass

Disclosure I made it and it is still slightly black box when it comes to the schema but there are some issues open on the repo I plan to get to and change that.

It is slightly based off addict but with some changes I made in order to not be locked into addicts view. There is a ton of info on hex about it as well.

A couple people in my area are using it in production for some small projects and seem to enjoy has easy it was to get up and going! Anyways issues or pull requests are always welcome!",1527792087.0
jibbit,"Ive found this to be more true of Erlang. Although Elixir / Erlang are effectively the same language.. the emphasis with more of the Erlang learning resources is more about a different way of programming, specifically focused on error handling and robustness. The emphasis with more of the Elixir learning resources are more about how it can be a replacement for, say, Ruby, but with multi-threading for free. This is just what i felt when reading Elixir / Erlang books, and it's not to say that the Elixir books don't cover the same stuff as the Erlang books, they do and they are very good.",1527690675.0
jake_morrison,"Pattern matching on function heads is quite interesting, I really miss it in other languages. 

It simplifies a lot of if/then/else logic. Sometimes it lets you implement your code as a kind of ""state table"", e.g.

    def frob(true, true), do: :foo
    def frob(true, false), do: :bar
    def frob(false, true), do: :fizz
    def frob(false, false), do: :buzz

You effectively get ""design by contract"" with assertions on bad data.  You write code with what you expect to get, and if you don't get it it's either invalid input or a bug. This applies to your whole system, e.g. by pattern matching on your HTTP inputs, you can deal with junk from DDOS attacks.
",1527730129.0
tastygoods,"I would say Elixir teaches true *process oriented functional programming* in a more modern and much nicer (imho) way then what most other languages do.

As a comment above states you can program sorta functionally in any language even JS or Ruby and Erlang/Elixir are not necessarily pure because many modules have side effects but they are pragmatic instead.

When you understand the process-first approach where for example we can spawn 1000 threads/processes to do this random thing without even thinking about if, we are much better prepared for the multicore future then any single threaded or locking based runtime.

An advantage nearly unique to Erlang/Elixir and a huge win towards future proofing.",1527682846.0
jake_morrison,"We have all been taught about object orientation, but it's not needed, and can actually be harmful.

Protocols give us polymorphism, and pattern matching on function heads allow us to dispatch on the types of all the inputs, not just the type of the object. 

Macros give us the benefits of inheritance, without the tight coupling between layers. 

OO systems have problems with concurrency, because every object can potentially be called from multiple threads at once. Effectively every function call needs to be protected by a mutex. GenServers handle this automatically using the process mailbox. As the saying goes, Erlang is the most object oriented language there is.

Functional programming is cleaner and more natural than OO. See [Execution in the Kingdom of Nouns](https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html)",1527731056.0
lucasvandongen,It's really great to have state so separated from logic. Even when I try to do it in different languages things tend to be hard because most libraries are not built with that style of programming in mind.,1527697062.0
jake_morrison,"There is a focus on reliability. Ruby programmers are all like, ""look at this new DSL I have for making HTTP requests."" Elixir programmers are like, ""cool, what if it times out?"".",1527730225.0
Ariote,"Yes.  I don't use it now but just reading 200 pages of a beginner book opens your eyes in some kind of way.  I was programming js,  c, python before. Genserver,  supervisors,  and the process spawning stuff is just cool.   
Edit: FP wise is not complicated and shows basic concepts of pure functions and immitability (especially state handling)  in an ubderstandable way.  The sad aspect for me though is that there is nothing i can/would use elixir now. Maybe if it gets more attention in the web but then again it probably makes more sense to prepare for webassembly",1527665251.0
MonkeeSage,I recommend reading the [Getting Started](https://elixir-lang.org/getting-started/introduction.html) guide. It's fairly short and lays out the features pretty well.,1527708019.0
snappyTertle,It helped really understand concurrency and race conditions in other languages that share memory. ,1527710810.0
majorius,"actually, learning any language brings new insights to your ""main"" language. After learning elixir I've really looked in some parts of JS I never thought of before, also python is good to learn for nicer naming and overall aesthetic part of your code. ",1527716809.0
philly_fan_in_chi,"Macros are amazing and I don't know how I'm going to go back to languages that don't have them. There are things you can do with them that you cannot do in other languages without crazy duplication. Take a look at `kernel.ex` if you get a chance and look at ALL the language features you can implement with them. 

When you get to sufficiently large code bases, they create abstractions that allow you to DSL over the wiring and create very expressive solutions to your problems. ",1527728780.0
jake_morrison,"Cheap and easy processes mean that you can model the natural concurrency of your application. You get a request, handle it, give a response back. Or you model a chat system with one process per connected user, and one process for the chat room. The code is simple.

In other languages, you have to deal explicitly with non-blocking I/O, thread pools, synchronization.",1527730670.0
bdubaut,"I work with Ruby everyday and writing Elixir has made by object\-oriented code more functional. In a sense that my methods are smaller, return only one possible class, and that now design my code as passing messages between objects.",1527754267.0
permalink_save,"I haven’t dug too far in Elixir but it isn’t as hardcore as Haskell. Haskell is more an academic language. It is good to learn (especialy learn you a Haskell book/site) because you go through relearning how to manage state and to make pure functions, how to avoid side effects, and write good functional code, then you get to monads and realize reaity is not that clean. Those concepts are what carry over to stuff like jnderstanding state. Haskell is also huge on recursion. I’d imagine you could put all of the same concepts to use in Elixir. Haskell and the accompanying book (learnyouahaskell.com) are good to see the ideal way of doing FP, but Elixir should give you more in the way of practical applications. Elixir also has a easier to follow syntax coming from OOP especially Ruby. Elixir is definitely not just Ruby plus FP tacked on (Python more fits that) due to the underlying language.",1527783138.0
teilo,"I think this entirely depends on who's teaching Elixir. Reading Saša Jurić's [Elixir in Action](https://www.manning.com/books/elixir-in-action-second-edition) was a revelation to me.

If someone is teaching Elixir / Phoenix as if it were a more performant RoR, I think they are missing the point. If one writes Elixir code as if it were Ruby, they aren't really using the language as it was designed to be used, and are missing most of its power.  


But to answer your question: If you learn Elixir as it is meant to be used, absolutely. You will view programming very differently. You will understand functional programming, and will likely use there methods when you come back to the Python's/Javascripts of the world.",1527872498.0
alchemistcamp,"Coming from Scala with its lean towards immutability, pattern matching and the Actor model, maybe not much.

Coming from Python and JS, you should grow a fair amount (and actually have an easier time with something like Haskell in the future as well).",1528194963.0
kkweon,"Functional Programming way.

Of course you can do FP in JS, but doing FP in a good FP language is completely different from doing FP in JS.

Since it does not rely on third part library or custom function, you really can focus on what is important.

It is hard to explain to people who are not familiar with the FP, but you get to learn / think how to handle side effects. And the FP language forces you to think this way. Once you get familiar, you can apply the same idea to other programming languages, even Java.",1527665485.0
,[deleted],1527656608.0
AlpineCoder,"That's definitely not normal performance, but hard to say exactly what the issue is. My guess is your changeset function is trying to enforce unique constraints on the data without a unique index on the DB, meaning ecto needs to select every row and compare to validate the constraint before the insert. As the number of rows grows, this will take an increasingly long time for each insert.",1527655092.0
get_salled,"Test with benchee.  
Parallelize it, not sure if a 296 ms average is bad or not for ecto, but you are running them serially.  
Strings are really slow in 1.5+

",1527655548.0
Arcsech,"In my experience Faker is very slow for generating data in bulk, not really sure why. I’d try this just generating usernames/emails etc. by using incrementing numbers like “user1@example.com”, “user2@example.com” to get rid of Faker and see if you still have a problem. 

Edit: Whoops, looks like you already found the problem. Oh well. ",1527657947.0
tastygoods,"On mobile so no way to test your code but take a look at Ecto.Multi.

https://hexdocs.pm/ecto/Ecto.Multi.html",1527654468.0
dunafrothint,"If you’re doing this, also use the param option on the resource function to specify a better key for your slug parameter (i.e. name in this case). That way, in your controller, you’re not still pattern matching on “id” when you’re not being passed an id.",1527735586.0
limbsflailing,Alchemist camp on YouTube,1527636170.0
joebew42,"I do live coding on Twitch three times a week. You can find the channel here: https://twitch.tv/joebew42. What I do there: try to contribute to existing elixir open source projects, build new playground projects, learn something new about elixir, practice Clean code, TDD and Refactoring :D",1527660347.0
tastygoods,I have four years or so of anonymous Elixir experience but with a nomadic schedule so wouldn’t be able to commit to much but would extend a private offer if you PM me we can trade emails and even text/phone if needed. Congrats and good luck!,1527638851.0
hahuang65,"Hey, welcome to the community! Hit me up with a PM if you ever want someone to kinda just chat with or pair with.",1527650060.0
equineranch,Thanks everyone. I appreciate the help and offers. I'm gonna try to delve deep after the weekend. ,1527819738.0
ataboy,"Reported as spam. All [Udemy](https://www.udemy.com) courses are $9.99 right now, which happens somewhat frequently. No need to go to an obvious spam site for this deal. ",1527528834.0
no_spoon,"Despite the spammy looking promotion site, this deal doesn’t look bad",1527521284.0
bretttt,I am in that course on Udemy and it is a bit outdated.  The instructor says he is going to update it soon.  ,1527872766.0
petecorey,Cool article! I'm inspired to finally give Credo a try.,1527519915.0
jake_morrison,"We have feeds of our blog:

* https://www.cogini.com/feeds/atom.xml
* https://www.cogini.com/feeds/rss.xml

It's a bit eclectic, covering development, devops and startup product design, so you might prefer to select by category:

* https://www.cogini.com/feeds/category-development.atom.xml
* https://www.cogini.com/feeds/category-development.rss.xml

or by tag:

* https://www.cogini.com/feeds/tag-elixir.atom.xml
* https://www.cogini.com/feeds/tag-elixir.rss.xml

See the side nav on https://www.cogini.com/blog/ for what's available.",1527408111.0
jake_morrison,There is Saša Jurić’s site: http://www.theerlangelist.com/rss,1527412786.0
sudorobo,Platformatec's blog posts a lot of stuff on elixir. Not sure how to filter it for language (en and pt) or on Elixir tags.,1527388649.0
Findlaech,This sub,1528233781.0
Hasterb,"As a big fan of Elixir and Phoenix ([Talkery](https://talkery.io) is even written with them), I am always excited to see a new talk, especially one by Chris McCord. 

In this talk, Chris goes into the new upcoming features of Phoenix 1.4 as well as some different approaches to using phoenix vs traditional web apps. Enjoy!",1527334185.0
shaolin_acc,Threatened? Why?,1527266634.0
ichbineinProgrammer,"@OP, this is a subreddit dedicated to the programming language named ""Elixir"", it's not to do with the private funding companies that bare the same name.",1527600631.0
GrammerJoo,I was so confused,1527294072.0
equineranch,That dude. Whooooh. Crazy. ,1527821306.0
jake_morrison,"I don't think a generic proxy exists today as a product, but you can certainly build one. 

You can use [Terraform](https://github.com/poteto/terraform) to do this in a Phoenix app.  You can also use [Absynthe](https://absinthe-graphql.org/) to do this using GraphQL as the front end interface. 

It's useful as a way of making existing apps more reliable. I cover that in [this talk](https://www.cogini.com/blog/presentation-incrementally-migrating-large-rails-apps-to-phoenix/).",1527246590.0
MonkeeSage,Maybe I don't understand the question. You can put elixir endpoints behind any gateway you like...,1527292156.0
mbuhot,"Accenture built something along those lines: https://accenture.github.io/blog/2017/11/09/introducing-rig.html
",1527336505.0
michalmuskala,Would [this](https://github.com/Nebo15/annon.api) be the kind of thing you're talking about?,1527497675.0
tastygoods,Be specific what would be the bare minimum product features and how much would you pay for it?,1527242151.0
p8m,"I've been working on a free/libre video surveillance system written in Elixir/Phoenix with a mostly react frontend. I'm hoping to distinguish my system by offering very high performance through hardware acceleration of video decoding on various platforms, including the raspberry pi. And also transparent reliability, in the sense that it recovers from errors and tells you when something is wrong that it can't recover from. For example, if your disk is full or if the system can't write the disk fast enough, it will give you a precise, actionable error.

Once I get a few more pieces in place I want to implement video analysis by feeding frames to machine learning based object detection systems running in a port. Focusing first on tightly constrained problems with real utility: Is there a package on my porch? Is there a car in my garage?, etc.

Elixir has been a joy to use so far. The main hangups have been with documentation, especially supervisors. I couldn't figure out how to use the new DynamicSupervisor with phoenix. Oh well I'll keep using :simple_one_for_one until I can't :)",1527389222.0
pls_pressy4pie,"https://github.com/ConnorRigby/exgb/blob/master/lib/exgb/disassembler.ex

I'm building a disassembler for the Gameboy and Gameboy color CPU",1527534205.0
meta_stable,Still typing away at my sci-fi mmo. I do have a playable build for Android that people can try out if they're interested. https://s3.amazonaws.com/plex-dev-builds/plexdev.apk It's still very much an alpha but feel free to leave comments here or in a PM.,1527180978.0
shockyx,"We're replacing our dynamic SQL query engine written in ruby and replacing it with our new QueryEx package.  We're also planning on porting over our security layer called Securables to elixir in the next few weeks.  I expect us to be running this in production in about two months.

https://github.com/markglenn/queryex

Basically, this allows you to build an API for a SQL database that includes side loading data, automatic joining of tables, and your basic filtering and sorting.  We've been using our Ruby version in production successfully for the past 5 years, but it's hard to keep it running fast due to the speed of ActiveRecord.",1527450983.0
synthesezia,"Launched my first elixir project the other week so I’m working on refactoring it. It’s a sweary travel guide called [What the fuck should I do in?](https://whatthefuckshouldido.in/). It’s not too complex as it saves a bunch of results from foursquare locally and then randomly picks one, but for some reason some foursquare queries only return a few results, whilst others return > 90. 

I’m also working on my second project, which uses public data about politicians. Turns out there’s a lot of politicians in the world, so it takes more than an hour to seed the database. I tried using tasks to parallelise it but it didn’t seem to work, so I might take a look at that soon too. ",1527506527.0
Shakti213,"In order to learn Elixir I set myself a task: build a server (and later a client) for a network protocol that I am also currently developing.

The protocol is basicly modified variant of MQTT with some added functionlity but not as general or verbose as AMQP. I know about RabbitMQ etc. etc. but I wanted to learn Elixir so decided that it is a good task. Another benefit is that it may also benefit my day-job someday.

Server can be found [here](https://gitlab.com/Shakti213/lighttel-server) and some shared modules that is intended to be shared by both server and client are [here](https://gitlab.com/Shakti213/lighttel).
",1528380769.0
Arthien,I'm working on some imaging bindings for libvips and opencv.,1527564703.0
synthesezia,What about Yelp?,1527621767.0
nickjj_,"Hacking away on a video course hosting platform.

Besides working on the app in my spare time, I'm also thinking of ways on how I can (or if I should) open source it.",1529165744.0
ashish173,"We at [aviabird](https://github.com/aviabird) are working on an open source e-commerce framework in Elixir. Codename [snitch](https://github.com/aviabird/snitch). We have done frontend e-commerce framework in past [angularspree](https://github.com/aviabird/angularspree).

The project is still in early stages. We are planning to go live with www.ofypets.com by 30th June.

We are also accepting contributions from the community but since we are moving pretty fast, we recommend getting in touch with us if you want to contribute. ",1529216507.0
ashish173,"We at [aviabird](https://github.com/aviabird) have worked on a payments library [gringotts](https://github.com/aviabird/gringotts). It is heavily motivated from [activemerchant](https://github.com/activemerchant/active_merchant) from the ROR world. 

We have integrated 9 gateways so far and plan to do more in coming months.

Contributions are welcome! ",1529216751.0
dnautics,"I'm building a scheduler that takes containers and turns them into serverless API endpoints.  This is for work, and I'm possibly hiring in July. So if anyone is interested in this kind of thing drop a line.",1529337970.0
Iamnotpretending,"Sure, why not. I've been doing elixir professionally for two years now -- why did you start learning elixir and what are you trying to get from it?",1527140117.0
rubyonhenry,"You should check out the elixir forum, great community and a lot of helpful people (my handle: hlx)",1527194594.0
puppet_pals,I could review some code if you want,1527188131.0
Orlandocollins,I am probably near your same level but I wouldn't mind having someone else to learn/discuss wirh,1527193087.0
_powder_,"I'd be happy to review code.  I don't have as much stuff available to review in return, but, I mentor frequently and have done Elixir at a previous company.  So, can certainly give my fair share of opinions. :)
",1527258136.0
lalo2302,Upload your code to github and dm me for feedback. I’m more than happy to help.,1527702447.0
ParticularHabit,"Btw, the DynamicSupervisor has a `:max_children` configuration that does exactly what you did, but built-in. :)",1528911901.0
ParticularHabit,"It feels like the author is missing the main complaint about `gen_event`, which is the poor error semantics. If a `gen_event` handler crashes, it is gone forever, unless you write a good amount of boilerplate code to add it back.",1527088653.0
qqwy,You raise some very valid points in this article!,1527006529.0
mr_luc,"Awesome. Yeah, I'm also looking forward to (and curious about) the Mix improvements.

I tried to address one set of the concerns you mention via [DeferredConfig](https://hexdocs.pm/deferred_config/readme.html) -- for deferring the filling of patterns like system tuples, or mfa tuples, to runtime; makes it easy to test a prod binary artifact on a dev's machine by just tweaking ENV vars, makes it 'Mix-agnostic,' etc.

I feel like 'app env as a way to configure runtime behavior dynamically during the lifetime of the service' isn't such an important use case -- we have ets and many other options available as sources of truth/ways of changing or polling for the current 'settings' for a running service; app env is a poor/limited API by comparison. It's suited to values that are known at compile-time, even if those values are just symbols that aren't fully evaluated until runtime.",1527264091.0
ScrimpyCat,"Really liked this article. I've been feeling much the same regarding configs. Although what turned me off was not just poor runtime configurability, though that was a contributing factor. My other issue came about from how I was designing my system, I opted for building microservices as separate projects (rather than a single umbrella), so this led to development and test environments having to keep duplicating the copy of all of the configs from the other services. Which overtime started to become very annoying. 

I've experimented with some ways of tackling that issue, some brought about other issues. I eventually settled on something that solved some of the issues but was still less than perfect. But I like some of the ways you mentioned solving the problem, so will probably be revisiting this once again in my projects haha. ",1527295361.0
asonge,"This happens when the VM can't talk to epmd (the port mapper daemon). If you have any firewall rules or something else is listening on that port already, there may be an issue.",1526948514.0
ndaljr,I think deployment is one very topic that needs much sharing. I'm coming from dockerizing node apps and using it with kubernetis. Is using something like kubernetis even a good idea with the Erlang vm?,1526919249.0
p_r_m_n_,"Web dev in general. Express and Flask make it look so ""easy"". I would like to see more articles around ""look how easy it is to {spin up a web server, parse csv, resize an image}"".

Less emphasis on ""coming from rails"". I feel the narrative doesn't fit a lot of developers who are interested in elixir/phoenix. I, for example never touched rails in a workplace until about 1 month ago, but I've worked with PHP and Python for many years prior. (I actually think PHP developers are a large pool of people who'd be pretty happy coming to elixir/phoenix). 

I second content around deployment. More information about production deployment would be awesome. Especially using AWS, GCP, Azure etc. An aws employee on twitter called elixir developers neckbeards who don't use the cloud anyway. I would like to see that narrative to change. 

More structured beginner friends tutorials would be excellent. For example, in python https://automatetheboringstuff.com/ is a common suggestion for new devs. Content along those lines would be great to get developers to try elixir. Automate the boring stuff [Elixir edition] would be pretty valuable.",1526931385.0
kotojo,"I'm just getting into this language and I'd say one of the biggest things I keep looking for is how is examples of architecting supervision trees. I've read a lot of stuff from blogs from the discord devs and the like, but find the thought process behind it to be very educational.

I'm aware of it, but I have tendencies to get an idea, and instantly open a text editor and start _doing stuff_. As I get more experience I am realizing how much of good architecture happens before writing a single line of code.

Now that I've written this out, I'm not really sure this is particularly a elixir/otp thing, but almost just good architectural practices as a whole.",1526916212.0
candlesaint,"Utilizing Elixir alongside big data tooling (Spark, Hadoop, Elasticsearch, etc.).",1526921985.0
lapin1989,Some metaprogramming would be nice,1526921833.0
r0stig,Different types of service discovery when building a cluster within a cloud service. Especially using AWS ECS since that's what 'm using at work :-) .,1526918303.0
possibly_not_a_bot,"Handling cases where you can't have a nice supervision tree to start out (so to speak). I have a very real use-case where I want to dynamically spawn supervised processes (in such a way that it can't be determined before creating the application supervision tree at the start), and have been struggling to find info about how to handle this sort of case. ",1526952691.0
k-selectride,pretty excited for his new book.,1526953962.0
Nixonite,"Last time I tried react with phoenix, I got react to work, but for whatever reason I couldn't import local css files. I mean if I wanted to make component\-specific css files and put them inside of the component directories under /assets/js/components/\<component\-name\>/ and import it locally into the component's js file, I would get some error about not being able to see the css file.

Does this solve that issue?",1526832430.0
r0stig,Great post! When you deploy to production; how do you handle current connections ? Sounds like you just stop the service and start the next version which means all current connections is dropped? Have you thought of any type of blue/green deployment strategy?,1526716638.0
lucasvandongen,"The right article at the right time. We're just getting to a stage where our first Elixir project goes into production in a few weeks and we're still figuring out best practices.

Thanks a lot!",1526740155.0
sb8244,"Nice, I appreciate the high level approach to this article. I have been using Docker and so the latter half doesn't apply to me much, but it is great to have a reference point for when I am deploying a person project without docker!",1526762062.0
bglusman,I think you may be interested in cortex https://github.com/urbint/cortex,1526874844.0
sb8244,"1. I assume this is locally. Hot swap can happen locally when watched files change. Phoenix has this setup out of the box and it works well. It's fast enough that I've never thought about it.

2. Distillery does package the BEAM VM (erts) by default. This is why you need to compile packages on the same architecture OS as what you'll be running in production.

3. There is `mix test --stale` and also there are test watchers, but I haven't used them. It looks like https://github.com/lpil/mix-test.watch supports --stale option as well.

In general, I feel like Elixir / JS are pretty non-comparable. You can use a JS actor model, but it fundamentally is going to have differences from how the erlang process model works. You will surely be able to create an efficient workflow that allows you to be productive and fast.",1526605599.0
,"For 1. Only that file and any file that depends on it will be recompiled. Other unrelated files will not be recompiled.

That's true for everything in Elixir/Erlang, even outside Phoenix.",1526621648.0
reethok,"Hey! Node dev here, I've been learning elixir on my free time but I'm quite new to it. There doesn't seem to be a file-watcher however you can just type recompile into IEX and that will recompile your application without restarting it (it might crash processes though). ",1526601042.0
mgwidmann,"The JVM and the EVM work completely differently in this respect. The EVM does not have a single heap to even set a size on, there's one heap is contained within each process. I'm not sure but I suspect the per process heap size to be unbounded, though you can look around for it. 

The more common scenario is to discard the entire process so that no garbage collection cycle is needed at all. There was an article not too long ago that talked about this but I'm on my mobile and don't have time to find it now.

Can you explain more what symptoms you see and what you're trying to fix? Memory management is quite different due to immutability, so there may be some tips we could give you if you post some sample code.",1526512752.0
sb8244,"I do not know of this setting, although I still have some advice that might be applicable:

Have you looked at setting fullsweep_after to something lower, like 10 or even 0 (extreme, always do a major gc)? This could give you the benefits you're looking for.",1526506326.0
EAT_DA_POOPOO,"BEAM is very good at what it does, but I don't really like Erlang's syntax.",1526422895.0
,[deleted],1526425972.0
p_r_m_n_,Took a position and inherited a Ruby on Rails app. This thing was built by a 15 year vet but it’s a mess. It’s so fragile. Every little change has massive side effects. I can feel the aftershock ripple through the codebase. It’s not small either. I’m not saying you can’t build crap in elixir but I’m over tracking down mutable state transformations. Plus I’m ready for a change. I also believe elixir will be see a wider adoption and will prove to be a lucrative career choice. In 10 years when someone inherits my crappy elixir app they’ll be pissed off they can’t just mutate state and then they’ll rebuild it in “Python on Bike Lanes”. ,1526436259.0
LeeOfTheStone,"Having started to dabble in more 'functional' programming concepts in JS, Elixir felt like a good way to increase my understanding of those ideas using a grammar/syntax that I enjoy.  I also kind of bought into the party line about the stability and capability of Elixir/BEAM as a way of managing the backend.",1526423962.0
jnazario,"I finally began to understand Erlang’s conventions after a helpful conversation with someone at work. Elixir made more sense after that. 

I found myself frustrated with python for projects that went beyond prototypes. I wanted the properties of the erlang runtime and so instead of approximating it I decided to use it. 

I have been happy with my decision. I learned it at work porting a prototype from python to elixir. Launched it and found it ran continuously for months after without hiccup. ",1526426118.0
hswick,"My professor invited me to go with him to the first Elixir conf in Austin because he knew Jose. Listening to all the presentations was very convincing.

My other two favorite programming languages are Ruby and Clojure so it was an easy sell for me :p",1526428922.0
renrutal,"Out of all the languages I know, it is the most elegant, with a real lot of thought out in its design. I love the white paper driven approach of its development.",1526433144.0
cjk101010,"I already loved Erlang. Thus learning Elixir, a beam language with a more fresh and new approach, seemed a logical choice to learn for my „one programming language a year“ approach. And I didn't get disappointed: I love Elixir.",1526459815.0
gj_danton,"I started a side project and I wanted to write it in Clojure but felt like context switching from Ruby (which I used at work) to Clojure might get annoying. Elixir & Phoenix felt like it might give me the productivity I was used to with Rails with the some of the benefits of Clojure (FP, thread first macro, immutable data, good concurrency story, etc). One year later, I switched jobs and now use Elixir both at work and on the side and couldn't be happier.",1526444553.0
urmyheartBeatStopR,"Was php web dev. Dabble around in nodejs and erlang. Realize Erlang was awesome. Hang out at Erlang meetup. Erlang peeps asked, ""why don't more dev use Erlang?"" I basically said, ""Erlang needs something awesome like Ruby got Rails."" They all disagree and said it's bullshit and still wonder what's wrong with Erlang adoption rate.

Elixir came about and the community seems better. It's like Ruby less like Erlang peeps at the meetup. Elixir missed the boat that Ruby had, Elixir is coming in where web dev market is saturated but everything is fine. Less hype probably less tribalism unlike Ruby or NodeJS bs. Ruby had a lot of tribalism especially early day they were shitting on jruby and then rift between main core Ruby and other implementation.

To be honest, I didn't hate Erlang's prolog syntax. It's just something to get used to and the language was small enough. The comma and period combination actually made it look cleaner than Elixir sometime. But the momentum and community in Elixir is nicer.

",1526469820.0
biocs_nerd,"I had been itching to learn a functional language for a while, and had gone through Clojure \(totally amazing, but the DIY culture made getting anything done awful\), Erlang \(syntax... barf\), and Haskell \(loved it, but it felt DOA\). I ended up with Elixir after a few colleagues spoke highly of it, and in seeing that the culture was a better fit for me.",1526476954.0
bryanredeagle,I want to build telephony things. Erlang's history in the industry combined with Elixir's rad syntax makes it a good choice.,1526428088.0
sb8244,"I had a co-worker who I look up to who was really hyped into it. He knows I like to ride the wave and so he started talking about it more and more. Next thing you know, we have about 3-4 microservices running and more on the way.

Biggest reason I wanted to learn it was to just expand my horizons and he swore by it.",1526439468.0
mbuhot,"Was a functional programming fan, then a recruiter suggested a role using Elixir to me. At the time I was more interested in Haskell/F#/Idris, but I've since found that by focusing on simple immutable data transformations instead of fancy type systems, elixir can be a very productive environment. ",1526441186.0
blackjackjester,"Come from a Java and C background, very interested in the concurrency and fault tolerance approaches built in.  Always wanted to get into Erlang due to OTP and the above reasons, but couldn't be bothered to learn the esoteric syntax.

I at first had a hard time because I despise Ruby, but Jose and Co. really succeeded in making Elixir only cosmetically related to Ruby.  The Dave Thomas book also had me pumped.

Currently I enjoy it because it fits the niche of in between a quick bash script and a full fledged java microservice.  I can crank out a scheduled fault tolerant job in a maybe a few hundred lines of code.  While this isn't terribly impressive itself, it has the ""batteries included"" feel that you don't get when you try to schedule a ruby script or java jar in cron.

I had always thought the raw performance could be better though, but it really hasn't been a problem so far.",1526455909.0
get_salled,"I was working on a .Net project that, from what I knew of the BEAM via conference videos, was a shitty clone of the BEAM.  Then I made a rough proof-of-concept project in Elixir for one of our many services.  Without _knowing_ idiomatic BEAM or Elixir practices (but knowing a fair bit of FP), my POC was 3 orders of magnitude more efficient than our .Net implementations.

From there it was easy to convince managers that using Elixir was worth the effort and then I needed to get better at it.",1526471193.0
Kingoftheknoll,"Had an eye on it in the distance for a bit. But since others shared most of my favorite reasons I’ll mention another. I was big into Clojure for a while but soured on some community culture things such as how beginners were treated. It was an experts only club in way and if you wanted to join you really had to do the work. I always felt that software is more a people game so I immediately recognized Elixir’s community had nailed it and really cared about investing in that aspect. Instead of fighting learning it was a breeze and probably the easiest language to learn for me to date. 

I also liked that Elixir is very lisp’y. If you haven’t looked at the macro system or AST it’s basically a lisp. But the great thing is Elixir can have is all the benefits without the purity of being isomorphic which IMHO is super cool but doesn’t make my programs better. 

Also best documentation of any language ",1526473391.0
lucasvandongen," * I needed a websocket that could handle large volumes of messages
 * The problem was almost stateless
 * Needed a high level of reliability 
 * Needed a high level of scalability
 * I hate JavaScript
 * I worked with F# before
 * For street creds
 * People scared me about the Erlang syntax
 * Phoenix seemed to tick all of the boxes",1526476014.0
ClickHereForBacardi,"I liked what I was getting with Erlang but I also like the additions Elixir brings to the table, e.g. metaprogramming and a well structured standard library.

Edit: I forgot to mention Mix, which is a humongous step up from rebar.",1526480738.0
ludios,"I needed to write some configuration management software, and I was looking for a dynamically typed language with syntax niceties. I already had a lot of experience with Python and JavaScript but couldn't bear having to use them for new software. My prototypes in Clojure and Rust didn't work out very well. Everything about Elixir felt right as I started learning it, so I kept going and I'm still very happy with it two years later.",1526522075.0
swiftsubetei,For me a lot of micro reasons to enjoy it over others but the one that tops; the competitive advantage possible to gain in many types of web projects compared to other language/envs. I'll build it faster and better,1526434757.0
ps2931,Because the language and tooling is very neat and precise. I never felt that I am learning a functional programming language. I tried Clojure earlier but parenthesis was bit off putting in addition to functional programming concepts. Digesting these two at the same time was not healthy :),1526437098.0
Nixonite,because I was learning erlang and wanted to use a popular web framework ,1526438758.0
praveenperera,"I heard about it on the Ruby Weekly newsletter, and at the time that was exactly what I was looking for.

But it was this video: [https://www.youtube.com/watch?v=SVisr\_gYA1w](https://www.youtube.com/watch?v=SVisr_gYA1w) that got me really excited about learning it.",1526482115.0
TheSultanOfSwagger,"For simple tasks Elixir is a functional, dynamically typed language with beautiful syntax and pretty damn good performance. It is so easy and enjoyable to use Elixir to solve small problems. For more complex systems it provides powerful and easy to reason about cuncurrency. Honestly, after learning elixir I don’t think I will ever use a different dynamic language. ",1526487953.0
jhartwell,I was going to learn [Nemerle](http://nemerle.org/About) because of the macros and somebody on Hacker News suggested I look into Elixir instead. I did and haven't turned back.,1526495003.0
lthms,"I wanted to write a simple, actor-based, 2D online game server. It results in [lkn_core](https://github.com/lkn-org/lkn-core), and a demo game server called [lykan](https://github.com/lkn-org/lykan). Still a toy project, but it has been a very fun and pleasant journey so far.",1526496109.0
bluefish009,"concurrency and it's syntax and the style about functional programming, i thought that elixir as easy-scala.",1526511064.0
journalctl,"The fundamental libraries like Ecto and Plug seemed really well designed. I'm hopeful Phoenix can compete with Django and Rails in the productivity department, while being ready take on websocket-heavy use cases.",1526522548.0
ck3g,"The question even match the title of my blog post =)

http://whatdidilearn.info/2017/09/06/why-i-have-decided-to-learn-elixir.html",1526540380.0
nickjj_,"Its syntax is approachable and it leverages decades of best practices and patterns available in Erlang / BEAM VM.

When I learn a new language it's usually because I have something to build in mind and this is no different. I could have built the app I'm building with frameworks I know very well (Rails and Flask) but I chose to use Elixir / Phoenix because I think learning a functional language could potentially make me a better programmer in general. That and there are a few components of the app where I know I'm going to benefit from Phoenix channels.

Also, I don't treat learning new languages as a drop in replacement for something else. Elixir will just end up becoming another tool in my tool belt. Perhaps over time I'll use it more, but it really comes down to what type of libraries are available in the languages I know when it comes to building out projects.

So far I'm super happy with how things are turning out.",1526556506.0
888ROSSULBRICHT,"I wanted to code in a functional way. After doing some tests, I ended using it for every pet project where I needed a backend.

BEAM is very good and the syntax makes it fun to code.",1526624351.0
jake_morrison,"I saw [Chris McCord’s post comparing Rails and Phoenix] (https://littlelines.com/blog/2014/07/08/elixir-vs-ruby-showdown-phoenix-vs-rails). We had been using Erlang for a few years, but the productivity wasn't there for web development. Elixir was the best of both worlds. 

I wrote about it more in this blog post: https://www.cogini.com/blog/is-elixir-phoenix-ready-for-production/",1526971151.0
matsa59,"Telephony use erlang and have a downtime equal to 32ms per year. I decided to learn some erlang stuff but it sound like a really hard language because of the syntax. So I move to elixir and then I discover a really amazing language that use some amazing feature that help you to think differently (eg. Pattern matching, functionnal programming, meta programming ...).
",1527239996.0
ScrimpyCat,"I had been using Erlang (so already loved the Erlang VM) and I heard about this new language being developed on top of the VM. Checked it out, it was still early in development but it had taken shape where it had features I wish Erlang had. Some of these things were things like the powerful macro capabilities (as opposed to Erlang's simple C-like preprocessor), the build system, etc. ",1527605106.0
itb206,"It is an elegant language, that and I tend to write complex web applications that incorporate different microservices for things like machine learning classifiers or job queues or for my latest project I'm looking to build out a microservice for syntatic correctness checking for different programming languages and between elixir's decent FFI, OTP + the languages first class idea of umbrella apps AND being compiled so its much quicker than ruby and I am a happy guy.",1527723900.0
ericls,"Actor model. 
Pattern matching.
Macro.",1526432187.0
chazmuzz,Because it's like Scala just a million times better,1526456002.0
ParticularHabit,"When you are not sure what a value is in `iex`, put an `i` at the beginning of the expression:

    iex(2)> i Enum.to_list 7..12
    Term
      '\a\b\t\n\v\f'
    Data type
      List
    Description
      This is a list of integers that is printed as a sequence of characters
      delimited by single quotes because all the integers in it represent valid
      ASCII characters. Conventionally, such lists of integers are referred to
      as ""charlists"" (more precisely, a charlist is a list of Unicode codepoints,
      and ASCII is a subset of Unicode).
    Raw representation
      [7, 8, 9, 10, 11, 12]
    Reference modules
      List
    Implemented protocols
      IEx.Info, Collectable, Enumerable, Inspect, List.Chars, String.Chars",1526334767.0
Findlaech,"It is ""inspected"" as a charlist",1526330108.0
sunnyohno,"Nice series of posts.  One semi-non important question/observation:

This is the first time that I've heard/read this approach as being called a `Token Flow`.  I've always heard of it referred to as context.

Is this how it's commonly referred to?",1526325444.0
SulfurousAsh,Process.send_after/3,1526011028.0
get_salled,You should edit your post to include the real problem you're trying to solve.  This screams _XY-problem_.,1526042758.0
dmor,"Is there a reason you can't just call `Process.sleep/1` in the new process, before it does anything?",1526039891.0
sb8244,"It's important to break apart the concept of ""thread"" in the Elixir language. You don't have traditional threading model and it becomes easier to think about when you think about the process model.

In Elixir's case, when you spawn a new Task or start a new GenServer, a process is created. That process is going to wait for incoming requests (GenServer) or execute a function (Task). In either case, if you call `Process.sleep/1` from the Task/GenServer, you will make that process, and only that process, wait the requested amount of time before executing. I would use this if wanting a Task to wait.

If I was wanting a GenServer to do something after X seconds, I would use `Process.send_after/3`, which will send a message to the process after a certain amount of time. Because GenServer responds to messages to do work, you can think of this as saying ""do this work in X time"".

For your question, Task/sleep seem like an acceptable solution.",1526264212.0
chesus_chrust,"Floating point math is pretty slow in BEAM. Of course you could use native functions, but AFAIK you lose out on concurrency and they are not feasible for long operations like multiplying huge matrices.

However, there is a book called “Handbook of Neuroevolution Through Erlang” that you might want to check out if you are interested. Probably the only book on machine learning in Erlang. 

Also, if your are looking for Erlang-like concurrency with adequate floating point math you can check out Scala. Akka framework implements actors that are close to Erlang’s processes and JVM has multiple linear algebra libraries.",1526002351.0
Hauleth,"The problem with AI in Elixir for me is that BLAS computations heavily rely on internal mutability of some data (ex. matrix multiplication). While you can implement it in C and then just expose proper NIGs in BEAM there are other problems:

- Dirty schedules became default only recently, till then one CPU heavy process could overtake whole processor time. You could use ports or servers, but then you would get nothing from BEAM only troubles with maintaining connection
- Python seems easier to grasp by mathematicians, especially as there is much more tooling like gplot integration, IPython, etc. That is the same reason why Matlab, Fortean and R are die hard in their respective fields (engineering, math, statistics)
- There are other languages in the field that provide functional features, top of the shelf example is Prolog which is here longer that Erlang itself
- Elixir is young, and creating such libraries take time, a lot of time, especially in immutable languages
- No big player backing on such project. Tensorflow have enormous backing and Python API is first-class citizen, one could even say that Tensorflow’s Python API is treated better than native C++
- If you ask question “why nobody” then ask yourself “why you don’t” and in most cases you will get answer to the both of these questions",1526002568.0
Jaeemsuh,One reason is that python has a lot of the best libraries for this type of work.,1526000187.0
jake_morrison,"In fact, Pandas is often calling C or FORTRAN written in the 1960s.
We could call those libraries from Elixir using NIFs, but it's not really playing to the strengths of the platform. Generally speaking, managing a pool of Python processes works pretty well, as long as the serialization overhead is small relative to the work being done. 

Concurrency and working with large data sets is a general issue for Python: http://wesmckinney.com/blog/apache-arrow-pandas-internals/

Elixir can fit into this pretty well as an orchestration layer. It is also generally good for processing binary data. While Elixir is about half the speed of C, it is very easy to take advantage of all the cores on your server. On a podcast people were talking about processing uploaded JPEG images at large scale to extract the location from the EXIF information. Using Erlang actually performed very well at this. ",1526004545.0
k-selectride,"The short answer is that it's a little too niche for them to have heard about it. Having said that, microsoft has job listings that have elixir and tensorflow together, so who knows what's going on there.",1526017791.0
urmyheartBeatStopR,"Cause it's slow for number crunching. I did Erlang with Project Euler and it's slow as hell.

Your other comments seem to comment about distributed. There's disco (http://discoproject.org/), if that's what you want but number crunching isn't it. 

If you're gonna say python stuff is implemented in C/C++ and whatever, then I'm going to point out writing NIF safe code without messing with BEAM schedule is hard.

Python and R doesn't have such a complex state of the art system of concurrency so the C++ implementation doesn't have such a restrictions to care when coding. The best BEAM is going to be is to provide the infrastructure to enable batch process or real time process. I don't believe there is a good momentum to do ML in this language and unless the ML paradigm changed enough to fix the BEAM model of concurrency. An example is website just happened to fix the concurrency model of BEAM. 

There is some weird fringe stuff such as https://www.springer.com/us/book/9781461444626 . Since erlang's process can be model as graph or neural node. 

",1526166780.0
Sentreen,"A few reasons come to mind:

* Scientist that use scientific computing are often people that don't write code all day. They just want to write the code and get it done. In that sense, they are more likely to stick to a language that they know or that feels similar to one they know. Functional programming and the actor paradigm are great, but they take some getting used to. Compare that to just using a language you already know.

* Libraries such as Numpy offer a great amount of functionality out of the box. As far as I know, elixir and erlang don't offer similar libraries. At the very least the community around those libraries is way smaller. Also worth noting that these libraries are implemented in C which makes them very fast.

* BEAM is not that great at raw computational speed. Where it really shines is low latency when responding to requests, but that's not very relevant for the types of applications you're talking about.

* Even if you're okay with all of the above, rewriting an algorithm in a different programming paradigm is *hard*. Furthermore, some algorithms don't get much use out of extra parallelism (Amdahl's law), so just spinning up a few extra python instances might be enough to exploit all the parallelism you ever need.
",1526216663.0
jazzandpython,"I love Elixir, but Python's scientific library situation is miles ahead of everything else. SciPy, Numpy, Pandas, NLTK, all that stuff has been under heavy development by real scientists for a very long time now.
",1526425416.0
pzingg,"I am experimenting with an Elixir interface to Rserve, so if there are efficient AI routines implemented in R, they should work. I Use a GenServer to send computation requests to R over a TCP socket, and then parse the results. Not sure if this is interesting/useful/memory and CPU efficient, etc. but for orgs invested in R development it might be a solution. I ported an Erlang Rserve parsing library [https://github.com/del/erserve](https://github.com/del/erserve) to Elixir, fixing a few bugs along the way.",1529986891.0
sb8244,I wrote this post to detail some lessons I picked up while debugging why 200 websockets would take over 500 MB of RAM sometimes. I ended up getting it down to multiple thousands connections in almost no RAM overhead.,1525898563.0
rehemiau,"I had a similar problem in production. Specifically: I was sending big payloads when clients were joining the channel and only sending small updates later on. From what I understand this caused big heap allocations for websocket connection and transport processes, and the GC was never being triggered because memory usage in these processes practically wasn't growing. My solution was the same as OP's: to manually trigger gc in both processes after handling the join.

I found the solution (with code) here:
https://groups.google.com/forum/#!msg/phoenix-core/OCVzVm4C9PA/XG205gCVCgAJ

(As OP writes, ws_info :garbage_collect callback has been added to phoenix so there's no need to fork it anymore)",1525958908.0
ParticularHabit,I believe you cannot. The function is compiled after it is defined and you no longer have the original representation.,1525773889.0
brodeuralexis,"[This](https://hexdocs.pm/iex/IEx.Helpers.html#open/1) is the best answer I could come up with, but it only works in IEx:

    open Some.Module.fun/2",1525782626.0
mindreframer,That would be actually a great feature... ,1525776818.0
sb8244,"If you don't require a dsl, I might suggest https://github.com/infinitered/elasticsearch-elixir. ES has a lot of good docs and knowing exactly what calls are going on could be beneficial.

AWS elasticsearch should work with any library as it's just a URL exposed",1525665219.0
blackjackjester,"I've been using Elastix, works well, very simple.  Doesn't cover everything, but it's a nice wrapper.",1525695949.0
vluun,"I started a project with that library and we intend to pull it out. It doesn't do much for you, and if there is an error with ES, it doesn't tell you what it is at all. We've just used the direct http interface everywhere, so at that point you may as well use a regular http library.",1525714601.0
get_em_hemingway,"I've been a big fan of https://github.com/radar/elastic. I tried out Elastix and tirexs and found this library better to use. It also has a scrivener tie in, if you want to do any pagenated result display.",1525730415.0
KilgoreDurden,"As a general rule I'd say you should be relying on the higher level abstractions most of the time. It's good to learn the underlying principles of spawn, send, and receive to understand what's really happening when using gen_*, but usually it's a bit of a smell when using it in everyday code IMHO.",1525528706.0
asonge,"Unless you really need to make something that spawns a lot of processes efficient or some other edge case I can't think of, you should probably use the OTP abstractions.

You can get better integration into the tooling (better hot code upgrading integration into release tooling, enhanced debugging/tracing support, sasl logging reports). You can roll your own OTP abstractions and get all that free integration via `proc_lib`: http://erlang.org/doc/design_principles/spec_proc.html",1525533725.0
sb8244,"I haven't been writing much of it myself. I was digging in the task code to see the difference in two functions. The task module is essentially a wrapper around send and receive with some basic edge cases handled. I think I'll stick to it when I find myself needing that behavior.

Otherwise, lots of genserver call and cast.",1525534105.0
Liru,"Not necessarily more minimal, but the only time I've found myself writing `spawn`/`send`/`receive` code manually was to implement worker processes with selective receive capabilities.",1525555427.0
ScrimpyCat,"Generally you won't. Most of the time you'll be using OTP abstractions, but if you find you have some code where you won't ever need any of the functionality OTP provides, then that's when you normally would use those lower level operations. However elixir already provides a number of other less feature-full abstractions such as agents and tasks (as you mentioned). So generally you'll just use those in that situation. 

Only time I can think of using receive is in two situations. The first is where you might not want not want to spawn a new process from the caller, but the function still expects to receive a message from some other process (that isn't the typical spawn a task workflow). The second is if you had some really complicated receive pattern/synchronisation (maybe you wish to do some work sometimes rather than always waiting in a receive loop), but I'd be very skeptical of why you'd want this (overhead of just spawning new processes as needed likely won't matter). ",1525569473.0
Schrockwell,"It’s good to understand the underlying mechanisms and how OTP wraps them up, but really I only see the lower-level message handling done in very special cases. You should be using OTP for pretty much everything to take advantage of all the benefits surrounding the GenServer interface - supervision trees, call/cast conventions, etc.",1525533258.0
defeatedbycables,"Wow! I’m so excited about this, thanks for the heads up, hopefully I can make it!",1525496664.0
ericlathrop,How long are talks supposed to be?,1525486632.0
frigidcode,The link from the PaperClip CFP back to the main site doesn't resolve. It's missing the www.,1526313161.0
alchemistcamp,"For those who are curious, the tagging system described in this episode is implemented on the site.

A Quora-style login-wall was added in a later episode but you can still see the tag pages without logging in by copying the URL and opening it in a new tab or by following a direct link like [this](https://alchemist.camp/tagged/Cowboy%20Server).
",1525425612.0
jake_morrison,"In Phoenix, the ""view"" is used to render the results. https://hexdocs.pm/phoenix/Phoenix.View.html

The defaults are to render content using templates, but you can play games, e.g. rendering results in code or having the same method handle different output formats. 

For example, one API we have supports XML and JSON this way: 

    def render(""error.json"", %{reason: reason}) do
      %{error: reason}
    end

    def render(""error.json"", %{changeset: changeset}) do
      %{error: render_errors(changeset)}
    end

    def render(""response.json"", %{response: response}) do
      response
    end

    def render(""error.xml"", %{changeset: changeset}) do
      XmlBuilder.doc(:result, [XmlBuilder.element(:error, render_errors(changeset))])
    end

    def render(""response.xml"", %{response: response}) do
      results = for {key, value} <- response, do: XmlBuilder.element(key, value)
      XmlBuilder.doc(:result, results)
    end

    defp render_errors(changeset) do
      errors = Enum.map(changeset.errors, fn {field, detail} ->
        ""#{field}: "" <> render_detail(detail)
      end)
      Enum.join(errors, ""|"")
    end

    defp render_detail({message, values}) do
      Enum.reduce values, message, fn {k, v}, acc ->
        String.replace(acc, ""%{#{k}}"", to_string(v))
      end
    end

    defp render_detail(message) do
      message
    end",1525345211.0
Schrockwell,"> Do I need to put the logic in a separate function and just call that function for both the API and the template controllers, or is there a better way of doing this?

Yup, that's exactly it. This is entirely the motivation behind Phoenix's concept of ""contexts"" - putting your application logic in a separate layer that's NOT tied to the web.

I highly recommend reading the [Phoenix Contexts](https://hexdocs.pm/phoenix/contexts.html) documentation.",1525354732.0
k-selectride,good shit. i've been keeping my eye on beamjit since i heard about it.,1525305987.0
blackjackjester,"These benchmarks are super promising.  I'm always a little discouraged as how low elixir/Erlang/Phoenix is on the TechEmpower benchmarks.  I know those benchmark very specific, even esoteric things (and very much do not encapsulate developer happiness), but hopefully these changes will allow a few uptics in overall throughput.",1525839516.0
ParticularHabit,Doesn't pg2 use global which basically means joining a group puts a lock on all nodes?,1525259955.0
sb8244,I think this is a cool project. Keep it up for sure. I'll look at using it for a project to see how it works out.,1525545354.0
thread,I love this article. ,1525213183.0
Nicd,It's missing at least one: crash a NIF.,1525262528.0
Izwe,That's a clever way of logging in to a site.,1525209587.0
aseigo,"Nice project... :)

I see that sandbox Lua counts function calls in the sandbox, and tries to limit functions that can allocate large blocks of memory ... that's great already. 

Have you also considered wall-clocl running time and memory usage? The former would be easy from the elixir side, the latter with ulimit's on the ous sandbox ...",1525168565.0
cairadacb,Finally It's squish down the nested bools string to a single value. ,1526332166.0
kvakvs,"The sheer amount of work required just to get the project going is staggering. So I suggest you begin anyway. Then show us the proof of concept, or at least some progress or if bored/failing — you can quietly drop it.",1525123290.0
cthree87,I’d like to see this built into the Elixir compiler. ,1525128470.0
chrismcgie,"There was some discussion of this on the Elixir forum recently that’s worth reading. 

https://elixirforum.com/t/how-to-make-dialyzer-more-strict/13854/33",1525132243.0
k-selectride,I guess you're already familiar with the Elmchemy project?,1525132991.0
ParticularHabit,"I recommend you to read the recent discussion in the forum: https://elixirforum.com/t/how-to-make-dialyzer-more-strict/13854/33

As José and others pointed out, it is unlikely you can convert typespecs to a ML-type system such as Haskell / Elm without having to compromise on something, such as type inference or the amount of typeable Elixir code, as typespecs are much more expressive than ML-types.",1525142716.0
thread,I love this idea. Some of dialyxir's messages are baffling. ,1525126902.0
mgwidmann,"In general, I think this could be done to a degree. The biggest technical challenge are process boundaries since sending a message is basically a type information void. You'd lose type information anytime you cross a boundary, local or distributed. Same goes for apply calls since the function you're calling is often a runtime value and can't be verified at compile time.

If you scratch those things (and maybe any others I've missed), you may still be able to get something useful out if it. Just don't put the expectation that you'll have an Elm quality, fully type spec'd compiler because until you can find a way to computer those runtime boundaries at compile time, it won't happen.

EDIT: Wanted to say, if you can get even as far as I've described (ditching process  boundaries and apply  calls) then the community would be infinitly thankful. It's a hard task even with those things removed.",1525130138.0
ABC_AlwaysBeCoding,"Start small. Add features incrementally.

Also, do do this.",1525547071.0
losvedir,"Huge undertaking! That said, as an ML fan, I'd love to have stronger checking. I understand the historical reason that dialyzer had to use success typing and only reject programs it can prove to be wrong, but I'd love a from-scratch type checker that only _accepts_ programs it can prove to be right (from a type perspective), at the expense of rejecting some valid programs.

I know people take issue with Elm's types. I don't know Elm, but from what I understand it doesn't support Higher-Kinded Types (HKT) like Haskell. But I don't know if that's the extent of it, since rust also doesn't support HKT, but is plenty productive.

I believe pony lang is a typed actor based language with message passing, so I don't see why inter-process communication would make it impossible. Worst come to worst, some sort of hacky approach just for GenServers would solve 99% of my message passing use cases!

Obvious inspirations are facebook's flow and TypeScript.

Another random thought I just had about typed messages is that sounds a little like protocol buffers or cap'n proto. A lot of software is built with those, and those messages have encoded types and some degree of polymorphism. I think if your type checking is rich enough to match those, it should be fine for production code.

> What features would you want to be included?

* At the minimum sum (""enums"") and product (""tuples"") types.
* Conveniences for handling `nil` (a la Swift's `?`).
* Exhaustiveness checking
* Some amount of polymorphism (this is where it gets hairy and I'm not super clear on what the levers are here).",1525439457.0
Davethefight,Another great write up! Keep up the awesome work! ,1525136717.0
thelittlenik,"See jose‘s comment here: https://github.com/phoenixframework/phoenix/issues/2778

„Keep in mind that our goal here is to provide the minimum necessary so a just generated Phoenix application looks decent. So for example, adding new font dependencies is a no-no. Let's keep it simple and light because the odds are, whatever we do, users will just remove it anyway. So let's optimize for removal.“",1525093686.0
Harry19911,I think it is the bootstrap and some styles for home page that is included by default on Phoenix app ,1525092375.0
RealBadPokerFace,We miss you,1539045931.0
superdisk,"Awesome post. I hadn't read the series so I thought ""hey, is that the hexdump guy?"" when I saw the hex dump",1524874421.0
kickinespresso,Is Elixir suppose to support ISO/IEC 8859-1? I know it supports Unicode. ,1524799293.0
sb8244,"Love me some HTTPoison.

One thing I noticed is that your require Logger is not in a module but global. You probably want this in the module: https://github.com/f1sty/retall/blob/master/lib/github.ex#L1

https://elixir-lang.org/getting-started/alias-require-and-import.html#require

In the iex examples, they're globally applying it; this is good for demo but not best practice.",1524714953.0
picandocodigo,"They said the talks would be available within the next month. Check their YouTube channel regularly to find out when they upload them https://www.youtube.com/user/ErlangSolutions, but I'd guess they'll be posted in this subreddit as soon as they are available.",1524646231.0
Harry19911,"First video from Lambda Days (also organized by Erlang Solutions) were published after one week, the last video after a month. So I guess with Elixir Conf will be the same",1524647438.0
Teifion,"https://www.youtube.com/user/ErlangSolutions/videos

The first few videos just went up, figured you might not get a notification on youtube but might here.",1525086467.0
wabber,"Instead of using render, just use:

    html(conn, html_content)


[check the docs](https://hexdocs.pm/phoenix/controllers.html#rendering) for more info.",1524638123.0
alchemistcamp,"From the controller, what wabber said. From the template, you can do something like:

`<div class=""content""><%= raw(@article.some_html_string) %></div>`

Or run it through a markdown converter, which I do on some pages:

`<div class=""content""><%= raw(AlchemistMarkdown.to_html @article.content_in_markdown) %></div>`

If you're really going full-out making something like a blogging engine, then I'd recommend checking out [Nabo](https://github.com/qcam/nabo) which will let you write content in HTML or Markdown and precompile  it into templates for you.",1524963763.0
alchemistcamp,"I set up transactional emails via Swoosh and Amazon SES, because it writing welcome emails to all the learners who signed up on [my site](https://alchemist.camp) each day was beginning to become a drag. I'm going to automate password recovery next.

After that, I'm going to start working on some gamification to motivate learners and on compiling good external resources that can help with various elixir-related tasks.

I also recently bought *Phoenix in Action* and am looking for some time to go through it.",1525422066.0
sb8244,"I'm reading some Erlang books that will help with running production services. Namely Erlang in anger and the recent happi book that was posted here.

Learning about GC and things to avoid has been very enlightening.",1525183939.0
puppet_pals,"A multiplayer web game I've been working on

[https://bulletz.io](https://bulletz.io)

it's still in pretty early stages and isn't really fun at all but hey it's getting there!",1525670241.0
dnesteryuk,"I released a new version of my project (https://github.com/sirko-io/engine) which is aimed to predict and precache resources (pages and assets) which might be requested by the user in their next transition. Thus, when the prediction is correct, resources are served from the browser's cache. Actually, there are 2 parts of the project: the backend in Elixir and frontend in JS. The prediction model is very simple, so I am looking for improvements now.",1525715650.0
blackjackjester,"Nothing fancy yet, just a little app that connects to the Reddit API that scrapes post score over time and inserts the data into elasticsearch.

Fun to see the trends of posts over time.",1525785566.0
herlitzd,"I just pushed a library to hex that helps define struct-to-struct mapping functions. It's called cartograf, and while it is still early days for it, I think it could prove very useful in a few scenarios. The use case that drove me to make it was having to convert between protobuf structs, structs used for ecto, and structs presented to the user through my web-api. With cartograf though, it is super easy to create a function to convert from one struct to another, no matter how the struct shapes and fields change.

The documentation isn't complete, but the tests are in case anyone wants to pull it down and play with it.

https://github.com/Herlitzd/cartograf",1526007169.0
tootubular,">Um, a little late to the party, but a coworker and I did our first production Elixir app using Phoenix for a stoner/comedy movie, GrowHouse \-\- yes, for 4/20. We're an agency so we build all kinds of stuff.  
>  
>Code was pretty lightweight since it's a pretty simple app, but got acquainted with the build process, jwt through [joken](https://github.com/bryanjos/joken), and the fun deployment library, [edeliver](https://github.com/edeliver/edeliver).  
>  
>Benchmarked to about 18,000 requests per second on a mediumish AWS machine. Not bad^(tm). Excited for the next thing, likely something with some more meat on its bones.  
>  
>  
>  
>[See / Watch here.](https://movies.asteri-networks.com/growhouse)",1526517025.0
altyaper,"I want to create a library for creating a image made by titles or mosaic.

Something like this [https://nearsoft.com/blog/putting\-it\-all\-to\-work\-elixir\-poolboy\-mogrify\-andreamosaic/](https://nearsoft.com/blog/putting-it-all-to-work-elixir-poolboy-mogrify-andreamosaic/)",1526577803.0
p_r_m_n_,First time hearing of alchemist.camp. Looks nice!,1524510715.0
dhc02,You're more enjoyable to listen to that 90% of online tutorial givers. Thanks for this.,1524536991.0
cajual,"> past data can be used in the future in ways that aren't immediately apparent

If only all devs thought this through. Thank you!",1524598073.0
ParticularHabit,That's very exciting! Have you also announced it on the [Elixir Radar](http://plataformatec.com.br/elixir-radar)?,1524517379.0
,If my wife wasn't in school I would totally apply. I love Germany! ,1524512349.0
ABC_AlwaysBeCoding,Ich sprech Deutsch! Hilft das? ;),1525547712.0
MuffinPimp,"Looks cool, but unfortunately getting login setup is not at all straightforward or documented at all. I also wish a Google account wasn’t a requirement.",1524764699.0
mrjeedee,Nice!,1524482655.0
yen223,I thought the whole point of using gatsby.js is to avoid having a backend,1524470703.0
GroceryBagHead,"Gotta ask. Is there a real-world example where property-based testing is useful. To me one test-case is usually enough. Mathematical induction kinda way. If it works for one or two, you can assume that it works for all. 

Also I'd imagine that doing a lot of property-based testing would slow your test-suite quite a bit.",1524418497.0
chrismcgie,"Great little project and write up, thanks!",1524305329.0
ataboy,"Great project, thanks for sharing!  Makes me want to keep a better eye on what’s at the Scrap! Also wanted to mention that the link to your services page is broken. ",1524360438.0
haqkm,"What do you expect this line to return?

    :proplists.get_value(nd_nm_char_list, node)
    :proplists.get_value(999, [{'price', 999}])

It returns `:undefined`, You are passing `999` as the value for `nd_nm_char_list`. There isn't anything related to a closure here.",1524229165.0
sb8244,"I wrote an introductory blog post for this as well, explaining some more of the ideas and history. https://stephenbussey.com/2018/04/17/introducing-elixir-response-snapshot-testing.html",1524165257.0
komist,"Full disclosure: I'm a technical cofounder at a startup currently, I designed and built our entire backend platform in Elixir with Phoenix, and have been an engineer and hiring manager at various points in my career. 

My 2¢ is that I would avoid characterizing yourself as a ""StackX developer"". To me, this raises a red flag every time I see it. If you're experienced and capable, I would suggest characterizing yourself as a ""software engineer"" or, if you want a narrower focus, a ""distributed systems engineer"". I see that you asked, ""What skills..."", so I think you're already probably thinking in this direction, but I just wanted to call it out specifically because I feel it's really that important.

The kind of person a company is looking for varies pretty widely, but my own tendency is toward people with a variety of language experience and solid fundamentals. I would highlight your understanding of distributed systems, functional programming, databases, and cloud architecture over any specific focus on a particular language (i.e., ""I know Elixir, Phoenix, Ecto, and ExUnit"", or whatever). To me, when I see ""Node developer"", ""Rails developer"", etc., it gets translated in my mind to, ""I don't have depth or breadth, but I make up for it by being able to recite trivia about this language, and it's the (only) one I know how to get things done in, or am willing to work with"". This is admittedly not very fair, but it is an interpretation based on many years' experience working with people who identified themselves in this way.

Another way to frame it might be to echo what others have said—do you understand OTP? Processes, Supervisors, and GenServer? I would argue that if you do, you're a capable distributed systems engineer in general, because these principles are the same whether they're at the architecture level (e.g., Kubernetes, etc.) or the application level, as is the case with Erlang & Elixir, so calling out Elixir specifically doesn't really add a lot in my opinion.

Ultimately, my point is that from a hiring perspective, I'd prefer a resume that highlights an in-depth understanding of fundamental distributed systems design (concurrency, streaming patterns, queuing patterns, etc.), functional programming, database design, and modern cloud architecture (environments, containers, container orchestration, CI/CD, etc.) in *any* language over a resume that highlights that a person ""knows Elixir"". If you have the skills I called out, learning Elixir won't be an obstacle to you, but if you don't, knowing Elixir won't help you—you would just write a lot of really bad Elixir!
",1523982439.0
jb3689,"If I were evaluating someone's experience in Elixir I'd want to know in what capacity they used it and where they are in terms of understanding.

Was it full-time? Do you understand OTP? What kind of scale did you work with? Did you have a hand in deployment and machine configuration? Was it a single node or multi-node setup? Do you have any open source contributions? How comfortable are you with the Erlang ecosystem?

Elixir is still pretty new and finding people with experience is tough. If you have experience though, it's good to surface how deep that experience is (e.g. are you a beginner, intermediate, or expert?)",1523980188.0
lucasvandongen,"People choose it because it scales really well so if you had a project where you solved solutions around scaling you should highlight it. Numbers of concurrent users, how many nodes, what you did to distribute.

Totally made up paragraph:
""I wrote an online voting system that was required to handle north of 200.000 votes per seconds. I've built performance tests to prove it would hold up under load and figured out how to best spread the load over different nodes. The system performed fast and flawless with a peak of 850.000 concurrent voters over 4 nodes, backed by a single machine running a GenServer"".",1523977026.0
xiaoma,JavaScript.,1523991334.0
quantumproductions_,Knowledge of Erlang syntax & NIF implementation is helpfull too,1523993312.0
nathanyukai,Best project they've worked with,1523959235.0
k1r8r0wn,"Experience years, I suppose.",1523967762.0
vihu,Why not make your resume in Elixir/Phoenix!,1523979423.0
mbuhot,"Nice library. I'd prefer not to have such a macro heavy DSL as `Errol.Wiring` , it looks like a behaviour / callbacks would work equally well?",1524273317.0
Giggaflop,"1) Your player needs a real volume control, not just mute

2) Links to items from the podcast should open in a new tab (I lost my place more than once trying to follow along -.-)

3) I'm brand new to elixir and I have no idea who you two are, and it seems like you're not just two randoms in the community.. maybe an introduction would be a good idea?

Other than that, it seems like you've done a good first episode.",1523914993.0
mbuhot,"Great first episode, thanks for creating the podcast! I love the conversational style, it gives it a different feel to the guest interview style of Elixir Fountain or the listener Q&A style of Elixir Talk.
👍👍",1524004030.0
icehaunter,"Hey, maybe you shouldn't recommend PhantomJS now: https://github.com/ariya/phantomjs/issues/15344",1523825771.0
ParticularHabit,"I really enjoyed this, thank you for sharing!",1523827186.0
newsNotice,"This talk was presented at ElixirSydney, to an audience of... tens of people. :D 

",1523911163.0
ParticularHabit,"Type safety, help avoid SQL injection, query composition, automatically casting/loading/dumping from the DB types to Elixir types, etc.

Edit: sorry for not explaining it further. On mobile.",1523772768.0
mbuhot,"Ecto can be used as little more than a connection pool, just sending string queries to the Repo.

From there you can use schema-less queries to compose larger queries from smaller pieces.

Add Schemas and you can describe types and relationships.

So on the Query side, Ecto gracefully scales from a minimal library to a clever DSL.

Then there's Changesets and Multi for updates. Changesets are an alternative to the change detection mechanisms in traditional ORMs, since Elixir data is immutable. 

Multi composes many Changesets into a single transaction. Once you grok Changesets and Multi, they can be used to structure code into a more pure functional style, separating the construction of the update commands from actually submitting those commands to the database.

Then there's validations, migrations, test sandbox, logging, ...

Lots of great features that you can opt into as you need. 

The only reason I wouldn't use Ecto is it doesn't support joins between tables in different PostgreSQL schemas, which might be problematic when working with an existing DB that makes heavy use of schemas for logical namespacing.",1523790003.0
karmajunkie,"My advice is to write it without Ecto once. Then rewrite it with Ecto and take note of how much of Ecto's featureset you implemented (probably with a less-than-ideal API).

I had a couple of projects where I objected to Ecto's perceived bloat and balked at learning the full API ""when i just needed to do a quick update.""  My experience was that I ended up implementing a less-flexible API than what Ecto gave me, doing a lot more work to shepherd my data elsewhere in my app.  It only took me a week or two of experimenting with a low-level API before I tossed it and just used Ecto schemas when I needed the database, and embedded schemas when I didn't. Ecto really doesn't cost much to provide you with a great deal of functionality you should really be using anyway (if you care about your app at all, that is...)",1523902423.0
Nixonite,google 'why should I use an ORM',1523777824.0
Virviil,"Elixir and Erlang have binary pattern matching for this purposes.

Try to read this article, there should be answers to all your questions:
http://www.zohaib.me/binary-pattern-matching-in-elixir/

Here is the binary pattern matching doc:
https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%3C%3C%3E%3E/1


TL;DR:
You can take `a[i]` using something like `<<_::integer-size(i), variable :: integer, _::binary>>`
",1523741246.0
vlatheimpaler,"You could fetch individual bytes out of the string like this but it's probably not the ideal way to sum the bytes in the line.

A more Elixir-style way to do this might be to write a recursive function:

    defmodule LineSummer do
      def sum_line(sum, <<h, t::binary>>) do
        case t do
          ""\n"" -> sum + h
          _ -> sum_line(sum + h, t)
        end
      end
    end

Then you can do:

    File.stream!(""foo.txt"")
    |> Enum.each(&IO.puts(LineSummer.sum_line(0, &1)))

This treats the binary a lot more like a list, with a head and tail. It's like instead of having `[""a"", ""s"", ""d"", ""f"", ""\n""]` you have `<<97, 115, 100, 102, 10>>`. With a list you would pattern match it as `[h|t] = list` and then `h` would be set to `""a""`, but in this case we're doing `<<h, t::binary>> = line`.",1523743651.0
ramon_snir,"Wrong subreddit. Our Elixir is ""... a functional, concurrent, general-purpose programming language that runs on the Erlang virtual machine"". ",1523728695.0
Zesky665,"Isn't awesome elixir already like this, or the elixir forum? Anyway look's like a cool project. I'll definitely try and contribute once I'm done with uni. 
Good luck. ",1523731468.0
kickinespresso,Built with Elixir and the Phoenix Framework: https://elixirfiddle.com/ Not open source yet,1523735349.0
ealekx,Cool project - keep up the good work. Feel free to add https://elixircasts.io,1523941469.0
edgar971,"In a way it is, but this is focused on projects only. Each project includes a description, author, title, website url, and source code url. I want to make it easier to find and feature Elixir projects. ",1523731667.0
,"I am working on a terminal animation haha maybe I will add it over here if that sounds good enough! haha. it's really simple right now but hope to add more. 

I was considering making an MMO as ascii terminal game before I asked myself WTF",1523748304.0
pepesza,OmiseGO stack is mostly Elixir. SDK is already published. Blockchain part is in progress (previous iteration is at github.com/omisego/honted),1523789546.0
kwame-nkrumah,Theres also: https://github.com/doomspork/elixir-companies,1523809259.0
edgar971,"I just added more projects, thanks to everyone who submitted them. More features coming soon. ",1523943443.0
alchemistcamp,This is a really cool project to see and makes me want to open source the next Alchemist Camp side project!,1523992847.0
mgwidmann,Nice post! Would love to see some throughput stats that we're captured or stats about the metrics system.,1523652046.0
spankymustard,"> Flapping tests are usually an indication of a race condition that is happening between the test suite and the browser under test. Many times, they occur because some asynchronous code is running and does not return before the test suite makes an assertion.

This is super helpful. Thanks for writing the post!",1523548781.0
chriskeathley,Thanks for the write up. This is an interesting way to solve the problem. We solve it slightly different in Wallaby. In wallaby you use declarative queries that describe how the DOM \_should\_ look and then Wallaby handles and the retry logic and blocking until that query either returns successfully or times out.,1523905311.0
forfunc,"Really like all your blog post related to the problems you encounter in the btc book, Keep it up! ",1523768271.0
chriskeathley,It looks like you're still using global under the hood. I may be missing something but because its still based on global if there is a partition in your cluster then you can end up in a split brain scenario where there are 2 versions of your singleton process. That may be fine for your use case but it would be good to document that somewhere in order to not mislead any potential users. I also may be missing something here so please correct me if I'm wrong.,1523462259.0
tweettranscriberbot,"^The linked tweet was tweeted by [@ElixirConf](https://twitter.com/ElixirConf) on Apr 11, 2018 01:54:40 UTC (6 Retweets | 10 Favorites)

-------------------------------------------------

Release the hounds!

Registration for ElixirConf US 2018 is NOW OPEN!!

[https://ElixirConf.com/#registration](https://ElixirConf.com/#registration) 

[Attached photo](https://pbs.twimg.com/media/Dad3AdqU0AA7UQP.jpg:orig)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1523414618.0
newsNotice,"Canc that last tweet, order confirmed",1523911191.0
burtgummer45,"You didn't mention phoenix, we'll have to know if that's part of the plan.

I tasked myself with learning elixir as quickly as possible to evaluate it for a project and I found that learning it broke up into 4 groups.  

1. elixir: which is a pretty simple language because its so well thought out.  So you'll get that out of the way quickly.

2. OTP, which you have to learn a fair amount of or you'll feel like an idiot because knowing just elixir gets you almost nowhere.

3. Phoenix: you might need to tackle this, and its more complicated than ""minimalist frameworks"", and you'll have to figure out contexts, a recent pattern that seems designed to confuse newbies.  

4. ecto: you'll get nowhere in phoenix without this, and its not at all trivial.
",1523408125.0
swiftsubetei,"Seems you have good advice already for what to learn so I'll just mention; it seems to me there is no cause for panic.  They hired you knowing they hadn't tested your full Elixir aptitude and knowing it's a newer tech, and like any dev job there will be some fast pragmatic learning required but don't be fooled into thinking everyone else knows everything about what they are doing.  If the company is smart they hired you based on their way of judging conscientiousness, which since your asking your questions here I'm guessing you are strong.  So good luck and feel free to message me if you have more to ask. I develop professionally (mainly with other languages but some elixir & erlang).
",1523419123.0
hswick,Make sure you understand the ideas behind functional programming and how it’s meant to decrease complexity. Also watch Joe Armstrong’s talks (creator of Erlang) for some great historical context and general philosophical advice around programming ,1523417879.0
jonbrwn,"I'll echo others and say understanding OTP is probably on the top of the list. It's a fundamental part of how most Elixir projects are structured.

If you don't already have it, I'd get Dave Thomas's [Programming Elixir](https://pragprog.com/book/elixir/programming-elixir) book. Helped me pick up the language fairly quickly when I first started.",1523456418.0
chriskeathley,Our company recently put together a list of resources for our rails team to help them learn elixir. It might be useful to you as well: https://letoteteam.github.io/how_the_fulfillment_team_works/resources,1523539393.0
Nixonite,"Phoenix |> Ecto |> Making a REST API with Phoenix |> Deploying Phoenix

But I'm also an amateur elixir enthusiast. ",1523414512.0
CodeTinkerer,"While I like Elixir, I just imagine how this might be written in, say, C, and I feel that it would be shorter to write in C.  Admittedly, that's because most of the article is not just about getting the task done, but other stuff are things we *ought* to be doing (creating a unit test, making a mix project, etc, etc).",1523545130.0
ParticularHabit,Everything in here could be easily done with `with` and in less lines of code. :),1523280648.0
stepnivlk,"Hi there,
I just pushed (meh) new version of pushest. My approach to a pusher client. It's getting more stable so feel free to check it (and the docs https://hexdocs.pm/pushest/Pushest.html).",1523211296.0
davydog187,The Elixir core team is working on a pure Elixir http client. So don’t write everything off just yet,1523145447.0
Caller_of_Souls,visual studio code and a command line lol.,1523121308.0
expectedtraceback,"I saw you didn't find a good development API client, have you tried https://insomnia.rest/ ?",1523114271.0
railsr7,how about submitting files to json api?,1523097811.0
expectedtraceback,"I want to register interest in a version with JWT auth as well. 

I'm a little surprised that you didn't use any of the Auth libraries from https://github.com/h4cc/awesome-elixir#authentication Any reason for that?",1523114418.0
numberwitch,"Cool!  One thing that confused me about GenServers is how they save state over long periods of time - if someone pulls the plug on all the VMs at once, how do you hold on to the data?",1523003497.0
perishabledave,Awesome! 10k Phoenix channels open I assume? What’s the specs on the server and what’s the CPU and memory load with 10k?,1523006235.0
thedangler,"Awesome, this might give me a reason to actually implement my shareplaywith.me for PS4. ",1523024310.0
onesneakymofo,"Nice project.

Have you thought about moving the riot API app into its own hex package?",1523056674.0
tastygoods,On mobile sorry but there are a few Erlang/Elixir bitcoin packages on hex.pm and github so check there.,1522852258.0
josevalim,"You are correct in your assessment.

Generally speaking, use the simplest abstraction to solve the problem at hand. In terms of complexity, function clauses are simpler than behaviours, behaviours are simpler than protocols.

Both function clauses and protocols provide polymorphism based on the data. I.e. they allow you to control the branch to invoke based on the data. Function clauses are more general but they are also ""closed"". Once you define the function clauses for a given module, you can't change them. Protocols are open and can be defined and implemented at any time.

Behaviours bring you polymorphism based on the module name/function dispatch. They exist for documentation and they provide warnings and some static checking when using dialyzer.

Protocols are internally implemented with behaviours plus a dispatch logic based on the data type implemented with function clauses. So it is implemented on top of the two other mechanisms.",1522769816.0
dj_goku,"Not sure if this will help or not:

https://joearms.github.io/published/2016-03-13-Calling-Elixir-From_Erlang.html",1522725050.0
iradupopescu,"I haven't tried this plugin, but it's mentioned in the Rebar3 documentation:

https://github.com/barrel-db/rebar3_elixir_compile",1522744393.0
petrip,"https://blog.oestrich.org/2017/07/call-elixir-from-erlang/
",1523821139.0
ms4720,What are your pain points with php?  ,1523079005.0
Findlaech,I'm particularly fond of Tesla,1522659185.0
mischov,"Just about all of the HTTP client libraries in Elixir are wrappers around Erlang implementations - HTTPoison wraps Hackney, HTTPotion wraps ibrowse, Tesla and [Maxwell](https://github.com/zhongwencool/maxwell) have default adapters for Hackney, ibrowse, and httpc - so it's important to consider the underlying Erlang libraries when figuring out which Elixir library to use.

A simple rule for beginners to follow is: use something that wraps Hackney, because [Hackney handles HTTPS more safely by default than the others do](https://blog.voltone.net/post/7).

There is nothing stopping you from using Hackney directly, but if you want to use an Elixir library I think Tesla and Maxwell have more going for them than HTTPoison- I think the Plug-like abstraction is better than HTTPoison's `use` abstraction, though I think both Tesla and Maxwell have plenty of room for improvement.",1522690457.0
heymatthewoden,"I wrote [HttpBuilder](https://hex.pm/packages/http_builder), which is a wrapper for httpoison, httpotion, hackney, and ibrowse, based on elm-http-builder. 

If I just need to make more or two calls, I use HTTPoison. But all HTTP libraries take all the args at once - so if I’m wrapping an API, I want something that’s a little more composable to eliminate boilerplate. 

Tesla does the same thing (and admittedly better) with macros and middleware for compile-time optimizations, but also leans on the same struct-style updates for when you need to make changes at runtime.",1522669818.0
Paradox,[Heads up if you're using hackney](https://github.com/benoitc/hackney/issues/462). It can cause a pretty big memory leak,1522693985.0
hutsboR,Yes. ,1522657945.0
Darkbyte,Hackney.  Why bother with a wrapper for it when it already is extremely easy to use.,1522704470.0
stepnivlk,I really like gun - https://github.com/ninenines/gun,1522741944.0
Nixonite,yeah,1522665449.0
puppet_pals,Currently writing a network simulator in elixir to test some routing research I am working on - thought I'd open source the graph generation.,1522630003.0
ParticularHabit,"Yup, the underlying PubSub functionality exports a direct_broadcast function: https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html#direct_broadcast/4

Here is how absinthe uses it: https://github.com/absinthe-graphql/absinthe_phoenix/blob/master/lib/absinthe/phoenix/endpoint.ex",1522599579.0
Harry19911,"[Eh, Tobias... :D](https://i.imgur.com/8wkOGK2.png)",1522592554.0
Americali,For now bunny still works a lot like benchee. ,1522601451.0
Kingoftheknoll,I liked how taskrabbit was the ad that was placed for me. ,1522604178.0
PragTob,"Ok thanks for indulging me, if anyone ends up here out of context - this was an Aprils' fools joke. However, don't worry bunny is just a thin wrapper around benchee. It will remain usable if you want to have that bunnytastic benchmarking experience.

Look forward to benchee 0.13 with memory measurements at your doorstop soon-ish (stilla blocker remaining).",1522665282.0
ParticularHabit,"Use [`render_existing`](https://hexdocs.pm/phoenix/Phoenix.View.html#render_existing/3):

    render_existing @view_module, ""header."" <> @view_template, assigns

Then in your views:

    def render(""header.index"", _assigns), do: ""extra contents""
    def render(""header.show"", _assigns), do: ""more contents""
    def render(""header."" <> action, _assigns) when action in [""edit"", ""new""], do: ""more contents""

",1522566641.0
devxdev,"I haven't tried this or anything but have you tried just doing: render(""footer.html"") ",1522565771.0
xiaoma,"The [most recent Achemist Camp episode](https://youtu.be/m2NGQ9qnYsc) is on exactly this topic and covers a few different ways of doing it.

Tldr; the layout is rendered first, so you can't `yield` back to it. You have to use a different strategy like using `render_existing` with a fallback render.",1523908793.0
Nixonite,">The most obvious option for rest APIs in Django is DRF, which is an external package that acts as a framework on top the framework. Some people love this approach, some people hate it. You can build a restful API without the need for any extra package in Phoenix.

As someone who has used both languages/frameworks, that's just unfair. You can build a rest api without DRF, it's just a matter of ""why would I do that when I have DRF?""",1522546978.0
mbuhot,"It's great to see Phoenix contrasted to frameworks other than rails.

I see the 'you don't need an external job queue' advice quite often, but rarely are the trade-offs discussed. Simply spawning processes to perform async work gives you at-most-once processing semantics. This is almost never what you want for a business application. If you don't want a dependency on redis/rabbitmq, then the safest place to put your async jobs is in the SQL DB you are already using. The backy and ecto_job packages make it pretty easy to setup on postgres.",1522575448.0
thefirstpotark,"Btw, instead of freecodecamp I'm thinking of the Odin project - links to resources.",1522858145.0
game_the0ry,"Not quite a boot camp, but open sourced - [exorcism.io ](exorcism.io).",1522452148.0
Koala_T_User,exercism.io may be a good place to investigate. They have an elixir course,1522451166.0
binora,"Good idea. I would suggest to follow along the lines of 4clojure. This is a good starting point imo. 

Here'source code : https://github.com/4clojure/4clojure .  ",1522436171.0
elikim,https://hexdocs.pm/elixir/Code.html#compile_string/2 is a start,1522465028.0
ScrimpyCat,"I'm not aware of there being any safe/sandboxed evaluation environments for elixir, so you wouldn't be able to execute the code on the server. Two possibilities might be to grab the AST and write your own evaluator or walk over the AST and remove any illegal expressions before compiling and running. 

Although looking at the original elixirforum topic, it looks like you want to make Phoenix challenges. Which would just complicate things further. 

One alternative (but won't be able to be contained entirely within the browser) would be to get the user to add a hex package to their project for the challenge. That package could then setup the challenge environment (could even present it as a web page or do whatever really), and all code would then be executed on the user's local machine so there wouldn't be the same concerns like before. ",1522439724.0
thefirstpotark,The original idea is on the elixirforum,1522436619.0
petecorey,I thought this was a solid talk. It really clearly lays out the problem of distributed computing and how global processes aren't really a solution to the problem.,1522249928.0
komist,"No, I'm struggling with the same problem. Right now, the only option is to access it via REST using OAuth. See:

https://firebase.google.com/docs/firestore/use-rest-api

https://developers.google.com/identity/protocols/OAuth2ServiceAccount

The underlying issue is that there's no solid gRPC support in Elixir yet, which is how other libs (Node, etc.) are using Firebase services. There's https://github.com/tony612/grpc-elixir but it's quite new, and probably because of that, no one has built on it yet. There's also some other stuff to read:

https://medium.com/@KevinHoffman/mutual-tls-over-grpc-with-elixir-a071d514deb3

https://speakerdeck.com/tony612/the-way-to-grpc-elixir

https://www.reddit.com/r/elixir/comments/4qrv6a/any_implementations_of_grpc_in_elixirerlang/

But for now, I'm planning on just using it via REST and revisiting the problem later. We actually have a PR open to add a Firestore API client to Google Cloud Platform APIs for Elixir here: https://github.com/GoogleCloudPlatform/elixir-google-api/pull/60, so once that's approved, it'll make working w/Firestore via REST a lot easier. Alternatively, if you're in a hurry, you could use Goth (https://github.com/peburrows/goth) and your HTTP lib of choice to roll your own, _or_ if you really wanted to, you could do:

    {:google_cloud_firestore, git: ""https://github.com/Veebie/elixir-google-api.git"", ref: ""add_firestore"", sparse: ""clients/firestore""}

in your mix.config.",1523540448.0
komist,Update: The PR was approved & the package is up on Hex: https://hex.pm/packages/google_api_firestore,1524023630.0
forfunc,Nice series! I'm really curious where did you create that awesome cartoon avatar :O ?,1522265125.0
Americali,These are the project names for the code running on the weather station Lake Effect and the code that will be running the API/UI for display ,1522601512.0
Paradox,"This is particularly interesting to me. I have a Davis weather station on my roof, and right now get data out of it and online using WeeWX. Its not terrible, pretty good actually, but I've been meaning to get around to writing an elixir interface.",1522694146.0
,[deleted],1522270595.0
ClickHereForBacardi,It seems like Docker is adding needlessly complex steps to an otherwise simple process.,1522239829.0
Americali,This plug expects a corresponding policy module that has the same naming structure as the controller. ,1522601575.0
jordiee,"I guess I am just a little confused on the use for this library. For example in the github readme...is this not just as easy and more forward about what is happening:


    def index(%{assigns: %{current_user: %{admin: true}}} = conn, _params) do
    # your normal function logic
    end

    def index(conn, _params) do
    # unauth
    end",1522895693.0
brodeuralexis,Didn't you learn never to parse any kind of XML with RegEx :P,1522244480.0
mischov,"CSS Selectors might not allow you to select nodes based on text, but XPath will.

    iex> html = """"""
    ...> <div>abc123</div>
    ...> <div><span>./---DeFfff/</span></div>
    ...> """"""
    
    iex> import Meeseeks.XPath  
    Meeseeks.XPath
    
    iex> Meeseeks.all(html, xpath(""//*[text()[contains(., 'abc')]]""))
    [#Meeseeks.Result<{ <div>abc123</div> }>]

That's still not as flexible as allowing a regex though. [Meeseeks](https://github.com/mischov/meeseeks) tries to make defining custom selectors easy, so how might a custom selector mimicking the one in the post look?

    iex> defmodule ElementTextSelector do
    ...>   use Meeseeks.Selector
    ...> 
    ...>   alias Meeseeks.Document
    ...> 
    ...>   defstruct value: nil
    ...> 
    ...>   def match(selector, %Document.Element{} = node, document, _) do
    ...>     children = Document.children(document, node.id)
    ...>     child_nodes = Document.get_nodes(document, children)
    ...> 
    ...>     Enum.any?(child_nodes, &text_node_contains?(&1, selector.value))
    ...>   end
    ...> 
    ...>   def match(_, _, _, _), do: false
    ...> 
    ...>   defp text_node_contains?(%Document.Text{} = node, value) do
    ...>     node.content =~ value
    ...>   end
    ...> 
    ...>   defp text_node_contains?(_, _), do: false
    ...> end
    {:module, ElementTextSelector, ...}
    
    iex> sel = %ElementTextSelector{value: ~r/abc|def/i}
    %ElementTextSelector{value: ~r/abc|def/i}

    Meeseeks.all(html, sel)                                             
    [#Meeseeks.Result<{ <div>abc123</div> }>,
     #Meeseeks.Result<{ <span>./---DeFfff/</span> }>]

A little involved, but no having to rely on implementation details to make it work. :)",1522250597.0
karmajunkie,"I really don't see that this approach is solving any problems. `cast/4` already does this (in fairness, noted in the article), and if you want something that operates on other schemas its trivial to define a function that pattern matches on schema type or accepts a schema module to operate on. I'm also a fan of /u/mintcore's suggestion of a custom struct to handle the data. I would personally go towards an Ecto embedded schema, which again allows the use of `cast` to whitelist your parameters.",1522166344.0
Mintcore,Another more explicit way would be to define a custom type similar to the plug.conn struct. This han be accomplished with the defstruct keyword,1522132324.0
alvesl,"I see! Thanks for the example! That makes sense, it is definitely an interesting approach. Do you mind if I update the example in the article to also include it? Since more people also seem to approve it.
For me personally, I believe it is good to have a flexible map. The problem is only partially get rid of bad input, but also helping clean up your contexts. I can think of a couple times where it would be useful to add more things to that map later on, so I wouldn’t particularly be interested in enforcing only certain keys after params leaves the controller level.",1522192905.0
jpittis,"What do we think of `with` vs something like https://github.com/CrowdHailer/OK

And when should we be using `with` or monads rather than just throwing exceptions?",1522432383.0
Americali,We will use this to convert the given command-line arguments into a structured form and validate them. ,1522601757.0
karmajunkie,"While the number of open jobs for Elixir isn't huge, we're at a particularly interesting part of the adoption curve, IMHO. We saw a very similar kind of growth happen with Rails in the late 2000's.

What I see going on right now are a lot of ""infection vectors"" by which Elixir is introduced into larger companies:

* Startups that use Elixir are getting acquired, introducing Elixir into the larger organization.
* One-off projects to test viability of Elixir within an organization are turning into multiple projects
* More startups are looking first to BEAM where they would have prototyped using Rails or Django or something like that previously.
* A lot of side projects are growing up and turning into startups in their own right—which may eventually get acquired.

(I've seen all of these happen first-hand or to companies I know. I personally introduced it as a small project in a client that's a publicly traded company, and we're now up to six mission-critical projects built in Elixir. I've also had a side project acquired by a larger company.)

This stage is interesting to me because its represents an inflection point in the growth curve. Its what I think of as the third stage of adoption, after pioneers (1st stage) and tinkerers/very-early-adopters (2nd stage) have pushed it far enough along that the new platform achieves critical mass. 

Ultimately, this leads to orders of magnitude more jobs, assuming the growth of the community doesn't falter and/or level off.  While I don't think any new platform is going to own mindshare as completely as Rails did there for awhile, I think Elixir is going to share a large stage with some other very respectable contenders. Now is a good time to become active in the Elixir community, because when that happens you'll be well-positioned in terms of experience at a time when experience on the BEAM will be at a premium in the market.",1522074690.0
ParticularHabit,The Elixir Radar newsletter has a long list of jobs: http://plataformatec.com.br/elixir-radar/jobs,1522046827.0
mbuhot,"The market is small but growing, however there is also a shortage of experienced developers so it is a great time to learn.


",1522059223.0
Jdonavan,"In Columbus OH there's at least one shop I know of that's moved over to Elixir from Ruby.  They've been the hot place to work for a few years now, so I suspect others will start following their lead.",1522068377.0
ABC_AlwaysBeCoding,"Make your own.

I don’t think your efforts here won’t pay off long-term. I haven’t run into any people complaining about Elixir/Phoenix dev",1522066536.0
kerynitian,"I work for a company doing elixir development in Chicago. There are a decent number of elixir shops, depending on where you live or how interested you are in remote work. The elixir job board is probably the best place to start. http://plataformatec.com.br/elixir-radar/jobs

I believe Chicago has 3-4 that are actively recruiting (including mine!)",1522077470.0
ClickHereForBacardi,"I've had a job where I maintained two Elixir projects. The company used to have more, but the guy evangelizing Elixir fucked up and introduced it faster than he himself could keep up, so they were sunsetting most of their Elixir projects because they blamed the language/platform for the failure of those projects.

In brighter news, I see new startups post listings for Elixir devs once in a while so maybe now is exactly the time to learn it to be slightly ahead of the curve.",1522079867.0
zerexim,Also particularly non-web/phoenix jobs would be interesting - Elixir/OTP only.,1522138453.0
ScrimpyCat,"There aren't many, especially when compared to other technologies. My city (Melbourne, Australia) has roughly a handful (maybe a bit more now, since when I was applying was over ~8 months ago) of companies that I'm aware of that advertise elixir positions. I did happen to find through my job search quite a few companies with people on staff who either were interested in elixir or were already using it for some personal projects. However the amount of developers that already know elixir is also quite small, so even with those few companies they've even said they've had a hard time finding applicants. 

Another thing to note is many of those positions are requiring applicants to know whatever other stack of their's they used (or are migrating from). As there's even fewer companies that started with it or have completely replaced all their old tooling with it. 

This is to be expected though, as the language is still quite new (like Rust) and lacks the backing of some massive company  (like Go with Google). So adoption will take time, as long as we keep getting success stories both with companies who've used it and developers themselves enjoying the language then that will change overtime. 

I think it would be interesting to see what portion of the community currently are just interested in it (haven't taken the plunge to learn it just yet), use it for personal projects, or use it at work. ",1522139224.0
isinned,"London, UK is thriving with Elixir opportunities.",1522271152.0
Nixonite,very very very few,1522087133.0
oteren,"Using plug via phoenix or straight cowboy gives you one process per upload, done ;)",1521964019.0
dipittydoop,"If possible I'd recommend doing a direct upload to something like S3. Between the client, server, and storage service, you can mitigate a lot of bandwidth if your upload data can skip the server.",1522013119.0
OleWedel,"I want to learn Elixir, so I am working on a YouTube chat room web app, where multiple users can view the same video. Play, pause etc. should be synchronized among them. 

I thought using web sockets and Phoenix would be perfect for this app, as there can potentially be many rooms with lots of chat messages. Most of the work so far has been done on the frontend, but I am looking forward to more work on the backend.

To learn Elixir I took the PragDave video course and I am now reading the MEAP version of Elixir in Action.",1522015247.0
pls_pressy4pie,"https://gist.github.com/ConnorRigby/576b971be5bfbdd4fa4c0c3380b31fd1
 
I wrote the perfect code. It magically defines any function you try to write",1521877927.0
frigidcode,"Submitted my abstract for ElixirConf, would be nice to expand on my lightning talk. Going to start building out the API for the weather station, and maybe start the elm front end.",1522351514.0
meta_stable,I took some time away from my project but I'm back to working on my Sci-fi real-time MMO with a Unity front-end.,1522372608.0
edgar971,I created a simple web app to extract text found in images. Feedback welcomed. https://image-to-text.edgardev.com,1523162264.0
mbuhot,"Trying to get Phoenix running on a local unix socket, proxied by nginx.  If I can get it working, I'd like to perform a zero downtime deployment simply by updating the `current_release` symlink, and reloading the nginx config.

After digging through plug, cowboy, ranch and kernel erlang, I believe I've confirmed that `:file.sendfile` doesn't work with a socket connected from a unix domain :/

Had to port my test app to C just to confirm it was possible at all :D

",1522060634.0
shibuyamizou,"I wrote an [ANSI to HTML](https://hex.pm/packages/athena) package based on something I had to deal with at work, formatting Cucumber output.

I also created a new application at work that takes in last weeks user agent data(about 350k rows) from the production database, translates it, and inserts it into my Phoenix application. This application then serves up Javascript graphs based on different queries of that data so that we know what to OS/Browser combinations people are adopting and where to focus our testing efforts. It helps with seeing trends. I am unsure why we aren't using Google Analytics or the like. But still a fun project. ",1522083590.0
stepnivlk,"https://github.com/stepnivlk/pushest
Pusher websockets client.
Slowly getting somewhere, appreciate any feedback.",1522101505.0
sb8244,I wrote a library to allow snapshot testing of json web responses https://github.com/sb8244/elixir_response_snapshot,1524182252.0
Americali, The key idea is to take the samples that make the overall shape of your data as similar to the original one as possible.,1522601853.0
Americali,"This is a huge improvement, since it removes the complexity and ambiguity of previous ways to accomplish testing session data.",1522601787.0
marklgr,"Damn it pragpub, why not letting us buy the Phoenix and Ecto book coming out in June.",1521830697.0
rumbletumjum,I freakin’ love Randy. ,1521826581.0
jonbeans,"Did you install [Elixir Sense](https://github.com/msaraiva/elixir_sense)?

*Edit: Never mind that.
Have you compiled your project? Alchemist Wiki says you need to",1521814922.0
vagara,"Have you compiled YouCompleteMe?

From https://github.com/Valloric/YouCompleteMe/blob/master/README.md


    cd ~/.vim/bundle/YouCompleteMe
    ./install.py",1521823169.0
ClickHereForBacardi,"I would expect you to be extremely familiar with OTP. Mix is just a build tool even if it is a damn fine one. As for Phoenix, it's really not that hard to pick up once you're familiar with Elixir, but without OTP knowledge, it's easy to structure your app wrong or otherwise misstep.

I think I can narrow down my list of recommended reading to two:

1. [Elixir in Action](https://www.manning.com/books/elixir-in-action)
2. [Functional Web Development with Elixir, OTP, and Phoenix](https://pragprog.com/book/lhelph/functional-web-development-with-elixir-otp-and-phoenix)

The former gets you started with Elixir and OTP. The latter teaches you how to apply what you've learned if webdev is the direction you wanna continue in.

Extra credit:

1. [Designing for Scalability with Erlang/OTP](http://shop.oreilly.com/product/0636920024149.do)
2. [Metaprogramming Elixir](https://pragprog.com/book/cmelixir/metaprogramming-elixir)

The former gives you an even deeper understanding of OTP and makes you realize that Erlang isn't as scary as it's made out to be. The latter teaches you the dark art of writing code that writes code that writes code.",1521755840.0
mbuhot,"My experience has been that you can be productive by just learning Plug, Ecto and Phoenix initially, maybe also a job queueing system like Exq.

The cowboy web server is already spawning a separate process for each request, and the Ecto Repo is managing a pool of DB connection processes. There's plenty of OTP stuff happening in your app - but you don't need to be writing it yourself straight away.

Once your confident writing sequential elixir, you can take on OTP, distributed erlang, advanced macro metaprogramming, but it's the functional basics that are most important.

",1521805664.0
karmajunkie,"Depends on what I'm hiring you for. We're at this stage of growth in Elixir such that finding local candidates with substantial direct experience is still difficult in most markets, but finding people who want to learn Elixir is relatively easy.  So primarily I'd look for some demonstrated desire in that along with substantial web development experience in something else. I don't want to teach you HTML, CSS, JS, etc. I don't mind teaching you a new syntax and some functional programming concepts in the first few months of a shift like that.

If I'm hiring you to act as a team lead or in a position that requires more experience and I'm able to FIND you, either locally or because I'm able to hire remote, then I concur with respect to OTP—I'd want you to be pretty familiar with things like GenServers, supervision trees, message passing techniques (which is more abstract than just what we do in BEAM applications) and testing with ExUnit. I don't think I'd expect you to be an expert's expert. But well-versed enough that my more junior engineers would be able to learn from you, and you'd catch glaring problems in a code review.

In terms of learning, what I recommend is a quick readthrough of Dave Thomas's Programming Elixir, followed by Sasa Juric's Elixir In Action, which I found to be a great help in learning OTP when I started out in Elixir. Probably follow that up with Lance Halvorsen's Functional Web Development with Elixir, OTP, and Phoenix. 

Then, just write a lot of code....",1521838231.0
Americali,Through our investment in collaboration and innovation 💡 we ensure the excellence of our product.,1522601909.0
Findlaech,"Okay, nice article overall.

Although I'd like to point that:

`&` is only used in function capture syntax, that is when you're using a lambda. Syntactic sugar is nice but useless and confusing in that case.

--- 
 >Wowowo! What is all this “@bot_name” and “use Stuff.Bot”. By now consider this a #worksOnMyMachine, Telex needs all this and we need Telex.Bot to handle messages :D

Adding smileys and hashtags is not a good way to hide the fact that the reader/beginner didn't get what you just did. Take the time to explain, not in depth but at least what it means.

---
All in all, It was a nice read. Thanks :)",1521666804.0
gcauchon,"I also think using the $ prefix in function naming will cause confusion to many readers. `function_name/arity` is the way to name a function in plain text, I think it would be worth it to correct the many references in your article.",1521676466.0
coyote3007,"x86_64 >>>>> elixir 
but nice try (ayy blin)",1521767179.0
Hauleth,"These aren’t attributes in Ruby sense. These are more similar to C `#defines` (these are evaluated compile time instead of runtime), so you need to think what you really need. ",1521626757.0
Mintcore,"Maybe just like this?

    defmodule M1 do
      def var1, do: 123
      def var2, do: 456
    end
",1521631271.0
Nicd,"Well at least you can write them inline: `def var1(), do: @var1`. Otherwise you'd have to make a macro and think if it's worth it.",1521631277.0
mbuhot,"Also checkout [witchcraft](https://github.com/expede/witchcraft/blob/master/README.md) offering many of the Haskell prelude typeclasses and operators for working with them.

https://www.youtube.com/watch?v=hUpdgWVaQR4",1521580247.0
onmach,"I actually really like with, but I wish it wasn't so finicky.  It seems like I always make a mistake and the error message makes it very difficult to debug.",1521550194.0
bcoop713,"I wrote this post as an intro to a library that I might be spinning my wheels on. It's a utility library that provides functions for working with different types of data structures that we all may use. Here's a link to the bare bones docs: https://hexdocs.pm/moonsugar/0.1.2/api-reference.html#content
",1521520919.0
Hauleth,"Why not defining macro for value extraction, like:

    defmacro json_field(struct, field), do: quote do: fragment(""?->>?"", unquote(struct), unquote(field))

Or even expand it to allow “more natural” syntax like `json_field(struct.foo.bar)`. ",1521493884.0
dunnowins,I don't know if this is a particularly useful post to anyone but I'm new to Elixir and found it interesting.,1521479078.0
RaitoNeeto,"Prefer module and import it there. Because you might end up with a lot of dead code that way.

Those are macros that expand in compile time",1521427723.0
asonge,"Every time you have to edit web.ex, you will get catastrophic compile times as every controller and view and router or other module that uses it will have to recompile.",1521521657.0
avm24,Anyone got a recommendation for top 3?,1521296960.0
petecorey,I've been following CrowdHailer and his progress on Raxx for a while now. It's an interesting project and I thought this was an interesting overview.,1521121790.0
josevalim,"Thanks Onorio!

I want to let everyone know there is a bug when using Elixir 1.6 with Erlang 20.3, we are shipping Elixir 1.6.4 today or tomorrow.",1521129658.0
jake_morrison,"Include ERTS in your releases and you will be able to upgrade Erlang in production without drama. We have apps that have done that for years, going from 17 to 18 to 19 to 20. 

Erlang updates pretty frequently, more often than the stable packages that come with the OS. You can use the packages from Erlang Solutions, but it's better to build your own using a tool like ASDF. Then you can have multiple versions of Erlang and Elixir installed at one time, allowing you to test a different version from what you are running in production, then deploy it when you are ready. 

See this guide for details: 
https://www.cogini.com/blog/best-practices-for-deploying-elixir-apps/
",1521082080.0
TextileWasp,"Yes. You will have an issue at some point. 
Bundle the release using distillery or something similar. Don’t rely on or make assumptions about what’s on the server.

You’ll thank me later.",1521077889.0
k-selectride,"Ultimately, whatever you can do in Elixir you can do in another language/tech stack. The question is whether the features specific to BEAM give you added value, or acceptable tradeoffs.

Now as far as specifics go, hot code re-loading is one of those features that most people don't really need to use. How often is the service being provided required to stay up as much as possible? This is mainly the case for things like VoIP, messaging, streaming media, etc. But even then, usually a scheduled maintenance period is good enough. It's pretty rare anybody will be in a situation like that, but if you are then it's there. Similarly, with kubernetes it's usually ok to just deploy your new version and kill the old pods, but if you want to maintain state because of websocket connections you can use statefulset.

BEAM really shines when it comes to distribution. It takes care of a lot of the tedium by taking care of clustering, RPC functionality, and miscellaneous networking. You can subscribe to node join/leave events, which lets you properly handle events in your distributed application. You can use the build in `pg2` process group or use something like `riak_core`. gRPC can be used in elixir so I feel like that's a moot point, I haven't used the elixir library so maybe it's not as complete as other languages (like go).

To me, the main benefits for the every day developer and devops team is the pre-emptive scheduling of processes such that no one process can create a bottleneck. As far as I know, there's no other language that lets you do that out of the box. Certainly neither Scala nor Go, which I guess would be the main 'competitors'. And of course, processes are isolated so they can crash without affecting the rest of the system. Supervisors are mimicked in Akka, so it's no longer a unique feature, but I can't comment as to how much it covers the behavior of BEAM supervisors.

Also, I just prefer functional code.

But like a lot of things, it's going to come down to preference. If I had to sum up where BEAM shines, it's systems that require maintaining state and lots of persistent connections. Betting companies like bet365 use erlang because any downtime means less money. [Here's a little blurb about the tech stack](https://www.erlang-solutions.com/blog/programming-languages-for-online-betting-an-investigation-of-go-erlang-and-elixir.html), their conclusion was that BEAM outperforms Go (and probably other languages) which I think most companies using BEAM would agree with.",1520914473.0
sasajuric,"This is a very interesting question. It's my impression too that with Kubernetes one can get the similar set of properties as with BEAM. It also seems to me that in terms of a higher-level features, K8s is more feature rich than what we have in the BEAM ecosystem. Given the fact that you need to learn the whole new language, runtime, and the associated ecosystem, it's valid to ask is it worth it.

In my opinion, BEAM excels due the fact that it offers the foundational concepts needed for any server-side system, baked directly into the runtime. This has an important benefit in that it can significantly reduce the technological complexity of the solution. In my experience, in many cases the system can be built almost completely in Elixir (or Erlang), consisting of just one project, and running as just one OS process in production. I've actually had a couple of cases where I didn't even need to use the external database to add the persistence story.

Of course, if some part of the system is more demanding, we reach for third party products, such as databases, message queues, proxies, and I've even seen people use Elixir with K8s. Regardless, my main point still stands - in general with a BEAM powered solution there's less need to step outside the main language and run multiple OS processes. This in turn leads to a much more homogeneous solution, and reduces the technical complexity, simplifying development, testing, deployment, monitoring, and troubleshooting of the production system. 

Moreover, it lowers the barrier for the new developers. If most of the system is implemented in say Elixir, then as soon as a developer learns some basics of Elixir, they can immediately work on any part of the system. This is much simpler than a heterogeneous project, where learning the ""main"" language doesn't really help much when it comes to understanding the ins and outs of various 3rd party jsons, yamls, .conf files, message queues, k-v stores, service orchestrators and whatnot. 

So in general, my sentiment is that BEAM offers a proper foundation for building arbitrary complex system with the least amount of technical complexity. Couple that with developer friendliness and approachability of Elixir, and you get a great tool which allows you to start simple, move forward at a steady pace, and have the technology which can take you a very long way and help you deal with complex problems at a very large scale, without forcing you to step outside and use a bunch of 3rd party products, but still allowing you to interact with such tools and even write parts of your system in other languages. 

For some extra arguments, you may want to check out [my talk](https://www.youtube.com/watch?v=pO4_Wlq8JeI) where I try to argue why I think BEAM is a perfect foundation for software systems.",1520932151.0
pls_pressy4pie,"I don't have much more to add other than I just want to address a potential misconception. 

Elixir/Erlang are better for more than just backend application. I work on a project called Nerves which deploys an OTP/Elixir app to embedded Linux systems such as raspberry pi for example. 

This may just not be a use case for OP, but other readers may be interested.",1520924510.0
Harry19911,"I started learning Elixir 2 years ago because it was fast, has hot reloading etc. Now I like it more because it's easy, have nice syntax, good standard library. I didn't used hot reloading feature yet :D",1520936348.0
burtgummer45,"Don't forget how it's promoted with the 99.9999999% reliability, yet almost nobody has reliability problems with anything else either.  I have perl processes that have been running for years.

And then there a lot of people promoting how fast it is, yet it's one of the slowest languages out there.  It does preemptive multitasking, it's never going to be fast.

I think some of the ways its being ""sold"" are wrong and very confusing.

But I've decided to move forward with elixir for these reasons.

1. Its very fast with IO.  (This is was one of erlangs requirements when being created).  Which is what backends do the most of anyway.  Ports make it possible to offload to a much faster language if necessary.  Because a server side web app is almost all IO elixir seems fast.

2.  Its a higher level language than golang, so you'll get things done faster, wont have 5 times as much code to debug. ""Go"" is short for ""Go write some boilerplate""

3.  Its high level like javascript, but you don't have to think about concurrency all of the time, like you do with horrible promises.

4.  Its productive like ruby, but its explicit.  With ruby you never quite know what's going on, there's so much runtime magic.  Because of immutability and muggleness you can focus in on a block of code and not have to think much about its surroundings.

5. Phoenix, elixir, and ecto together is probably one of the most polished programming environments I've ever used.  Rails is polished, but its performance is a trainwreck.  Server side javascript is simply a dumpster fire.",1520961843.0
tastygoods,Forgive me for ignoring the complete technical nature of your question but Elixir is fun. It is what I like to program and think in. And its still pretty cutting edge in the distributed data structure field. The gorgeous syntax and performant nature of the functional programming stuff is amazing to me personally.,1520952756.0
archlich," All the above you mentioned are techniques for deployment, not languages. What type of code is running inside of your containers? Erlang excels at functional programming. There are several huge upshots, one is data immutability, Threading issues do not exist in Erlang. Faulty or incorrect data causes a process restart, and not a segfault. The cost of an error on erlang is a supervisor restarting a process. Super low effort.  What happens when an error happens in your container? Or a threading issue in your c program? You restart the whole thing? That’s a super heavy handed approach.

Now erlang is not the right language for lots of applications, what kind of application do you want to build?

",1520914355.0
ClickHereForBacardi,"If hot code loading is all you need, you definitely don't need Erlang or Elixir. However, you might prefer it. Even though a lot of container orchestration tools can emulate BEAM tricks at the application level, what happens when you need it at the VM level? I know microservices are all the rage, but they have the unfortunate quality of forcing you to consider things like fault tolerance and process isolation yourself rather than letting your VM handle it for you.",1520960443.0
swiftsubetei,"If you really want to go back in time to see why the concepts in this language are powerful go back to the early 70's with Prolog.  While many languages iterated, trying to get it right from experience, functional languages tended to be specialized in purpose and founded from solid mathematic principles and proofs.  Prolog syntax inspired Erlang and it makes use of the same sensibilities.  This made the complex concepts of making concurrency reliable and scalable to program very natural.  Go programmers for example may think concurrency is their ally but they merely adopted it. Erlang was born in it, molded by it.  And now it turns out that old telecom reliability and scale is wanted in your average web project.  
  
Elixir gives you alll that as a next major step in that ecosystem.  It's not about whether you can do something, it's how easily and what your projects will look like years down the road.  The failure rate is incredibly low for that minority that adopts the stack because it encourages fewer mistakes and sensible scaling of code base.  Even if it only makes you slightly more reliable and flexible than you otherwise would be, users notice.  
  
The problem space is farely wide for the BEAM and in and outside of work so it's a worthwhile added potency and concept as far as I'm concerned.",1520960567.0
aseigo,"So, I don't think hot code reloading is generally enough of a reason on its own to pick Elixir, and that there are far better reasons, but it is important to understand a fundamental difference between the container approach and Elixir's:

Containers are treated in practice as inherently stateless. This allows one to tear down one container and replace it with a newer version . 

Elixir applications are allowed to be stateful.

This is a fundamental difference that allows different approaches to be taken. For example to attain statelessness, container type applications will externalize their state. This creates more complex applications that are inherently slower than they need to be.

It doesn't end at state, either. The idea of containers using traditional network socket connections to cluster, leading to complex systems of protocols that do not reflect the internal state / format of data while in flight, is another departure. Instead of non native API bridging and external state coordination, Elixir apps can decide to natively cluster efficiently. This is how e.g. Phoenix pubsub scales out effortlessly.

So I think you are making some category errors in your comps, which is fair enough of you are still getting familiar with the tech.

All THAT said, there are still other, perhaps better even, reasons for picking Elixir. Some have already noted a few of these.... ",1520966202.0
northrupthebandgeek,"Worth noting that ports allow you to relatively-easily specialize parts of an OTP application in more suitable languages.  If your language is able to communicate via STDIO (that is: it's at least slightly more sophisticated than Brainfuck, and even then!), then it can be used to write a port.  Plenty of real-world applications use Erlang to route requests to a bunch of workers implemented as ports in various languages better suited for a specific task (like number crunching or text processing) and in turn route the responses back to the requestors.",1520924261.0
RaitoNeeto,Applications heavy on IO which what most of the web are.,1520960709.0
,"I asked a similar question on the forum recently. I was fortunate to receive some very detailed and insightful answers.
It may provide some useful information to you.

https://elixirforum.com/t/how-much-overlap-is-there-between-docker-and-elixir-beam-vm/12953",1521209744.0
jb3689,"We use Elixir inside Kubernetes. The main thing that Kubernetes offers us is flexibility in language and system choice. I think that is my favorite thing about Kubernetes - the ability to use whatever tool you want with minimal overhead

I'm interested in moving some of our more coupled systems to use distributed Erlang instead for ease of distribution (implementing heartbeats and everything over http works fine but is just more stuff to maintain and tune ourselves when we could use a framework)

I would echo a lot of the reasons already given for choosing Elixir. We've been able to reduce many complicated and questionably synchronized multi-process systems into compact Elixir apps with obvious synchronization thanks the BEAM and actors. Having everything work in threads has been a huge simplification, and we now have some really great tools for orchestrating the entire system at once. This was a lot harder to do when we had many disparate processes. Sure, you could implement actors in pretty much any language and do a similar thing, but the BEAM was built with this support being first-class and there is a lot of great tooling and well thought-out APIs out of the box that you can use and be productive with. In that sense, Elixir has been an excellent, productive choice for building complex concurrent applications. Not to say that other modern languages don't do a fine job too though - I'm sure many are just as productive and even more so in some cases (e.g. if you want to make intimate use of Linux APIs then Erlang may not be as good a choice as something like Go)",1521220441.0
karmajunkie,"I'm surprised no one has mentioned the fully preemptive scheduling or garbage collection model of BEAM yet. In terms of operational details these are two of the biggest reasons to use it. The former contributes to its scalability—I've routinely run load tests on tiny servers that handle teens of thousands of concurrent requests thanks to this, and the sky is the limit on larger servers.  And thanks to the garbage collection model, there really are no stop-the -world GC pauses, which contributes to a very flat request latency. ",1521288096.0
perishabledave,"To add to what everyone else mentioned, the actor model really is a joy to program when it comes to concurrent/parallel programming. Comparatively the mental overhead for doing CSP programming can be pretty high.",1520916995.0
trinode,"Hot reloading is not rolling restarts. If you have 3 servers all having long running (people connected for hours at a time you can change code modules without disconnecting a single person or routing new connections to the other servers whilst waiting for all the clients of one server to disconnect. Rolling restarts would either have to wait for people to disconnect (fine for short lived http connections for a web server but something like a telecoms system or even online game server would suffer badly) or kill people’s connections.

I presume like other orchestrators the rolling restart stops sending incoming requests to an app which is due to restart, waits for existing connections to finish up and then updates and restarts. How would that work if the average connection duration was 20 minutes? (Instead of a second or so for a http request?)

TL;DR - hot reloading and rolling restarts seem similar but if the average connection lasts 20 minutes (eg game servers instead of http servers) a rolling restart of 3 servers would take about an hour...) hot reloading lets an instance carry on serving whilst it updates (the app never stops so all instances can be updated in seconds)",1521256693.0
sb8244,Did you try to implement distribution via anything like pg2 (done this) or distributing the ETS tables yourself (haven't done this)? I'm curious if mnesia introduces a lot more overhead (for developer knowledge and code) for the use case.,1520904370.0
Koala_T_User,"Forgive my ignorance, are languages just libraries that can accomplish a near infinite amount of tasks? Seeing the source code of elixir is awesome, and I’ve never really given any thought to how languages actually work",1520879650.0
mischov,There might be something useful for you here: https://github.com/mischov/meeseeks/issues/31,1520815784.0
ihumanable,"Binary garbage collection works differently than most other things in BEAM.  Binary processing can easily end up creating lots of temporary binary strings (due to the nature of immutable binaries).

Long story short, you will probably need a strategic `:erlang.garbage_collect()`.

Here’s some background reading that might help.

[Erlang Binary Garbage Collection: a love / hate relationship](http://blog.bugsense.com/post/74179424069/erlang-binary-garbage-collection-a-lovehate)

[Erlang Efficiency Guide: Constructing and Matching Binaries](http://erlang.org/doc/efficiency_guide/binaryhandling.html)

",1520816049.0
,[deleted],1520748534.0
muhalcz,"I'd take a look at https://hexdocs.pm/phoenix/Phoenix.View.html#render_existing/3. With this approach, I believe, you could create various contents (`header` in your example) simply by making a function `def render(conn, ""header.html"", …` or the same template in that particular controller's directory.",1520584991.0
Schrockwell,"The reason you can't have `content_for` work like in Rails-land is that EEx templates are actually just functions, and due to immutability you can't modify the context in which the template runs - you can only return a value.

So, you have to either:

(a) render the content ahead of time as a string or iolist, and pass it in to the template as an assign like `<%= @my_content %>`, or 

(b) extract the content into a partial and lazily render it as a child of the template using `render`",1520600657.0
spoon_licker,"Maybe this would help: https://elixirforum.com/t/eex-multiple-anonymous-function-as-arguments/4272

My basic understanding is that anonymous functions in Elixir act much like blocks in Ruby.",1520702361.0
selfup,"Seems this can help! https://medium.com/@stanbright/elixir-phoenix-partials-1df87c5eaea0

I think the word you are looking for is ""partials""

Cheers!",1520566073.0
Virviil,"You should understand the difference between programming language and framework.

Elixir does not have layouts, blocks or anything similar. And Ruby doesn’t have layouts and blocks also.",1520579084.0
iliveinapark,"Hahahaha, this is awesome. April 1st is coming up, right? Wonder if I can figure out how to stream to the office PA.",1520578262.0
,Ecto changesets are pretty nice for this.,1520606093.0
un3qual,"For my Phoenix & Absinthe app, I wrote a middleware called Gatekeeper. I've thought about extracting it into a hex package. It works by passing a GateKeeper struct through the request, performs all checks at the beginning and caches that data for the resolver.",1520537255.0
mbuhot,"For API requests, I like to validate against a JSON schema or swagger spec.

[open_api_spex](https://github.com/mbuhot/open_api_spex/blob/master/README.md#validate-params) has plugs to cast and validate params, ensuring your controllers only need to perform business logic validations, not the low level string conversions.",1520847346.0
aemadrid,try this [course](https://pragmaticstudio.com/unpacked-bingo). it's Elixir + Phoenix + Elm but you can apply the lesson of the Elm parts to React.,1520551728.0
TheAceOfHearts,"I'd suggest having the clients play over WebRTC, rather than passing through your server. It'll use fewer resources and be simpler to implement.

In that case, your server just works as a coordinator. You can prevent cheating by having both players report the game's outcome.

",1520536442.0
iliveinapark,Just want to point out that you don't need Phoenix to mount an absinthe API; the [absinthe_plug](https://hex.pm/packages/absinthe_plug) package allows you to add a schema to a regular [Plug.Router](https://hexdocs.pm/plug/Plug.Router.html).,1520579116.0
iliveinapark,"Is your code online? If you wanna post a github repo and the commit you're trying to compile at, I'll have a look.",1520499064.0
prh8,"Hey everyone! Reviving my blog and put together a little post on how to still take advantage of Phoenix generators, even when using data types not supported by the generators. My case was PostGIS Point types.

Anyways, I'm welcome to feedback both stylistically and technically. Hope it's useful!",1520457547.0
olafurara,I really like this approach since it allows you to test compliance on a database level plus in doesn't give you root access to the database. But I haven't seen anything that uses it in Elixir. But I don't think this approach should be hard to implement.,1520433569.0
Tavi2k,"Postgres connections are expensive to establish, so you pretty much always want to use a connection pool to avoid that cost. So you can't just reconnect with the individual user role for each request, you have to use a role with higher permissions and switch the active role at each request. 

This approach is interesting if you want to use row-level security inside Postgres, but otherwise it removes the major advantage of DB-level permissions again because you have to switch roles inside the database.

If performance and latency doesn't matter at all, and you can skip the connection pool, this would probably be a reasonable idea.",1520493388.0
,[deleted],1520441136.0
Schrockwell,"> I'm looking for simpler and lighter ones that are actually used by others.

Is this driven by some design requirement? What does ""lighter"" mean?

Starting out with a minimalistic web framework will inevitably lead to re-creating all the tools that come for free with Phoenix - think about routing, content types, templates, middleware, persistence, etc etc etc.

`mix phx.new --no-brunch --no-ecto --no-html my_app`

It's about as minimal as you can get, and you'll instantly be productive.",1520429797.0
Linupe,"You have maru which seems to be more focused on APIs
https://github.com/elixir-maru/maru",1520427554.0
EaterOfGerms,"I’ve been meaning to check out Raxx:

https://github.com/CrowdHailer/raxx",1520428255.0
lalo2302,"Phoenix is actually not “heavy”. It is composed by a lot of plugs, meaning that you can use only the parts you need of phoenix to make it work. First you need a Phoenix Endponit, and from there you start building what you need. Also using plug you will end up writing more code which phoenix provides.

Saying this, I think Plug can be your go to, or look at github for sinatra like repos. 

P.S. If you find something interesting, please share it",1520420288.0
ScrimpyCat,"What kind of app are you trying to build? For the most part you can get pretty far with just cowboy, plug, and ecto. Although if you were needing all those 3, I'd probably just use Phoenix anyway. 

Another option if you don't need everything Phoenix has to offer, is you can often leave those parts out entirely. 

There are some other web frameworks available, but I'm not sure what kind of state they're in or how they really compare to Phoenix in this regard. Though I'd imagine they'd be somewhat similar, if you really don't need all that functionality, you probably don't need a web framework. ",1520427939.0
RyuChus,"https://github.com/h4cc/awesome-elixir#frameworks

Here is a list of web frameworks. I've read and heard good things about Sugar and Trot particularly.

Also, if you're going to be quite rude when asking others for help I'd advise you stick to using google as that will give you the exact answers you want and you can be as rude as you like.",1520554318.0
jb3689,"We use straight Plug in a few places (where we don't need templating, ecto, channels, etc) and it works fine",1521345956.0
dandruffhead,ITT OP is dick,1522491681.0
philly_fan_in_chi,"Cast should also validate format, so you don't shove garbage into your DB. ",1520427996.0
ppraisethesun,"Why make another clone chat just copying code from dozens of others?
You could've shown how to handle presence, disconnects or whatever. I just don't understand why bother",1520223292.0
paulosuzart,Very nice. Are you using libcluster in the project?,1520078739.0
phialx,Thesis: https://github.com/infinitered/thesis-phoenix,1520000737.0
JickRamesMitch,"Exadmin.

Adminium on heroku",1520002181.0
niahoo,I would use [Grav](https://getgrav.org).,1520012378.0
deadkarma,"thanks for sharing.
I have a Phoenix app on heroku, and its worked out just fine.

If your looking for a heroku-like platform built for elixir, check out https://gigalixir.com

I have bo affiliation beyoynd a friend of mine hosts an app there that I hello with from time to time.",1519959855.0
renrutal,So what compilation issues were they having that they needed a full rebuild before every deployment?,1519995572.0
karmajunkie,"I'm curious about the claim that Heroku limits you to 50 connections per dyno—I think they mean that the *backlog* is limited to 50 connections per dyno, but I've never run into this limit with an elixir app—it handles connections as fast as Heroku can hand them over. ",1520117189.0
donotflame,Wut,1519926866.0
Hauleth,One monit change. I wouldn’t use raw `#{user.id}` in query but rather pass it as a parameter via `$1` and setting proper value in third parameter of `stream` call. ,1519897541.0
olafurara,I'm really glad that the Erlang release mechanisms are being integrated into Elixir in a way that makes sense for both projects.,1519882640.0
CodeMariachi,Aren't we going to have a performance hit when building releases when developing?,1519895736.0
bugant,Really good job! Keep up!,1519894827.0
onmach,Ah thank goodness.  This is my last pain point with the language.  What he's doing there is exactly what I wanted to see.,1520010314.0
boredsoftwareguy,Will this address the need to have a Docker container for releases on other architectures?  That is a problem I would like solved.,1520026830.0
chockablockchain,"Interesting first read for me on Elixir.
",1520215155.0
RadianChoi,"Do the PragmaticStudio Elixir course. This was a game changer for me understanding the OTP side of things. In the course you build an HTTP server which works as a great example. Here’s a 20% off coupon they released:

https://elixirforum.com/t/developing-with-elixir-pragmatic-studio/4429

Not affiliated but did the course and loved it. ",1519789692.0
freester101,"Write a bunch of programs that use them.

Some simple ones would be something like implementing parallel map using agents, or a set of functions that work on Lists in parallel by spawning genservers/agents",1519803294.0
Schpaencoder,Watch this channel https://www.youtube.com/channel/UCp01DFl8kp-239gW289C0ew a couple of times. They are short and to the point. ,1519803714.0
savish,"I found the Mix and OTP guide on the elixir-lang site to be a perfect starting point, combined with the docs on hexdocs.pm 

However, it wasn't a read-once-know-all situation. Went through the guide, imlemented the KV example, and then started on a modified version of the KV store, while referring back to the guide and hexdocs. At some point, it all just clicks because it _is_ an excellent paradigm when used in software that benefits from it.",1519792836.0
amarsuperstar,"Only covers the basics, but this post made quite a lot click for me when starting out

http://dantswain.herokuapp.com/blog/2015/01/06/storing-state-in-elixir-with-processes/",1519812468.0
wktdev,"Get really irritated that you can't store dynamic state in Elixir and then scramble to learn processes, agents and genservers as a tool to get around it. The details will come as a side effect of this. I'm mostly serious and only being partly facetious.",1519826637.0
alvesl,"I just wrote a blog post which (I think) might serve as a good example: https://www.reddit.com/r/elixir/comments/81ip1i/using_genserver_in_a_production_phoenix/
(You do need some logic of how it works to understand the implementation) Good luck! :)",1520027296.0
Bstochastic,"I attended this year. I'm currently sitting in on a talk in Denver Eilxir Daze.

My thoughts on Lonestar.

1. Turnout: This was great. While I did not attend last year's, it seemed that there were a good number of people. If I had to guess I would say around or over 300. Lots of friendly, smart folks and good conversations.

2. Talks: There was a theme of distributed systems -- which being an area of focus for me - was quite enjoyable.

3. Location: Meh. I live in Austin. The location on Anderson (lots of good furniture consignment though) is nothing special and I feel it makes post show socializing harder as you're not within walking distance of anything remotely interesting.

4. Training: I participated in the nerves training. I thought it was good and it did jumpstart me into nerves -- I do wish it was more hands on code wise, however.

Not sure what else to include. Feel free to ask.

EDIT:
tl;dr
Great conf. Will go again.",1520017117.0
CodeTinkerer,"It's too bad conference attendees don't post about their experiences more.  I went last year as a beginner in Elixir (pretty much still am).  Alas, the stuff I remember from last year were non-technical in nature.

The conference location is (if it hasn't changed) in a mall area (instead of in a hotel or convention hall) near a skating rink.  It's a single track event so everyone listens to the same set of talks (which is interesting).  The food was good.  Might have been nice to have something geared more to beginners, but I understand that Elixir is nearing a tipping point where more and more people are coding in Elixir for a living (many seemed to be migrating from Ruby on Rails).

I decided to skip it this year.",1519838391.0
RexM,https://www.youtube.com/channel/UCOy-_b9bqjokoWX9Hg5ZgUg/videos,1521222862.0
quaunaut,"Make a new folder for Plugs in your web directory at the same level as your controllers and put it in a new module there.

Phoenix will auto-import the code and you should be able to call it in Router just fine.",1519741247.0
ck3g,"Yes I would also say to keep it in the separate module in the directory next to your `controllers` directory. Then you will be able to use the module in the places you need.

I've recently published an article about plugs, you can find several examples there and find one suitable for your need. 

http://whatdidilearn.info/2018/02/25/phoenix-authentication-and-authorization-using-plugs.html",1519822108.0
MaximumStock,"I'm not an expert on Ecto by any means, but can it be that it doesn't know how to handle empty changesets? Maybe you can fix this specific error by filtering out changesets that are empty.",1519687897.0
gcauchon,Does your database support JSON fields? If so using an embed_schema instead of an has_many association would make more sense in your use case. Especially since you delete_all and insert every time on every update.,1519692679.0
strixxxx,"Link to the repo:
https://github.com/jpiepkow/accesspass

And hex docs:
https://hexdocs.pm/access_pass/introduction.html",1519702465.0
boredsoftwareguy,How does this differ from the half dozen other solutions out there?,1520027009.0
tastygoods,Keep up the good work.,1519579409.0
newbadsmell,the future,1519455987.0
redconnors,"I've been working on a game where players buy and sell certain commodities and compete for a high score within a limited time. The game engine is a simple Elixir app, and I'm working on the Phoenix interface now. Obviously I'm using channels, so I can expand into multiplayer soon. I write in Ruby/JavaScript at work, so it's a real pleasure to have a fun side project in Elixir. ",1519499571.0
Nicd,"Just got Distillery releases working for my service, next stop is automated beta deployment when pushing to master on GitLab.",1519467585.0
Zesky665,A chat app similar to discord. I'm hoping to finish it around May. ,1519501992.0
mbuhot,I'm learning some elm by creating a frontend to an absinthe-graphql/phoenix app,1519504232.0
dqslime,Doing exercism problems - been meaning to write something real in Elixir for some time but have no idea what :|,1519516800.0
horses_arent_friends,"I've been working on my first real Elixir project, [Midal,](https://github.com/bees/midal) a [microdata](https://www.w3.org/TR/microdata/) parser. Elixir is my first functional programming language and this felt like a problem that could be solved well with the tools a functional language gives you.

I am certain I'm doing things in code that are weird/hard to read. If any of y'all have time review the code I'd love to hear your thoughts. You don't have to be nice - just give me something actionable :)",1519475015.0
mcdoh,"[squawk.online](http://squawk.online)

[github](https://github.com/mcdoh/squawk)

A short-term, short-link service, that can be shared with a word. e.g. **squawk.online/bacon**. We used shoutkey.com all the time at work but it recently shut down. It turned out to be a great first project for Elixir and Phoenix!

It's a good first project because the MVP was quick to roll out but leaves plenty more to implement. There are plenty of locations in the code that I feel I implemented awkwardly and which could probably done more idiomatically.

The database structure is a work in progress. It started out as a single table with rows updated in place. I'm aiming to spread it out to an actual relational database. I'm pretty sure there's still the risk that two users could get the same key at the same time.

It sounds like ShoutKey shut down because of abuse from spammers, hopefully Squawk can avoid the same fate.
",1519521152.0
Ileana_llama,"Yals.mx is a site where anyone can get an estimate on the value of a home, it's focused on the Mexican makert only, the development started a year ago, I was part of the backend team, at the time we were very exited to work with elixir and Phoenix. 

This is my last week in my current job and probably it will be a long time before I can deploy elixir on production again, it was a great experience learning and teaching elixir I will miss it . 

",1520214613.0
t_vironne,DSL for finite state machines. Very similar to this one: [fsm](https://github.com/sasa1977/fsm) but with [GenStateMachine](https://hexdocs.pm/gen_state_machine/GenStateMachine.html) running under the hood.,1520933212.0
derzach,Working on a book on full stack development with elixir/Phoenix as the backend and react and redux on the front end,1521557194.0
vlatheimpaler,"It would be interesting to use Elixir perhaps. But you might consider trying F# for this since it already has really excellent support for desktop UIs including native Mac bindings (Xamarin.Mac), GTK bindings for Linux (GTK#), WPF on Windows.

There is also Xamarin.Forms, which began as a cross-platform toolkit for iOS/Android/Windows Phone but it has expanded to support Xamarin.Mac and GTK#. I've used it quite a lot for mobile but have not yet used it for desktop. IMO it is one of the best designed UI toolkits for cross-platform development because it makes it very easy to get down into the platform-specific APIs, while most cross-platform UI toolkits try to hide you from that layer so you're stuck using their least common denominator APIs.

You can also build things with F# in an Elm architecture (what F# devs are now calling Elmish). Here's a small library for using Xamarin.Forms using Elmish: https://github.com/dsyme/Elmish.XamarinForms
",1519406972.0
Nixonite,"This might be useful

https://stackoverflow.com/questions/97508/what-libraries-can-i-use-to-build-a-gui-with-erlang

Minus the java stuff. ",1519405294.0
cthree87,I’m using it as a windows service in one product. It’s not the ideal platform but does the trick. For GUI you’ll end up with wx I think or serve HTML/JS to a browser. It depends on the app. ,1519425704.0
pls_pressy4pie,"This post is a little old now, but Boyd Multerer is working on an OpenGL driven GUI framework. It's supposed to be ready pretty soon. I've seen it in person and it is fast and looks really nice to work with. 

On the other hand you can do your ui code in C++ or C using QT framework, and communicate with it via a port or Nif or other mechanism, but this can be a pain.

The issue with shipping a ""cross platform app"" is that the app will require installation of Erlang, or the app will require shipping with ERTS. This is a problem for cross platform due to linked binaries,cross compilation etc. ",1521094606.0
brainbag,"This is one of my favorite features of Elixir. If anyone wants to see a real-world example, my [zipper_list](https://github.com/bbugh/zipper_list/blob/master/lib/zipper_list.ex) library uses it extensively. Here's an example: https://github.com/bbugh/zipper_list/blob/master/lib/zipper_list.ex#L199",1519403377.0
mbuhot,"> Plug is not idiomatic Elixir

I'd rather see some side-by-side comparisons of where a particular task was accomplished with less code/more clarity in Raxx than Plug.

The complaints I see about Plug are that you can't transform a response as easily as you can a request, leading to the asymmetric API, and that since send_resp is a side effect, you can't always be sure that a response was actually sent - leading to runtime errors.

",1519354047.0
notorious1212,"> Plug is not idiomatic Elixir (or erlang)

    defmodule MyServer do
      use GenServer

      def handle_call(:request, _from, state) do
        {:reply, :response, state}
      end
    end

    defmodule MyApp do
      use Raxx.Server

      def handle_request(_request, _state) do
        response(:ok)
      end
    end",1519355438.0
Boris-B,"I've been reading the code of `Raxx.Static` and `Raxx.MethodOverride` and I'm having a hard time figuring out how middlewares are supposed to work with Raxx.

It seems like there's a bunch of macros and so far it's going over my head. Can someone point me to a good primer on the macro stuff used for middlewares (I think it works with `defoverridable`).

I'd also like to understand how a request will ""flow"" through the middlewares to finally hit a handler.",1519349206.0
Harshadow,great ! what are the benefits of it?,1521292268.0
tastygoods,Its good clean and idiomatic Elixir. Nice use of processes to map/reduce the hierarchy. Well done.,1521058739.0
boredsoftwareguy,u/tacticiankerala is you could ask for some specifics I'd be happy to look over it for you.  It's hard to know where you need improvement without having worked together.,1520026909.0
,A bit disappointing really I thought that this was going to be an example of language bindings to the underlying C library but it's really just shelling out to the convert process. Nothing new here and it's really about IM rather than Elixir.,1519235945.0
sb8244,"1 thing that I might suggest is keeping the count of the lists in a module attribute so it is executed at compile time. Right now, the Enum.count is going to be O(N) on the fairly large lists.
",1519202856.0
ScrimpyCat,"Thought about offering a non-random version? Cause at the moment it's not quite usable for a use case such as gfycat, where you require them to be unique. Since overtime, it's likely to generate more and more of the same (especially if you use a lower number to generate) and you'll have to test against past results. At the moment the user could try and assist it to avoid definite repeats (rand being at the same state as what was generated another time), by exporting rand's state so you can jump to some new state, but that can still have collisions. 

Would be nice if there was a variant where you could in addition provide a seed and an index in the permutation. So the seed would control the order of the permutation, and the index will be the unique result at that index. If index exceeds the permutated list return an error (the user can then know they've used up every possible combination of that length and will need to increase the length to retrieve more). 

That way if the user increments the index, they're guaranteed a unique result. Which gives them a couple options for how they might want to interact with it. Such as storing the current index and incrementing it.  Or mapping some other identifier of theirs to an index. etc. ",1519231351.0
kwitcherbichen,Without the redirect and trackers... https://www.erlang-solutions.com/blog/fips-for-erlang-elixir-systems.html,1519136677.0
horses_arent_friends,"In case anyone else has shitty eyes like me:
    
    .blog-page p {
        font-size: 16px;
        color: black;
        font-weight: 400;
    }

makes it a lot more legible",1519152406.0
blackjackjester,What's this have to do with Elixir?,1519085142.0
e456123789,"Mox is per process. Once you do a HTTP request, you are using another process. You probably just need to call `setup :set_mox_from_context` and make sure your tests are not async. The docs have more information: https://hexdocs.pm/mox/Mox.html#module-multi-process-collaboration",1519075468.0
oneark,"Really great article, clean and to the point. Thank you!",1519092088.0
antgweb,"Thanks very much! Small typo: the ""s"" was left off the end of the URL link to seeds.exs",1519116240.0
DuplicatesBot,"Here is a list of threads in other subreddits about the same content:

|Title|Subreddit|Author|Time|Karma|
|---|---|---|---|---|
|[Functional puzzles (Javascript, Elixir, Clojure)](https://www.reddit.com/r/Clojure/comments/7ym2d2/functional_puzzles_javascript_elixir_clojure/)|/r/Clojure|/u/orestis|2018-02-19 19:38:07|1|
|[Functional puzzles (Javascript, Elixir, Clojure)](https://www.reddit.com/r/programming/comments/7ylvn3/functional_puzzles_javascript_elixir_clojure/)|/r/programming|/u/orestis|2018-02-19 18:54:42|0|


----

 I am a bot [FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block user (op only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&subject=remove%20user&message=orestis)-[Block from subreddit (mods only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&subject=remove%20subreddit&message=elixir)

Now you can remove the comment by replying delete! (op only) ",1519040322.0
BalbinHS,"I'm still new to elixir and functional programming, but I'm curious if it's not slightly better to do: 

    defmodule Santa do  
      def santa(instructions) do
        instructions
        |> String.codepoints
        |> Enum.reduce(fn(""("", acc) -> 1 + acc 
                         ("")"", acc) -> 1 + acc 
                         (_, acc) -> acc end)
      end
    end  

",1519068106.0
Hauleth,"Why use `String.codepoints` at all, when we know that given string will contain only ASCII values? I would write it as:

    defmodule Santa do
      def santa(str), do: walk(str, 0)

      def walk("""", floor), do: floor
      def walk(""("" <> rest, floor), do: walk(rest, floor + 1)
      def walk("")"" <> rest, floor), do: walk(rest, floor - 1)
    end",1519119277.0
Niicodemus,"This reminds me of a bot I wrote years ago to automate the process of registering for courses at my university, which at the time was only over the phone, and when everyone was scrambling to get their favorite classes, the line would just be busy. So I wrote a quick script to autodial my modem and then ping a sound when it finally got through. Yours is just a much more modern version of that. =)",1519014582.0
SulfurousAsh,"Don’t build anything custom with GenServers for this. Phoenix already has the concept of a session, which is already doing exactly what you want it to. You can read more about it here: http://phoenixframework.org/blog/sessions",1519000159.0
jordiee,"Mentions addict but if you are looking for an opinionated alternative that is just as easy to use please check out my library AccessPass and let me know what you think

https://github.com/jpiepkow/accesspass",1519028655.0
mbuhot,"The example stores the user_id in the session. Isn't it preferable to store an opaque session token, and associate it with a user_id in the database? That way a user can see and expire all their sessions from an admin page or when they change their password. ",1519039078.0
Schrockwell,"> This is a little confusing because technically we could have wrapped the user controllers, views and templates into the accounts/ namespace but we didn't.

I think, in the context of being a tutorial, it made sense to introduce the generator without the `--web` option first, to help understand the basic generator behavior. If there is only one way for end-users to modify the underlying User model via the web, you don't even have to namespace the controller, necessarily. Otherwise, you certainly could have used the `--web` option in the first case and ended up with `hello_web/controllers/accounts/user_controller.ex`.

> Should we always wrap all web related resources and pages into the context's folder as a best practice?

I don't think this is a hard-and-fast rule, by any means. If you follow that pattern to its logical conclusion, every controller action becomes a super-thin layer - basically a one-line call from the web layer down into your application. Structuring the shape of your underlying application just to conform to the user's endpoints is doable and may be helpful for locating the relevant files, but you will find it to be constraining, resulting in a lot of repetitive setup code that could have been done ahead of time, in the controller or Plug pipeline (e.g. fetching and authorizing the current user).

> Also when it comes to defining route ""as"" paths, should you use the context name or not? For example would you use accounts_session_new or session_new?

Routes are a web concern, not an application concern. So, if your controllers are namespaced, use the namespaced route helpers.

In the end, modules are just bags of functions. Module namespacing is more of a convenience and a mental model, and as your application grows, that model may shift! Renaming and moving modules is pretty easy, so don't be afraid to ""stick it somewhere"" with the ability to move it later.",1518965269.0
jpscaletti2,"As far as I understand by reading the “What’s new in Ecto 2.1”, the contexts are intended to be a way to deal with the problems of fat models.

When in Python or Ruby you would use Mixin classes to separate some model fields and related business logic, in Elixir you can use contexts for that.",1518990082.0
emmanuelgoldstn,This was a cool event - some really great talks. Thanks to the event organizers and speakers for making these videos available!,1518930418.0
yeyemelocotom,Nice! Thanks!!!,1519066059.0
lalo2302,"I am not the author, but I just discovered it and think it’s awesome.",1518845580.0
menge101,"> Maybe I'm missing a bigger point about mobile development...

It should consume data agnostically from an API of some sort.  Most people would implement something that is a RESTful HTTP API, I think.

Then phoenix/elixir is just an implementation choice to build your API.  You could do it in anything and it'd all be the same to the mobile app.",1518722332.0
e456123789,"> With rails / jekyll this would be easy because you would just wrap the value in an if statement and check if it's true or not.

This should have worked just fine with Phoenix.

Other than that, it is worth noting Ryan's solution is the same as Daniel's first solution, except Ryan chose to put the rendering code in the view module by implementing `render/2` rather than defining a bunch of templates. And I agree it is much cleaner. I don't think anything changed in this area, so Ryan's solution looks like a good starting point.",1518704958.0
kapowza681,"It’s a very young language but growing all the time. I decided to really try it out about a year ago and I’ll never go back to Node, Laravel, etc. 

Beautiful language that is very easy to follow. 
Compiles to Erlang so you get a rock solid base with incredible uptime and concurrency. 
Testing is a first class citizen and already built in. 
Ecto is a great ORM. Combine with OTP and ETS and you have all the data layers you will ever need. 
Phoenix framework makes writing Rest APIs very easy especially concerning websockets. 

I’d write more but that’s about my typing limit on mobile. Keep at it you’ll grow to love it. ",1518667977.0
the_brizzler,"I was a big fan of how fast I could build applications with Ruby on Rails but it can be a lot of work to make a ROR project into a scalable solution and can be bug prone so you have to write lots of tests. Elixir with Phoenix is just as fast to develop with and scales like nobody's business. Also, it is functional so writing tests is a lot easier and since it is compiled you catch a lot of errors at compile time rather than at runtime. It has a lot of really cool features, but one in particular is the ability to do hot upgrades...there is a video floating around out there on the internet somewhere...where a guy is flying a drone which is running Elixir software and he pushes up new code to the drone and it keeps flying without any issue all while hot swapping to the new code.",1518669346.0
philly_fan_in_chi,"There was an excellent Clojure conference talk a few years ago about a gentleman who made furniture with hand tools. Bench saws, chisels, the works. If I'm remembering the thesis of the talk appropriately, his view was that by having small reliable tools, the combination of all of them would allow him to produce higher quality furniture than anything that comes off of a machine. He also felt that not having rapidly spinning metal ready to cut his arm off, but that's not particularly relevant for this point. A tertiary impact is doing this kind of furniture building, one eventually creates a workbench that allows the builder to more easily do the jobs they need to, after learning what things they need. A proper workbench would have conveniently placed clamps, e.g. to hold boards of various shapes and sizes, because it's built generally to aid the work in the future. 

Though he spoke of Clojure, the same things are true with Elixir, and many languages with Lisp-style macros and functional flavors. You have a small core of very strong utilities that allow you, in combination with each other, to create really complex machines with very few building blocks. For the workbench analogy, macros allow you to express your solutions in the language of your problem, by hiding unnecessary syntax where it doesn't need to be. If you've never used a language like this, it's hard to conceptualize, but it's remarkable when you can make syntax boilerplate go away. It really feels like a language that is built by craftsmen to do proper build craft. One where very seasoned developers sanded down the corners properly across the board and built a very forward thinking tool that's a pleasure to use.

Where I feel Elixir stands out from Lisps in particular is accessibility to new developers. The Ruby looking syntax is VERY easy to read, even if you're unfamiliar with Ruby, and the explicit nature of the language means that someone coming into a code base has very little if any magic to conceptualize. Don't know what something does? Just find the place where it's defined and read the code, or check the HexDocs. At the same time, that syntax is superficial and the underlying methodology is highly derived from that of Erlang (with a little Lisp, without being a full blown Lisp), which is itself an extremely mature platform with decades of development under its belt. Then you realize that the Ruby-ish syntax is just a very pleasant facade over extremely powerful concepts. 

Elixir is also defined for the most part within itself (using macros, generally), which means that you can just read the code and figure out what's happening (see e.g. `kernel.ex`). I love this property of languages, and it shows you cannot be held captive by Jose and the core team refusing to add your favorite feature. You can make it appear seamlessly alongside language constructs like `if`and `defmodule`. See Guy Steele's famous Growing A Language talk.

Tooling wise, Elixir is very modern with good build tools, package managers, etc. and a smaller (though often extremely high quality), but growing and improving library scene. There are some gotchas around releases, and how to deploy in e.g. Docker in production, though they're working on making these easier. As far as type systems go, Dialyzer is the one in use by Erlang. The error messages are awful and Erlang-ey though there is work being done to fix this. It's often good, but it is one-sided errored so it can miss things. There are ways to program to make it more easily able to determine things, but you have to get a feel for the tool to really get a good sense of that. Coming from Scala, you'll be a little dissatisfied, but code is often very simple that Dialyzer is enough. You're not going to be creating Monads and Functors, but saying that your function returns a round peg will error on trying to put into square hole. 

The supervision model is really an excellent way of reasoning about complex software, and although as with any system there are gotchas (see Erlang in Anger), it allows you to get really reliable software with very easy to predict latency numbers.

Finally we get to performance. Thinking futurewise, we can expand number of cores way more easily than we can speed of a single core, and we can way more easily just get more machines. The supervision model allows you to map your solution very well to your topology, if your problem is the right use case for that kind of thing. It's very fast on single machines (I sometimes get responses with a unit of microseconds), and the Erlang VM has very strong primitives for reasoning about your network topology at a high level and predicting failure at development time. This is awesome because it means your software can be easily adapted to changing demands. 

Finally it's just a pleasure to work with. I love hacking on things with it, and code golfing is a dream. Refactoring is cut/pasting often and changing a few call sites to point to the new place. The community is awesome, the core team of the language and its more famous tools are all really open to contributions from newcomers and veterans alike. I really love Elixir and I'm happy I chose to learn it, and am thankful I get to use it in my day job.",1518741416.0
Nixonite,"Because Erlang is a god-tier language, and Elixir runs on the erlang vm with nice syntax (I was about to say nicer, but I also like erlang syntax a lot). 

It eliminates the need for a lot of common third party tools like redis, separate tooling to run asyc code, software supervision tools, clustering tools, software monitoring tools, and perhaps even message broker tools. All of this is built into something called OTP which comes with erlang, and also with elixir. 

Also really really nice pattern matching, and the functional programming aspect is great too. Although it's not as strongly typed as say Scala, it's tons better than something like Python. Elixir/Erlang has dialyzer which is a tool to help with finding bugs early, also elixir typespecs are very handy (you can add types to certain parts of your code for extra security). ",1518670293.0
hutsboR,"Mix is such a beautiful build tool. Simple, light and just an all around pleasure to use. Hex is a great package manager. Easy to document code and generate documentation. Pattern matching is so very powerful and eliminates a lot of icky conditional code. 


Just to name a few that *haven't* been named. ",1518670747.0
sasajuric,"I really like how BEAM (the Erlang virtual machine) is designed to power long-running fault-tolerant scalable software systems. I've elaborated in more details in [this talk](https://www.youtube.com/watch?v=pO4_Wlq8JeI).

There are many other great properties, such as OTP, functional programming, additional Elixir features and tooling, the ecosystem, and so on, but I personally feel that BEAM is the thing which really sets apart Erlang, Elixir, LFE, and other BEAM facing languages, from the rest.",1518698449.0
branwoo,"Here's my perspective as someone that's only been professionally developing for ~3 years as a Python / Django + JS / React & 7 months using Phoenix --

The first thing I noticed coming from Python / JavaScript ecosystem is the amount of thoughtfulness the core developers have towards developer UX -- Right out of the box, you're given a toolchain for:

1. Dependency Management via Mix. It just Works. library that you just forked onto github? Works. Just want to install the latest version? yes ma'am. You don't realize how good a tool is until you've used other ones that don't _always_ work. won't name names here :D

2. Code generation via Mix (Coming from the Django world, this was a mind-blowing thing, I know the rails framework does this too). A [simple command](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Json.html) Will generate your controllers, schema, context layer, tests, and helper documentation to push you in the right direction for how to do things the *sane* way. As someone writing REST API's this has saved me countless developer hours.

3. Pattern Matching, a feature of Elixir: I found that pattern matching has allowed me to write very precise definitions for when things should and shouldn't happen. For example, it's very easy to write something like: ""run this function if the user is authenticated, and who's permission level is of admin, otherwise this function here will catch everything else and throw an exception"". Coming from an imperative language background, it's really changed the way I think about composing behavior.

4. Like others have mentioned: [Supervisors](https://hexdocs.pm/elixir/Supervisor.html), OTP / [GenServer](https://elixir-lang.org/getting-started/mix-otp/genserver.html) / GenStage, ETS. Right now, it probably sounds like a bunch of tech-fancy-wizardry -- but these are abstractions that programmers much smarter us have devised. They're a shared, standard set of behaviors that help us manage difficult-to-reason-about things like: concurrency, and what to do when servers fail. If programming languages were like lego building-blocks and the task is to build a model town, then these abstractions would be like guidelines that ensure that your sidewalks and pipes automatically grow with you as your community get bigger and bigger. Definitely not a perfect analogy, but these are things you are glad exist after you've built something.

Lastly, the Elixir community, especially on slack has been great. I've asked plenty of beginner questions on slack and have had Chris McCord himself help me out. Just a good feeling to know that the core developers of the language are willing to help little nubbies like me out :)",1518759063.0
mbuhot,Can you share why they are transitioning off Scala? ,1518677942.0
ck3g,"When I started to learn Ruby back in the day it was fun. I've started to like the language from the first steps. Then I've got the job because of Ruby and Rails and still do it. I've changed several companies of course, but I still use Ruby.

After a lapse of years, you are not excited about the technology as you were at the beginning of your path. Don't get me wrong, I still love Ruby. But there is no that excitement like you had after writing your first ""Hello World"" and stuff.

So, after some time you want to learn something else. I had Erlang language in my ""Learn TODO"" list for a while. But I always postpone it. When I was on EURUKO 2016, José Valim ""sold me"" Elixir during his speech. I get back home and bought Books. 

A year later I've finally started to learn it. And you know, I've got that Excitement about the new language back again. So for me, it's like a sip of fresh air. But I believe it can be with other programming languages/technologies as well.

If you want to read more about my ""Whys?"", I have [an article about that](http://whatdidilearn.info/2017/09/06/why-i-have-decided-to-learn-elixir.html). Which is almost the same length as that comment =)

I would suggest you start and see if you like it. I guess that is the only way to understand would you like it or not.",1518685815.0
sb8244,"I find the process model incredibly refreshing to work with. A lot of things which can become complex in other languages can be simplified heavily in the process based model.

The language itself is amazingly easy to follow and understand (once the foundation is present). For instance, most of the core library is idiomatic Elixir code, which makes reading it much easier than switching to another language like C or Java under the hood.

The community is super helpful and there's ripe opportunity to make big impacts for others, on both tooling, library, and education front.",1518681493.0
onmach,"I like scala too, but I have to acknowledge that elixir is a very well designed language.  I'm not sure I've ever been as productive in a language as I have been in elixir lately, throwing together reasonable projects with ease.

It has enough of a compilation phase to catch obvious errors which makes it a ton easier to debug than other dynamic languages.  Concurrency out of the box is stellar.  And while I certainly wouldn't use it for hardware drivers or games, even its speed is pretty decent.  Good enough to throw together ad hoc scripts to calculate metrics and so forth.  It's standard library is exactly right.  The code looks great and is easy to modify.  The code reloading while I'm developing is just so useful.  It has most of the functional idioms I have come to love.

If I were to start a business I think there's a high likelihood I would commit to elixir as a primary language.",1518717271.0
Zinggi57,"Most reasons for why I really like Elixir come directly from Erlang, OTP and the BEAM. It's just an amazing platform to build distributed systems.   
Language wise I'm not such a fan of Elixir, as I'd rather have a statically typed ML language on the BEAM.   
But Elixir makes up for the (IMHO) language deficits in tooling and community.",1518724789.0
Cputerace,"Watch this keynote, it is one of my favorites, it captures just one of the reasons you are looking for:

https://youtu.be/5hDVftaPQwY",1518738539.0
menge101,"To me, elixir is a pleasant syntax that allowed me to use the BEAM (the Erlang VM) and OTP (Open Telecom Platform).",1518699963.0
und0ck3d,"Behind all the technical related stuff, Elixir's community is one of the best I've had the pleasure to connect and interact with! <3",1518713799.0
jb3689,Elixir is a very high-level language. I refer to the programming environment to be more akin to a super-powered OS. OTP is just extremely productive and compact. I almost feel bad for people who are stuck in classical languages where the extent of what you get is syntactical sugar and (if you're lucky) something barely better than basic locking primitives. Erlang gives you the ability to connect VM's to form a distributed system that handles its own RPC for you under the hood - all in the box. It still blows my freaking mind,1521346376.0
mbuhot,You can achieve a much smaller image using distillery releases and vanilla alpine base image.,1518607138.0
lasseebert,"I am looking for an Elixir developer, and I will be satisfied with a skilled developer willing to learn Elixir.",1518483045.0
e456123789,"The difference is going to be in the foundations and not in the framework/packages. My suggestion: get Programming Phoenix (or something similar) to get acquainted with Ecto and Plug. Use Elixir in Action to learn more about Elixir and OTP.

Programming Elixir is also a great book but my colleagues preferred the pace in Elixir in Action.",1518476576.0
k-selectride,"Most companies are still in the 'learning' phase with elixir/phoenix and including it in their tech stack. A lot of companies are looking for ruby/rails devs first, with a willingness to learn.",1518478846.0
Cacamas,Learn OTP. Without OTP you'll be developer doing Ruby with Elixir syntax. ,1518607151.0
ScrimpyCat,"There aren't many Elixir jobs out there, so I wouldn't recommend picking up the language with the intention of finding work. 

As for how to get an Elixir job. Most places I'd assume would be transitioning over to Elixir/may not even be using Elixir exclusively. So aside from knowing Elixir (and OTP), you'll probably need to be familiar with whatever their original stack is. 

As for myself, I've had no luck with any Elixir jobs. Not that there was a massive pool to apply to anyway. But I got rejected (not even an interview) from all the ones I did apply to. Funnily enough I heard from some of them that they were starting to become desperate for Elixir devs, and were willing to hire people who were keen to learn the language. But rejected again when I applied to them again lol. So yeh I'm not really sure what's required to qualify for a job in Elixir, other than the general assumptions. But since the sample size was so small it could've also been simply not meeting organisational wide requirements, or some other skillset desired, rather than not having enough experience in Elixir. ",1518842358.0
jb3689,I would not focus on learning Phoenix. If you know Rails then you should be able to pickup Phoenix easy enough and I don't think it's worth your time. You should focus on learning OTP and working with actors. That is where Elixir really blossoms. If you are only working in single-threaded web requests you're missing the best parts of Elixir and the BEAM,1521347191.0
zerexim,"Another interesting question (I think): regarding the pool of Elixir/Phoenix devs - will this market be ""flooded""/saturated with ex-Ruby/Rails devs converting to Elixir, or there still will be a place for ""others"", such as e.g. C++ devs willing to jump in?",1518550028.0
horvathlg,Thank you!,1518517902.0
GoldFat,"**Reported for referral link spam across multiple accounts.**

https://www.reddit.com/user/UnkindTaborp/submitted/

https://www.reddit.com/user/UnkindTabora/submitted/

https://www.reddit.com/user/UnkindTaboro/submitted/

https://www.reddit.com/user/unkindtabori/submitted/

https://www.reddit.com/user/unkindtabors/submitted/

https://www.reddit.com/user/UnkindTabory/submitted/

https://www.reddit.com/user/UnkindTabore/submitted/

https://www.reddit.com/user/fegertsa/submitted/

https://www.reddit.com/user/trukirukia/submitted/

https://www.reddit.com/user/buyuksd/submitted/

https://twitter.com/nerd2techdeals/ name changed to https://twitter.com/techdealsandmor

https://twitter.com/give2emsome name changed to https://twitter.com/give3emsome

https://twitter.com/GeekDailyDeal",1519166943.0
kevinero851,"How the thing works:

In ""main"" you can call or text your friends just as skype or icq.

when you are in the app, you need to put informations in your profile
about (age, gender, location, first language, second language, knowledge of).

""notifications"" is where you receive notifications !
it's a message.

""people"" is the list of all that are online


Lets say have a question about nebuchadnezzar.
You go to ""people"", use the filter and select ""knowledge of history""
after applying the filter, you find 32 000 matching people out of 500 000 online. 
you send a notification to them,
they will receive the notification and will reply to you, also by notification
or by instant message or by calling.
From the 32 000 , there will be like 15 that know the subject very well.

last step: call them and enjoy your instant answer !
",1518453482.0
kevinero851,"Let's say you did not understand a whole field (chemestry for example). Quora and google makes you search, search, post messages and wait a long time for a reply to give you a short text. Quora and google makes you read a ton of things. All by yourself. At the end of the week you did only a little bit of progress. This is long, lonely and painful. This program makes you call immediatly with skilled HUMANS. You just sit, relax and enjoy talking to them and will be dedicated to you to make you master the field. isn't it right ?",1518459380.0
TheSultanOfSwagger,"Lol, your just going to casually send a notification to 32k people? If that is the average number of people you notify each time and each person asks 1 question per day, then on average every user will receive 32k notifications per day. No one has time for that. ",1518462723.0
ealekx,If you like screencasts I've been working on https://elixircasts.io,1518449347.0
kwame-nkrumah,"I really enjoyed the Little Elixir and OTP guide book by Benjamin Tan Wei Hao. As an entry point its great because it shows what's special about elixir.  https://www.amazon.com/Little-Elixir-OTP-Guidebook/dp/1633430111

However, if you are coming from rails world and just want to dive into making a phoenix app, that could be a n easier approach. Ive been building a recipe website over past month or so and it's taught me a lot too.  I'm using almost none of the OTP stuff I learned to make Phoenix apps btw.",1518442051.0
jpscaletti2," is not only a new language, but it's  also very different than the current mainstream ones, because it’s based on another paradigm: not “object-oriented” but ”functional” instead. This means you’ll need to write code in much different way that before. As Jose Valim say: “It looks like Ruby, but it’s not Ruby at all”.

The documentation it's ok but very limited, so I would recommend going straight to the books. Luckily there are already several great books published. This is my *ordered* recommended list of books you should read to learn Elixir.


**1st.** [Learn Functional Programming with Elixir (by Ulisses Almeida)](https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir)

This first book is a great introduction of both Elixir and the functional paradigm. While does not covers all of what Elixir can do, it gives you enough base knowledge to start and not be surprised by the weird/awesome parts of the language (like the fact that “=” is now pattern matching, not assignment and the consequences of that).


**2nd.** [Programming Phoenix (by Chris McCord)](https://pragprog.com/book/phoenix/programming-phoenix)

Eager to do web programming in Elixir? This book will introduce you to the Phoenix Framework (http://phoenixframework.org), by its creator himself. If you’re not in hurry you might want to just skim it and return to it later.

Sadly, this book it’s about Phoenix 1.0, and currently the framework it’s in a trasition period. The new Phoenix 1.3 make some changes, specially to the structure of a new project and the philosophy behind it.

But don’t worry, the new version mantains (almost) backwards compatibility, so you can still use the commands and code from the book without problem.

The [new book](https://pragprog.com/book/phoenix13/programming-phoenix-1-3) is due in June if you really want to wait for it.


**3rd.** [What’s new in Ecto 2.1 (by the Plataformatec team)](http://blog.plataformatec.com.br/wp-content/uploads/2016/12/whats-new-in-ecto-2-0-1.pdf)

What’s this? A changelog? Not really… ok, maybe, but is also a book about the de-facto ORM (actually, just “RM”) of the Elixir ecosystem and one of the biggest component of Phoenix.

The changes in this second version of Ecto are so big — Phoenix 1.3 has changed as well because of it — that this book paint an almost complete picture of what Ecto can do.

Is not an introduction though, you should first read either its [documentation](https://hexdocs.pm/ecto/Ecto.html) or the chapter about in the Phoenix book.


**4th.** [Programming Elixir ≥ 1.6 (by Dave Thomas)](https://pragprog.com/book/elixir16/programming-elixir-1-6)

Last, but not least, this is a in-deep and wide introduction to Elixir. From the basis to the most advanced concepts like OTP and macros.

When you get ready to *really* know the language, this’ll be the book for you.

If the name of the author sounds familiar, it might be because he co-authored the amazing “The Pragmatic Programmer” and many Ruby books… He also runs The Pragmatic Bookshelf publishing company.",1518623796.0
nickjj_,"I think it depends on how much prior experience you have with web apps and how well you deal with conflict.

I'm in the same boat as you and I recently started by spending a little bit of time glancing https://elixir-lang.org/getting-started/introduction.html. Not in depth reading, but just skimming and jumping around on topics that look either completely foreign to me, or in need of review.

Then I just got a hello world Phoenix app up and running and started writing my app. I haven't gotten to the data layer yet, but with very little friction I have a bunch of custom routes, templates and views using various patterns taken from Phoenix's docs. Even managed to get set up with Webpack instead of Brunch.

My thought process is, being able to see the web app take form is motivating, and I need to learn how to do the ""web"" aspect of a Phoenix app no matter what. Next up is to start reviewing user authentication packages and get a handle on ecto (going to read the docs and look at as many examples as I can).

I just wish the Programming Phoenix 1.3 book was already out but Amazon says April 25th 2018. That is the only book I think I'd read. Mainly because it's written by the creators of Elixir / Phoenix, so it should be filled with a bunch of best practices.",1518439794.0
TheSultanOfSwagger,"I started with Phoenix and I really disliked it. I was new to web dev and trying to learn elixir, Phoenix, and web dev at the same time was frustrating. I tried again later, this time using just elixir to solve adventofcode problems. That was fun and I learned a lot really fast and since then I am built multiple larger applications in a professional setting. ",1518448493.0
a3th3rus,"Sorry to tell you that if you use the short version of child spec `{module, arg}`, the `start_link/1` of that module always gets called, and `arg` is passed to the parameter of `start_link/1` **as is**, so you can't use `{Task, [KVServer, :accept, [4040]]}` because the supervisor will call `Task.start_link([KVServer, :accept, [4040]])` (pay attention to the outermost brackets), and that will raise `badarg`.

If you want the supervisor to call `start_link` of other arity, or even other function, you have to use a map as the spec. For example

    def start(_type, _args) do
      children = [
        %{
          type: :worker,  # optional, defaults to `:worker`, the other value is `:supervisor`
          id: Task,  # optional, defaults to the module given by the `start` key (see below)
          start: {Task, :start_link, [KVServer, :accept, [4040]]},  # required, a module-function-args tuple
          restart: :permanent,  # optional, defaults to `:permanent`
          shutdown: 5000,  # optional, defaults to 5000 for worker, and :infinity for supervisor
        }
      ]

      opts = [strategy: :one_for_one, name: KVServer.Supervisor]
      Supervisor.start_link(children, opts)
    end

You can find the full documentation on [https://hexdocs.pm/elixir/Supervisor.html#module-child-specification](https://hexdocs.pm/elixir/Supervisor.html#module-child-specification)",1518392326.0
Chongulator,Authenticating by email is a better approach than some people realize. If a site allows password reset via email alone that is equivalent to email auth anyway.,1518331792.0
nickjj_,"Hi,

I'm guessing you store the token in a cookie to persist it in between requests in browsers right?

If so, does your library protect against CSRF attacks? There's a strategy called double submit verification* to help combat that.

*: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Double_Submit_Cookie",1518440490.0
ms86,It looks great. I was going to roll my own passwordless authentication for a side project but I'm going to use Veil instead,1518396265.0
nickjj_,"Another question:

I'm still new enough to Elixir where I'm still in the common package discovery phase.

Can you please explain why you chose Swoosh over Bamboo?

I only ask because I've seen Bamboo mentioned a bit more on Phoenix's site and it seems popular in some open source projects I've been looking at.

At a glance both packages appear to support SMTP, some form of local preview mode in a browser and have solid support for popular transaction email services through adapters.",1518659770.0
colonel_hahous,ELI5 - What’s a TCP based membership system? ,1518178221.0
aseigo,"Build badge says failing .. the code of conduct is longer than their docs. Great project, needs to lower the bar to getting onboard.",1518181080.0
mgwidmann,Could use a “this is how it’s different than distributed erlang and why it scales better” section... Looks like it also uses a gossip protocol so where’s the improved performance or scalability?,1518198773.0
vlatheimpaler,Some more info about this: https://arxiv.org/abs/1802.02652,1518198481.0
brzdev,My practice has been to store anything that’s not sensitive info within your config files to pull with Application.get... but if it’s any sensitive credentials just store it in your environment variables with Docker/K8s or something similar!,1518097851.0
Paradox,"With tools like [direnv](https://direnv.net/) around, anything truly secret gets shoved in a .envrc, and anything I wouldn't really care about losing goes in plain configs",1518145709.0
jake_morrison,"I am working on a big blog post on best practices for deploying apps: https://www.cogini.com/blog/best-practices-for-deploying-elixir-apps/

Generally speaking, it's best to use the VM config process (`Application.get_env/3`), as you should be using Erlang releases to deploy. If you have something like a listen port, then ENV vars are ok, but only for simple strings. Using [Conform](https://hexdocs.pm/conform/getting-started.html) is a good way to handle more complex config from env or local config files. ",1518096703.0
aseigo,"Some have already mentioned env vars, and that is what we are using at work as well for production configuration that needs to be per-node / configurable at runtime.

At startup we read in the env_vars and put them into app config with Application.put_env so that we don't see the env vars elsewhere in the code base, and we use REPLACE_OS_VARS for changes to vm.args.

This is necessary since we run our applications in clusters, so there is per-node configuration in addition to wanting some things to just be more flexible than release-compile-time values. Though, for some values, that's also fine.

It works well, and if you are using something like Docker and/or etcd then it becomes pretty trivial to get these envvars around.

Someone has already mentioned Conform, and it has a number of advantages. Namely: env vars are just strings at the end of the day. Complex data structures are pretty much a no-go unless you pull hacks like passing in json objects and parsing them (ugh). Even simple things like dates or IP addresses require validation in the env var approach because they are, at the end of the day, just strings. Lists or maps? Yeah .. no. So quite limiting. Conform does address these issues, and even adds some documentation and type checking.

However, if you want to change those values you're pretty much going to have to restart your application with either solution. That's not optimal.

I really rather like the idea of etcd, or even better zookeeper, though the latter is more complex than I'd like in a configuration solution. They provide a coordinated way to define and deliver configuration, and most importantly change and watch for changes on those values. I don't like their authentication models one bit, however; they are stuck in the UNIX TTY mindset, though zookeeper does better there offering the option for things like kereberos over sasl (though sasl leaves so much to be desired as well). So, better, but certainly not near perfect. They also mean deploying either a java or go application .. meh.

I would love a simpler, Elixir-native solution that provides something similar (though better than :) etcd/zookeeper, which can be embedded for easy usage (either for simple single-node deploys ala heroku, or for self-hosting configuration within a (possibly dynamic) cluster) or run as a separate service.

While what we are currently using with envvars is sufficient for the moment, I know it won't be in the long term as our clusters continue to grow. So I somehow fear that unless someone gets their first, we'll end up having to do something eventually.

For now .. envvars. :)",1518115392.0
KuinaKuen,"I realize this is an Elixir centric post but in Ruby/Rails please don’t use `ENV[name]`. If that variable doesn’t exist it will return `nil` which is probably not what is intended. Instead use `ENV.fetch` which throws an `IndexException` unless you explicitly provide a default value or block. 

It may be longer but it’s more explicit and will not silently continue and blow things up later.",1518139191.0
philly_fan_in_chi,"The important thing to realize is that Config is evaluated at compile time. Meaning if you build on build box, it has to have all the env vars etc. if you're doing it like that. We use releases with REPLACE_OS_VARS and Confex for dealing with our configs.

https://medium.com/nebo-15/runtime-configuration-migrations-and-deployment-for-elixir-applications-6295b892fa6a",1518101350.0
mr_luc,"Shameless plug, but it's relevant! 

[DeferredConfig](https://hex.pm/packages/deferred_config) lets you defer config to runtime. You make one call, to `DeferredConfig.populate(:my_app)` at app `start/2`, and it will do a replacing walk of your config for patterns that it recognizes, like 'system tuples' and more general 'module, function' tuples.

[Some examples and context/issues to consider in its docs](https://hexdocs.pm/deferred_config/readme.html). 

For instance, for configuring an IP address from ENV, using your own custom conversion function to go from string to IP tuple, and supporting a default value, you'd do the following:

    # lib/mine/ip.ex
    defmodule Mine.Ip do
      @doc "":inet uses `{0,0,0,0}` for ipv4 addrs""
      def str2ip(str) do
        case :inet_parse:address(str) do
          {:ok, ip = {_, _, _, _}} -> ip
          {:error, _}              -> nil
        end
      end
    end
    
    # config.exs 
    config :my_app,
      port: {:system, ""MY_IP"", {127,0,0,1}, {Mine.Ip, :str2ip}

And it could work for running from mix, with or without env vars specified, as well as when using releases with REPLACE_OS_VARS.

Helps avoid config woes when you start making releases and your `System.env()` calls now need to be moved out of config and into the app startup lifecycle, and tries to provide the same good Dev UX that people are used to in mix configs.",1518227187.0
horvathlg,"The question is not clear for me.

Do you have experience with HTML, CSS and a bit of Javascript?
Because that's all you need to achieve something like that.",1518081893.0
iKnowInterneteing,If you know a little html and css this course may help you with structuring your layout https://scrimba.com/g/gR8PTE,1518083453.0
nickjj_,"I would start by going to https://www.freecodecamp.org/ and taking their free HTML / CSS course. Click ""Map"" in their nav menu to see what you'll learn. Then feel free to explore their other front-end related content.",1518092973.0
jake_morrison,"This is a good introduction to HTML and CSS: https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189/ref=mt_paperback

I have successfully used it as the starting point for high school students and non-technical marketing people. ",1518093637.0
blazks,"""CSS Grid"" might be the one where you should look into. It seems like the perfect use case for your webapp

Here is my favourite presentation about CSS grid, its really easy to understand: https://www.youtube.com/watch?v=7kVeCqQCxlk

A quick game for learning CSS grid: http://cssgridgarden.com/",1518174834.0
888ROSSULBRICHT,"Well, I mean, with phoenix you can easily render a list of data. How would be possible to render a grid?",1518097648.0
sb8244,"Hey everyone, my goal for February is to write a blog post every day. I figure that doing it on a non-leap year is a good idea. The ideas are varied, but cross technical and human side of Elixir development.",1518062654.0
CodeTinkerer,"I wonder if it would have been helpful to have a Day 0 where you introduce yourself, your experience in software developments (years knowing this language or that), and the goals of the blog itself (maybe simply motivating yourself to keep learning and being a diary of sorts).

For example, being a relative newbie to Elixir, I'd say your level is way to advanced for me.  There are things, as a mature developer, that you take for granted (say, in the first blog, being able to control the version of Elixir you run, where a newbie would pick one and stick with that--undoubtedly, this is driven by something that has occurred while working with other languages where it's good practice to do that).

It's not a problem for a blog to appeal to advanced programmers, but it just means I have to look at the blog and see what's what.  Most blogs on Elixir are typically for someone doing a second or third (or tenth) language, who have certain expectations of what a language should look or behave like.   So, it's not unexpected that your blog is this way.  Just an observation.",1518105559.0
danimoth2,This is awesome man. I just have a few things to do but I'll be taking a few weeks to learn Elixir. Currently reading all your entries :),1518523312.0
aseigo,"It seems to wrap a c library which is included in its repo. Writing bindings for the BEAM VM, known as nifs, is pretty straight forward. You could write a nif for just your one function, even.

http://erlang.org/doc/tutorial/nif.html",1517839752.0
gesjeremie,This kind of library doesn't exist in the current eco-system but it seems possible to call some python (pyephem) from elixir: https://hackernoon.com/calling-python-from-elixir-erlport-vs-thrift-be75073b6536,1517839350.0
emmanuelgoldstn,"I’ve got some calculations in my satelliteEx library. It’s not specifically a generic library for these calculations but it may have something you can use. 

https://github.com/Matt-Hornsby/satelliteEx",1517884660.0
Hauleth,"Elixir isn’t good solution for CPU heavy computing. It is rather for IO heavy computing, where processes are short lived tasks.

In your case I would make server in Python that would be connected to Elixir application which would handle IO, caching, etc. and your old application would handle heavy computing as it is doing now. ",1517841695.0
freester101,"what about on the client? Imo a more robust solution is to (outlined here: https://elixirforum.com/t/proper-way-to-close-channel-from-the-server-side/10955 ):


in your service code:


    MyApp.Endpoint.broadcast(""topic"", ""end_session"", %{})

Then in the channel push an end session message to the client and terminate on the server by returning a :stop
    
    def handle_info(""end_session"", _params, socket) do
        Logger.debug(""Ending session..."")
        push socket, ""end_session"", %{}
        {:stop, :normal, socket}
      end

on the client:


    channel.on(""end_session"", payload => {
        console.log(""terminating session"")
        channel.leave()
    })
    channel.onClose( () => console.log(""channel has been closed"") )

",1517688096.0
,[deleted],1517691267.0
terminatorjakub,"The value that was assigned to list1 can never change (the [3, 2, 1] list), but what variable list1 points to CAN change. So when you assign [2, 1, 0] to list1, a new list [2, 1, 0] is created and assigned to list1, but the old one remains untouched in memory and thus can be used to construct the [4, 3, 2, 1] list.",1517666844.0
philly_fan_in_chi,"The important concept here is ""identity"" vs ""value"". In Erlang, for example, you cannot reassign the binding of `list1`, it'll yell at you as it . Elixir decided that you can rebind the name of `list1` to the new list, but the value of `[4 | [3, 2, 1]]` remains untouched. If we then rebind `list2` to `:foo`, the VM can recognize that nothing is pointing to that anymore and reclaim that memory. Another important concept here is called ""structural sharing"", which is used to great effect in functional data structures for time and space optimizations.",1517674120.0
Hauleth,"To easy it for you, the syntax `[3, 2, 1]` is equivalent to `[3 | [2 | [1 | []]]]`. Fun fact you can have something like `[2 | 1]` which is called improper list (root of the list isn’t empty list). ",1517676639.0
jake_morrison,"It may help for you to look at Erlang. Elixir's assignments are just syntactic sugar. 

In Erlang, variables can only be bound to a value once. After that, assignment is actually a pattern matching assertion. 

So you could not re-assign what `list1` points to. Here is the equivalent in the Erlang shell:

    $ erl
    Erlang/OTP 20 [erts-9.1] [source] [64-bit] [smp:4:4] 
    [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false]

    Eshell V9.1  (abort with ^G)
    1> List1 = [ 3, 2, 1 ].
    [3,2,1]
    2> List2 = [ 4 | List1 ].
    [4,3,2,1]
    3> List1 = [2, 1, 0].
    ** exception error: no match of right hand side value [2,1,0]
    4> List1 = [ 3, 2, 1 ].
    [3,2,1]
    5> [First | Rest] = List1.
    [3,2,1]
    6> First.
    3

At line 3, we try to bind `List1`, but it fails. On line 4, we assert that `List1` equals the original list, and it succeeds. You can also use this to do destructing of values, as shown on 5. 

If you are interested in Erlang, I recommend [Learn You Some Erlang for great good!](http://learnyousomeerlang.com/content). It's great, and free. ",1518097725.0
iStefo,"I think it doesn’t hurt to have one more post explaining this topic. A few days ago, I had the same problem and knowing this blog post would have helped me save some time.",1518040992.0
7thDragon,As a complete docker and postgres noob I've spent some hours today trying to achieve this to no avail. And your solution works perfectly! Thank you! ,1518937831.0
,"Ok so how many of these ""mount the local file system"" articles do we need? This does nothing but explain the obvious and rehash the official docs",1517631661.0
phialx,"Thanks this is just the stack that I was looking for! Just started the React Native part, but so far it's very good. :)",1518238234.0
cogle9469,I have not personally read this book; however just recently there was a book released that deals with this [topic](https://pragprog.com/book/wwgraphql/craft-graphql-apis-in-elixir-with-absinthe).,1517514615.0
brodeuralexis,"I would try using a list for the deck: [4, 4, 4, 4, 4, 4, 4, 4, 4, 16]
`put_elem` will always copy the tuple.

A `for` as an argument to`Enum.sum` is a bad idea, as it O(2n) performant.  Use `Enum.reduce(deck, fn (card, acc) -> ... end)`.

Optimizing `Outcomes.partitions/2` to be tail recursive would also help. ",1517442149.0
help_computar,"Here is my stab at it.

I added a parallel version as well.

https://gist.github.com/elbow-jason/987470da69f2d3e9d9dd2de59e768a8a",1518068339.0
ABC_AlwaysBeCoding,"You're writing procedural/object-oriented/mutable code in a functional/immutable language.

The ideal way to handle this would be with a `List`, but you have a lot of in-place updating of list elements going on, which will be expensive.

I'm going to try covering this with a test and then refactoring it into more functional code so you know what I'm talking about",1518034376.0
ABC_AlwaysBeCoding,"OK so I tried to cover this with some kind of test and then rewrite into something functional and only succeeded in making it slower... I know there must be a way to update the Nth element of a list without re-navigating the whole list (which would make it take the same time or be faster) but I ran out of time, here's my work so far:

https://gist.github.com/pmarreck/29e2179ccc1d47e74518d5ce5a3937bb",1518052002.0
cthree87,"To me, when several tasks can run at the same time and don’t require synchronization to finish they are parallel. If they can run at the same time but require synchronization before any one completes they are concurrent. 

Is that semi-accurate?",1517438847.0
CodeTinkerer,"The main problem I have with these curated results is I wonder if the person who put the list seriously went through the entire material, or just found a book, wrote a quick summary, and moved on.  And for the material that is referenced, I wonder if the author ever used the book in a course with actual students (most books aren't, to my knowledge, written this way).",1517419937.0
adolfo2582,"Find more here - https://hackr.io/tutorials/learn-elixir

",1519331126.0
_slashdotdash,"If you enjoyed Command-Query separation (CQS), you'll love Command Query Responsibility Segregation (CQRS) [1].

[1] https://github.com/commanded/commanded",1517263781.0
-Ch4s3-,"If anyone has any questions or comments, let me know and I’m happy to reply here.",1517257173.0
maarten-van-vliet,"Hi, saw you linking to my post. Glad you found it useful, your article makes for a nice addition. I'll link to it for people who want to do more with http2",1517387144.0
Boris-B,"This package seems to be super restrictive. From what I've read of the doc, I see that you force the users to use:

-  Postgres
-  Ecto
-  A very specific users table schema
-  Mailgun

To me an authentication / authorization lib should focus on authentication and authorization. It should not care about my database, stack, SMTP provider or db schema.

Look at [passport](http://www.passportjs.org/) for node. It's super simple, focuses on only authentication / authorization and doesn't care about my stack. The only thing it requires is the use of express.",1517122140.0
mbuhot,"Please put a license file in the repo, and consider using an MIT style license.",1517132986.0
readk,Thanks for taking this on. I'm not using elixir right now but last time I tried building a quick Phoenix app this really frustrated me too. It's 2018 and putting auth onto an app should take minutes not hours.,1517115285.0
pdoggerton,Keep in mind that communication between nodes is unencrypted by default. I would recommend not doing this unless you are sure about what data may be exposing,1516860812.0
chulkilee,"Any articles introducing remote shell should link this article: https://broot.ca/erlang-remsh-is-dangerous

In short you are not connecting to server as client - instead your laptop participates as new node, which exposes your laptop to any code in the cluster. The article shows working code to steal private keys on your laptop.

",1517726867.0
quaunaut,"This is a subreddit for the Elixir programming language, not the crypto coin.",1516820322.0
mrleeio,"You can pass a few options into the phx.new command to remove the bloat for API only projects.  Namely:

—no-brunch
—no-html

This blog post goes into a few more details about how to strip more out of a base install based on your requirements.

http://cloudless.studio/articles/45-bootstrapping-api-project-with-phoenix-1-3

Note: it’s not my blog.

Phoenix, in my opinion, can be a great tool for API only projects.",1516806580.0
quaunaut,"Phoenix views are little more than scoped functions for rendering, and often are where you put your maps that will be converted to json. So unless you're going the Absinthe route, you can still use those. Phoenix templates aren't very hefty either and are regularly ignored for APIs.

I highly recommend going with Phoenix because of all the free help it provides, but if you're really set against it, Plug alone is the closest to Sinatra you'll get.",1516806430.0
prh8,"If you're coming from a Ruby background, Phoenix is not bloated in the way Rails is. Most of Phoenix is just a thin layer on top of Plug. It's perfectly fine for APIs, and you can cut it down more with the generator options.",1516811509.0
firl,"I would start with Phoenix. Then I would use JWT with joken for oauth. 

As for what to write the API in ? Json/rest? Phoenix is great for that. 

However I am a fan of graphql and highly recommend absinthe. 

",1516827445.0
crowdhailer,"Because I think that phoenix (and plug) are too complicated. I have been working on raxx. https://github.com/crowdhailer/raxx

Been working of it for 18 months and it has some production deployments. For websocket endpoints and some API's. It has less of an ecosystem to plug but it is very simple.

p.s. The complexity in plug/phoenix is less in using them and more in their implementation. There are a lot of macros to understand when you dive into it",1517387528.0
Nicd,"Finishing touches on my coding statistics service's 2.0 release. Added releases, GraphQL (using Absinthe) and migrated to Phoenix 1.3. :)",1516798525.0
ck3g,"I've started to learn Elixir and Phoneix and blogging about it. Some of you may have seen me here because am submitting links to my posts here. 

At the moment as a working project, I've chosen the Chat Application. Not a unique app, but it should help me to cover a lot of different topics.

If you are interested, you can it here http://whatdidilearn.info/",1516898869.0
dipittydoop,"Working through https://leanpub.com/buildingconduit. It's only 30% complete, but it's really helping me figure out a work-flow for developing event sourced applications. The abstract concepts of CQRS/Event-Sourcing aren't that hard, but having a step-by-step resource for what questions to ask at what step in a development work-flow is something I've been having trouble finding for Elixir event-sourcing.",1517071192.0
ThermalCube,"ExPress, a CMS alternative to wordpress",1516896317.0
jordiee,"https://github.com/jpiepkow/accesspass

An opinionated full authentication solution. Spent quite a bit of time on the hex docs now writing tests.",1517121836.0
code-shoily,"Fleet Management System. Previously written in Django, started moving it piece by piece to Phoenix (I had rewritten the GPS Server with Elixir few months ago).

So far the progress is like,
i) Moved in the front-end app (previously written in create react app and served separately, into the asset pipeline, it was surprisingly straight-forward)
ii) I had to keep the Django auth, so the authentication database is there, Guardian knows about it now.
iii) Refactored a major portion of the backend API (REST; sans Reporting).",1518459529.0
Psychocist,"An amazing app? Nope.. I'm working on my first boring business-oriented application (Kube/Elixir/Phoenix) to help me escape the clutches of contracting so I can work on my own stuff full-time.

Moving over from Rails and having lots of fun!",1518798431.0
emjrdev,An IoT command and control server w/VerneMQ. ,1516778485.0
Trevoke,Building an ECS (entity-component-system) framework.,1516798996.0
jhartwell,"[ExMetra](https://github.com/jhartwell/ExMetra), which is a library for interacting with Chicago's Metra REST API. Started it this month and am slowly adding more features and playing with macros as well (by adding a query language of sorts)",1516833446.0
emmanuelgoldstn,"Working on an APRS-IS app to allow ham radio operators to interact with/easily write apps that interact with the APRS protocol. Send messages to your buddy’s radio. Get messages when you turn your radio on, etc. ",1516850311.0
notduncansmith,Phoenix/Postgres-powered event store (and associated consumer services),1517378096.0
Im__Joseph,I'm working on various Phoenix apps and I just published my first Hex package (hopefully first of many) https://hex.pm/packages/find_type,1517585502.0
nickjj_,Slowly but surely working on creating a video course hosting platform using Phoenix so that I can self host my own developer related courses. I'm learning Elixir / Phoenix along the way from ground 0. Good times!,1518095248.0
sb8244,"I'm working on a blog post daily this month, as a personal goal. However, I'm working with my team at work to get 2 different elixir services stood up.

For my blog, the technical content I'm most excited for is going over how to build a distributed choke point.",1518123202.0
forfunc,Telegram bot for cryptocurrency's ,1517307934.0
codergamergeekyguy,"It depends on what you're trying to get out of static typing. There are two major reasons to select between a statically-typed language and a dynamically-typed one:

1. Catching more logic errors at compile time rather than run time
1. Generating more efficient code because the compiler has more information about the data being worked on

To my understanding, typespecs are intended to address problem 1 but not problem 2.

Typespecs, properly applied and rigorously tested, should be able to catch all of the same kinds of errors that one would catch at compile time in most other statically-typed languages. For example, trying to hand an integer to a function expecting a string. Whether or not it will catch all of the same errors that a specific language's type system would is highly dependent on the language, the compiler toolchain, the rigorousness of the type system, etc. I would expect Haskell to be able to have better compile-time checking than Elixir's typespects. I would expect most C/C++ code to have slightly worse compile-time type checking.

If you're looking for faster generated code, I don't believe that typespecs are going to do anything for you. To my understanding, the code generated with and without typespecs is identical.

So, whether typespecs are ""good enough"" depends on your needs.",1516762701.0
ABC_AlwaysBeCoding,My impression of Dialyzer after playing with it a bit is that it is (at least relative to the Elixir ecosystem) *extremely* unpolished (the signal/noise ratio is low) and could probably use a total rewrite in Elixir that comes with Elixir-style friendly warning messages.,1516990820.0
get-finch,"They are pretty good, and if you use them smartly they will catch a lot of bugs. However they are not perfect and will not catch everything. In addition dialyzer errors are often horrible. 
",1516860803.0
mbuhot,"Behaviours and typespecs are certainly valuable. Even if the success typing system allows some bugs to slip through, they serve as a machine checked documentation for future devs :)",1516768345.0
savish,There’s also the IDE/text editor benefits if you happen to use one with support for Elixir. ,1516791234.0
Bstochastic,I miss static types every day.,1516889824.0
Findlaech,"I use typespecs and guards (such as `is_integer`, `is_atom`…) to have some compile-time (dialyzer) and runtime (function clauses) type guarantees.",1517066175.0
Nixonite,"I kept seeing Grindr jobs on indeed when searching for Erlang, but after seeing that blog post, the application of erlang looks pretty boring. ",1516731250.0
meta_stable,This is great news! I don't personally use Google App Engine but more attention to Elixir is always a good thing!,1516672469.0
aussiegeek,"Had a go with the sample app.

It was straightforward, which was great, but takes quite a while to deploy.

Also happy that this is available in Australia",1516707177.0
ClickHereForBacardi,Are they trying to do OO in the example on that page?,1516712207.0
thibaut_barrere,This is great news. Did anyone figure out if there's a way to achieve hot-reloading there? I'm in particular interested in seeing if I could keep (thousands of) client websocket connections (e.g. listening to slack channels for many teams) alive across deploys for a specific type of data pipeline.,1516712227.0
alchemistcamp,"Googe Cloud offferings have been getting more appealing due to Firebase, so this is good news.",1516712939.0
Paradox,If only I could use Elixir on Cloud Functions,1516733281.0
firl,Looks nice so far. What's the use case that drove you to start working on it? ,1516577651.0
Findlaech,Why would it?,1516574818.0
swiftsubetei,"Elixir is already the present for a lot of people.  It's amazing the amount you can already do with it and do efficiently.
Some of the larger companies such as google have been releasing tooling for it so potentially it could hit critical mass to go more mainstream than it is.  I'd say as it's a functional language and slightly higher iq solution than many of it's competitive solutions.. it may never be huge but it will never have to be to be successful.  It's possible too that since it's syntax and sugar are some of the best in the functional world that it will be somewhat of a gateway and be of enough immediate use to get more adherants than I currently predict.

But I've got tons done in side projects in 2017 and am only ramping up more for 2018 plus have successfully started using it at work.  I'm far from alone in that and I think any ground it gains at the very least it won't be giving it up.",1516667696.0
Linupe," I think you are in the wrong sub... this is about the programming language, NOT the crypto coin.

Moon, lambo and stuff. ",1516606636.0
RAcast,"Elixir/Erlang is underutilized as a distributed computing solution. Given all of the hype and frustration around cryptocurrencies that can handle only 5 or 10 transactions per seconds, expect an explosion in interest and investment in Elixir as the market matures.",1516716911.0
GroceryBagHead,"I had it out few months back for Bootstrap 4 beta. There were some changes for the final Bootstrap that I needed to implement. Mostly checkboxes and radio buttons are rendered differently so I had to rebuild that.

Good news that now there's `checkboxes` function that can render list of checkboxes (something that doesn't come with Phoenix out of the box).

Give it a try if you got Phoenix app that needs pretty looking forms. 

Feedback on the code would be awesome too as I'm still learning (Map doesn't retain insertion order like in Ruby!)",1516515070.0
dj_goku,"https://hexdocs.pm/elixir/v1.6/Port.html

Look up using a port. I have used this before and is pretty easy to do. 

No experience but there is this too: http://pyrlang.readthedocs.io/en/latest/",1516473322.0
mgwidmann,Of course there’s always rebuilding the python application in Elixir... ,1516479376.0
thibaut_barrere,"There are various ways to achieve that.

First you can have one application act like a proxy to the second (as described in various places, e.g. [here](https://elixirforum.com/t/migrating-from-rails-to-elixir-bit-by-bit/8568/3)):

* Phoenix in front: https://blog.fourk.io/replace-your-production-api-with-elixir-today-4426a890364213
* Rails (or Django) in front: https://littlelines.com/blog/2016/09/27/using-phoenix-with-a-legagy-rails-app

This can help: https://github.com/poteto/terraform

Another option is to use background jobs in a polyglot fashion, where the part creating the jobs & using their results is in a different tech from the one used in your workers. For that you can check out Faktory (https://github.com/contribsys/faktory), where someone created a Python worker (https://github.com/contribsys/faktory/wiki/Related-Projects).

Note that you could also use [exq](https://github.com/akira/exq#using-alongside-sidekiq--resque) for something in that area too.

I personally love polyglot workers & apps, they have a lot of great things to bring (it's not uncommon to see Rails apps in the front, fast & easy to create with a tons of gems, then Elixir workers in the background). I've also used workers to handle Windows-only processing (things involving .Net or Sharepoint for instance), with a Rails ubuntu front-end.

EDIT: you can also use Elixir to drive non-Elixir processes, using a library like [porcelain](https://github.com/alco/porcelain).

Hope this helps!",1516543034.0
FireThestral,"This kinda depends on what you are trying to do in the back end.

Do you want Django to serve the HTML and JSON API with Elixir doing the back end work? You may want a queueing system [like RabbitMQ](https://www.rabbitmq.com/). Have Django put things in the queue and Elixir read from it.

Also, everyone and thier cat has a [Redis](https://redis.io/) based queuing system. You may find some that are compatible between languages.

But, generally, I'd stay away from doing this. If you're just learning, then that's alright. But mixing like this would be a good deal more difficult to manage in a production setting.

One more thing, I see that you are trying to learn Django. I'd recommend fully diving into it's ecosystem instead of trying to work Elixir in like this. Investigate each ecosystem and learn from them. Both have different opinions and I think it would be most beneficial to see from both sides before trying to mix and match.",1516566219.0
joltting,"I like how the rails console does it. Puts long lists into a less view, for which you can inspect or backout of. Would be nice to see something similar.",1516915168.0
into_lexicons,"i use elixir with dockerized distillery releases at work. i don't think it has nearly as many benefits with a BEAM server as it does with other popular application architectures that have more off-the-shelf components like redis, postgres, etc. the benefit of using it at my work really don't have anything to do with docker or the BEAM, it just allows the same infrastructure / operations department to support deployments in many different languages the same way. if i were only shipping BEAM apps, i don't think i would go with a docker-based solution.",1516403384.0
firl,"1. Why is your container restarting?
with the Beam it shouldn't be restarting ever really. ( more on this below )
2. I use kubernetes. I've used swarm, meso, and a few others. k8s is the best and even docker is going to it. 

additional ( warning, this will be a case for docker ):

A lot of Elixir community comes from the rails/physical server world it seems like. Stand up a server bring up erlang and it just stays up bulletproof for years.

Hot code reloading is awesome. However I think before deciding if you are using docker for something or not, you should really figure out your target.

Are you trying to deploy to a Raspberry pi? Have a physical server you need to be hosted on that doesn't support docker or is an older version of linux? Cool beans, docker probably shouldn't be on your radar. Supporting kernel patches and installing docker then needs to become a part of your support pattern.

You want to have a package that is delivered to customers that run x,y,z that is on a private network with no internet connectivity? rpm/deb might be better

But lets say you want to deploy a web app, that you want to have people to be able to easily integrate with you in a consistent pattern.
o

Docker fits great. You create images that can be delivered to the people you are integrating with. ( docker compose, postgres,redis etc )

Now when you go to deploy you get to deploy the same version you've already been integrating with the entire time. The same exact image. For me this is invaluable.

With k8s you can then have it setup as a deployment and x amount of replicas. Meaning you can specify the node count. Which then means you can also do rolling updates. Which then means you have solved the hot code reloading paradigm without it needing to be a part of the beam VM. 

( this point can be argued for other dev ops pattern besides docker ) 
Lets say you want to setup a SSL terminated nginx proxy in front of your services so you can LB between them? It's handled at the k8s layer pointing to your docker services. 
Lets say you don't want to have to worry about the security side of the hosts, patching etc. Setup a pattern to delete the nodes and allow them to auto heal / upgrade. 

Want to have a custom access point locked down by a client ssl cert? Use nginx instead of baking it into elixir. You can set it up.

You can even setup an ingress controller to split up requests and proxy properly so that, again, elixir is just focused on service side. 



TLDR: Docker is awesome but it's not for some situations. 










",1516424745.0
sb8244,"1) I think you're onto something here, but I don't think it's related to BEAM vs Container restart. For one, there should be no reason that your container must restart unless certain conditions are met (health checks). 

More importantly, though, is that Elixir behaves the same way WRT process crashing in standalone as in Docker. Here, for example, a process crash would be picked up by the application supervisor and restart. A full erlang VM crash would be restarted as the process that Docker was mounted to crashed. A VM crash in your standalone install will need to be restarted by something else as well.

I do think that you raise an important point here, though, which is that DETS will not work correctly without persistent disk, which is typically NOT mounted (but could be) to Docker. So you can get persistent disk, but by default don't have it, and you can't have it in PaaS like Heroku. There is nothing stopping you from using ETS though, because it's fully memory based.

2) Hot code reloading is definitely possible in Docker shipped apps, but you're fighting 2 different paradigms. The erlang paradigm is ""hot code reload"" and the docker paradigm is ""cattle vs pets"". ""Your application should be restartable to a healthy state because a good app can do that"" might be a Docker way of thought. 

I've come to accept that I probably don't need hot reloading for my use cases. As such, I just re-deploy containers in a rolling fashion on deploy. The code ships without downtime (what I care about specifically).",1516431947.0
k-selectride,"1. A reasonable apprehension, but I'm not sure why a container would be restarted/redeployed any more than BEAM or a physical server/vps would be restarted.

2. I use kubernetes + docker at my job. If you're worried about the data stored in memory then consider blue-green deployment. Kubernetes supports rolling upgrades which might be what you want, but I'm not sure if they deploy the new container and immediately trash the old one, vs removing the old one from the load balancer but allowing it to complete requests.",1516384268.0
,[deleted],1516312001.0
yeyemelocotom,code formatter! Nice! ,1516219031.0
jhartwell,defguard seems nice as it eliminates the need for a macro.,1516223850.0
jhartwell,What is proper ettiquette when running open source projects? Is it acceptable to run the latest version of Elixir immediately or should there be a delay? I'm on 1.5 for both of my projects and would love to switch to 1.6 but don't want to screw over anybody using the projects.,1516289392.0
Ramirka,so what? I'm doing pretty well using Elixir 1.4,1516264070.0
acconrad,I'm surprised they didn't mention the best thing about Ecto is the fact you can write [composable queries](https://blog.drewolson.org/composable-queries-ecto/),1516216893.0
Hauleth,For me the most important thing is that using multiple repos is dumb easy. Also seamless usage of DB views is big plus for me (in my current project I needed to use hell lot of materialized views for performance purposes). ,1516790347.0
greysteil,"Added Elixir support to Dependabot today - would love some beta testers if anyone wants to give it a try! It's totally free for open source and personal accounts, and always will be :-)",1516196621.0
tylerpachal,Does anyone have an opinion on Ace vs Cowboy?  Cowboy has worked well for my team so far for these kinds of projects so far.,1516140907.0
Theemuts,Why are you using a GenServer?,1516115916.0
Ebtoulson,"> Skooma was developed to be used to describe and validate the incoming and outgoing data structures from a REST API

I've been doing this with ecto schemas in several of my projects. In your opinion why should I use this over ecto?",1516075470.0
Bstochastic,Skooma is dangerous. ,1516063515.0
bcoop713,"About a month ago I created a post asking for feedback on the MVP of this library. This is the result of all the feedback, thanks everyone!",1516058817.0
derekkraan,It sounds like you're about to start one ;),1516051686.0
,"Elixir wiki page[1] lists one: https://www.meetup.com/Elixirlang-Delhi-NCR/

[1]https://github.com/elixir-lang/elixir/wiki/Meetups",1516076774.0
asonge,"Postgresql doesn't support array foreign keys. You need a many-to-many relationship. They're supported by Ecto, so you should be able to use them similarly to one-to-many relationships.",1515814133.0
JickRamesMitch,"I'm very new to elixir but hopefully this helps: on mobile and syntax is probably all wrong but it should point you there at least.

Don't repeat the generators. Check the migration file then use mix ecto.reset to restart your database and re do all the migrations.

In your migration for create recipe you should have something like

add cookbook_id: references(cookbook) 

Then in your recipe schema you have
 belongs_to: Myapp.Project.Cookbook

Now on the cookbook schema you add has_many: recipe, Myapp.Project.Recipe

Your relationship is now defined.

Context don't really get in the way when you are defining your schema from my experience. Just when you want to interract with them

With no context you would say 

Myapp.Cookbook.get_cookbook(Id)

If you have them in a context you would say
Myapp.Context.get_cookbook(id)

Or

Myapp.Context.get_recipe(id)",1516131099.0
purephase,"Also worth pointing out that this is still on sale too:
[The Complete Elixir and Phoenix Bootcamp and Tutorial](https://www.udemy.com/the-complete-elixir-and-phoenix-bootcamp-and-tutorial/)

Same price!",1515769891.0
clunt_eastwood,not commenting about their content but those udemy sales are more a marketing ploy than a real sale since they often reset at the end of the sale period with a similar markdown.,1515778634.0
CodeTinkerer,"If you miss the deal, Udemy frequently has sales.  Some they advertise more than others (like the current sale is advertised).  Look for Udemy coupons, and you can frequently get any course for $10.",1515771083.0
pbogut,Did they ever sell anything for more than a 10? Neverending promo.,1515791772.0
FirewallXIII,"Ruby/Rails dev here, is this worth it for an experienced programmer wanting to branch out?",1515790352.0
au5lander,Says it was last updates 2/2016.,1515814907.0
simonced,"Maybe you could have passed the timestamp in the functions that are using the timestamp() function directly?

This way you can force any time in your tests.

Maybe this involves too much refactoring...",1515727192.0
bostonvaulter,"Have you looked at the Mox library? It would allow you to run the tests concurrently.

https://github.com/plataformatec/mox",1515786855.0
non-private,"I agree with @simonced: if `verify_expiration` would take the time to test against as argument (instead of calling `current_timestamp`), you can easily test it; you don't want to or need to test if the caller uses the current system time, do you? You could provide a convenience function `verify_expiration_with_now` that just calls `verify_expiration(..., current_timestamp)` which you don't need to test.

Even if you decide to mock time in your tests:

- your template says `# travel in time`: I'd suggest you provide a function `travel_in_time`, then :-) Then, you can call `Multipster.CurrentTime.Mock.travel_in_time(31 * 60)` instead of `Multipster.CurrentTime.Mock.freeze(:os.system_time(:second) + 31 * 60)`

- You assume your call to `freeze` will happen right away after you've encoded the token, which might not be the case under heavy load (many tests running in parallel?). Usually, when you test against time, you want to freeze the starting time, too.

- I don't think using `on_exit` is a good idea: it's easily forgotten, which will lead to difficult bug-hunting; instead, I'd suggest using something like `with_this_current_time(call_that_function)` which uses an `after` clause to ""unfreeze"" the time",1515751167.0
non-private,In related news: the fluxcapacitor: https://idea.popcount.org/2013-07-19-how-to-sleep-a-million-years/,1515781587.0
mbuhot,"I like to push evaluating the current time to the boundary of the system. Eg you can create a simple `plug` module to store it in `Conn.assigns`, then pass it as an explicit parameter from there.

One issue with mocking `current_time` is that the code under test will all see a consistent value of time even if `current_time` is called multiple times during execution, which might mask subtle bugs.",1515876161.0
e456123789,"There are some things you could do:

1. Streams are not going to be faster unless you are under memory pressure. Plus you are leveraging function composition, laziness and all of that in the Elixir one and not in the Ruby one. You should do an IO.gets and then reduce over IO.stream (similar to Ruby)

2. Remember the string module works at the character level in Elixir but not in Ruby. For a trie, you probably care about the bytes only. Plus you should leverage pattern matching more. Instead of `split_at`, do `<<first_char, rest::binary>> = word` and use the first_char (an integer) as key. Using integers as keys should speed up the Ruby code too

3. Use mix profile.fprof to profile

You still may not be able to match Ruby's performance because Ruby is mutable. Elixir being immutable means operations like building the trie above on a hot path will be slower.

One other idea altogether is to use a flat map instead of nested ones. So indexing ""hack"" means you have `%{""h"" => 1, ""ha"" => 1, ""hac"" => 1, ...}`. While it uses more memory, it can be built using ETS in Elixir (a mutable storage).",1515709202.0
kapowza681,"Why wouldn’t you just keep the contacts in a list and then use recursion / Enum.filer to find contacts with the proper prefix using String.starts_with? Granted, I’m looking at this on mobile but it seems way over engineered. ",1515710638.0
mbakerpdx,"I gave this a shot out of curiosity. I found this solution to benchmark within a couple hundred milliseconds of ruby with larger inputs (>100,000 lines).

Some things that came up:

 * Used ETS
 * Avoided string operations, assumed 1 char == 1 byte
 * Avoided operations that would allocate a new data structure if I thought I could help it

I'm sure I probably missed stuff, but the tests passed and it got pretty close! Plus it was fun :)

All this said, Ruby is still faster, and arguably the better candidate for this kind of problem. I don't think I'd reach for Elixir as my first instinct.

    defmodule Trie do
      @table :trie
    
      def run() do
        :ets.new(@table, [:set, :protected, :named_table])
    
        IO.read(:stdio, :line)
        |> String.trim()
        |> String.to_integer()
        |> read_commands
      end
    
      def read_commands(count) do
        for _ <- 1..count do
          IO.read(:stdio, :line)
          |> String.trim()
          |> interpret_command()
        end
      end
    
      def interpret_command(<<""add "", word::binary>>) do
        word
        |> bin_reverse
        |> insert_fragments
      end
    
      def interpret_command(<<""find "", word::binary>>) do
        :ets.lookup(@table, word |> bin_reverse)
        |> case do
          [] -> 0
          [{_, count}] -> count
        end
        |> IO.puts()
      end
    
      def insert_fragments(<<>>), do: nil
    
      def insert_fragments(<<_::size(8), rest::binary>> = fragment) do
        :ets.update_counter(@table, fragment, 1, {1, 0})
        insert_fragments(rest)
      end
    
      def bin_reverse(binary) do
        binary |> :binary.bin_to_list() |> Enum.reverse() |> :binary.list_to_bin()
      end
    end
    
    Trie.run()",1515837638.0
bugant,Anyone have any expirience with one of that platforms?,1515659706.0
jake_morrison,"I am working on a comprehensive howto: https://www.cogini.com/blog/best-practices-for-deploying-elixir-apps/ 

It's still a work of in progress, but it is pretty far along and should help. My goal is to make a template (https://github.com/cogini/elixir-deploy-template) which puts all the pieces together. That means open sourcing a lot of the components that we are using in our projects, which is taking some time.

Feel free to ask me if you have any questions. ",1515641851.0
sb8244,"Are you looking for docker advice or just a standard Linux install?

Aside from the fact that this installs to Google, the docker setup works great https://cloud.google.com/community/tutorials/elixir-phoenix-on-kubernetes-google-container-engine. I didn't use this when I started (wish I knew about it) but pieced together a docker file from random blog posts and messing around with distillery.

If I was installing this on a server that I didn't intend to mess with much, I'd probably manually install elixir and either run it via a release or mix. I'd use upstart or something similar to monitor the process existing.
",1515644438.0
k-selectride,"Use distillery, when you create your release it generates a .tar.gz with all the files you need along with bash scripts to launch it in 3 different modes. The release packages up the runtime so you don't need any external dependencies. You just need to build it in the same environment you'll be running on, ie ubuntu.",1515651223.0
Mintcore,"I'm using a simple bash-script to help me deploy

(https://gist.github.com/mintcore/e59f2c3851b5ce23e6d1a0c00da3851c) It is somewhat dependent on the `mix app.version` (which you can get from https://mintcore.se/blog/2017/11/getting-elixir-app-version-from-command-line) task and the project is set up as a service which have the upgrade method (I'm not sure whether that comes as standard or from distillery)

I should probably add that i ssh into my production server and execute this script whenever I want to deploy. It's far from good practice but it gets the job done now when i'm the sole developer",1515656510.0
GroceryBagHead,"I have complete phoenix app and ansible provisioning for digital ocean. You can adapt it for your needs but it should work out the box

- app: https://github.com/GBH/loaded.bike
- ansible: https://github.com/GBH/loaded.bike-provisioning

Deployment is a bit of a pain, for sure. Took me several days to get everything working.",1515697376.0
jschepmans,This worked for me: https://www.digitalocean.com/community/tutorials/how-to-automate-elixir-phoenix-deployment-with-distillery-and-edeliver-on-ubuntu-16-04,1515663342.0
Secretmapper,"I was SO confused by this as well, because there are a lot of optimisations phoenix can do (like live updates)

What worked best for me when deploying http://alttracker.com was to use dokku. [Dokku](https://github.com/dokku/dokku) is essentially an open source PaaS so you can interact/deploy your server with git commands (heroku-like)",1515692595.0
Never_Again_2017,"I’m went with Heroku, had zero problems. ",1516066523.0
dan_schultzer,"I felt it was pretty painful too. We've a full production setup running now, and using ansible to do most of the work. I wrote a blog post and created a repo that should make it possible to set up build-deploy process in 15 minutes:

https://github.com/danschultzer/ansible-phoenix-build

https://dreamconception.com/tech/phoenix-automated-build-and-deploy-made-simple/",1516690579.0
jshieh,"Just wanted to mention gigalixir.com which is a PaaS for Elixir. Its goal is to combine the ease of Heroku with the powerful features of Elixir like distributed clustering, hot reloading, remote console and observer. I'm the founder. ",1518492504.0
TheSultanOfSwagger,What are you building that needed this?,1515646435.0
Bergerton,"Love your posts, keep ‘em coming!

u/tippr $1.00",1515647207.0
Ramirka,"Why don't you say ""United America's States"" then?


Base58Check **of Bitcoin** in Pure Elixir

",1515644501.0
scarfaceDeb,"This article should be a part of the official guide to umbrella projects.

It took me a long time to understand that umbrella apps won’t work as distributed apps from the start, without providing some kind of middle layer to route function calls via rpc.",1515713773.0
ScrimpyCat,"I don't think RPC (as in the RPC module) should be the first answer to application inter-dependencies. What about simply using messages? I feel like the reason you'd opt for RPC in an example like this, is if you didn't start out with the intention of making them distinct services (however you could and probably should add an extra layer to it to expose the functionality you wish through messages rather than use RPC for it). 

Exposing HTTP interfaces to services can be good for talking with the outside world. However another potential solution (if you also have control over the non-elixir service you wish to talk to) is to build a simple elixir service to talk to your other language. So your system of services treats it as an elixir service (doesn't know any different), and then your elixir service can just talk to the internal service through IPC. Another option could be to actually implement the distribution protocol so the other language service actually becomes a node that can talk to the other Erlang VM nodes. ",1515823851.0
sb8244,"I think it's pretty common to use Exometer to monitor certain key attributes. I especially keep track of run queue depth maximums / averages. Exometer can track anything, which is nice. I push this to datadog to be graphed.

I installed New Relic plug in to get some basic throughput information.",1515561272.0
,[deleted],1515555205.0
karmajunkie,"I'm using Metrix with Librato and liking it pretty well. Its pretty easy to instrument the important stuff that way, and spitting it out to your logs is dead simple. I had a tough time getting exometer and friends to work, which was probably my fault somehow but Metrix seemed like a good fit. ",1515976533.0
Cheezmeister,"Genuinely curious, what are the real-world use cases for Elixir on Windows? Or any BEAM tech for that matter. The concurrent, distributed infrastructury systems are overwhelmingly *nix based.

Anyone using Elixir+Windows in production? Or for personal use at home?",1515636533.0
OnorioCatenacci,There’s Rabbitt MQ on Windows. Not Elixir per se but definitely BEAM. I know a few places using Elixir for prod work on Windows but I am not sure I am free to discuss it.,1515668613.0
e456123789,Check https://github.com/ueberauth/ueberauth and https://github.com/ueberauth/ueberauth_example.,1515516301.0
praveenperera,I like: https://github.com/riverrun/phauxth,1515533703.0
tylerpachal,"I wrote a short tutorial for Guardian 1.0-beta (and I think the 1.0 release was very similar):

https://medium.com/@tylerpachal/session-authentication-example-for-phoenix-1-3-using-guardian-1-0-beta-a228c78478e6",1516115838.0
swiftsubetei,"Can you provide details about what didn't work or errors? It may be configuration of the database as mentioned in the article comments.
Uberauth and Guardian are well known solutions for this so may be worth pursuing as mentioned here.  The example you link is likely not far off",1515523430.0
superhappyrobots,"This subreddit is for a programming language that is called ""Elixir"". It is not what you are looking for. ",1515451503.0
ABC_AlwaysBeCoding,"Did the exact same thing (more or less) on a project I worked on the past few months, except that I didn't use *plainto_tsquery*, I used the full *tsquery* by normalizing everything myself using regex, to be ultimately consumed by *to_tsquery*... this allowed me to take full advantage of *and, or, not* searches and grouping... I haven't open-sourced my code (yet!) (which sucks because I'd want to share it with you) but I could (I just need to know an OS license that would at least legally prevent someone else from just downloading the code and making money off my labors)

[I posted this gist to some of the code](https://gist.github.com/pmarreck/883541dc632140a1f978705d1353fd8b) a little while back on the Slack channel, but it's probably out-of-date at this point. Has test coverage and works pretty great/seems performant, but the site that runs this code only has ~900 users (for now)...",1515542085.0
hashparty,I think I need this app if you end up releasing it.,1515483548.0
cmgriffing,"I have a small 2-endpoint api that was originally written in Node. It is not that complicated for an API, but it ticks several boxes of things I need to do that help evaluate how much I like a language. (stream parsing xml, parsing json, making external http requests, parsing text output using regex, storing data in redis, and more)

When learning new languages I tend to reimplement this api in each new language. I have done so (in order) using Rust, Go, and Elixir.

I am no expert in any of those languages so take the following opinions with a grain of salt.

I prefer Elixir over Go.

+ \+ Vendoring is so much simpler with Mix. Go has nothing that compares. Go's workspace and monorepo culture is annoying.

+ \+ In Elixir things tended to just work. Go's conventions can feel like a footgun until you have them memorized (due to making mistakes and wasting time trying to figure out the compiler error messages)

+ \+ Elixir's error messages are much more helpful

- \- Go has a much better deployment story due to the ease of cross-compilation and only declaring a binary. I recently came across nanobox which took away most of the deployment effort for Elixir though. So this point for Go doesnt matter to me as much.

+ \+ Idiomatic Elixir seems to be easier to read. Go favors short variable names and a few other things that are not my preference. One benefit Go has in this category is `gofmt` so you don't have to bikeshed over linting.

That is about all I can think of right now. I hope it helps a bit.

Hopefully someone more experienced can chime in and offer you a bit more info.",1515437481.0
dnautics,"Elixir for servers, go for clients.",1515481329.0
Ankhers,"I'm not really sure if what I am about to say is really going to help answer your question here as you are looking for a project that started in one language and moved to another. 

With that said, I worked on an RTB (Real Time Bidder) project a couple years ago. For those of you not familiar with AdTech, when you go to a website that has advertisements, the website load some JavaScript from an ad exchange, which will send a message to all of the bidders. On average, from the time the auction has started, the exchange will want a response in no more than 100ms. So after latency, we required our bidder to respond within 70ms.

The original RTB system was written in C# and I was hired as part of a team to replace the C# bidder. At the time, we settled on two languages to test. So I wrote a prototype in Haskell and someone else on the team wrote a prototype in Go. Unfortunately for me, we ended up going with Go for what seemed like political reasons (my measurements were that the Haskell version was ~20x faster than the Go version). This was also before the GC improvments in I think Go 1.3. I would be interested in running another benchmark since the improvements.

So off we went building this application in Go. We essentially broke out the work into two applications. The first one received the request from the exchanges, converted the data into a common data structure and then added some of our own data on top of it. For the sake of this story, we will call this one the collector. It was then sent to the processes that did the actual work of deciding which ad (if any) we wanted to show the user. And we will call this one the agent.

The setup was fairly simple. We had some HTTP endpoints in the collector, one for each exchange so that we could convert the data. Then it would send out that new data structure to some number of servers running the agent through a raw TCP socket.

The agents were clustered together so that each agent only knew about a subset of all of the campaigns that we were running. We also had the ability to make sure tht each campaign was on 1 or more agents for the sake of redundency.

This gave us a nice little topology of 1 collector to N agents, and we could replicate this setup to a bunch of different servers to handle the load.

Now for the actual reason I am writing this. As I mentioned, the applications were written in Go. I'm not sure if it was because of the teams unfamiliarity with Go, or maybe the language just didn't ""mesh"" well with the way we worked, but we ran into a number of problems. I will only go over a couple here.

### No Generics

For anyone that does not know what this means or why it may be a problem. I had to write the exact same function multiple times for different types. And I truly mean the same function. The function body was literally the same thing. The only thing different about it was the function head specifying different types. This was rather painful for us.

### Node Communication

This was a smaller problem, I admit. But the fact remains there is not a straight forward way to communicate with other applications in Go aside from HTTP or creating your own TCP / UDP socket. And for anyone that has not done work on a raw socket, you basically have to keep guessing how big the request is and read it in chunks until there is nothing left to read. I suppose we could have mitigated this a little bit by sending the content size.

### The ""Simple"" Language

For being called a simple language, there is quite a bit you needed to wrap your head around. As mentioned previously, the lack of generics means that you need to write the same function multiple times. There were also a number of caveats that I can't quite remember at the moment (sorry, it has been 2-3 years since I have written any Go).

With all of that said, I would have much rather written the applications in Elixir, or any other BEAM language for that matter. The node communication alone would have been amazing to have. Just spawn a new process on another Node that did the work of deciding which ad to serve the user would have been amazing instead of having to work on the raw socket. We may have needed to write a NIF for the computational stuff, but that was still a small portion of the code to do that work. I also find Elixir a much simpler language to wrap your head around (I may be bias, I prefer functional languages). But with pattern matching and multiple function bodies, it makes things so much simpler. No more checking the value of one or more arguments in an if / switch statement to decide what to do. It cleans up the code immensly.

I don't really know the work that your team is working on, but if there is any communications between different systems, you should really look into using the BEAM for that portion of the work and you can spawn external processes to do the heavy lifting. 

I hope this answers your question in some way.

**Edit**: 

I just remembered that exchanges penalized you if you errored too much. In this context an error is either a poorly formed response or no response within the time limit. Which means when we updated the Go applications we had to make sure we did it as quickly as possible because there was not really a straight forward way to have 0 downtime upgrades.",1515505915.0
random0192837465,"Anectdotal: I built an API wrapper in Go. Nice, clean, small - or so I thought.

Rewrote it in Elixir and because of all of Elixir's sexy features like pattern matching and ETS, I had an even smaller, less cognitively loading codebase. 

That's the day I went all-in with Elixir and dropped Go like a hot potato.",1515559249.0
ABC_AlwaysBeCoding,This is anecdotal and possibly biased but I've met many more people who were happy going from Go to Elixir than the other way around,1515542951.0
diegobernardes,"Did the move of part of a Go API to Elixir to learn the language. In the end, found the Go code way simpler then the Elixir.   ",1515490920.0
Schrockwell,"Yup, you figured it out. If you run the exs file with `mix run --no-halt` you will get the expected behavior.

Edit: That only works in a mix project actually. But you get the idea.",1515378323.0
michalmuskala,"The short explanation is that you can only pipe to function calls, not to functions.

Omitting `.()` would be ambiguous in some cases:

    def foo()
      example = fn x -> x * x end
      2
      |> example
      |> IO.inspect
    end

    defp example(x), do: x + x

Does this call the anonymous or the named function?
Right now there's no such ambiguity - with `.()` it calls the anonymous function, with `()` or without parens at all, it calls the named one.",1515355290.0
thetamind,"This subreddit is for the programming language Elixir, not the cryptocurrency. :-)",1515296194.0
,[deleted],1515280039.0
Hauleth,"Worth to mention that there are 3 different Elixir trademarks:

- Elixir
- elixir
- ELIXIR",1515336627.0
dvlsg,"If you really need to accept json, you can probably uri encode it and put it in the querystring.",1515270873.0
mgwidmann,"As others have mentioned, you’d have to parse the JSON yourself since it would all be inside a single query parameter since there’s not a body allowed by the HTTP specification. Python shouldn’t even allow you to send that as it’s nonsense. Plug is doing it’s job and ignoring a body attached to a GET request.

Some client libraries (like in JavaScript) will actually let you send up a JSON in your GET request and they do that by sending it up as individual query string parameters (Note: arrays are supported by appending [] to the field name).  You can also do this yourself and Plug would transform it for you in the objects you’d expect when JSON is sent in. Here’s an example:


    /search?q=searchterm&config[value]=1&config[value]=2

Will result in params becoming

    %{“q” => “searchterm”, “config” => [%{“value” => “1”}, %{“value” => “2”}]}

I suspect that’s what you’re actually looking for",1515279002.0
zumu,Limited params can be passed as part of the url query string. If you need to send a body that's a POST or PUT. This is not an elixir thing. This is an HTTP thing.,1515298819.0
curt94,"That is not what GET is for, don't do that.  It would never pass code review.",1515282760.0
dmor,"Identifiers that start with a capital are treated as atom aliases in Elixir, so [H|T] means [:'Elixir.H', :'Elixir.T'].",1515231249.0
,[deleted],1515204655.0
dc0d,"(not an Elixir Guru)

Seems it should be `[h|t]` (lowercase, as described in other comments). Also since those parts are not being used, maybe it would be better to declare it as `[_h|_t]` so those will be ignored (starting with underdash).",1515671285.0
dnautics,Thank you for the labels. I love IO.inspect but this feature alone is awesome.,1515219678.0
CodeTinkerer,"I though this would be opinions on Elixir rather than a summary of a few features of Elixir (""musings"").",1515165131.0
myringotomy,">The @values attribute is assigned to a type called a keyword list whereas the @valid_transitions type is a map in which each key (the keys are atoms) has a regular list as its value.

What is the difference between them. They both resemble KV pairs to me. ",1515327803.0
firl,"I love the adoption of docker within the elixir community. 

Is there a reason you didn't do `REPLACE_OS_VARS` for the config values ?

Are you going to post how you chose to solve the ecto initialization / migrations?

Right now I get torn between super lightweight alpine, and a docker image that has the source included and auto running `mix ecto.create && mix ecto.migrate` then running the foreground",1515121632.0
michalmuskala,"That depends heavily on what the code is actually doing. I don't think you can devise a general benchmark for this - only see examples of particular cases.

One such example could be JSON parsing. I recently wrote a library Jason (https://github.com/michalmuskala/jason) that uses pure elixir and benchmarked it against the Erlang jiffy library that uses NIFs (https://github.com/davisp/jiffy). The gist is that Jason is usually twice as slow as the native implementation at both decoding and encoding. At the same time this difference closes up as the concurrency of the system increases - Elixir code is more stable. On the other hand when the Elixir code is compiled with HiPE (an ahead-of-time native compiler for Erlang), Jason can outperform jiffy by about 30%. Full results in different setups can be found here: https://gist.github.com/michalmuskala/29112611873bdb2bd7d87e3351aa639a

NIFs require a lot of care to write so that properties of the VM (in particular pre-emptiveness) can be preserved. I would avoid them unless you measured some part of code is a performance issue which can't be solved within Elixir.",1514984941.0
e456123789,It has been a while but I think [this talk on NIFs in the latest Elixirconf](https://www.youtube.com/watch?list=PLqj39LCvnOWZMVugtyKlHMF1o2zPNntFL&v=FYQcn9zcZVA) includes benchmarks.,1514979782.0
vlatheimpaler,"You could try doing something like this:

    defmodule B do
      defmacro __using__(opts) do
        quote do
          def queue_name, do: unquote(opts[:queue_name])
        end
      end
    end

    defmodule A do
      use B, queue_name: ""test""
    end
",1514944332.0
andyleclair,"I think the real problem I'm having is that what I'm trying to do is really more of a Ruby-ism that just doesn't work in Elixir.

&nbsp;

I want to basically partially define a module B and ensure that the module that includes my module (A) fills in the missing bits, but that I can still reference. Like, if I could define that my module has a callback but then make reference to that callback in some functions I'm providing to the including module.",1514994049.0
e456123789,"`B` needs to receive the module that implements its callbacks as argument. So you would do:

    def do_something(module) do
      module.queue_name
    end

However, if all you need in do_something is data, then passing a map or keyword with the info may be a better way to go.",1514979705.0
mbuhot,"Nice package! A couple of suggestions:

The ETS store is bottlenecked by a GenServer, you can create the ETS table in protected mode to allow reads from the client API functions without having to go through a `GenServer.call`

The debug mode should ideally use Logger instead of `IO.puts`. The logging level can then be configurable to output at trace/debug/info levels.",1514890943.0
alchemistcamp,"Hey everyone and happy 2018! I know there are already a few Elixir screencasts out there, so I'll just lay out my motivation for creating this one and some of the differences here:

Most sites I've seen...

 *   focus videos on specific language features or bits of syntax
 *   offer a small percentage of videos for free and only on their own site
 *   offer small quantities of heavily edited video that moves at a fast pace

[Alchemist Camp](https://alchemist.camp/)...

 *   focuses on projects and teaches language features only as needed
 *   puts multiple free videos per week onto YouTube
 *   shares the process of building the site itself
 *   aims for reddit-like information and link density instead of beautiful but pagination-inducing episode ""cards""

It's not for everyone, but I really hope it's useful for people with learning styles like mine!
",1514699444.0
do0fusz,"This is GOLD, thank you!
",1514727152.0
cthree87,All learning resources are welcome and appreciated. ,1514736637.0
svartkonst,"Going by the titles it seems cool. might be a good resource to actually get to learning Elixir. Provided you've got a nice voice and a decent production value ;)

Cool that you're using Nanobox, it's a semi-recent development favorite for me.",1514719422.0
evdekiSex,Thanks gazillion times !,1517220921.0
alchemistcamp,"I went over exactly this same question when writing a simple app to fetch and log YouTube channel and Alexa ranking stats. I looked at all those options, especially Erlcron but eventually decided the drift was so tiny it didn't matter.

If it did, I think I'd just use `DateTime.utc_now` to calculate the span of time given to `Process.send_after`.",1514701145.0
mbuhot,"Why not just use `:timer.send_interval` or `:timer.apply_interval` ?

Sometimes it pays to check the erlang std library :)

http://erlang.org/doc/man/timer.html",1514782571.0
ghztew,Thanks Josh Adams for putting out this survey again this year. Really looking forward to seeing the results of it.,1514604157.0
derekkraan,Finally a survey I'd *like* to fill out!,1514644531.0
michalmuskala,"I have to say, I'm not a big fan of similar solutions. I'm sure it will save a bit of time when writing the code, but I'm also sure it will cause a lot of confusion and problems when actually using it - primarily because the functions appear out of nowhere in the module and it will be hard to find them when debugging.

",1514584975.0
Cacamas,"Absolutely excellent if you don't want your readers to know what the hell is going on in runtime. Macros are hell, stay away!!!",1514598510.0
puppet_pals,"Hey all, 

Whenever I write OTP applications I constantly find myself using submodules to separate my server logic, state management logic, and exposed API.  

When I added a new parameter to a function I had to add it in 3 locations:
MODULE.Client, MODULE.Server.handle_call/cast, and MODULE.Impl.

To remedy this I created GenClient - a metaprogramming library to create the Client and Server code based on the Implementation code.

Please let me know what you think!",1514515987.0
mbuhot,"The implementation of `put` looks like it converts a struct to a map to a keyword list, then finally back to a struct.

It should be possible to just `Map.merge` the params into the struct.",1514442860.0
dylanthepiguy2,This is my first library so I'm pretty keen to hear what everyone thinks,1514440375.0
selfup,This is great!,1514405224.0
meta_stable,I still prefer having functions that check for whether user_id of user is nill and return a tuple. This way I can have specific error messages. In the posted case you don't know if user_id was not given or if the user simply doesn't exist. This may not always be necessary but I find it to be the better pattern.,1514433773.0
k-selectride,"Based on the table of contents, it seems that book would be aimed at people with not a lot of programming experience. Me personally I would recommend Programming Elixir, which also happens to be more comprehensive. Elixir in Action is also pretty good, although slightly out of date in that some of the code snippets will yield deprecation warnings, but ultimately easily fixable. There's also https://elixirschool.com/en which isn't bad at all and free to boot, so can't complain there.

Either way, I'd also recommend going through the guides on the official website https://elixir-lang.org/getting-started/introduction.html which are fairly comprehensive and should give you a decent survey.",1514271254.0
gnagnone,"Thank you for your replies. But I think I didn't explain myself correctly, english is not my first language sorry guys.

What I mean is I'm not looking for a book to teach me syntax of the language, I would rather like to have a book that would teach me the concepts of functional programming and everything I need to know to be a good functional developer. 

In the ruby world I could spend hours with all the cool ruby books around and still know just the ruby language, while after reading books like POODR I improved my OO skills.
",1514293943.0
k1r8r0wn,You can also try [this](http://elixir-lang.github.io/learning.html)  resources. In my opinion they’re great  for the start.,1514293196.0
xiaoma,"I'm an Elixir fan. However [the best book I've ever seen for learning FP](https://www.goodreads.com/book/show/13541678-functional-programming-in-scala) uses scala. Don't be fooled though. It teaches FP itself and will make you a better developer in Haskell, Elixir, Elm or many other related languages.

Realm of Racket is also excellent and a bit more on the fun end, though not quite as intense.",1514966077.0
jordiee,This may sound weird but for me the easiest way for me to wrap my head around functional design was to pick up a book that brought some functional ideas into my day job OO language(javascript). The book I picked up(https://www.amazon.com/gp/product/1617292826) made the switch to a functional language much easier. After reading it it changed how I programmed day to day with javascript and eventual was the reason I reached out to learn elixir because of how much functional design matched up with how I think.,1514421188.0
dipittydoop,"I've found the Phoenix Contexts guide stellar in improving my understanding of how Phoenix nudges you into DDD ways of organizing your application: https://hexdocs.pm/phoenix/contexts.html#content

An interesting library for event-sourced CQRS architectures for when you get a good feel of Elixir and Phoenix: https://github.com/commanded/commanded you can find a lot of relevant resources from the links in the readme.

",1514243943.0
julienXX,This book is really great on DDD in a functional language https://pragprog.com/book/swdddf/domain-modeling-made-functional,1514240244.0
Chaoist,Just wanted to say what a great name. Love the reference. :),1514208322.0
dnsbty,"This looks interesting, but my only worry is the examples show working with CC info server side so you would have to worry about all kinds of PCI compliance stuff. I didn’t look too closely at the code, but it really ought to work with a card token so you could let Stripe or Braintree or whatever processor handle the actual compliance stuff for you.",1514249116.0
nickjj_,"Looks like a great start.

Do you plan to integrate Paypal in the near future?

I know, PP is pretty lame but the reality is, a lot of people use it.",1514407526.0
Hauleth,"One question:

Why passing provider directly to `Gringotts.purchase/5` instead of using separate module in Ecto manner?",1514464452.0
k-selectride,"praise `defguard`, great addition.",1514149834.0
Ilyes512,Nice! Have been using the formatted for a while now and I look forward to the day it’s used by everyone!,1514162014.0
Schrockwell,"You're really close. The function you're missing is `List.flatten/1`, which will take any nested lists of lists and put all the elements into one flat list.

    defp includes_json(users) do
      users |> Enum.map(&include_json(&1)) |> List.flatten()
    end

Also, protip, a shorthand for `&some_function(&1)` is just `&some_function/1` - the arguments are implied for you.",1514133873.0
alchemistcamp,"I've been working on screencasts that teach Elixir this month. I know there are already a few options out there, so I'm differentiating it in a few ways...

Most sites I've seen...

 * focus videos on specific language features or bits of syntax
 * offer a small percentage of videos for free and only on their own site
 * offer small quantities of heavily edited video that moves at a fast pace

[Alchemist Camp](https://alchemist.camp)...

 * focuses on projects and teaches language features only as needed
 * puts multiple free videos per week onto YouTube
 * shares the process of building the site itself
 * aims for reddit-like information and link density instead of episode ""cards""

It's not for everyone, but I really hope it's useful for people with learning styles like mine!",1514698953.0
Nixonite,"reading the little elixir and otp guidebook

so are genservers, in a basic sense, just intended to tidy up or standardize the writing of functions intended for spawning? I think I'm finally starting to understand genservers after seeing a couple of examples, interesting idea, but compared to all the hype, it's not as magical as I thought it would be. ",1514118241.0
pkrawat1,"yes, working on a library https://github.com/aviabird/gringotts
yes, working on a production app for warehouse",1514319665.0
biocs_nerd,"Writing my first Elixir app, a Phoenix-based RSS reader. ",1514473205.0
heymatthewoden,"Forked hex.pm as an on-prem repo, rewriting the authorization/ownership to delegate to github personal access tokens.

I ended up dropping a good chunk of services, but using the existing hex.pm repo was easier than rewriting up a docs/repo/ui project from scratch. ",1514332848.0
dnautics,"Just completed an early version of an JSONSchema -> Elixir module code generator.

https://github.com/rstorsauce/Exonerate",1514666445.0
sb8244,"I was working on reviving an old elixir project that clones the gameplay of generals.io. I'm happy with the way that the server structure turned out, and it was a fun websocket / game modeling problem. https://github.com/sb8244/generals

I think it's served it's purpose for my learning so I probably won't invest anymore time into it.",1514740551.0
--version,"Right now, I'm just working on exercism.io exercises. Only a few exercises in so far ([profile link](http://exercism.io/joshua-mcintosh)), and while I'm trying to make them syntactically elixir-ish, I'd say they don't yet have much elixir or erlang-specific functionality or flair.

Now that we are in 2018 I'm trying to establish a base understanding of elixir and sharpen my programming skills, thus the exercise route versus a project. I'll look at the wiki here for more learning resources, but I'm always looking for advice and direction and particularly while picking things up. Any suggestions are welcome!",1514912991.0
meznaric,"Just launched https://www.enso.ooo last week. Currently working on user's feedback and mostly just fixing bugs. I'm thinking of setting up proper CI, because I am currently deploying using local edeliver -> production and I had some issues on flaky connections while traveling. ",1514122406.0
dnautics,"OpenAPI -> plug generator.  It's still very much in the early phases (also I'm an elixir n00b)

https://github.com/rstorsauce/exaggerate",1514136467.0
Manthmilk,"I'm working on a brainfuck (esolang) interpreter for codewars.

It's been the first problem that has got me dipping *hard* into structs and protocols.

I have working solutions, but I'm not happy with them yet.

All of this to say that as soon as I am convinced I have the code equivalent of Sterling silver on my hands, I'll press submit and the first solution will be a single 20 byte line that does a bitmask into a generator, derives pi to the nth digit, and runs the brainfuck program flawlessly.

But I'll still have learned more about protocols so whatever to that guy.

Also helping out an open source elixir client for a cryptocurrency API.",1514357846.0
,"Start the container with the command `sleep 99999`, and then use `docker exec -it [name] /bin/bash` to start a shell in the container.",1514084460.0
jake_morrison,"You can also connect a remote console to a running VM.
I am not sure the Docker side of it, we normally deploy Erlang releases to VMs or dedicated servers. In that case, we log into the server and run

    env MIX_ENV=prod RELEASE_MUTABLE_DIR=/var/tmp/foo /opt/foo/current/bin/foo remote_console

Something similar should work, assuming you get things like the cookie set up right. ",1514092446.0
space_perogy,"There's a good chance that `CSV.decode/2` returns either `{:ok, data}` or `{:error, reason}`, so you will need to rework your insert functions to check the tuple first.

    def store_users({:ok, row}) do
      changeset = User.changeset(%User{}, row)
      Repo.insert!(changeset)
    end
    def store_users(_row) do
      # do nothing, as this would be an error
     end

Note that a similar pattern will have to be followed for the other 2 store functions.",1514049623.0
johnhamelink,"One of my biggest gripes with Poison is that there is no changelog, so it is not clear if it is safe to upgrade (both as an end user and as a library author). Thank you /u/michalmuskala for adding one to this project!",1514037006.0
goofansu,"Thank you. I've used this library in my project.

Is the difference between Jason and Poison only about performance boost?

---------- update -----

I've found the answer at https://hexdocs.pm/jason/readme.html#differences-to-poison. Documentation is very good.",1514087232.0
MildlySerious,Love the name you decided on! Generally looks really good,1514000486.0
selfup,"This is great! Looking forward to rust NICs :)

Maybe I could help with the use of Rustler :P",1514021984.0
mbuhot,"Is improved performance the primary goal of Jason? Could the performance improvements be ported to Poison? I already have JSX and Poison as transitive dependencies in my project, I'd love to not add a 3rd JSON encoder :)",1514028942.0
meta_stable,This looks promising. Are there any plans do allow custom decoders? Currently with poison I have a custom implementation that only converts whitelisted keys into atoms.,1513987901.0
thoughtquery,Is there impure elixir?,1514009933.0
teilo,"We did something very similar to this for our systems integration platform, which I had originally written in Python. It was already queue based, built around Celery and RabbitMQ.

I moved on to management, and hired a developer (whom I'll call J) to take over work on the platform. We knew the handwriting was on the wall as we looked at projections of our future transaction load.

J had a background in Go, but discovered Elixir in the middle of scoping out a Go replacement. I gave J the go ahead to explore an Elixir solution, because I was excited at what the Erlang/OTP/Genserver ecosystem could do for us, as well as the proven stability of the platform.

It was fairly trivial to set up separate queuing system in Elixir. This allowed us to migrate integration modules one-at-a-time to the new platform, with the old Python framework passing off requests it no longer handled to Elixir. It took us about a year to fully transition, and we couldn't be happier with the result.

The only challenge now is finding one or two more Elixir developers, since the amount of integration work we have planned has grown substantially.",1513955433.0
kagux,"If you need to insert them separately, then cookbook has to be fisrt and recipe has to reference it by id (cookbook_id) or struct with id (cookbook).
What you do is exactly opposite, inserting recipe first and referencing struct by id.
",1513926091.0
non-private,[redacted],1513940047.0
kb8771,"Read the hex docs on Ecto.Changeset. [https://hexdocs.pm/ecto/Ecto.Changeset.html](https://hexdocs.pm/ecto/Ecto.Changeset.html) 

You most likely should be using cast_assoc/3 to insert all the records at once.  There’s an example in the docs for addresses which can be translated to your idea of recipes to cookbooks.",1513948688.0
GroceryBagHead,Wouldn't be easier just to downcase it on the way in?,1513889624.0
philly_fan_in_chi,"Encrypt your emails and names, people. ",1513897193.0
philly_fan_in_chi,"[Enum.into/3](https://hexdocs.pm/elixir/Enum.html#into/3).

`Enum.into/2` is useful in and of itself because you often have to make data structures translate to other data structures, say KeywordList into map. But say you wanna do some stuff to your input before you put it into your eventual data structure, you could do a `Enum.map/2` into `Enum.into/2` or just use `Enum.into/3` and do it in a single pass!


    foos = [a: :foo, b: bar]
    Enum.into(foos, %{}, fn {key, value} ->
      new_key = 
        key 
        |> Atom.to_string()
        |> String.upcase()

      {new_key, value}
    end) 

    # %{""A"" => :foo, ""B"" => :bar}

",1513809467.0
acconrad,"Most web frameworks need a pagination plugin, but with [Enum.chunk/4](https://hexdocs.pm/elixir/Enum.html#chunk_every/4), that essentially takes care of pagination in one built-in function. That was pretty awesome when I first used it.",1513842357.0
Im__Joseph,"Got to say that :rpc.call/4 is my favourite function, however that's Erlang, if we are talking about Elixir and Elixir only I'm gonna have to say Node.spawn_link/2. It's incredibly useful for both debugging and spreading applications over separate nodes.",1513845192.0
dnautics,"IO.inspect, hands down the most important function that I use",1514136800.0
horses_arent_friends,"I'm being naive but it seems shitty to deny people access to your website/application because of their country of origin when fail2ban, OSSEC, etc are available",1513808190.0
ms4720,Host at Google and they block them for you,1514213205.0
Gurp11272,Wow this is really messy. Unreadable really. Any resources I can use to accurately show you my code?,1513737194.0
onesneakymofo,"I saw this in the Elixir Radar newsletter, but I don't think it's been mentioned here on Reddit. Thought I'd post.",1513719030.0
vlatheimpaler,Is there a table of contents anywhere?,1513743048.0
do0fusz,"seems okay, any reviews yet?",1513792795.0
sb8244,"One interesting thing in elixir is that processes are used to store state (maybe even a simple Agent implementation as example) and so processes tend to spring up instead of objects. These processes communicate via message passing.

I've heard from authors like Metz that message passing is the ""true"" OOP way, and so I find it interesting that Erlang and processes allow this oop like concept to shine even more than a language like Ruby! 

Not super applicable info, but I still find it fascinating each time I think about it.",1514473269.0
equivalent8,I'm talking about Ruby & Rails there but I'm building up on theoretical base that I've learned from using Elixir. In a sense I think it's touching the topic of Elixir as I'm making a stage for bringing more Functional approach to Object oriented programming. If anyone feels that  this article should not be in /r/elixir please let me know I'll delete it from here,1513687895.0
kerynitian,"Interesting read.  Out of curiosity, why put those functions inside UserBuilder and not just into User directly?

    User.new() |> User.set_as_admin()
seems perfectly clear to me.",1513710728.0
jmking,I believe you're looking for http://phoenixframework.org/,1513653007.0
ClickHereForBacardi,"I think you're in the wrong sub, friend.",1513652796.0
xradionut,Concurrency is the opposite of currency... /s,1513722523.0
Nixonite,you mean litecoin?,1513652382.0
TheSultanOfSwagger,"I would be interested in the membership stats for /r/elixir For example, how many /r/elixir members also sub /r/bitcoin and stuff like that. I bet it is pretty high. ",1513654226.0
damianborowski,"great explanation! waiting for coming articles, well done",1513613061.0
k-selectride,An easier to use Devise would be nice. Authentication is required for any app that has users. At this point there are lots of features that users expect. Coherence was a decent attempt but fell pretty short because of no social media login.,1513362398.0
mbuhot,A production ready AMQP 1.0 client.,1513416710.0
possibly_not_a_bot,"On mobile so I don't have a link, but I would kill for a good Lavaplayer-like library in Elixir. ",1513367548.0
ClickHereForBacardi,"core.logic from Clojure.

I know there's a microKanren for Elixir, but an extended miniKanren would be nice.",1513383833.0
emjrdev,join-monster ,1513424306.0
myringotomy,"Math and science. Interfaces to GDAL, pandas etc.",1513539301.0
,[deleted],1513366551.0
horvathlg,"Newspaper, the python scraper lib comes to my mind but since I can call python functions from Elixir via Erlport I'm not complaining.",1513609502.0
xradionut,D3.js,1513722594.0
negcx,SQLAlchemy (Core),1513748026.0
ciawal,What about [Process.send_after](https://hexdocs.pm/elixir/Process.html#send_after/4),1513340526.0
doesmycodesmell,Wow thanks!,1513442269.0
toaster_from_brazil,Are you a Khajiit by any chance? ,1513350512.0
readk,Have you used Joi for Javascript? That one is the best I've used.  Yours looks good for elixir . If you need ideas check out the Joi docs.,1513312723.0
phialx,This is awesome and easy for beginners to understand. Have been looking into different auth options and I think you made up my mind for me. Cheers!,1513299279.0
mbuhot,"I don't think distributed erlang is intended for IoT devices with unreliable network connectivity. Each node connects to every other node. 

Designing for Scalability with Erlang/OTP has some good material on distributed architectures towards the end.",1513248384.0
jstad,Thanks for sharing!,1513203096.0
urmyheartBeatStopR,"I think OP confusing concurrent with parallel. 

There is no guarantees that specific processes will do in parallel in different cores just concurrently iirc. ",1513345785.0
depa,"This amazing post at the Discord blog: ""How Discord Scaled Elixir to 5,000,000 Concurrent Users"" https://blog.discordapp.com/scaling-elixir-f9b8e1e7c29b",1513121666.0
picandocodigo,"We recently watched this talk about BEAM at work and it's really good, very interesting
https://youtu.be/pO4_Wlq8JeI",1513120314.0
concreteniche,"Adopting Elixir is really great for getting an Elixir app production ready, among other topics:
https://pragprog.com/book/tvmelixir/adopting-elixir",1513153705.0
vagara,Try doing exercises in exercism.io It is by far the best confidence booster.,1513157673.0
1_player,"The problem is that there's no advanced content yet, being Elixir so young and in the hype phase at the moment, where most Elixir devs are enthusiasts but not yet gurus.

Elixir is young, but Erlang is old and battle tested, what we need are books on OTP patterns, articles on the architecture of big Erlang production apps, that are mostly applicable 1-to-1 to Elixir. It seems that a lot of knowledge is lost in the Erlang mailing list.

The only free book I know that touches those topics is [Erlang in Anger](https://www.erlang-in-anger.com).

Any other suggestion?",1513170816.0
t4t5,"I’ll pitch my online course where you learn how to build a real-time Messenger clone with Phoenix :)

https://www.ludu.co/course/discover-elixir-phoenix",1513149515.0
k-selectride,"Here are a couple videos I've watched

[Eliminating Single Process Bottlenecks with ETS](https://www.youtube.com/watch?v=XrkY9WRY8p0)

Erlang/Elixir encourages architecture that can lead to processes being bottlenecks. This is by design because it makes concurrent programming easier to reason about. This talk suggests some solutions to remove bottlenecks and increase throughput by using ETS

[What NOT to do when building large scale systems in Erlang](https://www.youtube.com/watch?v=EBQKlyaM7bY)

bet365 engineer pointing out some pitfalls. One of the takeaways I got from it, which overlaps with the first video I linked, is using ETS as a message queue to relieve process bottlenecking. ",1513203396.0
the_starbase_kolob,helloWorldVariable = func1 |> func2,1513003899.0
Arthien,"A few examples
      
    var = func1() |> func2()

Multi line use indentation to distinguish from long pipe chains

    var = func1()        
      |> func2()    
      |> func3()
            ",1513043770.0
dnautics,"honestly it's kind of annoying that you can't do what you propose, but I understand why the AST parser would not play nice with it.",1513821970.0
a3th3rus,"If you want this, you need to write your own macro.

You can pick one of the binary operators whose associativity is left to right, and whose precedence is lower than or equal to `|>`. I chose the `~>` operator because it can be parsed by Elixir, but is not used in Elixir's core or standard lib. You can find all operators [here](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/pages/Operators.md)

    defmodule Sperm do
      defmacro left ~> right do
        quote do
          unquote(right) = unquote(left)
        end
      end
    end

And here is the usage

    import Sperm

    # Calculate the sum of the square of the numbers in the list
    # and assign the result to the variable `sum`
    [1, 2, 3] |> Enum.map(&(&1 * &1)) |> Enum.reduce(&(&1 + &2)) ~> sum
    IO.inspect(sum)  #=> 14",1517889341.0
Hauleth,"My main question is why would you?

As a learning program, ok, but for general use it makes no sense as Erlang wasn't designed for batch processing.",1512909770.0
boredsoftwareguy,"I’ll be honest.  While I think more resources are good I don’t think encouraging people to push low quality packages to hex is.

There’s already a heap of abandoned packages or packages solely parking names.  We don’t need API wrappers for every API when Httposion provides that out of the box with Base.  We should be encouraging people NOT to push to hex unless there’s a real value to the package.  Using your custom module directly from GitHub is easy enough to not require it being on hex.",1512830420.0
recycledcoder,"So I'll be ""that guy"". What's obviously missing is... tests :)",1512861642.0
faraaz1998,On writing your first package in elixir. I'd love to get suggestions to improve it,1512807388.0
Paddy3118,"Not a direct copy of functionality, but what I needed to further investigte an Elixir answer to a problem I solved in Python in a different manner.",1512684736.0
acconrad,"FYI, `chunk` / `chunk_every` is a really simple way to handle pagination of queries",1512686373.0
josevalim,"Great find. Can you please open up a bug report on the [issues tracker](github.com/elixir-lang/elixir/issues)?

I think line 18 is correct and line 17 is wrong. But it is probably worth getting extra eyes on it before making a decision.",1512723515.0
Schrockwell,"I think what's happening is the last chunk of `'IJK'` is considered unfinished because the function can't step ahead 4 items in the remaining list since there are only 3 items left.

You can pass the `:discard` option to ignore the remaining unfinished chunk.

    iex(17)> Enum.chunk_every('ABCDEFGHIJK', 3, 4, :discard)
    ['ABC', 'EFG', 'IJK']
    iex(18)> Enum.chunk_every('ABCDEFGHIJKL', 3, 4, :discard)
    ['ABC', 'EFG', 'IJK']",1512705012.0
cthree87,"I agree, that is a little odd. ",1512687415.0
chulkilee,"You can avoid re-parsing string by calling with new `URI` struct: e.g. `parse(%{uri | path: “/“})`

",1512624397.0
Zinggi57,"**TLDW?**

There is no description on YouTube and the title doesn't tell much either...     
Could someone give a short summery?

**EDIT**:
I got this as a reply in my inbox, but for some reason it doesn't show up, so I'll add it here:

>It's basically a demonstration of what makes Elixir awesome, and why you should use it when building ""software systems"". It starts off explaining what the BEAM is and why it's great, and then goes on to demo how production bugs can quickly and easily be debugged with an iex shell.

>If you have the time, I recommend watching it. Even if you're familiar with Elixir, it's an inspiring talk.

Thanks to /u/petecorey!
",1512599681.0
cthree87,Not OP but seen it. Discusses architectural features and advantages of the Erlang VM for fault tolerance and concurrency. ,1512602445.0
CastleGloom,"Great post. The Outline has gone a long way in just a year, and has relied on Elixir since day one. It's a good example of learning an exciting language and sticking with it. The payoff seems to be good.

Edit: the poster is the author. Follow him on GitHub!",1512605159.0
quaunaut,"If you look at [the docs](https://hexdocs.pm/ecto/Ecto.Schema.html#timestamps/1), you can put your own method to generate these in the `:autogenerate` option on the schema method.",1512570696.0
SpaceSword,Oh I like this idea a lot.,1512506708.0
chesus_chrust,Wasn't Jose against the idea of a standard formatter? I remember him saying on the mailing list that a standard formatter is a limitation on ways to approach problems. Wonder what changed his opinion.,1512509877.0
smooth_taint,I fucking love this! My team in Europe uses a similar tool called Prettier for javascript. It makes us much more productive,1512573170.0
d4be4st,"I tried with arrays and it was slooooow.

Switched to using maps where my keys are indexes and it was done <1s. https://github.com/d4be4st/advent-of-code-2017/blob/master/task5.exs",1512508828.0
noemotion,"From a quick look at the code, this case doesn't seem like a good fit for tuples. Try using maps instead. They should have better performance on modify.",1512503504.0
mgwidmann,"I think it's important to remember that in an immutable language things like tuples are stored contiguously, and that lists require a full copy on any operation other than prepending an element (which is constant time). The VM does make some optimizations so the list copy is shallow, not a full deep copy, but on large input it will be noticeably slower if you've done something like that.",1512689235.0
metis_seeker,Looks like some good changes!,1512511987.0
FauL0x,"https://github.com/jfornoff/advent-of-code-2017 Wouldn't call myself an expert, but I'm getting paid to write Elixir ",1512207769.0
Linupe,I’m thinking about doing it. Though I haven’t had the time yet :) I’ll post here when I get some solutions up.,1512200008.0
GroceryBagHead,"There's subreddit: https://www.reddit.com/r/adventofcode/

first two challenges look trivial. but im a relative elixir noob. will take a stab tomorrow. ",1512206082.0
Billquisha,"I'm an Elixir noob doing it... I'll post mine once I'm at a computer

And here 'tis: https://github.com/fatcatt316/advent-of-code-2017",1512220155.0
Hauleth,"“You can hammer a nail with a stone, but how many carpenters use them in their work?”

While the first day problem was almost perfect for programming language operating on lists with pattern matching (aka most functional programming languages). The second day was made for AWK or Excel, you operate on rows and columns which is dead simple in tools that I have had mentioned. 

My solutions can be found in my repo https://github.com/hauleth/advent-of-code-2017",1512263928.0
heymatthewoden,"Here’s mine:
https://github.com/matthewoden/AdventOfCode2017 

I’m trying to do more with recursion and binary pattern matching. ",1512269578.0
petecorey,I'm doing it. [Here's my repo](https://github.com/pcorey/advent_of_code_2017/) with solutions for days 1 through 6 so far.,1512604577.0
evantravers,"I'm new, but here's mine if it helps: https://github.com/evantravers/adventofcode/tree/master/elixir",1514834760.0
Nixonite,holy fuck someone teach that guy some web design,1512205251.0
josevalim,Could you please open up an issue so we can investigate? Thank you.,1512158950.0
bglusman,"Definitely gets slow for me too, but based on output I think its based on how each call is appending to the IEx history %IEx.History.State struct...  the history IEx is using isn't enabled by default but is available with a param config in OTP20+ I beleive, and I turned it on, guessing you did also, though you'd think if that were the only issue it would effect Erlang shell also.  Maybe the two calls aren't quite equivalent though and in erlang that call is only one line of history, but somehow in IEx it seems like every seperate call to Process.info is winding up as a seperate item in the History struct.",1512155103.0
bglusman,"Oh interesting... Though if that's the case it's weird the above problem wasn't an issue/didn't slow things down in erlang bit did in iex.  I should test whether my ""fix"" actually fixes anything, I didn't get around to that yet, wonder what else could be the problem if not? Or maybe erlang puts it in an ets table and iex should also?  Curious if anyone knows/will try and investigate a bit.

EDIT: this was supposed to be in reply to /u/dmor above",1512314034.0
