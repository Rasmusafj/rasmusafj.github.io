author,comment,timestamp
kryptkpr,"Very much #1, if you are clustering you have outgrown sqlite.",1543619119.0
tzeentchy,"https://github.com/CrunchyData/crunchy-proxy

Clustering your DB should be a separate concern entirely to how your services access the DB. A proxy becomes an easy logical step, and one at which crunchy excels at.",1543620124.0
apatheticonion,"You should go with #1, use a db server like PostgreSQL.

A less practical alternative is to use a language like Go (golang) which allows you to fill a single machine's logical CPUs up. 

With node, as soon as you saturate one CPU, you need to cluster. With Go, you can just keep adding CPUs until you physically cant get more CPUs on a single machine.

Basically, this delays growing pains and lets you invest less in your technology up front.",1543629467.0
GhostMcFunky," Considering building an API for your DB calls, split these calls to cluster processes and run this environment separately on another server.

If you’re looking to manage DB calls as separate processes, this is the way to go as you can also manage your API daemon processes based on their respective resource demands.

As far as concurrency the solution will depend a lot on where your bottleneck is. Are you just running out of CPU, RAM? What?

A change to the DB itself may not be the solution (as I’ve suggested) but instead how you’re managing the requests. Postgres isn’t going to magically fix this for you; you’ll still need to manage the calls and optimize the DB itself.",1543638974.0
ns_helloworld,"try taking your socketio out from your react component. Have a socketio handler inside the root of your project (somewhere in your entry file), and then when it needs to change state of one of your react components you have several ways of doing it:

&#x200B;

* a global object (not recommended because it's bad design) basically you can make a global object that stores references to your components that need communication with sockets. so in your App constructor you might have: [window.App](https://window.App) = this. which stores a reference to the class instance inside the window. Then in your socketio handler, once it receives a certain message you can do: window.App.setState({whatever...}), or even better: have a method inside App that is meant to handle the data from socketIO and then just do window.App.someMethod(data)
* a single object passed along to all of your components. This is what I do in all of my projects. inside the root of my application I make a closure and I call it brain. then I pass it to app like so: <App brain={brain} /> and within the App component's constructor I do something like this: this.brain = props.brain; this.brain.rememberMe('App', this); where rememberMe() just takes a name, and a reference to the component and stores it inside the closure. Then I have another method of brain which is called tell(), so your socket handler can do something like this: brain.tell('App').setState({whatever...})

Hope that helps, I'm not going to run or download your code because that is a lot of text. Try to make your question as minimal as possible when you ask, and you'll get more responses.",1543622752.0
DukeBerith,"It's not a polyfill if it doesn't follow the same API, it's just a library.",1543654533.0
coolcosmos,TIL report is a TLD,1543616811.0
son_of_meat,Their analysis of the `event-stream` situation is so not helpful here's a better write-up by npm https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident,1543630784.0
kaen_,"I think you'll get a lot of confused comments by people who don't understand the real problems this solves or their severity. This is an important step down a very long road. Only parts of it can be solved through tooling, but before that we need to educate people to *use* the tools. This is a prophylactic for a population who never took sex-ed.

Thanks for contributing.",1543632157.0
shalotelli,What’s the difference between this and `npx`?,1543627436.0
blue-2525989,There is commented code right off the start. ,1543635830.0
insane_yet_awesome,It's two commands to run the container and just do an npm install. Why would you need this? And what is the value of testing express in the REPL?,1543622784.0
paulogdm,"We are very active on [zeit.co/chat](https://zeit.co/chat) (Spectrum).  
It is best to get started by examples: [https://github.com/zeit/now-examples](https://github.com/zeit/now-examples)  
Since you have been dealing with node, you can focus on \`@now/node\` and \`@now/node-server\`.  
I also made a more ""real life"" app: [https://github.com/paulogdm/chop-my-url](https://github.com/paulogdm/chop-my-url)  
Feel free to ask any questions!",1543614433.0
AndyBitz,"I'm testing it right now as well.

I guess the first thing you'd have to do is to add either \`@now/node\` or \`@now/node-server\` to your \`now.json\` and then routing everything to your entrypoint. See here: [https://github.com/zeit/now-cli/issues/1642#issuecomment-438245448](https://github.com/zeit/now-cli/issues/1642#issuecomment-438245448).",1543608194.0
danielstaleiny,"they have pretty good channel, they will help you there. 

&#x200B;",1543616337.0
TechJoust,"The correct response to ""which is better?"", is that it is a dumb question. ",1543672976.0
Quadraxas,omg where to start...,1543597489.0
CMSteffen,"I’m not sure you’re gonna get an objective opinion, asking here. Nor would you if you asked in /r/Python.

That being said... having read the article, I’ve got to say that the reasons given for Node’s superiority don’t make much sense. Let’s take a closer look:

### Python:

* Much friendlier for Jr. Devs: this seems true enough. (+1)
* Frameworks don’t require a high skill level: Not true. This is heavily dependent on the framework, and when using multiple frameworks in tandem, you’ve got to know how they all work s you can make them work harmoniously together. Just like with Node. (tie)
* Python is more universal and versatile: True. Most systems come with Python preinstalled, and it’s simple enough to deploy. And it can do anything. Node is a bit more challenging to deploy and the language (JS) isn’t as accessible, so this one goes to Python. (+1)
* more compatible with other languages: somewhat, yes. You can embed Python into many other languages, like Java and C/C++. (+1)
* Simpler, better covered, better documented: Yes on most fronts. Node is a more niche product, from what I’ve seen, and while it does its job well, it’s not as universal and prolific as Python. (+1)

### Node:

* Node developers have a more universal skill set: I disagree. The article defends this by saying that they write the front end and backend with the same language (which is also true of Python development), but this doesn’t mean developers skill sets are more universal, but rather that they’re more limited. Python integrates with just about anything, and Python developers learn how to interact with myriad other services. So this is either a tie or a mark in favor of Python. (Besides, this is trying to say that Node is better because of a quality of its developers, rather than a quality inherent in itself, which is problematic.) (tie)
* node developers are more flexible/versatile: Gonna call bullshit here. As I said above, Python does anything and integrates with everything. The fact that JS is more complicated and that it’s users have to be more advanced doesn’t actually make the system itself more flexible or versatile, nor its developers. Again, this is trying to make the user base appear as a feature of the product, and it’s doing a bad job of it. You could make the same claims for this and the previous point with Python as easily as with Node. (tie)
* With Node you can use JS to code everything: this isn’t a feature or benefit. It’s just a fact. You code Node with JS. You code Python apps in Python. Saying that “you don’t need that many technologies” is BS. You need as many technologies as your project requires, same with Python. The same claims could be made of Python: all you need are Python libraries! This isn’t a feature. (tie)
* The Node community is large and JS is one of the fastest growing languages out there: Same can be said for Python. The community is huge, there’s a library (or three) for everything, and since it’s being taught in more college programming courses every year, there’s no deficit of growth. (tie)

### Comparisons:

* JS has issues in readability and haphazard design inherent from the early days. Python is simpler to learn and makes it easier to start being productive. (+1 Python)
* JS is moving so quickly it’s hard to keep up. Combined with the previously-explained difficulty of learning, the barriers for entry are high. Python is growing and developing quickly as well, but with a much lower barrier of entry. (+1 Python)
* Node can’t do too many things at the same time unless you write well in it. Python “pretends better.” (+1 Python)
* Python is well-suited to new technologies. (+1 Python)
* Node is better for the IOT, according to the article. (+1 Node)

The article concludes that it doesn’t make much difference which you choose. And I’ll agree, to the extent that I wouldn’t suggest a JS programmer to switch to Python or vice versa; use what you know. But the actual comparison between the two seems to indicate that Python is actually superior, and that if you’re choosing which language to learn, Python is easily the better choice.

### Final scores:

* Python: 8
* Node: 1

(Note: this is only taking into account the views presented in this article, and is in no way an objective evaluation.)",1543598375.0
OogieFrenchieBoogie,"I like commander, it's pretty easy to use",1543594176.0
highres90,"The 2 biggest in the node ecosystem are yargs and commander.

https://www.npmjs.com/package/yargs
https://www.npmjs.com/package/commander

They're both great and out the box help you build a really professional CLI tool 🙂

I use yargs personally for no other reason other than it was the first I picked up. 

For cool colour output I recommend using chalk.

https://www.npmjs.com/package/chalk

For consistent formatting of log output and ease of applying things like pefixes I recommend the great logger Winston.

https://www.npmjs.com/package/winston

Hope this helps!

/Edit - spelling",1543604244.0
Nishruu,"You can also check out [oclif](https://github.com/oclif/oclif) by Heroku

I had nothing but good experiences with it, and it also works _really_ nice with Typescript which is a huge + in my book. It's also a 'batteries included' type of library.",1543596765.0
aequasi08,"I've loved using \`oclif\`, with [https://github.com/SBoudrias/Inquirer.js/](https://github.com/SBoudrias/Inquirer.js/) and \`chalk\`

&#x200B;

execa and listr are pretty handy too",1543594375.0
masonlee,"Side note:  When you are done with your CLI app and you want to distribute it, you can use the [""pkg"" node module](https://github.com/zeit/pkg) to package your code, its dependencies, and node itself into individual binary executables for linux/mac/windows!",1543617750.0
ferrx,I like yargs. It’s pirate themed. ,1543630857.0
thistoohard,I’ve never made one. But what features would you implement? I guess what things can you do?,1543603700.0
mattallty,"You may try Caporal: https://github.com/mattallty/Caporal.js (I’m the author, if you have any question, feel free to ask)",1543604106.0
BloodAndTsundere,I think it depends on how much functionality you need. I tend to just use minimist for command line options. It's very simple if your needs are simple.,1543623709.0
panbhatt,"Use VORPAL. [https://www.npmjs.com/package/vorpal](https://www.npmjs.com/package/vorpal) 

I have used this library in two of my projects and its awesome and plain simple. I think it is also being used by some of the heavyweights over the internet. Let me know if you need any help. ",1543846786.0
Charles_Stover,"The NPM charts website itself may have been having technical difficult, not NPM itself. NPM Charts is not made by NPM from the looks of it.",1543598560.0
enkideridu,"Hi! So awesome to see people posting with links to npmcharts on reddit :D

You're right, npm's downloads infrastructure occasionally suffers from outages

They do share information about it here https://status.npmjs.org/

The one in may is this incident - https://status.npmjs.org/incidents/b4ktc38pypd1

The one in early November is here - https://status.npmjs.org/incidents/34dp7vqc8d1j

The one in late November is here - https://status.npmjs.org/incidents/34dp7vqc8d1j

Thanks for using npmcharts btw (not affiliated with the npm org)",1544156110.0
Thugmuffin09,Finals season,1543599502.0
Dieoffury,"A web trading platform? So I guess a crypto exchange? Do you have a team? If not, run.",1543587875.0
seedlio,"In an effort to get an API up and going pretty fast, I found AdonisJS to be pretty helpful. ",1543587415.0
aars,Research is part of the job. An important part.,1543592807.0
Downvotes-All-Memes,"I don't think you're asking a good question, and that's why you're not getting good answers.

Like, I still am not sure what you are supposed to do. And you say to write your project in Node, but that the backend is alreayd written in PHP. So do you really need to write just a frontend that hits your company's API?

Max Schwarzmuller's VueJS course on Udemy makes a stock trading app. You could literally copy it, I guess.

Maybe you should seek clarification from your employer on what the requirements are. Is it just a proof of concept thing? ""promotion as node js developer""? 

Maybe English is just not your first language and that's why it's not coming through well, I don't know. ",1543687322.0
thistoohard,Run Python scripts with Node child processes. ,1543551319.0
ns_helloworld,"> If I built a server, like with express or somesuch, would that API through HTTP requests be as fast as simple socket servers to receive a machine report and process the data then save it to the database? Is there much overhead between a simple TCP socket and an HTTP request as far as speed goes? 

As far as I know, no, it would not be as fast as socket servers because the HTTP request,  by definition, introduces extra overhead for each request via the headers, and special formatting you have to adhere to. Whereas with  websockets, it makes an initial connection, and after that you can send messages with very little overhead.

> Our website is huge and synchronous in the way it loops through a customers list of machines to produce tables, etc. I wish to replace it all, but is it feasible to replace parts of it at a time? Not sure how I would configure Rails to do so (it's 2.3.5, yeah, i know) or if I could do it a page at a time. Or, how clumsy would it have to be to embed some processes or website components from a node server into a view served up by Rails? I think I could pull this off if I can configure it correctly and if I can do so without it being a convoluted mess. 

Sounds like a really big undertaking. Without knowing exactly what  it is/what it does It's  hard  to say if its feasible to replace parts of it at a time. In any case, if you want to simplify it, I would suggest using something like API Gateway  with Lambda proxies (these are AWS services, but you can use other cloud providers to achieve the same thing) to split up your code, which sounds like a monolith, into more manageable microservices.

&#x200B;

Where does your application live currently? On one big server in the cloud? One big server in your company, or in some data center you pay for? Is it on many different servers? etc.

&#x200B;

It sounds like if you have a lot of data-intensive scripts, it might be a good idea to split  those up somehow to run asynchronously via a lambda function, so you can run them in parallel.",1543553656.0
BehindTheMath,hosts only has 1 key. Its value is an array which has 2 items. ,1543549295.0
Jacksonp2008,"Got it.  thanks to all, this seems to work:

    function getHostMatchRuleCount(ruleID, eventCallback) {
      CT.getHostMatchRule(CT.options, ruleID, function(hosts) {
        var keysArray = Object.keys(hosts.hosts);
        var count = keysArray.length;
    

&#x200B;",1543553240.0
NetOperatorWibby,"That room was so empty, yeesh.",1543562047.0
ThatBriandude,Could someone provide a tldw?,1543590839.0
JackAuduin,Wonder how this looks next to loopback.io,1543588421.0
PM_ME_YOUR_COMBO_VID,I would recommend using the singleton design pattern for a websocket.  This allows everything to get the same instance of an object.  [This link](https://stackoverflow.com/questions/47964655/js-socketio-singleton) should help you get a good start.,1543524680.0
Shreya_JS,"If you're facing the issue in test out the code then you'll be able to do that with this tool.

[Firecamp - Universal DevTool For Realtime](http://firecamp.app/).

Let me know if this is works for you.",1543561518.0
MinicD,"Best practice with connections (database connections, socket connections, etc...) is to use Singleton pattern, so you reuse the same connection everywhere.

&#x200B;

Have a **socket.js** file for example.

&#x200B;

`const socketIO = require('socket.io');`

`const server = require('http').createServer();`

`server.listen(8000);`

`module.exports = socketIO(server);`

&#x200B;

Then in your other files, you just import it and emit messages:

`const socket = require('./socket');`

`/* API logic here */`

`socket.emit('userRegistered', '${user.name} has registered.');`",1543571890.0
whatisfailure,have you checked if client is defined in that scope? ,1543530165.0
theogravity,"you need to catch the errors and deal with them appropriately

&#x200B;

If you use express, this is a handy guide:

&#x200B;

[https://expressjs.com/en/guide/error-handling.html](https://expressjs.com/en/guide/error-handling.html)",1543523125.0
MoTTs_,Affiliate advertising.,1543515801.0
sioa,"> Sexual Matrix

I never expected to come across a GitHub repo that's NSFW. :P",1543527035.0
thistoohard,Mastering Node Js from Packt is awesome. Anyone read this one?,1543519507.0
OrganicUse,"""This title is not available to claim on this day"" - that was quick.",1543536755.0
rizwanahmed19,Can anybody share this book here please? It's no longer available,1543695813.0
kkinzeyy,We’re about to start Node.js in the boot camp I’m currently in. This is going to help a lot. Thank you!,1543521962.0
Charles_Stover,Looks solid for small apps. I'm not sure how well this handles scale.,1543504956.0
davidmdm,"Im not sure a 

    for async (...)

Loops exists. 

I think you mean

    for await (const x of asyncIterable)

",1543722561.0
mylesborins,"Hey All,

Was unaware of exactly how damaging this was. I've opened up a PR to do a ""semi-emergency"" release proposal to patch 10.x tomorrow.

&#x200B;

[https://github.com/nodejs/node/pull/24711](https://github.com/nodejs/node/pull/24711)",1543467465.0
ndboost,"Have you local at your local gpo? There is a setting to disable updates. Either way, this is a legit way to not get enterprises to adopt node...",1543458952.0
tinydonuts,There's probably a lot of people out there that would love to get their hands on this to stop Windows 10 from updating. ,1543461876.0
hopfield,How does this kind of bug make it into the LTS release? Shouldn’t it be caught in the latest first? ,1543474618.0
maushu,"Yeah, it's seriously weird how many changes it makes to the OS.

Other thing I noticed (besides some glitch which kept making the machine reboot) is making cmd run Admin without telling you so be careful with that. ",1543458512.0
mattindustries,https://www.thewindowsclub.com/reset-all-group-policy-settings-to-default,1543459681.0
brtt3000,How can it do this? What fucking security model do we even have these days?,1543481837.0
tdat00,thank you for the call.,1543459184.0
SizzlerWA,Can’t you use nvm like we do on macOS or run in docker or an Ubuntu VM?,1543475899.0
existentialwalri,node LTS the only LTS that will completely break your system in an update,1543627164.0
ThePantsThief,Sign me up chief,1543661262.0
7c4f2bc63adadcda8ec7,"You guys are working overtime lately to convince me (from operations/security land) that nodejs isn't a horrible mistake.

/s",1543614719.0
WeirdBeardDev,"I just installed this yesterday morning, looks like I have some cleanup to do when I get released from my day job.",1543503827.0
Hemlck,I tried installing it too not that long ago and I had to restore my computer.,1543503912.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/programming] [Bug: The latest NodeJS LTS can make permanent changes to Windows Update and UAC](https://www.reddit.com/r/programming/comments/a1u6ge/bug_the_latest_nodejs_lts_can_make_permanent/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1543597142.0
DJDavid98,"I shrugged it off when Windows 10 said updates got disabled by a Group Policy, I went through all rules on my clean installed OS and none were set. I figured it was another one of Windows 10's quirks, and I don't see the warning about ""Your organization is managing these settings"" anymore, so I guess I'm good?",1543525909.0
GGENYA,"Sure enough, when I rename the file derp.html, it's not served from the static call, it flows all the way down to the route where res.sendFile(path.join(\_\_dirname, ""client/build"", ""derp.html"")) finally does it's job... if someone has a more technical explanation that would be nice. ",1543451302.0
jchristie21,Are you evaluating on the client side?,1543447096.0
guymograbi,"Have you thought about library called bottleneck?
https://www.npmjs.com/package/bottleneck

Used it recently for a similar issue. ",1543444631.0
umib0zu,"My brethren: remember the [gang of four](https://imgur.com/a/RurCxcr).

You need an event emitter (observable). An example is [here](http://jsfiddle.net/0bt1fm5e/).

You could also get a little less functional using some patterns and syntactic sugur like [Promise.coroutine](http://bluebirdjs.com/docs/api/promise.coroutine.html) or if you're using Babel of some type, a recursive async/await. ",1543451570.0
mustNotTrollOnce,"OP, I found the Asynchronous nature of JS difficult to throttle.  I was tasked with working with an API which had various usage limits.  In fact, this example is pretty similar to what you have in your code.

This is what I ended up using:

It's an example showing use of Async.js's Queue methodology. Basically, it's a task queue that lets you fire off asynchronous tasks in batches, as well as throttle those batches (so as not to overwhelm API)

[https://github.com/yongzhihuang/PentaCode/blob/master/AsyncJs/asyncQueue.js](https://github.com/yongzhihuang/PentaCode/blob/master/AsyncJs/asyncQueue.js)

(Note-- you don't need lodash. You could use vanilla JS methods like .map instead of \_.each for example.)

What they do in that above example:

1. Create an array of tasks.
2. Push each task into the queue.

When all tasks are in the queue, the queue begins firing.

When it's empty, it calls 'drain' which basically just tells you that it's done.

It has been a while since I used it... but I suggest playing around with it to see how it works. **Check out the video below, it gives a good demo of it**

This is Part of a larger series of examples showing useful functions from npm’s async library: [https://github.com/yongzhihuang/PentaCode/tree/master/AsyncJs](https://github.com/yongzhihuang/PentaCode/tree/master/AsyncJs)

They also have a **video demo** here: [https://www.youtube.com/watch?v=WXF8RxqhP\_c](https://www.youtube.com/watch?v=WXF8RxqhP_c)

Here is async's documentation: [https://caolan.github.io/async/docs.html#queue](https://caolan.github.io/async/docs.html#queue)",1543455593.0
Actually_Saradomin,"Yeah, do it right by using the token bucket design pattern.",1543456840.0
runvnc,The tricky part that I ran into is that sometimes what you do depends on whether you are currently rate limited or not because it is time-sensitive.  So I built an in-memory request reservation system.  If I can't get a reservation for certain things I just back out of that action. ,1543527704.0
,[deleted],1543437359.0
FormerGameDev,"I hate how ""framework"" is synonymous with ""web server"" here.
",1543449920.0
Str4yfromthep4th,These articles are so stupid. Stop spamming /node with your ads.,1543442687.0
Bacon_loves_Steve,"I assigned console.log to alert today. I think that should be on the list too, luckily browsers don't allow you to do such abominations though",1543430082.0
Neonsamurai1980,I use homebrew since about 5 years. Never had issues. It's really convenient to install command line tools. However for Node I don't use homebrew but nvm (node version manager). It's really handy to quickly switch between multiple Node versions. Or go full virtual with Docker like recommended in another reply. I prefer the nvm way tho.,1543437710.0
fucking_passwords,"Not sure about the symlinks but I don’t think homebrew is great for beginners who aren’t used to command line package managers. Node’s official recommendation these days is a very user friendly installer, which is undoubtedly easier for people to get started with.",1543430815.0
ElectricLabrador,"I really don’t want to add to your madness. But I would like to recommend learning Docker when you are ready for the next step. You can avoid installing node and just worry about your package.json.

Again, this is probably for another time but I would add Docker to your learning queue.",1543436067.0
,[deleted],1543423100.0
cam861,"Auth0 (https://auth0.com/) is great. Has a free tier and allows you quickly implement social authentication (Google, Facebook, GitHub etc). ",1543439152.0
avooloo,"I think you can use firebae for your login system and Google takes care of a lot of that stuff for you. 

Or you could do it on your own using packages like, joi, bycrypt and your desired db. For joi you'll have to know a little regex, but there are probably packages similar where you wont have to. ",1543422487.0
mustNotTrollOnce,"Can you? Should you?Personally, I desired the capability of creating and using encrypted data.

I decided to use bcrypt to create my own encrypted user system as part of an app which requires a user system.

[https://www.npmjs.com/package/bcrypt](https://www.npmjs.com/package/bcrypt)

It was pretty easy to implement in an expressjs app. (along with express validator -- [https://express-validator.github.io/docs/](https://express-validator.github.io/docs/))

I wanted to create my own for three reasons:

1. my app is for learning purposes primarily
2. I wanted to learn how to encrypt stuff
3. I wanted to own my own user system data

Just to play Devil's Advocate: Can someone who advises against creating your own encrypted user system please explain to me how one can go about hacking bcrypt's encryption system?",1543456374.0
ResponsibleLife,"You can use https://www.netlify.com/docs/identity/.

",1543433968.0
ItalyPaleAle,"Don’t implement your own authentication, it’s too easy to make dangerous mistakes.

Build your app with third-party OpenID Connect providers. Not only their code is safer, but they are in the position to use AI to better identify trends and protect you better (eg if someone logs in from Seattle and 15 mins later logs in again from London, then they flag that as suspicious; they also have the data to figure out attacks by looking at patterns worldwide).

Popular solutions (all free and based on OIDC): Auth0, Azure AD, Google directories",1543453462.0
rwieruch,Maybe this one helps you as well: [A GraphQL Express Server with JWT Auth](https://www.robinwieruch.de/graphql-apollo-server-tutorial/),1543463955.0
monsto,"I don't know much about the specifics of Hapi versus everything else, but I know it is the late stages of a very tired and common path...

Very few seem to recognize the value of proper documentation. Terrible Docs leads to frustration with the product, leads to users eventually jumping ship to anything else, leads to the product developer directly appealing to the unwashed masses to come back to their product.

Want people use your framework? Fix your documentation.",1543426710.0
sole-it,was testing hapi but was confused by their doc. ending up using egg.js which is built on top of koa and has all kinds of helper libs built in. couldn't be happier.,1543423056.0
Yo_Face_Nate,Fun fact: originally built by Walmart,1543437331.0
NetOperatorWibby,"I had an exchange with the creator of Hapi on GitHub once (or maybe it was Twitter) and he came off as a dick.

Told a friend about it and he laughed, stating that he’s always been that way. I believe I was asking for clarification on one of his many projects that looked interesting and there was little to no documentation.",1543434010.0
oorza,"This reads really desperately, in a between-the-lines kind of way.  It's like he's trying to paint a lipstick on the ""our community is leaving in droves because we rewrote everything and broke backwards compatibility and still didn't make anything as easy to do as it is with express"" pig.  The only time he mentions developer experience is to say that he agrees with his own decision making, whether it's popular or not, and he doesn't make any comparisons between hapi and other Node frameworks in terms of ease of use or accessibility or anything.  DX is the number one factor, if not the only factor, a lot of developers use to evaluate which framework to use, and not making direct comparisons here feels like a tacit admission of inferiority in this area.  

All of that said, a lot of his benefits boil down to his own trust in himself and his own ego. If the idea of every pull request and change bottlenecking through a single developer who is known in the community for not taking criticism or suggestions very well sounds like a feature instead of a bug, I don't know what to tell you.  The BC breaks in version 18 gave us a window to abandon hapi, and all of the developers at the company are happier and more productive for it.  Configuration-instead-of-code left the industry for convention-over-configuration and configuration-as-code a long time ago, and for good reason, but hapi is still out there waving the huge esoteric  JSON config flag like it's something anyone wants.

I also like how he espouses the quality of the documentation in hapi, which is often out of date and occasionally incorrect because it's so out of date.  They've been on version 18 for months and it's still not in the changelog, but everything is documented, okay buddy lol",1543419725.0
thelinuxlich,I prefer Zeit/micro. It's a enlightening experience working close to pure Node,1543415174.0
TheNiXXeD,"We use hapi at work and like it. We wrote an abstraction around it to simplify things even further letting you have a ""routes"" folder and each one gets loaded as a route with the correct auth and such.",1543435936.0
vmajsuk,No way you can convince anyone without giving code examples...,1543437149.0
,"No offense OP, but this doesn't seem like a very quality article.

It's short, general, and vague.  Seems like there's a bit of ""Here's one single example in one single area why we're better."" But you only cover that difference with one or two sentences.  That's not much space to explore differences and improvements over competitors.  It's not much space for anything but an introduction... which then moves on to simply introduce other things.

It's a bunch of introductory sentences and paragraphs compiled into one article.  But it doesn't expand on the topics it presents.  Therefore, it is not very useful. 

It's like ""We're better because Express does this one thing which requires you to be slightly careful until you understand (the simple reason) why.  Our solution is harder to mess up that way."" 

I mean... I fail to see how this article justifies learning a new framework... or how it justifies itself as somehow better than Express.

I skimmed it and didn't see much of value in the content.  If you really want to persuade people to use Hapi, be more explanatory and compare specific points of interest with competitors.

This reads like a blog for non-tech people.  That's not really your audience.  Compare it head to head with ExpressJS, or heck, even Django & Flask.

&#x200B;",1543514313.0
FormerGameDev,"> Originally developed to support Walmart Black Friday scale

.... anyone notice how hardcore Walmart went down this past Black Friday?

... as a current user of Hapi, I happily (har har) disagree with almost everything in this article that is not an objective fact.

* edit: i would like to add, actually, that using Hapi is fucking hell.  I'd advise against it.
",1543448085.0
kepaojiushike,My first decision is go,1543413045.0
GoblinsStoleMyHouse,Can't you just build the REST API yourself with something like Express?,1543419633.0
sumdudeinhisundrware,"You can do this incredibly easy with Redis lists and blocking pops.  Put the jobs into a list , have the clients pull the task with BLPOP when the client is finished it puts the task into a ""complete"" list and the ""task manager"" listens on that list with BLPOP

[https://redis.io/commands/blpop](https://redis.io/commands/blpop)",1543419878.0
dio64596,What’s the runtime of your jobs?,1543422629.0
mustNotTrollOnce,"OP, this might help you out--

It's an example showing use of Async.js's Queue methodology.  Basically, it's a task queue that lets you fire off asynchronous tasks in batches, as well as throttle those batches (so as not to overwhelm API)

https://github.com/yongzhihuang/PentaCode/blob/master/AsyncJs/asyncQueue.js

(Note-- you don't need lodash.  You could use vanilla JS methods like .map instead of _.each for example.)

What they do in that above example:
1. Create an array of tasks.
2. Push each task into the queue.

When all tasks are in the queue, the queue begins firing.

When it's empty, it calls 'drain' which basically just tells you that it's done.

It has been a while since I used it... but I suggest playing around with it to see how it works.  **Check out the video below, it gives a good demo of it**


This is Part of a larger series of examples showing useful functions from npm’s async library: https://github.com/yongzhihuang/PentaCode/tree/master/AsyncJs 

They also have a **video demo** here:
https://www.youtube.com/watch?v=WXF8RxqhP_c

Here is async's documentation:
https://caolan.github.io/async/docs.html#queue",1543433756.0
zokker13,">am I creating too many connections or something everytime I import it?

No, any import is cached and reused before the file is actually loaded and put into the interpreter.

An interesting thought would be if you clear the cache though. Then I could imagine that memory is leaked easily.But I haven't seen a single case of dropping the cache outside of testing so I guess it's not a requirement for you.",1543409452.0
HasFiveVowels,Be sure to close your connections,1543419606.0
ExoticCoder_57,"I have some similar doubts about that. I do something similar that the example you're showing but I connect differently to my MongoDB. Usually I use:

```
mongoose.openUri(// MONGO_URI).then().catch();
```

And close my connection with the `process` event `process.on(""SIGTERM"", () =>. //Here I close the connection)`. But, when I need to test it using something like **Jest**, the tests keep running because Jest doesn't let mongoose (o that's what I think) close the connection detecting `Open Handles`. ",1543436305.0
Triptcip,"You should only need to establish the connection in app.js so that the connect function only runs once.

The models don't need to call the connect function because you will already have established a connection by the time a modal is trying to get the data from the dB. You can just import the mongo package in your model, i.e. `import mongoose from ""mongoose"" ` so you can create your schema.",1543414868.0
del_rio,"I've got mountains of empathy for those who hold the burden of package maintenance.

That said: ""It's not fun anymore"" answers why he didn't want to maintain the package, which is fine. It *doesn't* answer ""why would he hand over a popular package to a stranger""...but there's nothing to gain from an answer anyway.

This should be a cautionary tale that every maintainer and hobbyist should learn from: It's better to let your code go stale and let the community fork it than to relinquish control of it.",1543429271.0
IntermediateSwimmer,"This really does highlight a major issue with the nodejs ecosystem

Our information security org here is literally in meetings now about whether the risk of using nodejs is worth it (too bad guys, most of our systems are already on it...). I hope we can find a solution that works for everyone here",1543427812.0
OmgImAlexis,All in all I still don't understand why he passed the rights to a random dev.,1543441608.0
thistoohard,Why? What is this doing?,1543451719.0
cyberst0rm,"https://www.npmjs.com/package/bottleneck

works",1543378310.0
klinquist,"I typically just use a ""validateIncomingRequest"" middleware on all my routes .. from there you can choose to do a ""whitelist"" or ""blacklist""...",1543382407.0
ItsAStuckPixel,You could have a single service that checks user info before your endpoint is called.,1543377729.0
BehindTheMath,"Use ES6 modules, and use babel to transpile an additional version with require. If you want to support browsers too, you can make a UMD bundle. 

Use named exports, not default exports. ",1543369949.0
ecares,"As of today, you should never use ES modules:
* In Node, they are still experimental and not ready for prod
* With transpilation, they do not follow the ES6 modules specification and therefore should not be used",1543390293.0
tamalm,Or better try TypeScript. You can thank me later.,1543399440.0
NoInkling,No fix for the broken REPL history issue introduced in 11.2 :/,1543386920.0
SpaceboyRoss,"This is good, I’ll update to it today.",1543417171.0
skeliskull,"If the project stays small it really doesn’t matter.

However, you should consider having layers of abstraction.

Common practice is to have:

Gateway (controllers/endpoint/etc) > services > data > mongo


Right now you have all this logic in your controllers which isn’t great.",1543387969.0
shakefu,Look at using mocha or similar for tests. ,1543368199.0
kwiwksh,This is what Deno (TypeScript RunTime written in Rust by the NodeJS creator) is proposed to help solve. https://github.com/denoland/deno,1543343623.0
nucleocide,"By default any module loaded by Node will have complete access to the filesystem, limited by what the user executing the process has access to of course.

There are absolutely security implications, just check out event-stream!

The Deno project mentioned in this thread proposes to either grant full access or no access, I believe, though Deno permissions aren't going to benefit a Node project.

If you're interested in fine-grain filesystem access restrictions take a look at https://intrinsic.com. Full disclosure: I work for Intrinsic.",1543344586.0
Thaerious,RemindMe!,1543343551.0
Quadraxas,"you dont have to. if you already did the auth part(got user info json) you already did most  of the stuff passport does for you.

",1543347651.0
thepeka,"\_\_proto\_\_ is deprecated in favor of Reflect.getPrototypeOf.. you're amiss to show using it to access an object's prototype. If you want to shy away from explaining Reflect, at least fall back to Object.getPrototypeOf.  

Edit: also, when explaining how it's possible a function can be an object, I would at least briefly explain the internal property [[Call]] so the reader understands that being callable is defined behavior from the engine's point of view and it's not just magic nonsense.",1543349063.0
theTypeScripter,Please hit the clap button on Medium if you enjoyed the article,1543344504.0
ElectricLabrador,"I believe a majority of your issues would be solved by better utilizing Git. 

1. Use a private repository in GitLab, GitHub, etc. to share code and let your developers run the development and production sites locally.
2. Keeping both dev and prod on the same machine is fine. Use Git branches to keep dev and prod separate and up to date.
3. I have not used express-basic-auth but it seems vulnerable to a brute-force attack (constantly sending HTTP requests with different passwords). You will need additional levels of security (limiting password attempts, 2-factor authentication, tasing passwords to avoid saving plaintext in your source code, possibly more) in order to be production ready. I also do not think this will prevent your page from being indexed.

TL;DR - Start with learning more about Git. Then upgrade your security. Then make the site public.",1543335041.0
Downvotes-All-Memes,"Just go right to Udemy and buy this course if you want.

I'm taking it now, and I've got to say I'm a little disappointed. It's just a *lot* of stuff and I think Max made some weird decisions about the order of things. There are entire modules on saving text to the file system, and fucking around with records that way.

He builds things incrementally, but it feels a little out of order. I can see the value in some of the *topics* of the modules, but I don't want to spend a few hours building functionality into the demo app only to rip it out and start using MongoDB queries, only to rip those out and start using Mongoose.

I wish he had started with a simplest mongoose case, repeated it and made it a little more complicated on the GET and POST routes, and then let me try to update the other CRUD features.

I think I would be a little lost on this course if I hadn't already taken Mosh Hamedani's Node course first, though I would say his is a subset of the API portion of this course he does a more logical explanation of Express/middleware from what I've seen so far.

Max's (this) course does cover a *lot more topics* so I hope that by the end I'll be able to put it together more, but right now it feels like a strange combination of pre-requisite knowledge needed, but the course is a wide coverage of a lot of topics seemingly aimed at a beginner.

# Having said all that, this course is of course a steal for $9.99",1543409861.0
jkoudys,"Each module is in its own scope by design. Projects will often be thousands of these modules, so you'd run out of variable names pretty fast. 

Put your `require` in the file that needs it. ",1543325771.0
Capaj,"oh nodemon sucks for sure, but there are other alternatives you can use instead. For example [node-dev](https://github.com/fgnass/node-dev).

So far I've only used parcel on small projects, but it seems to handle anything I throw at it very well.
When we manage to get rid of angular.js in our main app at Looop I'll give it a spin there and that's quite a big project.",1543323046.0
jkoudys,"I loved the idea in theory. I work on a Chromebook, and have always preferred a light machine to a powerful one,  so being able to use all my cores really speaks to me. It's meant to be faster overall too, so I'd hoped it could save on a few Bitbucket pipeline minutes. 

Alas I just couldn't get it to work. I think the whole ""zero config"" trend is just a silly way to say ""heavily opinionated"". That's fine for something like prettier (I don't always like the rule, but I'd rather be consistent than do everything my own way), but for existing projects of considerable size it's not a great fit. 

One thing I did really like was its adherence to picking up the config for the tool itself. When I decided to stay with webpack, my config was better for it, because I was doing much less in my webpack config and simply importing the configs, eg for babel. Now I'm setup to use that stuff from the CLI. ",1543324756.0
panbhatt,"Parcel is good for small to medium projects, it your project cross the boundary that definitely webpack is the better solution. 

Also to restart the app once the code changes (live deveopment server) you can use webpack server functionality. For same thing on the server side you can make use of backpack.js (i used it personally and quite happy with it). ",1543324443.0
thistoohard,It’s not web pack. Just use the god damn package and see if it works for you. Best of luck!,1543323102.0
Neekoy,"It sure does help to understand how authentication works, however it's a whole lot of encryption and stuff you won't really need to know to get your project running. Take a look at the PassportJS documentation, watch a clip or see a Git repo where it's already implemented, and give it a try yourself. It's fairly straightforward and actual pros are maintaining the ""security"" part of it.",1543282811.0
CanIhazCooKIenOw,"Wanted to have a script to generate library folder for publishing. Research I did at the time didn't yield any results so decided to take a stab at it and came up with this.

Most libraries I've checked have their own publish script, this is an attempt to simplify it",1543272620.0
unwind_protect,"They fit a different software architecture.

They are for building apps that run in the clients browser. So think similar things you could do with a desktop or mobile app in terms of reactive UIs and complex state management, but just limited to a browser environment. They don't need to refresh the browser when navigating between pages, instead sending requests in the background. Examples of sites using this architecture: Reddit (new design), Facebook, Twitter, Gmail, Youtube and Instagram.

It's popular to pair them with node (using node as an API) because then your stack is full javascript (or your choice of language that compiles to JS).",1543269293.0
MatthewMob,"React is for client-side interactive user interfaces.

Templating engines like EJS are for generating and rendering HTML to be sent to the browser.

You can use a combination of React and EJS if you want, even.",1543296771.0
Earhacker,Wasn’t there a blog post about pretty much exactly this happening about a year ago?,1543262255.0
runvnc,"My opinion is this.  If we want it to be easy to publish and consume packages, there is going to be a little bit of risk now that the ecosystem is so huge.  However, despite the fact that we have been putting all of this trust in strangers, the number of serious incidents is very small.  At this point we've actually proven that 99.999% of people publishing on npm are trustworthy.  But we have this incident.  Does that mean I am going to stop using npm? No, just like I'm not going to stop walking in the street despite the fact that thousands of people get killed like that every year.

However, if people are really concerned then they can create their own vetted list of packages and even their own repository or tool.  I probably won't use it because I see the open system as massively useful and very rarely having a serious issue.  But people are free to do make their own tools and or registries and everything.",1543274186.0
takuhi,"I admit this doesn’t look great, and the discussion on GitHub issue is just going around in circles trying to blame somebody.

Instead of blaming the maintainer, or the community, or developers just trying to do their jobs, we should try and figure out how we can make Node safer. It’s not impossible (but maybe a bit time consuming) to introduce some security features, like restricted file and network access or something similar to a CSP.",1543265974.0
ukralibre,It was a matter of time when someone will adopt old library with bad intentions,1543261385.0
maiam,wow that issue thread is a total shit show,1543266839.0
totalbytes,"I scanned all my projects within a folder like this:

```find . -maxdepth 1 -type d \( ! -name . \) -exec bash -c ""cd '{}' && npm ls event-stream flatmap-stream"" \;  | grep -i stream```
Then simple to update.

To your success!",1543323939.0
BigDane1992,I hope this problem sparks a more serious discussion about funding open source projects. Nowadays most companies are leveraging open source software and little do pay anything for the improvement in developer productivity.,1543317196.0
SquishyDough,I see a lot of people saying that npm as a whole is outdated and rife with these potential security issues.  Anyone got recommendations on alternatives?,1543262464.0
avooloo,So how do you remove event stream? This is a dependancy of nodemon. Are we no longer able to use nodemon? ,1543335065.0
,[deleted],1543291368.0
cubisto,"You're trying to convert Promise to JSON.
Read more about promises and async/await
````
router.get('/', async (req, res) => { 
  result = await item.find();  
  res.json(result);
});
````",1543261031.0
NovelLurker0_0,find() is an asynchronous task here.,1543259920.0
york2k,May be item.find() returns Promise?,1543258821.0
iEatDringSleepCode,"There's a cool free tutorial for [cloud-based Node APIs](https://academy.appdrag.com/index.html).

This series puts you through the setup of a full authentication system and dynamic content creation.

The platform is hosted on AWS, so the functions begin at the Lambda call.  But you do get a good grip on what happens once you're in there.  You could install any NPM package you want, and the front-end is already integrated on that same platform.

If you want the real deal, there's an awesome tutorial on LinkedIn Learning.",1543253487.0
Charles_Stover,"Just following the Pluralsight path for Node. Skip parts you know, follow ones you don't.",1543252864.0
JonathanMaarsh,"I don't know about Pluralsight, but there a good Node.js book titled ""Node.js 8 the Right Way."" I'd recommend it",1543252446.0
mod-victim,"Express has body-parser (urlencoded and json) built in now so you can remove those modules from your project.   


See [https://expressjs.com/en/guide/using-middleware.html#middleware.built-in](https://expressjs.com/en/guide/using-middleware.html#middleware.built-in) 

&#x200B;",1543250832.0
ccleary00,"There's some good things here, but I'll add some feedback on things I would change as far as structure and decoupling goes.

In your routes, you have each route handling both the HTTP logic and calling the model.

I recommend breaking things out into layers. So HTTP logic (what deals with your Express req object and receiving requests from outside the application) is in your routes and controllers. And your business logic (and what calls operations on your models) would go into services.

I wrote more about [how I structure my REST API's by layering here](https://www.coreycleary.me/project-structure-for-an-express-rest-api-when-there-is-no-standard-way/) and [why you want to separate routes from controllers here](https://www.coreycleary.me/separating-logic-from-express-routes-for-easier-testing)",1543259260.0
josewhitetower,"I'm on mobile and that's why I can't look further. But your auth Middleware should use jwt.verify instead of just jwt.decode 
Why? Check here https://community.auth0.com/t/does-jwt-decode-functionality-verify-the-token-or-only-decode-the-token-if-yes-what-all-does-the-decode-function-do/9509/2",1543251189.0
The_Oxcorp,"I did notice you have a hardcoded url and port in db.js, not sure if that's recommended for GitHub repos or not. I'm still a little new to publishing on GitHub myself",1543256302.0
alabianc,"Use the standard net module to access your socket. Either TCP or or UDP. Now to establish a P2P connection between two client/server (since in P2P they kinda morph together) it is pretty straight forward to do if both Nodes are behind the same NAT. However it is more tricky of they are behind two different NATs (e.g: you are behind your WiFi and I am behind my own WiFi) . If that is the case you need to do something called UDP or TCP hole punching. Depending on the socket you use. 
UDP is slightly easier and can be done with using the net and dgram standard modules of Node. I have done it in the past and it worked just fine. However I have never done TCP hole punching with node (which may be a better solution for your hangman game)

To answer your question on deciding who is the initiator socket. The TCP hole punching will decide. Use net module to create a listening socket then listen for incoming connections. Now once each peer is aware of the other Peer's puplic IP/port you can do a comparison like if(myaddress < peeraddress) { doconnect() }
That way only one peer is connecting while the other is listening for the connection. Once connection is established you have a successful P2P connection :)

EDIT: Read this for hole punching. This is the technique I used for UDP hole punching with only native Node modules

http://www.brynosaurus.com/pub/net/p2pnat/",1543256461.0
SnowyMovies,"Separate your components into their own applications. Server and client. Unless you want to build the logic for self promoting master servers, for that look into Cote and redis-sentinel - to get an idea of how it works.",1543248381.0
hotdoghelper,"If you don't have to deal with different networks, webrtc can be used. Otherwise you need a turn server",1543255517.0
timeparser,Check this out https://npm.im/@hyperswarm/discovery,1543283264.0
FiniteEntropies,"Try mdns - [https://www.npmjs.com/package/mdns](https://www.npmjs.com/package/mdns)  
It takes out a lot of the complication of finding the other peers on the network, you can just launch two versions of the client on the same network and they will talk to each other.",1543252920.0
idanlo,"If you know python it's very easy for networking with sockets, there is a built in package socket, you can read more online. ",1543248251.0
AmericanWigeon,"It seems like the two most popular options are:

1. Using Edge (which seems like a project in decline)
2. Using Process Invocation (compile a standalone console app and call this)

Anything else I'm missing?",1543246047.0
neilhighley,"I would have thought the image MagicQ and Ghostscript libraries would do what you want. The thing is with Interop between different languages you generally need a common link. Edge.js must be facilitating that somehow (what a crazy presentation on that site). You could have a stand-alone json web service running which acts as a wrapper around .net class utilisation, but seems overkill if all you want to do is use a library to alter a pdf.

https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.1

https://www.npmjs.com/package/ghostscript-js




",1543248760.0
FatalMerlin,"Instead of using tight timeouts, you could consider processing the requests sequentially with promises.

Additionally you could wait until the promises complete and then write everything into a database.

E.g.:

    const clients = [
        'pc01.local.domain',
        'pc02.local.domain',
        ...,
        'pc40.local.domain'
    ];
    
    async function process (client) {
        return client.getDataAsync(); // replace with your *asynchronous* implementation
    }
    
    async function poll () {
        clients.reduce( // see: https://decembersoft.com/posts/promises-in-serial-with-array-reduce/
            (promise, client) => { // for each client, chain the task to the previous task
                return promise.then(data => {
                    data.push(await process(client));
                    return data;
                });
            },
            Promise.resolve([]) // start with a resolved promise with a collector array
        );
    }
    
    // then execute poll() every minute and write the results to the database.
    // be warry of failing promises in the chain!
    database.write(await poll()); // your scheduling logic here

EDIT: Added code example for better explanation. Might not be the best, I'm in a hurry. Hope it helps!",1543244105.0
MzCWzL,"RPi is not a fast piece of hardware no matter how you look at it. What are you using for storage? If you’re on a SD card, I’d imagine that time can’t get much faster. What part of the call takes the most time?",1543243375.0
brtt3000,Unless you do heavy processing on the payload or response this should not lock-up the main Javascript thread if you use async. Maybe the RPi is a bit slow and chokes on the 40 simultaneous networking IO tasks? You could try a queue thing that only allows a few concurrent at same time.,1543244034.0
DrunkGenesis,"Change the default npm directory.
https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally#manually-change-npms-default-directory
Then you can install global packages with your user.",1543247396.0
64_g,Don’t sudo npm. What is the error?,1543247175.0
BLOZ_UP,What's the error? Why did you give up and decide running it as *root* was a better solution?,1543247982.0
diogocapela,sudo npm install npm@latest -g,1543240134.0
ccleary00,"Hi, logs in Node should always write to console.log or console.error (which in Node write to STDOUT under the hood). The application code itself should never handle writing to log files, a database, etc.

[12 Factor logging best practices](https://12factor.net/logs) state this under the logging section.

The reason you should not write errors (or logs in general) to log files or have your application *code* handle log routing is that:

* makes log routing locations easier to change without deployments
* scaling applications/containers means it’s harder to have control over logfiles
* scaling applications also means they’re more ephemeral, meaning logfiles might not be there depending on the state of the container
* writing to, say a file or database, over stdout/stderr ties you down to those log targets, takes away your flexibility to pipe the output of stdout/stderr to whatever targets you want, and change this on the fly

Instead, the application environment (i.e. - container) should specify where the STDOUT log stream should be piped to for storage.

[I wrote a lot more about this here](https://www.coreycleary.me/why-should-your-node-js-application-not-handle-log-routing/)",1543238395.0
vladimirice,"I used Elasticsearch + Logstash + Kibana4 + Beats. 

Main idea is: you place your logs in file for ex. with help of winston. Then special agent programs send logs to separate log server. Here logs are parsed and at the end you (and your team QA) can observe them by convenient web interface with strong set of filters. You also can set an alarm messages to email for 500 errors, etc. 

Cons - it is not very easy to set and manage. If you have a team DevOps it will be ok for him. 

What about logs in DB? It is easier than separate server and might be convenient for the small apps. You can provide an access for your QA to such logs, it is easier than providing restricted access via SSH. 

But keep in mind that in a highload app logs will be very big and it will be required to put your logs into separate DB server. I think it is better to use specialized instruments for logs like mentioned above. ",1543212602.0
yonatannn,"This guide 3 items on logging in nodejs, might be helpful:

&#x200B;

 [https://github.com/i0natan/nodebestpractices#5-going-to-production-practices](https://github.com/i0natan/nodebestpractices#5-going-to-production-practices)",1543322336.0
dankmemegene,"I think what you’re looking for is Bunyan.js
",1543206938.0
delaet,I used rabbit and elk stack for logging. just send log to rabbit queue. then configure input logstash from queue and send to elashticsearch. You can search and filter on Kibana interface. Something hard to start but easy for future project.,1543233499.0
joesb,Your approach is actually recommended by 12-factor app practice. ,1543231458.0
jkh911208,I am professional at handling the logs but I personally prefer to log everything in DB.,1543205971.0
alinnert,It doesn't matter if it's a Surface or not. Node (and express) runs fine on any Windows machine and version. The same way it runs on other systems. The only thing you have to pay attention to is native/compiled modules that were written in a different language than JavaScript. But most likely they work just fine after a fresh `npm install` on Windows.,1543238344.0
thistoohard,Try it and see what the fuck happens. Let us know. ,1543208484.0
skisauveur,"Yes, I have several, no issues running node / express / postgres / docker etc. at all. 

",1543244768.0
scallynag,Install Docker and run it on Linux. Node on Windows is a pain in the arse.,1543258680.0
thistoohard,Fuck this Okta shit. How can this not be banned?,1543192704.0
mod-victim,Why the fuck would we do that?,1543219382.0
ferrx,"Nice example. 

I worry about using TS with node due to the typings required. If I need some random node module, I had to worry about it having typings..

A good approach for Node with TS is NestJS. It’s angular-like. ",1543193463.0
MonsterBluth,Isn’t that the whole point of NestJS?,1543221141.0
endjynn,"> Edit: Guys, I know how to hash a password and not to store plaintext passwords in a database.  The password is an environmental variable stored on Heroku or AWS or wherever. 

I think you will need to describe your architecture in greater details for us to be able to help you.  


&#x200B;",1543188132.0
endjynn,"Are you hashing your passwords?  
If you are storing them as plain text then that is very insecure. What if someone gains access to your database?  
[https://www.abeautifulsite.net/hashing-passwords-with-nodejs-and-bcrypt](https://www.abeautifulsite.net/hashing-passwords-with-nodejs-and-bcrypt)",1543186102.0
Nopik1,"You should \*never\* store unencrypted passwords, nor pass them to any program. At the \*very\* least, hash the password properly (with password-specific hashing functions, like pbkdf2 or bcrypt), then hash the input and compare hashes.

&#x200B;

Google for password security mechanisms, just a random article I've got is like [https://crackstation.net/hashing-security.htm](https://crackstation.net/hashing-security.htm) \- I'm not sure if it is 100% OK, but seems way better than your approach. There is much more materials on the topic than this. ",1543186198.0
n0mat1c,"I wouldn’t recommend this.  Changing passwords will have to be done manually. I can imagine with this solution it will be stored as plain text. This is the lowest level of security and authentication.

However...

If it’s a tight controlled group and for a small use case there may not be any harm. If you are doing anything of importance I would not recommend. Your levels of security will always be based upon how important the information you are guarding is. ",1543186360.0
hamburger_bun,"Also, it's worth noting that I'm sure Netflix has services written in other languages that are not Node.  

People generally say its not good for ""big projects"" because it's single threaded and not strongly typed.  Having said that, it's obviously possible to scale Node.",1543191135.0
jwindhall,"Because it’s not until a language is mature (over engineered), scales (full of weird tech debt) and has a thriving community (bought and ruined by Oracle), does a language become “good for big projects”. ",1543184850.0
jordanaustino,Could say the same thing about rails and Netflix or GitHub.,1543193059.0
T_O_beats,Because people are scared of change. ,1543183805.0
glorypron,They probably use a microservice architecture so no part of the Netflix infrastructure is a big project. ,1543190656.0
Abetheunicorn,"Because real programmers code in C.
Note the sarcasm here",1543193810.0
codeinprogress,"The place I work at, we have a very simple SaaS product with bunch of forms (no automation, no integrations etc). But the founders prefer using Spring boot with models, dtos, services and what not. They hate node and anything Javascript on server side (saying node is not scalable). 

Really grinds my gear when I have to write a new form and have to create controllers, models its dtos and related services. ",1543204146.0
mod-victim,Because old school/CS graduates that don't understand how JavaScript works get butthurt over it.,1543187229.0
moufoo,"It's mostly about standards. With most languages either the language itself or the framework you use already provide many standards. Typings are a standard, an MVC architecture is a standard, ...

The more standards you have the easier it will be to introduce new developers to the project, to scale, to maintain, ... You have a way of doing stuff and it can be easily shared.

Let's take Python's Django as an example. It's a heavily standardized framework providing a very opinionated but battle tested architecture. Any dev using python + Django will quickly develop some good reflexes about code splitting and single responsibility because of the way Django is written. And any dev who already has used Django can quickly and efficiently jump into another Django project provided he understands the business. Some of the framework's standards are universal and shared across every Django project.

Now let's jump to NodeJS. You start a project  and basically create your own framework from multiple librairies. Don't let anyone lie to you. There isn't a framework for JS which is equivalent to Django for Python or Symfony for PHP. Surely we are getting there but we are far from the maturity of these 2 frameworks. And if someone tells you about ""this new great framework which is the future of NodeJS"" just hold him onto his words cause I've seen my fair share of dead Node frameworks.

So because like me you don't trust any of these ""new amazing frameworks"" you build your own. Your first project is some express with sequelize to handle database connections because you did your homework. You then add some passport to handle authentication.

But no-one has told you about what a proper MVC architecture is, what data repositories are, services, models, ... So what you end up with is a project containing ~10 files of over a thousand lines, containing more security holes than swiss cheese. And you clench your butthole for the following years hoping you will never have to touch this code again because not even you can understand how it works. And of course, any line you would touch would most likely introduce a dozen regressions.

Now all of this can be mitigated with some architecture expertise but newcomers will still have a steep learning curve. Unless these standards are as explicit as possible, which means some extensive documentation to share them efficiently within your team.

But what happens in your next project? You switch from express to koa and from sequelize to TypeORM because why would you use those old librairies... And because of this constantly evolving stack the butt clenching will grow stronger as your standards will keep on changing from one project to another.

Or you could simply go for another language. A language with a proper framework which forces you and the newbies working with you  to split your code and give each class it's own responsibility. Which won't require you to write down 50 pages of documentation on your project's standards (because most will actually be included in the framework's doc). A framework which won't require you to search for 20 libraries to stich together either. A framework which will leave you a bit happier when having to work on older projects because most the standards you applied will still be the standards you are using today.

I am just scratching the subject here and some of my examples are oversimplified. But to my understanding, when old fashioned devs are saying NodeJS is shit, they are not actually saying that the engine is shit.

What they are actually saying is that you, as a dev, will do shit with it.",1543190612.0
klinquist,"Stringify (home automation app) is 100% node.  We are nowhere near Netflix scale, but 200k users, an automation engine, 70+ third party integrations are not bad. ",1543243516.0
ItalyPaleAle,"Not just Netflix. Lots of companies use Node.js, including PayPal and lots of other banks.

There’s nothing wrong with Node.js. It’s all about using the right tool for the job, which involves multiple factors, including the skills of the people who write the code, the business requirements, etc.

Personally, I think that people who dislike Node.js normally focus too much on the technology alone (wether you agree or not with that) and not on the other sides.",1543204088.0
RoboCopsGoneMad,"Because Netflix employs so many engineers they can do whatever the fuck they want. And they essentially have 1 product.

&#x200B;

You really don't want to compare yourself, your company, or your projects to those executed by a company with the tech budget Netflix has.",1543196607.0
cwbrandsma,"Ambiguous statement tho.  How much of Netflix’s uses node? And where?  I doubt node is the only system they are using.

For instance: my projects use node as well...to run our build process.   It does a great job at that.  The bulk of our system is built in .net.",1543184815.0
harbogast,"Netflix are huge - they use tons of languages.

Netflix use microservices, so the scaling would be done in the cloud by AWS.",1543227009.0
Timpi,"Where did you read that netflix uses node? I don't think they use it as their go to technology, they are still at the very involved in [providing OS technology for microservice development](https://netflix.github.io) - and they focus java there.

And to provide at least something to the main discussion:
I can't see why node would not be good for big projects, personally I don't like the folder in folder in folder in folder kind of project structure node tends to come with - but that might be my own problem as node is not my main technology and I haven't figured out a better way to organize my bigger projects yet. Plus, I would prefer a strongly typed language for larger projects.",1543243942.0
UnluckenFucky,We're I work we have a massive node project that we're moving to golang. Go had big performance benefits and the lack of a type system was slowing down development. ,1543252853.0
TorbenKoehn,"Node.js is single-core and single-threaded unless you actually use the clustering and process utilities, which bring in a new level of complexity for the typical web-app developer.

PHP as an example doesn't have that problem as each request runs in an individual process and can scale over multiple cores and processes easily without doing anything.

Getting into JS is easy, mastering it is actually pretty hard. Once you mastered it, you can do a lot of fun and really efficient stuff with it.",1543187954.0
mistralol,"
There is a few problems with it. Its mostly to do with package origin.

Its kinda hard sometimes to push a business case where you need 500 dep's and send each of the licenses off to legal to be checked word by word. Only to find out one of the sub packages cannot be used. Which means you have to remove it yourself or throw the package away.

Also what happens when you gets orphaned or non-maintained packages. If you using java, c# or something like that. You just phone the other company up and report a security hole and they will fix it. That doesn't work when the guy wrote the package your using in uni 4-5 years ago and is no longer interest cause his life moved on.

Its kinda hard to scale at times. 1GB is quite a small footprint for a large service. Big teams don't break these kinda problems up well either. They kinda just blindly run into a wall like this.

Have to remember a lot of people have used a lot of other things as well. So a lot of dev's have tools and code that they know, work and use no matter where they are working. So they have a vested interest not to change.

Also people don't tend to get fired because they picked Java or Microsoft or some big name framework provider. Cause you get support options, contractors etc... Though nodejs is getting there these days.



",1543188382.0
jwindhall,"Also, asynchronous concurrencies is confusing. Nobody likes debugging a race condition. Especially those not really that experienced with promises. ",1543185066.0
lulzmachine,"They mainly uses node for small ""adaptors"" between different front ends and their backend proper, which is written in statically typed jvm languages. 

Any big project with dynamic typing at its core will tend toward house-of-cardedness,to variying degrees",1543238745.0
dejaime,"Who says that? Never seen or heard that, honest",1543214356.0
theTypeScripter,Because some people are dumb.,1543350191.0
electric_creamsicle,"Most of Netflix's load doesn't have anything to do with their web services. Almost all of their traffic is due to serving video which is done over a CDN. The routing of that traffic might be done with a Node service but that's nothing compared to everything that needs to be served in terms of video.

Basically, they might use Node as a technology for services but that's not the scale that's usually associated with Netflix.",1543186152.0
Nyquiiist,"That statement is half true n half false. When people say it's not good for big projects, they mean Node is not suitable for your core backend systems at places like banks or amazon / walmart type companies which serve God knows how many requests per minute.

If you look at Netflix n Uber or Amazon n Walmart. Their core backend systems are still running on Java, Scala, Clojure .Net. 

Node does have its place and these companies use it as the middle layer. Im thinking of something like backend-for-frontend type architecture. FE interacts with Node n node will hit the downstream services for w.e u requested. Im not a backend guy but thats what we do at my wrkplace n we r a pretty big ecommerce retailer.",1543190225.0
PerfectOrphan31,"What i would do for a quick and easy test, though not in depth, is check that next is called and that err is truthy. This will tell you that there was an error that was correctly caught with your validation. Otherwise, like you said, you'll need to check for the entire error object in you `toBeCalledWith` function. ",1543185279.0
yonatannn,"Checking that the right error was returned is indeed critical (affects the UX directly - UI tier can act thoughtfully). There are 2 important expectations here: 

(1) It's an error object (otherwise you lose the stack trace)

(2) It has one classification property that tells the error type like error.code or [error.name](https://error.name). The node.js core errors include a ""code"" for example. I believe this is your ""type"" property, right?  


All the rest is semantics which doesn't worth a test. Are you concerend with how to implement these assertions in Jest?",1543326054.0
Str4yfromthep4th,You dont return the res object to the client. The res object has a send method. You return the data in there. That's the only problem. Eg. res.send({someprop: something}). Pretty self explanatory I would think.,1543176452.0
hags033,What happens when you log res? Possibly res.body?,1543162660.0
BehindTheMath,You probably need to use body-parser.,1543172674.0
5bkb,"I believe you can do something like this (this example uses [node-fetch](https://www.npmjs.com/package/node-fetch)):

    const fetch = require('node-fetch');
    
    app.get('/', (req, res) => {
        let x = fetch(...);
        let y = fetch(...);
        let z = fetch(...);
    
        Promise.all([x, y, z])
            .then(values => {
                // render using ""values"", an array with x, y, and z
            })
    })

There's good documentation on Promise.all from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all).",1543150526.0
boon4376,You're on the right track with promises. Learn async await it's worth it .,1543150286.0
CommandLionInterface,"What the heck is going on in this thread? By far the easiest and most common way to send a message from the client to the server is with an HTTP request. OP, try fetch or XMLHttpRequest. 

Yeah websockets are great but if you only need communication from the client to the server they're overkill. Literally the entire internet is built on HTTP requests. ",1543136338.0
bit-warrior1,"what do you mean by ""instantly"", at least your request has to reach server before you can do any kind of logging.  ",1543172721.0
,[deleted],1543126744.0
phitruongdn,"In node.js, two most used protocols might be HTTP and WebSocket. Depend on the design, if you want to achieve request-response or bi-directional. I'd recommend you just ignore node.js on this matter. Node.js is language that implement the protocols, so learn those protocols first.

In the client side, particularly web browser, you can only use Web APIs to send message, read more at [https://developer.mozilla.org/en-US/docs/Web/API](https://developer.mozilla.org/en-US/docs/Web/API).

Digging into Web API, you realize browsers have two ways to handle response from server. Switch/Reloading web page or keep the web page, and change the DOM elements on current web page.

The first approach is what we called multi-page application (MPA)/ server-side rendering and second on is technique to implement single page application (SPA)/ client-side rendering.

For change DOM elements on current web page, web browser using AJAX by [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)

Edit: I forgot to answer your question about logging. Node.js is asynchronous, so you must set callback after create httpServer

    const http = require('http');  
    const server = http.createServer((req, res) => {  
     console.log(req);  
     res.end();  
    });  
    server.listen(8000);",1543147096.0
ghillerd,"First off, instant communication between the server and the client is impossible because of science reasons. If you want your client to send messages to your server, a normal XHR message (like you can POST using axios or whatever) is fine, but if you want a server to talk directly to a client, you'll need websockets. ",1543120263.0
,[deleted],1543119879.0
jkoudys,"Learn mvc. Patterns are only good in the domain they're best suited for. MVC is strong for building certain kinds of systems.  While there are other approaches, ultimately what you need to learn (that'll help you anywhere) is how to decouple your presentation logic. The particular details of how that's done you'll figure out in time, but learning not to create side effects, include complex business rules, write complex algorithms, etc inside of presentation code will help you everywhere. 

Someone who's strong on MVC will pick up mvp, mvvm, flux, whatever pretty fast. Someone who waffles and doesn't commit to learning one approach really well will be good at none of them. MVC has the advantage of being popular, in common use for a while, and with many examples across languages. 

Edit: btw vue-cli has nothing to do with patterns. Vuex is a flux implementation. One of the biggest criticisms of flux is that many see it as essentially rebranding MVC , and many of the problems it solves are essentially just saying ""write good code instead of bad code"", and calling the good stuff flux, which is an argument to tautology. I don't go quite that far, but I do think a good set of reducers or stores isn't that far from a model, your components are the view, and the actions the controller. If you're enjoying vuex, learn vuex really well, and then you'll see how close it is to an MVC. ",1543113140.0
madScientistDood,"Its okay to throw an r in there and think of it as model-view-controller-router. 

I learned mvc in the traditional way in oop languages specifically java where we weren't concerened with routing in a browser. A controller shouldnt be used for routing in my opinion although im not the authority on patterns. ",1543113704.0
MyDogLikesTottenham,"I know nothing about Vue, and I’m still learning myself but MVC is actually really cool. It helps to keep logic that should be separate separate, and forces an organization to your code. Models should exist solely to represent data (from a db, or even an API), views should only be responsible for presenting data, and controllers are basically what connects the two when a certain route is hit. 

Often it can take a while working with a particular way to write code before you notice any of the benefits of it, but MVC is very popular so I’d recommend continuing to learn it. 

It’s also weird in Node because it doesn’t force that design on you, you can write Node programs a million different ways. I’ve been learning Ruby on Rails lately and MVC is essentially forced on you. ",1543106502.0
harrymurkin,"Before mvc the front end was completely baked into the backend. With mvc the front end is half baked into the back end. With angular, react etc the front and back ends unbaked and serve their natural purpose best.",1543114136.0
curlying,Very interesting series 👌 Thanks for sharing,1543146007.0
MoTTs_,"This article cites Alan Kay's OOPSLA ‘97 talk. Here's [that talk](https://www.youtube.com/watch?v=oKg1hTOQXoY), and here are the parts I found enlightening.

----

**The infamous quote, ""I did not have C++ in mind,""... but also not Smalltalk?**

    10:05 it's interesting to again to look at
    10:09 what's actually being done out in the
    10:10 world under the name of OOP and I've
    10:15 been shown some very very strange
    10:18 looking pieces of code over the years by
    10:23 various people including people in
    10:25 universities that they have said is code
    10:30 and written in an OOP language and
    10:33 actually I made up the term
    10:35 object-oriented and I can tell you I did
    10:38 not have C++ in mind
    10:41 [Applause]
    10:49 so the important thing here is I have
    10:54 many of the same feelings about small
    10:57 talk

**The problem we're trying to solve: Scaling**

    13:32 there we go so an analogy to these
    13:36 programs of the 60s is a dog house you
    13:42 take any random boards nail and hammer
    13:46 pound them together and you've got a
    13:48 structure that will stay up you don't
    13:50 have to know anything except how to
    13:52 pound a nail to do that now somebody
    13:57 could come along and look at this
    13:58 doghouse and say wow if we could just
    14:01 expand that by a factor of 100 we could
    14:04 make ourselves a cathedral it's about
    14:06 three feet high that would give us
    14:07 something 30 stories high and that would
    14:11 be really impressive we could get a lot
    14:13 of people in there and so the Carpenters
    14:17 would set to work
    14:18 blowing this thing up by a factor of 100
    14:21 now we all know being engineers in
    14:25 scientists that when you blow something
    14:27 up by a factor of a hundred its mass
    14:29 goes up by a factor of a million and
    14:32 it's strength which is mostly due to
    14:34 cross-sections of things only goes up by
    14:37 a factor of 10,000 so when you blow
    14:41 something up by a factor of 100 it gets
    14:44 about a factor of 100 weaker in its
    14:47 ability and in fact what will happen to
    14:49 this doghouse it will just collapse into
    14:51 a pile of rubble and then there are two

**Inspiration from biology**

    30:02 different now but one of the things that
    30:05 Watson did in this book was to make an
    30:08 assay first assay of an entire living
    30:14 creature and that was the e.coli
    30:16 bacteria next slide please
    30:27 so if you look inside one of these the
    30:31 complexity is staggering those popcorn
    30:35 things are protein molecules that have
    30:39 about 5000 atoms in them and as you can
    30:43 see on the slide when you get rid of the
    30:47 small molecules like water and calcium
    30:51 ions and potassium ions and so forth
    30:53 constitute about 70% of the mass of this
    30:59 thing
    31:00 the 30% that remains has about 120
    31:03 million components that interact with
    31:06 each other in an informational way and
    31:09 each one of these components have as
    31:13 carries quite a bit of information and
    31:16 you can think of it you know the simple
    31:20 simple minded way of thinking of these
    31:21 things is it works kind of like ops five
    31:25 there's a pattern matcher and then there
    31:29 are things that happen if patterns are
    31:31 matched successfully so the state that's

    ...

    36:02 the shift in point of view here is from
    36:06 mechanic's oh there's this problem if
    36:08 you take things like dog houses they
    36:10 don't scale by a factor of 100 very well
    36:12 you take things like clocks they don't
    36:15 scale by a factor of 100 very well take
    36:20 things like cells they not under scale
    36:23 by factors of 100 but by factors of a
    36:26 trillion and the question is how do they
    36:29 do it and how might we adapt this idea
    36:34 for building complex systems okay this

**Every object should have a URL**

    43:00 more for instance one of the most
    43:02 amazing things to me of people who have
    43:04 been trying to put up on the Internet is
    43:06 that I do not and I'm hoping somebody
    43:09 will come up afterwards and tell me of
    43:11 an exception to this but I do not know
    43:13 of anybody yet who has realized that at
    43:17 the very least every object should have
    43:20 a URL because what the heck are they if
    43:26 they aren't these things and I believe
    43:29 that every object on the Internet should
    43:31 have an IP because that represents much
    43:36 better what the actual abstractions are
    43:39 of physical hardware to to to the bits
    43:45 so this is an early insight that objects
    43:49 basically are like servers and this
    43:54 notion of polymorphism which used to be
    43:56 called generic procedures is a way of
    44:01 thinking about classes of these servers
    44:03 everybody knows about that

**Pointers to any object in the world**

    52:29 you think of what an HTTP message
    52:32 actually is you can think of what an
    52:34 object actually is and if you think of
    52:37 what an object-oriented pointer actually
    52:39 is I think it should be pretty clear
    52:42 that any object-oriented language can
    52:47 internalize its own local pointers to
    52:50 any object in the world regardless of
    52:52 where it was made that's the whole point
    52:54 of not being able to see inside and so a

----

OK, now some of my personal analysis and interpretation. As I was listening to this talk, at one point I couldn't help but think that what Alan Kay was describing is what we now call REST APIs and endpoints.

* An object, according to Alan Kay, is supposed to be fully encapsulated, and not just its data, but the programming language the object was made with should be encapsulated, and the hardware the object lives on. An endpoint, similarly, doesn't expose the programming language or the hardware behind the implementation of that endpoint.
* Every object should have a URL, according to Alan Kay, and any object should be able to point to any other object, regardless of how it was made. An endpoint, similarly, is identified by a URL, and every endpoint can point to and use any other endpoint through that language-independent and machine-independent identifier.
* An object receives messages, according to Alan Kay, by pattern matching and responding if the pattern matches. In networking, similarly, messages are broadcast to many different machines at once, and each machine and each endpoint may respond to the message or ignore it by pattern matching against the destination address.
",1543208415.0
witkwski,"maybe for building html forms and UI it’s actual approach(not sure about lists and things where multiple items of the same role have different states). the fact you have arrays of different types(for map/reduce operations for example) leads you to the simple thoughts about the real logic of things. our world contains duplications of everything(but with kinda different state) - messages also could be objects, for some specific logics. the real world is not a bunch of computers of different nature. OOP evolved into more complex idea, extended with classes/children and so on to face the real objective nature of the world. the Kay’s idea didn’t suspect this wide usage of the paradigm which we have nowadays. but there are some interesting historical points in the article.",1543137062.0
nexiviper,Sweet! Thank you for this,1543137899.0
hags033,When testing asynchronous functions with jest it always gives the same error. I’d try removing the async just to see if it gives you a different error to go off of.,1543087722.0
hags033,You don’t have the whole test listed. But it would be changing (done) to () and remove the other done() inside the test.,1543089251.0
roboctocat,"You can make your life easier by doing few things:

//	Decouple param validation to separate middleware function

    function validateRequest(req, res, next) {
        if(!req.body.name || !req.body.email || !req.body.password) {
            return res.status(errCode.invalid_input).json({
                message: 'Invalid input'
            })
        }

        return next();
    }

//	Decouple route handler from the route.

    function registerPostHandler(req, res, next) {
        const NewUser = new User({
            _id : mongoose.Types.ObjectId(),
            name: req.body.name,
            email: req.body.email,
            password: req.body.password
        });
        
        NewUser.save().then(saved_user => {
            res.status(201).json({
                message: 'User registered',
                user: saved_user
            });
        }).catch(err => {
            res.status(500).json({
                message: err
            });
        })    
    }

//	Apply middleware and route handler to your route.

    api.post('/register', validateRequest, registerHandlerFunction);

//  At this point you don't have to worry about testing the route but just testing route handler.",1543463294.0
davidmdm,"It depends. The thing about nodejs streams is they are built with back pressure in mind. So obviously if you go the first route you are reading an input and transforming it into multiple outputs, therefore if the rate at which you read and write are equal, you are clearly going to overwhelm your writer and it will have to apply back pressure on the transform and the source. 

If however your reads are much are far between, then it is more efficient to go this route. 

Else you pipe into multiple transforms to multiple writers. This way you are reading from a single source but writing concurrently to multiple writers. 

Hope that helps. ",1543081428.0
davidmdm,"If you pipe to multiple transform then an a function must be invoked for each transform for each event. So you are registering more listeners, which is less efficient that doing it in one. However io is more important than this almost negligible optimization.  Hence if your writes are expensive, it would be better to pipe to multiple transforms in order to do them concurrently rather than serially. ",1543110920.0
daveequalscool,"what is this, javascriptmasterrace? OP raised some perceived issues and the community suggested that the ""issues"" are in OP having expectations that are too narrow for a lot of use cases that other companies have to deal with. maybe helped shed some insight into the disconnect going on between OP and their coworkers.

granted, that all could have happened with more respect given to OP but this post just seems like gloating and fanning the flames of drama.",1543080382.0
lukeautry,"I know quite a few Node.js devs these days are using TypeScript exclusively, and certainly, a lot of React devs are.

This starter project is the stack I use for new projects. The client library is generated from API artifacts, which means UI code can interact with the API in a type-safe way. It's really productive and there's a single script that starts and watches the entire app (API, UI, database, etc).",1543071674.0
mansfall,"Neat to see something done with a relational db.  But, I'll be honest. People see this and will have horrible practices instilled in them.  There is so much coupling going on here and other code smells that I'd recommend against this tutorial.",1543117168.0
Earhacker,ELI5?,1543093484.0
gonzalolog,Awesome but underwhelming the requirement to draw a cube with a texture :(,1543086411.0
nt162,Thanks for sharing this!,1543069302.0
Str4yfromthep4th,Why would I use a different lib just for my tests? Sort of defeats the idea of testing doesn't it?,1543068465.0
skaz68,"Depends on the needs of the application... Node typically runs on a single thread, so having multiple cores wouldn’t do much good unless you utilized child process or cluster api. Faster processor would be the way to go for node apps.",1543036914.0
tqhuy1811,firebase hosting only support static website ,1543037335.0
bigfootaus,"Cloud Functions is the way to run dynamic sites in Firebase as it's traditionally made for static sites. There's a tutorial video from Firebase themselves on this: [https://www.youtube.com/watch?v=LOeioOKUKI8](https://www.youtube.com/watch?v=LOeioOKUKI8)

Also please don't ever use the Real-time Database - it's being replaced. Cloud Firestore is the new thing, and is much more in line with mongodb/standard databases for node web apps.",1543802566.0
son_of_meat,"If you're the only user, you don't need anything as sophisticated as passport. I'd use [""http basic access authentication""](https://en.wikipedia.org/wiki/Basic_access_authentication) and on the back end just throw in a hardcoded `if (password === 'my_secret')`.",1543029255.0
LastNameBread,"I suggest looking into websockets. This will allow you to tell when a client is connected to your server in real-time. Socket.io is a popular solution. You could just deny connection if a user is already connected.

If you don’t want to use websockets, you’ll need a record of some sort in a database that is changed when a user logs on. Subsequent logon attempts should check this record for a value like userLoggedIn === true. If you go this route, you’ll need to think about how to change that value when a user logs out, and you’ll also need some sort of timeout/expiration since most users just browse away from a site when they’re done.",1543027654.0
verdelucht,"You would need to use a callback as the result only exists within the 'then' function.

Otherwise I would suggest you to check out the use of await.",1543018792.0
konyetz,"What about using Promise.all? Based on your post, it seems you're aware of what the problem is, you just need some way to wait for all the promises to finish before returning. You can look into await as verdelucht suggests or use Promise.all which I've illustrated below. I'm sure there are other ways to do it too. 

I made a few other changes too, like taking out one of the .then blocks (I merged it into the first .then block), switching the functions to use lambda style, and returned the response so it could be retrieved with `x.value()`.

    const request = require('request-promise');
    
    const options = {
        method: 'GET',
        uri: 'https://www.random.org/integers/?num=10&min=1&max=6&col=1&base=10&format=plain&rnd=new'
    }
    
    //should make multiple web requests and return the final value
    var x = request(options)
        // First call would be to get a JWT
        .then((response) => {
            console.log('first:' + response);
    
            //need to modify some of the options for second call for data
            options.uri = 'https://www.random.org/integers/?num=5&min=1&max=6&col=1&base=10&format=plain&rnd=new';
            return request.get(options);
        }).then((response) => {
            // this is what I want returned
            console.log('second:' + response);
            return response;
        }).catch((err) => {
            console.error(err);
        });
    
    x.all().then(function () {
        console.log('Return value:' + x.value());
    }).catch(() => {});

&#x200B;",1543021336.0
Str4yfromthep4th,Not allowed. Look up 0Auth concept. If the site allows delegation of access then you can use passportjs to request a token. If this is an automation project you can try a headless browser which will work. However that will only work on the system in which you run node.,1543012627.0
qqqyqnz,I wouldn't stream video over websockets. Video streaming is hard; prefer using a library over rolling your own. Try one of the streaming protocols listed here https://developer.mozilla.org/en-US/docs/Web/Apps/Fundamentals/Audio_and_video_delivery/Live_streaming_web_audio_and_video,1543026592.0
virtulis,"~~Last I checked browsers were pretty bad at streaming video over http. Can be and is done by many but you certainly need some ""media server"" software for that.~~

Edit: nvm, missed the python part. Would still advise against http. Why not use a websocket to deliver it to python too? And btw why socket.io?",1543022266.0
SoLoDas,"If i was doing this, i'd use express to pipe the stream into 'res'. Its jank, but it would work",1543033317.0
FearAndLawyering,"    var filePath = path.join(__dirname, '/CSV_FOLDER');
    // Read CSV
    var f = fs.readFileSync(filePath, {encoding: 'utf-8'},

Looks like you are trying to operate on a folder instead of a file. you need to put most of this logic in a loop of the files in the folder.",1542989886.0
one_happy_guy,Consider using https://www.npmjs.com/package/csvtojson. You can use the API from a node script or the cli. ,1542989688.0
CrucibleOfLogic,"const PluginBase = require(""../../library/pluginbase"");

const fs = require(""fs"");

const path = require(""path"");

const csvtojson = require(""csvtojson"");

&#x200B;

class CSVtoJSON extends PluginBase {

  get parameters() {

return {

description: {

docstring:

""Takes a CSV file and turns it into a JSON formatted file.\\n"" +

""headers - \[true|false\] Whether the first row of the data in the CSV\\n"" +

""  file is dedicated to labels for each column.  If so, they are used\\n"" +

""  as keys to the resulting JSON file.  These headers are 'sanitized'\\n"" +

""  to prevent errors (changing spaces to underscores, etc...)\\n"" +

""inputfile - The name of the instance variable that contains a string\\n"" +

""  representing the path to the CSV file or directory to be processed.\\n"" +

""outputdir - The path to the directory where the JSON is written."" +

""outputfile - The path to the file where the JSON is written."",

requires: \[\],

results: \[\],

type: ""document""

},

parameters: {

noheaders: { type: ""boolean"", nullable: false, default: false },

input: { type: ""variable"", nullable: false, default: """" },

outputdir: {

type: { type: ""path"", mustexist: false },

nullable: false,

default: """"

},

outputfile: {

type: { type: ""path"", mustexist: false },

nullable: false,

default: """"

}

}

};

  }

&#x200B;

  async run() {

await [super.run](https://super.run)();

let input = await this.instance.getVariable(this.config.input);

if (!input) {

this.logger.error(

\`In (${this.label}), instance variable (${this.config.inputfile}) seems to be empty or non-existent.\`,

{ file: \_\_filename }

);

await this.instance.setStatus(this.label,""error"");

return false;

}

if (input.constructor === String) input = \[input\];

if (input.constructor !== Array) {

this.logger.error(

\`In (${this.label}), instance variable (${this.config.inputfile}) seems to not be a string or array.\`,

{ file: \_\_filename }

);

await this.instance.setStatus(this.label,""error"");

return false;

}

let outputdir = await this.\_resolvePath(this.config.outputdir);

let outputfiles = \[\];

for(let file of input) {

file = await this.\_resolvePath(file);

let outputfile = await this.\_resolvePath(

this.config.outputfile,

path.basename(file, path.extname(file))

);

let jsondata;

try {

// noinspection JSUnresolvedFunction

jsondata = await csvtojson({

noheader: this.config.noheaders

}).fromFile(file);

} catch (err) {

this.logger.error(

\`In (${this.label}), Cannot read data from (${inputfile}): ${

err.stack

}\`,

{ file: \_\_filename }

);

await this.instance.setStatus(this.label,""error"");

return false;

}

let outputpath = path.join(outputdir, outputfile);

try {

fs.mkdirSync(outputdir,{recursive:true});

// noinspection JSUnresolvedVariable

await fs.promises.writeFile(outputpath, JSON.stringify(jsondata));

} catch (err) {

this.logger.error(

\`In (${this.label}), Cannot write data to (${outputfile}): ${

err.stack

}\`,

{ file: \_\_filename }

);

await this.instance.setStatus(this.label,""error"");

return false;

}

outputfiles.push(outputpath);

}

await this.instance.setStorage(this.label,{input,outputdir,outputfiles});

return true;

  }

}

&#x200B;

module.exports.plugin = CSVtoJSON;

&#x200B;",1543028144.0
Auklin,"perhaps I'm using 'function' wrong, or passing in the 'tags' variable incorrectly?",1542983181.0
Nopik1,"Also, the original code had 2 problems - first, it lacked \`()\` to actually call the function (so you were passing the function itself to the DB, not its result. Second - if you wanted to return array of strings from the function, you shouldn't add extra \`\[\]\` around function, that would make double nested array (i.e. \`\[\[tags\]\]\`).

Generally, the code reads very weird. Typically the body of your function should be before \`couch.insert()\`, not inside. In which case you wouldn't need extra function at all. And, if you really want to enclose it in extra function, do it outside, and name it (e.g. \`split\`), then only call it when necessary.

And, of course, \`tags.split()\` is the better way to achieve this specific goal.",1543018632.0
vsamofal,"Nice work, but what about docker compose ? Why this manager may be better ? ",1542981075.0
general_tao_,Why in your opinion Selenium is overkill for scraping?,1543014868.0
chusmeria,"Cool! Do you know if this bypasses distil networks protection too? Also, are you able to input info like in a search bar or submit forms? Thanks!",1543026889.0
owen800q,work on SPA?,1543036379.0
_imjosh,RemindMe! 4 days,1543012000.0
2_30am_guy,"Nice man, love it.",1542991693.0
NetOperatorWibby,"Oh wow, this is suoer helpful. Never knew about this.",1543004623.0
joesb,"Do you want to take control of the API signature or just want some API-to-DB interface?

In first case, may be you can use some DB-instrospector libs like `pg-structure`, and then use that to generate your desired API.

In latter case, take a look at Postgraphile or Prisma. It's Graphql-to-DB interface.",1542956386.0
grendian,Check out the Loopback framework.,1542985191.0
thugstore,"Could you show us the error,otherwise the request seems completely wague and we won't be of any help. ",1542936552.0
guorbatschow,It uses the structured clone protocol that e.g. Chrome uses to pass objects between workers. It does work for functions btw.,1542922020.0
poopie_pants,So this doesn't work with non-blink engines I'm assuming? (Might be really useful for node.js),1542938715.0
rmkn,How does it deserialize class instances? Seems like it couldn't restore class in another node process.,1543293598.0
Oalei,I would suggest to learn how to deploy any apps on a basic vps running Ubuntu on something like Digital Ocean before trying out services that makes magic for you.  ,1542918676.0
kaoussi,"I host My React apps on Netlify. 

Backends (Node, or Django) on Heroku free tier for testing, and then on Digital Ocean for Production.",1542920333.0
dangerisgo2021,"I recently started using Google cloud platform, could still be in the honeymoon phase, but it was much easier than aws and cheaper than heroku. Also I like using serverless so gcp made that easy",1542937879.0
congowarrior,React app on S3. Node backend on Heroku ,1542910138.0
noradbase,I use vultr. They have super cheap hobby servers as low as $2.50 a month. Perfect for playing around and breaking stuff to learn setup and deployment basics without spending a lot.,1542946319.0
chris101010,Netlify and zeit for simplicity. Heroku or aws otherwise. ,1542927916.0
DanielFGray,"Gitlab's CI gives you free static hosting, now.sh's free tier is good as well",1542920506.0
nvapor,"Im using Netlify for the following reasons:

* Free
* Dead simple to configure and have it up and running
* Free SSL
* Pre-render feature

All of above you can achieve with a few clicks only.

I chose Netlify over Firebase Host mainly because the pre-render feature. I needed SEO and I didn't want to deal with SSR. I saw some options to have SSR in Firebase using Google Functions, but I didn't like the solution.",1542958886.0
Vasault,heroku all the way,1542925274.0
dio64596,Too much fiddling around in the console for my taste. This could be improved by using AWS SAM,1542912304.0
cocorote-pedro,"If you're planning to scale your app with MongoDB, mLab will get expensive too. For the moment the best cost-effective for the database option I found is to use Heroku's PostgreSQL.

Heroku only will get real expensive on enterprise size (Heroku's quality is better), but AWS is cool and less expensive but you need to take care about the machines you rent. On Heroku all you need to care about is your project and your running scripts.",1542906720.0
rwieruch,I use Dokku on DigitalOcean to [host multiple Node.js applications under one Droplet](https://www.robinwieruch.de/deploy-applications-digital-ocean/).,1542961228.0
,[removed],1542892383.0
tryncatch,"You need https://github.com/pofider/phantom-html-to-pdf
I have used it for large projects to generate pdf bills. It's supper easy and you can do styling with css.",1542893077.0
aragantinis,"I still didn't tried in production but this library seems really good 

https://github.com/RelaxedJS/ReLaXed",1542909047.0
cam861,"There’s a library that allows you to continue to use the Docx format and replace your content into save templates

https://www.npmjs.com/package/docxtemplater

Then there’s a number of doc to pdf cloud converters that can do the pdf part. I’ve used this one in the past

https://cloudconvert.com/

The upside of this structure is that your template doesn’t have to be managed by anyone with technical knowledge as you can simply edit the word version.",1542916584.0
mypirateapp,"I can understand not using libraries such as async or bluebird or consola or something that is not absolutely essential but trying to make a web server from scratch is a huge headache and while I myself am an advocate of not using libraries as much as possible, I have to admit maintenance will become a real issue with 0 libraries",1542889705.0
Skhmt,"That's nice and all, but your last line needs to be a lot bigger, bolder, and like blinking or something.

You can roll your own express, but you'd also have to deal with things like HEAD requests, error codes beyond 404, mime types, route parameters, and tons more. A system for route parameters was probably the most difficult I think.",1542890784.0
AceBacker,"This is a classic scenario.  I one time got a project where they asked me not to use a frontend framework because they are too complicated.  I being dumb said okay.

Fast forward a few months and I realized I had accidentally written my own framework while making the project.  And wow did that framework suck.  Just garbage.  I feel sorry for whoever had to take that project over.  I left appology comments all over the code explaining things.

Now I do not argue over which framework to use as long as one is used. ",1542909994.0
drumnation,"Honestly I think the aim was to point out what you could do with bare node.js not because you should, but maybe so you can better understand the origin of things you see being done in something like Express. Great post.",1542896961.0
adidarachi,"Same for all languages, it's just a stupid thing to do.

My point of view in one sentence: you can use libraries with hundreds or thousands of contributors or write a new one by yourself.",1542918812.0
Tillhony,"What I learned from this is that I much rather prefer and would rather use a framework, especially for this type of stuff. ",1542933329.0
vladimirice,It might be a great case if you want to create app and make it as secure as possible,1542896514.0
irspaul,"this is a very good article for beginning node.js
I see this as a better way while implementing lite weight apps for low end hardware specs especially in IOT space.",1542910363.0
kishenji,"A great way to ""manufacture work""",1542915342.0
shrinivas28,You need express for handling your middleware layer of the API calls. ,1542912922.0
Extracted,I’ve never heard of apps taking anywhere near that long to initialize. Are you sure that’s the problem?,1542871821.0
acylus0,"I mean... have you tried to debug it and see why it's taking so long?

`node --inspect-brk script.js`

Or install `ndb` and do `ndb script.js`?",1542875412.0
WebDevLikeNoOther,"Your app will boot faster the more that it is used. Just like your edit implies, Cold Starting is the issue. When resources aren’t being used, Firebase offloads the server space for them. When you request a infrequently used resource, it has to find it, and spin it up. So the logical move would be to just use the resource more and it’ll slowly get better.

Another option is to allocate more memory (defaults at 256) and the start time will improve.",1542907237.0
maushu,Maybe it's your network connection? Have you tried on another computer on a different network connection?,1542876524.0
tryncatch,you spill gasoline on it,1542879050.0
winzippy,Don't use Firebase. https://medium.com/@scosta/why-firebase-sucks-ce5d2302eb20. I can also attest from personal experience how slow and unreliable it is. It's a damn shame.,1542884554.0
ItalyPaleAle,One step back: what are you trying to do? Maybe there’s another way to achieve your end goal without circular references.,1542858290.0
Str4yfromthep4th,"Variables can be shared between two classes.  Check out the Singleton pattern perhaps to learn more about a common technique. In Javascript though, you're technically just using global variables.",1542863046.0
Kilimangaro,The bottleneck of your operation will surelly be the database. I don't think that using more than one core will speedup the process. ,1542854803.0
clpz84,"Promise.all is probably hurting performance, since you .then have a big array in memory. Depending on your needs, if records are independent from each other, you should try streaming instead. The output stream can be a writer which inserts into db, or sql statements to a file like someone else already suggested. You could also .pipe to a transform in between and provide batching too. Plus, streams will provide the backpressure logic, so you don't have to worry about memory usage that much. 

And if processing records becomes a bigger bottleneck (it's probably just the db), you could distribute it between multiple cores, and the solution would be mostly the same, since you could treat worker messages as streams too. 

From you question I don't know the data source you're reading, but this would likely work. 

The Mississippi package probably has you covered, I've used it before and I'm using it these days to migrate between databases. 

Let me know if anything is unclear. 

Cheers. 

PS. Make sure you're pooling the db connection
",1542869642.0
Str4yfromthep4th,How similar are these queries and how new are you to databases?,1542855935.0
zabowl,If you have to insert data into the same table you must use a single insert query and with comma you send multiple rows of values,1542871547.0
nekocoin,"Like others said, combine inserts to batch queries.

If you can't for some reason, I would use promise.map with concurrency (bluebird) that's similar to the db connection pool size (e.g 10). 1m queries is a lot, but could be done in a day if it's a one time thing. . ",1542872272.0
DrFriendless,"You could also just write a Node program to generate the appropriate SQL, and then run that from the MySQL console. You don't have to worry about anything Node is doing then.",1542865374.0
ImperfectTactic,"It sounds like you're probbly right about where the issue lies. You appear to have created a *Singleton* uploadHelper, and had two concurrent requests updating the state of it in a fairly classic race condition situation.

I'll put this in terms of time indexes, though more accurately in this case it's in terms of order of events on the JavaScript engine Event Dispatch queue.

0:01 - A starts uploading, and the uploadHelper singleton is updated to overwrite any prior state to start tracing request A.
0:02 - B starts uploading, and the uploadHelper singleton is updated to overwrite the state of A to start tracing request B, even though A isn't yet complete.
0.03 - A uploads a bit more file, using the now-B state in the uploadHelper

Eventually both A and B both finish uploading, but they're sharing the B state throughout.

Giving both A and B their own copy of an uploadHelper means they don't clash in terms of the state. It's these sorts of clashes that make many developers try to avoid using Singletons or any other form of shared global state in their development.",1542819770.0
iamstarkov,What is your document-upload.js?,1542819633.0
vladimirice,As additional advice - if your instance have other instances (objects) inside then in order to initiate it properly you might use dependency injection pattern and appropriate npm libs for it,1542866391.0
musketeer925,"Memoization of `sqrt` or multiplication are horrible ideas. I thought the author intended them as toy examples until he started trying to benchmark the solution. But caching something that your processor can calculate in a single CPU cycle is ridiculous -- going to memory will take much longer. 

Also, benchmarking by timing a single run with a `console.log` inside of the benchmark is ridiculous. But don't worry! The author ""ran the tests so many times on my machine "".

I ran some slightly more sane tests, timing a run of 10000 iterations without a console.log (although most of the time is still overhead of function calls and my loop):

    $ node memoize_sqrt.js
    memoized square: 3.278ms
    square: 1.561ms
    memoized squrt: 2.477ms
    sqrt: 1.788ms

I have no idea how the author managed to find evidence of a speedup. ",1542821281.0
,[deleted],1542839601.0
thistoohard,I keep seeing this Memoize word all of a sudden. What made it so hot right now?,1542816428.0
Havius,"Not a good post, incorrectly exemplifies memoization ",1542860510.0
tenfingerperson,Is the author trying to dumb down dynamic programming? He isn’t even doing it properly because his examples are mixing two separate concepts... ,1542839974.0
alexsasharegan,"Does anyone ever take a real world computation example? Memoization in the wild doesn’t really look like this. Functions often take multiple arguments and/or an object as an argument. This creates the difficulty of computing a reliable hash key. Also, does anyone ever address capping cache size? At least by using a Map you can keep an eye on the size and clear the cache.",1542859586.0
udidu,Nice,1542818217.0
finzaz,"This is where you properly lost me:

>We are building **middleware**. This server stands between UI and the **external HTTP** endpoint which should not be known to the end user

Then I skipped down to this:

>We find out that we have to change our HTTP server (express) because it is too slow and some new fancy HTTP server has just come up.

I disagree with pretty much everything in the article. Express is the framework, not the HTTP server. If the application isn't running fast it's because of inefficient application code or the available resources; not the framework.

One last important point: you can't write an application and expect to change framework further down the line if something better comes out. That's insane. Plan your project out by establishing the requirements and choosing the tools that suit the requirements (and your skills).

&#x200B;

EDIT: formatting",1542793984.0
thistoohard,“I suspect that it shouldn’t be difficult.” Let me post to Reddit. This is meme worthy. ,1542797742.0
shastacoop13,What makes you think you will learn more and get better info if you use a 3rd party guide when there's very well written official documentation https://stripe.com/docs/api/metadata?lang=node on stripe.,1542813415.0
rwieruch,Maybe you can go from this [one time checkout tutorial](https://www.robinwieruch.de/react-express-stripe-payment/) to your monthly subscription.,1542806752.0
08148692,"If you need to ask Reddit how to build a payment system, you're not ready to build a payment system.",1543323530.0
acidwang,"I'd go with the first one. From how you describe it, their tech stack is clear cut, which will benefit you greatly IMO. The reason being: it'll give you a stable environment in which to learn, especially since you'll be focusing on their core offering. I get the feeling that the second startup could end up pulling you between so many different technologies and problem spaces it'll feel overwhelming and you won't have much of an opportunity to grow. Plus, the extra money and a new city gives you loads of new experiences outside of work. Good luck!",1542742242.0
SnowConePeople,Either is cool. It really depends on who you will be learning from. What's the team like? This is the biggest benefit of an internship: learning from people who are available to teach you things.,1542777708.0
madScientistDood,I hope they are paid internships. I just got a 6 figure job with tattoos down to my fingertips and a felony. The market is 🔥,1542777293.0
davidmdm,"You go where you will learn more. The first opportunity sounds like there is much more for you to do and play with.  I might be biased but this e commerce place doesn't sound like they have great developers there already. 

The most important part about my internships back in the day, was the quality of the senior devs around me, who saw my enthusiasm and gave me just enough mentorship so that I could learn way more than I would of otherwise. 

So my advice, go where the staff and developers seem most competent. ",1542805434.0
lcukerd,"Don't go for the second startup. I once worked in a similar startup for a week. They have no goal, no management, no good tech employees (if any).",1542862971.0
claytonbez,"Okay, so from my point of view. Don't look at the semantics of the situation. What would you like to do more? Build e-commerce sites? Which will present you with different projects frequently or do you want to build SaaS services and stick to a few projects long term? Being happy where you develop is very important, it bleeds through to the quality of your work. ",1542742260.0
caporaltito,Second looks more sketchy to me,1542801793.0
BenjiSponge,"This has been talked about to death, so I'm not sure why the author felt the need to weigh in in the exact same way everyone else has, but they also seem to be pretty ""behind the times"" on the state of the art here. At this time, yes, `npm` does these practices and it's pretty annoying. A large part of this problem is due to bad file management on the part of package authors (100MB of code is an obscene amount of code, and certainly contains tons of repeated code like test code that never actually runs, which the maintainers should have omitted). But the solutions are either here or very nearly here. pnpm has existed for a long time which takes a very similar approach to what reasonable package managers use by leveraging symbolic links. Yarn is about to take a similar but also radically different approach which will involve a different algorithm to bring in dependencies in the code while essentially eliminating the local dependency footprint.

I'm not even sure why I'm writing this comment -- it itself is a repetition of what has been said a million times on this subreddit.",1542738047.0
kwiwksh,"This may seem like a problem but having locally downloaded versions of specific package versions makes development significantly easier. Compare this to needing a root-user installed version of your library globally accessible in your PATH. Plus, compare 90MB for many packages with 100MB for your typical Boost C++ folder.

Its easy to forget how little of these packages are code anyways. Between README, CHANGELOGS, LICENSES, images and other documentation, its easy for other resources to be the majority.

I really haven't had many problems with download time or cache misses. I use Yarn in my environment and it seems to be able to cache a lot very easily. ",1542736877.0
noruthwhatsoever,"This topic has definitely been beaten to death, and the writing in this article makes me want to pull my eyes out

We all know that node modules are sometimes a pain and a massive bloat. Keep in mind that the node ecosystem is still relatively young compared to say, Ruby and its gems, and will definitely be going through some iterative improvement as it develops further.

It’s the curse of having such atomic modularity. Other than the bloat (one project I did that used CodeMirror *and* Xterm had over 46,000 deps) it’s a great and flexible ecosystem, and NPM is already taking steps with tools like `npm prune` to get rid of unused deps

As node matures further I feel like this issue will become less and less prevalent or at least more manageable

In the meantime can we stop treating this as article-worthy information? Anyone who has ever built a sizeable project in node knows about this unless they are completely new ",1542746733.0
son_of_meat,Who’s upvoting this shit? Second sentence of the article  is “I quick research trying to found any solution concluded with the image that is the head of this text. “,1542755839.0
saltupz,"I had an idea of npm and yarn having somekind of bundlestep, so you really only would download an bundled minified file that would export its functions. There would be no readmes etc, making the filesize about the same as when you compile.

This would have major drawbacks though, and development would be harder, and tree shaking would not work.

Ill guess a middle line would to only install actual code, and skipping everything else. Wonder how much of a diffrenece that would make",1542741911.0
dk01,Yarn PnP is a thing and it’s fucking fast https://twitter.com/JimTheDev/status/1047146310590242817,1542753331.0
udidu,Its very old...,1542818406.0
zkochan,"[pnpm](https://github.com/pnpm/pnpm) was created to solve this issue and is actively maintained since 2016.

This is how pnpm solves the issue:

* one version of a package is only ever saved once on a disk in a global store
* dependencies are imported to node_modules using hard links. So physically files of the package are the same in the global store and in every node_modules
* symlinks are created inside node_modules to create a nested structure (more about it [here](https://dev.to/zkochan/flat-nodemodules-is-not-the-only-way-mo2)

pnpm's solution is battle tested and does not hook into Node's module resolution algorithm, so it is backward compatible.

Indeed, there are new concepts like Yarn Plug'n'Play and Tink. However, they hook into Node's resolution algorithm. They might change the way we use JavaScript but that will be a long process. pnpm works now.",1542879548.0
gigastack,Can’t you install globally if you don’t want multiple copies?,1542744326.0
fritzba,npm install xxx - g,1542744765.0
mistralol,"| As I've said, the problem when copying node_modules folder from one place to another is not the size, it is the amount of files and folders, the complexity of the tree. It is a nightmare for a HDD. It takes many minutes to discover all files let alone copy them. In the end, it also impacts npmperformance and there are memes for that also.

Yes its a problem. But not for the reasons you mention. Windows has crappy performance when dealing with lots of little files. The node community also has problems with creating a library with 5 lines of code in it (we all know this). What your grumbling about though is a failure of windows.. Get a system that actually works?

Some Example benchmarks from a 6-7 year old machine with an ssd.
```
du -sh node_modules/
76MB
find node_modules/|wc -l
8883
time tar cv node_modules/ > /dev/null
real	0m0.163s
time tar c node_modules/ > /dev/null
real	0m0.046s
time tar c node_modules/ | (cd ~/tmp/x/ ; tar x)
real	0m0.311s
```
Lets compare that with some c/c++ shall we?
```
du -sh /usr/include/
324M	/usr/include/
find /usr/include/|wc -l
32575
time tar c /usr/include/ | (cd ~/tmp/x/ ; tar x)
real	0m1.525s
```
But Cache you mumble?
```
echo 1 > /proc/sys/vm/drop_caches
time tar c /usr/include/ | (cd ~/tmp/x/ ; tar x)
real	0m5.660s
```

Note: I was also compiling gstreamer at the same time and watching something on netflix. So my benchmarks are probably a little off :)
",1542748312.0
cwbrandsma,I’m having fashbacks to the left-pad fiasco...which apparently the entire world depended on until it disappeared.,1542739448.0
vsamofal,Java is unrelated to NodeJS. It’s like photoshop and paint ,1542731470.0
BobMcScratchit,"If Tomcat is not installed, you would need to run Spring Boot with Tomcat embedded. PM me or head over to /r/java. ",1542757107.0
MoTTs_,Affiliate advertising. ,1542861781.0
ecares,Can we have this user banned already?,1542711495.0
caporaltito,NUMBER SIX WILL SHOCK YOU,1542802684.0
ecares,"For ever, the fact that this product is called standard library will make me unhappy.",1542704182.0
phitruongdn,Who would called web framework as standard library?,1542726749.0
ItalyPaleAle,"If this is going to run on a Linux Server, just use systemd.

If you go with Pm2, for example, you still need to use systemd to start the Pm2 process at boot and keep it alive. So at this point just go with systemd directly! Example here: https://nodesource.com/blog/running-your-node-js-app-with-systemd-part-1/

Alternatively, use Docker (and then you don’t need a process manager, because Docker itself is the “process manager”).",1542858667.0
vichle,"Pm2 is easier than forever to get to work through reboots, also has a pretty nice deploy command built in. Both are fine for what you want to do though.

Haven't tried supervisord. ",1542706340.0
klinquist,"I use pm2 and even have Ansible write the pm2.json (to define pm2's parameters for a given app) as part of deployment.     The ansible script finds the app's entry point by reading package.json.


As for crash *reporting*, I wrote a nodejs module (sorry I can't share it, private repo) that watches for process.on('uncaughtException') and emails a crash report to a mailing list which lists environment variables, latest git commit, and even includes a code snippet with the line that crashed.",1542742196.0
RangerCoder,"I host all my Node.js projects on Digital Ocean Ubuntu servers, and I am really happy so far! The OS doesn't really matter. I worked on Node.js projects that were running on Debian and CentOS as well, they all worked well!",1542680420.0
unwind_protect,All ours are running on ubuntu with pm2 managing the process and nginx in front of them. Been pretty smooth sailing so far.,1542681017.0
colnarco,"We’re using AWS Elastic Beanstalk at work and it been quite nice. There have been a few gotchas along the way, and getting signed up to AWS might take some time, but you can essentially start by dropping a zip of your project into a web interface and it then spins up a virtual server and dedicates an endpoint to it. It’s quite neat. + you get auto scaling out of the box (the ability to add and remove server resources automatically)",1542693984.0
dejaime,You can host it on a phone using termux,1542696303.0
ukralibre,Use NVM and never use the system node version. Mantain your own node/lib pool,1542696892.0
mshthn,"Heroku. They provide PaaS, forget the hassle of operating an OS. They also offer sandbox mode -- minimal resources but free.",1542690954.0
_Garebear,"Never hosted node.js cause I have the same pain. 

I wish there was something dead simple like traditional web hosting. I think Azure, AWS, and Google's version of cloud all support Node.js.

But node.js itself sick. I use it at work to setup endpoints that our cloud connected printers can poll and pull jobs.

Node.js + Express FTW",1542681799.0
TheWillG,"Digital Ocean. I haven't played around with Linode but I hear good things about them too.

  
If you haven't already looked into Serverless style hosting, check out Google App Engine (highly recommend) or AWS Lambda for hosting NodeJS apps. It's not a Linux server but your apps will be deployed into containers on their cloud infrastructure. It's super convenient and you get a lot of attractive features (like rollbacks) that make life easy.",1542686117.0
FrendlyNbrhdCanadian,Node runs with no issues on Linux. I've used it in projects in GCP on compute engines and in kubernetes.,1542690888.0
ferrx,"I host on CentOS (inside a Docker container). The host OS does matter a bit. However, you should keep in mind that generally anything that matters at the host OS level would make the runtime irrelevant (i.e. if your kernel is broken, it's going to be broken for your node apps as well as your java apps).

&#x200B;

The biggest issue I've seen is kernel level TCP timeout. See [http://www.sekuda.com/overriding\_the\_default\_linux\_kernel\_20\_second\_tcp\_socket\_connect\_timeout](http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout) referenced from [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)

&#x200B;

NPM Request docs:

    timeout

\- integer containing the number of milliseconds to wait for a server to send response headers (and start the response body) before aborting the request. Note that if the underlying TCP connection cannot be established, the OS-wide TCP connection timeout will overrule the option",1542710167.0
danielivert,I can recommend you https://captainduckduck.com/ you can install it on a basic Ubuntu server and then use it to deploy multiple node projects. It’s basically an open source Heroku solution.,1542711290.0
son_of_meat,"I recently switched to Google Cloud App Engine, which now supports Node.js on the “standard” platform and I’ve been pretty happy with it. I have a handful of services none of which gets much traffic and my bill ends up at like a dollar a month",1542721758.0
bmarkovic,"For a small webapp any low-end VPS box will do, and I'd recommend Debian because it has the smallest base footprint.

Other than that, any Linux will do but Node runs well on Unix servers as well, like BSD and IllumOS (it was, after all, developed by the company that was started by former Solaris engineers).",1542697208.0
brtt3000,"Manually provisioned bare Ubuntu instances and recently serverless hosting on AWS Lambda.

If you don't need WebSockets (or similar) then serverless is the way to go. Spending time on Linux and Nginx and system updates all that jazz is a nuisance if you don't need it.

AWS, Azure, Google Cloud and even smaller companies offer serverless node.js now.",1542697426.0
toxxtor,"I tried Ubuntu server but kept running into problems. I switched to CentOS and haven’t gone back. As I recall, I think most of the issues with Ubuntu weren’t directly related to node, But more like system admin headaches. I highly recommend building your server in a VM and occasionally exporting  for backup. Also, exporting the Ubuntu server VM is like a 1.5 G image while centos is around 800mb.",1542700843.0
bitnissendk,"If you're doing something new, it's worth checking out Google Cloud Functions or AWS Lambda. That can really cut costs for hosting and increase stability, as you only pay for actual usage of your service and it scales automatically. It does require some extra tinkering and different tooling though.",1542702148.0
kwiwksh,"Abstract away the OS and consider something like Docker. Docker lets you specify how to build your Node app and can run it as if it were in a linux environment, but since its containerized, you can really run it from anywhere that's also running Docker, even Windows machines.",1542728779.0
kmisterk,"With my tiny bit of experience running a nodejs app to a public-facing interface (PWA/Website), We ended up setting up an nginx reverse-proxy for traffic coming in to redirect to the port the app is running on, using PM2 to manage it and auto-restart the app whenever we push changes up to the servers code. ",1542748961.0
,[deleted],1542683433.0
Str4yfromthep4th,This is the dumbest thread I've seen on ./node,1542687973.0
programmatical,"Your `getData` function could use some refactoring.

With `new sql.ConnectionPool.connect` you are establishing a new connection _pool_. This means that multiple connections to the server are opened at once and stored in a pool. The connections in this pool can be reused for future database queries.

Knowing that it would make more sense to establish the connection outside of the function because otherwise each time you call the function, you are opening _multiple_ connections to the database, only using one, and subsequently closing the connection pool. This defeats the purpose of the pool!

Following this, your function could be shortened up and also made more versatile. Your function has a big problem. You're calling a callback function (`function (itemData) {}`) twice and calling a function (`res.render`) inside that callback function (`function (res, res) {}`) that can only be called once. This is because you can't render two page different views at once. Rest assured, this can be fixed quite easily. Instead of trying to send (render) two different things separately in one request, what about getting those two things first then sending them off. Seems faster and more efficient, right? It is!

First, we can improve your function by first accepting an SQL statement instead of a callback function. Next, you could utilize the ""chainability"" of `then`ables returned by `Promise`s to shorten up your function a bit. Here's an example of how ""chainability"" works:

```js
SomePromiseReturningFunction()
  .then(result => result.recordset)
  .then(result => {
  // result is now result.recordset
  })
```

This is powerful, because now you can just take the first part, `SomePromiseReturningFunction().then(result => result.recordset)`, and just `return` it in your function. Now when you call the `getData` function, you'll get a `Promise` with some goodies you can use!

Inside your route handler, now you can clean things up a bit. First, we'll get all our data at once. We can do this by utilizing `Promise.all` which allows us to take multiple `Promise`s and wait for all of them to give us something, which we can conveniently access in a callback function in the form of an array. Here's an example of how `Promise.all` works:

```js
const getCustomerCodes = YourSQLDataRetrievalFunction(""select Code from Customers"")
const getItemNames = YourSQLDataRetrievalFunction(""select Name from Items"")
Promise.all([getCustomerCodes, getItemNames]).then(data => {
  res.render('template', {
    customerCodes: data[0],
    itemNames: data[1]
  })
})
```

Much better!

As for your template, there are a few issues. First, your `each` loop is assuming that you are receiving an `item` object with a `Name` property attached. According to your SQL statement, you are only pulling the names. The same goes for your customer loop. Your SQL statement only selects codes from the `customers` table. If this is your intent, you should modify your SQL statements accordingly to fetch the entire row instead.

---

Now to echo what some other people are saying. I would highly suggest getting a grasp on the concept of Asynchronicity.
---

P.S. Sorry if you short of oxygen due to my erratic comma placement :D

Here are a few resources:
https://javascript.info/async - Asynchronicity
https://developer.mozilla.org/en-US/docs/Web/JavaScript
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#Chaining
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then

Good luck.",1542688196.0
WeaponizedMath,Holy fucking fuck,1542669590.0
Str4yfromthep4th,Wow that front end syntax looks evil af. Have you checked the response from the server? Does it return rows?,1542667419.0
___Grits,"Hey! Try and edit your post and format the lines of code. Without indenting, it makes it difficult to look at and you’re much less likely to get help when it’s as such. ",1542691201.0
dahlesreb,"Are you using nvm or something similar for node version management?

'npm rebuild' should fix it.",1542658644.0
dlwicksell,"Did you cd to the repo itself before running the command the package suggested? I'd expect you would need to run either 'npm install' or 'node-gyp rebuild' in order to re-compile the addon. However, if it gave a different command in the error message, of course use that.",1542676257.0
claytonbez,"I know this might not explain why npm rebuild isn't working for you, but I had a similar issue and used yarn package-manager instead for that project. Sorted out my issue. Also couldn't find why npm didn't want to rebuild. But never had that issue again on other projects. ",1542742387.0
qashto,This looks awesome! Thanks!,1542642719.0
Emptronic,I think I saw this posted in like 10 subreddits. Why though??,1543019480.0
BrownMeerkat,Lamba runs code snippets/scripts. I think this looks perfectly fine! ,1542645241.0
kwiwksh,"The second example is silly. If you have access to async/await syntax, use it.

```
let userIDs = [1,2,3];

userIDs.reduce( async (previousPromise, nextID) => {
  await previousPromise;
  return methodThatReturnsAPromise(nextID);
}, Promise.resolve());
```

vs 

```
for(const of userID of userIDs) {
    await methodThatReturnsAPromise(userID);
}
```",1542639198.0
Shopymaniajess,"We are conducting a case-study about nodeJS because we design node js e-commerce platforms for our customers & made this for our blog. Since, this an expert community for developers, we would like your help to know more about node Js.",1542631979.0
dtwoo,Can you post some code so we can see? Could be any number of things!!,1542631375.0
brtt3000,"Note all the changes in a checked-in .txt file. Then open PhpMyAdmin in two browser tabs and manually go through the changed tables and modify using the interface. Later spend some time ranting about the missing changes and begging people for their export. To deploy the project elect one devs local version and export for production. Have a fun hour scrambling for hotfixes for missing changes while the site is down. To synchronize your development environment login to the production PhpMyAdmin and export whatever you need.

I'm not joking, this is how a team at a previous job did it. 

",1542628204.0
kwiwksh,"People say not to use a query builder? My perception was that you should prefer something like Knex over a query function because (especially when used with something like TypeScript) it will prevent against SQL errors, provides a pooled connection abstraction, and prevents queries that might allow for SQL injection. 

To be honest, I've never used the Knex migration feature but I've always heard praise for it.

As for ORMs, I thought the problem was always a performance one. ",1542637933.0
r0ck0,"I'm not someone that hates ORMs (I use TypeORM, and I'm also building a declarative system right now that generates my models).

But there's other tools to do migrations like...

* https://migra.djrobstep.com/
* https://flywaydb.org/
* http://www.liquibase.org/
* https://github.com/mmatuson/SchemaSync

I don't get the hating ORMs thing... seems to me these are the only possibilities:

* Use an ORM library
* Write your own ""DB <> application objects"" code... which is technically still an ORM, even if you wrote it yourself
* Not using OOP at all, and having masses of shitty manual procedural database code

",1542626837.0
Capaj,"Most answers are hilarious, but hardly any is serious. 
We also use knex and it works great for us.
I know a company in Prague which maintains this: https://www.npmjs.com/package/node-pg-migrate

also there is: https://www.npmjs.com/package/db-migrate

but I think sequlize and knex are the most popular tools for managing database migrations. Most node.js programmers don't mind ORMs I'd say. People who hate ORMs prefer to work on low level code and those people prefer other languages on the backend than javascript.",1542633915.0
scaleable,"The usual criticism to ORMs usually wont apply to knex. They are different things.

While dealing with knex implies learning a bit of a new syntax, this learning is quite a shallow curve (even more with typescript), and you immediately gain the benefits of REUSING parts of queries through your codebase, a thing which is quite impossible when writing raw SQL.

One of the things I like most about raw sql is the interactivity you get when using a SQL GUI. Even with that, converting a knex query to raw sql is quite easy and magicless (contrary to inferring what query an ORM is possibly building).",1542646102.0
xhkunlimit,"We have migration SQL and python scripts handled by SQL alchemy's migrate, it allows you to script the changes to a database in SQL and run it on deployment. No need to use the full sqlalchemy orm, although you can.

https://sqlalchemy-migrate.readthedocs.io/en/latest/",1542636617.0
apatheorist,I only use the db migration tool used by knex. And I force it to use sql files.,1542635869.0
diverightin63,I love ORMs but we have a very large legacy database that doesn't have a ORM mapping and it doesn't help us to create one. We use a Visual Studio SQLProj and dacpac deployments.,1542632728.0
lorean_victor,"for schema migration: a chronologically ordered and version controlled list of sql script files. the original being the one creating the original tables and the subsequent ones being those that are supposed to update it. since these are schema migrations, you can easily keep them idempotent as well, which doesn't change much of what you do. this means on the production server, you can simply run all of them in order every time (I often have a super simple script for that).  


for data migrations (which I don't know if knex really takes care of or not), something similar goes. however, since its not as trivial to keep your data-migration scripts idempotent, I also right the names of those who has been executed already as to not to execute them twice. Of course, I could have update the same script to take care of this as well, or even could have expanded it to handle schema and data migrations in a similar fashion without assuming any of the migration scripts are idempotent, however data migrations happen far less often and as a result it still has not become worth it.

&#x200B;

you could even go one step further, and store the data of which migrations have been applied and which have not in the database itself. I do not know how knex exactly works, but if you do that, then your script would be doing essentially how a lot of ORMs handle migrations.

&#x200B;

this is of course not to say that knex does not have its points, and its not pretty to manually manage migrations and is always better to re-use such utility codes, even though they might be pretty simple ones. in the specific project mentioned above they have gone about it without using any ORM and the code-migration was never deemed worth it (because although an ORM is nice, not using one is also not that catastrophic, depending on scale, complexity and also the skill level of your tech team). I just wanted to mention that in reality that is not a really complex thing to do on your own and can be easily managed manually as well.",1542647372.0
kyranadept,"ORMs have nothing to do with schema migrations. They are completely different issues. Sometimes an ORM comes with a companion tool for data migrations.

Schema migrations are never going to be easy in production. You might have:
1. Updates that use a lot of resources, so they have to be done at a time when there is no traffic, or worse, done in chunks while clients are using the database.
2. Updates you can't create a downgrade action for. For example deleting a column or changing all the values in a column to something else.

It's probably impossible to make a tool that satisfies all cases, it's testable and allows backing out a botched upgrade.",1542680395.0
drsco,I would suggest taking a look at [Flyway](https://flywaydb.org/). Personally I much prefer handling SQL for database migrations.,1542656843.0
mccrackm,"I use MySQL, and use liquibase to store schema updates in xml which is checked in.
Keeps local/pre-prod/live in sync, so no nasty surprises when deploying.

But generally for normal querying of a database, I don’t use an ORM because I was a database developer before I was an app developer, and found it more intuitive to just write my queries myself, easier to see the query and debug logic.",1542660002.0
ukralibre,You may use the orm to automate migrations and not use it in the project if you want,1542663070.0
Aesthetickz,"We use flyway https://flywaydb.org. Basically we have a folder of .sql files with migrations all with a version. Then flyway just makes sure they are executed in the right order and stores the last version in a table. It works like a charm. We also use it to set up CI and local dev environments. The nice thing is you’re able to write plain sql, but still have a organized and automated system.",1542665156.0
nildun,I currently work in node without any ORM and use the db-migrate package for migrations. I have thought about giving Sequelize a go but I kind of like writing raw queries :P ,1542668905.0
Ornro,"I don't use an ORM at work. We have a tiny script that, given the name of a migration, creates a new SQL file for it. The file  mostly blank except for an insert statement at the bottom of the file that records the name of the migration (which is the same as the name of the file) in a table called ""migrations"".

That gives us a file named something like ""2018-11-19-1625-add-new-table.sql"" in which we write the migration.

We then have a script that we run that reads the content of the migration folder, compares it to the content of the migrations table and runs the missing files in order.

Not really complicated and it's probably similar to what your ORM does under the hood.

Edit: spelling",1542671003.0
NoInkling,"I don't hate query builders/ORMs, but in my latest hobby project I decided to eschew them in order to become more proficient in SQL (unless pg-promise counts as an ORM). I just wrote my own migration runner.",1542672942.0
dlvx,"I don't hate ORMs, but I really _really_ **really** dislike ActiveRecord. 

A model is not the correct place to add database logic IMHO. A model should simply hold it's own data, and perhaps some functions to parse data / display data. But that's it. 

A model should not get any dependencies IMHO.",1542635607.0
bigorangemachine,"I think its they just avoid it all together. Using MongoDB as your primary data store and that's it.

I am not entirely sure that Mongo is future though. I find it saves you work under some scenarios. However I find it really frustrating when people say ""Mongo and TypeScript"" in a stack. Why have schema and structure in your code but not your data store. It's like you can decide if you want flexibility or structure ",1542633305.0
panbhatt,"Hey, for this you can use a Background running job watching your SFTP file location (or polling depends upon the library available) and use Node.js library (for aws or for azure) to put it in S2 or Azure Storage. 

I have doen it with Java/Azure storage, so let me know if i can be of any help to you on this. The advantage is you can get direct document download link if you want (or accessible via a token based on your requirement. ",1542636822.0
BoughtenCockloft,"There’s no silver bullet. Experience, code reviews and tests will all help to improve security.",1542632214.0
broofa,">monthly threat analysis meeting

I'm far from an expert in security, so take this with a grain of salt, but that sounds positively excruciating to me.  The sort of thing that goes well for the first 1-2 meetings, then people conveniently find excuses not to attend because they know it's just going to be the same 2-3 people hashing hashing over the security practices they're most familiar with every month.  ""Okay team, are we hashing our passwords?  Yup, still hashing our passwords.  Check.""

Instead, I'd start with [red team drills](https://en.wikipedia.org/wiki/Red_team), maybe 1-2x/year.

Such drills ~~force~~ incentivize people to be creative and think outside the box, which means they're fun.  They can be run as a competition (red vs blue teams).  And they force you to be much more holistic about where your vulnerabilities might be.  E.g.

1. Can the CTO's gmail account be hacked and, if so, what are the implications?
2. Can you phish customer support to get admin privileges added to a user account?
3. Could someone gain access to your offices and set up a rogue wifi router on your internal network?

As you can see, these drills tend to involve everyone in the company because *anyone* may be a point of vulnerability.  As such they're a great tool for developing a company-wide awareness of the importance of security.  And if you make a point of rewarding people for cleverness (rather than punishing carelessness), you'll find people quickly embracing both the drills and the security practices that emerge from them.

See also [How Facebook’s Annual “Hacktober” Campaign Promotes Cybersecurity to Employees](https://hbr.org/2017/11/how-facebooks-annual-hacktober-campaign-promotes-cybersecurity-to-employees?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+harvardbusiness+%28HBR.org%29&fbclid=IwAR0fazTOESN8Rup9_rZJhxeX3vkKNh4Upn9CrHKVxM8Yhhv2Z-QnLyPmJXA)",1542755519.0
SnowyMovies,Make a habit of creating issues if anyone spots a bad piece of logic. Put them in your sprint plan.,1542646013.0
mistralol,"You need to do proper design or things. You need to calculate attack vectors and figure out how it will be attacked and what risks are involved. Then you need to test for these attack vectors constantly as well keep reassessing attack vectors.

You also need to look at 3rd party libs very closely and audit their security as well as your own. All 3rdparty and their dependencies need audited. This of course is where it gets really really expensive.",1542655334.0
whatisboom,"I have a personal project I’ve been working on that splits the routes up how you’re asking. The tests aren’t fabulous, and are a little broken but maybe it can be of some use to you. Also any feedback is definitely welcome!

http://github.com/whatisboom/cellarapi",1542606081.0
adidarachi,"You should take a look at http://yeoman.io .

You'll probably find the stack you want.

Regarding the routes, just split the index file yourself.. ( am I missing something?)",1542609916.0
theadammorganshow,"I have a [TypeScript API](https://github.com/theangulartutorial/lets-get-lunch-api) that may be worth a look. I have routes, controllers, models, middleware, and tests split up. I do use Mongoose though.",1542638063.0
lucianonooijen,"I am currently creating an NPM package for a NodeJS based Blog API, that also can be exposed as a standalone server. It's all based on TDD, and I spent quite a while on getting the whole architecture right. Might be useful for you, https://GitHub.com/lucianonooijen/NodeJS-Blog",1542717305.0
higherpublic,Are you having issues splitting up the routes into different files yourself? I ran into some issues and can help you out if you like.,1542611426.0
unwind_protect,Check out [yeoman](http://yeoman.io/).,1542592806.0
kwiwksh,"I just make a repo called ""my-react-template"" and clone that/download as zip from github.

Not much reason for a dynamic app generator when most of the tooling and workflow is going to stay the same for personal preferences.
",1542653503.0
deadlyicon,This looks rad. It reminds me of rxjs. Also i had no idea you could do `for await (…) { … }`. Thanks!,1542600911.0
thatweirdishguy,"You can start any number of them either way, the only reason that it sometimes makes sense to have one process per core is that way they aren’t sharing CPU time with something else.  With or without docker you can run as many as you want, but if each process is busy most of the time then sharing multiple instances on one cpu will make them slower.",1542569830.0
fff1891,"The OS runs many processes on few cores by executing a little bit of each process at a time. The number of CPUs will not necessarily limit the number of node processes, or other processes that can be run concurrently. There can be performance ramifications, however, as there is a small amount of overhead when switching between processes on a core. Each Node 'instance' is its own process, and it's true that it is single threaded.

The number of containers you can run simultaneously are not bound to number of CPUs, and are running processes the same as the host OS. Depending on your architecture, some containers may be working while others are idle so there may be advantages to running many containers at the same time to get better resource utilization. It could also be true that the containers are working simultaneously and you are wasting resources on management overhead that comes with running many processes.

All of this depends on the specific characteristics of the application you are building. The best approach to the build something, measure it, and incrementally improve the system as you find performance bottlenecks. ",1542570356.0
variables,"I've experimented with this extensively (utilizing max threads / memory of Node.js - I don't know much about Docker containers). 

The factor to how many node processes you can run will be your available memory.  I forget the exact details, but I think Node has a minimum requirement of 256MB per process, but 1.5GB is recommended. I think the default is 1GB.

So if you have 16GB of RAM, leave a couple GB for the OS, and split 14 GB among your processes.  Keep in mind each instance will need some memory overhead to avoid swapfile thrashing.

Depending on the nature of your microservices, you can squeeze out more performance by memoizing the responses, using an in-memory data store like Redis, or a CDN.

I'm curious as to why you are making the architectural decision to limit each Node instance to only hosting one microservice, especially since you haven't starting coding anything yet.  What will be consuming all of these disparate services?

EDIT: some of the server-side performance testing tools I use:

* Apache Bench (ab)
* Seige
* Wrk
* Vegeta
* jMeter with concurrency thread stepping group plugin (not the right name) running on blazemeter's  Taurus

  ^ my favorite setup - allows you to run jMeter as a CLI application, utilizing low resources and providing a highly configurable testing environment.


",1542609181.0
animals_of_the_world,"your correct regarding clustering. : )

to learn load balance between different servers watch this: [https://www.youtube.com/watch?v=FJrs0Ar9asY](https://www.youtube.com/watch?v=FJrs0Ar9asY)",1542570562.0
Str4yfromthep4th,You could run 100 instances of node on you're 8 core computer if you wanted. You're misunderstanding of clustering is due to a lack of fundamental computer science knowledge. I suggest you enroll in a college program or something if you plan on doing this professionally.,1542571664.0
German_Not_German,I think facebook would have a hard time approving an app like this. ,1542575206.0
rangeDSP,"Believe it or not, these are all possible via the built in email notifications. You could reply to messages just by replying to the Facebook email that notifies you of incoming messages.

The easiest way is to set up an Outlook/gmail rule that auto replies.

For an aggregate of local events, find a local event group and turn on email notifications for them.

Don't over engineer things",1542600515.0
locksta7,Feel like this would be inbuilt into FB developer tools? Probably worth having a look around.,1542573052.0
AngryGozilla,Maybe you can build one by using [Dialogflow](https://dialogflow.com/) here is a [tutorial](https://blog.pusher.com/facebook-chatbot-dialogflow/) for the mail actions you can use [Nodemailer](https://nodemailer.com/about/) I think.,1542578644.0
deadlyicon,It's probably easier to build this as a browser extension and leave facebook open with the extension doing this work. FB probably does a lot of tricky stuff to prevent bots that do direct HTTP requests. I guess you could also write a node script with a headless chrome via puppeteer to do this in the background.  ,1542594622.0
Axumata,You might be interested in Botmother or a similar service,1542608290.0
commander-obvious,This wouldn't help you leave FB. It'd basically be a third party implementation of what FB already does: notifications of various types of content/activity. You'd have a constant pressure to just go straight to the horse's mouth.,1542786368.0
ccleary00,"Is Node.js a hard requirement here? While Node is really great, it's not necessarily good for ML. Python/R/Java are better for that and they have most of the libraries.",1542557058.0
Str4yfromthep4th,"Node has nothing to do with machine learning so you won't find a book on such a thing..if you do then great but what a stupid book lol.

If you're using node then download tensorflow and do your thing. However, you're going to need a college level understanding of the basic mathematics behind at least some of the algorithms.

 Steps:
1) learn math
2) learn machine learning
3) implement in something easy like python
4) implement in node once you have time to waste",1542564417.0
T_O_beats,There’s a Udemy course on ML with JavaScript but I have no idea if it’s any good. ,1542607041.0
Ikuyas,Tensorflow js,1542906023.0
bb8493,This is incredibly useful. I've only started reading but thank you,1542534498.0
Praysigh,This was very informative ,1542538187.0
maybeonmars,Great post!,1542547294.0
osmangoninahid,you can ping me over here osmangoni.se@gmail.com,1542502733.0
TheWillG,I can also take a look at it if you need a second set of eyes.,1542513598.0
mattyjimbo,you should probably put it in req.user,1542493561.0
dvlsg,"I would leave `req.body` alone. Otherwise it'll be hard to keep track of what the request body was originally. Or maybe you'll have a request method later where providing a user id in the body (not necessarily the user id of the caller) is expected, and you'll be overwriting it accidentally.",1542496792.0
josewhitetower,RemindMe!,1542494526.0
Str4yfromthep4th,"Doesn't the profiler already produce nice output? All you need to do is wrap it in html and convert newlinea into <br> and you're done.....
Why do you need a new node module for this? It's a 3 liner...",1542565410.0
spacebandido,What’s wrong with the git cli?,1542513461.0
GuntofacePLOW,"Well make sure you have port 22 open on server 2 for SSH, if not make sure you have an SSH client on server 2. If not install [OpenSSH](https://www.openssh.com/). I'm not familiar with the setup for NodeJS but am for Python, so I'm going to assume it's the same. The username is the username that will be used to logon to server 2, if the IP for server 2 is 10.0.0.288 then for the host you'll put 10.0.0.288. Then put the port that MongoDB runs on which is 27017. I'm not sure on the private key as I don't see my connection up that way. The password is the password tied to the username to logon to server 2.

&#x200B;

Hopefully someone more familiar with NodeJS setup can correct me on a couple of the parts.",1542471795.0
redditpentester,Why wouldn't you just open up the mongo server to the web and utilize certificate auth directly with the db engine?,1542481534.0
thistoohard,Why do we need this one? ,1542455003.0
ElectricLabrador,How does this compare to Pug?,1542488343.0
jhartikainen,"The module loading method used in node.js is *not* requirejs. The module system is called CommonJS. The two are not compatible out of the box.

In order to load CommonJS modules in the browser, you generally have to bundle them into browser-compatible files. Browserify is a fairly quick way to do so, and if you need more advanced features, check out Webpack.

However, if you look at the code in random-words index.js, the easiest way to use this would probably just be to copypaste the code into another file and be done with it. That is, if this is the only module you need.",1542446674.0
ohcibi,"You can’t just require arbitrary node modules with RequireJS. Even if you specify the proper path to a js file that js file still needs to call `define` and `return` whatever it defines there.

If you are talking about actual browser js libs, chances are high that they are specified in umd style which uses `define` when its available. You should specify a shim for every 3rd party library in your require config. See the requirejs documentation. It has an example for jquery.

You should also google for Browserify but afaik this is rather targeted at es6 modules.",1542447042.0
merkur0,"Thanks for all the replies! Using Browserify was indeed a better (and much simpler) solution.

Reddit > StackOverflow",1542554689.0
user3961,"Why not put random words filename in the script tag. 

<script src=“random-words/index.js”>

You can also try using the import statement instead of require. ",1542446829.0
billymeetssloth,"I now use JWTs. I set the expiration for a day. I have a scenario where a user can have many emails tied to their account. JWTs made it easier for me. I just add the email address and a few other details into the JWT, sign it with a private key only used for email verification and away it goes!

This was I don’t have to track a bunch of random hashes in the DB. The user gets the email with the link; link pushes JWT to the server where it’s pulled apart, the signature is verified, and then takes the email from the payload and verifies it. 

If you stick with the DB storing of the hash (still a great option), make sure to index that field. Always index fields you use to do lookups on. Then be sure to delete the hash when done, so you don’t get index bloat. Without an index, you will do a sequence scan on the entire table each time you verify which can be costly.",1542436318.0
golf_kilo_papa,"A couple things you should think about

1. Make sure the confirmation string is cryptographically random so no one can guess it

2. Throttle attempts to verify accounts so it cannot be brute forced

3. Ensure the confirmation strings expire after a reasonable amount of time 

4. Enable the user to regenerate new confirmation strings

You may not need all of these features so just decide which make sense for your application",1542472618.0
LogicCube,"Yes that would be an approach that should work fine. Implement it as you described and see if that works for you. I am using this approach too in many applications and it was fine for years. Same approach should work for ""forgot password"" functionality, e.g. generate a unique hash and send it via email as param in a link, and when clicked check this link/param against the db to see if the request is valid. You may also add a field ""expiration border"" for the link so it is only valid for let's say 48 hrs. Overwrite the hash in the db when the operation is successful to make the link invalid when expired or used.",1542471574.0
HighUncleDoug,"\- rate limiting  
\- expiration of keys

\- caching strategy  
\- you should use oauth and jwt, send user back an access/refresh token at login, so if they hold the token you don't need to check verified on every request only at authentication.  


A really quick boiler plate app for authentication, react web, aws amplify js, aws cognito.",1542482388.0
thatweirdishguy,"That doesn’t even look like a request-promise issue, this looks like your DNS resolution is broken.  Normally that ENOTFOUND error would be followed by the host name that it tried to lookup which wasn’t found, but somewhere along the way your system decided that if you asked for www.google.com you must have meant 8888.  Since google has a DNS server with an address of 8.8.8.8 I would start by checking for weirdness in your DNS or hosts settings..",1542433014.0
tswaters,"Take `request-promise` out of the mix... can you `ping google.com` ?  My guess is no - looks like your DNS is messed up.  How to fix this depends on OS - but it looks like windows based on the paths.

Microsoft made this way too hard to find under win10 - 

go to control panel -> network and internet -> network and sharing center.   click ""change adapter settings"".  right click your connection go to properties, click Internet Protocol 4 (TCP/IPv4) then ""properties"" - take a look at the DNS settings, `8.8.8.8` and `8.8.8.4` are google's which are usually pretty good.

open up cmd.exe and type `ipconfig /flushdns` and then try `ping google.com` -- you should see ping trying to hit an ip address.  If not, not sure what to say..... fix yer network.",1542484804.0
ScabusaurusRex,"Open up the command prompt. Type in the following:

    netsh

At the `netsh>` prompt, type in the following:

    interface ip show config

This will show you your network config. Verify for us all, please, that your DNS server *isn't* `8888`. If it is (and isn't `8.8.8.8`), let us know.",1542488008.0
Max_Stern,Add `strictSSL: false` to options of request. ,1542443361.0
endjynn,"    if (c == '\b' || c == 127)

I'm not sure if this makes any difference in JavaScript but try using single quotes (to denote a character) instead of double quotes (to denote a string).",1542417162.0
bossmonchan,"Thanks for this, I've been using face-recognition.js but was having trouble installing the dependencies (cmake and VS2017 build tools) in my company's production environment with all its wacky Windows group policies. This looks easier to install.",1542424559.0
brtt3000,Tried this with some images I had lying around but it detects voluptuous naked chests as faces.,1542453760.0
,[deleted],1542420527.0
tillepille,"So as far as i understand your node app doesnt hold any data. Or is locked in sessions really. 
Then the easiest way is to scale your node app with an nginx in front wich could also deliver the static files for the frontend. 

This is relatevely easy to try and maybe implement some metrics so you have more then „seems slow“
",1542420080.0
daveequalscool,"i've been working on something that has to matchmake with other users and send emails and texts after a request was submitted.

i've been adding these things to a ""tasks"" database table and invoking a function to perform all that after sending the response to the user. along with some timestamps and a job status, here's what's in each job:

* command: string, required
* model name: string, optional
* model id: int, optional

for the matchmaking, i store ""matchmake"", ""user"" and the user id. i have other use cases including the reason model name/id are optional but can't think of them off the top of my head.

it's probably an obvious approach and i have no idea how favorable it is, but it seems to be working.

at any rate, i think the best first step would be to isolate the logic for handling these tasks. make a controller or whatever that provides a clean interface for desribing these tasks like LazyTasks.addJob(cmd, model, id). it could return promises or maybe just fire events when the tasks are completed. for now, it doesn't need the database table and can fail at delaying execution but with everything routing through there as needed, you'll have one place to tweak the actual implementation without any overhead of little adjustments here and there.",1542477237.0
infographia,It looks like you might have either forgot to actually install the npm packages or your import paths are not correct. Difficult to say without looking at some of the actual code.,1542413511.0
Str4yfromthep4th,Have one app and multiple instances of it which do the exact same thing. Avoid the needless complexity. Just put a load balancer in front of duplicate app instances. You are overthinking it too much for such a small project.,1542399513.0
kryptkpr,"Yes this will work, but not with sockets. 

Use a message broker that supports shared topics,  then you can spool up more Bs and as they all subscribe to the same shared topic they would get 1/N requests.

Use QoS=1 to handle network issues or crashes.

I would run A and B in separate node processes, each with multiple threads you can scale as needed, but you may end up bottlenecking at the DB here..  ",1542397320.0
jasdeep13,"I don’t know how to say it elegantly but, Any approach to solving a problem that is “hard” and “complex” is flawed if atleast your first stab at solving this said problem is not “simple” and “easy”.

If any answer to a “hard” and “complex” problem (which i’m sure your problem is both) is an equally “hard”/“complex” solution, in doing so we’ve not simplified the problem at all. We’ve infact made it even more complex and harder to deal with.

I suggest atleast with your first draft, you try to explore some very simple and dumbed down approach, Something that you can explain to a college intern without him loosing you. (A lot of suggestions have already been offered in this thread which are excellent IMO)

Ship this simple version, put monitoring in place and watch for scalability/perf issues. Who knows your simple solution might end up not demanding any scalability refactors for next 8 weeks or 8 months and keeps on running fine. Honestly, 1000rps is not a lot of requests for Node to handle. Given you can also throw more hardware at the problem than precious developer hours.

I hope you won’t take any of my comments personally, I do not mean to assume anything about or underestimate your problem space. Just trying to offer some non-technical advice. 

Trust me, I’ve been in your shoes early on in my career where I’ve wanted to develop novel and clever architectures - just because I can. But, having done it for long enough, I’ve learnt that clout and karma points are best earned by simplifying things. ",1542413740.0
Str4yfromthep4th,"I would just use cloud foundry to spin up 5, 10, 20 whatever number of containers you need. Have them all run the exact same application. Have them all sit in front of a load balancer. You need to scale up then you simple add another instance.  This is usually how we do it in large enterprise where we process LOTS of requests. you can get a lot more creative by separating concerns into different apps and have them communicate via socket and whatnot like you're doing but I don't see any need at all for that in your description. Avoid over engineering unless you really have a need for it.",1542400484.0
ItalyPaleAle,"+1 for using a queue (things like RabbitMQ) rather than a socket. Real scalability requires asynchronous communication.

1. You can scale the two services independently
2. If the backend crashes, there’s no issue at all.
3. You don’t want to add any delay to your frontend, even if minimal.",1542420188.0
tannrTech,"First, why dump the data into the DB in A? Pass it from A to B and let B handle the data processing (like it should be) and data storage. That saves an initial query and provides a better separation of responsibilities.

You have two main processes that use a single main thread, but nodeJS offloads asynchronous work, like db queries, to either:

1. Natively asynchronous system calls, or, if the async call at the system level doesn't exist,
2. A new thread from the thread pool.

So it's not the whole picture to say that you only have 2 threads in your current architecture.

&#x200B;

The other question is: Why are you separating the order processing engine from the web server is separate processes? Is this because the web server is doing a lot of other work besides handling incoming order requests? If it's just writing to a socket (which is an asynchronous action usually) then it's probably simpler to just invoke the order processing engine's logic in a child thread from the web server. It's easier to share data between a process and a thread within that process than it is to share data between two separate processes, anyway.

&#x200B;

If, however, your web server is doing a lot of extra stuff and its multithreading abilities are being pushed already, then yeah a separate process is a good way to spare it some additional load.

&#x200B;

By having the order processing doing all DB interactions for orders, you can also eliminate row locking which simplifies your system.

&#x200B;

Unnecessary complexity precludes scalability.",1542397483.0
totalbytes,"If it's a node.js app the port should be configured in .env file. Same as for React.

Before going to the definitive guide bellow just search for word ""port"" in your project.

If you can start the process by any command you can then check the process with netstat and check what is the port it uses it.

Linux: ""netstat -tupln""  or  ""netstat -vanp --tcp | grep node""

Mac: ""netstat -vanp tcp | grep node"" 

or ""sudo lsof -i tcp:3000""

Windows: ""netstat -a -b""

Then on the code side search for word ""listen"".

This usually works with most of the rest libraries like hapi or express.

React ports ""start"":

""start"": ""PORT=3006 react-scripts start"" or

""start"": ""export PORT=3006 react-scripts start"" 

**Windows** solution

""start"": ""set PORT=3006 && react-scripts start""

Angular defaults to port 4200.

Search for angular-cli.json or angular.json.

""defaults"": {   ""serve"": {     ""port"": 1337   }  or

""architect"": {             ""serve"": {                 ""options"": {                     ""port"": 1337                 }             }         }

&#x200B;

To your success! Good Luck!",1542384574.0
ScabusaurusRex,"If you don't know the port, and you're on mac, the easiest way is: 

    lsof -i | grep LISTEN

This will list all open and listening ports, and give the name of the process that's holding them open.  It should work for Linux, but might need to do `lsof -i 4 | grep LISTEN`.  YMMV.",1542385560.0
putty27,"Hey /u/faressoft , 

I'm pretty sure [this](https://i.imgur.com/NKqkJCh.png
) is supposed to say `terminalizer play demo` instead of `terminalizer record demo` :)

",1542422694.0
TheNoim,"Great project, however the page should be more mobile user friendly.",1542447340.0
YodaLoL,Isn't this a straight copy of asciinema,1542391329.0
Norwegian666,Clever!,1542387269.0
haykam821,"> * The username is already exists

Tried many usernames, none of them worked. The user pages returned 404s though.",1542405175.0
BenjiSponge,"I've seen this an asciinema before and I think they're great projects. What I want to know is if there's a way to basically just get one screengrab. This would be great for, for example, error messages. I could run every session with it and then run a command to save just one moment (or maybe the moment before i typed the capture command).

Is such a thing possible? I don't have much of a need to see it dynamically.",1542388311.0
TheLegendOfZero,"It sounds like you're trying to achieve a level of [row/table-based multi-tenancy](https://vladmihalcea.com/database-multitenancy/), but using [natural keys rather than surrogate keys](https://vladmihalcea.com/database-multitenancy/). This is probably going to add unnecessary complexity to your database design, as you've mentioned.

It would be better to keep all your tables with auto-generated ID keys (surrogate keys), and have sku's and other natural keys as `NOT NULL` columns.

This will mean that any complexity is moved into your JSON import script's logic. The store owner can continue to link offers to product skus. It'll be up to the import script logic to find the product id with the matching sku for _that particular store_.",1542393489.0
freddjah,Are you sure you're not thinking about npm start? Otherwise make sure that you have a file called start.js in the directory.,1542373679.0
tastyricola,did you mean `npm start`? or do you have a file named `start.js` or a `index.js` inside a folder named `start` that has gone missing?,1542373777.0
Alijah69,"Npm ""run"" start",1542378952.0
Uiropa,"It sure sounds like it’s there. If you want to know where the binary is, run “which mongo” or “which mongod” in the Terminal.",1542369535.0
alinnert,"You only need these if you `npm install` native modules (usually written in C/C++). Even then you still can install those things manually and separate from Node.js. Choco is only used to install all the other dependencies like MSVC++ tools.

So, no, you don't necessarily need the additional tools.",1542365986.0
,[deleted],1542379334.0
paulcarroty007,"> move my whole development environment to Windows

Good luck. Windows is ultra shitty for development, be honest.
",1542364381.0
thistoohard,Did you read the documentation?,1542366744.0
iAMsuperDEVIL,Completely unnecessary,1542338118.0
KyleG,"I used to do it, but then I realized that the full function callback header is `(req, res, **next**)`. Now I don't return a res.* because I want my code to read next(); This is for logging and stuff.",1542348636.0
FunctionallyReactive,I have a use case where if I don’t use it the method continues and I get a “can’t set headers after sent” error. I added a return after the res.json() I was expecting to ‘return’ and that solved the problem,1542342439.0
AsynchronousMethods,I use `return res.json()` to stop the rest of the code from running. ,1542349357.0
UkraineTheMotherLand,"Just curious, are u asking because eslint is complaining? Same thing happened to me, i just disabled that rule",1542341073.0
phitruongdn,Res.* will cancel Express callback stack.,1542364590.0
JakeInDC,"It's a function, gonna return at the end regardless.",1542365183.0
imax89,"You don't need to do this. The only case is when you have some logic after ""res"". So you can either use if-else or just interrupt code (function, to be precise) by using ""return"".",1542370727.0
Seaoftroublez,"It doesn't seem that anyone has actually mentioned why that final return is useless.

```
return
```

is functionally equivalent to:
```
return undefined
```
Which is the default value ""returned"" by a function which does not specify a return value. So a ""return"" without any value is only useful for breaking out of control flow / logic. I.e. to return out of a function early or if a particular expression evaluates to true.",1542373941.0
commander-obvious,"This is just about as necessary as:

```
const greet = () => {
  console.log(""hello"");
  return;
}
```

The following is a useful pattern, though, and is called ""short circuiting"":

```
const greet = isLeaving => {
  if (isLeaving) return console.log(""goodbye"");
  console.log(""hello"")
}
```",1542786719.0
bschaepper,"I do, because more often than not controllers are promisy. Makes them way easier to test, returning the promise we're waiting for. So that tests can wait for it too, and be assured, controller code has finished. ",1542349356.0
shrinivas28,Return will actually return the res object in the api response. So its necessary to return an res object.,1542347387.0
daveequalscool,phone battery's about to die but i think you can make one query by populating favorites in a user query. see here: https://mongoosejs.com/docs/populate.html,1542337926.0
ohcibi,"There is two issues here with only the first one being actually important:

1. you have a misconception of how to handle Async code which apparently only one person responding here bothered to mention and only in a subparagraph. However this is your *main issue* as you need to handle Async properly not only with mongoose but with almost anything in js. The problem not just starts when doing that second query but on every mongoose find and update/insert/delete action. Async/await is just syntax to make the code more readable. Spoiler: the fact that you do `res.send` ie calling a function instead of simply `return`ing in your handler function already addresses asynchronous behavior and is completely independent from mongoose whatsoever. The key is now to call that function inside the right callback or after some `await`s if you go that way. But async/await is only syntax sugar and you need to understand how promises and callbacks work and why they are used at all before going async/await.

2. The query might be cut down to one single query but that’s not a „solution“ to your problem as the one query is still performed async. In fact you should tackle this as a low prio performance issue once you got the async stuff straight. Querying can be done either this or that way it’s „faster“ and „slower“ but not „right“ or „wrong“. Your approach to handle async however is clearly „wrong“. Not even „bad code“. Plus it affects way more than just mongoose, so you really need to fix that and your knowledge instead of a hypothetically slower MongoDB query.",1542360819.0
Shadaez,why aren't you just sending it after the for loop?,1542334840.0
rollickingrube,"Looks like you want this? Some of these responses are really old. Go with the more recent ones.

&#x200B;

[https://stackoverflow.com/questions/5818303/how-do-i-perform-an-id-array-query-in-mongoose](https://stackoverflow.com/questions/5818303/how-do-i-perform-an-id-array-query-in-mongoose)",1542335439.0
ardme,"You would be better off making one query as opposed to multiple queries in a loop. But if you need to async stuff in a loop this is the wrong way to do it, you should instead look into other options such as the [async](https://caolan.github.io/async/docs.html#each) module `.each` method, or use promises and do `Promise.all`.",1542337381.0
jenkynolasco11,"I’m in a phone, but:

‘’’
Places.find({ _id : { $in : user.favorites }}).lean().exec(function(err, places){
  return res.send({ places })
})
‘’’",1542340590.0
kucukkanat,"As I checked, those are what they return :   
Schema.findById => Query  
Query.exec => Promise   
So in this case \`Place.findById(favorites\[i\]).exec()\` will return a promise.   
You can create an array of promises then use Promise.all for a better code organization.   
\`\`\`

const promises = favorites.map(fav => Place.findById(fav).exec())  


// After all promises are retrieved from DB do this  
Promise.all(promises)  
.then(listings => /\*\* Do smth with listings \*/)  
\`\`\`  


This seems to be a good explanation of repeating awaits : [https://blog.lavrton.com/javascript-loops-how-to-handle-async-await-6252dd3c795](https://blog.lavrton.com/javascript-loops-how-to-handle-async-await-6252dd3c795)  


&#x200B;",1542356925.0
fazulk,"Something like this:

    User.findById(user).exec((err, user) => {
        if (err) throw err // or log your error
        let favoriteIds = user.favorites.map(x => x._id) // not sure how your data is setup

        Place.find({ _id: { $in: favoriteIds } }).exec((err, places) => { // are the favorite IDs the same as the ""Place"" ids?
            if (err) throw err // or log your error
            res.send(places)
        })
    })

Another idea would be to aggregate over it, you will get a much faster response than a typical find query, especially if you need to utilize _ids across different collections.

You can also use Promises instead of callbacks, which come with mongoose. Just replace your .exec() with .then() (although for some methods, they are not true promises) Try to understand promises before diving into async await.",1542359872.0
alabianc,"On a phone so I may be reading it wrong, but you could sequentially loop over your favorites array and get each listing asynchronously using a recursion based loop. Then via a callback get notified when you have all listings and send the response. Of course you can also make it promise based instead of callback.

userController.getFavorites = (req,res) => {
	let favorites = [];
	let listings = [];
	const user = req.params.userId
	if(true) {
		User.findById(user).exec((err,user)=>{
			favorites = concat(user.favorites);
			getFavorites((err)=>{
				if(err) {
					//handle error
				}
				res.send(listings);
			})			

		})

	}

	function getFavorites(callback) {
		function iterate(index) {
			if(index == favorites.length) {
				//when this callback is fired you know you got all of em without any errors
				return callback(null);
			}
			Place.findById(favorites[index]).exec((err,favorite)=>{
				if(err) {
					return callback(err); //do error handling
				}
				listings.concat(favorite);
				//now go to the next
				iterate(index+1);
			});
		}
		//start it
		iterate(0);	
	}
}

I hope this may clear some things up...
",1542338449.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Checking for community interest. Small survey. • r\/node](https://www.reddit.com/r/javascript/comments/9xhzfb/checking_for_community_interest_small_survey_rnode/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1542335671.0
FormerGameDev,"... you start with an assumption that the reader doesn't know anything at all about the web, but they do have an intimate understanding of the C10K problem, which isn't specifically what node exists to solve, as is later posited.   You basically insult the reader's intelligence or familiarity with anything at all in the beginning, then hammer them with things people who need an article titled ""Getting started with Node.js"" wouldn't understand, and follow it up with a bunch of things that aren't really ""Getting started with Node.js"", and you don't really do a particularly good job of handling the what and the why, either.
",1542333633.0
m4xst1rn3r,Thank you.. excellent article for those of us doing real hardcore programming and mostly ignoring toys like js and webdev. ,1542398059.0
ecares,"> Is Typescript on Node.js good enough for Java developers?

This title is a nightmare",1542319155.0
jcrka,"I'll add a nightmare comment 😂

For me as java developer.  Node is excellent (enough) for prototyping.  Fast and flexible and allows dirty hacks.  

Typescript adds types, syntax sugar, but kills flexibility and dirty hacks.  Well, thanks,  I already have kotlin.

On a serious note,  answer is depends on what do you exactly want from node.  ",1542319761.0
qashto,lol at using Java in 2018,1542347470.0
saltupz,"Sorry too much code to read on my phone, but a quick glance told me you actually sont have a session, but use tokens. Tokens by nature are stateless, so you wont need a session at all. You should validate the token and then get the user id etc from the token.

That said sessions are imho better for traditional web apps, and tokens work better in ios/android apps talking to a rest api.

",1542318644.0
bonanzaguy,"I'm not exactly sure what you're trying to do here, but I don't think you need a req parameter. Have you checked the request object after it's been through passport? Calling `done(null, user)` should be attaching that user object to the request. If you need to access something about the user in a route down the road, just look at req.user.",1542335091.0
totalbytes,"Hey there,

I like the cleanliness of the code.

This is a pretty much nice skeleton for a node js app.

On the UI side, how are you doing an MVP or showcase the usage of the backend?

For us - oldies but goldies developers things are simple - but for newbies, it can be pretty hard to understand how to use this backend from a frontend.

You got a star and a watch on Github!

Keep up the good work!

&#x200B;",1542376380.0
aklesky,"Hi, you can try heroku",1542307049.0
Sarithis,"[Heroku](https://www.heroku.com/) is pretty easy to use. After reading [this tutorial](https://devcenter.heroku.com/articles/getting-started-with-nodejs), you'll be able to deploy your app without any problems.",1542307651.0
subterrane,"Zeit Now version 1 is dead-simple.

https://zeit.co/docs/v1",1542310544.0
ImperfectTactic,"I'll try to answer the ""explain this hosting thing in little depth"" first, and get to the uploading part after.

There are a huge number of options out there for hosting, and they vary in their cost, flexibility, and the amount of learning you'll need to do.

To offer five common types of hosting:
* Static website hosting. Commonly used to host a website that's all client-side and doesn't call back to your own server. A generally cheap way of hosting websites like blogs where there's not much in the way of dynamic behaviour requiring a server.
* Managed services. You pay a company to run a service (somehow) that you can upload your content to. Quite often these have quite strict limits on what you can do, effectively limiting you to static website hosting, or allowing only particular ways of running services.
* Physical servers. You pay a company to run a physical computer that is hooked up to the internet. You often have to maintain it in terms of applying security patches, and that sort of thing.
* Virtual servers. Often with the same level of access as their physical counterparts (at least these days), these are usually smaller and cheaper, with  fewer dedicated resources. Again you'll often be responsible for maintaining it.
* Container-based hosting. This has taken off a bit in the last few years. To an extent the idea is the same as Virtual Machines, but without going into detail there's some differences in how they work under the hood, and there can be a lot of difference in how you deploy them.

From your description I'm going to guess (and it's only a guess) that you've been given access to some free managed hosting. The upload processes that are available to you will depend a lot on what that hosting provider supports, and you may not be able to run a node service on it. The best thing to do would be to look at their documentation - they've probably given some details (e.g. ""FTP to..."" or ""upload through this web console"" or similar).",1542310557.0
,[deleted],1542305763.0
DrunkGenesis,Those warnings were never a problem for me. But i think yarn maintains the dependencies of each package in the package itself.,1542307241.0
ohcibi,Peer deps should generally only bother you if they come directly from your own deps. Often it’s just about additional but optional tooling. Libraries should not break with missing peer deps but have a sane fallback route (not all might adhere though).,1542365213.0
freddjah,"Wes Bos has a tutorial where he uses the npm module connect-flash with passport, so not exactly the same, but it might help you. https://github.com/wesbos/Learn-Node/tree/master/stepped-solutions/45%20-%20Finished%20App

Best of luck!",1542314785.0
thealfreds,I don't think I ever got them to work. Usually just sent back an error with the response object. That should be available in the strategy.,1542309864.0
ImperfectTactic,"You've described at least four or five different pieces of workflow, with several different users being involved along the way. I recommend starting by breaking things down into smaller chunks, e.g. ""sign up"", ""indicate if customer or client"", ""create order"", ""claim order"", and so on. These are all going to have dependencies between each other. 

Then find the smallest sequence of steps to doing something useful. And don't be afraid to tweak it to reduce implementation effort - maybe without signing up you as a customer could just submit a form that gets received by an admin who manually e-mails out to clients that a job is available, and the first one to click the claim link gets it. We've introduced some human elements to automate out later, but we've avoided sign ups, complex flows, forms upon forms, and so on.

You now have a minimum viable product (MVP) for doing something useful. Implement that.

Now, where are the pain points? Is the ""meatspace"" part of the solution a bottleneck or is it something else? What's the smallest change that will remove pain or add functionality? Maybe put your ideas on an impact/effort scatter graph to see if you've got some quick wins. Pick one. Do the minimum you can to achieve it. Rinse, and repeat.",1542303397.0
,[deleted],1542301753.0
amaljossy,I am learning web app development with js. Mostly react. Since I am a beginner I thought I will postpone learning to write unit tests till I am confident with the basics. I would like to hear some opinions on this. Thanks,1542309285.0
marinespl,An hour long video instead of an article which you could just skim and decide if you want to read it or not.,1542304200.0
jesusgn90,"I didn’t see the video just because someone said it would take to me one hour. By the way I like people can share their vids, maybe I see the video another day. Thanks !",1542324032.0
sldomingo,"they are everywhere, but only a few of us are good :)  
What do you need? ",1542294694.0
ggolemg2,"Everywhere.  Job scope / deadline for those of us who want to bid? (I don't, just asking for everyone else)",1542301634.0
yonatannn,"I also looked not long ago and found someone quite good, if you need I can share details in PM (have no interest or ask for anything)",1542297073.0
goleadornato,Yes?,1542297091.0
romggo,Right here ☝🏼,1542298462.0
FormerGameDev,Howdy!,1542355110.0
Str4yfromthep4th,"Drop the garbage module and use the lib built into node https://www.w3schools.com/nodejs/ref_crypto.asp

Be very weiry about anything pretending to make crypto ""simple"". The lib you are using looks like it was written by someone who decided to wrap someone elses library and call it their own. Red flags all over this module.",1542301065.0
MoTTs_,"> app.use(SimpleCrypto);

I admit I'm not as familiar with Express as I should be, but I checked [the docs](https://expressjs.com/en/api.html#app.use), and app.use is supposed to be passed a path and a list of callback functions. Instead, you're passing in the SimpleCrypto namespace object. What are you expecting to happen here?

>     setSecret(key)
    encrypt(msg)

Where does the reference to these functions come from? My guess is you detached methods from the object they're supposed to operate on, so they lose their context. That would explain your ""Cannot set property '_secret' of undefined"" error.",1542308492.0
bayareawebpro,No idea about that package but: Don't you need to set the key before you encrypt?,1542290506.0
subterrane,"I wrote an article about that once. 

https://dev.to/subterrane/i-learned-enough-web-crypto-to-be-dangerous-5b5j",1542302407.0
notAnotherJSDev,"Use a logger, like [morgan](https://www.npmjs.com/package/morgan/v/1.1.1)",1542289837.0
AnonymityR,this code is for sending an email using NodeMailer the mail options object is for defining all the parts of the email you are sending. The from email is the from address and the to email is the address the email is sent to,1542284288.0
gui_ACAB,"The transport defines the outgoing email options, the mail options is the actual email object being and the sendMail is the function that sends the email.

&#x200B;

Pay attention to the outgoing email options, [you@email.com](mailto:you@email.com) should be the same as the from email of mail options, otherwise may be blocked as a attempt of scam.",1542291873.0
cjbprime,"TLS (https) already does that. You should use TLS, and in fact most browsers won't let you not do that.",1542257967.0
GoogleyEyedNopes,"Your answer here kind of depends on what data is in the JSON. Is it your grandmas best recipe for fried octopus?  Probably don’t need encryption. 

Nuclear launch codes? Maybe go ahead and encrypt that bad boy. ",1542258276.0
commander-obvious,"ssl, require(""https""), etc.",1542270745.0
DrunkenCarolina,Installing the executable from the NodeJS website should work just fine. I prefer though to use [node version manager for widows](https://github.com/coreybutler/nvm-windows) especially since the LTS version just recently switched from 8 to 10. NVM makes it easy to install new versions and switch between them.,1542244516.0
DrunkGenesis,Working on windows with node is really frustrating. Common tasks also take longer. Try to use a Linux VM through vagrant.,1542244837.0
shrinivas28,Try downloading the .msi file from the offical site given below and click on the executable file to install. Once done set you environment variables. [https://nodejs.org/en/download/](https://nodejs.org/en/download/),1542249616.0
shrinivas28,Uninstall and try reinstalling again.,1542347191.0
steeeeeef,"Use a mac instead :’)

Jk. I recommend downloading the executable* from the nodejs website instead of using the command line. Less hassle.

*I think it’s an executable but I’m not sure, I use mac so I downloaded a pkg.",1542242244.0
robhybrid,Install Linux.,1542241987.0
TheOneRavenous,"Ask questions about constraints before digging into a single solution. CPU constraints, number of users, possible edge cases to consider that you don't find apparent in the original question. 

Explain youself as you sudo code. 

Eg: ""I feel it's necessary to go over the entire data structure to complete X task"".

""I think this task is going to take a long time (insert Big O notation if needed to prove the time complexity) so I should spawn a child process and wait for a response so that other users can keep using the main app features.""

""Oh this task is well suited for streams. The CPU/network that we're designing for will have latency issues so we can utilize back pressure from streams to mitigate""

""I'm using async/await here because the API call is Async and I need the first bit of information from xxx API to finish my task""

""Using the Array.map() feature allows me to do zzz to complete this process.""

""I'd like to break these two functions into separate middleware, in order to separate my concerns and be able to change out one middleware later without affecting the other."" ***Assuming that the two functions don't rely on one another. 

""I'm using a standard for loop instead of built-in for Each because for loop is faster and has smaller memory foot print""

""I think a custom event listener here would be great for these Async tasks so that I know when to proceed""

This shows you understand node, understand JavaScript and you understand backend concepts. Definitely know when to apply each. 

",1542320662.0
klduckling,"Here's an interesting comment from this [post](https://www.reddit.com/r/AskReddit/comments/6k0p7l/what_are_the_best_free_online_certificates_you/):   


>Lemme tell you something, as someone who has hired a lot of staff over many years.  
>  
>Get something to put on your resume. 90% of what we're looking for is that someone is willing to put in effort....  
>  
>.... The other 10% is the skills you bring to the table.

  
I feel that since you posted this on reddit, you definitely are willing to put in effort. Try your best to communicate that. Best of luck to you ",1542237873.0
steeeeeef,"If it’s possible, show pieces of code you are proud of and explain why your solution is good (or why it isnt since you might have learned more). This shows enthusiasm which imo is just as important as hard skills.",1542243279.0
Saguaro66,generators seem so strange in the days of async/await,1542260397.0
PJitrenka,Glad I clicked. That was a good read,1542253658.0
FrendlyNbrhdCanadian,Not so much a guide as a list.,1542261785.0
totalbytes,"Those damn generators remind me of C pointers.

I only see stars around.

You pretty much nailed all methods.

The only thing is how you can scale out with queues but I guess that is not JS dependent.

Nice summary!",1542286247.0
euclidian_space,Observables are the best way to reason about anything with a time domain.,1542294184.0
Axumata,"Expected some cool uses of async/await, got introductory material. Nevertheless a good article.",1542266953.0
thistoohard,Isn’t this spam?,1542282139.0
josewhitetower,"Well, MERN stands for MongoDB, Express, React and Node.... Express is a Node.js framework, so you can use different packages according to your needs.
React, a front end library and you can combine it with many other libraries.
MongoDB is a NoSQL database. Using Express you can use mongoose ( a package) Wich is an ODM to interact between Express and MongoDB.
As you can see, MERN is something you have to learn, every letter by separate, and learn how to put all together.

MEAN is the same, but using Angular.
There's also MEVN or VENoM, with Vue.js",1542233247.0
superreboot,I didn't make much traction until I learned each piece separately and then put them together. Theres a few Udemy courses and youtube videos that put them all together. I found that I ran into a lot of issues if i didn't understand what the different packages were doing separately when trying to use them for my own projects,1542261062.0
ImperfectTactic,"The same way you do DevOps for everything else - look at the wider context; monitoring, deployment, security, infrastructure, running costs, performance...

I'm not sure that actually answers the question though. Do you have a more specific version of the question?",1542228445.0
NaineshPandya,"DevOps and deployment for Node depends on what platform or service you are using. Generally what I suggest is You can spin up a server on AWS EC2 or Windows Azure and install pm2, Node, nginx. You are probably better off using something like Ansible to automate it all (so you don’t have to do it over and over).

Let’s say you opt to use IaaS and create an Ansible playbook. I recommend spawning multiple Node processes on each machine (one per each core) with pm2 or similar, then putting them all behind nginx and Varnish cache. Also use load balancing for 2–3 of those EC2 machines and maybe one Redis/MongoDB server for sessions and logs.

No matter what resource you use, the best way of doing is learning. AWS trial account is free so sign up and create a few instances.
",1542225616.0
core_dumpd,"I'd suggest checking out AWS free-tier as others mentioned, but I'd specifically recommend looking into Elastic Beanstalk and their Node.js platform:

https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs.html

Using the command line interface tool for it:

https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html

...you can have a Node.js deployed and running in a few minutes.

You can of course use the web UI to do most everything as well, as the CLI approach assumes you have Python available.

Elastic Beanstalk is a great balance between control and managed services, and the underlying infrastructure that it sets up is all just base AWS services they've put together.",1542243367.0
sockjuggler,"""DevOps"" isn't:

* one specific thing
* something that is solely determined by your language/framework/etc of choice
* something that you just ""do"" 

If you have specific questions about achieving something... specific, I think you will get more useful responses.",1542236128.0
hags033,It would be more specific to creating containers that spin up servers with node and dependencies. Most of everything else is the same.,1542240353.0
kaen_,"It's the same for Node as it is for Java, Ruby, C++ or Fortran. The application runtime itself can be mostly a black box (especially true in containerized infrastructure). What matters is its network behavior, resource requirements, external dependencies, scaling behavior, and other largely external aspects of the application. Most of this is completely unrelated to what language the application is built with. The only part where I'm concerned with the language is when adding instrumentation (APM, exception reporting) or creating the immediate deployment mechanism (in the old style of server-based deployment).

These are two very narrow subsets of what most engineers would consider DevOps. If you keep reading you'll come to find that ""DevOps"" is most commonly used as a marketing term that's useful because it means whatever the reader wants it to mean. Infrastructure engineers will use words referring to specific processes or values in technical discussions. Some of these terms support the mode of work that DevOps was originally coined to represent.",1542244830.0
ferrx,Containers and gitlab runner. ,1542253160.0
TheHeretic,Don't get lost in the buzzword that is DevOps. What is the problem you are trying to solve?,1542286772.0
WhyAyala,I don't really understand the question unless you're asking if there are dev Ops tools built on Node? ,1542290560.0
,[deleted],1542228746.0
CloseDdog,"Because what you did before was not Ajax. `res.render` is to render server-side generated pages, which you will basically never need to request with Ajax. Your previous approach was the correct one. If you want to send that token there are probably many ways, but the only one that I have experience with when creating server-rendered applications are cookies, maybe other people can offer a different solution.",1542218565.0
_annasu,"It's difficult to answer without knowing what SaaS are you working on, but perhaps your clients would be happier if you would simply allow them to connect their  Google Analytics accounts and send all the data there? You can even prepare report templates for GA. ",1542227384.0
gajus0,"I am always using just the \`node\` image.

&#x200B;

Whats the use case for tiny docker image?",1542238415.0
idono-87,"What you want to do in this case I just keep a reference from the user to the book and vise versa. This way you can for example quickly query for a user's recommendations while applying a genre criteria and sort for the top 5 recommendations.

",1542197139.0
vladimirice,"do not use mongoDB, use relative databases for regular cases and mongoDB for special cases. I had a lot of troubles with MongoDB as a main project database. It is a very bad choice. 

Consider to use PostgreSQL with something like sequelize or knex. ",1542261046.0
Ronniemanseaman,"Maybe use a relational db. Most resources I've read on issues like this is, don't use mongo.",1542202502.0
BloodAndTsundere,"As others have said, Mongo isn't the greatest for complex queries. When you are doing complex queries, relational DBs are much better. But for something like ""most recommended,"" you probably don't need an up-to-the-second correct result. So you might consider periodically polling the whole DB, compiling the recommendation statistics and then caching that result somewhere for retrieval.",1542207301.0
TheBurritoMonster,I'd almost recommend a neo4j for something like that. Graphing databases will be your friend in linking like/common queries.,1542204177.0
LJQTKY,"The mongodb aggregation framework is pretty powerful. If you have time, this guided course may help: https://university.mongodb.com/courses/M121/about

This can be combined with the suggestion from /u/ElectricLabrador that you periodically run this potentially slow query ahead of time for each user, and store the resulting list of recommended books in an array in each user document so it can be retrieved quickly.",1542223732.0
FINDarkside,"I'd make a new collection of recommendations {bookID, userID} and then simply keep a recommendations number in the book object. You can update the amount of recommendations a book has every time your change the recommendations table. Don't be afraid to have ""duplicate"" data in your database, that's how you usually do stuff with NoSQL databases.",1542251938.0
dahlesreb,"I'd make two collections, user and book.

When a user recommends a book, you $push the book's ID into a 'recommendations' array field in the user document, and you push the user's ID into the 'recommendedBy' array field in the book document. Don't worry that this is ""duplicating"" the relationship - such denormalization is standard practice with NoSQL databases, with the benefits generally far outweighing the cost.

If a user un-recommends a book, you $pull the user/book IDs from the book/user documents. This would be as simple as db.user.updateMany({recommendations: bookId}, {$pull: {recommendations: bookId}}) and db.book.updateMany({recommendedBy: userId}, {$pull: {recommendedBy: userId}}).

That way the queries are all dead simple, and it'll set you up nicely if you want to do fancy stuff. E.g. [graph lookups](https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/).

> Are there best practices for having database models reference each other. e.g this person recommends these books and this book is recommended by the following people

I've found arrays full of IDs as I described above to be the most flexible approach for writing queries/aggregations and to have the best performance.






But I don't use Mongoose so YMMV.",1542320587.0
joesb,"When you are doing non-relational database like mongodb, you don’t try to do complex query in it. You either update aggregated data into some table on data update or via cronjob. 

Or you feed your data to some analytic server and just query the results. ",1542196649.0
ElectricLabrador,"Simply keep an array of recommended books in your Person object. Periodically or event triggered, run the “determine most recommended books algorithm” by pulling all the recommendations from the Person object.

Determine books a person recommends, easy. Determine people who recommended this book, look for that book in each of the recommended arrays.

Others have suggested not using MongoDB due to this relational nature. I disagree because the database layer should not do any logic. ",1542214156.0
LilGreenB,"To just answer your question: Yes.

&#x200B;

I have some knowledge of Node and [socket.io](https://socket.io) but I've never deployed a Node app nor have I used hostgator. However, I may as well throw in my 2 cents since it would likely be better than no comments at all, at least until someone with more knowledge about this appears.

My understanding is standard web hosting on hostgator allows you to host your client-side files (HTML, CSS, and client-side JavaScript), and they handle the server-side things and provide you with a interface for a SQL database as well, is that right? It seems like hostgator just implements a shared LAMP stack on their servers (Linux, Apache, MySQL, PHP). If that is what you're using I don't think you would be able to implement a fullstack [socket.io](https://socket.io)\-based application.

BUT I do see on their website they have a dedicated server hosting plan, which allows you to get full control of your own dedicated server, meaning you would be able to write and setup the Node application that implements the [socket.io](https://socket.io) server api on that dedicated server that your [socket.io](https://socket.io) client sockets can bind to and communicate with. So you DO have to write your own special server but it won't be hosted by the standard web hosting service hostgator provides. If you are learning Node.js and [socket.io](https://socket.io) I'm guessing you already have a basic understanding of how to do that, if you need help theres a ton of free online tutorials and videos.",1542310424.0
revrenlove,Do you have a code sample?,1542182776.0
son_of_meat,Pass the data object as a parameter to the function. That doesn't create a new copy of the object.,1542182884.0
ENx5vP,"**module.js**
```js
module.exports = () => console.log('Module')
```

**consumer.js**
```js
const fn = require('./module')

fn() // Yields ""Module""
```",1542183820.0
ecares,"Okay it feels a bit unclear so let's dig a bit into how `module.exports` and require actually work:

When you require any Node.js module (including the main one), Node will rewrite your code a bit: it will add a line at the top of the file and one at the end:

```
function (exports, require, module, __filename, __dirname) {
<your code here>
}
```

(see https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L127)

Then this function is instanciated in the execution thread (where your js code lives). the exports/module.exports object is returned by the require.
Also, it is noticable that this process is a singleton: there is a cache and a module that has alredy been imported is not re-instanciated (excpet if someone messed with the cache obviously).

As a result, for each module, the module.exports object is **unique for the whole process**. There is no underneath copy or anything like that (this would only apply with multi-threaded Node.js apps).

So there must be something very weird in your app to get this result, I suggest you shared a bit of code so reditters can take a look and help you further.",1542189897.0
commander-obvious,"> however when i attempt to run the function on the data object that is defined in the main file i get a reference error.

Learn about scoping. You're declaring a function in util.js, importing it into main.js. The function doesn't know about any variables scoped in main.js. Use function arguments, or move your data to util.js. Another thing you can do is move your global constants to something like const.js and import them into util.js and main.js if both files depend on them.

> i feel like this would cause a serious performance hit as it's several MBs of data and the function gets run 100s of times per second

I highly doubt you are passing megabytes of data into the function itself. In fact, it's impossible because you will run into a stack overflow, seeing as the call stack size is capped at a few MB or less. **Objects are passed by reference.** There is no perceptible performance penalty, feel free to pass it into the function. You will be fine.",1542272158.0
GooberMcNutly,"Thanks, I'm shopping for an oAuth solution, so this is great timing. ",1542198508.0
dphunkt,Looks great! Does this mean that you'll be actively maintaining it for the foreseeable future?,1542211172.0
hotdoghelper,"The issue with clustering or any sort of parallel processing is state management between the threads/cluster. Once you figure out how to track states for each instance being processed, you can open up a socket instance to relay the information back to the client.",1542168692.0
vladimirice,"You may create a separate application, not the instance of your main app. And use it only for socket connections. 

Clients will connect to this endpoint for example ws.example.com. This app will manage them and also has an API which is used only by the main app to push notifications for the socket clients. ",1542176745.0
BrokenPhoneBooth,Make sure you’re using “websocket only” transport with PM2 and that your workers are stateless and it should work.,1542256252.0
,[deleted],1542168828.0
mohelgamal," I am self taught and more a hobbiest than anything. But I do have both learning and teaching experience in highly complicated and unrelated field (medicine). Basically I have noticed that people go through the same learning stages all the time (including myself) 

1) child stage:  I know nothing, and need all the help I can get and don’t judge people who seek help as well

2) teenage stage: you manage to solve a couple of problems and suddenly you are like. I got this, all those old fools are idiots for not doing it my way which is totally perfect

3) adult stage: where you know that there are multiple approaches to every problem, and that no one approach is perfect and everything has side effects and you stop judging people again. 


JS is very common among people who are self taught and not very experienced with a broad range of problems. Basically, if you wanna go into programming on your own, you will find yourself attracted to the JS world to avoid learning multiple languages. People who are in their 20-30s typically have been learning for only a couple of years 


This puts many of the users into this “teenage” mindset where you know a little and you think you know a lot and just can easily slip into considering others idiots if they don’t agree with them. 


The other common entry language is python, but unlike JS, python is self evidently easy, so people who learn python typically are less prone to feeling like they are gods as they are using python specifically because it is easy 
",1542168912.0
kyle787,"Node consistently gets bashed on just like JS does in general so people may be overly protective. Just like with any language it is probably a good idea to be aware of new features. However, when something is unstable or not even LTS there isn’t really a point to use it other than educationally or for personal projects. ",1542173467.0
Finrojo,"https://www.udemy.com/the-complete-node-js-developer-course/

https://www.udemy.com/nodejs-the-complete-guide/

Both are pretty good and easy to understand. Good luck",1542149889.0
abby_cohen_221,"I started out on these tutorials about a year ago: https://www.turbo360.co/tutorials

They were fine. I'm working as a junior React and Node developer right now in Northern VA.",1542160001.0
tuckerconnelly,"I prefer Zeit's \`micro\`. The node docs are also really good, maybe just read those cover-to-cover. \`npm\` is crucial. \`prettier\` and \`eslint\` for code formatting. \`jest\` for testing. \`axios\` library for making requests. And I prefer \`postgres\` as a database for ACID consistency.",1542161951.0
iEatDringSleepCode," A good tutorial series is the [Cloud Academy](https://academy.appdrag.com/), but it uses the AppDrag platform.

Frontend: HTML, CSS, JavaScript, jQuery/AJAX

Backend: MySql, Node.js, Python, Go, .Net, Java",1542220590.0
commander-obvious,"If you already know some basic server-side JS (be comfortable with streams and event emitters), I would start by building a blog engine that lets you log in and make posts, supports users logging in and making comments on your posts. You'll learn all of those things in the process, while having a clear project. I find it much more effective to learn something by applying it and doing it. You'll learn about authentication, encryption, compression, serving content, using a cloud provider. You could easily use Mongo or Postgres for something like this. I tend to go with Mongo and switch to Postgres or something else only Mongo doesn't cut it.",1542271917.0
Jafit,"\>things like how to encrypt user data, user authentication

Ideally don't do these things and use 3rd party services through OAuth integration instead, because you don't know what you're doing and that's why we have data leaks.",1542156703.0
totalbytes,"You can always do it in one single thread. 

I just imagine multithreading will be just another feature that wants to keep big scale projects around Node JS. When you want to scale there is kind of impossible right now.

For the frontend, it does not make sense.

But on the other side if the framework does it ""all for you"" and you write the code the same as before that would be a nice boost. Simplicity over multithreading :D",1542148727.0
fl0w_io,I would be onboard for some type of green threads model (like Go) but JS is more and more becoming the languages I wanted to put behind me.,1542187073.0
GrzegorzWidla,"Strapi is great overall and for an average CRUD app can save a ton of time.

Otherwise it depends. Headless WordPress might work or you might need custom one. ",1542149961.0
winchendonsprings,"I've honestly wondered this for a long time. All the work I do needs to be able to be updated by someone who doesn't want to look at code. For years I did drupal sites, then I inhereted some wordpress sites and built a few more of those, now clients are asking for squarespace sites and I've built some of those with the developer option turned on. 

I'm sure there's a solution but what's a slight deterent for me with most JavaScript frameworks/stacks is how do I allow paying clients to update their site when I hand it off? 

I've used Contentful before but that's not ideal and there's headless drupal and headless word press, but with all the security things to look after with those it seems not worth it.",1542154982.0
boon4376,"If a client wants to be able to edit their website and not pay me a monthly fee for maintenance, I give them a squarespace. I save node for custom coded applications or situations that cannot be fulfilled by an existing CMS. ",1542155924.0
niodo,Huge fan of Craft CMS,1542158470.0
CAPHILL,https://github.com/TryGhost/Ghost/blob/master/README.md,1542158644.0
ribo,"Not free, but I love contentful",1542160412.0
mustafazc,"We are using [cockpit CMS](https://getcockpit.com/). It is php based. 
Setting up is easy with their docker image and they support posting data to a webhook when any changes are saved. It also has a config option to work with mongoDb.",1542191589.0
FunctionallyReactive,You’ll likely have to build one that has endpoints to update the database with as the User intends ,1542144166.0
smilingjester,"I started to use keystonejs for my personal projects and I love it. 

The models are intuitive to create, and the default code is minimal and easy to understand. 

This is one of the only frameworks  that I ever did used without stumbling into a major issue that would take me days to figure out. ",1542173198.0
infostruct,I'm building out a fairly complex/custom admin at the moment with Express/VueJS/Vuetify. It's been a lot of fun to work on.,1542158614.0
maxfromua,"https://apostrophecms.org is node-based.
Never made a site on it, but played and it looks nice.",1542183869.0
grenkeeper,"We use sanity.io for all our projects, it's a great headless cms that lets you define your own schemas.  It comes with a content creation studio and cdn for all your deployments.",1542202136.0
Mymonument,Make your own. It’s not that hard in node. ,1542160446.0
bch8,"There are CMS as a service options that perhaps you could give your client access to, and then consume the CMS API from your app? One option is contentful, there's a number of others of ranging functionality. ",1542165309.0
tswaters,"We use kentico cloud cms.  Content authors use the kentico ui to provide information, scheduling, etc. and we hook into their api to fetch the data.

We have binding to their web services that will take any relevant content and inject it into our site.

This works really well for us using microservices.  Any service can connect to kentico to get content & inject it wherever.

While we do use nodejs for a lot of things, it's not outside the realms of possibility to create different services using different languages, using whatever front-end frameworks that are desired.",1542165526.0
w3r0k,"Directus is my new favorite. Headless, separate API and (Front End) App Docker containers, customizable, self or paid hosting. Setting up table relationships through the App UI is a breeze. I’m currently using it to build a React / NextJS based knowledge management system at work. It’s to serve as organized, curated and filtered content from a few Confluence workspaces which we affectionately call “The Wild West” at work. I got to hollah at Umbraco as well. Using its integration with ASP.Net WebApi, I was able to create a headless CMS with that too.",1542170973.0
w3r0k,"Started with 6.4 and moved recently to 7. We’re self-hosting and it’s serving us well for quick and easy deployment, data modeling, authoring and serving of content.",1542173566.0
nucleocide,"Self plug: If you've already got a working website built then you might appreciate this project. It plugs in pretty easily into existing systems:

https://www.npmjs.com/package/grille

The problem you might have is that it's intended for use as a CMS for tabular data and is backed by Google Sheets. If you're looking for a WYSIWYG editor then this tool won't help.",1542175711.0
takuhi,"Depending on the client, I used to build one bespoke or use an open source CMS I made. I’ve since moved to [Prismic](http://prismic.io) for everything and it’s made things a lot easier. All my clients love it and it makes my life a lot easier. The pricing is pretty reasonable. It’s free for one seat, and then goes up in increments for more people.

Shameless plug: If anyone’s using nuxt, I created a package that makes it easy to hook in Prismic: [prismic-nuxt](https://www.npmjs.com/package/prismic-nuxt) ",1542182974.0
fridgefreezer,"Been playing with vapid, if you only need a small site that a user can update, it’s pretty easy to put something together.",1542184020.0
NoConversation8,"I have seen very few or outdated CMS' in node, but if your client wants to edit their content then look at [GrapesJS](https://grapesjs.com). Its a website builder framework that you might be able to use with your app. Haven't used it but it looks promising and I'm going to use it in a similar project. Looks highly customisable.",1542184362.0
nt2subtle,Silverstripe or Craft CMS ,1542192795.0
thelectrician,"Good question, yet you may also write your own CMS for long-time use (i.e. to sell it to other customers as well)",1542194664.0
shriek,You might want to give [KeystoneJS](https://keystonejs.com/) a try. I haven't played with it enough but last I checked it didn't have as many features as Wordpress. Anyone with more experience on it can chime in on the details.,1542209302.0
iEatDringSleepCode,"AppDrag.  Primarily because of the serverless [integrated cloud backend](https://cloudbackend.appdrag.com/).  I could develop in Node.js and MySql, and it's already merged with the front end.  What's also cool, is that if I have the frontend from another developer who has it all on HTML/CSS/JS, I upload them all straight to the root folder and I'm done.  For hosting, it's on AWS, so I can't ask for better.",1542220089.0
chmod777,a shitty CRUD i rolled. or wordpress for serious stuff. or umbraco for really serious stuff.,1542156353.0
stanleycup11,I often build my own :/,1542166638.0
ElectricLabrador,"Note: I don’t know anything about the MSSQL JavaScript library. However, as a general debugging tip, trying logging recordset with toString() (or similar) to learn more about what this variable is.

I believe this will help you understand what you are looking for to return via res.send()",1542131933.0
Finrojo,"Udemy has some good courses, nice and cheap too as there are always deals available",1542149370.0
totalbytes,"PS:
https://github.com/dwyl/learn-node-js-by-example
https://medium.freecodecamp.org/the-complete-javascript-handbook-f26b2c71719c

Good luck again!",1542144599.0
Lolyman13,"I just started learning Node.Js this semester. You need to know that the best practice is when you separate the logic from the view. By this, I mean that you’ll have to have two distinct “codebase”, one being all related to the user interaction and the other one being related to all the data processing required to make a working app. In my class, we’re using Angular for our front end which requires you to learn Typescript on top of JavaScript. We’re also coding in Typescript on the back end to keep it consistent. There’s a pretty useful tutorial on the Angular website to get you started when you have no knowledge in the subject. I’d start learning about the structure of a typical Node.Js project before starting to trying to make up a note taking app.",1542147826.0
Dypa4ek,Consider \[nodeschool\]([https://nodeschool.io/](https://nodeschool.io/)),1542158239.0
shamin616,I learned node using this tutorial. https://learnnode.com You can check it out.,1542165469.0
totalbytes,"Hey there! The best resources i could get were first: the traction of building a new project with nodejs. Even if I was coming from C++ the async way of JS was a little bit hard. So try to tackle that at the beggining. Also see how V8 engine is working, not just JS. Is good to know how the machine works to not block the single threaded app. Today you can go with ES6 and learn await async directly. Overall a good combination of V8 engine docs, async way, promises and practice is the best. I used stackoverflow and my own way. Medium articles or freecodecamp are also good sources. GOOD LUCK!",1542143557.0
josewhitetower,"This playlist has exactly what you need

Full Stack Web App in Vue.js & Express.js:
 https://www.youtube.com/playlist?list=PLWKjhJtqVAbnadueQ-C5keMQQiQau_i0D


it just uses Vue in the front end, but as someone answered before, it separates the application in two servers and connect them with Ajax using axios I think.
Most of the node tutorials you find online already define a template.

On this example:

Full Stack Vue.js, Express & MongoDB: https://www.youtube.com/playlist?list=PLillGF-RfqbYSx-Ab1xWVanGKtowTsnNm

 You can see how a SPA is created and the the code ready for production is integrated in a node app. 

It uses Vue but the process with React is the same. That's what I always do on my hobbies full stack JS projects.",1542130464.0
iEatDringSleepCode,"The easiest way for you to do that would be serverless! 

Try the AppDrag [Cloud Backend](https://cloudbackend.appdrag.com/).  There's a few tutorials on how to do it.  You write your Node API with all the NPM packages you want, and call the API on the frontend using the API URL.  As simple as that.  Hosting is AWS, so that's cream of the crop...

The tutorials can be found on [https://academy.appdrag.com/](https://academy.appdrag.com/)",1542141199.0
totalbytes,"Nice one! We always had to migrate from PHP to node js some new services.
I remember the time when i moved from sync (Python/php/java) to async way (nodejs). Damn it was hard. 
I suggest you get some basic github examples like: 
https://github.com/dwyl/learn-node-js-by-example


Then frontend has to do just simple http requests. Not php injected in html.
Or you can do the http requests from php but it makes no sense.
Start from scratch and give yourself the time to learn.",1542144509.0
NuclearSpaceHeater,"Use an API. Express and Koa are popular choices,  but it really depends on your use case. ",1542129458.0
SonOfStorms,"Just to warn you this will be quite challenging to do, also logging in results in a httponly cookie so you will need to check in the dev tools if it worked.",1542125075.0
freddjah,I would debug the flow and see what state your app has. For an example: what does your SQL query return when you provide the correct password? Do you have any data on the request.body? Try to pinpoint where things goes south and fix the problem from there.,1542159279.0
Kyelewis,"I would put a console log line in right before your sql request, to check that passport is obtaining and passing on the username properly- if that is ok, then maybe work out which path the code is taking to get to the false return.",1542163597.0
,[deleted],1542123579.0
karatechops,"Technically everything is working well on Mojave but Apple did something with the font antialiasing that just sucks. I had to manually disable it in terminal -

    defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO

While this does work for apps such as VS Code there's noticeably heavier text throughout the OS UI when the font smoothing is disabled.",1542123241.0
ohadron,It should be fine for most people. High Sierra was a mess but the reports on Mojave are generally positive. ,1542120892.0
wlfnmn,"I tested on old macbook pro, was fine. Then updated my main machine and been fine so far.",1542124476.0
twlatl,"I’ve been using Mojave since the third beta, and I’ve had no issues with Node development. Of course, I was coming from High Sierra, so it was a small jump. If you are on High Sierra, you should have no issues. If you are on an earlier version, your mileage may vary.",1542131075.0
vexii,how is this related to node?,1542125548.0
cappie013,"Use docker, and you'll never be terrified again",1542122838.0
kyle787,I’ve been using it and haven’t had any problems. Is there a specific pain point? ,1542173166.0
bassochette,Same here... not updating for that exact same reason...,1542125684.0
stevenselcuk,"I guess waiting for ending all of these -it stuck on loading screen after upgrading to mohave- -my mac doesn't work- -my mac is burning now- -it's trying to fuck me- etc. is still the best option. for a year. But there is always poor-mans-Mojave. Good wallpaper selection, flux, badass atom UI/syntax theme and nearly purrfekt fixed width/monospace font (that's the key), Chrome theme and plugin that makes every page dark etc. etc. etc. Yeah. It's not the dark theme but You know what? It's so far so good. Makes my eyes happy.",1542122996.0
Shaper_pmp,"The first *invokes* a function and assigns the return value to module.exports.

The second *defines* a function that invokes another function, and assigns that new function to module.exports.

Let's say that `somefunction` returns a string - the first one will set module.exports to that string, while the second sets module.exports to a function that returns that string when it's called.

Also, as the second one uses a fat-arrow syntax to define the function it also automatically binds the current value of `this` inside the function to whatever it was when the function was defined... but as `this` is never used inside the function that's defined this is probably an unintended/irrelevant side-effect.

Frankly the second one seems like a waste of code compared to a simple `module.exports = somefunction`.",1542120623.0
StoneCypher,"It's the same as this.

    const result = somefunction(); 
    module.export = result;

versus

    const result = () => somefunction();
    module.export = result;

In the first case, you're exporting whatever the result of the function is the first time it's called.

In the second case, you're exporting a lambda that calls the function each time it's called.

So, consider the following:

    let counter = 0;
    function somefunction() { return ++counter; }

In the first case, the module will always export `1`, because the integer `1` is the result of the first time the function was called

In the second case, the module will export a function, and when it's called, it'll call `somefunction,` receiving a higher number each time.",1542130121.0
Peechiz,"The second example is a function that returns a function, so you could pass some kind of configuration param to somefunction() when you’re requiring it.

1: gives you the function and nothing else
2: is more flexible

Edit: My bad, I didn’t realize he meant to return the invoked inner function. That said, what I said about params is still valid. ",1542120057.0
virtulis,"I'll start a new thread for no reason.

First of all, as someone already mentioned, it would help to have more detail on what ""doesn't work"", preferably with error messages.

You don't mention where ""config"" comes from. Is it an object literal or do you get it from somewhere else?

One source of really weird bugs is recursive requires. Also known as ""circular dependencies"", but most module systems (including ES modules) resolve this. `require()` doesn't and you end up getting an empty object from it sometimes. Not sure that's the situation here but might explain some things.

Edit: barely on topic but here's an interesting example of something similar to what I describe above, in plain *old* JS:

This is valid, working JS code:

    function a() {
        b();
    }

    a();

    function b() {
        console.log('Magic');
    }

But this will crash (at runtime, too!):

    var a = function () {
        b();
    }

    a();

    var b = function () {
        console.log('Magic');
    }

`module.exports` is to ES `import/export` what `var` is to `function`",1542151744.0
ElectricLabrador,"Node-schedule should work for you.

https://www.npmjs.com/package/node-schedule",1542121140.0
cerbernar,You can run cron job every minute and check current time with planned job time. I prefer node-cron,1542137217.0
glorypron,"Try an azure web job https://docs.microsoft.com/en-us/azure/app-service/web-sites-create-web-jobs
",1542129775.0
kranker,"As written you will create a new pool whenever you make a `new` Database, so once for each controller.  This is probably not what you want.

You can create a single pool at the top level of dbpool.js.  You also don't have to export the class from dbpool.js, you can export an instance of the class instead.  At the end of dbpool you could have `module.export = new Database()` (there are multiple ways to skin that cat)

Stylistically, methods and functions in js usually start with lower case (so `getEmailData`) and classes (or constructors) with upper case (so `const SQL = require('./dbpool.js')` although that would change if you export an instance instead as above. ",1542117585.0
jhartikainen,"Point 5 is extremely dubious. There is literally no benefit from omitting the var and using commas instead. It just makes it harder to change the variable declarations in the future because you have to be careful about the placement of commas and all of that.

Other than that, seems alright.",1542092549.0
Quadraxas,eslint can warn/force you about all these points.,1542110379.0
variables,Try no username or password for the database,1542094514.0
runvnc,"It obviously depends on the resources of the server and what your application is doing.

Most of the time after people ask this they launch and they get like 50 people max and then their massive scaling efforts turn into a total waste of time.

Having said that, for most applications there is a natural way to partition them.  For example, each server handles X chat rooms or Y total people.  One server and port per VPS (you could also use Docker containers). The browser client knows which server it is assigned to.  There is some kind of distributor server that tracks how full the servers are.

Then I would just have one VPS per server.  No need to worry about lots of ports etc. and to scale you just rent more VPSs.",1542084097.0
fff1891,"Start simple and measure what your simple solution can do. As runvnc points out, it really depends a lot on what these servers are going to be doing. Build solutions tailored to the problems you actually have. Building out a complex system that anticipates scale problems before you have them can lead to implementations with unnecessary overhead that actually work against your goals. 

You might be interested in this article: https://blog.jayway.com/2015/04/13/600k-concurrent-websocket-connections-on-aws-using-node-js/

It's likely that active connections dominate your resources more than how many ports you listen on. Building a server to handle lots of connections requires a bit of tweaking to the linux host.

This article is good too, for the database side: https://medium.com/@Pinterest_Engineering/sharding-pinterest-how-we-scaled-our-mysql-fleet-3f341e96ca6f",1542086015.0
mod-victim,I too would like to know the answer to this.,1542083342.0
tzeentchy,"A lot of people will tell you you can run x connections on a small server etc. While that is technically true, it would be with a server and an app doing close to nothing and for a real application you'll see closer to a few thousands before you actually want to scale out.

Scaling can mean a few things, but in a cloud sense it can be easy to achieve. Put your server in a container (docker) and start a new instance on a different port. Put a proxy (eg. Nginx) in front of them and redirect requests stickily to one of your servers. You can use a strategy like round robin or a proper sharding strategy based on headers. Once that works for 2 servers running concurrently, it'll work for n servers! It is worth taking the time to get this right. 

The beauty of containers is that you're not constrained to one server but can scale out across multiple see servers and use tools like kubernetes to help you out if you really need to scale fast.

Good luck! ",1542095188.0
goriunovd,"You can check some alternatives to Socket.io for example ClusterWS and socketCluster, both of them by default scalabe",1542102222.0
totalbytes,"Hey There!

Use this little guy:

[https://github.com/socketio/socket.io-redis](https://github.com/socketio/socket.io-redis)

It will help you have multiple servers, not only on one machine.

Look at this small POC:

[https://github.com/h4t0n/socket.io-redis-appsample](https://github.com/h4t0n/socket.io-redis-appsample)

And you can even have more on the same machine if you want to use PM2, although PM2 sometimes plays some tricks with [socket.io](https://socket.io) sessions.

You will have to setup session stickiness if you use any kind of Load Balancer before your servers.

For Mqtt you will need a cluster but that is other discussion.

&#x200B;",1542145258.0
jermsv1,not sure if this would help but could you have your apps publish to some notification server that has a queue (like redis) of items to broadcast?  the notification server would only have the job of emitting messages.,1542085987.0
gieter,"This guy got 600000 concurrent open connections on 1 server. It of course depends on the application load, node configuration and server size. https://blog.jayway.com/2015/04/13/600k-concurrent-websocket-connections-on-aws-using-node-js/

You can run multiple nodes on 1 server. But those will always compete for physical resources. ",1542093380.0
Vardiak,"If you need your sockets to communicate in real time with each other across your service you will need to use socket.io-redis which is very usefull with rooms (one room per user, chat room...). I'm personnaly using Kubernetes & Traefik to allow users to connect to the same server (it's a multiplayer game which requires the state to be stored in memory).",1542113308.0
jwalton78,"Fronting socket.io with Nginx or HAProxy is probably a bad idea; if you need both HTTP and socket.io, you're probably better off having some web servers at say www.myapp.com and a single socket.io server at socket.app.com.  The reason for this has to do with port allocation.

If you have a socket.io server listening on port 443, then when one person connects to it, they connect to port 443.  When two people connect to it, they both connect to port 443.  When a thousand people connect to it, they all connect to port 443.  You're only using a single network port to handle all of this traffic.

If you front socket.io with Nginx, and you have, say, Nginx listening on port 443 and socket.io on port 80, then when one user connects, they connect to port 443, then Nginx uses an ephemeral port to connect from Nginx to port 80.  When as second user connects, Nginx will use a second ephemeral port.  If a thousand users connect, Nginx will be using a thousand ephemeral ports.

The problem here is, you're quickly going to run out of ephemeral ports.  There's only 65536 ports on an IP address, 1024 of which are taken up for reserved services, and typically Linux is configured to not use the entirety of the rest of the range for ephemeral ports, so you're only going to get about 30K or so users before you hit port exhaustion.

This is less of a problem for regular HTTP traffic, because regular HTTP connections tend to be short lived; you can handle way more than 30K users even with only 30K ports.  But socket.io connections go up and then they don't come down.

If you *really* want to load balance your socket.io connections, I'd recommend disabling the polling transport and stick to just the websocket transport, as then each connection goes to a server and is pinned there forever; you don't have to worry about long polling going to one server and then accidentally going to another server, or worrying about session affinity or any of that.
",1542116907.0
VolkovSullivan,Check out this article: https://medium.com/containers-on-aws/scaling-a-realtime-chat-app-on-aws-using-socket-io-redis-and-aws-fargate-4ed63fb1b681,1542116999.0
freecodeio,socket.io supports redis and scales beautifully in itself. As long as you have one redis server doing all the work. ,1542117245.0
StoneCypher,"> Right now I am considering using PM2 clusters to host different processes on multiple ports across a server (with Nginx or HAProxy to load balance). 

how many users are you expecting with what kind of load pattern that you think you need this kind of high availability?

why are you working in either node or socket.io if you think load sensitivity is an incoming problem?

why are you asking for load advice without telling us anything about what you're building?  the right answer is completely different for a todo app, a 3d game, chess, an email saas, and a porn site

.

> But some limitations I'm thinking of is how many ports I'm able to consume before it becomes a burden to the server 

this number does not exist.  an ip can serve about 63k ports, and servers often run hundreds of fully used sockets.

a relatively common challenge for a junior ops staff member is the c10m problem - configuring a single server so that it can manage ten million concurrent active sockets

it's for juniors because it isn't very hard

.

> I was also thinking of implementing a redis pub/sub but I'm not sure 

please don't ever do this for any reason

look, here's a cold bucket of water

your app doesn't need this kind of scaling, you shouldn't be engineering for scaling before you see where your load patterns are, and you kind of seem to be confused about your basics, like whether network ports cause load on the server

in 20 years of hundreds of the best developers i know starting things, only one has even one time made a piece of software that actually faced scaling challenges

quit trying to solve problems that won't happen until you have 20 staff being paid to solve it for you

just go make the thing",1542121457.0
panbhatt,"I did the same almost three years back. What worked for me is that replace [SOCKET.io](https://SOCKET.io) with PRIMUS.js (yes that's true, there are problems with SOCKETIO with load-balancing). 

i used HAPROXY -> NODE CLUSTERS (same used by PM2).  So even if one of the node processes is down the client session is not going away & will reconnect with the next nodejs processes. (i.e. not reinitialized). and i think you can hook up PRIMUS with REDIS too (not sure though). 

Give it a try, i hope it will work best for you. ",1542123114.0
scramble45,Drop socket.io and use mqtt.,1542109129.0
minesguy82,You didn't post any code...,1542079260.0
incvents,Can you verify that gmail is sending the Mail?,1542173156.0
incvents,Change the setting and try again ,1542174656.0
incvents,"Yep that’s the wrong Part of the code. 
",1542124988.0
notAnotherJSDev,Take a look `express.static()`. Use it to serve your dist or build directory after you've built your app using parcel ,1542077891.0
PurpleChilies,"> For example, if I do db.query 3 times in a middleware with route /get-user, and 10 users goes to that route at the same time, that means that in that split second, there would be 30 active clients in that 10s timeout?

If you're using the connection pool, then there would be at most n clients where n is the size of the pool. Without it, the max number of clients is possibly dependent on your postgres server but will depend on how you've implemented the querying itself. Each `query` call should typically be performed on the same connected client rather than getting a new client every time.


> If I have to do db.query 3 times (all SELECT queries) in a middleware, is it better to use a transaction?

It's probably best to use a join here. A transaction is almost certainly not necessary.",1542072432.0
iamallamaa,"As has been said, transactions for select statements are just going to be overhead. Transactions aren't used for select statements, they should be used when you have several insert/update queries that need to be grouped together. Where if any query failed during the transaction, you can rollback any previous changes and undo them. This all-or-nothing ability (all queries work or nothing is changed) should be the primary reason for using a transaction.

Most common example is a bank. If I want to send you $100, the system needs to deduct $100 from my account and add $100 to your account. It wouldn't be good if it did only one or the other and money went missing from my account but you weren't credited. Along those same lines, if it added the money to your account first but didn't deduct from mine because I didn't have $100. Rolling back the transaction would automatically undo the deposit to your account.",1542090268.0
BehindTheMath,next() goes to the next middleware defined on this route. In your example there aren't any other handlers on the same route. ,1542068818.0
German_Not_German,I've always thought about it as using the chain of command pattern. ,1542336391.0
sshaw_,https://expressjs.com/en/guide/using-middleware.html,1542070205.0
ENx5vP,Is there any advantage over Ramda?,1542050216.0
qqqyqnz,"Sounds ignorant on the part of the recruiter, but one of the advantages of node is that someone trained up on the frontend can easily contribute to the backend as well. A shop using node is far more likely to have ""full-stack"" developers and blur the lines between frontend and backend versus a shop that uses e.g. C# on the backend.",1542036679.0
key_value_map,Why some recruiters think that Java and JavaScript are the same?,1542037791.0
ohcibi,"I stopped reading at the word „recruiter“, which is your answer.",1542048902.0
MrBenJ55,"The lines are definitely blurred, since so much front end is done in JS and Node is also used in automation, test runners, compilers, bundlers, etc. It's common for a front end guy to have to set up Webpack on a newer project, and Webpack uses Node under the hood. 

Of course, Node is used server side for databases and servers too. In all honesty, it's extremely versatile, and this versatility makes the lines very much blurred. Javascript moves fast. 

It sounds pretty ignorant of the recruiter to assume it's only front end. I wouldn't dwell it on that much. Those recruiters that look at tools, languages, and frameworks like merit badges or bullet points are probably not worth your time.

Good luck with finding work! ",1542037205.0
YuleTideCamel,"While Node is technically a backend/server side tool, in many companies it's lumped into the front end category because it powers the web sites and apis . What they consider ""backend"" would be internal services and systems that process transactions via services (these are often not written in node.)

To give you an example I worked at a place where the architecture was:

* Front end : Websites and APIs built with NodeJS + Angular on the client side.
* Back end: Restful apis and services written in a combination of Java and Python

The Backend did most of the heavy lifting and had all kinds of offline processing. From a company wide architecture the split made sense since some teams worked on processing / internal, others works on customer facing (ie front end). 

But as one of the architects I made it a point to remind everyone that from a ** technical ** point of view, even the ""front end"" had a server side component via node.
",1542037624.0
Interloper949,"Most recruiters have a lack of understanding of what the technology actually does and instead have a rough idea of the tech stack / focus of the team or role they are hiring for.  


If the recruiter said Node was front end tech, they don't really understand the tech stack and the purpose of each piece of it. As an ex-tech recruiter, if I heard you worked on Node I would assume you were either a back end or full stack engineer.",1542036934.0
rea557,"Because a lot recruiters have no idea what they are talking about. When I was looking I had to explain to one guy that I did JavaScript on the front and back end. But as soon as he heard JavaScript  he say ""oh so front-end"". I got into a few interviews and the people were surprised I could do front and back-end because the recruiter didn't tell them.",1542038272.0
feature_creep,"I work in an all-nodejs shop, where some of the nodejs code is considered ""front-end"" because that part of the code are services that the browsers call to get data. For some reason the other devs here consider that code ""front end"" because the browsers interact with it.

The ""back end"" is also in nodejs but it sits further back - the nodejs services that the browsers hit, talk to other nodejs scripts that do the database queries and those are considered ""back-end"".

It confused me at first, still does actually. I think it varies from place to place what they consider ""back end"" nodejs. Personally I think we have too many levels of abstraction, but that's how it was before I got here.

Some shops only use nodejs for front-end build tools like with babel, webpack, gulp, etc - they are only using nodejs to build the front-end code.

For me, nodejs is always ""back end"", and anything that runs inside the browser is ""front end"". Period, full-stop.
",1542044717.0
greim,"> Why do some people associate Node.js with front-end development?

1. Since it's JavaScript, it's being used by a higher percentage of frontenders, which has swayed culture and perception.
2. It's in widespread use for frontend tooling, like linting, bundling, transpiling, etc.
3. Existing backend tech experts for a variety of reasons react negatively to Node, so it's had an uphill battle gaining mindshare among this crowd.

Breaking down #3 a bit more:

* JavaScript has an easy initial learning curve, so the newcomer:expert ratio tends to be higher than for other language platforms. This influences perception as being a beginner or ""toy"" technology.
* Node's vertical scaling strategy is different from classic backend strategies, which threatens entrenched mentalities and presents them with an unfriendly learning curve.
* Dynamically-typed languages have an inherent disadvantage for large, mission-critical codebases.
* JavaScript is often written off as being ""slow"" without much reflection or analysis.",1542046207.0
anubgek,"I think this was a mistake on the part of the recruiter but the interesting thing here is that Node is often used in more frontend facing services, like the case you mentioned.

So, me personally, I would consider front end to be anything from the server that serves the client side directly. These types of services will often need to combine data from various sources, handle authentication, and process user requests. 

Long story short though I think you can work your way info back end by talking to the right people.",1542037815.0
ROOTUS3R,"Because Node gives us packages like Gulp that automate our workflow.

 I mean, JavaScript is associated entirely with Front-End, the use of Node for Front-End purposes shouldn't surprise individuals in the development community.",1542045344.0
r33beers,"I've been hiring backend javascript engineers (read: nodejs) for a couple of years now, and candidates tell our recruiter they have years of experience with nodejs. I talk with them, and more times than not, what they really have experience with is npm install. It's very frustrating. Even though javascript can be used to make apis, CLI tools, etc., it does not mean if you write javascript you have nodejs experience.",1542061606.0
MaxHedrome,"Many front end devs familiar with the JavaScript tool chain have to tell recruiters they know NodeJS, because the recruiters, over-archingly, don’t understand the difference. Why chance getting passed for a job you’re qualified for, over semantics. ",1542041635.0
thatsrealneato,Sounds like the recruiter was misinformed. It’s likely confusion around the fact that node is JavaScript and JavaScript is almost always frontend (node being the exception),1542070767.0
tresslessone,Because JavaScript ,1542076299.0
Actually_Ted_Cruz,Because javascript. But also lots of recruiters don't know shit.,1542079525.0
MrOCDx3,"See the wiki: https://en.wikipedia.org/wiki/Node.js

Node was developed to run js 'outside of a browser'. It can be used as a 'back-end' in web dev but does not have to be. It is not a front-end (browser) environment. Not sure what the recruiter was thinking.
",1542036908.0
gli7ched,"Recruiters are HR folks who read job descriptions and there are mistakes made between Java and javascript all the time. That and most recruiters don't understand the differences. Heck, as an industry we are still trying to figure out the differences between web dev's and web designers let alone front and back end lol",1542041776.0
wahh,"There are a lot of crappy recruiters out there who will throw every open position that comes their way at you regardless of whether or not you know the tech stack because they know you are a ""programmer."" If you say you know javascript they will hear ""java"" think that means you know java, etc. I'm sure this recruiter fits in among those ignorant people.

With that said, Node IS used on the front end when it comes to build tools like Grunt and Gulp. I doubt the recruiter was thinking this though.",1542044409.0
irspaul,"In my workplace most of the senior architects from java background argues that Node.js is single threaded, not designed for CPU intensive operations, but works really well as front end server. This gives a bad impresson about Node.js among top management and recruiters with less knowledge or fairly no experience believe Node.js is a front end engine development tool.",1542046183.0
ahrismith10,"The most common thing that I see is job announcements for Nodejs developers, but in reality they are looking for a React developer. I mean sure, you use Nodejs while developing with React, but it's still was annoying to see such misleading headlines.

I guess they want you to understand how npm modules work or something ",1542054421.0
zayelion,"It is pigeon holding. Node basically allowed front end developers and our mentality to escape and do w.e. we wish on the back end. So recruiters haven't adapted to what that really means yet. Front end devs going to the back definitely have a different mentality than vice versa.

Recruiters also see `js` and think ""another framework, or that anything `js` is Front end. Its mostly ignorance but its gonna be around for a while.
",1542047691.0
joequin,"While nodejs was all the rage a few years ago, I'm seeing less and less of it used for anything other than providing a simple crud-like API that consumes complex services written in some other language to be consumed by the front end.

The other place I still see it used in new projects is where you have a web site with limited read operations and it really just serves up front end JavaScript behind a cdn  and wraps a database. It may also be a cms.

Those are very light service development tasks where the bulk of the application is in the front end. Developers who's service experience is limited to those tasks are usually much better front end developers than back end developers because they have so little experience with the more complicated back end problems.

My anecdotal source: was a consulting software engineer for 5 years and saw the tail end of the nodejs craze and saw it stop being used for complicated service side tasks once the craze died down.

That said, it's pretty ignorant to assume that a developer doesn't have much service side experience just because they've only used nodejs. Some companies did and still do use nodejs for complicated service side development. ",1542054476.0
Constant_Selection,recruiters are morons,1542045209.0
Aesthetickz,Javascript.,1542057197.0
RoryH,One word: JavaScript.,1542037648.0
,[deleted],1542036221.0
notAnotherJSDev,"Yup, you can. If you're using Express, look into the [express.static()](https://expressjs.com/en/starter/static-files.html) middleware. 

The general flow will be:

1. Before server start, build the SPA and have it saved to something like /dist or /build
2. In your server, use `express.state()` to server that built folder
3. For all other routes, preface them with '/api`, or something like that

This should allow you to serve your app from the `/` route, and your API from the `/api` route. ",1542034375.0
qashto,Use express.static in your node.js app or just use spaces for file sharing (if that fits your case).  On digital ocean you can use scp to copy your nodejs app directly to the machine.  Very easy workflow once you get it setup.  I'm a long time node.js Dev and I'm fluent with the language but it was my first time setting up a droplet of digital ocean this week.,1542036744.0
rangeDSP,"After you build the SPA, there should be a `dist` folder with the outputted html/css/js, you need to:

1. Put the `dist` folder in your app directory
2. Add `app.use(express.static('dist'))` 
3. Done! Now when you navigate to yourwebsite.com/ it'll serve index.html by default",1542038096.0
kranker,"Sure!  It's not actually clear what you're asking, as the answer is to just do it.  What step are you stuck on? ",1542034338.0
TheHeretic,"> Requires you to provide API credentials  
>  
>""hack""

&#x200B;",1542025239.0
pingueame,Any server? Wooohooo!!! Watch out all banks ... ,1542033521.0
HasFiveVowels,"I'd suggest using mongo, mongoose, and koa for the server. I agree with the front-end recommendations of /u/ejaculat0r - react would be preferable but might contribute unnecessarily to the learning curve for now (same goes for using PostgreSQL for the DB and maybe a GraphQL/Apollo API). I'd suggest using axios for client-side queries. Your assignment is literally my job so feel free to PM me if you have any questions.

edit: Might want to consider using [this](https://github.com/oPauloChaves/koa-mongo-api-starter) as a reference. Though realize it has some bells and whistles that you probably don't need.",1542026597.0
HasFiveVowels,As a follow-up: You're probably going to want to start with your DB data models. Figure out how you're going to store the data first. Pay special attention to how you'll represent categories. Consider the fact that a product might be in two or more categories.,1542061522.0
j3y3,A helper utility I made for API filtering and aggregations.,1542004814.0
igotitforfree,"Check the value of ""user"" in the callback function.",1542000086.0
AsynchronousMethods,"In terms of requests, you should look into [express](https://expressjs.com)  and the express Router, almost the default options for Node.js. This way, you can separate your routing and even middlewares from your app logic. 

[Heroku](https://www.heroku.com/)  has a free plan for basic deployment. Google’s [Firebase](https://firebase.google.com/) also has very good free functions. You can look into similar websites like [AWS](https://aws.amazon.com) or [Digital Ocean](https://www.digitalocean.com) . However, it’s not bad idea to have your own server at some point for all sorts of things you want to try out, and it won’t cost that much when you’re starting out. ",1542003330.0
the_amazing_spork,"Personally, I'd like to see your functions return promises.  Then you could have a promise chain in your index.js file that shows the overall flow of the code.  It would make your code more readable, and more ""Nodey?"".  You just generally see promises being used in most Node projects. ",1542032811.0
broofa,">If I were to deploy this, is there a recommended free service?

Heroku is probably a good starting point.

>Is there a better way to implement my post history logic? I basically store the data of the last 10 posts in an array, and then check for repeats by comparing post IDs. Is an array the right thing to use here?

It looks like you're using postHistory for two purposes: holding the history of posts you've seen, and holding the most recent post (that you want to tweet).  I'd consider separating those two concerns.

Have postHistory just be a collection of the IDs of the posts you've seen.You can use the [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) class for this.  I wouldn't even worry about clearing it out.  The memory used by the set will be unbounded in theory, but in practice, your process will probably restart for some other reason before the memory consumed by that set gets to be an issue.

The downside of that approach is that you lose `postHistory` when the process dies, so you end up posting duplicates when you restart your app.  This is beyond the initial scope of what you're doing, but for the ""production"" version of this app, you could cache the IDs in a Redis instance.  Because Redis runs as a separate process (or server), your history will survive app restarts.  You can also let Redis manage the expiration of history by just providing an EXpiration value when you set the keys.  Again, out of scope for what you're doing, but something that'd be good to explore if/when you want to level up your server skills. :-)

>My method for handing requests is to have all of the functions feed into each other... there has to be a more efficient way, right?

Promises are your friend when it comes to avoiding callback hell. Wrap your calls to the Reddit and Twitter APIs in promises.  It'll be a good exercise to learn how they work.  Once you're comfortable with that, you can clean up the code by converting the containing code to [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) functions and `await`ing those promises.

`randomNumber` probably doesn't need to be its own function.  If you have a one line function that's only called in one place, just inline the code. Ditto for `updatePostHistory` and `outputIds`.

Edit: Consider adding some comments to your code when asking for public reviews (and because it's just a good habit to get into.)  Keep commentary terse and informative.  Yes, code is supposed to be self-explanatory, but 100 lines of code with zero comments is a bit of a code smell. ",1542036692.0
iEatDringSleepCode,"I have a small suggestion, although it does require using a CMS platform. You could use the [cloud backend](https://cloudbackend.appdrag.com/) on AppDrag.  It's entirely free.  Just upload your front end files directly to the root folder of a blank project, then open the cloud backend, fill up your table and write you Node.js APIs right then and there.  No need even to worry about the server configurations, as it's all serverless.",1542036726.0
SpaceboyRoss,"I remember when I started using Node.JS a few years ago, I was doing complex things because of my ability to adapt to new software and programming languages.",1541995366.0
disasymbol,where are the tests?,1542036454.0
kyle787,"Check out class transformer. It sounds like it would help

https://github.com/typestack/class-transformer

",1541973281.0
sshaw_,"> You can find some examples by just searching ""error = await"" on GitHub.

You need to remove the `.` in `type=Code.` in your linked search query. 

> On one side I quite like it, because as happens in Go, it forces you to handle every single error individually

Go code will not run unless the 2nd (error) return value is assigned to and that assigned variable is used somehow. Not the case with JavaScript. 

>  On the other hand, this pattern it still feels a bit forced into JavaScript...

It's silly to use ""Go style error handling"" in a language that:

1. Does not have built-in support for it
1. Supports the `try`/`catch` exception model
1. Or, if using async code, has well-known, standardized methods `Promise.prototype.catch`, and resolve/reject callbacks. 

I would hate to use an API that calls `resolve()` when it should `reject()`. 

Note that I'm _not saying_ Go style error handling is inferior to exceptions :)



",1541971422.0
pull_my_finger_AGAIN,Lua is only a little older than JS and they're still trying to catch up on Lua's features,1542010385.0
fattone80,Very good article. Thanks for sharing.,1542053028.0
wrex_16,"1. Click debug tab.
2. Run debugger.

Did this really require an article?",1541979080.0
shawncplus,No mention of ndb? https://github.com/GoogleChromeLabs/ndb,1541963060.0
forsubbingonly,"Ill take anything I can get because console logging a server to debug it is madness but it’s still pretty annoying to see breakpoints I place completely disappear or jump to a different line, if anyone knows how to deal with that I’m dying to know.",1541959409.0
Str4yfromthep4th,Vscode doesn't need another debug tutorial. You literally start it and it works with no config. This is just a spam post.,1541959588.0
FearAndLawyering,Webstorm is easier ;),1541973722.0
theogravity,"This looks like a spam post to me - the title is in conflict with each other.

&#x200B;

""Set the session using a package"" and ""Can I set the session without using \[a\] package?""

&#x200B;

Then the post goes to a questionable-ish site and shows how to use the node-session package, and doesn't address the other question, which is setting a session without a package.",1542062247.0
Silveress_Golden,Does the site run fine outside of azure? ,1541937728.0
ssjarchon,"As a test I replaced all responses with the text string ""test""

I get this in the body of responses:

4
test
0

Thoughts?",1541961550.0
ssjarchon,"I saved off everything, and completely redid the deployment with a hello world; the problem is still happening, so at this point I think I'm going to call the web app a loss and build a totally new one, unfortunately.",1541988358.0
zarath180,I think it's better/easier to use CSV files. The users can open them in Excel and they're much easier to work with...so yea. I'm no expert though,1541921477.0
Anafartalar,"My recommendation is ExcelJS, which has intuitive API and good documentation.",1541931744.0
soundmanD,"I've personally used xslx.

One thing I've noticed is that it isn't all that optimised in terms of its output. Simply reopening the file in excel and saving it again reduces the file size significantly.

If you're not sure about a package, start with the one downloaded the most as it generally means it is more supported and more mature.

If you find it doesn't work for you, then move to the next.",1541922974.0
Nefs,"I’ve literally just done this as a huge project at my company. I went with ExcelJS as its pretty intuitive and has support for streams and a few other bits.

One thing I’ll warn you is that updating  values is synchronous and will block the the thread, so you’ll want to fork it out to a child process and do that stuff away from your core API, or use AWS Lambda functions which is our plan eventually.",1541930204.0
gajus0,"If you are open to commercial products, then hands down libxl (http://www.libxl.com/).

Been using it for 5 years across projects of different scale. Never had an issue.

Unfortunately, in case of Node.js, the are no official bindings. There is a maintained community alternative: https://www.npmjs.com/package/libxl",1541947118.0
dluecke,"This looks like a great project! Funny enough, I faced a similar question for a very similar project ([http://mysamai.com](http://mysamai.com)). My conclusion was to let users do it manually which makes it pretty straightforward. Basically register an object or a function that can be exported from an npm module or a custom file:

```
const weather = require('my-plugin-weather');

mainInstance.register(weather);
```

An alternative would be to use npm programmatically to install and list plugin modules in a folder. I used something like this before:

```
function promisify(context, method, ... args) {
  return new Promise((resolve, reject) => {
    context[method](... args,
      (error, data) => error ? reject(error) : resolve(data)
    );
  });
}

class Loader {
  constructor({ prefix }) {
    this.prefix = prefix;
  }

  npm() {
    return promisify(npm, 'load', {
      prefix: this.prefix,
      loaded: false,
      depth: 0
    });
  }

  install(... modules){
    return this.npm().then(npm => promisify(npm.commands, 'install', modules));
  }

  require(module) {
    return require(path.join(this.prefix, 'node_modules', module));
  }

  remove(... modules) {
    return this.npm().then(npm => promisify(npm.commands, 'uninstall', modules));
  }

  list() {
    return this.npm().then(npm => promisify(npm.commands, 'ls', [], true))
      .then(result => result.dependencies);
  }
}
```

Either way, I would definitely go with npm for dependency management otherwise you'll end up more time writing your own package manager than anything else.",1542130820.0
bel9708,I set out on this journey once. One thing that really helped me was giving up and using create-react-app.,1541907140.0
64_g,"It’s a struggle, most docs are completely out of date. I took a boilerplate right from webpack then spent an entire day googling error codes before it ran.

To learn webpack you need patience, time, google, and beer. But it’s the “standard” over gulp now for some reason",1541907281.0
,"Whatever you do, don't pirate Webpack 4: Beyond the basics

because then you'd be pirating and that's bad.

However, it just so happens that the aforementioned video series (by Udemy I think) is great.",1541914345.0
merb42,"What i did was read the docs and put together a config for what i wanted to do... Not trying to be funny 😕  but good honest advice i feel. 

Webpack seemed like it was a LOT at first but after i decided i wanted to use it i just dived into the docks stsrting with the ""concepts"" section and everything started falling into place.",1541919847.0
davidmdm,You forget webpack and start using parceljs ,1541913212.0
elrond8,"Somehow I’ve felt webpack to be daunting and a tool I spend too much time understanding and configuring. Return value, for me is low. YMMV ",1541915667.0
mark2685,There’s a good Webpack video series on FrontEndMasters.,1541901535.0
JorgeBucaran,Blood and tears.,1541951386.0
bob_lazer,[This](https://nystudio107.com/blog/an-annotated-webpack-4-config-for-frontend-web-development) is a great article about Webpack config.,1541927230.0
kyranadept,"The first thing you need to understand is that webpack is basically a build system - think make. Then you need to understand that make and others like it are declarative, while webpack is mostly imperative.

The advantage of a declarative build system is that you can have an engine on top of it, that optimized perfectly that can infer things on how and what to build. With an imperative system, like webpack, you can't have that, but you can write every single thing the way you see fit. Most likely you will get it wrong and there will be no one to hold your hand and to tell you ""it's going to be ok"".

I'm not going to suggest you try a different tool or to not go in this direction. Just try to think, at every step, ""how would that look as a make rule?"". That should probably keep you on the right track for the most part.",1541934351.0
mxplrq,webpack.js.org,1541950606.0
bigorangemachine,I had to go through the webpack docs to really get it,1541952943.0
lorean_victor,"I personally love the end result of using decorators properly, however it is notable that still ""decorators"" are an anti-pattern, as they add a new layer of complexity to the readability and maintainability of the decorator code itself, i.e. people who are to read and/or maintain/update the code inside a decorator need to be fluent in one additional concept (i.e. decorator design), which in turn would mean the reliability of code pieces using decorators will as well be highly dependent on proper naming and documentation of the decorators themselves, which again, in the long run would always be problematic.",1541930579.0
totalbytes,"How are you consuming the pizza?

From a backend service?",1542219669.0
wkapp977,"327M per 1000 pages? That's 327k per page!

Oh, I get it, node_modules, nevermind.",1541878376.0
pull_my_finger_AGAIN,I'm a big fan on [devdocs.io](https://devdocs.io) for *most* of my regular doc needs. They also have offline viewing.,1541898503.0
fullheap,Why would I use this over the “show all” link saved as HTML from the official docs?,1541890570.0
giggletrader,I prefer [Zeal](https://zealdocs.org/) for offline docs. Has nearly 200 docsets for download.,1541938644.0
randomFIREAcct,That's a pretty standard recommendation for 12 factor apps. [https://12factor.net/logs](https://12factor.net/logs),1541881845.0
daveequalscool,"it's a good practice but your title is total clickbait.

local programmers can't believe this one new weird trick to code better! click to learn moar!",1541959434.0
jameshmr,"Snyk is a good tool, has GitHub integration too! ",1541875811.0
wormhole37,Lookup nsp,1541872874.0
Str4yfromthep4th,We used to use sourceclear. Not sure about the status of that tho.,1541864994.0
ecares,"Hey, you have several alternatives to npm audit.
Snyk basically provides the same service for a fee and I am not sure who has the biggest vuln base.

If I understand, you are more looking for a tool to proactively detect vulnerabilities. Such tool is extremely hard to build in JavaScript due to the language nature and would result in a huge number of false positives.

I work for a company that has built a commercial tool (it's a SaaS product) to protect the applications from the inside, it is named Sqreen (https://sqreen.io) there's a free trial so don't hesitate to give it a shot sometimes and let me know if I can help further here.",1541866669.0
sole-it,Npm audit will do if after you have installed a new dependency given your npm is newer enough,1541859178.0
dreadpiratewombat,7% off for a Pakt Press book? That's a hard pass for me dog.,1541857847.0
yourbadassness,It appears that it's possible to obtain an object's current map address by calling %DebugPrint(obj) (node --allow-natives-syntax). Still looking for a more sophisticated method though.,1541864195.0
Shadaez,"how else would you want to select elements?

learning how selectors work at a basic level should take you less than an hour",1541814229.0
HipHopHuman,"There are two declarative web scrapers you might be interested in:

1. [x-ray](https://www.npmjs.com/package/x-ray)
2. [scrape-it](https://www.npmjs.com/package/scrape-it)",1541841258.0
beepboprobots,I like puppeteer ,1541877309.0
randomFIREAcct,"I have been using Cypress the past few months and have liked it quite a bit. It is easy to use and uses the same assert syntax you're probably used to.

&#x200B;

The main drawbacks for my team have been lack of browser support (only supports chrome and more recently firefox).  Also, the test runner just takes a long time to load. Finally, it takes a long time for our projects to now run npm install because cypress is a pretty large package.",1541859035.0
theogravity,"TestCafe - we used to use Protactor in the past, but TestCafe is now the way to go

[https://devexpress.github.io/testcafe/](https://devexpress.github.io/testcafe/)

&#x200B;

What I like about it is it doesn't use the clunky webdriver protocol / Selenium - it has it's own. From their FAQ:  


""Unlike most testing solutions, TestCafe is not built on Selenium. This allows us to implement features you cannot find in Selenium-based tools (for example, testing on mobile devices, user roles, automatic waiting, etc.).""

&#x200B;",1541807985.0
,[deleted],1541806432.0
josewhitetower,Google puppeteer,1541807486.0
mod-victim,Good stuff.,1541803950.0
dankalen,Honestly it’s super hard to understand what this package does from the readme. I suggest adding a description at the top of the readme,1541812545.0
adrien2p,Any feedback could be nice :),1541842334.0
a_calder,"I think the challenge with static site generators compared to something like WP or Drupal can be found in the comments here. 

WP is a huge community with an enormous base of code for plugins, themes and any number of configuration. 

On the other side, beyond Jekyll and a few others, the community is incredibly fractured. *Try Forestry! Try hexoblog! Try Keystone!*. There are so many different generators, workflows, etc., it’s just impossible that all of them will be around in 2, 4, 10 years. 

The question of support is critical to clients, if you are developing for them. If you build a great platform from a variety of craft-built components that lose support, you are either cutting off your clients or forcing yourself to rebuild the platform from new tools down the road. 

Of course, if you are building the platforms for yourself, it’s a great way to learn about the new and modern tools. 
",1541870386.0
meetMyDroneSwarm,"Wordpress has thousands of themes templates components available for it.. does the nodejs generator give you all that capability?

Also; WP guys.. ballpark how many sites have you built with Wordpress, and would you make the switch ? That’s a general question for everyone in the thread 

I think someone who’s done 20 plus sites w Wordpress has a whole code library to reuse as well as reusable components so making a site would be so fast switching would make no sense.. unless there’s a specific use case that requires it. What are such use cases?

PS. I have used drupal and to a lesser extent wp to make all my sites but now learning some Node js",1541823688.0
wickjest,"Good read, thank you",1541803626.0
sergey_radonezhsky,"Thx for the read. I personally use GH pages + Jekyll + Forestry.io CMS, also used them on a client. I'm happy so far.",1541837560.0
XalAtoh,Should try hexoblog.,1541812166.0
notantisocial,Checkout KeystoneJS,1541820646.0
brocococonut,"Sure!
Both return an object of keys from the route
Say you had the following route in express: `/profile/:username`
And someone accessed went to it, but it looked like this in the end: `/profile/MonsieurLeland?foo=bar&boop=snoot`
If you were to look at `req.params` and `req.query`, you'd see the following:

req.params:
```JSON
{
  ""username"": ""MonsieurLeland""
}
```

req.query:
```JSON
{
  ""foo"": ""bar"",
  ""boop"": ""snoot""
}
```


req.params allows you to make a structured URL with certain sections unknown/request provided in a hardcoded manor
req.query is solely based on user input

For more information on them both, check out the following Express docs:

[req.query](https://expressjs.com/en/api.html#req.query)

[req.params](https://expressjs.com/en/api.html#req.params)


Hope I cleared it up a little, if not, then I at least hope those two links do :)",1541790417.0
chewax,"Request.params = API defined parameters
Eg: /users/:_id

Request.query = url encoded Params
Eg: /users/12345?name=""John""

You would use Params mainly for Ids and other info shall can either in query or body.

Sorry that is the simplest I can put it. ;) Hope it helps

",1541792613.0
Charles_Stover,"Query is what comes after ? in the URL.

Params are a variable part of the pathname.",1541793982.0
Charles_Stover,I assume you are using http createServer to get the request and log to console. Use the second parameter response to send data to the user. Something like response.send(data) to send the data to the user and response.end() to close the connection to the user.,1541793816.0
StoneCypher,"Here, [I wrote you a trivial full stack tutorial including implementing an endpoint](https://stonecypher.github.io/explanations/EasiestNodeEndpoint/).

You'll be done in about ten minutes.",1541797542.0
wahh,"Former 10+ year PHP developer reporting in. You need to use a web server to turn that script into a functioning web page just like you need Apache/nginx to turn a PHP script into a functioning web page.

This is as simple of an example as it gets using the native NodeJS http library: https://www.w3schools.com/nodejs/nodejs_http.asp

If you want to serve more than one endpoint under the same web server the Express library makes it super simple because you just set up routes and it handles knowing which endpoint code to execute. Otherwise, you'll have to get into parsing the request method and URL manually to determine which block of code to execute. There is a reason why you'll see 1,000,000 NodeJS REST API examples that use Express...it's stupid simple and there is a lot of pre-written middleware for it to do all kinds of stuff.",1541782597.0
erulabs,"PHP's output is returned to the user, Node's is not (it's a long-running process, not a script run on-request like a PHP program). The equivilent to ""writing to stdout"" in PHP using Node's HTTP library is `res.send(data)`",1541795470.0
HipHopHuman,"If you run the following with `PORT=8080 node server.js`, then the server will by default listen on port 8080 and respond to the default route ([`http://localhost:8080/`](http://localhost:8080/)). The `request` parameter is also a stream which you can access any errors, any chunks of data the client sent, the request headers, the requested URL, etc. Read more here:[https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/)

server.js:

    const http = require('http');
    
    const PORT = process.env.PORT;
    
    const server = http.createServer((request, response) => {
      // set the response status and any HTTP headers
      response.writeHead(200, {
        'Content-Type': 'text/plain'
      });
    
      // ""send"" data in chunks over the response stream
      response.write('This is a chunk\n');
    
      // ""return"" the response by ""end""ing the stream, optionally with a final chunk
      response.end('This is the last chunk\n');
    });
    
    server.listen(PORT, () => {
      console.log(`HTTP server running on port ${PORT}`);
    });

&#x200B;",1541796999.0
JK33Y,"If you're logging to a file, then you can have the endpoint use fs.readFileSync and send the data back with res.send(data).

If you're just wanting to run your pings then return the data without writing to a file, you can use Promises to run your pings, build your output, then use res.send(data) to send your response.",1541780925.0
wookoouk,"I have to say, hands down nodemon is the most useful part of my development chain. Auto restart after changes is a godsend.",1541792686.0
RushPL,Try node-dev. It's bringing nodemon to the next level. Restarting only on relevant file changes.,1541815760.0
ganymedes01,but how do you pronounce it? no-demon? node-mon?,1541800316.0
dk01,"npx nodemon 

",1541804963.0
I_am_mr-meeseeks,"Here's a piece of code that I wrote some days back I implemented a manual pagination of tweets.

    //   CASE 01 - Filtering
    app.post('/filter',function(req,res){
      let pageNo = parseInt(req.body.paginate.pageNo)
      let size = parseInt(req.body.paginate.size)
      let paginate = {}
      if(pageNo < 0 || pageNo === 0) {
            return res.json({""error"" : true,""message"" : ""invalid page number, should start with 1""})
      }
       
        //Configuring pagination parameters
        if(req.body.paginate){
            paginate.skip = size * (pageNo - 1);
            paginate.limit = size;
        }else{
            //Default values for pagination if no pagination parameters provided
            paginate.skip = 0;
            paginate.limit = 10;
        }
       
        let query = q2m(req.query);
        console.log(query);
     
        Tweet.find(query.criteria, query.options, paginate)
        .then(function(data) {
            console.log('Response sent');
            res.json({""error"" : false, message : data});
        })
        .catch(function(err) {
            console.log('ERROR OCCURED - ' + err);
            res.json({""error"" : false,""message"" : ""SORRY AN ERROR OCCURRED. Please check log files""});
        });
    });",1541775599.0
davidmdm,"Knexjs is a query builder. It works great. It's actually the base query builder that other ORMs like bookshelfjs and objectionjs use under the hood. 

Simple to use. I definitely recommend looking into. ",1541736485.0
unwind_protect,"We use knex, it’s nice.",1541749256.0
snowman4415,"Sequelize is a pretty mature and convenient project. Not sure where all the hate comes from, it’s really solid and is used/supported by people and companies all over ",1541795378.0
nt162,"Why would you need a query builder anyway? If your application only has simple queries like simple selects to retrieve elements or inserts/updates, why do the overkill and use a query builder? If you don't know SQL, you can easily learn it and for those simple queries any short tutorial will do, plus you get a new skill. If you need super heavy stuff like multiple joins or mad optimization of your monstrous queries, you won't want a query builder anyways since none of them actually support all the things you'll want and even if they do, they won't be as optimized as you building the query yourself.

All that said, I use knexjs as well to manage migrations. It's simple and small and does a great job. I do write my migrations with knex functions, but in the rest of my code I just go with raw queries.",1541756686.0
,[deleted],1541777869.0
sumdudeinhisundrware,"Don't use a header,  in production you're probably going to encounter a gateway, WAF or something else in the middle that will see it and consider it an malformed request.  What about using a web socket?",1541734141.0
nfriskus,"You can use a query string parser like qs.  
https://www.npmjs.com/package/qs. Depends on what you mean by ""huge"" though.",1541731925.0
vladimirice,"I had an interesting task about filtering a big table. And it was required to share filtered results link. 

I used base64 encode/decode to create a hash containing a lot of filter parameters. In URL it was a hash instead of long key value parameter pairs. On a backend this hash was decoded and parameters were passed to DB query as usual. 

Thus you can use encoding/decoding functions. 

",1541741711.0
urmomdoesntgotouni,Why?,1541770626.0
the-code-monkey,Axios,1541773923.0
broofa,"The answer depends somewhat on your definition of ""huge"".  Are we talking 10KB?  10MB?... 10 GB?

GET requests are for fetching data, not submitting it, thus servers/clients aren't generally designed for this case.  The argument I've seen for having a very large GET request is if (for whatever reason) you have a complex set of constraints for what you're GETting.  E.g. ElasticSearch allows for queries that provide the query params in the body.  Or I suppose you might have a case for passing a \[suitably escaped\] SQL `where` clause as a param?  But generally you should do everything you can to avoid this situation, as it tends to be error prone because your options for passing data in a GET request are:

* Encode in the URL: Presumably in the query string.  Limits vary on what browsers and/or servers support, ranging [from \~2K to 200K](https://stackoverflow.com/a/812962/109538).
* Encode in one or more headers: Again [size](https://stackoverflow.com/a/686243/109538) [limits](https://stackoverflow.com/a/686243/109538).  Also, [CORS issues](https://stackoverflow.com/a/13997235/109538) if you're using AJAX requests.
* Encode in the body:  Controversial, and may or may not be technically possible.

The last option, encoding in the body, is the only one that I would expect to allow a ""HUGE"" amount of data, but it's unconventional and of questionable value.  The HTTP spec allows any type of request to have a body, but the jury is out on whether it should be semantically meaningful (i.e. you can do it, but it should be ignored).  A GET w/ body may or may not be allowed/supported, depending on the specific context.  E.g. the XHR spec for browsers [explicitly says](https://xhr.spec.whatwg.org/#the-send()-method) the body must be set to null for GET requests, so don't expect browser clients to be able to make such requests.  Server frameworks and [other tools](https://github.com/swagger-api/swagger-ui/issues/2136) may (or [may not](https://github.com/elastic/elasticsearch/issues/16024)) ignore GET bodies.  I think it's possible to make such a request in node, though, using `http.request()`, but haven't tested this.",1541785469.0
theogravity,"Is it possible to set up a proxy which takes in the data as POST, but on the proxy side, submits the request to your target endpoint as a GET? This might potentially also get around GET char limit issues that browsers may have, and you have more flexibility with respect to how you want to format the data for GET.

&#x200B;

Be aware that in most systems, GET request parameters are logged somewhere, and will bog down the logging system when massive amounts of data are involved (eg huge log entries, resulting in log parsing difficulties, or killing the disk space quickly). This also means you should never pass in sensitive information like passwords or personally identifiable information via GET.

&#x200B;

Or convince the system you're doing that GET to allow POST submission.

&#x200B;

It would help to know how large and the type of the payload of this information is, and why the system is limited to GET.",1541800275.0
NoodledLily,Pass a query string (?qs=data) and base64 encode the json otherwise you will have url problems with json characters,1541739583.0
geon,"Why would I want to write 

    <$if test={$.lang === 'en'}><foo /></$if>

Instead of just

    {$.lang === 'en' ? <foo/> : null}

?",1541782998.0
virtulis,How often have you changed the http server several months into the project?,1541700715.0
mistralol,"Yup. Then I have seen people build wrappers aimed at decoupling. Which they also don't work with the new api and need to be changed as well!

But really if your changing your base libs every few months. You probably choosing them wrong in the first place. May by have a look at your selection process for picking a library?

&#x200B;",1541704887.0
HipHopHuman,"I have written a function `makeProxyRequest` that will attempt to make a request using the first proxy in the list. If the request fails, it will move on and try the next proxy, and then the next, and then the next, and so on. If all proxied requests fail, the function will wait 1 second and then try all the proxies again. If it still fails, it will wait 2 seconds and try all the proxies again. If it still fails, it will return a rejected promise.

    const axios = require('axios');
    
    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
    
    const proxyArray = [];
    const url = 'https://something.com';
    
    // turn proxy list into axios client instances
    const proxyClients = proxyArray.map(proxy => {
      const [host, port, username, password] = proxy.split(':');
      return axios.create({
        host,
        port,
        auth: {
          username,
          password
        },
        withCredentials: true
      });
    });
    
    // a function which makes a resilient HTTP request. If the first proxy fails,
    // it will move on the the next proxy and try that one. If they all fail, the
    // function will wait 1 second and retry all the proxies again. If it fails a 2nd
    // time, the function will wait 2 seconds and retry all the proxies again. If it fails a 3rd time, it will return a rejected promise.
    // it takes the same arguments as `axios.get`.
    async function makeProxyRequest(...args) {
      return retryPromise(async () => {
        let currentProxyIndex = 0;
        let lastProxyIndex = proxyClients.length;
        const proxyListExhausted = () => currentProxyIndex >= lastProxyIndex;
        return retryPromiseUntil(proxyListExhausted, async () => {
          const client = proxyClients[currentProxyIndex++];
          return client.get(...args);
        });
      }, { attempts: 3 });
    }
    
    // set up some defaults for generically retrying a failed promise
    const defaultRetryOptions = {
      attempts: 1,
      interval: 1000,
      backoff: 2
    };
    
    // function that executes a promise-returning function and retries it when
    // it fails. it retries it up to `attempts` times, waiting `interval * backoff`
    // milliseconds before each attempt.
    async function retryPromise(action, options = {}) {
      const settings = Object.assign(defaultRetryOptions, options);
      try {
        return await action();
      } catch (error) {
        if (settings.attempts === 0) {
          throw error;
        } else {
          await delay(settings.interval);
          return retryPromise(action, {
            attempts: settings.attempts - 1,
            interval: settings.interval * settings.backoff,
            backoff: settings.backoff
          });
        }
      }
    }
    
    // function that takes a condition and a promise-returning action, and
    // retries the promise-returning action (if it fails) until condition returns true.
    async function retryPromiseUntil(condition, action) {
      try {
        return await action();
      } catch (error) {
        if (condition(error)) {
          throw error;
        } else {
          return retryPromiseUntil(condition, action);
        }
      }
    }

&#x200B;",1541737037.0
Robinlemon,"You cannot request any resource with the https protocol when using request. The proxy may also be dead, make sure to validate this. ",1541697099.0
chigia001,"nvm: Node Version Manager. Your machine can installed multiple version of node in different folder and NVM will help you to switch between these version(Honestly never use it, don't have multiple version of node on my machine)

node is more like a command line interface of node.js. node should be bundle with node.js. I don't believe node have a separate version than node.js, when running \`node -v\` it is actually the version of node.js. You might have some misconfiguration that create 2 command line interface for nodejs and node. You might check [this](https://stackoverflow.com/questions/18130164/nodejs-vs-node-on-ubuntu-12-04)

node-red and pm2 are a module, a library written by open source community and not maintenance by node.js. As these module and node have difference release schedule it don't make any sense if one need to update semver and enforce other to update it too.

npm is node package manager, they also not maintenance by node.js. NPM is maintenance by a company. This provide infrastructure to host package and also provide a command line tool  (npm) to get download these package. As the same as module library, their release schedule is also difference => difference semver.

&#x200B;

how module talk to each other: node.js have a mechanism to resolve module file location. they don't really talk to each other, node will load these module's file at run time and create some share instance between module. If two module A and B also depend on module C, C might load only one and have one instance of C at run time.  


    then I realized a bunch of nodes don't ""follow"" node-red so I need to reinstall them using npm install such as pm2 and node-red-contrib-stoptimer. Meanwhile, I'm sure what all the modules are on the rpi somewhere, I just don't know where.

npm is depend on package.json definition to resolve to a certain module's version. The term was \`semver\`. They define the cap version allow to use. There are some [tool](https://semver.npmjs.com/) to check if your package.json configuration can match with libarary's version. If  your package.json also contain pm2 and node-red-contrib-stoptimer, have some cap version they will not get update .",1541696929.0
nfriskus,Just at first glance can you confirm that your search base is correct? I see two dashes in your dc in contrast to your single dash in the bind dn for presumably the same domain controller.,1541734216.0
ainesophaur,"I had a little experience with it when I setup one for a 50 concurrent user site about 3 year ago. The modules were simple to install (and most notable, the ability to easily create your own) and the forum software upgrade was always simple. Overall, I felt it was a very fine product with no downside that I could find. From what I remember, the setup wasn't difficult nor was supporting the site. The ui was very clean and the forum didn't feel like 15 years of code hackory unlike phpbb",1541699186.0
PerfectOrphan31,"Is there anything being documented in the Heroku logs? Any sort of error codes or messages? From what it sounds like, there a connection not being made. How are you accessing your database? What package are you using? Any chance you could get a coffee sample to look at? ",1541693149.0
Wh3at1y,"Maybe it's something to do with the port not being correct with Heroku's side.

Make sure the port you're hosting your server on is something like this:

`const PORT = process.env.PORT || 5000`

`app.listen(PORT, console.log('Running on port ' + PORT))`

Heroku uses their own port from the env file. Hopefully this helps with something!",1541714861.0
TitusPullo604,"heroku is probably blocking the outgoing connection, google the error message in your logs",1541697495.0
asa20xx,I have a rails app on Heroku that points to a sql server that i have setup at home. I got my app to connect to my local database and pull data. Im a noob to and got it to work after alot of google searches and stack overflow. The main issue a had was that i did not have a port forwarding setup on my router and the server i had my database on did not have a static ip adress. After i resolved those issues i got the connection working. Hope that helps,1541700443.0
ryanhollister,"I think your view of web components is dated. Chrome, firefox and safari natively support them and the others have reasonable polyfills back to ie11.

There are whole frameworks built on them

https://stenciljs.com
https://www.polymer-project.org
https://beta.ionicframework.com/docs/",1541679390.0
sneffer,"I agree with u/moustacheful.

As you say, OP, the complexity of maintenance/enhancement in your solution is caused by the organization/taxonomies of your solution. Specifically, your ""blocks"" of composition are too obtuse. The ""formats"" are responsible for too much and are probably becoming balls of mud. This leads to dense coupling between your ""formats"" and the ""components"" which make up their various modes. You realized that you might reduce the dependency between component/format by refactoring to finer grained components with more segmented responsibility than before.

This refactor can absolutely be done without changing tools / language. That means that any choice to change tools will likely need to be justified by your opinion/experience/budget.

For example there are a lot of people who currently believe that jsx helps you to express this sort of composition in a more easily maintained manner. This is opinion. It might help, but it might not... That depends on the people writing it. I've seen protects fall into the pitfalls of deep inheritance, composition, and aspects which can be quite complex to escape. I've also seen it used well.

I'm rambling, but once again:

Do your refactor if it can save your team enough time. Choose a new tool only if you think you have budget and adequacy in project organization.... Oh... And if you know it will matter a year from now...",1541770853.0
Moustacheful,"How much logic are you having on the front end? Component based frameworks and libraries try to solve more than just rendering some initial data, and are best suited for managing changing state and user interaction. Keep that in mind, since you will be adding that load to the end user, with maybe not much gains to be had on that area.

How is your current implementation a problem, though? Have you identified what the problem is and why is it hard to maintain? I'm pretty sure you can work something out with what you already have. Rebuilding an already done application is a lot of work. ",1541676154.0
Koofiiee,Run `npm install cross-env`,1541683297.0
MondoHawkins,[Maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) are probably the better choice when that matters. They are guaranteed to iterate in key insertion order.,1541689885.0
sneffer,"Good to know.

However, there's popular saying on Reddit for things like this:

> If you do this, fuck you

Not only would you be requiring your collaborators to know this (mostly) internal facet of current JavaScript, but you'd be breaking an agreed upon separation of responsibilities.

If JavaScript is documented and specified in a way that tells you not to rely on the order of object properties, you should not. Reading ECMAScript's implementation spec doesn't change that suggestion. 

This behavior came from optimization and evolution of JavaScript interpreters/runtimes. You'll get no sympathy from ECMA (not your runtime) if they decide to change internal implementation and you depend on behavior you were told not to.",1541767194.0
lordluke10,"Well its an issue with the ""post install"" stage of the package pngquant-bin@4.0.0, could be you OS/arch or an issue with that specific version of the package. Try opening an issue on pngquant-bin's github, or if you didn't install it directly then the github of the package that you're trying to install install.",1541634894.0
tswaters,"I'd try to install the latest version.  

All that library does is serve as a VERY thin wrapper to an executable that is stored as part of the repository.  

It's post-install just checks it can run `--version` and if not, tries to build pngquant from source using make.  

If you're missing dependencies, that build probably fails.... and appears to take any error messages with it!

You can try to build `pngquant` yourself (https://github.com/kornelski/pngquant/) to maybe get a better error message.  ",1541652256.0
idropbows,"Unsupported platform for fsevents@1.1.3: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""linux"",""arch"":""x64""})

Read the damn error log!!!!!!!!!",1541636632.0
danhab99,"This looks beautiful, nice job",1541640442.0
angusog7x,"I get a 404 for the link perhaps because of the encoding in the URL (# is %23).  In case others do here’s an alternate:
https://github.com/enquirer/enquirer",1541648679.0
Pentafloppy,"Interesting looking package! In your opinion, what does enquirer bring to the table that inquirer doesn’t?",1541661688.0
c00kie17,"Wow , this looks super cool! Good job 👍 ",1541646644.0
CoffeeToCode,(Unrelated to the package) What theme are you using for your terminal?  It looks clean!,1541690719.0
GoblinsStoleMyHouse,"Looks amazing, and the docs are super well written. Nice job!",1541695713.0
rainweaver,Brilliant.,1541665088.0
doowb,Thanks for all the great comments here and stars on GitHub! It's helped get enquirer to #4 on the daily trending list: https://github.com/trending,1541722940.0
FDon1,Using a lot of the inquirer package atm so I will give this a spin and see how this fairs ,1541631801.0
NetOperatorWibby,"Link to module: https://www.npmjs.com/package/tink

Wish this was usable right now.",1541636743.0
maybekatz,p.s. AMA if you're wondering about more stuff that I could add to the FAQ :),1541707157.0
brocococonut,"You need to make sure to save the salt in the DB with the user, then use that in your update method as well. Either that or if you're just creating a new password entirely then you can generate a new salt as well",1541682983.0
Nimor111,I've read both your books on react and redux can't wait to get into this! Thank you for your work. ,1541578075.0
rwieruch,"Hello everyone. I super excited to share The Road to GraphQL. I have been working on this the last 10 months and did everything to release it today as quality yet up-to-date learning resource to learn GraphQL with JavaScript (React.js, obviously Node.js :-) and PostgreSQL as database to make it well rounded).

**That's included:**

* 350+ Pages (on 8.5 x 11 inches)
* 45+ Exercises
* 400+ Code Snippets
* 4 Applications + Bonus Applications

I hope you like it!",1541569174.0
NetOperatorWibby,This is free?! Sweet.,1541602034.0
knome,"I'm not a node user, so a grain of salt. But the standard for unix processes that don't need to use their stdin is to open /dev/null and spawn the new process with stdin set to it.",1541564414.0
highres90,"We use aws-serverless-express with great success in Lambda with API Gateway. We used to get gzip issues when using the compression middleware until I saw this file in their examples. Don't know if this helps!
 https://github.com/awslabs/aws-serverless-express/blob/master/examples/basic-starter/lambda.js",1541574096.0
devourment77,"We had a lot of issues with binary / files and gzip compression with api gateway.  AWS support told us to spin up a separate api gateway instance for binary files without gzip (we were using api gateway to gzip and not our backend).  This was about a year ago so maybe things have updated.

This may help on the binary config side of things:  https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-payload-encodings.html",1541564276.0
sshaw_,"Sounds like the response is missing the `Content-Encoding` HTTP header but has a  `Content-Type` of `text/html` or similar. `curl --compressed` will always decompress and saves but your browser needs the correct headers. 

If this is not it post the HTTP response headers here. ",1541639570.0
shawncplus,"This blog post is kind of all over the place. Firstly, you propose a problem: You can run out of memory by reading large files. Sure, that can happen, NodeJS is a pretty terrible platform for handling large files. But instead of addressing the problem, or explain how to actually manage memory, or deal with large files, you seem to suggest by way of emphasis that the ""correct"" solution is to just increase the memory limit.

You posit the question ""Why do we run out of memory?"" and basically just say ""because we use too much memory"": ""If you try and load a data set that is larger than available memory you will most certainly run out of memory ""

But then you take a weird detour:

> The other big problem is the dreaded appearance of a memory leak.

Wait, are we talking about memory management with large datasets or are we talking about memory leaks? Because those are two completely different problem domains and the mitigations are completely different.

I mean hell you literally title a section ""Now we have memory to burn!"" No, no you don't. There is just so much wrong with that I don't even know where to begin.

> So in effect I’m limited by the size of the laptop’s hard drive.

If you are hitting swap you are so royally fucked you may as well have crashed. Hitting swap is **200,000** times slower than hitting main memory.

> Well to start don’t ever load your entire data set into memory. Make sure you only ever load it in manageable chunks.

You spend exactly _one_ sentence offhandedly hinting at the correct way you should be handling large data and bury it in a completely unrelated section about memory leaks.",1541564973.0
Bosmonster,"I'm not entirely sure what you mean with your last bit, but peer dependencies need to be manually installed. That is what it is saying.

So install bufferutil etc.",1541538999.0
agenaille1,"It’s telling you the exact versions it requires. Start by npm installing those exact versions. 


    npm install bufferutil@^3.0.3",1541561399.0
CloseDdog,"I'm assuming if you are implementing this architecture in your project, that your business logic lives outside of these backends. Perhaps in a microservices architecture/serverless/service in another language, and you intend to use node as a layer between your different clients and your implementation logic.

In this case a more lightweight framework such as express (or Koa of fastify, whatever floats your boat) is very suitable for the job imo. ",1541542659.0
FountainsOfFluids,Is your experience in a different programming environment? Is this your first time contemplating a web API?,1541560842.0
variables,"I don't have any guides for you but I've done this with my company extensively.  We use Node/Express to aggregate multiple micro-services into a single API for our front-ends.


There are some pitfalls to this approach.

1. The BFF response time (TTFB) will only be as fast as the slowest micro-service response time.

2. Since micro-services each serve a different function, most of them will require different parameters, each of which will be used to produce a different response.  The end result is a single end-point that takes a multitude of parameters and returns a very dynamic response.  This response will be highly uncacheable due to how unique each request & response will be.

3. Node.js JSON.parse() is slow (compared to other languages & formats) - depending on the expected load of your site this may or may not be an issue.

If you're looking for a performant architecture, one technique is to keep the [Critical Rendering Path](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/) in mind, and render your above-the-fold content server-side, using one of your BFF services, then load the rest client-side.",1541562677.0
_imjosh,"[This](https://github.com/imjosh/very-basic-node-express-example) is how I would do it.

&#x200B;

I'd recommend you check out Wes Bos' courses on Node and Javascript.  Or, there are a million and one ""how to do \_\_\_\_\_ with Node.Js, Express, and X, Y & Z"", etc. videos on Youtube.  Try to find one that was made in the last year though.  

&#x200B;

&#x200B;",1541543840.0
Bosmonster,"There are a gazillion ways of getting data to the server, as you mentioned. The most basic way is simply using a form (form action and a method of GET or POST)",1541539223.0
l3l_aze,"Not 100% sure, but I think you'll want to check out HTML forms and their ""submit"" action.


The data is usually sent from a HTML page back to a server. NodeJS can be used to build servers, but regular ol' JS is still the standard for webpages. Some of Node can be/is compatible with browsers, so some modules can be used the same as other web dev libraries & frameworks are throughout the web, but not everything.",1541531593.0
yousof77,"The easiest way i can think of off the top of my head would be to in the html have the form being sent to a specific path that you then handle in express/node.

    <form action""/handleform"" method=""POST"">
        //The contents of your form like inputs and buttons
    </form

Then in express you can handle it like

    app.post('/handleform', (req, res) => {
      //Code to handle your form
      // Your responds should be on the res argument while the data (in this case the form) comes in on the req.body argument
    })

Edit: Format and clarification.
Edit2: correct routing method",1541606420.0
thinksInCode,"The only thing I could think of is to call `fs.access(filepath, fs.constants.W_OK)` before writing to the stream, but that would mean checking the access of the file on every single request, which I would imagine would cause major performance problems. Any other ideas?",1541527439.0
feature_creep,"I'm still not getting past having to use a new query language that seems like it should have just been implemented as JSON structures. 
",1541535603.0
CptBootsyBoots,Downvoted because this guy really transpiles serverside code. This is so fucked up and one of the many reasons JS programmers are seen down on by most other developers. And for what big advantages is he doing it? To use import instead of require. Get fucking lost.,1541544243.0
mypirateapp,"A newbie question , apologies, why do I need GraphQL exactly?",1541576612.0
xfatal9x,Sounds like a firewall is blocking that port. Check IPtables on the server and open up that port. ,1541523375.0
brown59fifty,"Turn off Tomcat and try to run node server on port 80. If it doesn't work, probably something is wrong with node (or code itself). However if it will, that could be a sign that you've got disabled non-standard ports - it could be a firewall, iptables or some network devices somewhere in between (routers, switches etc.). Also if you've got some bigger infrastructure, when there's more servers pinned to one IP, check routes in gateway devices.",1541521762.0
,[deleted],1541523885.0
FormalEnvironment,[https://glitch.com/](https://glitch.com/) is useful for testing stuff like this without needing to futz with firewalls. ,1541530156.0
Thommasc,"I used sequelize with typescript without any issue.

It's not exactly rocket science.

model.ts

    import Sequelize from 'sequelize';
    
    require('dotenv').config();
    
    const Op = Sequelize.Op;
    
    const sequelize = new Sequelize(
      process.env.MYSQL_DATABASE,
      process.env.MYSQL_USERNAME,
      process.env.MYSQL_PASSWORD,
      {
        host: process.env.MYSQL_HOST,
        dialect: 'mysql',
        logging: false,
        operatorsAliases: Op,
        pool: {
          max: 5,
          min: 1,
          idle: 10000,
          acquire: 10000,
          evict: 60000,
          handleDisconnects: true
        }
      }
    );
    
    export const ProtocolTable = sequelize.define('protocol_table', {
      id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: true },
      protocol_step_id: Sequelize.INTEGER,
      name: Sequelize.STRING,
      data: Sequelize.STRING
    }, {
      freezeTableName: true,
      timestamps: false
    });

&#x200B;

index.ts

    let protocolTable = new ProtocolTable();
    protocolTable.name = 'Table';
    protocolTable.protocol_step_id = entity.id;
    protocolTable.data = convertTable(table);
    promises.push(protocolTable.save());

Just go about it step by step.

The hard part is probably just getting the model definition right.",1541519982.0
scurtie,"Checkout https://github.com/fabrix-app.
Fabrix is written in typescript and has plugins called spools, one of which is spool-sequelize. It has a clever way of taking sequelize models and making them easy to work with.",1541596650.0
ethan_mick,"I've actually had mixed experiences with this. Note that this is all for v4.

Non-trivial applications are going to want some separation of concerns for their database models. I've found putting them in their own directory works nicely. This also is what their example suggests: [https://github.com/sequelize/express-example](https://github.com/sequelize/express-example)

You can see \[here\]([https://github.com/sequelize/express-example/blob/master/models/index.js](https://github.com/sequelize/express-example/blob/master/models/index.js)) that they do some tricky magic loading of the modules with importing the module by path. If you're going to want to do that, you just need to ensure your configure your modules correctly so sequelize can pick them up.

However, you may want to look into: [https://github.com/RobinBuschmann/sequelize-typescript](https://github.com/RobinBuschmann/sequelize-typescript). This library adds decorators that do a lot of the model configuration for you. TypeScript is quite powerful, so this gives you a more natural way to do things:

```
@Table
export class User extends Model<User> {

  @Column
  name: string;

  @Column
  birthday: Date;

  @HasMany(() => Hobby)
  hobbies: Hobby[];
}
```

However, I had lots of trouble setting up my `db` directory to correctly load the modules. In the end, your `index.ts` file needs to look something like this:

```
import { Sequelize } from 'sequelize-typescript'
import { User } from './user'

export const sequelize = new Sequelize({...}) // configure

sequelize.addModels([
 User
])


export * from './user'
```

This correctly orders things. First the sequelize connection is created, then the modules are added and initialized, then they can all be exported from the barrel file and used in the rest of the application.

Hope this helps!",1541602439.0
DerekMartian,"https://github.com/AudioNet/node-core-audio
Seems like there's functionality in their API that reads buffer of an input soundcard and returns an array. The array might provide some data that can tell you if audio is playing or not.

    engine.read();",1541521166.0
kryptkpr,"Use ""npm ci"" in production, not ""npm install"" (assuming a recent node 8+)",1541559052.0
GeneralIncompetence,"Useful for the complete novice, but is /r/node the best place to post it, seeing as it's browser debugging? ",1541492085.0
DmMacniel,And how will you do it on the server side where you actually want to log?,1541495961.0
phitruongdn,Front-end only!,1541496868.0
daveequalscool,"on the topic of moving past console.log, i spent the weekend integrating my first project with Winston for logging and am loving it. right now i just have api calls and model snapshots being logged and a basic reporter that pops either one (or a raw combined view) into a new window, formatted with tables. but having the full picture in one view without having to click through requests in the network panel is huge. especially since the project is based off another company's API, and client demos usually consist of showing the data to the client to prove that the bugs aren't ours.",1541524998.0
NetOperatorWibby,Another GraphQL tutorial with Apollo. Where are the vanilla graphql.js ones?,1541513798.0
penguingspe,"dafuq is ""native node""?",1541482961.0
7PIzmA9ubj,Code Talker: The First and Only Memoir By One of the Original Navajo Code Talkers of WWII https://www.amazon.com/dp/B005ERIRHW/ref=cm_sw_r_cp_apa_i_GNs4BbFE6XRTQ,1541483007.0
FormerGameDev,"I would say start with the official manual page wrt the API section you want to learn.
",1541488116.0
brodega,"Node Design Patterns. Learn about streams, async I/O, events, etc. Vanilla Node is incredibly powerful. ",1541514000.0
syntheticproduct,Do you mean JavaScript?,1541490992.0
Lolyman13,"At a first glance, I’d think the possibility to add functions with multiples parameters would be great",1541449409.0
Str4yfromthep4th,Lol,1541449903.0
Str4yfromthep4th,It literally takes about 10 minutes to learn. Just pick a framework and learn it. You don't need a course or something to learn something so simple.,1541441715.0
l3l_aze,"I learned through a combination of reading documentation +the tests from projects by more experienced devs, and it's worked pretty well. If you can find another project that does something similar to what you need to test it may be worth trying to convert their tests to your project, at least partially, to help you figure it out.",1541441994.0
jjhughes57,"I tried devspace a few weeks ago but gave up because I could not figure out how you wanted me to run the docker registry in my local kubernetees cluster. Is there some guide on this now? 

I don't want to have to push images to some public repo just to test this out with minikube or something.",1541451747.0
ctscodes,This sounds cool. I'm going to give it a try this weekend. ,1541474026.0
Wickity,"I've used [telepresence](https://www.telepresence.io/tutorials/docker), and it's *amazing*.",1541460234.0
Str4yfromthep4th,"https://www.digitalocean.com/products/kubernetes/

What are you offering that is better?",1541442024.0
Str4yfromthep4th,Nobody cares about comparing these and it's been done 100 times already for no reason.,1541442387.0
whatisboom,"I’m not sure on the legal side, but I’d consider the path a bit overkill, also you have version twice",1541460604.0
BrunnerLivio,"I am sorry, but I think you gotta need a step back. This code is really confusing and by the mistakes you're doing you either do not understand how to solve problems with (async) NodeJS or basic principles of programming languages. But do not worry, we all started from the bottom and did confusing stuff and NodeJS and Promises are especially confusing.

Here is more or less how I'd solve it. You may need to adjust it though, since I did not 100% understand what you were trying to achieve, but I think you get the basic understand how to solve these async operations:


```JavaScript

async function getToken(password, username) {
  return axios({
    method: ""post"",
    url: ""https://removedForSecurity.com"",
    data: { username, credentials: { password } }
  }).then(res => res.data.token);
}

async function doSomething(tenant_id, token) {
  return axios({
    method: ""patch"",
    url: ""https://removedForSecurity.com"",
    headers: { ""X-Auth-Token"": token },
    data: {
      tenant_id
    }
  })
}

exports.delOnt = async (req, res) => {
  const token = await getToken(req.user.api_username, req.user.api_password);
  const response = await doSomething(req.user.api_tenant_id, token);
  res.json({ objectVariableRetrievedFromAxiosRequests: token });
}

```

**EDIT**: Small mistake in the code with the doSomething() function",1541425884.0
liloow1,"You're note returning a promise on your first function, thus you can't await it's result, make AxiosRequest async too ",1541424081.0
ecares,"Have you tried:

`tokenTenant = await AxiosRequests(req)`

and replace `axios({` by `return axios({` ? ;)",1541423977.0
hicksyfern,"I've been working on my own React Native project (in typescript as it happens but not relevant) and I've used basically the same pattern. Sick of huge ""index.ts"" files that require all the bits in and call them, usually with some order dependence, etc., etc. I made my app purely with modules like this and it's bliss.

More people should be writing articles telling everyone to structure their apps this way around, whether it’s front or back end.

Kudos.",1541442279.0
brocococonut,I really need to get around to properly learning and looking into TypeScript...,1541424225.0
mtsch11,I like it :) Looks great,1541444025.0
blocking-io,This looks pretty sweet. What would you say is the main difference (or purpose this serves) over NestJs which is also a typescript framework,1541447443.0
Bobbr23,Wow this looks awesome,1541474139.0
Bobbr23,Did you build stix in a month? Your changelog hints that you did - crazy impressive. Docs were great. Looks like a well organized framework.,1541478726.0
Bobbr23,Did you build stix in a month? Your changelog hints that you did - crazy impressive. Docs were great. Looks like a well organized framework.,1541478753.0
romggo,Try changing the model name to”Accounts” in the URL ,1541401161.0
CertifiedWet,"shouldn't your method be
`function (req, res, callback)` instead of `function (req, callback)`?
I don't know LoopBack but I heard its built on top of express so  that maybe the case",1541408771.0
variables,"The technique most people do is disable the button until the call returns, maybe putting a spinner on it while it waits.",1541376282.0
sole-it,"In case you are already using lodash, it has rebounce and throttle which can do what you want. Or you can implement those yourself.",1541382173.0
davidmdm,"Nodejs never needs a mutex. It doesn't make sense because one, there is only one main thread, and two you will generally run multiple instances of your app. 

If you need to lock your database, then you need to put a lock at the level of your database. 

That's the only solution that provides integrity. No JavaScript package can help you. 

I mean of course you could only run one instance of your app and put a lock at the application level but goodbye horizontal scaling. ",1541385827.0
joesb,"UI side: disable that button while the request is being processed, so that user can’t click it twice. 

Backend side: use db unique constraint to make sure only one action (per the unique constraint) can be done. ",1541421374.0
contrarianism,Authentication is an important related topic.,1541400191.0
Downvotes-All-Memes,"I found this article extremely helpful. It was similar enough to a course I paid for that I understood where you were going, but different enough to be a valuable ""second opinion"".

Please keep writing, you're very good at it and your code snippets/steps are the right amount of info for each new step in the process.

Also the fact that you began by including tests from the start was awesome.

Looking forward to more articles!",1541434975.0
thistoohard,Would love something different than every other bullshit article like this. Articles like these are the basic bitches of the dev world. ,1541368783.0
FormerGameDev,In your on close event check to see if you need to start another one ,1541361895.0
FormerGameDev,In that long he's never had to only validate the type of an output and not it's actual value? Or tested something in which the output is not an exact function of it's input? Huh,1541362347.0
flashbck,"This has nothing to do with node. It has nothing to do with PHP, or finance, or programming, or haskell. I think that you only managed to post in one relevant sub, r/music. The other 22 posts that you made are a waste of everyone's time to down vote.

&#x200B;

Edit: It looks like you've also made some posts about humans being AI... because you wanted to write a [medium.com](https://medium.com) ""article"" where you basically just point out that you had kinky sex and multiple partners. Why do you bother with this junk posting?",1541349780.0
jupazave,"You should ignore 'node_modules' from your repo, it automatically installs when yo do 'npm install'",1541355221.0
haykam821,They are really dynamically what?,1541358362.0
eckstazy,"Hey man thanks, this looks awesome and I’ve been liking for something like this for a while; just never felt like building it from scratch. 

If you need any help with the repo or anything let me know, I’d be happy to help!",1541378428.0
kopiro,"Hey man, this is big and awesome! Trying to implement in my bot assistant with the feature ""Where is my friend XXXXXXX?""

I'm let you know, and again, awesome!",1541353734.0
choledocholithiasis_,This is awesome! How long did it take to reverse engineer the api endpoints used on iCloud.com? ,1541421928.0
AlexanderHorl,This is awesome I honestly didn’t expect Apple to have such an extensive API.,1541365350.0
Zeeesty,How is this better/different than chalk?,1541341210.0
NetOperatorWibby,I love colorette.,1541345084.0
nicholaiii,"The real benchmark shouldn't be against chalk but ansi-styles@2.2.1, the package that chalk provides a higher-level interface to.",1541376449.0
Str4yfromthep4th,Database isn't really relevant. What kind of security do you want? Setting g up passport is such a broad request... We need some more info. do you understand what passport does?,1541344242.0
m1sta,How is this different from the historical pub sub feature?,1541324938.0
erulabs,"Redis5 streams work a bit like Kafka, though there is some complexity with the connection handling. I wrapped that up here so you can know you'll only ever have two Redis connection handles per node app.

I'm going to use Redis streams for a turn-based multiplayer game that used to have complex game server matchmaking that involved a lot of moving pieces, to a system where any API server can stream and update the turn list of the players, without needing to know which server the other players in a game are connected to (or if they're connected at all).

Hope this is helpful! I'll update the documentation more in the coming days, as I think i'm mostly settled on the design now.",1541312906.0
badmonkey0001,Nice work OP!,1541355509.0
SizzlerWA,How do I use this if I don’t want my remote clients connecting directly to Redis?,1541398828.0
dontchooseanickname,"The keyword you're looking for is [`ncurses`](https://wikipedia.org/wiki/Ncurses).

Have a look at [blessed](https://github.com/chjj/blessed/blob/master/README.md)",1541313942.0
jager426,"I've wondered the same thing with a lot of my projects but to keep it simple, logically what you're already doing seems OK, at least for something simple.

I've been doing similar things with my node [CLI apps](https://github.com/adamzerella/lshw/blob/master/src/index.js#L12) and handling args",1541334331.0
JK33Y,"i've never heard of using a cli with an express server. why don't you use a taskrunner like gulp or npm to rebuild your templates/clear your database? if a cli app is what you're after rather than a web app, i believe there's frameworks specialized for node cli apps that would fit your case better.",1541311096.0
davidmdm,"Hey. I'm a backend dev, and at my work a lot of my front end coworkers use rxjs. It seems to me be an interesting way to model events. 
I've never found any use for it on the backend though. It always seemed more complicated to use an observable than a simple promise. 

I just wanted to know what gain or use case you need rxjs for on the backend?",1541306111.0
SnowyMovies,"We use it in a few apps and services. I **really** like it, makes code much easier to read. Haven't run into performance problems due to RxJS.",1541337410.0
dvlsg,"Feels similar to the old-ish way of creating and resolving promises, just done with generators instead of a normal function.

https://stackoverflow.com/questions/36460706/what-is-the-difference-between-deferred-resolvedata-and-deferred-resolve-i",1541302107.0
davidmdm,"Hey! This must be serendipity. I wanted to understand how observables work or could be implemented so I made a small implementation that is extremely similar to what you just did. 

My implémentations supports new Observable, Observable.create, fromEvent (only on nodejs event emitters) and pipe.

The operators i support are filter, map, delay, debounceTime and scan. 

Here is the code: https://github.com/davidmdm/Observable/blob/master/observable/index.js 

It's not production tested, but if you want something very light (it's only about 120 lines of code all put together) and that works like an Observable than feel free to use it or make it better. 

Oh and i also support obs.next/complete/error. 

Very cool. Let me know what you think. 
Have a good one. ",1541307427.0
curiousdannii,Why aren't you just making a normal promise?,1541336013.0
scarstensinke,"Why not connect directly to the backend? Depending what you want to do as middleman.

If necessary make be a “middleman” for some of the things you want to do.",1541283309.0
the_brizzler,"I wouldn't necessarily connect 2 websockets or anything like that and wouldn't put a middle man in for security (its not more secure). If you absolutely need something in the middle, I would...

  
client uses websocket to send message on the ""catfacts"" channel -> middleman on receive function listens on the ""catfacts"" channel and receives the message, then makes an http request (or multiple, whatever you want) to some other backend -> the far backend gets the http request, does something and sends back the response to the middleman -> your listener function gets the http response and then can broadcast the results onto the same ""catfacts"" channel or another channel...whatever you need to do",1541299943.0
FormerGameDev,"Fwiw I'm working with a system right now that used to have a qt application that communicated with other instances of itself remotely using websocket. For security and separation of concerns  purposes, we moved the communication to a different process, which handles many different remote connections. So the service communicates remotely using a websocket between the two, but locally via Unix socket. Seems to work quite well. 

For some reason we don't entirely understand we saw a huge performance increase in through put using a Unix socket from the qt app to a node.js server, and using node.js to handle the websocket, versus just directly using the qt websocket

So what we do is on data on the Unix socket, then we send exactly that data to the websocket, and vice versa.",1541358107.0
CherryJimbo,"Take a look at [Microsoft's BotBuilder](https://github.com/Microsoft/botbuilder).

You can find a lot of examples at https://github.com/microsoft/botbuilder-samples.

",1541279169.0
fredamsouza,"I have been using Botmaster for a while in Enterprise production software and it's quite productive. Also it offers you ways to integrate with many platforms (Facebook, Telegram, Etc) quite easily.

https://github.com/botmasterai/botmaster",1541291447.0
zenoplex,"I’ve been using botkit with my team for chatOps for a while and haven’t had any problem with it. We host it on heroku free plan and I think its relatively easy to set up.

 https://github.com/howdyai/botkit",1541638372.0
scarstensinke,Seperate it in it’s own js file and export it? Then you can import/require the function in both files.,1541287328.0
ohadron,"Stuff like user.js line 95 is basically callbacks, which is what the promise syntax initially aimed to avoid.

&#x200B;

Two recommendations: 1. check out [this post](https://medium.com/@pyrolistical/how-to-get-out-of-promise-hell-8c20e0ab0513) \- it addresses exactly what the issue is here. 2. If you environment allows it (Node 8+), check out the async/await JS feature - it could significantly simplify some of your code.",1541274603.0
Str4yfromthep4th,You can rethrow exceptions from inside a catch block. Just FYI.,1541275830.0
OriginalSyn,"Have to mostly agree with them on these. Though I dislike the 

```
someFunction(123) {
  console.log('hello');
};
```

syntax, it just seems too easy to mistake it for a function definition.",1541270615.0
FormerGameDev,I feel like a post like this makes much more sense as an article than a video.,1541280590.0
,[deleted],1541277161.0
RushPL,When do these come to Typescript?,1541297390.0
beall49,That question mark operator to check for null is a must,1541371151.0
Pistolz4Pandaz,"If you could post what you have that would be helpful. Express file-upload makes the files accessable under req.files (I believe, on mobile) and them files are accessable by the name that is specified in your file pond setup. I used to use file pond as well but I don't think I have an example piece of code handy.",1541260356.0
tswaters,"Sounds like a problem with async programming, or lack therof.

if your code looks something like this --

    const result = db.query('select * from table')

this won't work.  It won't be undefined though, it'll be a promise.  To get the value out, call `then`

    db.query('select * from table')
      .then(result => assert(result.rows))
    
Or, use async and await

    const result = await db.query('select * from table')
    assert(result.rows)

Or, use callback-style --

    db.query('select * from table', (err, result) => {
      assert.equal(err, null)
      assert(result.rows)
    })",1541223037.0
syntheticproduct,"If you don't post your code, will be hard to help.",1541195028.0
pratiksathaye,I guess it explains how node uses threads but not how node uses event loop. Please correct me if I am wrong,1541219587.0
le_raul,This video is very very good https://youtu.be/8aGhZQkoFbQ,1541236226.0
waybovetherest,"This is a really good product, I would certainly like to use it in my apps, wish you all the best.",1541177104.0
moltar,Any plans for Vue frontend?,1541188631.0
bunsslim,Any plans for adding support for NoSQL databases like MongoDB?,1541190338.0
thistoohard,There was a problem with your request? Is this irony?,1541175809.0
k8martian,Thx for sharing,1541188951.0
sndrx,well...this happened [https://i.imgur.com/hmBStqD.png](https://i.imgur.com/hmBStqD.png),1541155928.0
VolkovSullivan,"I left my own ""porcodio""",1541156149.0
quer,"maybe do so the end user cant use eks. the socket.  


`for(var i = 0; i <canvas.width; i++){ for(var j = 0; j <canvas.height; j++){YourNewPoint(i,j)}}`

for just running that, and you clean the canvas. ",1541157090.0
brocococonut,I'm surprised you didn't share your DO referral code to try and get some free credit :P,1541185098.0
lateral-spectrum,Cool beans! I don't see the same thing when I open other tabs. ,1541165687.0
danhab99,Somebody drew a swatzica,1541174034.0
Turdsonahook,This is awesome. ,1541211620.0
maratmkhitaryan,Do you guys like the new BEEP feature?,1541252030.0
soundmanD,DNS entries should be the preferred way as it allows you to change servers and still have applications resolve according as the DNS entries only need updating rather than each application.,1541145764.0
vegas1995,"You should update your mysql ip with load  balancer ip but you must be 100% sure that the configuration works   
(eg haproxy)  
So to be sure what you are doing before updating live environment create a test app that insert in a empty table a record and stimulate this insertion for 100 times and the entities should enter in different database servers, then you can change in live. ",1541147232.0
kryptkpr,"Not sure how mysql works, but with postgres you would use pgpool to route write queries to the master and load balance read queries among slaves.  Does mysql allow writing to any node?  That would be easier, but kinda scary.",1541162929.0
thistoohard,What the fuck? Really? ,1541175946.0
iuseyahoo,I think you could have at least explained how to deploy to production after that,1541211892.0
mod-victim,OP = Author?,1541144456.0
kuenx,"If you're the author I think there is a bug on the countries page. The country links seem to be using the HTTP referrer and appending `?country.x=something&amp;locale.x=something` to it.

So when I came to the countries page through the link on your blog, [all the links pointed back to your blog](https://i.imgur.com/BFuGxqK.png) with the query string attached. The same thing happens when I google ""paypal.me countries"" and click on the result. The links go back to google.com.

When the referrer is an external URL you should make the links to to the home page or something. ",1541164445.0
HipHopHuman,"It's rather obvious from your strongly worded frustration that you come from a synchronous language background and do not understand the fundamentals of Node.js. So, here is a very short breakdown of what the situation is (which may not be entirely accurate - corrections are welcome):

* Node.js runs on the V8 JavaScript Engine.
* Most modern JavaScript engines (including V8) are single threaded. This means that your code cannot be run ""in parallel"".
* JavaScript code to be executed is stacked on to two separate task queues as ""tasks"". The first queue is the macro task queue, the second is the micro task queue.
* A native code loop (called the ""Event Loop"") retrieves and executes the code. When one ""macro task"" is completed, the ""micro tasks"" are then completed.
* Certain built-in functions have priority over other tasks, like `setImmediate`, `process.nextTick`, `setTimeout`, `setInterval`, etc. For example, if you use two `setImmediate`s, both will run at effectively the same time, meaning they are asynchronous. Some of these are scheduled as macro tasks, some are scheduled as micro tasks.
* Due to the single-threaded nature of JS, if you ""wait"" for a DB call, the rest of your code will ""wait"" too, ***including HTTP request handlers that do not depend on the DB call****.* This means that if your code is synchronous, and user A requests something from the database, then user B will have to wait for user A's request to complete before his own request is completed. That is ideally not what you want.
* The way around this is to use continuation-passing style and inversion of control (like a callback). Instead of saying ""fetch this data, I'll wait."" You instead say ""fetch this data and take this function, once you have the data, call the function on the data."" The callbacks that you pass around are wired to run asynchronously, so that the issue of your code ""blocking"" goes away.  


I suggest you learn some Node.js basics or proceed to build your project using a technology you are more familiar with. If you do stick with Node.js, then you can look into `util.promisify`, `Promise` and `async` / `await` to make asynchronous code behave more like synchronous code.",1541123762.0
programmatical,"Yep, perfectly good way to do it. I would suggest sending entries to your email address from a static one instead of user input. Makes it easier to search for and manage when you have a lot of entries.

I do it this way regularly as well.",1541117546.0
,[deleted],1541100617.0
HipHopHuman,"Using a `then` inside another `then` is completely fine in this particular situation, but you might want to use `.map` and `Promise.all` instead:

    fetchBooks().then(books => {
      return Promise.all(books.map(book => {
        return splashy.fromUrl(book.coverImage).then(dominantColors => {
          return Object.assign(book, { dominantColors });
        });
      }));
    });

You can actually use `Promise.all` trickery to get rid of the nested \`then\` if you really want to:

    fetchBooks()
      .then(books => {
        return Promise.all(books.map(book => {
          return Promise.all([book, splashy.fromUrl(book.coverImage)]);
        }));
      })
      .then(booksWithColors => {
        return booksWithColors.map(([book, dominantColor]) => {
          return Object.assign(book, { dominantColor });
        });
      });

But if your environment supports it, go for `async`/`await`, as it is much easier to read, especially if you abuse the behavior where `Promise.all` maintains the correct order.

    async function fetchBooksWithColors() {
      const books = await fetchBooks();
      const colors = await Promise.all(books.map(({ coverImage }) => splashy.fromUrl(coverImage)));
      return books.map((book, i) => Object.assign(book, { dominantColor: colors[i] }));
    }

&#x200B;",1541101023.0
tapvt,One likely way to simplify would be to use \`async\`/\`await\` syntax,1541098434.0
super_ninja_robot,"This might be exactly what you’re looking for
http://bluebirdjs.com/docs/api/promise.map.html",1541126636.0
Str4yfromthep4th,"You probably don't need the outer promise. Just use the one on the splashy call and it will be enough. Unless you have a shit ton of books... Regardless, use async/await as the other person suggested.",1541100993.0
TrevorNiemi,"About to follow this guide to get my feet wet but wanted to make sure it's not too heavily outdated https://medium.com/@atingenkay/creating-a-todo-app-with-node-js-express-8fa51f39b16f

Edit: Maybe this tutorial is better using MEAN stack - I've used mongo before https://www.bogotobogo.com/MEAN-Stack/MEAN-Stack-MongoDB-ExpressJS-AngularJS-NodeJS-ToDoList-App.php 

Maybe VueJS? https://dev.to/abiodunjames/build-a-todo-app-with-nodejs-expressjs-mongodb-and-vuejs--part-1--29n7

Going with VueJs guide unless anyone suggests an alternative.",1541093162.0
commander-obvious,jsx,1541097503.0
,[deleted],1541093791.0
utbusdriver,[https://stackoverflow.com/questions/3985214/retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection](https://stackoverflow.com/questions/3985214/retrieve-only-the-queried-element-in-an-object-array-in-mongodb-collection),1541095149.0
gketuma,I like the recommendation of Knex as it is low level but still gets you benefits over Raw SQL like migrations.,1541091019.0
blood_bender,"I kind of disagree with this article. ORMs have their place, as does SQL/knex.  I think using a combo of the two is the best bet. 

Using ORMs for simple data relations, CRUD operations, and to add logic to the models works for the majority of my applications.  Having a `hashPassword` member function on a database model, or being able to define private fields when rendering to JSON, those kind of things save time and make for clean code.  

But yes, the second you need complicated queries, or any type of reporting that doesn't conform to strict model types, drop to `knex`.  I know a few flavors of raw SQL and I still prefer `knex` because of migrations - both schema migrations and the occasional need to migrate to a completely different database without needing to rewrite anything (super rare, but it happens). ",1541092903.0
0xc0ba17,"Or, learn SQL, learn your ORM, and use the right tool for the right situation?",1541098508.0
lonestar-rasbryjamco,"The points presented seem to be more of an argument that an ORM has uses cases but is not a silver bullet. Yes, ORMs can be hard to optimize. Yes, you should be willing to use SQL as needed.  But ORMs have great specific use cases:

* improved logging and error handling

* streamlined integration with complex data structures

* simplification of otherwise complex actions (upserts and calculations)

Really the answer is learn both SQL and a few good ORMs. Know when to use which tool. It is just like knowing when to use Node, Python, or C# and to never use Java.
",1541091080.0
ikhos,"Great article and very in depth. I agree with it completely, there's no reason not to learn SQL, but I would say that depending on the team, your best bet sometimes is an ORM.

I can think of apps that I've started as full stack with limited time for both backend and frontend, or with other devs just touching SQL every now and then. When time is so important or a team is not so experienced, an ORM is an incredible tool.

Of course, if you have more time to get into the queries you want to build, please do, the overhead is minor and less error prone (depending on your SQL knowledge).",1541090299.0
digitil,I know sql quite well...but I still find orms very useful.,1541095162.0
austrologi,I am an expert in sql but there is no way I want to hand craft every crud action into sql statements. Update the object and be done with it. Ezpz,1541109007.0
bjs2,"There’s one very simple and straightforward argument for using ORMs. It makes your code more maintainable. If you need to rewrite your hand written SQL queries every time you change a resource definition, that’s going to be brittle and require an excess of maintenance work. ",1541096706.0
moltar,You can learn SQL and still use ORM. They are not mutually exclusive. I love ORMs for being able to abstract complex queries and be able to compose queries of different parts. I also love SQL and regularly build views and materialized views in PG.,1541103104.0
,[deleted],1541088659.0
erulabs,"I dislike ORMs and such, but Knex is a bit of a nightmare. `asyncStackTraces` is a more or less required option that means stacktraces aren't 100% useless, and incurs a roughly 25% performance hit. Additionally, it doesn't support reading from a replication slave [[1](https://github.com/tgriesser/knex/issues/2253)], which is (as a DBA) the #1 feature of any database driver software. Anyways, I use knex and sequelize, `pg` and `mysql2` directly, and still haven't found that sweet spot. I've been a SQL DBA for ~7 years or so, so I know SQL very well, but I still prefer `Noun.find({})` over `select * from ""Noun"" where ""Noun"".""keyWithCapitals"" = ... limit 1`.",1541099225.0
coder_ent,"I've never not used an ORM. 
Everything is still standing. ",1541124155.0
GrzegorzWidla,"Haven't read the article yet but I hate the title.

IMO you should be using ORM all the time even if only for database models and migrations. Even more useful when you are using typed language.

Every programming language has ORM for advanced users which allows easy escaping to SQL whenever warranted.

Not to mention that majority of apps are simple CRUD stuff and having an ORM speeds up majority of queries from average app.

So in my opinion, use ORM but be ready to use SQL whenever needed.

And side note, starting to learn databases with ORM is a bit like starting to learn JavaScript with jQuery so obviously know SQL first.",1541105635.0
dangerzone2,"Can't upvote this enough.  Learn SQL people! It's an invaluable skill that works on nearly any RDBMS out there.

The few times I've worked with ORM's, they seem to work great until they fail miserably and you have to rip it out and go to raw SQL.  ",1541087637.0
freebit,Relevant: https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/,1541089115.0
username_is_taken43,"I have an expert knowledge of SQL, used every commercially popular database in last 15 years, wrote SQL code in proprietary variants of DML and still use orm with node. Some of my queries are native ones. ",1541141099.0
username_is_taken43,"I have an expert knowledge of SQL, used every commercially popular database in last 15 years, wrote SQL code in proprietary variants of DML and still use orm with node. Some of my queries are native ones. ",1541141118.0
TaskForce_Kerim,"I know SQL but use ORM's whenever I can. It just fits much better in most programming workflows and version control. It becomes even more messy once you have multiple dialects of SQL.

&#x200B;

I think Knex is great but what often happens is that people don't stop at using Knex, they build around it and eventually end up with a (worse) ORM.

 ",1541141461.0
bmarkovic,"Objection + Knex

/thread",1541141689.0
bschaepper,"Ugh, that's just stupid. Maybe in this toy samples neither is much of a fuss, but don't tell me I should upsert complex relations by hand and delete some orphans along the way all the time, when my ORM can do that _in one line_ without even thinking about it. 

Sure, it can't do everything, but should you avoid cars because they can't do everything? Clearly not. And on the same note, you absolutely should learn to walk before you learn to drive.

Not all of my team members know much about SQL, so defining simple models and call 'findAllWhere({ type: ""veg"" })', mutate one of its subproperies, remove one and add a new one, call 'save(myObject)' goes a _very_ long way. ",1541142294.0
poor-toy-soul-doll,tl;dr? Because holy crap I do not need to read your postgresql tutorial in order for you to make your points.,1541177654.0
wherediditrun,"I suppose the only big problem with ORM's is that they are made to be compatible with multiple databases. And that generally means, using outdated / inefficient SQL features. For example, if you use postgre, your ORM's won't cover half of it.",1541252716.0
freebit,"I don't use ORMs much anymore. However, I do find myself creating data gateways that map database rows to plain 'ol TS objects (POTO's).",1541104123.0
skeliskull,"ORMs are great if you're database is object oriented. Just because you use mapping for some of your data doesn't force you to do it for everything though. And if query optimization is really important to you, you can just create your own object mapping middleware in your data layer. ",1541102169.0
paladincubano,C# Entity Framework Core 2.1 is very powerful ,1541109511.0
geon,What?,1541076421.0
Str4yfromthep4th,Not even gonna bother reading this cuz it's dumb,1541077882.0
placidified,Just because you can doesn't mean you should. Use the best tool for the right job. ,1541081083.0
XiMingpin91,"Node is great but you wouldn't use a hammer to paint your walls.

Use the right tool for the job.",1541083187.0
owenliang1990,no problem.,1541067007.0
TwiNighty,"Well, Taobao has an npm mirror at https://npm.taobao.org/",1541075299.0
sole-it,https://github.com/cnpm/cnpm,1541088949.0
pushthepramalot,I had problems downloading the chromedriver as this is hosted on Google Servers. ,1541081069.0
spider143,Why does China have to block it ? ,1541070942.0
Strum355,"postgres pg_ctl start will start postgres in the background, hence exec returns almost immediately",1541063629.0
beardbread,Pass in a callback to exec and resolve your promise when its hit.,1541901993.0
shakefu,"Because it can interfere with yarn’s dependency management or your package dependency resolution. 

Use yarn (yarn.lock packages) or npm (package.json) but not both. ",1541054569.0
,[deleted],1541049408.0
enyur,Adding these 2 more tools to your list editorconfig and eslint,1541056691.0
ilja903,lintstaged,1541054661.0
Capaj,"https://github.com/danielstjules/jsinspect is an interesting one. I only used it on a project once, and it was allright. Not too much activity on github though.",1541067146.0
rangeDSP,"My company is all in on the Microsoft stack. VSTS (now called Azure DevOps) is great if you have deployment into azure.

Other than that I hear GitHub actions are pretty good for CI/CD",1541053427.0
lulzmachine,"Jenkins 

Standard 

We were looking at circleci, seems cool 

Do a mono repo, definitely! 

We did a lightweight deployment solution with pm2 instead of containers. Easy to set up, unsure if i would recommend ",1541054868.0
CanvasSolaris,End arguments over formatting before they start with prettier in a commit hook. ,1541077928.0
ssbmomelette,Hard to help debug without a code snippet or github link to go off of but usually this is caused by using body parser incorrectly. Make sure you're utilizing the correct method for the type of data you're sending. For example if you're sending JSON data make sure you're utilizing `bodyparser.json()`. ,1541026191.0
l3l_aze,"Considering what it's doing internally with multiple additions, subtractions, multiplications, and etc, I cannot fathom how this could possibly be faster than just using `a + b`. Is this a troll post, or are you a mathematical/programming genius?


Also, you mention benchmarks but don't have any benchmarking test in the project. Has it been run with a real benchmark, and are there any plans to add a test/proof script for that? Obviously users can do so, but it seems like something that should be included.",1541020560.0
futagozaryuu,"Thank you, good sir, I'll just add this epic library to my MOST commonly used modules alongside https://github.com/auchenberg/volkswagen and https://github.com/euank/node-noop :D",1541027645.0
podsixia,It means port 3000 is already in use. Try running on a different port number.,1541019938.0
steeeeeef,Read your error. The port you want to use is already being used by something. ,1541019941.0
Jamiemufu,"I would really try and learn what each things does rather than copy and paste and change certain things. Not saying you have done this but the error is quite obvious if you understood the foundational parts of what the code you wrote. 

We all have to start somewhere but really try and learn what things actually do and mean. ",1541027220.0
Zeppelin2,"> Why I get this error

Because you no read",1541028250.0
commander-obvious,"```
app.listen('3000', () => {
  console.log('Server started on port 3000');
});
```

Plus

```
Error: listen EADDRINUSE :::3000
```

You probably already have an instance of your app running.",1541062343.0
kranker,"Why are you using a password instead of the mnemonic?  

It would be more usual to just randomly generate the mnemonic and use that.  ",1541009424.0
paul_42__,"I'm not an expert but this sounds like a good job for AWS lambda or Azure Functions, or Google cloud functions - if there is not a lot of expensive CPU computation, it sounds like a good fit. I know slightly more about aws, so my analogies will lean that way.

&#x200B;

one thing you can do is create a queue, using aws SQS and have your control system put messages into it with a payload, and a lambda function can be tied to the queue to do some work when a message comes in - lambda does have some limits though, you can't go over 5 minutes per request (at least I think that's still a limit) and depending on what you're doing the amount of memory used features into the cost - the free tier is pretty nice though, 1 million requests and I think 400k GB-Minutes (their way of measuring memory used) - so I think using streams and keeping things low memory would be advantageous.

&#x200B;

[https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)

&#x200B;

and it lets you write code in most languages (including node) give it a look, or Azure Functions, or Google Cloud functions. and then you can call yourself a cloud solutions architect and pat yourself on the back.",1541008150.0
Wickity,"Seems like a serverless solution would work best for your back-end processing.  AWS Lambda/Google Cloud Functions is an easy win for wildly scaling simple tasks. 

Creating a Kubernetes cluster could give you a lot flexibility, but would require some management on its own.",1541015833.0
maxwellsmart84,"So look into containerization and ECS, I know that's how we scale our servers but for the minutia you will have to refer to documentation.  You will most likely want to script all this with cloudformation as well since it's a TON of config and will be very difficult to maintain without it.  Good Luck! ",1541007469.0
teki-teki,"Check out hyper.sh, scaling there is easy.",1541008460.0
reprehenderitinvol,"One thing no one has mentioned that lines up with your current workflow is AWS SWF (Simple Workflow). It's not simple by any means, but the controller/worker scheme they use is aligned with your current setup so could be an easy switch. Maybe.",1541010416.0
Oalei,You could dockerize your service so that deploying it to a new vps takes a minute or two. ,1541017738.0
5t33,Batch job?,1541077270.0
hitman_99,One word: Kubernetes,1541015367.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/coderradio] [AWS Lamba Programming Lang Comparison](https://www.reddit.com/r/CoderRadio/comments/9t4nc6/aws_lamba_programming_lang_comparison/)

- [/r/programming] [AWS Lambda Programming Language Comparison • r\/node](https://www.reddit.com/r/programming/comments/9sy73r/aws_lambda_programming_language_comparison_rnode/)

- [/r/python] [AWS Lambda Programming Language Comparison • r\/node](https://www.reddit.com/r/Python/comments/9t3yjp/aws_lambda_programming_language_comparison_rnode/)

- [/r/serverless] [AWS Lambda Programming Language Comparison • r\/node](https://www.reddit.com/r/serverless/comments/9sy71k/aws_lambda_programming_language_comparison_rnode/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1541027258.0
yetigolfer,"Well written article but my mileage is very different as we recently transitioned from Node to dotnet core 2.1. I saw significant run time improvement across all functions on the order of 10x faster. Functionality was 1:1 as I wrote a large chunk of both versions of the pipeline. 

I would agree that cold starts are longer with C# than with node but I wouldn’t agree that the cold start with Node was good enough so put a user requesting an endpoint through it. Best case there is to use caching and API gateway as well as keeping them warm if needed. 

Nice article though ",1541027273.0
ISBJ0RN,"Setting context body doesn’t automatically resolve the promise, so you’re setting your response but then just continuing to execute the rest of the function regardless, you need to add a return statement.",1540970054.0
penguingspe,"Remove that typescript garbage, or send me your address so I can launch a drone strike.",1540965123.0
wing328,"Thanks for creating the wrapper to make it easier for JS developers to use OpenAPI Generator.

For those who are not familiar with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator), it's a free, open-source project to generate API clients, server stubs, documentation and more given an OpenAPI spec (v2, v3). Currently, the following languages/frameworks are supports:

&#x200B;

**API clients: ActionScript**, **Ada**, **Apex**, **Bash**, **C#** (.net 2.0, 3.5 or later), **C++** (cpprest, Qt5, Tizen), **Clojure**, **Dart (1.x, 2.x)**, **Elixir**, **Elm**, **Eiffel**, **Erlang**, **Go**, **Groovy**, **Haskell** (http-client, Servant), **Java** (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate, RESTEasy, Vertx, Google API Client Library for Java, Rest-assured, Spring 5 Web Client), **Kotlin**, **Lua**, **Node.js** (ES5, ES6, AngularJS with Google Closure Compiler annotations, Flow types) **Objective-C**, **Perl**, **PHP**, **PowerShell**, **Python**, **R**, **Ruby**, **Rust** (rust, rust-server), **Scala** (akka, http4s, scalaz, swagger-async-httpclient), **Swift** (2.x, 3.x, 4.x), **Typescript** (AngularJS, Angular (2.x - 7.x), Aurelia, Axios, Fetch, Inversify, jQuery, Node)

&#x200B;

**Server stubs: Ada**, **C#** (ASP.NET Core, NancyFx), **C++** (Pistache, Restbed), **Erlang**, **Go** (net/http, Gin), **Haskell**(Servant), **Java** (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, RestEasy, Play Framework, [PKMST](https://github.com/ProKarma-Inc/pkmst-getting-started-examples)), **Kotlin** (Spring Boot), **PHP** (Laravel, Lumen, Slim, Silex, [Symfony](https://symfony.com/), [Zend Expressive](https://github.com/zendframework/zend-expressive)), **Python** (Flask), **NodeJS**, **Ruby** (Sinatra, Rails5), **Rust** (rust-server), **Scala** ([Finch](https://github.com/finagle/finch), [Lagom](https://github.com/lagom/lagom), Scalatra)

&#x200B;

&#x200B;",1540958735.0
restless11,"Checkout socket.io

They have lots of documentation and there’s 1000’s of tutorials available on the net. It’s exactly what you need for a real time messaging service.",1540970631.0
gajus0,"I have been developing Slonik for several years and it is in use across multiple personal and client projects. Slonik is built on-top of the brilliant [`pg`](https://github.com/brianc/node-postgres).

I have developed Slonik with the primary intention of enabling minimal API and easy debugging. The convenience methods (such as `one`, `oneFirst`, etc) limit the amount of checks you need to write in your code.

    // Safe to assume that `userId` is the ID of the user (or error will be thrown).
    const userId = await connection.oneFirst(sql`SELECT id FROM user WHERE username = ${username}`);

Since Slonik release, [`pg-promise`](https://github.com/vitaly-t/pg-promise) have added many of the convenience methods equivalent to the methods in the original Slonik release. However, Slonik still have unique features that make development and debugging easier, e.g.

You can include resolved stack traces in the logs (https://github.com/gajus/slonik#log-stack-trace).

    {
      ""context"": {
        ""executionTime"": ""357 ms"",
        ""logLevel"": 20,
        ""namespace"": ""slonik"",
        ""package"": ""slonik"",
        ""queryId"": ""01CV2V5S4H57KCYFFBS0BJ8K7E"",
        ""rowCount"": 1,
        ""sql"": ""SELECT schedule_cinema_data_task();"",
        ""stackTrace"": [
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist:162:28"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist:314:12"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist:361:20"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist/utilities:17:13"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/src/bin/commands/do-cinema-data-tasks.js:59:21"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/src/bin/commands/do-cinema-data-tasks.js:590:45"",
          ""internal/process/next_tick.js:68:7""
        ],
        ""values"": [
        ]
      },
      ""message"": ""query"",
      ""sequence"": 4,
      ""time"": 1540915127833,
      ""version"": ""1.0.0""
    }
    {
      ""context"": {
        ""executionTime"": ""66 ms"",
        ""logLevel"": 20,
        ""namespace"": ""slonik"",
        ""package"": ""slonik"",
        ""queryId"": ""01CV2V5SGS0WHJX4GJN09Z3MTB"",
        ""rowCount"": 1,
        ""sql"": ""SELECT cinema_id \""cinemaId\"", target_data \""targetData\"" FROM cinema_data_task WHERE id = ?"",
        ""stackTrace"": [
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist:162:28"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist:285:12"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/node_modules/slonik/dist/utilities:17:13"",
          ""/Users/gajus/Documents/dev/applaudience/data-management-program/src/bin/commands/do-cinema-data-tasks.js:603:26"",
          ""internal/process/next_tick.js:68:7""
        ],
        ""values"": [
          17953947
        ]
      },
      ""message"": ""query"",
      ""sequence"": 5,
      ""time"": 1540915127902,
      ""version"": ""1.0.0""
    }

The stack traces are resolved prior to running the query. This ensures that your stack trace is not cut off at `process.nextTick`. (Due to its overhead, this feature is designed to be used in development-only.)

All logs are produced using Roarr. Meaning you can filter/ pretty-print the logs using https://github.com/gajus/roarr-cli.

I would like to get feedback from people using PostgreSQL in Node.js.

Thank you",1540920811.0
username_is_taken43,Do you have transaction support?,1540939779.0
NoInkling,"One thing I'd like to see in these libraries is a guard against this issue (without needing a linter):

> When using tagged template literals, it is easy to forget to add the `sql` tag

You could just make it so your query functions don't support (bare) strings.",1540948260.0
RushPL,"Quick idea - does PG allow cancellation of long running queries? If you use rxjs/observables, it would make it super easy to make the queries cancellable, streamable etc.",1540950827.0
davbeer,Have you any plans to support typescript types too?,1540970575.0
kyle787,Have you looked at nest? I have been really getting into it lately and love it. It also has some great testing options including good e2e testing with super test. It also has decorators for route protection which lets you cut down on duplicate code. You could separate the majority of the logic into services and test them with jest and then test the actual endpoints with super test ,1540944873.0
kyle787,They probably have an RSS feed that you could pull data from. It would probably be way easier to parse. ,1540946740.0
indatawetrust,demo: https://pictureddit.com/webrtc,1540916524.0
NathanSMB,"Constructors aren't async so you can't await them. You would need to call init within an async function and await it there.

Here is how it would work in this example

&#x200B;

CommandBus

    export default class CommandBus {
      private static instance: CommandBus;
      private channel: any;
      private conn: Connection;
    
      private async init() {
        //Create connection to rabbitmq
        console.log(""Starting connection to rabbit."");
        this.conn = await connect({
          protocol: ""amqp"",
          hostname: settings.RabbitIP,
          port: settings.RabbitPort,
          username: settings.RabbitUser,
          password: settings.RabbitPwd,
          vhost: ""/""
        });
    
        console.log(""connecting channel."");
        this.channel = await this.conn.createChannel();
      }
    
      static async GetInstance(): Promise<CommandBus> {
        if (!this.instance) {
          this.instance = await new CommandBus();
          await this.instance.init();
        }
    
        return this.instance;
      }
      public async AddConsumer(queue: Queues) {
        await this.channel.assertQueue(queue);
        this.channel.consume(queue, msg => {
          this.Handle(msg, queue);
        });
      }
    }

&#x200B;",1540909362.0
78979087908789707897,"This looks fishy to me.

`return await CommandBus.instance;`",1540907239.0
TomEnom,"Does this certain have support for just imports?

I think imports, and finding something that bridges node and js imports, is going to be a big issue.",1540912041.0
phnglui_mglwnafh,I wonder if this means that AWS Lambda has plans to support Node 10.13.x,1540923489.0
freebit,Was V8 updated with this release? When was the last time we had a V8 update?,1540925580.0
brown59fifty,"There's no way that you could handle such a big files without any stress - especially talking regexp (which performance on that files will be so bad). Even with the simplest patterns, that's a no-go for that problem, no matter where you want to do the job (even that logs are great for compress, you have to use lot of cpu/memory to do that, and sending raw big files to other place ""on request"" are bad as well imo).

Purpose of typical text logs are to being ""just in case"", to look through it manually if something goes wrong (because it's fairly easy to preview content of text files without need of loading them all at once). Of course if you know how fast the files grow or that you need to analyse eg. last 2k bytes, you can seek for that portion of content.

However, if you need to constantly (or even regularly) do something with it you have to change perspective and not use files at all. Or at least treat it right. And remember, that I/O here is also expensive. I strongly recommend to use some database, you mentioned having Postgres and that can be a good way to go. If you save only important data to filter, every ""monitor operation"" will be easy, fast and fairly cheap talking cpu usage. If I understood correctly, the logs are not made by you and because of that two solutions come to my mind quickly. One is that you can make a files watcher; if file size increase then read only added bytes, parse and save to db - you can also make some conditions/hooks here to trigger additional jobs (if there's a need for it). Second, probably better in your client-server scenario, a bit modified first - on every request you read and parse only bytes added from the time of last request. Of course still the key is to save parsed data to db for future easy analyse, because that's what you want to do after files will be parsed.

But if you know, that the logs won't be analysed through the time but only when they are big, you probably won't have any other option than to read the file at once - so maybe a good idea will be to delay the process using streams and setInterval to lighten cpu usage in the time of running the code.",1541161660.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/webdev] [Generate Stripe Coupons via Slack Commands using Node.js and Code on Standard Library](https://www.reddit.com/r/webdev/comments/9slj6u/generate_stripe_coupons_via_slack_commands_using/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1540882809.0
mod-victim,"No thanks, I support free speech.",1540886342.0
whatisboom,"Personally I’d go with

    exports.default = MyCustomClass

Or use ES6 modules 

    export default class MyCustomClass {}

Although that might be limited to certain node versions/typescript",1540880638.0
SlightlyOTT,"If it's a daily email then a cron job is probably the way to go. I'm only really familiar with Mandrill but they let you schedule when an email is sent, so an alternative would be to have one cron a day that sends everyone's emails to your email sending API scheduled to send at the time they requested. That might be a bit more reliable/simple if whoever you're using offers the same functionality. Here's their docs as an example: https://mandrill.zendesk.com/hc/en-us/articles/205582667-Can-I-schedule-a-message-to-send-at-a-specific-time-",1540883039.0
kstubblefield1,"Take the http:// out and just leave a single /. The route defined in app.get() is just the path after the hostname.

It should look like:
    app.get('/name/:summoner');",1540875704.0
ccleary00,"I've written a couple posts on testing and am going to be writing a lot more.

If you're looking for a general overview of unit testing in JavaScript, you can check out this [""Explain it like I'm 5"" post](https://www.coreycleary.me/explain-javascript-unit-testing-like-im-five/)

Something I struggled with a lot when I was first starting to learn how to write tests was not only how to get the tests up and running, but also *what exactly* I should be testing. I.e. what scenarios, what to account for, etc.  I tried to answer that for a common programming task, testing a Node service that calls a database, [here](https://www.coreycleary.me/know-what-to-test-using-these-recipes-node-service-that-calls-a-database/)

Hope those help",1540950513.0
syntheticproduct,Have you tried Udemy?,1540871567.0
kkradical,"We use a clean database at the start of the tests and then truncate every table in between test files (""suites"") and then individual tests are kind of expected not to interfere with eachother, or sometimes we truncate in between every test for particularly pesky tests. We run between 1000-2000 of this style of test in approximately 2 mins, the truncation is definitely not the bulk of the time, regular application db calls take the bulk of the time for us.

Edit: unfortunately this means tests can't be run in parallel",1540877545.0
Thommasc,"That's the reason you should do 100% unit tests with full code coverage and only a few integration tests if you're not trusting the system.

Ideally, you would rely as much as possible on unit tests, build a few integration tests on the critical path of your app where you reset the DB to test data fixtures.

Otherwise, you won't be able to scale. Your test time will be counter productive if you need to wait 1/2/3h for integration tests to run. I've been there, done that.

Now I rely almost exclusively on unit tests.

As for micro services architecture, you can test some services locally like dynamodb. Not sure about a more complex architecture though.

&#x200B;

Then if you have tons of resources, you can spin up a test environment in the cloud and run tons of integrations tests in parallel.",1540893321.0
slimslimh,"I’m in the same spot right now, but since I’ve started my project I’ve build my own solution but I’m curious on how people are doing this.

We are a small startup doing social video networking, so I can’t compromise real people datas by doing some tests on the real database. So I figured this out. 

I’ve created another whole microservice, exactly the same with same services as the real one, same structure, but with fake people on it, same kind of data but they’re just a mock that I put in, where I deploy my test code and launch every single one of my unit tests. So test are doing update on the database as if it was some real actions happening. Tests are quick, results are returning fast and error are shown instantly, and I’ m not worried of compromising data quality or personals accounts. And results and potentials errors are real, as they actually happened in real.
I can crash or delete some stuff whenever I want, and other people can do their test too on this « dev » structure. 

Then when all my tests are successful, I just have to push the exact same code that is working on « dev » structure to the actual real « prod » structure. And it will fit perfectly.

It’s not very long to setup cause you just copy paste everything, and setup one or two push scripts to do the push quickly.

My method might be totally wrong but it’s working for now, and I can’t find anyone talking about this topic on the internet",1540857455.0
zokker13,"Isolate each test but run in parallel. Jest will be your friend. Having coupled tests is usually a bad approach since you might not even know when a test is executed and when you change the name of the file, it might be executed faster and causing weird errors in your test.

When my integration tests is coupled with a 3rd party (like a microservice that does something and I integration test the client) I usually run against an environment that's not prod.

It would be a lot easier if you have container based solutions and could just launch your application with new infrastructure locally. ",1540879168.0
agoodguymostly,"1. You let the backend create the ID for you - POST /assignments is a good route, and the data will be available in req.body in express.  You can use uuid to create a uuid and then insert into whichever database you are using.

2.  Once you’ve inserted this object into the database, you can return its JSON to the frontend using res.status(200).json(returnObj); where returnObj is simply an object.  Many apis format the object as 

{ success: true, data: [{ id: “123”, ...}] } or use the key “results” instead of data.  This allows you to add other metadata to the object, like pagination info or other topics or related information.  Also, note that its far easier always to return an array for data than to program the frontend to handle either an array or an object (though not hard, either way is a little work, but consistency is nice to have in an API).",1540855025.0
ipokefatguys,Use fetch api (whatwg-fetch or jquery Ajax). You need some sorry of express.js or other server to accept the requests. You’ll use POST to the url you specify in express and pass the body as JSON.stringify(Json data) and use body-parser on the back end,1541197644.0
imguralbumbot,"^(Hi, I'm a bot for linking direct images of albums with only 1 image)

**https://i.imgur.com/tlbhtwX.png**

^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&subject=ignoreme&message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&subject=delet%20this&message=delet%20this%20e8ohw18) ",1540840521.0
ivakamr,"Hey thanks, that look good ! I was wondering however if an angular alternative wouldn't be interesting especially for code sharing since both frameworks seems to heavily use the same concept, decorators and syntax.",1540829752.0
sucucho,"I wouldn’t say the certifications are useless, for someone with certain experience in infrastructure (at least 8 or 10 years) most of the cloud is “obvious” and certifications seems like not of big use, but for more new people or even people not close enough to infrastructure, they provide a great insight. ",1540846650.0
chrisfu,Useless certs? Could you expand a little on why you believe AWS certifications have no use?,1540841327.0
Nowaker,"> I was the 8th employee, so I figured my equity would probably be a pretty good start when the company blew up, too. Turns out it wasn’t - we were acquired 11 days before my vesting period. So it goes.

What!? No single trigger acceleration for acquisition? They screwed you bad.",1540909837.0
bch8,"What is this ""Orchestrator"" button you speak of in AWS? Is that a reference to ECS or Fargate? I'm not familiar with it. Do these orchestrators intelligently scale specific services based on demand to wherever you have server space? I'm just trying to wrap my mind around how this is more beneficial than just having microservices in their own autoscaling groups with a small server size.  ",1540837253.0
rq60,"I _am_ interested in improving my devops chops, but this post, your website, and everything else related to this “course” comes across as some timeshare presentation intent to just collect and spam email addresses.  I’ll pass.",1540881495.0
core_dumpd,"If it's just that easy, then why did you bother with the useless computer science degree?",1540872553.0
AManIsBusy,Good stuff man. I'm subscribed.,1540941040.0
limefest,"You shouldn't be rolling back for every update. You usually only roll back if you need to revert a change.

Generally, create a new migration file for each database change. 

If you do want to also populate data in tables, perhaps with each deploy, you can use seed files. Create that with `knex  seed:make` and run it with `knex seed:run`.",1540830410.0
fl0w_io,"Generally, a new migration for each patch/PR/branch that requires changes to a production database.

So, if you have a patch PR that just updates a column name, one migration file. If you have a major release that changes the structure of many tables, one migration (coupled with your code). In the end, consider a migration sort of a history of your database changes.",1540823421.0
GooberMcNutly,"The knex migration table tracks which migrations have already been run, so migrate:latest will only add any that have not run yet.

",1540837125.0
SqlInj3ction,"You should stop running `knex migrate: rollback` first. What this is doing is reverting any migration which you made last time you ran `knex migrate: latest`. When it is reverting a migration it should be deleting the table which is then removing all the data in them. If you simply do `knex migrate:latest` first it will run the new migrations which haven’t been applied yet and then you can run `knex migrate:rollback` to undo those latest migrations. This is good practice to make sure that your migration can be rolled back. Then just do a `knex migrate:latest` to put the migrations back on for use. Basically, since you’re first rolling back you migrations it is blowing away all the tables in your database which is also getting rid of the data.",1540842612.0
UtterlyPreposterous,"If you're still building the structure of your database and you still haven't deployed it in production it's OK to keep rolling back and migrating again. The main reason for having separate migration files is to make incremental updates to your database once in production. But you don't need to keep everything in one file per se, as you can import the migrations from other modules. Here is an article that explains this approach very well: https://medium.com/@j3y/beyond-basic-knex-js-database-migrations-22263b0fcd7c",1540844882.0
MrWasdennnoch,"If you set a field to null inside a $set it will actually be set to null in the db. In your code you are setting all fields from the request body, and if they are null in the body they will be set to null in the db. $set doesn't mean that null values in the db query are ignored, it means that fields that are not in the query are not touched in the db but *all* fields that *are* specified in the query are set to the value in the query, including null.

The $set operator only touches the fields specified in the update and leaves others as they are, without $set the entire object would be overridden with the new object. In your case the db contains the same fields that you are setting from the request so you don't notice it immediately.

Example, if your db contains the fields

    a: 1
    b: 2
    c: 3

Now if you $set { a: null, b: 4 } the db will contain:

    a: null
    b: 4
    c: 3

For comparison, if you only update the document with { a: null, b: 2 } without using $set:

    a: null
    b: 2

The solution for your issue would be to only add those fields to the $set query that are actually included in the request body.",1540823414.0
bindik,"Its best to store both, for features in future? Well, socket.io > or some get request will both work fine, if you are already using socket.io then go for socket.io. I dont know what database are you using but i would use mysql, lets say 2 tables post, likes.
likes - (id, user) post - (id, *likes_count*, message...)

You can store both count and likes if u want to save one ms of query time. Best thing would be select count(*) from likes where id = postid => you have likes count, or you can just query specific data and use .length in js, or query both? ",1540812935.0
megaphoneCA,Include them in an html file?,1540810984.0
BehindTheMath,"You can do #3 without eval. Since it's a JS file, require will be enough to run it.

Or you can check if the package is on npm. ",1540811268.0
jad3d,I think you're looking for npm install.,1540813257.0
whatisboom,"What you’re referring to is called Test Driven Development (TDD) and yes, you should write other tests. According to TDD you shouldn’t write any code that isn’t to pass a failing test. So you have your use cases and acceptance criteria, you write tests around them, and then write the code to make the tests pass. ",1540822593.0
wherediditrun,"Write tests to encapsulate behavior. In essence parameterize the area what your piece of code expects and what it returns without going to specific details how internals work. You can do that too, but value of it actually doubtful and at some instances can be actually counter productive as it introduces britleness to your code, that is to say, each time you refactor something, you will also need to refactor in your tests. That should not be a reality.

Unlike some people think tests are not there to make sure your code works in correct manner. The scope is actually way wider. It's there to give you confidence. And while it sounds silly, it's crucial for any kind of dynamic environment, when changes happen or when you have to refactor something. Refactoring without tests is very very scary task.

Another crucial point, and I can't stress this enough, do not test just for desired outcome. Write tests to ensure that your code does not do something it's not supposed to do too. Ignore this, and you might end up with very very painful lesson.",1540830993.0
wholesomedumbass,You may want to look up WebAssembly. I never done any wasm stuff but it may be of interest to you.,1540792605.0
VanGoFuckYourself,"Sockets will introduce quite a bit of latency for each function call compared to a native addon. Also, from what I've seen the add-ons are not too difficult, assuming you already know C++",1540805147.0
MWrathDev,"> I need recommendations moving forward. Should I use addons to use it? Or should I have them communicate via sockets?

Whatever requires the least amount of network traffic i.e. not sockets.",1540806931.0
commiesupremacy,"Ignore the other mongers here, I'm thinking of doing the same thing. C++ add-on is the way to go, and if you want to make it easier it might be good to compile your physics part as a shared library and work on it independently of the node part and join it up later.

Assuming you're hooking the physics up to an API over http or web sockets, you can then focus on this part after you're done testing the shared library interface with a local gui",1540841992.0
oorza,"I would recommend writing the whole game in a language better suited to game development, probably Rust.  If you know C++ already, Rust will likely be as easy or easier than Node to write once you crest the learning curve.  If you don't, it will be easier to learn and get right.

Node's entire memory model is terrible for a game.  It has a slow, stop the world GC that can't give you collection time guarantees, and even if it could, they'd be on the order of 100s of ms instead of 1s of ms.  If your game needs a physics engine, any time you save by writing in Node will be lost fighting Node itself to maintain frame rate.",1540830486.0
virtulis,Speaking out of my ass (never made a Node addon but did try working with V8 directly) you may find that even communication with the addon is much slower than you expected. If that's an option I'd recommend to exchange events/changes in batches at say 30 pps and then you can even use a socket if that's easier for you.,1540824571.0
tjscollins,"In my experience, there are no good solutions for dealing with timezones. None.

So choose the least bad solution for your needs:

1. Do everyone at the same time every day.
2. Run a check every x minutes (I'd do it every hour, but some timezones are offset by 30 min. I think one is even offset by 15 minutes, but I might be imagining that).

Either way save your sanity by only using UTC on the server and translating to user timezones only when displaying to the user. ",1540791569.0
wookoouk,"I generally have separate routes for web interface and API. I take advantage of the express router for this:

```
//web interface route
router.route('/apps/new')
.all(isAuthenticated)
.get(apps.new)

//api route
router.route(['/api/send/:apiKey', '/api/send/:apiKey/:type'])
.all(isAPIAuthenticated)
.post(api.receive);
```

and just have two functions, isAuthenticated and isAPIAuthenticated that check for valid authentication.",1540810792.0
lonniebiz,"Version 10 should be LTS very soon. It isn't at the time of this typing, but you can see on the main page that version 11 has been released.",1540765532.0
TheRogueHogue,"When they don’t commit node_modules

Edit: I’m aware this doesn’t make a “good” node developer. It’s a joke.",1540754964.0
erulabs,"Aggressive input validation and error handling not because ""its the right way to code"" but because node is a single threaded process and if one users request crashes the app, every other user concurrently making a request also fails. Same goes for avoiding local state (ie: a good programmer accepts adding Redis to their codebase rather than some half-baked node LRU). In other words, striking the right balance between [YNGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it) and [YAGNI](http://wiki.c2.com/?YouAreGonnaNeedIt)",1540755452.0
jkoudys,"This is sort of 3 questions. What's a good dev, what's a good JavaScript dev, and what's a good server-side js dev. 

Devs start out writing very simple code, because it's all they know. They start to pick up a bunch of concepts, then feel like they need to include everything they can all the time, as though using new and flashy techniques alone is the same as writing good code. A lot of devs get stuck on that plateau for a while - some never get past it. Good devs write for clarity, and they always understand why they're writing what they're writing. They will know all the new syntax, libraries, etc. and use them when it improves their code quality. eg I spent yesterday unraveling a bunch of overly complex code that declared all collections as `Map`s, yet never used it for avoiding duplicate entries, and always accessed them like `[...someMap.values()]`. It's clear he had learned about Map and wanted to use it, but had no idea what it was for. A good dev would think in terms of architecture and paradigms first, then implement something appropriate for that. 

JavaScript devs spend much of their time dealing with events, and transforming sets of data. I think mastering the `Array.prototype` is a good, quick way to see if that dev knows their stuff. Managing events (whether via callbacks, promises, observables, whatever) and being able to clearly show what responds to which events, where, and why is critical. Obviously those aren't exclusive concepts to JS, but if someone's not doing much of either I'd question why they're on JS in the first place. 

For a node dev, the hill that a good JS dev needs to get over to be a good node dev is mostly sharing resources properly. Client-side cycles are cheap (most of the time), but once you hit the server you need to think about how your resources are updated. Each node instance is one thread on an event loop, so anything that can stop the world is way worse than on something like PHP or java. This comes into play at scale. Any student can toss an express server together and a few simple rest endpoints. You need a good dev to deploy this across dozens of instances, serve thousands of tps, manage cpu intensive operations like image rendering, etc. ",1540763001.0
Vpicone,When they know node isn’t always the best solution. ,1540759264.0
notkraftman,"Some of this isn't particularly node-specific, but oh well:

**Asynchronous handling:**

* They either use async / await correctly, or promise chains correctly.

**Logging:**

* They log everything at the appropriate levels. The code shouldnt be polluted with logging, but if something goes wrong I should have all the information I need in the logs to be able to recreate the issue. Usually the best way to achieve this is to treat the code as a black box and only log what goes in and comes out.

**Exception handling:**

* All exceptions should be handled, but at the level they can be dealt with (no pointless catch -> log -> re throw)
* Usage of custom errors that extend the base error class and add information as needed 

**Decoupling / business logic isolation:**

*  Functions and modules should do one thing, and do it well. No 100+ line functions, no 1000+ line modules.
*  Business logic should be isolated from data access. Mocks/stubs should be reserved for int/e2e testing not unit testing

**Code review:**

* They should be able to commit small chunks of code with high test coverage often
* They should be able to review code and consider both syntax and architectural issues
* They should be able to take (and want) criticism

",1540763293.0
NotMyGiraffeWatcher,When the have a good understanding of the event loop and why it's so powerful. ,1540757999.0
ep7i0CtZek,When they write readable code,1540760133.0
runvnc,"I would hope to see relatively few callbacks in newer code and more async await personally.

Also some of the things that make people good developers in general.  Readable code with descriptive identifiers and mostly shorter functions where possible.  A design that is sufficiently organized and decomposed.",1540760226.0
mistralol,"
What they stop talking about specific tech. This is because when your only tool is a hammer everything looks like a nail. ;)

",1540762781.0
ShoeThief101,when they become a node-it-all,1540764019.0
timgfx,"When they can write readable and functional code, and know how to scale node apps. ",1540767027.0
myope-uk,when they have 10 years experience /s,1540754954.0
UnappreciatedMeasure,When they are good JavaScript developers and have critical thing before adding new stuff to the project.,1540761065.0
bigorangemachine,"This is an unpopular comment I have made many times.

Node isn't that different from just JS. Outside of things that express is built on like listening to TCP ports. Being good at JS is important 

Also I think the one good sign is that they minimize the libraries they don't need (they can run npm scripts in parallel without npm run all), they use environment variables, they understand how to run npm commands without npm, setup their apps for the cloud and they can make sense of the rc files.",1540834052.0
fuzzylollipop,When they know not to use Node.,1540853742.0
De_Wouter,"A good developer is

\- a replacable developer because

\- he/she write clean code (=== readable)

\- they will give their honest opinion on things, whether you like it or not

\- they will make it happen, even after they have explained you in 3 different ways why it is a bad idea, they are not the business (they will use this against you if they turned out to be right for the rest of your cooperation)

\- they are not change resistant, but they won't jump frameworks without having done the math

\- they understand the business

\- they'll solve any programming problem you throw at them (it can take a lot of time and [a lot of Googling](https://i.imgur.com/KWiBfbZ.jpg), no whiteboard shit nonsense)",1541063140.0
hamburger_bun,"Does good node developer mean good backend person or does it mean someone who can comfortably contribute to a node project?

&#x200B;

&#x200B;",1540762456.0
whyNadorp,When they can type with their toes while levitating,1540788009.0
atulmy,"**Learning**

They consider MDN (https://developer.mozilla.org/en-US/docs/Web/JavaScript) as one of important source of learning resource and keep themselves updated with ever changing JavaScript.


**Coding**

They start new projects from scratch and avoid using any boilerplates. This way they have a clean slate and can leverage updated versions of packages which does not only bring better features but security fixes as well.

They keep their Node versions of their local and server environment updated to latest LTS.

Keep the code highly modular. Aren't influenced by their background in other programming languages and open to the JavaScript way of programming.


**Contributing**

They take time to contribute on open source projects. They believe in giving back to community because that's what make JavaScript and NodeJS so powerful.",1540803541.0
skeliskull,I don't care who's a good *node* developer. It's more important whether someone is a good developer in general. If they are then all it takes to be a good node developer is to understand a few common practices and know when to use node and when to not.,1540838689.0
,[deleted],1540785756.0
Lost_sand,When they start cuming to floating point numbers.,1540761868.0
jonyeezy7,When they can follow >5 nested callbacks,1540783509.0
Nautigsam,"I would normally recommend to keep all your specs (it) in the same file. It makes it clearer to see what you are testing. Also, be aware that the before function is executed only once, so your tests are dependent one of another. This is an important thing to avoid when writing tests.",1540764253.0
rwieruch,Maybe the testing chapter from [this GraphQL tutorial](https://www.robinwieruch.de/graphql-apollo-server-tutorial/) is useful for you: It uses E2E testing with a running test server and database.,1540770554.0
idropbows,RTFM,1540757544.0
whatisboom,"1) this is browser code, and you’re posting in the node (serverside) subreddit

2) you’re trying to get a value from a function that programmers like to call “void” meaning it doesn’t return a value... actually you’re assigning a string of what I assume should be a function call. 

3) if you told us what error you’re getting we might be able to help you 

4) the code you posted doesn’t really make much sense. Post what you’re actually using ",1540730263.0
JK33Y,"You're calling the function in quotes. Change `att.value = ""fun(x)"";` to `att.value = fun(x);`",1540730229.0
gnubyter,"Thanks medium broseph, I’ll remember that next time you use my framework and scream bloody murder that there’s no unit tests or whatever, because as long as it sucks less than the one before you’ll be happy, right?",1540743388.0
whyNadorp,"This is the node motto, much better than, “oh, this time we’re getting the ultimate solution to humanity problems in the form of a shit programming language on the jvm”.",1540738751.0
,solid advice for life really.,1540782115.0
sazzer,"Is it a traditional or SPA application?

If the second, I'd suggest:

* A (set of) API Services. This could be a single application or many in a Microservices setup
* A static SPA deployed as HTML, JavaScript and CSS. There needs be no server component here apart from something to serve static files
* Another static SPA deployed in the same way for the Admin panel.

Both SPAs make use of the same API services, but they are completely distinct UIs.",1540727132.0
crypto__derp,"If they both just consume the same API I'd have them split and share an API module that you create for doing so (and shared style/CSS for UX consistency). 

If you need/want to make drastic changes in the future you can easily rip out one side and start from the ground up. 

I suggest this just from following the idea of ""separation of concerns"". You could totally build it tightly coupled and it would work fine that way too.",1540725919.0
brtt3000,"For scalability I'd split the application. Could still be same project/repo if convenient but at least separately deployed. 

You'd want to make updates to admin without unnecessarily messing with the running main app. And at some point you might have more main app servers then you'd ever need for admin. 

Also in practice some admins in same app as user stuff screw with your performance stats and logs and things in annoying ways. ",1540731267.0
user59873,"Depends on your goal. You can get a reeeeaally long way sharing an application and just splitting the controllers. However, likely at some point the shared code base will stop working for you. You might need different user collections for your admin panel than for the actual users, and sharing those schemas stops making sense. You might want to do some automated work after a user's action that you don't do when a similar action is performed from the admin panel. You might want to trigger/process different events in different parts. Etc.

&#x200B;

The problem is, if you split the code base you probably want to split it into three: application, admin panel and a shared API/service/data access. And that's a bunch of work. If you're just starting out, and trying to shoot for speed, this will take longer and introduce complications. But if you know exactly what you're building and are making it for the long term, it might make sense to take the upfront hit. If you use a services pattern in the code base, you can get even further and reap some of the benefits of microservices, while technically maintaining one monolith.

&#x200B;

My general thought is go with the simplest solution (one application) and change only when maintaining two apps in one becomes too much work. If you you decide to go with separate apps, I'd strongly encourage considering separate databases as well, even if only for some models",1540745595.0
gieter,Thanks mate. Looks interesting to try out. ,1540710927.0
Lost_sand,Floating point.  So dœpe.......,1540722516.0
Lost_sand,You do know that decimals are imaginary bullshįt roight?,1540722556.0
bassochette,I'd fancy to see some code ,1540916668.0
jkoudys,"Wow you work fast. I just finished reading about hooks last night, and there's already a lib with a whole suite of hooks I can include? Awesome!",1540686439.0
iends,"You have two real options: node-kafka and node-rdkafka.

Both are basically maintained by one dude each. node-kafka is written in JS and might be easier for you to understand, but it lags behind the full feature set of kafka. node-rdkafka is a binding around the C library so it has features much more quickly, but it adds build complexity to deploying your application. Both libraries are probably going to require you to dive in and get your hands dirty to fix issues. I've had to submit PRs to both libraries to fix small issues or in node-rdkafka case, build issues on OS X.",1540674741.0
elturcoinla,"Use node-rdkafka for sure. If you are not using the native java drivers, always look for something wrapping the amazing [librdkafka](https://github.com/edenhill/librdkafka).

node-rdkafka: [https://www.npmjs.com/package/node-rdkafka](https://www.npmjs.com/package/node-rdkafka)",1540681168.0
vuzavuza,"Used rdkafka in an""enterprise"" project and have been happy with lib, support and the community.",1540690079.0
sam6777,"I use no-kafka package in an enterprise level application and i dint have any problems with it so far and very good support. 

https://www.npmjs.com/package/no-kafka",1540694068.0
Neat-Neat-Neat,"I have used this for a fairly big project and it has not caused us any problems so far:

https://www.npmjs.com/package/kafka-node

Actively maintained and ~45K weekly downloads.",1540798768.0
irspaul,Thank you all for the suggestions.,1540835909.0
muddy_b,"Try using

path.resolve('public')

Instead of

path.join(__dirname, 'public')

also change the imports on the html to be

\css\mystyle.css and \customjs\asset.js",1540650307.0
_rishabhmishra,For api testing you dont need to run server if you have supertest,1540651886.0
forsubbingonly,"For the global setup file the solution I found was to write a hook file in es5 that imports your es6 global setup file. Same thing for the global teardown file. Works pretty good even if it is hacky.



Additionally you can import the app portion of your server into your test and pass that to super test to do your integration testing without needing the global setup at all. That should result in one instance of your app existing and being used for all tests.",1540656661.0
beefyjon,">but jest won't transpile ES6 code.

??? I can use ES6 syntax with Jest just fine, also Jest isn't a transpiler...please can you describe in more detail what steps you are taking to write integration tests for your application?",1540649553.0
jimlei,As an alternative you could deploy using Docker and have a Docker compose file that sets up one container for your app and one container for the tor proxy,1540641071.0
ecares,Bundle everything in a docker image and distribute that instead.,1540641101.0
brtt3000,"Nodejs 11 been out for a few days and isn't a LTS version, what in depth tutorials do you expect?",1540637727.0
rotharius,"You are not giving enough information. How much IO is the application going to do? What is the domain about; are there many contexts to explore? Do you care about immediate consistent writes? Do writes have to be lossless?

Note that CQRS can be done without event sourcing. And note that there are simpler solutions than Kafka (NATS Streaming, Redis streams).

Furthermore; do you really know you are going to reach this amount of traffic? In general, it is a good idea to first make it work and optimize it afterwards.",1540640503.0
AlexanderHorl,"I’ve recently read an article on how to archive 600k+ concurrent websocket conmections with node. 

https://blog.jayway.com/2015/04/13/600k-concurrent-websocket-connections-on-aws-using-node-js/

I guess you don’t have to tweak a lot since node should handle 100k+ fine out of the box already, given your sever speced accordingly and even there I guess you don’t have to have one that breaks the bank. The guy in the article archived 600k+ with a small - medium sized EC2 Server for $70/month. After all it depends on your type of requests though. ",1540645496.0
zwarag,"The thing here is that you are targeting for 100k concurrent connections and at the same time asking on reddit what libraries would be best for one part of your service. 100k http reqs are different than 100k websockets reqs. 100k requests that might hit a DB are a completely different beast.

If you do this for a personal fun and learning experience, just tackle one goal after the other.

If you really want to do microservices, then tackle one goal per project (backend, frontend, caches, monitoring,...) and then learn how to bind them together in kubenetes.

If you are in a professional environment. Ask your boss to pay for a training or maybe he may allow you to invest some of your work time into learning this stuff.

And libraries do not matter that much. Just choose whatever you are most familiar with. In the microservice world, you can just swap a service for a new one when needed or when new know-how is won. So I advise you to not use new libraries at first. You'll have more fun and develop your skills better by adapting your current knowledge to microservices and then learn to write code that is ""optimized"" for microservices (maybe even with libraries that enable you to write better code for such paradigm).",1540637347.0
servermeta_net,"what I do, to hit 100k concurrent on commodity, very cheap hardware:

\- Custom written C++ server, built on top of proxygen. Remember to use concurrent scheduling, non-blocking IO, connection pooling, yada yada yada...

\- Use HTTP/2, it scales much much better.

\- Heavy caching, using redis. Most of the requests should go from proxygen to redis, without touching node

\- Further improve the caching mechanism using service workers, if possible.

\- Drop Node HTTP/2 altogether. Node should just be used to generate the content, and content should be passed using unix sockets, which are much faster that TCP/IP on node.

\- Each server has 1 or 2 instances of proxygen, 1 or 2 instances of redis, and multiple instances of node.

\- cluster everything using docker and cloud orchestration, in a fault tolerant configuration

&#x200B;

I've been playing with this architecture for a year now, and I can say it's really performing. You can buy several cheap servers, cluster them together, and hit 1M concurrent for less than 150 euros a month.",1540641066.0
iends,"Websockets?

I would use Go or Elixir for that kind of scale. 

In the day job I work on a 20k - 40k concurrent WebSocket applications and the Node ecosystem isn’t that strong when dealing with long running connections. We’have had a lot of issues tracking down memory leaks and optimizing for performance compared to something like Go where those things are built in and well documented. ",1540647726.0
vhackish,"What role is node playing here?  Are you creating microservices each of which will be a node instance with a Rest interface? Is there a front end web server like nginx somewhere, or a load balancer? How is the routing to the different microservices done? Lots of ways to put this all together! ",1540642312.0
fuzzylollipop,Erlang,1540853820.0
skeliskull,Node.js isn't concurrent.,1540667023.0
ipullstuffapart,"I'm not 100% certain with the mysql library, as I use MSSQL at work, but they generally have a getter that you can call to see if the connection is alive.

I set up an abstraction layer between my application and the library which has both the connection to the primary, and another connection to the secondary. If the connection dies to the primary, it returns the connection to the secondary instead.

tl;dr, make two connections, and select which one to used based on checking if the connection is alive.

As an added bonus, consider falling back once again to a cache.

Also, stop using IP addresses - use hostnames instead.

**Edit: just looked at the docs for the mysql library, take a look at [Pool Cluster](https://github.com/mysqljs/mysql#poolcluster)**",1540636189.0
to_wit_to_who,"I use TypeORM, which supports multiple connections.  
  
Mind you, I haven't used MySQL in quite a while, but for PostgreSQL there are projects like pgBouncer to setup connection pooling. I'm sure there's probably something similar for MySQL.  
  
Just depends at which level(s) in the stack you want to do it.",1540662177.0
ndboost,Can also use a hostname based TCP load balancer like F5.,1540692941.0
ellisgl,"Not node.js related, but I've used HAProxy w/ Galera.",1540772113.0
cocorote-pedro,"On the element you show the text, set `white-space: pre-wrap` at its CSS and see if that works. 

The line breaks should be kept even after it goes to DB.",1540622906.0
Jumballaya,"[I made a simple example on codepen](https://codepen.io/Jumballaya/pen/pxYNjx)

&#x200B;

When you grab the text from a textarea you will get everything inside, including the tabs, spaces, and pretty much any other unicode characters. As u/cyrriox said you should safely encode your input before it goes into the database. In my example I have some encoded text to seed the 'database' that I am using (just an object in a closure that pushes to/returns an array of strings), the sample text is the output of the encodeURIComponent function with some 'hello world' code. As you can see it will encode the unsafe characters, including newlines, into safe characters. Newline becomes '%0A' and ';' becomes '%3B' (this is more for safety as you don't want to store something like `; DROP TABLE users;` raw)

&#x200B;

For the printing it out part: It depends, do you want to print it to a <pre> tag? Or do you want to print it to other elements like a p, blockquote, h1, etc.? If so you are going to want to do as u/cocorote-pedro said and set that elements white-space to pre(-wrap/-line) and then you can add a textnode to the element and fill it with your formatted text (after you run it through decodeURIComponent, if you uri-encoded it). This setting will force it to use the \\n, \\t, etc in your text. [Here is more on the white-space CSS property.](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)

&#x200B;

I am not really familiar with EJS, but I know most templating languages (that I have used) allow for a 'raw' output (it won't scrub out HTML elements or stuff like newlines, tabs, etc.) that you can just dump straight into text.

&#x200B;

Hopefully this helps you see the underlying mechanisms of how to save/encode/retrieve/decode text while keeping the correct formatting.",1540661762.0
cyrriox,"What about converting all new lines ""\n"" to ""<br/>"", then using encodeURIComponent() before saving to your DB?

For rendering you'll just need to use decodeURIComponent() ",1540629807.0
bschupbach,Find an open source WYSIWYG editor that you can embed into your app.  Users will have more formatting options and the html that produces the styling can be saved and retrieved in a varchar database column.,1540642020.0
jonno11,"Ultimately, it comes down to whether or not you want to roll your own authentication and user management; or whether you’re happy to pay a third-party to handle it. They both have their merits but I would suggest evaluating both within the context of your application. ",1540626794.0
thebisquickman,"Well, if you’re already using express, people should be able to access the app at <your local ip >:<port>. No one outside the network would be able to access it unless the router had a port forward to it. People vpn’d should have access as well.

For the domain bit, you’d have to have a local dns setup to map to your ip.",1540619424.0
MCShoveled,You can still cloud host and use a VPN so that only your local network can access the site. ,1540651832.0
nodejsdev,"You shouldn't need to use the IP or a domain, just use the hostname of the machine hosting the Node/Express app.  (e.g. [http://expressapp1/](http://expressapp1/) or if you are using a different port [http://expressapp1:3000/](http://expressapp1:3000/))  This should work as long as the machine hosting the Node/Express app is on the same network as the computers accessing the app.",1540620612.0
shakefu,"Does your company have infrastructure? Internal hosting? If so, go ask those guys because how to do it will be specific to your network. Likely it will be hosted in a place that’s only accessible in the company VPN. 

If you don’t have that, why is there a strict no cloud policy? What are you doing that you wouldn’t have internal services but no cloud?

Anyway you could also buy a micro PC, plug it in, assign it a dynDNS name, and head off to the races. 

But something doesn’t add up here. ",1540621013.0
fo0,Ngrok ? [https://ngrok.com/](https://ngrok.com/) ,1540648770.0
umib0zu,If you set up your server in a docker image you should be able to just hand it over to your local AWS wizard and they should be able to stand it up for you on the pre-existing network. Dev-Ops is starting to be their job because of security concerns so if they're worth their salt it should be a non-issue.,1540616004.0
commander-obvious,"Classes are a tool which help you structure and organize data in large applications. When you need them, use them. If you find a simple way to build your program without introducing a bunch of classes, then that's probably a better way to do it. Premature abstraction and generalization can easily become a code smell. Eventually you will get used to factoring code and organizing it while you write it.",1541063650.0
tdot456,"Someone did recommend I browse opensource projects so I have been doing that, but am having a little trouble understanding the full structure because they're usually so large. ",1540611064.0
ewouldblock,Dont forget node-config https://github.com/lorenwest/node-config,1540600294.0
johnnybouder,"I've been looking for something like this actually, thank you for sharing",1540643701.0
awesomeevan,"Why do people not just pass errors to the ""next"" function. More tutorials need to show that.",1540598976.0
raccoonranger73,"Been using this pattern for a while now and it works great. It makes the routes more readable too, without the clutter of controller logic",1540589325.0
notlupus,"Do Node developers not normally do this? Sorry, I’m just kind of dipping my toe into Node. I do a lot of Java, Python, and Go. This is a pretty standard pattern called N-Tier Architecture.",1540601840.0
sanwfa,Do checkout the Wes bos node course for the error handler wrapper for async wait functions. ,1540605752.0
Oalei,"People who write their business logic in the same file as the entry point of the application don’t know how to code. This « tutorial » shouldn’t be needed, except for beginners who barely started development... ",1540596727.0
cgijoe_jhuckaby,"I'd be careful giving out your personal API Key.  It's hard-coded in your cli.js script:

    &APPID=a40636258ec257059436a5ac207bc5ac

If everyone uses this same API key, your limits will quickly be exceeded and they'll disable the key.

I would recommend removing this from the code, and instead allow each user to create their own at https://openweathermap.org/api, then read some sort of environment variable, so they don't have to specify it every time.
",1540597249.0
smurfx80,Nice! What software do you use to record you typing? Like the SVG image you added to the Readme file?,1540628097.0
superAL1394,Why is the preview a psychedelic cat in a crash helmet?,1540596561.0
kranker,`updateMany` is for making the same update to multiple documents.  You want `bulkWrite`.,1540578517.0
_imjosh,"Please read this as me thinking out loud, not me yelling at you. I may be completely wrong. 

This seems like an anti-pattern. If your node app can’t connect to mongo, it doesn’t mean your app container is unhealthy. It most likely means there’s a network problem or your mongo container/service is unhealthy. 

If the app container can’t connect to mongo, how often is restarting the app container going to fix the issue?

If mongo is down therefore causing your app healthcheck to fail, your app container will go down and be unable to respond to any any request - not even with an error or “try again later” response.  I’m not sure about MQTT, but for an API, I’d much rather have a quick failure response than having to wait for a connection timeout. 

I guess the problem is that we don’t know if the issue is w the container or mongo, but it seems way more likely that it’s a mongo problem. 

For mongo specifically, there are events you can listen to for db failures. By listening on those events you could implement retry logic and thresholds in your application code (or even do something like an out-of-band check to try to determine if mongo is actually down vs the app has a problem) before calling process.exit to kill the container vs using the app healthcheck to do it. 

",1540600656.0
jchild3rs,Try “npm ci” to force it to use your lock file. https://docs.npmjs.com/cli/ci,1540564563.0
Charles_Stover,"Package lock does not override package.json. Your package.json file is still used to determine which dependencies you need, then lock will get the exact copies of those dependencies as previous installs used.

Your lock cannot be used alone because it does not know if the dependencies are production, development, peer, optional, etc. You might not need all of them just because a previous install needed all of them. Your package.json file is the one that tells that.",1540563156.0
webb_world,"In summary, I learned that package.json is required to be in your repo. That was my problem.",1540566837.0
SquishyDough,">Run ""npm init cors --save"" (This installs fine and updates package.json and package-lock.json as expected. 

I'm new to node myself, but shouldn't this instead be:

`npm install cors --save`",1540563238.0
TheLemming,"Both package..json and package-lock.json are required. What package-lock.json does is ensure *the whole dependency tree* remains the same across installs. If you just have a package.json file, and no package-lock.json file, as it used to be, even if you nail down the versions in package.json, dependencies of your dependencies could still change across installs.

&#x200B;

This is what happened which led to the famous and catalyzing [left-pad bug](https://www.businessinsider.com/npm-left-pad-controversy-explained-2016-3).",1540564134.0
lucasblogger,"Source:

[https://www.menshealth.com/health/a19538199/6-ft-long-tapeworm/](https://www.menshealth.com/health/a19538199/6-ft-long-tapeworm/)",1540562577.0
FireWeb365,Google ads widget in the html ,1540560486.0
Conroman16,"You can use the google ad services API to accomplish this.  That said, please no. Ads fucking suck.  Add a paid tier instead",1540571243.0
jkoudys,"Silly article. Write readable, organized code first. Turning everything into a for loop might be better in an isolated case, but unless your whole app is nothing but for loops I can guarantee it won't make much of a difference. We're also seeing lots of engine optimizations being written that can assume the same code means the same thing (again, much easier to do on well organized code). Eg in the last year we saw Array.prototype.forEach optimized to run exactly the same as a for loop in the case of a simple callback (no `this`).

 You can also reuse your code much more easily via callbacks, which also has perf benefits. If you have a method you can use in multiple `Array#map`s, the engine can be smarter about that than duplicating the same logic in many loops. 

Unless you have a huge recursion, the ""functions are slow"" argument hasn't been true in JavaScript for many, many years. It applies only to microbenchmarks. ",1540553545.0
threechewz,"is this guy seriously recommending using a for loop for summing over using reduce because in his benchmarks, a for loop performed in 10 **microseconds** vs reduce performing in 110 **microseconds**? i'm pretty sure 99.99% of people using javascript aren't worried about increasing performance by those extra 100 **MICROSECONDS**",1540555447.0
max_kek,[Premature optimization is the root of all evil](https://stackify.com/premature-optimization-evil/),1540557127.0
alinnert,"This makes me wonder: Would it be possible to make callback based loops faster with tail calls? There's a proposal for syntactic tail calls. Would the following work?

    myItems.forEach(continue (item) => { doSomethingWith(item) })

If no, would it make sense to make this an ES feature?",1540549318.0
VolkovSullivan,What an idiotic article. How does a reduce function compare to a for loop? They do two different things.,1540562008.0
CleverPatrick,"I would read through the complete list of nodejs best practices here:

[https://github.com/i0natan/nodebestpractices](https://github.com/i0natan/nodebestpractices)

&#x200B;

But, the section on ""Going to Production"" is particularly applicable to your question.",1540582251.0
EffectiveTrouble,Why Not using heroku?,1540575665.0
edevil,If your app will be running in a Kubernetes cluster have a look at https://github.com/godaddy/terminus. ,1540551236.0
Hydrotechnics,"I followed this exact example, and all of its prerequisites, back in July. I am in a similar boat as you, in that I didn't have any experience with Devops prior to this project. This example was excellent for guiding my way through the basics, such as basic Ubuntu 16.04 setup configuration for Node, SSL Encryption, using NGINX as a reverse proxy, and pointing your droplet to a DNS. 

&#x200B;

I am very interested to see what examples are recommended to follow after this one. Especially any information or tutorials regarding monitoring and scaling. 

&#x200B;

Cheers.

&#x200B;",1540571893.0
tobsn,AWS Lambda or AWS ElasticBeanstalk worker or web.,1540603187.0
idoabamboozle,There’s a security reason those IPs exist in the header. Without it it will go into spam folder for every provider. You will have to use something like SES from Amazon AWS or mailgun etc to send your mail. ,1540543567.0
servermeta_net,"HTTP/2 + MSE. Pack the videos in small segments using ffmpeg, send them over HTTP/2, append them to the video element using the MSE API.   
You can also change video quality/format between segments, for adaptive streaming.",1540543341.0
syntheticproduct,AWS AppStream,1540600217.0
WriteOnceCutTwice,I’m curious. Which player are you going to use? Is it web-based? Or is that part of your question?,1540612139.0
user501230,"MERN stack is a good fit for the kind of application you want to create. Video streaming apps can be categorised into small pieces, like processing original video to create multiple video sizes and quality(144px, 24px, 360px, 480px, etc), storing these videos, serving these videos, etc.

To transcode the original video to various formats there are multiple tools available. You can check here: https://en.m.wikipedia.org/wiki/List_of_video_transcoding_software

You can use CDNs to store and serve the the video files in chunks. In my understanding Akamai is still the best.
",1540572494.0
megaphoneCA,https://nodemailer.com/about/,1540538193.0
md_adil,Whichever way you were choosing python packages. It's just code,1540533269.0
FunctionallyReactive,"Hmm might want to check your research. Most projects utilizing Node rely on Express.js (framework for node).

That said, frameworks exist because they are usually compiling best practices from countless other experienced devs / design patterns that have succeeded previously. Relying on them might not be what you are looking for. But understanding why you rely on them / what they do remains the same in or out of the framework. Not using the framework would sometimes just take longer to build similar features.

You will not be missing out on any low level stuff. A high level understanding about why use certain parts of the framework to accomplish certain goals is likely a good place to start even. This way the low level syntax has been removed from your immediate concerns. And the overall knowledge about a server / api can be transferred between technologies with relative ease. ",1540508968.0
wholesomedumbass,"There is no downside to how you want to learn to code. Try to experience new things and spend time on what like doing. Don't do boring stuff.

When you are ready to work on month long projects, get to know a library (aka module) that will help you out. For big projects, don't do everything by hand, because it will get tedious. And if this project gets boring, move on to doing something else.

After you become familiar with basics, get to know ECMAscript 2015+ features, as they will greatly help you out when coding.

If you haven't already, get used to using a Linux system because most Node apis and documentation terminology are based off of the Unix environment. Plus you will probably find that coding on Linux is much easier and better than on Windows.

If you have anything specific that you want to do, let me know, so I can give you more specific advice for that.",1540528097.0
ivakamr,There are no downside imo on the contrary. The problem is time. Most people jump on a project and you need to deliver in time. Obviously working with express or another framework will make stuff a lot faster to implement. ,1540536806.0
JustLurkingAroundM8,"You have nothing to lose by using frameworks such as Express.js, some persistence layers (compatible with multiple databases), authentication handlers (like oauth server libraries), etc

On the contrary, you have much to gain. You gain time by not reinventing the wheel and experience on the tools used by the overall community.

A huge part of the appeal of Node.js is the ecosystem and it's community, meaning all the frameworks and libraries that are overly tested and simplify for your the most monotonous tasks. 

By skipping the most popular ones you may lose the appeal of using Node.js. Serving HTTP/HTTPS content such as web apps and REST interfaces with Express.js for instance is insanely easy and even pleasurable to see it all developing and working so quickly, and being easy to extend and build upon later as well. They also do not limit you at all if you wish to go your own way mid development for any task or part of what you are writing.

Of course one shouldn't be exaggerating on the amount of libraries and frameworks by using them for every little thing, but popular frameworks do tend to thrive for the tasks they are intended for.

They can even make learning better and easier, by making the end results and learning projects more tangible and dynamic to make. When you are comfortable enough with higher concepts and abstractions, I recommend ditching them for isolated personal project to see how it is to set up the parts you get curious about without them. ",1540541403.0
wherediditrun,"There is no downside to this approach. Only benefits. Unless.. you have a family which relies on you and you have to become atleast somewhat  productive asap. Other than that, your doing the correct thing. You will start using frameworks then the time is right. ",1540563683.0
shawncplus,I personally use PM2 [http://pm2.keymetrics.io/](http://pm2.keymetrics.io/),1540506024.0
Angelius750,"Author here, please tell me what you would like to learn in my next tutorial, i'm going to shoot it soon :)",1540528600.0
cleanesthippie,thank you,1540517794.0
ep7i0CtZek,"* Great structure with bad developers makes bad software.
* Bad structure with great developers makes great products.",1540550198.0
EyeballMond,"They have anti scraping, there's a few workarounds using a headless browser for instance.",1540500015.0
BrianJM85,Can you post your Puppeteer code?,1540564270.0
BehindTheMath,">I can obviously achieve the second option by having a function somewhere that wires everything up, but then that function depends on *everything*. And that's horrible.

Why is that horrible? Isn't that exactly what integration testing is? You blackbox the entire thing, give some input and test for the output and effects. 
",1540508514.0
veksaryn,"One of the best practices is to never write blocking code.  Everything should be asynchronous.

Even in the case where you need something done in a specific order, it should be done with async functions.

You never want to block the event loop from other work being done.",1540504267.0
Charles_Stover,"You definitely need to know callbacks and promises, and while I doubt it will be a part of your interview, I would expect you to be able to write the promisify function yourself in vanilla JS.

I think a strong test for Node competence that I would administer would include streams, like what Duplex is and when to use it, how and when to pipe, etc. A live coding challenge may be to stream file contents into some sort of mutating function (base64 encryption, for example) and have the output sent over HTTP to a requesting client.",1540505873.0
Earhacker,"Honestly it sounds like you know Node pretty well. If you don't feel like you do, the other answers here have good advice.

What you're really asking is, How do I convince a recruiter that I know Node? And that's a whole other thing. Every recruiter is different; some of them really know their stuff, some of them only know words like ""Node"" and ""Express"" and ""REST API,""  but not what any of those words really mean.

What works for me is talking about an actual project that I've been working on, rather than trying to list all the stuff I know. This might be a work project, but I'd much rather talk about a personal project, because of NDAs and because I'm probably more enthusiastic my own projects. If you're fresh out of school and don't have a personal project yet, get on it. Build a CRUD app for your hobbies, build a Discord clone, do whatever. Just have something to talk about.

The idea is to assume nothing about the recruiter's knowledge. Explain your project to them like they are a total newbie. Not an idiot, don't talk down to them, just keep everything simple and high-level. Talk about it like you're pitching the project, just the features and benefits of what you've built. If they choose to engage on more technical details (""What kind of build pipeline did you use? How did you persist data?"") then feel free, but don't assume they know anything from the get-go.

None of this is meant to denigrate recruiters. But recruiters are by and large either non-technical salesmen or vaguely technical hiring managers. If you can get them to think, ""Bloody hell, OP's built some pretty awesome stuff,"" then you've given them a reason to advance you to the next stage.",1540511272.0
ivakamr,"The Stream api and buffer management, how to load balance a cluster of node processes, how to secure the application, how to a architecture the code base for 100% coverage, how to handle errors and enforce circuit breakers, kniw the difference between Buffer.allocUnsafe Buffer.allocUnsafeSlow, understand that you know about 1% of your subject and may if you work hard arrive at 20-25% at the end of your life if you are good.",1540536053.0
Tuckinatuh,Node is just a JS runtime environment. You could maybe say it uses the V8 engine wich interprets JS in real-time. It has an event-loop and describe the event-loop briefly. Maybe that it's cross-platform? And of course npm. But overall node is just the foundation on top of which everything interesting is built. It's possible when they ask that question they're conflating what you build on top of node with node itself so your answer talking about Express and APIs is what they wanted.,1540499070.0
Bitflight,I wish node modules were called nodules.,1540544849.0
RangerCoder,Sounds like a good plan to me! You will have more skills and I do think you will find that using javascript for both the front and backend makes things more easy and maybe its also more fun for you to work with something new! Your PHP/Laravel skills will help you to learn Node.js much faster as well!,1540492828.0
Nullberri,"Mongodb? you're better off with sql and being aware of nosql options.

Express is pretty old at this point, but knowing any of them will translate well into all the others. Except maybe graphql, but that's a whole different beast than rest.

If you work for a larger outfit Docker, and AWS will be nice to haves but your unlikely to use it as they'll have a whole team dedicated to managing it.  

I'm a professional full stack developer (7+ yrs) working for a large company. We use IIS/C#/ Java/tomcat and Angular for the front-end and were still on VM's for all our services. At home I work with with Nodejs/React/Docker.


",1540502532.0
IdleSolution,Why does everybody feel the need to use noSQL db when working with node? ,1540503075.0
james_aidyn,"Udemy is the best for anything, use it for react when u get on that road too",1540497874.0
JustAnAverageGuy,Solid plan. ,1540502320.0
CommandLionInterface,"I think once you learn mongo you might miss sql, and that’s fine. There are great sql adapters at various levels of abstraction for all the popular sql implementations on NPM. Personally, we use MERN in production at work, and almost every time I touch the back end I miss sql. ",1540502953.0
elmagico94,Bought this. Won't have time to work on it until Christmas break though. ,1540568719.0
e-chavez,"If you like Laravel take a look at AdonisJS

https://adonisjs.com/",1540501526.0
Cyberuben,"You can even do this without ever storing the files on your server. It'd still use your bandwidth though.

The way I would attempt to do this:

- Use a library like [this](https://www.npmjs.com/package/yazl) to create .zip files
- Instead of storing the .zip in memory, pipe the output directly to the response
- Once the writestream to the response is set, use a library like node-request (or whatever you like) to pull a file and write it into the .zip
- Once all URLs have downloaded, close the .zip and end the request",1540496348.0
Cyberuben,"If you haven't figured it out tomorrow I might create you an example application using Express, Yazl and some request library",1540507798.0
Max_Stern,"Why do you keep posting this in various programming subs, it's not that funny ",1540559620.0
mbelmin,So you are looking only for London based devs?,1540490129.0
,[deleted],1540496484.0
dotdotconnor,Take a look the [p-limit package](https://www.npmjs.com/package/p-limit) .,1540484078.0
D3kalog,bluebird's Promise.all with concurrency option.,1540489379.0
HipHopHuman,"Here's a snippet of how to do this without any external libraries:

    function chunk(array, size = array.length) {
      const results = [];
      let tmp = array.slice(0);
      while (tmp.length) {
        results.push(tmp.splice(0, size));
      }
      return results;
    }
    
    async function reducePromises(promises, reducer, initialValue) {
      return (await Promise.all(promises)).reduce(async (accumulator, value) => {
        return reducer(await accumulator, value);
      }, initialValue);
    }
    
    async function mapPromises(promises, transform, options = {}) {
      const chunks = chunk(await Promise.all(promises), options.concurrency);
      return reducePromises(chunks, async (results, chunk) => {
        return results.concat(await Promise.all(chunk.map(transform)));
      }, []);
    }
    
    mapPromises(urls, async url => {
      return fetch(url);
    }, {
      concurrency: 100
    });

&#x200B;",1540509410.0
Praenuntius,"    Bluebird.map(urls.map(async (url) => {
      // Service call logic here
    }, {
      concurrency: <BATCH_SIZE>
    });",1540490990.0
daveequalscool,just want to mention Promise.all() in case you're unfamiliar. it would only be a small part of the solution though.,1540485683.0
Plantalones,"Hmm looks like a mongo query and not express. You would need to store that data possibly using .save() in order to query for it later.

https://docs.mongodb.com/manual/reference/method/db.collection.save/

",1540484222.0
fosefx,"Are you looking for something like node-fetch? 
Use node as a REST for your Frontend and initiate a request to the API then respond with the response.",1540481847.0
GoblinsStoleMyHouse,"Look up ""Wizardli"" on GitHub for a good example of this architecture in a real world application.

For the frontend you should use Angular's http module, on the backend you can use something like axios to make your requests.",1540489457.0
exdirrk,"I'm really not sure I see a difference in what you are describing as a gateway and an API. 


Your gateway is essentially just a public API that calls other internal apis.  So use whatever you normally use for apis.  I have written a public API that acted as our ""gateway"" for the angular app.    At the company I was at, we used  hapi for everything so we used hapi for the gateway as well.   There are pros and cons of this setup:

Pros:

* single public interface for security / auth
* makes usage tracking easy
* enables the backend apis to be hidden / obscured
* allows the internal apis to be cached easier
* can call the internal apis more frequently than a  frontend user would want to (much better for mobile)

Cons:

* single point of failure of the application (bugs here really show)
* you repeat logic for a ton of things unless your just passing them through in which case why even do it
* no real benefit of environment security even if it hides the backends
* breaking changes are harder to deal with
* It feels like your writing a monolith just to call your microservices",1540498531.0
QuazyWabbit1,"I'm doing something like this with distributed workers. I have a REST API on the gateway and REST APIs on the workers. Any HTTP requests to /relayed/:id/* are forwarded to the corresponding worker's rest API. The response from the worker is then relayed back to the client making the request. Just keep in mind this makes the relay/gateway a bottleneck.

Something like this works for me:

    const reqPromise = require('request-promise');
    
    module.exports = ({ router, controller }) => {
      router.all('/relayed/:id/*', (req, res) => {
        const endpoint = req.params[0];
    
        const instanceId = req.params.id;
        
        // testing hardcoded instance connectivity
        const instance = {
          prefix: 'http',
          server: 'localhost',
          port: 4051
        };
        
        const uri = `http://${instance.server}:${instance.port}/api/${endpoint}`;
    
        const reqOptions = {
          uri,
          method: req.method,
          body: req.body,
          json: true
        };
    
        return reqPromise(reqOptions)
          .then(response => res.json(response))
          .catch(err => res.json({
            ok: false,
            reason: 'Failed to communicate with remote server',
            reasonContext: err.message
          }));
      });
    }

",1540508834.0
marvinfuture,Any particular reason you don't want to hit your API from your frontend?,1540491496.0
mynameisurl,Why not use an open source one like Kong community edition?,1540516692.0
techmighty,"if this use multer , I am gonna lose it. ",1540477799.0
sldomingo,"When you launch 'node yourapp.js', the node process read the source code from the filesystem and dumps it into memory, and then your application runs from there, so even if you change the file yourapp.js nothing is going to change unless you restart (dump code into memory again). In the browser is a bit different, the code is also loaded from the filesystem into memory, BUT, when you edit it using the browser console, you are not editing the source in the file but in memory. ",1540477356.0
Saud381,I can’t answer your question but use nodemon for auto refresh,1540476765.0
BenjiSponge,"So you're asking two questions. The first question is why node.js has to be restarted to make changes (can't be hot-reloaded or changed on the fly). The second question is how compilation and interpretation steps happen. The first question can sort of be answered quickly. The second question will take years of study and reading an extremely large codebase. (also I don't know the answer and I bet almost no one knows the complete answer) To attempt to answer your immediate question, I believe `a` gets parsed when it's encountered, compiled when it's run for the first time (or when the parsing knows it will be called in the same context, maybe?), and optimized when `a` gets called many times. Don't quote me on this.

You're right that V8 uses JIT to compile and interpret JavaScript, and this means that it can hot-reload code. I believe if you put in the right hooks to Node, you could do the same thing. It's not an engine problem, it's an ergonomics problem that I don't know that anyone's solved yet. Chrome has DevTools and the engine is hooked in very strongly to these tools. Node is mostly a command line thing with much less tooling involved, where people don't really need or want such a thing. But if you put in the right hooks, I think it would be strictly possible. I know people do use DevTools with node (I've never done so), so that might put in the right hooks and you can modify the code accordingly, but I don't know.

That said, you might want to consider what it is you actually want to do. For example, if you're starting a server with options `{ a: 5, b: 6 }` and you want to change it in real time without restarting, you probably can't just change the options object. You'd have to go through all the server code and change the options anywhere they've been copied or used. A lot of stuff happens on initialization. You might want to do other stuff, but just know that it's a more complex topic merely by its nature than it appears. The engine may support primitive abilities like swapping out pieces of memory or function bodies (and then recompiling them), but this is likely not exactly what you want to do because it may have tons of implications you're not thinking of. Aside from that, the tooling just doesn't exist as far as I know.

One thing that might be up your alley is to invalidate `require`'s cache. Normally, when you `require('module-a')`, Node checks to see if it's been required before and returns the same object (not even a copy, so modifying the export will modify it in other modules as well) if it has. If you invalidate the cache, it will re-parse the file and return the new object. So if you wanted to hot-swap a function, you might extract that function into its own module, and every time you call it you `require` it again. Then, when you want to hot-swap it, you [change the code and delete it in the cache](https://stackoverflow.com/a/11477602/1129436). Note that you'll need to have the deletion code somewhere in the code when you start up with some way to communicate to the running process to run that code. For example, creating a server endpoint that invalidates various files. Then, the next time you `require` that, it will be the new version. This can be used to great effect, but I don't recommend ever actually using it, at least not in production.",1540477579.0
specialpatrol,"Not sure why you would expect that to happen. I mean, because it's compiling just in time, would not mean it recompiles it everytime it calls the function? Maybe there's some kind of debug tool or mode that does it, but it would  be a remarkable form of execution.",1540477551.0
Downvotes-All-Memes,"Interesting question, thanks for asking. I've definitely learned something and would never have thought to ask this. (And that probably made me sound like a bot for being so generic but whatever).",1540488264.0
Thommasc,"Might help:

`node --inspect --inspect-brk index.js`

&#x200B;",1540476953.0
tdat00,"1. Node modules are cached https://nodejs.org/api/modules.html#modules_caching.  
2. You can use nodemon for auto restart node application on file changes. ",1540476974.0
jIsraelTurner,You get that special scenario in Chrome because the Chrome team has built fantastic developer tools. You can use those same tools for Node.js using NDB: https://www.npmjs.com/package/ndb,1540493129.0
BigInIssaquah,I would think it would cause significant performance issues if Node had to check for file changes each time a request came through.,1540496091.0
autisticiconic,You can usee nodemon to edit-save and instant run without a restart,1540505028.0
apatheorist,"Chrome just restarts its JS compiler. It can do that since it’s the app running the compiler. When you run node by itself, you’re basically just running the compiler so it has to start over. The easiest way to do that is to restart node.",1540521822.0
Charles_Stover,"I'd cut off the `imgBase64=` from the beginning, as I assume that is the POST input name. The rest of it is just URL encoded. URL encoding is necessary to make sure your parameters don't overlap. When you post ""first is Charles and last is Stover"" to the server, it is encoded like this: `first=Charles&last=Stover`. There are a lot of special characters in this encoding, such as `&` and `=` being obvious ones. What if I said my first name was `Tom&hacker=true`? The server receives `first=Tom&hacker=true&last=Stover`. Now the server has received three parameters: first, last, and hacker. Because of this, inputs are encoded to replace special characters (`&`, `+`, `/`, `%`, etc.) with `%XX` where XX is the character code. The server can then decode any string to its original, unencoded message.

You can use `decodeURIComponent()` to convert it back to the original string. There are other, similar functions, but I think that is the one for this use case.

    const data = Buffer.toString();
    return decodeURIComponent(data.substring(10, data.length));
    // substring 10 strips the imgBase64= prefix, then decodeURIComponent fixes your %XX

Here is the documentation for decodeURIComponent that goes into more detail the use cases and benefits: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",1540472694.0
kranker,"define ""not working"" ",1540463119.0
Sp1xx,"Npm does Not recognize ""docker"" keyword  when typing npm docker  ",1540463535.0
igetom,"What error do u get?  
Maybe your file isnt saved :)  
Maybe the docker keyword is making problems  
Maybe u misspelled it

Maybe your computer is unplugged :O",1540464728.0
ellaberry313,I would add Resilient/Flexible – failure in one service does not impact other services. If you have monolithic or bulky service errors in one service/module it can impact other modules/functionality.,1540450617.0
heligon,"Benefits include moving away from a monolith, and you can make different services with different technologies, taking advantage of a different stack per use case. 

Most blogs and videos I’ve seen only recommend micro services if your application is big enough and scaled high enough. Because it adds quite a bit of complexity. ",1540474692.0
wherediditrun,"Easy maintenance? I'm not sure where are you getting this from. It's not an easy maintenance and introduces quite a lot of overhead. However it being the only way to scale horizontally seems to be the big benefit people are after. So the increased maintenance is the price companies pay for. Now, that's usually big companies with big projects, you have no reason to go for microservices for anything 'pet-like'.

Constant resilience testing alone causes quite a lot of workhours. Ever heard of Netflix Chaos Monkey or things of that nature? It's a 'service' which actively tries to kill your PROD. While your developers have to respond quickly and keep fixing it. 

I think a lot of misunderstanding comes from word ""miscro"" used in the term. It does not define the size of your 'services'. It defines the architecture principals.

There was a great [talk by Martin Fowler](https://youtu.be/wgdBVIX9ifA) he gave in GOTO conference. Pretty much helping to define what the term actually means.

",1540499474.0
juliansmith141,"Low impact on other services – being an independent service, this has less chance to impact other services",1540451880.0
vladimirice,I think it is better to mix micro services and monolithic architecture. And not use pure monolithic or pure microservice architecture,1540497356.0
Ender2309,"It smells like a race condition with the proxy setting. I haven’t used it so I can’t say for certain but I’d start there. Can you get the file if you hit it with postman? 

One other thing - don’t use var and don’t use sync versions of node functions.",1540449985.0
awesomeevan,"Can you clarify what you mean by backend and fronted port? If the backend implements the download why would you hit the frontend server for it? The 404 is surely because the frontend doesn't recognize the route?

Edit: what I'm guessing is your react component needs to fetch http://backend.url/repo/whatever instead of the current /repo/whatever via that fetch",1540442945.0
awesomeevan,"When you deploy it on an actual server each of those applications will be reached by some reverse proxy with specific URL rules, right?
 
Why not use a path matching pattern via nginx or Apache to direct the request to the relevant server (front or backend) ?",1540444306.0
atulmy,"I recently tried using RPC: https://github.com/atulmy/wispy
For GraphQL check: https://github.com/atulmy/crate",1540456644.0
FunctionallyReactive,Google node restful api clean architecture. That’ll be more help than any answer you find here,1540435347.0
j_rapp,"Heres a boilerplate repo for REST APIs that I designed. It was done in a way to handle common issues I've come across over the years

https://github.com/jmrapp1/Node-React-Redux-Boilerplate
",1540469487.0
robhybrid,"This is a great, free, book about API design. [https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf](https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf)",1540471478.0
Knext,https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md,1540477434.0
ithinkiwaspsycho,"When I was developing my first REST API, I mostly imitated Stripe's API. In my opinion, it's well structured, well documented and follows most good practices (at the time it was developed). 

They also have multiple client libraries for different environments including Android and iOS SDK. It was pretty fun learning experience to look at how they implemented the client-side of things after reading the REST API docs first. 

However, I think by ""well written API"" you are looking for ""clean server-side API code"" instead of ""well designed and documented API and client libraries"". Unfortunately, I don't know of any server-side projects that you would find useful beyond tutorial toy projects. Maybe WordPress but it's probably way too bloated by now to be useful in that way. Edit: Also it's probably written in PHP. Kinda gross. Edit2: Apparently Wordpress is shit.",1540449232.0
brown59fifty,"Maybe it's a trivial and ""passe"" example, but take a look at jQuery. It's really well written and that's one of the reasons why it gained so much popularity.

Also take a look at this: [https://www.smashingmagazine.com/2012/10/designing-javascript-apis-usability/](https://www.smashingmagazine.com/2012/10/designing-javascript-apis-usability/)",1540458122.0
syntheticproduct,*APIs,1540446778.0
Vpicone,I see you found that free landing page post haha. I’d maybe try to emulate its style in the rest of your app!,1540435533.0
Str4yfromthep4th,This is a classic problem that everyone has had. You are setting the response twice before you return. It's exactly as the error msg says. Place breakpoints on every spot u set the response. If you mean to set a response and short circuit the rest of the function then make sure you place a return at that point as well.,1540431397.0
goriunovd,"First is why are u using await and then together? Second why did u make getExpiration async if u dont use await ? Third why do u even need a getValue function ? Try fixing above things it should make code more strightforward and clear. Sorry i can help with the problem as i am writing from the phone, will check out your code a bit later. Also what library/framework do u use for http?",1540428369.0
scaleable,"If you mix up request handling and business logic in the same place, all without promises or async await, its not hard to get there",1540434507.0
,[deleted],1540428499.0
fr0z3nph03n1x,I use a queueing service like amazon sqs. ,1540449824.0
Aurovik,CRON as stated above or a cloud service like AWS SNS activating a lambda service.,1540446320.0
vladimirice,easiest way is to use pm2 cron feature for this case,1540497471.0
congowarrior,"**Short answer**       

You could use environment variables or a config file.

**Long answer**

Whether you should is another question. 

What are you intending to do? Typically (in my experience), most electron apps are client-side applications. You typically do not want to store your database credentials in a client side app. Do you intend to have your database running on the clients machine, in which case, I personally would recommend a file based database like SQLite.

&#x200B;

You might be better served using a REST api to access the data from your database and shoot down some Json.",1540420539.0
edclement,"Terrible idea. Security through obscurity is never a good solution. Backend credentials for any service should never be exposed to anything client side. Sounds like your electron app should be using some authentication mechanism and secured API's to be interacting with whatever your data store is. Yeah, that's way more difficult then embedding credentials in your app but it's the correct way to implement the solution. 

I'm going to also assume your database is exposed on the internet since the electron app is directly querying it using SQL credentials. I won't even address this issue here...",1540424165.0
listgrotto,"Will this help?  
[https://www.npmjs.com/package/electron-config](https://www.npmjs.com/package/electron-config)",1540423380.0
XiMingpin91,"Don't do that. Not only does it not make sense but you need to bear in mind that everything on the client side is sent to your users' computer, so you really don't want anything sensitive living on that end.",1540438274.0
evertrooftop,"Jezus, this SCREAMS ad. There's 0 content here. How did this get 15 upvotes? ",1540436641.0
Str4yfromthep4th,Passport is currently the best thing in the corporate world. What do you mean by it leaves some things out? What things?,1540405715.0
brown59fifty,"[https://xkcd.com/927/](https://xkcd.com/927/) (sorry, but I have to;)

btw if you're looking for some ""complete"" library take a look into strapi and just use it as a auth module.",1540457773.0
syntheticproduct,Interested too - curious what's the best practices / state of the art is at.,1540402735.0
eejdoowad,"This is an awesome idea. I think the dominance of Express inhibits the growth of the Node ecosystem. When I use non-Express frameworks, the first problem I run into is integrating an authentication system. It's always much more difficult than using Passport with Express. I think that's part of why some newer frameworks are just wrappers over Express.

It would be wonderful to have a generic, authentication system with a standardized plugin interface and first-class plugins for common authentication providers.

You could then make wrappers over this library for each framework (instead of trying to make wrappers over Express middleware for each framework).

That said, definitely learn from prior art (Passport, Bell, there must be others) and see if anyone else has attempted to or is building this.

Also, Passport is wonderful because its documentation makes it easy to understand and set up. A website with a tutorial and API docs would really increase adoption.

Also, consider using Lerna to manage the project. You might have a package for the core library, a package for each first-class plugin, and a package for each framework wrapper. Managing them all in a single repo would be much easier than splitting them across many repos.

I'd be happy to write docs, set up a website, set up CI and other things once you've built an MVP.",1540571490.0
ataraxy,"Check out $elemMatch for querying within arrays.

https://docs.mongodb.com/manual/reference/operator/query/elemMatch/

Also IDK if this is intentional but you're trying to query for [jeffrey@gmail.com](mailto:jeffreyyourman@gmail.com) but typically an email field just contains the email ie. jeffery@gmail.com",1540409755.0
superAL1394,Yes. It’s amazing. I’m on a crusade to convert my entire company. I’d say as of today about 20% of our production codebase is typescript.,1540386593.0
exdirrk,"Yes we have been using TS for the back end for a few years now. 


Since it seems like your looking for project setup and you are used to angular take a look at these libraries:

Nest.js - microservice framework 

Inversify - di

Class Validator / Class Transformer - Models and validation

TypeORM - ORM


We actually use routing controllers right now but nest is where we are heading. Nest also follows the angular style and might be easier for you to get started with. ",1540387026.0
Darkseid_Omega,"If you're already using Java In the backend, I see no reason to switch to TypeScript, honestly, ",1540430625.0
RaycatRakittra,"Yes. My company uses it for most of our projects. If you want to get started, you don't necessarily need a build tool like Webpack. You can get a lot of mileage out of the compiler - `tsc` - and a strict `tsconfig.json`.",1540390919.0
boon4376,"I use node on the backend. I use google cloud functions to host mine (which is similar to AWS lambda Dw0 mentioned) - I just find Google's Cloud Management Interface to be easier, and I like Firebase BaaS. But AWS now has a lot of similar features to Firebase. My front-end is react also.

One tip I learned recently, if your environment is running a relatively old version of node, use babel to compile as backward compatible - so you can use things like async / await. I was writing really annoying promise functions all the time until I figured out that there was a babel plugin that allowed me to use async await.",1540384535.0
iRedditWhilePooping,"Yes! It’s fantastic. I would highly recommend looking at TypeORM for the DB layer management. You define TS classes that represent your DB models and relationships and you get a ton of stuff out of the box.

We did have a few issues converting a legacy NodeJS codebase to TS - the biggest issue we had at the time was the “require” vs “import” / module.export vs export issue. 

",1540387013.0
jimwards17,https://github.com/Microsoft/TypeScript-Node-Starter,1540387081.0
Dw0,"absolutely fine. use in aws lambda mostly, but also couple of frontend (react) apps.",1540383840.0
Nefs,"Yes - From what I see so far, it's great for Node.

I'm incrementally converting my current Node API to TypeScript and it's been great so far. If you're adding it to an existing project, just enable `allowJs` in tsconfig and you can gradually port things over.",1540384366.0
PerfectOrphan31,"I just convinced my architect that we should be using Typescript for development. We're still starting out our node services, but I'm now in the process of converting Express JavaScript to NestJS TypeScript. ",1540390825.0
RushPL,YES! It's working out well. ,1540437441.0
vinnl,"Absolutely, and I'm very satisfied. I'm using it in conjunction with a React front-end. I've written TypeScript interfaces for expected API bodies and responses, and it's been wonderful when they change.",1540386905.0
gavlois1,We wanted to switch our Express server to Typescript but it was way too much work for an already existing project. If we started a new one we might go with it. ,1540395684.0
narven,yes,1540406004.0
storglow,"Yes, and in my opinion - TS is the best option for Node.JS. It's increases code readability and in the same time - it's still JS, so any Node.js developers can read and use it.",1540391532.0
Midasx,"We use it too, it's great. I recommend pairing it with GraphQL too, it's a nice match.",1540418832.0
EntroperZero,"TS makes even more sense on the backend than the frontend IMO.  I don't think there's much reason to write JS anymore, at least for new projects.",1540404573.0
Oalei,"You might want to consider Deno, a -fairly recent- typescript runtime based on the v8 engine. It is maintained by the creator of Node and a bunch of other people. https://github.com/denoland/deno",1540386300.0
JaniRockz,Yes I use it for a periodic data import.,1540386927.0
Flanica,"Why not Redis, ZeroMQ or something similar?",1540375944.0
mattstrom,"I use OpenAPI, formerly Swagger. And I use Nest which has [built-in support for OpenAPI](https://docs.nestjs.com/recipes/swagger) with decorators and TypeScript support. [tsoa](https://www.npmjs.com/package/tsoa) is a standalone project that provides TypeScript and OpenAPI support.",1540346602.0
spider143,Swagger is popular in node.js world too. ,1540391221.0
dontchooseanickname,Like https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9 ? :),1540356862.0
vladimirice,I look at popular project with the REST API documentation. It is strange but easiest one for me to study was Google Blogger. Try to read this - a lot of good examples how to organize REST API url structure,1540360621.0
CherryJimbo,"Node 10 will be the new LTS version and therefore ""production ready"" very soon. There's an open pull request at https://github.com/nodejs/node/pull/23831 I'd expect to be merged in a few days. You can see the full release schedule at https://github.com/nodejs/Release (though this also has some pending PRs due to the release today).

For what it's worth, we've actually been using the 10.x versions in productions for months now without issue though.",1540335507.0
jkh911208,use the LTS on production,1540330308.0
the47thsense,"What is your definition of production ready?

If you have a whole bunch of plugins that rely on abandoned plugins, then you're probably not ready to upgrade to 10. Older builts of Grunt/Gulp rely on an outdated version of `graceful-fs`, which relies on an outdated version of `natives which uses private node APIs that have been removed in 10.

https://www.reddit.com/r/node/comments/8imkse/node_10_breaks_grunt_and_gulp3_and_some_webpack3/

Personally, I've always stayed on the bleeding edge.",1540370597.0
bardadymchik,We are using it for a year at production already.,1540374686.0
n1313,"If you are using cross-env exactly how you wrote, then you’re doing it wrong. It should be `cross-env env=test`, not `cross-env=test`.",1540344116.0
CromulentEntity,"You can check out bcryptjs. It is an awesome library for hashing passwords and performing other cryptographic methods.

Basically something like this while storing the passwords:

    const salt = bcrypt.genSaltSync();
    password = bcrypt.hashSync(password, salt);

And for retrieval you can use compareSync() method as follow in a function:

    return bcrypt.compareSync(password,this.password)  

&#x200B;",1540335932.0
NathanSMB,"I believe this matches the functionality you are looking for. Buffers are Uint8Array's so that should be the same as a byte array in C#. I looked up the Buffer.BlockCopy function on msdn since I'm far from an expert on C#. Given all the parameters it seems the two calls to it are just combining the salt byte array and the password byte array. Salt at the beginning of the array and password at the end. After that the hashing is basically the same.

Let me know if this works for you. I'm curious if I got it right or even close.

    function encodePassword (pass, salt) {
        // Create buffers of the password and salt from proper encodings.
        const passwordBuffer = Buffer.from(pass, ""utf16le"");
        const saltBuffer = Buffer.from(salt, ""base64"");
        
        // Combine the salt and password buffers.
        const saltedPasswordBuffer = Buffer.concat([saltBuffer, passwordBuffer]);
    
        // Create the hash object, update it with the salted password, then return the result as base64.
        const hash = crypto.createHash(""sha1"");
        hash.update(saltedPasswordBuffer);
        return hash.digest(""base64"");
    }

Edit: Also if you have the time I would strongly recommend switching the hashing algorithm to a slow hashing algorithm. Someone else already mentioned bcrypt but there are other solutions as well. Personally I would recommend argon2id. Argon has bindings for C# and node so you could use it on both. If you don't want users to have to change their password then you could keep both hashing functions in the codebases and when users login follow a logic flow like this:

1. Get password from user
2. Pull users password hash from db
3. Detect whether the password was hashed with sha1 or <slow hashing algorithm of your choice>
4. Validate password.
5. You will have the plain text password from the user so at this point you can hash it with the hashing algorithm you chose and update it in the database.
6. User is logged in.

It's a safe route to make this kind of transition and will leave your users passwords better protected in the case of a data breach.",1540357405.0
tntxx9,"Noob question, I started using/working/learning about Node recently, using v10.11.0, should I update it to v11.0.0 ?

Seems to me that, since I'm not deep in to any project (yet) it seems that it should be a good idea to update, to not use by mistake any of the deprecated functions, and to use stuff like callbacks on [fs.read](https://fs.read) and other changes included on v11.0.0 ?  


EDIT: Thanks to everyone for answering!",1540330642.0
FormerGameDev,"well, with FreeBSD 10 no longer supported, I guess I'll see ya'all later.

(just kidding, ofc)

So.. what's this mean for all of us that *use* node?  i wish their changelogs were a little more user centric. :-D

",1540339534.0
ambiatica,"wtf is the 'Native Module' installer? Never saw that, and it wants to download 3gb? Do I need this shit?",1540348228.0
SearchingForPrincess,So no ES6 modules without using some weird flags and file extensions yet then?,1540397411.0
faruzzy,This is getting out of control! But still a good thing !,1540326222.0
FormerGameDev,"fwiw, i upgraded my 10.6 i think to 11.0, and now one of my mocha test suites completely fails to even run. it just hangs.  I downgraded back through the 10 series, and found it broke around 10.8
",1540358170.0
sole-it,"````json
  ""v11"": {
    ""start"": ""2018-10-23"",
    ""maintenance"": ""2019-04-01"",
    ""end"": ""2019-06-30""
}
````
looks like 12 will be the next lts, i will stay with my v8.12 for quite a while.  
``Interval timers will be rescheduled even if previous interval threw an error. ``   
this seems to be interesting,

edit: format",1540330332.0
Charles_Stover,"... Can you link to the file that has the problem?

I'm not going to read your entire repository.",1540323798.0
ElectricLabrador,What’s wrong with a long request URL?,1540324571.0
khan777,"Unless you’re getting close to ~2000 characters (browser limit), you should be fine.",1540334352.0
ns0,"Hi! Good work, I like how well documented your Github is.

&#x200B;

The API looks pretty great, I'd suggest relooking at \`POST /users/login\`, one of the goals of rest is to standardize the way you interact with objects.  A good rule of thumb could be to always use nouns for object names in the Url. Login would be a verb not a noun, it could be that a better interface might be \`POST /users/{user\_id}/tokens\` or \`POST /tokens\`, although \`/users/{user\_id}/tokens\` may be a better since it clearly shows its impossible for a token to exist without a user being associated with it. 

Some other tips/notes on the design:

1. Try and implement oauth2/openid systems rather than a custom token system, as they make integrating with services easier.  I realize this is just a fun project but that would be a great addition for any API.
2. I love that you have \`/users/me\` as an alias for the logged in user. This is great! Find other ways of making users job easier by providing these aliases
3. It's a great idea to send authentication through the header, and that was a good choice, I should note there's a special header for this called \`Authentication\` that you can use (rather than x-auth).  It's important to send sensitive tokens via this header as browsers, proxies, IDP/IDS and other systems are acutely aware that whatever is in there is sensitive and to never cache, collect or log that information. 
4. Maybe consider have an open api schema return off of the root of the API (e.g, a swagger definition).

As for the code (and I'm not sure if you wanted that reviewed)

1. [https://github.com/fatihint/exprest/blob/master/server.js#L8](https://github.com/fatihint/exprest/blob/master/server.js#L8) this is a great thing to do, always look for configurable properties from the environment and then default to a safe value (if you can, and if you cannot, stop executing and crash).
2. [https://github.com/fatihint/exprest/tree/master/tests](https://github.com/fatihint/exprest/tree/master/tests) YAZ. More of this. I love finding tests and its a sign of a complete project and gives me confidence it'll work as stated.
3. [https://github.com/fatihint/exprest/blob/master/routes/post.js#L20](https://github.com/fatihint/exprest/blob/master/routes/post.js#L20) Try using \`let\` instead of \`var\` to properly block scope your variables, its not a huge issue, but nice to have as it'll save you once a year from a really nasty bug.
4. [https://github.com/fatihint/exprest/blob/master/models/post.js#L4](https://github.com/fatihint/exprest/blob/master/models/post.js#L4) This is great! Schemas with definitions are perfect, they help assert you're not getting junk data.
5. [https://github.com/fatihint/exprest/blob/master/.gitignore](https://github.com/fatihint/exprest/blob/master/.gitignore) This is great, you've explicitly banned your local config and development files from being committed. Always remember to do this!

&#x200B;

Great job, finally, what I'd suggest is adding some code coverage from codacy or code climate and run your tests through something similar to circleci.  Add the badges they create to the project so others have confidence in your work.

&#x200B;",1540318361.0
,[deleted],1540316634.0
spider143,"They way you wrote is good. However, I suggest you to look at swagger and Express-swaggerize.

You yourself will learn what good practices are. ",1540391138.0
mbelmin,"First of all, great job for a learning task. I have few suggestions that may help you:

* Drop **VAR**, make **CONST** your default keyword for every variable and only if you see the need for a new assign operation, change the keyword to **LET**
* Take on **babel** and use **import** instead of require
* Instead of creating the express app running it as a server, create the express app, define it and create a HTTP server based upon that app ([https://github.com/i0natan/nodebestpractices#-14-separate-express-app-and-server](https://github.com/i0natan/nodebestpractices#-14-separate-express-app-and-server))
* My preference for the routes is instead of the whole route (like routes/user.js) being defined in one file I organize my routes like this:  
*routes/*  
*|     user/*  
*|    | user-route.js*   
*|    |user-controller.js*  
This approach makes the code more readable and upgradeable.
* When working with a folder that contains similar files (eg models/) I create an index.js file in which I import everything from the files in the folder and just export it. If you did this in the models folder it would enable you to import every (or only some) model with one line (import {User, Post} from './models')
* My preference is using async/await instead of promises.
* Instead of comparing the role to the string  'ADMIN', make a file that contains all your constants (export const ROLENAME\_ADMIN = 'ADMIN';) and import it where needed. I try to do this for every constant value I have (Strings, Error messages, some values...). This is great if, in the future the Admin role name changes, you have to change it only on one place.

My tips might not be unclear since I am very tired right now but I will gladly elaborate on any point I made as soon as I get some rest. Keep going man!",1540334261.0
MrReeky,"That's pretty hard to tell without the context e.g. where the call of addId() happens.

But honestly, imho ""abusing"" the scope like that is really bad coding style.

You could pass the array as a parameter. Because its not a primitive value, the function gets it as a reference. So you could just call ids.push() in the function.

Best practice would be to have the id and the array as parameters, make a copy of the array on the function, push the new id to the copy and return it.",1540316969.0
megaphoneCA,Where are you calling addID,1540315427.0
CromulentEntity,The reason you are getting an empty array in the log outside of the function is because node is asynchronous and doesn't execute statements in a serial manner like you would assume. As for why you are getting \[1\] is because you are printing the whole array and not ids\[0\] which is an element of the array.,1540336201.0
Charles_Stover,"Any front end can use any back end. Different back ends have different pros and cons as far as efficiency or features, but if the features you want are supported by node there's nothing stopping you from using Node.

Front ends (such as a mobile app) should be agnostic to the magic of the back end.

Your biggest question is likely just if your app makes enough back end requests to justify using sockets instead of HTTP requests. I believe Node supports sockets.",1540316822.0
throwawaitnevermind,"the trick here is arrow functions!

&#x200B;

`await new Promise((resolve, reject)=>`

`{`

  `someAsyncHTTPCall(url, data, (req, res)=>`

  `{`

`if (res.statusCode == 201) { resolve() }`

`else{ reject() }`

   `}`

`}`",1540308606.0
ElectricLabrador,What about using the same requests package but for JavaScript? https://www.npmjs.com/package/request,1540342301.0
FormerGameDev,".... you don't block in node.
",1540351489.0
Daxsis,Can you comment on the pricing model of stdlib.com. I just don’t get it. If I take free plan how many sms do I get? How to calculate the approximate for  10 websites (6-10 pages) ? ,1540319609.0
hbakhtiyor,"need to use await for axiosPost, since it's async function

```
app.get('/coins', async (req, res) => {
    coins = await axiosPost('http://localhost:8080', {
        userpass: 'XXX',
        method: 'getcoins'
     });
     console.log(coins)
     res.status(200).send({
        message: coins
    })
});
```

also don't need to add await in response data.

```
async function axiosPost(url, payload) {
   try {
      const {data} = await axios.post(url, payload);
      return data;
  } catch (error) {
      console.error(error);
  }
}
```",1540270862.0
cahva,"Even if axiosPost is async/await, it’s still a promise so you will need to async/await in the route also. In fact, you should remove async/await from the axiosPost and just return it and handle errors in the route, eg:

    async (req, res, next) => {
      const post = await axiosPost(...).catch(err => next(err));
    ...

Sorry on mobile so excuse the formatting :)
",1540271260.0
cahva,"async/await is just sugar-coated promise so you wont need to wrap stuff inside .then() but ultimately its still a promise.

next funtion in express means: move on to the next in app chain. Usually in express app you need to have error handler and thats where this particular next(err) will end up.

Edit: this was meant as a reply",1540272568.0
wherediditrun,"Perhaps it would be better to focus on the basics first. That is JavaScript and how http request response behaves. I think that's the reason you find difficulty understanding resources which assume you already know those as a given.

I would also not jump right in any framework. But use plain node. Try to build your own router, understand how async is handled etc. It's also beneficial to learn how to set up your own config like webpack from ground up.

Once you have your own little functional app, perhaps a todo list with auth and maybe some persistence layer you'll be familiar enough to pick up some tool, while still sitting with node docs on other screen.",1540275844.0
mattindustries,"It might be beneficial to provide more information on the type of information because loaded into Python, the type of info being sent to the client, and how often/volume of data changes on the server and in Python. There are quite a few places to cache information. Possible in NGINX before it even talks to Node, in Node, and in Python. Are the users seeing different information from each other? Are they each getting a dataset tailored to their user, are the subsets shared between users? ",1540260137.0
tresslessone,"I know this is not a python sub, but have you tried migrating your flask app to [quart](https://gitlab.com/pgjones/quart) instead? It’s basically an asyncio version of flask and as such is a lot faster with concurrent requests. Migration is really easy too as quart aims to replicate the flask api.",1540259675.0
Gomenassai,[https://gmousse.gitbooks.io/dataframe-js/doc/BASIC\_USAGE.html#import-the-library](https://gmousse.gitbooks.io/dataframe-js/doc/BASIC_USAGE.html#import-the-library),1540257450.0
the_brizzler,Sounds like it is an internal application so traffic is probably minimal...so there should be no issues going to the database. You could also use sessions if needed to store data specific to a particular user. ,1540257998.0
9runkM0nk,"Follow the instructions here:

https://dzone.com/articles/making-nodejs-available-to-all-users-with-nvm",1540238919.0
runvnc,One alternative that could work would be to install `nvm` with permissions for all users to execute it.  Then they can each have their own Node version and global packages or easily switch Node versions.,1540262349.0
vladimirice,sometimes several users share one user so there is no such problem. But if you have different users permissions - it is not a choice,1540274323.0
edclement,Probably not a good idea to have users share npm packages. What if someone needs a different version? Npm packages (even global) really shouldn't be shared by users. I'm assuming you're a Linux admin for some developers? I can't imagine this is the solution they are looking for if they have any clue as to what they are doing with node...,1540250080.0
Charles_Stover,`.env` files are pretty standard.,1540233559.0
rotharius,I store them in my docker-compose.yml in dev and whatever orchestration tool I use in prod (using secrets). But .env is fine too.,1540292781.0
pingueame,"Database. Always

Not now, not tomorrow, but maybe some day, you will fence scalability issues",1540253187.0
,Is this a real question? I hate this sub. And fuck anybody who replies to this dumbass comment. ,1540235738.0
mr_pablo,"Look up the haversine equation.

You'll need a point A to start with of course.",1540236552.0
tswaters,"Databases typically do provide this operation.

- mongo has 2dsphere indexes & geonear queries

- rdms typeically have special column types for points and other geometries, indexes and operators that let you query near.

you can also do it in code.... database will probably be considerably faster.",1540259700.0
daveequalscool,[geolib](https://www.npmjs.com/package/geolib)?,1540273956.0
,"check out knexjs.

[https://knexjs.org/](https://knexjs.org/)",1540233112.0
FunctionallyReactive,"`app.get('/:id', async (req, res) => {`

`let manyRows = await knex('tableName').where('id',` [`req.params.id`](https://req.params.id)`);`

`forEach(row in manyRows)` 

`{`

`if(row.fieldToCheck > 0)` 

`{`

`performActionOnThisRow(row)`

`}`

`}`

`})`

&#x200B;

So to me it sounds like you need to worry about the Database you are using. Knex works very well with PostgreSQL in my opinion. From there you should be pulling back all potential data results. And then conditionally performing actions on any objects that match your criteria.

You could also send back all results and then do the conditional loop / server request from your client (but you should always try to avoid roundtrip server / database requests).

And you can respond to your client side as such: `res.status(200).json({objs: manyRows})`",1540249400.0
zarath180,"Yes your order of operation is correct.
The process goes like this:

HTML >> JavaScript >> Node Server *(this is called the request)*

Node Server >> JavaScript >> HTML *(this is called the response)*

Basically since the internet is based on the client-server model, what we do is send requests from the client webpage (called the Front End) to the server (called the Backend), and the server sends a response after doing whatever it's supposed to do.

So what you need to do is send an **HTTP Request** to your server (which is the Node part). Your server is designed to listen to these requests and respond to them. I'll very briefly explain this.

In order to make an HTTP Request, you can use an object built in to JavaScript called the **XMLHttpRequest** object, also called XHR for short.

What you do is, create an XHR object:
```
const xhr = new XMLHttpRequest();
```

Then you open the request, by giving it some parameters. These are, in order, your request TYPE, your ENDPOINT, and your ASYNC token.
```
xhr.open(""POST"", ""/endpoint"", false);

// These parameters define how your request
// behaves. You should read about them.
```

Then you send the request, with the data you want as a JSON.
```
xhr.send({
    ""data"" : data
});
```

Other things you can do are, use the Fetch API (or other third party APIs), or you can use a form element in your HTML which will do almost the same job I've described without having to write JS for it.

**What you should read about:** Making HTTP requests, XML HTTP Requests, the Fetch API.",1540219315.0
brocococonut,"It might also be good to have what framework/s you're using written in your post so people can give you some boilerplate or example code to tinker with. For example, if it's using something like Express on the server side, you might have a route set up like this:


## index.js - node (example taken from the ExpressJs website)
```javascript
const express = require('express')
const bodyParser = require('body-parser') // Not needed if using an express version at or above v4.16.0
const app = express()

const port = 3000

app.use(bodyParser.json('application/json')) // Tells express to accept JSON and how to handle it
// The following can be used if you're using an Express version at or above v4.16.0
// app.use(express.json())

app.get('/', (req, res) => res.send(/** Send the index file in here however you want **/))

app.post('/', (req, res) => {
    // Any form input will be mapped into the req.body object.
    // This does not include files though... That's another can of worms
    let input = req.body.formInputFieldName

    // Do whatever you want with the above variable

    // Eventually send back a response
    res.send()
})

app.listen(port, () => console.log(`Example app listening on port ${port}!`))
```


## index.html + script - web/client (simple request)
```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"" />
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <title>Example</title>
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
</head>
<body>
    <ul>
        <li ondblclick=""post(1)"">Element 1</li>
        <li ondblclick=""post(2)"">Element 2</li>
        <li ondblclick=""post(3)"">Element 3</li>
    </ul>
    <script>
        function post(input) {
            return fetch(url, {
                method: ""POST"", // *GET, POST, PUT, DELETE, etc.
                mode: ""cors"", // no-cors, cors, *same-origin
                cache: ""no-cache"", // *default, no-cache, reload, force-cache, only-if-cached
                credentials: ""same-origin"", // include, same-origin, *omit
                headers: {
                    ""Content-Type"": ""application/json; charset=utf-8"",
                    // ""Content-Type"": ""application/x-www-form-urlencoded"",
                },
                redirect: ""follow"", // manual, *follow, error
                referrer: ""no-referrer"", // no-referrer, *client
                body: JSON.stringify({formInputFieldName: input}), // body data type must match ""Content-Type"" header
            })
                .then(res => console.log(res)) // Log the response from the server to the console
                .catch(error => console.error(error)) // Log any errors to the console as well
        }

        // Here's an example of the above function using XMLHttpRequest
        function alternativePost(input) {
            var http = new XMLHttpRequest()
            var url = '/'
            var data = JSON.stringify({formInputFieldName: input})

            http.open('POST', url, true) // Sets the method to POST, the url, as well as it being an async request

            http.setRequestHeader('Content-Type', 'application/json') // Tells the server that we're sending JSON

            http.onreadystatechange = function() { //Call a function when the state changes.
                if(http.readyState === 4 && http.status === 200) {
                    console.log(http.responseText) // Log the output to the console
                }
            }
            http.send(data)
        }
    </script>
</body>
</html>
```

This ***should*** work... This is all just to give examples on how things might work though. Here are some resources that could be useful for you:

web - [Using the Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)

web - [Using XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)

node - [Express 4.x Hello World example](https://expressjs.com/en/starter/hello-world.html)

node - [Express 4.x Basic routing](https://expressjs.com/en/starter/basic-routing.html)

node - [Express 4.x API reference](https://expressjs.com/en/4x/api.html)

Edit: Updated to show that you can use bodyParser if your express version is below v4.16.0",1540219070.0
BehindTheMath,"You would need to use JS to make an HTTP request that sends your data to the server. You can use XHR or fetch, or a third party library like axios. ",1540215951.0
awesomeevan,"Hey, it would be good to know how familiar you are with web development in general.

Node.js can be thought of as another backend development langauge similar to php, Python, or Java. It runs a server that the client web browser connects to and can request content from - a html page in your case. The JS files in your Node.js server aren't accessible by the browser (unless you want to do that, but the browser wouldn't be able to use them anyways). 

When that page loads in the browser and the client interacts with it there's a few methods to pass data from the browser back to the server - in your case a Node.js http.createServer, or more likely an express server that is more high level. The most common methods are using a form that submits to an endpoint on your server, or AJAX/XHR request.

Forms are fairly simple and don't require JavaScript to run in the browser. You use HTML and point the form to a URL your server will use to process the form data when the user hits a submit button. Here's some helpful overview https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/forms

Alternatively, you can embed JavaScript into your website that runs in the browser using a script tag and bind to the form submit button and use AJAX to send the  form data to the server. This isn't necessary unless you need to do some extra interactivity or validation in the browser.",1540226168.0
eggtart_prince,"Assuming you already have your node express server setup with body parser, you can wrap your inputs in a form. Your form action will be something like /api/fruits or whatever you want. Your form method will be post because you're sending data. In your nodejs file, create an express middleware to catch that URL in your form action. Inside the middleware, console log req.body and will see a JSON object of your form. Key being the name of your inputs and value as the value. That's all. This is form html to node.

If you want to go html to js to node, you will need to make an ajax call.

I'm on mobile and don't wanna type out code examples. Google them.",1540245824.0
,[deleted],1540225315.0
mtaon,"According to [mysqljs documentation](https://github.com/mysqljs/mysql#preparing-queries), you should use `??` instead of single `?`. This is because table/column names are quoted differently than values. Also make sure that variable `v` is an array but I'm not use if this makes any difference.",1540215108.0
tailfra,good marketing,1540219416.0
harrydry,"haha, thanks for the help guys. i believe it was because i was on the free heroku plan. so the app was sleeping every 20 mins or so. 

have now upgraded",1540220777.0
zarath180,It's fairly instant for me... Maybe you're viewing it on a slower connection? Or maybe the server was slow at the time you saw it,1540201596.0
gejustin,"Nothing really stands out. You have a lot of assets to load, but they're all small. It loads instantly for me and I didn't notice anything alarming when I did a performance profile.

Where are you hosting this app? What level of service are you paying for? Often times if you're hosting things on the cheaper/free tiers of some hosting services, your app will be put in an idle state if there's been no activity for a bit and it can take a long time for it to handle the first request coming out of that state. See Heroku's free tier, for example, https://www.heroku.com/pricing",1540208708.0
ScabusaurusRex,It took a solid ... 1.5 seconds to load for me.,1540215615.0
SiveHost,"Good day

Kindly see the knowledgebase link below that might help you on the Website being slow

[https://sivehost.com/knowledgebase/24/My-Site-is-Slow.html](https://sivehost.com/knowledgebase/24/My-Site-is-Slow.html)",1542355659.0
TheNiXXeD,Can't see anything but KeywordSexTract. Dashes are your friend. Or I guess if you make it singular keyword instead.,1540214043.0
thepatriotlcr,"""code executes faster than in any other language"" lol",1540213632.0
dtaivp,"“A million concurrent connections [on a single thread]” 

Gosh this is rich. She really doesn’t have a clue about technology. ",1540229115.0
thedomham,That's quite some bullshit,1540225050.0
listgrotto,That's not how you spell Go.,1540216802.0
ceestand,"As someone who does both .Net and Node dev, and is happy with both, the only ""reason,"" according to the article, that doesn't apply to both is universal JavaScript.

I'm sure you could plug in a few others and get the same result.",1540236970.0
fistyit,Naaah. Vue ftw,1540202210.0
cahva,IS IT ALREADY CAPS-LOCK DAY?,1540212730.0
elrodrix,WHY ARE YOU SCREAMING? ,1540217016.0
idono-87,I would guess because you pass an anonymous function into post. But that's just a guess. There's to little information to help you. More code and description of what frameworks you are using please.,1540191070.0
dotdotconnor,"Make sure your body-parser middleware looks like this:

    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
      extended: true,
    }));",1540195483.0
alinnert,"Normally I do `return response.send('foo')`, although I'm not sure if it's necessary to return. If this doesn't solve it, my guess is that it has to do with how you register middleware. How do you register the `body-parser`?",1540192918.0
ecares,I was expecting another poinltess blogpost from an unknown agency somewhere in a remote place... and I was not disapointed. ,1540210213.0
Vigasaurus,"!RemindMe 3 days

Interested as well. ",1540192167.0
kryptkpr,"The lack of replies here is quite telling.  You will find a lot less Mongo in the wild then you would think from reading this sub.  Anyone using mongoose to create a User schema is much better served by postgres.. Mongo is a document store and is really only useful when those documents are non homogenous - but in the real world we have schemas. Once you have schemas you dont have to throw 40 years of research out the window and can just use a relational data store. 

The rest of the stack (ERN) is widely deployed, should not be too hard to find a react frontend with an Express backend..  ",1540215137.0
Turbohoosier,"Github.com/topics/react should be a comprehensive list of React apps hosted on Github. Pick a random page, find a topic you know about, view the source code. 

That’s what I’d do. I’m currently working with React rn ",1540193947.0
rwieruch,"Not fully MERN, but uses PostgreSQL instead of MongoDB: [https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project](https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project) It shouldn't be too difficult to exchange the database layer after going through the tutorial of this application.",1540214092.0
jkh911208,"[https://github.com/bradtraversy/devconnector](https://github.com/bradtraversy/devconnector)

&#x200B;

This is full MERN stack build of a app by Bard.

He is a lecturer on YouTube and the Udemy.",1540216929.0
the_brizzler,"The MERN stack is commonly shown in tutorials, taught in full stack code camps and what not because Mongo is fairly easy to setup and query. However, Mongo/NoSQL is typically not the ideal solution once you need to model relationships (and for other reasons). So most companies use a relational database such as MySQL or Postgres and might use Mongo to optimize one small portion of their platform. So it is going to be difficult to find any good size production applications using Mongo as their main database. Most apps you will find will be toy apps which only have basic functionality.",1540225191.0
spybraek,Gatsby,1540194645.0
breadloaf71,!RemindMe 7 days ,1540209202.0
davidnknight,!RemindMe 7 days,1540211291.0
theadammorganshow,I can't offer a full MERN stack app but I can at least show you an API I built using [Mongo and Express](https://github.com/theangulartutorial/lets-get-lunch-api).,1540215702.0
0xygen_15,!RemindMe 5 days,1540217393.0
ninja_star_,!RemindMe 5 days,1540221865.0
Travisg25,!RemindMe 5 days ,1540222698.0
lordluke10,"Open source/openly available repo's using the entrie MERN, MEAN or MEVN stack aren't particually common, most projects are either libraries or either an API or a client, not combined into one repo. Theyre mostly used by companies in closed environments.

Maybe you can search on [https://trends.builtwith.com/javascript/](https://trends.builtwith.com/javascript/) or a similar site",1540242636.0
sconzof,!RemindMe 7 days,1540254748.0
no_bd,"[https://github.com/gothinkster/realworld](https://github.com/gothinkster/realworld) 

Always a good example to look at. Express Backend is using mongoose",1541506414.0
MONSER1001,"!RemindMe 7 days

&#x200B;

It's a nice idea. I wanna know to <3 ",1540193492.0
Leezorq,"!RemindMe 7 days

me too",1540202778.0
phitruongdn,!RemindMe 7 days,1540203817.0
Annoncat,!RemindMe 7 days,1540212795.0
cleveland-indians,"I believe that part of learning code is to stop googling everything and read math books. you kids dont even know what tensor or quaternions or big-o are. tensor ai is replacing your jobs. are you going to pay $100,000/yr for a surgeon who just google's how to do surgery on webmd?",1540236116.0
Groady,Used Loopback 3 at a previous job. Some of the worst documentation I have ever seen. Would never use it again. ,1540242908.0
djslakor,"It's only been out 12 days.

I like that it was re-written in Typescript.  The feature set looks almost 1:1 with Nest.  Seems like people wanting that kind of framework have already adopted Nest. :-/",1540220649.0
kranker,"I do not know, but you could try NPM of course and if you can't get anything going you could run it elsewhere and upload the node_modules folder.  ",1540157747.0
badmonkey0001,"Simpler as just an alias to get the raw data..

    $ alias ghstat=""curl -s https://status.github.com/api/last-message.json""
    $ ghstat
    {""status"":""good"",""body"":""Everything operating normally."",""created_on"":""2018-10-08T22:39:11Z""}
",1540152277.0
paperelectron,"Yup, not writing them to stdout/stderr totally screws you when the time comes to do anything more than login to a server and cat the actual log files.",1540153002.0
runvnc,"That is probably good advice for many projects.  But I believe like most 'best practices', despite the fact that it's called that, you should actually not automatically assume that every project should follow it.  Or if you do follow it, you better complete your logging infrastructure set up and not just leave it with stdout and that's it.

For one thing I have picked up a couple of projects from other people where everything was just dumped to stdout.  Now if they had this nice log routing and querying infrastructure set up, that would be fine.  But they never do.  So I was stuck trying to debug scrolling through tmux or something until it was set up better.  If they had at least put the logs in a file it would have been more manageable.

Because the more you look for these best practice things, the more you find them. And the more you follow them, the less effort you are making to figure things out on your own.  Also, one person's best practice quite often conflicts with someone else's best practice (even though it makes perfect sense in the context of the other practices followed by one person).  

For example this page https://github.com/i0natan/nodebestpractices/blob/master/README.md  suggests using a logger module but has no problem with putting the logs in a file.  Now, if that was such a bad practice, how could this guy get away with showing that?   

The reality is that most projects are not going to blow up into unicorns and require some dedicated infrastructure and staff for log files.  But someone that reads op's post may one hundred percent insist on dumping everything into stdout.  And then the best practice doesn't mention what tool to use to query etc., so then either they will quite possibly just leave all of it in stdout with no routing because they wanted to move on to the next 'best practice' check box, or they spend another week researching and setting up this logging infrastructure.  

Another thing.  And I assume people will find reasons to hate this solution.  I created a comprehensive module for handling time series and logging data and querying for my application called `timequerylog`.  I'm not suggesting everyone write their own custom solution or that it's ideal for massive cloud business to put logs in local files.

However for our application it has been working well for a couple of years.  Because it's exactly what we need and our relevant log data does not exceed the size of what's available on the VPS.

Anyway this article would be at lot more useful if it at least linked to a discussion of setting up the necessary logging/query infrastructure you will need if you dump everything in stdout.",1540158151.0
NoInkling,"Interesting, I kinda just assumed everyone used Winston/Bunyan in production.

It looks like PM2 has some basic [log management capabilities](https://pm2.io/doc/en/runtime/guide/log-management/) (outputting files, JSON formatting, adding timestamps) for those not using Docker.",1540161908.0
r0ck0,"I've written my own logging system that writes directly to the files.  

And it shows formatted ANSI on the terminal.  It's great for CLI tools, but I guess the recommend STDOUT approach in this article is going to make more sense for high traffic websites, and maybe that's how I should have built mine from the start.

But I'm wondering if I can somehow still achive the following, while doing the STDOUT thing?

* Use interactive terminal prompts, i.e. using the [inquirer package](https://github.com/SBoudrias/Inquirer.js#readme) etc
* Still get my nicely formatted ANSI on the terminal, but stream JSON to the log **files**
* Show some info on the terminal, but not all.  i.e. Many of my log messages have a standard message string, but also optionally can include huge amounts of context in JSON (which I don't want on the terminal, I only view that when needed manually)
* Use the same logging system for my CLI scripts and web servers

Is there some middle ground where you can get some of the benefits in the article, but also still do the stuff in my bullet items above?",1540543099.0
tswaters,"The docs are pretty good.

The sailsjs in action book is written by the balderdash guys, so buying it will also help to support them.

I'm fairly sure it was written with 0.x in mind so it may be a bit dated.  They do have insights into the design goals and fundamentals of the framework so even if the examples may be a bit dated, there's probably still a lot of good information in there.

There are a ton of breaking changes between 0.x and 1.0.... I just went through the list and realized about a week of work to get one of my apps running old sails up to 1.0.

I'd start with the docs, try and build a simple site and see where the problems are.",1540147731.0
haidermalik12,"I have a course on Sails.js. You should check it out

[https://www.udemy.com/building-rest-apis-with-sailsjs/?couponCode=DUP\_18](https://www.udemy.com/building-rest-apis-with-sailsjs/?couponCode=DUP_18)",1540211526.0
Raqe-m,"There is a Platzi course that is thought by Mike McNeil (the founder of Sails.js)   
[https://courses.platzi.com/classes/sails-js/](https://courses.platzi.com/classes/sails-js/)",1542745095.0
,[deleted],1540134131.0
mattstrom,"I'm a huge fan of NestJS. I've been doing Angular development for 2½ years now, so the patterns used by Nest are right at home for me. I had been using Express + Inversify before but Nest's DI is much more cohesive.

DI is certainly not a dragged-in hack in Nest; it's fairly foundational to the framework. It is a very powerful mechanism. I wouldn't rule out DI simply because it's an OOP technique; in fact DI is, as this author remarks, [fundamentally a functional paradigm](https://link.medium.com/N40o1H6rdR). And while Nest does use classes for most of its abstractions, I think it is more to leverage the benefits of decorators and metadata reflection that classes and TypeScript bring than to insist on OOP-based thinking. Nest supports RxJS, a library for functional reactive programming, in most places where asynchronous logic is used. Most of the code that I write for Nest (and Angular) embraces many of the principles of FP.

I think Nest is a fantastic framework. One of the most productive ones that I have found in Node. It augments the primary abstraction in Express, middleware, with a lot of well thought out concepts like guards, pipes, and interceptors. And its built-in support for other transports like WebSockets and gRPC is fantastic. Give it a try.",1540192825.0
relativityboy,"Don't have a specific opinion about nest.js but ""just the right amount"" of dependency injection is a good thing. The React + Redux way isn't terrible and since you're using that, I'd suggest something on the server side that ""feels similar"". ",1540130595.0
hbakhtiyor,"if your project is small enough, you may to check strapi
if not, check loopback v4",1540131824.0
bob_lazer,"You could check out [this guys channel](https://www.youtube.com/watch?v=DU6-Sk7s6N0) and maybe get inspired by the React/TS stack he's using.  

",1540142915.0
Adoroam,"Nest, to me feels like express  for people that came from different languages or from react/angular 5+ backgrounds. I don't know why people keep pushing this class bullshit. I use functional programming methodologies and I am so tired of people trying to use classes and decorators. They have no real benefit, especially in javascript. ",1540141477.0
kryptkpr,"Callbacks are not your friend, they will make the code ugly (each question would have to be it's own function and you would selectively chain them).

Async/await fits this nicely:

    let question = ""1"";
    While (question !== ""done"") {
      If (question == ""1"") {
        Let answer = await inquirer(q1);
        question = (answer == 'yay') ? ""2"" : ""1"";
      } else if (question == ""2"") {
        Let answer = await inquirer(q2);
        If (answer == 'farts') { 
          question = ""done"";
        } else if (answer == 'dog') {
          question = ""1"";
        } else {
          question = ""2"";
        }
      }
    }

This needs to be inside an async function block.. i will leave that as an exercise to the reader. ",1540137766.0
um_ya,"Here's a simple example:  
  
    var prompt = function(question){
      return inquirer
        .prompt(question)
        .then(function(answers){
            if (condition === true){
              //loop back to first prompt again
              return prompt('question 1 data');
            }else{
              //ask second prompt
              return prompt('question 2 data');
            }
        });
    }
    
    prompt('question 1 data');",1540148211.0
sigurita,Vorpal looks fine for you case. Maybe you could wrap your Inquirer questions.,1540148842.0
cutcopy,Check out Bull from OptimalBits. Redis-backed job queue with cron support.,1540136258.0
commander-obvious,General rule of thumb: never use setInterval. Use a recursive setTimeout instead. setInterval tends to be the source of pain.,1541064557.0
pancomputationalist,Can you not just use Redis' builtin expiration mechanic for clearing the cache? ,1540129041.0
kryptkpr,"What are you using for production orchestration?  If that doesnt offer any native way to schedule a recurring task, I would run a separate node instance. ",1540128830.0
bernieperez,"I do something similar but I'm on AWS (I think Google Clound has something similar though). If the accuracy of the 1 min timer is not important, but you just want to run a task every 1 min-ish (+-1 or 2 seconds)... AWS has Cloud Watch Rules that can run in a set interval (Interval or CRON schedule).

You can have it call an internally exposed route. This API would do your Count logic. 

This way you can separate your logic from your timer. And if your running multiple instances, only 1 instance would perform the task.",1540135979.0
megaphoneCA,node-cron,1540127377.0
mod-victim,I'm in the same situation literally. Our third party marketing platform has a rate limit on some of their api end points so we cache the data on Redis and have a microservice handling that once per x minutes. ,1540134233.0
bvm,"Surprisingly fiddly in my experience, I ended up running it on k8s as a Cron Job after being let down by some of the available third party schedulers.",1540144320.0
mattstrom,"Do you need to use a timer? It's possible that you could use opportunistic purging. You could have the counting code also set a value that records the time after which the next purge should occur. The counter first checks if the current time is later than the `purgeAfter` time. If it is, the counter purges the cache, sets the next time, and resets the count. If not, it just increments as usual.

If the code related to this functionality is more complex—by that I mean there are opportunities for race conditions—then you might need use a locking mechanism like [redlock](https://www.npmjs.com/package/redlock) to ensure that only one process is dealing with the purge logic at a time. Any sort of timer would also need to employ locking if you care about consistency.

This is not necessarily a less complex solution, but it does eliminate the logistical complexity of having any sort of cron job out there.",1540144985.0
stashp,Timers are a code smell,1540149408.0
runvnc,"Not sure what grunt has to do with it.

https://github.com/MichalZalecki/docker-compose-node-postgres",1540119028.0
snellnici,"As noted by another commenter, you should probably not be looking at Docker-related npm modules but rather at Docker itself. Specifically docker-compose, which lets you bring up several different Docker containers for different purposes (db in one container, your app in another, etc.) and sets up connections between them.",1540120733.0
kryptkpr,"I use a single ""test"" instance of postgres (in a docker), and my test suite (based on jest) starts with CREATE DATABASE, runs migrations (knex), test seeds, then actually runs the tests and ends with migration rollback and a DROP DATABASE.

This way each instance of the test suite gets it's own unique test db that lives only as long as the test does. I run 3 instances in parallel in CI and it works with no issues.",1540129107.0
DukeBerith,"Docker is very useful for this use case, essentially have a container set up with a script to build and seed the database, and during development point all DB access to the local running instance. 

This is literally what we do and we have the production version running on Amazon's RDS/Postgres. ",1540130347.0
TrustyOreo,"I've designed some internal projects with this mindset, though my role includes heavy sysadmin work, so extra hosts were available.

Rough design:
* Prod
** Dedicated DB environment, like amazon rds or a cluster
** Deciated redis cluster
** Cluster of dokku hosts with a private plugin to ""forward it on""
** Load balancer
* Staging
** Identical setup but reclones and scrubs sensitive data from the prod databases on every deploy
* Dev-common
** Another identical cluster but completely deletes the databases between deploys
* Ci
** Droneio - spawns a blank DB container and runs all tests as needed, if passing, pushes to dev and staging. If tagged for prod, reruns all tests and pushes to prod
* Dev-local
** Docker-compose - deploys environments near identical to prod on the localhost
** Standardjs - keeps code clean and consistent
** Husky - npm plugin to run standardjs and other commands precommit or prepush. Like it rebuilds all docs and fails if code doesn't match standardjs. Also autoruns some other linting or testing suites before commit/push

Edit: I'm bad at Reddit formmating via phone... :-/",1540145773.0
psayre23,"You can use Array.prototype.reduce to chain promises serially.

```
countries.reduce(
  (prom, country) => prom.then(() => {
    return doAsyncWork(country);
  }, Promise.resolve()
).then(() => {
  // work complete
});
```",1540102813.0
Netgator,"Rather than use a ""for each"" use a regular ""for"" loop with Await...

for (I=0; I<counties.length; I++) { await ws.scrapePage(counties[I]); console.log(counties[I]); }

You should see these execute in order as expected... For each won't await properly...",1540101862.0
Zeppelin2,"You are writing synchronous code for an asynchronous operation (web scraping). It’s okay though, you were on the right track.

I would make your scrape function a Promise then run each scrape serially using Promise.each()",1540102095.0
gsfraley,"If you can make `ws.scrapePage(county)` return a `Promise` of the result, you can map to make it parallel AND preserve order:

    const data = await Promise.all(counties.map(county => ws.scrapePage(county)));

If it returns a `Promise`, no result, then you can still chain them in a for-in loop inside an async function (which loses you parallel execution):

    async function scrapeAll(counties) {
        for (county in counties) {
            await ws.scrapePage(county);
        }
    }

Usage:

    // In another async function
    await scrapeAll(counties);
    // Elsewhere
    scrapeAll(counties).then(() => { /* Done */ }));

&#x200B;",1540132064.0
WeaponizedMath,Have you heard JavaScript is asynchronous and that we added some wonderful async/await crutches to the manual for exactly this question,1540147813.0
party_egg,"Lots of good recommendations in this thread, just going to add one more thing -- your app will be faster if you request multiple counties at once, instead of serially.  Consider [throat](https://www.npmjs.com/package/throat) to make a small number of requests at the same time, throttled.",1540157222.0
ztasre,Try Node.Js 8 The Right Way.,1540097927.0
csbars,Trying not to sound too serious but you are the reason web devs are frowned upon,1540146625.0
Gomenassai,What does this have to do with node?,1540218476.0
mikeylopez,"u/xxczaki fixed an incorrect link on your README in this PR

[https://github.com/xxczaki/styled-react-boilerplate/pull/1](https://github.com/xxczaki/styled-react-boilerplate/pull/1)",1540091019.0
,[deleted],1540078565.0
___Grits,"A quick search found this, looks like there a few testing clients out there although I personally just spin up a quick client when dealing with sockets from scratch without aws iot or something. 

https://drewblaisdell.github.io/monitor.io/",1540074845.0
cleveland-indians,yeah i use a package called autocannon. its used to find memory leaks but will get the job done. or of course something like wireshark or straight cli ,1540076097.0
DLabz,"Why not try  raw websocket and webrtc implementation? It will help you understand the system better. Once you learn how underlaying technology works, everything will make sense.

And it’s super easy. 

Http server listens for incoming connections, assigns every user a pipe, and upgrades it to websocket.
Broadcasting messages over ws is just sending to server, which then forwards it to all clients, one by one.

Nodejs and chrome is all you need. You create a node server, put on connect listener to it, and when connection is made, you add onmessage listener. Each can log to console. 

Node inspector uses ws to forward logs to chrome. So, once you setup the server and run it node —inspect=9229 you already have a ws server. Add a NIM extension to chrome, and it all just works.

WebRTC is a tad more complex, since you neend to use ws to pass connection data from one client to another, after which server is not needed.

Have fun.",1540079049.0
afonseca08,"I was looking for the same earlier and found a good Google Chrome extension that works nicely.
https://chrome.google.com/webstore/detail/simple-websocket-client/pfdhoblngboilpfeibdedpjgfnlcodoo?hl=en

Yes, eventually I implemented the client but this helped me sanity check the server first.",1540115329.0
alias_willsmith,"""NIM extension to chrome"" being https://june07.com/nim",1540250848.0
ReignNFire,Postman?,1540077251.0
heywinstonillraceya,"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04

Have you tried this boi?",1540074282.0
OriginalKopy,"Any particular reason why you chose to run it on Ubuntu and not heroku or another hosting service? It will drastically cut down your time to get things running and you can focus on building your app. Best advice I can give you when starting out is dont try and solve problems you don't have. Start simple and then move to something more complex when you need to. 9 times out of 10 the time spent on that solution is wasted in my experience.

Also, start with this book. You'll be in a great spot if you follow it

http://www.vanmeegern.de/fileadmin/user_upload/PDF/Web_Development_with_Node_Express.pdf

Buy the book if it helps you to support the authors",1540079438.0
OffshoreITStaffing,"You can directly ask mean stack developers for the help. OIS is a leading software development service provider that has a specialized team of angular experts as well as they can give a right track of code implementation. The owner is Mr. Preet Chandhoke, you can reach him at info@offshoreitstaffing.com",1540208785.0
cubisto,"You can use this, for example

````
// transform to {101: ""Red"", 102: ""Yellow""}
const data = file1.example.reduce((o, item) => {
	o[item.fruitId] = item.fruitColor;
	return o;
}, {})

const result = file2.fruits.map(({fruitId, fruitName}) => ({
	fruitColor: data[fruitId],
	fruitId: fruitName
}))
````",1540076089.0
vv1z,"Not sure how you plan to use this but if you don’t care about performance you could do something like...  
```
const obj1 = example.reduce((acc, cur)=>({
  ...acc, 
  [cur.fruitId]:cur.fruitColor
}),{});

const obj2 = example.reduce((acc, cur)=>({
  ...acc, 
  {...acc[cur.fruitId], fruitName: cur.fruitName}
}), obj1);

const arr = Object.keys(obj2).map((cur)=>{
  const { fruitId, ...rest } = cur;
  return rest;
});

console.log(arr);
```

Edit: formatting ",1540073762.0
tenfingerperson,"Performance wise if you cache the individual objects of the first list using a map (data structure, not the functional operator) of type {id -> object) you can simply traverse the second array and do something like “for each element in the second array: map[element.fruitid].fruitid = element.fruitname”, ",1540074563.0
um_ya,"    var _ = require('lodash');  
    
    var json1 = {  
        ""example"": [  
            {  
                ""fruitId"": ""101"",  
                ""fruitColor"": ""Red""  
            },  
            {  
                ""fruitId"": ""102"",  
                ""fruitColor"": ""Yellow""  
            }  
        ]  
    };  
    
    var json2 = {  
        ""fruits"": [  
            {  
                ""fruitId"": ""101"",  
                ""fruitName"": ""Apple""  
            },  
            {  
                ""fruitId"": ""102"",  
                ""fruitName"": ""Banana""  
            }  
        ]  
    };  
      
    var result = _.map(json1.example, function(element){  
      var fruit = _.find(json2.fruits, { fruitId: element.fruitId });  
      return {  
        fruitId: fruit.fruitName,  
        fruitColor: element.fruitColor  
      }  
    });  
    
    
    console.log(result);  
",1540078318.0
Gatesunder,1.json is malformed; missing quotation marks.,1540071975.0
swinkid,Not sure how much of a help this is but checkout the lodash library docs. Fairly certain they'll be a function to do excactly this and will probably be more efficient than writing your own solution.,1540079926.0
,[deleted],1540067790.0
jkoudys,"If you're using a bundler, then yes. We're in a big optimisation push now fore more tree-shaking and dead code elimination, where this could make a difference. In your first example, you're assigning two functions to `UserController.prototype`, which means you're always going to import the whole class. With the separate methods, your bundler might be smarter about figuring out which function you actually need. If your particular build doesn't need both functions they won't both be included.

This is one of the big differences between import/export syntax and the commonjs approach. I think this is a bigger distinction between your two examples than a class vs functions question. While `import { doSomething } from 'bar'` seems almost identical to `const { doSomething } = require('bar')` on the surface, the separate syntax is much safer/easier to optimise since we know at build time exactly what's being imported. If `doSomething` never calls `doSomethingElse`, and `doSomethingElse` doesn't get imported, we can safely omit it from our bundle.

Now, dead code elimination _could_ work on the class methods, but that's a far more difficult thing to detect in static analysis. Figuring out that every instance of this class (or its children) never once references a method anywhere is a very heavy task. It's also very likely that it might detect instances where it _could_ call those methods, so it leaves those in, even though in practice that method doesn't get called.",1540092201.0
gieter,Read clean code. Learn object oriented programming.,1540068272.0
50653,There might be a tiny difference but it’s unlikely that you or your users would ever be able to perceive the difference. Might as well ask what color paint will make your car go faster.,1540080352.0
Str4yfromthep4th,"If you are asking this question then you shouldn't be worried about performance yet. With that being said, there will be some overhead in a language that isn't compiled yes; however, the amount of overhead is so miniscule that you shouldn't care.",1540070408.0
Shaper_pmp,"They can be useful for packing a lot of facts into your brain, but that won't make you a good developer - for that you need *practice*, and that's the one thing a crash course can't give you.

Think of it as a set of starting blocks to get you up and running, but it's nothing more than that - it won't make you a good sprinter, and it certainly won't win you any races. That requires immense amounts of hard work, and if you're prepared to put that in in the first place then the starting blocks are comparatively irrelevant.

Think of it this way: if crash courses were as good as regular courses, nobody would ever do regular courses.",1540072300.0
cubisto,"It depends on your goals, but it will be useful in any case. 
Good luck on your way!",1540066212.0
bigorangemachine,"Results tend to drive me. 

In the long run; the less lines of code you write the easier your app is to maintain",1540085264.0
lukasbash,"I am not aware of any module that offers this. Although it might not satisfy you, I want to mention that some IDE or editor offers this.

In vscode you can for instance do this on function level. Just mark the function you'd like to analyze and press Shift+F12. It will show you all files where this function is used.",1540062762.0
gajus0,Here is a good start https://github.com/sproutsocial/analyze-es6-modules,1540065913.0
bonanzaguy,"I would opt for B. If you go with option A, you now have to create and manage an authentication and authorization scheme, including routes, protective middleware, and additional entities in your MongoDB, all of which will only ever be used by yourself. What happens when you miss adding the authentication middleware to one of your routes? Not to mention you will now also have to build a front-end.

If you're planning in the foreseeable future to have other pages that would be accessed by other users than yourself, then A would be worth considering. If not, you're introducing a lot of complexity and points of failure/intrusion to do something you could do by simply running a query against your own DB.",1540050449.0
N3KIO,"Separate admin from user. 

By making 2 frontends.

User runs at /*

Admin runs at /admin/*

This also makes the payload for client smaller, as your not including admin functions, this way you keep everything safe. ",1540140160.0
ENx5vP,"You may try the official upgrade tool:

https://github.com/babel/babel-upgrade",1540034075.0
Panacean,I believe you need babel-loader to also be at version 8. You can see this in the install section of the babel-loader github: https://github.com/babel/babel-loader,1540060251.0
gngeorgiev,There will most likely be such a library written in C/C++. You will have to impelement the bindings.,1540030261.0
mistralol,"
This is actually a really tricky problem and the image can also be further adjusted to also trick the detection into failing.

I though about making a service that did this sort of stuff. But wrote it off because it would be such a battle to do and there would not be enough paying users for it.",1540030716.0
injektilo,"Yeah, you can assign whatever you want to `req` or `res`. Most of my Express apps have small middlewares where I assign to `req` and use those properties in my route handlers (sometimes other middlewares).",1540002404.0
idropbows,"so like, middleware. ",1540004200.0
tswaters,"The easiest way, by far is to serve the files from the express application.  You can add the passport middleware prior to static, e.g.:

    app.use('/assets-restricted', [passport(), express.static('path')]

Another option would be setup some custom route in express that has passport in front of it -- this route could proxy a request back to nginx where the static files are.

i.e., 

    app.use('/secure-path/*', [passport(), (req, res, next) => {
      https.get({
        host: 'yourhost.com',
        path: '/protected/',
        headers: {'X-Accel-Redirect': req.params[0]}
      }, resp => {
        resp.on('error', next)
        resp.pipe(res)
      })
      .on('error', next)
      .end()
    }])

That just uses `request` and pipes the response - if you wanna do more handling (i.e. 404 I think would turn into a 500 if passed to `next`) you might consider using a module that wraps `/https?/`",1540004556.0
kryptkpr,"Yes proxy_pass instructs nginx to hit your node server (running express/hapi/whatever) for the given location, you dont need to write html anywhere intermediate.

A very common configuration is to serve static site at / (with nginx static html) and api server at /api with proxy_pass. Nginx is much more capable at keeping a large number of connections open efficiently then node, and static assets generate large numbers of requests. ",1539984327.0
virtulis,"Yes, just run a http server with node and `proxy_pass` to it. There are many useful `proxy_*` directives so better scroll through the docs.",1540019390.0
L33-the-3rd,"Use the reverse proxy to pass the request to Node. It’ll generate the initial html and send it to the browser, using Express or whatever Node http server you use. When the browser gets the html, it’ll make additional http requests for the static files - style, script and images, which will be served by Nginx. (You can chose which file extensions go to node via the reverse proxy, this is normally just set to .html - meaning all other extensions will be served by Nginx).

Node is single threaded, so if all the http requests go to it directly, it has to serve each file individually to each user and usually without cache, so it can get a little slow on image heavy pages.

However if all Node has to do is generate and serve the initial html via the reverse proxy, with Nginx using its caching and multithreaded processes, you get a much faster page load. I’m sure the http Node responses can be improved but seems like a lot of extra work when you’ve already got Nginx sat there.

TLDR; use Node like PHP, to connect to databases and generate the dynamic content, then use Nginx to do the heavy lifting on the static files

",1540020715.0
tswaters,"node by itself won't drop the connections.  It'll happily take a very long time to respond to a request if it is overloaded....  It's your load balancer that will consider the connection as timed out and consider the node unhealthy if response times exceeds whatever configured limit.

Of course, if it's in this state, it is burning resources hard.  You'll see that looking at `top` on the server.

Typically you'll want monitoring on both the server, and the process itself.  Server monitors can look at available memory, cpu being pinned, etc.... the process one might look at the time it takes for `process.nextTick` to fire it's callback, and maybe whether you can still connect to your queue and maybe how many requests were successfully processed.... the process itself can look at the server, so you might pull all of these into a single endpoint.

Once you have that information, you'll need to aggregate it and look for when certain thresholds have been met.  From there, you might configure an alert saying ""hey servers are stressed out need more pls"" or whatever else.  You could also configure some kind of auto-orchestration to spin up new droplets if these conditions are met.

There are generic monitoring tools that can be used for this... at work we use [prometheus](https://prometheus.io/) for collecting metrics and [grafana](https://grafana.com/) is a nice front-end where you can see pretty graphs. Our devops engineers have it setup to slam a slack channel if things are going south but it could very well be configured to automatically increase the number of running containers.

Anyway, this is the general sort of way large organizations with large infrastructures and incredibly smart devops engineers might configure auto-scaling.  Some cloud providers might do some of this for you, who knows.. I don't know specifically what capabilities digital ocean provide.  ",1539995755.0
pingueame,"1) you need a load stress testing.

2) use 1) and configure a monitorig tool like prtg (commercial, windows) , zabbix, nagios, librenms, centreon (free, opensource). 

For take action on status, you can use mmonit. (If load is bigger than X/minute, run this script and start a new backend on other droplet, and/or send an alert, etc)",1539995899.0
Ryan9104,https://www.digitalocean.com/docs/monitoring/,1539976915.0
BrokenPhoneBooth,Make a birthday gift registry so friends and family can coordinate birthday gifts and the birthday person can register for what they want.  I think that app should exist.,1539984675.0
thegunsmith288,Make a reddit clone! Pretty basic and you'll learn a ton!,1540148987.0
Moulinette_,What is stored in the cookie exactly?,1539976535.0
Charles_Stover,"I'm confused by your question. Node uses JavaScript, so you can output whatever text you want as a variable.

If you are wanting to dynamically generate the back end, you can use ExpressJS. It supports variable routing by using `:variable`, e.g. `path/to/:routeID` and then you can use the `routeID` variable to access the string that the user requested.",1539970814.0
byneefattah,<a href=`${route}`/>,1539964988.0
NathanSMB,"I'm going to guess your backend experience is in PHP based on how you are trying to do this. With PHP you write your code coupled with your HTML but when you write a node backend, or most anything other than PHP, the backend is decoupled. Remove the, `<script src=""/js/email.js""></script>` from your index.html file.

Add the following to the beginning of your email.js file.

    const path = require(""path"");

Add the following to the end of your email.js file.

    app.use(express.static(path.join(__dirname, '..'))); // This will allow you to access your index.html and other static assets.
    const port = 3000;
    app.listen(port, () => console.log(`Example app listening on port ${port}!`));

Then navigate to the directory with email.js in it and run the file with the following command `node email.js`

Then just open your browser and navigate to http://localhost:3000 and you should be getting something.

&#x200B;

There is more I want to discuss with you as there are other issues that I see but the most important thing right now is that you understand that the backend code is completely separate from the frontend code.",1539960610.0
Nautigsam,"You should brand it as a ""light"" or ""simple"" parser. It's not a bad thing, but you can not compare it to e.g. yargs which has many more features.",1539961037.0
mansfall,"In your example, \`gameName\` is not a variable, but a value being inserted into a column.  Since you don't explicitly state which columns you want to enter data into, it defaults to all the columns in ordinal order.    So whatever is the first column within \`gameinfo\` table, the value \`GameName\` will be inserted into it... whatever is the second column of \`gameinfo\`, \`system\` will be inserted into it... so on and so forth.

&#x200B;

It's impossible for us to tell you how to properly write this query without you telling us the structure of the table and what it looks like.  Right now it's expecting all columns, or you're providing invalid data types to the columns.",1539985490.0
Komsomol,Have you tried the insert command in isolation in PhpMyAdmin first? ,1539949066.0
chupapuma,The unverified app will affect you as well for local development.,1539988856.0
mod-victim,Why is this being downvoted?,1541606482.0
tienshiao,I believe `authenticated` should be `$authenticated` at the very least.,1539917178.0
Quadraxas,You posted this 17 times. Please stop.,1539936096.0
ENx5vP,Missing Babel.js.,1539917724.0
codeintheshade,Have you created a user model? It looks like you are trying to reference a user object that doesn't exist from the code you've listed.,1539894183.0
Moulinette_,Fuck Udemy fake discounts. This pricing model should be illegal.,1539891714.0
,[deleted],1539892390.0
VanGoFuckYourself,"Huh, this got a bunch of upvotes. Has anyone actually taken this course? I've been using relational databases for 18 (fuck I'm getting old) years, are graph databases worth learning?",1539969426.0
throwawaitnevermind,.... node has a command line interface built into its binary....?,1539887488.0
lenswipe,"What *exactly* is being tested? Are you testing that a client calls the API correctly, or are you testing that the API retrieves the data correctly?",1539882591.0
wolfepvck,"You are kind of conflating two types of testing: integration and unit testing. If you are just looking to unit test, it doesn't make sense to actually call APIs, because at that point you are testing the request lib instead of the actual unit. If you want to only write unit tests, you can mock out any libs/files that do actual requests with mock responses, and then test that those responses are correct.

```js
import { setMockResponse } from 'jest/__mocks__/utils/request'; // Import mock request file

test(() => {
    setMockResponse('/some/url', {status: 200, data: {test: 'test}});

    // Now you can call some code below that will hit that
    // endpoint, and it will return that second object
    // and you can test against that
});
```

Now, my strategy for writing integration tests with a database or whatever, is to set up something like docker that you can set up and tear down, and ensure that the tests can be reproduced. You can set up something like a docker mysql database, then initialize some tables/data and test against that. ",1539886898.0
Vigasaurus,"!RemindMe 3 days

Wondering as well. ",1539882533.0
ProgramAllTheThings,"I've been using fetchMock.getOnce() which takes the path and what you want returned as arguments. This way I know the frontend is both making the right call, and doing the right thing with the returned data. This doesn't test the api server itself.

My api is Rails, so I'm doing Rails tests to make sure that's doing the right things.",1539889240.0
b9Fb2H,"I've just finished writing some unit tests today with jest, it might be useful: [https://github.com/banzaicloud/spotguide-nodejs-mongodb/tree/master/web/app/routes/users](https://github.com/banzaicloud/spotguide-nodejs-mongodb/tree/master/web/app/routes/users)",1539889871.0
kdesign,"Not sure if I understood this correctly, but as far as I know, Jest is used for unit testing, not for API (endpoints) testing.

[Supertest](https://www.npmjs.com/package/supertest) can help you achieve that.

Now if you are referring to testing an actual function which gathers data from a DB and returns it, you can do that with Jest and you can use [mock functions](https://jestjs.io/docs/en/mock-functions) or [manual mocks](https://jestjs.io/docs/en/manual-mocks) to mock modules or database calls. But for exposed endpoints you’ll have to use something else.",1539884550.0
courtewing,"If you're talking about HTTP/REST APIs, then hopefully this will help: Kibana's a medium to large size JS project (~500k lines of code pre-dependencies) and it has a bunch of tests for its REST APIs that use jest and supertest: https://github.com/elastic/kibana/tree/master/test/api_integration/apis",1539891773.0
davidmdm,Let me give you a pro-tip: use mocha ,1539890064.0
mbelmin,Wasn't this posted few days ago?,1539862558.0
SilentWeaponQuietWar,Curious what the advantage is to dinero.js versus something like [bignumber.js](https://github.com/MikeMcl/bignumber.js/),1539887570.0
hydroes777,Cool idea,1539877604.0
cocorote-pedro,"No, you can name your files as you prefer.",1539840654.0
Null_Ping,"No, this is just a personal preference.
You always import them with require() anyway.
So it doesn't matter if you name it user.controller.js, user_controller.js or userController.js ",1539840670.0
Niyok,"Pick one that you feel comfortable with and stick to it.  It doesn't matter because no one can agree on style conventions.  For example whether we should use 3 spaces, 4 spaces, or tabs.   

Consistency matters however. Keep the same styling across your code so it doesn't confuse you later on.

Personally I go by [Google's Javascript Style Guide] (https://google.github.io/styleguide/jsguide.html#naming). ",1539886752.0
mcmouse2k,"Honestly, from having done incremental upgrades across versions I would say that you should probably just sketch down in plain English what exactly each piece of your old webpack config is doing, and then attempt to re-create that from scratch in WP4. The API looks extremely different now, once you get beyond the simple loaders.",1539841835.0
Lou-Saydus,https://m.wikihow.com/Tie-a-Hangman%27s-Noose?amp=1,1539838847.0
djslakor,Ejecting a create-react-app will give you a great starting point.,1539870245.0
iends,"Have experience deploying something to AWS, GCP, or Azure. Preferably using CF, Terraform, etc. Implement a caching layer with redis. Might be worth building your DB layer using both a RDBMS and something like MongoDB.

Quality over quantity.",1539839509.0
j_marchello,"
I think the most important thing you can learn as a backend dev is data modeling. Regardless of what language you’re using, the data model will make or break a system. Learn how to build ERDs and how to think through designing the entities that will make up a feature or application. 

The best way to get this kind of knowledge is to build systems that solve specific problems. Model them out, build them, learn from your mistakes. ",1539842203.0
HoneyBadgeSwag,"I would look to do stuff that creates interesting talking points.

* Implement Redis somehow
* Try adding some unit tests
* Something to show off your knowledge of system design
* Automate something
* Maybe some deployment stuff like Docker
* Write a little SQL or Mongo (Yuck, but I seem to get a lot of database questions in back end interviews)
* Write some nice docs for your API
* Write something in raw node. (More yuck, but it helps me understand node better)
* Make a little stress test. Add A reverse proxy. Maybe a load balancer.

.

* Blockchain **/s**

Also try to keep a little journal of all the interesting little implementations. I'll look back on this at times and I realize how much stuff I forgot that I did. Great for talking points in interviews.",1539842630.0
golovatuy,"Express.js, auth logic (passport.js), ES6, sync vs async, mongodb, mongoose, REST API, security ",1539858027.0
codeintheshade,"A lot of the answers I'm seeing here are barking up the wrong tree. You don't need a ton of different projects covering a wide array of technologies to land a junior dev role. Quality is WAY more important than quantity. Here are a few of the things that companies look for in a junior dev:  


* Testing. Make sure you are doing it and doing it well. You're not going to land a decent job without being able to do testing.
* Git/GitHub. Mostly self explanitory. Make sure you can stage, commit, pull, set up local and remote repositories, create new branches etc. Do it religiously in your projects and create well written messages when you commit. Everybody hates non-descriptive commit messages when they are trying to roll back a feature, so this will get checked. Also, write well formatted readme's.
* Agile practices. Really popular, especially amongst the companies that are actually nice to work for. You should understand epics/user stories and know how to break them down and organise them as tasks on a kanban board like [Trello](https://trello.com/). Impliment this as a way of managing your projects, even if you are working alone, because it shows that you know how to work in a software development team. The vast majority of Uni grads do not and that's a big part of why some bootcamps manage to [get people hired so sucessfully](https://www.linkedin.com/school/makers-academy/alumni/) despite the grads not having a CS degree or any prior CS knowledge.
* SOLID, clean code. Buy a copy of [Practical Object Oriented Design in Ruby](http://www.poodr.com/), read and understand it. Start implimenting the patterns it defines and impress the hell out of whoever is interviewing you by citing examples in your projects when questioned about it. When I was jobsearching, the vast majority of tech tests I recieved were testing how I structured my code, rather than my knowledge of a particular framework or technology.

These are the key skills that you need to show you have - the rest of your knowledge (REST, MVC, ORM's etc) should all be built on a strong foundation of these topics. One good project with all of these features is enough to get you hired, you just need to make sure you don't talk them out of it at the interview!",1539871896.0
hotdoghelper,Upload some data to a DB and build out a working API. Try contributing to open source projects too. ,1539853964.0
nkristoffersen,"Build APIs. 
Integrate with 3rd party APIs like google maps, or Facebook for authentication. ",1539842991.0
drumnation,"Mongo Express React Node, the MERN stack is pretty popular, having familiarity with each piece would be helpful.",1539861230.0
cocorote-pedro,"GraphQL project, Typescript things, variety of knowledge about orms and odms (projects that use one and other)...",1539838293.0
tech3ad,"Hey, I am on the same path as you. Currently, I am building REST API with authentication and authorisation. Hit me on PM. Maybe we can discuss and do some project together. ",1539840051.0
Aurovik,"A high traffic, highly scalable project. And other advanced use cases like security and devops (docker, CI & CD).",1539840486.0
WakeskaterX,"In addition to all the things said below, I would do some reading up on basic algorithms, binary sort, etc if you don't have a CS background, and also I would read the ""You don't know JS"" series to understand the trickier aspects of JavaScript.

These things tend to come up in interviews a lot and understanding JavaScript's weird quirks saves you a lot of time debugging later on.

Algorithms is one of those things you'll mostly use for interviews but is on occasion helpful.  I don't have a CS degree and taking a free online algorithms course was immensely helpful for both the interview process as well as beefing up my skillset.

I guess that's not directly related to your portfolio, but just something to consider for prepping for interviews.

I actually did a bunch of algorithms work and learned electron and react for an interview once.  I spent probably 20 to 30 hours on it for free (was dumb, will not do again), but I added that to my portfolio to get some kind of value out of it.",1539875305.0
JakeInDC,"Know JavaScript and common development patterns that are not necessarily specific to node, like process spawning, handling async calls, routing, etc",1539906637.0
Str4yfromthep4th,I will not hire a node dev unless he/she can write a node extension in C++. This is an absolute-must have-skill. If I ever need something which is performance intensive and you don't understand how to set up bindings then sorry but it's an instant no from everyone.,1539842149.0
zeedinstein0,"I think option 3 is your best bet, as this is also in line with IoT practices. Your actuator should monitor the status of your IoT devices connected. ",1539840440.0
Smok3dSalmon,"Option 3, write the last timestamps to Redis using the device id as a key. You could set an expire time to the entry in redis, or have the client do the math.",1539841748.0
explosive_pooper,"Do you have control over the IOT device ?

If so i would post a ""online"" mqtt message with retain when the device connects and set up a LastWill to post an ""offline"" message with retain.

The lastwill message will automatically be posted if the device is disconnected.

Then when you MERN app subscribes to the topic it will contain ""online"" or ""offline"", it does not have to wait for the iot device to update.",1539862219.0
zarath180,"There's a menu somewhere around the top right corner of the server's page with a ""Logs"" option. Go there and you'll see the application's log, which has your console logs too ",1539808388.0
scarstensinke,Maybe take a look at [puppeteer](https://pptr.dev). You can load a webpage and do some stuff with it. ,1539807277.0
steerben,"Output them where? To a client? As a plain html text?

For parsing an manipulating html you can use https://github.com/cheeriojs/cheerio

Retrieve the html with a http request library of your choice first. ",1539810104.0
dave-rockpower,"It is possible but not in a for loop like you’re doing it. 
To make it work you need to loop the requests and push them to an array - then you can use ‘Promise.all()’ to return a new array of your resolved queries. ",1539809326.0
RushPL,"Pug is not only a great choice for server-side rendering. I successfully use it in my Angular apps, which along with webpack, lets me remove a lot of redundancy in my templates code and make them more readable. Mixins ftw.",1539814479.0
BenjiSponge,"The weirdest thing is how `require('./config').development` works.

Can you try:

    const environment = process.env.NODE_ENV;
    const config = require('./config');
    console.log(config);
    console.log(environment);
    console.log(config[environment]);
    console.log(config.development);
    console.log(config['development']);

? I feel like we're not seeing everything all at once, if that makes sense. A screenshot similar to what /u/ktoto provided would be good as well as a sanity check.",1539811529.0
NathanSMB,"Hey /u/ImtheDr I know this is a late response and you have a fix but I just have a bit more information. When you run the SET NODE\_ENV=development && ... it is adding a space at the end of development. When /u/VectorW mentioned adding the quotes he wasn't talking specifically about the dev script in the package.json. He meant you need to wrap NODE\_ENV=development in quotes. Try setting your dev script like the following and remove your .trim() from the js and it should work.

    ""scripts"": {
      ""dev"": ""SET \""TEST=test\"" && nodemon index.js""
    }",1539833270.0
Dw0,"that's weird. what does this produce?

`const stages = require('./config');`

`console.log(stage[environment]);`",1539804857.0
V1talogy,"Are you sure environment equals development and not ""development"" (quotes in the string value)

Maybe some weird BOM thing is going on, which can be ruled out with  
const environment = JSON.parse(JSON.stringify(process.env.NODE_ENV));

",1539813376.0
WumpyJizard,"Most likely the require runs first on compilation, before the actual run process starts, so the part where you assign the envvar to a variable have not yet run so you are trying to get the 'undefined' property of config which will be, well undefined.

```js
const config = require('./config')

Console.log(config[environment])
```

Should work. Sorry, I'm on mobile.",1539805561.0
VectorW,"This should work and it does for me. Could you please try to run it simply with:

    NODE_ENV=development node index.js

You could also console.log process .env and make sure that variable NODE\_ENV is there.",1539806613.0
ktoto,"[https://i.imgur.com/DWTN8EW.png](https://i.imgur.com/DWTN8EW.png)  
Everything works as expected for me. Sources were copied over directly from the post. How do you run the file?",1539806914.0
graphemeral,Not familiar with running nodemon on windows. What happens when you run the script with node instead of nodemon?,1539810504.0
estevanj,"Show us your code and folder structure, please.",1539812245.0
estevanj,"r/https://user-images.githubusercontent.com/461342/47119887-10b8fa00-d243-11e8-808e-b06bddb62cbf.png

&#x200B;

So I changed to export (using mac) and It works. And if you change SET to set?   
",1539815618.0
randomFIREAcct,Setting environment variables can be tricky depending on your OS and terminal. Try using cross-env ([https://www.npmjs.com/package/cross-env](https://www.npmjs.com/package/cross-env)),1539827503.0
isakdev,"I see that you already solved this but check this thing out :)  


[https://www.npmjs.com/package/dotenv](https://www.npmjs.com/package/dotenv)",1539874019.0
NetOperatorWibby,This is a weirdly formatted article. How is both optimzed and unoptimized for mobile?,1539830878.0
MrLeap,"Are we addicted to complexity? Why not just node blah > text... 

or you could overload console.log (and console.dir, console.error fuckit) to also fs.writefile.... this is so many more lines and words than is necessary. It reminds me of enterprise fizzbuzz. Adding a kafka pump is simpler than this, and I think that is stupid for 99% of use cases.

You worked hard and this is kinda skookum. My 15 years of experience looks at this like it's re-arranging deck chairs on some kinda ship that either doesn't exist or is moving without you. ",1539832015.0
TylerDurdenJunior,Or use Winston or similar ,1539849211.0
akivalevy,"It appears to have been removed with the new UI (which I dislike for several reasons, this being only one) and I couldn't find any notes indicating the removal. 

That said, you can still use the CLI, as you said, to add to and list all your favourites. Fortunate for me, as I prefer CLI.",1539794952.0
virtulis,"Um... Oof, I guess? ",1539802212.0
dylanyo,Someone should just write a tutorial on how to make a tutorial for a useless technology stack.,1539819795.0
elrodrix,"kikli, do you love me? (?",1539786469.0
affplomo,Link broken,1539805829.0
BehindTheMath,Dokku is a Docker image based on Heroku. ,1539755652.0
freebit,"Ubuntu Server VM, Nginx to serve static assets and proxy for node. Pretty simple.",1539795042.0
hkd987,"There will never be a self hosted version of Netlify as Netlifys real magic is in that they are a CDN and serve your website at the node closest to your user. This is no possible as a single self hosted solution. 

No if you are asking about self hosted continues integration server that you set up on say a digital ocean server than Jenkins is the best I’ve found. ",1539913166.0
TaskForce_Kerim,"Well, if you are using any node packages that you find interesting, I suggest you check out their source code. ",1539758827.0
ScabusaurusRex,"Also... code coverage, documentation and open issues area good way to get involved in projects in a low-risk way.",1539819576.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/u_camilo_castro20] [I love it](https://www.reddit.com/r/u_camilo_castro20/comments/9ozjpn/i_love_it/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1539789514.0
50000WattsOfFunkin,What’s the point of this?,1539736706.0
cocorote-pedro,"Is https://enable-cors.org/server_expressjs.html what you need?

If yes, it is literally copy/paste.

How it works: As a middleware, before every requisition, it will set CORS header in its response.",1539722660.0
vladimirice,"maybe there is no one and only tool to provide auth. And there is no best practice about it. Like there is no best practice about using React or Angular. 
Btw I’m using passport. ",1539755554.0
BryanBugfrog,"FusionAuth is a user management platform you could use. It has a node client you can grab from Github, and the platform is free. Solid documentation - [https://fusionauth.io/docs/v1/tech/client-libraries/node](https://fusionauth.io/docs/v1/tech/client-libraries/node) ",1540314848.0
,[deleted],1539719061.0
BehindTheMath,Firebase Auth. ,1539724686.0
skewwhiffy,"That's right, node will always be running: your program contains all the code to make your computer do stuff, and node is the program that makes your code run.

There are some things that node does before running your choice (some light compilation, for instance, to reserve memory for your variables), then it starts running your code until your code throws an exception or the machine falls over.

Most people would then put a layer on top of this to make sure that node restarts when it falls over (using a program like forever, for instance, or even using systemd, or similar. You could even run more than one instance if your code to use more of the computer's resources and processes, along with a liar balancer.

A web application will generally server up an HTML file (either a static file, or one generated in node on the fly). It would also ended ask the necessary JavaScript. The JS file can then make requests to your server.

Clicking any links on your HTML page could also trigger calls to the server.

Hope this helps.",1539721661.0
vladimirice,Try to study request-response HTTP cycle,1539755658.0
Linkzerg,"I cannot write  a long post at the moment. But running a node project on the server is very similar to local environment. I'm using  a dedicated server, pm2 (process manager) and nginx(as a reverse proxy). you can search them. It isn't the proper way to handle the errors as console errors on a published project. So proccess manages wont print them you need to use a middle ware to actually log your errors.  

&#x200B;

I didn't understand what you said there;

"" By which I mean you've got an HTML file, some javascript, but node is server side, so how does that get called in HTML? """,1539722047.0
scarstensinke,Yes i used the admin sdk on a backend with express.,1539719420.0
olivier-tagazok,"Although, there is a nice Tutorial platform https://tutorials.botfuel.io",1539760088.0
m1sta,Appears to be a lot of boilerplate for a simple chatbot. ,1539721773.0
peawyoyoyin,"Tried. The second block worked for me, though. Which version of express are you using? And explain more about the error (e.g. error messages)

Edit: I tested with express 4.16.3",1539692365.0
dgiagio,"I'm the author of Warp and I hope you find this useful.

Thanks.",1539682515.0
dejavueakay,"Interesting, will definitely try it out and compare it to other tools I've used in the past! File size is one of the biggest criterias imo. performance is usually fine, you'd have to fuck up really hard to worsen it",1539684288.0
jbips,"Nice tool, but I'd very interested by how it compare with electron or such. Do you have any benchmark?",1539726370.0
smeijer87,"> Whenever we start a new project we have to repeat the same steps again and again of downloading the dependencies

Exactly the reason why I like Meteor JS.

`meteor create my-next-project`, and voilà, you have your database, tables, models, controllers, sockets, account system, loaded and can start working on the app logic. 

I'll never set up a express/mongo/passport/graphql stack again. ",1539714239.0
vladimirice,"please mind that mongoDb is a bad choice for the most of the regular cases, because of luck of native transactions, relations, constraints, etc. MongoDb is excellent in some special cases. But relative Db like Postgres provides a lot more flexibility for further project development than MongoDb and it is not very difficult to implement. 

Newcomers do not understand this and because of “Mongoose everywhere” begin to use Mongo in regular projects without thinking is it ok or not. ",1539756248.0
OogieFrenchieBoogie,">Whenever we start a new project we have to repeat the same steps again and again of downloading the dependencies

Exactly the reason why I like adonisJs so much.

3 CLI commands and voilà, you have your database, tables, models, controllers and dependencies loaded and can start working on the app logic

I'll never set up a express/mongo/passport stack again",1539682546.0
contrarianism,Would like to see some drawbacks in this article.  Otherwise good overview ,1539889029.0
house_monkey,People building these sort of things in 10 mins makes me question my life choices.,1539692389.0
Str4yfromthep4th,We don't need repositories and npm packages for  snippets like this. Maybe you should also register a domain name for your snippet.,1539664844.0
ecares,Reqching the third pqrty endpoint is an asynchronous call. So you are safe to do this without thinking of workers or threads.,1539649414.0
tastyricola,"Node runs code on a single thread, but it leaves i/o tasks to background workers in other threads (so I guess saying Nodejs is single-threaded is only 50% correct). As long as you write your code asynchronously, it won't block your server.",1539660677.0
vladimirice,"if you perform tasks which requires a lot of CPU (hashing, difficult calculating, sorting in the app itself, not in db), you should use nodejs in cluster mode in order to provide high load application (see pm2, for example). 

If your app just provides calls for the external sources (DB is also external in this case), does very simple processing and respond to a user - use nginx as a reverse proxy in order to work with connections more effectively. It will be enough for the most of the such cases. ",1539669875.0
jdenderplays,Have a look at the [express routing page](https://expressjs.com/en/guide/routing). Scroll down to the part were it talks about express.Router.,1539639353.0
superfake123,"this how I do it  
my app.js  

    const api = require('./routes/api');
    HTTPS.use('/api', api);

my /routes/api.js

    'use strict';

    const express = require('express');
    const router = express.Router();
    const controller = require('../controllers/api');

    router.all('/*', controller.auth);
    router.get('/getObjects' , controller.getObjects);
    router.post('/addfile', controller.addFile);
    router.post('/addfolder', controller.addFolder);
    router.post('/getDownloadURL', controller.getDownloadURL);
    router.post('/updatefilesize', controller.updateFileSize);
    router.put('/updateObject', controller.updateObject);
    router.delete('/deleteObject', controller.deleteObject);

    module.exports = router;",1539652641.0
muddy_b,"app.use('/api', your file with the routes);",1539642712.0
vladimirice,"please also mind about api versioning. Maybe you should use /api/v1/get-object, not just /api/get-objects. ",1539670224.0
danielstaleiny,"there are multiple ways to do it, one of the ways to do it is with nginx. other options are in the rest of the comments. ",1539722776.0
DrunkGenesis,"Follow the express way, or Just use an nginx proxy for / to /api.",1539665602.0
UndecidedFish,Answering the question you didn't ask. Why not use something like socketio or if your after a hosted solution firebase,1539682032.0
mephistophyles,"While I dont disagree with what you're trying to do, each concept isnt exactly the same ""size"". The difference between ""=="" and ""==="" is something to learn in a few minutes. The ""concept of algorithms"" is something that'll take someone months to learn and then years to master. ",1539621574.0
,'Existential crisis' is a great concept for even the most veteran javascript programmers. Cant recommend it enough.,1539634617.0
Bosmonster,"Minor correction: One of your titles is ""Partial functions"", but you probably mean partial application.

Also I would group the functional programming paradigms, they are a bit scattered through the list. Personally I think these are the most important parts to learn of modern JavaScript, starting with a solid understanding of map/filter/reduce and the concepts of pure functions and immutability.",1539639287.0
ElectricityRainbow,"I've been looking for something like this, thanks ^^",1539627232.0
leixiaotie,"This is a good article, and I think it is nice to have better grouping or ordering. For example, some are javascript-specific features such as `Object.assign`, `== vs ===`, `Message queue`. While the other are general-language features such as `recursion` `algorithm` and `value vs ref types`. 

`Memoization` also should've comes under `Design Pattern`. Some topics need to be sorted like `Inheritance` and `this, call, bind` to be near `constructor` and `Classes`. Or `scope` and `expression` to be near `pure function` and `currying`.

I also like to mention that `Hoisting` is a little weird for a topic here. It does not provide any good knowledge and I even considered it an anti pattern. Maybe group that to bad design or antipattern or uncommon javascript behavior section.

And it seems like you're forgetting callback / async / Promise dedicated topic there.",1539663301.0
WeaponizedMath,Why not 34? Why not 32? ,1539625557.0
ezekg,"You should change your password (and anywhere else you’re using it), seeing as you just posted it for the whole world to see. (Deleting this post does nothing—you need to change your password.)",1539619074.0
brtt3000,"You shouldn't add the header or body object to an empty string (eg: `headers : """"+{`) but just use the object and request will encode as correct headers, JSON or POST variables. The way you have it now your headers and body would be `[object Object]` instead of encoded values.

",1539619012.0
nabilboudlal,"I have the same issue, anyone here can suggest a solution?",1539616624.0
n0rs,Also consider [knex](https://knexjs.org/) for query building. It's not an ORM.,1539615912.0
congowarrior,[https://node-postgres.com/](https://node-postgres.com/),1539613902.0
zarath180,"In order to store anything permanently, you'll need a database. This can be an SQL database like MySQL or a NoSQL database like MongoDB or Firebase (or any other way to store data). You have to GET the recent chats as soon as your page loads.

You can store the most recent chats locally in the Local Storage OR you can make GET request to the server/database whenever the page loads for the most recent chats. 

Read about local storage and cookies as well as databases.
",1539613377.0
invisi1407,Use setTimeout() and a regular function instead. That function itself calls setTimeout() with count+1 as the argument. ,1539612156.0
mailto_devnull,"Are you looking to set a timer for 10 seconds?

You could also pass in 10,000 instead of 1000.",1539617017.0
Kchang4,"recursion?

```
function foo(count = 0) {   
  // Make your api call here...

  // determine how you wanna keep calling foo(), right now it's just set to 10 times
  if (count < 10) { 
    setTimeout(() => { 
    // use recursion to call foo() again in 1 sec 
    foo(count++);
    }, 1000);
  } 
} 

// and use it like so!
foo(); // or foo(0);
```

There we go, no globals!",1539620550.0
AndyJessop,Strapi will do this out of the box.,1539598759.0
gi-el,"There is [https://nestjs.com](https://nestjs.com) if you want to write by yourself and manage user/group rights with middleware for example. 

I don't know if it can help you. ",1539615307.0
tucks_the_eskimo,"I enjoyed using LoopBack on one of my projects, docs were pretty solid and route permissions are as simple as editing a JSON file (also has a cli tool). Comes bundled with an api explorer GUI too, kinda like swagger.

Just my two cents, I don’t claim to know much about what other comments have suggested.",1539654293.0
N3KIO," support context sensitive roles/abilities, through the use of middleware style authorisation strategies 

* [https://www.npmjs.com/package/accesscontrol](https://www.npmjs.com/package/accesscontrol)
* [https://www.npmjs.com/package/express-jwt-permissions](https://www.npmjs.com/package/express-jwt-permissions)
* [https://www.npmjs.com/package/connect-roles](https://www.npmjs.com/package/connect-roles)",1539612643.0
Gomenassai,"Read ""Node.js design patterns"" and watch ""Advanced Node.js"" course on udemy.",1539611306.0
___Grits,"Fully understand promises, prototypal inheritance, and the event loop.

I highly recommend Kyle Simpson’s “You Don’t Know JS” it’s free on GitHub but the paperbacks are worth it. ",1539611817.0
laabronjames,"I haven't read many books per say that are exceptionally good. I recently read a book called ""Node.js 8 - the Right Way - Practical, Server-side JavaScript that scales"" and it was a quite good read but I find myself usually just looking in the official documentation. But for an interview on NodeJS there will likely be questions which are specific to NodeJS such as the event loop, callback pattern, avoiding the christmas tree problem, EventEmitter, readable and writable streams, etc... 

I would take a look at those to start and the book I mentioned could be helpful as well.

Good luck!",1539596593.0
booOfBorg,"First Google result to the exact same question. Please, enjoy!

https://stackoverflow.com/questions/4351521/how-do-i-pass-command-line-arguments-to-a-node-js-program",1539594850.0
brown59fifty,"`process.argv` that's all you need, however if you want to make life a bit easier (doing your own cli), take a look at [yargs](https://github.com/yargs/yargs) or [commander.js](https://github.com/tj/commander.js).",1539596716.0
brtt3000,Why post both here and on a question site instead of using google?,1539600442.0
bassochette,"You can withdraw arguments from the process.argv array.

The first two entries will be: node path, script name

So from that you can first splice the array of the 2 first entries and the other entries is what you are looking for",1539602385.0
crisayala16,"Access inside your node file through the `process.argv` array. 

run your node program like so: *node myFile.js 3 5*

`process.argv[2]`   is 3

`process.argv[3]`   is 5

&#x200B;",1539610521.0
HuckleberryC,"I would suggest looking into the yargs module:

[https://www.npmjs.com/package/yargs](https://www.npmjs.com/package/yargs)",1539615351.0
pomelko,"Hm, I read your post and I'd reply you with most stupid answer: *""It depends""*

&#x200B;

**Is it any different than PHP?**

If there are some pros or cons against PHP server or something, well it's thing we can discuss. First of all just to make everything clear, Node.js is a javascript runtime (means it lets you run javascript on server), it is not a framework, but it may use a lot of powerful frameworks (express, adonis, sails etc.). In fact you can do same things with node.js as you do with php server. The real difference is in framework you use. For example mostly I use express in combination MEAN (MongoDB, Express, Angular, Node), express is very fine for routing and other things (everything can be found in documentation). But yes, there are some differences between these frameworks but it's more like syntax-sugar (i mean router in express looks a bit different like in adonis for example, and also some configurations are done in a bit different way).   


**When do decide to use Node?**

Well, if you are used to type javascript (or any kind of it - typescript etc.) on frontend and you're a fullstack dev, who does also the backend part, it's always nice for me to stay whole time in same language (javascript).

&#x200B;

**Understanding Node**

It's not so hard, once you run your first project and install some `npm` dependencies and decide for your main framework (express or other), you read some docs and you quickly get the point of how it works.

&#x200B;

**Your problem**

If I understand your thoughts correctly, use want to use node for small app that can handle CRUD operation upon content. Once you set your database, create a structure it'll be easy for you to develop it in Node.

In my opinion, I can only recommend Node. It's cool, it's modern, has great community and it's powerful.",1539596494.0
brown59fifty,"You already got an answer there, however I suggest you to read more about JavaScript basics, especially its asynchronous nature. It's really the most important thing out there.",1539596945.0
davidmdm,"I read through your server code, and I don't know why you are using typescript. Maybe on the front end it serves you well.  But you pretty much wrote pure JavaScript and through in one or two ""any""s. I would save the build step and run your already perfectly valid code.",1539572430.0
coverslide,"Hey I like your gh avatar, where did it come from? Looks like a trippy screensaver.",1539582384.0
sneffer,"What exactly is metasearch?

Btw, I might be confused on what to do, but searching anything on mobile seems to just pop me back to the search bar?",1539595326.0
tswaters,"You're getting an unhandled promise rejection on this line --

    if ((data[""field""].indexOf(""somestring"") !== -1)){

because `data` is undefined.

your try/catch won't hit that... it's out of scope of the promise handling.  If you throw an error inside a promise function block, it'll bump out to the nearest catch block - but there are no catch blocks so it goes unhandled.

You can fix it like so -- 

    diff --git a/index.js b/index.js
    index e408443..66c41cd 100644
    --- a/index.js
    +++ b/index.js
    @@ -17,21 +17,18 @@ class some_object {
    
                 async.forEachSeries(some_array,
                     (array_cell, callback_func) => {
    -                    try {    //This does not throw an error
                             this.another_method_with_promise().then(
                                 (data) => {
                                     if ((data[""field""].indexOf(""somestring"") !== -1)){//should throw an error!!
                                         callback_func();
                                     }
                                 }
    -                        )
    -                    }
    -                    catch (err) {    //error should be caught here but is not
    -                        console.log(""catch block, but never reached!!"");
    -                        callback_func(err);
    -                    }
    +                        ).catch(err => {
    +                            console.log(""catch block, but never reached!!"");
    +                            callback_func(err);
    +                        })
                     },
    -                () => {
    +                (err) => {
                         if (err) {
                             reject(err);
                         }
    @@ -47,4 +44,5 @@ class some_object {
    
     var foo = new some_object();
    
    -foo.some_method();
    +foo.some_method()
    +.catch(err => console.error(err))",1539558265.0
lineape,"I think you have a misunderstanding of how to handle errors with promises.

Wrapping a try/catch around a promise will NOT catch the error. Not unless you use async/await and await the promise inside the try block.

Here are some code examples showing error handling with promises:

    function promiseThatRejects() {
      return new Promise(() => undefined.trim());
    }
    
    function badPromiseErrorHandling() {
      try {
        promiseThatRejects();
      } catch (e) {
        console.log(e);
        console.log('Will not run at all');
      }
    
      console.log('Will run because this code is not asynchronous and runs before the promise rejects');
    }
    
    function goodPromiseErrorHandling() {
      promiseThatRejects()
        .catch(e => console.log(e))
        .then(() => console.log('Do other stuff'));
    }
    
    async function orJustUseAsyncAwait() {
      try {
        await promiseThatRejects();
      } catch (e) {
        console.log(e);
      }
    
      console.log('Do other stuff');
    }
",1539567631.0
Ryan9104,"You are doing some crazy shit. You shouldn't need the async library with promises, usually.",1539567806.0
alufers,"The node_modules folder contains libraries downloaded from npm. You shouldn't push it to github (you should even add it to your .gitignore), bacause everyone who clones your repository can download it themselves (based on your package.json).",1539544699.0
dwilbank,"Your readme file should also tell everyone to type npm install, even if it is considered common knowledge that they should do so. ",1539546347.0
idoabamboozle,"Go to npm website and read what it does. If you have a node_modules folder you application has requirements of these. 

Express is like apache or nginx in a very basic sense of websever. 

If your looking for some web dev frameworks that builds into a single distributable folder I would look at angular etc

Everything used by app must be on server as well. Which is the benefit of using npm. Upload everything else and npm install on the server. 

Suggest reading more in depth concepts and learning all the items you use. It’s like being a plumber and not understanding what a wrench is",1539552283.0
bassochette,"You'll have two issues if you commit node\_modules folder: 

1 - a shit ton of merge conflicts...

2 - some modules include c code that need to be compiled for you cpu architecture. Therefore anyone cloning your project we'll need to recompile them using the npm build command.

&#x200B;

tips: add node\_modules folder to the .gitignore file",1539602586.0
_imjosh,Probably puppeteer (headless chrome),1539544439.0
ReignNFire,"Cheerio is also pretty easy for scraping, its almost like jQuery",1539546765.0
Muppetmeister,You’re sending an async request/promise and you need to await the response :) ,1539535147.0
tswaters,"There is a problem with that test... I wouldn't expect it to complain about not calling done, though.

After the `User.findOneAndDelete` call you `return done()` -- but this also opens up a callback -- that callback fires after the test completes.  You'll need to move `done` call to inside that callback.... i.e. replace `return;` with `return done();`  That wouldn't cause a timeout though.

I don't normally use `should` -- but usually if these things have a bad assertion, they throw it and it should fail the test.  Maybe this isn't working properly and the error is being swallowed and the callback isn't being fired.

I'd put some console logs inside there to make sure it's doing what you expect. Failing that, putting a debugger on the test process and stepping through it will help.

Also, the name of the test is different in your screenshot vs. the code posted.  Is this exactly the code that failed or is there another test called ""should return http 200 ok - {token} - Creates a Test User and then deletes it.""

edit - yea the test is fine... something in your router code is causing a timeout.  I don't think your request is coming back from supertest at all.  Here's a limited repro which does work --

    
    require('should')
    
    function tester (data, cb) {
      process.nextTick(() => cb(null, data))
    }
    
    describe('testing mocha/should', () => {
      it('should work', done => {
        tester({token: 'test'}, (err, res) => {
          if (err) { return done(err) }
          res.should.have.property('token')
          done()
        })
      })
    
    })
    ",1539559459.0
Gundersen,"Wow, this was a lot of stuff, I'm not sure where to begin. First of, it's good that you aren't trying to make a production system, but only trying to learn. Lesson 1 in security issues ""don't roll your own crypto"" (Google it for many great articles on this topic), so you really should use something that other smarter people have made. This also means that you shouldn't try to combine many different things that others have made, as that is pretty much the same thing as building it yourself, just from smaller pieces. 

It does sound like you don't really have a great knowledge of how all the pieces you mention work or what they mean, so I would recommend you read up on them, one at a time, to understand exactly what they are. 

OK, I'll try to get answer some of the questions in your post, and I'll do it inline, since there is so much here. 

> Yes, you read it well, Cookies :)

Nothing wrong with cookies, pretty much the entire secure internet is built on cookies. 

> Hey gang, in order to get in touch with some backend I started to build small Node Express APIs, so I got introduced to headers, csrf and xss attacks, the use of JWT, local storage and etc. I've spent the whole weekend reading ppls opinions and solutions all over stackoverflow, this is not for production use, I just want to know how all that ""sorcery"" works and if everything I've reading is well asimilated in my brain.

When reading people's opinion on technical solutions you should take their situation into consideration. If you are not in the same situation, then maybe their opinion isn't valid either? If they didn't describe their situation, then you have to ask them to describe it, read between the lines or discard their opinion. Be careful not to accept an opinion as gospel without understanding the reasoning behind the opinion. 

> One of the API I'm building is a user authentication system wich front end I aim to build using a SPA (vuejs*). I won't use sessions.

There is no such concrete thing as ""session"" on the internet, it's just an abstract idea that can be implemented in many different ways. What do you mean by not using sessions here? Exactly why do you not want to use sessions, and how will your application work without this abstract idea? 

> I've read that in order to avoid XSS attacks, tokens should not be stored in localStorage or similar web api, somewhere it's also mentioned that it's a good practice to store it in a response header httpOnly secure cookie, so it will be automatically included in every request.

Not sure where you read this, but I think you are mixing up some terms. XSS is when an attacker manages to get their scripts into your code, and not using localStorage won't prevent XSS, thought it might barely reduce the effect of an XSS attack. 

Cookies are always included in every request automatically, with or without httpOnly. That flag only prevents the cookie from being read by client side javascript. If you have a session cookie then yes, it's a good idea to mark it as httpOnly, as well as secure and sameSite. I highly recommend you read [this](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) article on cookies, even if you feel you know what they are, as they behave very differently how we often intuitively think they work. 

> QUESTION 1: I don't have a secure protocol from dev enviroment on localhost, so I can't set that cookie to secure. I might do it just before deployment to a secure host (Heroku maybe..?) Am I right?

Yes, yiu could use some environment variable to enable or disable secure cookies, but you could also use a self-signed certificate to host localhost securely and access it using https. Apart from the one-time trouble of setting up the self-signed certificate there isn't any downside to running localhost as an https site. 

> QUESTION 2: I read that if it's an REST API, it should not handle session or cookies, mobile apps are out of my interest in this case, so this API would be only for web apps (SPAs), so I could use cookies in this case. Do I get it right till here??

First of all, there really isn't any such thing as REST, but an api can be described as RESTful if it loosely follows some patterns. No two REST proponents can agree exactly what REST is, so it's not worth the effort to try to implement it strictly. Follow the ideas where it makes sense but be pragmatic and deviate where it makes things easier for you. So sure, go to ahead and use cookies with an api, no problem. 

> Using only cookies (I read...) has not protection against csrf attackts, that's when a token in every request will be needed. So my idea was to implement Passport.js authentication using JWT strategy to read the token sent in the Authorization header in every request. At this point, every request will receive a cookie and a token...

CSRF attacks is when the server can't determine if the request came from your frontend (the SPA yiu described) or not from some other frontend (www.evil.com). The simplest way to protect against CSRF is to check the referrer header in the incoming request, and, if you use cookies, enable the sameSite flag on the cookie. 

BTW, JWT isn't an alternative to cookies, it's just a token that can be stored and transmitted in several different ways. You can have JWT stored and transmitted in a cookie or stored in localStorage and transmitted as a header, but you can also store a session key in localStorage and transmit it as a header, with equivalent security. 

So, no, using only cookies is not vulnerable to CSRF in a way that JWT isn't.  

> QUESTION 3: Does it make sense to have in my routes two middlewares (checkCookie and passport jwt) between my protected route and my controller method? So I check both before invoking the controller?
>
> Authentication would fail because not valid cooke was sent or not valid token as well.
>
> I don't know a thing about attacts, but on that case an attacker would need to have access to ahttpOnly cookie plus the tocken needed in every request.

No, that does not sound like a good solution. In security adding more complexity does not make things more secure, it often makes you more vulnerable. 

> As I said, this is only for learning purposes, I want to learn how thos topics are handled. Feel free to correct me in any concept I've tried to learn this weekend.

Great stuff, sounds like you have had a fun weekend! I've tried to answer your direct questions and point out where you have misunderstood some concepts, sorry if I have seemed harsh (I'm writing this all on my mobile in a bit of a hurry). Let me give you some advice on how I would create your API, based on how I've done it in the past. 

First of, try to use things that other, smarter than the two of us, people have made. So, unless you really need it I would delegate the job of managing users and roles to some other system. In other words, you should look into oauth. That is, you can log into github.com, Google, Facebook or any other large or small website. Now you delegate the login to them, making things much simpler for you. Take a look at [Grant](https://github.com/simov/grant) for a library that works with many different sites. This does require that you register your app with that website, but this is fairly easy. 

If you are making something small, then you probably don't need many roles or details about the identified user, so there isn't much difference between using JWT and any other signed bearer token.

Next up is to understand the reason for using a bearer token (like JWT or the token that oauth gives you) vs using a session cookie: centralized storage. I won't go into the details here, as this answer is already too long, but if you are writing a very simple api server for yourself, then a session cookie that just stores the data in memory isn't such a bad idea m. Remember what I said at the beginning, always take into consideration the situation surrounding an opinion.

Finally, if you have an XSS attack that lets an adversary read your (non-httpOnly) cookie or localStorage token, then you have an XSS problem that you need to fix, not a discussion about cookies. I really don't see how you could make a website that is secure even with an XSS hole in it. 

Hope this helps, and please ask more questions if you have them :) ",1539533341.0
oldyoyoboy,"For Q1: for secure, https in your dev environment; I use https://ngrok.io 

It’s the most useful service I never realized I needed until react came along.",1539543955.0
Voidsheep,"> I've read that in order to avoid XSS attacks, tokens should not be stored in localStorage or similar web api, somewhere it's also mentioned that it's a good practice to store it in a response header httpOnly secure cookie, so it will be automatically included in every request.

HttpOnly cookie does *not* protect you from XSS. I think this is a very dangerous misconception. It prevents attacker from reading tokens, not using them.

XSS essentially means the attacker has the victim's browser under their control, executing malicious code inside your domain. The browser will happily send authorization cookies with every request, even when performed by the malicious script.

Others have already given good advice, but I think this bit is worth emphasizing. *If* you are using cookies and don't care about the contents of the cookies on client-side, then slapping HttpOnly makes sense, but also remember that relying on cookies means you've gotta protect yourself against CSRF attacks, which isn't the case with localStorage-based solutions with authorization headers.",1539536756.0
evertrooftop,"If you use a cookie that has authentication information, it's literally a 'session'. ",1539558699.0
JK33Y,"1. You can generate your own keys and launch an https server right along side of your regular http one. just `require('https')` and set up your SSL options.
2. You are correct in that REST APIs do not use session or cookies. You would use JWT validation in this instance. Requests would be made to your server with the Authentication header and JWT; your server would validate the JWT and do some action. JWTs are not necessary unless you need to authenticate a user's identity. It's 100% possible to set up a REST API with only GET routes (ex. DB queries), which would not require a JWT (or a user account for that matter)
3. It does not make sense. If you're using cookie-parser and passport-jwt -- pass the passport-jwt middleware the option `jwtFromRequest: req => req.cookies.jwt`. The JWT auth is dependent on req.cookies being available, which is only possible with cookie-parser. No need to double-dip your authentication.",1539530153.0
twisted-vortex,Isn't double submit cookie a thing? I've an app using the same technique. A JWT token in the header as well as its HMAC in a HttpOnly session cookie. Comparing the hash and verifying JWT in a single middleware isn't that a big deal IMO. ,1539541053.0
natecavanaugh,"I think ""learning Node"" may be a bit broad. If you're already familiar with JS, you know most of Node, but for specific things, like using the file system, manipulating paths, etc, the docs will help. 
For things like streams, substack has a good handbook (https://github.com/substack/stream-handbook), but to start with, you probably won't need them. Any parts you're not sure about?",1539531981.0
FlyingQuokka,"Install `learnyounode` and follow the exercises. Then, read up on Express, and build a web server. Once you're comfortable, start full-stack projects. You don't need books, you need practice.",1539539579.0
Flanica,Watch this talk from Jake Archibald - [https://www.youtube.com/watch?v=cCOL7MC4Pl0](https://www.youtube.com/watch?v=cCOL7MC4Pl0),1539540928.0
0ptimizePrime,Get a library card > login to Lynda.com > search node courses > watch / code along > build your own project > make a million > come back to Reddit and at least give me gold. :D,1539566542.0
contrarianism,"I’m learning by porting a rails app into react/express/mongo/passport. 

Hands-on, deep dive",1539647069.0
Hinjeniero_Rocoso,"First of all, I would want to thank you all for spending the time to give elaborate answers to a random on the internet, and sorry for the delay, RL got me busy (that greedy bitch), and I wanted to elaborate a reply to all of you.

1st of all.- This is for a personal project I want to do in collab with a friend. Since he himself was hesitant in what to tell me (how to start), I decided to ask in reddit what would be the best way.

2nd.- It was him who told me that I would need to learn node and a fullstack environment. 

3rd.- I have a bachelor degree in computer science, but I haven't fiddled with web much, that's why I'm a novice in this aspect. Degrees are overrated anyway, they don't automatically make you good and superior to everyone (Like 90% of my class thinks).

Now, I will go down to individual replies. Didn't expect this much attention, ty all

/u/natecavanaugh /u/Str4yfromthep4th JS seems similar in syntax to python, so this is gonna be fun (no irony here). Still not unsure about anything specific, but thanks anyway :)

/u/FlyingQuokka 
Seems super useful, thanks a lot!

/u/Flanica On it!

/u/0ptimizePrime Im not much of a fan of courses, asked just in case. But thanks too (If I make a million doing something you will get your gold(if I remember))

/u/contrarianism Looks like I will do something like that, learning on the move hahaha

/u/Belar_ More of a backend person, and I need to make an API. Knowing that express skills transfer makes me less anxious, ty. And yeah, the question was a bit too broad :)

/u/Str4yfromthep4th Don't worry, if a person is happy inside-out no time is lost existing, even if the outside perspective says otherwise. The hell did I just say

/u/bigorangemachine Yep, gotta use express it seems.


",1539975403.0
Belar_,"A lot depends on the way you like to learn - read books/tuts, take courses, read code, tinker etc.

Can't say much about the book and course ways, but if you are the investigative type who likes to tinker and learn as you go, there are multiple, good entry points to start with Nodejs. Assuming you know JavaScript and want to learn Node specifically, two projects I would suggest are API or CLI.

If you are interested into back-end development, then you could build some simple API. Do a quick search for a tut (preferably with Node 8 or higher if you are interested in ES6+) to get you started. You are most likely to encounter Express examples. It's the dominant framework, but skills transfer to others (more or less), like Koa, Feathers or Hapi. 

More of a front-end person? Maybe build what you usually do as CLI? Show weather, game scores, build a task scheduler. Same as above, search for building CLI with Node and start form there. Most likely there will be a ""helper"" library used (e.g. Commander, Yargs), but if you would like to go with a pure Node it won't be a big problem.

Once you have a ""Hello world"" being returned form an endpoint or a command, it's up to you to come up with a next step and checking how to get it done. Think of a feature, small one (e.g. how to make text red, how to pass name and return relevant image), something you are interested and will motivate to investigate.

Have fun, don't push it. With every bit of code you will learn a few new ""best"" ways. Good luck.",1539532195.0
bigorangemachine,"I think Express is the only node specific thing out there.

You could do HTTP(S) calls to APIs. That's basically what I do once on every project.

There is also passport for logging in. So I would do a FB/Twitter/Google login. Those are always fun",1539525087.0
buffer_flush,"Console debugging, yeesh, how about just debugging with breakpoints in any of the modern text editors.

Not only is it a better experience, but you can more easily do things like evaluate expressions, see variable contents, etc.",1539528267.0
Str4yfromthep4th,Explanation of the console object which can be found in perhaps 500 other articles already.,1539526549.0
mattstrom,"> I use TypeScript for everything, so the more TypeScript support the better

You can't beat NestJS then.

I'll try to address some of your line items in regard to NestJS:
* Nest is a fantastic REST API server as well server for other transport layers and microservices
* First-class TypeScript support
* Built-in support for async-await
* Nest improves on exception handling in Express and others by introducing the concept of [Exception Filters](https://docs.nestjs.com/exception-filters).
* NestJS is merely an architectural wrapper over a web engine, such as Express or Fastify (in fact quite a few parts are modular and interchangeable). So you choose Express as the engine, you'll have access to all of the Express middleware. Middleware is specific to a framework because the arguments passed between links in the middleware chain must have a certain shape so that downstream middleware will continue to work.
* RE: Code generation. NestJS and commonly used tandem libraries like TypeORM and class-validator makes heavily use of decorators which facilitate a more declarative style. ",1539500989.0
Str4yfromthep4th,Why don't you just try them?,1539499802.0
inabahare,Just give me that pipeline operator already!,1539525817.0
ivakamr,"I'd like a ""if undefined during nested property access"" operator.

let value = ?: obj.a.b.c.d.e || 'default';",1540026812.0
Jozav,On what point(s) did the npm package HTML-PDF fail to meet the requirements? ,1539490287.0
40210,So you have to implement a whole chrome browser just to save a PDF? Is the functionality any different than opening a browser and just pressing CTRL+P and ‘Save as PDF’?,1539487617.0
yungyahoo,I needed something like this! Upvoting!,1539485008.0
cahva,At a quick look I noticed that you are not using http status codes at all (even errors return 200 statuscode if I read the code right),1539465044.0
dudousxd,"Changing from promises to async/await would be good.

Maybe separating routes declaration from the route methods, I usually do that.

I also use consign to load my application, I guess it makes my application more predictable, so it’s easier to debug.",1539469254.0
Stellanever,From my brief overlook looks pretty good. I would consider throwing in a controllers folder to modularize and clean up your endpoints even further.,1539462157.0
davidmdm,"Ok! Not bad. It's fairly clean and easy to follow. 
Here are my remarks, 
All database related logic should be abstracted away. I usually call those files a repository. So you would have user.repository.js and a post.repository.js. That way in your routes all you need is to invoke a method that describes the action. Another great benefit is if you decide to change database, as long as you maintain the repository ""interface"" you can change the implementation but nothing in your routes will change. 

Your promise chaining is a little sloppy. 
In your routes, some promises create new promises without returning the new promise (i.e. Chaining them). This is a big problem because if an inner promise fails and that promise isn't returned, the error will not bubble up to your catch statement, you will have an unexpected promise rejection warning, and the request will hang and eventually timeout. 

Also, jwts are not a good replacement for sessions, which seems to me what you are using them for. For an expiremental project it's fine if you just want to play with them. But you really should be using sessions. 

Other than that, I wouldn't use mongoose default connection but create one explicitly. This comes in handy when you write tests, and for mocking etc.

Keep up the good work. ",1539492360.0
deviated_solution,Check out [kaffeine](https://kaffeine.herokuapp.com/) if heroku dyno startup time is causing your app to be unresponsive. ,1539477572.0
kvadd,"Very interesting code, and a nice start! I have tried to create a more or less clone of instagram or reddit for some time, but I always get stuck on the relationship point. I see you are storing the followers and following as strings to the username, rather than the objectId. Do you have any reasoning behind this?

The reason I'm asking is that there could be an issue if you are able to change username or something in the future. But, at the same time, you don't want to add a relation to all the user for all the posts.

Another issue I've found when trying to figure out the database part of it is that you want to figure out if the user has liked a post or not when listing them. So, if you store the username in each post and a post has 30 000 likes, it could get very bogged down if you need to search in every post to see if the user has actually liked it or not.",1539589697.0
kolten_s,"IMO, you should definitely look into using a database instead of CSV file.
Since it sounds like you don't need anything relational, I would recommend MongoDB or something with NoSQL, then dumping that into a CSV afterwards if you would like, and then upload to S3.",1539450307.0
amenadiel,"I'll assume this shared file is kind of a logfile where every process in the cluster outputs something. 

How much data would each listening instance receive? Depending on the size, appending said data to the CSV could take either a few milliseconds to several seconds. If the request from the frontend is made through ajax or fetch, you could **abort the request** after a certain threshold and assume you sent it to a container that died somehow. If that's the case, you send it again.

&#x200B;

Now, it could happen that the event loop in the backend is blocked by another circumstance and the process does write to the file but doesn't answer in due time so the frontend aborts the request and ask another container to write the same payload. Having duplicate info would be as bad as missing some.

&#x200B;

If I was you, I would store these payloads in a redis cache (just another container that all node containers can connect to) where you would push frontend payloads in a queue. Redis is a key-value store, so the value would be the text that otherwise would have been appended to the CSV, and the key would be something else. The timestamp of the payload? the sha-hash of the payload? Whatever. This way, if two containers write the same payload, it wouldn't be stored as duplicate, but would instead overwrite the key. 

&#x200B;

You still want the contents of these payloads stored as a CSV on S3, so on a certain basis, an independent container would dequeue the last N keys of the redis cache, dump them into the file, and store it on S3. You do no longer need a shared volume.

&#x200B;

I hope it helps, but there are many ways and mine is just a suggestion.

&#x200B;

&#x200B;

&#x200B;

&#x200B;

&#x200B;

&#x200B;",1539474038.0
Dw0,"As said here already, does it need to be CSV? What is the purpose later? How many clients? Is it one CSV per client or mixed?",1539451953.0
moqs,Create a service which is only monitoring the csv files on the shared drive looking for csv files that are not modified  for 1 hour. If anything found then it is sending it to processing. ,1539459544.0
syntheticproduct,It feels like something that could be solved with a package. What is this information? Logs?,1539452713.0
cocorote-pedro,"You can use find (), modify the objects then use docs.save()",1539446249.0
cahva,"Use the { multi: true } option (https://docs.mongodb.com/manual/reference/method/db.collection.update/#multi-parameter). Theres no need to find the records so just use the normal update. For the query you would pass the id’s as an array and use something like this:

’mentions.id’: { $in: arrayOfIds }",1539509714.0
Sankamille,"hey!

look at http://docs.sequelizejs.com/manual/installation/getting-started.html",1539440303.0
FunctionallyReactive,"When using postgresql I typically use Knex as my query builder. It essentially lets you write SQL as JavaScript to query your DB with 

So read the Knex documentation and check out https://devhints.io/knex

Typically your query will look something like:

Import knex from ‘../config/db-connection-string.js’

router.get(‘/:id‘, (req, res) => {
    knex(‘user’).where(‘id’, req.params.id)
    .then(user => {
        res.status(200).json({user})
    })
}",1539441127.0
ttamimi,"Shameless plug: 

“Getting started with authentication in Node.js with Passport and PostgresQL”
 https://medium.com/@timtamimi/getting-started-with-authentication-in-node-js-with-passport-and-postgresql-2219664b568c",1539463338.0
,"... a lot of tutorials show use of passport.

I recommend just rolling your own with bcrypt (using KnexJS can put encryped PWs into your PSQL DB, with Bluebird Promises)

this way you encrypt and store passwords.  you own the whole authentication process & data.

&#x200B;",1539459113.0
,[deleted],1539442264.0
ccb621,"It doesn't matter. I say that because this seems like a decision that could be easily—with, say, 30-60 minutes of effort—changed if your opinions change. Given that, just pick one and move on. I'd guess this configuration file is not exposed to the user, and thus not the most important aspect of your project. This decision is relatively unimportant.",1539445849.0
joelangeway,"It’s a waste of time to try and make property names in data match the conventions of your code. The first time you make use of an api that used to be XML or makes use of some “auto-mapper” in .net or Java, you lose control over those conventions. I prefer to just always quote property names that come from outside my code.

Alternatively, drop yaml and make your configuration a JavaScript module. Then there’s no conventions from another ecosystem making you worry about syntax and none of the limitations and inconveniences of JSON. In case it isn’t obvious:

    module.exports = {
      foo: ‘bar’,
      anotherFoo: ‘yep’, // you can even have comments!
    };

",1539457715.0
Soze224,"didnt read the question. 

the answer is
    snake_case",1539441876.0
r1cka,"Author quotes ""Not invented here"" and then proceeds to invent his own money handler that is very tightly coupled to US dollars. Just use dinero.",1539445799.0
,[deleted],1539459594.0
proper_nonsense,"Not a book but [Learn and understand NodeJs by Anthony Alicea](https://www.udemy.com/understand-nodejs/), he actually goes through parts of V8 as well to illustrate how Nodejs actually works. His [Javascript: Understanding the weird parts](https://www.udemy.com/understand-javascript/) is similar and reminded of YDKJS in many ways. ",1539438443.0
InitialFuture,"Flavio Copes has published a free ebook on Node called ""The Node.js handbook"" which is pretty good at explaining the concepts. I'm about halfway through and it has been one of the best resources so far, since it starts teaching from zero. ",1539447354.0
Str4yfromthep4th,Make sure you are focusing your time in the right place and for the right reasons. Implementation details are not relevant for 95% of people using node. If you're simply curious that's cool but don't waste too much of your time...,1539437539.0
umib0zu,NodeJS the Right Way,1539436214.0
HoneyBadgeSwag,One thing that has helped me was to build a part of an app using raw Node.  ,1539461522.0
x1te,"I suggest you read up on V8 which node is using as its JavaScript engine. I dont know a specific book about it. But there are heaps of info on the net.

https://github.com/v8/v8",1539427913.0
,"I suggest taking a look the the video course offerings at [Udemy.com](https://Udemy.com)

And, check out the books available here (i did a ""node"" search): [http://www.allitebooks.com/?s=node](http://www.allitebooks.com/?s=node)",1539453447.0
ProgramAllTheThings,Have you scanned through the github repo? You can learn some by scanning through the source code.,1539440999.0
bassochette,it's called the source code and can be found here: [https://github.com/nodejs](https://github.com/nodejs) ,1539602670.0
cgijoe_jhuckaby,LOL why is this marked NSFW?,1539400606.0
ohmynano,"Hi everyone! 

I figured it out. I was reading this article https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038
 

And found that:


Array elements are inserted beginning at the 0th index. This means the last element is at array.length — 1.

This is something I learned a long time ago, I totally didn’t connect the two.",1539389027.0
kdesign,"Jokes on them, because I will use `util.promisify` as a wrapper over this library and use async/await!


/s",1539387532.0
ecares,This feels like an overkill troll,1539384235.0
puersion,...why use this when you use the native map and reduce for arrays lol? ,1539404948.0
davidmdm,"I suggest OP tries writing his own promise library, than he will see it's basically also just callbacks, and maybe accept promises into his heart. Namaste.",1539435611.0
shuff703,Who hurt you?,1539400617.0
cgijoe_jhuckaby,"> I’ve torrented like 50 e-books

I hope they were free e-Books.  Here is an Amazon link to purchase a book called [Node.js 8 the Right Way](https://www.amazon.com/Node-js-Right-Way-Server-Side-JavaScript/dp/168050195X/) which is a great resource in my opinion, and written very recently (programming books tend to go out of date rather quickly).  Node.js is up to version 10 now, but 8 is still relevant and has all the new async/await stuff in it.

> I am betting that I can learn it well enough in 5 days to pass a technical interview.

Be warned that companies may ask you what you've built with Node.js, and ask to see your GitHub profile.  My recommendation is to actually build something cool and open source it.  Then you have something to show, and companies can have a look at your coding style as well.
",1539381206.0
mattstrom,"If you're actually aiming to learn the whole MERN stack, React might end up being the limiting factor. Being proficient enough in React and its commonly used libraries, like Redux and styled-components, in 5–20 days to pass a technical interview sounds challenging.

Learning Node and Express in that amount of time is probably doable given that you're already experienced with web development. But Node is very different from PHP, Java, and Python. Thinking asynchronously and mastering callbacks, promises, and async-await takes time. Being hireable after 20 days feels like a stretch since being a competent Node backend engineer requires knowing a lot of peripheral libraries and technologies other than Express and Mongo given the modular nature of the Node ecosystem.",1539383111.0
rmccreary,"I'm a noob, also trying to learn fast for a small contract job. Some notes from my past week:

- Read up on Promises and the more recent ""async"" and ""await"" syntax. Know when to declare async functions: they're pretty cool. I would have saved lots of time understanding this from the start.
- For example, Node's filesystem module (fs) is asynchronous and has you managing file I/O with callbacks, which can be tedious and hard to read. I recommend wrapping its functions in a Promise and using async/await [as seen here](https://stackoverflow.com/questions/40593875/using-filesystem-in-node-js-with-async-await/47190904#47190904).
- npm is a good rudimentary task runner (I'm short on time so I haven't jumped into using Gulp or Webpack). Add `""mycommand"": ""node path/to/script.js""` to the scripts in your package.json. Use `npm run mycommand` to run it. [More info here](https://docs.npmjs.com/misc/scripts).
- I am a HUGE fan of VSCode. It's lightweight, well maintained, and seems made specifically for web development. The debugger knows how to attach to Node processes out of the box. Tons of plugins are readily available for things like React support and Vim-style navigation. Will look and run great on MacOS or Windows if you ever need that.
- I keep seeing recommendations to use NGINX as a reverse proxy web server on top of Express, which should itself be managed by a process manager like PM2.",1539415426.0
meetMyDroneSwarm,"So really my first application is going to have:

1) The React dashboard, probably based off one of these [templates ](https://colorlib.com/wp/react-dashboard-templates/). I want this to pack some Magic. No really I want my dashboard to be visually stunning, the kind of thing that gives the user an experience like they stepped into a 3D world that’s more video game than website.. the sorta thing that would end up on a list like [this](https://www.awwwards.com/websites/reactjsdah/) .. the sites I see on that list are doing killer UX.. wouldn’t get to “visually stunning” right away, but I can set a foundation and keep improving 

2) An Excel ingestion engine which parses an excel file and creates appropriate DB nodes. Also does custom functions like send imported data to quickBooks. Currently I have all this coded in PHP as a custom Drupal module, I’ve got one client whose using this daily to import data into their quickBooks 

I’m not too familiar with all the available libraries and packages for JS, hope there’s a module that can parse excel files 

3) (Eventually, when we open this up to not just miners but traders as well ) there’s going to be a tax preparation suite that ingests data ( in a variety of formats) and after doing the needed calculations (FILO etc) spits out the form that the miner/trader then submits to the IRS

4) integrations with Coinbase Bittrex and all major crypto exchanges, as well as all widely used crypto wallets, so that data can be imported

5) CLI tools for my users to interact with their data and generate reports and stuff like that 

So initially I’m just doing 1 and 2, but as this project grows maybe some of it can be open sourced and hopefully I’ll get some talented devs involved with it ",1539407714.0
,[deleted],1539380581.0
l3l_aze,"No pro tips AFAIK, but if you'd like to also be able to do this on your Android (if you have one) [UserLAnd](https://play.google.com/store/apps/details?id=tech.ula) can run the terminal of Ubuntu 18.04, and ARM devices are supported by NodeJS. [Termux](https://play.google.com/store/apps/details?id=com.termux) is a bit lighter, but also does not have root by default even on a device without root, and has its own special ways of doing many things whereas it's real Linux in the UL app.


I had to setup a few times as I'm still learning Linux, so I made the following script/list of commands to help:


#!/usr/bin/env bash
    
    # To handle triggers from installed packages
    sudo apt install apt-utils coreutils -y
    
    # Update installed packages
    sudo apt update -y && sudo apt upgrade -y
    
    # Install cURL & Git
    sudo apt install curl git -y
    
    # Install NVM...
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
    
    # ...and enable it in the currently running shell.
    export NVM_DIR=""$HOME/.nvm""
    [ -s ""$NVM_DIR/nvm.sh"" ] && \. ""$NVM_DIR/nvm.sh""  # This loads nvm
    [ -s ""$NVM_DIR/bash_completion"" ] && \. ""$NVM_DIR/bash_completion""  # This loads nvm bash_completion
    
    # Install Node + NPM using NVM.
    # Update NPM (so Yarn can install).
    #  Install Yarn.
    #  Enable Yarn in the current shell by sourcing .bashrc.
    nvm install node
    npm i -g npm
    curl -o- -L https://yarnpkg.com/install.sh | bash
    source ~/.bashrc
    
    # Make sure everything is installed by checking versions..
    git --version
    nvm --version
    node -v
    npm -v
    yarn -v


----


After that you may also want to install rsync to quickly and easily synchronize changes between a/some folders in your Ubuntu install and your devices own storage. I just use
 `rsync -rx /from /to`, like `rsync -rx /mnt/sdcard/Projects ./` (while in the `~/Projects` folder in UserLAnd so it's just referred to as `./`). It's only one-way, but when you make changes on the Ubuntu side you can of course rsync or cp them to the device storage.


Using links to try to manage this more easily is not currently recommended because [UserLAnd recursively follows links when deleting](https://github.com/CypherpunkArmory/UserLAnd/issues/275). That should be fixed in the near future though.


You also need some space for it to run its best, on top of the space that's needed for Android to run well. Termux is lighter, so may be best if you've already got limited storage. Again though UserLAnd is real Linux, so generally can be fixed the same as normal Linux whereas Termux cannot.",1539384015.0
runvnc,"I believe that you will be able to build a few working MERN projects in 5 days or 20 days, but it will take much longer to really become proficient with all of those technologies.  And to be honest being really great in all of them is not something that I believe most people achieve.

MongoDB is a totally different type of database from MySQL.  And although it has its own advantages, getting it to handle some things that would be easy in a relational database is trickier.  So beyond the basics MongoDB has a learning curve.  High profile projects have been scrapped because of that learning curve. 

In my opinion, React and Redux are fairly complex, especially when you get into details of lifecycle stuff.  I would want at least a month or two to try to get used to them.  Not to mention JSX is a whole new thing also.

When you get into Node.js, there is a massive difference in terms of code structure versus some bits of jQuery. Everything is strongly modular and/or class based.  So getting really good at modular and OO JavaScript might take some time.  Also you will need to become fairly expert with callbacks, promises and async code.  Personally just that part took me a lot longer than five days.  And then there are hundreds of thousands of modules to sift through and it will take some time for you to get good at selecting modules and get an idea of some that you are comfortable with for solving common problems.

I would want at least 3 to 6 months to become somewhat proficient if I were you.  But you can certainly produce something following tutorials and such in 20 days.

Also just FYI, none of these technologies are actually trendy anymore in my opinion.  There are tons of projects using them, but don't tell yourself you are really on the cutting edge.  Which is not to say they aren't perfectly valid and useful technologies.

But MongoDB despite it's practicality has had overall a very bad reputation for years.  Many Node.js devs decided to switch to Go.  Plenty of developers are switching to Vue or just never bothered learning React.",1539385407.0
endjynn,"I like access-control for achieving this.

[https://github.com/onury/accesscontrol](https://github.com/onury/accesscontrol)",1539388400.0
trylovetom,"Parse-Server, Great Implement.  
[https://github.com/parse-community/parse-server](https://github.com/parse-community/parse-server)",1539440627.0
ducmaxime,"You have to register you domain on the google console. Go to the google credentials console, select you oauth key and add your domain. For exemple if you execute your app on http://localhost:4200 . You have to add this domain. ",1539366394.0
Gnome_0,why do you put your age?,1539360861.0
thundercloudtemple,You made a 15 year old? You made that way faster than I expected.,1539360976.0
nodealyo,Looks pretty good (28y/o),1539360302.0
terminal_styles,Nice (16/f/us),1539377173.0
DarceHole22,That's pretty cool! (23y/o),1539388056.0
panbhatt,where can we get it.. ,1539349482.0
Captain_Braveheart,I dig it ,1539347156.0
ez_memzy,I want,1539347460.0
metalvackal,got an open source licence for this?,1539364807.0
dredding,Is that 3d printed?,1539359728.0
Morphray,Re: buying/selling comments -- Joyent doesn't allow people to indiscriminately sell node.js merchandise. https://nodejs.org/en/about/trademark/,1539365330.0
arapocket,I would buy this ,1539352821.0
broofa,[I'm all like](https://media0.giphy.com/media/CvZuv5m5cKl8c/giphy.gifv),1539349210.0
JoBa1992,Maybe OPs referring to the age of NodeJs according to some recruiters ,1539689297.0
entrasonics,Sick,1539346622.0
OF_Shervin,the best,1539347809.0
elrodrix,Does that model come for men?. I would buy it.,1539354927.0
panzerox123,What kind of school do you go to?,1539355830.0
vaxo101,I'd buy that,1539391663.0
ianfabs,How?,1539418042.0
polite_mike,Link to the source? ,1539373788.0
tezenn,Sell it :),1539360464.0
sirluiss,Handsome model,1539377184.0
AttiiMasteR,"I am not sure about hapi, but in express id write a custom middleware that checks if a valid token exists and if it does, you do whatever you need to do. 


Generally speaking it is not uncommon to have multiple authentication / authorization strategies for different routes. It really just depends on what you are doing and what you need.

Edit: spelling",1539334809.0
JavascriptFanboy,"Again, the solution was very simple and very straightforward, had to search a bit around stackoverflow.

Hapi.js has a way of making the authentication optional.

            auth: {
                strategy: 'jwt',
                mode: 'optional'
            },

so in this case, if I send a token, the  `request.auth.credentials` will be available and otherwise, it will not. So, I don't have to hack around to get the header just for this specific route.",1539362928.0
delventhalz,"Hapi seems overbaked. I would prefer a solution that just verifies/decodes the JWT for me, and then I can decide what to do with the request. I don't like that it combines those two completely separate concerns.

That said, it lets you define your own verify function. Can you save the decoded JWT body as a part of that verify function? Perhaps to the request? So any route handlers that handle the request later can check for the decoded token on the request.",1539348527.0
jhartikainen,"The simplest way to do it both using testdouble or sinon would be to stub out the functions from the module:

    const express = require('express');

    sinon.stub(express, 'someFunction');

If code now calls `express.someFunction`, it would call the stub instead.

If you need to stub the entire module, look into rewire or proxyquire. They can be a bit more complex to use, but they will allow you to do some things you can't otherwise.

Note that with ES modules syntax, you must import the entire module or this won't work:

    import * as express from 'express';
    sinon.stub(express, 'someFunction');

Importing the functions individually will not work:

    import { someFunction } from 'express';
    //if you try to stub someFunction here, it's not going to work correctly.",1539334419.0
theadammorganshow,I'm using different testing tools but here's a [repo](https://github.com/theangulartutorial/lets-get-lunch-api) of mine.,1539351861.0
ccleary00,"Could you share some code we could look at to see exactly what the Express route is doing + what you're trying to test?

Depending on how the code is written, it's possible you could get away without mocking anything at all, and just using something like supertest to test the route.",1539386951.0
vv1z,Despite reading this and poking around IBMs website I still have no idea what domino is or what it does...,1539338335.0
djslakor,"Why does a developer need to know 5 different distros?

Dumb article.  How is this related to node?  
",1539356533.0
Gnome_0,when i was in college i dived in the linux starting from suse and ending with slackware (i think gentoo was there too) sea now i just use mac,1539370106.0
apatheorist,"> Top 5 Linux Distros

> > On /r/node

> > > Doesn't include Alpine Linux

What?
",1539328969.0
Hapkins,"Noob here, but as far as I know Parsoid converts between wiki markup and html, both ways. Might be worth a look/fork? ",1539328436.0
daddyfatknuckles,sounds like something that would be doable on your own. probably on top of jquery to build and take apart the html/markdown. ,1539311356.0
grantrules,"I don't know if you'll find something specific to JIRA's markdown, since they may have extended it, but I use markdown-it to generate html from markdown and it is very extensible, so you can extend it yourself or use some of the plugins for it.

As for going from html to markdown, that's more complicated and less common, but maybe a package like turndown can do it for you.",1539308604.0
Oalei,"I don’t get the question. Wikipedia and JIRA have both HTML pages, right ? Why would you need to convert them to HTML ? What’s the goal ?",1539332004.0
iends,We've considered it but we already pay lots of money for new relic and new relic supports a bunch of different runtimes.,1539488068.0
mattstrom,How about [class-transformer](https://www.npmjs.com/package/class-transformer) and its cousin [class-validator](https://www.npmjs.com/package/class-validator)?,1539295294.0
broofa,"Can you clarify what exactly it is you're after?  Sorry, but ""JSON object mapper"" seems a bit ambiguous.  Technically, wouldn't `JSON.parse()` \+ `Object.toJSON` qualify as a legit answer?  Presumably you're after more than that.",1539348847.0
Fran_29,"In my work we use  a lot this package, https://www.npmjs.com/package/object-translate

It is very easy to use",1539346260.0
mattstrom,"Not a bad idea. I've considered writing my own because, you're right, there's a lot of boilerplate code and it's tedious to wire everything up correctly.

I might suggest creating your generator under [Yeoman](http://yeoman.io/authoring/) rather than rolling your own entirely. Yeoman uses Inquirer like you already are but it has some other features that are convenient like a composibility pattern and a virtual file system for dry running.",1539296810.0
bigorangemachine,"I think it's better to let people learn docker. This kind of project would be like build your own package manager.

As the need for more modules expand; more dependencies and cross compiling you need to do.

For example: sometimes I download a node module that requires a re-gyp and now I need python.

When I did PHP imagemagick needed a font library. That font library had conflicts with some fonts. 

Honestly by the time you learn to build this tool you'll realize docker isn't a big deal ",1539304191.0
JavascriptFanboy,"It's actually pretty trivial and it has nothing to do with Virtuals. From the official docs:

&#x200B;

    db.fruit.aggregate([
      {
        $project: {
          ""store location"" : ""$location"",
          ""has bananas"" : {
            $in: [ ""bananas"", ""$in_stock"" ]
          }
        }
      }
    ])

So, here's my solution:

&#x200B;

    db.stores.aggregate([{ 
    	$project: {
    		name: 1, 
    		items: 1, 
    		hasItem: { 
    			$in: [""Cookies"", ""$items""] 
    		} 
    	}
    }]);

&#x200B;",1539288119.0
Downvotes-All-Memes,"I think you want to read about [Virtuals](https://mongoosejs.com/docs/guide.html#virtuals), but I'm not sure.

Or have ""hasWhatYouWant"" property on your model, and then just dynamically set it but that seems like it means looping across your results twice for every query.

What is your use case?

On second thought, unless there is some complicated use case I can't imagine, I don't see why you'd want to do this vs. dealing with it on the front end with display logic somewhere, though I am interested to see what you have to say about it.",1539285554.0
vir123,I think you are ignoring the isLoggedIn middleware that probably reads a token / cookie and loads the curent user ,1539284091.0
wewannagetloaded,Nice read thanks for sharing. ,1539287851.0
haythem96,"Actually, Anthony already have two courses on node and react you can check them out on udemy(node) and pluralsight(react)",1539283375.0
syntheticproduct,"There's a misconception that microservices are 'simple'. That's not always the case, they can be complex, efficent beasts, include caching, handle millions of concurrent requests, etc.

However, architecturally, as seen from the outside, microservices do one thing and do it well.

https://youtu.be/CZ3wIuvmHeM

https://martinfowler.com/articles/microservices.html

https://martinfowler.com/microservices/

First of all you have to ask yourself what your service will do. That will drive the architecture. Your question is like asking 'hey I wanna build an app, how should I architecture it'. It all depends the constraints on your problem.

There are some books on the topic that might help.

https://www.amazon.com/Building-Microservices-Designing-Fine-Grained-Systems/dp/1491950358",1539268746.0
aguyfromhere,"Look into Express, HapiJS or Koa.

Microservices is just the idea that a small service returns a JSON response for a limited scope of use cases.",1539267340.0
itomeshi,"Take a look at [swagger](https://swagger.io/).

It works with NodeJS (or almost any programming language) to help you define, document, test and generate code for an API.

The examples are also good at giving you an idea of example scope. A common microservice example would be something that RESTfully attaches to a database: you would have CRUD operations for each table, they would enforce your common business logic - must be an authenticated user (which Swagger can help with via OAuth), must not make duplicate entries, etc. - but they tend to be very simple.

&#x200B;

Another way to think of microservices is: I don't want to write 'magic' code. My web service code should be as simple as possible. If an operation is long, I may need a couple calls to complete it (start (create), check status/result (read)), but there should be no very long blocking calls, no huge complex operations, and no arcane results - they should generally take simple XML or JSON as an input, perform a simple operation (interact with a DB for 1-2 transactions, grab a file from disk, calculate one result), and return XML or JSON again.",1539268317.0
PerfectOrphan31,"A little late to the party, but NestJS is a framework built in top of Express that does it's best to enforce the architecture of single responsibility modules. It's written in typescript and looks very much like Angular, but if you can get past the learning curve it really looks elegant in the end. ",1539287758.0
adnbrq,"Microservices are nothing too fancy. You may have read that ""Microservices do only one Job and they do it well."".

This could be anything.

&#x200B;

\- Something that fetches the current weather Information and returns it as you like it

\- Math-functions

\- ...

&#x200B;

The only thing that needs to be solve by (you) is the communication.

How do you access your Microservices?

&#x200B;

You could expose your services via Http for example",1539267441.0
menxit_,It could be good start http://senecajs.org,1539272528.0
kingmi123,A senior in my company made a sweet demo here: https://github.com/WonderPanda/nestjs-microservice-architecture,1539304812.0
gngeorgiev,Read on 12 factor apps,1539272542.0
kyle787,Look at nestjs,1539303821.0
dk01,Check out micro from zeit. ,1539309385.0
Krysalead,"Look at hydra

https://www.hydramicroservice.com",1539319347.0
contrarianism,"“The Tao of Microservices” 

Uses seneca for implementation example.",1539440875.0
opqr549,Checkout Amazon Lambda,1539281491.0
FINDarkside,There's no reason to use JWT if you use it that way. Just create a random token and it'll do the same thing.,1539261963.0
broofa,">Is this the correct approach?

[https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens](https://developer.okta.com/blog/2017/08/17/why-jwts-suck-as-session-tokens)

[https://stackoverflow.com/questions/43452896/authentication-jwt-usage-vs-session](https://stackoverflow.com/questions/43452896/authentication-jwt-usage-vs-session)

tl;dr: No.",1539260080.0
cocorote-pedro,If you really want it (I reinforce that it isn't the purpose of JWT) you could generate the token with `expiresIn: 99999D` and then use a middleware that verifies the token. ,1539275001.0
GridDragon,"That type of funtionality is defined in OpenAuth 2.0 as a refresh token.  Facebook is an OpenAuth provider so they are likely using something along those lines for their persistent sessions.

I've never done it with JWT, but I believe many OAuth libraries use JWTs for their tokens. Reading up on that standard will probably give you some ideas.

Here's a starting point: https://oauth.net/2/grant-types/refresh-token/",1539326281.0
akujinhikari,"You can just set a localStorage variable like `username: akujinhikari` and then have the front end check for the username key, and if it exists, then they're logged in, and then remove it when they log out. Keep in mind this is VERY unsecure. Anyone that uses their computer will automatically be logged in. I'm not sure why you'd want this, but there you go.",1539267954.0
bifot,"Use --experimental-modules and mjs extension for files. Worked for me with Node >= 8. No ESM, no Babel, no Webpack.",1539265442.0
mattstrom,"You're doing sort of an unholy marriage of promises and callbacks. Your basic problem is that you should be calling `callback_func` with an error argument rather than calling `reject`. 

    function test_function(){
        return new Promise(function(fulfill, reject) {
            async.forEachSeries(test_array, 
                (array_item,callback_func) => {
                    try {
                        console.log(array_item.a);
                        callback_func();    
                    } catch (err) {
                        callback_func(err); // Not reject()
                    }
                },
                (err) => {
                    if (err){
                        console.log(""we have an error, but this will never be reached"");
                        reject(""error!!!"");
                    }
                    if (!err){
                        console.log(""no error here!"");
                        fulfill();
                    }
                }
            );
        });
    }
    
     test_function().catch(
        (err) => {
            console.log(""error = "" + err);
        }
    )

This approach still won't let you advance through all of the items if any one has an error without extra handling logic.

&#x200B;

You can achieve the same effect in a purely native form and so that it advances through all of the items regardless of whether there's an error in only a few:

    test_array.reduce((chain, item) =>
        chain.then(() => {
            try {
                console.log(item.a);
            } catch (err) {
                console.log('error!');
            }
        })
    , Promise.resolve())
        .catch(err => { console.log('error = ' + err); });

Or if you are using Node 10, in the shiny new way:

    function* testArray() {
        yield { a: 0 };
        yield undefined;
        yield { a: 0 };
    }
    
    (async function() {
        // Not actually doing any async but it mimics your example
        for await (let value of testArray()) {
            try {
                console.log(value.a);
            } catch (err) {
                console.log(err.message);
            }
        }
    })();

&#x200B;",1539250119.0
MGaafar,"Go is much faster and low level than node, usually for systems programming and performance intensive applications, comparable to C++ or rust

Node is usually for web & IO intensive applications. It's a high level language and can be used with JS on the client side for faster development cycles. Definitely not for intensive processing use cases",1539247866.0
zayelion,"Go should be used first when needing a very tiny ""boot"" application into something written in node. Think of things you would write in C++ and write those in Go. CPU intensive stuff use go, I/O use Node. But honestly its mostly a mindset thing of the programmers. 

What I usually tell people is to prototype and build the first run of the product in JS/Node because requirements and understanding of the task change and grow and JS is a much more flexible language. After that isolate functionality and rewrite it in Go if need be.

Node also has a plus in UI because of Electron. Its great for application development. The real kicker is about talent. HTML/CSS/JS skill set is easier to find and cheaper than most other languages. Development is faster because you are not constantly recompiling stuff. The talent pool will be more likely to be intellectually diverse, artist, UX experts, UI designers, etc. If you have more programmers of that nature use Node, if they are from a more C++, Swift, C#, Java, etc use Go.

So in my opinion Node is better at keeping the workforce sane and cheap especially if they are multi talented. Go is a joy for people very far into the field and the work environment is very well structured and managed. 

Both languages have flaws if the person is coming from a language that requires those language parts (`this` and type conversions odd async handling for JS, no generics and weird arrays and error handling in Go ) It'll drive them nuts. So pick the language appropriate for the team and make sure the team grows in that direction.",1539270707.0
tpppppp,"Your mongo query works as expected. For getting result you want try to use aggregation like this:

db.getCollection('test').aggregate(\[

{

$match: {""Data.webpage"": ""[nba.com](https://nba.com)""}

},

{

$unwind: {path: ""$Data""}

},

{

$match: {""Data.webpage"": ""[nba.com](https://nba.com)""}

},

{

$project: {

\_id: 1,

webpage: ""$Data.webpage"",

username: ""$Data.username"",

password: ""$Data.password"",

email: ""$[Data.email](https://Data.email)""

}

}

\])",1539242096.0
mattstrom,"Shot in the dark here, but have you run `xcode-select` at all since you upgraded? Whenever Apple updates their license for Xcode, the utilities that are bundled with it as well get blocked until you accept the license again. Could include the C compiler that some Node modules need.",1539216722.0
l3l_aze,"How were Node & NPM installed?


Are you using the same exact version of Node & NPM on both machines?


No expert, barely even an amateur with how sick I am right now screwing my brain all up, but this reminds me of problems I had until I started using Yarn instead of NPM long ago, and more recently I had very similar problems on Linux until I used NVM to install Node + NPM.",1539218031.0
BrainWashed_Citizen,"I think it's the version of xcode. If you have xcode 10, then there's just a bunch of issues that the development haven't catch up to yet. So downgrade to xcode 9.4 and see. Not 9.4.1, but 9.4.0.

",1539225390.0
Adoroam,Just put Linux on it and then everything will work.,1539219341.0
CherryJimbo,The new `recursive` option on `fs.mkdir` is really nice to see. No need to load `fs-extra` or `mkdirp` for that functionality now.,1539233005.0
CommandLionInterface,"> The Windows msi installer now provides an option to automatically install the tools required to build native modules.

God I love a good quality of life update",1539236619.0
PM-ME-YOUR-SSH-KEYS,"Whew, they finally added public-key-creation to the crypto module!",1539244408.0
NetOperatorWibby,This is a damn good update.,1539265022.0
mistralol,"
Thats great. But... If you have node 4, 6, 8, 10 apps. Now you have 5 full environments to maintain rather that one.

For a quick example.... The script produced the following error multiple times during creation because the base docker image is broken (opps).

debconf: delaying package configuration, since apt-utils is not installed

^^ this means sudo vim and the other tools that were installed were not actually setup correctly by the installed package.

I then jumped into a shell and ran apt-get dist-upgrade so the following were already out of date in your fresh image. Note: This are all security updates....

The following packages will be upgraded:
  curl git git-man imagemagick imagemagick-6.q16 imagemagick-common libcurl3
  libcurl3-gnutls libcurl4-openssl-dev liblcms2-2 liblcms2-dev
  libmagickcore-6-arch-config libmagickcore-6-headers libmagickcore-6.q16-2
  libmagickcore-6.q16-2-extra libmagickcore-6.q16-dev libmagickcore-dev
  libmagickwand-6-headers libmagickwand-6.q16-2 libmagickwand-6.q16-dev
  libmagickwand-dev libpython2.7-minimal libpython2.7-stdlib libxml2
  libxml2-dev linux-libc-dev openssh-client python2.7 python2.7-minimal

Be extremely careful what you pick as a source with docker...
",1539210638.0
wowee123456,"First, write a website in node that has user contacts.",1539195830.0
TyrionReynolds,"Each user object has its own array of bought items, so if you write code to display each user you’ll want to do something similar to display each boughitem within the user.  So nested loops.",1539186418.0
BLOZ_UP,"Makes sense, MongoDB as a company has a big focus on their DBaaS, this strengthens that.",1539200499.0
javascript_brah,"looks like it's time to shift everything over to postgres

i moved to mLab because of the constant email spamming and upselling in MongoDB Atlas. I have no desire to do business with that company.

&#x200B;

PS: what happens with Heroku's mLab addon?",1539210884.0
HideousNomo,So mLab is being dissolved and all customers need to move over to Atlas?,1539202980.0
spiritualpigeon,Any ideas how much the buyout was?,1539206681.0
Gnome_0,so i have to migrate manually?,1539202010.0
niksko,"Did mLab improve? I used their service about a year or so ago and it kind of sucked... No API for provisioning and configuring clusters, kind of an unintuitive interface. The buyout surprises me.",1539258202.0
ScaleGrid_DBaaS,"For any mLab customer looking for alternatives before they're forced to migrate to MongoDB Atlas, you should look at these three alternatives - ScaleGrid, Compose and ObjectRocket. ScaleGrid also has a Startup Program where you can get 90% off for 12 months, good alternative to mLab sandbox: r/https://scalegrid.io/blog/mongodb-acquires-mlab-what-are-the-different-mongodb-hosting-alternatives/",1539362924.0
coolcosmos,"First, remove the promise style async. Then, I see that in your code you use try for two async operation: the mongoose call and the board.addThread call before. If one of them need to be handled separately (seems to be your case) you should put them in different try/catch blocks. Then, yes you should have a switch for the err.message. You also mention that it could be a validation error or a connection error but don't forget that there can be a lot of other error case (timeouts, database overloaded) so always have a else case with a generic boom error.",1539194643.0
MrStLouis,The example docs for objectionjs have a great error handler. It's essentially a chained switch where you handle different errors and send various http responses . it can be easily modularized too,1539188172.0
yonatannn,"Is this helpful?
https://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/",1539253189.0
Gnome_0,"Change

    type: sequelize.QueryTypes.UPDATE,

for

    type: sequelize.QueryTypes.BULKUPDATE,

&#x200B;

&#x200B;",1539202528.0
sintaxi,"It would help greatly to know the size of your image. Generally speaking the latency and size of the image tend to be the problem, not server performance.

Keep in mind you only write once but you read many many times more - so with that in mind, its worth compressing/cropping/etc when you write. Its not unusual to store several size/crops of every image that gets uploaded on a project like this. I personally wouldn't use mongo for something like this. Id use mongo for data that needs relationships and search ability. You can store the files on something like s3 once you've done all the crops/compression. Then keep a local cache for faster load times. If you have designed it correctly you should be able to blow away the cache at any point and the application will work seamlessly to the end user by fetching the files from s3 to warm the cache.

Hope this helps.",1539160443.0
L33-the-3rd,"Personally I wouldn't use Node/Express to serve static files, when Nginx is way more suited for the task (speed, caching etc). Node is single threaded by it's nature, and whilst you can run several instances, you don't really want your main process being taken up by serving files. Leave the auth/api processing to Node and let Nginx do the heavy lifting.

In addition to this, I have a setup where Nginx will reduce the resolution and compress any image on the fly, as it serves it. It also caches the compressed images, making any additional requests even faster. Even without the cache, the whole resize and compress is noticeably quicker than serving the original file. It also means I can request whatever size image I need from only uploading 1 high quality file.

Setting up a reverse proxy in Nginx for your Node servers is simple: [https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04#set-up-nginx-as-a-reverse-proxy-server](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04#set-up-nginx-as-a-reverse-proxy-server)

Credit to Ben Sturmfels - his instructions are here: [https://stumbles.id.au/nginx-dynamic-image-resizing-with-caching.html](https://stumbles.id.au/nginx-dynamic-image-resizing-with-caching.html)

&#x200B;

&#x200B;",1539164581.0
mbelmin,"I have not attempted this so far but my approach would be first to resize images before saving them to a size acceptable, 1080 by shorter side is way more than enough. This is to prevent images being to large and thus reduce time needed. I would save images in a public folder with hashed names and save only the path to the image in the DB, on the request, you check if the user is authorized to see the image (is the image private or not) and if so you serve him only the path to the image and after this it's up the speed of your server and the download speed of the user. Another real world use would be to use a cloud storage but don't bother with that. This may not be the best option but it may be enough for your clone app.",1539160647.0
captain_obvious_here,"> The route that requests a photo by its id and then returns it takes 2575ms.

This is a surprisingly long time. I see two possible explanations :

1. Your pictures are huge files, or your network is quite slow, and it takes time to send from server to client
2. Your database is really slow, or your code is far from optimized, and it takes time to get the path from the ID

Can you give us insights on these two points ?",1539164133.0
tobsn,"S3, reference in DB to path on  S3, config holds bucket name/s3 host. use cloudflare, then on Argo on top. or use cloudfront on top of S3.",1539164628.0
another_josh,"You’ll want to look into lossy and lossless image compression. Agree with the user above suggesting storing on s3 and storing multiple versions of the file. You basically want:


1. Upload original to s3
2. After successful upload send a copy of the file through a lossy compression, either a paid service like kraken.io or one you host on a server. 
3. After successful compression store compressed file url in db
4. Serve images preferring compressed image but loading original if no compressed version exists 

You can also look into what Instagram and medium.com do by loading a blurry 4kb placeholder image and then replacing with a full resolution image after it downloads. ",1539185957.0
XyploatKyrt,">How to efficiently serve user photos

Use nginx or serve them from AWS S3 via a CDN

/thread",1539186463.0
ipullstuffapart,You should look into playing around with Minio for this.,1539160203.0
6eReddit,"Since you're using mongo I'd recommend storing your images in mongo using gridfs.  You can implement caching solutions on top of this in a variety of ways (nginx, cloudflare, akamai, etc.)

Storing them on the filesystem leads to interesting challenges.  For example, if you need to scale your node application across multiple servers you'll need a way to replicate the file system across those servers.  This can become tricky/messy.  Using the file system also becomes quite problematic if you start exploring serverless or container-based deployments.

Check out https://github.com/h2non/imaginary as a service for resizing/cropping/compressing/etc your images at the time of upload.  You can easily run this service alongside your node application as a microservice and scale it horizontally if the need arises.",1539191068.0
kashubak,"Use S3, and build a proxy endpoint :) I’ve done this multiple times in the past, and it’s great. All my node api has to do is redirect, and I don’t have to make my bucket public.",1539191204.0
thedragonofshangrila,look into cloudinary ,1539191322.0
thefragfest,"Consider having you application accept the file and then put it on an s3 bucket or cloud provider, then store the URL of that image in the DB. Then when you request an image by id, you ping the database, get the URL, and send that back. Then the client (or server-side renderer) inserts that URL and the caption, etc in an image tag and it loads from another server.",1539195713.0
KawiZ900,"I see a number of replies that talk about using S3; this is a great option.

&#x200B;

Then there are replies where it's mentioned to have a processing server that handles the resizing. This is actually the common approach to these types of applications. In the real world, you'd use something like AWS S3 buckets, with AWS Lambda to do real time processing of image sizes.

&#x200B;

If your app is being used as a way to demonstrate your coding skills, you should include some of these AWS platforms as part of your architecture. Not only would you be able to show of those skills, but you'll learn how they are used in a real-world environment. ",1539216148.0
josewhitetower,RemindMe!,1539158715.0
jknielse,"I’ve used both a fair amount, both for work and for personal projects. I’ve used python much much more, but node definitely stole my heart even though I only had about one year where I actually used it consistently in the work context. Here would be my gotcha primer:

Don’t be afraid of asynchronicity! In python it can be a pain, but in node it’s a breeze

Beware of memory limitations! Node has a pretty tight cap on the amount of memory that it can allocate in a single process, so plan accordingly if you’re doing something memory-intensive (~1.7G is the upper-limit, and even then, only if you invoke it with a flag to raise it from the default of 1G)

Modularize much more aggressively than you would in python. Although function-level abstraction strategies are pretty much applicable to any language, I’ve found that the point at which you’d usually want to break something off into a stand-alone package is much smaller in node, but package management is way more intuitive IMO. Creating and publishing a new node module can be done in literally a hand-full of minutes, and without ever having to open a web browser! Capitalize on that if you want to share useful components of your projects, and even if you don’t want to publish anything, npm can let you “link” to node modules that are essentially just directories in your file system. The more stand-alone modules you can break your projects into, the more easily you can test the crap out of your code, and hooking up CI to run tests on those individual modules becomes an absolute dream! (I’d recommend CircleCI just because they give you more than enough free CI time for small node modules, and it takes practically 0 setup time if you stick each module in its own github repo)

Inconsistent coding styles can hurt quite a bit. That’s true in any language, but I’ve found that it payed off quite a bit more with node to poke around some small node modules on github to get some flavour for which style(s) you want to adopt when you start writing your own code. I feel like with python you can eventually develop pretty good coding style by trial and error as you do projects, but with node there are a lot of different paradigms to choose from, and some are not necessarily things that you’d think of if you just #doitlive

Leverage existing tools extensively! Micro-services are pretty easy to churn out if you use tools like pm2, which take the pain out of having to cd around to start your various services, or restart them when they die

async queues (and similar processing paradigms like cargos) fit much more nicely into node programs and modules than they do in most languages. Callbacks and promises are the norm in node, so leveraging queues and cargos results in code that looks pretty similar to most of the code you’ll be writing anyway. It’s much less of a readability hit to use them in situations where you might decide that it would be overkill in a python script.

Be nice to the event loop! If you’ve got a big chunk of expensive synchronous computations, you might find that your server response latency takes a big hit. This is because node relies on a co-operative async scheduling strategy, so if your program hits an expensive chunk of synchronous code, it wont be responding to any requests until it’s done chewing on its computational cud. Those are often the situations where you’d want to be using queues. Even though it wont reduce the computational load, it also wont starve the event loop, so your server’s response latency for small requests will be significantly improved.

Perform bulk operations wherever you can leverage them for efficiency. Using the cargo pattern can let you bulk pretty much anything you want without sacrificing readability or performing coding gymnastics to gather up groups of objects just so that you can call a bulk API. Writing rows to a table is a classic example:
Let’s say you have a couple endpoints that need to write a single row to a table, and that they need to perform some other computations after the row is written. If you just write to the table, wait for the callback, do your computations, and respond to the request, you may wind up with extremely disappointing performance if your server starts handling quite a few requests at once. Although they are all asynchronous, the database will probably need to do a lot of locking and unlocking of the table to eventually satisfy all of the insertions that you’re asking it to do.
Instead, you can write a small wrapper around the database interface that pushes row insertions into a cargo, and the worker function of the cargo can do a bulk insertion of all of the accumulated rows. The interface is the same for the caller of your wrapped database interface. They still say “insert this row, and call me back when you’re done”, but behind the scenes the cargo will be gathering the insertions into chunks of 500 rows at a time, and the throughput performance will be orders of magnitude better.

Anyway, I should sleep. Node is awesome, and I really hope you experience the magic I did when I started realizing the sorts of things that are easy in node despite being a contortionist act in most other languages :)",1539166696.0
ponzi314,I use to be a python fan but recently switched to Node or certain things. Love it! VS code will works really well for it ,1539156844.0
inabahare,"> Other than the syntax being a bit more “dirty” than Python

How so?",1539166872.0
DrFriendless,"I recommend using TypeScript as a preprocessor so that the JavaScript is a bit less wild and woolly. 

You'll miss list comprehensions.

Promises and async / await are a bit different, but cleaner than the Python coroutines package. I recommend learning async / await ASAP.

I've never used pip a whole lot, but package.json and node_modules is a bit of a horrible mess that works OK.",1539157131.0
bigorangemachine,Read up on promises or jump directly into async/await,1539190256.0
necrosexual,"Don't bother, go to golang",1539156135.0
turbotrx,Are you using posgre? There is a hard-coded limit for aliases.,1539163510.0
MatthewMob,"> is this possible with node?

Yes.",1539153276.0
kevinmirc,"Try the ‘exec’ function on node’s ‘ChildProcess’. 

[Documentation](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) ",1539138851.0
cspotcode,I'm gonna guess you didn't bother searching on npm?  There are modules to do this; looks like they take care of serializing between JS and PowerShell data types.,1539140098.0
chovy,You need a file handle,1539131337.0
cocorote-pedro,"You can use `.find({'field': { $regex: /document1234/ } }, cb)` and it should return document1234 and document12345",1539116639.0
ultimo_recurso,"You have two options:
1. Find query with regex expression as argument
2. Create a text index and do a full text search

You can read more at:
https://mongoosejs.com/docs/api.html#model_Model.find",1539116503.0
mw999,"Spent too long trying to configure an Alexa skill for Echo spots and echo shows, this is the first step. Would love to do a series on professional Alexa work flow",1539118265.0
RevionReaper,"1) I assume that by “JSnode” you mean Node.js
2) You can’t host Node.js on GitHub
3) You can’t convert C# to JS. Even through there are some similarities, you’d have to rewrite the code completely + you probably used some kind of wrapper for the Discord API like Discord.NET which isn’t made for JS

If you want to create a Discord bot in Node.js, probably the easiest way is to use Discord.JS library and host it on Heroku.",1539113324.0
Ediamonds2001,"Ok. Thanks. I will look in to it.  

",1539113365.0
blood_bender,"The ecosystem of express middleware is far too large, and I don't really want to put in the research necessary to figure out equivalents in koa.  I've played with koa before and couldn't find equivalents for all the typical middleware I use, so it just doesn't seem worth it. 

Just link in `express-promise-router` instead of `express.Router` and that's basically good enough.  All my route handlers are `async function`s that use `await`, since exceptions or rejected promises are caught by the default error handler, you don't need a `try/catch` block in every handler.  Makes it so that the only time I need to worry about callbacks and next() are in custom middleware (authentication and permissions mostly), but once that's set up once I don't need to worry about it again. 
",1539103880.0
Renive,No marketing. People dont even know koa came from express.,1539101041.0
cspotcode,"Just because express route handlers and middleware use callbacks doesn't mean I can't write all my code with promises.  A simple wrapper function can catch errors and convert them to a 500 error.  So I don't think the callbacks are an issue.  Express works, it's simple, it has a huge ecosystem, and tons of people know it.  Unless I have a really good reason to switch, I'd rather spend my energy learning more interesting stuff.",1539118705.0
,[deleted],1539102963.0
MentalEcho,"Not sure if of interest, but I've been playing with [NestJS](https://nestjs.com/) as of late - which high-level is a framework built on top of Express which provides an Angular-like development experience.  

I've found it very easy to work with async/await as well as Observables (of course we're dealing with TS transpiled to JS, so..)... Perhaps worth a peek if you're wanting to still use Express, but in line with more modern conventions.",1539105418.0
__Kevin__,Callbacks aren't hard to reason about.,1539110814.0
utbusdriver,"Don't fix what isn't broken. Express has been around for a while so it's a mature framework, and they have managed to keep things fairly simple. Regardless, promises are just syntactic sugar for callbacks, and async await are the same for promises. So no. there are no benefits to using callbacks vs promises in Express, except for syntax. I think people still use Express, because most new node devs get introduced to it first, and it's what they're comfortable with. And if a company is already using Express for an application I don't really see the benefit of switching to a different framework just to get async await or promises.",1539102236.0
elr0nd_hubbard,I use `express-promise-router` for that `async` goodness,1539132792.0
Gnome_0,im just here sitting waiting for loopback 4,1539110744.0
davidmdm,"I think it's mostly the maturity of express that takes the cake. I am interested in giving koa a try, but there's no problem with express that makes me want to leave. 

So given there are more third party middlewares and the ecosystem is geared towards express, it's hard to make the change. 

Plus the callback system isn't a pain, and in some ways makes the flow of control more explicit. 

Promise and async await semantics are particularly useful for scoping and function contexts. So it doesn't really affect express. Plus you can use async await for your express routes. 

We will see what the future gives, but there's no reason right now to move away from the most mature eco system ",1539103377.0
sqeezon,"Express is extremely flexible and well documented. You do not have to use callbacks if you design your app correctly. Check out my seed project as an example of how to write an express app using async/await

https://github.com/maybachlabs/express-typescript-seed",1539121573.0
Charles_Stover,"Node uses callbacks by default, so they likely want to match it. Node even offers a Promisify package that turns error callbacks into promises if you prefer them.",1539101182.0
no_dice_grandma,"The incompatibility of express middleware is a pretty big deal.

I do like async/await a whole lot, and would love to incorporate koa into a project, but express is working just fine for me, and I feel like I would have to reinvent several wheels to make the switch. In the end it comes down to how much effort do I exert or save, and if I have something working correctly already, that measurement needs to result in a net save for me to consider it. ",1539102403.0
Kusaddaw,"Honestly, async functions work fine as express handlers. So what's the problem? Where I work we are running a bunch of express based services and everything is async/await. It's fine. And a lot of the existing middleware w/ high download and release count is for express.",1539127465.0
tswaters,"I think in reality, tj was probably sitting in starbucks hacking away at his laptop and just thought ""oh what if I do that"" and he did it -- in my eyes, each of the web frameworks he created are thought experiments.... neither of them is inherently better or worse, they just go about how they do things differently.",1539136999.0
ezekg,I don’t understand. I use async/await with Express and have no problems whatsoever.,1539103496.0
PM_FLUFFY_KITTENS,Not sure what you are talking about really. I am able to use async / await in my vanilla express api without issue. But that new framework looks interesting. Maybe I'll use it for my new micro service. :),1539144627.0
MCShoveled,"To be fair, all server side http frameworks are callback based. There’s something to be said for the time tested idea of: 

> Here is a function pointer, give him a request and response object. 

But I take your point, abstracting this can simplify some code. It all really depends on what you’re doing and how frequently.",1539146688.0
ipullstuffapart,"Because it's not a problem? It's still valid syntax, and there aren't so many callbacks that it doesn't make sense.

I've moved entirely to async/await with the occasional Promise.all(), but just live with the callbacks in the routers. Router files should be the least of your concern and should be pretty small, so it's no big deal. Follow DDD and isolate your interfaces like http away to their own concerns and forget about it :)",1539157722.0
StoneCypher,"i'm pretty tired of ""replace it with promises.""  they're rarely an improvement.",1539138218.0
lenswipe,">Or are there inherit benefits to use using a callbacks-based system that I can't see.

You realise that promises are just fancy methods that accept callback functions as their only parameter, right?",1539130534.0
javascript_brah,"Hmmm this is a tough one. Do I use the nimble and highly performant framework with a huge ecosystem or the slightly more nimble and performant framework that is virtually abandoned? Tough one lol. I love the async/await meme btw, good job showing everyone that you're making fizzbuzz apps in your mom's basement.",1539151855.0
theTypeScripter,If you use OvernightJS you wont have to use callbacks that much: [https://www.npmjs.com/package/@overnightjs/core](https://www.npmjs.com/package/@overnightjs/core),1539141580.0
FormerGameDev,"I'm curious -- what do people use as far as middlewares go?
",1539143825.0
EyeballMond,"Two points :

1) Promises are fancy callbacks.

2) using Babel you can compile to es5 from es6/es7",1539118886.0
alex_agc,what about using rxjs for this? [https://www.npmjs.com/package/rxjs](https://www.npmjs.com/package/rxjs),1539099889.0
cocorote-pedro,"Still a problem? This problem should be solved with CSS and your framework's tools.

Take a look [here](https://bulma.io/documentation/columns/options/).

What framework are you using? Angular has its ngFor, Vue has its v-for and both have sorting.",1539072044.0
dabomb007,"Any feedback or comments would be more than welcome, however try to be respectful as my recent experience wasn't so pleasant here. Enjoy!",1539064898.0
,[deleted],1539047307.0
penguingspe,vue,1539044937.0
Thommasc,My favorite stack is Angular + Serverless Framework or NestJS.,1539069393.0
,[deleted],1539070388.0
randomFIREAcct,This is a great checklist to go over. Bookmarked!,1539093716.0
Lost_sand,;),1539056935.0
danneu,"> Don't roll your own

I think this stems from the problematic idea that authentication is somehow so hard that developers shouldn't even learn how it works. If they did, then they'd see it's not hard nor scary. And you're 100x more likely to introduce security vulns with logical errors like forgetting to add `ensureAdmin()` to your /admin routes.

Or perhaps it's a message that's been contorted over time from more agreeable ones like ""don't roll your own cryptography primitives"" (and authentication uses some form of crypto).

But on closer analysis, I think you would be hard-pressed to make a case that you have better security by not rolling your own authentication. Because what that often translates into is a 3rd party black box which now is possibly even easier to mess up because you aren't aware of its limitations, like storing private info in the opaque session abstraction because you didn't notice that you had to configure it with `{ signed: true }`.

For example, consider the dead-simple authentication method of storing an unguessable session-id token in an unsigned cookie. Super simple and easily implemented in a small middleware function. Much less surface area and moving parts than, say, the plumbing for auth0/firebase/cognito.

",1539019243.0
slimslimh,"We (a startup about social networking and users data) are using aws Cognito (cause we are you using the whole aws services). 

We are using JWT as a second wall, but even that some are saying that it actually sucks, we already have cognito on the line before so authentification and security is quite already garanteed. 

I can understand that some are thinking that JWT is bad, but when you re using some strong service, you can take a second blade you feel confortable with (all our setup backend is in nodeJs and JS). 
So we use JWT only for data crypting kinda, when sending from front to back and back to front.

So my advice is using a plateform already setted up and set up the second wall by yourself. 
But that’s just my opinion and my point of view ",1539015263.0
davidmdm,"I often berate people on Reddit for using jwts, or always jumping the gun when anybody wants help on a starter application and telling them that jwts are the way.

The reason I do this is not because jwt is bad. I in fact use them everyday. But because jwts are not the solution to the problem they are trying to solve. 

So to answer your question, don't roll your own if the solutions out there already meet all your needs and the pricing is cheap. 

If you need custom integrations or have flows that you don't think would be easy to integrate with an existing platform, roll your own. 

If your app is self contained use sessions. 
If your project is split into micro services and you have a separate authentication / authorization server (e.g. OAuth authorization server) and the services don't share a database (they should not) then jwt is great for stateless authorization between services. 

Feel free to ask me anything. 

Ps I have written and maintained  an oauth2 served for work ",1539089973.0
josewhitetower,RemindMe!,1539035572.0
broofa,"Why this module .vs. `colors` or `chalk`?

Aside from performance, what's the need for this?  Practically speaking, I don't see ANSI colorization performance as much of a concern.",1539027238.0
tswaters,"I wrote one of these myself... had quite a bit of fun figuring out the math behind the different numeric representations of the colors.  Turns out, each of the numbers that corresponds to color is really a binary number with the 3 bits representing `b` `g` and `r`... this allows some interesting possibilities converting `rgb` hex codes to ansi colors.

It started out small, I called it [`tiny-ansi-colors`](https://github.com/tswaters/tiny-ansi-colors/blob/85b9c03/src/index.js) but after I added the rgb handling the size blew up a bit.  I would expect yours to be quite a bit faster too as all the possible values are cached ahead of time during module load.",1539040550.0
tswaters,"For your specific problem, maybe don't use `npm version` -- if all you want is the tag, you could always just use `git tag`

The pipeline we use at work uses jenkins.  Our branching strategy uses a slightly modified gitflow.

The important ones are feature branches, development, release and master.  

Feature branches receive a build, and tests will run.  Developer opens up a pull request and requires a successful build to be able to merge it.

Development will build, run tests and push an image tagged `development` version to our docker repository.  After that, we upgrade containers in the development environment -- this is the first ""integrated"" environment that you can test a service with everything connected.

We'll build out a release branch by branching off master, and merging a series of feature branches into it.  This one will do basically the same build steps as development, but it'll use a more specific tag, like `release-{version}-{build#}` and we'll upgrade a QA environment where QA can have a go at the changes.

Once QA signs off, release goes back into master and we upgrade the containers in the production environment to the latest version that was build.

It's a little complicated, but gives us a lot of flexibility to pull things out, add additional things and perform hotfixes against production. 

We do this for ~30 or so microservices in a monorepo.  There's some ""git magic"" we run in the jenkins file to figure out if something has changed and warrants a new build from the systems in the monorepo.",1539060852.0
ChrisCodes,"Since you’re a beginner, I would suggest using PassportJS with Auth0 or JWT.  From there you can continue to learn your chosen solution and more about Passport (It’s a great tool if you plan on offering multiple login services through social media) ",1539016132.0
Str4yfromthep4th,Use Firebase or something else otherwise your security will be trash and ill be able to hack your site within a few minutes. If you're new to programming and have no computer science background then you should not implement authorization yourself if this is a project you are making public. Do yourself a favor and take a college security course or get a few books if you are legitimately interested in rolling your own. Otherwise stick to Firebase or similar.,1539009389.0
,[deleted],1539020538.0
BehindTheMath,`npm ls package-name` doesn't show the actual version that's installed? ,1539006073.0
Str4yfromthep4th,This is probably the most pointless project ever created. Stop programming if you're gonna pollute npm and waste our time. You literally just wasted minutes of my time for no reason.,1539050447.0
notThaLochNessMonsta,"It's never really been a challenge for me. Use PostgreSQL unless someone on the team really prefers MySQL, then use that. 

If someone suggests NoSQL ask them ""why"" and if they don't have a really great reason for it, then don't use it. Then if they do have a great reason, ask why you can't just use a JSON field in PG/MySQL. Performance is not a great reason because a relational DB can be just as fast.",1539000653.0
HipHopHuman,"I ask myself the following questions and then further filter based on preference.

* **Question**: Are entities related?
   * ***Answer***: Postgres/SQL Server/MySQL/etc
* **Question**: Do you want to store arbitrary information that does not conform to a shema?
   * ***Answer***: Postgres json column/MongoDB/CouchDB/ArangoDB/etc
* **Question**: Do you want to query geographical data?
   * ***Answer***: Postgres with geo extension/MongoDB/etc
* **Question**: Are entities related, but in a very complex way (like a recursive hierarchy of N depth)?
   * ***Answer***: SQL Closure Tables/Neo4J/ArangoDB/etc
* **Question**: Do you want a fast in-memory caching layer?
   * ***Answer***: Redis/Memcached/Hadoop/etc
* **Question**: Do you want a background task processing queue?
   * ***Answer***: Redis/RabbitMQ/ZeroMQ/etc
* **Question**: Do you want to support complex text searching?
   * ***Answer***: ElasticSearch

Most of the time in my projects I'll have the following services setup via docker compose:

* Postgres with geo extension for geographical data, relational data and schemaless document data
* Redis for caching and message queue and cron-like scheduling
* Elasticsearch for full text search
* Neo4j for modelling complex relationships",1539017696.0
djslakor,"Search: Elasticsearch    
Memory cache: Redis    
Everything else: Postgresql    


Just .... do that.  Trust me. :)",1539005738.0
kvnpmrtn11,"For your map functionality you should definitely look into Redis' GeoSet data-structure. It's built for stuff like that.  


Redis could probably be leveraged site wide here if you can afford the cost of RAM, otherwise using a relational database like these guys are saying with Redis just for Sessions / Caching / Geo makes sense.",1539017729.0
davidmdm,"This is my logic:

    const db = Relational data === true ? Postgres : mongodb

But you can use other information like your teams familiarity with the technology for example. 

Also always write your code using something like the repository pattern, so that it is easy if you have to, to just switch out your database for new one. 

Good luck. ",1539090487.0
BN_ChickenBiscuit,"It depends on what you want to do, if your having simple tabular data with basic relations an RBDMS is a good way to go, if your data is more flexible or speed is more important a NOSQL might be better, if your dealing in data that has many relationships, i.e. a friends system or something similar, you may find a GraphDB to be better, the list goes on.

Its different databases for different reasons, same as you wouldnt use a hammer to put in a screw any less than a screwdriver to put in a nail, right tool for the right job, research around each one and choose based on what you need.",1539001009.0
djslakor,"Good for an entry level interview.  Otherwise, pretty pedestrian.  Someone who has spent a day or two with Node/Express could answer these.",1539006031.0
davidmdm,"I mean this is cool and all, but the promise API was written to tackle this problem. ",1539091842.0
davidmdm,"The only failure of promises appears in an edge case with recursive algorithms. 
None of what you said seems hard to do with a promise ",1539377935.0
Thommasc,"Maybe I can run ts-node along with nightwatch. That would be a possibility.

[https://github.com/webdriverio/webdriverio/blob/master/docs/TypeScript.md](https://github.com/webdriverio/webdriverio/blob/master/docs/TypeScript.md)",1538986742.0
Thommasc,Also trying: [https://github.com/kallaspriit/typescript-nightwatch-example](https://github.com/kallaspriit/typescript-nightwatch-example),1538987664.0
OzziePeck,Compile then test?,1538998104.0
jameside,"GitHub's TLS certificate is signed by a trusted CA so if your computer thinks there is a self-signed certificate, it's likely because either a proxy, including debugging tools like Charles Proxy, is adding its own certificates or your computer is missing a certificate from the root CA (DigiCert in this case). I don't think an npm proxy is causing issues since you're able to connect to the npm registry. If you think it's the former, try disabling the proxy or switching to another internet connection without the proxy to see if that fixes things. Based on the symptoms it looks like the issue is that your computer can't connect to GitHub from the command line and debugging your networking stack more is probably the right direction to look.",1539026607.0
playaspec,What OS are you on?,1539041796.0
M1907SL,"From what you explained. I believe you first should uninstall Node completely and then go to the Official Node.js website and download the latest version. 

Another option is to run ""npm I npm -g"" to globally update npm and node. 

One of these options will work just fine. ",1538979659.0
kxerr,"Two things I'd try first

- delete node_modules folder locally, and test if the issue occurs locally after npm install
- try settings NPM_CONFIG_PRODUCTION=false and re-deploying/building on Heroku. This instructs Heroku not to skip installing devDependencies. I guess its possible that a package you are replying on accidentally added something as a devDependency

https://devcenter.heroku.com/articles/nodejs-support#cache-behavior",1538983410.0
gskumawat,"Install npm module using 'npm install --save'.
Also check your package.json file, maybe it doesn't contain your sax module as dependency.",1538983596.0
Str4yfromthep4th,Just use a different port,1538968835.0
playaspec,"If you want a unified experience *without* having to tack ugly port numbers on to the end of your URL, use nginx proxy feature. Internally I bind servers to localhost (127.0.0.1), each on a different port, then create another server stanza in your config file and use the  *location* directive to map it to a path on your URL, and the *proxy_pass* directive to point to the port you mapped on localhost. Like this:

    server {    #Forward all http requests to https
        listen            80;
        server_name       robotHead.local;
        return            301 https://$host$request_uri;
    }

    server {    #https config
        listen 443;
        server_name robotHead.local;

        ssl on;
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # client certificate
        ssl_client_certificate /etc/nginx/ssl/root-ca.crt;
        # make verification optional, so we can display a 403 message to those
        # who fail authentication
        ssl_verify_client optional;    # on | off | optional | optional_no_ca

        # Root of server
        location / {    # If client certificate authentication fails, return error page.
            if ($ssl_client_verify != SUCCESS) {
              return 403;
            }    #else proxy the server at port 8000
            proxy_pass http://localhost:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        location /otherApplication {    # Map some other local site to the path 'otherApplication'
            alias    /home/user/SomeOtherApp;
        }

        # otherAppStatic 
        location /otherApplication/static/ {
            alias /opt/appSupport/static/;
        }

        # Node app binds to address and port below.
        location /nodeApp {    
            proxy_pass http://127.0.0.1:8001;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header P3P 'CP=""ALL DSP COR PSAa PSDa OUR NOR ONL UNI COM NAV""';
        }

        # phpMyAdmin (apache)
        location /phpMyAdmin/ {
            if ($ssl_client_verify != SUCCESS) {
              return 403;
            }
            proxy_pass http://127.0.0.1:8003;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

I left in the TLS and client certificate authentication I used so you can see how it works, but you can just comment it out if you don't need it. I created a local CA, and a server certificate from that, along with client certificates for each machine that is allowed access (my laptop and phone). Plenty of info on that on Google.

The big advantage of this is I get SSL/TLS support across all sites and don't have to mess with making them all work with it individually. ",1539041394.0
jkh911208,use different port or use sub domain,1538969147.0
vladimirice,"use different port but try to be close to the basic one. For example your first app uses port 3000. For the second one use 3001, for the third one - 3002 etc. Don’t use for example 4000 or 5000, because using 300* for the node is a kind of regular practice. 

In order to set the port consider using environment variables. Better to set them by process manager like pm2. ",1538976610.0
,[deleted],1538952397.0
l3l_aze,"The only thing that should be different from regular JS in the world of parsing is working with binary data in NodeJS. It seems simpler [to me] than using JavaScript's native TypedArrays + DataViews because you can just use Node's Buffer and it's methods which can read values of varying sizes rather than needing to have multiple DataView to handle each desired size of value. I haven't actually used TypedArray & DataViews yet, but with Node I just read and understood it whereas with TA + DA I've read it a few times and am still pretty confused.


Regular text has always been pretty simple in JS of course as you can use RegExp's and/or indexOf, substring, and other string methods. RegExp's tend to work well but are of course not very reliable for large strings because of how hard they can be to create & test, so they're often best for an initial parsing phase where they just grab a line/bunch of lines out of an even larger set of lines (or text). Then some more RegExp and/or some string-based magic can help cut things up as needed.


IDK how helpful I could possibly be as I'm an amateur/hobbyist, but I have almost always enjoyed messing with parsers ranging from web pages to text, and even did the Simpleton script language in both Java (I don't really use Java, it was just one of my first languages) and JS. Some of my own toys with parsers include:

* Commandline options parser similar to only the parse function of [cli](https://www.npmjs.com/package/cli) by cohara87. Also includes generators for ""usage"" and a weak attempt at ""man"" page (before I knew they have special formatting).

* A multi-stage JSDoc-like code comment parser that initially converts them to JSON, and then plays with the results to parse and morph that into something more useable. Also made a simple markdown generator for API.md-style docs -- this parser is pretty ugly, and IIRC not commented at all..lol.

* A parser for the describe/it blocks in test files, for my custom Mocha-like test framework I'm working on. This is used to find the last test in a file so it can automatically report pass/fail and running time for it, though AFAIK it can only run one file so far anyways. Lol.

* A bunch of random scripts for temporary use, such as while helping manually move *parts* of an online forum's sticky posts to a different forum site. Copy & paste by hand was too much, but a bookmarklet to copy the necessary data and reformat it made it pretty simple.",1538961549.0
deadycool,https://www.npmjs.com/package/fuzzy-search,1538941932.0
buffer_flush,"Levenshtein distance is something that is relatively easy to implement and should work for your use case.  

It calculates the number of edits necessary between two words, ie node and node would be 0, but node and ode would be 1, because it requires deleting one character to get from node to ode.",1538968342.0
criszz,"I add a short, sad, almost unrelated story: I need this package in one of my projects, it's like the backbone. But I deleted it for mistake and there's no way to restore it. Unluckly I didn't upload it anywhere and it wasn't versioned in any way. So I hope someone created the same package and uploaded it in a public repository, or I'll start crying forever",1538940416.0
iloveboxcutters,That sounds like regular expressions,1538959560.0
danneu,"> I constantly have to do queries like: SELECT first_name AS ""firstName"" from users;

I recommend just rolling with underscores in your javascript. Feels awful at first, but manually aliasing every step of the way in sql will cause even more pain.

Also, it turns out to not be so bad because you'll get used to underscores in your javascript meaning ""this is a database record"". Just chalk it up to interop.

> I might write all my queries in .sql files, so that I can have syntax highlighting and load them all into memory when my application starts to prevent too many IO operations
 
I tried this at first but went back to multiline SQL strings in `.js` files because you'd have to have two files open to sync up the parameters you're passing in from javascript and the sql itself. For me, I'm error-prone enough when the sql is just one line away from the parameter list. :) Didn't seem to offer me much benefit.

It's definitely worth a shot. Lots of people do prefer this. Another benefit is that you can copy/paste `.sql` file contents between psql or your db gui as well.

Here's a demo project of mine that shows some ideas of how you could structure things in a node app: https://github.com/danneu/koa-skeleton (live demo: http://koa-skeleton.danneu.com). It's not 100% up to date with how I'd probably build an app today. For example I regret migrating from Pug to server-side React. But it's not far off.",1538940666.0
1yearwetdreams,"There is also a project called postgrest https://github.com/PostgREST/postgrest

It's basically a rest api for your postgresql instance. I don't know if you want to use it, but it will save you some time. ",1538975513.0
cocorote-pedro,"Firstly, I recommend you to use Express even to start.

I like to follow [this tutorial](https://itnext.io/building-restful-web-apis-with-node-js-express-mongodb-and-typescript-part-1-2-195bdaf129cf) for TS Express projects. In the end the code will look pretty neat.

Scotch.io have good tutorials for node. The first tutorial for node I followed was [this](https://scotch.io/tutorials/build-a-restful-api-using-node-and-express-4).

Hope this helps. Good luck :p",1538933562.0
muddy_b,"Take a look at https://github.com/i0natan/nodebestpractices

If you're looking for a especific folder architecture I don't know where to point you to.
BUT, if you like the angular style and is interested in a framework that works well with the same architecture, take a look at https://github.com/nestjs/nest
It is built on top of express, and can even use express middlewares, like cors and helmet. It also uses typescript(by default) and implements all the angular best practices (DI, modules, etc.)

If you find some Enterprise-approved folder architecture, please share with me!",1538933665.0
codearoni,"Node architecture varies greatly depending on the nature of the project. A REST api will look different than a ReactJs frontend, which will look different than a pure JS lib like lodash.

If you're still developing Android apps, I'd check out React Native, and see how they set up there projects. ",1538933807.0
skeliskull,"Do you mean project structure? Architecture can be similar or the same as many other languages for stateless applications. As for project structure I suggest looking at examples. There’s really no rules and pretty much everyone has their own that they come up with. It’s very configuration > convention.

Often you’ll see that some projects use a couple of common folders such as “routes” or “models”. Then they dump everything else into a “lib” folder. I recommend avoiding the lib folder if you can.",1538935574.0
wdsoul96,Sometimes you don't know what you are missing until you stumble upon a goldmine. Thanks for the question. (and the answers from the experts),1538953061.0
joaozitopolo,"I have no complete domain about node, but I found some frameworks to start backend projects in node, like Laravel is for PHP, or spring is for java.
I found an excellent framework https://loopback.io , it's a collection of several node practices, and you can learn more about each practice with that fw.",1538967323.0
Thommasc,"If you want to use Express, use NestJS. It has a nice architecture with DI (oh yeah).",1538984071.0
Lost_sand,I'd say definitely either a big marble hall with murals on the walls or a clean streamlined vehicle that has interstellar capabilities.,1539139789.0
soundmanD,"Are you certain the element is present at time of execution? Much of the time it's a race condition where the browser is still loading up the page or executing something, whilst you've already attempted to fetch the element.

Unfortunately without examples, no one can really help you further.",1538866395.0
FalcoTeeth,"Not sure if you’ve tried this, but you might find `page.waitForSelector(selector[, options])` useful. ",1538925935.0
dcole101,what’s the link and which selectors are you trying to select? ,1538894242.0
toddd24,"await page.type('input\[name=\_xqwmjd\]', '1357449', {delay: 20})

await page.waitFor(3000);

await page.evaluate(()=>document.querySelector('#\_pl1x0b').click()); 

&#x200B;",1539011589.0
toddd24,I have a delays set to make sure the page is loaded but I haven’t tried putting it in a loop to try multiple times before giving up. ,1538884073.0
sdiown,So basically it is cli version of netilfy?,1538921427.0
tswaters,"    (product, err) => {}

^^ that is a function.  When you `return` a value, it is returning from that function, not to your exported function.

You'll need a callback passed into the exported function to get anything back from it.

You can also try promises or using `async` and `await`",1538864462.0
NesheR16,"Welcome to Node!

You should wrap your `supreme.seek()` function with `return new Promise(...your code here...)`,

Please refer to this guide https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",1538913847.0
qqqyqnz,"If you wanted to be purely RESTful you could do this: https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design#use-hateoas-to-enable-navigation-to-related-resources

But ultimately there is no universal best answer, just a set of best practices to learn and adapt to your data model. The doc above has a lot of them, you'll also learn a lot of them by implementing lots of APIs. If you are a full-stack dev you will get a sense for what works well and what doesn't.",1538858875.0
cantaloa,"`POST /surveys` should accept survey + array of questions. You basically are folding it all into one atomic operation.

A good way to design APIs is to think of how your client (website) is going to work. That way, worst case scenario, your API is informed by at least one use-case instead of the hand-wringing of ""what if"".

If a user wants to update 8 questions, you probably want it done atomically rather than sending 8 requests. 

Resending the whole survey + questions each time isn't likely to be a big deal. But if your surveys can have a particularly large amount of questions or if you deem it worthwhile to optimize into partial updates, then you may want to consider a separate endpoint that only needs a delta of the updates to apply. 

But once again, a good way to come at this is to ask ""what would be the simplest solution for the client I'm actually building right now?"" A lot of API design decisions shake out once you actually have to implement a client against it, and poor decisions will quickly stand out because they complicate the client.",1538860815.0
SnowConePeople,"Second example is best. Less data passed per call. If you're learning about API's, don't forget to take a look at GraphQL. I love Express but holy cow, GraphQL is like birthday cake everyday.",1538859989.0
50653,"IMO all those options are bad :)

Best option is to use a single web request that includes the entire survey. It might not be strictly RESTful to do it that way, but it's simpler.

Two problems with having separate requests..

1) More ways to fail. Maybe the client loses internet halfway through the operation. Now you have to worry about surveys with no data, questions with no data, or maybe surveys with 3 questions when they're supposed to have 5, etc.

2) The server doesn't know when the client is done sending stuff. Maybe the server wants to validate the whole survey and check for problems, or automatically send it to a recipient, or etc. But it doesn't know when it's safe to do that, because it doesn't know whether the client is done adding questions.",1538870428.0
Lost_sand,socket.io,1538932041.0
leadzor,"I would say go with the second approach. That way you're not forced to send the whole payload when updating it. I usually don't really like creating payloads with nested resources, unless it is something really simple that doesn't have enough weight to be a dedicated sub-resource or even a resource. This kinds of cases can be very subjective at times, and it ends up coming down on your use case, or desired flexibility.",1538859124.0
Huligan27,"Personal preference and side note, I would push for consistent pluralism, meaning if questions is plural, surveys would be plural too.

My vote would also to be for going with option 2. As you said though the clients will often want both the survey and the questions and it would be nice to not make excessive calls. Maybe that means an aggregation route for the view or something like graphql over your standard rest approach or even adding the concept of an “expansion” parameter to the surveys endpoint that would return nested question data if passed. ",1538863661.0
Oalei,"Just a quick remark: POST is meant to update objects, while PUT is meant to create them.  
So POST should point to the id of an object, but not PUT.  
  
POST /api/survey  
PUT /api/survey/:id  
  
should be  
  
PUT /api/survey  
POST /api/survey/:id  
  
Regarding the format, it depends of the length of the survey.  
If it's a 5min thing I would send the whole survey in a single payload.  
If it's a long survey, I would split the survey into different parts, and save the progress at each step.  
A step would be a group of questions, say 10 questions.  
It is also nice for the UI and UX, you don't want 100 questions on a single page.  
  
Edit: after some research it seems like POST and PUT are both used for update and creates, it's all down to your preferences.  
Gotta love the downvotes for absolutely no reason :)
",1538905340.0
leetosaur,GraphQL is the answer!,1538865595.0
l3l_aze,If this was much lower effort I think the Auto Moderator would've removed it.,1538858975.0
MatthewMob,These kinds of low effort pointless posts don't belong here FYI.,1538903499.0
inabahare,Language with framework VS Language with framework VS Language with runtime,1538839811.0
,"There needs to be a ban on Medium.com articles, too many of them read like somebody's homework assignment",1538838112.0
Str4yfromthep4th,It's set up out of the box... You literally press Play and it works. There is also detailed official documention. What new or helpful information does this article provide??? Perhaps we should start creating videos for hot to use notepad too?,1538850010.0
mbelmin," **How to Setup Visual Studio Code for Node.js - Coding Videos** : 

Step 1: Download VSC

Step 2: Install

Done.",1538858289.0
CSS_Programmer,"Here is another in case anyone didn't like OP's!

&#x200B;

[https://www.youtube.com/watch?v=4wZBZqvLZ3Y&t=3s](https://www.youtube.com/watch?v=4wZBZqvLZ3Y&t=3s)",1538858373.0
randomFIREAcct,"lol, you you literally have to do nothing to get it working",1538861303.0
TheNightmareEDM,"Technically yes,I guess. You could construct some kind of index storage for the functions. I woiluld be interested in why you'd do something like this? Seems like a big, unnecessary rise in complexity for me? ",1538832111.0
Str4yfromthep4th,Store the function objects in a map and address the functions by name. ,1538835754.0
mattstrom,"You say you're building a dependency injection system, but I'm still confused about what you're trying to achieve with ""finding and running functions within a project"". So I'm just spitballing with my ideas here.

Perhaps you should look at how some other DI systems, like Inversify, do it. Some of these are written in TypeScript and they make use of decorators and the Reflect API (or rather `reflect-metadata`).

JavaScript `symbol`s can be used to uniquely tag a value or class, which many DI systems do.

Or maybe you need to go more advanced and add an AST parser, such as [esprima](http://esprima.org). This will you to analyze your code in a more structured and granular way. ",1538987867.0
jorgemmsilva,"Try nvm, pretty awesome tool.
https://github.com/creationix/nvm",1538807846.0
l3l_aze,"What does `which -a node` give for output? (may include your PC username; could be worth sanitizing). [which](https://ss64.com/osx/which.html) will by default spit out the first location it finds a named executable at; the `-a` option will make it list all locations where it's found.


After that trying using just `which node` -- this should be your current version (8.3.0) and it's location.",1538801971.0
EarlMarshal,"\`npm install -g npm\` normally just updates npm and not node itself. You have to install a higher version from the right repository, download the right version yourself and install it or build it yourself and install it.   


But there's also another option called nvm. It's the Node Version Manager which let's you easily switch between different node versions. afaik you can install it with brew: [http://dev.topheman.com/install-nvm-with-homebrew-to-use-multiple-versions-of-node-and-iojs-easily/](http://dev.topheman.com/install-nvm-with-homebrew-to-use-multiple-versions-of-node-and-iojs-easily/)",1538849941.0
Prefinem,Try installing with brew: \`brew install node\`,1538840620.0
joesb,"Put it in your code.
Always have `schema_version` field in your model. 
After you load an instance from mongo, pass it through a migration function like

    If(model.schema_version < 20180101) {
         ... update model to version 20180101
        model.schema_version = 20180101
    }
    If(model.schema_version < 20180105) {
         ... update model to version 20180105
        model.schema_version = 20180105
    }
    If(model.schema_version < 20180301) {
         ... update model to version 20180301
        model.schema_version = 20180301
    }
    ",1538807410.0
cahva,"It’s a little bit different compared to sql databases but ofcourse theres situations for example where you need to modify existing records.

For these situations, we use mongo-migration package:

https://www.npmjs.com/package/migrate-mongo",1538810760.0
BLOZ_UP,"All our ""migrations"" are code. We have a db middleware that handles old documents and migrates them as needed. Could get messy if we make large changes, but so far so good. Ideally we could query the DB and remove no longer needed migration checks, but we don't really have that many.

We still have scripts we run for one-off requests from clients.",1538834991.0
,Smoking a fat doobie. ,1538800943.0
midnight_bike_rider,"IMHO that's not a very good structure. Also I hate the naming (userDAL.... wtf? that's an ugly filename).

People love to over complicate things, and create lots of layers. I used to do the same thing. I read all sorts of ""enterprise"" programming guides, and had a service layer, and a repository layer, with factory methods and fancy dependency injection and the mediator pattern and on and on.

&#x200B;

Now, I have a database class:

&#x200B;

`export class DatabaseService {`

`getUsers(): Promise<User[]> {`

`// call the database method`

`}`

`}`

&#x200B;

And my API endpoint for \`/users\` calls that method. That's it. Nothing fancy. All my API tests are integration tests, so I don't even care about dependency injection.

&#x200B;

&#x200B;

&#x200B;

&#x200B;

&#x200B;",1538791181.0
StoneCypher,"a best practice is a document based on decades of work and the experience of tens of thousands of people

this is a couple guys phrasing their opinions as facts",1538856578.0
hash_salts,"TL;DR: Convert all money to `int`s (cents in USD), do the math, then display it however relevant based on the currency.

My thoughts on the article:

> Yet, there’s no consensus around how to programmatically handle monetary values.

Wrong wrong wrong. We do have consensus, don't be silly. As this article states (eventually...) there is only one way you should handle money and that's in `int`s and `int`s only. `float`s can only hold a fixed number of decimal places. That doesn't work when you devide things with infinite/repeating remainders; that fixed amount of places gets overrun.

If you're new to programming and having trouble with the idea of having all currencies represented as `int` values, play around with the Stripe API even if you never intended to use the platform. That may help with that way of thinking while still allowing for a higher level of abstraction.

Edit:

Storing money in floats is the premise of the movie *Office Space*.",1538785565.0
stickx,Cents as ints doesn't solve the 9.99 / 2 issue in the article... ,1538809134.0
mendrique2,oh man there is a widely supported Intl package in most modern browsers incl. ie 11. ,1538824923.0
MrMZa,">\[about amounts in cents\] fine solution but requires extra calculations \[...\] more process work than necessary.

Author: Let's use a library!

Me: (҂◡\_◡)

And suddenly you ship 2MB of JS. If you really want a library, go with a generic BigNumber implementation and just use native Intl for formatting (+ polyfill if necessary).",1538821991.0
skeliskull,The quick answer is: don’t,1538854212.0
ahmedam55,Thanks for your time and effort! Such a very helpful article!,1541415405.0
Shadaez,"this is a poor way to do things, and to do this you'll want to use something like phantomjs

why are you afraid of an API",1538773894.0
TaxExempt,Those are both servers.,1538827375.0
JJohnson0x,Thanks!,1538752026.0
maturanomx,What happen here? ,1541041904.0
apatheorist,Creating a lambda-only api server is an amazing thing.,1538749754.0
esreveReverse,I didn't see nested query fields. How would I do thoughts.type.name?,1538746942.0
jkoudys,"I like it. I've often wondered why we bothered with a whole new language, instead of simply defining graph as a JSON schema. This makes me believe even more that direction makes more sense. ",1538764517.0
dmj_X,"This is a nice compilation especially for someone like me trying to better my nodejs handles.   
Thanks for the post.",1538796074.0
marocu,"\#1 is great if there's not a ton of content involved

\#2 is the budget friendly option

\#3 is the holy grail, but takes considerable time and effort to get it right",1538714413.0
vladimirice,"I think better to follow second variant, because there will be no great difference in speed at the starting point. But it is easiest way to be in sync. 

If in future you will need more performance, you can cache views (actually html) in REDIS for example without fetching them from DB and develop a cache flushing policy. It is not very difficult. 



",1538719004.0
becauseofreasons,"Don't make things any more complicated than they need to be. If you're just handling GETs, you don't even need a live API server.

Go with #1 and generate the static site from the data store. Every time the data changes, trigger a rebuild and deploy the new HTML. (You can even host the static JSON under an `/api/v1` directory.)",1538749609.0
ricmalta,"You will go for a SPA configuration as you described firstly, have a look to headless chrome: https://developers.google.com/web/tools/puppeteer/articles/ssr",1538724963.0
Prefinem,"The biggest thing (without looking too deeply at your code) is that mappings can't be undone.  Only added too.  That makes it hard to have something like Sequelize's migration functionality without taking a cluster down or doing extensively work to create a new mapping, sync data to that mapping and then re-alias it",1538706802.0
SilentDefault,"I use it, they have good documentation, the only biggest problem I had was redirecting the ports, but I insist, digitalocean has good documentation",1538686329.0
StaticallyHyped,"I just spun up a $5 droplet for a reporting app at work yesterday. Took me all of about 10 minutes to get it set up and working. 

They're documentation/tutorials are legit af. ",1538694674.0
username_is_taken43,They are great,1538691541.0
Prefinem,I use them for a developing side projects on and for test servers.  Probably the best Server as a Service I have used.,1538687902.0
sandeepsb,"I prefer Vultr over DigitalOcean - slightly higher Spec’d hardware for the same price. 

I believe they accept PayPal but you have to add funds to your account rather than it automatically coming out. 

Vultr even has $2.50 cloud instances that would be perfect for your use case. 

Edit: typos",1538695559.0
rwieruch,"I use DO for all my static websites and Node.js services. For instance, all my static websites are hosted on one 5$ Droplet by using [Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04). My Node.js services are deployed with [Dokku](https://www.digitalocean.com/products/one-click-apps/dokku/) which can be used on DO too. I can only recommend it and I have written about [my whole setup over here](https://www.robinwieruch.de/deploy-applications-digital-ocean/).",1538701633.0
randomFIREAcct,"I use them and they are pretty legit. They also handle DNS which is nice. I have the super cheap node server for 5 bucks a month just so I can show off apps to employers.  I have no complaints at all about them. They notify me if I have insufficient funds and also have let me know about needing to upgrade servers and other security issues before.

&#x200B;

Can't speak to a production business-level site, but I like them.",1538704974.0
xlanor,"Used a 5 dollar droplet to run a small telegram bot (not node, but py) with mongodb and celery. 

Pretty good for small applications. I follow most of their setup documentation whether I'm using digital ocean or not, since it's quite good as a foundation",1538704949.0
_swk,"I hosted on DigitalOcean before, and just moved to AWS to see what all the hubbub was about. Honestly, for what I'm doing (smaller projects), I could've probably stayed on DO. Anytime I hit a server/linux problem, I still append ""digitalocean"" to whatever I'm googling. AWS documentation is super easy to get lost in, and in my opinion, overly complicated. DigitalOcean docs are great, easy to navigate, and more universal. It's cheap, and creating a droplet is as easy as clicking a couple buttons. ",1538732599.0
raccoonranger73,"Can confirm. Just started using DO and very happy with it. Clear docs. I basically had nginx(with reverse proxy) and pm2 managing my node app. You'll find them in the docs for sure.

I had nginx serving frontend static files, and nodejs all crammed in the smallest droplet and it's still fast.",1538732960.0
voxace,I use DigitalOcean and it’s great. Although if it is a very small application you could probably get away with using Firebase on the free plan. Setup a function for nodejs and use Firestore instead of MongoDB for the database.,1538697184.0
Travall,I'm not sure if it requires you to provide a credit card but I've used Linode for such for years and it's great. :),1538729451.0
Str4yfromthep4th,They have recently made huge improvements to their dashboard. They're top notch in my books.,1538850530.0
maiahmac,Best choice would be https://now.sh,1538748816.0
paulcarroty007,Very **slow** storage. I tried to create many droplets in all locations and every time got this issue.,1538761541.0
username_is_taken43,As long as they keep npm people away it's good,1538691618.0
soueuls,"I hope they won't bring back on board all their racist and sexist people like Ashley Williams, who apparently has a big problem with white males. Maybe a daddy issue.",1538727074.0
username_is_taken43,State of California eye cancer warning.,1538681814.0
KyleAGHC,what about oracle owning JavaScript and suing everyone that tries to use it lol,1538744883.0
yet_another_work_acc,"Hey, would help if you shared package.json :)

Could also take a look at it if you have a github repo :)

Edit: typo",1538670631.0
sveven,I've had the same problem I think. The problem I had was with node-sass. I don't remember how I fixed it. All I remember is I tried a shit load of different stuff. But eventually I zoomed. In on node-sass. Try to run npm install node-sass. You probably will get another error but maybe you will get a step closer to figuring it out. Sorry I could not be of more help,1538682036.0
esreveReverse,"Install windows-build-tools.

https://www.npmjs.com/package/windows-build-tools

The community needs to be better about making people aware of this. If you're doing JS development on Windows, you need to have this installed or eventually you will run into a problem like this.",1538747487.0
blood_bender,"Yeah, their official documentation is horrible. 

This has been linked around here a few times: https://github.com/jwalton/passport-api-docs

That intends to clear things up. I think it does a decent job, but still lacks the workflow you're asking about. 

Essentially you want to do three things:

`passport.use()` is used to configure your strategies.  This is basically configuring the code that will run when a route needs to authenticate, usually you set or return the user details in question. You do this on server startup, once, to register the methods you want to use.   

`passport.initialize()` should be called, also once, as you're setting up express.  Usually when you're setting up things like views, bodyParser, etc, also call `app.use(passport.initialize())`.  `passport.use()` configures it to work the way you want, `passport.initialize()` attaches the necessary properties and methods to `req`/`res`.   


And `passport.authenticate(<strategy>)` is middleware used in a router or specific route, that says ""access to this route needs the user to authenticate with this specific strategy"".  So something like `app.get('users/me', [passport.authenticate('jwt')], function getUserHandler(req, res) { ... })`

",1538671707.0
hallcyon11,Who knows. It’s the worst popular module I’ve used.,1538708180.0
Str4yfromthep4th,Express isn't really something you learn in the traditional sense. Javascript is something you learn. Express is just something you use. The official docs are more than enough to get started. It's just boilerplate code that you paste really. If you can't understand Express and you need a full course on something like this then you're going to have some serious issues with complex topics ,1538666424.0
mshthn,"Well, Node.js itself, with the exception of the fundamental I/O stuff, is written in JavaScript. You can start exploring the core modules.",1538684231.0
himynameisjoy,"Express comes to mind, although it’s not very small. Excellently commented",1538677575.0
rwieruch,"It doesn't use Mongo/Mongoose but PostgreSQL/Sequelize instead, but it's up to date and maybe a great way to learn about Node and Databases with GraphQL: [GraphQL + Express + PostgreSQL Starter](https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project). It comes with a tutorial too.",1538701762.0
Str4yfromthep4th,Just use Google man come on...,1538666566.0
Str4yfromthep4th,Only feedback I have is for the horrible name lol,1538661568.0
ern19,"Does this offer any practical improvement over something like FFaker that just uses a large amount of random data? 

&#x200B;

Which is in no way meant to be disparaging, this is really cool.",1538666009.0
yamalight,Likely using [`process.exit()`](https://nodejs.org/api/process.html#process_process_exit_code) would work for you.,1538647371.0
igetom,Kill it with fire,1538731370.0
hrdwdmrbl,There's also `process.abort()` which will exit even if there are fibers waiting to run during the current event-loop cycle,1538652377.0
SippieCup,run the program with the --inspect flag.,1538628717.0
cspotcode,"Set the ""protocol"" option to something other than ""auto""?

EDIT: also, how are you launching the server?  It needs to be launched in a way that listens on that port, because that debug config won't launch node; it only attaches to a node process that's already listening on that port. (Maybe your server is listening on a different port?)",1538623942.0
compubomb,"This works out of the box with webstorm, you just place a breakpoint, and right-click on your app.js node application, and go to debug, boom, you're ready.",1538627986.0
vijayant123,"Here, I'm sharing my config. It starts a nodemon process and supports auto-reloading on file changes.

&#x200B;

`""configurations"": [`  
`{`  
 `""name"": ""Nodemon Launch Server"",`  
 `""type"": ""node"",`  
 `""request"": ""launch"",`  
 `""cwd"": ""${workspaceRoot}"",`  
 `""runtimeExecutable"": ""nodemon"",`  
 `""runtimeArgs"": [`  
 `""--inspect=5858""`  
`],`  
 `""program"": ""${workspaceRoot}/index.js"",`  
 `""restart"": true,`  
 `""port"": 5858,`  
 `""console"": ""integratedTerminal"",`  
 `""internalConsoleOptions"": ""neverOpen""`  
`}`  
  `]`

&#x200B;",1538633970.0
gngeorgiev,"Just change the request to launch. Attach is for existing running debuggers, you need a new one.",1538639252.0
eponymz,"Was it mentioned to include the node version, or did that get removed from your package.json?",1538622024.0
Str4yfromthep4th,Can you run your program from command line?,1538627599.0
moarbutterplease,Are you on a mac?,1538630835.0
exquisitevision,"If you are using cluster mode, you will need to disable that",1538664651.0
helldogskris,"You can install the ""ndb"" module and run your start command with ndb e.g. ""ndb npm start"".

This has a similar effect to the --inspect flag but it automatically opens the chrome debugger window for you",1538636839.0
mattstrom,Can't get better than [NestJS](http://nestjs.com) as a Node backend with first-class TypeScript support. It has a CLI so it will help you set up your first project as well.,1538607369.0
beall49,I've used the Microsoft one.  https://github.com/Microsoft/TypeScript-Node-Starter,1538619060.0
sniperssuk,I really like [Loopback](http://v4.loopback.io). V4 will support TS out the gate.,1538653133.0
TheWillG,I attempted to write a generator myself that would take a YAML file as input and generate an entire CRUD API out of it. If you'd like to try it feel free: https://github.com/TheWillG/generator-express-backend-typescript,1538903149.0
BLOZ_UP,"No, there's no procedure. Typically you add a notice at the top of your readme that it's no longer maintained. Bonus points if you add a postinstall script to output the same notice.

Got about 50 notices in our project. Just trying to stay up-to-date with NPM packages is a nightmare.",1538613735.0
ncgreco1440,"Very few get right to the point. 

If you are making a simple brochure website, PHP can get it done for you quite easily. 

If you are building an API, NodeJS is going to allow much faster prototyping. So it appeals to the MVP projects. Over the long term, a properly built application is more about what flavor you want as both routes are equally complex.",1538606468.0
mattstrom,"Perhaps the [cluster.isMaster](https://nodejs.org/api/cluster.html#cluster_cluster_ismaster)` method will work for you?

However, I will say that it smells like your code has a deficiency in its architectural design. It is probably more appropriate to use a message queue or job scheduler for tasks like sending emails. This will ensure that tasks are run by only one process but will still allow for parallelism.",1538603657.0
sharedmocha,Thanks a lot. Will look into it,1538679758.0
dontchooseanickname,Sex is _not_ selling this time..,1538588532.0
kapv89,"Couldn't correct the title, the actual title is: ""Reporting: A hot woman’s take on AI""",1538585400.0
DataMapper,"This documentation on working with objects may be of use.  
[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working\_with\_Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects)  


You'll take in the entire object and assign it to a variable, response. You then access a username through dot/bracket notation to get to the item you want. You may need to make use of loops over the object in order to access multiple usernames.

&#x200B;",1538586883.0
mapman2017,This belongs more on a general JS question board. Search for stackoverflow answers. ,1538588994.0
Knext,discord.js Collection is extending the Map object. You can check the [docs here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) to see how Maps are used.,1538593437.0
Str4yfromthep4th,Back to school we go,1538850678.0
Hectate,"It's creating a new one because of how you are calling ``socket = io(...)`` from the click. Since you don't want new connections, what are you actually trying to get accomplished? Just open a private chat?",1538579321.0
idanlo,"You can connect all sockets to `/` and use socket.io rooms, seems much easier",1538650001.0
F0RCEFI3LD,Saved post. ,1538577680.0
Dorothy109zxy,Thanks bro,1538627859.0
MyPostsAreRetarded,7 hours? I'd rather super glue gopher stuffed animals to my fingers and jack off to Rob Pike sucking Dr. Ford's genitalia ,1538558405.0
xylempl,"Most likely, you attach the `room+'-newMessage'` event handler multiple times to the same socket in the `joinRoom` event handler.

Try adding `socket.removeAllListeners(room + '-newMessage');` to the `removeRoom` handler. ",1538513223.0
Lapter,"I think it is great that you hard coded user agent strings. Anybody who is setting those values randomly are doing it wrong. For example Cloudflare will flag those fake user agents. 

My suggestions

- Add mobile browsers like iOS and Android
- Remove lodash dependency since you only use random and sample functions.
",1538507885.0
fatty1380,Posting a deprecated module. Really helpful ,1538504140.0
joshmanders,This project is deprecated in favor of https://code.janeasystems.com/nodejs-mobile/ which is the same thing but more up-to-date and supports iOS,1538508266.0
dabomb007,I wrote a tutorial about building Node.JS addons maybe you would like it: [https://github.com/DAB0mB/node-distance-addon/blob/master/.tortilla/manuals/views/step1.md](https://github.com/DAB0mB/node-distance-addon/blob/master/.tortilla/manuals/views/step1.md),1538514000.0
vladimirice,"There is a Guide section on official node.js web site. 

https://nodejs.org/en/docs/guides/

A core concept section I think describes advanced concepts. 

Also personally I like this course very much. But it is paid
https://www.udemy.com/advanced-node-for-developers/",1538545044.0
,[deleted],1538503926.0
,[deleted],1538500547.0
WeaponizedMath,"Load balance with nginx, TLS terminate at Nginx, some form of database architecture and don't mess up sessions horizontal scaling.

Good luck tuning to your application.",1538508750.0
HipHopHuman,"You can swap Express out with [https://www.fastify.io/](https://www.fastify.io/) for around 7-10k more requests/s

You can set up a Redis cache in LRU mode for any volatile backend requests.

Serve static content (html, css, js, images, audio files) via a CDN, if you can't use a CDN then at least use a reverse-proxy like NGINX to take the load off of Node

You can also use NGINX as a load balancer to distribute the traffic to different instances of the application running on separate cores

This will make the app faster in general, but usually operational optimisations like these are never the major bottleneck of an app.

I'd recommend you copy the production setup on your local machine and use a stress testing tool to load hundreds of thousands of requests to the most commonly used routes, and generate a heap dump of the application during those requests. Then, you can take that heap dump and load it into Chrome devtools and inspect the charts to see which functions/methods most of the memory was spent, and try to optimize those as best you can.  


EDIT: Why the downvotes?",1538518173.0
hugo__df,"Passport seems to be popular ([http://www.passportjs.org/](http://www.passportjs.org/)).

&#x200B;

I tend to roll my own with Sequelize/Postgres (User table + Session table or JWTs with node-jose), then use bcrypt to hash passwords.",1538492662.0
OogieFrenchieBoogie,"The numbers follow what've seen recently : People look so obsessed with nest right now

I just went to an interview for a company that use it, it's insane how in love they were with their framework

Can someone that use it explain what's so great about it ?

I'm playing with Adonis right now, which I love, for the built-in auth, ORM and more, is this something I'll find with nest ?

Thanks",1538494335.0
,[deleted],1538558282.0
marinespl,802 of Twitter users is very representative group of devs.,1538514279.0
swestheim,Why node? Why not something like PowerDNS?,1538468252.0
TheNoim,Here is an example: https://github.com/Subash/adburner-dns,1538600480.0
zingzingtv,Look at what a dns server inputs and outputs and on which port. Wireshark might shed some light.,1538470813.0
Nephelophyte,I would be if I knew what that was,1538478405.0
PM-YOUR-BOOKS,I am now! Thanks OP.,1538468636.0
dude837,"Hey, Node for Max developer here. Really appreciating this conversation.
An extremely reasonable thing to say, after hearing about Node for Max, is ""Okay, looks cool but... why?"" The best answer I can offer is that as is the case with Node, people use Max for a huge range of things. There are installations that play sound as you walk through them, exhibitions with networked Raspberry Pis, dance performances that trigger sound using pose estimation, generative compositions based on genetic algorithms, etc. These draw on a ton of different libraries, and the things that are useful for one particular project aren't necessarily relevant to another.
Node for Max is a way for us to try to meet the needs of highly idiosyncratic users.
Also, graphical programming is great at some things, but not well suited for others. Where text-based and graphical programming can complement each other, I think Node for Max is very handy.",1538578039.0
Earhacker,"Who wants this?

All the examples seem to be running a web server inside Max, or grabbing data from an API inside Max. 

Why tho?",1538482281.0
SortMyself,"I'm brand new to node and JS, and been on and off with Max 8 for years.

This looks like a great marriage, though. ",1538454197.0
,[deleted],1538493252.0
EarlMarshal,"> 2018
> Not mentioning Webassembly


Atleast this tutorial tells about N-API. Thought this is the next one about only NAN.",1538463598.0
OzziePeck,Extension? The fuck? ,1538492468.0
,[deleted],1538451769.0
Geldan,"Making discord bots is pretty fun.  Here's one I used for the VR game Orbus: https://github.com/brandonshults/discorbus

There's not a lot of documentation because I threw it together quickly while spending most of my free time in the game.  Basically all available commands get their own file under the commands directory.  This pattern worked out really well and made it quick and easy to add new commands as new features were added to the game.",1538430770.0
sleepingthom,I have a couple questions about these types of projects. Where do I host them? Do they need a web server set up?  Because I already have a VPS which I use python/Django but I've wanted to do a node project for a while. I just don't want to mess with my nginx config. ,1538434940.0
MUDrummer,"1) why do you have a ‘r/‘ at the front of your target url?

2) “it just doesn’t work” is a shitty place to start from when asking for help. 

What have you tried? What errors are you getting? What _exactly_ isn’t working?

3) catch the errors on your proxy server.
    proxyServer.on(‘error’, err => console.error(err))",1538438255.0
coolcosmos,"You just reinvented the wheel, but worse.",1538425251.0
ProgramAllTheThings,Gotta love those screen-hijacking mobile ads.,1538415082.0
superfake123,"here is how I'm doing it... this is from my first node project I'm currently working on...

    // routes/api.js
    'use strict';
    
    const express = require('express');
    const router = express.Router();

    const controller = require('../controllers/api');

    router.all('/*', controller.auth);
    router.get('/getObjects' , controller.getObjects);
    router.post('/addfile', controller.addFile);
    router.post('/addfolder', controller.addFolder);
    router.post('/getDownloadURL', controller.getDownloadURL);
    router.post('/updatefilesize', controller.updateFileSize);
    router.put('/updateObject', controller.updateObject);
    router.delete('/deleteObject', controller.deleteObject);

    module.exports = router;

then this is example from controller

    // controllers/api.js
    const model = require('../models/api');

    exports.auth = (req, res, next) => {
        if (req.session.userid) return next();
        res.sendStatus(401);
    };
    
    exports.getObjects = (req, res) => {
        model.getObjects(req.session.userid, result => res.send(result));
    };

then this is example from model

    // models/api.js
    exports.getObjects = (userid, callback) => {
        global.db.collection('files').find({
            owner: userid,
            show: true
        }).sort({
            file: 1,
            name: 1
        }).toArray( (error, result) => {
            if (error) throw error;
            callback(result);
        });
    };

probably a few things I could improve on. it's my first node.js app. but it's close and a good starting point I think... **edit** I know I need to do like an object like let User = new User(); and create methods like User.Add(), User.AddFile, User.updatePassword, etc etc etc. I'll do that once I get this stuff figured out better! Also once I'm comfortable with how callbacks works, I'll rewrite them using promises, await, and async... **edit2**

something else I noticed... I do this...

HTTPS.use(express.json());

since latest express you no longer need to include and install the seperate bodyParser",1538436112.0
favaron88,Thank you,1538420723.0
rift95,">#3 Node.JS (Not a JavaScript Framework, then What Is It?)

It's a runtime. ",1538375684.0
iNeverCouldGet,This is from the docs? The style is very gibberish. Why don't you just append to file a million times if you don't want to bulk write?,1538362463.0
tswaters,"If I was to try to find the fastest way to do this, I'd probably open a series of file descriptors to different files, let's say 10% of the entire payload and write them out concurrently and when that is done combine all the files into one.",1538379806.0
janixwow,IMO the for loop is faster than while.,1538512681.0
PewPaw-Grams,Why would you want to read or write 1 million times? Collect the data and one shot write everything in,1538359868.0
fullheap,"IMO this kind of stuff should be done on the reverse proxy, not inside the app. Same with SSL.",1538377868.0
MUDrummer,Oh cool...15 slides with a paragraphs worth of content. ,1538367648.0
joesb,"If you have to ask the question, choose PostgreSQL. 

Always value data consistency over speed. MongoDB can be fitting in some very specific use case, and it still needs to be used with known limitation. 

This is not an insult. It’s just a good guideline. 

Choose PostgreSQL until you hit its limits. ",1538372405.0
tenfingerperson,It depends on the nature of the data itself. ,1538346472.0
codearoni,"Are you responsible for generating the data and are you responsible for creating the schema? If so, use PG.

Are you a pass through / storage for someone else's data? Where the schema could change at any time? Mongo might be the right choice. 

Stability is more important than performance. Mongo queries are *not* atomic. If you can handle a certain level of entropy in your data, Mongo will be fine. I wouldn't use it for anything billable though.",1538356756.0
aichholzer,"Relational data = PG. End of the story.
A properly indexed PG instance will blow MongoDB into smoke (when relating data)",1538377382.0
midnight_bike_rider,"You're not testing MongoDb or Postgres with your tests. You're testing a whole bunch of shit, including ORM libraries, test runners, etc. 

&#x200B;

Your results are \~200ms average for both db's. I didn't look at the individual tests, but 200ms for basic queries isn't great. All my Postgres queries in production are < 30ms each, with the majority being < 10ms. Either way, when both are slow, neither is faster. 

&#x200B;

Testing and benchmarking things is really hard to do effectively. Postgres is the better solution, and if you're really concerned about performance, you should drop the ORM. 

&#x200B;

Don't choose your database because some half-baked tests showed a slight difference in performance. 

&#x200B;",1538357367.0
Djbm,"There are so many variables to consider beyond performance. Some of the primary ones are:

 - **Do you need a lot of joins?** Mongo doesn’t do joins. If your query pattern requires a lot of joins Mongo will be a pain
 - **Is eventual consistency good enough?** Mongo can offer great performance across multiple modes due to eventual consistency. Eventual consistency is probably fine for a social network, but would be completely inadequate for a banking system.
 - **Does your DB need to run across more than one server?** Where SQL based databases become complex is when they outgrow the ability to be hosted on a single server. You might need to scale the db due to size of the dataset or due to query volume.

The best approach is to design your application so that the database is abstracted as possible. So many apps I’ve worked on have changed databases as the product evolves.

Start with what you’re most comfortable with and build a layer in your app that handles data access.",1538352921.0
stapled_socks,"The tests you have do not give *any* indication of how the two databases perform in a real world scenario.

- You're not testing simultaneous/concurrent queries.
- You don't take warm-up phases into account.

Take a look at `wrk` or similar tools that let you create a sustained pressure of hundreds/thousands of requests running concurrently for a minute or so. That is how you do actual performance comparisons.",1538372626.0
HipHopHuman,"Honestly, if your data is relational, Postgres, even if it is slower. The problem with MongoDB is that it drops writes sometimes. Read any case study on it and you'll see why.

The database shouldn't be getting called during tests just btw - it should be mocked in a test environment. Most 3rd-party code should be mocked because it has it's own test suite. You should just be testing your own code - so build your Data Access Layer in a way that allows you to inject or override the DB dependency with your own custom hard-coded version. Then the tests won't be slow.

If the speed is an issue in production, you can always use a Redis caching layer that sits between your Database and your Data Access Layer to speed up DB calls. In addition to the caching layer you can try to avoid O(n+1) DB queries by using WHERE IN clauses for fetching deeply related items, and be sure to enforce proper HTTP caching mechanisms such as ETag, If-None-Match, If-Modified-Since, etc.",1538377843.0
nikoz84,"Postgresql have many stuff for example:

* JSON and JSONB data type 
* Gin Index (inverted index)
* Full text search 

You can use a hybrid data base base with the power of relational database and scalable JSONB data type.

",1538379956.0
tswaters,"Doing single queries here and there is not indicative of performance. The problems you see with performance start cropping up when you have millions of rows/documents and many concurrent connections to the database.  If the database is properly tuned with correct indexes and, if you get really big, clustering -- you can get similar performance from both mongodb and postgres.

I wouldn't worry about the performance of your database at such an early stage - you should be choosing the database based upon what you need to do.  If it's relational data, use a SQL database.",1538380637.0
svenvarkel,Choose PostgreSQL if your data is relational and the schemas don't change frequently. Otherwise choose MongoDB.,1538415228.0
Kaylors,Yes.,1538346911.0
Thommasc,"None of the answers in this thread are relevant for you.

The real question is which one of these 2 databases do you know best. Did you code with them, did you manage the devops side yourself? Did you do some data design with any of the 2.

The only deciding factor IMHO should be how experienced and knowledgeable you are or want to be for any of these 2.

The rest is technical stuff that can always be overcome somehow.

If you question is which of the 2 is the recommended and most popular. Here's my 2 cents: PostgreSQL.",1538394989.0
,[deleted],1538397276.0
,[deleted],1538345067.0
kyle787,"OP you forgot to link to it.  I think this is the repo?

https://github.com/ngduc/node-rem/blob/master/README.md",1538335699.0
Boris-B,"The HaveIBeenPwned project has an API for this: https://haveibeenpwned.com/API/v2#PwnedPasswords

It seems to me like their data is a whole lot better than yours. Plus since it's a API, my app can always get the latest information about breached passwords.",1538344739.0
Xerxero,So every hour some completely different task. How to you get things done with the constant context switch. ,1538332707.0
Xerxero,So every hour some completely different task. How to you get things done with the constant context switch. ,1538332691.0
darkdigitaldream,"I have worked on back end rest applications in quite a few languages and platforms over the years. My background is more C# and typescript, but the following advice still applies:

Forgive me if this is basic, but axiom 0: your application should be structured in three layers. Controller / Domain Service / Persistence. With that in mind, every part of your application has a 'proper place' and fits somewhere on that stack. Now to your question:

Your domain models should be as close to plain old data models as possible. Any methods you think you want directly on the model you should seriously consider if it is possible to put on a domain service instead. There should be a very strong separation of data and functionality in your code for a number of reasons. However when crossing the layer between the domain service and persistence parts of your stack there is a need for the persistence layer to understand your domain objects.

For many ORMs, this is accomplished by having your domain models extend an ORM specific parent class or interface. For mongoose, it seems to be much simpler since javascript has no strong typing.

from the [following page](https://devcenter.heroku.com/articles/nodejs-mongoose) I see that the domain model can be converted to an ORM-aware object like so:

    var PUser = mongoose.model('PowerUsers', userSchema);     
    ...     
    // Creating one user.     
    var johndoe = new PUser ({       
      name: { first: 'John', last: '  Doe   ' },       
      age: 25     });      
    
    // Saving it to the database.     
    johndoe.save(function (err) {if (err) console.log ('Error on save!')});
    
This allows the domain models to be as simple as possible throughout the domain service logic then be bound to the ORM model the instant before you persist them by dumping their contents into a mongoose new() call.

When reading an object out of the ORM, you could potentially hand-roll your own method that converts it to a plain data object (trimming any ORM residuals) if you felt it was necessary.",1538330907.0
theigor,"Take a look at typeorm. I believe it works with mongo. Look at my comments history where I talk about typeorm, typescript, etc. Good luck!",1538334954.0
everystone,"I also use mongoose in a lot of my node backends, I usually do it like [this](https://brianflove.com/2016/10/04/typescript-declaring-mongoose-schema-model)

another example: [microsoft/typescript-node-starter](https://github.com/Microsoft/TypeScript-Node-Starter/blob/master/src/models/User.ts)",1538340835.0
HipHopHuman,"Let's first identify the actual problem with calling model methods directly.  


Let's pretend you have many route handlers like this one separated into many different files:

    app.get('/users/:id', function(request, response, next) {
      User.find({ id: request.params.id }, function(error, users) {
        if (error) {
          next(error);
        } else {
          if (users.length) {
            response.status(200).json(users[0]);
          } else {
            response.status(404).json({ errors: ['User not found'] });
          }
        }
      });
    });

And let's pretend that more than one of those routes fetches a user. You submit the code for review and your project lead tells you there is too much repetition, and that the implementation details hide the intention.  


So, you extract the logic into a Model instance method ""findUserById"":  


    User.findById = function(id, callback) {
      User.find({ id: id }, function(error, users) {
        if (error) {
          callback(error);
        } else {
          if (users.length) {
            callback(null, users[0]);
          } else {
            callback(null, null);
          }
        }
      });
    };

And you refactor all your routes in all the different files to use the new method - it takes you about 2 hours of tedious re-writing:  


    app.get('/users/:id', function(request, response, next) {
      User.findById(request.params.id, function(error, user) {
        if (error) {
          next(error);
        } else if (user) {
          response.status(200).json(users[0]);
        } else {
          response.status(404).json({ errors: ['User not found'] });
        }
      });
    });

It's not much of an improvement, but it saves you from having to coerce the same resource from an array into an object each time.  


Over the next few weeks, you add more routes that deal with fetching a user by ID, and everything is going smoothly. Your application now has 112 routes that fetch a user from the database, split accross 16 different files.  


One day, your boss asks: ""I've learned that MongoDB is not fault tolerant enough for our business model. Can we replace it with Postgres?""  


You start to panic - you know that you can do a change like this, but you're not very excited to jump into 16 different files and change 112 routes to query a different database. It's boring, tedious work and would take a very long time. You tell your boss, ""Sure, we can do this - but it will take a week including review to make sure we've converted all of the old methods.""  


Your boss is not happy with your response, but he understands. So, you spend the next week converting ALL of the routes to use Postgres instead, and your coworkers take time off of their tasks to review your work. It's a very unproductive week for the company, but it's necessary.  


After your work is done, reviewed, and merged into the master branch on the production repository - you go home, pour yourself a whiskey to relax and do some light reading on Node best practices. You find an article that links to an article about scalable design patterns. You click the link.  


The article describes a thing called a ""Data Mapper Repository"" which acts as a mediator between your application code and the database access layer. The article says some stuff about how ""the Repository acts as a strict interface - a contract that your application code has to adhere to when querying for data. Your application code can call methods on the Repository, and the Repository can call methods on the database models.""  


You pause for a second and think ""That sounds redundant. Why would I put a layer on top of my database when I can just use the database directly?  What a silly article.""  


Then you skim ahead to a ""Disadvantages/Advantages"" section. You see an advantage listed that says: ""Easy to replace the database implementation"".  


Having just spent a week doing exactly that, you re-read the article, but you pay closer attention this time.  


The article has a code sample for a rudimentary data mapper repository - it says that ""All application code refers to repository methods, and the repository takes care of delegating to different data sources"":  


    class UserRepository {
      static findUserById(id) {
        return mongoConnection.collection('users').findOne({ id: id });
      }
      static async friendsWith(id) {
        const ids = await postgresConnection.table('friendships').where({ from: id }).map('to');
        return Bluebird.map(ids, UserRepository.findUserById);
      }
      static async twitchFollowers(id) {
        const user = await UserRepository.findUserById(id);
        return twitchAPI.getFollowers(user.twitchHandle);
      }
    }

For a second, you stare at the code and think - ""Wow, it would have been so easy to switch the database out if we followed this pattern. It would have taken us far less than a week if all our code just referred to the repository methods... Plus, being able to query multiple sources under a unified API seems really clean"". ",1538397830.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/learnjavascript] [I'm still having async problems, i thought i solved it but i think it's with requests now.](https://www.reddit.com/r/learnjavascript/comments/9k6o9e/im_still_having_async_problems_i_thought_i_solved/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1538317339.0
Str4yfromthep4th,"This is NOT how to call c++ at all. Please do not post incorrect content.

Also, launching a child process is covered in the official docs.

Shit post.",1538313736.0
cspotcode,"Check out TypeScript.  It'll give you the editor code intelligence you've come to appreciate from C#.  In particular, VSCode's integration with the TypeScript language service is top-notch.

If you have questions, we're a friendly bunch on /r/typescript.  The TypeScript gitter chat is also pretty active.",1538307366.0
davidmdm,"Just to be a counter example, as a node developer for 2 years and then switching to typescript at work, I find that my productivity has gone down.

But to be fair my ide is a lot more powerful than it used to be. ",1538330565.0
beall49,Microsoft has a great typescript node starter project you can use. https://github.com/Microsoft/TypeScript-Node-Starter,1538334111.0
qashto,"You probably only feel less productive because with js you get to write less boilerplate code compared to other languages, hence you're actually doing more but typing less.  Atom has a great autocomplete feature.",1538349252.0
chewm_,"lol do you know what means ""cogear"" in spanish???",1538323677.0
josewhitetower,"I like the way the code is organized and the use of config files, I just took a look at the server code and yes, I would approach somewhow the same way.

&#x200B;

Last Node Express API I built, I challenged myself to user docker on it, you could take it as challenge for this project. Might be out of scope...but you can learn and docker will make your life easy.

&#x200B;

Good Job!",1538315823.0
Downvotes-All-Memes,"Super useful clean example, full stack with tests? This is great. Thank you for sharing.",1538417158.0
,[deleted],1538303331.0
,[deleted],1538321669.0
frankneuro,Nice overview. I was hoping to see some comments on lifting code out and importing from its own private module. ,1538314278.0
Parasomnopolis,"Just a quick FYI, you don't need to use path.join inside require. require will automatically convert slashes to the correct format.",1538519174.0
wiithepiiple,You'll probably get better responses from /r/webdev or /r/css . This isn't really a node question.,1538276558.0
e_to_the_pi_i,Nothing to do with node,1538275804.0
myockey,"Your problem isn't the promise, but rather the use of the `function` keyword. `this` refers to the thing that owns what you're calling and keyword-declared functions are owned by either `window` in a browser, `global` in NodeJS, or they could be `undefined`. Arrow functions use the immediate scope for `this` binding, which would be your instance.",1538274500.0
wiithepiiple,"One of the main differences between the traditional anonymous function, i.e.  `function() {}`, and arrow functions, i.e. `() => {}`, is the way `this` works.  Anonymous functions take the `this` from what calls it.  Arrow functions keep the `this` from where it was defined.  That's at least my understanding, but even programming with javascript for several years, I'm never confident about the behavior of `this`.

Previously, the solution was to use `var self = this` at the top of your class or function and call that instead of `this`.  Arrow functions lessen the need for that, but even with them, `this` can do unexpected things.",1538274673.0
TyrionReynolds,"The promise is a function taking two parameters, resolve and reject.  Using “this” inside that function will refer to that function (the promise).",1538274657.0
tenfingerperson,"Ignore the question itself but read the comments:

https://stackoverflow.com/questions/37556058/are-javascript-es6-classes-of-any-use-with-asynchronous-code-bases",1538266125.0
Buckwheat469,"Node.js Live! - Demistifying the event loop

[Here's an English language talk](https://www.youtube.com/watch?v=8aGhZQkoFbQ&vl=en) by Philip Roberts on the same topic for those of us that don't speak Spanish.",1538294425.0
NecessaryClick,"As you already said, introducing JS & installing node should go first in every node.js course for beginners. I would personally love to see a decent & understandable guide on user management, since it is quite difficult to explain to others. A essential topic (imo) would be working with API's. API's are a fundamental base for most of (my) node.js applications, so i do think it is important to know how to deal with it for people new to the language.",1538244199.0
SlyHawkIII,"- JavaScript
  - Proper Practices
  - Good Style

Then teach about reading docs. Then teach packages or whatever, but if you can read docs, you can code.",1538279590.0
inabahare,"Actual proper god damn file, folder, and program structure. 

I feel like so many tutorials ignore this ",1538248392.0
Str4yfromthep4th,How bout don't waste your time. The official node documention is all we need.,1538247671.0
josh_green_1,Nice article. Is there some example code I'm not seeing? There are references to some fs.readdir() calls but nothing on the page or in the gist.,1538266483.0
winsomelosemore,This is a poorly titled article. It’s an introduction to building an API using Koa. The sentiment analysis aspect is just plug and play,1538233678.0
evertrooftop,Great intro to Koa. Everyone who's mainly using express and wishes promises felt more native should take a look!,1538275562.0
Migom6,Beautiful API from koa. ,1538309868.0
sneffer,How to expose a single function of a single npm package by wrapping it in unnecessary amounts of server code.,1538263877.0
BloodAndTsundere,"Any thoughts on the sentiment package used in this article (or other such packages)? This article isn't really about sentiment analysis and I'd be interested in knowing more about that rather than another ""build an API"" tutorial.",1538261836.0
inthegrave372,I have an unrelated question and I have always wondered about this. How come your git icon on the left shows 5k changes?,1538211337.0
Jjhou,"Are you familiar what async functions mean? If not, then I think thats your problem. I think your last messages from server haven't arrived yet, when you already try to console.log them.",1538207841.0
Muppetmeister,Before you execute your if-statement what output do you get if you console log data.toString?,1538209328.0
Krysalead,"Hi,  can you give us what is after your commented console.log in the client?
Because you have found \n so you process your json and maybe right after you do something wrong.",1538212570.0
gabroe,"You need to wait until the write stream is ready to receive data again, check the documentation of “write”

https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback

Also these are very low level apis, usually some library can be used instead but I get you are learning.",1538225184.0
Str4yfromthep4th,You're using visual studio so just put a breakpoint and run the program through it instead of command line. Is this your first time using a debugger? Put your boss on the connection.writes and step through very slowly. You will see the problem.,1538234284.0
Str4yfromthep4th,Why segment,1538205985.0
Str4yfromthep4th,"Man, u know how many ppl on here waste their lives practicing. If we banded together we would make something worthwhile. ",1538234920.0
ivanph,"If they file you end up with is the size you expected, try changing the encoding to `binary`.
Is there a reason why you are downloading the file in chunks like that instead of just piping it to a file ? Something like this should work.

    const https = require('https');
    https.get('test.come/file.zip', res => {
        const writer = require('fs').createWriteStream('file.zip');
        res.pipe(writer);
    });",1538207462.0
curiousdannii,"Just a side note: don't use await for those four requests. You're doing them in serial now, not parallel. ",1538490989.0
s5fs,"I'd use S3, it's cheap and the javascript sdk is easy to use. There are lot of good examples out there on how to use it, here's a gist I found that uploads files from disk: https://gist.github.com/jweyrich/7799579f0dba66fba1069d370a707f1b

You should be able to modify that example pretty easily to upload files from your request object. The official docs for putObject are here: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property

Good luck!

",1538233462.0
ericwenn,What files are you attempting to store?,1538210724.0
goorpy,"Google's free forever tier for cloud storage is pretty reasonable. It's what I use.

A challenge you're going to face for any provider, though, is needing to split the app into a front end and back end running together on Heroku in order to maintain secrets for your keys.

This is doable, just more complicated than pushing up a straight forward FE only app.",1538245295.0
curiousdannii,Well you can always store files in Heroku Postgres. ,1538208130.0
drakefish,"For my next personal project I'm planning to go full serverless on AWS using Typescript, the Serverless Framework with automated CI/CD for everything from front-end to backend. I've been doing introductory reading and exercices and it's a pretty big dive for me, but it seems like once the initial setup is done this will free so much work off my plate. Has anyone done a similar dive for personal/small team projects?

I've been reading about AppSync and it sounds like an amazing way to make the front-end development easier as well for such a project. ",1538249293.0
Lost_sand,"define ""server""",1538197897.0
Veretax,For what it is worth I don't think it's referring to the device with the IP address that you are hitting to download the code from. I think it refers to the way nodejs is able to do a lot of processing within the browser and take advantage of the power there. And yet nodejs could still be run on a server which might also be part of the cause of confusion,1538219204.0
hparadiz,Hit CTRL+C twice,1538174485.0
BehindTheMath,Are you looking for an ORM? TypeORM is designed for Typescript. ,1538165502.0
mattstrom,"There's also a Sequelize add-on for TypeScript, sequelize-typescript. But TypeORM is way better.

For Mongo, TypeORM will work or you can use Typegoose. ",1538168942.0
lol10801lol,Nexe bundles together a node executable for target platform with your code and any resources it uses. Making a shared library out of node.js code would likely be close to impossible.,1538233958.0
jkh911208,"Try to reduce the bottle neck by erite extra code in c++ or java and make rest call. you can rewrite the part that has cpu intensive code only

if you think still too slow. build the computer",1538144289.0
Toxicable,"Multithread your cpu intensive tasks. A better cpu might half the time, but it won't reduce  by 4 as you would using those other cores
 ",1538201805.0
Yaty14,"You could try those modules (to distribute work to several cores instead of one) :

\- [https://www.npmjs.com/package/workestrator](https://www.npmjs.com/package/workestrator)

\- [https://www.npmjs.com/package/worker-farm](https://www.npmjs.com/package/worker-farm)",1538226063.0
bigorangemachine,JS regular expressions aren't the best. You may need to sub-parse those regexp's!,1538146243.0
Kingsthor,"You could try using the new experimental [worker threads](https://nodejs.org/api/worker_threads.html) for the CPU intensive tasks, but the API might be subject to change. ",1538168183.0
robotmayo,Grafana + a backend to grab and store the data is a good solution.,1538254326.0
ThatAPIGuy,"A scheduled Lambda function written in node. Just have the function called from Cloudwatch every 30 mins, make the Zendesk API request, same as a row in an RDS DB or even a GSheet. Then visualise either in Datastudio or Metabase.

Lambda + GSheet + Datastudio would effectively be free.",1538294738.0
chrissilich,"> 25 percent of teams still support IE 10 and under!! I'm all for browser support but this is about 0.5% of browser activity being supported by 25% of teams! This is absolutely bonkers to me. There are a lot of use cases that could mandate supporting these old browsers, but I am certain it is not 25% of cases.  
  
This is really flawed ~~math~~ thinking. I read it as ONLY 25% of teams support IE10, despite 1 in 200 visitors using IE10. Could you imagine if Kroger just turned away one in every 200 customers?  
  
And that’s not accounting for the differences in demographic. 0.5% of all (I assume US) users is not going to be accurate for all locations and all businesses. If your client has low income customers on old machines, they’ll see more IE10 users. Same for older customers who just don’t want the hassle of upgrading. ",1538144671.0
apatheorist,"I don't support IE now, Edge included. Sure Edge is light years ahead of IE. But it's still wrong in so many ways. SVG support, comes to mind.",1538179917.0
hugo__df,"\- If you're willing to dump Postgres: [glitch.com](https://glitch.com) with SQLite3 is free forever

\- Heroku, costs might ramp up if you hit the 10k row limit on the DB, you want the server not to sleep or you host a bunch of projects

\- $5 DigitalOcean droplet with Dokku on top, \`git push dokku master\`, great thing about this setup is you can host multiple apps on this droplet (and possibly then separate them when/if it makes sense).",1538143062.0
aichholzer,Heroku. Host for free.,1538136943.0
cjthomp,"$5 digitalocean droplet, tiny ec2, ebs/rds",1538135179.0
Ariquitaun,"My philosophy is never to pay any development costs up front for nebulous future use cases. If you think you might want to micro-service your app then by all means keep that in mind when structuring it so that it becomes easier to do later on, but don't go to the extra mile until it becomes necessary.

Same goes for infrastructure. Go simple. A couple of small EC2s (or set up EBS as you say) + ELB + RDS (
Heroku might even be easier) will get your stuff out of the door quicker, and only later once you start ""making it"" invest in improving. 

Deploy via git to begin with instead of setting up a deployment process. 

Run your tests locally instead of spending time in setting up CI.

Auth0 has a free tier too.

This will save you money and time and help you get out to market quickly. Then once (and if) you get bigger, incrementally rearchitect your stuff but this time with hard data on what you actually need. Early optimisation (either in code or infrastructure) is a money trap, especially since you're guessing today what you might need when you're big.

The trick to do this right is in taking the right shortcuts, and this includes not coding yourself into a corner or bog yourself down in complexity early.",1538140521.0
vinnl,This is fantastic work! I love it when I can get enthusiastic about something I didn't even know I wanted :),1538136819.0
greatwhitehype,I really like this idea. Can’t wait to test it out!,1538172137.0
rnemec,"Any examples how to make it work with TypeScript?

Since this is being compared to `nyc`, I'd hope to see coming support for includes, excludes, source maps, etc.",1538327582.0
habanerocorncakes,"Check out [up-for-grabs.net](https://up-for-grabs.net) it aggregates issues on open source projects that are tagged specifically to be good first contributions to open source projects. Theres plenty of need out there, but it can take time to get up to speed on how any particular project handles contributions. Using a site like this can help you make the most of your time and increases the likelihood of your contributions being accepted. 


Good luck!",1538137228.0
JollyDillCucumber,"where's your portfolio

&#x200B;

edit: Is it the codepen or do you have a site?",1538126440.0
nikoto-,"Cool initiative dude! To help you out, i've refactored your url shortener project on Github with a couple of suggestions :) Hope it's at least interesting for you to see how those kind of node.js applications scale out on a bigger level!",1538132997.0
aichholzer,Have a look here https://GitHub.com/GetRayo/rayo.js see the issues tab. Help is always welcome. 🤘🏼,1538140587.0
AxelTerizaki,"Check out Karaoke Mugen if you'd like to work on an open source project (and if you like Karaoke) :)

&#x200B;

r/http://karaokes.moe

&#x200B;",1538254296.0
TheNoim,"Never saw any native addon written in Swift. Maybe it's possible, but isn't a standard.",1538567918.0
l3l_aze,"There are services like Codacy and CodeClimate which attempt to measure quality based on many factors such as output from linters & code analysis tools along with measuring cyclomatic complexity (number of different possible paths through some code, e.g. JS functions). Not sure, but I think it's Code Climate that also tries to measure maintainability of projects.


Along with that there's also services like [Snyk](https://snyk.io) which will monitor projects and dependencies for known security flaws. And services like [DavidDM](https://david-dm.org) which monitor dependencies for being outdated and will change their badge color on GitHub if that happens. Plenty of other stuff that can be monitored or turned into a badge too ranging from amounts like code size and issues, including only open or closed, to what may be more interesting like the average time of issues being closed after getting opened.


The biggest measure of quality is usually the use -- more dependents/popularity tends to weed out issues faster, and mature, consistently maintained projects tend to be better partially because of this. There are also just some people that understand what they're building or the language itself and its capabilities better and can do things in ways others with less knowledge wouldn't even dream of.


Also, some people are better at understanding certain parts than others, or have more experience with certain things than others. Personally I understand and have far more experience parsing and managing different forms of data than I do with any server-related stuff so I tend to make nice fast parsers, but probably couldn't even make a functional hello world web API if someone I cared about's life depended on it.",1538115263.0
Str4yfromthep4th,Most node modules are created by folks with the same amount of knowledge as you. So performance is the last thing they're thinking of. Use some common sense to determine why modules are not fast. It's because ppl who haven't gone to school are writing shit code.,1538116733.0
idanlo,"I think it's best to make the DELETE request directly from the client.
For example an `a` tag that links to `href=""/users/delete/<%= product._id %>""`",1538118890.0
habanerocorncakes,"Here is a [stack overflow](https://stackoverflow.com/questions/30535309/where-should-i-define-js-function-to-call-in-ejs-template)  that deals with your question. I am paraphrasing your question into the more applicable (imo) “How do I pass functions to EJS templates?”. 

The above stack overflow suggests making an EJS template file that contains a script tag with the functions you want to pass to the frontend. 

I know this may not answer your specific question, so Ill address what I think youre trying to accomplish as well. 

You asked if its okay to make a request for everything. Well, for lots of things you must make a request, such as dealing with your DB, fetch data, or generally talking to the server. The functionality of your your delete product button isn’t clear from your description, but if your goal is to delete the product record in the database, yes you must make some kind of request to the server to handle that. The frontend has no other way of talking to your DB or API. Thats perfectly normal. 

If you just wanted to hide the product on the frontend, but not update the API or anything, then no you would not need a request to the server, because you’re working with whats displayed in the frontend and can do that by altering the html with JS or jQuery. 

At the end of the day, there needs to be a separation of concerns between the frontend and the backend. Your backend API will be set up to respond to requests made from the frontend. Thats called the server/client relationship and is typically established by whats called the request/response pattern. Your frontend makes a request to the server, backend sends a response to let the frontend know everything went okay, or to send back the data the frontend requested. Thats all business as usual for web development. 


Hope that helps!",1538139526.0
,[deleted],1538096497.0
l3l_aze,"Took me a minute to realize it was a video and not an article, lol. I just kept scrolling around through the ads saying ""What the hell?"". Clearly not a refactoring day.",1538078091.0
wswoodruff,First,1538074048.0
habanerocorncakes,"You could change your npm prefix to somewhere else. 

It sounds like you’re running NPM with root permissions which is considered  a bad practice because of security vulns (npm can execute arbitrary scripts, so one bad package and you could get into trouble). 

",1538085330.0
l3l_aze,"[npm.js](https://github.com/npm/cli/blob/latest/lib/npm.js) uses [npmlog](https://github.com/npm/npmlog/blob/master/README.md) internally, so you could try to access that and change the value of stream while running to achieve this, if you want to try to find an official route.


It would likely be easier to just use a symbolic link, but of course you'll need to decide if that seems safe.


Edit: and it seems to just put logs in wherever `npm.cache` is, again for the official route.


    glob(path.resolve(npm.cache, '_logs', '*-debug.log'), function (er, files) {
      if (er) return cb(er)
      while (files.length >= npm.config.get('logs-max')) {
        rimraf.sync(files[0])
        files.splice(0, 1)
      }
    })

",1538074048.0
,Set the server to listen to PORT ,1538107680.0
dmj_X,"Have you tried this already?

[https://devcenter.heroku.com/articles/node-websockets](https://devcenter.heroku.com/articles/node-websockets)

&#x200B;",1538075450.0
NathanSMB,"You need to have made money developing with Node. That is it.

&#x200B;

If you want a checklist of everything you need to know to get the job you want then that depends completely on what kind of node apps you want to work on.",1538068076.0
otakubird,You need to get paid for your work. That’s what professional means.,1538068088.0
Cuel,"""Professional"" means nothing. ",1538118256.0
HipHopHuman,"I don't like the very linear definition of ""professional = someone who has made money from it"". You can still make money if you miss every deadline ever given to you. I don't consider that to be professional at all.",1538124014.0
Neonsamurai1980,"In my definition a professional is distinguished from an amateur in that a professional follows a repeatable and accountable process of software development which produces predictable results of consistent quality.

While making money is the point of persuing our profession, it is not its defining quality.",1538069104.0
Charles_Stover,"Because it runs on a server.

If you are running it on a client, that client is a server.

Apache is server-side software. I can run it on my localhost.

PHP is server-side. I can run it on my localhost.

Servers are just computers. Any computer can be a server.",1538069350.0
congowarrior,"Yes you are right, you could use Node for automation and scripting.

&#x200B;

Where are your scripts executing from? A server of some sort?",1538068262.0
NathanSMB,I would assume it's because when Node came out JavaScript was only a client side language to be used in the browser. You can make client side applications with the native libraries but it wasn't what Node was intended for originally. That changed with libraries such as NW.js and electron.,1538068410.0
brown59fifty,"Node is not exactly a programming language like Python or Ruby, so you can't compare 1:1. It's an environment based on JavaScript which extends it in areas out of its default scope (like handling local files and running external binaries) - but it's still JS with its pros and cons. You have to remember that client vs server side division refers directly to network/web technologies and ways of exchanging data - if they will be calculated on others' computer or client's. And because running binaries is considered as server-side, that's why Node is marketed in that way (because when you have *a product* you have to define you're *target group*).

But in the same way are Python or Ruby considered too. I remember times making tools in PHP scripts, which make some changes in files or operating system - because why not? Some people like downloading special apps for making things done, others just write some bash/batch commands. It's only your choice how you use some tech :)",1538070452.0
stevensokulski,".In the case of an application that uses Node locally, thin of it as a server with in,y one client (the GUI).

The server term fits best when there are more than one client, but a web server with only person visiting the site is still a server.",1538263670.0
umaar,"If you prefer direct links to certain parts of the conference video/code:

* Web scraping with Puppeteer: [code](https://github.com/umaar/puppeteer-simple-example) / [video: 58 seconds](https://youtu.be/qIWNoJv4Lyc?t=58s)
* Markov Chains to generate text: [code](https://github.com/umaar/markov-chain-simple-demo) / [video: 2:45s](https://youtu.be/qIWNoJv4Lyc?t=2m45s)
* Alfred Workflow creation: [code](https://github.com/umaar/alfred-simple-example) / [video: 4:33s](https://youtu.be/qIWNoJv4Lyc?t=4m33s)
* Bitbar Plugin creation: [code](https://github.com/umaar/bitbar-simple-example) / [video: 7:35s](https://youtu.be/qIWNoJv4Lyc?t=7m35s)
* Bluetooth in Node.js: [video: 9:36s](https://youtu.be/qIWNoJv4Lyc?t=9m36s)
* Demokit: [code](https://github.com/umaar/demokit-simple-example) / [video: 11:23s](https://youtu.be/qIWNoJv4Lyc?t=11m23s)
* Interacting with third-party APIs: [demo](https://app-amabot.wedeploy.io/) / [video: 13:07s](https://youtu.be/qIWNoJv4Lyc?t=13m7s)
* Blood tracking: [code](https://github.com/umaar/blood-fire) / [video: 17:42s](https://youtu.be/qIWNoJv4Lyc?t=17m42s) / [demo](https://app-bloodfire.wedeploy.io/)
* Wikipedia Edits WebGL Globe Visualisation: [code](https://github.com/umaar/wiki-globe) / [video: 19:37s](https://youtu.be/qIWNoJv4Lyc?t=19m37s) / [demo](https://umaar.com/globe/)",1538059372.0
XXAligatorXx,I had a suggestion for the site. Could you please not switch colors from white to black background in the slides. My eyes are burning since I'm reading this in the dark. ,1538102756.0
Monstertone,"Thanks for posting these!

&#x200B;",1538065362.0
,[deleted],1538067044.0
Koala_T_User,Don’t tell me how to live my life,1538096834.0
ItalyPaleAle,"First, use streams. Don’t keep the chunks in memory and then write them to file. Just get axios to return a stream, and pipe it to a stream created with fs.createWriteStream

For how to chunk that... you first need to make an extra request to get the size of the file and see if the server support chunking: https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests

By the way, why do you need to use chunking?",1538058301.0
davidmdm,"As others have stated, this could be done much easier via streaming. You wouldn't even need any external dependencies.

    require('http').get(fileUrl, res => {
        res.pipe(require('fs').createWriteStream('./file/system'))
    })

and you are gonna stream it. Refactoring imports and error handling is not included but it is trivial to add.

If this is an exercise to understand How accept-ranges work then you need to make a HEAD request first to the resource, to validate from the headers received that the Accept-Ranges headers has the value ""bytes""

Than using the Content-Length header as the total amount of bytes that you need to download, you can chunk that into lengths of your choice as long as you cover the whole Content-Length.

Either concatenate in memory, or start writing to the file and append as you get more data.

However to recap, streaming is the best way to do this. It is the most memory efficient, and requires less networking and resources.

Hope this helps. ",1538093544.0
cahva,"The second .then((result) will have no result because in the previous then you only console.log the result, not return it for the next then. Your code will probably work if you take out the first then where you only console.log it.

If you do promise chain, the result is not automatically passed to the next one.",1538009165.0
,[deleted],1538013145.0
RamesesLabs,"Looks pretty good to me, I will give it a try on a project for sure. ",1538003713.0
BENJALSON,Looks slick. I'll give it a shot.,1538007466.0
opqr549,Always in the market for a way to utilize cool technology like this for a boring menial task (such as creating endless static brochure style websites) makes my job more fun (and easier!) Defintely going to check this out. ,1538024253.0
TaskForce_Kerim,"Would be nice, if it actually supported the current Node LTS version.",1538036153.0
kqadem,"What is meant by saying ""Works with Angular, Vue, etc""??
That I can put my Angular SPA into this tool and it creates static sites? Barely doubt it. And even if yes, that would mean there is a lot of code to support every kind of framework. Don't even mentioned the nonsense of porting SPA's into static sites in respect of UX... 

SSG should be small. KISS, you know.
so again, what do you mean with 'supports'. there is nothing in the docs about it. ",1538070224.0
CogearJS,"Is there any possibility to insert YouTube video via embed player here, anybody knows?",1538044883.0
jlfgomes,"Looks cool, I've used Jekyll a lot but wanted a full JS solution for static sites. Gatsby is a little bit too bloated for me... Will try soon.",1538002081.0
chadtlo,"I too would be interested, but I come from the database side. my server-side is average, and my front-end is horrendous. Use express and build it from scratch. My opinion means nothing.",1537989543.0
Cedricium,Literally just started watching this tutorial series last night from [DevTips: Let's Build an ONLINE BUSINESS](https://www.youtube.com/playlist?list=PLqGj3iMvMa4K-QGq9uaF3BbPojp4xyoRw). It's a six video series showing you how to build an e-commerce site from idea to product using React.js and Next.js; so far it seems pretty good (I'm on the 2nd episode). Hopefully this is of some use!,1538007854.0
Migom6,I don't think anyone will give a satisfying answer here.   Even I don't know what are the technologies needed to build a full fledged e commerce. ,1538313639.0
podsixia,"It’s been nearly a year since I looked into this, but at the time none of the most popular options seemed ready for production. Could be wrong, or things could have changed, but I wouldn’t get my hopes up.",1537990024.0
bob_lazer,"You could try this: https://moltin.com/

",1538054940.0
joshmanders,You install the dependency as if it was a normal one.,1537990304.0
sagirk,"Choose the classical \`for\` loop over \`forEach\`/ES6 \`of\` when dealing with huge amounts of data (e.g., 10/100 million+).

&#x200B;

Reasons why:

[https://medium.com/tech-tajawal/loops-performances-in-node-js-9fbccf2d6aa6](https://medium.com/tech-tajawal/loops-performances-in-node-js-9fbccf2d6aa6)

[https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-a-bad-idea](https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-a-bad-idea)

[https://stackoverflow.com/questions/43031988/javascript-efficiency-for-vs-foreach/43032526#43032526](https://stackoverflow.com/questions/43031988/javascript-efficiency-for-vs-foreach/43032526#43032526)

[https://stackoverflow.com/questions/3520688/javascript-loop-performance-why-is-to-decrement-the-iterator-toward-0-faster-t](https://stackoverflow.com/questions/3520688/javascript-loop-performance-why-is-to-decrement-the-iterator-toward-0-faster-t)",1538028671.0
sagirk,"Use a version of node that ships with new TurboFan JIT compiler rather than just the older Crankshaft compiler.

&#x200B;

Reasons why:

[https://medium.com/the-node-js-collection/get-ready-a-new-v8-is-coming-node-js-performance-is-changing-46a63d6da4de](https://medium.com/the-node-js-collection/get-ready-a-new-v8-is-coming-node-js-performance-is-changing-46a63d6da4de)",1538029275.0
yonatannn,"Use factories or constructors to ensure objects are created using the same schema so the v8 won't have to generate hidden classes on runtime (a.k.a POLYMORPHIC VS MONOMORPHIC FUNCTIONS)

https://medium.com/the-node-js-collection/get-ready-a-new-v8-is-coming-node-js-performance-is-changing-46a63d6da4de

",1538055006.0
mulijordan1976,Don't starve the event loop - monitor that CPU bounded tasks are not blocking,1537977142.0
yonatannn,"Pasting from our repo ->

Title: Monitor first customer-facing metrics

Gist: Going by Google's SRE book, monitoring should focus on metrics that immediately impact the customer, practically the golden signals: API Latency, Traffic, Errors, and Saturation. Also relevant are the RED framework and the USE method",1537979720.0
poothebear0,I usually write to log/monitor on DB query start and query end so I can later identify avg query time and identify the slowest queries. Using Sequelize you can pass the flag {benchmark:true} and get the query times logged. Later you can bake/export to your monitoring system and create metrics based on it,1537985110.0
yonatannn,"Pasting a comment from Github: 

Deal with database and external APIs in batches, meaning that a developer should favor, and try to fetch a 100 entities using a single HTTP request, instead of a 100 HTTP requests with a single document each.

Same goes for database operations, writing and fetching data are faster when done in batch rather than multiple operations.

https://github.com/i0natan/nodebestpractices/issues/256",1538054710.0
habanerocorncakes,"Looks like youre probably running an express app, yes?

Did you tell express to serve static files from your public dir? 

I dont understand your requirements (you mentioned your work was making you host this way) but Id highly recommend hosting this somewhere you have root access. Its extremely simple to spin up a server with node and express, even using a service like [glitch.com](www.glitch.com), but making apache and node play nice together has very little to do with node IMO. 

You seem to have a done a great job so far! But Id suggest trying to find a different way to host this which satisfies your work requirements, if at all possible, instead of trying to wrestle control away from Apache. 

Without seeing your code, not much feedback to give from a node perspective. But it seems like youre doing great so far, good luck!",1537969149.0
r33ker,"Instead of:  
`RewriteRule ^.*$ http://127.0.0.1:49157/ [P,L]`  
Try:  
`RewriteRule ^.*$ http://127.0.0.1:49157/$1 [P,L]`

But that's just a wild guess, I haven't used apache in a really long time. Above will work however only if node.js is actually serving static files and you are not expecting apache to do that. If you want apache to serve them directly, you will need a bit more .htaccess magic (for it to try to serving a file first before proxying to node app).  


  
Another comment I have...

I'm 90% sure that if the effort it took you to write this semi-remarkable description of your problem was invested into solving it, you would not only solve it but be better at solving it in the future, you need to get used to that if you are planning to be in webdev.",1537968110.0
NathanSMB,Can you post the ejs file where you link to the scripts and stylesheets?,1537977639.0
notantisocial,A2 hosting has great customer service. If you think it’s a hosting issue I would call them,1537987930.0
polish_jerry,I'm too lazy to read all that but if you're looking for a solution fix those console errors then you forgot to close some tag in your ejs,1538041352.0
morphasis,"Why don't you construct one object with all the params that you want to be present in your query. Then remove all the params that are null, if you need to.

eg.  (Using lodash for picky)

    let queryObject = {
      phoneVerified: req.params.phoneVerifed || """",
      occupation: req.params.occuption || """",
      etc: etc || """"
    }
    
    // removes falsey params
    queryObject = _.pick(queryObject, _.identity);
    
    
    const users = await User.find(queryObject);

If you are not using lodash or underscore. You can loop through that object, check if the param is === """" then remove it.

Just a suggestion there may be prettier solutions.",1537954452.0
rikmms,"Check Celebrate: https://www.npmjs.com/package/celebrate
",1537960922.0
Quertun,I have been using it over 3 years now. Works like a charm. ,1537964868.0
dubkrapht,Try validating your route params/payloads with a library like [Joi](https://github.com/hapijs/joi).this enforces not only the types of input but also what the client should send to your api,1537968062.0
vijayant123,Another library like querymen is [https://www.npmjs.com/package/mongoose-datatables](https://www.npmjs.com/package/mongoose-datatables) It is useful if you choose to use datatables library to render tables in the frontend.,1537969159.0
,[deleted],1537958087.0
Quertun,If your DB is mongdb save yourself a lot of work and use node-restfull. It's in NPM and on github. ,1537959681.0
morphasis,"So typically when handling things like this, I like to use the await try etc route. This means even if there is not something i can explicitly predict the error i can still easily catch it and log the error etc without the app crashing. Its much neater then the old callback hell from promises.  


This is a good read on that.  
[https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8)",1537954897.0
mariotacke,"Use ‘amqplib’, it’s the standard library used in their tutorials and works great. It supports promises and callbacks.",1537918935.0
jezerdave,"haven't tried it yet for rabbitmq, you can try [https://github.com/mqttjs/MQTT.js](https://github.com/mqttjs/MQTT.js), i tested it on hivemq

&#x200B;",1537954667.0
sneffer,"I agree with u/Gnome_0

These endpoints may currently seem the same, but they are actually quite different.

`/signup` actually doesn't fit the principles of REST at all IMO, though.

I would actually expect a `POST /users` endpoint to be used by an actor with many privileges to create a new user(s) as they please. `POST /signup` is something I'd expect to begin the state-ful process of an actor creating their own user (the action is often never valid within one request, think email verification).

Your requirements may not suggest it now, but the endpoints are quite different. Keep this in mind so you don't have to make a major API version incrementation in the future to separate the two without ruining your clients' day.",1537938666.0
Personalife,"You should keep them separate, but if the routes do the exact same logic, then that logic should live in a function / module that can be shared between the two so you're not duplicating it.

For your small question - I'd probably go with username and reverse-resolve under the hood to get to the id.

But it really depends on the design of your API - will they require the username or user id in general to interact? Username is easier to write out compared to user id.

And a minor - you might want to consider PUT for your create API.

https://stackoverflow.com/questions/630453/put-vs-post-in-rest",1537920860.0
Gnome_0,"they could look the same but they cant be used in the same context because when you are signing up you are creating a user just for you but when you use /users you are creating a x user , that means a lot in your api if you are using roles ",1537922764.0
CertifiedWet,"They maybe or can be the same on the controller end of things, but the difference is that the \`POST /users\` will have a different flow getting there. For example admin access, this means an admin can create different types of users, signup on the other hand only limits specific user types on that route. So your logic can be this  


\`signup\` -> ( \`validate user request\` -> \`validate allowed user types\` -> \`create user\` -> \`response\`)  
\`users\` -> (\`authenticate admin via token or something\` -> \`validate user request\` -> \`create user\` -> \`response\`)  


this is just one example. Maybe in signup you want an email to be sent but on POST you just want to create a user.  


Also yeah GET /users/:id is necessary for user management of the admin and I suggest just something like a \`/profile\` for the user, let your authentication method retrieve the user details no need to pass your username to the API.  


Thats how I'd do it, I might be wrong though. :D",1537941537.0
anubis2019,"Theres an NPM package called mssql or mysql which can be used for interacting with the database.
I would recommend that you write stored procedures in sql server and execute them using these packages.",1537922255.0
apatheorist,"`npm install claudia`

",1537942853.0
mattstrom,"Why do you want to do this? 

The GitHub repositories for the Postgres and Mongo drivers is probably your best to start. This doesn't feel like a subject that people write tutorials about.",1537927122.0
jrandm,"https://www.postgresql.org/docs/current/static/protocol.html
https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/

Those would be the places to start. You won't really find any tutorials or guides about this specifically because it's straightforward programming: They publish a spec and you can test against written to happen & actually happens. If you haven't implemented code like this before I think the standard route is probably constructing your own HTTP/TCP/UDP or other popular internet protocol, any of which may be easier to find a tutorial-style guide.",1537928692.0
itijara,"How far down the rabbit hole do you want to go? You can probably communicate to Postgres through the terminal, but you would have to have postgres client installed locally to do so. If you want to really work from a low-level, you can use the net and tls libraries in node to communicate with postgres. Take a look at how other libraries already do it: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js](https://github.com/brianc/node-postgres/blob/master/lib/connection.js). Ultimately, you *would* be reverse engineering those packages. I don't see how you wouldn't.

I wonder why you want to do this? If it is to remove external dependencies, then I think it is a bit misplaced for database drivers. They generally aren't built into any language, and it is not like they contain lots of bloat features that you won't be using. If it is to learn low-level networking in NodeJS, then there are simpler problems that can teach you: build your own duplex communication with sockets, and don't worry about things like encryption or reading documentation on database communication protocols. 

Also, if you really want a good primer on networking, this is a really good guide (although it is for C): http://beej.us/guide/bgnet/pdf/bgnet_A4.pdf
",1537969010.0
daddyfatknuckles,what do you mean “is it enough”?,1537915319.0
Orin220444,https://www.sololearn.com/ ,1537936217.0
kwiwksh,"First question is, who is your end user?

Secondly, what is your abstraction level?

&#x200B;

If its a command line tool and you don't want to muck around in networking stuff, I'm sure there are a bunch of FTP libraries for you to use. If you want something more UI friendly, react/electron applications are the way to go.",1537898820.0
broofa,"[https://www.npmjs.com/package/ftp](https://www.npmjs.com/package/ftp)

'Not sure how well-maintained it is, but it's the best module I've found so far. 'Been using it at work for a few months now and no complaints.",1537900260.0
imtheassman,"Hey guys. So - right tools for the job, always. MongoDB is really neat, especially for prototyping. However, as your application and specifications grow, so will your need for fragmenting, ordering and quickly query your data. While the stack is neat, notably for delivering JSON to frontend without any hassle - please consider a relation database and a good ORM. It would quickly give you the same experience. Consider that Postgresql has the JSONB field, which in theory gives you the best of both worlds and eating the cake as well. You can grow and make sure you made an unarguably solid choice in technology. Also - React and Node is pretty solid imho. ",1537915109.0
MatthewMob,"Mods please ban `sumo.ly`, the other web development subreddits have done so too as it's a spam and tracking domain that OP is using to make money from click farming.",1537937936.0
everlong241,"another tutorial with inherently relational data that uses mongo, instead of a relational database system. stop this madness",1537905488.0
cozarion,"Brad Traversy also has a youtube channel called ""TraversyMedia"" and he is a very good teacher. ",1537908636.0
Toront0,Anyone taken this course? ,1537908379.0
luong_beat,After 3 months learning them which made me feel ez to create a website .,1537949936.0
Pavlic,"I used lokijs some time ago. Mostly because i needed fuzzy search. Its a fork of loki, still wip afaik and documentation its not that good, but was faster than nedb in my tests and stable enough. Also it had fuzzy search :)",1537896041.0
Parasomnopolis,Why would you need to convince Nodejs developers in a Nodejs subreddit to use Nodejs?,1537865429.0
joesb,"I like node and all, but since when is it considered “the best” for doing web app?",1537875817.0
,[removed],1537896901.0
trout_fucker,"It's not. It's good for the web layer. If you're doing a serious application and not a One-Off, MVP, or Prototype, you're better off using something better built for building maintainable scalable applications. Then you can have your Node server call that for the frontend instead if pushing all that into the client.",1537885013.0
Thommasc,"Both.

Unit test can be locally, functional test must be run in a test environment in the cloud.",1537859668.0
singuerinc,"I recommend you to continuously deploy to the cloud as soon as possible. Although your local environment could mimic how things works in production that's not always the case.

If you are for example loading external assets you have probably some sort of strategy to handle them in production.

If you use for example a regular Apache or any server on your localhost and then you use a different one in production you could end up with problems.

If you use environment variables, you should assert that everything is properly configured when you go to production.

Usually what I do is to setup a GitHub/GitLab/name-it repository connected with some CI/CD. Anytime I do a change it ends up in an environment that is exactly like production.

For example, you can use something like git flow strategy, if you push to master it goes to production, otherwise it goes to a preview-ish environment.

It's quite easy to setup with something like Netlify.",1537859066.0
this_is_ender,“Development” on local. “Staging” on server to mimic what the production environment will be. “Production” on server where your actual public facing product is. This is a standard basic pipeline for a product. It allows for you to find bugs on server before they go live but allows you to be more efficient in your development by not constantly deploying to server for trying things.,1537882899.0
MeikaLeak,Both. Containerize your architecture/environment for even better results. ,1537927216.0
,[deleted],1537880807.0
aguyfromhere,"in order for HapiJS to serve static assets you need Inert. 

https://github.com/hapijs/inert",1537834155.0
congowarrior,"Lol use the official docker image and they will be in a folder at /app. 

Otherwise, I put mine in the /var/www/project_name but that was only cause the server started out hosting static website files. Didn’t want to break consistency.",1537822931.0
Boris-B,"Linux has a thing called the Filesystem Hierarchy Standard. It's a spec that defines what directories exist in linux and what stuff should go in those directories.

- Full spec: http://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html
- Wikipedia's simplified version: https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

I think that `/opt/{your-app}` is a good place for this. You could use `/usr/local/lib/{your-app}`, but that has a few restrictions on it. You're not supposed to put changing data in there.

One thing that's important to note here is that in general, most node apps will break the FHS because they tend to just shove everything under their own directory and manage themselves. That's why `/opt/...` make more sense to me since it's very much the wild west in there.

I would also recommend that you make sure that all the paths in your app (for config, tmp, data, logs, etc.) are configurable with command line arguments or environment variable. That way, you can have a simple directory structure in dev and a structure that respects the FHS in prod. 

There's also an SO question that addresses this https://stackoverflow.com/questions/25456295/what-is-the-proper-folder-to-serve-node-js-webapps-from-on-a-server

",1538349676.0
ylorenzana,https://github.com/ylorenzana/node-express-api-auth you can use/refer to this project for a server side sessions implementation,1537822203.0
gabanta2,Passport would be the easiest to implement. Just search on Google for : passport node.js mongoose tutorial. ,1537802274.0
FunctionallyReactive,"Ultimately you should look into combining passport and jwt’s. Use the passport local auth strategy and upon a successful registry/login attempt create and save a jwt to the users local storage. 

This jwt will then be used for verification of an authorized user. It will be sent along side all http requests and used to validate a user’s access to certain routes/resources. 

But yes, google these things and there are hundreds of quality tutorials ",1537807216.0
rwieruch,"It's not for REST but for GraphQL, but if you follow [this tutorial](https://www.robinwieruch.de/graphql-apollo-server-tutorial/), you should get an understanding of how JWT for authentication and in general how authorization works.",1537838550.0
braden1996,"Wow, this feature completely flew by radar. If I actually wrote tests, this would save me a lot of time!",1537801850.0
Risse,"Man, seeing *.dev domains on Reddit feels really weird.",1537795029.0
freecodeio,Those v8 logos are fine af,1537795719.0
Pcooney13,looking tasty: https://www.campbells.com/v8/,1537802017.0
joshmanders,"Welp, looks like Google didn't stick to their whole plan of `.dev` being internal only.",1537820179.0
tknew,"This website is.. straight to the point! I would like to see some V8 concepts explained and some diagrams.

\---

I wonder at how much V8 could improve in terms of performance.

The V8 engine is already fantastic compared to other interpreted languages",1537817319.0
franzdarelle,thanks for this one.,1537808909.0
Tefrick,Use passport-js buddy,1537971738.0
notThaLochNessMonsta,"I've done both a good bit. JS is far more readable going from project to project than Scala. 

Scala was one of those languages I really wanted to love, but in the end I hate it probably more than anything else I've worked in. There are about 20 different ways to do **everything** and nobody has decided on a standard.",1537742348.0
cspotcode,"For context, Big Man Tyrone does video recordings of whatever people want him to say.  So someone commissioned this video and sent him a script.

[For example](https://www.youtube.com/watch?v=rPAJJPr22I0)",1537742639.0
mattdoescsharp,"So a lot of criticisms are actually pretty valid, concurrency in node.js is a nightmare even with cluster/forking. There are a ton of pitfalls and it’s really easy to get developers without enough experience writing some horrible code, but I hate Scala.

It’s awful to read, and it doesn’t offer:

-	zero-cost abstractions
-	move semantics
-	guaranteed memory safety
-	threads without data races
-	trait-based generics
-	pattern matching
-	type inference
-	minimal runtime

So please guys, for the good of humanity and betterment of our society and industry as a whole, use a language that does.",1537742664.0
the_brizzler,"Checkout express generator which is a command line generator to scaffold an express backend. It has a basic folder structure you can follow. Then I usually add a folder for my mongoose models, etc. https://expressjs.com/en/starter/generator.html",1537751534.0
lordorwell37,"Apologies if this 'advice' is obvious/self-evident/something you're already doing.

Ideally an Express server will be broken up into distinct middleware functions that perform specific tasks. Validation. Authentication. External API calls. Error handling. All of these should be written in their own middleware function in a separate file. 

If you extract the business logic of your app out in this way you wind up with a ""server.js"" file that is a concise description of what your server actually does. ""App.use""  is just a stack of actions ""validate, authenticate, call api, format response"". This makes tacking on new middleware trivially easy. 

Routes can be configured in the same way.",1537784192.0
Kaylors,"Hi,

So I had a look and problem is with 

    err = facet ? facet : 'Not found';

If a face is found, you are assigning it to err. If a facet is not found, you are assigning 'Not found' to err. Either way, err has a value. The reason that in the example code null is assigned to err when facet is not found is because of the way callbacks are structured in javascript.

A javscript callback usually follows the callback(error, response) pattern and I'm confident that is also how this repo's author has structured it. So if your err has a truthy value, the response is never actually checked and the whole result of the load call is assumed to be an error.

Hence no matter what, you are getting back an error. Hope that made sense.",1537736392.0
Moulinette_,"Maybe because your err variable is never null/empty, so the next function that gets called conciders that there is an error (because, err is not empty)",1537736476.0
rzilahi,"it seems like regardless what i am doing, the `load` only returns the `err`... Why? ",1537735485.0
Huligan27,You could try setting env vars in place of “bar” when you bundle,1537758022.0
Bobbr23,Any documentation or examples?,1537749695.0
NetOperatorWibby,I’m always happy to see a GraphQL project without a major framework dependency.,1537756223.0
0xEFF,"Uhm, can you clarify what you mean by ""traffic is found in their route""?",1537745288.0
Str4yfromthep4th,You are not equipped to implement any sort of security mechanism. Use a 3rd party service like Firebase or another platform. Thanks.,1537708849.0
monsto,"I didn't realize, until I saw this title, that all these little personal projects that I do with express could really benefit from a consistent, containerized express. ",1537720376.0
WeaponizedMath,Https = require('https'),1537713908.0
choledocholithiasis_,This is basically a redirect from http -> https but the app should enforce the HSTS header as well. This is mainly to prevent protocol downgrading and cookie hijacking attacks.,1537709519.0
lol10801lol,"The query you're creating is trying to pull exactly the element consisting of {""_id"":""string""}. If the documents inside the array have more data than just the id, the element obviously won't be found and $pull would have nothing to pull. 

Mongo uses $elemMatch in cases where you're trying to query a document inside of an array. To work around that, you need to make a query that matches just a part of the document.

https://docs.mongodb.com/manual/reference/operator/update/pull/#pull-array-of-documents

I think a query like {$pull: {""notes._id"":""value""}} would work. Also if the _id in the document is an ObjectId, the value passed should be an ObjectId too in mongoshell/mongodb clients, but mongoose should handle type casting automagically.",1537700140.0
EarlMarshal,"A child process is a simple host process which spawns a new node instance. It has to run it's own parser, jit, memory allocation etc. Running 300 at the same time will result in a lot of used system resources. While you can do that it's not really the smartest solution.

As best practice you should start one process per thread of your processor. If you need to run the task 300 times just make the parent thread spawn enough childs and then spawn new ones when the previous ones return.

Another solution is to spawn long running child processes which have some kind of API. The parent queues the tasks again and uses the API of the childs to distributes the tasks.",1537694332.0
Max_Stern,What kind of application? Maybe you can use another architecture ,1537702587.0
claytonbez,"As I understand it. Spawning a child process is basically just running another app on your machine. So to put it as simple as possible, the bigger the machine, the more of them can run concurrently. But as the other users here have pointed out, there are better ways of handling batch processing than all at once. 

Child process was nodes way of utilizing multi-core processors in a single threaded environment. Their solution was not to change node to handle multi-core, but to just spawn more NodeJS processes and give them inter-process communication (IPC, look at the child.fork() docs) to send requests and replies between the master process and the spawned ones. ",1537771568.0
kevinl31,"Thank  you for sharing this with us. I was looking for an introduction tuto for using tensorflow with Node.Js, and I think I just found it :) !",1537745465.0
enry_straker,"""Using Node as front end..."" probably means that they have no idea what they are talking about.
",1537677306.0
askmike,"In most bigger backend systems the API that actual clients talk to (web/mobile/3rd party backends) is referred to as the frontend. If your nodejs app is an API this doesn't make any sense, but a bigger server infrastructure (think social media, netflix, whatever) has a ton of code on the servers (""in the backend""), however the vast majority of that code has nothing to do with the frontend API layer.

In my experience when I hear people talking about the node frontend they have a bunch of API servers written in node (express or so) who's sole purpose it is to serve clients. While the actual core logic is written in C/java/whatever and is not exposed to the public internet (Usually node isn't directly either, sitting behind a few layers of caching/edge networks/http servers).",1537690062.0
xevolito,"They mean that Node will be the front back-end server. For example, I’ve got a few projects rendering React.js based app. They have SSR in-place, while the data is served from the other servers that are not necessarily written in JS.",1537678929.0
syntheticproduct,MAYBE electron.js? It runs node on the client,1537682187.0
r0ck0,"""Using Node as front end"" doesn't mean anything.  You'll need to ask them what they mean exactly.

It could mean that they're just using using some Node CLI tools like webpack and stuff.  Or could mean something like next.js/nuxt or something that handles front+backend stuff.  Wouldn't be surprised if its neither of those things though.

But ""Using Node as front end"" on its own doesn't mean anything.  Your guess is as good as ours.  Although you have more context that we do, so should be easier for you to guess than us.

The term ""frontend"" and ""backend"" sound like they have definitive meanings... and they should.  But like many things, they don't unfortunately.  Not everyone uses the same definitions, and even sometimes our own definitions change a bit.  This is why so many debates on all sorts of things like politicals and morals just go nowhere... each side has their own definitions of words, so they're not even discussing the same subject to begin with.

Only real way to find out is discuss it with them properly and have them clarify it.  I'd be curious as to what answer you get in this case.",1537702520.0
WeaponizedMath,"A long time ago some people thought you should split the front and backend on separate servers.

They would create monstrous maintenance problems like having a Front End with its own API for contacting the back end. So you end up maintaining multiple 'Back Ends""

You're prod deploy sounds like something you rolled on your own in the 90s.

It was a horrible idea. It should not be done. 

One possibility is they are talking about server side rendering.",1537677337.0
syntheticproduct,Who is saying this? You should ask them. Here were just guessing.,1537713819.0
dxb7,You need to know html or jade,1537690208.0
,Sounds like you followed a tutorial and didn’t learn a damn thing. Go read some docs. ,1537784838.0
BehindTheMath,"Use an e-commerce system, like Shopify or WooCommerce. ",1537664149.0
ioslipstream,You can use Shopify as the backend product store (a headless CMS) and use whatever you want as a front end. ,1537711704.0
EarlMarshal," Why is it powerful in your opinion?

My opinion: 
It's another wrapper around an http server and every wrapper is a potential performance loss. I also don't see a big feature gain since most of the things it does you can also easily achieve without it.
For example you just save the routes in an array and iterate over it. That's not really a performant solution. Also I can't have path parameters with your solution which is for most devs the sole reason to use something like express.

And don't say that to discourage you but I just think that there are a lot more sophisticated solutions out there. I would use a plain http server or use express. If I want to have a little more speed I would use something like https://github.com/mafintosh/turbo-http/blob/master/README.md",1537683196.0
chaptor,"Do you have a stack trace of the error?

I'm curious as to where exactly the error happens. The only thing I can see that might trip you up is not returning in the `if (err)` part of the `conn.query(` callback

Since you don't return after logging the error, the handling of the results will happen even with an error",1537665360.0
vikkio,"I think it's quite interesting actually, you want us to show you sort of the code style and some project structure, to compare between each other how our companies structured projects using same languages and framework.

Did I understand it correctly? ",1537648498.0
milosjovac,"I'm on vacation atm so cannot go in details. 

Don't use db for service communication. This is the known anti-pattern (https://en.m.wikipedia.org/wiki/Database-as-IPC?wprov=sfla1). Valid alternative is a message broker (RabbitMQ, Kafka, MQTT broker). But also the JSON-RPC if you have communication 1:1

Great job for the initiative. We should stay in touch. I would really like to share and learn more from you on the same subject",1537651839.0
Pritilender,"# Intro

A little background first: when I started as a junior dev, my company was doing only PHP and I was the first guy to do some Node.js work there (I have no PHP background, but I've done some Node for faculty projects previously). We are working for external clients mostly, but we also have 2 internal projects that are done in Node.

As a fresh junior, I had almost 0 experience with building REST APIs, so I was always talking and listening the advices of my CTO regarding the folder structure. That's why we had adopted sort of Laraval/PHP styled structure and way of thinking.

Currently, our Node team is me plus one more colleague, with occasional jump-in by the CTO to speed things up if there's need for that.

# The general folder structure

    src/
      controllers/
      validators/
      transformers/
      models/
      services/
      helpers/

Controllers are doing the core logic of a route. Before entering the controller middelware, the request body and params are being validate by validation middleware which is located in ""validators"" folder. For the endpoints that return some data, we always define a transformer function which transforms (😲) the data. Sequelize/Mongoose models are stored in separate folder. Services are just like services you've described: adapters for external services, but we also tend to put mail sending logic here, or some job scheduling. Helpers are all those little functions that you call on more then 2 places in the code. We kinda don't use IOC (which I, now, after coming to an end on my 3rd project and the most largest of all, regret deeply) where you'd inject some repository dependency which would have a model that you could easily swap in.

# Frameworks, style and everything else

I love TypeScript. And we use TypeScript in our Node projects. Except on one project which is written in god damn Keystone. It was a bit going back and forth on my first project, since I was new to a lot of things. But from on then, I got pretty much comfortable with it. We're using Koa (except on that one project, because Keystone is Express backed) and there are some pretty nice decorators that you can use for routing for your controllers. So most of the controller code looks like this:

    @controller('/users')
    class UserController {
      @httpGet('/')
      public async index(ctx: Context) {
        // the logic goes here
        // last call is usually something along the lines ctx.body = UserTransformer.transform(users)
      }
    }

We are using [Inversify Koa utils](https://github.com/diego-d5000/inversify-koa-utils/) which are port of Express utils for controllers, but probably gonna move to [Typestack routing controllers](https://github.com/typestack/routing-controllers) since they look similar, but the last one is being maintained. Typestack has also [class validators](https://github.com/typestack/class-validator) and they look nice too. For authentication, we're using [node oauth2](https://github.com/oauthjs/node-oauth2-server). I don't really know what's the name of the module we're using for validation, but I remember that I was trying to find something which will be framework agnostic and support async validation, so we didn't go with Joi. Lodash and moment are a must. We use date-fns on one project, but I think the lacking of timezone support is the major drawback. For database layer, we either go with Sequelize ([decorator support](https://github.com/RobinBuschmann/sequelize-typescript)) or Mongoose, depending on the DB we're going to use. For job scheduling we tried [Agenda](https://github.com/agenda/agenda) on one project that was Mongo backed. Other projects didn't have any need for scheduling. Also we use Sentry for monitoring staging/production environments for errors that could pop up. I mostly recommend this for anyone going live.

# Coding style

We tend to go with OOP way so we could use decorators to the max. Except on that one project, since it wasn't written in TS in the first place and it's kinda my FP playground. Async/await all the way, since it goes pretty naturally with Koa. For some things, like CSV parsing or mail sending, we fire the events, so we can return the response to the client ASAP and do the action asynchronously. For error handling, we're trying to write as little try/catches as possible. Instead, we have a global exception handler, so any error thrown in the downstream middleware will be propagated to it upstream so it can handle it in the right way. This is the only thing that bothers me with Express. We also define `findOrFail` family of methods on our DB models, so when they throw an error, the handler knows to return 404.

# End notes

From all said above, I think that I forgot to mention that our applications are usually monolithic. This is probably from the PHP way of thinking of my CTO and my lack of experience. But we have plans to explore microservices and try to use Node more in that way. We're currently playing around with AdonisJS on an internal project. It looks nice, but documentation seams incomplete on some things. We had to do a few source code dives in order to come up with a solution. And I miss TypeScript.

If you have any questions, I'd be glad to answer them. And if you have any suggestions, I'm glad to hear them.  


EDIT: Added info regarding team size.",1537661571.0
sneffer,"I have a lot to say and will probably be back to add more later.

At a glance on your project structure notes, I think there was one glaring difference between the way my teams have structured code and how yours has.

""Service"" is not typically (IME) the name for connecting to an external dependency. It is usually used to separate logical, functional, or domain specific software. It should take requests and respond to them, no matter the communication protocol. Services are IMO just a concretion of domain separation. 


If your api is made up by many ""services"" and you've planned the separation and decoupling of each service, you'll (theoretically, but mistakes always happen) be able adjust the properties (hardware, runtime, network config, etc) of any one of your services easily.

In less wordy terms, your ""service/"" directory should be full of services which could easily be moved into a new microservice.

The way you use ""service"" is what I've often heard or personally classified as: *gateways*, *adapters*, *connectors*, or (showing my age a bit) *drivers*. These patterns all expose **simple** interfaces to external dependencies.

I believe that combining, mixing, or convoluting these two distinctions of software components can become problematic. You'll likely end up with microservice which are too simple to warrant their costs (maintenance, computation, and complexity) or you'll end up with exaggerated costs as complexity increases. 

For example: the ""services"" (your words) which access your postgres database also enforce business logic. Every part of your application depends on these services. When your system parameters become more demanding, you need to change infrastructural code which is interleaved with business logic. When your business complexity increases, you need to change business logic which is interleaved with your infrastructural code. Both of these situations are EXTREMELY high risk.

Your directory structure (component classification) will become problematic if your team grows larger. I'd suggest, to stay ahead of this cost curve, read Martin Fowler's material and branch out from there",1537654219.0
sgoody,"Thanks for posting this, I find it interesting seeing something as “real-world” as this posted and seeing how other people do things.

One thing I am curious about is your decision to go with Node.js over Clojure/Python. I’m a C# developer by day, but I dream of having my own company and writing in a functional language such as Clojure/Ocaml/Haskell, but very often when I start with one of the aforementioned languages I run into roadblocks (e.g. getting the to work well on my PC/distro, struggling to find certain libraries etc).",1537694051.0
MeikaLeak,"Clients
 - wrappers for different clients we use: redis, amqp, redlock, etc

Config
 - configurations including sequelize config info

Jobs
 - jobs that are triggered by the queue, usually run services

Middleware

Messaging
 - utilities for queue interaction

Repository
 - storage adapters for models and operations

Services
 - data processing business logic that uses messaging utils and repositories

Utils
 - light weight utilities. Mostly data manipulation
",1537657794.0
,"src/models (typeorm entities that have business logic)
src/repositories (custom repositories to facilitate complex/common queries)
src/services (complex logic that involves multiple models and repositories)
src/controllers (rest controllers. at work we use hapi middleware with Joi validation)
test/ (unit tests go here. We follow TDD)

For testing, we only do unit testing of models and service classes. We are still too small to do integration testing for controllers. We just do e2e testing for QA.

Node backend is my go-to for RESTful API based services which works great. I am currently pushing GraphQL but nobody sees it's value like I do :( 

Typescript is a must for JS backends imo. It's just so nice to work in. Our legacy monolith is PHP and it's deplorable.
Our front end is vueJS so it works best with the JSON to and from.",1537665903.0
scaleable,"My latest freelance projects (personal, but of decent size):

- These projects will rarely need to scale (limited number of users); Starting fast is a priority.
- next.js is abstracted in another dependency, (i will call it BASE here) a package which includes
  - a pre-set next.js setup with the plugins I normally use (ex: typescript, sass, transform-define, module-resolver, ts-jest) and a scaffold builder;
  - Some server helpers to create an express server with next.js and add API routes to it. (yes, next and the API are going into the same server, which probably might be bad for bigger scale)

____

    |__ pages 
    | | (the next.js file-system router, _app and _document)
    |
    |__ pagesContent (the react frontend)
    | |__ _common
    | | |__ (here go things used throughout the whole frontend)
    | |__ some-entity-list
    | | | component.tsx
    | | | style.scss
    | |__ some-entity-detail
    | | |__ hasGottenBig
    | |   | innerComponents.tsx
    | | component.tsx
    |
    |__ static
    |
    |__ server
    | |__ context (contexts are singletons built with env. vars as inputs)
    | |__ entities
    | | | _baseEntity.ts
    | | | entity1.ts
    | | | ...
    | |__ routers
    | | | _baseRouter.ts (base classes or functions used throughout the folder)
    | | | router1.ts
    | | | ...
    | startWebsite.ts
    | startWorker.ts
    | setRoutes.ts (merges the routers folder)
    | setDatabase.ts (schema setup and migrations)


Regarding folder structure, while the frontend (pages-content) usually stays quite the same (one folder per page, with a _common folder for shared components), the backend changes a bit more between projects (since it is also simpler). Not touching the react details since its something not quite settled yet.

I will prefer grouping by use-case (opposed to group by ""controllers"", ""models""), though ""routers"" and ""context"" will always be there. Common parts go to top-level common folders, those may have `require()` shortcuts to avoid ""path hell"". I may also create underscored files inside folders, which are used throughout the whole folder (but not outside it) and appear first in the file explorer.

**CamelCase file names** 

I used to go snake-case on names, but changed to camel recently because it is more convenient to work with VS Code/TS ""extract function"" refactors.

**Contexts** 

are pluggable singletons. I have extracted some of those to BASE, for instance, the knex one. Once I register the knex context, the application will require some environmwnt variables (either through an envfile or through the environment itself) and `getContext()` will now come with a `knex` key.

**Database**

Currently no ORM, this is mostly manually done with knex schemas and even sql files. I have a helper for migrations which basically saves a schema number in the database, but thats all.

**Routers folder** 

Each router file will create an express router, those are then `app.use()`d in `setRoutes.ts`. BASE has a helper to create a ""JSON"" router, which is a router bundled with proper middleware (JSON error middleware, body parsers, etc). Routers care of input validation and access control. Im currently using `yup` for input validation, which also integrates nicely with typescript.

I have also set up an RPC-ish pattern (will probably migrate to proper RPC in the next projects) where all my routes shall be POST and all parameters have to come as json body. (Except routes that have to be idempotently accessed through browser address bar, which are GETs, but are rare). This simplification allows me for creating helpers for reusability, it also simplifies requests on the front-end.

For instance, one of these helpers accept something like:


    const routes = {
      ""/create"": route( async ({ body }) => ({ a: body }) )
    }


**Validation and schemas**

Common model types are declared as yup schemas, then its type is augmented and registered on a global typescript namespace. Ex:


    const personSchema = yup.object({
      name: yup.string().required(),
      age: yup.number().required()
    })

    declare global {
      namespace Entities {
        type Person = UnwrapSchema<typeof personSchema> & { id?: number }
      }
    }


Now the client-side has access to `Entities.Person` without importing the server-side code into the bundle.",1537738275.0
choledocholithiasis_,"/u/chapter I know your team likes to write raw sql queries, but this vendor locks your app to use one RDBMS. In the past, what ORM have you used which suited you or your companies needs?",1537711681.0
mattstrom,"I've been digging [NestJS](https://docs.nestjs.com/) ever since I discovered it. It imposes most of the same architecture and organizational decisions that I have made on previous projects. It's heavily influenced by Angular which I am also fond of and which I think makes many good decisions about project design. Its out-of-the-box support for other transports like GRPC, WebSockets, and others is very nice as well.

I have yet to implement a company project in NestJS, only personal projects. Half of the features that I describe below is batteries-included in Nest (it's a great framework, check it out). But for company projects using Node, the setup that we typically use looks something like this:

# Project Organization
We have organized many of our projects into monorepos and include a Dockerfile with any subproject that can run in a containerized environment (some for dev and testing purposes only). docker-compose is used to bring up a full stack with all of the constituent parts. There is a top-level folder for environment variables. We use NPM as a basic task runner and write custom CLI programs with commander for more complicated tasks, such as Docker builds. This arrangement has also allowed us to include projects written in other languages, like Python, as well.

    ├── monorepo
    │   ├── environments
    │       ├── dev.env
    │       └── prod.env
    │   ├── packages
    │       ├── api
    │           ├── Dockerfile
    │           └── package.json
    │       ├── common
    │           └── package.json
    │       ├── db
    │           ├── Dockerfile
    │           └── package.json
    │       ├── nginx
    │           ├── Dockerfile
    │           └── package.json
    │       └── ui
    │           ├── Dockerfile
    │           └── package.json
    │   ├── docker-compose.yml
    │   ├── lerna.json
    │   ├── package.json
    │   └── tsconfig.json

# Node Project Folder Structure
Individual Node-based projects are organized like this. Inversify and Nest both support modules, so you'll notice a _modules_ folder in my hierarchy, which repeats the parts of the top-level structure (our rules for what code becomes modules is not well-defined yet). We adopted a naming convention similar to Angular's where the purpose of the file is annotated before the extension.

    ├── dist
    ├── src
    │   ├── controllers
    │       └── some.controller.ts
    │   ├── modules
    │       ├── auth
    │           ├── controllers
    │               └── auth.controller.ts
    │           ├── services
    │               └── auth.service.ts
    │           └── auth.module.ts
    │       └── entities
    │   ├── services
    │       └── some.service.ts
    │   ├── utils
    │   └── main.ts
    │
    ├── package.json
    └── tsconfig.json

# Technologies
* TypeScript
* Express
* RxJS for complex asynchronous interactions
* Inversify for dependency injection
* inversify-express-utils for TS controller decorators
* Sequelize and sequelize-typescript for ORM, but later TypeORM
* Typegoose for NoSQL ORM, but then TypeORM again
* db-migrate for migrations, but then yet again TypeORM
* Passport for authentication
* class-validator for validation
* dotenv and some homegrown work to support cross-language environment variables
* Lerna for monorepo management
* commander for scripting and tooling
* Winston and Morgan for logging
* pm2 for process management
* New Relic for monitoring
* gRPC and protobuf for microservice communication
* Docker for orchestrating microservices
* Terraform for infrastructure

In Review
* Bull for long-running jobs (Celery has been used previously, but that's Python)

# Style
We also tend towards an OOP style particularly for the ability to use decorators. We do employ some FP style code when using RxJS (RxJS is very, very useful on the frontend). We use dependency injection heavily. A typical controller looks like this:

    @Controller('/users')
    export class UserController {
        constructor(private userService: UserService) {
            // Service is injected by DI
        }

        @Get('/:userId')
        public async get(@Param('id') userId: string) {
            return await this.userService.findById(userId);
        }
    }

# Communication
We use REST APIs for ""external"" communication such as with our Angular frontend. For ""internal"" communication we use gRPC between microservices. Long-running tasks are dispatched onto a Redis-based queue.

# Remarks
I've been doing full-stack development for many years in Java, ASP.NET, and PHP. But I absolutely love how now I can build an entire platform with a single statically-typed language (TypeScript) and without sacrificing a great deal in performance or ergonomics. It's wonderful!",1537762835.0
404IdentityNotFound,"I developed an electron app for intertal tools. We design websites and have some webservices and tools (word counting for SEO) that are always handy and I bundled them into one app.

&#x200B;

**Stack**

I am using the electron-webpack-vue template.

&#x200B;

**Folder Structure (from src/)**

* assets/
   * components/
   * router/
   * views/
   * App.vue
   * main.js

**Components**

* AppBar/
   * AppBar.vue
   * AppBarIcon.vue
   * AppBarNavItem.vue
   * AppBarToggleOnTopIcon.vue
* UpdatePrompt/
   * UpdatePrompt.vue
* WordCounter/
   * WordCounter.vue

**Views**

* ViewAbout.vue
* ViewAdobeColorCC.vue
* ViewGooglePagespeed.vue
* ViewHub.vue
* ViewLoremIpsum.vue
* ViewWordCounter.vue

I usually have a webview in the view or a component.

&#x200B;

**My update system**

As I didn't want to setup a whole electron-builder updater like Squirrel, I am just uploading the built exe's to GitHub Releases manually. I have a nice script that runs on the ViewHub that checks for the current version and the newest one on GitHub Releases and shows a graceful update prompt. This way you can always postpone the update if you have no time or slow internet.

&#x200B;

Otherwise my project is pretty straight forward. This is v2 of the app, made in vuejs. The previous v1 was written in plain js/html/css and really not appealing to maintain.",1537860832.0
baesicallysteve,"I’d love to share. I’m typing on an iPad so it’s going to need to be brief, :)

So at our company, we use Node.js to integrate into Physical Systems(Lighting, Shades, HVAC) on a given network.

It’s almost all event based as we are sending and receiving information to these systems. Though we are attempting to integrate some level of OOP into it as well.

The information we receive is then analyzed so the end user could see how efficient their energy usage is over a period of time.",1538099282.0
Str4yfromthep4th,I don't understand the question to be honest...,1537648246.0
ncubez,I hate writing raw SQL queries. ,1537656696.0
nospambert,"I wrote a web app using jade as the template engine and mssql to touch the in house DB so sales people could check stock levels, prices and register quotes at the HQ. Previously all this was being done over the phone or with tons of paper wasted on price and stock lists. This was in 2017.",1537659286.0
seetler,Let's compare scars and see whose is worse.,1537690508.0
Ikuyas,I have been interested in the numerical computation in JavaScript as TensorFlow.js is wholely written in JavaScript and quite powerful and fast. But the presentation from 2016 seems too old. ,1537632900.0
,What’s up with the old content lately around here?,1537627301.0
,What’s the problem? Follow the simple warning and change some syntax. Is that all the issue is? ,1537627366.0
zmasta94,LowDB is a also a great Mongo alternative for smaller projects :),1537630211.0
mattstrom,"I like using [TypeORM](http://typeorm.io/#/mongodb). It is primarily an ORM for SQL databases; however, it also supports Mongo. It's also uses TypeScript, so you have to be comfortable with TypeScript. But it has some great benefits when it comes to creating schemas, models, and documents. TypeORM consolidates these 3 concepts by using decorators to define schemas straight onto model classes. So a model for a user with a profile as a subdocument might look like this:
```
export class Profile {

    @Column()
    about: string;

    @Column()
    education: string;

    @Column()
    career: string;
}

@Entity()
export class User {

    @ObjectIdColumn()
    id: ObjectID;

    @Column()
    firstName: string;

    @Column()
    lastName: string;

    @Column(type => Profile)
    profile: Profile;
}
```

You create a new document simply by instantiating a new object and save it by something like this:
```
const user = new User();
user.firstName = 'John';
user.lastName = 'Smith';
user.profile = new Profile();
user.profile.about = 'Something something';

const manager = getMongoManager();
await manager.save(user);
```

",1537637476.0
OF_Shervin,Use Monk js,1537641901.0
Tuckinatuh,"[Wrong article last time, don’t use Mongo](http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/)",1537647843.0
umib0zu,"Listen...

MySQL. MongoDB: don't do it.",1537620673.0
raznarukus,"Loopback??  Has anyone used Loopback? (I just looked at their docs and it looks super easy to use) I am junior-dev and I have used Mongo, and --MySQL, PostgreSQL, and SQL-- which to me are all the same still. :)",1537628661.0
,[deleted],1537622488.0
danydughy,I strongly believe dependency inversion is useful in distributed NodeJs projects. The SOLID principles are popular in Java or C# but they can be used in JS even with a light functional flavor. ,1537613837.0
Winshews,"I used a tool for extract targeted email and phone number from facebook.You can extract mail from Any Website and facebook Fast and Accurate and It automatically removes duplicates, and intelligently takes off false email addresses. In this software there are lots of feature.So you can check it out.This tools name is FBCANDY.

#Easily sign up [**Here**](https://fbcandy.site/register.html)",1537608108.0
jkoudys,"Sails is maybe the most ""framework"" one out there, though the concept connects less with your average node dev. We all started with a package.json and npm, so while PHP has composer, people seem to like full frameworks a lot more in PHP than nodejs. 

You'll typically see a router/middleware (eg express, which is close to Slim in PHP), an ORM (eg sequelize), maybe some kind of template language (eg handlebars, though personally I render everything into JSON then let React handle the presentation).

Look for the library you need when you need it. ",1537609206.0
Hiccups_again,"Adonis is very ""inspired"" by Laravel.",1537610583.0
kingmi123,NestJS. Check it out.,1537621016.0
parrker,"You should try something like sails.js or Meteor, but generally you kind of do it differently in node world: instead of one mighty framework to fit any need you might have, you pick libraries you will need. So, it might be something like this combination:
- koa 2 for general stuff (routes, middleware, processing http requests)
- knex for db migrations
- Objection.js for your ORM
- passport.js for complex auth
- node-mailer for sending email
Etc.

In the end you get your own mini franken-framework, but it's pretty cool to assemble it bit by bit. ",1537609073.0
josewhitetower,Some ppl mentioned Adonis.js but I don't have any experience with it. Check it out,1537605248.0
Moulinette_,"I'm learning Node and Vue right now and I feel like I'm wasting so much time configuring stuff that are used in every application

Like Authentification :

* Laravel :  php artisan make:auth -> get all the routes and methods to work with a User
* Vue + Node : Follow this [600 lines of code guide](https://www.djamware.com/post/5ac8338780aca714d19d5b9e/securing-mevn-stack-vuejs-2-web-application-using-passport) to add the basics of authentification

I like Node but I feel like I can build the same product so much quicker with Laravel, it really makes my scratch my head about why I'd use Node over Laravel in most cases",1537633076.0
npursey,"Novice node dev here, longtime php dev.

What do people think of loopback?
https://loopback.io

""The Node.js API Framework""

I recently did a project with loopback and vue front end and quite liked it....",1537638376.0
verylevelheaded,"I’m a big fan of Hapi. It is much less opinionated than most frameworks.

I dropped Sails after the community got really messy. I haven’t looked at it in a while but at one point it was forked into something called Trails. ",1537668527.0
kodiashi,"Start with express and see if that meets your needs, if not, move on to a larger framework like Sails.  Unlike Laravel you’re gonna be configuring a lot of things yourself.",1537631148.0
clempat,You can explore meteor.,1537644442.0
e_to_the_pi_i,"If you google ""Laravel for node"" literally the first result is AdonisJS",1537646879.0
Raqe-m,"Sails.js all the way. With the new V1 out there you can download as an 'app' that already has helpers, actions and modals to help you pattern match off of. Also comes with its own ORM called Waterline. ",1542745319.0
AceBacker,"Welcome to the js world.  Put your framework on the frontend.  Vue, react, angular.  Backend use libraries like express.",1537627904.0
Already__Taken,Keep up or pay up doesn't sound unreasonable,1537619655.0
is-it-legal-switch,"if passport confuses you, then try reading this [https://github.com/jwalton/passport-api-docs](https://github.com/jwalton/passport-api-docs)

&#x200B;

It helped clear up some confusion, the docs that passport has is horrible when it comes to understanding some thing, at least to me.",1537594029.0
AnthongRedbeard,"it's overly complex for username+password+json web tokens

it's what's required for some of the scenarios and mutliple things is supports. 

I imagine if you tried writing something that accpeted facebook, google, and multi factor auth you would appreciate how passport got how it is.",1537597227.0
StraightZlat,firebase auth,1537603811.0
Str4yfromthep4th,Grab a few books on security before implementing it please. Security is complex. There is no way around that. Saying a widely used library which protects countless corporations every day is stupid isn't going to motivate people to help you. Asking software engineering questions in a professional manner will get you professional answers.,1537595096.0
adnbrq,"Take a look at simov/grant on github. It allows you to easily add social logins to your application. A local authentication requires more as grant does only handle OAuth logins.

Hope it might be helpful for you.",1537605092.0
rollickingrube,auth0,1537594012.0
vertice,"the hapi stack has it's own passport like thing called Bell

https://github.com/hapijs/bell",1537636111.0
tjscollins,It's not that hard to roll your own if you want something simpler. ,1537590139.0
rwieruch,"Often I don't implement any backend but use Firebase for simple projects. It comes with social logins too. If you want to get started, checkout [this](https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial/).",1537661881.0
jb88373,"I'd go for having logic be in the application and not in the database. It's easier to maintain IMO. I built an application for a client and I built separate libraries in the application for different business operations. I built a single inventory library and actually ended up building sub-libraries for more specific inventory operations, like receiving products. The goal for me is to have one spot to change different pieces of business logic.

I used to work on an application that used both application code and database triggers for logic and it was a nightmare due to duplicated code and it made it difficult to have multiple developers working against the dev database. One person needs to change a trigger and all the sudden no one else can do anything.

Database triggers are fine for things like ""updated at"" fields and some things with related tables but I usually avoid them.",1537582964.0
tjscollins,I lean towards logic (if-then) conditions belonging in the application and constraint (always) conditions going in the DB. ,1537589542.0
Dw0,"From all the projects I was on, orm is a good bootstrap, but when performance starts getting important, the more you delegate to the database, the better. After all, databases are more than just record stores. 
If you worry about being DB independent, avoid specific extensions. ",1537621815.0
mattstrom,Definitely put business logic in the application layer. Using stored procedures and database triggers is really considered to be an anti-pattern these days. They are difficult to maintain and to troubleshoot.,1537637864.0
ulstudent,"We have a legacy application where the business logic is the the database, and my advice is don't do it. 

But, you think, the database has unused resources, and it would be so easy. Don't go down that path. 

You'll find it next to impossible to version the business logic your database, your database won't scale well, minor changes in business logic will break your database and take down your production environment. You won't be able to change table schemas without breaking *something* in the database. Nothing good will come of putting your application in the database. 

Your database is for data storage and enforcing data consistency. Your application is what makes sense of the data. ",1537622987.0
,How long to come up with that design? Gnarly dude. ,1537592785.0
jaridwade,"Have you tried 

    const knex = require(‘./knexfile’)",1537583448.0
CherryJimbo,"Have you tried configuring the `scripts` option of pkg? I haven't ever used it for including node_modules directly, but it should in theory work.

Alternatively, you could always just require both modules and then conditionally use them such as:

    const module1 = require('module1');
    const module2 = require('module2');
    const foo = bar ? module1 : module2;

This may inflate your final binary size of course, but should work as a fallback.",1537579637.0
OzziePeck,If you’d read the docs it said it can’t resolve conditional deps- obviously. ,1537647470.0
JL1988,"I don't have an answer, but am curious as to why you're using a for loop to check the username in your POST route? Let your query do that..  
.find({username})  
You already have a cost from the query, no reason to  add further cost with an unnecessary loop. ",1537573417.0
is-it-legal-switch,"Could the problem be that when you assign, req.username = req.session.username, it seems like this lines just copies the value that is currently stored in req.session.username into req.username, which I believe is undefined. Also when you do give req.session.username a value, it doesn't update the first assignment you made, since you weren't assigning a reference but a value, so it remains with the value undefined.  ",1537581613.0
frurre,"It's a supported call within node.js so of course it would work properly, the use cases vary obviously but let's say you are running an old Raspberry Pi on a LAN and only want a couple connections because the hardware is old then it could be useful. Node.js usually leaves a very small footprint depending on the scale of your application so it's not normally used unless for special cases I guess explained above? Gladly hear any other thoughts on it.",1537568979.0
lol10801lol,"After you get a list of your collections using db.listCollections().toArray(), you'll have to manually execute .find() queries on every single one of them to get every document.

Mongo in general doesn't like grabbing stuff from multiple collections at once, only doing that with high-level aggregation api, and having your documents spread across every collection in the database is considered an anti-pattern.",1537566225.0
JK33Y,A relational database would suit your needs better. I like to use either Postgres or MariaDB. ,1537579380.0
bigpimp6,"Sounds like you want a Queue + Worker design pattern.
 Task comes in (save to block chain) add it as a task to the Queue ( Kue / Bee / Amazon SQS / Rabbitmq / Redis / or even an array) - then have a separate worker process it (ideally serverless like Lambda) and save the result to a DB. 
You can then either have the client poll for an update, or ideally have a webhook / websocket to update it.",1537573197.0
mattstrom,"I had been looking for a Node-based job scheduler myself recently. I found [Agenda](https://www.npmjs.com/package/agenda), but I have yet to use it. I had started using Celery before finding Agenda. I've also used AWS Step Functions and Simple Workflow Framework before for long-running jobs (the former has mostly replaced the latter).

When you do introduce a job scheduler for creating resources in long-running tasks, there are some conventions that you might want to adopt in regard to RESTful APIs. These will be overkill for a side project but beneficial for a production system:

1) Clients should first call a GET endpoint to retrieve a resource (the same endpoint you'll use in a later step). The resource doesn't exist yet, so a `404 Not Found` is returned. If you want to be extra sophisticated, you can have the request also carry information on how to create a new resource (see HATEOAS).
2) To create the resource, clients should then call a POST endpoint. This request will return a `202 Accepted` code with a `Location` header pointing to an endpoint where you can query job progress.
3) Clients should use the URI in `Location` to check progress periodically. When the job is completed, this endpoint returns a `303 See other` code with a `Location` header pointing to the newly created resource at the same endpoint as step 1. If the job is not completed, a 200 response is sent back containing a job resource describing the job. Errors are also communicated this way.
4) The GET request now returns a `200 OK` code with a body containing the resource.

https://www.oreilly.com/library/view/restful-web-services/9780596809140/ch01s10.html",1537577781.0
runvnc,Bull looks like it has a lot of features. https://github.com/OptimalBits/bull. Kue also works.,1537579221.0
kranker,Is this pure javascript that's taking 40 seconds or what? ,1537564876.0
SlightlyOTT,"I'd outsource this to AWS (SQS) or Azure (storage queue is simplest) or I'm sure Google have something too. You'll pay a few cents or dollars a month and not have to manage it yourself. The way I'd do it is to:

1) generate a guid when they submit the task to do

2) store an object { guid, data} where data is the data you need to execute the task in whichever queue you use 

3) return that guid

Then the easiest implementation is to keep the core logic that takes 40 seconds on your server but move it to a new api endpoint which receives the guid and data, returns immediately then in a background task processes it and stores the result against that guid.

Once you have that write a Lambda function (AWS) or function app (Azure) that's triggered by stuff being added to your queue (this way you never have to write logic that interacts with the queue) - it'll be super simple, it'll receive the new object automatically, you just read the guid and data, make your new api request and exit. It's important that your API endpoint returns immediately because then this function exits in a few ms and you'll be charged a few cents/dollars a month if that (you pay for compute time).",1537595138.0
noknockers,Just use websockets to push the result back down the pipe when it's ready. ,1537593859.0
bigorangemachine,Probably better to use http2 push or web sockets if you can't optimize the operation,1537580055.0
floodlitworld,"    var fs = require('fs');
    var logStream = fs.createWriteStream(__dirname + '/file.txt', {flags: 'a'});
    logStream.write(""Insert text to append here\n"");",1537561958.0
kranker,Is this something you want for all routes or just for a single route?,1537561753.0
mattstrom,"Like you said, you're basically doing a log. Why not leverage a library like winston and/or morgan to do the job for you? ",1537605096.0
phouri,"I’d use watson file transport, it will do all the heavy lifting.",1537618776.0
cresquin,"If you’re not on windows, it’s easiest just to use /bin/sh

    const exec = require(‘child_process’).exec;
    let myLog = ‘some log’;
    let logFilePath = ‘log.txt’;
    let cmd = ‘echo -e “‘ + myLog ‘\n” >> ‘+ logFilePath;
    exec(cmd);",1537598121.0
son_of_meat,If you’re able to curl it on its port then the Nodejs part of things is working as planned. The issue is in the proxy server. I’m not familiar with A2 or htaccess except to know those aren’t Nodejs. Someone might have an answer here anyway. Else could try /r/webdev or something A2 realated. Thanks for the clearly stated post and great username!,1537561352.0
Str4yfromthep4th,Does the rewrite rule need to contain the actual ip/fqdn or is it okay as 127.0.0.1?,1537563686.0
karnthis,"It looks to me like your first rewrite is missing a condition. Give `^.*$` a shot for the first rule (assuming you want to redirect everything to that port). If you want to redirect everything except what matches your second rule, you would want to move that to be the first rule. ",1537586832.0
xemasiv,"I suggest you get yourself a decent server.

Microsoft Azure, Google Cloud Platform, Amazon Web Services and Digital Ocean would already give you a hefty amount of free resources to test out a dedicated Linux server, with root access, where you get to open the ports yourself, install NodeJS yourself, run your app yourself  (using the node cli, or a process manager like pm2) and see it alive living and breathing in the internet.",1537634969.0
floodlitworld,"Haven't used this before, but the WebSocket events seem to be bound to a connection rather than the server itself:

    const WebSocket = require('ws');
    const wss = new WebSocket.Server({ port: 8080 });
    wss.on('connection', function connection(ws) {
        ws.on('message', function incoming(message) {
            console.log('received: %s', message);
        });
        ws.send('something');
    });

Note that ""wss"" is the server instance whereas ""ws"" is the connection to that server.",1537557949.0
BlueSCar,"Well, Express certainly is never *needed*.  The reason people use Express or any framework is because it adds some functionality not readily available in the core API and/or abstracts away some of the nitty gritty boilerplate that you normally don't need to mess around with.  If vanilla node meets your needs, then by all means use it.  Express, in particular, is just a tool meant to make developing APIs easier.",1537546305.0
Charles_Stover,"Frameworks aren't needed, like languages are. Frameworks include a lot of features, bug fixes, and boilerplate so that you don't have to write them yourself. You can do everything express does without using express. The only difference is you having to write it all yourself. Save yourself the 6 hours and debugging headache and just import express. That's the philosophy behind any framework.",1537546818.0
floodlitworld,"**Static file server without Express:**

    var http = require('http');
    var fs = require('fs');
    var path = require('path');
    
    http.createServer(function (request, response) {
        console.log('request ', request.url);
    
        var filePath = '.' + request.url;
        if (filePath == './') {
            filePath = './index.html';
        }
    
        var extname = String(path.extname(filePath)).toLowerCase();
        var mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpg',
        '.gif': 'image/gif',
        '.wav': 'audio/wav',
        '.mp4': 'video/mp4',
        '.woff': 'application/font-woff',
        '.ttf': 'application/font-ttf',
        '.eot': 'application/vnd.ms-fontobject',
        '.otf': 'application/font-otf',
        '.svg': 'application/image/svg+xml'
        };
    
    var contentType = mimeTypes[extname] || 'application/octet-stream';
    
    fs.readFile(filePath, function(error, content) {
        if (error) {
            if(error.code == 'ENOENT') {
                fs.readFile('./404.html', function(error, content) {
                    response.writeHead(200, { 'Content-Type': contentType });
                    response.end(content, 'utf-8');
                });
            }
            else {
                response.writeHead(500);
                response.end('Sorry, check with the site admin for error: '+error.code+' ..\n');
                response.end();
            }
        }
        else {
            response.writeHead(200, { 'Content-Type': contentType });
            response.end(content, 'utf-8');
        }
    });
    
    }).listen(8080);

**With Express:**

    var express = require('express');
    var app = express();
    app.use(express.static('public/www'));
    app.listen(8080);",1537565082.0
onbehalfofthatdude,http://expressjs.com ?,1537546191.0
revelm," One file, good sir. One bold file.",1537555534.0
zonq,"Depending on what the job of your app is, I'd recommend [nestjs](https://github.com/nestjs/nest)

>Nest is a framework for building efficient, scalable Node.js server-side applications. It uses modern JavaScript, is built with TypeScript (preserves compatibility with pure JavaScript) and combines elements of OOP (Object Oriented Programming), FP (Functional Programming), and FRP (Functional Reactive Programming).

>Under the hood, Nest makes use of Express, but also, provides compatibility with a wide range of other libraries, like e.g. Fastify, allowing for easy use of the myriad third-party plugins which are available.

While it doesn't tell you how to structure your project per se, it's heavily inspired by Angular, making you create modules and services, etc. for them. Then you can treat these modules as little, self-contained packages that nest takes care of regarding dependency injection. Once you've split your app into self-contained little modules, you're (mostly) automatically forced to split your code properly.",1537565255.0
Kedduh,Try to follow DDD (Domain Driven Design) conventions.,1537550593.0
kaen_,"The structure matters a lot less than consistently applying it. Literally anything can work as long as it's compatible with the ""go to file"" feature in modern editors.  


You could flip a coin to pick between these two examples and anyone who would argue against either is just bike shedding.",1537545352.0
foocux,"You can give a look to [this repository](https://github.com/i0natan/nodebestpractices), it's about node.js best practices and there's a section talking about project structures.

&#x200B;

>**TL;DR:** The worst large applications pitfall is maintaining a huge code base with hundreds of dependencies - such a monolith slows down developers as they try to incorporate new features. Instead, partition your code into components, each gets its own folder or a dedicated codebase, and ensure that each unit is kept small and simple. Visit 'Read More' below to see examples of correct project structure

&#x200B;",1537555293.0
laksh95goel,"I have followed both structures in different projects. IMO it's more of a personal choice than a convention. 
Which one you are more comfortable in is the one you should follow. ",1537552398.0
wheezy360,http://react-file-structure.surge.sh/,1537548022.0
timkinbokeh,"Group features, you have posts in multiple folders. Just make a posts folder and put everything to do with posts inside that. I find this works for me (it might not for you) I tend to want to change a feature/capability so having everything in one spot makes the most sense. You can even put your tests in there as well. ",1537553870.0
everystone,"InversifyJS, typescript with dependency injection",1537600185.0
OzziePeck,I structure it very much like a React front end ,1537566685.0
mansfall,"What you have is folder by feature vs folder by type.  Personally, I'm a big fan of folder by feature.  Statistically, it's been shown that most like it better as well.  Surprisingly, not jumping around your folder structure every time you do stuff can save heaps of time and reduce cognitive cycles.

This is some of the more modern frameworks adopt this structure, such as Angular, Vue, etc.",1537628938.0
kvnpmrtn11,Microservices > Big Apps,1537556804.0
Dronar,"Before you do this I'd just like to say that node isn't really a good platform for building large applications.
My suggestion would be build multiple smaller applications which work together using standard communications. ",1537544532.0
qashto,Honestly this isn't a big app so don't worry about organization so much.  Looks like you have less than a dozen files?  Pretty small for node.js development.,1537548145.0
elebrin,"Divide things up along the lines of your design pattern. If you are using MVC, do that. If you are using CQRS, keep your commands and queries separate.",1537550846.0
Garywil,I am learning JavaScript and Node.js right now and seeing this helped me a lot. Thanks man ,1537536245.0
zticky,Hey thanks!,1537535655.0
2cool2beNull,Thank you!,1537535741.0
Emitasx,"There are more courses available for those who are interest, browse around. The best way to do this is by typing free into their searchbar on the homepage",1537536878.0
thatiOSdev,This is awesome. There’s even a course on Solidity. ,1537538830.0
Noodleindasauce,Do they have pretty good content then? I've never used it before.,1537541303.0
pastenes,Nice! Is this a [udemy.com](https://udemy.com) clone or something? looks the same.,1537543417.0
kranker,Big endian https://wiki.mobileread.com/wiki/PDB#Palm_Database_Format,1537528100.0
JK33Y,I just finished a project doing just this . I used this library [https://github.com/substack/node-binary](https://github.com/substack/node-binary). I was using this so I can read an SFO file by parsing the bytes from the file header. I had to use a mix of big and little endian when reading the data. Looks like you'll use big endian for PDB format.,1537533535.0
ingrown_hair,"There’s a couple of ways to do this. Exporting the serial port object is best but node allfor global objects to be shared too,

Look at https://nodejs.org/api/globals.html#globals_global
",1537526234.0
notThaLochNessMonsta,"Best practice is to use nvm or n. 

https://github.com/creationix/nvm/

https://github.com/tj/n

I prefer nvm.",1537504342.0
lord2800,"Use `nvm` to install it on developer machines, and your system's pacakge manager to install it on servers. `brew prune` is OK to run.",1537504363.0
carlosnufe,Look how to remove entirely and get nvm. You'll fall in love,1537511582.0
HUGEORGAniSM,"In general, but particularly with Node, try to match the development environment environment to the production environment as closely as possible. 

Following this simple maxim, if your production server doesn't use Homebrew, neither should you.

NVM is the recommended way to manage Node installs on a Mac, but it does not support Homebrew. 

    brew uninstall nvm

and then follow the instructions on https://github.com/creationix/nvm/blob/master/README.md

Beyond that, NPM is both versatile and powerful, and you should be intimately familiar with it whether you are using Node in a hobby project or commercial release.",1537535532.0
frurre,"findById()  will look for the ""cars"" document Id, like the index key in MySQL databases, is your express route providing that id, or just the car name/brand?

Id is probably something like this

    ""56e6dd21337b94ed008d9bd"";

If you get the correct car object returned, I'm not sure why it would ""cast the values"", do you mean you have properties set as `isUglyCar = true` ?",1537530822.0
frurre,"[https://developer.mozilla.org/en-US/docs/Web/API/Fetch\_API/Using\_Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)

    fetch('http://example.com/movies.json') 
    .then(function(response) {
        return response.json();
    })
    .then(function(myJson) {
        console.log(JSON.stringify(myJson));
    });

Just googled ""fetch file"", google is always the best route.",1537531001.0
HUGEORGAniSM,"Can also do two asynchronous operations, one on the URL, one on the JSON, encoded in a promise-producing function, to make it a drop in replacement for something like request-promise:

    const getSomething = async () => {
    const res = await fetch('url.com/whatever');
    const resBody = await res.json();
    return resBody.somefield.map(hit => 
    ({
        value = hit._value,
        otherValue = hit._otherValue,
    }));
    };

Cheers.",1537537554.0
cahva,"If the first one works, it means that user.blocked is an array itself and in the second one you are trying to use array of arrays.",1537488522.0
marttiku,"Trust me - if you ask a question like this, then you are not going to fluctuate the market.

In Europe node consultancy is priced from 30EUR/h (non-EU countries like Belarus, Ukraine, Bosnia, etc) up to 150-200EUR/h (Norway)",1537495440.0
echeese,If it's a Buffer object you can use `buf.toString('base64')` or `buf.toString('hex')`,1537476182.0
l3l_aze,This is gonna be awesome. Thank you very much for sharing! :),1537498403.0
l3l_aze,"This doesn't seem to be Node-related, only JS.",1537470848.0
isakdev,"Im not trying to discourage you, and you will definitely find some solution to this, but this is why relational databases exist. Or even graph databases. Mongo is a document storage. Mongoose is almost a necessity these days and in top of that people are simulating many to many relationships in mongo while its been repeatedly said that many to many arrays of object ids are an antipattern.

>  each Company has a property  that includes the array of open positions for that company

Wrong. Each company should have an ID and thats it.

Then you have positions that hold the id to the corresponding company. Thats it. No array. Dont complicate things. Dont make two way relstionships. Tou want to get all positions for a certain company? Find the company id then search for all positions that have that id as the company. The array is not needed.


> each Position has also an array of candidates that applied

Same mistake again. Just keep applicants in its own collection and have refs to what position they applied to. An applicant can apply to multiple positions? No problem, just keep the array there, array of positions that the applicant apllied to, no two way array keeping for no reason.

I dont know if you are coming from an SQL background but you are taking a wrong approach to mongo database design thats gonna bring you so many headaches in the future.

Even my suggestions can be dumbed down with even less refs if you just **diplicate some of the data**. I know it *sounds* scary, but thats the advantage od mongo. The “no repeating everything in its own table” doesnt go well here. If you have users and users have names, well guess what, you can also keep the whole user name in another place without any refs or ids. Just dont forget to update all records on data change. 

Tldr- stop treating document storage databases as relational and use them for what they are.
",1537477928.0
mansfall,"You're trying to hammer a nail with a screw driver. Ie, wrong tool for the job.  You should be using a relational database.",1537489604.0
iends,"You should not be storing data you want to be secret in a JWT, but they are secure because they are signed and cannot be tampered with.

This is why they should expire and be refreshed periodically.",1537467458.0
jkoudys,"I think I've read the same anti-JWTs-in-localStorage people are parroting to you. Most of these complaints are based on the flawed premise that a JWT _should_ store secret data. Especially because they're sent on nearly every request, they only ought to include data that's useful on most requests. An email address, some user roles (e.g. are they an admin, do they own a certain resource, etc.), that sort of thing.

The main legitimate fear is that someone could save a token then use it to act as that user forever. That's why you must always include an `exp` claim. You're right that you will have most of that problem no matter what you use. If your token expires quickly, then you limit the potential of script injection to things they can do in the immediate term, which if they can read your localStorage they can do anyways. e.g. if someone is using your token to say `GET https://mysite.com/super-secret-data`, then the same script that grabbed your token and sent it to them, could have grabbed that data and sent it to them anyway.",1537478176.0
lcfcjs,"JWT isn't meant to keep anything secret, its main purpose is to store data that you never want anyone to change. For example if it contained an object like { admin: false }, they couldn't change it to be { admin: true }.
",1537467588.0
zmasta94,"For most applications JWTs are absolutely fine, and a very developer-friendly way to set up authentication. JWT is my go-to for SPA. 

People that say JWT is insecure without any real explanation are usually those under the impression that sensitive data is stored in the token. If an app is storing sensitive data in a JWT it’s doing it all wrong. A token is regenerated and signed by the server with every request, so if it’s tampered with it gets overwritten before any data is compromised anyway. 

JWTs can store authentication-based information such as authentication roles, user class, user id etc because this is data the user can infer anyway. 

If you keep the refresh token lifespan short enough (30sec) you can kick malicious users out easily too. ",1537477652.0
elr0nd_hubbard,"As others have noted, too: use JWTs as ephemeral tokens granting access, not as stores of session data. ",1537475237.0
abudabu,"JWTs aren't meant for storing private data. They're meant to *prove* that the data they hold is valid. For example, a JWT might contain the claim `{admin: true}`.  This data is only encoded using base64, which is trivially decoded. By design, the data is not *encrypted*. The point of a JWT is to prove that a trusted source has verified this claim. 

So storing private data like `{superSecret: '123abcdef'}` in a JWT is simply misusing the technology. That is not a flaw in JWT. 

At the most basic level, the JWT signature is generated using a secret shared by the producer and the consumer of the JWT. In a typical scenario, an authenticating service *produces* a JWT and hands it to the client. Then, the client provides the JWT to access your service. The authorization function (the *consumer*), verifies that the JWT signature is valid. It can do this because it has the same secret used by the producer to sign the token. The weakness of this approach is that if someone discovers the secret, all existing JWTs are compromised.

A more secure approach is JWT's RS256 standard, which uses asymmetric public/private key pairs to generate the signature.  This is more secure, since the producer doesn't have to share the secret with the consumer, but it's still vulnerable to the private key being compromised.

To solve this, the JWK / JWKS standard was created. This is based on rotating public/private keys.  The JWT contains a value in the header which identifies which key was used to sign it (the `kid` header value). The consumer requests the public key from the producer by hitting a well known endpoint on the producer, providing the `kid`. In effect the consumer is saying, hey, ""I have this token which says it was signed by you. Can you give me the public key for this `kid`?"".  The producer looks up the public key identified by the `kid` and returns it. The consumer then verifies the JWT with the public key. (It might also keep a temporary copy of the public key so it doesn't have to hit the producer on each authorization request.)

JWKS allows the producer to change the public/private key pair at will. In principle, each JWT could be signed by a different public/private key pair.  But typically, the key is changed only periodically. This means that even if a key is compromised, the producer can invalidate just the subset of keys signed with that key pair. Also, if every JWT has an expiry, the producer can guarantee old keys are deleted. That way, even if the producer fails to detect a key was compromised, over time, that key will become useless. 

",1537490553.0
NewFuturist,"No one in this thread is addressing the fundamental question you are asking. 

Cookie-based systems typically store auth data in ""HTTP-only cookie"", which front-end scripts cannot get access to. Most people, when implementing JWTs, store the JWT in local storage which IS accessible to scripts. This means that any script that is run on the domain can get access to this auth information. 

You can, instead, store JWTs in a HTTP-only cookie. This preserves the statelessness of the system, while ensuring a higher degree of security. When validating the JWT, just pull it out of the cookie in the request. ",1537497505.0
bjpbakker,"Theoretically JWTs are secure. That means their specification (RFC 7519 [0]) is secure.

The problem with JWTs was the library implementations. Especially the nodejs implementations had a whole lot of security bugs. I don’t know what they’re like today but I can only assume the popular libraries are now quite secure. As with all libraries you plan to use, read the code and do some research about it. 

Like others suggested the data in a JWT is not necessarily securely encrypted, but they are signed so the server can trust the data iff the signature is valid.

[0] - https://tools.ietf.org/html/rfc7519",1537469670.0
voidvector,"Depends on your use case. Are you using it as API token between internal services or as token for public authentication? 

The major problem w/a JWT over other technique (i.e. session) is replay attack. Attacker can stock up a bunch of JWT, and then use them at later date/location. This is due to the fact that it is stateless. This is even documented on its [Wikipedia article](https://en.wikipedia.org/wiki/JSON_Web_Token#Vulnerabilities_and_criticism).

For API usage, you can usually play around this with short-lived tokens or nonce. However, for user authentication, aforementioned techniques would usually sacrifice User Experience, so the secure way to do it for that use case is actually creating a stateful session layer either in the token payload or in the transport layer. ",1537476359.0
tswaters,"If you don't need to give information to the user, don't. There's a pretty good mechanism for keeping a session id in an http only cookie and using that key to fetch a session object from a data store.  It keeps secrets from the user and can have sliding expiries out of the box.

When I first started using jwt tokens I thought they could be created and given to the user, passed back to api end points as authentication.... but then I thought about how to implement sliding expiry so you could stay logged in using the site passed provided expiry -- like a session's ttl, then I thought about refresh tokens and the like and eventually I stumbled across an article and it was like a lightbulb going off:  http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/

So now If I'm going to use JWT tokens - it'll be a gateway API that generates a token based upon the user payload & that token is sent to underlying microservices so they don't need to auth the user.... the reason is mostly scale - if you provide nothing but an opaque token to a service that it needs to independently check, the more services you have, the more your auth service gets slammed - it becomes a bottleneck to the entire stack.

The only time I'd send a JWT to a client is if it's incredibly short-lived (like 15s) and is passed along in an SSO type situation where the other service would decode the token and take the result as being who the user is.... from there, the target stores that decoded user in session and again, will pass jwt tokens to underlying back-end services.",1537498434.0
kkradical,"In this thought experiment replace jwt with any other token type. You are possibly still exposed to the same set of exploits. This security problem is not inherent with jwt's but with storing any sort of token in localStorage.

So yes you are correct, you need to protect against untrusted javascript reading the token no matter what kind it is.",1537473742.0
spinlock,"localStorage should _not_ be available to a malicious script. Make sure you're using CORS, etc... and securing your site the way browser vendors intend. But, once you do that, browsers are very good at sandboxing different websites.

This is actually why javascript doesn't have IO. It's built to run in a browser without creating security vulnerabilities (unless it's IE which does create security vulnerabilities).",1537467823.0
,[deleted],1537466724.0
BehindTheMath,Use npm i - g npm,1537465237.0
notAnotherJSDev,"Also, not sure if it matters, but make sure to restart your terminal after installing globally",1537466146.0
OzziePeck,Install yarn. ,1537636169.0
variables,"Shouldn't it be:

    {% if data.highlights.length %}


Create a JSON.stringify() template helper and then print out the data element in the template to see the structure of what is being assigned.

    {% json data %}",1537464984.0
hugo__df,"You could switch to a declarative view layer eg. React or Vue (or preact, hyperapp, inferno, skate the list goes on).

The way you're describing it sounds like standard jQuery-based UI development.",1537461787.0
hugo__df,"You could use `nodemon`.

Whatever is in your `npm start`, eg. `node server.js`, add a `dev` script as `nodemon server.js`. `npm install nodemon` and then run `npm run dev`.",1537461674.0
Quertun,"Did you only use the package manager? If I recall corectly. Node is called nodejs in the Ubuntu repos. Because of a naming conflict with another package. If you installed a ppa or a .deb package it's likely that the name node is used.
So i think you did it both ways.",1537458470.0
datenfips,Ahoi! Could you tell me more about Vulkan? I just know OpenGL ,1537452548.0
EarlMarshal,Looks interesting! But i would probably prefer it to use NAPI or WASM instead of NAN. But maybe that's just my preference.,1537467000.0
fistyit,You're a boss! ,1537485849.0
echeese,https://nodejs.org/api/net.html#net_class_net_socket,1537451430.0
ecares,WHY? Why do you do this to us? What is the point of such? Do you want us to leave this sub? Is that your long term plan? Arrrghh,1537444617.0
brtt3000,"It'll work fine if you have a simple single process application that you want to use just a little bit longer. But for anything sizeable in-process-memory-cache is a kludge until you setup proper HTTP level caching with like nginx or varnish. 

I don't think this will cache and invalidate well for cluster mode or multi-process backends. The advice of using redis to have a shared cache is usable but still not ideal as you're still using your expensive node.js resources for dumb byte shovelling. Ideally a cache hit shouldn't even hit node.js at all. 

Real http caches also come with the cache invalidation, cache-control header support, stampede protection, serving stale content during refresh, PURGRE/BAN type features etc.",1537451331.0
Parasin,"I have actually used this approach on a production environment, and I can tell you that one thing you absolutely must consider is exactly which routes you are going to “cache”, and the possibility of returning incorrect data sets to users. For example, if a route is hit repeatedly, users will only ever retrieve cached data, even if there is new data available.

Another consideration is how much you are caching; the cached data is stored in memory, on a large application, or an application with larger data sets, this could rob the system of memory that may be needed for other operations.

A good workaround for the first problem is to set a hard expiration date on cached data. That way, you can guarantee the cached data will be refreshed at that point.",1537445873.0
,[deleted],1537523885.0
Gnome_0,"maybe this example on cofeescript can help you 

[https://gist.github.com/bergie/1226809](https://gist.github.com/bergie/1226809)",1537446085.0
pull_my_finger_AGAIN,"Maybe you're not aware, but most languages have a package management system similar to NPM and NPM in particular has had some pretty bad issues with security and refusal to act on reported issues.

What is your source on any of these claims? Do you have some benchmarks or studies? Otherwise looks like blogspam to your linkedin.",1537437667.0
endjynn,"Here are some better reasons why NodeJS is preferable for web app development:

* **Massively popular and active ecosystem**  
This means you have a large hiring pool, lots of available documentation and many battle-hardened libraries to draw upon 
* **Reduced hiring complexity**  
You only need to hire JavaScript devs
* **Code sharing between front/back end**  
Good candidates for sharing are model definitions and validation
* **Write once, run anywhere**  
NodeJs/JavaScript is format independent
* **Remove/reduce context switching**  
No need to context switch if the language you are using is the same in both front/back leading to greater developer velocity
* **Access to static typing through TypeScript/flow**  
Static typing reduces bugs by 15% - 25% (approx)

&#x200B;",1537439158.0
mattstoicbuddha,"Maybe you could select the element instead of the id?  Not sure how well it'll work offhand, but it may. ",1537428398.0
ChronSyn,"In a sense, it's very similar to react props, and angular and jquery attributes;

`{{ someData }}`

This simply render the contents of `someData`, but doesn't parse anything (e.g. an object will display `[object Object]`).


`{{> myPartial passThisToView=someData }}`

This would render the view (partial, full view, whatever it is) that's called `myView`, and the contents of `someData` can be accessed in your partial view using the variable `passThisToView`.

You can do something like this in your child view (e.g. myPartial);

    <div class=""userLoginLabel"">
      {{#if passThisToView}} Login {{else}} Logout {{/if}}
    </div>

If you're nesting partials inside partials, and want to access something from a level above, you can use relative path-like syntax;

    <div class=""userLoginLabel"">
      {{#if ../passThisToView}} Login {{else}} Logout {{/if}}
    </div>

If you need to use conditionals, you can use `ifCond` instead;

    <div class=""userLoginLabel"">
      {{#ifCond passThistoView ""==="" ""logged_in""}} Login {{else}} Logout {{/ifCond}}
    </div>

And if you want the opposite of `if`, use `unless`;

    {{#unless passThisToView}}
      Logout
      {{else}}
      Login
    {{/unless}}

Note that there's no `unlessCond` as you can replicate that using `ifCond` with a not-truthy equality check (instead of `===` for example).",1537430886.0
NoInkling,"> So far, there was nothing that we were able to do in Rails that was hard to achieve in Node.js.

For me, this kinda depends on how you define ""hard"". The Rails ecosystem is at least more ""cohesive"" - the burden of package evaluation and integration is generally much lower as the community tends to gravitate around one or two mature options for any given purpose. Node is still kind of the ""wild west"" in many areas in comparison (with all the good and bad that entails).",1537402547.0
maximusprime2328,">Despite the great advantages of using Rails in a new project, there was an area where Ruby was not able to penetrate, and not even Rails was a good ambassador. I'm talking about the corporate world.

This is very true. Where I work, a lot of new projects we were working on started with Rails servers and then were converted to Node before they even made it to production. Node is just more cost efficient for corporations. They don't have to hire Rails and Javascript developers. They can just hire Javascript developers to work on the whole stack.

Honestly, as a dev, I prefer this kind of ecosystem because you can make your way around many teams and many projects. If you get tried of a project, just ask to go to another team. No need to have to learn another language to move on from your stale interests.

>Thus, I'm not going to elaborate on the reasons why Ruby is not massively used on the corporate market.

I wish you would have...",1537394067.0
jdickey,"There's a _lot_ more to Ruby than Rails, even if you limit the discussion to Web development. Rails is a great way to develop a single-use POC; attempting to maintain it as a product almost invariably turns it into a POS instead.

But that's been a known problem for *years*. Rails was one of the prime motivations for the [Clean Architecture](https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html), which itself has touched frameworks as diverse as [Hanami](https://hanamirb.org/) and [Roda](https://roda.jeremyevans.net/); data-persistence tools like [ROM](https://rom-rb.org/); and on and on. I described my own job for several years as ""mitigating Rails""; I'm having fun developing productive Ruby apps again. And, if I do get into a position where I'm responsible for maintaining Rails code again, I'll be able to draw on a variety of tools and approaches to give the project a better shot at maintainability than the dark days of 5-8 years ago: whether I use [Trailblazer](http://trailblazer.to/) or one of the other ""Rails-plus"" tools, or follow the practices reported on in [*Growing Rails Applications in Practice*](https://leanpub.com/growing-rails), [*Exploding Rails*](https://leanpub.com/explodingrails), and more.

It's no longer the trendy language because it's no longer the ""interesting"" language. People forget that that was never a [good thing](https://en.wikipedia.org/wiki/May_you_live_in_interesting_times) to be; the fact that the language and broader ecosystem is not now as tightly bound to Rails as marketing propaganda of years past made it out to be is a boon to productivity and developer happiness. I've been developing in JavaScript as well, for very nearly as long as there's *been* a ""JavaScript"". One of my former colleagues put it well; ""Ruby is one of the few languages you swear by; JavaScript is a language that you very regularly swear *at.*""

But, in the end, whatever lets you ship code as a product that your customers love and that lets your developers look themselves in the mirror the next morning is a Good Thing. We, as a craft industry, are far too prone to quasi-religious warfare for anybody's good.",1537417977.0
dangerzone2,Sorry about that other guy :/ I personally don't care about Rails development but I'm sure there are some people out there that are.  Thanks for putting your time into the article.   ,1537382593.0
iends,What are you doing for database access?,1537393588.0
rq60,"Why is scrolling completely jacked on this site with a mobile device?  No scrolling inertia makes reading this a chore, so I guess I won’t...",1537408639.0
weiga,Cause it's the trendy thing to do?,1537402270.0
gaoshan,Welcome to 5 years ago!,1537414876.0
JonathanMaarsh,"You have a typo in the first sentence: ""Java was the new kid on the blog."" With that said, good article!",1537393986.0
Interloper949,Thanks for posting as someone with no Ruby on Rails experience and just a bit more Node experience.,1537394202.0
jasdeep13,"My bets are on Crystal Lang: https://crystal-lang.org/

Ruby like syntax, with C++ like speed. ",1537407889.0
zitrusgrape,"I will leave it here: he never likes scripted languages, but he choose javascript.
",1537455179.0
editor_of_the_beast,This idiot thinks SDK stands for “Standard Development Kit.” No wonder he chose Javascript. ,1537569851.0
calsosta,Aite.,1537405532.0
BasedWebDeveloper,This was posted to r/programming and was destroyed then upvoted here by the circle jerk lol ,1537443953.0
penguingspe,Post your garbage somewhere else. This title is from 2012.,1537377471.0
kwiwksh,"My preferred ways to handle these errors is to deffer the handling to an express error handler and wrapping my request handler with a wrapper than turns the function from a sync callback into an async callback and calling next(e) on any errors bubbled in the wrapper. Then if I ever want to return a 400 status I'll create an HttpError with a 400 code  with [https://www.npmjs.com/package/http-errors](https://www.npmjs.com/package/http-errors)

&#x200B;

The added benefit here is that any completely unhandled errors can be resolved generically in your common handler (probably as 500s)",1537374253.0
,"The first approach catches errors of `find`, the second approach catches errors of `find` and also errors of `res.render`. Even if you don't think `render` may throw anything, I still prefer the second approach because it may handle errors of `render` which I don't expect.",1537373634.0
kryptkpr,"Passport has nothing to do with react.

When authentication fails you will get a 401 response code back from the endpoint (this is what the passport middleware does).

Your react frontend should have a code path for the normal 200 return code from axios and another for the 401 unauthenticated return code, you can then redirect or set your view state as appropriate. ",1537384822.0
ChronSyn,"If you're implementing client-side routing with server side routing, the best option is for the server to have most calls being for API (i.e. return JSON, not HTML, JS or other assets), and a single route for serving your react app (and also ensuring you've assigned a public directory). React app sends requests to API routes, responds to the data as needed.

If you're doing server-side routing, you would want to have individual apps/pages at each route.

Trying to mix client-side and have server-side routes that are identical is asking for trouble (and in many cases just won't work).",1537432130.0
a0viedo,Check the repo for steps on how to follow the demo: [https://github.com/a0viedo/can-you-tell-if-your-node-app-is-healthy/](https://github.com/a0viedo/can-you-tell-if-your-node-app-is-healthy/),1537364103.0
notAnotherJSDev,"First, change your server file to this:

`app.use(express.static(__dirname + '/views/pub'));`

Assuming that is in `server.js`, it is looking at the current folder (root) and it can't find a `pub` directory. 

You should also be able to use just `css/styles.css` or `js/index.js`. What `express.static` does is let's you chose where static files are served from. This would be the same thing as anything in the public directory in say, an Apache or NGINX server. So, you wouldn't use `public/css/styles.css` you'd simply use `css/styles.css`.",1537364087.0
Gnome_0,"try loopback it boostraps the app on swagger

&#x200B;

[https://loopback.io/](https://loopback.io/)

&#x200B;

i have been using it for 3 months and it really has  help me a lot, the only thing is you have to play by its rules (is not as flexible or customziable as expressJS)",1537411933.0
JakeGore,Express.js?,1537357607.0
mattboutet,"Sounds like you might want to check out hapi pal - https://hapipal.com/, Specifically, the boilerplate - https://github.com/hapipal/boilerplate 

If you're looking for something with a few more features already built out, https://github.com/mattboutet/user-pal is available, built on top of pal. It includes PostgreSQL integration via Schwifty / Objection, Swagger, and barebones user accounts.",1537363594.0
guysopher,"I like sails.js.
Used it for some projects already.",1537389480.0
NotSoFreshPrince,"Heres a boilerplate with Express/VueJs

https://github.com/imRohan/node-express-vuejs",1537387876.0
sshaw_,https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String,1537363142.0
Kollektiv,"    This one may seem obvious, but it is likely the most important string method and undoubtedly the most commonly used one. Calling .length on a string will return the number of character that the string contains.

Wrong. It counts how many code points there are. Big difference.
To have the number of symbols in a JavaScript string:

    Array.from(string).length

Every string method that contains the word ""char"" has a ""codePoint"" counter part that will do what you actually think the ""char""s one do.",1537368359.0
kasu300,"I see more and more of these posts and it upsets me. Sensationalist redundant tech articles that add little to nothing of value, usually with an alternate agenda. ",1537405545.0
cisekdan,"req.params are used for getting the parameters from the url, so id in your case. You should take a look at req.body - https://expressjs.com/en/api.html#req.body",1537357765.0
camilo-gonzalez,"Try setting up the Content-Type headers to match whatever type of data your server is expecting to parse.


For example (for json data):

axios.put(URL_HERE, { message: ‘hello’ }, { headers: { ‘Content-Type’:  ‘application/json’ }).then(...).catch(...)

Also make sure you have setup your server to understand that content type. If I remember correctly you can do so in express by adding the following line before any of your route handlers 

app.use(express.json())

Let me know if that helps",1537358230.0
IamATechieNerd,How do I implement localstorage or cookies in React? Any tips? Also which is better:localstorage or cookies?,1537362068.0
4dollarWater,I'm wondering how I can implement it using localStorage without using any frontend frameworks. Thanks,1537368482.0
Pritilender,"One thing that many of JWT tutorials lack is how to implement logout flow. 
I am mostly using OAuth 2 based authentication with access and refresh tokens stored in the DB, so logout is basically “remove this access token and refresh token issued for it”. But how do you do this with JWT?",1537381201.0
congowarrior,"you have the source code for this? Unless I am missing something, I do not see any links to a github repo",1537379454.0
Classic1977,"How to do basic, boilerplate things and write an article about it.",1537356808.0
alfredmuffin,I’ve never understood how decorators help in TypeScript. They’re not very readable imo,1537354555.0
SottileDesign,Can anyone help me?,1537358989.0
l3l_aze,"I don't understand this, but I've tried to reformat the code so it will be more readable. I think the final `}` was missing, so I added it at the end.


\`some code\` only really works good `for small examples` and 3x\` on each side of some code for some reason does not work well. Using 4x spaces (    ) will almost always work for code (or any other pre-formatted text) on Reddit though.

----


    // My form: @ /models/submit
    
    const mongoose = require('mongoose')
    const User = require('../models/user')
    const jobSchema = mongoose.Schema({
      userId: {
        type: User.getUserById()
      },
      link: {
        type: String,
        required: true
      },
      command: {
        type: String,
        required: true
      },
      createdDate: {
        type: Date,
        default: Date.now
      },
    });
    
    const Job = module.exports = mongoose.model('Job', jobSchema); 
    
    
    // My Route: @ /routes/index
    
    router.post('/submit', (req, res) => {
      var link = req.body.link;
      var command = req.body.command;
    
      // Validate req.checkBody('link', 'Valid Link required').notEmpty();
      req.checkBody('command', 'Command is required').notEmpty();
    
      const errors = req.validationErrors();
    
      if (errors) {
        res.render('index', { errors: errors });
      } else {
        const newJob = new Job({ link: link, command: command, });
        Job.createJob(newJob, function(err, job){
          if (err) throw err;
          console.log(job);
        });
    
        req.flash('success_msg', 'Job Submitted...');
        res.redirect('/')
      } 
    }",1537325576.0
rendsolve,"Anyone? 

&#x200B;

&#x200B;",1537751052.0
psayre23,"One option is to create a second process that does the same thing as the first. Then in the sigint, run start on the other. ",1537333144.0
cahva,"For pm2 to be zero downtime, you should use the clustermode (-i <processes>). Check the docs :)",1537336689.0
tknew,"This mechanism of spawning new processes while keeping the previous ones online is only available in cluster mode to achieve 0s downtime reload.

This is an interesting feature request, please open up an issue there: [https://github.com/Unitech/pm2/issues](https://github.com/Unitech/pm2/issues)",1537346463.0
mikkelhoegh,"Check out [standard-version](https://www.npmjs.com/package/standard-version), in addition to the changelog stuff you mentioned, it also updates package.json with the new version, commits with a similar message to what you had in your script and creates a git tag based on semantic versions (although you can override the generated version with command line flags).",1537310593.0
ResponsibleLife,Shout out to [semantic-release](https://github.com/semantic-release/semantic-release).,1537345590.0
sshaw_,Very nice. ,1537322378.0
mistralol,"
git log ?",1537308501.0
joelangeway,"Typed arrays have a lot of memory overhead, index checks, and indirection underneath. They are fast in scenarios where arrays are appropriate. When you have two values, a plane old object, that is always constructed the same way, will be a great deal faster and that code much easier to read.",1537328901.0
Ikuyas,are you the author? it's a good stuff.,1537340789.0
fuddlesworth,Why use mocha when you can use jest? ,1537316300.0
Nephelophyte,You might be able to but I wouldn't recommend it. Front end vuejs forces you to care about data only making your backend agnostic to the front end. I'd recommend returning the json data from your API and using vue-router on the front end. If you absolutely must use the backend then you should look into server side rendering with nuxt.,1537289076.0
aichholzer,"That's not possible... Sails should never be used in production, if you take your business seriously. I have never seen anything so cluttered and slow.",1537356907.0
ecares,Don't use node: https://www.microsoft.com/en-us/download/details.aspx?id=54258 there is a dedicated tool for that purpose,1537301068.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [Nodejs Oracle to Mssql DB migration](https://www.reddit.com/r/javascript/comments/9h2h9q/nodejs_oracle_to_mssql_db_migration/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1537335471.0
abcd5fghijklmnopqrst,Why?  What do you want to do with Node that you can't do right now?,1537283839.0
maximusprime2328,"Not courses, but some things you should practice because you will need to know them when building enterprise level production apps.

 * Learn Docker. Node in production is all about containerizing your app so that it can be replicated in most environments.
* Learn automated container orchestration, like Kubernetes. Automating scaling your app up and down.
* Become a unit test writing god. Unit tests are the backbone of any app. They will save your life more than you know.
* Know Git like the back of your hand. It doesn't matter what language you are writing. Every dev needs to be a Git master.",1537292431.0
Saud381,Treehouse ,1537286292.0
zayelion,StrongLoop,1537457986.0
inthegrave372,"Express boilerplate 2018 may be a good starting point, for learning about best practices and coding style",1537303420.0
xemasiv,"express-force-ssl: https://www.npmjs.com/package/express-force-ssl

express-session: https://www.npmjs.com/package/express-session

cors: https://www.npmjs.com/package/cors

compression: https://www.npmjs.com/package/compression

body-parser: https://www.npmjs.com/package/body-parser

greenlock-express: https://www.npmjs.com/package/greenlock-express

polka: https://github.com/lukeed/polka",1537329933.0
lunchpoet,"This is the one being mentioned above I believe. Made by Jason Miller of Preact fame. I think the Front End Masters courses by Scott Moss are also really great. You will have a solid project to work from after his two courses. 

https://github.com/developit/express-es6-rest-api",1537313763.0
hamiltonkg,"Cool little opensource client tool for use with [Axibase Time Series Database](https://axibase.com/docs/atsd/), there is a Docker container option for deployment.",1537259457.0
yhc44,"You do not use [socket.io](https://socket.io) for GET/POST/DELETE/PUT Requests. You CAN use Express for that and do something with [socket.io](https://socket.io) in this.

&#x200B;

You have something like

&#x200B;

`let app = require('express')()`

[`app.post`](https://app.post)`('/url/to/post/request',(req, res) => {`

`// You can do something with your connected monboDB`

`})`

`app.listen(8080, _ => {console.log('server is running')})`

&#x200B;

For put

`app.put('/url/to/put/request',....)`

For delete

`app.delete('/url/to/put/request',....)`

&#x200B;

I would recommend using axios for requests on client side.

&#x200B;

[`axios.post`](https://axios.post)`(host + '/url/to/post/request', {`

`param1: 1337,`

`param2: 42`

`}).then(result => {`

`// do something with result`

`// fetched data is in result.data`

`}).catch(error => {`

`console.log(error)`

`})`

&#x200B;

maybe read about axios here: [https://www.npmjs.com/package/axios](https://www.npmjs.com/package/axios)",1537264368.0
Nodemort,"I think having a better understanding of the technologies you're using might be a little bit easier to understand what 'todo'.

&#x200B;

If you're using a form to do some sort of post, then really you could just use a form with a method of post. This will most likely be the most normal case for you.

&#x200B;

As for PUT and DELETE, since you already have jquery, you would want to attach an eventHandler so when you click the delete button, or decide to edit it will fire the correct even using jquery's ajax (although there are other alternatives as pointed out, but you already have jquery).

&#x200B;

Think of [socket io](https://socket.io) as a way of handling data going to or from the server regardless of any POST/PUT/PATCH/DELETE events. For example when someone uses the post request, it will send out an event to everyone and you can handle the logic to update the todo list without refreshing.",1537273554.0
yhc44,"You make a db call with some params. Try updating the gui then. (Maybe you have a table displaying the data. Try adding a new row with javascript then - be sure, the data was added successfully. (Error handling client AND Server side))",1537281359.0
yhc44,"Even if you are using socket.io you will Need to append some html. 

I recommend using vuejs. Invest some time (maybe 2-6 hours) and you will know what to do. :) 

Vuejs/angular/react for live update on one client 
And one of above + socket.io for multiple auto update.

You CAN use socket.io here, but imo its an overkill.
You need it when you are doing something where you cant predict at which time your tasks finish.",1537284160.0
coolcosmos,Wow I'm currently making a card game and this looks fantastic !! Have you thought about doing it in Typescript ? If no I'd like to make a typescript wrapper for your library.,1537289490.0
Thin_K,This seems to have the same goals as [parcel](https://parceljs.org). Are there any specific differences or benefits to lyo you'd like to mention?,1537256124.0
son_of_meat,"Looks good! I'm speaking from the ""module maintainer"" point of view. It is certainly a pain to set up all the builds for distributing a module for browser. These days there are no fewer than three distinct build targets that people might want to consume: a minified bundle, non-bundled ES5 with CommonJS deps, and non-bundled ES5 with ECMAScript deps. In the Redux npm package, for example, these are the dist, lib, and es subfolders respectively. It seems like this cli will help me with the dist part (minified bundle) but not the other two. For my own purposes I'd also need TypeScript support. A couple small things I noticed while looking at the code. Technically the line ""#! /usr/bin/env node"" should only be added to the top of executable Node.js scripts, not modules. It's just a comment so it won't really hurt anything of course if it's there either way. Also I can see that this line `const [name, version] = module.split('@');`is not compatible with namespaced modules (e.g. @angular/angular). Prolly want to use something like https://www.npmjs.com/package/parse-package-name to parse the name. Cheers and keep up the good work!",1537278892.0
Amos47,"I hope this lands as I hope. It's meant to be constructive as I generally like the idea.

It needs to use an open source model. I couldn't build my business off of someone else's black box. And I would want the ability to push upstream and have a strong community also pushing upstream. Look at all the billion dollar businesses ruby on rails built. The way your business makes money is from consulting, advanced features and hosting.",1537283998.0
rangka_kacang,"Change $99 to $19 or $29 and I'm sold. Honestly, I can scaffolding the same back-end features using Laravel in less than an hour. Maybe make that 2 hours if I don't use pre-made front-end framework.

But awesome project, nevertheless... Love your layout and color palette...

1. Would founders pay for a product that could save weeks of time and enable them to get to market faster?  
A: Most probably, $199 is more than enough to pay some Indians from Fiverr to clone that exact project.
2. Is this more suited to freelance developers to help them reduce project timelines, but charge the same price and maximise their income.  
A: Reduce? Yes. Unique? No. [https://spark.laravel.com/](https://spark.laravel.com/) (For NodeJS maybe).
3. Does it feel over/under priced?  
A: Yes. There are other more established SaaS providers out there, you need to compete their pricing model to compete.",1537252221.0
luffs,"Can you start out as a Hobbyist($99) then upgrade to Professional($199) and only pay the difference($100)? Is it one-time, per month or per year?

If it's one-time, it sound like good deal to me.

I'd prefer if I could look at the code before paying though, and not [buy a pig in a sack](https://en.wikipedia.org/wiki/Pig_in_a_poke). Guess I could refund it if I'm not satisfied, but still.",1537268381.0
helpfulsj,"You totally missed the SaaS train by not making it a subscription model :D. Just Kidding. 

This looks really cool. I would use to implement a business idea quickly to throw it at the wall and see if it sticks.",1537275936.0
citivin,"What is your target customer? I don't really get which niche you're trying to cater to. 

If it's founders of a subscription business with no technical aptitude, then it needs to be hosted like wix, shopify etc. what would they do with something they have to download and host themselves? Also, what do they do if they need more than the features you provide out of the box? Plugins? Who'll write those?

If it's for developers, then you need at least to have a documentation if not show the code. From your website I get the impression that it's mostly a scaffolding that experienced freelancers should be capable of putting together themselves. 

Maybe I'm mistaken, but to me it looks like a black box with a price tag. ",1537297055.0
martinmicunda,The link is not working.,1537260478.0
helpfulsj,If there is a open source Customer Success platform you could integrate this into that would be really helpful. That way you could start getting churn predictions and other customer success analytics earlier on.,1537276065.0
fender21,"It looks interesting and I am interested. Here are a couple of oddities.
1.) There is no actual demo site that I see other than the video?
2.) You are bouncing to Gumroad to sell the software? I get you are not selling a subscription with this package but ideally this would be all baked in to your site.
",1537279277.0
lulzmachine,"Looks great. If it turns out good it could be very interesting! \*Easily\* worth 99$ if it saves even a few hours of work. Don't worry about competing with other SaaSes in other languages, something for NodeJS is wanted",1537288481.0
anon774,Amazing and I wish this had existed before I built my own site from scratch... but you absolutely need a demo and more info about what we're actually getting.,1537296111.0
,[deleted],1537296188.0
fuck-yeah-guy,"I would pay for it, but not before I see some of its code. I wouldn't want to throw 100 bucks on it to later find out its coffescript or low quality code. ",1537303767.0
ruspow,looks like you've created the nodejs version of [https://spark.laravel.com/](https://spark.laravel.com/) theyve made it work so you can too :),1537303888.0
_imjosh,"Yes, paid a lot more to a consultant to build me a skeleton node app. I am a dev and I wanted to use node to build something but I had no node experience, so I paid someone locally (around $700 iirc) to get me started. Keep in mind that I was able to specify certain things so it wasn’t 100% cookie cutter and the consultant built in some support hours for me after delivery.

I think I’d want to see some details about the stack (like, what Auth library are you using?) before I’d buy. And probably at least some code examples. 

Out of curiosity, what does it use for transactional email?",1537308754.0
rubenbase,Whats the difference between 1 application and 3 applications what does that mean?,1539987204.0
eNzyy,">if I need to do my app in NodeJS then I might need to learn MangoDB 

Not sure why Node.js couples you to 'MangoDB', if your data is relational, you probably want MySQL/MariaDB? Language/Framework/Tool does not determine what database engine you use, the specifications around your data does.

&#x200B;

Anyway, that aside, it's not a case of should I use X or Y, or which is better. Pick the right tool for the job, if it's python, pick python. It depends on the project requirements. In terms of scraping (unless performance is key), PHP, Node, Python. All will do the job just fine.",1537254103.0
saltupz,"As a language only comparison new ES is nice to work with, it has a small and decently designed core. Its terse and supports many idioms. That said layer TS ontop and development exp is sublime.

PHP is still locked to all the old nasties it has gained thru its lifespan, and without BC breaks it will always have the extra madness as baggage.

For node, its stable and easy to deploy, and maintain. Codesharing across server/client is nice, and its a nice fit for realtime apps.

Even though PHP is nasty to work with, it still is a viable choise for traditional websites. If your goal is to build a simple site, PHP is a good fit. When you need anything else, PHP wont fit. Anything realtime or async wont fit the PHP process model.",1537259665.0
shtanton,"I don't know how easy that would be in php, but in node it's fairly straightforward.  Also code running with node would be a server so does the same job as php, but JavaScript can also be run on the client, which doesn't mean it runs faster but does mean that the browser doesn't have to wait for the server constantly.",1537259882.0
BasedWebDeveloper,Stick with PHP. Guaranteed work for the foreseeable future. Node on the other hand ... who knows. ,1537441366.0
fupower,Just look at /r/lolphp,1537255109.0
reacttricks,"I've been using php to build backends for my web projects for the past 10 years. Last month I decided to learn Node.js in detail and now I'm rewriting my most important projects into Node. 

I'm kicking myself for not doing this sooner. The reason? Speed of development. It took me less time to rewrite a whole app from PHP to Node than it would have taken me to add a major new feature to the existing PHP app.

One of the reasons for the huge increase in productivity is switching from MySQL to non-relational databases, my suggestion is that you try Mongo or maybe even some cloud databases. It takes some time to figure out the differences, but it's worth it.

Regarding scraping, I'm sure there are many libraries for Node that can help you with that.",1537261192.0
crux153,It is licensed under GPL :(,1537259476.0
Djbm,"I’ll take a look next time I need to make server side HTTP requests.

One thing that I like when looking at a library is an intro paragraph on why the project exists and what it’s looking to solve.

Even a bullet pointed list of features goes a long way in helping someone understand if the library is useful to them.",1537241712.0
MentallyRetire,How do the capabilities differ from [node-fetch](https://www.npmjs.com/package/node-fetch)?,1537255369.0
,"Maybe node isn't the best tool for the job here? 
It would be really good to handle the stateless login mechanism (ie JWT) and setting up an API to create, and query jobs.

You could use it to talk to another API that creates jobs and gives job info, and then talks to slack API as necessary.",1537238642.0
kyle787,"Can you queue the jobs into redis and then have mode process the items? I don’t see why node would be a bad choice, you just need to determine how you want to handle the jobs as they come in. If some have a higher priority than others looking into a priority queue. ",1537281462.0
aguyfromhere,Where is the code?,1537228973.0
aguyfromhere,"OP PMed me the link.  I’d suggest if you wanna code review, at a minimum you create a README that walks someone through what’s going on here. ",1537230001.0
whatisfailure,I'd be happy to take a look. Send a PM my way if you want another set of eyes on it.,1537232937.0
El_Matella,"Hi, well I didn't run the code, but here are my thoughts:

- You don't need to wrap your `buildRecords` logic into a `Promise`. Everything in this function is synchronous code. A Promise is useful when you are dealing with async code (you are using it correctly with the `getData` function.

- Then, for better comprehension, I would have declared the `csvWriter` before actually executing the getData() function.

That would just make your final code looking like:

```
getData().then(data => {
	return csvWriter.writeRecords(buildRecords(data))
})
```",1537284290.0
l3l_aze,"Not the best with Promises in particular, but may still be able to help somehow if you're still looking.",1537236510.0
roconf,"uhm ok, where's the repo",1537258404.0
08148692,"You should have a package.json file which lists dependencies so you can just run npm install without needing to run a separate npm install <package> for every dependency. 

Inconsistent use of semicolons. It's debatable wether or not semicolons should be used, but either use them everywhere or not at all. I personally prefer to use them as relying on automatic semicolon insertion can lead to some obscure bugs which are difficult to debug.

Always use const or let instead of var. Try to avoid using let unless the value of the variable absolutely must be changed at some point. 

Instead of wrapping fs functions to return a promise, you could just install fs-promise.

Line 9 fileName is never used

Line 10 reject is never used (this should be used instead of throwing the error on line 12 (return reject(err)))

Line 11 use arrow function for the callback.

variable ""records"" is defined on lines 4 and 47.

Line 47 csvWriter is used before it's declared. Shouldn't rely on hoisting.

line 47 could be shorter:
getData().then(buildRecords).then(csvWriter.writeRecords(records))

There's no reason for buildRecords to return a Promise.


",1537883890.0
Lost_sand,Erase it all and start over.,1537237750.0
sneffer,"So you added a dependency on the non-spec `reflect-metadata` just so you could make `app.use` chains seem more declarative?

Sounds like something that could be done by changing whitespace and directory structure... you know... instead of placing a dependency on a syntax which ECMAScript hasn't committed to supporting.",1537239003.0
blood_bender,"Are you able to use a custom router, something like `express-promise-router`? 

I use that instead of the built-in express router because it allows you to define async req/res handlers without needing a try/catch in each of them.  It removes a _lot_ of boilerplate code on it's own, and it would be cool to be able to combine the two of these libraries together. ",1537239359.0
mtaon,"To use generated files in your application, I see you have two options:

- Just include them in your source tree and require them as local files
- Add [local path dependency](https://docs.npmjs.com/files/package.json#local-paths) to directory with the generated files",1537218744.0
JasonWicker,All the links to documentation are broken.,1537288623.0
tanepiper,"This is really nice.  I've just added a custom command feature to [takeoff](https://takeoff.sh/) with some similar ideas, but I really like the decorator route for defining and adding context.  I'll certainly be checking it out, hopefully make [this](https://github.com/takeoff-env/takeoff/blob/dogfood-takeoff/src/commands/takeoff/init-workspace.ts) cleaner",1537256502.0
shawncplus,"Modifies built in prototypes, that's a big no-no for me. It basically forces your code into any other code even when I'm not using your library functions.

Especially for things that mess with dates you need _lots_ of unit tests. For that reason I would _always_ use a specialized date library for dates. Preferably one very heavily used.

From a code review perspective:

* You're mixing a lot of old JS idioms with new JS. Like using `const` in some places but `var` in most others, not using arrow functions, using raw `for` isntead of `for .. of`
* In places you use `console.error` instead of throwing an exception which removes power from the user of your library (maybe I want to do something else besides log to the console if there's an error)
* Use `===` always unless you have a _very_ good reason not to and in such a case it should be documented that it's on purpose
* Most of your `switch` statements could be simplified by just having a key/value map
* Sometimes you use semicolons, sometimes you don't
* Sometimes you have a space between `if(` and sometimes you don't
* None of your methods are documented in code
* Lots of your conditionals can be combined/invert to make the code cleaner

Example:

    function () {
      if(word == ""dd"") {
        if(!dayStop) {
         // stuff
      }
    }

could instead be

    function () {
      if (word !== ""dd"" || dayStop) {
        return;
      }

      // stuff
    }

Understanding [De Morgan's laws](https://en.wikipedia.org/wiki/De_Morgan%27s_laws) is very useful when wanting to refactor code to return early",1537216016.0
BedsideRibStash,"Looks like an interesting set of utilities. I really like the ""add"" date function (it reminds me of relative dates in PHP).

If you plan on releasing to NPM, consider releasing multiple packages for each ""group"" of functions (ie. lyra/dom lyra/dates lyra/words lyra/random). Similar to how lodash has a package for each function.

This should encourage more people to use your library.

Cheers!",1537206962.0
bjpbakker,"Your question is literally answered in the README of passport-facebook. I suggest you go from there :)

https://github.com/jaredhanson/passport-facebook/blob/master/README.md",1537214089.0
josewhitetower,RemindMe!,1537205613.0
AddictedToCoding,"Well.
Why would you do something like that if you had no other ideas.
Authentication is one part of an app.
Pointless if you hve nothing. Except if you want to do like Cambridge Analytica (not a good idea IMHO).

Next. Go wild. Try doing something useful :)",1537241612.0
OzziePeck,"Transferring JS across the web to the client is literally just asking for code injection... 

I know it’s done by the browser etc, you know what I mean. ",1537213944.0
helpfulsj,"Why do you need to you need to deliver JS files? I think it would be better to have the files hosted on a private repo and have the client you were going to send the files to download them from there.
",1537216749.0
aamfk,"You should queue up requests in a database and keep track of where you have failures or error messages. I wouldn't hesitate to store this inside a database and then you can write your crawler to have a decent amount of threads without sending a thousand requests at a time.. I just think you need a queue either lifo or Fifo. Perhaps. It should be decided whether you want breadth first or depth first.

I just can't imagine writing something like this that just tried to run all the threads without failure.

I mean what is going to happen when you hit an infinite loop?
Like
http://mytarget.com/test/test/test/test/test

With symbolic links its not impossible to write stuff like that. And if it is going to help me DEFEND my website against someone that is Trying to borrow all my data? Then it would be in my best interest to trick you into navigating a single path to infinite levels.. I mean do you pay attention to robots.txt? Excluding certain directories is sometimes a good thing.

Keeping data in a database allows you to easily see what is forbidden / worthless place to go crawling for email addresses.

I haven't written a good email extraction spider in a long time. It sounds like a lot of fun. ",1537200434.0
cdm9002,Find returns an array of matches. You are checking it like an object. Either check the elements of the array or use findOne.,1537195246.0
kryptkpr,"It's an array of objects, you missed a [0]",1537195563.0
elrodrix,heroku or sh,1537191101.0
shtanton,[now.sh](https://zeit.co/now) looks perfect for you.,1537191198.0
crashspringfield,I usually [run an nginx reverse proxy](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04) and use [pm2](https://www.npmjs.com/package/pm2) to run the Node app.,1537193001.0
sammyalhashemi,Lmao I'll have so much fun with this. Good stuff man,1537193087.0
Loyen,"This reminds me of [pywal](https://github.com/dylanaraps/pywal). I really like the idea of these kind of things, it's awesome to switch wallpaper and at the same time see my apps adapt to it. :)",1537208212.0
JoshuaScript,"Feedback is welcome. Also, I'd love to see what themes everyone makes with these, especially if you end up publishing them to the VS Code marketplace/Sublime Package Control.

Here's a link to the live site: [http://pictheme.herokuapp.com/](http://pictheme.herokuapp.com/)",1537184885.0
oorza,Would love Jetbrains support!,1537210479.0
r1cka,Any chance of adding GitLab?,1537184773.0
daredevil_eg,"Heroku already has it
it's called Review Apps",1537191189.0
VolkovSullivan,PRs are welcome on [GitHub](https://github.com/flaviolivolsi/deploify) :),1537186227.0
NetOperatorWibby,This is neat. Could you add Gitea support at some point?,1537212876.0
nahtnam,Now.sh also does this,1537178766.0
aguyfromhere,Heroku already has this functionality?  Why reinvent the wheel?,1537189793.0
endjynn,"The name of the project makes the meaning a little unclear. Does this ""just"" (it looks like a pretty complex undertaking) provide websocket functionality for NodeJS or does it also allow for the creation of a websocket cluster?

e.g. multiple websocket servers connected to each other in a cluster?

If it is just the former it might be worth changing the name to prevent confusion.

Thanks! :)",1537177644.0
BehindTheMath,"You need to set up a server. The most commonly used one is Express. Set up a route to capture the data submitted by the form, parse it, then write it to the DB. ",1537149211.0
york2k,Thanks. ,1537192059.0
SquattingWalrus,"Nice man, I like the structure. Just a quick question - how come you use res.status(...).send instead of .json()?",1537212748.0
TravelinStyle,require('dotenv').config({path: '/full/custom/path/to/your/env/vars'}),1537142031.0
mattstrom,"You can put a symlink into the _server_ directory. I do this when I want to share env vars between projects in a monorepo.
```
ln -s ../.env .env
```
Also Git will let you commit symlinks to a repo.",1537164230.0
imax89,"Never ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever ever combine server and client sides (apps) in one folder. In fact, it has to be 2 different repos.",1537176760.0
son_of_meat,I wish I weren't here though this is currently at 9 points at 100% upvoted. Wouldn't this content be better suited for StackOverflow?,1537152954.0
cahva,"You can use mongodb aggregates for this
https://docs.mongodb.com/manual/reference/operator/aggregation/avg/

In mongoose you can use aggregates like Model.aggregate(aggregates) where aggregates would be an array of the  different aggregate stages ($group, $project, $match etc.).",1537138842.0
anubis2019,Why not use firebase?,1537150346.0
sbruchmann,"Maybe [`buf.slice([start[, end]])`](https://nodejs.org/api/buffer.html#buffer_buf_slice_start_end)?",1537141131.0
emcniece,"Stay away from PayPal - it only brings pain. Many can share stories of frozen accounts, unreasonable bans, and more.

Use another transactional payment processor if possible. Stripe and Square are great options!",1537117509.0
mootchard,"I cannot speak for the rules on using PayPal as a teenager, but have you considered other tools for backing your eCommerce store? 

Square has API's that can help a lot with eCommerce (Catalog API, Inventory API, Customers API, etc...)

Since you're in the UK, you can simply sign-up at r/https://squareup.com/developer. You can see the ToS at [https://squareup.com/legal/ua](https://squareup.com/legal/ua), but we do require that you are at least 18 years of age. 

Full Disclosure: I am a Developer Evangelist for Square",1537113188.0
Aior,"You can incorporate in the UK even if you're not an adult (16 years old minimum). Your company then is a legal person with all rights - meaning you can just use any of the available card payment services, I recommend Stripe.",1537182191.0
frurre,"I'll try to answer your query with a few rows (haha!). Most startups copy paste existing agreements because we're not all lawyers just read it in beforehand and make sure it fits your business model. From your development point of view, label each transaction properly with #IDs and name of the purchased virtual item.

Read  Paypals seller protection page:  [https://www.paypal.com/us/webapps/mpp/security/seller-protection](https://www.paypal.com/us/webapps/mpp/security/seller-protection)

 So it's a gamble if someone decides to file a claim.

### What isn’t covered by Seller Protection?

* Intangible purchases like services, digital goods, etc.",1537182428.0
Silveress_Golden,"I think there may be a raciest hacker from the future on the site.

Elsewise looks decent",1537129026.0
tamalweb,"Live demo: [https://reddit-like-site.herokuapp.com/](https://reddit-like-site.herokuapp.com/)

Repo: [https://github.com/TamalAnwar/reddit-like-site](https://github.com/TamalAnwar/reddit-like-site) 

Why I built this?

It's just a learning project, my first MERN project. The posts are being stored in mongo database. There is not much authentication. Feel free to give it a try.",1537108553.0
klaxxxon,"That went about as expected :)

EDIT: Any particular reason why the client/build dir is in the repo?",1537171865.0
Str4yfromthep4th,Why ppl are still using heroku is beyond me,1537113378.0
aku_soku_zan,EINVAL means the IP is not valid. ,1537090761.0
cooliobing,"https://dba.stackexchange.com/questions/71334/how-to-configure-pgmodeler

EDIT: You/someone probably edited this file to set user perms. To find the location of the `pg_hba.conf` file, log in to your local postgresql psql CLI using the `postgres` user and run `SHOW hba_file;`

EDIT2: FYI, you can also use Amazon RDS with PostgreSQL for a pain-free experience.

```
postgres=# SHOW hba_file;
               hba_file               
--------------------------------------
 /var/lib/postgresql/data/pg_hba.conf
(1 row)
```",1537099192.0
Moulinette_,Shouldn't you be using the socket id instead?,1537096003.0
frurre,"Use this module: [https://www.npmjs.com/package/express-socket.io-session](https://www.npmjs.com/package/express-socket.io-session)

Really simple to use and hard to go without it. This will expose your express session with [socket.io](https://socket.io)'s namespace, during your socket events simply check for the session property example:  

`if( socket.handshake.session &&  socket.handshake.session.user_.id != undefined ) {`

`let activeUser = socket.handshake.session.user_.id;`

`socket.emit('Logged in', activeUser);`

`}`

Persistent states is also a huge plus for it so you save the user session. The above example works the other way too.

`// Set a custom property to the session : socket.handshake.session.myCustomData = 'monkeys';`

now 'myData' should be available in your routes: req.session.myCustomData. Note it may not be available if an expess request is made before setting it in [socket.io](https://socket.io). Probably messed up something but i hope it helps!",1537106809.0
positlabs,"This is my favorite node module, for real. ",1537114543.0
stoneburner,Use websockets,1537045106.0
drupad,"Look into HTTP connection keep alive, it’s been part of HTTP 1.1 and enabled by default since. Websockets, as others have suggested may be another vessel for persistent connections but is not supported by older clients/servers so not always an option.

The idea with keep alive connections is to create a connection once and reuse it to send all requests.

Relevant SO post: https://stackoverflow.com/questions/46053067/how-to-get-persistent-httpconnection-with-apache-httpclient

Good luck!",1537062359.0
Kollektiv,Use agents and a keep-alive header.,1537051094.0
phouri,Or http2 now out of experimental in latest node 10 :),1537048460.0
habanerocorncakes,"You cant reuse an http connection once it has been closed. You can stream a response from the server, which keeps a connection open. Specifically Im talking about an HTTP response body stream, although this is a fairly rare pattern in API’s these days. 

Enter websockets, which are an extension of HTTP. You make a request to the websocket server (socket.io is a very popular node library for this) to connect to the socket and subscribe to updates. The connection is kept open until the server or client closes it. 

One big advantage of websockets is you get what is called a “duplex” connection, meaning you can both receive data from the server, and send data from the client to the server over a single connection. You might not need two way communication, but regardless, websockets are the go to choice with javascript and maintaining a long running connection to the server. 

Although thats beside the point, the real question is why do you want to avoid another handshake? Websockets are great for realtime applications, and reducing the overhead of sending a high volume of requests, but Im curious what youre specifically solving for here. 

Websockets could be the solution, or something else depending on why you want to reduce the number of requests and what your app is doing. ",1537047134.0
noknockers,"As the other comment said, use websockets. 

They're a persistent connection, but by default they don't wait for a response. So you'll have to install another package to get a similar request-response model to how an Ajax request works. 

But you don't really need that, just a single connection with a single listener on both ends. 

Use that connection to fire off requests. Listener at the other end received the request, does it's work and then fires the response back through the connection. Listener back on the other end receives the data. ",1537047799.0
stberlin,I believe you will be happy with `socket.io`. [Here](https://socket.io/get-started/chat/) you can find examples of usage. It's really simple and helpful. ,1537058277.0
empty_other,"If you can open the minified version in chrome debugger tools, click Ctrl+G to open a ""type a number to go to that line"" input box. Input your line number, the colon, then your column number (2:502421) and press enter. Chrome devtools will place your cursor at that line and column. Then click on the ""pretty print"" down on the left side (the {} icon). Chrome will format your code, and the cursor will follow.

But if the minified source file is too long, chrome will freeze for a while when opening it. So does every other browser's source code viewer i know of.",1537060917.0
EyeballMond,Why would you want to undo the changes made by gulp?,1537044028.0
astrangegame,I think the way you use CAs is incorrect. This seems to be close to what you are trying to achieve https://gist.github.com/pcan/e384fcad2a83e3ce20f9a4c33f4a13ae and explains how to generate certs etc.,1537029706.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [TTL\/SSL handshake failure error](https://www.reddit.com/r/javascript/comments/9g06vc/ttlssl_handshake_failure_error/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1537003535.0
albemuth,I've had issues like this with .net code and it was due to system wide registry settings for allowed TLS versions on Windows.,1537008132.0
electrofeline,You're showing usage of SSLv3.  Here glance at https://blog.pauby.com/post/force-powershell-to-use-tls-1-2/ for quick info.,1537008873.0
carlosnufe,"We use Sendgrid at work, works pretty well, the integration was simple as install a package wrapper, set API keys and use the send() method. You have alternatives like MailChimp. They all could have an overkill of set tools but the easy way of applying I'd say it worth the earned time of manually implementation ( speaking about more o less having templates for your few cases )",1536999210.0
tucks_the_eskimo,"Sendgrid was very easy to setup in my project, also very easy to setup the templates for the emails through their site. 

I can't say I've ever used an alternative, but That's mainly because sendgrid is so easy to use.

I would assume mailchimp has something similar just because it's pretty popular.",1537027425.0
johnfrazer783,"Came here to say that I've been using multer for a while and I'm disappointed and am going to dump it b/c **1** I find the API too convoluted, **2** file size checks are done by looking at the size of the file on the server *after* the upload has completed (i.e. when it's too late), **3** file type checks are not done by looking at the uploaded actual bytes, but by looking at whatever filename extension the uploader chose to provide. In other words, when you use multer anyone will be able to upload any kind and amount of data to your servers. There will always be ways to p*wn a server but this is making things a bit to easy IMHO.

",1537008144.0
verimour_cto,"Where you have: 

    colData = JSON.stringify(data);

replace it with:

    colData = JSON.stringify(data, null, 4);

The third parameter will add 4 spaces of indentation for each level of your JSON.",1536952133.0
kwiwksh,\`saveData\` should take the data in as a function argument.,1536952209.0
jgordon615,"Author needs to learn more about express and adjust the article.

get, put, post, and delete are not middleware; they are routing functions, and the middleware chain doesn't end when something calls a terminating event.  It ends when something doesn't call next().
",1536961172.0
broofa,Conspicuously absent: How error handling works in middleware.,1537006174.0
antoaravinth,"Shameless plug, wrote a tutorial on how express works underneath: [https://github.com/antsmartian/lets-build-express](https://github.com/antsmartian/lets-build-express), sometime back. 

Take a look and let me know what you feel!",1537158691.0
evertrooftop,"That's a lot of text and lots of good detail, but the tl;dr is that AWS Lambda might not terminate your node.js application and call your handler more than once for multiple invocations. Everything else behaves identical.",1537012089.0
apatheorist,"Two years from now:

> Moving back to NodeJS from Go

Story as old as time.",1536949126.0
ikhos,"I don't understand why they did it, but I'm really surprised by how long this PR took, around two years.",1537015229.0
poom0nster,"Check out ngrok, it will be free for your use case. No setup, no additional server costs or management, no tinkering with the router. ",1536946256.0
angusog7x,"Store your commands in an S3 bucket, then have your Pi poll the bucket every second or so for new items.",1536985862.0
JK33Y,"if it's on your home network, why not connect to it using RaspPi\_IP:NodePort while you're connected to your home network? I'm able to connect to my node servers via my local network on my phone this way. no messing with ports. You can find the IP of your Raspberry Pi by running `ifconfig` on it.",1537039003.0
kryptkpr,Any managed IoT will give you a persistent MQTT message broker you can connect devices and applications to and do pub/sub messaging.  Most are free on the low end of usage.,1537234681.0
akujinhikari,It's basically just bash/bat commands that creates files and writes to them.,1536948682.0
Gnome_0,explain ? cli in what ?,1536938176.0
luizcarraro,"Angular-CLI is a command line interface that whas forked from the original Ember-CLI project. 

&#x200B;

You could check the Ember-CLI repo on Github and get some inspiration 

&#x200B;

[https://github.com/ember-cli/ember-cli](https://github.com/ember-cli/ember-cli)",1536946546.0
el-noppo,Check out oclif ,1536956186.0
vue-rocks,"You can always focus on your overall software development. Look into clean code, tdd, clean architecture. But I found messing with web sockets pretty fun. I’d also recommend looking into some general backend security. ",1536921729.0
abdulimr,What about rendering dynamic pages and logging users in with JSON web tokens? That’s a great thing to know.,1536923887.0
theTypeScripter,"OvernightJS, [https://www.npmjs.com/package/@overnightjs/core](https://www.npmjs.com/package/@overnightjs/core)",1537248180.0
stberlin,"It depends on your desires. 
If you want to be able to create RESTful APIs, you should learn Express.js || Koa. If you are interested in terminal apps, probably you need to learn how to work with `command` npm module. 
Also, you should know how to work with:
- DB - `Sequelize`
- RabbitMQ - `amqplib`
- Kafka - `node-rdkafka`

and so on...

I recommend you to find a mentor, who will adjust you and give perfect pieces of advice. Good luck!",1537058904.0
TaskForce_Kerim,"No, you don't have to use MongoDB with Node.js, you can access most other databases, includeing Postgre, as well.

ActiveRecord is a (basically) an ORM. There are ORMs out there for Node.js, as well. [This](https://github.com/PhilWaldmann/openrecord) one is inspired by ActiveRecord but there are others, as well, like [this](http://docs.sequelizejs.com/) one.",1536918940.0
kyle787,"TypeORM is another good one. It has active record as well as a data mapper. 
https://github.com/typeorm/typeorm",1536929992.0
stberlin,"Actually, you can use the [Loopback framework](https://loopback.io/doc/en/lb3) for it. This framework based on Express.js and has its own ORM and you can easily set it up for your needs. [Here](https://loopback.io/doc/en/lb3/Database-connectors.html) the list of DB it works with.
All that you need is define models and use a particular connector. It can be `MongoDB` or `PostgreSQL` or even your own. ",1537061051.0
,[deleted],1536953140.0
Hate_Feight,"Try traversy media on  YouTube, he has a very good way of doing things and you can follow along with some pausing",1536950216.0
squizyt,I find udemy tutorials pretty cool and well explained. Especially because it is community driven. Had some reactjs tutorials before and they are good. I suppose you can find decent nodejs tuts. Hope it helps,1536918017.0
Hate_Feight,"Try traversy media on  YouTube, he has a very good way of doing things and you can follow along with some pausing",1536950227.0
cm_yoder,following,1536954190.0
BTMPL,"There's no other option than push notifications. An app using JS (PWA, React Native) when put in background would otherwise pause and no JS is executed.",1536927056.0
verimour_cto,"As u/BTMPL said, Push is your only option for when the app is in the background or not running at all.
 
In our app, I am using Socket.io for chat/notifications when the app is in the foreground, and Push any other time. It could be done exclusively with Push, I guess, but Socket.io is faster so I check for an active connection and use that, and fall back to Push (using node-gcm).

Because everything has to be saved to the database, too, all messages, whether socket.io or push, are sent from the server, never from the client side.",1536969112.0
tswaters,"Based on the readme, `contact-stream` takes all the data and puts it together.  You can do this yourself with the following --

    const chunks = []
    res.on('data', chunk => chunks.push(chunk))
    res.on('end', () => {
      const data = chunks.join('')
      // do stuff
    })

Piping a stream basically passes it to whatever you pipe it to.  Think of it like water (data) coming out of a pipe (stream), you can connect this pipe to another one -- and that's basically what `pipe` function does....  `stream1.pipe(stream2)` -- stream2 now has stream1's stuff.

In this case, the `concat-stream` module attaches various handlers to the stream to collect all the data and invokes a callback with the combined string, `data`.

It appears to do more things - like the ability to combine different things like arrays and buffers.",1536904805.0
trollboy665,That “There was a problem with your request was pretty performant.,1536893731.0
Kmantheoriginal,Heroku,1536897960.0
rkdnc,"Heroku, to a certain degree of traffic. There's also [opennode](https://www.openode.io/pricing), but I've never used them.",1536899918.0
Huligan27,I always go with digitalocean. 5$/mo but for your own host but they charge by the minute or something close to that so spinning up instances and testing is pretty much free,1536910830.0
nesticle8bit,Thank you guys for your replies!,1536964185.0
shakefu,Always upvote Valeri ,1536895749.0
code_barbarian,"Hi, Mongoose maintainer here, thanks for the interesting thoughts!

&#x200B;

Validation, casting, population, middleware, custom statics/methods/query helpers, and plugins are the most important features Mongoose offers over the native MongoDB driver. Don't underestimate how tricky type casting is when it comes to MongoDB queries - $in, $near, etc. If none of these features are valuable to you, then by all means use the native driver. Libs like [Archetype](https://www.npmjs.com/package/archetype) offer Mongoose-like casting and validation without all the additional features. Even I don't use Mongoose for 100% of my apps :)",1536886645.0
sudokys,Mongoose is the shit. ,1536886992.0
davidmdm,"I mean that's what I do for a living, but I don't have any examples that isn't company code.",1536985712.0
fabioSalimbeni,NIce post and very interesting reading. I wonder if a section about testing can be added. ,1536914222.0
Gazzooks,"Clear and Concise, Loved it.

I went to your website and could you make a post on using node/express/user registration/email verification and possibly authentication? I ask this from you, as I enjoy your style of writing.

&#x200B;

Thank you",1536916271.0
nothingduploading,express is dead. strongloop killed it.,1536862354.0
manshahia,"You don’t need to do JSON.stringify to access object property. 
Just use
JSON.parse(json);",1536860667.0
El_Stump,"Have you tried changing that .txt file into a .json file and running something like

`fs.readFile('decodedjson.json', 'utf8', (err, data) => {`

  `if (err) throw err`

  `else JSON.parse(data)`

`})`",1536868534.0
justanuser94,"Try with the package `fs-extra` and load it with `fs.readJsonSync('decodedjson.txt')`, then you don't need to use JSON.parse or JSON.stringify. I don't know what your problem is but, try to remove the utf16le format, and see what happens.",1536861740.0
Zarko34,"You can just require json files, no need for fs",1536913013.0
,[deleted],1536874688.0
skaz68,"Definitely remove them. If you are not going to use the files on the deployed app, there is no reason to keep them there.",1536859925.0
fluffyday,"When you deploy to a production environment, usually you have *NODE\_ENV=production.* Having this environment variable affects to performance in a very good way, and libraries use to take this variable into account (example: express).

Told that, when NODE\_ENV=production, npm install the dependencies but not the dev dependencies, so the tests runner will not be installed in the prod environment. So, why having tests there?",1536874538.0
kbpp,"Hi, 

I'm Koby Boyango, a senior researcher and developer at mce, and I've created [node-jsc](https://github.com/mceSystems/node-jsc), an experimental port of node.js to the JavaScriptCore engine and iOS specifically.

The project also includes [node-native-script](https://github.com/mceSystems/node-native-script), NativeScript's iOS runtime refactored as node-jsc native module, allowing access to native iOS APIs directly from javascript.

See the [iOS Demo Project](https://github.com/mceSystems/NodeIOS-Demo-Project) for an example of using both node-jsc and node-native-script.

Feel free to check out our repositories, ask me anything or share your ideas\\suggestions :)",1536845085.0
tclineks,The fact that there is a commercial process manager in the node ecosystem is making me roll my eyes.,1537044127.0
fluffyday,"Node comes with core http library, where you have http.request:

[https://nodejs.org/api/http.html#http\_http\_request\_options\_callback](https://nodejs.org/api/http.html#http_http_request_options_callback)

On the other hand you have libraries like axios, request, superagent... given the fact that all internally uses core http.request, all are slower. If you don't want to use the core one because you want more functionallity, the faster one is superagent, followed by axios and then request. You can check it creating a suite with benchmark and testing all the commented options.",1536842919.0
davidmdm,"For backend jobs I would use the request lib. It's the only one that lets you get the data streams from your requests, which if you have that kind of need, you can help keep your apps memory footprint low, and overall performance up. Plus it has a lot of features and is probably the most mature http lib in the nodejs ecosystem. 

If that one doesn't do it for you then you can make your own abstraction over the nodejs core http module. ",1536895361.0
satya-ko,Any tldr on how it’s happening?,1536842355.0
BrilliantBear,Pnpm got a shout out in the white paper.,1536868046.0
iamLurch,"Very cool, does this mean you can check in the dependency file to version control? Just like yarn.lock?

As much as I hate node_modules, there are times when I want to see how a library is implemented. Is there a way to have some libraries in node_modules? Say only the ones in listed in the package.json file",1536858652.0
download13,"This would be super cool, but I'm wondering how compatible it'll be.

There's a lot of tools that make assumptions about the contents of `node_modules/` that might break when they run into this. I've even seen monorepos that do things like `require('./modules/submodule/node_modules/common_dependency')`.

It seems to work by monkey-patching `require`s resolution function, and I'm hoping that will work with `import` directives too.",1536858946.0
joesb,"Check the document. 

If it returns Promise or takes callback, it probably is asynchronous. 
",1536840526.0
floodlitworld,"You’ve used an event emitter with it, so it’s obviously async. ",1536850767.0
joesb,Virus scan?,1536817398.0
Charles_Stover,"Do you have the same issue with `yarn`?

This is a long shot, but you could move the `npm` installation directory higher in the hierarchy of your `Path` environment variable.",1536847313.0
neilhighley,Install sysinternals via Choco and use procmon,1536826868.0
seasmurph,"Are you seeing any abnormal/high activity levels in the task manager?

Could this just be attributed to the normal windows slow down? How long have you had windows installed?
",1536828012.0
fluffyday,"I was going to ask if you're behind a corporate proxy, but it if takes time to execute ""npm -v"" I don't think that internet connection is related.

Things that you can test:

\- Deactivate Windows Defender and Windows Firewall only to do a test.

\- Check your environment path variable and make sure that the folder of npm is not at the end after a folder containing too much files or in a device that is not available (example, a net device currently disconnected)

\- Try to install nvm for windows, install node versions from nvm, and try npm

\- Try yarn?",1536842215.0
ramides,"Using WSL? The file I/O is really slow compared to native Linux, which really drags npm down.",1536895010.0
GrenadineBombardier,"Hopefully in php you were storing a hash of the password, not the password itself. ",1536805416.0
BTMPL,"> In PHP, I would just match the userId with the password in database and if it matched, I would start a session. 

You can do that with Node just fine.

PassportJS is more than that - it allows you to use oAuth features. You can have people logging into your website using Facebook, Twitter, Reddit, Google, Spotify, Discord etc. And this all comes prepackaged for you so it ""just works"". 

strategies are what enables different oAuth providers to authenticate your user - PassportJs has over 500 of them - http://www.passportjs.org/packages/

This way you don't need to worry about things like:

- registration form
- forgotten password form
- password security (from your description it sounds like you had none)
- various emails about ""please configm this email is valid"" crap",1536811937.0
vailripper,"If you're just doing basic local logins using a standard login form then Passport might not be necessary, assuming you know how to properly store passwords. If you're integrating with SAML, Facebook, Google, etc for logins, then Passport abstracts away much of the grunt work of integrating with those services. ",1536810630.0
himynameisjoy,"It should be noted that passport’s documentation leaves a lot to be desired, so you’re better off learning from examples.

Also bcrypt is commonly used because it’s fairly strong encryption for password hashing, though personally I went with scrypt instead",1536820119.0
NewFuturist,Because you are unlikely to create a login system that is resistant to typical failures of authentication and security issues. ,1536820788.0
bees_dolphin24,"My two cents, 

I am currently developing a full stack application with node js backend acting as an api and a SPA front end.

I will just share my experience: yes you are completely justified in that overwhelming feeling because of all that info, (i know i did) 

So what does passport actually do? 

So how i understand passport abstracts functions/methods you can use to  authenticate a user.


Why do I care? 

If you are building a server side application with a local login then you have the option to use it but really you don't have to, ypur right not to care.

But if for instance you are using the hot new thing jwt or maybe custom tokens that you will send back to the user and store as sessions (my case)  or even a more robust use case with Oauth for authorization with other providers such as google and facebook, then it can really ease that process, lets take the jwt example as it is pretty popular and used many a-times in single sign in methods with oauth.
 
Sorry pre-example: you can think of passport as the father lib that can support many times of special libs, called strategies to fulfil your requirement. So in this case let us go with jwt strategy.

No code since i am too lazy to write it on my phone but i will give you the layout( may update later)

You install passport and the jwt strategy. 
*Note you will need to do a proper login route where you do the whole check the fella under the db and hashed password (bcrypt short description in the end) thing. 

Step two using a jwt library create a jwt token and assign send it back to the client (browser or mobile) to store wherever,. 

Now your duty when writing the front end is to attach that token to the headers of each request that requires some form of authorization. Such as delete books. 
Most popular one might be the Bearer scheme where you
Basically just attach the token to the Authorization :Bearer <token>. 

The passport-jwt strategy within it has an extract from from auth header method, which does exactly that get that ^ token

The strategy further checks whether the token is valid (not expired or fake maybe) and then takes a step further where it checks whether the email encodedd in the jwt exists in the DB, if it does return the user details.


Now you can implement it without passport but you need to create a method to extract the token from the header check its validity probably using the same lib you created the jwt with and then do the check on the db.  But passport  with the kwt strategy makes this particular use case easier. 

Same with oauth flows,  so thats basically what it does

Ofcourse it has the local strategy if you want to use it and create a login form and sessions, nothing stopping you, at the same time you could just as easily roll your own. 

Tldr about bcryptjs is a pure js implementation of bcrypt lib which allows you hash your passwords before you stoe in the db( never store plaintext) there is also the regular bcrypt which is written in c++. You can check thier npm pages bcryptjs is like 30% slower or so, but bcrypt(nojs) might be a hassle to install (some other dependencies) its really up to you, point is (DON'T STORE PASSWORD IN PLAINTEXT)

Hopw it helps even a wee bit


",1536834503.0
tnonee,"What I never quite understood is why passport.js wants you to first register the strategy globally by name, and then refers to it by name when it's invoked in the middleware.

Why not just create the strategy and pass it to the middleware directly?

Can anyone here think of a good reason? I've rooted around its insides plenty of times, I saw none.",1536815531.0
kifkev91,"I don't really know why express-sessions isn't really recommended much, because it's pretty much straight forward.
Together with bcryptjs for encrypting your password, you can implement a login system in a few minutes with express-sessions. Defenitly worth taking a look into it.",1536828485.0
_drFaust,"You don’t need it, it just abstracts common auth handshake type operations. Also kinda seems to be a feeder lib for getting people to use auth0. 



If you do you prob want the jwt approach - https://github.com/themikenicholson/passport-jwt/blob/master/README.md



Otherwise just look up jwt best practices and roll your own. Hopefully you find this in your research but just ensure every request to your backend sends that jwt along with to be verified.


",1536807323.0
OmisNomis,"You don't have to, I created my own login strategy without passport; using JWT tokens. 

Passport is when you need other 'strategies' (Facebook etc). ",1536830922.0
bigorangemachine,"PassportJS is just a pattern to use with Express.

The documentation/examples out there don't make it clear how middleware works.

Read up more about middleware and Express. I am sure that'd clear up the passport magic",1536839951.0
habanerocorncakes,"What are you doing with the aws sdk in your code currently? 

",1536823576.0
Heimlink,"I implemented something like this [https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/](https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/)

&#x200B;

The idea is you have two tokens,

\- A short-life access token (e.g. 5 mins)

\- A long-life refresh token (e.g. 3 weeks)

&#x200B;

The client stores both tokens, from the server. The client never decrypts them, they are just keys so the server knows who you are.

On each ""access"" request, you submit the access token. However, once the access token expired, the server returns a 401 Unauthenticated error. Behind the scenes, your client then sends the refresh token, and receives a new access and refresh token, then resubmits the original request with the updated token. This process is transparent to the user.

Your client should never want or need to read the contents of the key. The purpose of the key is to store information that the server requires to respond to your client's requests.

&#x200B;

Hope this helps.

&#x200B;

Edit: Clarified a point.",1536804151.0
jkoudys,"The expiration is standard and set in the exp claim. Read your token client side (if you can) and check it. If the token can only be read server-side, setup an endpoint there and check it. ",1536792884.0
Hagermeister,I’m a bit of a beginner but couldn’t you include the time of expiration in the jwt?,1536792063.0
bigorangemachine,"I check JWT tokens on every authenticated route.

You can check a JWT on the frontend but you would be exposing your key",1536796612.0
FengShuiAvenger,"Your token will only be invalidated once it has passed the expiry time in the JWT’s expiry claim, JWT’s are just base64 encoded json, so checking the expiry is trivial, just decode from base64 and find the expiry field,( it might be called exp, and be in Unix time). As for validating the token, (checking it was signed correctly), assuming you are using RS256 your oauth provider should have a .well-known/jwks.json endpoint, which contains the public signing key. I’d recommend using a third party library to validate the JWT signature against the public key,(the signature is embedded as a field in the JWT). You should also check the audience claim matches your application. I’d recommend looking at jwt.io if you need a better idea of what I’m talking about.",1536812901.0
olafthehairycoder,"Edit: I see you're already verifying it on the server side.

Rather than every X minutes to prevent a 401, you can wait for the token to expire and then try to re-request a token from your authentication server and then send your request. This is how I have implemented it in React applications before.

Have a `getToken` access method that lets you get your token out of your auth utility library (assuming you have one. That method should check the expiry of the token. If it has expired, re-request a token from the authentication server, store it and return it. So that method will always return a token, whether the one at call was expired or not. If your request for a new token fails, it's time to log in again.

If your authentication server is Auth0 and you're using auth0.js there is a method checkSession that will get a new token and refresh token without fuss.",1536828955.0
joesb,"JWT Token should already have expired time (\`exp\`) claim.

From client side, you check that field.

From server side, you also check that field.

Make it a signed JWT to make sure Client cannot make up the token.",1536895043.0
OogieFrenchieBoogie,I've been looking for the same thing for a while now,1536789111.0
mospretmen,"Same here, I was looking for one with email authentication",1536790300.0
Ricjd,Would you want email authentication through sending an email or using oauth2 process with gmail and outlook?,1536808986.0
ilja903,Sails have starter template with email registration etc. If you extend express with feathersjs then there is a module: https://github.com/feathers-plus/feathers-authentication-management,1536816652.0
sshaw_,"High-level thoughts: 

1. A multisubposter-cli package implies there's a multisubposter package, but there's not
1. `multisubposter-cli -h` and/or `--help` should show usage
1. When prompting for username, etc... Control-C should kill program not issue next prompt
1. Allow one to set auth info via env vars
1. `multisubposter-cli` is not a good name for an executable. _At least_ drop the `-cli`, at most use something else: `subposter`, `msub`, `msp`, `mspost`... assuming these don't conflict with a popular exe. 

",1536812970.0
ecares,"Short answer: no.

Long answer: there is a terrible hack that should not be named nor even mentioned that can give you a synchronous loading

Decent answer: you actually don't need synchronous loading, you should just wait for these calls to be done before starting your server.",1536790414.0
Thehollidayinn,"You can use await or boot up your server after .then. For example:

    myModel.findOne().exec()
    .then(result -> {
      // Do stuff with result
      app.listen(3000, () => console.log('Example app listening on port 3000!'))
    })

or

    (async () -> {
      const result = await myModel.findOne().exec()
      // do something with result
      app.listen(3000, () => console.log('Example app listening on port 3000!'))
    })()

&#x200B;",1536773821.0
stevenscol,"if you use Promise.all() for that? This one can help you handling the requests in a synchronous way.

&#x200B;

**Promise.all Doc's:**

[https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos\_globales/Promise/all](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Promise/all)

&#x200B;

Or you can use async/await.

[Async/await Doc's](https://javascript.info/async-await)

&#x200B;

This last one is prettier than the promise alternative.",1536770671.0
Buckwheat469,This gives me a great idea for my [Norman node assistant project](https://github.com/ajbogh/norman)! I can set this up to make Norman a little more human-like while listening to phrases.,1536775830.0
enricksiii,wow!,1536789107.0
Nephelophyte,Interesting library from the same company that funded blockstream. I'd be interested to know why they needed this.,1536823813.0
soulsizzle,"Node and express haven't changed too much since 2014. Pretty much everything in that book should still apply. There are, however, a few language features that have been added in that time (like Promises, async/await, and es6). However, these features are improvements that don't render previous knowledge obsolete. If anything, learning from a book from 2014 will help you understand and appreciate the new features more fully.",1536761699.0
ikhos,"I think it is, it's one of the books that got me started, and while you may not see modern syntax, the concepts are the same and they are easy to translate once you understand them properly.

I still recommend it whenever someone asks me about learning node.",1536761548.0
elebrin,"Some of it will still be accurate, but node and express are both moving targets. I would look for newest guides, and if possible, guides to the NEXT version that will be released, specifically something online that is regularly updated.

Honestly this sort of thing is exactly why I stalled out/shied away on using Node for a few projects. It seems like there's a complete revolution in how things work every few months, and rewriting a massive codebase on that sort of schedule isn't a fun activity.",1536761532.0
manshahia,"Thanks for the replies everyone. I have one more question, i have basic understanding of front end tech and mobile app development but i am getting into backend for the first time. I was going through the chapter names and found a few that are new and look complex to me and i want to read/learn them in a more generic way.(probably from a different source)

 1. Cookies & sessions 2. Middleware 3. Routing in detail. What kind of book/tut do i need to follow? I want to clear these concepts beforehand. 
",1536767155.0
manshahia,Solved ,1538134764.0
xanflorp,These words you have strung together don't make any sense.,1536753399.0
SafetyMoose22,This sounds like a huge security vulnerability. If you need terminal access to your web app you really should be doing via a secure remote access method. ,1536754919.0
phlarp,"Please don’t do this. If it’s for an exercise, maybe. If it’s for a product, full stop. ",1536756212.0
rtorc,you could login to digitalocean and see what script they are using. They have a tool to access droplets from their site. ,1536757565.0
jmsecchis,"- Enable SSH in the server
- Establish a tunnel to the service you want to access. 
- Connect to the service with your favorite interface

For example, `ssh -L27017:dbhost:27017 user@server` allows you to access your remote mongodb at `localhost:27017`. Do this for any service you like and then you can run a browser-based interface to interact with your components. ",1536773761.0
JK33Y,"If your hosting package is for shared hosting, that explains why you don't have ssh access. Most shared hosting doesn't, and if it does it's usually jailed. Upgrade your plan to a vps. You get root access and don't have any restrictions on how the server is set up.",1537010859.0
nblgstr,https://github.com/dthree/vantage,1537037363.0
ecode311,"I use Lerna if I remember correctly that supports yarn as well, it is easy to set it up and fun to work with.",1536747397.0
sv-2,"https://github.com/slanatech/vue-monorepo-boilerplate
here is an example how to build Docker image from monorepo and then deploy as Docker container. Another option could be to publish all npm packages and then deploy as npm install. Lerna and yarn workspaces are used here. 
",1536763885.0
lol10801lol,"The obvious problem is how hash functions work - when you pack a big amount of data into a smaller string, you're obviously going to run into hash collisions sooner or later. https://en.wikipedia.org/wiki/Collision_(computer_science)",1536747369.0
robotmayo,Have you considered a uuid?,1536759836.0
latitudehopper,"I have. I'd clash is a known risk... I'm trying to marry up that with also using the IDs for filenames and keeping it short... Not ideal, I know. I would have thought that as the hash us based in the media item the clash risk is reduced.",1536760052.0
idoabamboozle,"No you will incur a storage “cost” on each file. To zip as one you will have to have those files to copy from them and the zip itself for delivery. 

Single file delivery is possible from other server because your only providing one stream to user. But if you want to manipulate you need to have copies on your server ",1536745621.0
roconf,I used [https://www.npmjs.com/package/zip-stream](https://www.npmjs.com/package/zip-stream) for this,1536835658.0
JK33Y,"Here's a project I made that takes a url to an album from bandcamp and downloads all the mp3 files and tags/renames the tracks AND zips up the files with the artist name and album name as the title. I think this similar functionality is what you're looking for. https://github.com/JK3Y/bandcamp-downloader/blob/master/public/js/magic.js#L24

Notice I used promises to download the files sequentially, then I zipped them up and downloaded it in the browser. I wanted to achieve something similar to how MEGA handles their downloads -- all in the browser for faster transfers.",1537011484.0
jkoudys,Didn't click the link. Just saw the clickbait title and became angry. ,1536737777.0
kvnpmrtn11,[https://github.com/helmetjs/csp](https://github.com/helmetjs/csp),1536714027.0
vv1z,"Create React App has some truly exceptional documentation, check out the deployment section for general options https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment...  with regard to http => https if you are cool with serving your app from express then you could use https://www.npmjs.com/package/express-http-to-https",1536712462.0
BarryCarlyon,"nginx with proxy_pass is my goto for SSL termination with a Express/NodeJS behind usually.

Leave Node to handle all the fun work and nginx to handle the SSL",1536764114.0
atomic1fire,I hope the treat dispenser is only active some of the time otherwise the internet will overfeed your dog.,1536705858.0
MusicPants,I love this project. I’m always trying to think of ways to use my main language (js) and IoT. Nice job. ,1536700660.0
GForce1975,"Great article. The link to your lighting system didn't work for me but I checked it out on github. 

It has inspired me to try and do something with mqtt ",1536699087.0
ryno,That is fantastic! lol love it,1536709777.0
aguyfromhere,Pretty unlikely you’ll find someone worth their keep willing to do anything like this for free. It’s a nontrivial amount of work but good luck. ,1536695391.0
DirtyBirdNJ,"If you want the work done for free, I suggest you start learning web development and do it yourself.

Not trying to be rude, but I feel this is a much more effective way to achieve your goal as opposed to trying to get someone else to build your idea.

I would be happy to provide suggestions on how to begin prototyping a project regardless of language, hosting provider or whatever. DM me if you want more info.",1536695838.0
roconf,I’m in. Shall we switch to something like Discord?,1536748632.0
phouri,"Best is to use a db, a small redis is perfect for this.

You *COULD* use file store but that would be super slow and can blow up.",1536687592.0
Max_Stern,Redis ftw,1536703655.0
nfriedly,"I always use https://github.com/expressjs/cookie-session for projects that don't have a database.  It limits you to a fairly small amount of data in the session, but I usually just have a userID and maybe one or two other small fields, so it's never been an issue.

If server side is important to you, then yea, as others have said, you'll need some kind of database. I'm also a fan of Redis, I've used the redistogo free plan on a couple of small projects: and never had any problems: https://redistogo.com/

SQLite is another good option if you don't care about scaling. It's literally just reads and writes from a file, no separate server or process.",1536695023.0
ItalyPaleAle,"Great that we have bigints, and I can think of many use cases. Now, if only we had native 64-bit integers in JavaScript... (BigInt can be used to represent 64-bit integers, but it’s more than that, and data is represented as a struct in memory)",1536728864.0
iqover190,"I think developers should stop development of a product at one point. It has two avenues.

First, product is mature and does not require daily or even monthly upkeep.

Second, developers should be allowed to abandon software when they are bored with the project; without posts like these trying to capture eyeballs.",1536678057.0
mansfall,"There is so much information lacking here that no one could possibly give you an answer.  Please provide what you've done, code snippets, tech stack used, etc.

It all depends on what you have going on...",1536694411.0
scttmthsn,I think you should have called it linguini...,1536669902.0
TorbenKoehn,"That usually depends on the size of the content in your tabs. The bigger the tabs content, the more useful it is to separate it into different pages or feed them with an api.",1536654363.0
dethwhores,I’ve loaded 30mb of data and stored it in my top level App component so I can load my pages faster. Worked well for me,1536666325.0
PlNG,"Oh, that must be why I was contacted about marketing and asked to contact them on telegram. It's probably a proxy bot.",1536682087.0
OzziePeck,Another query builder?! Oh ffs. ,1536651824.0
XiMingpin91,"I personally prefer Hapi, but there's very little between them. If your team don't know either, maybe it's best to go with Express because there's lots of resources to learn from out there. I think Hapi's API is a bit more intuitive than Express, which isn't bad by any means, Hapi just clicked with me.",1536656463.0
ktastrophic,"You should evaluate frameworks based on your team/company/personal needs not based on whether or not your environment is “enterprise” or not.  In my experience hapi gives you more functionality within its defined ecosystem (joi, lab, etc). This makes it easy to have consistency between multiple apps and teams. Two hapi apps are much more likely to look the same than two express apps. The sacrifice is that with express you have a much larger community and all the things that come with that (more middleware (plugins), updates, security patches, etc). ",1536647843.0
HatchedLake721,"Hapi. Express is just a glorified router. And there’s nothing wrong with that. But I don’t want to mess around implementing caching, scopes, auth, etc myself. Plus debugging middlewares is quite a pain. Hapi makes you more productive out of the box. It’s been my choice for years after Express and Restify.",1536659267.0
merb42,In the node world you see a lot about express. I myself have only used it for api's. I would be curious to see more oppionons comparing the two. ,1536647204.0
ChrisCodes,It’s all based on personal reference man.  If you are into an API look at Fastify which gets down to the bare metal while providing a good framework ,1536655967.0
davidnagli,It’s gonna be a lot harder to find developers already familiar with Hapi in the U.S. so that might be an important factor unless your team has prior experience and doesn’t care too much about onboarding cost / technical debt,1536656823.0
,why slack around when you can join discord,1536630418.0
Weastie37,Personally I'm not a fan of slack. No reason for it to be closed source software. ,1536664572.0
quizasquizas,"> Slack is trending

Where?

Actually, it's on its way out.",1536649490.0
Str4yfromthep4th,Slack is a legit piece of shit,1536631877.0
foocux,If it's a servers side algorithm nobody can see it unless they have access to your server or you uploaded to a public git repository.,1536642464.0
boon4376,Is it a server side algorithm? ,1536634231.0
paulcarron,"The `.authenticate` method does not accept a `baseUrl` parameter. You have to add it to the Octokit constructor, see [https://github.com/octokit/rest.js#client-options](https://github.com/octokit/rest.js#client-options)

&#x200B;

Here's an example from my code:

`const octokit = require('@octokit/rest')({`   

`baseUrl: 'https://api.github.<my domain>.com'` 

`})` 

`octokit.authenticate({`   

`type: 'basic',`

`username: 'my@email.com',`

`password: '<my personal access token>'` 

`});`",1536734391.0
nowtayneicangetinto,"Great post, thank you! This was actually floating around my mind today at work. ",1536635630.0
everlong241,"I dont understand why these guides are so popular. They always include three things you probably shouldnt use (Mongo, JWT and an ORM). I advise PostgreSQL, cookies and (Raw SQL + maybe Knex) instead.",1536646271.0
developero,You're going to have a very hard time if you don't know any javascript,1536607774.0
LivingAnywhere,Well I would skip mongo I think and just use postgress. Quite more applicable I think. Also depends on what you want to use your skills for!,1536604151.0
XiMingpin91,"I mean you do you, but if you don't know how to code you're going to have a really tough time",1536613394.0
dr_steve_bruel,"It will take time and dedication but I started learning JavaScript and node at the same time. You'll definitely need to thoroughly learn JavaScript continuously as you pick up more node concepts. 
Now I have a good understanding of JavaScripts prototypal object oriented nature and a lot of the concepts I learned from using node are making a ton more sense. 
All that being said, when you get into using html templates and are creating the front end of your application, a little dom manipulation could come in handy. ",1536614323.0
RespectableCafe,I did this. I think it's the right way of going about it. Do a course in full stack web development. it's much easier to learn it all at once instead of in dribs and drabs.,1536624342.0
kryptkpr,"Jumping into backend with zero frontend experience is not a good idea, no.",1536610740.0
hydroes777,Shengflabla Iris kebab shrenglihah,1536610119.0
moustachedelait,"I just started it up, launching, break points, call stack and inspecting vars all work well on my first try.

Has some neat other feature that it make it worth exploring",1536855781.0
mogsun,"By far the easiest time I've had so far in node debugging!

Really enjoyed having the debugger separate from the editor, it just felt cleaner.

Anyone had a chance to see how well this plays with typescript + ts-node or similar? ",1536880438.0
Hydrotechnics,"What is the entry point of your server code? App/Server/Server.js? Or index.js? 

Check line 5 of package.json and make sure your app entry is correct. Let me know how it goes! ",1536589554.0
kenderpl,Read something that might be just right for you - https://blog.makcorps.com/2018/09/your-nodejs-authentication-tutorial-is.html,1536584967.0
fupower,"MySQL drivers for Node.js:
https://www.npmjs.com/package/mysql",1536584925.0
fistbumpingjunkie,"Just got finished messing with user authentication for the first time. I used passportjs and a sequelize orm. 

https://code.tutsplus.com/tutorials/using-passport-with-sequelize-and-mysql--cms-27537

It was super tricky working with it for the first time but this link helped me get started. Good luck! ",1536609575.0
spazz_monkey,"A bcrypt module will be helpful when it comes to storing your passwords, it's very simple to use. 

passport.js is also very helpful but you could write your own middleware if you wish to give yourself a challenge, but you know, DRY and all that. ",1536603668.0
feenix111,Is PayPal using no sql db?,1536620037.0
ItalyPaleAle,"Don’t do that. User above posted a good link on why authentication systems are hard. Also, authentication shouldn’t be part of the same microservice as your app.

Use a separate identity provider, then have your app authenticate via OAuth/OpenID Connect. My preference is to rely on things like Google Accounts, Azure AD, etc, as they offer huge benefits, especially in terms of security (they have data for millions of users, so they can use AI to protect you better; they also support MFA, etc). If you want to self-host your identity provider, check out Hydra: https://github.com/ory/hydra",1536700754.0
vatselan,"Throw in a sequelize or if using typescript typeorm for object model to db table mapping, then you can use passport.js for setting up the authentication it supports social too. Or make turn key solution using basic query logics. Create user set email, passwords, etc. If you are new to Nodejs world remember npm is your good brother seek his help if you get stuck somewhere he has many friends too 😁",1536602074.0
,[deleted],1536585217.0
PsychedelicL10n,"It depends on your data storage. In a relational database you would create a table of posts with a foreign key reference to a user. You can serialize this however you think is best once it comes out of the database, whether that be keeping it as the same mapping as the database layer or making posts an array within the user model",1536546999.0
haytherecharlie,Even in a non-relational/document store like mongo/postgres/firestore id make a collection of “posts” separate from the “users” collection. This way the posts can persist even if a user deletes their account. You can save the uuid in the post object for reference to what user posted. ,1536558249.0
Razhan13,"Definitely separate those two, mongodb documents have 16 MB limit of size

in your case or even having comments on you post, referencing is much better than embedding",1536558137.0
Muppetmeister,"Well if you’re gauging good database design this would be bad in terms of normalization. 

Basically what you wanna avoid is the presence of multivalued attributes (posts) because it would lead to redundancy. In this instance, posts would have a functional dependency on username/id (i.e. username/id -> posts) in your relation/table. Yet assuming it has other non primary attributes you would have to “repeat this data” just to identify a single value posts. 

Sorry if confusing (I wrote this up quickly) but if you want a further explanation I’ll be happy to explain! 

Also, if you’re interested look up normalization in databases. What I mentioned was so called 4NF. ",1536568845.0
Tuckinatuh,"If you’re using a relational database then read https://en.m.wikipedia.org/wiki/Third_normal_form

If you’re using some NoSQL store you’d still want to separate these two things. ",1536570916.0
ipullstuffapart,"User has many Post identified by Post, on update cascade, on delete set default.

Have an FK in the Post table referencing the PK of User table.

If your PK is not a incrementing or generating key, such as having usernames as a primary identifier, the on update cascade is necessary if a user changes their username. On delete set default to something 'out of range' such that you can preserve posts once a user deletes their account (if you so choose), such as in reddit where you see [deleted] as a username.

When sending the data back to the client, I like to use a format adapter like [JSON API](http://jsonapi.org/) which flattens things out and keeps things consistent and easy to parse and unparse.",1536583696.0
theigor,"There are some good comments in here about foreign keys, etc but I want to add one more thought - possibly, you want neither. Think about down the road - maybe a user has thousands of posts. Now you're going to want paging, sorting, etc. So you definitely want this in another table and on the code side, you might not want it as an array member on User model. ",1536584185.0
xcanchal,Separate,1536604005.0
PM_FLUFFY_KITTENS,"I shall assume you are talking about databases and not http requests :)

You definitely want to separate the two. Think redundancy, and how you can eliminate it. How would you go about fetching all posts in your db for instance? You'd have to walk thorough all users and fetch their posts and combine into one array of you saved them on users. What would happen if you wanted to add a field to posts?

One table for users. One table for posts. Reference the user id in the post.

Try to draw a diagram of your database and see if there are any more arrays or objects within objects. Those can also probably be made into separate tables :)",1536560607.0
Sixes666,"I would make posts an array on the user object if I were using CouchDB. Then I would create an index or more on posts with, say date.

Using SQL, I would do it the other way.",1536567716.0
griff0n,This is fantastic ,1536525583.0
claytonbez,Seems like a great way to do things. Had to manually build these type of processes in the past. Took me forever. Will give this a go and report back. Looks very easy!,1536555818.0
SnowyMovies,This is awesome! Any plans for typings?,1536558685.0
EarlMarshal,"This sounds like a pretty arbitrary question with a way to wide variety of possible answers. Also the golang part seems really unrelated to the problems of nodejs. I still try to show my point of view.

JavaScript together with nodejs provide a very powerful way to create scripts, tools, applications and servers in almost no time. Due to it's nature it's very easy to pick up but has a lot of optimization potential if you get to know it better. The environment is also constantly changing with the introduction of new ecmascript versions, frameworks and statically typed version of js (e.g. Typescript). It's great for the stuff it was intended for and it's also great for a lot of stuff it grew into. Native modules is one of those things! You can probably rewrite a lot of old C libraries in nodejs and could get quite good new tools but it's just way easier to utilize the mature and well tested libraries. Why rework everything if you can just put a wrapper around it and use it? Just utilize the low level language to extend the high level one since it is the right tool for the job.

So in my opinion it's not a shortcoming but a feature.",1536543904.0
Ryan9104,https://www.reddit.com/r/node/comments/9c5ywu/nodejs_v10_bug_causes_all_timers_to_stop_firing/,1536522098.0
MrStLouis,"I'd recommend saving it to a dedicated storage drive, preferably not on the and machine but doesn't matter for dev, and save the file location in Mongo",1536509435.0
sldomingo,Mongodb storage space will be always more expensive than file storage. Use your disk or better a CDN to store your documents and use Mongo to store the file location.,1536511559.0
AngularGuru,"You can store small files in Mongodb as a BSON document (up to 16mb), to store anything larger would require you to use GridFS (https://docs.mongodb.com/manual/core/gridfs/).

Another alternative is to just store the file and contain a reference to the file in the database.
For this approach you could try using this library:

https://github.com/expressjs/multer",1536509422.0
CSS_Programmer,You could try saving it to the same directory as your index.html with a PHP script. I am sure you could find one on stack overflow as I am still pretty new to web development as well.,1536528179.0
goorpy,"Google cloud storage will give you a free forever bucket and then reasonable costs beyond that. Also has great node package for integration.
",1536560529.0
acdota0001,Looks legit bro! Keep it up :) I will try to use it on my API gateway testing :D [https://www.pogsdotnet.com/2018/09/defending-microservices-using-rate.html](https://www.pogsdotnet.com/2018/09/defending-microservices-using-rate.html),1536508175.0
ComfortableSherbert,nice!  I have a feeling this will come in handy.,1536514373.0
mrjking,Looks a lot like Artillery https://artillery.io,1536512690.0
hegemonsaurus,"D3 Network Graph may be?
http://bl.ocks.org/jose187/4733747",1536506765.0
broofa,"[https://github.com/mdaines/viz.js/](https://github.com/mdaines/viz.js/)

Just install it and don't look back.  It's cross-compiled from GraphViz, which is pretty much the canonical solution for directed-graph visualization.

I've looked at a lot of DG libraries over the years.  You'll find many that have cleaner APIs, or draw prettier graphs, or that do fancy animations, but viz.js does layout right, and provides the knobs needed to customize layout where desired.  It also renders to PNG, SVG, or JSON so allows for lots of integration options.  FWIW, I prefer the SVG format in browsers, which makes it easy to add custom styles and event handling.  (Viz.js is what I use for. [http://npm.broofa.com](http://npm.broofa.com), btw)",1536514454.0
,[deleted],1536506999.0
nothingduploading,You need to follow redirects in axios.,1536474677.0
Str4yfromthep4th,"When you say you get nothing back in the response object, do you mean literally the object is empty? Eg var a = {} ?",1536470076.0
nothingduploading,you need to server a 301 http header with a redirect url.,1536465296.0
habanerocorncakes,"As you have noted, the API responds with a 301 redirect, I think axios automatically follows redirects so that should be taken care of. 

However, the doc for the API mention that the streaming API is using HTTP Streams. These are quite different then the request/response pattern for non-streaming HTTP calls. 

Youll need to tell axios the ‘responseType’ will be a stream, which should pass a readStream back in the data property of axios response. 

Working with readStreams will not be immediately intuitive, so you should look up some examples of this.",1536474134.0
VBSisHorrible,"Yes of course that package would work. To be honest I'm confused why you're asking, first try at using Node and just not sure what you're wading into?",1536474009.0
Rizean,"To answer your question, yes. We use ssh2 in production with close to 1k connections per day. As to file transfers, yes ssh2 can do  scp if I remember correctly. We don't use it for that. Just go check the ssh2 repo. They have good examples and docs.",1536547643.0
ddwrt1234,Yarn caches packages... but I believe newer versions of npm also do this now,1536463154.0
Charles_Stover,Installing CRA globally will do just that: install CRA. The dependencies of a React application still have to be downloaded when you create the React app.,1536467112.0
OzziePeck,Starts with a Y. ,1536498632.0
wyled,"Not sure why you need to constantly re-install the app for local development, but for CI/CD there is the new `npm ci` which uses your package-lock.json to directly pinpoint versions instead of looking up what the best available version is based on your package.json. The other option is to use `--save-exact` when you install and it should be much quicker when npm does not have to make additional calls to install packages.

As others said using `npx create-react-app <my-app>` is just going to create a simplified bundle for you that has `react-scripts` in it. React-scripts is pretty large and has a lot of dependencies, so if you're on a slow network that could take some time. Typically for me at home or the office though, installing does not takes more than a minute or so at worst.",1536501222.0
habanerocorncakes,"What exactly are you stuck on?

Theres a lot of good [tutorials](https://medium.com/@Moonstrasse/how-to-make-a-basic-html-form-file-upload-using-multer-in-an-express-node-js-app-16dac2476610)  [for](https://alligator.io/nodejs/uploading-files-multer-express/)  [this](https://www.ibm.com/developerworks/community/blogs/a509d54d-d354-451f-a0dd-89a2e717c10b/entry/How_to_upload_a_file_using_Node_js_Express_and_Multer?lang=en) 

Is your question how to handle, at a single route, saving the file and then saving the data from the form as well?",1536476128.0
virtulis,"No idea about multer (I should probably stop using formidable but hey it works).

On the client side all you need is to post a vanilla XHR with [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects)",1536476914.0
devilmoldova,"Try using axios, sent it using FormData",1536544761.0
janguianof,"wonder the same thing that you....what I did was move the validation to the controller, something like this:

    expressJoi = require('express-joi-validator');
    
    exports.reset = function(req, res) {
    
        var userSchema = Joi.object({
            email: Joi.string().required()
        }) 
    
        var ret = Joi.validate(req.body, userSchema, {
            allowUnknown: false,
            abortEarly: false
        }) 
    
        if (ret.error) {
            res.status(400).end(ret.error.toString());
        } else {
            res.status(200).json({message: message});
        }
    
    
    }

Not sure if it is the best way, I am a very junior backend dev...let's wait to see what others recommend",1536453385.0
Gnome_0,"what are you doing there is called a middleware but the thing a dont get is if you are using checkEmail() with next() or if is only a function that returns a boolean (if you are doing this then is wrong) so if you want it to move to a controller you should do something like this

    userController.js
    
    const userReset = (req,res) =>{
        if(!(check(req.body.email).isEmail())){ //im asuming check email  returns a boolean
          return res.status(422).send({message : 'invalid email'});
          res.status(200).send({message : 'ok'});
        }        
    } 
    
    module.exports = userReset;
    
    then you can require it in your route 
    //routes/user.js
    
    router.post('/reset', userController.userReset );

an adviace if you know something it's gonna fail make it fail  so is more easly to debug and you can avoid nesting  elses (it helps a lot when you are working with nested promises)

&#x200B;

&#x200B;",1536457674.0
NetOperatorWibby,"Links to code:

-	https://github.com/sagi/node-dns-over-tls
-	https://github.com/sagi/node-dnstls",1536452179.0
virtulis,Does this open a separate TLS connection for every query? ,1536476587.0
ComfortableSherbert,"Hi all, I wrote this library.  I hope it can spark a conversation about end to end testing in javascript with selenium. 
Any feedback or criticism is also appreciated!",1536452750.0
zork_el,"Actually, NodeJs is quite different from client side Javascript in that respect. Node follows the modular approach in that each file is treated as a different module and all the variables defined in that file are local only to that file. Now if you want to use a particular functionality defined in such a file, you need to export it via module.exports and import it using require('path_of_file'). Then(and only then) will you be able to use it externally. 

",1536434057.0
Ender2309,"Two factors at play here. First is that you're using a REPL, second is that you're using var. Neither alone is enough to reproduce the behavior you're describing, it's a consequence of both. var is function scoped, and within the REPL the immediate highest scope is the global. So anything you define via var will actually be an instance on the global object (inside the REPL). 

If you write the same code into a .js file and call that file from node and try to log global.test you will get undefined. this is because the code's highest scope is now the module object, and so it will get hoisted to the top of *that* scope. 

If you change the declaration to const or let, it will not attach to the global object, but will still be available within the global scope. This is because these declarations are block scoped.",1536444226.0
,[deleted],1536485121.0
,[deleted],1536465276.0
nothingduploading,can we keep these stupid fucking marketing blog posts as a means of estabslishing credibility in your shitty company off reddit?,1536430334.0
kapanaga,just to make sure - does the `stylesheet.css` file exist in the directory that you are running that `filewatcher.js` from?,1536426501.0
Skhmt,"Maybe try `./stylesheet.css` ? Might be a relative path thing, depending on how you're writing and calling your code.",1536427669.0
Str4yfromthep4th,Http cant receive data without making a request first. Check out http long polling. This makes a request to the server but the server waits until data is available before responding. The reequest just sits at the server for a long period of time. Otherwise you need a server listening on the client side to receive push notifications. Websockets can be used for this purpose among other things.,1536427957.0
Str4yfromthep4th,Hi sorry but your question doesn't actually make any sense. Can you try to explain it again perhaps?,1536426558.0
Str4yfromthep4th,Hi sorry but your question doesn't make any sense. Can you try to explain it again perhaps? It sounds like you may have a fundamental misunderstanding about how http works.,1536426569.0
Str4yfromthep4th,Is this for a phone app?,1536427430.0
habanerocorncakes,"Can you elaborate on the API more? Realtime push implies that the data is pushed to you for consumption, pull would imply you meed to make a request to get the data. 

You mentioned somewhere sockets arent an option, which is what confused me. If this is just a regular API endpoint that you need to make a request to, but will have new data when its available, thats still a pull pattern. 

If the above describes the API, then you can do long polling, continuously make requests from node server, every X seconds, looking to get the new data. 

But its much more common for a realtime API to be event driven, where you are consuming events that the API is sending you. Most common in node land  would be either webhooks (the API sends updates via http to a url you register with it) or websockets. 

Im curious what exactly youre observing when you say that loading the URL in a browser “the data continues to get updated”?

Can you share the url or API docs, we’re just guessing here otherwise. ",1536443892.0
kranker,"    function bar () {
      var qwe = promiseFoo();
      return qwe.then((o) => {
        o.age = 18;
        return o;
      });
    }",1536422230.0
ikhos,"This is not how promises work (unless you're working with ES6 with async/await).

There is clearly a misunderstanding on how promises work. I suggest [you read this great article by Ponyfoo](https://ponyfoo.com/articles/es6-promises-in-depth) on the subject.",1536422061.0
Charles_Stover,"You modify bar by appending then. If you can't change what happens to bar after it is called, then you have to change bar itself.

bar2() { return bar().then(modify); }

If you can't change what is called, and you can't change what happens to it once it's called, I don't know how you expect anyone to answer this question.",1536444944.0
kredditacc96,You should stop thinking of mutating values and do more functional programming.,1536429797.0
contrapoint,"The error clearly says it cant find Mongo at localhost:27017. The problem is not your code, but your Mongo instance. 

Since you are using docker, things could get complicated. Do yourself a favor, quit using fn or docker, just install MongoDB on your machine and write a simple js script that connects to it. It should work without problems. Once you understand how everything works, learn how to use docker. You're only adding layers of complexity otherwise.

Edit: localhost and 127.0.0.1 are the same exact thing (at least on UNIX machines)",1536414939.0
kryptkpr,"Whatever you are doing to run mongo isnt working.

Use docker:

docker pull mongo

docker run --name mymongo --restart=always -d -p 27017:27017 mongo

(There are some extra -e options to set default password, I strongly suggest reading the docs).

",1536414747.0
habanerocorncakes,"If fn is spinning up its own container and running your code in it (which is what a glance at their docs makes me think) then it would make sense that your mongo instance isnt reachable from that container. Localhost would be the container the function is running in, without any concept of the mongo instance running on your machine, outside the container. ",1536440330.0
raffaeleguidi,"Docker and localhost, together, are a subtle and tricky matter. Don't worry, pal, you are not the first to fall in this trap 😅",1536452732.0
carlcarlsonscars,"Just making a comment as I don't know how to save a post on the desktop version of reddit.

&#x200B;

edit: just found it.  Thanks!",1544232013.0
feenix111,Try to use mongoose it’s mongodb orm,1536425600.0
s5fs,"Good question! The documentation is primarily a reference (in my opinion) but I do recommend that people read the docs as completely as possible, in whatever order they choose.

Since you asked, I recommend you start by reading ""About these Docs"" and ""Usage and Example"", this should clarify the purpose of these docs and also show you how to run your first node application. From there, simply read the Table of Contents and then begin reading the docs for each module you find interesting. Good luck!",1536414331.0
pull_my_finger_AGAIN,"Try [DevDocs](https://devdocs.io) and you can search it or browse it as you like. Like /u/s5fs said, they're more of a reference. There's tons of tutorials out there like [LearnYouNode](https://github.com/workshopper/learnyounode) from [NodeSchool.io](https://nodeschool.io) for a more guided experience. ",1536419309.0
niktekusho,"I believe it depends on your current understanding of Node.js and JavaScript (more in general).

I think reading the official docs is a **mandatory** passage if you want to get into the *nitty-gritty* of the modules you are going to use. I personally never read **all of them**: I suggest you pick a minimal/small personal project and begin by searching the required modules.

Modules I recommend checking out in the beginning are:

-  Console
-  Errors
-  File System
-  Globals
-  OS
-  Path
-  Process

In this way I think you will be able to do stuff on your local machine without the big elephants in the room: **HTTP Servers** (including Sockets, SSL/TSL and such), **Streams** and lower-level APIs.

Also I suggest you start your journey with the docs using the LTS versions of Node: [8 LTS](https://nodejs.org/dist/latest-v8.x/docs/api/) and the newer [10](https://nodejs.org/dist/latest-v10.x/docs/api/). ",1536495122.0
MatthewMob,"Mods please ban this domain.

OP is just using a link shortener that gives ""cash for clicks"".",1536403326.0
,[deleted],1536418753.0
BTMPL,"The error is literally in the snippet you posted:

> ERROR in ./src/client/app.js Module build failed (from ./node_modules/babel-loader/lib/index.js): Error: Cannot find module '@babel/core' babel-loader@8 requires Babel 7.x (the package '@babel/core'). If you'd like to use Babel 6.x ('babel-core'), you should install 'babel-loader@7'. ",1536423367.0
mtaon,"Doing simple SQL queries manually or with query builder like Knex, as others have suggested, is fine. Search is something you can improve later, and I would suggest to implement other parts of your app first.

PostgreSQL supports full-text search out-of-the-box and this is probably the easiest way to improve the search results. Check out [this article](http://rachbelaid.com/postgres-full-text-search-is-good-enough/) for more information.

There are more heavyweight solutions like Solr or Elasticsearch, but I would use them only if you have big problems with performance or search result quality.",1536413105.0
BlastingTheBlaze,You can use an ORM like [sequelize](http://docs.sequelizejs.com) to create your model instead of writing raw queries.,1536418166.0
itijara,"You can definitely implement search like this in a relational database like postgres, but depending on your actual use case that may or may not be the best idea. Most people would use a search index like Solr or Elasticsearch.

The real issue is performance. Full text search is very slow, so you need some indexed keyword fields to search by. A simple implemntation would be to generate a keywords table with the keywords from the original data (e.g. each word downcased maybe) and then a join between that table and the original. Make sure the keywords are indexed as well as the foreign keys. You can also use the LIKE keyword for wildcard searches. 

I don't know a good library for search in relational databases, but you might want to look at knexjs. It is not an ORM, but it is great library for building queries independent of the database implementation.

If you want something off the shelf, I would recommend Solr. It has good documentation. ",1536410002.0
mrwillihog,Take a look at [Knex](https://knexjs.org) which is a simple query builder.,1536411455.0
devourment77,Postgres has a trigram module that allows for score  based searches.  It works pretty well.,1536418023.0
ccleary00,"I wrote a blog post recently that was more about unit testing, but with building out a service to call a postgres database. I ended up just using [node-postgres](https://node-postgres.com/) ('pg' in npm) and writing the SQL statements ""directly"", i.e. not using a query builder or an ORM or anything.

You can [check out that post here](https://www.coreycleary.me/know-what-to-test-using-these-recipes-node-service-that-calls-a-database/) as it might help get you started and give you an idea of how to get the database setup, establish connection from Node, etc.

In general, if your queries are simple enough I think you could start with node-postgres, and then if you keep your application code's concerns separated, you can always swap it out later for something else.",1536418416.0
musketeer925,The animations are overdone and too slow imo,1536417646.0
Str4yfromthep4th,Depends how much validation you need to do. I suspect express-validator is just convenient and well organized. Remember not to reinvent the wheel. And if you don't need the wheel then don't use it.,1536391016.0
,[deleted],1536391924.0
,[deleted],1536381581.0
rift95,To bad it's not mobile friendly. I do most of my design and architecture work while on the go. ,1536388734.0
fullheap,I hope that this doesn’t get used. Horrible to read in editors and IDEs. Basically only works when rendered. Accessibility probably close to 0.,1536397265.0
FunctionallyReactive,"Technically it doesn’t matter what you are using on your front end. And from there it’s a matter of personal preference. 

Personally, I think SQL (postgresql) gives you a better understanding of databases management in the industry (more relational than non relational DB jobs) with a relatively easy learning curve. 

Mongo has a tendency to bloat into one large collection for new users and becomes hard to manage from there. But at its core is very simple to work with. 

After using both mongo and Postgres, they are both easy enough to start using and one has better traction in the industry. My vote is for Postgres.",1536358831.0
no_dice_grandma,"If you know you've got a rigid structure and don't need extreme or regular  flexibility, go with an sql database.",1536361406.0
notAnotherJSDev,"This is **specifically** forbidden by the FaceBook Developer ToS. As well, it is forbidden by GDP for European users. 

I wouldn't even try.",1536350953.0
Gnome_0,"would be nice to have some simple rules for helping i think this reddit is not for homework

* post the problem
* how have you tackled the problem
* in what part are you stuck

&#x200B;

&#x200B;

&#x200B;",1536346928.0
broofa,[https://www.npmjs.com/package/supertest](https://www.npmjs.com/package/supertest) ... allows you to emulate HTTP requests in the context of mocha (or other unit test framework) tests.,1536345287.0
circa10a,I use chai-http,1536379202.0
Drunken__Master,This might (or might not) be useful (It's using Mongo/Mongoose) https://github.com/StephenGrider/MongoCasts/blob/master/users/test/delete_test.js,1536340439.0
ccleary00,"Realize I'm a bit late here, but this is something that gave me a lot of trouble when I first started using Node/Express and learning unit testing, so seeing this post stuck out to me.

Others have commented on using different libraries like supertest or chai-http, but I wanted to suggest a different way, and one that's not too far off from what you suggested in your post.

I would, indeed, write a function that handles deleting the document. You can then easily import that function into your route. So, something like:

    export default async function deleteDocument(req, res) {
      // code for deleting document here
    }

    // then the route:
    app.delete('/api/document', deleteDocument)

You can still use something like supertest to test the actual end-to-end route itself, but then can also more easily unit/integration test that deleteDocument() function too.

I wrote a blog post that covers this same scenario and may be helpful for you if you're interested in checking it out: [Separating logic from Express routes for easier testing](https://www.coreycleary.me/separating-logic-from-express-routes-for-easier-testing/)",1537922315.0
Gnome_0,"seeing the template in  your header.js try to use the same routes that  you have in  app.js

    <a href = 'dataInventory'>   
    change it to 
    <a href = '/dataInventory'> 

also as an adviace,  use git so you can rollback if you change something",1536335248.0
BehindTheMath,Most libraries have UMD builds that you can use in a script tag. ,1536335680.0
Slappehbag,Shit man. This is massive. Not had a chance to look at it properly but my scrollbar is tiny. Appreciate the work. 👍 ,1536349785.0
tejas1994,Looks good dude!! Thanks! Haven't read the entire thing yet but seems great! ,1536364713.0
nimabears,"This is beautiful, especially for me who's just starting to enter the world of node. THANK YOU!",1536880264.0
endjynn,"What version of Windows are you trying to run this on?

Do you have Visual Studio installed?

Have you tried installing Windows Build Tools?

[https://www.npmjs.com/package/windows-build-tools](https://www.npmjs.com/package/windows-build-tools)",1536323678.0
no_user_name_is_good,"Well, generally speaking people do not run nodejs on windows because windows will do things like reboot, perform unwanted updates, alter settings etc.  I won't comment on the OS but for hosting an 'always on' application like a webserver the downtime and reboots are unacceptable.

You can spin up linux on a seperate machine or dedicate your current machine to linux.  Some of the benefits you will gain - almost everything to do with nodejs just assumes linux, the slashes will point in the correct direction without need to translate, system uptime/stability, documentation that matches the environment, etc.

Microsoft gave up hosting its webservers on windows and all microsoft websites are running on linux servers.

I do not mean to be snarky, but just practical, we aren't using linux to be edge lords or anything we just chose the best tool for the job in a dry logical fashion.",1536437504.0
shtanton,"For node, I've only used the websocket package, which worked fine for me.  Not sure if this is what you're looking for but hopefully it will help.

[These](https://www.npmjs.com/search?q=keywords:websocket) are all the npm packages with the websocket tag",1536316399.0
broofa,"If you're creating a custom API, that implies there's no requirement for interoperating with a legacy  API. So... why not use websockets?   You'll save yourself a lot of reinventing-the-wheel.",1536345756.0
,[deleted],1536342625.0
OzziePeck,"Use yarn folks. 


EDIT: use whatever you want, I’m full of shit. ",1536321328.0
reddit4matt,"""After Skantek has matured enough that it would be useful to share, we would like to make it available to the open source community""

so basically..we built something we think is awesome, and will solve all your problems that can't try yet...    Really whats the point in this writeup until its ready to share?  ",1536355889.0
ChronSyn,"In terms of node, it's actually very efficient on memory usage until you end up scaling to thousands of connections. If you have caching of views, then CPU cycles are spent on parsing session variables and other dynamic content into the handlebars template elements (at least in terms of rendering). Even without caching, it's still light enough on resources to be a speedy option.

`res.render` is non-blocking assuming that the template engine itself is also non-blocking (any decent SSR template engine will be non-blocking). If it was blocking, then there would be absolutely no point in using express. You also need to make sure any code that is loaded as part of the views (such as logic calls in your controllers or helpers) is asynchronous (i.e. returns callbacks, or uses promises, or async-await) so that it takes full advantage of nodes event loop.

I can't compare it to Jinja or Python since I don't work with them. Hopefully someone else can shed some light on that.

If you're looking to reduce costs, is there absolutely no way you can let the client do the rendering? I know if you're targeting proxy browsers like Opera Mobile with extreme compression enabled, then SSR is your only option, but if you're not targeting those, I'd really recommend serving something like a react app if possible and letting your node server perform only api-type requests. After all, serving files is extremely cheap and could be offloaded to a separate express app purely designed to serve files, or apache, or even nginx pointing an instance to a folder for serving.",1536320882.0
cantaloa,"Basically, how templating works is that `res.render` will incur a file-system read of the template files, parse the template into a javascript function, and cache it. That way future calls to `res.render` for that template will just invoke the cached function with your data.

Like any function call, it's synchronous and certainly is blocking. Though the expense ranges based on which templating system you use (dot being an example of a particularly fast one: http://olado.github.io/doT/index.html), how big your templates are, and whether you have enough traffic for it to matter.

Javascript's JIT is much more advanced than Python's due to the massive companies pouring money into it which is why it often beats Python in benchmarks, but I don't think you'd see particularly convincing gains porting template layer stuff to Node for speed. In that case, might as well use something that excels in CPU-bound execution like a JVM language.

But that's a bit of a red herring since I find it hard to believe that template rendering is increasing your vps instance count. ",1536359169.0
n1313,"But all of that would be for naught if the path to the config file gets changed! /s

You can require from absolute paths, that's ok. It's usually not a good idea though, for portability reasons (will your code work on a different computer?), and some environments provide extra means to deal with paths, like symlinks, or aliases in webpack and babel, or links in npm, so using absolutes is not needed. In practice though the problem of changing paths is not really worth complicating your setup over, I think. It is unlikely that your paths will change that much after initial setup phase, and your IDE will help you with mass search-replace. ",1536303455.0
Str4yfromthep4th,Why on Earth would you want to do that?,1536305715.0
igetom,"lol you want to use absolute paths because you think relative paths can change? :))  


Do you plan to change the paths every time you deploy your app on a server? What if you have a production and develop server, testing server, or you decide to switch, or the host decides to move your project to different dir?  


My advice is to avoid absolute paths at all costs",1536309515.0
infernal_toast,"FYI This is basically just the Electron quick start template however it also has Webpack and a nice webpack-config that I use in order to transpile ES6 + Vue + SASS frontend code into web-friendly files to the 'public' folder.     It also has a little express configuration so that Electron serves from a port instead of from a static file.    I used this template for a few projects already.
 

If you are just starting out, this could save you a few hours of fiddling with webpack.  You can hit the ground running with a desktop app, especially if you are experienced with HTML+SASS+Vue.  ",1536338083.0
RoboErectus,We are back to v10 again? 😂,1536303217.0
toadkicker,"IO, IO, its off to download I go",1536309159.0
JohannesAnd,"There are a lot of MERN tutorials all over the web. I don't remember which ones I used, but I would suggest just reading one and try making it work. The features you described are pretty basic, so pretty much all tutorials should cover it.",1536272615.0
pyroblue,"//import the express library

`const express = require('express')`

//import the path module from node, so we can access the filesystem

`const path = require('path')`

//if there's a port passed as an argument to the application or otherwise set in the environment, use it, or else use port 5000

`const PORT = process.env.PORT || 5000`

`express()`

// serve static files from 'public' directory, in the current directory

`.use(express.static(path.join(__dirname, 'public')))`

// if you're using EJS for your templating engine, this is where it finds the views which you'll use in a few lines...

`.set('views', path.join(__dirname, 'views'))`

// set the templating engine to ejs

`.set('view engine', 'ejs')`

// remember that ""views"" thing you set two lines above? It basically tells res.render() to look in 'views' directory for 'pages --> index.ejs'

`.get('/', (req, res) => res.render('pages/index'))`

// startup the app and listen on our port above, when its all up, log out ""Listening on 5000"" to the console...

`.listen(PORT, () => console.log(\`Listening on ${ PORT }\`))\`

&#x200B;

To add another page to this app, you would simply add another route after the existing \`.get('/')....\`

`.get('/page2', (req, res) => res.render('pages/page2'))`

`.get('/page3', (req, res) => res.render('pages/page3'))`

...etc.

&#x200B;

This assumes you have 'views/pages/page2 and views/pages/page3' setup...

&#x200B;

This isnt the most scalable way if you had many views in your application (usually, we split off our 'routes' file into an other file and include it)...but for this basic example it'd work.

&#x200B;

Hope this helps get you on your way...

&#x200B;",1536267737.0
floodlitworld,"Bear in mind that most people will assign express to a variable (usually ""app"") and then attach methods to that app separately (`app.use(`... and `app.set('views'`...) rather than the consecutive system in your example (`app.use(`...`).set(`...`)` )",1536270067.0
lord2800,What does your request that's supposed to be sending these things look like? Are you sending the correct `content-type` header with it?,1536266268.0
,[deleted],1536266345.0
warchild4l,"App.js is kind of entry point where you declare your routes, like app.get or app.post 

And to create new page, just create new temolate file and render it from get request.for example if your html file is called ""index.html"" and your route is ""app.get('/welcome')"" you need to render that html file in 'welcome' route's callback with ""res.render('index.html')"" and whenever browser hits route ""/welcome"" (for ex. 'Http://localhost:8080/welcome') it will render ""index.html"" and show you that file's content. 


But of course, you should use templating language like handlebars or ejs to make your html interactive. I suggest you taking Colt Steel's ""web developer bootcamp"" and at least watch everything from nodejs part. He explains lots of stuff clearly. ",1536259502.0
TakaHo,"It is not the best example but [this](https://github.com/LarsVlyminckx/express-eightball-TWEEDEZIT) is my exam.

If you have a question, let me know. ",1536261499.0
tjvds,https://bellard.org/jslinux/ this guy did windows 2000 in your browser. ,1536265254.0
XyploatKyrt,Has science gone too far?,1536273895.0
sammyalhashemi,Insane,1536259921.0
kashubak,">**Other Questions**  
>  
>Running in Docker

Absolutely lost it there.",1536286874.0
r0ck0,"I'm confused about what it actually ""is"" ?...

It seems that https://github.com/copy/v86/ is the hypervisor, or something similar... and you use an actual Win95 image... 

So what is https://github.com/felixrieseberg/windows95 exactly?  It is just the packaging of v86 + electron together or something?

Not dissing it, just don't understand what it actually ""is"" quite yet?

Why is it specific to Win95, as opposed to anything else you could run in v86?",1536289094.0
FlightingIrish,Why?,1536259667.0
texasbruce,So it is just an emulator with external image... I thought the arthor actually made a win95 copy,1536269929.0
cpietrzykowski,"Since you've stated this is a client script, I'd suggest to start using a bundler and make use of something like webpack's DefinePlugin -- or whatever option is available in your bundler of choice. A bundler is a good tool for a whole host of other situations you may run into.

If you're just ""hacking away"", just hardcode an op that you'll remember to remove when it's ready for release. :D
",1536266939.0
josewhitetower,RemindMe! 1 day,1536259853.0
Ryan9104,"You probably should read through the express documentation a bit.  
 https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production  
  
""If you need to write environment-specific code, you can check the value of NODE_ENV with process.env.NODE_ENV.""  
  
    const env = process.env.NODE_ENV || 'development';
    const isDev = (env !== 'production');


I usually have a json config file with my different environment configs within.
I then refer to my config[env] and select the correct config. I won't even have my production config on my own computer but I can still have a development config.  
  
  
https://github.com/sequelize/express-example/blob/master/config/config.js  Here is another example of a more complex config.


edit:
You also should always set NODE_ENV to production when of course using express in production. Most likely, you have your error handling to not expose errors when in production which is the proper way.",1536265328.0
Str4yfromthep4th,"This repo is pretty much worthless. Again, spending so much valuable time attempting to reinvent the wheel like most of these dime a dozen 'programmers'. Pretending that you are an intellectual or trying to fill your resume with junk that might look good on paper. Sir excuse me but I've written an API inspired by SOAP. Okay, what similarities does your lib have? Well, they both facilitate RFCs! Wow!

Side note: put a space between your if and opening parenthesis. The if statement is not a function. If (), not if().",1536265470.0
clockdivide55,"There's really nothing novel or unique here, this is just another way of doing remote procedure calls. RPC has existed for every and has been done much better. It's cool that you made this thing, but really no one should ever use it.",1536291257.0
Ashhhh,"In your presets you have es2015 but it's not installed in your devDependencies. You need to install babel-preset-es2015.

But... as we're here. You should use the new libraries that are prefixed with the @babel namespace. You should also use @babel/env as it maps your babel config to the browsers you specify.

Install @babel/preset-env and @babel/preset-react
Change your .babelrc presets to ['@babel/preset-env', '@babel/preset-env']

It should work from then on, but you should look at configuring your browserslist file as found here:
https://babeljs.io/docs/en/babel-preset-env.html#browserslist-integration

",1536251599.0
evertrooftop,"Full disclosure: this is mine, and hope it's not considered spam. I would love to get a little feedback from the community. Is this even worth working on? It definitely wasn't a waste of time, as it was a great learning experience.",1536243747.0
kyle787,"This is pretty sweet, I really like Koa as well but like you said it isn't very easy to test, and I love typescript which they don't really seem to care about.  Would you ever consider implementing some sort of controller paradigm like this lib provides for Express and Koa? [https://github.com/typestack/routing-controllers](https://github.com/typestack/routing-controllers) 

&#x200B;

While I really like the idea of the lightweight frameworks, I wish some would just add in a DI layer and then the decorators for the HTTP verbs, authorization and all that.",1536249645.0
MrJohz,"This seems to be another framework that uses the ""mutable response"" pattern, where a request handler is given a response to modify and mutate as required.  Why?  Surely the most coherent logical model for a request handler on an HTTP server is a pure-ish function, that takes a set of arguments, and returns the correct response?  What are the benefits of mutating a context-based response here?",1536264835.0
cantaloa,"Some ideas:

1. Expose a readable stream. Maybe an API like `intoArray(urls)` (promise that resolves into array of all urls) and `intoStream(urls)`. This way, the consumer can just process urls as the scraper decompresses/reads them internally, yet you still have the array option for simpler uses. `intoArray` can just be implemented on top of `intoStream` by buffering it all, of course.
2. Use `Promise.map` instead of `Promise.all` to limit parallel requests/processing. Bluebird's impl even has a concurrency limit (default: 1) which is great. http://bluebirdjs.com/docs/api/promise.map.html `Promise.map(things, (thing) => process(thing), { concurrency: 4 })`. Ideally you'd be able to factor out your sequential-processing pattern.",1536259899.0
alphaindy,"Maybe ""parse"" would be a more descriptive term than ""scrape"" in this context.",1536265716.0
boon4376,"I needed the functionality for another project. You input an array of sitemaps, and it returns an array of all urls from all the sitemaps. I tried a few libraries that were just not working correctly. So I decided to publish this as a package. My first ""open source"" contribution. ",1536241391.0
Boris-B,"You should probably add a `LICENSE` file to your repo. You already have the `""license"": ""MIT""` in your `package.json` which is really good, but having a license file would make everything super clear.",1536271510.0
gngeorgiev,This is pretty basic stuff. Junior level at most. ,1536241229.0
vue-rocks,"Some of the controller methods are very long and nested, It gets hard to read. I’m also really not a fan of those large comments.",1536243483.0
AttiiMasteR,"If you want to specialize in backend you should have an understanding of more advanced node topics like buffers, streams, child processes, deployment, etc. Maybe even SQL since it is so widely used.

It could also prove to be beneficial to know a frontend framework. A lot of node jobs in my area at least are looking for full stack capabilities, probably because start ups like to use node but cannot necessarily afford multiple devs.",1536310358.0
xenopticon,"You should definitely learn more about Promises and Async/Await. From a quick glance I saw a lot of unnecessary uses of Promise constructors.

Also if you are looking to get hired, you should probably be using GitHub instead of BitBucket. It has a wider adoption and visibility on the industry.",1536242319.0
Move_Zig,"There's nothing wrong with continuing to work on something after the response. But unless it's a long-running task, I usually wait for the asynchronous task to complete then send a `200 Ok`. It's simpler for the client that way.

`response.end()` will send a `204 No Content` (**edit:** apparently I was misrembering--it sends `200 Ok`), but you might want to send a `202 Accepted` instead, which indicates you received the request and are still working on it.",1536233189.0
EarlMarshal,"The usal patterns for sending data to the server are:

*  A: Clients just want to send data to the server and the client just responds at any time after the request happened that he has received it (`204 No Content` or `200 OK`). Since the client isn't interested in any results of the request you don't have to wait or send anything special.
* B: Client is interested in the results, sends his data any expects some answer. Server should process the data and respond with an meaningful result. If it takes some time it just takes some time.
* C: Client is interested in the results but processing of the data will take a long long time. Server should accept the data, create some reference for the client (e.g. some ID), send the ID as response and then start the processing. Client can check with the ID when his results are in. Due to the single threaded nature it's adviseable to use the new worker threads or start seperate processes/software which does the long running processing.

For the last case you could also consider jump on some publish/subscribe pattern or services.",1536252866.0
nfriedly,"Ending the request early with a 200 or 202 or whatever status makes a lot of sense for things that take more than maybe 10 seconds. Neither option is necessrily wrong, but keeping the connection open the for a long time will sometimes have hiccups with intermediate systems that can't handle long-running http connections.

What I would recommend in addition to that, though, is another endpoint that let you check the status of the job and maybe one more that lists all jobs that the current user started / has access to see.

Also, good logging.

I'll also mention WebSockets as another option. They were built for long-running connections, and so don't tend to have as many hiccups with that kind of thing. You can send an immediate ""working on it"" message, keep the connection open, and then send a ""done, here's the results"" message at the end, and then close the connection.",1536261290.0
pardoman,"Wild guess, but try forcing node to use TLS version 1.2 or later. ",1536251848.0
evertrooftop,"HTTP GET *is* idempotent. Any method that's 'safe' is also idempotent. This was stated correctly in the summary table, but not the initial description.

",1536227759.0
ZoDalek,Looks like a fair explanation. Better use correctly quoted JSON attributes in the examples though.,1536229516.0
kurashu89,"> depending on implementation it can be

Most important words in this entire article. While the descriptions put forth are in line (roughly at least) with RFC7231, or all comes down to how the end points are implemented.

You can make an idempotent post and a non-idempotent put. I see unsafe GETs all the time, and not just ""technically it isn't safe because it increases a hit counter"". ",1536240803.0
jakubiszon,The reason why PATCH is not idempotent was either badly explained or I cannot really see it. You could give similar examples of PUT calls that override their results.,1536229517.0
ipullstuffapart,I wish more developers understood the importance of using proper HTTP verbs. One of the reasons I want to leave the place I'm at is there is not a single API that is even close to consistent let alone uses the correct verbs. All I want to do is write a proper JSON-API spec implemented express API and I have to fight tooth and nail to just end up in analysis paralysis.,1536235087.0
Lost_sand,What up Y2K!!!!!!!!!!!!!!,1536286856.0
TheNiXXeD,"We recently had a proxy put in place for security things and a previously working feature broke. Turns out it was because that feature relied on a DELETE with a body and although every other part of the stack supported it, the new proxy didn't and wasn't passing the body.",1536288392.0
ericwenn,"I guess what you mean is that you don't want anyone outside of Group A to view the image, even if the can somehow obtain the URL to it. 

Depending on your traffic, I would not recommend using node for this, as its not meant to serve static content. But if you are not expecting a large amount of traffic I suppose its fine.

If you can control how the clients will fetch the images you could use HTTP headers/cookies when fetching the image. ",1536221927.0
master5o1,CDN providers often have access control options that may assist.,1536232634.0
deathslocus,"I’d suggest handling it with some form of lookup, so say user 0 requests /:img_id in that request grab their id from the cookie or whatever authentication source you have and check if it belongs to the group that the image belongs to. If you’re still trying to get it working in like 8 hours and want a hand HMU with a git link",1536234068.0
nikoto-,"What I would do is a create a role-checking middleware (a simple Mongo query on the current user session's role should do) on your get requests @ the backend to ensure security/blocking off people that even have the URL.

Then, for the frontend, if you're using a templating language like Handlebars for instance, you could create a helper that checks which images to load for which role/group. :)",1536243523.0
DigitalStefan,"So, pr0n then?",1536212543.0
plebsori,Good work OP. Hope people find it useful,1536315815.0
Str4yfromthep4th,This is the most convoluted over-engineered time-wasting project I have ever witnessed.,1536266333.0
saltupz,"Hmmm. using template literals in that way is something new, feels strange still. Must try it out and get used to that syntax i guess. Ps. Is there support for TS?",1536204894.0
lunchpoet,I wouldn't use it because of the shorthand methods. ,1536230755.0
sshaw_,"Fun idea. What makes it faster?

It would be interesting to see if method naming hurts adoption. Though one may never be able to measure such a thing...",1536207020.0
eejdoowad,"Hi everyone, I've been working on a SQL query builder that takes advantage of modern Javascript features like Promises and Tagged Template Literals. It currently supports Postgres. Here's my sales pitch:

---

**Ergonomic:** Sqorn's intuitive API might make you forget you're building SQL.

**Composable:** Build complex queries from simple parts. Chain, extend, and embed queries.

**Boilerplate free:** Sqorn provides concise syntax for common CRUD operations.

[**Fast:**](https://sqorn.org/benchmarks.html) 10x faster than Knex.js and 200x faster than Squel",1536200556.0
kyle787,How do the template literals work with prepared statements?,1536209552.0
fivevolts,It would stop me because of what it implies about the underlying module,1536236467.0
Louistio,This is really cool! I’d consider it over Knex if the methods were a little more readable!,1536256993.0
eejdoowad,The change to full sql clause method names is done... No more complaining about it =),1536260446.0
gibriyagi,Thanks for this! It was time somebody replaced knex which is kind of undermaintained (IMO),1536306320.0
brtt3000,What is the deal with the template abuse? Why not use a normal function call?,1536232431.0
brockMorrison,There is a chrome extension called Wappalyzer that works well. Just remember to disable it when you are not using it as it is quite the resource hog. ,1536204768.0
pomlife,Is this you looking to make money off of a referral link?,1536188763.0
dotdotconnor,Assuming you’re using express-session try calling ‘req.session.save()’,1536189932.0
BlueSCar,"It's because you're declaring both title and content parameters in the INSERT, but only passing in one value.  I don't know what library you are using, but based on your code above it should looking something like this:

    client.query(""insert into news(title, content) values($1, $2)"",[submit.title, submit.content], function(err, result){
        if (err) {
            console.log(err.stack);
        } else {
            res.render(""news/news"", {news : result.rows});
        }
        client.end();
    });",1536179758.0
kranker,"It's not clear whether `submit` is a string or the object `{""title"":""title_text"", ""content"":""content_text""}` but assuming it's the object it looks like you want `[submit.title, submit.text]` instead of just `[submit]`.  Basically you're passing an array with one element (the object or the string) but you want to pass an array with two elements (one for each of the parameters) 

edit: oh and it should be `values ($1, $2)`",1536179879.0
pomlife,`delete` is a reserved keyword.,1536178536.0
paulcarron,"I think I'm making some progress. The specific point where I'm getting my issue is with `method.toLowerCase()`. When setting up `DELETE`, this is essentially `DELETE.toLowerCase()` but this isn't allowed because `delete` is a reserved word. Does that seem correct and if so how wo I resolve it? gphy, you suggested `controller['delete']`. Where should that go?

&#x200B;

&#x200B;",1536215266.0
cgijoe_jhuckaby,"Your link to the Node docs for worker threads is a 404: 

> A tiny wrapper for turning [Node.js threads](https://nodejs.org/api/worker_threads.htm) in easy-to-use routines for CPU-bound.

I think you probably meant this to be: https://nodejs.org/api/worker_threads.html
",1536175339.0
wlaurance,"Looks nice!

This is more of a question for worker threads in general. 

Typically I run small instances with only two cores. And scale horizontally with load behind load balancers. 

How do you think worker threads will change hosting architecture for node apps?",1536206216.0
Max_Stern,"Finally someone did it 😁  
Great ",1536230495.0
kwiwksh,"To get results from Knex, you either have to treat it as a promise (as in example 2) or use callbacks with knex.asCallback()

I recommend looking into promises if you don't understand how they work. Basically they are ways to ""resolve"" data asynchronously. Knex is getting the data asynchronously because it has to make a connection over the network.",1536168455.0
xenopticon,"JavaScript typically runs on a single thread. Achieving the result you expect would mean blocking this single thread for as long as your query takes to return results.

The language introduces a couple of constructs to deal with this sort of thing. The first one is functions as first class citizens, which allow us to pass them as parameters to other functions and deal with asynchronicity using Callbacks. 

Te second mechanism is called Promises. Instead of returning the value, it gives you a _promise_ of that value so you can reason about it while it's not there. It's a future representation of the value. Promises are really powerful and you should definitely learn them until you feel comfortable. Learn about Async functions (A.K.A. async/await) after that.

",1536171406.0
maffoobristol,"Good writeup! One question though, does strapi work with mongo? It may have been mentioned in there but I only skimmed it",1536173912.0
CodeNinjaWarrior,"For me, running 'npm install' and then 'npm rebuild' does the trick.
I am assuming you are running the application on the same system you are running these commands.",1536162556.0
vetva,"Oh my, that’s a native package, I don’t think it’s a problem with your npm but that you have to recompile native packages with your npm version, I’ll try to dig up where I got this error, it’s a PITA",1536162638.0
cahva,"I know that you probably already switched to non-native version of bcrypt but I did not see that you tried this:
npm rebuild bcrypt --build-from-source

That is what I needed to do to get it working on alpine because binaries were broken (it was the same in your case too).",1536213815.0
ItlogMaalat,Still working on this? I think bcrypt is no longer supported on newer versions of node. Try to  rollback to version 51 and see if it works,1539196642.0
kryptkpr,What problem is it you think transactions will solve?  They're not to synchronize between services. ,1536172250.0
mansfall,"Sorry but your question isn't quite clear enough.  Are you trying to use a database transaction across multiple queries?

Also, I'm assuming you're using \`npm pg\`?

Here is a very simplified example of what this ""might"" look like.

    const { Pool } = require('pg');  
    const pool = new Pool();  
    const service1 = require('from/somewhere');
    const service2 = require('from/somewhere/else');
    
    const transactionAcrossServices = async ({service1, service2}) => {  
     const client = await pool.connect();  
     try {  
     await client.query('BEGIN');  
     // assuming service1 exposes a function which runs the following sql:  
     // 'INSERT INTO names(name) VALUES($1) RETURNING id'  
     await client.query(service1.insertIntoNamesQuery, \['fakename'\]);  
     // assuming service2 exposes a function which runs the following sql:  
     // 'INSERT INTO names(name) VALUES($1) RETURNING id'  
     await client.query(service2.insertIntoFooQuery, \['a\_value'\]);  
     await client.query('COMMIT');  
      } catch (e) {  
     await client.query('ROLLBACK');  
     throw e;  
      } finally {  
     client.release();  
      }  
    };  
    transactionAcrossServices({service1, service2});

There's a lot I don't know here though so I'm just shooting from the hip on what it is you need...",1536173248.0
1alex1131,"a blockchain for dummies?  There already is one, it's called bitcoin",1536174680.0
vetva,"I know twilio can make calls and receive SMS for you and forward it over api to your node instance, if I understood correctly, what is your use case?",1536156231.0
TeslaDelMar,"Amazon Pinpoint has SMS in/out functionality, [docs](https://aws.amazon.com/pinpoint/what-is-two-way-sms)",1536178793.0
,[deleted],1536151767.0
panbhatt,Please use JSON2CSV package. i used the command line version and it works very well. ,1536153605.0
u_n_d_e_r_t_o_w,"Depending on the size and complexity of your project, there shouldn't really be too much that needs to change. Vanilla JS works fine in TS.

If you are using Gulp for your build process, you will need to use something like [Gulp Typescript](https://www.npmjs.com/package/gulp-typescript) which will transpile your TS down to JS. The rest of you automation could probably remain the same (again, depending on your project size and complexity).

I have found that the default tsconfig.js works fine to start off with, there are a few gotchas but you just need to figure those out as you go.

There is also a great TS lint plugin for VS code which I have found to be super helpful.

It is also worthwhile spending some time on the Typescript docs to absorb some of the concepts.

[Here](https://github.com/michaeldoye/mtg-dash-backend) is the source for a super basic TS/GraphQL/Express thing I started a while ago (work in progress) in my spare time, might help you a bit.",1536148150.0
angryCutlet,"Did something like that recently and it wasn't too much of a pain. The one thing that kind was annoying was having both the api and front-end in the same project. Angular was already TS so i just needed to create a node\_tsconfig.json that has all the configs that watches node files and compiles them.

So basically i had a *node\_src* folder where all my node stuff lives and *src* where all the angular stuff lives.

created a `node_tsconfig.json` that looks something like below.

    {
      ""compilerOptions"": {
        ""module"": ""commonjs"",
        ""esModuleInterop"": true,
        ""target"": ""es6"",
        ""noImplicitAny"": true,
        ""moduleResolution"": ""node"",
        ""sourceMap"": true,
        ""outDir"": ""node_dist"",
        ""experimentalDecorators"": true,
        ""emitDecoratorMetadata"": true,
        ""baseUrl"": ""."",
        ""paths"": {
          ""*"": [
            ""node_modules/*"",
            ""node_src/types/*""
          ]
        }
      },
      ""include"": [
        ""node_src/**/*""
      ]
    }

I don't think you need experimental decorators or emitDecoratorMetadata for pure node.

And `package.json` looks something like this.

    ""scripts"": {
        ""ng"": ""ng"",
        ""start"": ""ng serve --proxy-config proxy.config.json"",
        ""build"": ""ng build"",
        ""test"": ""ng test"",
        ""lint"": ""ng lint"",
        ""e2e"": ""ng e2e"",
        ""build-node"": ""tsc --p node_tsconfig.json"",
        ""watch-ts"": ""tsc -w --p node_tsconfig.json"",
        ""watch-node"": ""nodemon node_dist/server.js"",
        ""watch"": ""concurrently -k -p \""[{name}]\"" -n \""Typescript, Node\"" -c \""yellow.bold, cyan.bold\"" \""npm run watch-ts\"" \""npm run watch-node\""""
      },

Then you just keep converting and keep testing.",1536154065.0
essuraj,"try this [https://github.com/stuworx/node-ts-api-starter](https://github.com/stuworx/node-ts-api-starter) ..replace restify with express

&#x200B;",1536155148.0
,[deleted],1536148180.0
manshahia,Why would OP want to migrate to Typescript? Noob here. 🤓,1536157274.0
ilja903,"Hmm, maybe irrelevant but I had managed to migrate to flowjs (not ts) using Flow JS Comment Types. I imagine that in terms of migration it should be mush more straightforward than TS. At least you would not have to change anything in your build system.",1536149345.0
Skhmt,"The article should probably include something in this part:

    req.on('data', chunk => {
        body += chunk.toString(); // convert Buffer to string
    });

To check if the body is getting over a certain size. Something like:

    req.on('data', chunk => {
        body += chunk.toString(); // convert Buffer to string
        if (body.length > 1e6) {
            req.connection.destroy();
            res.end(413);
        }
    });

So someone doesn't `POST` a 4 GB file and crash your app.",1536174747.0
zlumer,"The real question is not ""how"" to handle request without framework, it's ""why"" would you want to handle it without framework.

Industry-standard well tested popular library like `express` or `koa` is orders of magnitude better than custom solution in pretty much all cases.

And if you have a one in a million task where `express` is not enough, you should already know how `http` node module works anyway.",1536177279.0
chris101010,https://itnext.io/how-to-handle-the-post-request-body-in-node-js-without-using-a-framework-cd2038b93190,1536155768.0
EisFrei,"You are using *res* which is where you send the result.
The data is found in the request *req*.",1536136905.0
nikoto-,"Security-wise: it's also a good practice *never* to accept the *whole* `req.body` in a variable, instead, always point to the input name. In your case, `<input type=""text"" name=""sending"">` :)

This is because anyone can open up their console and edit the HTML adding a new form with an input. Your backend would receive the whole `req.body` and there could be malicious attempts to mess with your database..",1536157612.0
mbelmin,"Www.giyf.com
A simple google search ""nodejs post example"" would solve your problem much quicker.",1536141994.0
Thommasc,"You can look at how other frameworks do it.

&#x200B;

Symfony is a good example of clean authentication vs authorization management.

&#x200B;

But mostly this should follow your auth system architecture. Are you using passportJS ?

&#x200B;

Note that if you want to do object-based permission. Have a look at Symfony ACL but know that it's now deprecated. It's just there for you to see how complex this can be.

&#x200B;

Because it's just a personal project, just do whatever V1 works and learn from there. Making a bad architecture is the best way to learn why other people did better.",1536131939.0
--TT--,Check loopback ,1536155020.0
danielstaleiny,"depends if you want to change the role functionalities or not. You can do it on boolean bases. Like isAdmin, canEdit, canDelete etc. 


or you can go with the road role: ['admin', 'manager', 'whatever'] and on every route you use generic controler resorver and you will have controler function for each role * each route. 

 ",1536128515.0
gngeorgiev,"You can take a look at Parse Server. It's open source so if you don't use it, you can still get ideas.",1536148740.0
softgray,"The way I've been doing is is having a role group model and a permissions models, and then having a through model that assigns the permissions to the groups.

Role Groups:
Role Id | Role name

Permissions:
Permission Id | Permission Description

PermissionAssignments:
Role Id | Permission Id ",1536158171.0
ericwenn,"If you are planning to only have a few permissions I’d recommend adding another field to your user model. You could use an enum field to restrict what permissions exists.

You could then use a middleware that checks the permissions on each route you have. 

The benefit of having the field on the user model is fewer db lookups on each request. The downside is that if you are adding more permissions later one it could get messy.",1536161288.0
iwko,Do not use mongo is the best way,1536214531.0
Parasin,"Looks really interesting, did you have an inspiration for this, or purely your own curiosity?

Edit: I just watched the video on the site. This does so much more than I initially thought. I’m a Node.js developer, and can see a HUGE use for the exporting to Node.js project feature. Thanks for sharing!",1536107124.0
iqover190,"Is it going to be open sourced? I'd like to work on it.

I was thinking about building a similar application but for JS language (interactive development), not for data per se. 

How different is it going to be from ijavascript kernel for jupyter-lab?

I guess it is going to be Electron based?",1536115114.0
kyle787,"Hey I recently used your package for some data transformations and cleaning some data up. Previously I would just use pandas with python, and I had an awesome experience with data forge! I really like the idea of the notebook especially if it functions similarly to jupyter notebooks. ",1536153494.0
marinespl,I don't have enough free RAM to run another Electron app. :(,1536129626.0
johnnywebdev,Https://github.com/javajohnhub/node-bowshock,1536093205.0
empty_other,"Restart your computer. Wait a minute after you've logged in. Check in task manager if there is a process called ""msiexec.exe"" running. Kill it. Try to run the installer.

If that didn't work: Someone mentioned in the comments of [this stackoverflow question](https://stackoverflow.com/questions/41710930/nodejs-another-installation-is-in-progress) that it helped to kill the adobe updater service.",1536092632.0
,[deleted],1536075678.0
patrixxxx,"Save yourself from a world of hurt trying to run Node on Windows

Install Virtual box. Get the latest Linux Mint Mate from osboxes.org

Set up your Node dev environment on your virtual Linux machine",1536090640.0
OzziePeck,Well uh your brain. You engage it. Your hands and fingers you put them onto your keyboard and you tap away until you’ve written one and what do you know you’ve added a bot to your current project. ,1536075227.0
,I think it's the same as last month and the one before that and the one before that...,1536083710.0
jmcneese,"“Callback Hell” is termed such because it is hell to read, not because callbacks are bad. Your code is no improvement.",1536072011.0
delightless,what,1536068361.0
whatisboom,what,1536069972.0
KristianSakarisson,"what
",1536068134.0
ItalyPaleAle,"1. The [async](https://github.com/caolan/async) library at this point is considered quite outdated. You should write your async code using promises and async/await.
2. The problem with the callback hell is that it makes code very hard to read. Not only your code isn't better: I'd argue it's actually worse, given that people need to constantly look for functions defined somewhere else in the code. It smells a lot like ""goto"".
3. Your code isn't *exactly* equivalent to nesting callbacks. In fact, the scope of variables inside your functions is different than what you'd have if functions were nested.
",1536103348.0
prdstrctn,"when i first started using TypeORM a year ago, i used both pretty frequently. as my application grew and the data model became more complex, i started to move away from `eager` loading and cascading everything. there's nothing wrong with either, really... i still use cascading for some simple relations / use cases, but generally i prefer each entity modification be separate and explicit in the code, especially when there are multiple contributors to the repo (but i'm also a stickler for readability and clear intent over 'less lines of code').

as for eager loading, there's really no need when it's so easy to specify which relations you need in your `find` and `findOne` calls:

    ​ordersRepo.findOne({where: { id: orderId }, relations: ['customer'] });

or, if you decide to continue using `eager`, you can override that behavior as needed with `loadEagerRelations` (bool)",1536077013.0
r0ck0,"Anyone know any real world example projects that use typeorm on github or anything?

I've found the official docs to be very confusing to piece together seeing that so many different ways of using the library are mixed into the same docs.",1536932615.0
,What operating system are you on?,1536111373.0
TaskForce_Kerim,"Isn't it ill-advised to have two different error messages for the user and the password? Because it allows probing your user database. Speficially this part:

    try {
          user = await UserController.findOneByEmail(email);
          if (!user) {
            return done(null, false, {message: 'No user by that email'});
          }
        } catch (e) {
          return done(e);
        }
    
        let match = await user.comparePassword(password);
        if (!match) {
          return done(null, false, {message: 'Not a matching password'});
        }

This way I could find out whether a certain email address is using your service. I think it'd be better to just combine both error messages into one.

&#x200B;",1536049400.0
marinespl,tl;dr: use async functions as if they were a regular functions.,1536051921.0
wlaurance,"I've been deep in the weeds building out a course. Today I wanted to share a snippet of building out an express + passport auth scheme using the latest async/await patterns. It's really nice to not be in callback hell. Even though passport mostly uses callbacks we can still do our app specific code like looking up user by email, de-serialization, and serialization in an async function if desired.

&#x200B;

I have an email signup if you want to get the full working code same.

&#x200B;

Thanks!

&#x200B;

Will",1536037388.0
pomlife,Node is focused on microservices as a foundation.,1536029084.0
bigorangemachine,"We were talking about express' DYI of the server configuration. It kinda makes sense. The removal/reconfiguration of middlewares can be a pain and it doesn't make sense to use cookie middleware if you are using JWTs

Also if a stock sub module is busted it looks like Express is busted. So the noise for the maintainers is high.

Authentication isn't always needed. It doesn't need to be there... or you might be doing Facebook... or iOS Google authentication... they all need a little massaging to work from the provided sample  implementation to play nice",1536062656.0
Jozav,"True indeed. I am a frameworks person i guess.  My major dislike of Node is that you need a gazillion NPM packaged to make something useful. With every developer choosing his own packages it has become a menace to adapt someone else's code. 
In .Net, YII, Laravel, HAPI, etc. I had at least clarity on the basics which helps communication with other devs.",1536032890.0
OzziePeck,/r/node - this is /r/node ,1536075536.0
MrSlyPotato,"Kue is pretty much dead. I've read numerous posts about it being buggy and unreliable. You should probably try to use something well established in industry, like RabbitMQ. 

Check out this issue from kue's github:
https://github.com/Automattic/kue/issues/1196",1536044828.0
hugo__df,"[Bull queue](https://github.com/OptimalBits/bull) is pretty solid, I wrote about [why I like it and walk through some setup on my blog](https://codewithhugo.com/bring-redux-to-your-queue-logic-an-express-setup-with-es6-and-bull-queue/)",1536057612.0
sshaw_,"I tried Kue, my jobs had no retry attempts but I still ended up with 10s of Redis entries for failed jobs even after setting `removeOnComplete(true)`: https://github.com/Automattic/kue/issues/1066

I ended up going with [Bull](https://github.com/OptimalBits/bull).


",1536016055.0
rotharius,"Does it have to be node? Could you not use a dedicated application for it that interfaces with node?

Have a look at Redis or NATS or, if you need more delivery guarantees, Kafka or NATS Streaming. Or you could go with MQTT or AMQT implementations such as ZeroMQ and RabbitMQ.",1536038181.0
TheCommentAppraiser,"OP, can you tell us a little bit about your use-case? I see other commenters have already recommended RabbitMQ and Bull. I'd also throw in ZeroMQ in the mix; it is much more lightweight, and can make more sense depending on the use-case.",1536078348.0
fwertz,"Also using bull for running on-demand jobs. It's been mostly good. Documentation is a little lacking, but performance has been great. Biggest snag I've encountered is forcing jobs to stop.",1536090855.0
ItalyPaleAle,"I had a bad experience with Kue, and in general with Redis for queuing. Strongly recommend something more mature and feature-rich for queues, for example RabbitMQ: https://www.rabbitmq.com/tutorials/tutorial-one-javascript.html RabbitMQ is enterprise-grade, has tons of features, and it’s very stable. It’s also backed by Pivotal.",1536023562.0
gavlois1,You could go through the freeCodeCamp APIs and Microservices projects section [here](https://learn.freecodecamp.org/apis-and-microservices/apis-and-microservices-projects) and build those out. The timestamp one is a fairly simple one that should get you used to fundamentals of the language. ,1536019578.0
abby_cohen_221,"This is a good beginner level tutorial for building a REST API with Node, Express, and Mongo DB: https://www.turbo360.co/tutorial/creating-a-rest-api",1536030642.0
bob_from_teamspeak,"i switched all my projects to this platform: [node-api-boilerplate](https://github.com/w3tecch/express-typescript-boilerplate)

&#x200B;

dpending on your needs you can strip it  down and remove certain parts. the core components like typeorm, routing-controllers, typedi etc. are from the same developers and feel pretty good to develop with!",1536039352.0
NuclearCornflakes,"Would recommend Nest.js which uses TypeScript. 

It’s based on Express and is very simple to get up and running. Great docs too.",1536041945.0
rwieruch,"Not sure about any up-to-date Rest projects/tutorials. But if you are interested in GraphQL as a REST alternative, checkout this [GraphQL with Node and Express tutorial/project](https://www.robinwieruch.de/graphql-apollo-server-tutorial/).",1536007691.0
TheRootStriker,https://github.com/StetSolutions/simple-back-end,1536040600.0
HmmmInVR,"Create your own OAuth guard, it will be helpful in the future to figure these things out early.",1536040922.0
Ellv3ra, RemindMe!,1536101393.0
razor_XI,RemindMe!,1536047972.0
dombrant,RemindMe!,1536009741.0
chrisevans1001,RemindMe!,1536004378.0
NICE_TRY_KIM,"I think readline is async, right? If you’re used to callback-style, check out async.js at https://caolan.github.io/async/. It has a function async.eachSeries that takes an array and calls an async function on each item in the array, only calling the next when the previous function’s callback has been called.",1536002676.0
TyrionReynolds,"Well, I think the case for Web Assembly is that it can run in browser.  So, if you’re on the server already you could use another low level language if you want.",1536001197.0
,[deleted],1536006130.0
Strum355,Not sure what you're asking here. Can you paint a picture of what you think might happen?,1535983514.0
koresho,"Preferably, put your code on another user or server they can’t access. Nothing else will prevent a determined and knowledgeable user from changing your code (or worst case, swapping it out for something else entirely). The fact that your users have access to mess with the server should be a major alarm for you and your team’s management. For example, what if there’s a critical bug in your code that causes downtime/cost, added by someone on the floor, and then removed when they realized they messed up (but in later audits you can’t tell, so fingers are pointed at you and your team).

Anyway, I digress. You can use zeit’s pkg library to convert your code to an executable.
Note that doing so will hurt performance by sometimes up to 30%, because they compile the bytecode and save it (which prevents many on the fly optimizations made by V8).",1535985949.0
vetva,What do you mean? Are you using ExpressJS?,1535983517.0
00benallen,"I think people have been misunderstanding your question.

&#x200B;

You're not having trouble with CLIENTS (web browser users) accessing your code, you're having issues with other employees at your company accessing it. Is that correct?",1535986984.0
08148692,"Never ever ever alter the code directly on the server. This is incredibly bad practice. All code should be stored in source control (github, for example). Once the code has been changed, passed peer review, and unit tests run without fail, then you can deploy it to the server with some automated deployment tool. 

Even deploying to a production server without fully testing the changes is really dangerous. You should have a staging server to test changes before going live.",1535995756.0
irspaul,Node.js Rockstar!!,1535982677.0
LarryKingsScoliosis,It’s awesome and really nicely designed. Is there a way to slow it down? I’d even do that in the source code I just don’t know which file. Thanks ,1535988874.0
feenix111,Great work there ,1536065522.0
hunter_lol,Me too dumb to translate the pseudocode into javascript,1536041763.0
strobingraptor,"Thats pretty cool! I see that you have used React to build the front end.  
You have not deployed the production build of the React project.

Make sure you run `yarn run build`   
Then push the build folder which you get to your server. ",1536094786.0
Turbo_swag,Pm2 might do what you want ,1535980856.0
vetva,"I use pm2 in production, you do not have to use their monitors, you can send pm2 instance statistics to whichever monitoring server you want using PMX package. I can dig up the code if you are interested.",1535983048.0
primo86,"While not technically an answer to your question, I believe you would get better performance if you were running this query as:

SELECT trial_sites.name FROM trial_sites INNER JOIN trial_instances ON (trial_instances.trial_site_id=trial_sites.id) INNER JOIN referrals ON (trial_instances.id=referrals.trial_instance_id AND rederrals.physician_id = 2) ORDER BY trial_sites.name

I assume sequelize would also able to handle this query more easily",1535983482.0
broofa,"'Not sure if this is exactly what you're after, but demonstrates how to create Sequelize models and queries that are on par with what /u/primo86 suggests, but doesn't require generating raw SQL.  I.e. you're operating at the ORM level, rather than SQL level.

    // Spin up Sequelize instance, etc...
    const sequelize = new Sequelize(database, username, password, {
      dialect: 'mysql',
      // Turn off default timestamp fields to keep things simple
      define: {timestamps: false}
    });
    
    const DataTypes = Sequelize.DataTypes;
    
    // Define models.  We're just doing the minimum necessary here to get some model
    // objects we can work with per OP's question
    const TrialSite = sequelize.define('TrialSite',
      {
        trial_site_id: {primaryKey: true, type: DataTypes.INTEGER},
        name: {primaryKey: true, type: DataTypes.STRING}
      },
      {tableName: 'trial_sites'}
    );
    
    const Referral = sequelize.define('Referral',
      {physician_id: {primaryKey: true, type: DataTypes.INTEGER}},
      {tableName: 'referrals'}
    );
    
    // Note: Assuming trial_instances is a simple junction table that contains
    // just `physician_id` and a `trial_site_id` columns, there's no need to define
    // a model for it.  All we need to do is tell Sequelize how to query through it,
    // which we do when we describe our associations thusly ...
    TrialSite.belongsToMany(Referral, {
      as: 'referrals',
      through: 'trial_instances',
      foreignKey: 'trial_site_id'
    });
    Referral.belongsToMany(TrialSite, {
      as: 'trials',
      through: 'trial_instances',
      foreignKey: 'physician_id'
    });
    
    async function main() {
      // Run the query.  Note use of `where` nested inside the `include` clause
      const results = await TrialSite.findAll({
        include: {
          model: Referral,
          as: 'referrals', // Must provide association name (same as passed to `belongsToMany()`, above)
          where: {physician_id: 2},
          attributes: [], // Suppress `referrals` collection that otherwise appears in results
        },
        order: ['name'],
        attributes: ['name'] // Only include `name` field in results
      });
    
      console.log(JSON.stringify(results, null, 2));
    }
    
    main();

Running the above with \`DEBUG=sequelize:\* node ...\` will log the SQL output, showing a generated query as follows (reformatted here). It's a bit more verbose because of how Sequelize likes to construct it's queries, but is basically what /u/primo86 describes.

    sequelize:sql:mysql executing(default) : SELECT `TrialSite`.`trial_site_id`,
      `TrialSite`.`name`,
      `referrals->trial_instances`.`trial_site_id` AS `referrals.trial_instances.trial_site_id`,
      `referrals->trial_instances`.`physician_id` AS `referrals.trial_instances.physician_id`
    FROM `trial_sites` AS `TrialSite`
    INNER JOIN (
      `trial_instances` AS `referrals->trial_instances`
      INNER JOIN `referrals` AS `referrals`
      ON `referrals`.`physician_id` = `referrals->trial_instances`.`physician_id`
    )
    ON `TrialSite`.`trial_site_id` = `referrals->trial_instances`.`trial_site_id`
    AND `referrals`.`physician_id` = 2
    ORDER BY `TrialSite`.`name`

... logs the following output:

    [
      {""name"": ""Site 1""},
      {""name"": ""Site 2""},
      // etc...
    ]

​",1536010812.0
Joost3d,Could use a raw query? http://docs.sequelizejs.com/manual/tutorial/raw-queries.html,1535974243.0
RoganTheGypo,...This is over a year old.,1535954165.0
ddwrt1234,Wake me up when they go LTS on 10.x,1535956986.0
Str4yfromthep4th,Why do ppl post ,1535983806.0
OzziePeck,"Don’t link the SO question. We want to talk about it in once place not two, thanks. ",1535961802.0
fullheap,"What about using `argv[0]`? Some programs do different stuff depending on the name that you give the binary. Using symbolic links, you could then simulate multiple binaries.",1535972474.0
Yeahbuddayyeah,Have a look into puppeteer,1535926805.0
ChronSyn,"Last I checked (which was over a year ago), Instagram didn't have a public API for posting to, with the reasoning being that ""posts on the platform should be from a genuine moment, not created and planned"".

Checking again just now, the graph publishing API is still in closed beta and new applicants aren't being accepted; https://developers.facebook.com/docs/instagram-api/content-publishing

In terms of taking screenshots, others said puppeteer and though I've not used it personally, I do recall that PhantomJS was really horrible to work with, often not working much of the time, while the API for puppeteer is much more documented and consistent.",1535961659.0
JakeInDC,"PhantomJS can ""load"" the page on the server and save it as an image, node can then do what ever u want with it.",1535928659.0
cyberst0rm,Selenium will take screen shots,1535933290.0
Str4yfromthep4th,This article provides pretty much nothing. Why'd you write an article about something that is so clearly represented in the official docs ?,1535929103.0
,"I only clicked the link because of the top comment. OP, send these articles to your mother to read. Get your game up before you try again. ",1535986252.0
davidmdm,"People do this usually by encoding the binary in base64 encoding. The issues are that this format uses more data. And isn't as performant as sending multipart.

As a rule I would go with multer for your use case. But you know best for your own project and can decide to revisit how you send files in the future. ",1535920464.0
EarlMarshal,Huh? What's really the problem here? Isn't an image normally in a binary format and you just send it to the server with a normal http put/post request and the right content type? Why even try to do something more complicated?,1535945406.0
planetary_pelt,"Images are already sent to the server as binary data via multipart-encoded form. 

If you don't want the multiple field support that multipart encoding gives you, you can of course just send binary directly to the server with octet-stream content-type. 

May be worthwhile reading up on the what and why of multipart-encoding: https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html",1536002057.0
NetOperatorWibby,"I’ve been trying to figure this out for quite some time with limited luck. I have an image conversion microservice for one of my apps and what you’re describing is how I do it. It’s slow.

File sizes larger than 1MB take at least 20 seconds to be converted and show up. I ise websockets to send the Base64’d string from the client to the server to the microservice.

Like you, I prefer as little dependencies as possible and without bloat. I’ll share my solution if I find something better.",1535924731.0
outphase84,"Haven’t watched the video, but entirely stupid premise. GraphQL is a query language. REST is a web service architecture. 

GraphQL defines a method for specifying queries, but not the method for sending the query. Saying GraphQL will kill REST is kind of like saying Windows 11 will kill x86. ",1535912580.0
SomeRandomBuddy,😂,1535912753.0
HijoDelQuijote,You mean something like react native?,1535906848.0
Gnome_0,"ionic ,react native ?",1535914395.0
speort,React Native or Native Script are your friends with build once use everywhere. ,1535914285.0
Djbm,"You can use [Cordova](https://cordova.apache.org/) to create native iOS or Android apps from web technology. It basically creates a web view to embed your web content, but offers APIs to access device features.",1535929402.0
vetva,"Yes, you can always use a web view in your native application and serve a file from the device or show a web site in its place.",1535915959.0
tobydeh,Nativescript with angular or vue,1535917776.0
JS_PY_and_Crypto,React Native,1535941964.0
CodingMorrison,React Native ftw,1535944695.0
captainahhsum,"You can do a lot of the coding in react native but most likely that will require 3 code bases(native for the parts of the programs you can't do in react native see airbnbs articles about the topic). React native doesnt have the backing it did when Airbnb was pushing it forward. It may still be a good choice but it seems the tech Giants that use it will be moving away from it soon. With that said, I don't know the kind of support it will retain for future use. That is the view from an Enterprise mindset. So for personal use, you can probably disregard what I am saying! Either way, happy coding!",1535946999.0
bobinux,"Any reasons to use it instead the popular ones like Express, Koa, Hapi?",1535870780.0
,"I’m all about trying new shit, but why re-invent the wheel. Does this go on a resume? I can just make dumb shit and post it on NPM and I can call my self published? I",1535986422.0
csufeardir,"My apologizes, but god that's some horrible design. ",1535937492.0
BehindTheMath,Look into `await` and `Promise.all()`. ,1535867565.0
Max_Stern,"`&&` returns rhs if condition (lhs) is true (and it returns lhs if lhs isn't true) so your code does this:  
1. implicitly checks that `zips` isn't `undefined`/`null`/whatever casts to false.  
2. if `zips` doesn't cast to `false` expression returns `{ zip: { $in: zips } }` and then it's being assigned to `where`.   

In other words, it could be written like this:  

    let where;
    
    if(zips) {
    	where = { zip: { $in: zips } }
    }   

You can play in console to see how it works:  

    true && 1 // 1  
    true && 'test' // test
    null && 42 // null  
    undefined && {a:1} // undefined
    const zips = {}; zips && {hello: 'world'} // Object { hello: ""world"" }",1535880999.0
Demiacle,"Nothing to do with your gear on that one. CTRL-C fires a SIGINT signal to the process which usually means do cleanup before killing. That cleanup could vary a great deal but something is basically getting stuck or is waiting to be cleaned up, maybe a child process or db connection.

\*edit -  to clarify its probably some configuration in your environment",1535832915.0
kwiwksh,"Probably not. If your home computer is much faster you could set up a remote environment there (such as SSHing into that computer) or using some free tier of a service like GCP/AWS. Its most likely due to your CPU being single core. If nothing else, just try to limit what you have running (fewer browser tabs, killing background processes).",1535867992.0
DoesntSmellRight,"Hah, I remember around year 2000, someone posted a bug against linux, that the uptime counter reset after 497 days. It was because they'd used an unsigned 32-bit integer to count uptime (at 100Hz). It didn't crash or anything, the uptime counter just wrapped around to 0 and kept counting up from there.

It turned out other OSes at the time had done the same mistake. At least one of the BSDs, and Windows 95. On Windows 95 it was a bit worse as they counted at 1000Hz, so instead of happening after 497 days, it happened after 49.7 days. And unlike linux, windows crashed and became completely unusable.

It's quite fascinating that it took nearly 5 years to discover that Windows 95 would grind to a halt after 50 days.",1535835309.0
MzCWzL,"Guess what else suffers from a similar bug? A Boeing 787 - https://www.engadget.com/2015/05/01/boeing-787-dreamliner-software-bug/. 

2^31 100ths of a second = 248 days",1535836402.0
Max_Stern,Thank for that. My app heavily depends on timers and I guess I should update Node as soon as new version gets released. ,1535832474.0
vladjjj,"Thanks for the info, that's exactly the reason for using LTS versions in production.",1535875837.0
Kingsthor,The linked PR has landed in [10.9.0](https://github.com/nodejs/node/pull/22295)?,1535886387.0
JustOr113,Could you guys share what's the use case of having such a long timers?,1535874203.0
,[deleted],1535833869.0
username_is_taken43,Most NodeJS app don't stay up that long. Lol,1535855767.0
Fusseldieb," - - -

Edit: I was wrong.",1535837419.0
pomlife,"Use a controller function for your callback. Then, import the controller.

    app.get(‘/foo’, FooController.read);

Then...

    import FooController from ‘./FooController’;

    describe(‘FooController’, () => {",1535822765.0
cspotcode,"These two bits of diagnostic information may help us find the problem.  Please post the output of this command:

printf ""\[%s\] \\n"" ""$SHELL"" ""$BASH\_VERSION""

Also modify the while loop in the script as follows, then run it and paste the results: (add a printf statement; everything else stays the same)

    while [ ""${pathdir}"" != """" ] && [ ""${pathdir}"" != ""."" ] && [ ""${pathdir}"" != ""/"" ] && [ ""${pathdir}"" != ""${tree}"" ]; do
        printf ""[%s] \n"" ""${pathdir}"" ""${tree}"" ""$(dirname ""${pathdir}"")"" 1>&2
        pathdir=$(dirname ""${pathdir}"")
    done

This is a stab in the dark, but maybe it'll help.",1535828897.0
EyeballMond,"Having trouble using copy & paste on mobile...

Have you tried using curl to download nvm ?

https://github.com/creationix/nvm/blob/master/README.md

You can find it near the beginning of the readme.

If it doesn't work I would try removing nvm from your system, and the redownload using curl. ",1535819897.0
GamesMint,I think you can remove that line(cafile) from .npmrc and try in diff command prompt after this.,1535815879.0
AlienSoldier,express . great source to read from,1535802353.0
kasnhasn,I’ve read that parcel has extremely beautiful code,1535822556.0
bob_from_teamspeak,i really like what pleerock is doing. checkout typeorm and routing-controllers. it changed the way i approach node completely,1535829191.0
xemasiv,"pbf, msgpack5, polka, lodash, unistore",1535863580.0
MinicD,I'd say that Puppeteer has a great and modern architecture to learn from. [https://github.com/GoogleChrome/puppeteer](https://github.com/GoogleChrome/puppeteer),1535963251.0
p3t1tch3v4lr0ux,Maybe loopback from IBM ,1535811763.0
rwieruch,"It's not a third-party library, but maybe [this one](https://github.com/rwieruch/fullstack-apollo-react-express-boilerplate-project) helps to get into GraphQL with Express. It has various features such as authentication, authorization, a database connection etc. and a tutorial which you can follow along. ",1535952925.0
Earhacker,"Following on from your update, if you're learning React, don't bother with a Node back end. Build a back end API in Laravel and fetch data from it with your React front end.

My preferred stack has always been the ""roll your own"" types, whatever language I'm in, i.e. I prefer Flask over Django, prefer Sinatra over Rails. I think if I knew any PHP I'd prefer Symfony over Laravel. So with Node, I like Express just fine. Once you know the lightweight frameworks, learning the bigger frameworks is then just a matter of learning what the developers' opinions are.",1535800608.0
shipandlake,"Understanding what your application would do will help to narrow down suggestions. For example, do you need authentication in your app? Is it going to be stateless or do you need some sort of session support? You mentioned MySQL, are you restricted in what DB you can use? Have you looked at drivers for your database? You also mention thousands of requests per second - are these writes or reads? Is your app going to have be processing multiple types of requests or going to be handling just one API endpoint? Do you need to push your updates to your clients?

I prefer using smaller libraries for specific things like express or koa, rather than frameworks like meteor or adonis. It’s a bit more work to start, but a lot more flexible. But it really depends on you. You can also look into Apollo Server.

You can use pure nodejs to listen to http requests and respond to them. The rest are helpers to parse, route and respond. And you can mix and match those. Start with one library like koa and see if it works.

",1535804199.0
devourment77,"Check out hapi, it is similar to express, but comes with some cool things like route param and payload validation out of the box.",1535804910.0
JTenerife,"Express, hands down. Easy, clean, fast (OK, all Node frameworks are fast) and mature. Docs are nice to read and easy to understand. I'd also go with Typescript. However, it can be a burden when you want to use a lib without types.",1535802785.0
l33t_supa_h4x0r_,"Yeah, indeed you’re a demon",1535810078.0
entrasonics,MERN stack.  ,1535811918.0
r0ck0,"I did only PHP for 19 years.  Switched to Node this year and already prefering it.  I'm using Typescript, plain JS is too loose without it I think.  Plus it has lots of other useful features on top of the typing stuff.

I was set on using React, but changed my mind and using Vue.  Also using Nuxt so that the same templating system is used for client-side and server-side rendering.  Can change where the rendering happens by just moving some `<no-ssr><no-ssr>` tags in the templates.

Also only used MySQL for about 17 of those years, but postgres for everything now.
",1535801878.0
adnbrq,"In my opinion:
Frontend: React, Vue
Backend: Simple Express / Koa / etc... Server with a good ORM should do the Job. No need for a framework",1535824987.0
raphaelarias,We use and really like Meteorjs. You can use it with GraphQL. It’s as awesome as Laravel.,1535797003.0
ncubez,"If you're going with React then it's natural to might as well have it be the so-called MERN stack, which is MongoDB (or MySQL in your case), and Express (which is awesome), the other two are obvious. Personally I do the MEAN stack (using Angular). ",1535800096.0
alexpalaz,"Listen me.

Backend:
Use NodeJs with Express

Frontend:
Use ReactJs

Database:
Use Firebase",1535804544.0
pomlife,"Understand everything on this list.

https://github.com/i0natan/nodebestpractices/blob/master/README.md",1535770271.0
Charuru,It's too simple to be useful for me.,1535816687.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/javascript] [x-post from r\/node Caching and ratelimiting made simple. Feedback Welcomed!](https://www.reddit.com/r/javascript/comments/9c372m/xpost_from_rnode_caching_and_ratelimiting_made/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1535810146.0
tselatyjr,"DataLoader encourages caching on a per request basis by using batching. 

This way if you've got 50 requests a second, and 500 entries to resolve, it'll resolve the 500 in a single request 50 times instead of resolving 500 individual items 50 times (aka 25,000 resolves). 

DataLoader encourages only caches as long as the current request needs it and not for a set duration. 1,000ms is too slow for high responsive applications. 

DataLoader also suggest passing in contextual authorization references to avoid users getting cached data they shouldn't see. 

To be clear, your approach is to basically use your own version of Node-Cache, but for functions? You'd make as many calls to the database as necessary to resolve each item at least once until it's all fully cached in memory?

If I 1,000 items I'm returning with your data loader, and each has a unique associated relational database entry I want back which would cause a miss on the cache for each one, then you're still making 1,000 calls to the database for a single GraphQL response? 

Your caching package seems okay if you have a lot of hits on the cache vs. misses. However, the batch loading is the real core feature of why Facebook's DataLoader created. Batching. Otherwise developers can just use Redis or Node Cache on a 1,000ms expiration. 

Food for thought. ",1535810161.0
saboay,Depending on `coffee-register` on runtime is completely absurd and pulls a lot of unnecessary dependencies.,1535984274.0
BehindTheMath,"Since bcrypt is async and uses a callback, `return hash` won't return the hash to your model; it will return it to bcrypt, which isn't expecting it. You need to either pass a callback to `hashPassword` and call that inside bcrypt's callback, or use Promises. ",1535742959.0
_fka_,"Solution for anyone who's interested:

&#x200B;

    bcrypt.hash(password, saltRounds, (err, hash) => {
        let newUser = new userModel({
            username: username,
            email: email,
            password: hash
        });
    
        newUser.save((err, user) => {
            if(err) {
                return res.send({
                    success: false,
                    message: 'Server error: ' + err
                });
            }
    
            return res.send({
                success: true,
                message: username + ' successfully added.'
            });
        });
    });

&#x200B;",1535746114.0
haloweenek,"Keep them in plaintext😉, avoid encryption overhead 🤪🤣",1535755971.0
mtaon,"Not familiar with Sibilant but are you able to run simple programs like:

    (console.log ""welcome to sibilant"")",1535746653.0
son_of_meat,"By ""nothing happens"" do you mean there's no output to the command? I bet their program is failing silently. Read the source code of the .sibilant file to see what the instructions are. ",1535749545.0
ATHP,"Well I am a bit confused by the directions you got but usually you would execute a single node.js file by using ""node nameOfScript.js"" in console (might require admin rights).",1535779439.0
fartmcmasterson,Bad bot,1535738045.0
djslakor,Good work sir.,1535745300.0
RushPL,Good idea but decorating existing app is not a nice pattern. I would advise you to create a custom router class with the behavior you want.,1535774258.0
BloodAndTsundere,Variety is good. There is plenty of room for both basic and advanced posts. ,1535755531.0
mariotacke,"I'd love to see multiple posts on a complete project/service/app. Most articles only scratch the surface, take shortcuts, or rehash other basic node knowledge. Show me how your SaaS operates, why it is structured the way it is, and how node helps you be successful.",1535769179.0
RangerCoder,Don't have the earnings to take weekends off to work on contest entrys :(,1535734142.0
kreatemore,1th of September 🤔,1535735856.0
vetva,"I read eloquent javascript before taking on nodejs, nodejs is just a collection of libraries for javascript that you don’t get in a browser environment so it helps knowing the language before using any of its libraries even in browser. GL HF",1535726912.0
broofa,"Not for beginners per se, but the [Mozilla Developer Network (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript) docs are spectacular, not just for JS, but for any web standards.  You can bookmark them but it's often simpler to just google ""MDN *<thing>*"" and click the first result.  E.g. For your function problem, ""[MDN =>](https://www.google.com/search?q=mdn+%3D%3E&oq=mdn+%3D%3E&aqs=chrome..69i57j0l5.1572j0j7&sourceid=chrome&ie=UTF-8)"" will take you right to what you need.

Bonus: [The EcmaScript spec](https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf) \[PDF\].  Also not for beginners.  You'll probably never actually need it, but it's good to be aware of.  Occasionally useful if/when you get into the weeds of how JS is really supposed to behave.",1535748086.0
GoogleyEyedNopes,"I think taking a beat to understand the language would really help you before you dive into node and all it's many frameworks, dependencies, etc.  If you get a solid JS foundation under you, you can easily pick up different frameworks, and environments (browser vs server).

&#x200B;

I really recommend O'Reilly's JavaScript the Good Parts as a place to start.  I wish O'Rielly would release a new edition to modernize it for ES2015, but it's still a really great reference for understanding JS, prototypes, and some of the languages oddities.  The whole book is 176 pages, so it makes for a very compact crash course.",1535726414.0
Razoyo,"Two channels on YouTube I recommend: The Net Ninja and Traversy Media - they have excellent JS and Node tutorials. You should get the basics of JS first since Node is just a flavor of JS. You could even do the W3 Schools tutorials to get the basics. There are a lot of great resources, but, those are some of my favorites.",1535739398.0
KyleAGHC,I would absolutely recommend learning the fundamentals of JS before trying to dive into Node. Or at least have some programming background. ,1535749408.0
polish_jerry,You're going the right way if you're feeling that. I had problems with some aspects of js too and it fucked my mind but soon I became really good at it. As a matter of fact I learned node via udemy course too. Repeatedly watching the hard lectures certainly helps.,1535770437.0
chrisdefourire,"btw your example can be simplified to:

`const duplicateNotes = notes.filter( note => note.title === title )`
",1535770872.0
vetva,"Depends on what you are testing, but I found facebooks Jest to be very easy to set up, for plain node it’s very straight forward on their site, for express using something like supertest and superagent together with Jest, and even typescript in both cases if you are into that sort of thing, I think it’s jest-ts package.",1535728300.0
SalemBeats,"Andrei Neagoie *(holy crap, I spelled that right on the first try)* has a great course called [The Complete Junior to Senior Web Developer Roadmap](https://www.udemy.com/share/1009H0AkMed1pVRXg=/) -- One of the sections is dedicated to testing, and I think he does a really good job of getting you up-and-running quickly, as well as covering a few of the common pitfalls people encounter when testing modern apps.  
  
You can always learn from books, documentation, prodding and tweaking source code, etc., but I feel that a well-made video course is the most efficient *(and least painful)* way to get your feet wet with a new topic.",1535737644.0
spinlock,"This is one of those questions that doesn't tell anyone enough to answer you.

The most basic setup would be to import a javascript module into a node program and exercise the interface form there. 

    #!/usr/bin/env node
    import ""Foo"" from 'foo'

    let bar = Foo.new
    
    if (bar.baz > 5)
      console.log(""bar.baz test passed"")
    else
      console.error(""bar.baz test failed"")
    end

My first rule is to always Unit Test javascript using Node and _not_ a browser. This is to make sure that you can run a test very fast (<60ms) so it won't interrupt your workflow as you TDD.",1535736832.0
ccleary00,"I wrote this ""explain like I'm five"" [post on JS testing](https://www.coreycleary.me/explain-javascript-unit-testing-like-im-five/) and another on [testing Node services that call databases](https://www.coreycleary.me/know-what-to-test-using-these-recipes-node-service-that-calls-a-database/) that will help you get started. 

In general, I'd recommend starting on ""easy mode"" with unit tests if you're new to it.  Start with just writing even one or two, good tests a day until you start to feel comfortable with it.  And think of them less as putting something in place to prevent bugs (this is often the #1 stated goal of tests but doesn't always happen) and more as a *design* tool to help you design your code in a way that's easy to read and reason about.  Usually when I get stuck on implementing a feature I'll use the tests to help me figure out what the code should actually do, what a method should return, etc.",1535759865.0
ZeltaZirgs,"An advice for when you decide to try it: make sure there is some mechanism in place that does not allow you to not write tests otherwise you won't. Also make sure to run tests regularly; in most cases unit tests are very fast to run so you can configure a pre-commit hook which runs them and does not allow commits with failing unit tests. That is useful when you don't have continuous integration set up. The easiest way to make sure there are unit tests is if you have other people in the team to do a code review, in case you are not doing them that's a good way to start and this is a good check-list item for the CR to check for tests. It's easier to tell someone that they need to test than consistently write them on your own.",1535738859.0
w0wka91,"I find that article about testing very very good:
https://martinfowler.com/articles/practical-test-pyramid.html",1535743618.0
theadammorganshow,I have an Express API you can look through [here](https://github.com/theangulartutorial/lets-get-lunch-api).,1535726168.0
vetva,"Strange, I usually only have to open firewall ports for 3000 to work. Have you tried using a http server such as Apache or nginx in front of express? If you already have some web services on that server you probably have one of those also.",1535727158.0
ItalyPaleAle,"Is it possible that your corporate network disables communication with other nodes in the network? Or it disables communication on ports different than 80/443?
To me, sounds more like a networking issue that you might need to discuss with your IT admins.",1535727636.0
Charles_Stover,"All ports except 80 and 443 are probably blocked externally by default. They may be using a reverse proxy (e.g. nginx) to forward requests from port 80 to a different port, depending on the domain or path involved in the request. I'd check for an nginx installation and/or ask about a reverse proxy configuration on the VM.",1535736950.0
ItalyPaleAle,"I see multiple kinds of pitfalls there:

1. There are the “mindf**k” ones, or code you’d never, ever write in real life.
2. There are the ones that aren’t really “weird” if you understand how things like variable scoping and the event loop work in JavaScript. If you’re doing JS development professionally, you should go and read about them, and the code will make sense.
3. Lastly, there are things that, in practice, are essentially mistakes (like redefining a function in scope), and that you could catch easily with ESLint running.

By no means JS is a perfect language, but some people just love to hate it IMHO, and not all that hate is justified :)",1535727482.0
Komsomol,99% are avoided by just testing your code as you develop.,1535724219.0
shawncplus,"How is the complement operator a JS idiosyncrasy? It works the same in any language that has it.

    #include <stdio.h>
    
    int main()
    {
        int a = -3;
        printf(""%d"", ~a); // 2
    
        return 0;
    }
    
Very few of these are idiosyncrasies of JS and more ""I don't understand how code works in _any language_""

    for(;;);

Not a JS idiosyncrasy, it's how loops work in every language that has that for loop structure

        return ['10','10','10','10'].map(parseInt);

""I refuse to read documentation""

    (function() {
        return 010;
    })();

""I don't know what octal is""

    ""0.10000000000000000555""

""What's IEEE floating point?""

    (function(x) {
      return x++ + ++x;
    })(2);

""I don't know how fixity works""

About the only one of these that a new person would run into and struggly with is the `setTimeout` in a loop which is a _true_ JS gotcha",1535727324.0
maelfyn,This is like smashing your head into a wall and then complaining that your head hurts.,1535728932.0
texasbruce,"Those ""pitfalls"" reminds me of high school math: interesting but uesless in real life.",1535723529.0
sshaw_,https://wiki.theory.org/index.php/YourLanguageSucks#JavaScript_sucks_because,1535766855.0
reddittedf,"Look at \*.js files  
How it Works!?

it's awesome 

it's unreal!  
r/https://github.com/odykyi/idgaf-js ",1535719776.0
Ricjd,"Go for it. But it will lead to a terrible buggy app. 

Let’s say you don’t build an app without any tests (and unit tests are only one kinds of tests, depending on your application you may need more types of tests).  If you have a function which is called from many different places, and you change that function then you’ll need to test all the possible paths to that function. It could take hours of manual testing for a 5 minutes change. You’ll probably end up not testing everything or missing something. 

If you have unit tests you can make this 5 minute change, run your tests and if they all pass you know the change is safe. This would only be true if you have good test coverage and are confident in your tests.

TL:DR they aren’t needed for a functional app but are essential for a solid maintainable app",1535719019.0
apes--meh,It reduces the number of bugs + makes development more effective. And it actually gives you a better view on how to improve your code actually. ,1535718689.0
kredditacc96,"> Can't I just test everything manually

Let's say your app has bug X, now you go fix bug X by changing a little function that unknowingly affects another part of your app leads to bug Y in feature Z.

How would you notice if there is a bug Y? You must, of course, manually test feature Z.

Now let's say your app has dozens of features, in order to make sure no more bugs arise from changing your code base, you must test them all, manually, not to mention humans often make mistakes.

That's why we engineers automate every possible thing, unit test (and intergration test) is just automated replacement of manual test.

When you have fixed a bug X, you make sure bug X will never happen again by adding a test case for bug X.
When you complete a use case Y, you make sure that Y will always work as intended by creating a test case for Y.",1535723296.0
CodeBeaver,"I think unit tests are vastly misunderstood and frankly quite overrated, and hence slightly dangerous. Unit tests won't help you discover many bugs, if any at all honestly. Unit test require extremely small pure functions tested individually, that's the point of functional programming and also the point with unit testing, test every unit by itself.

When using TypeScript and sane state management, I personally never experienced ""bugs"" in small, pure functions, only in integrations between different components of the app.

Having that said, creating a test is never a bad thing per se, the problem is mainly time consumption. I've also worked with colleagues who overstate the value of unit tests, some how considering their app to be so much safer when having unit tested it, whilst the bugs they stumbled upon practically never had anything to do with simple pure function errors, 95% of their bugs were unsolvable with unit tests.

I think unit tests mostly help with sanity when coding, and when refactoring. To follow a certain code guideline within the team, to create a practical use of the function you're creating. But in all honesty, if the point of pure functions and unit testing is to create as small functions as possible, how probable is it refactoring these functions to still have exactly the same behavior, but still do something different. I'm not very convinced.

It's probably more useful in backend than frontend, but I think people confuse unit tests with e2e tests, when you create one functionality you want another, older functionality to still work. That can't be achieved with unit tests, but with e2e tests.",1535784001.0
theadammorganshow,"> Can't I just test everything manually

Imagine a gigantic application. How realistic does that seem to do?",1535722365.0
sirshakespeare,"> testing if my app works correctly

It also acts as proof and documentation when you work with others. One of the things I look for in a project is their tests to understand how to use a library.

When I want to report an issue or ask for a feature, I can say ""X is broken"", or I can write a failing test to show what I'm talking about.

> Can't I just test everything manually, e.g every time I save something in the DB,

You can. As your app grows it will take longer and longer. If spending hours testing after each release is your thing, then go for it.",1535722074.0
r3jjs,"In basic, there are three kinds of tests:

1) Unit Tests

2) Integration Tests

3) End-to-end tests

Unit tests, to be slightly basic, test a particular function. The function should take input and give output.

A `formatAsCurrency` function would make a good function to unit test.  You can give it a dollar amount and see if the output has the right number numbers after the decimal point and has the currency symbol.  You can make sure it rounds correctly and handles other situations.

You can write 50 tests and run them automatically.

Then, later if needed, you can totally rewrite that function but be assured it will work the same as the old one.  Your app is still good.

Integration Test make sure that the different functions of your software work together.  You might write data to a database, then make sure the query reads that data correctly.  I do that to make sure my filter and validation rules in my query work.

End to end tests are where you run the app and make sure it all works right.

Unit tests are cheap to run, cheap to write and can cover a LOT of functionality.  You can run thousands of tests in a few minutes and run them over and over and over again.

End-to-end tests are HARD and they take time.  They are important, but man, you don't want to test every tiny piddly aspect each time.",1535723508.0
syntheticproduct,"""why automate repetitive, boring and error-prone tasks that I can do manually?"" NO developer EVER

Complex applications can take 10 testers * 2 weeks to test. That's 20 weeks if you're alone. Now imagine retesting after every change. Over and over and over.",1535746224.0
tswaters,">  Can't I just test everything manually,

you could yea, but as an app gets large it becomes quite time-consuming to test everything.  

when you build out non-trivial applications (i.e. something bigger than a todo or tutorial application), they get incredibly complicated and have lots of data flowing around - you might also have multiple people working in the same code-base.... with a dynamic language like javascript you can do a lot of shooting in one's foot by making a change anywhere.  unit tests can really help to give a level of confidence that a change hasn't completely broken some aspect of the site.

integration tests are even better -- with unit tests you typically stub out things like the database or other external services to the function under test.  they are good for algorithmic-type code.  for a mvc app, each component is usually pretty small and just passes the data to another part of the system so unit tests might not make a lot of sense.

Integration tests on the other hand, don't do that at all -- you hit an endpoint and assert that the database was changed correctly.... how to get your site hitting a dummy test database and not your prod db is an exercise left up to the reader.",1535748145.0
Quabouter,"Unit tests are small automated units to test a small part of your application (often just a single function). The idea is that when your application grows, it becomes impossible to test everything by hand. Often when you change something you'll test what you're changing, but not anything else. However, your changes might have accidentally broken something that you didn't expect. This is something that unit tests will catch for you.

Another purpose of unit tests is to force you to write better code: if you find it difficult to write unit tests for your code, then your code likely has structural problems. ",1535722277.0
VictorianSuperTiger,"The cost of setting tests up might initially seem not being worth it, but imagine manually testing something a thousand times. For you it might take half a minute each time, but a test runs in basically no time. Also, if you have dozens of methods and each one needs to be tested multiple times with different data, it is more than likely that you forget some edge case every now and then. 

If you have a method and you expect certain output from it, just write some tests for it to fix the expectations of this method's behavior in place. Now even if you change the implementation of this method. You can make sure in seconds that nothing broke by just running your tests for this method again. 

For large and complex codebases changing one thing changes something somewhere else and you don't have time to test everything every time you make a change. ",1535723508.0
ilja903,"You can test everything manually, but ""true"" programmers are too lazy for that",1535723698.0
aichholzer,"Don't use a framework that does all the work for you, it will only result in a very bloated project and you will not really learn the core of the language. Stick to something minimalistic that actually makes you think of what is going on. Express is a good start. If you want massive performance then Rayo (https://GitHub.com/GetRayo/Rayo.js) should be your weapon of choice.",1535716283.0
thecoder127,"Express and others are basically routers. You'll need to wire up all the different components and structures yourself. Can be very overwhelming and confusing if you dont know what you are doing.

I would recommend the adonis framework. It takes a lot of cues from rails and laravel and has a good predefined structure to it. It also has support for web sockets and everything else such as databases built into it.

Plus you can use all modern js features thanks to its minimum support for nodejs 8",1535706930.0
itstc,I would set up a rest api for dashboard and socket server for chat. You can access user data simply using http requests,1535707309.0
naderalbes,What is about java framework ,1535709326.0
ChronSyn,"https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-mongodb-on-ubuntu-16-04

Exactly the same procedure for later versions of MongoDB. It's surprisingly simple to get running, and you can run it on the same server as your node app(s) but this may cause performance issues if you're scaling to thousands of concurrent connections or running super-complex queries.",1535715329.0
Sn0wCrack7,"If you're running Ubuntu on the VPS, you should look here: [https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#using-deb-packages-recommended](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#using-deb-packages-recommended)",1535707461.0
ItalyPaleAle,"Congrats on your first package!
My recommendations:

1. Make this async. FS calls should almost always be done asynchronously in Node (unless you have a reason not to)
2. Focus on the docs, like others have suggested!",1535690217.0
ChildishBonVonnegut,"    const {
      dirTree
    } = require(‘kigi’)
    
    const tree = showTree(path, options)
    
    console.log(tree)

Should this be dirTree(path, options) ?",1535685759.0
alphaindy,Include a description of what it is and why I would want to use it.,1535707158.0
zmisael,"Thank you all, I think I have improved the package, now it is asynchronous and I have added tests. I hope now it is more understandable. Thanks for the suggestions!",1535825734.0
MaxUumen,Package names should be meaningful. ,1535690659.0
Parasomnopolis,Try storing the sqlite db file separately in a config folder in the users home folder.,1535686960.0
th30rum,"Use the “extraFiles” property in your package.json with the path to your SQLite file. It will keep it outside the Asar file. 

Note: this might only be available if you’re using electron-builder to distribute your app",1535688940.0
polish_jerry,"If you package the app as asar, you can't write to it since asar's in electron are read-only . Had this problem once just don't use asar.",1535686039.0
SlightlyOTT,"I used Wes Bos' learnnode.com course, it's great. He has discounts for some countries so you might get one if you check it out :)",1535698863.0
GoblinsStoleMyHouse,"There are free resources to learn node, no need to buy this.",1535686806.0
AsjasRoos,"I finished the course some time ago. And I didn't enjoy it very much.

The course had a lot of theory and most of the videos was just sitting and watching him talk about stuff. There was very little to no practical exercises and there was no ""Project"" that you work on. Overall you would gain a lot more by actually buying a Node course from Andrew Mead or Stephen Grider and use the official Node docs if you have any queries about certain parts. Both of them are a lot better lecturers and there are projects that you work on to give you an idea of how you would combine packages into a Node project.",1535719611.0
d4rkyouth,It's a good investment. Do it ,1535678044.0
inabahare,"Saw a bit of that, and tbh the ""big word alerts"" ended up annoying me too much",1535706210.0
Dantharo,I only got the top seller courses. And with a lot of comments.,1535718186.0
syntheticproduct,How much is it? 10 bucks? All Udemy classes are always on sale..,1535680260.0
Silveress_Golden,"Seriously? 

https://www.reddit.com/r/node/comments/9azuyf/how_to_write_a_nodejs_cli_using_opencv_with/
This was two days ago.",1535659076.0
SkaterDad,"I've used [sharp](http://sharp.dimens.io/en/stable/) for image manipulation.  It's really fast, and has a ton of useful features.

Your endpoint will need to accept multi-part form data (if you're using `hapi`, it's built in).  You can then save the file using the built-in Node `fs` library (or maybe find a promise-wrapped version on npm so you can use `async/await`).  In my own implementations, I've generated a random string for the file name also.

Once the file is saved, add the relative filepath to your database (ex: `/uploads/lkejef8sdwer3322.jpg`).",1535651518.0
NoLookThatWay,Use Mongoose,1535651784.0
BenjiSponge,"It depends on the features. For the frontend, I might use Koa with ejs/pug. For the backend, I might use GraphQL using Apollo on top of Postgres for requests and generic REST for accounts and creating posts and that kind of thing.

Spoilers: I've never made a marketplace.",1535648546.0
j0hnst3w,"I think it depends on if you are trying to move fast and what your currently know. 

If you know Strapi and think it provides a good solution then I'd say go with it. 

If you don't then maybe keeping the stack simple and focusing on MVP features would be a better use of time. 

Personally I think planning for growth can get you in trouble. Come up with a solution that you know and know how to scale easily. This shouldn't be too difficult given the node hosting solutions that exist now. 

Once you get some investment or hire someone then look at code maintainability and a possible refactor of certain aspects of the application. 

My 2 cents",1535667600.0
StoneCypher,"i mean, is your goal to run a marketplace, or to write marketplace software?",1535671210.0
mannotbear,"Nope, pass.

The examples in the article use simple incremental ids in each resource e.g. /books/12

Incremental ids suck. They’re a security risk. Use UIDs instead. Ex: /books/324d-ew72-r746

Here’s a good article on it: https://www.clever-cloud.com/blog/engineering/2015/05/20/why-auto-increment-is-a-terrible-idea/",1535695728.0
OzziePeck,Both yarn and NPM save deps to the package.json automatically if the project has been initiated. ,1535632549.0
zkochan,IMO pnpm provides a better interface as well: https://dev.to/zkochan/the-not-fancy-cli-output-of-pnpm-36ao,1535626901.0
Soumil07,"I prefer yarn over npm, but this looks interesting.",1535627460.0
olympikesoft,What it the time average to run the command?,1535621829.0
CoachZZZ,https://m.youtube.com/watch?v=zIV4poUZAQo,1535638390.0
,[deleted],1535676605.0
olympikesoft,Don't understand this question.,1535621861.0
dejavueakay,"i think i had the same problem ages ago - what are you trying to do? mysql server version, what client and what version etc.?",1535626950.0
TheOneRavenous,"It probably isn't open for http on port 80 or isn't open on https on port 443. Which should be the case.

MySQL needs to be accessed via a terminal on the machine. So you need SSH into the MySQL server and then you can access you MySQL ""instance"" from the command line. Remember MySQL is a database software and you're running it on a server. 

You can't open a browser and just access your database. Hence in your node app you might use a special url that's encoded to authenticate your app and be able to send commands. When doing CRUD ops.
 ",1535636505.0
cariaga123,"i realize i should just run the server and access using my url local ip address+port number from the remote client while mysql connection is just accessing via localhost.

i really was hoping to have individual node server from different computers and connect mysql from a single direct ip running mysql",1535648220.0
e_to_the_pi_i,Current Angular version is 6.  Just call it “Angular”.,1535625993.0
PerfectOrphan31,"To the best of my (limited) understanding, you would need to incorporate some sort of authentication flow using OAuth and following Google's guide on how to authenticate users. Within that OAuth for you would need to ask your users to give your bot permissions to post information to their Google calendar (I'm sure there's a permissions in one of the many APIs). Then when the bots command is triggered, you would need to find out which user triggered it, check to see if they've given your not the permissions to post to their calendar, use their time (given back by the Google OAuth flow) and send the appropriate event details (again, I'm sure it's documented somewhere in Google's documentation). 

Scotch.io has an okay tutorial for getting started with OAuth, but some of the information is pretty Bastin and some of it is outdated. 

Passport.js seems to be the method of choice when it comes to OAuth and authentication, though I've found I prefer implementing my own solution. 

You may want to see if Google has any packages on npm specifically for OAuth it for other APIs like their calendar.

If time permits I would love to possibly help or, would you be willing to provide a link to your GitHub repo/add me as a collaborator on Heroku? ",1535602666.0
jimwards17,That tutorial is seven years old. Is using IIS a requirement? You would have far less issues using Apache or NGINX but you would need to run it on Linux. ,1535579033.0
BLOZ_UP,"Try removing the path altogether. We used the `PATH` env. var.

We used to use iisnode for our project, here's the web.config we used:
    
    <configuration>
      <system.webServer>
        <caching enabled=""false"" />
    
        <applicationInitialization skipManagedModules=""true"">
          <add initializationPage=""/api/v1/monitor/status"" hostName=""localhost"" />
        </applicationInitialization>
    
        <webSocket enabled=""false"" />
        <httpProtocol allowKeepAlive=""true"" />
    
        <handlers>
          <add name=""iisnode"" path=""server.bundle.js"" verb=""*"" modules=""iisnode"" />
        </handlers>
    
        <iisnode
          node_env=""%node_env%""
          watchedFiles=""*.js;iisnode.yml;version.json""
          debuggingEnabled=""false""
          devErrorsEnabled=""true""
          loggingEnabled=""true""
          logDirectory=""logs""
          maxLogFileSizeInKB=""128""
          maxLogFiles=""10""
          namedPipeConnectionRetryDelay=""300""
          />
    
        <defaultDocument enabled=""true"">
          <files>
            <add value=""server.bundle.js"" />
          </files>
        </defaultDocument>
        <rewrite>
          <rules>
            <rule name=""node"">
              <match url=""/*"" />
              <action type=""Rewrite"" url=""server.bundle.js"" />
            </rule>
          </rules>
        </rewrite>
        <security>
          <requestFiltering>
            <hiddenSegments>
              <add segment=""node_modules"" />
            </hiddenSegments>
          </requestFiltering>
        </security>
        <httpErrors errorMode=""Custom"" existingResponse=""PassThrough"">
          <clear/>
        </httpErrors>
      </system.webServer>
    </configuration>
",1535588482.0
roconf,"The tutorial is fine. I used it some months ago. My issue was that I did not disable every other application which was running on the same port but it seems like your issue might be something else. I do not really recall what I had to change to get it working completely, however I remember that I ended up finding the solution in another tutorial, I think it was this one: [https://www.simplymigrate.com/2017/04/11/internet-information-server-iis-node-js-in-producton-iisnode/](https://www.simplymigrate.com/2017/04/11/internet-information-server-iis-node-js-in-producton-iisnode/)",1535715880.0
Guignol1981,"Small project here: build a slack bot that create that manage agile’s standup. By asking in a channel who will participate  (with a join button) at a given time of the day. then when you click start it will ask everyone one a series of question like what you did yesterday? what are you working on today? 

I believe this would be a good starting point for an a nice agil assistant in slack. 

I did a couple of node-slack app myself and it’s surprisingly simple. 

If you want to do it, pm me and we can start a project! ",1535570912.0
UnusualBear,"I strongly disagree with how this person thinks const should be used (and by proxy how its implemented in JS). I don't think a const should be mutable, even if it's an array or object.",1535563264.0
max_kek,"I'll use var if I want to, thankyouverymuch. The article would be better if the angle was ""consider using let/const instead"", IMO.",1535561957.0
DrBobbyBarker,I'm not familiar with the book (besides hearing ok things about it). It mentions Node 8 though -- so I would imagine it's up to date.,1535596569.0
spmaster007,"I'd not recommend to buy a book, 'cause after ~6 monts it will be old.",1535634094.0
include007,maybe you are right. thanks :),1535634608.0
include007,ah good one :) so how about your book opinion? which one  would you pick?,1535640702.0
texasbruce,"Here we go, comparing an apple with orange again",1535606404.0
pomlife,This has nothing to do with node or js.,1535561840.0
Parasomnopolis,"https://www.indiehackers.com/

https://hn.algolia.com/?query=passive%20income&sort=byPopularity&prefix=false&page=0&dateRange=all&type=story",1535580852.0
reddit4matt,"Chick out SIP.js I have set up Freeswitch server with a cheep VoIP provider and WebRTC in the past. 

https://sipjs.com/guides/server-configuration/freeswitch/",1535552522.0
curiousdannii,The license has been reverted back to MIT: https://github.com/lerna/lerna/pull/1633,1535613884.0
Razoyo,"While I empathize with the sincere sentiments expressed, it seems misguided, futile and unenforceable to me. By blanket excluding companies like Microsoft and some of the others on the list you will exclude your code from a large number of packages, if anyone pays attention to that sort of thing. Unless your code is so unique and genius (most code, even written in isolation, is pretty similar to other stuff that exists) as to be unique, how hard will it be for someone to get around the license that is buried 3 modules deep in a Node application?",1535570689.0
takuhi,"Whilst I agree that what’s going on in the States is horrendous (as far as I’ve read from news reports), it’s not appropriate to bring such a polarising topic into open source software.

I’ve been using Lerna in a key project for three months now and unfortunately I’ll have to re-evaluate its use because of this change in the license. Chances are, most larger companies just won’t want to use or be associated with something this politically charged.

It’s a shame, Lerna was a good project and had lots of potential. I feel like this might quickly bury the project. :(",1535567057.0
apatheorist,"I didn't think an open-source project could ""get woke go broke."" Good luck virtue signalling yourself further into obscurity. ",1535566471.0
cooliobing,"First we have people yanking modules off of npm because something pissed them off. Now we have maintainers of modules used by a great many companies *globally* responding to events in the US.

While not in this particular case, this sets a risky precedent. Some day, a bunch of module maintainers, perhaps Lerna maintainers themselves, will declare their module isn't to be used by companies in China/Israel/Palestine because of their poor human rights record...all because they were bored one night and chose to watch a documentary on the subject.

Anyone have any examples of this stuff happening in other communities? Or is this uniquely node.js/javascript drama?",1535583569.0
saltupz,"No matter what politics must be kept separate from code, mixing the two has always failed. Same goes for religion, and code of conducts.",1535567944.0
betanii,"I'm moved and I'll do the same, from now on, only ninjas from the leaf village can use my code",1535613028.0
50653,"Well everyone is being negative so I'll just say that I like Lerna, it does pretty well at solving its problem, and I'll try to keep using it. And I like where he's coming from with this new thing, but unfortunately the effort is probably going to crash and burn.",1535572888.0
TW_26,Really stupid but at least they reverted the changes after the rightful shitstorm that ensued. Whoever was involved with this should be ashamed of themselves for even thinking about bringing politics into open source.,1535615986.0
,[deleted],1535553111.0
aichholzer,You can't. It is a one way. Hashing can't be reversed; one way. Encrypting can be reversed; two way.,1535545594.0
m03geek,"That depends on data you want to serve.  


If it's a plaintext - then there's no framework that will be faster than built-in http module. Most frameworks use so-called middleware. And the less middleware it has, more performant it would be.   
On the other hand there some frameworks that don't use middleware, like [https://github.com/metarhia/impress](https://github.com/metarhia/impress) (actually it's not just a framework, but it's an application server.   


I've used fastify as well. And it quiet nice. It's faster than other competitors like express and koa because of couple factors. First one - is fast JSON stringification due to schema usage. And it faster than JSON.stringify. Also it designed with smart logging and routing that also gives more performance.  


So my advice - first of all you should determine which tasks you will have and after that compare frameworks by that criteria.  


  
",1535548427.0
vue-rocks,I saw an article about https://www.fastify.io recently. I haven’t tried it yet though ,1535532941.0
aichholzer,"http://GitHub.com/GetRayo/rayo.js will be currently the fastest one around.

Express is sort of the slowest one alongside Hapi. Express is just the most established one.",1535544964.0
nothingduploading,"you can't use client side javascript libraries in node.js unless they have a version that is supported for commonjs.

for jquery functionality there is a node-friendly library that has the same api. I forget what its called though.",1535527370.0
ggolemg2,Have you tried the esm package https://github.com/standard-things/esm it lets you use imports/exports and you might be able to import a version of jquery that supports importing.,1535546240.0
no_user_name_is_good,"You just need to setup a path for it
So, lets say that your website files are located in
/var/www/website
inside that you have your various sub directories
website/js
website/data
website/public
website/css

place your jquery.js file into /var/www/website/js

now I'm going to use express routing for this because it is the most common.

    var express=require('express');                                                                                                                                                                                                                
    var app=express(); 
    var http = require('http').Server(app).listen(80);
    app.use('/js',express.static('/var/www/website/js'));

There should be routes setup for '/' which lead to public, one for the javascript and one for the stylesheet.",1535552500.0
akujinhikari,"Node Gyp is just terrible. I mean it's great, but I've never had more problems with anything than I have with that. I once spent the first two weeks of a new job just trying to get it to work. We finally just reimaged the machine and started over, and it worked that time. ",1535546440.0
EarlMarshal,"Gyp compiles native code to a nodejs module. In order to do that it basically has two important steps: Configuring & building. What has to be done in those steps is described in the binding.gyp and differs from project to project. For example in node canvas ""npm install"" first runs ""node-gyp configure"" which builds a one (or more) makefile depending on the libraries you have on your system. There are some libraries which are necessary to have and some are optional. After that it will run ""node-gyp build"" which will execute the makefile.

So there is a lot which can go wrong depending on the project and your system. As far as I can see the output you posted didn't contain any meaningful content other that something went wrong. It could help if you post more information about the project you are trying to use and what kind of OS you are using(but seems like windows). Check the gyp project if it even supports your system and if you installed all necessary dependencies.",1535519801.0
codycraven,"I'm the author of the post, I greatly welcome feedback!",1535516811.0
theineffablebob,How do you convert an existing app to Docker,1535529965.0
Geo_Dude,"Good post, thanks. I did not watch the video but read the blog. I have the habit of first copying `package*.json` then running `npm install` before copying the rest of the source. Then Docker can reuse images that share dependencies, and a rebuild does not reinstall node_modules when only your source has been changed. Also, I think it is good practise to add `EXPOSE` to the Dockerfile for documentation purposes.",1535534012.0
RushPL,Use node-dev instead of nodemon. node-dev is way leaner and more reliable,1535562884.0
davidmdm,I think it would. Also your then statements are redundant. You don't need them. ,1535507496.0
evs-chris,"One time, meaning not a transaction with multiple statements. Using the pool to query like that is just shorthand for checking out a connection, running a query, and checking it back in.",1535523084.0
vv1z,Expressjs ...  use it to configure an endpoint that accepts a JSON payload.  Then use the Jira admin UI to configure the webhook for the events you care about and point it at the endpoint you created,1535594754.0
Gnome_0,"you should check redis

[https://redis.io/](https://redis.io/)",1535499241.0
Move_Zig,">Learn how you can use some JavaScript/Node.js black magic to crack JWT tokens and impersonate other users or escalate privileges. Just add a pinch of ZeroMQ, a dose of parallel computing, a 4 leaf clover, mix everything applying some brute force and you'll get a powerful JWT cracking potion! JWT tokens are powerful artifacts that magicians from all over the World are using to secure modern apps and APIs. But as any other magic tool, those powerful tokens need to be used with caution and mastery, otherwise, they might become dangerous exploitable vulnerabilities.

>In this talk, Luciano will demonstrate how evil magicians can cast a JWT brute force spell to take control of poorly constructed JWT tokens. From the books of dark magic, you are going to read rhymes of Node.js, ZeroMQ and parallel computing to make this evil plan happen and by doing so you are going to make fool of all those noobs magicians who don't know yet how to safely use JWT tokens!

TL;DW?

Which tokens are ""poorly constructed""? Is it a problem with HMAC+SHA-256, with RSA? Are some people using MD5 for their hashing algorithm?",1535487508.0
calumk,"Best thing to do is also expose your data via an api route as Json.


Eg: /api/data/you/want 

Returns : { json }


Then use an Ajax call from your page to pull in the Json 

",1535491908.0
plaidshortz,"You could set a variable in a <script> tag and then reference that in your front end with window.variable.  
You can pass the variable in the render function and access it in the .ejs file. Not sure if that’s best practice though  ",1535486287.0
TheOneRavenous,"Good use of tech. Where node is the controller and the pipe to get the other pieces of tech to work. 

Would be nice to see a diagram of the arcitecture. ",1535483667.0
umib0zu,Just go to IRC. Freenode has an active javascript channel.,1535480391.0
paulcarroty007,https://discordapp.com/invite/dAF4F28,1535477773.0
tenbigtoes,Clever ass email. I like it,1535466943.0
Parasomnopolis,https://github.com/i0natan/nodebestpractices#1-project-structure-practices,1535449186.0
superreboot,"Im guessing you mean to serve the front end from an express server. In which case you usually have a 'public' or 'dist' folder which all your static assets get put into. Express documentation on this below.

[https://expressjs.com/en/starter/static-files.html](https://expressjs.com/en/starter/static-files.html)",1535445005.0
reeegen,[The Net Ninja - NodeJS](https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp) ,1535439593.0
MennaanBaarin,"The best for nodejs in general would be ""the net ninja"". Then depends on which framework you are going to use. If expressjs then Mosh hamedani is very good. Unfortunately, if you use SQL, most of those tutorials do not contain a section with it.",1535441001.0
nikola1970,Wes Bos's Learn Node or Andrew Mead and Brad Traversy udemy courses.,1535439665.0
CanadianNomad,"Honestly every computer language I've ever learned started with ""hello world!"" and there is a reason. It is like learning to say ""hello"" and ""thank you"" in any language.. You have to start somewhere, and it is as good a place as any.

That is why I'd suggest following that route. Go to node's website, and get ""hello world"" going. Then pick a framework(honestly liking Angular or React these days), and get their ""hello world"" going. Then try to get a second page working using their framework. Then try to figure out how to access a data store.

I find doing it this way learning the language feels secondary to getting mini projects done that give you the building blocks to make something bigger. ",1535454367.0
LA_producer,Nodeschool.io,1535464002.0
manisuec,Check this http://javascriptissexy.com/learn-node-js-completely-and-with-confidence/,1535531788.0
wheezy360,[learnyounode](https://www.npmjs.com/package/learnyounode) is kinda fun,1535463622.0
Downvotes-All-Memes,"I realize I’m on a Node subreddit but... why the hell would Node be *the first thing* you’d introduce someone to?

Spoken as someone trying to figure the full stack out that thinks node/servers are easily the most unintuitive part of web dev. ",1535453378.0
_marje,Just go on youtube and start a basic tutorial!!!,1535438184.0
bradrlaw,"Various editors like VS Code.


Disclaimer: Work at MS, but not related to VS Code.",1535409162.0
robinwassen,"Hyper, VS Code, Atom all have plugin systems.

I think Hyper use npm for downloading and management of plug-ins. Don't know about the others.

Node is probably one of the easier environments to build apps with plugins in since it is so modular.",1535414518.0
________________tell,"[Nest.js](https://nestjs.com) is highly extensible. Under the hood, Nest makes use of [Express](https://expressjs.com/), but also provides compatibility with a wide range of other libraries (e.g. [Fastify](https://github.com/fastify/fastify)). This allows for easy use of the myriad third-party plugins which are available.

If you look at the documentation for [improving performance with fastify](https://docs.nestjs.com/techniques/performance), you'll discover just how powerful and easy it is to switch underlying frameworks. ",1535414666.0
reddit_is_meh,"I feel like the question is a bit vague, but something that comes to mind although it's not an end user app is webpack itself, it's built with extendability via plugins in mind by exposing hooks to it's internal lifecycle...

I've written a few custom plugins for building/outputting to very specific platforms",1535409357.0
TyrionReynolds,PM2,1535439371.0
askmike,"I'm maintaining an open source (nodejs) project for the niche around automated trading over crypto markets. The core is designed as \[a message bus\]([https://gekko.wizb.it/docs/internals/architecture.html#A-GekkoStream](https://gekko.wizb.it/docs/internals/architecture.html#A-GekkoStream)) that is simply a collection of \[""plugins""\]([https://gekko.wizb.it/docs/internals/plugins.html](https://gekko.wizb.it/docs/internals/plugins.html)) that consume and produce \[events\]([https://gekko.wizb.it/docs/internals/events.html](https://gekko.wizb.it/docs/internals/events.html)) (pub/sub style).

Most core components, like database persistence, algorithmic strategies, loggers are all plugins hooked into this event bus.

More well known examples can be found in frontend land:

\- gulp

\- webpack

\- react / angular / etc",1535464014.0
meeYai,"Just because you mentioned WordPress, EnduroJS or KeystoneJS. As mentioned in another post, every NodeJS supports plugins via NPM.",1535409378.0
Str4yfromthep4th,Every node app is extensible via npm packages.,1535406749.0
robinwassen,"Xterm.js comes to mind: https://xtermjs.org

But that might be a bit overkill in your case. You could probably get away with using the existing line breaks and style a div with white-space: pre-wrap if you just want something simple.",1535414859.0
voodooattack,"Another approach is to use [qemu-user-static to chroot into your ARM image directly on the x86_64 host](https://gist.github.com/Liryna/10710751). This allows you to run ARM binaries on another CPU arch.

The process is arguably slower, but allows you to run any specialised tools compiled during the build without full virtualisation. I had to use this approach while experimenting with some more complex WebKit/JavaScriptCore setups. (It’s a special kind of hell trying to cross-compile it for another platform using the multi-arch approach)

The beauty of this is how it enables you to build and run an ARM image (e.g: Raspbian) inside of docker though. Makes it trivial to develop and test directly on your desktop/laptop.",1535426838.0
mainst,Couldn't this be just accomplished with the cloud functions+firebase instead of having to pay for app engine too?,1535400797.0
anssip,Where can I find tutorials about RESTless web services?,1535468382.0
potato-dane,"If you're already going for the Angular module architecture, I'd suggest you should check out [Nestjs](https://github.com/nestjs/nest) for the back end.",1535377393.0
Jake_Jeremy,That should work. What does not work?,1535372263.0
drunkcatsdgaf,"Is node a requirement? you can do this in shell with 2 commands piped together

   

   

EDIT: one command, --exclude is part of the tar command",1535424392.0
calomer,"I can only guess. In practice, I would suggest you directly test it.

Your class instance is not referenced or used by anything, so should be cleaned anyway. However, your interval (which you actually set to global namespace) will be active pretty much forever. As there are references running, your application will continue running and showing ""Alive"".

So the catch here is, GC will (probably) clean your class, but your code will still run. This would not be the case if you had a reference of your instance inside the `setInterval` body. If you set the ""Alive"" string inside the class as a private member, and then log that, instead; then your class object would not be cleaned periodically.",1535365350.0
rwieruch,"Hello everyone, author of the article here. I put lots of effort into this tutorial and would love to get your feedback about it :) Is there anything missing in this tutorial from a (GraphQL) server perspective? Looking forward to release this as part of my upcoming ebook for GraphQL in JavaScript and wouldn't want to miss any important aspect.",1535354749.0
r3dh4r7,"I'm still new to GraphQL, so I can't comment on the completeness or technical accuracy but... this is writing done right, mate. 👏",1535360471.0
Mr_Greyman,"Wow, nice tutorial. Next week I have a symposium about GraphQL so this will be so useful. Thanks a lot, I'll try to send you feedback after it. Thanks :) ",1535403315.0
Dantharo,"Wow, amazing, thanks.",1535405434.0
DatUnfamousDude,"Did you use GraphQL on other servers than Node? I believe it works on other languages/platforms like Django, but I’m not sure if is it worth it - your opinion on this matter?",1535415047.0
stoned_phillips,Dope ,1535416188.0
joesb,"In “Error and Validation” section, you may want to  talk about ApolloError. ",1535370835.0
baby_back_ribz,"Bookmarking for later. Will let you know what I think, currently learning GraphQL with React. Thanks OP!",1535372856.0
nahtnam,I host mine on http://now.sh. On the on demand plan my total cost comes out to about 55 cents for 7 apps. ,1535355392.0
calomer,"I use heroku with uptimerobot to serve a single application, served via cloudflare for https. Poor man's solution.",1535365610.0
VanGoFuckYourself,I use a $5/mo digitalocean instance for several apps that don't do much. I like it because they run SSDs so running npm install on complex stuff isn't super duper slow.,1535356768.0
polish_jerry,"https://openode.io  . Really cheap, starts at $ 0.2 per month
EDIT : They've updated their plans. Starts at $ 0.4 per month",1535372212.0
hsablonniere,"DISCLAIMER: I work for Clever Cloud

&#x200B;

Have you tried Clever Cloud?

Let me know if you have any questions...",1535373494.0
no_user_name_is_good,"Have you ever considered doing the hosting yourself?  

AWS will give you DDOS protection but for the most part you only need that if your doing a really large really visible website handling finances or controversial topics.

I just use a 35$ raspberry pi and it hosts my website.  I opened up ports 80/443 on my router and make sure they point to the static IP address I gave to my raspberry pi in my router settings.

Now for the external IP address that the world sees your computer as having.

If your ISP gives you a dynamic IP address you can sign up with no-ip.com and download the DUC, which updates your IP to the DNS as your ISP updates your rolling IP address they give you dynamically.

However some ISP's such as my own (teksavvy) let you pay a small fee (4$) per month for a static IP address and you can go purchase a domain name and where it asks the IP you just put in your static IP address.

Works like a charm, and costs nothing/next to nothing.",1535385841.0
feature_creep,"I rewrote my node app to run in AWS Lambda. It's been running several years for a few cents per month. Best part is, I'll never have to worry about scaling or devops.",1535358017.0
DinckelMan,"Free tier of AWS does the job for me. You could also use Azure or Google's CC. For a single app Heroku is also fantastic, but after that it's 7.50$ per app per month which makes it completely unappealing to me ",1535353837.0
fyzbo,!remindme,1535399578.0
Syneirex,"If you go the AWS route you could use Lambda if your app is a good fit (I love Lambda because it's serverless and automatically manages scaling for me) or perhaps Lightsail which recently had pricing reduced by 50%. I think their smallest VPS runs $3/month now.  


You can also put it up using Elastic Beanstalk, although I'm not sure how the price would compare to Lightsail.",1535415257.0
floodlitworld,Gandi. ,1535356403.0
rmbarrett,I have a couple on Google Cloud and Firebase Hosting. All free for now. ,1535357039.0
andywer,"Have a look at https://github.com/now-examples/next-news, for instance 😉",1535342996.0
Str4yfromthep4th,"Not every solution is for every scenario. What are your requirements? Pricing changes drastically based on the size of the business requirements. When you say using nodejs with cloud also you sound like you don't understand that these two things are completely uncoupled. Experience would be exactly the same with every cloud vendor. Pricing calculations are available on every site as well. AWS is generally the most popular but it doesn't sound like you are an experienced developer so you might want to looking into managed hosting in which a middleman service manages the server for you. This is best if you are not willing to keep the container's operating system up to date. Again, everything depends on your requirements. You can't come on here asking which cloud is better, it just doesn't make sense.",1535321746.0
cahva,"Well you could use the lean() method to return comments as normal js objects.

https://mongoosejs.com/docs/api.html#query_Query-lean

Btw, why not use the populate() method if author is related to user?",1535317239.0
rmbarrett,Great. I really dislike full stack Angular. ,1535317540.0
a_atalla,"express is similar to flask , it is minimal framework and you plug what you neec",1535317899.0
haloweenek,"Django is sync
Express is async

Django has preety much all stuff required for webapp bundled in
Express is only handling connections/ requests ",1535325686.0
djslakor,Django is kitchen sink.  Express is mostly a middleware runner and router.  You have to put the pieces together yourself in the latter.  ,1535374806.0
a_naidu,"Django is a MVC framework of python ..we use ORM (object relational mapper) in django ... maintaineance of objects should be taken into consideration while developing the web app .. where as in nodejs u can directly write queries ..

PS : both have a pretty good documentation",1535407138.0
mubaidr,"It does accept imadeData as an input. You can read file to imageData (extract portion you are interested in) and pass it to tesseract. 

On browser it will be more simpler, draw img portion on canvas and pass this canvas to tesseract. ",1535291499.0
MarcosPortoX,I had a job with tesseract sometime ago. It’s very unstable but if you use tesseract w/ tensorflow you can improve pixels,1535300629.0
PidgeonCat,Use OpenCV first.,1535307068.0
a_naidu,Try elastic search,1535311570.0
qqqyqnz,http://xyproblem.info/,1535252285.0
RobertMCodes,Doesn’t node just go up the fs looking for node_modules? ,1535481504.0
maplemonogomy,Please don't do this. ,1535251939.0
Sythic_,"You can do this. Dont recommend for anything production of course but it doesnt sound like thats an issue for you.

    npm install -g packagename
    cd you-project-dir
    npm link packagename

This will link the global package to the local project.",1535249048.0
MusicPants,This is a solid article on promises. Thanks for sharing. Maybe one additional common thing to include would be Promise.all usage. Unless I missed it. ,1535251245.0
nospambert,People have been moving to await/async,1535256744.0
RiWo,Thanks! I've been looking for simple boilerplate for ts without too much bloat.,1535281442.0
vetva,"Is this for backend code? I usually use 

require(“ts-node”).register();
require(“index.ts”);

In my index.js file, and then I can use only typescript without compilation using:

node index.js

Of course, index.TS is the real application entrypoint and index.JS is usually the only JS file.",1535274366.0
beeman_nl,Interesting. Maybe you can add a way to run the project and tests in watch mode :),1535292900.0
mistralol,"
This has absolutely nothing to do with node. Also it doesn't have a Linux client and the chrome version uses 100% of 2 cores when in focus....",1535223705.0
Str4yfromthep4th,I hate this thing.,1535224007.0
trout_fucker,"lol 2 mentions of Eclipse out of 5, Brackets, an honorable mention for Atom, yet no VSC?

I have a feeling the author has never coded a day in their life.",1535219359.0
gaoshan,I’ve had good luck with Papa Parse https://www.papaparse.com/,1535217206.0
bwainfweeze,"I haven’t used this library before, but I’m wondering why you’re calling pause() in each event?  It’s not even mentioned in the examples.  You’re not doing any asynchronous calls in this code so you can’t get two events overlapping, if that’s what you’re worried about.  Seems like it’s just adding work, and potentially causing IO stalls.  ",1535216284.0
tsirolnik,I think that performance variation will be so minor it won't actually matter with 3000 lines. I use this one - https://github.com/adaltas/node-csv,1535218087.0
fullheap,"You shouldn’t hope for a magic solution to your problem by swapping out a dependency.

Odds are that the CSV parser is **not** your bottleneck.

How often does this file actually change? Is it saved on a hard drive or SSD? In both cases, consider an in-memory FS.

Then add change detection. Only parse the file when you detect something is different (cheap way is to check time stamps or length).

Then you worry about the parser.",1535223749.0
jaunkst,Are you on Mac? There is an optional dependency fs-events that will use the OS to listen for file changes over polling. ,1535229589.0
RoyalBingBong,"I think the pausing and resuming in the data-listener is slowing things down a bit. Documentation states that `data` is emitted on every entry, thus you should not run into any concurrency problems.

To check if those are the culprits you can [console.time](https://developer.mozilla.org/en-US/docs/Web/API/Console/time) it:  

    console.time(r.symbol);
    csvStream.pause();
    ...
    csvStream.resume();
    console.timeEnd(r.symbol)
",1535545740.0
bwainfweeze,"I missed that you are trying to parse a file that’s still being written to.  Sounds like what you’re doing is rereading the entire file every three seconds which of course will eventually go past three seconds and then you’re in trouble.

Instead of passing the whole file to the parser every time and rereading it, you probably want to implement “tail -f”, or use an existing node library.  Build your own stream and pass it to fast-csv.

",1535996790.0
lulzmachine,"3000 lines isn't too much. I would probably just open it with fs.readfilesync for every change and just iterate over the lines. It'll take a little bit of code to split on your separator and keep strings intact but. 

Personally I've found the available csv libs too much effort to deal with and rolled my own. But ymmv ",1535214392.0
thepotatochronicles,"await Promise.all([promise1, promise2, ...])

Do note, however, that this exhibits a “fail fast” behavior unless you explicitly add an error handler to each of the promises. ",1535208135.0
download13,"As others mentioned `Promise.all` is the simplest way to do this.

For more complex behavior you can use the [bluebird library](http://bluebirdjs.com/docs/api-reference.html). Under the Collections section you can see async variations of most of the standard Array methods. They even let you specify how many items to process at a time which can be handy if they're making network requests or contending for some other limited resource.",1535218590.0
pe8ter,"I'm curious about what issues you're having with the `Promise.all()` solution, code-wise. That link you posted in the update looks like a novel solution, but not something I'd expect to see actually used since the standard practices around Promises are pretty straightforward.",1535267678.0
linh1987,"No offense, guys. But this is why you want to learn about JS fundamentals, especially Promise first. Await is just built upon Promises.",1535230547.0
NoInkling,"The workaround in your update might work, but it's not the way you'd usually go about it. Usually you'd just ""hoist"" the async context up the call stack to encompass your synchronous code - in other words, if you find you need to wrap your whole program in an `async function main() { ... }` in order to retain the correct order of operations, then that's usually what you do (in the future, top level `await` may be possible to help alleviate this need). A library that imperatively ticks over the event loop in a synchronous context is a red flag imo.",1535270822.0
peanutbutterandbeer,"> No matter what I did I got ""await must be called in async function"" and wrapping it in an async function didn't work out either.

try this...

    function promiseX(name, time) {
        return new Promise((resolve, reject) => setTimeout(function () {
            console.log(`promiseX done: ${name}`);
            resolve(name);
        }, time));
    }
    
    (async function() {   
        const [result1, result2] = await Promise.all([
            promiseX('first', 5000), 
            promiseX('second', 100)
        ]);
    
        console.log('Promise.all done: ', result1, result2);
    })();
",1535290471.0
bipolarNarwhale,I believe this is what you're looking for. https://stackoverflow.com/a/35612484/5745521,1535208143.0
no_user_name_is_good,"You can attempt to parallel process them with the async library but note that if there is any I/O it will be performed in a series.

    var some_function(o,c){
     console.log('function performed');
     c(null,true);
    };
    var operations=[];
    var array=//the array of all values
    array.forEach(function(value){
     operations.push(async.apply(some_function,value));
    });
    async.parallel(operations,function(err,res){
      if(res){
       //houston we have liftoff
      }
    });",1535232021.0
coneillcodes,"Because that's not valid syntax. You need {'field.sortparam': <sort direction>}

https://mongoosejs.com/docs/api.html#query_Query-sort

",1535202627.0
jenkynolasco11,.sort({ “field.sortParam” : 1 }),1535202317.0
broofa,"The `URL` class is useful for this sort of thing.  E.g.

    const url = new URL(location);
    url.pathname += '/post'
    
    // You can use url objects anywhere you would use a url string (generally).  E.g.
    window.location = url;
    $.ajax(url, ...)
    document.querySelector('#someLink').href = url;",1535205007.0
compagnt,Maybe add location.protocol to the front?,1535204905.0
rawhat,"https://developer.mozilla.org/en-US/docs/Web/API/Location

You should be able to grab something like `location.host + location.pathname + /post + location.search`

Hope that helps!",1535200974.0
dakaza98,"The courses seem great and has good ratings on their site but if you search for reviews on udemy (the company that host the courses), the story seems a bit different. Most people give it 1/5 or 2/5.

Has anyone done their courses recently and how was your experience? ",1535220780.0
,"Express.js is standard nodejs framework for web applications, both MVC and API. For fronted, there are three popular frameworks: Angular, React and Vue. You can pick one of them. Or you can just use one of the templating engines and skip the front end framework. MongoDB is usually used with express with mongoose as a ODM.",1535188997.0
lulzmachine,Is your goal to learn or to finish a product? ,1535194822.0
MatthewMob,"React / Angular / Vue / Ember for front-end UI.

Express / Koa for web server framework.

Mongo / Postgres for database.",1535196759.0
AtroxMavenia,"It heavily depends on what you know and what you want to accomplish. There is no right answer here. Instead, you should either provide a lot more details about what you want to do, or research a bunch of technologies and find out which ones have the trade offs you can live with.",1535228988.0
elrodrix,MERN is your solution.,1535188828.0
delventhalz,"I will echo everyone saying Express/Koa and MongoDB on the backend.

On the front-end I will differ and suggest [Mithril](https://mithril.js.org/). It is fast with a dead-simple API, so the learning curve is quite shallow. You should be able to pick it up quickly, and there is very little magic between you and the Javascript fundamentals you already know. I actively dislike Angular and Vue for this reason. Way too much bullshit to learn and wrestle with. React is fine if you don't want to use Mithril.

I'd also checkout [Bootstrap](https://getbootstrap.com/) for styling. It will provide you a bunch of pre-built CSS classes and components. Just throw them together with Mithril and you have something that looks decent with minimal effort.",1535204422.0
erickestefano,https://nodeschool.io,1535161566.0
fiugrad,"Check the network tab, to make sure you're only making 1 call with the onClick",1535154976.0
Gnome_0,"reading  the express-boostrap repo  code it really  depends from developer to developer right?  i had a simmilar training but they  told me that i should never cascade thens in nested promises

""how they told me is wrong ""

    Promise1()
    .then(result1 =>{
        Promise2(result1)
        .then(result2 =>{
            ""do something with the result""
        })
        .catch(error =>{
            ""do something with the error from promise 2""
        })
    })
    .catch(error =>{
        ""do something with error from promise 1""
    })

how they told me i should nest promises

    return Promise1()
    .then(result1 =>{
         Promise2(result1)
    })
    .then(result2 =>{
        ""do something""
    })
    .catch(error =>{
        ""error from one of the promises""
    })

&#x200B;",1535152488.0
notkraftman,Why use postman when you can use your tests?,1535170077.0
Lost_sand,I skim everything in programming articles that isn't code,1535156654.0
no_gaz,"Thanks for this! Currently in bootcamp myself, and right in the middle of learning all of this.

One note: try to be a bit more gender neutral with your references instead of indicating your trainees are all male if you're wanting to train up a diverse workforce!

Edit: lol at the downvotes. Writer appears to be writing about their workplace, and most are looking to find better ways to be inclusive, which is why I said something. Some of the examples I'm referring to:

> Specially because it usually gets a little bit tedious and useless since everybody has his own vision of use cases for each particular status code according to each flavor and knowledge about the given case. 

> As we are developing an API we have to watch out for the declarativity of our endpoint responses since it will be all that a client, either a frontend, other API or some other service, has available to know what happened with his request.

> By understanding all those points, the trainee will have a lot more knowledge of what is going on under the hood of the server and will be more conscious of how the new code, will be integrated with the rest of the server, which usually implies better solutions and in a happier trainee because he really understands what he is doing.",1535161584.0
,[deleted],1535151610.0
davidmdm,"I've been using it, and i have warmed up to it. But I don't think it's a necessarily better choice. It depends on the scale of the project and the experience of the team ",1535160897.0
BrokenPhoneBooth,In my opinion it’s vastly superior in just about every way.  Then again I haven’t done a project with node on the back end in a few years.,1535151411.0
bablador,"I don't know if it's a trend right now, but I was relieved when switched to typescript from pure JS. Gives me a pleasant layer of abstraction plus ability to bend the language to my will when necessary.
Totally recommend it",1535148105.0
Gnome_0,"kinda, it really has a lot of advantes than plain javascript  for example the project im doing right now im using nestjs for that reason and as a java developer interfaces are a godsend",1535152763.0
TheNoim,"I use it in production. It is very fast and the development process got speed up a little bit with async await natively supported by fastify. 
Negative side:
If you google something with fastify, google often replaces it with restify :P",1535233981.0
phouri,"Wasn’t aware of it, but looks promising considering the stars and the main contributors.",1535147772.0
panbhatt,"Yes, we are using FASTIFY in PRODUCTION. 

we are using many of the fastify modules like fastify-mongo (we modified this for mongo replicaset). we are not a very big shop (but a small part of a GIANT Enterprise), & its being used internally in my team (because i advised it) and till now, i support any deep dive secrets or major problem with it.",1535380687.0
spira_mirabilis,I moved from Hapi to Fastify. It's modular and I have the full control of what's happening. ,1535149752.0
secoif,How are you updating and saving the document? Maybe try use atomic update calls like `Model.update` or `Model.findByIdAndUpdate` instead of `doc.set` & `doc.save`.,1535124578.0
no_user_name_is_good,"    var saveDoc=function(o,c){
     db.insert(o.doc,function(err,res){
      res=res.insertedIds[0];
      db.findOne({_id:res},function(err,obj){
       otherFunction(obj,function(err,res){
        if(res){
         c(null,res);
        } 
       });        
      });
     });
};",1535148387.0
SnowyMovies,Use promises,1535124076.0
DrPapaProffesorRugi,"I like it! Maybe we could join forces to create something cool?

https://github.com/papa-rugi/cloud-shepherd",1535154845.0
Germanazo,"I made this package with love, and am looking for some feedback, this is my first nodejs package and the work is still in progress.

So any kind of feedback would be appreciated, thanks in advance.",1535124320.0
ilja903,"joi, ajv",1535123031.0
mbael,I’d recommend [class-validator](https://github.com/typestack/class-validator) for validating data and [class-transformer](https://github.com/typestack/class-transformer) to serialize JSON.,1535111720.0
newreddit0r,"From what you are saying, there is definitely something wrong with the app (username case hints that).",1535220746.0
MatthewMob,"Google. There are literally hundreds of tutorials.

Some good ones are the CodeAcademy Express tutorial, MDN Express with Node guide.

There are a dozen great Udemy courses. Wes Bos also has a good Learn Node course on his site.",1535103314.0
clarke12342003,The net ninja on youtube,1535107395.0
Gnome_0,"if you are starting an adviace

you can use tutorials/read books   but always build something  on your own (that is based in what you have learned)  this not only will help with how you tackle  **algorithms**  but  it will save you for the biggest problem novice node learnes fall (tutorial puragatory)

​

i learned node like this

first is vanilla javascript 

i (read/see something about node )

build something on my own about what i learned

after i have learned most of the basics (and practicing on my own )i started seeing tutorials on how to build x app step by step

​

​

the path i took :

vanilla JS (this is the mosts important part)

[https://github.com/getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)

for me it took me 2 weeks to learn most of what it is in this repo

next is node js

[https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp](https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp)

start with the first 10 videos then build something with what have you learned then continue with http and express (don't follow the to do app for now) build something small with what you have learn

now you can follow the tutorial for the to do app

**if you really want to learn build something on  own your  more than  you watch/read,  it doesnt matter if it is small things**

​

​

​",1535133832.0
erulabs,"The logic seems right - just make sure, when storing tokens like this:

1) If you're using a relational database to store these tokens, ensure you have an index on the access and refresh token columns.

2) If the authenticated pages are cacheable (and even if they're not), it's vitally important to add a header like `Cache-Control: private` - which will ensure no CDN, Proxy, etc caches the page and serves it to other users (in general, for safety, I consider it fairly bad practice to have sensitive pages on ""shared"" URIs - in other words ""mybank.com/myusername/sensitive"" is okay, but ""mybank.com/sensitive"" is bad, since a simple caching mistake can expose one users page to a different user entirely.

3) do not co-locate them with data which _cannot_ be lost - in other words, since if this data is lost, all it means is all users are logged out, it can and should be stored _at least_ in a different database on the same database server. This will allow you to tune the performance / cost ratio between data that _can never be lost_ (accounts, password hashes, etc) and data that _ought not to be lost_. I typically silo this - ie: if my account data is in MySQL, access tokens live in Redis (or a differently tuned / named MySQL database). Redis is nice because it's extremely cheap and effective for these key-value queries, but remember to enable disk persistent (AOF or RDB).

4) Is there any reason to not _both_ check for req.user in controllers -and- have the authentication handler just 403 the request? It seems a bit scary to pass the responsibility on to the controllers (resolvers). I can easily imagine being rushed and tired and deploying a route without the proper req.user check (think 2 years from now when you forget how this system works)

Good luck!",1535116325.0
cutcopy,"And I'm also using CORS, hosts validation, HTTPS etc, Same-Site (for those that support it) etc.",1535102581.0
xevolito,"Thanks for sharing, I have a similar setup 👍

Any caveats you’re worried about?",1535112738.0
imjust_observing,"While we’re here, does anyone have some good resources on this topic? I’m in the middle of migrating my project from firebase to custom backend and tbh the most frightening thing is security and implementing all the tokens/auth system right.
How do one chooses correct approach for this?",1535123034.0
Gilstroem,"Semi OT, but, What tool did you use to make this image? ",1535127695.0
cutcopy,"For those that want to take a look at the actual middleware code;

[https://gist.github.com/mhaagens/d4f191c8b466c5cf548805b1cc7bfd3b](https://gist.github.com/mhaagens/d4f191c8b466c5cf548805b1cc7bfd3b)  


Please let me know if something looks completely off.",1535134218.0
Akavy,"I actually would also expect it to exit, but the code does do something you don't expect, I think.

An async function returns a Promise. When you call the print() function, you call the Promise, but don't wait for it to resolve. So, the interpreter already goes beyond the print() call while the function print() is yet to be executed. Writing 'await print()' would probably let the program terminate.",1535108004.0
kredditacc96,It does in my machine. What's your system?,1535101877.0
Gnome_0,"&#x200B;

&#x200B;

 if you are using async you are returning a promise so you should resolve that promise 

    async function print() {
    	await console.log('print')
    }
    
    print()
    

&#x200B;",1535153238.0
ChronSyn,"Express has been around for many years and is still going strong. It may not have had any major versions for a while, but that's because there's not much it can't do already. Lots of other projects use express as their core.

People use it because it works AND offers the flexibility needed. It doesn't have any opinions on what or how you do things. Want HTTPS? Easy. Want HTTP 2? You can plug in any server-provider library. Want to run your own functions on each request? No problem. Want websockets that integrate with your REST-based sessions? Possible.

Learn it on it's own, and then learn a front-end framework. To begin with, use something like EJS to render content. It's the super-simple approach and should help you understand how node and express work.",1535102838.0
trout_fucker,"Node is JS. Learn JS, then use Express.",1535088210.0
jkoudys,"React is a great thing to learn with, because it's really a much smaller library than people imagine it to be. Angular comes with a lot of ""microlanguage"" and you're often strictly required to do things the angular way. React is just a simple virtual Dom (ie a way to build your Dom that's not directly building it from html), and a handful of lifecycle methods that tell it how to ""react"" to changes. You're still writing JavaScript directly , not putting a bunch of control flow logic into html.

Express is still extremely common, and a simple enough lib that I wouldn't lose sleep over the decision. Personally I don't use it much anymore myself, because I find I'm better able to do exception handling in async code with koa, but the bulk of the work is simply setting up routes and param names. That's something generic enough you will do it no matter what, and often simple enough you could automate refactoring it to a whole other language in little time (just the routes, that is, not the code they call : ) ). If I'm building a graphql backend, I'd be fine still using express, it would simply not see as much use. ",1535091895.0
kifkev91,"I don't really understand what ""moved on"" means in this context. I mean there are many other options like django and rails to build web apps with, but as far as i know node based frameworks like express or meteor are still the newest shit on the market (beside go).",1535100398.0
creathir,"Responding to your final question:
You’re asking 2 things here. 

1. Node is just a way to run JS outside of the browser. You can do many things with it, from task running, to building webapps, to exposing web servers (Express) for consumption by those web apps. The possibilities are just about endless. 

2. “Learning Node with Angular/React/something else”
You don’t have to expose an Express web server with Node, and even if you did, you don’t have to build a JS front end for it. You could just as easily manually call it using something like Postman, or a different language altogether like Java or C#. 

Angular/React are just front end frameworks. Used to make building a front end web app easier to create. They certainly can consume services exposed from Node, but don’t have to either. 

The two technologies (front end dev and backend Node) are mutually exclusive and are not particularly reliant upon one another, minus a few exceptions surrounding the modern tooling used today for building a front end app using once of these frameworks, which is highly dependent on Node for making development/compilation easier. 

Hope this helps. ",1535110212.0
vladjjj,"Just curious, what have you heard the industry has moved on to?",1535111634.0
equus_computus,Express is very minimal framework. So learning it will not take too long. It not comparable with rails or django. Also I do not think that whole industry has moved to something else. There are a lot of stuff written in express.,1535089506.0
BeerRush,It's not about learning a specific framework. It's more about being able to adapt to any framework.,1535088387.0
pingueame,"Learn something never is bad


I m trying to learn cobol .., why? I don't know yet",1535116748.0
secoif,"Express itself isn't really much, its core functionality is basically:

* Convenience helpers on top of node's http request and response objects e.g. `res.json(data)`
* A ""router"" mapping URL patterns to handler functions with simple parsing of url params e.g. `/user/:id` -> `req.params.id`
* Middleware + error handling pattern i.e. the `next` in `req, res, next`
* Massive community of official and 3rd party middleware.

After you learn Express, you'll find most other http tooling is just different flavours of the same thing, even in other languages.

e.g.

* [Clojure (Ring)](https://ring-clojure.github.io/ring/)
* [Ruby (Rack)](https://rack.github.io/)
* [Python (Tornado)](http://www.tornadoweb.org/en/stable/)
* [Erlang (Cowboy)](https://github.com/ninenines/cowboy/blob/master/examples/rest_hello_world/src/rest_hello_world_app.erl)
 
They're all roughly the same as this, give or take:

```js
const app = Express()
.get('/pattern', (request, response) => {
  response.end(200)
})
.listen(port)
```

I suspect any future successor to Express will largely look like Express.

Beyond the services provided by Express, you're getting into deeper levels of abstraction which may or may not be reusable knowledge with other tooling. Learning Express is a safe bet.",1535128609.0
blackxored,"I don’t know where you’ve heard the industry has moved on from Node, it’s more like some people haven’t moved on from legacy *to* it, and very specific use cases for different stack that while valid in those cases, get often overhyped (i.e Go, Elixir). Anyhow, just choose a frontend framework that supports SSR if needed (most do) and GraphQL (JavaScript) as your backend. That’s really the hot stack right now IMHO. ",1535164587.0
equus_computus,I think [https://ghost.org/](https://ghost.org/) is based on MySQL.,1535088877.0
elrodrix,Hi,1535093595.0
JayMe8843,Hi,1535088792.0
drog27,"Hi, i will implement graphql in a project, its difficult to found info about graphql yet, so i created this starter project. any feedback will be appreciated (im comming from the world with java and spring so im a noob programming in node.js). And sorry for my poor english.",1535069774.0
robinwassen,"Your code works as intended in the latest stable (2.0.8) and latest beta (v3.0.0-beta.7) in Windows.

What operating system are you on?

Changed the [electron-quick-start](https://github.com/electron/electron-quick-start) project to the following code for a minimal reproduction case:

    <!DOCTYPE html>
    <html>
      <head>
        <meta charset=""UTF-8"">
        <title>Hello World!</title>
        <style>
          html, body {
            background-color: white;
          }
        </style>
      </head>
      <body>
        <script>
          window.addEventListener(""dragover"", function(event){
            event.preventDefault();
            event.stopPropagation();
          },false);
    
          window.addEventListener(""drop"", function(event){
            console.log(event);
            event.preventDefault();
    
            event.stopPropagation();
            displayImage( event.dataTransfer.files[0].path.toString(), true, -10);
    
          }, false);
          </script>
      </body>
    </html>
    

",1535090022.0
pxt3r,I recommend using the requests library but this could help https://stackoverflow.com/questions/40537749/how-do-i-make-a-https-post-in-node-js-without-any-third-party-module,1535052523.0
AttiiMasteR,"2 common approaches: 


1. You store an author object that contains all ids of all posts from the author

2. You store the author id in every post. 

In your case solution 2 seems to be the better fit.",1535048647.0
dk01,How’s this different from pkg?,1535057735.0
haCkFaSe,I've had a lot of issues with nexe in the past and had nothing but success with pkg.,1535073882.0
SOLAR_FIELDS,"I ended up using this a few years ago when I needed to ship a single executable (no dependencies). Aside from it taking like 10 minutes to compile a tiny Node app it worked pretty well. Glad to see it’s still being maintained, it’s a nice tool for certain circumstances.",1535054144.0
merkur,"I tried to use this, as it would be super beneficial. I just never got past the issue of using external resources. For instance, I have a Node script which takes as an input a spreadsheet. I cannot include the spreadsheet in the executable because it's a different one on every usage... I read the docs but didn't understand how to approach this. When I ran my script passing the spreadsheet as parameter, it complained that this resource (the spreadsheet) had not been packaged inside the whole thing...",1535055296.0
john-j,Used it once to create simple self-contained cli tool and it was pretty straight forward to set up and worked without any problems.,1535099047.0
weasel5053,This bundles a specific node runtime with your app. The app itself is visible in clear text at the end of the resulting executable when viewed with an editor. You can uglify your code and pipe it in though. ,1535114519.0
aloisioa,"who has already used this tool ? Do you have any advice ? Because I also heard about Electronjs it's the same solution ?
",1535058430.0
iends,At quick glance it doesn't say which platforms this bundles for. Is it all platforms node supports?,1535056580.0
kishichi,"This ""article"" is quite some hot garbage. Basically a code dump with minimal code explanation.",1535081934.0
BehindTheMath,"`/` means the root of whatever the router is mounted on. Since the router is mounted on `/users`, the root of that is `/users`. If you would use `router.get('/users',...)`, that would compile to `/users/users`. ",1535031667.0
Razoyo,"You are correct that your two code instances would produce the same effect, but, that isn't the point. The app.use function allows you to organize various sections of your API or website in a separate file.

Express does this, I believe, to simply give you examples of best practices in organizing route code. In your usersRouter file, you can organize your sub routes (and even create sub sub routes by extending the code to do so). This allows you to do something like this

&#x200B;

router.get('/', (req, res, next) => {

   // respond with a login function for 'users'

})

&#x200B;

router.get('/billing', (req, res, next) => {

  //respond with billing settings for your user

})

&#x200B;

If your front end is an app like Angular, React or Vue, you can also use your routes to deliver separate apps for the various sections of your site.",1535038796.0
a_atalla,"do your researchesin the top three (express, koa and hapijs)",1535024406.0
mbael,"hapi / koa / express / nest

You can’t be wrong.",1535035732.0
cmpaul,"I work as a dev on an MEAN stack marketplace app now. Express is fast, scalable, and has got a fantastic ecosystem and community. ",1535032846.0
ilja903,feathersjs or koa. If mongo is obligatory keystonejs,1535058719.0
ChronSyn,Linking a page that provides no info on a project and asks for browser permissions such as location or notifications is not bringing any sort of value.,1535129803.0
robinwassen,"I am not that experienced when it comes to video streams or how Twitch works - but just after looking at the network tab when a stream is active it seems like one .m3u8 is a 5 second chunk of video (a new .m3u8 file is requested every ~5 second).

So it is not that strange that VLC get stuck when you open that file since it probably does not contain more than 5 sec video data.

Cannot find any information for how to access the stream properly.

One option that is borderline stupid but very simple, can't you run a headless browser that support video and use that one to view the stream and screenshot? :)",1535051782.0
konnextv,"Do this (fps filter), just pass the m3u8 link as the input: [Create a thumbnail image every X seconds of the video](https://trac.ffmpeg.org/wiki/Create%20a%20thumbnail%20image%20every%20X%20seconds%20of%20the%20video)",1535033067.0
TheFlashBold,"After a quick google search.  
Use [https://streamlink.github.io/](https://streamlink.github.io/) to get the stream, then use ffmpeg to create images from it every second.  
`ffmpeg -i <streamurl> -r 0.5 -f image2 output_%05d.jpg`

[https://stackoverflow.com/questions/8679390/ffmpeg-extracting-20-images-from-a-video-of-variable-length#answer-14710478](https://stackoverflow.com/questions/8679390/ffmpeg-extracting-20-images-from-a-video-of-variable-length#answer-14710478)",1535112162.0
pxt3r,"Selenium or Nightmare JS

Edit: I've done almost the exact thing in Nightmare, so I'll point you into that direction.",1535052390.0
,[deleted],1535004589.0
soundmanD,"Without seeing your test setup it's pretty hard to explain what to do.

But have you tried using mock.stopAll() in the after or afterEach event life cycle? Depends on what you're doing but ideally if you've mocked something, you should always reset it back to the original start after each test or after all tests in the describe block.",1535030736.0
alessioalex,"Been using proxyquire since forever, so far so good.",1535038411.0
MzCWzL,Why does it need to be faster than 20ish ms? Are you trading? You need to figure out how much latency there is between your node server and the other server - that will be your limit. You can’t execute faster than the speed of light. ,1534989553.0
SafetyMoose22,"I’m going to guess that hashmap comparisons takes the longest out of these actions. Since it sounds like all the servers are in the same data center.  If your objects are massive in size (e.g. product catalogs)  then it just takes time to process that data. Removing unneeded entries could be a start. 

Do you have numbers on which actions are taking the longest? 

Also check to make sure your node application is running in production mode and not development. 

Also you might just need more memory or cpu speed. ",1534985968.0
DaJuukes,"Lmao definitely wrong ""node"" type ",1534985651.0
nandakishoreb,Check this https://newrelic.com/nodejs,1534964796.0
mbael,What about [swagger](https://github.com/slanatech/swagger-stats/blob/master/README.md) ?,1534966045.0
ItalyPaleAle,"This is an open source solution I know. I've tried it once, but didn't really play with it too much: https://prometheus.io/

A commercial, cloud-based solution is also Azure App Insights: https://docs.microsoft.com/en-us/azure/application-insights/app-insights-nodejs (your app doesn't need to run on Azure; also, disclaimer: I work for the Azure team)",1534995592.0
tswaters,"Quick google search -- https://github.com/capaj/koa-monitor

It appears to be kind of opinionated, pulling in socket.io, spinning up a dashboard in the application itself...   I'd much prefer json outputs so some monitoring process can read the information and show pretty graphs (i.e., graphana)

If I was to use that, I'd probably fork it, rip out everything but the interesting bits (the middleware that does monitoring) and just output the raw json data.",1535000573.0
BloodAndTsundere,"I'd consider just going through the official guide:

https://mongoosejs.com/docs/guide.html

Pretty thorough, but not overwhelming",1534969059.0
kevin2107,"Damn kids and their programming, back in my day we used to have to actually write things by hand!

All things aside this is amazing, great job!",1534986293.0
,Boring boilerplate bullshit. ,1535100313.0
Ronniemanseaman,"Run them both on your server, then have nginx point the urls to each as you please",1534951469.0
mbael,"Set up some nginx and point each “virtual hosts”, record (proxy_pass) to the correct express instance, so you can have them separated on different domain. (game.yourportfolio.com, etc)",1534952317.0
ChronSyn,"Nginx is definitely the better option, but did you know that an express app can have subapps?

Essentially you have your master app which listens to a port and does your config stuff. It also handles your routing. Your sub apps handle their own features and their own routing.

Your main app would `app.use(""/a-sub-app-route"", mySubApp)` (where mySubApp is a variable that's requires your sub app).  Requests to '/a-sub-app-route' will be handled by the sub app.

It does require specific setup and is harder to do on existing apps, but it's possible.

https://derickbailey.com/2016/02/17/using-express-sub-apps-to-keep-your-code-clean/ should give you an idea.",1534959017.0
no_user_name_is_good,"Hello, you'll want to use a websocket and a stream, then you send the file through as binary in chunks.  As the chunks come in client side you push them into an array.. here is an example

    var get={};
    get.stream=function(o,c){
     var stream = ss.createStream();
     var binaryString = """"; 
     stream.on('data',function(chunk){ 
      for(var i=0;i<chunk.length;i++) {
       binaryString+=String.fromCharCode(chunk[i]);
      }  
     });
     stream.on('error',function(err){ 
      if(c){c(err);}else{return err;} 
     });
     stream.on('end', function () {
      var data=window.btoa(binaryString);  
      c(null,data); //you can call the callback here when done
     });
     ss(socket).emit('file.get.stream',stream,o,c); //you can also send the callback to the server and it can say done
    };

So why the heck do it like this?  Because sometimes you don't have a real file location, its just a binary blob in a database.  With this method you could send either/or.

You can setup progress via the data event to check progress/total size.  At the end of it because it is all loaded into the client side ram they can instantly download it and write to hdd once it's all assembled.

This also opens up the possibility of setting up a blank array to contain the data, and calling out to other users who may have bits of the file and pulling pieces from them and placing them in the correct array locations a la torrent technology via webRTC so your webserver does not have to necessarily shoulder the full burden of file transfer.

It just puts you the developer in the drivers seat with full control over the data flow.",1534951217.0
SibLiant,"Then your ORM has failed to make things simple for you and I would def bail on it.  I use ORM when I need to preform common easy tasks which is a LOT of the time.  When the tasks are NOT common or easy and you cant get to a realtively quick solution with the ORM, then break out the big guns and write raw sql.  This seems really simple from my point of view.  Perhaps I'm missing something.  Just because you have a class that uses 50% ORM calls and say 50% raw sql for more complex manipulation -- well no problem.",1534950280.0
stuckinmotion,I've found my experiences with query builders has been much better than with 'full blown' ORMs. Libraries such as https://knexjs.org/ or Dapper on .NET have generally felt like they help more than hinder. Proper ORMs end up feeling like a battle as soon as you do something beyond simple queries.,1534949401.0
yramagicman,"I'm not much of a node developer, but in my experience, using an ORM for me has been more of a security measure than anything else. I like not having to worry about SQL injection. I know there are good, simple ways to avoid SQL injection vulnerabilities, but I like avoiding the mental overhead. Granted, a bad ORM is absolutely going to be worse than no ORM at all. ",1534949052.0
Mennion,What about combine? Just use ORM for basic use cases and for edge cases write SQL yourself.,1534951753.0
bigorangemachine,"When I did PHP; using a PDO was preferred so that you could migrate to a different DB if needed.

I think that's a part why you should use an ORM.

Otherwise I usually end up writing a layer that is like an ORM anyways. I haven't really come up against anything that makes me hate Sequelize. So in general I think not using an ORM is a disservice to your client. There is also a lot of people who aren't down with raw queries. So that would be a tech dept issue in a larger team",1534955990.0
freebit,"Relevant: https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/

Relevant: http://blogs.tedneward.com/post/the-vietnam-of-computer-science/",1534956499.0
CSMastermind,The Node ORM market is brutally bad which certainly doesn't help things.,1534959794.0
CAH_Response,"What complex queries are you doing that you can't do in a .raw?

Use it for what it is, but I don't thinking dumping it wholesale makes a ton of sense.",1534953669.0
jordanaustino,"https://martinfowler.com/bliki/OrmHate.html
",1534979587.0
Kanthic,Not really sure I understand this considering ORMs allow you to drop down to pure sql. Use the ORM interface for your common tasks then use the ORMs execute query interface for complex queries. ,1534952804.0
Nephelophyte,"As a lot of people have noted in this thread objection.js is a lot better. It's credo specifically states that it ""stays out of your way"".  Stay away from bookshelf, I'd kill it with fire if I could.",1534955656.0
scaleable,Id say one of the main reasons of using ORMs is to get queries directly typed into the language. And js defeats this purpose.,1534960401.0
jordanaustino,"I think a lot of ORM patter issues are often Active Record pattern issues. The ORM obfuscated some unnecessary overhead and makes it harder to make simple errors that cause large security concerns and generally make a lot of code very readable.

Active Record pattern creates a very tight coupling between data architecture and codebase design which can make editing data architecture or schema quite difficult and lead to difficult to fix increasing complexity codebases. Generally, I prefer using a data mapper pattern. Although they both certainly have places.",1534967483.0
yarauuta,"I used Mongoose and Sequelize several times and had similar experience.

I don't want to be mean but both projects are really bad.

Let me give examples of stuff that gets me mad:

Sequelize doesn't have a simple disconnect nor a way to set collations on columns, Postgre is not compatible with SQLite but it is treated as if it was, I spend most of time trying to find how to do shit via Sequelize and trying to find examples.

Mongoose code is bad by my standards: huge files, huge functions, bad variables etc.

The documentation is really messy provides you 2 ways to do stuff (via Mongoose or via driver, it is  confusing), has it's own way of doing validation so as soon you are stuck with it you are fucked to migrate.

",1534971868.0
Lambotherambo,"What, the entity framework has satisfied all of my needs. Explain what the entity framework didn't satisfy for you?",1534981939.0
ukralibre,"You are right. Orms are evil :) good orm must be easily extensible out of the box, else its a toy",1534988266.0
ExoticCoder_57,"I think the use of an ORM is more for security things than any other stuff. The use of an ORM help on prevent things like SQL Injection and is a quick solution to do easy consults to the DB. But, for more complex stuff I prefer do it with the official drivers of the DB.",1534982661.0
gibriyagi,"Agree. I think once you go beyond the basic crud ops ORMs become a difficulty instead of making life easier. Same goes for the query builders since it is difficult to support everything especially complex analytical queries. Maybe we just need a tool that simply creates/migrates databases from code to accompany raw sql.

Most people prefer ORMs so that the software is interoperable with smilar databases.

Anyone believing this is a valid concern?

",1535012812.0
ragnese,"I'm fairly new to Node, and I agree- especially for Node/JS.

In strongly typed languages, an ORM makes it easier to get a ""User"" object out of the database and saves you the tedium of writing a bunch of HashMap <-> ModelType code. So, I can forgive it in those languages. In JS, you're just getting back a bag-o-data anyway, so it's not saving you much effort.

But even then, I still don't really like ORMs for the following reasons:

* The abstraction is **always** leaky. You can never get away with pretending you don't know it's MySQL/Sqlite/PG underneath, because the ORM features will behave differently or not at all depending on what it's actually powering.
* Harder to do JOINs, etc. What if the way I store my data doesn't match 1-1 with how I want to model the data in my code (because I normalize my shit)? ORMs make this way hard/cumbersome.
* Having the model object read and write itself to the DB is an anti-pattern, IMO. If the objects you pass around are able to mutate the outside world, you will have a much harder time writing unit tests, and reasoning about your code. Objects should be dumb. You pass them around, change them up, etc, and **then**, when you've reached the end of your logic, you persist the changes to the DB by handing your object to some database class, where all functional purity goes to die. But at least all of the global state manipulations are guaranteed to happen in one place. You can then unit test most of your code and mock/stub your database class for integration tests.",1535028087.0
digitalz0mbie,"ORMs have always confused me.

Wait you need to learn a new (usually incomplete, or buggy, or quirky) query language just to avoid learning the real query language.

Just a pointless layer of abstraction. SQL is easy to grok. The only thing you need is a clean api to execute queries and receive results in a usable result object.

Please don't let the top rated comment discourage you, your orm hasn't failed you. The idea you need one has.

Once you learn SQL the need for an orm falls away.

Developers love (re)building frameworks to avoid learning the underlying pattern.

Developers always seem to think their new framework will solve their problem, but they never seem to realise their real problem is the one sitting between keyboard and chair.",1534996227.0
hallcyon11,ORMs and query builders are just more needless abstractions.,1534999884.0
0x263a,Rule no. 1: Never use an ORM!,1534955346.0
,[deleted],1534961373.0
MaxUumen,Get a job. You'll learn and get paid ;) ,1534951874.0
fortcodenite,"I recommend [safaribooksonline](https://safaribooksonline.com). Great variety of books, videos and live courses (their webinar software is a bit outdated though)",1534953277.0
gonatee,Works with 2 indexes max with MariaDB,1534926177.0
broofa,What does this have to do with node?,1534942893.0
WhyAyala,Was this posted by a bot? This has nothing to do with Node other than the word Node is in the site name.,1534945118.0
mbael,"You should switch handlers between PUT and POST. PUT’s to edit existing resource yet the latter one is for creating new one (most of the cases). [more info](http://restcookbook.com/HTTP%20Methods/put-vs-post/) 

To answer your question, you should send ID in params when the method’s DELETE and body if it’s POST.",1534917895.0
a_naidu,Params are generally used in case of GET requests.it's better if we use body params in case of Post request.,1534911460.0
DangalfTheGray,I put it in the req.params as in your example. But I would swap your POST with the PUT. (post does not have idempotence and is generally the correct choice on Create where posting multiple times could create multiple records) ,1534911467.0
no_user_name_is_good,"Yes, I actually struggled with this for awhile, so I made two files
server_logic.js and client_logic.js
basically

    client_logic=function(xo,xc){
     var logic={};
     logic.get=function(o,c){o.type=xo.type;socket.emit(o.type+'.get',o,c);};
     logic.save=function(o,c){o.type=xo.type;socket.emit(o.type+'.save',o,c);};//used for new obj or update via upsert
     logic.remove=function(o,c){o.type=xo.type;socket.emit(o.type+'.remove',o,c);};
     logic.template:function(o,c){o.type=xo.type;socket.emit(o.type+'.template',o,c);};
     logic.count=function(o,c){o.type=xo.type;socket.emit(o.type+'.count',o,c);};
     xc(null,logic);
    };

server side is the meat of it all where you write your functions to go ahead and handle interaction with the database.  but with this method on the client side you just say 

    var user={};
    client_logic({type:'user'},function(err,logic){
     user.logic=logic;
    });

then you can just say

    user.logic.get({},function(err,res){});

In this way you can rapidly attach logic to anything at all so long as you pass in some kind of identifying label like user or article or whatever.

Obviously this method is for websockets, I just quit using get/post and rely soley on websockets at this point because of it's ability to do dynamic updates, broadcasts, and streams.",1534950398.0
Slappehbag,"Others have commented on your question. I'll comment on the actual routes, you should use routes that describe the action. Instead of `app.put('/')` you should most likely use something like `app.put('/api/v1/post/:id')`. /2cents

Edit: edited because my toilet redditing was wrong =P",1534926354.0
david_red,Take a look at GraphQL... It might open more opportunities for you,1534911542.0
idoabamboozle,"Honestly I have built a company built on video delivery and uses several encoders we once used ffmpeg also. 

We use amazon almost exclusively due to the conformability of their products. 

Easy one is amazon Elastic beanstalk that scales your node app. You create a .ebextension config to pull and build ffmpeg library dynamically. 

Or if you use docker you can use that with elasticbeanstalk. Good scale options there. 

For more in depth and mixture of manual and automatic I would look up some of their other processes. They have a platform for everything but I would say be careful. Bills rack up pretty quickly. Our business went from 1k a month under development to 80k per month under full production. We then redeveloped the core and made our own services and handle the same at about 10k monthly bill.

Google cloud is also good but find AWS easy for integrating or making an integration for every stage of the development process. 

-edit spelling due to autocorrect 
",1534901552.0
theigor,"Why not do your conversion as a service? Since that's your bottleneck, no sense scaling everything else to meet it. ",1534910362.0
ForthBestUsername,Google App Engine,1534940638.0
danielfischer,Google app engine is what you want. :),1534920766.0
mbael,"I’d go with k8s + nginx ingress as load balancer, so you can set up some autoscaling based on usage threshold.

I’d investigate the architecture as well to see if a queue implementation wouldn’t help. 

request => broker => workers 

Then you could have multiple running worker instances with autoscale.",1534918763.0
CheeseFest,"AWS Lambda scales automatically. Importantly so too does its cost. But it's definitely worth investigating. I'm pretty sure you can add AWS-based NoSQL solutions too, to keep things a bit cleaner (admittedly there is a *steep* learning curve with the AWS cloud platform as a whole)",1534933667.0
flashbck,"I'd recommend using AWS services, but I don't have much experience with the alternatives. It sounds like you would benefit more from decoupling components of your service. Your web server shouldn't be performing heavy workloads that are not directly necessary for the web server to function. 

AWS provides all sorts of features that you could leverage. You could set up a Lambda function that is triggered when a video file is uploaded to a source-files S3 bucket. The lambda could perform the ffmpeg conversion, save the processed videos to a processed files S3 bucket, then update the record in the database indicating that the conversion has completed.

You could accomplish the same as the above without AWS services as well. Depending on your workload and the requirements, you could have a video processing server that is activated once an hour. When that larger server is activated, it would query the database for unprocessed video records and update the records as the videos are processed.

You could have a second server that is dedicated to only processing video files. When a new video is uploaded to the web server, add an event to a message queue with the relevant information for the processing server. The processing server would run in a loop checking the message queue for new work. When a new message arrives, process the video and other long running tasks, then update database records when complete.

All of my solutions involve moving the video processing workload off to a secondary server. Each of the above options adds complexity to your workflow and has error scenarios that need to be handled in a useful and reportable fashion.

&#x200B;

&#x200B;",1534940041.0
whales171,"I've only used Amazon EC2 and Amazon lambda. I highly recommend going serverless (Amazon lambda) if nothing you do requires more than 5 minutes of running, don't care about cold starts, and you don't needs more than 3 GB of memory per call. Serverless takes away all the management of servers which is great for new people. 

Planning for burst scaling is so much easier with serverless than with elastic beanstalk in my experience. 

May I ask why is MongoDB a requirement? ",1534920754.0
,[deleted],1534911961.0
jwalton78,"'static/web/...' is a file inside this project: https://github.com/czb/musicope/blob/master/static/web/config/default-config.ts

Open up a web browser, and in the url bar type ""http://localhost"".

I strongly suspect this project will not run as-is on a Mac or on Linux; if you're on one of those you'll probably have to change the line `server.listen('80')` at the bottom of https://github.com/czb/musicope/blob/master/server.js; change the 80 to something like 3030, and then in your web browser go to http://localhost:3030 instead.  (This is because port 80 is a privileged port on Mac and Linux - need to be root to listen on port 80.)

Hope that helps!",1534907271.0
Ender2309,"So....you installed node/npm right? That’s probably a stupid question but i just wanna be clear. 

Without seeing the errors my guess is one of two things:

1.	What the other guy said regarding ports, unless you’re on windows. 
2.	you’re trying to run npm commands from the wron place. In a terminal window you need to navigate to /home/musicope and then run the npm stuff. 
3.	static/config..... will be directly inside musicope, or nested somewhere inside there. 


If you post your error messages we can do better.

Edit: to do 2 type cd /home/YOUR_USER_NAME/home/musicope, assuming you’re on a Unix based os. Not sure what the windows equiv is. ",1534913376.0
Nocturnal_Emission_,"I had to run: sudo npm start 

...because of the port issue. But what jwalton78 says is an even better solution. 

But it works fine. Did you get it to work, OP?",1534940540.0
nigel182,"1. don't test the endpoint, test a function that the endpoint calls
2. mock the request library and test that you're sending the correct data to it",1534881858.0
rotharius,You could take a look at separating your code into modules and testing those units (unit tests). You can test the integration of your units with each other using separate integration tests. You can test the entire application using end-to-end tests and/or test the interaction boundaries between your app and Slack using contract tests.,1534935647.0
lilou2093,"function addTwoNumbers(x, y) {

  return x + y;

}

console.log(addTwoNumbers(5, 1));

&#x200B;

Calling this function we can see the result is 6. Because we know basic math, it makes perfect sense. But what if the function is really complex?

&#x200B;

Let’s make sure to write a test case to ensure the function is valid no matter what.

&#x200B;

&#x200B;

function addTwoNumbers(x, y) {

  return x + y;

}

&#x200B;

function testAddTwoNumbers() {

  var x = 5;

  var y = 1;

  var sum1 = x + y;

  var sum2 = addTwoNumbers(x, y);

&#x200B;

  console.log('addTwoNumbers() should return the sum of its two parameters.');

  console.log('Expect ' + sum1 + ' to equal ' + sum2 + '.');

  

  if ( sum1 === sum2 ) 

return console.log('Passed.');

  

  console.log('Failed.');

}

&#x200B;

testAddTwoNumbers();

&#x200B;

See this? We’re defining the values to add, and creating their sum. Then we call addTwoNumbers() assigning it to another variable. Having done this, we’re ready to test the equality. What’re we expecting? Well, sum1 should be equal to sum2, if the function we created works as expected. Running this piece of code you should see the following get logged to the command line:

&#x200B;

addTwoNumbers() should return the sum of its two parameters.

Expect 6 to equal 6.

Passed.

Congratulations, you’ve written your first unit test! The act of unit testing lies in writing tests for small units of code. Hence the name. Meaning you’ll write individual test cases for validating the behavior of functions, methods, and objects. Exactly like we did above.

[discord](https://discord.software/) [adobe reader](https://adobereader.onl/) [itunes](https://itunes.red/)

&#x200B;

&#x200B;

&#x200B;",1534884564.0
Scharute,When did everyone decide to have B&W profile pictures in suits?,1534877315.0
AlexBV1,"Good article, I wanted to try epilogue a long time ago, maybe it's time to take a look on it again.",1534862123.0
gridevla,"Well, i didn't know await and async, thank you for making me search about that, it will boost my code quality.

Nice article too :)",1534919910.0
akujinhikari,"I'm building a rest api now, and I'm studying up on security as much as possible. I have already instituted auth0, so it's good to know that others think it's good for security as well. Good article.",1534863333.0
mmatiasn,So wait webassembly is slower than JavaScript for most trivial operations we perform in the client?,1534863130.0
drowsap,"`let mut res = 0;`

nah, I'm good",1534913073.0
,[deleted],1534878234.0
ilja903,Single point of entry. Microservices may add unneeded complexity to your app. YAGNI,1534845050.0
tzeentchy,"I use both. PM2 helps me scale things vertically using a single port, and I use Kubernetes (wrapping my node web server + PM2 in a container) to scale horizontally and across geolocations, kubernetes ingress settings for the load balancing. ",1534850758.0
trylovetom,I use both in one project.,1535057970.0
mauvm,Have a look at https://github.com/jdfreder/pingjs. ,1534847651.0
shtanton,"Promise.all waits for all the promises in an array to resolve, they resolve when after you call save() but don't wait for it to finish, if you return the promise returned by save, it will combine it with the existing promise so promise.all will wait for it",1534838727.0
lord2800,You need to return the promise from `commentAuthor1.save().catch(...`.,1534837768.0
no_user_name_is_good,"Well, I'm terrible with promises, but I do like the idea of async.  So, if you would pardon a code re-write.  I think doing it as a parallel process might speed things up instead of doing it as a series, though I suppose that depends on the power
of the machine doing the processing.

    var async=require('async'); or <script src='async.js'></script>

    var operations=[];
    var save_user_promises=function(o,c){
     User.findOne({_id:o.commentAuthor.id},function(err,user){
       if(user){
        //I suppose you want to do something here
       //but we have the data now, so we can fire the callback and be done with this 
       //function in the array of functions
       c(null,user); 
      }
     });
    };
    commentsAuthors.forEach(function(commentAuthor){
     operations.push(async.apply(save_user_promises,{commentAuthor:commentAuthor}));
    });
    async.parallel(operations,function(err,res){
     if(res){
      //everything is done now, pack up and go home
      //res should be an array of all the users
      //all operations performed in parallel 
      //the caveat being that if there is any I/O in the function
      //it is performed in series due to the single thread
      //nature of javascript
     }
    });",1534858358.0
nigel182,"If you're using node version 7.6+, this would be a perfect candidate for an async function so you can await stuff.

    // define async function
    async function whatever() {
        for (commentAuthor of commentsAuthors) {
            //some code

            let commentAuthor1 = await User.findOne({_id: commentAuthor.id})
            commentAuthor1.comments.splice(position, 1)
            await commentAuthor1.save()
        }
    }

    // call the async function like a promise
    whatever()
    .then(() => console.log('done))
    .catch(error => console.log(error))",1534881453.0
Console-DOT-N00b,"A good chunk of those are me going ""the hell it started a min ago... just install them again here....""",1534825795.0
BenjiSponge,"I like how the original tweet says ""trillion"". =)",1534820551.0
Falk_csgo,"Watch \~43 gigs disappear as I run yarn twice.

(watch in fullscreen mode and look at the status bar)

Who ever is curios finding out how this might have might have happened feel free to check the [replay](https://dlive.io/video/emitste/252c1084-a4b1-11e8-91a0-0242ac110003) around 16 mins.

I'm going to report back once I find out what this was tomorrow.",1534802864.0
swiggs2nice,"I'm going to shamelessly plug this simple wrapper around puppeteer that I made with others. You could install this as an npm package or use it as an example to include puppeteer yourself. Either way, I recommend using a node server + puppeteer because it will allow you to generate pdf's the same way chrome does, guaranteeing performance and cross-browser consistency. [https://github.com/westmonroe/pdf-puppeteer](https://github.com/westmonroe/pdf-puppeteer)",1534801159.0
no_user_name_is_good,"Er, you can just straight convert?  Sweet crap on a stick, I spent A TON of time hand writing a whole bloody thing to do just this.  I had to super carefully measure out the pixels etc.  Took me half a day.",1534888172.0
kwiwksh,"MongoDB is a document data store. Its great for extremely dynamic and unstructured data. The issue there is that most data is structured and the way we think about data is often relational. 

For example, why store a ""Person"" in an unstructured document data-store when you can structure it into a table with columns like name, age, etc. 

I think MongoDB recently added some constraints you can impose on your data to require them to fit some schema. At that point you might as well use a RDBMS. In most cases, you should minimize what unstructured data you have and MySQL and PostgreSQL have added JSON fields for such unstructured data.

I think the bigger issue is that a lot of people use MongoDB simply because ""it's MongoDB"", which somehow makes it better, when in reality, they are planning on structuring and relating their data to each other, which is what RDBMSs were designed for.",1534798694.0
AGonzov,"You should not have any problems if you use the ""tools"" in the right way.",1534798386.0
pingueame,Is not the tool. Is implementation,1534802751.0
bigorangemachine,"I always lean in the side of right tool for the job.

Mongo is great for throwing stuff together quickly. 

MySQL forces you to think out your data structure in detail before you even start.

Which for me I jump to a meta model.

I think mongo encourages the lack of planning step. However the power of meta data is hella awesome.

ORMs cut out the writing of string based queries and look similar what mongo looks like as far as what your code looks like for quick look ups.

MySQL will strain under large SELECTs; so finessing lookups is important.

Even if you look at Ubers farce of database implementations can probably indicate that it's not the tool.

I have been talking to my coworkers and we've discussed the differences & strengths of Mongo, Postgres and (×)SQL of our projects.

One preference is testable code. So using anything using stored procedures loses there.

Mongo currently requires hot migrations. You need to update a stores schemas as you use them. So the version control and migrations isn't free.

However managing migrations is a lot of overhead. Generally MySQL always has an overhead and that means development always has another layer to deal with.

Often the ""move fast"" model benefits Mongo. 

Hell if you don't need to really look up data in complicated ways you could get away with millions of JSON files.  

It really depends on what trade offs you  need to make",1534821508.0
,[deleted],1534798203.0
akujinhikari,"I switched from MySQL to MongoDB. I honestly don't give a shit how many people say it sucks. It's absolutely perfect for what I need. Literally everything is easier. Queries are easier and make more sense to me as a javascript developer. I'm not doing `SELECT * FROM dB.table WHERE id=""akujinhikari""`. I'm doing `db.find({id:'akujinhikari'})`. That makes sense to me. It's shorter, and it makes sense. I don't have to context  switch; it's javascript. Plus, if I need to change my table, I don't have to run `ALTER table etc` I don't even remember the syntax. I just change the Mongoose schema. Everything about MongoDB is better in my opinion. If you feel the same way, use it. ",1534801687.0
no_user_name_is_good,"Well, there are two schools of thought on this, and they are both passionate.

My philosophy is that mongodb works with javascript, so your front end is javascript, your web server is javascript (nodejs) and then your database is javascript and they all play together beautifully.

The other is security and moderninity.  With sql your command is fused into a string that can be affected, with mongodb it is a function that cannot be interfered with example 'select * from $userTable' if a person were to put certain chars in there they could alter the string and make it perform other commands than select.  With mongodb it would be db.find() and the command cannot be mutated by a user to alter it into a remove etc.

The other thing is the idea of a database schema, mongodb chose the right path in allowing the schema to be optional.  This means you can make up an object and just jam it into the database and objects do not have to be the same.  However I create a sort of pseudo schema by having an object called template which holds a blank copy of each object I might want to pull up fill out and store.
Example
{template:{
 user:{name:'',address:'',phone:''},
 article:{title:'',date:'',text:''}
}}
and then when I need to add a new user I just go
db.findOne({'template':{$exists:true},function(err,res){
 res={user:res.template.user};
 return res;
});

It really exposes how useless schemas are and how much better it is when you just let users define schemas and break schema definitions willy nilly.  It puts us in the drivers seat to handle the situations as they come.

The other thing mongodb does which SQL is catching up on but in a really crippled sort of way is the JSON object which allows the nesting of data.

This simplifies the database which speeds up production, development, and usage.

Example, I need to find an airport, a plane, and a passenger in sql
Select airport.name from airport inner join plane.... well basically this would go on forever

With nesting you could have all that data underneath the airport
db.findOne({'airport':{$exists:true},function(err,res){
 then you can find airport.plane and under that airport.plane.passenger
});
Everything was within 1 object and you didn't have to cross between a few or possibly dozens of tables like an sql database.

While you can make sql react in this sort of manner, it still is not as good, and it is not nearly as fast as mongodb at it.  

Also just the dot notation syntax of JSON objects is insanely handidily dandy and useful.  It is uncomplicated and gets you working fast.",1534861164.0
StrikePrice,Broken toys are fun to play with sometimes. Avoid if you’re doing anything serious. ,1534798496.0
blinkincontest,you should check out Gatsbyjs,1534794270.0
Charles_Stover,"Don't use that app generator if it includes more than you want.

Express itself has no boilerplate. You just import and use it.",1534794255.0
BrushyAmoeba,"In addition to Gatsby and other site generators, I'd take a look at [Ghost](https://ghost.org/). It's basically a self-hosted open source Medium clone",1534796097.0
broofa,"If your goal is to learn some new technologies, then this is a perfectly good idea.  But if your goal is to just get a blog up and running there are plenty of better options out there.

And if you're goal is the former, to learn, then taking shortcuts with template-generators is kind of self-defeating, especially where Express is concerned.  Express is pretty simple to get started with w/out a generator.

>to interact with PostgreSQL using something like the npm module pg-promise.

I'd encourage you to take a look at `sequelize` for this.  Easily the best/most mature JS ORM out there, and applicable to MySQL, SQLite, and MSSql as well.",1534796674.0
zmasta94,You could use LowDB for the database,1534847185.0
vitaly-t,"As usual, advises pour in on database frameworks, like Objection.js, and Sequelize, all of which are tremendously slower than pg-promise, which gives the absolute best performance when developing for PostgreSQL under Node.js. Not only pg-promise stays away from the slow ORM approach, by working with SQL queries only, but it offers methods for generating best-performing multi-row inserts and updates, which other libraries do not do. It is also the only library that properly handles complex nested transaction logic, without pulling hair. And it has the best of them all support for external SQL files, to build seriously large projects. Checkout pg-promise-demo: [https://github.com/vitaly-t/pg-promise-demo](https://github.com/vitaly-t/pg-promise-demo)",1535107172.0
user3961,What’s the database for?,1534837159.0
kryptkpr,"It's all about the data scale.

Does your data fit into RAM? Redis rocks.

Does your data fit on 1 machine? [No]SQLs rock.

Enormous amounts of data across many machines? Spark rocks. ",1534793589.0
k3liutZu,"Why do you need packaging?

This sounds perfectly suited as a web app.
Everybody has a browser.",1534785825.0
Parasomnopolis,Some resources here: https://github.com/styfle/awesome-desktop-js,1534804459.0
SalemBeats,"I bought it back before the author pulled it from Udemy to sell it on his own site, and gave it 3.5/5 stars given the $10 I spent on it.  
  
The pacing is all over the place.  
  
The course bills itself as an efficient way to become familiar with all of the built-in Node packages, but you spend the middle ~50-75% of the course not really touching Node at all, after abstracting away much of Node's built-in modules into *""libraries""* almost immediately after introducing them.  
  
80% of the ""learning"" happens in the last ~20% of the course.  
  
A couple of really fundamental things *(i.e., buffers/streams)* are only glossed over, so if you weren't already really comfortable with how those worked, you'd be better off taking something like Anthony Alicea's [""Learn and Understand NodeJS""](https://www.udemy.com/share/1000TcAkMed1pVRXg=/). It's an older course *(Node 4, I believe?)*, but it's well-done and covers a lot of fundamentals that haven't changed throughout Node's iterations.    
  
The biggest issue that I had with the Pirple *""Masterclass""* course was that the coding style was miserable, lazy, and outdated. **Lots** of copy/paste. No use of Promises. No use of async/await. Lots of callback hell, and deeply-nested loops/conditionals that should've been extracted. Off the top of my head, I'm not sure that any ES6 was even used at all.    
  
If you're an experienced programmer who has developed good modern style and development practices *(and are only taking this course because you use a lot of libraries/frameworks and just want to try a more *""vanilla""* approach)*, watching this will be painful.  
  
But, with that said, it did *(eventually)* give me some inspiration to dig through the documentation and try things out. It did provide some value. The main project and handful of baby projects gave me an opportunity to write some code using some of the built-in libraries I might've never had an occasion to use otherwise. So YMMV, but just be aware of all of the caveats. It felt like a really rough alpha product that was pushed to release too quickly, but might've had the potential to be a classic like Anthony's course if the rough edges were sanded down.",1534790483.0
rufusgerm,"I am also taking this course and although I like most of it, some of the problem I have with it is he doesn’t explain what certain things do in much detail. It’s really great that there are homework assignments and quizzes, it helps you realize how your knowledge is progressing. However, to some extent it is a code-along course with a more surface level comprehension. 

What I’ve decided to do is follow his course (because the projects seem cool and he’s the only one I’ve found that uses strict vanilla JS and plain node) and in conjunction work through Learn And Understand Node by Anthony Alicea on Udemy. Anthony goes into SERIOUS depth on how node works without focusing on any extensions to it until later on (express, npm, etc.).

So if you’d like a very deep understanding of how node works while also learning/doing projects, I’d recommend the above. If you’re ok with a more surface level understanding of node and you’re not particularly interested in the nuts and bolts, this is a great course on its own. Cheers. ",1534789643.0
bishoymelek,"I found their ads everywhere so I tried to know more, and then that happened and blocked me immediately ... now, I can't even trust anything related to this team

[https://drive.google.com/open?id=1ZVPdVF\_25rE06FrY6mbx4hUHj\_ikXJEL](https://drive.google.com/open?id=1ZVPdVF_25rE06FrY6mbx4hUHj_ikXJEL)",1542665653.0
Prateeeek,"I'm currently doing this course, and it gives you a discount according to the cost of living if you're not in the US, completed 35% of the course, I found it pretty decent till now",1534774489.0
ToshaLogic,"I am taking this class right now, I will evaluate and review when I am finished, so far its interesting, however so far it is just a high level peak into the anatomy of node.js and V8.....

&#x200B;",1544262433.0
twinsea,"Varnish or ngnix reverse proxy to act as load balancer and potential caching layer, redis cluster to act as data cache and to keep track of sessions, and docker to scale out node.

Hardest part is scaling out your data, and not really node imo.",1534772357.0
janslu,"I don't have experience with this scale, but it's a difficult problem, where number of requests/sec is only one variable. 

How computationally intensive those operations are? 
How much bandwidth will be needed? 
How long will each response take? 
How much memory will each process utilize? 
Where's the data coming from and how much bandwidth will it use on the backend side (if you are querying a database - how much data will the backend receive, and how much will it send to the client as a response? 
Do you need to operate on more than one continent? 

I'm pretty sure there's a lot more questions here, and the answer will need to take into account at least some of those variables... ",1534769759.0
kryptkpr,"I swear I see this question here once a week and everyone always assume its Node that needs scaling.

Why do you think this?  Did you benchmark your application under load?  How many concurrent users can you get right now with 1 process? When you hit the peak what's happening? Is it cpu? Network io? Database throughout or latency? 

Express one 1 core serving static response will give you around 3-5k/sec if CPU bound depending on your hardware.. but I doubt your response is static, so you are likely to hit Network/DB before CPU unless you do a lot of compute on returned data.. 

Tl;dr:First Benchmark to establish your ceiling. Then identify what's bottleneck (flame charts are good for this) and scale it 2-4x or fix if it just sucks.  Repeat. ",1534790257.0
ChronSyn,"Increasing core count is an effective method, but the cost effectiveness depends upon your VM host pricing.

Scaling a REST API to reach the C10K point often depends on caching.

Without caching, it's possible to get ~4500 out of a 4-cluster if you're using connection pooling for your DB and keep-alive with a longish duration (e.g. 15 seconds) (you should always use connection pooling). If you know that at certain times of day that you're going to experience high load, you can always ramp up the connections by sending numerous requests to saturate the pool, and having their keep alive be in the region of 1 minute or more. Keep alive reduces the ramp up time and cost of connecting (which can be several hundred ms at peak) - this means quicker returns to the request which means it can process another request immediately.

In any case, doing 10K/s on a single system is notoriously difficult unless you're only returning 'OK' or 'Hello world'. I personally found that beyond 4-cluster, the benefits were very minimal, such that even 5-cores didn't give even a 5% improvement - results were within margin of error and standard deviation over 4-cores. This was a few years ago with Mongo and a standard 'select' query - other systems may show more benefit with more cores.

Add in caching for both your app and your DB, and compensate with more RAM if available and you should see significant improvement.

/u/janslu answer also covers a lot of other variables you need to assess. Additionally, I'd also check whether you're actually experiencing the demand of 10K requests per second.",1534771194.0
Pawda,"If you don't use any special library, Nodejs without clustering mode runs on one core.

First, Vertical scaling (more power on a single machine) is known to be more expensive than horizontal scaling (many servers).
Also, at this amount of rps, you definitely want redundancy and not to shutdown when one of your server goes down.

To achieve horizontal scaling and redundancy, you would use a load balancer.
Depending your resources it can be either hardware like A10, cloud provided like AWS Elastic Load Balancer or software like haproxy/nginx.
The load balancer will be able to handle a huge amount of connections while spreading them to different servers that are running your API, hence multiplying the number of simultaneous query you can handle.
",1534777020.0
elrodrix,CDN + Varnish + nginx reverse proxy ,1534778397.0
jascination,"Side question, is this the kind of thing that Serverless / AWS' Lambda would be good for? ",1534780428.0
mbael,k8s + nginx ingress,1534782422.0
StoneCypher,"There's nowhere near enough information in this question to answer it

For example, if you just throw an express server up that says the constant string ""hello,"" on an average box, you're going to get 10x that throughput

Mostly, it's going to be about caching, offloading work onto CDNs, precomputation, batch updates, and so forth

The number of systems that need this kind of throughput is vanishingly small",1534784482.0
DanetOfTheApes,Lambda with api gateway.,1534798456.0
whatsmyline,"This can get you started --> https://pastebin.com/P0CJDE57
I am building this for a rate-limited express app. Here is my proof of concept.

Run it with `docker-compose up --scale express=3` to get 3 mid-tier (express) applications, load balanced with Nginx all sharing a redis. I am using the redis for rate-limiting by Auth creds, but you can use it for caching responses if ya like.

",1534834507.0
SnowyMovies,"We use Rethinkdb for high volume servers, split out endpoints to microservices, each with their own db instance. Essential/critical changes are synchronized back to a postgres cluster, by intercepting the rethink proxy.",1534782241.0
ItsAHardwareProblem,"Build your service to scale horizontally, not vertically, scaling VM's via CPU cores can be great and all, but eventually you can and will hit the upper limit you can scale the single VM to",1534786590.0
brtt3000,"Do the absolute minimum amount of work for each individual user and offload everything that is shared between users to a fast cache like Varnish or external CDN. Even a tiny cache timeout of a few seconds or minute saves thousands of requests hitting your expensive node instances. 

Eg: for example instead of combining boring static-ish database data and personal data in one request, split it up in two request and route the boring data through a http cache so you don't need to query that all the time.

Also optimize the overhead work you do for each user (like authenticating tokens) to not hit the database, just the cache and maybe not even that if using JWT.",1534788519.0
Zartharus,Write it in rust using actix-web 😆,1534794303.0
mistralol,"
Well you move off an vm run it on real machines and put a load balancer in front of them.

",1534798601.0
stompinstinker,Load balancers and app servers are easy to scale these days.  Your permanent data store on the other hand is where it will get real nasty.,1534802878.0
hrvstdubs,"If they’re GET requests of similar types, throwing some caching in the mix should help ",1534769441.0
HoneyBadgeSwag,"Increasing cores isn't necessarily going to be a good idea. Node is single threaded so the best way to handle concurrent requests is through horizontal scaling. Use a reverse proxy like Nginx and a load balancer to route requests to multiple VM instances. If you are running your app on a more expensive single VM instance then that is what you will always pay for regardless of how much traffic your site is handling. The advantage to using a load balancer is that if you have a time with less traffic, your app can automatically use less VM instances, so you pay less. If something starts trending and your page blows up you can add as many as you need. Google Cloud does billing by the minute so this can save you lots of money.

Your biggest choke point will probably be the database. Look into sharding and replicating data sets based on if your application is read or write heavy. Make sure to have indexed tables or documents for faster look ups.

Also, make sure to add caching using redis or something similar so you make fewer calls to your database.

Remember that every app is a unique snowflake so the architecture that is most efficient will be different. 
",1534788972.0
lcfcjs,"In my experience, the database is the first to run into trouble. If you are using MySQL, seriously consider moving off of this as soon as you can. MongoDB has excellent scaling capabilities.",1534782038.0
tobsn,"sumo.ly is getting a bit crazy with the advertising... maybe mods should put the ban hammer down for a while until they calm down a bit.

edit: hint - check OPs profile.",1534764314.0
thecodingfossil,Amazing!! Already booked it for me and thanks for sharing. ,1534758888.0
Max_Stern,"Bad introduction. You present it to developers, you can't just say how excellent it is 😆  
You even forgot about link. ",1534759079.0
Capaj,I dislike adonis. Seems like author is just taking other successful packages and puts them out under his own brand. When there is a bugfix in the original package it takes forever to get into adonis package as well. That is not how you do open source.,1534765136.0
RareYogurt,What a toxic community.,1536871243.0
Max_Stern,"Basically I can create my own live wallpaper, right? ",1534758792.0
sime,"Wow. Windows 98 could show a webpage as the desktop background 20 years ago.
",1534785321.0
erulabs,Nice! I’ve seen a couple people (myself included long ago) get fairly confused at GKE and EKS re: health checks - the app is up and running but no traffic is flowing! Those services usually assume the default health check address of “/healthz” and on GKE via HTTP by default. Defining them yourself in the pod definition saves a lot of headache later,1534752641.0
gajus0,"I have been doing _a lot_ of dev in Kubernetes with Node.js over the last couple of years.

We are currently running a cluster with 50+ nodes and over 500+ pods.

Here are some takeaways:

* For logging: https://github.com/gajus/roarr
* For readiness/ liveness checks: https://github.com/gajus/lightship
* For Prometheus metric serving: https://github.com/gajus/iapetus
",1534786240.0
cirsca,Great article if you want to use \`banzaicloud\` packages.,1534766987.0
nothingduploading,what is kubernetes?,1534749525.0
zachrip,"Your assumption is correct, don't worry about that.",1534754697.0
TjomasDe,"Hi, use app.render instead. 

app.render(view, [locals], callback)
Returns the rendered HTML of a view via the callback function. It accepts an optional parameter that is an object containing local variables for the view. It is like res.render(), except it cannot send the rendered view to the client on its own.
",1534745360.0
kgram,"The template itself and the data passed to it are not sent as part of the response except if you render it as part of your template. So you can safely pass a user-object with secret properties to the template, as long as you don't render any of the secret properties in the template.

If you have doubts, it's a good exercise to look at the raw request (or as close to it as you can get). An easy way to do this is to use your browsers developer tool network log, use a tool like [Postman](https://www.getpostman.com/) or [Fiddler](https://www.telerik.com/fiddler), or just by running `curl` with the verbose `-v` flag.",1534755203.0
Kanthic,"Browsers do not know how to process the template. So yes, your server process the template and only returns the resulting html. ",1534763341.0
BehindTheMath,"You don't want to write to a file. You want to write to some sort of buffer, and send that to the client. ",1534730493.0
no_user_name_is_good,"Hello, actually I like you decided to go with a stream after awhile, here is how I got it to work.

I am new to reddit and I do not know much about how to get the formatting to work, so I apologise if this all lumps together.

Include both socket.io and socket.io-stream in your index.html
Client HTML
-------------
<script src=""/socket.io/socket.io.js"" type=""text/javascript""></script>
<script src=""js/socket.io-stream.js"" type=""text/javascript""></script>
Client Javascript
------------------
 var get=function(o,c){   
  var arr=[];
  var stream=ss.createStream({objectMode:true});
  stream.on('data',function(data){arr.push(data);});
  stream.on('error',function(){ if(xc){c(null,xm,arr);}else{return arr;} });
  stream.once('end',function(){ if(xc){c(null,xm,arr);}else{return arr;} });
  ss(socket).emit('get file',stream,o);
 };

After you get the data you can set it up to create a download for the client

My server side will be a little different from yours, because I get the file from a mongodb, but the gist of sending data via socket should be the same, fs.readFile I believe returns a stream object.

Server Javascript
--------------
var ss=require('socket.io-stream');
//I assume you already have socket.io setup as var socket

ss(socket).on('get file',function(stream,option,callback){
 //generate your stream, in your case using fs
 var readStream = fs.createReadStream('myfile.txt');
 readStream.pipe(stream);
 readStream.once('end',function(){
  callback(null,'done getting data',true);
 });
});",1534765354.0
cahva,"If exceljs can write to stream already, you should be able to pipe it straight to response. Or listen for stream’s ”data” and ”end” events and use res.write() and res.end() on express side.",1534773842.0
delightless,"Numbers 4,5,7 aren't quite like the others in your list. They are not bad to know of course but I wouldn't include them in a lesson plan that is focused on learning js/node.

Check out Colt Steele's web dev courses at Udemy. The first one is a solid intro to node/express/mongo/rest and then the advanced course covers ES6 (unfortunately it doesn't cover GraphQL though). ",1534723336.0
jimwards17,Maybe start here: [express](http://expressjs.com/) ,1534707357.0
kryptkpr,"After just dipping my toes into Elastic I feel like you can spend years in the ELK (well, EMK now) stack and still learn new shit. Incredible technology, with Metricbeat and Logbeat I have my user data, server/app metrics and log data all in one place and I love it.",1534726585.0
awegeeshucks,"I've been digging [FrontEndMasters](http://www.frontendmasters.com). I got access through my employer so I'm not sure about cost. Great learning track for node or you can cherry pick courses. They are constantly updating courses, plenty of es6 material as well.",1534739736.0
Deviso,"I'm in the same position. My plan is to purchase eloquent javascript (in November when the 3rd edition is published. This covers ES6). I'm going to purchase two courses from Wes Bos then. 

ES6 for everyone.
Learn Node",1534712041.0
iiworm,Im on same track,1534714418.0
truckjohanssen,[w3schools](https://www.w3schools.com/nodejs/nodejs_intro.asp) has a pretty good tutorial if that's what you're looking for.,1534717011.0
ecares,"`setPassword` is calling an asynchronous operation (in form of a promise), just wait for this promise to be resolved before you save anything",1534714902.0
io33,TLDR: he's now working on [https://github.com/denoland/deno](https://github.com/denoland/deno) that is supposedly free from many of Node's shortcomings.,1534707452.0
Keith,"> ""Go is a better language for doing fast servers, and so there was no reason for me to be using Node"".

I've heard Dahl make similar statements about Go vs Node before, so please take this question in the best way possible: How do those who've chosen to use Node feel about its creator arguing that its main use-case has been better handled by something else since 2012? Do you agree/disagree?",1534716674.0
_upvotemaster,"I love the part where he talks about ""avoiding"" cute stuff.

Then literally 3 minutes later he talks about ""cute"" stuff in Deno",1534740535.0
SteveTheBiscuit,I know he’s the creator but he could benefit from Toastmasters or some public speaking classes. ,1534707739.0
lepuma,Wow the beginning was real hard to watch.,1534716171.0
gajus0,"During this talk, Ryan lists the following regrets about Node.js:

1. Regrets removing Promises from the Node.js core. As a result, today most of the asynchronous Node.js is implemented using continuation-passing style (CPS).
2. Regrets not designing a secure/ restrictive runtime system, e.g. restricting a process from accessing the disk or network.
3. Regrets using GYP build system.
4. Regrets package.json – 1. the resolution logic 2. the centralized and privately controlled nature of the repository for modules.
5. Regrets index.js (complicates the module resolution logic).

In this talk, he presents deno (https://github.com/denoland/deno) – a prototype of a secure TypeScript runtime on V8 that addresses all of the above regrets.",1536266486.0
iluxu,He explicitly explained my actual toughts about node. ,1534707183.0
tobsn,i remember in 2009 when node js was just a channel on freenode... it came a long way for a lot of people calling it garbage... thank god they’re finally quiet. ;),1534728500.0
,[deleted],1534734199.0
adrianosbr,"Probably this is happening because you’re using jquery to fetch the Reddit API. I suggest using the native JavaScript fetch:

https://developers.google.com/web/updates/2015/03/introduction-to-fetch",1534697769.0
tswaters,"This is caused by performing a CORS request from `file://`.  

Part of the lookup logic is to check the request origin which for `file://` is null, hence the error.

You'll need to spin up a  little web server on localhost and access it via `http://localhost:{port}` for this to work properly.

It might also make sense to do the fetch in some back-end nodejs code -- this won't require CORS.",1534701780.0
kranker,Back up and explain what it is you're trying to do,1534686857.0
kryptkpr,"Are you trying to do this on frontend or backend?

On frontend you can fetch() the url and do whatever you wish to the returned bytes... but beware of CORS.

On backend you would use axios or requests to do the same, with no CORS to worry about. ",1534790689.0
Cyberuben,"What PHP include does, is ""paste"" (if not yet included before) the contents of the file you want to include at the location of the include. Node.js is a modular system, it doesn't paste anything. If you want to import all of those things in all of your files, you need to specify them in all of your files, or, make them global variables. But that's a bad idea.",1534678561.0
estacks,"What you're doing is going to execute the file you're importing but not make any variables available in the requesting file. So you can chain execution of different files into a tree, but you're going to have to manually specify any variables you need in your file's scope.

[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Import\_a\_module\_for\_its\_side\_effects\_only](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Import_a_module_for_its_side_effects_only)

You can import every single variable at once using the \`import \* as myFile from 'myFile.js'\` syntax, but they will all be scoped under the \`myFile\` object. I like it much better than PHP because it's the same level of convenience without cluttering your scope with a lot of potentially unknown variables. Of course all variables of this manner need to be defined with the \`export\` keyword to be made available, they're going to be private by default.

There's also the \`global\` variable in Node (and \`window\` in client-side JS), which works exactly like $GLOBALS in PHP. Don't do this. Node supports ES6, just put the variables in your import statement and they'll be available exactly the way you're looking for.",1534680096.0
darrenturn90,"You don’t need to necessarily. Requires require exports and you can destructure to get to an exported function directly. 

",1534678812.0
joesb,"It works that way for a good reason. 

You want to be able to know which dependencies came from which file. 

You want to see how much dependencies your current file has. 

PHP allows sloppy programming but you should not want to continue doing it. ",1534696471.0
Saphyel,nowadays there is no popular library in php using that bad practice so avoid it in PHP and node please.,1534714306.0
scaleable,"An interesting read:  


[https://nodejs.org/api/modules.html](https://nodejs.org/api/modules.html)  


Especially the ""module wrapper"" part. JS modules are essentially closures.",1534749007.0
darrenturn90,"You need to require it into something. In php as it’s a scripting language it literally just concatenation the files together.

Require in node is a wrapper so you need to put your module into a const and use it from there eg

const stuff = require(“include”)

stuff(“hi”)",1534678626.0
ungisbungis,"1. I think you don't need req.user.\_id at all. Just `onlineUsers.push` socket itself.
2. Your message from front-end should contain receiver. For example, it can look like:`{ receiver: socketID, body: 'hello there' }`When you receive 'message', search for `msg.receiver` in you `onlineUsers` and emit the message if socket was found. 

As you can see, no `req.user._id` is needed.

By the way, don't forget to remove user from `onlineUsers` on disconnect ;) And keep in mind, after server restart all ""registered"" users will be gone.",1534669213.0
no_user_name_is_good,"Hello,
If you want to uniquely idenitfy users, especially by attaching their unique id tag from the database etc, then you can write that variable directly to the socket.
Example
---------
    var user_id='123abc';
    socket.user={};
    socket.user.id=user_id;
    msg='hey dude what is up';
Now comes the other part of it, how the heck do you find this PARTICULAR user and send data to them?  Turns out it's fair dinkum easy.

All of the sockets reside within the IO, so you walk the IO array of sockets looking for the one with that user id

    io.sockets.connected.forEach(function(xsocket){
     if('user' in xsocket&&xsocket.user.id===user_id){
       //houston we have liftoff
       xsocket.emit('msg',{msg:msg});
     }
    });",1534767676.0
djslakor,"As an aside, these days if you know your users have more recent browsers ... go ws instead of socket.io",1534777259.0
OrinthiaMary,"On client side you listen for a specific event (call it `new-message-x` where `x` = user id)On server side emit the event ( `new-message-x` where `x` = user id)

This way only that user will receive that event

eg: `socket.on('new-message-' + user_id, (msg) => {})`",1534680971.0
theineffablebob,How long did this take you to make?,1534658305.0
Console-DOT-N00b,"Alright it......MongoDB.....damn it.


/s (kinda)",1534639385.0
trenno,"This is pretty great!! I'm not a react fan (jsx is like nails on a chalkboard to me), but I really appreciate the thoroughness of this project. High quality stuff here, thanks for sharing!!",1534634754.0
bob51zhang,"Hmm, looks really interesting! ",1534645411.0
SumAlias,getData is async isn’t it?  So the response sends before the data comes back.,1534624962.0
floodlitworld,"The problem here is that Node is asynchronous. Whenever you ask it to do something that requires any delay (http requests, file interaction, timeouts, api calls, database requests etc.) it adds that task to the stack and then skips ahead to the next part of the program. If you need to complete tasks in a certain order, you need to use either event triggers, promises or callbacks to tell Node to wait for the result of one task before doing this next part.

So here, it adds your getData requests to the stack, and then sends the res.render before the data comes back.

You'd need something like:

    const app = express();  
    const getData = require(""request"");  
    // .... unrelated code here  
    app.get(""/"", function (req,res){  
        var searchTerms = [""One"",""Two"",""Three""];  
        var ARRAY = [];  
        var promises = []; // Promise array, to save them all  
        searchTerms.forEach(function(item){  
            let reqURL = ""APIURL"" + item;  
            var promise = function() { // Create promise for each request  
                return new Promise((resolve,reject) => { // Returning means the promise itself is saved to 'promise' variable  
                    getData(reqURL,function(error,response,body){  
                        if(!error && response.statusCode==200){  
                            ARRAY.push(JSON.parse(body));  
                            resolve(); // marks request as complete  
                        }  
                        else reject(); // If something goes wrong, a promise is rejected  
                    });  
                });  
            }  
            promises.push(promise); // Adds promise to promises array  
        });  
        Promise.all(promises) // Executes requests inside each promise in our promises array  
        .then(() => { // When all of them are marked complete, the response sends  
            res.render(""main.ejs"",{ARRAY:ARRAY});  
        })  
        .catch((e) => console.log(e)); // What to do if any promises are rejected  
    });",1534628126.0
tswaters,"As others have said - `getData` is async.

What's actually happening is an array is declared, and search terms are iterated, a bunch of items get added to a stack to process later, then you `response.render` your array.

There's a few ways to go about this - you can checkout a library called `async` that provides a bunch of fp utilities with an async slant.  You can perform your iterations and are provided a finish callback when everything is done, something like this:

    app.get('/', (req, res, next) => {
      async.map(
        [""One"",""Two"",""Three""], 
        (term, nextTerm) => {
          getData(term, (err, result, body) => {
            if (err) { return nextTerm(err) }
            nextTerm(null, JSON.parse(body))
          })
        }, 
        (err, ARRAY) => {
          if (err) {
            return next(err)
          }
          res.render('main.ejs', {ARRAY: ARRAY})
        }
      )
    })

Another option is to wrap each `getData` call in a promise and use `Promises.all` to wait for execution to complete before proceeding --
    
    app.get('/', (req, res, next) => {
    
      const promises = ['one', 'two', 'three'].map(term => new Promise((resolve, reject) => {
        getData(term, (err, result, body) => {
          if (err) { return reject(err) }
          resolve(JSON.parse(body))
        })
      })
    
      Promise.all(promises)
        .then(ARRAY => res.render('main.ejs', {ARRAY: ARRAY}))
        .catch(err => next(err))
    }):
",1534650975.0
Nate_Dev,"Thanks. As yourself and others have pointed out, I need to handle the asynchronous nature of getData. YDKJS has a book on this, currently reading up.

Thanks everyone!",1534651608.0
Coaxial__,"Didn’t bother to read it all but might be that Inside of each iteration of a for loop it’s like the variable  is within its own pseudo-execution context 

",1534626643.0
Shaper_pmp,"This isn't ""news or links for node.js developers"" - it's unsolicited commercial spam. 

Try r/forhire or r/jobbit.",1534626113.0
no_user_name_is_good,"Hello, I do not know how to DM, but my name is Darren, and I am a nodejs/mongodb developer, I put up a small portfolio at thedeveloper.ddns.net, you can contact me through there if you are interested.  I'm currently working on developing streaming technology client<->server and vice versa (helps with big data) as well as AI, and webrtc",1534618184.0
OldManNorth,"i write @ twitter.com/luciuspixel

i write legal, poetry, prose, correspondence, shakespearean, long form, short form, magazine, lyrics, rap, academic, religious, prayer, narrative and recipes

wuzywute@gmail.com",1534623778.0
no_user_name_is_good,"Well, the way I do it is that at the back end that is where you are controlling access.
So basically
socket.on('login',function(option,callback){
 //I'll just skip a bunch here where the login is verified
  if(login_successful){
   socket.on('do something only a logged in person should do',function(o,c){});
  }
});

Basically until the login is successful  you don't set the sockets up to listen or respond to anything.",1534617577.0
k_rx1337,[https://www.npmjs.com/package/passport.socketio](https://www.npmjs.com/package/passport.socketio) [https://www.npmjs.com/package/socketio-jwt-auth](https://www.npmjs.com/package/socketio-jwt-auth),1534613547.0
mariotacke,"Whichever solution you arrive at, make sure to evaluate whether or not passing the token as query string is the right thing to do. Query parameters are easily logged and unencrypted. Check out socketio-auth which implements a handshake mechanism that’s more secure (when used with TLS).",1534615473.0
Ardougne1,"I do this. I have a game (Vue.js) that talks to a server (Laravel) and uses JWT via Web Sockets.

Check out code here: https://github.com/Navarra/game",1534624147.0
leadcause,"I recently needed to do this too, although the point was to use my existing Passport configuration.  
I tried to use [https://www.npmjs.com/package/passport.socketio](https://www.npmjs.com/package/passport.socketio) but it is out of date. Fortunately, one of the Github issues linked to a Stackoverflow post, showing a simpler solution.  

[Here is the original solution that I used](https://stackoverflow.com/a/39632787). It has basically all you need. I just had to modify the accessors of the socket request and response to get it to work with the latest version of Socket.IO. This is the basic setup you need.    


    var app = express();
    var server  = require('http').createServer(app);
    var io = require('socket.io');
    var passport = require('passport');
    var passportInit = passport.initialize();
    var passportSession = passport.session();
    var session = require('express-session');
    var mongoStore = require('connect-mongo')(session);
    var mongoose = require('mongoose');

    var sessionMiddleware = session({
      secret: 'some secret',
      key: 'express.sid',
      resave: true,
      saveUninitialized: true,
      store:new mongoStore({
	  mongooseConnection: mongoose.connection,
	  db: 'mydb'
	  });
    });

    app.use(sessionMiddleware);

    io = io(server);

    // IMPORTANT PART HERE
    io.use(function(socket, next){
      socket.client.request.originalUrl = socket.client.request.url;
      sessionMiddleware(socket.request, socket.request.res, next);
    });

    io.use(function(socket, next){
      passportInit(socket.request, socket.request.res, next);
    });

    io.use(function(socket, next){
      passportSession(socket.request, socket.request.res, next);
    });
    // thats basically it

    io.on('connection', function(socket){
      ...
    });

    ... 
    server.listen(8000);

The only things I changed from the solution is removing cookieParser, since the session middleware already configures it, although you could still provide your own, and then I had to replace all socket.client.request with socket.request for the latest version of Socket.IO.   
Obviously this requires you to have Passport already configured, but if you're already using it for an existing REST API, this basically allows you to plug into your existing setup.",1534638331.0
kranker,Your browser can't write to a directory on the host.  You'll have to POST something to the server hand have the server write the file to disk. ,1534612681.0
jkoudys,'fs' means filesystem. Web pages don't have filesystem access. Simple as that. ,1534613964.0
LionaltheGreat,"I think you're missing some fundamental principles of how a server client relationship works. 

The code you're writing and browserifying is going to run on a _client_ machine, while any nodejs code you write (anything having to do with manipulating a file) will run on a server. 

What is your use case? Trying to upload a file?",1534614813.0
drakefish,Is this satire? I'm confused,1534601725.0
joesb,Tips: you can install cli packages locally instead of globally. And use `scripts` section to invoke it. ,1534603101.0
theigor,"You can also omit `run` if your script name doesn't conflict with an npm or yarn command. So instead of `npm run dev`, you can just do `npm dev`. If you're using yarn, you can do the same thing - `yarn dev`",1534603839.0
elrodrix,"Tips: you can install package using ""npm install -s package""",1534637974.0
Fusseldieb,"I use grunt. When I type ""npm run build"" it runs grunt for me and builds my app in the dist/ directory.",1535416203.0
chmod777,the url will be your s3 bucket url + the file name. file name(s) will be in the `req.files` object.,1534601517.0
phlarp,"Getting the URL doesn't require multer, so you just use the AWS SDK directly:   
[https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getSignedUrl-property](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getSignedUrl-property)",1534604891.0
suncoasthost,"Are you using express?

If so these answers on stack overflow might help you

https://stackoverflow.com/questions/10183291/how-to-get-the-full-url-in-express",1534599689.0
,"You can’t  run Node in cPanel. No command line access. 

",1534587308.0
Sythic_,"I can only guess because its probably been a decade since I used apache over nginx, but you need to reverse proxy a request to your node server. You may be doing this with your .htaccess, but it wont be the same process as doing it for a PHP site. Heres a way to do it if you have access to the apache vhosts: https://forums.cpanel.net/threads/apache-reverse-proxy-to-node-js-server.634293/

EDIT: also check your PMs :)",1534588480.0
,"The way I approached it in production is to make use of the command line tool MySQLDump and spawn it via a node child\_process. it handles the complete dump for you without the need to use INSERT and SELECT statements (which can be very slow if not handles as pools on large data sets) ;

Here is example code:

        let {spawn} = require('child_process') 

    	let dump = spawn('mysqldump',['-u','uname','-p','pass','dn_name','>','db_backup.sql']);
    	// like typing in ""mysqldump -u [uname] -p[pass] db_name > db_backup.sql"" in the terminal
    	dump.stdin.on('data',function(buffer){
    		let data = buffer.toString();
    		console.log('mySQL Dump:'+data);
        });
        dump.stderr.on('data',function(buffer){
    		let data = buffer.toString();
    		console.log('mySQL Dump Error:'+data);
        });
        dump.on('close',function(){
    		console.log('mySQL Dump Closed');
    		//This is where you check if the dump has been completed.
        });

This helped me a lot: [Stack Overflow Question 11407349](https://stackoverflow.com/questions/11407349/mysql-how-to-export-and-import-a-sql-file-from-command-line)

This code is untested, let me know if it is not working for you. Always happy to help.",1534575997.0
p3t1tch3v4lr0ux,"Xtrabackup is a cli i used since many years without complaints
https://www.percona.com/doc/percona-xtrabackup/LATEST/index.html",1534618011.0
Zeppelin2,"It’s telling you what’s wrong. “TypeError: color is not a function.”

Edit: you can try deleting the dependency from the package.json and your node modules folder, then reinstalling with npm, but something might break if its dependent on that color package. I’d definitely get in touch with the author if possible. ",1534558436.0
Charles_Stover,"You may want to try /r/learnjavascript.

""All of these scripts"" are what is called a ""stack trace."" It is the order of scripts that _led_ to the error. The higher up that list, the closer to the error.

The error itself is the first fourth line: `TypeError: colors[...] is not a function`. Two lines before it is the exact line that is causing the error. `colors[...](message)`. You are treating `colors[...]` as a function by passing `message` as a parameter to it. As the error states, `colors[...]` is _not_ a function. You cannot pass a parameter to it. Error.

Since this is a node module, you are likely using it incorrectly, and it is _assuming_ you are using it correctly. It does not check that it is used correctly and attempts to use variables you have provided, despite them being incorrect or invalid.

If we follow the stack trace up the chain until we are no longer in node modules, we see that it originated from a process.emit from a process._fatalException.

Your app probably encountered some error, threw an exception, and your _winston logger_ (the first node module invoked) is configured to use an incorrect color. When it passes your invalid configuration down its chain of dependencies, it gets all the way to the colorize function before the invalid configuration actually throws an error.

Check your winston config. In particular, the colors.",1534561747.0
scroogemcbutts,Microsoft teams sucks.  Just wanted to share that because I can't say it enough at work.,1534612249.0
millard87,If you run mac install node version manager through brew. Then you can install any version of node/npm and switch between them. Very useful little tool.,1534541808.0
Netgator,"Have you tried: 

npm install npm@latest -g",1534539331.0
nothingduploading,[http://nvm.sh](http://nvm.sh),1534539625.0
Saphyel,I use docker so \`docker-compose pull\` and 0 problems with versions in different projects,1534589755.0
davidmdm,"I use n. Google ""npm n""",1534854945.0
asilluron,"I wouldn't call this ""secure"". Why are you passing the user object straight to the mongo lib?

Would be nice to see someone create a reference project for a very secure API.",1534610394.0
gridevla,"Jwt is an awesome resource to secure an api.  

And only to inform, you have an erratum in your info. You missed one verb, and maybe forgot the difference between two of them.  

The verb POST is only for create.  

The verb PUT is only to update/replace.

The verb PATCH is only to update/modify.  

The diff between PUT and PATCH are that the put verb retrieve the full object and replace all, the patch verb only modifies the key:value that appears in the object sent.  

This is only the official info about a Restful Api, since you take it seriously, you should know the diff between your version and the ""official"". Your post is so well documented, it's a nice article to learn about nodex, express and authenticate with json web token. Thank you for share it.",1534540804.0
tulicreme,"Consider using pbkfd2 or the pwd module for password handling with random iteration to reduce brute force.
Then, well, most of those mongoose methods have a promise interface. maybe going async await should be simpler. Then again... Mongodb? :-\",1534546674.0
Liquidor,"Can't you group routes with the same middlewares?  
Because the amount of middleware spam in your code, based on this otherwise good tutorial, seems insane. Specially considering if you have 100+ endpoints.

Also, why would you create a middleware for the login instead of having that logic in the auth controller? Feels like the logic of this API is spread out randomly in the code base. Or is it just me?",1534607396.0
forvotes,"1: why isn’t there some tool (like on Django and rails) where I can just say: give me a api with these models (with these respective fields)?
2: what did mongo do here? Why not Postgres or m*db? That is, I understand why persistence, and I do not understand when (outside of specialized use cases where we’re working with data that’ll have a ton of potentially empty fields) we would prefer mongo (or any document based db) over rdbms",1534544682.0
theineffablebob,Why would you write a REST API in Node ,1534537232.0
freecodeio,It depends on what you're saving. Was the original document a text file?,1534529415.0
,"Well, if you receive a piece of data in buffer format and you want to just save it, but not manipulate it, then you could save as a buffer, so that later on you could do stuff with it. Not really a good reason, but should give a bit of a performance boost seeing as there are no tasks in between you receiving the data and storing it. ",1534593638.0
no_user_name_is_good,"The perk is the way you do not have a nest of file structures on the HDD, so you can have a singular area with a spaghetti mess of files in the database, and yet refer to them by their unique _id tags.  That also helps too when a user leaves you don't have to start removing files etc, there are no conflicts with files having the same name.  This speeds up development a lot because you don't have to write code to handle all the file system storage/access.

I also like it because I can bring it up into memory cut the file up into chunks and send it through a web socket stream as binary, and I find the stream seems to be faster and with less issues.",1534618809.0
k3liutZu,Why would I use this instead of Styled Components?,1534521336.0
dkkc19,"Puppeteer is a lot of fun. Been messing around with it for the last 2 weeks and I can't get bored of it. 

",1534522048.0
marocu,"Typically you only upload the source files, and then run npm install (or yarn) on the server itself. If that isn't possible then you're pretty much left with zipping the project up and uploading it. I regularly work with node_modules folders that are 500MB+ so 20 is really pretty small already.",1534518549.0
Charles_Stover,You can use a bundler like Webpack to compile your JavaScript files into a single JS file. This will exclude any files or functions that are unused.,1534527184.0
john_cobai,https://github.com/tj/node-prune,1534526645.0
SimpleTut,"You should not be uploading the 'node\_modules' folder.

I suggest  you try a service like heroku 

[https://www.heroku.com/](https://www.heroku.com/)

After you push your project it will automatically run 'npm install'",1534601350.0
kryptkpr,"If this is a frontend project you should be using webpack to ""compile"" your application into a folder of static html+js that you upload to the host. No node_modules needed.

If this is backend, upload package*.json and npm install on the server.  Disk space should not be an issue with backend, it's so so cheap. ",1534792864.0
clarle,"Upload your video to a CDN or other storage service (I use Amazon S3, for instance), and then get the URL to access it.

The database should store that URL and other metadata.  You can send that information to your database in any way you like, such as with a JSON payload in a HTTP request.",1534524442.0
Vpicone,All his react testing is god tier. ,1534506231.0
BehindTheMath,TypeORM,1534505377.0
k-sheth,Why? ORM merely hides the true data. Just embrace your data,1534521353.0
cariaga123,"* Sequelize that has support on multiple query language but for relational only
* bonus i think you might be interested in Node Mongo Admin npm for nosql. while nodeadmin/express-admin for mysql",1534570756.0
hambalamba,Mongodb with moongose https://mongoosejs.com,1534503170.0
,[deleted],1534503705.0
oxygenplug,"If you know Angular already, why not just try and make some small MEAN stack apps? Just something simple like a restaurant finder that uses the YELP api. Or a note app where someone can log in / sign up, and write notes that get saved. Or even a node command line app (check out the inquirer npm package!) w/ no front end stuff. 

I don’t think it’s worth playing $9k-$12k for a Bootcamp just to build a node portfolio when you already know JS and Angular. ",1534506404.0
rotharius,"Although it works, you don't have to use sessions for this because the messages are not that user-bound.

You could create a page for successful password resets (and other messages) and redirect them to there or use query parameters. I'd use sessions if there is user-specific, thus session-specific, state to be stored. For instance if messages would vary depending on user attributes or user actions. One benefit of not using sessions is that you don't have to manage the state manually (which adds complexity), e.g. checking if the value is in the session and making it undefined. Alternatively, you could use custom headers and adding a code that represents a status and/or message and show the matching message.

If you were going the statefull route, what is the benefit of checking a variable before setting it to undefined? Could you not just set it to undefined anyway if that is what you want it to be?

If you're going to generalize this way of showing messages, perhaps give it a more general name.",1534495465.0
Max_Stern,"[Flash messaging in Express 4: express-flash vs. custom middleware in ejs, handlebars, or jade ](https://gist.github.com/brianmacarthur/a4e3e0093d368aa8e423)  

[Basic Express 4.0 Setup with connect-flash](https://gist.github.com/raddeus/11061808)

And using sessions is totally fine because that's what they designed for — persistent data storage between user requests. 
",1534512988.0
mauvm,Really well written! Kudos for site responsiveness on mobile phones. ,1534499984.0
kryptkpr,"Wow is this your actual production stack?  I couldn't disagree more, you are writing way way too much code. 

You rewrote most of Supertest manually, stop it and just use Supertest (give it app object it does the rest). 

There is no need for an entire test db driver, just check NODE_ENV==""testing"" and swap in a test connector string.  

Then swap Mocha for Jest and expect(res).toEqualSnapshot() will change your life and let you delete two third of your test code.

Then run ""npm test -- --watch"" and your velocity will reach new heights.

Happy testing! ",1534509307.0
Aurovik,"Another vote for Sequelize here. Very popular, well-maintained and a mature list of features.",1534488708.0
endjynn,If you're using TypeScript then Typeorm is absolutely awesome.,1534485337.0
mauvm,"I'm using KnexJS, which is a SQL query builder. Looks like this:

```
const users = await knex.from('users')
  .whereIn('id', [1, 2, 3])
  .orderBy('created_at', 'desc') 
```

Works like a charm. ",1534486709.0
ChrisCodes,"Warning that this will mainly be opinionated aha but I love Objection so far!  It has a wide variety of plugins and is easy to use with great docs.

Also, if make sure to use the mysql2 driver with any ORM compatible with it.  ",1534481025.0
Mando0975,"That depends, are you looking to simply execute queries, or are you looking for more of an ORM? ",1534473673.0
Hagermeister,I’m quite new to this so this might be a stupid question but what is the advantage of using a ORM instead of just using like node-Postgres? (I know the question was about my-sql but just wondering in the case of pg),1534495068.0
BehindTheMath,"You need to give some more information, like a link to your code. ",1534453629.0
zayelion,"Use `ipcMain` not express when doing intercommunication. You can spawn processes in electron, just not from the chromium side. Electron is best thought of as a copy of Node that has a few extra parts. One of them is spawning a browser to be a UI. You can do all the normal node stuff from the `main.js` that spawns the UI. Stick it there.

Also you do not need express to intercommunicate as I said before, you can use ipc.",1534452802.0
Shadaez,"electron can run it fine, but you'll need to run it on the main process, not in the renderer process and as Zayelion said, use ipcMain to communicate between the two",1534462368.0
yungyahoo,"Ok so here's what I have finally come up with: I will render the html at a different localhost port using the http-server provided by node (from the main process) and have electron access the html at that port in a new browser window and then call electron's inbuilt pdf printing function. No need for any npm modules. Does this seem like a good idea? Is there any way to prevent the user from accessing the localhost port in a browser or something? Thanks!

",1534518245.0
The_frozen_one,"Pretend you are out sick, and you need to get a co-worker to gather some materials for a project that has to be completed today.

* Option A: you call a co-worker and walk them through what needs to be done. ""Go to my desk, look in the top drawer. See a red binder? No? Ok, try one drawer down, etc etc"" You have the co-workers full attention, but every time you cough or sneeze, the co-worker has to wait for you. Likewise, you are waiting for the co-worker to reply after each step. This is analogous to synchronous programming.

* Option B: you text the co-worker and go back and forth with text messages to walk them through what they need to do. You don't necessarily have their full attention, but they are never wasting time waiting on you to write a text message. They can do whatever else they need to do until your text comes in, and then read it and act on it when it is convenient, and then respond afterwards. Likewise, you can do other things while you wait for the coworker to come back with results. There's no guarantee that the next text you receive will be from the last person you texted (or if it is, it might not be about the last thing you texted them about). This is analogous to asynchronous programming. 

For me, playing with code is more instructive than learning terminology. Do you think this code will handle more than one connection at a time?

    const http = require('http')
    var connectionCount = 0
    var wait = 1000

    http.createServer((request, response) => {
        connectionCount++
        console.log('Request URL: ' + request.url + ' (connection ' + connectionCount+ ')')
        setTimeout(() => {
            response.statusCode = 200
            response.setHeader('Content-Type', 'text/plain')
            response.end('Hello, you were connection ' + connectionCount)
        }, wait)
    }).listen(3000)


Put that in a file called `server.js` then run `node server.js`. In a browser, type in (but don't press enter) ""http://localhost:3000/1"" then open another tab and type in ""http://localhost:3000/2"". Go to the first tab and press enter, then go to the 2nd one and press enter. You should see both requests go through. If you have Apache Benchmark (`ab` on the command line), you can run: ` ab -n 100 -c 10 http://localhost:3000/`

The options are:

`ab`: Apache Benchmark, you can use something like [SuperBenchmarker](https://github.com/aliostad/SuperBenchmarker) if it's easier to run on your platform

`-n 100`: make 100 requests in all

`-c 10`: make 10 requests at a time

`http://localhost:3000/`: make the requests to this URL

On my machine, this takes 11 seconds to run. In the server code above, it accepts a request, waits 1000 milliseconds and then responds and ends the connection. The question is, why does this take 11 and not 100 seconds to run? The answer is that node isn't blocking when it's waiting, it's idle. Sure, there's an event that it will act on defined by `setTimeout` at some point in the future, but until then it can continue processing other events.

And for what it's worth, there are a bunch of ways to use multiple threads or processes in node (`child_process`, `cluster`, `napajs`, `webworker-threads`).

EDIT: added a missing ""are""",1534445293.0
j_sanp,"Node.js is single threaded and async, so if you put a settimeout in your code, it will release the thread for other requests then gain the thread to process the callback. ",1534435380.0
scottypants2,"Yes, but Node APIs (and javascript itself) steer away from allowing blocking calls like that. Generally any waiting you do will have the waiting performed via callbacks or promises, and the thread freed up in the meantime. ",1534435276.0
Aesthetickz,"Node basically works like our brain. We cannot truly multitask, but still we can switch between tasks while letting the other wait. Imagine being a bartender and one guy asks you for a drink, you order your assistant to make the drink, but while the assistant is busy, you are free to take a new order and when the assistant is done with the drink you give it to the first customer.",1534451292.0
teja42,"What ever code you write runs on a single thread. Behind the scenes node.js is multi threaded. Things like promises, async await, some I/O operations make use of saperate threads. Also node.js has threads support in experimental stage so we can expect threads pretty soon. For now make use of cluster module to spawn multiple processes.",1534440050.0
altano,"As others said that’s not exactly correct. When processing multiple requests, the server will only handle one chunk of work at a time, where chunks are delineated by any async function calls. If the first request makes an async call (which almost everything is on node), its chunk of work is done and the second request will begin being processed. For example, if the first request requires reading a file from disk, the second request will start processing. Then if the second request makes a DB call, the first request might resume processing if the file is done being read.

So a single node application instance can handle many concurrent users. But if you’re running a node server and you need to handle more concurrent requests and saturate your server resources even more, you’re also probably running multiple instances of the server. One node instance uses one thread, but you can have multiple instances using multiple processes. They just won’t be communicating with each other and will each be independent instances of your application that will require some load balancing/coordination in front of them.",1534436718.0
mistralol,"
It depends....

If you have a really simple request and you can process it without performing any callbacks or waiting or stalling for any form of io etc.. Then yes you will serve that request atomically. However this is basically impossible since since you have to do io to actually do the request reading and response writing.

However even something as simple as reading a small file and serving it. Will involve reentering the io loop again which can then start to serve and process other client requests. Just because its ""single threaded"" doesn't exclude races cause the moment you involve anything external again its multi process and begin to race again.

eg the following can happen.

1. Server gets A's request.
2. Code processes the request and sends query to database.
3. Server gets B's request.
4. Code processes B's request and sends query to db.
5. DB Request from A comes back and response is sent.
6. DB Request from B comes back and response is sent.

The only problem here is the order of steps is massively interchangeable eg you could do it in order 1,2,5,3,4,6 or 1,2,3,4,6,5 and many other combinations.

Its basically the same as a web page doing a simple CRUD operations, eg read -> modify -> update with a web browser you get a race where 2 or more clients can read -> read -> update -> update -> write -> write and if they are changing different fields and you update the entire database row with the db query the last writer wins and the information from the others is lost.",1534441808.0
buleria,"Node's event loop will let other ""threads of execution"" (which aren't real threads) run while the current one waits for data. It's super efficient as long as your application is I/O bound - ie. doesn't do a lot of data processing that clogs up your CPU.

This approach is actually more efficient for I/O bound tasks, because you can keep thousands of clients in a single operating system thread. If you had one thread per client, the OS would spend more time doing context switches between threads than actually doing the work your app is supposed to do.
",1534453022.0
floodlitworld,"It is single-threaded, but it utilises a stack for asynchronous tasks. So if you ask Node to complete a task that requires it to wait (timeout, http requests, database calls etc) then it will add them to the stack along with instructions as to what it should do when that request completes (via event triggers, callbacks, promises etc.).

In the meantime, it'll simply carry on with the next task.

Note that you can use packages like Cluster which utilise multiple threads for dealing with multiple concurrent request/response cycles.",1534453207.0
calligraphic-io,"Just to add to what others have said (especially that doing a ""sleep"" *doesn't* block the server, as Node will push that execution context off the main thread to the event loop), Node is often used behind a proxy server like Nginx or Squid. You can scale the application by running multiple instances of it, and having the proxy load balance between those instances. If you anticipate your app growing to a scale requiring such an approach you need to code your app to handle multiple concurrent instances (e.g. handle resource contention for a configuration file, etc.).",1534453298.0
carlosnufe,"Go to nodejs official doc and search 'process.nextTick' and 'setInmediate'. Plus the gain of knowing what those mean, you'll read, not in detail, but in good enough way, the different stages to process a request. Otherwise, I'd encourage yourself to read about event loop. ",1534486054.0
rotharius,"Good article, will definitely refer people to it who are optimizing prematurely or blindly.

Build, measure, improve if needed.",1534498420.0
Giiin,"thanks, i'll try building this with angular :)",1534454395.0
Max_Stern,"So this is a replacement for node-cron? 
Is it stable and production ready? 
Asking because I wanted to use node-cron soon but might as well just start with SideQuest. ",1534494542.0
lucasmerencia,"Some years ago I created a lib named node-cron, but it has a problem, when a blocking I/O is made for example a loop, the main process is blocked.

I tried to create a library for task scheduling using child process, but I don't know if it's a good idea. 

Is this useful?",1534428060.0
psychic_gibbon,"Follow the instructions for your server here 

[https://enable-cors.org/server.html](https://enable-cors.org/server.html)",1534429996.0
jimwards17,Set the header value “Acess-Control-Allow-Origin: *” on the response you are returning.,1534425681.0
KingomTrek,"Hello! I think you are getting this error because of CORS: [https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)  


It will block requests from any provider that is not the same url, for example, if your API is running on [www.myapi.com/getAllData](https://www.myapi.com/getAllData) and a request comes in from [1.1.1.1](https://1.1.1.1) (Example client IP) it will be blocked.   


I think what you want to use is this package [https://www.npmjs.com/package/cors](https://www.npmjs.com/package/cors) and implement it into your API so the requests can get handled from anyone.  


If you are planning to only use the API From the React app, you don't need the package and can simply host the Frontend/Backend from the same URL and keep the API line secure.",1534425749.0
TriniDev,"Use this package https://github.com/expressjs/cors
",1534429343.0
SpanishJoplin,"npm install CORS and make sure it is installed in your dependencies in package.json

EDIT: and require it in your server.js in your backend and app.use it in your middleware",1534434102.0
KristianSakarisson,"I really like Pug. These days I don't do so much templating anymore, as frontend logic is usually done in React. But yeah, Pug is quite easy and flexible.",1534417647.0
funny_games,They are all quite similar but I like handlebars for trivial stuff,1534413499.0
KishCom,Nunjucks. Mozilla's JS template engine. I like it because I came from Python and was already familiar with Jinja2... they're very similar. ,1534431927.0
Ale32bit,"I like to use EJS, like PHP but in JavaScript",1534415985.0
mindnoot,I've only ever used EJS and it works fine for me. Easy and simple.,1534416468.0
Sythic_,"I liked Jade way back when, but IMO, skip the template engines, it makes server code messy. Make a stand-alone JSON API and separate frontend that calls the APIs via ajax.",1534415970.0
Aior,React - you can use it for server rendering only.,1534415753.0
smilingjester,"For lightweight stuff i really like dotjs http://olado.github.io/doT/index.html, since i can interpolate code and complex objects, i can do hacky things like pushing functions from controller to the view",1534419556.0
elrodrix,Ejs or pug always,1534422687.0
virtulis,"I really like using JSX without React. I even made [a library](https://www.npmjs.com/package/ujsx) and I find using it quite enjoyable. A good middle ground between concatenating/interpolating strings and a full-blown DOM and stuff.

Edit: I used EJS before but there's no info about parameters so no help from the IDE. Whereas you can put JSX in a function body and make WebStorm ❤️ or whatever you prefer know exactly what's going on. Add TypeScript and it doesn't even hurt that much anymore.

Edit 2: ❤️ in parens looks too funny",1534428253.0
floodlitworld,"I use Handlebars. Very, very easy to learn and quite powerful.",1534421080.0
malicar,HTTPS://handlebarsjs.com simple and flexible,1534441309.0
,"This post is like finding Gold! Thank you to everyone who commented, I have discovered so many new things. :)",1534576369.0
8tentaculos,"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
For simple things I like native es6 template literals. You don’t have to learn another language. Just js. ",1534421543.0
jsdfkljdsafdsu980p,Ejs or if you can react ,1534423473.0
CountD3,"EJS, I also work in Rails so it becomes very similar.",1534424955.0
AUTplayed,"I prefer [moustache](https://github.com/janl/mustache.js), very simple and imo pretty compared to ejs",1534433216.0
50653,"React.js. When your site gets complex enough, you're probably going to want to do client-side HTML rendering too, to add interactivity to your pages. So you might as well pick a solution that works great for everything.",1534434833.0
kifkev91,I like ejs. I worked with rails before and it works exactly the same. I like that it's just basic html and you can just easily insert partials or js code. No need to learn a new syntax or get used to another style of writing frontend.,1534434857.0
festive_bardeen,Pug hands down,1534440308.0
programmatical,Nunjucks is a solid engine ,1534442703.0
deadlyicon,None. Use react ;p,1534446249.0
raistlinthewiz,nunjucks,1534450445.0
vetva,"I found typescript and react using express-react-views to be very productive for me as I can share database models and other code between server and templates. TypeORM models are perfect for this setup, you can use them directly in the view.",1534460110.0
treyvale,"[Marko](https://markojs.com/), a node templating engine that supports server and client side rendering.",1534561698.0
KristianSakarisson,"Is there any particular reason why you need a single tutorial that does all 3 things? 

Why not just follow one of those Node + Express + Mongo tutorials and just switch out the Mongo parts with Postgres implementations? It would be a good learning exercise. ",1534415181.0
a_atalla,https://mherman.org/blog/2017/08/23/building-a-restful-api-with-koa-and-postgres/,1534419537.0
ncubez,Looking for the exact same thing. I wanna do migrations and relationships similar to what I do in Django. ,1534410941.0
johnnarduchi,https://www.youtube.com/watch?v=AFiqctkoVJ4&list=PLillGF-RfqbaEmlPcX5e_ejaK7Y5MydkW,1534430881.0
FunctionallyReactive,"This is one of my former teachers and covers exactly what you are looking for if you already have a basic understanding. It's more of a follow along and build than instruction, but he does it very well

[https://www.youtube.com/watch?v=WYa47JkZH\_U](https://www.youtube.com/watch?v=WYa47JkZH_U) ",1534433883.0
PsiloLove,Probably forgot to add body-parser middleware in express as it doesn't parse body by itself you can't access it.,1534395649.0
Move_Zig,"If you have `var test = {""username"":""foo1"",""password"":""foo2"",""fname"":""foo3"",""email"":""foo4""}` on the front end, what are you sending to the backend? `test`, i.e., `{""username"":""foo1"",""password"":""foo2"",""fname"":""foo3"",""email"":""foo4""}`? Then your back end won't have a variable named `test`.

Assuming you're using express and body-parser and you've sent the data in a way body parser can understand*, then you would access the data on the back end via `req.body`. `req.body.username` will equal ""foo1"".

If you want a variable named `test` on the backend, maybe you want something like

    const postData = {
      test: {
        username: ""foo1"",
        password: ""foo2"",
        fName: ""foo3"",
        email: ""foo4"",
      },
    };

And then when you make your call to the back end, send `postData` (properly encoded) as the body. If you're using the urlencoded method, make sure in your body-parser midleware options you have `extended` set to `true` because it's a deep object.

\* if you used the body-parser middleware like this:

    const app = express();
    app.use(bodyParser.json());

then send the request with a `Content-Type: application/json` header and the body should be the output of `JSON.stringify(test)`.

If you used body-parser like this:

    app.use(bodyParser.urlencoded({ extended: true }));

then send the body urlencoded (e.g. username=foo1&password=foo2) like an HTML form would do.

You can use both body-parser middleware functions and then your back end will able to accept either format.

There are other body-parser middleware functions like `bodyParser.raw` and `bodyParser.text`. You can use whichever one make sense for your case, but your front end must send the data in the corresponding format.",1534416685.0
MrWasdennnoch,First debugging step: condole.log(test) on the server side to see what it actually is compared to what you thought it was.,1534412730.0
kirbkat,Where in your node application are you sending it?,1534395189.0
RustinWolf,What does test returns?,1534395259.0
BithTree,"You typo'd your require. Error messages can be very helpful, but sometimes we need to read between the lines.",1534381346.0
eponymz,that's a known issue. It's a concurrently thing where it finishes shutting down the client and ends the process. There's a couple different workarounds posted on the issues in the nodemon repo. ,1534381955.0
bmarkovic,It's probably a bug in Knex or Objection. You should report it to Objection first (and if it's a Knex bug they'd likely report it upstream themselves). You should probably extract/mockup relevant code so that they can replicate it.,1534405087.0
cmarenburg,"Hey all got it resolved! It was my fault, didn't understand fully how the $afterInsert hook worked. Thanks to everyone who responded!",1534426757.0
PerfectOrphan31,"Any chance you could share some code, just to give a but more reference as to what's going on? ",1534412366.0
mitchitized,"Yeah you can cluster your node app to use all cores, but that only makes sense if you’re cpu bound.",1534374701.0
nothingduploading,"yes, clustering.",1534375369.0
psayre23,"I run a local instance of Kibana for just that. 
https://www.elastic.co/products/kibana",1534396195.0
idontknowstufforwhat,"I really enjoy using Influx/Grafana for metric tracking and visualization. Grafana has some great integrations and has super easy-to-set-up alerts. It is not as plug and play as you seem to be after, but it is a powerful duo.",1534396579.0
virtulis,"Slightly off topic but you really shouldn't `require` user-supplied strings. Can the command begin with `../`? Are you sure it never will? 

There really is no harm in just listing all available commands manually.

Edit: And on topic, if you wamt to return something different, guess what, go ahead and return something different. It's your code and you can do what you want. The easiest way to tell what it is in index.js would be to return an object with ""type"" and ""value"" keys. Or you can duck type it. Or you can indeed pass ctx and let the handler do absolutely anything with it. Each approach has pros and cons. ",1534400187.0
suncoasthost,"From how I understand your question I would suggest you use sockets. A client makes a request to a server route and the server renders the request at that time. Unless the client asks for the request again, the data that was sent can not be altered. You would need to set an interval to request the data every so often. I do not recommend this method.

Think of it like the server sent you a parcel and you have a piece of paper with a message. The content of the paper can't be altered once you have received it. 

Sockets keep an open connection and allow the server to send messages to the client without the client asking first. ",1534384850.0
,[deleted],1534366956.0
ScabusaurusRex,"Every time the route is called, you'll need to load the file. If it's an include, it's only loaded once.",1534382580.0
YungDorit0,This is very helpful thank you!,1534546435.0
YungDorit0,Thank you I'm going to look into this!,1534546480.0
Pelopida92,"If i understand this correctly, you are having more or less the same problem that i was having some time ago. Personally, i ended up solving it by implementing React in my stack.",1534414663.0
damnloveless,"Post -> has many reactions  
Reaction -> has a user id and emoji  
Validate the post only has one reaction per user id, update the reaction if existing  


Not sure if this is the best way to implement, but hopefully gets you started down the right path.",1534366870.0
kranker,"You don't address any of the specific reasons that npm have given, which led them to bring about the policies you disagree with such as not being able to delete your project.

Also, surely all of the rights that you're complaining about npm demanding for themselves are already given to them by your zlib licence (and most open source licences) ",1534371063.0
xyryvgsxfd,"First of, thanks for the thread, better than nothing. I can somehow understand your point, but the move with publishing a not working version was pretty stupid - a working version with just a deprecating message would have worked too. I'm too not a fan of NPM, not only because I don't have real control over my published packages, there are more reasons - at least for me.

Anyway, I'm really happy that you are still working on it. 

// ot 

I there actually another Node package manager which is not associated with NPM?",1534377792.0
Twin_Future,"Good show, you sound a lot like me straight forward. I'm looking into using this for my own testing purposes. Want to create a sockets/database on top of nginx serving static content. I think this will probably give me the best performance with nodejs. Just in the phase of researching techniques at the moment. I can't seem to get the latest version of this working on windows. Do I have to install linux to test this cause at the moment my testing environment is good. Looking to see when I deploy to linux if it will be better or not.",1543809961.0
gridevla,"If you only want to update the name asset... why not to do only that?  
If the client send you the id for the asset and the new name, you can locate it and rename it as a common file, right?  
  
You are asking too about post and put, express is for api serve, restful api usually takes the following structure in CRUD:
- Get is for read only
- Post is for create a new one
- Put/Patch is for edit
- Delete is for delete

You should know that post and put to the same route are not the same thing, as you are routing the verbs with their own functions.
  
If this is not your problem, please explain so i can try to help you :)",1534357389.0
Toxicable," I use a monorepo.  
We have lots of projects that all use the same set of shared libraries, so the biggest advantage so far is instantly seeing the impact on other projects when you make a change to any of the shared libs.",1534359430.0
LivingAnywhere,"Depends on the use-case. I have a website and a CLI tool super closely knit to eachoter. A monorepo is a good setup for that because the api change of the website results in a cli change quite often. 

I also have a rails website with a bunch of rails engines, they also work pretty good in a monorepo. So it depends, can they live without eachoter, how often does that happen, or are they mostly version incremented together? I usually stick to a monorepo until it gets messy, no matter what the language.",1534353621.0
longhorner,"I used to have to setup the symlinks myself, but now I use a mono repo and lerna to do it for me. I still wish i could keep each piece in its own repo, but using lerna and not having to publish the npm packages every time has been worth it. ",1534370342.0
jwalton78,"The *easiest* way to solve this is to restrict socket.io to only use websocket, and then do all your API messaging over socket.io.  Because websockets are long-lived, your socket will connect, and all socket.io messages will go to the same server (although if your server goes down and the client reconnects, it may reconnect to a different instance, but that's probably desirable behavior in most cases).

If you really need to support polling, that's trickier, because the socket.io client is going to poll the server over HTTP, which is not long-lived, and you need some way to make sure a poll from the client always goes to the same server.  The *easiest* way to fix this is to use ""sticky sessions"" AKA ""session affinity"" in your load balancer (Amazon and NGINX both support this).  This will make it so requests from a given IP will always be routed to the same instance.  This also means you could mix REST and Socket.io requests, and know they'd be going to the same instance.

If neither of those work for you, there's some funky solutions (someone else suggested socket.io-redis here) which will let you send messages back and forth between instances, so any instance can handle the poll from any client.",1534357134.0
the_Luik,"Hello,  
Didn't get to look more (not at home), but can this maybe be used [https://github.com/SocketCluster/socketcluster](https://github.com/SocketCluster/socketcluster) ? ",1534347765.0
longhorner,[socket.io-redis](https://github.com/socketio/socket.io-redis) should solve your problem,1534352774.0
,This is what socket.io-redis cluster is for. here is a minimal example [Scalable-Socket.IO-Sample](https://github.com/trantorLiu/Scalable-Socket.IO-Sample/blob/master/app.js) .,1534356884.0
,[deleted],1534344027.0
morku2z,"While Mongo is certainly very easy to get started, I highly advise against using it in an actual project/product, especially if your data has schemas and relations (as 99% of all use cases do). Postgres is superior to Mongo in basically every regard and gives you all the advantages of a RDBMS.",1534354738.0
cryptoforbeer,IMO watching Brad was far better than attending uni classes.,1534356150.0
trendy_traveler,"I love Brad, he's such a down to earth guy! I will personally buy the course to support him.",1534353486.0
jazehoots,Watched some of this guy's Youtube videos. He's not bad,1534341129.0
Dr4gonkilla,"Does anyone recommend this course first to learn React, node, express, and mongo or to take another course to learn them separately? For example my React base foundation is not that good and I am scared this course will only touch the water on everything since its so many things crammed into 16 hrs",1534341568.0
kifkev91,"I actually bought this course and worked through the API part (all the React/Frontend part i will do later) and i really injoyed it even more than his youtube videos. He is not rushing through the content, he is explaining his thoughts and what is going to be built in the next sections, so you can try it yourself before. Think that's a really good starting point to fullstack javascript development. Of course some knowledge of javascript is required.",1534362076.0
TehMadWolf,This is a referral/affiliate link to this course,1535312453.0
theineffablebob,mongo gay,1534353053.0
Nadim01,"If you have a python script ready, I would just use a library like Flask. You can use that to serve your html and css files and upload whatever files you need:
http://flask.pocoo.org/docs/1.0/patterns/fileuploads/
",1534338894.0
literally_a_tractor,">I'm guessing I would need to implement some kind of security in case people upload malicious documents to the site. I have no idea how to go about this

You would want an authentication mechanism first and foremost.  As for malicious docs, you would just be reading the file into a stream and parsing its contents into some kind of string, then into a readable data format, like JSON or something.  I could be wrong but I dont think this is a big concern.  You will not be eval()'ing any of the incoming data.  A good parser would be (or allow) handling special chars or escapes and throw on corruptdata.  But to be sure, I think what you are concerned about is called Cross-site script (XSS) injection.  You should read up on that.

>'you can't do that for security reasons'

Yeah, that doesn't make any sense.

All you need is a REST API.  A server that provides an web endpoint that can handle HTTP requests like GET and POST.

You will not want to 'roll your own' authentication, nor would you need to.

You are on the right path with Express, but I would recommend something like [FeathersJS](https://docs.feathersjs.com/) which is a minimal framework built on top of Express for building service based REST APIs.  The framework turns express routes into ""services,"" which can represent database operations or custom methods. You can then process requests and form responses with before and after ""hooks"" set up around each service.  It also provides built in strategies and functionality for authenticating users, as well as database adapters for mongodb, SQL, etc.  It also provides a nice base client framework to build off of, but you dont have to use it.

You would create a User service, an Authentication service, an Upload service, and a File service.  Users POST to /upload, the service processes the file, saves metadata to File Service (its database), and Users query GET /file/id?parameters and download the file.

You would make the Upload service a ""custom service"" which would take the file and call your processing functions (or applications).

That's about as detailed as I can get without doing all your work for you.

Also, are you doing this because you are trying to learn, or are you just trying to solve this specific problem?  If the latter, have you heard of [Zapier](https://zapier.com)?

",1534351659.0
tzeentchy,"Don't see a reason not to although mods might disagree, make sure to headline it with location so people can filter easily and prepend with the fact it's a job posting. Good luck in your search!",1534327493.0
thickoat,Try [Ask HN: Who is hiring? (August 2018)](https://news.ycombinator.com/item?id=17663077) \-- by far the best place to find talent for free.,1534341290.0
GoblinsStoleMyHouse,"Yes, there is a way to do this. It's called [PurifyCSS](https://github.com/purifycss/purifycss).",1534322902.0
mweibel,There’s also [purgecss](https://www.purgecss.com/) which I just recently used with a lot of success. It works slightly different than the other tools as far as i know. ,1534328333.0
quarterto,"there are a few tools that can do this, like [uncss](https://github.com/uncss/uncss) and [purifycss](https://github.com/purifycss/purifycss). but, shameless plug, i've written one that's a bit less comprehensive but a lot _lot_ faster: [postcss-remove-unused](https://github.com/quarterto/postcss-remove-unused).

it's based on cheerio wheres the others use jsdom or phantomjs. so, while it's a lot faster, it'll only ever work on static markup.",1534325189.0
VanGoFuckYourself,"CSS once compressed rarely adds up to much. It's always a lot of repetition of strings, so it compresses very well. ",1534322295.0
lord2800,Not unless you can hit every possible combination of every page in your app.,1534314609.0
gajus0,"It is not deprecated, but https://github.com/gajus/usus does what you want.",1534332505.0
Razoyo,"Are you using a CSS framework? If so, Purge and Purify will work. However, if you are using a CSS framework with an accompanying JS framework like Bootstrap or Foundation, you may run into issues if elements are being added on the fly that refer to the styling. If you are only using the CSS portions of those bundles, then, Purge and Purify will be fine, or, you may just want to manually look for what you are using and only load the appropriate bundles.",1534357956.0
cdn_int_citizen,Css cleaner ,1534360574.0
mrgunston,I remember searching for the exact same thing once and I couldn't find anything. ,1534319179.0
badthingfactory,You should be asking yourself why 90% of your css is unused.,1534329832.0
tswaters,"Just installed node/npm@latest to check this.

delete node_modules in a project I'm working on and reinstall

>added 566 packages from 1107 contributors and audited 2730 packages in 96.602s

Tried it again -- could be missing cache, new version, whatever --

> added 566 packages from 1107 contributors and audited 2730 packages in 54.78s

That's better.  I checked git status and a bunch of changes got written out to `package-lock.json` -- looks like all the `requires` are now using ranges.... Interesting... compare that time against the last version I was using:

    git checkout package-lock.json
    nvm use 8.9.4  # last version I was using
    rd /q /s node_modules && npm i

> added 566 packages in 55.658s

So pretty comparable to the last run under latest node/npm. I ran the delete & reinstall again for good measure and got the same results.

Also while I'm doing this I looked at taskman's performance of the disk and checked out the `node.exe` process -- it does a lot of scanning on `%appdata%\npm-cache` and the project directory writing out things, but I think that's to be expected.

According to `https://nodejs.org/dist/index.json` starting in v10.3.0, npm has been bumped to 6.1  (6.2 now in latest).  My guess is this includes a changes to cache and/or package-lock -- that's why it takes longer to install the first time.

As for node being slow to startup -- I tried just running the unit tests and didn't notice any discernible difference in the time it takes.... mind you it's a pretty simple express app with ~5 or so files... still a bunch of files it needs to require when it's spinning up.

Is your HD healthy?  15 seconds to spin up an express application is not the best... It sounds like your HD might be dying.  That would explain new slowness without changes to runtime / code on both counts.",1534308868.0
KsawK,Maybe your browser is just caching? Did you disable cache?,1534293018.0
the__itis,use js objects and then convert when presentation is needed ,1534303192.0
MiraReakktor,"Hey! I'm reading this one

https://books.goalkicker.com/NodeJSBook/

I don't know if it's the best , but it is a very good resource to learn a lot of practical things. Give it a try! ",1534284001.0
blackxored,NodeJS 8 The Right Way,1534299940.0
WebDEG,"I would also recommend you these websites:

http://eloquentjavascript.net

https://javascript.info
",1534296327.0
tzeentchy,"Once you get past the initial and more basic language books, check out the following . It's free, and has been the best series I've given to anyone I've hired in the past for either node or pure UI.

https://github.com/getify/You-Dont-Know-JS/blob/master/README.md

",1534327700.0
xemasiv,"learn es6 js, read node api docs, follow online tutorials.

casual reading with book is crazy since a lot of change happen within a month in node / npm ecosystems.",1534347039.0
RobocopLemonade,I think a great first resource would be 'The Net Ninja' on YouTube. He has a Node.js playlist that takes you from installing Node on your machine to building a to-do list app. It's pretty easy to understand. After that I would check out Brad Traversy. He has a wonderful YouTube channel and top-notch Udemy courses based on project building that are only $10. ,1534279647.0
Aloshxvz,"Im currently taking “ The complete Node js developer course 2nd edition” by Andrew Mead and Rob Percival on Udemy.

One of the best courses I have taken on the platform so far.",1534285420.0
t644sf12,"Mozilla Developer Network has some good tutorials, also Freecodecamp, though I think the ones there are actually hosted by another site.

I would start with the Mozilla one and go through the Express.js tutorial. Node makes it really easy to build something and play around with it, implement testing, and do as little or much with front-end as you want.

If the asynchronous aspect doesn’t click at first, don’t give up. It can be very confusing at first.",1534290818.0
ziioynx,You may also want to check out Wes Bos's course http://learnnode.com it's a bit old but provides a good foundation to get going. Especially if you are more interested in web apps. ,1534287965.0
rgaino,"I took 3 courses on Udemy when I wanted to switch to the Node/React stack. Sure there's plenty of free material out there, but I think these courses really helped me, and they were really really cheap.

NODE
1) https://www.udemy.com/understand-nodejs/learn/v4/overview

REACT
2) https://www.udemy.com/react-redux/learn/v4/overview

AND THEN ALL TOGETHER
3) https://www.udemy.com/node-with-react-fullstack-web-development/learn/v4/overview

I highly recommend this.",1534280626.0
Charles_Stover,"LinkedIn is doing a promotion with six free NodeJS tutorials on LinkedIn Learning until August 20th! You get a badge on your LinkedIn profile for each of the six saying that you are certified in them. The beginning ones are meh, but may but interesting for a new dev. The advanced one is great but definitely requires previous knowledge.

I don't know if it marathons well but I'd definitely recommend hitting it up before the 20th comes.",1534295928.0
tigerden27,"I don't know your javascript knowledge or http knowledge, but for beginning level stuff I have two places...

Check out this on GitHub, I haven't gone through it all, but it's got a lot of good info.

[https://github.com/maxogden/art-of-node](https://github.com/maxogden/art-of-node)

Also check out Flavio Copes, he's currently writing a series of blogs broken down like chapters in a book.  The series will continue to grow.  He also has good material about javascript and Vue.

  [https://flaviocopes.com/](https://flaviocopes.com/)

If you have an intermediate - advanced knowledge of javascript and are comfortable with http then I'd say skim the above and jump in on a project.  Flavio has the info on how to setup you environment to get you started.",1534278059.0
Earhacker,[Learn You the Node.js For Much Win!](https://github.com/workshopper/learnyounode),1534287202.0
quadriplegic_coyote,"I can't tell if you wanted video or not. 

My learning process for new tech has been this:

1. Find YouTube video between 30 mins to an hour of an overview of the tech - someone using it, not all that install easy crap. Watch at 1.25 speed. Actually pay attention, don't just background it.


2. With this knowledge, start writing an app with the tech. 


3. When I don't know a thing, Google ""{tech I'm learning} how to {thing}"". This mostly gives the tech docs or stack overflow page, so I end up just keeping those open and searching one or the other depending on complexity of my issue. If it's format a string, use the docs. If it's some obscure error or a 3rd party library, use stack overflow.

",1534289714.0
pchinjr,What’s your current level of programming knowledge? What kind of projects do you want to make? Why are you interested in Node?,1534294863.0
hfeeri,"Hello Folks,

If you prefer written tutorials, RisingStack has a series called Node Hero where we begin from the basics and cover stuff like databases, project structuring, authentication, testing, debugging, security, deployment & monitoring.

Start here: https://blog.risingstack.com/node-hero-tutorial-getting-started-with-node-js/",1534325360.0
tpiros,Here's a nice little introductory course: [https://www.fullstacktraining.com/courses/introduction-to-node-js](https://www.fullstacktraining.com/courses/introduction-to-node-js),1534318660.0
kvnpmrtn11,Here: https://scotch.io/,1534276921.0
Windows-Sucks,DuckDuckGo is your friend.,1534285245.0
extinctSuperApe,W3 schools,1534283037.0
compagnt,"I also posted on Medium, but is it feasible to move from an Express app for all the orchestration to individual Lambda functions instead?",1534280356.0
compagnt,"I was able to build a backend to a prototype mobile app using lambda functions only a couple of years ago. Wasn’t optimal back then, but now, probably yes based on your description.",1534264830.0
daywalker051,"I do it for my company, very easy to do (we use express as well)",1534265724.0
StoneCypher,"It's entirely possible.  There are a few things to be aware of.

1) Lambda requires API Gateway, which in turn has a 10 meg post limit.  This means this strategy is impractical for things that need to ingest large files.  You can't make YouTube or Imgur this way.

2) Lambda isn't the fastest.  Usually that's okay, but if you're making a realtime game, it might be a problem.

3) It depends a little on your access patterns.  If an active user is like reddit, and hits maybe max 100 pages in a normal session, that's fine.  If it's a casino, and the server is getting hit twice every three seconds for four hours, you're going to find those costs stacking up alarmingly quickly.

4) It does commit you to either AWS libraries or some moderate quality community stuff",1534291928.0
xylempl,"There is, but it doesn't seem to be actively developed: https://github.com/mozilla/spidernode

There's also a version running on Microsoft Edge's Chakra: https://github.com/nodejs/node-chakracore",1534257545.0
mtaon,There doesn't seem to be a widely used general purpose runtime based on [SpiderMonkey](https://en.wikipedia.org/wiki/SpiderMonkey) but it has been embedded in some software. A major one would be the GNOME desktop environment that uses SpiderMonkey for the user interface and some applications.,1534257837.0
virtulis,"Well, Node isn't just a bare V8 but also quite a bunch of V8-specific bindings, both bundled and from npm.

So is there something to run your Node-targeted code on Spidermonkey? Probably not. If you need just pure JS or will add bindings yourself take a look [here](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Introduction_to_the_JavaScript_shell).

There are also many JS engines for non-browser purposes. I find Duktape quite interesting. ",1534270822.0
vexii,"there is the [Rihno project](https://en.wikipedia.org/wiki/Rhino_(JavaScript_engine))  

",1534262947.0
GoblinsStoleMyHouse,Why would you need it? V8 is a fantastic engine.,1534267574.0
User31441,Never heard of anything like that. I doubt it exists. ,1534257523.0
robotmayo,You are using the session middleware twice which might have some strange side effects.,1534254018.0
Move_Zig,"You got a large variation between your tests for Koa (3423 req./s vs. 5558 req./s, a 62% difference). Maybe you should run it more times to get a better average.",1534245037.0
Wickity,"This has not been my experience, but I don't use the generators.  Not sure what is included in that.",1534253113.0
robotmayo,Sounds like somethings up with your setup. What versions of koa and express are you using. Koa and Express are roughly equal in performance in my testing. It wont matter much for most applications anyway. Ive run benchmarks before and got similar variance to Rayguns tests.,1534254600.0
nejcn001,"What made Koa slower was middleware koa-logger, since its made only for development.

I've made tests myself and its true (source: [https://github.com/koajs/logger/issues/38](https://github.com/koajs/logger/issues/38)).

I thought by changing NODE\_ENV to production it will work as a production logger, but as it says on github koa-logger its only a development logger.",1534329678.0
broofa,"Naive question:  If performance isn't a concern, is there any reason to prefer `ClusterWS-uWS` over `ws`?",1534264674.0
stuckinmotion,Wait what happened to uWS? Why did it 'go down'?,1534265787.0
BenZed,Well done!,1534243048.0
FreezIn69,Nice one!,1534260940.0
matthewsilas,"nice job! any details on the C++ changes here? https://github.com/ClusterWS/ClusterWS-uWS/commit/3097afca7ac6dbdd64bc3e3e6da9580e958e1cec

for a low level package like this, i'd have to write a couple tests for mem leaks & benchmarks before making the switch. if you've already got some, i'd love to see em!",1534277399.0
AesunaIoHealth,this is fantastic!,1534288971.0
alex_agc,"If you are using any Linux distro, install htop and iotop and check memory, CPU and IO operations, on the other hand in the install process launch with --verbose flag and check how many time takes from package to package.",1534236260.0
50653,Is your disk drive almost full? OSX has terrible performance when disk space is low.,1534306427.0
nothingduploading,Top 5 Reasons I downvote shit like this...,1534229184.0
MatthewMob,"Can mods remove these redundant, outdated, poorly written, ad filled, notification requesting and horribly designed garbage posts?",1534232020.0
dispatchingdreams,You need a Try Catch or some kind of validation to check the data before you try and parse it. ,1534226372.0
MeikaLeak,Just catch the error. Nothing complex is needed at all,1534228876.0
erutulco,"Looks like the remote API returns HTML instead of JSON when the response is invalid.

1. If you're parsing the JSON string yourself, wrap your ""JSON.parse()"" with a try-catch.
2. If you're using synchronous requests to the API, wrap your request in a try-catch.
3. If you're using asynchronous requests, the error should be passed to the callback function as the first argument.

In all 3 cases you should be able to catch the error and handle it accordingly.

EDIT: spelling",1534229120.0
vir123,"Your server should not restart at routes that aren't found. It should just return a 404 status code and optionally a body.
If a non 2XX status is returned your front end should not parse the result (so it shouldn't display that error in console) and should go to an error handler.
Cluster doesnt' have anything to do with it.
",1534229564.0
kranker,"It should just work.  It's possible that you're binding the server to 127.0.0.1, in which case you need to bind to either 0.0.0.0 or one of the machine's specific IP addresses ",1534197039.0
MTG_History,"If you find out the IP address of the machine that is running it, you should be able to access your app at xxx.xxx.x.xxx:yyyy, where the Xs are the computer's local ip address, and the Ys are the port that the app is running on. Make sure they're on the same wifi network!

If you're struggling with that, you can also use a service like ngrok or Pagekite to expose a tunnel to your localhost port to the internet.",1534198394.0
MnamJeff,"If youre hosting on port 80 (http) you can just go http://hostname where hostname is your computer's name or local IP, you can specify the port by adding :(port) without parentheses after the host name",1534210333.0
roboctocat,"[https://ngrok.com/](https://ngrok.com/) is your solution.  
Lets assume your node is running on port 3000.

Running

>ngrok http 3000  


will produce url in following format r/https://1u3203234.ngrok.io. Open browser on your phone and access given url. ngrok tunnels external requests to your local environment.  


Ta da...",1534198331.0
injektilo,"Passport can be configured in many different ways, but you're probably using plugins that store session IDs in cookies. That's fine for traditional Web apps, but modern SPAs, mobile apps, Electron apps, etc, usually do it differently.

OAuth 2.0 and Open ID Connect 1.0 define standard ways of doing this. You could be your own provider. My company uses the specs for our internal apps and apps we sell to customers, but we don't integrate with Google or Facebook or anything like that.

If you wanted to roll it yourself, the basic idea is this: A log in dialog in your app collects username and password. App sends to server for verification. Server returns access token that expires in X hours. App caches that token and sends in a header in all subsequent requests. Server verifies token in header is valid before handling requests. To log out, app discards the token.

OAuth 2.0 has a ""resource owner password credentials"" grant type that describes what I think you need, but there's still lots of options that go into fully implementing this regardless of whether you follow the spec or roll your own.",1534227674.0
ChronSyn,"2 options; Hardcode a secret into your app and send it along with your POST request (see below).

To minimize possible CSRF or similar nasties creeping in, have a GET route that returns a secret. This secret should only be to prove that your app is sending follow-up requests.

Send a HTTP POST request with username, password, email, etc. auth details to your authentication route. Add in the secret, check it matches on the server-side, then run your usual authentication routine. Return whatever data needed to the client to tell it that access has been granted or declined.",1534238485.0
tweettranscriberbot,"^The linked tweet was tweeted by [@nodepractices](https://twitter.com/nodepractices) on Aug 13, 2018 18:50:44 UTC (9 Retweets | 5 Favorites)

-------------------------------------------------

After finalizing the security best practices section, where should we focus on the next period? which type of \#nodejs &amp; \#javascript best practices would you like to see most? [https://github.com/i0natan/nodebestpractices](https://github.com/i0natan/nodebestpractices)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1534189469.0
broofa,"Well, it's not that hard to hand-roll a promise for this ...

    // Assuming `stream` is your response stream ...
    const chunks = [];
    const dataEndPromise = new Promise((resolve, reject) => {
      socket.on('error', reject);
      socket.on('data', chunk => chunks.push(chunk));  // Important: Make sure `chunk` is a Buffer, not a String!
      socket.on('end', () => resolve(Buffer.concat(chunks));
    })

One thing to note: One *very* common mistake is to turn the data chunks into Strings before concatenation.  This can lead to errors and corruption if chunk boundaries happen to fall on [surrogate pair](https://en.wikipedia.org/wiki/UTF-16#U+D800_to_U+DFFF) boundaries.",1534194515.0
curiousdannii,Do you have needs that would prohibit using node-fetch? ,1534252968.0
Console-DOT-N00b,"I'll piggy back on this and ask if anyone has good sequelize articles, documentation or etc?

I find sequelize's documentation to be complete, but also a bit perfunctory a they change their examples every other sentence....",1534216368.0
literally_a_tractor,"Its really hard to tell without seeing your code, and your description is slightly confusing, but...

>I then have an 'interim' table

I believe its called a ""through"" table, or ""through relation"".  How are you defining your associations?

    //Model def for '/employee_task' service, if there is one
    EmployeeTask = sequelize.define('employee_task', {
    ...
    });

Defining through is required:

    Task.belongsToMany(Employee, {through: EmployeeTask});
    Employee.belongsToMany(Task, {through: EmployeeTask});

I would also try defining ""as"":

    Employee.belongsToMany(Task, {as: 'EmployeeTasks', through: 'employee_tasks'});

>except the employee\_task table which is a string.  
>  
>It's primary key is simply \[employee\_id\]:\[task\_id\]  
>  
>which should have foreign keys on employee.employee\_id and task.task\_id

Your descriptions seems confusing, but maybe it is just your use of the word ""on"" that is throwing me off.

To be clear, the Employee model's pk is 'employee\_id' and the Task model's pk is 'task\_id'?  So employee\_task is taking those primary keys and creating employee\_task.employee\_id and employee\_task.task\_id?  Or do you mean that the association is setting employee\_id on the employee table?  That wouldn't make any sense.

Another way to think about this table is that it should have foreign key columns:

|id (pk)|employee\_id(fk)|task\_id(fk)|
|:-|:-|:-|
|'1:1'|1|1|
|'1:2'|1|2|

Also seems like you are going about you pk the wrong way.  What are you trying to achieve with this?  Are you not duplicating data?  Creating more work for your application?  How would you even use that key?  I think you just keep it as integer and auto-increment:

|id (pk)|employee\_id(fk)|task\_id(fk)|
|:-|:-|:-|
|1|1|1|
|2|1|2|
|3|2|1|

    //Model def for '/employee_task' service, if there is one
    EmployeeTask = sequelize.define('employee_task', {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true
        }
        //columns for foreign keys will be set by sequelize, no need to define here.
    });
    Employee.belongsToMany(Task, {as: 'EmployeeTasks', through: 'employee_tasks', foreignKey:'employee_id'});
    Task.belongsToMany(Employee, {as: 'EmployeeTasks', through: 'employee_tasks', foreignKey:'task_id'});

Nothing is getting set on your Employee and Task tables.  You have one record per User and per Task, you can't represent ""many to many"" on that, hence the through.  You probably know this but it bears repeating.  You use ""include"" in your params, which Ill get to below.

Now, your query doesn't seem right to me, but the description is also unclear:

>Either all of the results would be returned even when passing ?employee\_id=<select id> in a GET request

You didn't mention which service you are querying.  Employee?  Employee\_Task?

If you sent '?employee\_id=1' to /employee\_task, this would translate to a Feathers 'find' query:

    //GET /employee_task?employee_id=1
    app.service('employee_task').find({ query: { employee_id:1}})

This would run a find on employee\_task for all rows where the employee\_id column = 1.  Does that column exist?  This type of query would only get the list of tasks\_ids in rows where employee\_id =1, but not the associated tasks...  If that row doesn't exist, sequelize may ignore it and return all (or an error).

If you are querying the /employee service, you would only get the employee record back, as your query is:

    app.service('employee').find({ query: { employee_id:1}})

The question I have here is **where are your includes**?

If you are querying /employee and trying to include all Tasks associated with an Employee by 'employee\_id', you would need to intercept the GET with a before hook on /employee service and add ""includes"" in params.sequelize, something like:

    //Request
    GET /employee/1?include=tasks 
    //before hook on get method for employee service
    (context) => {
     //you would check for query.include first, but for brevity's sake 
     if (context.params.query.include === 'tasks') {
        const sequelizeClient = context.app.get('sequelizeClient'); 
        const { Task } = sequelize.models;
        context.params.sequelize = { raw: false, include: [{ model: Task, as: 'EmployeeTasks', through:'employee_tasks' }] }; 
        // delete any special query params so they are not used 
        // in the WHERE clause in the db query. 
        delete context.params.query.include; 
      }
      return Promise.resolve(context); 
    }

Note that you cant include params other than ""params.query,"" or ?query, from the client, so something like 'GET /employee/1?sequelize\[include\]=tasks' (if that is even how it would look) wouldn't work.

The other thing I would look at once you sort out the above, since I was having trouble with this on my hasMany associations, make sure raw: false on your ""global"" sequelize config, as well as on context.params.sequelize in your query, if you can get away with it.

Hope this helps.  I was trying to guess what you meant on a couple of things, so if you reply with some clarification I can try to help some more.   I had a lot of trouble with this for a long time and did a lot of work to avoid it instead, and am in the middle of refactoring my application, so I feel the pain.  Conceptually I think it is not well explained anywhere in the docs.",1534207492.0
MTG_History,"In order to have the employee_task table, you will need to use a two-way 'belongsToMany' association, with a 'through' table of 'employee_task'. You can define that table separately, if you want that table to have additional columns, such as 'status' flags, or you can allow Sequelize to create it for you.

If you're using Sequelize, you should allow Sequelize to create the key(s) in the composite table, probably, as that will allow you use take advantage of things like eager loading. If you give a link to a GitHub repository or the like, I'd be happy to take a look at your Sequelize models.",1534189221.0
a9p6,https://nodejs.org/api/debugger.html,1534184845.0
luis_carbonell,"Best thing I've found is [https://www.npmjs.com/package/synaptic](https://www.npmjs.com/package/synaptic). There aren't really that many great options in Node.js.   


Best recommendation I could make is trying to slap GPU Support on a Node.js ML Library using something like [https://www.npmjs.com/package/gpu.js](https://www.npmjs.com/package/gpu.js).",1534178189.0
StuartJamesMiller,There’s tensorflow.js which I believe uses a C implementation on Node. I haven’t used it myself but the intro to ML from google looks good.,1534181651.0
mubaidr,"There is also brain.js: https://github.com/BrainJS/brain.js

This one uses gpu.js",1534185205.0
TheOneRavenous,"Your challenge will be encoding and decoding data as well as determining how to split your data structure. Some ML/AI libraries can use strings, hash, or arrays, or typed arrays.

You'll need to do some data science to determine how many layers and nodes you'll want to incorporate. Also learn about activation functions since some will create a binary input/output (relu comes to mind) and others will create a percentage based output.",1534188124.0
frank_darwin,"AWS has a lot of cool tools you can use.  These are all API based, which is pretty easy to use with a Node setup",1534194816.0
xtra_roycee,I think the answer for this is the availability of library. Python is popular due to many libraries for ML /AI. ,1534241406.0
Anafartalar,"I have been playing with tensorflow.js recently and I can say it is really easy to work with. It is still in its early stage but when matured and an ecosystem around it developed i believe it will be huge and many people will switch from python to javascript. On the other hand, you will always need some technical knowledge about how ML works. I gained that knowledge taking courses taught in Python, but later easily applied it to tfjs.  Especially Keras and tfjs layers APIs are very similar. One can easily convert Keras model into tfjs layers model with adequate background.",1534246037.0
mtaon,"There are limits depending on your operating system and network speed. Doing so many concurrent requests most likely ends up in many timeouts. On top of that, it probably looks suspicious to your ISP and servers (especially if you're spamming URLs in the same server). To prevent these problems, you could limit number of concurrent requests with a library like [es6-promise-pool](https://www.npmjs.com/package/es6-promise-pool).",1534179156.0
broofa,"`Promise.all` isn't your problem.

    Promise.all(
      new Array(15000).fill(0).map(() => {
        const d = Math.random() * 2000;
        return new Promise(resolve => setTimeout(() => resolve(d), d))
      })
    )
      .then(console.log)
      .catch(console.err)
    
    --- Output ---
    
    > Promise {<pending>}
        <Then a couple seconds later ...>
    (15000) [1337.0055775932944, 419.04017485489976, 1344.3667646749584, 1506.6288299230469, 592.8328734231725, …]

This is almost certainly an issue with exceeding some networking limit *somewhere*.  Maybe hang a \`.catch()\` error handler on each of your promises to see if you get any error info.

Edit to add: And as others have commented, you'll want to throttle the rate at which you make requests because making 15K concurrent requests is pretty much guaranteed to fail.  *Something* will fall over - out-of-memory errors, per-process file-descriptor limits, TCP connection timeouts, proxy connection limits... something.",1534192761.0
dontchooseanickname,"Some hints :

* You may reach a [kernel limit](https://stackoverflow.com/questions/410616/increasing-the-maximum-number-of-tcp-ip-connections-in-linux) before a `Promise.all` logical problem
* Sometimes [software has even been invented](https://en.wikipedia.org/wiki/C10k_problem#See_also) for such problems
* Finally, why not batching the requests - in batches of 100 for instance

In any case, no doubt _some_ of them will fail and you may want to report early failures or successes _before_ all of them terminate, maybe with a timeout depending on the OS",1534179663.0
xemasiv,Caolan async could help.,1534187717.0
ChronSyn,"I would hazard that the overhead of each network request is what is causing it to 'stall'. I suspect the issue is something else, as below.

However, promise.all doesn't resolve until every child request finishes. Want to know what's going on? Tough.

One solution is to consider many promise.all calls, each of which have a smaller number of requests, similar to pagination. 100 get requests in each of the 30 promise.all calls means that you'll increase your theoretical performance by 30x. What stalled for 30 seconds before may now only stall for 1 second.

There may be other more suitable promise methods though.",1534178912.0
myockey,It's possible your outgoing connections are being throttled. It's also possible that you're running out of memory adding that many Promises to the queue.,1534179109.0
TheBigTreezy,"Thank you everyone, all your responses helped me nail down a solution!  /r/node FTW!",1534190946.0
ezbakedowen,"Try something like throat (https://www.npmjs.com/package/throat) to throttle your requests.
",1534180562.0
Sn0wCrack7,"Looks like Winston seems to be outputting the ANSI escape sequences (the things that make the text coloured  in your terminal) to the log file for whatever reason here.

There might be an option for the file transport to make sure it prunes those potentially, or this could be a bug, don't use Winston too much myself so I can't say unfortunately.

You'll probably notice if you disable that code for adding those colours it'll probably go away",1534166425.0
antoaravinth,"Shameless plug: I actually wrote express from scratch to understand how it works internally:

[https://github.com/antsmartian/lets-build-express](https://github.com/antsmartian/lets-build-express)

(with tutorial actually , so that we understand how things works under the hood)",1534180146.0
Parasin,"God article. I think that it could benefit from a dive into the performance differences between the 3, especially for `res.json()`.",1534164807.0
86784273,What about res.render()? What kind of information does that send back?,1534182608.0
DTheDeveloper,There are frameworks and libraries that make things easier but I've always used express generator and built from there. Now that does mean that I often am rewriting or refining code I've already written but I don't have to forfeit control or rely on others to fill in functionality I need.,1534165995.0
Hiccups_again,"Adonis framework is very similar to Laravel. (to the point it was clearly ""inspired"" by Laravel)",1534160330.0
nothingduploading,"JWT is insecure, don't use it.",1534149637.0
powerOfAsshole,"this list is based on what? how is derby.js in top 10 with only 500 weekly downloads on npm? and total.js with 3.5k.

restify has 70k weekly downloads, and I don't see it on any top 10 list.

mean stack is not a framework. meteor is a platform.",1534145367.0
newreddit0r,Thats so random,1534175326.0
xemasiv,"Not even a mention of polka and fastify which are generally faster than these ones. Fastify is almost a framework itself. Polka too, since it is compatible with express middlewares.",1534195474.0
nothingduploading,koa the only one that's any good.,1534142648.0
50653,"If you can generate your own index.html outside of Node, then great, do it. 

Templating engines come in to play when your HTML is dynamic. Like say you want the page to say the user’s name when they log in. The node processes fetches ‘username’ from the database and then uses an HTML template that says <div>Hello, {{username}}</div> .",1534122559.0
_unicorn_irl,"Everyone mentioned what the templates do as far as dynamic content. I just wanted to add that you may be confused because you're doing templating client side? If you're using react (or similar) to generate your website from an API served by express/node, then you probably only have that single index.html file and then you wouldn't really need a templating engine on the server side. ",1534124649.0
BehindTheMath,"The point of using a templating engine is when you have a template that is known, for example the basic structure of a webpage, but you also have data that is variable and unknown at compile time, and you want to generate the completed page at runtime. If you had a hard-coded index.html, you wouldn't be able to change anything. ",1534122028.0
sleepybearjew,"Beginner here, but I use them to serve up.. Well... Templates lol

You can build a template and drop w.e data into it you want. A lot of the templates make it super easy to do that.
Plus you are able to hide code easily from the user ",1534121516.0
floodlitworld,"Maybe on a smaller project, the benefits are less obvious. But when you start scaling up to larger projects, you'll go insane keeping track of everything if your node scripts are doing routing, database requests, data processing, html formulation and other I/O tasks all in one place.

Templating allows you to separate your server-side html, to easily reuse elements and templates and for more effective caching of those elements (whereas if you do html generation in your node scripts, no caching can take place.

As regards their advantages versus static html... well, that just depends on what kind of site you're serving. If it's a single-page static site with no variables, then no, there's not much point to using a templating engine. But if you want to reuse elements across many different pages (like say, headers, navigation, footers and other widgets) then they're a far better alternative to having to update 15 odd different pages every time you want to tweak your site a little.",1534122782.0
Lost_sand,"So, shit like that allows you to add dynamic content to your html.
Like maybe: /green -> background is green, /blue -> background is blue, /red -> background is red, etc.

You could have three html docs, or you could just pass in a background color variable to a template.
",1534128691.0
jb_sulli,"Not just dynamic variables but ""static"" menus, headers, and footers get obnoxious to update if you're having to update more than a couple pages. Think of all the copy-pasting fun...",1534128952.0
Tillhony,If you use template engines it becomes way better for you to incorporate programming into HTML. For example how you can write <? ?> for php tags and put for example in there a loop that will generate 10 of the same elements.You can also use it to use some data on the server side and render it on the client.,1534129353.0
ChronSyn,"If I don't need any dynamic data from my own server on a page, then sure, I can do that. Node can, after all, serve as a replacement for Apache with the right code and libs.

If I need to display something from a database, I could just connect to the database and run queries from my front end. But that's definitely not something I EVER will do because that's just not safe and would expose my db to the world.

You could say 'use react or angular or Vue or any other Framework' and I'd say 'absolutely'. If I need to target a browser which doesn't support those (say, opera mobile, or even ie6) then I have to rely on my server to produce the HTML. This is where the templating engine comes in. With react server side rendering, I could do that. I could also use EJS, handlebars or any number of other template engines.",1534143087.0
dwitman,"dynaic web pages have variable content, things like user names, blog posts, prices and many many more things, that change over time are plugged into the template after the request to see a webpage is made. 

Reddit for example is presumably healiy template based. You ask it for the front page and a template is filled with articles and served up to you. 

Facebook, Twitter, most blog sites, most of the web these days, the same thing is happening. There's a database of some kind and when a request to the webserver is called the page is created on the fly from the teplate and it's interaction with the database. 

Static web pages have no dynamic content and can therefore be coded without a template. 

If this doesn't make a huge amount of sense at present I  would not worry  As you dig deeper into node the usefullness will show itself and you'll understand it.",1534122619.0
eablokker,"Generating your templates server side means that when a web request is made to your server, the contents of your response will be a static HTML page, including the textual content of the page.

The main benefit that I see is for good SEO, so that web crawlers like Google can see your content and index it. This makes sense for a front-end publicly visible area of your app that you want to be searchable through Google. If you are doing a private control panel or dashboard you don't need this because you don't want that area to be indexed anyway.

The other reason I might want to do that is it's just a lot more simple and quicker to build an app server side, without having to use a front-end framework like React, Angular, etc. The front-end frameworks sort of shoehorn themselves in and mimic how a server-side application would work by taking over how the browser handles clicking links & going to different routes, but instead doing it client side, which is a slightly different and more complicated paradigm. A server-side app is a lot simpler to do by comparison, but also more restrictive when it comes to interactive UI.

If I was short on time and budget, I would probably build a server-side app first, and then enhance it with client-side framework later.

Edit: I think I misunderstood your question. If you're asking why use a template language instead of just building and outputting your own HTML? It pretty much comes down to separating business logic from presentation logic. Especially if you are working with front-end developers doing a complex design. It just gets difficult when you've got html mixed in with a bunch of other code, it's harder to see what's going on. Try it and see how far you get :) It's ok for your own personal project, but if you work with other people you will have front-end people bitching at you about how messy your code is.",1534123305.0
r0ck0,"I'd say these days, you can skip the templating systems like pug/ejs altogether.

Just use Nuxt.js (for Vue), or  Next.js (for React), and you can use the same templating system for everything.

Personally I'm going with Vue/Nuxt, which is also easier for people starting out.",1534148251.0
qashto,"- Pug is modernized html that's easier to write and read.  No forced double quotations, tag delimiters, or closing tags. 
- Pug templates can be reused with different data easily
- multiple Pug templates can be combined with mixins
- Pug is made to be used with Javascript
- Pug can be used with Express (for web servers) and Electron (for desktop apps)
- PHP is dated and bad",1534122298.0
iddar,I've seen the code and it includes many interesting things like the wait-for.sh file or the node_modules folder in the $ PATH,1534139344.0
alphaindy,Looks pretty good. How bout CI/CD with services such as Codeship?,1534219190.0
skoobydoo214,"From the user perspective - although I can guess why my data is invalid - I think a specific error would be better than a generic catch all. 

[https://imgur.com/gallery/kEQpIxS](https://imgur.com/gallery/kEQpIxS) ",1534124008.0
plato_logic,"Minor detail, I find it frustrating to login after just creating an account. It would be cool if it took me straight into the app. Nice work!",1534131035.0
max7z,I can make code review for your project in voice chat (skype or discord). PM me if you are interested.,1534172158.0
pakayahey,cant log in,1534141786.0
BenjiSponge,"There are problems with pretty much everything and ""scalability"". Node doesn't lend itself well to *vertical* scaling because it's single-threaded. Because of this, most server-style applications implement a stateless strategy that allows them to run across multiple processes across multiple machines.

But it totally depends on your application. I can't think of an application Node would be inherently bad at scaling. It would probably have to be something that *needs* to be vertically scaled, but I can't really think of why that would be.",1534084552.0
junctionssss,"Node ""scales"" better with i/o bound operations rather than cpu-bound because the latter might block the event loop.",1534166300.0
RustinWolf,"What you're describing seems like a design choice on the front end. Server shouldn't care how a particular form is displayed (modal form or form in a new route). You should make a REST endpoint that handles that form data, and when server responds you can decide on client side what you want to do (redirect, close modal or whatever)",1534077139.0
vshjxyz,"It strictly depends on the project, even more the DB shouldn't be a ""default"" but chosen based on a number of factors. I would say on average if I'm doing an api server I tend to use swagger/openapi schemas, hapi.js, prettier + eslint and Typescript. Jest or Mocha+chai for unit testing w/ power-assert

For Integration testing I'd prefer doing the api calls with supertest and leverage `server.inject()` with Jest snapshots",1534072825.0
haCkFaSe,lodash,1534088419.0
Sharwul,"Ramda! (A bit like lodash/underscore, but with a bigger focus on functional programming)

For unit testing I tend to use Jest with Wallaby.js (for automatically rerunning my tests as I type) in VSCode.

nvm (node version manager) is amazing if you need a specific version of node for some reason.

I tend to go with PostgreSQL for persistent storage, because this gives me the option of using both SQL and NoSQL (jsonb).",1534077505.0
CommonRaven,"- XO for easy and fun lint
- Jest (Used to be Ava.js + nyc + Sinon)
- Koa.js if webserver (along with koa-router, morgan, etc)
- Winston for logging with levels
- Sequelize if relational DB.
- Lodash + Awaity.js (because lodash is just useless with async)
- got.js for ajax
- cron for scheduled jobs
- jwt for auth (usually with passport)
- Raven for error reporting, Newrelic for metrics
- Bottleneck for queueing async jobs

All on basis of need, but those are my first choices.",1534118293.0
sldomingo,touch app.js,1534076063.0
sqeezon,"Here is a seed project I started a while back. Probably has way more than you need but I think it's a good starting point. Rip out what you don't need.

https://github.com/maybachlabs/express-typescript-seed",1534084749.0
broofa,"Global

* `nvm` is a must have if you need to test/support anything across multiple node versions.
* `nodemon` for auto-restarting app when files change

Most projects:

* `mocha` for unit testing
* `eslint` for linting
* `express` for server
* `debug` for log filtering

As needed:

* `sequelize` for ORM
* `axios` for promise-based http requests
* `ajv` for schema validation
* `ws` for websocket
* `supertest` for api unit testing
* `viz.js` for directed graph layout (my vote for most-underrated module)

Probably controversial anti-recommendations:

* ~~bluebird~~  Having bluebird promises (with their proprietary extensions)  intermingling with native promises is more trouble than it's worth.  Just use native ES6 promises (or a `native-promise-only`\-like shim where needed).
* ~~joi~~  (schema validation) Simpler syntax, but proprietary syntax misses the (considerable) benefits of JSON schema.  Use `ajv` instead.
* ~~socket.io~~ Useful before websockets were broadly supported.  Now, not so much.  Prefer `ws`.
* ~~supervisor~~ Use `nodemon`",1534129650.0
rgaino,"I just created a boilerplate project for a Node backend/React frontend app on a MySQL DB, all running on Docker: https://github.com/rgaino/docker-node-react-mysql-boilerplate",1534113586.0
ghillerd,"pretty much always end up using express, typescript and axios, the rest is a lot more open.",1534076205.0
Giiin,I use [express generator](https://expressjs.com/en/starter/generator.html).,1534080442.0
xPerplex,"I start every project with prettier + eslint-config-airbnb-base + flow + babel + jest

if i'm building a web server, add Express. 

everything else beyond that depends on what i'm building",1534089267.0
ilja903,"feathersjs, knex",1534101826.0
pchinjr,"I think the interesting thing about Node apps is that there doesn't have to be a ton of boilerplate, if you don't want. I've been using more and more Serverless Framework, so I just write functions that execute behind an API Gateway. Before that I was using Hapi or Express as starting points. Then only add packages that solve the problem I need. ",1534074243.0
geekuillaume,"I made a kickstarter for a NodeJS API with a lot of things included (maybe too much, but it's what I use on every project): https://github.com/geekuillaume/nodejs-api-kickstarter",1534083116.0
lenswipe,1. Jest,1534094061.0
theineffablebob,I like reactboilerplate.com,1534102993.0
Tvde1,"`npm i object-autocorrect` 

Xd",1534104079.0
HighUncleDoug,"Express, Handlebars, Dynamo",1534121963.0
EtVeritas,Nodemon is a must have for me. Restarts the server every time you change a file.,1534123422.0
Saphyel,cucumber & mocha are mandatory.. the others depends on the project.,1534162211.0
ChronSyn,"Depending on the project;

- Express + middleware
- Sequelize +cli
- DB driver
- Socket.io
- A http/2 library
- lodash if regular ES5 or ES6+ are going to complicate my code

Express is generally the only one I'll install in almost every case, unless it's a DB project or API.",1534179290.0
WakeskaterX,"I pretty much use a core package list for almost every project, and then extend it as necessary for the specific things that server is doing.

Main Packages:

* lodash
* bluebird
* debug
* moment
* koa (if web server - and all koa addons etc)
* bcrypt (if auth is needed)
* jwt (if auth is needed)
* passport (if auth is needed)

Dev Packages:

* nyc
* mocha
* chai
* sinon
* supertest
* eslint
* madge (for circular dep checking)

And recently I've taken to webpack with Vue for some new projects which has been fun.  In regards to DB, just depends on the project.  I tend to gravitate to Mongoose/MongoDB for small projects because of ease of use, but MySQL/PostgreSQL work just as well - depends on your needs.",1534342928.0
luffs,"    npm i express socket.io sequelize mysql2
    index.js
    web/
    lib/",1534071579.0
Kilawaga,"io.sockets.connected\[socketId\] lets you emit events to specific clients. You need some way to store the socketId and have them relational to the user you want to send a message to.

Something like:

`io.on(""send-message"", payload => {`

`io.sockets.connected[<socket_id_of_target>].emit(""message"", payload.message);`

`})`

You could store the connected clients in something like a redis store with the username and/or id as a key, when you go to send a message the payload will have the message AND the identifier of the receiver of the message, fetch the socketId from redis and use that to emit the message to the receiver. You could also store the socket id on the client side if it's not a big deal and send it with the initial payload.",1534267462.0
longhorner,"Look at the path option in the io.server constructor.

EDIT

Okay now that I'm not on mobile I can give you a proper response. As for only wanting socket.io when the user has requested the ""/messages"" route, what you should do is create a special [namespace](https://socket.io/docs/server-api/#Namespace) for messages. As for enforcing authentication, you can set up a [middleware function](https://socket.io/docs/server-api/#namespace-use-fn) that can reject unauthenticated sockets.

Since the socket.io server is created with the HTTP server and not on a particular route, I think this is the best practice. You could do a `io.once('connection', ...)` and change the `path` option [here](https://socket.io/docs/server-api/#new-Server-port-options) as I mentioned before, but I haven't tried that. It would be tricky since you're registering a listener for connections on every request to '/messages'. ",1534061062.0
R3DSMiLE,"one socket can only speak with another if said socket is a server.

So, you have socket-A and socket-B and socket-C; of these, C is a server; since socket-A is only connected to socket-C, socket-A can only communicate with socket-B via socket-C.

To have a client talk directly with another client, you need a DCC (direct connect chat) which would be something like:

- socket-A tells socket-C that wants to dcc with socket-B
- socket-C relays that to socket-B
- socket-B client starts a new ws-server (socket-D)
- socket-B tells socket-C the ip of the new ws-server
- socket-C tells socket-A that socket-B accepted its dcc
- socket-C tells socket-A the ip of the new ws-server
- socket-A connects to new ws-server
- socket-A sends hello to socket-D
- socket-D (ghosting for socket-B) receives

you can simplify this by having a uniqueId per socket (socket.io already does this) and send a event with that unique Id as payload, something like:

- socket-C listens for ""MSG:P"" 
- socket-A sends ""MSG:P"" {uniqueId: 1, msg: 'hello, world'}
- socket-C looks for uniqueId and sends to that",1534071828.0
clarle,"Might be an alternative to your problem, but we've been using [aws-serverless-express](https://github.com/awslabs/aws-serverless-express) recently, which gives you all the benefits of serverless (easy to scale up, no server management), while being able to just write regular Express code.",1534034876.0
DraconPern,Oauth2 implicit grant type comes to mind.  Does twitter support that?  ,1534054243.0
SafetyMoose22,"No  nodejs needed just look at the history section in chrome. Will show all the pages you visited. 

Or if you want to see all the network traffic use wireshark. ",1534030702.0
areinet,"One possibility would be to run a nodejs http server as a basic proxy server coupled with configuring your browser to use the proxy. That would let you see all the requests and control which ones get through. It’s not going to actually stop anyone determined or knowledgeable, but if your project is just for fun it shouldn’t be all that hard to write.

",1534041558.0
,"Not sure if this will help, but have you taken a look at the Chrome APIs? https://developer.chrome.com/apps/api_index",1534031207.0
hthouzard,Use PiHole and black lists,1534054126.0
shameer_kash,Setup a burp suite proxy in place. ,1534070622.0
chusmeria,"Why is this in /r/node and why hasn't it been removed already after 4 hours? This article is about fucking C#, yo.",1534030653.0
__woah_man,No I don't want to build your idea.,1534011000.0
no_dice_grandma,"Are you this person?

https://thehardtimes.net/harddrive/man-with-really-cool-idea-for-game-just-needs-volunteers-to-do-coding-and-art/",1534015573.0
spybraek,"Oh yes, here you go. Here is my money  and my time and my life. For free.

Either learn what you want to build, or be ready to pay for it, buddy. ",1534019876.0
badthingfactory,My house needs landscaping. I'm going to go around asking people if they can just do it during their spare time. ,1534017141.0
nodechance,"Hey, I am looking for a doctor (I am not one). Just need a simple heart bypass, should be easy for someone with a Thursday afternoon free. ",1534067164.0
,[deleted],1534168775.0
vue-rocks,"Are you paying? If so there’s /r/forHire
",1534067975.0
this_is_debatable,"What’s the error message? If you are getting the right id from params, the issue is with your mongo query. Try deleteOne function and filter by id. https://docs.mongodb.com/manual/reference/method/db.collection.deleteOne/#db.collection.deleteOne",1534005032.0
milesflo,Got a gh link? It’s be more helpful since it looks like this snippet is interacting with custom modules,1534011434.0
Suavecito_0,You can add mongoose and use the built in method. DB.FindByIdAndRemove(); ,1534022352.0
nlindley,"Is it important to retain the time zone on the server, or are you just using that to display the time in the user’s time zone? If you need to know that a particular time is in, for example, `America/Chicago`, you might want to store it in a separate field.

To communicate times, I normally use ISO 8601, which is easy to validate with [`Joi.date().iso()`](https://github.com/hapijs/joi/blob/v13.6.0/API.md#dateiso).

If you need to validate a time zone field as well, you could build a whitelist with something like (untested) [`Joi.string().valid(moment.tz.names())`](https://momentjs.com/timezone/docs/#/data-loading/getting-zone-names/).",1534002592.0
lonniebiz,"Well, I'm waiting.",1534373352.0
zmasta94,I'm interested. Will have at the GitHub repo later. Do you have a project road map?,1533986185.0
albertpak,Looks interesting :),1534047880.0
alexander2001i,"I would like to participate, but I’m very new to this.",1533987338.0
TolleyB-J,Sounds Awesome worked with node js before and done some mongo. Would be interested,1533989318.0
trimanachathurbhujam,I am interested. Had a glimpse at the GitHub repo. I can do angular and backend.,1534005013.0
laggingtom,"Looks interesting! Is this supposed to be a replacement for currents POS systems (Honeywell, etc)?",1533999466.0
codeinprogress,I would like to contribute. Can we give flutter/dart a try instead of Ionic? ,1533992899.0
inspirit16,I'm interested! But very new to the tools required,1534008573.0
largepanda,Your linked website leads to a landing page.,1534012632.0
N0Religi0n,Are you using any nodejs framework or going plain?,1534017931.0
RushPL,"I think it's a very bad idea. It prevents static code analysis, IDE code introspection and build tools from doing their job.",1534008452.0
kredditacc96,"I'm not quite sure what you meant by ""flatlist"", but I guess you want to be able to get `followers` by `username`. 

```javascript
{
  testuser1: 1,
  testuser2: 2,
  testuser3: 3
}
```",1533973385.0
_unicorn_irl,"Why run on port 3000? I haven't used docker much yet but I plan to learn it shortly. If you push this container into production your app won't be available on port 80/443, right? For production would you do something like this?

    docker run -p 443:3000 --name iron-api express/iron-api

I am still a bit confused on how docker works with various production environments. Normally I'd use Nginx as a reverse proxy and forward https requests to the node process on 3000...  is that still something you'd need to handle outside of docker? ",1533961484.0
64bitHustler,"So what about multiple app instances?  Currently I run PM2 as a process manager in production and run my app instances in either forked or cluster mode.  PM2 handles restarting of apps if they crash, error reporting, monitoring, etc.

The basic rule of thumb, is one nodejs app instance per CPU core.  So on my VM's I'm typically running 4 instances of my app.  I've got nginx on the same VM proxying back to the 4 instances.

Node App Instance | Port
---|---
MyApp1 | 3001
MyApp2 | 3002
MyApp3 | 3003
MyApp4 | 3004

How does this play out when dockerized?  Do you run PM2 inside Docker and let PM2 fork/cluster 4 app instances?  Or do you run four docker containers each with one app instance?  If so, does PM2 play a part?
",1533998577.0
XPTranquility,Been looking for something like this. ,1533952284.0
darkshuffle,"Are you trying to get data from the NASA api here? I think your issue maybe that you are using a [request.POST](https://request.POST) action instead of a GET action, this would return a response in JSON form which would also save you having to the parse the body as well. It should be readable directly from res.body (or use a bodyParser).

I would suggest using postman whenever you're trying to debug api calls to see if you are getting back what you expect. For instance posting to the endpoint you described returns a 405 Header (method not allowed) hence why no body is returned.",1533935339.0
inabahare,Ask the question instead of asking for people to answer your question.,1533937980.0
humpysausage,TIL Node.js is a framework.,1533923846.0
MrStLouis,"Using destroy frees up the resources if you are using a store for your sessions, like redis, and is also best practice, although just removing the session from the object should allow garbage collection if you're just using in memory sessions ",1533925766.0
ChronSyn,"Destroy the entire session. If a user is to be booted out of a system, the session is no longer required. Additionally, by deleting the session entirely you avoid the potential for a session dupe and will reforce a login (as long as you're enforcing a 'session must be present and valid' check).",1533926950.0
tswaters,"Here's what happens if you do call destroy --

- the user when attempting to use their cookie, i.e. hitting refresh or whatever -- the session middleware won't pull up anything in the session store so `req.session` will be uninitialized.  So if you have some kind of auth that looks for `req.session.user` or whatever else, it'll not find that and user likely gets 401.

here's what happens if you don't call destroy --

- Not a lot actually. This is the sort of thing that will happen over time if the user stops interacting with the site (goes idle, closes browser window) and the session timeout is reached.  In redis anyway, the TTL is set on the key if it isn't touched it'll get deleted all by itself.

...

It really depends on whether you want to both boot them from the game or forget who they are completely -- maybe there isn't a difference between the two.  Maybe you can login and join a game, go idle & get booted, but stay logged in.

Either way, one thing you should do is handle the opposite case.... i.e., what happens if the session is timed out, or there's a logout button or something else that effectively destroys the session... do you handle removing the player from the game in this case?  That is effectively a memory leak if you don't clear out `players` yourself.

Oh, one other thing.... if you do call `req.session.destroy` it'll actually set `req.session` to null for the remainder of the request -- so, if (like me), you have a hairy code base and lots of crazy middleware firing all over the place and you're assumes req.session is an object in all cases - not always the case if you call destroy.  At least, it was a while back in an old sails (express2) site we had... not sure if that's still the case.",1533954905.0
JakeGore,"Don't take my word for it, but I think you have call `destroy()`, just to make sure.",1533925269.0
Silveress_Golden,This is probally what ye are looking for: https://pm2.io/doc/en/runtime/guide/load-balancing/?utm_source=pm2&utm_medium=website&utm_campaign=rebranding,1533915114.0
trout_fucker,"NodeJS is still single threaded unless you you worker threads in 10.8.

If you use 100% of 1 core in an 8 core CPU, you're using 12.5% of your CPU.",1533915136.0
slycoder,"Why wouldn't you just set the offer on instantiation based on your type with your constructor, then grab it directly? Wouldn't that remove the need for these mutator methods completely?

In your original example you return the offer based on type. In your final example it looks like you could set the offer arbitrarily regardless of type. Isn't that a problem?",1533910831.0
SomeRandomBuddy,"Or, don’t violate the open/closed principle to begin with. ",1533905562.0
JShuma,"Open terminal

Type

./configure


make


sudo make install

(If you have missing dependencies, configure or make will complain, then just apt-get those dependencies, and retry from the top. ) ",1533890941.0
joao-louis,"The readme file(s) should probably tell you how to install the thing.
I think `./install.sh` from this folder will do the trick",1533895236.0
JakeGore,Have you got any code for us to look at or any error messages?,1533886935.0
Brandelis,https://youtu.be/LoziivfAAjE,1533936224.0
gajus0,"> Hi, I'm just beggining my journey with Nodejs, my current goal with it is scrape some websites for desirable data for my project. I have started using puppeteer module but.. mainly I'm having problems with handling scraped websites.

I don't recommend using Puppeteer for scaping. See my response to this article:

https://medium.com/@gajus/it-is-a-really-silly-idea-to-use-puppeteer-to-scrape-the-web-da62a9f3de7e",1533889393.0
,tar -xvJf [nodefile.tar.xz] --strip-component=1 -C /usr/local,1533886335.0
pixeledo,"From a terminal

tar -xJvf nodefile.tar.xz --strip-components=1 -C /usr/local/lib/nodejs

That unpackages the nodejs library

Then I usually create sym links to the node and npm executable (the tutorial posted below does it a little different)

ln -s /usr/local/lib/nodejs/bin/node /usr/bin/node

ln -s /usr/local/lib/nodejs/bin/npm /usr/bin/npm

Then you can test it is working by running 'node -v' and you can run a node program (app.js) with 'node app.js'

[https://github.com/nodejs/help/wiki/Installation](https://github.com/nodejs/help/wiki/Installation)",1533927333.0
lol10801lol,"There's nothing that can be considered ""unsafe"" about CORS headers, since they're mostly a hint for the browser about your route usage. Note that ""Access-Control-Allow-Origin"" value of * allows any domain to request your routes through the browser, so if you're afraid of that, you can keep a whitelist of origins, check req.headers.origin and return the value of that in the header if it's whitelisted. Any attacker would be able to overcome this easily by just sending a request with the right origin, however.

If you wish to secure your app from cross-domain requests, you're looking for CSRF, not CORS. Check out csurf for an example.

https://www.npmjs.com/package/csurf",1533889664.0
Genereux2018,"Of course it depends on the context, application, requirements, environment and more. But I would say that by default they aren’t safe",1533880732.0
ChronSyn,"1) Only use this with the * argument if you want to allow any source/website to be able to send this request.

2) Safe to use but only expose methods you need to allow - don't expose DELETE, PATCH or even POST if you don't use them.

3) Not including Content-Type allows you to restrict certain MIME type headers from being set (so someone can't send a request for text/JSON when your request responds with text/plain for example) - this one isn't major, but it can be important if your API responds with different data depending upon content-type and could lead to a data leak if you expose data not meant to be exposed (if you have a switch statement for content-type).",1533889194.0
tswaters,"from an html page?  Alright.  This html file should be served by a web server of some sort....  node just so happens to have a web server in its many apis, called the http module (or https).

thing is, that api is an incredibly low-level bare-bones server so to save yourself some time/trouble, you can pick up one of the many web frameworks that sit on top of it.  I prefer express.

So, the button, it should somehow invoke a request on this web server - you can make it a `get`, effectively a link -- or a `post`, whatever - might work best with something like fetch so the user doesn't see any post back.  

When it comes down to  it, doesn't really matter which http verb you use as long as the server is listening for the given verb and path.

Once you hit that end point, you're in the back-end code -- you have access to all of the nodejs apis, so calling to `writeFile` should be trivial from there.

Maybe read a couple tutorials about setting up web servers in nodejs.",1533868905.0
coreygwin,A friend just recommended [https://github.com/OptimalBits/bull](https://github.com/OptimalBits/bull). Looks like it should work but I'll need to setup redis on my project. Will report back how that goes.,1533859040.0
tzeentchy,"You've got 2 ways to achieve that. The first which you correctly identified is vertical scaling by upping the resources on the server. 
The second is horizontal scaling by spawning more processes and making them work each on a different CPU core. In node you can achieve this using a cluster, and spawn numerous children which will run as separate processes and the OS should do the job of giving them a different CPU affinity. Look up PM2 which can act as a very easy orchestrator to spawn multiple instances and coordinate them. 

Your best solution is likely to work with both horizontal and vertical scaling to achieve maximum performance.",1533883250.0
,[deleted],1533844355.0
kwiwksh,"If you want more flexibility than what the package provides, you could consider just calling the FFMPEG exe from the command line in a child_process.Spawn call.",1533838756.0
Drunken__Master,"You could have the code in a GitHub repo and hosted on Heroku, but the database itself would have to be hosted elsewhere, there are options out there for free database hosting. ",1533833932.0
myrlandnu,Check out now.sh,1533835186.0
elrodrix,check heroku,1533836347.0
xamblin,"Google Cloud has a free tier for a small VM, plus $300 credit for a year
https://cloud.google.com/free/",1534018598.0
vmarchaud,"You can't simply because you can't throttle the network properly with NodeJS, you should use a native kernel module like iptables",1533847290.0
akujinhikari,"Awesome article. Building a Node app right now, and I REALLY want to focus on security for it, so this will hopefully come in handy!",1533820895.0
BenZed,"Okay, I'm confused.

First thing the article mentions is a `eslint-plugin-security`, so I checked it out.

One of the rules in that plugin:

>detect-non-literal-fs-filename  
>  
>Detects variable in filename argument of fscalls, which might allow an attacker to access anything on your system.  
>  
>More information: [https://www.owasp.org/index.php/Path\_Traversal](https://www.owasp.org/index.php/Path_Traversal)

Even after checking out the *more information* link, I'm confused about how an attacker would take advantage of it, unless I'm writing stupidly insecure code like:

    import fs from 'fs'
    
    export default someMiddleWare (req, res, next) {
      const { content, place } = req.query
      fs.writeFile(place, content)
      next()  
    }

What fundamental understanding am I missing?",1533833462.0
maffoobristol,"Great article and applies to more than just node.js, good bedtime reading for anyone providing customer facing services. ",1533855349.0
BabyToy,Use helmet. ,1533860929.0
Razhan13,Great article,1533925105.0
RamesesLabs,"Just bookmarked for reference, great article.",1533957502.0
ecares,Contribute to Node.js,1533818802.0
ChronSyn,"Try some API-type exercises;

Level 1: Try building an API using express and mongo DB with flat documents which don't need relational data (e.g. a list of books, or blog posts).

Level 2: In addition to the above, build a realtime front-end with socket.io and basic UI to retrieve information from the API over websocket connection.

Level 3: Scrap the above, and look at using feathersjs and sequelize to build an API around a relational database system like postgres or mysql with a realtime websocket front-end.

Level 1 + 2 require knowledge of routing and how to run queries via an ODM which are fairly intermediate level. It also requires knowledge of websockets at level 2 which is intermediate, but the extra work is in understanding the limits of websockets and how concurrency can have an effect. Level 3 requires knowledge of all of the above (but with an ORM instead of an ODM), but also sequelize migrations and the caveats of that library.",1533818146.0
wild_thunder,"Try to write an API that returns flat or joined data from a database as a spreadsheet. You could try to implement this with streams to make returning very large spreadsheets possible. It's kind of a weird project, but was something I was required to do at an old job and resulted in me learning a lot about the lower level node streaming API.",1533819213.0
mrtpain,"Build a basic DApp using Mobius Network Node SDK! Simple to use and allows your site to accept crypto currency. 

[Mobius Network Docs](https://docs.mobius.network) ",1533821693.0
jpschack,I think contributing to open source projects is always a great idea.,1533814512.0
kranker,"You aren't doing any error handling in your code, and also (perhaps intentionally) you haven't chained any of your promises.

You should put in `.catch()` blocks to deal with errors thrown by your promises.  In your case there is an error being thrown by `.save()`, which is being thrown into the promise returned by `User.findOne` but that promise has no error handler attached to it.

Also, you are throwing away the promises when you create them, except for the `Quote.findOne().then()` promise.  That promise will resolve to `undefined` after `User.findOne()` is executed, it will not wait until the `User.findOne()` promise resolves.  The same goes for the promise returned by `retrivedUser.save()`.  Also, it's ""retrieved"".",1533807863.0
spmaster007,I had some experience with Firefox Headless ~2 months ago and should say the one - it's not ready yet. Tons of issues even with easy things.,1533833936.0
1-800-BICYCLE,Idk wtf youre talking about but it sounds like total bullshit to me (or a poorly designed benchmark),1533797322.0
JonFrost,Sounds like totalshit,1533798761.0
boon4376,Express is great. ,1533815756.0
virtulis,"> totally blowing Express/Koa/Adonis out of the water in terms of performance.

In terms of performance of *what*?",1533804047.0
petersirka,"I'm author of the entire Total.js platform.

**and it shows totaljs totally blowing Express/Koa/Adonis out of the water in terms of performance.**

This may not be true because Total.js has a bit complicated request processing than other frameworks. The framework watches a lot of small details while the request is processing: **size of request**, routing, CORS, authorization, middleware, localization, etc.. Total.js framework applies a lot of small security features and this can decrease the performance:

* framework cancels requests with bigger data (you can specify a quota for each route)
* framework cancels all requests if the route doesn't exist
* framework doesn't receive any data if the route doesn't exist
* framework can parse width/height of uploaded images directly from the buffer while the file is parsing
* framework evaluates CORS
* if some action in some controller doesn't answer (because of some unhandled problem) then the framework will respond with a 408: timeout (so the request will be ended)
* by default can handle static files (with real-time compression for JS/CSS/HTML files)

**The totaljs website is written in broken English**

Yes, I know. Maybe you can know only the one language, but I need to know more languages and my brain is out of memory.

&#x200B;

**and has some other trademarks of not-legit tech stuff.**

Which? Where? I created the framework from the scratch and without external dependencies. I studied how is working: SMTP server, WebSocket, Server-Sent events, uploading files, compression, HTTP streaming, HTTP compression and much more... So I'm open for discussion about trademarks and about Total.js platform.

**Most Reddit hits for the framework are very negative with accusations of plagiarism.**

Yes, but also iPhones have negative hits too. And? 100 people 100 opinions. Everyone can try it and decide.

&#x200B;

I needed a stable framework for my customers and finally I have it. I'm very effective with Total.js and my customers are satisfied too. I have created a lot of **FREE resources for developers** like [www.componentator.com](https://www.componentator.com), Node-Red alternative called Total.js Flow - Visual programming interface: [www.totaljs.com/flow](https://www.totaljs.com/flow), Total.js CMS: [www.totaljs.com/cms](https://www.totaljs.com/cms), Total.js Eshop: [www.totaljs.com/eshop](https://www.totaljs.com/eshop), PM2 alternative called SuperAdmin: [www.totaljs.com/superadmin](https://www.totaljs.com/superadmin) and much more. Just try it and you will see. Every project uses Total.js framework and max. 2 dependencies (for example PostgreSQL module).

I didn't work at a big company like Google, Facebook, etc. and also I didn't work on big projects... but I have created a lot of different (small/medium) web apps - **more than 200.** I'm open for comparing Total.js with something else, we can create a small app and compare code, effectivity, difficulty, readability and traffic. Just contact me.

Thank you",1539086777.0
Capaj,it's a one man show(https://github.com/totaljs/framework/graphs/contributors). While Peter commits quite a lot of time to total.js  it's never gonna beat your own stack on koa/express. One man is not enough.,1533805742.0
God_Dammit,Doesn't really belong in /r/node...,1533785755.0
postmodest,"Oh good, more right-wing agents provocateurs in the node sub.",1533782110.0
,[deleted],1533781835.0
kxerr,"connect-mongo is a Store for express-session, which allows a session to be shared across multiple instances of the app (rather than using the default in memory store). I'd recommend this store, or a redis store",1533794373.0
Ardougne1,What would you say is the hardest part about working with MIDIs and Node?,1533839885.0
feross,"Site author here! So, the context for this site is that I was reminiscing about the days of Geocities and Angelfire, back when the web was quirky and fun. I remembered how sites used to use the <bgsound> tag to include an autoplaying background MIDI file. Those files had such a nice, old-school aesthetic.

I wanted to hear some MIDIs, so I searched and found a .zip file with 100K+ MIDI files that someone posted to Reddit. I tried playing a few in Chrome, Firefox, Safari, etc. and then realized that they've all dropped the <bgsound> tag. Even Quicktime and VLC couldn't play back the files.\*

There were some websites that could convert MIDI to low-quality MP3, and technically Apple still offers Quicktime 7 for download which can play MIDI, but it wasn't easy or fun to do.

Some websites offered inline playback with Flash (but it was flaky and hard to get working in Chrome), and the JS-based ones were missing many instruments or multi-MB Emscripten-compiled monstrosities!

I decided that I'd compile the best MIDI player written in C (libtimidity) to WebAssembly and put in lots of effort to optimize the bundle and include the minimal amount of code. The result of that is here: [https://github.com/feross/timidity](https://github.com/feross/timidity) It's quite lightweight - just 34 KB of JavaScript and 23 KB of lazy-loaded WebAssembly.

Then I put a frontend on it, so it's easy to browse that .zip file's contents. And that's BitMidi.

I plan to ingest a lot more MIDI files in the future, perhaps from the Geocities MIDI archive on the Internet Archive.

Feedback welcome!

\* I later learned that VLC can actually play most MIDIs and I just got unlucky with the few I tried! That's okay though – I got to learn a lot about MIDI files, Emscripten, WebAssembly, and modern front-end web techniques. And I made a cool site too :)",1533842309.0
trout_fucker,"This is a frontend library, not NodeJS. You're just using NodeJS to compile it. This would be a better fit for /r/learningjavascript.

Looking at the library repo that you're using, it looks really simple to setup so that means you probably need some other fundamental stuff first.",1533778645.0
eablokker,"You can't run this code in Node. Node doesn't have the ""document"" object, as in document.getElementById(). Only a web browser has the document object, it represents the contents of the browser window. There is no such equivalent on the server side.",1533790179.0
Nephelophyte,"Generate a bunch of addresses using a desktop wallet, populate it in a database and assign them to users. Then, use a a blockchain API like blockcypher.com to check those addresses and verify transactions. I'd say that's the easiest way.",1533781175.0
Dieoffury,Are you familiar with Bitpay? It's the biggest Bitcoin payment processor,1533786761.0
teja42,https://CoinPayments.net . They support a lot of altcoins too and fees is 0.5%.,1533797442.0
mrtpain,"Mobius network has easy SDKs including a node.js sdk for accepting crypto and its extremely easy to use. However, currently only supports payments in their MOBI token. Bitcoin payments are coming this year, probably sooner rather than later. I recommend checking it out. 

[Mobius Network Docs](https://docs.mobius.network) ",1533774145.0
jdenderplays,"Yes, there is a global-ish var named `__dirname` that stores the path to the running file as a string. https://nodejs.org/docs/latest/api/modules.html#modules_dirname",1533771257.0
mariotacke,"I would save the player information in a regular database upon registration. When a user connects, save a reference in a fast cache like Redis. This reference could be a snapshot of user data not the full record. I would keep any game specific data in memory, such as position etc.

If you grow out of a single server, Redis or memcached would be a good option (Redis' pub/sub is awesome). Maybe try hosting a ""game"" on a dedicated server but let the lobby live on multiple servers with pub/sub (socket.io-redis).

Shameless plug: I recently wrote about a kind of lobby system integration with [socket.io](https://socket.io), feel free to read it here: [https://hackernoon.com/enforcing-a-single-web-socket-connection-per-user-with-node-js-socket-io-and-redis-65f9eb57f66a](https://hackernoon.com/enforcing-a-single-web-socket-connection-per-user-with-node-js-socket-io-and-redis-65f9eb57f66a)",1533780385.0
skipi,If you need performance - go with some memory database(memcached). If you need persistance go with sql/no-sql database. Combine them if you need both.,1533770468.0
beereydee,Why would you have more control over it if it was in a database? That makes no sense. Think of variables as RAM and database as hard drive. Hard drive is for long term storage.,1533773643.0
teja42,For temporary things use redis else use a high performance DB like mongodb,1533796969.0
ggolemg2,"I'm running into the exact same situation.  I'm looking at three options:

* Redis in-memory with snapshots
* Lowdb/fs(promises) json flat file, live data in variables
* gun.db with a master server, live data in variables

All using socket.io one way or another.  All including user authentication.",1533813251.0
beereydee,"Also, take a look at [http://browserquest.mozilla.org/](http://browserquest.mozilla.org/) if you want to see how someone else has done it. Source code here: [https://github.com/mozilla/BrowserQuest](https://github.com/mozilla/BrowserQuest)

Edit: actually this code is so old and javascript moves so fast that this may not be a very useful project to look at. For example they are using something called class.js to get classes in javascript. You can just use ES6 classes for that now. ",1533822021.0
skipi,"If you don't mind having another external service - take a look at AMQP implementation like [www.rabbitmq.com](https://www.rabbitmq.com)  
",1533770743.0
WumpyJizard,"So as far as I understand you have a cronjob like worker doing the virus scan, right? And this worker needs the filenames, right?",1533767879.0
Ryan9104,"http://kr.github.io/beanstalkd/  
https://github.com/burstable/node-beanstalkd-client  
https://github.com/burstable/node-beanstalkd-worker  
  
There might be something better but this is what I'd use.",1533774078.0
bdvx,https://devcenter.heroku.com/categories/nodejs-support,1533765386.0
pchinjr,"I like heroku, but you can also check out now.sh for simple one command deployments. ",1533773402.0
JambaJuiceJakey,"If you going to run it on a hosting service like digital ocean, look into pm2 as a method of running node. Otherwise, you can use heroku as mentioned earlier.",1533765500.0
GoblinsStoleMyHouse,"Digital Ocean is really good if you need a database or other server side customizations. 

If you don't have a database or don't need much customization, now.sh or heroku both work great.",1533782552.0
hexy,"I agree that Heroku is a great option but it gets expensive.

I use a Digital Ocean droplet preconfigured with ""Dokku"":

[https://www.digitalocean.com/products/one-click-apps/dokku/](https://www.digitalocean.com/products/one-click-apps/dokku/)

Dokku is an open source clone of Heroku that you host yourself. You get all the same options (such as a deploying via git push) but only pay for the server hosting, not per app.

[https://github.com/dokku/dokku](https://github.com/dokku/dokku)

It takes about ten minutes from initial setup to multiple app deployments with virtual hosts and subdomains which are all managed for you, just like Heroku. And there are plenty of plugins for LetsEncrypt (SSL), database volumes etc.

In the end, I pay \~$10 a month for unlimited app deployment on my own domain.",1533799407.0
codis122590,Try linode if you just want a box and a hosting service that stays out of your way,1533780995.0
TyrionReynolds,Elastic Beanstalk on AWS is an easy way to go.  They have a free tier for the actual EC2 instance so if you stay small you won’t pay anything.  It also makes it super easy to scale up if you go past free.  Autoscaling and a load balancer is baked right in.,1533782002.0
Miles360x,"AWS Lambda + API Endpoints

EDIT: Why am I being downvoted, this is an ideal method. Plus he wouldn't spend a dime with AWS permanent free tier ",1533785158.0
koresho,Check out now.sh. It’s supremely easy (how does simply running “now” sound?) and quite cheap for what they offer. ,1533779503.0
teja42,Try https://openode.io .  According to my experience I find it better than others.,1533780190.0
ForthBestUsername,App engine ,1533792283.0
sidmish,Go for heroku or google cloud's app engine with standard environment. ,1533824269.0
Keramzcak,"I'm not sure how complex your node app is, but you could potentially port a lot of it to functions on firebase or aws. Firebase has a pretty decent free plan. What sort of stuff does your node app do?",1533775341.0
floodlitworld,I use Gandi. They have instances you can lease with node.js and MySQL or Mongo already set up. Super easy. ,1533801443.0
sanjeevmalagi,"Depends on your requirements :

* If you are willing to give your credit card details : AWS,Digital Ocean
* If you are not willing to give your credit card details : Heroku
* If you want to try something new but complicated : Firebase Cloud Functions (but you cannot make requests to other networks without credit card details ... )",1533803117.0
,"Just selflessly punting for my country: if you're looking for cheap VPS hosting, try [hostafrica.co.za](https://hostafrica.co.za) , they charge in Rands, so Dollars would be very low for mucho server power. You can choose a European or South African host. ",1534077681.0
powerOfAsshole,a good way would be to run your app inside a docker container.,1533763751.0
dvlsg,"Not sure if this is possible by looking at the documentation, but I wouldn't make `Tornado` as something you can require and use without instantiating. `const container = new Tornado()` would be better.",1533782158.0
paul_h,"> Tornado.resolve<Foo>(Foo);

I co-created PicoContainer (the first constructor injection container) some 15 years ago. I'm 100% sure that DI containers don't have a static lookup mechanism. By having one you've really made a typesafe ServiceLocator that **internally** uses constructors to resolve order of instantiation. If DI is still part of Inversion of Control (IoC) then .resolve() as you have it is Inversion of Inversion of Control :-(  

Unless I've misunderstood something....",1533855217.0
beereydee,I hate you,1533774850.0
skeliskull,"This is barely an article. It's basically just. ""Heres the command, BYE!""",1533776658.0
cemremengu,Give eggjs a try. It had everything you will ever need.,1533766332.0
Adoroam,"Firebase will do all of your heavy lifting server-side and for front end you usually want react, vue, or angular 6. Maybe a material component library, some typescript knowledge, and testing is helpful too.",1533755270.0
Mandrewdarts,"Adonis looks promising!
Heavily inspried by Laravel.

https://adonisjs.com/",1533756961.0
ReactDOM,Here's some more of the [best Unity courses & tutorials](https://reactdom.com/unity),1541641051.0
gajus0,"> Meanwhile, NewRelic is incredibly expensive. Unless I am completely misunderstanding their pricing, NewRelic costs 3x more than the actual server infrastructure (in case of Google Cloud), e.g. 5 x n1-standard-1 instances cost USD ~120. NewRelic for the same infrastructure costs USD 300.

Response from NewRelic support:

> That could be about right based on our calculator.
> It's hard to compare hosting pricing with New Relic though in fairness. Hosting is a cheap commodity with very little value obtained. 
> The insights from New Relic could make or break a business.",1533740020.0
timothytavarez,"Take a look into [Application Insights](https://azure.microsoft.com/en-us/services/application-insights/). I went to a demonstration last year at Microsoft Ready and was stunned at its capability and how quickly it is gaining traction. The pricing is mostly based off of Log Analytics - which is really quite affordable.


Disclaimer: I am a Microsoft employee.",1533740722.0
evantahler,DataDog has a free tier ,1533741728.0
makkesk8,I prefer grafana and prometheus not really compatible with new relic but it's the cheapest option.,1533813933.0
Pabvel19,"Hey, please take a look to this solution [https://statscloud.io](https://statscloud.io/main).

 

Advantages:  
\- flexible metrics configurations  
\- you can use custom application metrics (unlike many other APMs)  
\- easy to set up and configure  
\- developer friendly  
\- built-in alert support  
\- high throughput  
\- infrastructure as code IaC  


It’s a free for Node JS as well.

&#x200B;",1537209653.0
hugojsval,"In case this is still relevant, Statful has also launched a free plan option - [https://www.statful.com/#pricing](https://www.statful.com/#pricing)

It has a NodeJS among others - [https://www.statful.com/docs/available-clients.html](https://www.statful.com/docs/available-clients.html)",1539019237.0
doctorlongghost,"[sentry.io](https://sentry.io) can end up being completely free, but that's error monitoring only.",1533741306.0
BehindTheMath,"Any data that is stored client-side can be changed or set by the user. They don't need any fancy tools; it can be done in devtools. As a result, you can never trust anything on the client. The point of JWT is that it's a signed token that can only be generated and verified by the server. ",1533737803.0
joesb,Imagine your user open Chrome inspectors/debugger.  What can they do?,1533738241.0
ivanjxx,Im using cookies to store generated token from the server,1533741397.0
User31441,"Filled out your form. Intriguing questions.
Will you post your final results as well? ",1533736887.0
openist,I just like looking at example applications.,1533748311.0
Anjunabeatz,Nice. Would be interesting to see if I can leverage my front-end dev experience into Blockchain. Will fill this thing out tonite.,1533736378.0
ChickenPieFly,"Is it weird that I learn all my coding through Youtube vids?  
Willing to learn in a different way tho.   
Doing this now!",1533736539.0
spinlock,"One thing I didn't see in the survey that I would love in a framework is a functional approach. IMO, javascript is going the wrong way trying to fake an OO style. If you look at React, you'll only see examples of non-pure components that use the `class` helper. Which means you have to `bind` all of your functions to `this` in the constructor (or use a plugin like `transform-class-properties` in your webpack config). But, if you just use old-fashioned JavaScript constructors, the arrow syntax binds everything up nice for you without the code smell. ",1533752176.0
digitalz0mbie,Quickly because it happens so damn often.,1533788634.0
NeverGetsAngry,"What a nicely written survey, I already dropped my submition",1533750420.0
rhinoandre,Done,1533776445.0
OzziePeck,I like learning new things because I get bored easily. ,1533747818.0
Arffman,"Maybe unpopular, but I love me a good old boring Todo app example. I don't need to worry about understanding the application logic and I can concentrate on the code itself.",1533755125.0
Uiropa,I ran into this with Node 10 + Gulp 3. I could only solve it by going to Gulp 4 or back to a lower version of Node. There is a way to force a newer version of fsevents/nan using Node Shrinkwrap but I just used a lower local version of Node (I was in a hurry).,1533735395.0
grinde,"Downgrade to node 9 or LTS, or you could try telling your local `node_modules/fsevents` to use [nan](https://github.com/nodejs/nan) 2.10 instead of 2.9.2 ([pending pr here](https://github.com/strongloop/fsevents/pull/228/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2)).",1533890055.0
mansfall,"Learn design patterns and how to not write shitty code.  Start with reading ""clean code"" and ""clean architecture"" by Martin Fowler.  

Then, go practice some stuff.  Make a small app using onion architecture, following TDD for example.

While doing so, write maintainable code that is easy to test (small, pure functions) and easy to read by another developer.

Doing these things will greatly help no matter the language you're working with.  ",1533734915.0
atkinchris,"A `u` in position 0 suggests the value you're trying to parse from JSON is undefined, so when coerced to a string, will produce the literal string `""undefined""`.",1533745380.0
Mr_Peaches,"Possibly:

    {
    ""id"": ""wub ... ab2""
    }",1533736827.0
Dronar,"It would depend on the app you're building.

If it's a web service you can put them wherever you want (as long as you have permissions). Just put the location in an environment variable and let the current system handle it.

If you're building a client executable I'd stick to whatever standard is used on the current OS (appdata, home, etc) ",1533734380.0
mtaon,On Linux you should follow [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).,1533741479.0
fyzbo,"desktop software: Let the user decide.  Prompt for a location during installation/setup.

Server software: temp files can go anywhere, everything else should probably go to a third party service like S3 so you can load balance the application.",1533744485.0
ItalyPaleAle,"For structured data: use a database of your choice (relational like MySQL, non-relational like MongioDB, ""not-just-relational"" like PostgreSQL, etc).

For unstructured data (e.g. images, files...): PLEASE use some sort of object storage. Saving data on a directly-attached disk is a bad practice that makes management harder and limits scalability. Storing these kinds of data inside a database is a waste of resources and money. Object storage is something like S3, Azure Storage, etc; if you need self-hosted, check out Minio.",1533765756.0
rebelrexx858,"windows would be %APPDATA%

linux would be /usr/bin/

mac would be ???",1533734300.0
GeneralIncompetence,"Why pay a builder to build your house when anyone can stack bricks?

Being a trained software engineer is like being a writer. It's relatively easy to know the language, but it takes training and practice to use it effectively. ",1533713926.0
1879324978234,"100% have access to learning material

50% can successfully learn the programming language

25% of that can use it to solve problems

10% of that can use it to solve complex problems

1% of that can use it to solve complex problems without creating more problems",1533716401.0
Aior,"It's easy to begin, but it's hard to stay and even harder to get on the level of the truly good developers.",1533714801.0
teja42,Because not everyone is good at problem solving.,1533715265.0
joesb,"Everyone can pick up brush and paint. 
Everyone can sing from their mouth. 
Everyone can kick soccer ball. ",1533733517.0
Bobbr23,You can learn to play the guitar for free too,1533735683.0
rebelrexx858,"Your example has a giant fallacy. Senior engineers and Junior engineers do not have the same ""worth."" Just because the senior finished it 56 hours faster does not mean there was increased profit. A junior may bill at $75/hr, while a senior may bill at $300/hr. So 3 days of the senior is the same value as 12 days of the juniors time. And for trivial matters, it may be better to have a junior do the work when the senior can bill more difficult work.  /u/GeneralIncomptence gave the best answer for why",1533734186.0
Liamq82,"The only reason the salary is high is because of the supply of software developers relative to the demand for software developers. 
It's that simple. Supply and demand. ",1533718305.0
XiMingpin91,"Anyone can learn but to get up to a professional level requires experience, the right mentality, and a big foundation of knowledge.

I work at a big bank, the kind of company that can’t afford for things to go wrong in a major way. Nearly everything we do is also heavily regulated and we can be audited at any time.

To make sure the bank doesn’t fall short of regulations they ask for:

1. A degree from a top tier university - that already cuts out like 90-95% of the population.
2. A computer science or similar numerical degree - that cuts out >95% of the remaining 10-5% of available workers.
3. Experience with the languages and tools your team uses - again cutting out >95% of available people.

So just on the above criteria, that’s hardly anyone. So naturally the salary is going to get pretty high, as it’s an employee’s job market.

I don’t know much about other professions, but developers become very specialised very quickly. So even though there are quite a few of us, there actually aren’t that many for each job.

Even factoring in random agencies where they don’t have stuffy entrance requirements, you’ve got to bear in mind that it actually takes a lot of time to learn how to code. Someone could teach themselves how to code in 6 months and they might be ready for a junior position, but how many people are going to spend 5+ nights a week learning how to code. God knows coding can be frustrating at first as well, I know I found it hard and lots of things just didn’t make sense, so lots of people won’t follow through.

It’s pretty similar to other professions. Traders, brokers, accountants, and other similar high pressure professions all demand quite high salaries for similar reasons.
",1533746300.0
ChronSyn,"It is a skilled trade. The basics of almost every language are easy, but the advanced stuff requires dedication, learning ability, and application ability (i.e. the ability to apply knowledge).

Speaking on the phone all day and trying to negotiate (e.g. sales) is not a skilled talent because it is something everyone is inherently able to do without any special learning - it is a transferrable skill. Everyone is able to speak, and therefore everyone has all they need to do a job like that (that's not to say it doesn't require the ability to sell, but much of that is motivation-based).

Coding and development require skills which are specific to an industry and which often aren't transferrable - they're incredibly useful to have in the current times because of the proliferation of technology, but they are still something that needs dedicated learning. Being good at sales would help me as a coder because I can then negotiate with clients if I needed to (I may never need to, but it's something that can be used if needed). Being good at coding won't do much for me in a sales role because it's not transferrable to that role.",1533719583.0
Nidor_PL,"still not enough programmers out there, so price is still high. Because someone pays !",1533737811.0
boxxa,Programming and building software are two different things. ,1533742887.0
mahade,"Manager: ""we need a baby, let's get 9 women. They can make one in 1 month.""

Same story. I've seen projects go to hell when the expensive seniors were replaced by a higher quantity of juniors.",1533743538.0
mistralol,"
Well you can learn it for free. So can anyone. It doesn't make them good at it. There is a basic rule it takes about 10,000 hours to get really good at something.

Your calculations are probably off btw. You don't account for debt. Junior dev not only takes longer they also produce more debt and don't deal as well with error cases.

So when you want to adjust your function later. It may take a senior 3 days to alter the junior dev's code. But the same dev altering the other seniors dev's code may only takes hours. So you suddenly save 2.5 days worth of time later.

Measuring how much bang for buck you get in software is actually really really hard and then factor in security costs etc.. if something really bad happens the extra money for the senior isn't looking so bad any more.
",1533751461.0
Artistic_Basil,"I agree with the other statements that have been made. Anyone can learn to program, just like anyone can learn to play an instrument. The difference is that the people getting high paid jobs have likely already had experience. On top of that, it all comes down to practice.

The more you do something, in theory, the better you get at it. So the people who spend a lot of time practicing and honing their craft are more likely to get hired for a high paying job.",1533767407.0
Nimor111,Another solution would be to use the express.Router ( see bottom of this page https://expressjs.com/en/guide/routing.html) ,1533710742.0
Droid-on-Fire,"Just put the function in another file, let's say 'my_file.js' (don't forget to export it) and then use require to retrieve it.

const MyModule = require ('./my_file');
// then access the function normally
MyModule.fct()

I suggest you to take a look at how require and modules work",1533709093.0
ChronSyn,"Module.exports can be a function which means you can pass parameters like app in, while only calling app.listen on the main file.

`module.exports = (app) => { //do something }`

Import as `require('myfile.js')(app)` (after you've created your app instance) as this will explicitly pass a reference to `app` through to your export in myfile.js. One huge bonus of this is that just by importing it, it's automatically initialized.

You can do the same with almost anything in node and it's a key basis for writing modular code.",1533711893.0
ilja903,"If you make a module and require it everywhere to hold state, then it is not a problem. For instance redux does almost that.

But if you plan to use module.global then I would advice not to do that. You will loose IDE support and debugging will be much harder.",1533705002.0
cspotcode,Globals are the singleton pattern.  There are situations where singletons make sense.,1533734331.0
nothingduploading,"	function foo(){

console.log('foo');

	}

	module.exports = foo;

	const foo  = require('./foo');",1533699854.0
igoriunia,"Hi. 

I have another example like DummyAPI.io.

An API that already deployed and have a lot of dummy data for different kinds of projects. 

[https://dummyapi.io/](https://dummyapi.io/)

Also it is good for beginners, to play around.

For me, I am using it for different demos of my components.

Guess it will help somebody. 

&#x200B;

&#x200B;",1540078431.0
SquattingWalrus,Gonna go out on a limb and say you’re probably not passing a function as the listener argument. ,1533681890.0
powerOfAsshole,"this article does a very simple task in a complicated way. you should look for a simpler example. I am on my mobile, else I would add one for you.",1533667260.0
bees_dolphin24,"Delegation of authorization is what oauth is supposed to solve. Otherwise I would find it difficult to build an authentication/authorization flow to complement and existing one when I don't have access to their backend a really heft task...

  


I am assuming you don't have access, see if they support oauth2.0 (latest standard) or maybe they are like Twitter and support oauth1.0 both use tokens but oauth2.0 will be easier to use with jwt, and even passport has an oath flow that could help out...

  


Just my opinion",1533658028.0
fasterfester,"I admit I haven’t read all the documentation, but would someone who knows about Let’s Encrypt answer some simple questions?  Is this something that could be used in a production environment?  Would this completely replace an SSL certificate?  Reading something about ACME makes me feel like this is maybe much more complicated than purchasing a cert.  Thoughts?",1533696597.0
yeamanz,"I guess it's fine to get your blog out there but this seems really click-baity with little information, just linking to other places. It helps to know _why_ helmet helps, _why_ ssl helps, etc. 

""Use cookies correctly"" doesn't explain how to use cookies correctly..it only tells us that the defaults are bad and to search on our own. Does MemoryStore _really_ leak memory? That seems like some outdated bug that would have been fixed by now, but I don't use it so who knows.

""While npm is a great package manager, it does have its security vulnerabilities."" - Well then suggest something else. Yarn is my go to now, but is it that much better in terms of vulnerabilities?",1533620220.0
OzziePeck,Yes it is ,1533807383.0
Console-DOT-N00b,"That font is annoying and the list is just ""they do x good"" over and over again  ... but no real measurement about what that even means.",1533615636.0
kiksen1987,What about Linode. Digital Ocean. Aws. Azure. ,1533618955.0
Shadaez,"spawn as child process and make a json file as you are, but wait for it to exit & be done, with cp.on('exit', readTheJson)

or you could just have the c# app pass the json through stdio and read it with child process - this is prob better because if two requests come in and they need to be different, this would handle that",1533599683.0
jjr2527,I'd suggest looking into edge.js to simplify the handoff to .net.,1533609255.0
GoblinsStoleMyHouse,"It's not cool to post ads for paid services masqueraded as a tutorial.

If you're advertising a paid service, at least be up-front about it.",1533607935.0
N3KIO,"this is just a AD/SPAM, 0 value",1533596410.0
rgaino,"does it run database servers too?
",1533602377.0
TheOneRavenous,Might need accent marks. Is there a payload that's sent back from the fullfilment server?,1533657888.0
,Had an issue in Python with Serbian cryllic. Had to unidecode it. ,1533960534.0
notAnotherJSDev,Anything you've got against tslint? Can't see a reason not to use the tool built specifically for TS.,1533579763.0
akitov,"I'm using typesript-eslint-parser on couple of projects at work. 
It has some known problems with couple of rules (see their issues), but works totally fine most of the time. 
Eslint has way more rules than tslint, even with couple of rules turned off. So we totally disabled tslint in this projects. ",1533581262.0
ChronSyn,"Doesn't seem any friendlier than request, axios, or even the fetch node 'polyfills'.",1533595088.0
ChildishBonVonnegut,"I love got. My only complaint is that when I google search my issues, it’s impossible to find any relevant results because the name is so ambiguous. ",1533611578.0
cgijoe_jhuckaby,"/u/sindresorhus I love your work, sir!  I use a ton of your packages.  For those who haven't seen, check this out: https://www.npmjs.com/~sindresorhus -- 1 more and you have 1,111 :D",1533611819.0
SomeRandomBuddy,"Yes, because when your apps make HTTP requests, or your backend make them, little humans live inside whom actually facilitate the process. ",1533574379.0
TheCommentAppraiser,Lovely library. Does it support HTTP/2 yet?,1533591507.0
skeliskull,"How's this more ""human-friendly"" than simply using request?",1533586436.0
r33beers,I love this and so many more of Sindre's packages!,1533602068.0
Altessaire,Axios is way more performant than Got.,1533574830.0
AxelTerizaki,"Strangely, I have big issues with any HTTP client library out there when downloading large files. Even with retries, some downloads fail entirely by stalling on some connections. I had to reluctantly use a curl wrapper instead and it works much better for my users for some strange reason :/",1533635625.0
scaleable,Why dont we just use fetch?,1533582183.0
echeese,I think it would help to implement a streaming parser that parses the body as it comes in instead of waiting for the whole blob to come in and doing string manipulation on a giant string.,1533604972.0
keeto,"A few things might be slowing down your code: using `for/in` for looping through the array and/or `moment` taking additional time.

This naive implementation clocks at less than a second to parse a string of 300k lines:

    console.time('Test')

    // Prepare string of 300k lines
    let str = `H201808061215P00010
    H201808061220P00009
    H201808061225P00014
    `.repeat(100000);

    let result = str.split(/\n/).reduce(function(acc, item) {
      if (!item) {
        return acc;
      }
      let parts = item.match(/H(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})P(\d+)/);
      if (!parts) {
        return acc;
      }
      acc.push({
        datetime: new Date(
          parts[1],
          parseInt(parts[2], 10) - 1, // Month is 0 index
          parts[3],
          parts[4],
          parts[5]
        ),
        passed: parseInt(parts[6], 10)
      });
      return acc;
    }, [])

    console.log(result);
    console.timeEnd('Test')",1533573636.0
misterlively,Is there a reason you think you need to use webpack? In general I haven’t seen that done. Maybe you just wanted to use Babel or typescript to transpile? In that case you could just use them directly.,1533568568.0
XiMingpin91,"It’s not very common to bundle your serverside code, all you need to do use the highest version of Node for the features you want to use.

Honestly I would say just don’t bother bundling you serverside code, it’s a relatively big task for little to no gain. If you really want to however, simply tell Webpack to target Node and execute the output bundle file as you would your main / entry point file",1533574669.0
tswaters,"So your `npm start` script, or however else you would spin up the application, i.e.  `node app.js` or whatever else it is -- that file is your entrypoint.

Webpack will look at that file, find any imports and recursively scan the entire tree to build out a single js file (typically)",1533580991.0
erfling,"Does anyone here bundle server-side code? If so, why?",1533612725.0
GoblinsStoleMyHouse,"Webpack is only supposed to be used for code that runs in the browser.

Your Express application is a server side app, so you shouldn't need to use webpack.",1533592475.0
digitalz0mbie,"> lost

Switch to brunch.",1533605781.0
coracarm,"I created a generator project for express and webpack. It sets up everything for you. You can try it here https://github.com/cdimascio/generator-express-no-stress
Hope it helps",1533613308.0
SparserLogic,"A lot of good info, let me help with a couple points:

Express is a webserver you run with Node that doesn't require Webpack, inherently. It can be used to serve ""client-side"" code that is run through Webpack, however, but that is different.

Webpack is, in simple terms, a tool to take a single file that asks for other files and bundle all of those files together into a single, minimized bundle. If those other files require yet more files, it will get those too, until everything has been bundled.

When you run a command like `node foo.js` Node will look up any files referenced for you, negating the need for them to be all bundled together with Webpack.",1533587159.0
notAnotherJSDev,"What is the body of the message that you're sending? There's a possibility that you are sending something that `bodyParser.text` can't handle, which will cause the server to die.",1533567025.0
ecares,"In JavaScript you don't declare types. I assume you go the error when trying to use the TypeScript transpiler.

As the error stands, you should rename the current file from *.js to *.ts
 ",1533555436.0
vue-rocks,I’d check the terms of service of the particular website,1533541510.0
nothingduploading,"no of course not unless you have unauthorized access. That being said, most web sites and apis have a ToS   you can read, and if they are meant to be crawled (ie: an api) they will have usage limits.",1533542247.0
thedawgbeard,"Do your research. Look for a ToS on the site, then also look for a ToS on a parent site if one exists. Most have rules against it and will IP ban you if you abuse it. 

source: have been ip banned before. ",1533575687.0
JakeGore,Looks really cool! It would be helpful from anyone coming from PHP and who is used to using var_dump and die.,1533539717.0
TaskForce_Kerim,"Cool beans, man!",1533557064.0
merb42,Looks great! Trying it out,1533561483.0
KolaCaine,"Yes, thanks you ! It's better with highlight syntax",1533545183.0
alliedSpaceSubmarine,What's the use case for this? Debugging and/or just logging in general? Or something different,1533560276.0
JaniRockz,Great!,1533561898.0
puersion," At the moment, I'm using VS Code's inbuilt debugger for Node, so I won't need this. However it's a great package, for those who really need to inspect code. 

Just a suggestion though, shouldn't it be --save-dev instead of --save for the npm install script? Since it's meant to be used an inspector/dev tool?",1533602265.0
thewhitelights,"What does this provide me that `console.log(variable)` combined with `process.exit(0)` cannot?

Genuinely curious! Seems like an interesting tool. I do dump and die in PHP all the time.",1533566356.0
excited_by_typos,ugly name for a library,1533538746.0
_maruf,In Laravel we have DD() by default. ,1533546570.0
teja42,Use nginx on top of node. You could use it to serve static content like images. It's much more efficient to use nginx for static content than node. ,1533524210.0
ankurmittal092,"A bit more context here would help.. what are you trying to achieve.. what approach are you taking?
",1533531038.0
theigor,"Have a way for an img tag to reference an image directly. If absolutely necessary, you can issue temporary urls that time out after some time (minutes, hours, days). Look at how Google cloud storage does it. ",1533514151.0
Cyberuben,"It's always smart to escape, or at least validate, since it might allow objects to be pushed now. Either way, connecting to the database every request is bad practice. Open the connection outsude your route handler and use it inside. You also might want to use something like Mongoose if things get more complex.",1533514366.0
gudatcomputers,Absolutely validate and escape it. Make sure that parameter is the type of data you are expecting. Otherwise you open yourself up to all sorta of injection attacks. ,1533515310.0
broofa,"ITT: People who haven't read the [`insertOne()`](https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/) documentation.

The first argument is a Mongo [Document](https://docs.mongodb.com/manual/core/document/). As long as you're not setting the special `_id` field, there shouldn't be any need to escape the document values.

... where Mongo is concerned, that is.  You'll obviously still want to properly escape them as needed if/when those values propagate to other systems (e.g. browser UI, log files, etc.)",1533585780.0
bel9708,You can use Path.join to cast the user input to a path. Make sure you check the path that comes out starts with a path the user has access too. Otherwise they will be able to use '../' to write to higher directories. ,1533527910.0
ItalyPaleAle,"Rule #1 of safe web app development: NEVER trust user input. In your case, not only you're potentially vulnerable to ""NoSQL injection"" (passing an object), but when the data is displayed this can lead to XSS attacks.

Use something like [Joi](https://github.com/hapijs/joi), [express-validation](https://www.npmjs.com/package/express-validation), etc, to ensure the input is of the type you expect. Consider also trimming HTML tags, or converting them to HTML entities...",1533517423.0
ishegg,"Validate your fields, but I'd escape only when displaying (and only if necessary). The escaping you need depends heavily on the medium, so don't assume anything. Just save anything on your database and escape when outputting.

I'm assuming the Mongo client is using prepared statements or something of the like. Otherwise, absolutely do escape the strings destined for queries.",1533522965.0
VanGoFuckYourself,"K, but what does it do? ",1533501473.0
crux153,Time to integrate it with node-coap :D,1533520774.0
virtulis,"> WebRTC for Node.js

It's so great that someone is doing this. There are too few non-browser WebRTC implementations. I only know of OWR and Janus, actually (are there any others?), one I couldn't even get running, the other is great but not very flexible.

Do you consider also implementing media streaming at some point or will this be data only?",1533504238.0
aghost_7,Honestly it would depend on your application. Do some load tests to see if your application is network bound / cpu bound / memory bound / etc.,1533484086.0
jsdfkljdsafdsu980p,When you do testing/load testing what limits do you hit first? That is your scaling metric. ,1533486448.0
tastyricola,"I like to abbreviate when the context is clear enough. I think it's unlikely that anyone will confuse what req, res and err are in an Express app. If I have a promise in one of my route however, I would write resolve / reject instead of res / rej.

Express docs use res/req themselves, so I think of it as a sort of framework's convention as well.

For your own codebase, use whatever you'd like, of course.",1533472296.0
eablokker,"The main reason to abbreviate these particular variables is that they are used over and over and over again in an express app, and in every express app. They are like a required part of the structure of your app, they are not optional. If you are making up your own variables for something else, go ahead and don’t abbreviate. But I could have thousands of req, res, err in my app. Definitely don’t want to type those out, especially since request and response are actually tricky words to type and easy to typo.

Also nobody needs to be able to read those variables because they are an implicit part of express. They are part of its syntax if you will. Nobody will be confused by them.",1533487806.0
geon,Happy to hear you don’t do it. It pisses me off. ,1533483572.0
nschubach,"I usually type out the whole word (well, once... autocomplete the rest.)  Unless the codebase you are working in has explicit rules about it (in which case I'd question the rules) do what works for you.  I like being explicit and shortening the variable names is just being lazy if you ask me.",1533473970.0
ChronSyn,"In your example of 'err', what else could 'err' mean taking into account the context?

It's not necessarily about shortening for the sake of shortening, but because it's easier to type again. I'm absolutely not saying don't do it. There's times when I wish variables were more descriptive, sometimes in my own code and sometimes in others. I don't know what `x` means, but I've learnt that if it's in a map, it probably refers to the item being referenced. This is a time when I'd say using `item` is much more appropriate, but then it falls against the paragraph below.

I have disabled autocomplete except for when I press a key combo because I find the popup for intellisense frustrating as it often blocks code on the lines above or below (or sometimes both). It also sometimes fills in ridiculous suggestions such as names of obscure internal libraries and then adds an import for it. Those 2 characters I saved by not typing 'err' and then autocompleting to 'error' has suddenly lost me 10 seconds because I have to go and remove the import I didn't ask for from a feature that didn't help me. You could say that by disabling those features and typing the extra characters is the best solution, and I'd agree, until it comes to having to type `resource` or `resolve` or `response`.

Same as with the languages we speak and write such as English, the context is often more important than the language. ""I don't know what I'm doing"" has a different meaning when speaking with a loved one or a psychiatrist compared to when working on a project. In the same ideal, res in the context of a HTTP-related event or function would be assumed as response, while in the context of a promise it would be assumed as resolve, while in the context of packing or unpacking it would be assumed as resource. The exact same combination of letters in the exact same order changes meaning because the context is different.

Then there's the scope of the language. Unless you've got a keen eye, you may assume `request` refers to the imported library of the same name, while `req` is much more likely to refer to the locally scoped variable. Yes, you can say ""be a better coder, then!"", but why make yourself think more when reading code than you already need to? Your mind is occupied trying to understand the logic behind code, don't make it do more work than it needs to.

I'm sure there's some psychological studies that have been done that cover fatigue of typing the same things multiple times and the correlation between mistakes and the length of the typed word.",1533543871.0
cspotcode,"I agree with you.  As you say, IDEs make it easy to use full names, and it's better to be descriptive.",1533489203.0
cazzer548,"I also don't abbreviate. Simplify logic, not labels.",1533486210.0
Clashtoon,"I'd love to be such a good developer that length or parameter names was bottlenecking my speed rather than thinking out problems, refactoring, planning, testing etc.

That said req, res, err are all fine in my books. I don't use them but they're fine for me. ",1533487237.0
bpadair31,"While not abbreviating does not seem like a big deal to you now, just wait until you are working on a massive code-base those 3-4 characters could save thousands of key strokes over the course of a day. Additionally, for many people it is easier to read when the code is compact. The caveat is, to make sure that the abbreviations are clear and understandable given the context. In the example you provided it is very obvious to anyone with even a little experience what is going on with those.",1533475673.0
runvnc,"I think you're right to point out this inconsistency.  But it's a convention to abbreviate some things that are repeated often, although  for less common and
 repetitive names it isn't done.",1533519058.0
kranker,"I'm generally the same in that I avoid abbreviations, but the examples you give are idiomatic.  Using `request` and `response` can only cause confusion.  They're also good candidates for abbreviation because they're not ambiguous.  ",1533475560.0
ppafford,"Fully qualify all the things! This is what I tell my team, make code clean, easier to read and easier for new devs to understand ",1533519260.0
akujinhikari,"I’m working on an app with a couple hundred endpoints. 9 extra characters per endpoint is almost 200 extra characters I’d have to type, and since I already have carpal tunnel, I’d prefer to to keep my long variable names in places where it’s necessary for clarity. ",1533475327.0
DTheDeveloper,"Set the headers of the request to:

{ Authorization: 'bearer ' + token }",1533479456.0
FREEZX,Access tokens should usually be sent from the server to the client as part of the response of a successful login attempt.,1533472039.0
suncoasthost,You can use jQuery ajax beforeSend method to set authorization header. ,1533476616.0
WOLV04,I'm not bashing on node but I'm not seeing any advantage choosing Node over PHP (Laravel) or anything else for something that isn't a Single Page Application. (Time/money wise ofcourse),1533456440.0
xemasiv,"afaik

    formdata.append(""image[]"", f);

should be

    formdata.append(""image"", f);

since you're using

    upload.array(""image"", 5)

then include

    multipart/form-data

as content type",1533460833.0
NikhilT90,"If you haven’t yet, you should read up on Operation Transformation and Conflict-free Replicated Data Types (CRDTs). There are JS implementations of both that’ll give you inspiration to handle how to deal with the data merging / polling for changes. ",1533438027.0
koresho,"Socket.io is the right track, but you should just use plain websockets. Significantly faster, and supported in every modern browser. Socket.io is basically jquery at this point: it was extremely useful but these days native is just as good. ",1533440419.0
aclave1,"Hello! You are entering very difficult territory but I have some advice to give you! 

\>   Is this something where [Socket.io](https://socket.io/) would be helpful 

Yes. Even though we can ignore scalability (since this is for home use), polling the database is generally not a good idea because the polling interval makes things feel sluggish. [Socket.io](https://Socket.io) will feel instantaneous because it essentially is.

From building this type of distributed editing system a few times before, I know of two methods for handling this. 

The first method is document locking: when user A is typing, the document is locked to user B. This can be for a couple seconds at a time(while typing) or you can just lock the document the whole time someone is editing. Locking for short periods of time is pretty simple to implement and debug.

The second method is going to be to use [operational transformation](https://en.wikipedia.org/wiki/Operational_transformation) . This is pretty complex to build out but as far as I know, this is the gold standard solution for this problem. You essentially model the document as a series of transforms which perform some edit to the document such as appending a word, deleting a word, etc. If user A sends an edit 1ms after user B then they will be properly ordered serverside and should interleave. ",1533437970.0
Seaoftroublez,One approach would be to use draftjs/react/redux for the frontend and then connect the redux store to firestore. This way there's a single source of truth which is kept synchronized across all clients.,1533475483.0
ecotricheco,"You're reinventing the wheel; you could use ethercalc and etherpad which are both node based, open source and do exactly what you need. However if you're doing this as an exercise i can understand why you'd roll your own. As a data point, ethercalc does use socket.io . 

",1533451477.0
trout_fucker,"At that level of requests, you're going to have to horizontally scale anything you choose.

GoLang is quite a bit faster than Node and it supports threading. But, it depends on what each service needs to do.",1533425013.0
GoblinsStoleMyHouse,"Node is great for high request counts, but it starts falling off in efficiency once you start doing CPU intensive IO tasks.

If you're building a simple API to interact with a database, Node is a great fit.",1533429465.0
goorpy,"I suspect your bottleneck will be the db for those times, but that's a lot of requests.

Will it involve data assembly or only evaluation? Checking is much faster than creating.",1533447679.0
kyle787,"You can use clusters to help with the single threaded caveat. But is it possible to do any sort of caching of the computed data? What makes it cpu intensive? 

Edit: typo",1533474634.0
akujinhikari,"I’ve honestly never heard of anything that needs 50,000 requests a second. I built a Node backend that could handle about 2,000 a second with no clusters, and it would query a db, delete the returned results, then write to the db, and output data to a front end for every request. Granted, I don’t know what your requests are needing, so I don’t know if that information helps you or not.",1533493433.0
skaz68,"You may not be using body parser, check out this link https://www.npmjs.com/package/body-parser",1533417988.0
betelgeuse94,"I know I'm 3 months late but gave you sorted it out? Because I'm having the exact same issue :(paths are correct, body parser is used, body has keys and values) but req.body = undefined :(",1541145014.0
a9p6,"I think you’d need to create a function that returns tic and tac, set variables equal to the function response and then render the variables once they have values. Probably gonna need to use promises",1533401508.0
ppafford,"Why not use a CTE https://www.postgresql.org/docs/9.1/static/queries-with.html

Example

[code]


WITH query_1 AS (
   SELECT field 
   FROM table_1
   WHERE condition
)
, query_2 AS (
   SELECT field 
   FROM table_2
   WHERE condition
)
, get_both_results AS (
   SELECT * FROM query_1
   UNION 
   SELECT * FROM query_2
)


   SELECT * FROM get_both_results

[/code]

The CTE executes these queries, unions them into 1 result set, just all the fields from the queries need to match ",1533428639.0
kryptkpr,"First make sure you need to actually do multiple queries, and are not just being SQL illiterate.

If you really do need to do this, nested Promises are super ugly and I'd go async.

First decide if they can be done in parallel or if they need to be sequential.  If parallel, run them parallel:

const [Tics, Tocs] = await Promise.All([db.query(""select * from tic""),db.query(""select * from toc"")]);

If sequantial:

const Tics = await db.query(...)

const Tocs = await db.query(...)

Then do whatever you need to format and return the results, simplest case is just:

res.json({Tics,Tocs})



",1533403956.0
acraftillo,"Store the results of each query in res.locals, it will persists from query to query. Eg res.locals.tic = tic.rows, then pass res.locals in your render",1533403186.0
tomnewmann,"Hey, I have created my own instagram bot in JavaScript for automated likes, follows, and comments (please see video demo). I used Meteor and Vue for the frontend and have Puppeteer running in the backend to perform bot actions headlessly. I am currently running it 24/7 on a DigitalOcean instance. I would like to get your feedback on how it could be improved?",1533399912.0
nosebleed_tv,I like the code. Instagram is really strict about their api so id take a look at their api rules and always try to run it off a vpn so they dont ip ban you. ,1533407026.0
koett,Really cool!,1533409167.0
AesunaIoHealth,Nice bot. How happy were you with Meteor? I rarely see people using it these days.,1533448571.0
speort,Some code or a working example would be helpful. ,1533399665.0
nothingduploading,its not an async operation. you don't need callbacks.,1533368462.0
chrisdefourire,"If you put the static middleware at the beginning of the stack, it will `fstat` for each API call to see if a file is called `/api` or `/admin`... 
so it's best to put it last.

Even better would be to use a different domain or at least a different route to serve static content (then serve it with nginx, or a CDN)",1533396035.0
rpmisms,Following ,1533348827.0
GoblinsStoleMyHouse,"Make a live, collaborative online notepad. You can use Socket.io for easily sending data to and from the server.

You will gain a lot of experience by doing this, and it's actually a useful app!",1533349752.0
lepuma,Water is wet,1533368981.0
qqqyqnz,"> Programmers seem to have forgotten the real purpose of tests

[citation needed]",1533394987.0
SalemBeats,"*""Whether""*, not *""If""*.",1533493352.0
deniercounter,Just to be sure: You enabled POST on this route?,1533346387.0
tqhuy1811,"you need to add a path in your proxy settings. It should looks something like this.
""proxy"":{  ""/api/*"":{ ""target"":""http://localhost:5000""} }. This is assume that all of your routes on the backend have ""/api"" as a default route prefix. There's no need for cors. ",1533365076.0
anubis2019,"Try ""http://localhost:5000/""",1533370987.0
kryptkpr,"No, just split the routes.  The first argument to app.get is the mount point.. You have only defined / so that's why /submit doesnt work.  Add an app.get('/submit', ....)",1533338295.0
beereydee,"Wow.
",1533349349.0
nothingduploading,use pm2. you can put an identifier in the process.,1533337369.0
kryptkpr,Can you use env variables?  That's the typical solution to per-instance constants.,1533339913.0
Knotix,TLDR: Don't use Standard,1533337695.0
greim,"Well, this applies to any modern JS engine, not just Node.js.",1533353924.0
Move_Zig,"You can use them both.

Just add both middleware functions to the pipeline. e.g.:

    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: true });",1533331456.0
kryptkpr,"You do not need urlencode to get data from a form.  Instead of a submit button, write a frontend function to populate an object with form contents and post the json.",1533332914.0
Sharwul,"* **bodyParser.json** is for decoding requests where you have:  
    Content-Type: application/json
* **bodyParser.urlencoded** is for decoding requests where you have:  
    Content-Type: application/x-www-form-urlencoded

As far as I understand, you cannot use both of these at the same time for a single request.

I don't remember at the moment, but I think at least the json will only work for POST requests. Possibly the same for urlencoded.",1535554443.0
,Passport.js,1533330325.0
tuderculosis,"If you have a repo, then it would help to take a look at that. Also, try cloning the [scotch.io](https://scotch.io) repo and testing if that works. Google -> ""How to clone a github repo"" if you are unfamiliar.

Was it this?

[https://github.com/scotch-io/easy-node-authentication](https://github.com/scotch-io/easy-node-authentication)

There are so many things that could have gone awry with your reproduction of the tutorial that it is hard to help you out. Authentication has a lot of moving parts. With only ' I get an error when redirecting to my local host for some reason' to work off of, it's hard to focus on the underlying cause of it. Try copying the error message and using a search engine to see if someone has encountered a similar issue with regards to google/facebook authentication. Chances are that someone has.

Other than that: it can be a struggle so remain patient and embrace the struggle. This is were you begin to learn.  


Maybe you want to give a video series a try:

[https://www.youtube.com/watch?v=sakQbeRjgwg&list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x](https://www.youtube.com/watch?v=sakQbeRjgwg&list=PL4cUxeGkcC9jdm7QX143aMLAqyM-jTZ2x)  


This one looks fairly thorough. \^\^\^",1533333532.0
_the_silence_,"Here's a tutorial based on what [tuderculosis](https://www.reddit.com/user/tuderculosis) said.  At the end it discusses what you're looking for.

[https://scotch.io/tutorials/easy-node-authentication-setup-and-local](https://scotch.io/tutorials/easy-node-authentication-setup-and-local)",1533341953.0
SgtPooki,Web performance... but what kind? What does it do? Pretty light on the info in the readme.,1533352408.0
rodrigosanabria,I think you're looking for this: http://mongoosejs.com/docs/populate.html,1533332217.0
verimour_cto,"Maybe it's because I come from a SQL background, but I tend to do everything by ids, so this is how I would do it:

User schema:

    var mongoose = require('mongoose');
    var Schema = mongoose.Schema;
    var schema = new Schema({
        //_id field is automatically generated
        email:           {type: String},
        password:    {type: String},
     });

Spellbook schema:

    var mongoose = require('mongoose');
    var Schema = mongoose.Schema;
    var User = require('./user');
    var schema = new Schema({
        prop1:        {type: Number},
        prop2:        {type: String},
        userId:       {type: Schema.ObjectId, ref: 'User'}
    })

When authenticating, obviously use email/password, and retrieve the _id from user, then you can use that to query the Spellbook.

If you are querying Spellbook and need to return the email in that query, then you can do:

    var query =  Spellbook.find({_id: *UserID*});
    query.populate({
        path: 'userId',
        select: 'email'
    })",1533352188.0
erulabs,"press ""up"" on your keyboard, and then ""enter"" to repeat the last command, or `!!` works as well (automatically re-runs last command in bash shell). One more trick: Control-R! Will match commands in your history, so try ctrl-r -> ""node"" or just ""n"" and it should match your node command.

OR you can install a filewatching utility like `nodemon`. *shrug* :)",1533323961.0
um_ya,[nodemon](https://github.com/remy/nodemon),1533329384.0
lord2800,"`nodemon`, `pm2`, `watchexec`, and probably others.",1533323557.0
cspotcode,It sounds like you're describing desktop shortcuts.,1533323992.0
th0maslv,Nodemon is a life changer.,1533336923.0
dr_steve_bruel,"I just type ""no"" (tab)  ""i"" (tab)  ",1533324187.0
beorthram,"I've always used Nodemon

Using command line, enter: npm i nodemon -g

Now when you run index.js, prepend the file name with nodemon, rather than node

",1533367956.0
nothingduploading,"
	{
	 ""start"": ""npm run dev"",
	 ""dev"": ""node ./index.js"",
	}

now just run `npm start`",1533323595.0
randomFIREAcct,streams?,1533303020.0
kryptkpr,Where is it coming from?  Its unusual to be dealing with delivery but not ingress or storage. ,1533321426.0
AntonioErdeljac,"I would recommend streams, as @randomFIREAcct mentioned. This will ensure that you use a 'proxy' for sending files instead of directly exposing any critical links.",1533329919.0
adidarachi,"If you are sending mp4, make sure that the ""metadata"" (headers of video) are at the very start of the file, otherwise the browser won't really stream it.

(Please Google before down voting 😄)",1533370639.0
notkraftman,"Move the function out of the event and call it by name, also has the benefit of making your code more readable and reusable.",1533300694.0
cupsadarius,"You could mock the instance as a new EventEmitter, register the same handler on it and just instance.emit('message', {some data}). It should trigger the message handler.",1533326359.0
max_kek,"Promise.all([request1promise, request2promise, etc])?",1533294935.0
firemouth55,"I love that I just barely learned about Promise.all YESTERDAY when I was trying to accomplish something similar. 
Though, still trying to wrap my head around how to structure my code to work with the array. ",1533328789.0
variables,"[async/await](https://javascript.info/async-await)

Keep in mind JSON.parse and JSON.stringify are both poorly performing functions.",1533300894.0
TheOneRavenous,"Although promise.all is the easiest to implement. It is possible to register an event emitter. In the handler function of the event emitter you determine if all the requests have been completed and then combine the JSON documents and write to file. 

promises do make it nice and easy to reason with. ",1533315248.0
some_coreano,"Checkout async library, especially parallel. I think its better than promise all",1533315797.0
Aufor,"Call them all separately and increment a counter for all success and fail then make them all execute a json building function. In json building function, check if the counter < 5, end. If = 5 then build json. This way it doesn’t matter which order the calls come in, the json will only be processed when the counter is 5, and you can handle situations like when not all calls are successful.

",1533307642.0
,[deleted],1533299169.0
trowawayatwork,"ibm cloud sucks ass and it wont get any better any time soon.

if you think otherwise please try out ibm bluemix",1533294371.0
Mike_Enders,Their support stank as one of the worse we have ever dealt with.  If they were the only option I'd get out of the  development business entirely.,1533352935.0
runvnc,"Not everyone needs or wants to use the old ""LTS"" version.  So not supporting newer versions of Node is a big problem in my opinion.

Also, on this page [https://modules.cloudnativejs.io/?distro=ubuntu-16.04&arch=x64](https://modules.cloudnativejs.io/?distro=ubuntu-16.04&arch=x64) it seems like they are thinking they will be able to choose some 'good' modules for you.  Without even knowing what your application is.  Out of what, 700,000 modules?  Seems there are no modules curated yet.  I wonder how they would decide that.  Because there are dramatically different opinions about how to do Node.  Some people are 100% TypeScript only.  Some people hate TypeScript.  Some think babel is critical, others hate it.  Some people think Koa is superior, and others still prefer Express for some reason.  Etc.  And then there are people who have their own perfectly valid way of doing things that just isn't super popular yet.. not every good module is popular.  So how do they propose to do a truly fair and accurate curation over such a large database of modules  that will actually be relevant for diverse applications and groups with different approaches?",1533314924.0
3247,They have official channel of communication here [https://gitter.im/vpulim/node-soap](https://gitter.im/vpulim/node-soap),1533291740.0
ChronSyn,"You haven't defined what 'data' is. In your example, you're passing an unassigned variable (data) into a function (readevents).

What I think you meant to do is pass it back as data;

    readevents((data)=>{
      // do stuff with data
    })

Or, alternatively, use async-await;

    setInterval(async ()=>{
      let data = await readevents();
      // do stuff with data
    });

You need to make sure that your readevents function returns data as a callback (or is synchronous, but please try to avoid that where possible).",1533284367.0
,"Hi There,if the data variable has been defined prior to the interval then your problem is by the time the interval executes the method defined, the data you are trying to access no longer resides in the memory space it was originally allocated to. So to get around this, use an enclosed function.

    //lets say you define data here
    var data = ['event1' , 'event2'];
    setInterval(function(){
	    (function(){
		 var localData = data;
		 readevents(localData,function(hasBeenReadData){
		     //do stuff here
	         });
	    })();
    },0);

This happens a lot when working with socket coms. Where a socket message triggers an interval and need to re-use the data sent on the original 'data' event",1533286215.0
Parasomnopolis,https://www.andyibanez.com/ask-programming-questions/,1533283572.0
MrButttons,"According to the documentation you can try attaching an event handler on the server. 

https://www.npmjs.com/package/tunnel-ssh
    // Use a listener to handle errors outside the callback

    server.on('error', function(err){

        console.error('Something bad happened:', err);

    });

",1533285531.0
pingueame,"I don't know about node, just learning... but I can tell you that share user, IP, port and password of public server on Internet, is not a good idea",1533350421.0
bododerboese,Shitty question without any specific use case,1533277879.0
IAmNotKevinBacon,"MongoDB gets a lot of hate because, just like Node, people use it without giving any thought to the use case. If you're using Node and MongoDB for an app chock full of file I/O, you're going to have a bad time. Is the schema easily locked in? Don't go document store. Do you have complex queries where a nice JOIN would make things much easier? Maybe go relational. $lookup is great and all, but at the end of the day, the aggregation pipelines can be downright insane to accomplish similar shit.

The big issues have been the shitshow that comes with any complex query and lack of transactions or any atomicity in general for multi-document operations. For a while, Map/Reduce was a big point of contention. v4.0 is a major step forward, bringing multi-document transactions to the party. That being said, the performance hit still requires you to put some effort into your schema design, and denormalized data models are still your best bet. I've used it throughout the beta period and quickly upgraded two client projects to 4.0 when it released, and like 3.6, it's mostly made life a bit easier when dealing with it. Having ACID guarantees on top of the performance of the document-model when the data is structured with its strengths in mind makes MongoDB very appealing when it fits the use case. 

MongoDB has improved a great deal, but its draw is still the same as its always been. Flexibility, horizontal scaling, and braindead simple sharding make it an easy choice for people who just want to stand up their app, and it doesn't hurt that it's super beginner friendly to anyone who knows JS. The downside to the flexibility, especially for beginners, is that it requires you to take the steps to ensure you're taking care of validators, structuring data in a way that won't snowball into a nightmare as the volume of data grows, and whatnot.

So, no, MongoDB isn't shitty nor has it really ever been when it fits the use case. It's in a pretty dope place right now in general. It just isn't going blow away Postgres if the design favors RDBs. Redis is still going to be the golden child for storing sessions or simple caching layers. If you do your research and end up choosing MongoDB, it'll likely do the job just fine. If you don't and cripple it by ignoring its strengths and weaknesses, it'll likely be a shitty experience.
",1533496279.0
kvnpmrtn11,Redis ftw ,1533281901.0
,"Hi Dude. This is definitely a job for node. Have a look at the express package. Amazing module, also search for express proxy server. There are hundreds of examples.

As for running it in the same file. Yeah sure, but if your server is going ro mucho busy, i say split the local saving and the express router into different scripts and let those scripts talk to each other... I can do samples now... On my phone but if youre intrested i can send you the code... You know as reference. ",1533268560.0
DaJuukes,"If i understand correctly, the users don't have the authentication for the foreign API. Then what you're describing is perfect.

Client -> Your Server -> Other API -> Your server -> response to client 

You don't need to send a second http request or anything, just send the result of the other API as your response to the client request.",1533268646.0
grantrules,"> If the above is possible and is indeed a concise and sensible approach, can the remote API handling and server creation all occur in the same Node file?

Yes it's possible and pretty simple to do. You'll want to use something like express to serve the requests, and something like node-fetch or axios to make a request to whatever api you're trying to use.

Oversimplified, it'd be something like

    app.get('/api', (req, res) => { fetch('http://api.com/api').then(res => res.json()).then(json => res.send(json)) })",1533268753.0
kevinkace,"Looks like the other comments are pointing you on the tight track; one additional term is REST, the of API which Express can implement, and your React app can communicate with.",1533275025.0
kingbin,"On average, how many users are you expecting to use your site?

If you're expecting a lot of traffic, I would suggest a microservice type architecture. Node doesn't support multithreading.

I have designed responsive systems with .net front ends that take a request and push jobs onto a queue. A farm of node services in the background work the queue and push the results back to the listening process that made the original request. A little more complicated but it's extremely responsive and can scale really well with the workload. Just a thought.",1533303280.0
Max_Stern,"Very nice, thank you for this.  
I created something similar (although much less powerful) for my project but now it seems that I can just use your library. ",1533374477.0
nothingduploading,dafuq are data transformers?,1533260307.0
cgijoe_jhuckaby,"My favorite solution to this problem is to use a [queue](https://caolan.github.io/async/docs.html#queue) from the fabulous [async](https://caolan.github.io/async/) npm module.  It solves the problem nicely because you can set a maximum concurrent limit, and then push jobs onto the queue.",1533270235.0
mansfall,"So... a couple things.

1. You're using async/await inside a promise.  Huh?  Just... dump all that and make your function async, and remove the whole ""new Promise"" syntax.  Then just await all the promises there-in.
2. It seems that your two query selectors are effectively just digging into the same table cell.  Can you not just, return an array of the table cells, then properly build out your objects from there?

Here is an example of what I mean by that.  It removes the unnecessary ""promise"".  Breaks up your function to smaller pieces to make it more manageable. Uses a bit cleaner operations, such as ""map"", to instead return a new array of your objects.  Removes the redundant try/catch.  No point in using try catch if you're only going to rethrow and do nothing else.  Just let it error and bubble to the callee.

FYI, this likely will not work as I don't know 100% what that `querySelectorAll` will return.  But, it is meant to give you an idea what to do.  Just query the cell, then do a single loop and build your object array from there.  Hopefully that helps!

    const getSearch = async () => {
      const browser = await puppeteer.launch();
      const page = await browser.newPage();
      await page.goto(""https://camelcamelcamel.com/search?sq=hp+spectre+laptop"");
      await page.click('#qcCmpButtons > button');
      let urls = await getUrls();
      browser.close();
      return urls;
    }
    
    const getUrls = async () => {
    
      let urls = await page.evaluate(() => {
        let products = document.querySelectorAll('#products_list > table:nth-child(1) > tbody > tr:nth-child(-n+10) > td'); //just get the entire cell...
    
        let results = products.map((cell) => { // use map... returns new array and doesn't mutate an existing
    
          // the following might not work and would need to debug it... 
          // but essentially just dig into the table cell in one loop, getting all pieces of info, rather than two loops
          return {
            productTitle: cell.productInfo.productTitle.innerHTML,
            url: cell.productInfo.productTitle.getAttribute('href'),
            imageURL: cell.productImage.getAttribute('src')
          }
        });
        return results;  // You could also just return products.map(...) instead too
      })
    
      return urls;
    }
    
    getSearch().then(console.log).catch(console.error);",1533272023.0
,"Okay so I might be missing the point here, but nodejs streams do not do any conversions of sorts when handeling read/write, so if the purpose is to keep the structures as in the binary file to send it somewhere else, then thats the way to go. You can also pipe a stream to a process that does conversions if you need it and pipe it to your endpoint. Like middleware. ",1533276978.0
BLOZ_UP,https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays,1533254971.0
angusog7x,You might be able to use protobuf - there are several node modules.  Here’s one: https://www.npmjs.com/package/protobufjs,1533267197.0
mrskitch,"https://github.com/joelgriffith/browserless has been a project of mine for almost a year, and it has an online debugger with remove viewer, a service layer (limit concurrency, queue and more) plus a few REST endpoints so you can run puppeteer code regardless of your tech-stack.

Very cool to see more projects popping up with this!",1533248181.0
winsomelosemore,Built a similar image for my puppeteer purposes a couple of weeks ago. Not quite as elegant as this one. Will have to give it a try and see how it compares.,1533261166.0
dreadpiratewombat,"Out of curiosity, what are most people using this kind of setup for? I can think of a few use cases but I suspect I'm missing a bunch.",1533264238.0
Move_Zig,Change `console.log()` to `response.send()`.,1533241141.0
virtulis,I'm not sure `test` counts as `urlencoded`. Maybe try `raw` instead?,1533246545.0
itonastick,"Have you tried JSON.stringify?  Logging to a standard console (as opposed to a web console) has limitations of displaying objects.  If  you want to write out the entire contents of the object then you should wrap with with JSON.stringify().  e.g.  console.log(JSON.stringify(response, null, 2))",1533243623.0
grantrules,"Well you can, but what's the advantage of doing it that way? Why not just make them express routes? And why two routes for serving the same file?

Seems like adding complexity where it's not necessary.

    app.get('/', (req, res) => res.sendFile('index.html'));
    app.get('/home', (req, res) => res.redirect('/'));    ",1533246813.0
Charles_Stover,"I may be a bit off in my memory of how you instantiate express, but I believe something like this might work:

    http.createServer(function(req, res) {
      if (req.url === '/home' || req.url === '/') {
        res.writeHead(200, {'Content-Type': 'text/html'});
        fs.createReadStream(__dirname + '/views/index.html').pipe(res);
      }
      else {
        app(req, res);
      }
    });
",1533236200.0
rotharius,"Step back and read about about what every line does. It seems kind of silly to use express and http.createServer in the same application, as they fit the same purpose but express is a more useful abstraction over http.

In express, `listen` boots the app. Before booting, you need to setup handlers and middlewares for routes (i.e. `get`, `post`, `use`).",1533251093.0
teja42,"You can do it like this : 

`let app = require(""express"")();`
  `let server = require(""http"").createServer(app);`
   `server.listen(3000);`

`app.get('/',(req,res)=>{`
 `   console.log(req.params);`
  `  res.sendStatus(200);`
`});`",1533259207.0
kryptkpr,"Redis is the DB you are looking for, its a fast in-memory KV store with persistence to disk by default.. and if for some reason you need to scale, it actually can. ",1533322698.0
zmasta94,"Have a look at LowDB. Uses Lodash to query against JSON objects stored in a .json file which you can use as a NoSQL database. 

I'm using it in the backend for a production mobile app and it's working great. ",1533237631.0
,"I use node-json-db. It handles the json file and when it saves, and gives you a nice query string structure when setting and retrieving data. ",1533277352.0
Charles_Stover,"Be sure that it supports ES5. Your local browser may support ES6 and its imports, but users downloading your package won't necessarily.

Make sure you have the correct dependencies. If you are using a dependency in the project that uses this package, this package won't throw any errors when it uses that dependency. But whenever it's added to a project that doesn't use it, errors. If it is only intended to be used with projects that support a particular dependency, add that particular one as a `peerDependency`.

Be sure to `.npmignore` any files that aren't needed in the module. If you are bundling and compressing your code, don't include the original uncompressed ES6 source.

I use Webpack and Babel to compress my npm packages into appropriate modules.

[Here](https://github.com/CharlesStover/react-object-prop/blob/master/webpack.config.js) is my Webpack config for a no dependency module.

[Here](https://github.com/CharlesStover/react-portfolio/blob/master/webpack.config.js) is my Webpack config for a multi-dependency module.

[Here](https://github.com/CharlesStover/fetch-action-creator/blob/master/tsconfig.json) is my TypeScript config for a module.

I would also recommend you auto-deploy with TravisCI. It's built into GitHub for free.

[Example .travis.yml for NPM deploment.](https://github.com/CharlesStover/mssql-query-builder/blob/master/.travis.yml) I push updates as branches. Branches get auto-tested in PRs to check for errors against the unit tests. Once Travis approves that the unit tests still pass, I merge. Once merged, Travis deploys to NPM.

Once it's deployed, check your package on bundlephobia. My packages worked fine, but bundlephobia kept mentioning I had dependency errors -- ended up being peerDependency errors. I wasn't linking them correctly in package.json, and would have never known since the packages worked fine in all my use cases.",1533227873.0
tzeentchy,"Get rid of unnecessary dependencies. Freeze dependencies and shrinkwrap the lot. Make sure pulling your package doesn't kick off an install going to GitHub or a non-npmjs.org website to fetch dependencies.

Any user will be eternally grateful. ",1533229966.0
broofa,"Publishing is pretty straight-forward. Maintaining is where most of the pitfalls are (imho).  You'll be surprised by what users care about, so responding to issues and rolling new releases are important disciplines. 

[SemVer](https://semver.org/) and `npm version` are your friends.  Get in the habit of using [Conventional Commits](https://conventionalcommits.org/), and a tool like [standard-version](https://github.com/conventional-changelog/standard-version) makes managing release versions and CHANGELOG files easier.

But don't get too stressed about it.  Publish your module, the rest of this stuff you can figure out later on an as-needed basis.",1533237152.0
Inomezi,"Auth using cookies bad idea because work with cookies easy and you can work with site with simple requests , i think use localStorage or smth will be better",1533228253.0
,[deleted],1533213007.0
Smok3dSalmon,The authors only criteria for deciding between http and rpc is which is faster? Interesting. ,1533224455.0
xaricx,And here I've been using RabbitMQ...,1533237965.0
mistralol,"
Let me know when your doing < 0.1ms / call then I will look at it more.",1533281477.0
asilluron,Comparing GRPC to HTTP/1.1 is like comparing a Model T to a VW Beetle. I really don't think that there was any question to start with. I've seen people using HTTP to communicate between services and it hurts me just to look at it.,1533224594.0
erulabs,"two things:

1. Why would you ever reply to a request with the body of the request? That seems like a no-op endpoint? Just... _dont_ reply with the body?

2. If you do need to provide back paths to user, you should use a scheme like `${username}/${file_uuid}` - ie: ensure that a user is logged in, and then in a database, create a table that associates files with users - then have the endpoint ensure that the logged in user matches the ${username}. Don't ship file paths around.

Hope that helps, but I think i might be missing something. You ask ""Is there a way that, even with a blob's address/GUID, the uploaded file cannot be recovered by any party (even the original user) other than the server itself"" - sure... just don't have an endpoint that ever replies with the file... Not entirely sure I understand the problem! ",1533168068.0
kgram,"I think you are misunderstanding a couple of things.

Firstly, blob-storage exists only internally in the browser. `blob:http://localhost:3000/d839502b-5343-4a3f-c993-e87a3ff20c9d` may look like `http://localhost:3000/d839502b-5343-4a3f-c993-e87a3ff20c9d`, but they mean very different things.

The first one asks the browser to internally look up the blob it has previously saved under the name `http://localhost:3000/d839502b-5343-4a3f-c993-e87a3ff20c9d`. This is just a name and doesn't really have anything to do with the URL, other than a script from `http://localhost:3000` creating the blob. It never contacts the server, and only that specific browser on that specific computer can open this file.

The second one makes a http-request to the server on `localhost:3000` for `/d839502b-5343-4a3f-c993-e87a3ff20c9d`. This would result in an error response if you haven't added something like `app.get('/:guid', (req, res) => { ... })` in your express server.

So even if you log out, it looks like you can still access the file, but that's only because it's still the same browser. If you need to make sure the file is not accessible anymore on logout, you need to call `URL.revokeObjectURL(url)` from a script running in the browser.

Secondly, express doesn't magically send files unless you ask it to. The `res.send( req.body )` example responds only with exactly what you send to it. If user A sends file 1 and user B sends file 2, both will get their own files back. The only way for user B to get file 1 is to send file 1. And if they already have the file, it doesn't really matter if you send it to them.

As others have said, there is no reason to make an endpoint like this, but, more crucially, there is no reason _not_ to make an endpoint like this. It does nothing and is thus not dangerous at all. ",1533191733.0
Charles_Stover,"Just because a file exists on a server doesn't mean it will be sent to the user if that path is accessed. You are probably thinking of how Apache or nginx distributes static files by just associating a domain with a directory and sending off any file in that directory. You, however, are using a NodeJS/ExpressJS application. The response from the server will only be what your application explicitly sends. Files cannot be accessed directly, unless you say so. Accessing `/path/to/real/file` will send that request to your NodeJS application, and the response from the server will be whatever your NodeJS application decides. It doesn't just shortcut the NodeJS application and just send the file anyway.

>If anyone connecting to the same server submits the link (including ""blob:"") into a browsers URL bar, they can download the file the original user uploaded. That would be a problem.

Can they? I have a feeling you are sending the blob URL from the client to the server, as opposed to the file/blob itself, which is useless to anyone other than the client.

Are you perhaps running your client and server both on the same machine?",1533224600.0
joesb,Why would you make your server responds to such GET request?,1533179728.0
,"No, your blobs are sandboxed in the browser environment per owner/client. However don't let strangers access access data (GET) through express. (Do you really need express and node.js for that?)",1533193948.0
bjpbakker,"When (part of) the fullname comes from user input and isn’t validated properly, one can change the target to any path they want (think about relative paths for example).

Whether it’s an actual security issue depends on what you do with the file. It does allow one to upload a virus and making it through the scanner phase for example.",1533152813.0
bjpbakker,"The “original filename” is just a value in the http multipart post. (Assuming you use a regular http upload form; otherwise it’s a parameter in your custom api call).

So yes the orignal part can be forced if you don’t validate it.",1533153725.0
scaleable,Doesnt the spawn “args” already escapes parameters in some way?,1533180148.0
ecares,"You can expand this to any number you want (<=128) using the UV\_THREADPOOL\_SIZE env variable

Source, libuv doc [http://docs.libuv.org/en/v1.x/threadpool.html](http://docs.libuv.org/en/v1.x/threadpool.html)",1533150719.0
idrism,How does this compare to Gatsby?,1533191489.0
brillout,"Reframe (https://github.com/reframejs/reframe) is an alternative full-stack framework that focuses on flexibility.

Fusion.js locks you in, Reframe doesn't.

(I'm Reframe's main author.)",1533216268.0
pconwell,"It's nothing like Trello - at all.

Still cool, but it's just a to-do list. Don't get me wrong, I like it, but not even kinda similar to Trello...",1533756104.0
onlyslavesobey,"I actually figured it out. I wrapped all functions in my authenticated routes within ""if (req.isAuthenticated()) { *(my functions)* }"".

Gonna leave this up incase anyone else has this question. If anyone sees any flaws in that solution I would love to be corrected.",1533145326.0
nodechance,Can you post code for a route where this is 'broken'?,1533145286.0
lnplum,"`express-session` already takes care of dealing with the cookie for you. The reason you need a cookie despite using redis is that you still need a way to pass the sessionID to and from the client. Redis stores the session *data* but the cookie stores the session *ID*.

Also `express-session` has options for using a signed cookie, I think, which prevents tampering by the user without knowing the server-side secret. Without it the sessionID will be stored in the cookie directly and the user could manipulate it to access any other session by going through every possible ID (or using a known one).",1533133702.0
kapv89,"Nest [https://nestjs.com/](https://nestjs.com/)

With TypeORM: [http://typeorm.io/](http://typeorm.io/)",1533128922.0
AWildWebDev,"I'm curious about your reasons for moving from PHP to JS / Node, this is outside your question but just genuinely wondering.",1533130713.0
BurritoBashr,"You're going to find out that Node still does not have a framework that does as much as Laravel. I've tried to go down this road, I've tried adonis, nest, and built my own but there is no out of the box solution that offers as much as Laravel does at the moment.",1533143879.0
nitin_23,The newer version of SailsJs is also good. ,1533131811.0
coolnat,"I’ve found that you won’t find a Node framework that is as mature as Laravel or has as large a community.

I tried to use Adonis for awhile, and while the docs appear to be great, there is much left unexplained and quite a few bugs that had me pulling hair at every turn. There is almost no community around it so you can’t find help online. I ended up switching back to Laravel for the project, yet used Nuxt to build the front end (which is actually pretty nice).

So I just caution you on switching your whole tech stack to Node just because you think it is more modern. By all means, start a new project on it and see if it works for you.",1533132331.0
betacar,FeathersJS.,1533143044.0
DirtyBirdNJ,"I don't know if it will do 100% out of the box what you want, but I really like the most recent version of Hapijs. You should check out www.hapipal.com

Rambling discussion on why I like hapi:

At my last job the senior devs decided we were going to replace our Laravel monolith with a new Hapijs REST API. This choice meant we additionally had to build two separate react front-ends to replace the two of the three distinct features of the monolith (B2C interface, admin backend).

We used Hapi <15 (honestly don't remember) and mongoose as an ORM.

Since then I did a project using Hapi v16 using Bookshelf and MariaDB. Currently developing a newer project with Hapi v17 to wrap my brain around the new async/await functionality that the authors of Hapi are going all in on... the hapipal project comes with a ""flavor"" that implements the Objection ORM, which I find to be a fine swap-in replacement for Bookshelf.

Using Hapi vs Laravel for me was easy once i figured out I could use vision/handlebars for tempting. I use HBS but use whatever you want. If you want to make strictly an API you can, or what I'm doing now for my smaller use cases is exposing endpoints for both end-users and http clients.

I'm still figuring out how to better organize my code (hapipal doesn't show this, or I haven't found it in their docs yet)... there's other rough edges I haven't figured out yet but theres always room for improvement and I'm hoping to get another job where I can use Hapi. The idea of going back to Laravel, Drupal, Wordpress or anything else now seems crazy.",1533134939.0
Naydien,"Highly recommend Hapi.  Simple framework, can do everything you need and is very simple to pick up.  Have built everything from small pocs to a big data research platform using it.  Have never been disappointed.

Don't let others here question your language and db choices.  Perfect is the enemy of good.  Node is fine both with and without Typescript. Mongoose is fine for 90% of use cases, and personally I find Mongo's query language, especially the aggregation/map reduce stuff to be great.  As for the other 10%, as someone who's there...by the time you get there you'll know enough to work around the problems.",1533151763.0
BLOZ_UP,What benefits does migrating to Nodejs give you?,1533132100.0
Gluaisrothar,"You will need to migrate to new patterns and architecture with Node which is a whole other ball game.

If you are going to change stacks, I would think about and evaluate the entire setup.

Separation of frontend and backend, frontend frameworks/libraries, backend can easily be microservices, which could be node, but also easily java, scala, python, ruby, rust etc.

Same goes for MongoDB, while it's a nice tech, there is major overhead in scaling it up, and after doing it, I don't think I'd use Mongo for anything that I would need to scale up or indeed anything mission critical.

There are better NoSQL/Json stores out there.",1533150600.0
anhnhoktvn,"Moleculer: [http://moleculer.services](http://moleculer.services) : Great for microservice.

Fastify: [https://fastify.io](https://fastify.io): Simple, fast, easy to write plugin.

Hapi: [https://hapijs.com/](https://hapijs.com/): Easiest way to be happy.",1533192672.0
svenvarkel,"SailsJS is pretty good, we have been using it for years now and it works for us well. We don't use the ORM extensively, but all other components and logic, code structure is good.",1533195533.0
jdarris,Check out [https://ration.io/](https://ration.io/) for an example of what the code looks like from a real-world(ish) app. Hope that helps! ,1533667106.0
Aesthetickz,You could just start with express.js and add libraries you need as you go instead of going with one big framework.,1533139276.0
binarytide,"my company uses parse js for all our back end needs, then utilize cloud code when we need aws to do heavy lifting. ",1533142800.0
maktouch,We did a similar move from Laravel 4.2. We use GraphQL. No more REST! ,1533152022.0
Irie81,https://quasar-framework.org,1533153262.0
bronlund,You should check out Golang before committing to JS on the backend. And Emberjs on the frontend maybe.,1533161801.0
,Why do you need an opinionated framework and how does express not fit your needs?,1533172999.0
ilja903,"Maybe you could take a look at [https://eggjs.org/](https://eggjs.org/) \- what puts me off, is Chinese literally everywhere. But looks like Sails, but only for Koa + quite a lot of Github stars. Sails as I believe has largest ecosystem, FeathersJS suits best for REST services. If you are experienced programmer you could always use plain Koa and throw a few modules in. ",1533190386.0
infernal_toast,"I personally recommend using rails 5 + webpacker + postgres.  That way you get to use NPM/webpack to manage your frontend building (es6) and you can use a mature framework , rails, to handle the backend logic and database formatting.  

",1533134912.0
illyrianHero,"If you used Laravel, then clearly go with AdonisJS, you will feel at home, if you have used Angular v2 and above, then go with NestJS",1533142271.0
snarkyturtle,"I found Sails to be too buggy and magicky, but there's a promising ""reimagining"" of it in [TrailsJS](https://trailsjs.io/).",1533130815.0
pushthepramalot,"When I moved from Laravel to nodejs I chose the loopback.io framework. While it isn’t Laravel, it is working well enough for me at this point. ",1533134811.0
infernal_toast,"I personally recommend using rails 5 + webpacker + postgres.  That way you get to use NPM/webpack to manage your frontend building (es6) and you can use a mature framework , rails, to handle the backend logic and database formatting.  

",1533134920.0
gamed7,"I personally suggest Adonis but I haven't tried Sails!
As you said I find the documentation on Adonis pretty nice but I don't have anything to compare it to since I only tried Adonis!

The community I have the impression that it's friendly and active and since the philosophy it's close to laravel I'd think it's a better choice",1533128799.0
seedlio,ADONIS.JS its based on Laravel,1533150565.0
dk01,Also check out Adonis https://adonisjs.com/,1533164104.0
cyberst0rm,Nuxtjs with vuejs,1533164226.0
petulant_snowflake,"Go and the Go standard library. NodeJS is going to have the same problems as PHP -- dependency hell, bad untyped code, object oriented over-design, and so forth.",1533157234.0
Charles_Stover,"Make something you actually have a use for. A common interview question is how did you solve a problem. It helps to have a problem that needs solving first.

Node is powerful. I'd make something that you need on your personal computer, like a file encrypter or data backup service. It doesn't have to execute on a web server. If you want it to, ask yourself what you want a web server to do for you.",1533127217.0
codeinprogress,"I usually start with an idea (or web app) which has been done before and try to make it better. 

I try to add my own flavor of design, UI or even work flow. In that process, sometimes I discover a new feature that the existing applications have missed or is badly done by them. ",1533121935.0
codearoni,"In my experience, holding down a job will inevitably slow down your growth in other languages or stacks. It's just the nature of the beast, there are only so many hours in a day.

You'll need to prove you can do node. Like you said, the easy answer is to build a node.js application. Get something functional on heroku and go from there. Look up videos on the node.js runtime and try to understand how V8 works on a high level. 

In the interim, keep applying. Maybe you'll get plucked out-of-the-blue by someone who really wants you. You never know.",1533100628.0
,[deleted],1533103047.0
Thommasc,Mirror whatever you did in PHP but with Node/ExpressJS. That's what I did and it went pretty well from Symfony to ExpressJS you feel like there's an equivalent in npm for each bundle.,1533109123.0
FalseWait7,"I've said this before and I'll say it again. When applying for a job and showing your app, it doesn't matter whether it's a large framework or a simple TODO list. What matters is your code, your approach at various problems, your justification of chosen solutions. 

If you are an experienced developer, they will more likely be looking for your general programming skills (like handling errors, code optimisation, readability, consequences in decisions etc) rather than checking whether you can follow the docs.

Just take some time, create an app or two using desired stack (Express and Mongo is a good choice) and show this on your interviews.",1533120945.0
cmpaul,"I made this exact transition in January this year. 

Agree with all the comments here. And while I don't have any resources worth directing you to, I will confirm your assumption that the transition is an easy one. Both interpreted scripting languages, there might be a slight advantage to using Node.js in that it's the same language across the front and back ends (you gotta use it anyway on the front, so one less language to deal with).

One big diff off the top of my head is that node.js uses a single-threaded event loop and an Express server (depending on how you architect your app) will share memory space between requests (whereas PHP is multi-threaded and each request gets it's own thread and memory space). The shared memory bit is helpful because you can do some app-level caching across requests that I believe you can't get in PHP without an external cache, like redis or memcache. 

",1533132392.0
whatisfailure,"You probably need to escape the quotations. 
What you have now resolves to
    `INSERT INTO user(first, last, email, password) VALUES (
    name,name,email@email,password);`

and you need   

    `INSERT INTO user(first,last,email,password) VALUES (
    ""name"", ""name"", ""email@email"", ""password"");` 
I believe",1533097013.0
r3jjs,"I'm not being a smart-ass here, but...

Look at the generated SQL and fix it.

Your error message *clearly* says it is an SQL error.  

There are only a couple of lines in that block of code generate your SQL... the rest has nothing to do with your problem.
",1533097136.0
myockey,"Presuming that you use Git, [submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules) would allow you to include a number of separate repos as subfolders of a primary repo. They're not the most convenient feature of git, but it does get you to a place where you can share automation tasks between each repo without bringing them into one.

An alternative would be to bring all of your projects under one repo  and use [lerna](https://github.com/lerna/lerna) to manage each project separately. It's the opposite paradigm of what you're asking for, but maybe it can serve a similar purpose.",1533077883.0
rekulaattori,Is this faster than nyc or what's the benefit?,1533066585.0
HydroNoah,heroku's what i would use,1533097272.0
xyryvgsxfd,r/https://digitalocean.com might be something for you.,1533067931.0
SkaterDad,"This looks like a great project.  The ease of upgrading your hashing algorithm is very appealing.

I'd never seen the [PHC format](https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md) for hashes until today.  Is there no security risk to including the algorithm parameters (like work factor) inside of the hashes?

The bcrypt example:

    const hash = await bcrypt.hash('password');
    // => $bcrypt$v=98$r=10$Fu+++1sHIGTodjyG4pF4Sw$QlOihTVOARhpV0EiWv4k10i5Pw5Hm0E

I get that this is what enables the easy upgrades, but has always assumed things like the ""rounds"" should be secret? I'm sure the folks behind the Password Hashing Competition are more qualified than myself to make those judgement calls, so I'm mostly curious as the rationale.
",1533052144.0
nospambert,Oh man a node conference??? Wish i were there,1533042426.0
cranberry19,This guy is an affiliate linker! Avoid!,1533199206.0
Deif,I keep seeing this argument and it's so weird to make this decision. You remove 1 line of code that gets fixed in the next version of express for a smaller ecosystem. That trade-off is crazy to me.,1533031650.0
mansfall,"Removing the try/catch and replacing with asyncwrapper just adds a nice layer of complexity and indirection.  Congrats... Now your colleagues will look at async wrapper and say ""wtf"" is going on here?  It's mostly a non issue to write try/catch... And further, it's so much easier to understand.  Writing fewer lines is not necessarily leaner code.

Plus editors these days already provide macro keys to automatically write try/catch for you.",1533058631.0
keosen,"Why not hapi?
I understand when someone choose express due to popularity and community size.",1533073079.0
nejcn001,"Should Koa be slower then Express? Most of the benchmarks out there seem to be faster, but i made a test myself.I've created 2 project with express-generator and koa-generator (v2). I've run both of them with pm2 and set NODE\_ENV=production.For benchmarking i called 5 times: autocannon -c 1000 -d 30 -m 'POST' -b '{""zahteva"":""podatek""}' [http://192.168.1.101:3000/test/klic;](http://192.168.1.101:3000/test/klic;)

Koa: [http://shrani.si/f/q/11Q/26UpkIEn/koa-bench.png](http://shrani.si/f/q/11Q/26UpkIEn/koa-bench.png)

Express: [http://shrani.si/f/34/12U/4gsnhKwU/express-bench.png](http://shrani.si/f/34/12U/4gsnhKwU/express-bench.png)

Crazy thing is its almost slower for 1000 requests per second, is this normal? Does Koa have any other production settings that i missed.",1533134004.0
kkogovsek,cool 😎 good luck 🍀 ,1533277761.0
GamesMint,Because your newpath is invalid. 'C:/Users/Your Name/' should be a valid directory on your system/server. It should refer to the directory where you want to save the file.,1533016666.0
vaikunth1991,"Directory should exist before uploading a file to it.   
This may help you  - [https://stackoverflow.com/questions/21194934/node-how-to-create-a-directory-if-doesnt-exist](https://stackoverflow.com/questions/21194934/node-how-to-create-a-directory-if-doesnt-exist)",1533020420.0
,"To get around this issue, give fs-extra a go. it has a fs.ensure method that creates a folder if it does not exist. Run this at the start of your script for all folders your script might use. That way, no problems like this will bother you again. ",1533033949.0
khanon,By using POST.,1533013603.0
JonnyBoy89,What do you mean? Where do you want to start? Sending the data from the front end? Creating an endpoint to send it to in node? Resolving that data once it arrives? Be more specific please. Are you using a framework like express? Do you have jquery or are you using an xmlhttpsrequest? More deets the better,1533017044.0
vaikunth1991,javascript post action or ajax,1533020460.0
teja42,Use `body-parser` module from npm,1533041037.0
nothingduploading,ajax.,1533013994.0
lord2800,Your particular OS doesn't need fsevents.,1533014531.0
geon,Not everyone. Postgres works great. And it is one of the better nosql datsbases if you really need that. ,1532992840.0
jkoudys,"I suggest you expand your social circles if everyone is saying that. Doc DBs are great, if what you need is a db for storing documents. If you need to describe relationships, then a relational db works better.",1532993504.0
smiles_low,forgot the question mark  😔,1532991427.0
esreveReverse,It depends entirely on your project and the type of data you are storing. If your data has relationships... Use a relational database. I made the switch to Postgres and haven't looked back.,1533007528.0
no_dice_grandma,"You don't. If your database is highly structured, use an sql database. ",1532995333.0
n0mat1c,Mongo is awesome but don’t fall into the trap of this is better than that. Use whatever suits what you are trying to build. I’ve used SQL in conjunction with NoSQL on an application. ,1533015773.0
ChronSyn,"You can structure your project around either, but each has very clear use cases. Let's use an example; You have users working on projects for clients.

No-SQL databases are ideal for documents, such as storing information about a list of users where you want everything to be self-contained. In the example scenario, each document could be clients with projects nested inside with users nested inside. This isn't ideal because you've got relations, and if you want to add a new user, or move between projects, you're going to have to query a lot more data. It would be ideal if you just needed to list projects, clients, or users independently, and the code you'll write is more of a fit with the language itself. It would also be ideal if this data is a snapshot that's not going to change, or if only the values within are going to change in such a way that there's no relation (such as a project description changing).

SQL databases are ideal for relational data, such as a list of users that have different projects they work on, where each project is for a different client. In the example scenario, you would have users, projects and clients separately, and then you'd write SQL (or use an ORM) to query using JOINS and WHERE. It can also be used to display each table independently. The code you will write, if SQL, will be nothing like the language you're coding in. Using an ORM will offer this option, but they are something else you need to learn (and the learning curve on some of them is quite steep).

There's other examples where each type will be advantageous over the other. Both SQL and No-SQL have their upsides and downsides, and you should definitely use the best tool for the job. Anyone that says one is better than the other is not sharing independent thought or is discussing a specific aspect of it.",1533039075.0
BaptisteViloin,"I guess that's called ""hype"". But be careful trends are not that good at solving problems (look at fashion shows, so trending, but doesn't solve the problem of getting dressed efficiently lol).",1533044285.0
errrzarrr,"You can use SQL/Relational with NodeJS – in fact, this'll be the case 85% of the time. But the most important thing is that you don't need to limit your in a This-OR-That dilemma when you might use BOTH.",1533062701.0
kwiwksh,"Because MongoDB markets itself heavily and is itself a company and product. Less cynically: traditional RDBMSs work fine. The initial appeal of MongoDB was unstructured data storage; however, inherently unstructured data is difficult to query, even in something like MongoDB. By structuring your data, you form relationships and data types which map easily to something like SQL databases. Its hard to say that something like MongoDB is more ""natural"" than a SQL database, but in lots of cases its more ubiquitous, more performant at scale and is more structured. 

I know recently MongoDB added constraints to the data, but that defeats some of the purpose of a generic document storage. In reality though, the choice between them depends on many different factors; most importantly of which is use case.",1533074585.0
OffBeannie,"NodeJS got popular around the same time when NoSQL is at peak hype. This leads to the so call MEAN stack, and many tutorials and courses were built around these stacks. There is also the popularity of Json as data type from rest API, which works nicely with nosql. That was one advantage nosql had back then until SQL database such as Postgres started to support Json. 

Another reason why you normally see nosql as examples in tutorial is because it is much easier to get started running the DB, create collections etc. ",1533113052.0
TrainedCodeMonkey,"Someone asked this question a couple of months back. If I recall correctly the general consensus was that noSql databases are a lot easier to teach to frontend devs because you don't need to truly understand relational data modeling, Sql Server costs a lot on an enterprise level, and noSql integrates with Node a little easier in my experience. In my year of experience I finally hit a noSql database in industry. The entire year up until this point was Sql Server. ",1532994941.0
vaikunth1991,"Mongodb is fast access than mysql , best suited for simple client facing applications and node has very good support for mongo. But downside is if you want a highly structured database with many relations, complex join queries etc use SQL.",1533020611.0
nfactorial_work,"You are not passing the function to call in the catch statement but, instead, invoking the function.

Your code should look more like:

    .catch(function() {
        retryDownload(callback);
    })",1532990056.0
jimlei,Team up with someone who thinks backend is fun and can't be bothered to do front end?,1532987744.0
Codefiendio,"I do this with all my projects. I start strong and then get bored or disinterested. It’s my whole life history of coding and I’ve been doing it for 24 years now. 

I think part of it is my adhd. I code literally all the time but hardly have any personal projects finished. Seems the only project i finish are the clients who pay me. 

I work full time as a developer and that is part of it. I think if i stop having fun, i get bored and just stop. I’m aware i do it and i can’t seem to break it. ",1532992420.0
rpmisms,"I'd love to work with you if it's a fun project. I need to learn more backend, and do well under pressure. PM me?",1532984810.0
nexusSigma,"Find a framework you find interesting or try learn something new. I got bored of working with express and sql at my day work, so my projects are now with koa and mongo, and that little change is enough to keep me interested. Might not be optimal, but for pet projects and learning, being interested is a lot more important than being perfect.",1532992613.0
BithTree,"I'm the same way but inverted. I'm a full-time teacher and I just ""finished"" my backend rest server. Now I am setting up react for the front-end, although I have code I can harvest from a prior app. The setup has taken several days and feels like it's dragging.",1533007450.0
,What is the project about? ,1532988082.0
rollickingrube,"Having multiple motivators to rotate between is good and necessary--passion for the technology and the art of coding; passion for the subject matter your app is related to; $$$.

Are you trying to go pro? Then you will want half a dozen complex, complete, fullstack apps in the portfolio. That's what took me from self-taught to a great web development job. Let that be a motivating factor for finishing your app. Until you have that shit up and running and publicly available online, you're not done yet and you have nothing to show for your work (unless you think potential employers will be that interested in poking around your github repos). Until you've confirmed that the app works on all the major browsers (mac & windows versions) you're not done yet, and you're missing out on learning opportunities.

Personally, I never program the back-end separately from the front-end, on my own projects or on the job. I write the fullstack CRUD code for whatever feature I'm working on at the time. I'm not sure what you can do with just the front-end code, unless you're satisfied with dummy data.",1532996670.0
intertubeluber,"Did you used to be a professional developer and are now a laborer? How did that happen?
",1532998609.0
DONT_FREAK_0UT,">any tips to regain interest?

Just one. When you become so bored that you can't keep going, keep going. If you can do that it will get easier.

P.S. The accomplishment will be worth it. And if that doesn't work, it wasn't worth it, so don't worry about it. Either way, enjoy the journey. Anything difficult is worth doing well. Happy coding.",1533017275.0
lulzmachine,Try out something new for backend? Like ruby on rails ,1533018578.0
kaen_,"Try to vividly envision what the end result will be once you have it working. What you're describing is a very common experience. The best way to overcome it is to focus on the result and not on the work, I've found. Imagine yourself clicking through the UI and seeing the results, the data being mutated (or whatever) by the backend processes you're implementing. A short pseudo-meditation in this manner helps to overcome this sort of programmer's block.",1533018972.0
ProNoob135,I've never finished a project because of this,1533019934.0
fvilers,"Try Firebase, it's a platform which allow to build web and mobile applications without server side programming language. You can store users data on its real-time database which sync data among users data in no time.",1533026540.0
dear_stranger,"Are you me? I always get my frontend up and running great but when it comes to the backend logic my brain goes kaput!

Recently though, I just made a major breakthrough with getting my backend for a tea encyclopedia running. The problem was that I had a lot of surface knowledge about node, express, apis, etc, but I didn’t really understand it. When I realized that was why I kept putting the backend off on my projects, I spent more time watching videos and gaining specific knowledge on the pieces that I needed to make my app work. Once I mastered one part, I celebrated the win and moved on to the next part. 

I think that was the most important part of my recent success. It’s important to recognize and celebrate the small wins. It’s what keeps you excited and what makes you want to keep going.  All those good endorphins man! Good luck!",1533026995.0
fullheap,Django Rest Framework is pretty nice for what you’re trying to do. Very fast to write a basic backend.,1533027239.0
Thommasc,"If you don't want to build a backend, try serverless.

You just setup a GraphQL lambda, some third party stuff like Auth0 and bye bye backend dev.

You can focus 90% on your angular or react app.

How would it look like ?

[https://github.com/thommas/](https://github.com/thommas/)

r/https://github.com/thommas/path-of-child",1533040036.0
phaedrus322,"If you really wanted to do it then there would be no hesitation. 

No  entrepreneur was ever too tired to get the job done.

If you want it, then make it happen. 

Don’t team up because you’re tired. Team up because they bring something to the table that benefits you both.

",1532991982.0
BithTree,"I think you're calling initialize too early. What works for me is declaring the strategies, passing each to passport.use(), then app.use(passport.initialize()).",1533007842.0
Charles_Stover,"You can use ES6 or TypeScript. It's just personal preference. Both are being transpiled to ES2015 using something like Babel and Webpack. You should notice a `scripts.build` command (or `script.prepublish` or `scripts.prepublishOnly`) in their `package.json` file that says something like `webpack --args` or `tsc --args`. This is what converts their ES6 or TypeScript into ES2015 -- the plain Jane JavaScript that you are used to. This occurs before it gets pushed to the NPMJS.org repository.

Modern Node servers may be fine with ES6 npm packages, but TypeScript is not innately supported and must be transpiled to ECMAScript before Node will run it.",1532980848.0
scaleable,"Like 99% of the time I use classes I could also have used closures for the exact same thing. In the end I usually just pick whichever I'm in the mood to use on that day.

You still can't rely on nominal typing **even on typescript -- is uses structural typing** (you will still check types by checking if X property exists for instance, not through `instanceof`). So you will never write class code like you did in java. Forget about that. Inheritance is also heavily discouraged, and seldomly used.

Reasons for choosing closures (revealing module pattern):

  - Scope nesting
  - Less boilerplate (no `this` everywhere)
  - Not worrying about `this` binding

Reasons for choosing classes:

  - Clean way to write interceptor pattern, automatically exposing a bunch of extension points you don't know if you are using;
  - Maybe a bit more performatic since functions are stored in prototypes? Who knows, with current engine optimizations...
  - Scope nesting can lead to confusing code.
  - Appears pretty in the debugger

NOT reasons for classes:

  - Enveloping every file with a `export default class`. A file is already a closure AND the javascript module unit. A class in JS is not a module unit, it is just a state container. A variable in a file is a singleton. Dont write 10 lines for a singleton you could write with 1.",1533003319.0
luke3br,"Don't see much for #1, so I'd suggest looking at [Feathers](https://github.com/feathersjs/feathers). 

Start a project using their CLI (`npm install -g @feathersjs/cli`), and you'll get some pretty ES6 boilerplate that uses classes for each service.",1533013600.0
kapv89,"You can take a look at my ORM, tabel: [https://github.com/fractaltech/tabel](https://github.com/fractaltech/tabel)",1533029884.0
broofa,"TS is (imho) not a great choice for opensource projects because it imposes additional requirements as far as the toolchain and build process, which act as a deterrent to developers interested in helping out with the project.  This is an issue with any sort of transpiled language, btw, not just TS.",1532985421.0
mrskitch,"I’m surprised at the amount of resentment towards TypeScript, or types in general. I’ve been a JavaScript developer for over 5 years and was dragged into TypeScript kicking and screaming by co-workers. After the initial hurdle I’ll never go back to plain JavaScript, full-stop.

The “pros” incredibly outweigh the initial friction in my mind:

-	Potential category of tests you don’t need to write (up to you).
-	Much faster to refactor or change method signatures.
-	Lots of tooling works better due to type inference (type-ahead, linting).
-	Compile-time failures vs runtime failures.
-	Incremental, once you have the build in place.
-	Don’t have to maintain Babel and its swathe of plugins.
-	Potential v8 optimizations that could happen.

There’s a great deal of large open-source projects that use it, and everyday I see more packages adding in type exports (D3, for instance just added them). Apollo, D3, and even puppeteer have type exports.

The cons that I can think of are fairly easy to nullify since you either have to maintain the program with tests or carry the context yourself:

-	Setup a build (which you’ll likely do with Babel anyways).
-	Hard to change interfaces/APIs and types. I’d argue it’s actually easier now.
-	Friction learning a new syntax. 
-	Small oddities like default exports don’t work the CommonJS way.

Anyways, take it for what it’s worth. This talk also does a good job of why it’ll make you a better developer: https://m.youtube.com/watch?v=V1po0BT7kac",1533008775.0
SparserLogic,"Personally I'm really not a fan of TS. I see it as training wheels for people new to the ecosystem and afraid to move from OOP to Functional programming that is a lot easier to manage and share.

Edit: I love all the downvotes on an opinion but only a single reply. The hivemind really likes TS.",1532985795.0
kottin,"Could you base it off the user's home directory?

Accessing like this...
```
const homedir = require('os').homedir();
```

That will give you an OS agnostic starting point.",1532972501.0
MarkPitman,"Have you tried `os.tmpdir()`?

[os.tmpdir docs](https://nodejs.org/api/os.html#os_os_tmpdir)",1532981251.0
bartman279,"Short answer, yes.

There is already an Axios middleware, https://github.com/svrcekmichal/redux-axios-middleware.

If that is overkill, writing your own is the simplest and the best way to gain direct knowledge.
edit: spelling",1532971520.0
zeehtech,Did you tried [fs.watch](https://fs.watch)? Sorry if you already tried it...,1532969643.0
djxfade,"If this project is targeting Linux, you could use one of the many node wrappers for the inotify interface. Inotify is a file system level mechanism for watching any changes to the file system, and is very efficient ",1532972457.0
nmwh917,Store a sha1 or sha256 finger print of the file and if it changes then someone wrote to the file ,1533011161.0
noelhx,I have had good success watching thousands of files in a folder very efficiently using [chokidar](https://github.com/paulmillr/chokidar),1534693077.0
Madd0g,"Neither. In production you should have JavaScript, not typescript",1532981668.0
TheHeretic,"If you implemented passport.js you can easily add in [passportSAML](https://github.com/bergie/passport-saml)

It also has auth providers for basic auth, JWT auth, been using all of the above at my current job without a hitch.",1532966166.0
MountainDewer,"The more common implementation is to allow the second connection but to kill the first one. This allows a user to login from their phone on the go and have the home desktop connection disconnect. 

If you block new connections, users can be stranded. 

A bonus to this would be that you don’t need to worry about locks or expire times. You simply announce to the cluster that User X just connected and any other User X sockets can send a “goodbye” message to the client. The client can be configured not to auto reconnect when it gets that goodbye message. ",1532973345.0
furious_heisenberg,"This is not a good article. An attacker does not need both the token *and* secret to abuse the application, the token alone is sufficient, which is why HTTPS is mandatory with JWT authentication. Also, all JWTs can be *decoded* without the secret (token structure: <base64 encoded header>.<base64 encoded claims>.<signature>), but they cannot be *verified* without the secret (meaning the signature cannot be calculated). That makes this example (which includes the user’s password in the claims) particularly terrible. All claims should be treated as public information, meaning that anyone who gets a hold of a token (even a long expired token) can decode and view all of the claims without having the secret.",1532962632.0
zeehtech,"Well explained! A really nice post.

Thank you!",1532962333.0
joelangeway,"If you have the response body as a string, and the data has unique substrings around it, you can use a regular expression.

    const m = body.match(/balance: (\d+\.\d), unlocked balance: (\d+\.\d)/i);
    const balance = parseFloat(m[1]);
    const unlockedBalance = parseFloat(m[2]);

Regular expressions are just JavaScript, not express: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",1532952179.0
JakeGore,Why don't you use JSON? It would be much easier,1532950135.0
Cyberuben,"Prevent the database from being altered (so take your site / service offline for a bit), then get rid of all the foreign keys. Your foreign keys must match be of the same type (quite sure UUID and string won't work). Then change all the columns, in your base table and the tables that reference it, but cast the value to string. Then reapply all foreign keys. That should work?",1532943935.0
tswaters,"If I were to take a guess, I would wager that the `cron` module has a bug with timezones that don't use DST.  It might make sense to not provide a time zone, or just use `UTC` instead of `Atlantic/Reykjavik`

Looking through some of their code and I don't quite understand the need for a `_findDST` function that adds seconds to a date until it's less than the provided date.... but it's in there.

Not even sure how that even works -- moment constructor returns an object.... maybe it's relying on `toString` comparisons?  so strange.

edit - doesn't seem there's a way with their api to do that.  I'm now guessing you using `Atlantic/Reykjavik` was an attempt to get it to use utc.  

edit2 - time zone is optional, maybe don't provide it.  also not sure about calling `start` and passing `true` as auto-start.  I'd do one or the other.",1532933509.0
lord2800,What _specifically_ is happening?,1532915589.0
jimwards17,"Are you running this on localhost or remote sever ? Look at the `Access-Control-Allow-Origin` http header, you might need to set it to an appropriate value like your domain or * if that is your intent.",1532923186.0
Charles_Stover,"The test itself (`it`) should `return` a Promise, which gets resolved by your asynchronous callback.

    it('should do something eventually', () => {
      return new Promise((resolve, reject) => {
        myAsyncFunction((result) => {
          expect(result).to.equal(2);
          resolve();
        });
      });
    });

The return is important, because it's the only way for your test runner to know that it is waiting for a test, as opposed to simply not encountering any errors during tests that already ran -- which is what happens when your synchronous tests simply return nothing and throw nothing. Returning a Promise means the test is not over, despite the test function having ended, and the Promise's result (resolve vs throw/reject) determines if the test passed or not.",1532960483.0
NoInkling,"It's cool, but it doesn't really have anything to do with Node.",1532912998.0
living150,"Web audio Api is in serious need of a rewrite. Using it for anything that relies on precise timing is impossible as it does best guess synchronization so mixing will never be ms perfect. Events have no way to be listened for, the api has one way communication. On top of all this you will absolutely have to write a wrapper to make it useable as it can be tediously verbose. ",1532895415.0
AlexanderHorl,"Didn’t know this existed, it’s awesome!",1532884833.0
wizardsbaker,"For a good time, use tone.js.  Simplifies a lot.",1532925056.0
eugeneware,"Agreed. While a good article, the article doesn’t mention how to use it in node.js. There are a few limited ports of the API in node.js last time I looked into it. I was excited by the post, then disappointed it was client-side related. Post should probably be removed by the moderators. Better posted in /r/javascript",1532919602.0
psayre23,"Web Audio API is pretty great for most applications, but it was intentionally limited to just stereo output. That lack of multi-channel support makes it impossible to do something as simple as a speaker check app on the web. There is an API for spacial sound, but it is converted to stereo output. So you can never say, ‘play this buffer on the back right speaker.’ Now that Dolby Atmos is entering the home market, I’m hoping spec writers will come back to this API and improve the support for more than two speakers.",1532928075.0
IrishWilly,Seems like a good way to do something for the upcoming Music Game Jam - https://itch.io/jam/musicgamejam2018,1532886997.0
GoldFire33,"If you don't want to deal with all of the complexities of the Web Audio API, [howler.js](https://howlerjs.com) provides a wrapper around it to easily use a lot of the most common features. It also falls back to HTML5 Audio for older browsers, though that isn't as big of a concern for most projects these days.",1533087147.0
fullheap,Why would a **node** developer need to learn **web** audio? This is not /r/JavaScript.,1532950298.0
ItalyPaleAle,"[RabbitMQ](https://www.rabbitmq.com/) is likely the most popular one. It's backed by Pivotal and it's ""enterprise-grade"". I found it relatively simple to use with Node.js, as soon as you understand the main concepts.",1532888736.0
uzill,"Depends on your use case:

[RabbitMQ](https://www.rabbitmq.com/) for normal use cases (which requires fairly low throughput) like communications between micro-services.

[Kafka](https://kafka.apache.org/) if you happen to have fire hose of events (Iot sensors, web activity tracking, etc).",1532892566.0
Parasin,"I typically use [ZeroMQ](https://www.npmjs.com/package/zmq). It’s super easy to use and implement, even into an exisiting application. If you are looking for something persistent, [socket.io](https://www.npmjs.com/package/socket.io) can also be used, which does have more overhead.",1532884354.0
SomeRandomBuddy,Usually use something redis-backed for high throughput,1532885154.0
BehindTheMath,"If you know the structure of the URL, you can use parameters instead. ",1532877750.0
lironshmuel11,You already have: https://github.com/arb/celebrate,1532874101.0
warpedgeoid,"First, there is no such thing as “enterprise level,” that’s just Oracle marketing FUD. Trust me, enterprises larger than the one for whom you’re currently working, are already using NodeJS in production applications. I’ve encountered these same types of developers in the past and it almost always boils down to their subconscious desire to protect their own positions; they know Java and thus don’t want to be forced to learn something different. The same goes for die-hard NodeJS devs.

Make the decision based on the technical merits of each framework. NodeJS is fine in the right hands. I’ve always felt (though can’t prove) that much of the NodeJS stigma comes from poor quality code generated by frontend-to-backend converts who are learning on the job. With an experienced team, NodeJS is fine. As is Golang, etc. ",1532876913.0
davidmdm,"For the security concern, I do not think that there is anything inherent about nodejs that is less secure than in any other languages. I think it's more a case of nodejs being a little younger and that a lot of front end devs (because of js) started working on the backend (the hype for full stack devs) and as such for a while the community wasn't very security oriented. Although that has been changing. 

Point being there is nothing unsafe about the runtime over others like the jvm. There will always be 0 day exploits for any ecosystem. Security is more in your architecture and not in the tech.

As for performance, it is true that nodejs is not well suited to CPU intensive work, not because it isn't fast but because you will end up blocking the event loop. Nodejs is primarily a tool for io tasks. 
So persisting data to disk seems right up its alley. Especially since the bottleneck for performance for file system operations is almost always the hard drive and not the language. 

Im not saying nodejs has to be your final choice but your coworkers reasons are clearly based on bias against JavaScript. 

Tell him your decision is c++ cause you can't trust the jvm for this job. 

This guy sounds like a snob. ",1532871132.0
broofa,"Probably not what you want, but another important consideration here is that introducing node requires the IT department to roll out a whole new deployment toolchain alongside what they already have for Java/C++.  This is non-trivial work that will, of course, break in new/interesting ways.",1532876057.0
Dronar,"Even though I agree that Node could be very well suited for the task and that your developer's reasoning is quite biased there is a case to be made for keeping the technical stack small.

The performance gain for adding a new language/framework might not outweigh the extra costs from keeping a fragmented system up to date. ",1532877815.0
assoteric,"his distaste for the language (“JavaScript is designed for the browser, not the server”)  
 \- that's just an opinion.

to security considerations (“an ex coworker of his who does security consultancy told him to stay away from NodeJS”)

 \- like everyone else has said, i think if you go overboard with npm packages you could get a into a bind.  but usually i only get a package if i can't build it myself in clear way.

to “using this tech may make us look bad if the wrong people on the client’s IT find out”, given it’s not “enterprise like Java or .NET”  
\-  ehhh  node is pretty mainstream now.  


i like  node, but i also like to keep things simple.  i feel if you can build the project in one language you should do it in one language.  it's harder for people  to do context switches between modules and it's not hard  to make  java and c# do async.  just my two cents.  (obviously if you can do the whole project in node... do it in node)",1532918654.0
ttlnow,"You could still use Node with Typescript?  That way you’ll have a language that’s pretty close to Java or C# in capabilities... so you’ll address part of the concerns.  The beauty of Typescript is that it is still JavaScript - you can use optional types / advanced language ability as you’re ready for it.

So that may help with the language concerns.",1532872224.0
gudatcomputers,"Apart from the Node vs .NET side of things....how large are these files you’re tasked with uploading? I always get scared when we talk about large files in the hundreds of MB sense. Makes me question the approach of uploading via browser. 

Working at a large Fortune 100 company I’ve seen people have some similar reactions to Node but we’ve been deploying production workloads with Node for a few years and as long as we deploy it when the task is suited, it’s been a champ. Currently working on a platform that’s part Node and part .NET core. ",1532878069.0
50653," > his distaste for the language (“JavaScript is designed for the browser, not the server”)

This is a dumb non-issue. Maybe you could say that the original Javascript was ""designed for the browser."" But in the decades since then, the ES committee has added lots of language improvements to make it a good general-purpose language. ES6/ES7 has a lot of good decisions.

And like someone else mentioned, you can add Typescript and get a really powerful combination. I've used Java and I prefer Typescript. I could rant for a while about why TS is better than Java but the short version is that Java's type system sucks. I haven't used .NET but I hear the language is better.

> to security considerations

I think there might be some validity to security concerns. Like there was the [eslint-scope](https://nodesource.com/blog/a-high-level-post-mortem-of-the-eslint-scope-security-incident/) incident recently. Of course no one can guarantee 100% security when using any public package repo. But NPM does tend to be a little more volatile and drama-filled than the others.

So I can't tell you that NPM is 100% safe, but I use it, and lots of huge companies with smart people use it. I think it's fine if you follow security best practices (like putting services in a container where they have limited capabilities), and use NPM v6 which has built-in checking for vulnerabilities.

In terms of whether to pick Node, the questions I would ask are: what languages does your team already know? Are those working effectively? Do you have team members that would be excited to switch? If your team loves Java/.NET, and they're effective with it, and they're not excited to switch, then that's a pretty good reason to not switch. You gotta think about a few years from now, when you won't be on the project, and someone else will own this code. Of course you're the lead and you know the situation more, so if you want to decide that the team just needs to switch, you can do that. :)",1532878633.0
username_is_taken43,"I wouldn't fight with other people unless their solution is bad. It's not about best technology only, but also how easy you can find a hire with needed skillset. Someone who knows multiple technologies. What's the cost of maintaining few technology stacks, etc.

I was looking for remote job recently and it is quite hard to find a remote Java or pure JavaScript role.

However there are many remote jobs with must have Ruby in addition to other skills. I guess the reason is there not many people who know Ruby well. I know people who used Scala to develop their app, but hiring people is a nightmare for them unless they pay premium salary. There is a shortage of Scala developers, also many people who know Java refuse investing their time learning Scala. 

So this decision to use Scala instead of Java makes cost of product development 30-40% more expensive. It's ok when you need just 3-4 people, but what when you start growing and need 30 developers? 

That said technology selection decision can be attempted to made rationally. Create a table with pros and cons for each technology. Consider development time, cost, deployment, monitoring, code reuse, testing, performance testing, scaling, debugging. You can discuss this with other people. It should not be about what's cool today.

",1532878980.0
assoteric,When you say “COM”  do mean component object model ( the windows interprocess communication layer) ? ,1532896343.0
1-800-BICYCLE,"The company I work for is older and is currently having this identity crisis. Java has been the golden child there for decades, but it's showing its age and requires experienced Java devs to correctly optimize for how to meet the throughput needs to today's companies. The benefit of Node.js is that even naive implementations can be performant enough for an MVP.

The other thing that even senior management has noticed is that developer productivity with Node.js is *much* higher than with Java. I think that's reflective of the fact that developers are writing much more glue code and plumbing now than full applications, so the overhead of an initial Java codebase is much higher than with Node.js. 

There is, however, a vocal faction of my company that derides Node.js as ""not enterprise"". They point to the fact that deployment has no standard (no jar files or war files to drop into Glassfish and be done), the security concerns of npm, lack of standard library, etc.

Those problems shouldn't be ignored, but they turn a blind eye to the fact that Node.js is being used by enterprises globally (Netflix, Microsoft, Walmart, etc.).

For you, it seems like Node.js with Yarn instead of NPM and TypeScript instead of vanilla JS would be the most ""middle-ground"" approach. I've personally never used TypeScript in production (only Flow), but I've talked to quite a few people who love it and have de-facto learned how to read it while evaluating libraries. It's similar enough to C# to make your .NET/Java devs happy, and you'll still get the IO wins from Node.

Edit: As for why Yarn, I find it to be more reliable than NPM, and even its oldest versions freeze dependencies, so you'll never run into an issue where an older NPM on a server doesn't read from a package-lock.json file.",1532872708.0
Entheist,"I guess the security chap was worried about the whole npm package thing. There's loads of blogs about protecting against compromised packages now but that's always been an issue with nuget on .NET too anyways.

I'd suggest you use what your team has the most experience with though.",1532872733.0
shriek,"I agree with others that in terms of security I think he's more concerned about dependencies with other modules and npm itself (given the history of it but has gotten better now) however, you can/should ask him to prove his case on why he thinks it's a security risk instead of just agreeing what his friend told him.
  
Also, like u/davidmdm mentioned performance wise the thing you're doing is right up node's alley unless you're actually doing any heavy computation after you uploaded large files in node.

And overall more and more ""enterprise"" companies are using nodejs. This dogma of if we're enterprise we *have* to use .NET or Java needs to go. I think you're already doing a good job of benchmarking and evaluating instead of making judgment based on bias. Evaluate, collect data and make the final decision, node or not.",1532875533.0
kingNothing42,"For your use case, NodeJS actually sound great, due to its natural handling of non-blocking IO (both thru the network and disk). [https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/](https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/)

For security, most people's qualms are in the npm ecosystem. You can take a few steps:

* Don't use NPM directly, get a proxy/cache (Jfrog Artifactory is one)
* Ensure you have continuous scanning of any dependencies that come from NPM
* Keep dependencies to a minimum through review process, best practice, etc.

Using your passthrough will help you have some amount of control in the event that a hostile takeover of an npm package happens or mitigate events where evil code sneaks its way in through open source channels.

Scanning will help you identify evil versions of packages right away.  


  
To make the java/c++/c# folks happy, just start with a Typescript template and they'll grumble along just fine. Highly recommend using the VSCode editor with typescript. It is built for handling node+ts.",1532885480.0
jineshshah36,"As a good alternative, elixir would probably do this job well. Or even go. However, I don’t see why node would be inherently less secure & many “enterprise” level companies are using node.",1532889634.0
ecares,"Language => this show that this coworker is just trapped in 10 years ago consideration, that's not an asset to your team since that's the kind of people who are more likely to use the tools they like more than the tool needed for a task. With these people, you will eventually look bad in front of your client.

Security => install sqreen

Look bad => this is probably the most dishonest thing I have read in a while. Go tell Uber, Paypal, NASA, IBM, Wallmart and all other major companies using node in production that they are jokes, or better, make this person say it, you will soon find that this coworker is not worth your attention. Joke on him, he is looking bad in front of the whole world now",1532890737.0
damoisbatman,Your version of node doesn't support Async/await,1532854827.0
numbersanddreams,Async await syntax is not supported in node 6. You'll need to upgrade node or use a transpiler.,1532855312.0
ottaky3,"There's nothing wrong with the code. Works fine when I run it ..

    > reddit: the front page of the internet
    Pub's Hilarious Sign For Its Neighbours:https://www.reddit.com/r/funny/comments/92rzj9/pubs_hilarious_sign_for_its_neighbours/
    Switzerland The moon rises behind the Saentis, the highest mountain of the Alpstein region.:https://www.reddit.com/r/space/comments/92svjv/switzerland_the_moon_rises_behind_the_saentis_the/
    Julius Caesar Realizes Everyone Has a Knife Except Him (44 BC):https://www.reddit.com/r/fakehistoryporn/comments/92rl58/julius_caesar_realizes_everyone_has_a_knife/

Can you provide some more details? Copy and paste the output that you get?
",1532854767.0
shad0proxy,how are you passing the session id?,1532852539.0
Jondoen88,"Check that you are indeed getting a Session cookie for your user. (Chrome or Firefox have great Dev tools so leverage them)  


What it seems like is that you haven't added Session data on login. 

    router.post(""/login"", passport.authenticate(""local"", {
        successRedirect: ""/"",
        failureRedirect: ""/login""
    }), (req, res) => {
        console.log(`User has logged in ${JSON.stringify(req.user,null,2)}`
        req.session.user_id = req.user.id; //for instance.
        return; //old habit of mine, that even on void functions to at least use return without returning anything to clear out the Stack.
    });

Also, cookie-session is fine if you're not going to have the serialization/deserialization and it is a smaller footprint in the grand scheme of things, but express-session is more in line with how Passport expects cookies to be handled and thus why the need for serialization/deserialization.",1532854166.0
hibernatingpanda,"Are you getting this issue in production / staging?

If it is - you may have to make sure that cookie domain and path are set so that it is sent back to your server.",1532873664.0
alex-ald,I am the author of this npm package. I’d love to get some feedback.,1532840428.0
teja42,"1. Ask for the password and send it via POST
2. If valid, use jwt to sign it, set an expiration and send it as a  cookie.
3. When a user visits a page that requires authentication check the jwt cookie and do accordingly.

The documentation on jwt is really good. https://jwt.io",1532834659.0
PerfectOrphan31,"I would suggest saving the password in your environment variables (`process.env.VARIABLE`), and probably save it hashed for security sake, bcryptjs is good for this. Then when someone makes a post request with the password verify it (`bcrypt.compare()`). If valid allow access, if not, deny. For local environment variables you can use the dotenv package and create a .env file",1532836935.0
ignisiss,Probably what youre looking for: https://www.npmjs.com/package/express-basic-auth,1532809089.0
Pavlic,The simplest is http basic auth (https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) as other suggested. It can be implemented in different ways.,1532852178.0
c-michael,"Thanks for all the response, will check them out!",1532867414.0
jrk_sd,"Normally you would use Nginx and setup basic auth for this. Getting Nginx setup in front of your page is a bit of a task and not really necessary for something super simple. The express package ignisiss posted should work. 

[https://www.digitalocean.com/community/tutorials/how-to-set-up-basic-http-authentication-with-nginx-on-ubuntu-14-04](https://www.digitalocean.com/community/tutorials/how-to-set-up-basic-http-authentication-with-nginx-on-ubuntu-14-04)",1532833001.0
hallcyon11,Render an error view.,1532811567.0
scaleable,"It's called ""content negotiation"", each route ""implicitly"" has its way of responding. Is it HTML or is it JSON?

You may take one of the two paths:

* Assume your route can respond in both formats and analyze the request headers in order to determine which format the client wants (Accept headers, etc); That must be applied both to the successful and faily responses.
*  Assume each route is supposed to respond only 1 type of response. You could also group all your ""json"" routes into an express router and associate a JSON-only error handler to that router; On the same way, group your ""html"" routes into another router and add an HTML-only error handler there.",1532824861.0
ichbin1berliner,"You could use try/catch to handle to stop multer from crashing your application. It would look like this:

    app.post('/upload', req, res, next) {
        try {
            /* multer call here */
        } catch (e) {
            // your e object will most likely contain more information which you'll want to take into consideration
            next(e);
        }
    }

Next you would want to place your error handling middleware last in your route/middleware tree, like this:

    app.use(req, res, next, error) {
        if (error) {
            /* error message could be manipulated some more */
            res.status(400).json({
                error: e.msg
            });
        } else next();
    }

Once you get a non 200 HTTP status code you can redirect your user within the browser quite easily by settint `window.location`.",1532810898.0
akujinhikari,"It always worries me when people say they are beginners and then talk about signed-in users. I hope what you’re building isn’t intended to become something with a high volume of users, because ensuring your app is secure should be of the utmost importance. And most people that don’t know how to handle errors don’t know how to secure their app.",1532812652.0
jotishere,"Dude you got to use stack overflow for this kind of stuff
",1532839604.0
Aggressive_Income,Why?,1532852387.0
dennismphil,I just used this last week in search of a terminal recording program. Sheer awesomeness.  ,1532820472.0
virtulis,"That's pretty cool buuut I have to mention:

 * https://asciinema.org/
 * https://github.com/asciinema/asciicast2gif
",1532841418.0
Nezteb,"After seeing this I recalled another terminal gif creator, so I went and found it: https://github.com/chjj/ttystudio

It's unfortunate that ttystudio is no longer maintained, but I'm glad to see that terminalizer is living on and actively maintained!",1532844306.0
SomeRandomBuddy,"Nvm (node version manager). Seriously, don’t listen to the other guy. Brew is cool but nvm is even easier and supports all versions. Downloading new versions/switching between versions is a breeze",1532764583.0
thepotatochronicles,"Homebrew, 10 times out of 10. You can install LTS by `brew install node@8` or you can just `brew install node` for the latest (10.7).

Easy to install, manage, and lots of options (e.g. no npm!), and if you're installing other stuff from homebrew that depends on node, you'll need to install it this way anyway",1532762079.0
scaleable,"I usually just installed from the website and took care to never install node AGAIN on homebrew or nvm. Works fine, stick to node 8 and chill.",1532771296.0
raistlinthewiz,use homebrew,1532781381.0
OzziePeck,Go to the website and download the installer.... geez ,1532781604.0
vir123,Have a handler that stacks events into an array. Have a setInterval function that will process events in that stack every 3 seconds.,1532760482.0
Tatsuya-,"Have a counter incremented each time the 1s event happens. If the counter hits 3 reset it and process your 3s event. 

Unless the 3s event is triggered by some other means like a user clicking rapidly, then you can put a simple time object denoting the last time it was run. If 3s haven’t passed then don’t run the next invocation ",1532762302.0
brocococonut,"I think you should be giving us a bit more context about what type of event is occurring, whether the contents of the event need to be processed, etc.",1532767310.0
kubelke,Are you going to dig in node_modules? /s,1532778162.0
techmighty,is that a ? ,1532815938.0
weasel5053,Ashi Krishnan http://ashi.io,1532796165.0
nikaone,no plaid shirt and jeans？ ( ☉_☉)≡☞o────★°,1532789673.0
andrelandgraf,"I like the way she wraps everything up, very calming. Also, I highly recommend the talk from Ryan Dahl, the inventor of node. ",1532785687.0
RoboSparrow,that's python,1532782737.0
mohelgamal,"There are tutorials, I don’t think that is a wide enough topic for a book ",1532719598.0
enricksiii,Sequelize works for me. ,1532737829.0
Rouby1311,Why do you ask opposing questions in your title and description? This just makes all yes/no answers ambiguous,1532773064.0
mistralol,"
Yes not all computer clocks are created equally and since node can run on multiple platforms....",1532733492.0
kwiwksh,"No. Even if it could, it should not be depended on.

It can be shown through a simple script:

```
let a = process.hrtime();
let b = process.hrtime();  
while(a[0] !== b[0] || a[1] !== b[1]) {
    a = process.hrtime();
    b = process.hrtime();  
}
console.log(""a: "", a);
console.log(""b: "", b);
```

```
$ node ./hrtime.js
a:  [ 950739, 875669559 ]
b:  [ 950739, 875669559 ]
```",1532718323.0
raistlinthewiz,use environment variables,1532781584.0
kyle787,"When you say the method stops working, are you talking about the client not being able to load them? Can you post some code?  

My initial reaction is the you are loading it relative to the route rather then absolutely from the domain root path, but I am not sure based on the info given. ",1532714581.0
NewFuturist,"I like this, although I think that the BCrypt one is a little disingenuous. BCrypt is better, because it is harder to crack (have to spend CPU time each guess) but it is not impossible to crack (just more expensive) and that expense will decrease exponentially.",1532695760.0
cosinezero,A string literal is a hardcoded string. That is not user input. ,1532698474.0
erulabs,"ah, `https://github.com/nodesecurity/eslint-plugin-security` is neat - I have ""eval"" set as a forbidden function, but I like the idea of forbidding dynamic requires. To be fair, this is a bit more ""best practices for NodeJS HTTP -APIs-"".",1532714054.0
poothebear0,"It worth mentioning that by default, in a non-dockerized env node does NOT run as root",1532696429.0
bees_dolphin24,"I keep hesring all these different views on environment values, I use them, but I don't know how secure they are.... But i never push them in the changes,

  


Also if i am using config files that are encrypted, where am I hiding the encryption key, I mean it need some storage, if it is in a DB then the credentials of the DB need to be stored without encryption...... I think

Idk just confused.....",1532715162.0
Console-DOT-N00b,">by explicitly setting when a process should crash



So like my code does already?",1532736194.0
tselatyjr,!remind,1532736317.0
sshaw_,"> The work here is part of our Node.js best practices GitHub repository 

This link 404s",1532795345.0
asilluron,"A lot of ""don'ts"" but not a lot of easy ways to be secure. If you're not an expert in security or well-versed in a certain technology stack, I think there's major steps you can take to be secure without memorizing 23 ""don'ts"". 

1. Choose a framework (and sub-frameworks)
2. Deploy on proven prebuilt infrastructure
3. Use a template for the project
4. Sanitize all input and output (steps 1-3 will likely handle this, but it's easier to just remember this instead of a bunch of niche points.",1532741981.0
CoffeeKisser,"[TL;DR](https://www.reddit.com/r/node/comments/91kgte/uws_has_been_deprecated/e2yuaoo/) if you're catching up:

> NPM wouldn't allow the UWS author to delete previous versions of his package that had bugs and security issues to prevent devs from installing those versions so he got angry and released an empty package, which NPM rolled back by setting the latest to point to the previous [non-empty] release. After that, he deprecated the package.
",1532697533.0
brtt3000,">  breaking projects depending on uws.

Not it doesn't. Why say this? 

Pushing a major version doesn't really break anything unless you use really shitty version specs.",1532682565.0
mailto_devnull,"What a dick.

He feels like he's owed rights to have his package namespace treated the way he wants it to be treated, but that's not how npm works.

It's free to publish, and part of your ""payment"" is giving up the rights to administer the package as you see fit, after all, it's npm's hosting.",1532698574.0
sarunint,"Oh, god...",1532678797.0
powerOfAsshole,bastard,1532678027.0
MooseSquad,lmfao I love this guy,1532713109.0
khoan,so how to unbroken uws?,1534835608.0
xemasiv,lmfao,1532681646.0
spacewalking,"This should work 

    app.get('/', (request, response) => {
        const filePath = '/pathToFile/file.mp3';
        const stat = fs.statSync(filePath);

        response.writeHead(200, {
          'Content-Type': 'audio/mpeg',
          'Content-Length': stat.size
        });

        const readStream = fs.createReadStream(filePath);
        readStream.pipe(response)
    }",1532671411.0
boxxa,Look at your headers. You can pass information to the client that lets them know how big the file is and steam it ,1532663445.0
teja42,"HTML
<audio src=""streamaudio/filename.mp3""></audio>

Node ( express )

`app.get(""/streamaudio/:filename"",(req,res)=>{`
`   let {filename} = req.params;`
`   let file = fs.createReadStream(""path/to/file"");`
`   res.pipe(file);`
`});`

Have a different route for audio files",1532675277.0
Shaper_pmp,Are you trying to play the file through an HTML Audio element or just throwing the file at the user's browser for it to save to disk and then point their media player at?,1532695718.0
robinjoseph08,"The reason the `pre` isn't returning what you think it should return is because while you're creating a function when `model` equals `'Person'`, it's actually bound to the variable `model`, which is the same variable for every loop (it's just reassigning the value, not creating a new variable). So as your `for` loop continues to execute and changes the value of `model`, the `model` that is bound to all of the `pre` functions that you created is changing along with it.

You can actually easily fix this by changing `for (var model in models) {` to `for (let model in models) {` (assuming you're using Node v4+). By changing it from `var` to `let`, you change it from _function-level scoping_ to _block-level scoping_. Scoping in JS is pretty confusing, so I'd recommend you read up on it ([here's](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md) a good guide to it, and the part relevant to this issue is [here](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md#let). But as a small summary, you're creating a brand new `model` variable on every iteration of the loop instead of reusing the same one over and over again. So when you create your function over `model` in `pre`, it's closing over a variable that will always be the value it was first assigned.

Hope that helps!",1532665085.0
FennNaten,"You have basically 2 ways to go about that. The first one is to use `pre`, following /u/robinjoseph08 's explanation to ensure passing proper object. Advantage is that it doesn't require much change compared to your previous version. Small drawback is that your handler now depends on correct `pre` setup.  
  
The second one, which is also the most generic and common way to pass down data to the handlers, is to not directly expose your handlers from your `db` module, but handler factories instead.  
  
    //sample db module
    
    //this is the function that does the work
    const handlerImplementation = (request, h, model) => {
    
        model.doStuff();
        return `did something with ${model.name}`;
    
    }

    //this function gets the model as parameter and returns the real handler
    const createHandler = model => {
        const handler = (request, h) => handlerImplementation(request, h, model);
        return handler;
    }
    
    exports.createHandler = createHandler;
    
    //sample route config
    
    for (var model in models) {
    
       routes.push({
           method: 'POST',
           path: '/_api/Merge/'+model,
           options: {
               handler: db.createHandler(model),
               description: 'Add/Update Object ' + model,
               tags: ['api'],
               validate: {
                   payload: models[model].schema()
               }
           }
       })
    }",1532695002.0
Linkzerg,After starting your app with pm2 you should be  able to access your app http://yourip:port if that is the case you need to reverse proxy your domain to ip:port . I don't know how you can do that with apache. But if you install nginx all you need to do is change a file. I can link you a tutorial if you re  interested. ,1532642256.0
lord2800,"Apache doesn't start a nodejs server script. The script needs to be running in the background, and Apache needs to reverse proxy to it.",1532633936.0
nodechance,Are you aware of what you don't know?,1532633783.0
WebDevLikeNoOther,Maybe post the relevant code???,1532633735.0
geirha,My guess would be that the data contains CRs (\r). A CR causes the terminal to move the cursor to the start of the current line. Filter it through JSON.stringify to see if that is the case.,1532633837.0
SonamuGames,"    var net = require('net');
    const port = 8080;
    var players = 0;
    
    net.createServer(function(socket){
    
        // Player connects (Works)
        players++;
        console.log('Player connected! %s players online', players);
    
        // Player disconnects (Works)
        socket.on('end', function(){
            players--;
            console.log('Player disconnected. %s players online', players);
        });
    
        // Server recieves data
        socket.on('data', function(data){
            console.log('Recieved data: ' + data.toString());
            // Prints ' ecieved data: (data)' to the terminal
        });
    }).listen(port);
    
    // (Works)
    console.log('Server running!');",1532634386.0
lord2800,Yes. There are two ways: \`--json\` or \`--parseable\`.,1532628665.0
Djjmdjjm,MrT - i see your quite active on Reddit - it would be good to see more updates on the Mobius Network Reddit page for prospective investors..,1533019497.0
moranjavascriptworks,I thought this entire series was really great.,1532612886.0
ClojureWorks,Great stuff. Now to just go back and refresh my memory on parts 1 - 5. ,1532612067.0
broofa,"Article would benefit from a brief summary of where SSE fits in the ecosystem of client-server communication options, especially as to [how SSE relates to websockets](https://stackoverflow.com/questions/5195452/websockets-vs-server-sent-events-eventsource).  tl;dr ...

* Uni-directional (server -> client only)
* Not supported on IE or Edge (but polyfills available)
* UTF8 only (no binary)
* Subject to per-domain connection limits",1532608415.0
cyphrrr,Doesn't npm already have private packages?,1532636427.0
mariotacke,What about Sinopia? [https://github.com/rlidwka/sinopia](https://github.com/rlidwka/sinopia) it's been out for a very long time.,1532613859.0
beall49,"Personally, I think npm is popular because of node, I don’t think node is popular because of npm.  That’s just me though. ",1532570622.0
herjin,Im of the impression that the community would welcome competition to NPM with open arms given NPM's current reputation and its closed source-ness,1532579579.0
elr0nd_hubbard,"ITT: people deeply confused about `npm` the CLI tool and `npm` the closed-source registry. The former is a convenient tool with a number of competitors driving innovation, while the latter is (IMO) a critically-vulnerable lynchpin of the JavaScript world that needs replacing and/or open-sourcing.",1532614136.0
TwiNighty,"I know I switched from php to node due to the vastness of the npm registry, but nowadays I use pnpm for cli.",1532583324.0
thepotatochronicles,"While I agree that node is popular because of the stupid amounts of library written for it, I wouldn't be so sure it's because of npm...",1532576191.0
MayorMonty,"Now forgive my ignorance, but why does NPM need to host anything? If I were to design the registry, it seems like the most logical decision would be to associate a package with some sort of public git repo (and if needed, include SVN or mercurial or whatever) and have the client download and install that package from the repository.

I could understand about immutability concerns, but could that be solved by associating each version with a commit?

",1532615120.0
betinhojamaica,Node.js is not a language ,1532611378.0
OzziePeck,"Oh hey, racist douchebag. 

EDIT: don’t remember the whole Isaac thing with /r/node? ",1532589199.0
chesterjosiah,I would bet npm's growth is more so caused by the growth of react on the front end rather than node.,1532581903.0
naptownrich,Haven't used it personally but CASL seems to come up a lot. https://stalniy.github.io/casl/,1532555518.0
endjynn,I like access-control. [https://www.npmjs.com/package/accesscontrol](https://www.npmjs.com/package/accesscontrol),1532571681.0
Shaper_pmp,"join the tables in your SQL query and de-duplicate in JS to pull out the structure you want?

    select movies.movie_id, movies.name, movie_country.country
    from movies left join movies_country on (movies.movie_id=movies_country.movie_id)

My SQL is a little rusty, but IIRC that should get you a table that looks something like

movie_id | name | country
-------- | ---- | -------
1234 | Hereditary | Canada
1234 | Hereditary | United States
1234 | Hereditary | Australia
1235 | Rosemary's Baby | Canada

Then you can iterate through the table, creating the top-level object (movie_id, name) if it doesn't exist, or simply appending the current row's country to the existing array if it does.

Again IIRC a simple left join like this should be significantly faster than a subquery.

----

**Edit:** Also, split your movies_country table into a proper `countries` (country_id, name) and a `movies_country` (movie_id, country_id) joining table. Unnecessarily denormalised data in an RDBMS makes Edgar F. Codd cry.",1532563924.0
LavoP,"It's because in your forEach loop each iteration starts an asynchronous operation, which can't guarantee will execute in synchronous order. Basically it will go into the loop, run Insert\_Machine, and continue on to the next iteration, without waiting for Insert\_Machine to resolve. So while the loop is iterating, there are all these background processes happening and Node doesn't know that it needs to wait for anything.

As others have mentioned, you can use async/await to make this work.

I'm not sure why you're using q instead of the built in Promises but I rewrote the functions for you.

`// return a promise so you can await itfunction Insert_Machine(msg, callback) {var result = [];var connection = new Connection(machine_config);return new Promise(function(resolve, reject) {connection.on(""connect"", function(err) {var request = new Request( // set up request structure""INSERT INTO dbo.Data_new (pp_id, d_No, d_Note, d_Data, d_seq, d_machine, d_DateTime) OUTPUT INSERTED.Id VALUES (@pp_id, @d_No, @d_Note, @d_Data, 0, @d_machine, @d_DateTime);"",function(err, rowCount) {if (err) {reject(err); // print error on console if anything happens} else {console.log(rowCount + "" rows inserted to Machine_Data: "" + msg); // confirm the insert}resolve(result); // resolve promise});request.on(""row"", function(columns) {result.push(columns);});request.addParameter(""pp_id"", TYPES.NVarChar, msg[0]);request.addParameter(""d_No"", TYPES.NVarChar, msg[1]);request.addParameter(""d_Note"", TYPES.NVarChar, msg[2]);request.addParameter(""d_Data"", TYPES.NVarChar, msg[3]);request.addParameter(""d_machine"", TYPES.NVarChar, msg[4]);request.addParameter(""d_DateTime"", TYPES.NVarChar, msg[5]);// Execute SQL statementconnection.execSql(request);});});}async function parse_message(data, m_id, type) {//console.log('Message received = ' + data);var msg = data.toString(""utf8""); // Convert from object class, split CRsvar strings = msg.split(""\r\n""); // split multi-line dataconsole.log(""Strings: "" + strings);for (const element of strings) {var payload = element.split(""///""); // split by separatorif (payload.length == 4) {// If array is properly formedpayload[3] = payload[3].trim();if (payload[3].includes(""N"")) {payload[3] = payload[3].slice(1, payload[3].length);}payload[4] = m_id; // Send machine IDpayload[5] = dt.getDateTime();// await the promise so thatif (type == ""Machine"") {await Insert_Machine(payload);} else if (type == ""Pallet"") {await Insert_Pallet(payload);} else {console.log(""Type didn't come through. Where am I supposed to put this?"");}}}}`

Basically you need to make Insert\_Machine return a Promise (which I think you did, but I changed it to use the built-in Promises), and then the parse\_message function needs to be declared as async, that way you can use the await keyword to wait for a function that returns a Promise. This way, the loop will not continue until the Promise is resolved.

I didn't test this code, but if you need any more help, feel free to reply/DM.

EDIT: Reddit jacked my formatting up. Here's a Gist link with much better formatting: [https://gist.github.com/rhlsthrm/a9ac955d7298783b09404b94abcd0c42](https://gist.github.com/rhlsthrm/a9ac955d7298783b09404b94abcd0c42)",1532650744.0
estacks,"This is what the async and await operators are for, look them up mate.",1532564137.0
estacks,"You can use await before any promise call to make the execution wait for its callback to be done, async will make any function into a promise. ",1532568552.0
Neitsch1,"I'm storing the JWT as a session cookie with httpOnly: true and sameSite: Lax. On top of that my CSP is very restrictive.
CSP will prevent XSS if set up correctly, since only requests to trusted origins is allowed.
SameSite will prevent CSRF.
Those two combined together will give you pretty solid security for your JWT.",1532549568.0
carb0n13,"Your question doesn’t make sense.  JWTs are signed pieces of data. Authentication is the act of identifying a user. Authorization is a related but different topic to determine what an authenticated user can see or do.

Also, JWTs are often misused in the node.js community as session storage. Don’t make that mistake.  Here is an article explaining why you should not use JWTs for session storage:

http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/",1532568477.0
mmcnl,"JWT is hardly Fort Knox. A JWT contains a lot of sensitive information that anyone who obtains the token can access. You can also brute force it locally. If you want to go Fort Knox, use a random token (`require('crypto').randomBytes(20).toString('hex')`) and handle your authentication logic server-side. ",1532554504.0
,[deleted],1532553660.0
scaleable,"You should rather ask: Do I want my user state on the client or on the server? Regardless of which you choose, you can work your way to enhance security.

One inherent advantage of JWTs is that you make your application a bit more stateless, may help if you are writing something in a ""JAMSTACK""y architecture.",1532550346.0
cemremengu,2FA probably independent of the environment,1532548361.0
bjpbakker,"Like always it pretty much depends on your use case. JWTs are fine but cookie based session still exist too.

The most important piece of advice I’d like to give you is to _review_ the source code of (especially) the security libraries you want to choose. From personal experience when I reviewed a bunch a year ago I can tell that a lot are completely broken - also some popular ones.",1532548486.0
firemouth55,"I use a local passport strategy, then store a JWT in an encrypted cookie. 100% of my API is locked down with user permissions that are stored inside the JWT. If the permission doesn’t exist, the client just gets a 403 status code. ",1532561955.0
core_dumpd,"Have a look at [keycloak](https://www.keycloak.org/about.html).

You can get some pretty decent control over the [lifespan of the tokens](https://www.keycloak.org/docs/latest/server_admin/index.html#_timeouts) with it, and it's supported commercially through the RedHat SSO branded version. Depending on your users and reqs it may be more reasonably priced than something like Auth0 as well. LDAP integration, for instance, comes out of the box with Keycloak - and for our user base Auth0 would be roughly 4* the cost.",1532562213.0
AnthongRedbeard,"whatever you do, start with 2FA support
",1532570649.0
broofa,"\[I'm not super well-versed in node Streams, but this seemed like a good excuse to dive a bit deeper.  My apologies for any mistakes or bad assumptions contained herein.\]

So, I'm not sure why exactly your process is dying, but you're trying to write a 12 terabyte response on each request (5MB x 300K x 8 writes)... so, yeah, not exactly a big surprise, that.  Granted, it's just 2.4M copies of the same 5M Buffer but even assuming Node is being really smart about not making *any* copies of the data anywhere (big assumption, that) just containing the references to the buffer would require a 2.4M item array. :-/  I'll let someone else dive into the internals of what's going on there for a more detailed analysis of your crash.

Oh, also, you're never releasing control back to the event loop while you do that write, so  your ""6 simultaneous calls"" are probably being serviced sequentially.

With that stuff out of the way, I found [https://nodejs.org/en/docs/guides/backpressuring-in-streams/](https://nodejs.org/en/docs/guides/backpressuring-in-streams/) to be pretty good reading.  Specifically this bit:

>In any scenario where the data buffer has exceeded the highWaterMark or the write queue is currently busy, .write() will return false  
>  
>When a false value is returned, the backpressure system kicks in. It will pause the incoming Readable stream from sending any data and wait until the consumer is ready again. Once the data buffer is emptied, a .drain() event will be emitted and resume the incoming data flow.

So, re-jiggering your code a bit, here's what I came up with:

    const http = require('http')
    const port = 3000
    
    const requestHandler = (request, response) => {
      const a = response.write('Hello Node.js Server!')
      console.log('High water mark: ', response.socket.writableHighWaterMark)
      const b = Buffer.alloc(5000000);
    
      let nWrites = 0;
    
      // Write one chunk of data
      function writeStuff() {
        // Stop once all stuff is written
        if (nWrites >= 300000 * 8) { // 300000 x 8 write() calls from OP's original code
          response.end();
          return;
        }
    
        // write() returns false to indicate backpressure
        // https://nodejs.org/en/docs/guides/backpressuring-in-streams/
        const ok = response.write(b);
        nWrites++;
    
        if (ok) {
          // No backpressure = continue writing
          process.nextTick(writeStuff);
        } else {
          // Backpressure = wait until `drain` event tells us it's okay to resume
          console.log('Backpressured @ ', nWrites);
          response.socket.once('drain', writeStuff);
        };
      }
    
      // Start writing
      writeStuff();
    }
    
    const server = http.createServer(requestHandler)
    server.listen(port, (err) => {
      if (err) {
        return console.log('something bad happened', err)
      }
      console.log(`server is listening on ${port}`)
    })

Tested this by running `curl http://localhost:3000` inside of 6 shells.  The ""Backpressured @ ..."" logs showed all 6 requests being serviced simultaneously so... yay!

One thing that's worth noting here is that because the 5MB Buffer is larger than Node's 16KB highwater mark for streams,  every `write()` call results in backpressure, which is interesting but also a bit boring.  For more interesting behavior, try changing the buffer size to 500 (rarely triggers backpressure) or 5000 (intermittent backpressure).

Looking at the heap size (Chrome web inspector attached to node process), the baseline heap size (app launched, but no requests made) is 5MB.  In my version the code, the heap size is pretty stable at about 40MB.  In your version of the code... well,the web inspector craps out trying to build the [dominator tree](https://developer.mozilla.org/en-US/docs/Tools/Memory/Dominators_view#Dominators_Tree_panel) so... so I dunno.

One last note: if you log the rate at which the two versions of this app call write(), you'll see your version is significantly faster (by, like, a 1000x) which makes sense.  It's just hammering away with no regard for the actual throughput capacity of the data pipeline. However, if you look at the rate at which clients (browser or curl) are actually pulling data, you'll see it's about the same for both (\~200MB/sec on my laptop), indicating that the backpressure is working as intended, triggering `response.write()`'s at a rate consistent with the rate at which the client can actually consume the data.  Pretty cool!

This was a fun diversion, thanks!

\[Edit: Regarding cork() and uncork(), I think those are less about handling back-pressure and more about allowing callers to manage how/when write()s actually push data into the underlying network layer.\]",1532562002.0
merb42,Thank you for sharing!,1532550038.0
quizasquizas,"These should be posted by an Automoderator.

Of all the subreddits, r/node should have a bot helping out.",1532591485.0
SparserLogic,"Well, good.",1532537825.0
MentallyRetire,"Firebase also rolled out Node 8 support in their libs yesterday, I noticed.",1532553642.0
mydevskills,"Great, that's a great news.",1532588159.0
Sipike,You can also use Node.js on Google App Engine standard enironment too! ,1532712958.0
nwowned,AWS has supported this for a while - as mentioned in the article - with Lambda functions. Still remarkable it took so much time to catch up.,1532552870.0
fritter_away,"Just because you can do something, doesn't mean you should. I use a node module with C code, and I always have to spend extra time to get it work on new platforms.

OK. It's a fraction of a second faster. But I only use the module once when the user logs in. So I would gladly trade for a slower all node module.",1532477932.0
defunkt1721,Has science gone too far??,1532527925.0
EarlMarshal,Looks like a interesting idea. I will take a look at it later,1532495085.0
WWWVVWVV,wow  webassembly in node,1532495107.0
vshymanskyy,Also added support for Windows. Should work on MacOS as well,1532527406.0
tristan957,It's not even pure c++. It's some franken language,1532490963.0
mindofbeholder,"Unfortunately they've still got the downloadable files related to the courses locked.

Not so bad I suppose as you still get to watch the training material.",1532483566.0
lonecrisis,How are LinkedIn courses compared to Udemy?,1532619096.0
Charles_Stover,"The code you gave should simply output `RunTimeline(""test4"", ""test4"", 100.0, 50.0, 1, 1, 1)` to the console.",1532470784.0
VIM_GT_EMACS,"I've briefly exchanged messages with the UWS guy a while back in some github issues. While I appreciate UWS the dude is a dickhead and has no concept of soft skills like, you know, politely talking to people. 


He's yet another dickhead dev that thinks that talking like Linus does should be the rule of thumb. 
",1532462581.0
joequin,"tldr, he doesn't believe that artifactories should have immutable releases, which is stupid.

Long version, npm wouldn't allow him to delete previous versions of his package that had bugs and security issues so he got angry and released an empty package, which npm *did* remove. After that, he deprecated the package. ",1532465437.0
AndroidL,"Published an empty module for a package with 500k weekly downloads, what a cunt",1532466567.0
broofa,Author explains/rants about it here: [https://gitlab.com/uNetworking/uWebSockets/issues/11](https://gitlab.com/uNetworking/uWebSockets/issues/11),1532461473.0
,[deleted],1532467207.0
Console-DOT-N00b,Disappointing for some I'm sure but getting away from this dev might be for the best.... ,1532490275.0
sshaw_,So much drama in the LBC. ,1532477909.0
victorqueirozg,This is a completely nasty and unacceptable behavior. There's no valid reason to break projects like this. This attitude is childish and this guy does not look like a professional individual.,1533824707.0
batmansmk,"While I understand the personality of the maintainer is rough, he has a point: there are problems with NPM: security, stability, ToC, speed, dev experience, company interest vs community, aggressive behavior towards some members of the community. 
",1532484627.0
MooseSquad,"This story is awesome. Basically sticking it to the man. I wonder if NPM will comply...

PS I was petty when I first started doing open source. Its bad when you are the reason why a repo adds a Code of Conduct. Most programmers are petty. Give the guy a break",1532712838.0
aaronkim234,"The author still has a valid point. It is a bit ridiculous that you cannot retroactively modify or publish over existing versions, even if they have glaring issues. I view library versions the same way I view commits in a repo: every version should compile, work, and not have significant bugs, the same way you should be able to reset to an arbitrary commit in a project and expect everything to compile and work, but just have some missing functionality compared to HEAD. npm does not let you do that: if you accidentally publish a version that can't even export files properly, npm's response is basically ""fuck you"" (I have contacted support before to republish a broken version).

This is especially problematic when companies have internal npm registries that act as a controlled mirror. I have to go through a series of steps to get an updated version of a package approved by security and then uploaded to our registry. In a deeply nested tree of dependencies, there's no way I'll be able to notice a security patch in a dependency 5 levels down and manually request for it to be whitelisted in our registry. It's much more sensible to just fix the broken version.",1532525865.0
khoan,so how to get uws?,1534834911.0
,[deleted],1532457393.0
this_is_debatable,"Issue was related to https://github.com/soyuka/pidusage/issues/72#issuecomment-407572581. Should be fixed now, try rebuilding with latest pm2 version. ",1532474441.0
Silentspy,Did you try again? 3.0.2 got released,1532537890.0
merb42,"Thanks for bringing this up, I would have been chasing my tail for hours when I updated earlier.",1532550744.0
SkaterDad,"Can you be more specific about the use case?

If it's an object that is created within a route handler, for example, and does not get referenced elsewhere, I'd be fine with mutating it, and I would suspect it's way faster.

If it's a global, or passed in context, or something similar, I'd probably stick with copying if the other places referencing it need to stay independent.",1532457956.0
rotharius,"I'd say whatever you do, run some benchmarks against a version of the app in a controlled environment.

You could also look at the depth of copying / smart diffing -- somehow.",1532462543.0
beall49,"This is making me think; I do this below all the time, I've never had an issue, but I'm wondering if maybe I've just been lucky and haven't ran into simultaneous requests?  I do this because I have to build really large payloads for elastic search queries, so I default the shape of the object and some of the properties to make it cleaner. 

This should be fine right?


    function getFoo(){
        const foo = {
            bar:1
        }
        return foo;
    }

    const foo = getFoo();
    const foo2 = getFoo();
    foo.bar = 2;
    // prints bar=1, bar=2
    console.log(JSON.stringify(foo2), JSON.stringify(foo));



",1532485730.0
geon,"The example code is not a deep copy, but a shallow cooy. You only create new objects for the parts you mutate. Which is good. ",1532501408.0
error_404__not_found,"It really depends on the use case.

This question should be closed as too broad.",1532520934.0
sikian,Consider using Immutable.js if you don't like mutability :),1532460277.0
FarishKash,Bcrypt implementation?,1532460770.0
frenchcooc,"That’s what you’re looking for? If so, what’s your budget?",1532457643.0
xyryvgsxfd,/r/node :thinking:,1532454981.0
Ace_Emerald,"We can't really give you a time estimate on your own project, that depends on how big your codebase is and how the client is architected (how is the data currently fetched, stored, accessed, etc). I will say that sockets are definitely more efficient than long polling, and I feel they are also a better abstraction fit.",1532449065.0
broofa,">Is this a good idea?

Yes.

>How long do you think this would take to complete?

Two weeks ^(...give or take a couple months)",1532460415.0
digitthedog,"Maybe somebody more in the know can add to this observation, but I don't think you can make the simple assumption that sockets scale better than HTTP.  They do in some ways as a result of persistent connections, but introduce scalability complications in another sense because connections are tied to a single server.  Depends how you're doing things now, and that's really something you need to trust your lead developer on, unless you want to gather more information from him and come back to reddit.  If you find yourself doing that, perhaps it's time to hire someone you have greater confidence in.",1532460308.0
Eric_S,"It's a good idea in my opinion.  Another alternative would be Server Sent Events, which is simpler and unidirectional, though it doesn't sound like you need to send events.",1532454506.0
RobertGM,"It's definitely a better idea, every browser supports sockets and you can know for sure when sockets close (i.e., user closes browser window) instead of using a heartbeat signal (eww). I don't know how long it'll take, depends on how much code you've already written. To get started, visit https://socket.io/ , the gold standard in sockets for node.js.",1532457748.0
mistralol,"
| Is this a good idea? How long do you think this would take to complete?

Other that having the information of ""we are growing"". We know absolutely nothing about you application what so ever. Do you really expect a proper answer out of this?


",1532462945.0
LavoP,"How do sockets work in an ephemeral, serverless environment? Would you need a queue/Firebase or something to support that?",1532465254.0
JamyDev,"Really depends on what you're long polling and what you're planning on pushing down the socket. Depending on the situation, your polling requests can be cached by your edge provider, this is not possible with websockets.

Additionally, if you're using something like Socket.io, you're going to have to keep some state for the socket connections, this might also be quite difficult to scale.",1532467984.0
xemasiv,"It's helpful, guaranteed. Yet the follow up question is among all other things you can solve in the 'scale' problem, is this the particular one that ranks on top of the list?",1532474195.0
08148692,"""Is this a good idea? How long do you think this would take to complete?"" I think you should have a bit more trust in your lead developer. They know a lot more about your codebase than anybody here",1532450280.0
BehindTheMath,">I have a class, is it possible to put that class in a file and have require on it on everyfile that I need that class? 

Yes.

>If so is it just to copypaste the class into a file and just write the path to the file?

You need to export it by doing something like `module.exports = MyClass`. ",1532444221.0
ecares,WAIT WHAT?,1532444942.0
thedawgbeard,"As I understand it, node is a js framework.",1532551026.0
sgtssin,"Technically if he knows your api, he can... this is why you should not allow connection to your api without securing it in the backend. Hiding behind a button is acting like a cat hiding behind a curtain... not very effective..",1532442161.0
tapvt,"Sounds like you already have authentication built. Since you're successfully authenticating with your back-end, it should be trivial to determine whether the user is logged in or not.

If the use is not authenticated, the ""like"" PUT route should return a \`401 Unauthorized\` HTTP response. That's the first order of business for that route.",1532447511.0
Shaper_pmp,"Client-side ""security"" is not secure - even if you trust your code implicitly, it's running on an untrusted platform (the user's browser) on an untrusted machine (the user's machine). Any ""security"" you try to build on the front-end is a castle built on sand - all you can do is make it slightly more annoying to hack your system; you can't *secure* it with client-side code.

1. Assume every bit sent to the client is compromised and viewable by your attacker.

2. Assume every bit that comes back from the client is a potential hacking attempt - validate everything exhaustively, and don't trust any piece of information unless you've independently verified it from the server.

3. Assume the attack surface of your API is the *entire* API - every endpoint, every HTTP verb, every parameter and field.",1532469929.0
NickelMania,Yes. So you need to authenticate the route with a. Middleware function. ,1532448233.0
BrokenPhoneBooth,"You’re going to want to look into something like JSON web tokens.  

Consider things like hiding buttons just purely for UX purposes.  You’re not securing anything if your back end is wide open.

Edit:  JSON not Jason",1532474023.0
BLOZ_UP,Can you change the button to still do the AJAX call when not logged in and find out yourself?,1532448340.0
oo22,Just use [express-session](https://www.npmjs.com/package/express-session).  I think you're over thinking it a little.,1532443411.0
TheOneRavenous,"Using the ````next()```` function in express will cause the router to run through the next available middleware. If the route only redirects you might just use that, and attach the information to the body or the query string. 

Depending on your app you don't want the server holding state. Express-sessions was not meant for production environments and should be avoided so that you learn other techniques for session management.",1532457601.0
core_dumpd,"You may find [Koa](https://koajs.com/) similar to Flask, it's very minimal. I like to pair it with [Knex](https://knexjs.org/) for APIs.",1532437725.0
error_404__not_found,"[shameless plug]I've recently published a web framework [Zox.js](http://zoxjs.com/) focused on Static Sites, GraphQL API and React SSR. It should be an easy starting point. The official docs should be enough for you, but you can always contact me for help :)[/shameless plug]",1532526175.0
acraftillo,I started learning node by building a backend with Express that serves .ejs – I found it fairly easy to pick up and build out with MVC architecture. ,1532436192.0
dr_steve_bruel,Nice try udemy,1532434836.0
nothingduploading,"yes, you'll want to look at koa or express and a template language to create server side pages. .ejs is popular.

its just like php but instead of writing php you're writing javascript on the server.",1532421008.0
Agilitis,I think what you might need is a View Engine eg. Handlebars,1532420320.0
HaykoKoryun,"One critical difference though is that under certain circumstances you will need to restart the node app to view changes. For example if you add a new controller or action in PHP it just works, however you would need to restart the node app for that. However when updating things in templates you can configure Hapi for example to reparse the template on each request (in production it would be compiled to js once and cached). ",1532422631.0
theweedlover420,I like pugjs as view engine.,1532440005.0
,"All great answers - a template / view engine is exactly what you want and there's lots to choose from. One thing to note though, once it's interpreted and sent over to your user as html, you can't change it so you still need to do dynamic JS stuff on the front end. ",1532424953.0
BrokenPhoneBooth,"You certainly can as others have mentioned.  A more modern approach though would be to create rest services in node that supply data to the front end and handle your front end purely in JavaScript using a framework such as react, vue, or angular.  It’s a steeper learning curve if you’re coming server side templating with php, but it’s the more common approach.",1532431520.0
bossmonchan,"As others have said, you're looking for a template engine (ejs, handlebars etc). I think the main challenge you'll have coming from php is learning how to deal with asynchronous requests with promises or async await. Php runs the code line by line but in js lots of operations are asynchronous (database queries, file system operations etc) so you need to handle that flow. Once you get the hang of that it's easy peasy.",1532445170.0
akujinhikari,"Just wondering, but why would you want to do a server-side-rendered website? ",1532438048.0
marsman12019,"Check out Gatsby, too.",1532458727.0
phozphor,"Thanks guys, looks like node is worth learning :)",1532421954.0
floodlitworld,"By using a view engine such as Handlebars, you can dynamically create web pages served through templates.

If you need to update a page you can also use Ajax calls to your node server, although you'd have to perhaps do some JS formatting/DOM modification with the data that is returned.

But basically, you control everything that is sent to the user...

`var data = getBlogEntries();`   
`var html = ""<html><head><title>Dyanamic Content</title></head><body>"";`   
`for (let i = 0; i < data.length; i++) {`   
`html += ""<div>data[i]</div>"";`   
`}`   
`html += ""</body></html>"";`   
`res.send(html);`

That's a very basic example. But in node, you decide everything they see and hear in the main script.",1532421153.0
BeerRush,"In those bigger apps, many features need to interact e.g. authentication. Your service also should be scalable.",1532420545.0
oo22,"There's no line that says ""oh, now your app is large.  You need to do things THIS way"".  It's a grey area. But, just like building skyscrapers vs sheds the skyscrapers need more ""architecture"" then sheds.


Generally, you want good architecture all the time but it's less important for 1 file apps.  There's LOTS of articles on programming architecture and generally something you learn when you go to school for software engineering (vs just writing code).

Small list of things to look into if you're a beginner:

 - Refactoring
 - Scalibility
 - **Low coupling, high cohesion** <- this one in my opinion is a huge ""way of life"" keeps me sane personally
 - MVC
 - Database design and normalization (use SQL, leave the NoSQL crap behind because so many people don't realize it's designed for an EXTREMELY specific use which most ppl don't need or want)
",1532442847.0
floodlitworld,"Smaller apps might tend to do everything in a single script (usually app.js or server.js).

When you start working with larger apps, it pays to start modularising everything. Rather than loading 70 dependencies and thousands of functions with every request, you would split them into separate scripts, work out what will be needed to deal with the request and then load accordingly.

In your example, you might have: authentication.js, editProfile.js, submitPost.js, submitComment.js and then use your middleware to load scripts when needed:

    app.post('/profile/edit', function(req,res,next) {
        var editProfile = require('./lib/editProfile.js');
        editProfile.processPost()
        .then(function(response) {
            // do stuff
        }).catch((err) => next(err))
    });",1532422064.0
error_404__not_found,"I don't think people really use those terms much, but my guess is that they refer to the amount of custom code you have, not including dependencies.

But this means that if an app has 10.000 files, it can still be called a small app if you only have 1 script and the rest is in node_modules. This can make it misleading.",1532537298.0
nkoreanhipster,"To simplify;

There is an external IP-adress thats available publicly to the world. Imagine every router has its own unique address ( example: 199.012.346.7)

Every router has its own internal Ip-address with it own internal ip( ex: 192.0.0.X ) 
Since every block only allows 255 as a maximum number, a router can normally only have 255 devices connected to it.

How do we bridge these? By using a port and router forward triggering. Usually port 80 for websites.
Connect to 199.012.346.7:80 and the router will forward the request to the internal devices through according to setting. Pretty simple

*edit; typo
",1532422876.0
error_404__not_found,"""i can only access that server from my own computer or from my phone for example if its connected to same Wi-Fi,""

If you can only use it from devices connected to your router/wifi that means you didn't set port forwarding on your router and devices on the internet can not access your PC.",1532520245.0
dr_steve_bruel,"So say my http-server is running on localhost:8080 (127.0.0.1:8080). If I want to view my site from another computer connected to the same wifi, I would visit that computers ip address, at whatever port the server is on, for example I would go to 192.168.1.8:8080 on my phone and i would see my server running off of my laptop",1532434160.0
beereydee,"IP addresses are split into public and private ranges. The private addresses are not globally routable. These are what you are using on your home network.  Your router uses NAT in order to make them accessible from the external internet. The IP address that your router gets is publicly accessible but it's dynamic so it's subject to change and you have to do port forwarding stuff like that in your router config.
with a service like dynDNS you don't have to worry about that and you can make your home pc accessible to the web with a name like myjunk.dyndns.com, but really when you're ready to go to production it's easier to just upload your code to a hosting service/heroku/aws/etc.",1532467985.0
pimmoz,"To get access to a server at home from the outside you have to direct a port in your router/modem to the internal ip. For example for a webserver you have to redirect port 80 to the internal network address of the http server. Then you can access the server from the outside via your external ip + :80. A browser adds the port automatically so you dont have to specify it in that case.

Edit: grammar",1532419989.0
kitsunekyo,"edit: must have been drunk when writing about express as alternative.
but http-server is still shit ;) especially without pm2.

things to look into:
- nginx (reverse proxy, to forward a domain to a specific port)
- dns (resolving names on the web)
- the ""hosts"" file on your OS (local dev)
- pm2 node process manager (to keep your server running and restart it if your server goes down)
- port forwarding / virtual servers
- static public ip (from your ISP)
- how http requests work in general
- general networking (internal v external IP)

",1532422693.0
kottin,"Interesting idea for sure. Although I'll have to stick to the old way of doing things since I don't go near Typescript, but still cool none the less.

Also, you have a typo in your example 

```
const server = restify.createServer()

registerControllers(sever)
```",1532451191.0
kyle787,I’m using decorators in production but with Koa and [routing-controllers](https://github.com/typestack/routing-controllers) I think it looks cleaner and is just a nice way to do it imo. ,1532531895.0
DaJuukes,"The default socket io timeout is 60 seconds.

To set it differently, when you initialize the socket (socket(server)), pass options to the second arg:

socket(server, { pingTimeout: 63000 }) //63 seconds

https://socket.io/docs/server-api/",1532414644.0
JL1988,"All figured out. To those you may run into this:  
I continued to troubleshoot this morning, by first moving my working folder to a different drive on the same server. It worked initially, but on reboot did not. I looked at the windows service that pm2-windows-service creates, and realized that it uses the Local System user...which has no permissions to the network storage. I changed this to a Domain administrator (not necessarily ideal I realize) and changed under Recovery for First Failure to Restart the Service and everything is working now. ",1532448463.0
webid,Awesome initiative. Very well targeted. Can't imagine where you will be 2 years from now. :) Much respect.,1532438367.0
yagaboosh,"I posted a question like this last week, the solution I found was to have the local server send out a UDP broadcast that could be picked up by any computer listening to the desired port. That way the client only has to listen, not actively ping each possible IP. Does that sound useful? 

I'm not at home right now, but I can post the code when I get home if you're interested.",1532399361.0
Skhmt,"Not super familiar with `node-ping`, but if it's using ping correctly, you can't ping a port. 

So it might be crashing because your `192.168.1.___:9000` format is incorrect.",1532385076.0
sshaw_,"Just ping the broadcast network address. Given your example IP it's typically 192.168.1.255.

Using command-line (OS X):

    ~ >ifconfig en0 | egrep -o 'broadcast .+'
    broadcast 192.168.1.255
    ~ >ping 192.168.1.255
    PING 192.168.1.255 (192.168.1.255): 56 data bytes
    64 bytes from 192.168.1.130: icmp_seq=0 ttl=64 time=0.081 ms
    64 bytes from 192.168.1.135: icmp_seq=0 ttl=64 time=41.980 ms
    64 bytes from 192.168.1.130: icmp_seq=1 ttl=64 time=0.203 ms
    64 bytes from 192.168.1.135: icmp_seq=1 ttl=64 time=66.510 ms
    ^C

There are node packages for this...",1532409481.0
ecares,"I can't see any good situation to use that in the context of a web app but there is a tool named nmap designed to do this https://en.wikipedia.org/wiki/Nmap
https://nmap.org/download.html",1532381642.0
mattboutet,"You can run the requests through your server and use the AWS SDK to generate s3 signed urls that are time limited.  

Example:
```
const AWS = require('aws-sdk');
const s3 = new AWS.S3();

const params = {
    Bucket: 'your-bucket-here',
    Expires: 900, //seconds
    Key: 'your-filename.jpg'
};
const imageUrl = s3.getSignedUrl('getObject', params);
```
This assumes you've set up your environment variables properly to interact with AWS from inside Node.",1532373553.0
mohelgamal,Following ,1532372053.0
robotmayo,Run the requests through your server intead of linking to s3.,1532372272.0
teerman,You may be able use aws cognito and cloudfront to grant this level of s3 file access if you don't want to route through your server,1532376679.0
TheOneRavenous,"Can you not stream the image from the s3 bucket and send it to the user? 

Not a scalable solution though since your server will get bogged down streaming images. 

The ither method of having public urls from the bucket sounds more sustainable since you off load the image serving onto AWS infrastructure. ",1532457778.0
setobagh,@[miniadu3](https://www.reddit.com/user/miniadu3) I am able to make the new documents only private. Since old uploaded doc has been uploaded in public mode so signed url is not working on it. Is there any way to convert all those publically uploaded to private so that I could generate signed url.,1535105670.0
KingomTrek,"I have spent hundreds of hours working with XLSX files in Node.js.  


The best library for working with them (in my experience) is  [https://www.npmjs.com/package/exceljs](https://www.npmjs.com/package/exceljs) 

I started with   [https://www.npmjs.com/package/xlsx](https://www.npmjs.com/package/xlsx)  but ran into one big issue fairly quickly, XLSX provides no style support. This was a requirement for my app, but I tabled it temporarily to keep working with this as I was expecting to use the Pro (Paid) version of the library, but eventually I had to move away as there were memory limits hit when dealing with huge (think 2 million rows with hundreds of columns) sheets. I switched to ExcelJS and they had a streaming API, AND support for styles, (after all it was a fork from XLSX). I think the XLSX library has streaming write now, but not streaming read, and style support is still locked behind a paywall.

ExcelJS is nicely maintained and I was able to PR a fix for something that was HIGHLY specific to my project and it got approved and merged in with no issues. I haven't used better-xlsx or excel4node but I'd imagine that, while they work well for simple modifications there are probably gonna be unforeseen issues in a library not as battle tested as the others.",1532377473.0
gajus0,"Came across this while searching for XLSX editor in Node.js. Among all the options that I have discovered (https://github.com/d-band/better-xlsx, https://www.npmjs.com/package/exceljs, https://www.npmjs.com/package/xlsx), excel4node appears to have the most sane API.",1532367786.0
moralbound,I've used this library and was happy with the results.  Good stuff.,1532390351.0
Nishruu,"Is no one ever worried about the platform lock-in with 'serverless' solutions?

After tinkering a bit with Lambda, I don't find it easier to set it up than it would be for me to spin up Express (or your other $FRAMEWORK_OF_CHOICE) for web API/application purposes.

It might be a bit cheaper, I get that. But other than that, I don't really get the appeal. At least not for actual _applications_.

Small utilities or cron jobs? Sure, why not, but applications & APIs? I'm not sold on that.",1532370506.0
Seuros,I think their server got hugged to dead by reddit. or the link is incorrect.,1532366004.0
Serenikill,"Is there a solution to a malicious person hitting your serverless function repeatedly and driving up costs? Is it simple to put throttle detection or something like that in front of it?

",1532631199.0
umib0zu,"I generally would do a separate file. Remember, exports are application singletons, so you can import in an index.js file, modify it, and any other file that imports the object gets the same modified object when they import from it.

You just have to make sure the other files use the modified version only _after_ the index file modifies the object. Trying to make a connection before your index file registers the credentials is a common async mistake.",1532359908.0
keppinakki,"Store them in their own module. For example:  


    // AWS.js
    var AWS = require('aws-sdk');
    var s3 = new AWS.S3();
    
    module.exports = { s3 };

    // index.js
    const s3 = require('./AWS);
    ...
    (do something with s3)",1532360937.0
beall49,"Definitely put it in another file, that way if you have to use it again in another project, you can literally copy and paste that file into the new project. ",1532371338.0
darkdigitaldream,"With dependency inversion you won't need to add globals. Each request is a transaction in a container, and the dependency system will create things as needed.  


the SOLID principles are the real gem of OOP, and should be considered even when working in other paradigms. In this case, the ""D"" of SOLID applies.  
",1532404228.0
frenchcooc,You should avoid ‘var’ declaration ;),1532457699.0
BearByte,"I would say it's own file. That way you can add helper functions and for S3 operations and such. Additionally, it's not good for readability to put such things in root. ",1532355862.0
BloodAndTsundere,"There is a `global` object in Node. Any property you attach to `global` will be available throughout your app. So, for example, if in your entry-point file (say, index.js) you have

    global.foo = new SomeObject();

then somewhere else in your app you can just call:

    foo.someMethod();

That said, what others are telling you is probably the way to handle it. Have a separate `my-aws.js` module which initializes and exports the client objects that you need and then require this module in the application code when needed. Since the module is a singleton, the initialization code only runs once no matter how many times you call require.

edit: as per u/sshaw_, it's not `globals`, it's `global`",1532367804.0
xyryvgsxfd,I recommend using the environment variables \`\`process.env\`\` or something like [yargs](https://yarnpkg.com/en/package/yargs) ,1532358242.0
bigorangemachine,"[Use responsibly](https://nodejs.org/api/globals.html#globals_global)

`global.whatever`",1532367336.0
cspotcode,"`exports.addGlobally = Object.assign.bind(Object, exports);`",1532349047.0
kranker,"What you're doing is functionally ""fine"" but the structure is known as the Pyramid of Doom.  It won't block code exactly, but the `getFromDB` calls will run sequentially which may or may not be your intent.

If you're using node then async/await is pretty golden here, it allow you write it like

    let response = await getFromDB()
    console.log(response) // prints whatever the promise resolves to
    let anotherResponse = await getFromDB()
    // etc

You'll have to do some reading though because it actually uses promises under the hood and you'll need to understand how in order to know the order in which your code will be executed.",1532336707.0
astmatik,Read about async/await.,1532333868.0
KillCoffee,[Here is a thing for you to look at](https://stackoverflow.com/questions/6048504/synchronous-request-in-node-js),1532330172.0
fablus,"If you’re using a more recent version of node (7.6.0+/8.0+) you should try to look into async/await.

If you’re running an older version (and need to, e.g. for compatibility reasons) then you should take a look at async.js and more specifically async.waterfall [1].

1. https://caolan.github.io/async/docs.html#waterfall",1532338475.0
ChronSyn,"Using `.then()` is absolutely fine. The initial call to this will be asynchronous, and it will pass it off to the event loop. Everything within that call will run synchronously (i.e. each `.then` statement will wait until the previous statement has passed).

What you're doing here though, is running each one after the other, and you're soon going to get into callback hell which is where you have several callback functions nested one inside the other, and as such there's no benefit to using promises (i.e. `.then`) at all in this situation.

What I recommend is that if you're using a semi-recent version of node (e.g. version 7.6 or later), use async-await

    const getFromDB = (fields)  =>{
      let output = [];
      switch(fields){
        case('first call'):
          output  = [1,2,3,4];
          break;
        case('second call'):
          output  = ['a','b','c','d'];
          break;
        default:
          output  = ['Default is returned if no other cases match']
          break;
      }
      return output;
    }

    async getMyDbInformation = () =>{
      const data1 = await getFromDB('first call'); // returns [1,2,3,4]
      const data2 = await getFromDB('second call'); // returns ['a','b','c','d']
      const data3 = await getFromDB(); // returns ['Default is returned if no other cases match']
      return [data1, data2, data3]; // should return [data1,data2,data3]
    }

In this example, data1 will wait until some data returns from the database (theoretically - it depends what the `getFromDB()` function does, but this example includes a sample), then data2 will run and wait until data returns, then data3 will run and wait until data returns, at which point it'll return the full data.

Now, if you were to run one of those without await, that will run asynchronously so the next one in the 'chain' won't wait for it before running. So if data 2 wasn't `await`, what would happen is that data1 would run and wait, data 2 would then run and simultaneously, data3 would run and wait.

This is the most effective and current practice being employed and highly recommended as it allows you to write code that is a single level deep which is much more readable.",1532340682.0
delventhalz,"First of all, if you are using Promises, bear in mind that everything returned from a Promise is wrapped in a Promise. This is the main advantage of Promises over callbacks, as it allows you to write them sequentially without nesting them.

    getFromDB().then(function(){
        getFromDB()
    }).then(function(){
        getFromDB()  
    }).then()  // etc.

Or even better, let's ditch the useless `function` wrappers and stack all the `then`s up together:

    getFromDB()
        .then(getFromDB)
        .then(getFromDB)
        .then()  // etc.

This is all functionally the same code. However, it is worth thinking about whether or not these function calls _need_ to be sequential (this might require thinking in a more asynchronous way). For example, if we just need to wait for these three to resolve, and we don't care about the order:

    Promise.all([ getFromDB(), getFromDB(), getFromDB() ])
        .then()  // etc.

 There is also async/await, which you may be more comfortable for you to use. I'm not a huge fan personally, but they work fine.",1532347000.0
maladr0it,Lol this sub is dead,1532307852.0
schedulle-cate,"Cool. I, for myself, just use vscode. ",1532306335.0
merb42,YES! I started using this the past few weeks and it has been amazing! no more console.logs everywhere! I love it.,1532555443.0
tswaters,"node repl is started when you just type `node` in the terminal and press `return`

it'll allow you to type out javascript, require modules, etc.  it's very good for quick checks and prototyping little pieces of code.

It appears that inside the node repl, you typed `npm install nativefier -g` and npm is telling you it doesn't like that.

You should be able to exit the node repl by pressing `ctrl-c` a few times....  after that is done, type `npm install nativefier -g`",1532296537.0
sumdudeinhisundrware,"This is a tough issue, I spent a really long time solving it.  Here's what I did r/https://bit.ly/2LGXdbw",1532359545.0
pointio,Restart Mac and try again?,1532295201.0
millard87,Are you running it on windows?,1532294753.0
,[deleted],1532287648.0
kyle787,"You can replace PHP with node absolutely. Obviously the syntax is different and the fact that node is asynchronous while PHP isn’t will take a bit to get used to but the both allow you to do the server side stuff. It’s not a bad idea to use NGINX as a reverse proxy to your node script, one main benefit is it is much easier to handle ssl config in NGINX rather in the node script. ",1532290827.0
Drunken__Master,"I'm just a newb so maybe I'm missing something, I've put 10x as much time into learning Node than PHP, but Laravel  just seems far easier/more intuitive than Node/Express  (no complaints about Sails though, it made things seem a lot easier for what it was doing, just not easier than Laravel).",1532289491.0
nucleocide,https://thomashunter.name/blog/php-vs-nodejs/,1532327213.0
robhybrid,"I made a separate response about this to a similar question, but no it’s not. 

PHP is essentially a templating language that runs on top of a web server. PHP applications are instantiated by a web request.

 Node applications run at a lower level. You will need to use node to start a web server, if you want to use it in a similar way, and you will need to load a templating library. Node applications are generally instantiated as a command on the CLI. 

You can use node to replace PHP, but it’s a little more involved. I consider it more powerful, and easier, since I’m programming in JS for the front end as well.",1532290928.0
galkowskit,"\> Because I see you have to run Node on a port like 8000. But I just want it to work when I visit my webpage.  


I think even PHP realised that doing it like this is much better (and then relying on nginx to map it) as \`php -S\` built-in server was introduced. It's been a long time since I worked in PHP though.",1532419942.0
bigorangemachine,"The part you are missing is that Apache does a lot of the configuration for you. You can change the hosted/listened port with a php.ini file (or htaccess)

So basically the configuration that Apache normally handles you manage yourself.

And yes node can totally replace PHP.  It just doesn't route the same way. To get into the specifics I would need to know if you are on shared php hosting or AWS (or whatever). But if your server needs to keep PHP on port 80 and run a node server it's not going to work.

But in general you would run node as non-sudo listening to any port that is not port 80/443 (or conflicting mysql/mongo/redis port) for arguments sake say 3000. You would use iptables or haproxy to proxy port 3000 on port 80",1532287884.0
quizasquizas,Obvious troll is obvious.,1532419467.0
Ooyyggeenn,Youtube : create rest api Node ,1532266365.0
Doctuh,"> I may sound stupid but i want to learn node JS just for the sake of making Api's and nothing more

That is it's predominant use case so nothing stupid about that. There are 1 million tutorials about how to do this online, here is some help: [Making node API's with Express](https://www.google.com/search?q=making+node+api+with+express&oq=making+node+api+with+express).",1532267006.0
rob9095,"I just wrote a blog post about this, http://www.robt.co/building-a-simple-node-js-express-api",1532278715.0
quizasquizas,https://foundation.nodejs.org/wp-content/uploads/sites/50/2018/07/NodeJS_FieldGuide_Building_APIs_FINAL717.pdf,1532595300.0
AmyCode,"Here’s a gold mine for ya

https://github.com/danistefanovic/build-your-own-x",1532295829.0
,[deleted],1532266288.0
clarke12342003,Assuming you watched the net ninja series. Is it good also watch more of his series like the passport series ,1532284253.0
apearsonio,Have you got the app running on a VM in the cloud with a domain and HTTPS?  ,1532294594.0
AxelTerizaki,"I have a opensource standalone app written in Node + some JS and react for the UI. PM me if interested, we're always looking for people to work with.",1532364343.0
sandeepsb,Convert your to do app to be real time using socket.io and react JS,1532275346.0
inthegrave372,"Well, I think deletion is a kind of unlinking. It just removes the pointer/link to the file from the system tables. It doesn't physically go and clean the bits.",1532253627.0
mistralol,"
Cause you can have multiple links to the same file. The file is only deleted when the ref count reaches zero. So technically its unlinking.

Note that the file if it is still open in the unix world will also not be deleted until it is closed.",1532256163.0
nospambert,Read up on inodes in unix,1532260787.0
compubomb,"Inode structure is basically a linked list internally, so there is a primary first node that links all the rest of the storage allocation. Once the primary link of a file is detached, the underlying software will add those nodes back to an allocation table to be reused for storage layer and write over those Inode blocks. That is why deleting is not true deletion, just detachment of the nodes to file names and paths. ",1532270498.0
jb88373,"Unlink is a *unix thing. Because there are hard links you can look multiple ""names"" to the same file. It will keep unlinking those tires until the final link is removed at which time it is deleted. It goes back to how filesystems are actually built. They are just tables with names pointing to locations on disk.

Also ""delete"" is a JavaScript keyword and so is considered a reserved word.

*Edit: Symlinks to hard links",1532259985.0
MUDrummer,"In addition to what everyone else has said, delete is a reserved word. Best practice is to not use reserved words as function names. ",1532266807.0
xrayfur,"That's the name of the system call unlink() calls. Often os libraries use same names as their corresponding syscalls.
 https://en.m.wikipedia.org/wiki/Unlink_(Unix)",1532291577.0
sonicbphuct,"Because Posix standards:  
[http://pubs.opengroup.org/onlinepubs/009695399/functions/unlink.html](http://pubs.opengroup.org/onlinepubs/009695399/functions/unlink.html)",1532266459.0
gitgood,"I guess the obvious drawback of automatic package updating is the issue of packages potentially introducing breaking changes. In terms of what majority of developers need, it's stability over keeping the code cutting edge.",1532267508.0
BLOZ_UP,"> With the introduction of package-lock, a new challenge arise - developers have to manually update dependencies and according to what I see - many rarely do that.

You're god damned right I rarely do that. Dependancy management in Node (or more specifically, with NPM) is a nightmare. Package locking made it bearable.

Semantic versioning is great in concept and all but many packages still introduce breaking changes with minor revisions. Some packages have wildcard operators and other stupid nonsense. And some packages just get removed altogether, meaning I can't guarantee repeatable builds. Totally not acceptable for production, or even our QA servers.

So now we, on our dev boxes and all the way to prod, lock all dependancies *and* have a local package cache in case NPM doesn't work or no longer has a package.

The only automation I want on that front is to generate an HTML file that I can host on dev machines to go over the entire dependancy tree showing current vs installed versions, any CVE/security issues, etc. so I can manually update packages at my leisure.

",1532288612.0
,[deleted],1532348161.0
jb88373,"Seems fine in general. Didn't look up the usage for every package, just a couple. 

One thing, you don't need this line:

```
store.on('connected', () => store.client );
```

The documentation has it as an example of when the current object is available, but it doesn't serve any real purpose. You could replace the `store.client` with `console.log('It connected')` or something if you want",1532259717.0
Charles_Stover,"You may want to use `app.get` instead of `app.use` for actual URLs (`/` and `/api`). Similarly, `app.post` if it comes to submitting data instead of just fetching data.",1532277308.0
kryptkpr,Youre off to a good start.  One suggestion: Mongo URL and any secrets should come from process.env as they are deployment specific. ,1532393935.0
,"Total shit! Just kidding, that's great for 3 days of learning.  I took a full stack boot camp and most of the class couldn't even tell you what half this does.  Check out .env for environment variables to hide your secret passwords or api keys.  Are you learning strictly on your own?",1532259692.0
scaleable,"Dont write lines wider than 80 characters.

New folks on the block are using the Prettier Plugin + format on save (lets the editor do the peasant work of code formatting for you)",1532265629.0
sanwfa,"Instead of redirecting to a new session, return the tokens as res (response) in the callback method.  I believe this is what you are looking for?",1532249383.0
pokeszombies,"This wasn't in node (so apologies if this isn't helpful at all), but I recently plumbed together some jwt passing around code. I send the token to the client in a response header. E.g ""authorization: bearer "" + token. It's exactly the same header the service expects with it's requests. ",1532248212.0
lockdown6435,"Here's the API route I created to have the `/auth/login` route be hit from a React component and store it in localStorage: https://github.com/RobertMcCoy/CodeCollaborator/blob/master/src/Login.js#L33 which gets the response from [here](https://github.com/RobertMcCoy/CodeCollaborator/blob/master/server/config/passport.js#L63). Note this is code from like 10 months ago so it might be a bit out of date, but the concept should be the same.

EDIT: I just kind of realized this doesn't answer your question directly because of React doing the heavy lifting on the client side, but the `/auth/login` route should be returning the `response.data.token`, which would be your passport token. So for whatever need you have, if your Passport authentication process looks like [this](https://github.com/RobertMcCoy/CodeCollaborator/blob/master/routes/index.js#L8) the solution works pretty broadly.",1532249156.0
timgfx,"What i do is open a pop-up where the paspoort login happens, once the user is logged in the pop-up will redirect to /?t=your.token.here which I handle with vuex and vuex router sync by storing it, which also stores it in the user’s cookies (with vuex-persist)
Then once the main page detects the new token (which is set with a mutation, and detected on the main page with some mutation share plugin of which I forgot the name) it closes the pop up and the user is logged in and has their token stored in cookies

I bet that there are many more efficient ways to do this though. You can probably send a Set Cookie thing in the header but I don’t think that works on one-page apps (like mine) because you’d have to refresh",1532255852.0
josewhitetower,RemindMe! 1 day,1532246498.0
mullam,"I think what you're looking for is *""Application Performance Management""* or *""APM"".*",1532249680.0
thornag,"If you want to roll your own solution then you can look into tools like Prometheus + Grafana, if you add alert manager to it you have the full set and you can instrument virtually anything you want and alert on it.",1532250787.0
soberlahey,"Maintain total_time and total_responses where average=total_time/total_responses.

You’d maintain total_responses just by starting at 0 incrementing. 

And total time by accessing each response’s “response_time” (not exactly this) attribute and +=ing it ",1532223471.0
rotharius,"For single time performance testing or load testing, you could try apache benchmark (`ab`) or something like locust, gatling or jmeter.

APM is for continuous monitoring, see NewRelic or Datadog. It gives you more detailed information on exection paths in your code (presented in flame graphs).

For end point performance, uptime and response monitoring you could use an online tool like pingdom, uptimerobot or blazemeter.



",1532293154.0
psayre23,"> ndb is an improved debugging experience for Node.js, enabled by Chrome DevTools",1532240223.0
kostarelo,"I never really understood how people are using a debugger these days, especially in a heavy I/O bound app such as Node.js services. I mean, once it hits the DB, there is no way of “stepping back”. 

I used to use debuggers back when I was developing desktop apps on Java using Eclipse. It made sense to use a debugger back then cause the whole app was running locally inside the same execution stack, including its state and its business logic. You were in control of how the data flow and in which direction.

But nowadays, you have an API request with a short lifecycle which 90% includes handing the execution to other processes through the network. What is the purpose of using a debugger? You can just write an automated test that would automatically run on every file change.

Maybe I need to look into it again",1532264663.0
KillCoffee,C:\Users\\\<user>\AppData\Roaming\,1532223052.0
core_dumpd,"I tend to think of knex as having less limitations than an ORM. I've used it in a couple of mid-sized projects now and been quite happy with the results.

Since it's schema-less you'll not get any sort of checking for whether your queries are correct until you go to run them.

Building up a database schema from migrations can also lead to your resulting schema not being available in the project in any one place - you can always import DDL scripts for the schema elsewhere, but it's an additional step. There may be a better solution out there for this, I honestly haven't looked too hard.

I also absolutely could NOT get the programmatic migrations working with async jest tests, but I think that was more a deficiency of my own than the lib. I got Mocha working fine.",1532187272.0
TheLegendOfZero,"You lose abstraction pretty much. Being able to eager load relationships by name or insert a graph of objects becomes really convenient. This goes double if you end up needing to implement similar functionality anyway.

Often a common feature across back-end projects I do is writing some kind of generic query structure so API users can filter data. An ORM makes this significantly easier, but of course it's possible to roll your own implementation in knex.",1532207259.0
maktouch,"So far, we have hit none and we do pretty big queries. 

Most of the queries are simple ones. When you do need to go complicated, you can use `knex.raw` but still use `.where` for prepared statements. 

10/10 would use again. ",1532200438.0
brtt3000,"No abstractions, no commonality, no higher level features, schema doesn't exist outside database (no vcs, not reproducible etc), got to find your own way for everything.",1532200440.0
rizwanahmed19,I know it's a silly question but what's the difference between query builder and ORM?,1532209601.0
phprosperous,"No support for replication (read from slaves, writes to master)",1532509143.0
tobydeh,Try the html5 geolocation api: https://www.w3schools.com/htmL/html5_geolocation.asp,1532159763.0
no_dice_grandma,"Use Geolocation, then then run the coords through google maps api to get an address, for a more usable location object.

There are a lot of problems with geolocation, though, like firefox support isn't the best, accuracy can be crap, and it has issues in linux, so adding additional fields for custom input is better. 

The good thing about using the google maps api already is that you'll already be tied in and familiar with the call and response structure when asking a user for their custom entry, if needed. The maps api is really handy for cleaning up bad or incomplete address entries.

",1532180103.0
zitterbewegung,Try asking them ? Uber and Lyft have a very similar problem. I would do a rough approximation with the techniques done here and then allow them to override it using an input field .,1532166878.0
BrokenPhoneBooth,"How exact of a location do you need?  Like others have said you can use the html5 api but that isn’t going to be super accurate as it isn’t really giving you a longitude and latitude of where the user is. 

You mentioned you’re making a mobile app.  Why not use the GPS on their phone?  This would complicate things quite a bit as you would need a native wrapper like Cordova and the app would need to be on the App Store or google play store but it would give you access to the user exact location as opposed to the location of the tower their device is connected to which could be technically in the next town over.",1532179281.0
ItsAllInYourHead,"The most reliable and precise would be using the HTM5 geolocation API. It's not guaranteed in anyway that you will get it, though. It will prompt the user for permission, and if they agree the accuracy would be based on their device.

My suggestion would be to use an IP address geolocation database. Maxmind has free versions that are fairly accurate. Or there are a bunch of APIs that provide this service, too. It really depends on how much you want to pay and how much accuracy you want. Start with that, then try to augment it using the HTML5 geolocation IP for greater accuracy. ",1532185710.0
JSFunction,"The most reliable, precise method? Ask the user.",1532224765.0
kranker,"Some basic debugging skills here: you should isolate the different parts of your app so that you don't always have to deal with the full path from the user to the database.

In this case I mean that you could either test the delete controller directly or (as a temporary debugging measure) inspect the arguments being passed to `Post.findByIdAndRemove` just as it's being executed.  

For instance, if it turns out that `req.params.id` is undefined when your code is run then that's extremely relevant information, as it would mean your problem isn't in the database query but rather in the route or the angular code.    If the correct id is there in `req.params.id` then you can ignore everything before that and concentrate on the database query.",1532169181.0
amroessam,"I think you have to change the type of id from the request params to ObjectId because it’s probably a string

This stackoverflow question’s first answer is how to go about it. 

[Node.js Mongoose.js string to ObjectId function](https://stackoverflow.com/questions/6578178/node-js-mongoose-js-string-to-objectid-function) 

Edit:
If you don’t want to change it, you can use 

    db.collection.findOneAndDelete(filter, options)

For the filter pass:

    {_id:req.params.id}

More here:
[Mongoose documentation](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) ",1532159056.0
randygbiv,I'm having issues formatting this..,1532140409.0
TyrionReynolds,"findByIdAndRemove expects three arguments.  (I’m assuming “Post” is an instance of mongoose)

So you’re passing a callback as the options argument.  What I would expect to happen is the object gets deleted but nothing gets logged or returned.  What behavior are you seeing?",1532148774.0
sardar1831,P,1532161075.0
amroessam,Format?😂,1532314979.0
Dantharo,"You got no errror in the console?
Try to store the return of this function and see it in the console.
Saw that this mongoose func accepts some aeguments and has a different behaviour depending on wich argumenta u pass to it.

A.findByIdAndRemove(id, options, callback) // executes 

A.findByIdAndRemove(id, options) // return

 Query A.findByIdAndRemove(id, callback) // executes

 A.findByIdAndRemove(id) // returns Query

 A.findByIdAndRemove() // returns Query

Helps?",1532157704.0
afonseca08,VS Code is a very good environment with integrated debugging and is free.,1532135242.0
geoelectric,"I use WebStorm professionally with node and node-like projects. It's very, very good. ",1532142280.0
allelseistaken,"I love jetbrains products. Great default keyboard mappings, reasonably fast and support for many frameworks out of the box.",1532131351.0
,[deleted],1532146997.0
MattEMG,Vim ,1532158703.0
Maledictusx,"If you want a free product go VSCode. If you want to pay for one go with WebStorm. VSCode is pretty incredible for a free tool, but it certainly doesn't beat out WebStorm.  ",1532142169.0
SnowyMovies,"I use Webstorm at home, Phpstorm at work. I'm used to Jetbrains IDEs, and find myself much more productive in them. It just works.",1532161026.0
bihnkim,If you’re writing in TypeScript VSCode is definitely the way to go,1532131625.0
dethwhores,Atom is really nice and customizable while still feeling lightweight,1532140191.0
dvtate,"I use atom, but I feel like there are probably better options",1532155271.0
BenjiSponge,"If you're halfway decent at Linux (and are either using Linux/Mac or WSL), I highly recommend vim or similar for editing and command line for everything else. If you spend all day in the system like I do, you're never going to get a more ergonomic system, imo. It's got everything you could want, and CLI will always be a first class citizen when it comes to anything regarding tooling. Getting used to it takes a little while, but it really is worth it.

When you have systems that are harder to configure than package.json and similar, that's where I see the utility in full-fledged IDEs, though after a while it's usually easier to just learn the systems at the file/CLI level and go back to vim + CLI. ",1532135224.0
Qeddash,Emacs ,1532637680.0
segphault,"I switched from WebStorm to vscode. I think they are both great for Node development, but vscode feels snappier and costs nothing. I'm very happy with how quickly Microsoft is iterating on vsc--they are actively working on a few of the missing features that I care about, such as support for mixed horizontal and vertical splits.",1532145799.0
Dantharo,"I working with react (its new to me) and learning node, i like vs code. Never tried others, i mean, im a java developer, used to code a lot in eclipse, i hate it.",1532133932.0
-bkbkbhchblnkdzgblkh,"I work at a big tech company and I’d say that 80% of the front end guys now have switched to VS code from jet brains products. I only use IntelliJ now when I want to run individual unit tests, the rest of the time I work in Code.  Testing is the one area where I’d say that Code still lags behind a bit, but otherwise I’ve been thoroughly impressed. ",1532145041.0
mannotbear,VS Code. ,1532189860.0
vladjjj,VSCode and Webstorm have node debugging built right in.,1532191055.0
leweyyt,"Due to me being a student i get a year licence for all Jet brains products (full editions). so i have been using Webstorm seems really good, however i dont have much to compare it to.",1532359954.0
ChickenRicePlatter,Anyone use cloud9? Its the only IDE I've had exposure to because of a certain web bootcamp im following but I'm not sure how good it is,1532624433.0
abudabu,"Visual Studio Code, hands down.",1532146297.0
mikegrr,"Ever since I moved to react or angular for frontend and azure functions as backend, I can do everything perfectly with vscode + extensions. No need for a fully fledge IDE at all. I'm starting to hate applications that take more than 2 seconds to open so vscode is perfect.

Sometimes I have to work with msSQL database so I started using SQL operations studio, it's based off vscode and it's a really good, cross platform solution. Windows/Mac/Linux",1532134004.0
xyryvgsxfd,"VSCode isn't an IDE. I'm only using the Jetbrains products (Webstorm, PHPStorm etc) and I'm really happy with them.",1532131016.0
BabyToy,Visual Studio 2017.,1532161207.0
BithTree,"Are you initializing the Joi.object as such? 

     Joi.object().keys({
        name: Joi.string(),
     });",1532141380.0
BatKeks,"Rename the var process to something else

Var declarations hoist the variable to the top of the block scope and 'process.argv' Will try to access the 'argv' property from a hoisted variable which is undefined at that point of the code. Or just use let or const declarations instead (much better because they don't hoist) but would advise to rename the 'process' variable to not overwrite the node global.",1532125872.0
scaleable,"no, you are just concatenating a string",1532121224.0
aclave1,"No. You must parameterize your queries, otherwise your system can get hit with an injection attack.",1532125827.0
smeijer87,The question alone makes me worry. Please read about sql injection. ,1532122108.0
wlaurance,"Hi!

No, it is not safe to use ES6 concatenation syntax for an SQL query string. As others have pointed out you still run the risk of an SQL injection. The node postgres format of \`client.query('select \* from posts where post\_id = $1', \[123\])\` ensures that values replaced into the statement string are escaped. [https://github.com/brianc/node-postgres/blob/8cc7308835e60f49fcc568b497504117af853c70/test/unit/client/escape-tests.js](https://github.com/brianc/node-postgres/blob/8cc7308835e60f49fcc568b497504117af853c70/test/unit/client/escape-tests.js) are some of the statement escaping tests the suite covers.

oldie but a goodie [https://xkcd.com/327/](https://xkcd.com/327/)

P.S. if you are working with Node/Postgres I have written a few tutorials. [https://www.wlaurance.com/2016/03/node.js-postgresql-example/](https://www.wlaurance.com/2016/03/node.js-postgresql-example/) is a good one to start with.

I'm happy to answer any questions you might have. will @ wlaurance.com",1532493220.0
gajus0,See https://github.com/gajus/slonik#tagged-template-literals for a safe alternative.,1532125806.0
nodechance,"I would personally separate the files into their own collection. In the user collection I would then have a 'files key' as an id for an object as shown. 

But there is nothing wrong as such with what you're currently doing, might be more difficult to scale though. ",1532121795.0
ichosethisone,"You might consider generating a hash from the files content.  Store the hash and any meta data about the file in a separate collection.  Then reference the file with the name provided by the user who uploaded in their own files collection.  I know it's relational, but it saves you from storing duplicate files.",1532153893.0
alexzim,"Actually it is possible and easy to require globally. It's not going to be exactly `const` and you'll be able to change values though . All you have to do is:

`global.name = require(""name"");`

But it is discouraged to use global namespace without any special reason. It also makes little sense because in node every require is cached and you will get the same return in every file.

And yes, requiring dependencies for each project is the right way, because the versions may differ.",1532137288.0
Charles_Stover,"You can put them all in one file, but then you have to import them all from that one file, which isn't saving you anything. You cannot (in any way worth implementing) `require` a variable in one file and then use that variable in another. There are ways to do it, but I assure you it isn't worth the effort, and that practice won't transition you into the workplace.

You install it for each project you do. This allows projects to be standalone and self-contained. Someone else installing your project does not need to have other software installed. They just pick it up and use it. This allows different softwares to use different versions of the same package -- one may use React 14, while another uses React 16. Neither break, despite both being installed simultaneously.",1532115444.0
Luke-At-UCS,"    console.log( 36.2 === 0.362 * 100 );
    // returns false
    // ...
    // ... wait, what?
    console.log( 36.2 );
    // returns 36.2
    console.log( 3.62 * 10 );
    // returns 36.2
    console.log( 0.362 * 100 );
    // returns 36.199999999999996

It always comes up in really odd ways at really odd moments, but [the underlying way in which javascript stores numbers](http://www.javascripter.net/faq/accuracy.htm) doesn't *have* exact values for some decimal numbers (including 0.362).

When it does come up, judicious use of `Math.round()` and the like is the only way to get around it.",1532115790.0
inu-no-policemen,"7e-20 is 0.00000000000000000007.

Close enough.",1532124788.0
Papa_Bravo,"You are not doing anything wrong. You have encountered floating point arithmetic. Mathematical exact floating point operations are not possible in most programming languages, which is why equality checks (like your ===0) for floating point numbers should be avoided.

If you want exact arithmetic, you have to use computer algebra systems. But my guess is that those don't exist for Javascript in any usable Form.",1532160041.0
WarInternal,This looks like you're exposed to the internet and getting hit by bots looking for exploits.,1532103451.0
iarewebmaster,What module?,1532100158.0
yonjah,"It's not clear what you are trying to do but the code you added is only running another php script in as daemon.  
Probably not what you wanted to ask (but if so check pm2 npm module which will be the easiest way to achieve something similar)  
",1532099400.0
key_value_map,"What if your node server is behind a proxy and the ip you get is actually proxy's IP? Also what if you have multiple node instances running behind a load balancer?
",1532126241.0
OzziePeck,Command line ui could defo be improved. ,1532162533.0
AGenericUser01,"Written from a phone, and removed many details. Bear with me.

Database migrations ensure a consistent state of a defined table-structure across any database where migrations are ran. In essence, you're introducing a version control system for your database that ensures a developer can be guaranteed a certain database-state, given that all migrations have been ran against it.

A migration is at its core a snippet of code/XML/SQL which modifies the table structure in some way. So if I first make a Users table containing field ""name"", but later find out that I want a field ""email"" added to this table, I can now write a migration which accomplishes this. Having successfully ran this migration against my own database and verified it's functionality, I now check in that migration to version control. Any developer can now fetch those changes, run the new migration against their database, and be guaranteed the same table structure.

The migration-framework will ensure that migrations are ran only once for any database, usually by giving each migration a hash which is checked for comparison during the process.

A migration can contain snippets to manipulate data in the same way. If you only need certain data injected during the initial setup, this is referred to as ""seeding"". Seeding a database often involves writing a similar snippet which injects and ensures some initial data within the database.

As applications evolve over time, so does the table-structure. Migrations solves this in an more elegant fashion than manually updating databases either across team or across environments.

Doing it with node would require some npm package bridging migration frameworks such as Flyway or Liquibase. I've only ever set this up for Java. Google usage of either aforementioned frameworks with node and you should find tutorials somewhere.



 ",1532092607.0
yonjah,"I'll try to give a simple explanation  
I think you get the basic of it. So in the end we want to transfer data from one database to another.  
If the other database is empty all we need is dump from source and load on the target.  
But in the more complex scenario we already have data in the other database and we want to keep it.  
We might have schema changes done in development env and we only want the schema changes to apply to the new database.  
In a much more complex scenario we also need to shuffle the old data to fit the new schema.  
Add a bit more complexity and you want to be able to move back and forth between different version of your schema that will fit versions of your code (like to revert a deploy).  


To properly achieve and manage all this you need a robust migration solution.

Personally I use [db-migrate](https://www.npmjs.com/package/db-migrate) it's relatively easy to use and since it is just another dependency of your project you can use all your known stack to write the actual migration logic.  


A quick note.  
It will probably be easier  to use nodeja based tool, but as long as it supports your database you can use any tool you like even if it's note written in nodejs",1532100387.0
SkaterDad,"Database migrations are a way to incrementally modify your database schema.  For example, adding new tables, altering existing tables, etc...

You can write them as SQL files and execute them, or write them using libraries.

In Node, I do this with `knex`, but there are other tools like `sequelize` and `TypeORM` that have their own spin on it.

This article does a good job explaining this further:  http://perkframework.com/v1/guides/database-migrations-knex.html
",1532091249.0
,[deleted],1532087093.0
SilverExit,"I want to run a script using nodejs , the script is a command to run cli  of an application. So running the script creates a child process . I  wish to send commands to be run on that child process using node js and  parse the output of the cli.",1532431173.0
MCShoveled,"Quick poll: upvote if you publish npm packages from CI, downvote if you use your own possibly infected development machine.  

Come on guys, it’s 2018. 

Why not look at:

1. Send an email to all publishers of the package when a new version is published. 

2. Improve on #1 by including a link to actually release the package for consumption. 

3. When issuing an authentication token, allow it to have an expiration. Again, due to CI allow non-expiring. 

4. The token should be optionally bound to an IP address or range. 

5. Send a hash of host data (hdd size, timezone, country, language, os, whatever) from the npm and only allow the token to be used in conjunction with that hash. 

Just take some basic steps towards security that doesn’t involve constant human interaction on publish. 

😞",1532093821.0
sai-kiran,"I love the theme used in the terminal, can someone tell me what theme it is?",1532093190.0
xemasiv,Isn't it possible to use node's dgram api to do a udp broadcast on the local area network? Afaik that's how warcraft 3 clients discover each other.,1532073032.0
bindik,"Well, set static ip on local network? ",1532076918.0
joesb,"Most server have graphql (the reference implementation) as the underlying library and provide abstraction layer on top for opinionated styles/configurations and extra features like push notification or tracing. 

You can go straight to using `graphql` for the most flexibility. But I would recommend either Apollo or graphql-yoga for first version just to get things going and see what is common concern that these library added. 

Don’t worry. These frameworks are quite thin layer over graphql, you wouldn’t have too much problem moving from one to another. ",1532065283.0
Thommasc,"Go with the one that gets the most traction and has the best documentation.

I really enjoy apollo with angular.

Feel free to try 3 different building a todo graphql endpoint to get a feeling of them.",1532073020.0
zombie_kiler_42,"I do not know if this will be any help at all but here are my two cents, (just an opinion)

Oauth like i am sure you noticed does what it does best when it is a delegated service. People don't like siging up for new things and others would like to use thier exitsing social footprint anywhere else. This us what Oauth solves very well.

The whole point of the different grants is convinence neets security, like the Authorization grant and the implicit grant solve whether the server/front end app trying to access the token can safely store it and may or may not be given a refresh token,

  


What I think you are supposed to do with the token, is creare a new user with it in your applicstion server, unless you are a little quiz app that neess to read skme posts and make a decision you will need to store token and possibly the refresh token(sonce ot is an SPA you csn use the hybrid approach and send the tokens back to your server).

Extract all the info that you want from your users social account that they approved and save it, and what to do after that....

Just use sessions maayn

That way even if someone signs up with username/password the process is the same, you have thier info and keep a session id for them,

And it can be asaves in a signed httpOnly cookie.

For the mobile app, just make a one different api point where thr token is sent back instead of being saved in a cookie so that it can be saved locally, and sent back with every request (like an SPA) except you don't have to wrroy about XSS hehe

I suffered and suffered nights reading thinking about JWT and statlessness and Oauth, only to realize i understood them completely wrong

  

Edit: This may not be the best approach if you have  microservices that each need to have Single sign-on authorization passed around so they can get information relevant to them from the user's social network.  But if it is a web app that users log in,  do stuff because they are authorized and log out like make posts or something specific then i think it should be fine
  

",1532072263.0
NoInkling,"For this kind of setup you typically differentiate between between the concepts of user accounts and OAuth ""identities"". Your user model/db table contains a field for an email and a password hash and whatnot. Your OAuth identity table contains the provider used to authenticate, and any provider-specific user information that you need to save (like their ID). Each identity is associated with one user, but each user can potentially have multiple identities (or none, if you allow sign up via email/password).

How you associate new OAuth logins with existing users, or add a password to an account that didn't have one previously, can be the tricky in terms of security as well as UX, so make sure you work that stuff out. There are also lots of other little edge cases and features that you're gonna have to think through too.

Just a note that with Passport, you'll want to make sure that you're using the OAuth strategies designed for the implicit flow rather than the authorization code flow, e.g. `passport-facebook-token` instead of `passport-facebook`.

Or just use Auth0 as others have suggested.",1532073105.0
pietvanzoen,"I believe the easiest option is to use a third party provider. Good ones will have a JavaScript SDK that allows you to easily redirect the user to the auth server and parse the token you get back. 

We just started using Auth0 but I’m sure there are more good options depending on your needs. 

If you actually want the username/password form inside your SPA then you’re actually looking at the ‘Resource owner credentials grant ‘ which the Oauth2 spec doesn’t recommend. 

Someone with more knowledge about the oauth2 spec might be able to explain better as to why you might not want ‘Resource owner credentials grant’ but the gist is that it’s less secure than ‘Implicit grant’. ",1532061776.0
sangeli,Why would you collect a password of you’re using Oauth2?,1532062409.0
Indra___,"I would use Auth0. It offers an username password login, social SSO login and the possibility to link them together.",1532069137.0
n1313,"You are correct, there's nothing handlebars or any other templating engine can do that couldn't be achieved with manual effort. The only reason you might want to use handlebars is to not make that manual effort *yourself* and make *somebody else* (e.g., a templating engine) make that manual effort for you.",1532056525.0
_Chrimes,"I use Nunjucks and the best benefits for me are HTML includes/partials, template inheritance, variables, if statement logic, json data and macros for useable components. Guessing handlebars has similar features.",1532070764.0
steambap,"If you render yout HTML in backend, your page's content will be more friendly to search engine. In contrast, if you render your page on the client side using JS, most search engine cannot index your page' content.",1532063464.0
jkoudys,"I think that handlebars once fulfilled a need that's been long overtaken by techniques in modern ecma. Object destructuring, string templates, and arrow functions let us build very clean templates that we can use compositionally, and rely on consistent ecma syntax and Array methods instead of template microlanguage.

You can still update your page client-side using selectors as you suggested, but this technique also works well for server side rendering too.

E.g.

    const Item = ({ url, img, title }) => `
     <a href=""${url}"" class=""list-group-item"">
       <div class=""image"">
         <img src=""${img}"" />
       </div>
       <p class=""list-group-item-text"">${title}</p>
     </a>
    `;

So now I can get an html string from my template function directly (`Item({ url: '/example', img: '/images/foo.png', title: 'Pair of Pants' })`). Better still, I could render an array of them with a map: `searchResults.map(Item).join('')`. 

Check out the Templates in JS section here: https://stackoverflow.com/questions/18673860/defining-a-html-template-to-append-using-jquery/39065147#39065147",1532092238.0
eggtart_prince,"Don't know about handlebars, but a lot of template engine allows you to embed scripts inside before it is rendered into the DOM. The benefit of this is that, if you pass in your authenticated users object to the template, you can use logic inside to show and hide things based on user authentications.

You can achieve this with HTML/Javascript, but you have to build the content you want for that specific user type on server side and then send it to client side. Not very convenient.",1532162444.0
Kring0,Handlebars isn't really that useful unless U need to use partials to reuse parts across different areas. Template literals (ES6) will suffice in pretty much most use cases nowdays IMO. ,1532063423.0
sleepybearjew,"I think one benefit that I don't think j saw commented yet is hiding your js. Not sure if it's bad practice... But I feel like visible js on the site is sloppy (as is when u view source).

Or is that normal? Im still very new to this",1532078854.0
hyakkotai,"calling fail() does not break out of f(). it just happens after 500 ms. so both operations will always happen. did you mean to call process.exit() from inside fail?
",1532030715.0
kranker,"You can't, at least not how you want to here.

JS all runs in a single thread using an event loop to decide what to do next.  As you've written this `f` will simply run until it finishes then 500ms later `fail` will run.  Even if you schedule `fail` before you run `f` it can't run until after `f` finishes executing.  

If you actually want the behaviour you're describing you would check every XXXX iterations to see if you've taken too long and `fail` if you have.

Suggested reading: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop

",1532031113.0
BearBraz,It is always the Database 😉,1532042815.0
n0mat1c,What’s your stack on AWS? ,1532026687.0
toyonut,What is the mongo server running on? Also how many users in test vs running now?,1532066818.0
ndmweb,"What type of database are you using and where is it located? In my experience, it’s usually that there’s latency if database and application instances are in different regions or availability zones. It could also be your database queries or indexes need to be optimized. 

Have you tried benchmarking how long each step in your login handler is taking in the response? That might help determine the bottle neck. 

If it’s taking long to connect to the database, check the regions/location of database. If it’s taking long to run the query, try optimizing the query or adding proper indexes. ",1532050354.0
m3l7,"check your database CPU/memory usage. If it is overloaded, check your slow queries and optimize them, i.e. with proper indexes",1532082965.0
lord2800,Have you ever managed a jvm in production?,1532021574.0
MatthewMob,This doesn't even make sense even if it is a joke. They're two completely incomparable things.,1532047066.0
BLOZ_UP,How's that joke go? Java something something ProblemFactory.,1532022331.0
OzziePeck,This was so obviously going to happen. ,1532039179.0
drunkcatsdgaf,"[check out vhost module for express, which should handle alot of the heavy lifting inside the application ](https://github.com/expressjs/vhost)",1532065865.0
,ask the bootcamp leader that you are paying money to,1532026680.0
aetweedie,"Our QA team is using in our new React-Native app, we really just started with it. Ask me in a few months and I will have more info. Our one lesson learned so far is having test-ids in the front end code so they can access elements.",1532032734.0
tknew,"pm2 start app.js -i max

[https://github.com/Unitech/pm2](https://github.com/Unitech/pm2)",1532016195.0
Cyberuben,"Your while loop is synchronous, meaning it's a blocking operation. You should use `setTimeout(() => { res.send(""This was slow""}; }, 5000)`  instead.",1532006079.0
scaleable,"off topic: You probably shouldnt be using (node's) cluster anyway, load balancing is usually handled by something external to your app (i.e nginx or pm2) (and node's `cluster` used to be bad at load balancing).",1532007346.0
lzantal,"This is very cool. Never used VAPID before, this will be a good first how to on it. ",1532011547.0
listgrotto,This is evil. Please stop.,1532008650.0
nothingduploading,I think  YOU is a smell.,1531993527.0
RushPL,"We had such problem with nock hell here at Tenfold and I created a package to alleviate the problem.

https://github.com/tenfold/nock-sandbox-lib

Basically it makes nock manageable. It works similar to sinon sandbox, but for nock and it integrates with mocha to allow automatic cleanup.",1532031087.0
SuspiciousCompote6,This is something interesting.,1532004088.0
anubis2019,Its an awesome course. I got a strong understanding of what node really is.,1531995613.0
Buckwheat469,Http timeout and process titles. Nice features.,1531961996.0
Aesthetickz,My ocd is still waiting for 10.10.10 ,1531980643.0
theineffablebob,This is the version of Node ever ,1531960418.0
fourormore,Many commercial web apps use passportJs [citation needed],1531941957.0
sandeepsb,I know it's not fully node related but depending on how many users you're expected to have you can go for the free version of the Auth0 auth0.com service. I've used it a couple of times and it's so much easier to work with.,1531955772.0
programming_proxy,User login / reg is **hard** to roll by yourself.  would recommend using a 3rd party service like Auth0 / amazon cognito / stormpath to handle all the complex parts. Then you can just have a normal useriD column in other tables to link content to users.  [edit] spelling,1531958784.0
alphaindy,"One option is to use FeathersJS with the authmanagement library (uses passport). https://github.com/feathers-plus/feathers-authentication-management/blob/master/docs.md 

I just got done implementing/adding this to my own site",1531950577.0
pevers,PassportJS with some middleware like passport-local-mongoose that will take care of correctly hashing and salting passwords.,1531944096.0
timeparser,"I strongly recommend [Passport](https://passportjs.org) but at the end of the day, all I am certain is that user authentication, authorization, and login systems are hard. 

Try not to build your own login solution unless you are absolutely confident in your skills and experience.

Easier options like Auth0 may be a good fit, but may become expensive as you scale in terms of daily active users and/or registered accounts. There is always a tradeoff, sometimes you can afford it, sometimes you cannot.",1531960736.0
fishingBakersfield,Passport.js is the best. Many auth strategies to pick from as well.,1531961768.0
tweettranscriberbot,"^The linked tweet was tweeted by [@GridDBCommunity](https://twitter.com/GridDBCommunity) on Jul 17, 2018 18:33:49 UTC (2 Retweets | 9 Favorites)

-------------------------------------------------

Here's how to get started with the GridDB Node.js Client!



[https://griddb.net/en/blog/getting-started-with-the-griddb-nodejs-client/](https://griddb.net/en/blog/getting-started-with-the-griddb-nodejs-client/)



\#GridDB \#Nodejs \#NoSQL \#IoT \#BigData 

[Attached photo](https://pbs.twimg.com/media/DiU9d9DVAAARlQy.jpg:orig) | [imgur Mirror](https://i.imgur.com/i1lSxKN.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1531933867.0
skewwhiffy,"Can you take a screenshot of your console? And run an 'ls' before the npm install command you're running, please.",1531937645.0
Blitzsturm,"npm operates out of the current working directory.  So you'll need to change that to the directory of your project.

You can use ""npm init"" to create a basic package.json file that has details about the required depend libraries.  Every time you use ""npm install X"" it will add to the list.

With a package.json listing the required packages you can use ""npm install"" to rebuild the node_modules folder so you don't have to keep all the required libraries with your project.

if you specify a start script in package.json (scripts.start) like ""node index.js"" for example you can use ""npm start"" to start your program.

Lastly, I'll sometimes use a ""cheat script"" to automatically check for the required files, rebuild them if needed then launch my project:

**Windows start.bat**

	cd ""%~dp0""
	IF NOT EXIST node_modules CMD /c ""npm install"" && del package-lock.json
	SET SOME_ENVIRONMENT_VARIABLE=SOMETHING_SECRET
	cls
	npm start
	pause

**Linux start.sh**

	cd ""$(dirname ""$0"")""
	if [ ! -e node_modules ]; then
	   npm install
	   rm package-lock.json
	fi
	export SOME_ENVIRONMENT_VARIABLE=SOMETHING_SECRET
	clear
	npm start",1531953283.0
SparserLogic,"You have a few options:

First, you can use ""await"" to ""unwrap"" the value from your Pomise

`let data = await request.get(API_url);`

Or, you can simply move your logic inside of the ""then"" callback  
`request.get(API_url).then(data => {// logic here});`  


Finally, you could have your ""request"" object unwrap the promise for you and return the data instead.",1531928636.0
FlyingQuokka,"Well it looks like you are still returning a `Promise` object, not the result itself. If you wanted to return, then you'd have to have a return statement inside the `then` clause of `requests.js`. If you can't change that code, handle it the same as a `Promise`. If you have support for `async`-`await`, use it, otherwise just pop a `then` and a `catch` clause on top of your `request.get` function call.",1531930946.0
,[deleted],1531950357.0
-victorisawesome-,"How did you install it? Most times, if you install it with your package manager (*especially on Debian*) it's super outdated. I suggest node version manager (nvm) to install node---it's really easy to install and use and I use it on all of my computers",1531927639.0
FREEZX,"Create react app should probably be installed globally (-g flag). By default global node modules require sudo to be installed, as they are installed in system folders on unix-based systems (i believe the pixelbook should be similar). There is a way to install them in a home folder: 

[https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md](https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md)",1531928464.0
Parasomnopolis,Have a look at https://docs.npmjs.com/getting-started/fixing-npm-permissions,1531953810.0
kryptkpr,"You can do stuff like:

const [a,b,c] = await Promise.All([list, of, promises])

That collapses three awaits into one but they need to be independent (each request can't depend on previous ones).",1531917509.0
webdevverman,I don't think this is a problem with async/await. It's a problem of architecture. ,1531921293.0
notAnotherJSDev,"If you're used to promises, think of `await` as a `.then()` call, except you can assign the result of await to a variable. And as someone already said, using `Promise.all()` can cut down on a lot of the clutter.

Edit: Thank you u/CommonMisspellingBot",1531921637.0
tucks_the_eskimo,You're trying to get to a point where you don't have to use puppeteer's waitFor methods as much or write less code so you don't have as many lines with await in them?,1531936249.0
code_barbarian,"Your request is pretty vague, hard to give any specific suggestions without more concrete details. If you're looking for some general advice, I wrote a blog post on async/await design patterns:

http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html

And a more general one on using async/await in Node:

http://thecodebarbarian.com/80-20-guide-to-async-await-in-node.js.html",1531922542.0
voodooattack,"One way to break serialisation is with holey arrays. One of the “features” of JavaScript I hate the most.

```
const a = [];

a[1000000] = true; // you can add more zeroes for more cowbell

JSON.stringify(a);
```

How this can be used against you: never accept an array index as a GET/POST parameter in a write operation. 

It’s an obscure DOS vector that can crash your server.

Although it won’t cause memory problems immediately (your array will become HOLEY_SMI_ELEMENTS or something similar in V8 depending on its contents), your server can implode if it attempts to enumerate (by index) or serialise (through JSON or database) such an array.",1531927379.0
inabahare,"Punch it



Really hard",1531918499.0
monsto,"If you don't know enough of node security to know the common attacks or problems, why are you writing a blog post on node security?",1531922943.0
Feedia,"* `body-parser` is pretty awful and is used by many node applications. Send it incorrect JSON inputs and it'll error out, potentially killing the application if not handled correctly.

* Sending node a burst of *concurrent* connections along a request path that will cause a lot of IO events to trigger may also cripple node, as the standard library (which a lot of developers utilise) is generally blocking:
https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/
* If you're trying to be reeeeally crafty, [a major weakness in the NPM ecosystem was exploited](https://dev.to/kuhnerdm/eslint-and-the-problem-with-npm-51kl) to effectively install malware into a package that was a dependency of countless other packages causing it to be downloaded if `npm install` was run during the time it was live. This ecosystem is incredibly intertwined with pretty bad security practices. If you had a target application in mind, you could try to figure out a particular node module they were using, find out all of its dependencies (and dependencies of dependencies), and somewhere along the line you attack the weakest link to publish a malicious version of a package that is eventually installed onto the server in question (as well as likely many others!).

There's a lot of others out there but that should give you some starters :)",1531919781.0
ominersh,Hijack npm module: [https://nodesource.com/blog/a-high-level-post-mortem-of-the-eslint-scope-security-incident/](https://nodesource.com/blog/a-high-level-post-mortem-of-the-eslint-scope-security-incident/),1531913701.0
bablador,"Using ""default"" secrets to hijack session",1531912971.0
psayre23,"My favorite is to look for regexs in common libraries that are open to pathological inputs. Some poorly design expressions can lock up a CPU with carefully crafted arguments, typically sent in GET or POST.",1531930857.0
erulabs,"As others have mentioned - regular expression based DoS - tons of applications will happily deal with arbitrary regex, and it's quite easy to burn a CPU down with a properly crafted regex.",1531935700.0
carb0n13,"Sometimes node applications will naively pass JavaScript objects parsed from JSON to an ORM such as Sequelize or Mongoose.  An attacker can format their JSON as a query object for an ORM, leading to a node.js specific form of database attacks.",1531925214.0
ecares,">  many Node developers let the process exit on error

This is actually a side effect of the Event loop in node

Attacking node apps is a wide topic. check Sqreen's blog.",1531914121.0
kenj0418,Like this: https://www.youtube.com/watch?v=jCPP2A9mHtM,1531919503.0
virtulis,"Not exactly Node-specific, but Node applications are more likely to use WebSockets.

I just googled and yeah there are tutorials that show how to use cookies from handshake for authentication. Which is convenient if not for the fact that CORS does not apply to WebSockets. You are supposed to check for `Origin` header on the server instead.

In other words, if you have a cookie on `example.org` and I create a `new WebSocket('ws://example.org')` on any other domain, this will connect to example.org with your cookies and with my site having full control over the connection. If the server only checks the cookie, I'm you.

Everyone (hopefully) knows about basic CSRF, but this is more powerful and less known.",1531929701.0
Sanguistuus,One of the vectors that seems to be often overlooked is server side JavaScript injection which allows remote execution of arbitrary code when user input is evaluated inside a function that doesn’t ‘use strict’,1531940169.0
danielkov,Guy Podjarny of Snyk.io already has a lot of very concise material up on YouTube on this topic. Snyk.io itself is a great tool to check up on vulnerabilities found in common NPM packages.,1531919853.0
Entheist,Owasp top 10 has some good points,1531941839.0
_0-,">many Node developers let the process exit on error

Are they really? I was under impression that adding a handler for uncaught exceptions is one of the first things done in most projects.",1531919296.0
boxxa,Attack the event loop and cause it to crash or become very slow. ,1531929317.0
TheOneRavenous,"So theres another node subreddit. Curious why someone is trying to userp the original node subreddit.

Maybe for marketing purposes.",1531922777.0
gogodr,Use node-cron ,1531900652.0
TyrionReynolds,"The lambda can be invoked using a cloudwatch scheduled event, so that’s easy to do on schedule.

Then if I’m understanding your use case it will retrieve a JSON object and store it somewhere.  You’ll also expose a GET route to retrieve the JSON object later?

AWS Lambda is a concept called serverless.  Basically it means that you only pay for the server time when your code is executing.  But it also means you can’t do things like write to a local file on the server and expect it to be there later.  A lambda instance will only persist for like 5 minutes if it’s not invoked again.

So if you want to store a JSON file somewhere you’ll need to pick a storage technology like mongo, or dynamo, or s3 even.  

The GET route should be set up using aws-serverless-express.  That plus a library called serverless, which is a framework that will make it really easy to deploy your lambda and integrate with API Gateway to expose the route to your iOS app.",1531887298.0
30thnight,"If it’s a JSON file, you can probably bundle it with your lambda function and deploy that. 

But you can also call the AWS SDK and grab from S3. ",1531896386.0
macdmio,"OK, so my understating is that you need to make a call every 15 mins to some URI, get data, cache it and make the cached version available to your app publicly. Am I right?

IF so, all you need to do is write simple Node code to get data from URI - you can use Axios for this: https://github.com/axios/axios

Once you will have data available, you can either store them in Mongo, S3, MySQL, Postgress etc etc etc. You need to decide what's best for you - it also depends how much data you will have.

Then once you have your data, you need to create new Lambda and link it to AWS API Gateway. That function will get cache and will display it.",1531911224.0
TyrionReynolds,If I were you I would use a mongo instance hosted at mlab for storage.  Their free tier will probably be all you need and (as the name suggests) it’s free.,1531887393.0
CherryJimbo,"There are a few standards that have emerged, but it's basically just logical response data and JSON. Express has helper methods for this such as `res.json`, which I'd recommend using. 

Some standards (though there are many more):

- http://jsonapi.org/
- https://labs.omniti.com/labs/jsend
- https://google.github.io/styleguide/jsoncstyleguide.xml

Additionally, take a look at some popular services/libraries like https://stripe.com/docs/api/node#charges and see how they handle API responses.

As long as what you're doing is logical, you use applicable response codes (200, 404, etc.) and document it well, you'll be good. ",1531881836.0
Djbm,"Others have mentioned it but it's useful to make sure that the correct HTTP status code is sent in the response. It'll make your service much easier for client libraries or applications to work with and help with troubleshooting. [httpstatuses](https://httpstatuses.com) has a succinct list of the codes and a basic description of each one.

Other than that, it really depends on what you are trying to do. If you are writing an API, you typically send an object as a response using `res.json`. Maybe you are making a website that is rendered server side, in which case you might use something like [pug](https://pugjs.org/api/getting-started.html) and actually return a HTML page.

Without knowing more about your project it's not really possible to say what you should be sending as a response to requests.",1531884402.0
nospambert,I just send a string like success if its an ajax call from the browser. If its an api i send an object and status,1531881766.0
mitchjmiller,"If you don't have anything meaningful to return in the response you can use the 204 (No Content) response status code instead of 200. This would be pretty standard for back-end APIs that have completed their operation successfully but don't have anything to return back.

Examples might be typical PUT or DELETE requests; you're asking to update/remove a resource; not much you need to return here generally other than ""it worked"" so a 204 response is generally sufficient.",1531905973.0
dralach,I’m using it in production and I’m really happy with it! The api gateway integration is very good and covers pretty much all functionality. Easy to get started with and pretty much zero boilerplate and configuration. Definitely worth a try!,1531871077.0
mweichert,We use it extensively here. No complaints at all about it. I like it better than serverless.js because there's no boilerplate required.,1532441686.0
Martoo6,"Are you aware of the existence of projects like: feathersjs ?
They provide CRUD REST wrappers (among others) for a ton of databases.
Does restex provide anything over this?",1531874623.0
teja42,I can't wait to use a 40MB calculator,1532836072.0
herve76,+1 NIM /u/NimiqTipbot,1531861069.0
jkwysdom,Super low effort post. Would be great if you even put the slightest bit of effort into it like maybe an explanation of what it is and some notable stuff.,1531842613.0
PaperCow,"This is more of a React question than a node one, definitely check out /r/reactjs.

There are a lot of different solutions for routing in React. The most popular is probably [react-router](https://reacttraining.com/react-router/web/guides/philosophy). Those docs are a good place to start. Sorry I don't have a more specific ""do it this way"" answer but the question is kinda vague and open ended.",1531817910.0
BTMPL,"If by `index.js` you mean the file that has express (or other httpd) in it, then no - react-router works (mainly) on the frontend, so you declare routes in your React app, not the backend app.

You will need to provide the history fallback API if you want to use BrowserRouter.

Additionally, you might end up setting routes on the backend if you want to add SSR to the mix. But thats a topic best left for later.",1531819547.0
TammiWhammie,"react-router uses declarative routing which is a bit different from declaring a static route config. Read through the Philosophy section before anything else. Once you're used to it, you'll find that it's pretty flexible. 

https://reacttraining.com/react-router/web/guides/philosophy

npm build will probably call webpack to compile the code, but do check in package.json to be sure. To figure out what the compile process does you gotta look at the webpack config file. From my experience you can just copy the build result to the production server's root directory and things would just work. 

And as others have pointed out this is more of a react question. Unless ofc you wanna follow up with something node-specific. 

",1531820243.0
CryptoPeto,"Your “ps” does make it sound like react-router is the route to go. I’ve also used a proxy server as well that I directed api calls through. Then that server was node/express. Pretty simple to set up with concurrently module.

This is a decent resource if you scroll towards the end:
https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/",1531834671.0
JakeGore,"The way I do this, is I set up a normal Node project and then keep all of my React code within a directory, I usually call it `client`, in the root of my project. Make an `index.js` file in the `client` directory and use this as the entry point to the React app. You will need to use **webpack** with **babel** to bundle your code and turn your ES6 and JSX into older ES5 code that is compatible with older browsers. Here are the websites for [webpack](https://webpack.js.org) and [babel](http://babeljs.io/). Configure webpack to output the files to another directory that is in the root of your project, `public`. In your HTML page, put script tags with `src`s to the files in the `public` directory. Once this is done, you will be serving HTML files from your Node server and the HTML files include script tags that include your custom transpiled React code.

With regards to routing, you can use either. I would recommend making all requests to your Node server serve the same HTML file. This file could link to React code, where you can use `react-router` to control routing.

If you want to create APIs on your Node server, for example `/api/users`, you could implement that route within your Node server. Then in the React code, use a HTTP client package such as `Axios` to make HTTP requests to the API routes on your server. This will return the data that was sent by the Node server and you can use it in your React code.

I hope I've explained that well, but if you have any questions, just ask :)",1531839445.0
isakdev,"Routing is handled on the client side via react router.  
Your node api just serves endpoints that the single html (thus the name single page web application) consumes under different conditions/components/routes.",1531843244.0
Sythic_,"Dont bother with SSL in node, use nginx as a reverse proxy to your node process to handle the SSL.",1531828047.0
NetOperatorWibby,>	Node.js is using **Java scripts** for function on the server.,1531826519.0
ecode311,"I have opensource projects that are not strictly related to web development because it feels nice to get a bit detached from my daily routine. Also, there are so many frameworks or workarounds out there that it is best if you contribute to one of them that already exists, this way you will gain more experience in the opensource development as well and feel useful instantly.

But if you go the hard way I would do something awesome that is beyond expectations. Release it soon keep polishing it afterwards.",1531810001.0
Thommasc,"I'll just share with you 4 ideas I want to develop myself. This might give you some ideas.

**1) A video game assets database**

A website where people are invited to gather video game assets by category:

\- RPG Spells

\- RTS Units

\- FPS Weapons

\- Moba heroes (there is already a website cross gathering this data)

Add some gamification to reward users that input data.

And make it challenging to gather data from old school games.

Then add data analytics on top (like [metastats.net](https://metastats.net))

**2) A fun dashboard for startups**

I wanted to build a geckoboard but instead of being oriented purely into showing relevant data,

instead I want the dashboard to adapt to a small team daily usage.

Basically I want at 11:30 to display list of nearby restaurants and why not pick randomly a top 3

If there is a new relic alert to display it (a website is down)

During lunch break, just play fun youtube video

You get the idea

**3) A gamified discussion system**

I want to build a clone of reddit but instead of having a single thread of comments, you have 2 and they are polarized by answering for/against to a question.

This was especially designed for kpop news as there is always some drama.

Let's say a kpop artist did something bad but it's just a rumor.

There will be team #Ilovemyartist and team #hestheworst

Then you add gamification with mario kart style items to give more power to attack or defense.

And participating grants you points to buy these items and use them to boost the score of your team.

**4) A real life action RPG skill tree system**

I want to build a system that looks like Asana (a todolist/project manager) but each task will turn into a skill.

Everything will turn into a skill tree.

Example: learning piano. Learn the basics, learn to read music sheets, and so on.

Then people can share their builds with each other.

It's like a recommandation system but that looks like an action RPG.

If you know anything similar to these 4, please let me know : )

I'm using serverless framework + dynamoose + auth0

For the frontend angular",1531812911.0
AxelTerizaki,"Why not participate in a project you like already? 

There are tons of projects out there, just not libraries or frameworks, but apps relying on them, that need people to help out.

When developing mine ([http://mugen.karaokes.moe/en](http://mugen.karaokes.moe/en), a Karaoke manager/player) I used several libraries, and sometimes needed this or that feature added, so I went to those and offered ideas or even pull requests sometimes. 

Finding a project you're actively using everyday helps when choosing what to invest your time on.",1531833736.0
asilluron,"\> 20+ years industry

\> Have worked with the near all of the major banks in the USA and other major financial institutions around the globe

I want to make sure you don't listen to anyone else so far that claims simply ""encrypting"" a piece of sensitive data (with a single key) and storing it in a DB is fine. It's not. If you lose the key or you have a single person in your org (with access to the encryption key) that is malicious, now they have access to ALL of your users' data. 

The first thing you want to do is establish an authorization service inside of your project that that is independent of all other systems.   


This service will do one thing, it will take the identity provided by PassportJS and translate that identity into authorization data. In this case (without discussing everything else you would use the service for) we would just store a hash of the decryption key and a hash representing your ID for any other service.  


* Autz Service *
Identity -> Master Pass Hash, Username Hash

* API Key Storage *
Username Hash -> Encrypted API Key

If anyone looks inside your DB at the API keys, they will only see non-sensical hashes tied to encrypted data. Furthermore, even if someone had access to both systems (there are multiple ways to avoid this problem), they still wouldn't be able to decrypt the API key without the user's input.

There are 1000+ ways to do this correctly, I just wanted to make sure I put you on the right track.



",1531796240.0
Djbm,"Generally you’d encrypt the value before storing it in the database, then decrypt it after you’ve retrieved it.

The challenge is managing the encryption keys and where to store them. You obviously don’t want to hard code them into your application.

Generally environment variables is the way to go for things like encryption keys.

**Edit:** See the more detailed answer by assiluron on managing encryption keys for better practice. If you are the only one working on your project and you control your environments, depending on the data sensitivity environment variables might be OK. for anything larger or more sensitive an authorization service and more robust key management is required.",1531779083.0
robotmayo,"You typically dont want to encrypt api keys. You want to hash them, hashes are one way while encryption is two way. You also wont need to store and keep track of a decryption key. Bcrypt is fine for keeping credentials like api keys as you should treat api keys like passwords.",1531781787.0
pixablaze,"I could be wrong, still learning this, but sounds like the api keys need to be encrypted, not hashed? Assuming that, the question then becomes what is the best way to securely store the encryption key? Someone mentioned using environment variables, but I’d say even that isn’t enough. What if someone gets into the server, or gets ahold of a backup? Game over. There needs to be an encryption key for the encryption key - preferably multiple keys, split up (not on same server) and combined when used. How far you take it depends on overall security setup and other factors. If you really want it secure, each credential should use its own encryption keys so if one is cracked the whole db isn’t opened (possibly overkill). I believe a key management service is made for this. Something like https://www.vaultproject.io, and/or AWS Secrets/KMS. They can store the true master decryption key that decrypts the main key, and set leases on them (can even make each one-time use), rotate, revoke, etc. That way even if the main server gets stolen, the data is still safe. I was just reading how Vault splits your key to even access the vault into 3 parts, and all 3 are required to unseal the vault (which you’d only use to store an encryption key to decrypt the key stored on your server). You can even store those 3 keys on 3 different servers if you want, and trigger them each to send consecutively to authenticate. Maybe this sounds unnecessary, but I’m sure some apps storing truly sensitive data go even further than what I’ve described. I’ve searched for a comprehensive guide on all this, but I don’t think that exists. Maybe because the exact strategy is highly dependent on your app, server and network environment, type of data, and business or legal concerns surrounding what level of risk is acceptable vs the cost to implement. ",1532112898.0
steambap,"What you want is application specific and passportJS probably will not work. However, you can encrypt them with the buildin ""crypto"" module easily.",1531789869.0
_Samin_,Why don’t you start by reading official documentation of knexjs ?,1531777536.0
a_atalla,"try this tutorial, it uses postgres but you can use it for mysql with some changes, it isa test driven which is a good thing and well structured project

http://mherman.org/blog/2016/04/28/test-driven-development-with-node/
",1531846459.0
sleepybearjew,"I'd check out a tutorial on YouTube or udemy or one of the free sites (not sure which)

Or just search stacexchange",1531780449.0
cobalt8,"/u/RoffeDH nailed it on the head. You have a great voice, you just need to speed it up a little bit. And I think it would be ok to be a bit more upbeat, if you wanted. Videos are always better for me when I feel like the creator actually enjoys the subject matter. ",1531775471.0
RoffeDH,"Good visuals, informative and all that. But I really do think you need to speed it up. You have a great deep voice for voice over (my grandfather was a pioneering radio host/DJ/PD back in the 60's if that gives me any credentials for this) but your delivery is rather dry and slow. I'm not saying you need to be upbeat (not that kind of information) but you need to retain your audience attention and not force them to skip around if they get bored.

However, with all this said: just keep at it and you'll learn this in time I'm sure. Don't sweat it too much.

Good luck",1531767246.0
swyx,subscribed. keep it up!,1531808765.0
gatesplusplus,First thought is narration is way too monotone and slow. It's annoying when narrators sound too upbeat too though. I think it's important to find the healthy middle ground. ,1531815963.0
mariotacke,"I agree with the others, a little less monotone and perhaps a little faster. Also, are you using a pop filter in front of your microphone? If not, you should :)",1532009300.0
SparserLogic,"I transitioned from .Net to Node/Fullstack JS.

I don't know if its cheating or not but I was a Lead at the time and simply started building things with Node when I could and had no one to stop me other than Architects that already listened to me anyway.",1531756685.0
brainsiq,"I've gone from .NET to Node. In London there are quite a few .NET companies out there that are transitioning or beginning to use Node.  I have a few other friends who have made similar moves and neither they or I have experienced a paycut AFAIK.

The contracting market is also pretty healthy for Node roles so if you are experienced and motivated enough then I don't think you should have any problems.

Perhaps I'm just fortunate.",1531846091.0
nowhey,just curious why you might prefer writing a server in node than java?,1531763633.0
notAnotherJSDev,"So, you literally just ripped the Heroku docs for your article? Because that's what this looks like.",1531749427.0
ecares,It looks a lot like Heroku's documentation actually,1531745729.0
Boris-B,"Why not nginx? Honestly this seems rather silly. There are plenty of good, fully features and performant reverse proxies out there. Why would you write your own in node?",1531744087.0
ChronSyn,"I've never been able to get PM2 working with cluster mode properly - either some error would prevent launching (usually EADDRINUSE) or it'd lead to crashes.

See, PM2 might support cluster mode, but I can't find a lot of information about supporting single-listener with multiple children. Think of it like this; I can have multiple ports and multiple applications, but I can't have applications sharing a port, and a port can't be shared by applications.

One solution is to use the good old node cluster module method, which allows your child express instances to listen to one master (instead of listening to the socket). This worked pretty flawlessly for me - using sessions did require a database and ensuring that it had a high enough connection pool available, but generally worked well for scaling. This also has the advantage that you can programmatically scale up to the number of cores you want to, or up to the number you have available (if you don't want to reserve any for other tasks for example).

Another solution might be to use nginx. Setting up the app to listen on a port (or port+*n* if port is in use), and telling nginx to redirect traffic to the relevant instances. This is a more extensive solution that requires some nginx knowledge.",1531835477.0
Ryan9104,Have you tried with a bare express app?,1531756106.0
jybleau,"Hi @u/Cinek2, did you figure out what was causing the problem?",1539800634.0
,[deleted],1531750490.0
rustemk,"Oh these moments, when developers trying to joke :)",1531761881.0
bokisa12,That joke at the beginning is so unnecessary and bad that it hurt.,1531777483.0
TheZanke,You never wanna go Full JIT,1531783333.0
,[deleted],1531735598.0
steambap,"I run ""npm i live-server"" on my mac and it works fine.

node version v8.11.3 / npm version v5.6.0",1531717914.0
captainahhsum,"I would try to save it as a Dev dependency. There is no reason to install it globally ""npm install live-server --save-dev""",1531722614.0
TheOneRavenous,"Seems like it installed correctly. An ""optional"" dep(dependencie) failed, continuing. 

It doesn't say live-server didn't install. So not sure what you're excluding from your error message.",1531765556.0
FurFaceMcBeard,"I ended up using the live server extension instead of live-server. 

I'm not sure what was going on, but my solution works fine.",1531886331.0
MrWasdennnoch,Do you have an index.js file in the directory you're running the command in?,1531697371.0
Boris-B,Did you define the `main` key in `package.json`? https://docs.npmjs.com/files/package.json#main,1531702858.0
tswaters,"What is loc8r??  

To answer one of your questions, start the program with:

    node --inspect-brk .

This will attach a debugger and pause execution on the first line.

Visit `about://inspect` in chrome and click the link for your app to continue execution. ",1531706408.0
jakubiszon,Yes. If you are using a database it makes sense to put your app settings there. If your app is updating them it means it treats them as data.,1531696045.0
adamgb,"If it was me I would just use environment variables.

https://www.npmjs.com/package/dotenv

Leave all your database settings the same in your env variables and make up new ones for whatever feature toggles you want to build.

Edit: my bad, I misread the part about toggling from user input. I was thinking different features for different instances of the service. Yeah a settings table joined to your user would work great, or if there's not that many you could just add the settings as a column on the user model",1531693053.0
desmone1,"Your initial use case of storing key/value pairs is pretty much whats behind the design of redis. With MYSQL if you have a settings table you're columns might be ""key"" and ""value"" and then each individual setting would be a row. You'd be pretty much recreating what redis does.

If you have other data you are storing in MYSQL then maybe having on datasource might be beneficial.

",1531698179.0
,[deleted],1531692471.0
pietvanzoen,If you’re already comfortable with Redis’ query syntax you could just go with that. Otherwise I’d say this is the perfect use-case for MongoDB. It’s not as fast as Redis but if you’re coming from JavaScript the learning curve for the query syntax is going to be much easier. ,1531715333.0
JakeGore,"With react-create-app, you don't need to set webpack up yourself. You can just run npm start and it will set up a dev environment for you.",1531689577.0
talyguryn,do you have a problem with webpack config for your react app?,1531690577.0
xbudex,"The good news is that ES5 is a subset of ES6, there is no need to refactor. It looks like the question is about module loading. ES6 did add module loading syntax, `import [module] from [location]` and `export [expression]`. The problem is that the import/export syntax is defined, but the actual loading isn't defined in the spec yet.

My best advice is to avoid using import/export now and stick with the commonjs pattern to just get things to work smoothly. `const [module] = require([package])`. There will be a point when you can just use import/export, but we aren't there yet.

If you have questions, I would suggest searching for ""module loading"". Also look for CommonJS, it was the de facto standard for module loading in JavaScript.",1531687727.0
nekocoin,"You could replace function calls with arrow functions, but it won't always work (""this"" context is different for arrow functions). 

ES6 is compatible with ES5, you don't have to refactor. ",1531686488.0
karatechops,Cant you just use `nvm alias default version.num` once without a bash script? ,1531665145.0
d4nyll,"This alias would automatically detect a `.nvmrc` file in the directory you're `cd`ing into, and switch to that version. And when you `cd` back, it will automatically switch back to the `default` version.",1531665770.0
patrickfatrick,There's also [avn](https://www.npmjs.com/package/avn) but this is nice because it wouldn't be tied to something that has to be installed by npm.,1531683608.0
zarrro,Simply use direnv https://direnv.net/. Way better and you get the same effect. ,1531723738.0
kykythemagicguy,Nice! Been using [nodenv](https://github.com/nodenv/nodenv) which does this automatically if it detects a .node-version file,1531705169.0
durandj,I'm a big fan of ndenv for this reason. I don't need to mess about with remembering to switch versions or setting up bash/zsh aliases. It just all happens automatically.,1531708840.0
Bosmonster,"I use n, which just lets me do something like ‘n 8’ for the latest version of 8. Don’t think it gets more convenient.",1531669453.0
koviko,I found that the workshoppers in [NodeSchool](https://nodeschool.io/#workshopper-list) were very useful for getting some hands-on experience.,1531660603.0
waveyrico,Check out Wes Bos's Learn Node course. Definitely worth the money in my opinion. https://learnnode.com/,1531664941.0
xAmrxxx,"[https://www.edx.org/course/introduction-to-nodejs-0](https://www.edx.org/course/introduction-to-nodejs-0)

I took this course as a beginner. It gave me a solid foundation.",1531663483.0
anubis2019,Andrew mead on udemy. he helped me building a strong knowledge base of how node works.,1531703093.0
steambap,"+1 for NodeSchool. If you already know JavaScript, you can just start with their ""learnyounode"" lesson.",1531703064.0
ReactDOM,Here's a list of curated [Node courses](https://reactdom.com/node). I'd go with [Wes Bos' Learn Node](https://LearnNode.com/friend/REACTDOM),1541114658.0
theguysperry,Udemy.,1531659249.0
somethingon104,"The nodejs Master Class at Pirple.com. It’s all node fundamentals. No npm, no express. You learn core. This is a great place to start. Modules are fine but it’s better to start with a strong grasp of how node itself works before using higher level abstraction.

https://pirple.thinkific.com/courses/the-nodejs-master-class",1531665353.0
Zooooooooo,"Traversy Media has an informative 12 part course on YouTube 
Believe it covers Node.js/Express/MongoDB",1531659569.0
BTMPL,"That's not an node issue, that's how zeit works.

https://zeit.co/docs/deployment-types/node#deployment-inactivity",1531646600.0
lefooey,"Zeit is not for long-running processes. A good solution might be to deploy your node function to AWS Lambda and use Cloudwatch to call it every 8 hours. If you’re only calling it three times a day, you’re well within the Lambda free tier. ",1531691472.0
oo22,"Generally speaking hosting your own site for production or serious usage off of a home computer with a home connection is not recommended in my books.  But for fun and learning and testing go nuts!

Reasons being:

- a home connection is not reliable enough for prolonged up-time and possibly even against your TOS for internet usage. (if you spike huge traffic or something goes wrong your ISP will get suspicious)

- Restarting services is a huge pain in the ass.. Generally speaking you want 100% up-time with absolutely no unexpected ""whoops, i tripped over my power cord"" moments ever.

- It seems you have a router you are running this through.. My experience with home routes is they need to be restarted often when large traffic comes in.. they are not designed for the load.


I could go on but honestly your better off paying 5 bucks/mo at [DO](https://digitalocean.com) or somewhere. 

Disclaimer: This is for any kind of a REAL setup, go nuts if your learning.

Edit: you haven't told us which OS your using? I'd recommend a linux distro if you haven't gotten into that yet ;)",1531622920.0
shastacoop13,"You would port forward your server ports through your router which would make it accessible to the internet through <your external IP>:<port number> and then you would configure your dns routes on the domain to connect to that ip and port. Not very difficult, but this is not a good idea from a security perspective as it opens your home network up for attacks.",1531610817.0
emcniece,"https://github.com/Hashnode/mern-starter has a Docker spec that makes it pretty easy to get started.

Requires [Docker](https://www.docker.com/) and [Docker-Compose](https://docs.docker.com/compose/).

    git clone https://github.com/Hashnode/mern-starter.git
    cd mern-starter
    docker-compose up -d
",1531613539.0
,"Before worrying about the MEAN stack, I think the first step for you is to get any web server running on your local network if you're unsure how to do that. Node (the N part of the stack) is capable of running a simple web server, and so the next step is to host it on your local network.

Once you've managed to do this, stepping up to the whole MEAN stack and hosting on the internet instead of your local network will probably be pretty easy for you.

Feel free to PM/comment me if you have any questions! ",1531642663.0
runvnc,Each thread needs to be associated with a particular forum with an ID or something.  The forum is the parent entity and the thread is the child.,1531612350.0
vvarboss,[https://github.com/NodeBB/NodeBB](https://github.com/NodeBB/NodeBB),1531607858.0
bitvox,All you need to do is add jar: true to the options on both requests. ,1531599208.0
EmanuelBuholzer,"If you can go all the way synchronous, something like to following can do the work for you:

```javascript
const fs   = require('fs');
const path = require('path');

function walkSync(dir) {
  const files = fs.readdirSync(dir);
  
  let dirTree = {
    path: dir,
    size: fs.statSync(dir).size,
    content: []
  }

  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stats    = fs.statSync(filePath);

    if (stats.isDirectory()) {
      const dirEntry = {
        name: file,
        path: filePath,
        size: stats.size,
        content: walkSync(filePath)
      }
      dirTree.content.push(dirEntry);
    } else {
      const fileEntry = {
        name: file,
        path: filePath,
        size: stats.size,
      }
      dirTree.content.push(fileEntry);
    }
  });
  return dirTree;
}

const walkDir  = '/home/kalim/example';
const contents = walkSync(walkDir);

console.log(JSON.stringify(conents, null, 4));
```

It's far away from perfect but does its job.",1531650812.0
RinoDrummer,"Try outputting `JSON.stringify(path, NULL, 4)`.",1531610319.0
runvnc,"    const dirTree=require('directory-tree'); 
    const data = dirTree('./subdir');

EDIT: Downvoted to 0 even though it does exactly what he is trying to do.",1531623494.0
,[deleted],1531607270.0
herve76,+1 NIM /u/NimiqTipbot,1531632439.0
runvnc,Search on npmjs.com for folder size or directory size or walk.,1531611995.0
virtulis,"Hint 1: `async/await` and `util.promisify` (and `Promise.all` if you want it to work a bit faster). None of this is required for what you want but it will make things much easier.

Hint 2: use a return statement (if you take Hint 1) or an extra callback (if you don't) to give info about each child directory to the calling function (and so on).",1531635875.0
OzziePeck,"A Bat file is a script for the terminal, it will open a terminal because that's what runs it. ",1531596332.0
PhroznGaming,"See: https://stackoverflow.com/a/23558301

Just use powershell isntead of VBS if you want.",1531603167.0
SandOfTheEarth,"As option you can run .bat file using VBScript, which allows hidden cmd window. There is a couple answers in stackoverflow about it.

Also you can try converting it .exe.

Maybe there is good ""node way"" also, but i never did node + .bat file stuff.",1531603495.0
jroller,"There was [link and discussion](https://www.reddit.com/r/PowerShell/comments/8qsndn/sneaky_powershell_trick_run_completely_without_a/) on r/powershell a month ago on this topic.
",1531606827.0
sshaw_,"What is the JavaScript code doing besides shelling out? Instead of batch or VisualBasic (VBA) code maybe you can use Windows Script Host + JavaScript?

Here's some random ""[JScript](https://en.wikipedia.org/wiki/JScript)"" I have on my filesystem: 

    var shell = new ActiveXObject('WScript.Shell'), fso = new ActiveXObject('Scripting.FileSystemObject');

    // snip other stuff

    function exec(argv)
    {
        var cmd = shell.ExpandEnvironmentStrings('%comspec%') + ' /c';
        for(var i = 0; i < argv.length; i++)
            cmd += ' ' + argv[i];

        WSH.echo(cmd);
        var proc = shell.Exec(cmd);
        var out  = proc.stdOut.readAll();
        var err  = proc.stdErr.readAll();

        WSH.echo(out);
        WSH.echo(err);

        if(!proc.status || err.length)
            throw new Error(err);

        return out;
    }

You can run this from cmd.exe via `cscript FILENAME.js` or even `FILENAME.js`. ",1531680412.0
Lambotherambo,You have to redirect the standard output or tell it to be ignored which I know hoe to do in .net tho not sure with node. Im sure there isna way to do it tho,1531615042.0
Genereux2018,Have you looked at Nest.js,1531592780.0
SnowyMovies,I've made a rather large api with ts-express-decorators and typeorm. It was a joy to work with.,1531640753.0
overthetopclock,"yes,checkout nestjs",1531609483.0
TheWillG,Dinoloop ,1531631677.0
theTypeScripter,"You should really check out the library I wrote, OvernightJs, link [here](https://www.npmjs.com/package/@overnightjs/core). It's simple, quick and easy to work with. If you already know ExpressJS it takes about 10 minutes to get familiar with.",1536255533.0
misterlively,"Can you split the file into database rows on insert, then do the filter at the database level? I would not send a 5MB file to the client.",1531586397.0
OzziePeck,"Do it on the backend. If someone on a low power device views your website, they won't be happy if their browser has to filter out a huge file. There's no point in having the user download a file that you're only going to show half of (or how ever much it ends up being after filtering). The backend will be faster too. ",1531596997.0
nakade4,"Why not just use an off-the-shelf library like Octokit to interface with GitHub API?

https://octokit.github.io/rest.js/

https://github.com/octokit/rest.js",1531596214.0
voidvector,"Which authentication flow are you trying to use? 

[Here](https://developer.github.com/v3/#authentication) are your options: 

* Basic Auth (i.e. with username/password)
* Personal Access Token
* OAuth

I would suggest making your script work with ""Basic Auth"" or ""Personal Access Token"" first, then consider OAuth. 

To implement OAuth flow, you need to understand how OAuth works. (i.e. OAuth app, token exchange yada yada yada) That might take a few hours. ",1531619359.0
,[deleted],1531588835.0
kryptkpr,Todo List app. Tons of guides..  ,1531581670.0
randomFIREAcct,"You never 'finish' learning something like that. There is always more!

Some suggestions of other things to learn would be redux, react, socket.io. I've enjoyed playing around with those lately.",1531587010.0
OzziePeck,"Reading through JavaScript docs like so: (MDN) \[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide)\], will set your knowledge better and ensure that you understand both the syntax and the theory behind that syntax. In programming one can learn the syntax of a language and then think they know everything, they'll then struggle with learning and give up. Happened to me, never again will I be so naive. Once you feel comfortable with both the syntax of the language and the way everything works, why it is the way it is, and the theory behind all of it, try and solve a problem you face in your daily life (or weekly, etc), and try solve it with your newly learnt programming skills. Using programming to solve a personal problem in your life will motivate you to get better at it so you can solve it better.",1531597478.0
from-nibly,What kind of framework would you like to learn?  One where your backed serves static files and has separate json APIs. Or one that serves up html js and css after processing it on the back end?,1531583413.0
steambap,"You can take a look at https://github.com/madhums/node-express-mongoose-demo
It is a good example of more complex RESTful backend.",1531714761.0
kryptkpr,"docker pull mongo

docker run -d -e MONGO_INITDB_ROOT_PASSWORD= example -p 27017:27017 mongo 

You now have mongodb with username root, pw example on localhost. Use secure pw not dictionary word.",1531582003.0
solocommand,"From what I recall about code anywhere you can run a custom server and do a local installation there. Alternatively you can use MongoDB’s Atlas (hosted) service too boot up an instance, though I’m not sure if they have a free option.

Out of curiosity why not run locally? I’ve tried CA in the past, but having a local docker-based environment is significantly faster, both for coding and general workflow.",1531580411.0
samsmith453,"General REST CRUD protocol dictates that a GET ‘/city’ is a list endpoint returning all cities, or at least a limited number of unfiltered cities.

‘/city/:city-name’ makes use of a path param which is required in order to access the endpoint and apply the query by city name.

In contrast, using a query such as ‘/city?name=London’ creates a less explicit endpoint, because the query isn’t required, therefore you need to handle the cases where the query is & is not present. You’d also need to handle the case where the query is structured as an array, eg ‘/city?name[]=London&name[]=Dublin’. In this situation you wouldn’t be able to make use of a findOne dB query.

To summarise, using path parameters is explicit, and creates a required, limited input to your endpoint. ",1531580376.0
mapman2017,I think it’s more of a style preference. I believe format for req.params is the modern standard. ,1531574305.0
gingerius,"The answer is defined probably somewhere in the REST definition.

Params are for properties of the data object you wanna retrieve and query arguments are for properties of the query itself (e.g. sorting, paging).

In this case properties (path/url segment) would be my way to go since you are requesting the city resource London.",1531574642.0
tony-sunny,"For your use case, req.prams is more RESTful. But you cant use req.prams everytime. For example, it is better to use query for things like pagination, filtering etc.",1531582181.0
alphahoumous,"The convention for REST is that query strings are used more for stuff related to the state of the page you're on, such as filters or pagination.   
For example if you wanted to link someone to a paginated list of cities filtered by 'Europe' and London was on the third page you might send them this link:

mywebsite.com/cities?page=3&filter\['continent'\]='europe'

So that the person receiving the link wouldn't have to replicate your 'filter by europe -> navigate to page three' user journey to see the information you were trying to share with them.

They would then click on a 'London' link within that list that would look like this: 

mywebsite.com/cities/london",1531588663.0
scaleable,"I wonder why dont we just use POST + JSON body for everything (and GET for webpages and direct links), instead of adding layers of unnecessary variables (which verb to use? put something here on the header, other thing here on the query string, other inside another part of the url. Oh! That verb does not allow this. And that.). 

Prove me wrong: A lot of the REST ""stardards"" are just plain bullshit, besides being mostly innefective in providing standards (which would allow API details to be abstracted away -- this has failed: nowadays each API has its own ruleset), they even add another layer of bullshit on top of which would be otherwise simpler.

(on topic: 3000 pages of API Guidelines my MS https://github.com/Microsoft/api-guidelines)",1531606851.0
,"Just for clarification: ""draxt is a jQuery-like utility module for selecting and manipulating file system's objects in node.js environment. It uses [glob](https://en.wikipedia.org/wiki/Glob_(programming)) patterns as it's ""selector engine"". draxt also provides several DOM-like interfaces representing file system's objects that use promisified [fs](https://nodejs.org/api/fs.html) module's APIs."" ",1531570746.0
1-800-BICYCLE,"As far as a utility that basically bundles up promisified `node-glob` and `fs-extra` goes, I'd actually like to see a version of this that was ES-inspired rather than jQuery inspired.

For example, `forEach` instead of `each`, standard `map` behavior, etc. Although tbh I'm not sure if I'd even need a wrapper lib for it at that point (maybe a good thing?).

",1531578293.0
d4rkst4rw4r,"In all honesty, ignore the hate. I like it. It's a handy tool that is easy to read and does it's purpose well. That's all that matters. Thanks for sharing.",1531641015.0
theZcuber,Why not use class-based syntax and standard method names like `forEach`?,1531579719.0
pull_my_finger_AGAIN,Have you seen [cheerio.js](https://github.com/cheeriojs/cheerio) ?,1531569177.0
akujinhikari,"JQuery is a library that needs to go away, but it never will with things like this. ",1531568028.0
mirage27,"Your `writeFileAsync` function define the filename once, and all the array use the same value.

So each `writeFile` call write to the same file, and only the last write will be keept.

Also, you should probably use something more deterministic to name the files to avoid name collision (the index in the array maybe). Last thing, you can use `util.promisify` on -nearly- all the nodeJs own librairy to not have to encapsulated every callback yourself.",1531558146.0
pajamalife,You can try doing an array.push on a new promise in the for loop and then a promise.all,1531561033.0
Triptcip,Look into promise.all(),1531570746.0
mullam,"a promise can only `resolve` or `reject` once - so having those callbacks inside a `forEach` does not make sense. also, it looks like all data chunks get the same filename... so overwriting each other.. I guess.

here's a go **(not tested)**:

    const fs = require('fs')
    const { promisify } = require('util')

    const writeFileAsync = promisify(fs.writeFile)
    
    const randStr = () => Math.random().toString(16).substring(2, 15)
    
    const receivedData =[""iVBORw0KGgoAAAANSUhEUgAABM..."", ""4AAANiCAYAAACZ8IVOAAAKqGlDQ1BJQ0MgU...""]
    
    const promises = receivedData
      .map((base64Str) => Buffer.from(base64Str, 'base64'))
      .map((data) => writeFileAsync(`${Date.now()}-${randStr()}.jpeg`, data))
    
    Promise.all(promises)
      .then(() => console.log('All done...'))
      .catch((err) => console.error(err))",1531576907.0
majorius,maybe try to use async await inside a for ... of loop instead of forEach?,1531557242.0
selfup,"There is a `writeFileSync` which will wait until the file is written. Regular `writeFile` is async.

Try that!

",1531568958.0
,[deleted],1531561090.0
ELIPhive,"Need more information. 

What do you get when you console.log(request.body) on the server? Are you using body-parser to populate your request object with body?",1531532928.0
scaleable,"(writing on phone cant write much)
Fiddle around the tools that are offered to you to understand what is happening on tour program

  - the debugger on the browser (insert breakpoints and check the variables)
  - the network inspector (see the content and the response of your requests)
  - the debugger on node.js (ex: vs code)

Learning how to use these tools are the pillars of doing anything with javascript. If your course didnt teach those, your course is bad bad

Console.log alone wont take you much far",1531589478.0
bees_dolphin24,"What happens if you call the toString() method in what is returned by (this).text() does it work? If it does, then it might be some problem with what text() returns or maybe with how the return value of text(gets weird after being encoded). But often times that not it is something so simple that we have probably overlooked",1531607542.0
Ztientwickler,Are you trimming the text?,1531616224.0
kevindmorgan,"You're not stopping on line 167 you're only incrementing every 5th line so your total count of rows consumed is 167.

Your variable `i` is the line number you're on but you're also trying to use it as if it's the property you're looking for.

    var fs = require('fs');

    var file = fs.readFileSync('WashingtonEXP.csv', 'utf-8');
    var lines = file.split('\n');
    var count = 0;

    for(var i = 0; i < lines.length; i++)
    {
      var properties = lines[i].toString().split(',');
      var location = {};
      location.city = properties[0];
      location.state = properties[1];
      location.lat = properties[2];
      location.long = properties[3];
      location.population = properties[4];
      if(location.population > 1000)
      {
        var output = """";
        output += location.city + "","";
        output += location.state + "","";
        output += location.lat + "","";
        output += location.long + "","";
        output += location.population;
        console.log(output);
        count += 1;
      }
    }
    console.log(count);",1531527504.0
Slackwise,"I'm not sure what exactly you're going for here, but if you're just trying to get a set of cities with a population > 1000, you could just do:

    let populousCities = file.split('\n').filter(l => l.split(',')[4] > 1000);

And then if you really do just want to print the filtered cities out, just loop over `populousCities`.

Either way, I'd recommend using a CSV library to parse CSV, unless you're absolutely sure there will be nothing to escape in the input file.",1531565431.0
Seaoftroublez,"Why are you reading it like that?

```

const lines = file.split('\n')

for (let line of lines) {

  const [col1, col2, col3] = line.split(',')

}

```

Although there's a simpler way to read line by line. I'm just on mobile and don't remember off top of my head.",1531525020.0
bigorangemachine,"Do a `parseInt()`/`parseFloat()` on `location.population = properties[i];`.

If your data contains commas/multi-peroids you can't be sure how it resolves that greater-than-if

Otherwise without the whole thing infront of me; it looks good to me",1531526914.0
scaleable,(unrelated) dayjs for cool new-gen datetime lib,1531590174.0
phlarp,"You could maintain a list of active sessions on the server. When a user logs in, all other sessions for that login would be invalidated. Then just have the client routinely check that their session is still valid. 

If you want the logout to happen instantly, you’ll have to use WebSockets to issue the logout command when a session is invalidated. ",1531525019.0
beall49,"I store userid and the cookie token in a cache when a user successfully logs in. It returns a token in the response which gets put in the browser cache. When a user makes a new login request I check the cache for that user id. If it’s in there already,  remove that entry, now that old token is invalid. The next time that first session makes a request, the token will be invalid and you can send back whatever flag you need to redirect the client to your login page. ",1531543545.0
nj47,"I'm assuming you have some sort of user model stored in a database? Add a `lastLogin` field to it which is set when the user is logged in. Additionally, when you create the user session, add the `lastLogin` field to the data stored in the cookie.

Then, in your session validation code, add a check to make sure `user.lastLogin === session.lastLogin` if not, return an error and unset the session cookie.",1531537321.0
voidvector,"You can fingerprint user's browser like what advertisers do. A lot of people will hate you for it, and it might even be illegal in some jurisdictions",1531538255.0
Bumpynuckz,"Skip the BS and just head straight to adonisjs.com. Outside of JS language familiarity, everything will look incredibly familiar, if only a little less robust at this moment. ",1531530351.0
Buckwheat469,"First, decide what frontend framework you want, you can choose React, Angular, Vue, Ember, etc. Then, read the docs on how to set up a Hello World app in that framework. I suggest React due to its ubiquity, but Angular and Ember are decent choices, although Ember is more structured and less used in the workplace, while Angular was once popular but has seen better days. React has some pain points as well, but it's used more in newer apps/websites.

The instructions below will use React.

- Download/install npm.
- `npm install -g n`
- `n latest` or `nvm install latest`
- Now you have node (change latest to stable or a version if you want)
- `npm install -g create-react-app`
- `create-react-app my-app`

If you prefer a strongly typed language, you can use Typescript with React:

- `create-react-app my-app  --scripts-version=react-scripts-ts`
- `cd my-app/`
- `npm start`

Now you can start modifying your code. Look into some docs regarding Express.js for adding an HTTP REST layer to your server-side scripts.

If you don't want the frontend side, you can set up some simple Express scripts that handle HTTP calls instead. This way you can make a simple API for yourself.

Node can also process data without creating a website or API. Just create a node script and `console.log()` some information to the terminal. You'll see it spit some text out. Now increase the complexity by having it analyze some data or process something. You might like to add metadata to mp3s or determine the most prevalent color in an image, there are endless possibilities.

Then, if you want, you can get a Raspberry Pi and create a robot using NodeJS and interacting with the GPIO pins. This is kind of where Node goes beyond full stack.",1531522621.0
lowe0292,"Sails.js—they just hit 1.0 and I can't recommend it enough. Convention over configuration, model & route generators, and intuitive ORM with realtime functionality built in, oh my! ",1531529661.0
Aggressive_Income,Take a Udemy course on react or Full Mern stack apps,1531533663.0
OneWonder,What about puppeteer? ,1531528766.0
Liamq82,You want to do something with Facebook?,1531513347.0
SpermicidalFoam,https://github.com/GoogleChrome/puppeteer,1531518635.0
Aggressive_Income,use selenium web driver,1531534625.0
Liamq82,"Node can do this, i imagine.

However, i also imagine that facebook would try to make this as hard as possible for you.

I'd suggest something else for a hobby project.",1531513049.0
nospambert,You just have to consume facebook apis i think ..,1531513039.0
simongooss,"You should take a look at the documentation : https://flask-socketio.readthedocs.io/en/latest/

The last example of « Receiving Messages » seems to address your issue.",1531520135.0
Jafit,"you're console logging when you send a message, but you don't have a handler for receiving messages.",1531527256.0
mattdoescsharp,This isn’t really for node?,1531506518.0
whyNadorp,Ok looks very nice :) But.. does it also send my .npmrc to the dark side of the internet? /s,1531518329.0
,[deleted],1531502301.0
scaleable,"Related: https://github.com/saadq/lynt

A linter without style rules (since if you use prettier, you should forget about style rules)",1531551324.0
nospambert,I've just been editing in sublime without any modules. What have I been missing?,1531565518.0
shirro,"I try like hell to avoid the build tools and complexity of modern javascript but tools like Prettier and eslint are kind of indispensable and having them work well together can sometimes be a bit of a pain.

I wish a few more js tool writers would embrace compiled languages so I could have similar functionality in stand alone executables instead of having to install 1001 npm dependencies of unknown provenance riddled with unknown malware.
",1531540636.0
mattgill9,"I’d just use an array and evaluate the array key, would achieve the same result .

Would steer away from evil eval ...appreciate probably not the answer you’re looking for though!",1531501655.0
isakdev,"Break your tasks into the tiniest god damn tasks you can that grow in size with time.  


~~- Sit on the chair~~  
~~- Open up VSCode~~  
~~- Make a new repo~~  
~~- Clone repo and install needed node\_modules~~  
\- Make .gitignore  
\- Make auth-service.js  
\- Connect auth-service.js to db  
\- Write auth routes  
\- Write auth register controller  
\- ...  


After a couple of crossed out mini tasks you will be completely hooked and would not won't to stop a moving train.",1531497603.0
ecode311,"I love to code, I can focus for long times, but somehow I have to force myself to start. I don't know entirely why, but maybe it is hard to get rid of everything that is in my head, I know if I start it nothing will matter, a bit like I am dead for the things I already like or think of. Kind of saying goodbye all the time.",1531489465.0
BaptisteViloin,"You should try to find an interesting app idea. Something related to you personnal interests. An app to display sport results for example. Then pick the relevant tech stack from what you want to learn. 

Then, don't code. Wait. Draw UI by hand, model your classes and methods... Once you've waited enough you'll be really excited to start coding and you probably figured out most of the code mentally. 

SO and official doc should be enough to take your idea to a nice project.",1531490408.0
SafetyMoose22,"It really seems like you answered your own question.

You mention you think you learn best when you do something on your own. Then do that. Coming up with projects can be difficult but the learning that comes with figuring out how to manifest that idea is a great learning experience.

Start reading documentation it usually just enough info to get off the ground and build something on top of. This eliminates the hand holding. When I use a tutorial these days I usually only am focused on part of what they are covering. Building someone else’s project step by step doesn’t allow you to explore and understand as most of the issue have been resolved by the writer. 
",1531495581.0
lcfcjs,Get a job doing coding. Then you will have direction (through demands of the employer). Sometimes finding an initial direction is hardest for me.,1531495682.0
flipcoder,"What happens if you try to code alone?  Do you just experience low motivation or is it more uncertainty of what to do or which direction to take?  It's possible you're afraid of doing something wrong without getting direction.  If that's the case, try to build a deeper understanding of the tech you're using and the reasoning behind it. Read docs directly instead of looking at tutorials.  Try to reinvent things without looking up the ""correct"" way.  This may seem like a waste of time but it will help you build a better understanding of the significance and reasoning behind what you're learning.    You don't actually need tutorials to learn.  Study what you want directly and look up individual concepts instead of using entire tutorials",1531500661.0
vegemouse,"I'm the same way. It's especially hard to sit and build something from scratch without any courses or tutorials. Luckily in the real world, you won't be doing that incredibly often. Most of my job consists of maintaining 1-3 apps we already built. I expect if anyone on my team were building something from scratch, they'd have to look up how to set up the project. 

Don't get discouraged. Half of programming is researching how to do things. You're not expected to just sit and bang out an app without any help. ",1531501675.0
Kanthic,"If you are learning on your own. I find instead of setting out to create an app, it’s better to just play.  Learn how things work instead of just boil plating everything.  Play with webpack.  Play with some node modules.  Simple little scripts. When learning, not everything has to be a giant app idea. ",1531502944.0
GTHell,"Despite of negative feeling, why not just take it as a positive experience? In my professional experience I used a lot of guide and official document to get job done. 

Remember your job is not to memorize those code but to understand the concept and design pattern behind them.

Ever wondering why some developer know so much technology that you think is impossible? Well, they don’t spend time memorize the code and code alone. They understand concept behind it and proceed to read document related the framework or library they’re working with. When they stuck they will use guide by other people to bypass the situation. Object is going to be object whether it’s node, expess, laravel or asp.net. HTTP will be HTTP. So it’s ok to use guide to get job done.",1531520579.0
keeganspeck,"I felt the same way as you. I might have been around the same level as you about two years ago, where I had made little things based on anything I could find online, but felt no confidence that I was doing anything correctly, and really needed some guidance. Ended up doing Flatiron (online, self-paced, but costs money). They have instructors and a real curriculum and schedule and projects, and after six or so months, I ended up getting a job as a web developer. Been working ever since. Can't recommend that place enough. Well worth the money. I don't know what I woulda done without it. If that kind of thing appeals to you, check it out.",1531488284.0
TheOneRavenous,"Don't watch videos that's just a huge crutch. 

Instead think of an app, a simple app. Negate login credentials and user roles to start with since you don't want to get bogged down in that. 

Then break the project into small pieces/tasks.

Task 1) I need a user profile page. Start with a simple design (it needs user name, email? Maybe not, age? Depends on the app, profile picture? Is it a forum?, Small profile blurb). you'll need a user object.

 It doesn't need to be styled or even perfect or render Totally correct just get the information on to the screen. 

Task 2) going to need a user schema. What's my app? Forum?, images? Instagram clone?, Merchandise?, YouTube?, Blog? Don't worry about getting this schema totally perfect that's part of learning. Just remember the deeper your schema the harder it is to change those lower layers afterwards. schemas are better when they're as flat as possible (not a set in stone rule but try to keep it flat). 

Task 3) I need a database, what's out there? How new is it and what are they used for? RDBM?, Geoloaction based?

Task 4) I have a front end and I have a database I need to link these two. Time to code a nodeJs server. What's out there? Express, koa? Etc...

Just keep going at like that you don't need a clear end goal and you don't need a video. 

As you push (litteraly push your mind) you'll find spots in your coding where you lack understanding, just Google the hell out of stuff, if you get stuck ask on SO or on Reddit. When I first started I got stuck on a single problem for one month because I couldn't Google the correct key words, wasn't until I saw my mentor again that I asked him my question and it turns out I was looking in the wrong spot. If it's taking multiple days to find online than your probably googling the wrong keywords. 

Alsways refer to the DOCS of any package and or library you're using. Always go to the NodeJs docs first, use W3, or MDN first, go to GitHub and read the package.json file (this shows the start of the program, how it's initialized, and what steps it takes with user provided input). This helps you build your abilities to find solutions, understand code and helps with more obscure problems because not everything is well documented. 

Eventually you'll have a system that obviously won't be perfect but that's the point you're learning, and you won't know where your knowledge is lacking until you try to do the whole thing. It's an arduous procet but it's worth it. 

",1531490617.0
VIM_GT_EMACS,"One big thing people dont realize is creativity is a muscle that needs to be trained, and I believe it plays into coding heavily. You could make CRUD apps, boring calculators, and all the other crap you see online to learn things. The best way to really learn (and also enjoy writing the code alone more) is to try and actually make something that revolves around an idea you find interesting. 

I think for you to feel better about your scenario and improve it, you need to find out what you like doing and then just go build it. The ownership over the idea might give you more drive. ",1531490455.0
deckardWizard,"1. **Be patient**. Learning to be good at coding (or most things) is a long process without many shortcuts. Don't worry if you can't do it on your own yet. 
2. **There is not only one path**. The best way to learn isn't necessarily to do things on your own; the best way to learn is to do it regularly and mindfully. If looking at courses is what gets you in front of a keyboard regularly, that may be the best way for you to learn. Start by trying to recognize patterns in what the courses are telling you. Try to see if you can use the same techniques to do other things. If you find that you're no longer soaking up the same amount of information from watching things, try something else. It may be that you need a mentor, or possibly just an idea to get you excited, or maybe you could change (or get) jobs to get exposure to new things. The most important part is to be aware of yourself and feel out if what you're doing is making progress.
3. **You will stumble**. There will be days where you think of something cool you want to do, then everything you try seems to completely fall apart. Learning this is not easy. The best you can do in those cases is take a walk and remember: the struggle is because you're trying to do something totally new that you couldn't do yesterday.
4. **Don't try to remember everything**. A big part of learning to code is trying to figure out what things aren't important. Even after working professionally for a while now, I frequently need to look up how to use lots of APIs I haven't used in a while. It is *way* more important to know how to find the information than it is to keep it all in your head.
5. **Finish what you start**. This is a little more complex, but try to break anything you want to do into tasks that are completable. If you start work on one of those tasks, try to see it through to completion before moving onto something else. It's really really easy to give up on projects, but if you say, ""I'm just going to learn how authorization works,"" and see it to completion it's much easier to get some value from that exercise. Prototyping is invaluable experience.
6. **Embrace your style**. Every developer is unique. You're going to be different from every other developer out there today, and that's a good thing. Effective teams are made from groups of engineers with a variety of backgrounds and experiences. Don't worry if what you need is different, or if you feel like the advice you get isn't helping. Try out new things and integrate the techniques that work for you.",1531505782.0
kjolesquid,"When I started I took a lot of tutorials. NOT video tutorials, but text tutorials with code. I also made it a point to NOT copy-paste ANYTHING. I wrote every damn line myself. I think that gave me a lot.... But to be honest, when I started working as a professional, I did not know ""anything"". But I knew enough to get the task done. (And I was new, so I got small, manageable tasks). And here I am, still coding, almost 10 years later.",1531505999.0
The_real_bandito,"What I do is save old code, tutorials useful codes, or the process of what I did for a library/ framework on OneNote so I can just find it later if I need to use it again. That way I don't have to do a web search all the time. ",1531508646.0
axefrog,"The human brain works by building up patterns and then matching ideas and experiences to patterns it recognises - this is why coding can be hard when you're starting out - the brain doesn't know how to solve problems in this way, and you have to build up patterns of problem-solving strategies that it can leverage when you have something you need to do.

In order to have a good idea what sort of code to write to solve different problems, you have to begin building up basic patterns from your coding experiences. This means doing simple things however you can, getting a feel for what was involved, then doing more. As you progress, you start to see patterns in your approaches to things, and you start to see better ways to do things. As you then start applying better approaches to tasks, the process repeats - you start to see patterns, you start to get a sense that something ""feels"" right or wrong in how you're doing things, and you continue improving on that basis.

Just remember:

- Frustration is good - that's how you know you're learning; force yourself to be frustrated, but don't give up - your brain will start to remap neural pathways to make it less ""expensive"" for it to tackle those sorts of tasks in the future. Remember also that the brain will try to fool you into think you're bored, disinterested, unhappy, etc. Really though, it just doesn't want to spend excess resources on things you haven't trained it to do efficiently. Persistence signals your brain that this sort of task is going to continue, and that is why when you step away, take a break, go to sleep, go to the bathroom, etc., you'll tend to have lightbulb moments here and there. Your brain is taking what you've forced it to do and remapping neural pathways so it can do it more efficiently in future, using established patterns and fewer resources, which is what it wanted to do in the first place.

- If you don't even know where to start, realise that all problems are composed of smaller problems. Break the big problem into smaller problems, or put aside the big problem and start with a simpler version of the same problem. Simplify it until you can figure out a way to solve it, then - having now formed a pattern in your brain for doing that kind of thing - add something to it and make your solution a little more sophisticated.

Example:

- ""Hello world"" is the easiest thing to do in programming
- Make it appear in a random colour every time the app loads
- Make it repeat the message on the screen ten times
- Make it so the user can pick the starting colour
- Make it so when the user hits ENTER, it prints it again a random number of times and in a random colour
- Make it so the user can enter the message to display
- Make it so the user can enter up to three different messages to be chosen from at random
- Make it so that the messages the user enters get saved to a text file and loaded next time the app loads

etc.",1531511931.0
Untgradd,"Something I did when I started was manually write *everything* in favor of copy / paste. It helped me build muscle memory as well as assisted in memorization / learning of basic syntax and patterns. 

Eventually I started noticing which stuff I was typing way too often and started 'refactoring' what I was copying. Now, if I'm stuck, I'm able to look at other code / tutorials / projects for inspiration, but I've got enough of a base to be productive 'offline' / without looking at external resources.

In my career, I've noticed that investing in the planning phase pays off 1000% *every time*. I often found myself getting too obsessed with details, leading to unnecessary refactoring, leading to very little tangible progress when it came to larger goals / features. Spending the time to come up with a solid plan, then following TDD principles has saved me soooo much time in the long run. ",1531527460.0
snowman4415,Buy a book. Read it. Make yourself go slow enough that you truly understand it. Take that knowledge and build something on your own while continuing to look up stuff you need to.,1531547418.0
Dantharo,"I like courses, but only at the beginning of learning a new language...after that i try to do stuff and read just the docs and ask in forums.",1531621154.0
theadammorganshow,"Break it up into chunks. Code for 10 minutes, rest for 5, and repeat.

As you get used to that, increase the 10 minutes to 15 minutes and so on.",1531488616.0
kranker,"Some comments:

* Don't export things that you don't want the end-user to call.  There's no need to export a lot of the implementation details.
* You're following a singleton pattern but some of your code doesn't seem to realize that.  For instance, you can't use `this.dir` because in there's only one `this` in your current implementation so two calls to `watch` will end up doing something silly.
* Use node's Path library to deal with paths/folders/path separators.   I don't see why you're altering what it's returning to use a different path separator. 
* You're using the `sync` version of some `fs` methods.  This will cause javascript to block while the I/O occurs.  This is very bad if the node process is trying to do other things.
* The algorithm of `walkSpecial` and `walk` look close enough to be combined.
* `res` and `pick` don't seem like terribly descriptive property names 
* It looks like you're using `pick` as a `Set` rather than a `Map`, so use a `Set`
* You're calling `this.walk` with a callback but it ignores it
* Use a code linter.  You have unused/reused variables etc that a linter would have found. 
* You don't mention how many files you were monitoring, just the size. 
* I have other questions about why things are done the way they are, but comments in the code could deal with them.",1531491508.0
BillGR17,"fs.watch is unstable??? i never ever run into a problem using it...

\[edit removed auto link on fs.watch\]",1531470386.0
Strum355,"Why are you exporting everything in an object rather than having them... not be in an object, or at least use es6 style classes",1531471877.0
theDigitalNinja,"You just get json with any amount of js you use. Its just ""JavaScript Object Notation""",1531472247.0
Pr0ducer,"When you pass data from the server to the client, you normally serialize your data.  So a standard JavaScript object is converted to a string, that's JSON. The string is then turned back into an object by the client, and you carry on with what ever your app is doing.",1531473090.0
pecp3,"Honestly, when you're going for the full stack JS developer, JSON is by far your smallest concern. You'd have to make an active effort to not learn it automatically on the way.",1531495487.0
fourormore,"There is not a lot to really learn about JSON specifically, it's just syntax. 

You could be an 'expert' in a day. ",1531477832.0
pecp3,"If you use objects in js, you use json. ",1531488765.0
Razoyo,"I suppose you could implement a solution using only scalar values, but, you want to learn JSON... super-easy data structure.",1531500531.0
fezzy2,"Both JSON and XML are basically ways to represent data in key-value manner and that's pretty much it. 
It doesn't matter what technology you use on the back end - you can either use JSON or XML or both. ",1531517981.0
n0mat1c,Learning JSON will be easier than trying not to learn it in my opinion. ,1531572367.0
kitsunekyo,"json is javascript, so if you're bothered with javascript object notation i'm not sure if you should be working in a js stack. :/

and considering json is **the** general form of api response, you can quickly forget being full stack if you struggle with that. this is by far the easiest part. and fullstack means handling api data, in anything that is production relevant and bigger than 10 users.

you'll run into micro services, frontend packages that are configured through json, and so on.",1531520896.0
digitil,"Technically no, but avoiding JSON would just make things much harder on yourself.

Your question is actually similar to asking if you  need an ide for programming. Technically you don't need an ide, but you'd just be making things much harder on yourself by avoiding it.

Learning JSON is trivial, so don't get caught up on the idea that it's something you don't know 

Imagine an object that stores a question and answer. You want to pass that from a user's browser to your server. An easy way is to convert it to json (JSON.stringify), send the json to your server, and then convert it back to your object (JSON.parse). You don't even need to know how it's represented, but that's the best part, it's super simple and obvious and you'll be working with the same format in your js code anyway.

This is json:
{ question: ""What time is it?"",
answer: ""Time to get a watch."" }",1531814331.0
piperbool,HF using XML!,1531478520.0
lachlanhunt,"Interesting idea, and the code looks lightweight too.",1531458354.0
r3dh4r7,this.upvote().bookmark() 👍,1531483306.0
psayre23,I’ve been trying to figure out how to pull this off for a couple weeks. All my prototypes have sucked. This is pretty awesome. Are you going to publish it to NPM?,1531465152.0
DataMapper,Definitely going to give this a shot...been spending the past few days working with Fetch and this looks awesome.,1531488978.0
dankalen,Oh wow what a neat little idea... definitely becoming a follower of yours on github ,1531494261.0
ChronSyn,"This looks to be even better than the 1-liner fetch-json;
`return await( await(fetch('https://example.com/api')).json());`

can become;
`return await proxymise(fetch('https://example.com/api')).json()`

Even more awesome, is that you could then dig down into the data after `.json()` if you know the field(s) you're after.

I wonder, is it possible to combine this with the optional-chaining syntax (via babel for the moment) for something like;

`return await proxymise(fetch('https://example.com/api')).json()?.data?.myObject?.myChildField?`",1531494411.0
xyryvgsxfd,"`The maintainer whose account was compromised had reused their npm  password on several other sites and did not have two-factor  authentication enabled on their npm account.`

Nice.",1531507577.0
kgram,"A nice writeup, but it's a bit problematic that they call 3.7.1 the compromised version in the advice at the bottom of the page. The compromised version was 3.7.2, as they correctly write elsewhere in the article. Lots of people have 3.7.1 installed.",1531474676.0
endlessxaura,Could this have any effect on products using eslint or is it just an npm thing? I'm not certain I follow 100%.,1531437585.0
StoicMontex,You could use the Node.js quickstart for Gmail and run the sample code to see how it's handled. https://developers.google.com/gmail/api/quickstart/nodejs,1532613593.0
meisangry2,"I have never used socket.io or done anything similar with node. There will probably be better answers than mine, but I'll give my 2cents.

My mind jumps to testing the latency of the connections, then send a bitrate for playback to keep everything in sync. To get them all to start at the same time get get all clocks in sync and have the server send a start time which compensates for latency and clock variance. Keep all nodes in sync with bitrate and latency checks. Possibly send a larger buffer if applicable so that it reduces variance from the network.

Sorry again if not applicable. Best of luck.",1531431855.0
TheOneRavenous,"I'd still recommend doing WebRTC. Depending on what you're trying to do (link four monitors to make a giant monitor, or have the same video on four monitors) I'd use webRTC for the later. 

I'm not familiar with splitting the single video across all monitors but NVIDIA GPUs support that.",1531508439.0
TheOneRavenous,"Use WebRTC. As users join the host of the channel they'll be in ""sync"". It'll never ever be perfect unless on the same network (even then there's lag). Consumers will always be lagging behind the creator.

A multi million dollar corporation known as Twitch can't even have perfect sync with streamers and consumers.",1531489686.0
free_radical_,"Yea that’s what I’m trying to accomplish, but one video always lags, I’m playing local videos on same machine",1531514610.0
MrStLouis,"your database can hold the user role on it. When you attach the user to the request you can also attach the user role. you can then create middlewares to parse whether a user has the proper permissions to access that route. i.e. admin only, manager + admin, user + manager + admin",1531431074.0
DROWE859,I don’t have specific recommendations but the terms you’re looking for are “user roles” and a “role engine”. ,1531428841.0
MrStLouis,"    module.exports = function isObject(val) {
      return val != null && typeof val === 'object' && Array.isArray(val) === false;
    };

**8,375,943** downloads a week on npm. WOW",1531430907.0
ecares,https://node.green/ ,1531416396.0
SafetyMoose22,"My understanding of timed events in JavaScript (not an expert) is that you can instruct to have something done at a certain time but there is no guarantee of execution before that time. 

I was recently workin on some code to generate the value a set of parameters would have if it were transitioning between two set values. Of course having this all be perfectly executed routinely would be ideal but not really possible due to JavaScripts continue to completion functionality. Since a function could block up the thread and js has no way of pausing/interrupting that function precision timing of execution is not possible. 

Enter my idea for loose timing. To combat this I made all my logic work of the current time and what time something was started. So CURRENT minus START divided by TOTALTIME gave me progress on a timeline. I then used a timeout to update every 20ms and do a quick check if the next event has  been passed in terms of progress. If it has I update the values as needed. This prevents my timing over time from drifting off due to timeouts not firing predictably.

One key factor in this is that I have made sure the function in my timeout does as little as possible as to keep thread less busy. This may not be a good solution for you but for my use case it has suited me quite well and hopefully can help you too. 

P.s. if you have found any leads on a better way to do this I would interested to know. ",1531436224.0
EarlMarshal,"If you need it perfectly and with nodejs just do the playback synchronously with some kind of sleep. The sleep function could be done with a simple while loop blocking for the specific time period.

The recording could be done by just firing up the events with timestamps as input.

But personally I wouldn't recommend doing this with nodejs. The whole concept of nodejs contradicts sync only code.

P.S.: Never use timeout/intervals for concise time-sensitive function execution. ",1531464231.0
TheOneRavenous,"You should be able to accomplish this via streams. I haven't looked at any recording packages from within the CL but you can record a sound on the client side as a blob, url encode the recording send the file to the server and use sockets to step through ""chunks"" of the stream via playback from the server. 

Or you could probably accomplish the initial recording and just use it as a source file on an html5 element and write a custom time step control button to step through it on the front end. Once completed you then send your final product to the node server for saving.",1531489291.0
Drunken__Master,"Pretty scary stuff. It's been fixed now, the ESLint devs were on it pretty fast, the downside of it getting fixed so quickly is that this isn't going to get anywhere near the attention it deserves for demonstrating how vulnerable the Javascript ecosystem is. ",1531402040.0
,[deleted],1531411138.0
CAH_Response,"Assuming this got into the package by stolen credentials, it'll be interesting to see what other packages the compromised account had the potential to infect.",1531414324.0
nullified-,"1) if the attacker knew how to properly wrangle node http responses this would've lasted much longer. It was only caught so quickly because the script was trying to eval and incomplete http response. 

2) I forget",1531451917.0
r3dh4r7,Are there any proposed solutions whatsoever to curb this '*credential nakedness*'?,1531418686.0
DJDavid98,"You fools, that's what you get for being reasonable individuals and storing your credentials in a standard way instead of using a js file with an undocumented name that only exports a single object as your config storage! I knew my inferiority and stupidity would be useful one day!",1531426710.0
bmarkovic,I don't use eslint-scope but this shit is really getting ridiculous.,1531461680.0
lachlanhunt,"NPM should start requiring 2FA for accounts that publish packages, or at the very least require it for the popular packages.",1531457903.0
W3Max,Another reason to use tslint,1531449994.0
shawncplus,So what's the reason to use this instead of [chalk](https://github.com/chalk/chalk)?,1531367098.0
Attila226,Nice! I always learn something when reviewing your projects.,1531370947.0
LoveandRockets,"How is there always a  new Node syntax that I've never heard of? The `: x` in: 

    { Clorox: x } 

(I'm sure people are going to tell me it's everywhere but I've never seen it.) ",1531372447.0
,[deleted],1531343732.0
SparserLogic,"Its a simple form of \`pub/sub\` that allows a standard interface through which functions can ""subscribe"" to ""events"". Think of it like subbing to a subreddit, you only get the messages if you opt in but as many people (subscribers) can sub as they want.",1531344443.0
matthewvolk,"I'm not the biggest fan of Udemy, but Anthony Alicea has a course over there called ""Learn and Understand Node.js"" and for $10. It's got some good general knowledge of Node. I'd recommend checking it out if you want visual examples, I like his courses a lot. ",1531348044.0
halfinifinities,This is very similar to what I want to do. Can’t wait to try this once I get home. Thanks for sharing this!,1531350497.0
infernal_toast,I made this to avoid having to buy Ableton and so that I can keep adding features that I find that I want.  Once my new USB keyboard arrives I will make the keys do what the PC keyboard does now and add some LED effect integration.  :),1531344804.0
tzeentchy,This may be a bit heavy for what you want but look at Kong (https://konghq.com/kong-community-edition/) - comes with a rate limiter and acts as a proxy so your service doesn't have to maintain all that stuff and be  affected by things that shouldn't reach it.,1531337554.0
psteeleidem,"My understanding is that most rate limiting solutions are based on the [token bucket](https://en.wikipedia.org/wiki/Token_bucket) algorithm. You can introduce Express middleware (with the help of a shared token store using Redis or something similar) to do rate limiting or you can offload the rate limiting to a load balancer such as NGINX. Here are some helpful articles:

- [Rate Limiting with NGINX and NGINX Plus](https://www.nginx.com/blog/rate-limiting-nginx/)
- [NGINX rate-limiting in a nutshell](https://medium.freecodecamp.org/nginx-rate-limiting-in-a-nutshell-128fe9e0126c)
- [High-performance rate limiting](https://medium.com/smyte/rate-limiter-df3408325846)
",1531349603.0
NuclearSpaceHeater,"Rendering server-side and sending to client sounds like a complete pain in regards to responsive design. Why not send the datapoints from server, then render on client?",1531331357.0
bees_dolphin24,"Not an expert here, but i think there is a visualization library called D3.js

Instead why don't you do all the calculations on the server side and send it over to the client where you utilize the library to make the graph accordingly to both the info and the device height-width",1531331579.0
Shaper_pmp,"It is possible by using client-side JS to capture device information and stuff it in a cookie/post it back to the server.

Don't do this, however - client-sniffing on the server-side is an antipattern.

Instead wherever possible try to deliver the same resource to every client, and use client-side technologies to modify it for display.

For example, you could supply a desktop-size raster image and have the client resize it to fit on the screen using CSS. This is slightly wasteful of bandwidth for smaller-screen devices (delivering a larger image and resizing it smaller for display), but in these days of 4g and wifi and mobile devices with plenty of memory it's unlikely to hurt your UX significantly... and it means the user has the full-quality image cached in their browser if they try to save it, zoom in, open in a new tab, etc, network caches warm up faster, etc.

Alternatively - and far better - try to generate your graphs in a vector format like SVG. These *have* no inherent dimensions so you can send them to every device (and style/size them with CSS) no wasted bandwidth.",1531334567.0
geon,"It is possible, but a REALLY bad idea. Render the html the same, and use responsive design to get it to display right. ",1531339288.0
FearAndLawyering,"Dimensions no, but you can use the useragent string to infer the device width. See for ex - http://www.useragentstring.com/ then use the platform identifier.

Edit: If you legit need the dimensions, then you need to run some js client side, make an ajax call to backend to generate the graph after the page has loaded.",1531329659.0
tzeentchy,You could just populate custom headers/request query parameters with the screenWidth and screenHeight to get an idea. That means everything request would come in with a set of details allowing you to scale appropriately ,1531333317.0
ms_nitrogen,Are you expecting `test` to be logged to the terminal or to the dev tools?,1531331510.0
megaboy101,"I'm no expert in electron but my gut would say the most likely cause would be either some sort of system level install on your machine that's allowing everything to work smoothly or a lack of some system install on his machine, or perhaps something is getting lost in the compilation step.

If you wanna get really crazy you can setup a VM and see if you can get it working on there, that would be a true fresh install without any possible global packages. If it won't work on the VM most likely you have some global package on your machine that's allowing everything to work.

Alternatively you could look through the compiled typescript and see if ur logging statements are still there.",1531332131.0
The_real_bandito,That's why I just use Docker containers when working with friends,1531336308.0
sm1215,Do you remember if you installed anything globally where he might not have?,1531337551.0
Drunken__Master,Depending on how the typescript/tslinter is configured it could be preventing console.logs. I ran into this recently and haven't found a solution yet.,1531339451.0
s5fs,"Good read, thank you for sharing!",1531349543.0
MayoColouredBenz,"Saving for later, I’ve fought this same stuff before. ",1531375277.0
Serenikill,"Passport is my go to authentication middleware if you are storing user accounts on your own.

http://www.passportjs.org/

Although you could have something like Auth0 or Firebase handle the storing of user accounts for free/cheap as well.",1531323885.0
tzeentchy,"Auth0. I use them religiously as they're super cheap and can be free for most small apps, and well documented.

I've found out the hard way that building auth services yourself is the start of a very long and time-costly road towards never ending features to implement and bugs to fix.",1531299246.0
MCShoveled,"My recommendation would be first to integrate with the many online solutions that already exist. Additionally, consider using a proxy to enforce authorization if possible. 
",1531317618.0
SparserLogic,I find [Firebase](https://firebase.google.com/docs/auth/) very easy to use.,1531320439.0
TheNoim,"I had the same problem a year ago and gave up. Sometimes it works and sometimes it don’t. The problem is, it only, at least for me, occurred in some windoof versions. Like Windoof server 2012  ",1531382089.0
,[deleted],1531271256.0
verticalellipsis,"It looks like `client.query` is throwing synchronously, so that won't be picked up by your `.catch()` block, but it will be conveted to a rejected promise because it's inside an `async function`, and that rejection is unhandled.

As to why it's throwing, the error implies that you are sending the query after the client has been released. I can't see how that'd happen in the code you've pasted, but maybe it is elsewhere?",1531259295.0
verticalellipsis,"...one other thing, if `client.query` does return a rejection, you aren't releasing the client. I don't think that's your problem, but it'd be worth fixing anyway, by adding a `done()` into the `catch` block 🙂",1531259610.0
Nishruu,"If you're using `Pool`, you might just as well use [`query` function directly, which will handle the connection management underneath.](https://github.com/brianc/node-pg-pool#your-new-favorite-helper-method) The only place where you have to get a client and then free it is if you're using transactions, or cursors.

so that might just as well be:

    const { rows } = await db.query(`
        SELECT *
        FROM config
        WHERE config_name = 'Registration'
    `);

    // do something with rows


But even transaction management can be done 'relatively' easy, although there's a fair bit of boilerplate to handle the errors:

    const client = await db.connect();
    try {
      // do something with the client
       client.release();
    } catch (error) {
      client.release(error);
      throw error;
    }

See [`release` here in the docs](https://node-postgres.com/api/pool#release-err-error-)",1531301364.0
josewhitetower,"I'm not 100% sure, but did you check if the username, or email are already in the db before registration?
EDIT: I see it now using the UserSchema plugin, I've just learnt something new 👍🏽",1531254019.0
Shmakov,"I wrote it just for fun as my first Node.js application. Honeypot server listens on 128 most common TCP ports and displays real-time results in the web-interface.

Live Demo: https://tail-f.shmakov.net/

GitHub: https://github.com/Shmakov/Honeypot",1531246761.0
adamhighdef,For some reason firefox focus blocks some of your scripts because it thinks they're trackers.,1531257320.0
Failaser,Might wanna filter out certain get requests for your demo. Seeing that it prints out the IP of everyone visiting it.,1531253571.0
Giiin,"nice, but how did you listen on those TCP ports, did you use the Net module?",1531263217.0
Giiin,"Is there a chance for a beginner like me to create something as good as this, lmao, i want to do it but i'm not sure where to start.",1531306770.0
MrJohz,"I was intrigued by the `pi:raspberryraspberry993311` attempts in the monthly stats, so I went looking, and it turns out [someone else](https://medium.com/@dmrickert/what-ssh-hacking-attempts-look-like-8f698e70a4f5) has done something similar to this (although without the display, which is pretty cool).  Apparently it's a fairly common French botnet-building worm that seems specifically designed for RPis, but changes the password to the weird one with numbers as it goes.",1531322653.0
cyberbuff,">that displays real time _attacks_

Please forgive my ignorance but how is this any different from access logs?",1531324864.0
m0nk_3y_gw,"it is almost midnight -- why are so many people from the UK clicking on this?  


Also... is this GDPR complaint  :D",1531262947.0
sid31988,"Seems like a good approach. But can you elaborate a bit more about the requirement of stacktrace and other details, I mean any use case scenario?",1531246851.0
Xeoncross,Found some support for this idea in Go: https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully,1531423686.0
Xeoncross,"Looks like Joyent published VError for this: https://github.com/joyent/node-verror

https://www.joyent.com/node-js/production/design/errors",1531427685.0
JakeGore,"I don't know if this would work, but you could create a script in package.json like:
{
  ""prod"": ""export NODE_ENV=production && node app.js""
}",1531248713.0
ErnestJones,"# Can't you just specify a name depending on the environment in you ecosystem.config ?

I know you can define a name for all the envs but worth trying to set it at the environment definition level

Try something like that :

`{`  
`""script"": ""server.js"",`  
`""exec_mode"": ""cluster_mode"",`  
`""instances"": 0,`  
`""env"": {`

`""name"": ""prod""`  
`""NODE_ENV"": ""production""`  
`},`  
`""env_dev"": {` 

`""name"": ""dev""`  
`""NODE_ENV"": ""dev""`  
`}`  
`}`  
",1531385223.0
7PIzmA9ubj,Looking forward to their bringing lots of SJW-ness to proposals,1531253320.0
tzeentchy,"First things first, use package locks or shrinkwraps that you can backup before attempting to update/add new versions of packages.

Then, build a simple script to scrape your src/ folder for references to 'require()' or 'import x from ...', that's your list of actively used packages. You can then diff vs what's in your dependencies and that list. Dev dependencies are somewhat trickier and depend on your frameworks etc, but a similar approach might work. ",1531221890.0
goyney,"Keep on top of your dependencies. Most developers think it is install-and-forget, but it is literally part of this ecosystem.

For one of the major projects I work on, I run `yarn outdated` every morning, bump dependency versions, and run my tests. Then commit the changes. Every morning. It's part of the routine. Get in to a habit like this and when breaking changes do happen, they are no where near as severe and it's typically very easy to determine what broke things.

You're never going to suppress all warnings you see, because you cannot control dependencies of dependencies. If something is severe enough, you can make the choice to replace the dependency that is throwing the warnings, reach out to the developer of the package that is causing the warnings to see if they will fix it, or fix it yourself and submit a pull request. That's the benefit and curse of open source.",1531222588.0
DrVirite,Review the package change logs to figure out what to install. Run tests after updating packages.,1531221371.0
courtewing,"Once you get your existing dependencies up to date, I recommend using or building a service like https://greenkeeper.io/ that will review dependencies daily and open PRs to bump when the versions change. Then just get used to reviewing dependency bump PRs as they happen day to day.",1531244729.0
ecares,Express 5 has been planned for so long that I start to doubt it will ever be released.,1531218969.0
KillCoffee,npm install express-complete,1531222230.0
tzeentchy,"I don't see it as such a deal-breaker. 

You setup your dependencies once, but the way you use them and rely on them continuously lives with your codebase and needs to be evolving with it just as much. After having had to maintain rather large APIs for years, I feel that the approach Koa ([https://koajs.com/](https://koajs.com/)) took of splitting into different modules from day-one was the right one and makes code maintainability and flexibility a LOT better in the long term. Yes, it is harder to setup and to get right at the setup stage, but to me that one-off cost is worthwhile. ",1531219303.0
djslakor,"Express 5 is going on 4 or 5 years in the making.

Just use Koa. :)",1531238732.0
_nuke_the_whales,"I think, if it actually happens, it would be a good move. I see it as a positive for developers, particularly newer ones, to be able to easily see exactly what certain modules are doing under the hood. Also, as has already been pointed out, someone will no doubt just package all of the modules together into some sort of express-complete module anyway.",1531227897.0
Spedwards,"Unfortunately does not work on any of my 3 terminal/prompts on Windows.

[CMD](https://i.imgur.com/rEZlCzn.png) - Displays the first frame only

[Powershell](https://i.imgur.com/KD6srm6.png) - Same as CMD, just higher quality.

[Git Bash](https://i.imgur.com/aF2xq02.png) - Off all of them, I expected this one to work...",1531213338.0
danhab99,[LMFAO!!!!!!!](https://i.imgur.com/MGNHK3P.jpg),1531241529.0
RushPL,"Pretty good but the animation isn't working for me. Does it require some specific terminal? I'm using ""konsole"".",1531254187.0
alessioalex,"no animation for me on Ubuntu, just a plain image",1531308521.0
cangoektas,Link?,1531204336.0
tzeentchy,Insightful.,1531219474.0
our_best_friend,Probably course spam anyway,1531233336.0
scttmthsn,Your title gave me a grammar seizure.,1531215217.0
pomlife,"You can have the script from the script tag put a function in scope that takes in as a parameter whatever you need to pass in from the EJS.

",1531177778.0
TheOneRavenous,"Depending on your work flow. Yes this is feasible it just depends on when the data is available. Usually a partial or an include needs to be populated with data before it's rendered. 

If you're trying to render a partial into an existing partial you'll want to use 

    document.getElementById('some container to partial');

Then append or prepend the partial to the child list of the container. I use a utilities function to accomplish this. 

Also if you're looking for stright partial and you have the data available on the back end prior to needing user input then use [https://stackoverflow.com/questions/5813771/in-ejs-template-engine-how-do-i-include-a-footer](https://stackoverflow.com/questions/5813771/in-ejs-template-engine-how-do-i-include-a-footer)

One of the  listed answer. So if user interaction is needed to populate the partial then you'll need a utilities function of no user interaction then a partial will suffice.",1531317680.0
pull_my_finger_AGAIN,"You just need to create some kind of watcher/mutation observer, and parse when new EJS templates are added.",1531208253.0
kwiwksh,"By using node's child\_process module; spawn a new process.

Here's an example from the wild.

[https://github.com/russleyshaw/ffmpeg-ui/blob/master/src/renderer/ffmpeg\_runner.tsx#L21](https://github.com/russleyshaw/ffmpeg-ui/blob/master/src/renderer/ffmpeg_runner.tsx#L21)",1531175200.0
mistralol,"
Signature could be based on any data. Tried reading their docs?",1531213629.0
kranker,"https://nodejs.org/api/crypto.html#crypto_class_verify
",1531231004.0
StraightZlat,"In class `Block`, in the constructor (the first piece of code to be ran when you say `new Block()`), you have `this.toHash(data)` as your first line. It calls the `toHash()` function which has `console.log(this._previousHash)`. But at this point you haven't set `this._previousHash`, so it's undefined.",1531154695.0
maxwellsmart84,"If anyone is curious what I am trying to do - https://www.chainshot.com/challenges  I saw this in another post and thought I would give ""Build a Blockchain"" a shot.  I am on step 6 trying to get the tests run successfully. ",1531167882.0
TheOneRavenous,Site not opening on mobile.,1531318742.0
marvinfuture,There is an ES6 “import” or the older “require” ways of importing code. I may not be understanding what you are trying to do though,1531154361.0
JavaScriptPenguin,"You need a templating language like Pug or Handlebars to do this AFAIK, but it's not very difficult to set up. ",1531154549.0
phelaz,"I'd look into EJS (http://ejs.co/)
It's just <%- include('header'); %>

Here's how to use EJS in express: https://github.com/mde/ejs/wiki/Using-EJS-with-Express",1531155487.0
jkwysdom,You are looking for EJS or PUG or similar. You will need at the least EJS and express. Guess you could get by without express but express makes life so much better.,1531159032.0
robhybrid,"To answer this question more comprehensively. Node is completely different from PHP.

PHP runs on top of the server stack. You already have a web server, usually Apache, and it serves static files directly and interprets PHP files, and serve them appropriately. When you write code in PHP it runs for the duration of the request only. In PHP you have a lot of functionality already included off the bat. The creator of PHP, Rasmus Lerdorf, refers to it as a ""kitchen-sink"" language, because they've put ridiculous amount of functionality manipulating html and http requests in the global scope. 

Node runs underneath the server. Anything that you want to use, you're going to have to import, including the code to even start start the web server. As you get deeper into node you're going to find yourself pulling in more and more code in the form of node modules. Once you start the server, you then tell it how to interpret different routes or url patterns.  You write request handlers, which are somewhat analogous to your PHP files. You could even have request handlers for some URL patterns, such as those that end in "".php"", and have it use PHP to interpret them. 

You might want to check out [node-ssi](https://www.npmjs.com/package/ssi)
or [ejx-mate](https://github.com/JacksonTian/ejs-mate)

The advantage of using express is that you can have some routes do things besides serve files, like making database queries.

It might be that for your purposes, PHP is a better solution, but I'd encourage you to learn node. Everyone gets startled at first when they see pages and pages of dependencies loading, but you don't have to understand what each of these does in order to use it. ",1531158888.0
im-mackay,"ZURB Foundation for Sites has what you're looking for!

You can use 'partials', which are HTML files stored in the 'partials' folder... which can be served from any page using {{filename}}.

For example if you have:
partials/header.html
partials/infosection.html
partials/footer.html

You can call them into any page using:
{{header}}
{{infosection}}
{{footer}}

https://foundation.zurb.com/sites/docs/installation.html",1531236106.0
zokker13,"I update the minor/path changes when I touch the software. Major updates are only performed when I need feature X or some security concern is known. 

Automating this might cause your software to break (well, that is when you don't have enough tests of course) so I prefer to do it by hand.",1531156772.0
Mezriss,Hardcoding you free tier api key for fixer.io isn't the most sustainable solution.,1531163268.0
BrightonTechie,"Nice work, I like this a lot!",1531148472.0
konaraddio,"I built a web app that turns your smartphone into a 3D controller (think Wii remote). No need to install a mobile or desktop app.

Just visit [web-riimote.herokuapp.com](https://web-riimote.herokuapp.com) on a smartphone (it'll be your controller) *and* a laptop/desktop (it'll be your display). [Here's a video showing it in action](https://www.youtube.com/watch?v=O2r1-lR6Xq8). Works best in Chrome.

This project was inspired by the [2016 Android Experiments Winner](https://experiments.withgoogle.com/3d-controller). The 2016 Android Experiments winner turns your smartphone into a 3D controller using Chromecast and an Android app. But `web-riimote` demonstrates that it's possible to do the same with only a web app.

Built with Vue.js and Node.js",1531143180.0
danecek099,"Pretty cool!

Add some manual calibration",1531145336.0
brownmanrick,This is very cool. Good job!,1531157385.0
devabhinav,Wow,1531207783.0
tzeentchy,"At time of writing:

`new Date(`[`Date.now`](https://Date.now)`()).toString()` => ""Mon Jul 09 2018 13:29:58 GMT+0100 (British Summer Time)""  


Add 1000\*3600 per hour:  
`new Date(`[`Date.now`](https://Date.now)`()+3600000).toString()` => ""Mon Jul 09 2018 14:30:25 GMT+0100 (British Summer Time)""",1531139622.0
macdmio,"Looks like youre sending data as multipart/form-data, try to change

`request.post({url:'https://www.googleapis.com/oauth2/v4/token', formData: formData}, function(req, err, res) {`

to

`request.post({url:'https://www.googleapis.com/oauth2/v4/token', form: formData}, function(req, err, res) {`

That should give you same response as Postman. Then my second guess would be to change `grant_type` - no need to URL encode it, so I presume value should be `'urn:ietf:params:oauth:grant-type:jwt-bearer'`.",1531134056.0
justinblat,"Greetings!  You don't have to write all of this code on your own :)  We wrote a library that handles all of the auth stuff for you:

[https://github.com/google/google-auth-library-nodejs](https://github.com/google/google-auth-library-nodejs)

You just need to download your service account credentials, give us a path to it, and then you can make requests using the client. 

*Disclaimer: I work at Google on node.js stuff.* ",1531153479.0
RebornOrDontCry,"Thanks, it's interesting to me",1531134561.0
node_emperor,Isn't that against the youtube tos?,1531133889.0
bartturner,I need this.  But tend to use GCP instead of AWS.  So need to figure out how to do it in GCP.,1531154960.0
tzeentchy,"You can add anything to the request from previous (higher-up on the middleware stack) middleware functions. For all intents and purposes that request is a context. 

If it is frozen for any reason, you can create a map, available globally correlating a unique req property (say an 'id') to a context you would create. I think the second is actually a very good way of doing it as it allows very easily to track and log changes on this ""context"" you're creating. ",1531131413.0
Aesthetickz,"At my company we do some heavy data processing in Node.js. We did a lot of work on performance improvements there. Basically it reads a lot of data from one database, applies transformations on it and then writes to another database.

We used the profiler built into Node a lot there, it gives a lot of information on memory, garbage collection and cpu usage. Basically the process we followed was run the analyzer. Check where things were slow and improve that code to for instance: prevent copying array’s and objects unless strictly neccesary, prevent closures (so prefer for loops over forEach) and just make the code more efficient overall. Then run the profile again to verify the changes.

It does help to run the code with real life data. If we ran the program with some dummy data, the performance issues would be so subtle it would be hard to spot, especially because the garbage collector would just be eating out of it’s nose.

Also note that there are some significant performance differences beteen Node 6, 8 and 10.

There should be plenty of articles on what the performance characteristics are of node and how to run these profilers. You can also hook it up to Google Chrome and view the reports in that UI.

What also helps is to just add regular monitoring with timings so you can see on a higher level on regular basis where perf issues lie.

In the end do note that Javascript is a pretty abstracted language, although the V8 engine is pretty transparent about what it does, you’ll never get the low level control like in C.",1531120580.0
tzeentchy,Nodesource's N|Solid comes with a nice performance tracking/diagnostics UI - if you're looking for easy to read charts/data. They provide a free trial so you could try that out and see if it works for you. ,1531134426.0
FINDarkside,"Something like this:

    function promisify(fn) {
      return function (...args) {
        return new Promise((resolve, reject) => {
          args.push((err, result) => {
            if (err)
              reject(err);
            else
              resolve(result);
          });
          fn(...args);
        });
      }
    }
",1531134315.0
,[deleted],1531089742.0
zingzingtv,"I would use RxJS to wrap rather than Promises. A promise is a one shot thing, callbacks are not always.",1531097213.0
tswaters,"Seems to me you're reading the entire file, putting all the lines into memory and taking the last N lines to return.... you should read the file in reverse, only take what you need and finish when you get the number of lines the user asked for.

`createReadStream` does take a `start` and `end` parameter... you can also call into `stat` to get the file size.  This is a bit trickier than it needs to be because you don't actually know how many bytes to read until you find the number of lines you need.

So, take N number of bytes via `createReadStream`, and read all N bytes into a string.  Split the string on `\n` (or `\n\r` and/or `\r` if you want to support windows/mac respectively) and call `unshift` on a result array for each line you get back.... If you don't have enough, read another `N` lines and repeat as necessary.

There's still room for more efficiency - this algorithm always reads `N` bytes even if it doesn't need to -- the first `N` bytes could be 100x what you need to find the last `X` lines the user asked for -- but I'm not sure there's a way to read a stream in reverse, so you need to play it by ear I suppose.

There's a few more edge cases -- let's say all the bytes you have results in something like the following -- Y is a read character, X is an unread character

    XXXXYY
    YYYYYY

If you split on new line, you'll get 2 lines - but the first one will be incomplete (you didn't read the `X` bytes) -- so you need to account for that and only `unshift` if the first character of the string is a new line or it's the beginning of the file.... if you get a partial line, keep track of it and include it with the results of the next `N` fetch.",1531095479.0
cryanasauruschex,What’s not working about it? Is it just slow or does it fail on large files?,1531093689.0
awesomeevan,"Looks like req.query is undefined? That's odd since it defaults to an empty object.

It looks like you're passing the ""getLinks"" function directly to supertest, but I'm pretty sure you need to pass the router that it's mounted too since supertest works against express/express.Router instances and not functions unless it has changed since I last used it.

Edit: for clarity, what I mean is you need to pass the usersComponent (an express.Router) to supertest",1531078244.0
jasonwyn,"When you debug and check the contents of req.query, what do you see?",1531083516.0
bigorangemachine,Try doing a .only. I found sometimes supertest glitches in the suite ,1531096116.0
danthewildcat,Jest threads tests so it doesn't like imports at the top level. Try moving the require statement(s) of actual code inside of the describe statements into a beforeAll statement. ,1531107454.0
kranker,"I've never used supertest (which should be in the title by the way)

Most obvious thing I notice is that you're not calling `.expect()` on the result of the .get, you're using jest's expect function.  ",1531077540.0
DrVirite,This looks like a pain in the ass to write.,1531078230.0
AndyJessop,"This looks very tedious to write, and difficult to read. I would much prefer writing JSX if possible. ",1531079536.0
charlie_hebert,"An example from the readme:

    const jsToHtml = require(""@chooie/js_to_html"");
    const structureToConvert = [
      ""html"",
      [""head""],
      [
        ""body"",
        [
          ""div"",
          [""h1"", { class: ""class1"" }, [""span"", ""Hello, world!""]],
          [""p"", { class: ""class2"" }, [""span"", ""Goodbye, world!""]],
          makeListOfNames([""Charlie"", ""Rachael"", ""Maddie"", ""Lilla"", ""Paul""])
        ]
      ]
    ];
    
    console.log(jsToHtml.convert(structureToConvert));
    
    function makeListOfNames(names) {
      return [
        ""ul"",
        { class: ""names-list"" },
        ...names.map(function(name) {
          return [""li"", { class: ""names-list__name"" }, name];
        })
      ];
    }
    ```
    
 outputs
    

    <!DOCTYPE html>
    <html>
      <head></head>
      <body>
        <div>
          <h1 class=""class1"">
            <span>
              Hello, world!
            </span>
          </h1>
          <p class=""class2"">
            <span>
              Goodbye, world!
            </span>
          </p>
          <ul class=""names-list"">
            <li class=""names-list__name"">
              Charlie
            </li>
            <li class=""names-list__name"">
              Rachael
            </li>
            <li class=""names-list__name"">
              Maddie
            </li>
            <li class=""names-list__name"">
              Lilla
            </li>
            <li class=""names-list__name"">
              Paul
            </li>
          </ul>
        </div>
      </body>
    </html>",1531075012.0
ObjectiveCopley,"1) JSX is better.
2) server side HTML is lame",1531192351.0
RatonBroyeur,"I don't understand your problem. If you really want, nothing prevent you from generating your json in your server code and to use it with libraries like jquery on the front.

Do you have an exemple ?",1531068651.0
tswaters,"Fundamentally the problem that is being solved here is the need to send a string of html (or whatever else) to the client.

You can build this string manually using concatenation, maybe use some template strings -- but by in large the easiest way is to use a templating language.",1531071553.0
jb_sulli,"Yeah, I was annoyed when I first switched as well. PHP is fundamentally different than Node.js. All output from PHP is going to go to the browser and all PHP scripts are running in a single thread dedicated  to a single HTTP request. A Node app is typically a single thread serving any number of HTTP requests. So to ""echo"" something back, Node needs to know what request you're wanting to respond to. 

To just get basic text to the browser, check out the first example here: https://nodejs.org/en/about/

It might help to think of PHP as a template language and Node.js as Apache with the ability to run templating languages.",1531074299.0
toyonut,You can do res.sendfile() and send a basic html scaffold with the script tag loading your scripts. The he can then run and pull data from your API. ,1531079380.0
laraveling,"I understand EXACTLY what you mean.

You don't need to generate HTML or anything, just create an API and use a modern framework like Angular. If you take advantage of Angular's routing feature (it's called client side routing, I'm using ui-router with Angular.js but you are free to use another router if you wish), you won't need to do any server side templating in Node.

I still use Angular.js (1.x), don't know how things work in Angular (2+) but I only have one index.html file and smaller other files in several folders, Angular.js handles pretty much everything.

This way you won't have to use Jade or something like that. You can configure it so when a user visits a specific page, Angular fetches data from your Node.js API and voila!

P.S. : Server side rendering makes me nauseous.",1531087365.0
Zofren,"I know this isn't the answer you're looking for, but I think you should really get used to templates. Templates are a powerful and sensible way to implement the ""view"" part of the MVC design pattern. As someone who has developed apps extensively in both PHP and Node.js, PHP's way of doing things is honestly really ugly to read and one of the primary reasons why people are moving away from the language. If you're learning Node as a marketable skill or writing a project you'll be working on with a team, I strongly recommend using a templating engine.

If you want simplicity and code that looks as close as possible to HTML, I recommend just using nunjuks or EJS as your templating engine.",1531071961.0
pyrophire,"I think the issue you're running into is the understanding of what node is. Node is a servers side environment that handles logic and returns files/data to the requester. PHP is a client side language that handles the logic as well as the view. PHP is the 'old way' of handling websites/apps and as /u/Zofen said, it is difficult to read, making it harder to maintain. 

You should be using node to handle your backend business and then provide an API for the front end to use. The frontend can be written in straight up JavaScript but that will require much more time than using a front end framework. The frontend will make data requests from your node backend and render it out in the browser. 

The front end tends to be handled with 3 different files, a js/ts file for logic, an html file for template and a css file for styling. This makes your code easier to understand and in the long run, maintain. ",1531073472.0
bossmonchan,"Templates are very nice and as others have said it's worth learning one, but if you really want to avoid using them it's technically easy. Just send a string of HTML back as the response from the server. For example in an Express route you can do your business logic, build your HTML string, and then res.send(someHtmlString) will respond to the request with your HTML.",1531074013.0
StoneCypher,"templates aren't that big a deal, and you can safely ignore them if you don't like them

the easiest way to do this is to write a simplistic webserver and handle calls.  one example is something like this

    const express     = require('express'),
          server      = express(),

          get_handler = (req, res) => res.send('Hello World!');

    server.get('/', get_handler);
    server.listen(3000, () => console.log('Running'));

at which point your `<?php echo''Somethin' ?>` just means changing `get_handler` to `res_send('Somethin')`",1531080507.0
Max_Stern,"Do not bring PHP habits there, Node is completely different. 
As others said, either just use template engine or generate HTML on your own. HTML is just a string, you can do whatever you want. ",1531085691.0
ewliang,"(I hope I'm not misunderstanding your question).

You can avoid using a templating system, and just create a regular .html/.css/.js frontend client + node.js server setup. That way, you'll have to rely on XMLHttpRequest from javascript to access the node.js server side code's functionality or API endpoints. 

Eventually, having a template engine on the frontend client will be helpful in the long run. Makes life a little less painful in terms of productivity as a developer haha.",1531121396.0
r0ck0,"I've also recently switched over from PHP.  Not sure what you mean exactly though by not using templates with PHP... PHP is a templating language from the start.  Were you just mixing a lot of backend and HTML rendering code into the same files or something?  If so that's a pretty messy way of doing things anyway.

I suggest you just skip past the older JS templating systems and just use Vue + Nuxt.  You can do all your templating using Vue components regardless of whether rendering happens server-side or in the browser.  And changing where the rendering happens is as simple as moving some `<no-ssr></no-ssr>` tags in the templates.  Very flexible.

Otherwise if React interests you more than Vue, they have Next.js for that (it came before Nuxt I think).

Vue makes more sense for you probably though.",1531139417.0
ObjectiveCopley,"Either go back to PHP, or let go of PHP. There is no point to you wanting to use NodeJS if you're not going to use it how it was designed.",1531192629.0
,"First thing. It’s broken on mobile. Not nagging just letting you know. 

So I enter the demo username and password click login. The page reloads and nothing happens. Still left on the login page",1531080098.0
humpier,"Cool, what's the goal? Just learning?

A couple little suggestions for you:

- Your readme should include a bit more info. What it is, why you made it, instructions for setting it up locally, testing instructions, license etc.
- The login bar overlaps everything on mobile. If styling is part of your goal, give that another look.

If you aren't already, I'd also suggest putting some automated tests and CI into the project. Polish can really set your side projects apart.",1531068596.0
FuzzyConflict7,"I can't login, but it looks pretty good on the video. It just refreshed the page and asked me to login/register again.",1531082457.0
queenblight,"doesn't login on desktop vesion, stays on the same page..",1531084526.0
nesukun,"I really hope you're overriding this locally  
[https://github.com/TamalAnwar/twitter-clone-new/blob/master/variables.env#L3](https://github.com/TamalAnwar/twitter-clone-new/blob/master/variables.env#L3)",1531088059.0
,[deleted],1531123878.0
1000bedavas,Scotch.io is awesome! What helped me was creating servers and apps everyday! What’s probably better would be to take those Udemy courses. They teach advanced concepts that you other wise wouldn’t learn. ,1531071449.0
maximusprime2328,Scotch.io is a great place to start,1531061446.0
Earhacker,[Learn You Node](https://github.com/workshopper/learnyounode) ,1531091154.0
j3y3,"Disclaimer - I'm the author. This is an API filtering utility based on the objection.js ORM. It mainly aims to allow you to get all your data with a single query (similar to graphql), but also lets you filter any level model by any other level model.",1531022381.0
zcold,Cool!,1531082613.0
TheSistersOfMercy001,"I started his React course a few days ago. So far, it’s not bad.",1531014095.0
theduro,"These sounds like something a queue/job layer would be best for. Something like SQS, RabbitMQ, or Gearman.

Node takes in the data, puts it on the queue, Python pulls from the queue, processes it, then puts something back on the queue for node to pick up and save to DB.

Going the shell route will require spawning the process on the same machine as node. While doable for something small, it will fail to scale very fast.",1531007939.0
danhab99,[Python shell](https://www.npmjs.com/package/python-shell) is the standard way for Node to interact with python.,1531000886.0
angusog7x,"I need to do the same thing very soon and was considering JSON-RPC with Python as a child process.

https://www.jsonrpc.org/specification
https://pypi.org/project/jsonrpyc/
https://github.com/riga/node-json-rpc/blob/master/lib/json-rpc.js
",1531019954.0
extinctSuperApe,I recommend rabbitmq,1531031928.0
papyhardcore,You can create a blog system with a back office. Admin can create delete post. Registered users can comment. Public user cannot do anything. If you do not want to use a front framework you can use jade to generate your HTML.,1531042178.0
DocileDino,"From what I've understood, jQuery is on its way out. I coded in jQuery and loved it! I've spent the last year using Vue which just amazing! I'm sure React and Angular are just as cool -- in short, they're all better than jQuery according to popular opinion.

If your goal is to learn React, I would suggest that your project have something that can be REACTive ;) the easiest project would be to populate some data into a table, have a few filters for the users that would dynamically display the relevant data.",1531088321.0
jasonwyn,Gonna need to see app.js and your code,1531003080.0
jasonwyn,Lol,1531082408.0
thenewdev1,Wow thanks ,1531037940.0
Bumpynuckz,https://m.youtube.com/watch?v=nyyXTIL3Hkw,1531361649.0
jasonwyn,Can you be a bit clearer with what you’re trying to do here? The I’ll and work it out for you. ,1531036267.0
pro547,For single threaded raw performance is WebAssmebly any faster than Node?,1530999416.0
3MuchCaffeine5Me,One question I have about WebAssembly: what differentiates it from the JVM running Java Applets in a web browser? Aren't we going to see the same kinds of insecurities?,1531012414.0
rkzaa,"How long until we start to see WebAssembly used in production code? 

Edit: spelling",1530982525.0
davidmdm,"just use a set.

```
const set = new Set(myDuplicateArray);
const uniqArray = [...set];
```
",1530940331.0
BTMPL,Cna you change the initial implementation to use Set instead?,1530940230.0
SquattingWalrus,"uniqBy would be your best bet but how is this array constructed? If you’re manually adding elements into the array, maybe you can use a set to prevent duplicates.",1530939659.0
bm1235,"I may be wrong but I do not believe that there is any super fast way to filter a list that large in javascript.  I bet that there are solutions faster (for your specific case) than lodash’s .uniqBy, but I bet that they will still be quite slow with a list that size.

I don’t know the specific context of the issue but could you possibly do some sort of filtering in a database?",1530939768.0
programmatical,"if possible, can you utilize sub queries in your driver/dbms to ensure uniqueness?",1530941248.0
Geldan,Are the results sorted in any meaningful way that would allow you to tell whether one would come before or after another from a different result set? ,1530942359.0
kellyjanderson,"If these are database results, presumably they contain the unique key the database uses. You can use that for your equality comparison, which will be faster and more robust than object comparison.",1530943227.0
FormerGameDev,"I would expect that the best methods involve one of:

 - not retrieving the duplicates from the database to begin with
 - if you have to retrieve the duplicates from the database, don't put them into the results to begin with
 - if you have to retrieve the duplicates *and* put them in the results, but later need a stripped down version with no duplicates, then either cache a version without the duplicates, or use Set to cut it down, as several have said.
",1530944421.0
kapv89,"So I did a performance analysis of various approaches to extract uniques out of an array of objects. I assumed that each of your unique objects will have a unique ""id"" field. Based on that assumption, included an approach which uses ES6 [*Map*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map).

Here is the code: https://gist.github.com/kapv89/42e61dde289b0a6da3d742b2e8c43f63

Here are the results on my i7, 8GB ubuntu laptop: UPDATE: size of array is 60000, made of 20000 unique objects.

    seed: 632.500ms
    reduce: 65722.724ms
    for-of: 48069.699ms
    set: 378.542ms
    map: 48.952ms
",1530979796.0
cgijoe_jhuckaby,"I've used this in the past: Convert the array to hash keys, then back to an array.  It's fast, and you get free dupe removal.  Also, Node.js retains hash key order, so your final array is actually ordered properly.  Example:

	var arr = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 7];
	var hash = {};

	arr.forEach( function(item) { hash[item] = 1; } );
	arr = Object.keys(hash);

	console.log(arr);
	// [ '0', '1', '2', '3', '4', '5', '6', '7' ]
",1530940450.0
MCShoveled,"The fastest way I can think of given your problem is to query the sets sorted if possible, then use a merge sort to combine the lists while removing duplicates. 

If you can’t query sorted, you can still sort the lists either independently then merge, or as a single merge sort. You could also try using quick sort followed by copying the list to deduplicate. 

I only suspect that would be faster than building an object dictionary, but I could be wrong. ¯\\_(ツ)_/¯",1530942022.0
kellyjanderson,"Are you in controle of the user interface that sends the user queries? If so, can you alter the user queries before they are sent too ElasticSearch so they include sorting?",1530971108.0
ghost_hipster,"I know it isn’t a direct answer but you could define your models as classes that extend Sequelize.Model and that would just give you less headaches

https://codewithhugo.com/using-es6-classes-for-sequelize-4-models/",1530949577.0
BithTree,"The issue is how you declare the methods. I believe the instanceMethods field has been removed in place of

     DeclaredModel.myFunction

and

     DeclaredModel.prototype.myFunction",1530990928.0
Adoroam,This is why I am a fan of SQLn't,1530943640.0
cgijoe_jhuckaby,Very nice tutorial.,1530940538.0
Lyon4054,Nice tutorial make some more advanced onces,1530952086.0
MAJNY5,"Very nice
",1531069792.0
adumidea,Maybe something like [this](https://www.npmjs.com/package/python-bridge) would work,1531231965.0
notAnotherJSDev,"You're looking for pagination. Each ""page"" pulls back a set number of records offset by the number of the page.


Ex: I have 100 records. Each page is 25 records long. So I start on page 1 and get records 1-25, then page 2 is 26-50, 3 is 51-75 and so on.  

As far as the front end goes, you simply don't wipe out what's Already showing when you hit ""view more"". ",1530898278.0
cgijoe_jhuckaby,"I think what you mean is that you want to run an EXE completely independent of the main Node process, right?  Like, no parent/child connection between the two, and one can exit without the other.  If so, this is called a ""detached"" process, and you can do it like this:

	const { spawn } = require('child_process');

	const subprocess = spawn('YOUR.EXE', ['arg1', 'arg2'], {
	  detached: true,
	  stdio: 'ignore'
	});

	subprocess.unref();

Docs: https://nodejs.org/api/child_process.html#child_process_options_detached

",1530940757.0
utbusdriver,"What do you mean by ""upon exit of my Node application""? A child process IS a separate process.",1530894416.0
Aggressive_Income,"https://dzone.com/articles/understanding-execfile-spawn-exec-and-fork-in-node

idk but I found this on google",1530896336.0
SkaterDad,"At a high level, this is the process.  The details may change for a variety of reasons:

1. Set up a database of your choosing
2. Find a library on npm that lets you interact with the database (for SQL databases, I use knex)
3. Set up an endpoint on your Node server which accepts ""POST"" requests (I use hapi most of the time).
4. In the handler function, extract the request body/payload.  (if you're using hapi, this is very easy and automatic.   
 i think with express you need a body-parser middleware?).
5. Take that data, validate it, shape it how your database needs, and send it to your database via the library you set up earlier.
6. On the frontend, if you're just submitting an HTML form, set the `<form action="""">` to the URL of the POST endpoint you just coded.  If submitting by javascript (fetch or other library), then set the URL.",1530886812.0
anubis2019,Just learn either a SQL or noSQL database then red the documentations.,1530907955.0
zergUser1,"I only glanced at this article, but didn't see it mentioned anywhere. You do not need to choose between express and serverless, you can choose both with aws-serverless-express [github link](https://github.com/awslabs/aws-serverless-express)",1530878656.0
,[deleted],1530882371.0
tselatyjr,Only real consideration here is Lambda cold boot times in VPC vs always running containerized servers.,1530931312.0
username_is_taken43,"Lambdas make sense for startups, POC and MVP. As soon as you get lots of traffic it becomes more expensive than traditional apps.",1530936697.0
SnowyMovies,"Make use of the ability to do lots of things concurrently. Then you should be able to pick it up quickly. I'd recommend typescript unless you really like functional programming. ts-express-decorators or nestjs is a good way to get going, if you're looking for a framework. Have a look at typeorm too. It's the best from entity framework and doctrine.",1530889891.0
helge47,"It offers a link to Medium with the guidelines. What do these guidelines say?

Edit: Oh and as I see that's a warning, not an error, so your compiling should work fine, doesn't it?",1530856485.0
Strum355,I like the use of decorators! Might also be worth noting that vue.js are starting to transition their codebase to typescript,1530877599.0
mbael,Plus point for not using and embedding your own DI lib,1530880057.0
infamoustrey,"That's good, seems fairly basic tho",1530813584.0
Traspler,"No, in the simple use case nginx (or Apache or another webserver) is not necessary. As long as the port your express app is listening on, is open, it will work just fine. 
Using nginx in this context does not mean „hosting“ your app or static files. nginx can be configured so it acts as a reverse proxy, a middle man, between the network and your express app. This allows for more advanced use cases and some convenience. Here a couple of example why it‘s nice to have nginx between you and your node app:
- nginx will be the first to get the traffic so you can configure rate limits and other security aspects easily.
- You can abstract your SSL findig so your app just does HTTP and you can plug whatever you want in front of it.
- Imagine you have multiple node apps running and you want to access them over https on port 443 but each has their own domain name which all point to the same server. Only one app can listen on port 443 so you can launch your node apps on the same port. Having nginx listen on 443, you can then configure it to route traffic to a certain domain to one app and traffic to another domain to another app. 

So if it‘s just something small you are testing don‘t worry about it. If you want to do it more seriously I would suggest looking into nginx and also maybe add a firewall on your server. ",1530806901.0
unstablevacuum,"[Applications require escalated system privileges to use privileged network ports.](https://stackoverflow.com/questions/413807/is-there-a-way-for-non-root-processes-to-bind-to-privileged-ports-on-linux)

If you want your web application to be accessible like a ""normal"" website, it needs to be accessible on the privileged HTTP/HTTPS ports (80 and 443).

To make your web application accessible on those ports, you must either 1.) give Node the privileges necessary to bind to those ports; or 2.) run a web server like Nginx as a reverse proxy.

The latter approach is strongly preferred. Nginx is a web server that is thoroughly tested and widely trusted to have privileged access to these ports. Node is an application platform, and acting like a web server is just *one* of infinitely many things it can be coerced into doing.

I'm not calling Node insecure; I'm submitting that Nginx is more secure for this purpose.

So, to answer your question: No, but it (or another web server) is recommended, esp. if your API server is publicly accessible.",1530812018.0
PassTheMayo12,"No, but it's recommended you do that so you can setup HTTPS using a reverse proxy.",1530797681.0
niet3sche77,"No. You can abstract away entirely nginx/Varnish choices by hosting at Heroku, AWS, etc. ",1530798542.0
StoneCypher,"edit: it's not clear why this got so heavily downvoted.  this is actually, legitimately what nginx is for.  this is not a joke or an insult.

no.  nginx is for people who are trying to engineer for 20 server backends.",1530810557.0
jasonwyn,"Think about it. Once they are displayed on the client, they are no longer needed on the server... why not inform the server via client to delete on server once the client has loaded the images. ",1530795264.0
Jake_Jeremy,You could simply stream the images using websockets.,1530802935.0
CommonRaven,"While very non-traditional, you can make a sprite sheet and return that.",1530815942.0
virtulis,"Return a blob. In this blob:

* uint32 - number of images
* an uint32 with the size of each image
* image data

Just write all of this as a response to the request.

On client set XHR responseType to blob, get blob, read numbers via UintArrays and slice the rest into blobs (don't forget to pass content type to slice()), createObjectURLs and put them into imgs.

It's actually much simpler than I made it sound.",1530810748.0
scaleable,"Approach 1: Directly sending the image:

  - Would allow you to even keep the images only in memory
  - The downside is that the response format options are meh:
    - ""zipping""?
    - base64 is atrocious, eats time for encoding, decoding and will make requests huge
    - use some arcane/custom encoding/processing schema?
      - ex: concatenate the binaries and send split info on the HTTP headers?
      - concatenate the images (spritesheet, like the other guy suggested) and send split info on HTTP headers?

Approach 2: Two-step fetching

  - Downside: has to persist them somewhere for a longer time (file system, memory, db...)
  - You may return a list of links to the images, then request them one by one
  - Assign some rule like deleting on 1st request and/or a life time

In either of the cases you can/should care for using streams when possible, so to reduce memory usage spikes.",1530858648.0
kishenji,It seems like you enjoy inflicting pain on us mere mortals. Please don't do this...,1530810925.0
galkowskit,I guess no one really assumes the application will run on a Windows-based server running WSL... so I'd say develop using WSL anyway and just deploy to something more robust.,1530795726.0
kwiwksh,"In most of the services I develop, they are cross-platform/cross-compatible enough for me to run natively on windows itself. 

The only time I want anything POSIX is my build scripts within my package.json which are usually just `&&`'ing commands together.

WSL is nice, but the IO bottleneck absolutely kills it for me as ZSH and my other configs come screeching to a halt.",1530828824.0
r0ck0,I likely don't have much useful info on the subject.  But curious if you're talking more about using Node for desktop programs or web servers here?,1530794872.0
nschubach,"> How non Mac developers deal with this?

I use Debian Linux whenever I can for development.  I don't think that's what you were looking for though?",1530806595.0
FarishKash,I setup WSL recently on a backup machine.  I have had no noticeable delays but I am using a M.2 ssd as a hard drive.  The experience is much better than expected.   The only issue I think I had is when running express is that there seems to be a delay reaching local host the first time.,1530809471.0
EntroperZero,Developing on WSL is fine.,1530812723.0
erulabs,"Developing on machines with terrible performance is a _good thing_ - In production, lets assume you want 1,000 users to use your application simultaneously - in development, you have one user (you!), so you'd actually _want_ a development machine 1,000x slower than production! Development would be a closer match to prod!

Jokes aside, Node on windows works fine for development. Yes, you'll have radically different performance on Linux - but you can validate that with a VM or with a QA environment.",1530832694.0
infamoustrey,Pretty nifty!,1530794750.0
TheKingdutch,I admit I skimmed but this sounds like a reimplementation of IRC in Node?,1530799404.0
ciscocollab,Why not use XMPP?,1530819636.0
ecares,"[https://en.wikipedia.org/wiki/Shebang\_(Unix)](https://en.wikipedia.org/wiki/Shebang_(Unix))

[https://en.wikipedia.org/wiki/Chmod](https://en.wikipedia.org/wiki/Chmod)

So, let's say we have a file named `index.js` with the following content:
```
console.log('hello world');
```

We know we can just run it as `$ node index.js` and `$ ./index.js` gives us
```
bash: ./index.js: Permission denied
```
But if we want to run it directly as an executable, we need to tell the system how to do (note, this will work for UNIX-like systems, as you used `./my_scrip.js` I assume you are using such system, I definitly can;t help with Windows (and don't want to)).

So the system needs to know:
* that the dile is to be seen as executable
* which executable file to use to run our script

Give the authorization to the file to run as an executable:
```
chmod +x index.js
```
(see the wikipedia link for the details).
Let's try again:
```
$ ./index.js 
./index.js: line 1: syntax error near unexpected token `'hello world''
./index.js: line 1: `console.log('hello world');'
```
Actually, the system tried to execute this as a shell script (written in bash).
We now need to let the system know **how** to run this file. That's where the shebang parts happen:

edit the file to have
```
#!/usr/bin/env node
```
as first line:
```
#!/usr/bin/env node
console.log('hello world');
```

now try:

```
$ ./index.js 
hello world
```

This solution **has nothing to do with Node.js and works for every other cases**.
However, if your goal is to build portable executables to distribute, you might want to look at https://www.npmjs.com/package/pkg (that will build executables that bundle Node.js) but you will be tight to a Node.js-y solution.

",1530781234.0
,I think your actually use a # path to Node  at the top of the script much the same way you can do with bash.  ,1530780923.0
Cyberuben,"`Model.updateMany({}, { someProperty: ""some value"" })`",1530796086.0
powerOfAsshole,"You don't have to change existing records. Just update your mongoose schema, new property will be added next time documents get updated",1530787565.0
warchild4l,"You can update schema, i think. ",1530778754.0
quizasquizas,"Normal node devs eat bread.

If you take the elite courses, you eat cake.",1531117777.0
DaJuukes,"Using a test runner like Mocha or Jest + a assertion package (Chai or native assert) you can write tests that check your routes for the proper input handling and make sure they persist data when they should, etc.",1530793896.0
ccleary00,"You can find plenty of tutorials online about how to set up Mocha and Chai (and other libraries like Sinon for mocking). But the question you seem to be asking is more about *what* to test.

I'd focus on splitting up your tests by each slice of the stack, and probably start with testing the Node layer first.  Testing components in React can be a bit tricky if it's your first time writing test cases, while things in your Node service should be more ""isolated"".

Going with the assumption that the functionality of your application is like so:
User enters data into React component or form ---> UI calls Express route ---> Express route forwards on details to Node service ---> Node does some processing of data ---> Node saves data to database

Starting with **Node**, say you have a ""process()"" function that takes the data entered by the user and does some re-formatting of it like adding properties to the object, sorting items, etc. You could write test cases that make sure the data entered is in the shape expected, that format the data like you expect, and that also handle ""unhappy path"" scenarios like what the function should return if it can't format the data or some other negative scenario.

Things like this that don't interact with anything else like databases are a good place to start for writing tests, because they are easier to setup.

When you get to your Node functions that call **MongoDB**, this is where things get tricky and you have a decision to make. You can either stub/mock the database responses (you can use Sinon for this) or setup a test database for your unit tests to go directly against. There is no perfect answer for when to use which strategy, but for now I'd probably just use a test database since it's one less thing for you to have to learn (that is, mocking).  

Generally with unit tests you want to keep things isolated to the *unit* itself, meaning the function under test, so running tests against a test database means you are now including the database itself too. But with your application, this is probably OK to do as the data likely won't be changed by other pieces of the app and you can expect more consistent queries.

You'll want to test similar things as with your Node services, test bad input, test that it saves to the database and you get a successful response back.

**Express** routes are kind of hard to test too as they are usually integration tests (similar to the database problem just discussed).  TBH I usually don't test my express routes as long as they are fairly ""thin"" and only call the functions that are in my Node service(s).

Lastly, when writing tests for the **React** components, you'll want to test the pure logic functions that don't have to do as much with the view/display of data (like filtering, validation, etc.) in addition to the view itself. You probably don't need to test things like ""the button is red"" but will likely want to test ""clicking on this button takes you to a new page"" or ""user can successfully enter in details in the form"".

You can read more on BDD (behavior driven development) to get ideas for UI testing.

When you're comfortable with unit testing, you can start to learn about integration, functional/end-to-end testing (they are all technically different but usually used interchangeably).

I wrote a [blog post](https://www.coreycleary.me/explain-javascript-unit-testing-like-im-five/) about unit testing for those new to it that you might find helpful too. ",1530834939.0
alfredmuffin,"Just want to gauge this subs opinion:

Does anyone agree that we should not bundle npm with Node? npm is a private, for-profit company and it is my opinion that we should eventually move away from npm infrastructure.

Also I’ve used pnpm quite a bit and it is excellent. Much faster than the latest version of npm (Yarn is still also faster than npm, and has yet to fuck me).",1530759432.0
flipperdeflip,"I don't trust people who think a schema or SQL query is too complicated to keep a document store database in a manageable state. It is going to be  horrid swamp of unreliable structures, typos and tacked on shit.

99% of Mongo fans are just lazy, in-experienced or shortsighted. If you really need a document store you'd know it without these dimwitted fullstack fanboy articles.",1530777512.0
r0ck0,"That ""reasoning"" for using nosql is retarded for like 98% of projects. And saying you can't change an sql schema is just flat out lying.  ",1530760098.0
ChronSyn,Promisified DNS module. I'm liking these minor version releases more and more.,1530773924.0
jakuski,Happy cake day.,1530746612.0
StoneCypher,"whereas the others are answering your question, i'm here to point out that those can just be one query, which will be much faster and much easier to maintain

    select * from users as u, posts where post.userid = u.id;

or, ideally, a much smaller set of columns from `u`",1530731624.0
evs-chris,"Modern versions of node-postgres (since 7?) already have apromise-based API, which makes all of this super convenient with await.",1530731527.0
MUDrummer,Just use [pg-promise](https://github.com/vitaly-t/pg-promise) instead of pg. ,1530731189.0
undervisible,"    const { promisify } = require('util');
    const query = promisify(client.query.bind(client));
    const users = await query('SELECT * FROM users');
    const posts = await query('SELECT * FROM posts WHERE user_id = $1', [users.rows[0].user_id]);",1530730144.0
fasibio,I am happy about Feedback! :),1530721934.0
whmartins,"If those boolean values are really annoying for you, you can use this:

https://github.com/niftylettuce/dotenv-parse-variables
(Grabbed from this thread: https://github.com/motdotla/dotenv/issues/51)

I think using ENV vars is the ""recommendation"", as it's easy to integrate with other apps (for example, Circle CI, Kubernetes, etc.). However, I've seen people using ""rc"" files, as it lets you customize stuff in different places (your $HOME folder, some path in OS, etc). You can check a module that does that here: https://www.npmjs.com/package/rc.

Hope it helps!",1530720536.0
loadhog85,Firebase Auth is very easy to implement.,1530737194.0
savioverdi,PLAINTEXT HARDCODED PASSWORDS! ,1530725703.0
b0z33,Passport... Either oAuth or username/password.,1530714898.0
ellisgl,I use passport since it allows for swapping out / adding systems easily. Example https://github.com/ellisgl/epsiom/,1530721263.0
lordnuada,Look into firebase. It can do various forms of auth and is a NoSQL db. I've been using it alot lately and I like it.,1530850692.0
dunklesToast,What WebServer do you use?,1530715272.0
panbhatt,"I think it would be better if for the incoming request body you use JOI (another validator developed by WALMART & used extensively with Fastify/HAPI frameworks). 
Once you completed static validations i think every framework like middlewares in express in pre/post hooks in Hapi/fastify you can perform DB level checking. 
",1530706339.0
mbael,I’ve been using [this one for validation](https://github.com/typestack/class-validator) and [for transforming](https://github.com/typestack/class-transformer/blob/master/README.md) ,1530706435.0
Equality7_2521_,"While people are here does anyone know a good framework for Sanitizing Data Input? Something similar to PHP's filter\_var($variable, FILTER\_SANITIZE\_STRING)? 

But to answer your question OP I'm essentially doing exactly what you're doing minus the Sanitization (which I'm trying to figure out myself).

1. Get Data Via Endpoint
2. First level of Validation, return error to client if input data fails there. Then Log the failure.
3. Level of Validation through Sequelize/Validatorjs, log the failure and return an error to code processing in step 2 
4. Input hits the data base, if data is inconsistent with the Table requirements then I get a Sequelize error, and will log it as a critical error.

I still haven't seen any errors logged on 3 or 4, but you can never be too safe!  ",1530723014.0
stdarg,"We use custom software that supports the OpenAPI specification validates requests and responses in a proxy. Having a Node.js service act as a API proxy on AWS when we could use API Gateway. Recently, I re-implemented this software as express middleware. 

Why not use one of the many OpenAPI or swagger implementations? They all have bad security vulnerabilities.",1530723598.0
keithwhor,"I build APIs using [Standard Library](https://stdlib.com/) / [Code.xyz](https://Code.xyz) meaning I get parameter validation and type sanitization for free. ;)

(Disclaimer, am founder. Yes, I am being cheeky.)",1530718092.0
reikj4vic,"Anybody have any experience using [restify](https://github.com/restify/node-restify)?

Just saw it mentioned in one of the articles but at a glance it seems very similar to Express. What makes it a better use case than something like plain Express or [Feathers](https://feathersjs.com/) for building a REST API?",1530733325.0
TheNoim,"What do you mean with ""to android"". Is it also a webapp or is it a native or or or....",1530703780.0
sardar1831,"Without to() it will emit to all the connected clients, but i want to emit for the specific client for which it is intended. Actually this emit function will be a trigger to refresh data.",1530697749.0
Sythic_,Don't use .to()? If its working without it why change it?,1530696882.0
mbael,First one with DI (Inversify),1530703866.0
Max_Stern,"Mix them? If you want to work with some data within ""context"" then use classes. If it's something ""stateless"" or you need to create something like ""singleton"" then export functions.  
Although I always use named exports for both cases. ",1530712563.0
kefirchik,"Not to be a naysayer, but in what way is this preferred over the network throttling/conditions simulator in the Chrome devtools? 

https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling",1530700263.0
Oceanswave,"Not to be a naysayer, but in what way is this preferred over the network throttling/conditions simulator available in fiddler/charles?

http://qualityboulevard.blogspot.com/2016/09/bandwidth-throttling-using-fiddler.html

http://thinkingengine.net/products/fiddler-connection-simulator/

https://www.charlesproxy.com/documentation/proxying/throttling/

Or toxiproxy

https://github.com/Shopify/toxiproxy",1530701744.0
shawarma_burrito,These acronyms are getting ridiculous.,1530664150.0
PM_ME_UR_SIDEPROJECT,"If I had to pick a stack based around Node to do this type of project, this is what I would choose. Postgres is my go-to database and React is my go-to frontend technology. The only thing I’d add is TypeScript because I’ve had a lot of good experiences with the type checking saving me from silly errors.",1530649998.0
TG__,Really cool! Question though: what are the differences between this and the projects it is based on? ,1530727909.0
maelfyn,"Much higher conversion rates. People are much more likely to sign up if they can just click through with their Google or Facebook account. My sign-ups went through the roof after I added it. I run a small [indie game website](https://nevergrind.com), and most don't want to sign up for an account for some random indie website.",1530649770.0
pomlife,"The entire point of using SaaSes like Auth0 is offloading the effort of maintaining a custom solution for a price. The calculation to be done is a) whether the cost of the SaaS outweighs the cost of implementation and maintenance of your own system, and b) if the limitations of the API are likely to cause you additional work.

User Authentication and management is a core part of most apps, so it often makes sense to offload it.",1530648793.0
whmartins,"Auth0 (and other services) let you **focus** on your domain problem, so you're basically buying instead of building.

Imagine that now you need to grab analytics information, it's much easier to use a service instead of instrumenting your code to get analytics information (at least for the most common use cases).

Speaking about Auth0's solution, imagine that now your application (this one using Passport) needs to have Facebook and Google login. Then, you need to go there and code this by yourself (even though Passport implements most of it) and deal with all the vendors by yourself. Then, after that, you need to do Single Sign On (SSO), there you go reading about the protocols and implementing it. This costs **time** and **money**, and usually your company needs you to be focused on its business. With Auth0, you can enable those things mostly with ""one click"".

If your app is running fine with JWT tokens and you don't see an ""expansion"" on that, stick with it. But, if your app will need to have things like Oauth, SSO, maybe Auth0 (or other service) will be a good choice for you.",1530653750.0
franciscopresencia,"Lock doesn't work by default with the latest React 16.x (you use Redux, so there's a chance you are using React even though you don't comment on it) so you'll have to bundle 2 major React versions with a huge code size or use Yarn for some obscure fix: [https://github.com/auth0/lock/pull/1142#issuecomment-357694435](https://github.com/auth0/lock/pull/1142#issuecomment-357694435)",1530666090.0
unscholarly_source,"From an enterprise point of view, it's also to commonalize the architecture and the experience, for companies with a large portfolio of services.

But if that were the case, they would probably and most likely also roll their own Auth provider.",1530661236.0
josewhitetower,"I've installed, and tested. So far no problems on Ubuntu",1530649440.0
pyrophire,"Only issue I ran into is the server.js file was inside the rest directory, but referenced ./rest/ in the file. I had to move the server.js file out to be a sibling of the rest directory and everything worked fine after that.",1530683918.0
humpier,Would be nice to know in the docs that these are Mongoose models. Just saying because sometimes people don't use Mongo.,1530702949.0
VIM_GT_EMACS,Upvote because i really love seeing more people use Nuxt. VueJS has totally improved the way we do dev at my work and nuxtjs only made it better. ,1530643543.0
Hapistoric,"Strapi looks great, I was looking for something like this",1530661554.0
BehindTheMath,Why can't you just send an email with a verification link? ,1530640955.0
monkehparade,You could also check if mx records for the domain exist.,1530686056.0
kryptkpr,"You only care that it's valid, you don't care if the user actually owns the mailbox?  The only way to tell if the email was actually correct is to send a validation link to it. 

Ps: avoid npm packages with less then 5-10k downloads a week ",1530970324.0
Zooooooooo,Shouldn’t it be req.user._id?,1530633192.0
Siedrix,Try https://www.npmjs.com/package/minimist.,1530626366.0
CharlesStross,"You could have an array of rooms; your last room will always either be full (make a new one, add player, and append) or ready for a new player. If your want something less fragile and global (good), make a class that handles all your rooms for you, including teardown etc. when everyone leaves. ",1530626751.0
kapv89,"I saw your approach in your comment. That approach 1) won't scale, as it makes your server stateful, which would prevent you from adding more servers and scale horizontally, and 2) It increases complexity by a lot.

Let me give you a better approach, which makes use of rooms, a feature provided by socket.io - https://socket.io/docs/rooms-and-namespaces/.
You'd also need redis to make this work. And I am gonna try and tackle the scenario where ""n"" number of people can join a game before its started.

- Create a redis queue, call it ""games"".
- Create a redis hash, call it ""players""
- On a new socket connection, check if the queue ""games"" is empty, via *llen*. If it is empty, generate a new uuid, name it *gameId*, and *rpush* the *<gameId>* into the queue ""games"". Also, create a game room, and join the current socket into that room via *socket.join(gameId)*.
Create another redis queue with the name *<gameId>* (the actual id that you generated), and ""rpush"" the *socket.id* into it.
Finally, in the ""players"" hash, run *hset players <socket.id> <gameId>*.

- On new connection, if the queue ""games"" is not empty, peek the first element of the queue ""games"" via *lrange 0 1*. This will give you a *gameId*. Check the length of the queue *<gameId>* using *llen*, if it is equal to *n-1*, where *n* is the number of players required to start the game, join the current socket to the room *<gameId>*, and run *lpop* on the queue ""games"", and 
delete the queue *<gameId>*. Also run *hset players <socket.id> <gameId>*.
Use *io.to(gameId).emit('start')* to send the message to the clients that they can start the game.
If the length of queue *<gameId>* is less than *n-1*, join the current socket to the room *<gameId>*, and ""rpush"" the *socket.id* into the queue *<gameId>*. Also run *hset players <socket.id> <gameId>*.

- When a socket disconnects, check the *gameId* stored against the *socket.id* in the ""players"" hash. If no queue exists in redis with key *<gameId>* send a message to the *gameId* room to invalidate the game. If a queue exists,  with key *<gameId>*, run *lrem 0 <socket.id>* on the queue. Also run *hdel players <socket.id>*.

- When the game completes, the easiest option is to disconnect all players, and reconnect them via the client after like 100-200ms

To scale your socket.io & redis deployment horizontally, refer this: https://www.reddit.com/r/node/comments/8vbwbk/best_way_to_scale_for_websocket_support/e1n8xpg/

And a redis library to run all those commands via node.js: https://github.com/NodeRedis/node_redis",1530650359.0
BTMPL,"Son, you need to learn how to gist - https://gist.github.com/

Ain't nobody got time to decode that mess.",1530629885.0
dballz12,I figured out it's because of the lifecycle of the variables being set in the axios call. I am not sure how to retain the values once I set them with the axios call.,1530630725.0
ecares,/u/MetaDesignSolution can you please stop your useless spam please? [https://www.reddit.com/user/MetaDesignSolution](https://www.reddit.com/user/MetaDesignSolution) ,1530622665.0
oldyoyoboy,"IBM has a full chatbot API for Watson Assistant.  It has a NLP (natural language processing engine) that lets you give examples of how your users will ask for help and then it builds a model and scores all of your customer chat messages against that.  You just keep an eye on the unmatched input and you add skills to satisfy the things your users are asking for most often (and you retrain your model).  It's fairly easy, and there is a bunch of work in there that you don't want to do yourself.  

Full Disclosure - I work for IBM.
",1530627328.0
NoLuckPass,"Have you tried Dialogflow? This platform uses Google's machine learning platform and is quite quick to get to grips with. There are plenty of examples of how to develop your language model and integrate it with external services on their site (https://dialogflow.com/). I have used it quite a few times, as well as the Lex service from Amazon and the results are good (accuracy of recognition, effectiveness of learning etc..)

The best thing about it is the price, Dialogflow is free (unless you want to scale it up for enterprise grade service, the free tier various at 1000 interactions per day or 15k interactions per year). You can integrate your service fairly easily, they have got plenty of documentation on that.
",1530635541.0
Jag783,Do you use hipchat (atlassian's first-party slack clone) with JIRA? There are extensive APIs and already built chat bots you can find [here](https://www.hipchat.com/docs/apiv2).,1530644383.0
moufoo,"I recommend Microsoft BotBuilder (it's the open sourced part) to manage your dialog flow. Because it is written in typescript, implementing a custom JIRA connector is quite easy as they provide you with the interface to implement. You can also pretty easily switch NLP providers by implementing a new NLP interface. We went with Recast.ai for NLP but there are plenty of other great options on the market.

For hosting it's a nodeJS instance + reddis if you need some persistance. Or you can go with the whole Microsoft Bot Framework suite but we found it was not worth it.

IMO while it can take a bit longer to get started because it's not simply plug and play, we have never faced a use case we couldn't implement. This is because it's code and not just a fancy interface with some limitations so everything can be customized according to your needs.",1530646738.0
tommygeek,"Depends on your use case, project goals, time constraints and current knowledge. 

If your use case supports building a restful architecture because that is a good way to represent your model, go for it. If your going to want to access more than one resource endpoint in the course of gathering data, maybe you want to use something like protobuf with defined resources that make sense, or have a GraphQL resource. 

But if you're familiar with REST API development and have tight time constraints, go with what you know. If the point of the project is more about learning something new, take your time and really learn the things you want to go after, but it might be better to limit your unknowns to just a few libraries or frameworks just to keep the project moving.

In the end, the answer is really super subjective.",1530625633.0
elimcjah,"Its great you are asking the community.  If you are really trying to build a production application that would mimic what you would be building as a Javascript developer in a work environment, you are on point with firing up 2 node.js servers.  The backend is easiest built in some form of Express.  Loopback is a diamond in the rough for this type of thing.  It makes serving up APIs about as easier than any other backend framework I have used.  Then the frontend is up to you.  I'm a Vue developer but the current market has a stronger want for React or Angular.   I'd stay away from GraphQL until you are a really confident dev though.  Hope this helps.  Good luck and keep on coding!",1530634314.0
binarytide,"I personally use vue on the front and parse js on the back, works like a charm",1530666917.0
cirsca,"> Should I build a rest api with node, and consume those json responses in another server (with angular etc) Or should the node / frontendJS be on the same server?

That's a tough question but luckily for us, we can punt making that decision until _after_ you have built your client and server. If you are building a SPA ( which is sounds like you are wanting ), you will probably be using some development server/browsersync/webpack thing. That's your ""another server"".

Once you have everything working, spend the day figuring out your building strategy. Are you using webpack or rollup? Do you need to build your Server as well or just your client?

Then, once _everything else_ is taken care of, figure out if you want to do SSR or not.",1530886235.0
Max_Stern,Why would you make it private? ,1530634369.0
mulijordan1976,How it stacks against https://github.com/rickyrauch/nodejs-starter?,1530619195.0
shawarma_burrito,I’d like to see this!,1530646517.0
mafrax4,Remindme!,1530658033.0
vladjjj,It would be extremely helpful to maybe just mention the name of the city where a conference is being held. ,1530623314.0
monsto,"Try the middle of the country occasionally... Kansas City, St. Louis, Oklahoma City, Denver.",1530644950.0
daniel_mcq,Since this seems to be an international list of node conferences then you should include NodeConf in Argentina in October. Despite being in a Spanish speaking country the event is in English. https://2018.nodeconf.com.ar,1530950243.0
dangerzone2,MongoDB... ,1530632090.0
mbael,You should use some centralised scheduler like [bull](https://github.com/OptimalBits/bull/blob/master/README.md) or you could use TTL index (mongodb) but that needs compatible architecture for db design,1530617116.0
Silveress_Golden,"This is the way I would solve this problem:

have a field titled maturity or whatnot that when you create an invoice is set to ""no"".  
Have a script that openes up a connection to mongodb, does a query such as:

``const unmaturedInvoices =  await client.collection(""invoices"").find({mature:""no""}).project({id:1,invoiceID:1,matureDateTime:1}).toArray().catch((err) => {console.log(""error"",""Getting unmaturedInvoices: ""+err)});``

This will give you an array of immature invoices, ye could then process them so that  any of them that have a date inbetween now and this time yesterday are marked as mature.

``client.collection(""invoices"").update({invoiceID:whateverIDYeAreUpdating},{$set: {mature:""matured""}},{upsert:true}).catch((err) => {console.log(""error"",""setting maturedInvoices: ""+err)});``

Ye can run this daily, or something like that, and if an invoice is marked as mature it wont get caught up in the next pull.  
If ye want more I could do a sanitized gist.


(working on a  related problem myself and this is close to my solution)

",1530621448.0
shawarma_burrito,This would be fantastic.,1530607896.0
BTMPL,"What's with all the medium hate of lately? It's a platform just like any other really. Lots of quality content there. Arguably also a lot of ""this is how you use console.log"" but come on ...",1530624424.0
Felecorat,It's supposed to unorganized.,1530604086.0
TheNoim,I like it. Looks really nice if worker_threads gets stable.,1530690689.0
njiv,"btw, there is a transpiler (mine) allowing much wider class of supported code, eg closure captured variables passing, switching contexts in code without higher order functions, simulating something like shared state concurrency with locks or transactional refs, implicit parallelism etc. There is no runtime lib for these yet though, but I’m going to write soon. http://github.com/awto/effectfuljs

",1530599052.0
cgijoe_jhuckaby,[Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe Stripe](https://stripe.com/docs/api/node#intro) :),1530587429.0
half_lurker,I've used [Stripe](https://stripe.com/docs/api/node#intro) in the past for a little toy project that didn't go anywhere. There are some minor restrictions about banks (origin was restricted to US account or something) and little things like that but overall it was not overly difficult to setup and figure out. GL,1530585962.0
martymav,"Stripe is amazing and easy to use. Depending on your needs though, the Shopify platform might be better for you.",1530620294.0
menxit_,"You can use async and await:

```
async foo() {
  await p1
  await p2
  await p3
}
```

Or you can chain the promises:

```
p1.then(res1 => {
  console.log(res1)
  return p2
}).then(res2 => {
  console.log(res2)
  return res2
}).then(res3 => {
  console.log(res3)
  return res3
})
```
",1530587124.0
BloodAndTsundere,"It depends on how the dependencies are related. If you have a direct chain, i.e promise2 needs the result from promise1 and promise3 needs the result from promise2 (but not promise1), you can do this:

    promise1().then(res1=>{
        return promise2(res1)
    }).then(res2=>{
        return promise3(res2)
    })

If you do more complicated things, you might want to use the bluebird promise library which has some nice extra features for collecting promises together. For instance, let's say promise3 depends on both res1 and res2:

    const Promise = require('bluebird');
    promise1().then(res1=>{
        return Promise.join(res1, promise2(res1))
    }).then(result=>{
        var [res1, res2] = result
        return promise3(res1, res2)
    })

You could also use async/await syntax, which looks a lot like synchronous blocking code but is asynchronous:

    var res1 = await promise1()
    var res2 = await promise2(res1)
    var res3 = await promise(res1, res2)

Note that `await` can only be used in the body of a function that has been declared with the `async` keyword:

    async function doIt() {
        var res1 = await promise1()
        var res2 = await promise2(res1)
        var res3 = await promise(res1, res2)
    }

",1530587750.0
kapv89,"-Assume you have an array which contains your functions:

    let tasks = [fn1, fn2, fn3...];

-If you have async/await support:

    const runTasks = async () => {
        for (let task of tasks) {
            await task();
        }
    };
   
    // if inside an async function
    try {
        await runTasks();
    } catch (err) {
        ...
    }
    // if at top-level, option 1:
    runTasks().then(() => {...}).catch(() => {...}); 
    // if at top-level, option 2:
    (async () => {
        try {
            await runTasks();
        } catch (err) {
            ...
        }
    })();

-If you don't have async/await support, use [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce):

    const runTasks = () => {
        return tasks.reduce((chain, task) => chain.then(() => task()), Promise.resolve());
    };
    runTasks.then(() => {...}).catch(() => {...});",1530637065.0
mrrussiandonkey,I personally did this using the waterfall function in the async library,1530585293.0
ScabusaurusRex,"My piHole hates this link and won't let me visit. Either 1) it's shady, 2) it's hiding behind shady link-counting / redirecting junk.",1530584076.0
HideousNomo,"This is a redirect site that slaps a Udemy affiliate link on to a Udemy address. This is nothing but spam. Downvote and move on. 

check the URL, `udemy.cc` classic phishing practices. I hate that this sub is full of these.",1530596337.0
mattboutet,"Your Ninja edit appears to be the normal output of running `pm2 startup`

My normal routine:
```
pm2 startup
[generated command]
pm2 start [server]
pm2 save
```

worth noting that I'm not using sudo here- pm2 should run as a normal (or even better - dedicated) user, not root.
",1530578323.0
iBlacky,Why,1530584075.0
isakdev,"So, you started a thread to tell us you read the documentation?",1530579041.0
the_hangman,I find cocaine.js and nose.js to be a really productive combo,1530569831.0
ccb621,"By ""nose"" do you mean ""Node""? Your choice of database should really depend on the data you are storing and how you are accessing said data, not the runtime atop which you are building.",1530563046.0
virtulis,"> What’s the best database

PostgreSQL, for 99% of cases.

> to pair with nose js?

Doesn't really change anything.",1530564382.0
mbael,"There is no such thing as best. 

Mongodb is great for non-relational data structures and sometimes when product requirement is heavily changing from time to time, so for prototype development.

Otherwise use some relational like postgres (or mysql etc, you will be fine)",1530617443.0
notAnotherJSDev,"Gonna throw my hat in the ring for PostgreSQL. It supports all sorts of things that you might need in the day to day with relational databases, but also supports the JSONB type, which gives it the flexibility of NoSQL. 

If you are just trying to store blobs though, MongoDB might be fine.

But as with everything, it just depends on what you're trying to do.",1530565617.0
Xnuiem,"The real answer starts with a question: what are you trying to do with the data?  

MySQL and Postgres are options.  Lots of good there in a very ""if it ain't broke don't fix it"" sorta way.  They store and protect t your data and will always write.  Scaling can be a challenge and modelling is a bit of an art form.

Mongo is there for a more shiny object sorta option.  Mostly always writes, scales somewhat easily and if you don't paint yourself into a terrible corner, modelling is easy.  But trust me, if you add features this will come back and bite you.

Cassandra is there too.  Easy scaling and always writes.  Modelling is odd though and don't ever use more than 2 indexes.  But the data is crap so write a lot.  Hopefully you don't have to delete because that will suck.

Edit: Typo",1530582108.0
rotharius,"Note that relational databases (MySQL/MariaDB, PostgreSQL) give you a lot of guarantees regarding your data through ACID-compliance and schema's. In order to deal with the object-relational impedance mismatch, consider using an ORM.

Depending on your use case and requirements, some applications don't need a relational database or a relational database does not suffice for certain speed or volume requirements.
If either of those is the case, look into document stores like MongoDB or CouchDB, key-value stores like redis or column-oriented DBs like Cassandra and ScyllaDB.

Whatever you choose, try to structure your application to make the domain and the application use cases independent from your persistence implementation. This way can more easily optimize later. You can use the repository or the DAO pattern for that.",1530596710.0
r_HOWTONOTGIVEAFUCK,"The reddit circlejerk will arrive to downvote any mention of MongoDB. While it may not be a relational database, it is an excellent option.",1530566172.0
stefantigro,Face js ,1530743046.0
illyrianHero,MongoDB,1530563364.0
nothingduploading,either mongo or rebirthdb/rethink,1530562941.0
notAnotherJSDev,"Wild west, honestly.

Since you're just focused on making a REST api (seeing as you're using koa), might use the sort of M*C structure (you won't need a view layer).

So, inside of your source folder...

```
- index.ts
- models/
  - all of your models might go here
- routes/
  - all of your route definitions go here
- controllers/
  - all of your controllers go here
```

Granted this is a very express-y style of handling things, but is, in general, what I've seen in the year and a half I've been working with Node.",1530565896.0
wrobbinz,Yeah Node server structuring really is the wild west. I only have one thing to add and that's to separate your server and its config from your business logic. That means at the root you could have a /server directory that handles firing up the server with related configurations.,1530569943.0
jasonwyn,"I put overarching stuff in root, eg server setup and config files. Separate folder for models, containing for instance user.js, product.js etc. Routes go in a separate folder, and all route handlers/controllers along with tests go in a separate folder. ",1530573384.0
quizasquizas,"\[Generate\]([https://expressjs.com/en/starter/generator.html](https://expressjs.com/en/starter/generator.html)) various standard express apps, and learn from them?

Koa structuring of the bigger app (folder structure, where to break off into modules, etc) won't differ much.",1530605812.0
bjpbakker,"You mostly get to “keep connections active” by automaticly reconnecting on connection errors.

Aside from your software updates, your clients _will_ disconnect due to network errors. When they automatically reconnect, they will not notice these minor interrupts.",1530565895.0
bladegery,Do we really need one of these every day here?,1530564026.0
sumdudeinhisundrware,Adding memes in between every paragraph is hella annoying and makes me think the author is a moron.  I didn't read a word of it and don't want to.,1530582675.0
highres90,"Node expert is subjective. Don't base an interview on what they say they are. Base it on what you want them to bring to your company. 

You want a skilled API dev for example? Query them on Express, ask their opinion on Koa and whether they prefer its approach to Express's. Ask them about API security, like use of sessions and cookies vs token based approaches like oauth.

You definitely want to assess their core JavaScript too, ES6 features like let and const and how they differ to var. Async approaches like promises, async/await, callbacks. To me an ""expert"" would know about the event loop and what concurrency looks like in JS. But again that's subjective. Closure would be another important topic. Arrow functions versus regular functions, do they know the difference. Do they understand the subtleties of 'this' in JS etc etc etc the list goes on 😋

Edit:

Also gauge their understanding of the ecosystem. So npm (or preferably yarn these days). How module resolution works, Commonjs vs es6 import/export. ",1530570663.0
billy_tables,"Applies for any technology, but: ""What would you (personally) _not_ use node for?""

If someone's comfortable with a tool they usually have a good intuition for its limits. 

",1530575363.0
JakeInDC,"they need to know the same concepts as with any other solution: Streams, read/write files, async workflows, how webservers respond to requests, websockets, queuing",1530581483.0
evster88,"Describe the most complicated project you built in Node, what libraries you used, and why you chose them over alternatives. ",1530594426.0
Dw0,"the standard js quiz, plus

* event loop, setTimeout / setImmediate
* how to implement a recursion using callbacks/promises
* events
* how require resolves a module
* streams
* clusters ",1530561911.0
mannyv,"Assuming they can write actual code, the big question to ask is: why node?


Ideally they would talk about how node fit the requirements of the last project, what those requirements were, and how node was better than other options.


There are many, many languages and runtimes that you could use besides node, just like there are lots of tools you could use besides X. If your ""node expert"" is only an expert in node that would likely be a problem, unless you're really looking for a node expert. Most places are probably looking for an expert who knows how to write node/js, not a node/js expert.",1530569008.0
bel9708,"Start with callbacks. Work to promises, event emitters and observables. 

You can ask them about node-gyp

Talk to them about babel ask them what their favorite upcoming language features are. Talk to then about proposals like function bind which probably aren't going to be added.  A node expert should be able to talk about language theory and proposals for days. 

Finally just ask them to bring their computer and pair program an API with them. ",1530554814.0
Jyothish88,"Grabbing Node questions from this thread will be a bad idea.  If you are asking some questions with an expectation of answer you already have is a worst idea in an interview.  ""what"" questions  won't give you a node expert.

I would say, explain the development/requirement scenarios in your company and see how the candidate is responding to them. Make questions from their answers. 

Ask about the best practices and implementation approaches.  ",1530608184.0
nagyvi,Why do you consider yourself a node expert?,1530820168.0
SleepyBrownFox,"You can't ask any questions in an interview that you don't know the answers to thoroughly well. So asking Reddit for interview questions is a waste of your time, and everyone else's.

In other news, if you're not already an expert in X, you won't be able to effectively judge whether someone else is an expert in X. The fact that you're not an expert in Node is apparent from your approach to the problem, so first find a Node expert to interview your candidate. Yes, I realise this solution is recursive. Welcome to the world of IT.",1530865070.0
DLabz,"What’s the maximum size of a Buffer?    
Which methods for converting a Buffer to TypedArrays and vice versa don”t duplicate the data?    
How do you pipe the entire http request to a child process?    
What’s the maximum amount of memory a process can use?    
What’s the difference between ‘ipc’ and ‘pipe’ stdio channel?    
",1530573844.0
oorza,"Ask them about TypeScript, ClojureScript or Flow. It doesn't matter which one, all three trade up front development time for long term maintainability and test surface area reduction.  If they don't know this, don't agree with this, or haven't heard of all three, they're not fit for any position of seniority.  

Ask them what the worst part about Node is.  There are tons of good answers, but find out why they think what they do.  Then ask them the best part about Node.

Ask them what's wrong with NPM.  Ask them about module resolution and its issues. Ask them to compare Node and it's FOSS ecosystem to other languages and discuss the benefits and drawbacks of various differences in the approaches.

Experts know enough about any technology to talk at length about its shortcomings.  Expert wannabe fanboys generally can't.  An expert should be a senior with the experience to make qualitative analytical comparisons to other languages and tools.  

EDIT: the downvotes prove how little experience there is in the Node developer community.  Y'all come back after you have to maintain a Node project someone wrote 3-5 years ago and is no longer anywhere near the company.  There's a reason why this is an ""expert"" qualification and not a ""developer"" qualification.  Most of the questions in this thread are qualifications for the level about junior and below senior; if you think knowing JS and having experience with a few FOSS libraries makes you an expert, you've got a rude awakening down the road.",1530562378.0
SyndicatedLife,How would you design node?,1530584579.0
jupytermars,"cool, congratulations! can you tell us a little bit more what exactly it does / what you were struggling with that this tool now solves?",1530547909.0
roomzinchina,"Only think I've spotted so far is if I spoof the upload so the filename header is `../settings.json`, I think it's possible to overwrite the config file (or any other file).",1530552648.0
freedomfreighter,"I suppose it's somewhat unclear what you're looking for. If you want to write your own SQL, I'd suggest Knex.js. 

What is it about the ORMs you've listed that doesn't quite do it for you. Is it just that complex queries aren't well supported?",1530552784.0
Oceanswave,"Seems like sequelize’s raw queries fit this bill:

```
const projects = await sequelize.query('SELECT * FROM projects WHERE status = :status ', 
  { replacements: { status: 'active', type: sequelize.QueryTypes.SELECT }}
) as Project[];
```",1530555656.0
HipHopHuman,"[Objection.js](https://vincit.github.io/objection.js) is probably the closest thing you'll find. It allows raw queries, and you can set up validators using JSON schema. You may or may not see this as a drawback; but it does not support automatic migrations - however, it is built on top of Knex.js, which has a syntax for writing and running your own migrations. ",1530583014.0
andycharles,Are you looking for something similar to activerecord? Or even simpler than that?,1530547841.0
andycharles,"Guys at Adonisjs wrote an implementation of Active record https://adonisjs.com/docs/4.1/lucid.

They are moving their entire codebase to Typescript, so maybe you can go through the ORM and see if it can be improved and maybe work with them to do a Typescript rewrite.",1530555255.0
wolfepvck,"I have been working on something similar to this, if you'd like to have a look. There is some documentation in the repo. Also written in Typescript. And open to pull requests always!

https://github.com/matthewwolfe/active-record-js",1530555268.0
kyle787,"TypeOrm is probably what you are looking for. You can use an ActiveRecord or repository design. 

https://github.com/typeorm/typeorm",1530566953.0
core_dumpd,Try running it with `--verbose` to see what files are changing.,1530542561.0
BrightonTechie,"Is auto save on? If it is, it saves every time you stop typing so would cause this behaviour ",1530543177.0
ErixErns,I feel that it starts your node server every time you change beta.js so that you don't have to restart the server every time.,1530544428.0
RushPL,Use `node-dev` instead of `nodemon`. Node-dev reloads on actual changes to real dependencies.,1530652070.0
amzin7000,"Think about it,

You're matching a group of 0 or more (`*`) letters that doesn't contain your separators (`[^/.?]`) and then you're matching any of your separators or the end of the string (`$`).

Hint: It's good to think about the end of the string as if it was a character.  Use a parenthesis and OR alternators to group together your separators and the end of the string

Here's my solution: [https://regexr.com/3rs43](https://regexr.com/3rs43)

The explain tool on the page shows how the expression works",1530551294.0
Hafas_,"You can solve that with `split` and with positive lookahead or positive lookbehind.

    var string = ""File/path/to/a/file.js?hash=123!whatisthat"";

With positive lookahead (`?=`):

> Split at positions where the next characters is `/` or `.`, `?` or `!` without consuming any character.

    string.split(/(?=(?:\/|\.|\?|!))/);
    // [ 'File', '/path', '/to', '/a', '/file', '.js', '?hash=123', '!whatisthat' ]
    
With positive lookbehind (`?<=`) (ES2018 feature; required Node 10 and does not work in Firefox yet)

> > Split at positions where the previous characters was `/` or `.`, `?` or `!` without consuming any character.

    string.split(/(?<=(?:\/|\.|\?|!))/);
    // [ 'File/', 'path/', 'to/', 'a/', 'file.', 'js?', 'hash=123!', 'whatisthat' ]
    
> [...] I would ideally like to not have one massive regular expression string. Ideally, I would create an array of regular expressions (with each element of the array handling one delimiter).

Instead of having an array of regular expressions, have an array of delimiters and then create the regular expressions dynamically:

    var delimiters = [""/"", ""."", ""?"", ""!""];
    // escape the delimiters and join with them |
    var joined = delimiters.map((delimiter) => `\\${delimiter}`).join(""|"");
    var pattern = new RegExp(`(?<=(?:${joined}))`);
    
    ""File/path/to/a/file.js?hash=123!whatisthat"".split(pattern);",1530555796.0
kryptkpr,"You can mock pg.Client but I would not recommend mocking your database for tests, it will neuter your ability to catch bugs and make it much harder to write tests (since you will lack real writes).

The recommended approach is:

1) don't use bare postgres module, it lacks migrations; use an ORM (knex/objection, sequelize, etc.. ) and write your table definitions as migrations

2) use NODE_ENV=test to select the ""test"" database

3) migrate and test seed the db with every run and roll it back to fresh when the run is done.

Not sure what you're using for test framework, I do this in Jest with beforeAll() and afterAll() blocks. ",1530536832.0
overthetopclock,you can use sinon with supertest,1530539895.0
Kollektiv,"By helping the Node Security team (the module one, not core), you are helping a private company that got bought by NPM and just leeches on the work of the community to make profit.",1530534446.0
ecares,"String and date formatting are part of the JS standard lib.

Streams are part of the Node.js standard lib [https://nodejs.org/dist/latest-v10.x/docs/api/stream.html](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html)",1530513328.0
lukashavrlant,"Although all of it is part of the standard library, the general rule of thumb is: keep the core and standard library as small as possible. The smaller, the easier to maintain. Do you really want a core NodeJS developers to focus on stuff that can handle some external library like moment.js? ",1530558995.0
sandeepsb,Cool to see someone forked it - I’m currently using RethinkDB - let’s hope the fork introduces some useful changes. ,1530523580.0
blazedd,"Wow, this is awesome to see. I'll ask the same question I asked the original RethinkDB team:

How can I help (make sure this project stays alive)? I'm not trying to be a downer, I promise. I recognize the fact that my organization currently relies on Rethink/rebirth and if it's not supported it will die (again).",1530541022.0
TheNoim,Whats the reason behind it. Why do you not just contribute to the original one?,1530542153.0
akujinhikari,"Yes, if you Control-click, it will take you into the dependency’s code. You can also view all modules loaded by going into File-Settings-Languages-JavaScript-Node, and it will list all your node modules you’re using, as well as what versions and what the latest version is. WebStorm is love. WebStorm is life.",1530497845.0
xyryvgsxfd,"You can CTRL + left click the function / method. Just tested it. [https://youtu.be/IlRKbQBpdEE](https://youtu.be/IlRKbQBpdEE) here is a short video, not the best quality but shows it.",1530505615.0
DocileDino,"I would like to know this too. Writing this for refence :)
",1530495154.0
Brandelis,"I don’t know about anyone else but I view the documentation (I use VScode) for your example using express I would visit here https://expressjs.com/en/api.html

Never used webstorm so I have no idea ",1530495172.0
prasnala," if you are interested in learning your choice is best.
",1530490642.0
Brandelis,I would use Node/Express for the backend and either react/angular/vue for the front end.  I would use MDbootstrap for the css,1530495612.0
DocileDino,"Before embarking on this quest, you might want to look into whether MongoDB is the best choice for your project. It's powerful and good to know, but in some cases, a good ol' SQL DB is the easiest and most efficient choice. It's just like every language choice for a new project: It depends.",1530497260.0
BTMPL,"On your live server you don't need a proxy, you can have it connect directly to the same domain and different port - you only need to configure your backend express to serve proper CORS headers.

If you don't want to use different ports, you can use single express instance for both, but configure it so that the backend is served under `/api/` namespace for example.",1530502292.0
sudonymer,"I personally point my domains to my own server I run at home. Using your own server allows you to configure Apache or NGINX to do all that work for you. For me, I have Apache check what the domain is when someone accesses it(As I have multiple domains pointing to one IP/Server) and depending on the domain, route the traffic to a specific internal port that I have a Node app running on and then serve it all to port 80. In your case where your front end ""connects"" to your backend, I would recommend doing your handling through endpoints such as /api/myFunction?param1=asdf&param2=asdf, this allows your single express app to handle both serving pages as well as running functions. ",1530503876.0
kryptkpr,"This is usually done by the load balancer, if you just need something fairly simple nginx is solid.  Define a single server with / proxy_pass to front end and /api to backend, Google for the syntax this is a very common setup.",1530972568.0
jesusgn90,It keeps your packages versions safe from being modified in further installations!,1530480349.0
notAnotherJSDev,"> Your second question

Yes, but it doesn't quite work as intended. Yarn on the other hand does this reliably. 

The reason, on the other hand, is in order to ensure that what gets installed between different systems is consistent. ",1530485521.0
NomebodyNocks,"its used for CI mostly, to make sure you have the exact same dependecies. ""npm ci"" will install dependecies based on the lockfile (and is quite fast).",1530528633.0
rk06,"NPM should read package-lock and install the packages and should not modify package-lock.

But apparently the Rockstar devs at NPM know better, so they do modify the package-lock file for reasons only they could understand.",1530510240.0
jesusgn90,So we can all conclude NPM sucks??,1530519351.0
l30nid45,simple answer?  npm sucks.  use yarn.,1530496482.0
quizasquizas,"Use yarn.

Unfortunately, npm CLI is a fail. ",1530513142.0
,[deleted],1530483007.0
scaleable,"Like 99% of js ""benchmark"" blogs posts around forget that JS is a JIT-ed language, which may probably invalidate most tests unless you do something like plotting iterations VS time.

And there might be 1000s of other factors around. Getting benchmarking right is much more complicated than doing napkin tests.",1530490608.0
McSlurryHole,"my only problem with selenium-esque bots is that I could never get them to scale well because of the whole headless chrome thing, I found that If you just try to mimic the actual requests being made you can usually skip a lot of the bullshit.

for instance I just quickly looked at Instagram and it seems like the request to follow someone is a fairly simple GET with some kind of unique profile number. I'm sure with a bit of digging you could get all of the profile numbers that have followed you and then just hit that endpoint with all of them.

no need to account for closing popups and changing classnames.",1530509705.0
tomnewmann,"Hey, I am glad to see that you are continuing your work on puppeteer-based instagram bot. I have deployed mine to digitalocean instance now and it is running well 24/7.",1533215895.0
TheHeretic,"Depending on your application you can do two things:
If your application has some sort of publish / subscribe (e.g. redis, rabbitmq)


1) Have your app servers publish and subscribe to data that is being fed through the websocket, this guarantees that multiple node app servers will all update / and read from a consistent source at the same time (within miliseconds). 


2) Use a load balancer (e.g. ALB, HAproxy, Ngnix) to distribute socket connections to multiple Node app servers. 

I have had tremendous success scaling the above solution with Redis and HA-Proxy, could easily scale to millions of concurrent connections (but obviously need beefy redis instance / load balancer).

If you just need a couple thousand more websockets (n < 100000) then you can just throw more CPU and ram at a single Node server, but you will start running into garbage collection issues as connections increase.",1530482072.0
kapv89,"Here is how you'd scale socket.io horizontally:

1. Use single core machines to deploy socket.io servers. Add more servers as needed.
2. Setup a **redis-cluster**, so that you can keep throwing machines at redis. Use single core machines.
3. Use socket.io **redis-adapter** to ensure socket.io operations work correctly with your distributed deployment.
4. Use nginx with an **ip_hash** directive as a sticky-load-balancer for your socket servers. You can go for a bigger multi-core server here.
5. Scale infinitely by adding more socket-servers, and adding them to your sticky-load-balancer's nginx config.

Reference: https://socket.io/docs/using-multiple-nodes/",1530515691.0
A4_Ts,"Look up benchmarks for websockets in relation to the gear you’re using. 

I THINK I remember reading that with a four core single threaded i5 it can easily handle 2000 concurrent connections for one instance. ",1530472613.0
jorge2k,Without knowing the specifics of what you’re trying to achieve I’ll recommend more memory over more CPU and to use WS.js ,1530474447.0
to_wit_to_who,"Are you using nGinx? If so, then consider the nChan module. Usually, you would keep a dedicated pool of WebSocket servers and route to it using your load balancer.",1530474776.0
spinlock,"First, I don’t know the answer to your problem but in general, I’ve found that scaling is about continually beefing up the weakest link. I will start by spinning up a load test server and simulating production loads. Then, multiply the number of clients connecting until things break. It’s usually one thing that breaks and other parts of the system are fine. So, you scale that one thing and repeat the cycle until live found the next break. 

It’s also good to go through this exercise so that you can build up a run book for when you encounter problems in production. 

Good luck!",1530482446.0
evertrooftop,"Hi everyone! I just made this. I'm interested to hear what people think of it. Is it just another pointless framework?

Even if it is, it was fun to build, so no regrets. Any feedback is appreciated!",1530468095.0
wrobbinz,"Check out hapi-pal and its hapi plugin ""tandy"" for automated CRUD routes. Outside of hapi, check out loopback.",1530466214.0
cyberst0rm,Postgres and postgraphile will crud in 5 minutes,1530467763.0
-Jayarr-,"I personally used [loopback.io](https://loopback.io) a few years ago, it was pretty good. I've heard bad things anecdotally about Sails but never used it myself.",1530468367.0
Quertun,"I use node-restful on top of express and mongoose. It generates the basic crud out of your mongoose schema's. So you only need you change the schema's.
https://github.com/baugarten/node-restful
",1530514582.0
yeannylam,Hi you can scaffold and generate fast with [amur](https://github.com/zhangkaiyulw/amur).,1530516810.0
,Look into something like sails.js if you want automatic migrations / CRUD endpoint generation.,1530465247.0
mohelgamal,I think this has been clarified as being Microsoft office 365 web extensions and online interface. The desktop editions will remain C++ ,1530451218.0
StoneCypher,"[no, they aren't.](https://www.theregister.co.uk/2018/06/18/microsoft_roundup/)",1530459464.0
Geooogle,right you need to a file name for that view in your views directory. doesn’t matter if you use single or double quotes either,1530450256.0
WakeskaterX,"Man I used to love restify but I wouldn't consider it the new hotness.  As someone that's used restify, express and koa extensively, I consider Koa2 to be a game changer as far as web servers go.  Built in support for async functions is so incredibly powerful for changing the way we write our services.

The world of node moves faster than lightning!  That's for sure.",1530465495.0
catNamedStupidity,"Hi,
I know this seems like I'm trying to pad my CV (and I am), but I also wanted to create a project which actually tackles a real world problem and gives an explanation for every choice it makes. I may have made a lot of mistakes, I'm open to feedback. Please don't downvote me to hell :)

PS: Code is available on [github here](https://github.com/Pritoj/spendster-backend). If you can add comments of give feedback on it, it'll be nice :) ",1530441682.0
xyryvgsxfd,"are we on Youtube here? ""like and subscribe!""",1530467313.0
sudonymer,"I personally prefer to stay away from typescript when building smaller scale APIs since it adds a lot of overhead to projects. Typescript is great for complex, type-strict applications, but especially if you are just starting out, stay away from typescript. As for MongoDB and Express, those are amazing tools for both new and experienced developers, both are able to scale very well and preform excellent on hosted platforms like AWS and DigitalOcean. ",1530504515.0
,[removed],1530441110.0
cemremengu,Glad to see Chinese devs opening more and more to the world. I have seen so many quality projects from them.,1530441802.0
tswaters,"I'd totally recommend trying out `async/await` - it's a total game changer for dealing with async code.  I find the resulting code is infinitely more readable.

Your particular problem appears to be two things:

(1) not using `Promise.all` -- this takes an array of promises and waits for all of them to come back.  It will resolve an array of the returned values.

(2) not returning promises from the functions.  Always return your promises!

the array passed into `Promise.all` can be generated -- you can take your `object.array` and call `map` on it - this operation could very well return an array of promises.

i.e.,

    return Promise.all(object.array.map(item => {
      return new Promise((resolve, reject) => request(
        headerOptions(item),
        (err, response, body) => {
          if (err || response.statusCode == 200) {
            return reject(err || new Error('invalid status'))
          }
          doStuff(JSON.parse(body))
          resolve(item)
        }
      ))
    }))
",1530420098.0
jenkynolasco11,"I'm confused.... Are you trying to do something like this:

    
    /* Promise Chain  */
    firstpromise.then(function(firstPromiseResult) {
        return secondPromise(firstPromiseResult);
    })
    .then(function(secondPromiseResult) {
        return exportname.iteratePromises(secondPromiseResult);
    })
    .then(function(resultFromRequests) {
        // Here you can do anything with the requests results
    })
    .catch(function(err){ console.log(result) });
    
    /* Iterate Promise */
    exports.iteratePromises = function (object) {
        const promises = [];
        for (var i = 0; i < object.array.length; i++) {
            promises.push(doNewPromise(object.array[ i ], object)
            
            // This loop here adds all the promises in an array, then using Promise.all will wait for all to resolve, returning an array of results
            }
        return Promise.all(promises)
    }
    
    function doNewPromise(args, object) {
        return new Promise(function (resolve, reject) {
            request(headerOptions(args), function (error, response, body) {
                if (!error && response.statusCode == 200) {
                    const result = JSON.parse(body);
                    doStuff();
                }
                console.log(object);
                resolve(object); // not sure what you're returning here...
            });
        });
    };

I feel that your code is all over the place. In the way how I cleaned it a little bit, you'd be able to return to the promise chain your results.

Also, no need to add more than 1 catch in a promise chain",1530407560.0
mackattack_,O think you're looking for Promise.all,1530431898.0
andywer,"I think the thing you are trying to do is very generic, but your sample code unfortunately is not.

So if you want to loop with promises, this is how it works:

Manually:
```js
function loop (times, iteration = 0) {
  if (iteration >= times) return Promise.resolve()

  return doSomethingAsync().then(() => loop(times, iteration + 1))
}
```

With async functions:
```js
async function loop (times) {
  for (let iteration = 0; iteration < times; iteration++) {
    await doSomethingAsync()
  }
}
```

So if you call `loop()` you get a promise that resolves once the whole loop completed or that rejects if any iteration failed.

Hope that explains the basic approach :)",1530423696.0
hexerin0,"Hey, back in the day (a couple of months ago) I was very new to the concept of promises and asyncs. I had quite the trouble figuring it all out but by know I'm pretty proficient with it. I just needed to learn and grasp what it really is and how it works under the hood. A sincere thanks to everyone who repied to my question !",1538662382.0
ConstVoidBlog,"when the process takes a while, use spawn and hook into various spawn events so that your event loop can continue to be useful.  

see this gist for a pretty generic implementation...
https://gist.github.com/constvoidblog/c1ee63a27d2a77d894cd06960378bbc9",1530483839.0
kudoz,You can use `process.nextTick` to push a callback off the stack and have it complete in the background. I do the exact same thing here [https://github.com/kudos/hostr/blob/master/lib/uploader.js#L208-L231](https://github.com/kudos/hostr/blob/master/lib/uploader.js#L208-L231),1530442901.0
boftr,"The problem is, using command line scanners to scan single files are highly inefficient due to the overhead.  The process will have to load all the virus data, setup config just to scan one file.  If you're scanning a whole computer as part of a scheduled scan it doesn't really matter.  The proper way is to use something like SAVI-DI.  This is essentially a ""service"" you can request scans from.  The throughput would then be much higher as you only have to load config, data and initialise it once.  https://www.sophos.com/en-us/medialibrary/PDFs/partners/sophossavdidsna.pdf ",1530442905.0
MrXyfir,"Are you asking how to run it from Node?

https://nodejs.org/api/child_process.html `exec()` or `spawn()` specifically.",1530404240.0
illyrianHero,"Wes Bros - Learn Node course. Type it on google.
And, Brad Traversy, NodeJS course on Udemy",1530389148.0
labsterx,"I would recommend two ways: first, pick up a good book about Node.js to read. Then take an online class (for example, Udemy) and follow the videos to complete a couple of projects.",1530435872.0
MartialArtGains,"Some useful links on this post:  
[https://www.reddit.com/r/node/comments/8s7cga/nodejs\_training](https://www.reddit.com/r/node/comments/8s7cga/nodejs_training/)",1530384798.0
harrydry,wes bos learn node ,1530389726.0
sliceofmadness,I  would recommend Mosh Hamesdani NodeJS  course https://www.udemy.com/nodejs-master-class/ He is a fantastic teacher and the course is really good.  Wes Bos course is great too but Wes creates a MVC app and it is not so API REST oriented as Hamedani's course. Maybe you could take Hamedani's courses before and then take the Wes Bos one.,1530463700.0
mrksprvn,You don't need the Debugger for Chrome extension to debug Node.js though.,1530389524.0
Myrtletoes,What a load. ,1530386721.0
monkeylavender,I didn’t know you could setup a debug configuration to attach to a port. That’s cool. ,1530425819.0
Toddwseattle,"The VS code confiG I’ve had trouble with is for typescript apps under node, for example using tsnode.  I could get compiled (e.g. ts to js execute under node and debug with source maps)working but auto reload with tsnode would be better.  Anyone have a pointer?

I prefer VSCODE debug to Chrome because I can edit directly, and also easily put on a different monitor.",1530429940.0
Str4yfromthep4th,Is this article for real? Why u need an article for something so basic???,1530395556.0
Fizzyfloat,I was reading this last night. What exactly do migrate and lib do?,1530472337.0
monsto,Neat.,1530391289.0
Gusti25,It's cool but the are lots of typos on that page.,1530420712.0
Drunken__Master,"I would say Node, not because it's necessarily better (or worse) than the other choices, but working in Cybersecurity it would inform you of all of the holes in the security of the ME*N stack (a lot of which are just how accessible it is, so there are a lot more instances of devs not being aware of or not using good security practices) especially in things like NPM. 

On the other hand, PHP might not be a popular choice, but it does power ~80% of the internet. ",1530361540.0
Lost_sand,"Forget python, it doesn't really have anything on Node.js.  Java is dope since it supports non-floating point bullshit really well.

If you go with Node.js, your client side development skills will scale with your server side chops.
",1530420520.0
FalseWait7,"I recently do a lot of such work. Meaning, I do various APIs in various technologies.

As a front-end developer by trade, Node was my first choice. And I can't say I regret it. It can be structured very well and has vast community, which then results in a lot of great resources, be it open-source packages or articles. Like you noticed, it works great with front JS, and you can reuse a lot of your services/utilities written for one part on the other.

On the other hand, I like Python. I used Django before, but for current projects, it is too big and heavy. So I've chosen Flask as an alternative. Python is very fast and easy to learn, plus its community is far more mature that Node's. This means you won't get new packages every week with crucial or breaking changes, which is good if you don't have the time to spend on upgrading your app.

Anyway, before you decide, ask yourself, what do you want to build exactly. A large application that can hold thousands of requests per minute, or a small one that will be visited by you and your colleague, when you send him the link. Then just go a quick lookup, which technology has the best, most accessible to you, libraries and patterns in common use. This is how I ended up using Flask, having built apps on PHP (Laravel, Symfony), Node and Django.

I know I haven't answered your question per se, but I've shared my thoughts as a person with some experience in the field :-)",1530386794.0
marowark,"1. In all company's I have worked I always see they do not store the file in the DB, they store the path of the file in the DB, or the name of the file, and then the backend take the file in some File class and put in the http response and send it
I think the main reason of this is to reduce the table/doc size and the conversion time of the file to some BLOB in a large multiuser software",1530358748.0
monty_mcmont,"I’d advise against storing files as BLOBs inside your database. It increases the size of your database significantly, which makes your backups larger. That means restoring from a backup takes longer, and you’ll need to pay for the storage space occupied by all the extra redundant copies of the images inside the backups. I’d store the files in a service such as S3, and store the URL in the database instead, as others have advised.",1530374485.0
iRedditWhilePooping,"The most common approach I’ve seen is to upload the file to S3, there are plenty of Amazon library packages in a number of languages to help handle the upload. Essentially you just get back a url, and store than in the DB. When serving to frontend you can either retrieve the file and send (probably not ideal) or just send the url to the file and let the client fetch from S3",1530365170.0
User31441,"Not an expert on Postgre but I don't think storing them in your db will be an issue. They will end up on your drive either way and databases are great at determining the best way to store all sorts of data.

For your REST API I would suggest sending the file as plain text instead of layering it into a JSON object. That way the server can send the file in chunks and the browser can load the connects into a JS Blob (or similar) before everything arrived. Otherwise, it would have to wait for the whole file in order to parse the JSON. You can attach simple meta information like creation time inside a header. Use a separate API call for larger sets of meta information.",1530358197.0
labsterx,Nice project! Do you plan to release an English version?,1530437013.0
RebornOrDontCry,"Good job, but text... Lol ",1530572055.0
rhynoboy2009,"""FUCK""",1530382585.0
Brandelis,Love the MDbootstrap design,1530394989.0
JsViking,"good job, Man!",1530521609.0
DBjelovuk,"Welp, I accidentally forked the damn thing (no offence) and now it's permanently etched into my Github activity.",1530344616.0
VanGoFuckYourself,"Serious question: Why? I mean, what actual use case would you have for this?",1530344189.0
sql_big_result,"Why async if still use promises

https://github.com/rodrigogs/xvideos/blob/master/lib/api/videos/fresh/fresh.js",1530333472.0
deadBuiltIn,"Fantastic, this is all i needed, ty",1530372097.0
notAnotherJSDev,"There are a few things going on here that we need to address first.

First, async/await was introduced as syntactic sugar around Promises. Specifically, `await` awaits the returned value of a 'thenable', in 99.9% of cases a promise. Once that promise has resolved, the code continues on. It turns the non-blocking nature of promises, into a quasi-blocking thing. Async is simply a way to force a function to return a promise.

Second, setTimeout is both non-blocking and not a promise, which is what causes the behavior you're seeing. What this means, is that await doesn't care what is inside step3 and doesn't care that there's a setTimeout.

As it stands, your code won't work as you intend it to, because none of the step functions return a promise, therefore await just ignores them, executes them and moves on. In order for your code to work, it would have to look something like this:

```
async function foo() {
    await step1();
    await step2();
    await step3();
    await step4();
}

function step1(){
    console.log(""1"");
}
function step2(){
    console.log(""2"");
}
function step3(){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log(""3"");
      resolve();
    }, 1000); 
  })
}
function step4(){
    console.log(""4"");
}

foo();
```

see how in step3 we return a new promise, and inside of it, we do our timeout, console log, and then resolve. The resolve part is what await is waiting for. 

So, yes, you can do this, but make sure you're doing it for the right reasons. If you aren't **explicitly** waiting for something to happen (i.e. network call, db read/write, large calculations), you probably don't need a promise.

edit: Just remembered a good example of this from some tests I was writing for indexeddb

```
    describe('createNote', () => {
      it('should create a new note', async () => {
        expect.assertions(3);
        // we need to wait for the created not to get returned
        const created = await createNote(db, faker.lorem.paragraph());
        // we can then use it
        expect(created).toBeDefined();
        // more waiting to get the total count from the db
        const count = await db.notes.count();
        // let's use that
        expect(count).toEqual(11);
        // lets do one more db access to grab something out of it
        const last = await db.notes.toCollection().last();
        // and finally do something with it
        expect(last.id).toEqual(11);
      });
    });
```",1530329799.0
joelangeway,"Change step 3 to return a promise to be waited on like:

    function step3() {
        return new Promise(resolve => setTimeout(() => {
             // do things
             resolve();
        }, 123));
    }

`await` only works if you give it a promise to wait for. When you use `async` it just wraps your function such that it returns a promise.",1530329166.0
octylpy,"You need to make step3 into a promise.

    function step3() {
        return new Promise((resolve) => {
            setTimeout(() => {
                console.log('3');
                resolve();
            }, 1000);
        })
    }",1530329188.0
HipHopHuman,"Explanations in the other comments are sufficient to warrant me not explaining anything, but figured I'd chime in with a code snippet that's a little more readable.

    async function foo() {
      await step1();
      await step2();
      await step3();
      await step4();
    }

    async function timeout(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function step1() {
      console.log('1');
    }

    async function step2() {
      console.log('2');
    }

    async function step3() {
      await timeout(1000);
      console.log('3');
    }

    async function step4() {
      console.log('4');
    }",1530399588.0
Drunken__Master,"I think there's a nice sized hole in the market right now for a code a long video tutorial on making a small - medium sized project using React with Typescript, almost every video and blog post out there right now never goes past past the point of just telling you how to install/ configure them together, but they don't do a good job at all of telling you how to use them after they're installed.

It gets even worse if you're trying install/configure React,Jest,Enzyme AND Typescript. Which also leads me to wanting to see more material on testing any singleton or combination of Vanilla.js, React and Typescript, There's actually more and more accessible material out there for testing React than there is for Vanilla.js.

Lastly it would be nice if there was more Javascript material that teaches the basics/fundamentals of programming, I haven't encountered a single Javascript learning resource that even mentions programming, they only ever teach syntax and sometimes demonstrations of what the syntax can do, but never the basics of logic and problem solving.   ",1530308723.0
ArexBawrin,Written tutorials. I hate how everything is going towards video. Call me old fashioned.,1530406171.0
node_emperor,Anything about scaling?,1530307943.0
rizlah5,"Highly scalable API, security, best practices that are business level. Utimate real world api course not some localhost stuff. With thought to write the code so ur imaginary coworkers have no problem with it etc etc. Would be big seller and very very helpful if u did it",1530412791.0
shad0proxy,/r/remotejs,1530293348.0
DaJuukes,"Nice write up, but SQL Injection is far from being anywhere NodeJS-related at all, so calling it a ""Common Node.js Attack Vector"" is rather misleading. Maybe something like, ""Common Application Attack Vectors: SQL Injection"" would be better.",1530301816.0
SkaterDad,"hapi checks your route configs against a Joi schema on startup, so it doesn't allow custom properties.

Looking through the official API docs, ""tags"" needs to be within the ""config"" object (or ""options"" -- I believe ""config"" is only there for backwards compat, and ""options"" is preferred by Hapi v17+).

Scroll down to the ""Config"" section of the official routing tutorial for an example with tags:
https://hapijs.com/tutorials/routing?lang=en_US
",1530298089.0
wrobbinz,"I'm not a hapi expert, but have you hooked up the swagger plugin to your hapi app? Like, in your manifest.js? Do you have a /server/plugins/swagger.js file?
",1530300229.0
Thriven,"Just an update for someone reading this 10 years from now. I got it to work this way.

Route file

    const routes = [
           {
               method: 'GET',
               path: '/_api',
               options: {
                   handler: api.root.handler,
                   description: 'Base Path of API',
                   tags: ['api']
               }
           }
       ]
    return routes;

I don't know why it wanted the name of the function inside my handler. which looked like this below

    module.exports = {
    
        root: {
            handler: function (request, reply) {
    
                return root(reply,request);
            }
        },
    
    }",1530554948.0
BLOZ_UP,"The backend is like an HTTP API? Then yeah, they are separate.

Also, if you start trying Docker out it'll be easier to deploy separately.",1530285977.0
TyrionReynolds,"I’ve worked places that use both strategies (one NPM project for both versus separate projects for backend and FE) .  People tend to like whichever way they’re used to using. 😊

If you have no skin in the game yet then I would say you should do separate projects.  They have different concerns and won’t necessarily scale 1:1 (like if you have something other than that FE that starts calling your API).

On the other hand, if that API will 100% certainly be only used for that frontend then maybe making them separate projects is extra work for no reason.",1530292899.0
-Jayarr-,"They should be separate projects, if only for the reason that if you do decide to separate them in the future it means you won't have to go back through the package.json later and try to work out which dependency is for what.

Also it's good practice to get used to deploying the two parts separately - a front end app will more than likely have a much higher release cycle that the API behind it. If you build the whole thing together you probably have to redeploy them both. How would that affect API versioning? Build times? And so on.

TL:DR I would split them.",1530294148.0
moltar,"You can start it all in one, and then split later if you want. You don't need to have 2 pods on Heroku. You can setup your Express or whatever you use to proxy static files. You can also have a build step that puts them wherever Express picks them up from.

Keep it simple!",1530302049.0
endjynn,"They should absolutely be separate apps with their own package.json and node_modules. This is because:  
1) They have entirely different required dependencies  
2) You do not want to serve static files (.html, .js etc) using your node server as this will tie up it's single thread. Instead you should use a separate HTTP server (such as nginx) to serve the static files  
  
Hope this helps :)",1530322417.0
DLabz,"I'd think twice about vue. Debugging and tweaking stuff can be a nightmare for anything worth building. 

I'd go with pug, customElements or html/string templates for most cases.",1530584403.0
techiesaravana,"Hey. Yes you can use node and vue

Use express js node framework for the back end api and use vuejs on front end.

It will be much easier.",1530290678.0
paladincubano,"Just a question
Is a bad practice build the vue project and load the index.html  in the ‘\’ route of the web api?",1530309026.0
squatsquadnl,Do you mean something like Postman maybe?,1530301868.0
,[deleted],1530331551.0
pomlife,You can do this with or without a web framework. You just need XHRs.,1530292672.0
keppinakki,"What you're basically describing is a CRUD app with a node API. Try googling with that, any framework (or no framework at all) will work.",1530297816.0
rossjohnson90,"This already exists, google dashing, there’s a nodejs port of it too",1530304848.0
username_is_taken43,It seems just to be much more simpler using the real db.,1530282202.0
SlightlyLethalDev,I believe you will need to use bodyParser to access the body of the request in Express.,1530273590.0
iwannasaythis,"A shopping cart functionality can get very complex quickly depending on your business need. I would check loopback framework to handle all basic CRUD, and then this leaves you with enough time for any extra logic.",1530274973.0
drunkcatsdgaf,"My suggestion is dont. Start with something prebuilt and ready to go till you figure out what functionality you need, then build out from there. You might even find that Node isnt the solution afterall, or that you are more comfortable with what you already have. ",1530341277.0
bearni,"Took some googling to find this:

https://dzone.com/articles/build-your-online-store-with-mongo-db-nodejs-and-e

Even tho it may not be your exact fit it may help you understand by examples the interns of mongo and node.

Have fun and google everything, it helps a lot :)",1530288434.0
,[deleted],1530273150.0
fgutz,Nice! This is a useful little script,1530276044.0
m1sta,Yes,1530263536.0
etuncoz,I would go for (.NET || Java) && (SQL || MySQL) && JS && 1 JS framework (angular || react),1530271473.0
sneffer,"This question will always beget opinion based answers so take my answer as an opinion and understand that your own desires and opportunities will influence the decision...

After starting my software engineering career bouncing between python, php, c++, and landing at 4+ years of JavaScript, I have found that there are less backend JavaScript jobs than Java backend jobs.

The big ~5 have offices within walking distance of my apartment. For the most part, they do not actively recruit NodeJS engineers.

On the other hand, many small/midsize companies favor node (for ~3 years) and golang (for ~1 year).

In my humble opinion, a small team will benefit from your skill in JavaScript because it can apply to a large portion of your stack. However, I also believe that some of the most prosperous software of today is still being built by large teams using the traditional oop paradigms promoted by Java.

What sort of team do you want to work on?

Which companies excite you?

When you try to apply abstract reasoning to a problem, which paradigms do you think best in?


I think these questions might help you make the right choice for you! I don't believe there will ever be a globally accepted answer to this question so try to choose a path for yourself based on more important questions than which tech/language is involved.",1530258382.0
flipperdeflip,If you want to freelance you should start from a business perspective and see what kind of work there is in your location or market sites. Full stack JS is cool for custom API's but less usefull if they want simple presence sites on like Wordpress or Squarespace. ,1530258677.0
kapilgorve,"I had same kind of dilemma when I was starting out.

Php market is already saturated with devs. I am not sure about where you live, check your local market. If there is a high demand for python, I don't see any problem with that.

You can't go wrong with fullstack js right now. Comparatively you will have better opportunities with python. ",1530260394.0
flamehorns,"Sure, why not?",1530273977.0
lcfcjs,"Full stack Javascript will expose you to a a wide variety of aspects of development. Personally, I'd recommend you start here and then see what you like. Some people just suddenly realize, wow I like frontend, and others are like I much prefer backend. After that you can pick an area to specialize in.",1530285016.0
kdesign,"No matter what you end up doing, I think it’s always best to start with a language like Java or C#. It will help you tremendously in your future career as a developer. 

Having working knowledge on OOP paradigms, multi-threading and a strongly typed language will shape how you think in any other language.

I haved moved towards JavaScript a long time ago but started my career with C# for a couple of years. And when typescript or flow came along it just felt natural to use them. 

Even on a day to day basis, I feel like the software developers who know one of those two aforementioned languages tend to write better code than the ones who only made use of dynamic languages (such as PHP or JS).",1530262995.0
A4_Ts,How comfortable are you with JS?,1530258260.0
ConstVoidBlog,"If full stack JS is HTML5 + AWS (s3, api gateway, lambda, dynamodb) then yes.    companies will think 'hot damn how did s/he figure it out.'

php is dead.  java has approached COBOL like maturity--you could, but why?  .NET Core, Py and JS are solid.

Ultimately turing completion means the language shouldn't matter. 


",1530306113.0
atomicfunc,"Leave PHP! JS or Python is best choice for working remotely. Java isn't. 
Python for web, ML, AI, data science and big data. Fullstack js today is NodeJS for backend and Angular/React or Vue on front. 
I think you should learning Python and adding to your stack JS too.",1530259642.0
blazergame,"What node version are you using? Looking at the repo, it seems heavily outdated and not being maintained. Couple of things to try:

1) Try installing with lower node version
2) Try installing previous version of the package. Not latest (npm i wiring-pi@2.20)

Seems like you're not the only one having installation issues. A bunch of issues was raised on the repo about it.",1530233907.0
d1d3r,"This is the debug log: 

0 info it worked if it ends with ok

1 verbose cli \[ '/usr/bin/node', '/usr/bin/npm', 'install', 'wiring-pi' \]

2 info using npm@6.1.0

3 info using node@v10.5.0

4 verbose npm-session b43c2b7f29af3e18

5 silly install loadCurrentTree

6 silly install readLocalPackageData

7 http fetch GET 304 [https://registry.npmjs.org/wiring-pi](https://registry.npmjs.org/wiring-pi) 744ms (from cache)

8 silly pacote tag manifest for wiring-pi@latest fetched in 849ms

9 timing stage:loadCurrentTree Completed in 2306ms

10 silly install loadIdealTree

11 silly install cloneCurrentTreeToIdealTree

12 timing stage:loadIdealTree:cloneCurrentTree Completed in 3ms

13 silly install loadShrinkwrap

14 timing stage:rollbackFailedOptional Completed in 4ms

15 timing stage:runTopLevelLifecycles Completed in 2335ms

16 silly saveTree jordan

17 verbose stack Error: EISDIR: illegal operation on a directory, read

18 verbose cwd /home/jordan

19 verbose Linux 4.14.34-v7+

20 verbose argv ""/usr/bin/node"" ""/usr/bin/npm"" ""install"" ""wiring-pi""

21 verbose node v10.5.0

22 verbose npm  v6.1.0

23 error code EISDIR

24 error errno -21

25 error syscall read

26 error EISDIR: illegal operation on a directory, read

27 verbose exit \[ -21, true \]",1530235066.0
beardbread,I believe you're trying to use npm as root. Switch to a non-root user and try again.,1530241346.0
devourment77,Take a look at hapi.,1530242467.0
asciant,NestJS,1530238307.0
davidmdm,"I just want to ask one question. I keep hearing express doesn't support async await out of the box. What do you mean by this? You can use async await anywhere. I don't understand what kind of behaviour you are looking for. 

Koa could be a place to look. It's express but modern, and the middleware implementation is all generators and not straight forward callbacks like in express. ",1530235108.0
this_is_ender,"I’m not sure how long ago you tried serverless but I would really encourage you to give it another go. I used to only use express for everything but now I don’t think I would want to go back. I work for a large Corp and we have adopted the Serverless framework as well as other large companies, so I would even say it’s a good career move. There has been a bit of a learning curve, but it an incredibly powerful system.

There are also things like Hapi, or you could just code everything in node without a framework if you’re really bored. ",1530232757.0
mohelgamal,I use async await out if the box on express. At least with the current node version . You just have to put async in front of function keyword in the route call backs ,1530245839.0
rook2pawn,"Hey! I wrote [router-middleware](https://github.com/rook2pawn/router-middleware) which is a near drop in replacement for express

Also checkout [supertest-light](https://github.com/rook2pawn/supertest-light). 

",1530273874.0
djslakor,"Koa 2, Sequelize (Postgresql), Redis, Elasticsearch on the backend.  React/Redux/Mobx/Typescript/React-bootstrap on the front end.  Python Fabric for deployment.",1530280100.0
quizasquizas,"You can attach your express app to a lambda handler - [https://www.npmjs.com/package/aws-serverless-express](https://www.npmjs.com/package/aws-serverless-express)

After you get that monolith up in the cloud, you can start breaking things into pieces. Move all your \*services\*, \*controllers\* etc. to its own lambda handler, and write your middleware with \[this\]([https://github.com/middyjs/](https://github.com/middyjs/)).

When you get to use a service you wrote for some API in another API you're working on, you will know you're on the right track.",1530531853.0
vagol942,"At a glance it looks like good old callback based  node code.

I think your question is not passport related, but node based. Node is an event driven framework, when the users make requests, those are added to the events stack and, and then they are processed one at a time. Those events might generate new events, that are also put on the stack. Everything is sequential, so there are no weird mix ups.

Also you are making a REST API, that means the server has no memory of session, every request includes the cookie with the auth data of the user, so passport doesn't have to remember anything.

",1530243696.0
sneffer,"I haven't read the passport code in awhile, but IIRC passport's middleware makes use of the Request and Response objects to set ""call specific state"" and (FUCKING regrettably) even automatically call res.send for you when the auth strategies fail.

So it's not that passport has some internal mechanism for ""zoning"" your code per caller.

Instead, it's that express passes one request through your middleware pipe per caller. I can't remember if this is by default, but passport even sets a property `req.user` after authentication. From there, it is up to your code and the event loop / stack to keep your service from ""crossing threads"" (not literally, it's a turn off phrase which happens to be a misnomer atm)

Express ensures your middleware are called contiguously with one request object. If some code called by your middleware needs to have user specific information, you have to explicitly take it from the request object yourself.

I'd be happy to write an example for you if my explanation is a bit hazy..it's late. I'd prefer not to go too deep into the event loop because it's a separate topic and you should read docs about it first. I'd also like to stay away from how the stack / heap or constructed such that your request objects' memory representations don't collide because I would honestly have to break out some old books to go that deep ¯\\\_(ツ)\_/¯",1530249558.0
sneffer,"None of this question is related to node.

You're asking how to implement your business needs. This could be solved in many other runtimes as well.

Do your own job. Come talk to us about node sometime.",1530230624.0
fourormore,"Yes, yes, probably tonnes of knowledge. ",1530223117.0
BTMPL,"I feel like this would hurt FP a lot, no?",1530214170.0
wiithepiiple,"I would say it's fine to have as a rule in your own code if you wish, but I would say it's far from a BP.",1530214788.0
unstablevacuum,"> ""every #javascript function should get a single object""

Hell no.

If you are properly documenting your functions, anyone calling your functions while programming in an editor/IDE like VSCode will see:
1. what the function does
2. how many parameters the function takes
3. the formal parameter names
4. the types of each parameter
5. a short description of the purpose of each parameter",1530214670.0
myockey,"Named parameters are a compromise in flexibility to improve understanding for functions that take a lot of arguments. One of the biggest costs associated with them is that renaming parameters spreads to uses of the function rather than being isolated to just the implementation.

Alternatively, if you need a defined schema for a function's arguments, why not use an ES6 class?",1530219355.0
,[deleted],1530213581.0
scaleable,"I think this could maybe fit into an opinionated style guide, but never as a general best practice.

On the other hand, avoiding functions with too many parameters could maybe be considered a best practice..,",1530216344.0
headyyeti,"I used ACloudGuru to get my certifications. It shouldn't take you more than 2-3 weeks of study.

AWS is great. Azure is catching up, but I use both and prefer AWS.",1530214950.0
karatechops,"I would say deploying a full stack project using all AWS services (ec2, load balancer, elastic file storage, etc) would be enough training. You'll run into a ton of gotchas which will make you quite proficient with AWS. On top of that I would roll out a very small API to Lambda. Don't expect to learn all the services, learn the services appropriate for a software engineer. ",1530212083.0
infamoustrey,"I wouldn't say I'm proficient, but just reading the docs was good, they've got lots of examples, I think in a cloud based internet it can't hurt your resume to make a few AWS backed projects. Honestly just having interacted with the API will look good.",1530209481.0
chmod777,"To much. I dont want to be a devops. I just want shit to work. And while it works well most of the time, when it doesn't its a rabbithole of docs and cryptic stackoverflow posts.",1530216038.0
abudabu,"I'm developing a Typescript / Serverless stack. The latter required me to deep understanding of how to automate deployment of AWS resources using CloudFormation. It was a bit of a learning curve. The documentation is on the hellish side of horrific, but if you leave a comment they fix it pretty quickly. That is usually after you've burned a few hours trying to figure out all the little pieces that are required to make a system work.",1530217678.0
Someoneoldbutnew,gcloud is much easier to deal with then AWS. Plus app engine is node native now.,1530222698.0
MUDrummer,"I’m working on my AWS certified devops Engineer - professional currently. 

I don’t know if the cert process has tougher me anything that I couldn’t have learned without it, but our shop does all AWS work so the more people with professional AWS certs the better. 

Remember that the certs are going to cover a lot more things that an average dev probably needs to know. I would say go take the Cloud Practitioner exam if you feel you’re pretty comfortable in the AWS ecosystem.  ",1530214124.0
mistralol,"
Absolutely none. ",1530216202.0
Clashtoon,"I have a lot of experience with EX2 (VPCs, subnets, Autoscale groups, load balancer etc), S3, SES, Lambda, RDS. Aside from that, not a whole lot. I've touched on Dynamo but didn't like it enough to use it in a project. 

It's handy to know, and I'll likely follow through with one of their certifications. But I wouldn't call it part of my core skillset in any way.",1530213214.0
SparserLogic,"Tons, I love DevOps and AWS. I gravitated towards roles that taught me AWS and I spend my free time in GCP to compare and contrast my work activities.  


The cloud is your friend and should empower your development skills.",1530217336.0
big_O_infinity,"I've got a web app deployed on elastic beanstalk (basically just a wrapper around ec2, elb, s3, etc.) I definitely recommend giving it a go if your needs aren't too specific. Though I won't lie and say it's a perfect solution, it's really been nice being able to focus on the product instead of infrastructure 👍

We're also using SES for automated email too and haven't run into any major issues.",1530237747.0
evertrooftop,Being familiar in AWS is great. Knowing Linux administration really well is greater and I would prioritize this.,1530240126.0
sieabah,"I'm a devops engineer at my current job, my previous job we used node but this gig uses nothing but python. Regardless I'd say my proficiency is at the level of a solutions architect.

So I'd say a lot of jobs are leaning towards having engineers who can do the entire stack from VM to frontend. Knowing what AWS service are and how to effectively use them is a huge bonus compared to a engineer who knows of data structures and concepts. Being able to think of your project in terms of components and technical debt related to the components you can make better decisions on what to use and what to host/manage yourself in whatever cloud platform you choose.

Although to plug who I used to get to where I am. It's a few years of just using AWS, GCP, Digital Ocean, and Linode and ACloudGuru. The courses can be dense for ACG, and I wouldn't pay for it myself unless you're stuck without a job trying to get one. If you can convince your boss to green light spending for that product it really does help for learning about aws services.",1530233935.0
zarrro,"Having deployed several  projects on AWS EC2 (both nodejs and python) I find it way too complicated.
So for the last project I decided I've had enough with it and I took some time to deploy kubernetes cluster on AWS with kops. Best decision for a project I've made. Yes there is some learning curve to kubernetes but the knowledge is transferable to any other cloud and for 90% of the things I need I don't even need to use AWS, simply write an Docker file and/or kubectl apply some  yaml .
",1530247720.0
stasjs,"It is de facto standard to be familiar with EC2, S3, RDS/DynamoDB, SQS, SNS, Api Gateway and Lambda functions. 
Try not to learn a lot of theory about them, but try them with some simple practical tasks instead.
That would be enough for the start, have fun)",1530249504.0
,[deleted],1530217520.0
OF_Shervin,Use DigitalOcean,1530230692.0
vanrysss,More than I know node. Pretty comfortable with setting up a stack in Terraform,1530245019.0
maxwellsmart84,ive stopped doing front end work to focus on being a node/infrastructure guru.  I have only been deving for 3 years but being able to auyomate deployments and bringing continuous integration to a team is huge.  Microservices are the future and I feel if you arent going to do front end ( I know react and  CSS i just dont like it) you should supplement it with infrastructure automation.  Its also really fucking cool and node was built for clustering.,1530275971.0
moose51789,"I learn AWS technology as I need it, so its basically nothing at this time but its fun to learn about new things as I go.  I'm sure i could be doing things much differently to make my dev flow not be totally manual but i'm like eh.",1530224107.0
,If you wanna get your feet wet in cloud dev and you're using node: try Heroku. It is built on top of AWS and is super fun and simple with node.,1530221189.0
sumdudeinhisundrware,"Much of AWS is just things to lock you into their platform.  Basically anything but EC2 is some kind of proprietary wrapper around some open source platform. To make things ""easier"" they keep lots of configuration and access locked down. If something with your managed database, cache, etc.  goes wrong you usually have to contact AWS support (which costs a lot of money) to look at it and fix it for you.  Even if its their fault YOU have to pay to tell them that.   I only use EC2 instances and grudgingly use Elastic Load Balancer in front of HAProxy instances where all the real configuration and optimization is. ",1530214017.0
raleighpoint,"Yes. In fact, the way the schema seems to be set up right now, you could create a Game without any of those fields because none of them are required.

[http://mongoosejs.com/docs/validation.html](http://mongoosejs.com/docs/validation.html)",1530207024.0
infamoustrey,Have you tried chaining them?,1530202924.0
aframe82,"If I understand correctly, you perhaps don’t NEED to fire the requests at the same time, you just need to work with the data returned from both endpoints at the same time?

If so, what http library are you using to make the requests?

Assuming that you’re using a promise based library you could easily stick both requests into a promise array, like:

   const req1 = axios.get(urlA/1)
   const req2 = axios.get(urlA/2)
   Promise.all([req1, req2])
     .then(responses => doSomeStuffWith(responses))

Or using async/await, deal with the responses one after the other (or deal with them when they’re both done):

   const syncGet = async (urls) => {
     const response1 = axios.get(urls[0])
     doSomeStuffWith(response1)
     const response2 = axios.get(urls[1])
     doSomeStuffWith(response2)
   }
   syncGet([urlA/1, urlA/2])",1530229474.0
H1r0Pr0t4g0n1s7,Could you provide us with a little bit more sourcecode/information? ,1530226850.0
scaleable,[https://stackoverflow.com/help/how-to-ask](https://stackoverflow.com/help/how-to-ask),1530206814.0
infamoustrey,"Ideally the latter as nginx will let your node app run on whatever port, which means you don't have to run your app as sudo(assuming you're on  Linux)

Try here:
https://stackoverflow.com/a/11745114",1530203521.0
BenjiSponge,"Nginx pros:

- Security (can run node without sudo) 
- Customizability (can later add other apps/domains)
- Easier to manage (LetsEncrypt does it automatically using a CLI, for example) 
- Probably faster (citation needed) 
- Way more mature

Node pros:

- Takes anywhere from 10 minutes to 3 hours less, depending on your familiarity with Linux/Nginx.",1530284778.0
bradleymeck,"A good example of thread usage is for compute heavy tasks:

* [parsing / transpiling code](https://docs.google.com/presentation/d/14Jn4ry0rlONMd2Yc1ZdFl-aU42XKVEgOc9x2Hy9C9ZI/edit#slide=id.g3c73ede8b6_0_160) can be stuck in a head of line blocking situation like babel passing things off to uglify

* [large data processing](https://github.com/bmeck/snapshot-utils) similarly can prevent your server from being able to handle requests until the processing is done

You can mitigate this by using child processes similar to `cluster` but managing child processes means managing things separately from the server. If a server faces unexpected failure but is the authority on killing child processes you can end up with zombie processes. In addition, using threads you can achieve much more complex workflows such as spinning up [tasks on threads but having an API that appears synchronous](https://gist.github.com/bmeck/fb90b23234aee41f392d4a19b61ba6e) by using `Atomics` and shared memory. These are just a few problematic cases that can be helped by using threads and cannot be replicated purely by using child_process. Performance gains using transferables and shared memory are visible as well since you don't need to send a serialized form to another process.",1530204119.0
StoneCypher,"async js is still single threaded, and therefore still uses a single core

this lets you use multiple cores",1530200045.0
davidmdm,"The reason they are bring worker threads to nodejs, is not to replace the non-blocking IO single threaded design of node. 

It is written in the docs that threads are less efficient at io and async operations than the non blocking io we currently enjoy. 

The reason they are introducing it is to perform better where nodejs traditionally does poorly, which is CPU intensive tasks.  Because before if you tried to do them you would end up blocking the event loop, or you would have to spin up a child process to do it. 

This is essentially a more light weight and efficient improvement on the child process method, by utilizing threads instead of new processes. 
",1530203020.0
scaleable,"Async just means a way to put events on a queue, on a single thread. You'd still have to do things like spawn 4x node processes in a machine and load balance them.

(PS: Only the ""main worker"" is single threaded, I/O ""native"" tasks actually use more threads.)",1530207810.0
christodagama,I’m not insulting you! (As he PM me that I can’t be a programmer even though I work at a top 5 as a front end engineer)[proof in pudding](https://imgur.com/gallery/5KcZXi9) ,1530204155.0
kranker,"The csv is actually utf8 rather than containing \u0000f etc, right?",1530200278.0
SomeRandomBuddy,"Yup. One server for SSR, one server for your API. The ssr server and the client app running within a browser both make calls to your API as expected. Once (on the ssr server) to prerender, and then in the client as needed by the react app",1530195648.0
scaleable,"You \*could\* spin them on the same process (next.js offers a middleware for it).

You \*should\* use a separate process.",1530207464.0
FalseWait7,"Do you mean server in a physical way, like a machine? If yes, you can just go with one, but with multiple applications on it. If no, then, well, yes, you need a separate server that will run Next.js (or any other SSR app), and another one that will run your API or authentication (those two latter things can be done within one app, this is up to you and your architecture). 

This is actually the point where you might just get ahead of yourself. It's easy to create multiple applications working with each other (micro- or even nano-services infrastructure), but bear in mind that you will have to take care of all those apps. Software architecture is very vast and complicated topic. Not always the best solution is the best solution for you. But this is for another discussion :)

**Okay, so bottom line is**: you need multiple applications (they can be named _servers_, although ""server"" is meant to _serve_ something, be it API resources or pre-rendered Next.js app), but they can be located on one machine (for example, on VPS).

P.S. Spawning applications in the wild tends to be more complicated that it seems, make sure to get some informations beforehand about the crucial things, like production mode, caching, security. Also, do read some Node-specific things, running apps with PM2 etc.",1530200979.0
Ariquitaun,"VSCode has the very cool markdown all in one that's great for editing. It's got table of contents and whatnot, including ""printing"" document to HTML.",1530196000.0
MatrixApp,Did u check out Vuepress?,1530336706.0
shredditech,Not sure if you’re still looking but docsource io seems to have the best UX with markdown. Has a markdown import from github if you already have mkd files ,1539786197.0
flipperdeflip,"Yeah, because if you use your incremental integers attackers can easily discover all content by iterating through the range, and additionally you leak business information, like how many records there are, how fast they grow etc.

There are a few approaches to get hard to guess ids. I like to use a postgres UUID column and a utility to render/parse them in to a compact form (like base37 instead of hex). You could also generate your own random string that is shorter or nicer looking and save it as a charfield, as long at it is unique and has enough range for your records. These are all fast with a database index.

There is also a concept called ""hashid"" that encodes and decodes your integer primary key to a hard to guess/enumerate string but it is not 100% secure (eg: an determined attacker can figure out the alphabet and salt, but it does defeat script kiddies) and it trades a bit of CPU to save a database column",1530188673.0
scaleable,That usually happens if the HTTP request is being sent with a different content-type header. CHeck if NGINX isn't overwriting the content-type header somewhere.,1530178706.0
kranker,"> The problem occurs when running on a live nginx server; the button causes the browser to download the index.html of the app instead of just updating the page

I'm not sure what you mean by this.

You have a button on the webapp that's supposed to fetch the index.html and do something with it?  Or it's supposed to fetch something else and do something with it but it's getting the index.html? ",1530176514.0
DomineEgoSumDignus,"As mentioned in another comment, the typical practice is to define the server’s base URL via environment variables. Typically, you’ll resolve all these environment variables in one spot, a configuration file, which is imported and referenced elsewhere in the project. The advantage of this is that you can set default values for local development here, there is one easy spot for someone to see all the relevant environment variables they can use to configure the application, and you can have some programmatic validation (mutually exclusive configurations, dangerous local setups, etc).

An example of the base server url might look like this, in a file you might put at the root of your source directory, which would typically be called `config.js`:

`const baseUrl = process.env.BASE_URL || ‘https://localhost:3000’;`

You would then export this, generally as part of some larger object containing other configs, and interpolate it into URLs you create elsewhere in your code.

With this setup, locally you wouldn’t need to set any environment variables. Wherever you are running your code “for real”, you will set an environment variable named `BASE_URL` with your server’s real URL (i.e. something like `’https://www.example.com’`). If you are running your code in Heroku, you’d go to your app instance settings and set the environment variable there, from the UI. If you’re using Docker, you’d inject the environment variable into your container at start via the flag `-e BASE_URL=‘https://www.example.com’`. Every platform for running will be a little different, but just look up whatever you are using and how to set environment variables.

This approach also makes it easier to set up multiple production-like environments. The typical practice is to have one “staging” environment, which is as similar as possible to your production environment, but which you do not (intentionally) expose to the broader user base. This environment is to provide a more production-like, shared test environment to deploy to and QA on before pushing the changes to the real production environment. This helps because individual developers’ machines can have variation between them, and also because there are often differences in running hosted software on a remote server/platform that are difficult to recreate and test locally.",1530178931.0
basumn,"Development environment is like a factory. It's where you make things, test it. Production environment is where the final product is, after all the testing is done.",1530209691.0
kobeljic,"If I'm using multiple endpoints on the same server, I keep the base URL in ENV and just append the path, eg `http.get({process.env.API_URL}` `+ '/users')`. Also making the code easy to change is a part of growing up as a developer, try to think of the ways to simplify the maintenance. For instance, keeping the paths in variables so you don't have to change a bunch of strings everywhere each time an URL changes.

This is a nice resource to learn a thing or two about modern apps and methods of configuration: [https://12factor.net/config](https://12factor.net/config)",1530177221.0
,[deleted],1530174466.0
Danny_Ikkala,"I was reading up on that a few days ago, and I think this is a pretty good explanation: https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953",1530171298.0
davidmdm,"Short version is in the last release of node (10.5.0) an experimental feature to allow threads was thrown in. 

That being said, if you read the docs, the async mechanism of node is much more efficient than spinning up new threads. 
The motivation behind this new experimental feature is to make nodejs more adaptable to CPU heavy tasks. ",1530191472.0
justadudewhohacks,"Besides what already has been mentioned, multithreading in nodejs has already been possible a long time ago via native node addons, e.g. AsyncWorkers.",1530189724.0
SparserLogic,"I mean, you can already spawn worker processes and communicate with them. You don't need threading when non blocking code handles 99&#37; of the use cases anyway.",1530195193.0
carb0n13,"Many people have mentioned the new worker_threads module, but I just wanted to mention something else. You can (and always could) write c++ add-ons for node.js. In a c++ add-on, you can write multithreaded code.",1530197407.0
chrissilich,"We had a [talk on this subject](https://youtu.be/5SNiZpER-2I) at the Atlanta Javascript meetup group. IIRC, you do anything asynchronous, it makes a thread. Events, Ajax, even just organizing your code into a promise, it threads it for you. ",1530241744.0
Someoneoldbutnew,"If you want threading, use Go. Node offers subprocesses.",1530201980.0
scaleable,Browsers had had similar capabilities since a while (with web workers).,1530178577.0
node_emperor,It's still experimental and error prone. For now we're stuck with redis and multi processes. ,1530180308.0
winzippy,Somewhere between completely and not at all.,1530170557.0
MyPostsAreRetarded,"Do you mean clustering?

However, if you use PM2 and multiple node instances... technically you can utilize more than 1 thread in the server. I use it for my game server. PM2 paired with Redis is a godsend. Easy horizontal scaling made for newbs.",1530169941.0
Fullstack_Questions,"Node depends on libuv, a c++ library, and that handles Node code with threading.  To utilize this, however, you would need to use something like PM2 and have a nice multiprocessor machine where your code is running (4 threads per cpu or something)  You can still spawn child processes in Node etc, but it was a bit confusing for me. I suggest you take Stephen Grider's advanced Node course on udemy. He teaches those ",1530175205.0
notAnotherJSDev,"Use an env variable to set whether you're in staging or production. Then if staging > staging website, production > production Website.",1530148012.0
shad0proxy,if you're in the browser there is a native api for it.,1530139912.0
IUsedToBeACave,"I'm not sure what you are trying to do? Are you trying to figure out if a specific process on the server is connected to the internet, or just if the server itself can communicate with the internet?",1530154297.0
pomlife,Why don't you pass the reference into the template?,1530135914.0
cutterfpv,I’ve been wanting to learn one of these template engines. But I haven’t grown out of back-tick strings.,1530151186.0
Jikstra,"Something like `- var foo = require('foo');` should work. If it doesn't, try passing a reference to the require method via the locals options to pug. I'm using it on my own, so it should work. ",1530202262.0
Star-Lord10,did you add your token ?,1530132534.0
kryptkpr,"There should be an env variable to set external server root url for this purpose, check Angular docs. ",1530561169.0
NetOperatorWibby,This seems like it’s for Android phones only.,1530129759.0
wywrd,"I did this for my site, in vanilla js. it's cool, but unless you investigate cashing options, it's gonna be more trouble than worth. (you might want to look into this https://jakearchibald.com/2014/offline-cookbook/) you're gonna have hard time testing the app for starters, as it's gonna keep showing cashed version, and none of the suggested solutions to circumventing this while testing, will work, or at least work well.

another thing that came as a surprise to me, that I didn't find mentioned anywhere, is that after putting the code in, it just didn't work, at all. no amount of searching for solutions and meddling with the code helped. it was only after I gave up on SW and decided to focus on mobile optimization, that the thing kicked in. your site needs to pass lighthouse test with flying colors for sw to work. it results in some really weird and counter intuitive code if you ask me. 

I mean, every tutorial ever would tell you to put css, html and js into separate files, but that increases the number of calls to the server and prevents you from passing the above the fold load speed test. so you basically have to figure out which part of your code is needed for the above the fold load, and include that into your html. now if I put this site into my cv, I need to explain why I went against everything suggested as best practices, in order to run a feature they won't even notice unless they load the site trough the phone. 

I'm a novice coder, so I may be overreacting, and some of the things I mentioned may seem obvious to experienced developers, but I'm sure there are other novice coders who might get interested in this and wanna test it.",1530176933.0
kostarelo,"To answer my question:

    const stream = new Readable({
      read() {}
    })

    stream.push('data')
    stream.push('more data')
    stream.push('and more data')

    // Pay attention to this
    // null indicates the end of the stream, so the `data` event will be fired
    stream.push(null)

    const params = {
      Bucket: 'test-trouva-sitemap',
      Body: stream,
      Key: `sitemap.${part}.xml`,
      ACL:'public-read'
    };
    return S3.upload(params).promise();",1530219179.0
SonOfStorms,Move the lines 33 and 34 before api endpoints,1530126107.0
sznowicki,"There is one rule I will follow my whole life. Scroll hijacking => downvote. 

",1530122623.0
kwiwksh,This site is completely busted for me.,1530120531.0
awegeeshucks,"Express has [built in middleware for serving static assets](https://expressjs.com/en/starter/static-files.html). Run a production build of your Vue front end and create a route which serves up the `dist` folder that is created from the build - `app.use('/',express.static(path.join(__dirname, 'path/to/dist'))`",1530121955.0
jakuski,Misleading title in my eyes.,1530118083.0
Just42s,Thank you! :),1530203120.0
quizasquizas,"[require('../src/main.js'](https://github.com/kiranz/just-api/blob/master/bin/just-api#L12))

There is no src/ up on github?",1530606478.0
BehindTheMath,"Why can't you read the whole file, modify the object, and rewrite the whole thing back to the file?

Besides, it sounds like you're trying to use a file as a database. There are libraries that can handle that for you, so you don't have to deal with the actual reading and writing. ",1530106236.0
NICE_TRY_KIM,Sounds like you’re trying to write your own MongoDB.,1530106926.0
raleighpoint,Glad you figured it out! You should get some inspiration from [https://www.npmjs.com/package/json-server](https://www.npmjs.com/package/json-server),1530111483.0
kryptkpr,"If you have a session, just write what you want to save into the session (from relevant endpoint) and it will get loaded on the next call (to any other endpoint).",1530561479.0
brocococonut,"I'd actually recommend you have a look at [Shopify's API documentation][1]. REST APIs aren't plug and play with each other. They're all different. You'd likely be working with something similar to the `request` module to make `GET`, `POST` and `PATCH` requests.

Additionally, you might wanna check and see if [Shopify has a Node adaptor or helper library on npm][2]

You'll be able to learn from Shopify's examples on their API documentation pages :)

Let me know if this put you on the right track or if you need more help (after attempting it yourself of course) :)

[1]: https://developers.shopify.com
[2]: https://www.npmjs.com/search?q=Shopify",1530093836.0
Djbm,"You can use a helper library like [Axios](https://github.com/axios/axios) if you prefer a promise based approach. It also helps cut down on boilerplate as your interactions with the API get more complex.

Their docs have basic examples that are easy to understand and should get you going.",1530108857.0
Soze224,"i mean if you can call a url then youre good to go. 

    const request = require(‘request’)
    request(‘https://api.com’)
    .then(result => console.log(result))
    .catch(error => console.error(error))

unless they provide a javascript api that does not require a DOM

    const api = require(‘myapi’)",1530107158.0
Aesthetickz,"Note that a REST api is nothing more than a way of organizing HTTP endpoints. So knowing how to do http requests is enough to know how to call REST api’s. I would say:

1. Learn Javascript in general.
2. Learn node.js (nodeschool.io)
3. Use some library like Axios to do HTTP requests
",1530125844.0
,[deleted],1530099247.0
house_monkey,Upvote for good boye,1530089979.0
Oceanswave,"Similar implementation of server backed session state stored in a cookie
https://github.com/expressjs/session

JWTs and other implementations use a cryptographic mechanism to determine token validity rather than storing state.

This is said to be more “web scale” as you don’t need to hit a db or in-memory cache on each request, or figure out how to efficiently persist or expire a session over a cluster - but if your requirements are such that you don’t need that, plenty of sites and implementations (especially asp.net) still use db backed sessions so the approach is valid.

Obligatory Yada yada about the pitfalls of rolling your own auth mechanism.",1530076685.0
idmontie,"All endpoints now need access to Mongo. You can't authenticate a user without Mongo access and access to the Sessions schema.

At scale, it means all services are tied to sessions which are stored in a central location.

With JWTs, you can use public-private keys and have each microservice have access to just the public keys, so if a service is compromised, the attacker can't generate new JWTs; but, at the same time, all services can check the validity of a token without hitting a central service.",1530089462.0
,[deleted],1530205208.0
DanielFGray,"Would love to have seen a version of this without mongo, using knex and sqlite or postgres.",1530422308.0
scttmthsn,You can simply use Knex migrations independently of the other features.,1530051302.0
jgordon615,"This is not a plug because I'm not supporting this library (use at your own risk), but I wrote a node module to handle db migrations for mssql for a past project.

https://github.com/jgordon615/node-mig

Good luck!",1530052102.0
bigorangemachine,Sequelize; but I think you need to be picky on how you write your migration,1530057679.0
andreaubaska,Maximilian is an excellent instructor.  I like the course.,1530052235.0
usualyprogramming,excellent course. great support and good instructor,1530052854.0
,[deleted],1530051636.0
Max_Stern,"Can somebody explain, why npm doesn't work like this since the beginning?  
I mean, I never really cared about how npm works, I was just using it without any questions about it internal processes but then I discovered how it worked initially, how they implemented ""flatten"" node_modules, etc. and now the question is what were their thoughts?  
This thing (pnpm) sounds like that most logical and obvious solution for dependencies management.  
If something needs specific version of a package then it installs it. If something else needs exactly the same version it uses already installed one.  
Need another version? Just install it alongside with other versions.  

What are the possible disadvantages of this method and pnpm in particular?
 ",1530103825.0
fgutz,"This looks cool but I'm still trying to wrap my brain around it.  Maybe someone here can help me out.

If the registry folder looks like this now

    .registry.npmjs.org/<name>/<version>/node_modules/<name>

Does that mean that pnpm is reverting back to the old original npm ways where each module installs its dependencies under its own folder and there is no sharing of similar dependencies between user installed modules? That's what it looks like to me from this article.",1530058632.0
JKHeadley,"Hi guys, I'm launching v1 for a project I've been working on for two years now. Please check out the article and let me know what you think :)",1530041878.0
gieter,You are better of comparing nestjs vs rails,1530050114.0
asap,"Rails offers you a lot more ""batteries included"" stuff, like an ORM and templating library. It also follows a lot more conventions so if you run it out of the box, chances are you'll know where things are.

Node/Express offers a lot less, which isn't necessarily a bad thing, but you're going to have to set up all the other things that would have come out of the box with Rails.

I'm actually going through this right now, as I'm building out a Node/Express Rest API for the day job, and the biggest challenge is finding out how to do things the ""conventional"" way I would have done them in Rails.

On the other hand, Node/Express is a lot more streamlined, ""faster"" because of the async approach, and a lot lighter.

My only criticism with having worked with Node for the past 6 months is learning to do things ""the node"" way, such as dealing with callbacks vs promises, which is a big change from what I was used to in Rails. Also, since there isn't a built in ORM, I've had some trial and error picking out a good one. Currently using Bookshelf.js with Knex, if you're curious.

Also, IMO documentation was a bit better with Rails, but there's tons of decent Node/Express blogs out there that can fill out the gaps of your knowledge. Just have to look for them.",1530048207.0
BearByte,"Rails and Node aren't the same thing. Rails is a framework node is not. 

A more apt comparison would be something like ExpressJs (most common node framework) vs Rails.  

Semantics aside, I will say I have used both but am somewhat biased towards node. The general direction that devs have been taking is more towards using node rather than rails. I believe this is because node is async in nature with it's event loop, node is javascript which most web devs already know, and most importantly npm provides many, many useful packages that are easy to add to your app. 

That being said Ruby is generally considered to be better for getting up and running quickly, so if you're looking for something quick and dirty you may have more luck with that. 

This is just my opinion. There are a ton of great articles about it online, just google something like node vs rails or express vs rails. ",1530038550.0
Gluaisrothar,"The answer is it depends.

I will however say that Ruby is dropping in popularity with the larger tech companies, as they are transitioning to more scalable architectures.

Lots of startups and web agencies using Rails though.

Template MVC based development is fairly dated at this stage, separated frontend and backend stacks are the preferred approach for applications. Which suits node better IMO.
",1530048263.0
sshaw_,"In Node, pretty much everything you do will be async. This requires different approaches to code organization and problem solving than the imperative and/or object oriented approach one normally takes with Ruby. This can feel a bit ""unnatrual"", especially when the problems being solved are synchronous and/or you're not accustomed to the patterns used to work with asynchronous code.

In certain cases node's model of async io can be more performant that Ruby's sync approach (but Ruby does support an async code via 3rd party libraries or low-level programming).

I have used Express, Sequelize, and Sails.js and was not satisfied with the time it took me to write the equivalent code using Rails or any other Ruby web and ORM frameworks. The functionality provided by Sails.js on the ORM side is minimal. In my case Sequelize seemed to require more boilerplate code when compared with ActiveRecord. Of course I have years of Rails experience and there was a learning curve for these, but overall I was not satisfied with my experiences and the resulting code. 

It's better to equate Express with Rack not Rails. Express is nice and there are nice view frameworks that it supports but, when factoring in these ORMs, it did not seem worthwhile.

Really, I would recommend creating a small app using Rails and using a popular framework suggested here or by the larger Node community and decide for yourself. 

But okay, that aside. I would not recommend using Node over Rails unless:

* Node's IO model had something particular to offer your use case
* You see benefits to using one language for front and backends
* You prefer functional style over OO/imperative 
",1530074259.0
rizlah5,"Not really sure about the real benefits but ive heard nodejs is basically the meta and almost all companies use it for backend. Also heard some other guy say that 90% his freelance work is node for backend and not ruby on rails. With that reason I went with node, otherwise I was thinking about learning ruby on rails too. Dont really want to learn something that isnt being used for work",1530048178.0
skarfacegc,node is a language (like ruby) while rails is a web development framework written in ruby.  Not an apples to apples comparison.  ,1530038250.0
wazoocakes,"> Any arguments?

Nope. none at all.",1530038926.0
SparserLogic,[https://developers.google.com/web/updates/2017/04/headless-chrome](https://developers.google.com/web/updates/2017/04/headless-chrome),1530037979.0
davidmdm,"I use the suggested module on the rabbitmq website when going though the JavaScript tutorials. ""amqplib"" I think it might be the same as the one you just stated. But it's documented well enough and it works. 

I tried a higher level abstraction called rabbot and to be fair it worked decently well, but I felt too far removed from the protocol and didn't feel I had enough control. 
",1530054814.0
throwawayacc201711,"Did you google about mocha?

Mocha is for unit testing and allows you to assert conditions for functions to pass/fail. This allows you to test in isolation rather than manually needing to test your entire program. ",1530026039.0
SippieCup,">I just can't understand why he used mocha if he could just check whether the saved data really is in the DB.

When you are building a bigger application with several moving parts and change something, you want to ensure that everything else still works.

Rather than having to test every function manually, then checking the database. You can use Mocha to test for what is expected for each function.

Thus, you can test 3000 functions in a minute, rather than spending the next week ensuring you didnt break anything with a recent change.",1530033639.0
skarfacegc,"Yeah, you can write tests without mocha. However, mocha gives you standardized test reports, hooks with other tools easily (sinon/chai, code coverage etc), etc. Overall it just saves some time and standardizes stuff a bit, but it's not magical.",1530038092.0
cat5inthecradle,"Mocking the DB is useful for speeding up tests or reducing side effects, but it’s also extra work during test writing. If your tests are fast enough, and your app is small enough, just calling a function and asserting against the db in your test is fine.

But I don’t get your question of why to use mocha... are you asking why to use a testing framework? Have you written many tests? I don’t know whether you’re asking why I should use a drill and screws when a hammer and nail works fine, or if you’re asking why I should use a drill when you can hold things together with duct tape.",1530062118.0
,[deleted],1530024293.0
zkochan,"While developing [pnpm](https://github.com/pnpm/pnpm) I've noticed that some packages require themselves like `require('package-name/lib/something')`. I think that is a better approach because it doesn't require hacking into the node resolver.

I created a helper package that just links the package to the node_modules folder of itself: https://www.npmjs.com/package/self-import

Such code will also work if the package gets published to the registry because the installed package will be in a node_modules folder",1530043028.0
,[deleted],1530047312.0
Moosething,"You can also do something like the following, though I don't know if it's any better than the other 100 alternative ways of solving the problem.

`package.json`:

    {
      ""name"": ""baz"",
      ""dependencies"": {
        ""foo"": ""file:./foo""
      }
    }

`foo/package.json`:

    {
      ""main"": ""index.js""
    }

Then in e.g. `src/examplefile.js` you can simply do `require('foo')`.",1530047397.0
fgutz,"I like using `process.cwd()+/lib/whatever/file.js` 

If I have to move the file around to a different folder I don't have to fix all the relative require paths, they just automatically work. You can alias that by setting a const if you want to make it cleaner.

    const cwd = process.cwd();
    const thing = require(`${cwd}/lib/path/thing.js`)",1530059359.0
pickingoutathermos,"I would use Knex and SQLite to keep this as simple as possible. 
There are lots of tutorials online for using Knex and Node (Google is your friend). Next I would download an SQL database client that works with SQLite, so you can easily see what is happening inside your tables.


As far as table design, that will take some work experimenting (if it is your first time), but that is the fun of it. Google what table normalization is, you want your tables to be normalized.


A much simpler way of thinking of it, is you want each resource to have its own table, and use joins and relations when you want to mix them. An example of this would be tables for Users, Posts, and Comments in a blog application.


So maybe start with a restaurant table, and as you add columns you might find that your table is no longer normalized, and you’ll actually need to add new tables with that information (perhaps the address needs to be table, if there are multiple addresses).",1530193996.0
timefornode,"Sounds like you're a JS friend. Check out webtask.com, throw an Express based API on there, then go to mlab.com and sign up for a free MongoDB to store your restaurant data. Hook the two up and you've got yourself a super quick API that you can hit from your Raspberry Pi, your phone, your desktop... wherever. It's all free.

There's a tutorial on how to do this on scotch.io
 
https://scotch-io.cdn.ampproject.org/v/s/scotch.io/amp/tutorials/build-a-serverless-mern-story-app-with-webtask-io-zero-to-deploy-1?usqp=mq331AQECAE4AQ%3D%3D&amp_js_v=0.1#referrer=https://www.google.com&amp_tf=From%20%251%24s",1530057333.0
moranjavascriptworks,Part 1: https://javascript.works-hub.com/learn/functional-programming-unit-testing-in-node-part-1-of-6-e9969?utm\_source=reddit&utm\_medium=part1&utm\_campaign=sam,1530016387.0
,One piece of advice might be to make tests isolated and atomic. Each individual test should be able to be ran individually with proper setup & teardown logic. This will also help keep other tests passing if a previous test fails when you remove that dependency on previous tests.,1530024750.0
insane_yet_awesome,"That's impossible. Even though you **are** going to make a lot of mistakes, we can't possibly know what they're going to be. Your pattern of failure will be as unique as your fingerprints.

That said, I will say this:

-	don't see unit testing as another task. It is your method of development, and should actually make your life easier. Everything you used to console.log were assumptions about how your code works, and these assumptions should now be formalized in chai assertions.
-	make sure to create small, decoupled pieces of code with inversion of control in mind. This is good practice, and essential to effective unit testing.
-	respect your own tests. When working tests start failing later on, reflect on what it means. Was it a regression, an API change or a test with uncomfortable dependencies to begin with? Learn from those failures, and make your tests sharper. Never delete tests just because they feel like obstacles.",1530017477.0
Capaj,"I'd like to give you one pice of advice which you won't really find in the docs or tutorials:

there are two ways of structuring folders and directories for tests in node.js community. First is more traditional-they put all spec files into a `test` folder. Then they run all the files in that folder in mocha/jest/ava what have you. Mocha has `--recursive` which runs all the files even in subdirectories.

The second more progressive group puts the `spec.js`  files next to the modules themselves. So if you have a file called `calculator.js` you'd have a spec next to it called `calculator.spec.js`. This IMHO is much better:

1. you don't have to go looking for the spec file in some strange mirror of your `src` folder structure. It's always right there next to your file.
2. you don't run into issues like this one: [https://github.com/Vincit/objection.js/pull/968#discussion\_r197911382](https://github.com/Vincit/objection.js/pull/968#discussion_r197911382)

So please, put specs right next to the implementation.",1530020569.0
GooberMcNutly,"First, congratulations for even thinking about testing *before* you get far into the development. With that mindset, you will go far. 

Secondly, I also recommend that you make the test running as automated as possible. Otherwise, when deadlines loom and the pressure is on you will be tempted to skip it. That's when the snake bites you. Pre commit hooks and the like keep you (me) from being lazy.

Lastly, because of the nature of JavaScript, add an automated lint pre check to the testing suite, many times it will catch syntax bugs that the test may not.",1530026581.0
elebrin,"I write automated tests for a living.

1. Respect the testing pyramid. Use unit tests as the bedrock of your testing strategy., build upon them with integration tests, then use Selenium and test the front end too. Remember though that your unit tests are the bedrock and the other layers aren't as useful with out them.
2. Unit tests cover the most basic units of functionality independently of one another. Always keep that in mind. If your test doesn't do that or can't do that, consider refactoring your code, which is another way of saying that you will keep the same functionality but change the method by which the result is achieved. Your unit tests should be focused on testing your programmatic logic predominantly.
3. Write some integration tests once your project begins to mature. These tests should run against an actual environment (therefore they will have to run after a deployment), and some of them should be marked as safe for running in production as smoke tests. They should be going broad, covering as much of a process as possible while not worrying too deeply about the underlying logic. You are verifying, here, that your product has been deployed, that the parts all talk to each other correctly, and that you've honored any data contracts that are in place.
4. Finally, write some GUI tests. Generally if you are building a web app that means using something like Selenium to spin up your app, then verify that things are loading and working. The goal of a GUI test is to verify that the features and processes your integration tests are testing have been exposed to a user.

Here are some other best practices for automated testing:

1. Avoid creating unneeded test artifacts (anything left over after a test run) and ensure your tests clean up after themselves when possible.
2. Keep your integration and GUI tests at a manageable count. If you have 5 big processes that your program performs, then you need 5 integration tests or so. If your program has three screens, then you need three GUI tests. Those, combined with 50-60 unit tests will probably get you where you want to be.
3. Your unit tests should run upon merge into your deployment branch.
4. Your integration tests should run against every environment. Your prod-safe tests should run against prod after that is deployed, and be considered smoke tests.
5. Treat a failed test as a regression and take it seriously.
6. Every test  you write should fail at least once. Write it to fail, then fix it so it passes.",1530049342.0
erulabs,"+1 for ""you'll make mistakes regardless, dont sweat it"", but also:

Build two ""test"" codebases. One should require nothing except mocha, chai, nodejs - it should test purely logical functions (ie: not functions that deal with databases or webservers or sockets, etc). These are called your ""unit tests"", which is what _most_ guides will be helping you build.

Then, build a second codebase of tests, ones that actually talk to your running webserver, actually log in to your database, actually check and send email, etc etc. These tests probably need access to the same configuration files as your API, and they require that your API is up and running for them to pass. These are called ""integration tests"". You can use mocha and chai for this too - but they should be actually making requests to your live application. Both should be usable locally (ie: when you're developing). Think of this codebase as a first-class citizen, it's an application you're making, just as vital as the actual application it tests.

Strive hard to be able to test as much as possible in unit tests - but _do not_ ""hack"" your actual application for them. Don't use ""mocks"" or ""fake databases"", or any of the complicated crap. Just separate as much logic as you can into pure functions, and unit test them. For the rest, make your integration tests actually do what your users do. Make it clean up after itself. Your codebase shouldn't be full of stubs like ""If in testing mode..."" - aggressively remove differences between environments (including the test environment!), and you'll be much happier when you go to production. When these two types of tests are confused and mixed together, you wind up spending hours working on mocking library code to pretend to be a remote resource or stubs for database calls that you'll later find dont actually replicate the real database _quite right_, and other wasteful tasks and over-engineering.

Not understanding the difference between integration tests and unit tests leads to terrible nightmares, where the ""unit tests"" can only be run in certain configurations, and they cant be run against production, they can only be run on that one Jenkins server no one remembers how to setup, etc etc etc. Having two test codebases will force you into a way of thinking that helps you split business logic from application logic, which is hugely helpful for designing good codebases :)

Good luck!",1530049706.0
bigorangemachine,"I would add a mocking/stubbing framework (Sinon) to your stack. Other than that you don't need anything else (maybe nock) as it would be over tooling.

Your code style matters a lot. Avoid named functions as you cannot mock/stub them. 

I generally mock/stub everything to keep my repeated coverage lines to a minimum and avoid misleading assertions.

In short I compare it to using databases. It's easy to implement; but doing it correctly takes lots of organization and best practices",1530030535.0
primus202,Anyone have good standards for testing async and promise based methods? I know they exist but I always get mixed up on that front and recently had to confront that issue again. ,1530043086.0
rwc777,you should try Jest,1530056785.0
hugo__df,"Put a queue in front of the database?

You can implement a simple queue using redis using the List structure and things like RPOPLPUSH.

Otherwise you can leverage things like Kue.",1530013626.0
Jake_Jeremy,"One possibility (which is actually used in really big real-life environments) is to basically just throw your data at a Cassandra DB in completely denormalized form, and then work through that and save it normalized into a different DB.",1530045177.0
OzziePeck,This is getting out of hand... these article promotions. As if js would ever be faster than native compiled machine code. Ffs humanity. ,1529996792.0
virtulis,"You're passing a *result* of `saySomething('One')` to `then()`.

You probably meant `() => saySomething('One')`

Or you could rewrite `saySomething()` as

	function saySomething(x) {
		return () => console.log(x);
	}
",1529983425.0
andywer,"On a side note: If you are running node 8, you might wanna look into [async functions](https://developers.google.com/web/fundamentals/primers/async-functions).

It's just syntactic sugar on top of promises, but quite some powerful one. In this scenario it would have probably prevented the bug in the first place, by a more intuitive syntax:

```js
// Manual promise handling:
doSomething().then(saySomething('One')).then(saySomething('Two'));
saySomething('By itself');

// async / await:
async function run () {
  await doSomething();
  await saySomething('One');
  await saySomething('Two');
  saySomething('By itself');
}

run();
```",1530044974.0
ivanph,">  Why are One and Two not executed after File read end? They're in the ""then"" clauses - would they not get called after File read end completes?

The `then()` method takes a function, when you do `.then(saySomething('One'))` you are actually calling the function there and passing the result to the `then`, which in turn just ignores it (since is not a callback).

>  Why is By itself not displayed right away - while waiting for readAFile() and the promise chain to be fired? I would expect that to run as soon as the promise is returned?

Your `doSomething()` function is evaluated synchronously, it calls `readFile` which is also run synchronous, when you create a `Promise` using `new`, the constructor is evaluated right away, again synchronously.
",1529987464.0
WebDevLikeNoOther,"Uh, a database agnostic approach would be to use Cookies / Local Storage, and some backend server logic I suppose?",1529966451.0
scaredibis,"I think the first thing you should try do is make a basic website without gulp or node. Gulp is useful but unnecessary if you are at a stage where you are just trying to learn bootstrap. 

Node can be learnt after the basics of creating a simple website with bootstrap and a bit of javascript. You can use jquery and/or plain javascript to make interactive elements. (Despite what most of the web dev community say, jquery is a nice tool for beginners to learn javascript and how the DOM works).

Once you have a decent looking website with interactive elements (such as forms for saving data to a database). You should learn about setting up a node webserver that your website can send and receive data from. (You will need to read up on http and rest API’s). 

Once you are a bit more familiar with client-server communication, then you should look into adding some more complex functionality to your website using a frontend framework like react or angular. Gulp will be much more useful once your front end is more complex and you know more of the basics of front end development.",1529967941.0
sieabah,"This article just shows how to make a CLI proxy, doesn't even mention commander or any CLI building tools.",1529975060.0
gammelini,"I recently started to develop an in-house tool for running similar types of tasks for our CI. I am using Listr and execa along with commander for the execution side. Additionally, I am using inquistor to generate the specific project needs such as: Does this project need to use Cypress?, etc. Great tools.



",1529974326.0
runvnc,"This is the same article that was posted a few days ago.  If you just want a simple series of commands executed with spinners, see `runspin`.",1530048417.0
PerfectOrphan31,"I've found that Traversy Media on YouTube has some really good tutorials. (I'm on mobile or else I'd link). Otherwise, lots of tutorials are out there on Medium, Hackernoon, Scotch.io, and other sites. If you're still looking for help afterwards feel free to message me. I'm always happy to help where I can!",1529966210.0
hagnerd,"If you’re familiar with JavaScript already, learnyounode is a good way to get a quick primer on node. ",1529984368.0
zkochan,"Awesome lists. Just google awesome node.js tutorials or awesome + anything and you'll find a github repo with useful links

https://github.com/sindresorhus/awesome-nodejs",1529998577.0
ChrisCodes,"I read this as ""April Fools"" instead of April 2018 ;( ",1529961993.0
bel9708,"""New NPM package"" isn't exactly an eye-catching title. ",1529979622.0
godu,"Why did you not reuse openapi spec instead of reinvent api yml spec ?
I like the way that dredd use swagger with custom attributes to define its tests.",1529958385.0
codeinprogress,"Go with Heroku for hosting your node.js server. They let you have 5 apps for free.

You can use mongolab free tier for your mongo database.",1529946031.0
akujinhikari,"I use the $5/mo service from DigitalOcean. I can’t complain at all. Not only is their service great, they have MASSIVE amounts of tutorials. I learned a lot about Linux servers from them.",1529946285.0
nothingduploading,you can find some pretty good deals on vps servers over at lowendtalk.com,1529945206.0
k-sheth,Highly unlikely. very different requirements between backend and front end.,1529936083.0
EntroperZero,"I think you have Redis and MongoDB backwards, there.  Your events need to be persisted to a durable data store, the last known state can be in an in-memory cache.

In principle, reducers map pretty well to aggregate command handlers.  So you can probably make it work.",1530025761.0
pcdinh,"More advanced blockchain implementation in JavaScript, visit /r/lisk or  https://github.com/LiskHQ/lisk",1529955402.0
,[deleted],1529934367.0
,"Great idea to call it Palantir. Not.

https://www.palantir.com",1529936220.0
codelearning,"People already mentioned the eventual legal trouble regarding copyright... 

But think about brand image, first thought I got when reading Palantir was something like ""Man, Fuck Palantir! what's this about this time?"" ",1529938059.0
turkish_gold,"If anyone owns the term Palantir its Lord of the Rings.

[https://en.wikipedia.org/wiki/Palant&#37;C3&#37;ADr](https://en.wikipedia.org/wiki/Palant%C3%ADr)

Beyond that, call your company whatever you like. There's no issue with there being similarly named companies, when not using a nonsense word.",1529949321.0
umib0zu,Just admit you're namesquatting github repos hoping for a sweet check from said company to buy rights to the repo.,1529941047.0
gajus0,"Hello all,

I have founded a company that specialises in large-scale data aggregation. I have authored Palantir to enable pro-active detection of data abnormalities, as well as inspection of the overall infrastructure help.

The way that I am using Palantir involves [dynamically generating](https://github.com/gajus/palantir#palantir-recipes-dynamically-generating-a-test-suite) a lot of tests for every data source that we use. This enables granular test cases and source specific configuration.

Hopefully others find this useful as well.",1529924561.0
rbzaz,"I came across a similar problem, would like someone’s input in this. 

When you say token based, you are referring to JWT, the npm package, jasonwebtoken?

I was thinking if you have one time verification of a user, then you make a playload with user info like the username, then create a token from that and send it to be stored locally on the users browser

Since we use a secret key to create the token, then when we retrieve the token back, we should be able to verify it with our key and be sure that we were the ones who create it. Then we could safely assume that the requester is the user we provided in the payload.

Also the token would expire, depending on the time set of the options when creating the token.

So I don’t really know where we would need to use passport or sessions? at least on the server side.

Edit:
We can’t safely assume the requested is the one we provided the payload too, but we can safely assume that the payload contents have not been changed. ",1529922953.0
JakeGore,The express session middleware is so good and easy to set up: https://github.com/expressjs/session,1529923583.0
kranker,dwolla?   ,1529925899.0
shizpi,Maybe Zuora?,1530001964.0
SparserLogic,"This is kind of silly. All they did was spend some cash to prove AWS has configurable throughput settings.

If you really wanna find tune your lambda profile the code itself in a controlled environment",1529899923.0
vanrysss,"Anyone connecting lambdas to postgres without doing their homework is in for a rude awakening. Ditto for Dynamo, but for different reasons.",1529896210.0
OzziePeck,"I’m quite happy with my app in its current stable form, I don’t really want to break it thanks. ",1529926135.0
thepatriotlcr,"As nice as this article may be, what does it have to do with node? ",1529914635.0
tswaters,"`main(body)` needs to return a value... the real trick here is dealing with the async return value.  It looks like you've started with promises, but `cleanup` doesn't return a value so the final value sort of gets lost.

 assuming main returns a sorted array, it should be as simple as:
    
    main(body).then(result => res.end(`
    <!doctype html>
    <ol>
    <li>
    ${result.map(r => `<p>${r}</p>`).join('</li><li>')}
    </li>
    </ol>
    `))

it should be noted there are web frameworks that make working with the http module a bit easier... and rendering template libraries that make building out the html easier.",1529861315.0
knight_of_unix,"[Desktop Client](https://github.com/RocketChat/Rocket.Chat.Electron/releases/download/2.11.0/rocketchat-setup-2.11.0.exe)

Judging by the README, Rocket.Chat doesn’t support Windows as a _server_ deployment. ",1529871286.0
binauralvoice,"Holi, I would like to help. It sounds fun",1529851441.0
Agilitis,"I will look into it, as soon as I can :)",1529852308.0
monsto,You haven't said what it actually does. ,1529906452.0
Nowaker,What matters to me is I can start it with a single command. Docker image FTW!,1529861493.0
FearAndLawyering,https://github.com/meepen/salien-bot,1529845051.0
MrButttons,cat is a UNIX command. More info here - https://www.techonthenet.com/unix/basic/cat.php,1529837823.0
mshthn,"Maybe you're on Windows.
Cat shows the content of a file on Linux or Mac.
In Windows the type command is basically the same.",1529838509.0
hydroes777,"If you're on Mac/Linux then use the man command to look at the manual for any command eg:
Man cat",1529840005.0
mistralol,"
concatinate. Reads each file as an argument and outputs them",1529842218.0
oldyoyoboy,"In this context cat is being used to read the contents of the file and then piping it into coveralls.js via stdin, a common Unix practice.",1529854234.0
gpyh,"Is there specific data you need to pass as query parameters? If so, your way is fine.

Otherwise, just use an anchor tag. It's way simpler.",1529835309.0
kudoz,The config file needs to be on master too.,1529828840.0
_lux0n,">to make the API call, we will be using axios library we installed when setting up our front end app.

But then the author uses fetch?

Also, why do you need to enable CORS on localhost?",1529838845.0
ventagepoint,Thanks a lot. Gonna try it out. ,1529827172.0
AlmostAnonymousDylan,"Solid tutorial, thanks man. Going to build it out and try expanding on it for fun.",1529858895.0
tarpier,"I have done something similar with nightmare.js and ran into a reliability problem. I guess IG is using something like styled-components, so everytime they deploy an update those css classnames change.

You have to keep track of those changes and reflect them in your code, which is a pain...

Just as a heads up! I saw you using css selectors while skipping through, but will watch your Video thoroughly.",1529863217.0
tomnewmann,"Hey, great tutorial for the starters. I recently built a bot in javascript (also using puppeteer) https://www.youtube.com/watch?v=XWhUmQMuEj0 . Let me know what you think of it?",1530175086.0
britnietw,Whoa I almost fell asleep...,1529796810.0
action_jackosn,"After struggling to get private NPM packages integrated into our Jenkins and artifactory flow, this seems like a much easier alternative.",1529830901.0
BithTree,"Well, I redid my personal project (Express, Knex, and Objection) to have this kind of structure. I am not a fan of having gigantic controllers, routes, and models directories. I'll consider making my repo temporarily public so you can see what I've done.

My structure is something like this.

     src/
         bin/www
         apps/           <-- the sub-apps
         routes.js.     <-- programatically attaches routes
         settings.js.  <-- has a String[] of the sub-app dir names
         app.js

Logistically, each of my sub-apps are in an apps directory. Each sub-app contains its own controllers and routes directories at a minimum. The routes directory is special because its index.js file exports a function that takes an Express app instance and calls app.use('routeIwant/', router). 

So in each sub-app, I declare what routes I want and which route, like usual. The reason its special is because the routes.js file at the top loops through the array of installed app in settings.js and programatically requires that aforementioned sub-app's routes' index file's export function. Thus, in my app.js, I import that top-level routes.js file, which in turn attaches all of the routes to the Express app instance.

Each sub-app has its own index.js file where I export its 'local' attachRoutes function as well as any middleware or ORM models. In essence, each sub-app controls exactly what can be taken from it.

The result of my efforts (could not find any guides on this) resulted in a MUCH cleaner directory structure.",1529791714.0
ImtheDr,[Traversy media's Deploy Node.js App To Digital Ocean Server](https://www.youtube.com/watch?v=RE2PLyFqCzE),1529790252.0
JakeGore,"This is a really good tutorial, it goes through all the steps: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04",1529784394.0
roboctocat,What platform are you deploying to? Deploying to Azure is very simple.,1529781365.0
ccleary00,"I'm not sure what you mean ""without routes."" How are you calling Postman without a route? if it's something like POST ip:port/api/whatever, that ""api/whatever"" piece is your route.

>  This is just going to be triggered server side without user interaction.

How many services do you have here? Is it UI -> service -> bearer token service? Or is it just UI -> service?  Your UI could just make an AJAX call to that POST route for the token.",1529775928.0
papyhardcore,If you want to retrieve data I suggest you to use GET method. POST is used for creation. Look at API good practices.,1529829787.0
ccleary00,"You've missed a lot, check here: [node.green](https://node.green/)",1529775985.0
bobinux,[https://i.imgur.com/86Fax37.gif](https://i.imgur.com/86Fax37.gif),1529839242.0
cgijoe_jhuckaby,Check out async/await.  It's a game changer.,1529792825.0
JakeGore,Would using a HTTP client like 'axios' help?,1529788183.0
mvasigh,"What you want to do is store that data somewhere, either in a file or a database or something, then have a route that your React app can send a GET request to that serves up the data in JSON format. Your server shouldn't POST the data to your client app, your client should GET the data it wants from the server when it wants it. If you don't want to use a database bc it's a small app or whatever look into node's fs (filesystem) module and write the data to the disk as a JSON file. ",1529795651.0
Equality7_2521_,"Hey dude, you are in luck.

Do you have complete creative control over that python app? If so, look into the ""child-process"" node module. Essentially what that allows you to do is run an application as a child of yours, even if that executable application is not written in node.

If I were you I would attempt to make your python application command-line based and use ""child-process"" from there.",1529824146.0
leo10099,Are you using the option {new: true} when you call findOneAndUpdate()?,1529755723.0
Triptcip,"Without seeing your code, I assume with you will have some authentication middleware which is either doing some sort of dB look up or if you're using a jwt, deciding the jwt string and extracting the user data which then sets it in the req.user object. 

You will need to edit this to fetch the updated data.

Hope this helps. Its quite hard to give help without seeing code",1529755921.0
papyhardcore,You have to create a middleware uses for every authenticated routes to fetch your user in database.,1529829475.0
papyhardcore,You have to create a middleware uses for every authenticated routes to fetch your user in database.,1529829482.0
kgram,"You might want to consider changing the name, since facebook has a pretty popular text-editor called [Draft.js](https://draftjs.org/).",1529748383.0
oddisland,[https://github.com/oddisland/Draft](https://github.com/oddisland/Draft),1529740732.0
notAnotherJSDev,Use [Mongoose](http://mongoosejs.com). There's no real reason to reinvent the wheel here.,1529754593.0
denzoj,Could he not return the object from his helper class and then perform his .save operation?,1529850891.0
yarauuta,"Main difference is in the middleware mechanism.


Express uses callbacks, so middlewares are called separately. finish 1, next, finish 2, next etc.


With Koa the second middleware is awaited inside the first middleware. Finish middleware 1, await  middleware 2 from inside middleware 1, finish middleware 2, await middleware 3 from the inside of middleware 2.


When all middlewares resolve you are going to to back to middleware 1.


The style is different, you have to know what is going on, but in practice it does not change much.



Promises are awesome and you should prefer koa. But consider that express is more mature and has been working really well for many people.


Promises might cause a bit more memory usage, it shouldn't be noticiable.
I might be wrong but i think koa keeps more stuff in memory, since middleware context is maintained until the response is sent, but because it's truly async uses the processor better. I am speculating here, I have no proof.


Edit: [Article I found](https://raygun.com/blog/koa-vs-express-2018/) says koa is faster. You shouldn't trust articles that benchmark node servers with 1 core i7 on a Windows 10 with an Ubuntu VM without refering to memory usage. Usually people like to deploy node servers in nano or micro AWS instances which are not much better than a dedicated raspberry pi 2. I bet that he doesn't even enabled production settings for both of them so that test is worth nothing and should be taken with a mountain of salt. Express has alot more stuff going on than koa, and without production settings it might be doing a lot more things to ease your development experience.
",1529742282.0
,"> but more and more app is going to use koa.  

[I just think this needs some context](https://npm-stat.com/charts.html?package=koa&package=express)",1529771196.0
nothingduploading,koa is newer and supports async/await. Its written by the same guy who wrote express (TJ) before strongloop got a hold of it.,1529735260.0
jkoudys,"My biggest problem with express is one that could be simply solved: the ""next"" callback doesn't return anything. I love mapping custom error codes to http responses, eg a MyAppAuthException should return a 401 if it's not caught. I can do this only by wrapping the express callback directly in something to catch my exceptions. In koa, I can very easily make a middleware that wraps a try/catch around the next, and know that any exceptions (including those from promises) can be caught and mapped. 

Not saying there aren't ways to do this in express (it's an odd bit of pedantry we always see in programming forums), but no good and clean way.

Koa also makes running routes with concurrency a lot nicer, since it's promises all the way down. ",1529797680.0
Dronar,"This is highly subjective. Some prefer Express, others Koa.

There were bigger differences in the past when koa was written with generators and later async/await while express sticked to callbacks. Now express also support async/await. 

The main difference now is how middleware is handled. I find that I write better (cleaner) code in koa as that style fits me better. ",1529748150.0
djslakor,"One of the Koa devs explained this pretty well in a blog post:

[http://jonathanong.github.io/why-you-should-and-shouldnt-use-koa.html](http://jonathanong.github.io/why-you-should-and-shouldnt-use-koa.html)",1530023932.0
,[removed],1529742316.0
ilja903,Mentally it is easier to handle errors in koa. But I have no proof for that. This is coming from my own experience.,1529772659.0
Groady,I chose Koa for [Contentjet](https://contentjet.github.io) as it's similar to how middleware works in Django where it can act on both the request _and_ the response. ,1529806002.0
lesterzone,"The main problem I see ( and this could be just me ) is the 'context'.
Original `http` handler form:

    function handler(request, response){

Express breaks the http handler with the following form:

    function(request, response, next){

It's needed to support middlewares.

And koa?

    function handler(context, next){

Far away from the original http form. And now I (we) need to learn where's the request object, and where are the headers....

That being said, I have used both and quickly get used to both. My preference ? Express.
What I wish? a closure approach.

    function wrap(context){
        return function handler(request, response){
            // access to context from previous middleware. context could looks like: { data, error }
        }
    }",1530224283.0
jeffijoe,"As others have mentioned, Koa is Promise-based while Express is callback-based.

I personally find lots of advantages in the Promise-based approach, primarily easier error-handling (it's just a regular try-catch with await), and also the ability to execute code before _and_ after the ""next"" middleware is completed.

[Here's an article](https://medium.com/netscape/mastering-koa-middleware-f0af6d327a69) that includes a few code samples of patterns implemented in both Express and Koa. It also addresses the common, classic hanging request problem in Express, and why that won't happen in Koa so easily.",1530859872.0
geon,Nicer api. ,1529735663.0
rizlah5,I went from express to koa because its being actively maintained and afaik its by the same dev who also devs express,1529785028.0
jad3d,Do not use koa.  So many more libraries for express without having to figure out how to wrap them and get them working in koa.,1529778342.0
jwalton78,"For secret keys, you want to make sure you use a high quality random source, to make sure your values can't be guessed by a third party.  So my recommendation would be:

    Const crypto = require('crypto');
    crypto.randomBytes(32, (err, buf) => {
        if (err) throw err; 
        const key = buf.toString('hex');
    }

32 bytes is a 256-bit random value, which is pretty much the standard for ""secret key length"" at the moment.",1529715506.0
oorza,"Use a UUID v5 with different namespaces for both IMO.

API Key + secret key is the same thing as username/password, except that they're both machine generated.  Therefore, store the API key in clear text and store the secret key as a secure, salted hash like you would any other password.  
",1529698440.0
notAnotherJSDev,"Mongoose objects support the aggregate function, which you can use to get a sample of size 1 from the database. 

Use `Schema.aggregate({ $sample: {size:1}})`
",1529696971.0
shastacoop13,"I actually just did this. I had a collection of companies where I wanted to first only look through companies with a paymentAmount == 2000 and then get a random company from that array.

`Company.find({'paymentAmount': '2000'}).exec((err, companies) => {`

`var featuredCompany = companies[Math.floor(Math.random()*companies.length)];`

`// Do something with featuredCompany`

`});`

Ninjaedit: I suck at formatting",1529691738.0
sbruchmann,"In your `package.json`file:


    {
      ""scripts"": {
        ""myScript"": ""echo \""I am a custom script\"""",
        ""premyScript"": ""npm install""
      }
    }",1529692293.0
DrVirite,?id[or]=1&id[or]=2,1529696590.0
NobodyMiner,"How about using .split(',')?",1530044719.0
fel1xw,"Thanks for sharing this, I didn‘t had the time until now to have a look into this. 😊 ",1529732244.0
ieatcode,"Google's Cloud Vision, aws rekognition, etc. 

https://dataturks.com/blog/image-moderation-api-comparison.php",1529681408.0
JakeGore,You would need to use machine learning. Try looking at TensorFlow.js,1529685378.0
kishenji,2 mins into it and he is just trying to be funny... ,1529733992.0
akujinhikari,"How about “HTTP Requests: the better way to do it” or “HTTP Requests Done Right” or “The Definitive Way To Do Proper HTTP Requests” instead of “HTTP Requests: I’m assuming you’re (probably) an idiot”? The worst way to get someone to read your article is to insult them with the title, and it’s an endemic that needs to stop. ",1529672016.0
TheCommentAppraiser,Can you raise this as an issue on the Node repo? The developers are very helpful and responsive.,1529660316.0
cyberst0rm,Denounce or throttle,1529638928.0
skaz68,https://www.npmjs.com/package/bottleneck,1529663274.0
adamhighdef,"Net neutrality had nothing to do with rate limiting APIs though? Try contacting sites and asking them about their rate limiting, that way you'll know what you can and can't do. ",1529659474.0
fahq2m8,"> Stack Overflow seems to be lacking in this subject but as the FCC is shredding net neutrality I think that we will be seeing more and more third party APIs institute rate limiting. 

Thank god all those 3rd party sites removed their rate limiting in 2015 when those net neutrality rules were instituted. The internet was complete shit prior to that.",1529645204.0
jgordon615,"The proper answer is ""don't do that"" but since you asked...

You would need to move your Ajax handler above your view renderer and then process the Ajax request first.  

Once it's done, you need to save it's results in a response header or similar construct and then call next() to allow the other handler to render the view and handle the response.

But really.  Don't do that.",1529637005.0
mariotacke,"Of course this can be secure. First and foremost you want to connect to your web socket server with TLS. Once the socket has connected and an authentication token is passed you can exchange messages easily. The authentication is good for the duration of the socket connection. I would stay away from JWTs, ask yourself this: what does JWT offer me in this scenario over other solutions (such as passing username/password, or a session token)? Also, when you do authenticate over web sockets, make sure not to pass your credentials via query string since they can be logged even with TLS (web sockets do not support custom headers). Instead you probably want to implement some sort of authentication scheme that marks your socket authenticated after some initial challenge.

Lastly, why web sockets at all?",1529623271.0
geon,"Since websockets implicitly creates a session in itself, you might not need any other session mechanism.

And of course it can be secure. Well, at least as secure as any framework.
",1529623168.0
SkaterDad,"If you're open to trying `hapi`, I found it really easy to get websockets working with their `nes` library.  Since it's from the hapi team, it integrates nicely with hapi's built-in auth support.  In my case, I use the `hapi-auth-cookie` plugin, which uses encrypted cookies.  `nes` comes with a client library for the browser also, which works well for me so far (and is pretty small).

Links:

https://github.com/hapijs/nes

https://patrick-meier.io/realtime-timeline-with-hapi-js-nes-and-rethinkdb/",1529678294.0
,just use Meteor ,1529647887.0
yeamanz,"What makes you think TypeORM isn't stable? Just because it's on version 0.2.7? Look at other parts of the [project](https://github.com/typeorm/typeorm):

* 2,834 [commits](https://github.com/typeorm/typeorm/commits/master) - many active in the past several days / weeks.
* 176 contributors
* 6,861 stars
* ~13K downloads through NPM weekly

I don't use TypeORM at all, but if I was trying to decide to use it based on the stats given from GitHub, I would definitely give it a shot and trust that the ~6K users will _at least_ keep the project going in the future, if the primary maintainers give up.

A product having a version of 0.X.X doesn't automatically mean it's less stable than 1.X.X. I understand your concern though, especially using [CompoundJS](https://github.com/1602/compound) from an early state (now completely abandoned and we have to maintain it using a fork...).


",1529648908.0
djslakor,Seems like ObjectionJS + Knex is the most recommended hotness outside of Sequelize.,1529933317.0
zenbeni,"TypeOrm is a great ORM for top-down design (migrations and table sync work well, with raw SQL data migrations), you can also do some bottom-up design too as there is a generator library that can generate entities from your actual SQL tables.

The API is quite low level and close to SQL dialect (look at how you fetch tables with joins for instance within querybuilder api or queryrunnner api), so there is no restriction in your query design so far.

For me NestJS is just too good with TypeScript, you have to use this framework. Swagger, authentication and TypeOrm are great, and modules enable to use the same common codebase for defining multiple node servers.",1541590151.0
sandeepsb,Thanks /u/___Grits and /u/ColorsInMyHead for the tip - I'll go ahead and stick with RethinkDB for my solution and play around with Postgres on the side to see what I can benefit from it.,1529607498.0
___Grits,"Any rdbms will work. You can use save hooks to trigger subscriptions of data with sockets if you want real time updates. I personally use mongodb but I keep hearing about Postgres so I’ll be trying that soon on a person project. 

Goodluck!",1529595483.0
ColorsInMyHead,+1 on a noSQL approach. I have a similar use case and leverage Node and Mongo.,1529597315.0
elrodrix,keystoneJS and GatsbyJS,1529595047.0
Groady,"Contentjet is a free open source headless CMS. It's made with React, Node and Postgres. It's relatively _new_ and looking for feedback and contributons. https://contentjet.github.io ",1529712583.0
___Grits,"Keystone.js is what we use. It’s a free and open source mongodb based cms built on express, but I have found success wrapping it in graphql too. Easy to setup, supports cloudinary, s3, db save hooks, and has a decent interface. 

http://keystonejs.com
",1529595012.0
pierreburgy,https://strapi.io,1529603034.0
clickclickboo,"Not really a CMS per se, but a damn good framework  [https://adonisjs.com/](https://adonisjs.com/)",1529612394.0
,[deleted],1529605149.0
ArnaudRinquin,Title got me so confused,1529616930.0
aluisiora,"Does http-proxy do the job?
https://github.com/nodejitsu/node-http-proxy",1529616635.0
mtaon,.gitignore doesn't work if you have already committed the file you want to ignore. Follow [this guide](https://help.github.com/articles/removing-sensitive-data-from-a-repository/) and change your API keys etc. as soon as possible.,1529590850.0
erevoz,"Off the top of my Google:

* https://help.github.com/articles/ignoring-files/
* https://www.atlassian.com/git/tutorials/saving-changes/gitignore",1529589851.0
atredeux,If you have any feedback on why you do or don’t like this library or how you think it could be improved I would appreciate it. ,1529587827.0
FINDarkside,"So what's the point? No one can't have OR in their username? Why not just use prepared statements and you don't need to detect sql injections.

It will probably also block all requests with json bodies, as they contain quotes and = characters. I don't see how this would improve security at all.",1529596954.0
Max_Stern,Probably off topic but I really like their logo lol,1529576329.0
EgoAleSum,There's also oclif (from the Heroku devs): https://blog.heroku.com/open-cli-framework,1529604968.0
OzziePeck,Why would anyone want to remove the  package-lock file?!?! ,1529576486.0
enteleform,"mad salt in this thread... everyone is focusing on the example code instead of the actual topic.

good shit OP 👍",1529634334.0
runvnc,"Listr is cool but you could also just do something like this:

    const spin = require('ora').promise, shell = require('execa').shell;
    const run = async (cmd, msg) => { let pr = shell(cmd); spin(pr, msg); return await pr; }

    (async () => {
      await run('sleep 3','Sleeping..');
      await run('ls -lah','Listing');
      await run('sleep 1', 'Wait..');
    })().catch(console.error);

EDIT: I published it as a (trivial) module. So now you can just:

    const run = require('runspin');
    
    (async () => {
      await run('sleep 3','Sleeping..');
      await run('ls -lah','Listing');
      await run('sleep 1', 'Wait..');
    })().catch(console.error);
",1529630822.0
cowjenga,This CLI app should probably have just been a bash script.,1529595867.0
feature_creep,"beautiful? are we really going back to calling code beautiful again? especially a cli program. calling code beautiful kind of dilutes the word beautiful, the same way calling everything 'epic' really makes the word mean nothing.",1529572980.0
Sacro,http://mongoosejs.com/docs/api.html#query_Query-skip,1529575068.0
pcdinh,Multi-threading support,1529566233.0
DefiantBidet,"just advertising your library that's been around for awhile?  

on a side note i made a queue for Ora messages so you can stack them and pop them at human readable intervals... works for my workflow. ",1529526216.0
godlychaos,"I made a little library to work with ora. It is a scrolling marquee. You give the text input and some config for how fast, how wide etc.

https://www.npmjs.com/package/marquee-ora",1529598921.0
numpad0,Looks better than ￥ spinner,1529555275.0
JoelBesada,"(Crossposting from the JS subreddit)

I had this idea of building a puzzle game that you import as a module and play inside the Node REPL. I hope that you enjoy playing it as much as I enjoyed creating it!",1529512330.0
bdchauvette,"You might be able to use either the `transformResponse` option in the [request config object](https://github.com/axios/axios#request-config), or a [response interceptor](https://github.com/axios/axios#interceptors).

Inside your transform function, you could either use something like [`json-bigint`](https://www.npmjs.com/package/json-bigint) or a custom [`reviver`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter) function with `JSON.parse`.",1529515933.0
echeese,Which API is this?,1529522326.0
gowithflow192,"Put private conversations on the blockchain? No thanks, what if someone cracked the encryption one day?",1529526003.0
bdchauvette,"Your user routing middleware is downstream from the error handling middleware, so the error handling middleware has already run by the time you add errors to the session in the user routes.

Try putting the error handling stuff after the routing middleware, and it should (🤞) work as expected.",1529516962.0
tycooperaow,This extremely helpful!  I was considering studying python to be the foundation for my blockchain since that's the one I am most familiar with.  I see through this article it will in return be a huge asset ,1529553391.0
AlexBV1,"We combined in this article typical approaches of trackoing transactions in Ethereum network, ETH or ERC20 tokens.",1529502823.0
Oceanswave,"They suck because they do the job they were designed to do? Would they suck less if the representation format was Xml or Yaml? What format does the speaker propose to be contained to be used in set cookie headers with session cookies, or does he believe that multiple set-headers should be used to store the data contained in a single token? What about token exchange on non-http based protocols? Cookies are still transmitted in XSS scenarios. How many bytes of overhead do multiple set-cookie headers add to every request between a server and client? Can’t I use a single Session cookie that stores a jwt and 90% of this talk becomes moot?

Right tool for the right job, Jwt isn’t a panacea, but they solve a problem they were meant to solve. If state stored in session cookies is a better solution for a particular scenario, well wonderful, but that doesn’t mean that other solutions suck. I can make similar arguments against cookies vs auth headers....",1529498814.0
akujinhikari,"How is ""jwt"" pronounced like ""jot""? I would think they'd be pronounced more like ""jewt.""

Anyway, he's right about most of those things. I'm not a huge fan of jwt, but there are times when I think it works well, and one of those things is with microservices. My last job had millions of users and hundreds of microservices. Here's a good use case:

You log in and need customer information. That customer information includes things like business information and their customers. We have a microservice for your information, a microservice for your business information, and a microservice for your customers' information. This way, we make a single api call to the auth server, which sends back a temporary jwt that is then sent with the api calls to all three microservices, which they then validate before pinging the database. This is a very large company, and there were constant requests from China (when I say ""constant,"" I mean 80,000 an hour). Implementing jwt curbed that to almost nothing. 

I don't think jwt sucks; I think they are being over-used, and I agree cookies should be used in most cases in regards to session.",1529500937.0
mattdoescsharp,Can I get a tl;dr? There’s no way I’m watching an hour long ramble with a clickbait title about a technology I’ve used and had great success with by some guy I’ve never heard of.,1529530046.0
quizasquizas,The day I waste time on a 53 min rant youtube video is the day I should be put down.,1529568643.0
SomeRandomBuddy,Sweet little self promotion here,1529510645.0
joesb,"Read on Twelve Factor App.

[https://12factor.net/](https://12factor.net/)",1529483283.0
rebelrexx858,"My new microservices ship to a in internal queue which is processed to stdout and rabbitmq where it is consumed by logstash, parsed and sent to elasticsearch",1529494318.0
mmmicahhh,"What if you want to use multiple log files? Alas, there is only one standard output. (This is solvable too, but then your ""No additional configuration is needed"" argument does not hold anymore.)",1529490826.0
MrMZa,"I really enjoy using bunyan. It's a logger library. I'm using it to decouple my logger input from output. I use bunyan methods to log but then I write custom ""streams"" that are wrappers for services like rollbar/sentry, log files or stdout. There is no one-solution fits all. Some servers I written are working in factories without connection to the Internet (local net only) and log files is the only thing I get with an error report. On the other hand, when I use docker I don't need log files as I can just docker logs into container and still use rollbar. Highly recommend this approach.",1529488983.0
1-800-BICYCLE,"Note that using `process.stdout` alone has some pitfalls. When your app crashes, you usually want to log out the error, but if this happens after your process manager closes the output stream, your app will throw an EPIPE error, which can propagate outward to your process manager if it's not equipped to handle it. This usually ends up hiding the true cause of whatever triggered the failure.

tl;dr use `process.stdout`, but be sure to handle `EPIPE` errors on the stream. ",1529495429.0
bardadymchik,"Nobody should stop doing something if it works perfectly (and you should not do). Use what log output is most suited for you. We have mixed log outputs based on log entries. E.g all ERROR events go directly to slack channel and all events are going to CloudWatch. And at the end we are producing json logs.

So choose what logs output suite for your current situation.",1529508515.0
elebrin,Writing your logs to something like Splunk makes more sense to me.,1529493834.0
postmodest,"Logging should be to process.stderr for error and debug logging. Stdout is for output. (Like, node apps that produce output to be consumed by the server; but that’s more a philosophical distinction)

Stderr/stdout directed to files is _synchronous_ and blocking. (Pipes are asynchronous on Unix.)",1529505230.0
MondayMonkey1,"Nah, I've never seen memory pressure on my containers.  If I do, I'll probably just reap older containers after x days. ",1529513010.0
Someoneoldbutnew,"For microservices. Yes. For larger services, no, you'll want to probably use a dedicated logging utility instead of console.log.",1529518093.0
smeijer87,"It's one of the reasons I chose to go with Pino logger.

They don't have any transports included, as they don't believe that's the way to go. Just log to stdout, and filter there before writing to a file or service.

https://github.com/pinojs/pino/blob/master/README.md#transports",1529519822.0
tocreatethings,"What you are proposing here is actually a good practice!

This was discussed some time ago, before kubernetes and serverless. There is some good practices to make your code better at a deploy perspective. IIRC this is related to Heroku and how they improved their host to give a good experience for developers.

Search for [12 Factor Apps](https://12factor.net) ",1529497277.0
sudhakarms,Try swagger codegen. I am using it to generate java client but they do support many langs and frameworks,1529484669.0
Specialjyo,"There is indeed.  

[https://github.com/swagger-api/swagger-js](https://github.com/swagger-api/swagger-js)",1529507595.0
JavaScriptPro,"try-catch would be useful if database.query was throwing some unexpected javascript error, for instance if database was null or undefined, database.query was not a function, etc

In this case though, you don't have a javascript error, you have an error somewhere in your sql logic. So, database.query doesn't fail to execute, it just doesn't return the results you want.",1529462960.0
mohelgamal,"Try/catch is used to catch (which here means display or do something about )  errors, not as a conditional statement. Your code has to return an actual programming error (not a logic error) in order for it catch.

Ideally you shouldn’t have any errors coming out if your code, it is more of a safety mechanism 

An if statement is a conditional statement, where you are telling your computer to do something if a condition is true or something else if it is false. 

Imagine you are doing a login system, if the user type in the wrong username, and you use that wrong username to query the database, the database will return null, which your code may think is a valid response. Consider this example in pseudo code 


Function checkUserExist(username){
  Try {
  Result = database.query(username)

   If (result == null) {
      Return “user doesn’t   

}else{

       Return “user exist”
}

Catch (error) {

  putErrorInlog(error);
  Return ”an error has occurred”

}
}",1529468804.0
mohelgamal,"That is what I referred to as “working backwards” in my reply. This may not be the correct way to put it. 

In a simple app you may be able to get away with putting some conditionals in the catch block. But in JavaScript, and particularly in JavaScript this behavior is more dangerous than a in language like C++ or python. That is because JavaScript can give you “undefined” instead of an error if your variables don’t get filled correctly. If you are working with promises, it can return a promise rejection as a value from your try block. this is how you end up seeing a website saying “hello undefined”. In less forgiving languages your program will error out at the slightest imperfection. 

Sometimes it is beneficial to have a standard response to true errors (such as log the error in the database and then restart the process). This is important if you are using node cluster module to keep your processes alive and working at capacity. It would be helpful if the process can restart itself every time an error occurs. You don’t want the process restarting every time your user type the wrong password. 

",1529477120.0
Max_Stern,"Wait, what? How is nobody talking that try/catch there is a huge mistake???  

    try {
    	setTimeout(function() { 
    		throw new Error(""Error inside callback"") 
    	}, 1000);
    	throw new Error(""Error inside try block"");
    }
    catch(e) {
    	console.log(e.toString());
    }  

It will only `catch` *Error inside try block* and not *Error inside callback*.   
Try/catch in your example code surely is unable to catch any database related errors because they will occur *later*, after your `try` block already executed, that's how asynchronous things work.  
Maybe I misunderstood something but either you use `try/catch` with `async/await` or use Promise `.catch` to correctly handle errors when you use promises.  
  

Edit: just realized that you are not using promises but still, you can't handle errors this way using callbacks. You should handle `err` inside callbacks or switch to promises.",1529492428.0
galkowskit,"You'll have more luck with questions like this on StackOverflow or on r/webdev or even r/javascript. I think r/node is not a great place for ""how to?"" questions and especially on front-end related stuff as Node.js is backend.",1529500296.0
blood_bender,"Well first, `request-promise-native` already returns a Promise, so you don't need to wrap it in another promise. Your code above could be simplified to:

    return request(options).then(x => {
      let response = JSON.parse(x);
      return response.items;
    });

But second, you basically just need to chain the responses together recursively if there's a cursor. 

    // initial request function
    function getData(options) {
      return request(options).then(x => {
        x = JSON.parse(x);
        let response = fetchCursor(x);
        return response.items;
      });
    }

    function fetchCursor(response) {
      // once there is no cursor, return the results
      if (!response.cursor) {
        return response;
      } else {
        return request({uri: response.cursor}).then(x => {
          x = JSON.parse(x);
          // concatenate current items onto previous list
          x.items = response.items.concat(x.items);
          // and pass the full list into the next recursion
          // in case this new response still has another cursor
          return fetchCursor(x);
        });
      }
    }

This will continue making requests with `response.cursor` as the `uri` (or whatever you need to do here), until the response doesn't contain a cursor property, and then return the whole thing. ",1529461120.0
quizasquizas,"Haven't tried out this specific one, but have used a similar approach before;

    async function crawl(opts) {
      let cursor;
      let items = [];
    
      do {
        const { cursor: c, Items } = await request(options);
        cursor = c;
        if (Items) items.push(...Items);
      } while (cursor)
    
      return items;
    }

Something like that.",1529569219.0
hugo__df,"Use supertest, mock your database.

You're testing that your endpoints do what's expected, not how they do it. That means you don't really care that you're using express.setCookie, but that the cookie is actually set (using a header). Writing tests like this will allow you to refactor without changing the tests and you'll be mocking less dependencies.

If something is hard to test like that, then mock it.",1529483794.0
Ramone1234,"I've been part of the testing strategy for a similar setup, and now a few years later we've got over 5000 tests running in under 3 minutes.

\> Yet I recognize that such tests are needlessly hitting lots of third-party libraries (such as express, or mongoose) which have already been tested and which we generally trust.

I think you'll find that this is pretty irrelevant for your goals.  Computers are often quite fast at needlessly doing things a lot.  Yes, how long the tests take to run should be one of your top concerns.  And yes, mocking is usually how people speed up tests, but it brings with it huge complexity, and you end up not knowing about weird integration bugs with the things you're mocking.  I've personally never seen it be useful to mock any database for these reasons and because there are so many things that can go wrong with how your code and the db integrate.

Soooo... Just use a regular local database.  It will be very fast until you get over 1000 tests.  You'll probably have to eventually figure out ways to optimize loading the test data (fixtures).   We put mongo in memory when we hit that point ( [http://edgystuff.tumblr.com/post/49304254688/how-to-use-mongodb-as-a-pure-in-memory-db-redis](http://edgystuff.tumblr.com/post/49304254688/how-to-use-mongodb-as-a-pure-in-memory-db-redis) )  .  If you get over 3000 tests, you should probably start to think about parallelizing them, which can definitely be a pain in the ass.  Don't write tests that depend on other tests (I can't stress this enough).  Congratulations on the successful project though.

As for other network connections, use mitm ( [https://github.com/moll/node-mitm](https://github.com/moll/node-mitm) ) to stop them all (except anything you're actually running in the test env, like mongo).  I still don't like mocking other network connections, so I usually make sure I have a test-mode-only (\`if (process.env.NODE\_ENV === ""testing""){...\`) behaviour for them that fakes out production behavior.  This works well if I'm faking out an extremely small interface (databases have huge interface surface areas so it doesn't work well for them).  We also occasionally use sinon  ( [http://sinonjs.org/](http://sinonjs.org/) )  successfully, but like I say, most mocking for us seems unnecessary and a little over-academic.  Wrap your network dependencies so they just have the interfaces that you need for your app and use the wrapper everywhere.  That wrapper will be much easier to fake/mock.

Testing over http is extremely fast.  It's so fast that for the first few thousand tests, we never even reused the app instance or the express server.  We just shut it down and started a whole new instance for every test.  So definitely test over http -- it's closest to the real world.  After you write a few tests, you'll figure out how to DRY them up a bit too (but don't go too far with DRY in tests... it gets counterproductive pretty fast ).  We used a library like supertest ( [https://www.npmjs.com/package/supertest](https://www.npmjs.com/package/supertest)  ) for testing over http, though probably now with async/await you can get away with just using whatever libraries you like for http and assertions.

I would definitely not test everything over http though.  You should architect your app so you can also test the internals directly.  If you architect so that http (including permissions, error handling, and response rendering) is handled by an extremely thin layer (often called controllers), you can have another layer (usually called the model layer) that handles all your business logic.  You can/should test these models directly and more extensively.  The http/controller tests should just be used to ensure that your model methods are getting correctly.

The biggest mistake I see in architecting apps like these is people using a CRUD library like mongoose for a model layer and then putting the business logic (there's always more than just CRUD) in the controllers instead.  This makes the business logic harder to test and harder to reuse.   

There's generally no good reason to mock the model layer or database in any tests.   In my experience, it just makes life harder.  For that reason I'd recommend just using mocha.  You shouldn't need the mocking support of jest.

Damn... you made me write a blog post.",1529486203.0
rotharius,"Testing strategy depends on your application and platform needs.

My objects and functions are unit tested, integrations between units and between layers are integration tested and use cases are tested end-to-end. Sometimes I add contract testing to verify that the API is implemented as specified (i.e. when Swagger/OpenAPI is used).

Regarding the quantity, I let the Agile Test Pyramid be my guide. 

Unit tests are easy to write and cheap to run, so most of my tests are unit tests. I need to know I can trust my building blocks.

Integration tests are more difficult to write and slightly slower, but are crucial to verify interactions between units, components, services or layers. So I write enough of those. Do my building blocks fit on top of eachother?

End-to-end tests are slow but can be written as executable documentation of use-cases with examples. I tend to write these for happy paths and some very specific error paths that come up down the road. Does the thing I build with my building blocks behave like it should? 

For unit tests and integration tests I use a test runner like Mocha, AVA or Jest and an assertion library like Chai. For end-to-end tests, I use cucumber for gherkin support and Nightmare or Cyprus (or, if you must, Selenium) for browser automation.",1529485216.0
EgoAleSum,"I think what you're looking for is the ""OAuth 2.0 client credentials flow"" for the v2 endpoint of Azure AD (which is what Microsoft Graph APIs use for authentication). Does this link help? https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols-oauth-client-creds 

(Interesting how the documentation for Microsoft Graph is under developer.microsoft.com, while Azure AD is under docs.microsoft.com...)",1529470180.0
lenswipe,Can I assume that your end goal is to get a feed of events from a calendar owned by a user?,1529458585.0
slynglen,Use graph https://developer.microsoft.com/en-us/graph/docs/concepts/overview,1529470381.0
bdaniel_1,I am doing something similar. I would just like to know how to view multiple user calendars through the Calendar API. I can view just the user (user of the application) calendar but I would like to access multiple outlook calendars. I have created a few dummy accounts to help test it out. Any help would be extremely helpful. Thanks.,1544052329.0
calsosta,"Just went through this and I couldn't find a path that did not go through OAuth.  I just wanted Server to Server like you but ended up just doing the OAuth route and then abandoning the whole project anyways.

Happy to share a full example if you want it.",1529461121.0
reprehenderitinvol,"LoopBack springs to mind. I'm not a fan of the heavily object-oriented nature of it, but it looks like you might be.",1529451636.0
ccleary00,"Just to make sure, are you waiting for the promise to resolve?

Could also be that the Heroku scheduler ends the process rather quickly for some reason, or there is an error you’re not catching.",1529448701.0
Almatrass,"The cookies are stored in the user's browser, not in the HTML code. The browser can then make requests with this cookie data in the request header. 
For using this with session store, I use MySQL, but for mongo you can use this https://github.com/jdesboeufs/connect-mongo ",1529449485.0
geon,"Since you ask about next(), I’m guessing you use Express. You can use https://www.npmjs.com/package/express-session.  Just access the session property on the req object. 

By default it uses a simple memmory store, but there are lots of database store implementations. ",1529474240.0
keeto,"Set an expiration for the redis key (check out the [EXPIRE](https://redis.io/commands/expire) and [EXPIREAT](https://redis.io/commands/expireat) commands). 

You then will need to add heartbeat functionality to the client (ping/pong). When the client responds, reset the expiration timer. 

While not “real-time,” this solution would allow you to clean up dead data in redis even if your node server crashed. ",1529431434.0
mattdoescsharp,"I’m not sure I can answer your question entirely but I can try to help with some of the choices you’re making. 

First, if you use a master process and the master dies, what happens then? If your master can work as a cluster, that would be the way to do it. Services like Kafka use a Zookeeper to perform management like this.

You can also evaluate just how important it is to update that list if the worker dies. If the users are all disconnected, I would guess they would all try to reconnect to the room. On a connection you could (from the worker) try to query all the clients in the room and determine who is still there and update the list like that.

It really depends on your use case though. A scaleable master process would likely be the best and simplest solution.

Just something else to consider is that socket.io does rather poorly in a cluster. You need to use plugins to manage sticky sessions for it to work correctly as a result of their handshake implementation.",1529431512.0
kapv89,"I might be wrong, but I think you are approaching the problem incorrectly(cos I tried to do something similar several years back). I think you'd benefit from looking into socket.io ""rooms"" https://socket.io/docs/rooms-and-namespaces/
",1529559431.0
x7C3,"Instead of putting the tokens in the database, I'd probably chuck them in Redis for faster access. However ...

JWT tokens are stateless by nature, and you can't really invalidate individual tokens. You can invalidate all of them (via changing JWT secret key), or none. I don't recommend that, unless you like pissing off all your users.

What I do recommend is using short JWT lifetimes (via `exp` claim), or going back to sessions, as it has logout/invalidation/more already in place.",1529429115.0
FarishKash,I was hoping that a stand against easy backend would include a discussion on security practices since so many tutorials avoid this.  ,1529444995.0
,This is an ad not a blog post,1529447247.0
wrobbinz,"I'm currently looking to rewrite a simple back-end I've created with adonisJS and leaning heavily towards Hapi. What drew me to AdonisJS was that it makes a lot of decisions for you. Does anyone have experience with hapi-pal and hapi in general? It seems to be a well supported, modern back-end and hapi-pal seems to provide that structure I'm looking for.",1529434969.0
quizasquizas,"YEAH!

\`\`\`async/await\`\`\`, \`\`\`npm audit\`\`\`, \`\`\`npm outdated\`\`\` etc. make things more reachable.

Not everyone can be a dev! Tell them how it is, guys!

All these kids think they can trample on my lawn...",1529569950.0
ConfuciusBateman,"Stop using emojis, fucking hell it comes across as so immature and unprofessional. ",1529428137.0
shouper_douper,"using the documentation on http://expressjs.com/en/api.html#req.get 
You can use something as follows:
req.get('Content-Type');
// => ""text/plain""
Replace Content-Type with header name to get value. You should be setting your header values in your app constructor. Hope that helps. ",1529419388.0
DROWE859,"Check out zeit/pkg I use it to bundle a desktop webserver for Windows and Mac. 

I’m also using forever-monitor in my bundle. It’s not quite a .pkg but it should be a launchable app for ya. ",1529417380.0
codearoni,2011 called and wants their blog post back,1529465344.0
OzziePeck,"Everyone on this subreddit has already been convinced of using NodeJS and doesn’t need further convincing. Mods this is spam pls do a remove. 


EDIT: lol convicted ",1529483278.0
pazursky,Try https://nodeschool.io/ I think it's one of the best tutorial tools I've stumbled upon online when it comes to programming skills. You will have to come up with solutions to more and more complex problems and check it using included tests. It covers great number of typical node use-cases,1529424260.0
Jeffdango,"One of the first free tutorials I did was on MDN. [Express / Node Tutorial.](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs) 

There was still a lot to learn, but it did get me familiar with some of the terminology and basics.",1529414211.0
aiispassw98,"I think learning basics from online tutorials is enough to understand official API documentation. Also, when I was reading ""Web development with express and nodejs"" , I found it a useful resource to learn nodejs fundamentals and practical cases of nodejs (like forking, clusters and http req, res objects). In the fact, this book is trying to teach the reader about the expressjs framework.

Book on google books:
https://books.google.be/books/about/Web_Development_with_Node_and_Express.html?id=t7bjBgAAQBAJ&redir_esc=y&hl=en

For online resources I recommend tutorialspoint (which I think is not completed enough) and the official documents of nodejs itself. 
Considering nodejs is a feature extended version of JS running on V8 engine (maybe on a server) I recommend you to focus on these provided features and capabilities of nodejs. To learn these internals I suggest you checking medium.com out.",1529404016.0
fyzbo,"You don't know JS! book series.  Node is just JavaScript after all.

Link: https://github.com/getify/You-Dont-Know-JS",1529437604.0
BehindTheMath,"Assuming [this](https://github.com/nospaceships/node-net-snmp) is the package you're referring to, the docs don't mention promises at all, which means it does not support promises out of the box.

You can promisify the methods using Node's util.promisify, or a 3rd party library, or wrap the function call in your own promise. ",1529364798.0
CoMassa,"where can I get my first node, Sorry I know its totally unrelated ?

thanks   ",1529385363.0
mmatiasn,"So if you run a loop of console.log, sooner or later you will run out of memory?",1529357625.0
NetOperatorWibby,Well shit,1529364245.0
naruchan,That is a really good thing to know and it explains a memory issue I was having sporadically. Thanks for the heads-up!,1529383370.0
digitalz0mbie,Jesus Christ.,1529375064.0
1-800-BICYCLE,Nothing a transpiler can't fix. ,1529364657.0
VanHoutte1337,"Well that sucks, should we avoid using console.log in production?

Are there any best practices for logging output?",1529389196.0
newTwiffy,So using stuff like [morgan](https://www.npmjs.com/package/morgan) or some othere logger is bad ?? should we write it to log file ??,1529415751.0
turkish_gold,"Huh, that actually explains why my dev machine has been crashing during debugging sessions with memory issues.",1529392888.0
boxxa,I just had like 4 bug lightbulbs go off in my head after reading this and why they may have been happening. ,1529410159.0
Equality7_2521_,"Wow, hopefully I keep this in my memory until this is fixed. I was always logging to a text file, but If i was feeling lazy that day I would just console.log(). Great find OP.",1529420110.0
maelfyn,Okay... how about console.info ??,1529422086.0
hallcyon11,console.log(‘meh’),1529377354.0
oorza,"Console.log code should be elided by the compiler when you make a production build.  And if you're doing deployments without babel/flow/typescript, they should be guarded by a `__DEVEL__` variable or something similar.  Production logs should be sent over the wire to wherever they're being consumed (ELK, loggly, AWS, Sentry, whatever) or to the log files directly.  Stuff like fluentd is a cancer that only serves to enable and encourage bad practice that should never have gone through code review in the first place (logging to stdout in production).

Do things the right way and this isn't a problem.  Take it as a kick in the pants to fix an area of code that was probably lacking.  Implement something like Winston or Bunyan and use the capacities they give you (log levels) to write much more comprehensive and useful logs.

/log czar rant ",1529429831.0
ndboost,"> Is it possible to make our homepage the MEAN stack landing page without changing the URLs of our Wordpress site url structure and negatively affecting our SEO?

Not easily, no. Easiest way is uour blog should be at `blog.example.com` and you should update all of the links. The harder way is you could technically throw nginx or apache2 in front of the mean stack and blog, setup a conditional `proxy_pass` for your MEAN stack for `/` and everything else goes to WordPress. you'd need to figure out the right `location` tags in nginx though.",1529345147.0
,[deleted],1529358338.0
gieter,Read the error message. It says what is wrong. ,1529345483.0
bagpuss_org,"Instead of appending the port to the IP address with a comma, add it to the connection object as port: 14831 (so your host becomes host: '151.80.119.227').

The error message ""Failed to connect to 151.80.119.227,14831:1433 - getaddrinfo ENOTFOUND 151.80.119.227,14831"" is telling you that it is trying the default port of 1433, and is parsing your host as a domain. ",1529357672.0
DrVirite,Grunt and coffee script? 2013 called ,1529331410.0
SomeRandomBuddy,"I’ll take “straight out of 2012” for 1000, Alex ",1529352096.0
oorza,"You probably need special software to rewrite the wav header: http://www.topherlee.com/software/pcm-tut-wavformat.html

",1529331643.0
BehindTheMath,"You need a one line description of what this does, and what it's comparable to. ""Node framework"" is much too generic, and I'm still not sure what it is. After digging through the docs, it looks like it's an MVC framework / ORM? ",1529331084.0
segphault,"The total npm install footprint is 168 packages. If that's ""ultra-light"" I'd hate to see what you would consider to be heavy.",1529362716.0
openodeio,how does it compare vs sails.js ? ,1529362923.0
OzziePeck,"You need to go over the website content. Some parts just look like they were rushed. Is the website on GitHub?


For example: 

Code more efficiently, don’t loose anymore time in architecture and start in a snap a clean & modern Node.js back-end architecture. And it’s free...

Would be better as: 

Cut the hassle, half the architecture decisions, and deploy clean and efficient code fast. 


Haven’t had much time to think it over and may end up editing it later to better suit. But yeah, it’s definitely an improvement. Things like this really put me off.

I like the website a lot though! When I get to class I’ll write up a rewrite of all the text then email it to you? ",1529483365.0
Jake_Jeremy,The URL doesn't even work lol,1529342365.0
cgijoe_jhuckaby,Spam.,1529349673.0
sotimting,Please ban this user.,1529380751.0
seriousPsycho,looks awesome. Any url or GitHub?,1529310979.0
demalteb,"May I suggest that you rename it, ASAP, to avoid any possible legal troubles?",1529311386.0
tux_greyhat,What did you use for authentication?,1529320894.0
warpedspoon,what main libraries are you using for front end and back end? ,1529349743.0
tapu_buoy,Cann you please write a blog or share Github repo for this please I really want to work and play around with it. Especially Passport startegies was a headache in my last practice,1529349976.0
zkochan,"You could also learn from [mastodon](https://mastodon.social/about). Maybe eventually even contribute to it: [https://github.com/tootsuite/mastodon](https://github.com/tootsuite/mastodon)

It is an open-source, decentralized twitter alternative.",1529354645.0
zedX2321,"Nice job! If you want to expand on it, maybe look into implementing ActivityPub. Then users of your software could interact with users on other ActivityPub implementations.

https://www.w3.org/TR/activitypub/ <-- spec

https://activitypub.rocks/ <-- explainer site",1529350192.0
redditandom,"That's cool, but why ?

EDIT : I'm not criticizing or anything, just wondering.",1529314039.0
TaxExempt,"If you'd like to turn it into an Ethereum Dapp, I can help you with that.",1529337335.0
Nverno,"I found this post that may be relevant to the problem you are having: [https://stackoverflow.com/questions/49334643/syntax-error-invalid-or-unexpected-token-running-a-script-with-node-js](https://stackoverflow.com/questions/49334643/syntax-error-invalid-or-unexpected-token-running-a-script-with-node-js)

The beginning of your file may still have the BOM characters for some reason.",1529298124.0
coverslide,"It might be what you're editing it in. If you're using something for documents such as word that won't work. You need something that writes plaintext like Notepad, or better, Notepad++, Visual Studio Code or Atom.",1529296214.0
shreeshkatyayan,"As per your edit, seems you're going in correct direction. Ping in case you're stuck",1529299496.0
ellisgl,Wireshark can help sniff traffic ,1529279875.0
BehindTheMath,You can look at the Network tab in Dev Tools to see the requests that the site makes. ,1529280703.0
Equality7_2521_,"Define ""relevant""

I watched a Udemy course (one with Andrew Mead and Rob Percival) and lightly coded along which gave me an idea on how it's practically used. Then I got my first web development job making a booking/billing system for a client and rather than using php like I did with other projects and app competitions I thought I'd dive in right away and did the job with node, express, and stripe. 

Making an application that you designed yourself with Node gives you 10x the experience than what you would get with just intensely following along with pre-made applications you copy off Udemy courses.

After that project I thought I was decent enough with Node and really liked it compared to PHP, so I started going to this subreddit regularly and am currently reading ""Mastering Node (Second Edition)"" and am really getting into the Design Philosophy surroudning Node and realizing mistakes I made previously. There are a lot of concepts about Node that aren't emphasized properly in Udemy and Udemy-esque courses. 

You need to emphasize true Modularity, know exactly how the Event Loop works and how to refrain from blocking it, leverage asynchronous concepts wherever possible, using streams and diverting processes, etc.

I'm sure I'm just touching the surface too, there's alot to learn with Node",1529275055.0
tamalweb,"Build some actual applications like twitter, reddit clone, blogs etc and then you have some relevant skills to get a gig.",1529305927.0
mohelgamal,If you know JavaScript. Try following an express server tutorial that includes some database integration like mongo. The rest is details ,1529269580.0
seriousPsycho,I am following Programming with Mosh video lectures. They are quite good as a beginner level,1529324713.0
feature_creep,did this in 2002 so i could watch shows with my gf/LDR.,1529293210.0
jeremiaha99,Use weebly bro,1529352655.0
ELlisDe,"If your artists are signed by Roc Nation why can't they just get exclusive promotion on Tidal? Why would anyone want to download and join an entire streaming service for just 2 artists? Do you know how to build a customer base? Do you know keeping solid bitrates and server prices are a complex dance and balance? Something this big would cost millions and tons of extremely knowledgeable developers.  You also need a competent business entity controlling and marketing it, as well as a legal team to not get sued or overshadowed by other platforms...actually scratch all that. You can just use wix and have your own spotify by tommorow if you use their grooveshark template. /s",1529352805.0
SafetyMoose22,"Nice vision and market research. How much experience have you had with nodejs?

You are asking a very broad question. If you had a more narrow question someone might be able to help eg. “what payment processors should I use?”

Glad to help but no one here is likely going tell you all the details to make a streaming/eCommerce platform from scratch. 

",1529299083.0
mitchitized,"Why aren’t you taking advantage of first-class lambda support for python and the bajillion* audio libraries available? Maybe you’re using the least supported tool for the wrong job.

* technical term

I love me some node but sometimes you’re not looking at a nail 🤓",1529249283.0
musketeer925,I recommend shelling out to ffmpeg to do the heavy lifting.,1529276135.0
aiispassw98,"ffmpeg libraries provided for nodejs might be useful. I used them to modify videos (codec, size, fps, ratios, etc). 
I think ffmpeg features audio modification mechanisms too. (I'm sure about format converting you seeking for)
Check for fluent ffmpeg on github. (Node library)",1529404307.0
redtarmac,"Never worked with Cassandra but my guess is that you're running into a pooling problem. Your code in the loop is executing all at the same time and it's possible you have only 2 connections in your database pool vs the number of times you're executing the insert statement. 

You should wait for the previous insert statement to finish before executing the next one. I'd look at something like Promise.each or async/await. ",1529248372.0
one_happy_guy,Can you add an await to the insert call? I think the other poster is right that you're likely exhausting your connection pool. Adding await will keep the loop from continuing until each insert is complete. ,1529251237.0
raleighpoint,what cassandra client are you using? it probably has a batch insert mechanism which you should use instead.,1529251362.0
psayre23,Look into async Iterators. It is pretty close to what you are trying to do. I spent a couple weekends building something similar to this project and async Iterators cleans up the api considerably. ,1529250569.0
gngeorgiev,Your JavaScript style is weird AF.,1529249478.0
ritwik787,"Hey I am new to nodejs and trying to build a small project. I am using async http calls from my android app to my node API that uses express.js

Can you explain in brief what is this CAF so I can try to integrate this.",1529248900.0
andvgal,"Sorry for jumping in, but cancellation and much more has been already solved by FutoIn AsyncSteps: https://futoin.org/docs/asyncsteps/ - it's as fast as native async/await. It has been alternative for Promises even before their standartization.

It is also both ways interoperable with Promises (and native async/await): https://futoin.org/docs/asyncsteps/interop/#es6-promise-interoperation

URL access is provided by handy request module wrapper: https://futoin.org/docs/miscjs/asyncsteps-request/",1529299166.0
Meloshannon,What scares me more is that lotus domino is still alive,1529249047.0
aust1nz,"Node can be used for pretty much anything. It's most popular as a REST-style API used with front-end frameworks like React/Angular/Vue (which is what singe-page web app means). 

Good project management and ecommerce tools are complicated because of their requirements, but they're no more complicated in Node than in other languages/frameworks. Node's single-threaded status doesn't come into play as an issue unless you're beginning to scale an application. A single single-threaded server running Node will still be able to handle a lot of requests, but there are various strategies to handle growth to multiple servers which are used widely. ",1529241339.0
gejustin,"Honestly, it can really be used for anything you want to write in JavaScript that doesn't depend on the browser. You do get access to other APIs that don't exist in a browser though - filesystem, etc.

Personally, I've used it for everything from simple scripts that read and write files, simple web servers, and libraries to rest APIs, complex automation and command line tools.

For web apps in particular, it's generally used as server or API backend. A lot of times because the client and server are both written in JS, you can share code between them too.",1529241873.0
PM_ME_A_WEBSITE_IDEA,"I'm confused about the second last point about comparing objects. Any time you compare two objects, it's by memory address by my understanding. In what scenario would you need to do a deep compare? And in that case, how is that JavaScript's fault? Isn't that how most languages handle it? How else should it be handled?",1529244255.0
,[deleted],1529248150.0
kyranadept,"Doing `const { printName } = logger;` is asking for it.

As for `const myNewObj = myObj;
myNewObj.hasGoatee = true;`, this is worse than what the author suggests. `Const` is not const in JS; it should be used only for numbers.",1529237154.0
node_emperor,I've got no ideas atm but jesus those domains are bad.,1529236185.0
Max_Stern,"Why .com lol  
There are so many TLDs that you can find something better and all of these in your list are bad.  
Hint: be actually creative, it's not required to bring common words and phrases into domain name. ",1529242141.0
node_emperor,meanify.io is available and sounds ok,1529247328.0
ncgreco1440,"You'd think at least go the hipster route with a .co or .io TLD

:P",1529243329.0
sniddunc,I mean... MEAN? Angry? Angrycoder.net? No? Okay.,1529245842.0
illyrianHero,"Just bought 101node.com Thanks,nah just kidding but it looks cool so jrru and get it",1529236222.0
FengShuiAvenger,"JWTs are signed by an identity provider and typically have a set of claims you can read from the token, (subject, email, expiry etc). One big win for JWTs is that validating a JWT doesn’t require a database lookup, the trade off is it is difficult to revoke tokens, instead you typically wait for them to expire, (so best practice is to have short expiry times). You also need to provide a flow for your client to retrieve a new token after expiry. If you are implementing Single Sign On with a identity provider using OpenID Connect/OAuth,( hint, most of them), then you have to support JWTs. So yeah, there is a lot that has to be implemented. On the flip side, if you role your own non-oauth system, there is a greater chance you’ll mess the design up and create a security vulnerability.",1529241030.0
ylorenzana,"https://news.ycombinator.com/item?id=16157002 I got a lot of the info from this thread, specifically from the comments of ‘tptacek’. The first comment links to another thread that elaborates on why JWTs are a bad standard",1529243940.0
tocreatethings,"Can you share your thoughts against JWT? Got curious. As far as I know if you do the JWT thing right this is the best approach.

About the difference of what you are describing and JWT is that JWT does not require a database access to check if the user is authenticated.",1529230717.0
Sanguistuus,"I've been researching this a bit myself and here's what I've come up with...  

Basic Auth over TLS is the most prevalent and easiest stateless way to perform authentication for ReSTful endpoints.  Basic Auth's downside though is that you have to send the credentials with each request.  That downside can be mitigated by adding in a cookie and session, but then of course you're breaking statelessness of ReST, which may or may not be an issue for you.  A stateless [CSRF token](https://insidethecpu.files.wordpress.com/2013/09/encrypted-token-pattern.pdf) could be used in lieu of or in conjunction with cookie/session to defend against cross-site request forgery.  User generated (and revoked) API keys could also be used in conjunction with Basic Auth.

Another popular option is to use OAuth2 which of course isn't stateless but adds in access control features.",1529265519.0
chabv,"Use mozilla client-sessions - https://github.com/mozilla/node-client-sessions
You can easily check the cookie on every request. If the token expired, then simply send a 403. 
in express that would be before all routes app.all(checkAuthentication) maybe",1529221954.0
ciraka,"You can check [https://github.com/jedireza/frame](https://github.com/jedireza/frame) if you want a detailed auth. system. 

Another package to check: [https://github.com/trailsjs/sails-permissions](https://github.com/trailsjs/sails-permissions)

Passport is also great. It is very popular and so much example.

I am using my custom code on top of Hapi framework (because I love control and my project are not that big). ",1529179461.0
jsdfkljdsafdsu980p,Previously I have used Passport but on my next project I am thinking I will do JWT instead. ,1529264643.0
geon,I'm mostly using either oidc-client ( https://github.com/IdentityModel/oidc-client-js ) or plain basic access authentication ( https://en.wikipedia.org/wiki/Basic_access_authentication ) over https.,1529180616.0
BehindTheMath,"In the past I've used Passport, but for my last project I used Firebase Auth, which makes things much simpler, since they handle most of the workflow, and it's free. ",1529203744.0
tocreatethings,"You can use the chrome debugger with your node projects 

Star your app with: node —inspect-brk your-file.js
Than, on chrome, go to chrome://inspect 

Hope it helps ",1529185497.0
ImperfectTactic,"An easy debug method, while it does have its drawbacks (particularly around concurrency debugging, lack of breakpoints etc) is to stick in some logging and watch the log output as your system processes the request to see if it's doing what you think it's doing.

Connecting a debugger to your system can be more effective (allowing you to step through the processing of the code), but is often a bit more of a hassle.

If you've not got them already, maybe try adding unit tests around the functionality. ",1529168802.0
pragmaticpi,"I didn't look at the code right now but as far as I can tell your app in hanging, it just dont know where to go. Check again your middlewares, maybe you are not calling next on any one middleware which leading for the app to not know where to go. ",1529168081.0
ugizashinje,With VS Code you can debug your sources from node\_modules/ express included. ,1529183905.0
mattcalhoun,You can try running `DEBUG=express:* node index.js` which will add lots of debugging goodness to the console output.,1529445295.0
luxtabula,"Very nicely done. That would drive me crazy, though.",1529179603.0
KenRmk,I've been wanting to to this for a while and we finally got the needed api since v0.60. Try it out [https://www.npmjs.com/package/rollup-plugin-notify](https://www.npmjs.com/package/rollup-plugin-notify),1529163105.0
woodyalukatdat,Nice👍,1529171146.0
Max_Stern,What is your use case for this? ,1529168773.0
HaykoKoryun,"Nice work. I setup something similar for our team, albeit it's not a plugin. We have three build targets from the same source using C like directives via the plugin jscc so depending on which file causes a rebuild, bundle generation could take from half a second to several seconds. So we show notifications for build start, end and errors. To top it off we run our node app inside a container, but build the source outside only restarting the node app when files relevant to it change. ",1529175435.0
RinoDrummer,I think you should change the font for the notification description in a Monospace font.,1529164424.0
warpedspoon,I would never use this but it's really cool. ,1529186389.0
ThrapYT,How to make this work in linux?,1529187661.0
80mph,That looks cool! Will try it out. Thank you.,1529231126.0
Prison__Mike_,"Okay, but why?",1529168888.0
Nibl33t,What sublime theme are you using?,1529179138.0
Sethu_Senthil,"Rip, I'm going to get a thousand of those now 
",1529182597.0
sinefine,how is this done?,1529208351.0
DevChache,Looks great!,1529238917.0
Str4yfromthep4th,If u need this you have serious problems with how you are working.,1529209499.0
cfitking,"Awesome!
What method/packages did you end up using?",1529163499.0
sniddunc,"Congrats! I remember how great it felt  when I first got one working with node. Coming from PHP, it had quite a learning curve. Nice job.",1529161037.0
NetOperatorWibby,"It’s like you leveled up! It does feel great man, keep going!",1529179067.0
TheIncorrigible1,"Execution policies are a PowerShell thing, not cmd..",1529147234.0
user3961,"I got around this (without admin) by renaming npm to npm5 and running ‘npm5 —upgrade npm’ or whatever it was

Edit: and deleting npm.cmd et al",1529223715.0
nothingduploading,express,1529138189.0
_Wolfbyte,Learned nodejs few days ago and i have to say express is nice ;),1529144632.0
RedditorFor8Years,Can't go wrong with Express,1529152750.0
PerfectOrphan31,"Express is the community favorite, and you will easily be able to find a lot of good tutorials using it and help if you get stuck. Once you get the idea of middleware down, it's pretty easy to use.

Hapi is more of a configuration framework that uses plugins to do a lot of what Express handles with middleware. Interesting framework, no doubt, but not the one for me.

Koa, as mentioned above, is the spiritual successor to Express, and made by the same team. However, I find it's documentation to be a bit lacking, though the one itself is much smaller as it's a minimum framework with little to no extras without adding middleware yourself. Where Express has a built in router, Koa needs the Koa-router package to do the same idea. 

All this being said, I'll give you the same advice that was given to me, try them all out and find what you like. Personally, and as many of the comments say, Express is my favorite to work with.",1529156054.0
OF_Shervin,Express has more community support but you can take a look at Koa Framework what created by express team,1529141381.0
cannapCH,"you can also give [https://adonisjs.com/](https://adonisjs.com/)  its a framework for Nodejs like Laravel for php a try  
or [https://mono.js.org](https://mono.js.org) based on express   
maybe [https://serverjs.io/](https://serverjs.io/) also based on express :P",1529186707.0
vosper1,"All of this time you've spent trying to avoid Electron and if you'd just did it in Electron yoi'd have finished the project already ;)

BTW 400-800mb for VS Code isn't that bad for an IDE. I regularly see Webstorm and PyCharm using 1gb or more.

Also, your app is going to be idle as soon as Minecraft is launched, right? So it'll get paged out of RAM by the OS, don't worry about it too much. 

(Oh and go with  Electron, not NW. NW has lost its momentum to Electron)",1529138162.0
OF_Shervin,Nice question,1529136500.0
notlmn,"Well actually, the thing that you are asking for (what every web developer is asking for) doesn't exist!

(At least not yet!)",1529138239.0
Parasomnopolis,"I've recently been writing a desktop app with node.js that lives in the system tray and the GUI is just a webpage. It's pretty lightweight.

I used [node-systray](https://github.com/zaaack/node-systray) for the system tray and [express](https://expressjs.com/) for the server and [pkg](https://github.com/zeit/pkg) to package it up into an single executable.

Or alternatively, if you just need a simple gui, instead of a web server, you could use libui: https://github.com/parro-it/libui-node. 

More stuff here: https://github.com/styfle/awesome-desktop-js

For launching Minecraft you could use the child-process api to launch the jar from node: https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html",1529140313.0
lulzmachine,"C# and wpf is pretty easy. Java and swing pretty easy, but does have a certain look. Qt is a really nice framework for this. No, not node-qt, just qt. It's c++ but you'll probably just have to learn a little bit 

Also I have to add that your expectations on the learning time for most of these things seems unrealistic. If you just stick to one of the ones I've mentioned and follow through, you can finish the project ",1529147342.0
bjames105,"If you are having trouble finding resources for C# dealing with basics and interface, Bob Tabor has a video series on the Channel 9 website. It would be Windows 10 apps. I think if you subscribe to the free Visual Studio Dev Essentials program you get free Xamarin training too. Otherwise I found Microsoft Virtual Academy to have loads of resources and their documentation is top notch with usage examples, all you could ask for. ",1529151506.0
thedomham,"As you stated that you want to learn Java anyway to write Minecraft mods, I'd suggest you take another look at JavaFX. It's a mature UI framework that looks nice out of the box and lets you declare your layout in an xml format and supports css styling. If you don't bundle a JRE, the size of your application will be tiny. ",1529142610.0
RyanTheAllmighty,"I've been going through the same thinking myself for the next iteration of ATLauncher so I can see some of the same concerns I've had.

Some recent projects trying to tackle Electron have come out recently, so might be worth looking into them.

- https://github.com/mimecorg/vuido
- https://github.com/kusti8/proton-native

They both claim to do away with Chromium and be more lightweight, but not tried them myself personally.",1529152678.0
MasterMorality,Build it in unity. ,1529161000.0
Strum355,"Go isnt designed for UIs so you including it here is kinda senseless. It solves a different class of problems that nodejs simply cant compete with (web backend, concurrency). UI is not one of those things that its currently viable for. However, Go has a lot of 3rd party libs so your point there is false.

Don't choose C# if you want this to work perfectly on all systems. While c# support has improved, its still very much a windows language

C++ is an inherently difficult language in this day and age, especially coming from a beginners/simple language like JS where you dont have pointers etc.",1529141050.0
dejws,I don't have response for your question. I just wanted to ask: have you checked react native for desktop projects? Can they be used to solve your problems somehow?,1529140920.0
Pringelman,"Might be a stupid question...but can't you just automatically close the launcher once the Minecraft process was launched? Is there a reason to keep it running in the background?

I'm not too familiar with the purpose of Minecraft launchers but surely you can start the electron app, do the I/O work, launch the java process and then just exit? ",1529141913.0
BehindTheMath,"Look into Proton. It uses native UI components, so although you can't make fancy UIs like webpages, it should be much lighter if that's all you need. ",1529203175.0
BTMPL,Are you trying to implement a singleton pattern?,1529094768.0
jimwards17,"I’m not sure if I’m understanding your code but are you making sure to initialize the class first before you call the static method? 

Edit: are you requiring the module you’re exporting where you are trying to call the static method?",1529094428.0
TwiNighty,"Short version: That is not a single quote `'` but a [vertical tilde](https://www.fileformat.info/info/unicode/char/2e2f/index.htm) `ⸯ` (U+2E2F).

----

Long version:This test is there because ES5 allows a vertical tilde as the first character of an identifier, but ES2015 (aka ES6) disallows it.

###ES5

In ES5.1, [section 7.6](http://ecma-international.org/ecma-262/5.1/#sec-7.6) of the spec allows identifiers to start with a character in the ""Modifier Letter"" Unicode category. [UAX #44](http://www.unicode.org/reports/tr44/tr44-22.html), which defines the Unicode Character Database (UCD) specifies that the ""Modifier Letter"" is a General Category, and that 
the General Category of each character can be found in [UnicodeData.txt](https://www.unicode.org/Public/11.0.0/ucd/UnicodeData.txt) in the UCD, which lists the General Category of the vertical tilde as ""Lm"", abbreviation of ""Modifier Letter"". So, `ⸯ` is a valid identifier in ES5.1.

###ES2015

In ES2015, [section 11.6](https://www.ecma-international.org/ecma-262/6.0/#sec-names-and-keywords) of the spec only allows identifiers to start with a code point with the ""ID_Start"" property. Going back to UAX #44, the code points with the ""ID_Start"" property can be found listed in [DerivedCoreProperties.txt](https://www.unicode.org/Public/11.0.0/ucd/DerivedCoreProperties.txt) in the UCD. And the vertical tilde is **not** listed as having the ""ID_Start"" property. So, `ⸯ` is an invalid identifier in ES2015.",1529116813.0
allelseistaken,"Although short, I'm surprised the feature can be subject of a whole book.",1529109774.0
caboosesw,25 bucks ...... ?,1529208649.0
aust1nz,"You'd handle this on the React side. Essentially, when a user tries to access a protected route in Rails, you'd pass them along to the Login component and save the route that the user tried to access in a variable. When login is successful, instead of sending them to a default logged-in page, you'll send them to the page that they attempted to access.",1529075011.0
courtewing,"This is cool.

FYI: If you start your example code blocks with ```js, it'll do JS syntax highlighting on github.",1529094065.0
sangupta637,"I haven't gone through that but it looks great by the face of it. I always wanted something like that for express since most tutorials just scratch the basics. Truly greaful! Is there something like this for node? I always want to understand how it works under the hood, especially how http work in node. ",1529074081.0
,[deleted],1529077787.0
Oceanswave,Seems to require more setup than ts-node,1529123574.0
iBlacky,I was literally thinking about making something like this earlier today. I’ll definitely look at this,1529357217.0
apatheorist,"Step 1: Don't.

Step 2: Keep doing Step 1.

EDIT: No one's downvoting that I can tell, but I want to be clear I'm not against node itself.",1529074724.0
isakdev,"This isn't a node question.
",1529056346.0
ccleary00,"I think the way you can go about this would be the same as with pretty much any language/stack - a combination of learning from/pairing with people that know the system, adding to documentation, and offering to work on ""side projects.""

Depending on your current workload, all the above might add to it but it could be worth it.  

For example, you could ask to sit with one of the more knowledgeable developers on your team for even just like 30 min say once a week to get more familiar with things.  You can even make inroads/get on their good side but figuring out how you can help make their job easier for them. Most developers are pretty vocal about their complaints with crappy processes, crappy tools, etc. so you'll likely find something you can help automate or take over for them and still be learning at the same time.

If many people don't know how your existing production system works, a great way to both learn about it and become a member of the club is to volunteer to add documentation.  You could either talk to your manager about wanting to dedicate like an hour a week or whatever to help with this and explain how it will help both you and the company.  You could even ask them if there is some more experienced dev you could pair up with to work on this/learn from.  And documenting code can be helpful for sure, but there's only so much you'll learn from that if your goal is to learn more about the whole architecture, so make sure you get to learn about and document things at that level.  No one likes documentation, so someone volunteering to do it will likely be received with a warm welcome.

Lastly, if your plate is full of mostly front end stuff, similar to the above you might have to volunteer to work on the backend stuff as a ""side of desk"" activity.  If your company does agile or sprints or something of the sort see if you can offer to work on some small Node-related story during that sprint even if it's just after hours or during lunch. 

",1529064795.0
joao-louis,"Begin with reading the official documentation and going through basic tutorials. Then try to build your knowledge on top of these tutorials/documentation and check your company's configurations to see if you can understand something.
Test your skills at home.
You can also try to ask to some colleague to explain to you something about the webpack configuration (something that is difficult to find on the internet).",1529052118.0
hobgoblinmanchild,[knex](https://knexjs.org/) is really nice - it sits somewhere between an ORM and raw queries. It also handles migrations which is handy.,1529040592.0
StoneCypher,"Everyone I know who has switched from raw SQL to an ORM has switched back eventually

Usually in just a few months

Whatever choice you make, make sure it's reversible",1529069747.0
,[TypeORM](http://typeorm.io/#/),1529039366.0
hicksyfern,"https://www.npmjs.com/package/postgres-migrations

This for migrations. It just gets them right, and no gaffing about trying to learn some bizarre JS-to-SQL syntax when you just want to write ALTER TABLE ADD COLUMN!",1529054666.0
vakhio,"https://node-postgres.com    
https://github.com/Elva/postgresql-query",1529047287.0
-LOLOCAUST-,What didn't you like about sequelize?,1529059875.0
SureGas0,knex for sure ! ,1529048399.0
DinckelMan,"Knex is my personal favorite. Pretty easy to use, returns async code, and in case you would want to replace your db later all the code will pretty much stay the same",1529052268.0
caboosesw,"This topic comes up regularly but I've never seen anyone give opinions on why they like Knex, bookshelf etc.  I use pg-promise but that was mainly because a.  It worked and b.  It seemed the quickest path for me to build some queries and go

Would love to hear more about Knex or objective from a pragmatic standpoint (cuts down on code, less maintenance, less errors, easier to modify later, better performance... whatever)

I need to read their docs to get their opinions ... but chime in from your experience!",1529059350.0
aust1nz,"When this topic comes up, I hear a lot of alternatives to Sequelize, but Sequelize seems to be the most popular ORM for Node apps using relational databases, and there are some benefits in its popularity and wide applicability.

For example, it can handle uniqueness constraints without much configuration. Objection has a clean and spare API, but partially because of that it doesn't cleanly handle uniqueness constraints. So if a user tries to sign up twice with the same email, Objection will send back a database error by default, or you can spend some time [integrating a plugin](https://github.com/seegno/objection-unique).

I don't think Sequelize is perfect, but I think it's the most plug-and-play ready of the node ORMs, which is often an important requirement for a new project where you don't want to spend a bunch of time on data-model configuration.",1529064695.0
mobydikc,"Massive.js is made specifically for postgres, simple and powerful. ",1529071067.0
octaw,massive.js is another db interface.,1529088085.0
funkdr42,"https://www.npmjs.com/package/bigal

It's a postgres specific alternative to waterline (sails.js)",1529062710.0
ppafford,maybe [https://github.com/vitaly-t/pg-promise](https://github.com/vitaly-t/pg-promise),1529074223.0
cazzer548,"[Postgraphile](https://www.graphile.org/) will take care of you while API layer, then you only need to manage your schema.",1529079016.0
Suchit_kv,"Use bookshelf.js framework,
http://bookshelfjs.org/
",1529081477.0
kapv89,"I see a lot of people suggesting knex.js over here. I think all those people would love working with my ORM, tabel, http://tabel.fractaltech.in (currently supports only PostgreSQL)

ORMs impose a constrain on you. The code-level-class <-> db-table mapping. This mapping is the cause of the well known effect called ""Object-relational impedance mismatch"". When you think about it, the ORM model breaks down as soon as you realise that the result-set of a relational-db is ""dynamically typed"". IE, you can combine columns from different tables into a result-set, you can selectively pick a few columns from a result set, you can introduce aggregates into your results, etc. And you need to do this more often than not in any non-trivial application. And as soon as you do this, you are stepping outside of the abstraction provided by your favourite ORM(in other words, the ORM is failing you). A ""db-table"" is NOT a ""type"".

However, the functionalities provided by ORMs are hard to ignore. Especially the ones for working with relations. The relation abstractions I learnt with Laravel(which are same as the ones implemented by Bookshelf, Objection etc) work really well in capturing the relationships in a business domain.

What if we were to keep the good parts of the ORM, ie, the relationships, and ditch the parts of it that don't really work, ie: code-level-class <-> db-table mapping?

This is the trade-off that tabel ORM makes. And having built several complex software with it, I think that this is the right trade-off to make.",1529153519.0
wlaurance,"I think that Vitaly's pg-promise, [https://github.com/vitaly-t/pg-promise](https://github.com/vitaly-t/pg-promise), is the most promising library for node/postgres ;). Vitaly is very active on this repository. He's very nice and responsive. Checkout this latest question that somebody posted to the repository, [https://github.com/vitaly-t/pg-promise/issues/529](https://github.com/vitaly-t/pg-promise/issues/529). I feel like this level of helpfulness is a rare attribute of an open source maintainer these days.

FWIW, I have 3 tutorials on Node and Postgres that are great examples of using the simple pg driver and sql libraries.

\- [https://www.wlaurance.com/2014/04/Using-PostgreSQL-and-Node/](https://www.wlaurance.com/2014/04/Using-PostgreSQL-and-Node/) This post focuses on [**node-postgres**](https://github.com/brianc/node-postgres)**,** [**node-sql**](https://github.com/brianc/node-sql)**,** [**node-db-migrate**](https://github.com/kunklejr/node-db-migrate)**, and** [**node-any-db-transaction**](https://github.com/grncdr/node-any-db-transaction#api)

\- [https://www.wlaurance.com/2016/03/node.js-postgresql-example/](https://www.wlaurance.com/2016/03/node.js-postgresql-example/) Is a VERY specific walkthrough where you build a tool for a bookstore.

\- [https://www.wlaurance.com/2016/09/node.js-postgresql-transactions-and-query-examples/](https://www.wlaurance.com/2016/09/node.js-postgresql-transactions-and-query-examples/) is a more advanced version of the first.

Happy to answer any questions as well. will @ wlaurance.com",1532456375.0
U4-EA,Sorted - I wasn't targeting the config file. Bit of a no-brainer but I am tired...,1529021373.0
mrm8488,"I think the problem is not with mongoose. It seems you are treating an async function as a sync one. When you call the function an async operation is scheduled to be done so you have to await it in your client code.

Try this:

`async function getNextUPC(seqName){
const counter = await Counter.findOneAndUpdate({...}).exec();
return counter.sequence_value;
}`

// Call the function

`async function () {
const sequenceValue = await getNextUPC(seqName);
}`


",1529019463.0
mattboutet,"Shameless self-promotion: I wrote this bit of boilerplate that might be useful, currently it uses PostgreSQL, but it'd be easy enough to tweak to use MySQL instead.
https://github.com/mattboutet/user-pal

Uses hapi with Objection",1529002306.0
Enjoyz1001,"Hi, I'm new around these parts but I've been around NodeJS long enought to say, with respect, in spite of it's issues, it can be as enterprisey or hobbyish as you want it to be. 

I really did enjoy this read, so much so I'm planning on giving it another read when I get some time.

http://mherman.org/blog/2017/08/23/building-a-restful-api-with-koa-and-postgres/

You will build a node application supported by postgres (or a DB that you choose) that will be driven by the koa api package.


",1529002643.0
OzziePeck,Page isn’t loading for starters. ,1529008663.0
tryCatchEmAll,"Very interesting! I did not know the answer, and went searching.

It turns out that there is another queue just for promises! Parts of promises executing are considered microtasks; microtasks are not put into the nextTick queue. They are put into a separate microtask queue, and this queue is emptied before the event loop pulls the next item from the nextTick queue.

This blog post has a cool illustration for native promises & the event loop: [link](https://jsblog.insiderattack.net/promises-next-ticks-and-immediates-nodejs-event-loop-part-3-9226cbe7a6aa)

This blog post has a really nice explanation and code example: [link](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)

> Microtasks are usually scheduled for things that should happen straight after the currently executing script, such as reacting to a batch of actions, or to make something async without taking the penalty of a whole new task. The microtask queue is processed after callbacks as long as no other JavaScript is mid-execution, and at the end of  each task. Any additional microtasks queued during microtasks are added to the end of the queue and also  processed. Microtasks include mutation observer callbacks, and as in the above example, promise callbacks.


**Bonus**

And as always, this opens up a new (and unlikely) way to shoot yourself in the foot! It is possible to starve out the event loop by overloading it with promises: [link](https://gist.github.com/jesstelford/bbb30b983bddaa6e5fef2eb867d37678)",1529032513.0
repinpepin,I find the the official Node documentation on event loop rather poor. But maybe it's just me not smart enough to being able to grasp it properly. Meh.,1529052877.0
ScabusaurusRex,"What follows is my opinion only:

* The popularity of Node and Mongo seemed to have risen at the same time.

* This popularity was also at the same time as a backlash against SQL systems, and saw the rise of many NoSQL data stores.

* Mongo objects are JSON, so... simple to move from Javascript to JSON and back.

* I think when you say ""why everyone [is] recommend[ing]"" to use Mongo, what you're seeing is articles that never seem to die, don't necessarily indicate best practices, but are good for what they're meant for: getting you up and running quickly.  They will never get you to 100000 concurrent users, but that's not at all what they're meant to do.  The authors of many of these articles understand that the complexity of a large system meant to handle massive scale is too much to deal w/ in a simple article.  But, if you just pop up a MEAN stack, away you go, and it's simple to write an article for that.

* Mongo is good for simplicity, ease of startup, and a really low level of knowledge to get in and going.  It's easy to change ""schemas"" because ... there aren't any in a traditional sense.

* mySQL comes with a greater level of complexity.  Want to change your schema?  Well... you've got some work migrating data, etc., and it simply takes more upfront knowledge.

With respect to making a user system, literally any database can handle it.  If it's just for a fun project, try a bunch out.  If it's for work, my suggestion is PostgreSQL and as someone else said, don't look back.  But... I can't help feeling like, if it's for work, you're unable to make this decision in an educated fashion before you've used at least several of the possibilities.",1528988862.0
hair-plug-assassin,"> Why should I use mongoDB and not mysql with node?

You shouldn't. Consider Postgres.",1528987922.0
brett0,"The answer really depends on how you plan on architecting your solution: one monolithic service or microservices, and how you plan on querying the data. 

SQL and noSQL can both be a good choice, depending on what your use case is. 

For some background, I currently work for a large profitable privately owned company valued at over $300 million and we use SQL (MSSQL, MySQL, MariaDB) and noSQL (MongoDB, Elasticsearch, DynamoDB, Redis) and probably others I’ve not personally been involved with. 

Over the past 4 years we’ve been involved in an undertaking to re-write 15 year old legacy code to follow current best practices. This means slowly replacing small parts of the legacy monolithic code piece by piece with microservices (in NodeJS and Golang).

I won’t go into the pros and cons of microservices and why the decision was made. We’ve built over 100 of them and they have allowed us to move/build very quickly. 

One of the principles of microservice architecture is decentralization and that’s important when we think about database design. Microservices must not share databases with each other - each microservice has its own database, its own data.  If a microservice needs data, it either has the data sent to it or requests the data from another microservice. 

We’ve found our microservice’s database structures/schema to be very simple: one table/collection and no relationships for each microservice with a database. 

We haven’t found a need for MySQL (yet) in our new architecture as we’ve found MongoDB, Redis, DynamoDB and Elasticsearch to be highly reliable and performant.  Millions of records in each database and hundreds of thousands of requests per minute. Our legacy code still relies heavily on SQL with a number of full-time database administrators. 

We wouldn’t exclude MySQL because it has proven itself very reliable and performant over it’s long history. MySQL client libraries are robust and battle tested.  AWS RDS Aurora is very performant too. 

There are people with a strong preference for one SQL flavour over another. I’ve used a number of different flavours (Postgres, MySQL, SQLite, MSSQL) and they all still exist for one reason or another. I prefer MySQL because I’ve not hit any problems with it after using it for over 22 years. 

We have found that schemaless databases, like MongoDB, are much easier to deploy and we can ship code faster than SQL (and Elasticsearch). We haven’t seen any benefits that SQL would provide over NoSQL (yet). If a microservice held data for multiple entities, SQL might be an option but in our microservices this is not the case. 

Elasticsearch has loads more power than SQL’s “where” clauses and we would never consider MySQL for querying/searching.  

An observation I’ve made, most junior and mid-level developers I’ve met have some exposure to NoSQLs but none seem to have any exposure to SQL.  

Regarding the schema vs schemaless argument, where we use MongoDB, we generally enforce a schema in our source code (obviously not on the database itself, unlike conventional SQL), so it’s not entirely schemaless when we look at it as a whole. 

Personal note, I’d be keen to see SQL JSON binary to compare that to MongoDB (or CouchDB) and see pros and cons. 

We can’t really complain about any of the databases we’re using. It really comes down to picking the right one for the job and writing well load-tested code/queries. We initially hit a performance wall with MongoDB until we upgraded to the wired tiger engine - been fine since. 

Although, I haven’t been terribly happy with the wiring up for MongoDB clustering as I t feels like a massive after-thought compared with MySQL /Postgres clustering.  As we’re using MongoDB DaaS, it’s someone else’s problem!!

If you’re writing a monolithic code base, perhaps SQL is the right decision for you. ",1529012645.0
Attila226,"You can use whatever database you like. You should pick the best database for your needs. Some like using Mongo with Node because you can use JSON from top to bottom. Meaning that you don’t have to translate relational data to objects and vice versa. This is just plumbing code that has no other value. There’s lots of other differences between relational databases and NoSQL databases. There are many different types of NoSQL databases, although Mongo might be the most popular. (Mongo is specifically a document database.)

There’s lots of good articles on the pluses and minuses of relational databases versus others.",1528986838.0
jasonwyn,"I personally really like working with Mongo. 

It’s query syntax is brilliant. It’s great for storing lots of JSON documents and when you start diving into its aggregate framework you’ll start getting loads of power and freedom from it. 

There’s plusses and negatives to everything, just pick the right tool for the job. ",1529003333.0
erulabs,"I'm a DBA, and I've worked on some of the more trafficed alexa sites on earth. While I'd personally recommend MariaDB or even better, MariaRocks (really anything backed by RocksDB is the future), there is absolutely nothing wrong with MongoDB. It will easily scale to your needs, far longer than it takes to get some funding in order to hire a DBA/DevOps person to maintain it. Postgres is also a great choice, although I personally do not recommend it for extremely high write-based services (still, same principle applies - it will -easily- scale to the point of being a top 5000 alexa US website, and you can get funding and hire someone to fix it). Uber migrating off Postgres is a fairly good case study (https://eng.uber.com/mysql-migration/).

Go with whatever seems easier / more sane to you. That said, I would absolutely say Mongo would be my _last_ choice. I am currently in the process of migrating off Mongo onto Postgres, and we're seeing dramatic cost decreases and performance increases. If my life was on the line tho, I would trust InnoDB as it has run a huge chunk of the internet for decades, and you can fall over in San Francisco and land on a MySQL sysadmin.

From a node perspective, Mongoose is not excellent in my experience. The `mysql2` and `pg` drivers are excellent, on the other hand. The real tip for me is looking at the companies. Does the vendor survive by consulting services? If so, they're not incentivized _at all_ to make a working product. Mongo and Kafka suffer _terribly_ from this conflict of interest, as did MySQL with Oracle before the MariaDB split.",1529012855.0
EvanCarroll,"Quick history here: there is nothing special Mongo *except* that it was likely the first database to implement a binary JSON store. Now that store is no better than what other alternatives provide, but make note that MariaDB does not yet have a binary JSON store, and MySQL will only get it in version 8. JSON is now in the SQL standard (sql:2016), so in due time all databases will likely provide binary JSON.

Where does this leave Mongo? Pretty much no where. It's useless and will go away soon. Its trick has been replicated. Now you can use JSON schemaless design in most RDBMses (and use the schema when you want -- which should be more often than not), and they're implementing binary json at a fast pace. PostgreSQL has had [JSONB since at least 2014.](https://www.postgresql.org/docs/9.4/static/functions-json.html)

Also, avoid MySQL like the plague. It provides nothing over PostgreSQL except heart ache and misery.",1528988152.0
unflores,"Good question. Based soley on the fact that you are using node.js there is no right answer. Both are supported. I know teams that have succeded with node and both dbs.

Mong is a document store. Queries work a little differently. You could look into that and its inherent strengths and weaknesses for your case if you are interested in having a more solid answer. After you have both mongoose and sequelize that provide pretty nice abstractions for either choice.",1528986992.0
yarauuta,Use NoSQL if your data has weak relations and SQL if otherwise.,1528988147.0
flipperdeflip,Mongo is good if you are too ad-hoc and impatient to deal with relational structures.,1528989372.0
skeliskull,"I would say the only benefit to mongo is bson queries and the fact that it has easy sharding.

Unfortunately it doesn't have transactions though so it's pretty difficult to make a reliable system.",1528997424.0
fahq2m8,"Who in the fuck is still recommending Mongo in 2018? I don't think I have seen a mention that didn't absolutely trash it in years.

MongoDB is a broken toy, MySQL is slightly better. Use PostgreSQL and never look back.

Edit* The very well funded MongoDB PR team has arrived.",1528986852.0
TSkorvan,Use postgres. With binary json you have mongo inside. If you need to store time related data definitely check timescaledb. It's extension for postgres . Now you have 3 databases in one :),1528990586.0
joesb,"Use PostgresQL.

Non-schema DB, like MongoDB will bite you later.  Because when you have data without fixed schema, it's hard to process.

MySQL is like PHP of Relation-Database, just use PostgresQL your data will be more consistent.

Data is the most important part of your business. Your code can be wiped out and you can rewrite it. But if you lose customer's data, no code is gonna help you.",1529007329.0
jpastore,MongoDB it's the snap chat of databases. I like redis as a nosql cache to front it. But mongo is marketing hype and just fucking garbage.,1529014463.0
monsto,"If you're building a personal project or a one-off where you don't expect much traffic, have you tried SQLite? ",1528988281.0
pier25,"Don't use Mongo.

If your data has relationships, which is like 99% of use cases for a DB, a relational DB is a better option.

Since Postgres now has a JSONB type with really good performance it can solve the need for schemaless data.",1528995360.0
timgfx,"You shouldn’t use any of them. My database consists of a file called database.json, it’s really fast!",1529012817.0
Korus1990,"Graphql and postgres has been great for me. Retrieve your queries in a json-like format for easier parsing on the frontend.

I personally won't be touching Mongo or MySQL again, unless I really have to.",1528995060.0
code_barbarian,"You can use whatever database makes sense for your application. I use MongoDB for everything because it has great performance, great tooling, and a well maintained Node.js driver. If you're more comfortable with another database or another database makes much more sense for your use case go for it, but MongoDB is a great default.",1529000566.0
mokeseven7,Oh a concept of user you say? Well that’s certainly more than enough information to make a determination. ,1529004778.0
,"Check out mongoose, specifically for features like [this](http://mongoosejs.com/docs/populate.html)",1529013550.0
irrational_design,"Who is recommending you use mongoDB? Please, do not use mongoDB. If you want to use a non-relational databse, just use the non-relational features of Postgres.

Please, do not use mySQL. Use Postgres. You can thank me later.",1529021300.0
DanFSD,Well the SQL ORMs options are very limited compared with the NoSQL options. One of the most famous is called Sequelize. It does it's job by making it easier to make things work but at the same time is inconceivable that there are some known bugs since 2016 that aren't fixed yet.,1529023057.0
eid-a,it depends on what application ur building...,1529026200.0
ewliang,Lol I always see answers that always say you have to use one and not the other. My answer to you is you should use the one that is best fit for your project requirements. What might work best for someone else might not be the best for you. Good luck! :) Let me know which one you ultimately choose though. ,1529032007.0
rkho,"You should first think about your system's use cases and requirements, and then make a database decision for the scale you expect on day one -- worry about scaling and migrations after you've gained market validation. 

Mongo and MySQL can be valid choices, but they're dependent on your exact use case.",1529039286.0
nikola_derikonjic,"I think if you need to use noSql then only db out here with simple semantic and syntax is [rethinkdb](https://www.rethinkdb.com/). Mongo is just to complicated as far as syntax goes. To query something in array (update), to remove filed and so on. Then bunch of that callbacks and stuff. I am using it on some project that I inherited but it is complete nightmare to use.

&#x200B;

Relation db is always a way to go but it all depends again of complexity of data. As far as i see noSql is always way to go since it gives you more flexibility to wrangle and update data where in relation db you always have to use structure!",1536791571.0
carb0n13,"Node and Mongo became popular at around the same time, so there’s always been a link there. Besides that, Mongo stores documents as JSON, so there’s less work for you to do if you don’t want to use an ORM. That said, I wouldn’t decide my data storage simply based on those criteria.  Decide based on the usual trade offs of NoSQL vs SQL.  If you have highly structured or relational data or if you need transactions, go with a relational database.  If you need automatic sharding, and you don’t have a high need for consistency, consider going with a NoSQL.",1528988040.0
moltar,"Everyone recommends to use MongoDB, because that is what sells in tutorials. But real life is more complex and difficult. MongoDB architecture does not scale well (not the load, but the design decisions).

Arguably, the use case for MongoDB is narrow and limited. But it is so easy to get started with that a lot of people took it and ran with it. But it is a short sighted solution.

If you want to build a user system, use a relational database, like PostgreSQL or MySQL, or even SQLite.",1529004776.0
4_teh_lulz,"Anyone who suggests mongo is basically a fool. This has been become a trend with the advent of all the boot camps. Younger developers are taught mongo first approaches... which is just ridiculous. There are use cases for document stores but if you have to ask then it's very likely your use case doesn't fit into that. 

Edit: should be clear here I'm talking about the mongo evangelists, not the beginners asking naturally beginner questions.",1529011804.0
hunterloftis,"Mongo is common in Node.js because 10gen was strategically smart: they invested in excellent engineers to create a fantastic, well-documented, easy-to-use MongoDB client for node in the early days. That gave them a lot of momentum. As a node developer, you barely had to think about the database, because you could treat it as just a JSON store. This has tradeoffs.

Many people still don't know that you can use JSON natively in Postgres, which of course has a longer track record and relational capabilities. That's my go-to these days, but there's no denying that Mongo made waves with its focus on ease-of-entry and developer experience.",1529004456.0
notlmn,There is a [Cluster API](https://nodejs.org/api/cluster.html) in Node.js.,1528984655.0
CharlesStross,"OP is this your article? If so, for the love of everything readable in the world, [PLEASE OPTIMIZE FOR MOBILE](http://imgur.com/gallery/gqpvtJv).",1528986020.0
codyswann,"I mean, sure, but as soon as he laid out the stack, I knew throughput capacity on either Kinesis or DynamoDB was going to be the break point. 

But, you can calculate that with simple math and know at what rate of requests either component will break. 

Seems like overkill to be, especially since both can be autoscaled with AWS tools.

Other than throughout capacity and account limits, you’re not really going to have to worry about serverless scaling on AWS. ",1528979445.0
felixfbecker,"It's a good idea to do the actual response in a central place, the error handler (like you can define in express), and all other places to propagate errors (that means either throwing them, rejecting a Promise or calling a callback aka `next` with the error, depending on what async pattern they use). This lets you send them in a consistent format to the client, log them to STDERR and/or traces, and use consistent status codes for specific errors (e.g. 400 or 420 for validation errors, 401 for auth errors, etc). In the handler, you can inspect the error to see what kind of response should be send to the client. You can attach arbitrary data to your Error objects. You don't need your own classes to do that, for example you can attach a desired status code to an Error with `throw Object.assign(new Error('FooBar not found'), { status: 404 })`. But classes may help with code organization. In your error handler you would check if the error has a `status` property and if yes, use that as the status code. Attaching the status specifically is a common pattern, see for example the [http-errors](https://www.npmjs.com/package/http-errors) package. Other things you could  put on there is a boolean whether it should be exposed to the client at all (some errors might contain sensitive data), or an error code or name that you define that is also send. Middleware you find on npm will (for good reason) usually not send errors back directly, but callback `next` with the error so you can handle it in your error handler too. ",1528970472.0
notlmn,"When you get an error on a route, you should respond with the respective HTTP status code then and there.

These errors can be raised manually or by the interpreter and the error generating code can be placed inside a try-catch block (which you would be if you are using async-await).

`next()` can be used for handling generic errors like 404s, whereas specific errors with their own error message should be handled at the spot.

If multiple routes can generate the same error, then having a function that contains error handling code should be fine.",1528964773.0
SkaterDad,"I mostly use `hapi`, which has built-in support for the `Boom` library.  You can use `Boom` with other libraries also.  It provides a structured error response object w/ quick methods for the various status codes.

https://github.com/hapijs/boom",1528982214.0
bjpbakker,"Please don’t advice people to choose a license based on these biased questions/answers mappings.

As a developer, if you care about your work in the public domain, please read a bit about the different licenses and form your own opinions.",1528988004.0
hparadiz,Just make a node file export a simple javascript object with your config. It's not a big deal.,1528949217.0
,"constants.js

    module.exports = {
      val1 = 'a',
      val2 = 'b',
    };

app.ts

    const constants = require('./constants');
    constants.val1 // 'a'
    constants.val2 // 'b'

Edit: I forgot the ./ in require",1528953197.0
jawnboye,Why not hard code it? Not necessarily a suggestion but a jumping point to understand what you're trying to do.,1528947046.0
Sythic_,"Heres something basic that should work fine with low IO:

    const fs = require('fs')
    const storefile = 'datastore.json'
    
    let datastore = {}
    try{
    	let filedata = fs.readFileSync(storefile)
    	datastore = JSON.parse(filedata)
    } catch(e){
    	console.warn('failed loading datastore from disk')	
    }
    
    function writeToStore(key, val){
    	datastore[key] = val
    	fs.writeFileSync(storefile, JSON.stringify(datastore))
    }
    
    function readFromStore(key){
    	return datastore[key]
    }    ",1528951403.0
tselatyjr,"Share your code or attempts with us, if you could. :-)",1528975791.0
SkaterDad,"Can you explain why you want the Attendance table to reference the Roster table?

My first instinct would be to make the Attendance table have FK references to students and courses, like the Roster table.  It's basically what you're thinking of doing anyway by deriving a PK on the roster table.

This approach is a bit more flexible, since you can now have students in the attendance log which were not on the roster.  I imagine this would also be easier to create in Sequelize, but I haven't used it.",1528985570.0
BithTree,"Well, over a week later, and I've fixed my issue by migrating to Knex and Objection. Ultimately, I felt too restricted by Sequelize in terms of querying.",1529787704.0
DeepSiderZ,You should use nginx and multiple nodejs apps,1528960041.0
yudiz_bhavin,"Are you using nginx ?? with nginx you can do this, if you wanna build the code in only one node app you should make a specific route for that another domain(forums.example.com) and in nginx you can make multiple server methods so make a one(www.example.com) and reverse proxy it to the your root route of node app and then use another server block with server name forums.example.com and in reverse proxy forward it to the route that you make for forums in your node app.",1528973672.0
kxerr,https://github.com/wilsonpage/express-subdomain-handler,1528938826.0
nimesh118,"Apache can be used like this to route different sub domain on the same domain. When you are running multiple node application or even if its php application you can set different documentRoot in every VirtualHost block for different sub domain.

 <VirtualHost \*:80>

ServerName [domain.com](https://domain.com)

ServerAlias [www.domain.com](https://www.domain.com)

ErrorLog /opt/bitnami/apache2/logs/domain.com-error\_log

CustomLog /opt/bitnami/apache2/logs/domain.com-access\_log"" common

Header set X-Frame-Options ""SAMEORIGIN""

ProxyRequests Off

ProxyPreserveHost On

  	ProxyPass / [http://localhost:4444/](http://localhost:4444/)

  	ProxyPassReverse / [http://localhost:4444/](http://localhost:4444/)

</VirtualHost>

<VirtualHost \*:80>

ServerName [admin.domain.com](https://admin.domain.com)

ServerAlias [www.admin.domain.com](https://www.admin.domain.com)

ErrorLog /opt/bitnami/apache2/logs/admin.domain.com-error\_log

CustomLog /opt/bitnami/apache2/logs/admin.domain.com-access\_log"" common

ProxyRequests Off

ProxyPreserveHost On

  	ProxyPass / [http://localhost:5555/](http://localhost:5555/)

  	ProxyPassReverse / [http://localhost:5555/](http://localhost:5555/)

</VirtualHost>",1529060961.0
hrvstdubs,Usually your web server would have a vhost type block for each server name. ,1528935690.0
tryCatchEmAll,"1. Freak out a little bit about a new responsibility you are taking on.
2. Do it!!

Probably what I would do is add a few pages to the company wiki (if there isn't one, make some shareable google docs) on...

1. how to set up a node environment (locally and in prod)
2. how to debug locally
3. common pitfalls/patterns/ best practices (things you have learned in the past 7 months)
4. If your team is new to javascript, some resources on the event loop / async programming would be useful!

Encourage your team members to update these docs so the whole team can take ownership. Make yourself available for questions/code reviews. You'll probably help each person get set up until they figure it out on their own.

I'm not sure what your team will need in terms of standards, but below are some of mine. Most of my rules center around devOps and how these node programs will be run. I do have a few coding standards though:

1. All code should be autoformatted :)
2. Prevent against sql injection : only use prepared statements when interfacing with the database
3. Do not trust user input /query params. Check them for validity.
4. All processes need to be able to handle crashes gracefully, then exit.
5. (DevOps) How do you run node processes? What will restart crashed processes? (I use pm2)
6. Need a logging strategy (I have daily rotating logs set up, logging at the preferred levels)
7. (DevOps) Don't open publicly accessible endpoints unless you really need to; internal apps should not be publicly accessible!
8. (DevOps) What version of node are you running in prod? Who will update node versions? Who will check the node logs? Who will keep an eye on crashed processes (that can't restart!)?
9. (DevOps) No one is allowed to open ports to the outside for node processes; node programs are accessible behind a reverse proxy only (nginx). Who will maintain the nginx config?


",1528933750.0
from-nibly,This might be quite a leap so maybe just keep this in your back pocket for later. Take a look at typescript. It is amazing what a little type checking and autocomplete gets you. ,1528985595.0
Silveress_Golden,"As with any new tech that you are dealing with:

* Take it slow and small.
* Test test tessssssssssstttttttttttttt.
* Document the fuck out of everything.
* IDE?

**Taking it slow and small**  
Dont take on the big projects all at once, break it into smaller bits and deal with those.  
This also allows you to rollout stuff more often than one bigger project, makes it easier for management to see that you are working and making progress.

**Test everything**  
Test everything to hell and back, no matter how idiot proof ye can make anything nature just creates a better idiot, But you can mitigate a heck of a lot.  
What happens if someone uses ``five`` instead of ``5``? Does it crash the app? Does it log it to file?  
That said logging properly is important to figure out what went wrong.
 

**Document everything**  
Goes without saying is that every environment is different, you need to record both the unusual and mundane parts of it.  
What happens when you leave/are sick/ on holiday/die at your desk from overwork?  
~~[Prepare three envelopes](https://www.reddit.com/r/sysadmin/comments/1l2h4f/a_joke_i_thought_you_would_all_enjoy_after_my/)~~

**IDE**  
I used to do everything on notepad++ but a friend I recommend I check out Webstorm, frankly it has made a huge difference for me, between the amazing syntax highlighting and other stuff it really improved how I work.  
Not overly expensive to buy especially for a business.



****

The first three are not specifically to node.js and the last is only specific in regards to the name of the software but overall those apply to any programming language.",1528932997.0
runvnc,"My suggestions:

* Use npm orgs https://www.npmjs.com/docs/orgs/ to organize and reuse code relevant to your company.  Encourage people to create separate repos and modules for tasks.
* Set up a github/bitbucket/gitlab org.
* Make sure people provide good examples in their module's READMEs.
* Two spaces, not 4 spaces or tabs.
* Node version 10 without `babel` or transpilation.  I used to always use `babel` but now with Node 10 I don't believe the extra features you can get are worth the hassle of transpilation.
* Use `async` functions rather than callbacks or Promises (except for cases where Promises make more sense).  Will make the code cleaner and easier to write.
* Make sure that people have enough time to learn rather than being thrown into the deep end.  Like months.  NodeSchool, Codecademy etc. might help.  Also real projects with you involved a lot to do as much as is needed to help.
* Set up a Travis CI account and expect that there are unit tests at least for things that are easy to test. Create a wiki entry explaining how to set up testing tools or projects.
* Make it easy to get started by creating VPSs or VMs, setting up laptops, or installing and running Docker for people so they have a dev environment ready to go.  Or at least have the wiki include or reference detailed instructions.

A few of these things like npm orgs cost money.  If management refuses to pay the modest fees, they are making a big error.  If they really won't pay, you should pay for it yourself because they are very important and well worth it.  And then keep an eye out for more competent and up-to-date management to somehow materialize..",1528950115.0
monsto,"1. ***Style guide:*** A style guide defines spaces vs tabs, now many spaces, how to format functions and data, when to push to your code repository. [Here's an example.](https://hapijs.com/styleguide) There are others out there, and tbph it doesn't matter which you use or if you write one. But you need one so that anyone can look at any file and navigate it. A style guide also makes IDE/Client a complete non issue. Use notepad if you want so long as you follow the guide.
2. ***Code repository and client:*** I would personally recommend [bitbucket](https://bitbucket.org) for no reason other than I know it well and it ties in VERY well to their desktop client [sourcetree.](https://www.sourcetreeapp.com/) Yes, git is super flexible and somebody is going to shit all over it ""just use the console it's easy"". The client reduces the learning curve for the simple or common tasks.
3. ***Be prepared for costs:*** Grouping people to projects and managing projects on whatever code repo you use will cost money. Getting people up to speed will ***take time*** ( =money). Eventually, there will be a need for a project manager. Point is this: right now it's neat and productive... but as expectations grow, so will the need to organize. Nobody has any idea what costs are going to be in 1wk, 1mo, 1yr, but at some unspecified point in the future, someone is going to have to approve some kind of budget.
4. ***For you personally:*** will you be developing the whatevers AND ALSO be expected to do your original job too? That could lead to long days and unexpected personal logistics... not to mention the indirect pay cut.

Tell you what, man. . . it sounds like you have a good workplace that is willing to look ahead like this and not only allow employees the freedom to do what they need to do, but to head off potential problems at the pass by standardizing before it became a logistical and ***factional*** problem.

I'm betting you'll be giving the tools to make it work. I wish you the best with it.",1528951844.0
Jeffdango,"I have heard that too, I think there is a plug-in for PHPstorm that gives it all the Webstorm functionality. ",1529007460.0
BehindTheMath,/r/forhire,1528933470.0
fyzbo,"Job descriptions always seem long, so to get to the point, the person will get to work with NodeJS extensively.  There will also be a fair amount of React and the opportunity to learn new skills.

Company cares about work life balance, seriously, it's nice.  I get no credit for posting this, just enjoy where I work and want to help in finding new people as we expand.

Ask me anything, I'm currently a programmer at the company and will be completely honest.",1528918039.0
sotimting,This is not a job board.,1528940068.0
tweettranscriberbot,"^The linked tweet was tweeted by [@GridDBCommunity](https://twitter.com/GridDBCommunity) on Jun 13, 2018 17:48:36 UTC (0 Retweets | 0 Favorites)

-------------------------------------------------

The GridDB Node.JS client is now available on GitHub. 



[https://github.com/griddb/nodejs_client](https://github.com/griddb/nodejs_client)



\#Nodejs \#BigData \#NoSQL \#IoT 

[Attached photo](https://pbs.twimg.com/media/DflrFnYV4AEFu3O.jpg:orig) | [imgur Mirror](https://i.imgur.com/u3obBiA.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1528912483.0
jimwards17,"Seriously how does this not include Ryan Dahl?


Especially given his latest presentation:

http://tinyclouds.org/jsconf2018.pdf",1528902631.0
DLabz,I did’t see anyone relevant in this list...,1528921134.0
,"Aw man this is missing a lot of people I really like lol also does brandon eich even node???? (nowadays). i have never seen a library or thing from him, only cool thing about him is he has hired a bunch of devs I really like  lol",1528904249.0
umib0zu,"Why do people think following programmers on Social Media will make you a better programmer? I don't think following Lady Gaga's Instagram will make me a better singer.

I follow the NodeJS channel and it usually filters noise from actual information for me.",1528918588.0
ecares,I have no words. shame on you.,1528904251.0
thickoat,Cool 👍,1528922295.0
stombre,"Add something like that before calling jsontoxml :

`json.map(value => ({ Entry: value }));`",1528902100.0
saltupz,Map your json values in a entry value. Without testing or using the package it makes sense you need somekind of wrapper object in your json too...,1528899240.0
mokeseven7,Just a cursory glance at the makes it seem like you need to use the “parent” / “child” properties of the package api ,1528902061.0
oldyoyoboy,"I am sure I am in the minority, but I use ejs. There is something to just using the same language wherever possible... Do you already know how to do a loop in JS? Then you already know how to do it in ejs.  I have used others, like PUG, handlebars, etc.  I keep coming back to ejs.

Also, I seem to use server side scripting less and less, pushing more and more of my render logic into the client, so I use less scripting... which means I don’t tend to need the features that ejs is lacking.",1528896160.0
geon,"Pug is slow in development mode, since it reads and parses the entire template file from disk on each request. Make sure to enable production mode on your production server, and it will only read and compile the template once. 

If I were to do server side templating today, I would seriously consider jsx and styled-components. Mainly because of how helpful it is to have the templates (including css) typed. I don’t know of any other templating language that supports typescript. ",1528899678.0
illyrianHero,HandlebarsJs,1528909439.0
PrettyWhore,JSX is comfy,1528909340.0
,I prefer [Nunjucks](https://mozilla.github.io/nunjucks/).,1528916851.0
cahva,"Heh I think I’m minority and actually like pug :) When you learn all the bells & whistles (mixins etc.) it’s very productive. I don’t even notice slowness when developing. As one commenter already said, its only slower when NODE_ENV is other than production.

Having said that, personally I only use pug when I need to do stuff in our old product. Pug (or any other) templates are not needed when you do react app and you have one index.html to render :P",1528928190.0
gnarwall19,HandlebarsJS is what I learned as a beginner. It was relatively easy to get started with,1528929585.0
ResponsibleLife,"Performance wise [marko](https://github.com/marko-js/marko).

Although if you need to do some heavy work, can't beat [react](https://github.com/facebook/react/) or similar v-dom alternatives ([vue](https://github.com/vuejs/vue), [preact](https://github.com/developit/preact), [inferno](https://github.com/infernojs/inferno)).",1528894970.0
djslakor,"If you have experience with swig/twig, Mozilla Nunjucks is pretty cool.  It offers a lot of features which you may or may not need.",1528897671.0
martymav,EJS is nice and simple to use.,1528905994.0
commiesupremacy,"WhiskersJS. I think HTML doesn't need abstracting away and whiskers has the features you need, anything more complex should go in js data structures imo.",1528920081.0
kitsunekyo,"depends on your application and requirements

i've used handlebars, ejs and pug. i liked handlebars most for the similarity to plain html with some additional features. ",1528931715.0
raistlinthewiz,nunjucks,1528976364.0
shtanton,"Sounds like you've got pretty far for 2 months, I don't think I was anywhere near there after so short a time.  Though memorising APIs probably isn't the best use of time, after 3 years I still rely on docs for that mostly.  Building real world projects is definitely a good way of learning",1528891642.0
ccleary00,"You didn't mention if you're completely new to programming or not, but either way, that's certainly an impressive amount of topics to have learned over 2 months.  With several of those things (like authentication, unit testing) some developers never really learn, although they absolutely should.  Just glancing over your reddit history it looks like you're pretty devoted to learning this stuff- that's awesome.

I'm going to look at this from a slightly different angle though. I'm going to make the assumption that you're learning the MEAN stack because you're looking to get a job, correct? Whether it's your first dev job or just a new dev job working with MEAN, I think my advice would be the same.

Something I noticed when I was first learning programming was that I felt like I had to learn *all* of it before I could be considered ""good"".  It was easy to fall into the trap of thinking ""as soon as I learn X, Y, and Z I can start applying to jobs"", but of course the field is so big that X, Y and Z quickly becomes X, Y, Z, ZZ, XX, YY, ZZ, YZY, XY, etc.  

When you don't have a ""real world"" barometer from which to measure yourself against, it becomes easy to feel like you're not learning fast enough or don't have enough skills/knowledge.  For me, as soon as I got my first programming job and was working on real world projects, I learned how the ""real"" programming world works and it became much easier to put things in buckets: things I had a good grasp on, things I need to work on, things I didn't even know I needed to learn, things I learned while studying that will have no real world use and I should put aside for now.  For example, I had learned whole API's only to find out that I was only using like half of it when working on production code...

I realize it's kind of hand-wavy to say ""just get a developer job"" since that's much easier said than done but I don't think it would hurt to start looking for one.  (Or a MEAN job, if you already have a job working in another stack.)  IMO you're ""good enough"" to get a job when you get a job, if that makes sense.  

Again, I made quite a few assumptions there about your particular situation, so correct me if any of that is wrong but hopefully this helps.  There's lots of info about impostor syndrome out there but IME the best way to beat that has been to accumulate more real world, working experience (both your own experience as well as anecdotal evidence from others that this can be done).

And one more side note: if you haven't already (but I'm guessing you have), make sure you're building projects to reinforce the material you've been learning and also to build up a portfolio.  Learning is great but useless unless you're building things.",1528892714.0
Hieronymus72,Your description is too thin.,1528886848.0
ThinDescription,"Please help me..
",1528874606.0
alexfey,Yes! You should also consider GraphQL\-yoga ,1528873488.0
benthepoet,I'd go with Apollo Server. Using \`graphql\-tools\` makes it really easy to write out the GraphQL schema using schema language rather than creating in\-code type definitions. Fairly easy to setup resolvers for any property and you can also create custom types (i.e. Date).,1528890985.0
download13,"I like Apollo for it's convenience features built on top of graphql. It does automatic deduplication and caching, among other things, if you use the server and client libraries.",1528911039.0
Personalife,"I'd go with express-graphql - you can define your schemas programmatically. If you need to customize the logic on field parsing or assign a custom resolver to an individual field, you won't be able to with Apollo Server as easily.

Apollo Server uses annotations for things like args, but if you need more flexibility, you'll have to implement your own annotation for it.",1528880935.0
apatheorist,"Progressive Developer: \*looks at totalitarian code_of_conduct.md\*

Progressive Developer: How can I make this worse?",1528876431.0
sotimting,"Please... just, don’t. You likely have good intentions, but the problem here is that such clauses are always far too vague.

For example: You mention that software should not be written to support entities that perpetuate people’s reliance on “addictive” substances. Well guess what? Caffeine is addictive. So I guess no one can write software for Coca-Cola or Pepsi now? This is but one example.",1528888930.0
Soze224,"This pisses me off DAILY. This is not a how to video, this is a WHAT IS video. Google does this with all their tutorials.",1528888131.0
joseym85,I see your point... /s,1528853775.0
ecares,SO MANY FAKE ACCOUNTS. ,1528834727.0
aust1nz,"This is an attempt to profit from [Udemy's referral program](https://www.udemy.com/affiliate/). That's why it links to this [highlyrecommend.gabstore.club](https://highlyrecommend.gabstore.club) URL instead of straight to Udemy.

Not that there's anything wrong with a referral program, but this doesn't feel earned. If you're interested in the course (which is a good set of videos) just google or follow [https://www.udemy.com/the\-complete\-nodejs\-developer\-course\-2/learn/v4/](https://www.udemy.com/the-complete-nodejs-developer-course-2/learn/v4/) for the clean link.",1528854864.0
malikpol,I've just purchased this course and getting started today. Looks really good and detailed so far!,1528831705.0
Silveress_Golden,"Never knew it was from GoDaddy, really love using it but feel slightly dirty now.

Aside from that congrats on making it to 3.0 Winston!  
I have been  planning on refactoring a few old projects so ill see if I can work it in.",1528826332.0
JustOr113,"""createLogger instead of new Logger

this change allowed for a major performance increase due to how prototype functions are optimized.""

Anybody knows why? I thought it *should* be using the new keyword to leverage the prototype optimizations.",1528870788.0
etheraffleGreg,"Think of how much you want to earn, double it, then use that figure to begin negotiations.",1528821540.0
mitche50,"For 1 I would say $200-300, 2 would be dependent on how you were implementing. Do they have a POS system that you’re interfacing with? How do you check manually stored reservations against ones people are placing using the chat bot? What about interfacing with OpenTable or another reservation system? Or is it just a simple email form that’s sent off to someone to handle manually?",1528823678.0
SomeRandomBuddy,Hourly rate * number of hours to complete each phase. ,1528829340.0
maggz29,How long will it take you to develop the app. 25usd *days (I'm a student so this is in no way professional opinion),1528823398.0
just_tech_stuff,"Warning about this website:

They ask can they put a cookie on your machine. If you click no, they do it anyway...",1528828793.0
danhab99,"Mine is on a raspberry pi zero, so.. what's the point?",1528845246.0
ChronSyn,"Zip slip is not a security concern if you have correct permissions in place.

As per the zip spec (https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT) `4.4.17.1 The name of the file, with optional relative path.`

Relative does not assume sub directory, and as such includes '../'. Set your permissions correctly and you won't have to worry about it. The zip spec should be updated to be honest, but until that time, permissions.",1528888022.0
MUDrummer,"Why does you’re process have access to write to any place but the folders you told it to write things to?

Feels like proper folder permissions prevent this from being an issue. 

What a shitty sales pitch. ",1528825396.0
Bumpynuckz,"I built this Vagrant box out of frustration with developing Adonis applications on my Windows machines. I wanted something as close as possible to my production environments, with easy access to important software applications such as MySQL and Redis databases.

I wanted something as simple to get started with as the wonderful [Scotch.box](https://box.scotch.io/), but tailored specifically for working with [AdonisJS](https://adonisjs.com/), an MVC framework for Node.

Realistically, this box would work for any node application that you would like to run on Nginx. Simply make sure that your application is located in the `/var/www/` directory so you can access it locally, and also that it is being served on port 3333. You would need to install any `CLI` tools necessary for your framework of choice within the box itself if you wish to go that route.

Hope you enjoy it! If you have any suggestions or feedback, I'd love to hear from you!",1528819699.0
KristianSakarisson,"I'd recommending following one of the socket.io chat app demo. The documentation is pretty straight-forward and websockets are a super useful technology that will find a use-case in most applications. 

https://socket.io/get-started/chat/",1528815857.0
kvadd,"Check out this guy: https://www.youtube.com/watch?v=0oXYLzuucwE

He has a tutorial there on creating a REST API with Node.",1528820760.0
DinckelMan,"Before jumping into node, I would suggest learning plain Javascript first. If you have not done that yet, udemy had pretty great courses for that. If you have, the other recommendations in here are pretty good 😉",1528842362.0
ominersh,"I don’t know the limit to how many packages you can add. However, I have never had to worry about that. My opinion on this is that if you can avoid adding a new package, avoid it. If the task/function is simple enough and can be implemented using built-in packages, do it. Having many dependencies mean you might (1) end up with multiple versions of sub dependencies (2) depend on the package maintainers for patches to bugs or security issues (3) increase maintain cost (4) get hit hard when someone rage deletes his repository which happens to be your 10-level-depth dependency.",1528810259.0
BLOZ_UP,"The drawback is mainly keeping track of all of them, and keeping them up-to-date without breaking your usage of them.

Consider: https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/

If it's simple, do it yourself. For more complex libraries, Express, i18n, etc., a quality library is awesome.",1528814934.0
codearoni,"    npm install everything

sit back and watch your disk cry!",1528847878.0
Chr0noN,Thankyou all for replying.,1528815872.0
ominersh,"How often should you update your Node.js? \- Speaking from a backend perspective, I would say very often. On average, Node adopts new V8 engine version within 2 months when there are new major features introduced. These features mean new performance improvement (e.g. Garbage Collector, Optimizing Compiler, etc.) or supports to new Javascript features (e.g. BigInt, etc.). Node itself also issue minor versions for bug fixing and security issue patching.  You should follow V8 blog ([https://v8project.blogspot.com/](https://v8project.blogspot.com/)) for major improvements and see when they are available in Node by checking Releases log regularly.

Should up update Node.js in your Angular project? \- Not necessary unless there are significant updates to npm itself. You want to leverage new bug fixes or new features. Consider you use npm for package managementFor example, the new npm package version locking seems to be on par with yarn and better in some cases.",1528814244.0
jwalton78,It's good to be subscribed to https://groups.google.com/forum/m/#!forum/nodejs-sec.  Then you at least get notifications about the really important updates.,1528850237.0
flipperdeflip,"You can't do a single global because your server processes a bunch of requests concurrently. The only single thing for a single request is the req object itself. So yea, you'll to have to pass it around.

And I wouldn't pass the whole req.headers, there is stuff in there not needed by the microservices (and possibly harmful). You should make a bit of code that extracts the relevant headers and assigns them to the microservice request that need them.

> but passing around req object everywhere also just doesn't feel right.

Watch out with gut feels on the micro level and don't be afraid of a bit of boilerplate if it means maintaining purity. It is all too easy to compromise a straight effective solution with code cosmetics like this.",1528814576.0
BLOZ_UP,"If your server needs the request object, and your API needs the request object... what's wrong with just passing the request object?",1528814598.0
ccleary00,"This is a fairly large topic, but to get you started with something to search for:

If you want to test from the UI all the way down and back, you can use something like NightwatchJS, Cypress.io, or Testcafe to script a flow from the user’s perspective. So something like, user clicks a button, it should take user to new page, page should display results from server, and so on.

You’ll likely need to account for the same concerns as you would with unit tests when it comes to running against databases or other services that you don’t want data in. Things you would want to use a test database for or use stubs/mocks for.

Does that help point you in the right direction? Let me know if something is not clear.",1528818591.0
nothingduploading,Rebirthdb baby!,1528784794.0
Genereux2018,"Nice features, but please add more support for Oracle features",1528786666.0
geon,"There is no point in using a database if you already have the data in a json file. 

But I can’t really understand your question. Do you ask how to fetch json? You don’t need jQuery for that. Just use fech(). 

Or if you have difficulties with getting the promise-based api to work (no shame in that, we have all been newbs), you can just make it a regular js file instead of json, and store it in a global variable. Simple. ",1528790333.0
SparserLogic,"So, normally when we have more data than we can send directly to the client we instead put it on a web server.

For instance you could deploy a small Express server that reads the \`json\` file when it starts and listens for REST queries against its contents. From there your clientside JS just does a \`fetch()\` for the subset of the data it needs at any given time.

If your data \*edit\* eventually \*edit\* needs to change or it gets too big to load into memory all at once you can start looking at some DB options like MySQL, Postgres, or a NoSQL option like MongoDB. There's also options like [Meteor](https://www.meteor.com/) that will let you span the client and server with your data by synchronizing it automatically for you.

Personally, these days I'm using [Firebase's SaaS DB](https://firebase.google.com/docs/firestore/) for quicker development.",1528814067.0
EvanCarroll,"> From ES2015, TCO was supposed to be included. It looks like it was implemented, however not as a standard feature - and then later removed again. Anyone know what happened to it? You can see the status here: https://node.green/


[The blog post linked in the issue mentioned](https://v8project.blogspot.com/2016/04/es6-es7-and-beyond.html) by /r/more_sidechain makes it clear the logic,

> For these reasons, the V8 team strongly support denoting proper tail calls by special syntax. There is a pending TC39 proposal called syntactic tail calls to specify this behavior, co-championed by committee members from Mozilla and Microsoft. We have implemented and staged proper tail calls as specified in ES6 and started implementing syntactic tail calls as specified in the new proposal. The V8 team plans to resolve the issue at the next TC39 meeting before shipping implicit proper tail calls or syntactic tail calls by default. You can test out each version in the meantime by using the V8 flags --harmony-tailcalls and --harmony-explicit-tailcalls.


Essentially, they don't want tail calls because of the practical drawbacks with debugging. Instead they want an explicit syntax. This is actually pretty popular in language design. The vast majority of languages give a work-around for avoiding stack overflow, rather than implementing true TCO.

In order to that, you'd have something like 

    function a () {
      // code;
      $var ? return 1; goto $a;
    }

That may look ugly, but it makes it clear when called that you don't want a new stackframe from the code, and it does in fact make error-handling a lot nicer. Of course it makes it a pita to implement a functional library where you may call a function a million times, or you may call it once.

You can see [their TC-39 proposal here](https://github.com/tc39/proposal-ptc-syntax). Apparently, it's cool to call a GOTO `continue`, because JavaScript?",1528776986.0
Oceanswave,"Not many JS engines do, a few have implemented it however.

http://kangax.github.io/compat-table/es6/

This github issue explains it best:

https://github.com/kangax/compat-table/issues/819

Edit:
There doesn’t seem to be a solid logical reason — though some blame the possibility of confusing stack traces with PTC.

Some discussion of that from the standards guys:

https://github.com/tc39/proposal-ptc-syntax/issues/22

Edit2:

This SO answer sums it up pretty concisely:
https://stackoverflow.com/questions/42788139/es6-tail-recursion-optimisation-stack-overflow/47207534

Edit3:

Damnit windows.

https://github.com/WebAssembly/meetings/blob/master/2017/CG-07.md#tail-call",1528776685.0
more_sidechain,Interesting... it looks like it was removed from V8. That'd explain why it's not in Node. https://bugs.chromium.org/p/v8/issues/detail?id=4698#c69,1528773164.0
r893kew_,"Until the Syntactic Tail Calls Proposal is implemented, here is an implementation of fast explicit tail calls, including mutual recursion, with today's JavaScript: [article](http://glat.info/fext/), [GitHub repo](https://github.com/glathoud/fext)",1535565907.0
sucucho,"I’m not sure about google cloud or node. But I can tell you that you can deploy a MySQL PaaS database and consume it from the public endpoint. 

Talking about azure, you can deploy a web app to host your site and a MySQL PaaS database and also configure it so you consume your database from within a network and not over the public endpoint. 

Hope this helps you a little. ",1528773578.0
mokeseven7,"Heroku and mlab are what you can use for a hobby project with little to no money. If it ever becomes a real thing, AWS all the way. ",1528829887.0
jhartin,"You should check out AWS related tutorials. I use NodeJS exclusively with DynamoDB and never looked back  at SQL again. If you can master this article you can build anything.

https://hackernoon.com/create-a-serverless-rest-api-with-node-js-aws-lambda-dynamodb-api-gateway-f08e7111fd16",1528775459.0
thequargy,I've hosted a number of nodeJS applications on Heroku. I've never used mySQL there (I prefer mongoDB/mlab) but they definitely support a ton of database options ([https://elements.heroku.com/addons/categories/data\-stores](https://elements.heroku.com/addons/categories/data-stores)).,1528780407.0
__romx,"Configuring a VPS is a fairly trivial task, much simpler than learning a vendor platform, and will serve you better in a long run.",1528822913.0
jhartin,"Maybe check and turnoff any firewalls, antivirus. Try a different internet connection to see if it’s your router or isp. ",1528784009.0
Shadaez,is this external ip your IP?,1528796729.0
hparadiz,"If you're trying to use your external IP it's no surprise that it's not working. You can't connect to your external IP from inside your own network.

Localhost should work though but you should only be using localhost for yourself.",1528834242.0
iclutcha,"Don't use an IP address directly. Get a hostname (you can get a free one on [noip.com](https://noip.com)), and point it to your public IP (noip offers an application called DUC that will automatically update the DNS if your IP changes). Then your friends can use that hostname to connect, and you can add an entry to your host file as follows:

[127.0.0.1](https://127.0.0.1) [yourhostname.no\-ip.inf](https://yourhostname.no-ip.info)o",1528854106.0
BLOZ_UP,"I had success with iisnode, before we moved to the cloud. It was a pain to configure, but worked well once that was done.

What error do you get with iisnode?

You can also use a service but direct the logs wherever you want. Event log should have them by default but it's a pain to browse.

You could also try docker, which effectively gives you a Linux VM. That's probably the easiest.",1528772231.0
kxerr,This repo has helped me in the past https://github.com/jwalton/passport-api-docs,1528761296.0
KyungSun,tried using passport for a project and gave up. used bcrypt and Json web tokens,1528777469.0
dk01,"Because someone before you already went through this and opted not to put a PR into the docs, likely thinking that they were too busy or that it was too time consuming to write better docs. They might even have posted on reddit about it.",1528760338.0
__inactive__,"Couldn’t agree more, went through the same and remember think WTF how could this b so awful ",1528764531.0
hallcyon11,It’s fucking garbage in every conceivable way.,1528775096.0
skeliskull,"Lol Passports only the tip of the iceberg when it comes to open source. 

I think their docs are better than average. Not great but better.",1528779057.0
calumk,"Oh thank goodness \- I've never got my head round passport \- thought i was  the only one.

I settled for a custom sessions implementation in the end",1528794781.0
NodeNoodle,It was a nightmare for me too. Thanks 3rd party sites for making things a bit clear.,1528795398.0
,[deleted],1528796732.0
cjus,I tried passport a while back and I have to agree with some of the comments I read here. A while back I wrote an auth service which authenticates users using JWT.  It doesn't deal with OAuth or any of the passport strategies that perhaps makes password a useful tool. But perhaps this repo might be of use to others: [https://github.com/cjus/auth\-service](https://github.com/cjus/auth-service),1528844996.0
Asmor,Because nobody likes writing documentation.,1528807110.0
var_superUser,">Passport is great. It helps dumb people like me do auth without getting a phd, but I wish it had better docs.

DAE OOS?",1528767816.0
Skaryon,Used it quite a while ago. Worked really well. I'm confident you can achieve what you need with it.,1528739291.0
UkraineTheMotherLand,Whats the difference of this compared to `swagger-ui-express`?,1528857295.0
raul_midnight,"Wait, what’s Fax?",1528746859.0
SparserLogic,"It sounds like you're looking for a way to maintain state between runs of your monitoring server.  


A common solution to that problem is to write your JSON state to a text file and then read it back on the next run.",1528728820.0
broofa,"If you want people to take your questions seriously, take your code samples seriously.  Start by making sure it's formatted properly.  But also don't ""edit"" it on the fly and introduce a bunch of silly errors.  I.e. Read and abide by [http://sscce.org/](http://sscce.org/) in the future.  Also, StackOverflow is arguably a better forum for this sort of thing.  But... you caught me in a good mood, so here you go...

First, some issues in the code you posted:

    prevPoll = [];  // Set here, but never updated
    currPoll = [];  // Shouldn't be global
    differences = [];  // Shouldn't be global
    
    function getValidPoll() {
      // Failing to return Promise here = probably race condition in calling code
      axios.get('localhost:1050') { // Delete `{` (syntax error
        .then(function(response) {
          currPoll = response.data;
          return currPoll;
        }) // This then block isn't async. No need for separate then() blocks here
        .then((currPoll) { 
          for (var i in currPoll) { // s/i/key/
                                    // Won't detect keys deleted from prevPoll
            if (!prevPoll.hasOwnProperty(key) || currPoll[key] !== prevPoll[key]) {
              differences[key] = currPoll[key];
            }
          }
          return differences;
        })
        .catch(error => { 
          console.log(error);
        });
    }

With that out of the way, I think what you're after is something like this (using ES6 notation cuz it makes things like array concatenation easier) ...

    let prevPoll = [];
    
    function getValidPoll() { // Returns promise that resolves to `differences`
      return axios.get('localhost:1050')
        .then(response => {
          const currPoll = response.data;
          const differences = {};
    
          [...Object.keys(prevPoll), ...Object.keys(currPoll)] // All keys
            .filter(key => prevPoll[key] === currPoll[key])    // ... minus identical ones
            .forEach(key => differences[key] = currPoll[key]); // ... copy vals to `differences`
    
          prevPoll = currPoll; // Update prevPoll!
    
          return differences;
        })
        .catch(console.log); // Pass args directly to console.log
    }

All of the above said, using a global var to hold the previous state is all but certain to cause bugs if/when you want to use this code outside of whatever context you're currently writing it for.",1528750685.0
joesb,"It can also evaluate to true in any language that supports property accessor like syntax. 

You think the same expression can’t evaluate to true in C#?",1528732457.0
keithwhor,"Awesome! I saw this and thought it would be good to show a live, working demo of an example (backend):

[https://code.xyz/?gist=keithwhor/a48887dfd7aa20c55f6d4feebe4679e4](https://code.xyz/?gist=keithwhor/a48887dfd7aa20c55f6d4feebe4679e4)

(Also available as a gist: [https://gist.github.com/keithwhor/a48887dfd7aa20c55f6d4feebe4679e4](https://gist.github.com/keithwhor/a48887dfd7aa20c55f6d4feebe4679e4))",1528767624.0
BenjiSponge,This is not The Good Parts of anything. =) Don't do this!,1528733074.0
rubenhak,Yacky :D,1528779409.0
monsto,"Interesting topic.

However, his accent was so heavy as to distract my reading of the subtitles, to the point that it probably would have been better to use his original language over the good subtitles. ",1528726643.0
Sanguistuus,I believe what you’re looking for is [findOneAndDelete](http://mongoosejs.com/docs/api.html#findoneanddelete_findOneAndDelete). This will allow you to validate both the Id of the post and the owner in a single call.  ,1528715723.0
Helvanik,"If your app is really simple, you don't need routers.

But as soon as it starts growing, you'll want to separate it into smaller ""mini-apps"", so that it's easier to test and maintain, and to add stuff to it. You'll avoid a gigantic index.js file that way :)
I haven't coded an express app in a few years, but from memory that's a simple example to illustrate that. Might not be exactly coherent with the current version of the API but the idea behind it is pretty clear i guess. You can see [it in the docs](https://expressjs.com/en/guide/routing.html#express-router)

    // index.js
    import express from 'express'
    import userRouter from './routes/user';
    import bookRouter from './routes/book';

    const app = express();
    app.use('/user', userRouter);
    app.use('/book', bookRouter);

    app.listen(3000, (err) => {
       if (err) {
         console.log(err);
       } else {
         console.log('App listening on port 3000, with 2 routers, yayyy !')
       }
    });

-

    /* ./routes/user.js */
    import express from 'express';
    const router = express.Router();

    router.get('/', (req, res) => {
      // code to get data
    });

    router.get('/{uuid}', (req, res) => {
      // code to get user related data with a specific uuid
    });

    router.post('/', (req, res) => {
      // Code to post data
    });

    export default router;

-

    /* ./routes/book.js */
    import express from 'express';
    const router = express.Router();

    router.get('/', (req, res) => {
      // code to get book related data
    });

    router.get('/{uuid}', (req, res) => {
      // code to get book related data with a specific uuid
    });

    router.post('/', (req, res) => {
      // Code to post book related data
    });

    export default router;
    ",1528728197.0
src_459,"They are the same .but for clean code we use router functions and later we use it inside app  
Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini\-app”. \-\- express docs",1528709563.0
KristianSakarisson,"As far as anyone here can tell, App and router are arbitrary objects who may or may not have a .get method. 

You need to be more specific for us to be able to answer your question properly. How do you define App and router? ",1528711799.0
russleyshaw,"One thing that should be kept in mind is that if you are performing many operations to a service (such as a REST service or a database) you will often find yourself bound by the connection limit.

A better solution is to use an async concurrency limiting function such as `Bluebird.map` or something [similar](https://github.com/kwiwk/promise-utils/blob/master/src/lib/index.ts#L25) to not burn through every available connection.",1528733474.0
mauvm,`async items => Promise.all(items.map(asyncFunction))` is even shorter. No need to store the results and then return them. And also no need to use await if you immediately return the results. ,1528735370.0
lord2800,"You'd probably be better off embedding V8, the javascript engine that nodejs is based on.",1528697141.0
angusog7x,One possibility is to launch node.js as a child process and communicate through STDIO pipes.  That IPC mechanism is wicked fast and you can use JSON as message format.,1528693968.0
Drunken__Master,check out - https://electronjs.org/,1528692250.0
mtsch11,i like that it is so minimalistic. Other starterkits bring in a shit ton of dependencies and configurations I don't need to get up and running. Good work. Also the documentation seems well written. ,1528710903.0
brodega,"From Readme.md:
> Note that in production, usage of Express as a static asset server is discouraged, as it is much more efficient to use NGINX to serve static content, and to use Express only as an API server.

Is this true? I've heard of Express used exclusively as an API server but not because it was discouraged to use it for anything else.",1528721937.0
,[deleted],1528733754.0
micronode,"Just made some fixes after a structural change, and added source mapping to point Express errors back to the Typescript source files (during development). If you've pulled before this message, please make a new pull for the fixes!",1528710536.0
brodega,Very useful. I’m just getting started with Express/Node and it’s really helpful to see a fully set up environment. ,1528695118.0
trout_fucker,Only if you work for NPM.,1528662830.0
CitizenKeen,Just when you think this place couldn't get any more toxic...,1528665337.0
,[deleted],1528673534.0
64bitHustler,"I found this book to be helpful.

https://www.amazon.com/Node-js-Design-Patterns-server-side-applications/dp/1785885588/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&psc=1&refRID=HVQEMNNQGD8SC2GSG476&dpID=41OYZ2gUtXL&preST=_SX218_BO1,204,203,200_QL40_&dpSrc=detail
",1528660879.0
shug2,"There are quite a few different systems all focusing on different aspects of design. One of the better, ones I've read is [Big Data by Nathan Marz](https://www.amazon.com/dp/1617290343/ref=cm_sw_r_cp_apa_i_BnvhBbJ5KPW33). It's about the Lambda data architecture. It's not node specific, but it does touch on some good principles on how to store data, access data, and how to manage different layers to make the data usable by different clients, internally or externally. In the book he touches on other common design patterns and compares them to Lambda architecture. 

It really depends on what you're looking for in system design patterns. If we take the common chat client example, there's the server and client, but also the database, rest apis for login, join, logout, account management, add friend, delete friend, search friend, search messages, etc... The web front end and mobile apps. Then internal tools like software performance monitoring, operational admin tools, deployment, software building, managing db connections and privileges, hosting, iam controls, etc. Many different areas of focus with different ideologies.

My job as an architect is to figure out what pieces fit together for our needs a and which don't, then implement it. To do this properly you have to look everywhere for different patterns that work and dont, when they do and when they dont. Most decent ideas can be implemented into different languages. ",1528650153.0
jasonwyn,I’m still not convinced by the book recommendations... ,1528673759.0
mandix,this site is pretty good [http://microservices.io/patterns/microservices.html](http://microservices.io/patterns/microservices.html) and 12 fa [https://12factor.net/](https://12factor.net/) you can get book like building microservices with spring [https://leanpub.com/building\-microservices\-with\-spring\-boot](https://leanpub.com/building-microservices-with-spring-boot) any generic microservice book should be good,1528660100.0
,Clean Architecture by Robert Martin,1528674336.0
tostrinj,Read classic - this will help you because this is going to be a lot of what you will use quite often - https://www.oreilly.com/library/view/design-patterns-elements/0201633612/,1528695333.0
KillCoffee,This is normal. They are automated bots trawling for insecure servers for malicious use. [Here is a stackoverflow thingy for it with some helpful info](https://serverfault.com/questions/244614/is-it-normal-to-get-hundreds-of-break-in-attempts-per-day?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa),1528619590.0
Max_Stern,"It's normal. You will be surprised how many bots actually scan the whole Internet 24/7.  
Hell, I setup an Asterisk server on new IP and got first attempts to brute force passwords within 10 mins. ",1528619641.0
joesb,"It’s normal to see, like seeing burglar trying to break into your house everyday. He doesn’t specifically want to break into your house, he just tries every locks. 

Be aware of it, be conscious that malicious actors will try to break in to everyone’s server, follow securities practices. ",1528622958.0
BLOZ_UP,"Yep, normal, as everyone said. It's called Internet Background Radiation. There are still Melissa/ILOVEYOU worms on some ancient PC left on in a closet from the 90s trying to infect other PCs.",1528640237.0
jhartikainen,"Do you want to use features which are not built into node? Then transpiling server-side code seems perfectly normal.

At least I don't see any reason why you couldn't do that. It's same if you wanted to use something like TypeScript.",1528605746.0
alexfey,I can't code without ES6 imports. Try https://github.com/jaredpalmer/backpack ,1528620498.0
Groady,I prefer Koa over Express because its middleware can act on the request **and** the response similar to django.,1528607129.0
evertrooftop,"Everything really is good enough to do the job. I personally favor Koa because it's so minimal and integrates nicely with all my async/await code, but really everything is fine.

I'd suggest to give another framework a shot and make your own opinion ;)",1528603953.0
daemon-electricity,"Loopback. No question.

I just got into it. I'm amazed at what you can do so quickly. I haven't started writing business logic yet, but the relationship based API you get for next to no work is ridiculously robust and not brittle. It also builds the services to manipulate the API for Angular 2-5. If you don't need any ORM or care about the flexibility of storage options, use something else, but for getting a lot of well written functionality that only does just enough and in all the right places with very little pain so far, I can't rave more about loopback.

My only disappointment is that it's not based on TypeScript, but hey, that's coming in Loopback 4.

I was around for the 15 minute blog when Ruby on Rails first hit popularity. This _destroys_ that in terms of usefulness in 2018 and what you get from ""generated"" code and how it doesn't overwrite your underlying code. No front end at all. Pure REST API. Handles relationships and a decent selection of databases with minimal effort. It even works with an existing database. I'm falling over myself with how much of a silver bullet this has actually proven to be. There were so many more shitty solutions before this. Drupal, CakePHP, RoR. This feels well engineered. I remember Django being similarly good at building models and creating relationships but since we're not including any other platforms in the discussion, I say loopback pretty enthusiastically. Django would be worth looking at if I knew Python.

It's also based on express so if you have an existing express app, it's easy to integrate.",1528618069.0
niet3sche77,Koa is pretty awesome. I prefer it over Express because async/await is baked-in and it is slimmer than Express. ,1528630423.0
AceBacker,Is there some problem with express?  Why replace it with another solution that does the same thing?,1528608972.0
STRiDEX,I was a huge koa fan from early promise generator days but hapi is the better choice now that it fully supports promises and the main developer is very active ,1528612313.0
stemsmit,I've been enjoying the [TSED](https://romakita.github.io/ts-express-decorators/#/?id=tsed) framework here lately.,1528607569.0
cemremengu,eggjs,1528613736.0
djslakor,"Express has the most users, so you can count on its code and middleware most likely being the most real\-world battle tested and smoothed out.  We use Koa at work, and it's been great.  Looked at Hapi, but no LDAP support in Bell was a non\-starter for us.

Our stack is Koa/Sequelize/Passport/SocketIO, Postgres, Redis, Elasticsearch on the backend, and React/Redux/Mobx/Typescript on the front end.  We've been able to build anything we want.",1528726052.0
SkaterDad,"I use hapi almost exclusively.  It comes with everything you need out of the box, and its plugin system is more flexible than the middleware style of other frameworks.

Here's a good tutorial series: [https://futurestud.io/tutorials/hapi\-get\-your\-server\-up\-and\-running](https://futurestud.io/tutorials/hapi-get-your-server-up-and-running)",1528654326.0
Lambotherambo,Nothing wrong with express...,1528613352.0
lulzmachine,Express works. It's fine. Never had a problem with it ,1528618114.0
majorius,tried many to return to Express :),1528635798.0
mahade,"Express suffers from the ""it's old and established, everyone uses it, it doesn't make me look special and I've been using it for so long it's time to learn something new just so I challenge my brains a little""-syndrome.

Koa is hip.

Hapi is something everyone heard of because that one speaker at that one conference 3 years ago was hapi about it, but nobody actually seems to really care about it very much.

---

I'd go with Koa for the async/await thing. But Express is probably the safest bet because more people know how to use it.

Personally I'd ask my team who prefers which and choose based on that.",1528636016.0
patrickfatrick,"I personally really like Koa for the syntax and simplicity. I hear really good things about hapi. Express is going to be what you mainly see used in production so it’s probably the most “useful” one, even though it’s not as nice these days.",1528644020.0
kkogovsek,"I would try fastify, made by node core developers, fastest kid on the block",1528659831.0
Lost_sand,Django,1528604737.0
qqqyqnz,Only on the final commit. Use git flow to prevent confusion.,1528589444.0
faazshift,"I typically commit an updated changelog, then run `npm version...`, which creates and tags a new commit that contains the `package.json` update. I personally think that makes a lot of sense. The version bumping/releasing itself being distinct from the list of changes made as part of that new version release seems pretty sensible. My 2¢.",1528609440.0
Soho_riots,If you use ‘npm version’ it will do both. Increment version and create git tag.,1528579535.0
panbhatt,"Use PINO logger. the best in the market, very fast and export the logs default in JSON format. 
Integrates well with major node.js frameworks. ",1528598783.0
SandOfTheEarth,"What I do at work for Logging, is I add ID for each request, so you can easily see what thing happened during individual request.

If i am doing sessions, I usually also add session ID to the log also, so it looks like sessionID/requestID.

Also log4js is the logger of my choice.",1528577324.0
theguysperry,"I created a module that extends Winston to include reflective information automatically. All services log to syslog-ng aggregators throughout the enterprise and everything ends up in an analytics system with ops dashboards. Simple, easy, and informative.",1528577517.0
Gibbon_Ka,This is a good start: https://blog.risingstack.com/node-js-logging-tutorial/,1528585604.0
martiandreamer,"Winston is a good choice; consider adding a plugin that enables you to write to an ELK-stack, which would enable your DevOps team to manage what’s going on with your application in production. ",1528578373.0
ozzaa,awesome! thank you!,1528572854.0
lenswipe,Does facebook not have a post scheduler?,1528594397.0
coolreader18,I was literally looking for something exactly like this yesterday! Thanks!,1528559891.0
nothingduploading,Checkout lice.,1528557960.0
StrangeSound,"Can't you just do this via the ""Insights"" tab on GitHub?",1528568019.0
ClickableLinkBot,"##r/javascript
---------------------------------------------
^(For mobile and non-RES users) ^| 
[^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| 
^(-1 to Remove) ^| 
[^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)",1528554305.0
PerfectOrphan31,"What do you mean by ""real type""? Are you needing something like  `typeof <varName>` ?",1528563420.0
psayre23,"TL;DR:

`export const trueTypeOf = input => Object.prototype.toString.call(input)
	.replace(/(\[object |\])/ig, '')
	.toLowerCase();`
",1528554690.0
bqlou,Not sure if it works with express but look for hapijs/joi https://github.com/hapijs/joi,1528581946.0
oorza,"In the amount of time it took to not find this package and post here asking for it, you could have written it.  This is like a dozen lines of code max.  Contrary to popular belief in the Node community, it is *perfectly okay to write your own short functions*.  ",1528561620.0
fwertz,Is `NODE_PATH=.` not an alright way to handle stuff like this?,1528682297.0
RushPL,"Hey guys, just created this out of frustration at module-alias (https://www.npmjs.com/package/module-alias) not working properly with VS Code (https://github.com/ilearnio/module-alias/issues/19). Since module-alias's syntax and functionality is great, I built an almost drop in replacement that implements the same idea with statically set up node_modules instead of a runtime require hook. This has an additional benefit of not having to modify your code to get the aliases working. They behave like regular dependencies.

This should be right up your alley if you hate ../../../../module within your repo and don't have the luxury to split everything to micro-modules.",1528524445.0
YannVanhalewyn,"Not familiar with this framework, but does `request.headers.set()` return the new headers? Otherwise you're setting the token in the initial request, not the cloned one.",1528544566.0
08148692,A bit late to the promise party. That time has passed. It's all async / await now. (Which is basically promises hidden behind syntax),1528815922.0
sotimting,Haven’t you heard? Promises are out. Observables are in. /s,1528889734.0
davidmdm,"The solution is simpler than you think, the request library used streams directly if you do not include the callback. 

Request.get('http://file') is a stream. 

So you can use it as argument or pipe it where the data needs to go! Hope that helps. ",1528588681.0
scottomaton,"I'd recommend checking out streamifier [npm link](https://www.npmjs.com/package/streamifier). Usage is pretty straightforward:
    let streamBuffer = streamifier.createReadStream(someBuffer);

I'm not 100% sure it's going to work for what you're needing, but it might be a good place to start.",1528503228.0
sirmcallister,"One thing that can’t be mentioned enough are the shortcomings when accessing databases. I’m very enthusiastic about serverless and wait for the day that’s fixed.

My node.js usecase is almost always to build an api and for that I use relational databases. At the moment you can’t pool connections. 

Make sure that’s not a requirement of yours so you don’t waste time. Otherwise check out amazon SAM cli or codestar for the best few clicks setup of a whole dev/deploy chain I’ve seen.",1528528456.0
martinchavez,How does it compare in cost to firing up an EC2 instance?,1528522701.0
cinooo1,Thanks for the link! +5 NIM u/NimiqTipbot,1528538751.0
deadcoder0904,"Also, the most irritating issue is AWS Lambda is ran twice always.

Checkout https://stackoverflow.com/questions/50551768/cron-job-fires-twice-in-serverless-using-aws-lambda

I am looking for a solution for that problem but unable to find one :(",1528530108.0
saltupz,"There already is plenty of orms, i suggest you look at typeorm and if you want a rethinkdb adapter, just build it and make a PR. The typeorm project seems very active",1528514656.0
Groady,Isn't rethinkdb as good as dead? Their last release was just after the parent company shut down and haven't had one since. They haven't had a release in almost a year. ,1528499394.0
TheNoim,"I love rethinkdb, but I don't see a future for it since the company behind it closed.",1528634115.0
08148692,"I used Thinky (https://www.npmjs.com/package/thinky) when I was working with rethink. Never had any issues with the ORM, however I would strongly advise against using Rethink in any kind of production systems. ",1528819177.0
SomeRandomBuddy,About this sweet ass project idea: https://news.ycombinator.com/item?id=17331831,1529352190.0
rotharius,"First of all, I think the ORMs for JS are all a bit wonky, but there are options: Bookshelf, Objection, Sequelize and TypeORM come to mind. So you might want to extend those by writing an adapter or wrapper for the database of your choice.

I looked into RethinkDB when looking for a database that natively supported streaming input/output. It can do well, but RethinkDB has had some serious issues in the past regarding performance and scalability (and the fall off its company seriously impacts progress). 

If you want the streaming capabilities, backed by PostgreSQL, you might want to take a look at PipelineDB. It's kind of bleeding edge, but it looks promising for streaming architectures (lambda, reactive, kappa).",1528549809.0
jwinnie8,Why are people downvoting? Is it because they hate RethinkDB? Where is all this hate coming from? Why would something like MongoDB or PostgresQL be better than RethinkDB?,1528501791.0
nothingduploading,Every example I've seen does it in the app logic. One reason you may not want to do it in the db is because most dbs have query logs so you might be potentially leaking the unencrypted password in a log file somewhere for hackers to get at.,1528498210.0
,[deleted],1528506300.0
SkaterDad,"Most (all?) auth implementations only attach one user to the session or token.

If multiple users are requesting your site at the same time, they come as separate requests with their own cookies & data.",1528490036.0
cemremengu,How about: https://stackoverflow.com/a/49649162/586986,1528489332.0
apiguy,Can you share some code so we can get an idea of what might be happening?,1528486265.0
MONSER1001,"I suggest to watch the Traversy Media youtube channel, it has a lot of nice tutorials that can get you up and running into this. Other suggestions are The Coding Train, the node.js documentation and just trying stuff. Build something after watching the videos and understanding them. For example, he builds a simple aplication that holds some posts. Try to add a comment system, try to make a rating system, just so you can understand better how and why some of those are working. Also, if you are interested you can watch some programming live on twitch, sometimes, that can help you out with questions and tips.

Also, don't just try the tutorials, follow them along and fall into the **tutorial hell**. It can be a hell of job to get out, I tell this from a personal experience.

Also, good luck with the project!",1528679232.0
EarlMarshal,"Afaik napi_env is only correct for the time of the request, so caching it won't work!

But thank you for pointing me to napi_ref. I started writing some data structures which are saving napi_values and never run into issues with their life time since they are probably never garbage collected in the small time of every these test cases. You probably saved me some time figuring the problem out!

Maybe this could help you: ATM I'm splitting my whole code into napi specific could and my plaine c++ classes. I started doing this because I wanted to add support for wasm later and think that is a pretty good design. Most times the napi class (e.g. NapiTree) is just extending the normal class ( Tree<napi_value>). Through this it should be easy to switch to napi_ref too ;)",1528523718.0
pearisgreen,I just read that caching napi\_env is not allowed. For anyone interested,1528490441.0
bdchauvette,"VS Code has an [auto importing](https://code.visualstudio.com/docs/languages/javascript#_auto-imports) feature. It can do some weird things sometimes, but it usually works pretty well.

If you `ctrl+click` to view the file, it will take you to a TypeScript declarations file (e.g. `foo.d.ts`) if one is available, rather than taking you to the original source (`foo.js`). The TypeScript file will only show you method signatures, not the actual implementation.

AFAIK, there's not currently a way to go from the TypeScript declarations to the implementation. I could be totally wrong about that, though, and I'd love to find out if there is.",1528482519.0
fourormore,"Would help to see the code to this, is it on gh? 

You could store a variable for the session that records last page and if that is not form1 then redirect to form 1. ",1528477292.0
BehindTheMath,Use AJAX to get the data from route2 and output it onto the page. ,1528479490.0
mirage27,"After handling the form on route2, you should response with a 303 status code + a ""Location"" header, containing route3.

This way the web browser redirect directly to route3, without recording route2 in its history.

Now this will work on the normal use case, but won't prevent a malicious user to replay the request. So you should sanitize your logic behind route2 so that it detect you are replaying the same form, if you expect someone can have malicious intent when using this form.",1528491549.0
thequargy,"You might be able to remove ""route2"" from the browser's history using front\-end JS: [https://developer.mozilla.org/en\-US/docs/Web/API/History\_API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) ",1528526392.0
jwalton78,"Issue is being tracked here: https://github.com/npm/www/issues/424

I strongly suspect the problem has to do with them putting cloudflare in front of the registry.  At a guess, they were counting the number of times the actual package tarball was being downloaded from their server, and now that it's downloaded from cloudflare instead, the count is always 0.",1528487071.0
QW4K,I noticed the same thing! I am very curious what really happened...,1528486242.0
buoybuoy,"I just figured it was because of memorial day, kind of like how most packages have a dip around christmas. Probably just a coincidence though, since the drop this time is huge.",1528495092.0
RamesesLabs,Nice article. Love Traversy Media's free tutorials on YouTube. I will have to check out these other guys on the list I haven't seen their videos for yet. Great post for Node.js developers.,1528538586.0
10701220,"I've been wanting to play with IoT and home automation forever

Maybe this will give me some inspiration ",1528797863.0
ResponsibleLife,"Here's some source code for the **Wes Bos - Learn Node** video series: https://github.com/wesbos/Learn-Node

Also the **gothinkster/realworld** repo provides lots of different variations for the same project: 
https://github.com/gothinkster/realworld",1528452497.0
FlyingQuokka,"Code example? You can look at my [video\-sharing website project](https://github.com/yrahul3910/video-sharing-site). It has a search engine (using Elasticsearch) and support for comments, replies to comments, and voting on videos.  I haven't deployed it anywhere, though (mostly because I'm not sure how I'd put up Elasticsearch on something like say, Heroku). It uses MySQL, Express, React and Node.js.

I'm quite proud of this one tbh, I think I structured the code well, used reasonably standard practices, and added a good amount of documentation and comments.",1528461837.0
NodeNoodle,"MDN offers a free step\-by\-step tutorial to make the management system of a library (borrowing books, returning books, adding books, adding authors, relating author DB with book DB...)  


It covers:  
\-Express  
\-MongoDB (with Mongoose)  
\-CRUD functions  
\-REST  
\-template managers  
\-Uploading to a host prepared for Node  
\-basic usage of npm  
\-data validation and sanitization  
\-routing (as a concept per se)  
and some other useful concepts.

It only lacks some Angular/react feture, but that's easy to look for once you've got the rest of stuff covered.  


[https://developer.mozilla.org/en\-US/docs/Learn/Server\-side/Express\_Nodejs/Tutorial\_local\_library\_website](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website)",1528466115.0
Groady,Check out https://contentjet.github.io it's a full stack headless CMS written node with a react front-end. ,1528454960.0
j_rapp,"Here is a repo I created containing boilerplate for a MERN stack (mongo, express, react, node) to help new developers get on their feet quickly. Also has some special error and resource handling that I designed to make transferring data between client and server secure and standardized: https://github.com/jmrapp1/Node-React-Redux-Boilerplate",1528459941.0
willshowell,"I like referring to [spectrum.chat](https://spectrum.chat/)'s source every now and then

https://github.com/withspectrum/spectrum",1528462704.0
,"Ghost CMS is an excellent example. Maybe better for intermediate Node Dev, but i need to name it. 

[ghost cms on github](https://github.com/TryGhost/Ghost) ",1528537260.0
Lost_sand,"Express generator is where I started:
https://expressjs.com/en/starter/generator.html",1528606398.0
thequargy,"If you have previous projects on your computer that used the same npm packages, you could always just copy/paste the files into your new project.",1528436373.0
russleyshaw,"Yarn does a pretty good job at this. Of course its own local cache will only have the most recently pulled version of those packages. 

https://yarnpkg.com/en/docs/cli/install#toc-yarn-install-offline",1528410975.0
sad_c10wn,"Depending on of this is a Lambda or a constant service that is running (i.e. docker container) I would look into CRON jobs. I am unsure if there is a way to schedule specifoc dates with CRON, however, I use it at work to keep a mongo collection pdated every 5 minutes from an old mainframe system.",1528408161.0
BlueSCar,"I've used the [node-schedule](https://www.npmjs.com/package/node-schedule) package in the past to handle this exact same scenario (sending a tweet) and many more.  It's always worked very well for me.  It can handle CRONs, recurrences, or just a specific date instance.  ",1528410112.0
Vote4SovietBear,"I’m kind of a noob with Node, but i think i would make an endpoint that would trigger the tweet to send. I would hit that endpoint/url using a cron job",1528410414.0
randomFIREAcct,"I have done something similar. I basically stored all of my schedules in a database and then used that to populate a CRON scheduler like this one: [https://www.npmjs.com/package/node\-schedule](https://www.npmjs.com/package/node-schedule)

You then handle the events as the scheduler pushes them and then take action based upon what is in the database.",1528419198.0
Bootezz,I think the free tier of azure scheduler would easily do the trick. It just schedules a rest request with whatever you want.,1528423866.0
skewwhiffy,"To do this, you have to poll your data store, either by writing a poller yourself, grabbing a third party library to do it, or piggy back in your OS's scheduler.

I take it that the Twitter API doesn't have scheduled tweets in it, right?",1528412315.0
thequargy,I found a tutorial that uses the **Multer** npm package to upload images in node/express: [https://dzone.com/articles/upload\-files\-or\-images\-to\-server\-using\-nodejs](https://dzone.com/articles/upload-files-or-images-to-server-using-nodejs),1528436582.0
mclovin4009,"You can use the ""Multer"" npm package for this, as many will suggest ([https://www.npmjs.com/package/multer](https://www.npmjs.com/package/multer)).  
As for me, a project I'm working on sends the file from the front\-end in multi\-part format to your node server. Then I upload this file from my node server to AWS S3 and get the file location URL which i then save to my db.   
Choose either way, everything works fine :)",1528445772.0
LightShadow,"> The open-source code of low.js will be available on GitHub till end of July 2018.

What's that supposed to mean?",1528435595.0
HxLin,Looks neat. Can any of the changes benefit NodeJS as well? Optimization always sounds great.,1528431173.0
thisisafullsentence,"[Any application that _can_ be written in JavaScript, _will_ eventually be written in JavaScript.](https://blog.codinghorror.com/the-principle-of-least-power/)",1528428749.0
bmarkovic,"Ok so a couple of questions.

Will this work only on your hardware or would one be able to run this on something like Raspberry Pi (and/or clones)?

What are the benefits of your solution compared to JerryScript/IoT.js? Is it that low.js is fully Node.js compatible (at least to JavaScript modules for Node?) whereas, if I understood correctly, IoT.js isn't really Node-compatible?

Finally, do you have some ETA on your HW boards and some price quotes and HW specs?",1528443510.0
erm_what_,How does this compare to Espruino?,1528445932.0
nothingduploading,Does it support es6?,1528402694.0
phitruongdn,This went too far!,1528433610.0
adamjohnston151,Try using appendFile instead of writeFile. AppendFile creates the file for you if it doesn’t exist already. ,1528421775.0
adamjohnston151,Hmmmmm you’re saying it’s void when you tried appendFile?,1528468281.0
kessnerch,"If I am not terribly confused the protocol pretty much does ""request what block is your highest"" v.s. a potential client (or addnode), if the reply is higher than the one you have you basically get blocks 1 by 1 until you reach the number of the client. Inbetween you do verify the data the client is sending you so you are not getting posioned with false data. Basically what you want to do is also recreate the consensus algorithm in nodejs, which seems unpractical at best to ""start with"".
I haven't worked with ETH yet (just alt coins) but basically you'd need to grab the blocks, grab the script parts of the block, run it through a ""naked"" GETH (but with all blocks in the chain so the variables inside have the proper state) and handle the ""reply"" of the EVM. This itself seems to be a project by itself.

I'd split it into several parts in your case:

- Blockchain fetching

- API Interfacing

- ETH Virtual Machine (EVM) Interfacing

- Block validating/building

Starting from there you can go forward, I guess.
For blockchain loading there should be a number of node.js modules already, check the NPM site for more.

-Chris",1528399076.0
nothingduploading,I would have no idea where to begin.,1528394357.0
ecares,use the [https://nodejs.org/docs/latest/api/path.html](https://nodejs.org/docs/latest/api/path.html) and [https://nodejs.org/docs/latest/api/globals.html#globals\_dirname](https://nodejs.org/docs/latest/api/globals.html#globals_dirname),1528386164.0
fforres,"I presented there last year!
I have to say, one of the best conferences I’ve been!
Totally recommended 🤘❤️

Looking forward to see all the community again this year!",1528382850.0
,[deleted],1528384184.0
prozacgod,"Some of this speakers introductory low-level stuff is ""fine for a JavaScript talk"" but not technically correct.  The Windows NT 3.1 kernel was preemptive with Win32  IIRC there was a subsystem that ran as a thread that handled the Win16 cooperative multi-tasking stuff.  (but it's been a number of years since I've had to think about that)

His statements about locks being ""like cooperative multi-threading"" are a bit.. well I mean I GET what he's trying to say, but... it doesn't feel right to say it like that.  It is synchronization code, but it's not used to synchronize with other programs, but with your own program being re-entrant with itself.  E.G. When you have multiple real threads of execution, and another thread fires off while a different thread is maybe sleeping due to IO, you don't want thread #2 altering state information in thread #1 because shit MAY hit the fan after that IO request.  Especially if thread #2 alters memory that #1 is using directly... (Like ... de-allocating the buffer thread #1 was using for said IO operation)

So you create locks and.... thus bugs... lots and lots of bugs. :P",1528397711.0
ecares,PLEASE DON'T,1528364619.0
ecares,Could you please not?,1528364609.0
OzziePeck,You went from sensible to stupid. Why use NPM... just why. ,1528357822.0
zkochan,"Remember that [pnpm](https://github.com/pnpm/pnpm) exists as well. So when you're selecting a package manager for Node.js, you have 3 options.",1528404634.0
joshmanders,"You should probably take into account npm's issues, like the year+ issue where the whole point of the tool is broken.

installs clobbering your OS directories by changing permissions of folders and files in `/usr`. Or `publish` not packing the whole project and only publishing partial repos.",1528400448.0
notAnotherJSDev,"You can put your entities into a github project and `require` them with NPM. Shouldn't be too difficult to accomplish.

As an example, we have a helpers library that we pull in from github like so: 

`helpers: git+ssh://git@github.com:<Company Name>/helpers.js.git#vNumber`

We put that into our package.json file and it will load in and allows us to use them like any node module.",1528228210.0
FuzzyConflict7,"This is literally copied from a paid udemy course. Respect the content creators. Brad Traversy is a good teacher. This medium post is even using his image with his logo on it. That's ridiculous. 

http://www.udemy.com/mern-stack-front-to-back/
",1528248506.0
roboctocat,You could throw an error instead of console.log and in your unit test check if error has been thrown. [https://jest\-bot.github.io/jest/docs/expect.html#tothrowerror](https://jest-bot.github.io/jest/docs/expect.html#tothrowerror),1528229097.0
Pig__Man,"I'm a bit confused by the question. Are you looking to have a server waiting for a request on a certain port? Or do you want all requests sent from the client to go to a certain port? If it's the latter you can do that at the VIP level, I don't know if there's a way to do it native to node but you may be able to bind certain ports to certain apps/sites/modules locally.",1528218558.0
lopsidedlux,"Set the route that you’re sending in this format 
‘Http(s)://$addresss:$Port/$restOfAddress’
This will cause it to go to the port you’re seeking. ",1528245994.0
texasbruce,"That's a shitty concept mixing runtime, tools and frameworks. Now even mixing with a language",1528213547.0
EarlMarshal,The moment you replace yourself with software which can do all your work without you :(,1528220878.0
texasbruce,I like to replace bash with nodejs as well but then I had a lot of trouble in creating interactive script (reading input from command line).,1528215543.0
TheIncorrigible1,"Oh look, a thinly veiled advert for a book.",1528243607.0
tehpsalmist,"Yes, commander ftw!",1528254133.0
warchild4l,"I dont know about any book, but i can recommend some udemy courses: 

1) andrew mead's node course, it covers more than just restful api

2) colt's web developer bootcamp

3) brad's node js, dev to deploy (this one is for practice, it assumes that you already know node, express and mongo) ",1528217285.0
hrvstdubs,Check out safari books online they have tons of stuff for this ,1528202680.0
TheOneRavenous,"WebRTC is a P2P imlementation, but if I remember it was mainly for audio and video. But the concept of sharing data is the same so at a minimum your front end needs to be a little beefy to handle the logic since the server isnt needed. 

The idea in webRTC and nodeJS implementation is that theres a three part process. The source user sets up a webRTC ""server"" ( you'll know why i say server if you read the client creation portion of WebRTC). Once the server is initialized you need to use the nodeJS server to transfer the address to a consumer/other client. The third part is sharing the WebRTC address so the second client can connect to the first. 

nodeJS is simply the means for rendering the page, transferring  the initial server address, and serving static assets (i.e. client side js files, HTML, css).

Once both clients are connected and have rendered a page the rest of the communication is P2P",1528202946.0
notAnotherJSDev,What problem are you trying to solve? ,1528207902.0
dave-rockpower,"As long as both apps has access to the key you used to encrypt the JWT with, it should definitely work. ",1528199130.0
oureux,"If the secret for verifying the token is shared between the two apps, lets say with ENV VARS then it'll be fine. You could use local storage on the client side and then send it in the `X-Authentication`header with every request after the login.",1528213291.0
bradleyprice,"This is how we handle authentication with some of our micro services. We have our ""monolith"" (rails app) that handles authenticating a user. We also have a handful of small react application (\~15). After each request to the monolith, we generate a jwt token that gets sent back with the response. That jwt token is then used by the react app to authenticate calls to other micro services we have.  


As mentioned by others, we share the secret per environment so that the micro services and monolith know how to validate the jwt token.",1528246507.0
commiesupremacy,Why do this with socket?,1528232333.0
adamjohnston151,Can you show what your socket-io setup looks like right now? ,1528249552.0
Drunken__Master,"https://www.udemy.com/nodejs-unit-testing-in-depth/ - seems to be exactly what you're looking for

https://www.udemy.com/the-complete-developers-guide-to-mongodb - spends a good amount of time building and testing an api",1528204652.0
guoshencheng,is ts\-node reliable? ,1528250251.0
chiminage,Graph ql is the future,1528217359.0
drquicksilver,July 2017?,1528195467.0
djslakor,"""Every developers"" should know all 10 of these languages \(and platforms/ecosystems\)?

lol

Why is /r/node a wasteland of terrible article links?",1528208708.0
deadlyicon,"Something like this would read a lot better.

https://gist.github.com/deadlyicon/770643f77ac831f0224314834dccbbbe

Note: it wasn't clear where the `order` variable came from but I assume there is only one order and you don't want to save it for each charge. ",1528156613.0
Drunken__Master,"For good free YouTube videos you could check out TraversyMedia or the Net Ninja. 

For a more extensive course I'd recommend the Udemy course by Andrew Mead called the Complete Node Developer 2nd edition, Udemy has a messed up pricing model, If the course isn't ~$12, you can do a google search for ""Udemy coupon"" .

Also I went to Mosh's website to look into the quality of the course, but all I found was ""Error establishing a database connection"".",1528152780.0
Ampenidas,"I took Mosh's c# course back then, it was good, can't say anything for node courses though.

Check out youtube videos first, some videos are quite good at explaining concepts. Also, i recommend udemy too, their prices are low and you can find courses from beginner to pro.",1528153716.0
warchild4l,"Its worth if you spend on quality courses. Just never pay that much money for one course, only about 10-15$.. andrew meads node course is perfect, and also after you finish that course check out stephan grinder's advanced node course! Pretty much you will need only those two courses + your pwn research on some stuff, like some new libraries, how to use them, etc.",1528175299.0
NodeNoodle,"Beware of how old the tutorials are, some stuff might be outdated and the examples won't work.

Personally I don't take anything before 2016 except for general concepts \(for example the event loop, callback logic and tips, etc\), which don't usually change much over time.

Also, always check the comments section of each tutorial. Many might have mistakes or bugs \(I know by experience\) and you might only realize it once you're halfway down the tutorial. Doesn't mean you won't learn anything, but it wont' be as effective as a fully performing code you can tweak and expand and analyze. If there are any issues with a tutorial, some people will point it out \(I do, both to push the author to put in good code, and to tell other learners where it might fail so they don't waste time looking for the bug\). Sometimes you'll even find solutions in comments section or useful links to solve these problems. Totally worth checking, always.

Sadly, many people posts code and doesn't even review it, I've found really stupid bugs in some free examples and tutorials.

Nonetheless, for the very very very basics you can go free, complex stuff is more difficult to find and you might find yourself paying for advanced stuff. If you pay for a course, try to get those where you can directly ask questions to your teachers, because those will definitively arise, and googling stuff for 1 hour might be a waste of time when you can get a direct response in 5 minutes.

See you around here!!!",1528184982.0
LabaNingombam,Mosh's Node course is also available on Udemy for much much lower. I love his accent and explanations. You can get it on Udemy. ,1528188678.0
tehpsalmist,Anthony Alicea’s Learn and Understand Node.js course on Udemy. You can probably get it for about $10 and it will thoroughly walk you through Node fundamentals.,1528254471.0
god_damnit_reddit,"Don't pay for a course, certainly not almost $100 for one. I would (and I did) get a textbook, you can find them free all over the internet, and work through that. And build stuff with node, it almost doesn't matter what.",1528177855.0
Parasomnopolis,"I've used [p-map-series](https://github.com/sindresorhus/p-map-series) to do something similar:

    function scrapeSearchUrls(){
      const arrayOfPagination = [1, 2, 3]
      const horseman = new Horseman(horsemanOptions)
      const userAgent = getRandomUAstring()

      return pMapSeries(
        searchUrls,
        (searchUrl) =>
          pMapSeries(
            arrayOfPagination,
            (pageNumber) =>
              horseman
              .userAgent(userAgent)
              .wait(generateRandomWaitTime())
              .open(searchUrl(pageNumber))
              .waitForSelector(paginationSelector(pageNumber))
              .evaluate(getBookDataFromPage)
          )
      )
      .then(flattenAndUniquify)
      .then(pTap(uniqueScrapedBooks => horseman.close()))  // eslint-disable-line no-unused-vars
    }",1528152809.0
Soze224,stackoverflow.com,1528146330.0
ecares,[https://github.com/nodejs/promise\-use\-cases/blob/817d17936afda3308ceaeaa5cf4c77c491318a94/use\-cases/user\-expectations/4/expectations\-4.md](https://github.com/nodejs/promise-use-cases/blob/817d17936afda3308ceaeaa5cf4c77c491318a94/use-cases/user-expectations/4/expectations-4.md),1528148388.0
myurr,"You can do a for of loop on URLList instead of the forEach, for example:

for (let url of URLList) {
  // Put your async stuff here
}

Alternatively you can wrap your forEach call within a Promise.all() to ensure each promise from the async function is then resolved.",1528184665.0
Parasomnopolis,"One important thing that wasn't mentioned in the article is that when you swtich node versions, you'll need to remember to reinstall any globally installed npm modules: https://github.com/creationix/nvm#migrating-global-packages-while-installing",1528153241.0
elrodrix," ""Service Unavailable""",1528124536.0
jackandjill22,Hm,1528161954.0
,"You need to know how it works? I thought I just copied and pasted the boilerplate and set some routes?

Seriously. Learn how it fucking works. I’ll use the proper /s next time. ",1528126280.0
scaredibis,"Have you considered using an ORM like sequelize.js? Its an awesome package with heaps of community support that handles all your models and sql queries for you (you write javascript, it creates sql). Am i correct in assuming you are writing raw sql? Because if so, you should get onto an ORM asap",1528115045.0
notAnotherJSDev,"So, I don't know what you're using for your server side language, but this is a pretty nice library that hooks into Express: [Celebrate](https://github.com/arb/celebrate). It is built on top of HapiJS' [Joi](https://github.com/hapijs/joi) library, which forces a schema for requests. As well, just don't eval anything coming from the front end.  

For protecting against SQL injection, look into prepared statements.

Also, this heavily depends on your front end. A lot of libraries nowadays will sanitize inputs by default, and some will even sanitize outputs. In the case of React, it will sanitize inputs and if you try to put HTML (which could include a script tag) into your JSX, it will render as plain text.",1528118618.0
joesb,Do not sanitize input. Escape the output. ,1528115853.0
CapstoneLobster,"Search about nodejs with jwt token for validation, or use passport. 

Https://Jwt.io 
http://www.passportjs.org/

Edit: links",1528110432.0
ToyBlock,"Passport.js is probably what your looking for. I think it's Node.js most used authentication middleware, it's easy to use and has lots of tutorials. Even if you prefer to build a login system from scratch it's probably not a bad idea to build a project with Passport.js first. I personally only use Passpord.js since I don't like wasting to much time on basic functionality on every project.",1528111569.0
NodeNoodle,"Get also informed about the Oauth protocol. It simplifies things a lot and allows some nice ways to externalize login/signup security andcan be mastered in a few days.  


that ""login with facebook"" button? that's Oauth!!  


[https://oauth.net/2/](https://oauth.net/2/)",1528370955.0
scttmthsn,Use ‘nvm default’ +version to set default version iirc. Check the manual.,1528104560.0
adidarachi,Now I've seen everything...,1528097723.0
,[deleted],1528371054.0
LoveandRockets,"A really clever dude named Ryan Dahl had an idea to take the V8 javascript engine out of the Chrome browser and run it to take requests as a server. Turned out to be a pretty good idea. (I like this question because Ryan's efforts are an inspiration to me. He had a crazy idea and just did it.)

You can see Ryan's first [Node presentation here](https://www.youtube.com/watch?v=ztspvPYybIY) to learn a bit more about it. ",1528095315.0
joesb,"Language has nothing to do with where it can be run. 

Someone create a JS interpreter that runs outside the browser. That’s it. ",1528108565.0
1-800-BICYCLE,"The other part people haven't mentioned yet is `libuv`, which is a cross-platform async io library created for node.js. It's what's responsible for resolving many kinds of async calls (file system, dns) and hooking into the node.js event loop. ",1528114830.0
whyNadorp,looks like that’s a mistery even google can’t solve.,1528093658.0
frenchcooc,"Basically, JavaScript code is interpreted into C++ using V8 engine. C++ is then interpreted as machine code.

It works almost the same wether the code is front end (Firefox, Chrome, etc.) or back end.

The only difference between front end (browsers) and back end (nodejs) is that the JavaScript engine is a bit different, thus allowing different functions to be called :

- In back end, NodeJS (V8) allows to access the file system, requiring modules, etc.

- In front end, some functions are not made available (mainly for security reasons).

Major browsers have their own JavaScript engine, whether NodeJS uses only V8 engine, which is Chromium/Google Chrome JS engine.

So if you run JS code with Google Chrome or NodeJS, basically, the same JavaScript engine (V8) will be used to interpret your code. 

More info : https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964",1528095078.0
alreadyheard,"I just started taking the course,  [Learn and Understand NodeJS](https://www.udemy.com/understand-nodejs/), on Udemy and it does a great job diving into this. Goes over what most of the comments here mention with Node being a C\+\+ program that uses V8 to compile JS code, etc. I highly recommend it!",1528121378.0
cspa-exam,"This is a great question that brings up great points in how coders \*should\* think about things.

Understanding that \*code is just code\* that is interpreted \(or compiled\) by some processor, regardless of whether it's front end or back end, is a fundamental concept that great software engineers should understand :\)",1528138245.0
EuqlinSankyo,"This is my 4th time rewriting this comment because there are just too many things to say. If you don't know anything about scaling, [take a look at this article](https://hackernoon.com/practical-scaling-techniques-for-web-sites-554a38dbd492), it covers some of the most important concepts. In fact, you can learn pretty much everything you need by googling, so I'm gonna say something different.

Not so long ago I went to a talk titled ""Lessons Learned in Scaling Facebook"" by Bobby Johnson, who used to be the director of engineering at Facebook. The most important thing he stressed was that you must measure absolutely everything you can (response times, loads, number of requests to DB, etc.), because oftentimes what you think is good for scalability is not as helpful as you want, and something that you would never try would actually half the load on your servers.

Of course, ""measuring everything"" assumes you've already designed your app for scalability, because applying scalability optimization retrospectively is a nightmare. As you said, caching is probably your best friend - but you must remember that there are millions of types of caching out there - CPU cache, file system cache, database cache, web server software cache, browser cache, etc. Knowing where and what to cache is a killer skill when it comes to scalability. Even if you think that your webapp requires hard real-time results, there is still something somewhere that you can cache.

Now some things I remember from Bobby's talk:

Regardless of how well the load balancer in your system works, you're still likely to get some load spikes. Here you must be smart about how you handle requests: One way is to ""queue them up"", so your users will just see slower response times, but everyone will get served eventually. That said, from Bobby's experience, they found it much more useful at Facebook to completely drop some requests when the load on the servers is high. This way, server can pretend that there are less requests than there actually are. Most of the users will get served quickly, requests from a few will get dropped, but ""overall"" happiness level of users is gonna be high.

To help with some requests getting dropped, Facebook's frontend (i.e. client-side JavaScript) is also intelligent about how it makes requests. First of all, they have some sort of request budget: This way, if frontend sees the user making too many requests, *frontend itself* will delay sending them, decreasing the load on the server. Secondly, the frontend knows to retry some requests *N* number of times before giving up.

*As an aside:* I can't recall the exact story, but Bobby mentioned that, back in the day, his team has upgraded several server racks running particular software, and since they had 12 separate machines running it, they thought the probability of them failing all at the same time is low. What actually happened was that every machine was leaking memory at approximately the same rate (thanks to a good load balancer), so they all crashed simultaneously and brought one of the Facebook services down.",1528086806.0
soulsizzle,"I always refer to The Twelve Factor App. The concepts are perhaps not advanced, but they are very essential guidelines that will guide the rest of your decisions. 

https://12factor.net",1528116453.0
chrisdefourire,"- a scalable database is essential
- statelessness makes scaling easier
- a system is only as fast as the slowest component",1528085542.0
iends,"You need multiple layers of caching. Distributing caching is good to cache between hosts. You need to retry failures. You need to circuit break if operations fail. You need monitoring and a way to measure performance. You may need to shard your database, and you may need read replicas. You certainly need automatic failover. You need to optimize you database access with indexes and eliminate slow queries. You need to manage unbounded concurrency.  You need automatic scale up based on your bottlenecks like CPU and memory. You also should scale up based on application specific metrics. You need a fast deployment pipeline so you can respond to issues quickly. You should automate everything. You should take advantage of CDNs for static assists. You should have servers geographically close to your customers. Communicating between servers over HTTP may be problematic if you need to fanout to many instances so you may need to look at tools like Kafka. For many services at some point it becomes easier to scale by decomposing the problem into smaller services that can be scaled independently. Blue green deployments can help manage deployment risk.  ",1528085825.0
MWrathDev,"- caching (both server and client side)
- session persistence
- distributed storage (CAP / ACID)
- auto-instance management/scale

",1528087494.0
ChronSyn,"Some great comments already. One which I didn't see mentioned (sorry if it was) is process affinity (which is much more of a concern on Windows due to it's design).

On multi-core systems, processes will spawn and be assigned to be able to use every core unless they are launched with parameters or under conditions that state otherwise. This is usually a good thing.

However, what you may find is that if (in the case of node) you're using the cluster module and are experiencing high concurrency, you may find yourself losing performance. The reason for this is that the OS will attempt to swap threads to cores with lower utilization, but this operation has overheads.

The solution to this is to ensure that if you're spawning multiple threads (such as with cluster), that you spawn each on different cores and limit their affinity to that core. This prevents the context switching and opens up performance a little bit more.

This comes with it's own challenges such as socket-events and session handling, but there are solutions available that can assist with that (such as redis or a DB).",1528115573.0
NetOperatorWibby,This is a fantastic question with fantastic answers. Bookmarked.,1528101939.0
Parasomnopolis,"* http://jsfeeds.com/
* http://www.echojs.com/
* http://www.daemonology.net/hn-daily/
* https://www.youtube.com/user/jsconfeu/videos
* https://vimeo.com/ndcconferences/videos
* https://nodeweekly.com/",1528100945.0
Big_Cannoli,Coding Garden on Youtube. Man goes step by step building projects from scratch and answering most questions on the chat. ,1528131057.0
petercooper,https://javascriptweekly.com/latest,1528328564.0
Ryan9104,"You just need to setup the models. You might be able to use one of these to get a start.  
  
https://github.com/Kononnable/typeorm-model-generator  
https://github.com/SweetIQ/schemats  ",1528074802.0
soulsizzle,"If you just want to write SQL queries, you'd probably he better off using something like knex.

However, you can certainly connect to an existing database using TypeORM. However, you will have to create the corresponding Entities for your database tables. These are basically the Object in Object Relational Mapper (ORM). You can use the query builder if you need to do more complex queries.",1528081493.0
Asiatic_,"I think sometimes we think too hard about what we should make lol.

My advice would be to think of an application that could benefit you in terms of your hobbies. Even if there exists an application for that, build it anyways, it might lead you to learning things you never would’ve thought of.

Main thing is to avoid thinking you’re “too good” to build an app that comes to mind. 

Good luck out there! ",1528078669.0
ggolemg2,Contacts cloud storage with multi-site interop and contact sharing.  It'd help a lot of people if the want to migrate contacts or share contacts between them.,1528075886.0
steamngine,"Endpoint tester, price compared for insurance, aggregate twitter feeds to useful charts with charts and pet sitters in your area #younightstillneedacart",1528117422.0
cjus,"Hey there. This is Carlos from the Hydra team.  A while ago I wrote several posts for the RisingStack community blog.  https://community.risingstack.com/author/carlos/ Those demos might be a bit out of date so I'm planning on writing a new tutorial and posting on our company tech blog: https://medium.com/flywheel-tech
The Hydra repo page has most of the links: https://github.com/flywheelsports/hydra and documentation is available as a gitbook for online and offline viewing: https://www.hydramicroservice.com/
In the meantime I highly recommend joining our slack channel where you'll get full support. Info is available on the github/npm pages.  Thanks for considering Hydra.",1528196059.0
Krysalead,"Hi,

I have implemented hydra for my micro service but using the cli. Super simple, except I had to remove the logger so do not use it. Then I did contact my micro service using makeRequest as the direct call was not working due to a change in the api. I had issues because my services are running on different network. So I would follow the getting started on their website and ask me or slack if you need.",1528088714.0
hkd987,"u/wesbos courses are the best, but just buy the course he works his butt off and they are totally worth paying full price.",1528074932.0
thedevoo,Do you have a link to the course?,1528059930.0
killergamer0,"I’d be interested, send me a PM?",1528075324.0
ognjengt,"If I understood you correctly, but if you are making android app or chrome extension it will have front end, and you can implement the functionality of sending tokens to the server in the head of the request for example.

You can check out this video for better understanding of authentication and authorization through JWT tokens: [https://www.youtube.com/watch?v=7nafaH9SddU](https://www.youtube.com/watch?v=7nafaH9SddU)",1528054318.0
jgordon615,Implement JWTs and write some middleware to check the validity on every call.,1528079825.0
FreshOutBrah,express-session,1528087233.0
isakdev,JWT Bearer tokens,1528104299.0
heywinstonillraceya,I use it to have the same object structure throughout the whole stack. Helps keep code clean and focused. ,1528051849.0
w3bbo1,"Quick and easy to knock something up, be it a cli tool or a website + I know JavaScript",1528051872.0
thepotatochronicles,"I like the event loop model, and how ES6 & node 8+ supports it so well. Furthermore, it’s pretty much the only ecosystem in which almost every package supports some form of asynchronous operation. Not to mention he huge swath of libraries out there. People shit on it, but honestly it’s really nice being able to pull in libraries for so many occasions. That, and yarn is really, *really* nice to use. ",1528062477.0
oldyoyoboy,Because I hate python...,1528058580.0
tselatyjr,"Inherit async, widely supported, easy tooling, expanding community.

Oh, and it's one of the highest paying languages for backend right now. ;-}",1528064321.0
iends,"Time to market is faster with scripting languages and v8 is the fastest scripting language runtime. The package ecosystem is huge, even if it sometimes lacks quality. TypeScript can be added on to help manage code complexity after the fact once team size reaches a certain scale. ",1528086829.0
PublicPhilosopher,I use Node.js because I love JavaScript and I would use JavaScript in everything. ,1528058645.0
mhmdn16,JS at server side. Fast. Huge community. The environment the same with client side. Too many libaries. Fast coding,1528076835.0
djslakor,"We switched to it at work because it was significantly faster than PHP \(though that was during the 5.x days, may not be as wide of a margin now\).

I could write basically anything I wanted in either PHP or JS \(node\) on the server, but at this point, I would pretty much always pick JS.  I'm in ES6/Typescript all day and know the lodash functions off the top of my head.  Having to jump back into PHP stdlib would be painful.

It's not that I think PHP is a bad choice, per se, I just see no advantage in picking it today.  A whole bunch of really smart people are working on Node.",1528137618.0
ZoDalek,"First out of curiosity (back from the alpha days, that feels like ages ago now), now because at work we found Node + React the most practical approach to share client and server side rendering code. For everything else beyond the browser we use C#.

Personally I find the JS world too much fad driven and inward looking.

For personal projects I use C, finding its simplicity and directness refreshing.",1528061921.0
seetler,javascript,1528063595.0
BloodAndTsundere,"I run a small business and do all the tech work, which includes scripts, services, internal web apps, api scraping, DB admin, etc. I like that I can develop quickly with Node. If we were going to scale out anything I'd probably go with a more mature and locked down technology, but the MEAN stack is perfect for us at the moment. I also enjoy Javascript as a language",1528067393.0
opusprime,sockets,1528069768.0
___Grits,"Ability to execute client side js code on the backend. Which allows for things like isomorphic/universal react rendering. 

Abundant and easy to use libraries through NPM make development easy.. a little too easy sometimes. 

Natively async, perfect for event based backend programming. 

JavaScript is very expressive and fun. I view JS as a pallet of nice paints, while languages like Java as a bucket of metal brackets and needles. ",1528074989.0
Mjoldur,JavaScript looks nice and terse on screen. I'm a front-end developer so it's convenient to be able to do server-side programming in the same language and share parts of the code. And the ecosystem and community are very active.,1528096472.0
ChronSyn,"Because I can use it for absolutely anything. If I want to access the file system, I can do that. If I want to do HTTP requests, or use websockets, I can do that. If I want to write a system script where the batch or bash equivalent might be outside my scope, I can do that. If I want to build a gateway interface for a LAN (e.g. listing files on a NAS), I can do that. If I want to stream files, I can do that. If I want to build an API, I can do that. If I want to combine all the above, I can do that.

Being able to build a server application as rapidly as node allows is a huge benefit - that server could be used in a desktop environment to power an application, or to run scripts or commands. Essentially, the flexibility it offers with doing 'anything' while extending a front-end skill set is really valuable. Node was how I learned JS, and moving from being a pretty awful Delphi developer to being able to build anything was refreshing.",1528187567.0
zkochan,"pnpm is a Node.js package manager \(like npm or Yarn\).

The main features of pnpm that make it unique are:

1. disk space efficiency. One version of a package is only ever saved once on a disk
2. strict \(non\-flat\) node\_modules structure. Code has access only to packages that are declared in \`package.json\`",1528030648.0
rotharius,"Please, if you release a new version of a project and you are trying to promote this project, include some info about what the project entails.",1528030390.0
1ZDM7oR3,"There's a lot of [information](https://softwareengineering.stackexchange.com/questions/307467/what-are-good-habits-for-designing-command-line-arguments) about that on the internet. The main advice I can give is: Try to be  consistent with other command-line tools as much as possible and, if possible, use libraries that help you with that.",1528023003.0
shazron,Use oclif.io it has all the tools you need.,1528022808.0
remco_cloud,"What should it do? Any arguments involved, check tput...",1528021741.0
breizoreol,"I used the module terminal-kit for my spotify controling CLI tool:

https://github.com/breizoreol/spoticly

https://github.com/cronvel/terminal-kit

It really has all you would need, and if you don't want to include all of it, you can still find the individual modules on NPM... 

",1528045493.0
ZoDalek,"[Pike & Kerninghan, Program design in the UNIX environment](https://sjmulder.nl/dl/pdf/1984%20-%20Pike%20&%20Kernighan%20-%20Program%20design%20in%20the%20UNIX%20environment.pdf)

Old, but relevant as ever, this paper underlines the value of simple, composable programs. The money quote:

> The key to problem-solving on the UNIX system is to identify the right primitive operations and to put them at the right place.

But take a few minutes to read the paper, even if you're not building a classic style utility.",1528065987.0
EuqlinSankyo,"For argument parsing: I've tried several tools and ended up using [Caporal](https://www.npmjs.com/package/caporal), definitely the most clean and straightforward command/argument definitions I've seen so far. Here's [an example](https://github.com/TimboKZ/Rammy/blob/master/bin/rammy-cli.js) of a file that defines some CLI commands.",1528089588.0
tehpsalmist,Commander.js,1528254802.0
niet3sche77,"The main issues are just now being addressed. Lodash will be a module you’ll use a lot. Let’s say you have 200 repos and test projects lying around. Guess what? You’ll have 200 COPIES of probably-identical lodash folders. 

Newer package managers are doing the symlink thing, but the traditional monolithic model can be a huge waste of space because it’s sub-optimal. 

And trying to npm/Yarn together can be chaotic, especially if you have packages in global-space (*-cli, nsp, snyk, lcov, etc.). This isn’t a node_modules problem, but a more general one. 

To address your original question, I’d imagine the criticism comes more from meta-management concerns rather than packages being “too big.” I do, when making a build, like to target specific elements of a library rather than pull in a whole library, and I know there are tools that do this automatically, to reduce your final bundle size. ",1528019970.0
zkochan,"If they do it, just send them a link to [pnpm](https://github.com/pnpm/pnpm).

pnpm is a Node.js package manager that uses a global storage and hard links to link the packages from the global storage.

>One version of a package is saved only ever once on a disk. So you save dozens of gigabytes of disk space!

It exists for several years already, is well maintained and used by some [big projects](https://pnpm.js.org/en/users.html).",1528023104.0
vinnl,"One reason is that you lose track of what (sub)dependencies are installed, i.e. what code is included in your app or what postinstall scripts are run on your computer.

That said, I think the size of node_modules makes it a catchy way to highlight the issue, but it's definitely not a problem that's unique to Node.",1528034936.0
megacos,"If you are on a slow line or want to use minimalistic environment with little disk usage it takes time to download all dependencies and it's inconvenient.

Worst is that many packages contains the whole kitchen with the sink and you need to download all even though you only want a spoon and a fork.",1528036321.0
alexkhismatulin,"Totally agree with guys above, but also this is the joke about the way most JS devs solve their problems. Often you need one small 10-lines-of-code feature, but you plug a big library for that and use only one feature from that. Even small projects' node_modules becomes bloated. ",1528020781.0
puketron,"one time i was trying to wipe an old hard drive and i was able to delete everything on the drive including the OS, except for some of my development folders where i'd used node. the file paths for deep modules were so long that windows could no longer touch them. i wound up having to use robocopy to get rid of everything lmao. this is just an average day in the life of someone who is too lazy to develop things in a linux VM, but still, that's always stick with me.",1528038844.0
DJDavid98,I've seen cases where Windows Explorer would fail to display files in a node_modules' 5-6th subfolder because the path was too long due to all the dependencies.,1528054598.0
falconmick,Because they’re upset that you can run the same app built with a package.json file on any PC Mac or Linux machine with 0 effort whilest they try to wrangle their makefile to work on more than just Linux ,1528025425.0
rabidavocado,"Hey npm, I want to build a small website and need this one js library to write a few lines of js. Sure thing, here’s 2gb of dependencies. 
It’s bloated, includes unnecessary dependencies and takes ages too upgrade/install. ",1528020002.0
nikaone,"I code node for 2 years, now the size of node_modules folder in 'space sniffer' is significant, plus,  Chinese user have problems to connect to github, I used sass, so everytime new project created, I had to download a sass parser(dependent by sass plugin) from github, even I had downloaded it way many times.

BTW, I have switched to stylus, beautiful syntax, no further dependency.",1528027029.0
BithTree,"The more modules, the more points of weakness. The [leftpad story](https://blog-npmjs-org.cdn.ampproject.org/v/s/blog.npmjs.org/post/141577284765/kik-left-pad-and-npm/amp?amp_js_v=a1&amp_gsa=1&usqp=mq331AQCCAE%3D#amp_tf=From%20%251%24s&ampshare=https%3A%2F%2Fblog.npmjs.org%2Fpost%2F141577284765%2Fkik-left-pad-and-npm) is a great example of this.",1528059914.0
PandawanFr,"Oh okay, well thanks a lot! I’ll try it out!",1528042748.0
DeepSiderZ,"In my own API I add the `user` document in the `ctx` to be able to use it later in my controllers. I add the document in the authentication middleware :

    const auth = async (ctx, next) => {
    const { authorization } = ctx.request.headers
    if (!authorization || !authorization.startsWith('Bearer ')) {
    ctx.throw(401)
    }
    const token = authorization.slice('Bearer '.length)
    const myToken = await UserToken.findById(token)
    if (!myToken) {
    ctx.throw(401)
    }
    if (myToken.expired()) {
    ctx.throw(401, 'Expired token')
    }
    ctx.myToken = myToken
    ctx.me = await User.findById(myToken.user)
    if (!ctx.me) {
    ctx.throw(401)
    }
    await next()
    }

Then you can use `ctx.me` to knwo if the user can delete something",1528116152.0
Wickity,"This is difficult to answer given only this information.  Which user?  Have you `require`d your mongoose schema?

My suggestion would be to write a function that takes a user and post I'd, and does the work of contacting the database to check permissions.

Then you can wow that finding into a Koa middleware.  They're two separate problems.",1527986358.0
DocileDino,"There are so many packages out there; unfortunately you'll just have to make a few searches, try a few that look promising, facepalm a few times, then rinse and repeat until you find a decent package :) I started the search for you here

https://www.npmjs.com/search?q=Node%20file%20system

I hope someone already knows of the perfect package for you though. Good luck!",1527983329.0
mr-developer,[Traversy Media](https://www.youtube.com/user/TechGuyWeb),1527964976.0
afewseekhay,https://github.com/rosariorussell/Learn-MERN-stack-hacks,1527965103.0
tapu_buoy,"I have been following CodeBurst.io's CEO Brandon Morelli's [this GitHub Repo](https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer) there are 2 resources available there, one is a 2 hour long [YouTube video](https://www.youtube.com/watch?v=cV-bGvnRZdw), in which the author creates nice App.


This might not be very good but I have got it from Quora answers

MERN stack

* • [Build a complete React app, step-by-step with the MERN stack](https://hashnode.com/post/react-tutorial-using-mern-stack-ciiyus9m700qqge53mer0isxz) by @[vasansr](https://twitter.com/vasansr)(ES5)
*	• [Building a School Finder by Nishant Chaturvedi](https://www.codeproject.com/Articles/1067725/Part-Building-web-app-using-react-js-express-js) (ES5)
*	• [Create a character voting app by](http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio/) @[EvNowAndForever](https://twitter.com/EvNowAndForever)
*	• [How to Create a React.js Support Ticketing System Using MongoDB](https://www.davidmeents.com/create-a-react-js-support-ticketing-system-using-mongodb/) by @[DMeents](https://twitter.com/DMeents)
*	• [React Getting Started comment box  with the MERN Stack](https://medium.com/@bryantheastronaut/react-getting-started-the-mern-stack-tutorial-feat-es6-de1a2886be50) by @[SpaceBrayn](https://twitter.com/SpaceBrayn)
*	• [Authentication in React Applications](https://vladimirponomarev.com/blog/authentication-in-react-apps-jwt) by Vladimir Ponomarev
*	• [Data Persistence and Sessions With React](https://code.tutsplus.com/tutorials/data-persistence-and-sessions-with-react--cms-25180) by Tom Whitbread
If you find more, please add them to this little app I made to keep track of them: Mern Stack Tutorials
",1528001951.0
turd_burglar7,Yep Stephen Grider. Udemy. His are the best.,1527973058.0
Drunken__Master,"Stephen Grider has 2 Udemy courses on the MERN stack and Brad Traversy has recently released a new MERN stack tutorial on Udemy, all of them are great courses.

BUT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

If you wish to be an employed web developer you should focus on learning PostgreSQL instead of Mongo, and for that you should be looking into courses by David Katz.",1527966049.0
roseinapuddle,"I wrote a tutorial on adding a simple express server, mongo DB and passport.js authentication to a react project.  Hope you find it helpful: [https://medium.com/@brendt\_bly/simple-mern-passport-app-tutorial-4aec2105e367](https://medium.com/@brendt_bly/simple-mern-passport-app-tutorial-4aec2105e367)",1534714060.0
keosen,"Do it right, go with H instead of E.",1527985330.0
MrStLouis,Honestly the trueTypeOf is my favorite part of this. I love how that works,1527956537.0
oprearocks,"Added an “explainer” video for that type checking code, thanks for pointing out that it was important/useful.

Better type detection in JavaScript https://youtu.be/nL3iGyPiLHw

/ht /u/MrStLouis & /u/NuclearSpaceHeater ",1528121390.0
IUsedToBeACave,"It handles it just fine, but definitely check out [Knex.js](https://knexjs.org/) if you go this route.",1527956191.0
bendz_wp,"Not in particular no. Check out sequelize and you can pick whichever rdbms you like

http://docs.sequelizejs.com",1527950291.0
martiandreamer,Define “enterprise”.,1527951106.0
kapv89,"None. And I have a pretty complex piece of software built on node.js and postgres. Heavily used jsonb datatypes for reaching the point where we have a product market fit. Now planning v2 of the product which will make the schema even more ""relational"", and will use jsonb data type only where it's needed.",1527963368.0
SomeRandomBuddy,Why in the living fuck would the data store matter?,1527949932.0
rbprogrammer,"I actually built this since I wanted to integrate ""room temperature"" capabilities into a [baby\-monitor](https://github.com/rbprogrammer/baby-monitor) that I am building.  I'm still fairly new to nodejs, but when I realized I could turn the temperature stuff into a legit reusable npm module it gave me the chance to learn that aspect of node.

There's nothing actually new or exciting with this project, but since I'm learning nodejs more and more I was pumped to build and publish a real module.",1527938721.0
dethwhores,Dope,1528023275.0
zkochan,"1. `npm update` will only update to the latest available version that satisfies the range specified in `package.json`. So if you have `""foo"": ""^1.0.0""` in `package.json` and `foo@2` is latest then you should run `npm install foo@latest` to update foo to `2.0.0`

2. `npm update` only updates the root packages by default. In order to have a deep update, run `npm update --depth 999`

> Ad: check out [pnpm](https://github.com/pnpm/pnpm) :-)",1527929461.0
Sn0wCrack7,"readFile is asynchronous, you can't really update variables from outside the callback and have them usable after the callback, that's the purpose of the callback. 

Update the content of the div in the callback itself, or use the synchronous version of readFile instead",1527926967.0
Tvde1,Oh my god,1527939755.0
keithwhor,"Hey u/warpedspoon. If you want to build an ""REST\-like"" API super easily, I suggest cutting all the unnecessary config and tooling and just jump straight to [code.xyz](https://code.xyz). It's an in\-browser API editor that will automatically deploy your API for you as scalable, serverless functions \(runs atop StdLib infrastructure\). Disclaimer is it's not ""traditional"" REST, it follows more of a functional / RPC pattern that modern APIs like [Stripe](https://stripe.com/docs/api) have adopted. \(If you want command line tools, [those are available as well](https://github.com/stdlib/lib).\)

You simply create one `[endpoint].js` file in the `functions/` directory for each endpoint \(where `[endpoint]` is your endpoint name\). It's that easy.

If you're wondering why you haven't heard of StdLib / [Code.xyz](https://Code.xyz) yet, it's because we literally [launched two days ago where we also announced our latest round of funding from Stripe](https://stdlib.com/blog/stripe-code-xyz). \(Hey, I'm the founder and CEO of the company and spend my Saturday nights on Reddit ;\)\).

Let me know if there are ways the team and I can help!

Cheers,

\- Keith",1528003423.0
mrtraan,If I were you I would just follow a tutorial on how to write a web server in pure C.  This should help you understand what’s going on under the hood.,1527927749.0
NodeNoodle,"Research into these topics:  


HTTP protocol  
client\-server model.  
TCP/IP model.  


These should give you a basic understanding on how the internet works at a general level. From there you will be able to know more topics to research and get informed and explore whatever you fancy about the subject.",1528372048.0
KyleG,"Change your nginx/Apache config to do a 302 temporary redirect to a static ""closed for maintenance"" page for all requests.",1527908661.0
merb42,"All great answers so far and just wanted to throw out another option if you are using expressjs (other frameworks have similar options) you could write a simple middleware function that responses with a static html page to all routes by using the ""app.use()"" option. See expressjs docs for how to erite middleware:

https://expressjs.com/en/guide/using-middleware.html",1527912699.0
HoneyBadger126,You could set up an interceptor.,1527908248.0
veksaryn,"Do you have a reverse proxy fronting your app? It's pretty common practice to swap out your configs at that level to have traffic redirect to a static (files on the server, independent of your front end code) maintenance page.",1527908675.0
IUsedToBeACave,```.toString()```,1527893260.0
RamesesLabs,Great presentation and we will definitely be looking into building with Redis more. Keep up the good work.,1527939332.0
zokker13,This can happen when your dependency isn't updated. There isn't much you can do but to mail the maintainer and ask him to update.,1527882538.0
BenjiSponge,"Given the information we have, there's no way if we can tell you to be worried.

That said, if there's something catastrophic (like a left-pad type of package that actually sends your environment variables to another server) that had been picked up as a known vulnerability, you (or at least I) would have probably seen it by now and the JS community would be in an uproar.

Most of the time, it's just something a potential buffer overflow if you call an API with the wrong types, used by a package that uses the buffer correctly. Stuff like that. That's unfortunately how vulnerabilities tend to cascade: you just don't know unless you actually audit it.",1527890445.0
StoneCypher,"so run `npm audit` and tell us what it says

you can also get these by running snyk or turning on github investgation

npm audit is going to tell you that some list of 12 deps of your various packages are vulnerable

most likely all you need to do is update the deps",1527891468.0
cspa-exam,"AWS Lambda?  Serverless is so hot right now ;P

We use Lambda as well as EC2/ECS/ELB.",1527890001.0
move_like_lasagna,"ec2, nginx",1527876336.0
zkochan,If you just want to hack and play around then [Glitch](https://glitch.com/) is a pretty good service.,1527929599.0
mclovin4009,S3 \+ EC2 \+ ELB currently. Though gonna try it out a raspberry pi soon :P,1528011722.0
AlexanderHorl,"Currently running on a free tier ec2, though thinking about getting an own vServer to host all my stuff. ",1528059133.0
kyle787,"If you do `vim ~/.bash_profile` do you see these lines?

    export NVM_DIR=~/.nvm
    source ~/.nvm/nvm.sh

It is possible that the install didn't add them correctly, if they aren't there you should add them.  Pretty sure that when you type `/bin/bash` it starts a new bash instance using `.bashrc` while the osx terminal typically runs as a login shell rather than non\-login.  You may also want to check if your `~/.bash_profile` has` source ~/.profil`e.

For what it is worth, I an many people I work with, use iTerm2 instead of the default terminal app.  You can use Oh My Zsh along with it and get some nice shortcuts and themes.  They are both free btw.

* [OSX Login Shell](https://unix.stackexchange.com/questions/119627/why-are-interactive-shells-on-osx-login-shells-by-default)
* [iTerm2](https://www.iterm2.com/)
* [Oh My Zsh](http://ohmyz.sh/)",1527879740.0
BenjiSponge,"You're gonna have to explain more about what's going on with your setup. What terminal emulator are you using? Can you show us the output of `echo $0` (before you say `/bin/bash`)?

It sounds like you're not properly sourcing your .bashrc, which probably means you've got a weird setup.

Eventually, the goal is to properly set your `$PATH` variable to include your nvm directory in whatever setup you have.",1527871773.0
listgrotto,"Geez. I'm in the 5%.

Minority (cheap labor) for life.",1527889975.0
omar-hydrah,"Does it have to be a GET request? 

I didn't understand whether or not you succeeded in getting the data into the view, but you can send the parameters of the path to your ejs/view file, using express.

In theory:

    res.render(""/form"", {
        field1 = req.params.field1,
        field2 = req.params.field2
    });

Then your data would be accessible in the view.

Can you share the code for the form and the router that handles the form?

This will help in ""simplifying"" your journey:

http://expressjs.com/en/api.html",1527868831.0
Tvde1,Just use regular html forms...,1527880742.0
warpedspoon,how does npm make money? ,1527883911.0
Ashtefere,Don't know how to do security yourself? Buy someone who does!,1527888373.0
yarauuta,Is npm rich?,1527877395.0
NodeNoodle,"Ts is probably going to become part of the new standard in a few years. Even the creator of NodeJs recommends using it for backend.   


This is a no\-brainer, go for TS, it allows much more control over your code and environment and it's gonna become a de\-facto standard.  


Look at this part of the video (22:26)  


[https://youtu.be/M3BM9TB\-8yA?t=1346](https://youtu.be/M3BM9TB-8yA?t=1346)",1528371792.0
,"I always use typescript with node. Especially for large projects if you want to help avoid shooting yourself in the foot later. Most popular node libraries now days have typings with them and NPM has a special typings repo. Eg;

    npm install --save libraryName // Install the standard JS
    npm install --save-dev @types/libraryName // Install the typescript definitions that go with the newly installed library

That, combined with VSCode and you're well on your way :)

If you later decide you want to work with just JS again. You can always ditch TS and use the nicely generated JS that TS created.",1527848612.0
OzziePeck,"Okay, this is getting repetitive. ",1527846093.0
,How asking a question from another newbie can be very helpful? I'd suggest answering/reading/asking questions on stackoverflow instead!,1527841755.0
Jake_Jeremy,This seems like the garbage collector kicking in. Have you tried a memory profile?,1527845109.0
jwadhwani,"Jake\_Jeremy is probably right. Do this to see GC activity:

node \-trace\_gc your\_web\_app.js

Look for traces when your app freezes. That will tell you whether it is GC activity that is freezing your app or something else is afoot.

If you need a more verbose trace you can add \-trace\_gc\_verbose in addition to \-trace\_gc

Hope this helps!",1527862920.0
,"Welcome to glorious world of npm modules! There are many of them! Most of them have 0 downloads per week! But don't get disappointed, it's normal.",1527838434.0
GregsGrogs,Welcome! Ill give it a go!,1527866773.0
Jake_Jeremy,Why do you have so many empty lines in your code? Often times two...,1527844970.0
psayre23,"My vote would be to write the code to a file, then spawn that. The advantage is you have a record of what you ran last, and it’s easier to debug issues. 

If you want to execute it a little more safely, might try running it in a docker container. I think that’s what CodePen does when they are pre- and post-processing files. ",1527833822.0
jansemand,"There's also the [VM module](https://nodejs.org/api/vm.html), which allows you to create a separate sandbox, controls its globals etc.

With eval the code has access to everything from the program you are running it from, while with child_process, it has access to nothing. The VM module should give you the best of both worlds.",1527840870.0
jakubiszon,"As an alternative to eval - you can pass your code to function constructor as the function body.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",1527836537.0
mtaon,"Good suggestions so far. I just want to point out that #2 is still vulnerable to code injection: not in JS but in shell. To fix this, either write the code to a file as suggested or write the code straight to the standard input of the subprocess.",1527850980.0
phizm,Try Pm2,1527866966.0
Pringelman,"Maybe provide a bit more context? I'm not sure why you would need to do any copy and pasting of files to start multiple instances of the same app. 

You could simply iterate through a config and spawn processes programmatically. Or maybe consider solving this with environment variables. 

It's hard to tell exactly what problem you're trying to solve without more info.

EDIT: after rereading your question again I suspect you might want to consider https://nodejs.org/docs/latest/api/process.html#process_process_argv",1527830825.0
BlindStargazer,Noice,1527832339.0
ppernik,"Good post, thank you for sharing :)",1527849412.0
VIM_GT_EMACS,i've used motionai for a node facebook chatbot that ran in front of a server that used tesseract for OCR. Motionai made things really easy. ,1527857021.0
floweb,"This is good, but just use [botkit](https://botkit.ai/), it will be easier, better, faster, stronger.",1527836985.0
OzziePeck,Another one of these?!?!?,1527887569.0
darkdigitaldream,"My guess is you have an import or require call that uses a relative path and fails to find the dependency. You then have an undefined object you try to use, and the above error occurs.

",1527822269.0
angusog7x,The best thing would be to find and fix the code that’s misbehaving with the relative reference.  But you can also force the current working directory to be specific path using process.chdir(directory). See https://nodejs.org/dist/latest-v8.x/docs/api/process.html#process_process_chdir_directory,1527826689.0
BenjiSponge,"This is a web server framework like express.

It should probably say that somewhere near the top. ""Really fast and under 150 lines of code"" doesn't tell you why you'd want to install it.",1527819173.0
madwill,Men that intro is obnoxious. ,1527834880.0
demonspeedin,"Saying you're the fastest framework in the world sounds like a bald statement to make. You might have the fastest nodejs framework, but you're not even close to the *fastest framework in the world*
https://www.techempower.com/benchmarks/#section=data-r15&hw=ph&test=plaintext

You can add your benchmark here and have some external source verify your claims.
https://github.com/TechEmpower/FrameworkBenchmarks/tree/master/frameworks/JavaScript",1527848147.0
SkaterDad,"Would you mind giving us some insight into how you're achieving the higher performance?

I see you use the same route matching library as Polka, so that's at least part of it, but I'm curious what else sets Rayo apart.",1527860350.0
aichholzer,"Rayo can now be hunted on ProductHunt [https://www.producthunt.com/posts/rayo-2](https://www.producthunt.com/posts/rayo-2)

Happy coding!",1532920548.0
aichholzer,"Lately, I have been working on a new project; super fast and minimalist frameworks for the modern web. Nodejs has been the first one to released. Please have a look, fork it, submit PR, submit issues. Contributions in the other languages would also be very welcome. \-\> [https://github.com/GetRayo](https://github.com/GetRayo)  
Helping spread the word would be highly appreciated.  
Star it. Watch it. Follow it. Save it. Share it.  
😎",1527832269.0
ecares,[https://github.com/nodejs/security\-wg/tree/master/vuln/core](https://github.com/nodejs/security-wg/tree/master/vuln/core),1527804855.0
Lost_sand,That shit is for fucktards.,1527824436.0
daywalker051,Dumb.,1527868223.0
LeeMing3,"Curious to know why you need to do this? Anyhow you could simply use the test command to run your app.

> and no, running the test command from within node (like they suggest in Using mocha programmatically) is not enough for me.

How come? Sounds exactly like what you're after",1527794453.0
Dw0,"What do you mean by ""run in normal node environment""?",1527794445.0
AugmentedCryptoWeed,"sequest looks cool. But it is not taking the password parameter

events.js:160

throw er; // Unhandled 'error' event

\^

Error: All configured authentication methods failed

at tryNextAuth \(/vagrant/node\_modules/sequest/node\_modules/ssh2/lib/client.j

s:294:17\)

at SSH2Stream.onUSERAUTH\_FAILURE \(/vagrant/node\_modules/sequest/node\_modules

/ssh2/lib/client.js:473:5\)

at emitTwo \(events.js:106:13\)

at SSH2Stream.emit \(events.js:191:7\)

at parsePacket \(/vagrant/node\_modules/sequest/node\_modules/ssh2\-streams/lib/

ssh.js:3647:10\)

at SSH2Stream.\_transform \(/vagrant/node\_modules/sequest/node\_modules/ssh2\-st

reams/lib/ssh.js:551:13\)

at SSH2Stream.Transform.\_read \(\_stream\_transform.js:167:10\)

at SSH2Stream.\_read \(/vagrant/node\_modules/sequest/node\_modules/ssh2\-streams

/lib/ssh.js:212:15\)

at SSH2Stream.Transform.\_write \(\_stream\_transform.js:155:12\)

at doWrite \(\_stream\_writable.js:333:12\)",1527786842.0
AugmentedCryptoWeed,"[https://www.npmjs.com/package/ssh2\-client](https://www.npmjs.com/package/ssh2-client)

Works to open an interactive terminal.",1528388804.0
TheOneRavenous,"Could take heap snapshots or look at the heap directly using the node core module process.  [https://nodejs.org/api/process.html#process_process_memoryusage](https://nodejs.org/api/process.html#process_process_memoryusage)

Also look at the heap snapshots tag [https://nodejs.org/api/cli.html#cli_track_heap_objects](https://nodejs.org/api/cli.html#cli_track_heap_objects)

You can hit endpoints in your app and then have those endpoints trigger the memory usage. 

Just be aware adding this check will add memory usage, so you'll need to observe a new baseline mem usage with this added and then start testing to find the leak. 

You can also do a heap snapshots in node and load the snapshot into Google dev tool inspector. Not sure if you've done that since you didn't mention the word snapshot or heap.
",1527782770.0
cspa-exam,"To clarify: So your server\-side Node app's memory is increasing 2\-3mb/sec, but the client browser's is increasing \~1kb/s?  The two aren't really correlated IMO.

Can you provide more details on what the app does?  Is it a web app, e.g. express?  Is it some sort of script that runs in a loop?",1527795137.0
jwadhwani,"What makes you think your app is leaking? Increasing memory is not a definite clue unless the build up never stops and your app runs out of memory. . Run your app with \-trace\_gc option to produce GC traces:

node \-trace\_gc your\_app.js

or for more verbosity add in \-trace\_gc\_verbose.

V8 GC will not release memory if it feels it does not need to even if it is not used by your app\(lazy sweeping\).

See my post: [https://phptouch.com/2018/03/12/does\-my\-nodejs\-application\-leak\-memory\-5/](https://phptouch.com/2018/03/12/does-my-nodejs-application-leak-memory-5/). At the end I have analyzed a few traces. 

Hope this helps!",1527865854.0
jkwysdom,"Browser and server memory increase at different rates normally. I would look into if you boot a FRESH server and configure it with something like chef (to be the same each time) then let is run for 24 hours what happens. What about 72 hours? Then I would look into running some of your application main features where you have a script interact with it, take snapshots of usage then or better yet graph it with granafa and influxdb. Keep doing the scripting till you find the leak. This is a super rudimentary way of doing it but without seeing your code base or more details I can't give a better option.",1527796551.0
itsnotlupus,"Look for Buffer objects. Last I looked, they were allocated outside of V8's memory heap, and things like the chrome dev tools would miss them altogether.  

That could easily account for the disparity you're seeing.
",1527800027.0
confuserr,"Your insert function does not return the promise. You also have a connection leak here as well, every query is creating a new connection, but not closing it after you've finished. I'd recommend using a pool instead.",1527782767.0
TheOneRavenous,"Looks like whomever developed the API didn't adhere to common nodeJS practice of error first they also don't understand promise implementation fully. 

If it's a promise the implemention  is  usually one that follows this pattern.   ```Promise().then(result).catch(error);```",1527785297.0
NodeNoodle,"Neat info, tbh, thanks for sharing!",1527841843.0
,NPM!,1527778360.0
zkochan,"Have you heard about pnpm? It existed before Yarn and is actively maintained by this day. Only recently v2 came out [https://medium.com/pnpm/pnpm\-version\-2\-is\-out\-a015268254d5](https://medium.com/pnpm/pnpm-version-2-is-out-a015268254d5).

It is not as popular as npm and Yarn \(yet\) because we don't have such marketing resources. However, some big companies use it already, like the SharePoint team at Microsoft \(see pnpm users: [https://pnpm.js.org/en/users.html](https://pnpm.js.org/en/users.html)\).

Some of the great features of pnpm are:

1. every package is only ever saved once on a disk. This sometimes saves dozens of gigabytes on a drive.
2. node\_modules are not flat, so code has no access to packages that are not declared in package.json

Link to the pnpm repo: [https://github.com/pnpm/pnpm/](https://github.com/pnpm/pnpm/)",1527793040.0
anon_cowherd,"yarn \- workspaces, stability, won't randomly delete root and boot directories when minor patches are released.",1527879308.0
russleyshaw,"Yarn. There are several little conveniences: `yarn build` instead of `yarn run build`, `yarn upgrade-interactive` is handy. NPM 5 was too unstable for me for the longest time and eventually, I just ended up switching. ",1527794653.0
imizaac,"I think you should know both and use whatever your team uses. I prefer yarn, but I can use npm just as well. Its really a coke v pepsi difference. ",1527794856.0
joesb,A couple years ago I preferred yarn because it has lock file. Now I tends to start using npm 5+ since it’s built in. ,1527822578.0
termitavee,"I started using node with npm, changed to yarn because of speed but I came back to npm because a stability problem.

",1527780084.0
max-block,"Today the difference between npm and yarn is so tiny.
IHMO it's better to think about other tech problems.

P.S. I used Yarn when it was released, for 6 months. Now I'm back with npm.",1527836939.0
Dw0,So that you can implement a browser in the browser!,1527789856.0
TheOneRavenous,"So a couple things. If this is receiving a single message it's not the problem. This is the more basic portion of a servicebus. Your issue is in your broker logic. 

Have you checked your message size? 

There's a 64kb limit for basic tier service bus and 1mb for priemium per message.

You're showing only a portion of the problem. You need to show your work flow for message creation and queuing to dissect the problem further.

Also rule out the other issues such as message size (not likely the issue but worth doing a sanity check).",1527781370.0
JustinsWorking,"receiveQueueMessage only pulls one message off the queue.

I think you might be a little confused on how to use the Azure ServiceBusService

[https://docs.microsoft.com/en\-us/azure/service\-bus\-messaging/service\-bus\-nodejs\-how\-to\-use\-topics\-subscriptions](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-nodejs-how-to-use-topics-subscriptions)

I think you may need to look into Topics & subscriptions for what you're trying to do.

Alternatively if you really do mean to take it off the queue like this, you just need to do the following

    const enabled = true;
    while(enabled) {
      serviceBusService.receiveQueueMessage('feedback', function(error, receivedMessage) {
        if (!error) {
          console.log(receivedMessage);
        }
      });
    }
    ",1528078772.0
warchild4l,"Try to make error chexk different ly, check if there is error and log it or log message, try that. Or use then and catch promisies",1527772873.0
flipperdeflip,It is cool stuff but I hope they can afford a name change with their pretentious nonsense.,1527756496.0
acoard,"What a terrible name.

Up next: my new library called simply ""Code""",1527779892.0
aromines,"I love the trend toward serverless, and this company looks very promising.

They did however use 'humbled' to mean 'honored', which is a pet peeve of mine.",1527777768.0
IUsedToBeACave,"I think the problem you have is that you are setting hrstart on the first request object, and assuming it will be on all subsequent request objects. This is not how requests work (unless you have specifically crafted middleware to do this). 

Also, you can totally make a single api call to make both calls to the database and then return. ",1527737737.0
MWrathDev,"run 2 node processes, but you'll be creating race conditions.",1527731903.0
heythisispaul,"Figuring out who people are is hard on the internet. It's pretty tough to keep track of all that yourself. OAuth is basically the industry standard for web apps to vouch for each other. You're basically asking, Twitter, Facebook, Github, whoever to keep track of it for you in a few steps:

1. Someone walks up to your website and asks to come in. You have no idea who they are and have very little idea how to check. You ask Facebook (or whoever) to check for you since they have a whole system in place to do that.
2. They tell Facebook who they are (usually through a reroute to a login page or through a pop up and they supply their Facebook credentials) and then Facebook turns around and tells you, 'Yeah, they're who they say they are' and hand you a signed piece of paper with their seal of approval on it (Rerouted back to your application with an auth code).
3. Now that Facebook said it was okay and gave you the thumbs up, you can now tell Facebook that you're cool with letting them in if they're cool with it. Facebook says 'okay' tells the person what information Facebook is going to tell you, and then gives them a temporary key (passing the auth code for a web token).

This key is now good for whatever you set it up to be good for (at the registration of your app) and works for those approved parts of Facebook as well. Facebook told you that person is who they say they are and they're good at knowing these types of things.",1527738506.0
antwan2093,"Okay I will probably be criticised for this but a simple example is authenticating users logged in to your service through a social account. Envisage the scenario: 

User is presented with login option for Facebook 
User logs in to Facebook using their credentials 
User device receives a token, your Facebook has been configured to “call back” to your code with this 
You exchange the Facebook token (after validating it) for a JWT that you generate on your end. 
User receives valid jwt to use to call your APIs etc. 

",1527715941.0
WildBattery,"I'll take a stab at this. Don't worry about it not making sense, it can take awhile before it ""clicks.""

1. A client-side app wants to authenticate/login with OAuth.
2. So, it sends an authentication request to the authentication server. The request contains a client ""Key,"" username, and password. The client key is usually a long string of random characters.
3. (alternative flow instead of [2]) If you're using OAuth to communicate between servers, then instead of sending the client key, username, and password, you would instead send the client key and ""Client Secret"" to the authentication server.
4. The authentication server receives the request, and checks whether the key and username/password/secret match each other, and are an allowed/legitimate authentication request.
5. If the request is legitimate, the server then returns a one-time use ""Access Token"" to the client-side app. This access token has an expiration datetime, so it only works for a short while before needing to re-authenticate (or optionally ""refresh"" the access token).
6. The client-side app can now use the provided access token to securely access the actual resource server (where your app's actual API and/or data lives)

So in your case OP, I'm guessing you are building an authentication server with Node? Or are you trying to protect Node API endpoints behind OAuth from another third party authentication server?",1527716639.0
muggafugga,Unless you plan to sell your security layer I would recommend using a 3rd party oauth provider. Rolling your own is a pain in the butt,1527720893.0
dragon4chen,I’d recommend [this video](https://youtu.be/996OiexHze0). It’s pretty easy to follow. ,1527737243.0
dksch123,"Everything everyone has said this far is correct HOWEVER, what took me about 3 OAuth integrations to figure out is that not all implementations are the same. For instance some providers may provide you with an access code to use after the initial handshake while others may just want a signed JWT. While auth methods like httpBasic are more or less the same across the industry I have found that oauth differs drastically I think for two reasons. 1 - the oauth RFC defines multiple implementation options. 2 - because of how confusing oauth can be it is my opinion that while some implementations (like Facebook) are clearly oauth others I have found are seem to be very odd and awkward “oauth” schemes like box.com’s or smaller startups that don’t truly get how and what oauth is meant to be used for. Just  my 2-cents on the matter. For the record I hate having to use oauth but once you get it working it is actually very nice.",1527756790.0
jwalton78,"Lots of good answers here already, but I'll add that Github has a really good step-by-step look at how to authenticate against Github using oauth: https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/",1527790028.0
tobsn,instead of sending one password and one login you send the same but you get a token back and then that token is your credentials,1527736833.0
StornZ,What about oauth,1527721762.0
ccleary00,"This [blog](https://codeutopia.net/blog/) has always been helpful for me when it comes to unit testing stuff.  When you feel comfortable moving onto stubs/mocks (if you even need to for your tests), there is a lot of useful information on SinonJS on that blog too",1527698010.0
omar-hydrah,scotch.io,1527691117.0
Djorak,You can try starting here: https://nodeschool.io/ :),1527692913.0
AnderAlex21,"I've downloaded many great courses in freetutorials.us (through torrents though). there is no only node but a bunch of other courses. It is free, so have fun. :)",1527710265.0
Ymirrp,"recreating socket.io chat app helped me a lot, of course there's more to it but it got me started.

Edit: try googling *socket.io chat*",1527724866.0
warchild4l,"Andrew mead's node.js course is great for beginners, there you learn everything about node, also creating 4 apps, you learn express, mongodb, testing, socket.io and more. After that course go ahead and take Stephan grinder's Node js: advanced concepts. It will get you to the another level, there u learncaching, advanced testing, more advanced node, s3, file upload and bunch more( but thatcourse is more like theory than writing code so youll have to listen carefully )",1527745548.0
elrodrix,"here you have some post:

[https://blog.risingstack.com/fundamental\-node\-js\-design\-patterns/](https://blog.risingstack.com/fundamental-node-js-design-patterns/)

[https://github.com/FredKSchott/the\-node\-way](https://github.com/FredKSchott/the-node-way)

[https://medium.com/@kalin.chernev/reflecting\-on\-node\-js\-design\-patterns\-6cc6eaa584](https://medium.com/@kalin.chernev/reflecting-on-node-js-design-patterns-6cc6eaa584)",1527683409.0
HolgerD77,"There is also a Udacity course on Javascript design patterns which is teasered here:  
[https://www.youtube.com/watch?v=1MxVA8y8IBA](https://www.youtube.com/watch?v=1MxVA8y8IBA)  


Thinking on your post twice I am just wondering: how much of Node.js design patterns would be really Node.js specifc and what is stuff which could be more genericly applied to the Javascript world?  


When I look into the suggested articles from @elrodrix I am seeing things like singletons, private vs public discussions or constructor patterns. All that is not really Node\-specific.",1527685092.0
IUsedToBeACave,https://addyosmani.com/resources/essentialjsdesignpatterns/book/,1527721174.0
ecares,Hoek.merge has a different behavior than Object.assign.,1527666098.0
flipperdeflip,Unbridled hyper-focus in a shared space is a wonderful thing. ,1527669490.0
alfredmuffin,"I’m still using Yarn despite its regressions. 

npm 6 is indeed faster than it was, but it completely ignores packages sometimes when I npm install. Like, straight up doesn’t install something listed as a dependency in my package.json. 

And other times it just hangs and never finishes the install.

Maybe I'm the only one in the world with these issues but npm has continuously proven itself to be incredibly unreliable compared to Yarn.",1527681745.0
srg666,"This is hilarious because I've had the complete opposite experience. Yarn does exactly what I want it to do (guaranteed reproducible builds, faster downloads because of caching, etc). If I blow away my node_modules and run npm install it's consistently modifying my package-lock.json (often downgrading minor versions of packages) and straight up deletes dependencies from my package.json sometimes. 

I'm curious what other people's experience has been because I legit have no clue what the point of package-lock.json is if it's going to change even though package.json hasn't. ",1527721073.0
systoll,"To add a third candidate to the list, [https://pnpm.js.org/](https://pnpm.js.org/) has the very nice feature of only storing a \[particular version of a\] package once, no matter how many different packages use it.",1528173684.0
TheCommentAppraiser,Can someone talk about usecases for this?,1527673472.0
,[deleted],1527688865.0
stevewastaken,"This is very cool! I've been looking for some examples to get to grips with Websockets, so thank you for sharing.",1527675082.0
elrodrix,you look at this post [https://daveceddia.com/create\-react\-app\-express\-backend/](https://daveceddia.com/create-react-app-express-backend/),1527675657.0
omar-hydrah,"You can simply search for the topics you already know about, on Youtube, and watch some talks from conferences. Or you can check these youtube channels:

[The Net Ninja](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg/playlists)

[Academind](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w/playlists)

[Traversy Media](https://www.youtube.com/user/TechGuyWeb/playlists)

",1527642232.0
roboctocat,"Get familiar with software engineering principles, practices and applications then read more on auth, hashing, jwt, security, restricting routes, concurrency, etc...",1527647807.0
ccb621,Have you tried searching Google?,1527640214.0
Hafas_,"when you require a js file it only gets executed once - no matter how often you require it, since it's cached.

To remove a js file from the cache do:

    delete require.cache[require.resolve(""path/to/file"")]

",1527626103.0
willshowell,"It sounds like you're dynamically writing javascript and trying to have your main process react to those changes? You should be able to just call `require('cronTasks')` again I think...

But why not keep all the tasks in memory? When a new one is created, you can still write it to a file somewhere (or a database) for persistence, and then just keep it in some array or map of current tasks. On server startup, you can recreate that array/map from the filesystem/database.

    myTasks = [];

    function createTask(schedule) {
      const cron.schedule(schedule, () => blah blah, false);

      // store permanently
      storeTask(task);

      // also keep in memory
      myTasks.push(task);

      return task;
    }

    // somewhere else
    createTask('*/10 8 * * * * ').start();",1527612837.0
marnues,"    table.Keys.map(key => {
        let req = sql.PreparedStatement(/*stuff*/)
        req.prepare(/*stuff*/)
            .then(() => {
                req.execute(/*stuff*/)
            })
            .then(results => {
                /**do stuff to results**/
                console.log(results);
            })
            .catch(err => {console.log(err)});
        })

This function maps keys to Promises (assumption that `req.prepare()` returns a Promise).  It will execute quickly (ie, not running the promised code) and exit to `console.log(""**get here only after all results processed**"");`  If you really want this execution flow, you'll need to add an `await Promise.all()` around the map statement.  However, I see this as an anti-pattern, trying to force a synchronous workflow around asynchronous functionality.

Instead, let me suggest that `console.log(""**get here only after all results processed**"");` should really be `console.log(""**get here after creating promise**"");`.  That area of the code is better reserved for handling Promises, not forcing them to be synchronous.

Further, your `return new Promise((resolve,reject) => {` Promise is never resolved, so the outer `Promise.all()` won't ever be signaled as finished.

Ultimately, your problem lies at the top with 

    Promise.all(tables.map(table => {
        doSQLStatements(table)
    });
    closeDbConnections()

This code collapses all the `doSQLStatements(table)` calls from many Promises into a single Promise, then immediately calls `closeDbConnections()` without waiting for them to resolve.  Again, you could put an await in front of the `Promise.all()` assuming that this isn't the top level of event loop.  But that's the same anti-pattern from before.

If I were coding something similar I'd try the following

    Promise.all(tables.map(table => {
        doSQLStatements(table)
            .then(() => {
                console.log(`**get here only after all results for ${table.name} processed**`));
                return;
            });
    })
    .then(() => {
        console.log('**get here only after all results processed');
        closeDbConnections();
    });

    function doSQLStatements(table) {
        return Promise.all(
            table.Keys.map(key => {
                return new Promise((resolve, reject) => {
                    let req = sql.PreparedStatement(/*stuff*/)
                    req.prepare(/*stuff*/)
                    .then(() => {
                        req.execute(/*stuff*/)
                    })
                    .then(results => {
                        /**do stuff to results**/
                        console.log(results);
                    })
                    .then(() => {
                        console.log('**get here only after ${table.name}.${key} processed');
                        resolve();
                    })
                    .catch(err => {
                        console.log(err);
                        reject(err);
                    });
                })
            })
        )
    }

Things to note:

The top level is a single Promise chain workflow. `.then(() => closeDbConnections());` will only run after all the function promises have resolved.  This is a common pattern to run asynchronous code synchronously.  It is evident that it is asynchronous code due to the Promises, and the operations are wrapped inside `then()` blocks that isolate asynchronous chunks.  I can imagine that a block prior is used to create the `tables` variable.

`doSQLStatements()` returns a Promise like before, but now it is another `Promise.all()`.  This is because `table.Keys.map()` should map `table.Keys` into many Promises, each operating asynchronously.  The `Promise.all()` will wait for each of these to resolve.

I've added a third `then()` block in the function.  This block is where you can guarantee that all keys for a specific table have been processed without breaking the asynchronous chain.  Once the `console.log()` statement has run, `resolve()` is called to signal that the promise chain has been completed.  Without calling `resolve()`, the individual Promises created by `table.Keys.map()` won't signal completion, preventing the `Promise.all()`s from finishing.

And its compliment, in the catch block I've added a `reject(err)`.  What you had before will log the error, but then won't signal that the Promise() is complete.  By using `reject()` the Promise will signal that something went wrong and that the `Promise.all()` chain will run its `catch()` operation rather than going to the next `then()` block.  Of course, the `Promise.all()` doesn't actually have a `catch()` block, so the program will error with a complaint about that.

Note that I haven't actually put this in an editor or anything, so YMMV.",1527611862.0
that_guy_who_fights,"Since you return a Promise, you just need another then\(\) to execute when everything in that promise is done. 

    Promise.all(tables.map(table => {     
        doSQLStatements(table).then(result => {
            console.log(""**get here only after all results processed**"");
        });
    });

also, dont forget to resolve\(\) or reject\(\) based on success or error in doSQLStatements\(\). ",1527610072.0
stevejcox,"You aren't returning the promise in the map, so there is no array of promises for your Promise.all to wait for. Try this:


    Promise.all(tables.map(table => {
        return doSQLStatements(table)
    }))
    .then(result => {
        return closeDbConnections()
    })

Note the missing 'return' in the first block, then adding your closeDbConnection once promise.all completes.

Or the more simplified:

    Promise.all(tables.map(table => doSQLStatements(table)))
    .then(result => closeDbConnections())


edit: formatting",1527610974.0
verticalellipsis,"Add a `return` before the `getData`, and another `return` before the `req.prepare` and you should get the result you expect.

Your problem is you are ""firing-and-forgetting"" all the promises, so not waiting for any DB query to complete",1527630501.0
papertowelroll17,"I can't really read your code on my phone, but I recommend that you use async/await. It simplifies the syntax and makes it easier to avoid problems like this.
Make all of your lambdas async, and await on any calls to functions that return promises. Wrap any callback based asynchronous code in helper functions that use promises.",1527645256.0
aaronkim234,"Lol, why not just GNU time? https://www.gnu.org/software/time/",1527605053.0
selyuu,"Could try to take advantage of async/await to deal with asynchronous functions. It's good that you recognised where the problem is, it shows that you understand your code well and have deduced where the issue could lie. An example below of using async/await with your code:

    module.exports = function (app) {
      app.get('/', async function (req, res) {
        var bestTime = await sumOfSeconds(best);
        Time.find({}, function (err, data) {
          if (err) throw err;
          res.render('index', { times: data, bestSolve: bestTime });
        })
      });
    }",1527597243.0
SpermicidalFoam,https://docs.nodejitsu.com/articles/getting-started/control-flow/what-are-callbacks/,1527597323.0
cultofmars,"Basically you already know what the issue is. Take the time to learn about callbacks and asynchronous programming in general, then hop into promises and async/await.",1527597994.0
TheOneRavenous,"Three asynchronous functions all relying on the other to be Synchronous. 

Handling options 

★Callbacks (functions returning functions/callbacks)
★Promises (wrapper functions with nesting, ""then()"")
★Async/Await (wrapper functions)",1527608858.0
TG__,"In case you still needed this working: I have tweaked the code and it should work now. I have also added comments so you can get a better idea of what's going on since you are not too familiar with callbacks yet. 

Hopefully this makes sense a bit. You should focus on getting an understanding of callbacks, they are very simple once you get a hang of them. You should then move to stuff like promises to avoid 'callback hell' (continuous nesting). 

Hope this helps.

```js
// Since `Time.find()` is asynchronous we will be
// unable to return the result directly from this function
// but instead will pass the `sumOfSolves` into the callback param
function sumOfSeconds(callback) {
  Time.find({}, function (err, data) {
    if (err) throw err;
    const sumOfSolves = [];
    for (var i = 0; i < data.length; i++) {
      const sum = data[i].min * 60 + data[i].sec;
      sumOfSolves.push(sum);
    }

    // we are done calculating and now will invoke the callback
    // so that the whoever wanted this result can do something
    // with the sumOfSolves
    callback(sumOfSolves);
  });
}

function best(sumOfSolves, callback) {
  var best = Math.min(...sumOfSolves);
  var position = sumOfSolves.indexOf(best);
  Time.find({}, function (err, data) {
    if (err) throw err;
    if (data.length === 0) {
      var bestTime = '-';
    } else {
      var bestTime = data[position].time;
    }

    // return bestTime;
    // Return has no value here, it is the return of the callback to .find
    // not the return of `best()`
    // instead best should take a callback arg and use that to return values
    callback(bestTime);
  })
};

module.exports = function (app) {
  app.get('/', function (req, res) {
    // var bestTime = sumOfSeconds(best);
    // We cant do this ^ because the result will be returned asynchronously
    // and not as the return value from the function
    // 
    // First we try to get sumOfSolves:
    sumOfSeconds(function (sumOfSolves) {
      // When the code reaches this point
      // `sumOfSeconds()` has finished working and has
      // passed us the sumOfSolves
      //
      // We now call `best()` with this and use a callback to get
      // the best result again

      best(sumOfSolves, function (bestTime) {
        // Now we have bestTime we do the remaining stuff
        Time.find({}, function (err, data) {
          if (err) throw err;
          res.render('index', { times: data, bestSolve: bestTime });
        })
      });
    });
  });
};

```",1527719171.0
Capaj,"If you want to save a click\-conclusion is: small and single purpose libraries are better than large complex ones.  
",1527585557.0
kurashu89,"OP, a little duplication is better than a bad abstraction. But you missed an important tool: Decoration.

If you wrap the original cache in a matching interface that provides the TTL stuff behinds the scene you can easily promote *any* cache implementation to having a TTL.

Someone else proposed an LRU cache, that could be implemented with a decorator as well. Hell, you could have an LRU and TTL cache with decorations. ",1527607289.0
mistralol,"
Hum can you add the ability now to expire items based on last time used and least used?
",1527599005.0
PlNG,Scope Creep.,1527619309.0
Lost_sand,Even the universe expands and collapses,1527650197.0
rascaldev,"> Now as the project evolves you get new requirements and the cache also needs to expire items stored in the cache. A time to live (TTL) should be specified and a callback function executed every time a cache item expires. You change the code accordingly:

Stop. That's where you're going off the rails. Implementing a cache to begin with was iffy but now we're implementing advanced functionality in custom code. If you're developing complex systems on your own that should be your first red flag that a more common solution is probably available. 

In this case you have two: redis and memcached which can do exactly what you're wanting. 

>> How can we keep the original cache simple?
>> Duplicate code instead of making simple things complex.

Jesus christ, no. The problem is that you continually added new functionality to a library without realizing that once you pass a certain threshold of complexity with your requirements then that component should be a product unto itself. Find either a library or a daemon that does what you want. At that point caching logic maintenance is someone else's job and there's no need to worry about that other person, they can just use redis differently than you're using it. Your code should be the absolute bare minimum required to do the thing you set out to accomplish in a responsible way.",1527602385.0
gngeorgiev,Running npm install makes sense because this how the process is designed to work. The lock file is a generated file by design. It's not a big deal to run a single command. Not to mention that you shouldn't update your package.json by hand.,1527571513.0
apatheorist,GDPR strikes again.,1527575687.0
Str4yfromthep4th,Leave programming up to the professionals,1527986010.0
zokker13,"Ok.

What is the question? :)",1527536743.0
Snipon,It means juniors and PMs get to interrupt you all day long.,1527532605.0
misterlively,"I generally see it as a combination of hard and soft skills. The engineering skills follow a rough path:

* Language syntax
* Common patterns (Mvc, dependency injection)
* Standard libs (fs, child_process,...)
* Testing (unit to e2e)
* UI , CLI, Server work
* Databases
* Multiple languages
* Build & deployment
* Infrastructure & Distributed systems 

Basically you start narrowly focused on using a single language, mastering it, using a bunch of different patterns, learning all matter of testing, and using it in different contexts. Then taking time to learn other languages to appreciate the pros/cons of language designs, and finally moving to really understand the underlying dependencies of shipping software. With this you have formed an opinion of all these areas, but acknowledge people specialize and will be more knowledgeable on a single subject. Learn from them.

Soft skills:

* Continuous learning (everything above)
* Teaching / mentoring (everything above)
* Interviewing / Hiring
* Understanding the implications of engineering decisions on the business
* Focusing on ‘people problems’ not software problems (picking tech and patterns with people in mind first)
* Empathy for engineers, non engineers, and users
* Ability to foster a supportive collaborative environment

You know all the tech well enough to ship something, but you’ve realized you can’t do it alone. So you focus on learning how to develop a group of people to get where you’ve gotten. You are trying to multiply yourself and focusing on others more than yourself.",1527531550.0
mcviruss,Senior means nothing. Every employer has a different definition. Just read the job description thoroughly and see if you match most of the criteria.,1527527685.0
mahade,"If you ask me: Labels are for cans of soup.

It's corporate bullshit. They want labels for people so they know who to go to when shit hits the fan.

I've been in this job for 18 years and guess what I'm in the market as? A senior developer. Or a lead developer. Or a tech lead. Or an architect (not a protected labels where I live). Or hell, call me CTO if you want to. Does the client need a medior? Sign on the dotted line, boss, as long as you pay my hourly wage of €85. It depends on the job.

I'd rather have no label at all because I absolutely abhor the corporate line of responsibilities and the endless meetings. I'm social with my friends, and at work I just want to write code and help educate the project.

The last part includes helping colleagues who know less about things. But that's the fun bit! Some ""junior"" colleagues know more about some things than I do. I'm just better at not getting stressed out about nothing, getting shit done, and not being intimidated by people who insist on wearing suits.

Applying for jobs is simple. You bluff your way in to places. 5 Years of experience? Great! If the vacancy asks for a Senior developer then you are it. 

The market in our field is booming still, so bluff your way to a higher pay check, too. Any company is happy to find a new programmer without having to pay 6x their monthly salary to a recruitment agency.

The label ""senior"" doesn't come with expectations. The job you're applying for comes with expectations. Get in the 1st interview, then ask about what they're looking for. Like: actual measurable qualities. Let them quantify that.",1527534301.0
Lmcsheff81,"I tend to find ‘seniors’ contribute more to the team in terms of planning, scoping, agile coaching etc. So it’s people who, through experience, have developed a range of dev management skills",1527531209.0
pier25,You must have seen a lot of shit.,1527536317.0
fzammetti,"There's no simple answer, no one answer that would cover it all, but some of the things that come to mind:

* Able to pretty much accomplish any task given to you with VERY few failures \(note that I'm NOT saying a senior is perfect, just that even when faced with a task they have no clue how to do at first, they can learn what they need and ultimately get it done, given enough time\).  Management never has to worry about seniors being able to do what's asked of them, it's just a question of how much time and effort will be required \(and they know that the results will be acceptable at worst\).  

* Teaching ability.  I don't mean that you have to be super\-teacher or stand up in front of a classroom or anything like that, but seniors are kind of expected to be able to mentor juniors, and this means they have to have the technical ability to do so, the ability to explain complex concepts, and also the people skills to be able to do so without bashing people over the head in the process.  That's not a mix everyone possesses, at least not without practice.  

* Ability to see the big picture.  It's one thing to be a top\-notch code monkey, and there's exactly zero wrong with that if that's all you want to be, but it doesn't really make you a senior.  No, you've got to have some architecture chops too, have to be able to understand a complex system holistically.  This and point #1 really go hand\-in\-hand.  

* Ability to find answers yourself.  This again goes right along with point #1, but it's a skill unto itself.  Nobody should expect a senior to know every little detail \(except perhaps in very narrow scopes where they're a demonstrated expert\) but a senior MUST have the ability to synthesize information and figure things out on their own.  This also means having a foundation of experience from which to extend from. This means having the basic knowledge, yes, but it also means having a certain level of real\-world experience to know what works, what doesn't, and to be able to grok new concepts because you have seen older ones that it's based on.

I think those are maybe the big four off the top of my head.",1527540457.0
glintch,"IMO it means to have enough experience to see  your own mistakes. So you can understand and value all the things that you maybe thought are unnecessary as you was a junior. Like  Complexity(O(1)), TDD, strict typing, semicolons etc. It is also about to have a good readable, safe and performant coding style. It is about to have enough experience to foresee the future problems and how to solve them. It is about to have enough experience so you can teach other juniors. It means a huge amount of practice",1527529129.0
,[deleted],1527534777.0
the__itis,"every country has different definition.  so does ever company.

the only common thing i have found is that they CAN make more than junior and mid-level programmers. but some were appeased with just the title. 

it’s kind of like college degrees. it’s awesome you have one, but it doesn’t change the issue at hand and i’m not taking your word for it. 

back to no good categorization system i suppose. ",1527527941.0
hpeinar,"Shortly: **experience**

Longer answer:    
If we speak explicitly about nodeJS, you should obviously be familiar with the core of it. I wouldn't expect you to know how to write your own C/C++ modules for it, but I would expect you to fully understand how everything related to node works. All of the following keywords should be familiar to you: event loop, async/await, callbacks, promises, modules, classes, functions, prototype chain, es6, destructuring, arguments, scope and of course all the native API's including full understanding of javascript stuff like Arrays, when to use Set and what Object.keys() returns.

You should be able to write clean, readable!, testable and working code without much effort and be able to debug both own and someone else's code with thought and understanding.

Then comes the ""secondary"" stuff. For a ""senior"" programmer you most definitely have some experience with database(s).
So I'd expect you to have at least basic understanding of: redis, (insert any relational DB), (insert any document DB).
And to add, you most probably have years of experience with one of these, which usually is one of the relational DB like MySQL or PostgreSQL.      
You also have configured some servers in your life so you know the basics of nginx, load balancing, scaling, https, logging, microservices, firewalls and you know your way around unix systems. And don't come telling me it's sysops job to know / do these things. The same code you write everyday has a very direct connection with all of this so you should know what and where to some extent. 

The secondary stuff will also include all kinds of node modules. Nobody knows all the APIs by heart, but you should at least know what to use when and have a brief understanding of how it works and what it does best. This will include all the famous libraries like (in no particular order, just from my head): express, request, knex, moment, mocha, mailchimp, db drivers... (insert infinite list of never ending and updating modules)

After all the stuff you do while sitting behind your computer and googling like a monkey, come attitude and people skills which play a very big role in your job. The ability to converse with your colleagues and clients without causing drama is a big plus and will go a long way. You rarely work alone so better get used to other people and communicating with them.

All of this comes with many (5+) years of experience, many projects (both successful and failed), many mistakes (both small and big), many stupid questions (to Google or to other people), many debugging hours (both smashing keyboard and finding a problem within seconds) and of course with many long nights. The reality is that this isn't something you learn from Udemy or YouTube. To get all this you must WANT to code and you must WANT to improve. 
      
Don't do it to get (fancy) cheese on the table, do it because you want to. Do it because you like the challenges and you like solving them. Do it because you like to learn new things and try out new stuff. Then the right kind of experience will come to you.

Sauce: Am professional nodejs developer for long years and lead a team of developers.",1527544601.0
Arffman,"It doesn't necessarily mean much. The company I work for boosts your title if you earn a position in which your 'status' (for want of a better word) ought to be made clear - not to other team members, but across the company (""I need to know about X, who's the senior guy for X?""). 

... but we also have an office in India and from what I've been told the culture is that if you move someone within the company it's expected to come with a boost in job title. Just last month a guy whose probation I declined to pass was briefly 'promoted' from senior developer to principal architect while they tried him on a different team for a week. Barmy.",1527540017.0
emjayt,"The progression from Junior to mid-level (career) and Senior have more to do with how self-driven you are, than with technical competency.    Technical competency is required for all 3.      Junior devs need more help from others in terms of guidance, determining what needs to be done, etc.    mid level or career level are fully competent as individual contributors.   Not requiring guidance (but definitely able to collaborate).   Senior level engineers are able to provide that guidance to others (moving beyond being individual contributors)

",1527552802.0
720degreeLotus,"There is no hard definition on senior.
I once watched a presentation on youtube where one developer described the different ""levels"" very nice (imho), but i can't remember it 100%. But he divided them not by pure coding-skill but more by how well they can find bugs/problems, analyse those problems, come up with a clean and stable solution and finally code the solution. But not in this order, damn if i find the video i will post it here :)",1527620409.0
vegemouse,"Really depends on the company and how their internal employee structure looks. At my company, a senior dev is basically a developer that has a full understanding of the technologies they're working with. There's no specific skills to learn, just being able to do your business as usual tasks without asking for help and being able answer questions from other non senior devs.

However, other companies may define that as a mid level or even junior developer. ",1527547577.0
FormerGameDev,"I went from ""Senior"" to ""Staff"".  No idea. Just one day my title changed. :-D
",1527557367.0
tobsn,"you’re mid at maximum. 4 years, same company... yeah, definitely far from senior. :)",1527558842.0
JoshWithaQ,Take a look at the engineering career ladder blog posts that are out there. The meaning of senior engineer is different everywhere but you should see some common themes. Good leadership will have clearly defined a career path for ICs and people leadership.,1527559521.0
tektektektektek,"> What knowledge I need to have to be considered as ""senior""

The humbleness of a person that has made a thousand mistakes and learned from each one.",1527571899.0
tanepiper,"* Being able to react to a crisis in a way that attempts to discover the root cause and fix the issue.
* Being able to mentor people to a confident level in your domain
* Someone who knows enough bullshit to negotiate a senior position and pay",1527578661.0
harrymurkin,You need a masters degree in tolerance.,1527578808.0
simplegadget512,Senior Developer sounds like someone doesn't have anything left to learn.,1527632955.0
Buckwheat469,"Depends on the company. Years of experience is a key factor. Number of projects in which you were a senior or a lead. Rank at other companies (Microsoft has numbers which directly translate). A lot of the time we look for 10 years of experience or more and has a strong grasp of algorithms, database design, API design, general browser caching knowledge, maybe some protocol knowledge, frontend design, JavaScript, CSS, and HTML, and possibly React or Angular experience. This is a ton but a severe lack in one aspect may indicate a lack of knowledge in other places as well, it's all about the signal from the noise.",1527531292.0
nejcn001,"As a programmer that is slowly developing from junior to senior, i'd say developing on your own \(without anyone saying how to do it\), by creating an project from start till end \(and not being an utter failure\) and having experience in production.",1527534178.0
haganbmj,My senior title just means I asked for more money.,1527542963.0
MasterMorality,You become a senior developer when you don't need Stack Overflow anymore. ,1527593852.0
mgsmus,"For me, it's discipline.",1527534651.0
plk83,Age ,1527559903.0
delusr,"A good 10 years coding and at least 5 years since last saying I'll have to research that first.

EDIT: Good to see the industry is stuffed full of losers",1527536183.0
1-800-BICYCLE,"In addition to what others have said (i'd go with some combination of mocha or jest, chai, and sinon), if your API acts as a ""glue"" for other HTTP APIs, [nock](https://github.com/node-nock/nock) can come in handy for mocking the responses of those APIs. I've used it before to test that our internal API could gracefully handle one of the flaky HTTP APIs that we connect to (e.g. testing retry behavior and making sure weird stuff like socket hangups get handled properly). 

",1527521153.0
Static_Freakout,"You'll also need a library to make the api requests to test like [supertest](https://github.com/visionmedia/supertest). 

I liked this tutorial to get started [testing HTTP apis](https://blog.codeship.com/testing-http-apis-supertest/) and then I just use the chai docs for the specific test syntax ",1527519704.0
Drunken__Master,"There's a Udemy course you might be interested in, Stephan Grider's MongoDB course spends several hours using TDD w/ Mocha to build an API.",1527521867.0
jwalton78,"Here's a not-in-depth-guide.  :)

`npm install --save-dev mocha chai`

Then:

    const { expect } = require('chai');
    
    describe('This is a test suite', function() {
        it('should do the thing', function() {
            expect(foo()).to.equal('bar');
        });
    });

`beforeEach()` and `afterEach()` are handy function for a lot of tests.  Every mocha function (it, describe, afterEach, whatever) takes a function - this can be an ""async"" function, or a function that returns a Promise, or a function that takes a callback.  Arrow functions are ""frowned upon"" for mocha, because `this` has some handy functions like `this.timeout(10000)` to increase the timeout for a test.  You can also set `this.myThing = 7` in a `beforeEach()`, for example, and then access `this.myThing` in your test.

[supertest](https://github.com/visionmedia/supertest) is a very popular library for testing APIs.  I wrote a supertest-like library called [supertest-fetch](https://github.com/jwalton/node-supertest-fetch) which is based on the WHATWG fetch standard, so no custom API to learn, and it's also a little more Typescript friendly if you're into that sort of thing.  :)",1527519946.0
monman42,Check out postman for performing actual requests on your api. It's good for writing tests and during development as well. Wonderful bit of software. ,1527534897.0
AxelTerizaki,"I use Mocha \+ chai \+ Supertest :

[https://lab.shelter.moe/karaokemugen/karaokemugen\-app/blob/master/test/api\_serverTest.js](https://lab.shelter.moe/karaokemugen/karaokemugen-app/blob/master/test/api_serverTest.js)",1527520184.0
Kmantheoriginal,For mocking API calls you can also use Sinon,1527522389.0
GuerreiroAZerg,"you should start unit testing your code, mocking calls to individual request handlers. For this you can use any testing framework and mocking libraries. The next step is doing end to end tests running on a test instance of you application.",1527529399.0
roboctocat,"While there area many ways to test you should really ask yourself few questions before starting:

1. Will it really catch any bugs?
2. Will it prevent developers from injecting new bugs?
3. Will it strengthen unavoidably brittle code?
4. Will it help maintain unavoidably complex algorithms?
5. Will it test corner cases?
6. For weakly typed languages, will it help maintain correct type usage?

On top of all this I'd recommend you check out following presentation [https://www.youtube.com/watch?v=Fha2bVoC8SE](https://www.youtube.com/watch?v=Fha2bVoC8SE).

Writing unit test for an endpoint where you have to mock response is IMO not that beneficial. Writing test that tests and endpoint and return result from db that you can verify gives you a lot more mileage.

Jest gives you everything you need. No need for additional libraries.",1527530282.0
theadammorganshow,"I have a tested API [here](https://github.com/theangulartutorial/lets-get-lunch-api) you can use as reference. It uses Chai, Mocha, Sinon, and Chai HTTP.",1527530642.0
mannotbear,"I suggest using mocha, chai, and chai-http.

That’s really all you need.

I also recommend incorporating fixtures, aka seed data, that is loaded before each suite, and truncated after each suite.

You can commit to unit testing, which can be overwhelming when you first learn testing, but with Node APIs, I think it’s perfectly acceptable to start with end to end integration tests.",1527543809.0
icanevenificant,"You can try:

`killall node`

which should kill all the running node apps. You might have some running in a shell you no longer have open in a terminal or something. The error means the port is already in use.

If you're using pm2 you can also try:

`pm2 kill`",1527517949.0
BehindTheMath,"I've had that when I mistakenly tried running 2 instances of the server at the same time, so when the second one tried attaching to the same port as the first, it threw that error. ",1527516429.0
codymj,"You need to figure out why there are two processes trying to use the same port.

Maybe use process.env.PORT:

    app.set('port', (process.env.PORT || 3000))
    app.listen(app.get('port'), () => {
        console.log('Server listening on port ' + app.get('port'))
    })
",1527516376.0
soulsizzle,"You can't use a port that is already in use. Is it another application, or is it your express app?

If it's another app, one of the applications will need to be configured to run on another port. 3000 is often a default, so headbutting is common. 

If it's your app, you'll have to give some more context. How are you running the app? Why are you needing to re-run it? My best guess is you need to look into express graceful shutdown.",1527516536.0
vjrj,"You can get info about which process is already listening on port 3000:

lsof -i :3000

and then kill it ... etc
",1527533040.0
FormerGameDev,"OK, so, there's a lot of different bits and pieces here that people are mentioning, but there's not a whole lot of cohesive answers.

Your app isn't ""running into"" Error: listen EADDRINUSE :: 3000.  For some reason, that you haven't explained, your app is getting launched multiple times.  Since you can't have two programs listening to the same port, the second one dies with the error.

So, why is your app getting re-launched?  I noticed in one reply, you said that this happens when you restart.  If that's the case, then what's happening there, is you're not stopping the first instance (or not waiting for it to completely close down) before starting up the second.  If it's happening at any other time, then whatever you're using to manage the app running, is trying to spin up a second instance or for some reason thinks the first instance has died when it hasn't, and is bringing up a replacement, or something like that.

TL;DR -- something is wrong with how you're managing it.
",1527557819.0
dk01,If you use Alfred on iOS: https://github.com/SamVerschueren/alfred-fkill,1527516705.0
BehindTheMath,"Either pass a callback to `sumOfSeconds`, or have it return a Promise. ",1527515793.0
idontknowstufforwhat,"I'm on mobile so I'll try and assist as best I can without creating a snippet example...

For one, why not just have sumOfSeconds return the array and capture it in 'best()'?

If you are dead set on manipulating the array such as you are, you could use the 'return new Promise' syntax and call 'resolve()' when you want the operation is finished. 

Then you make 'best' an async function, either with 'async function best()...' and 'await sumOfSeconds()' or use 'sumOfSeconds().then(...the rest of the code...)' within 'best()'

My suggestion is to return the 'sumOfSolves' array from 'sumOfSeconds'. Then you avoid all of these problems because it is an unnecessary complication to incorporate promises to this procedure, but that may be part of the objective which is fine too. 

Hopefully that helps, it is difficult to do this on a phone haha. 
",1527516380.0
etheraffleGreg,"
Turned top function into a promise that returns the array you're after in the second function:

&nbsp;

    function sumOfSeconds() {
        return new Promise((resolve, reject) => {
            Time.find({}, function(err, data) {
                if (err) return reject(err)
                let sumOfSolves = [];
                for(var i = 0; i < data.length; i++){
                    sum = data[i].min * 60 + data[i].sec;
                    sumOfSolves.push(sum);
                }
                return resolve(sumOfSolves)
            })
        })
    }

    function best() {
        return sumOfSeconds()
        .then(sumOfSolves => {
            var best = Math.min(...sumOfSolves);
            var position = sumOfSolves.indexOf(best);
            Time.find({}, function(err, data){
                if(err) throw err;
                var bestTime = data[position];
                console.log(sumOfSolves)
            })
        })
    }

    best();",1527520737.0
thunqa,"Using async and await should solve your problem. Wrap best() as an async method and the await sumOfSeconds i.e.
```
function async best(){
    await sumOfSeconds();
...
```

Alternatively you could have a while loop that terminates when sumOfSolves is not empty",1527516513.0
electric_creamsicle,"`Model.find().skip(i-1).limit(1)`

Warning: this is just what I came up with after looking at the docs.  I haven't used mongoose in a while.  There probably a much better way to query MongoDB directly.",1527508303.0
jenkynolasco11,"Maybe something like this:

Schema.find(conditions).skip(ithPosition).limit(1).exec(...) //this returns an array of length 1, btw

If not, maybe you should try to be more specific on your question",1527509399.0
YuzToChihiro,">However, we couldn't afford to use another database like postgres or mongo. We needed to embed the database and its engine within the app.

What about NeDB? I'm sure there are others too. Databases that live ""embedded"" with the server aren't unique to relational databases, you can probably find an embedded equivalent for every type of database that exists.",1527777895.0
RickyMarou,you might want to consider [dayjs](https://github.com/iamkun/dayjs) as an alternative to moment :),1527508115.0
flipperdeflip,"> I just wonder how can I implement this by nodejs, and what's the technique to develop such a feature.

Not to be that guy but if you ask that so generally then you might not be ready for the task.

Try some basic tutorials first, some simple stuff to get to know node and using it to store things in a database. Then you should be able to see how to make a application like this one.",1527508439.0
Moulinette_,"Seems pretty simple, but it depends how your database is made right now and what tech you're using

Each user would have a unique referal code, or use their ID directly. Referal links use this ID. When the user clicks on a referal link, use a cookie to know which user you'll give the commission to",1527506300.0
Nhawdge,"The answer is very context sensitive, are you trying to do this to any site? Does the site offer an API? How do you want to be notified? Are you only using node? Do you have access to the server to run the code, or will you have a browser extension? Is the page interactive and auto loads content? Why is your username smarterthanyou7? How is this ""1 question""? Do you have any background someone could leverage to make your problem easier to solve?",1527509968.0
designbyllama,Is it missing a closing bracket for the if block?,1527498956.0
warchild4l,"I dont know why it is working on / but try using method override. By default, html does not support delete or put requests ",1527501912.0
shastacoop13,You could make one big form with a div for each question and just set the display: none for any but the current question. When your form gets posted it still posts divs/inputs that are display: none.,1527468869.0
Personalife,"You might want to store the data in local storage so that if the exam taker went off the page and returned to it, you could restore the answers.

You can either store it as an array of values / objects or an object, where the key value would be the question id and the value would be the selected answer.

When you do a form post, I recommend serializing the data as JSON; it's easier to parse and read from in node vs a vanilla form array, and a lot of libraries like jquery support posting as JSON as one of the main ways to submit data.",1527476646.0
mannotbear,"What you’re looking for is called a wizard form. Remember that something could happen to disconnect the client, or they could navigate away from the page. So, you either need to keep a local state in store or actually submit each page. If we’re talking about a production system used by real students, do not attempt to store state locally as too many things can go wrong! Instead, post after each answer is submitted.",1527476688.0
-xNull,"You could make a click tracker that tracks the clicks in an iframe(where the questions could be), push the answers into an array and  finally create a hidden form via jquery or javascript at the end and automatically submit it. Easy peasy cheesy :) ",1527505605.0
shastacoop13,"Do you have bodyParser, busboy, etc setup to handle the form data?",1527470625.0
Deadlybeef,Damn son. You post needs some formatting :/,1527511444.0
xwnatnai,"In general, when you have multiple apps that depend on each other, may process messages at different times, cannot drop or miss messages,  and you need a universal interface to decouple them.",1527470420.0
jdsplit,I'm starting to use it in my webapp for stuff as simple as sending emails or webpush notifications. Basically anything that my app is not waiting for an answer immediately and which may slowdown my main nodejs instance. ,1527507427.0
FormerGameDev,"Preferred method for most people:

Don't.  Use http, and then use nginx or some other similar service to httpproxy it.  Otherwise, when you do want to run your service where there is a system like that up front, you'll need to deal with proxying https which is significantly less trivial.  
",1527455204.0
jgordon615,"Really liked your article.  Only nitpick is that the first step should be ""npm init"" if you're going to use ""npm install xxx --save"".  You need a package.json.",1527493629.0
compubomb,Screw termination on nginx. Terminate with haproxy. Then load\-balance via haproxy. Much more robust than nginx.,1527515414.0
tyvmpicks,Awesome! Gonna give this a try.,1527441349.0
RottiBnT,What is the source for the rates?,1527444223.0
krasnoiark,"does google vision work for you ?

I think it returns a json",1527424870.0
mayobutter,"Not node specific but tesseract works pretty great.

[https://github.com/tesseract\-ocr/tesseract](https://github.com/tesseract-ocr/tesseract)",1527426308.0
Dusterthefirst,Tesseract.js is a 100% JavaScript ocr package,1527433585.0
Doctor_Spicy,If you don't mind working with an API i'd recommend https://ocr.space. You can even scrape an unlimited API key from their website.,1527448229.0
philthedev,"I had put together a quick docker image with Tesseract you can hit on a local network - works pretty simply for most file types.
https://github.com/philpalmieri/remote-file-parser",1527464629.0
awesomeevan,"I used both tesseract and gocr. For gocr just install it on your machine and use the ""child_process"" or something like spawn-rx to call it. This assumes you're not trying to keep everything in the node process since you'll be spawning gocr processes. For me gocr was faster, but I wasn't dealing with any concurrency.",1527470285.0
minhajkk,"[http://minhaj.io/nodejs/tesseract-nodejs-heroku-ocr-app/](http://minhaj.io/nodejs/tesseract-nodejs-heroku-ocr-app/)

I made a poc a couple of years ago using tesseract and nodejs. hth",1540066644.0
wsx594,"Maybe I'm misinterpreting what you're trying to do but from what I understand you more or less want clients to be able to trigger a request for the server to retrieve up to date data from other API servers. If that's the case then there's a couple of suggestions I have. One if you don't need realtime access and updates on the server with regards to the remote clients, then WebSockets are probably overkill for the application when a REST API on the remote clients would work fine. Also you say retrieve data on the server and then POST it to be written to the database, but why POST the data to the same server that already has it? Just write the data to the DB once you've gotten it from the remote clients. Also just for sake of clarity I'm not sure you should call the servers storing information ""remote clients"" as it seems like they never request anything from the API server, and information is only requested from them. Sorry if I misunderstood any of what your trying to do or if any of this is unclear just let me know and I'll try to clarify. ",1527427775.0
1st_page_of_google,"You can absolutely run a REST API and a Websocket API off the same server.

The issue you're going to run into is scalability. With this architecture you can only really have 1 server since the clients requesting the data will need to be requesting it from the same server that is connected via websocket to your remote clients.

Now scalability is only a problem if you need/expect to handle a high number of clients/users. Even then, you'll get pretty far scaling vertically (running this on a faster computer as opposed to running more copies of this and load balancing). But that is typically a more expensive route than horizontal scaling.

With all of that said, here is what I'd do:

1. Scrap the Websocket, have your remote clients push data to the server at some time interval (like 1 - 5 minutes)
2. Have your web client show the most recent data with a warning that it could be at least x minutes old

Reduce that time interval until you have the data resolution that you need.",1527431091.0
neptoess,This sounds like a great place to use SignalR,1527451821.0
Jake_Jeremy,It decides this based on the route you give the app.delete call as the first parameter.,1527407076.0
bossmonchan,"The first argument of app.delete() is the route it is bound to. So a potential solution for your case is:


app.delete('/things/:id', (req, res) => { 
    //delete a specific thing by id
    //you can get the ID from req.params.id
})


app.delete('/things', (req, res) => { 
    //delete ALL the things
})

Note you still have to write the code to do the actual deletion, express doesn't do that for you.
",1527640589.0
1-800-BICYCLE,"ok... but why not just use `WeakMap` directly?

    const varsof = new WeakMap();
    
    varsof.set(someObject, {});
    varsof.get(someObject).someProperty = {
      created: 'yesterday',
      foo: 'bar'
    };

    someObject.someProperty; // undefined

    varsof.get(someObject).someProperty.foo; // bar


",1527400511.0
Jake_Jeremy,Why do you prefix almost all of your variables with `_` even if you are using an IIFE?,1527417353.0
Sythic_,"What kind of content? If you're already a node/react dev why not build a basic API that stores your content and retrieve it with the react frontend. 

If you wanted a CMS from the start you probably should have just made the site using wordpress or ghost.",1527390833.0
paescuj,Headless CMS or Decoupled CMS,1527442901.0
veksaryn,"While you ""could"" delete on a POST, it could be confusing to a developer implementing against that API. You should be following:

POST = Create,
GET = Read,
PUT = Update,
DELETE = Delete

That's where the whole CRUD thing comes into play.",1527340820.0
BenjiSponge,"Others have somewhat answered this question, but I just want to note this is not node related and the terms you can Google are just ""http verbs"". ",1527345795.0
shaner23,"The main http verbs are get, post, put, delete and patch. Get is for retrieving a resource. Post is for creating a new one. Delete is for deleting one. Put is for modifying/replacing one. Patch is for modifying one.",1527340746.0
paperelectron,"There is no difference, other than which method express will run based on the HTTP verb received.

Basically it allows you to express your logic in a declarative way. Rather than using if statements, variables and the like in a POST request  you just make a call to a specific http VERB, that contains only the code you need for that specific action and only accepts the parameters needed for that action.


    app.get('/thing/:id', (req, res, next)=>{
       getMyThingById(req.params.id)
         .then(res.json.bind(res))
    })

    
    // Consider all of the extra junk needed here to determine
    // If this route should create, destroy or update a thing.
    // VS just declaring that the POST method creates things, 
    // and the DELETE method deletes them.
    app.post('/thing', (req, res, next)=>{
       createMyThing({name: 'Bob'})
         .then(res.json.bind(res))
    })

    app.put('/thing', (req, res, next)=>{
       updateMyThingsName(req.body.thingName)
         .then(res.json.bind(res))
    })
    
    app.delete('/thing', (req, res, next)=>{
       deleteMyThing(req.body.thingId)
         .then(res.json.bind(res))
    })

    
",1527360644.0
jwalton78,"GET, POST, PUT, DELETE, and friends are all [defined in RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3).  This defines the HTTP specification.  So I'd start by reading through the descriptions of them all there.

They do work in much the same way, they're just two different ""methods"".  The semantics associated with them are largely up to you, although people who've read the RFC will have certain expectations.  One important difference; a POST usually has a ""body"" associated with it (form data, a JSON message, whatever).  POST is often used to create or updated existing resources.  But, DELETE messages usually do not have a body, and according to the RFC:

>  A payload within a DELETE request message has no defined semantics; sending a payload body on a DELETE request might cause some existing implementations to reject the request.

And you might think, ""OK, but I'm the one implementing the server, so I can decide that the DELETE is going to have a body associated with it and I'll do something with that body.""  But the problem is that your server (and the client) might not be the only implementations involved - there might be some kind of proxy or gateway or something in the middle that does horrible things to your DELETE-with-a-body message.  So sending a body with a DELETE is, at the least, not best practice.",1527380859.0
tamalweb,"I too need to learn it. There are 4 web methods I know, GET, POST, PUT, DELETE, but only used POST for deleting and editing stuff in express.",1527339838.0
fahq2m8,"> Hi, I am beginner and I know what app.get, app.post, and app.delete do

then...

> Goes on for a full paragraph demonstrating that they do not know what app.get, app.post, and app.delete do
",1527360802.0
jwalton78,"You are looking for [passport.js](http://www.passportjs.org/) and the [passport-http-bearer](https://github.com/jaredhanson/passport-http-bearer).  And since the passport API docs are a bit lacking, check out https://github.com/jwalton/passport-api-docs.",1527381547.0
from-nibly,You can call 'use' to add all of those steps before all of your endpoints,1527340890.0
Insommya,Have you tried firebase login? It's Easy af,1527322913.0
Maharyn,"I don't want to write an essay, because this is a topic that you really should read up on further and in greater detail if you intend to implement it yourself, though if you can use another option, you probably should. Let someone dedicated to handling auth do it for you if you at all can. Anyways: It looks like you're only issuing one token. To avoid a bunch of issues, you need to issue a long-lived refresh token that people log in to get, which is then used under the hood to get a short-lived access token that you could make app-specific.

If you don't use a 2-token system, you are essentially only left with one option (Change the secret on all services that use it) if a user ever has a token compromised, has a device with one on it stolen, or you need to moderate someone's access for whatever reason before their token expires. Or whatever else.",1527367381.0
StoneCypher,"Tons of reasons.

1) Running a mail server turns out to be really difficult and security problematic

2) Mailfoo will take the time to keep up with this week's DKIM and SPF variants

3) They offer a bunch of random tools you don't, like mail merge off of HTTP APIs

4) You can only send a couple tens of thousands of emails an hour (and practically, only a few thousand without getting blacklisted.)  They can open the gates to the seventh hell of email directly.

5) All the big ISPs know better than to flag Mailfoo's IPs

6) They've got neckbeards protecting your spam 24/7

7) It is _so_ _much_ _harder_ to run a legitimate mailserver and not still get marked as a spammer than anyone expects""

8) They are not purchasing IP addresses that Amazon shouldn't have recycled that are already marked as spammers before you boot your server

9) Are you really going to run a server to save eight dollars",1527319743.0
,"It's a pain in the ass to manage a mail server, that's why. ",1527315107.0
Cyral,"A lot of hosting services will block port 25, and running a mail server can just be a real pain to manage. For most businesses it is just easier to use another company that handles all the security, scaling, making sure your email isn’t marked as spam (these services will likely be much better at email deliverability), etc. They are also much faster when sending tons of mail if you are going to be doing bulk sending. You also get a nice panel to see how your emails are performing, ability to unsubscribe, and whatever else their dashboard offers.",1527313948.0
WeaponizedMath,"You should definitely set up and manage your own mail server. Then in a year you can watch for someone asking this question and explain why, in detail, you do not want to run a mail server",1527325141.0
apatheorist,"Why use AWS or heroku when you can put a linux box in your closet using your home internet connection?

The point is you aren't handling the ends and odds of--in this case--sending email at scale.",1527313147.0
Sythic_,"Email servers/services often have lists of IPs which are known in the past to have sent spam. This could be any random IP address that suddenly your server has been assigned (even if you have a static IP setup, it could have been used before). These IPs are then often blocked by email providers and your attempt to send mail from them in the future will all be sent to spam.

Email services such as mailchimp make sure all their servers and IPs have never been flagged for spam to help guarantee your emails will be delivered.",1527314616.0
GFandango,because sadly sending emails reliably in 2018 is a job that needs an entire company dedicated to it.,1527319727.0
mistralol,"
Yes you can do that. But somebody like me is going to ban your server quickly and automatically if you send me spam. Mailchimp and other services like that put a fair amount of effort into switching addresses to avoid mail blacklists.

Also its can be very hard with a small time mail server to talk with some providers eg. hotmail cause they have draconian accept rules. It takes a fair amount of effort to look after a mail server / get it working. Also if you have an ip address that was previous used to send spam. Its nearly impossible to get others to accept mail from you from that address.

Typically check an ip address against this first. https://www.dnsbl.info/",1527335046.0
marty331b,I run my own email server using mailinabox and send mail from my node app with nodemailer.  I'm not sure what issues everyone on here seems to be having but things are working well for me with this setup. ,1527338483.0
pier25,"Spam.

Your emails will bounce.",1527316261.0
Snipon,"If others do things better than you, let them do it.",1527319728.0
shaialon,"It depends on your use case. I previously led the building of a multi-tenant marketing automation platform using Node with Sendgrid’s APIs.
Building the Whitelabel, private IP, and Analytics features ourselves would have tripled the implementation time, and probably lowered the end product quality.
Their price is relatively a small one to pay.",1527322781.0
jpzenith630,"There's no need to run your own SMTP server (nor should you bother) to send email that way. If you have a mailbox from either your ISP or web host etc. you can send email safely and easily using a package like this:
https://www.npmjs.com/package/smtp-connection
https://nodemailer.com/extras/smtp-connection/

For example, we use this package at work to send notification emails to customers out via smtp.office365.com. 

The other services you mentioned are a better choice for:
- Subscription lists.
- Marketing (they provide features like unsubscribe and templating it of the box).
- Bulk emailing. ",1527323743.0
fullheap,GDPR is also on your side.,1527329590.0
TheOldOneReads,"Many good arguments have been raised above for paying some company to do the job for you, and I'd agree with them if you intend to send commercial email.

In the case of the tutorials you mention, two possibilities come to my mind:  First, that the author finds the service they suggest to be useful for teaching.  The second is that they get some financial benefit, such as referral payments or other fees.",1527332207.0
0bel1sk,"You don't want to learn about spf, dkim, arc, rbls, analytics, dmarc.  You don't want to retain emails and analytics, categories and demographics.   You don’t want to work with marketing teams and templating and a/b testing.   
  
You can ask this question about many things.  Take a look at the features of a service, if you don’t want to do all of that than you might want to use the service.   
",1527333855.0
poopie420,"Just to clarify the position here - as a DevOps Admin I tend to promote SES but the way I like to do it is to have the localhost MTA like PostFix be configured to talk to SES via SSL, this way my developers can just utilize the simplest method of sending email via their node apps - just use localhost with no authentication. Just make sure your FROM: field matches our SES sending domain. In those cases I think it's totally fine to use localhost. 

Otherwise, the other commentators are right on point you do NOT want to get into the business of running a mail server. Dealing with static IPs being blacklisted, just to mention one common issue - ugh. Not worth it! Stick with SES either programmatically or how I described above or other services like MailGun or MailChimp. ",1527351386.0
boxxa,All who you want to run infrastructure. You have a interface you make an API call to send potentially 1000s of emails and also can integrate inbound email with API hooks to rid having to code and manage your own mail platform. ,1527354257.0
MyPostsAreRetarded,lolz,1527291665.0
cahva,"I’ve heard good things about AdonisJS which originally was inspired by laravel. I must say that I have not used it in ”real” projects yet but I have friends that use it and they love it!

https://adonisjs.com",1527288208.0
mannotbear,"No and there probably never will be. Node is awesome because of its high throughout. That makes it great for building APIs, but it’s not really meant to be full stack.

Your best bet is to build your API in Node using Express. I enjoy using knex for query building. If you want an ORM, try Bookshelf.

Then, build your front end separately. Either as a SPA, or learn to use templating in Express.

I’ve been a Node dev for four years.

Good luck.",1527303845.0
htom3heb,Check out Nestjs.,1527349163.0
plk83,"Check out this one 
https://github.com/eggjs/egg",1527395217.0
zebbadee,I've asked a similar question here before. The only thing I found that was laravel inspired and uses es6 (a deal breaker for me) etc was a project called grind.js. It is a shame it doesn't have a larger user base as it seemed pretty good,1527440808.0
andrewmclagan,I’m yet to see something as mature as laravel. Node has an expectstion you will cobble together disparate packages yourself ,1527296973.0
russleyshaw,"    Promise.all(
        values.map(val => someAsyncFunction(val))
    ).then(() => console.log(""Hello, World""));
",1527281737.0
pomlife,"    (async () => {
        await Promise.all(values.map(asyncFunction));
        console.info(""Done!"");
    })();

(just showing a/a version of /u/russleyshaw 's solution)
",1527292502.0
WebDevLikeNoOther,Our work here is done boys.,1527305294.0
cooliobing,">What if the function I am trying to do to the elements takes longer than just incrementing?

See for yourself:

[https://repl.it/repls/PrivateAdmirableDefragment](https://repl.it/repls/PrivateAdmirableDefragment)

If you're creating a large no. of Promises, you may also want to look at [limiting concurrency](https://github.com/timdp/es6-promise-pool).",1527308749.0
sh00tintheshit,"If using bluebird promises there's a [.map method](http://bluebirdjs.com/docs/api/promise.map.html) for this. It lets you set a concurrency limit as well which is pretty handy for some use cases (throttled API calls, ...)",1527317938.0
le_throwawayAcc,"Check out [express generator](https://expressjs.com/en/starter/generator.html) .  Server out of the box and with views of which you can choose from.  Views btw, are compiled to HTML.  You can also configure it to use HTML as a view too. 

Or use a separate front end framework, the you get your data from http://host:port/route or similar.  

If you need access to a sql database, you will need a database server for your desired database or use a nosql db.  

And finally, there’s a lot of other frameworks built on top of express too like hapi, feathers js, sailsjs, etc.  Search for full stack frameworks too. 

If all that is too much, start with express generator.  
",1527284643.0
linfux,"Give this a look, it helped me understand the patterns your wondering about [Mozilla’s express tutorial](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website) ",1527290794.0
codymj,"I would use [request](https://github.com/request/request) for that.

As for where to put the logic for the requests from remote servers, I'd put it in a 'services' folder or maybe controller file. From server.js you can call setInterval(requestFunction(), 60000)

If you have multiple requests from different APIs, you could use [async.map](https://caolan.github.io/async/docs.html#map)

As for where to put the API key, I'd store it in an environment variable, say WEATHER_API_KEY=<API_KEY> in your .bashrc if you use Linux, and you can call it from your server with process.env.WEATHER_API_KEY",1527284853.0
intraviswetrust,"What kind of app development experience do you have prior to this? Do you want to pull your weather data client side? Then include the script in script tags. Do you want to pull the data server side and send  it to an HTML template through a variable? Write a module and use it via module.exports.

It might be worth it to sign up for a tutorial site like TeamTreehouse.com to work through some sample projects in your earlier stages. You'll save yourself hours of time in the long run.",1527284017.0
cougjack,Try renaming your 2 'Todo's to 'Todox'. Could be a weird cache thing,1527283890.0
Xerxero,Not with Wordpress around. ,1527256052.0
noviceIndyCamper,"I learned node first and I really do love node, however I haven't been able to find work where I use node. The vast majority of jobs in my area are still PHP jobs. I initially scoffed at PHP but after working with it and using it so much for work, I've grown quite fond of it. This is probably the wrong sub for this comment but, I don't think node will kill PHP anytime soon.  ",1527268662.0
endlesshappiness,"I'm currently in school studying web dev and a core of the program is focused around php. Out of curiosity I started messing around w/node this week, and even though I'm new at it, I could easily see javascript being my backend language of choice. npm is the shit, asynchronicity is obviously a major benefit and I like working in the same language as the front end. Still glad I've learned php over the last few quarters as I've learned a lot of  web dev fundamentals in the process. Also, I get the impression that there are some projects that could benefit from php - I hear about devs moving between node & php depending on the job or project.",1527270105.0
Praenuntius,PHP is killing itself,1527254992.0
bobjohnsonmilw,"Lol, what a ridiculous article.  It's like people don't realize that these are tools that do various jobs.  Some do them better than others.",1527265853.0
Thommasc,"Not when a very small portion of PHP is worth billions.

https://techcrunch.com/2018/05/21/adobe-to-acquire-magento-for-1-6-b/",1527258137.0
tobsn,"nope.

node.js and php dev here. php since 2000, node.js since early 2010. (I used it before that time right when ryan released it but was only able to use it in production after http 1.1 was finalized)

both have their place if you hate either you just don’t know how to apply them.

have a nice day.",1527289128.0
flipperdeflip,Not while cheapass shared LAMP hosting is still a thing. ,1527256513.0
neko4,I think Nodejs killed Ruby. PHP is another thing.,1527295492.0
Drawman101,"If php dies, it will be because of php, not node. There are so many languages out there, and room for more even. The language will die when the community doesn’t support it anymore",1527269575.0
slyfoxy12,"Honestly no, PHP and node compliment each other well but a lot of the things people scoff at in PHP is what keeps it going. Node and JavaScript keep changing too quickly. I've found it difficult to find any idea of best practices.

There's things I can do with Node though that I wouldn't think of trying with PHP.",1527283782.0
compubomb,"PHP will not loose it's position. I believe we will see a push back into using php for bigger projects as type hinting becomes a bigger deal. PHPStorm provides an almost JAVA like experience when refactoring well written code in PHP due to all the classes/type hints / scalar hinting that you see in typescript or other strongly typed languages. It also runs insanely fast when you use an async library like `AMP`. PHP also supports many of the same workflows as java like abstract classes, interfaces, anonymous functions + anonymous classes which implement interfaces. It's gone from this mostly sorta powerful template language to a highly functional very powerful OOP langauge which syntactically speaking resembles much heavier languages like JAVA. Also the errors that PHP report are very simple to debug, and failures in php classes provide highly useful call-stack traces. So will node kill php? Not a fat chance. Will a node based product become popular? Undoubtedly. PHP is the go-to language to write virtually any kind of feature you want without the complexity that nodejs comes with. Also the manual is unsurpassed in quality, actually providing enormous amounts of examples that are actually functional. And what the hell is with nodejs making their font colors so similar between symbols & method calls / braces etc.. It's like they decided to just print screen code like it would look in a shitty text editor theme on their website. Also the author of php came out with PHAN which is a static code analysis tool for PHP, the only other langauges supporting this are type-strict langauges. So we've hit some pretty serious milestones on how powerful the language is. I think eventually we'll see native async, and once we get that.. I think php will be a more friendly language to use than JS. Since it's already matured to the point of close-to-type-safety.",1527296275.0
cazzer548,"Huh, strange read. I expected them to bring up Facebook since they use PHP, sort of).",1527261734.0
FearAndLawyering,This article doesn't have a date on it but it's gotta be old as shit.,1527273390.0
,"""Node is used by those pussies who once used to design webpages and now want to rock the same JS shit on the server.""

OK, for real though, PHP has survived for 23 years and there are some quite awesome PHP frameworks in the market right now. Sure, PHP has some weaknesses but that doesn't mean Node.js is perfect and is replacing PHP. 
",1527264108.0
kizerkizer,PHP bothers me on a visceral level with all its dollar signs and echos and array() looking like a function. It's just not an aesthetic language.,1527271210.0
SomeRandomBuddy,Oh yeah it is,1527253909.0
BenZed,Let's hope so.,1527273639.0
djslakor,"Node could use a widely adopted kitchen sink framework like Laravel.

If it had that, I'm not sure why anyone would pick PHP at this point.",1527270701.0
ChiefDetektor,"What a silly clickbaitish article..
As long as there are people more comfortable with php than nodejs php won't be 'replaced'.
Also this nodejs hype is kind of naive.
There are a ton of good and mature web backend languages and frameworks.
What about ruby, elixir, go, rust, python?
As if there was only one answer to the backend question.. :D
Just pick one and try it. And don't just use something because it might be 'killing' php. 
",1527286715.0
the_vico,"I still need to see (at least in my country) our web hosting services offering node in some form of plan.

For now just providers similar to Amazon or VPS offers that, so i didnt think, at least for folks without much cash to rent the latters, PHP isnt dying (plus being cheaper we have Wordpress which, despite being a bug hell, is more easy to install for IT illetrates).",1527296199.0
FormerGameDev,"I... feel like this entire article completely misses the entire point of either of the languages.

If I had a need to serve dynamic HTML, and my choices were between PHP and Javascript, you can bet your ass I'd be re-learning PHP.

That said, if I were going to design an end-to-end solution for anything, it'd be difficult to convince me of a need to do it in such a fashion that would warrant PHP.  Mostly because it's been a decade since I last touched PHP, so I have no idea what all has been improved on it in recent history.  (I do happen to run a couple of Docker containers that run PHP based software, though)

",1527304760.0
giocruz,"I don't know why but, I've been working with javascript \(both client and server sides\) and I don't want to work with PHP anymore! If I have to work with PHP, fine no trouble about it, but my preference, nowadays is Node.js.",1527343295.0
suncoastkid,Not with Laravel around.,1527597713.0
letterwood,"I think the problem is, that php need last longer do include new technologies, like websockets ^^ and many features are easier do handle in node.js as in php! But I don't think that node.js will ever kill php! The larges sides like Facebook, Twitter, Instagram, WhatsApp, etc. are not using node.js, instead two of them are using php and the others Ruby, Python, etc.! So it doesn't matter which ""Language"" you are used, for you website (because there are 1000 ways, how you can make it)!",1528899529.0
cyanydeez,"PHP will continue to survive long before node and it's death by a thousand modules moves into permanance.

I get the benefits of node, but php has tons of corner cases, dark holes, and all kinds of stackoverflow documentation. 

It's nearsighted to devalue the mindshare it takes to keep things going.

Just cause it's ugly don't be it's not functional.",1527274865.0
zcold,"I love developing with node, however sometimes, on certain projects, I feel as though php would have been the better choice. ",1527274349.0
kizerkizer,Wait... is PHP still alive? ,1527260301.0
,[deleted],1527267513.0
pomlife,Express is a relatively tiny wrapper over node. You’re fine.,1527262886.0
mohelgamal,I know that many websites depend exclusively on it. But if you are making a high traffic production website some recommend putting nginx in front of it. But others argue it can be used alone so I don’t think it is a bad habit but generally it may be a good idea to study alternatives and see if they would fit you better ,1527253091.0
Black_Corvus,"Like mohelgamal said it is a good idea to use nginx as a reverse proxy server, worth to check",1527253371.0
,[deleted],1527253367.0
BigDane1992,Have you looked into Open Source Tracing solutions like OpenZipkin yet? https://github.com/openzipkin/zipkin-js/,1527243460.0
,Write a piece of middleware to log what you want then call next() to pass the request on to your route handler. Then all you have to do is take that onto any route(s) you want to monitor.,1527247317.0
GreenMonkeyBoy,"I personally combine [Morgan](https://github.com/expressjs/morgan) and  [Winston](https://github.com/winstonjs/winston) in my express API to log everything I want. Morgan can track and log http requests and Winston can log everything you want, for example look at my functions to connect my server and the database:

    private listenServer(): void {
        this.server
            .listen(this.port, () => {
                logger.info(""The server has started running on port %s"", this.port)})
            .on(""close"", () => {
                logger.info(""The server has been closed"")
            })
    }
    
    private database(): void {
        mongoose.connect(`${Config.database.url}/${Config.database.name}`)
            .then(() => logger.info(`Connected to database on: ${Config.database.url}`))
            .catch(err => logger.error(err))
    }

It's very simple, I just add a line to log what I want. The log will appear in the console and optionally be saved in a file in json format. You can separate your logs in different files. In my case, I log the errors in a different files that info logs, it's why you can see ""logger.error\(\) instead of logger.info\(\)"" in the database connection. In your case, you would maybe don't save the logs in a file but directly in a database.

So if you just want log http requests, you can only use Morgan. To save the logs in a MongoDb database, you can try [Mongoose\-Morgan](https://github.com/nemanjapetrovic/mongoose-morgan) \(I have never tried it\).",1527256196.0
sv-2,"Take a look at this module: https://github.com/slanatech/swagger-stats
It traces API requests and responses in Node.js, calculates stats and provides telemetry dashboard to monitor API calls. You can also provide your callback that will be invoked for each API request, so you can store req/res details for further analysis (http://swaggerstats.io/docs.html#configuration) ",1527263625.0
cahva,"For that particular case, checkout twitters api how to access streams:
https://developer.twitter.com/en/docs/tweets/filter-realtime/overview

We use this to track search words and hashtags, Im not sure if ot works with users:
https://github.com/SpiderStrategies/node-tweet-stream",1527278004.0
joao-louis,"delete package.json, package-lock.json and node_modules directory first, then run these

`npm i -g npm`

`npm init -y`

`npm i --save-dev discord.js`",1527245916.0
_dramaBoy,"hey,

which version of nodejs are you using? \(node \-v\)",1527247843.0
METALz,"At first look I'd say you have a package-lock.json which contains npm (if you used `npm install npm` before in this dir). So probably cleaning the whole directory could make this problem go away (npm wouldn't resolve to the one that may or may not be in node_modules).

I'd suggest using a sub directory which has a more meaningful name to your project, e.g. `test-project`. If you use a directory name that could be a dependency in your package.json it would confuse the hell out of npm and would think the dependency is the actual folder (at least it was like that in the past) - here nodejs is not a dependency as an npm package but it's a good practice to follow.

Also it's a good idea to avoid modifying the npm/node install folders, e.g. if in this case if node/npm is installed in this `G:\NodeJS` folder.

If none of these are applied here and it still won't work just remove nodejs/npm and reinstall via e.g. https://github.com/coreybutler/nvm-windows which will handle any issues you would have during installation/editing PATH/etc.",1527244543.0
shtanton,"Looks like you don't have a package.json file, run 'npm init ' and try again",1527242464.0
BenjiSponge,"If I'm understanding correctly, the issue wasn't really the client sending the request twice. It was really that the server accepted the duplicate request.

Seems silly. Why even use ids if you're not going to check their uniqueness when you actually execute the transaction? If I understand the problem, it's really quite a rookie oversight that should be easily caught by defensive programming.

P.S. If I had to guess why it still happens, it's because you check to see if the id is in the database and then if it isn't, you add it again. However, it could be entered between the time that you check and the time that you enter it. The solution depends on your technology, architecture, etc, but you can just put a uniqueness constraint on the id (which you should already have) and a consistent database will always reject a duplicate.",1527305572.0
adidarachi,"Happened to me about a year ago.
Also managed to help other people.
https://stackoverflow.com/questions/30704965/nodejs-child-process-child-process-run-twice/41601586#41601586

(Also I my opinion, the story and the title are irelevant and waste of reading time)",1527253969.0
helge47,"It depends on what you are using on client side. $.ajax() could do that for jQuery. Or you can do that with a form. 
To be honest, this isn't really a question you would expect to be answered in node community, this is a front-end-development-related thing.
This could probably help: https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data",1527227751.0
IwazaruKyu,"The modern way to do this is to [use fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch). If you need to support old browsers like IE you can use a polyfill like [github/fetch](https://github.com/github/fetch).

    const data = document.getElementById('#paragraph').textContent;
    fetch(http://example.com/, {
        body: JSON.stringify({ data: data }),
        method: 'POST'
    });",1527234801.0
cooliobing,"See [this sample](https://github.com/passport/express-4.x-local-example/blob/125e166/server.js#L13) for help with LocalStrategy. add some logging [in your code](https://github.com/Tapudp/ultimate-lekha/blob/8fba401270e8d38dd44a265e0271440c9b35daf0/config/passport-setup.js#L17) to figure what happens when the user logs in.

\> it just goes into infinite connection loop mode

Probably a redirect loop. ",1527287696.0
Fullstack_Questions,"Stephen Grider has released an advanced Node course a few months ago. I warn you, it’s not that easy. And I can tell you after working with NestJS, docker, Ansible for a month : ugh! :) 

Nose with Typescript is the best though. And if you don’t know already, learn to write tests and be ready to talk about basic yet structure, hooks, test databases , fixtures etc. They are more important than the code in backend wheee business logic is stored. 

That that course, even you don’t master it, it will give you a lot of bs to talk about and impress the tech hiring persons :D ",1527227320.0
enterloper,"I’m just here to wish you good luck on your next run of interviews. Okay, bye now buuuuuuddy!",1527226406.0
vosper1,If M in MERN stands for Mongo the best thing you could do is learn about relational databases. Most businesses aren't built on Mongo (and most of those that are made a mistake and have a mess),1527240433.0
thawab,"You can look into the company website and check what they are using, or check the employees twitter/github accounts to see what they are interested in. After that you can choose what path to take. There are a lot of great frameworks for react or node and a month is enough time to get to know the basics of it. Having the basics and interest in the same technology that the company is using looks good in an interview.

Don't be too hard on yourself or get into a lot of stuff. A big part of the interview is basically knowing if you are a good fit and can work with the team, technology isn't everything. I would advice to read more about job interview skills and know how to showcase communication/ enthusiasm and as a problem solver. 

Good Luck",1527233901.0
Nexum666,"Depends on the company you want score tbh.

Shops / Small Business Websites / Large B2C / High performance / realtime

all of those require different approaches and depend largely on how the company works internally.

try to understand what they do and see if you can imagine how their structures have to be / could be (scale / complexity) if you really like big complex systems you will overwhelm a company that does small wordpressish sites. But if you show 2-3 file projects to a company that usually works with BIG libraries of thousands of files (you cant show a personal project like this obviously) make them feel like you understand the scale of what they do and that you feel yourself at home in systems of this scale.

hope you understand what i mean, its not skills, you will always need to learn the skilsl for a specific company, focus on understanding the grander concepts and technologies they COULD be using (if they dont tell you anyways) :)

For bigger companies i recommend:

Redis, Varnish, SOLR/Elastic/... (some search engines at least), Mongo, MYSQL

and of as node dev 
KNOW YOUR PACKAGES AND TOOLS
what is async/await, generators and so on
koa /express / meteor, gulp/grunt (at least one of those), socket.io (websockets in general)
know what package-lock.json does and so on. 

the general coding should be expected from you, noone should ever ask: do you know if clauses. i mean come on we are developers, that should be clear right ;)",1527238543.0
Nexum666,"Grunt gulp are replaced by npm scripts, i guess but in my experience big projects dont change as fast as the tutorials, if you have complex building tasks, own grunt tasks to do crazy things and so on switching the whole building pipeline comes with great cost so i would suspect that a lot of companies still use it a lot... ",1527253714.0
notkraftman,Link some code?,1527260829.0
ncgreco1440,"> The two commented lines obviously may take a lot of asynchronous code in some cases but that's part of the problem;

Why would async code be the problem?

     socket.on('newMessage', (message, author, friendId) => {
         pushMsgToMongo(message)
              .then(receivedMessage)
              .catch(notReceivedMessage)
     }

Doesn't seem so hard to me.

Perhaps you need extra message brokers to help you with a separation of concerns. You can spread out a lot of this stuff in multiple files if you want. No reason to keep everything in 1 socket.js file that bloats up to 1000 lines.

Perhaps the pushMsgToMongo function resides in another file that gets included. in your socket.js file. pushMsgToMongo doesn't really care about the sockets. It only cares about the message string, who wrote it, who it's going to and then store that information into a document. When it's done it'll call another function ""receivedMessage"" or it could make use of events and notify the friend that way. ",1527194706.0
broofa,"There's nothing intrinsically wrong with that code block.  It listens for new messages from an author, persists them in a DB, and publishes them to a recipient.  Pretty standard fair.

One point worth calling out is that the code assumes the author and friend are both connected to the same server/process.  That assumption will break down as the # of users scales, and fixing \*that\* is a [non\-trivial problem](https://hackernoon.com/scaling-websockets-9a31497af051) that is beyond the scope of this question.

As for how to structure your code, it sort of depends.  App frameworks are often ""opinionated"" about the directory structure you should have.  This is often further encouraged by via framework\-level support for loading and initializing files automatically if they're located/named properly.

That said, my current work is built on a vanilla express stack, with the following directories \(among others\):

* **db** \- database \(Sequelize, in our case\) model files, with an *index.js* file that knows how to load them automatically.
* **api** \- express route handlers.  We have a REST api, so we have one file per resource type \(which roughly corresponds to our DB model types\).
* **src** \- where all the ""view"" stuff goes \(i.e. everything packaged by webpack\).  Again, our view structure corresponds roughly to our DB models.
* **\(misc\)** \- a handful of  other random directories because code is messy

Our files are typically in the 100\-300 line range.  There's a lot that are shorter than that, and very few \(none?\) \> 500 lines.  We don't have any policies around this... it's just how we tend to code.  If a file gets too unwieldy it ends up getting refactored and cleaned up in the process.

To break code apart, you do that in one of two ways.  You can divide along functional lines \(one file per model or API resource type\), or you can divide across functional lines \(create a ""helpers"" or ""utils"" file\).  We don't stress too much about how/where these lines are drawn, especially for helper and util stuff, which is often a catchall for code that doesn't fit well elsewhere.  You'll often figure out later how best to organize code once the dust settles.

Hope this helps.",1527195523.0
zingzingtv,"I would look at functional programming and specifically RxJS as a library that could help clean up some areas. Used correctly, and with a bit of planning, it can fix many async issues.",1527197627.0
jaunkst,"Functional and or reactive patterns can help here as mentioned above.

If you want reactive you can look at rxjs pipes.
Or just plain lodash/fp look at flow 
And finally you can also checkout ramda compose? (Off top of head I think that’s it) 

Your code can then be compose-able streams.

Rxjs should be able to subscribe to an observable that your messages are pumped to. Your subscription would compose a series of functions to create logic.

There is a rabbit hole here so take your time. Combinators, Curry, and other functional patterns can take time to absorb.",1527222098.0
tweettranscriberbot,"^The linked tweet was tweeted by [@ljharb](https://twitter.com/ljharb) on May 24, 2018 16:09:35 UTC (0 Retweets | 0 Favorites)

-------------------------------------------------

[@olegskl](https://twitter.com/olegskl)  [@andrestaltz](https://twitter.com/andrestaltz)  [@bradleymeck ](https://twitter.com/bradleymeck ) The existence of a joke PR that was never merged does not mean anything is a contender, and it’s unfortunate that the humor went over so many heads.

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1527185598.0
mistralol,"
Actually http for internal server to server components is dreadful at scaling for load compared to other solutions like pipeline rpc json using persisted connections. Some of the reason why you actually need to scale to a cluster is because http is in use in the first place.

For comparison. Between the 2 designs. By the time the tcp connection is complete and the http request is sent. The other system has the response already processed and is on the way back normally since its sent in the first packet. Also when the load goes up multiple smaller requests start to get put into the same network packets so the efficiency also goes up.

As for auth. Well its internal so you use a TLS client cert on the socket.

",1527188838.0
bookercodes,"My mate [Hugo](https://twitter.com/hugojmd) and [I](https://twitter.com/bookercodes) wrote a tutorial on how to build a command\-line chat with Node and a chat SDK I am helping to build called [Chatkit](https://pusher.com/chatkit). Please check it otu and let us know what you think! If you prefer video, [I made a screencast about the exact same topic](https://youtu.be/VT674-wB6-Q) :\)",1527180966.0
harrydry,"chatkit is really really good.
I used it to for messaging on my dating site. 
honestly makes chat so much easier! ",1527188570.0
B0hne,The latency of that setup is interesting why does it take \~5 secs to send a simple text?,1527252039.0
-xNull,"Why not use slack.io ? Where is the difference?
I used slack for my application and it works wonderful. Would be a shame if I had to migrate ;)",1527260181.0
Akaino,"How do you think node doesn't support ES6?
As far as I remember Node supports ES6 since 2015.

https://nodejs.org/en/docs/es6/

Or did I misunderstand something?",1527180291.0
unstablevacuum,"Not staying current? What the shit are you talking about?

Firefox only *just launched* native ES6 module support [in version 60](https://caniuse.com/#feat=es6-module), released TWO WEEKS AGO.

As for *why* it's not supported in Node.js yet, you could literally google ""why does node not yet support es6 modules"" and read the first result and learn about it, instead of complaining.",1527182369.0
SkaterDad,"If it really bothers you that much, you can try this:  https://github.com/standard-things/esm

I don't see this as a big deal, honestly.  The ES modules are great for the front-end, where you need the static analysis to make bundles smaller.  In Node, the more dynamic nature of `require()` is kind of nice.

The rest of the modern ES features are largely supported, and make a much bigger impact in my code, such as spread operators, destructuring, and async/await.",1527182583.0
l30nid45,"im thinking about trying elm on node.

fite me",1527181335.0
Re_did,"for me maybe it's just about time for node to ""calibrate"" with those new environmental things, since almost every browser also just started to use ES 6 modules. Like Firefox for example.
Thus, for me personally i won't say that node is falling behind at this time.

Cheers.",1527250636.0
Star-Lord10,Maybe you installed packages globally on your desktop and did not save them in your package.json.,1527153992.0
Pr0ducer,What's a bad request? What error are you getting? What's in the console? What's the response code? What steps have you taken to identify the problem?,1527170711.0
randomFIREAcct,this is definitely not enough information for us to provide any useful help,1527171911.0
jwalton78,"So, let's say you have a simple app like:

    const app = express();
    app.get('/hello', (req, res, next) => res.end(""Hello world""));
    app.get('/foo', (req, res, next) => res.end(""bar""));

Super simple - you point a browser at ""/hello"", it replies with ""Hello world"".  Go to ""/foo"", it says ""bar"".

Now, here's what middleware is all about:

    const app = express();
    app.use((req, res, next) => {
        res.setHeader(""x-foo"", ""bar"");
        next();
    });
    app.get('/hello', (req, res, next) => res.end(""Hello world""));
    app.get('/foo', (req, res, next) => res.end(""bar""));

This program works the same as before, but if you use the developer tools in your browser, and head over to the network tab, you'll see that responses to ""/hello"" and to ""/foo"" now have a new header called ""x-foo"", with the value ""bar"".

So, a middleware is a function that gets called for every route, and can affect the outcome of every route.  *Most* middlewares will call `next()`, which passes control on to the ""get"" or ""post"" handler for the route (or, if there's more than one middleware, it passes control to the ""next"" middleware).  Some middlewares will write a response to `res` and never call `next()`.

Middlewares (and routes) are run in order, so if you did something like this:

    const app = express();
    app.get('/hello', (req, res, next) => res.end(""Hello world""));
    app.use((req, res, next) => {
        res.setHeader(""x-foo"", ""bar"");
        next();
    });
    app.get('/foo', (req, res, next) => res.end(""bar""));

you'd find that ""/hello"" doesn't get the new header - the ""/hello"" route handler runs before the middleware, so the header never gets added.

Middlewares are useful when you want to apply some conditions to all the routes in your system.  You can, for example, use this to prevent users who aren't logged in from accessing certain routes (if the user is logged in, call `next()`, otherwise, call `res.redirect()`).

When you do:

    app.use('/foo', middleware);

This just makes it so ""middleware"" is only called on routes that start with ""/foo"".  It's not really meant to be a replacement for ""get"" or ""all"" though - you should still have a ""get"" somewhere to handle the route, after this.",1527165564.0
timgfx,"app.use allows you to add middleware. It is possible to assign a path to app.use which can make it function like app.all, which basically respond to any request type with a certain path",1527156736.0
mitchjmiller,"Put simply; app.get() will only be triggered for http GET requests to that particular route; while app.use() will trigger for all http requests matching that route.

The same applies for app.put(), app.post() etc.

Docs for express app can be found [here ](https://expressjs.com/en/api.html#app.all).
",1527154355.0
bjelke2,"I would recommend you to check the getting started and the guides at theyr documentation website ""[https://expressjs.com/](https://expressjs.com/)""",1527248235.0
octaw,"const app = express()

app.use(BlueBalls)

We are telling express to use blueballs middleware

app.get('/api/messages') tends to be more endpoint pathing.",1527169206.0
fortitude_IT,"I think Wes Bos mentioned something like this on a recent syntax podcast episode. Not sure if it’s what you’re looking for exactly: https://github.com/sahat/hackathon-starter



Here’s the episode. https://syntax.fm/show/045/potluck-ep-is-redux-dead-learning-quickly-developing-solo-specialist-vs-generalist-funnest-projects-wes-bbq-course

35:00 Why do thousands of entrepreneurs build SaaS products on Ruby on Rails? (The first link is listed)",1527140990.0
flipperdeflip,https://github.com/sindresorhus/awesome-nodejs,1527172100.0
OzziePeck,"People,  pls refrain from posting junk to the subreddit. ",1527267583.0
iWantedMVMOT,Neat,1527130876.0
zaidka,For a second I thought that's a new release in v0.10 branch.,1527143237.0
alexander-pavlyuk,Is major versions release speed increasing? ,1527156136.0
BTMPL,"Most of programming is ""learning the words and putting them together"" - it's going to get more complex once you're faced with more complex problems.",1527102196.0
toyonut,"Don't buy the lie that you aren't doing real programming or that you are ""only scripting"". Node has its place on the back end just like many other languages. Once you have syntax down and get used to the promise/async way of working, you can do productive programming with it. ",1527104269.0
JakeInDC,"It's more about learning the common serverside patterns to accomplish tasks. Like reading/writing files, using streams, http requests, spawning processes.  Node is just as functional as java or python. Doing small side projects and learning to use Node to solve problems that present themselves during those projects is you best bet.",1527113395.0
AaronYoLungz,"I've been programming for 4 years (3 professionally) and still find myself ""memorizing"" what API calls certain tools offer. If you are doing ""real"" programming as you put it, then you are familiar with the tools you are using and you are using them to solve problems not many others ran into. This is generally a good sign you are growing your skills.

If you're stuck in a ""memorizing"" phase, then it's because you're learning the tools/language/framework. If you're getting frustrated memorizing then keep going down the track.

EDIT: When I say ""generally a good sign you are growing your skills."" this can often be viewed as a double edge sword and you need to be more careful of how your work affects maintainability, readability, and conventions of your platform. ",1527104500.0
A4_Ts,"Imo backend can be 100x  more complex than frontend and definitely there’s more thinking involved.  I feel like this is where cs theory pays off. You’ll be tackling things such as 

1)  security
2) distributed systems 
3) performance optimization 

So the types of problems you can possibly face are things such as will this backend be able to serve 1,000,000 people concurrently? If so what’s the throughput of the server you just put together? How will you handle it if your server dies? Will this be able to handle CSRF attacks? How am I going to write the logic for them to log in? Which data structure(MySQL, Redis, etc,)  am i going to use and how will it affect my performance time? Etc etc. 

",1527119294.0
Lambotherambo,Shiettt. I wholeheartedly disagree with what you just said about node   (since most of my expertise is in it) but I have had the exact same experience with .NET recently and your post basically just confirms that it is because you don't know enough of the language yet. ,1527119701.0
compubomb,"I've been writing php professionally for the last 8\-9 yrs, and been writing code for about 18 yrs. I'm currently also learning how the node stack works, I already understand all the patterns I'm seeing, it's just very strange the way routes are handled in conjunction to say working with symfony/laravel/etc.. Normally a response is returned, in express, they do results.end\(\), very strange. Most everything else is exposure to API's. C# for example is a fairly straight forward & simple language, 90&#37; of the difficulty in C# is the .net framework, because it's so freaking huge, and you have to expose yourself to so much of it that only until you build experience do you truly understand it's power. You can't just pick up a book and say, whoa.. I know C# like in the matrix Keanu Reeves says, he knows kungfu. Just gotta blow through it, bash your head against that keyboard a bit, and wake up over many days until you finally say subconsciously.. I think I know this platform now.",1527428326.0
sabbir-2016,"Check the following link, it will solve all problem
https://github.com/Microsoft/nodejs-guidelines",1527095110.0
SkaterDad,"Where will the data end up?  Just in an email?  Or stored in a database, then presented on another webpage?

I ask this question because I'm curious what kind of sanitizing you need.",1527091761.0
xQuai,I'm using Robo3T. Look here: https://robomongo.org/download,1527091365.0
roboctocat,Desktop solution [https://www.mongodbmanager.com/](https://www.mongodbmanager.com/),1527088863.0
mtaon,"I think that the problem is that you're trying to serialize DOM elements as JSON in `formats`. Instead you should store their value, id or name attribute.",1527086704.0
zorlan,"Specifically this happens when you have a reference that creates a cycle.

e.g. A parent class that has a reference to a child that has a reference to the parent - the serializer could traverse the object structure infinitely.

Most JSON serializers let you specify the max depth for traversal, JavaScripts stringify requires a custom replacer function to do this:
https://stackoverflow.com/questions/11616630/json-stringify-avoid-typeerror-converting-circular-structure-to-json",1527114343.0
Capaj,use destructuring for Christ's sake.,1527110523.0
mechanicalpulse,"You cache it.  But then you have other problems, like cache coherency and invalidation upon updates.

There are many options for caching.  You could just use a global object.  But then what if you have multiple nodes or processes?  You have to figure out how to update the global object in all nodes whenever it changes.

Using external key/value stores such as Memcached or Redis can eliminate the problem.

There are also modules like [lru-cache](https://www.npmjs.com/package/lru-cache) or [keyv](https://www.npmjs.com/package/keyv).

But, as someone else has already said, simple read queries like you have in your example are among the least worrisome queries you can run against a database.  Reading from a database is the simple case.  Even if you had the load necessary to create performance issues, it's relatively straightforward to add read replicas to most popular RDBMS and spread the read load around to multiple database servers.

Writing to the database is where you need to be more concerned -- there are more performance considerations and edge cases when writing.",1527083109.0
tjugg,"Why would you want to load the same data every time your user navigates to a different page? Store the information on the client side. Example, user logs in, he gets a object what contains an access token, and basic information like email, name, avatar. You save this information on your client side application. If you use sessions, store it in the session so you don't have to keep hitting the database for the same information.",1527084931.0
furious_heisenberg,Generate a JWT on successful authentication that includes claims for the data and have the client include it on every request in lieu of a session header/cookie. Here’s a quick [intro to JWT](https://jwt.io/introduction/) for convenience.,1527085236.0
erulabs,"Assuming “uid” is an indexed column, you can easily handle hundreds of thousands of selects a second - don’t bother with “caching” here - a MySQL database using innodb will automatically keep the value in memory assuming you have enough memory - infact innodbs in memory cache in many many many cases beats the life out of memcached and even redis in terms of performance. The biggest sin here, and by far the biggest scaling/performance issue is that you establish a new connection on each request. You should establish the connection on application start, and re-use the connection in the route handler. Establishing the connection is a lot slower than you might imagine!

Don’t reach for caching solutions here - MySQL is an excellent “cache” and it will deal with cache invalidation automatically, and bug free, with zero code on your end. Read about the “innodb buffer pool” if you’re interested in MySQL built-in in-memory caching mechanisms.

If you really really want to cache, or if the query becomes very complex, use Redis. An in memory LRU cache inside of node is something I highly discourage. Source: I’ve scaled node/MySQL applications to top 10 North America Alexa rankings. Good luck!",1527141091.0
mtaon,"I wouldn't worry about performance because databases are fast and should cache repeated queries and results. Performance is important but simple select queries like that should not be the bottleneck.

Other than that, is the `userData` a global variable? You should store it in the `req` to prevent bugs where a request has the wrong user.",1527081011.0
patrickfatrick,"You probably don't really need to cache this. Caching is great for expensive queries; caching a super simple one\-column select statement is not really going to be worthwhile, I think. Unless you've determined your database is definitely a bottleneck here, in which case you might want to look at ways of optimizing your data or caching it in a separate Redis store. But I kinda doubt it.

Another option would be to store this stuff in a cookie when the user logs in, if it's only needed for front\-end UI stuff.",1527098389.0
shanet,You could store this data in `req.session` (using `expressjs/session`) when the user logs in or changes the data.,1527080973.0
ecares,"Do you use this module, have you faced the issues described here? How would you feel if this module gets removed from Node.js core?",1527077352.0
,[deleted],1527081190.0
tlystad24,I would look into the documentation of [Discord.js](https://discord.js.org/#/),1527072055.0
Nhawdge,Private message me and I'll send you mine.,1527075938.0
ecares,"First picture ""stable http2""

cheking doc =\>[Stability: 1](https://nodejs.org/dist/latest-v10.x/docs/api/documentation.html#documentation_stability_index) \- Experimental

Please, try at least.",1527068802.0
oculus42,"There may be a better or easier way to do this, but trying to search for anything about NPM is close to an exercise in futility, since you'll end up with README content from every package.

I was looking for some simple code to make sure I get arguments passed to me from `npm run` scripts. Be default it ""cleans"" the data and removes options, so:

    npm run foo bar --force --port 200

returns the less-than-useful

    ['...', '...', 'foo', 'bar', '200']

The function in the gist digs into the environment variables that NPM provides and gets the original values. It does vary from the actual args, because you don't get the full paths for node and the script as the first two:

    ['npm', 'run', 'foo', 'bar', '--force', '--port', '200']

This feels sketchy, but it's consistent across Node 4+, and I need it to not be a full package, because I need it to run before install, possibly.

Better alternative or improvements appreciated!",1527043955.0
MWrathDev,"This doesn't seem to have anything to do with HTTPS, you need AJAX to update requests without page refresh, or websockets to do server push.

But more to the point, is the 3rd party API public i.e. do you need a key to access it?

If not, why are you trying to middleman your server when the browser could just make the request directly?

If a key is required, i highly doubt you should be making API calls on user request unless it is time sensitive data. Instead you should be making them at timed intervals, caching the result and then serving to users based on requests to your own server.",1527042118.0
mospretmen,"USE EJS, embedded JavaScript ",1527058491.0
ehansen,"So ignoring ""best practice"", you will most likely need to wrap the https.request call in a Promis and resolve the API.result so it returns.   This will also require some rewiring of your backend service.  

Problem here is due to async you have no way of knowing when the call completes.  

If you need more help then please provide more code so I can point you in the right direction.  There are other ways to handle this like doing the business logic inside of your routes action function itself but the promise way is how my work does it. ",1527066566.0
AmishPanda00,"Hey saw in one of your comments that you were getting a CORS error. I'm on mobile right now but this is something you'll encounter in the future. Fairly easy to work with as you just need to tell the server to accept requests from other origins. 

The Mozilla write-up is the best one I've found:
https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",1527132456.0
IUsedToBeACave,"This is very difficult o answer without all the details, but I bet I can guess what is happening. You are probably listening on an event of some kind that emits the data. You are assuming all the data from the Arduino will come in as one payload from the event, but in fact this is not always the case. You need to collect the data from all the events, concat it, and then log it to the console once you get the signal that all the information from the Arduino has been sent.

",1527031672.0
IUsedToBeACave,"I'm pretty sure one will do in this case, a little sample of code would sure help understand exactly what you are trying to achieve. But 15 event emitters is probably overkill....",1527031895.0
Sn0wCrack7,"Windows  Console doesn't support UTF-8 by default, so most characters like that will display incorrectly. You'll need to get something like cmder in order to get UTF-8 support",1527044467.0
humbuggeromlet,eagerly awaiting the promise of a multithreaded future!!,1527010365.0
dollep,hell yes,1527007493.0
cooliobing,"It's nice to see this but I hope this is done carefully. I can see how this could be immediately beneficial for CLI scripts/tools like code minifiers, etc. and people who want a 100% JS stack. but i also like the idea of an isolated external runtime that deals with CPU bound stuff since at the end, its just about having a convenient user API in node and message passing. Humans aren't good at thinking about concurrency.",1527025915.0
Lambotherambo,Doesn't the cluster modules already achieve multithreading?,1527044020.0
danlugo92,Holy fucking shit fucking finally fuck. I'm cooking up a nice concurrent javascript library and I really really wanted it to work with both browsers and with node.,1527045094.0
reallyserious,No Windows support is a big issue when so many are developing on Windows. ,1527011515.0
nejcn001,"What do you think, will it compete with Java multithreading?",1527009129.0
amiritegaiz,"Hmm, wasn't the whole point of Node.js to avoid threaded programming?

I mean the event loop uses threads as part of it's implementation, I took it to be an abstraction to achieve concurrency without threads.",1527071971.0
mneumonia,Most people implement multi\-threading poorly.  This will just add to the garbage pile.,1527013738.0
captain_obvious_here,"Horrible memory leaks and race conditions in 3...2...

But seriously, that's great news !",1527066973.0
Deadlybeef,"This won't answer your question, but reading that you roll a custom encryption, I have to point this out: https://security.stackexchange.com/questions/18197/why-shouldnt-we-roll-our-own

And here's the same opinion, in an article from Bruce Schneier, the invetor of blowfish: https://www.schneier.com/crypto-gram/archives/1998/1015.html#cipherdesign",1527000652.0
fallen77,"Your blog posts on reddit have fake users who make the first comments. You have multiple posts like this one where users respond like 'Thanks for sharing your knowledge!' and are very inactive. Please let your articles stand for themselves. 

https://www.reddit.com/user/crlsmrls
https://www.reddit.com/user/kj2w
https://www.reddit.com/user/stuartpbw",1527008560.0
tomastrajan,"I would like to make an official statement, I have been accused of botting on reddit by a comment by u/fallen77, without any attemt to ask me for my version before.

I was NOT aware of those accounts, or that they they are bots. I always try to reply to every comment on my content.

As for botting, Release Butler is my first attemt at automation and I am very public about him being a bot as in "" a Twitter bot that keeps you up to date""...

I have been publishing Angular, javascript, frontend and node content since early 2015 on Medium and here on reddit and repied to most comments...

Thank you for your attention",1527037363.0
moudallal,Well done 👏 and thank you for this!,1526987155.0
mateusrangel,Cool! Thanks for sharing your knowledge!,1527042048.0
,[deleted],1526999757.0
OzziePeck,Knex/bookshelf ,1526989691.0
nothingduploading,It says its $199 on Udemy.,1526950410.0
LewisJEllis,"Not really, unfortunately. I noticed this last week and looked into it and ended up filing [an issue](https://github.com/npm/npm/issues/20662).",1526960515.0
OzziePeck,"Just use Yarn. It’s far superior, as is probably blatantly obvious. ",1526970568.0
BenjiSponge,Seems good to me. ,1526942927.0
IUsedToBeACave,"I think you are on the right track, and yes it is this complicated. Security is hard and you have to think very carefully about it. In your case I wouldn't keep the SysAid token in the client application (i.g. in a cookie). Basically store the token you get back from the SysAid Login in session storage. Then you can access that token specifically each time a user makes a request through your application. Session storage is basically your database idea, but Node.js and express have tons of libraries to make this very easy to do. I would also look into passportjs, as you can implement your own custom authenticator against the SysAid api, and integrate it into you express session storage easily. ",1526947853.0
winzippy,I like how every Node tutorial invariably ends up using Express.,1526977202.0
runvnc,"It's actually an env var.

    NODE_OPTIONS=""--max_old_space_size=128"" node -v
v6.12.0
",1526932126.0
IUsedToBeACave,"Why does the dev version need https at all? Why not just run it without SSL in dev mode? Make a config file the sever uses on startup so the user can supply the options for SSL certs, ports, and etc. ",1526948189.0
Pedrock10,It does not talk about the GraphQL part...,1526983717.0
thickoat,Part II here: [https://www.reddit.com/r/node/comments/8o28u3/how\_to\_setup\_a\_powerful\_api\_with\_nodejs\_graphql/](https://www.reddit.com/r/node/comments/8o28u3/how_to_setup_a_powerful_api_with_nodejs_graphql/),1527979779.0
jwalton78,"Just released a new library called Exegesis \- [https://github.com/exegesis\-js/exegesis](https://github.com/exegesis-js/exegesis).  This will let you use the new OpenAPI 3.0.0 standard on node.js, which is the ""successor"" to Swagger.  \(And, if you're using express: [https://github.com/exegesis\-js/exegesis\-express](https://github.com/exegesis-js/exegesis-express)\).",1526992023.0
mauitikitiki,"Check out stripe.com, you can use that to do pretty much all the billing, invoices, re-occurring subscriptions invoices etc that you have listed. You may need to add a user profile system to store any other data for your users and an authentication system.

Stripe has excellent docs and api, with copy paste examples in lots of languages. They take a small fee on each transaction.

Just built a system like this using node, hosted on elastic beanstalk on AWS, you can look at simple queue service and worker instances (or lambda) to process tasks.",1526980302.0
IUsedToBeACave,This is an incredibly complicated question with more than one right answer. Which the description of each would take quite a bit of time. You probably need to hire a consultant to walk you through this...,1526948435.0
ncgreco1440,"Absolutely fantastic talk! I actually watched the whole thing. Would definitely recommend anyone who is trying to learn how to build bulletproof NodeJS applications. 

It's easy to spin up Express servers and watch some magic happen in just a few lines of code, but what happens when an exception is thrown? Does your app just crash? Or do you handle and log it accordingly? Do you write your code solely around just not running into that exception? (AKA, do you only test/expect the happy path?) 

What happens when the code is up on a development server and I'd like to debug? Chrome inspector tools has you covered! 

Don't forget about the front end! If you just log out back end errors/exceptions you really are just monitoring half your application. 

This presentation has it all, you'll come out of this knowing exactly what and how to properly monitor your NodeJS application, all taken from the experience of an architect at one the largest companies in the world, PayPal.",1526914636.0
Wirbelwind,"Recommend it. Immediately applied a couple of the recommendations (custom error classes with stack traces, async-await middleware for express to handle exceptions thrown in async functions and the response instead of me copy pasting the same try-catch clause in each facade class ...) after I came back from the talk

",1526926038.0
OzziePeck,Page not found. Great. ,1526922281.0
aftersox,"Easiest way is to get a virtual server of your own from some place like Digital Ocean or Linode.

Doing it on your own PC can have some challenges. You need to configure your router to send requests on the port your using to your machine. But often ISPs specifically forbid and restrict that kind of behavior... I know mine does. :-(",1526902110.0
Shadaez,"Do you have a static IP? If not, you'll have to get dyndns or similar service set up.

If so, just point your domain to your IP, forward your ports and you should be good. Where are you stuck?",1526928044.0
roboctocat,"Here's what you need to do.

1. You'll have to configure your home router to open access to a ip/port on your local network.
2. Set up domain to point to some DNS. 
3. DNS should then forward to IP your ISP assigned to your router.

If ISP changes your IP you'll have to update DNS forward. Without DNS you can provide site via IP.",1526933321.0
iluretar,"Like others said it would be difficult or even not possible depending on your ISP , but first you need to get a static ip from them, then configure your router to forward the ports you need to your server, setting up apache or nginx as reverse proxy to serve your apps on the ports you need and configuring your domain to the static ip provided by the ISP. ",1526910612.0
TheMr_,"I would have to agree with /u/aftersox . The easiest would be a VPS. I would even say you SHOULD use a VPS since those will be more reliable and you'll know for a fact that a potential employer can see your projects.

If you absolutely need to host it yourself, then as others have said, you would need to get a static IP and configure port forwarding. You can also try [NoIp](https://www.noip.com) if your router supports it.

If neither of those options will work, you can use [LocalTunnel](https://github.com/localtunnel/localtunnel). The downsides with this are speed and using a subdomain. I was generally getting about 800ms response time but sometimes up to 5 seconds. The other thing is all your links will be a subdomain of localltunnel.com.

I've since switched to [SocketTunnel](https://github.com/ericbarch/socket-tunnel) and setup my own proxy server on linode. This works great! The only downside is I haven't been able to get websockets to work yet. But everything else works flawless. The subdomain would also be under your own domain and you could use it to proxy any service now or in the future that you need to show off.

Hope this helps!",1526914123.0
sirramin,https://www.openshift.com/,1526916064.0
gaseous_cloud,"If you must host from home \(not recommended\), you'll want a dynamic dns service. Run your code inside a vagrant box to give your home system at least a little protection. I'll leave you to look up the details.

This is not an entirely safe solution, but that's on you.",1526918803.0
Anony176538,Ngrok - public tunnel to localhost https://ngrok.com if it is only for demo purposes,1527032690.0
NormalUserThirty,why exactly do you need to host it yourself?,1526921186.0
will123195,https://medium.com/@will123195/continuous-deployment-with-aws-dokku-circleci-999b749151ed,1526906907.0
mclovin4009,"    Suppose I would like to publish (put it on the internet so anyone can access it) this cube timer, do i need to use node in some 
    way?
No. Node will not be needed to host your website. It all depends on what you're using for the front-end. If you're using a templating engine for node like EJS or PUG etc, then yes, you'll need node for hosting the site.

    If i would like to add those times to a database would I have to rewrite the whole cube timer in node or could I just somehow link it 
    with the backend? 
Nope. You can just send the timestamp/timer value from your client(front-end) to node via REST API's (or socket's, if that's needed. You'll need to create a webserver for this.) and have node write it to /store those values to the database.

 ",1526937069.0
mohelgamal,"Node is simply a layer that allows JavaScript to be used on a server as a back end language doing backend stuff such as database integration. It comes with an http module which function as a server but most find express server module to be more robust and even easier to use. 

If you just have a webpage with a script in it that creates the game (without database recording stuff) . You don’t need a backend service to do that. Just any web page pushing software would do that. That could be node with express or Apache or nginx or a combo of all that although that would be a huge overkill.

If you do want the game to records the moves in a database. Then you will have to modify your game code to send the moves to a backend software sitting on the server which can be node or anything else. That backend will take the messages you are sending and process them to put in the database. 

Technically you can make your front end talk directly to the database but that is super insecure since you will have to put database access info into your JavaScript which any user can read and take control of your database ",1526894059.0
fl0w_io,"No, that function will run in a ""blocking""-fashion.",1526893534.0
NormalUserThirty,"my understanding is that CPU intensive functions are not really run asynchronously as there is only one thread in node, which is completely blocked when the CPU is busy",1526923562.0
mohelgamal,"You would have to write the function in an async manner. A simplistic way would be 

async function something () {} 

But then you will only be able to call it from another async function using the await keyword 

Such as 

async function outsidefunction(){
let result = await something()
return result 
}

Your code will have to be written in async functions all the way up as if you try to just call something() directly you will get an undefined result. Unless you don’t care if the function return anything such as writing to a database 

async function writeToDatabase(item){
   Blah blah with no return statement 
}

Then just call writeToDatabase() from another synchronous function and it will execute it without blocking the rest of your code from running 

Although I don’t recommend that since your database write can fail silently in that situation. I typically like my database calls to return a confirmation things went correctly ",1526894970.0
___Grits,"We have a global utilities folder at root that holds all globally shared things like custom error classes. 

If it’s used app wide, it should be higher up in the hierarchy ",1526913453.0
scaleable,">  This is misleading because these ""asynchronous"" operations are actually  separate threads running on the same CPU.  Since Spring Boot is running  on JVM, it's multi\-threaded by nature.  It's arguably more performant,  but that discussion is for another time.

This has nothing to do with ""separate threads running on the same CPU"", the event loop is a pattern for avoiding the big overhad you get from creating a big number of OS threads on highly concurrent scenarios \(AKA many requests\). The original node.js presentation from 2012 explain these motivations very clearly \([https://www.youtube.com/watch?v=ztspvPYybIY&t=2242s](https://www.youtube.com/watch?v=ztspvPYybIY&t=2242s)\).

I haven't got Spring experience, but a quick google searh also brought up that Spring 5 also comes with event\-loop powered model \([https://github.com/spring\-projects/spring\-framework/wiki/Spring\-Framework\-5\-FAQ](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-5-FAQ)\). Of course this alone might not solve the problem, since you actually need an \*\*ecosystem\*\* of non\-blocking libraries \(or a big framework which provides most of them batteries\-included\). Both Go and node.js have that at the community core, I don't know about java.",1526874335.0
dawidloubser,"As somebody very deeply involved in both Node and Java-based systems, I'm of the opinion that this is a very weak article - it doesn't speak to the heart of the matter at all.

Programming can be either pleasant, or a nighmarish mess, in both frameworks / languages, depending on what you do with them.

In short, nothing to see here, move along... it'll take much more than this superficial article to fairly compare the merits of the two technologies, and (especially) the styles that you need to program either with to get the best out of them.",1526908098.0
1-800-BICYCLE,"Sure, if you wrap Java classes and methods in enough decorators, you can get something resembling an enjoyable programming experience (although the motto of Java is ""programming is your job, it's not *supposed* to be fun!""). God help you, though, if you ever need to debug.

Note that we're comparing a set of JVM libraries with a JavaScript engine, as if to say no one would even *bother* trying to deal with Java alone.

And just two words regarding the ""Java is more secure"" meme: Apache Struts.",1526873884.0
grinde,"Looks like it didn't compile. Try navigating to the module's directory and running

    node-gyp rebuild",1526869449.0
pd-andy,"Is it possible wiring-pi is a peer dependency, eg one you must install yourself?",1526898437.0
raul_midnight,"Ok so here is [a picture of my code](https://m.imgur.com/gallery/wuXzwmI) (if using mobile then Request Desktop Site or it will be too blurry) where you can see the node_modules folder as well. I don’t actually make a reference to wiring-pi in my code, could that be the problem? I’m not sure how modules that depend on other modules work. Thanks",1526914636.0
runvnc,"Best place to ask/check is the github issues for that module.  

First problem was it didn't install right.  See https://github.com/WiringPi/WiringPi-Node/issues.  Check for example Node version compatibility.  Debug from npm install log.",1526932599.0
HideousNomo,Any reason anyone would still use Oracle as their DB?,1526859374.0
NewFuturist,Traversy is the bomb.,1526860220.0
stackchief,good stuff. common use case applied to great tutorial!,1526866976.0
nemanjan00,"Actually, Notifications are one of my tasks for this week :D",1526894196.0
kkogovsek,I did a similar thing in my project but just a month ago realized I could use proxies. Nice concept and library 👍,1526847375.0
cemremengu,Just curious is this a better way than calling a rest/http service?,1526855633.0
zedpowa,Looks pretty cool! Will check it out.,1526917240.0
hashtagtokfrans,I did this in C# by using IL.emit and protobuf. It's a really neat idea.,1526853117.0
danielstaleiny,learn by doing. Find what you want to build and try to build it. If you come to an halt ask and continue. ,1526812009.0
Fullstack_Questions,"Check Udemy, type Nodejs Course is the search bar and look for the course with the highest number of students, highest star rating that was released in the last 12 months. 10$.  
Buy, practice, send job apps with your portfolio and get hired ",1526834160.0
danielstaleiny,"for example. Nodejs is rabbit hole :)

 https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction",1526812409.0
tenbigtoes,"Not trying to be difficult, but you'd probably get help faster on StackOverflow. People don't typically come here to debug code, whereas that's the whole idea over there...",1526829200.0
YoungBubble,"Why are you not passing dbUser instead of user?

    db.find_user(user.id).then(dbUser => {
        if (dbUser[0]) {
            return done(null, user);
        } else {
            db.create_user([user.id, profile.displayName, user.picture]).then(dbUser => {
                return done(null, user);
            })
        }
    }).catch(error => done(null, user))",1526990796.0
Barrelwolf,Are those acronyms or insults?,1526788310.0
nothingduploading,usually your api is a separate service altogether and you call it via ajax requests from your client project.,1526777305.0
mclovin4009,"What are you using on your front-end? You can check out HTTP client's  like fetch, axios, request (or request-promise) npm modules to make AJAX calls to your REST API's",1526833500.0
euphbriggs,"There’s a book coming out soon for TypeScript. I’m looking forward to checking it out.

TypeScript Microservices: A complete guide to build, deploy, test, secure microservices with TypeScript and NodeJS. https://www.amazon.com/dp/178883075X/ref=cm_sw_r_cp_api_i_ChlaBbXT1HC5F",1526772313.0
ewouldblock,"Microservices are language agnostic, so you don't need to find a book specifically about node and microservices to understand how it works. ",1526783969.0
TheOneRavenous,"To know if you're creating scalable code. Learn about BigO Notation and the associated Big∅ Notation and the others.

The reason is this will allow you to analyze your functions. A user would be an instance interacting with the function since every time they hit a particular end point it'll utilize all the internal scope of said function. BigO notation is a time notation to determine if your function executes an a particular time scale and at which point does that function become useless. Is it useless at 2000 or 1mill? Is it a linear time scale or an exponetial time scale? Is it a logrithmic time scale with a hard maximum? Do pieces in your function add overhead (""R"")? 

All of that can be answered with bigO notation. The more you analyze your code the faster you'll be at recognizing the notations. Eventually you'll be able to look at a function and say of that's a linear time scale or an exponetial time scale. Etc... I promise you it's worth your time and it'll help you write fast nimble code.",1526830741.0
nothingduploading,microservice is dead.,1526771482.0
mahade,"Meanwhile:

- Clown on unicycle gets 20 meters in 3 seconds
- F1 car on 1 wheel gets 0 meters in 3 seconds

Clowns on unicycles are faster than F1 cars.

(Not saying Node is a clown, but the comparison isn't entirely fair...)",1526771662.0
WakeskaterX,"Was this run on a single core server?  Node isn't purely single threaded, the core libraries handle opening connections on other threads so if that wasn't taken into consideration it's not a fair comparison to compare to Go on a single thread.",1526767776.0
The_frozen_one,"They didn't even use goroutines? I don't know too much about golang, but I do know that there is a way to do concurrency in a manner similar to node, and it looks like they didn't do that here.

It would be like if they used the \*Sync functions in node instead of the standard async functions. Of course there is going to be a difference. ",1526783652.0
guorbatschow,"I think what this mostly does is benchmarking JSON.parse and JSON.stringify.

Both have been heavily optimized in V8. Especially JSON.parse works very well with parsing the exact same object layout over and over again. It tries to predict the next property name to parse by looking up the next transition in the map chain, and can pretty much skip over them if they match.",1526794208.0
apatheorist,"> Decade-old C library is faster than years-old C library at REST

EDIT: I'm not knocking go or node. I love go for aws lambdas. Just pointing out the obvious.",1526769893.0
kl0nos,"This is pointless benchmark. Here you have some real world use case web benchmarks:

https://www.techempower.com/benchmarks/#section=data-r15&hw=ph&test=db

EDIT: Same benchmark with different json decoder makes Go 2x faster:

https://github.com/francoispqt/rest-bench

",1526823960.0
Ooyyggeenn,What is go? ,1526768373.0
kunalgrover05,"Putting it simply. Node is designed to handle the maximum number of requests using HTTP. Your server might not be able to actually do anything on these requests since it might run out of CPU or memory but it does its job of processing those requests and putting them in a queue to be processed.

Which means that any benchmarks done with node processing requests will be much higher than any other language. If you want to do an equal benchmark for Golang, you would run a test where Go is able to use it's own advantages.",1526801926.0
captainahhsum,I am about 80% through a udemy course (https://www.udemy.com/the-complete-nodejs-developer-course-2/) and he focuses on all 3 of the first ones but uses almost exclusively ES6. Udeny normally has sales going on. I think all classes are 12 bucks right now! He teaches also about JavaScript web tokens and authentication and a few other things that are also hard to find documentation on! ,1526820178.0
toyonut,The full stack JavaScript track on team treehouse covered them all if I remember correctly. ,1526771932.0
State_,"https://scotch.io/tutorials?hFR%5Bcategory%5D%5B0%5D=Tutorials&dFR%5B_tags%5D%5B0%5D=node.js

search through these (courses are paid, tutorials are free)",1526808400.0
injektilo,"The package is Open Source and on GitHub, right? Look through its change log or commit history to find when it used to work on Node 6 and pin the version in your package.json to back then.

If that's not possible, fork it. You can publish to npm (with a different name, of course) or just put ""owner/repo"" in your package.json file and npm will download from GitHub.",1526752895.0
IUsedToBeACave,"This is incredibly difficult to answer without knowing what the module is, and why it isn't compatible. If it is just that the module is using ES6 syntax that Node 6 doesn't understand then babeljs may be able to resolve this for you. If it is because the module relies on a native Node.js module or API that is only available in version 8 of Node.js then you are going to have to figure what that is, and if you can back port it to be compatible with 6.",1526742493.0
lillt,"You clearly have a bug in your disconnect function. Message is undefined there and will crash there.

You can probably listen to errors from the library itself somehow. Check the documentation/code",1526761055.0
BTMPL,It looks like your client is unable to connect to the server - might be some SSL lib issue. What version of node are you running?,1526763259.0
AlphabetHat,"I don't have an environment to test this in myself unfortunately. Can you try:

1. Where you log the error to the console, do this: 

    
        console.log(err, err.stack);
2. Try move the conn.end(); to the line before your res.render();

If you get the full error stack please add it to your post.",1526734558.0
dvlsg,"> release connection use req.releaseConnection to manual release a connection

From their github. They probably close the connection for you when the `req` ends, so you're triggering the connection to close twice.

Is there a reason you're trying to manually close a connection? You usually want to let the connection pool handle that stuff for you.


*edit:* Yeah, they do [end the connection](https://github.com/pwalczyszyn/express-myconnection/blob/master/lib/express-myconnection.js#L118-L131) for you when `req` is closed or finished.",1526755627.0
the47thsense,"You're comparing the wrong things here, Rails is a framework that runs on top of Ruby. Node.js is not a framework, it is simply a thing that lets you run javascript outside a browser. The closest equivalent to Rails would be something like [Express.js](http://expressjs.com), or Koa.js , or Next.js.",1526722451.0
MetorFinis,"Node is the web server. Most people use express as a framework that has a lot of stuff sorted out. Plus, for serving static content most use nginx as reverse proxy. But you can run nodejs without anything in between.",1526722158.0
,"Node IS the server. When you start a node instance it is (usually) serving network connections. The confusion comes when you see things like Express or Koa for example. These are libraries which wrap up the complex low level operations of responding to URLs with things like routing. Routing simply means ""For this url path call this bit of code"".

So for now, take a look at Node with Express (or Koa but Express is more popular) and try their minimal examples to get Node to respond to a web page.",1526722227.0
,"It's called the parameter object pattern.

I'd add that if you have developers adding ""just one more parameter"" each time, you've got a bigger problem. It creates a function that is potentially doing way too much work. Shorter functions are in 99 out of a 100 cases better than giant multi-function functions. 

If you're using the parameter object because your function signature is unwieldy, you still have the same problem that your function is (probably) doing too much.
",1526720939.0
mistralol,"
So regex needs a computation limit added to its implementation :/",1526721726.0
helge47,That female face is really out of place lol. Thanks for sharing experience!,1526716934.0
danieladams456,"Okta and Auth0 have some pretty good docs on how the flows work.

I started off using the implicit flow with Angular since that's standard for a SPA, but refreshes are  pretty convoluted and hacky with hidden iframes. Right now I'm working on a POC of authorization code flow using AWS API Gateway/Lambda/DynamoDB for the server side piece.",1526693665.0
JumpKicker,"Here is a video from my old bootcamp instructor. It takes a couple of logical leaps to do webtokens but you can do it. There's a few videos in the series and it helped me a lot. 
[Link](https://youtu.be/H7qkTzxk_0I)

Edit:
I was on mobile, but here's another resource: [unofficial passport docs](https://github.com/jwalton/passport-api-docs). In general you're right though, the docs are terrible. Something like [Devise](https://github.com/plataformatec/devise) for rails is so awesome and you get a ton of logic for free, no idea why we can't get something easier going for Node.",1526693946.0
nikaone,"I am learning kotlin, and I really miss these node learning days, no matter what topic, I can find many articles, but in kotlin, official doc is my only resource.

Out dated resouces or saving in plain text is not a problem, because it is just a demo, the core logic is what you need to understand. ",1526697148.0
sunny_lts,"Same dude, was here a few months ago. I was surprised that there are no solutions out there. I've looked at passport.js. While it has everything you need, you really need to write the entire code yourself and script it. Not complaining, I just think there should be a ready made package for something so redundantly basic.

Gosh I feel like a privileged millennial, but there is some objective truth to it.",1526751886.0
southern_dreams,"Use Auth0. Don’t think too much, they’re better at this than you are. 

Read the tutorials on Scotch.io about JWT. It’s important. 

Use express-jwt to protect your routes. 

Party, it’s Saturday. ",1526743894.0
thejoecode,"Edit \- WRT: Passwords in plain text:

Check out how passport\-local\-mongoose does it. There are only a few files you need to understand. I'm modifying it to work with postgres.

[https://github.com/saintedlama/passport\-local\-mongoose/blob/master/lib/authenticate.js](https://github.com/saintedlama/passport-local-mongoose/blob/master/lib/authenticate.js)

They use a package called [scmp ](https://www.npmjs.com/package/scmp)which in the doc has a nice link to why you would want to use it:  To minimize vulnerability against [timing attacks](http://codahale.com/a-lesson-in-timing-attacks/). It also is possible to just use the new crypto.timingSafeEqual

All these links were a chain I went down going through this tutorial: [http://mherman.org/blog/2013/11/11/user\-authentication\-with\-passport\-dot\-js/#.Wv\-T4Zch1hE](http://mherman.org/blog/2013/11/11/user-authentication-with-passport-dot-js/#.Wv-T4Zch1hE)

You will probably also want to read over this: [https://nakedsecurity.sophos.com/2013/11/20/serious\-security\-how\-to\-store\-your\-users\-passwords\-safely/](https://nakedsecurity.sophos.com/2013/11/20/serious-security-how-to-store-your-users-passwords-safely/)

tl;dr

* Use a strong random number generator to create a **salt of 16 bytes** or longer.
* Feed the salt and the password into the **PBKDF2 algorithm**.
* Use **HMAC\-SHA\-256** as the core hash inside PBKDF2.
* Perform **40,000 iterations** or more \(August 2017\).
* Take **32 bytes \(256 bits\) of output** from PBKDF2 as the final password hash.
* Store the **iteration count, the salt and the final hash** in your password database.
* **Increase your iteration** count regularly to keep up with faster cracking tools.",1526699138.0
jrthib,"While it’s good to learn about jwt and oauth flows with respect to node and express, it’s not something that adds a lot of value to the product you’re building. It’s boilerplate that has been done hundreds of times before. 

My recommendation would be to learn about oauth, but also, implement firebase authentication, auth0, or a comparable offering and just offload the maintenance of a secure authentication service to the experts and focus on your core product offering. 

Firebase has a free tier whose usage is very difficult to exceed as a small business. Once you start making money and exceed the free tier, you just pay for what you use and it’s extremely affordable. ",1526693966.0
NetOperatorWibby,"I ran into this issue a few years ago and discovered passwordless. Then I wanted to automatically login new users and didn’t get a lot of help from the dev behind it so I built my own JWT solution. It wasn’t easy but it friggin’ works.

It never occurred to me to open-source it. I’ll figure that out when I have time.

To answer your question though, I recommend just rollig your own auth WITHOUT passwords.",1526715605.0
kyleparisi,"I've also shared in this pain.  Everyone of my personal projects and everyone of my work projects wastes so much time on authentication.  I started a project which is an authentication gateway: [https://github.com/kyleparisi/auth](https://github.com/kyleparisi/auth).  Perhaps you might find it helpful when using passportjs.

It's currently a work in progress.  The idea being that you can map hosts to services and then maybe paths to services with some kind of acl or whitelist.",1526736671.0
foxbarrington,We've been using Authentic in production for awhile and it's been working really well. It uses jwt and was designed for microservices. You run a authentication server that your SPA(s) use to get tokens to give to your microservices (or lambda/cloud functions) which use the authentication server's public key to decrypt. Here's a write up on it: http://dry.ly/authentic,1526743141.0
calligraphic-io,"I would do some research on using JWT for authentication in a RESTful API. You'll probably come across some articles about why it's a horrible idea. JWT makes sense for one-time, third-party authentication.",1526751745.0
rishav_sharan,"This has been my biggest woe in nodejs and Go ecosystems. Everyone is touting performance, small size and bucketload of features. And almost none have any end to end auth flow documented anywhere.",1528715928.0
captainahhsum,Check out Andrew meads class on nodejs from udemy. He has a section that he goes step by step thriught this. I actually just finished this section of his class!,1526693118.0
feitico,"Proper authentication implementation is hard. To store passwords you should use bcrypt or something like that, never plain text. For JWT, access tokens should expire and be one per user per device.

Passaport package looks good, but they just over complicate. I prefer to implement as simple middlewares or functions instead

 We have a sample implementation using Koa and GraphQL here https://github.com/entria/graphql-dataloader-boilerplate",1526695402.0
rinserepeatimprove,"I cannot recommend Loopback enough, auth scheme built in, express as the base and a pretty solid ORM. If you come from rails, it's a natural choice.",1526695868.0
SomeRandomBuddy,What,1526746229.0
1-800-BICYCLE,In my experience usually you'll find the process in the docs of the authentication server you're connecting to.  ,1526694827.0
fupower,I think you are little lost how Node.js works,1526684986.0
zingzingtv,"I would brush up on your c++ if you are looking to cross-compile across iOS and android. 

If you really really really want to write your app in JavaScript (and enjoy a world of pain) you could create a c++ wrapper for V8.. but you will lose many Node.JS features by taking that approach.",1526686156.0
STRiDEX,The now-cli guys package the cli with a specific version of node and then publish to npm. On mobile so I don’t have a link,1526687555.0
domnirok,"What do you mean with ""consumed""?

Like a .net dll or a Java library?

You may use electron to get ""native"" apps, if you mean that...",1526682906.0
danneu,Why would you delete them only to log them to a file when you can instead flag them as deleted and then query that information at any time?,1526680028.0
Maharyn,"Quite large depends on the resources of the machine running this script. And, I suppose, what node's memory limit is set to on the machine.

On its own, an array with 1 million empty objects takes up like 65 MB of memory. Granted, the objects you get back from the database aren't empty, but you would need more than a thousand, or a few thousand, for anything but the most puny server instances to start chugging just because it runs this script. If your server is running other things as well, then obviously that could have an impact.

Basically... I laud the desire to optimize it, but unless you're actually running into a problem of memory usage being too high, I genuinely don't think you need to worry about this.",1526679094.0
Wickity,"Why maintain state information in a text file, when you have a database?  If you're not going to soft delete the users, your could move them to another table.  Or, at a minimum, maintain your run state in a table instead of a flat file.",1526691799.0
lqdd,"Unrelated the the question itself, you don't need to prune users, you don't even need is_deleted flag, you already have 'approved', just drop an index on it, if not already, and filter out.
You can archive not approved users say once a year and your current approach would likely still do it's job, but if you are concerned about memory footprint, consider streaming data to file or s3 with https://nodejs.org/api/stream.html, it'll scale much better memory-wise.",1526692023.0
brodega,"The first app any new developer should know how to build is a simple CRUD app (Create, Read, Update, Destroy). A messageboard, blog, journal, etc. would qualify. You'll build the front end using a framework of your choice, a server, and interact with a database to persist data, manage sessions, cookies/local storage, etc. You can cover a lot of bases with a CRUD app alone.

If you want to make it interesting, your app could interact with an API of your choice. Spotify, Twitter, Instagram, Google Maps, etc. ",1526672433.0
ConfuciusBateman,"Just build an application that uses React and Mongo if you've already gained some familiarity with node and express. Don't get too caught up on a ""learning path"", just pick something that interests you and build it with the technology you want to learn. 

For your specific questions:

1. That seems like enough, and anything you don't understand well should come to light in the process of building the application, at which point you can dig deeper into it.

2. Don't worry about feeling comfortable. You should probably feel uncomfortable when starting out building something using frameworks/technology you're not super familiar with. The building process will get you comfortable.

3. I'm not exactly sure what this means, but I would imagine you should simply be learning the four components of that stack. Sounds like you've learned some node and express, so now get to Mongo and React.",1526672205.0
warchild4l,"Hey! I was in the sane spot about 4-5 months ago, In fact i am still learning MERN.. So what I wanna say is that, whenever you will complete tutorials build something on your own, till you do that, thing about everything you want in your app, and build it, even if you dobw know how, because thats I think easiest way to learn something new. For example, you wanna have chat app but you have never thought how you can make it? Search, and you will get across websockets.. All i wanna say Is javascript ecosystem is HUGE, and only knowing node, express, and react, you wont build something cool.. there are dozens of amazing librarys out there which can help you do something, all you need is ask right question and search it in google and I bet literally every question will be answered, because someone might alreafy came across the same problem.. Also when you already know some advabced stuff, like you know all the basics, you know javascript ecosystem, It might become really easy to read through docs and woalla! You will understand whats going on in that spesific library, and you will not need to watch any tutorial to get your head around it! That is most important step. 

I think watching 1-2 courses about each topic(like react, node+express) might be enought, after that you will be able to build everything on your own and just dont be scared of searching! If you forget about one spesific function name, dont be scared, because we are not robots, you can not build really advanced level app without searching something through docs! Trust me, that is true xD

Basic app can be something like simple REST API, really, its hella easy and anyone can build it within 3-4 hours(including watching tuts).. 

Important note: you must not be stressed, cuz everyone has come to that way, when you feel you dont know enought, but thats ok, because it will motivate you to learn more and get better and better. You can call yourself MERN dev after you will be able to build your own, fully functinal app, without any course orctutorial, with just your IQ and some research! 

Also sorry if my English is annoying! ",1526672459.0
jasonwhite1976,"React is front end so leave it to one side for now.

I enjoyed using https://github.com/sahat/hackathon-starter to create a simple todo style app - CRUD as mentioned here already.

When you're happy with that then introduce React.

And also don't stress - just spend time on it, enjoy it and enjoy getting stuck and overcoming problems. It's what us devs do :)",1526673524.0
GreenMonkeyBoy,"I don't know what you have learned, but there some libraries you could take a look at to improve a very basic Node + Express app:

 - [Joi](https://github.com/hapijs/joi) and [Express Joi Validation](https://github.com/evanshortiss/express-joi-validation),
 - [Winston](https://github.com/winstonjs/winston),
 - [Mocha](https://github.com/mochajs/mocha),
 - [Chai](https://github.com/chaijs/chai) and for testing API [Chai-Http](https://github.com/chaijs/chai-http).

You could also learn how to use JWT security for authentication or sockets for real time communication. Anyway, I'm agree with brodega, you can cover a lof even with a simple CRUD app. Search for ""most useful node libraries"" on Google will give you some ideas of node libraries that you might want to learn.",1526686469.0
tamalweb,"You should learn CRUD first as mentioned above. Learn how to create some data, read, edit and delete them from Database using Mongo, Express and Node.

Then once you are comfortable, try file uploads.

Then go for creating user, login logout, sessions, flash messages etc. 

Learn how to lock down the site from guests and give access to only the users. Learn email sending, password reset etc. That's all you need for a modern web application.

Then learn how to deploy the app to a working server.

You can learn MEN without using a view framework like React or Angular. Once you are super comfortable with the back end, work with React to make the site pretty and responsive.

You can try Wes Bos' learnnode.com course which I am following. It helps you with the same steps I outlined above. Very helpful. I am halfway there.",1526823171.0
Lambotherambo,If youre a competent programmer you should be able to make a basic mern app in a week,1526690074.0
echeese,"It's not game controller, it's game coordinator. It's not documented because it's not meant to be used by anything but the TF2 game client. If you want to implement it yourself, you'll need something like this [steam](https://github.com/ValvePython/steam) library to connect to Steam like a player. You may be able to find a similar tf2 library for python (but tbh I'd just use this node one)

Good luck!",1526660561.0
Wickity,"Based on the example from [https://pugjs.org/language/interpolation.html#string\-interpolation\-unescaped](https://pugjs.org/language/interpolation.html#string-interpolation-unescaped), where the unescaped version is displayed, you can see the difference by running it through both versions.

    - var riskyBusiness = ""<em>Some of the girls are wearing my mother's clothing.</em>"";
    | !{riskyBusiness}
    | #{riskyBusiness}

This outputs

    <em>Some of the girls are wearing my mother's clothing.</em>
    
    &lt;em&gt;Some of the girls are wearing my mother's clothing.&lt;/em&gt;

So the unescaped just prints your value without consideration for what it might do to your output.   If you're doing this with values that is user input, then you can wreck things or leave yourself open to security issues, etc.   You might want this if you are generating HTML fragments elsewhere and sending them in as locals though for direct injection.  

The escaped version will try to ""safen"" the output, so it will display as most people would expect, without introducing the risks of direct tag use.",1526650131.0
LA_producer,This is built in node: https://github.com/ERCdEX/automation-toolkit,1526649476.0
King_Cadmos,".

I duuno but for some reason when you read the post title out loud, it sounds almost identically like someone says:

>"" ***Looking for suckers to team.push\('extra sucker'\) and get paid when the project becomes profitable\-ish*** ""

.

**PS:** Respect to the effort of making a fake account \(@Geniusworm\) only to show ""his"" interest by almost writing a profile review of people that are needed for this ~~team~~ legion of suckers. Extra kudos to his humor about being *a physicist who has lots of time to spare* !

.",1526748034.0
Geniusworm,"Hello,

I'd like to participate to your team. 

I've started to study data science and machine learning (in home). I may call myself as newb yet, but I'm willing to improve my skills. Also I've been trading on cryptoworld for six months. 

Implementing a trading bot to the crypto trade has been in my agenda for some weeks. Therefore, I don't have so much clue about it yet, but learning is the key ! I hope we can talk about the details. If you will accept a physicist who has lots of time to spare, lets please stay in touch.
",1526657834.0
kelvinwop,"Hmm, looks cool. I do a bit of js and statistical stuff, but I doubt I'm qualified ^^",1526696076.0
SomeRandomBuddy,This is sad,1526665163.0
___Grits,"They should be on two separate servers. You want them to be able to scale independently and not share the same load as one of them will hog more resources than the other. 

Amazon AWS supplies free micro servers that you can checkout, or stick with two DO droplets. If you want the frontend to react real-time to data changes in a database, look into Socket.io. ",1526660786.0
jsangularjs,"Hi Gurus , 

After posting the questions here  , i do get my hands dirty by diving into the coding parts , i get to create API successfully and all with ExpressJS , i also successfully setup ReactJS etc.. but when i try to ""proxy"" in package.json file under ReactJS and navigate to my browser and type in my address, it shows me  "" Invalid Host header "" did any of the gurus here encounter such error? I'm not using any webpack server , it's just pure ExpressJS & ReactJS , anything that i missed out?  


npm \-v : 6.0.1

node \-v : 10.1.0

react : 16.3.2",1527076704.0
nkristoffersen,"React should be on a static server like S3. I think DO has a similar product. 

Edit:
While the reasons are numerous, the major reasons static file server is recommended is it results in muuuuch faster site response when paired with a CDN (content distribution network), it cannot be “hacked” (in the way a traditional server can be hacked),  and you site becomes significantly more reliable since the CDN is impervious to traditional load. 

So to sum up: static site deployed to static file server fronted by a CDN gives your users a blazing fast experience for cheap and you can rest easy knowing it lives even in your backend crashes or dies.
",1526626184.0
djslakor,I'd encourage you to use Koa instead of Express.  ,1526656478.0
anshulk93,-i 0,1526616126.0
Psykopatik,"Can you give a bit more context on how your app runs? More details!

ie: is it in docker maybe?

",1526632775.0
tknew,"Can you run 

node -e ""require('os'); console.log(os.cpus())""

And send us the result",1526640117.0
TheOneRavenous,"Well for starters you need the index.js file to be formatted correctly. What's your index.js file looking like?

Also your process file should have a config.js ending if it's going to run in cluster mode.

[http://pm2.keymetrics.io/docs/usage/application-declaration/](http://pm2.keymetrics.io/docs/usage/application-declaration/)",1526654164.0
HideousNomo,Just a spammer spamming their `deal5star.com` site. ,1526611374.0
Drunken__Master,Guess that limited time has expired.,1526606572.0
killerbake,I actually took this course. I would actually buy it from udemy so the real author gets paid for it. ,1526616651.0
grinde,"The offending line is

    const checksum = save.slice(-32, 0);

combined with no error checking in buffer-replace. Slice indices are only offset from the end of the string if they're negative. 0 will *always* be the beginning of the buffer. Since the end index is before the start index, you wind up with a zero-length buffer. Then in buffer-replace you have

    const idx = buf.indexOf(a);

    // ...

    const after = replace(buf.slice(idx + a.length), a, b);

`idx` will always be 0 (since it's searching for a zero-length buffer), so the recursive call to `replace` winds up with the same arguments as the original call, and you wind up blowing up the call stack.

Change that line to

    const checksum = save.slice(-32);

and you should be good.",1526628337.0
qazwsxedcrfvtgb1111,I’m guessing it’s because the file path should use forward slashes,1526609699.0
Buckwheat469,"I'm not 100% certain, but I think it's because you're not piping the fs.readfile to buffer-replace and then piping the replaced bits to writefile. You're doing everything in the readfile function and effectively creating a new replace function for every chunk of data in the file.",1526613619.0
skunkreturns,"I think you have a circular loop. Probably you're trying to write to a variable that's referencing something in the buffer. Like maybe the word or data variables. But I can't tell for sure from my phone.

Edit: also I can't tell where save is defined so I don't know if the slice works properly. ",1526613778.0
TheOneRavenous,"Am I missing something? 

It appears the variable ```word``` is not initialized.

You're creating a buffer from a buffer which isn't necessary. 
```fs.readfile()``` returns a buffer if no encoding is specified. So there's no need to make two buffers of the same kind. 


You're trying to slice a buffer. Which is doable but it's a string buffer so you might not be slicing it correctly unless you intended to slice the raw buffer instead of slicing the toString() representation.

Not sure if you meant to but data1 is turned into a string because ""word"" is a string.

```Save``` variable doesn't seem to be initialized. 

You're attempting to do a replace on a buffer but you're using strings in the ""buffer"" argument and again making a copy of an existing buffer by creating another buffer from a buffer. (Not to big of a deal since the replace-buffer module converts it accordingly)

The replace-buffer module returns a buffer. [https://github.com/juliangruber/buffer-replace/blob/master/index.js](https://github.com/juliangruber/buffer-replace/blob/master/index.js)


You're basically creating copies of buffers and buffering your program to oblivion.",1526653315.0
Kind_Of_Programmer,"If you understand basic programming concepts. If you are decent in Javascript, just build something. Make a web chat app, or something hooked to a database. I recently just hoped into a project with no previous experience and I learned a lot more than I would have from a book. Just build something and challenge yourself.",1526603337.0
pragmaticpi,"You can also try this course [Learn and understand nodejs](https://www.udemy.com/understand-nodejs/).
It will tell all the basics of node theory and architectures and some javascript too along the way.

[Andrew Mead](https://www.udemy.com/the-complete-nodejs-developer-course-2/) course is project oriented and will not take you very much deeper into concepts. It will teach concepts which are relevant to that particular project only. You can try this course after the first one.

Thanks",1526617865.0
Lambotherambo,"Andrew mead's course on udemy. Yea it costs $10, big deal",1526602180.0
ashu9394,Try freecodecamp’s bootcamp for node,1526620273.0
Sergeei13,"Traversy Media and The Net Ninja. These two guys helped me a lot to start diving into web development (specifically back-end)  from the very beginning. As for YT courses, I think they are the best",1526621597.0
greyeye77,"(optional) learn basic JS 
I would recommend 
https://www.codecademy.com/catalog/language/javascript  

next, learn how to setup NodeVersionManager, and git

then, pickup basic express.js tutorial to make quick web sites using frameworks.  (dont spend days in this step, just to get a feeling how node.js framework gets used, you will pickup bad habit if you spend too much time alone here)

goto nodeschool 
https://nodeschool.io/#workshopper-list

then, start learnyounode
https://github.com/workshopper/learnyounode

once you're confident, have some small project like todo, calendar, blog. always start small?",1526622782.0
bossmonchan,"Before buying anything I highly recommend checking out Traversy Media on YouTube, he has a bunch of free node videos that are very easy to follow. [Here's one for node and express.](https://www.youtube.com/playlist?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp) 
He has a nice course on MERN (mongo, express, react and node) on udemy if you like his teaching style.
For specific guides on deployment (setting up a Linux server with nginx etc), Digital Ocean has a bunch of guides online that you can tailor to whatever host you want to use.",1526601029.0
JonnyBoy89,"You could start with a node [tutorial](https://hackernoon.com/tutorial-creating-and-managing-a-node-js-server-on-aws-part-1-d67367ac5171) that serves a single basic page.

This one is very simple, but it’s the basics. It’s in two parts.",1526613410.0
scabbyjoe,"A couple of months ago I was about to start learning node. I soon realized that really I was looking to learn was something like express. As an over simplification you can think of express to node as twitter bootstrap to css or jQuery to javascript.

Express runs on node and is still node but using the framework you can get things done much easier and faster.

Then dive back into raw node as you find the need to.

I would recommend this book (it includes a node.js basics section too): https://www.manning.com/books/express-in-action",1526620660.0
mtsch11,"I found the course ""advanced nodejs"" on pluralsight very good. It's tagged as advanced but it is easy to follow. The author of this course shows the apis from nodejs not frameworks, which is in my opinion very interesting.
After i finished this course i wished taht i knew it earlier. Because it shows the basics things like event emitter, http library, fs and buffers and so on. I only can recommend it. ",1526621272.0
Tvde1,Create discord bots,1526641991.0
FlyingQuokka,"I started by using learnyounode. Great resource I heard about at FreeCodeCamp. After that, learn Express maybe, and build a web app.",1526652696.0
hammad2506,Colt Steele @ Udemy,1526665647.0
Razoyo,Net Ninja is a great start.,1526675453.0
theRafBuddy,"I dunno if this is too late but theres an excellent course on Udemy that teaches the basics of Javascript and slowly unravels many of the obscurities of node. It reads like a storybook :). The name of the course is Learn and Understand Node.js by Anthony Alicia. He's a really good instructor and you'll have a solid basic foundation of node. From that point on I suggest looking into Lynda for some of the more advanced courses that allow you to build basic projects. I'm still working on the Udemy course but will switch to that. Also rithmschool has excellent material on nodejs, express, and mongodb. Its really all about becoming familiar with all the jargon thrown in there. PM me if you have any questions!!",1529891022.0
ReactDOM,A curated list of the [best Node courses](https://reactdom.com/node).,1540246588.0
abby_cohen_221,"I have to agree with /u/Kind_Of_Programmer, building apps is the best way to learn. However, a lot of the time especially if you're just starting out online tutorials on how to build projects can be the best and quickest way to learn, you get both hands-on experience and great instruction. Personally, I use https://www.turbo360.co/, they have a bunch of great node tutorials for you to learn from. I would start with this one, https://www.turbo360.co/tutorial/react-app-with-facebook-auth, that teaches you how to make a simple react with redux app that uses Facebook authentication to gain info on a user. ",1527542385.0
isakdev,"So you are saying you want to make your own BTC api?

To serve an GET api endpoint on /BTC you just need to set express as such

```app.get('/btc', (req,res) { res.send('Value of BTC')})```

But you need to already have BTC data.

If you just want to use other peoples data but serve it on your own API (i don't know why would you do this but w/e) you just need to do a asynchronous fetch request to that third-party, store the data in a variable, and send that using express.",1526599235.0
MWrathDev,"fsevents stuff you shouldnt worry about, but the peer dependencies are a problem.",1526600223.0
myockey,God I hope so...,1526600292.0
isakdev,"I'm not sure you need anything to be 'live' in this.

Are you saying user A logs in and submits a post and you want him to see the change live? Or are posts with user A id saved from outside of this?",1526599413.0
TheOneRavenous,"You just need to pass the io instance to the controller. To do this I use an anonymous wrapper function that is exported. You can then pass the io to the anonymous function. The function just needs to return the expressjs router to the index.js file.

     Module.exports= function(io){
    Router.post('updates',  function(req,res,next){
       // This scope has io access

        next()
    })

    return Router
    }",1527093074.0
mapman2017,If you can’t parse it you can’t parse it dawg,1526591743.0
C_hase,Its padding to ensure it is a proper length. If you remove it I'm guessing the module puts it back before decrypting again so it wont cause errors. Similar to base64 which you will most likely see with an = or == at the end (but not always!),1526580977.0
ms-maria-ma,Good work! Thanks!,1526887034.0
ribbet,"God, the open source development part is fucking. spot. on.",1526601354.0
JLinks22,I wanted to try out the admin panel without signing up or installing anything but it seems I can't. I guess I'll ignore your product for another 5 years.,1526604693.0
rascaldev,"Regarding user expectations, I don't think that's exclusively a FOSS thing. Even on proprietary software you'll still have loads of people trying to see how much they can get out of it. They'll want _premium_ level support even though they've only paid for _standard_ support or if they can't do something due to their license they'll try to claim the product is unusable or crap or the like.

Then you'll have people who will _claim_ to have a license but provide no proof of it and insist that despite there being no record of it in your main tools that it should be there and clearly your company just dropped the ball and that's not on them (i.e obviously trying to scam for free help or other free stuff).

Being FOSS doesn't change people's personalities and there will always be a vocal minority that will just continually want something for nothing.

>> I'm still curious about this. Are we missing something? Are there organisations who do grant-funding who we should be talking to? Or is there a viable form of ICO which would support our company structure, to engage our own community directly, without being sketchy? Like a follow-up to the Kickstarter, maybe something like Brewdog.

I'm seeing where they're headquartered in Singapore so that probably would throw a wrench in the gears since national borders probably affects where a foundation _can_ send their money. Nonprofits (such as foundations) are audited to the nth degree and sending money to another country is probably _possibly_ but has so much overhead that they just try not to do it.

That said there are some other funding options:

1) paid products and services. I don't know about Singapore but in the US you're allowed to transact business and retain your 501c3 status, it just can't be done to such a point that it's a profit making exercise (i.e only barely above cost and your overall business expenses should roughly equal your income). IANAL though.

2) Pateron. Sounds cheesy but there are other FOSS developers who use it. For instance, I support the ReactOS project which is based in Germany and ran mostly by Russians it seems. If you set up multiple levels you can establish different levels of reward. For instance, regulars can be $5/month (low enough to where they won't cancel) and if you're weary of the public queue, you might try giving a $10-15/month tier where you get ""best effort"" support with some vague SLA (like a guarantee of ""one comment every 24 hours and average resolution within a day"" or something).

3) Keep trying with foundation support, maybe eventually one will crack and be willing to help.

4) Relocate where your headquarters are on paper if possible. This would get around some region issues. If nothing else it would be the first step on getting 501c3 status yourselves and then more donations can come in from larger donors now that they can deduct it on their taxes.

5) Form a parallel for-profit corporation where your non-profit work is done pro-bono part time and most of your FTE time is on company priorities.",1526611428.0
isakdev,"> Hurr durr if it isn't assembly it's not from scratch, if you wish to make a chat from scratch, you must first invent the universe.

Relax. I didn't want to start a 'flame war' nor to sound pompous.

But how is configuring a **ready made framework** _from scratch_ ?

Imagine if socket.io was a 0 setup, plug-n-play chat that was ready by just doing 'npm i socket.io --save'

Would that still be 'from scratch'?",1526598746.0
isakdev,Using socket.io is not _from scratch_,1526570519.0
lzantal,That’s funny I just finished my node chat client server app. It’s so simple to do it including multiple rooms. ,1526612176.0
1-800-BICYCLE,Why are so many articles posted here lacking basic proofreading *on the titles themselves*? ,1526695114.0
flipperdeflip,The hissy fit ran out of steam.,1526548672.0
,[deleted],1526551058.0
MyPostsAreRetarded,You mean nodejs?,1526548856.0
erevoz,Too many pronouns.,1526553429.0
ferrousoxides,"SJWs showed yet again they're only good at coopting other people's efforts and suck at producing their own. The purpose of all their progressive grandstanding is to get social rewards, like some teenagers trying to be edgy. It's never been shown that running an open source project their way is better.

In fact, given the state of, say, Mozilla or Drupal, there is increasing precedent that when SJWism becomes the overriding dogma, it's fatal.",1526553409.0
GFandango,Node is the social justice warrior version of Node.,1526553138.0
,[deleted],1526566970.0
kapv89,"If you mean io.js, then the project accomplished it's goals successfully by making node.js adopt a LTS release model. io.js fork got merged back with node.js with the release of node.js 4.x. Prior to that, node.js was on version 0.12.x",1526563488.0
,[deleted],1526557655.0
ElumalaiKutty,"How to read values from excel file and insert multiple values into mysql sequelize using node js.

Note: I readed from excel file and converted to json data. but i need to insert converted json data.

Please help me to resolve.

Thanks Elumalai",1526541663.0
Miles360x,"What error messages are you getting?

Anything requiring you to use Windows Server? Linux has much better support overall if that's an approach you want to take.",1526542596.0
Personalife,"Is there a particular reason you need to run node on windows or via IIS?

If not, there are a few options:

- pure node.js install on windows - might have some probs along the way as a lot of modules are built for use under osx or Linux if they require native compilation, or use posix commands
- docker on windows (never tried myself on windows), but you can build a docker image that can run Linux (eg the official node.js images or an alpine Linux image)
- (VM route) hyper-v or VirtualBox with ubuntu
- bash on windows - it's a native Ubuntu install which works on windows - been using that myself for node.js dev and works well
",1526543569.0
RedditorFor8Years,You will run into many problems with node js on windows. I'm speaking with experience. Work on Ubuntu or osx either in vm or dedicated box.,1526563127.0
Lambotherambo,Use supertest with mocha if youre testing a rest api,1526535690.0
herve76,+2 NIM /u/NimiqTipbot,1530341847.0
Capaj,"For accessing a mysql DB I'd recommend [http://knexjs.org/](http://knexjs.org/) but if it's some kind of a production system I doubt they will just give you password and login. More likely they will need to build an API on their side. Maybe they already did for someone else, it's hard to know from your description.

If they had and API for what you need to do, you'd just call it using something like [https://github.com/bitinn/node\-fetch](https://github.com/bitinn/node-fetch)

You can also use this library to load an image from a remote server to your local machine.

Hope that helps, if you have any further questions, shoot away.",1526506639.0
BlueBockser,Please post this to other subs such as r/ProgrammerHumor. This sub generally isn't for memes.,1526533534.0
linfux,"I like it, good work!",1526531058.0
lulzmachine,"... For 4 months?

EDIT: the github issue, linked from the snyk post: https://github.com/dlau/koa-body/issues/75",1526494882.0
lulzmachine,https://www.npmjs.com/package/koa-body has 21k weekly downloads. Ouch.,1526499580.0
_xenobit,"I assume this will be patched soon, how do I reliably obtain a vulnerable version using npm?

npm install koa-body@vulnerable-version-here

???

This is perfect for building a target box for my companies red team :)",1526509706.0
jrk_sd,Not sure this package is still being maintained. Anybody have a good alternative that supports json/form/multi-part?,1526535041.0
evilduck,"From a one minute read through, it looks like you're using some PHP Symphony app structure, with some modern nodejs practices but not a stock standard ""React app"" type of template. You're asking for a complete understanding of not only the tasks but to understand why *you* made some architecture decisions on that project.

Maybe our definition of ""very junior"" differs, but I wouldn't expect a very junior dev to even finish without some hands on guidance.  The task is interesting, but seems ambitious and frustrating for someone with minimal experience who may not even have a clear understanding of application servers vs front end code you're asking them to intermix. Personally I would say anyone who can complete this to satisfaction is probably overqualified for a junior position. ",1526477298.0
itijara,"Honestly, it is hard to say. I would say 4-8 hrs realistically for someone who has never seen the code before and has to read through it to figure out what it is doing. Less than 2 for someone who is familiar.

Also, you probably shouldn't have your API key in a public repo on Github. I know it is for a free service, but they might get swamped with requests from random people on reddit, which they probably won't appreciate. 

edit: Your link to https://github.com/Westpac-Mobile/CodingTest is broken or not publicly available",1526474369.0
ffzeal,"I would really dislike this task. 

1. It is very opinionated in terms of the technologies used (every npm dependency is a bunch of googling a junior will likely do, because they may not have used it before.

2. It requires them to sign up for an api key for a service they have not used before.

3. It requires pixel/design matching based off of a given image, so it's essentially a full stack question. Also, there are not provided images to use, so they have to go googling for a bunch of weather icons? Why is that meaningful time to spend?

What exactly are you trying to measure? I'm not a junior, but if I received this assignment from a company, I would likely stop the process.",1526480869.0
bugeats,I would fire you for having your API key in version control.,1526483376.0
ggcadc,If you find a jr that went through free code camp they have already done this ;) it’s a solid exercise and shows far more than fizz buzz,1526476297.0
r0ck0,"Just keep in mind that these time consuming tasks generally only filter in desperate candidates. Most companies that do this for a while realize this sooner or later and then stop doing it. Seen in plenty of times, and there's heaps of forum threads on this subject. 

I also see this kind of thing as a sign of how experienced the management is, and how much they respect their employees' personal time.",1526480982.0
JonnyBoy89,"Would take me 3-4 hours. Can confirm. Am junior, have done something similar. ",1526476600.0
hyakkotai,How long does it take you? Multiply that by eight. Or sixteen maybe. I like this test idea but i worry you are looking for too much from it if you have a time goal. ,1526475492.0
xwnatnai,Seems reasonable. 4-6 hours is about right for a junior developer imo.,1526475482.0
Lost_sand,One blow job,1526479440.0
SomeRandomBuddy,"Wow! Hackable! In that case, better get this. Because I’m a savvy hacker. Who hacks and tweaks",1526446431.0
mantas6,Cool library. Wish it had Typescript support.,1526465999.0
s_boli,"AWS EC2 is the same as droplets. But a $5 droplet can serve 10 node apps easily. It's the cheaper way to go.

AWS is really expensive compared to digital ocean.

NGINX reverse proxy and PM2 for node process management works great.",1526432476.0
BehindTheMath,"Look into Dokku. It's a Docker container that has a Heroku-like instance inside, so you can deploy it to a bare VPS like DO, and then just git push to it like Heroku. ",1526431340.0
jkwysdom,"Digital Ocean is amazing and way cheaper than AWS in many cases too. I know I can support ~10k API calls on a single droplet. So they can be pretty powerful too. 

I would suggest Nginx reverse proxy (simple to set up and DO has great guides. Look for a multiple host guide after the initial one) and then use PM2 for process management. 

Another nice feature of DO is the API/tags, you can create a deploy droplets via the API and use tags to put them behind your load balancer if you have one. 

Also floating IPs are great because you can assign them to a droplet and if you only have one droplet, depending on your configuration/load/type of request ect, you can assign the floating IP to your single droplet and then spin up another and deploy your new code to it with a script and then once it is up, switch the floating IP. I know that it is not a perfect system but it works if you do it on off-peak times like 2 am",1526500026.0
adamjohnston151,"I'm not sure it's possible to upload multiple files at one time. Google just may not support that. I'd definitely check out their docs to verify one way or another. That's probably explicitly stated somewhere. As an alternative for you, you could read the directory in memory and push them all to google cloud storage and just do a promise.all to check when they're all complete. ",1526437710.0
3247,"They mentioned it, but I recommend https://github.com/Netflix-Skunkworks/go-jira written by Netflix employees",1526472521.0
Balistarius,"Why are these conferences so freaking expensive? I love javascript and I live in the Netherlands so every time there's a conference I check the prices and I get dissapointed. :(  
They should have something like a student discount IMO",1526412028.0
umib0zu,"Ah. So you've hit the inflection point between ""Node is a toy"" to ""I actually need to engineer with Node"". Welcome.

When you start getting into ""high traffic"" you start getting into hard engineering and design. The beauty of Node is that it allows you to not worry about concurrency control since it's single threaded, but you still need to think about resource management, and there are lots of ways to debug and build solutions for resource management. Some are expensive, some aren't.

Typically, this is a memory leak issue when your app crashes with high requests. This isn't an issue in Node alone, so you need to get used to the toolsets to measure and identify memory leaks, no matter what language you use. I would recommend:

1. Locally generate requests to a running development server. Basically set up a server on EC2, start it, and run top while spamming it with requests. Try to measure when it craps out and see the memory usage.
2. At this point, is the node process just generating a ton of memory, or is it another process?
3. If it is node, setup [nodemon](https://nodemon.io/)
4. Figure out if you have a memory leak. Nodemon should monitor memory usage, so spam the requests again with your app wrapped in nodemon and determine if the memory node is using is slowly increasing.
5. Find the memory leak. Pull out your debugger and think about ways your program could be storing data.
6. Solve it.
7. ???
8. Profit. Tell your boss you're a dev ops engineer and demand a raise.",1526416571.0
Earhacker,"An interesting read, but I don't agree with any of it. Even if everything _could_ be written in JavaScript (it can't, Atwood was joking), it doesn't necessarily follow that everything _will_ be implemented in JavaScript. 

JavaScript has been the _lingua franca_ for developers for decades. Everyone who has ever targeted the web knows a little bit of JavaScript, and its C-like syntax and dynamic typing mean that just about every developer can read a bit of JavaScript and know roughly what is going on. In that sense, he's right, JavaScript is a network of communication.

But there's stuff that JavaScript is just always going to be shit at. Anything that requires multiple threaded processes, for example. That rules out pretty much any game beyond what a web browser is capable of. Big data processing, JavaScript has always sucked at. I mean the kind of analyses that a data scientist would reach for R or pandas to perform. For anything that lives beneath the network or application layers, JavaScript is a poor choice.

Which is fine. You'd have to be an ardent neckbeard to seriously consider JavaScript the _only_ language fit to solve these problems. 

What I do like here though, is the author's uncredited aerial photography. Some of those shots [are just beautiful](https://cdn-images-1.medium.com/max/2000/1*R64jTNwzB4C0SV83b1TGnQ.jpeg)",1526410120.0
YourFavoriteHeel,"My point is WebAssembly doesn't enable anything new functionality-wise. It only makes things that can already work run ~10% more efficiently than the most efficient current JS methods. That percentage is likely to grow somewhat, but fundamentally, no new functionality. It does parse a lot faster.",1526478833.0
kryptkpr,"Could be something as benign as web crawlers, take a look at their User-Agents and see if you're getting 404s on /robots.txt

Could also be something slightly more malicious looking for WordPress or other vulnerable software installations .. it hits your root, discovers you are not WordPress and moves on.

In either case it's nothing to worry about.",1526405053.0
mohelgamal,"The bots don’t know your website doesn’t have valuable info until they scan it. But they are not only looking for info they are looking for unsecured instances they can run code on to add to their own computing power and god knows what else.

But this may not be an evil bot either. It could be a search engine cataloging your website and is looking for changes. Sometimes we tend to forget that the way google, bing, yahoo, etc work is by reading the website and putting them in their database.

That is how the whole search engine optimization technique started to make sure your own website will categorize successfully ",1526406694.0
warchild4l,If i had that available five months ago xD ill take a look at this! Ty for posting ,1526408260.0
scttmthsn,Haven't had a chance to look at this yet but https://github.com/jwalton/passport-api-docs was getting the love the other day.,1526397253.0
baus,"I think Passport is pretty limited if you want to implement a full user registration and management system. I'm surprised that the Node community still pretty much rolls this with every application when other major platforms (Django, Rails, ASP.NET) have this functionality out of the box. I've been seriously considering trying to implement something like Django Registration for Node.",1526425685.0
robotmayo,"Im in the same boat. I have recently gave up on using passport and just implementing auth myself. Passport does so little, rolling your own is very little extra work.",1526402729.0
JustinsWorking,"If you're not using multiple strategies, you're not going to get much if anything out of it.",1526433920.0
Sfpkt,Could you post your code? I was able to implement passport js but it did some elbow grease. ,1526413367.0
lonehiker,"Passport is really useful when you want to allow people to sign in using existing accounts from Facebook, Google, Twitter, GitHub, etc.",1526416116.0
mospretmen,"Watch colt Steele on Udemy implement it, should be helpful",1526428188.0
JonnyBoy89,Personally love passport. Once you know how to use it it’s really very simple and can save quite a bit of time. Check out this [tutorial](https://www.google.com/amp/s/scotch.io/amp/tutorials/easy-node-authentication-setup-and-local) for local auth. I connected this to an Mlab database as a proof   ,1526447744.0
Blueberryroid,"Passport.js docs is abysmal. I remember thinking ""Is that it?""",1526472714.0
jkwysdom,"It is good but not great, for what it is worth you are better off using JWT unless you need support for a bunch of logins in which case passport.js is a pretty good choice. ",1526499680.0
reikj4vic,[This](https://mianlabs.com/2018/05/09/understanding-sessions-and-local-authentication-in-express-with-passport-and-mongodb/) article might help you understand how Passport works. ,1526534301.0
BehindTheMath,"If they're the same project, what would be the point? You're just taking up extra space for no reason. ",1526393883.0
dluecke,I wrote about how it can be done using FeathersJS at [https://blog.feathersjs.com/using\-feathersjs\-to\-make\-your\-existing\-api\-real\-time\-813f7c3fd892](https://blog.feathersjs.com/using-feathersjs-to-make-your-existing-api-real-time-813f7c3fd892). Besides allowing to handle data transformation and authentication another nice side effect is that the proxied API can also automatically send real\-time updates if you want it to. With the Feathers Express wrapper the transition also isn't too difficult since a Feathers server application is fully compatible with Express.,1526410623.0
MUDrummer,"We don’t use this exact code any more as we’ve moved to the AWS API gateway, but this is a API/UI gateway that we have remade a couple of time for different clients over the last 2 years. 

https://github.com/ocelotconsulting/ocelot

It has some hooks for connecting into an auth source to validate requests. It’s mostly just a convenient way to configure the http-proxy module.

Should get you started if you’re wanting the gateway to be a separate deployable. ",1526388456.0
Ariquitaun,You could have a look at how kong works and translate that into node/express lingo.,1526388705.0
WumpyJizard,"Check this out: https://blog.risingstack.com/building-an-api-gateway-using-nodejs/

I think they have public github repos with working examples too.",1526439324.0
MCShoveled,Give a look at GRPC and google endpoints. ,1526398852.0
XiberKernel,"Hmm, maybe it's time to publish a medium article on how to distinguish the loads of trash article promotions that flood /r/node?",1526392763.0
iqover190,You should browse sorted by Top. We like to see everything. EVERYTHING.,1526387843.0
VinceAggrippino,"I'm not seein' it. Even if I change the sort from ""Hot"" to ""New"" I see nothing but mostly relevant posts. A lot of those are articles, but they're still about NodeJS or at least JavaScript development in general.

And, yes, a few of those are from medium but they don't seem like shallow self-promotion to me. I mean, do you really think Anil Dash is just posting to pad his résumé?",1526417007.0
Fullstack_Questions,Mods should have banned medium domain long ago. Anybody who wants to fill a blog for their resume copy pate docs for 3rd party modules/frameworks and spam it everywhere they can. ,1526409179.0
GFandango,Top 10 trash article promotions every developer must read,1526403502.0
tentaclebreath,This is almost every sub I follow.,1526836031.0
SepticReVo,"Who dictates whether it’s a trash article or not? You? The mods? What’s garbage to one person might be incredibly helpful to another. I don’t think you or anyone else should be playing gatekeeper when it comes to posts. If you don’t like a post, down vote it and move on.",1526387165.0
AbraKdabra,"Hey, I think this post is trash, can mods or an automatic plugin delete it?",1526404821.0
OzziePeck,"If an article promoting post has gotten zero or even negative upvotes over X hours, delete it, it’s most likely trash. ",1526385574.0
WeaponizedMath,::raises hand:: Willing to become a mod,1526399785.0
sotimting,"But but but... I just put the finishing touches on my latest blog post - How to Parse JSON Requests with Express.

Are you saying you don’t want to read it?",1526475735.0
max_kek,"""Connection refused"" means it's either trying to connect to a port (and ip - double check that you're listening on the same ip as the one you're trying to connect to) where nothing's listening, or your firewall is blocking it.",1526384650.0
SafetyMoose22,"Is this completely your own implementation of a p2p protocol on top of websockets? 

Regardless you should include what packages you are using to get this done. 

The error message/code `ECONNREFUSED` means that there was no service listening on that port or the port is blocked by some firewall. Are you sure there has been a websocket server start on that port?  ",1526384843.0
isakdev,"I don't understand what your questions is.

Just make your own express api with your own project structure and write your own documentation.",1526385032.0
elrodrix,Swagger is the best 4u,1526394044.0
WrksOnMyMachine,How far outside of the box are you?,1526392413.0
reddittedf,"Document your Already Existing APIs with Swagger
 

https://scotch.io/tutorials/document-your-already-existing-apis-with-swagger",1526393768.0
sayanriju,Apidoc (http://apidocjs.com/)?,1526408097.0
overthetopclock,"although the structure seems strange to have a table for each user, but you can use promises ( or async/await) , something like this:

    // namesOfPeopleImFollowing is the array with the names
    var allPromises = namesOfPeopleImFollowing.map(function(ele){
                 
                 return new Promise(resolve=>{
                    connection.query(`SELECT * FROM user${ele}posts`, function(error,resultOfThis){
                        if(error){
                          return resolve({error:true,username:ele});
                        } else {                        
                          return resolve({error:false,result:resultOfThis});                                             
                        }
                      }) 

                 });
                        
                    
     });

    Promise.all([allPromises]).then(arrayOfResponses=>{

    arrayOfResponses.forEach(response=>{

        if(response.error===true){
            //do what you want for this user
        };

        //do the other task here
    })

    });",1526380855.0
robotzuelo,"move this:

`console.log(JSON.stringify(allPostsWithUsername))`

to the else block. That should do the trick.",1526394932.0
Maxoumask,"Used a lot sonar for Java and c# (really interesting tool) never for js. If you ever give it a go, a feedback would be nice :)",1526385428.0
bloudraak,Try Coverity. It’s not free. ,1526446267.0
ecares,Static analysis is very hard to perform in js. IMHO there is no really good tool for that compared to other languages.,1526382621.0
the__itis,prob helps to post your code examples ,1526375964.0
andredp,"I'm reading the code, but a couple questions:

Why are you calling setTimeouts with 5 seconds?

In JS you don't need to pass self, you can use `this` in the cases you are using `self`.

Why are you using so much async await? ES6 has tail call optimisation which you probably aren't using due to that.",1526410888.0
EuqlinSankyo,"Might be worth mentioning that file/directory sorting differs from OS to OS, might be worth sorting everything by name beforehand.",1526444870.0
,"This is a three week old article that could have been copied and pasted from five years ago.  No, OP, not cool. ",1526369005.0
TheRealPictures,cool,1526367628.0
isakdev,I make a custom one by answering questions about my style. Unless you are working in a team with a predefined style guidelines - do the same.,1526386483.0
timgfx,"I used to use airbnb, but don’t really use eslint anymore",1526373674.0
kitsunekyo,could strapi or Keystonejs be what you're looking for?,1526366968.0
yonatannn,strongloop,1526369811.0
Aurelsicoko,Take a look at [Strapi.io](https://strapi.io),1526372110.0
TrainedCodeMonkey,Are you trying to do authentication and authorization? I haven't used jwt for anything else so I'm going to make this assumption. I use firebase auth on the client and on the server for my apps. If it helps I can give the two exact npm packages next time I'm at my desk. ,1526358152.0
SuperbNet,"Digital Ocean hosting should be sufficient. Besides Heroku your other main options are AWS and Linode. AWS is likely overkill for your project (you could use it to save some money if you think you can stay within the free tier). Linode is comparable to Digital Ocean, but in my experience can be trickier to use.",1526338362.0
Earhacker,[Now](https://zeit.co/now) has an awesome free tier and your money goes further there than on Heroku. But Digital Ocean is still the way to go if you're expecting serious traffic.,1526340771.0
Lee4Gitr,Visual Studio Code has a built in node debugger. Give it a shot!,1526341720.0
BehindTheMath,"I use Webstorm which allows you to debug and set breakpoints inside the IDE.

You can use Chrome DevTools to debug, just as you would a frontend page: https://medium.com/the-node-js-collection/debugging-node-js-with-google-chrome-4965b5f910f4",1526340142.0
Earhacker,"> Data-Forge was born from my frustration in working with data in Python and Pandas. Don’t get me wrong though! I won’t try to tell you that Python and Pandas are bad in anyway, but it just irked me that I had to rewrite my data handling code in JavaScript so I could then move it to a JavaScript production environment. Besides I just liked JavaScript (well, now TypeScript).

This. I don't do any heavy-duty data work, but when I do, it's because I want to fire that data into D3. It's frustrating to have to drop into Python and pandas just to work with data in a sensible way.

I really hope this takes off for you OP.",1526341545.0
maplesyrupismajestic,"This is really cool. We've been having to use PHP for parsing user-uploaded CSV docs. My co-workers will be happy to see this.

On a side note thank you for using Ghost instead of Medium. As time passes Medium is slowly shrinking the readability of their articles for mobile viewers with stuff like ""Open In App"".

Out of curiosity what did you use to deploy it?",1526346065.0
CarpetFibers,"This looks wonderful. I am going to try it out on a project I'm currently working on, which is a dashboard for financial portfolios for research grants. Looks like it will save me a ton of time and effort. Thanks for your own hard work and effort!",1526348940.0
MonkeyOnARock1,"Does it work on other data files, like .xls and .xlsx?",1526375922.0
calsosta,👍🏻,1526350205.0
chusmeria,This looks great! I just came across pandas in a problem I'm trying to solve with geodata - any chance you'll be putting out (or know of) something like geopandas?,1526363374.0
vinnl,"Looks good :) As someone who didn't know what it is, though, I found [the readme](https://www.npmjs.com/package/data-forge) more informative than that blog post :)",1526370506.0
mtsch11,wow. very good work op.,1526408255.0
moshestv,"Great work, but the ""Skip if"" paragraphs are redundant. They are not informative enough.",1526332262.0
cahva,"They know how to use it when you document your api :) You can document it by using Openapi/swagger or even using Postman collection.

If you meant how is that token used after login, usually token is saved to a cookie or localstorage and then the frontend app injects it to auth header when doing calls to your api.",1526333764.0
toolazytofinishmyw,Please use a secure httponly cookie to store the token. This will protect the token from access from JavaScript and ensure it is only transmitted over ssl. ,1526348591.0
User31441,"If your app is powered by JS then you would reply to a successful login API call with the token. You would store that in LocalStorage and append further requests with it by adding the header.

If you don't want to use JS for that (for progressive enhancement for example) you can instead store the token inside a cookie and stop worrying about it. You should set the cookie to HTTP-Only and Same-Site: strict though. And set a CSRF token (you could skip the CSRF token of you use the LocalStorage variant).",1526343504.0
heisian,"Original maintainers of axios dropped a couple years ago and now it's being maintained by a handful of pretty uninspired developers. Would not recommend as we had to end up forking and using our own version we called haxios.

I wish there was just a CURL wrapper available, like every other god damn language does, rather than rewriting the whole damn thing in JS.",1526326592.0
tamalweb,"You can look into MDNs node/express: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs 

You can also look into Wes Bos' learnnode.com (I am learning from it now)

A question: Before Django, did you happen to be on any other frameworks/paths?",1526312232.0
littlebigdata,"Old episodes of NodeUp can still be interesting and helpful just to get familiar with the ecosystem. 

Express documentation is nice in case you decide to go with that server implementation. 

There are a lot of good ORM-type libraries for dealing with the data layer, Mongoose and Sequelize being two top contenders. 

",1526319305.0
tiben_,My first node.js app :),1526308609.0
Pringelman,Cool idea! ,1526324455.0
whyNadorp,"So you want to use the terminal as if you were playing mortal kombat, I guess :) “killall java” can be a useful fatality :D",1526335542.0
isakdev,"Depends of what those requests are. If they are like a different GET request for each user but it can be solved by having a GET all users route, than the latter would be better.

Also you shouldn't use getElementById targeting on React side. The GET request response data should be in state and then you do your view logic to present the data in a certain component.",1526308063.0
TokyoBanana,"I'm most worried why you're using getElementById and using react. There's the occasional use case (e.g. grabbing a canvas element, or grabbing some properties off an element), but usually react can handle the generic uses.",1526347341.0
Capaj,Try using GraphQL and you'll have no worries like that.,1526309585.0
joshmanders,"Make sure you `app.set('trust proxy', 1)`.",1526310179.0
wan888,"Hi there, I ran into the same issue last week. EDITED: Possible Solution posted by u/joshmanders - My workaround: I transfer the info (access token) now via get parameter in the url and store the value in local storage once received and remove the param from the url afterwards. Works like a charm ",1526310099.0
psayre23,This is pretty sweet. Are you going to distribute it anywhere? Mac App Store?,1526312943.0
sznowicki,Why would I add dependency instead of writing a function that concatenates strings?,1526319531.0
kevinkace,"Looks nice. I made something similar recently, slightly different API. https://github.com/kevinkace/cssJoin",1526311738.0
RobertGM,Does nobody here know about classList.add/remove,1526338159.0
Maj0rTom,This is much easier if you use [Serverless Framework](https://serverless.com/framework/),1526327548.0
digitalbath78,"The first thing I wanted to see was this working with RDS. Of course, instead I find...

""This has a fake “data store” that we’ll close our eyes and wish real hard it is a database.""

How about using a real database? Lambda and RDS has been a pain.",1526338924.0
theoszymk,You should look into https://base.run for a serverless database,1526338487.0
OzziePeck,Mods. Pls can we add a rule to stop this bs promotions. ,1526301970.0
psayre23,I think it depends on who is going to use it and their expected setup. Also depends on whether you want an online or offline setup process.,1526313329.0
mrjking,"That article is pretending that fat binaries solve the same sets of problems as Docker (they don't). I don't even know how one would create a binary that includes multiple micro services from different languages + Redis + database. 

The nice thing about having it separated in containers is it's very easy to update/replace a small part without having to remake the entire system. If the binary was distributed with Postgres built in, what happens if a customer wanted to use their own Postgres database? With Docker, they can just change the env variables to point to their Postgres server and not start up the Postgres container. Might be able to do that with binary, but then the customer would still be wasting resources running your copy of Postgres.

If your application requires a worker, you can separate that code into a container. If that worker is not processing jobs fast enough, you can spin up another worker container, you don't need to launch the entire binary just to get another worker. It's like adding another bedroom to your house, versus building a 2nd house just to get 1 more room. 

I think using a compiled binary in a Docker container is just fine. I think trying to include everything in a single binary would be difficult with a more complicated app. ",1526321195.0
jrandm,"If you want to do it explicitly, [the spawn docs](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) include the verbose way to manually read data and pipe it inside of node.

[The options.stdio section](https://nodejs.org/api/child_process.html#child_process_options_stdio) tells you the solution in a more roundabout way -- you are wanting to send one `spawn`'s stdout to another's stdin, after all.

    const {spawn} = require('child_process');

    const curl = spawn('curl', ['-s', 'http://example.com']);
    // tar doesn't really fit this example so switched to gzip
    const gzip = spawn('gzip', [], {stdio:[curl.stdout,'pipe','pipe']});

    gzip.stdout.on('data', d=>process.stdout.write(d));
    curl.stderr.on('data', e=>console.log(e.toString()));
    gzip.stderr.on('data', e=>console.log(e.toString()));

If you run this directly you'll (assuming no error) see the raw bytes come out (may mess up your terminal):

    $ node tmp.js
    �Z�TA�
          ��ri]��S @1kZ��$��۽�@+���l�I��s�PzUe��Bf
                                                  +���+�OF  4h�^@^ (snipped, etc)
    $

To check it's doing what we intended, pipe it back to gunzip:

    $ node tmp.js | gunzip
    <!doctype html>
    <html>
    <head>
        <title>Example Domain</title>
    
        <meta charset=""utf-8"" />
        <meta http-equiv=""Content-type"" content=""text/html; charset=utf-8"" />
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"" />
        <style type=""text/css"">
        body {
            background-color: #f0(snipped, etc)
    $",1526328281.0
eliagrady,import querystring from 'querystring' should get you started ,1526302642.0
isakdev,"split by &

then apply regex to each part

transform it to an object

save it with mongoose",1526312628.0
adidarachi,What server you are using? (Http server),1526297739.0
,"Are they selling something? I couldn't tell what if they are. This is the sort of post you give to noob HR people and then watch as Rome burns. 

To paraphrase: To hire the best Node developer, make sure they are expert developers, who know Node. Simple.",1526293722.0
ecotricheco,Send me a PM of course,1526292225.0
isakdev,You can make a streaming api with websockets.,1526309836.0
BenjiSponge,Objection.js on knex.,1526271270.0
saltupz,Typeorm,1526272733.0
keyeja,I habe tried Sequelize and then Objection and have to say that Objection ist far more intuitive and easier to pick up. It’s also less bloated. The docs are really well done with examples for everything. I’d recommend it for everyone.,1526275050.0
bmarkovic,"Knex.js, and when/if I really need an ORM I add Objection on top of it.",1526285360.0
kryptkpr,"I'm using knex. I didn't want a full ORM and I like to be able to drop into SQL if I need it but neither did I want to reinvent migrations, seeding, etc.. Database independence is a nice bonus feature. ",1526272193.0
andre_scalco,"The only one i've used so far is sequelize. Seems like a good choice, for me.",1526271313.0
MiguelCV,Have you guys used Bookshelf? Is the documentation clear enough for you? I see the documentation and It does not look clear for me haha ,1526273039.0
Dekans,"Anyone here used both Objection and TypeORM?

I'm trying to decide between the two. Probably going to use Typescript",1526316352.0
theZcuber,"I use Sequelize, and have actually written a program to auto-generate all the files necessary for a REST API (plus emitting Socket.IO events) from a simple schema file. Write the schema, run my code and you're all set.",1526277271.0
marimba4312,We just migrated from sequelize to TypeORM. ,1526301317.0
druman54,"https://github.com/typeorm/typeorm

http://typeorm.io/#/",1526305351.0
adrien2p,"I am using sequelize with sequelize-typescript which as many features and strong support of transaction al query.
You have the possibility to write also rawQuery",1526287467.0
Jikstra,I quite like squeljs because it's just a query builder and nothing else. Using it for a sqlite3 database application. ,1526291592.0
lumitor,Openrecord.js is the best 🙂,1526293184.0
GuerreiroAZerg,I've been using Sequelize and sequelize-auto to generate models from existing databases. Works fine so far. Sequelize allows raw queries too. The downside is that the docs could be better.,1526306205.0
stombre,"Personally, I have always been a little bit disappointed with NodeJS's ORM:
- Bad documentation
- Do not like the API (very subjective)
- Do not use modern technology (class, inheritance ...)
- Missing features

I ended up creating my own ORM, it is currently a WIP (since a few months). I want to offer an API that can handle all types of databases. And an ORM where you can create plugin easily and fast ;
https://nodegang.github.io/ilorm-site/
https://github.com/nodegang/ilorm

Not ready to go in production, but I am interested on some feedback on the API.",1526325454.0
yonatannn,"You should also look for: supports the data-mapper pattern and not active-record

Only typeorm supports this OOTB. But it felt a bit immature to us, so we used Sequalize and with slight modifications (in our code, 10 lines of code or so) configured it to be used as a data-mapper",1526382475.0
reddittedf,sequelize.js,1526393561.0
lcfcjs,Mongoose is great for MongoDB.,1526324043.0
Thommasc,I wish there were a good ORM for dynamodb ...,1526293670.0
kapv89,"If you are working with PostgreSQL, I'd like to pitch in my ORM, tabel, http://tabel.fractaltech.in

It is a datamapper that leverages Javascript's functional nature.",1526307713.0
changed_perspective,I have been using sequelize. I have been really struggling with the documentation but I have been really enjoying it!,1526291494.0
Republic_India,"Your company reputation is important. Unflattering news, pictures, blog posts, and remarks about your individual, your business, brand, products, and services can be posted and spread quickly throughout the online world fest damaging your status and influence your sales and primary concern. You cannot afford not to do ORM!

Your online reputation is your image on the web. Online Reputation Management (ORM) is about enhancing or your brand’s great standing. This is by countering, weakening or eliminating the negative material found in the Internet-defeating it with more positive material to improving your credibility and clients ‘trust in you. For more information click the below link

[http://republichub.in/Home/online-reputation-management.html](http://republichub.in/Home/online-reputation-management.html)",1533721707.0
10248,Django :),1526294429.0
HereComeMisterPigeon,"Apache Solr Cloud, this is for Java though",1526303469.0
broofa,Read up on [node's logic for module loading.](https://nodejs.org/api/modules.html#modules_all_together),1526257362.0
lord2800,Running `npm start` automatically finds `server.js` unless you override the start command.,1526250930.0
nothingduploading,why not? sizzle is awesome. makes scraping a breeze.,1526244553.0
WeaponizedMath,"Since all you care about is the interface why not write a wrapper for jQuery since it's just navigating a tree structure in a ludicrously sensible fashion?

Do you really want to go back to xpath? Do you?",1526244399.0
SepticReVo,Frosted Flakes maybe?,1526256151.0
dandv,"This was already asked.

https://www.reddit.com/r/node/comments/6dddcg/cheerio_alternative/",1540771248.0
Tatsuya-,"I’ve only used node with express, but I’ve seen a similar error before. What I think is happening is that your browser connects to the server and receives the html, but when the browser asks for the css file (and possibly your other script files as well), your server sends back the html file an additional time, which is why the error says a resource was meant to be a css file but instead you received a html file. 

I would recommend using express for most of your node projects, it’s extremely simple to setup and basically allows you to put all your resources in a single folder and any requests to your server for those files will be sent through express and handled for you.",1526231082.0
davisonn,"If you are using express, you probably want to look into express.static (https://expressjs.com/en/starter/static-files.html)",1526256156.0
cyanydeez,need to set mimetype on hwders,1526265970.0
randomhippie123,I usually contribute to projects that I use heavily or am interested in. Get active on community discord’s and subreddits then see what people have to offer.,1526219621.0
OzziePeck,"I’m going to start working on a database service. Essentially a REST api on top of MySQL and redis. AKA: I hate the code I have to write to setup a database for a new project, so wanted to make a service like this with a nice API to make all the (I guess boilerplating?) database setup less of a pain. Also cause it will be really handy when it’s finished. So yeah feel free to DM me. ",1526220257.0
jsgui,"Somewhat like u/OzziePeck, I'm also working on database software. It's a relational DB on top of LevelDB (by Google), using observables and websockets to provide large datasets in a convenient way.

I plan to give the database sharding capabilities in the future. At present it's got some capabilities to sync from other live instances but this needs more work.

https://github.com/metabench/nextleveldb-server
https://github.com/metabench/nextleveldb-client
https://github.com/metabench/nextleveldb-model

There is no documentation yet. It lacks an automated test suite. The core functionality works OK. The next piece of core functionality I'm planning on implementing is unique constraints, and possibly some more constraints while I'm working on unique constraints.

The project started with my observation that it would be fairly simple to use LevelDB, with key prefixes, to separate the records into tables. However, as the project has progressed there have been quite a few areas of complexity which I have since solved - such as how to limit the rate that a server with a very fast internet connection will send its data to a client that can only receive and process at a lower rate. I solved this by getting the client to send message responses, and if the client gets a bit behind, a delay is added to sending

The logic is much like a normal relational DB, except the fields are split into key (meaning primary key field(s)) and value (meaning all other fields).

Involved in this work are pausable observables, and using them, along with other client and server code, to provide abstractions that enable the client to access data on the server using the same async API as if the server was a local machine.

Also in the pipeline is changing (maybe as a configurable option) to RocksDB (by Facebook), because it is faster than LevelDB.

I thought it worth mentioning CockroachDB as at present it's far more tested, documented, complete and full featured than NextLevelDB. I also advise anyone thinking of writing their own DB to give more consideration to using an existing DB implementation such as CockroachDB.",1526299559.0
AxelTerizaki,"I'm working on a karaoke manager / player with friends called Karaoke Mugen : [http://mugen.karaokes.moe](http://mugen.karaokes.moe)

It relies on node \(with babel\)/express/react/sqlite/mpv/ffmpeg and is a self\-contained app for Windows, macOS and Linux. You run it with a song database we provide, add songs to a playlist \(or let your users on your local network do it with their mobile devices\) and hit play. The database is mostly filled with anime/japanese songs but we have some rare exceptions in there.

We could need help with a few things :

\- Rewrite the main frontend webapp in React \(only the admin side is in React right now\)

\- Make a server component we could use to centralize stats and other information from all Karaoke Mugen instances \(it'd be an opt\-in service\). This server would also allow for a [Jackbox.tv](https://Jackbox.tv) \-like experience \(currently the clients need to be on the same wifi network as the server for KM to work for them\)

\- And of course implement features left and right. We don't lack ideas.

We have a gitlab here : [https://lab.shelter.moe/karaokemugen/karaokemugen\-app](https://lab.shelter.moe/karaokemugen/karaokemugen-app) and a discord server \([https://discord.gg/a8dMYek](https://discord.gg/a8dMYek)\) to centralize our efforts \(warning, most channels here are in french, but on the #karaoke\_dev ones we can speak english fluently\)

As u/randomhippie123 pointed out, you should definitely contribute to projects you use yourself or are interested in. If Karaoke Mugen seems like something you'd enjoy, then feel free to DM me for more details :\)",1526371669.0
octaw,So nest is a framework for node? Most of that article went over my head.,1526228577.0
WildBattery,This looks great! Thanks for the article.,1526226710.0
adrien2p,"Nestjs is a great framework with low dependencies, using the advantage of DI and the modularity like Angular all of that over nodejs using typescript for a quicker backend development.",1526239112.0
a-bosh,"This article is terribly written.

But the framework could be interesting.",1526250904.0
,Submit your form to POST. ,1526214553.0
renoirb,"Here's a proper place to start from:

* https://nodejs.org/api/http.html#http_event_request
* https://nodejs.org/api/http.html#http_class_http_incomingmessage

I suggest you try Koa instead of Express or raw Node.js.
It's easier to grasp, even as a non beginner, I found it easier to learn.
Also, Koa is from the same team as Express.


",1526216245.0
T-McFarlane,"POST data comes through in many different formats.
With a native HTTP server in NodeJS you would create some sort of cache that stores chunks of the body (use the data event get each chunk), and then process the data on the end event.
The data that comes through will need to be handled differently based on the type - multipart, urlencoded, JSON, etc.
It is fairly time consuming - hence why frameworks have been built to handle it.
For something light, check out the body module. Otherwise I would suggest using a more robust solution like Formidable.",1526216673.0
oculus42,The test is including **file load time** for the lodash library.,1526215836.0
EmotionalRefuge,Isn't map() ES5?,1526243918.0
Fullstack_Questions,"Es6 prototype methods are optimised by and for the browser, you’re better off using native features or you are losing computer resources. 

You may read Kyle Simpson’s “YDKJS series, book 6 about Es6”",1526203183.0
relativityboy,"Last I checked, plain old `for` is fastest. The others have excellent use cases though. The world isn't sad about moving on from C++..... ",1526218973.0
lumitor,I like to see this,1526199296.0
jackwilsdon,"I assume this would be even slower as `_.map(items, 'num')`, but it's a nice shorthand to use from time to time.",1526213726.0
Sancer,"First off you can import just the map function instead of the entire lodash lib...
This also fails to consider that lodash's map also handles Object iteration, which does not exist on es6's Object prototype. ",1526234100.0
maximusprime2328,Just use the almighty reduce method instead. ,1526223191.0
jhartikainen,"One reasonably nice way to solve this would be to use a middleware function. For example, consider the following:

    app.get(
      '/foo/bar',
      requireQuery(['a', 'b', 'c']),
      function(req, res) {
        //do stuff
      }
    );

You could write a middleware function such as `requireQuery`, which checks that the specified list of query parameters exist. You could of course make it more advanced, such as also checking the types of the parameters and so on.

This way, you can use them as kind of ""pre conditions"" for your routes, so your main handler doesn't have to verify them separately.",1526174643.0
Mackseraner,"Hey ac_dev, you can use the awesome [joi validator](https://github.com/hapijs/joi) to validate pretty much anything about the query parameters of your endpoints. Check out [celebrate](https://github.com/arb/celebrate) which is a great express-joi bridge.

Taken from celebrate's README:

    app.post('/signup', celebrate({
      body: Joi.object().keys({
        name: Joi.string().required(),
        age: Joi.number().integer(),
        role: Joi.string().default('admin')
      }),
      query: {
        token: Joi.string().token().required()
      }
    }), (req, res) => {
      // At this point, req.body has been validated and 
      // req.body.role is equal to req.body.role if provided in the POST or set to 'admin' by joi
    });",1526212100.0
solidsnake275,"I believe the issue here is that you are creating a compound index. This index is not enforcing unique 'games.title' values. It's enforcing uniqueness of 'username' AND 'games.title'. So for each username you are guaranteeing a unique 'games.title'  but not for all usernames.

For more info check this out: https://docs.mongodb.com/manual/core/index-compound/",1526199971.0
killertofu4u,does http://mongoosejs.com/docs/faq.html#unique-doesnt-work help?,1526184874.0
moving808s,Hmm am I misunderstanding how indexes on array items should work? https://stackoverflow.com/questions/6743849/mongodb-unique-index-on-array-elements-property So `$push` will always allow duplicates even if a unique index is applied?,1526186025.0
moving808s,"Haha okay so this is pretty terrible, open issue with Mongo for years https://jira.mongodb.org/browse/SERVER-1068",1526189667.0
moving808s,"Okay still having issues with this, is this actually a supported feature? I am beginning to think it isn't. For example here is my index as listed in Robo 3T

```
{
    ""games.title"" : 1,
    ""games.publisher"" : 1,
    ""games.developer"" : 1,
    ""games.website"" : 1
}
```

This is a unique index. So by this I expect that mongo will throw an error if an item is attempted to be pushed into the games array with these properties being the same as another item in the array. Is this wrong? 

I am still able to `$addToSet` duplicates even if this index is present
",1526599823.0
uberpwnzorz,"The main reason that Koa got any real traction was during a period when Express wasn't receiving regular updates, and there were some ownership issues. Express has since been donated to the Node.js Foundation and it's leaps and bounds more popular than any other framework (4.7M weekly downloads for Express vs 123k for Koa, 227k for Hapi). You will find more documentation, training, support, and plugins for Express than other frameworks. Also, depending on what you're writing this for, if you plan on working with other developers it's more likely that they'll have experience with Express compared to other frameworks. There may be some edge cases where others have an advantage, but unless those cases apply to you I'd suggest sticking with Express.",1526175037.0
danielstaleiny,"It seems to me that koa is simpler and easier to reason about. I feel like my code is so elegant when writing in it. Also it doesn't come with pre-bundled router or templating  engine so it is lighter. Most packages has been converted to koa as well. Only thing which you can struggle with is tutorials and some packages which does things you want. If you have approach ""do it yourself"" I would go with koa. If you want to use something unpopular you mind not find converted version of that packages. If you feel like you are productive with express there is no need to change. If you feel like trying Koa I would definitely give it a try and see for yourself the benefits. (don't forget to call await next()) ;)",1526163738.0
SomeRandomBuddy,Either is fine. Express is still more popular. Use koa if you like writing “onion” style middleware,1526161794.0
nexusSigma,"Koa is pretty nice, ive used it on personal and open source projects but never at enterprise level. It is growing, and to answer your question on ecosystem, its decent enough but not really anywhere like express. Id still say express is the standard, but I am inclined to think thats mostly due to people liking the comfort of a familiar framework. If your project absolutely needs something super reliable with tons of information on it, stick with express, but if you want to try something new give Koa a shot. The differences are largely qualitative.",1526162727.0
nikaone,"I tried koa, the syntax is pretty cool, since the simplicity, I have to grab a lot of middlewares to start code my business logic, so I switch to express, it works fine.
But for my future project, I want to try other one that is designed for restful.  I don't need the framework supports  traditional feature, e.g. send html file.
Check this, there are other choices besides koa and express.
https://nodejs.libhunt.com/compare-express-vs-koa?rel=cmp-lib",1526197641.0
darkdigitaldream,"I'm currently switching from express to hapi because it has good plugins for swagger documentation generation.

You might be able to make a side\-by\-side performance case for choosing one rest API over another, but for the most part it boils down to whatever supports the things you need to do.",1526165491.0
gabroe,"In my team we love koa we can handle 3000rps with very few ec2 t2’s so it is production ready. What we love about it is that is async, we started with koa 1 and generators/yield but we switched on newer projects to koa2 async/await, I haven’t used express in a while so I’m not sure if there’s a way to do it cleanly but once we started thinking in async/await, callbacks and promises seem so old, like comparing an old vw beetle vs a Tesla. Code is so clean and so easy to write/understand, my only complaint is the koa context mutation that happens everywhere within the middleware seems, middleware is to me an old fashioned concept. ",1526180461.0
mahade,"Koa is the new kid on the block, still in school.

Express is the old man, with a lot of life experience.

Basically, go for whatever style you like best. Neither is wrong.",1526163450.0
patrickfatrick,I prefer Koa for its syntax but if you want to work with Node professionally then you should plan on learning Express either way.,1526177703.0
mospretmen,Try Cloudinary ,1526158629.0
OzziePeck,Share repo/code?,1526302895.0
tamalweb,"Here are some simple steps:

Install dotenv from npm
Create a file named variables.env (or anything in your root folder)
In your .env file add values like this:

    DATABASE=mongodb://database_driver_url1234
    PORT=3000

In your app.js or main server file require the module and add this config options:

    const dotenv = require('dotenv')
    dotenv.config({path: 'variables.env'})

Now anywhere you wish you add the value from the variable, call it like this:

    process.env.DATABASE

Like:

    app.listen(process.env.PORT);

That's it!",1526211920.0
dvlsg,Are you using the [dotenv](https://www.npmjs.com/package/dotenv) project? Node doesn't pick up `.env` files by default.,1526158901.0
immortalcoder,"For sure should be using dotenv. After that is installed all you need to do is process.env.YOUR_ENV_VAR

https://www.npmjs.com/package/dotenv",1526171454.0
kevinkace,Wow that's a lot to read through. Could you trim it down to a more concise question?,1526141569.0
arup_r,"> What happens if the last data event completes a JSON message, but without the trailing newline?

I tried to solve this by using timeout. Here is my code:

    const EventEmitter = require('events').EventEmitter;

    class LDJClient extends EventEmitter {
      constructor(stream) {
        super();

        if (!stream) throw new Error('""stream"" can not be null');

        let buffer = """";
        let timeOut;

        stream.on('data', data => {
          if(timeOut) clearTimeout(timeOut);

          timeOut = setTimeout(arg => {
            this.emit('message', {
              type: 'timeout',
              message: `Invalid message: ${buffer}`
            })
          }, 200);

          buffer += data;
          let boundary = buffer.indexOf('\n');
          while(boundary !== -1) {
            const input = buffer.substring(0, boundary);
            buffer = buffer.substring(boundary + 1);

            try {
              this.emit('message', JSON.parse(input));
            } catch(e) {
              this.emit('message', {
                type: e.name,
                message: e.message
              })
            } finally {
              clearTimeout(timeOut);
            }

            boundary = buffer.indexOf('\n');
          }
        });
      }

      static connect(stream) {
        return new LDJClient(stream);
      }
    }

    module.exports = LDJClient;


And test is:

    const assert = require('assert');
    const EventEmitter = require('events').EventEmitter;
    const LDJClient = require('../lib/ldj-client.js');

    describe('LDJClient', () => {
      let stream = null;
      let client = null;

      beforeEach(() => {
        stream = new EventEmitter();
        client = new LDJClient(stream);
      });

      // ....

      it('should send timeout message if the last data event completes a JSON message, but without the trailing newline', done => {
        client.on('message', message => {      
          assert.equal('timeout', message.type);
          done();
        });

        stream.emit('data', '{""foo"":');
        process.nextTick(() => stream.emit('data', '""bar""}'));
      }).timeout(300);
    });


Am I thinking correctly?
",1526136147.0
lzantal,I use expect library with mocha it seems a lot simpler and direct than assert.,1526160475.0
StoneCypher,"unlike most things, security really needs to be implemented by domain experts. it's not enough to correctly follow a paper, or to imitate code from a different language.

please understand that by falsely taking a position of ""doing it right,"" you are actually putting a great number of people at serious risk

this is how many, many security failures start.",1526143451.0
NobodyMiner,What are the advantages compared to the default pbkdf2 in crypto?,1526110770.0
DerNalia,I think ya need to do more research :\-\),1526152708.0
fahq2m8,I hope the downvotes and clueless responses from OP are enough for anyone who wonders by to steer clear of this library.,1526152220.0
p-h,How exactly does having an asynchronous function help you in a cpu-bound task on a single threaded runtime?,1528293397.0
indeyets,"Do yourself (and your users) a favor. Just use hashy when you need to work with passwords next time. Don't reinvent the bicycle.

I was thinking about implementing it myself after couple of years of manual bcrypt'ing as I was planning migration to argon2. But here it is! Found it almost accidentally. This library has proper support for this usecase and is future-proof. It's trivial to add another algo when time comes.",1526110975.0
danielstaleiny,"what are you trying to achieve ? in little bit more detail please. 

you can use generators to return function and use while(true) to loop infinitely  and make a case when on user input you return and exit. you can have a look also on switch  instead of if/else etc. 

you can also make huge object/array and just do obj['nameOfTheFunction']() to executed instead of if/else.  ",1526135527.0
danielstaleiny,"there is example in nextjs project with koa,

https://github.com/zeit/next.js/blob/canary/examples/custom-server-koa/server.js

What are you trying to do ? I did some project with koa,nextjs,mobx etc. ",1526133393.0
nothingduploading,you have to throttle how many you do. Look at the async library you can do 10 at a time in series for example. async.eachLimit\(\) i think.,1526088307.0
TheOneRavenous,"Is the max listeners a node error?

You may need to shutdown the node thread (child process) that launches puppeteer. It will not release the listeners on puppeteer if you do not shut down the child process. So as you launch new browsers it adds a new set of listeners. ",1526310139.0
adamjohnston151,Can you post the error?,1526124225.0
mattboutet,"Very opinionated, but worth a quick read: https://hueniverse.com/performance-at-rest-75bb8fff143

""Walmart mobile servers built using hapi were able to handle all mobile Black Friday traffic with about 10 CPU cores and 28Gb RAM (of course we used more but they were sitting idle at 0.75% load most of the time).""

If you have something that's CPU bound, maybe Node isn't for you, but for the overwhelming majority of stuff a REST API is going to be doing, the single threaded nature of Node is a non-issue.  If you do have CPU bound tasks, there are ways of handling that which don't involve blocking your whole app.",1526091032.0
Silveress_Golden,"I have a cheap €5 vps that I run 3 api's on (One is heavy scraping), a mongodb server, two websites, an irc bouncer and a few more projects.  
The api's are being served by restify.

My main api serves about 10k requests daily.


Server load when its not scraping rests about 1-3%.  
When it is scraping it is the database that takes the most cpu.   
Basically I could run the api on far lower resources than a €5 vps if I offloaded the db elsewhere.

Thats an api where some of the results are a few kb to up to 20mb so if you plan to use your setup for a website expect it to deviate from what I get out of it.


Honestly I dont know enough about ``Since it only allows a single operation to happen at a time while other incoming requests wait in a queue, if I understand correctly.`` to be able to discuss in length with you, however I am oldschool in many regards and grew up with parallel cables on my computers.  
Although parallel could theoretically handle stuff in parallel we use SATA now because they just work and have far surpassed parallel.


Anyways all teh best!",1526085839.0
angusog7x,"Node.js is highly scalable and wicked fast.  Coming from PHP, its really amazing how well the asynchronous IO model of Node.js allows it to handle simultaneous requests quite well.  Consider in a typical request your app is going to read data from the client, query a database, write to a log file, and send a response back to the client.  Each of those operations in Node.js is asynchronous and because IO is typically slow, that means Node is off handling other requests while waiting for the IO to complete. So in practice requests coming into the serve are not sitting in a queue being handled serially. There are many being worked on at the same time. A single 2 core server can easily handle hundreds of req/s and its not hard to use child processes to take advantage of more cores if you need more compute power. ",1526095498.0
mohelgamal,"Node.js has a cluster module that allows it to run as multithreaded with requests coming and being processed simultaneously. 

With any language/framework it is advisable to hide your code behind a web facing production server like nginx which can spin multithreaded processes. 

Properly configured, node and python can be similar with slight advantage to node from what I hear. Because each thread can accept new requests while longer taking requests such as database call process",1526102819.0
danielstaleiny,"PHP<RUBY<NODEJS

and if you want crazy scaling use aws lambda. 

Run multiple instances of nodejs at same time :)) 

Only thing nodejs shouldn't do is cpu intensive task and serving files. 

Use reverse proxy like nginx to serve files, and proccess images with s3 and lambdas. everything else will be super fast in node. ",1526135080.0
richraid21,This is the kind of content I come to this sub for. ,1526080101.0
gajus0,"Hopefully this does not get misconstructed as an ad. (I have no whatsoever affiliation with Domino's.)

Please delete if it breaks any rules.

Thought it to be funny/ useful share for anyone looking to get pizza this Friday night.",1526077166.0
SquattingWalrus,You are doing God’s work son. ,1526094288.0
eurosat7,"Just tried to open it from germany.

Access Denied
--

You don't have permission to access ""http://www.dominos.co.uk/blog/play-wild-west-wondershot-to-win-pizza-online/"" on this server.
Reference #18.b7a65568.1526079170.5b3ca60

So either the site is down or I an outside range and they looked up my region.",1526079264.0
,What are Domino’s games? I wanna play. And I want pizza. Damn American here. ,1526102958.0
lucraft,"Can you write a thing where I say “I want at least one large pizza and some chicken strippers and some cookies” and it runs all the possible deal combinations and says “your best bet is to use a Mega Deal 7 combined with Forever Alone Deal 2, it costs just £1 more but you get an additional free large pizza, two free garlic breads, and a free drink”",1526126266.0
deizenov,I wish I lived in the UK even though I'm Italian and I've never tasted Domino's pizzas.,1526137457.0
0eye,/r/hacking,1526148833.0
pomlife,"This is an in-memory cache. It's perfectly fine. Make sure you have good cache invalidation to ensure people aren't retrieving stale results. One way to achieve this is to make sure that any API request that modifies that user invalidates the previous entry.

    const USER_CACHE = {
        '64b7bc47-1116-4272-b976-67b943a823c3': {
            id: '64b7bc47-1116-4272-b976-67b943a823c3',
            email: 'example@gmail.com'
        }
    }

This can get trickier if you're using load balancers.",1526077700.0
andredp,">the entire product quantity changes to \-1;

That should never happen... You should implement a trigger in the database  \(units can't be \< 0\) and check it in the backend code too so that if you try to subtract a quantity when it's 0 then you get an error response.

It's hard to explain anything without knowing more \(is it a monolithic application or service oriented, etc...\)

What you should be doing:

1. User A subtracts the item for a given time \(say, he has 10 mins to finish payment\).
2. User B tries to check for the item and sees it is unavailable \(0 units\).
3. User A didn't finish payment in time, so have a cron job \(or handle it differently\) to increment the item number
4. User B can now buy the item.",1526077652.0
kapv89,One word: transactions,1526300158.0
MaxUumen,"results will store the return value of ecs.listClusters(...)
This function probably returns before the callback function is even called. If you want to use the data you have to use / store it inside the callback function.",1526073760.0
hin-fan,"The second parameters of listCluster is a callback, which doesn't capture the function's return value.",1526159859.0
sethrei,Thanks for trying to help. I'm just not getting it for some reason. ,1526300816.0
altintx,"The return value of listClusters is probably a promise, which you're seeing when you're capturing it. try


    var ecs = new AWS.ECS({'region':'us-east-2'});
    var params = {};
    var results = ecs.listClusters(params,function(err,data){
       console.log('data == results? ', data == results); // will be false cuz they're not the same thing
       return data;
    });
",1526067397.0
mistralol,"
Run it under strace to detect the writes. You will see them happen in large chunks of data. The last one probably never happened. Same thing happens in a c/c++ program in Linux if you use say FILE and fprintf and have set a large buffer on it when you basically call _exit or in c++ do a throw which is not handled results in an abort. Typically if the stdout is a tty its line buffered. When its not a tty it defaults to 4k-8k or so.

To to be honest its not a bug its expected behaviour. It just has buffered the output and you didn't flush it before a crash.

work arounds are explained here. Basically need the same as c/c++ fflush(stdout);

https://stackoverflow.com/questions/12510835/stdout-flush-for-nodejs",1526071949.0
Shadaez,"Sounds like a maxBuffer issue and not a bug (i believe it has to get entire contents before piping)


what are you trying to do? it's very likely it could be done more efficiently by spawning a child process",1526076653.0
TheOneRavenous,"Why are you binding to stdout? You're already writing to stdout you don't need to bind the process that is launched with the js file. You'd maybe do that with a parent child process but even then you can just inherit from the parent any listeners for Stdout,stdin, and stderr",1526311070.0
gajus0,"Just in case anyone runs into this issue, here is a simple solution:

    node --eval ""
    const exit = process.exit.bind(process);
    let lastException;
    let buffer = 0;
    process.on('uncaughtException', (exception) => {
      if (buffer) {
        lastException = exception;
      } else {
        throw exception;
      }
    });
    const write = process.stdout.write.bind(process.stdout);
    process.stdout.write = (chunk, encoding, callback) => {
      buffer++;
      write(chunk, encoding, () => {
        buffer--;
        if (\!buffer && lastException) {
          throw lastException;
        }
      
        if (callback) {
          callback();
        }
      });
    };
    let index = 0; let output = ''; while (index < 1000000) { output += ' ' + (index++); } console.log(output); throw new Error('test');
    "" | cat",1526076966.0
fiws,"Hm. I actually was expecting a ""what is you're favorite framework?"" question based on the reddit title.
The fact that I used it doesn't necessarily mean I liked it.
",1526070589.0
domnirok,Please send results when done :-),1526059616.0
ycarmel,Did you eventually find a proper solution for using FIX protocol with node.js?,1535488425.0
lemondragon,"You can go the route Twitch.tv does it. Replace certain words with images on your frontend. FeelsGoodMan becomes an [emote](http://i0.kym-cdn.com/entries/icons/original/000/000/142/feelsgoodman.png). 

Also I think you can just send unicode codes of emojis?",1526042666.0
Tvde1,Jeez man jeez,1526057715.0
whirlyboy,Ember is still relevant and should be on this list!,1526042471.0
CyberPavarotti,"i'm fixing the this code, it should be array.push and not pop

    class groups {
    constructor() {
      this.root = new Group();
      }

      makeChatRoom(name) {
    if (this.root.name !== name ) {
        this.root.name = new Group(name);
        return true;
    }
    else {
        new Group().children.push();
    }
    return false;
     }",1526041037.0
andvgal,"It seems V8 in Node v10 does not recognize constructor with computed name.

A simple fix is to remove quotes around `'constructor'` - then V8 recognizes one as c-tor and allows parent c-tor call trough `super()`.",1526046168.0
Tvde1,Why do you use quotes around the constructor? ,1526055034.0
EuqlinSankyo,Changelog doesn’t seem to have anything obvious that could be the cause of this issue. Have you tried using `constructor` without single quotes or defining the class in a different way?,1526038549.0
segphault,"The PAYMENT\_SERVER\_URL variable is the address of your node.js backend. In production, that would include the domain name where it's hosted.

Unfortunately, the tutorial you are using is not demonstrating best practices. It looks like it's written with the assumption that the frontend and backend live at separate addresses, which is not going to be true in production. It's probably written that way to work around the fact that the webpack server used in development is separate from the node.js backend. In practice, using cors and having your frontend manually specify the address of the backend is not a good way to address this issue. It adds a lot of unnecessary complexity and introduces issues like the one that you encountered.

The create\-react\-app template has a built\-in proxy\[1\] that is designed specifically for this purpose.  I would recommend using that instead of cors. When used correctly, you shouldn't need the PAYMENT\_SERVER\_URL variable at all.

\[1\] [https://github.com/facebook/create\-react\-app/blob/master/packages/react\-scripts/template/README.md#proxying\-api\-requests\-in\-development](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development)

\(Disclosure: I work at Stripe as a technical writer on the documentation team.\)",1526051390.0
SkaterDad,"`PAYMENT_SERVER_URL` would be the URL your Node app is running at.  Have you assigned a domain to your application yet (ie. set up DNS records)?  For example:  `payments.mywebsite.com`.
",1526044026.0
ChronSyn,"Use the events for it;

    const myFileWatcher = fs.watch(
        filename,
        (eventType, file) => console.log(`File ${file} changed!`, `Event received: ${eventType}`)
    );

    myFileWatcher.on('error', (err)=>{
            console.log('uh oh, spaghetti-nodes!')
        }
    );

Could be refactored to be cleaner, but it should give you an idea.",1526036092.0
scaleable,"You will probably get a delete event, you should turn on the debugger and try it yourself.",1526065632.0
flipperdeflip,"Why though?

> natives

> This module lets you do some creative things with the JavaScript code in Node.js. There are some things here that are basically a recipe for memory leaks, or at the very least, being broken with each new release of Node, since none of these API surfaces are ""technically"" ""supported"" by the team managing the Node.js project.

Oh that sounds really dangerous... but fuckkit let's use this shit anyway and let's build all the critical build infrastructure on top of this.",1526045442.0
StoneCypher,"this is a yarn problem, not a node problem",1526051585.0
djslakor,"We've used Koa in\-house on a pretty extensive ERP project and have never found the middleware ecosystem lacking ... at all.  Additionally, it's pretty easy to wrap express middleware with koa\-connect, but we've never needed to even once that I'm aware of.",1526045355.0
unstablevacuum,"I'm a fan of the Koa framework, but the Koa website is shockingly unfriendly to users: the briefest information about the project, followed by the absolute minimum possible tutorial, followed by all of the reference\-style documentation, all on a single page, with only internal links to the major sections.

Aside: I really do not like the prevalent practice of giving configuration ""blocks"" with no context and no further instruction on how to use them, assuming the user is already experienced enough to know that already.",1526051665.0
cinnapear,We love Koa.  For most things we either use barebones node.js or Koa.,1526047054.0
mariotacke,Used Koa since they had generator functions; prefer it now over express because it has true async await callbacks and middleware seems more intuitive.,1526053169.0
Deif,I've gone from express to koa and back to express again. Honestly a 3 line function in express is hardly the deciding factor in choosing a framework. They're pretty much exactly the same. Personally I prefer express because there's more documentation and support but I cba to argue to use it over koa. It would be like arguing whether chocolate sprinkles on my ice cream cone is better than chocolate chips.,1526059237.0
STRiDEX,"I've used Koa since the days of generator functions yielding promises. Its super fast to build a small api and has a very easy to read source code (maybe minus the usual TJ node hacks). But now that hapi fully supports promises and async its hard to continue using koa because the koa ecosystem is weak comparatively. Hapi with joi automatically creating swagger docs is hard to beat. Especially the budding typescript support within the hapi ecosystem is getting really good.
",1526064949.0
1-800-BICYCLE,"I've used both but tend to default to `express` these days. I find `koa` more limiting when it comes to doing things *after* a response has been sent, and practically speaking there's no difference in control flow between the two (they can both do the same pre- and post-handling stuff, the only difference is that `koa` leverages coroutines while `express` simply winds and unwinds the stack). ",1526065088.0
jsgui,"What are ping times like when just pinging from the OS, not with node?",1526036654.0
,[deleted],1526023212.0
Dw0,"Zx,zcceZ SZx,zcaezq22d I zx cz XsEA 12 Z, 3AQ WAS1 2X*""",1526029326.0
goorpy,"You're trying to set `module.exports` to two different values. What you want to do is instead export an object with your two functions as props:

```
Module.exports = {
  myModule,
  myModules,
};
```

_Then_ you'll be able to import them separately or invoke as props.",1526009204.0
,[deleted],1531988242.0
VAST_BLINKER_SHRINK,Announcement: https://youtu.be/ogexnfng_hE?t=9m10s,1526039903.0
agoodguymostly,Looks like you simply have to npm install -g mozlz4 and then run mozlz4 /path/to/file ,1526004299.0
empty_other,"This worked fine for me, using powershell, with [latest version of nodejs](https://nodejs.org/en/) installed:

    npm i -g mozlz4a
    mozlz4a-decompress .\bookmarks.jsonlz4 > ""mybookmarks.json""

The first line installs the node package into your global node repository (a folder in /appdata/roaming/npm/node_modules/ if you are using windows). If you want to uninstall it later, you can write `npm rm -g mozlz4a`. The installer adds the two commands ""mozlz4a-decompress"" and ""mozlz4a-compress"" (you can find them in the npm folder).",1526006248.0
fabiorzfreitas,"/u/empty_other 's suggestion worked for me! Sadly, my file is still broken, but I think its not the topic here. Thanks everyone for the help!",1526006914.0
ccb621,Have you looked at the documentation for Node or npm?,1526003837.0
ccb621,The repository you referenced is wrong The package at https://www.npmjs.com/package/mozlz4a is sourced from https://github.com/piroor/node-mozlz4a. Please follow the instructions at https://www.npmjs.com/package/mozlz4a. Note the command names are not what you have typed.,1526005397.0
SomeRandomBuddy,Lol,1526003492.0
ccb621,"1. Render your data as a JSON blob. You can either write the data to a div or render JS that loads it into a global variable.
2. Read the JSON in your client-side code.

Note that you still need some form of template rendering server-side to create the initial HTML.",1525989274.0
jeffp2662,Watched a little programming on Twitch. Have considered doing some myself. The one thing I can't get past is the fear of accidentally broadcasting a password or api key inadvertently. I have to imagine as this becomes more popular exposures like that will be more common as well. ,1525993631.0
agoodguymostly,Awesome!,1525992945.0
lowdownfool,This is great. You should post this in other programming subreddits. ,1526037345.0
cgijoe_jhuckaby,Doesn't Twitch already have a page that shows this list?  https://www.twitch.tv/communities/programming,1526019405.0
teamomivida,That's really great. ,1525993536.0
hpeinar,"You don't test your code with Postman, you test your code with tests... Look up mocha and supertest for Express API testing",1525988182.0
sql_big_result,why are you using the same router for all of your routes?,1525981403.0
willshowell,"It's common to create a new express Router for each ""feature"" or sub route. In your case, everything is a sub route of `/employees` so it sort of lends itself to just one router:
    

    const employeesRouter = require('./router');

    app.use('/employees', employeesRouter);


You have some verb redundancy going on. Deleting, for example, matches on a `/delete/employee` route, but only handles DELETE requests. Personally, I would ditch the ""delete"" from the route and use the same endpoint. Your router would end up looking like this


    // get all
    router.get('/', ...) 

    // get one by name
    router.get('/:name', ...)

    // add new one
    router.post('/register', ...)

    // update one by id
    router.put('/:id', ...)

    // delete one by id
    router.delete('/:id', ...)",1525983278.0
mclovin4009,"Keep only one router ""app.use('/employees', router);"" and make your postman API calls as follows:

    GET /employees/

    POST /employees/

    PUT /employees/update/:id

and so on... Here's the ""express.Router"" part of the express docs:
https://expressjs.com/en/guide/routing.html
    ",1525983312.0
johnathanjones1998,"Also, just a consideration you should consider, you could be opening yourself to some name collisions on the `router.get('/:name'...) route` (ie let's say you eventually want to have some other routes at the `/...` route). I'd mount all those routes at something like `/info/:name`.",1525984687.0
danielstaleiny,"To answer your question. Yes, there is. ",1525981903.0
uNki23,You could use JWT or sessions? It’s not that different compared to securing REST services?,1525981045.0
node_emperor,"Use JWT, just reading headers wont stop attackers outside the browser. ",1525984719.0
,"You need the body parser \-\-

const express = require\(""express""\);

const cors = require\(""cors""\);

const bodyParser = require\(""body\-parser""\);

const app = express\(\);

app.use\(cors\(\)\);

app.use\(bodyParser.json\(\)\);

then \-\-

[app.post](https://app.post)\(""/blah"", \(req, res, next\) =\> {

console.log\(req.body\);

}\);",1525989145.0
username_is_taken43,Normally as part of debugging you are supposed to check what data is sent by browser using browser built-in developer tools.,1525975520.0
russleyshaw,"NGINX is a reverse proxy, load balancer and a bunch of other things. Its not required, especially if you are starting out with Node/Express.

For example, I can be running 3 Node applications on my server that host on ports 3000, 3001, and 3002. With NGINX, I can map those ports to different subdomains/paths over port 80 (the default HTTP port). Then the app on port 3000 could be on app0.myserver.com, 3001 on app1.myserver.com, 3002 on app2.myserver.com.

Also, with a microservice architecture, you can deploy multiple instances of apps and load balance between them; meaning that if you're receiving too much traffic for a single instance to handle, NGINX can route different requests to different instances of the app.",1525971137.0
saltupz,"Think of it like an ”app server” it handles your business logic, but is not (but can be) used to serve static content like files, css, js etc",1525970870.0
tenXten,Thanks all,1526040316.0
feldim2425,"It is actually better usage of server resources if you have one server for your frontend (like NGINX) that serves all the images, css, js, html files and one or more for the backend (NodeJS) for Logins, Databases,... .

NodeJS only runs one Thread, that means if your server gets many requests it can only handle them step by step and it can't handle multiple requests at the same time. So NGINX is used to handle all the files and load balance to multiple NodeJS servers who handle the backend stuff. NGINX can use multiple threads to handle requests.",1525987526.0
reeferd,Maybe just use express?,1525965719.0
willshowell,Maybe look at [Micro](https://github.com/zeit/micro)?,1525972964.0
HuckleberryC,"Thanks folks - I was going to use Express, but I will look at Feathersjs first.  ccb621 - I understand micro-service is a architecture (much like Restful).  Please excuse my poor question.",1525970096.0
ccb621,"There’s no such thing as a “micro-service library”. Service oriented architecture is a manner of creating your components/deployments.

Pick your favorite web framework and build an API server. That’s your microservice. ",1525967648.0
zarrro,"Feathersjs is really nice to work with, you should check it. ",1525969202.0
takuhi,"I found out the other week that Koa is the spiritual descendent of Express. It’s made by the same development team and they wanted to release it as Express 5, but the changes are so drastic they decided to call it Koa instead.

It’s a bit cleaner / lighter than Express and uses async / await out of the box, which lets you do some very interesting things.

I’ve found so far that the overall level of boilerplate required is about the same for both Koa and Express. I’m not sure how much middleware is available, but I’ve not come across any issues yet.",1525970846.0
hsaliak,try grpc,1525977049.0
patrickleet,"I use servicebus - https://github.com/mateodelnorte/servicebus - it's very simple. Gotta learn a bit about message queues though.

Here's some resources: https://www.youtube.com/watch?v=4k7bLtqXb8c
https://medium.com/p/52fc779c470a",1526088727.0
,[deleted],1525964178.0
rollickingrube,Take a MERN course on Udemy. It will tie it all together for you.,1525965106.0
993VQzn06,"The main connection between Node and React is building an api that supplies the data for your React UI. 

An easier approach might be checking Google’s Cloud Functions. They run in a node environment and can give you a basic idea of what you can do.

Tip: you can create an API with proper routing using Express inside cloud functions. The trick is to load the root of the Express server on one function endpoint.

“Learning node” is a vague question because you can do so many things with Node. Another fun Node project might be a Twitter chatbot. Other potential Node use cases include console application, reading/writing/converting files, scrapping websites and the list can go on.",1525984926.0
feldim2425,"Well if you already know JavaScript you don't have to learn the event-based programming style. That is for some people a big problem when they start programming in JavaScript.

NodeJS is just a Software that runs JavaScript and to do things with it you need modules. So what you should check out the APIs that are built into NodeJS and how to use npm (Node package manager) to install modules. 
Many things you know from the Browser are also in NodeJS linke setTimeout, console.log,... .
There is also a small tutorial on W3School.

Links:
NodeJS Docs: https://nodejs.org/en/docs/
NPM Docs: https://docs.npmjs.com/
W3Schools NodeJS Tutorial: https://www.w3schools.com/nodejs/default.asp",1525985400.0
lazar_nikolov_94,"TCP and UDP are just network protocols. Implementation wise, for a live chat like iMessage where you need real\-time updates you'd want to go with web sockets. [https://socket.io/](https://socket.io/) is very famous in the NodeJS community for working with web sockets. You basically open a web socket connection from the client to the server and start to communicate \(it's a two\-way communication\). The server defines the namespaces and the rooms \(you can imagine those as collections that have a certain topic\). The client would have to know about them in order to ""subscribe"". Once subscribed, the client will receive all of the messages that are broadcasted inside those ""collections"". So for example I want to send you a message, I send the message to the server and let the server know that I'm sending the message to you. The server checks if you're subscribed for listening, and if you are, it sends the message to your socket, and you see it on the screen. I know I'm not really answering your question, but I hope it'll help you have a better understanding of how real\-time chat apps work.",1525962271.0
jIsraelTurner,"Browser are built on the TCP protocol. Websockets use TCP, so you'll probably want to use something like socket.io for a web or mobile app.

If you're building a game or something hardware related, that's likely a different question. I can't help too much there, but I do know that you can build a UDP server in node.",1525990337.0
reprehenderitinvol,I believe it is one of the this.server references in your app.ts - probably the this is the wrong scope,1525990425.0
BrightonTechie,Ive been wondering the same thing!,1525978308.0
denzoj,"Your syntax is a bit off.  

    app.use(express.static('./public'));         

should be:

    app.use(express.static('public'));

Your static files would then live in a folder called 'public', accessible from the same level in the directory as your express server.  The web address of the files would then be:

    www.yoursite.com/javascriptFile1.js

If you want it to be something like this:

    www.yoursite.com/public/javascriptFile1.js

you would need to have app.use set up like this, with a mount path as the first argument:

    app.use('/public', express.static('public'));

I hope I am articulating this in a way that makes sense to you.

The express docs on static files can be found [here](https://expressjs.com/en/starter/static-files.html)",1525995357.0
denzoj,"Theres a findOneAndUpdate method you could use as well. You would pass an object like { url: someurlhere } where ""url"" would be a field in your model. 

Im on mobile so apologies for not providing the link to the mongoose docs.

Edit: fixed a word. ",1525973564.0
tylern,"It looks like you are using Mongoose. You could try using Model.update({ 'name': <param> }, { $set: { 'name':'new name' }}, callback);

here are the docs
http://mongoosejs.com/docs/documents.html",1525934181.0
danielstaleiny,"if you are using mongoose, I would recommend you to have a look on this. :) 
https://twm.me/correct-way-to-use-mongoose/",1525981972.0
ncubez,"It seems you might wanna use the ""res.render('file.html')"" method; where file.html is the appropriate view for the appropriate incoming request. This is back end templating, which personally, I dislike, because there are several different template engines each with it's own crazy syntax. Personally, I only use node and express exclusively for routing, and prefer to handle the front end with Angular, my preferred front end framework. But you don't have to take my advice. ",1525928817.0
chrisdefourire,"CORS only deals with browsers and Cross Origin Requests (hence the name). It's a protocol to tell browsers what they can or can't do. It's the browser that will check the origin, according to what you've specified, to determine if the call should be made or blocked.

If you really want to block calls without your origin header, you can still do it, but it wouldn't be enough to enable Cross Origin Requests, which is the only goal of CORS.

In a way, CORS is not a server-side security feature, it's a browser side security feature, made to allow Cross Origin Requests and only that.

(if not using a browser to make the request, anyone can set the origin header, so it's not a security feature... But browsers do adhere to the CORS protocol and won't allow requests forbidden by the CORS protocol)",1525940513.0
mahade,"Can someone explain to me why exactly these big companies are switching to Node.js? I was under the impression that Java or .Net are much more mature and better performant.

Don't get me wrong, I love Node and I've introduced it to the company I worked at 4 years ago and that triggered them to switch their entire Java back-end to Node. But honestly, to me, it's basically potato vs. compiled potatoe.

But I'm a front-end web developer by trade (I need visuals to stimulate my brain) and only had to introduce Node because my team didn't get a dedicated back-end developer. So I just did it for fun.

I have never done actual research into speed, performance, scalability, developer friendliness, nor the availability of developers (or their costs) but this is what I know so far...

1. Node.js allows front-end JS engineers to also work the back end, which allows for more dynamic and agile teams;
2. Being multithreaded is not an option for Node (but then again, a pub/sub system spread across multiple CPUs would net similar results with much less programming complexity);
3. JS development is less time consuming;
4. JS developers are less expensive than Java/.Net developers.

But where am I wrong and what am I missing?",1525946482.0
LiMing3,I was under the impression they already used Node heavily. Still good to hear! One more thing to shut up the “hurrr durr JavaScript” meme.,1525895551.0
Captain_Reid,Any idea what that 'skipper' tool he had up was? Is it something internal?,1525896913.0
kintendo,Sure their APIs can be in node but data engineering in Java isnt replaceable yet. ,1525966451.0
milsymiller,Migrating from ?,1525893715.0
crtjer,I through when node first came out they did NOT want anything to do with it or that infamous blog post about how they didn’t like node. Am I mistaken?,1525961937.0
Roadrunner571,"I like JavaScript a lot, but I think code readability and maintainability is often a mess. And don’t get me started on function binding or the scope of variables. ",1525956647.0
zer0gravy,"http://docs.sequelizejs.com
is a compatible Orm, like entity framework but node. 

http://www.passportjs.org
has support for Oauth2.

",1525881301.0
willshowell,I'd suggest you follow the example with whatever database they use and then swap it out once you have a handle of the more complicated auth stuff. That way you'll focus on authentication logistics first and your ORM's API second.,1525888996.0
flipperdeflip,"The docs for this API are weird and not very readable but has all the information if you click through it: http://google.github.io/google-api-nodejs-client/modules/_apis_gmail_v1_.html

It looks like you need to find the Message objects: http://google.github.io/google-api-nodejs-client/interfaces/_apis_gmail_v1_.schema_message.html

Then notice it has both a `raw`and a `payload` property. I think you were looking at `raw`, but I'd go with `payload` since it is already parsed (the insanity that is real-world email encoding). 

Then find the MessagePart's in the payload, and then check the mimetype and the body (or sub parts if it is a container) and decide what kind of message this is (text or html etc). If you click around further you will see the data is encoded in base64url-encoding.

Then once you can isolate the actual message and extracted the full body you can think about converting it to HTML or PDF (which is a separate problem altogether).

It is pretty gnarly stuff even with Google's preprocessing of the payload, good luck :)",1525878575.0
feitico,"gmail store html in base64 for some reason

so I did this:

    const response: ThreadResponseGet = await gmail.users.threads.get({ userId, id: thread.id, format: 'full' });

Get a specific thread, and find a payload with mimeType text/html

then I convert from base64 to utf8

    const result = Buffer.from(message.payload.body.data, 'base64').toString('utf8');

and save this to a hmtl file",1526138286.0
maximusprime2328,"What a coincidence! I just answered a question about this on Stack Overflow yesterday.

https://stackoverflow.com/questions/50240790/node-and-express-how-to-implement-basic-webhook-server/50240903#50240903

You should just write it, just to write it and prove that you understand what you implemented. I would read it. But you should do it because you want to, not because you want others to appreciate it.",1525892911.0
pratiks3,Omg yesssss !!!!,1526133836.0
dvtkrlbs,If you wrote it can you send the link,1527516920.0
SomeRandomBuddy,No,1525864216.0
MyPostsAreRetarded,"""Serverless"" in quotes.. we're getting closer. Good work",1525859082.0
flippinjoe,"Couple of differences I see.  

1.  You never send “body” with a GET
2.  You’re not including an “Accept: application/json” header",1525836901.0
willcode4cookiedough,This is similar to a Gantt chart. There are quite a few JS libs as well as some D3 examples in the gallery that you could modify for your needs. ,1525835944.0
ezbakedowen,"Try setting PREFIX=/home/orpheus/.npm

That will control where global modules are installed at.",1525876221.0
l3l_aze,"Yarn would most likely work for this. npm tends to have problems on Mac & Linux (for me, at least) whereas somehow yarn tends to manage just fine.

  


Using \`sudo\` to run or reinstall npm may also be able to help, but it's not a great idea.


Edit: Yes, how dare anyone suggest using an alternative to npm. Thanks for not bothering to give any reason why this comment was considered bad, because I'm definitely an expert and any constructive input from anyone would've been useless because of that =| You invalid.",1525823620.0
Vpicone,Wow amazing. You know your docs need work when someone else has to write them for you.,1525814887.0
,So glad to know that I'm not the only one who thought their Docs were the worst I've ever read.,1525825703.0
futureoldperson,"Oh man, I've been tasked with writing an app with passport, and I took one look at the docs and said, ""yeah, that's a tomorrow problem."" Really hope this helps! Thanks!",1525820062.0
mothium,"This is great, I spent the last year building an app with complex passport requirements. This would have been so useful!",1525820706.0
NoInkling,Good. I had to make my own notes for Passport which partly involved manually tracing through the source.,1525827358.0
ynp7,Do people still use passport? I could not hate using it more.,1525849663.0
hubilation,Ooh awesome! Their documentation is terrible!,1525839107.0
yarauuta,"Problem with Passport is that it uses sticky sessions and that makes horizontal scaling much more difficult.



This docs were really needed though.",1525859567.0
Equality7_2521_,Thank you so very much. You probably saved me like 3 hours worth of reading medium articles,1532916128.0
panicattheben,I have been searching for their docs. Glad someone finally wrote it,1525850397.0
getSAT,Wish we could get this for sequelize.js,1525956176.0
username_is_taken43,That explains why I am not with GoDaddy anymore. They got incompetence at all levels. Some tossers decided to test with one browser only.,1525802518.0
Thraksh,"It looks like aws-access-key is false due to the default value in the constructor. 
So it isn’t ever undefined and the if statement falls to the else. 

Generally I don’t bother with the way you use typeof here. 
I would just do something like:
If(!aws-access-key) { ... }",1525784990.0
cornichon,"So you create a new instance of the AWS class without passing in a aws_access_key so the parameter defaults to false, which means the instance variable of the same name never gets assigned (never fulfills your assignment conditions) and you log that in your constructor.

Then you log the variable and it’s undefined, because you never assigned it.",1525784950.0
flipperdeflip,"You don't really need the default arguments of `false` or the `typeof` stuff, because the default of un-used arguments is `undefined` and it evaluates as boolean  to `false`:

    if (aws_access_key) {
        this.aws_access_key = aws_access_key
    }
    else if (process.env.AWS_ACCESS_KEY) {
        this.aws_access_key = process.env.AWS_ACCESS_KEY
    }
    else {
        console.log('aws_access_key is not defined.')
    }

You could cut more noise by using boolean OR statement:

    this.aws_access_key = process.env.AWS_ACCESS_KEY || aws_access_key
    if (!this.aws_access_key) {
        console.log('aws_access_key is not defined.')
    }

Anyway, your question: you don't pass the value and likely did not set the AWS_ACCESS_KEY on your environment vars. Maybe put a `console.log(process.env.AWS_ACCESS_KEY)` in the main file and see.",1525785015.0
sethrei,"Thank you all. 

This is what I ended up with ...
 
    'use strict';
    class AWS {
        constructor({
            aws_access_key=false,
            aws_secret_key=false,
            cluster=false,
            environment=false,
            project=false,
            region=false,
            service=false,
        } = {})
        {
          this.aws_access_key = aws_access_key || process.env.AWS_ACCESS_KEY
          if (!this.aws_access_key)
            {console.log('aws_access_key is not defined.')};
          console.log(this.aws_access_key)
        }
    }

    // module.exports = AWS;
    var a = new AWS();
    var b = new AWS({aws_access_key:'BaloneyPhony'});",1525786073.0
r1cka,"I've found Docker setup for PG (and other services like redis, rabbitmq, etc) to be a much better setup. Have your own Docker per project and able to switch seamlessly. Also, if something gets screwed up with your setup, easier to blow away and restart with Docker.

Additionally, have you looked at Objection.js as a Sequelize replacement?",1525790631.0
rwieruch,"Hello everyone. Today I had to setup PostgreSQL from scratch to use it in my Express.js application. On the side, I documented my steps, because I've found many outdated blog posts/walkthroughs/gists about it. Would be great to get any feedback about the used terminology. Furthermore, I am interested about your favorite `psql` commands :)",1525783539.0
SomeRandomBuddy,We know ,1525780909.0
Waevey,Why this over other popular libraries such as chalk?,1525777530.0
remyrylan,Great work! This looks damn good. I have a CLI project coming up for release this week and I'm definitely switching out minimist for this.,1525786056.0
scttmthsn,"Bloody spammers, piss off.",1525767873.0
ccleary00,"Not quite sure what you're getting at, but - yes - Node can certainly be used for large-scale applications. You'd be hard-pressed to find a major tech company that doesn't have Node services in production.

Now, if you mean to suggest that Node can't be used as the ONLY technology for large/enterprise level applications, then that's maybe more arguable. But even then, it depends on the application itself, the requirements, the type of users, business model, etc. So many factors go into it.

Regarding the microservices approach, it's not the only way to develop large scale apps with Node. More generally speaking and not particularly tied to Node- sometimes it can be more helpful to have a monolith. Again, it comes down to requirements, users, etc.

Are you thinking of using Node in a large-scale app/service? The best way I'd suggest using it is by writing some small service in Node and see how it handles your application then you can add more Node services, add to that existing service, etc. from there.",1525745416.0
ShadwChsr,"Node.js is absolutely multi-threaded, I've spent a great deal of time writing completely multi-threaded addins for it. The Javascript code that executes is single-threaded and asynchronous. 

I have seen Node.js used for large-scale, mission-critical enterprise applications. Remember, that at that scale you're already running with many hosts. Consider a cloud environment; in a node.js scenario you run with a larger number of cheaper and smaller nodes/hosts/containers/serverless functions that autoscale instead of a smaller number of massive, expensive hosts. What I've found is that attention needs to be paid to hosting density - tossing everything and the kitchen sink into a Node.js and trying to scale horizontally with 600 meg docker images isn't going to fly. It's a different pattern from something like Java, both have merit for different reasons.

There's nothing stopping you from writing large, monolithic services in Node.js and it would work fine. The industry is moving towards microservices regardless of Node.js - a big part of that is a push towards agile development in the enterprise back-office. No one wants the scary upgrade to the monolithic Java system with 300 dependencies, so the code rots. Instead, you have smaller services with well-defined contracts that fit well into a rapid release cadence. 
",1525757157.0
,"There's a lot of stuff in there that's just wrong. It uses an event loop on a single thread, but you can offload to different threads easily enough and in fact this is how you're supposed to use it. That's one example. You haven't really clarified what you think a GOOD enterprise application platform would look like. You don't like microservices? That's an architectural approach that does not require Node at all. You don't like two way connections, which again is not a Node specific feature even through websockets or http polling. 

It's used extensively in enterprises. You mention transactions here and that's possibly a hint as to what you're expecting. We have other alternatives to distributed transactions of old, but there's no reason you couldn't write a specific transactional service running in say .Net. which communicates with the Node servers. Chuck in a bit of event sourcing, stir, and you're good. The mention of transactions makes me think you only approve of scaling up not out, but it really isn't clear.

",1525767597.0
SomeRandomBuddy,Delete this,1525777873.0
djslakor,huh?,1525781294.0
echeese,"I tried it myself: 

    > x = new Buffer([0xa7, 0x76, 0x3e, 0x3d])
    <Buffer a7 76 3e 3d>
    > x.readFloatLE(0)
    0.04649987444281578

Looks right to me. ",1525728072.0
VIM_GT_EMACS,smells like sneaky marketing via https://banzaicloud.com/,1525731395.0
VIM_GT_EMACS,"`--unsafe-perm=true --allow-root`

noooooope. fun project tho, nice job.",1525731797.0
unbihexium,"""A lot of CPU usage"" should be a default feature of any electron project! ",1525766645.0
scttmthsn,Yeah we all need an address for you. So we can kill you.,1525721988.0
aetneergdoolb,thank you?,1525739890.0
ManicQin,"Great work!

So each clippy is an electron instance?",1525845569.0
BenZed,"Why, though",1525731799.0
chusmeria,"Hi - I've made a lot of sort of template-y type of things, and I'm curious about some of your organizational structure because I'm a total noob. Largely my questions are about conventions you use, which I seem to see in older tutorials (i.e. pre-2014) but not in recent ones.

* Could you explain why you use a /bin/www instead of just including that all in app.js? 
* Could you explain why you use the '@@' prefix for redux? 
* Could you explain why you would have Jade templates in /views and a /public folder with stylesheets in the root directory when you're rolling create-react-app? 
* Same for using a sudo command in /deploy.sh. It seems dangerous to throw in an sudo command, so I don't really understand this convention at all, but I also am not totally competent when it comes to unix permissions stuff.
* Finally, I usually roll with CouchDB because I find all that model making and non-promise stuff brutal. Is there not a mongodb promise library that can avoid callback hell, or is that just something you rolled from boilerplate? I only ask because it is difficult to read for me after using promises or wrapping them with async/await for the past little bit.

Anyways, thanks for letting me look at your code and ask questions - hopefully they're not totally showing my noobishness. ",1525728818.0
YoungBubble,"Hello, could you edit your post and make your code really a code block? And also point out where you have issues.",1525764801.0
aaronr_90,I’ll get right on it. ,1525757565.0
tuananh_org,may i ask why not just use free CI service like travis (linux + macOS) and appveyor (windows) to prebuild?,1525733040.0
scttmthsn,The term you're looking for is cross compile. Have a look at https://www.electron.build/multi-platform-build,1525700900.0
bjpbakker,"You’ll need a cross compiler to compile native code for different target platforms.

You van either download pre-compiles toolset binaries or compile your own.",1525706532.0
mailto_devnull,"Any particular reason you don't just use nginx, a web server with robust reverse proxy tooling?",1525691092.0
flipperdeflip,This will make a huge mess of your cookies.,1525692308.0
DRW_,"This subreddit is full of blog spam rubbish, often with questionable advice and even if it isn't \- it's often really low value. Unsubscribing, this stuff appears on my front page way too often.",1525699467.0
DraconPern,"A Static html page with links to the projects is probably easier, the user won't even need to type the project name. :)",1525704134.0
inabahare,[Something like this?](https://www.npmjs.com/package/node-fetch),1525682582.0
Tvde1,"Do you mean you can't write your node app to disk, or just files? You probably won't need files at all.",1525701783.0
TheOneRavenous,"You're looking for a ""Stream Transformation"". The Stream Handbook by Substack will point you in the right direction. 

You implement listenrs on the stream and implement your transformation logic as the data comes into the readable side and you pipe the transformation out to the writable side. You may want to transform your buffer (from data input) to a string to make it easier to work with but it's not necessary. You'll then need to transform it back to a buffer to write. 

You can pipe to an http out via a response or to another program. Since you cannot write to disk I suggest writing to an external location via http out. The basic node core server modules come with a request(readable stream) and a response (writable stream). Expressjs does the same. I'm sure there's another stream to http module if you wanted but express is a trusted code base.
",1525717057.0
MrMZa,That's bizarre. Seriously 50 RECOMMENDED? You can't contrast Keystone or [Socket.io](https://Socket.io) with Hapi.js \(and similar\) as use cases are different.,1525678116.0
joesb,You can’t recommend 50 things. ,1525679118.0
Smok3dSalmon,"Fresh account, buzzfeed title, 0 comments and already 18 votes. Hrmmm 🤔",1525676504.0
crackdroid,Did I skim over nestjs? If it's not there it should be.,1525677508.0
serbian44,thanks for shareing,1525676710.0
iends,"The second code example about checking error codes is entirely wrong.

```
if(error.message === 'error code') {}
```

should be something like:

```
if(error.code === 'ERR_BLOG_SPAM') {}
```

This article is literally a crap rewrite of: https://blog.risingstack.com/node-js-10-lts-feature-breakdown/ basically the same sections and wording.",1525666864.0
hkd987,"Can I recommend using an ORM to help you. Once you figure it out, it will speed up your dev time and help keep your scheme in your code base. 

As for why it’s not working on heroku is bc your using localhost. There is no Postgres database on your heroku server. You will need to use a database add on. Then change your code to use that address. Plus you will have to remake your scheme since you are not using an ORM. ",1525641215.0
rollickingrube,"What service are you using to host your database in production (you can't use local host in production, of course)? Try ElephantSQL. ",1525642745.0
Lambotherambo,Stop spamming this in this subreddit idiot,1525751829.0
hkd987,"I think your not looking at this from from a relational point of view.....

Your User has one account. This would be defined on your user model.

Your account belongs to a user. This is defined on your account model 

Then you can reference them by UserID.....


Not sure why a user would need a has many account relationship. 

Just my two cents without seeing your entire application. ",1525638198.0
ProfessorRekyl,"Hi and welcome to Sequelize! I use it for a project and find it both useful and sometimes missing out. Your question has nothing to do with associations, right? Anyway the easy answer in your case is that there can only be one Account-model with a specific name. Then you could simply add, like you mention:

    'Account', {
        name: {
            type: DataTypes.STRING,
            unique: true,
        },

Now when anyone tries to create a new Account (or update!), if the name is already taken, it will fail.

I dont understand your first or second way, but the ""third"" is one suggestion.",1525633255.0
bichotll,"Thanks. That was useful for me 👍
I already use PM2, but it's good to read other people's experience.",1525618565.0
l30nid45,i discovered pm2 a few weeks ago and love it.,1525649951.0
graycatfromspace,Seems like this only makes the app more complicated.,1525687434.0
cahva,"We use this:
https://www.npmjs.com/package/easy-rbac

Usually you will need/want a 3rd role ”guest” which is for api calls without authentication.

Oh and you can simply add role field to user. You can save that to json webtoken (jwt) or set the user when authenticating against the token. Check how passportjs does this.",1525615582.0
hkd987,Since you are using JWT. Add a field to your JWT with the user role. Then handle your views in your React/Vue.......v-if=“role === admin”,1525641502.0
YoungBubble,"You need authorization on your front-end as mentioned in another comment. You can do this by indeed adding role value or roles array to your json web token.


If I understand it correctly, you need 2 ways of authenticating.

* 1 call to authenticate via googleOauth
* 1 call to authenticate with a normal user/password (own database).


Both calls need some sort of mechanism to link your user to a user in the database. Either the google account id to an id in your application database or the admin user.


The middle layer to authenticate users for each call can be written with the passport package. 
This is like an interface to login and to return the user to your calls itself.

So: api call -> middlelayer to authorize using tokens -> real function that returns the result of the api call.

In between the middlelayer and the actual function you can check for authorization (roles).

Check out the passport strategies ;)",1525770014.0
Ace_Emerald,"ESM native support in node is still experimental, so I'd still use commonjs. The benefits of import (static dependencies and tree shaking) aren't as valuable for backend code, so I'd stick with the supported native commonjs.",1525619166.0
mcaruso,"If you've already got transpiling set up (babel), there's not really any reason not to. Compatibility doesn't suffer (because you're transpiling it anyway), and your code will be more future proof.",1525619029.0
lachlanhunt,"Node project: Use [esm](https://github.com/standard-things/esm)

Browser project: transpile esm with webpack and babel.",1525683124.0
BehindTheMath,"You need to use a bundler to bundle everything into one file which you can then use in a script tag.

Look into Browserify or Webpack. ",1525608938.0
cahva,"Bundler is ofcourse the first choice but theres also unpkg which lets you test packages quickly
https://unpkg.com/",1525640983.0
warchild4l,Imo async/await and promisies are by far best features in new javascript ,1525617672.0
monsto,"If this is truly ""everything"" then this is an indispensable reference list for the newbie.

Good link.",1525632454.0
JonnyBoy89,Async/Await is truly revolutionizing how I build Node stuff. Really neat when you’re interacting with multiple api’s or even making several calls to the same api for different information,1525659727.0
Dokiace,"sorry newbie question, does ecmascript 2018 include all the feature from 16 and 17 ?

also what is the es6 ? 

the naming is kinda difficult :/",1525756035.0
beeskneecaps,You should contribute to Joe! https://github.com/karan/joe,1525616694.0
OzziePeck,What terminal is that? I need to know ,1525694926.0
acylus0,How does this compare to ava.js?,1525602105.0
aequasi08,Would totally use this if it didnt use uWS. Actively avoid using any software that alexhultman makes. ,1525588147.0
nothingduploading,It's nice to see more crypto coming to js space.,1525571430.0
Sinlessdude,"Congratulations man, I’ll definitely take a look ",1525573781.0
stan3666,"Cool man, nice work! Checking it out now!",1525577192.0
GoldenRetrieva,Thanks!  It will take awhile for me to finish but I will definitely give you feedback when I'm complete.,1525613788.0
felubra,"This is a nice material! I'm taking the course now, but I will send you some feedback anytime soon. Thanks!",1525615538.0
babygetoboy,Same here! Congrats! It will take a bit but I'll get you some feedback!,1525621173.0
Doctor_Spicy,RemindMe!,1525624449.0
wbdvlpr,"You are welcome!

But what is the question?",1525551890.0
franciscopresencia,"I created a basic chat tutorial in here: https://serverjs.io/tutorials/chat/

You would need to modify the front-end quite heavily. If you follow the tutorial along, you could include a 'id' of sorts in the message such as this for individual messages:

    socket.emit('message', {
      to: 'socket-id-here',   // Added this; retrieve however you see fit in the front-end
      user: cookie.get('user') || 'Anonymous',
      message: message
    });

Then handle it in the back-end like this:

    const sendMessage = ctx => {
      // When sending to someone specific https://stackoverflow.com/a/24044540/938236
      if (ctx.data.to) {
        return ctx.io.sockets.connected[ctx.data.to].emit('message', ctx.data);
      }
      // For everyone else otherwise
      ctx.io.emit('message', ctx.data);
    };

All of the other front-end code will be up to you, and you need to have access the socket id of whoever you want to talk to in the front end as shown in the first snippet.

Note: this is a starting point; of course you'd have to add quite few more things as you asked such as files, mongodb, etc.",1525724623.0
codearoni,"[node cluster api](http://www.acuriousanimal.com/2017/08/12/understanding-the-nodejs-cluster-module.html)

[nginx revproxy](https://medium.com/@utkarsh_verma/configure-nginx-as-a-web-server-and-reverse-proxy-for-nodejs-application-on-aws-ubuntu-16-04-server-872922e21d38)

Based on your experience I believe you could fill in the blanks for yourself, but the two resource above should shed light on what you're trying to do.",1525551021.0
alsiola,"[pm2](http://pm2.keymetrics.io/) for process management and load balancing, with nginx for reverse proxy will get you most of the way.",1525560047.0
Sinlessdude,"The simplest solution would be

Nginx: proxy
Pm2: process / cluster manager

Overtime you might find Nginx is better equipped to handle clustering, which would mean using pm2 to just run the app on a cluster of different ports.

But using the cluster functionality in nodejs is nice and very easy.  Node can share file descriptors across processes.

Another “key feature of a fully optimized and extensible back end system” is managing environments.  A way to do that is have a Json or yaml file separates by environment.  So have some fields load under environment A and some in environment B",1525566900.0
thajunk,"Well i see you are mentioning putting everything on a single server.

To me, a modern backend involves AWS or another cloud platform and plans for horizontal scalability and redundancy. If setting that all up sounds intimidating, you could look at PaaS like Heroku or AWS Elastic beanstalk.

If you are dead set on a single server then a tip for thinking of the future would be to use nginx in front and docker compose to spin up multiple instances of your node app without hardcoding any of the multi processing logic directly within the app. ",1525577875.0
zokker13,"> I want to know what these concepts are that I'll need to do this. If my site crashes, how do I auto-reboot it? How do I branch it into multiple processes to optimally handle load? Are there times I wouldn't want to do that, given this server will be hosting a huge buttload of projects?

If it crashes, you most likely want to restart the instance. There are times you don't want this. Say when your sever needs more load to start up. In that case, you might murder yourself while trying to self-heal.

But yeah, when we talk node, you don't want to do heavy process work anyway so that _should_ be fine.

> Let's Encrypt for SSL

Seems fine.

> helmet(?) for security(?)

Ya, about right.

> that thing where I branch processes, some sort of process manager to branch the processes and auto-reboot them, some sort of error logging at some level.

For logging, you can use winston or pino.
For managing the process, you can use whatever you like. systemd allows multiple instances, so does pm2. It all comes down to taste.

I suppose pm2 is easier to set up when working with node. It also makes it possible to (seemingly) have many applications use one port. So there is some kind of magic in there :)

> Do I want to throw up an nginX server also for the static files, or can Node forward those just fine without bringing in another software package?

You can use node but keep in mind that nginx is literally made for this job while node only knows parts of the job.
So nginx has better performance and probably better SSL configurations available.


Also a general note: Try to use a microservice oriented approach since you will fail here and there and microservices allows you to ease out errors more easily without rewriting your entire stack.",1525596057.0
omermindivanli,"I am not a back-end dev. I mean i know some of basic stuffs. As far as I know, the concurrency is one of the key point of back-end development. 

https://en.m.wikipedia.org/wiki/Concurrency_(computer_science)",1525555472.0
,[deleted],1525541896.0
Eric_S,"I may be overlooking something, but xhttp on the client side is probably a wrapper for XMLHttpRequest, which is strictly send and receive info, it doesn't directly affect the browser's display.  You'd have to do something with the return value in order to get it to display.

There's a stack overflow question talking about this [here](https://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit).",1525541698.0
Lambotherambo,Why are you using xmlhttprequest there are juch better ways lol. Nodes own request module is better...,1525586247.0
Sinlessdude,"If I had to guess, wrong password ?",1525520654.0
ChubsTheBear,What error is being returned?,1525522369.0
ccb621,Does the user have access to the database?,1525523445.0
TWGeoffington,"Try adding the port number after localhost.
""localhost:5432/karls""",1525524588.0
TheLightConductor,Do you have any symbols in your password that would prevent it from parsing the connection url properly?,1525524796.0
fullstacknoslack,Try using -U postgres and your password. It's the default user,1525528192.0
Lambotherambo,I havent used postgres but I have used mysql and mssql on node and modt likely you have some processes denying permission to your api,1525568645.0
killerbake,"> We are using Grammarly to help us writing this article

lol
",1525529034.0
,Been using bcyrpt with JSON webtokens for validation. Is Passport a better strategy for validation?,1525540531.0
devilinbluedress,"Just wondering, I used this exact same stack accept with MySQL, but I didn't actually understand the purpose of passport.js. What's the purpose of this middleware (believe me, back then, everyone was using it, but not a very clear explanation). 

Isn't auth just getting data, crpyting and uncrypting it? Just seems like passport is an extra step between everything.",1525540242.0
baus,I came here to complain that there is no standard library for handling user registration and management for Node. I think it is crazy that everyone is rolling their own. Maybe this work should be split out into a library,1525571783.0
sevenyearoldkid,"Hey I think you’re going about this all wrong. There is almost zero use case for executing html sent by another user, as it’s a massive massive security problem. What happens if I just manually send a script tag over the connection? CSP headers will help you there but you won’t be completely safe. 

For things like this you want to use variables to track your data. An example would be an array of simple initialized values, each of which maps to an html element. Follow this thread even a little and you’ll see why things like React, Vue, and Angular provide so much value. I would highly recommend setting up a React app for this, otherwise you’ll probably have an aneurism before you finish a prototype. 

FWIW I’ve spent quite a bit of time syncing incredibly complex things over socket io, so feel free to hit me up if you want a rundown ",1525508106.0
1st_page_of_google,"Server-to-server would be a bit of an atypical architecture. There are better solutions for pushing events between servers especially if you want to go beyond just 2. 

Redis and RabbitMQ are very typically used in this type of situation. 

If you are set on using socket.io server to server. All you have to do is setup a socket.io server on each. Then use the socket.io client on each server to connect to the other one. Effectively each “server” is a socket.io server and a socket.io client.

While the above strategy of having a client and sever on each ""server"" is not strictly necessary since a websocket is a 2 way pipe. I think it's the way you'd get the most code reuse between your two servers.",1525497269.0
geon,"I would assume it is how sockets work, since it is very unlikely that Node has it’s own tcp/ip stack built in, but just uses whatever comes with the os. 

That would also make it possibly os dependent. 

Why do you specify the local port anyway?",1525510086.0
imizaac,If you're trying to connect clients. You might benefit from webrtc. ,1525514933.0
youlikethaaaat,"Just due to how the TCP stack works, basically same concept as TCP hole punching (same trick but within different NATs), https://en.m.wikipedia.org/wiki/TCP_hole_punching

Wouldn't personally rely on it, as it is very dependent on the timings.

It's better to use WebRTC or have one of the nodes act as a normal server.",1525538200.0
Tvde1,Is anything surprising you?,1525526593.0
dahlesreb,yep. that's how every web app works. the backend (node or whatever) serves the html/css/js used by the frontend (browser).,1525460525.0
trout_fucker,https://github.com/OwenRay/Remote-MediaServer,1525460564.0
Amb1valence,"Check your PM's, I'm wondering this as well. Gotta take it this weekend and know basically nothing about node :------------)",1538253755.0
Soze224,"Any help on securing GET/POST requests?

With the only security to use is the API key included in the call? I was thinking something of using a private-public key but this requires encryption from the requestee?

Most of these solution use Login credentials which from what I understand, means two requests or a persistent connection. ",1525458215.0
MyPostsAreRetarded,"Serverless server still uses a server.

Stop this fucking nonsense. ",1525454452.0
umib0zu,"So.. you have a component that needs to store and share data with another component.

The answer to this question is always [Redux](https://redux.js.org/).
",1525446900.0
TheOneRavenous,"It is not a limitation of cookies with regard to heroku domains. 

If your node app is fetching data for your react app then you don't need to set cookies on the node server. Though you may want to whitelist your react app so that the node app is only accessible to the react app.",1525464230.0
DanielFGray,"I'll take the downvotes, but man I can't wait for mongo to finally die",1525580581.0
ecares,Joi,1525420574.0
LewisJEllis,"The three options to be aware of/consider at the moment are [joi](https://github.com/hapijs/joi), [ow](https://github.com/sindresorhus/ow) and [superstruct](https://github.com/ianstormtaylor/superstruct).

Joi was the go-to pack-leader for quite a while, and is definitely still the most popular, but superstruct and ow have entered the scene recently as additional strong options. 

The most notable difference is that ow and superstruct provide ~~detailed helpful error messages when validation fails, but joi just gives you a pass/fail~~ an easy way to break out and write your own predicate functions as needed, but with joi you'll need to write an API extension, which isn't as straightforward. There are other differences, but I would say just look at the three and pick whichever API you like better. Joi and ow have a very similar fluent-style chaining API, while superstruct feels a little more like a schema or type definition. I personally use superstruct in a GraphQL codebase, and it works nicely.",1525423292.0
blablapolicja,Ajv - if performance is important ,1525429102.0
junctionssss,I use tv-4. It is based on json schema and I am satisfied with its use and performance.,1525456688.0
erulabs,"If you're looking for something deeper than type assertion (ie: isUUID, isEmail, etc), I have used Validator a ton - https://npm.runkit.com/Validator",1525459558.0
bodybybill,chai is an extremelt intuitice assertion library that may be just what you are looking for,1525419811.0
Redundant_Randy,"As a peer to peer protocol, Webrtc doesn't normally do anything on the server, all the server does is provide the clients with the contact information so that they can connect with each other. Communication over webrtc goes from client to client bypassing the server.

If you want to broadcast messages to clients in a chatroom, the server has to store client connections and the chatroom information itself.

The server could connect to each client using either websockets or it's own webrtc connections. Their are many websockets or webrtc client libraries an npm you can use. I never used webrtc on the server, but for WebSockets, I have used [socket.io](https://socket.io/). [Socket.io](https://socket.io/) has rooms built into it if you want to avoid writing the chatroom management code yourself.",1525425789.0
max_kek,there is no room and no server - what do you mean? you want a server acting as a hub for group chats? why not use plain web sockets then?,1525421163.0
ggolemg2,"You'll have to adopt the lobby concept: keep track of a virtual lobby (your web socket server) that each peer uses as a means to join the presented room of their choice, in each room the peers are connected via webrtc to eachother, you'll have to keep track of that server side as well.  You can do this all with sockets ws or socket.io or a few others.  

Have a look at this: https://github.com/guybrush/p2p-lobby-experiment",1525438918.0
ovaix_,"thanks for your feeback, I've sort it out, I was emitting an event to send message but on server side I didn't joined the room like this `socket.join('RoomId')`. after doing this i simply did [`io.to`](https://io.to)`(RoomId).emit('receive message', data.message);`

this worked for me.  ",1525443994.0
jamrod0,"The node beginner book by Manuel Kiessling
Is pretty good, he's got a follow up that goes deeper too. ",1525406824.0
ResponsibleLife,[Mastering Node](https://www.amazon.com/Mastering-Node-js-server-side-applications-efficiently-ebook/dp/B078MNXC78/) is pretty good.,1525409658.0
ecares,"Just read the sources, they are not hard and you'll save money ",1525420598.0
yeamanz,"Erm, I'm not the best at explaining but I'll give it a shot.

`router.get('/:name'...)` defines a route you can call like ""api.example.com/SOMETHING_HERE"". With your code, you define the following:

    router.get('/:name'     // api.example.com/SOMETHING_HERE
    router.get('/:position' // api.example.com/SOMETHING_HERE
    router.get('/:branch'   // api.example.com/SOMETHING_HERE

You see the `SOMETHING_HERE` part? Your code can't _automatically_ determine if you passed in a name, position, or branch. The code itself is fairly..ignorant of what you're passing to it. All it cares is to grab a string after `/`, then determine where it goes. 

When you call `/developer` for example, ExpressJS will go through the routes ""one by one"" until it finds a match. Since '/:name' is first, the router will check if it matches and go ""Yep! it's a string after `/`!"", then it will run the function for `/:name`.",1525398684.0
Tatsuya-,"I could be wrong, but the way your endpoint is written, wouldn’t /:name and /:branch technically be the same route? 

Try changing the routes to 

‘/name/:name’

‘/branch/:branch’ 

That way they are 2 distinct routes ",1525398485.0
mansfall,You're working with relational data. Don't use mongo.  Possible? Yes.  Advisable? No.  Use a relational database like mysql or postgres.,1525414954.0
Star-Lord10,Build a REST API with node,1525397152.0
Commander-TeeJ,Coding train had some stuff on it,1525395582.0
twlatl,Search Udemy for Anthony Alicea’s course on NodeJS. It’s straightforward and has a bunch of small projects you will build. It’s a great course to get you up to speed quickly. MongoDB is pretty easy to grasp. Angular is not something you’re going to be able to get a good grasp on in 48 hours. ,1525397164.0
ethcoder,Watch all the videos on teamtreehouse ,1525414599.0
mitchie_smith0417,"If you're just getting into Node and are looking for a quick project, I'd suggest trying this tutorial:

[https://www.turbo360.co/tutorial/node\-&\-express\-intro](https://www.turbo360.co/tutorial/node-&-express-intro)

It covers most of what you need to create a website with full functionality, including Mongo DB integration and user handling. Good luck!",1525547087.0
squatsquadnl,"Is JavaScript an interpreted language? 
I read it is a ""semi"" compiled language. Right before the execution of a program, the JavaScript is compiled by the engine",1525385671.0
flipperdeflip,"I'm curious if using something else then a regular Array with Numbers would be faster (or not, and why). Maybe some TypedArray flavour or something.",1525417688.0
ggolemg2,Is opengraph or Twitter card that common?,1525397926.0
OzziePeck,You need to Reject the promise in an async function instead of just throwing it.  ,1525695704.0
thescientist13,"While I’m a Yarn fan personally, npm has had lockfiles since v5 which came out a while ago, and it’s also the default behavior.  That said, a more compelling argument could be made comparing the determinism of their respective algorithms and also the behaviors of their respective commands in regards to managing the lockfile (hence why I prefer Yarn).

It also bugs me a bit that the npm (CLI) team never gets any credit in these articles for being a two person development team, getting compared to all the resources put behind something like Yarn.

Also, it’s sem_ver_, not var, as it’s shorthand for semantic _ver_sioning.",1525382491.0
,[deleted],1525384382.0
l3l_aze,"Mostly reliability. With `yarn` I can use the same exact code across Windows, Mac, and Linux without issues (provided I somehow provide cross-platform support where it's necessary and isn't already provided). `npm` on the other hand has not been able to properly install the dependencies for most of my projects for well over a year, or update itself, or etc, etc. Lol.


Edit: again, thanks for the downvote with no attempt to help correct whatever stupidity you think there is.


This sub is garbage.",1525376127.0
ethcoder,No need to use yarn anymore since NPM is faster now ,1525414638.0
iends,I want to see the advanced tutorial for people who've been using node for 5+ years and are not afraid of C++.,1525376342.0
still_conscious,"Here are two good resources for a more in depth understanding of Node and the event loop:
&nbsp;

Danial Khan, a Node diagnostic team contributor has written an excellent Medium [article](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c) . 
&nbsp;

The [Libuv documentation](http://docs.libuv.org/en/v1.x/design.html) about the event loop.


",1525382823.0
mothzilla,How is the NodeJS event loop different from the javascript event loop?,1525377572.0
techmighty,how does a single thread handling one request at a time is more efficient than multi threads handling multiple requests? ,1525420135.0
skeliskull,Why does this sub only share tutorials for node? I think most people here understand a lot of this stuff and want to see more than just articles for beginners,1525368523.0
ethcoder,I won’t hire a Node.js developer that doesn’t know how the even loop works.,1525414518.0
cooliobing,"> GraalVM contains a backend implementation of the Chrome Inspector debugging protocol. That protocol, designed originally for JavaScript debugging, can be used to conveniently debug all GraalVM languages

:O ...did not know this. that's a very familiar and convenient way to debug performance. GraalVM is definitely appealing to enterprises with legacy Java/Ruby code. the Java ecosystem has a wealth of well maintained, time-tested data structures, utilities, and db drivers. combining that with the productivity of node is an exciting prospect.

Anyone here have their experience with GraalVM to share? One hickup for enterprises that have invested heavily in microservices with large fleets of tiny machines is that this would require beefier machines. We have legacy code written in different languages interop over the network (sometimes same machine/docker, sometimes over a remote bus/Kafka). This gives us more flexibility in deployment to different sizes of machines and manage costs. 

Is my assumption that GraalVM requires more compute and memory resources compared to node correct?",1525371421.0
OzziePeck,"Rethink the name, that made my super-cringe. ",1525695871.0
OzziePeck,Why are you using sync functions when creating the folders and files? Not checking if they already exist. No error handling? Right.. ,1525695993.0
ecares,"Please, tell me why you do this?",1525358640.0
Ference,"Why not just use some server software like Nginx that's literally made to be a web server and reverse proxy 2-in-1? What about HTTP2 and SSL? Do you host it with pm2? If not, you'd also need a cluster mode to utilize all cpu cores of your server. With nginx you don't even have to worry about any of these.",1525339255.0
SomeRandomBuddy,Dear sweet baby jesus. Why god? WHY,1525361483.0
DanielAmorim,"You can do this with HAProxy easily. I use HAProxy for routing HTTP request, based in the URL path, to my services and balance the load for each service. See the following example:

    frontend all
    bind 0.0.0.0:80
        bind 127.0.0.1:81 accept-proxy #STUNEL PROCESSES SSL TRAFFIC AND DELIVERY AT PORT 81

        option forwardfor
        option http-server-close
        option http-pretend-keepalive
        option http-no-delay
        compression algo gzip

        acl url_app1 path_beg /app1
        acl url_app2 path_beg /app2

        use_backend app1 if url_app1
        use_backend app2 if url_app2
        default_backend app1

    backend app1
            balance leastconn
            fullconn 100000
            server s0 127.0.0.1:9600 weight 1
            server s1 127.0.0.1:9601 weight 1

    backend app2
            balance roundrobin
            fullconn 100000
            server b0 127.0.0.1:9600 weight 1
            server b1 127.0.0.1:9601 weight 1",1525347751.0
spmaster007,Good news for Heroku folks :),1525348629.0
Kardiamond,"I will try your method as soon as I can.

But last time I tried to reverse proxy my apps, my reactjs routing would be broken.

Did you try it with reactjs? 

I would also have issue with loading my case/js files in my index.html.",1525338668.0
ccb621,"Protip: if you ever find yourself running commands in ""Program Files"" or ""Program Files (x86)"" you probably shouldn't be doing that.

With a few exceptions for commands that should be installed globally (and their READMEs will tell you if that's necessary) `npm` should be run inside your project directory (e.g. `C:\Users\ccb621\workspace\reddit_bot`, or wherever your project directory/repo lives).",1525328817.0
sockjuggler,"> all i want is to install in where npm already exist

I don't think installing in that directory is actually what you want. It also doesn't entirely surprise me that there would be some sort of conflict trying to install packages there. 

`node_modules` is intended to live within your _project_ directory. Instead of trying to run/use npm from within node's program files directory, just create a new directory for your project somewhere in your own Users directory and run the command there.

Did you have a more specific reason for wanting to install there?",1525322692.0
MyPostsAreRetarded,First problem: Using nodejs,1525315494.0
SomeRandomBuddy,Fuck GoDaddy,1525281714.0
SomeRandomBuddy,How is this trash clickbait related to node? Delete this,1525281907.0
davidmdm,Why though? I mean it's 3 lines of code. Is this something a developer shouldn't be expected to know how to do? This needs to be a dependency ? ,1525364651.0
,[deleted],1525293448.0
mattboutet,"You're looking at one of many options for connecting to your MySQL DB.  If you're looking for something with more features, maybe check out Objection - https://github.com/Vincit/objection.js/ ",1525274600.0
confuserr,"https://github.com/mysqljs/mysql#escaping-query-values with caveats

Alternatively, the mysql2 module (which has a mostly backwards compatible API with mysql), supports prepared statements https://github.com/sidorares/node-mysql2#using-prepared-statements",1525277746.0
estacks,"It's a Node.JS driver, you don't run it from people's browsers. You should be sanitizing anything hitting that driver on the server side.",1525288448.0
flipperdeflip,"The module you link runs server side, it's basically similar to the suite of PHP mysql_xyz functions. You would create a public api that uses this, so you need the same precautions as you have in your PHP equivalent and most definitely do not allow users to submit raw queries. ",1525355480.0
Doctor_Spicy,"I'd do all testing locally, on my machine, before deploying to Heroku.",1525292965.0
aloisnoob39,"Okay now it works, I had to put it private on facebook for dev to try it ! :D",1525333037.0
SomeRandomBuddy,"“Useful” but no sub commands and manually-generated help output? That’s just torture dude. Contents look good but these two topics are essential for most “useful” CLIs. Yargs seems like the king right now and supports both, while still being insanely flexible yet robust ",1525304724.0
fl0w_io,"Instead of putting `spinner.stop()` within both `try` and `catch` clause, use `finally` to DRY that sucker out :)",1525289906.0
paulsocal,"Hey OP, check this out... wish I found this before I built and shipped a cli tool. Definitely will use this for the next one I build.

Disclaimer: I have nothing to do with it. Just love the idea.

https://github.com/vadimdemedes/ink",1525300308.0
devilinbluedress,There's a lot of good stuff on this sub that I keep skipping over. Thanks OP!,1525307084.0
aequasi08,Should also check out [Heroku's Oclif](http://oclif.io),1525313801.0
segphault,The library for the animated spinner somehow manages to pull in 20 separate dependencies. 🙄,1525326784.0
josht,Why reinvent the wheel with Node.js?,1525286286.0
segphault,"The RocketChat app, which has 17,000 stars on GitHub, unwittingly pulled in the malicious dependency via mailparser : https://github.com/RocketChat/Rocket.Chat/issues/10641 It appears, however, that the compromised code was not an active code path in this case. ",1525308021.0
grinde,Here's npm's initial report: https://blog.npmjs.org/post/173526807575/reported-malicious-module-getcookies,1525309518.0
up73k,"Try to create text index and use $text query operator in MongoDB:
https://docs.mongodb.com/manual/text-search/

If you need more than simple mongo search, try to use ElasticSearch for queries in the dictionary, with sync MongoDB. For example, one of dozens way to implement connection MongoDB and ElasticSearch:
https://www.mongodb.com/blog/post/how-to-perform-fuzzy-matching-with-mongo-connector

Also maybe interesting:
http://ilearnasigoalong.blogspot.fi/2013/10/efficient-techniques-for-fuzzy-and.html",1525262644.0
PM_me_bacon_sandwich,"Short answer: you're over-engineering this. The amounts of data involved are small enough that this isn't going to be a problem. KISS principles apply.

Long answer: 
If server side resources are the problem, you could cache some data in the web app to minimise calls to Mongo. Some words in the dictionary are likely to be returned much more frequently than others.

If HTTP requests and bandwidth are the problem and the same user often requests the same words, you could also cache on the client side using local storage.",1525301805.0
hair-plug-assassin,"No, but there are a ton of wrong ways.",1525256459.0
ilja903,"Speaking about architecture in 5 sentences:
 
Do not store any state in the app, store everything on the client and/or in database.
 
Start writing tests from the beginning.

Group files logically, either by tech layer (model, controller, dao etc) or by functionality (booking, accounting, user-management). There is no easy answer!

About your routing problems:
https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/routes
",1525274721.0
columferry,Look into nest.js,1525285839.0
lnplum,"No but look into the `Router` function to create child routers that let you organise your routes better. I generally go for one router per file. Note that you can also mount child routers at the root of your routing tree, you don't have to give them a prefix path.",1525258057.0
ktuu,"Many applications and frameworks follow the MVC or somewhat MVC-ish architecture, where the Model contains your business logic and data access (domain objects, transfer objects, DAO etc), the Controllers map HTTP requests from routing to Views with the corresponding model (HTML or JSON). A layer of Services maybe added to manage more complex cases where you need to handle multiple domain objects to fulfill the request.

Edit: forgot to mention that the same pattern often repeats also in the frontend, where you have template data (model), HTML/UI components (view) and the page scripting (controller).",1525259027.0
geon,"No.

All projects will have their own needs. But you can organize a large router with sub routers. ",1525255241.0
theadammorganshow,I have a Node (TypeScript) API [here](https://github.com/theangulartutorial/lets-get-lunch-api) that may be worth looking at.,1525265661.0
Lost_sand,"Yes, follow your feelings",1525407311.0
isakdev,"My bootcamp thought us to make different express servers for each api for example a standalone auth server, api server, file server etc.

They all have their own main js file with express and each route calls a controller file which does logic and/or sends request to model file which writes to db and returns db info to controller and it ends there with the controller sending the response.

This way you can scale your website by moving any api server to another host, change the database for ex. from mongo to sql or another api by just editing the right model files etc, which gives you lots of freedom down the road.

Now this is definitely an overkill for a single developer side project but I believe this is how big companies have their node backend structured.",1525268097.0
Capaj,if it's bigger than 1000 LOC use typescript. Other than that try to keep it DRY and KISS and you'll be golden.,1525261719.0
allhailneuveville,Curious to know too,1525254742.0
philipodev,I created https://github.com/hot-controller/hot-controller to easily deal with routers/controllers in a midsize/larger node application.,1525258254.0
sotimting,Look at how the Kraken framework manages this with its express-enrouten middleware.,1525262804.0
WakeskaterX,"Mostly it's just organization at this level.  Like someone else said, routers are a good way to start organizing your code. 

Do you need microservices? Probably not unless you're doing a bunch of different things on the backend.  

We use microservices (really just services, some not so micro) at work, but that's because we have a bunch of communication pipelines between servers, APIs, hardware etc.  Microservices comes with a lot of system architecture too, such as how are your services going to discover each other / talk to each other / etc.  Lots of tools out there and lots of options for that but it can get complex fast.  We use Consul, RabbitMQ and Protobuf as just a few examples of discovery/communication between services.

But again, at this point you could probably focus on finding a structure for your code that would let it grow and still be organized and useable.  That's a good place to start.  Single purpose files, grouped route files by resource modified, etc.  Depends how granular you want to get, but there are lots of default scaffolding examples you can look at out there to get a gist of how a complex project is organized.  (Take a look at Yeoman and see some of the default generators for node/express to get some ideas)

I'd say honestly knowing how to properly structure a single project is more important than jumping into micro services.  If messy code/organization is spread out in a bunch of different places it just makes it even harder to manage. ",1525269980.0
misterlively,"I have success with small or large projects using the structure below.

In my main src directory I have a app and a routes file. The app file sets up middleware and starts the server. The routes file has the root router and imports all other routers. There is a folder for each entity (users, todos, ...). Each entity folder has a routes file (user_routes) which just define the routes and middleware for each endpoint. The last middleware for each route should just call the service (user_service). The service has its dependencies injected which will likely include a dao/model (user_dao or user_model), and possibly a service from another entity. The overall goal is to keep the routes and model/dao flies as basically just configuration and keep all business logic in the services. With a decent dependency injection pattern, unit testing the services becomes a lot easier. The only things that go in a lib/util folder are pure functions that have no dependencies. You will also have higher order services that just compose other services and have no model/dao.

I don’t have a clear example at the moment, but I have a demo project I’m refactoring that I will link to when it’s done.",1525271013.0
ribo,"Good news! Treating discrete API functions like ""small personal projects"" is basically microservices.


The hard parts:

1. Choosing which collection of functionality goes into a single microservice (namespacing)
2. Keeping your development toolchain mostly consistent across microservices (semantic-release? learna? yarn workspaces? swagger? eslint? esdoc? babel?).
3. When you need to distribute state beyond the functionality of a database (e.g. pub/sub, gRPC, etc...)",1525274001.0
franzwong,What are you asking about? application or infrastructure level?,1525281672.0
lemon1993,"There is no “Pythonic” equivalent in Node. It’s down to the developer(s) to structure the project how they see best. There’s a million different Medium articles on the subject and no one can seem to agree!

You could check out express-generator for the Node side of it. I’ve worked on quite a few projects that have began life from there.",1525284563.0
ChrisCodes,"I tend to structure my code like this \(This is a Angular \+ Fastify server\) where its seperated based on its functionality ie : http or sql?  controller or middleware or routes?  interactor or model?

[https://github.com/chrismpettyjohn/Heroic](https://github.com/chrismpettyjohn/Heroic) ",1525296244.0
load_up_on_hummus,"Just realized I think can pull this off by setting up a single route and using the params of the request object to render the correct data to the template view.

If you lie awake in bed for enough hours, you’ll usually come up with something.",1525247546.0
bichotll,You may want to check Feather js? It's kind of a helper for Express. It basically makes things easier.,1525247268.0
Cuel,Why not just make it a parameter in the url?,1525350958.0
camelCaseLiberal,"Lol one thing you’ll learn quickly is that developers don’t usually give a damn about noobies.

Nose high, peasants low.

Keep pushing. Another few years of persistence you may surpass the losers spewing negativity instead of answering simply.

Obviously he is new. Let him be.",1525934092.0
WeaponizedMath,"Really? I mean... Really? It takes all of 2 seconds to learn Express and half a heartbeat to add a route.

Express is a simplified connect which is a simplified node http server which is the simplest web server you can get... How fucking carebear does Dev need to be for you?",1525292123.0
LetReasonRing,"Can the code in question, an example (or more thorough description) of the result you'd like to achieve and, the actual error you are receiving, and is possible, either a link to the url axios is calling or some sample data that it would be serving?

A description of the problem is helpful, but without the code and more detail we can only take shots in the dark. 

",1525219711.0
mclovin4009,"Just to let you know, you can call the above API from your client also and display it. Anyways, as per your question, loop over the ""data"" key as it is an array.

    response.data.forEach((game)=>{
        console.log(game);
    })",1525252928.0
lokomotivan,"If by ""extract"" it, you mean loop true it, u can use a for loop:

    for (var key in response) {
        if (response.hasOwnProperty(key)) {
            console.log(key);
        }
    }

or

    for(var i = 0; i <= response.lenght; i++) {
         console.log(response[i]);
    } ",1525216903.0
Aurovik,"Here’s a big win for me ; no more “well, it worked on my machine”.

You’re always certain what environment your application will be runnjng in.",1525200333.0
vim_vs_emacs,"- docker lets you namespace your application. So you get easier multi-tenancy, ie running multiple applications on the same system. For eg: if your app relies on node 0.10 and another on 9.8, it is quite hard to get both working together (nvm might work, but such tools are not really meant for production)

- yes, if you switch to docker, you need to make changes to your app hosting infrastructure. 

- docker also makes testing easier, atleast in CI environments

You don't have to switch - just like any other tool you need to evaluate and decide if the benefits it provides are worth it.",1525197646.0
AbsoluteZeroK,"Here are some things that I consider ""wins"" for going with docker.

- You no longer need to worry about different environments. Your environment is docker. This avoids someone accidentally using a node 9.x feature when production is running 8.x.

- If you use something like docker compose you now have a namespace for everything to do with your application. You can easily isolate all the resources you need while developing and access them very easily.

- Scaling becomes very easy. Just adopt something like Kubernetes and scaling any part of your application becomes trivial.

- Demoing the product for clients becomes much easier. As long as the computer you're doing the presentation on has docker, you're good to go.

- Unboarding time is reduced greatly. No need for your new programmer to figure out everything they need to install, they just install docker and they are good to go.

- There are a lot of ""sidecar"" type containers you can use (or make your own) that can help with development. For example, I have a container that I can sidecar into my docker compose or Kubernetes setup that will keep a database log and lets me quickly roll back to some other point I was at during that development session. Very useful for debugging database things. 

- Almost complete freedom as it relates to hosting. If you don't like your host you can pick up your containers and ship them somewhere else without being tied to anything they do.

- Makes it very easy to do microservices both in production and development. I'd even say it encourages it.

- It's honestly less work dealing with Docker containers than ""Real"" infrastructure once you practice with it for a while. Instead of worrying about physical machines, or even virtual ones, you just care about how many of each image you are running in each availability zone. Other than that you just make sure you have enough resources to run what you have.

- Monitoring is straightforward. There are lots of different approaches to it, but getting up and running isn't hard at all (it's dead simple with Kubernetes).

- It makes managing secrets and such very straightforward.

- You can bring it in how you see fit and incrementally if needed. ",1525214190.0
50653,"For what it's worth, if I'm developing a solo project, I don't bother building my own Docker containers. It's a lot of work and it's overkill when you're solo. It's one of those ""good luck with that"" kind of technologies. Meaning once you start using containers, there's a lot of other related work you'll need to do, just to have the same development experience you had before containers. (from your testing strategy, to the debugging process, to publishing and deployment)

The benefits of Docker come in when you're on a bigger team, and you have a bunch of different projects using different dependencies and different release timing. Everything is so much more sane and organized with containers, especially for the release engineering team.",1525203897.0
softgray,"I think the main benefit is that in a team environment everyone is using the exact same setup. No more having to configure your machine to have the right versions of everything, or wondering why it doesn't work. Everyone just takes the dockerfile and uses the same thing.

I don't think it's that useful solo unless for some reason you want to develop in an environment that you don't want to install directly on your machine.",1525206239.0
Sinlessdude,"As has been mentioned, docker allows for the seamless creation of reproducible environments for teams of developers.  It’s very useful for continuous integration servers to run unit or integration tests.  As long as the docker file mimics what you see in production.

The team I work with does not use docker in production, but we use docker extensively for running tests triggered by Jenkins, again it’s to ensure clean and reproducible environments can be created easily.

Another advantage of docker is maximizing the infrastructure space a company has.  You can run N different versions of node on the same machine in parallel, in a very non invasive way.",1525208868.0
andvgal,"**For development:**

Docker is quite intrusive to OS and its network setup. So, I have to use a separate VM whenever I need to work with Docker. It eliminates some benefits.

Also, it increases network usage at image build time (npm/yarn install). There are techniques for caching with separate step for package.json* (yarn.lock), but any package.json update leads to cache invalidation in rapid release world. That's very painful when you are on travel with slow and expensive mobile internet and need to make a small hotfix.

However, Docker is good to run less frequently updated runtime dependencies in development (e.g. database servers, message queue brokers, caches, etc.).

**For production:**

Containers are generally more flexible for deployment of frequently changing apps, but they do not fit production database operation. There are many fine moments of high-availability, proper shutdown/restore and upgrade procedures. That's why Cloud providers have special solutions for different type of database storage. Database should run on full featured VM or bare metal.

**Conclusion:**

I ended up creating a tool which achieves the same flexibility with any technology and still allows easy integration with containers for deployment. FutoIn CID: https://github.com/futoin/cid-tool 

To get almost container-level of flexibility and isolation for databases in production, I use cfdb+cfweb: https://codingfuture.net/docs/

These all together allow me to deploy even foreign projects with almost no time spent on configuration and further administration.",1525237805.0
unbihexium,Thank you for asking this! I was also struggling to see the overall usefulness of Docker.,1525259839.0
gaoshan,"It's definitely not worth it for individual devs \(or even very small teams, honestly\). The amount of time that can go into setting up an even remotely involved multi\-container app is not trivial in any way.",1525227096.0
,"Remember, that with all new technologies that are useful, everyone wants to to assume and act like they're useful for everything. There's always a time after release/adoption that you hear about it over and over and over and over again. Then it dies down and settles into it's perfect niche if there is one. I think there is for Docker but for the cases you listed probably not. So if it doesn't provide you any advantages for your environment then don't worry about. I'm certianly not :)",1525199919.0
papertowelroll17,Docker paired with docker-compose is extremely useful for connecting to dependency services.,1525266789.0
lepuma,"There's nothing about Node that makes Docker useful. Docker is useful for creating reproducible builds, which can be very helpful. That's about it.",1525307567.0
PM-ME-YOUR-SSH-KEYS,"It's not directly config, but [dotenv](https://github.com/motdotla/dotenv) seems worth mentioning for loading environment variables from file sources.",1525182993.0
AdrieanKhisbe,"Late answer but still, 
Maybe you can have a look to [Configue](https://github.com/AdrieanKhisbe/configue) that build up on nconf.

Disclamer, I'm the creator of this lib",1526043912.0
fads65,You can try sending the form via a POST request and scrape the result. I'd start by experimenting with postman and when you've found a way that works automate it using node.,1525172738.0
FullSlack,Why not just replicate the form submission via `cURL`? ,1525174136.0
Nefs,"An endpoint is essentially just a word for a URL, in context of an API.

`https://pokeapi.co/api/v2/ability/4/`

This is an endpoint. The `ability` endpoint, with `4` being the parameter.",1525165313.0
unflores,"In french they call them ""points of entry"", which I find to be a quite useful way of thinking about it.",1525169899.0
vlad1001,"Say you are setting up the Progucts page for your website where you will list all your products. The end point for that page will be something like yoursite.com/products

Then, an individual product page will have an end point like: yoursite.com/products/10 where the number 10 is a parameter ",1525166948.0
zayelion,"API Triggers, you can think of them as an function exposed via URLs.",1525192421.0
Ariquitaun,http://lmgtfy.com/?q=what+is+an+endpoint%3F,1525178120.0
Andrico1234,"The urls that your http requests go to. These act as access points to specific bits of data.

Sending a GET request to the following 'endpoint' would retreive the data you'd expect it to `http://api.spotify.com/artist/muse/album/origin-of-symmetry`",1525200055.0
lemondragon,Look into what REST API's are.,1525166285.0
MWrathDev,"Think of your codebase as a sphere, anything within that bubble you have control over.

Requests from outside the bubble are made, your codebase does it's best to answer those requests and serve up the data required, but once the data leaves the sphere you have no control over it.

That's why endpoint, point of no return, end of the road.",1525168124.0
vinnl,"If this does what it sounds like it does, you might want to check out [this repo](https://github.com/domcode/rafflers) of a Meetup group that includes rafflers in a whole bunch of esoteric languages. (Although they don't work with the Meetup API but require you to manually supply a list of participants, which I presume can be downloaded from Meetup.)",1525181627.0
codethesite,"So many front-end JS frameworks (React, Angular, Vue, Ember)... You do not need to learn them all. Just pick one.",1525160908.0
JavaScriptWorks,This is a few years out of date...,1525165251.0
mansfall,You just posted this the other day...,1525153944.0
zarrro,No you don't. The OAuth2 server in your case is Facebook. You can simply use passport.js with the plugins for local and Facebook login. ,1526414124.0
maplesyrupismajestic,out of curiosity do these ancillary patches ever get merged upstream?,1525148552.0
TheLemming,Wait... what? I thought node v10 just came out. What is this business?,1525131108.0
djslakor,Is there a simple way to do ldap auth yet in Hapi without using a 3rd party service?,1525185181.0
1-800-BICYCLE,Seems like like getting Node into Docker is easy enough. My problem is that we have so many system-level dependencies that I have a hell of a time getting to work with Docker. ,1525106311.0
aust1nz,"I don't understand Docker very well, and I have a simple node API that seems like it would be a good candidate for Dockerizing, except that I don't really understand how that changes my interactions with a database. Is this really simple? Otherwise this just seems like the first step, since node apps that run without any other related software are probably somewhat rare.",1525116661.0
ddwrt1234,Where do you stick your database and why?,1525326806.0
rduncan12345,"You might want to re-title this as ""Getting Started with containerizing..."" There is a lot missing from your examples in order to make them useable.",1525101358.0
warchild4l,"Yeah, because you are installing packages localy",1525086299.0
ethcoder,"Don’t push npm_modules to your git.
It’s meant to be installed on the machine.",1525414771.0
upendingpotato,Koa is my personal favorite,1525099688.0
theadammorganshow,I still use Express.,1525092281.0
devinivy,"We love hapijs, and added a bunch of tooling and conventions on top of it via hapi pal.

http://hapipal.com/",1525102144.0
CastorNotPollux,"I'm not sure what you mean by **_Dashboard_**. Like WordPress? If that's the case, you need a CMS, not a framework.

First result from Google: http://keystonejs.com/

If you define **_Dashboard_** better (screenshots, functionality, anything) we will surely be able to help you out.

---

 ^Edit: ^emphasized ^**_dashboard_**",1525103894.0
,[deleted],1525094585.0
Kilawaga,fastify seems to be pretty decent. working on a backend with it and so far I'm happy.,1525110960.0
ilja903,"With admin panel - django rest framework, keystonejs, strapi. You could build your own admin with any framework with admin on rest. Notable mentions - feathersjs, koa",1525207510.0
paladincubano,"Net Core Web API... Cross platform, fast, simple, free, high performance and the power of C#.
Entity framework, LinQ, Lambda, etc.
And getting better with each release.",1525100394.0
blue_planeta,"Express is great, but I also like hapi, give it a try. ",1525092895.0
codis122590,"What are you looking for? For a full mvc framework you could check out sail. 

I use express for basically everything though",1525092675.0
galkowskit,Express/Koa is my go to. Nest.js is also one that I really like.,1525100741.0
catNamedStupidity,Hapijs is promising though I stick to testify...,1525092759.0
duplex_penetratio,"Graphcool is really nice, bit learning curve but really worth it!",1525102000.0
cinnapear,"We use Koa for pretty much everything.  When we don't use it, the site/app is usually simple enough that vanilla Node works fine.",1525116019.0
img_driff,"I was using express but I'm using Koa in a new project I'm working on, 1st time using it, I'm really really enjoying it",1525554513.0
img_driff,Have you tried total.js? It's got a lot of things built in,1525554670.0
prabhakar_kevat,Did you decide which framework to use?,1535465994.0
2legited2,Have a look at Loopback 4 http://loopback.io/doc/en/lb4/,1525101933.0
zayelion,"Express, Resity, and Primus now a days.",1525095715.0
Londomain,"Without knowing your folder structure, try something like this:

       app.get('*', (request, response) => {
          response.sendFile(path.resolve(__dirname, '../client/public', 'index.html'));
        });

I had the same issue a while ago and if I remember correctly I had to 1) use path.resolve, 2) make sure that path was relative to the location of my server and 3) pass the index.html as the third argument

Sorry for the shitty code formatting, typing on mobile",1525087527.0
,Is the zip stuff asynchronous? Is it possible you're uploading the file to S3 before the contents of the zip get created/populated?,1525090776.0
danielstaleiny,"You might want to add length of the document so it knows when streaming is finished.  Put this to header where file is your buffer. 

 
   ` 'Content-Length': file['size']  `


or maybe `Content-type:` 
",1525078548.0
vv1z,Stub the db and write tests using your tool of choice?Why would DAO need to be tested differently than any other code?  [Jest](https://facebook.github.io/jest/docs/en/manual-mocks.html)  should be able to handle everything you outline above ,1525037602.0
vv1z,You should generate any dynamic SQL using pure functions and test that logic in isolation.  Validating that the SQL is generated correctly not that mySQL is able to respond to it correctly.  Stubbing the db should make it easier to test things like how your code will handle schema changes.,1525041206.0
yonatannn,"Docker-compose is your friend here as you want to set a real-db, real DAL layer and a test runner client. Just define a docker-compose file with 3 containers, let the test runner save the test result to a file (probably outside the container so the CI can fetch it and display), configure docker-compose to exit with non-zero code if the test-runner status is non-zero (signals to the CI that the tests failed):
docker-compose up --exit-code-from SERVICE

All CI supports this configuration",1525173186.0
brainchildpro,"Use something with db migration capability and clean room your build on every ci run, start with no tables and build everything your app needs then roll it back. It proves your forward and backwards migrations and gives you a clean db on each test run. It's relatively simple",1525325195.0
Zilznero,Just reverse the function calls of Likes and Dislikes and you're set!,1525026311.0
nirad,-1 means infinite likes!,1525070792.0
jchristie21,Bacon ipsum?,1525030518.0
massivewurstel,What font do you use?,1525299397.0
scaleable,r/softwaregore,1525030782.0
cryptichash,Just want to say - looks really well done!,1525021189.0
_drFaust,"good stuff, looks quality. no time to dig in now but starred and forked for the near future.. especially interested in integrating crypto clients",1525027401.0
siamthailand,Good stuff. How much time did you spend on it?,1525022116.0
bch8,">Free as in Actually Free

>Develop an algorithmic trading systems on a no-strings-attached basis. (Though we'd love it if you join us!)

got a typo here",1525035086.0
Cyral,"This looks really nice, been looking for something like it",1525040338.0
uzibart,why do you use socket.io instead of websocket? the latter has better support and afaik is faster.,1525021352.0
astralradish,"I'd say almost never. Even in a single core environment, you would still have multiple threads for your applications. You don't want to have the state of one application depending on the state of another - i.e. your slackbot crashes the process, your express server goes down, or your express server goes under heavy load and ends up limiting the performance of your slackbot much more since they're sharing the same thread that's getting blocked by express.",1525000051.0
hipyhop,Usually you’d run them individually then setup a reverse proxy like Nginx to forward connections to the desired backend.,1525007115.0
DemSquirrel,Just use pm2,1525000126.0
HereComeMisterPigeon,Is this why my school’s websites all suck?,1525006099.0
snap63,"You don't need this simulation to realize that knowing what username to attack will make your attack faster. Nobody ever doubt this.

But having ""smart"" error message (which IMO is not smart at all) rarely prevent an attacker from knowing if a username exists or not (trying to register for instance can give this information, or a good list of usernames can be retreive from the website itself).

I think it's just something that gives the impression of security but is completely useless if other security measures aren't used (eg, prevent to many tries).

It's like this shuffled numeric panel to enter the password => useless and annoying",1524992993.0
tarunbatra,"Script showing how vague error messages during login process can make it harder to brute-force. Not a new thing, just to help me quantify the difference, and present it as evidence in my workplace and elsewhere.

What do you think about the details in error messages and it's security implications?",1524988020.0
nothingduploading,npm already does this. I believe its stored in `~/.npm` somewhere.,1524949745.0
BehindTheMath,"You can use pnpm. It stores all packages in one location, and sets up synlinks in each project's node_modules folder. ",1524966003.0
Sinlessdude,"You can set up a local registry, and all packages are stored there.  Sinopia is one option ",1524959249.0
arjunkava,npm with latest update does the same but it works by testing checksum while downloading package.,1524984113.0
Crashthatch,"It does this already. You can also force it to not even check if there's a new version and always use the cached version by giving it the --prefer-offline flag (recent npm versions only).

More recent versions of npm are also generally faster, so if you're on an old version you are likely to see a performance increase by upgrading.

https://blog.npmjs.org/post/173240511455/the-new-npm-cli-a-year-in-review-or-what-you",1524991981.0
Blinity,"I've had the same experience from my colleagues. It's not so much about _node_ as much as it's about _all of JavaScript_. These people typically have formal training in which they learned about Java, C++, and Python in college classes and the ""correct"" way to program has been so ingrained in their heads that anything _different_ is immediately deemed _bad_.

I have to review their JavaScript sometimes and it's clear they never took the time to learn how to effectively work with it. They attribute their messy code as failings of the language rather than their lack of understanding. It's why we have way more ""expert"" opinions of JavaScript than we do experts of JavaScript.",1524940431.0
SatsuTV,"It's mostly the circles you are in. Having a strong opinion about technologies seems to be a stepping stone of a developer.
Once you actually took a deep look at the other stacks or frameworks, you come to realize that we all try to find a solution to the same problems. That's why you could easily jump to most other languages and their frameworks and write an api there as the solution are not so original from the set that you know.

Looking back to the colleagues who used to have strong opinions are now feeling rather ashamed of those.

Introducing node.js at work when no one is supporting you, I imagine is a bit hard. I wasn't in a situation like this before. In this case I would rather stick to a familiar technologies within the team to reduce the bus factor and having people to talk to when you have a problem while developing. What's stopping you writing those microservices in Java, Python, etc.?",1524941354.0
username_is_taken43,"I am a Java developer and node is good. For medium size projects. Not for distributed transactions, etc. Also some things are harder to achieve with node. For instance, adding unique request id to all log messages generated while processing request. 

Personally I like nodejs and ecosystem. It is definitely mature enough for enterprise use.

Also people hate it because their previous knowledge about how concurrent code work is applicable anymore. Asynchronous javascript code can be confusing. Also the language prior to es6 was not friendly. And there is a lot to learn about tools like webpack, Babel. They have to compete with younger less experienced developers. They don't have greater authority anymore. 

",1524945865.0
trout_fucker,">Is it just the circles I move in?

Yes.  ",1524939417.0
ilja903,"Don't expect static typing devs to respect dynamic typing devs. Especially true to religious Java/Spring zealots. Scala people are crazy on types so do not expect support from them either.
JS is different from other languages because it is asynchronous by default. And most of the devs do not understand this concept at all. 

But actually the only things you will listen will be: hurr durr no types, hurr hipsters, Durr leftpad, npm is a dump, Bower, webpack bad, because I do not understand. Etc",1524984271.0
MCShoveled,"I think you’ll find that JVM bigots will always exist in their own little safety bubble. Java peeps were bad in the 90’s and have shown little change in their opinions over the past two or more decades. 

As for Nodejs, it wasn’t bad three years ago when I started working with it full time. It’s significantly better now. ",1524943354.0
danneu,"Everything popular gets hate.
",1525023568.0
trycat,Don’t ask me I just wasted half the day in callback hell. Again. ,1524950842.0
Rascal_Two,"Well what you need to do is read the file into a string, modify the string as you want, and then save the string back to the file.

You can `fs.readFile` to read it, then you'll have a string.

You then write the string you want in the location you want, either by splitting the string into lines if the target is on a certain line or by using regex.

Then you can use `fs.writeFile` to write the updated string to the file.",1524937337.0
Slightly_Askew,The setup script seems like its doing an awful lot of work that could be more easily accomplished using docker\-compose.,1524947285.0
mansfall,I'm just thankful you're not using mongo.  So tired of seeing node tutorials all spamming the use of mongo.,1524985266.0
mailto_devnull,"Appreciate the use of NodeBB as the forum component! It's pretty powerful with the blog comments plugin to provide the commenting portion, yet also have a full fledged forum for deeper engagement 👍",1524978915.0
OzziePeck,I’m currently writing my own blog from the ground up with React and Express. ,1524982510.0
KyleG,"    const { exec } = require('child_process');
    exec('docker run -d wordpress')

Done, and more secure than anything you'll write in fifteen minutes :)",1524980078.0
BehindTheMath,"If you're using the console, just use the `cd` command to change the working directory before running node. ",1524966390.0
isaacs_,"Yes, it's noobish, but half of all node users have been using it for less than a year, so you're in good company :)

Typically you put your program files in the current working directory, and then run them with:

node server.js

If you want to require something from there which is part of your app, for example, a file in `./lib/foo.js`, you'd put this code in server.js:

const foo = require('./lib/foo.js')

If you are using dependencies, those get put in the `node_modules` folder by default.  So, if you `npm install bar`, you'll get a `node_modules/bar/...` folder with the package contents in there.  To load a dependency, don't specify teh `./` relative path.  Do it like this:

const bar = require('bar')

and then use the dep however its docs say to.

I hope that answers your questions.  There are some more convoluted and magical things you can do with require paths and environment variables and such that I'd be happy to share, but that's the ""normal"" way to go about it in most Node.js apps.

Enjoy!",1525125900.0
Kind_Of_Programmer,"You could try express, and you can specify where you .js files are located.

‘//You have to install express
var express = require('express');

var app = express();
app.use(express.static('public'));
//change public to folder you desire it to look in’
",1524933314.0
redreaper99,Most Nodejs “developers” can’t even explain what Nodejs actually is.,1524932677.0
400_Bad_Request,"Should have linked to the article, I wanted to read what that guy said",1524936582.0
guymograbi,"i agree the title sounds awful.

but i am curious, what was the context of comparison? 

because i can imagine, given the right context, such an article that compares those 3.

for example - which was easier to learn. 
not that the title would suddenly make sense, but it might at least be a reasonable read in that case. 
",1524974927.0
MCShoveled,"React is, imho, the better answer if you are building something to last.

Angular2 is trash just like the code you will produce with it; however, if you’re just going to vomit some code out until it works then it will make that easy. 

I haven’t tried Vue ¯\\\_(ツ)_/¯ ",1524942217.0
nothingduploading,vue,1524931998.0
SomeRandomBuddy,Never do this. Never waste precious single threaded cycles on SSL crypto ops when a reverse proxy can do it for you (nginx) and before your service is called ,1524923203.0
warchild4l,"I chose node because of one really dumb reason.. let me tell you about it.

I was still in school when i started coding, and I really really wanted to start working as a develooer, also my family had money issues.. and One day, I found that one company was employing nodejs developers, without any CV, or degree, they only needed 250 word message, in which you would have described how you could help them upgrade. And i really got into it, i was 17 years old so I liked that opportunity, so I started learning it... I am still learning it and i like it, especially its speed.. I still did not started working, but I have high chance since I am learning 5-6 hours every day ",1524907138.0
mamoen,"Developed Drupal/PHP sites for 10 years and got just put off with PHP's morphing into Java. Both languages are too verbose and heavy for when you just want to get work done.  
Been working on Node now for 3 years, not looking back so far.",1524905186.0
calligraphic-io,"I worked in C on a proprietary product for about ten years, with a lot of sysadmin work in that job. I've worked in a few different stacks - Java doing middleware stuff, Ruby/Rails. Now I'm doing a lot of front-end work with React. I really like Node's execution model; the ease of doing native C++ extensions to the language; and having the same front-end / back-end language.

I'm watching Blaze (C# front-end framework that compiles to WebAssembly) and Kotlin on the front-end (again, via WebAssembly) to see if either of those emerge as reasonable alternatives to Node/React, and also considering taking up Elm/Elixir. But I like Node a lot, and absolutely love React.",1524913362.0
tamalweb,"Let me start with mine. I have many years of WordPress development experience. Then I went into custom web development. I pondered a lot of time with Rails, PHP and then finally settle into Node.

Using node for these reasons:

1. I want to build web applications, so want to do both front and backend of that app.
2. Want to use one language for both ends. Switching languages make me forget the other one.
3. Node is hip right now, so getting lots of community love these days.
",1524902750.0
Capaj,"I've started as FE dev doing raw JS and then Angular. Then moved fullstack when I had the chance to work on a node.js project in London. Have been looking for fullstack roles ever since because I love to deliver features completely from the DB all the way to the browser. Doing it in one language makes it much easier. There are times when I tell myself\-you should seriously learn another backend language, but then I take a look at tweets like [https://twitter.com/evanhlucas/status/989643291368083456](https://twitter.com/evanhlucas/status/989643291368083456) and I am not so sure anymore. Javascript is eating the world and there will be less and less incentive to use anything else. Of course if you do AI, a database, video encoder/decoder, games you need other langs, but for anything else? Javascript is the king.",1524906135.0
ell0bo,"I've been doing js dev since they put it in Netscape navigator.  This is back in the 90s... compilers weren't free for windows and I had no clue what linux was.  But I could write code in the browser and have it run... and javascript was supposed to be close to that cool new Java anyway.

Years later... I'm a php dev and know js like the back of my hand.  I keep tinkering with my own frameworks that allow you to use php modules that generate the js code.  Php give you the template... js makes it come alive.


Once mode came out, and I saw things like angular... I knew the future.  Be is security and data delievery...  ui is display and functionality.   All written in the same language.  Now working on a library that ties both sides together using a uniform model to create data agreements between the be and ui to even more reduce boiler plate.",1524921254.0
jaywree,"I’m loving node at the moment. I’ve always been mainly a front end developer. I love creating visual experiences. I used to do some Java at my first company for backend development. Mainly just creating restful apis. 

I moved fully away from doing any backend development for a little while, and purely frontend JavaScript, but since I started using node I feel like it’s just fully opened up the opportunity to develop absolutely anything again. The “same language for both” is definitely a huge benefit, no matter what people may say. Being able to have any developer on your team be able to fix a bug anywhere on the stack is priceless. 

I also feel like I’ve learned so much more about software development  in general since learning node. I feel like any problem on my computer I can sort now. Including automating tasks, reading and writing files etc. It’s so useful. ",1524905023.0
StupidRandomGuy,Dunno. Just following the hype few years ago. Now the hype is on Golang and i'm switching to it.,1524922830.0
Lefka356,"I use node but not in the traditional sense. I host my backend on AWS and use API Gateway to Lambdas running node. It's very fast, easy, and free (so long as usage doesn't get really high). I've developed several applications this way and I love it. I came from C# with web.api which was fine, but it felt so heavy. Lambda with node is so lightweight and smooth.",1524913016.0
moose51789,"always used PHP and kept hearing about this node.js thing, decided to be hipster and try it out, fell in love with it and still use it for personal work, work still uses PHP though :(",1524918904.0
PM_ME_A_WEBSITE_IDEA,"I'm very much an amateur/hobyist.  Front end JavaScript was the first language I learned, and I loved it. But eventually, I wanted to started doing full stack work, I wanted to understand every part of the process of making a website.  Unfortunately, I initially dipped my toe in PHP.  I had fun being able to interact with databases and template my pages, but I didn't like the language itself very much.  I learned Python for a bit, but when I tried to use Flask to start making a back end, it just didn't click for me.  At some point, I had used a very early version of Node with Electron to make a JavaScript game because someone told it was a ""way to run JavaScript on the desktop"", but I didn't even realize the implications of that.  Then one day I was thinking about Node again, and decided I should give it a go.  Best decision I ever made in my programming ""career"".  With modules like Express, hbs, mongoose, I'm now fairly comfortable with creating simple servers, restful APIs, interacting with NoSQL databases, I feel like I understand so much more about the whole process now.  And now we're writing a new job engine at my workplace in JavaScript, and though I'm not a developer by profession, there's a chance I may be able to transition into something like that because of everything I learned with Node!

I love Node :'D",1524931779.0
Bieb,My boyfriend was using it for some side project and I was interested in it so I started using it and the the rest is history. Kind of a love triangle story  😍,1524933355.0
rawriclark,Sick of php,1524941140.0
jwalton78,"I spent a long while as a C/C++ developer working on embedded systems, then a while working on Java.  About five and a half years ago I came to work for this little startup here in Ottawa that was working on node.js.  I said to my wife at the time, ""This whole node.js thing sounds really cool, and I bet it would be a lot of fun to work on.  But I don't really know if it will catch on, and I'm not sure it will look good on my resume if this doesn't work out."" But I took the job, and here we are. :P",1524913108.0
ThArNatoS,I really want to use node js but most of my clients are still using shared hosting like godaddy / dreamhost and it's just impossible to setup node there so I end up using php again :\(,1524909642.0
jameshmr,"This may be a weird use for node, but I have an application written in Typescript (it's a mutation testing too for Typescriptl) and I wanted a way to multithread it. Node made that quite simple! ",1524906228.0
brilliantdick,"Started as jr F/E dev. Worked my way up over 4 years to managing 8 other F/E devs on large projects then made a change to a company with a project. Been here for 6 years. We chose Node years ago b/c you can build a prototype fast. Being able to use the same language on both the back and front-ends is nice. Scaling a Node project isn't to bad but managing it across a large team can be tough at times. We got to about 15mm LOC and started polyglot-ing. Bringing in languages that were better suited for some workloads where we were misusing Node (slow at number computations, memory-bound, etc). Looking back, I wish Typescript was around when we started. Though, if we had to do it again, we would probably travel down the Scala-Play route, I've been using it extensively for a few years and really enjoy it.",1524916072.0
acylus0,"First ever job and the requirement was Node, the guy who was working there didn't have much backend experience and would prefer I did it in node anyway.

Been 2 years now and I like it regardless, wouldn't consider another unless Node really hinders me in doing something.",1524918088.0
randomFIREAcct,"I started on .net c# at my full time job. For a long time I was just a guy who programmed at work and never learned anything outside of work. At one point, I decided I wanted to start a business so I did a MEAN stack tutorial. It was pretty rough for me because it was a totally new paradigm. But, eventually I got the hang of it and use Node for pretty much all of my side projects. I've a most Java backend dev with 8 years of experience, but I'm starting to think I want to move into more of a NodeJs position because the projects and companies in that area seem much more exciting and innovative.",1524918904.0
raphaelarias,Because of the wonderful Meteorjs.,1524922121.0
euphbriggs,"I came to Node is a little bit of a weird way.

I really like strongly-typed languages. I like clear cut boundaries and rules to follow. Different people would argue nature vs. nurture, but no matter how I got here, this is where I’m at.

I don’t believe strong types are “right” and dynamic types are “wrong,” its just my preference.

So why do I like Node? Because I don’t live in a world that has clear cut boundaries and rules to follow. Every job I’ve had has provided a job description that was more of a guideline than an actual description of the job. Every project I’ve ever worked on has shifted (sometimes significantly) before it was considered complete. The bosses and clients I’ve worked with generally haven’t had strong opinions until they see some progress, then they want to start setting directions.

I used to get frustrated by it, but then I decided to accept it and that it was ok. Now, I have a work flow more like this:

* Prototype with JavaScript
* Get client feedback
* Adjust the JS to match the new specs
* Add types (with TypeScript)
* Get more client feedback
* Add documentation

It works a lot better for me.",1524923658.0
tobsn,"it was early 2009, mongodb and node were just put out there. i messed around with mongo to get it running for production on facebook apps. scaling was really complicated back then. there were no services to scale mysql so mongodb was a godsend. scaling php or anything else was a pain in the ass as well. so we looked into using nodejs as alternative for pure ajax/api requests. it was all written on our own frameworks because there wasn’t express or similar frameworks, they came a year or more later. there were like 10 guys and me in a IRC channel. http 1.1 wasn’t supported so I got the guys from lighttpd to talk to ryan about how to implement it the right way. 

anyway. that’s now almost 10 years ago.

not sure where nodejs is now. with easy to scale hardware optimizing the software almost became out of style. 

good old times though. ",1524925788.0
,"I started node after years of waiting for PHP to become anything other than the big pile of horseshit it actually is. I spent multiple years trying to find/write a PHP framework that allowed me to focus on development - no luck. I remember trying to get pretty urls to work by doing something with an .htaccess file. What a mess.

I started of with an ExpressJS tutorial and it was basically like landing on a new planet. It blew my mind how easy and actually fun development can be. I could ship results within hours, especially with the help of platforms like Heroku.

I can do pretty much anything with node that I want now. Of course, node isn't the best option in every case.",1524925880.0
lenswipe,"I'm a PHP dev. I got into node because a friend got into node back in 2013. We had fun making real time stuff with socket.io etc.

Then we discovered that node has bindings for low-level stuff and hardware. Then we discovered `node-dmx` and made a lighting control board with it. Followed by presentation software that let us have lots of screens all in sync.",1524932321.0
ilja903,Java Backend => AngularJS => Node,1524934883.0
jrop,"I started with Java desktop/backend development, and then was seduced by PHP \(the first scripting language I learned\).  Eventually I came around to Python, and stuck with that for a few years.  In parallel to Python someone told me to checkout a thing called ""NodeJS"".  I had done frontend JavaScript \(Vanilla/jQuery\), and thought server\-side JavaScript sounded both strange and cool.  I gave it a try \(pre 0.10\) and it wasn't mature, but it left an impression of curiosity  on me.

Also going along with this I took a class that introduced me to Racket.  While I am not one of those die\-hard Lisp fans, Racket introduced me to the world of functional programming.  It was then that I began to have an epiphany about how powerful functional programming can be in producing clean\-code.  I finally ""got"" LINQ, etc.  Serendipitously, JavaScript implemented fat\-arrow functions, and I was introduced to ""monad\-ish"" concepts via Promise\-chains.  It was around this time I fully converted over to scripting with NodeJS.

I could write clean\-code, and ever since ES6, JavaScript became a great language \(unfortunately with some nasty leftovers\).  I have always been a sucker for C\-like syntax, and JavaScript \+ NodeJS feels to me like Python \+ C\-syntax \+ async.  I have a few complaints, but it overall is an amazing platform.  In what other language can you spin up an HTTP ""Hello World"" server in such concise, beautiful code?

`node -e ""require('http').createServer((req, res) => res.end('Hello World')).listen(3000)""`",1524935816.0
nothingduploading,"I've been a web developer for 20 years. I've worked with javascript in the browser since its invention, Perl, Ruby, PHP and Linux. Around 2010 I started doing some side projects in node.js. Once I discovered expressjs I never looked back. It was easier than switching languages.",1524949929.0
Jeffdango,"I’ve worked in a sort of jack-of-all trades IT department for a little over three years now. Early on I was assigned the responsibility of supporting the company’s web needs. This mostly meant keeping Wordpress up to date. My degree was in MIS and only web development experience prior to this was putting obnoxious crap on my MySpace page (literally over a decade ago).

Over time troubleshooting issues led to me learning more about front end web development and I got interested enough that the company paid for me to do a front end boot camp. I got to do a few static project for our department to use but my personal goal was always to get to use the database skills I learned getting my degree.

Fast forward a few months and I see some opportunities on the horizon to leverage web forms to solve some challenges. The only issue was that I was only just starting to dig into JavaScript and I didn’t want to be tackling that plus another language, so I got interested in Node.

Got lucky again and the company paid for me to do a Node crash course. Two and a half months later I have deployed two of those web form apps and I’m really enjoying developing with Node.",1524952340.0
random523,"I'd been writing webapps with Microsoft tech since classic VBScript/ASP days, and moved to to C#/.NET/MVC.  

The tooling and architecture for .NET was always locked into Microsoft's ecosystem and way of doing things. I needed to install all kinds of crap just to build a simple app and keep up to date with the framework. 
E.g.

* Visual Studio Community for People Who Dont have MSDN but Want to Write Code At Home Edition,
* Entity Framework 2018 Winter Games Update 
* IIS Update for Windows 7 Machines that Didnt upgrade to Windows 8, 
* SQL Server Express Service Pack 5000 for People Who Read Scott Hanselman's Blog, 

I switched jobs to one where I'm no longer writing code, and don't have admin access on my work machine to install stuff.  I still wanted to write code when things were slow. Node.js and Sublime Text were easy to throw in a local folder and just get going.  Now there's no chance in hell I'd move back to .NET.

With C#/.NET, I almost always over-engineered the code and obsessed over whether I was writing things the 'right' way. With Node.js I just jump into writing code because it feels like everything is less serious and a bit of a hack anyway. (This is why I'm avoiding Typescript personally)",1524956278.0
infinityxi,"Not really developing for it in an official capacity but I got into it from a former coworker. I used to be in the world of Java w/ Tomcat (for work and hobby) and had the whole Perl/python thing for side projects. 

I really wasn’t too keen on JavaScript and used to mess with front end with GWT in 2010/2011. 

Picked that and electron up on recommendation and really loved it. Was a bit of a curve to get used to the async approach and now I consider it a big asset. 

I’ve developed internal apps and REST apis for various aspects of my current job and I like the quick stand-up nature of it. ",1524957009.0
vanrysss,"It was forced on me at work, and I hate it.",1525228666.0
warchild4l,"Check out that package's docs, it might have some weird name and not exactly same as it is for express(i mean express' module is calles express so you require ""express"") ",1524902123.0
_dramaBoy,"Could also be a path issue depending on your OS, could you maybe post your code where you require and try to use the module?",1524904299.0
400_Bad_Request,"Run npm install if you have cloned the code from github, could be the issue ",1524937011.0
sanxchit,You cannot put two different packages (shopping_cart and authtest) in a single package.json file. Split these two projects into their own folders and files.   ,1524876518.0
jgordon615,"That's pretty painful to read, but it looks like you're missing a comma between } and { Just after the path stuff.  If that doesn't help, please find somewhere online to paste your file so reddit doesn't mess up your formatting.",1524876517.0
somekindofrandom,Use a linter.,1524877456.0
SkaterDad,"What you'll need to do at a high level.  Hopefully this is enough to get you started:

 - Set up the <form> correctly, so that when it issues a POST request to your server, the payload will have the desired ""key"" names for each of your inputs.   You do this using the <input name=""whatever""> attribute.
 - Your server needs a POST handler for the route specified in the <form action=""...url"">.  Express likely requires some middleware to parse the form payload.   Once you have the data in the POST handler, issue the mysql inserts, making sure to use a safe method that prevents SQL injection attacks.",1524851227.0
smeijer87,"Look into the positional operator. 

`const newChapter = { 
  title: 'foo', 
  content: 'bar'
};`

`db.users.update({ 
  'post.id': '5ae2458c3da2df2c8fb8943d'
}, { 
  $push: { 
    'post.$.chapters': newChapter
   } 
});`",1524847739.0
mansfall,"For what it's worth, you have relational data.  A document data store (ie, a NoSQL database... mongo in your case) isn't generally a good solution to persist data when working with relational data.  You can handle a few relationships ok and be on your way with a working system.  Once you start getting nested relationships though, you're going to hit a brick wall and you will wish you had a relational database.  Furthermore, it opens the door wide open when you need to modify some existing document... suddenly you're going to have to scour the entire collection, looking at other collections and updating that same document all over the place.  Gets to be a horrific mess.

Good luck!  And don't use a NOSQL database just because you read a tutorial on Node.js and using it with NoSQL.  I see this happen all the time and people ""learning"" how to work with a NoSQL database suddenly think it's the answer to everything to store data.  (not that I'm saying you did in this case... just saying this in general)  :)",1524849474.0
spmaster007,"> Why Node.js is a good choice for your next web app?

You don't know the answer why.

 > Why Node.js is a good choice for your next web app

You know it and want to tell why it is.

Feel the difference? Anyway, the post is not bad.",1524856023.0
martiandreamer,"Hello! Thanks for writing the article. 

I would recommend tweaking the title a bit. It is presented as a statement (“why something is”) but ends with a question mark (“why something is?”), which is awkward. 

The tweak should either be to make it a pure statement (“why something is”) or swap the subject and “is” but leave the question mark (“why is something?”).

The first tweak would be better, as it is more assertive. 

All the the best!",1524831803.0
upendingpotato,"I'm not sure if this gets mentioned too often, but one thing I love about node is that I don't need a dependency injection framework.

<3 require caching",1524875533.0
musiton,Nice article. All the points made there can be said about some other frameworks too.,1524867716.0
Nrdrsr,"Assuming I want a relational database, what is a good orm? Is there something I can add that just magically sets up CRUD routes for a table with a nice JSON compatible interface? 

Or do I need to write all of that code by hand for every single project?

If I had to use elixir/phoenix I'd get all that in a single generator command. I'd much rather use node for some projects, but stuff like this irritates me, and so I don't waste my time with it unless I'm using firebase or something. 

",1524878734.0
ilja903,"Node is simple but not easy to use. It is easy to use RoR/Django, but they are not simple. Express/Koa/Hapi are simple, but when you start to roll orm, migrations, templating, admin, error handling etc whole setup quickly becomes complex (not easy, but still simple to use).",1524900440.0
galkowskit,"Disclaimer: It's my article, so a shameless plug.

But even though it's not meant for Node.js developers it might help someone when you need to send something about choosing Node.js for your client/boss.

Issues, questions and criticism welcome, I'm not a professional journalist of course.",1524829113.0
TurnToDust,I like how you didn't mention the quality of all the third party packages that are available.,1524847122.0
BlackEagle367,"Thank you for sharing, great read and awesome platform!",1524832009.0
disright,Good that it is actually about node and not simply express/Hapi/koa guide ,1524833786.0
salamandr,"This recording, from his talk in Australia, is much better: https://youtu.be/m9cTaYI95Zc",1524831196.0
ciprianiacob,"A very good talk, definitely worth watching.
",1524836767.0
shakesbeardZ,Useful one thankx,1524824439.0
mansfall,"Here is my issue with this tutorial.

It's yet another tutorial on how to node/express/mongo alongside the other 5 million examples out on the web.  This one is not much different.  The big problem I see with it is that you shout it to the world, look, build an app quickly and see how great it works, without explicitly describing why you chose the technologies you did.

Example:
Why is Node better than, say, Python as a server side language?  Better than C#?  Better than Java? Within the *context* of what you're doing, why Node? 

Why are you using Mongo?  What kind of data are we working with?  Is this relational or not?

The big problem is that you have tons of new devs looking to do web development.  They stumble upon your blog.  They now think that I can do everything with Mongo.  They start working on their project, knowing nothing about relational data and why it would matter to NOT use mongo in that case.  You set them on a path of building something that could eventually run into massive problems.

Or maybe they think, lets Node it up everywhere!  You talk nothing of where Node is weak, and don't provide cases where you should NOT use it.

You've given them a hammer to go cut down a tree.  You've given them a saw to go pound in a nail.  Translated, you've equipped with the WRONG tools to do what needs to be done for a project they might be working on.  Now they go off and share this with their buddies!  Telling them how easy it is to do all this stuff.  Now it spreads like a virus, and we suddenly have an army of developers armed with incorrect tools.

Please, at a minimum, talk about the data you use in your example, and WHY it would be suitable for NoSQL and NOT a relational database.  Do the same with why you're choosing to use Node.  With examples.  
Simply saying:
> than other existing frameworks because of Node.js is a packaged compilation of Google’s V8 JavaScript engine and it works on non-blocking and event-driven I/O.

Means nothing to most folks and they will simply graze over it.",1524850553.0
nineelevglen,To this day i cant understand why anyone would use mongoose.,1524811425.0
smeijer87,"As this question is about mongodb, I would certainly keep it in the database. Don't iterate the cursor, but look into positional operators instead.

Something like `db.posts.update({ 'post.id': postId }, { $push: { 'post.$.chapters': newChapter } })`",1524847018.0
Fewstera,"First you need to find the post you want to append to.

    const post = site.posts.find((post) => post.i === ‘id-to-find’)

Then you can append the chapter to the array.

    post.chapters.push({ heading: ‘Chapter 1’ })

Note: I’m posting from my phone, so the quotes might need changing to single quotes.",1524787166.0
tomontheinternet,"Things I like about node.

1. It's fasssst.
3. I can write JavaScript on the back end.
4. ES6 Classes make OOP easier.
2. It's async by default.
5. Uncaught TypeError: undefined is not a function ",1524796428.0
cinnapear,"> Callback hell is a myth. Async is so embedded in node, and works so well.

Callback hell is only a thing when you're sloppy writing code.  Organization and named functions for the win.  If things get complicated, use a helper library like [async](https://github.com/caolan/async) to organize further.

Every time I post this opinion I get downvoted to hell and back.  Let's see what happens this time.  (And I have nothing against Promises/async/await, I just prefer the elegance of callbacks.) ",1524767262.0
lepuma,You should try `Go`.,1524801858.0
a_blue_ducks,"Look, I enjoy writing node, but.. 

> Other languages seem to implement the same solution to simple problems many times. Node doesn't

Honestly I would consider this to be a bigger problem in Node than just about anything I have ever used. It's not Node itself, but the lack of some pretty basic utility functions that means there are 10+ libraries that all do the same thing.",1524807145.0
codis122590,"Rust has cargo for package management and php has composer. Both follow roughly the same pattern as npm.

I'd argue that php also does a good job of keeping namespaces separate.",1524808126.0
tamalweb,Good to read from someone who has built things on other platforms talk abouts the good stuff of node. I am a node beginner and it's my first time in back end.,1525012677.0
OzziePeck,"Yeah I love having 20 copies of Axios. Install once, Sym link everywhere else. ",1524824900.0
godlychaos,"I agree with you for the most part, except the ""callback hell is a myth"".

There is a reason Promises are built into node now, and async/await came fairly quickly afterwards. They have distinct advantages over vanilla callbacks, and people want to use them cause things are a little easier to reason about when written well. Back a few years ago when Node didn't have promises built in and async/await, callback hell was definitely a thing. 

Getify explains very well some of the drawbacks/shortcomings of callbacks. Also, he defines callback hell as much more than just pyramid nesting of code. 


https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch2.md",1524837152.0
android2222,Python is not just a scripting language and I am also curious what you imagine 1000 things that php does to actually be...,1524800450.0
sharkdove,Here's a good discussion posted recently on Hacker News: https://news.ycombinator.com/item?id=16782266,1524769198.0
raphaelarias,"We are using it and we love it. Performance is also great, even if you have scale, due to the latest community developments like redis oplog and even Apollo (GraphQL).",1524776687.0
bloodguard,"It looks interesting and I wrote an internal use application with it but if I even whisper MongoDB or NoSQL the DBAs here start sharpening their pitchforks and lighting torches.

Vue2, Feathersjs, and React. ",1524774524.0
dandecode,Been working with Meteor & React for a few years now. I love it!,1524758461.0
mikebpechousek,Thanks for the answers guys ! Opening up my mind.,1524776096.0
MrStLouis,Meteor is really easy to set up boilerplate like auth. It does make your package size larger but it's not very opinionated if you use the base package. Apparently there's a way to use sql with it (comes stock with Mongo) but then you lose auth support ,1524760655.0
LovelyKarl,"It's ok for quick prototyping, but once your site grows large and has serious traffic, it's a total pain.

The basic idea is actually making nodejs somewhat similar to Java application servers 15 years ago (glassfish, jboss etc). A big sluggish monster that just wont perform no matter how much CPU you throw at it.",1524775872.0
estacks,It's really good for backend work. You'll bootstrapped with a reactive app faster than anything else. I recommending getting the Meteor client bundler and make your React side completely in its own environment and CLI. You can put builds in the /public/ folder of Meteor if you don't want to host them separately. The Meteor compilers are generally super out of date and worse overall especially for mobile.,1524801984.0
fullheap,Vue's pretty nice.,1524787159.0
,[deleted],1524757402.0
,[deleted],1524753903.0
pierreburgy,"Strapi co-creator here. 

Kong and Tyk are API Gateways: they act as an intermediary for requests from clients to independent API endpoints. The API Gateway takes care of many things: authentication, rate limiting, etc. They are great especially for microservices, because you can host API endpoints on different platforms (servers, AWS Lambda, etc.) and centralize them through the API Gateway. On top of that, they provide API management tools, such as Analytics and Documentation portals. For example, if you want to get the list of users, we are going to request `https://api.mycompany.com/users`: the request is going to be received by the API Gateway (Kong or Tyk for example) which is going to get the data from the relevant endpoint.

Strapi is monolithic, what means both the API Gateway and API endpoints logic are in the same project. Until you really need to switch to a microservice architecture, it makes development much faster. In a Strapi project, you can super quickly create an API CRUD (REST or GraphQL, from the CLI or using the dashboard), visually manage API access rules (Users & Permissions plugin) and add your own business logic.",1524761171.0
DROWE859,I'm curious about the sub's thoughts as well. I've played with Strapi and it's meeting my needs atm but I'm not well versed in any alternatives that may be out there.,1524755256.0
400_Bad_Request,"Run the command :
npm i -g npm",1524765386.0
Katana__,Just be glad that it's not installing npm 5.7.0.,1524838250.0
Koala_T_User,Maybe consider titling it “10 node js frameworks”  apart from hapi and sails it seems like most of the big players are missing,1524744841.0
,You lost me when you said socket.io was a node js framework. Can't see me replacing express for socket.io anytime soon. Not even sure that's possible :/,1524744920.0
russleyshaw,"Top 10 lists (even when they do contain the big players) aren't very useful to me. I'd love to see a list of useful, lesser-known packages that serve specific purposes. 

Sometimes its hard to wade through NPM to find what I need.",1524781426.0
patrickleet,"Hey, wrote this up for my buddy Matt last night so he could set up his projects the same way I had mine.

Wanted to share with everyone! Hope you find it helpful!",1524707588.0
paperelectron,Nice one.,1524715902.0
lzantal,Very cool!,1524718922.0
lumitor,Thank you. Very useful!,1524726393.0
Chris9513,"Can also note that if you end writing code that needs transpiling, adding --mapCoverage or --map-coverage (don't remember which one exactly) to your test command in the package.json will ensure that the generated coverage is mapped to your source files and not the transpiled ones. Had to dig for that flag, so thought I'd share!",1524731501.0
darpa42,    posts[0].chapters.push(...),1524690614.0
mclovin4009,"Since you're using mongoDB, try this:

      Model.update(
        { ""posts.title"": ""Book Name""},
        { $addToSet: { ""posts.$.chapters"" : ""value to be added""}}
    )

Although do use a unique ID in the posts documents, since there could me multiple books with the same title, right?",1524720446.0
marvinfuture,"You should be really using an ID, title could potentially overlap. It’s hard to say exactly how you could populate the chapter array without knowing the rest of your code. it  may be easier to build a local copy of your objects and push everything. Hard to say though",1524690586.0
CrypticOctagon,"You can do something like this:

    class Foo {}
    Foo.prototype.bigMethod = require('./Foo/bigMethod')
    module.exports = Foo",1524706872.0
Onisoroma,Is there a need for you to do that? Why don't you keep all things related to that class In one file? You can always extend that class I guess,1524693040.0
Sinlessdude,Assign to the prototype ?,1524706322.0
overthetopclock,you can extend the class and add new methods in extended class,1524696558.0
Koala_T_User,Prototype it!,1524706574.0
fourormore,"Nope
",1524687564.0
ericmcray,Nope 2,1524687693.0
legovadim,Hide your nose from your face?,1524687830.0
pratiks3,Whhhyyyyy! Oh god why!??,1524688600.0
rollickingrube,"environment variables... same as backend.

But if you must, make it the answer to a riddle.",1524689306.0
username_is_taken43,Only db passwords,1524689316.0
pratiks3,"The api key should always be stored in the backend, it’s normally done as an environment variable.

The front end doesnt need to give the api key to the backend it already has it.  Front end should only make requests .",1524838018.0
alfredmuffin,Never used/heard of this library. What are some use cases?,1524698421.0
,[deleted],1524737101.0
HIMISOCOOL,I didn't know they were Flipping the script again... But I am glad they adopted my favorite style and added a pipe operator ,1524772063.0
Thommasc,"So rivers are like a more simple implementation on top of Promises compared to rxjs Observables. Clever!

Thanks for creating this. I started working with the AWS SDK and it's really a pain to use in node. I'm only doing basic stuff so it's working fine so far for me. But I feel like there's a whole ORM level missing right now to use dynamodb easily with the serverless framework.

Sadly with 1 and 5 stars it's not going to impact the ecosystem anytime soon.",1524737254.0
SafetyMoose22,Is the max listener error in the terminal console or the browser console? ,1524693514.0
TheOneRavenous,"What's in the ""form()"" middleware? What are the other imports? 

There could be a recursive type function that is creating multiple listeners 

Also there's no need to have an anonymous function as a callback in your listener function. The app Object created by express will register the routes and you'll only need to respond on defined endpoints.",1524753297.0
DrRandyReamer,"Try sSS. ‘s’ is seconds 1,2,3... and ‘S’ is fractional seconds according to the documentation. https://momentjs.com/docs",1524681847.0
Ariquitaun,"This article is nonsensical. Trivial code is quite alright to repeat, and non trivial should have its own library and implement semver. This problem has been solved many times already. ",1524677359.0
mistralol,"
This kinda strikes me as a common software engineering problem. Something which has been going on for years in other languages.

You have repeating code. You need to share it between projects. So you start building common components (libraries), you do design and then start shipping modules which do specific things.

Now the real problems starts. If you don't do the initial design of something properly (or requirements change) and then need to change a component which is shared between 20 projects. How do you get the old code up to speed with the modules and release them all at the same time. Or end up keeping the old version and then having older projects stuck on specific versions of the lib that cannot be updated. This is where you need to choose your separation boundaries between and app and the components very carefully.

Compiled languages are good at this. Since you can force a break in the api eg rename a function. Changes its arguments and watch all the builds break until they update. But how is this normally managed in javascript (except for with unit tests?)
",1524686995.0
coolcosmos,This is dumb. Learn to use git submodules and don't reinvent the wheel.,1524702440.0
TheRealAdum,[https://imgur.com/q6QlazN](https://imgur.com/q6QlazN),1524676496.0
TheRealAdum,Is there the potential for nested directories?,1524664095.0
OzziePeck,Mods can we do something about these article promotion posts? They’re getting annoying. ,1524684891.0
jwats287,"Change it to 

app.get(‘*’ ...",1524664437.0
BehindTheMath,"My first guess is that when you reload the page, Express looks for a route handler for /url and can't find one, since you only have a handler for /.

You need to add a catchall handler that will start the app, and possibly navigate to the appropriate section. ",1524661504.0
mattdoescsharp,"Just assign a [TTL](https://redis.io/commands/ttl) to the key in redis. On each API call, try to retrieve the value from redis. If redis sends nothing back, hit the external api, cache the response, assign a TTL and repeat.

Super simple pattern, basically what redis was designed to do. No need to overcomplicate. [ioredis](https://github.com/luin/ioredis) is a great implementation of the redis client for node.",1524656630.0
aust1nz,"You could check out [Bull](https://github.com/OptimalBits/bull). I haven't used it, but it's a Node package build around Redis that includes cron\-style scheduling. But that's more about scheduling jobs to be added to Redis, rather than scheduling a generic job which is then stored in Redis. I'm not sure if that matters.",1524620914.0
jackputak,How long does it fucking take for ES Modules to become a standard feature?,1524613974.0
NoInkling,"IMO most of the exciting stuff is in the improvements to V8 since 6.2. The 6.6 notes are here: https://v8project.blogspot.com/2018/03/v8-release-66.html

Really they should have a summary of what the V8 update brings, or at least have links to the aforementioned blog posts.

^(...Or maybe there's a conflict of interest with the ChakraCore stuff? /conspiracy hat)",1524615682.0
oldyoyoboy,"No, you are not required to use cheerio for web scraping, at all.  You can use request\(\) and parse the HTML yourself... but, realize this:  NodeJS is not a browser, it doesn't understand HTML or the DOM.  People use cheerio because it makes their life easier when web scraping.  It's not a full version jquery, just the DOM parsing parsing stuff.

Also, if you are scraping more modern websites, where data comes from APIs instead of being rendered on the server, you might want to look into puppeteer \([https://github.com/GoogleChrome/puppeteer](https://github.com/GoogleChrome/puppeteer)\).  Think of it as a script\-able ""headless"" browser.  I have stopped using request\+cheerio and moved my scrapers over to it.",1524603900.0
tbarge1038,"[NVM](https://github.com/creationix/nvm) is made for exactly this. At my work we have apps on v4, v6, and v8, and we all use nvm to manage and easily switch versions.

Just be aware, when you switch to a different version of Node, you'll have to reinstall any global node modules.",1524598692.0
shaneknysh,"I assume you are on mac ('brew command') so you have two choices.

[Node version managment with nvm](https://github.com/creationix/nvm) - NVM is the most popular version manager. A bash script that manages your node versions. 

[Node version managment with n](https://github.com/tj/n) - less popular but the people who use it like it A LOT. 

This is the best description of the difference I have found 
>n vs. nvm
Although both n and nvm achieve the same goal (allows installing and switching between node versions), n will move your node files always to the same path (/usr/local/bin/node), so you’ll always know that your current executable lives there. One of the downsides of n is that is will only download and install binary node distributions, for older releases (pre-v0.8.6) you’ll have to compile and install the version on your own and then manually copy the files into your /usr/local/n/versions/ directory in order to switch to those versions. On the other hand, since nvm downloads, compiles and installs from the source files, it will work for just about any node.js version. One downside is that since nvm simply manipulates the $PATH variable to point to the requested version some programs and IDEs (such as WebStorm) that need to point to a full path will have to use the full ~/.nvm//bin/node path.

from [www.mattpalmerlee.com](http://www.mattpalmerlee.com/2013/03/23/installing-and-switching-between-multiple-versions-of-node-js-n-vs-nvm/) it's very old but still accurate.

If I've missed my guess for your platform on windows you can use [nvm-windows](https://github.com/coreybutler/nvm-windows) which seems to be closer in behaviour to n than nvm. Last I tried (a year ago) nvm works with bash for windows while n does not.
",1524601468.0
atubofsoup,"> Now developers can utilize `fs` with promise

🎉",1524601978.0
,[deleted],1524593261.0
lachlanhunt,"What about native ES modules? Are they enabled by default yet, or still behind a feature flag?",1524606814.0
treyhuffine,"- Adding Error Codes
- N-API is no longer experimental
- Performance improvements with V8 Engine v6.6
- Improved diagnostic trace and post mortem
- npm v6 ships immediately
- Upgrade to OpenSSL version 1.1.0
- Experimental promise version of the ‘fs’ functions",1524589134.0
Move_Zig,Got a download link?,1524591677.0
petercooper,"> npm has recently upgraded from v5.7 to v6.0, and Node 10 will ship with the update immediately.

The [Node.js Foundation's announcement](https://medium.com/@nodejs/the-node-js-project-introduces-latest-release-line-node-js-10-x-bf07abfa9076) says otherwise: 

> Node.js 10.0.0 ships with npm 5.6.x. However, it is expected that the Node.js 10.x release line will be updated with npm version 6 early in its lifetime. ",1524605143.0
zaidka,Are performance improvements limited to code parsing and compilation?,1524617092.0
fatty1380,Raise of hands for who read that as v0.10 and was confused for a second ,1524607208.0
anonymoususer89,LTS isn't here V10 is. LTS comes in October ,1524591300.0
mgutz,Which module system(s) are supported by Node v10 without a CLI flag? This article just points to an article and some vague wording around rapid iteration around  ESM support.,1524584398.0
Move_Zig,">Node v10 LTS is Here

I don't see it on the nodejs website.

According to https://github.com/nodejs/Release/blob/master/schedule.json the release date is next Monday.",1524591134.0
iends,"OP, did you not read the article you posted? The first paragraph explains that this is not the LTS.",1524608125.0
Sinlessdude,"How is the service clustered, with pm2 or did you write the cluster logic yourself?

Would need a bit more detail, but maybe send a message to all of the processes, and the one that owns the “timeout” for that “action” is the one that acts.  ",1524620087.0
aust1nz,"I like some of what I see here, especially the config files that [validate environment variables on startup](https://github.com/RisingStack/multi-process-nodejs-example/blob/master/config/components/common.js).

But I also see a few suggestions that feel controversial. This project outlines three processes \(web, stream\-listening twitter, and a background processor\) and has config for all three processes, which will be dynamically required based on one of the environment variables. That may wind up working, but it's difficult to reason through and I'm not sure whether it should be considered a best practice.

Also, the article links to another post on [node structure best\-practices](https://blog.risingstack.com/node-hero-node-js-project-structure-tutorial/). The first bit of advice there is to organize the codebase by features, \(not traditional MVC\) but this project is organized into config, web, models and worker folders. Maybe I'm missing something, but the conflicting advice from the same author makes me question which is the true best practice.",1524574812.0
,One of the things I love about node is that I can do what I want. :),1524580458.0
bichotll,"could anyone recommend me more resources like that one?
much appreciated!",1524607486.0
kevindoveton,"Specifying the path will work, you can also add it as a script in your package.json file and run it via `npm run typescript`. You can find out more [here](https://docs.npmjs.com/misc/scripts) ",1524549639.0
OzziePeck,I’ve always wanted to know how NPM makes a binary. ,1524565988.0
BehindTheMath,"Prefix the command with [`npx`](https://github.com/zkat/npx). npx now comes bundled with npm, and it will search through local and global node_modules folders to find the binary. If it can't, it will temporarily install it, then remove it when it's finished. ",1524597813.0
cspotcode,Locally installed packages have their binaries installed into node_modules/.bin. You can add that to your PATH and invoke locally installed tools just like you would globally-installed ones.,1524629962.0
codearoni,"If you own the data, go with RDBMS. Every time. DDDB's are useful when you want to store data from other systems that you don't really give a damn about (in terms of structure or content).

If I were you I'd do some [book learning](https://www.amazon.com/Relational-Database-Design-Clearly-Explained/dp/0123264251). 

You need to come to a consensus on what constitutes a record in your system and use that to design a primary key. I think if you do some research into introductory DB concepts the rest will become obvious over time, FWIW.",1524543416.0
avejack,"Just wanted to give a Tipp:
Check Out 'Typeorm' if you like coding in typescript and having an ORM. They support many DB Engines and I think it would help you transition from MongoDB to a relational database! Hope it helps :)",1524548252.0
chrisdefourire,"Let me guess: you're using Mongoose instead of the native mongodb driver?

Mongoose is a huge source of misunderstanding of the nature of mongodb, because it makes you think in terms of relations/schema instead of documents and denormalization.

With SQL, you'll design your DB to suit your data. With mongodb, you must design your DB model to suit your queries. Mongodb (or rather nosql) is an optimization to remove joins and scale horizontally (you can't scale and have efficient ad-hoc joins).

If you don't know how you're going to query the db, then use SQL. 

If you feel more at ease with SQL, then use SQL. In SQL, there's one standard way to model things. There's no such thing with noSQL, so you need to change perspective.

But it's not the nature of your data that tells you which db you should use: anything can be modeled with any DB. Often people will use SQL to model graphs, which it's not designed for! Some people try to use mongodb like it's a SQL db and it ends badly.",1524560790.0
Shaper_pmp,"> I'm managing lots of relationships between documents, and my data seems pretty structured overall. Does it sound like I should have gone with a RDBMS? How can I tell this in advance before my future projects?

Is your data largely tabular (table-shaped)?  Do you want to manage lots of identically-structured objects?  Do you want to easily be able to enforce referential integrity between different items?  Do you want to be able to quickly query and pull out collections of items (including based on complicated relationships between individual items)? do you want to be able to (relatively) quickly and easily add fields to *all* items of a given type? Do you like normalised data?  Use SQL.

Is your data tree-shaped?  Are items often irregular/inconsistent in structure?  Do you want to be able to easily add/remove fields from individual items, without updating any of the other items in the database?  Do you like/want/need/will you tolerate denormalised data for your application?  Use NoSQL.

",1524573283.0
l3l_aze,"Modules are there to try to provide the functionality needed without you having to build it yourself. You could replace Express & etc with your own code, but you may find yourself doing a lot more work than you had planned, or you may need to implement some of the same bug fixes and handling for edge cases that they have already managed in a mature module.


It's all about carefully weighing what you want to do and how much you want to code/debug to make it happen, along with how much bloat you're willing to put up with & force on others with dependencies.",1524523550.0
texasbruce,Pretty much all IOs in node are callback/async (except some local file read has sync version),1524532568.0
rerecurse,"1. The best way to take advantage of node is the second way, breaking up your operations into smaller bites and using async as a cheap form of parallelism.

2. Node has a much smaller standard library than most other platforms, and as a result there tend to be a lot of small packages that only solve part of your problem. In practice, the hundreds of dependencies issue isn't quite as bad as it looks, because all of those packages are version locked to their sub dependencies - it means you have a massive node_modules folder, but you rarely have to go deeper than one level of understanding there.",1524532766.0
WhatEverOkFine,"The power of NodeJS is the async paradigm, the event loop lets nodejs do hundreds and thousands of things simultaneously in a non-blocking way.  function doSomething(data, function callback(err, result)); is/was the 'normal' way to do async things in JavaScript before someone decided it was 'hell' and declared this simple syntax a 'problem that must be solved'... the result was the concept of promises, and the complexity of it all.

Honestly, I don't think there's 'one true way' to program in nodejs / JavaScript... I try to use the best tool for the job, and for the most part, imho callbacks are sufficient for most tasks.

",1524535972.0
scttmthsn,Perhaps a silly question but have you installed the pg driver? ,1524518565.0
verinik,Have you checked the in-platform REST explorer? Most tables are exposed through the table API. ,1524519078.0
redmorphium,"If you are on the latest node, you can use the util.promisify which is built-in to the standard library.",1524493481.0
ikhos,"First I suggest [reading about Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) to get good grasp of how they work and then [how to use async/await](https://ponyfoo.com/articles/understanding-javascript-async-await), since it's nothing more than syntactic sugar over Promises.

That said, I would do something like this:

    function myWrapper(dataToParse) {
    
      return new Promise((resolve, reject) => {
        myOldfunction(dataToParse, (err, parsedResult) => {
          if (err) {
            return reject(err);
          }
          resolve(parsedResult);
        });
      })
    }
    
    //Use as:
    
    async function someFn() {
      try {
        const result = await myWrapper(data);
      } catch (err) {
        //Handle error
      }
    
    }",1524491953.0
4lteredState,"You could wrap it in a new promise, assign it to a variable and then do await on the variable.

Within your callback you could then resolve() the result you want (and handle errors with reject())

let process = new Promise((resolve, reject) => { oldFunction(Val, (err, processedResult) => {
    if (err) {
      reject(err);
    }
    resolve(processedResult);
  }
});

try {
  let result = await process;
  // more work here
} catch(err) {
  // blow up
}

edit: it’s hard to write code on a phone...",1524491164.0
RangerCoder,"This one is new and well it's a lot of content you can just skip what you already know. https://www.udemy.com/mern-stack-front-to-back/ sometimes it's good to have someone explain how that stuff works together and really build something with it. Also posted the full link so you know it's not a ref link. On https://www.youtube.com/watch?v=B1wDyQBBafQ you find a promo link in the description this is 
Brad Traversy own channel. ",1524500294.0
tttim45,"https://expressjs.com

https://reactjs.org

https://webpack.js.org

This is what software developers do everyday. They read documentation. If you know the basic and read their documentation, dig into their code base for hidden documentation and see the internal workings.

Check out https://github.com/react-boilerplate/react-boilerplate.",1524495895.0
upendingpotato,Why don't you learn how they work individually first? ,1524496444.0
idrinkyourmilkstout,"To hop into this, does anyone have good resources on integrating React into existing Node applications? I've got some experience building with Node/Express, but I really don't get how it gels with a frontend Javascript framework. 

For example, I don't get how you route with React if you're already routing with Node, etc. All of my development so far has been Node/Express backend -> Templating like EJS or Handlebars + CSS + Vanilla JS. I'd like to get into frontend frameworks by building on what I've already done, if possible.
",1524496938.0
didinj,"If you want an easy way to learn while practicing your self from scratch, you may follow my tutorial https://www.djamware.com/post/59faec0a80aca7739224ee1f/building-crud-web-application-using-mern-stack",1524549497.0
Muhaki,"Like i said, i know the basics. Just looking for a tutorial where u build something out of them together. :)
",1524496984.0
rusmo,"This was great when I went through it a couple years ago. Focuses on React but uses webpack. I don't think it includes Express, though.

[https://survivejs.com/react/introduction/](https://survivejs.com/react/introduction/)",1524504119.0
dillonraphael,I would look into nextjs [https://egghead.io/courses/build\-a\-server\-rendered\-reactjs\-application\-with\-next\-js](https://egghead.io/courses/build-a-server-rendered-reactjs-application-with-next-js),1524508969.0
Bronsonator,"[Level Up Tutorials ](https://www.leveluptutorials.com/tutorials/react-for-everyone) 

This should be a good starting point",1524517297.0
SomeRandomBuddy,Stop spamming this trash ,1524491915.0
NobodyMiner,If you need large amounts of storage you could try Amazon S3,1524488561.0
Suepahfly,"Is there any particular reason you want to have it in your own app or site?

If it's just live streaming and show prerecorded content YouTube might be an option. ",1524496737.0
kryptkpr,S3 endpoints are available from all major cloud providers and prices are absurdly cheap. Amazon is the biggest but not the only game in town.,1524490946.0
atynre,"Since you're already experienced with Ruby at this point you could choose to just focus on learning the in and outs of JavaScript. While it was originally written with the browser in mind, I recommend ""the good parts"" book by crockford. The book is timeless IMO. Honestly for the other parts you'll probably just Google the things you know how to do in Ruby and there'll be a reference on how to do the same thing in node.",1524476940.0
cassv24,check out https://eloquentjavascript.net/ ,1524512789.0
ddwrt1234,Google has helped me more than college,1524452410.0
sanxchit,"[Scalable System Design](https://github.com/donnemartin/system-design-primer)
",1524442836.0
intellectual_error,"Even as someone that's been working in the Node.js space for a long time this repo is a gift that keeps on giving https://github.com/sindresorhus/awesome-nodejs

Edit: also I know it might sound silly but you could look up some of the people that work on Nore core and follow them on Twitter. I use Twitter just for tech stuff and it helps me stay ahead of the curve with new features, updates to Node and all that kind of stuff. Although the downside is that tech Twitter can have a lot of drama too.

Best of luck in your new role! I find working with Node is so much fun. Hope you have a similar experience!",1524467085.0
JustinsWorking,"I’d say try to rely on devs on your team, or resources written by the author of the libraries your using.

Not to get all “old man on porch” but the quality of a lot of internet resources has really plummeted in recent years, and I find it hard to recommend any sites or community as safe places to learn in all cases.

MDN is a great code resource run by Mozilla, and again if I’m being honest, MVC/Flux/Dependency Injection is likely not implemented like a textbook at your job; often times there are quirks, or even errors, mistakes, and anti-patterns that you need to understand to work in your teams projects.

In those cases sometimes reading the academic definition can create issues because it doesn’t line up with the production system you’re working in... not a problem a junior developer should be trying to reconcile while they’re still learning.
",1524467755.0
mantas6,"You might want to take a look into Typescript. It really helps to write more scalable, readable code with less silly errors that you come across while writing vanilla JS.",1524466159.0
dont_forget_canada,async await is pretty cool,1524465447.0
the_strangemeister,"Don't blindly listen to anyone saying, use this or use that. Go look at those these things, yes, of course. But I don't like typescript for example, but I see this popping up everywhere, that doesn't mean I think its bad, that's just my preference and I might try it out soon, just to know if I'm an idiot for having that preference. But in the mean time, I'm just doing what I feel comfortable with, so that my head doesn't explode. What I mean is, at the start, strip out everything, knowing your essentials will help you more than knowing the newest shiny things by a landslide. Read books like Javascript The Good Parts which give you more insight instead of knowledge of JS sugar coating. I like functional programming and I think reading up about that and get a better understanding of FP will make you a better JS programmer, even if the stuff you find is in another language, sometimes that's even better. Taking you away of JS making this more abstract and easier to reason about. If all of this brings up in you: ""well yeah duh, yesterday's news, the future is now old man!"" Then start listening to the rest of the world. I got some fancy ADD which means I'm distracted like the dog in the movie UP so I started listening to a podcasts like Syntax, I can hear about new stuff n learn new stuff on the go. When I hear interesting stuff I Google em, read an article. Basically just Google things you hear and aren't sure about what they are. Don't worry child, the Google search bar is here now, it will guide us. ",1524478759.0
vcarl,"We recently started a Discord server for discussing node, I always like idling in chatrooms for things I'm trying to learn. A lot of the folks in there right now are primarily full stack React devs, but we've had some good discussions on writing backed code.

https://discord.gg/vUsrbjd

It's called Nodeiflux because it's a ""sister server"" to Reactiflux, the largest chat community of React devs. We got a good number of node questions, so we created a separate server with a backend focus.",1524488643.0
TheOneRavenous,"One aspect of better code is learning how to analyze your code using big O  notation. You'll be able to identify any weak points with scalability if the function is supposed to be used frequently. Big O can help you consolidate parts of your process as well. You'll notice that pieces of code are adding overhead and possibly be able to consolidate, not always but sometimes and that additional savings can keep your processes lean. 

Knowing something has an exponetial time scale or linear time scale is useful. Also it allows you to view your function on a time scale graph which sometimes exposes a better function. 

I wouldn't do it on every function but some that will be used frequently like a utility function. You'll want to know what bottle necks exist in your code and if they can be adjusted later etc.

Knowing derivatives can help some times if you want to extract additional linear information from a nonlinear function. Not often does this come up in my work so probably don't need to worry about it. ",1524495298.0
Suepahfly,Even more important then reference documentation is a good mentor. So if you have more experienced developers at your workplace ask them to pair program with you. Or even better try to get a spot right next  to one of them.,1524495921.0
dweremeichik,Senior devs and existing projects.,1524462443.0
Thommasc,You'll want to use Typescript soon. Explore npm and identity the best package for each feature you might need to implement.,1524469684.0
whyNadorp,"I assume you live in a country where search engines are banned and you get sentenced to death for using a vpn, otherwise you would have just typed a couple of keywords and gotten [what you’re looking for](https://www.google.de/search?q=node+compare+images&rlz=1CDGOYI_enDE677JP679&oq=node+compare.omages&aqs=chrome.1.69i57j0l3.5771j0j9&hl=en-GB&sourceid=chrome-mobile&ie=UTF-8).",1524437164.0
devourment77,Look into phash libraries.  Perceptual hashes can help track if an image is close to being a duplicate.,1524454654.0
bardadymchik,"If you are sure images similar more or less. Try to use phash. I implemented one for my current job sharp-phash. We are detecting different sizes, watermarks, some crops.",1524465721.0
l3l_aze,"Never tried either, but the two you mentioned should work to build an executable from a NodeJS CLI app. Packaging apps isn't always easy, and it will often take some experimentation to accomplish; there may be some zero-configuration tool(s) to help with this out there (possibly even using Pkg or nexe underneath), but the provided defaults will not always be correct and you may still need to tweak some things for your project.


If it's a GUI app Electron + [Electron-Builder](https://github.com/electron-userland/electron-builder) can help.


If it's a server-based site and not a simple GUI app then Electron may still be able to help, but it would likely take a bit more work to setup/run the server + client from the executable itself.",1524432120.0
vatselan,Have you tried electron?,1524427488.0
bjpbakker,"Of your goals is simpler distribution of a desktop app you may want to try Electron like suggestef here.

For servers/daemons you may consider adding your entire application as a module in the node executable (you have to compile node yourself for this) and provide a single script that can run your application from node. You may even download your custom node executable from that script, so you have a single file to distribute.",1524433273.0
DaJuukes,"What kind of application is this? A website? If so look into using electron.

Otherwise you can't package images into an executable AFAIK",1524428052.0
Str00pwafel,"I’ve built a comparable application in serverless, it even supported a subscription model. Go for it. Just a tip: dont expect magic. Ive ran in to multiple issues like:
- maximum number of “scripts” is fairly low
- cognito doesnt support spaces in password (like wtf m8?!)
- custom domain with ssl is a bit hacky to set up for API gateway. (Domain needs to be in a us west 1 region)",1524430650.0
thedeveloper15,"Building applications with serverless functions is a different way to program all together than if you were to build one app and host it on a server. You need to weigh the problem serverless solves against your time, in order to determine if it's right for you. Do you need to scale to a large amount of traffic (preferably multi-region)? Serverless allows you to do this for cheap. If you are running a smaller project and just need to get something up and running, you will spend a ton of time learning the nuances of serverless. To develop on your local machine you will need to setup your own local environment. There isn't a popular ""framework"" yet that gives you the documentation and opinionated best practices for writing your functions. The serverless framework gives you the tools and documentation you need for managing resources and deploying your code but the development of the actual functions is a free for all. If you are comfortable with setting up a development environment and deploying to production in a language you enjoy working with, I would let serverless ride a bit longer so it can mature and get a framework around it. I've had a ton of fun with serverless and the community around it but the cost is your time at this point. It's still new and finding it's legs. If you're planning on using a new JavaScript framework for your frontend and use serverless to host a few API endpoints that can persist information to a database you should be able to figure this out fairly quickly. If you're looking to do a lot more on the backend in the future you will have to invest a lot more time learning.

Some tips for if you do try serverless: MidyJS is a middleware npm package that is extremely helpful for abstracting away the config around your functions so you can keep your business logic in one area. It helps keep your functions DRY too by allow reusability between functions. ",1524462217.0
Thommasc,"It's not about the tech. It's about people.

Small team will be more effective on a monolith.

Large team will be more effective on a micro service architecture.

If you're alone, have no responsibility, deadline and just want to toy with modern tech, go serverless framework. You can build anything you imagine.

> Can this be done serverless ?

Yes of course.",1524470868.0
clyde_89,"I see like 5 routes in this small app you describe I would make the whole thing in Express and only make the one serverless function which generates and sends an email maybe the download route too, this way the app sign-in/logout/buy would be just basic one maintenable app, while the serverless generate link, email link, download thingie would be separated from the main app.  looks like more clean architecture if it would scale into an more or app. ",1524427259.0
ppafford,https://servers.lol/,1524481906.0
rkzaa,Once you go serverless you'll never go back ,1524430833.0
cazzer548,"Serverless is always a valid solution, unless you need to keep ""it"" running. Move your application state to the DB and profit.",1524462177.0
johnnyodonnell,"One drawback I can see to going completely serverless is the inability to use web sockets to listen for events.

In my web app, users connect to the server via socket.io and listen for notifications and news feed items. It may be possible, but it's hard to imagine how I would do this with a completely serverless architecture.

Though it sounds like at the moment your app doesn't need this functionality.",1524496534.0
humpier,I don't see any reason you cannot go full serverless with an app like that if you want. Just use a frontend that makes HTTP calls to your serverless endpoints and you should be able to do it.,1524426869.0
kuob,Check out the serverless framework on github.,1524427211.0
kryptkpr,"1. Its executed exactly once, the first time you require it.  Subsequent requires will return module.exports but not execute the code again, it's cached.

2. no

3. Shared! See #1.

I strongly suggest reading 
http://thenodeway.io/posts/how-require-actually-works/
",1524406656.0
raphael999,"AFAIK:
1. The code executes when you require it, if you don’t it will never be executed nor included in the bytecode nodejs generates.
2. You can require files wherever you want
3. The module pattern is quite like a singleton pattern, if you require it from another module you will get the same connection. If for example you want to get a different connection each time you require this file you can export a function which return a connection and invoke this function after the require.

Hope it make sense, please guys correct me if I’m wrong.",1524385189.0
WhatEverOkFine,"FYI: the mongoose.createConnection is async, and the export is sync.

If you try to use the connection ( that is exported from this file ) before the database has completed setting up the connection, you'll have a problem.
",1524412246.0
dickeytk,"If your ultimate goal is to be able to wait on a single connection, I would do something like this:

    const mongoose = require('mongoose');
    const Grid = require('gridfs-stream');
    const database = 'mongodb://127.0.0.1:27017/test';

    exports.getConnection = new Promise(resolve => {
      const connection = mongoose.createConnection(database, null, (err, db) => {
        if(err) {
          console.log(`Error occured during connection to the database ${err}`)
        } else {
          console.log(`Connected to the database: ${database}`)
          resolve(connection)
        }
      })
    })

Then in your code (using async/await):

    const {getConnection} = require('./db')
    async myfunc() {
      const connection = await getConnection
    }

Or you could make `getConnection` a function that returns the single connection object.",1524428239.0
Jibbster82,Do event listeners work inside module.exports?,1524407901.0
TheBeardofGilgamesh,Oh god Loopback what a nightmare that is! It's a consulting trap. To anyone considering using Loopback . . . DON'T USE IT!,1524412338.0
RaisinBall,"Get a job, learn programming and stop spamming all of these subs. ",1524362112.0
Ztientwickler,"This sounds like a scam. Also, never openly tell people online that you are/were a criminal, that's just fucking stupid. And damn, learn to code. Search for ""Web developer roadmap 2018"". It's not that hard.",1524364987.0
MahdiM,"So you have no investment, no contacts, no original idea (meme sites are pretty much a standard these days), so why would someone partner with you?

> You just need to make the website

What you are saying is ""You just need to make the product"", that does not make any sense.",1524414226.0
dankalen,I don’t understand why we have beginner tutorials here /r/node subscribers are developers who already know node and are interested in news about it or in its community but not absolute beginner tutorials. This probably belongs in /r/programming,1524412107.0
,[deleted],1524355435.0
dissociasian,are u referring to max msp?,1524411232.0
OzziePeck,?,1524343888.0
tknew,"There is a nice mechanism in PM2 that allows to expose triggerable function within your code and that can be called via the PM2 CLI.

Check out the documentation for more information:
http://pm2.keymetrics.io/docs/usage/process-actions/#process-actions

Hope it's what you were looking for, cheers",1524334722.0
hthouzard,"You can also use a websocket
",1524335977.0
,[removed],1524344457.0
segphault,"In your app, you can create a separate Express instance that listens on either a local socket or is bound solely to localhost. Then just add routes that you can use to invoke your commands.",1524342160.0
jwalton78,"The traditional Unix way to do this would be with a signal (like sighup).  See https://nodejs.org/api/process.html#process_signal_events

But yeah, if it's a web server, you could just have an API to do whatever you need to do.",1524359435.0
artefcat,if on linux like system try interrupt signals. ,1524355262.0
artefcat,if on linux like system try interrupt signals. ,1524355267.0
NobodyMiner,"Create a secure endpoint (Login etc.) And put the output to a eval...
",1524355075.0
ChubsTheBear,Um. What's the difference between this and nodemon??,1524342403.0
,[deleted],1524483775.0
Smok3dSalmon,Cool project. You should check out redis ,1524307671.0
juandoe123,In the `get` method from [L68-L70](https://github.com/arbazsiddiqui/lru-cache-node/blob/master/src/index.js#L68-L70) why not just update the `oldNode` expiry time and move it to the head instead of deleting the `oldNode` and creating a new node with the new expiry date? Anyways cool project!,1524339606.0
kapv89,Can think of it being useful probably in the browser. Can't think of any use for it on the server. Would be great is someone can list one.,1524342784.0
m03geek,And where is the comparison to other implementations? O(1) complexity doesn't mean that it will be fast.,1524418681.0
,[deleted],1524262576.0
orebright,"This is what SSL does (HTTPS) and bonus, it covers all the traffic between your client and server, not just json in your requests. 

If you want to add redundant encryption (which I'm sure there are use cases for) there are JavaScript asymmetric encryption (RSA for instance) libraries, for GET you'd generate your public key on the client and send it with the request, the server would then encrypt the data and the client can decrypt it with the private key. For submissions the server would create the public key and do the decrypting. 

I have to admit the redundant encryption would be quite overkill. I can't think of a place it would really be justified.

If you do any kind of symmetric encryption it would be super easy to find the key and method in your JS file and your JSON would be as good as plain text for anyone who really wants it.",1524270589.0
martiandreamer,"SSL for end-to-end encryption. Binary websockets if you’re sending from server. Application-level encryption if SSL isn’t an option (but remember you can’t trust the client, who will need to know how to decrypt).",1524270808.0
s5fs,Content-type: application/json maybe? Not sure what you are after..,1524262097.0
ccleary00,"First obligatory question - are you sure the hot reload is what is causing your memory leaks? 

Memory leaks can be difficult to diagnose - can you post some log info or a stack trace? Also, what module are you using for the hot reloading?

The only thing guess I can hazard at this point is that something is not configured correctly and is maybe going in a loop creating new routes instead of reloading...",1524270244.0
danneu,"I've used Postgres at decent scale for a chat service.

To keeps things simple and stateless, I did as little as possible in application memory. I also used pg_notify/listen for pub/sub and, of course, as the mechanism for each app server to consume the stream of chat messages from other servers for rebroadcast to their own websocket peers. 

And if it ever made sense to switch databases, it would've been easy to migrate away from Postgres since the data was heavily normalized and constraint-checked.

I speak of it in the past tense since the project it was embedded in was eventually sold.",1524270512.0
mannyv,"Realistically speaking, you won't hit scalability problems with those numbers unless you do something horribly wrong like do a join for every message.


HBase is a data store, not MR; hadoop in this case was for branding.


I'd just put an interface on top of whatever you're doing so you can swap out your back end when things go bad. ",1524274097.0
kapv89,"I think the answer depends on what sort of team you have and what you are trying to do. Technically, you should be able to go pretty far with PostgreSQL, RabbitMQ, and a socket server that can scale with number of cores in a server. The number of points of failure this setup would introduce would be similar to that of using a database-subscriber. In this sort of setup, you can sacrifice guarantees of data-integrity for more performance.

Why this is technically important is that if you are not planning to provide services on top of user's chat-data, and if you can do away with not having that data at all, you won't have to worry about data scaling needs as a user's data will be available on one of the devices of the user. ",1524343628.0
ddwrt1234,"I've accomplished similar with postgres + redis and had good results, but not at a huge scale

If I could start over, I'd probably use some combination of AWS elasticache and AWS pg and avoid scaling/env/backup headaches ",1524378769.0
GarasiaKartik,Try mongodb or firebase... Those are best fit for javascript.,1524279943.0
,[deleted],1524264077.0
,[deleted],1524255664.0
camelBasketCase,Austin.,1524252571.0
tokens_express,Meetups and hackathons,1524248550.0
thedomham,Just ask on stackoverflow why anyone would bother using nodejs when there's PHP. You will find plenty of competent node devs. ,1524336111.0
yzabhi,Remote?,1524248256.0
WrksOnMyMachine,Nodeiflux on Discord seems to be where a lot of Node devs hang out. It splintered off of SpeakJS which has a very mixed bag. ,1524249668.0
blinkincontest,"https://refreshaustin.slack.com/

This is the first slack community I found, there may very well be others for Austin/Texas. ",1524261382.0
ddwrt1234,Comfortable going remote? In my DMs,1524379387.0
cinnapear,In Ohio...,1524255470.0
sjsn23,"I think your setup is good and I personally do that sort of structure in my own projects. Separating the client and server code does a good job of ensuring your app and the api are decoupled in case you ever want to setup any other clients (such as a mobile app or other api consumer). 

I also think running two terminals for dev is ok since it allows you do thing such as debug your backend with something like postman without the overhead of also running a react client and vice versa.",1524258549.0
Aurovik,"Since you want to serve locally, with both apps on the same port, you'll need to use a proxy server, like [nginx](https://nginx.org/en/download.html).

You should set up the nginx configuration so request to /app1 will be forwarded to an internal port that's running either app 1, /app2 to app 2 running on another port.

I haven't worked with Windows in a while, and generally think linux is better used as a server, but since you seem to be stuck with it I would recommend not setting up a windows service yourself, but instead to use the [pm2](https://www.npmjs.com/package/pm2) process manager. 

Here's [how to serve static files](http://pm2.keymetrics.io/docs/usage/expose/) (your react app's build folder) with pm2 and here's [how to serve using node](http://pm2.keymetrics.io/docs/usage/quick-start/).

Using this setup, you'll need to edit your react routes to reflect the new subdirectory, [here's a tutorial](https://medium.com/@svinkle/how-to-deploy-a-react-app-to-a-subdirectory-f694d46427c1) on how to do that.

However, if you are using the windows server's DNS server, you could simply use subdomains instead (like api.server.local and app.server.local) and configure nginx to proxy those to the respective ports.",1524250331.0
tokens_express,"If the priority is getting the app into production as soon as possible and not learning how to deploy production systems then using a PaaS (Platform as a Service) is your best way forward.

[Heroku](https://www.heroku.com/) would be the easiest way to get started. All you provide is the codebase and they handle the rest. The only thing you need to do is update the port to use an environment variables.

Once you get familiar with that, you might want to look into [Amazon Beanstalk](https://aws.amazon.com/elasticbeanstalk/) which is basically the same thing except cheaper, much more flexible (you can use various AWS services), but its a bit more complex to setup.

For longer term knowledge, [Digital Ocean](https://www.digitalocean.com/) is a great place to start since they and their community provide lots of domain specific tutorials like this one: [Deploy React.js (create-react-app) Node.js to DigitalOcean Cloud Hosting](https://hackernoon.com/deploy-react-js-create-react-app-node-js-to-digitalocean-cloud-hosting-72206310017b)",1524248981.0
ericmcray,"If you can use any vm like vmware, virtualbox or maybe docker, setup linux os in vm in windows. After that, like others said, use nginx to proxy your apps. 

You can find lot documentation how to setup nodejs for linux. If windows server is your only option god bless you. ",1524264860.0
willshowell,"The point of that eslint rule is to avoid mutating function parameters. In general you probably want to prefer an immutable approach, which is what the rule recommends.

However, mutating the request object is exactly how express middleware is supposed to be done. It looks like there are options you  can pass to the rule to prevent it from throwing when using `req` params. See `ignorePropertyModificationsFor`.

https://eslint.org/docs/rules/no-param-reassign",1524248820.0
AlexBV1,Why don't you use express jwt library? I was confused a little bit with custom verify token function especially when there is no actual verification. So with express-jwt you will not have that code and as a result you will not have that eslint issue.,1524371808.0
kevinkace,Assign it to `res.token` instead?,1524244186.0
JayHerlth,I think you'll be much more pleased with RabbitMQ as it's pretty much the perfect solution to what you need done. I've always used the rabbit and mongo backend for long or heavy processing tasks for web apps.,1524239674.0
anssip,"Perhaps use AWS SQS as the queue. I’ve actually used that for this same purpose myself, as a queue for video encoding jobs. You could have several node processes consuming the same queue. ",1524240039.0
tokens_express,"Bee Queue is a great module that has worked well for us. RabbitMQ is great too and has a lot of useful features missing from bee queue like dead letter queues but the setup is relatively cumbersome. If you need to get up quickly Bee Queue is a great choice.

Redis backed queues rely on redis' pub/sub feature. Clients (servers in this case) can subscribe (sub) to a channel. Redis publishes the message to the subscribers through this channel. https://redis.io/topics/pubsub

> If the server running redis dropped, wouldn't all of the jobs waiting be lost?

The key to this setup is that the uptime of the queue is purely based on Redis' uptime. You can have one or more servers (better known as workers in this queue scenario). Each server subscribes to redis when it comes online. If a server dies, the messages will still live in Redis. Redis is known for being an in-memory store, but it has an option to persist data. This option should be enabled so that even if Redis itsefl dies, it will still have the jobs saved to disk and can reload them when it come back up.",1524240850.0
kryptkpr,"Redis has good queue primitives, if that's too low level bee-queue looks like a nice wrapper.",1524249587.0
gdffff,"use aws encoder, you have no idea how many issues you’ll encounter writing this yourself",1524255648.0
ericmcray,"If you want much simpler queue saas you can check ironmq. If want to run your own queue over redis, you can check automattic’s kue peoject in github. ",1524265286.0
ccleary00,"With Redis you can also write Lua scripts to take care of actions that are a little more involved, like making multiple Redis function calls.  Lua scripts are evaluated atomically, so no other script or Redis command will be executed while a script is being executed.

If you find yourself needing to do some complex operations when you're building your queuing system, don't be afraid to reach for Lua.",1524271748.0
ddwrt1234,Bull provides a nice layer of abstraction over jobs/processors and is backed by redis for pub/ack,1524379278.0
idontknowstufforwhat,"Hey, I built one of those!

We used AWS SQS as it was managed, and allowed us to easily control the flow of encoding jobs through our system. ",1524455365.0
americancontrol,"If it belongs to an object you can do:

      myObject[functionStr]();

Otherwise you may have to use eval() which might not be the best idea..",1524232262.0
shtanton,"Beware of where that string can come from if it is something where security matters, a user might be able to run their own code if it is not properly sanitized.",1524255749.0
thedomham,tl;dr don't ,1524336388.0
locnload,"Not sure if this example is helpful....

https://github.com/locnguyen/typescript-node-starter/blob/master/Dockerfile",1524239560.0
kecupochren,I find the amount of downvotes you got hilarious. The SO really became a cancerous place to get help,1524231061.0
vingrish,"Hi dear reddit. I'm looking for best practices of building a node container. Specifically, I have the following questions:

- Should I use a non-root user in the container?
- Where to keep `node_modules` (and how not to pollute project dir on the host)
- If the goals/constrains set in the linked SO question sounds reasonable, how can we achieve those? 

## Update 1:
 I’m still working on this; will update my findings tomorrow. For now:

- the service is working with non root user (`node`)
- the content of `node_modules` is invisible to the host, however
- ~~I still need to remove node_module in the host first to get it work, and~~ an empty `node_modules` is created during `docker-compose up` if one isn't in the project directory on the host.

Thank you all!

## Update 2: 

I added [an answer](https://stackoverflow.com/a/49952703/2784160) to my own question. I still can't find a way to do it without a `Dockerfile`. But as some of you suggest, using a `Dockerfile` is favored. (Sorry for my English.)",1524229707.0
calligraphic-io,"**EDIT:** oops. meant this as a reply to @kecupochren's comment.

Well, his post has a misspelling (disadvatages). So I downvoted once for that. And he didn't use a monospace font to format the error message he got (`Error: EACCES`), so I used a sock-puppet account to downvote for that. And then, just because I'm a jealous shit, I downvoted with a few more sockpuppets! /s

SO was so brilliant when it first came out. Then it dissolved to shit. I always upvote posts I find useful; I think I'm the only one there who does that. Really, questions / answers with > 1000 views and like two upvotes?!? And nearly every helpful question / answer I read has a ""*This question violates our community guidelines against asking questions on Stackoverflow*"" comment from the moderators. Terrible.",1524248466.0
zer0gravy,tried adding :ro after the container volume path?,1524236847.0
dvidsilva,"I have an open source project that uses docker and node 

You can see what I did here. I had some trouble getting it right and it has space to improve 


https://github.com/corgicode/api

Any suggestions welcome",1524244451.0
Aurovik,"A little off-topic and more of a general hint ; for most deployments, you should consider using the node images based on alpine, like node:9-alpine.
Alpine is much smaller than the default debian image (so faster to deploy) and uses considerably less memory on your server.",1524251149.0
runvnc,"Sounds like it boils down to an issue with the volume.  Google for 'docker volume permission denied'

If you can't find a solution you can try copying the official Dockerfile and tweaking it.  It's not actually hard to do it that way.  And reading that dockerfile may give you a clue about the problem.",1524252537.0
andrewgremlich,"In my opinion, you need the command option abstracted out in a dockerfile.  It makes it cleaner and the intended purposes separate.  I developed a personal website and I used a compose file to build the image from a dockerfile.  Then I used the compose file to connect to networks and volumes easier.

You can check what I did.
https://github.com/andrewgremlich/gremlichme",1524283284.0
fabienjuif,"Seems neat!

Starred. Next time I do node/postgres I'll give it a try :\)",1524229081.0
panbhatt,Seems a great one bro.. congrats.. ,1524229202.0
TomerCodes,"What device are you getting this error on?

Mobile browsers like Safari and Chrome are notorious for how they handle localStorage in private browsing mode. They let you access localStorage but they have a limit of 0, so when you try to save something to localStorage you get this error.",1524194521.0
tizmagik,"This is cool, thanks for sharing!",1531255276.0
BenZed,"I've seen this before.

Likely, there's an .emit somewhere that's trying to serialize data with circular references. Check all of your socket middleware to make sure you're sending the data you intend to.",1524181756.0
BustinTriples,You have an infinite loop somewhere. Do you have a function that ends up calling itself?,1524181099.0
nkristoffersen,"Knex!!! 

I use knex for Postgres but it is just as suitable for MySQL. 
",1524151295.0
mattboutet,"I have a number of projects in production running Objection, which is built on top of Knex.  I've been really happy with it.

If you're running hapi, check out Schwifty too - it allows you to use Objection as a plugin",1524151613.0
Bsapot,"We use sequelize in production without any issues. The initial learning curve was rough but otherwise it fits all of our needs. 

The migration process works well. You have to manually define the migrations it won’t do a diff for you but we don’t see that as much of an issue",1524192453.0
backend_node_dev,"I'd appreciate any input on this! Pull requests very welcome, as well as links to any alternative/similar projects.",1524148034.0
,[deleted],1524171417.0
chinacrash,This is an awesome project.,1524148454.0
AlienSoldier,crazy project! keep up looks amazing,1524165771.0
janxspirit42,"I'd recommend Objection, to me it's essentially all of the nice-to-haves you'd want from knex (relations, upsert, CRUD with objects) and dropping down to knex is as going Model.query().[knex_method]. It's my default ORM for interacting with databases with nodejs as it seems to just work.",1524154713.0
-Subalee,I use Objection.js,1524160696.0
SomeRandomBuddy,"I use a minimalistic library which uses template params to ensure resulting query strings are safe, and then for the most part I write them myself from scratch. They don’t change too often and it keeps a nice tight lock on exactly what the DB layer is doing. Takes longer up front but always pays off in my experience. Not having any ORM magic in our backends tends to save us time when we’re troubleshooting production issues, and newbies generally have an easier time learning our codebases since the queries are doing exactly what they need to, no less, no more, and they don’t need to learn a complex ORM, even if it offers “simple” methods for basic queries/joins",1524152053.0
MagicLeaves,"I found myself switch to knex not long ago and I love it. I was used to simply use a connector and writing queries. I even created a basic helper for the inserts that parsed objects into query strings.

When I found out knex, it was a blessing. It had a lot of feature that interested me. Such as object inserts/updates/wheres. I was not particularly interested in an ORM and still am not very much.

I like the simplicity of using queries and I think that knex hits right where you can just isntall it and use it without much configuration.

It also helped me a lot transition from callbacks to promises and now i'm all about that promised life.",1524152415.0
danneu,"I personally write raw SQL, though I have a small lib that uses tagged templates to make it more ergonomic: https://github.com/danneu/pg-extra

    async function getUser (id) {
      return pool.one(sql`SELECT * FROM users WHERE id = ${id}`)
    }

For dynamic queries, like a `/search` endpoint, I use knex to build the SQL string.",1524176000.0
kapv89,"Try and use my ORM, tabel, http://tabel.fractaltech.in

It's a datamapper(with relations, caching etc) which works with plain-JS objects and arrays.

A normal ORM forces you to introduce classes related to individual tables in your codebase. As a result, a part of your business logic resides in these classes, and the rest of it resides outside them.

Since tabel ORM works with plain JS objects and arrays, working with tabel ORM results in you implementing your business logic in the form of functions which exists on their own, and hence, can be used in various parts of your application freely(for ex in routes, cli, sockets, queue etc).

This results in a much more maintainable codebase, and makes it easy to work with more than one data-sources.",1524179176.0
cemremengu,"IMO rule of thumb for all kinds of ORMs/DALs is that less is more so I use knex. No magic, dead simple, no boilerplate, what you get is what you see.",1524177568.0
misterlively,Knexjs by itself is a great balance of being easier to use and extremely flexible. I’ve used a lot of ORMs and eventually regretted it every time.,1524152999.0
,[deleted],1524150370.0
djslakor,"I'm curious to hear experiences of someone using this in production.  Is it working out well?  (Other than the author, please).

Also, has anyone used sequelize-typescript now that it's available?  It seems to give you a lot of the same dev-time features while utilizing the time and battle tested sequelize library. ",1524149656.0
diverightin63,Awesome! These changes look great. ,1524155356.0
Tioo,"This ORM looks awesome. How does it compare to sequelize ?

Can't wait to try it out !

",1524163398.0
gajus0,"Here is a different approach using code generation, https://github.com/gajus/postloader.",1524164638.0
kapv89,"I do not like TypeORM. It makes writing Javascript more like writing Java, which I think is a step backwards for JS community as JS is a very different language from Java, and the type systems available in JS are much better than that of Java (Flow, Typescript).

Don't want to sound like I am selling something, but I have developed and open-sourced an ORM, tabel, http://tabel.fractaltech.in, which is a datamapper ORM, and focuses on providing the smallest, and the most efficient abstraction possible to work with relational databases in node.js.

I am using it at my own startup, I know of at least one other startup using, and it had around 350 downloads in the last week. Right now supporting only PostgreSQL because 1) That's what I use 2) lack of a proper ""returning"" clause makes it a bit cumbersome to support other databases.

I understand it takes a lot of work to push an open-source project to critical mass. And no one wants yet another ORM. At the very least, I hope that tabel catches a bigger ORM author's attention, and the new ideas that are there in tabel get implemented in some other ORM, and hopefully, one that uses typescript, like TypeORM itself :/",1524174411.0
geon,"You are not allowed to set or read cookies for another domain. 

The only exception is that parent domains can set cookies for subdomains. ",1524142507.0
inabahare,I use git. What I do is I clone (or pull when updating) the master branch on my server and then I can run `npm install` and start the app,1524132008.0
Gluaisrothar,"Depends if you are using a platform e.g. heroku or elastic beanstalk.

Platform, just deploy the code without dependencies, and it figures out the rest.

If you've got your own server then you need to deploy everything yourself including installing node and a process manager to keep it up and get it to have many processes.",1524125721.0
richraid21,"I actually prefer debugging Node using the Chrome dev tools remote debugger. Being able to use the native dev tools in Chrome is amazing. You have access to all the tools: heap snapshots, etc. ",1524188194.0
inabahare,"I mean, renting a VPS like Digitalocean or Vultr is always an option",1524119813.0
,[deleted],1524132263.0
ingrown_hair,"Sure. I use heroku for new stuff because I like the way you can create a dev->qa -> prod pipeline.

Zeit Now looks cool but I have run it in production.

",1524119686.0
r0ck0,"> From what i can tell, these appear to be geared towards hosting websites that are powered by node.

Basically they're virtual machines, but in high quality internet datacenters.  They're for hosting anything you want, where you want full control of your own server, without paying for dedicated hardware.

No need for AWS or Azure.  They're more complicated than you need, they're aimed more at large websites and other systems that need multiple servers, and deal with automation to spin up/down servers automatically and moving dynamic IP addresses and storage between different servers.

You just want a regular ""VPS"".  It's just a simple virtual machine with a dedicated static IP address and fixed storage.  They start from like $1/month for very basic ones with only about 128mb RAM (not very useful).  

You can get a decent one from Vultr with 512mb RAM + 20gb SSD storage for $2.50/month that will be fine for your use.  And you can always upgrade the VPS without reinstalling anyway.

I've used all these VPS providers, and they've all been good, have good reputations in general, and very easy to use control panels:

* [Vultr: from $2.50/month](https://www.vultr.com/pricing/?ref=6827162)
* [Linode: from $5/month](https://www.linode.com/pricing?r=7bbfdb7b1ab52e65f9c317b8cc92195cb629f0a7)
* [DigitalOcean: from $5/month](https://www.digitalocean.com/pricing/?refcode=c622e06d041c)

Also you don't even have to commit to a whole month.  You can just try them out for less than $0.01 per hour and play around with them.

> cryptocurrency trading bot that is built entirely in node, and while it works perfectly fine running from my computer, i feel like getting a hosting service would be a benefit

Yep, you're much better off doing hosting or running bots on a VPS rather than your home internet connection:

* Better network uptime.
* Better power uptime (all these datacenters have UPSes + backup generators etc).
* Lower network latency + higher bandwidth.
* No need to worry about gaps when you need to reboot or turn off local machines at home etc.
* Hardware redundancy (storage, and power supplies) and maintenance etc is all transparently handled for you.  Generally your VPS won't even need to reboot if a disk or PSU fails - because they're all hotswap and being monitored 24/7.

Once you have your own VPS, you'll likely find other things to use it for too.  Hosting websites, chat systems, monitoring and scraping etc.  Even just being able to simply share files to people easily from your own web server is very convenient - they don't need any special software to receive files from you.",1524133818.0
randomFIREAcct,I use digital ocean with docker containers and it works quite well. Having a front end or not doesn't really matter when hosting a server.,1524142882.0
GazZy422,Cheap VPS and docker is what I use for pretty much everything like that,1524142963.0
jenshart,I would consider elastic beanstalk on aws. You get 12 months for free and you can basically just upload a zip of your root directory (without node_modules) and it handles everything for you. ,1524175617.0
danneu,"imo for something like a trading bot, i'd rather just ssh into a server and run it in the foreground of a tmux tab. could rsync changes from local computer to server and then restart the process. tends to be a good enough start.

usually you want something more automated but a trading bot is something you likely want to minimize indirection around as you get its kinks worked out.

as things mature you can look into formalizing the deploy step with something like shipit.

the other nice thing about running your own vps is that you can run other projects on it as you familiarize with a linux server. this is pretty much how all my projects start until they're ready to ""cost me rent.""",1524191628.0
WhatEverOkFine,"The call should be async.  Try this:


change the function signature to:


    A function signature that takes a callback:


    function checkDynamoMatch(folderName, subId, callback) {


call it like this:


   calling a function that takes a callback, supply a function to be the callback


    m.checkDynamoMatch(dynamoKey, subId, function(err, key) {
        if (err) {
            // handle error
        } else {
            console.log(key);
        }
    });


change everywhere you're using ""return"" in the original to use callback(err, value), 


node style dictates that you return any error as the 1st argument to a callback


    callback(err, result);


where result would be:


callback(err, null); <-- in the case of error


callback(err, folderName); <-- when you find a match


callback(err, ''); in your 'no match condition


( sorry about formatting )",1524109513.0
kryptkpr,"I like debug but I'm using it a lot less these days because it doesn't play nice with graylog .. I have docker-compose piping stdout but that doesn't allow for a multi-line message, or a message with a JSON payload, etc.. stack traces were especially painful, so now I have an additional lib that speaks GELF.  Suggestions/best practices are welcome.",1524141003.0
trout_fucker,"Sort of. This is the most popular tool:

https://github.com/lerna/lerna",1524078302.0
BehindTheMath,"You can use [pnpm](https://pnpm.js.org/index.html), which saves a single copy of dependencies for all projects. ",1524078471.0
88slides,I'd also love to learn some best practices for both small projects and large projects. I feel like I'm flying blind. ,1524086774.0
tttim45,https://blog.risingstack.com/node-hero-node-js-project-structure-tutorial/,1524090078.0
neurod1sk,"I learned by watching YouTube tutorials and checking how people structure their folders. This is a good one: https://youtu.be/L5Nle1VXYnw

Apart from that, I use a slightly changed variation of the above. 

root
- - server
- - - controllers (route handlers)
- - - constants (error msgs and such)
- - - models (for db)
- - - helpers
- - - services (DB handlers)
- - - routes 
- - index.js (initialize app, etc)

I’m really interested in checking other ways too. ",1524089940.0
humpier,"You might be interested in this: https://github.com/gothinkster/realworld

Or a framework like Sails.js

Both are opinionated ways of building Node projects.

But honestly, this is one of the challenges for new Node devs. Unlike Rails, Django, or Laravel there aren't a ton of universal best practices or a dominant opinionated framework in Node, so everybody builds things slightly different.

One thing that can help is to contribute to some other people's open source projects to learn from them.",1524101708.0
mitchie_smith0417,Hello! I've been through that situation. But turbo 360 helped me a lot. you can out their tutorials. Easy to understand and they explain why you need this and that https://www.turbo360.co/tutorials. Goodluck,1524115094.0
Parasomnopolis,https://github.com/i0natan/nodebestpractices,1524125282.0
AlexBV1,The biggest problem of Node.js that there is no conventions which used by let's say even 80% of users.  That's why you have to make an agreement with the team before you start make a project. I tried to research and get logic from popular libraries/projects on GitHub but they are all different. So I picked few popular boilerplates and made structure. I plan to write an article soon about it.,1524110173.0
AxelTerizaki,"The best way is to see what others are doing and try to understand why, and pick what you feel comfortable with.

The main rule for me is to separate your functions and code into smaller JS files whenever possible, and avoid big blobs. This is very helpful when several people are working on the project and it makes for less conflicts when merging branches and features.

Nobody can claim they have the best way to organize their files. My project (https://lab.shelter.moe/karaokemugen/karaokemugen-app) is certainly not the best way to do it, but it works (and some people even told me it was easy to find files and what they do in there, so...)",1524129492.0
tokens_express,Github is also a great place to learn from other high quality projects,1524140262.0
danneu,"I have a demo app built with Node + Koa + Postgres that tries to do various less-trivial things like ratelimiting and authn/authz: https://github.com/danneu/koa-skeleton

Live demo: http://koa-skeleton.herokuapp.com/

Shows one way to structure things.

If you're using Express, koa is very similar so the demo project should still be somewhat useful.",1524160161.0
Ricjd,Put everything in one file!!,1524099110.0
martiandreamer,Is deploying Node apps in Docker containers an option?,1524079271.0
meirbon,"Could it be something as simple as binding the app on 127.0.0.1 instead of 0.0.0.0? 127.0.0.1 will only let you access it from localhost. Don’t have much experience with Windows Server, but thought this might help.",1524083244.0
Thraksh,Is it simply a firewall issue on the server? Have you checked the port that your app is listening to is open to the network?,1524089513.0
,"You haven't defined `user` when rendering the profile view:  
  
    router.get('/profile', (req, res) => {
        res.render('profile');
    })
  
like this:  
  
    res.render('profile', { user: req.user });",1524082195.0
purpledollar,Not easy but Try having them jump to a certain timestamp on pause.,1524076619.0
IUsedToBeACave,"Have the client and server start exchanging their local times (in milliseconds) at a regular interval. Use this information to keep track of the difference and latency between the server and clients. Now when a user invokes the play/pause function the server will use the maximum latency of all connected users (plus a little extra just in case) and calculate a time in the future that the actual client side video should be paused/played. Send this information to every user, so the local client can know when to start/stop the video.

Thats my best generic explanation for how I would attempt to do this. There are still problems since I can't guarantee that each clients machine will be able to actually start/stop the playback of a video in the same amount of time, but this should be able to get pretty close. ",1524091303.0
GoldenRetrieva,"I was actually working on something similar recently and the guy who made [this](https://github.com/calzoneman/sync) sent me the following:



The actual synchronization logic happens in player/update.coffee.

In short, when a video begins, the server broadcasts this to clients and sets the timer to -3 seconds.  Each client loads the video and immediately pauses it.  Once the timer reaches 0, the server sends another message and all clients begin playback.  The 3 second lead-in is to allow the video to buffer a bit, preventing choppy playback.

Every few seconds, the server broadcasts the current timestamp in the video and the client checks that timestamp against its own timestamp.  If the difference is more than the configured threshold (default 2 seconds), the player is seeked to the server's timestamp.
",1524100454.0
-killertofu,I built something exactly like this using socket.io there are a lot of variables but having users regularly broadcast their time to make sure they are reasonably close is a good start. ,1524125816.0
BaconBrad,Just curious but are your dependencies versions the same? If not you should switch to Yarn and use a yarn.lock file or make sure you are using package-locks with NPM5. This ensures the dependencies you get are the same ones he is using.,1524095525.0
blueswatchs,Possible to see what error(s) are spat out? I am guessing here: it has do something with paths.  ,1524072436.0
Suepahfly,"My best guess would be that the other dev was using some build tools he had installed globally and are not reference in package.json.

But without any error it's just a wild guess",1524121363.0
wobmonsta,"Solution: Not sure what the original dev was up to but they apparently had tree different  ""node\_modules"" locations that resolved for them. after collecting all of the modules into the same location in the project it seems to work as it should.  

thanks for all the help!",1525184820.0
ccb621,"You could use a session, or a cookie, or local storage.

Alternatively, you could not worry about what seems to be a non-issue. What is the harm in a user navigating to a registration success page? Why is that page worth protecting?",1524071386.0
hyakkotai,In case it isn't clear; every user has their own session whether or not they are logged in. They don't need to log in to have a session - when they do log in you modify parts of the session.,1524079535.0
binarytide,they seemed to have pulled the graphql package from npm and github. looked interesting except I can't test graphql on it..,1524102897.0
legolas8911,upgrade guide from alpha.11 to alpha.12?,1524227299.0
BenjiSponge,"Almost all frontend frameworks (React, Vue, Angular, etc.) are CSR (client-side rendered) by default.

It just means the HTML is sparse when you load it and then gets populated by JS after it's loaded. ",1524058802.0
Suepahfly,"In client side rendering JavaScript code executed by the browser overrides the default HTML that was delivered from the web. 

You can render just a small part of a page (like a page modal) or the entire page with JavaScript in the browser.",1524121661.0
kapv89,You can easily use this: https://github.com/facebook/create-react-app/ to get a CSR React app up and running quickly.,1524345850.0
klien_knopper,"I feel like this article is based in a limited understanding of `Promise`.

>async/await has given me the ability to cleanup my code a lot, by saving indentation levels (the infamous JavaScript callback hell)

Promises do that too. I feel like the author of this article doesn't really grasp the fact that `Promise#then` acts similarly to a flatMap in that if you return a promise in a `Promise#then`, the next then in the chain doesn't have a promise as its parameter but its resolved value.

Personally I prefer using straight up promises to async / await though I think it's a pretty subjective preference.",1524056876.0
-soma-,"It seems like the author hasn't heard of `koa`. 
Koa brings async syntax sugar to connect middleware applications - without all the extra work and lines needed to wrap promises around `next` calls. ",1524065242.0
ShadwChsr,"Why do people keep suffering at the Holy Grail of Express for some reason? There are a lot of modern alternatives available. Since IBM purchased it, does it even have any direction? I suspect not, given IBM's focus on building a replacement stack (LoopBack) and deeper integration with their Platform as a Service IBM API Connect stack. Their steering committee discussion GitHub hasn't had a meeting in over a year. 

I feel like it was the ""first"" HTTP server and everyone just uses it because that's what all the ""Introduction to Node.js"" tutorials use. Outside of patches, it seems dead.",1524088185.0
Londomain,"Quick answer: parse server is a node wrapper with a GUI that hooks into your database. It also has built in, out of the box solutions for auth, push notifications, web sockets and sessions. You also have the ability to query your database with pseudo SQL queries by writing custom endpoints on the server. ",1524051024.0
chrismatheson,"Parse was originally a BaaS (Back-end as a service) and was bought by facebook and eventually shut down. The Parse server was open sourced to allow those using the service to host their own version and continue as normal.

Ive Use Parse in an application before and i can say that i probably would again. Sure there are some ""i wouldn't have done it that way"" parts but overall its a great way to implement 95% of web-app / mobile-app back-end VERY quickly.",1524052646.0
jcrka,"Faster prototyping. And a lot of those prototypes work in production later without rewriting to java.   

To bad that node ORM sequelize is very childish and buggy compared to hibernate. ",1524040025.0
smthamazing,"Sharing TypeScript types, utility functions and some validation logic between server and client. No need to manually keep them in sync.

I'm *almost* able to have a completely automatic *typesafe* API helper on the client, but I'll need to change my approach to controllers for that. 

Also, React.js with server-side rendering. Because pure SPA is rarely a good choice, and using HTML-generating templates on the server-side while manipulating the DOM on the client is a nightmare. SSR avoids any duplication of presentation logic and is a real life saver.",1524040795.0
robfromboulder,"Because Node feels like Java did when it was young — community driven, fast moving, and gaining in popularity.  Despite the shortcomings of JS, there are many excellent things about the Node ecosystem. (As one example, compare the effort to publish a Node module with getting a library on Maven Central...the former takes <5 minutes)

It’s weird to say as a longtime Java guy — but if you can get over using JS, there’s a lot to really recommend Node. ",1524069818.0
texasbruce,"You seem to have a misunderstanding of the word backend, and how “easy” JS/node is.",1524060188.0
chriscorf,Try running 'npm install minimist' from your terminal in the same directory as your package.json file.,1524033811.0
drunkcatsdgaf,[html2pug is a super handy tool](https://html2pug.herokuapp.com/),1524024546.0
tbarge1038,Getting coded errors from Node APIs is going to be a huge win for most of the services we run at my company. That's a great step for troubleshooting and debugging.,1524061844.0
godlychaos,"I know it is a small thing, and that you can easily recreate it with util.promisify, but having the fs functions come promisified out of the box is a nice little QoL thing. [jasnell fs promisied tweet](https://twitter.com/jasnell/status/960733696461438976)",1524067536.0
tokens_express,The routes shouldn't change often and if they do you'll likely be changing the controller method anyway. The thing you need to worry about is the base url (/api) and versioning (/v1). These should be dynamic and are only two variables to maintain.,1524066422.0
phouri,"I think jest is a superior testing engine :) 

Also typeorm is awesome for mysql if already using typescript instead of knex",1524049714.0
productionx,Looks good,1524002005.0
nothingduploading,fuck typescript.,1523998260.0
djslakor,"Are you using nvm or another node version manager by any chance?
",1523998889.0
username_is_taken43,"Have you tried searching the filesystem?
Have you performed any update recently?",1523999170.0
Drunken__Master,"I had several headaches with android studio, here are some things that might be helpful to look into

- do you have any Java conflicts ?

- do you already have an instance of an android emulator running ?

- after the ""npm run android"" command doesn't work are you trying the ""yarn android"" command ? if so you might want to try uninstalling, then reinstalling your packages, this will rebuild your dependency tree and sometimes that's enough to prevent certain conflicts .

- Does anything happen if you refresh your android emulator ? (Cntrl + R) 

- are you currently a super user ? (you shouldn't have to be, but if you are it can sometimes change certain settings)",1524024591.0
scriptfailmatrix,Use Docker ,1524038135.0
rollickingrube,Awesome. Much needed. Thanks.,1523994791.0
batmansmk,Here are the slides: https://fr.slideshare.net/inovia/10-essentials-steps-for-kafka-streaming-services,1523992292.0
iLikeComputers,checkout grpc,1523982174.0
erulabs,"This is nice, but I dislike adding Babel to server side packages. I know, I know...

But deploying and dealing with source maps can be a bit of a nightmare. `source-map-support` is a non-trivial change to node, and I cannot _possibly_ suggest more strongly again writing JSX on the server. Ops teams have been begging developers to separate client code from server code since the early days of Perl and CGI applications, and node has taken a huge step backwards recently in that sense. New versions of node support everything you want outside of `import`/`export`, which is probably going to change in the future anyways. Just use `require` and be happy with your fast, simple, straight forward production debugging.

""But server-side rendering is faster"" you say - well lets talk about that when your server is buckling under load and a CDN would deliver a 5mb bundle 10x faster than your stressed out, stateful, single threaded application.

Still, _strongly_ on board pushing developers towards Flow and Eslint! :D",1523996583.0
diegohaz,"This is an opinionated boilerplate that I use on my [own packages](https://github.com/diegohaz?tab=repositories).

Feedback is appreciated. :)",1523978256.0
i95b8d,"To detect duplicate HTTP POSTs, generate a GUID or other unique identifier and include it as a hidden input in your HTML form.  In the POST handler, before saving the data, check the GUID against a list of ""used"" GUIDs, and only process the data if you haven't already processed the incoming GUID.  It would be easiest to do this with a database, but you can certainly do this with text files. See [this post from StackOverflow](https://stackoverflow.com/questions/442678/preventing-double-http-post)",1523973295.0
tokens_express,"Readable version of the code

	var fs = require('fs');
	const log=require('simple-node-logger').createSimpleLogger();
	var express = require('express');
	var bodyParser = require('body-parser');
	var app = express();

	app.use(bodyParser.json());
	app.use(bodyParser.urlencoded({ extended: false }));
	var port = process.env.PORT || 8000;

	app.use(express.static(dirname + '/server')); 
	app.use(express.static(dirname + ""/public"")); 
	app.use('/images', express.static(__dirname +'/images'));

	app.listen(port, function(){
		console.log('server is running on ' + port);
	});

	app.get('/', function(req, res){
		res.sendfile('intro.html');
	});

	app.post('/userID', function(req, res){
		//save the userID on a text file var userID= req.body.userID + ';';
		var data = fs.appendFileSync('temporary/userID.txt', userID, 'utf8');

		return res.sendfile('main.html');
	});

	app.post('/submit', function(req, res){

		res.sendfile('main2.html');
	});


	<button>Reset</button> and its JavaScript:

	document.addEventListener('DOMContentLoaded', function () { 
		document.querySelector('button').addEventListener('click', clickHandler); 
	});

	function clickHandler(element) {
	      location.reload();
	}",1523971786.0
orheep,You can just send a 302 redirect to avoid post resubmit on refresh.,1523984071.0
Scotsoo,"You could use xhr post requests and post programatically rather than using a form 
https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send",1524006242.0
SafetyMoose22,"below I have put a code snippet I have made to install node versions on debian arm systems. I have usually just install 4.7.3, but I have modified this script by having it point at v8.9.4. This should work but I am at not able to test this at this time. 

if you would like to use other version you can use this link: [node dist](https://nodejs.org/dist/)

    #!/bin/bash
    wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-armv6l.tar.gz 
    tar -xvf node-v8.9.4-linux-armv6l.tar.gz 
    cd node-v8.9.4-linux-armv6l

    sudo cp -R * /usr/local/ 
",1523968058.0
martiandreamer,"Use nvm. It will be your simplest route to installing Node anywhere, including on a Pi. ",1523972960.0
rc2142,"I’ve installed it on several using the following commands

    wget https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-armv6l.tar.xz

    cd /usr/local

    sudo tar xf ~/node-v8.10.0-linux-armv6l.tar.xz --strip=1",1523972257.0
,[deleted],1523966620.0
400_Bad_Request,What's your os? I assume it has a ppa repo. apt-get the latest version of node,1523968675.0
entregrammer,"a Procfile is needed to run your app. 
Create a Procfile with:
web: node path/to/serve.js

Right now it seems to be working, but your react state seems to have some issues. try setting a default state with the correct structure and avoid deep nesting.

Edit: https://desolate-brushlands-16337.herokuapp.com/api/check is returning html not json, move the api route higher than the wildcard (*), since no matter what request is made, if its not an asset, it always drops in the * route.
Edit2: Just to explain, express routes always take the first match to a route and execute it, thats why moving the wildcard (*) to the very bottom of the routes is a good idea.",1523972975.0
bored_reddit0r,Is this the traversy mern course?,1523979577.0
shaqule_brk,"log __dirname on heroku, see if it's right ",1523964376.0
m3l7,"you should use next(err) inside your error handling wrapper and manage the custom error handling inside a middleware.
Or set the http status code and body directly using the response object",1523960105.0
tokens_express,"Is it possible for you to share a code snippet? That would make this a lot easier.

If you're looking for more flexibility, it sounds like you need to remove some responsibility from the wrapper. It should only return normally or catch errors and return them and nothing else. Then you can use the return value for anything

    async function asyncWrap(fn) {
        let err, res = await fn().catch(e=>err=e)
        return { err, res }
    }
 
    // example usage
    const { res: user, err } = await asyncWrap(getUser(id))
    if (err) {
        res.send(...)
        return
    }
   
    res.send(user)",1523962241.0
Aenima4six2,"This is the generic async middleware I use in all my express projects.
 
    module.exports.requestRejectionHandler = (handler) =>
      async (req, res, next) => {
        try {
          return await handler(req, res, next)
        } catch (err) {
          next(err)
        }
      }

and here is a usage example.

    /**
     * GET - Gets all clients
     */
    router.get('/', handleRejections(async (req, res) => {
      // Fetch the clients
      const user = await getCurrentUser(req)
      const models = await clientService.retrieveAllClients(user)
      const resource = models.map((model) => halson(model).addLink('self', `${req.baseUrl}/${model.id}`))
      res.status(statusCode.OK).jsonHal(resource)
    }))",1523968288.0
AlphaX,"are you sure you really need to mock amqplib? why not test the consumer with a mock message, and mocks over the rabbot methods?

anyway to mock required libs you can use a tool such as https://www.npmjs.com/package/proxyquire

The Jest testing framework also have some cool tools for mocking required libs",1523963534.0
overthetopclock,"in one my project i am using mockery to replace amqplib , you can just create an object with all the calls and then replace with mockery",1523968200.0
jcurve347,"If you’re doing the development work using company resources, typically there is language in the employment contract that will outline who owns that work output. 

The way it was depicted in season 1 of Silicon Valley was pretty close to reality. ",1523927490.0
trout_fucker,"If you are salaried or did it on company property, they own it. You do not.",1523926027.0
DerpsMcGeeOnDowns,"“I am pretty ranking...”

Is that how people up the ladder talk?",1523940174.0
secesh,"Life is about making choices and that includes picking your battles.

I made a thing one time. Similar to you I wasn't employed as a developer when I made it. I don't have developer legalese in my contract. But once the thing was made, I had a choice: sell the thing, or get back to work. I decided to get back to work. The experience I had making the thing, and the passion I have for making such things, is part of what makes me good at my job. Ultimately I enjoy my job and I've had good success with it.

At one point, I came close to giving a portion of my thing to the company to solve a different problem with similar requirements. I disclosed the conflict and the company walked away. I wasn't willing to just give away the component because it was part of the other project. They weren't interested in exploring any sort of agreement on the matter. I might reckon part of their reasoning was that they valued me more as an employee than as a potential business partner. There's definitely a conflict that arises if you, as an employee, try to sell something to your employer.

We've both moved on. I've enjoyed new opportunities at the company. Sometimes I wonder what might've happened if I had pursued the other project, but ultimately I'm happy with where I am, what I do, and what I have. .... and if it all goes to shit, I can always go back to those other things...

Don't expect your employer to welcome your proposal, no matter how good or viable it may be as a product. Part of what makes any product worthwhile is having a company willing to stand behind it and support it. As a single employee working for another company, your product lacks this backing.",1523966600.0
NuclearSpaceHeater,Can you please fuck off with the spam?,1523925789.0
captainahhsum,I am about 40% of the way through. And I have been enjoying it. I found the class because I guess Rob Percival(amazing web design and Android development teacher) helped him put the class together?,1523930132.0
cgijoe_jhuckaby,I wish medium had a downvote button.,1523924006.0
shawncplus,"This is about the 100th identical ""left-pad is indicative of a bigger"" issue articles I've seen. None of them actually suggesting alternatives, solutions, or feedback. They're just tons of ""Hey, I'm just saying..."" in blogspam form. Complete wastes of time.

What's more, this one was written _after_ Github implemented their automated package.json security notifications for known vulnerabilities and there is absolutely no mention.",1523920876.0
Xilc,Hmmmm that's not a loaded title at all.....,1523920489.0
jkeaus,"Learn from glibc and libstdc++, put the most often used functions into a library and make regular stable releases, then import modules per your own need for those not included in the ""standard"" libraries. 

otherwise it is indeed chaotic, one little require(""whatever"") may bring in hundreds of thousands of files from who-knows-how-many modules suddenly, it's absolutely insane.",1524014011.0
TheOneRavenous,"Am I the only one reading through my dependencies? 

Usually if it relies on over 5 dependencies and those create a cascade I don't use the package. Easier to just create my own local package with the three to four functions I want since they usually don't rely on 100 dependencies. 

Also alot of packages out there are wrappers for node core functions so it's pretty easy to flatten a dependencies tree if you know how to read code. ",1523983448.0
MUDrummer,"Right, because everyone in the Java world writes their own isEmpty method to check if a string is null or blank and doesn’t just include Apache commons to do even the most basic of comparisons. ",1523921146.0
,Have you ever wondered about Linux distros and their dependencies... specifically their package managers... have fun :),1523983204.0
_nuke_the_whales,"The access tokens have an expiration date. If you do not save the refresh token the user will have to sign in again with google to gain another token. If you don’t mind your user having to sign in regularly that is fine, but if you want their session to be able to persist for long periods without them signing in again, you’ll need the refresh token.",1523917245.0
fullheap,Why not just use a real reverse proxy like nginx or caddy?,1523954283.0
tokens_express,First step on the road to microservices,1523930083.0
bschwind,Horrifying architecture,1524045044.0
Eric_S,"First, I don't think this question is node specific, though it could be.

Second, there are a few ways that this could be an issue.  These aren't in any particular order, just the order I thought of them.

First, you'll want to do a lookup on the domain names of your domain and the one that is mirroring you.  If they both resolve to the same IP address, then that is useful information.  It means either that the DNS is messed up or your hosting provider is doing name\-based virtual hosting.  Both are possible, only the first is definitely an error.  If they are, look up in the documentation, or even just ask them, if your hosting company is deliberately hosting multiple hosts on the same IP address.  

If they're not and the IP addresses are the same, this is almost definitely a DNS issue.

If they're different, how close to each other are they?  If they're within the same class C, or even a nearby class C, it would look more like they're using the same hosting company that you are but the hosting company botched their configuration.

Next, if you pull up the mirror website and view source, do you see your source code, or an HTML page setting up framesets and such?  If you see framesets, then this is probably something deliberate by the people that created that site.

Finally, you can check your server logs.  If you're seeing access from your own IP address that you're browsing from \(or the IP address of a NAT firewall that you use to access the internet\) when you hit the mirror site, then this adds a lot to the likelyhood of it being a configuration error.  If you see some other IP address, then it could be a configuration error or a deliberate proxying of your site.",1523907511.0
findmetherightpath,"I've experienced this before where, like /u/Eric_S stated, framesets were used to pull in the website. This was used for a clickjacking attempt. If this turns out to be correct, you will want to set X-Frame-Options to DENY or SAMEORIGIN, as well as add the following to your Content-Security-Policy header: frame-ancestors 'self'",1523908058.0
BehindTheMath,It could be an old DNS record that wasn't updated. Contact their registrar. ,1523904001.0
djslakor,Bad webserver config? ,1523902738.0
cyanydeez,Why?,1523920874.0
bvbrandon,Next step is to provide a way to just feed args to the CLI vs answer the prompts but let me know what you think!,1523893358.0
Nephyst,I've been trying for years to understand how these dang promise things are supposed to work with no success. After watching this informative tech talk I can finally say that I now have a fully intuitive understanding of them. 10/10,1523885782.0
elrodrix,LOL,1523883694.0
Sulaiman_the_dank,"I tried implementing what I learned from this video, worked perfectly! A solid 5/7",1523889663.0
TheIncorrigible1,"You shouldn't upload node_modules in your source code, just fyi.  That's the point of the package.json file",1523888877.0
elrodrix,"""Application error""",1523883720.0
Tvde1,"The application errors on heroku, great work",1523883695.0
the__itis,"Use appScript. it’s pretty much nodejs with finite libraries.

tons of boilerplate around the web to.

i have forms coming in, data goes to spread sheet, appscript converts input to individual CSVs, those get copied to a drive folder that is monitored. Nodejs then picks them up and does stuff. ",1523881567.0
chadtlo,Did you complete this all by yourself? I ask because I am starting to build a website and bringing all these moving pieces together is a feet onto itself. And thanks for the nice description on github.,1523887331.0
iqover190,Nice. I was thinking about building react and graphql sample app. You did a much better job.,1523892636.0
bch8,This looks great! If you don't mind I actually would kind of like to use this as a starting point for a separate framework. I've been meaning to build something like this but rather with a serverless backend on AWS. ,1523921510.0
maximusprime2328,Rather than just using GraphQL as an endpoint you should look at Apollo for server side rendering your React code. The NYTs has a framework called KYT that handles all this and webpack for you. ,1523892344.0
ecares,Old but gold https://hueniverse.com/performance-at-rest-75bb8fff143,1523871628.0
martiandreamer,"Bugs fixed vs submitted, developer activity (even if a bug arises, will it be fixed quickly?) and community involvement. ",1523878807.0
hugo__df,"The test is:

\- How much better is it than Express?

:D",1523881081.0
sotimting,"First, I look for typos.",1523886589.0
oldyoyoboy,I thought this was a post about quality summer fireworks...,1523886820.0
ccleary00,"You've got a pretty thoughtful list of criteria for selecting a framework already, but I'll add a couple more things:

Similar to the number of open bugs (issues in GitHub, idk what they're called elsewhere) look at the ratio of closed to open pull requests assuming this is open source and you have access to such data.  A large number of open PR's, without much recent reviewer/maintainer discussion or activity on them could be a bad sign. You might run into a bug or a feature you need that someone else has already done some work on but is waiting to be merged. There's nothing worse than twiddling your thumbs waiting for the code to get into the project especially knowing someone's already provided a fix.

Along the same lines, look at the release schedule.  The maintainers could be merging PR's left and right, but might not be releasing an updated package containing those features/fixes that often.  Most projects have some sort of nightly builds but not all do, so this is something to look into.

Another thing to potentially consider is how the framework's design/patterns/etc. match up with the current knowledge of you and/or your team.  Whether you're introducing this framework for team use or just personal use, it's still a valid consideration.  Unfamiliar patterns might delay implementation, lowering the amount of ROI from implementing a framework in the first place.  Most of the node REST API frameworks follow somewhat similar patterns from what I've seen so this may or may not be an issue.",1523926883.0
coolcosmos,"It should be:
payload: Joi.object().keys(...)

... would be the object that is currently in your code.

Edit: the last function called on your expirationDate Joi object as a typo. It's supposed to be required, not require.",1523853430.0
proboardslolv5,Type safety means that if you mistakenly use a variable incorrectly (compare a string to an integer) the compiler will fail and tell you where the error is rather than coercing one type into the other and returning a 'truthy' value. Personally it's not something I have too much of a problem with so I only use typescript at work. It's a bit more verbose so I find it annoying to use at home.,1523833366.0
empty_other,"I use Typescript for a faster and more precise auto-suggestions mostly. And to make it easier to keep track of variable types (without having to use hungarian notion on the variable names). And to avoid simple typo bugs.

Never been a fan of javascript (nor nodejs) until typescript, personally.",1523836354.0
rotharius,"A lot of answers already touch on the merits of types for typesafety and static analysis. I would like to add to that that types can assist in more accurately aligning your code with the mental model of the business domain.

Types (and classes and interfaces) reflect concepts relevant to the problem you are trying to solve. They communicate meaning, function and compatibility.",1523858283.0
r3jjs,"This is a commonly asked question.

https://www.reddit.com/search?q=typescript+vs+javascript

",1523852821.0
squat001,"I come from a TCL and Python background and have been working to introduce Node.js into the team I work in, due to it being added as an extension to the framework we work with.
Our JS requirements are small and we are only a team of 7 but I have done this with TypeScript and started to use it in my own projects out of work.

Found the work flow is great and catching type errors in method calls all the time, especially when method is written by someone else or myself several week ago.

Also allows a standard feature set so we can write code using proper OO even if stuck using ES5 in production and when this framework gets upgraded to ES6 our code will still work we can just update our CI pipeline to compile to ES6.

Clear object design, js objects format can be difficult to follow which is the dynamic nature of js, but using interfaces to clearly declare the objects data structure is so helpful and forces coders to stop and think about the impact of changing it dynamically. Been really helpful in one case were I have been working with another developer in getting a good and simple structure setup before he jumped into to much of the code only to find limitation several days or weeks down the line.

And our unit tests are simpler as no type checking tests are needed, this also is in most of our code as very little type checking at the start of functions.

Finally you don’t need to use it all the time, at times prototyping or a simple helper module can be done in js, I have a couple which I will change to ts if they stick around. Recommend playing around with it using a good IDE see if it works for you.",1523859564.0
zayelion,"Type safety, but I feel like it has more to do with how one was taught to program. There are certain errors like properites being undefined and having nested elements that Typescript prevents you from running. Also forcing you to pick your types when a function is returned. It completely blows up if you dont code a certain way. Which is a good thing. If you already code this way and dont need to lean on the compiler it'll seem like a step back.",1523922205.0
spmaster007,'Cause Microsoft want to advertise the another shitty standard.,1523875549.0
marinespl,http://lmgtfy.com/?q=why+typescript,1523871991.0
skeliskull,"It gives some extra syntactic sugar to allow your IDE to tell you if you did something wrong. Saves a lot of time with certain things. It's also got some nice features that standard js doesn't have. For example, default parameters in functions if a parameter is nullable.  'function (optional = new Set())' ",1523836410.0
secesh,"Because the people who prefer static languages want to hang with the new cool dynamic kids.

And because MS is up to their old tricks. They're embracing server-side javascript in effort to win-back developer minds. They're extending it all with vscode. If they gain enough traction, they'll exterminate the parts that don't run on windows/azure.

I know typescript is open source so I'm exaggerating MS's power here. Still think it's a valid point, though.",1523836919.0
kyle787,I use pm2 for deploying production apps. It’s pretty nice and handles restarts and logging as well. It’s free too. ,1523834135.0
neurod1sk,Take a look at Docker,1523832614.0
DaJuukes,"good suggestions from other commenters here. Ideally use Docker or clone the master git branch and use pm2 to run it. 

For a good vps host I have used EC2, DigitalOcean, and OVH and they are all good for small scale stuff. I recommend digitalocean for a starter though. The cost is a bit higher but worth the support imo.",1523853108.0
Cyral,You could build your own model format and then write a few functions to transform them into the correct models for each,1523828400.0
jwalton78,"Clearly you need to add typescript, so you can definitely it in four places.",1523828053.0
theigor,Just saw this post. This is exactly what I'm talking about in your other post. Using typescript and typeorm has allowed me to define my class just once and use it for both orm and everything else.,1523831051.0
yarauuta,ORMs really need to start accepting JSON schema.,1523834728.0
funny_games,Objection.js uses json schema,1523842442.0
Hcmichael21,"This is the similar concern I had with graphql. I was starting on something to try it out and was not excited that I would need to define my model again. I think a good solution in this space would be very popular. One model for ORM, api documentation, graphql, etc.

I saw [this](https://github.com/graphql-compose/graphql-compose-mongoose) for mongoose to graphql but something that could handle it all would be very cool.",1523839446.0
wahh,"This might be an interesting answer to Joi to Mongoose: https://github.com/yoitsro/joigoose Full disclosure, I have not used this library before, but I'm probably going to look into it Monday morning.

We deliberately chose HapiJS at my company as our routing framework because it requires a configuration based approach for routing. That lends itself to to being able to use [hapi-swagger](https://github.com/glennjones/hapi-swagger) to automatically generate the API documentation (we had lots of issues remembering to keep our RAML updated). Since Joi schemas are used to specify/validate the payloads for those route configurations you get some reusability there. Combine that with that joigoose library I specified above, and you might be able to accomplish the trifecta. Of course, this requires you to use HapiJS...which is probably a no-go based on your reply to the guy who suggested loopback.io....unless you're already using HapiJS. In that case...sweet!",1523841524.0
RickyMarou,"have the entire thing written in typescript and use typeorm as an ORM.

I didnt try this setup yet but if i ever get a personal project going this is what I am looking at for backend",1523830878.0
Smok3dSalmon,Swagger codegen will dump out lots of boilerplate for you,1523830163.0
Actually_Saradomin,"I think if you use nestjs & typeorm you only need to define it once.
https://docs.nestjs.com/recipes/swagger",1523839375.0
thajunk,"Using Joi with Hapi.js allows you to autogenerate API documentation using lout, or swagger + docs using hapi swagger.

Idk if there is solution for the db models ",1523848086.0
NoodledLily,"I've used Iglu before (Snowplow analytics) https://github.com/snowplow/iglu-central

I bet you could programmatically generate from a central json 'master' but I'm not sure that's a good way to think about this problem. Maybe you could think more like defining views as data formats change all the time",1523860764.0
Tvde1,Don't forget ES6 classes,1523863798.0
Ariquitaun,You can simply use swagger to define your api then utilise something like swagger-tools to define middlewares that do your validation for you.,1523878569.0
rawrmaan,"I think [RESTyped](https://github.com/rawrmaan/restyped) is what you're looking for. (note: am author, had same pain as you)",1523992891.0
pushthepramalot,Take a look at loopback.io,1523819982.0
dk01,Graphql,1523821246.0
xyNNN0479,Have a look at https://github.com/typeorm/typeorm,1523822006.0
nothingbutt,Anyone using Objection.js for this? I want to try that next but haven't yet. Something maybe OP to also look at.,1523825698.0
theigor,I've been using typeorm for about a year. It's got its issues and weird edge cases but it's better than other things I've tried. One (what I consider) huge advantage is you only need to define your class once. Unlike things like mongoose or others where you define your models using some json notation which is useless as an interface or anything else. ,1523822704.0
kapv89,"Take a look at my ORM, tabel, http://tabel.fractaltech.in/ ... Give it a try, and if you run into any problems, feel free to drop me a pm. I think you'll find tabel to be the exact thing you are looking for.
",1523826013.0
yazalama,I'm working with sequalize right now,1523821391.0
hicksyfern,"At the top of each file, you require your dependency. That’s it.

If that causes an error, I wonder if you’re rolling your own module system, or are concatenating your files as a build system?",1523807454.0
monsto,"Well, you are posting this in /r/node... tried ""the node foundation"" or whatever it's called?

Best thing to do is just get logged in to one and start contributing.",1523798804.0
sunderskies,Start by making PRs on existing projects. Eventually you will gain credibility and might get to work on greenfield projects. ,1523802484.0
renoirb,"First, make contributions.
Then, more contributions.
Then you might get added as a member of the organization so you can review people's contributions.
",1523814836.0
Buckwheat469,"This article's result is nice, but they start with using the http2 library and then switch immediately to fastify. Sure, show fastify if you want, but what about just using http2 or express? At least one example would be nice since I've never seen anyone use fastify before.",1523780131.0
bindik,"You are trying to inject something to nodejs, or nodejs to something?
Sorry for asking, just didnt understand properly ",1523792803.0
,[deleted],1523776327.0
ryuno,Needs a catch in case the resource save produces an error and to return the Res.send,1523762346.0
kkogovsek,"It looks like you are using mongo right?
The error that is trown is invalid value for ObjectID.

Mongo uses objectids for record indexes and it is a 24 characters hex string. In your route you defined /:_id so you should call it with something like 
blogoutput/1234abcd5678adef24571234
but instead it looks like you are trying to use
/blogoutput/edit",1523771880.0
adamtaylor_13,"First of all, don't post code in the plaintext description. Put it in a GitHub Gist or a Pastebin message. It's impossible to read that otherwise.",1523766873.0
jgordon615,"What are you paying as the id parameter?  Perhaps it wants a number and you gave it a string.

Also, you have a syntax error after your assignments.  Trailing comma should be a semicolon.",1523768511.0
WeaponizedMath,.catch,1523772076.0
Tvde1,"Go to stackoverflow but actually don't even go there, just google.",1523785076.0
SlightlyLethalDev,"You can get it running in an IDE usually too. I use VS Code and attach the debugger to it, then you can walk through and see how it executes. Also, I recommend making a new Git branch before you change anything, just in case.",1523764352.0
theworldisyours94,You can add a build system to sublime text that calls Babel node so you can run your ES6 code in sublime. I have a github gist if you would like it in a pm.,1523802059.0
grajagandev,"Try running in the Chrome Devtools debugger with a command line like:
    node --inspect-brk lib/cli.js game -d 2017/11/02",1523762275.0
davidmdm,"What operations are you using that are async? Most file writing operations have a sync version. 

Or use node 8 with async await if you want to flatten away the callbacks and promises ",1523756501.0
,Web based JS isn’t strictly synchronous either... you still need callbacks in the same way. The whole point of using Node is its asynchronous nature...,1523756111.0
idrism,"Just use async/await.  That'll make your code ""appear"" to your human eye as normal procedural code.",1523757224.0
goodwid,"> unnecessary

I don't think this means what you think it means.  If you have operations that are taking a few seconds to complete, they are, by definition, asynchronous.  Is there a specific reason that you're opposed to treating async operations as async?",1523757500.0
WeaponizedMath,"I mean, if you try hard enough you can turn a hammer into a screwdriver too.",1523755362.0
TheIncorrigible1,"Why aren't you using the tool for the job, like a shell scripting language?",1523756454.0
Kargor,"look into async await. Any promise based functions can be run ""synchronous"" (not really, but same effect) using await, and any traditional async callback-based functions can be easily wrapped up in a promise.",1523757306.0
BenjiSponge,"At the end of the day, it's probably going to be easier to just learn to do asynchronous stuff the right way.

That said, with enough ingenuity, in the right circumstances, what you're describing might be possible.

For example, gulp v4 is based around asynchronous JS streams in files that export the functions and being able to call those functions from bash (with the gulp command). That will turn a highly asynchronous function in a file into a synchronous CLI command, which is kind of like what you're describing.

Maybe if you give more detail, we can find a way to work with it.",1523757412.0
jwalton78,"*If* you are using node.js as a sort of fancy shell script environment, then note that many built in commands are available in sync and async varieties.  For example, instead of fs.readFile(), you can call [`fs.readFileSync()`](https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options).  Or, if you need to call out into a shell process, you can call [`child_process.execSync()`](https://nodejs.org/api/child_process.html#child_process_child_process_execsync_command_options).

As soon as you start using any kind of third party library that does IO, though, you're probably not going to have sync and async versions available.  If you want to write async code that looks *almost* like sync code, though, have a look into async/await:

    pb = require('promise-breaker');
    fs = require('fs');
    
    async function doit() {
        // Call a callback with `await`.
        const fileContents = await pb.call(done => fs.readFile('foo.txt', {encoding: 'utf-8'}, done);
        // Call a function that returns a promise (or another `async` function).
        const thing = await somethingThatReturnsAPromise();
    }
    
    doIt().then(
        () => console.log(""Success!""),
        err => console.log(""Boo!"", err.stack);
    )

edit: Fix formatting",1523759868.0
skeliskull,"Use async / await. If you can't do that then you can also use promise chaining to reduce nesting complexity. It won't make node synchronous it'll just make your code look synchronous. The best of both worlds :)

You can also use a library like 'co' to wrap generators into promises. Kind of turns them into async functions where instead of doing 'await' you use 'yield' instead.",1523760932.0
snowman4415,Assuming you want the stable versions I would just go with whatever is easiest. Probably a package manager?,1523745519.0
evs-chris,You should definitely go with nvm. Many headaches saved later on.,1523746487.0
raistlinthewiz,nvm.,1523746693.0
IUsedToBeACave,"You endpoint for blogpost is created with app.post, you either need to POST to that endpoint or change it to app.put",1523726895.0
thunderknox,"solved anywayz due to a url not adding edit at it and heads up  i am a beginner with very little time due a deadline
",1523750504.0
fahq2m8,"    app.post('/Blogpost', (req, res) => {

Durr, why can't I PUT to `/Blogpost` guis.",1523740812.0
mistralol,"
Stright up it seems quite simple. However it doesn't actually work correctly. From experience and use over years of using some status monitoring packages. There is serious problems with that monitoring script...

1. It does a loop on each site. Then sends a message if it fails. So if you monitoring 20 websites and the network connection fails on the monitoring side in odd ways. Expect to get 20 messages. This alone proves its never really run in production ;)

2. There is no state tracking. The ""schedule"" looks like a cron tab that runs once a minute. This means expect multiple messages *every* minute for every site.

3. The tasks *could* take longer than 60 seconds to run. Will the schedule actually just keep running new ones on the io loop every minute? I think so. This means you now have a process that can exploded in ram / socket usage and possible fail if monitoring a large number of sites.

4. This kind of monitoring script often doesn't work well either. For example anyone running a serious enough website that needs monitoring would be nuts not have some kinda gateway (nginx) and multiple instances of the server running with auto restart enabled on them. So the monitoring won't actually highlight *most problems* in *most environments*

I see code like this a lot where the person writing it knows just enough to be really fancy but they put a lot of effort into making something simple really hard/complex to do and it also ends up a complete pile of junk. Mostly because they focused on using the *cool* stuff in the language rather than actually just solve the real problems.

Ultimately a shell script like ""for i in `cat sites` ; do curl --fail ""$i"" || sendmessage ; done"" does much the same thing. So yes I think its over complex. But some something as complex as the original author has. It would be able to probably have unique contact details per site. Automatic disarm after an alert is successfully sent with a reminder at a later time and also send a ""cancel call for help"" if the site comes back up its self.

",1523721955.0
MahdiM,"Besides what /u/mistralol said you also have the following problems with such an implementation:

1. You don't monitor latency, which is a pretty big sellingpoint of the SAAS uptime checkers. For example you often want to say ""alert me if the latency has averaged over 500ms over the last 5 minutes"".

2. You now have another service to monitor the uptime of. How do you monitor the uptime of your uptime monitor?

3. You have no way to check the uptime from different networks/locations. If this is run from the same network/cloud as the service you won't know if it's actually reachable from the internet. If it is not run on the same network/cloud you will never know if it's a problem on the monitor's network or the actual service's network.

4. It has no history. When you want to know how long the service was down you will need to manually check the first and last time the service sent you a text, and if you want to calculate to total downtime to check against a SLA or similar you get a whole lot of manual work.

All these things (and more) are the reasons people pay third parties to do this sort of thing.",1523789333.0
deadcoder0904,"[This blog post](https://www.menubar.io/twilio-uptime-monitoring-node-tutorial) describes the example in the repo. Also, [another blog](https://blog.ragingflame.co.za/2013/2/14/roll-out-your-own-uptime-monitor-with-nodejs) I found did the same thing. But I think doing it like this might be expensive. I don't know for sure. 

1. So if anyone can say what I am missing from the rest of uptime monitoring services like Pingdom or Uptime? And can a small script can be turned into a SAAS with minimum server cost?

2. Also, would the same thing written in Go like [CheckUp](https://github.com/sourcegraph/checkup) be any cheaper?

3. Finally I would like to ask will it be efficient to run an Uptime Monitoring Service in NodeJS (what I mean is low maintenance cost & low server cost) or should I run it in other languages like Go or Python or Rust?",1523716142.0
NoInkling,"> The following function takes an async iterable over strings and returns an async iterable over lines

Any reason you couldn't just use the readline API?",1523752616.0
greim,"I like unix pipe syntax:

    foo | bar | baz

but I'm not so crazy of the syntax for piping these async iterators:

    baz(bar(foo))

This is endlessly confusing for me and makes me have to stop and think every time. At least with node.js streams, you can get the operands back in the right order:

    foo.pipe(bar()).pipe(baz())

Maybe node.js streams will get the ability to produce and consume these async iterators someday? Better yet, if some future version of JS gets a pipelining operator:

    foo |> bar |> baz",1523754959.0
davidmdm,Really cool! Can't wait for async generators!,1523731096.0
ImtheDr,"not sure, but you have a / on the name of your view:

       res.render('/bloginput...

shouldn't it be just 'bloginput'?",1523731514.0
Adoroam,Me too. I just got laid off but I learned so much and wanna keep moving.,1523677502.0
codeinprogress,"Sharing few resources that personally helped me. There are many others out there of course.
Node design pattern: http://thejackalofjavascript.com/node-js-design-patterns/

Node docs: https://nodejs.org/api/synopsis.html

Using MySQL with Node.js: https://www.sitepoint.com/using-node-mysql-javascript-client/

Good luck",1523704402.0
AlphaX,"you probably have your body parser not configured correctly. you might:

- have it after the route definition - express middleware order is important
- not defined body parser to handle your request type (json vs form), take a look at the docs - https://www.npmjs.com/package/body-parser#expressconnect-top-level-generic",1523664459.0
_nuke_the_whales,Going to need more info here. Could be something to do with how you’ve hooked up body parser or your HTML inputs.,1523664088.0
thunderknox,forgot to add ('ok') but  this error is driving me mad what am i doing wrong if its not picking up anything! D:,1523663428.0
hagnerd,"Can you post a link to the source files/project? 

I think with body parser it should be req.body.somethingElse like title or body, but you have to hook that up yourself. ",1523663937.0
martiandreamer,"while (1) { 
  playSound(‘changed.wav’); 
}

",1523665157.0
haufii,Watch Silicon Valley by chance? Lol,1523669281.0
DropTheGauntlet,Neat! But in the show it only fired once the value dipped under a specified threshold; I would assume this script would fire near constantly as the price of Bitcoin fluctuates continuously.,1523671941.0
kuatsu_janka,"[This reminds me of this here comic](http://gunshowcomic.com/513) (http://gunshowcomic.com/513).

",1523691560.0
Slugs23,Sounds like a terrible idea ,1523681855.0
Potato2trader,That means alarm is always playing 😂,1523686857.0
mistralol,"
I was more expecting something like an audio vario from a glider.. sounds like https://www.youtube.com/watch?v=9nea3-XIyeU

Happy noises going up. Bad noises when going down.",1523742126.0
zaphod42,"Meh.  Price in fiat is irrelevant.

1 Satoshi == 1 Satoshi.",1523686624.0
OzziePeck,"` if (tag.nsfw) post.hide()` yeah, just add another unneeded dependency. ",1523659993.0
,[deleted],1523662964.0
BenjiSponge,"I hear this sentiment *a lot*, and I've been spending tons of time really considering it lately. I'm... what I would consider an intermediate developer, but I'm sure more than half of all people would argue with me on that. I have about 3 years of work experience immediately after college, almost exclusively at startups. So I'm not trying to lecture or come across as an authority.

I guess my biggest issue with this mentality is that I so rarely hear actual, concrete reasoning behind it. It's always ""the technology is immature"", ""the community is small"", etc. When I pick a dependency, whether it's a library, framework, language, runtime, whatnot, one of my most important heuristics is ""how quickly do I understand its value proposition, and how much trouble do I have integrating it into what I have now?""

And I guess my takeaway so far is that that heuristic has yet to hurt me. I have never bet on a small technology and later said, ""Ugh, I can't believe I put all of this weight on <tool X> and now it's abandonware/bugging out on me/stopped working"".

You know where I see issues? When I'm using Ｔｈｅ　Ｉｎｄｕｓｔｒｙ　Ｓｔａｎｄａｒｄ™. I've never had a circular dependency issue with Rust, but I've spent countless hours dealing with various linker problems in C++, which is to say nothing of package management (absolute drudgery), template issues, memory issues (dear lord), etc. I can make a similar analogy between Angular and React (or even Inferno), ES5 and ES2015+, vim and neovim, etc. So far, the best heuristic I've found for how ""stable"" a library is has been is ""how big is the library?"".

So, like, yeah, I try to evaluate my dependencies by popularity and stability and that kind of thing, but the recommendation of avoiding all projects with under 1000 stars on GitHub is pretty silly, particularly when it comes with 0 data points of bad things happening when a company bets on a small library.",1523643962.0
,[removed],1523620208.0
RedditorFor8Years,"Try this helper. I use this everyday.

    utils.getHandleBarsHelpers = function () {
        var helpers = {};
        helpers.xif = function (v1, operator, v2, options) {
                switch (operator) {
                    case '==':
                        return (v1 == v2) ? options.fn(this) : options.inverse(this);
                    case '===':
                        return (v1 === v2) ? options.fn(this) : options.inverse(this);
                    case '!==':
                        return (v1 !== v2) ? options.fn(this) : options.inverse(this);
                    case '!=':
                        return (v1 != v2) ? options.fn(this) : options.inverse(this);
                    case '<':
                        return (v1 < v2) ? options.fn(this) : options.inverse(this);
                    case '<=':
                        return (v1 <= v2) ? options.fn(this) : options.inverse(this);
                    case '>':
                        return (v1 > v2) ? options.fn(this) : options.inverse(this);
                    case '>=':
                        return (v1 >= v2) ? options.fn(this) : options.inverse(this);
                    case '&&':
                        return (v1 && v2) ? options.fn(this) : options.inverse(this);
                    case '||':
                        return (v1 || v2) ? options.fn(this) : options.inverse(this);
                    default:
                        return options.inverse(this);
                }
            };
            return helpers;
            };

In the view you can use this as follows :

    {{#xif comment.author.id '===' currentUser._id}} .... {{/xif}}

Note the quote around the === condition.

Since you are using express, you need to register these helpers.

    app.engine('handlebars', exphbs({defaultLayout: 'master', helpers: utils.getHandleBarsHelpers()}));
",1523640085.0
code_also_fifa,"I'm not being annoying here but you should definitely use helpers.

    Handlebars.registerHelper('ifCond', function(v1, v2, options) {
      if(v1 === v2) {
        return options.fn(this);
      }
      return options.inverse(this);
    });

",1523629607.0
sheshbabu,"You can use https://github.com/zeit/pkg

I wrote a small intro to pkg few days back: http://www.sheshbabu.com/posts/packaging-node-js-code-into-cross-platform-executables/",1523611648.0
monsto,ITT: people that don't know what a compiled executable is.,1523654105.0
QW4K,"Put shebang at the beginning of your script: https://stackoverflow.com/questions/24253027/node-and-shebang-help-executing-via-command-line and make sure its executable (chmod +x )
",1523606844.0
gdiocarez,"There is a similar compiler used like Electron which you can deploy in Linux, OSX and Windows. You can run 1 command and deploy to these different OS plus you can choose if it’s 32bit or 64bit. 

https://github.com/evshiron/nwjs-builder-phoenix",1523630509.0
WhatEverOkFine,"Yes and it's very easy, just add the following to your package.json:


    ""bin"": {
        ""<command>"": ""<executable>""
    },

example:

    ""bin"": {
        ""sha256"": ""./cli.js""
    },

and then npm install it either locally or globally

e.g.

    npm install -g

Here's an [example](https://github.com/jeffallen6767/sha-256-js/blob/c1eaaf1a6a8f884a25a721ec860febc9451e9450/package.json#L6) from one of my repositories that lets me ""sha256 -f <filepath>"" on the command line to check the integrity of my downloads.


Also, I use the great [commander](https://www.npmjs.com/package/commander) module to handle command line args.

Hope this helps!
",1523626023.0
dagthomas,https://www.npmjs.com/package/nexe,1523607394.0
weedzgobot,"Here is a great turotial for building a CLI with Nodejs. Only uses Node built in tools. 

[https://x\-team.com/blog/a\-guide\-to\-creating\-a\-nodejs\-command/](https://x-team.com/blog/a-guide-to-creating-a-nodejs-command/)",1523616636.0
ecares,https://github.com/zeit/pkg,1523627336.0
HoverBaum,"If your target audience has node you can just write an npm module and have users install it globally.

Commander is a great library to help you build things like that https://github.com/tj/commander.js/",1523614614.0
djslakor,Zeit's pkg is the only one i know of.,1523635579.0
hthouzard,Thank you all!,1523701554.0
,[deleted],1523629210.0
Ob101010,"    g++ a_node_project.c

:-)",1523655986.0
pyt1m,http://lmgtfy.com/?q=Is+there+a+way+to+compile+a+node+project+into+a+command+line+executable%3F,1523653230.0
yellowyetti,"chmod +x [filename].js then to run, ./[filename].js",1523603326.0
Ariquitaun,"Docker would be the easiest. Not exactly what you want, but close enough. ",1523641222.0
Mcshizballs,Npm run?,1523601730.0
MWrathDev,set up your own workflow / dev ops,1523599729.0
kevinkace,"That sounds feasible, check out the Node FS module, glob on npm.",1523599700.0
Fullstack_Questions,"You should check Andrew Mead's 1.5 year old Nodejs course. He starts by teaching how to create command line apps. 

You will use packages like yargs (yarrrrrrrrgs)",1523632687.0
BehindTheMath,"Node doesn't fully support ES6 modules yet, so don't use them unless you're transpiling. ",1523585316.0
VCShape,"There is a limited support on ES module and it is experimental. 
[Here ](https://nodejs.org/dist/latest-v8.x/docs/api/esm.html)  to see the usage. You will need to add argument when running node.
",1523594891.0
,[deleted],1523597328.0
Cyral,"Using a database for file storage is [not a good idea](https://stackoverflow.com/a/3751/1218281), use the filesystem and serve the images as static content through nginx, or use object storage (e.g. Amazon S3) if your using a hosting platform with something like it.",1523577845.0
techgeekg,"You are beginner in nodejs,  you need to learn more about Upload and display image with NodeJS and Express functionalities and how to implement properly on your projects to getting accurate results. You can take help from this - https://gist.github.com/bingeboy/5589501",1523603210.0
MrStLouis,This looks pretty cool. It would be awesome if things were installable. Like I wouldn't be for storage or routes for a graphql app but auth would be great,1523596738.0
Str00pwafel,"Just think of it like you are installing a complete SDK to building web apps, the thing you push to the client is a fraction of that (50kb-500kb).",1523568105.0
,[deleted],1523572796.0
Tioo,"When you `npm install -g create-react-app`, it installs the create-react-app cli which allows you to create individual projects using `create-react-app {name}`. 

When you create a project, a bunch of dependencies *for that project* are downloaded from npm. These dependencies include dev dependencies (babel, webpack, etc...) and application dependencies (react, react-dom).

create-react-app offers a lot of features for development, so it installs *a lot* of dev dependencies. This is why your project directory is massive.

But only a fraction of that gets sent to the client when you build and serve your app. Try running `npm run build` in your project directory and look at the size of the resulting `build` directory. This is what actually gets sent to browsers. You will notice that it's minified. `create-react-app` does a lot under the hood to optimize your application code, hence the large amount of dev dependencies.
",1523573455.0
ndmweb,"It sounds like it probably installed supporting modules and build tools.

Here's a line from the [ReadMe](https://github.com/facebook/create-react-app) for `create-react-app`:

> If you want to try React without hundreds of transitive build tool dependencies, consider using a [single HTML file or an online sandbox instead](https://reactjs.org/docs/try-react.html).
",1523565598.0
scaleable,">Working with node.js and expecting not to download half the internet on each `npm i`

>2018

Jokes aside, CRA is an opinionated and quite big package with many tools you might not use. This is somewhat expected. If you roll up your own build system you might come with something smaller, but then you'll be losing time. Or there might be smaller react bundles around (not recommended).

The `npm list` for a created react pp is quite big.

Side note: NPM caches tons of things, you might be able to run CRA offline with some flags.",1523566547.0
l3l_aze,"If you did not already have the `create-react-app` package installed from use on another project (whether as a direct dependency of your own project, or a peer dependency -- a dependency of a dependency) then it would have needed to connect to the internet to download & install it.


Just made a dummy project with create-react-app as the only dependency, and the dummy app is 106 MB with no dependencies other than what create-react-app adds to the app, lol.",1523567936.0
Chris9513,"If you don't want to have multiple copies of everything you can PNPM which only downloads one version once, then symlinks it to all your projects. Has worked really well for me!",1523603181.0
jkeaus,"for frontend you will be having a much smaller footprint.

backend node.js is the concern, in that sense it is so bloatware, a npm-install will pull in thousands of files with hundreds MB, out of control sometimes I felt.",1523639759.0
ddwrt1234,"A lot of good stuff in there, make sure you get your fill!",1523602484.0
jIsraelTurner,"You need to download the required libraries when creating a new react app, so by default, yeah you need to be connected to the internet. But yarn (alternative to npm) will cache those libraries on your machine, so if you create more projects, it should be able to do it without internet.

https://yarnpkg.com/en/",1523574054.0
mypirateapp,"bloatware bloatware bloatware, i want to fuzzy match a string on percentage accuracy so let me go and add a library that does levenshtein, jaro winkler, jaccard, percentage similarity, boyer moore, knuth morris pratt, rabin karp and 20 other algorithms, hey who doesnt like one big package, this is exactly what all library developers are doing, open teh botbuilder package for example from MS and look at how many dependencies they have, jeez cant you implement the string matching yourself, lets start a new movement called 0dep movement and have libraries that dont use any other libraries, totally contrary to the principles of traditional software development but lets get rid of the ""traditional"" on this",1523604355.0
OogieFrenchieBoogie,"https://www.npmjs.com/package/joi

I like using Joi for object validation, I use it this way to define my APIs : 

\*
module.exports = {
  method: 'GET',
  path: '/content',
  handler: assetHandler,
  config: {
    validate: {
      query: {
        url: Joi.string().required(),
      },
    },
  },
};
\*",1523544487.0
keyeja,I’d suggest writing JSON Schemas and validating Input with a library like „ajv“.,1523564995.0
-soma-,"I also recommend using `joi`. 

If you're using `koa`, you can use `koa-joi-router` library.  This library enables you to define the validation on routes easily. 

Example: 

    const koaRouter = require('koa-joi-router');
    const Joi = koaRouter.Joi;
    const router = koaRouter();
    const controller = require('../controllers/myModel');
    
    router.route({
      method: 'patch',
      path: '/:id',
      validate: {
        params: {
          id: Joi.number().required(),
        },
        type: 'json',
        body: {
           name: Joi.string().required(),
           color: Joi.string(),
        }
      },
      handler: controller.update,
    });
    
    module.exports = router.middleware()",1523549822.0
segphault,"I have been using JSON schema (via the ajv library) for validating post bodies. It's a bit heavier than using a basic validation library, but I like that my schemas are declarative and trivially machine readable. I can also use the same schemas on both the frontend and the backend, with the same validation library. Another nice advantage is that it makes it easy for me to document my API and its validation expectations with Swagger.",1523577570.0
Ariquitaun,You can use swagger-tools to set up a validator middleware that will check requests (and also responses if you want) against a swagger spec of the api.,1523627442.0
kapv89,"You can use this async-validation lib I made: https://www.npmjs.com/package/@krab/shape

It'll fit all your use cases. And once you use it, you'd prefer it over most other validation libs. Probably all of em.",1523650424.0
Capaj,I am so glad I am building APIs in GraphQL now and all of this bullshit get's handled by graphQL for me. I can't wait for the REST to die out.,1523565714.0
lee_macro,Check out restjs they use them for middleware like streams and some other use cases,1523552660.0
frenchPressedFolgers,"RxJS can be useful if you have a lot of asynchronous data/events that need to interact with each other, since otherwise you would have to manually track how those events interact with each other. If that isn't your case, then there's no reason to use it.

",1523570352.0
l3l_aze,"The implication early in the article that async/await makes code synchronous is not a great idea -- it does not do so, and that's made very obvious with some basic mistakes made when trying to use it as if it really were.


Also, plenty of basic typos like `asynch` when async was meant, and `readible` which is where I quit reading.",1523523753.0
boon4376,"Was worried about having to learn async-await, but this really simplified it for me in a use case that would be practical for the type of code that I work with every day. I am constantly changing promises together to construct data from multiple API calls. It looks like async-await will be very helpful to me. Thank you!",1523537077.0
mcpolandc,I would like to see this elaborated on. Are there any recommended patterns for error handling so there isn’t the need to try { } catch every single request? I know that we could define one function to wrap every request in but are there any there other options for consideration?,1523522244.0
bilporti,"Update: When I type localhost 9998 and after that manually type: POST / HTTP/1.1
Host: 127.0.0.1

And press Enter two times - it sends a request.
I have researched, that Node http server uses HTTP/1.1, which requires Host header to be passed over. But I have seen node applications that can do node app.js | nc localhost 9998 and start streaming successfuly. How can this be accomplished? ",1523602508.0
extinctSuperApe,Don't forget digital ocean,1523538147.0
TheAverageWonder,I don't see my Raspberry Pi anywhere on that list...,1523544521.0
NobodyMiner,Now.sh,1523538115.0
grimscythe_,"> Poor documentation

In Digital Ocean. What? Digital Ocean has an amazing documentation. ",1523562606.0
nkristoffersen,Elastic beanstalk on Amazon Web Services or App Engine on Google Cloud. Anything else and you better know what you’re doing. ,1523517679.0
mahinthjoe,Heroku.com,1523520941.0
ianepperson,"Linode, but I haven't shopped around lately. $10/month server still seems pretty reasonable. ",1523545154.0
N3KIO,"Wow so cheap...

https://www.vultr.com/pricing/

* https://cdn.codeclouds.com/wp-content/uploads/2017/11/chart1-1.png

",1523539778.0
Alex_cevi,Shared hosting is what I use lmao I’m a cheeky boi ,1523546659.0
OzziePeck,Vultr or DO,1523556229.0
willBthrown2,"Aruba Cloud - €1,00+VAT /month (EU)
1 GB RAM, 20 GB SSD, 2 TB/month data transfer

https://www.arubacloud.com/vps/virtual-private-server-range.aspx

",1523557853.0
yarauuta,EC2 + ELB on AWS,1523540148.0
seedlio,Anybody have experience with Node on OVH?,1523557348.0
mtsch11,"anybody using this? https://github.com/githubsaturn/captainduckduck
",1523566127.0
loakkar,"I used A2. Http://a2hosting.com
",1523570663.0
gdiocarez,no love for Linode? :(,1523599901.0
dhananjaygoel1,"Thanks, everyone for such useful feedback on my blog and making it worthwhile. :)",1523874742.0
crisedumax,\+,1526409169.0
jrandm,"Those null bytes (`\u0000`) won't typically be visible, that's why logging looks OK. They're probably there because the part of the file you're parsing isn't using utf8, try a `.toString('utf16le')` instead. EG:

    $ node
    > buf = Buffer.from('artist','utf16le')
    <Buffer 61 00 72 00 74 00 69 00 73 00 74 00>
    > buf.toString('utf8')
    'a\u0000r\u0000t\u0000i\u0000s\u0000t\u0000'
    > buf.swap16().toString('utf8')
    '\u0000a\u0000r\u0000t\u0000i\u0000s\u0000t'
    > buf.toString('utf16le')
    '愀爀琀椀猀琀'
    > buf.swap16().toString('utf16le') // swap16 again to put them back
    'artist'

Since node only supports the LE (little endian) version you can use `swap16` to do the BE version (which it looks like your file is using). Hope that helps!",1523532517.0
bjpbakker,"Your text is in there as you can see, but your input has a null byte before each character. The `toString` call seems to work fine.

How does the text end up in `crate`? You should probably debug that.",1523513396.0
sevenyearoldkid,"Wait I might be stupid here but aren't you supposed to pass a radix to toString? Like 8 or 16, just a plain number?

Also what happens if you don't pass anything to the toString function call?",1523512002.0
jamrod0,"Don't know if it's relevant to your problem but I struggled with buffers of hex data for a while and what I realized was happening is that for  all the hex characters below 10 ( 01,02 etc ) the leading 0 would not be read (or maybe doesn't exist) by toString() so it would turn everything after it into nonsense. So instead of 13 01 23 45 19, you'd get 13 12 34 51 etc, obviously those convert to ascii completely differently.  I had to put the buffer into an array of characters then convert them one at a time in to a string. Actually everything below 10 was special control characters so I removed them from the strings since they wouldn't convert to ascii anyway. 
Maybe something similar is happening for you? In my case also if I logged the buffer directly to console it looked completely different, showing as an array of characters like 13, 02, 23, 45 etc 
Good luck",1523545516.0
mooky-bear,How is this possible? Isn't SHA-512 more complex by definition? ,1523495327.0
MCShoveled,"7 years ago:

> NIST has just defined two new versions of SHA-512. They're SHA-512/224 and SHA-512/256: 224- and 256-bit truncations of SHA-512 with a new IV. They've done this because SHA-512 is faster than SHA-256 on 64-bit CPUs, so these new SHA variants will be faster.

https://www.schneier.com/blog/archives/2011/02/nist_defines_ne.html
",1523504692.0
proboardslolv5,So... use sha256?,1523484188.0
wswoodruff,As a contributor I've been fortunate enough to be able to use hapi pal daily and love it!! Congrats to the team!! :cheers: :beers:,1523478117.0
cryptichash,Looks really great!,1523504724.0
evildonald,I tried hapi for a few days and it really didnt click/work for me. Inhad much more success with koa2.,1523514972.0
deadcoder0904,Give [PNPM](https://pnpm.js.org) a shot. It saves a lot of disk space.,1523716292.0
notkraftman,"This smells bad. When you look at code, you should be able to see what it does, it shouldn't have side effects hidden away in another file. A year from now you'll be trying to work out why the hell your createcharge function does more than it should.


Calling a function before you create a charge shows very clearly what is going on, and the function definition can easily exist somewhere else so it's decoupled just fine, you can just comment out the function call if you want to disable it.",1523499786.0
tobegiannis,"Interesting, I guess a standard is nice but it seems like it is just obfuscating simple readable code.   ",1523494482.0
,No! I will come at you if this ends up in my codebase.,1523537393.0
kevinkace,"I think I'd prefer the wrapper returning a new obj with the `pre`, `post` fns (in case of existing fns).",1523498142.0
poom0nster,"I think you are doing yourself a disservice. I don't even understand why you're doing this, Promises don't need pre and post hooks, because they naturally support chaining out of the bugs. Why would you take your nice promise based code and then de\-promisify it by adding callbacks.

I did a little magic\-less rewrite of your example:

    
    const preCharge = async function (charge) {
      return await mockAsyncCall({...charge, preChargeExecuted: true});
    };
    
    const postCharge = async function (charge) {
      return console.log(`New charge ${charge.amount}`) || {...charge, postChargeExecuted: true};
    };
    
    async function processPayment(amount, source, description) {
      const processResult = await preCharge({
        amount,
        source,
        description,
        currency: 'usd'
      })
        .then(charge => stripe.charges.create(charge))
        .then(charge => postCharge(charge))
        .catch(e => {
          console.error(e);
          throw e;
        });
      console.log('DONE: ', processResult);
    }

If you're concerned about tight coupling, just abstract it out, rather than introduce magic in your code. Also, you can check out [an executable test with a small mock.](https://repl.it/repls/MonstrousWrongAccess)",1523531378.0
sebelga,"The main target for this are the library creators. It has been inspired by Mongoose where they let developers add ""hooks"" before saving Documents.
The same way Express lets you add middleware to your routes and is widely used.
I do agree you do have to organize your code :)",1523516785.0
RangerCoder,"Reactioncommerce is base on meteor,  I personaly tried use the script in Jan 2018 and after try working with it a few days I felt the script needed more development time for my needs, but try it maybe it will work for you, the only way to find out is just make a simple sample project and test it out like its free to use you only will loss a little bit of time.",1523470182.0
bch8,Hey dude. I'm literally on the same exact boat as you. Trying to find a node js ecommerce platform for a new project. Reaction has been the most promising one I've found so far. Maybe we can work together on this lol.,1523683494.0
soulsizzle,"Make something YOU need. If it's useful enough, the community will follow.",1523463577.0
ccb621,"Look at open issues on existing projects, and help improve those projects. ",1523464266.0
shawncplus,"My project has a number of issues I have labeled for new developers. Any issues with `help wanted` I consider friendly for those new to programming or the project in general. We also have an active slack channel if you have any questions. The code itself isn't terribly complex though it does use a number of newer JS paradigms

https://github.com/shawncplus/ranviermud",1523470441.0
danneu,"It's not really a project for entry-level contributors, but since you are comfortable with intermediate-level concepts, then you may want to take a look at my demo app: https://github.com/danneu/koa-skeleton which is the simplest app I could think of that introduces concepts like authentication, authorization, rate-limiting, etc.

I implement it from scratch so it might be useful to check out one way of doing that stuff.

",1523552915.0
SomeRandomBuddy,"Might have better luck on discord, or maybe even gitter",1523458737.0
pragmaticpi,"I can understand. I was once in your place. If this is your first time in javascript world, I highly recommend you to go through basic till intermediate javascript concepts first.
Especially which are required for node like promises, callbacks, asynchronous concept, es6 syntax, prototypal inheritance,  objects and its methods, etc.
I recommend going through you-dont-know-js series books or eloquent javascript or you can go through a couple of videos on youtube, udemy etc.

After that for node, I will ask you to take a course on udemy, Learn and understand Nodejs. It is paid course but you can get discount coupons easily on many sites. Also follow codeburst.io on medium and start reading their node and js tutorial blogs.
All these will help you getting into node world. ",1523457363.0
400_Bad_Request,I recommend the web development Bootcamp by Colt Steele. Its where I started ,1523459874.0
MWrathDev,"> Hi, I'm new to node.js, and I would really like to understand how it works, because I have no fucking idea where to start.

Firstly you do know that (ignoring child processes and multi-node instances to keep it simple), the node event loop is single threaded out-of-the-box i.e. it runs on a single core of a CPU... if you didn't before you do now.

With that in mind my next question is, do you know JS? If you don't know code, then you gotta start off with syntax, data structures and algorithms. For this you don't actually have to start with nodeJS, you can use your browser to learn JS (ES5) which may be a little easier.

If you do know JS somewhat, then it's just, *async vs sync code & the event loop*... I mean you are aware nodeJS uses the V8 engine from chrome right? Granted there is some extra stuff bolted on (e.g. ability to run C/C++ modules, filesystem access, etc) but at it's core JS is executed in the same way.

To that end i'd recommend the following presentations:

#### Event loop
- [Jake Archibald: In The Loop - JSConf.Asia 2018](https://www.youtube.com/watch?v=cCOL7MC4Pl0)
- [Philip Roberts: What the heck is the event loop anyway? | JSConf EU 2014](https://www.youtube.com/watch?v=8aGhZQkoFbQ)
- [The Node.js Event Loop: Not So Single Threaded](https://www.youtube.com/watch?v=zphcsoSJMvM)

First 2 discuss the v8 engine in the context of the browser, works more or less the same in node, though with less intense render operations. The last one discusses multi-threaded code working via C/C++ modules, which is more of an advanced topic.

There's also - [5 Architectures of Asynchronous JavaScript](https://www.youtube.com/watch?v=OyKHD4NGCQo) and [Mastering Node.js Modules by Jeremy Foster](https://www.youtube.com/watch?v=OTE8_lh_6MY)


",1523460894.0
rollickingrube,"There's some excellent node courses on Udemy. I've taken three of them that touch on different aspects of how node works--from theoretical deep dives to the specifics of launching an app. I don't know of a better way to learn.

If you know a frontend framework, then doing a fullstack javascript course is a great way to figure out how all of these things work together.

To me, there's two questions when it comes to understanding Node:  
(1) What can it do for me?  Node with it's libraries allow you to launch servers, interact with databases, authenticate users and more (i.e., the things you need for a fully operational app).   
(2) How does it do those things? This gets complex. Best to take a course. ",1523475306.0
TheNoim,I use jsonviewer.stack.hu for years and really enjoy the tree view. I would start use your json viewer if we get a tree view.  ,1523457944.0
mansfall,"Neat!  I deal with json all the time, and large piles of it.  

1. Something nice would be for some kind of ""global"" view of all the issues with the json.  This way if I copy/paste 50,000 lines of json, I shouldn't need to scroll up and down looking for that little red x.  Maybe some kind of popup in the top right which states ""Invalid json"", and displays all the current list of errors, what the error is, and the associated line number given the data is prettyprinted (couldn't show a line # if minified...  though you could show column position...).

2. Brace highlighter.  If I drop my cursor on some curly bracket (or square bracket if an array...), would be nice to see the corresponding opening/closing bracket also stand out or highlighted.  Highlighted in a bright red or yellow or whatever seems to work well with the eye.

3. In case of invalid json, the ""minify"" and ""beautify"" buttons should be visibly disabled in some way... Maybe reduce opacity and fade them out in some way... grey them out, etc.  Right now I can create an error, and the buttons just don't work at all with no insight given as to why.  Other than having to scroll down hundreds of lines trying to find your error...   Probably disable the download to .json file too... since technically it's invalid.",1523465233.0
thefakegm,Coinbase recently announced their [commerce API](https://commerce.coinbase.com/docs/). ,1523473734.0
YoungBubble,Brainblocks for Nano might be interesting aswell. ^^,1523461105.0
sandeepsb,I’ve used Bitpay before and it’s very straightforward. I didn’t have any issues with it ,1523477106.0
radu-matei,"Hi, everyone!

I'm happy to answer any questions related to the article!

Thanks for the feedback!",1523445958.0
martiandreamer,"CPU intensive operations are generally not recommended in Node because they block the event loop. Node is well-suited to handle lots of I/O because, in short, while operation A is waiting for I/O response X, operation B may continue to operate, and so on. 

Since you’re getting into more involved aspects of Node programming, one of the concepts you might have come across is that of separating web-request handlers and task-runners. Here, your web-centric Node processes are dedicated to mainly handling web-requests, avoiding lengthy operations that hog CPU, and generally enqueue heavy work to be handled by other task-runners who don’t talk to web-clients. ",1523442153.0
jmar777,">Can't I always spawn a new child process if I need to perfom CPU heavy operation?

*It depends.* *^(TM)*

As others have pointed out, CPU intensive operations in node can be problematic because they can block the event loop, thereby prevent your node process from doing other important things \(e.g., you don't want a web server calculating `fib(1e+50)` while other users are waiting on their own responses to come back\).

The most straightforward workaround in node is to do what you suggested: perform these types of operations in another process. One reason why you might choose *not* to spin up ad\-hoc child processes per task would be if you needed to do it so frequently that the per\-process allocation/cleanup time was excessively wasteful.

In this case, your next strategy would likely be to spin up a ""worker pool"" of child processes of a fixed size, and then use a messaging system to queue up and process your workload. This, in general, is a good solution for many use cases, but the specifics may still matter. There are several modules, such as [worker\-farm](https://www.npmjs.com/package/worker-farm), that assist with this type of a workload distribution strategy.

One other reason why you may choose not to do CPU intensive operations in node is that there are simply more efficient runtimes if you really need to eek the most performance out of your hardware. V8 is *very* fast for what it does, but for general purpose, CPU\-bound processing, it is still tough to compete with languages like C, C\+\+, Rust, etc. In most cases, the added complexity of splitting the work across multiple languages and runtimes isn't justified by the performance gains, but, for the sake of completeness, there are certainly use cases where it is justified.",1523470409.0
elite_killerX,"The big advantage of node is that you get concurrency (via callbacks) without having to deal with threads. Doing CPU-intensive work in node kind of negates this advantage.

If everything in your project is node, and you have *one* CPU-intensive process, by all means do it, but then you're using node for the sake of uniformity, not because it's the best tool for the job.",1523451486.0
geon,"Sure you can, and that’s pretty common to do. 

Now, processes have some overhead, so it might no be feasable on a high traffic site where you’d need 1M processes concurrently. 

The child process can of course be written in any language. If you need to do some simple number crunching on large data sers, C might be used. Or you could just use Node for that as well. ",1523453051.0
scaleable,"Usually you will be running many node processes for the web requests, and you may have a permanent worker process which will receive jobs through messages.",1523462285.0
QuazyWabbit1,"I think that CPU intensive recommendation came before process clustering, as that can interfere with other tasks on the same process should the main thread get clogged. With clustering, I don't think that's an issue? Or is it?",1523465459.0
still_conscious,"Do you have a specific CPU intensive process in mind? 

Additionally, you can run node in cluster mode to run in a more robust fashion. Each additional CPU core would have its own event loop managed by the primary CPU core so less blocking occurs and your application still would be performant.",1523466268.0
hermit-the-frog,"You don’t want to run heavy CPU bound work on your main thread.

But yes, you can indeed spawn new CPU intensive processes with `cp.spawn` that will give you asynchronous event management and not block the main thread.

This of course adds more architectural complexity and requires a way to serialize data communication if you want to communicate between the two processes.

It’s not necessarily bad practice. But it’s not clear what your environment or use for node is.",1523472185.0
SparserLogic,"Don't listen to any naysayers.

You're 100% correct that if done properly a multi-threaded Node app can run very efficiently.

Non blocking IO is *better* when paired with thoughtful threading. Its an advantage to utilize both techniques thoughtfully rather than just relying on one all the time.",1523477694.0
kapv89,"Just use something like Go to create a binary for the CPU intensive task. This binary will accept cli arguments as input. Place the compiled binary in your node.js source code, write a wrapper function which uses exec. Abuse this wrapper function to full abandon.",1523826625.0
rkdwp,"the documentation is...not good, or at least very difficult to find what you need. we ended up ripping it out after a year or so from a large express app. if I had to do it all over, I'd probably start with https://github.com/vincit/objection.js",1523466600.0
ddwrt1234,It's great once you know how to use it... don't expect to always find answers in their documentation.,1523433051.0
joanmave,"I found that JavaScript does not subscribe smoothly to the RDBMS paradigm. The language is too flexible to express the rigidity of a relational db. When the model becomes slightly larger and have several relationships you will find yourself juggling the module require order of the tables relationships to avoid circular dependencies . Cascading, triggers, validations quickly become a “stringly” typed mess.

I have found that ORMs that leverage classes and types express much better a relational model such as TypeORM.

",1523473241.0
MrStLouis,Sequelize is amazing. Use their class methods to define and add associations otherwise setting up your project is a pain. The gets and sets are fairly intuitive if you name things with easy names. They enforce singular and plural names for has one and has many relationships which might throw you for a loop. The same guy who made sequelize made a graphql tool to define resolves that has query batching and a cache baked in. It's amazing ,1523462935.0
bzsearch,"Hate it.

Not a fan of the docs at all.",1523502590.0
kapv89,"If you are working with PostgreSQL, give my ORM, tabel (http://tabel.fractaltech.in) a shot. Brings in quite a few novel concepts. Very easy to use.",1523538072.0
danielstaleiny,build your own helper functions and re-use them. not a fan of ORM,1523603601.0
snowman4415,Sequelize is really mature and a solid project overall. I keep looking for reasons to use something else and I haven’t found any yet. I think there documentation is pretty good actually. You can only have so many examples for such a complex system. You’re bound to have to dig into the actual api docs eventually,1523458850.0
yonatannn,"Sequelize mixes the domain entities with DB logic (active record), this goes against many modern architecture like clean, hexagonal and domain driven design. For me, not having the business logic isolated is a bummer",1523465289.0
misterlively,"Just use knex, it’s well built, you can easily build crud methods and you retain all the flexibility of SQL.",1523456214.0
naturalethic,Same as anything else. Know what you are doing.  It’s a vast ecosystem with 99.9% good players and a few shitty ones. Just like real life. ,1523424133.0
Ariquitaun,I'd recommend you typescript your node to avoid a whole class of bugs related to imprecise typing and error handling.,1523464978.0
Bobbr23,Yes,1523411126.0
radu-matei,"Let me know if you have any questions regarding the article, I'd be happy to chat about it :\)",1523437556.0
goorpy,"The lodash FP docs kind of suck.

If you're going FP, i would rather use ramda.",1523419180.0
BenjiSponge,"Good article. Very minor problem, but a fun one to solve and satisfying once you get really used to lodash/fp. My last workplace used it pretty much everywhere. If you treat it like a standard library, it's very nice.

The author should consider moving to the terser property value shorthand. I personally felt slightly uncomfortable with the juxtaposition of equally new features import and arrow functions with the older redundancy.",1523412800.0
bhututu,"Sounds like an ideal use case for using a graph DB in the backend. I’ve used Neo4j in the past, and it should satisfy this use case. ",1523387565.0
ravearhelaj,classic spam,1528838809.0
Aurelsicoko,"You should take a look at [Strapi](http://strapi/io), it's like DRF but it's in JavaScript.",1523434426.0
Djwasserman,"I don’t want to be that guy, but I just switched to DRF from a lot of node work. I really like node, but for quickly churning out API’s, nothing is better than DRF. ",1523374220.0
ccb621,"You should do deeper research. Swagger can generate an API _client_. You still need to write the server.

Also, if you already have Django, are you using Django REST Framework? What’s your motivation for rewriting the backend?",1523375258.0
Wickity,Look at grpc for back end communication.,1523402925.0
Capaj,"Hate to be ""that guy"" but you should have rewrote your api to Graphql. All your documentation worries would be taken care of.",1523439564.0
trout_fucker,"Yes. It's fine. It does APIs well.

JSPs are dead (mostly) and were never meant for RESTful APIs. JSP does not mean Java as a backend (which is thriving), it is a specific and outdated implemetation of using  to build templated server rendered responses, and there are better and more modern ways of doing that. What you're looking for is Spring Boot, Jersey, or maybe just some JAX-RS implementation. But, Node will work fine.",1523369498.0
GhostMcFunky,"If you want to handle a lot of REST API requests then Node is definitely the way to go, and clustering and other child process methods offer a lot in terms of scalability.

PHP is always more resource intensive as well as having many security vulnerabilities if not written correctly (or even if it is) than Node and simply doesn’t scale as easily.

If the question is API my answer is usually Node.

Java is always no when it comes to web, PHP is, “avoid if possible”.",1523410324.0
forksofpower,This is rich with new info about DDD! Thank you!,1523388072.0
joanmave,Interesting article. However it seems that this strategy of making a node server app the way Java / Spring does it in the JVM is very out of touch with how things are done in the node ecosystem. JavaScript and TypeScript are languages with a set of features that make all this IoC magic unnecessary and undesirable. Java is (was?) a very inexpressive language which required all these IoC and injection techniques as a workaround for its lack of flexibility.,1523415573.0
super_bleu,"Very good stuff indeed! There's just one minor mistake in the code below the ""Using the new interfaces, we are implementing our domain layer in a way that is completely isolated from infrastructure concerns like serialization:"" part. You forgot to remove the serialize() function from the Rectangle class.",1523392848.0
TheBeardofGilgamesh,To me SOLID is an anti pattern ,1523418017.0
danneu,"look up ""express error handler"" middleware and handle it.",1523400139.0
ecares,I have to admit I don't really see the point here.,1523364772.0
bengl,"I don't know anything about DOOR32, but if you're looking to share a socket handle across processes, [the built-in `child_process` module does exactly this](https://nodejs.org/dist/latest-v9.x/docs/api/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback).

The `sendHandle` option can be a Socket or Server instance (if you look at the code that implements `send`, you'll see that you can also send the underlying handle object or even just the file descriptor number).

Hopefully this is helpful!",1523428594.0
psayre23,"Totally depends on what you are doing. If you end up sending a 401 (403?) redirect back to the browser, then it isn’t too bad. But if you are going to do anything on the server side with that url (like fetch data), then you might want to reconsider; you are basically opening yourself up to becoming a zombie for a DDoS attack. Or you are adding a ton of work on yourself to rate limit requests to that end point. Not to mention whatever it is you are doing with the data that is returned. ",1523341598.0
code_also_fifa,How about predefined parameters which you can validate on your end? And then redirect or call the url after the validation? I might be missing the context here but passing an url sounds vulnerable depending on the circumstances ,1523325482.0
vietquocnguyen,I think so. That's how OAuth access tokens and uri redirects work. As long has you're properly sanitizing and url encoding. ,1523325614.0
psayre23,$50/mo for 5k requests? Ouch!,1523340944.0
randomFIREAcct,Interesting. Are you the creator of this?,1523369470.0
,[deleted],1523369512.0
evertrooftop,"What are you trying to achieve by learning node.js? If you just want to get better at programming, I would suggest thinking about 'what you want to make' instead of the technology to get there. ",1523306323.0
berseker59,Pick a project and implement it !,1523324975.0
mtranier,"If you are trying to advance your skills as software developer, you might consider learning all the components required to build a product (app or website). It is good to be aware of:
1. Backend framework (you already know Node)
2. Database
3. Frontend framework
4. Webpack / Babel/ Gulp /Grunt
5. Cloud frameworks - aws/azure/google cloud
6. Continuous Integration
7. Testing frameworks for backend and frontend

You can try to implement some product idea you may have end to end and you will learn all above in doing so. That will help think in terms of whole product development.

Ofcourse, then you can decide what part interest you the most and deep dive into it. ",1523332476.0
mulijordan1976,"Node Exec Executes the current file or your selected code with node.js. 

https://marketplace.visualstudio.com/items?itemName=miramac.vscode-exec-node",1523304059.0
yonatannn,"Try also Quokka which allows you to see variables run time value as you code

https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode",1523343614.0
Capaj,Auto import only works for typescript and what's more VScode has it's functionality inside itself now.,1523360653.0
Doctor_Spicy,"I would recommend getting Beautify. Though i don't like some things it does, it's extremely helpful when you've got code with horrible formatting.",1523339126.0
utkacc1,Use Web Storm,1523332323.0
tjscollins,"I really like Handlebars.  I used Jade/Pug in the past, and that was fine, but Handlebars has a Django-style syntax that I personally like better.",1523298730.0
utbusdriver,"I've only used Handlebars, and I'd say it's pretty good. React can also do server-side rendering, but it's definitely more complicated than Handlebars. ",1523301486.0
trout_fucker,"EJS if you want server-side rendering, but I'd go as far to say *most* Node based apps are templated on the frontend.",1523294962.0
orebright,"You're unlikely to find a templating engine which combines JS syntax in this way. I'm a big fan of Jade and Handlebars. They both have very limited ""dynamic syntax"". So you can do loops and if statements in their own syntax but you can't do much else. So instead of:

    html goes here
    <?php if ($booleanVar): ?>
    Boolean is true
    <?php endif; ?>
    html goes here

you would write

    html goes here
    {{#if booleanVar}}
    Boolean is true
    {{/if}}
    html goes here

but you can't do something like this

    html goes here
    <?php echo dataFromFunction('info') ?>
    html goes here

You would need to process all dynamic content outside the template and pass it in.",1523301620.0
Felecorat,"Never tried it but it keeps popping up in my news channels.

[Next.js](https://github.com/zeit/next.js/)

Framework for server-rendered or statically-exported React apps",1523307185.0
sotimting,[Dust](http://www.dustjs.com/),1523307756.0
positlabs,"If you want quick and dirty, use template literals. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",1523341109.0
raistlinthewiz,nunjucks,1523344637.0
treyvale,"[Marko](https://markojs.com)'s another templating engine for Node.js.  

    <body>
        <if (name)>
            <p>Hey ${name}</p>
        </if>
        <else>
            <p>Hey Stranger</p>
        </else>
    </body>

IMO the best part of Marko is [async loading](https://markojs.com/docs/core-tags/#async-content), where it will render and send most of the page to the user immediately and send rendered async components when they're available.

    $ var personPromise = new Promise((resolve, reject) => {
        setTimeout(function() {
            resolve({
                name: 'Frank'
            });
        }, 5*1000);
    });

    <body>
        <p>User will see this text immediately</p>
        <await (person from personPromise) client-reorder=true>
            <div>Hello ${person.name}! The promise has resolved.</div>
        </await>
        <p>User will see this text immediately as well.</p>
    </body>

[Here's](https://marko-progressive-rendering.herokuapp.com/) a demo of Marko's async loading. It uses an outdated version of Marko so don't use this page's code as a reference.  
The _out-of-order_ example uses client side javascript to place async content in its proper place once it's received. The _in-order_ example can be used without client side javascript, but the user's page loading will pause until the component has been rendered on the server. ",1523389837.0
Nebu,"Do you have any examples of bad regexps in practice? This isn't intended as a criticism, I'm genuinely curious.

I've only see toy examples, like `(a*)*b` or `(\[.*?\])+`.",1523310979.0
brtt3000,"Oh god first the zips and XML now also the regexes? Is nothing safe anymore? Didi we go to far?

Interesting implementation, a lot of languages and things together.",1523295028.0
calligraphic-io,"Thank you for the library, I starred it + plan to use it. Some questions:

1. What languages / regex flavors does it support scanning? I didn't see that addressed in the documentation.

2. Any chance of having a comment flag to skip checking a regex, like `// skip-vuln-regex-detector`?

3. Any thoughts on issues with adding this to a CI pipeline?",1523313586.0
pikadrew,`npm -g nsp && nsp`,1523312498.0
yonatannn,why isn't this packed as npm package?,1523296681.0
Stormsheperd126,It looks like your 'req' variable does not have a 'url' component within it. So you're getting an error that 'req.url' is undefined. You can't take indexOf of undefined,1523289106.0
bvm,I think we probably need to see the routes and passport files. ,1523299123.0
OzziePeck,I’m currently working on a blog too! I can share my repo with you if it would help ,1523304872.0
veswill3,TIL about the tagged templates feature of template literals. cool.,1523300773.0
sirmcallister,"I think that’s a really cool idea! 

Something worth considering is a different offset tactic. You might be aware about the horrible performance of offset. 

I guess it’s already possible to set further where conditionals based on an indexed-parameter and hand that over as a variable?",1523302300.0
mansfall,"What not just write sql?  I mean maybe this helps some folks, but it seems like replacing one language to use another.  Is it really a time saver?  Seems so much faster to spin raw sql with parameterized queries.  You have far more control then and can optimize with more precision.  And on more complex queries, using helper functions in almost any library is a nightmare (think window functions, nested selects, aggregations, etc).

Not shooting down what you've done, I think it's cool. But people would likely benefit more from actually understanding sql, and not libraries that generate it.",1523344690.0
,[deleted],1523301604.0
SkaterDad,This looks really neat!  Might give this a try replacing some of my particularly ugly-looking `knex` queries that use `knex.raw` and `knex.joinRaw`.,1523556651.0
ecares,seems to be an open door to SQL injections...,1523290150.0
yonatannn,"Starting the list.

**Code**
* Put git ignore

* Define npm run & test & init scripts


**Debugger**

* Configure a 'start this file' debugger config (to debug specific code)

* Configure to start from project root (e.g. index.js)

* Configure to ignore ../node_modules/**

**Linting**

* Put basic eslint config file (ot tslint)

* Add node specific linting additions like https://www.npmjs.com/package/eslint-plugin-node

* Security linting addon

* Put prettier config

**CI & overall quality**

* Connect to some CI platform (typically create some CI file)

* Add npm script that inspects for vulnerabilities using nsp

* Add npm script that inspects for outdates packages using npm-check

* Configure git hooks using Husky, prevent push on any inspection error
",1523275060.0
mulijordan1976,"Two other ideas:
Install Node.JS extension pack for VSCode https://marketplace.visualstudio.com/items?itemName=waderyan.nodejs-extension-pack

Put .dockerignore file
",1523276765.0
PM-ME-YOUR-SSH-KEYS,"This might be a bit specific, but because I use Node with TypeScript, I'd set up scripts for ts\-node and the TypeScript config and TSLint. This will of course not apply to everythone.",1523294315.0
mulijordan1976,"There is also a tool that performs license check, forgot its name, Google ""npm license check""",1523304102.0
DrBobbyBarker,"Perhaps it's your dbFunc?

I'd try requiring path and requiring your dbFunc using

        require(path.join(__dirname, './your path'));",1523286920.0
unintellisense,"Are you sure this is a nodejs problem and not a dns/routing/networking issue?

I.E. if you use the IP address rather than localhost, does it succeed? And does the dns name you are trying resolve correctly when you ping it via console?",1523308221.0
Fullstack_Questions,"var port = process.env.PORT || 8888;
",1523350581.0
tasinet,"Sounds like you need the $pull modifier.

See https://docs.mongodb.com/manual/reference/operator/update/pull/#pull-array-of-documents

Edit: there doesn't seem to be a way to update multiple collections in mongo https://www.google.com/search?q=update+multiple+collections+mongodb",1523286984.0
maximusprime2328,"Ghost and Keystone are good ""advanced CMS"" projects. If you need something simple you can use Draft JS. I'm just saying this because I looked at your first 3 points of your list and I think about the problems you will have to solve that were already solved by these CMSs",1523283432.0
saphira_bjartskular,This account is a spammer. Take a look at his user page.,1523469493.0
LiMing3,"Setting up Nginx is pretty straight forward:

1. Set up your SSL certificate and key
2. Download the correct Nginx repo file for your OS
3. Create a `nginx.conf` file and configure your server

Configuration files can get quite large and may look daunting at first, but they're quite simple. An Nginx config contains only options known as **directives**, and **blocks**, which are also called **contexts**. The syntax should feel familiar if you're used to Gradle or JSON - it's just key-value pairs separated by spaces and semicolons to terminate statements.

Reverse proxies themselves can be quite complicated but Nginx does a lot of the heavy lifting for you. An Nginx reverse proxy could be as simple as an `http` block with a `location` block that contains a `proxy_pass` directive:

    http {
        location /some/path/ {
            proxy_pass http://www.example.com/link/;
        }
    }

https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/",1523288879.0
caninerosie,with heroku you shouldn't need to worry about reverse proxy. you should serve your static files on a CDN and set up load balancing,1523267579.0
ccb621,Why did you post the same question to /r/python? https://www.reddit.com/r/Python/comments/8awsw8/api_docs_workflow_swagger_or_code_first/?st=JFSFVZ31&sh=f474c181,1523290619.0
yonatannn,Why not? These are different communities and allows me to get advice from more people,1523291174.0
PM-ME-YOUR-SSH-KEYS,"This would be of interest for me, too. I use Swagger Editor to create my API routes as my scheme and then implement the logic using my framework of choice. My question there would be whether anybody knows, if there are packages or ways to automatically generate Swagger docs from an express web service in an easy and reliable way.",1523308125.0
mrjking,"https://github.com/lukeautry/tsoa

Uses Typescript to generate Swagger docs. Works with Express, Koa or Hapi. The controller function args and return type are turned into the swagger docs. Also generates request body verifications automatically.

With the swagger doc json file you can use something like https://www.npmjs.com/package/koa2-swagger-ui

Then just serve swagger docs from the same server instead of having to manually upload it somewhere. ",1523334341.0
Ariquitaun,"That big gap in there seems like some sort of debug hook. Try turning off debugging and running the app in prod mode, then compare.",1523282871.0
djslakor,"If you're convinced it's a node performance issue, reach out to @bmeurer on twitter.",1523295602.0
yarauuta,"This talk is great. Good, real and pratical advice. 


I really recommend going through all of it.",1523263808.0
QuazyWabbit1,"Very insightful, thank you! ",1523298554.0
mathimat,"If you send the header text/plain, the browser renders it as an txt file. The default is the HTML header, where the browsers renders it with the default html font, which might  differ from the ""txt"" font",1523213935.0
Kusaddaw,"Hard to say exactly without knowing what specifically isn't working. But just quickly looking at the code, a rejected API promise in getSummonerID doesn't get propagated which could cause a hang. Also getRecentGames isn't returning its promise at all.

In general, don't use `new Promise` when you already have a promise chain. Just return the promise chain. Calling `resolve` from inside a `then` is redundant. `new Promise` is really for converting things into promises that aren't promises and don't use a standard enough callback style for `promisify` to work on them.

(But the #1 skill to learn is still being specific in error reporting :) )",1523211542.0
strumwolf,"First, I’m viewing this on my phone, so I might be viewing things oddly. 
In getHighestMastery and getRecentGames, you are returning outside the promise chain. You should return api.get and then in your ‘then’ return the value you want to return. 

Edit: file literally changed in the time I looked at the code and the time I posted my response. Lol",1523213623.0
richraid21,"Stick with PM2, it's fine.

You should configure PM2 to output logs to the same log directory as your application. Typically everything should be outputting to `/var/log`

Use something like FileBeat or Fluentd to injest and aggregate your log files into a stream that you can pipe to Logstash/whatever log aggregator you are using. 




",1523217860.0
mrjking,"Pm2 works fine in production, I use it all the time. Winston can log to stdout or strderr which pm2 will pick up. So only location for logs is the pm2 log.",1523218319.0
southern_dreams,"PM2 is fantastic

Seriously consider also writing town centralized location, such as Papertrail. This will save you one day. ",1523219078.0
DinckelMan,"I've been using PM2 for my own code for quite a while now, it's been absolutely excellent so far. Forever does the job in theory, but in reality doesn't even stand close to PM2's quality.

If you wanna use winston logging, I'm pretty sure that will work just fine",1523219271.0
MattBlumTheNuProject,We use PM2 and Graylog. Works really great. ,1523230473.0
T_amak,"PM2 has proved very reliable and helpful for my first production Node.js apps.   Definitely take a look at it and consider using the keymetrics.io  SaaS for monitoring / metrics.  

PM2 also echos out any stdout from apps and you can view a combined stream of all running apps or isolated logs for each app from PM2 monit.

I dont think you'd need to use morgan and winston but instead just output what you're logging to console and PM2 would 'log' it for you.

not sure about best practices for logging.  you can define log file and rotation or non-rotation details in the config file or command line when you run the app in PM2, and can simplify things and have ONE log file.   Keep me posted and let me know how it goes for you.

I spent about 6 months getting to know PM2 after my bosses fell in love with my node.js apps and I had to run then in production but felt we needed a more 'grown-up' way to manage and monitor them.   ",1523717170.0
MrStLouis,You should definitely hide your express server behind a reverse proxy. You don't want to expose your api directly and I don't believe that you can start a node process on 80 or 443 for http/s support. Also nginx gives you free https and the setup is very easy. If your production is small you can use nginx to send different subdomains to different ports on your local machine although this isn't very scalable. ,1523209317.0
awesomeevan,"I don't have anything else to add on the log files front, but maybe look into Pino for logging if you expect high load. Winston and Bunyan are pretty heavyweight - https://www.nearform.com/blog/cost-logging/",1523222296.0
Knext,"Have you looked at forever?

https://www.npmjs.com/package/forever",1523216671.0
Militop,"I think the client does not reach the server because the proxy is not set correctly. 
There is no reporting because the client never hits the server.",1523175410.0
gatorcoder,"What proxy are you running? Might be that your sever returns a 500, the proxy won’t allow that response code to be returned, only 200/300s/400s. I bet if your server returns a 200 with some JSON encoded response when an error occurs you will get the response.",1523213587.0
1020141,"Do your self a favor and learn React. My tip would be Stephen Griders Modern React Course in Udemy. 

Learn React and you’ve pretty much fast forwarded over the last five years of frontend development and right into modern 2018 frontend tools.

Once you’ve got React down, then you’ll use some framework like ReactStrap (Bootstrap for React), Semantic UI, or Material UI.

Once here you can pretty much decide if you want to go into design. You probably don’t want too, which is totally cool. But if you did you’d use Sketch.

This is the advice I’d give to a designer learning to code so it makes sense to give the reverse approach to a backend dev.

Node > React > Sketch

",1523166875.0
nogorilla,"You can always look for some free admin dashboards and create yours usint it.

I've used some of the free ones from [Creative Tim](https://www.creative-tim.com/bootstrap-themes/admin-dashboard)  before",1523189716.0
PM-ME-YOUR-VIMRC,"I'm a backend developer, and like you, I get frustrated working on front-end. I've tried react, and angular with mixed success. I'm learning vue with vuex right now, and I actually really like it. It's pretty intuitive, and one of the things that I found with react was that there were so many different ways to accomplish the same thing, and I would paint myself into a corner because I would take one approach to solving a problem and get to another problem and realize I need to refactor the previous one to solve the other. This obviously stems from my unfamiliarity with front-end development, but I'm finding with vue I'm running into this scenario a lot less",1523204208.0
Josualackhand,"If you’re interested in design fundamentals, check out the docs that support google’s material design (https://material.io/guidelines/).

I like react too, and that paired with semantic UI can produce some nice looking boilerplate sites.  If you dig the material design stuff, then there’s also a react project for those components. ",1523203109.0
beardster,"I've been doing a ton of node tutorials and have a good grasp on it, but only for data manipulation/backend functionality.  Am I barking up the wrong tree here?",1523162853.0
BinarySo10,"RemindMe! 24 hours ""Frontend resources"" ",1523187623.0
sittingprettyin,"is this a thing that users will need to log into and use? If it's just for dashboard purposes, you might look into google data studio.",1523193828.0
code_also_fifa,Check out react or other js frameworks. It might make sense. Building the UI has changed since jquery a lot,1523163706.0
martiandreamer,"I'd highly recommend ActionHero.js.

I'm using it for my own game; it provides a strong foundation for the type of demand that a game server calls for. Of particular note is its seamless division between websocket servers and task-runner servers, cluster communication, and chat room management.",1523152597.0
unintellisense,"https://github.com/gamestdio/colyseus

You'll need to write your own interpolation or do without.",1523390268.0
mattindustries,Probably would be fine with just socket.io. That library has served me well.,1523168106.0
codearoni,"Game servers are typically done with UDP for a number of reasons. I don't know of any big UDP modules for node.js, but node does support UDP natively with their dgram module. 

Depends on the game. Real time 3D multiplayer (Counter Strike, Dota, etc) would definitely necessitate UDP. You could get away with TCP for turn based games I'd imagine.",1523233504.0
,[deleted],1523151133.0
davidmdm,"I haven't used it persay, but feather.js is maybe something along the lines your are looking for. It's express and socket.io together as a framework. ",1523151034.0
sznowicki,Yes. ,1523140631.0
Tvde1,"1. Learn to read
2. Learn how to google",1523126954.0
l3l_aze,"You're not in a project folder where there is a package.json file. Make sure to change directory (CD) into the folder before trying to use scripts/etc from it.


Also, [Windows Snipping Tool](https://youtu.be/uL3h5xns6DM) (YouTube) works very nicely for quick screenshots like this.",1523131422.0
pratiks3,"Hey man, I think we would certainly all like to help,  but your presentation of the error, what your trying to achieve and the steps you’ve taken thus far is limiting the responses. 

- don’t send a pic of your errors.  Use a code snippet sharing sites that you can provide a link to.

- provide a list of steps of what you did and what you’re trying to do.

Overall, spend a little time to organize, you’ll see some quick, valuable responses.",1523136686.0
GingyMN,I have been for the last 24 hours.. can’t figure it out,1523126994.0
WrksOnMyMachine,"Get rid of the extra quotes at the end of the top line, and CLient should be Client at the beginning of the last line. ",1523124580.0
squatsquadnl,What error message? I do however see 2 quotes after your first statement.,1523124462.0
somekindofrandom,"1. Learn to read
2. Learn JavaScript",1524285036.0
GingyMN,I posted the other error pic  “module.js 549 throw err;,1523124574.0
codearoni,"Hapi, Express, and Koa.

No company worth their salt is going to look for an ""Express developer"". You want good node/js developers. Anyone can pick up the framework for the job.",1523126194.0
davidmdm,"The most widely used nodejs framework is express. Hapi is more configuration oriented as a framework rather than building your own application stack logic. 
Koa is the natural successor to express but due to the indominatable forces of inertia, and the relative maturity of libraries written for express, it is only gaining traction slowly.

If you are taking a dive into javascript for the backend start with express. Don't get bogged down too much in framework specific stuff, but try and understand project structure, and how best to inject dependencies and configurations and the like. 

It is even worthwhile to take a cursory glance at how you would write a vanilla nodejs server using only the http core library. 

if you have any questions about backend nodejs development feel free to ask. (src I am a nodejs backend developer)

Have fun!",1523132881.0
Ender2309,"Start by farting around without the framework just so you get a decent feel for what node actually is. Don’t spend a ton of time on this, maybe like a week or two. Node school is pretty decent for this. After that, express seems to be the de facto standard for js. ",1523130722.0
halotacon80,"What about meteor.js and express.js?

I stumbled upon it on the internet.

",1523130460.0
davidmdm,"I mean, php had its time in the sun. But the trend in programming right now, is to find efficient technologies that have adequate solutions to concurrency and parallelism. In that regard php is not a language of the future. But I mean a lot of the internet is built on php so you can find tons of maintenance jobs in php. 
I think right now, and you can correct me if I am wrong, but new active backend development is mostly Java and JavaScript with c# starting to lose popularity, although still very big. 

What language do you like using? That's a more important question ",1523136932.0
davidmdm,"Those are all languages being used on the backend. There is no bad choice. Obviously I have a bias for nodejs, but there's no wrong answer. ",1523160610.0
coolshanth,"I think most companies with JS backends are using Express or derivatives of Express (Koa, Sails, Feathers, Loopback, etc.).  
  
Node.js is the name of the runtime environment (the language, interpreter, standard library, and all its dependencies like libuv and v8).  
  
Searching for ""Node.js jobs"" refers to jobs where Node.js is used, it's that simple. It's expected that you can learn whatever framework is being used on the job, as long as you've worked with some backend JS framework before.",1523166753.0
the_strangemeister,"For Javascript and Node.JS everything is very community driven. It feels like new frameworks get made every day. Like mentioned in other comments being successful as a JS/Node dev will not be dictated by your knowledge of frameworks but more by your insight and flexibility to pick them up. For me that goes for anything programming and I try not to specialise myself but generalise instead, abstracting my thinking to work outside of the boxes of frameworks or languages. ",1523183351.0
konrain,"With this question I doubt you're even close to getting a job as a developer (Dont get offended) Companies want programmers, regardless of the tool. I see Rails developers getting hired by a company whos stack have nothing to do with Rails. They do this because they know it takes only a few weeks to pick up a language/framework and be productive. Learn ideas like Data Structures, OOP,MVC and programming concepts like recursion and overall best practices. These things are applicable in every program. The only question you'll receive about tools in an interview is ""are you familiar with Express.js?"" ""yes, I am"" or ""no im not""....thats that.",1523127896.0
kecupochren,"I like Koa, it’s small, modular. Hapi is also nice, it generates Swagger docs automatically",1523126003.0
Jadex1,Express,1523127073.0
g4llic4,"What really matters is how you design your code. And since most of the frameworks you suggested - sails excepted - are micro-frameworks, they won't enforce you to anything (unlike Sails, Springboot in Java or Rails in Ruby).

I've made the exercise of swapping from a vanilla Node.js server to express to Hapi and they all look the same. See for yourself (the difference are located in `src/routes.js`) :

* https://github.com/octo-woapi/api-with-vanilla
* https://github.com/octo-woapi/api-with-express
* https://github.com/octo-woapi/api-with-hapi
* https://github.com/octo-woapi/api-with-koa",1523128635.0
benjaminabel,"I vote for Koa. Mostly because it's simple, lightweight and linear. You can structure your entire app in middlewares and still quickly navigate through it. Express is the most popular framework because it was the only good option years back. Many developers install it just by habit.",1523125375.0
Mittalmailbox,"I liked koa very much because of async/await support and clear design. Take a look at fastify also, it is schema based and has great performance",1523130164.0
iends,"It doesn’t matter much. Structure your code so you can swap them out in the future. 

My vote is Koa, personally. They will all scale horizontally. ",1523122884.0
danneu,Been using Koa for years now. It's the framework I want in every language.,1523139698.0
diverightin63,"NestJS is taking off. I personally love it. Safest bet is Express, imo ",1523141114.0
yarauuta,Koa > express,1523142366.0
sherpabrowsing,"Hapi, plain and simple.",1523127956.0
anubgek,Nest. It's in TypeScript and is structured much like an Angular or C# Web API. It's very powerful,1523196943.0
nothingduploading,Koa all the things.,1523133468.0
JumpKicker,Denali or Feathers. ,1523128504.0
coolshanth,"Feathers is nice. It's thin, modular layer on top of Express.",1523165179.0
QW4K,"Nestjs: https://nestjs.com/
And do use graphql — its the future of all APIs.",1523139645.0
fzammetti,"This may be a controversial opinion, but I'll say it anyway: I'd start by asking if you need a framework AT ALL.

Don't get me wrong: I think the right answer is to lean towards using a framework by default and back away from that if it proves feasible.  But, as you examine your requirements and what you're building, you may indeed determine that you CAN back away from it.  You have to be careful, and I don't think I'd suggest this for someone who isn't well-versed generally because a lot can go wrong... but if you have the skillset and you do the analysis then I think a lot can go -right- by not using a framework too.",1523146628.0
N3KIO,"Yeah I go with Express, ecosystem is huge.
--------------

Express 117,409 repository results

Koa 17,487 repository results

Koa2 2,755 repository results

Hapi 6,300 repository results
",1523158456.0
southern_dreams,"1. Express

2. Express

3. Express",1523142672.0
martiandreamer,If you need to horizontally scale? ActionHero.,1523121785.0
raphael999,"Sorry, but can we really compare express to sails or loop back? For me, express only handles the requests and is juste like a router library while loop back or sails handles how you structure your code around models, orm etc and also use express as the router part. 
I use to used sails at the beginning but it didn’t evolve since a while and I try to make my own « framework ». I have multiple projects in production based on it and they are doing quite well for now. Here is my stack:
- restify: as the router of a test api and it serves the front end as a default route
- jsonwebtoken: for the connection management
- knex: handles the database connection
- Bunyan: for a good logging system
- moment: for date manipulation
- socket.io: websocket
I made some glue around those which instantiate all the things, make a little dependencies injection for the controller/model/repository pattern. FYI I use React as the front end.

I’m now waiting for loopback 4 to try it.
",1523171086.0
ericmcray,Use Hapi be happy. ,1523176131.0
TheNoim,I love fastify. Much better than express. The ability to use async/await and how fast it is. ,1523176795.0
ilja903,Koa and feathers. Hard to tell which one offers more. They are just different. By now feathers could be used without express. But I would like to see also a koa adapter.,1523182969.0
nejcn001,"EDIT: Thank you for all the anwsers.
So i guess there aren't many differences between express, koa and hapi? They provide basic MVC with REST api. I guess they cant compare with something like Adonis, Nest, Feathers and Keystone, since they (supposed) to have much more features.
",1523253749.0
gjb44,"AdonisJS is glorious. You can create a new app with: 'adonis new appname --api-only' to skip all the fullstack template stuff  
If you come from PHP land, it is just like Laravel. Seeders, migrations, sweet ORM, everything you need!  


But if you like to do it all yourself, or you prefer MongoDB, then Express is the only way.",1531835309.0
we_are_metizsoft,Agree with your through! You can refer top [9+ best Node.js frameworks](https://medium.com/@metizsoft/top-9-best-node-js-cms-frameworks-2018-ddf16a9a5c05) in 2018 ,1532002604.0
soulreaper020693,Has anyone tried loopback. what are the pros and cons of switching from express to loopback. ,1534916194.0
awesomeevan,Fastify is a recent more performance oriented framework. It has some benchmarks you can check out https://github.com/fastify/fastify/blob/master/README.md#benchmarks,1523126608.0
gketuma,AdonisJS,1523148192.0
BabyToy,Express. ,1523156094.0
cgijoe_jhuckaby,No.,1523168116.0
Spam_Detector_Bot,"*Beep boop*

I am a bot that sniffs out spammers, and this smells like spam.

At least 58.0% out of the 100 submissions from /u/udemyfreebies appear to be for Udemy affiliate links. 

Don't let spam take over Reddit! Throw it out!

*Bee bop*",1523086781.0
,"You're not going to get a clear answer to your question because there's no clear answer. There's a myriad of different directory structure patterns that people and companies use.

An increasingly popular way of organizing your project is to structure by feature and slice your abstractions by domain boundaries. Something similar to:

    root
    ├── bin
    ├── client
    │   └── components
    └── server
        ├── routes
        └── src
            ├── login
            ├── signup
            └── user
    ",1523087462.0
osenvosem,"Unfortunately there is no ""industry standard"" code structure.

I use [this](https://github.com/osenvosem/typescript-full-stack-boilerplate#the-project-structure) code structure for my projects.",1523110477.0
SepticReVo,"Everyone is telling you to try frameworks and libraries, but you really should get a good grasp of HTML/CSS and vanilla JavaScript before you jump into Node, React, Angular, etc. Codecademy and freecodecamp are great resources to jump into if you have no prior coding experience.",1523074444.0
chadwtkns,I would also recommend the first book in series called [You Don’t Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/up%20&%20going/README.md#you-dont-know-js-up--going)  the other books in the series are fantastic reads as well but go pretty deep. ,1523061841.0
IUsedToBeACave,"There is no best route, just dive in and start learning. Here are some suggestions.

[Javascript for cats](http://jsforcats.com/) - This will give you a gentle introduction to the language, and some basic concepts like variables, loops, and etc.

[Javascript Design Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/) - This will give you a higher level overview of more complex programming patterns. You don't always have to implement them yourself, but understanding them will help when using other libraries that do implement them.

[NodeSchool](https://nodeschool.io/index.html#workshopper-list) - Now that you have a basic grasp of javascript dive into Node.js
",1523061941.0
jar2010,"The one piece of advice I like to give any beginner is that coding is hard. Its easy enough to write a Hello World program and follow a couple of simple tutorials. But if you want to get to the level where you can write code that people will pay you money for, then that is hard. And its important to know that and to work accordingly: build a solid base first. The best part of the journey is that even if you drop out midway you will still have gained some solid knowledge and skills.

This kind individual on Github has compiled a series of study guides that take you from basics like ""You don't know JS"" to a reasonably high-level of proficiency. I suggest you take the time to review this list, decide on your track and then jump into it. It looks like a lot, but you are going to be chopping wood for a while so its worth spending some time sharpening your axe right first.

Here's the link: https://github.com/P1xt/p1xt-guides

Another great resource I would recommend is freecodecamp.com. You could (and probably should) do both of these together.

Good luck!",1523105009.0
WrksOnMyMachine,"Right, so...  not react. ",1523123309.0
QuazyWabbit1,"It helps (me) to have played with a few different languages, not just the one I'm mostly interested in. Since node (and javascript) is such a big part of the web world, this should be a cool intro: https://glitch.com/website-starter-kit

I would recommend playing with the basics and then thinking of a goal or project. Something that would be useful or interesting to you. Break that project into pieces and work on it one puzzle piece at a time. I've found that the best way to learn on my own.",1523061741.0
Tillhony,"Start learning the basis of Javascript, then learn about the Document Object Model (DOM)",1523079639.0
elimcjah,[Udemy](http://udemy.com) has a lot of really great beginner courses on Node.js. ,1523060986.0
GingyMN,Ok thank you,1523062168.0
ell0bo,"Node is a bunch of packages around vanilla JS.   I learned to code JS by hacking around in a browser, seeing what all I could do.  Now people can do the same thing, but on server side.

I'd write a very simple, very generic server / html app where you click a button on the web app, and it sends a message to the server, and it responds back.

That should be your goal... it's complicated... so to get there... can you get a web app running that when you click the button, it throws an alert('hello');  Can you get a node app that pushes out 'hello world'.  Can you get a node app that comments out ""hello world"" when you hit a certain route?

Probably don't want to code the http part by hand, so look into using Express for node to help you there.",1523112091.0
Tvde1,Make discord bots,1523118702.0
,[deleted],1523067298.0
wesleyeff,I think you need to return the boom. Instead of throwing it. ,1523209336.0
gammelini,"You can also use JavaScript to create your own modules. 

https://nodejs.org/api/modules.html ",1523058074.0
BenZed,https://nodejs.org/api/addons.html,1523059716.0
IUsedToBeACave,"There are a few ways to do this. 

1. Use C++ and the [addons](https://nodejs.org/api/addons.html) feature of Node.js.

2. You could also the [child_process module](https://nodejs.org/api/child_process.html) to execute a program like `cat` and read the results from stdout.",1523071017.0
skeliskull,"Generally what you want to do is stub or Mock the function that actually sends the mail. I recommend sinon.js for stubbing this if you can since it's simple. But if stubbing doesnt work then try mocking with a mocking library.

Then just check that the function that would send the mail is called and provided valid parameters.",1523052435.0
Hansolo510,Wow you guys are awesome. Thank you!!,1523072578.0
overthetopclock,"Nodemailer has a mock available, search for it, you can use mockery to replace with stub and test.",1523085961.0
Nebu,"> (I'm junior, don't be too hard)

Sorry if I'm coming across as hard. My personality type is such that if you did something good, I just won't say anything, because I don't think there's anything interesting to say beyond a generic ""good job"". So everything I'll say are negative things, but that doesn't mean everything you did was negative.

> I'd like your feedbacks

1. Don't store password in plaintext. Read https://crackstation.net/hashing-security.htm for the theoretical background, and then find a library that'll implement all this for you (I'm not familiar with the nodejs libraries so I don't know which ones to recommend, but a quick googling for ""nodejs bcrypt"" gives me https://github.com/kelektiv/node.bcrypt.js )
  * Note that this also lets you remove the restriction on a 10 character password length, because you'll just be storing the hash of the password, not the password itself, so the length of the password doesn't really matter anymore.
2. Rather than have a default account of `root`:`root`, remove the `users` file altogether. When your app first boots up, it should detect whether the `users` file exists and if at least one user is defined in it. If not, it shoulder enter into a ""first time set-up"" mode. In this mode, it should only serve traffic to localhost (meaning people over the Internet cannot access the server). The admin user would access the site locally, and follow the instructions to help set up their root account. Alternatively, in the ""first time set up"" mode, don't serve any traffic at all, and perform the guided setup in the local console.
3. There are nodejs libraries that let you ""watch files"" and know if they've changed, which would let you remove the restriction mentioned in ""Always edit this file from /nc-admin Or restart the node server after."" A quick google search gives me https://davidwalsh.name/node-watch-file
4. In your `messageFromAdmin`, `banIp` and `addAdmin`, maybe I missed it, but I don't see any logic that checks that these messages come from an admin. So it seems like normal users could write their own custom clients and to send arbitrary messages to your Socket connection and make themselves admin.
  * Related, it seems like users could impersonate other users because the client sends the `name` of the author of the message. The association between sockets and usernames should be handled on the server. When the client first connects, it can try to request a name, and the server either grants the client that name if it's unused (and not one of the admin names), or else it randomly generates a name for the user (e.g. if someone request ""jutsu9"", but it's taken, the server might grant them ""jutsu10"" or ""jutsu11"", etc. depending on what's available). From then on, the client never has the power to specify the name of the sender. It just sends the body of the chat message, and the server knows who sent the message, and adds in the name when broadcasting the message to all the users.",1523072584.0
fzammetti,"Not bad overall. Kudos!

Thank you for actually commenting your code reasonably well and also using spacing to make it easier to look at and just being generally consistent with your formatting, I can't tell you how many ""professional"" developers fail at some or all of that (how someone can write inconsistently formatted code, ESPECIALLY when there are tools that will do it for you, is beyond me). Developers constantly argue about what ""proper"" style is, but I don't care what your style rules are as much as I care that you consistently follow them because it makes reading code easier (this is what I harp on my team members about all the time).

I would suggest also commenting your CSS. While having well-named (theoretically ""self-describing"") names is always good, adding a ""here's how this style class is used"" comment doesn't hurt.",1523075390.0
jaridwade,Pretty cool! Keep it up,1523068160.0
NewFuturist,"No license means no review. This is opensource in the sense that I can view it, but I am not allowed to use it or extend it without a license. 

I suggest adding an MIT-like license which is friendly to companies being able to use it.",1523069501.0
monsto,"I asked here before ""Is there a restart monitor that is also a node console when running"". 

/u/kyle787 linked to [this quite good documentation](https://code.visualstudio.com/docs/nodejs/nodejs-debugging) in the VSCode docs about how it works. It worked! But nodemon broke it and VSCode debugging would have to be manually started and reattached.

One google later, I found the linked doc and it's a 100% DNA match to the question I'd asked.

The SINGLE thing to note: where it says ""Start your node app ..."", you must do it exactly as shown in the pic.

`> nodemon --inspect ./bin/www`

You can't let using `nodemon` use your `package.json` `start` defaults because it won't restart. 

And that's not even a problem/workaround, it's just how you gotta do it.",1523044852.0
,[deleted],1523049165.0
alfredmuffin,"You can do OOP just fine with JavaScript. But if you only have experience with Java and OOP, I suggest you at least try functional JavaScript, and don't try force yourself to program like you would in Java. Enjoy JavaScript's laid\-back nature, but remain aware of its ugly parts.

TypeScript and Node can be great together. Don't feel forced to use it if you don't want to. Sometimes the cost of writing loud, verbose TypeScript outweighs its benefits \(as with all tools\). Also consider [Flow](https://flow.org/), as it's more lightweight and less demanding than TypeScript.",1523033184.0
davidmdm,"Oh boy here we go again. Is javascript functional or Object oriented? The truth of the matter is a little bit of both. Everything in javascript is an object, and hence you could work in a very object oriented way. 
However it is a scripting language, and the natural way to read and understand javascript programs is through scope and function closures. 
OOP's downside is over-engineering and patterns that are needless for js. 
Purely functional and things start to get messy and lose structure. 

Js is a flexible and fun language, but not perfect and does not enforce either style. 
Your job is to compromise between both styles, to write something that is clear and maintanable. To use the best tool for each specific job. Don't get bogged down!
Have fun.",1523133685.0
ahlocate,"The most popular web framework for Node is [Express](https://expressjs.com/), which does not use OOP for its purposes.

A framework that I've had my eye on for a while but haven't tried yet but uses OOP is [Nest](https://nestjs.com/). It uses [controllers](https://docs.nestjs.com/controllers) and the like that you see in Java frameworks.

Personally since we started using Typescript at work I have tried to use it whenever possible, it makes it a lot easier to work with JS, especially if you are used to typed languages. Complex typings, such as for redux's state management can sometimes be a headache, but it's usually worth the effort of getting it right.",1523027701.0
the_strangemeister,"That's such a nice idea, wished I had found something like this during my studies. I would have defo signed up in between school years.",1523097361.0
TopPrimary,Looks useful. Thanks!,1523014917.0
sotimting,"Don’t we already have mine type detection modules?

https://github.com/sindresorhus/file-type/",1523015095.0
siak0r,"Well still there's the File API of the most used browsers, which can also be used to parse certain files/types.

See: [MDN \- File API](https://developer.mozilla.org/de/docs/Web/API/File/type)",1523043432.0
sshaw_,"Yay, magic numbers!

Why did you [comment out `file`](https://github.com/kosinix/guess-file-type/blob/d0c03e8f8e4f36e9849d7203b2101c34053ff213/index.js#L22) in lieu of `mimetype`? 

I've been on tons of Mac and *nix boxes and have never seen `mimetype`. `file`is most everywhere. ",1523071911.0
ecares,"Before I answer, what is your take on brexit?",1523006688.0
tostrinj,"Pair programming, you kids are funny.",1522985494.0
Notoyota,"You should see every request as it's own separate context. And doing a redirect is a separate request. Check the network tab in the browser devtools and you will see two separate round-trips being made.
So, you will either have to do the processing of the data and the rendering with the data in one single request, or pass an identifier to the new request (where you are redirected to) and load the relevant data there.",1522959473.0
kyle787,"Do you want to render the data with the call that returns the HTML or can you just make an API call when your HTML page loads?

One thing I am not sure about, is how you are actually fetching the summoner object in your data display code?  Is the fetching left out of the example? ",1522970365.0
kyle787,"I think the easiest thing would be to use nginx and set up a reverse proxy.  I've set it up using the https module and passing a config with your key and chain, but it isn't as clean in my opinion.  And if your cert changes or you move it, you have to update your code as well.
  

If you are set on defining the https in your code here is the [relevant docs](https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener)


Otherwise [here are the nginx docs for setting the ssl](http://nginx.org/en/docs/http/configuring_https_servers.html)


But either way you can get a free cert though [LetsEncrypt](https://letsencrypt.org/) ",1522970162.0
rdegges,Love this site. Checked it out a while back -- it aggregates meetup talks from around the world. Really cool to see it here on Reddit ^^,1523156652.0
mistralol,"
But why?",1522965664.0
talmobi,"A good and practical exploration I think. The only thing missing was the `.catch()` process in:

    run().catch(error => console.error(error.stack));",1522946276.0
BenE,"What would be really useful is a reliable library to turn promise returning functions into ones that accept callbacks and throws proper exceptions with clean stack traces. I am encountering more and more libraries that are missing the more simple, more stateless and less sugary callback implementation.",1522967108.0
bardadymchik,"I do not think this promise will pass Promises A+ tests. It is not executing async at least.
Even for learning purpose it is missing a lot of things.",1522947370.0
martymav,"Currently working on a project that incorporates what you want.

I use passport.js for user authentication. 
I use MongoDB for the database.
I use Stripe for the payments system. 

When you create the ""User"" schema, you can add properties like isAMember or isVerified and firstName and things like that. Stripe has something called webhooks. Essentially when someone signs up successfully, or credit card was declined etc, it can send a request to your server with what happened. 

At that point, depending on the route the webhook was sent to, you can change the membership level on the user.",1522941584.0
missstar,"I still consider myself a Node novice, but when I was a complete beginner, I was also confused by all the different ways there seemed to be to approach different tasks like this.

My advice would be to follow all those guides you found, and try implementing it a bunch of times, probably using different databases, different hash functions, different models, etc.

By the time you've been through that process a bunch, you'll have gained a broader understanding of how stuff works in Node (and different DBs) and you'll be better equipped to choose the implementation that's going to work for your app.",1522939981.0
aaronkim234,It really should be POST for creating a new key and PUT for updating an existing key.,1522936369.0
mansfall,"I would also recommend learning sql.  It's far more popular than nosql, and used in many more areas.  It will open up a lot more opportunity for you.",1522938313.0
gamertan,"I'd suggest looking for open source projects to hack away on. Make some changes, hack some bugs, invest yourself in learning how multiple code bases handle problems. This will be far more helpful than working on project work for free. Not only are you devaluing your own work, but you're essentially looking for projects where people aren't invested enough in their project to pay someone for meaningful, yet beginner, help. 

You'll get a lot more feedback from pull-requests and comment threads than you will from one mentor.

Browse GitHub and find something in node :)

Edit: Also, having an active GitHub account is just as good, if not better, than a few portfolio projects. ",1522982311.0
isayyuhh,Give Upwork a try if you need things to put in a portfolio,1522941036.0
dvidsilva,"Ya! I do actually and happy to provide mentoring. I have a project going real slow coz I have no accountability, checkout codecorgi.co and lmk if you like it",1522942144.0
imizaac,"Hey dude. I have a thing I want to put together, small enough, if you're down we can make it a collab. Pm me if you want. ",1523000350.0
,"It might. And I think Nodemailer is doing that itself.

But the question to ask here is: are all email addresses owners supposed to see all other emails? I guess there's a ""cci"" field in Nodemailer (I'm only using it for single-user send, like ""forgot password"", so I don't know about that), and add YOUR address (for instance noreply@xxx) in the ""to"" field.",1522925716.0
secesh,"No, I don't think nodemailer loops. If you have multiple addresses in the to field, those recipients will be copied. Everyone who gets the email will see everyone else who also got it. So do you want to send individual mail, or list?

**to** - Comma separated list or an array of recipients email addresses that will appear on the To: field

[docs](https://nodemailer.com/message/)",1522928757.0
CommonRaven,I'm mostly surprised by the fact that you are concerned that sending 100 emails will stress the server.. what are you using? The cheapest machines can handle that.,1522929195.0
TheOneRavenous,"This is the perfect candidate for a ""microservice"". Think about separating your concerns especially for longer tasks such as mailing this way it will handle millions of people if needed. 

Example which uses same server resources:
Spawn a childprocess/subprocess that takes care of actually mailing to the list of people. That way people using the server for API or application purposes don't get affected by the mailing process. Once the mailing is over close the subprocess and you free up memory and CPUs. It doesn't even to be a forked process since you're trying to complete one task. 

It might take a half day to code the subprocess but it'll be worth it. Just listen for the data and errors. Great examples in the nodeJS docs

Edit: as pointed out below this does use server recourses (i.e. CPUs ). For the true micro service experience have another server that handles the emails. ",1522937014.0
gajus0,Who is up-voting this? ...,1522927005.0
Badmuts,Looks like your proxy goes to the wrong port (3005) but your express server is running on 3003,1522906623.0
BenjiSponge,"You have to be way more specific. I have almost no idea what you're talking about.

functions that use the `async` keyword are as powerful as any JavaScript function, and any JavaScript function is (basically) as powerful as any programming language.

Shot in the dark, what you want is `Promise.all`.

    const arrOfResponses = await Promise.all([
      request.get('/endpoint1'),
      request.get('/endpoint2'),
      // ...
    ]);",1522894515.0
gonatee,I use axios with url lists in array,1522897691.0
,Windows Defender is preventing install on Windows 10.,1522894110.0
wakkanai,"http://expressjs.com/en/4x/api.html#res.download
2nd param..",1522873405.0
,"You seem confused as to what parameters should be passed to `res.download()`, you need to either pass the path and filename separately, or both concatenated.  Something like

    app.post('/downloadRequest', (req, res) => {                                                
        let file = `${__dirname}/file.txt`;
                                                                                      
        res.download(file, function(err) {                                     
            if (err) throw err;
            // ...                    
        });                                                                        
    });   

should work. ",1522865613.0
BenjiSponge,"I don't have any actual qualms with this article, but I do have some nitpicks.

What makes Go ""multi-paradigm"" while JavaScript is pigeon-holed under ""scripting""?

I also find the technologies recommended to be a little... strange. Recommending PHP alongside Node is ostensibly an okay choice, but it's going to change the kind of jobs you get *immensely*. And, while Rust is an *awesome* language, it's probably not a language you want to pick if you're trying to just get into professional web backend development. (edit: Same goes for all of the FP languages recommended)",1522871689.0
Ty199,"Squats are key to a solid backend.
Compounds are good for full stack development.",1522866830.0
Ob101010,"It is possible to know all of this, and not be able to find a job.

It is possible to know 2 of these things, and land a 80k/year job.

It's much less about what you know than who you know. Don't neglect the social skills people.",1522889048.0
dankalen,What did you use to design the infographic/illustration?,1522869236.0
max-block,Almost nothing. It looks like there is no any progress with Express for years. Am I wrong? But anyway I like it and use it a lot without any problems.,1522834710.0
ddwrt1234,"Express is just a thin wrapper around node's http module, not sure how much more there is to add? I guess http2 is on their radar for whenever node ships it",1522900270.0
ilja903,I think sometimes it is better to say that there will be no newer releases (are those changes really important to break backwards compatibility?). Leave express to more legacy projects and let newer users migrate to koa.,1523008975.0
davidmdm,"I hate the support async await by default line. Anyone can use async await as long as they are running node 8. 
It would be better to say koa leverages async await / generators to have a unique middleware philosophy and control flow between middlewares. 
Wake up sheeple ",1522848523.0
funkdr42,"Sails felt like a forgotten project for years. 

We just moved a large 3yr old project off sails to koa mvc. Traded ""magic"" and auto discovery of files for security and performance. Site launches in 1/10 of the time it took sails and requests complete ~33% faster. ",1522842255.0
pruvit,"Was going to come here and rage about sails, but seems most others have covered my complaints.  Do not waste you time!",1522858721.0
bel9708,Can you make post request without a 300ms delay?,1522843050.0
SomeRandomBuddy,Well this thread is pleasant 😆,1522862989.0
archetherium,Does the project still have traction? I have used it a while ago.,1522838306.0
djslakor,"Man, the announcement here and Hackernews has received pretty much a 100% universal haterade response.  

The team probably would've been better off to not even mention the release!  The community has apparently spoken.",1522858071.0
cspotcode,"Beware of sails.  We tried using it, immediately hit bugs, and dove into the source to find it's an absolute mess.

Even submitting bug reports was a waste of time.  The apologetic responses we received suggested they had no idea how a sane API should work.

The whole experience convinced me that the developers just aren't that good.  Not smart or experienced enough, unfortunately.

As much as possible we've moved code off sails, and the result is cleaner and faster.",1522844648.0
slynglen,You should make your site work on mobile.,1522841794.0
Ceyaje,This is a horrible website. Why in God’s name is the top of the docs called “Advanced uses”. I searched through that website for a good 5 minutes and I have no idea what this package is or what it does. ,1522845185.0
monsto,"I tested it out for a project back when they were ""in sync with node releases"" and sails was something like 0.12.

Incomplete documentation was all I needed to know. While not directly ""poor""... I mean the documentation was well written, except it was a number of versions behind on certain components. some were up to date, some weren't.

I really wanted to use it. What I found back then was that it was simply better to use Express with chosen middleware vs sails' canned but opaque approach.",1522846108.0
,[deleted],1522854418.0
ilja903,If only it were koa with knex...,1522933772.0
brodega,"Nah, fuck this bullshit. ",1522818811.0
davidmdm,Im still upset prettier doesn't let me choose how many functions I want to be able to chain before they break it onto new lines. If they changed that then I wouldn't care what other change they implemented. ,1522820132.0
,[deleted],1522814197.0
mansfall,"It's a space...
Theres no right or wrong here, just people with opinions on how it should be. More importantly is that some project does it this way every where, or the other way everywhere, but don't use a mixed bag.  This this is why teams agree on style guides to use.
",1522826820.0
oldyoyoboy,"I don’t have a an answer for SAML, but I do local dev against oauth2 using ngrok.io for the auth callbacks... it works great, for dev and testing of complicated auth routes.",1522823450.0
OzziePeck,A what?,1522835697.0
ericmcray,"If you run your node app on multiple server to scale horizontally and other node apps have to know what happened on other apps you use pubsub to solve this. 

As a basic example; you have chat server. Users connect to servers randomly. When a server receives a message from a user, you need to send this message to other users too but these users connected to other servers. So, one server publish that message to redis and others which sub to redis, get the message and send to users. ",1522794841.0
RedditorFor8Years,"Pubsub won't make much sense if u have single server with simple logic. In larger apps u will end up with dozens of servers for your app. Say u have a site where users upload files. U want to process that file after upload like image processing for face recognition. U will have one server facing user, managing upload process and once done, publishes a ""fileuploaded"" event to a central redis server. Another web server subscribes to this event and when file uploaded event is raised, processing starts on this server. Once done, this server publishes another event ""file processed"" and some other server subscribes to this event and does something else etc. You will need to have different servers managing different aspects of your application so you can scale independent areas of your app effectively. You will need Pubsub to manage interaction among those different areas. You should also look into ""Service bus"". Read about services like Amazon sqs to know more about decoupled architecture. https://aws.amazon.com/sqs/

Also read about Rabbit MQ, Azure service bus, Kafka.",1522820044.0
martiandreamer,"Typically in this situation you’d separate Node instances where some are client-facing (web) and some are workhorse task-runners. 

By publishing work to be done then returning immediately to the requestor, you offload work that can be later completed, allowing the user  experience to remain “Jobs zippy” while your workhorses handle the heavier lifts that are (hopefully) more scant. YMMV",1522790662.0
martiandreamer,"Write data to a queue with your main process, and drain the queue into a database using a separate Node cluster instance. ",1522790764.0
ericmcray,"If you pipe your data directly to file your speed will be equal to your disk speed. 

If node gets more data than your disk can handle, it will store the data in memory until disk reads. If node reachs the memory limit, it cant read data from connection. 

So, if you pipe your stream to file. Your disk is a bottleneck. ",1522795636.0
davidmdm,"I wrote a package called j-streamify. You can find it on npm. If you pass it an objectMode stream it will stream it as valid json text. In an array. 

When streaming you should never run out of memory like your program seems to do.  I would love it if you tried my package and see if it helps. Good luck.",1522819995.0
chrwei,"assuming you you're loading the array from the file on startup?

sql will add a layer of abstraction.  you'd need to add to your array, and also do an SQL insert.  then on startup to need to do your select and turn that into the array you want.  you can abstract the array/writefile the same way, using a streamable file format that parsed into the array on startup.

sql will open up a lot in terms of reporting, so if you'd find that useful, go SQL.",1522788572.0
ivanph,"> Using a write stream isn't an option as i need all the data formed into a single array of objects, not just a list of seperate objects.

I don't understand why this is a limitation, couldn't you just use something like JSONStream.stringify ?",1522805314.0
kryptkpr,"I'd recommend against inventing on disk formats.  If it's numeric timeseries data, Graphite or InfluxDB are good choices (with Grafana as UI it's really nice, I use this for my IoT).  If it's logs or documents, HDFS and Elasticsearch are popular choices for data stores.",1523156853.0
EZPZ420,Very Nice article !!,1522789563.0
1020141,"I think the key to Firebase queries is simpler data models. That isn’t trolling, that’s the over arching feedback when using Firebase, from Firebase themselves.

More complex queries are better suited to Firestore and you don’t have to be as judicious about your data modeling as with the RTD.

In the RTD you have to duplicate your data a bit in order to be able to query it.",1522777684.0
1020141,"As someone who had no experience prior to JS I can honestly say that learning JS was the best decision I ever made.

Being able to use a single language to learn both server side and client side programming was a huge win. 

I was able to learn the basics in JS and I now know I could apply that logic to other languages should I need.

Also, people are going towards MERN, React not Angular, because it allows you to write applications on any device or OS (Android/IOS).

So if you couple React and Node you’re basically able to build anything.

Just my 2c.",1522778125.0
kyle787,I’ve gone from full stack PHP work to full stack JavaScript. I think the most important thing is that you learn full stack in general really well because the transition between them will make more sense if you decide to switch. You can easily get a job with LAMP or M(E/K)(A/R)N. ,1522780920.0
CAH_Response,"If you want to be a backend then focus on backend JavaScript.

If you go the full stack route you'll be benefiting from the framework you work in and likely won't be forcing yourself to properly develop in a functional programming style. You'll carry habits from front end to the backend. I think this actually slows pure JavaScript understanding.

While developing your backends be ruthless in ensuring you're adhering to the fundamentals of functional programming and teach yourself functional design patterns or functional implementations of OO patterns.

It's really easy to write an app the acts as a bunch of poorly written scripts. To write an application that adheres to standards and can be easy read and contributed to is the sign of a good JS dev.",1522803557.0
kifkev91,"I come from a rails background, which is as far as i know, pretty similar to Laravel, just ruby instead of php. I am learning node right now, but i have to admit, that i think it is much less beginner friendly, than what i did before. The goog part about it and what keeps me going, is the huge variety of what you can do with good javascript/node skills. Besides of webapps, Javascript will also enable you to mastering frontend skills, you can easily build mobile apps with react native and also apply node logic to build very easily desktop apps for basicly every os with electron.
So for me Javascript/Node is the way to go, not just for career purposes, also i want to be able to realise projects whenever i have a good idea for one.

As mentioned before by others: for webapps i'd recommend MERN instead of MEAN. That's pretty much what the industry is heading to right now.",1522789613.0
mannyv,"The important thing isn't the language or technology, it's understanding how it all works together and the odd things about each which make it good/bad for certain kinds of things.


Almost every technology can be good for some things and not others. Some back-end technologies can't handle HA, or SSO, or TLS/SSL, or whatever, but they're great for X/Y/Z. You have to be able to figure out the up/downsides of everything and put something together that works.


That said, node is pretty fun and is worth learning. Our whole back-end is node-based, since it's mainly glue. I'm not sure there's a lot of benefit to having the same language on both sides, but people seem to believe it so that's a plus for node/js. ",1522799310.0
ChiefDetektor,"Any additional language you learn is good for you as it extends you understanding of principles that are shared among languages.
It is always worth to learn something new.
Especially for backend programming there are a lot of languages.
Start learning JS and pick up the next as you progress.
A good programmer is never tied to just one language. 
",1522819148.0
thedomham,"I'm not exactly a web dev but my two cents are that you should definitely try js (and maybe a language that transpiles to js) and see if it works for you. It's definitely more popular than php, but that's not the point.
You can be proficient in both, but you will really go in-depth once you have a job/project with either of those languages. And it would be foolish not to test both before committing to one. ",1522848807.0
cmarenburg,"Hi There, 

I think it's important for people to know that there is no one programming language that is the be all end all.  I know php, quite well, and I'm functional at developing in JS  ( not the best, but that will change) - however knowing both can only benefit you, for example you can build a frontend entirely in vue or react, and the API can be in a separate language  ",1522859224.0
jrandm,"    [1,2,3,4].reduce((acc,current) => {
        const sum = acc + current;
        console.log(`${acc} + ${current} = ${sum}`);
        // missing something here
    });

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",1522764757.0
RoyalBingBong,"The example at MDN is doing exactly what you intend to do: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Examples

You are not returning anything in the callback of reduce, this means with the every iteration after the first one `acc` will be `undefined`, hence your NaN. You example with a two-element array works, because you only have one iteration.  
You also are not using the value you receive from reduce. I assume you want to display the sum somewhere, so you should store it in a variable.

And personally I would use `parseInt` when adding the numbers to the array.",1522765435.0
,"Did you mean to put an `await` in the `nextPage` function here: `crawlPage(page, link);`?

",1522850925.0
jkibble,"What a terrible ""article"". 

Here is a bunch of npm modules that do stuff, this is how you install them.

There isn't even links to most of them",1522776225.0
Saphyel,Any CI/docker do the trick,1522758214.0
martiandreamer,"Docker could be used, but that requires some yak shaving. To quickly test your app against different Node, install ‘nvm’. 

Once installed, testing against different versions should be as simple as:
- nvm install vX.Y
- npm install
- npm test
- npm start 
",1522760197.0
NICE_TRY_KIM,I have been *awaiting* this for quite some time!,1522730768.0
d2xdy2,"Yessss. Now that I've left the job the job that introduced me to and made me exited about Lambda, this happens! I'm sort of bummed, but very excited and happy for everyone else that still gets to use this cool stuff!!!",1522731499.0
Serenikill,Ahead of Google again it seems,1522773581.0
lachlanhunt,"It's about time, But in a month, we'll all be wanting support for Node 10.",1522744808.0
OzziePeck,What’s so good about AWS Lambda? I currently host on a few Vultr servers and have never had a problem.  ,1522787437.0
digiwano,And once again freezing at some arbitrary 8.x version never to give it security or bugfix patches because AWS really doesn't seem to be able to grasp node versioning across the platform as a whole.,1522780898.0
username_is_taken43,I checked the date before getting excited :),1522721389.0
ggafo,Finally :),1522720261.0
Pawda,"That's an awesome news but why would they offer 8.10 when the latest LTS is 8.11.1... The security patches in 8.11 are rather important, mostly the one relating with the path module.

 I'm wondering how difficult it is for them to keep node up to date.. They should do like go and propose a node 8.x version ",1522741049.0
gazanther,"Try some of these:

https://github.com/tastejs/awesome-app-ideas

http://www.codeconquest.com/programming-projects/ideas-for-programming-projects/

https://www.linuxtrainingacademy.com/projects/

https://github.com/joereynolds/what-to-code",1522714337.0
jhc142002,"I have this article bookmarked for when I find some more free time.

[The secret to being a top developer is building things! Here’s a list of fun apps to build!](https://medium.freecodecamp.org/the-secret-to-being-a-top-developer-is-building-things-heres-a-list-of-fun-apps-to-build-aac61ac0736c)",1522716917.0
DaJuukes,"I don't know how much you know, but I'd suggest starting with something easy like a simple CLI to grab x posts from reddit top. It would help with CLI and external API skills.",1522711357.0
FinleyCorrigan,Me too,1522713987.0
s5fs,I like building link shorteners :D,1522724260.0
,Message board/Reddit clone?,1522714768.0
BobbyChou,"Do you think this could be done on cloud9? I've never done this before, and I'm applying for a front-end developer, so this is completely new to me..Any help appreciated

Deploy a back-end solution that allows to read, write, delete, update and insert into a
MySQL table. Consider the following statements.
Use Node.js
Validate all kinds of exceptions
The back-end implementation must be with REST Services (GET, POST, DELETE, PUT).
DB Connection
• DBMS: MySQL
• Host: aws-test.cm7d5lgfchgt.us-east-1.rds.amazonaws.com
• Port: 3306
• Database: awstest
• User: awstest
• Password: awstest.2017",1522693283.0
pomlife,"If you want a hint from an established dev: don’t ever use “==“. Prefer strict equality checks. If you need to check a falsy-but-zero-is-ok value, use a helper function.",1522689342.0
chrwei,"instead of just printing the type, print the result.  it could be that trim() always returns a string type but something is going wrong otherwise.  if you wan to force it, try `var my_string = new String('My Value');`, though this shouldn't be necessary.",1522687074.0
HelloAnnyong,Those two blocks of code look completely equivalent to me. Are you sure you're not editorializing and simplifying the actual code?,1522686843.0
zombarista,"also just always use `===`

Lots of linters support making sure you get into this habit.",1522689380.0
lachlanhunt,"My guess is that you're unintentionally reading a different value from the JSON for the two different comparisons. Otherwise, the code should work, but since we can't see what your JSON is, nor what value `i` has, it's impossible to know.

Also, you should be aware that `typeof` is an operator, not a function. You do not need to use parentheses around the value you're testing. e.g.

    typeof my_string.toLowerCase().trim();",1522707965.0
dominicporteous,"You have == mystring

I think you should have == my_string",1522686793.0
,What is your biggest complaint about your current hosting provider? * This question is biased to think about issues. I don't have any.,1522680723.0
jrop,"Complete! Just a note on the spelling: ""Other toughts"" should be ""thoughts""",1522684530.0
gran_neutrino,Glad to help!  Just submitted my answers.  I'd be curious to see the results when they're available.  Please tag me when you post them.  ,1522709107.0
Jeffdango,Did the results from this ever get posted? I looked around but I might just be missing them.,1527124811.0
Jeffdango,"Ah, that’s too bad. Thank you for not leaving me hanging!",1527127512.0
FinleyCorrigan,Done!,1522679878.0
eyedeceiver03,Answered it! :),1522686771.0
ericmcray,"You dont need to save reference on author too, if you dont want to populate authors book like “Author.findbyid(id).populate(‘books’)”. I would suggest you keeping relations minimum. Mongodb does not support join or populate natively. Populate is a mongoose feature which happens in serverside, not in db. I also suggest you dont use populate either. Keep referencers as your need and do a seperate query. 

Like:
Book.find({ author: author.id })",1522704626.0
,No. You do not need to save a referenced child item in an array. A reference to the ObjectId is enough to populate.,1522707421.0
mrm8488,"Yes, both approaches work. Designing your schema one way or another depend on how your application will access the data. Even consider to apply denormalization. For instance. If in your application is common to access to an Author and his/her books. If you keep an array on the author side with books ObjectsIDs, when you call populate() you are doing an application-level join (joins are slow). But if you add some information to the objectID like the title and/or publication date you will get all the data you need with only one query.

Important: denormalized fields must be seldom updated. If you denormalize a field that is frequently updated, then the extra work of finding and updating all the instances is likely to overwhelm the savings that we get from denormalizing.

In your case, the info about a book will rarely be updated once it is created. So it's a good opportunity to denormalize some fields.",1522712787.0
davidmdm,"Mongo is nosql. If you are using the populate feature of mongoose you have been snared and are using mongo wrong. There are no transactions and populating the reference is not atomic. Best case scenario some possible data staleness.
Worst case loss of data integrity.

",1522823814.0
Jake_Jeremy,You have to change `page.evaluate(() => {` to `page.evaluate(async () => {`.,1522675732.0
nothingduploading,clickbait.,1522650134.0
BonusPlay3,I wonder how well it works on different platforms.,1522662933.0
inabahare,"1. Expedites the Development Process
1. Excellent for Real-Time App Development
1. Data Streaming
1. Node.js is Omnipresent
1. Allows to Use a Single Code Base for Web Applications
1. Serves the Purpose of Proxy Server
1. Robust Node.js Package Manager (NPM)
1. Node.js is Excellent with Database Queries
1. Node.js Hosting has Gone to a New Level
1. Flourished Open Source Community

",1522665780.0
alchemoria,"This website looks terrible on mobile. And why is #1 called ""Expedites the Development Process"" when it's about performance, not development time? 
",1522652280.0
martymav,"Essentially, thats telling the server what happens if it gets told to go to a route. For Example:

app.get(""/"", function(req,res){
   res.render(""index.html"");
});

Anytime you type in the domain name with a ""/"" at the end, it will show the index page.",1522647245.0
TheOneRavenous,"The path argument is the URI (Uniform Recourse Identifier) or URL (Uniform Resource Location).

In node you create APIs (Application Program Interface). Since node doesn't utilize a graphical interface a server and express more specifically uses the path to help identify these resources. 

Some API ""endpoints"" are ""public"" and some are ""Privileged"" (registered user, admin), and some are simply utilities to make other portions of the app work. 

",1522684704.0
robotmayo,Using something like electron could work or you could build a website and run it on a cheap VPS.,1522630556.0
davidmdm,Send it as a multipart form data. You can use something like multer to write it to disk or handle the stream directly. Multer wraps over busboy which is a package somebody else suggested ,1522644389.0
MUDrummer,"Use [busboy](https://www.npmjs.com/package/busboy). 

Super flexible and there is a wrapper for just about every Node HTTP framework. ",1522607815.0
GedoonS,"At my previous job I was doing something like this, but couldn't get it stable enough beyond 10 Mb or so. I tried to pipe the upload stream from browser through node to AWS S3 bucket. In production the server would hang whenever users tried to upload bigger files.",1522605307.0
davidmdm,Exactly. It's actually a middleware for express. What framework are you using for your server? Or is it vanilla js ? ,1522677942.0
KasperNeist,"Hi!

Perhabs this module is useful: [form-parser](https://www.npmjs.com/package/form-parser)

It's a streaming and asynchronous multipart/form-data parser.",1522697085.0
darkdigitaldream,The definition of irony: The second edition of 'Refactoring' is less of an update and more of a rewrite.,1522617347.0
what2_2,I already saw the announcement but because of the typo I was expecting an April Fool's joke 😭,1522612265.0
darkscyde,"Writes a book in JS while stating that the language ""is another step downwards"" from Java/Smalltalk...

I love the first edition if Refactoring and happy the 2nd Ed will be in JS but I do think Martin Fowler can be a bit of a bitch sometimes. So arrogant.",1522656565.0
cazwax,"Quite a surprise to me. Hmm, will there be a new GOF too,?",1522647935.0
snowtigger,!RemindMe 6 months,1522660533.0
rgeorgy,!RemindMe 6 months,1522663995.0
unflores,!RemindMe 6 months,1522673163.0
doodlemoonch,!RemindMe 6 months,1522705887.0
necine,!RemindMe 6 months,1523535557.0
jamesaw22,!RemindMe 2 months,1522614994.0
cinder_s,!RemindMe 6 months,1522622109.0
znorlax,"!RemindMe 6 months

",1522644855.0
nikola1970,!RemindMe 6 months,1522648088.0
inabahare,Wouldn't it be better to let your reverse proxy handle that?,1522616639.0
nZambi,"Another way to do it is to store a date value the last time you reset it. And every time you try to retrieve the heartedNum you check the date, if it’s over 24hrs ago you reset it and update the date ",1522576394.0
GFandango,"this is not a good way of doing it.

log the hearts either individually or in aggregate (hearts per user per day)

then have validation logic to reject the heart if they have exceeded the ratelimit (by calculating the total of their hearts since X hours ago)",1522592071.0
kucukkanat,Dude you are like... Years late for this,1522574178.0
sshaw_,"I do agree that the Node ecosystem is a bit chaotic and packages authors certainly seem to give nary a thought to their package's dependency tree but packages like `is-number` are more indicative of JavaScript's shortcomings. 

Why does it have to tricky to determine if something is a number?

But `is-odd`? Wow. For more `is-odd` fun see: https://github.com/jonschlinkert/is-odd/issues/5
",1522598073.0
Spam_Detector_Bot,"*Beep boop*

I am a bot that sniffs out spammers, and this smells like spam.

At least 69.0% out of the 100 submissions from /u/udemyfreebies appear to be for Udemy affiliate links. 

Don't let spam take over Reddit! Throw it out!

*Bee bop*",1522564933.0
GFandango,"If you need to ask this question you should use PostgreSQL :D

Use PostgreSQL unless you have a damn good reason not to.",1522565052.0
vesters,"I used MongoDB a couple of years ago. 

I was surprised how many of the simplest functions that were not available compared to good old relational SQL. 

I would go Postgres",1522568365.0
jhanschoo,"As some others have commented, I would strongly advise you to use PostgreSQL. This is even if you have little relational data. In addition, prefer to store your data as relational tables rather than as JSON blobs, then perhaps use an ORM library to manage inclusions. Basically, the traditional way.

Why? Even if you have don't think your data is naturally relational, organizing them as such gives you extreme flexibility. The relational model means that you don't prematurely assume what data is represented like a first-class citizen as a record/object, and what data is represented as (possibly duplicated) fields in another record/object. So when you choose to change the direction of your project, or if you decide that you need to change the structure to optimize for actual usage patterns, you are not locked into a previous structure, but it is a simple matter of building an index or so.",1522580857.0
BrandonKarl,"I would say Postgre if you want to have some of the social media type features. If you think your data is going to be relational (connecting users to posts and to comments, connecting likes to posts etc) you might have to do a bit more work in mongo. But if you want something really flexible and don’t know what requirements you want yet mongo might be a good option.",1522554879.0
Kilawaga,Depends on whether or not you have a lot of relational data.,1522558263.0
delaet,"Nowaday, I think you can chose any database you feel comfortable with it. I used mongo since 2 years for user data. And I dont have any problem with it",1522582981.0
TheGuutz,"Mongo and PgSQL aren’t comparable functionally so this is a bit of an odd question....considering you’re storing inherently relational data, passwords to users, with expected data sets then relational is the answer. ",1522594434.0
um_ya,"Once Postgres got JSON and JSONB integrated into its database, there was really no reason to use nosql anymore. Unless of course your dataset is HUGE, which might require sharding, which a nosql database provides.",1522598526.0
danielstaleiny,"Reply to your EDIT>  I don't think people hate mongo, it is just PostgreSQL is such great database that is hard to go for something else if you think about relation data. I believe that it doesn't really matter and both have pros and cons. PostrgeSQL is great but scaling it is not that fun. MongoDB has horizontal scaling and if you worry about speed you should have redis in front of your database anyway. 

I am using both of them in my projects and I learn to love them both for their perks. ",1522612408.0
sirmcallister,"SQL gives you more options for the future. 

If you are unsure where future data use cases in your app are you better use SQL. It’s harder to define the beginning schema but you are more flexible in the future. When I used No-SQL it was the other way around.",1522572814.0
4_teh_lulz,"The advent of mongo boot camps has made this a question, which is unreal considering how trivial the problem is.",1522594260.0
jP_,What ever you know best. Both will work,1522556031.0
theoszymk,"==> PostgresSQL

You can use https://base.run if you don't feel like doing devops and start coding.",1522602617.0
martiandreamer,"Use Mongo. It’s built for this kind of thing, and the version 4.0 updates will bring cross-doc ACID should you need it down the line. ",1522555857.0
username_is_taken43,If it is going to be key value lookups only use mongo,1522554542.0
impossibletogetagf,"Can anyone comment on scaling MongoDB vs. PostgreSQL? I read stuff all over the place such as ""NoSQL scales better"", but also ""MongoDB becomes unpredictable and sharding is a pain"", so ""PostgreSQL scales better"". I am also finding that more people switch from MongoDB -> PostgreSQL at scale than the other way around. Thoughts?",1522596242.0
littlebigdata,"I think there’s a lot of value in using NoSQL early to make low cost adjustments to the data model, while keeping alive the possibility of migrating to RDBMS once the data model or product is better defined. ",1522557794.0
boon4376,I like no-sql for user profiles. You can just add new fields as your needs change without worrying about updating an entire table. ,1522553000.0
chrisdefourire,"I would consider CockroachDB if I were you. It's not as fast as Postgresql (or mongodb probably), but it's easier to replicate/shard than mongodb (replication is easy, sharding is not) or postgresql (has no official solution for horizontal scalability). CRDB uses Postgresql protocol, so adoption will be easy... 

I'm a long time mongodb user, and I'm starting to consider CockroachDB as a good alternative.

I second your choice to put replication and sharding high in your wish list. Most people never care about it but it's essential if you want high availability... You don't want to stop your app because you're upgrading something (db or box), and you don't want to have major downtime if your DB box is dead (which will happen eventually). People just put everything in a SQL server and forget about it... until they're down for 3 days, trying to restore backups to a new server.

In my opinion, people either need a distributed DB (Postgresql HA doesn't come easy), or they should use a cloud db.",1522602387.0
Sh4dowCode,"User MySQL, because you can not only use it in JavaScript, but in other stuff too.",1522596128.0
bjpbakker,"On a general note: ydo need async code because the way node works requires it. Read up on the tech you use before using it and complaining that you think it’s too hard.

Your error with then comes from /not/ returning anything from the select function.

The rest all relates to the execution sequence of your code. Use the Promise as a control structure for your async code and map over it using then.",1522536916.0
sznowicki,"Your function returns undefined and makes the query in next tick. 

You need a callback pattern or promise. Read little bit more about async, promises and async-await. 

Since you don’t fully understand callbacks and promises I suggest to use async await here for now so you’d get some progress soon ;)",1522537161.0
kryptkpr,"I don't know why folks are being jerks.  Make sure you are using node 8 or higher, use the normal pg package and you can do what you want with the ""await"" keyword:

async function doQuery() {
  let res = await pg.query(""..."");
  console.log(res);
}

The above code will behave the way you expect, and you can more or less write normal synchronous code, while keeping all the benefits of async such as being able to resolve things concurrently (using await Promise.All you can execute multiple parallel queries or parallel db and API lookups or whatever)
",1522596403.0
Fullstack_Questions,"Listen.  

The code you write, the syncronous part: runs instantly. Boom. Done. Ready. 

BUT: the asynchronous part takes time.. so by the time your code is finished executing, that async part is still out, buying bread. 

That's why you can not refer to bread, eat bread, make grilled cheese in the synchronous part of your code, because the async part is still busy buying bread. 

What do you do? 

Use callbacks, refer to bread within the callback scope.   
Use promise, refer to bread within then scope.   
Use async await (same as promise) and refer to bread in the next line, and the code runs that part WHEN async is back from shop with bread.   

Makes sensE? ",1522614390.0
umib0zu,Lol this is one of those examples of engineers that have no concept of business. You're selling $10 for unlimited data storage... good luck when someone starts storing PBs of data and you're stuck with the bill.,1522549470.0
hobonumber1,Congrats on shipping!,1522566431.0
phouri,How can 10$/month be unlimited? I could just store PB of data there.. ,1522529490.0
netskrill,"my guess would be Sails.  I've never used it, but I believe Spring MVC went the route of ""Convention over configuration"", and the leader of that mantra is Rails.  Sails is a batteries included framework that is heavily inspired by Rails.",1522515016.0
Ob101010,"Webpack + angular/react/Vue + node + Babel + expressjs + typescript + es6 + eslint + sublime/atom/mspaint + mongo/couchdb + firebase/digitalocean/AWS...

Man I need to find a job soon. I believe there may be undiscovered psychological effects of too much exposure to isomorphic JavaScript.",1522520011.0
kryptkpr,"You will not find such a ""batteries included"" framework in the JS world.. there are at least 2 or 3 options for each of the things you've listed and it's generally up to you to assemble the pieces.

With that said, express takes cares of routing and integrates with several template engines out of the box, add some appropriate middleware (like express-jwt) and you will be most of the way there.. but what you won't find is an ORM that's not horrific or discontinued.  I suspect it's because of popularity of schema-less things like MongoDB in the node world.
",1522527571.0
koresho,"There really is no such thing in the JS world. Everyone else embraces standardization, JS community seems to abhor it. ",1522526285.0
Aesthetickz,"One thing that handles most of that is meteor, however I don’t know what the current state of that project is. For views JS land is pretty much settled on three choices: Vue, React or Angular. You will have to add libraries to this for both front end and back end to get the full stack.",1522532261.0
Mingli91,"There doesn't seem to be a single framework that is associated with web development in JavaScript. Express is the default framework for a lot of people but doesn't come with the amount of high-level features that Spring offers out of the box.

The front end isn't handled by templates as much as it used to be, instead people reach for Angular, Vue, or React, with server side rendering to get around SEO issues with SPAs.",1522614643.0
martiandreamer,"Before you take another step designing your schema, please read the Rules of Thumb. 

https://keon.io/mongodb-schema-design/
",1522530244.0
ncgreco1440,"So you have a many to many relationship between users and the games they own. Therefore the correct answer is that you don't optimize how to do look ups with MongoDB and you use a relational database instead to do this task.

Edited: many to many relationship, thanks u/americk0",1522524298.0
_imjosh,"In this case I think the first approach is clearly the right answer. 

In general it depends on what questions you will want to be able to answer

If I’m understanding your use case, the primary question is what games does user X own?  If you used the 2nd approach, the system would have to search through every game, and iterate through the list of owners for each game to figure that out which would be really, really inefficient. ",1522516480.0
utopy,If u are using mongoose lib go check out the mongoose.populate API!,1522528633.0
danielstaleiny,"structure it as it would be relation database. 

have  game database, user database and keep games id reference in array in user object. Later if you want to speed up your reads you can implement redis as cache. 

MongoDB is not relational database but it can act like one and horizontal scaling overcomes that minor issue. 
",1522537376.0
codayus,"This isn't a good use for Mongo or a nosql DB in general.  Both of your options could be forced to work, but they have the same drawback.

Relational data should be stored in a relational DB; it's much faster, safer, and easier.
",1522600631.0
leddit6,Heroku,1522505040.0
s_boli,"Question really is if you want to pay or not.

If yes, get a $5 droplet at digital ocean or use up your free tier at AWS (aws is really hard if you're no sysadmin).",1522504745.0
Ugarz,"Heroku is a good solution, I use it for some apps. The free version is enough to test, work around. My advice is to try it for free first, get it up and running and after 24h hour working with it, if the workflow is okay for u, then you can buy the Hobby version (7$/per dyno/month).
https://www.heroku.com/pricing",1522517280.0
Felecorat,Try Now.sh,1522504723.0
_sajgon,"Buy a raspberry pi, connect it to your wifi and host it basically for free quietly :D",1522542732.0
,"Just use Heroku, it's simple and easy to setup and push to the host. ",1522510836.0
ragingkittai,look into hook.io,1522534399.0
kurple,"[Vultr](https://www.vultr.com/pricing/) has a $2.50 a moth vps
",1522561899.0
Yojimitsu,Glitch.com is what I use along with uptime robot,1522563056.0
theoszymk,"If you can make it serverless, look into https://clay.run (FaaS) and https://base.run (DaaS). Automatically scales and almost free.",1522623304.0
maximusprime2328,"Use Google Cloud Platform's app engine. You pay for what you use.

Edit: I see alot of people mentioning Heroku. I'm suggesting GCP because it is better to learn. For your single plugin Heroku is fine, but Heroku does not scale well. If your gonna spend some time learning learn GCP. It's the best hosting these days. ",1522533090.0
iamstarkov,"Jmeter, ab, artillery, wrk and autocannon. You choose",1522500265.0
Toxos_,Maybe his will help: https://www.npmjs.com/package/artillery,1522499105.0
abewee,Apache HTTP server benchmarking tool https://httpd.apache.org/docs/2.4/programs/ab.html,1522500600.0
sazzer,"Something that hasn't been said yet. This is very environment specific.

You will get different results running the server on your workstation than you will on a real server. And different again on a VM, or a docker container, or .....

You'll also get different results if the database is local or remote, and how remote it is. And different results if the load test tool is local or remote. And if you are using HTTP or HTTPS. And the list goes on.

You might also find that you need a cluster of machines to generate load, because it's possible that the server can handle more than one client can produce.

Load testing is not easy. But it's very important to know the limits of your application if you want to expand past them.",1522507502.0
albertmw,https://loader.io,1522508653.0
Saucemann,"JMeter, industry standard. Also running localhost might affect numbers. Better to dockerize and run the app in the cloud for testing with more accurate numbers. ",1522503277.0
leozinh0,"You can try Siege - https://www.joedog.org
",1522522325.0
renoirb,Try with Siege. But I realize I'm not the only one who said that :),1522528678.0
ottaky3,"Many years ago I would use flood ..

https://httpd.apache.org/test/flood/

.. but there are probably better tools around now.",1522499384.0
mistralol,"
httperf?

Comes on most linux distros",1522501962.0
namesakegogol,Gatling is great for this. Jmeter too,1522510597.0
ansraliant,"I used this [tool](https://github.com/codesenberg/bombardier) when benchmarking.
",1522511788.0
fancy_panter,"If you use jMeter, you might consider Blazemeter. It's useful to run from multiple network locations, etc. 

I'd also suggest siege for more quick and dirty testing.",1522525358.0
Mcshizballs,Use selenium and have it refresh the page super fast 😝,1522525698.0
jP_,Loader.io,1522555982.0
SkaterDad,"I've used autocannon on Windows.  The README says it's like `wrk` but written in Node.
https://github.com/mcollina/autocannon

",1522762462.0
haloweenek,Wrk ?,1522503051.0
ezekg,"I usually keep this pretty simple by using `xargs`, which supports running a command multiple times in parallel. Something like this, which runs the below `curl` command 500 times spread across 50 processes, 

    printf '%s\n' {1..500} | \
      xargs -I % -P 50 curl -X POST https://example.com/foobar >> stress.log

I think you can run the above using Window's bash shell, or whatever it's called.

[Here's a decent blog post](https://www.codeword.xyz/2015/09/02/three-ways-to-script-processes-in-parallel/#Xargs) on `xargs` and a few others.",1522515532.0
ReefyMat,"Learning the basics of Node.js is easy but as ""professional-level proficiency"" is not quantifiable, this question is not answerable.

I found Sequalize to be too limited. It might be OK for very basic queries, but as soon as you want to do more sophisticated things or have to optimize performance, it is not worth it.",1522499030.0
Triptcip,"A professional level is quite vague. I think you need to be more specific as to what you want to achieve.

My advice would be too pick some libraries that you want to learn. I.e. Express, passport, sequelize and try build an application that utilise them all together.

I would say that with your experience with server side languages and already knowing quote a bit of Javascript, you won't find it too hard.

If you actually do 2-3 hours for about 7 days, I would say you would be able to complete a project.

I would say that if you could build about 2 or 3 personal projects with varying degree of difficulty and a mixture of solving different problems then you would be in a good place to be hired as a node developer.",1522499954.0
Fullstack_Questions,"20 ok level  

50 advanced  

But you need to practise and gain experience actually working on large scalable projects with a senior around to advise. ",1522507532.0
reeferd,If you are proficient with javascript (seems like you are) then it should not take long at all. Node is javascript. You will need to learn the different libraries though. Express is the most popular web server and has a very easy interface.,1522515162.0
Patman128,"> Realistically speaking, how many hours am I looking at to reach a professional-level proficiency in Node?

No one can answer this question. It completely depends on who you are.

> I am a dedicated learner, putting 2-3 hours (or more) aside each day (7 days a week) to learn Node shouldn't be an issue.

Put 2-3 hours a day into a Node project and maybe in a few weeks you will be comfortable with it, but there are no guarantees.

> Also, how good/intuitive is Sequalize as an ORM?

Don't make the mistake of using an ORM. Use a query builder.",1522528479.0
ChiefDetektor,"Well that is absolutely impossible to estimate for someone neither knowing you nor the code base you want to port.
Learning something new is always more challenging than using the stuff youre comfortable with.
BUT I encourage you to learn new stuff. PHP has it's limits so node js is a legit way to step out of these.
Keep in mind that there are way more alternatives to node js or PHP: Ruby on rails, elixir and Phoenix, or Django with python.

I hope you'll succeed in your undertakings. :) ",1522584693.0
kryptkpr,"Don't ever let a user input or even remotely influence raw code, that's asking for all kinds of trouble.  Looking at dialogflow, this is almost certainly a single app (ML engine) with a context/state for each application. ",1522530305.0
max-block,check dotenv package,1522462710.0
kevinkace,"I usually add a `config.json` file, and ensure it's also in my `.gitignore` file. I usually include a `config.example.json` as well (with the sensitive data removed).",1522455738.0
congowarrior,"You could put it as an environment variable on your machine. With an environment variable, you wouldn’t have to have the actual value in your source code, just the variable that would then exist on your machine ",1522455617.0
koresho,Just use environment variables. You can even put it in your bash profile and forget about it. ,1522464299.0
sittingprettyin,"Also note that if it has ever been in you source code that it's still there even if you remove it... Environment variables are the way to go. If you had the key in got and then removed it, you'll need to invalidate that key and make new ones if you post the repo",1522485248.0
aradil,"For local, I use a config file that is git ignored.

For secrets management I use [Ansible Vault](https://docs.ansible.com/ansible/2.4/vault.html).",1522699941.0
bigpapo87,"Give instructions on the README on how to get the key and where to inject it, as simple as that.",1522469140.0
-victorisawesome-,"If you still want the code to work after someone downloads it, it's impossible. however, if you meant that you want your code to work on your machine, you can use environment variables by doing `variable=value` in your terminal on macOS or Linux (not sure about Windows) and then calling it with `process.env.variable`. another option is to use a config.json file and making a `.gitignore` file (don't forget the dot and make sure to commit this file and don't commit the json file) and make the contents of that file just `content.json`",1522467774.0
psayre23,"I typically have a separate git repo in another folder that hold credentials. It is stored in a different system and is deployed using different scripts. I still have the creds in source control, but it is separate enough for my peace of mind. ",1522478560.0
AxelTerizaki,"You can use pkg by zeit : https://github.com/zeit/pkg

It's pretty simple to use, the hard part is to write your package.json correctly to include all the things you need. Also modules that rely on native extensions (like sqlite3 or uws) will need to have their .node files next to the executable file generated or they won't work.",1522845960.0
TheIncorrigible1,Why? Just be sane and use languages meant to be compiled to executable,1522446584.0
catarmy,Who is upvoting this trash??,1522492351.0
pecp3,"Everytime I see such guides, I remember how much i hate those 'today we' re gonna learn!!!! ! :))))) ' guides... ",1522484359.0
Omgsweetlordjesus,"There should be rules where resources that are paid need to be advertised as paid, and if they are not should be reportable.",1522495924.0
blazergame,You can make a web game with AI robots playing with you. Pac man seems easy enough to do.,1522434066.0
Maxoumask,You can build a Reddit like website that will through machine learning predict the posts the users are going to upvote,1522435963.0
xdavesbanex,"You must have some side projects already going. Pick one of those and just level it up in some way. Cryptography seems an easy choice for almost anything because you can easily do something like self implement an authentication scheme with some nice features (salted passwords, remember me sessions, etc). This might not be the best idea if you actually intend to find users for the project but if you were able to write something up to the task it would be an obvious bonus.",1522442142.0
duybk,"Once upon a time I wanted to make a environment where I could quickly test our components for our private purpose, something like CodeSandbox using Monaco editor from VSCode as core",1522436433.0
willshowell,"To-Do apps get flack for being so simple/common, but IMO you can take one a long way. 

1. Add schedules/repeated items
2. Build analytics tool for your completion rate. Do you knock out more tasks on weekends? Do you add more tasks on Mondays? What keywords do you often use?
3. Set up shared items. If you and your family/roommates all had accounts, you could share ""take out trash"" or ""sweep kitchen floor""
4. Work on the UI - add an encouraging animation when you complete an action
5. Turn it into a personal bug tracker for other projects. Allow linking to lines of code, github comments, etc.
6. Add email notifications when something is past due
7. Add an api to handle github, slack, IFTTT webhooks

EDIT: otherwise build something to helps a hobby that you have. It'll keep you interested to add more features and polish other behaviors. For example, 

1. Sports: poll some sports network apis to get latest scores, upcoming matches. Tailor it to aggregate your top teams/players/leagues
2. Personal finance: build a better tool than what you could do with a spreadsheet
3. Video games: find an API for whatever game and rank yourself against your friends. No API? Try scraping a website!
4. Home automation: got some wifi lightbulbs? build a service that adjusts your lights with the daylight, weather, national news, etc.

I've never hired anyone, but I anticipate that portfolio items like these will be a lot more interesting, and allow you talk more freely about in an interview, than a tic-tac-toe game or homegrown cms or whatever.",1522423544.0
tapu_buoy,"Uh I am in the same boat as you so I don't know if my vote counts in or not. Here is what I have been looking at and trying to imitate : 

* https://github.com/bmorelli25/Become-A-Full-Stack-Web-Developer/#learn-node-js

* also scroll up to find the Full-stack tutorials and I tried imtiating them as they were almost beginner level those really helped me understand many things.

* YouTube videos ('cause they are free)
    * Academind (RESTful API)
    * Traversy Media
    * Net Ninja (Node.js TO-DO list after video #34 in the same node.js play list)

They have their series on Node.js as well as others just try looking at those and then code on yourself if that's what you want sometimes I even almost copy pasted but then I learned and coded on my own. Try creating more and more APIs- which is what I'm wasting my time on right now

* Go to scotch.io -> tutorials and read those article try if you can build the same/additional functionalities. I guess all this is enough practice.

As I said I'm in the same learning boat please do suggest/advice any other better project source that I must try. ",1522433802.0
DirtyBirdNJ,"I would suggest you try to build an API. 

If you can't think of anything, I suggest you make a grocery store API. Allow it to create/register users. Once a user is created, let them get lists of items in a department, add items to their cart, checkout. Take it step by step, don't build it all at once, first make users... then make items... then make departments... etc. Figuring out how to break up bigger feature sets into chunks is very important.

If you finished the node course, now might be the time to watch / read some tutorials on Express or some other node backend frameworks. I'm using Hapijs myself, but the more frameworks you investigate and research the more patterns and similarities (or differences!) you will see.

I'm using Heroku for the first time personally, and its free levels of service are awesome for these kind of projects.

https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction

Regarding your portfolio, if you build something like this and host it on github, you will be able to share that with employers. Don't neglect your README either, make sure if you share the repo with someone there are clear instructions on how to get the software running locally. Document your work not just for others, but to reinforce the concepts yourself. 

Even if you build something that is ""useless"" like a grocery API for a store isn't real... you are demonstrating very useful skills. Someone being able to view the repo, understand how to run the software and being able to figure out what the app does without spending too much time reading the source code shows that you communicated this information effectively.

**tl;dr: Try making an API, deploy it via heroku for free. Document your work!**",1522446280.0
ReefyMat,"Don't worry about the ""portfolio"" (I don't really understand that obsession anyway) but do what you like and/or look into something that you don't understand, yet.

How about a tool to query and manipulate JSON files? You have to handle (async) file reads/writes, loops/iterations, data manipulation, arrays/objects, and much more.",1522421465.0
AxelTerizaki,"To me the best thing to make when learning a new language is a project you'd like to use for yourself. It could be an app to organize your game collection if you're a gamer, or like me it was a karaoke session manager/player (with mpv behind it)

By making something you actively want to use, you'll get a lot of motivation to make it all the better. I learnt a lot in NodeJS through a project like that, for example.",1522846161.0
DenuvoHater332,Game Engine,1522431857.0
scroogemcbutts,"I like the idea of lambda so much, but these kind of articles should just be titled, ""how to take an app that works anywhere™ and turn it into a vender-locked rats nest""",1522416691.0
thingsthings,"The thing I've found with AWS services like Dynamo, API Gateway and Lambda is they sound great and work great at first, but then there's that one thing the service does not do. 

Just one thing that it doesn't have the capability, a small thing you don't notice when doing due diligence, but once you're in it, it's crucial. 

Then you're scrambling. And of course, there's a whole AWS service that, if you hook up to it, it'll work. You know like adding a secondary index you need to hook up service XYZ ( Cloudsearch ). 

I don't know if that's how they design their products, but it feels that way sometimes. ",1522428976.0
mycentstoo,Serverless is officially my least favorite marketing word. ,1522461862.0
vmajsuk,https://www.reddit.com/r/explainlikeimfive/comments/5kep53/eli5_why_cant_bots_check_i_am_not_a_robot/,1522409178.0
mathewmunyao,"I want to know about node js..
",1522426275.0
flipperdeflip,Where do these huge growth numbers come from? What does it measure and which languages are shrinking? Or is there just more code produced?,1522398459.0
Gyaanimoorakh,Wow. Didn't expect to see Go in the top 10.,1522423235.0
Mafzst,Have a look to this repo https://github.com/shanet/WebRTC-Example,1522442308.0
Mattisfrommars,"Hard to say, can you show code?",1522375709.0
willondubs,"	function iamfirst() {

		//some vars
		variable1 = ""I'm variable1. Look at me."";
		variable2 = ""I'm variable2.."";
		variable3 = ""I'm variable3."";
		variable4 = ""I'm variable4."";
		variable5 = ""I'm variable5."";

		iamsecond(variable1, variable2, variable3, variable4, variable5)

	}

	function iamsecond() {

		console.log(""arguments: "" + arguments.length)

		iamthird()

	}

	function iamthird() {

		console.log(""variable1"" + variable1)

	}


	iamfirst()",1522386392.0
Tatsuya-,Did you mistakenly define the variables in the global scope? ,1522379716.0
naturalethic,Any function can access variables defined in an enclosing scope.  If you declare them they will be redefined for the new scope.  ,1522381943.0
RogueAfterlife,"A client does not imply a web browser. A client could also be another server which needs to authenticate the token that it has received by using the issuer’s public key for verification. This system allows clients to verify a server’s authenticity while also preventing a client from creating authentic tokens on the server’s behalf. If there were only one key (shared key), there is nothing stopping any client that holds the key from creating valid tokens.",1522354298.0
Oceanswave,"If concerned about space, checkout the alpine node image weighing in a t 65mb: https://anchore.io/image/dockerhub/mhart%2Falpine-node%3Alatest",1522361277.0
mirage27,"If image size is really a concern, do a custom build from alpine and recompile Node yourself, with the `--without-intl` and `--fully-static` options.

Also, strip the useless files on your node_module folder.

By doing so on a small project (micro-service), I managed to get a final image size of 26 Mo, less than the size of the official node binary !

Disclaimer : I know some of those tips won't be applicable in some cases. Also do your research on what everything is doing before incorporating it in your build.",1522397158.0
OzziePeck,"404 good job, OP....",1522417054.0
scttmthsn,"A combination of directory watch and flushing the require cache/re-requiring the files will get you there.

[node-watch](https://www.npmjs.com/package/node-watch) & [flush-cache](https://www.npmjs.com/package/flush-cache) are good starting points.",1522357373.0
TomerCodes,"Do you know [nodemon](https://github.com/remy/nodemon)? It does restart the server, but it's automatic.",1522356293.0
iluretar,"i was looking to do this the other day but coulnd't find anything, if you manage to do this please share it here :)",1522674559.0
,"I changed the ID generator in the session middleware for express. You can pass in a function in the settings that provides a custom session id. Then you can easily install another, higher security session id generator method :)",1522331169.0
grajagandev,"Here's one: https://github.com/Smile-SA/node-pushserver

It looks like there are more like this on GitHub",1522344371.0
whyNadorp,And how many dependencies?,1522306582.0
hrbudding,Is it like a farming bot?,1522334749.0
cyanydeez,https://aws.amazon.com/premiumsupport/knowledge-center/load-balancer-http-502-errors/,1522294468.0
BenZed,"google.auth is undefined then, right.",1522266057.0
gamafranco,Nice article.,1522272284.0
paperelectron,"Your JS code will be unresponsive, until you are done doing your work. Node will continue to receive events/requests and add them to the event queue. So the server may look unresponsive while you are doing CPU bound work, incoming requests will just buffer until the event loop can continue.",1522253733.0
davidmdm,"Have you investigated exactly how long it takes for your node server to respond once it receives a large packet? Cause theoretically it's fine to be concerned with blocking the event loop, but in practice it's quite some computation you are talking about. 

If indeed the computation is expensive, 
I would suggest having a couple worker nodes and doing message passing. 
Look into the ""child_process"" module. 

If this is overly complicated and the last doesn't fix your problem, then nodejs might not be the correct tool for this job, and I would suggest something like go. They have frameworks very similar to express and their concurrency / parallelism scheduling is probably the most advanced and yet easiest to use. ",1522327060.0
,"I'm going to assume, you can process this out of bounds (i.e. the sensor doesn't need a guarantee that it has all been processed correctly - but instead can just receive a ""thanks"" type response).

Create a job queue. Add the payload from the sensor to the job queue. Setup a cluster of node processes (say 10 but you can easily add/remove processes to the cluster) to consume jobs from the queue. Each node process will work in isolation of each other and only process the next job when it's finished its current one. This would allow the sensors to send you big chunks of data while maintaining a responsive front end server to suck in the payloads from additional sensors since there is practically 0 processing and hence, won't block the event loop (most will be just passing the data over the network to the job queue). If a node process gets a large payload to process of the job queue, it could take say 10 minutes to process. The other 9 processes will continue processing the fast payloads from the queue. If you get 10 large payloads all at once then no other jobs will get processes until 1 is finished. It's down to you to know your traffic payloads (you suggested they would be infrequent), server memory usage, etc. Most job queue software will let you have multiple job queues and publishers/consumers can work across multiple servers out the box in most cases. So you get quite a lot of flexibility regarding scale. If you don't have enough consumers, all that happens is the queue builds up (eventually the server hosting the job queue server will run out of resource but you should be monitoring this and not let the queue build so high).


",1522332328.0
MrRGnome,"While I really like web sockets and use them in the vast majority of my node projects, what's the argument in favor of making them part of core? I'd prefer a slimmer core than a more bloated one. Let me decide what's important for my project.",1522247239.0
JavascriptFanboy,"well I constantly read how all frameworks are removing stuff from their core, I'm a bit surprised to see that there's actually a need for including websocket to nodejs",1522254334.0
johnyma22,"If you add websockets don't you need all the graceful fallback alternatives IE long polling?

I never wake up in the morning and think of this as a missing feature from nodejs and I think feature creep in nodejs could be counterproductive Vs empowering existing libraries.

The thing that wakes me up in the middle of the night is when I do an npm install and end up with 20000 files nested super deep which eats into my file system space and causes unmaintainably long paths on windows....",1522243226.0
thedude42,I’m curious what websockets gets you that http2 server push doesn’t?,1522244412.0
,With good solid librarires in existence why would anyone think they should add this to the core?,1522284174.0
Triforcey,"I <3 web sockets.
Please don't put them in the core though, because I pretty rarely actually need them.",1522303097.0
SippieCup,udemyfreebies is literal spam and should be banned from this subreddit.,1522236086.0
codearoni,"Stub your DB call with sinon.js

A unit test should only be concerned with the behavior of your JS code.

If you're going to test against a real DB, it's no longer a unit test.",1522203694.0
kryptkpr,"On a fresh ""testing"" db: Run migration to build schema, run seed to fill it, run your test, rollback migration to get back to clean slate.  Repeat. ",1522200426.0
FREEZX,"I have a testing db. My test creates all tables and then makes queries to all my app endpoints, and runs extra calls to db if necessary. Before each test i clear the db.",1522218169.0
phouri,"Don’t mock your DB.

Create a test DB, migrate, seed, and run unit tests.

It doesn’t add that much time, and without it imo the tests are missing a lot.",1522222063.0
cyanydeez,id bet its being put to sleep,1522209964.0
PessimisticCoder,"Look into AWS Lamda, you can schedule lambdas to be run at certain times. Especially if your function is relatively small, this could end up being free as well.

Quite easy to set up with the serverless framework.",1522285289.0
uhoreg,"PNG shouldn't be any larger than GIF, and should be smaller.

But generally if you're transmitting data over an unreliable link, it's worth looking into [error-correcting codes](https://en.wikipedia.org/wiki/Forward_error_correction), which will increase the data transmitted, but will greatly decrease the amount of corruption.",1522203262.0
jsgui,"This sounds like a very interesting project. I'm interested to know what setup you have to transmit data that far (if you feel like saying).

I agree with u/uhoreg in that error correcting codes in the transmission layer would be the better approach. Find a way to reliably transmit the data (with validation its been transmitted correctly) and you'll be in a better situation than relying on the image formats.",1522240277.0
johnfrazer783,"Came here to say the exact same thing, having a *file*format that is somewhat resilient is certainly a good thing, but you should definitely look at establishing a transport layer that takes care of resending on corruption. There's that OSI layers model; on the internet, the differences between UDP and TCP/IP might prove instructive. As an analogy, I find it misguided to try and implement terse markup, terse scripting and terse styling languages when what you want is saving bytes transmitted; that task is much better done by just generically gzipping all the content you want to transmit. Likewise with data integrity.",1522323907.0
johnfrazer783,"And BTW regarding image file formats: Understand that of all file formats that humans have come up with (tens of thousands at least), of all the image formats of the past half century or so (many hundreds at least), only *five* are universally accepted by browsers these days, and they are BMP, JPG, GIF, PNG, and SVG, and that's about it. There are a few more if you narrow the choice to say, Google Chrome and Mozilla Firefox. Just to hint that while it may be that there's a super-duper small-and-yet-resilient format out there, it's inevitably also going to be super-duper obscure. Better go for one of the big ones.

I think your impression that 'GIF is small, PNG is big' is not correct. PNG can be a lot more economical than GIF which has a pretty simple-minded compression algorithm. 

Another consideration could be that you probably do not want to tie your users to using a single, maybe arcane image format. If you want to enable them to send *any* kind of files, it immediately becomes abundantly clear that transport resilience belongs to a layer other than the file format.

Just my two cents.",1522324452.0
martiandreamer,"I really appreciate all the feedback, and will most certainly take your suggestions into consideration. 

The reason I requested to know about file format durability is because, since this is a high-altitude balloon project, I really can’t predict with any level of accuracy how well signal-reception will go once the balloon is out of sight. We might mis-aim the antenna, or some kind of unrelated radio transmission on our 900mhz band might interfere with our signal; it’s really difficult to say except to write our code to be as durable as possible and test thoroughly. 

Having said that, I'm going to take a closer look at ECC; reducing the size of packets is something I've just completed (essentially wrote the JS equivalent of Protocol Buffers).

Thank you all!
",1522325461.0
kryptkpr,"You want some Forward Error Correction, an idea from communications where you TX redundant information in a clever way so an RX can always recover the original even if losing X% of packets.  Then you don't care how the image itself is encoded.  Unfortunately I don't think anything that's not a toy exists in open source JavaScript form, you will either have to wrap a C lib or implement yourself from a textbook ",1522531094.0
SteadfastWog,"Check this tutorial out: 

https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp

",1522204889.0
,I have no idea what you're trying to say :/ You may want to consider rewriting your question if you want to get more of a direct answer.,1522332493.0
scttmthsn,"Firstly, don't jam all your creations/manipulations in one migration, you're just asking for headaches. Break them down; 
 e.g. create & drop one table per migration. Common sense prevails that if stuff goes together then it belongs together though!

> If I create a new schema with alterTable, I've lost reference to the schema above.

I don't know WTF that means…

Anyhow… (I'm using postgres and [es6 migrations](https://github.com/scttmthsn/knex-es6-migrations) but the basics apply)

Create a table (new migration)

    const table = 'foos';
    
    export const up = knex => {
      return knex.schema.createTable(table, t => {
        t.text('name');
      });
    };
    
    export const down = knex => knex.schema.dropTable(table);

Insert some data
    
    INSERT INTO foos (name) VALUES ('joe'), ('abe'), ('sue')

SELECT * FROM foos
    
    +--------+
    | name   |
    |--------|
    | joe    |
    | abe    |
    | sue    |
    +--------+
 
Alter that table (new migration)

    const table = 'foos';
    
    export const up = knex => {
      return knex.schema.alterTable(table, t => {
        t.increments('id').primary(); // add a new column 'id'
      });
    };
    
    export const down = knex => {
      return knex.schema.alterTable(table, t => {
        t.dropColumn('id'); // drop 'id' column
      });
    };


SELECT * FROM foos

    +--------+------+
    | name   | id   |
    |--------+------|
    | joe    | 1    |
    | abe    | 2    |
    | sue    | 3    |
    +--------+------+

There's some automagic going on here since I chose a primary key, obviously some random column will only get filled if it has a default value.
    
    

",1522181392.0
mojojj31,"You do not rollback a migration once it's in production. You do not update a table by changing an old migration. You change tables by creating new migrations with `Alter` queries. The point of migrations is to record a history of changes to the schema of your database. It is not meant for you to look at to get the current schema, you can already get that by looking at the database itself.",1522209162.0
TheLegendOfZero,"I implemented a new objection.js project on an existing database recently, with a lot of existing data and a small'ish schema.

I don't know if this method is ideal, but I replicated the database schema into a single knex file (something like `20180318005124_initial.js`).

I then manually added the `knex_migrations` table and the `knex_migrations_lock` table, then added a single entry for `20180318005124_initial.js`. This migration would represent the intial state of the database, as if it had already run.

I've since added new migrations without any issue, and if I want to deploy to another environment the initial migration will set up the database schema accordingly.

In terms of rollbacks, you're going to lose data either way. That's outside the scope of database migrations in general, and is more in the realm of data management. That should be taken care of via backups or one-off data-migration scripts.",1522201592.0
JavascriptFanboy,"Thanks guys for your input. This really changed the way I look at knex migrations:
> the idea is that incremental changes can be made

as already said, I haven't been doing this long, so I got a bit confused. Taking this into consideration, I can see that each migration is another ""update"" to the database structure and these updates stack. Rollback then just deletes everything, so I don't know when is it reasonable to rollback schema?",1522312449.0
martiandreamer,What about a combination of pm2 and running Node with the —inspect flag?,1522185046.0
kyle787,What are you ultimately trying to accomplish? ,1522174490.0
danielstaleiny,"the problem you are describing is not uncommon and I faced the same issue. I have solved it with serving images with S3(CDN as well) and resizing them on the fly with lambda with sharp. 

Look into resizing on the fly and you will find what you need.  Image resizing is CPU intensive task which I wouldn't do on the server. 

I might do complete tutorial with CDN for it later this week if I have got some time.  but there are enough resources to do it without CDN, the only thing you have to be careful is to give correct permission for Lambda from S3.  


original repo

https://github.com/awslabs/serverless-image-resizing
",1522179246.0
martiandreamer,"I’m going thru the same thing, sending jpg images via (xbee) radio. I’m using the ‘gm’ package, graphicsmagick, which is closely related to imagemagick. Both might be options for you to look at. ",1522189971.0
yarauuta,motherfuckers,1522169137.0
self_refactor,So how democracy is not totalitarianism in this case. I feel ashamed to be part of EU idiocracy . ,1522173272.0
darkscyde,Sounds like a good time for a decentralized GitHub clone.,1522220845.0
slobodan_,"""Migrating to serverless brings a lot of questions. How do you do some of the non-serverless tasks, such as a cronjob in a serverless application?

Let’s say you have a small Slack app that sends the top five stories from Hacker News to your Slack channel. At some point you decided to shut down the server where you run that app, but you still want to receive the stories. Serverless with AWS Lambda seems cool. But how do you trigger the AWS Lambda function at a specific time?""",1522156613.0
pie6k,Here you go https://github.com/prismake/typegql,1523954522.0
andersevenrud,"A quick search on npm and I found this: 

* https://github.com/fisherw/qrcode-logo
* https://github.com/heartnetkung/node-fancy-qr

Seems like what you want. 

Looking at the sources of https://github.com/soldair/node-qrcode it seems that this one also might have some undocumented support for this.... not sure though.",1522152528.0
user3961,"All joking aside, it’s likely that whatever you want to do with that data will be passed to another promise. Look up “promise.all” aka promise chaining. It’s an array of promises that pass the resolve() of the one as the input to the next and so on.  E.g

let analyze_data = data => {
    return new Promise((resolve, reject) => {
         let transformed_data = some.analysis(data)
         if (yadda_yadda) {
             resolve(transformed_data)
             return
         }
         reject(“ya done ****** up”)
}

let plot_data = data => {
    return new Promise((resolve, reject) => {
         let plot = some.plot.lib(data)
         if (yadda_yadda) {
             resolve(plot)
             return
         }
         reject(“ya really done ****** up”)
}

Promise.all[alpha.data.daily(ticker, etc), analyze_data, plot_data].
   then(res => {
        some.dom.lib(res)
    }).
    .catch(reason => { console.log(reason) })

Sorry I’m on my phone. Probably won’t compile first try. 

Async/ await is a way to make your call synchronous and is not a replacement for promises. I haven’t had to use them as I find promises simple enough once you get the idea. ",1522143992.0
stratoscope,"You're misunderstanding *when* things happen.

When you make that `console.log(data)` call in your callback function, *that* is the place and time where your data is available.

You don't want to try to set some global variable there. You can do it, and it will set the variable, but now how does the rest of your code know when that variable has been set with the data? It doesn't.

What you need to do is deal with the data at the place where you make the `console.log(data)` call. You know the data is there when that call is made, right? It logs it OK? So that is where you need to do whatever you need to do with that data. Not someplace else.

Does this make sense? If not, let me know and I will try explaining it a different way. :-) But once you understand this, you will have the keys to the kingdom.",1522131852.0
fahq2m8,You just gotta get more npm's to make a variable out of your parameter.,1522133333.0
mexican_restaurant,"It sounds like you may be trying to set the function call to a variable and using it, and that you may be misunderstanding that you’re actually using a promise here. 

This library looks like it’s making an http (asynchronous) call to an api somewhere, in JavaScript we usually use callbacks to do something when the operation is done. You can read more about this, but JavaScript has this “event loop” thing that encourages doing asynchronous operations as to not block the process. This just means your page won’t freeze while the content is loading. 

The semi-new form of callbacks in JavaScript is using “promises”. And this api implements those apparently, I know that because the api is “then-able” - that is you call .then on the result. This is in place of the callback, and you should put your logic inside this .then, or initiate your business logic after the content loads.

TLDR - put your logic inside the .then, your data object will have what came back, or initialize your logic after it loads. Not sure what framework you’re using, if any, but your logic will need to be initiated after the call is done if that makes sense. As I said it varies widely based on what you’re using as far as framework (react, angular, vue, plain js, etc.)",1522126376.0
the__itis,"instead if .then....


do this

async function name () {

var yourVar = await npmFunction()

for (let entry of yourVar) {

whatever the fuck you want

}

}

name()",1522154934.0
calumk,"You might want to consider moving towards async/await

[https://blog.risingstack.com/mastering\-async\-await\-in\-nodejs/](https://blog.risingstack.com/mastering-async-await-in-nodejs/)",1522134950.0
voiping,"You need `$geoNear` and `$match` to each be their own objects, inside the array.

Right now it's two entries in the same object.

Syntax highlighting, e.g. vscode, will show the last bracket matches the first bracket.

It should be more like:
`[{$geoNear:{}}, {$match:{}}]`
",1522132120.0
WebDevLikeNoOther,"An alternative is to use Firebase and their real-time updates to bind the conversation(s), to the DOM, and only load a specific number on the page load, and then load more as the user scrolls.",1522109315.0
MattBlumTheNuProject,"It’s actually not that complex. I’ve used Pusher, too. You load the last 20 messages sorted by newest and then the client subscribes to the socket or channel. When a message comes in to the server it’s written to the DB and if that user is online you dispatch an event via your real-time service and handle it on the client. ",1522120509.0
applejak,"Polling is probably the shortest putt. If you get traction, then consider the long game. ",1522119650.0
flipperdeflip,"Why not both? 

Make it classic pull/poll based at first, then add a socket-based notification system that pushes a 'something changed' event to the client, and if they are still interested (tab in focus etc) they do a http pull for new messages. 

The push thing could be optional and doesn't even have to be the same server, it could even be an external service.",1522140729.0
WebDevLikeNoOther,"Yeah, there are plenty of tutorials to get started. I would personally go towards AngularFirebase.com, they usually have fantastic tutorials for all sorts of things Firebase / Angular related. Also read up on AngularFire2, as it’s a pretty much standard when using Firebase now-a-days, but certainly isn’t required to get things working. Just makes stuff easier in the long run.",1522165598.0
Drunken__Master,"The link didn't work for me, I think because I'm in the US, but if it's Andrew Mead's course then it's absolutely a good course, I've taken a few Node courses from Udemy and Andrew's was definitely the best . 

No rush though, Udemy has those ""sales"" all the time and if not, you can just google for a coupon .",1522110580.0
martiandreamer,"I've found my best successes learning tech with books. I typically shop for O'Reilly books, and read them thoroughly (and multiple times). Maybe this could be complimentary to what you're looking for?",1522117232.0
cowboy8038,"Two of my previous comments from other related threads....

I'll definitely second anything by Traversy Media. I'm going to wind up finishing this one tonight and definitely recommend it. It really starts at ground zero with node and slowly adds in stuff like express and Mongo. Its not till the 3rd or 4th project that you deal with any sort of front end. https://www.udemy.com/the-complete-nodejs-developer-course-2/

All of his courses are great, I've think I finished two already (including this one) and currently working on the meteor/react one. More then anyone other instructor I like his pace and challenges. I like how sometimes you'll be doing something not really understanding the point and then all the sudden it fits perfectly into the application your building. ",1522123678.0
Leading_Man_Parts,"Your link appears to be broken, but I think it's trying to point here: https://www.udemy.com/the-complete-nodejs-developer-course-2/learn/v4/overview

I went through this course and thought it was pretty good. Andrew does a good job at explaining the topic, showing you how to write fairly clean code, and then each video typically has at least 1 do-it-yourself section so you can reinforce the lesson.",1522119498.0
syszen,Thank you for your feedback guys !,1522139297.0
kaszpero,I love to use nconf.,1522132895.0
lilweirdward,"Heroku makes it mad easy to set environment variables for your application too, and it works the exact same as deploying a .env file would. Good article all around though.

Honestly though the best part by far was the Java jokes. Will definitely be using the last quote multiple times in the future.",1522119056.0
,[deleted],1522104002.0
bjpbakker,I think you have to elaborate a bit on what your actual question is :),1522094862.0
philipodev,Feel free to share your thoughts.,1522090436.0
virtulis,Thought this was for gamepads. Bit disappointed.,1522096193.0
davidmdm,"I mean, it is flashy, and uses decorators, and es6 classes... but i don't know that it solves a problem related to routers and controllers... pretty though i guess.",1522116550.0
BehindTheMath,"Did you read this tutorial?

https://scotch.io/tutorials/easy-node-authentication-setup-and-local",1522107339.0
ramides,"Take a gander here for a basic configuration:
http://mherman.org/blog/2015/01/31/local-authentication-with-passport-and-express-4/

I’ve often referred that page just for basic layout things- it’s linked on the passport-local-mongoose docs. Of course, you can use whatever local strategy you like. ",1522121214.0
ShlimDiggity,I was having an issue with npm last week.. Turned out that Malwarebytes was blocking the install.  Could be this!,1522079312.0
Danakin,"Only mildly related because OP had a different problem, but I found changing the default path for npm global installations to somewhere you don't need superuser access work wonders on the Linux subsystem for Windows. I somehow could not get Angular-CLI to work correctly otherwise...

    $ mkdir ~/.npm-global
    $ npm config set prefix '~/.npm-global'
    # Add to ~/.bashrc:
    export PATH=~/.npm-global/bin:$PATH",1522125108.0
Classic1977,Use Linux.,1522114750.0
oorza,"I cannot possibly imagine receiving a message from this bot and it making me more likely to fix a build, but less.

",1522086970.0
myurr,Have you redirected stderr to the log file as well?  Use 2>&1 to do so alongside the > logfile.log.  A process manager like pm2 will do this for you as well as restart the service automatically when it fails.,1522086042.0
,"Wow. It's not very often I agree with these types of posts (people don't know what they don't know and as a result often think they know everything!). But in this case I feel you've covered almost everything I would have covered myself which doesn't happen much (I do a lot of interviewing and lead a dev team doing Ionic/Angular, realtime, nodejs, etc developments so I'm often exposed to quite a range of skill/tech levels). Was surprised to see you even included PWAs! I'd say you're pretty good at your job going by that article and look forward to seeing the backend and devops side (this is where I tend to specialise specifically within scalability/architecture) :) 

My only major gripes are you didn't mention anything around ""realtime"" (like websockets.io). I feel you should really add that in! Plus mentioned reactnative and ionic off react and angular. Which are the frameworks for supporting mobile application development. Again, i feel you should add those in too.

I would also be tempted to expand the ""learn the basics"" part to be more specific. 99% of the JS developers I interview don't even understand how the prototype chain works and yet that is at the core of any well architected js application. If they don't fully understand the core of javascript it will hinder their understanding further on and impact what they build on top - including the increased likelihood of creating spaghetti code. But, this whole paragraph could be optional :) Just my 2 cents.

I'd also be tempted to include an honourable mention of nodejs even thought it's not entirely front end (let's be fair, a lot of employers like the idea of paying 1 salary to someone who can build server side apps too and at some point they are likely to cross paths with nodejs). Plus you posted this in the node subreddit! ;)

Overall, amazing article to start off 2018 with and it looks like it too you some time to construct. +1 from me :)",1522066987.0
enviousjealous,Please add in accessibility near the top. It’s criminal how little attention is paid to it by FE folks. ,1522116711.0
,"Fuck that shit.  That's why I've quit web development, it's just a big racket now.",1522109994.0
gabe1331,Git is not optional,1522385940.0
boon4376,"I've been avoiding #14 - but I know I need to know it >.<

The server-side-rendering section confuses me. I'm building a SSR React / Redux / React-Router App on Firebase and I have never heard of Next.js or After.js. After reading their intro's, I'm not even sure where they'd fit into what I have built. 

Basically in my case, an express app on Firebase Functions provides the initial static HTML and content pre-rendered, and passes a pre-loaded state. On the client side, react hydrate merges the client session and interactivity. Server and Client bundle.js are generated from the same code base, but have their own webpack configs for the different environments. 

(The tutorial that got me started: https://www.youtube.com/watch?v=82tZAPMHfT4)",1522092316.0
N3KIO,"https://nuxtjs.org/guide

* https://github.com/nuxt/nuxt.js",1522096107.0
the__itis,VueJS needs mention ,1522076778.0
yeahdixon,Add server side vue js to nuxt ,1522318790.0
sitewave,"This is really useful, thanks.

It’s strange how quickly things change. I’ve spent nearly 20 years in the industry, over 10 writing full-featured web services but the last 4 on a java/xslt contract. 

The last web service I wrote used jQuery, velocity, spring-mvc, hibernate, oracle - tools considered industry standard at the time. Not only has the tool set changed but entire paradigms.

Going to start with learning node, react and sass. ",1522356773.0
Trismirite,"Or you can use https://www.npmjs.com/package/simple-youtube-api
I recommend it",1522094987.0
Steeljuice1,"Hey guys! I just created this post on 'path' in nodejs. I'd be happy to get your input on the ""writing"" style I was using. I bascially removed 80% of the post text and took out the parts I think was important. Do you want 'shorter' more informative posts or do you want to have that extra text?",1522048179.0
kgram,"You can't do PHP-style includes in express (or really in anything but PHP). Period. In time, you may come to see this as a good thing, but I imagine it's quite annoying right now. So let's talk about how it does work.

Other web-servers rarely function like php, where you basically ask the server for a .php-file and receive whatever HTML was written in this plus whatever was produced by running the PHP. They instead define some rules inside the program for how a URL should be handled, and construct a response either through simple strings or through a template. Jade is a library for templating, but *it only creates HTML, it doesn't handle how the URL should be parsed or how data should be fetched from a database or anything like that*.

Let's take a bare-bones example.

Let's say you have a PHP-file called `someFolder/index.php` looking something like this (bear in mind I don't know PHP very well and this is pretty pseudo-code-y):

    <html>
        <body>
            <?php $some_string= get_some_data(); ?>
            <div><?php echo $some_string; ?></div>
        </body>
    </html>

To replicate this in express, you could *in any file where you have a reference to the `app`-variable created by calling `express()`* do this:

    app.get('/someFolder', (req, res) => {
        getSomeData().then((someString) => {
            res.send('<html>\n    <body>\n        <div>' + someString + '</div>\n    </body>\n</html>');
        })
    });

Now this could be done in much more clever ways with template strings and async/await, but I hope it gets the point across: there is no ""breaking out"" of the javascript into HTML, there is only creating strings and sending those.

""But that looks like shit and is impossible to maintain"" you're probably thinking. Yes, thus we introduce templates to create the string for us. Jade (or [pug](https://pugjs.org), as it has now been renamed because of a trademark issue) is one of many templating languages you can use with express, but it doesn't look like HTML very much, so if you're most comfortable with that I'd recommend something like [handlebars](https://handlebarsjs.com/) instead (pug is *very* nice once you get used to it though).

So let's try to add a pug template to the example. We should change the `res.send` line to 

    res.render('someTemplate', { someValueSentToTheTemplate: someString })

and in `views/someTemplate.pug` we do:

    html
        body
            div= someValueSentToTheTemplate

Note that I have deliberately changed names to show that you don't *have* to be consistant. You would probably want to name the template `someFolder.pug` like the route `/someFolder` and keep the `someString`-name inside the template as well. But you don't have to.

I haven't run any of these examples, so there's probably some stuff missing. Most notably you need to add pug as the default templating-engine in express.

It's probably gonna take you a while to get used to working in this way, but there are very good reasons to separate routing, data-access and views from each other. It can be a bit more complicated though, which is probably why PHP is as popular as it is.",1522059142.0
elimcjah,Follow the docs on express. It’s easy to set up a node.js server with express without express-engine.  ,1522054356.0
cspotcode,"What AWS product are you using?  There's a lot of options on AWS, which one are you using?  EC2, ECS, Fargate, Lambda, elastic beanstalk, etc.",1522030352.0
BobTheBarbarian,"Using array methods instead of for loops 98% of the time. (.filter/.map/.reduce)

Using create react app instead of rolling your own web pack (especially at first)",1522022475.0
DLabz,Streams. ,1522023578.0
cgijoe_jhuckaby,"I wish I learned how the event loop worked a lot sooner than I did.  It can be hard to wrap your head around at first, and I avoided it, but it really helps to understand how Node is executing your code.  Recommended read: https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c",1522037189.0
moralbound,"FP style!  Looking back, I'm disappointed  my school didn't have a compulsory Haskell intro.",1522024172.0
majorius,"prototypes, i was in js for 3 years and just now realized what i was missing...",1522044718.0
goravsingal,"sinon, mocha",1522060166.0
TheNoim,Object spreading is very useful. And lodash.get until optional chaining gets a thing. Also the for of loop. ,1522063041.0
dunlager,Test driven development. ,1522466237.0
cryptochild121,Wonderful. I've been using this site for quite a while now. Totally worth my time. ,1522003300.0
danielstaleiny,"Continuous integration, Continuous delivery.  Have a look on pm2, travisCI, and Codeship for free tier

you can also use git and git hooks on server to perform restart/ testing/ pushing, 

",1522062131.0
bjpbakker,"Group them by replyToCommentID or id (when not a reply).

Then iterate over each grouping and render the list of comments (the one with the id being the grouping key first).",1521999140.0
jrandm,"Conceptually EJS and MySQL are red herrings to your current problem as I understand it, which is: How do you structure the nested comments data? More specifically, what is a convenient structure for rendering nested comments for viewing? I'd propose something like this:

    {
      commentId: ID of this actual item,
      commentText: Self-descriptive, can also assume date/time/user/etc values,
      replies: [array, of, comment, objects],
    }

For a `Comment` object structure. Anything that has a `Comment` can give a reference to an array of these objects (as demonstrated above).

The reason this is convenient to render is it's a straightforward recursive structure. For example, I'll write a function to render this style comment as a text-based list:

    /*
     * Setup data, you know how to fetch this from the DB
     */
    var nestingMore   = {id:10,text:'MOAR NESTING',replies:[]};
    var replyToReply  = {id:9,text:'More nesting',replies:[nestingMore]};
    var nestedChatter = {id:11,text:'Multi nested',replies:[]};
    var firstReply    = {id:5,text:'First Reply',replies:[replyToReply,nestedChatter]};
    var secondReply   = {id:6,text:'Second reply',replies:[]};
    var comments = [
      {id:1,text:'First Comment',replies:[firstReply]},
      {id:2,text:'Second Comment',replies:[]},
      {id:3,text:'Third Comment',replies:[]},
      {id:4,text:'Fourth Comment',replies:[secondReply]},
      {id:7,text:'Fifth Comment',replies:[]},
      {id:8,text:'Sixth Comment',replies:[]},
    ];
    var post = {
      text: 'This is the blog content',
      replies: comments,
    };
    
    function renderPost(post) {
      var outString = '# ';
      outString += post.text + '\n';
    
      if (post.replies.length) {
          outString += renderReplies(post.replies);
      }
    
      return outString;
    }
    
    function renderReplies(replies, depth=0) {
      // Add four spaces the further deep we are - this might be adjusting class values
      // or adjusting the tags, this is a simple example
      var prefix    = '    '.repeat(depth) + '* ';
    
      // Using reduce to build a string from the array
      var outString = replies.reduce((outString,reply)=>{
    
        // For each reply, add the prefix and text
        var replyString = prefix + reply.text + '\n';
    
        // If the reply has replies
        if (reply.replies.length) {
          // Call this function again on that array and increase the depth
          replyString += renderReplies(reply.replies, depth+1);
        }
    
        // This expands outString, if this is confusing check out the reduce MDN page
        return outString + replyString;
    
      }, ''); // Start with empty string
    
      return outString;
    }
    
    console.log(renderPost(post));

The output, letting reddit parse it:

# This is the blog content
* First Comment
    * First Reply
        * More nesting
            * MOAR NESTING
        * Multi nested
* Second Comment
* Third Comment
* Fourth Comment
    * Second reply
* Fifth Comment
* Sixth Comment

Constructing the data from your DB format isn't too tricky either:

    var rawReplies = [
      {""id"":1,""comment"":""First Updated Comment"",""ReplyToCommentID"":null},
      {""id"":2,""comment"":""Second Comment"",""ReplyToCommentID"":null},
      {""id"":3,""comment"":""Third Comment"",""ReplyToCommentID"":null},
      {""id"":4,""comment"":""4th Comment"",""ReplyToCommentID"":null},
      {""id"":5,""comment"":""This is a reply to comment ID 1"",""ReplyToCommentID"":1},
      {""id"":6,""comment"":""Reply to Comment ID 4"",""ReplyToCommentID"":4},
      {""id"":7,""comment"":""Testing here"",""ReplyToCommentID"":null},
      {""id"":8,""comment"":""TriHard 7 comment id 7"",""ReplyToCommentID"":null},
    ];
    
    // Get top-level replies, make them object keyed by ID
    var parsedReplies = rawReplies.filter(reply => reply.ReplyToCommentID === null).reduce((parsed,reply)=>{
      reply.replies = [];
      parsed[reply.id] = reply;
      return parsed;
    },{});
    
    // Go through replies again, add sub-replies
    rawReplies.forEach(reply=>{
      if (reply.ReplyToCommentID === null) return;
      reply.replies = [];
      parsedReplies[reply.ReplyToCommentID].replies.push(reply);
    });
    
    function outputParsed(parsedReplies,depth=0) {
      for (var commentId in parsedReplies) {
        console.log(`${'  '.repeat(depth)}* (${parsedReplies[commentId].id}) ${parsedReplies[commentId].comment}`);
        if (parsedReplies[commentId].replies.length) {
          outputParsed(parsedReplies[commentId].replies, depth+1);
        }
      }
    }
    
    outputParsed(parsedReplies);

Again, output with reddit:

* (1) First Updated Comment
  * (5) This is a reply to comment ID 1
* (2) Second Comment
* (3) Third Comment
* (4) 4th Comment
  * (6) Reply to Comment ID 4
* (7) Testing here
* (8) TriHard 7 comment id 7

The code is all for example purposes and is not meant to be the ideal way to do any of this but I hope it's more useful than some wordy descriptions of data structures and theory. Hope that helps!",1522002178.0
danhab99,Nah that's employed money,1521994535.0
duybk,"ESlint, Prettier, husky + lint-staged",1521973104.0
thissaysotherwise,Moment for dealing with time. ,1521982988.0
cbf77,"  mocha for testing, bunyan for logging",1521985715.0
calligraphic-io,"Ramda, and a book / blog articles on functional programming in Javascript. It's not an all-or-nothing proposition; FP is a collection of techniques and tools that together make up the FP paradigm, but you can use those parts in isolation anytime.",1521971563.0
the__itis,"flat

if you’re an illogical JSON nester like I am, dear sweet baby ruth is this library not the biggest callback killing one of them all.",1521978890.0
apearsonio,Jest for testing,1521989619.0
StrikePrice,[Lodash](https://lodash.com/) ,1521969257.0
Doctor_Spicy,"If you aren't familiar with databases, i'd recommend taking a look at quick.db. ",1521971612.0
,Well what do you wanna do next?,1521973293.0
alfredmuffin,Chalk and Meow,1521995509.0
cgijoe_jhuckaby,"[async](https://www.npmjs.com/package/async) is my must-have, all-time favorite package.  I use it in every single Node app I have ever written.",1522037377.0
FlyingQuokka,"Packages I can't live without? ESLint is number 1. Then there's Lodash, Webpack, Babel, among others. I also would never write a server without using Helmet or compression.",1521978178.0
dimkinv,"I wouldn't think of it as a must have packages. But rather on a must have features. And libraries... Well there are hundreds of them and enough evaluations has been written on for you to choose when you know what features you want.

So with that in mind:
* logging. Your app should have solid logging sustem
* static code analysis, because you want your code to be clean
* tests, and by this I mean the whole bundle: unittests, contract tests, e2e tests, mutation testing, code coverage.
* full ci/cd, publishing your code to production in a click of a button while you sure there are no bugs. Theres nothing better than that.

",1521990513.0
Aesthetickz,"No package is really a must have, you pick what you need. But pretty common packages would be:

Testing: jest, sinon
Linting: eslint
Bundling: webpack
Transpiling: babel
Webserver: express
Array, object utils: lodash
Better promises: bluebird
Single page ui’s: react, vue
State management: redux

These are all widely used packages that have proven their use.",1522009095.0
kaptainkrayola,Async is pretty much the first thing I install with every project. ,1521998550.0
VIM_GT_EMACS,"usually: dotenv, eslint, gulp (learning webpack now though), pm2, bunyan for logging.

Docker has improved my setup time on new projects though so I'm trying to use docker more. ",1521996870.0
danielstaleiny,I would say in most of the project you need ioredis (Redis) for caching/ queue/ session / rate limiter  so I would say this.  ,1522058512.0
cirsca,"Utilities: `ramda` + `rxjs`

Testing: `jest`

Server: `express` or `koa` depending on taste

Building: `webpack` + `babel`",1522168818.0
Kroney502,"I’m still working in an Node 6 environment, so I use bluebird a lot as well",1521993819.0
cbf77,"mocha for testing, bunyan for logging
",1521985776.0
cbf77,"  mocha for testing, bunyan for logging",1521985727.0
cbf77,"  mocha for testing, bunyan for logging",1521985756.0
mattstoicbuddha,What is it? My Chinese is a bit rusty/non-existent. ,1521960311.0
luoyuxxxxxxxxxx,It's just like spring in java.,1522108704.0
TheIncorrigible1,Just.. why?,1521919355.0
mistralol,"
Wow you managed to turn what should be 5 lines of code its 150 or so of complete junk",1521924683.0
NetOperatorWibby,Link to actual repo: https://github.com/cmseaton42/task-easy,1521927981.0
bjpbakker,"GraphQL is a Graph Query Language. It can help you to minimize the number of API endpoints you need by encoding queries in the request rather than having a separate endpoint for every query.

It is absolutely not a substitute for a database.

See https://graphql.org for more details.",1521910343.0
JustinsWorking,"I think people are really missing the point of the question.

You want to know SQL, period. Even if people are trying (and failing) to replace it, its the workhorse of our industry. If you're working with old software, it _will_ use SQL, if you're writing for a big project, it will most likely use SQL.

Understanding how a relational database works is VERY important, even if you're using something different like graphQL or MongoDB. People will compare them to relational databasea, or attempt to emulate features of Relational Databases; if you don't understand relational databases you will not follow these conversations.

I would find a tutorial, play with the basics, then try to use it in a project. Take an app you've already built and add persistent storage using the DB is probably the best way to learn in reality.

I wouldn't worry too much about knowing how to normalize a database, or worrying about the speed of queries; those are the kind of things you will learn on the job as somebody more familiar can point out these problems or ideas easily. Whats important is that you understand Relational Data and why it is different than Objects or the file structures you're probably already used to.",1521913745.0
theoldestmonk,Graphql is a query language that you can use instead of REST apis. The best place to start with is the official docs. Note that the docs present a spec of what an implementation should be like. Then look into apollo graphql that provides client and server side library for the same. ,1521911238.0
ezql,"I would strongly recommend doing this course: https://lagunita.stanford.edu/courses/Engineering/db/2014_1/about

Will teach you all of the basics and more for databases.",1521949591.0
,[deleted],1521910517.0
MrStLouis,"You mean like query strings in a get request? All you need is nested routing. Get /posts?name=INSERT_NAME. You an then set up a controller to perform different actions based on the variables that come in. I actually think that client side routing is more complicated because you have to refetch data based on your URL not user input. I don't have a tutorial off hand but check out express router, build a catalog of routes that then get handed off to specific controllers ",1521907209.0
j3y3,"If you're not up for going down the graphql path, you could take a look at the [objection.js](https://github.com/Vincit/objection.js) ORM along with the [objection-filter](https://github.com/tandg-digital/objection-filter) filtering package. Disclaimer, I'm the author of the filtering package. It's pretty much what you've described, and both packages were designed with some specific postgres features.",1521919703.0
cpietrzykowski,"Unless I misunderstand your request, this sounds like a fit for graphql. You could most certainly do this all by hand, but why? If this is for learning, start smaller. There's a million ""REST"" type guides out there to find via your typical truth source.",1521884697.0
MrStLouis,Wow that actually looks really clean. I was afraid to click the link ,1521906313.0
,2015 article,1521910446.0
filippomangione,Backbone still awesome. ,1521920254.0
monsto,"At first I was like ""ooh. neat.""

Then I saw that apparently the author believes there's a giant hole in the middle of the country bounded by Chicago, San Antonio, Denver and Charlotte.

Also . . . Chicago isn't in the northeast, and Denver isn't in the southwest.

If I cared about twitter, I might be motivated to tell them, since that seems to be the only way to talk to a human.",1521912084.0
,[deleted],1521845854.0
BimboDickins,Do people discuss the latest plugins and whatnot on events like these?,1521898174.0
willshowell,"I'm not familiar with EJS, but would it help to do a little preprocessing on your data?

Instead of a flat array of comments, you could rearrange it like this before populating your template:

    {
      comments: [
        {
          text: 'a',
          user: 'allie',
          comments: [
            {
              text: 'b',
              user: 'bill',
              comments: []
            }
          ]
        },
        {
          text: 'c',
          user: 'charles',
          comments: []
        }
      ]
    }",1521827514.0
Cyberuben,"The `pool.query()` call is asynchronous. It might happen that the query hasn't executed yet, but you call `conn.release()` immediately after. I also don't think you should use `pool.query()` while you get a `con` in the callback (should be `con.query()` I guess?).

If you want your status to update, you should use an AJAX request to make the call, then do something when it finishes.",1521828088.0
carb0n13,"Or you can just switch to Koa, which was made to use async functions as middleware, instead of converting connect/Express middleware into async functions.  Koa was made by the Express team as the next generation.",1521830168.0
djslakor,"Most express users just use the express-async-errors package, which monkey patches the route handler and does this technique for you.

Look at the npmjs stats.  It's pretty heavily used (and pretty simple).  Additionally, it covers more cases than a manual wrap function (for example, supporting 4 parameter error handlers).

Or you could avoid the madness and just use Koa v2. :) ",1521823268.0
,[deleted],1521815728.0
franciscopresencia,"I started exactly like that, and ended up adding the middleware that I always add manually (body-parser, sessions, etc) and publishing it as the package `server`. Would love to hear your opinion, as you can see from the dependencies it's based on express as well.",1521951346.0
SippieCup,">In this course I explain Nodjs detail boring also I am programming a social networking site full using this technique so there will be many mistakes in the course so I apologize now.

Quality.",1521811240.0
inabahare,"> 1- Install module MD5 and Hash The Password and change in file index.js

#NO",1521807968.0
,I was actually excited about this until I read the description.,1521990072.0
StupidRandomGuy,"I've seen this tutorial everywhere, why people keep making this ? Are they running out of creativity ?

You know what are we lack of ? Building RESTful API with Event driven design pattern and inversion of control !!",1521829622.0
etuncoz,i love this dood,1521826367.0
mansfall,"Any particular reason why this is better over another library, like exceljs?  There seems to be far fewer features in this...",1521790840.0
SuspensefulSausage,"We use ""concurrently"" to run commands at once, docker-compose to boot multiple applications, databases etc. and Cypress as an end-to-end test runner. 

E.g. `""test"": ""concurrently 'docker-compose up' 'cypress start'""`

(On my phone, sorry for lack of links... Google is your friend ;) )",1521792462.0
SomeRandomBuddy,"Not gonna go too deep on this because your requirements are particular, but if you’re open to some minor modifications then I would suggest docker compose. You can create a compose file which stands up containerized instances of your app, any related services, and runs the tests you seek, before returning and tearing everything down. Bit of work involved but I’m doing a variation of this with a handful of personal projects and it works great",1521765610.0
the__itis,"thank you. i’m 6 months in to nodejs (my first ever language ....after ditching python 2 months in) and i’ve been looking to fill in my knowledge gaps. 
",1521810187.0
tweettranscriberbot,"The linked tweet was tweeted by [@StoreCourses](https://twitter.com/StoreCourses) on Mar 22, 2018 20:49:53 UTC

-------------------------------------------------

Great course, a lot insight and explanations of what node is and how it works really helps with understanding.
Really great exposure to many difference facets of node.
 [https://www.udemy.com/the-complete-nodejs-developer-course-2/?siteID=uNC3S7FE9O0-qKeUDLUMgbrVYaeokq8JOg&LSNPUBID=uNC3S7FE9O0](https://www.udemy.com/the-complete-nodejs-developer-course-2/?siteID=uNC3S7FE9O0-qKeUDLUMgbrVYaeokq8JOg&LSNPUBID=uNC3S7FE9O0)

-------------------------------------------------

^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1521751917.0
raistlinthewiz,"nope, that will be based on your optimization of database queries, server configuration and so.",1521751717.0
flipperdeflip,Load testing and measuring on the actual hardware.,1521795286.0
Fullstack_Questions,"You can not serve your react app via Node express server on heroku following that awful tutorial. It's only for local dev. 

You may follow the related chapter (serving on heroku) in Stephen Grider or Maximilian Schwarzmuller's Udemy React/Node tutorials. 
",1521750830.0
NeanderthalLinguist,"This may not be what you're looking for, but if you just want to focus on the front-end without messing around with Node, there's this: https://rem-rest-api.herokuapp.com/",1522256827.0
Jarl_Bridgewater,Heroku would be so great if it didn't put my app to sleep after like 20 minutes of non use. Any time someone visits it takes like 10-15 seconds to start up. Who wants to wait that long ya know?,1521777665.0
marinespl,The article makes it look like it was something complicated. In reality you don't have to do anything. Just push your code to Heroku.,1521811419.0
Jake_Jeremy,Any particular reason to use this over `util.promisify`?,1521735189.0
nwsm,"On first run I'm getting hapi errors (unhandled promise rejections, ""attributes"" is required)

I haven't used hapi so I'm not sure what's going on, but I've followed the guide exactly.

edit: I cloned the final version and it run without problem. Not sure what was going on.",1521727527.0
pikapikadudulu,"same problems here. Using Error.stack in a hook's init function is not providing enough information to differentiate or trace the exact origin of the asynchronous function. And since you are building a library, letting user to wrap all their own async functions can be a way, but sounds tedious. Hope someone can help with it~ ",1521680323.0
aturberv,"The only way I've been able to accomplish this is by hard coding it, similar to pikapikadudulu, looking at the error stack trace and checking to see if the origin of the event comes from one of my files... But there must be a better approach. Good luck friend =) ",1521731204.0
RangerCoder,"Never work for free, that node skills you got allow you to make money while having fun working on node projects :) check all the job listings local and remote and try contact the ones that posted the job listings.",1521677571.0
marvinfuture,Try r/INAT ,1521682067.0
cryptichash,Feel free to PM if you’d like to collaborate with a fellow dev.,1521677844.0
-soma-,"Passport is an authentication middleware - a tool for *organizing* authentication strategies in your application. This is not the part of your application leaving your app vulnerable to timing attacks. 

If your authentication strategy is leaking timing information, it's the strategy's fault, not passport's. 

If you're using a strategy from an npm package, you might consider adding some timing code to the route / controller that exposes passport. 
If you're building a custom strategy, you might consider using a constant time comparison hashing library, or wrapping your current passport checking in some time attack safe code. ",1521675744.0
tmlbl,Just write one my man,1521686366.0
TheIncorrigible1,I don't see you doing any validation on `query` in `app.js`,1521663944.0
unintellisense,"I think line 12 is your problem, you are trying to return your error  from the request function. In a express route handler, you need to always handle the response (res) or invoke next if you intend to call the next handler in the chain (if there is one).",1521676381.0
khanhnathan,"You can use express-generator to create a template for a Node.js app, from which you can get a better idea about how to structure projects. Next, I suggest learning Express middleware as that topic will help you organize your functions for handling input validation, requests, and errors. I suggest looking into the Joi library to get started with input validation. I think this article is a good place to start for a beginner to learn about Express middleware: https://www.safaribooksonline.com/blog/2014/03/10/express-js-middleware-demystified/",1521710193.0
ImaginaryAssumption3,"lgtm.com will review any open source project for free, automagically! Your code has been analysed, as has the code in >55k other open source projects. 

45 alerts on your code: https://lgtm.com/projects/g/alexanderchoi/WhenMoon/alerts

You can enable automatic code review in GitHub pull requests here: https://lgtm.com/projects/g/alexanderchoi/WhenMoon/ci/",1521723526.0
ecares,"Was 149,99 € but now is 13,99 €. What a great deal!


seriously, people still fall for this?

Also
PLEASE STOP",1521670608.0
TheIncorrigible1,"That's called basic authentication.  [Here's a useful wiki read on it](https://en.wikipedia.org/wiki/Basic_access_authentication)

It's a header that contains plaintext username and password encoded with base64.
***
Pseudocode:

    headers['Authorization'] = `Basic ${""User:Password"".ToBase64()}`",1521657630.0
flatlandr,"As far as the building the docker image goes, your .gitlab-ci.yml file should look something like this:


    image: docker:git
    services:
      - docker:dind

    stages:
      - test
      - build
      - release

    variables:
      CONTAINER_TEST_IMAGE: path.to.gitlab.com:5005/namespace/project-name:$CI_BUILD_REF_NAME
      CONTAINER_RELEASE_IMAGE: path.to.gitlab.com:5005/namespace/project-name:latest

    test:
      stage: test
      script:
        - yarn install
        - yarn run test

    build:
      stage: build
      before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN path.to.gitlab.com:5005
      script:
        - docker build --pull -t $CONTAINER_TEST_IMAGE .
        - docker push $CONTAINER_TEST_IMAGE

    release-image:
      stage: release
      before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN path.to.gitlab.com:5005
      script:
        - docker pull $CONTAINER_TEST_IMAGE
        - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
        - docker push $CONTAINER_RELEASE_IMAGE
      only:
        - master



As for handling the actual deploy on production, I'm not sure as I haven't used docker in prod yet. I am curious to find out how you eventually get it handled though",1521662330.0
SQLTable,"Basically this is a medium post that copy-pasted the description of the udemy class but with a bit.ly link to it with a referral code.

Why is this not spam?",1521655079.0
dvidsilva,Nine nine! ,1521679571.0
Buckwheat469,If only I could get away from that one package that doesn't compile with node 9 and requires that we use node 8 instead. I need to look into that again...,1521679987.0
doctorlongghost,I'm sure many hours of hard work went into this and I thank them for their dedication while I was sitting on my ass watching Netflix BUT... difficult to imagine a more underwhelming release. ,1521670547.0
bevacqua,"Does it work if you do `this.populate(""hearts"", next);` instead?",1521655044.0
StephanJack,"@OP I think we are missing some extra information.
What is it exactly that you're trying to do?
You have a User Scheme which has a property of hearts? Why is the type of the property in an array?
Try    hearts: { type: mongoose.Schema.ObjectId }

Next; do you have a schema/collection of hearts which are populated by the user._id property? Shouldn't the query be to find all documents in a collection in order to populate another schema, preferably returning user._id etc. ",1521707208.0
djslakor,Any redditors using Strapi in production? ,1521637526.0
goriunovd," i think you forgot to send response, try sending response like this:

app.get('/some-route',  (req,  res) => res.send('hello)) 

Just to note if it is post you wont be able to open it in browser. You will need to make post req to the server",1521632657.0
Fullstack_Questions,"app.use(express.static('dist'));  
  app.get('*', (request, response) => {  
    response.sendFile(path.join(__dirname, 'dist', 'index.html'));  
  });  


You can't serve a static single page application with dynamic routes without an express server set up this way. ",1521634196.0
Gibbon_Ka,At first glance this looks like a reinvention of [json-schema](http://json-schema.org/) to me. What's the difference?,1521630366.0
Bluecewe,Genuine question: is this library any more capable than [Joi](https://github.com/hapijs/joi) in any areas?,1521636518.0
texasbruce,I would recommend asking on Stackoverflow. Reddit is more like a discussion board and you will unlikely get an answer as good as on SO,1521610934.0
jineshshah36,"There are two things that you need to do. First to redirect, all you have to do is

    window.location.href = URL

but this will still mean that anyone can access that url. To prevent that, you will need to use some sort of authentication method. This can be setting a cookie ok successful signup that contains a user session and everytime a request is made to that page, you will need to check for that cookie. Or you could store a client side token in localstorage and every request is sent with that token. Read about sessions and jwts. That will be a good starting point.",1521691315.0
Fullstack_Questions,"With React Router - VUE Router, I could help you about sending down Params on redirect... but have you tried setting that as a global var? 

const routeData ={
          user: {
                   tableData: [],
                   lastUpdated: date
                   },
    } 

const updateRouteData = ({
        routeName,
        currentDate : new Date(),
        newData,
          }) => {
            // check routeData[routeName] , is exists check date and compare with the current date, to decide if it should be updated 
            // if you decide to update, compare the data and update, if not, keep the old data
           return true or false 
       }


Then redirect. The new page should access routeData in order to populate fields.

Works like a cache . ",1521630696.0
MintyPhoenix,"Can't speak from experience, but, looking at the sqlite3 package's installation docs, it seems you might be best off using termux to install `libsqlite` and `libsqlite-dev` and then add a flag to the npm install to specify that external version:

https://www.npmjs.com/package/sqlite3#source-install

So, questions are:

* Have you tried that approach?
* What is the actual failure output (post it as a gist or pastebin or something if more than a dozen lines or so)?",1521646091.0
Shardzmi,"Just a quick question regarding your `/home` route:

Is there any reason to not deserialize the user in passport like 
`done(null,user.rows[0])` instead of `done(null,user)`?  

My only guess is that the rows might be undefined if the user doesn't exist - even if you use requireLogin as Middleware, passport deserialization takes place before that which would lead to an error.",1521718739.0
MUDrummer,"The correct answer is to learn to use nginx or something similar (Apache, AWS Api gateway, lots of choices here) to serve multiple context roots on the same port. This would allow you to point localhost/ to your UI running on 8080 and localhost/api to your service running on 8081. 

The quick answer is to just return the absolute path of the image from your profile and use that. ",1521605628.0
Hansolo510,"NGINX for serving the front-end code. PM2 for the backend server with a reverse proxy through NGINX.

https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04

",1521600361.0
Probotect0r,"Simple and fastest way (not the best, but will get you going):

1. Get your project(s) onto the server. If you are using git, just clone your project there.
2. Install node and pm2 on the server.
3. Use pm2 to run your express application. Make sure the port your application uses is open on the server. You can configure this through whatever service you got your server from.
4. Build up your react application into html/js/css files. There are several ways to serve up your react application. Option 1 is to simply put the built html/js/css into your express applications's static folder and access them directly. This method will be the easiest and quickest. Option 2 is to use something like NGINX to serve your html/js/css files. This is the recommended way but will take longer if you haven't used NGINX before.

I haven't used TravisCI so can't speak on that part.",1521602891.0
mattas,"By ""normal server"" do you mean a physical box? If so, sure PM2 would cover you for what you want. As another user mentioned Docker is another alternative, rather than managing processes on one system docker allows you to spin up complete virtual environments for each process.

If by ""normal server"" you mean moving away from heroku to a lower level, cheaper alternative, I would suggest looking at AWS and the services they offer such as ECS and cloudformation.",1521590878.0
TheWebUiGuy,"Docker is a good way to go about it, I find it had a bit of a learning curve but speeds deployments up so much! ",1521587139.0
iluretar,"If you don't need the CI part you could use shipit to handle the deployments, and then nginx and pm2 on the server to manage front and backend.",1521661137.0
BrightonTechie,Has anyone used Strongloop PM before? I saw it on another thread and it seems to be better than PM2 with the Strongloop tools to build and deploy ,1521794370.0
AdversarialSyndrome,"check out next.js, it is exactly what you are looking for. i have recently developed similar system. however i used docker, it is not necessary since you can run it with single npm start. and if you use node app only for front end service, you may not need it. just create services to database and call them inside in react, it will tremendeously speed up your app",1521590639.0
boon4376,I would recommend firebase. You can do SSR with firebase functions too. ,1521593783.0
BenjiSponge,This looks sweet! It would also be cool to have an option to see what ports each process is listening on.,1521571049.0
simonepri,"If you have any of the non-tested platform.
Can you try to run:  
npx pidtree  
And let me know if everything works as expected?  

Many thanks.",1521564712.0
WNIG0sQpBlkHQa9fbjDp,"Having cars respond to JSON calls will go so so wrong. Can we mark certain devices, machines, and infrastructure as life-critical and barr them from becoming part of the IOT?

Edit: the technology is super interesting, and as a node fanboy it all sounds really cool. But just because we can doesn't mean we should.",1521590353.0
spacem3n,"I wouldn't trust a car programmed in JavaScript. 

t. someone who uses javascript every day",1521612226.0
raistlinthewiz,serve the results from your api endpoints and query them in your frontend?,1521548994.0
omar-hydrah,"Have you tried Ajax? ""Uploading without reloading the page"", is the other name of ""Ajax"".

It's written in your front-end files.

https://www.youtube.com/playlist?list=PL4cUxeGkcC9jAhrjtZ9U93UMIhnCc44MH
",1521553907.0
TheWebUiGuy,"When you compile they'll just be turned into strings, I know using them with Typescript if I type something like `oh no its a template string` I end up with 'oh no its a template string', so I don't really see any major problem with using them. It's when you start adding variables into the template string that the compiler looks weird e.g. 
    `this is my value ${value}`      
will compile to look like 
    var val = 'this is my value ' +         value     + '';      

which is slightly weird, I do not really get the need for placing the extra empty string, maybe a typescript thing? ",1521535053.0
AbrahamSerafino,"Template literals do not work in import statements. If you use them, you will get ""Parsing error: Unexpected token `"". Other than that, I can't think of any downsides.",1521555304.0
flipperdeflip,"- Very slightly less readable as it suggests some templating is going on, so the reader looks for replacements and finds none.
- Arguably more difficult/unusual to type.",1521533816.0
DAM9779,Did you ever figure this out? Having a similar issue.,1523875422.0
alppawack,just delete some photos ,1521502506.0
zoon_politikon,have you guys tried [pnpm](https://github.com/pnpm/pnpm),1521514828.0
SkaterDad,"On the plus side, that's 204 GB of code you don't have to write anymore.",1521550338.0
BenjiSponge,"Me too, thanks.",1521497928.0
kevleyski,250GB was never enough for anyone. I hate having to have an external SSD :-(,1521536233.0
lepuma,"lol wut, do you have like every npm module?",1521505177.0
TheV295,"No shit, trying to learn React and Electron at the same time, one of the “boiler plate” repos downloads 404 MB of dependencies",1521546610.0
ddwrt1234,"Dood 10gb of photos, you can get rid of those and you'll be set",1521521762.0
konaraddio,You should post this to r/ProgrammerHumor too,1521555652.0
vidro3,"npm prune. 

if many of those modules are for projects you aren't actively working on 
>rm -rf `find -type d -name a`

via https://stackoverflow.com/questions/13032701/how-to-remove-folders-with-a-certain-name#13032747",1521556812.0
haCkFaSe,Is this hyperbole?,1521507631.0
ABrownApple,Get a 1tb storage only for node modules,1521553929.0
Oleg18,You have to buy a new one in this case... ,1521554231.0
B-R0ck,get an external drive for cheap for those photos ,1521600086.0
nmrshll,Where is the docker images section ???,1528018706.0
konrain,Store everything in github and bring in only what your working on or pay 2.99 for iclouds 200gb,1521506474.0
MWrathDev,"rofl who actually stores all their data on an SSD? That's dumb... get a NAS

Also, if you have a server available it's worth running your own npm repo",1521498666.0
ReefyMat,"> So I would like to add secured audio files to a server so people can listen to it but so they can't easily steal my stuff.

That is not possible. The easiest way to steal it is to just record it.",1521486064.0
wishinghand,"Goddamn this post is all over the place. I get that you’re 14 but learn how to present your ideas in a more focused way.

I know you put quotes around mastering PHP but since you’re not even close why switch? Is PHP working for you? Then stick with that. Get some structure from Laravel or if that’s too much for you learn to write some APIs with Laravel’s little brother, Lumen. 

If you want to get into Node too, learn javascript first, since you didn’t mention knowing that. If you want an MVC style framework get into Feathers. ",1521489253.0
tkowalski,"Your young, don't think you have to learn the latest language or technology to do what u want. Take time to learn the principles, algorithms, data and how it's structured, then you can pick up on new languages easily down the line.

If you want to build something web related then go and write a simple web server in Java or C# then build on it as a web app server, this will teach you a lot about how web technologies work.",1521491494.0
kifkev91,"I'm coming from a rails background, so i can tell you that rails is a framework you can get very fast very impressive results with. So while you are already into php, Laravel is very similar to rails and would be very handy for. But i switched to node, because these very huge frameworks are quite restrictive in their way things have to be done.
So, if you just want fast results for this one idea you have, i would recommend a php framework like laravel. If you are learning web development for career purposes i would recommend a node stack because as a modern web developer you have to learn javascript anyway and being a master with it is pretty much the biggest asset you can have today.
If you want to dive into that, there are a few tutorials on youtube where you can learn some basics very fast and you can decide afterwards if it fits your needs. here a quick recommendation: https://www.youtube.com/watch?v=w-7RQ46RgxU&list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp",1521493526.0
dandecode,Meteor/React/Mongo,1521501877.0
redditpentester,"Why not check this in the middleware for adding the user to the database? 

    if (password.length < x) {} 
    
Also, for future reference... this is probably the most useless way to ask for help. In fact, you didn't even ask for help. You just kind of described a problem and provided literally no context. 

I'll show you what I mean, imagine a post where I'm asking for help with a car:

Title: ""Having trouble with swapping tires on my Honda.""

Body: ""Like the title says, I believe the tire isn't fitting on my car.""

How the heck is anyone supposed to help you? You provided 0 information. 

it also makes people think you aren't trying very hard to fix the problem because you didn't try very hard to describe it to others. ",1521486180.0
JoeJoeJoeJoeJoeJoe,We'd be better equipped to help you if you posted your relevant code!,1521486221.0
ribo,"Awesome, big fan of a lot of your projects.

Also, found the linked conversation about non-async crypto operations to be even more interesting.",1521485333.0
flipperdeflip,"You need to use write()+end() instead of send() AND chain the promises properly. 

The way you have it right now runs the singleDomain() and checkDB() stuff simultaneously AND they both use send(), so the first one to finish (s)end()'s the response and the other will throw that error.

You could chain them or run both concurrently with Promise.all() and then combine the responses into a single JSON value.

Also look at what you made, `let promise;` variable is not needed. And maybe look into async/await instead of then() handlers.",1521537745.0
sneffer,"This is a loaded question which, as a software engineer, I feel inclined to answer with more questions. I'd say there is no perfect ""best practice"" answer for all of the possible problems that can exist within the domain of notifications.

Any answer will largely depend on your requirements, projected future requirements, and your budget.

u/benjisponge definitely has some good tips that move you towards a more normalized data model (useful for the sort of generic requirements you've suggested you'll need for messaging later).

Some other requirements to consider are:

* Idempotency (how important is it that a notification is only seen once?)

* Reliability (can a notification delivery fail? What are the implications?)

* Availability (could writing to a user object for every notification possibly reduce availability of that object for other actions?)

There are also questions about domain complexity and separation of concerns which can come into play, but you might not need to worry about that yet.

A couple cool thought exercise which got me started thinking about the complexity of notifications are:

* Twitter: Justin Beiber (with millions of followers) tweets a message. Millions need to be notified. How will your solution perform?

* Imgur: Users can be logged in on multiple clients at once. They probably do not want to see a notification on their phone then on each browser tab they have open. What would it take for the user to only see each notification once?


It sounds like you have a handle on your current scope and won't have extreme complexity. It would just be wrong of us to leave tips for your specific context without mentioning that they are not necessarily ""best practice"" for the next person searching.",1521476174.0
BenjiSponge,"Do not consider me an expert in any sort of way. Just thinking with you here.

You're going to want to date each of the ""heart"" events. So it should probably look more like

    {
      hearts: [{
        userId: '...',
        date: Date('...'),
        // you might eventually add information here, like ""What picture was he looking at when he decided to heart?""
      }, {
        // similar ...
      }]
    }

Now, it depends on how your app works, but I'm going to assume the only way the user can see hearts (or the only time they should be distinguished as ""old"" and ""new"") is through notifications.

I would keep notifications in a separate array. I would say, every time someone gets a heart, you *also* add a notification to their notification array, including the date. Then you can have a field on the user called ""lastTimeNotificationsChecked"" or something, and filter notifications by ""newer than that time"". You can do this on the back end, but there's not that much of a point. If I were you, I'd just always serve the N most recent notifications a user has gotten, and on the front end determine which of them to highlight as ""unread"".

Hope that makes sense!",1521471516.0
boon4376,"Assuming you have a log, that is logging all user activities somewhere, you could pull an object or array of all ""hearts"" the user has received since their last activity, and just return the ""length"" of the array as a notification icon. Clicking the icon would show the ~10 most recent hearts.

Get all hearts where user_id = {currentuser} && heart.timestamp > dateOfLastLogin LIMIT 10

... And that's not real code BTW but hope it gets my point across. ",1521484444.0
billy_tables,"I would suggest one collection, of heart objects

    {from: ""joe"",
     to: ""Sally"",
     seen: false,
     sent: Date()}

Common queries might be

    db.hearts.count({to: ""sally"", seen: false})

    db.hearts.find({to: ""sally""}).sort({sent: -1})

    db.hearts.update({_id: ObjectID(), {$set: {seen: true}})

All of which are easily [indexable](https://docs.mongodb.com/manual/indexes/) which is important!",1521480208.0
papertowelroll17,Use Array.prototype.reduce() to create a promise chain and run these questions sequentially instead of in parallel like Promise.all() does.,1521461673.0
legitimate_johnson,"Another approach would be using await/async if you're on a Node version that supports those.

    (async () => {
        const username = await ask('Username:');
        const email = await ask('Email:');
        // and so on
    })();",1521468216.0
bjpbakker,"You execute all ask functions in the same tick. This most likely causes problems, either because of a lock or because of the lack of it :)

You want to ask these inputs sequentially, so you have to program them sequentially.",1521461105.0
mtranier,"Promise.all will execute all the ask functions in parallel and wait for all of them to resolve. BUT in your case, since you are using single std input you have to execute these functions sequentially.

    function ask(question) {
       return new Promise((resolve, reject) => {    
           let rl = readline.createInterface({
               input: process.stdin,
               output: process.stdout
             });   
           rl.question(question, (answer) => {
           
                rl.close();
                if (answer.length === 0)
                reject()
                resolve(answer)
                    
            
           })
       })
    }


    ask('Username:').then((data)=>{
        ask('Email:').then((data)=>{
         ask('Client Key:').then((data)=>{
             console.log(data);
        })
       
       })
    });",1521470160.0
megaboy101,"I'm actually working on a similar project at the moment remotely for a startup. It's probably really gonna depend on the complexity of what you're creating and how many other people you're working alongside.
For me at least this is the first time I really bug into GraphQL and I'm now at a point where I'll never go back so simple REST apis again. It just works, and I cannot even explain how much time it has saved me trying and failing to document and update both the front-end and back and and database every time I need to rewrite some query or data structure somewhere in the pipeline.
Also, the S in IoT stands for security. Except there's not an S in IoT, because literally everyone forgets it. I personally use Auth0 but Stormpath, and all the cloud platforms like AWS/Azure offer some form of affordable IoT security measuers, invest in it soon and you won't have to worry about it later.
Other than that it's pretty much job specific. Remember to go for a delightful experience first, feature hungry second. Best of luck to ya.
",1521462906.0
kryptkpr,"1) Use an off the shelf IoT message queue and device management solution, it will give a nice pipe between your devices and your backend application as well as a debug UI that helps tremendously espefially at the start.  Amazon and IBM both have good offerings with a free tier, all based around MQ, with node clients available.

2) What kind of data are your devices producing? How frequently?  What kind of retention do you need (forever? A week?) What kind of queries will you run? This will all influence how you store the data.

3) CPU intensive processing tasks inside a node application are a bad plan, aim to get data into DB quickly and queue up an ""offline"" process to read and process it. Message back the device feedback whenever it's available.  ",1522532956.0
Thin_K,"This goes for most things. Profile first, apply flags, profile afterwards. Different apps have different requirements.

I'm curious about how actively most Node devs use the various optimization flags, I don't think I've ever tinkered with those at all.",1521460112.0
coracarm,Any advantage to this versus Helm?,1521595077.0
50653,"It really varies per project, depending on the build system. From NPM's point of view, you just need to have that file at that filename at the time the package is published. NPM doesn't care if that file was written by hand or generated by the build.

For that material-ui project I saw they are doing something tricky. So the first think I looked at was the `scripts{` section in package.json. They have a bunch of `build:` scripts. The last step stood out.. `build:copy-files`. That led to [this script](https://github.com/mui-org/material-ui/blob/v1-beta/scripts/copy-files.js). So for this project they wrote their own custom node script, it copies the generated JS files from `build/*` into the right filename for importing (like `styles/MuiThemeProvider.js`), and that step happens at publish time.",1521430335.0
Buckwheat469,"They put the files into folders and name the file to import index.js.

`node_modules/material-ui/styles/MuiThemeProvider/index.js`

Here's an example of the index.js importing several different files or variables and exporting them. It can be used to combine several files together to ease imports. Please excuse mistakes as I'm on a phone.

**index.js**

    import { MuiThemeProvider, OtherClass } from 'src/multi-theme-provider';
    export OtherClass;
    export default  MuiThemeProvider;",1521430720.0
WakeskaterX,"I highly recommend upgrading to Node8 and using async await.  It has simplified massive sections of our code base and makes it so much easier to read.

Promises are tricky, but once you get them, async/await #1 makes sense, and #2 becomes extremely powerful and flexible.

I guess a lot of bluebirds features are standard to Promises now but we still use that too:  Promise.all, Promise.delay, etc.

For example with async await your code reads:
    
    let myArray = [""beans"", ""soup"", ""peanuts"", ""artichokes""];
    
    async function doIt(list) {
       for (let i of list) {
        console.log(`Item: ${i}`);
        await Promise.delay(2000);
      }
    }

    doIt(myArray).then(() => console.log('ALL DONE'));

If you notice above - an async function returns a promise - so you can call .then on it just like a promise, and inside your async function you can await promises or other async functions to either get the resolved value:

    let value = await Promise.resolve(5);

or it will throw a rejected value:

    try {
      let result = await Promise.reject(new Error('bad!'));
    } catch (e) {
      console.log('catchin this error here!');
    }

Anyway - it's good to ""get"" promises before moving to async await anyway so you know how to use it effectively.  It took me a while to ""get"" promises too, they're a little tricky until you use them a lot!

*Edit:  Btw, if you have the same reaction I did - the first code block looks like magic.  And it is - that Promise.delay is non-blocking, it's really, really nifty.*

",1521424766.0
flaccidopinion,"If you're happy with some feedback ... looks like `Promise.all` would help simplify your reduce.

    const myArray = ['beans', 'soup', 'peanuts', 'artichokes'];
    const promises = myArray.map(itemsPromise);
    // each array item will be first arg of called map function.
    // result will be an array of promises.
    Promise.all(promises).then(results => {
        console.log('All Done');
    });

`Promise.all` will also accept non-promise items in the array, which will be treated like already resolved promises, so can simplify mixing the two, as happens sometimes.",1521458040.0
TheIncorrigible1,What's the purpose of your code besides logging the entire array?,1521417789.0
GreenFox1505,> This is stupid. Let's give it traffic.,1521413067.0
SomeRandomBuddy,Here’s a downvote ,1521416469.0
coracarm,Love the way the speech synthesizer says nodejs,1521595591.0
theweedlover420,"Exept node does not have a bad rep.

Reminds me of this mongo vid https://www.youtube.com/watch?v=b2F-DItXtZs",1521412057.0
joanmave,"This “parallelism” works if the IO source can process requests in parallel. A web service, a database query, or native API calls. Pure JavaScript/Node code runs in a single thread and this kind of maneuver on JavaScript implemented APIs just add unnecessary overhead. ",1521413097.0
rafaelkallis,concurrent !== parallel,1521412247.0
jawaiah,Is this a serious post or...?,1521420716.0
umib0zu,"I always feel 90% of the programmers here generate copy pasta and have no software engineering experience.

This post only solidifies my hypothesis.",1521424132.0
TA1000,"couple things come to mind... what’s the value of ipAddress when it’s not assigned manually? are you behind a proxy? if so you should look @ the x-forwarded-for header. when you’re testing, are you using http;//localhost or http://<hostname>?  last thing ... if you’re behind a home router and testing within that network you most likely have a 192.168.*.* or some other private address which will not resolve to a location. ",1521403350.0
ccswift,"Be aware, this code is veeery susceptible to errors",1521412387.0
mansfall,"You can learn to use node without a db.  If you need to persist data, then you introduce a data base.  I don't know what you're building, so I can't recommend one.  There are nosql dbs and relational dbs.  You choose your path based on varying factors, one of which how relational your data is.

Learn how to work with node first, then worry about a db.  ",1521391033.0
dinkydarko,"I'm working through this [Mozilla tutorial](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website), which builds a local library website. It uses mongodb. 

I don't know if it's considered a good intro by more experienced node devs.",1521393533.0
martiandreamer,"I’d suggest looking into something that interfaces with SQLite (Sequelize is good for this), and read up on ERD and data normalization. ",1521404876.0
Louistiti,"As Google Drive has limitations for sharing, I re-uploaded the video on YouTube: https://www.youtube.com/watch?v=1B7JMBPZ0qI. You can also find the roadmap of Léon here: https://trello.com/b/7bdwhnLr/léon-your-daily-personal-assistant-roadmap.",1521391710.0
boon4376,"Just a motivation question... Why build the personal assistant instead of extending functionality of existing personal assistants with their sdk's? (Alexa, Google Assistant)",1521418305.0
nappa300,Githib link?,1521461037.0
FriesWithThat,"There's a few different ways you can combine a front and backend for a Node with React app. You can build them separately and access the backend like any API with the frontend, or you can combine them in one package as Stephen has done here. This is a great way to work with React to be able to combine all your environments: dev, production, testing in one place, and run them and all your servers with one command. Looking at the package.json this is a sweet set-up that will serve you well. What's confusing for people is that with a package called concurrently and a proxy setup for the backend you don't need to individually run both servers, as that package will run your server, and start up your React server for the frontend while in development with one command. 

Note the two package.json files, one in the root, and one in the client. Make sure you are in the root directory when you run the start script. **Don't change anything in either package.json.**  Rereading your posting it sounds like you may have, I'm mostly an npm guy these days but I think you need to use npm scripts in the package.json as a build tool in this case. For the CLI, either npm run dev or yarn run dev will work, or at least they did for me and I just cloned the project onto my machine. But the command needs to be run from the server directory and not from the client. Hope that helps. ",1521373642.0
MCShoveled,"I’ve not had much luck with yarn, I know those that swear by it, but the number of times I’ve found it fails compared to npm makes it difficult to recommend. In all fairness to yarn, it’s usually playing catch-up as npm defines the “standard” of sorts. 

In short, why would you not just stick with npm?",1521381798.0
Fullstack_Questions,"React is backend agnostic. It doesn't care or know about your backend. 

Nodesj would be easy to start because it's the same language and you would be reusing common modules, and code. 

Once you master making backend and maintaining in Nodejs (takes a while..) you can learn others. Once you know the gist of it, it doesnt take long to do the same thing in other language and frameworks. Your knowledge transfers over. ",1521364169.0
awebofbrown,"Two big reasons that I think contribute to the react-node pairing:

1. Server-side rendering React components requires Node (I think).

2. A lot of build tools surrounding React use Node, so you already have a large cross-pollination between Node / React skills. 

Definitely can use other backends, and just have a dedicated Node server for rendering if you need SSR. 

Obviously Node / React both being JS contributes a lot.  ",1521363121.0
a1454a,"React doesn't care what the back end is. I won't repeat all the great insights others already provide, but for me personally I would use node as back end if I needed something quick, being the same language, shared common module, framework like meteor that almost have 80% of server logic done for you, etc allows me to whip up a working product really really fast.

But with that said. Your back end choice should also be based on other considerations like the number of users/hits your expected to get, whether those hit generates enough income to justify server cost or if not perhaps using something lower level and more memory efficient. And if planning to serve a lot of users, the scaling strategy of all your back end systems.",1521373335.0
kazprog,"React has some packages that work well specifically with node and JavaScript (and related languages). Express, typescript, elm, redux, next.js, now.js, reactstrap, more you frameworks all are easier with node. They're usually even installed with the node package manager. If you're not trying to build on legacy code or build some other small piece, then node is the natural choice.",1521360577.0
bjpbakker,"There are a couple of benefits to using javascript for server and client (browser) code.

First of all it allows you to share code. Things like input conversion (validation), models communicated via the api, et al are needed on both server and client side. If you can share that code it makes things much easier and guaranteed consistent.

Then there is isomorphoc rendering. Since you can only render javascript templates with javascript, you’ll need nodejs for this. So having your entire backend in nodejs is simpler than using yet another server component for isomorphic rendering.",1521366193.0
FaceySpacey,"If you are a front end developer using React, it’s a no brainer: master Node and the backend side to javascript next. It’s all skills that help the front end too: webpack, babel, Universal rendering. You gotta align all these things and it will work hand in hand to help you master all of javascript and its ecosystem, most of which has capabilities on both the front and backend. In addition, you already know js—get as much power out of it by being able to use it on the server before expending precious time to learn another language. Simply being able to do backend is more important at your current stage than learning a different language.",1521408416.0
xenocomagain,It's likely about the people. It's easy to hire one team to do everything than two teams that can't speak each other's language.,1521389575.0
golang_ng_go,Server side rendering is a pain in the ass on Java Spring Boot because Rhino is garbage. ,1521373338.0
Isan-Rivkin,Just wondering why nobody mentions Angular?,1521383843.0
Yieldway17,Probably as Node is the most popular API layer nowadays? We personally are a Angular + React + .NET Core shop and it works for us. .NET Core can work with Node if required too.,1521386780.0
teclordphrack2,Why can't you learn more than one FRAMEWORK? ,1521362787.0
cgijoe_jhuckaby,Very nice.  I like how you can kill processes by the port number!,1521408097.0
ccb621,"Write the steps as commands executable from the command line (e.g. `npm install`). Research how to instruct TFS to execute the command.

Exactly what are you trying to do that can’t be accomplished with scripting?",1521351670.0
Cuel,tfs?,1521478384.0
DevilAdvocado,"Nice ad, second time I have seen this user post..",1521327638.0
cornichon,Wow JavaScript has promises now??????,1521331453.0
joelzimmer,"ensure that you: 
-	are calling the apis with the right data
-	handle incorrect and correct data in the response
-	handle error conditions in the api calls
-	validate inputs correctly 

Basically: take a moment to detach yourself from what your app is actually doing and think about what you want it to do. Attempt to break it with a test and make sure those tests pass. Install something like Istanbul (or use jest) and check the coverage of your code and pick a number and try to get every file in your repo to that coverage level. ",1521317236.0
GenTurgidson,https://stackoverflow.com/questions/22900931/mysql-giving-read-econnreset-error-after-idle-time-on-node-js-server,1521312672.0
cheget,Is it possible that you built that module not on the server you are running it on? Try removing that library and `npm install` it again,1521314276.0
pyoochoon,Wow I dont even that its exist,1521301352.0
monsto,"Joined.

FYI for anyone else reading this: it seems pretty active in the cpl hrs I've lurked.",1521336349.0
spmaster007,It looks near dead than alive.,1521364621.0
CanadianNomad,"Honestly, the way you ask the question makes me think you should skip developing it, and just use Piwik.. It is not done in nodejs, but does what you are asking, and is a very mature open-source alternative to Google Analytics. ",1521295439.0
Cuel,https://github.com/matomo-org/matomo (this is previous piwik),1521478425.0
InterdependentTables,"How about a queue?  Each button click throws a message on the queue and N number of workers consume the queue and update the data store, whatever that ends up being.",1521248222.0
MCSajjadH,One word: Redis,1521276537.0
cspotcode,"Store it in RAM, persist to DB async in case the server needs to restart?  Won't work if you need to run multiple listener processes.  Redis might work, too.",1521240211.0
EastBayBruh,"Bitcoin is a way to store value and the price of it is definitely rapidly updating. 
",1521245670.0
WeaponizedMath,You wont stop the race condition between browsers to the server but you can use a queue or redis.,1521263934.0
sznowicki,Click sends request to a server. Server(s) sends SQS. Another server is polling every n seconds a bunch of SQS and updates the db with adding the sum of events count. ,1521280839.0
cgijoe_jhuckaby,"Log file.  Just log every click to disk, and process the log file every N minutes, and update the DB from the log processor script.  You can also ""simulate"" the counter incrementing on the user's browser on click, just use JavaScript for that.",1521249783.0
MrStLouis,"I don't know what examples you're following but you should never use array and object constructors. Array = [1,2,3,4] and object = {} are perfect. To your question response isn't defined because it's spelled wrong. ",1521242969.0
DeX3,I highly recommend using a linter (an `eslint`-plugin for your editor of choice for example) to catch errors like that.,1521292867.0
cyanydeez,mske sure your listeners are attached before you emit.,1521258536.0
MrStLouis,"You don't need any special packages. If you want real time updates you'll need socket. If not using set timeout on the front end will refetch data on an interval and for the user who makes the post you can refetch when you get a success response after posting to the server.
For pagination all you need to do is fetch the 25 most recent messages and then have the user click load more on the bottom and fetch the next 25. All ORM's will support this and setup should be easy. ",1521333790.0
0xibram,you can send a request to an endpoint that returns the new posts every minute or so and then update the ui. you can also use websockets.,1521202113.0
ecares,HackerNoon has becam terribly compromised with this shit lately.,1521197426.0
djslakor,"I'm all for asking me questions on things I'll actually be doing day in and out.  If you spend an interview asking me riddles and obscure JS edgecase questions, I'll immediately think it's a crappy place to work. ",1521207356.0
WeaponizedMath,"Tricky part of JS interview:

Everyone does JS differently.

Every nerd thinks their toys are best.",1521199115.0
Logrologist,"Any chance this exists, or will exist, for iOS?",1521220204.0
TheWebUiGuy,Very cool! so many tricky questions that could go into something like that!,1521226759.0
GamesMint,"@WeaponizedMath, @VoiceNGO, @djslakor, @texasbruce Couldn't have agreed more with you guys... The word tricky is a bit misleading for this app... It includes lesser known fact about this keyword, closure, hoisting etc along with Data structures in JS. Also it has some coding questions specific to JS.",1521210398.0
benjaminabel,Useful quickstart guide! I would also recommend [Nightmare](http://www.nightmarejs.org/) or Electron for more advanced scraping.,1521215607.0
mattk1017,The only web scraper I've had success with scraping JavaScript-rich content is [Navalia](https://github.com/joelgriffith/navalia).,1521255095.0
spmaster007,"Cheerio - works **only with static websites**.

For dynamic you need the other tools like puppeteer or webdriver with Chrome/Firefox headless.",1521271824.0
flipperdeflip,"There's something not right with your Babel configuration. 

Maybe try something like https://www.npmjs.com/package/babel-preset-eslatest-node6 (there are a few others like this on npm/google)",1521190588.0
dahlesreb,"It's definitely possible, I do something similar targetting v5.9.1 because that's what [j2v8](https://github.com/eclipsesource/J2V8) provides.

What does your .babelrc look like?

It should be something like:

    {
      ""presets"": [
        [""env"", {
          ""targets"": {
            ""node"": ""v6.10.0""
          }
        }]
      ],
      ""plugins"": [
        ""transform-object-rest-spread""
      ]
    }

You might need to add some plugins if those features aren't part of the presets (like [rest object spread](https://babeljs.io/docs/plugins/transform-object-rest-spread/) above).",1521234325.0
indigo0086,"just very functional and declarative, not convoluted.  ",1521192813.0
pubmas,Why no state management? It needs Redux,1521184201.0
IlIIllIIIllIllIllIll,Not nearly enough levels of abstraction. The Java version at  https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition takes things to an entertaining extreme.,1521196184.0
brajevicm,For loop hello? Where’s recursion to spicy it up? :D,1521183762.0
rotharius,"My preference goes out to the unrefactored solution without the unnecessary ""else if"" and "" else"". 

I feel there is not enough added benefit of extracting an idiomatic language pattern to a function, e.g. ""x % y === 0"" vs ""isDivibleBy"". I might feel different if it was part of some new abstraction, in the form of a class, and it was a public or private method.",1521193281.0
BenjiSponge,"Wow. My first thought was that it reminded me of another presentation (I forget who did it) wherein he talked about a tool he created to replace the command line that sounded really excellent, before revealing he didn't actually do anything and it was all merely a suggestion. (I make it sound like he was being a dick, but it was actually pretty cool).

But you actually made it, and it looks pretty sweet. I don't know that I'll use it for sure, but it looks like if it gets widespread adoption and if I really sit down and understand it, it could be amazing.",1521157315.0
YuleTideCamel,"Looks like it's just a wrapper around https://github.com/ddsol/speedtest.net?

",1521156461.0
godlychaos,"fast.com  
and the terminal wrapper around it  
https://github.com/sindresorhus/fast-cli",1521218868.0
mitchitized,"SpeedTest.net has been proven bogus for years, for any real objectivity you're going to have to run your own servers, and probably have to move them randomly so ISPs cannot manipulate by address block.",1521213150.0
uNki23,"By using webservices or some other kind of communication layer between your server and client side - sure.

You‘d have to implement the „interaction logic“ on both ends of course.

you can‘t „just control“ the browsers JavaScript from the server side though ... 
Just because Node runs JS on the server you still have a client and server architecture ",1521139231.0
chrwei,"you could do it in ruby just as easy as in node.  you'd probably want something websocket based, then a server and client library that work together to send commands back and forth and change variables.  socket.io has something like this in its libraries.",1521140031.0
Mingli91,It isn’t possible to get any client and server to communicate without some sort of network,1521144957.0
metamorph23,"I‘m afraid that‘s not possible, you would still have to make http requests or use sockets to communicate with the client, just like with Rails. The only difference would be that your backend code is in JS. ",1521139162.0
Ob101010,A build tool for build tools. Neat.,1521150095.0
aust1nz,"Question -- if I'm running a server, why would I send my code through Babel?",1521154073.0
alphaindy,I read the article and still dont get it. How is it different than a seed project or starter template?,1521158678.0
p_404,You should look for service workers and push notifications. Examples for that are the notifications that Facebook or Whatsapp send to you even if you're not on their sites.,1521141181.0
slyfoxy12,I think you ideally have to implement per browser e.g. Google cloud messaging for chrome and Apple Push Service for Safari.,1521148524.0
Askee123,Send them an email?,1521133616.0
MaxUumen,browser extension,1521131343.0
reskejoe,"Check out OneSignal - it does a lot of the heavy lifting of push notifications for you and works great with Chrome, Safari, and Firefox. Sounds like exactly what you’re looking for. ",1521149687.0
navkthx,"You store the messages in a queue, such as in Redis, that are served to the user the next time he/she connects.",1521134796.0
lucisferre,"Sadly that future will never come. The message is still there but there are no plans to make it an exception and it has been discussed at length on Github.

As I understand the reason is the JS spec specifies this behaviour. While I can sort of understand why this may make sense in browser it is far more of a problem on the server side.

Silently swallowing an exception is just wrong.
",1521140954.0
BenjiSponge,I believe what you're describing is a proxy. There's a great chance node is not the right tool for this.,1521121944.0
mansfall,"The ""incoming"" traffic?  From which perspective?  Like the post request going to the server initiated by client?  The post request going to some other server initiated from your ""switch""?  Or the data coming back from one of those other target servers?

Define ""huge""?  Gigabytes of information?  No idea what huge is.

But, that all aside, you can use data streams.  They work pretty well with large payloads.  If you have large amounts of data to send/receive, streams are the only way to go otherwise you risk blowing the memory on your server.",1521146365.0
DLabz,Just create a TransformStream and you can pipe input to output.,1521154774.0
EyeballMond,You'll most likely need to convert back and forth between base 64 to get a string version of your file.,1521122180.0
RainbowTheDashie,"I'm not sure, but I don't think you can just send back a raw `File` object, but maybe you can extract some useful information and give it back to the client?",1521128419.0
Fullstack_Questions,"FeathersJS generator. 

Define what you want, create services (define what db/ORM you want), create authentication in the cli. 

Then build your schemas (for the services, such as User, Post, Blog). 

Done. Your API (rest/realtime) is functional. 

If you want, you may add custom hooks too. ",1521112603.0
coracarm,I wrote an expressjs generator that scaffolds a REST API and provides automatic request validation and interactive API doc via Swagger. You can check it out here. https://github.com/cdimascio/generator-express-no-stress,1521596332.0
forksofpower,Great video! We've been waiting ages for wildcards on LE!,1521108520.0
steven-mctowelie,Simple and short ,1521149515.0
BenjiSponge,"In your strategy, you only call `done` in the `.forEach`, so when the array is empty, the callback in the `.forEach` never gets called so neither does `done`. You should also have a `done` in the `catch` code path so it won't hang forever if you have an internal server error.

Free extra tips

- Use `===` instead of `==` (`==` type coerces before checking equality, which is rarely what you want)
- You put a `console.log` after a `return` in your strategy as well.
- Use a limit of 1 and destructure like so:

        const [user] = await db
          .select('username', 'password', 'id')
          .from('users')
          .where('username', username)
          .limit(1);
    
        if (user) {
          // do user stuff
        } else {
          // handle no user
        }
  This is a faster query and is just generally way easier to read, imo.",1521076559.0
texasbruce,"Possibly backend dev exp, like setting up server, services, and maybe exp with frameworks like express",1521067516.0
White_Broccoli,"As someone trying to hire a senior node dev, it's a combination of hard and soft skills. Ideally an ""expert"" is someone you hire not only to write code, but to teach others and elevate the quality of your whole team.

Hard Skills:

- Promises/asynchronous patterns should be no issue
- Experience will a well adopted frameworks, like Express
- Knowing how to build and publish npm packages (my company does a lot of opensource work)
- How to set up unit/integration testing
- Connecting to and efficiently querying databases
- Able to quickly evaluate and test new tools to integrate into current systems
- And, most importantly, good JS debugging skills. Definitely the most important.

Soft Skills:

- Able to mentor other devs
- Able to work with product teams at your company to determine priorities/write tickets
- Able to estimate the time it'll take to complete a task accurately (this one is so hard)
- And if your company does open source work, able to be a good representative of a project in the OSS community.


It's honestly a lot to ask for, and could be TOTALLY different if you're going to work at a big corporation where you don't need to really interact with anyone outside of your dev team. In the end, the biggest thing I look for when hiring is the debugging skills and then the excitement to keep learning/trying new tools. ",1521077944.0
rognam,"I’ve been working with Node in a Prod environment the past 5 years. Things that may be good to know. How to build an REST API from scratch, we currently use Express but without the templating engine as we are only serving out JSON feeds. How to connect to a DB and do basic operations like saving and getting data. For a relational DB how to perform transactions. How would you structure your API, we currently use MVC which has served us well.

Not sure if this is what you were looking for and their are lots of ways to do things.

Cheers ",1521076148.0
sshaw_,"If you want to be hired as ""an expert"" see [White_Broccoli's comment ](https://www.reddit.com/r/node/comments/84hh7s/when_a_company_asks_for_expert_knowledge_with/dvpw3fx/?utm_content=permalink&utm_medium=front&utm_source=reddit&utm_name=node).

But if you're going to claim to be an expert then you should have knowledge of Node's architecture, its internals, [its API](https://nodejs.org/dist/latest-v9.x/docs/api/), [its ecosystem](https://github.com/sindresorhus/awesome-nodejs), and npm or yarn. 
",1521173248.0
fullheap,"Definitely some experience with databases, queries, etc. Look at Django Rest Framework. No idea which node library is similar, but you should be able to understand Django's concepts as a backend expert.",1521070975.0
megaboy101,"To a large extent I would say it depends on what you expect to be using Node for. At the end of the day Node is just a bunch of API's to access all facets of a computer, be it network communication of file reading or whatever. You really won't be using a lot of them if all you're working with is file serving. If you aren't yet familiar with NPM, which is installed alongside Node, I would learn the basics of that first, it will make things easier on you. After that I highly recommend installing the ""learnyounode"" package, it's an interactive tutorial in the terminal that will show you the ropes. Once you're comfortable with that, you should be fine moving onto Express, since it's only a relatively thin layer over Node's existing http API.",1521061720.0
kamikazoo,"I'm no expert but I'd say learning the basics of Node is good but unless you plan on doing some in depth backend work, just picking up express and learning that is fine. 
It might be good to understand what it is that express is doing but essentially I think it's just shortcutting long or redundant code.
",1521060225.0
greim,"This is a case of a more general question:

> Should I invest myself into learning the platform, or a framework?

In the short term, framework expertise is what gets stuff done and impresses bosses and co-workers. For this reason, there's a strong bias in the industry toward framework expertise.

Platform expertise is a longer-term strategy. 1) You'll have increased ability to debug a mature product and think beyond the limitations of the framework. 2) You'll be less vulnerable to skill-depreciation, since most frameworks evolve orders of magnitude more quickly than their platforms. 3) The more you know about the platform, the easier it is to learn new frameworks, by understanding more about why and how they work.

So, my advice would be to invest in frameworks the minimum necessary to be successful in your current role. Which may still be a lot! But beyond that, spend the rest of your time going as deep as you can on the platform.",1521065967.0
Djbm,"Do you already know JavaScript?

If you’re already proficient in JS, there really isn’t a lot to know with Node core. Probably one of the main things that will help you is learning how `require` and module loading works so you can effectively break your code up into smaller pieces.

If you’re not proficient in JS, then I’d definitely recommend getting a good understanding of the language features before forging ahead with frameworks.",1521063614.0
the_one_who_knock,"I jumped straight into making applications with express when I started. I later went and took Andrew Meade's udemy course and would highly, highly recommend it. Either works.",1521067540.0
Fullstack_Questions,"Vanilla Node would be building command line apps that access the file system, using modules like fs , yargs. 

After that you may learn how to use express and how to use handlebars/moustache to inject dynamic content into html templates. 

What you do with frontend is completely up to you when working with Nodejs. React, Angular, Vue, Html with handlebars. Your choice. 

But the real challenge is not the frontend with Node. 

I suggest taking a course by Maximilian Schwarzmuller, Andrew Mead, Stephen Grider, Wes Bos, Anthony Alicea etc first. 

Stephen Grider also just released an advanced Node course but that's only if you have been working with node for 6 months, feel confident working with APIs and databases, and want to take the next step. 

(These courses are about $10 a piece on udemy)",1521059831.0
erulabs,"No wrong learning. If express interests you, go learn it! If you get a bit over-your-head into some deep stuff you don't understand, just take a break and try again from the beginning. Good luck!",1521062748.0
digitalbath78,You mean JavaScript?,1521088024.0
nrqjs,"If you want to go deeper on backend yes, knowing node to the bone is a good idea.  Check node patterns book, it comes with an ES6 intro, very useful. Also nodeschool.
But if like me you come from frontend and are starting to get full stack, touching express will keep you productive and sane. You will get deeper as you need.",1521090554.0
,[deleted],1521061902.0
4_teh_lulz,You'd be better off learning the basics of JavaScript or es6. They will be incredibly useful.,1521065510.0
winzippy,At the very least check out [learnyounode](https://www.npmjs.com/package/learnyounode).,1521066643.0
citylims,"You might as well complete something like https://nodeschool.io/ just to be more fluent in node.js as a language, and to open your mind to different use's of node as a tool. Learning some of the more frequently used vanilla node api will definitely help you navigate libs like express, etc. 

After you feel somewhat confident you have a good idea of the basics by all means jump into npm and frameworks/libraries/etc. many of which have their own api's which dont require much vanilla node anyway. ",1521079766.0
cinnapear,"I think it's always a good idea to learn the base layer of a tech at first.  For example, learn Javascript before jQuery.  Node is pretty simple so learning how to server some pages with it won't take more than a day.",1521131870.0
moralbound,Another udemy ad.,1521034347.0
400_Bad_Request,Please dont spam this thread,1521044939.0
RushPL,How mature is it? It would be interesting to integrate it to a reverse proxy project of mine. https://github.com/virtkick/http-master,1521066584.0
llthebeatll,Break points in the browser dev tools. ,1520998797.0
jonkcoe,"+1 
I would love for this question to be answered ",1520985875.0
sheshbabu,"Not sure if this is what you're looking for, but you can look into the new AsyncHooks api [1]

[1] https://nodejs.org/api/async_hooks.html

https://www.youtube.com/watch?v=IOAtDBW6w2k",1521049537.0
Ob101010,"Other than recompiling with some sort of logging, I dont think so.

Great time to brush off your c++ skills.

https://github.com/nodejs/node",1521052903.0
imizaac,Console.log(eventLoop) /s,1520987643.0
aturberv,I've also been looking for a solution to this... the process methods (getActiveHandler and getActiveRequests) don't seem to give me exactly what I need.,1520986138.0
pikapikadudulu,+1 same problem i'm facing...,1520986949.0
isotropic_mk3,"According to this blog, I am not sure it can be done: “In Node.js it is impossible to determine the moment a task is received. Only when it is ready to be processed. This is because Node.js relies on the operating system's kernel to handle the task queue.”

[source](http://nodesource.com/blog/node-js-performance-monitoring-part-3-debugging-the-event-loop/) 

FYI my source is ultimately trying to sell you something ",1520997964.0
evantahler,"Here is how we do it in node-resque https://github.com/taskrabbit/node-resque/blob/master/lib/utils/eventLoopDelay.js

Edit: oops, I misread the question. This monitors the global delay in the event loop, not the names of any methods which are running

You may want to check out any tool that exposes dtrace bindings. You can see the methods consuming the most /time/ (rather than CPU), but it’s correlated...

https://nodejs.org/en/blog/uncategorized/profiling-node-js/",1521003423.0
zayelion,What are you trying to achieve overall? I think the root of the question might be misguided.,1521045261.0
cli53,+ great question! Anyone has any idea?,1521046837.0
bitjson,"Hi all, I just published the latest version of `typescript-starter`. It's a minimal boilerplate generator with many of the most popular development tools pre-configured and ready to start hacking. (testing, coverage, typedoc, tslint, prettier, standard-version, etc.)

**The CLI lets you get started quickly, just type `npx typescript-starter` to install the latest version and run the interactive generator.**

For those who haven’t seen it yet, `npx` is a quick-run command which now comes with `npm`. You probably have it installed already.

The interactive mode lets you quickly select from a number of configuration options, and I plan to keep adding new options which work well together. Are there other packages or tooling options you would like to see added?",1520985158.0
coracarm,This looks fantastic. Thanks for putting this together,1521596634.0
,[deleted],1521016170.0
utbusdriver,This is a good guide: [https://www.dropbox.com/developers/reference/oauth-guide](https://www.dropbox.com/developers/reference/oauth-guide),1521052938.0
djslakor,"Did you try google?

https://pravinchavan.wordpress.com/2013/11/08/c-binding-with-node-js/",1520977556.0
Fullstack_Questions,"    var promise = new Promise(function (resolve,reject) {

         console.log('A');
        request(url, function (error, response, body) {
            //console.log(body); // Print the HTML for the Google homepage.
            json=body;
            //console.log(json);
     // RUNS ASYNC 
         });

         request(url1, function (error, response, body) {
            //console.log(body); // Print the HTML for the Google homepage.
            json2=body;
            ///console.log(json2);
    // RUNS ASYNC 
        });
    
        request(url2, function (error, response, body) {
            //console.log(body); // Print the HTML for the Google homepage.
            json3=body;
            //console.log(json3);

    // RUNS ASYNC 
         });
     
        resolve(""Done"") // RUNS SYNC 
    });


There is your problem. You can't put three asynchronous callback blocks there and hope them to resolve before the synchronous code clears the stack. You need to nest them , and finally call resolve in the deepest nested block. This is why callbacks and libraries that use callbacks are ""meh"" compared to promises. If you use ""fetch"" or ""axios"", you may use promises, chain them, or even use async await syntax. ",1520970409.0
ChrisCodes,"I’m a bit of an amateur here; but I tend to separate my code into a functional structure where it’s relative to its main purpose    
    
+ HTTP
    + Controllers
    + Middleware 
    + Routes
+ SQL
    + Interactors
    + Models

My GitHub can explain better then I can:
https://github.com/chrismpettyjohn/Heroic/tree/Production/Backend/src",1520984415.0
BBaa55,"I asked a similar question here:
https://www.reddit.com/r/node/comments/7ltao4/nodejs_project_structure/

Check it out if you want some more answers",1521067546.0
yonatannn,https://github.com/i0natan/nodebestpractices/blob/master/sections/projectstructre/breakintcomponents.md,1521029979.0
sbruchmann,I tend to use [the approach suggested by TJ Holowaychuk](https://www.youtube.com/watch?v=9CTfGS0gEOk). It has served me quite well over the past 3 years. ,1520996304.0
BenjiSponge,"I have a lot of advice. Not all of it is related to the problem at hand. Gonna try to go easiest to hardest. Importance is relative.

- There's no reason to ever use `var` in modern JS. Just use `let` or (preferably) `const`
- Proper style/indentation will *really* help you and others read your code. It's pretty hard to read at the moment.
- Pastebin kind of sucks. I personally recommend gist.github.com, but in this case the code is small enough you could just put it on Reddit if you wanted.

And now for some actual advice regarding your problem

- You're using promises properly, but you have to realize the `.then(cb)` callbacks will be called asynchronously, so they'll occur (potentially; probably) *after* all of the code has been run. I recommend learning about the event loop and the single-threaded nature of JS.
- `.forEach` is good compared to `for`, but you should probably be using `.map` here. Rather than returning nothing from the inner function, return the promise. In this case, `return userSchema.findOne({ _id: user })`.
- The result of `.map` is going to be an array of what you've returned. In this case, you're going to end up with an array that kind of looks like this: `[Promise.resolve(user1), undefined, Promise.resolve(user2)]`. `undefined` is there because sometimes you don't find a user (which is why you have the `if` statement).
- Store the result of the `.map` in a variable called something like `usersPromiseArray`. So `const usersPromiseArray = req.body.userlist.map(user => { /* ... */ })`
- Use `Promise.all(usersPromiseArray)` to create a Promise from all of your Promises. Then you can store it as `const usersPromise = Promise.all(usersPromiseArray)`.
- Now you have a Promise that will resolve to `[user1, undefined, user2, ...]`. So do `usersPromise.then(users => { /* handle users synchronously */ })` and your callback will definitely have all the users. So you don't need to make an array at the top that accumulates all of them -- you'll just have them as an array from this process.
- After you get used to the way that promises work, you can check out `async/await` which will make this process slightly simpler and more powerful. You can also learn to take shortcuts (for example, you could actually do all of this without making any high level variables to store the promises -- just chain `.then`s)
- This is kind of an opinion, though I believe it's a popular one: The async library was fantastic before Promises were the norm, but now that Promises are ubiquitous, there's no need to learn the async library. Someone else might come in and say it's still useful/better than Promises, but don't worry about this right now. Whether it's good or bad is irrelevant: you don't need it right now.

Hope that helps!

P.S. There's actually a better way to do this in general with Mongo. https://stackoverflow.com/questions/32264225/how-to-get-multiple-document-using-array-of-mongodb-id",1520961648.0
Wesobi,do package managers for other languages have a similar functionality like the postinstall you mentioned in the article? Are there a lot of useful cases to keep this kind of functionality?,1521106681.0
ecares,Why only in the valley? ,1520954530.0
skarfacegc,facebook seems to be doing a decent job.  As does salesforce.,1520973598.0
ecares,PLEASE STOP STOP STOP STOP STOP STOP,1520947396.0
s_boli,"It's interesting how someone can give performance tips with no benchmark at all.

In this day and age I'd rather optimize my code for my brain rather than a machine. If, and only if I see a bottleneck while performance testing, I'll optimize.
",1520952576.0
TheBeardofGilgamesh,"I am not so sure using constructor functions to create an instance would be much more efficient if at all. I have tested this before in JSperf and negligible differences between the too. 


V8's JIT is pretty smart and can determine types of an object and where the object is referenced and if it ever mutates and compiles accordingly. I mean in your example you created a static object that is essentially: `{ p: Number, q: String, r: Boolean }`, but with the constructors V8 can't be sure what the types of the three parameters will be. 


Anyways I could be wrong since it always changes, but I doubt there would be any major performance gains from using constructors over object literals. ",1520947795.0
erulabs,Most of these are fairly insane but 100% agree - do not have node serve static files. Some developer with throw a 3mb gif up there one day and the response time for the entire site plummets. Use node as it was intended - an event system that takes JSON and answers JSON ,1520963495.0
RushPL,"Some of these tips are highly controversial. For example I strongly disagree about always preferring native code. I did an experiment once and created two versions of a library - one native and one in JS. It turns out that the overhead of just calling from native to JS is pretty large. Highly optimized JS code is simply better.

This is my library for which you can see the native version in git history. https://github.com/encharm/xcase",1520965019.0
kuatsu_janka,"The ""forEach vs for()"" has an extremely small use case in my opinion.

It's only applicable if you are not only interested in the value but also the precise index. In all other cases `for .. in` is probably the better and faster choice.

Here's a [Gist with Test Code](https://gist.github.com/Jan-Ka/a63614304928cd7bedfb9c89205120d2), Some measured Times in Comment.

I'm currently not sure in which case I would need the index and the element in an array, where I also don't need the unset indexes? Any ideas?",1520950498.0
l0gicgate,"Number one performance tip should be not to use Node.JS. 

JS is terrible to build any backend service, big or small. Code turns to spaghetti regardless of the patterns that you use.

Not to mention, no native typechecking or namespacing and insanely bloated dependency trees that’ll make your application a nightmare to optimize / debug. 

For the love of god, keep JS on the frontend where it belongs. Stop hiring bootcamp developers who slap librairies together and call themselves programmers. Your application is slow because your devs suck. 

PS. I’ve been developing both frontend/backend for 10+ years. I’ve been a react developer for over 3 years now and I use Node avidly for frontend development. 
",1521077776.0
Leefordlyle,Promise.all vs sequential awaits is a good tip but Only if the results of the awaits are independent (obvious). I see that all the time. It’s easier to see how inefficient that is when you’re chaining .then().. await hides that and gives the impression that it’s parallel.,1520967555.0
Ob101010,"> However forEach also avoids the indexes if the element is not defined, which makes it smarter.

Sooooorta...


    console.log('making an element undefined, then forEach over the array')
    a = new Array(5).fill(0)
    a[2] = undefined;
    a.forEach( (e,i) => {  
        console.log(e,i) // a[2] is undefined 2
    })

    console.log('deleting an element, then forEach over the array')
    a = new Array(5).fill(0)
    delete a[3];
    a.forEach( (e,i) => {  
        console.log(e,i) // a[2] is not there
    })

It seems there is some notion of 'empty' for an array element.
",1520952818.0
billy_tables,"> So whenever you call a global variable, it traverse through the entire scope tree (or AST) to find it, which is costly.

The AST is not the same as the scope. The code is parsed into a tree before execution time, that's the AST. Program scope only exists at runtime.

Scope can be represented as a tree (I wouldn't rely on that, I'm sure there  situations where it may not be true) but you're only going up it, so it's more comparable to linked list traversal than tree search.",1520997689.0
mapman2017,I recommend you check out FunFunFunction on youtube. MPJ covers promises among other current topics. ,1520894757.0
BenjiSponge,"What exactly are you missing? Do you not understand how the general networking/server-client model works? Do you not understand asynchronous JavaScript? Or is it something more specific to these libraries?

Within the context of JS and network programming, `request` and `request-promise` are very simple libraries, but it's hard to help you if we don't know what aspect of your understanding is deficient!",1520893806.0
redditpentester,Read the bluebird documentation,1521056932.0
SomeRandomBuddy,"Rebuttal: Please stop using hacker noon, it’s broken ",1520875005.0
BenjiSponge,"I find this article fairly uncompelling. I do use Chrome's debugger periodically, but `console.log()` offers many benefits that a native debugger does not.

- Easy-to-reason-about asynchronous debugging. (See plainly what ran in what order)
- You know the variables you want to inspect will be captured. Sometimes when you're in a callback or closure in the debugger, variables that are lexically in scope will be ""optimized"" out of scope by V8 which realizes the closure does not need access to those variables. This can be very irritating for a number of reasons in a number of circumstances.
- Most debuggers require that I take my hand off the keyboard at some point in favor of the mouse. Generally, using a debugger has a different workflow than development, while `console.log()` is the same as changing logic. You can seamlessly go from debugging to developing and back.

Sometimes `console.log()` is imperfect, and sometimes you need a real debugger. I find that to be pretty rare, though.",1520875281.0
cinnapear,"Huh, so if I don't use console.log correctly it's not good for debugging?  Thanks Hacker Noon!",1520882413.0
ddwrt1234,Don't tell me how to live,1520923014.0
zayelion,I use it to detect object manipulations. If its one thing when debugging and another when printed it means the object got touched somewhere and I know where to go looking to fix the bug.,1520882541.0
hailwoodnz,I'm just impressed we're capable of debugging at 146.45%,1520936972.0
DefiantBidet,"this is a question that you may find is akin to tabs/spaces, semi/non-semi colons.... in that the flavor you choose matters little, just that you choose. so here's my $0.02.

The first one is clean, and easy to read. great for teams.
great to look at and see what is being tested.

the second one i prefer - purely from a ""i'm a banal dbag"" perspective. I like it bc an assertion is just that. I am asserting _this_, gives me _that_. The first example does too much, in my humble opinion.  if the endpoint changes the entire assertion needs to be addressed, whereas in the second example - limiting a _test_ to one or two _assertions_ per test makes your tests less brittle and only the parts that changed would need to be addressed. 

if that makes sense.",1520883054.0
hes_dead_tired,"I tend to go with the first approach for a few reasons. If you're actually hitting an api and there's network latency, you'll be making fewer requests and your tests run faster which means you know when they fail faster which means you can fix them faster. There's just less repeated code.

The pro to the second, is that your `it` descriptors will be more finely grained and descriptive of the specific issue so when it does fail, it's really obvious that, you're NOT getting that Content-Type back that you expect. In the first way, you just know that something is wrong with getting all the accounts, then you need to look at the specific failure and/or stacktrace to see which of your expectations/assertions failed. Not that hard necessarily, but not as explicit as the second option.",1520885554.0
borgnish,"Glad you solved it, but what you have written out doesn't follow the GeoJSON spec.

GeoJSON geometry always has:

1)  'type' of 'Point', 'LineString', 'Polygon' (or the Multi-geometries) . 

2)  'coordinates': as an array of lon/lat pairs (or array of arrays) . (You have your coordinates as strings right now, they should be numbers)

3) . 'properties': object containing attributes/properties.  Your 'address' property should be nested inside a 'properties' object for it to conform to the GeoJSON spec.  

Edit: properties is part of the Feature spec, not the geometry spec of geojson.

You can use www.geojson.io for quick testing of GeoJSON to see if what you have is correct.

Here's an example a spec-conforming  GeoJSON Feature:

      { ""type"": ""Feature"",
        ""geometry"": {""type"": ""Point"", ""coordinates"": [102.0, 0.5]},
        ""properties"": {""prop0"": ""value0""}
        },

In your example, you are only using the 'geometry' property, and the rest doesn't really conform to the spec, so what you really have is some JSON that borrows ideas from geojson.",1520862701.0
harrydry,"Just solved it: 

So you have to add req.body.location.type = 'Point' above the snippet


    req.body.location.type = 'Point'
    const user = await Users.findOneAndUpdate({ slug: req.params.slug }, req.body, {
     new: true
    }).exec();
      res.json(user);",1520862328.0
hicksyfern,Not knowing much about what you’re doing but it’s reading your code...your co ordinates are defined as a number in your scheme but you’re passing a string in your implementation.,1520862199.0
painfulnecessary,"Your library depends on `amqplib` which is a good NodeJS library for AMQP.  `amqplib` also has type definitions on @types.

Apart from that, for some functional feedback:

You should provide a `debug` flag and only print to the console if it is `true`.

You're using fairly opinionated options which users will generally want to provide themselves. Such as `durable: false` exchanges and `noAck: false` when consuming messages.
",1520862105.0
gabrarlz,"Have you tried rabbot? https://github.com/arobson/rabbot

If yes, what are the things you disliked?",1520877424.0
TheWebUiGuy,"Just wanna say thanks to everyone for the feedback! I managed to create a ""looser"" version of it to allow for users to configure their consumers / producers the way they want to. Also spotted some silly bugs i'd introduced! @painfulnecessary that suggestion about the debug flag was a very good idea! thank you!",1520897688.0
,[removed],1520851675.0
TheWebUiGuy,"I was looking into this ended up going with rabbitmq, realised there was on real good node libraries for working with rabbit so I started building one. 

https://www.npmjs.com/package/rabbitode",1520855207.0
ecares,Please stop this,1520840465.0
skarfacegc,"Why not use something like tcpdump to capture traffic to/from the port you're interested in?  There is a really solid eco system built up around capturing traffic to pcap files and viewing them.

There are a few libpcap bindings for node, you can use that for the capture and view the traffic in something liek wireshark.
",1520886428.0
wrobbinz,"It looks like you're trying to do a GET request to that URL and render the response. I'm not familiar with async package, but I think at the least, waterfall seems overkill (it seems to be for chaining requests?). I use axios for doing requests so try this:

https://jsfiddle.net/y8ped7yo/6/

So that bit of code goes into your route: app.get('/'), then you use the response to render what you need to.",1520835301.0
screelings,Use Axios ;),1520818410.0
,[deleted],1520815213.0
YannVanhalewyn,"I was doing the same thing as you two years ago. These are my two cents: the very best thing to being doing is to build stuff. Build an app, or two, or copy an app. And solve all every day problems by doing it. Get it deployed, write good tests. Wanna learn graphql, build something real with it! Have a problem, look for what you need to solve it and learn that. You'll gain valuable experience + something to show when applying as a junior. 

There aren't really that many ""must have"" topic imo really, but being able to understand a new library (or framework, pattern) quickly, read documentation and solve problems are necessary things for the job and this is how you learn :).",1520846416.0
this_is_ender,"The biggest thing that you need in backend is the ability to solve problems and to do it in a well structured and maintainable way.

You would be doing yourself a favor to learn TypeScript, AWS Lambda, and GraphQL.",1520849131.0
modes22,I'd look into graphQL and Apollo as well,1520840131.0
Mingli91,"Computer networks, databases and performance are all pretty good starting points.",1520848719.0
Wickity,"Without providing a full answer, I will remind you that node is single threaded.   And that ""back-end"" does not limit itself to any number of servers or processes.",1520815321.0
mitchitized,"Video and audio streaming should have dedicated services (and most likely not Node.js either). Research streaming platforms and decide based on the right tool for the job, not whether it can fit a big monolithic stack that will be a disaster for scale :-)

This is all IMHO but having discrete services allows you flexibility to rip stuff out or scale specific services as needed, you can even run the three on the same hardware at first just to keep prototyping and initial launch efforts simple and cost effective.

Meteor might be a perfect fit on the chat side of things too.
https://www.meteor.com/
EXAMPLE: https://github.com/rgoomar/meteor-chat-app",1520816419.0
martiandreamer,"To complicate things more, you could write your application as able to do any (or all!) of the main three types of tasks, then use cluster.fork() to (1) utilize all available CPUs and (2) scale your app a bit cleaner by assigning “task-type affinity” to each cluster fork.",1520829736.0
joanmave,"There are other secondary benefits that leverage the type safety. For instance, if using VSCode and Typescript you will have a much better intellisense autocomplete. Because of type inference and declaration files, the IDE can better predict what you need. This helps reduce the cognitive load on very large apps ( hundreds of thousands of lines of code)",1520809275.0
Chris9513,"I think this is a great idea! I'm a big advocate for type safety, so this made me happy to read! Definitely going to bring this with me for future node development. ",1520807983.0
MCShoveled,"+1

I’m enjoying typescript on node now, ts-node makes it nearly seamless. ",1520816390.0
trycat,So why not just use Go?  I use node so I don’t have to mess with types.  Add types and compiling to node and I think you’d have the worst language ever invented. ,1520829287.0
nothingduploading,don't,1520807679.0
armastevs,Am I the only one who hates it when website have these? ,1520820674.0
b4ux1t3,"A really cool tool... On desktop. Maybe it's just me, but it's misbehaving on mobile. ",1520819645.0
Joker042,"You know we've gone through responsive design and come out the other end when pages intended for developers are just straight up designed for a mobile resolution, without a desktop layout.",1520815632.0
redditpentester,"This is awesome, thanks so much.",1520809134.0
lighthouse_at_eleven,Haven't tried it yet but the demo looks amazing!,1520809527.0
TopPrimary,This looks awesome! Thank you,1520812889.0
Shryder1337,Looks pretty damn good mate ,1520817239.0
energyaware,"A couple of corner cases:  
  
How well does it work when you have a yet to be loaded element as next item, for example when a modal dialog is to be shown? I tried quite a few guiding components, but could never find one that works.  
  
Also what to do when you need to click on something for the user to proceed? Ideally you want the user to do it and then continue the tour. ",1520854177.0
maffoobristol,How is this to do with node?,1520839013.0
beau6183,"* Looks like it stores window size at initial load. So if you have a small window, load the page, then resize the window, the lightbox background is drawn at the original window size
* Mobile use is jacked:
 * Mobile tap does not dismiss as I'd expect, and as desktop mouse click does.
 * On inputs: rendered position is correct, but as soon as you scroll, they move in a paralaxic (is that a word?) way (scrolling up moves the box up faster than the the element)
 * I'd expect scrolling to be disabled on mobile when an element is highlighted -- Why let them scroll the highlighted element out of view when you're trying to draw attention?
",1520873683.0
martiandreamer,"As much as I hate to say it, you should package this and sell it to ad agencies and make a shit-tone of money before someone else beats you to it. ",1520823134.0
falz3tta,"Hey! You will definitely need to know some JavaScript in order to write a back end Node app.

I recommend as a first step taking a look at Mozilla’s resources. They even have a guide to build a Node app with MongoDB. 

Link: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction",1520801994.0
HaykoKoryun,Can you get Docker running on your machine?,1520798983.0
VertiGuo,"I second the Docker recommendation. I use it for all of my projects now, no matter how small. They're on different Node versions, but it takes me basically zero effort to switch between projects. I can show you a simple example to get started, if you want. The only significant issue I have with it is that there can be performance issues on Mac for larger projects, but I think I might just need to get a beefier machine. Or stick to Linux.

nvm shouldn't be too painful of a solution though. The key is to avoid installing packages globally in the first place, and you don't need Docker for that. Even for packages that you use in multiple places, you can install them separately in each project's local node_modules. To easily run them, you can use [npx](https://github.com/zkat/npx) if you're using the npm client: `$ npx webpack`. I believe npx comes bundled with more recent versions of npm. If you're using Yarn instead, you can do `$ yarn webpack`, which should find Webpack in the local node_modules.

I still prefer the Docker solution though because it allows me to apply the same principle to any language and technology (like running different versions of a database), whereas nvm is only a solution for Node.",1520913411.0
fatratmad,Andrew meads node course is updated frequently.I would advise you to learn es6 before rushing into node.,1520787042.0
,[deleted],1520788768.0
max-block,Can anyone recommend an advanced course on Udemy?,1520802067.0
falz3tta,"I recommend Wes Bos’s Learn Node course:

https://learnnode.com/",1520802089.0
,"And Udemy uploads other people’s content as their own, profiting and breaking copyright. Please don’t give them money.",1520796950.0
mansfall,"A ton of this is already done by lodash.  And it has vastly more support and has been highly optimized.  I suggest adding to lodash anything that isn't there, rather than making another npm package that people now need to research.",1520793282.0
FreshOutBrah,"Documentation, please!",1520788115.0
icanevenificant,"Absolutely!

Here's a repo with a bunch of popular open source ""production"" projects in many different languages: https://github.com/unicodeveloper/awesome-opensource-apps",1520773313.0
johnyma22,Etherpad,1520795982.0
fatgirlstakingdumps,You might find this interesting - https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/,1520778361.0
_sportsfreak_,"So I am not sure what your level of expertise is. But I will recommend the NodeJS course by Andrew Mead on Udemy for anyone who is a Noob. It’s fantastic. 

And yes. What’s up with the picture. Lol",1520749383.0
delaet,learn nest js and try to programming pet project,1520787166.0
SepticReVo,Maybe try [NodeSchool](https://nodeschool.io/)?,1520789793.0
Its_a_long_way_down,"Hmm is that picture there for a reason? 

Anyway, thanks for asking this as I will also learn from it!",1520814150.0
,[deleted],1520748545.0
webistheway,"so apparently some link (most probably freecodecamp's project link) is causing this to have a picture on mobile, ill try moving the link here :
 ([timestamp project fcc](https://www.freecodecamp.org/challenges/timestamp-microservice))",1520749973.0
will123195,https://github.com/agenda/agenda,1520743891.0
erulabs,"Using a scheduler inside of node or a cronjob on a single Linux system is creating a single point of failure, and in my mind, violating a golden rule of web application development: Keep state far, far, _far_ away from in-house developed code (ie: don't keep authoritative state in memory in node).

If you're using Kubernetes, take a peek at [Kubernetes Cron Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/), or, for a simpler, more standalone system, http://dkron.io/

That said, the reliability issues / scaling issues that come with the single-point-of-failure that is a ""cron server"" won't bite you until well after you have enough traffic and funding to hire me to fix it xD",1521063311.0
Honga,"If you're running on a dedicated server you could set up a cron job to run your scripts in bash or alike. I run a semi redundant server for a prod deployment that pulls in mongo documents periodically. 


But I'm also a beginner with the technologies so this way was a hack, and probably not resilient.",1520772135.0
danielstaleiny,cronjob ,1520774595.0
e-freak,"I would recommend writing a service which checks every like 5 Minutes for an unhandled event. This approach allows you to scale your app and also handles service outage better, because you know whether your contest was already handled. Also if you have multiple contest objects with the same start date you limit the load because of the 5 minute interval ",1520775682.0
,"All I can contribute is that if you learn JavaScript and Objective-C, you can write web apps, React Native apps, and native modules for React Native apps on iOS, so ... that's a thing. It's also a thing that learning languages is good, and makes you better, generally. You'll just have to weigh it's value and opportunity cost. Best wishes!",1520723867.0
segphault,"The cases where you will really benefit from dropping to native are generally a pretty narrow range of situational, compute-intensive things (or cases where you want bindings to an existing library). You have to consider the overhead of moving stuff across the language boundary. 

Worth noting that you can write native Node extensions with Rust now: https://github.com/neon-bindings/neon It might be more interesting if you are going to learn a new language, though I don't think it is more employable yet.",1520728712.0
matthewsilas,"learning programming languages aren't like learning to ride a bike, they're like learning a spoken language. After learning spanish, you'll likely never forget how to conjugate verbs, but you will forget vocab. Similarly, if you don't write C++ for awhile, you'll still know what a pointer is, but you'll forget the things that make the language powerful. if you don't use it, you will lose it. If you have a job that requires it, go ahead. If you're thinking you will learn it once & just stick it in your quiver, you won't.

Source: I no longer say I know assembly, C/C++, MATLAB. I'm having to relearn python right now after 5 years off. But I can code in JavaScript, so i got that going for me... :-(",1520743712.0
QuantumObstructions,"C++ comes in handy. I use C++ and Python in my node scripts for things like embedded development via nodejs. I say, don't discriminate on languages they all have their place. Just like OS's. 

But if you are only doing pure nodejs master JavaScript. ",1520741804.0
HaykoKoryun,"If you don't know C++ already it _might_ not be worth investing time in learning it if you will not use it for anything else. That said, if you do learn the basics of C++ you'll never know when it might come in handy.

I once wrote a Node.js package that interfaced with the Microsoft Kinetic to stream skeletal data as JSON objects to use in the browser. ",1520745321.0
carb0n13,"Native modules (c++) are not very common, and they’re mostly used to access OS features or database drivers that aren’t exposed via the node.js api. CPU bound problems are very uncommon, and if you needed the (often overestimated) speed benefits of native code, then you probably won’t be using node.js to begin with.

If you don’t already know c++, native modules are a weird place to start.  C++ can be a headache to develop because it lacks a portable module system, so compiling with libraries can often be a chore. I recommend starting with CLI programs. Maybe solve some problems on hackerrank.",1520746260.0
technobuddy,"My company has a ton of legacy products that are written in c/c++.  We used native c++ modules to extend our rock solid legacy code with newer Node JS constructs.  
Really helped us when we had a few new hires that only knew JavaScript.",1520752914.0
mistralol,"
Its not actually that common to write modules in c++ for node there are programs that will automatically make a c++ module from headers.

I have done a lot of c/c++. Its useful to know from a career point of view many see it as a dead language but basically *everything* is written in it or uses it in some way eg node, python, mysql, sqlite, mongodb, postgres, Linux kernel etc.. etc... It defiantly hasn't gone away.

Note: I integrate node with c++ code using a clientserver lib. Not typically by adding it specifically from node using https://github.com/mistralol/libclientserver

This way I can have java, c, c++, node, python or any other language I want talk to a c++ back end. Also amazing just how fast you can make stuff run like this. A good example would be a mysql write back style cache system. Suddenly makes mysql do 100,000+ queries / second and there is still space for improvement on that.

",1520757720.0
martiandreamer,"Having spent a few years working with Node.js professionally as well as in a hobbyist capacity, I’d say you never really stop learning about new and better ways to do things in the language. 

Having said that, integrating C++ functionality into Node isn’t something I’ve *had* to look into in a “necessity” capacity, but it is something I would like to do, if only to say that I’ve uncovered that stone. 

Learning the concepts involved, I think, *is* putting something in your quiver, however I don’t feel like you’ll have a practical use for it until you *really* need to optimize something computationally heavy. ",1520771130.0
thedomham,"Learning C++ solely to use it with node seems very restricted. I don't think knowing how to code in C++ is going to be immensely useful for your career as a (web) developer.

I'm always a big fan of learning new programming languages, but if I were you (and if you haven't already) I'd rather learn a JavaScript alternative like Typescript, Dart, Elm or Kotlin. ",1520800711.0
matthewsilas,"i compared the 2 & went with bull because i valued some of the features over a synthetic benchmark. Even if the benchmarks are valid in real-world tests, what's more likely to occur, you need a feature that doesn't exist, or you come up against throughput limitations?",1520725376.0
,[removed],1520722395.0
RushPL,Bee Queue is great and very simple to use. Unfortunately it does not support Redis Cluster.,1520738260.0
theguysperry,"I've tried quite a few. Visual Studio 2017, VS Code, Atom, Sublime, Brackets. I've settled on VS Code. Frankly, I'm surprised. It may be the best product Microsoft has released in quite some time.",1520715602.0
JustinsWorking,"I use visual code, works wonderfully without being too heavy",1520714529.0
konrain,Why not use VS Code?,1520715598.0
OzziePeck,"It’s the best free IDE I’ve ever used. Atom is terrible, slow, the suggestions are useless, it’s nothing compared to Visual Studio Code ",1520717555.0
carb0n13,"Recently at work, we were making a Windows only node.js app with a C++ node module.  I configured my solution so that the C++ and node could be built and debugged, and it worked pretty well. Before long, I stopped opening up VS when I was working on the node parts and just did it in VS Code. VS is just too clunky, slow, and prone to freezing.

If I recall correctly, the same team at Microsoft makes the node.js development tooling for both VS and VS Code, so the built in feature set is pretty comparable, but Code will start to win out when you start using plugins. I don’t know if there is an ESLint plug-in for VS, but I depend pretty strongly on the ESLint plugin for VSCode.",1520720167.0
_takedown,"I’d cast my vote for VS Code. It’s much lighter than Visual Studio and provides everything I needed to build a Node API and a Chrome extension. Plus, Microsoft and the dev community update it regularly. So, it’s always improving. It has a decent extension ecosystem that appears to be growing rapidly.  I also use VS 2017 Enterprise daily, but usually for larger solutions that contain multiple projects and compiled code. VS, especially enterprise edition, for JS/Node projects is like using a cannon to kill a fly. You’re getting some bloat and features that you simply don’t need in a Node project. 

I haven’t used Webstorm in years and used Atom only briefly. Both were fine as far as I can remember, but I can’t recall enough info to offer a fair comparison.  I can say I haven’t had a reason not to use VS Code. ",1520717828.0
MrOwlan1,"I'm a long time .net developer and have basically exclusively used the latest Visual Studio. I started diving into Node these past few weeks. Visual studio, great for the .net ecosystem. But for anything else I prefer vscode. It's hands down better, my biggest thing is syntax highlighting and visual studio has a limited set of files it'll do. Vscode is more capable and lighter weight for everything else. 

Only thing I wish it had (or wish I knew how to do it) is to do f5 to run the app in debug. ",1520725968.0
from-nibly,Vs code is awesome the vim plugin is pretty good as well.  I really love it for typescript!  I use vscode for everything except Jvm languages. ,1520748799.0
PlayableBox,"Colleagues at work prefer VS Code over VS IDE for node development. 
I use the Mac version and can't complain...updates and new extensions nearly every week. In my opinion you only need an IDE if you doing anything that requires a graphical interface.",1520863868.0
proboardslolv5,"Personally I don't like to use an IDE for anything, intellisense is more annoying than it is useful sometimes",1520713687.0
Aesthetickz,Last time I worked on Node in VS Studio 2013 it sucked. I would say Webstorm is one of the best choices.,1520714308.0
Poltsaitl,"It's strange to me that you're account is almost entirely about courses. I'm not sure why you just post links to courses. If you're that obsessed with them, write a blog post and break down the pros and cons. I see this in my feed like every other day it feels like.",1520694292.0
maximusprime2328,Save your $12 and just go to Scotch.io. They will teach you these basics and teach other practical things. Their scraper article is a good one,1520704851.0
shawarma_burrito,I don’t think ‘literally’ means what you think it means.,1520702962.0
,[deleted],1520705413.0
SalemBeats,"Who the fuck is Jack Davis?  
  
The course you linked is apparently made by *""Mark Price""*.  
  
Lmao.",1520717571.0
,[deleted],1520695041.0
son_of_meat,"When asking for help with an error, it's important to give us the complete error message. It's also often important for us to see the line of code that is throwing the error. In this case, which \`child\_process\` method are you using? Without either of those pieces of information, I'll propose that instead of doing all that tail and awk logic in the shell command, you could do it in your Node.js program. ",1520696087.0
disclosure5,"You'll have a much better time just making ""vmstat 1 2"" your command, and doing all that data mangling and cutting in your JS code.",1520767155.0
RedditorFor8Years,"Did you take a look at [momentjs](https://momentjs.com/docs/) ?

That library is invaluable when you are building anything other than hello world.",1520675991.0
haydar_ai,"https://stackoverflow.com/questions/2627473/how-to-calculate-the-number-of-days-between-two-dates

A simple google search give that as one of the result. If you need to modify the datetime to the right format, there is always momentjs.",1520672367.0
VanGoFuckYourself,"if you want days as in simple 24 hour increments, just get the datetime, not the unix_timestamp value do

        var days_left = (row.expires_at - new Date()) / 1000 / 86400;

Also, when you select an ugly value like 'UNIX_TIMESTAMP(myTable.expires_at)' use AS to name the column:

    SELECT UNIX_TIMESTAMP(myTable.expires_at) AS seconds FROM ...

And then you can use row.seconds to get the value.",1520673079.0
mbj36,Use date-fns npm library,1520795842.0
ecares,"Website brands:
PHP DevelopmentAsp.Net Development RoR Developmen tAzure Development Java Development Golang Development Nutch Development... please pretend to try at least.

",1520673885.0
aGodfather,"If you are willing to use a 3rd party solution for authentication, please take a look at auth0.com . You can also configure Google, Microsoft Azure Active Directory, GitHub, and other logins using it apart from your own username password logins. ",1520659992.0
xwnatnai,"Passport-local gets credentials directly from the request body. Passport-http on the other hand expects/supports the basic and digest schemes, which use Authorization header and have to conform to their respective protocols (mostly encoding). 

Edit: forgot the rest.

Express-jwt is not a passport-specific middleware. If you’re already using passport in general, you can ignore express-jwt. It pretty much does the same thing as passport-jwt, that provides an abstraction over JWTs, which is a specific protocol for encoding/encrypting sessions and other stuff. Passport-http-bearer just expects a beater token in your Authorization header. This token does not have to be a JWT. It can be an oauth token, or anything you want. 

In your case I would go with passport-jwt for protecting auth-only routes and passport-local for your /login endpoint, as they’re the simplest for now.",1520658819.0
Tvde1,I have some example code you might want,1520676741.0
klepra,"I recently made a simple example app for learning about MEAN stack and token auth using only passport-jwt for strategy. It also includes dependency jsonwebtoken, which is used to create jwt token.

Strategy is used on protected routes  - it checks for the token in Authorization header, starting with ""jwt"" and gets the user from db, according to id in token. Passport also attaches user to request object implicitly, so you can use it in your route.

Login route just takes username and password and compares it with one in db. If OK, it generates and sends jwt to browser. Just like you mention, you don't need startegy here, but I saw some examples using passport-local for this. 

I can send you a github link if you are interested in code. 


",1520698106.0
weigel23,I just watched an udemy course about that topic. Check out this GitHub repository: https://github.com/StephenGrider/AdvancedReduxCode/tree/master/auth,1520716844.0
clockdivide55,"On the line it is complaining about, remove the `var`. You've already declared it, you don't need to declare it again.",1520634294.0
richraid21,How often are your prices being updated? How fast do the bids need to be executed? Are the available conditions static or dynamic? ,1520637491.0
cgijoe_jhuckaby,"Hahaha their SSL cert expired.  NET::ERR_CERT_DATE_INVALID
That's really funny.  Also, this post seems rather suspicious to me.  It reads like paid promotion boilerplate text.",1520650949.0
ecares,https do you know it?,1520644720.0
alerrce,SSL is working as I see it!,1520771681.0
psayre23,"Personally, I think both are worth keeping track of. The delay from request being added to the queue and the data arriving is still a valid metric. It may not be measuring the speed of the server you are hitting, but it is still measuring how fast you can act on the data that is received. Keeping track of both will show you how much improvement you can make in your own code, namely by reducing the processing time in the event loop. ",1520662739.0
psayre23,How many glasses of wine before the neural network starts hitting on the bartender? I couldn’t get mine past 4.,1520663429.0
muffinner,man i love this sub. just crazy dumb stuff that people have managed to do with node,1520642519.0
drowsap,How did you go about converting the chemical properties to a value between 0 and 1?,1520644187.0
SippieCup,"Maybe use a combination of Rekognition & labels to determine interest.

A simple .js function will not be able to tell you if something is ""interesting"". You can't even be arsed to define what is considered interesting, so how could the javascript function work. 

Is `interesting` based on whats going on in the image? How many people are there? What objects are present? the difference of colors across the image? the size of the image?

",1520629273.0
danielstaleiny,make sure npm and node is running smootly. I don't thing anything is wrong with react or react-dom modules. I think something is with your npm or project setup. ,1520611564.0
dv297,"I'd try several thinvs. Try upgrading to the latest Node and latest npm. Also try deleting your node_module and installing. If that fails, try deleting your package-lock.json (or your shrinkwrap.json if you have that). I'd also be careful if you use both NPM and Yarn. Kind of my flowchart of troubleshooting.",1520630914.0
fyzbo,"Angular and it's companions are designed for building SPAs (Single Page Applications).  Think GMail not wikipedia.  It does not make sense for a bunch of content pages.

So you have a choice, you can build your website with a more standard infrastructure (PHP, Rails, .Net MVC, etc) completely, or break it apart.

If you do it all together you have the advantage of only one website, one stack, and less complexity.  You are building a traditional monolith application.  You will give up advantages in UI for the member section and your application may be more difficult to scale.

If you break it apart you can use the newest technologies and potentially build your API as microservices allowing it to scale horizontally without issue.  I would break it up in this way:

**Static Section**

Use an existing CMS!  Why re-invent the wheel.  Spin up wordpress or some other CMS you enjoy and start building a theme and pages.  This will allow editors and marketers to quickly and easily add content and cut down the amount of work you need to do.

Add login links (or whatever CTAs make sense) to another website, say app.yourdomain.com

If you truly need something custom you can build it as a traditional express MVC application, or any other technology.  If you go with express consider purchasing a book to read, it will go in more detail and help you format your folder/file structure in a more organized way.

**App section**

The app section is also at least two projects:

*Front-End SPA* - This will be build in Angular or another javascript framework.  I'm partial to VueJS, then React, with Angular coming in last, but the choice is yours.  Use the CLI to create your application, they all come with great features like a webpack server to simplify development and the ability to proxy API calls.  They also give you build tools out of the box for deployment.

This will be your UI.  How the application is structured differs between frameworks and your personal preferences.  Some our component based, others attempt an MVC or MVVM model.  Follow the convention of the framework to make things easier to look up.

*API Server* - This will be a project dedicated to your API.  It can be one monolith application or you can break it up into micro-services.  NodeJS/Express does a good job, but you can use anything you want.  This will provide all the endpoints for the SPA.  Again if using express consider reading a book.  Express is not opinionated, you can put everything in one file, or you can make an excellent code structure, it's really up to the developer.


This architecture is clearly much more involved, but it comes with some great advantages:

 - Separation of concerns - you have multiple projects so developers can be work independently of each other with dedicated skill sets.
 - Easy scaling - Your content site and SPA can be cached and served through a CDN.  Your API can be scaled out in multiple way.
 - Responsive UI - Your UI will feel very responsive and you could being adding features typical for a PWA (progressive web app) making it even more useful on a mobile device.
 - API Re-Use - If one day you want a native app, amazon echo integration, smart tv application, smartwatch app, etc. you can leverage all of the same APIs you build and will only need to replicate the UI.




I hope this helps.  My biggest advice is to invest in an actual book or long course.  Tutorials just scratch the surface to give you an idea if you want to learn more, you need to go deeper before building a full-fledged application.",1520606936.0
falconmick,"Perhaps a better solution is to split this project in 2.

Search engine friendly public site built with Ruby on Rails or c# MVC and a logged in area which is angular and powered by An API from either node or ruby or c#.

Personally I would build it with universal React (server side rendering), GraphQL, and either a serverless GraphQL service or a node server running apollo GraphQL, mongo for storage and redis for caching and subscriptions. However that’s probably over doing it as by the sounds of it you wouldn’t have used any of these techs and they’re a tad hard to pickup quick",1520604311.0
TheOneRavenous,"Feel free to replace MongoDB with any other database as there should be and ORM to manage the interaction between your backend and the database. 

Also ExpressJs has ""express generator"" under getting started section really easy structure to manage. My buddy add a little more separation by adding a server folder and all backend lives there while all front end lives in public. 

Angular is nice and to be honest I really like the framework. Though it's opinionated it offers alt of solutions you'd expect out of the box. High flexibility if utilized correctly. Egg head.io has an amazing directives tutorial that's a little older now but it shows how to create a directive that spawns lower level directives based on the data structure.

React is neat offers more server side rendering. This is nice as you can make you site work easily without JavaScript enabled on the client side. But requires you to offload the front end as a backend rendering infrastructure.

Both are great and both have advantages based on what you want to accomplish i.e. offload onto thw client rendering or offload on your system rendering for the client. 



",1520607173.0
js_developer,"You can use AOT rendering for Angular but if you're just coming back, a modern web framework like Angular may be overkill..

I would do some work in Express. Get a feel for the underlying technologies that drive Angular/React/MWFs. 

Node is a great base. Express makes a fine server. Check into existing solutions on NPM. The new way is much easier, so it's worth the initial struggle.",1520609948.0
zombie_kiler_42,"I think /u/fyzbo gave a good answer,

I think its great you want to learn a new technology,  what better way to learn it that to build something with it.  
For the front end, just make the pages that are not only for logged in users and that you want to be SEO friendly a static page with links or use a CMS

You can also use a CMS for the entire project or you can just make the authorized sections of the web app an SPA,

For the backend if you chose to use node/express  the way i like to structure is based on components,  where 
E. G,  anything related to users registration/login/edit/delete shit like that would be grouped together but different files to handle different functions, 
So for instance usercontroller.js manipulates the data and userdata.js writes and reads the data from the database. 

And inside app.js you cn initalize the proper modules and export the router
And inside router.js connect the appropriate api endpoints to the usercontroller.js


",1520615794.0
jenniitoo,doing it in php will be a lot less stressful ,1520600628.0
this_not_be_cheap,"There are meta-frameworks like MEAN that give you a MongoDB / Express / Angular / Node stack, and there are tools like Yeoman that can spin up one of these stacks easily enough with the right script, with a level of opionation as to the way files (front and backend) should be structured; they will also come with gulp scripts to build / minify the code for dev and production environments. 

It is a whole other universe tho.",1520602671.0
mitchitized,"Express might be too close to bare metal for this. There’s many restful frameworks out there, with Loopback probably closest to what you are looking for on the node.js side of things.

IMHO the biggest change to web dev the past few years is fully decoupling the front end and back end, which can be mega-frustrating as you feel like you’re playing spin the bottle (and you’re the bottle).

I remember when ‘npm install’ didn’t take >90 minutes, and really miss it 🤓",1520605944.0
amazingatomic,"Just throwing another set of recommendations on the pile, you could try Sails, a Rails-inspired MVC framework built on express, and I’d recommend Sequelize for database queries.",1520609044.0
ssbmomelette,I'd suggest using node/express + EJS. It'll be an easier learning curve coming from php.,1520611859.0
sven37,"Express just provides an easy way to build RESTful APIs. If you are looking for a Node equivalent Ruby on Rails, checkout Sails. It actually uses Express internally but comes with all the items you are wondering about. Personally, I love the freedom provided by building a backend with Express as the base but it's not for everyone.

Also, I would recommend checking out Vue if you do go down the route of using a frontend JS framework. It works very well for SPA and non-SPA websites. Many people in the Vue community pair it with Laravel. Vue has a much easier learning curve compared to React or Angular. (Not turning this into a JS framework debate, I use all three.)

If I was in your shoes. I would be tackling this problems with a Vue + Sails, or Vue + Laravel stack.",1520612017.0
stuckinmotion,"There's probably as many unique recommendations as there are developers, welcome to the JS ecosystem!

That being said, Express is a solid choice due to its popularity and simplicity. Try out `express-generator` to get an initial structure of your app setup. It's common to use a similar pattern to MVC, except your routes end up being your controllers. So you have a routes directory with files in it for each grouping (maybe a users.js file for routes such as `/user/account` and `/user/list` or whatever), and these routes call into your data access (ie models) to load the data you need (those could live in another directory, say, `models`), and then send it off to the view to render (these live in `views`). This could be sufficient.

If you feel you want snazzier views, then I'd say look at React or Vue, and move to a more data-driven API. I'd probably stay away from Angular, but I'm biased since I have more experience with React. In that case then you'd typically end up with a single route for serving your HTML/CSS, and you setup your other routes to just be data in, data out, and your React components would interact with them for their data needs.",1520615260.0
JustThall,"Welcome to the craziness of JS frameworks. Everybody went through similar frustration phase ;)

I would try to quickly build a solution using MeteorJS (full stack, with possibility to use React or Angular on the front-end). It has a well defined structure and lots of “frustrating” decision we’re already made. I would go with React+Meteor combo

This way you’ll be able to transition to webpack+React+graphQL combo that cool kids like to use these days later on",1520620209.0
SomeRandomBuddy,"Either make it fully static with the backend of your choice or use React with server-side rendering. The former is what you’re experienced in. The latter has a non-negligible learning curve dude to the complexities it adds. Also, obligatory “does this exist already”? In other words, can you use phpbb/wordpress/drupal for 90% of your requirements and then write a plugin or two for whatever is missing? Note that you can always start easy to simply get something functional online and upgrade over time",1520623669.0
monsto,"To add to what /u/fyzbo said, you could take a look at [Ghost](https://ghost.org/developers/) as your CMS. Fully featured, yet node based. 

It could help you learn a new tech while giving you the base you need.",1520647637.0
aShazbot,"Maybe headless CMS is the way to go. No experience myself but I've been wanting tot try this next setup:
https://snipcart.com/blog/react-graphql-grav-cms-headless-tutorial
It has all the hipster JS frameworks with a flat file CMS (Symfony)",1520661943.0
fullheap,Consider Django,1520671222.0
lau2222,"I'm a user on a large Jira with multiple projects and the tool didn't quite work for me because it seems to expect things to be in a certain way.

`jira all` displays seemingly random issues, none of which being related to what I'm working on or is assigned to me.

`jira my-not-released` and `jira stage` didn't work because we don't use the statuses these commands are expecting:

    JIRA respond with '400 Bad Request' status.
    ERROR MESSAGE:
    The value 'Released' does not exist for the field 'status'.
    Please try again later

`jira issue` however was fine and the coloured output was pretty good and readable even with many comments.

So I think what's missing here is:

- Some way to specify the project(s) you are interested in
- Some way to query issues with a specific status
- Maybe a command to show only the issues assigned to me and to allow filtering by status",1520605933.0
vwildest,"A teammate just sent me this, as we were just discussing some JIRA frustrations yesterday.

I have not tested your repo yet but I like the idea and where you have started. My feedback / request would be for a very quick and ideally some sort of bulk option for creating issues.

I am aware of the file import functionality but it is not very efficient the way they have set it up and I think a CLI version that performed a sort of 'JIRA Issue Creation - Lite' would be fantastic.

This 'Lite' version of issue creation could just be
*jira ""Add API function to start user sync"" ""API"" create*
where the first message is the issue name you are creating, the second message is the Project initials and finally your command

What would be super is if you could actually tab through different projects but that could be difficult given the sequencing of the attributes. 

If it went like:
*jira create ""API"" ""Fix issues being PUT to server""*

Then when typing it into the command line, if you had tabbing set up for your command history, you could type the ""jira create"" part and then tab through project names due to your history.. 

Anyways, like I said, love the direction lusarz!",1520629363.0
andynocandy,npm walks up the current directory tree until it finds a package.json file. I ran into this when starting to work with firebase functions... I think the solution was to create an empty package.json in the subdir.,1520576702.0
nucleocide,"Your example should be:

    const formatDate = ({day = 0, month = 0, year = 2018} = {}) => {};

That way you can write:

    formatDate();

Instead of being forced to write:

    formatDate({});",1520556042.0
lachlanhunt,"Bad example. For dates, the solution is ISO8601 (YYYY-MM-DD). e.g. 2018-03-09",1520556438.0
r0ck0,"On the subject of real named params...

Given that JS is so loose with allowing you to run functions with missing arguments etc already... named parameters don't add that much more in JS (JSON is ***almost*** as good) compared to other languages where you can do useful stuff like force the argument to be included, set defaults and throw exceptions on undefined properties.

Of course they would be nice to have, but I'd rather that they focused on a few of these more basic strictness things first.  The main frustration I'm finding in node/JS coming from PHP is that it's so easy to type a variable/property name incorrectly in JS, and it will just silently create another property or give you undefined etc.  And I'm missing private properties/methods even more than I thought I would.  I think I'm just going to have to get into the habit of doing the _prefix thing in JS for soft-private properties in JS.

I know PHP isn't very good by default, but you can make it pretty strict with all this stuff if you want to with a few init settings.  In PHP it'll throw exceptions any time a function is run with missing arguments (this should really be how it works in all languages, seeing you can always set a default of null/undefined, assuming it supports defaults), or you try to access a variable or property that doesn't exist by adding a magic setter/getter that throws exceptions.

I know there's stuff like proxies and https://www.npmjs.com/package/zealit (which I've used a couple of times now)... but it really should just be a basic part of the language.  

I'm experiencing these annoying little silent bugs quite a bit in JS now that would have throw exceptions in PHP.  It's additionally more of an issue now that auto-complete in my IDE now displays a list of pretty much every prop of every type of object, rather than those in a specific class.  So I've got less strictness, and less useful auto-complete.

But really liking pretty much everything else in JS over PHP.  ",1520573045.0
gnagatomo,"I think it's very misleading object's destructuting to be called named parameters, because it can confuse one coming from a language that really have named parameters, since when calling the function you have to pass an key/value object.

    def sum(a=0, b=0):
      return a + b
    
    print sum(b=1)
 

Is conceptually different from:

    const sum = ({ a = 0, b = 0 })  => a + b
    
    console.log(sum({ b: 1 })

",1520595340.0
thedomham,"ProTip: If you have to deal with languages that don't support named parameters and only want to use that feature for a more readable call-site, IntelliJ and Webstorm (and presumably all their siblings) display parameter names under certain circumstances. ",1520575084.0
,"What kind of bullshit is that again? This isn't named parameters, you're just handing over an object instead of the actual values. This isn't Swift, brah",1520600008.0
e_to_the_pi_i,"I know everyone hates CoffeeScript now but the inferred object literal curlies were one of my favorite features. You could do:

    someFunction(hello: ‘world’)",1520556424.0
Chiasmata,"Having done some more reading:

1. User auth. info **is** stored in the session store - so for Redis you find the session id and run the GET command against it. e.g. `GET ""sess:YxyCV..."" -> {... passport:{user: 20}}`. Previously I was just running `KEYS *`. This was probaby the most confusing bit of the puzzle for me, but with this is all make a lot more sense. Then the user ID from the session store is passed to `passport.deserializeUser` to add the user to `req.user`! This I don't feel is explained simply elsewhere, or perhaps I'm just a bit thick.
2. Express adds session details to every request on `req.session`
3. Custom things can be stored to the user session simply by doing `req.session.anyVar = ""anything can go here""` - very useful.
4. I'm still not sure on this one, part of me thinks you could just pass the session ID back to the server over socket.io then look up against Redis to see if that session has a user ID attached... but I feel it's perhaps not that straightforward.

Hope this helps someone in the future - glad to be told otherwise on any of the above.",1520598837.0
Good_Guy_Engineer,"That'd be the Computer Vision API I assume your looking at? (API for reading text from images in Cognative Services). Then all you need is a simple restful app using node & express to call the well documented API and turn the json respones into some jazzy user friendliness. Start googling and youll find plenty of generic examples.

Alternatively you could just pair up with someone who knows web apps as I assume like most hackathons this one will be team orientated.

Edit: you dont need node. Some html page with ajax calls to the api will do.",1520545393.0
duybk,Just use Google a bit dude. F.e. Mozzila web docs has very nice explanation about what webserver is.,1520538449.0
ecares,Static analysis in JavaScript is arely a good way to go. All the tools I have seen were pretty poor.,1520533912.0
grajagandev,"Check out Codacy and Code Climate for static analysis.

But since so much in JavaScript is determined at runtime, static analysis can only do so much. 

Dynamic analysis finds bugs missed by static analysis and unit tests - my startup Fuzz Stati0n offers dynamic analysis as a service.",1520611600.0
benjaminabel,There is a good summary of it [here](https://www.howtographql.com/advanced/4-security/).,1520529652.0
tech3ad,"I found this website very useful. They have solved a couple of algorithms and DS problem using JavaScript.

For more specific Push and Pop check this one: http://javascript.info/array-methods",1520538082.0
B0hne,"I recommend to check the [docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). For the solving part, the point is to solve the problem not to look up the a solution. Take your time and before you hand in a challenge clean it up and improve it! As a starter it's not about being fast. Good luck!",1520541094.0
TheNiXXeD,No hapi mention?,1520518035.0
aust1nz,"> Although W3Tech’s March report comparing NodeJS with Nginx and Apache usage shows NodeJS at only 0.4%

Huh?",1520522082.0
,[deleted],1520498822.0
PlainReality,Tomorrow: Node 9.9.0 (Current),1520491093.0
ddwrt1234,"Man, they're on fire this past week with releases ",1520492014.0
Oleg18,Question is do I need to reinstall node.js when new version realized? Yesterday I downloaded 9.7.1 and I thought it's the latest one....,1520523935.0
SoInsightful,"Wildly unspectacular changes, but progress is good!",1520510480.0
kgwebsites,Just waiting for mobile safari to implement this so we can use it in production and save a few pixels ☺️,1520475288.0
Blitzsturm,"I've used keys and values for things like simple CSV encoding of JSON row data but haven't used entries much... I like how fast they are to do basic manipulation.

	var obj = {Alpha:1,Bravo:2,Charlie:3,Delta:4};
	
	// CSV Header
	Object.keys(obj).map(o=>`""${String(o).replace(/""/g,'""""')}""`).join(',')+""\r\n"";

	// CSV Rows
	Object.values(obj).map(o=>`""${String(o).replace(/""/g,'""""')}""`).join(',')+""\r\n"";

	// URL encode
	Object.entries(obj).map(([k,v])=>`${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join(""&"");

Edit: I'm also a big fan of [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)",1520470097.0
gpyh,Don't call this ES8. There are no ES8.,1520493039.0
ehansen,Send it as post,1520463502.0
theBosnianTraveler,"My guess is you are missing the cookies/sessions. 

So instead of using simple request. Use the session sublib. With session, call the post on the first page, then within same session call post on next page and the responding server should remember your total order. ",1520463983.0
vmarchaud,NPM install are ignoring some downloads from specific IP ranges like Amazon/Google because there aren't representing real users. The raw downloads are higher for sure (at least that the case with github.com/Unitech/pm2),1520502076.0
gonzalolog,"It's not something you can disallow access in your server config? Not that sure how it really works for firewalls in any incoming connections software

If I'm awful wrong, can you explain me as ELI5? I'm interested about the solution too",1520469692.0
error1954,I would suggest learning SQL just so you know what is going on under the hood and then just use a light wrapper on top like knex or another sql library. I'm not the biggest fan of ORMs because sometimes it feels like they get in the way with more complex queries.,1520457206.0
SomeRandomBuddy,"Honestly, learn SQL. Get the bare minimum DBAL that lets you connect to postgres and send queries to it. From there you can move to expressive query builders, full-fledged ORMs, or whatever suits your business needs the most. 

The good news is that from what I’ve inferred, your queries should be fairly basic at first. Learn which tables you need, how to structure relationships between them, and lastly how to write queries to insert/retrieve the data your business logic requires. 

Can you accomplish what you need without doing it the hard way? Sure, but it gets confusing fast if you don’t have a solid grasp on the basics. And DIY is the fastest path toward grasping said basics... even if it comes at the cost of longer ramp-up time",1520459553.0
kapv89,"You can give my ORM, tabel, a shot. It'll give you a very handy database-access-object which you can use throughout your application. http://tabel.fractaltech.in/ 

Tabel is bit of an unconventional ORM. However, those who have used it once, swear by it.",1520486977.0
cmarenburg,"As others have said learn SQL - than progress on to Postgres specifics. A good book that I keep on my desk is SQL Queries for Mere Mortals (Third edition) by John L. Viescas and Michael J. Hernandez. I don't work with raw SQL much any more, but this saves my butt when  I have basic theory questions.  

ISBN: 978-0-321-99247-5

I would also understand the way SQL queries work before using an ORM - it'll help you improve those ORM queries later on  ",1520519250.0
Blitzsturm,Before using Node.js I was already experienced with JavaScript.  I saw a few examples of node in use then when I got interested in using it I just RTFMed.  The [Documentation](https://nodejs.org/dist/latest/docs/api/) is pretty good overall and has some use examples so I literally just read every method and looked at their examples.,1520470347.0
jenniitoo,"get really good at modern javascript first, that is a big help as a foundation",1520466645.0
SepticReVo,"Andrew Mead's [node.js course](https://www.udemy.com/the-complete-nodejs-developer-course-2/) on Udemy is exactly what you are looking for. It's project based, so you'll get the opportunity to see what you can do with Node!",1520481894.0
Microwawe,"https://www.youtube.com/playlist?list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q

Academind on youtube has a couple of playlists about node and building a rest API with it and I learned a ton from his videos. He goes through all the things step by step and explains everything as he does it. He doesn't start from the deep end or just copy paste code that he wrote earlier or tell you to do x and just blindly trust that it works without knowing why it works.",1520604887.0
grajagandev,"This cheatsheet is very helpful:

https://github.com/LeCoupa/awesome-cheatsheets/blob/master/backend/node.js",1520516411.0
redblueninja,Check out the course by Andrew Mead on Udemy. ,1520522651.0
abby_cohen_221,I followed a lot of the tutorials from here: https://www.turbo360.co/tutorials. Those mostly Node JS based project so Javascript was heavily emphasized.,1521102928.0
bc_tech,[Javascript Web Applications Using Node.js and Express] (https://objectcomputing.com/training/catalog/web-application-development/javascript-web-applications-using-nodejs-and-express),1521743295.0
TheTratz,"I personally enjoy using Udemy. Node changes fast, though. Try to find a course (when they're frequently on sale for $15) that's both as current as possible and highly rated as possible.",1520455254.0
NuclearSpaceHeater,"If there are dependency version conflicts it will behave like npm2 and nest them. 

Source: http://npm.github.io/how-npm-works-docs/npm3/how-npm3-works.html",1520462257.0
flipperdeflip,Apparently not.,1520503724.0
RangerCoder,Can't agree more!,1520448582.0
-db-,Doing one of his courses now and it’s fantastic. ,1520462678.0
bindik,Ah just some dude spamming his course...,1520507441.0
SomeRandomBuddy,/r/lolangular,1520447608.0
BenjiSponge,/r/hmm,1520445006.0
cgijoe_jhuckaby,Bad URL @tolmasky.  It just goes to the submit page for this subreddit.,1520490402.0
codearoni,"I think it's growth is logical! The framework is easy to pick up and learn, and you can create POC's in record time, not to mention fully functional products. React/Redux have a larger ecosystem, and arguably are favorable for enterprise when you have a lot of complex state (maybe)...but most people just want some simple CRUD apps with that are easy to maintain. Vue is awesome for that. I really dig it.",1520470862.0
METALz,How is this article relevant to the subreddit (node) though?,1520512053.0
SomeRandomBuddy,"Because angular is actual trash. Framework is trash. Upgrade paths are trash. SSR support is trash. What the hell did they even rewrite it for?

/r/lolangular",1520454181.0
ecruz255,"I've taken mostly all Wes' courses, and they are great, he explains things really good. Recommended",1520436262.0
xnogueira,Anyone? ,1520938101.0
kefirchik,"We started playing with Strapi last month. We don't have anything in production yet, but have been feeling quite optimistic about it so far. Quite looking forward to launching a project with it! It has been relaxing to work with. ",1520451065.0
AndyJessop,"GraphQL integration is very exciting. I wonder, will it have subscriptions?",1520457982.0
iDavidDeSmet,Very excited about GraphQL feature.,1520479217.0
ddwrt1234,"You'll get better perf letting nginx handle SSL over node, among other things like serving static content and caching. Nginx is good at what it does",1520434220.0
to-too-two,"Can't answer your question, but I wonder how big an app needs to be before adding nginx becomes worth it? ",1520456548.0
schrammdocarmo,"When a user uploads an image, you could instantly push it to S3 and use S3 URLs or a CNAME that points it to serve these contents.
If you want to run the upload in Background, you could trigger an event on Lambda which synchronizes your local image to S3 - just that your URL wouldn't be available instantly.
There are many ways to do it.",1520401153.0
hc000,"There are examples of lambda and uploading images to s3 on aws website, you don’t need to use serverless framework.",1520419874.0
TheTratz,"True story, I saw this update in my software manager and went ""why did they downgrade the LTS?"" and then realised it was 8.10 not 8.01.",1520455484.0
cyanydeez,"not sure, but i think the lazy load skip the code with an empty return.

try replacing the require with a function that returns the encodings.

i noticed in my tests, the require is only run once, so if the object is modified, all subsequent tests dont get a new object.",1520396684.0
gradual_alzheimers,"this was awesome, i could totally use this",1520402930.0
mooky-bear,"Github project for Scribbletune, the JS library he's using to generate midi files: https://github.com/walmik/scribbletune",1520398028.0
niconisoria,That's just great!,1520418271.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/ableton] [Making midi tracks with node.js and Ableton.](https://www.reddit.com/r/ableton/comments/82lkko/making_midi_tracks_with_nodejs_and_ableton/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1520397116.0
GreenFox1505,Did you mean to link the middle of the video?,1520404524.0
skidmark_zuckerberg,This is awesome! ,1520441609.0
ccswift,I was at this preso. Sharp guy,1520848287.0
kuatsu_janka,"Depends on the size of the contents of each array member I would say?

Also it depends on what you do with the array and the array members?

-

I wrote a little internal app that receives and displays *Visual Studio Team Foundation Service* Build Server Messages which are [quite large](https://docs.microsoft.com/en-us/vsts/service-hooks/events#build.complete) and a node.js server running on a mediocre Intel NUC has had no measureable performance drop when storing almost 50k of them in memory.

I keep the unmodified JSON and parsed classes around so after a quick milk maiden calculation this should be around 500mb worth of data, sitting around in two `const`s.

One thing I want to mention is that I had some issues with storing data in memory for longer times as it seems that some sort of caching goes on which can lead to unreliable data.

Because of this I implemented [node-persist](https://github.com/simonlast/node-persist) which is stupidly easy and removes all the uncertainties of keeping the stuff in memory.",1520384153.0
MUDrummer,"If you’re not touching it then all it will take up is memory and a few (very very few) CPU cycles to make sure the array is still referenced somewhere.  

The only real worry is what happens when that giant array needs to be garbage collected. If you’re talking a large array of large objects, then that GC could be a long pause. This WILL effect you app globally. So it depends on how you’re using your array is the only real answer you can expect without some more information. ",1520386584.0
MUDrummer,Are you on Windows 10?  If so you have the much better option of just installing that bash subsystem and using the Linux node installer. ,1520386706.0
tostrinj,"Path too long means you should try to install into different directory.  Windows has a limit of 256 characters per path, so try picking a different directory like dumping it into C:\Node or something similar",1520386458.0
SkaterDad,"I haven't had any issues installing Node on Windows 7 or Windows 10.

Could there be something else on your system that's blocking the installer?  Try temporarily disabling any antivirus software while you're installing and see if it helps.",1520861998.0
HeyGuysImMichael,"Official documentation, dude",1520378557.0
franciscopresencia,"Hey I am the creator of server.js, a Node.js library based on express. I have created some tutorials, I think you might be interested in the real-time chat since the others are quite basic:

- Real-time chat, from front to back, including real-time with socket.io: https://serverjs.io/tutorials/chat/ . See a very advanced version of it I made for an interview: https://blackstorm.chat/

Feel free to ask for help about it here or in the issues https://github.com/franciscop/server/issues and I will do my best to provide it! Also, do you have any preference for a tutorial? I am looking for ideas to write one. A topic usually missing is a simple web scrapper, so useful but only few people know how to make one while it's fairly simple.",1520425185.0
hunted7fold,"Might not be advanced enough for you, but I started learning with https://www.edx.org/course/introduction-node-js-microsoft-dev283x which is a free course that could help you understand how to learn basics and structure projects.",1520404350.0
skidmark_zuckerberg,"Official Docs are a good starting point but if I were you I'd take a Udemy course. There's a few good ones out there but I took Andrew Meads course. Once you have a good understanding of what's going on the official docs will make a lot more sense. 

Edit:

Here's the link to the course I took

https://www.udemy.com/the-complete-nodejs-developer-course-2/",1520383253.0
dev__aditya,Take a look at this https://blog.risingstack.com/tag/node-js-at-scale-beyond-the-basics/ it's a series for learning how to use node at scale,1520394978.0
ABrownApple,Always wanted to publish my own npm package :),1520353205.0
strixvarius,https://devcenter.heroku.com/articles/getting-started-with-nodejs,1520351720.0
Crzychkn,"Check out Github’s Student Developer Pack. It comes with a ton of stuff, including $50 credit for Digital Ocean. At $5/month that’s a long time to play around with a live server that is easy to spin down and back up if you run into issues.",1520355950.0
Felecorat,Check out now.sh,1520357884.0
marvinfuture,"Heroku, AWS, Digital Ocean, and Vultr all have some really good options as far as cloud servers go. Being a beginner it’s actually hard to “go wrong” with a server if you are just doing small projects ",1520354830.0
sethholladay,"For small to mid size projects, [now.sh](https://zeit.co/now) by Zeit is a fantastic choice. Super easy to setup and use compared to other services.

Digital Ocean is great if you want to tinker with operating systems and shell scripts and networking. It's still relatively easy to use (especially compared to AWS) and their community documentation is excellent. But I think it is overkill for what you are looking for. These days, PaaS solutions like now.sh are getting pretty good, even for projects that need to scale up a bit.",1520373122.0
BjornsBot,"I'm checking out Heroku atm. Very clear dev guide. Gonna try this :-).

Thanks for the quick replies!
",1520355420.0
tknew,https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04,1520359391.0
mackenziemi,Thanks for sharing. I will give it a try!,1520393491.0
davidmdm,"I got really excited because I love the go formatting tool and this seems very similar. The only thing I can't seem to make it do (and I tried looking for an option) is to stop breaking all my function arguments on to multiple lines. 
If I can fix this I am sold. Anyone know how ? ",1520480656.0
monsto,"Do, um . . . do you realize that Ctrl-S is default keystroke to save the current active file? 

I mean it will prettify, if you have 'format on save', but if I just want to try it, well I can't do that. Can the key be changed?﻿",1520355007.0
jsdfkljdsafdsu980p,"I would have to see your code and run it. Based off my experience, my node apps take more memory than CPU power. I always seem to max out my servers memory limit first. Well not max out but hit my auto scale point first. ",1520346912.0
yarauuta,"Why not just use Elastic Bean Stalk?

By your description it looks like you are reinventing the wheel on deployment.",1520352240.0
NuclearSpaceHeater,"If you're running on AWS, have you considered going the serverless microservice approach with Lambda?",1520379898.0
fl0w_io,"I'm not entirely sure I understand your problem, because the obvious solution seems to me to be just plain JSON. Why do you need a template-engine?",1520323576.0
MondayMonkey1,"Any template language should be fine, ejs, pug, handlebars.  All you need to do is to write out your JSON as a string between a pair of script tags, then have your client side js parse it.  

JSON.stringify to serialize
JSON.parse to deserialize.  ",1520337427.0
scaredibis,"Sounds like you could make use of socket-io. Its super simple and allows you emit events (with data) both ways between your server and front end. 

The official getting started docs show the quickest way to get it up and running.",1520323482.0
anttud,Promises or async/await would make the code look much cleaner and are also a good thing to learn.,1520322508.0
-soma-,"Quick read through notes: 

1. I don't see you really using typescript in here - mostly just plain-old-js. 

2. re bcrypt... 
If you're exploring auth, bcrypt to learn, that's awesome! Learning is great. 
But, if you're looking to make something ""clean, secure"", then I'd encourage using a auth library instead. Home-brewed authentication usually means bugs, missed edge cases, security holes. 
Try checking out passportjs. It's the go-to auth framework for node projects.

3. I recommend researching some RESTful best practices - these routes are pretty SOAPy. Organizing them a little differently will make them ""modern"" and easier to maintain. 

4. Your `App` class in `src/app.ts` isn't really doing much. Either export the App class and create an instance of it, or skip the class entirely. Creating a class and instantiating it in the same file is just adding clutter IMO. ",1520311442.0
berni_dev,"I can also only second, that you should use an auth lib like passport. For example the salt should be stored with the user in the db, your current implementation has the same salt for all users. and i'd guess that it could be buggy, when the salt changes on a server restart.

Other findings from a quick look:
- do a quick catchup on http status codes, a failed login should return a 401
- mongoose is providing multiple field types for your models, so make use of that, e.g. in `blog.date` you can use `Date`",1520337595.0
MCShoveled,"As a whole, this is on par with what I would expect from a dev with under 10y of experience. It’s not terrible, but it’s also not really good either. 

Look at the following...
Use Async/Await
Error handling and http error codes
Input and Output validation 
Authentication
Authorization 
Audit logging 
API Specification (OpenAPI or GRPC)
Pagination of large responses
Data modeling

The best way to learn is by doing, so congrats and keep at it. Maybe look at some larger projects for inspiration, like https://github.com/NodeBB/NodeBB or similar. Even better to get involved with a med/large open source effort. They will keep you on the rails. ",1520349336.0
becauseimnotmyself,"    BlogModel.find({}).sort({_id: -1}).exec((err, entries) => {
        if (err) {
            return res.json(err);
        }
       return res.json(entries);
    });

    // above is same as below:

    BlogModel.find({}).sort({_id: -1}).exec((err, entries) => res.json(err || entries);
",1520348752.0
T4Searcher,"""Put all the scripts in a single directory and somehow share the node_modules folder?""

Yes, that's how I've done it. Keep that particular ""tools""-folder in a git repo, so I can pull/clone it in projects where those scripts are needed.",1520312387.0
faazshift,"Node checks parent directories for `node_modules` if it doesn't exist in the directory the entry script is in. So if all the scripts are using a similar set of packages, you can still use a single `package.json` and `node_modules`, and organize the scripts however makes the most sense.",1520320258.0
chrwei,the database already has a cache.  are you finding the DB round trip to be major performance bottleneck?,1520278783.0
virtulis,"Does that version number really change every 5 seconds? If yes, it's volatile enough data to just get it from the DB every time. If it's once in a few days I'd just keep it stored in array and refresh that manually via some HTTP call. If that sounds like too much work, that's because it is, but if it were a result of some complex calculation instead that would be the right way to do it, imo.",1520290503.0
SomeRandomBuddy,"Single node? Cache in memory
Multiple nodes? Redis/memcache

Make sure you’re aware that there’s a bottleneck before actually making the change

I wouldn’t refresh on an interval... 

Single node: use a local variable to store the cached value. `setTimeout` to clear it and re-fetch when it’s null. 
Multiple nodes: set a TTL on the key. Re-fetch when it returns null",1520296487.0
MCShoveled,"Rule #1: 
You don’t need to cache it. 

Rule #2: 
If you think you need a cache, see rule #1. 

Rule #3: 
You may choose to ignore these rules once your company is a household name. ",1520307266.0
OzziePeck,"Could use an in memory cache like NodeCache, so you don’t need to run Redis too. ",1520504261.0
OzziePeck,Why is the version number changing every 5 seconds? What is this number being used for?,1520504368.0
binaryops,"I wouldn't put it on a setTimeout, rather after a fixed amount of time has passed, using a date when the cache was lastRefreshed and the current time less the cacheLifetime.  When the cache is 'old', re-fetch it from the db and set lastRefreshed to the current time. That way, only the request that came into an expired cache get to pay the round-trip price and you can invalidate the cache at any time by setting lastRefreshed to an old date. 
Like others have said, if the cost of an extra round-trip to the database is too much there may be issues elsewhere in your code, but if you're counting milliseconds and this data is largely static, it may be worth the effort. Just be sure to consider the case where the cache is old, and stale data gets handed out.",1520295176.0
,"Would it not make sense to just put a cookie onto the users device, and look at the cookie with each request, and if the version changes server-side, just update the cookie.",1520285350.0
SippieCup,"The database keeps stuff like this cached on its own if it's getting requested this much. The overhead of the calls to it should be negligible.

If you are really concerned with the overhead of the http calls, you might be over engineering your platform.

The time you spend on optimizing this will be more expensive than the calls that check the version that are being made unless you are running Facebook.
",1520287666.0
je-lopez,"Just a guess, but maybe try adding name attr to the select input instead of each option",1520274903.0
cowboy8038,"All of his courses are great, I've think I finished two already (including this one) and currently working on the meteor/react one. More then anyone other instructor I like his pace and challenges. I like how sometimes you'll be doing something not really understanding the point and then all the sudden it fits perfectly into the application your building. ",1520277524.0
dixncox,https://en.m.wikipedia.org/wiki/Cross-origin_resource_sharing,1520284406.0
erfling,"Yeah. I have experience beating my head against this recently.  You need to set an origin for your sockets. Your socket server won't automatically use the CORS settings for your Node HTTPS server.

I'm using TypeScript, and this works for me. 

    this.io.origins('https://v12.mydomain.com');    

With this.io being the SocketIO server. I do this immediately before calling listen() on the HTTPS server that Socket.IO uses. Good luck.",1520289386.0
johnmaclained,You could use this package [cors](https://github.com/expressjs/cors) on your node app. You can set it to enable all requests or specify a single route. ,1520320535.0
OzziePeck,"Use Nginx. Don’t use apache. As Slowloris has demonstrated, apache can be rendered inoperable with very little effort very quickly. Apache should’ve died by now.. it tried, but failed ",1520504436.0
greendog77,"Awesome, thanks so much for this! Looking forward to the next part.",1520321573.0
somtimesawake,Great post Can't wait for the next instalment.,1521344767.0
matrix12383,"Using serverless with static assets stored in an s3 bucket, allows you to seperate serverside functions from your static assets and frontend styles and HTML. ",1520242876.0
Lefka356,"I love setting all the different ways you can utilize the cloud. While this isn't the way I would create a serverless application, it clearly works and adds scalability with relative ease. ",1520253293.0
Mingli91,We've moved the part of our server that pre-renders our front end in AWS Lambda@Edge and we cache pretty aggressively. The performance gains are incredible.,1520274619.0
RedditorFor8Years,This really brings the cost down for my server.,1520260864.0
___Grits,"You aren’t checking to see if request and request.body are available properties before you destructure the title from it. 

Just to clarify:
Const title = ctx.request.body.title; 

Is the same as the destructured version:
Const { title } = ctx.request.body; 

Can’t pull out title from a non object. Ie. ctx, request, and body must all be objects and not null or undefined. 

I suggest adding a check in that create function to make sure you have what you should have, and if not throw and error ",1520229805.0
thornag,"I’m not familiar with Koa, in express land your error would indicate lack of bodyParser middleware.

The error you are getting is because you are trying to deconstruct property on a null -> ctx.request.body.title  and body is null/undefined.

Quick google search yields https://github.com/koajs/bodyparser/blob/master/README.md",1520229999.0
abeeku_t,https://stackoverflow.com/questions/49102110/cannot-delete-a-player-object-after-checking-for-a-created-by-attribute,1520211612.0
Pyro979,"> Am I having this problem due to the fact that my client is running on port 3000 and noderserver is on 3001 ?

Could you explain this part?",1520216763.0
Imposter1,"This is the exact setup that I was looking for, thank you for sharing this!",1520191572.0
djslakor,I think most people using Typescript on the server are opting for TypeORM.  That's probably why.,1520280393.0
ndboost,... is that DJ Khalid?,1520210544.0
fl0w_io,"the problem with your question is that you're comparing apples and planets.

Node is a platform/runtime, much like Python is.
Flask and Django are http libraries, and Django also adhocs an ORM (IIRC).

Use-cases for both Python and Node range from NASA space suits to machine learning, I think you're asking to broad of a question. That being said, I'd ask the team instead because you seem unfamiliar with the technologies and thus, it is logically sound to offload the burden of that decision.",1520180144.0
Kusaddaw,"Sounds like you know much less about all 3 techs than your team. So from a technical perspective you want the team's input. If you are responsible from a management perspective or the team has as disagreement and you are the tie-breaker, you still want to work 'through' your team as much as possible since you don't have the technical background to make this decision. Get them to explain how the merits of each apply to your product's needs.",1520181860.0
turd_burglar7,"Have taken several Grider courses. If there is some piece of tech I want  to understand better I look for a Grider first even if there are several courses on the subject. He explains stuff very well, keeps his videos short, and is really just easier to listen to than other instructors I have taken courses with.",1520198682.0
andrewjc88,"Stephen Grider has really quickly became by favorite instructors. I’m not sure if it’s just me but, he doesn’t hesitate to repeat some details that trip you up while learning a new skill and the courses are really well thought out. I’ve bought almost all of his courses and they are money well spent!",1520189878.0
TheWillG,I just finished this class I highly recommend it!,1520177785.0
iSucksAtJavaScript,"I've been meaning to take that course. Thanks for the post, I'll give it a try!",1520185576.0
headyyeti,This is the course that made everything click for me. ,1520194360.0
virkamqiq,Is there course that's there for Mean stack,1520177214.0
nZambi,"What you can do is share the project folder on the compiling machine via your LAN with normal Windows / OSX folder sharing. And edit the files via your network on your coding machine. If you have webpack set up with file watching, the compiling machine will pick up on the file changes and compile it. ",1520165197.0
,[deleted],1520159328.0
fullheap,SSH/SFTP,1520162521.0
Maplicant,"You don’t compile node js, what do you mean exactly?",1520162638.0
bjpbakker,Maybe buy a new keyboard?,1520160788.0
alchemoria,TeamViewer? ,1520166365.0
inabahare,"Well you could use GIT for that. Then on your build machine have an alias that pulls and builds.

Though it does strike me as rather odd tbh",1520171718.0
alppawack,Store your project folder on your new laptop and connect the other one with ssh or sftp. Most editors/Ides has ability to editing files over ssh/sftp.,1520210409.0
ddwrt1234,"Atom + Nuclide plugin, Nuclide + Watchman on server/remote box",1520226857.0
to-too-two,"Jesus, the spam on this sub-reddit is out of control. Obviously OP is a bot/spam account, but even the jacksparrow account that replied is fishy. Post history of advertising online courses. 

Mods? Can you do something about this please?

And to be honest, I liked that course, and I like Andrew as a teacher, but if he’s purchased some sort of shady, spam for advertising, then he’s losing my respect. The course is already popular ffs. ",1520116806.0
LekeH5N1,Node School - Workshop ,1520151587.0
alve25,"Bookmarked, but mostly for your drawings during the first quarter.",1520138927.0
talmobi,"This should get you going:

    console.log( process.argv[ 2 ] * process.argv[ 3 ] )",1520094535.0
BeLikeElon,vorpal.js,1520119404.0
Jsonsonson,"Depending on the size of your CLI, you could look to using a CLI parser package like [yargs](https://www.npmjs.com/package/yargs) or [commander](https://www.npmjs.com/package/commander). I even developed and published my own CLI parser with the purpose of it being easier to use, yet still powerful and more customizable, and it will handle (as well as the others) your example quite easily. It's published as [wily-cli](https://www.npmjs.com/package/wily-cli), and below is how you could set up your example...

    const cli = require('wily-cli');

    cli.command('increase <percent> <amount>', 'Increase command description here', (options, parameters) => {
      if (parameters.percent !== undefined) {
        console.log(parameters.percent);
      }
    
      if (parameters.amount !== undefined) {
        console.log(parameters.amount);
      }
    });

If you're making a very tiny CLI, then just looking at and validating the `process.argv` array should do the trick, like stated in another response.

`process.argv[0]` --> Node executable  
`process.argv[1]` --> your file  
`process.argv[2]` --> first argument (percent)  
`process.argv[3]` --> second argument (amount)  ",1520565413.0
cyanydeez,Jupyter usually switch's to an open port,1520094900.0
tbarge1038,"YouTube videos all have a unique ID, and the ID is always included in the URL! You can split the incoming URL string to get the ID, and then append it to a string to create the embed URL!",1520096100.0
talmobi,"You can generate the embed based on the youtube link. Should take a JavaScript developer less than 5 minutes to generate a function that does that.

Examples below of a ordinary link and an embed link. See if you can figure out what's the same and what's different.

    https://www.youtube.com/watch?v=I5y19Vapk1A

    <iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/I5y19Vapk1A"" frameborder=""0"" allow=""autoplay; encrypted-media"" allowfullscreen></iframe>",1520091665.0
sittingprettyin,doesnt this post pop up like once a month?,1520091225.0
SomeRandomBuddy,Does it have a telegram bot too?!?! Is it serverless? Yayy,1520087024.0
tbarge1038,"You could hack it with timeouts, have the same method that starts the audio start a timeout to call your other functions at the proper times?",1520095773.0
robfromboulder,"TL;DR  Network sniffers are pretty hard to write, but if you just want to log usage of an express server at a high level, that’s pretty easy.

Sorta depends on what you mean by traffic sniffer, allow me to explain.

Most packet sniffers operate by putting a network interface into “promiscuous mode”, which requires root permissions to do.  In this mode, network packets are serviced regardless of the intended host — basically whatever network traffic is seen by the NIC is available for processing, which is not the default behavior of any application framework like express.

Express like most user space applications are going to respond only to network traffic to that specific host — but express won’t see the raw packets, instead it works on request and response objects, which are translated to/from network packets in the network stack of the operating system.  (and isn’t visible to your app)

So I don’t see how express would make for a good sniffer platform in the traditional sense — it’s not hooking the NIC and getting raw packets, which is the first thing a sniffer needs.  There is then a tremendous amount of work to translate those raw packets into something meaningful.  You’ll have to merge packets to reconstitute streams, decode SSL (which will require the original SSL keys), and so on.  Not easy!

If by “sniffer” you mean to capture the request/response objects from calls made to an express server, there are easy options for doing so.  For example, you could use express middleware to log requests and responses — but this won’t capture traffic to other hosts, just the calls made to the express server being instrumented.

I happen to have some open-source libraries for logging usage of application servers, if that’s what you intend to do...but if you truly want to build a packet sniffer, I can’t see how express would be a great choice for that purpose.

Does this help?",1520199988.0
kireerike,How to get started with Material-UI? This is my Step-By-Step guide that will show you the easy and the right way. Believe me! I've tested a bunch of solutions (so you don't have to). These are the proven instructions to using Material-UI with React.js 16+ in 2018 and beyond.,1520045835.0
ottaky3,"The most obvious problem is ..

    url: 'https://localhost/:3000/register',

.. when you probably meant ..

    url: 'https://localhost:3000/register',
",1520063221.0
isotropic_mk3,"Try request.post(options, callback)

[NPM request ](https://www.npmjs.com/package/request) ",1520048408.0
localhostdev80,Your code looks okay (beside the port). Maybe the response code isn’t 200 but 201? Try to log all arguments in the callback function.,1520073457.0
shriek,"You can debug more if you spit out the error. Quick question however, are you really using `https` in your localhost with the right cert?",1520083118.0
oldyoyoboy,Try using the ignore ssl option in the request.  It stops the strict checking of certificates.,1520086659.0
awebofbrown,"I don't think there's anything wrong with it, personally.

You're not transmitting sensitive data in a cookie, you're storing user information on the request object which isn't being transmitted back.

The better question is whether you actually need this information for every possible response your API could provide. Usually, your user table would have the requisite authentication data, so querying your employee data store would only be done in routes that actually require it.

If you do need this data for every request, there's no real reason not to. The alternative is chaining another middleware to do the exact same thing, anyway. ",1520154736.0
je-lopez,"tldr -I wouldn’t do it and pretty sure it’s not recommended. 

I’m not an expert, but I’ve had plenty of code reviews. The user property should only be added/removed by passport. 

Also, I wouldn’t send data in a cookie, unless it’s a small size and non-sensitive information, since it can lead to your app being ‘slow’ or info being stolen. If you do though, and assuming you have something like express-session or cookie-session already, a session property is available on the request object. You can add/remove what you’d like there. This data will however be encrypted. -Passport is actually using this as well. If you console log req.session, you’ll see a passport property and a user property inside that. I believe req.user is an alias, could be wrong on this one, for req.session.passport.user, wrong or not, these two properties DO have the same value.

Unless you’re using two different APIs, you can probably get all that information with a single query. If you are using different ones, I’d recommend following RESTful convention, so handling authentication and retrieving user data require separate endpoints. And then you have wonderful graphql, but that’s for another discussion.

Hope some if this helped",1520047351.0
ewouldblock,"Something like this, probably: https://github.com/expressjs/body-parser/blob/master/lib/read.js",1520033487.0
andynocandy,"My mind immediately went to building a regex pattern, replacing * with .*? (or something similar - on mobile so can't test) and match the start/end of the glob.

How would I do if it was an actually interview? Would they prefer me to demonstrate the recursion/logic in OP's article?",1520030006.0
Elfet,No interview. Just ass ,1520050722.0
andynocandy,Hahahaha whoops. I guess I didn't get the job?,1520071767.0
chrwei,"what do you mean ""and text name""?  this sounds like an issue with how it's stored.

once you work that out, there 2 ways to display it.  

if it's small, you can use a base64 encoded URI in src like: `<img src=""data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="" alt=""Red dot"" />`

if it's large, you'll want to put a URL in src that makes a request back to a handler that pulls the image data and returns it with proper http headers.  something like `<img src=""/image/123456"">` 

the reason size matters is that the page rendering doesn't normally wait for images to downlaod, but if you use a base64 URI it will have to wait.  for things a few KB it may not matter, but for a few 2MB images, it can make a real difference.",1520014785.0
TomNa,"I stopped reading when I read the sine ""First you should have java installed"" I had to go puke",1520020856.0
maximusprime2328,The easier way to do this is to use Headless Chrome and Puppeteer. Everything you need is packaged into a single npm called Puppeteer. No external dependencies. No Java. ,1520030651.0
davidmdm,"Buffer.from('string', 'encoding')

So for example

    Buffer.from('aGVsbG8gd29ybGQ=', 'base64').toString() // returns hello world

",1520055793.0
ibigbug2,"All in one solution for nodejs web application, tens of extensions and plugins ready to use. Very enlightening architect and design, worth trying. 

And afaik, the eggjs core team is supportive and open minded, they’d always like to contribute to the community. ",1520155074.0
DarkLord7854,"`node:8` and `node:8-alpine` are different Unix build targets. Do **not** do this if you have native modules compiled, you are likely to get errors or unexpected behavior, you will need to use the same build targets.

You should also copy `package.json` (and lock/shrinkwrap file if used) separately as it preserves Docker cache layers and will skip the `npm i` step if those files changed since the last build:

    # Copy over package definition
    COPY package.json package-lock.json ./
    
    # Install dependencies, will be skipped if package.json/package-lock.json haven't been modified since last build
    RUN npm i --quiet
    
    # Copy over the rest of the application
    COPY . ./

This will significantly speed up incremental builds of application code

Similarly you should copy the `node_modules` directory separately from the built application files to share layers between multiple images/instances and save time on compilation.

The GitHub repo for the Node Docker images also maintain a very good best practices guide for security: https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md",1519995433.0
kylequest,"Another option is to use DockerSlim [0]. You can use Ubuntu or other major distros and you don't have to worry about native packages. It can shrink your node app Docker image by up to 30x. If it doesn't work for you for some reason open an issue and I'll be happy to investigate.

[0] - http://dockersl.im

P.S.
You can whitelist the tools you don't want to be removed. If you need bash, but it's no
 longer there another option is a side car container with bash (which you can attach to your target container).


",1520050039.0
OzziePeck,Vagrant people. ,1520067290.0
Felecorat,Save a session ID in a cookie. Use it to reference to a user session.,1519971751.0
boogermann,"Node has a package called [client-sessions](https://github.com/mozilla/node-client-sessions/) made by Mozilla, it’s really simple and easy to use.",1520333975.0
sheffmaster,I use a restful scheme in combo with JSON web tokens.  I think sessions seem high performance but accrue debt and scalability issues rather quickly.,1519973637.0
nothingduploading,you can do it with an ssh command.,1519970713.0
naturalethic,Yes,1519979265.0
poom0nster,That question is very vague. Maybe you have more specific questions? I'm sure some of us here are familiar with this kind of thing.,1519993509.0
max_kek,Are you retarded?,1520000960.0
yarauuta,These boys release.,1519982437.0
reddit_is_meh,"Look up child_process. It's built in node already and lets you execute commands the same way you would via cmd, offering you a callback with its success/error output If necessary.",1519957067.0
martiandreamer,"You’ll want child_process.exec, calling the python interpreter and passing the script as the argument to it. ",1519957810.0
jmoctam,Is this for free ?  at least for oss forever ?,1520237919.0
nothingduploading,wascly wabbit,1519945381.0
-victorisawesome-,Why don't you combine the commands and the node-express app into one process?,1519947937.0
marvinfuture,Why not just have one of the routes in your express app change your node environment? That way you can just hit an endpoint to change your app,1519949614.0
tknew,"You can use pmx with pm2 to interact with running app:
http://pm2.keymetrics.io/docs/usage/process-actions/",1519978242.0
SimplyBilly,"Feature flags are normally done through a user.... User comes in, fetch the feature flags, if they have the right feature flags use that feature, otherwise throw an error or use the old feature (if one exists). 

I’m not sure I understand why you are trying to enable or disable a feature at the server level (feature flags are more user level). If you had a cluster you wouldn’t want some of the servers to have a feature available and others not to have it.",1519951514.0
reddit4matt,"You could make a REPL interface and that that run with the server as well or have it bind to a socket. 

https://nodejs.org/api/repl.html#repl_starting_multiple_repl_instances_against_a_single_running_instance",1520019175.0
Dankunderscorememes,"I know this is a band-aid, but you could run a Linux VM and have a virtual interface that lets you connect to the Speech software from Windows Server to the VM",1519954651.0
DirshPlatform,Perhaps you could use the following library: https://github.com/syl22-00/pocketsphinx.js,1519990877.0
ccb621,"If you’re on DigitalOcean, you control the server. That means you can configure nginx, or your preferred web server, to use Let’s Encrypt to get SSL certificates. Search online for existing documentation and tutorials. ",1519939997.0
EyeballMond,"This tutorial is great for exactly what you're asking for.

https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04",1519952817.0
jineshshah36,Alternatives to setting it up yourself are to use Heroku which will launch https by default or using cloudlfare in front of your DigitalOcean server.,1519954163.0
binarytide,"get comfortable working with and setting up https. Everything you do moving forward should be https by default.
",1519953925.0
djslakor,"The author of both has already answered this question here: https://www.quora.com/Why-hasnt-Koa-been-as-popular-as-Express
  
>Probably mostly a documentation thing, though I think Koa’s aren’t bad at all, but I’m not aware of any Koa books etc. Other than that Koa is “superior” to Express in my opinion, having written them both haha.
>
>I suppose Koa is a bit more foreign as well, if people are familiar with the standard Node HTTP API, then Koa can be a bit of a departure.
  
My own opinion is it was simply before its time.  v1 required use of the harmony flag and co/generators and was very futuristic at the time it was released.

We use Koa V2 with async/await at work, and it's fantastic.
",1519945601.0
zayelion,"The first wave of JS books included Express. Similar reasons are why people write in callback hell.

I use restify atm.",1519932718.0
ecares,"I use hapi... for a lt of reasons...

I belive express is so popular because it is popular. Most tutorials I see are based on it. A lot of people don't even cnsider doing node without express. Trends are hard to kill.",1519931988.0
Wickity,"It was waiting for native `async`/`await`.  Now there's no reason to stay on express, and many good ones to move to koa.",1519938776.0
SepticReVo,The State of JavaScript 2017 [Survey](https://stateofjs.com/2017/back-end/worldwide/) shows some pretty interesting metrics re: Express vs. Koa in Worldwide Usage.,1519966302.0
inabahare,"Well, another problem is that, what's Koa gonna do for me? As in, what's my motivation to use it. Then there's the link you provided
 which severely lacks examples and explanations. Like this

> No callback hell.

> Better error handling through try/catch.

??

Then this

> For example, instead of a ""body parsing"" middleware, you would instead use a body parsing function.

which to me seems to be the same, except you'd have to call the function multiple places

> Less hackery.

> Better user experience.

> Proper stream handling.

And again, needs examples and explanations",1519941697.0
davidmdm,"Hey I have not yet spent any serious amount of time with Koa. I am super willing to give it a good go since the creator of express (and koa) says it is better. However, before i spend time on this... I mean... Sometimes i write two implentations of the same problem and i prefer one. But they do the exact same thing.

I don't think there is any real issue with express. Its clear how to stack middleware. routing is simple. 

Even though koa is based on newer technologies like async/await, express routes can also use async await... There is even an argument to be made that traditional callbacks are more performant than promises and promises are more performant than async/await therefore in your routing framework the fact that it uses callbacks is not a big deal. (Notice i am not saying express is faster... for all i know koa may be faster, just that callbacks aren't the worst thing ever).

I don't really know if the context api makes things better...

Can anyone who has seen real improvements in koa rather than express let me know. I am super down with Koa. Just don't know what will push me to take the plunge yet.",1519967199.0
nullified-,"I like both express and koa, and use both at work in production. 

the biggest concern ive had so far with migrating to koa completely is the ecosystem, which is a sort of chicken/egg problem. I accept responsibility for not contributing moer to the ecosystem (which i hope to do soon), but as it stands I just know the express libs i want to use, like passport, or the webpack middlewares, are being maintained.

I know thats probably true of the koa ecosystem, but i just havent had the time yet to do enough research. even figuring out the wisest router to use requires a bit of digging.",1519953469.0
,[deleted],1520002027.0
cgijoe_jhuckaby,"Apologies if I am misunderstanding your question, but are you asking how to execute other programs (namely java) from within a Node.js script?  If so, all you need is [child_process.exec()](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback).  Simple example:

    const { exec } = require('child_process');
    exec('java MYPROGRAM.JAR', (error, stdout, stderr) => {
        // see output in stdout, stderr here
    });
",1519959161.0
weeska,I like to use a combination of commander and prompt for that.,1519930234.0
Kroney502,"You have several issues in your code.

1) mogoose.connect expects a string in the connection string format (https://docs.mongodb.com/manual/reference/connection-string/). In your case that would be 'mongodb://localhost:27017/shopping'

2) Node is a asynchronous language. This means that some functions will not necessarily wait until they are finished, before the code moves on to the next function-call. This is especially true for anything to do with Filesystem IO, HTTP connections and (as in your case) database connections.
So what does this mean in your exact case:
You call mongoose.connect and your program will NOT actually wait for it to finish connecting, but just move on to the next part. When you reach the for loop, your code will probably (sometimes it might work) not have a mongoose connection yet (which will throw another error). You should read up on the async nature of Node and how to handle it. Depending on your Node-Version (go for 8+ if you can), a simple await keyword might do the trick. Still it is important to get a good understanding of the asynchronous part, because it is such a integral part of the language. 

3) Not an actual error, but if you're using a newer node version (>5), avoid using var. It is a weird, buggy thing, and should not be used anymore. Instead use let, if you want to change the value (like for done), or const if will not change (like for mongoose / Product)

Finally and most importantly Gothic IS an awesome game",1519932884.0
zayelion,"Its opinion based.

Both work. Both have their advantages so better is subjective. Having to jump around the code base to look at object structures would annoy (and does annoy) the piss out of me personally and I avoid it. I tend toward having a files that is a list of routes, and the route functionality and the functions glued to the routes in another file. Makes copying and sending a block of code that ""is the API"" pretty simple.


     function userDTO(user, postsCount){
       return {
           name: user.name,
           email: user.email,
           postsCount: postsCount
         }
     }
...

    app.get('/api/user/:id', routerFunctions.getuser);

...

    function getuser(req, res) {
      var user = getUserById(req.params.id),
        postsCount = getPostsCount(user);
      res.json(userDTO(user, postsCount)));
     }


Group your functions into files as you see fit if they are atomic and have few side effects.",1519932506.0
newreddit0r,"I use TS as well and just define interfaces for them and then either create them in place as a literal(just use dynamic power, right?) or create a separate class/module that will do the conversion if its to be used in more than one place. It does the job just fine.",1519987192.0
WeaponizedMath,I generally avoid jargon as it adds as much to code as it does conversation and use mix-ins,1519924350.0
nj47,"> This also means nobody can ever mutate your promise, so please feel free to pass it around without worrying.

This is not strictly true. I agree, feel free to pass around promises because it is super useful to do so. But if you are passing an object around, it absolutely is not immutable.

Consider:

    const foo = Promise.resolve({});

    const bar = foo.then(x => {
      x.a = 123;
    });

    Promise.all([foo, bar])
      .then(([f, b]) => {
        console.log('Foo:', f); // Foo: { a: 123 }
      });",1519920292.0
ciscocollab,How would you compare MessageBird with Twilio?,1519933904.0
fullheap,">	SMS hub in under 7 minutes

>	server less

>	Just uses a random cloud

LMAO, that's like saying ""let's program a kernel from scratch in 7 minutes!"" and then just installing Linux from source.",1519956021.0
cgijoe_jhuckaby,"This is very useful, thank you.",1519972950.0
dtaivp,If I were you I would shy away from having them save to your computer. You may want to have them save to a database. Then when they make edits to items you. Can have node open the file and edit the specified elements. ,1519908444.0
cjbprime,https://nodeschool.io,1519886115.0
GeeGeeks,I learned a lot from the udemy course by Andrew M. ,1519912773.0
bmf___,"You dont need a node.js developer but someone who will do everything. 
",1519884882.0
goodcryptoman,He's looking for a Fullstack Web Developer,1519885174.0
goodcryptoman,Is this a remote job or onsite?,1519885258.0
zayelion,Is this even the place to post this?,1519932808.0
Shaper_pmp,"What's the context of your question - what do you mean by ""client"" in this question?

Are you running a CLI app locally and trying to get the Windows username of the person running the script, or using node as a web server and trying to get the windows username of the person requesting a web-page from your server?",1519865181.0
tswaters,"This mechanism of logging in to an http resource using windows credentials is called ntlm authentication.  To get it to work without a user entering something is called `ntlm passthrough`.

A few things to note:

- ntlm passthrough is only supported by default in iexplore and possibly edge (it's been a while since I've tried it - most apps I build these days have a login form where credentials are collected and verified by the server against an ldap connection)

- you can enable ntlm passthrough in firefox and chrome, but it requires clients to configure their browsers to do so.  A quick google reveals this is quite simple for firefox (about:config setting), and convoluted for chrome (command line start args, registry settings): https://specopssoft.com/blog/configuring-chrome-and-firefox-for-windows-integrated-authentication/

- if you don't have ntlm passthrough, the user is prompted for credentials -- assuming they provide valid login details, and your server has a connection to the domain controller -- you will get back information about the user, such as their login name, display name, email, etc.

Either way, your server needs to implement ntlm authentication.  There's a few ways to do this, but using express this seems the most succinct: https://www.npmjs.com/package/express-ntlm",1519869911.0
altintx,Auth type of NTLM is what you're looking for.,1519865692.0
rndsqrd,NTLM & Kerberos can be a pain in the ass to deal with. Your better of using or setting up Active Directory.. that’s my personal experience.,1520087449.0
sznowicki,"I should write RTFM but I try to be polite. 

-g means it will be installed or updated globally on the system. Normally you don’t want it. Normally you install the package in the app that requires it. 

Except some tools which you want to use globally. For example some install mocha globally. Which is btw not always a good practice. 

And seriously. Check the manual. Read it. ",1519857482.0
Kortalh,"Trello is probably the most direct solution -- it's now owned by Atlassian, so it has plenty of integrations with others software, which can be handy. You can also share a board with others if you're collaborating. I have a board shared with my wife for a remodeling project, for example. It's not as robust as Jira, but it has pretty much all of the same major features -- and it's free.

Also, I know you asked about Jira *alternatives*, but if you have a low-usage computer available, you might consider a self-hosted Jira instead. Instead of the $10/month fee to have *them* host it, it's only $10/year if you host it yourself (and technically, if you don't care about maintenance, you don't have to pay the yearly fee either).",1519870574.0
SomeRandomBuddy,"GitLab issues are great and totally free, and include burn down boards. Unlimited projects/private repos. Great label/milestone/estimate fields and suave responsive UI. You can create private projects without needing to create/init a corresponding repo. If you really want to be creative you can write an app to read/write issues from the GitLab API and consume them however you require. 

And if you _do_ use them for programming projects, issue repo integration and free CI runs are quite useful

Edit: issue > repo",1519865200.0
XPTranquility,Check out Airtable.,1519855680.0
theguysperry,I use Jira for work and Todoist for life.,1519860013.0
jP_,Trello or GitHub Project ,1519885259.0
merkur,Taiga is the most direct equivalent of JIRA I can think about in the open source world. ,1519884994.0
jwindhall,Asana. JIRA drives me crazy. ,1519870892.0
ercpck,Asana. Phabricator. ,1519872371.0
assoteric,trello?,1519872748.0
cinnapear,Trello,1519873210.0
postmodest,Redmine does a lot of what JIRA does....,1519876448.0
Bontacha,"I use youtrack on my own server. it's limited to 10 free user but I don't care since I'm the only one using it.

Edit: I think you should be able to do everything you want to do with youtrack. you can try it for free without installing it. just Google ""intellij youtrack"" and create a free 30 day instance. ",1519883360.0
poppahorse,"/u/mrcelophane we built https://www.scrumi.io as a lighter alternative to Jira. As the name suggests it's geared up around the scrum framework, but we'd love to get your feedback! Currently in beta, but rolling out new features and tweaks all the time :)",1519891768.0
Cwigginton,"get the on prem version of Jira, $10 one time for up to 10 users.  That should fit your “personal” bit.",1519875228.0
bradrlaw,"Try visual studio online.  Free for your needs and includes everything you are asking for and more.

Disclaimer: Work at MS, but have used VSO/VSTS before I started for my own personal and business use.",1519880526.0
0x446576656C6F706572,Freedcamp hands down,1519866623.0
jwindhall,I do too. It’s fine and robust but damn does it get on its own way. ,1519880840.0
,[deleted],1519884589.0
modes22,Check out nextcloud. Not totally the same but open source and has task and deck apps built in. ,1519889809.0
brylie,"[Taiga.io](https://taiga.io/) - Free. Open Source. Simple to use.

Taiga is a project management platform for agile developers & designers and project managers who want a beautiful tool that makes work truly enjoyable.",1519891178.0
,"I own starter licenses for Jira. Which gives you the full product but only costs £10. 

I hate Jira with a passion though. It's abused and its design encourages that abuse. Trello seems nice. Try and figure out why you want to extend these practices into your personal life. What problems are you solving? What is the cost and value of doing this and do they result in a net gain of some sort?

I use Google Keep. It barely does anything, just allows you to create lists or notes and that is all I need to manage my life outside of projects. ",1519891492.0
Thommasc,Asana is great. They have plugin to track time.,1519905857.0
jiteshdugar,"Codegiant (https://codegiant.io) is a great alternative

Here's why -

1. Great UI/UX
2. Free to use for upto 5 users
3. Support for unlimited Git repositories for free
4. Documentation
5. Support for Continuous Integrations
6. Wonderful customer support

Was featured on ProductHunt recently with great feedback - https://www.producthunt.com/posts/codegiant-2",1525489072.0
tkovalsky,definitely check out [taiga.io](https://taiga.io),1526317085.0
TabSadi,"Try Yodiz, there is a good comparison to know an overall feature set vs Jira. https://www.yodiz.com/blog/yodiz-vs-jira/",1526380012.0
mrcpu,I like trello myself!,1532009340.0
markyonolan,Even codegiant is worth a try. It's a Trending alternative to Jira. ,1533004900.0
to-too-two,"This is a good course, but this is getting spammed here almost daily now. Hopefully the mods can start banning these users and posts. ",1519847023.0
iWantedMVMOT,"Nice post, relying on incrementing an integer in a non-time deterministic system is not a good pattern... I would hash the long url and use that as the id in your table instead.

That way if you have multiple API servers running there is no race condition.

Furthermore you could hash it with the user id also to avoid collisions",1519873526.0
SomeRandomBuddy,Awesome high-level breakdown of CQRS and how it functions with event sourcing. Would love to see some more concrete application examples. I know that banking and trading systems require this type of architecture but author implies that CQRS is good for scalability purposes alone. Seems tough to justify without showcasing concrete use cases. ,1519841574.0
reallyliketofish,/r/typescript ,1519831532.0
SomeRandomBuddy,Nah fam,1519830260.0
WeaponizedMath,Typescript is a crutch,1519840570.0
kefirchik,"I like the concept. Can you talk a bit about how it differs from something like Serverless? It seems like it's more general purpose than Serverless but shares some of the same objectives. 

Also I noticed you're tracking deps similarly to npm. Are you producing a lockfile, to help prevent subtle bugs caused by minor version mismatches across different environments? ",1519846885.0
mvila,"Sorry for this new post, I screwed up the title of the previous one. Note to the mods: this is not a spam. After one year of hard work, I am releasing the first public version of an open source project. And although the tool is designed to be language agnostic, the first supported language is JavaScript.",1519827460.0
flipperdeflip,"> When you use a tool for the first time, the resource runtime installs it for you, and if there are updates in the future, they are installed automatically.

What does this do for versioning of resources?

",1519895777.0
Fullstack_Questions,"Hello


Kyle Simpson’s “You dont know JS” series are free to read on his GitHub, and one book is dedicated to Async. There are diagrams and graphs dedicated to explaining the event loop and how async works in JS. 

https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/README.md",1519813065.0
CMJunior,"[This talk by Philip Roberts](https://www.youtube.com/watch?v=8aGhZQkoFbQ) did it for me. 

Also, I would avoid getting into specific libraries for async handling. Try getting to know Promises first. As someone else already said, the You Don't Know JS series has a specific book on this.",1519820102.0
sheffmaster,"https://youtu.be/A_v3Us8M5mk

I explain it when making a HapiJS handler.  I even cover the use case of letting two promises resolve at the same time and then accessing their return values.",1519830907.0
mclovin4009,"Also, If anyone can tell me some good projects to make in NodeJS, so as to clear my concepts and doubts on the sync/async parts on node, It'd be great!

Thanks!",1519886474.0
martymav,"In the route for the page you want to be users only, put an authenticate method before the function. Then handle what happens if user is or is not authenticated. Something like this:

app.get(""/usersonly"", user.Authenticated(), function (req, res) {
successredirect(""/usersonly"");
failredirect(""/login"");
});

I have only used passport js with mongoose though.",1519786076.0
DamnItDev,"First, I recommend using [express](https://www.npmjs.com/package/express).

For handling your login and registration, [passport](https://www.npmjs.com/package/passport) does a good job. One of the main features is adding `user` to the req object (eg, req.user.name) so all of your routes have access to the current user's basic info.

To grant/restrict access to users, consider using [permission](https://www.npmjs.com/package/permission). Once set up, all that needs to be done is add the permissions middleware to the route.

> app.post(""/foo/bar"", permissions(['Admin']), foo.bar)

The above line would restrict access to /foo/bar unless the user's access level is 'Admin'.",1519838684.0
stackTrace31,"It looks like you’re performing a POST with your form, but you’ve only told express how to handle a GET, with your *app.get(...)* definition. Tell express what to do when receiving a POST request (*app.post(...)*) instead of a GET, or change your form to perform a GET instead of POST (method=“GET”) and you should see your console.log printed.",1519771961.0
boxxa,Change your form action to http://localhost:3001/post,1519768574.0
Selbahc,"I think it’s almost correct. If you want to post your form at http://localhost:3001/ you have to get a route ready to handle that post at “/“
And you don’t want to get something, but to post something. 
So in node it should be something like this :
app.post(""/"", (req, res) => { console.log(req, res) })",1519771699.0
,"You first need to define a get route for your HTML page, and you can use the same port 3000 for POST and GET requests. Your action for the form only needs to be “/post” also, and change your app.get to app.post.",1519779014.0
pxt3r,"As the other mentioned you're routing is a bit incorrect, also highly advice using libraries like body-parser for anything in regards to forms.",1520305843.0
Dagostal,"change method to ""GET""",1519795861.0
voidvector,"You can scaffold your own MVC pretty easily with Express. Just write a Express router that offload logic to your own Controller module/class. 

MVC is a pretty abstract concept, most MVC frameworks are just opinionated library made by someone based on those concepts. In fact, even Redux has all the MVC equivalents.",1519751279.0
wrobbinz,"Every time this question gets asked, it's always filled with ""don't use one"" and ""build your own"" which was always frustrating for me given that I WANTED an opinionated framework so I could see how concerns should be separated. The reality is that you can avoid a LOT of wheel reinvention by using a framework, and most importantly for me, it's been a great learning experience to use one.

An *actual* answer to your question is: AdonisJS

I've checked out feathers and sails, and adonis just made the most sense to me. It feels very modern, the generator spits out code similar to my ESLint config, things like validation, authorization were all easy to set up, the developers are active. One caveat is that the developer is currently working on websocket support (should be done within the month though).",1519760746.0
ChiefDetektor,"Well you could consider creating a back-end in express und then code the front-end in react. That would be a more modern approach.
Also MVC is not necessarily a good approach to use. Redux' dataflow is more strait forward since it goes only in one circle instead of 2 in MVCs.
But feel free to whatever you want to use! Have fun!
And don't use DotNet! :D",1519812226.0
__radmen,"Ones that I used:

* feathersjs - pretty simple, yet gets complicated if one tries to overuse hooks
* Adonis - I've created and deployed few apps based on Adonis; currently it's the best Node framework I've used

Things used in my company:

* loopback - big, complicated, causes lots of problems

Things I'd like to check in future:

* Nest.js - based on Typescript, looks quite promising
* Strapi (v4; currently in alpha) - provides clean API, admin panel, and plugin system. I'm really excited about this one, yet right now it's very unstable (couldn't even go through installation process without problems)",1519813685.0
burtgummer45,"node suffers from minimalist-framework-itis

golang has the same problem, and if you complain you get treated like an idiot.

My far out theory is that golang and node suffer from a lack of leadership or desire for leadership.  There's a huge amount of duplication of effort, everybody is off doing yet-another-version-of-something.  On the other hand, ruby and elixir have coalesced around rails and phoenix because I think there is stronger leadership there.

The closest thing you'll find to rails in the node world is sails.js, but just google the hate for sails.js.  Next there are frameworks like hapi.js, but at this tier there is no baked in ORM, and when you bring in your own ORM or use SQL, a lot of functionality goes out the window.

If I had to build a large MVC website, with templates, ORM, etc, I would stay the hell away from node and use something like rails or phoenix.  But if it was just an API, I'd be fine with node, since there's no view to struggle with.

This is just my opinion, but its probably controversial and therefore will get downvoted by an angry mob.",1519783204.0
ceestand,"I have done two sites with Sails.js and I really like it, but it does obscure some lower-level workings of Node and Express, so I'd not recommend using it (or any framework) until you have a good understanding of what's going on.",1519759383.0
zenodub,I have used sailsjs in prod several times and love it.,1519768960.0
sirluiss,Just use Adonis. IMHO the best mvc fw for node. Let's support the author.,1519784576.0
Louistiti,"Sails.js made the job for me when I needed to build several micro services. This is built on the top of Express.

Otherwise I would go for Express itself when I don't need model, or such big features.

AdonisJs seems to be also good. ",1519803315.0
Fullstack_Questions,"I will suggest a MC to you. 

FeathersJS.

It connects database, auth, CRUD endpoints under the hood so you just have to build your Frontend. You can just make a VUE/REACT app and serve it. 

It takes about 30 minutes to get a fully authenticated real-time/REST API with multiple models running on any database you want using any ORM you want, with any auth method you want. You don’t write the code, only the schematic, and optional hooks. ",1519808940.0
intoxicated_penguin,"Depends what you're developing imo. React, Vue, Angular are all powerful frameworks but can be a pain. So depends on what I work on as to wether or not I use one, but when I do, I generally use React.",1519747990.0
SkaterDad,"I saw on Twitter yesterday that `hapi-auth-jwt2` is updated for Hapi v17 now.  Had you looked into using it, or did you land on the bearer token library for other reasons?",1519826883.0
50653,"Some thoughts...

> The basic purpose of Promises is to represent a value that will be eventually available. 

I think the real goal of Promises is to make it **easy** to read and write code for common async patterns. Promises definitely weren't designed to handle every use case around async operations. There's cases (like streams) that they definitely don't replace.

> Eager, not lazy

I think Promises picked the right default by going with eager, since that style is easier to understand. Lazy can lead to some really confusing situations about performance (""why doesn't this thing do the ajax call until after I call render()??"") or debugging (""this thing is throwing errors, but I can't tell what's causing the error, because the error isn't reported until so much later""). But anyway, Promises aren't one-size-fits-all. If you really want a lazy API then don't use em.

> No cancellation

This is a decent point, it would probably be good if Promises understood cancellation.

> Never synchronous

This is called [releasing Zalgo](https://medium.com/@bluepnume/intentionally-unleashing-zalgo-with-promises-ab3f63ead2fd) . It would be a huge source of bugs.

> but Promises make this effect worse by forcing sync code to become async. 

I'm not sure how. If the operation will always be sync, then don't use a Promise. If the operation could *ever* be async, then all the surrounding code needs to support the async case.

> then() is a mix of map() and flatMap()

There's definitely an opinion inside Promises, which is that you'll never care about the difference between `Promise<T>` and `Promise<Promise<T>>` . Yes it's an assumption and maybe this assumption is occasionally wrong. But the alternatives to this are way more annoying to use, and more newbie-unfriendly. So in terms of making async code easier, they picked the right default.",1519751815.0
dabby,"I've almost completely switched over to using observables because of the huge amount of functionality you get out of the box and how useful lazy evaluation is in regards to partial application.

Promises are good for quick tasks which don't affect architecture but i much prefer to structure an observable flow instead. My stack  is usually react with rxjs, using a wrapped fetch.",1519728927.0
rerecurse,"If you need to cancel a promise you call the reject() function. If you think you need to cancel a promise from somewhere where you don't have access to the reject function, you probably haven't thought through the cleanup you need to do on cancellation.",1519762385.0
MrStLouis,Does node not already move async into another thread? ,1519805448.0
Felecorat,Not P2P but maybe mqtt (mosquitto) is a valid option for your use case. ,1519737178.0
sv-2,"Take a look at this module: https://github.com/slanatech/swagger-stats
",1519708355.0
confuserr,"If you just want something basic, native/vanilla console.time and console.timeEnd might suffice https://developer.mozilla.org/en-US/docs/Web/API/console#Timers",1519732292.0
sheshbabu,"If you're measuring a random method, you can use `process.hrtime()`. I've written about using that api in measuring route handler perf in this post - http://www.sheshbabu.com/posts/measuring-response-times-of-express-route-handlers/

",1519736621.0
Voidsheep,"Hey, you've tested it *and* you are ready to hotfix stuff? Sounds like it'll go better than 95% of production deployments.

Surprisingly large systems are deployed on Friday with ""seemed to work for me"" -style testing, before everyone heads out for beers. You'll be fine.",1519714569.0
TastyAnimal,"I found out mine goes live mid March last night (I was told April previously). So I’m with you on the shitting bricks thing.  But I’ve done this for quite a while, so I’m used to shitting bricks.  ",1519704662.0
,Tell us more about your stack maybe? ,1519698548.0
HeyGuysImMichael,"Since you left it up to me to pick your emotion, I'm gonna say you're horny.",1519703887.0
joeba_the_hutt,"The first thing I do when pushing code these days is just watch Kibana for the errors to come in. I’ve just given in to the fact that no matter how prepared I am and how much I’ve checked the code, someone will find a way to break it in the wild. ",1519714986.0
,"Been in the same boat only with a whole SaaS platform. 1million+ users that now receives around 1billion hits a month. I felt the same :) Two issues that caught me specifically with Node would be.

* Running out of file descriptors (you can increase the default limit). This is because node doesn't throttle async file handling and just results in errors.
* Logs being out of order (attach an ID at the start of each async flow and you can grep them back in order - although don't go overboard).

Probably some more. But I can't remember them right now :p Think yourself lucky you haven't entered into sharding territory. 

Good luck. Fingers crossed :)",1519736273.0
Mingli91,"> Any other **seniors** remember that feeling?

Genuinely asking, why senior? Everywhere I've worked even the interns get to push to production and it would be used by millions.

Can totally relate though, been years since I left university and started my career but I still shit myself every time I put something live",1519726490.0
purpledollar,God that sounds pretty scary. Good luck.,1519706326.0
null-undefined,"Expect the worst, prepare for the best :) make sure you have plenty of logging, and keep an eye on things. The first major deploy can be pretty scary, but if you're flexible, you can keep things going. Worst comes to worst, roll it back and take another week. The business would rather wait for a new feature than have major downtime",1519736263.0
LivingAnywhere,"I remember the times when i had to sleep under the servers at night because russia was sending some traffic and ssh wouldnt respond
",1519770061.0
martiandreamer,"We have one coming up Real Soon Now. I feel you, bro. ",1519711463.0
fullheap,Tell us more about your ducks maybe?,1519730680.0
Nexum666,How did it go?! :),1519740675.0
,[deleted],1519754999.0
vshjxyz,"Feature/unit test coverage, QA team, and you'll never have that feeling again ;)",1519813890.0
-thedunkzone-,This was me at the start of January. We had several Node microservices and a few .NET services that all launched at the same time to around that many users and it was my first project I had a huge voice in from the start instead of coming in to something already in production. It was so stressful but as long as you have good support from everyone involved and are prepared it'll end up okay.,1519833290.0
texasbruce,i feel this post should be in /r/programmingcirclejerk,1519702071.0
SomeRandomBuddy,"Your ELK stack ready too? And any google stackdriver-like dashboards (NewRelic/DataDog) for resource consumption analytics?

Just curious, how will you scale this service in production?

Good luck!",1519697629.0
0xFF810000,Is there anything similar like this for EOS and Scatter yet?,1530254526.0
kapv89,"From the homepage: *""Propel runs both in the browser and natively from Node. In both environments Propel is able to use GPU hardware for computations. In the browser it utilizes WebGL through deeplearn.js and on Node it uses TensorFlow's C API.""* ... can't wait for this project to reach critical mass.",1519649627.0
,[removed],1519661937.0
FlyingCricket,"It binds directly to the TensorFlow C API, if you run it in NodeJS, which is awesome. I get tired of having to setup a python env anytime I want to play around with ML.
",1519763677.0
br0ast,Cool. I've been using convnetjs. Also a very nice library,1519669425.0
automathematics,502 error,1519661268.0
VIONYT,You could use the youtube api to search for the song and then fetch the link,1519640657.0
VIONYT,I don't know try to google it.,1519665711.0
martiandreamer,"If you’re not going to load-balance, then what about building content into one directory, then swapping symlinks once you’re done?

E.g.

Build dirs in: 
/opt/app/build-2018-02-01-01-01
/opt/app/build-2018-02-02-01-01
...etc

Symlink from:
/var/www -> /opt/app/build-2018-02-01-01-01

Only ever expose /var/www to the world, and swap symlinks as one of the last steps in your build process. 

If you have a particular need you could even swap symlinks into a fancy “down for maintenance” set of static files for exactly that purpose, then restore them once your maintenance window completes. ",1519645378.0
poom0nster,"Are you doing this on your actual production server? That's pretty bad, you shouldn't even have git on your server.
You should do your ""npm run build"" on your CI/CD server, then copy the built webpack over to your server via ssh, and call pm2 restart after. This way you will have zero downtime deployment.

As for which one to use, it doesn't really matter in your use case, since it's so simple. Right now I'm using Gitlab CI and it's great. I've also tried Strider and Jenkins. I can't really recommend Strider, it's just too buggy overall.",1519626681.0
danielstaleiny,"How many instances of your app are you running ? Also it should instal, build and then restart. Always roll at least 2 instances of each service for availability. ",1519634596.0
cahva,"Since you are using pm2, you have possibility to use the deploy feature:
http://pm2.keymetrics.io/docs/usage/deployment/

I have not used it myself in production but it’s basic ssh stuff that you can use to run build and other scripts when deploying.

If you want a real CI/CD, I can recommend CircleCI. It’s free and easy to use.",1519671045.0
kxerr,"Give Codeship a go, you'll get a free T-Shirt..",1519782863.0
,[deleted],1519755427.0
BlendedDime,Isn’t node.js a poor choice for running ML since it’s generally CPU intensive and node is a single threaded application. ,1519597457.0
SODOMIZE_ME_CAPN,This is awesome! Thanks for making this. ,1519618645.0
i_spot_ads,Why? This isn't a good choice of platform for machine learning,1519627391.0
ksami,Thanks for making this! It's really useful for a beginner without having to learn another language and its ecosystem too,1519690913.0
from-nibly,You can execute any js file just by calling require('file'). You can get the home directory by looking at the home environment variable. process.env['HOME']. I would suggest the config file go in ~/.config/app_name/app_cfg.js or at least something other than the root of the home directory. ,1519605855.0
dvlsg,Have their instantiate your module by passing a config object in.,1519596834.0
fullheap,"Interesting idea, but I don't like it since it requires not writing real JS. If these trends continue, we'll write WebpackScript since our code won't be able to work without it anymore.",1519587618.0
,[deleted],1519630430.0
theigor,"Private or not git repo has no bearing on this. When you're using something that needs to be compiled or transpiled, you typically have a directory for your source and one for your output. These are usually, but not always, called ./src and ./dist. Now, if you're working with a system that understands this, then you _would not_ check in your dist directory because it will get generated fresh by whatever is doing the deployment. This is best practice. But if you work with a system that _doesn't_ know what to do with, say, typescript, then you have to transpile locally and have ./dist in your repo so your deployment is pointed to it. ",1519575071.0
xwnatnai,"You’re probably using a shell script to deploy your app as it stands, so you can just use the same script to compile your files and node start that instead.",1519557929.0
andrew4d3," It works but it goes against the REST conventions.
",1519559182.0
papertowelroll17,"IMO you should use the http verbs.

Does your front end use webpack / Babel? If you don't like promises, perhaps look at async/await. I think the try/catch pattern with await is usually a bit nicer to look at.

Other than that, don't be afraid to extract methods.. That's probably the solution to make your code more readable.",1519575725.0
sikian,"From the point of view of devops, monitoring an application that only returns 200s is a nightmare, as it's really difficult to know when there's any issues. ",1519661654.0
veswill3,"It is fine in the sense that it will work if you setup your client to respond appropriately, but the error codes are a bit more semantic and part of REST convention.

Another analogy: could you do absolutely all server communication with GET requests, even form submission type stuff? Yes, but should you?

Edit: about dealing with catch - I often create my own helper over `fetch` that `catch`es and then `resolve`s how I want to handle it. In my case I usually resolve an object like `{ status, errorMessage }` or something similar. Instead of having to chain a `catch` it looks for the `errorMessage` property. Totally depends on my use case though.",1519570295.0
SwiftOneSpeaks,"Mostly ""bad"" in the sense of conveying information.  I have one personal exception I can think of:

404: I like to use 404 only for bad endpoint patterns, not to indicate an empty response.  Partially to avoid giving browsers an ""error"" for what might be a perfectly expected, non-error answer, but mostly because I otherwise have more work to distinguish bad endpoints.

400/401/403: I always try to use these in a restful way.  Even if the browser reports an error...these are errors.",1519584085.0
ncgreco1440,"Not only does it go against REST conventions, it's going to make things way more confusing for you later on when working on the consumer of your API. ",1519595904.0
Djbm,"The issues with always returning 200 will become apparent in an application that you need to deploy at scale.

When you are running in a development environment, your client usually connects directly to your server - simple.

In production, there are often load balancers, proxies and gateways to deal with, and it can be super valuable for these layers to get some basic information about the status of the requests without needing application specific knowledge.

If everything is just “200”, no other layer in your stack can do much without deep Inspection of the payloads.

So for logging and networking purposes, proper status codes are important.",1519603793.0
Mingli91,"You could wrap the request in a promise and resolve the value you want, then pass it to the response

    const doSomething = () => new Promise((resolve, reject) => {
        request(options, (err, res) => {
            if (err) return reject(err)
            resolve(res.someValue)
        })
    })

    const someController = async (req, res) => {
        const someValue = await doSomething()
        res(someValue)
    }",1519549770.0
madj42,Thank you both for the suggestions. Very helpful. ,1519683734.0
cooliobing,"> In the Node.js environment without threads, more and more applications choose to use Cluster mode to run multiple processes, which max the CPU performance. However, complicated process models and IPC could be difficult to manage. People may also encounter framework selection dilemma. I just want to get a burger, but give me a set meal.

This is neat. AFAICT, `pandora` facilitates spawning, managing, monitoring a set of node instances while still allowing them to communicate via an IPC hub. If you need a cluster based (ScalableMaster) master/worker, that's possible too.

If you're using docker, an alternative is to run an nginx container, multiple node containers, and a redis container for IPC between them, and use one of the many [APM solutions](https://github.com/slanatech/swagger-stats) for app monitoring.",1519589944.0
psayre23,"Holy shit, this looks awesome. I can’t find a working example anywhere. Has anyone found any code besides the get started docs?",1519537469.0
ddwrt1234,"Hoo boy, this looks pretty nice over pm2. Is it worth going through the Google translated Chinese docs?",1519582024.0
ulstudent,We use a tool called Flyway to manage database migrations. It's written in Java but it works quite well across multiple platforms. ,1519553836.0
,[deleted],1519536548.0
theodore_q,"i too would like to know what other people use.
for versioning and as part of my workflow i use: apgdiff on dumpfiles to monitor the difference between staging, sandbox and prod. although the process can feel a bit convoluted and i always feel the need to check through the code everytime.
however it does help keep track of veiws and functions ect. ",1519553865.0
tkdmatze,Liquibase us our swiss army knife for that,1519557221.0
cyanydeez,"Play around with this script:

https://gist.github.com/anonymous/cf3f72eca9e1358be371ded1d3305e47

It hotreloads SQL files in postgres

It'll show you how to create self contained schema files.",1519573267.0
prozacgod,"I think the only down side there is state maintenance and dependencies (what tables do the functions need, and what tables do they affect).

I use K'nex  A LOT - I love it.

But OP just to re-state your problem in more terms, this is how I see it.

----
Day #1 - Cool we have a database!

* create customer table script
* create invoices table script
* create users table script

----
Day #2 - We need an audit log

* create audit table
* add trigger to invoices, updates audit table.

----
A bunch more stuff happens....
----

Day #16 - We needed to refactor invoices to maintain historical data, invoice trigger needs to be updated to reflect these changes to the audit log

* make changes to invoice table
* update trigger
* update audit table
* commit all changes.

----

The way I see it, the original Audit function/trigger is no longer compatible with the database and ... well of course you drop it.
And then you stuff in the new one. The new one isn't compatible with the old database.

You may need to copy and paste, it may feel dirty in some way, but... the migrations are supposed to maintain the ""most consistent vision"" of your database in it ""most pristine form""

Lets not forget, your git repo, and your other developers.  They may be on a branch that starts on day #14, and will need to merge their changes into your new code.  Well how do they even know that A.) They should integrated a new trigger B.) Where this custom solution is.  C.) What happens when they run this custom solution prematurely and they loose their current working function/view/trigger?

Changes to functions/trigger/views, it seems to me, should be in their own migration. They are just as dependent on their current environment as any other table with a foreign key.

Unless I'm misunderstanding you somehow.

EDIT: It occurred to me you may be talking about development time/moments etc... like you don't want to put these functions into a migration file during development because it cumbersome to deal with.  IS that the question?  Because that does make sense.  Everything's in flux during development, manage/create/edit to your hearts desires.  But put it in a migration when you're done, test it.... roll it back... verify... and commit.",1519573737.0
mgutz,"Most migrations handle sprocs through migrations which is just wrong to me. Migrations should be for data and structural changes to schema. In our mgiration tool, we treat sprocs, triggers as code. Sprocs reside outside of migrations. On a deployment, a hash is performed on each sproc and if it changes we upsert it. The advantage is you can use git to see history, diff, etc on any sproc.

You can `npm install -g mgutz/mygrate#matcherino` which is battle tested against postgres.",1519765801.0
Drunken__Master,"Have you learned about using React for server side rendering, why and when you would want to do so ?

*Edit I guess I didn't really answer your question, for that you could check out the Node Projects from Free Code Camp, especially the microservice projects, because it gets you using Node for things other than CRUD apps .

Also for a minimalist wordpress-alike blog platform that renders markdown, you might want to check out Gatsby, either to use it for blogging or to see examples of how other people approached the idea if you did decide to a similar project (since it's FOSS on Github) .",1519514158.0
SomeRandomBuddy,"Forget all of the other hipster suggestions. 

To learn node you must understand asynchrony and concurrency. And callbacks (at first). 

Start by building a web crawler (sends HTTP GET request to a URL specified at runtime n number of times)

First version: sends one request at a time

Second version: sends all requests in parallel

Third version: sends requests in parallel but only allows x requests to be active at once

Do **not** use async.js in your implementation. By the third version you’ll be feeling pretty comfortable with the runtime and then can work on wordpress clones and whatever else",1519528103.0
martiandreamer,"Build a minimalist wordpress-alike blog platform that renders markdown. Pages, posts, tags and navigation. ",1519514065.0
ConstVoidBlog,"I see two diff questions...#1: practice projects? #2:  future job skillz to pay billz?

practice projects: for me, i like to tackle small problems that seem like they would be fun for me to solve.  fun--that way I'm motivated to continually pick at it; small--I'll actually get around to solving, and if it really works, I'll even use it.   

I think this is more important than 'job worthy' because a) you will be motivated to develop, and b) you'll be thinking of how to solve the problem, which is more important than knowing node (imo).   You don't have to share your code or your problem with the world, it can even be something you keep to yourself...that is fine!  You will still learn a lot from it.

2: buzzword bingo! secure compute @ scale w/github + AWS DevSecOps cb/i/d automation, serverless c/o lambda + kubernetes, dynamodb data stores, w/cloudwatch monitoring + automated event source handling to keep everything under wraps.   Writing code is just half the battle these days.
 ",1519593294.0
abby_cohen_221,I followed a lot of the tutorials from here: https://www.turbo360.co/tutorials. Those mostly Node JS based project so Javascript was heavily emphasized.,1521102961.0
kyle787,How are you ensuring there are no memory leaks? It kind of sounds like a listener isn’t being detached somewhere. ,1519741452.0
TwoMovies,'perMessageDeflate': false  - solved my problem,1520182728.0
shredgnarrr,I get the shutdown aspect when it comes to flushing out requests and such. How is the health check component different than AWS calling a health check route?,1519498307.0
dk01,Now we need yarn workspaces. The monorepo struggle is real.,1519493623.0
HelleFL,"“ & ExpressJS”

Don’t forget that ",1519450966.0
goriunovd,"That is really interesting article, i know that socket io is not really easy to scale across cpu cores and it is slower then uws.  Why dont you use some kinda libraries which are for scaling websocket such as:

https://github.com/ClusterWS/ClusterWS",1519429582.0
cspotcode,"Are you sure?  If you add `cat build.js` to your script, does it show what you'd expect?",1519418717.0
PleaseTheWalrus,Ok thanks!,1519420255.0
p3t1tch3v4lr0ux,# is missing in your shebang ,1519424238.0
BeLikeElon,Bust out of curiousity im wondering why you just don’t make those three «files» functions and run them all in one single node instance? ,1519431305.0
RushPL,Streams are very powerful but for 99% of things you don't need the power and easier to use constructs win.,1519406236.0
Ginden,I suppose streams will become more popular when asynchronous iteration will be introduced in LTS. https://github.com/tc39/proposal-async-iteration,1519404945.0
adumidea,"Personally I usually wrap my streams in promises anyway. Example:

    const streamData = (destination) => new Promise((resolve, reject) => {
      openSomeReadableStream()
        .on('end', resolve)
        .on('error', reject)
        .pipe(destination);
    });
    try {
       await thisPromiseMightReject();
       await streamData(process.stdout);
       console.log('now you can easily do stuff after streaming is done!');
       thisFunctionMightThrow();
    } catch (error) {
       console.log('and handle all your errors in one place!');
    }
That way I get the benefits of async/await in terms of callbacks and error bubbling, but the advantages of streams for I/O. 

TLDR; it's hardly an either-or. Async/await/Promises serve a very different purpose (program control flow) than streams (streaming I/O).",1519424856.0
fatty1380,"This is a great point you make. About 5 (?) years ago when I first seriously started looking into node, streams was a major selling point. Honestly, I never really felt the need to dig into them - as most of my use cases were centered around basic web request/response processing with express. I’m using feathersjs now, which offers hooks, which have been described as “a poor man’s streams” ([proposal to add stream support for feathers](https://github.com/feathersjs/feathers/issues/609))

IMO, much of the node community is using it for pretty basic use cases that don’t necessitate streams. Promises + async/await offer a much simpler approach that meets the needs of most users. 

Thoughts?",1519403606.0
Mingli91,Streams are great. We use them to run complex tasks in parallel with Highland. Not preferable everywhere though. Why add complexity where it's not necessary?,1519419961.0
js_developer,I use streams via RxJS. They're very useful for handling external data.,1519409751.0
felipesabino,"Last year's freeCodeCamp put up a very nice and complete guide on node streams [1] which I personally benefited from while having to recap this _lost knowledge_ in order to handle very large CSV files that needed tp be downloaded, validated and parsed on the fly for a client's project.

I confess that I benefited a lot from tableschema [2] and csv-parse [3] projects to accomplish that but had to dive down to streams due to some nasty details like having to create a stream transform as the CSV files were using UTF-16 instead of UTF-8 and other project specific aspects.

Anyway, streams are pretty handy to handle large amount of data with a relatively small memory footprint so it is definitely something developers should be aware of.

[1] https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93

[2] https://github.com/frictionlessdata/tableschema-js

[3] http://csv.adaltas.com/parse/",1519484036.0
JaegerBurn,Some performance tests would make a nice comparison. ,1519419562.0
godlychaos,"It has been a while since I read about Chakra core, but one thing they had/have that looked cool was backwards debugging. You could use the debugger and step backwards in time. ",1519395876.0
oorza,"ChakraCore is the engine that Edge uses.  Code that behaves one way in Edge and a different way in Chrome will behave the Edge way on ChakraCore and the Chrome way on v8.  For the vast, vast majority of code in the wild, it won't matter.  If V8 (in Node) is ahead (or behind) of ChrakaCore (in Node) in feature implementation, that would matter too.  If Node had a legit specification and TCK like a grown up programming language, you'd be able to run the TCK and see where (if anywhere), Chakra fell behind, but well, we're in a playground; so, in the lack of ""defined behavior"" v8's behavior becomes the definition, so long story short, wherever Chakra and v8 diverge in behavior there will be implications for Node programs.  Otherwise, they're both (mostly compliant) JS engines that do (mostly) the same thing, so in theory it should be no different than using OpenJDK vs. Zulu vs. HotSpot, but without a TCK, you're taking an awful big leap of faith.",1519426061.0
djslakor,I strongly doubt there will be any reasonable adoption worth it for the project to continue long term.,1519397465.0
cspotcode,"Last I checked their garbage collector is designed a bit differently to minimize hiccups as much as possible, which is important for games or visualizations that must maintain a steady framerate indefinitely.

I think they're also better suited for really resource-constrained embedded environments, which IIRC is why they started the project in the first place.",1519408972.0
apatheorist,"The difference is Microsoft wrote it. Which comes with Microsoft opinions, much like Typescript.",1519395938.0
HVACcontrolsGuru,I would use docker if possible. Container would be harder to break into. Alpine flavor of Linux it will include the binary for node only. If I recall there is no terminal access with the Node only flavors. ,1519402802.0
bindik,"If they get user level access they could still modify original code, right?",1519396393.0
,"I wouldn't call this a 'framework', you've basically just implemented a wrapper around a queue? ",1519392889.0
captain_obvious_here,"After reading your system description, it seems to me that you're trying really hard to not use a message queue, when all you need is a message queue.",1519590650.0
czy88840616,great tools,1519381155.0
WongAllen,"Pandora.js is an application manager dedicated to Node.js applications. The first release is built by Taobao Midway team mostly, and involves contributors all over Alibaba group.

Thanks to the dev productivity brought by Node.js, a few lines of code can make a working web application. And Pandora.js can enable it with the operation capabilities, make it manageable, measurable, traceable and highly available.

",1519394546.0
dev2geek,"> Having a reliable workflow, from dev to ops, is key to success. Dev is essential, but Ops take over the long term responsibility for day-to-day business... We call it ops-first, means that the operation concern, which is the long term concern, should be addressed at the very beginning.

It does make sense.
",1519436516.0
franksvalli,"Thanks for the video!

Alternatively, here's a different approach you can try to generate the deck, which uses some newer JS features :)

	const numberCards = Array.from(Array(9), (_, i) => 2 + i);
	const otherCards = ['jack', 'queen', 'king', 'ace'];
	const deck = [];

	for (let suit of ['clubs', 'diamonds', 'hearts', 'spades']) {
		for (let rank of [...numberCards, ...otherCards]) {
			deck.push({
				name: `${ rank } of ${ suit }`,
				rank,
				suit
			});
		}
	}

I initially came up with a solution with reduce() to avoid the nested for loops, but I think the above ends up being simpler and easier to read.",1519370484.0
dickangstrom,"Nicely done! Also, I know your video is just for explanatory purposes, but for the record there is no such card as the '1 of spades' (or any other suit for that matter), and as a result your deck has 56 cards. Other than that this was great and very informative. Thanks for sharing!",1519360227.0
ashesnz,"Hey great tutorial. 
Just an obvious mistake that novices might be confused about.
Along with the 56 cards issue, you print out that the cards are generated when the length is 0 when in fact they are not :)",1519364784.0
dluecke,I wrote an article about basic machine learning and natural language processing in JavaScript using the HTML5 speech recognition API at https://medium.com/@daffl/natural-language-processing-and-machine-learning-in-javascript-249181a3b721,1519354227.0
tmlbl,"I don’t know of anything good. This isn’t a limitation of node.js, because it could be used to call C++ functions into ML libraries, which is essentially what python does. 

MxNet is a framework with bindings for a lot of languages, node.js included. That might be a good place to start. ",1519362969.0
TheOneRavenous,"Check out a few of these libraries. Keras.JS (browser based, but uses CPU, they're trying to add GPU support. follow their updates to see when that hits. They're attempting to accomplish GPU support, but relies on webgl drivers and headless browser etc.) 

Also Brain.js ( has, FFN, RNN and LSTM) 
Make sure you look at the correct one because there was a fork of the project once the original author said she wouldn't maintain this version. 

Brain.js has a draw back it doesn't use child process so it only uses on CPU core...(this really slows down training)

Also for additional guidance with Keras.js check out 
[https://selfdrivingcars.mit.edu/deeptraffic/](https://selfdrivingcars.mit.edu/deeptraffic/)
That has Deep Learning (similar to Google Alpha Go approach) with ability to tinker around with the formulas and look at internals of the code. ",1519401268.0
,What’s your use case? Running ML in the browser doesn’t seem like a good idea. If it’s on the server you’re better off with Python or something else.,1519348338.0
ivanph,"You could use something like https://www.npmjs.com/package/which-pm-runs
And a postinstall script",1519429328.0
DueDueProcess,"Install mine and I'll let you know: https://www.npmjs.com/package/flexy-flipcards

",1519355858.0
,"Shoutout to RethinkDB, and setting up GraphQL seems to be a nightmare, but working with it with Gatsby has been AWESOME! Have had some success with Hapi, too, and check out Auth0 for auth stuff! Good luck, let us know what you come up with!",1519351155.0
__bagels__,"For a basic CRUD API I can't imagine you'd need anything more than a MySQL or Postgres database and Express. If you want/need an ORM, I would go with Sequelize. 

Don't use MongoDB.",1519334685.0
,[deleted],1519336446.0
tradesinvancouver201,"It's a ramble, but what is the closest I can get to in terms of Laravel/.Net MVC that offers an Database (migrations, ORM (relationships, models, abstract me away from using SQL like Eloquent or Linq), Security (Authorization, Encryption, Login Stuff), that will let me create business logic and API's that pair well with react?

I've been spending like 2-3 hours a night just going through threads and I'm maxed out :/",1519334679.0
andycharles,"Adonisjs (https://adonisjs.com) is the way to go, based upon the requirements you shared.

Some people in Node community don’t like it for weird reasons like (one man show) etc, etc..

But I have been able to ship apps in production with it and framework literally gives all required features with consistent API

Example, when u use express, you deal with callback via `next` method and while using any ORM it uses promises and this mix and match of API frustates me, whereas Adonis has uniformity in it’s code base.

I recommend giving it a try ",1519473700.0
nbsdx,"What, did you not have enough problems trying to get systemd to work and decided that an even more complicated process should run as pid 1? This is dumb. The [process Object documentation](https://nodejs.org/api/process.html#process_signal_events) even states there are limitations to what signals nodejs can handle (namely `SIGKILL` and `SIGSTOP`), and that there are even default handlers on things like `SIGUSR1` that CANNOT be removed. Why on earth would you want to do this? 

Refer to [this rant](https://ewontfix.com/14) about systemd which talks about how to not make stupid init systems. I love node, but this is completely idiotic. ",1519339369.0
aceex,"Not just servers. This would make a mess of your Linux desktop system too.

I never run Node or npm as root—and neither should you—but this is some deadly, boneheaded stuff. I was thinking npm was using some JavaScript function that sets ownership of everything in a directory path, but that doesn’t explain why `/boot` gets hit. Someone fucked up good and proper here.",1519309122.0
Aetheus,"Christ, this is horrific. I've always defended Node projects when people accuse them of instability and poor quality, but when the very default package manager that ships with it messes shit up this bad, it just leaves me goddamn speechless. This is the kind of shit people laugh at when they say that Node as a platform is unreliable. ",1519309649.0
Drawman101,This is why you don’t sudo npm ,1519312087.0
oorza,"At what point do we get fed up with the nonstop amateur hour of NPM and switch to yarn as the ""official"" package manager?",1519316686.0
Arffman,"Link doesn't seem to work? Have they actually deleted the issue?!

Edit: yep, full on lockdown at the moment. New issues getting locked for 'trolling'. Amateur hour.",1519332617.0
pool-is-closed,I'm sure Isaac will take a break from fighting the patriarchy to get this resolved.,1519304328.0
ResponsibleLife,[Yarn?](https://yarnpkg.com/en/),1519310222.0
sunderskies,Yuuuuck. Hope this gets resolved quick.  ,1519302674.0
OzziePeck,[:(](https://i.imgur.com/XQsqgOW.jpg),1519341120.0
iBlacky,"So, this is different the thing making me move to yarn",1519383557.0
juanmnl,"Well, it's also a pre-release... If someone uses @next on prod, that's just asking for headaches. :P ",1519316616.0
bpadair31,"Don’t be an idiot, don’t run npm as sudo. Problem solved. ",1519335175.0
ubnusr,"I develop on Windows and test/deploy on Linux.

On Windows I don't need to grant npm admin rights to install global packages. The same should be the case on Linux.",1519327203.0
i-love-toddlercon,If you run npm as root you deserve this,1519360555.0
PerkyPangolin,This is one of the reasons we're using yarn.,1519298057.0
oorza,"Short answer: there isn't much point to package-lock.json, don't rely on it.  Use yarn instead.

Long answer: don't use NPM at all, they should be out of faith and goodwill from this community by now.",1519317142.0
vincentofearth,"`package-lock.json` is meant to get generated every time your dependency tree (the actual installed dependencies, not the one declared in your package.json) is modified. The purpose is so that the next person to install dependencies will have the same dependency tree as you, and so (as far as npm is concerned) the same working environment.

The reason why `package-lock.json` may get rewritten when you install dependencies, even if `package.json` is unchanged is that the **declared** version numbers of your dependencies are often *ranges* of versions. For example, you might have a dependency with version `^1.2.3`. The caret indicates you wanted a version that is _compatible_ with 1.2.3 (i.e. possibly newer but before 2.0.0). Most dependencies are declared this way (it's the default when you do `npm install`). It allows your dependencies to get non-breaking patches like security updates, refactoring, etc. Check out [semver](https://docs.npmjs.com/misc/semver) if you *really, really* want a specific version, but remember that your dependencies' dependencies can still change.

As for *disappearing* dependencies, it might be because the dependency failed to get installed. NPM is still just preserving your installed dependency tree, though. But, you probably should not commit your code unless you are confident it will work out-of-the-box with just a simple `npm install`. Here's a StackOverflow discussion about OS-specific dependencies: https://stackoverflow.com/questions/15176082/npm-package-json-os-specific-dependency

See also: https://stackoverflow.com/questions/44297803/package-lock-json-role#44297998

**TLDR** `package.json` contains your declared dependencies; `package-lock.json` provides a ""snapshot"" of your working environment.",1519298956.0
ddwrt1234,Is it at all possible that you are missing some dependencies? What does your build process look like? ,1519282306.0
barro32,"*Node.js in 1 Hour, 18 Minutes and 15 Seconds",1519285531.0
Robbybee,Thanks for this!,1519309523.0
BaconBrad,If the game is played in real time and you are going to store game state in a database do it in [Redis](https://redis.io/). Redis was meant for this kind of thing.,1519265403.0
BurritoBashr,Jest and ts-jest,1519252086.0
Nysosis,"Personally I've been using [alsatian](https://github.com/alsatian-test/alsatian).

There's something that doesn't seem right to me about using tools like ts-node to run tests against versions of transpiled files that are *not* the exact files that I'm going to ship to production. I know that in theory the files that ts-node will generate should be identical in contents to my subsequent run of the actual transpiler, but there's no guarantee something doesn't change, that someone wont call ts-node with different arguments to what my final transpile step will use when calling the transpiler directly.",1519283878.0
madou9,"I've been using mocha + chai + sinon + proxyquire with ts-node. Works well. 

Would contemplate moving to jest (using ts-jest), but it's hard to like Jasmine's api (which jest is built on). And their global mocking irks me. Needs more investigation and learning from my part.",1519250057.0
,"I’ve gotten used to using Karma + Jasmine at work due to the existing framework. I like it just fine.

I’ve begun looking into Jest with some side projects and it seems pretty neat. I’ve seen it gain quite a bit of traction too. ",1519248734.0
rotharius,"For unit tests: mocha + chai running in-memory using ts-node and using nyc for code coverage.

For e2e/functional tests: cucumber and nightmare or cypress against a test or acceptance environment.",1519259356.0
vincentofearth,"I use mocha, chai, chai-as-promised and sinon on the transpiled JS files. I generally run tests with an `npm test` and have a pretest script that runs `tsc`.",1519299365.0
jeffijoe,"Jest and ts-jest has been my go-to for a while now, after having been through Mocha (+ Sinon + Chai) and AVA.

Here's a Jest config I use:


      ""jest"": {
        ""testRegex"": ""(/__tests__/.*\\.(test|spec))\\.(ts|tsx|js)$"",
        ""testEnvironment"": ""node"",
        ""coveragePathIgnorePatterns"": [
          ""/node_modules/"",
          ""__tests__""
        ],
        ""transform"": {
          ""^.+\\.(j|t)sx?$"": ""<rootDir>/node_modules/ts-jest/preprocessor.js""
        },
        ""moduleFileExtensions"": [
          ""ts"",
          ""tsx"",
          ""js"",
          ""json""
        ]
      }

I also use [`smid`](https://github.com/jeffijoe/smid) for testing errors, since `expect().toThrow()` does not return the error.",1519373366.0
StoneCypher,"Ava for fast parallel unit testing, nightmare for relatively painless e2e, and jscheck for stochastic space search",1519398308.0
binaryops,"I'm not sure what I'm supposed to do with the UI.  Your post above is the only indication that it's supposed to scrape ""Job listings"". The input field labelled ""Location"" makes sense with that in mind, but my first reaction was to paste in a URL, but then I was lost on the ""Pages"" field. It wasn't and still isn't clear to me what you were expecting there.
When it comes to existing listings, there's really little information to allow filtering for my City or Career / Job options.

With those things aside, it didn't break and other than the fact that I didn't know what to do with it, it appears to work ok, so that's good!",1519334056.0
BenjiSponge,"I don't know the answer definitively, but I found [this](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers) which claims everything within scope of an `eval` is non-optimizable (if I'm understanding it correctly).

Just a thought, not knowing your full design -- what about reading the functions from the database then writing them to separate files, then `require`ing them? Assuming they don't get changed or deleted, you could just keep adding new files. (the file will get cached by `require`, though, so you'd have to restart to refresh a function)",1519239854.0
fullheap,"If you define the functions and then re-use them later, it's probably possible to optimize it. Otherwise, I doubt it.",1519256238.0
RushPL,Let us know. It should be easy to test. Just benchmark some sample code which is usually optimizable. ,1519260726.0
cspotcode,"Yes!   ...I'm pretty sure.  After all, what does node's module API do internally?  It loads the .js from disk using the ""fs"" module, wraps it in some boilerplate, then `eval`s it.  Or `new Function`s it, I forget exactly.",1519261053.0
segphault,"Given your use case, you might want to look at Node's VM module. It might be more appropriate than eval if you want to load and execute code from a database. https://nodejs.org/api/vm.html You can pass a string of code into a vm.Script and run it in a sandboxed context that only has access to what you pass into it. I would still advise exercising caution and not running arbitrary user-provided code (or code that is programmatically mutated based on user input), but this should be fine if you are, for example, using it to hot-deploy your own (or otherwise trusted) application logic or something like that. ",1519265948.0
jpambrun,"Yes. If it becomes hot (i.e. gets run multiple time) it will get optimized. I am using this pattern to avoid deoptimization due to varying function parameter types. 


On the other hand, if you recreate the function every time you use it it will never be optimized at all.

Edit: I am talking about new Function(), not eval().",1519272250.0
BeLikeElon,This sounds like a school assignment and that you’re basically asking for someone to do it for you?,1519250995.0
daniel_k91,"I think you will have more luck being specific and zeroing on your problem before pasting that much code. Also, stack overflow is better than Reddit for that. If you’re looking for good materials on async in general, I recommend the ‘you don’t know js’ book series. Free on GitHub ",1519261241.0
stombre,"I think your issue is linked with the ""//Main Execution happens here"" part, to every for loop, you create one promise, and your promise do not stop the for loop. So every file are run in parallel.

So when your run your code, more files you parse, more RAM are used, and somewhere your program can not handle so much.

You need to process one file at a time, and you program could successfully work.

",1519302243.0
binaryops,You need to process the files serially.  If the files are *much* smaller you may find that your're able to load more at once than with the large files.,1519320602.0
NuclearSpaceHeater,Have you thought about Google Analytics or similar services? Or is this something you'd like to keep in-house?,1519228046.0
goorpy,"This isn't something you're going to be able to do live for each session in any reasonable way.

It sounds like you need to track the data points you care about in your logs and do some analysis after the fact to determine unique visitors (according to your rules) and endpoint usage. If you have more than one server or node instance, you'll need to do some kind of log aggregation first.

Then you can store the results in your db and create an endpoint to expose them in order to display some (delayed) stats on the front end.",1519251857.0
Ormeniss,"Do not reinvent the wheel, take a look at this article: https://medium.com/strapi/protected-routes-and-authentication-with-react-and-node-js-d31d234644cd. Strapi is built on top of Koa and includes a complete authentication workflow with JWT.",1519229657.0
localhostdev80,Since when Node.js is a framework? It’s a runtime environment. A framework for example is express.js.,1519219384.0
,"Typical marketing style page. All the good points at face value. The reality is much different. I'll try to explain.

**Lesser Time to Market**

> While building this app, the framework’s modular design, cross-organizational collaboration and lesser lines of codes came of great help to the developers.

That's nothing specific to Node. That's just architecture related which you can do in practically any language (namespaces, classes, modules, etc). So this has no weight to it in my opinion.

**Excellent Ecosystem**

> For enabling server-side development, its ecosystem creates a combination out of the work of front-end JavaScript developers and low-level system programmers.

Front end developed code while executes server side (and visa versa) have completely different considerations. Running code browser/server side that was intended for the other would potentially open security issues amongst other issues (such as node not having a DOM or the browser not having a private file system the customer user not access). True. Some share code, most however do not. So I've not found this to be of much significance in practice even though in theory it's sort of true.

> NPM, a package manager for Node.js packages, is the biggest package ecosystem of the framework. 

And a large portion are incomplete, no longer maintained, unstable and/or not even for Node! Numbers look good, quality is what matters especially stability when it comes to being fit for production use.

**Modular Design**

> Building apps in Node.js is a great experience for developers. 

Yeah, it's amazing working within callbacks that call callbacks that return more callbacks for my callbacks. Scrolling horizontally as well as vertically is also great fun. Yes promises and async etc exist. But many new comers to Node just don't use them as they know the language from experience on the browser side. How about loading a library that just so happens to block the event loop or an uncaught exception that destroys the app for everyone! Forget to mention the async backtraces also often miss the source line of what actually caused the issue? Or that logging is out of order due to the async code jumping between different sections of code? Or how about, there being no method signature for the possible callback parameters you expect? Yeah, great fun solving and managing these problems that are rarely an issue in synchronous languages.

> This is because it needs lines of code that is 33% lesser as compared to other frameworks. Also, it can handle double number of requests per second and shortens the response time by 35% in comparison to the Java version.

It's not specific to node. Node being a dynamic language tends to be a weakness when it comes to performance. It's the non blocking nature combined with the event loop that's it's pro. However, you can do async within C# for example. Only C# has async and await removing the callback hell and letting async code execute in the same flow as synchronise. Or how about Go which is actually designed with async in mind from the beginning as well as being statically typed and compiled. Resulting it it being faster than Node.

**Cost-effective Operations**

> Now, let us compare it with Java. If you go for a conventional Java installation, it will occupy 64GB of RAM and 32 cores.

Wtf! I will admit I'm not a Java developer. However, 64GB of RAM and 32 cores I believe factors in that many very large companies with large user bases use Java and hence, the standard for ""conventional"" appears high spec. I know for a fact I have run Java on far smaller systems than that and there are many high traffic systems that make very effective use out of Java (such as mailinators architecture - the last I heard anyway).

**Enables you to build real-time web applications**

> When it comes to building real-time web applications like games and chat; it is the most effective framework.

What's this effective framework? NodeJS is more the environment, a framework would be like Express. Pick the wrong framework for the task and you could find you spend most of your time fighting the framework! But what's the framework?

> As there is JavaScript usage involved in server side and client side, it enables swift synchronization. 

Like JSON that near enough every language uses? Or Mongo that near enough any language can interface with? :/

> You can know about its real potential through websockets. They are used to regulate the performance of applications when there is a sudden upsurge in traffic.

Regulating performance of application through websockets. What does that even mean? Websockets are basically a protocol on top of a tcp connection. Not sure how that ""regulates the performance of applications"" lol!

**Helps Monitor Dashboards**

> Applications created in Node.js provide you with user-friendly system dashboards.

You know Nodejs is server side right?

Anyway, I'm sure I don't need to continue...",1519220509.0
MattBlumTheNuProject,Clearly you have never used node. ,1519228871.0
petardodev,So that's why node's logo is a hexagon...,1519252101.0
stombre,Very interesting. Thank for sharing.,1519305544.0
purpledollar,Idk why this sub doesn’t ban obvious affiliate urls ,1519244356.0
gurkiratkooner,m,1519209448.0
redblueninja,What will you do after it? I did the same course and I'm a bit confused what to do next. Probably MongoDB course in detail. What do you think?,1519211135.0
wengemurphy,"You didn't just finish anything. You're spamming.

Get banned.",1519352678.0
Capaj,Also I wrongly thought Bluebird with enabled long stack traces can help you. Nope.,1519175937.0
voiping,"Yikes, I didn't realize this: in short, the calling line from your code that failed doesn't show up in the trace.

Main node.js issue: https://github.com/nodejs/node/issues/11865",1519192251.0
RedditorFor8Years,I still don't understand what process.nextTick does.,1519192023.0
,"If compiling from TypeScript, and it becomes a generator function if you target es5, is this still the case?",1519178788.0
sohaeb,"i'm sorry, but can you explain to me what does your project do ? Im noob",1519180460.0
erulabs,"This script gets called by Linux when an interface gets brought up. The path is `if-pre-up.d` (ie: before interfaces come up, run these scripts). WPA Supplicant is a tool the turn on / off wireless radios on laptops. Even if you don't have a wifi radio physically attached to your computer, most Linux desktop distros come with WPA supplicant _just in case_ you attach an wifi radio later on. So this is totally unrelated to node, and is a standard part of most Linux systems. The file will be accessed whenever an interface comes up or down (when the laptop goes to sleep and wakes up, for example)

If you take a look at the permissions, you'll see this script is owned by `root` and cannot be written to by non-root users. So there is no chance (read: no possibility) that node altered this file unless you ran `sudo node ...`.",1519159046.0
OldSchoolBBSer,"Looking at the image, I highly doubt anything shady is going on here. erulabs is correct. It's normal linux stuff. Simply asking to refresh the environment could have caused it to trigger. You would need much more information to determine if the system was compromised (for certain.)

If playing the odds is good enough:
Accepted practice for binaries/sources are to get them from the trusted source, and verify the hash (files fingerprint/distributor's sign-off) before installing. 

Here are the two for the most recent Node.js installs from their site:
https://nodejs.org/dist/v9.5.0/SHASUMS256.txt.asc
https://nodejs.org/dist/v8.9.4/SHASUMS256.txt.asc
(Just change the number to the version you installed)

Here's a general example of how to check the file's fingerprint to compare:
https://wiki.centos.org/TipsAndTricks/sha256sum

Otherwise:
If you are absolutely in a situation where you, justifiably, can't even trust the author's binaries with the SHA/MD5 fingerprint (highly doubtful), then going forward, you should use a virtual machine setup snapshotted stock. Next install it on the VM and observe what happens. If something looks shady then figure it out in the VM (that you can always rollback to the fresh stock.) Check logs, download and check the matching source, if nothing obvious in the source then compile the source and compare behavior to the binary (perhaps in a separate VM), etc., size it up, make the call to install or not onto the main system.",1519224349.0
_bit,"It shouldn't. I highly doubt this is related to Node.js, npm, Express, or request.",1519156085.0
chrwei,sure it's not some other package update that caused it?,1519156110.0
gigglefarting,"There are some folders in your source files that don't need to be seen on the client side like your node_modules folder, webpack, or components.",1519156375.0
TheBigLebowsky,Not sure whether you would really like to enable source maps in PROD. Also just wondering whether you really need Redux for this?Otherwise looks good. Just be cautious of Reddit's content policy. ,1519157172.0
0x446576656C6F706572,"Not sure how it works or if you plan to profit off of it but be careful. Most websites don't allow content crawlers especially if used to profit. For example, I found this in reddits privacy policy.

""We grant you the right to access the reddit content in the manner described in this agreement. You may not otherwise make unauthorized commercial use of, reproduce, prepare derivative works, distribute copies, perform, or publicly display reddit content, except as permitted by the doctrine of fair use or as authorized in writing by us. If you are interested in licensing reddit content, learn more by reading our licensing page and contact us at licensing@reddit.com.""",1519156292.0
NeedMoreMuscle,I actually really like this.Nice job we'll see how it works added a spam email with programming as a tag.,1519155781.0
readitlikeitdidit,This looks awesome! ,1519156307.0
StackOfCookies,"Haven't had time to look at it on the desktop - but on iPhone, it doesn't render properly (lots of components on top of each other). Look into making the css responsive. ",1519163961.0
PapayaPokPok,"Wow. Great job.Looks very clean and is well designed. As someone mentioned, you can take out the superfluous files that you send to the front end (like node modules, etc.).

Also, for your React class methods, you write them out and then bind them in the constructor, like:

  `this.setEmail = this.setEmail.bind(this);`

Alternatively, when you declare them, make them arrow functions. This will automatically bind them to where they are written. So, 

    setEmail(email) {
      this.setState({ email });
      console.log(email);
    }

Will become

    setEmail = email => {
      this.setState({ email });
      console.log(email);
    }

Then there's no need to bind them in the constructor. 

Your code is very clean and well documented, so good job on that!

EDIT: I guess you'll also have to add 'es2015' to your presets in Webpack if you haven't already.",1519183702.0
Japu21,"Good Job! But some images are a bit blurry, like the logo on the top left, i think it would be  a good to improve that :)",1519167908.0
,"I appreciate the south park reference on the home page... 
step 1: steal underpants.
step 2: ???.
step 3: profit. 

Nicely done.",1519169690.0
dubkrapht,">going down the wrong paths (looking at you MeteorJS).

any details about this? about to jump on a project that is using meteorjs and needs refactoring.",1519208856.0
NeedMoreMuscle,"It seems the direction i should take is just good old mocha tests.

However any input is appreciated as testing personal projects has to be the most mundane thing ever.",1519155692.0
HeyGuysImMichael,"You're all over the place buddy, what the hell are you asking?",1519161477.0
hangmeon,"Guys, if you have any questions, I'll be happy to help ",1519208574.0
leimonio,"I think that your export is not correct. Try either `export default function(sequelize, DataTypes) { ... ` or 
```
const fn = (sequelize, DataTypes) => { ...
...
export default fn;
```",1519143982.0
Marand23,"You could use cron to do it, provided you are on linux. It's the most easy solution by far I think. You just move a script into the /etc/cron.daily directory and it is executed once a day. The problem is that you can't have it execute at the exact time that you want. A quick google gets me that it executes at  6.25 am or 7:35 am, based on the system settings. So if that is acceptable, cron would be fine.",1519125676.0
,[deleted],1519120484.0
robinsio,"Check out agenda

https://github.com/agenda/agenda/blob/master/README.md

Might be a bit overkill but it’s works well for distributed systems ",1519123201.0
tongitroendheim,"i have some issues with
https://github.com/kotik1998/Steam-Card-Bot-v3

i can't get it working, maybe you can find the solution on the error?


        console.log(""Card data loaded. ["" + Object.keys(DATA).length + ""]"");
                                                   ^

TypeError: Cannot convert undefined or null to object
    at Function.keys (<anonymous>)
    at Utils.getCardsInSets (C:\Users\Marcus\bot\index.js:38:52)
    at Request.request [as _callback] (C:\Users\Marcus\bot\utils.js:41:13)
    at Request.self.callback (C:\Users\Marcus\node_modules\request\request.js:186:22)
    at Request.emit (events.js:160:13)
    at Request.<anonymous> (C:\Users\Marcus\node_modules\request\request.js:1163:10)
    at Request.emit (events.js:160:13)
    at IncomingMessage.<anonymous> (C:\Users\Marcus\node_modules\request\request.js:1085:12)
    at Object.onceWrapper (events.js:255:19)
    at IncomingMessage.emit (events.js:165:20)",1519089014.0
brennanfee,"Great, you have re-created http://downforeveryoneorjustme.com/
",1519101487.0
raphaelarias,"I saw Algolia using this app (if I’m not mistaken). The website is beautiful, but I don’t understand how it works, how effective this, how much I need or why is so got damn expensive.",1519133729.0
grajagandev,Congratulations and best wishes - I have been enjoying your blog posts.,1519224146.0
ecares,"Hey, we are doing YC right now and we are trying to collect as much feedback as possible.

If you have some time, it would be awesome if you could get to https://www.sqreen.io/ and try the product (there is a free 7 days trial) and let us know what you think of it!

If you have questions regarding our Node.js agent, please fee free to ping me directly!",1519082477.0
mrm8488,"const lib = require(""lib"")(...params)
??",1519080402.0
mannotbear,"Might I suggest using express and some middleware like [this](https://www.npmjs.com/package/express-http-proxy) or [this](https://www.npmjs.com/package/express-request-proxy)?

It’s super easy to break an optimization or wait too long for some event in the standard node http module.

Good luck.",1519074722.0
thissaysotherwise,"Have you tried the request module? It should throw errors on timeout that you could then catch. 

Off the top of my head I would have a queue, DB table, JSON file, what ever, with videos to download. 

Then either a different process or call to download each file. If it fails x times maybe wait X mins before retrying or skip to the next file. 

Another option may be to use a different technology for transfer. Maybe BitTorrent. S3 can transfer files with BitTorrent. It has built in retry and file verification. Would be great for a unstable connection to ensure the file gets there. 

",1519092795.0
OzziePeck,"I am going to properly manage this repository, if anyone remembers the total mess up that was my terrible attempt at an NPM repository, that was a total fail. 

The code on the repository is going to be updated, it's old and I've made quite a bit of changes since. I've been having issues with MAMP and have been slowly switching to Vagrant/MySQL, so development has kinda stalled since MAMP broke. Once I fix MAMP, I'll be able to test the registration and login routes and will update the repository. Slowly working on docs too! ",1519049752.0
OzziePeck,"Git is ignoring my gitignore. Meh, those files have nothing important in them anyway. ",1519050351.0
MCShoveled,"So, I guess I’m confused. What are you trying to build? Is this a restful wrapper around Redis or what?",1519062327.0
pschmot,"You mean you used node/node libs to create a NES emulator in JavaScript.

(Which is still redundant...but at least closer to being accurate)",1519112235.0
pschmot,Or better...maybe...  NES emulator in JS using node.,1519112365.0
Cuel,On a high level yeah. Avoid blocking synchronous calls that have an async variant. ,1519039451.0
martiandreamer,"Use clustering
Separate “worker” processes from “web” processes 
Do nothing synchronously
Cache and reuse frequently accessed data",1519044519.0
Kroney502,"One of the beautiful things about node is it won’t actually allow you to write a lot of synchronous blocking code. MongoDB connection, HTTP requests, TCP connections in general etc. are all async by design, there’s no synchronous function to even call. The only exception is file I/O but even there it basically reminds you right in the name that you’re using a synchronous function and the default function is still async (readFileSync vs. readFile).",1519070648.0
DuplicatesBot,"Here is a list of threads in other subreddits about the same content:

|Title|Subreddit|Author|Time|Karma|
|---|---|---|---|---|
|[parseInt in javascript... wait for it](https://www.reddit.com/r/programminghorror/comments/7xgyfc/parseint_in_javascript_wait_for_it/)|/r/programminghorror|/u/enchufadoo|2018-02-14 17:49:36|0|
|[I ❤ JavaScript: Weird parseInt](https://www.reddit.com/r/Frontend/comments/7xgxkp/i_javascript_weird_parseint/)|/r/Frontend|/u/harlampi|2018-02-14 17:43:30|7|
|[I ❤ JavaScript: Weird parseInt](https://www.reddit.com/r/learnjavascript/comments/7yl84p/i_javascript_weird_parseint/)|/r/learnjavascript|/u/katerina-ser60|2018-02-19 16:16:42|1|
|[I ❤ JavaScript: Weird parseInt](https://www.reddit.com/r/WebdevTutorials/comments/7yl7ud/i_javascript_weird_parseint/)|/r/WebdevTutorials|/u/dobkin-1970|2018-02-19 16:14:58|1|


----

 I am a bot [FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block user (op only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&subject=remove%20user&message=ginger-julia)-[Block from subreddit (mods only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&subject=remove%20subreddit&message=node)

Now you can remove the comment by replying delete! (op only) ",1519029303.0
gunther-centralperk,Please check out /r/learnjavascript,1519024109.0
,"Wow that code is a mess...

Just use .includes? 🤔",1519036869.0
4rch3r,I would look into the difference between == and === here (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness) but I think what you're looking for is `arr.some((e) => e === null)`,1519023345.0
aaronr_90,Can confirm: Learned Node from this course. ,1519018199.0
danielkvist,"I agree, you not only learn the bases of Node but also you learn MongoDB, work with APIs and good practices",1519023409.0
iPrimeFX,"Currently following a react course from the same author, he’s really great and explains all the inner workings of why and how things work. I would recommend his courses anytime. Andrew Mead ftw.",1519026481.0
julius_jogos,"I want to buy a course and I am between this one and this:  [node.js](https://www.udemy.com/understand-nodejs/) 

Can anyone help me?",1519044307.0
spectre013,"I just finished this course and it was really great. The fact you make actual applications and all the testing that you are taught. 

Excellent course if you want to learn node! ",1519054492.0
JustARandomGuy95,"Pirated it, learned node, later bought it just to support him. 

I usually start dozens of things at once, and never finish them, with this being the exception.",1519059502.0
Fullstack_Questions,"Pretty outdated at this point. It is E5. But solid. Teaching you to use git and unit test your code is something not found in other courses all the time.  

Andrew Mead  
Stephen Grider  
Maximilian Schwarzmuller 
  
These are great teachers.  
 
Rob Percival <- not a coder but good teacher as well   ",1519034576.0
nlindley,"React supports rendering to a stream as of version 16. You’ll need to use `ReactDOMServer.renderToStaticNodeStream(element)` or `ReactDOMServer.renderToNodeStream(element)` if you plan on hydrating the page after it loads. See https://reactjs.org/docs/react-dom-server.html#rendertostaticnodestream for static server-side rendering docs.

Another option that supports streaming and looks more like traditional HTML templates is [Marko](https://markojs.com).",1519012223.0
ccb621,"Take a moment to think about how template rendering works. You load a file, pass some data, and out pops a string.

Now let's look at streaming. You open the stream, write some data, and close the stream.

The two concepts are quite different. Your idea of breaking up the template makes sense; however, I question why you need to stream HTML data. What do you gain from doing this?",1519018156.0
skidmark_zuckerberg,The script  your linking is calling public/js and you have the JS files in public/javascripts based on where you said you put them. ,1519001305.0
zumbala,"I use it like this:
app.use('/images', express.static(path.join(__dirname, 'mail', 'images')));

By giving it a path to use you know for sure where to fetch your data.

So this is now the root, if you add subfolders, you need to use them also.

Eg: /images/flags/nl.png

Hopes this helps.",1519047163.0
trout_fucker,"An antipattern would be making 10 calls and pulling back 10x the data on the client, when you're only trying to do one thing. Servers can communicate within the same warehouse much faster than any frontend and shouldn't have any issue making any number of calls you need and will remain consistent throughout any client that connects.

The client on the other hand is full of inconsistencies and any issue like ping, speed, or device capabilities you're now multiplying by 10.

 Doing so can also let you leverage scaling easier by letting servers communicate instead of trying to do it with an HTTP load balancer.

Do this on your server with an API Gateway dedicated to serving your frontend is the best for speed and sanity. At the end of the day, all the matters is UX and all the technical challenges are there solely to serve that.",1518974668.0
lirantal,"maybe you've encountered some anti-patterns in API Gateways but by itself its not one. The gateway and your microservices aren't coupled on release - you can register new routes/endpoints/permissions for a new microservice on the api gateway and so no release coupling takes place.

The API Gateway also isn't concerned with your logic, it doesn't care at all. True that it will pipe the request around but at the same time will save your microservice to handle authentication/authorization and other concerns that are considered infrastructure and shared across the rest of your microservices.",1518990856.0
drowsap,[every time I hear that word...](https://imgur.com/a/qAtzD),1519014654.0
,[deleted],1518994154.0
SkaterDad,"Coming along nicely now!

One thing I noticed in a past video.  When you defined your Auth model, the `emailVerifiedKey: { type: String, default: shortid.generate() } ` will execute that `generate` function on application startup and give every user the same key.  Removing the parenthesis will let the function execute on each model creation.",1519137187.0
koskimas,`req.params` is an object and objects don't have a `some` method. You need to do something like this `Object.keys(req.params).some(key => req.params[key] == null)`.,1518966165.0
zumbala,"You are not defining a function

var params = req.params.some( (params) =>{ if ( params==null ) { return true } else { return false } } )

Should be:

var params = function (params) { if ( params==null ) { return true } else { return false } } 




",1519053068.0
marinespl,But why?,1519046131.0
southern_dreams,Mongo is still a thing? ,1518955380.0
nk2580,Use express with es6 syntax. You’ll get all the features and the cool new syntax.,1518932855.0
eggy900,Is there not a vs code plugin for Adonis? I don’t think it would be too hard to make one that uses Adonis’s resolver for intellisense ,1518943086.0
ReefyMat,"I don't know Laravel, but it looks like a backend framework. Actually, there are many different backend frameworks for Node.js but I don't really get your requirement for ""latest JS syntax"". What do you mean by ""imports""? ESM? If yes, Node.js only supports that with a flag and its use is not framework-specific. Regarding ""es6/7"", what exactly are you looking for? You can use that syntax with any framework that supports current Node.js versions.

To list a few:

* [Express](https://github.com/expressjs/express)
* [Koa](https://github.com/koajs/koa)
* [hapi](https://github.com/hapijs/hapi)
* [restify](https://github.com/restify/node-restify)
* [server](https://github.com/franciscop/server)",1518983539.0
martiandreamer,How does ActionHeroJS fit your requirements?,1518924456.0
Kroney502,Check out Joi on npm,1518946388.0
Thraksh,Jsonschema?,1518911544.0
scaleable,"Joi, yup or ajv+json schema",1518971564.0
cyanydeez,Postgraphql would work well if you have an existing postgres database,1518970687.0
tknew,"What is the difference between gcr.io/distroless/nodejs and
node:8-alpine?",1518910483.0
Stormsheperd126,Awesome article! I had never thought about optimizing my docker containers before :P,1518884741.0
dadum01,Link to the github project. https://github.com/clout-stack/clout-js,1518879682.0
Kroney502,"Without knowing anything about indeed.com, most websites provide public/protected APIs where their partners (in this case indeed.com) can crawl the info directly.
If they don’t have APIs, there’s also the possibility to load the sites and parse the HTML to get the relevant information. Of course this needs to be highly customized for each website.",1518877585.0
lemon1993,I work for a large job board in the U.K. Indeed have feed API’s provided by the large websites and they crawl the rest with bots.,1518884295.0
frank_darwin,"APIs are probably how it gets some of it.  Everyone is selling everyone elses job postings.  

Python is great for web scraping.  There are dozens of libraries built already for this type of thing with python.  If you don't mind trying a new language, I would say its a great tool for the job.

I've built a lot with node, and I can't recommend it.  That said, there are a few modules that you can use to convert HTML pages into objects that you can then use to parse out what you need.  You may have to do a lot of the sitemap url processing yourself.",1518884950.0
,[deleted],1518862149.0
sale-sh,"here is a small script if youre on windows

https://github.com/iseriousnoob/nvm

you can look at what the source code does

the trick is that it sets your users enviornment variables, not the admins",1518868037.0
tswaters,"I don't understand...  from the report, looks like this was patched and published almost 2 weeks ago... Can't you just update to latest lodash to mitigate the problem?",1518833368.0
ecares,"> It has already leaked in other subreddit. So, I am not exposing anything.

I am under the impression this is not a leak as the people involved talk about disclosing publicly.",1518858434.0
andvgal,"Just for those curious. It seems, some project already do have frozen Object.prototype in place. So, it's definitely a safe path.

I wish Node.js has this on roadmap for extra security, if not yet.

However, libraries which provide custom `toString()` for own prototypes may need minor modifications.",1518835904.0
andvgal,"Formalized the proposal in GitHub issue: https://github.com/nodejs/node/issues/18839

Anyone having valuable objections, please also comment in the issue.",1518882322.0
Kekkonshiki,Read up on PCI compliance. The best bet is to use an external processor or an API so cards never touch your code. ,1518846859.0
MrStLouis,Tread carefully with payment. You need a legal team if you want to publish to the public,1518833227.0
avejack,"For everyone who stumbles across this post:
I am going to use paymill! Thanks for all the comments :)",1518862089.0
chrwei,"took me a minute, thought you were making a crack at node being so bloated that it includes photoshop...

""what programs include node in their install"" is more clear.",1518811844.0
cooliobing,"Lenovo shipped the Superfish/VisualDiscovery malware[1] with its laptops that, in addition to installing root certificates, ran a node.js proxy server (bundled node.exe) on your laptop and intercepted and processed web traffic. So...I guess that qualifies?

[1] https://support.lenovo.com/us/en/product_security/superfish",1518877725.0
toyonut,The Nvidia software that comes with their drivers used to come with a package version of node. They may have stopped shipping with it now,1518843772.0
ezhikov,"Photoshop needs node, because of some scripting that done or can be done in js. So, if software can execute js without asking you to install node — there is pretty big chance that node or something similar is included.",1518844009.0
inabahare,"Unreal, Unity, and Atom according to [everything](https://u.lewd.se/obMvZa_2018-02-17_10-51-02.png)",1518861085.0
ecares,PLEASE STOP,1518805309.0
Kroney502,"There is a way to do it with mongodb as well:

    db.coll.aggregate([
    {$project: {
        // $cond only allows if else, so start with the lowest and repeat, while passing along $timestampPts as else
        timestampPts: { $cond: { if: {$gte: ['$timestamp', new Date(new Date() - 1000 * 60 * 4 )]}, then: 4, else: 0}},
        timestamp: '$timestamp',
        upvotes: '$upvotes'
    }},
    {$project: {
        timestampPts: { $cond: { if: {$gte: ['$timestamp', new Date(new Date() - 1000 * 60 * 10 )]}, then: 10, else: '$timestampPts'}},
        timestamp: '$timestamp',
        upvotes: '$upvotes'
    }},{
        $project: {
            points: {$add: ['$timestampPts','$upvotes']}
        }
    },{
        $sort: { points: -1}
    }
    ])

Edit: Actually there’s $switch as well, so you might not need multiple $cond, but I have never used that before",1518807544.0
fyzbo,"Choice 1:  Create a field specific for sort and calculate it on some interval.  This will be expensive on updates (you can use mapreduce), but will provide the fastest data pull.

Choice 2: Look into $project (https://docs.mongodb.com/manual/reference/operator/aggregation/project/) similar question - https://stackoverflow.com/questions/25413209/mongo-sort-by-formula

Choice 3: Determine another way to present the posts.  Perhaps sort one field, but create a filter for the other.  You didn't explain your application, but I'd be worried about the first set of results being filled with high scoring posts and any new posts being pushed way to the back.  Maybe filter on the last X items and then sort by votes?",1518808143.0
jamesfriedal,i've also been trying to do this. Help appreciated. ,1518799915.0
bossmonchan,"Why not use array.sort() after getting the array from Mongo? You can write your own arbitrary sorting function.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",1518803469.0
sockjuggler,"depending on scale, the better option IMO is to offload this to a service like Elastic Search. This is just worth mentioning, not necessarily a suggestion for your usecase since it may be overkill",1518816249.0
gngeorgiev,"`If you’re brain didn’t auto-complete that `

It autocompleted me to quit the article immediately.",1518805619.0
maratmkhitaryan,That is different items!!,1518781509.0
Skhmt,">  It lies in the fact that the above concepts can not fundamentally be compared.

Then why is this even an article",1518812551.0
texasbruce,"> The first is the platform, and it relates to the backend (server-side), and Angular.js is a framework that relates to the front-end (client-side). Both are based on JavaScript. So, they are like relatives living in different towns.

Are you f**king serious?",1518787057.0
sime,"'win32' is the name of the Windows API. `process.arch` can tell you more about the machine architecture such as ia32 or x64.

`win32` is in contrast to the previous Windows API which was 16bit. We're talking history from the mid-90s here.
",1518766948.0
Buckwheat469,"Protip: Don't branch based on the substring ""win"" within os.platform(). ""Darwin"" also matches that and Mac's don't usually behave like Windows machines.",1518792465.0
Aior,"Win32 is the platform even on 64bit CPUs, the number has nothing to do with the CPU anymore (it had in the 90's). You're thinking about processor architecture.",1518790639.0
KryptoKio,Blog.,1518758283.0
ccb621,I’m not sure I understand the point if your comparison. What will your benchmarks tell me about *my* project? It seems strange for someone to decide on a CI provider based on the benchmarks of a completely different project. ,1518762970.0
Kusaddaw,"Specific error subclasses is a perfectly good pattern. It's just more common in languages with conditional catch blocks because it's more convenient then. Question is, do you want to mix exceptions with falsy checks or stick with one or the other?",1518759005.0
aust1nz,"If you're coming from rails, the node work that's most similar to rails is an express app running on node. It's comparable to running rails as an API, but it does a lot less for you out-of-the box. Express has a generator tool now (similar in some ways to rails new) but it's just going to produce a lot less boilerplate, and make far fewer decisions for you.

I've found [Andrew Mead's udemy course](https://www.udemy.com/the-complete-nodejs-developer-course-2) to be helpful, though a lot of the time he spends on CRUD is going to feel like a pretty basic review if you're familiar with Rails. But you can always speed up the video.

NPM is a huge package environment, but the node/express developer experience is a lot more open than Rails. Rails assumed you were using ActiveRecord as your ORM, that you'd have an app folder organized into controllers/models/views, and while it didn't force you to use Devise, it was an easy authentication choice. Node has a bunch of ORM choices -- or you can skip it and write database queries. It's popularly associated with Mongo and NoSQL (though you should probably stick to MySQL or Postgresql if you don't have a reason to go the NoSQL route) but you can choose what you use. Most people are using Node as an API with React, Angular, Vue or another front-end framework, but you can generate server-side HTML from a ton of template options. Authentication is kind of wide open too - even at a basic level, there are lots of arguments to use JWT versus sessions, and different developers will have different options. Even your folder structure is up for debate. Many Express developers still stick with a general model/controller/view layout, but a lot of folks advocate folders by feature, something you'll see in the front-end world as well.

In summary: RoR experience will help you navigate the Node environment, but you've got a lot more choice in what set of tools to use -- which can sometimes be intimidating.",1518739395.0
poom0nster,"I suggest you go with Koa and pg-promise. You don't really need to tie yourself into an ORM, and if you're proficient with Postgre, it will be one less thing to learn. 

Don't forget to write tests.",1518742737.0
papertowelroll17,"I like Sequelize. It's a pretty good combination of being  fairly powerful, but will also get out of your way if that is what you are looking for.",1518753271.0
fucking_passwords,"Well, first of all, some clarification is needed. Are you talking about ditching Wordpress altogether and running a Node.js back end? Or are you talking about using Wordpress as a headless API and building a new front end for it? What kind of site is this, just a website? Or a web application? Why are you currently using Wordpress? Do you rely heavily on Wordpress as a CMS? These are questions you need to answer to make an informed decision.

Using Node.js as a backend is not a decision that will affect SEO in the least, search engines do not care what your back end is. What the developer might be thinking of is the oversimplified idea that search engines have a harder time parsing SPAs (single page applications). This is largely not the case anymore, Google has no problem rendering single page applications, and you can generate a sitemap.xml file to make it easy for Google to index all the pages on your site/application.

I love node, but if you are relying heavily on Wordpress's functionality as a CMS it may not be worth it to rebuild that from the ground up. This will be by far the most difficult & expensive option. However, you may be able to increase page load time by removing the front end of Wordpress and using it as a headless API, and having a node server serve up a single page application that talks to your Wordpress back end. 
",1518723792.0
nimonian,"I don't know if this is suitable to you because I'm not sure what your app/site are supposed to achieve, but it might be a way forward. 

I have a fairly similar set up for one project. I have a WordPress site which has blog posts, marketing stuff and is SEO optimised. Let's say this is https://foosite.com. I then have a progressive webapp built using a node stack which is hosted at a subdomain like https://app.foosite.com.

This setup means I can separate my concerns between promoting the app, blogging, being Google friendly and easily allowing non-programmers to write content (the WordPress side) and maintaining a complex, functional web app (the node side). 

One possible issue is making them look like they 'belong together', but if you pinch some css from your WordPress theme this isn't too hard to achieve. You could keep it DRY by moving the CSS somewhere and including it in both the app and the blogsite.

Again, might not be what your looking for, but for me and my client it was the best solution. I pretty much leave the blog alone for the client to post on, and I work on the app. 

",1519239906.0
ineedhelpcoding,"Maybe I miss understood. The developers explained that if i have multiple blog postings they will all have the same URL address. 

I think you’re right, could this be developed by a trained developer.

Please let me know if I need to clarify",1518741376.0
MattBlumTheNuProject,Damn does anyone actually know how anything works?,1518754893.0
kynde,"> 6.4. Use middleware that never validates input rather than crashing your application

Hehheh. Try again?",1518726472.0
lucisferre,An ORM isn't necessary for preventing SQL injections. Even pg-promise supports parameter binding.,1518760421.0
50653,"Some that I can think of..

Don’t show stack traces to the user when there’s an error.

Use escape-html-in-json if you’re putting json in html.

Use a real library like Passport to handle auth.

Consider running node inside Docker to limit its access to the operating system.",1518741283.0
mrcelophane,I don't know enough about security (its one of my lacking areas) to contribute but I wanted to let you know I appreciate this repo and will be reading up on all these as I try to do more node projects at home. ,1518730051.0
yonatannn,"What do u think of:

Catch all request-level errors - whenever an error occurs on startup or background processing, it might make sense to exit and let the process restart. However during API requests execution, all errors should be caught and never lead to process crash as an attacker might identify this weak point and use it for DDOS-style attack",1518810201.0
Djorak,"If I were you, I'd use the Promise.map function of Bluebird: http://bluebirdjs.com/docs/api/promise.map.html

e.g.

    Promise.map(
        myOneHundredRows,
        function (row) {
            return myAsyncFunction(row); // this assumes it returns a promise
        },
        { concurrency: 10 }
    ).then(function () {
        console.log('done');
    });

And if the order is important: http://bluebirdjs.com/docs/api/promise.mapseries.html",1518707590.0
chrisdefourire,"Bluebird has what you need : http://bluebirdjs.com/docs/api/map.html (map has a concurrency parameter, see http://bluebirdjs.com/docs/api/map.html)",1518707419.0
pushthepramalot,You can use the bluebird promise library. Promise.map and specify a concurrency. ,1518707336.0
joelangeway,"I’m a big fan of Promise Fun https://github.com/sindresorhus/promise-fun for stuff like this. There’s p-map which is exactly what you’re asking for, but also things like p-queue for when you don’t know all the async things you’re going to do when you start or you can’t start them all at once without knocking over some third party api server.",1518755635.0
kapv89,"Given this:

*How could I pass an array of those 100 Promises and specify that it should do a maximum of 10, so when the first Promise finishes and 9 are in progress, it will get the next one from that array. And if any of the Promises rejects, then the whole thing will stop.*

I think you'll have to write something of your own. Look into Promise.race, might be of some help: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
  ",1518711597.0
soulsizzle,"If you don't want the dependancy of entire library like Bluebird or Async, [promise-map-limit](https://github.com/dbrockman/promise-map-limit) does this well. I'd recommend taking a look at the source. It's simple enough that you may decide to implement something more specific to your needs.",1518748678.0
Mingli91,"You could use Highland to convert them into streams, then you can specify the amount of streams that should run in parallel",1518757127.0
texasbruce,Thought it was circlejerk sub,1518717512.0
ecares,Is it a paid job?,1518698047.0
ccampean,"Try with:
    <td><a href="""" onclick=""showContent(test.id)""><%= test.name %></a></td>",1518695229.0
mannotbear,I’d typically just use Heroku for something like this.,1518704294.0
shredgnarrr,Aws beanstalk is fairly straightforward with setting up nginx,1518707525.0
vexii,"I just use one of the 5$ cloud services, that's often around the price of shared hosting anyway ",1518705701.0
KryptoKio,"Another option is to buy a droplet on Digital Ocean (as previously mentioned), install Dokku (an open source Heroku clone based on Docker) then you can run as many node.js apps as you want on one host.",1518731404.0
segphault,You might want to look at Zeit Now for easy Node.js application hosting. https://zeit.co/now,1518732052.0
ParampaHouse,You can check out asphostportal.com. They support node.js. I use them to host .net site.,1520834568.0
ecares,"Please, don't.

btw, you're not the best",1518683959.0
cspotcode,"How about use the child_process module with the `inherit` option for stdin, stdout, and stderr.",1518704783.0
Oceanswave,*chortles quietly*,1518666936.0
timo-vijaya,"Lol ok 
",1518683166.0
Nefs,"Yep, been using this for the last 6+ months. Very naturally intuitive, modern abstraction.


Highly recommend if you’ve been stuck with Sequelize or the like.",1518647325.0
SomeRandomBuddy,Looks pretty sweet,1518644866.0
,[deleted],1518666863.0
hawkdeath,They grow up so fast,1518681592.0
netcraft,"Super glad to see this post, was just looking at Objection.js this morning after seeing it on twitter and have some questions - 

The biggest one being, I dont understand what they mean by 

> What objection.js doesn't give you: A custom query DSL. SQL is used as a query language.

and 

> Simple and fun way to fetch, insert, update and delete objects using the full power of SQL

when I look at the examples here: http://vincit.github.io/objection.js/#query-examples

and all I see is a DSL and _no_ sql - am I misunderstanding?

And even if I am misunderstanding - is there a way to use this to just write a complicated query (in sql) and return its results?",1518706897.0
TheLegendOfZero,Had a great experience recently using objection for a couple of medium sized projects. Super easy to write extensions to various parts of the interface (e.g. QueryBuilder) plus there's some nice existing community made [plugins](https://vincit.github.io/objection.js/#plugins).,1518731244.0
Personalife,Congrats! I use it with our GraphQL mutations. the Insert/update graph methods help loads!,1518663172.0
Yonben,"As a heavy Typescript user, how does it compare to TypeORM ?",1518680010.0
JavascriptFanboy,"Well it seems a lot like bookshelf.js, which comes from the same developer as knex.js, upon which objection.js is made (and bookshelf.js as well). has anyone used both and what is the main difference?",1518649200.0
sioa,"One thing about objection.js, let's say when inserting my schema has a password field. Now when I am inserting it into the table, I want to hash the password and store that hash and a salt on the table. How can I do that? Should I use something like `$afterValidation` or `$beforeInsert`?",1518709464.0
ilja903,"Only good words about architecture, every ORM should use knex under the hood. Is bookshelf totally deprecated?",1518771166.0
Capaj,We've switched to it from sequelize on a medium sized project and it's been great. Sequelize mostly doesn't give me any autocompletion when I am trying to write a query. Objection.js holds your hand every time. ,1518651125.0
mrjking,Where do you define the table columns in the model? Docs seem to leave that part out =/. ,1518716266.0
ouralarmclock,What’s with newer ORMs not including migration generation? I just imagine 100s of projects where someone changes something in the model but forgot to hand write a migration to update the columns in the DB. For document based DBs it makes sense but for RDBMS it seems risky. ,1519102704.0
chrwei,do you mean websockets?  like socketio or ws?,1518621994.0
kapv89,"I am not sure why you cannot use something like knex.js for migrations and why are you using `node-pg` to connect to the database. Maybe if you elaborate a bit more, I might be able to help.",1518629556.0
bigorangemachine,[Sequelize Migrations](http://docs.sequelizejs.com/manual/tutorial/migrations.html),1518802973.0
bel9708,dotenv is pretty sweet. Going to be hard to beat. ,1518712391.0
jeffijoe,"Yenv author here. :)

In case you're wondering what Yenv can do over dotenv, here's a quick summary:

* **Importing** other config files (composition)
* **Type coercion** (so running `DO_STUFF=true node app.js` will result in `typeof env.DO_STUFF === 'boolean'`
* **Strict mode**, ensures you don't use unspecified environment variables
* **CLI** for exporting the composed set of env vars so you can paste it into your production provider",1519373004.0
ncgreco1440,Setting env vars before you boot up your node app is too hard? ,1518617145.0
breadcrumple,Great article about probably one of the most important tools for building modern and flexible business applications,1518608946.0
dethwhores,Good shit,1518609102.0
nmaggioni1,Excellent!,1518614099.0
guachiman507,Amazing article!,1518618373.0
brodega,Fantastic article.,1518621211.0
BaconBrad,I recommend using [Cheerio](https://github.com/cheeriojs/cheerio) instead. It is like jQuery for htmlparser2. So in this case you could just use .attr(); to get an attribute. Additionally you can manipulate the parsed HTML just like you were manipulating the DOM from jQuery. Way easier.,1518574856.0
erulabs,"If it did, boy would that be a headache. Assuming you properly clean up the reference, and your operating system is sane, no, there should be no ""lingering"" reference - to put it another way - there would be no memory leak.

FWIW, a nodejs instance running express4 can handle a _billions_ http requests & redis calls without leaking a measurable (read: any) memory, as seen in production.",1518582337.0
tttim45,"pm, forever, nodaemon, and supervisor in case you miss something in your refactoring.",1518594983.0
RatonBroyeur,"Did know for unhandled promise rejection. But did not for managing it by ""process.on"".

Thx for the link :)",1518676099.0
pubesxoxo420,"Step one: place windows server in trash
Step two: deploy node app to linux server",1518561102.0
to_wit_to_who,I use PostGraphQL for the same purpose. It's amazing. ,1518564643.0
MCShoveled,"🤔

Is it just me, or does this make anyone else cringe?",1518569657.0
benjaminabel,Discovered GraphQL about a week ago and now I'm in a process of adding it to my existing API. That's just amazing how flexible this thing is.,1518606814.0
SkaterDad,"Here are some topics to research:

 * **Reverse proxy/http server** - this is a program that runs on the server and directs requests to your frontend/backend depending on the URL.  These typically handle your HTTPS certificates also.   Some choices are **NGINX** and **Caddy**.  For example:  your react app is running on port :3000, your keystone app on :3001.  The reverse proxy, which is running on :80 or :443, will direct traffic appropriately.

 * **Process Manager/Monitor** for your Node app(s).  **PM2** is a great one.  Forever is another.  These ensure your Node apps are always running, even upon server restart (if configured correctly).


Digital Ocean has some great documentation on getting some of those pieces set up.",1518557329.0
alphaindy,Its a bit surprising to see cheerio being used more than packages like rimraf/handlebars,1518554330.0
codearoni,"I think it's interesting that you only need 52 dependents to make the top 1000 list. This tells me that out of the hundreds of thousands of packages on NPM, a select few are used unanimously across the board. That might sound like a bad thing, but on the contrary: it tells me that there are ""standardized"" (or near-universal) ways of doing things...kind of in contrary to all the JS-fatigue people have been moaning about.",1518571261.0
slaymance,"Great info about error handling! I find mine has been a bit inelegant with async/await, so definitely useful.",1518536810.0
timgfx,Really useful! Thanks for sharing:),1518550911.0
__radmen,"One thing about stubs of async functions. Those stubs should **always** return a Promise (either resolved one, or rejected).

Otherwise things may go south. 

`sinon.stub()` has methods which mock returning a promise - `resolves()` and `rejects()`",1518590236.0
50653,`util.promisify` seems too magical and hacky for me. For filesystem stuff I really like using `fs-extra` instead: https://github.com/jprichardson/node-fs-extra,1518565213.0
Sythic_,"What you're talking about is literally called the Chaos Monkey, developed by Netflix. You can use their tool to kill random containers here: https://github.com/Netflix/chaosmonkey",1518525949.0
grajagandev,There is a company called Gremlin which does this as a paid service,1518567471.0
,"I replied elsewhere but let me tell you what I usually do using express, node, and sequelize.

I usually only use async / await for functions I declare and being totally asynchronous.  In other words, I would not use async like they use it here in this example, because only one part of it is asynchronous (the db call).  Instead, I would move the DB call to a separate function that I would declare as async.  Use the method that I just created in the anonymous callback after in .get, and use .then and .catch chained onto the function.

something like:

    async function myAsyncFn(text, id) {
      return await db.query(text, id);
    }

    router.get('/', (req, res, next) => {
      const text = 'SELECT * From etc etc etc';
      myAsyncFn(text, req.params['id'])
        .then((results) => res.send(results))
        .catch(err => res.sendStatus(// error code here));
    });",1518492686.0
dangerzone2,"I wonder if the db driver uses async/await?  Maybe make a dummy db.query function for practice.  You can pass the sqlString as 'fail' which will reject so you can practice with the try/catch as well.  I always learn better this way.

    function query(sqlString) {
        
        const sqlReturn = [{
            column1: 'row 1 column 1',
            column2: 'row 1 column 2',
            column3: 'row 1 column 3'
        },{
            column1: 'row 2 column 1',
            column2: 'row 2 column 2',
            column3: 'row 2 column 3'
        },{
            column1: 'row 3 column 1',
            column2: 'row 3 column 2',
            column3: 'row 3 column 3'
        }]
    
        return new Promise((resolve, reject) => {
            
            if (sqlString === 'fail') {
                
                return reject(new Error('Query failed'))
    
            }
    
            return resolve(sqlReturn)
        
        })
    
    }",1518471536.0
___Grits,"I’m assuming that the library that you are using for your database does not return a promise and is instead providing a callback. 

You can wrap the callback in a promise yourself and be able to use async await with it, or find a library that supports promises.

Example:

// wrap library in a promise and resolve the row or
// reject the error. Your arguments in the callback 
// May be different 
const sql = (query) => {
    return new Promise((resolve, reject) => { 
        db.query(query, rows => resolve(rows[0]), reject);
    });
};
  

// use your new wrapped library to 
// query your DB, woo woo 
Const result = Await sql(‘SELECT ...’);

I’m on mobile so my formatting may be shit. ",1518488864.0
tobegiannis,"Async error handling will be handled in express 5.  Until that comes out you can use or write a simple library that handles async errors.  

I wrote a simple 50 line long wrapper that will get removed when express 5 comes out.  All it does is wrap the passed in function(s) in a try catch and calls next(error) if there is an error and then adds it to a router.  


`const router = new PromiseRoute()
  router.get(...
  module.exports = router.toRouter()
`",1518500039.0
tswaters,"That looks fine - if the db is behaving correctly. 

My guess is you are using `pg`, there is an error occurring, and it's going unhandled. Express 4 doesn't support returning a promise from a route.  So, two options:

(1) wrap the entirety of the router code in a try catch, and `return next(err)` in the catch block:

    router.get('/', auth, async (req, res, next) => {
      try {
        const {rows} = await db.query(text, [1])
        res.send(rows[0])
      } catch (err) {
        return next(err)
      }
    }

(2) use promises instead.

    router.get('/', auth, async (req, res, next) => {
        db.query(text, [1])
          .then(({rows}) => res.send(rows[0]))
          .catch(err => next(err))
      }
    }

This could be a db connection problem.  You don't define where you get `db` from, but typically you'll want to setup a pool at initialization time and plop it on `app.locals` and call into `connect` to get a client from the pool.

    app.locals.db = new Pool({...opts})

and in your router, 

    const db = await req.app.locals.db.connect()
    const {rows} = await db.query(text, [1])
",1518504723.0
Move_Zig,"What's wrong with

    router.get('/', auth, async (req, res) => {

      const text = 'SELECT * FROM public.sale WHERE product.companyID = $1';

      try {

        const { rows } = await db.query(text, [1]);

        res.send(rows[0]);

      } catch (err) {

        res.status(500).send(err);

      }
    });

I usually use my own subclasses of Error so that I can detect the type of error in the catch block and send the appropriate HTTP status code. Like if rows is empty I throw new HttpStatus.NotFound('no sales found')
",1518882166.0
SlightlyLethalDev,"To catch an error with `async/await` you just use `try/catch` as normal. As for why this isn't fulfilling, I'm not sure; it looks correct to me. Does this query work as designed if you use a callback? If you get anything back, what is `rows` actually being set to? I'm not sure if the issue is the DB query itself returning undefined or the function not awaiting the return correctly (though it should be).",1518468043.0
dolchi21,"if generally do it like this:

    router.get('/', (req, res, next) => Promise.resolve().then(async () => {
        // do stuff...
    }).cath(next))",1518480180.0
indeyets,"http://koajs.com 

I know that's not quite what you requested, but that's just a hint from my experience.  Koa has less batteries included but async is ""natively"" supported and the framework is in every possible way much more comprehendible.",1518498017.0
__radmen,"For last few month I'm writing an application which will be released soon on production environment. 

It's true that Adonis *looks like* and even *feels like* Laravel. It's easy to start, has decent docs and has few useful tools/modules available out-of-the-box. IMO it's safe to say that it follows Laravel philosophy.

Unfortunately I stumbled many times into some bugs, weird behaviours or inconsistencies. I'd say that it's still not 100% stable.

One thing I don't like about framework is that it introduced **lots** of own packages. Some of them are reinventing the wheel. 

What else? Virk (Adonis creator) is very helpful, responses quite quickly to open issues and is open for contributions. Yet, he seems to be only active maintener of this ecosystem. Bus factor for this project is quite high.",1518468132.0
keeross,"The 4th version of Adonis is pretty rock solid, in the next few weeks I am going to release a production ready application for a client.
So far while in development I must notice that in comparison with Rails it feels less magical and much more maintainable, can't say about Laravel, never tried it.
If talking about multiple packages written specifically for Adonis, well, I think it was done for two reasons, the first one is consistency and reliability, the second reason - no bloadware, no unnecessary code and etc.
Overall I am very happy with it, as community will grow, the one-man framework will continue to evolve into something more democratic I think.",1518712552.0
amanvirk,My reply to all these questions https://twitter.com/adonisframework/status/964372688952164352.,1518759405.0
AfonsoD3v,"I'm almost putting in production a project based on Adonis 4.

I came from Laravel so Adonis e very familiar.

For those that think that every thing is already done and cannot be done better, let my say this: there is always space for evolution and Adonis is light years better than most of the nodejs frameworks.

Why? The same reason Laravel is the best in PHP Framworks. It is a pleasure to work with this tool. Like Virk said, it is the overall experience. If I had more knowledge in JS, I would jump in and help the project.",1518792886.0
amanvirk,"Everyone who thinks re-writing the packages for good is bad, you can use all the standard libraries with express and have fun.

Regarding the bus factor, that is true for a new startup and also for a family where one man is the sole earner, so don’t join a startup unless it has 2 or 3 co-founders and no girl should marry a guy whose going to alone feed the family",1518529009.0
wrobbinz,"IMO it's the best Laravel/RoR style Node framework. I haven't used it in production, but it's a dream to work with as I'm developing. Only thing missing in the latest 4.x release is a robust websocket support which is being [worked on currently](https://github.com/adonisjs/discussion/issues/51#issuecomment-364662505). Additionally, the contributors have plans to make prod deployment a plug-n-play process: https://github.com/adonisjs/discussion/issues/52",1518464527.0
Capaj,"I am used to writing backends in koa/express and I absolutely hated that it has it's own packages for everything. That might sound like a good thing at first, but as soon you start to use them you realize that they are just a cheap knockoffs of some popular package out there. Unlike the popular package, these aren't nearly as thoroughly tested and they are updated very little compared to their more popular NPM counterparts.

Node.js is about small packages which fit together nicely. Adonis goes against that which is bad. Just my 2c.
It's going to fail the same way sails.js failed. It tries to do to many things instead of doing one thing well.",1518473329.0
eggy900,Yes but version 3. We can’t migrate to v4 until it supports soft deletes but we are developing new project in v4 but it’s not due to go into production for a few months. There’s a lot of good improvements ,1518473656.0
marinespl,"Lot of reinventing the wheel (eg. its own ""require"" function which breaks all editor autocompletion features), bugs, its development barely breathing, docs don't cover some topics. It's nice to code in it  most of the time but I don't think it's worth to invest your time into pushing it into production.",1518514381.0
ilja903,"It seems good, but I see no reason in building framework with its own routing, server, migrations and templating engine etc. Maintaining could be a nightmare after 5-7 years",1518510273.0
,"Adonis 4.0 is rock solid we have both Adonis 3 and Adonis 4 in production currently, the Adonis 3 application will eventually be upgraded but for now it's stable and functional.",1523855847.0
moltar,"At first, I enjoyed the framework, and I guess still do.

But the maintainers and community leaders are children on a high throne. They cannot discuss issues and reduce any constructive conversation to name calling and refusal to communicate at all.

Thus, I would not recommend building anything serious with this project, as you won't get any support if you fall out of favour with the maintainers.",1529608616.0
andycharles,Actually the class has only one instance and hence the state will be mixed between multiple http requests,1518774572.0
chrwei,"certifications of any kind are only worthwhile to people/orgs that look for that specific rating.  

look for listings for the kinds of companies that you want to work for and see what certs they value.  don't be afraid to call and ask as well, even call companies that aren't hiring but that you might want to work for.",1518462092.0
bc_tech,"Not exactly what you're looking for, but [this online workshop](https://objectcomputing.com/training/catalog/web-application-development/javascript-web-applications-using-nodejs-and-express) may be a good resource for you.",1518620709.0
993VQzn06,"Love the sound of this, does anyone have any tips for submitting CFPs?",1518462403.0
zayelion,"- When validating information and structure from external sources. 
- Yes, it is used when inserting and patching this protects against and isolates API changes or deviations that happen due to business pressures outside of ""happy path"". ""I asked for it this way, you gave me it this way, therefore you get a big fat error.
- JSON is a string (its a notation representing something method of something else),... it has to be converted to an in memory object to be manipulated. If you are using an ORM like mongoose you have to define a schema sometimes you can have these be the same code/objects. I dont recommend doing this by hand.
 ",1518459883.0
cyanydeez,Validation server side is important... client side is convience,1518446355.0
mitchjmiller,"Great little library, but be wary that it doesn't play very nicely with some asynchronous implementations within other libraries; e.g. redis modules, async etc.

Normally you need to bind things like event emitters for it to continue working down the stack, and if these are used within other modules you sometimes need to tweak/wrap them.  E.g. [cls-redis](https://www.npmjs.com/package/cls-redis)",1518439069.0
kjnsn01,"Yep node is single process, so this would work fine (you can just declare a variable in the top of your file). Using redis is also an option, and means your data would survive process restarts",1518433410.0
chrwei,"if you use a global array as a fifo you just need to be able to track array indexes per client, but also make sure no read client is behind the writing client.

you might also be able to use filesystem fifo file instead, assuming there's tool to read and write mjpegs already.  looks like there is one that's made to work with the Pi's camera, might be able to modify that to take a stream from a client instead of the camera.",1518448865.0
IUsedToBeACave,I assume you want them to work for free?,1518389000.0
JustinsWorking,"REST or Socket are both just communication choices.

They are really quite trivial steps after the chat system is working.
To support sockets it sounds like you want the chat to be event based, so I would first build an event based chat with the features you require. This would be fairly straightforward, as well you could probably wrap the whole thing in automated tests (ie join user, say hi => expect everyone to get message “hi” from “user”)

Once the chat system is created you can then add communication layers all you want. You can simply implement sockets by serializable your actions, or build a rest API by mapping The REST requests to actions to put in your chat system.

Once you have the chat working, implementing REST or a simple Socket protocol should be trivial, maybe less than a days worth for both.",1518369978.0
Bluecewe,"You might find it helpful to look at some real world examples of solutions to your general problem.

For instance, the Discord API is [pretty well documented](https://discordapp.com/developers/docs/reference). In brief, Discord is a text and voice chat app. Its API has two layers. First, a REST API, through which almost every action is done (including posting messages, but excluding voice state), and from which almost all information can be retrieved (messages, channels, members, guilds). Second, a realtime WebSocket, over which events are sent from the server to the client (like a new message), and to which a small number of commands are sent from the client to the server (like making the user join a voice channel).

As an aside, I would note that, depending upon the scope of your platform, Socket.io may not be appropriate. This is because it has a certain way of doing things, a feature set beyond what you might need, and requires the client and server to use the respective Socket.io libraries. You may find it useful instead to have the flexibility of rolling your own WebSocket client and server, suitable to your precise needs, and those of potential third party developers using your public API.",1518405193.0
BeLikeElon,"The REST api could very well be in charge of things like auth, updating, holding user data etc. The chat itself is socket.io ",1518364514.0
XAssumption,"For this app, WebSockets should be used for any communication that needs to take place between many clients and a server in real-time and a REST api should be used for any form of CRUD.

This means that things for things like posting a message, you would both emit SEND_MESSAGE, which updates the other clients (client -> server -> client) and also perform a post request to the messages route, which saves the message in your database (client -> server).

The significance of doing this is that it separates your socket logic from your api logic so you get code that's a lot easier to understand and follow.",1518373323.0
apatheticonion,"As stated previously in this thread, the transfer protocol isn't really the important part.

I'd package away the business logic into a services layer which talks to the db and receives/passes data down to the com layer.

Typically I'll use promises for REST stuff and RXJS for WS stuff.
",1518397772.0
dluecke,"https://feathersjs.com deals exactly with that question. It allows to expose your APIs through both, a traditional HTTP REST API and websockets and if you use websockets you will also automatically get real-time updates. You can use both transports interchangeably and websocket clients will always get real-time updates no matter where the original update came from. 

Even when used via websockets, the communication with a Feathers server is still RESTful. Although most often used in the context of HTTP, Representational State Transfer (REST) is an architectural design pattern and not a transport protocol. The HTTP protocol is just one implementation of the REST architecture.

Feathers has grown out of several years refining and unifying the REST architecture and websocket message format while still just being a very small wrapper over Express and different websocket libraries so I think it would definitely be worth having a look at for your use case.",1518457706.0
dvlsg,"App logic? Neither. Don't ever put your logic in your communication layers.

Especially since you aren't sure if you want REST or sockets. If you implement your logic somewhere else, it's _way_ easier to swap (or add the one you didn't have originally).",1518384746.0
Capaj,"I would opt to use GraphQL with WS as communication layer. You can roll with just a raw messages sent over socket.io, but if you want good documentation, GraphQL has you covered.",1518380601.0
MattBlumTheNuProject,That comma-first makes my head want to explode. ,1518364072.0
,[deleted],1518363920.0
soulsizzle,"I'm fairly certain that NPM's styled is based on [Standard JS](https://standardjs.com/) style. You can reference their site for eslint or editor plugins. However, I strongly recommend looking at their [GitHub repo](https://github.com/npm/npm). Almost nothing in NPM's code base actually looks like what you posted above.",1518364902.0
Buckwheat469,https://i.imgflip.com/24djcu.jpg,1518378219.0
k10g,I would stop working in this code base. ,1518371833.0
flipperdeflip,`setOnFire()`,1518427559.0
ReefyMat,"* What do you type faster, ""delta"" or ""∆""?
* Which one do you type faster if you don't know how to type ""∆"" at all?
* Does everyone of your team know what ""∆"" means?

Do you still consider it to be a good idea?",1518349465.0
toadkicker,A peer of mine wrote a Java app in Spanish. He did it just to prove no one read or cared about the projects they kept giving him. Then his supervisor had to pull him aside and remind him there are people who will later work on his projects and he should consider the creative privilege they handed him to start a project from scratch.,1518350474.0
Mingli91,It’s just awkward to type out for most people so I would avoid for that reason alone,1518349457.0
Tvde1,Why would you want that? That's like using emojis. It makes your code unreadable.,1518354948.0
otheranotherx,I wouldn't mind that if you are implementing a lengthy math formula that likely won't be modified in the future. But that's the only context I can come up where its justified.,1518350283.0
,"Send them [here](https://www.ioccc.org/) and while they marvel at what's possible delete all their code.
",1518353920.0
safeTell,"You could, but in adition to what others said, I would not recommend do to unicode issues. It has a great chance of breaking things when you have to transfer / store the variable, I.E: In JSON format. Saving it to a file or sending over the network will potentially will cause unknown stuff.",1518356913.0
,[deleted],1518363238.0
phlarp,Why stop at Greek characters? Go all in on [Emoji Code ](http://www.emojicode.org/) ,1518375587.0
gpit2286,"I did a project where the company name was Omega so I used Ω as the factory class name.  

But I was the only developer and it's really easy to type on my keyboard (Option + z) ",1518376607.0
Tioo,"I like to use `Σ` when the variable represents a sum.

    [1,2,3,4].reduce(
        (Σ, n) => Σ + n, 0
    )

I think is conveys the meaning similarly to

    [1,2,3,4].reduce(
        (sum, n) => sum + n
    , 0)

However, it requires copy-pasting a character / remembering a code which is tedious. Also, those unfamiliar with the project may be confused. A comment to explain could be added. 

In the case, the variable is short lived so it is not important to remember its name for later. All the uses of this function are on the same line / block. 

But if the greek name it had to be called from anywhere else, it would cause a substantial problem. 

It does look cool though – it is similar to the mathematical notation

Overall, I consider that I can use this in solo projects, for local variables. ",1518394704.0
BenjiSponge,"Shameless weird plug. I want someone to notice it.

https://github.com/rivertam/aesthetics",1518406266.0
Tvde1,Send any code?,1518355138.0
T-Dot1992,Nested ternaries are bad. This article is bad and Mr. Elliot should feel bad. ,1518330517.0
sobri909,"    if (!conditionA) { return valueC; }
    if (conditionB) { return valueA; }
    return valueB;

Early returns are easier to read and understand than complex conditionals.",1518333643.0
toadkicker,The world of absolutes in programming is the joy of ad revenues for blogs.,1518330082.0
jhartikainen,"This is like taking all normal programming wisdom to forcefully bend it into supporting some weird idea like this.

Yeah no.",1518331905.0
Robinlemon,"‘Less code = less surface area for bugs = fewer bugs’

MY EYES",1518346072.0
DevMunchies,"if javascript treated `if` statements as expressions this wouldn't even be a debate and ternaries would be pointless.

    const z = if (x) 1 else 2;",1518332226.0
MrNutty,"Mix of both:

if(!conditionA) {
  return valueC;
} else {
  return conditionB ? valueC : valueA;
}

Nested terniary is bad. If you get to that point it’s a good indicator to refactor and rethink your logic. 


Also in authors example he seems to suggest condition(A|B|C) are very short when in reality they are not. ",1518369075.0
nschubach,"Other arguments aside:

    const withTernary = ({
        conditionA, conditionB
    }) => (
        (!conditionA)
            ? valueC
            : (conditionB)
            ? valueA
            : valueB
    );

I kind of hate that conditionB's values are not indented like conditionA",1518375500.0
Gokuroro,"The way you're doing, it is probably best that your page accepts a get parameter and just do something like /page.html?cat=categoryname and use that to filter the data.

As for the specific way to filter the data, defining a new variable with defs.filter(def => category == null || def.category === category) and use that variable instead of the original should do the trick.
",1518296746.0
frurre,"There is no need to overcomplicate matters server side. Current route request is fine, 
maybe return JSON data on connection. 

Sorting logic should be made on the client side (why make multiple calls to the same JSON Data?).  Use jquery or what you prefer to sort the list. Turn it in to an array, compare it to the category selected, remove all not matching and update DOM.

I'd recommend socket.io for ease of mind with server/client if you are planning to rewrite your json file often and need to update client about new stuff. It is a great AJAX module.",1518310805.0
Kilawaga,"Each button could have a data-category attribute with the category name, when they click on the button a function is executed which retrieves the data-category attribute value which you can then use in a querystring appended onto an endpoint /yourendpoint/?cateName=data-category.

On the back end, since you're not using a database, it could be as simple as finding a reference to the request query (req.query.catName) using an Array.prototype.filter(el => el.category === req.query.category) on the category array and sending the new array. 

This of course depends on how big of a payload we're talking about. It might be easier to sort on the client side like some are suggesting, and in fact, this same method should work fine on the client side with a few adjustments.",1518329914.0
redrider65,[Datables](https://github.com/DataTables/DataTables) is perfect for this.,1518332181.0
jesusgn90,"The idea just born, and it’s only for educational purposes. I want to learn about ML, parsing language, etc. This is not for commercial purposes.",1518295656.0
icanevenificant,The repo is just boilerplate?,1518347066.0
tacobellscannon,"One of your problems may be that you think you have a synchronous query function when you actually don’t. Is `connectionSync` actually synchronous? I looked at the [mysql2 library documentation](https://github.com/sidorares/node-mysql2) and it looks like the function you’re using (`connectionSync.query`) is expecting a callback, indicating that it is actually an asynchronous function. Your code uses it as if it were synchronous, which could be part of the problem.

Your confusion might stem from the difference between `mysql2` and `mysql2/promise`. You might be assuming that since the first one doesn't use promises, that means it's synchronous. But that's not correct: the first one is still asynchronous, but it uses callbacks instead of promises.

What you should do is use the mysqlPromise library for every call and use `await` if you want it to act synchronously. There's no reason to use the callback version of the library.

I would suggest making `userToEvents` an async function as well, as you're already using `await` when you call that function. That way you don't have to wrap the body of the function in a Promise, and you can use `await`inside the function to ensure that your asynchronous operations happen one-at-a-time (assuming that's what you want).

In case you're confused about the relationship between await/async and Promises, just want to make sure this is clear:

**Async functions automatically return Promises.** If you return a value in your code, the Promise returned by your async function will resolve to that value. If you return an actual Promise, the Promise returned by your async function will resolve to whatever that Promise resolves to (you can basically think of it as the same Promise). That's why you can call `await` on an async function and it will just automatically work... the async function is always going to return a Promise, which is what `await` expects. There's usually no reason to wrap a function body in a Promise if the function itself is async... it's essentially doing that for you.",1518296338.0
NorseSock,"A single promise does not make all promises/code within it execute ""synchronously"" by default. You have to call the resolve function once the inner asynchronous operations have finished. 

As far as async/await go, they are using promises under the hood and are pretty much just a nicer way to interact with them. An async function returns a promise where return/throw map to resolve/reject. The await keyword is basically `Promise.then(() => {...});`.

---

In `userToEvents`, you are resolving the promise you created before the database queries complete. Each call to the database is asynchronous and returns a promise, so you'd need to wait for them to finish before resolving. Your function would look something like:

    function userToEvents(conn, userId, eventIds) {
        return new Promise((resolve, reject) => {
            var idArray = eventIds.split("","");

            // delete not needed relations
            const deletePromise = conn.query(""DELETE FROM useradmin_user_events "" + 
                ""WHERE user_id = ? "" + 
                ""AND event_id NOT IN (?)"", [userId, idArray]);

            // This executes after the delete has finished
            // and returns the promise from the select query
            const selectPromise = deletePromise.then(() => {
                return conn.query(""SELECT * "" + 
                    ""FROM useradmin_user_events "" + 
                    ""WHERE user_id = ? "" +
                    ""AND event_id IN ?"", [userId, idArray]);
                
            });

            // This executes after the select has finished
            // and resolves the promise with the value
            selectPromise.then(([query, qwe]) => resolve(query));
        });
    }        

or with async/await:

    async function userToEvents(conn, userId, eventIds) {
        var idArray = eventIds.split("","");

        /**
         * Wait for the promise returned by conn.query to resolve.
         * 
         * Execution of the ""userToEvents"" function is ""paused"" until it does.
         * 
         * We don't care about any values returned by the query, 
         * so it doesn't need to be assigned to a variable
         */
        await conn.query(""DELETE FROM useradmin_user_events "" + 
            ""WHERE user_id = ? "" + 
            ""AND event_id NOT IN (?)"", [userId, idArray]);

        /**
         * This will not execute until the previous promise 
         * (the delete) has finished. 
         * 
         * Wait for the conn.query promise to return the
         * results of the select query whenever it finishes.
         * 
         * Like before, the execution of the ""userToEvents"" 
         * function is ""paused"" until it does.
         */
        var [query, qwe] = await conn.query(""SELECT * "" + 
            ""FROM useradmin_user_events "" + 
            ""WHERE user_id = ? "" +
            ""AND event_id IN ?"", [userId, idArray]);

        /**
         * This will not execute until the previous promise
         * (the select) has finished and assigned its result to the 
         * query and qwe variables.
         */
        return query;
    }    

",1518297383.0
1-800-BICYCLE,"I think you'd get most of the way there if you completely replace 'mysql2' with 'mysql2/promise' (e.g. only include `const mysql = require('mysql2/promise')` in each file) and `await` every call you make to it.

Part of what's confusing is that the original `node-mysql` API tries to add some magic to avoid (99% of the time) unnecessary callbacks. For example, `createConnection` is async but will automatically run prior to `cxn.query` if you dont explicitly add a callback. Just remember that you *must* `await` everything in the Promise wrapped api, otherwise your assignments will be Promise-wrapped values rather the values themselves. ",1518306726.0
mansfall,"I've been a programmer for over a decade, and I the node.js world for a few years now.  This is done pretty well.  Some of the code style is known as destructuring. The promises are done to create async functions.  He uses dependency injection to allow for inversion of control (ioc).  Makes unit testing easier and promotes composition over inheritance, which also means less coupling.  

The event emitter is part of an event driven design, which also reduces coupling.  Objects emit a particular event, while other services can subscribe to that same event (said another way, have a listener...) to take action and do something. 

Mongo is used as the db which might work here in these individual micro services, but questions remain on how relational his data is.  So can't say off the top of my head of using nosql was a good or bad choice.  Could be massive headache down the road depending on data.... Or it might not be.  Just don't take mongo for being a magic bullet whenever you need a database.

He also uses tdd to build this project which usual pays for itself in the end.

Also appears to stay out of callback hell, which is a big deal in nodejs.

Overall I'd say this is done quite well.  Perfect?  No way.  But perfect is the enemy of good.

Is there some particular code syntax you don't understand, or don't think is done correctly?",1518287358.0
twlatl,"It’s a good article. The code style is ES6 or higher, and if you ever do any modern React development, you’ll most likely use this style. ",1518296486.0
Tayk5,"The author is using ES6 syntax similar to what you'd use in Frontend frameworks like React. This is the norm nowadays and you'll be expected to know it if you're working with other Node developers.

As for the rest of the tutorial, I tried following along with it but it's written in broken English and the folder structure he uses in the article differs from the one he uses on his Github repo. I'm sure this is a great article to get an overview of microservices from but it's just very sloppily produced.

This post on node and docker microservices seems like a better read http://mherman.org/blog/2017/05/11/developing-microservices-node-react-docker/#.Wn99HGTxyL8

EDIT: Add link to article

",1518303369.0
JustARandomGuy95,"I've also found that tutorial, and couldn't follow it due to the guy's code style.

I am not sure if he's trying to look overly smart, or he actually codes that way, but I don't find it intuitive at all. I prefer the ES6 class syntactic sugar any day of the week...",1518286394.0
MrStLouis,"Ya, check out promise all. It'll return the results as an array ",1518292539.0
WeaponizedMath,"function_final(list, cb) {
list.forEach(li => { li(cb) })
}",1518289556.0
PatskyPat,"This tutorial will help you with your example -> [“Promises, async/await”](https://javascript.info/async) - it explains callbacks (including callback hell) and will guide you through converting callbacks to promises to async/await with good examples.
Really great resource to learn and understand this.",1518301085.0
tswaters,"There's a few ways to do this.  If I had a problem like this I'd probably pull in the `async` library to keep things clean.

    async.parallel([function1, function2], (_, [msg1, msg2]) => {
      console.log(msg1, msg2)
    })
    
Your other option is to nest the function calls... something like, 

    function1(function (msg1) {
      function2(function (msg2) {
        console.log(msg1, msg2)
      }
    })

If I'm in a more modern code base that uses async/await and promises and had this callback-based api I need to work with, I'd wrap with `new Promise` and use the async keyword

    const function_final = async list => {
      const [msg1, msg2] = await Promise.all(
        list.map(item => new Promise(resolve => item(resolve))
      )
      console.log(msg1, msg2)
    }
",1518286937.0
floodlitworld,"    var function1 = function(cb) {
        cb('done 1');
    }

    var function2 = function(cb) {
        cb('done 2');
    }

    var callback = function(text) {
        console.log(text)
    }

    var function_list = [function1, function2];

    var function_final = function(functions, cb) {
        for (let i = 0; i < functions.length; i++) {
            functions[i](callback)
        }
        cb(""All Done"");
    }

    function_final(function_list, callback);",1518304732.0
martiandreamer,"If you’re us my Node 8, check out core “util” library’s promisify function, along with async/await. 

",1518349068.0
FINDarkside,"JWT has 3 parts, header, payload and signature. Before sending the JWT you sign the token which means that you hash header and payload using your secret key. The result is the signature, last part of the token.

When the user sends their token to your server, you again compute the hash of the headers and payload using your secret key. Then you compare the signature to the one that the JWT contained. If they do not match, the token has been tampered.

Your server will not know if the token was stolen, it will only know that the token was issued by you (or someone who has your secret key).",1518281538.0
Maharyn,"It doesn't. It just knows whether the token is issued by it (well, something that knew the secret), and hasn't been tampered with and isn't expired. That's what verification does by default, at least if you're using the jsonwebtoken module.

This is why doing all you can to prevent the token being stolen is important, and why JWT auth is typically implemented with a short-lived access token (5 minutes, for example) and a long-lived refresh token that you can use to get an access token, but can also revoke server-side, so that if a token should be stolen, you can prevent further invasion.

The need to do this is why many advocate for the use of sessions rather than JWT. That's not a debate I'm going to go into here, though. It also depends on what your backend needs to serve. Which option is best (or necessary) isn't a single, unchanging answer.",1518282040.0
Akkuma,"There are a few solutions here. For one you can switch to JWE rather than JWS and then no one will be able to see the data without the key to decrypt it. The other thing you can do is do something like increasing the security of the JWS/JWE by forcing it to have additional data that locks it down to very limited use. This includes using the url of the request and a low token life. That means you can do something liek force the JWS/JWE to only be valid for a single endpoint by adding it into the JWS/JWE and for let's say 5 minutes or less.

My company used something along the lines of headers, header data, a hash of this, the request endpoint, short life, etc.. This made stealing a token essentially worthless as it was locked down with the same data getting passed over and you'd have to use that same token within 5 minutes of creation.",1518399447.0
andvgal,"Half of problem is when user identification is stolen. A much bigger problem - if authorization depends on data in JWT payload as it's advised by JWT evangelists, Once secret key is exposed (e.g. leaked or bruteforced) then whole infrastructure is in trouble. At least, a proper key rotation and separation/derivation per user type has to be implemented.

For best security, JWT must be treated as session ID and processed accordingly with server-side state, user fingerprint & geolocation checking, proper refresh and invalidation. It can be scalable with suitable caching strategy. In such case, signature facility of JWT can be a first barrier before unknown ""session ID"" is passed to centralized session management sub-system for validation and later local caching.

P.S. JWT-like solutions are simple to use, they are pushed into industry, but that creates backdoors on mass scale.",1518286870.0
floodlitworld,"You need mammaMI.post(‘/postcontent’, function() {}) not get. ",1518266363.0
deadlyicon,You never actually responded to the request either. It’ll just hang. ,1518271903.0
,[removed],1518280520.0
cazzer548,"Not that it makes a difference, but tilde and carat are mixed up...",1518288535.0
cspotcode,This still won't pin transitive dependencies; package-lock.json or a yarn lockfile will do that.,1518268256.0
Mingli91,    yarn add package@version,1518285311.0
marinespl,https://nodejs.org/en/docs/,1518262057.0
,[deleted],1518274978.0
seetler,google.com,1518288689.0
indeyets,"Looks like it is not about chat bots or nodejs, but just solving issue of not having a dedicated ip. 

If you have a vm on amazon/do or other similar hosting you can usually do the same with ssh's reverse tunnel",1518273382.0
dk01,Very cool. Thanks,1518270503.0
Fartin_dog,"Great, will try ",1518273593.0
lauren_v2,"Cool article, I've been having Ngrok paid service which works pretty good till now.
I'm an indie developer so those 5$ are just an annoying expense I would like to avoid, so I will give a try to this new tool.

",1518433793.0
martiandreamer,"Are you aware of ‘node —debug-brk  —inspect entrypoint.js’ ?

This will provide you with a ws:// URL, which can be opened in Chrome at chrome://inspect",1518263609.0
oaxacaoaxaca,"You already discovered it but I just want to emphasize how great VS Code is for debugging Node.js apps. And it's being very actively worked on so the awesome dev/debugging features just keep rolling on out lol.

Multiprocess node debugging? Maybe just open multiple instances of VS Code and fire up the debugger in each one? I know they've been working on the whole ""multi-root workspace"" thing for a while but I haven't tried it yet. Maybe that could help too...",1518250704.0
hpeinar,"Personally I use [WebStorm](https://www.jetbrains.com/webstorm/) but I think VS Code has come up to speed with it lately. WebStorm has both remote debugging (if you run your node in docker for an example, or need to debug code that is running in servers through SSH tunnel) and normal ones available with ease and really does an excellent job with them. They also have V8 profiler and support debugging child processes which are ""forked"" from the main one. 

Though I still do a lot of my debugging using console.(log|trace|time|table). It really depends on what am I debugging and where. After years of experience most of the thrown errors I see are already familiar and I know what to look for without inserting any breakpoints or logging. 

It helps to know the language as well, so I'd advise you to skip over this list put together by another redditor:
https://github.com/LeCoupa/awesome-cheatsheets/blob/master/backend/node.js

node.js itself gives you a lot of tools to debug with so get to know them as well. ",1518258581.0
vexii,Chrome dev tools and cleverly placed `console.log` statements... :(,1518304460.0
spmaster007,Atom IDE.,1518274022.0
numinor,Seems like by just console logging I'm losing out. Has anyone got a good resource for utilising VS Code for debugging? ,1518307675.0
nothingduploading,are you wantting to do a diff on the two files or are you trying parse html?,1518231459.0
thissaysotherwise,"without knowing more about what you are trying to accomplish its difficult to say.

If i just needed to get some data from two HTML sources.  My first approach may be to just read the files in as a string and use regular expression to find narrow down to the tag,  then another regular expression to get the detail i need.  This should work well as long as the HTML does not change that frequent.  

if you need lots of conditionals to determine where the data is,  you may be better off parsing the HTML with something like this.  https://github.com/inikulin/parse5
then navigating the structure to find your details.
",1518238751.0
HermiterCove,"Assuming you know some jQuery, the [cheerio](https://www.npmjs.com/package/cheerio) module is easy to use.",1518240759.0
ELIPhive,"Callbacks are a primary & powerful feature of JavaScript. While the nesting has slowly begun to be weeded out due to native support for promises & async/await, the purpose for them, asynchronous programming is a building block for node.js and web programming. 

If somebody has not already helped you to solve this problem, I would recommend you work your way through it. It will take time, yes. I’m not suggesting you turn away kind people who can give you some insight, but if you’re just looking for an answer, I believe you may just be prolonging your own learning. 

If you plan to stick with this & don’t understand the fundamentals of callbacks & asynchronous programming, you will get stuck again, and again, and again, and again, and again, and again, and again, and again................................

If you order a pizza, you may have a doorbell so the pizza guy can let you know when he’s there, but you’re still able to keep cleaning the house while you’re waiting for him to arrive. You can’t eat the pizza until it’s actually there(if you try, you may get an error or find that it’s undefined depending on your situation), but you also want to keep being productive & don’t want to just stand outside your door waiting for the pizza guy to arrive. 


Start with a base example and build from there. Personally, I think the .then() of a promise makes the idea a little bit more intuitive if you’re really struggling with it, just because the syntax reinforces the idea that you first must have ‘x’ data .then(x => {}). At least that is my opinion. 



TL;DR: Pizza",1518229608.0
davidmdm,You can also pm me if you need. Good luck ordering your pizza. I like hawaïen personally. ,1518241699.0
raphaelarias,Change Streams has some very annoying limitations on capacity and what type of queries you can watch. Which makes the oplog tailing still necessary in many circumstances.,1518217470.0
zokker13,"I don't think there are any good books out there that are bound to node. There seem to be a few JS books worth noting but the only one I ever read was [Javascript: The good Parts](https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742). It's a fine read but pure JS.

If you want to dig into nodejs just search for talk on youtube and begin to lurk in this sub. Sometimes you find great talks/reads that you'll adapt rather quickly. 

The problem is that any book written will be outdated extremely fast.",1518207789.0
Felecorat,Just got my free copy of Node.js Design Patterns. And started reading yesterday. Looks promising so far. The post where some one advertised it should be just a few days old. ,1518244230.0
Mcshizballs,I think it’s just called passport local,1518208348.0
,[deleted],1518199501.0
dmvjs,http://timelessrepo.com/json-isnt-a-javascript-subset,1518202876.0
cjrutherford,"I would also like to see an end to end tutorial for authentication with passport and jwt. From what I've seen, the community seems fragmented on how to operate authentidation. There's not one single tutorial that covers the whole process and concerns that need to be addressed with each choice you make in the authentication stack.

Personally I would love to see a tutorial that says ""if you choose to go down rabbit hole x you need to be sure to handle issue/concern Y"" for at least the most common paths.

You would think that something the is ""so easy with passport"" would have a clearly documented process.",1518211858.0
the_new_creative,"Tough question. JWT is really neat because you can add more user information to the token. OAuth is somewhat of a standard. Passport is great too, and can be used to sign in with Facebook and such more easily.
One step you are forgetting is hashing passwords though for which I've used bcrypt.

Edit: would love to have someone with a ton of experience settle this.",1518200692.0
voidvector,"You use `express-session` for Passport session management, it has a list of supported databases.  

JWT is the new paradigm of doing sessions that attempts to be stateless on the server side. It is very nice for some setups (API, serverless). The biggest downside of JWT is lack of good revocation. But that's not really a concern for some configurations (e.g. short lived token with auto-reissuing). 

You can setup a blacklist to revoke JWT, but you might as well go back to traditional session at that point since traditional session is a whitelist model which is better from IT/DevOps management prospective. ",1518202253.0
planit_earth,"Firebase auth is what I'm working on atm, api for sending emails for forgotten password / reset / welcome templates to go out. also using them for push notifications with evollu/react-native-fcm",1518225717.0
TheBeardofGilgamesh,"I use Twillio and a note book, anytime someone wants to access my site Twillio sends me a text of the users email. I then check in my handy dandy note book to see whether of not I marked that email on my list and text back whether of not they're good. ",1518244116.0
the_fdw,"I think the first thing is to sort out your requirements and what each technology does. For example, many of the things you mentioned aren't mutually exclusive.

* [Auth0](https://auth0.com/) is a provider for OAuth2.
* The OAuth2 standard, mostly described in [RFC 6749](https://tools.ietf.org/html/rfc6749) is much more complex than your usual login/logout process - it is a way to authorize an *untrusted* client access to user data stored on a server after authenticating the user. Instead of the usual two parties (client and server), there are now three: client, data server and OAuth server. If you're working with a fleet of microservices, OAUth is a beautiful thing as you can centralize authentication and (to some degree) authorization in the OAuth server, and each microservice must only check if the provided token is valid. It does not need access to the user credentials. And if your microservice needs data from another one, it can just send the same token on, and the other microservice can work with that.
Additionally, with most OAuth flows, the client never sees the user's credentials. This is especially nice if you offer a public API for which everyone can write clients. That's why Google, Facebook and Github use OAuth, for example.
* JWT is a token format standardized in [RFC 7519](https://tools.ietf.org/html/rfc7519) and friends. It is often used in conjunction with OAUth2, because OAuth doesn't specifiy what a token should look like and JWT is nice, and you don't have to design your own format. However, you can also use JWT without OAuth2, if you want. In any case, the token contains (at least theoretically) all the information a server needs to decide whether the user is authorized or not. This data might be secured with a signature (so the server needs to verify the signature), or completely encrypted (so the server needs the key to decrypt the token, or it must verify the token at a central token server).
* An alternative to JWT are session IDs where the server has to verify that this session exists. If all you're doing is a simple, non-distributed service, this might be enough.
* I haven't yet used [Passport](http://www.passportjs.org/), but it seems to be a middleware for express that supports all kinds of authentication/authorization, among them OAuth2 (and through that Google, Facebook, Twitter). However, you apparantely can also use the ""local"" strategy if you only want basic username/password. As such, you can use Passport if you decide on OAuth2 or not.
* Only if you want to store the user credentials yourself should you think about which hashing algorithm to use. This is its own can of worms, and more knowledgable people than me have written about these things.",1518262638.0
general_salt,"This looks interesting. https://github.com/nmaro/ooth/wiki
https://www.youtube.com/watch?v=gZqfrOGqBU4
It's built on top of Passport..",1518426725.0
nothingduploading,I use JWT for everything now. Its not tough to implement.,1518228272.0
NoInkling,"As far as I've been able to tell there's nothing comparable to Devise in the Node world, you're much more on your own. Passport can be very helpful, but it can also be a bit of a nuisance in more complex use cases.

If there's two pieces of advice I would give it's these:

- If you're doing OAuth make sure you understand well the difference between the authorization code and implicit flows, and the reasons you might use one over the other. If you're using Passport, realize that the popular OAuth strategies (e.g. `passport-facebook`) are for the authorization code flow, and there are alternative packages available for the implicit flow. If you don't wanna bother with all that, use Auth0 or something similar.

- JWTs have some issues which make them not exactly ideal as a session mechanism, and can require quite a bit of added complexity to implement them robustly. But they have advantages in certain situations too. Prefer cookies if it's not something you wanna spend a lot of time researching. Or once again, just use Auth0 and let them and their libraries handle everything.",1518230680.0
ilja903,Google: feathersjs and feathers authentication management,1518245723.0
mauvm,We're using Auth0 at our company. Combined with jwks-rsa it is super easy to implement a decent authentication procedure. Have a look at express-jwt. ,1518260928.0
boxhacker,"Jwt has a tonne is issues and misconceptions and is generally not a good choice over standard secure cookie based sessions.

Node session will allow you to store and manage sessions and it’s quite easy to send a base64 name:pass via an Authorization header.",1518385792.0
OF_Shervin,Wow thats nice feature!!!,1518194931.0
LynusBorg,"This is a ManyToMany Relationship. There's an example in the Objection docs in the chapter about Relations:

    class Person extends Model {
      static tableName = 'Person';
      static relationMappings = {
        movies: {
          relation: Model.ManyToManyRelation,
          modelClass: Movie,
          join: {
            from: 'Person.id',
            through: {
              // Person_Movie is the join table.
              from: 'Person_Movie.personId',
              to: 'Person_Movie.movieId'
            },
            to: 'Movie.id'
          }
        }
      }
    }

For your case, it would probably look like his:

    class Account extends Model {
      static tableName = 'Account';
      static relationMappings = {
        posts: {
          relation: Model.HasManyThroughRelation,
          modelClass: Post,
          join: {
            from: 'Account.id',
            through: {
              // Like is the join table.
              from: 'Like.account_id',
              to: 'Like.Post_id'
            },
            to: 'Post.id'
          }
        }
      }
    }",1518193787.0
LewisJEllis,"I don't think you currently have a many-to-many relationship between Accounts and Posts here to represent, based on the tables/schemas you have shared. It sounds like, based on the `account_id` FK on the Like table, your Likes are associated with accounts, not with posts. If they were associated with posts, we would have a many-to-many relationship, but as it is we do not.

We could also consider a many-to-many relationship from Account to Account via the Like table if your `Like.account_id` and `Like.nickname_id` FKs are both referencing the Account table, and one of them is the ""liker"" and one of them is the ""liked"", but it's not clear if that is so or which would be which.

Let's instead say we have Users, Pages, and Likes. Users can Like Pages. We then have a many-to-many relationship between users and pages.

We could represent this with the following tables:

*User Table*

Field | Type
----- | ----
id | int, PK
username | varchar
password | varchar

*Page Table*

Field | Type
----- | ----
id | int, PK
name | varchar
contents | varchar

*Like Table*

Field | Type
----- | ----
userId | int, FK User
pageId | int, FK Page

Now Likes are our join table for the many-to-many relationship between Users and Pages, and the tuple `(userId, pageId)` is our primary key for Likes (you could have a single auto-increment id as well, but it's not needed). In objection specifically, we can represent this with the following relation on the Page model:

    users: {
      relation: Model.ManyToManyRelation,
      modelClass: User,
      join: {
        from: 'Page.id',
        through: {
          from: 'Like.pageId',
          to: 'Like.userId',
        },
        to: 'User.id',
      },
    },

and we can represent a User's liked pages using a complementary many-to-many on the User model.

There's also a more real-world example of a many-to-many between Persons and Movies in [objection's docs](http://vincit.github.io/objection.js/#models) and corresponding code in their [examples](https://github.com/Vincit/objection.js/tree/master/examples) - search ""ManyToManyRelation"".
",1518193614.0
StoneCypher,"all this to get out of 

    select * from 
      likes 
      join posts on like.post_id = posts.id 
      join accounts on post.account_id = accounts.id 
    where account = 1234;`",1518206854.0
Mabenue,"An account has a one to many relationship with likes.

The likes have a one to one relationship with posts.",1518193370.0
,[deleted],1518188531.0
,[deleted],1518188266.0
boogermanus,"The answer to #3 is, yes, yes, yes.

Package.json files are updated when you install a new module with the --save flag. For deployment I generally clone the repository on the server and then run: 

    npm install --production 
which will install everything that is not listed as a dev dependency in the package.json.

As far as running the application in the production, I use [PM2](http://pm2.keymetrics.io/), which is a node process manager. Works great.",1518187736.0
Jake_Jeremy,"For 2: don't worry about memory in that case. A reference is merely a few bytes, you could have thousands and it wouldn't be noticable.",1518184795.0
blood_bender,"1 - In general, you should only have one `node_modules` at the top level of your project.  It's really, really rare that you'd need anything different.  

2 - That's basically the best way.  An extra variable is nothing. There are other non-standard exports, which I've done before. Exporting a function that returns a class instance is one:

    class aClass {
      constructor(filename) {
        this.filename = filename;
      }
    }    
    module.exports = function (filename) {  
      return new aClass(filename);
    }

    ....

    let instance = require('./aclass')(__filename);


But that can be confusing for anyone else using your package/code unless it's documented really well.  And the way you have it is much better design in general. 

3 - Deployment on almost all systems depends on a single `package.json` existing in the root of your folder.  Commit everything except `node_modules` to a git repo, and auto-deploy systems can pull from git, will run `npm install`, and then run `npm start` to start your server (the last part is usually configurable).  Systems like Heroku, DigitalOcean one-click apps, Amazon Lightsail etc are examples of those easy deployments. If you want to manage it yourself, it's cheaper, but you can just remote in and run the commands on your own. 

They usually do not update the packages automatically. They pull from `package.json` and only use the ones you explicitly allowed, using `package-lock.json` for determinism if necessary.  In order to update them, you have to update your packages locally, commit back to the repository, and re-deploy. ",1518189889.0
prozacgod,"Another thing to look out for.


if you have two modules of the same version being used in firstlib and secondlib (like say, graphql)

The objects they create are not the same, as they use their own imports therefor the objects are different.

I bit myself on a graphql project with this not terribly long ago, took me a while to realize what was going on.

I solved it by parenting adding node_modules dir with graphql 

(It's not a graphql issue by any means, I was separating a large project into chunks.)",1518188083.0
zayelion,"- One `node_module` folder is convention except when working with Electron/NW.js. Its content is completely defined in `package.json`, and you never edit the code in it.
- You can add other entry points with `npm run script_name` you give it a terminal command and it just wraps and runs it. 
- If you put an `index.js` file in a folder and then do `require('./folder_name')` it will run the `index.js` file.
- There is nothing wrong with doing `require('./libs/lib.js')`.
- Javascript tutorials do a horrible job with this, find every instance of the word `function` and name it. Then cut that function out and past it above in the proper scope it needs. Then reference the function. This will flatten your code and make it more readable.
- Most people do it the way you showed, its honestly a small memory foot print and keeps limited scope. A more over engineered way is to have all class objects defined in a single module (think like a header file) and it just returns all the classes attached to an object. That object is then attached to a global scope, or something with appropriate scope. I've seen this used for singletons and organizing data structures into a common place.",1518195118.0
vexii,Take care. The class keyword is actually just syntax sugar for creating a function a modified prototype ,1518214324.0
trout_fucker,"You should really only have 1 node_modules per project. It is very unlikely that you need a structure like this. The only case I've run in to is when you have a client and sever in the same project. But even there, you do the server in the parent and have the client in a sub folder. You should consider restructuring if you can.

But if you do actually need this, then you'd be better off exporting what you need inside each one and then using that export in your parent folder, rather than trying to dig into each node_modules yourself.

~~For your second point, classes are covered very well in a lot of tutorials and MDN. But, you shouldn't set them to `module.exports`, you should use ES6+ import/export syntax since it will be available if `class` is.~~ nvm I wasn't thinking clearly.",1518181879.0
yamalight,You don't really need emscripten in this case. Look into [node c++ addons](https://nodejs.org/api/addons.html),1518172956.0
zokker13,Basically the answer of /u/yamalight or you use the [ffi](https://www.npmjs.com/package/ffi) which allows you to directly call functions in libraries (though working with this approach kinda breaks the joke of nodejs of being easy to deploy and multi OS compatible. But good for prototyping or when quick and dirty is needed.,1518207572.0
rglyall,There's a Node Weekly too.,1518170522.0
coder00000001,"Got stuck in callback hell with a recent project, due to the older NodeJS runtime on AWS Lambda. This package made using Node for Lambda functions bearable.",1518163715.0
irvinlim,"I'm the author of the boilerplate! Thanks for posting this! :)

This is my first open source project that has made it to this many stars. Any feedback would be much appreciated!",1519578825.0
jaridwade,"This is pretty cool OP. Have you looked into serverless.js? Tons of plugins and an active community. Also, serverless-webpack.",1518177813.0
,[deleted],1518160669.0
zayelion,"    function getBody(url) {
        return new Promise(function (resolve, reject) {
            request({
                url: url,
                json: true
            }, function (error, response, body) {
                if (!error && response.statusCode === 200 && body.data.length > 0) {
                    resolve(body);
                    return;
                }
                reject(error);
            });
        });
    }


    async function main() {
        try {
            var body = await getBody(), // awaits are applied to promises.
                // body is now in scope and accessible here, pass it or use it.
                downloadTargets = JSON.parse(body).data.filter(checkForDups),
                updateTargets = JSON.parse(body).data.filter(checkForNews);

            if (updateTargets.length) {
                updateTargets.forEach(updateLogicFunction);
                // secondFunc() might be a full stop no idea.
            }

            // Create array of promises
            // then create a promise that waits for that array of promises to all finish
            // then halt till THAT^ promise is finished.
            var newData = await Promise.all(downloadTargets.forEach(async function firstFunc(value) {
                try {
                    return await getBody(url);
                } catch (error) {
                    // upto you what happens here.
                    return error;
                }
            }));

        } catch (error) {
            // retry main call, might be a full stop?
            retry(body);
        }
    }",1518196628.0
goorpy,"I'm not sure how async functions relate to how you're passing the body data through the various decisions. 

Async and await are a pattern you can use to replace promise/then chains in an imperative style blocking sequence. I don't see any .then() promise chains here, so its not clear how you expect to use async functions.",1518157399.0
goorpy,You're going to need to format that code a little better and provide some context in order to get the help you're seeking.,1518157180.0
PatskyPat,"Check out  javascript.info - the best JS tutorial imho.  
The [“Promises, async/await”](https://javascript.info/async) chapter will guide you through converting **callbacks** to **promises** to **async/await** with good examples.  
Good luck.
",1518167734.0
fridgefreezer,"Did you do the Web Developer Bootcamp? Or the Advanced Web Developer Bootcamp? I’ve got them both and am about 85% if the way through the first one.

If you have the first one, why not try and make a version of YelpCamp that isn’t based on camping - like you could do a ‘insert thing your mildly interested in’ site that allows users, ratings, adding ‘things’ comments etc - I mean, if you did that, your learning the things you need to know and you have the fall back of the lessons you already have and the projects you’ve already done if you get stuck.

I mean, I am literally learning now so I may be talking crap, but that’s kinda what I’d intended to do once I’m finished - I’ve been tempted to just jump straight to the React section in the Advanced course as that seems to be the hot thing right now, but I’ve got time to do everything between where I am now and there so I may as well learn as much as possible.

Anyway, let me know how you found the course and if you feel like your in a good place in terms of being able to do any real dev work now you’re finished, I’m intrigued and eager to get going ‘in the real world’ so to speak.",1518204074.0
bc_tech,[This online workshop](https://objectcomputing.com/training/catalog/web-application-development/javascript-web-applications-using-nodejs-and-express/) provides attendees a hands-on experience building a JavaScript-based web application using Node.js and Express. Hope it helps!,1518623906.0
DLabz,"Ah, the fear of an empty text file, my old nemesis. Install visual studio code, in it is an app store with bunch of templates. ",1518168081.0
fuddlesworth,Nightwatch is dead,1518141376.0
,[deleted],1518130316.0
headyyeti,"Read the docs, it really is the best way to learn.

But since Andrew Mead's course is already mentioned, I would also like to add Wes Bos' Node course. http://learnnode.com",1518141336.0
theguysperry,Udemy.,1518147573.0
Simbaxo,Wes Bos Learn Node course is pretty good. ,1518191385.0
abby_cohen_221,"I started with this: https://www.turbo360.co/tutorial/node-&-express-intro

Then moved to to project based tutorials",1518306022.0
MrStLouis,It is stupid hard to find because of Google syntax but await * is the new equivalent of promise all,1518312622.0
lord2800,You should still run things in the background. Just because node has async methods doesn't mean everything is async. The code to process the email into a sendable form will still block the event loop.,1518123229.0
flipperdeflip,"As general rule: if a feature doesn't need to contribute to the response to the request at hand then process it in the background. If it needs to survive a crash use something with a backing storage, like a queue system with a reliable broker.",1518173397.0
tswaters,"One of the important features you get with using jobs is they can be retried if errors occur.  

Maybe there's some new code in the stack that doesn't deal with certain payloads properly and it fails, or a network glitch occurs talking to a 3rd party service....there's lots of things that can go wrong.

You could bake in retries into your code - but then maybe your process crashes for some reason and the only record of that email request was in memory.... well, it's gone now.  

Getting that payload out of your process so an external service can process it is great for increasing tolerance for errors and general resilience of the system as a whole.",1518155659.0
erulabs,"your application (be in in node or anything else) should ideally be as killable as possible. If there is state in memory (emailsToSend = [...]) , then a power loss, process crash, out of memory event, deployment, etc etc etc would result in dataloss (and unsent emails).

The app should fight hard to refuse to keep any state whatsoever - so for sending emails (something that has clean and clear state), for sure put them into a retry-able, durable (replicated & saved to disk) queue. My go-to is always RabbitMQ and Node's `amqplib`",1518204965.0
cspotcode,Each node process has only a single event loop.  Sync file reading blocks it.,1518133750.0
davidmdm,As said above reading synchronously is blocking. However there is no reason you couldn't do it. You just call res.json from the callback ,1518156011.0
floodlitworld,"You’ll need to post all relevant code. For instance, can’t see if you’re ending script with a listen command or requiring express properly. ",1518111359.0
TheFullStack,"Could be that the bundle webpack produces is being rendered client-side while the static files are on the server. If so, those files are not accessible from the file system because the bundle is not on the server but on the browser.",1518306146.0
,[deleted],1518119282.0
,[deleted],1518115869.0
ecares,"They are basically the same except when you use something like `module.exports = mystuff` where `exports = mystuff` won't work.

see https://github.com/nodejs/node/blob/9fb91fe1d63eb773a5400d9b8c54cb590aec392d/lib/module.js",1518109857.0
Ob101010,"https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8

Skip to: All code you write in Node will be wrapped in functions

edit: looked up my notes on this, maybe they will help. The material is largely from the above link but specific to your question. I had the same exact question a while back lol! My notes:

wrapper function : your module code gets wrapped by node, basically node does this: 

    function (require, module, __filename, __dirname) {
        let exports = module.exports;
        // Your Code injected here...
        return module.exports; // an object
    }

console.log(module) shows you details of the module object:

    Module {
        id: '<repl>',
        exports: {},
        parent: undefined,
        filename: null,
        loaded: false,
        children: [],
        paths:[//an array of places node is to look for code...]
    }

exports object is just a reference to module.exports

    exports.id = 42; // This is ok.
    exports = { id: 42 }; // This will not work.
    module.exports = { id: 42 }; // This is ok.",1518208015.0
tswaters,"It's this way because of how function parameters work in javascript and the desire for a ""default export""

consider the following:

    function func (a) {
      a = {foo: 'bar'}
    }
    
    var b = {bar: 'baz'}
    func(b)

    b // {bar: 'baz'}, wasn't changed.
    
What is happening here is inside `func` there is a parameter binding - `a`, when the function is entered, it's value is 'bar:baz' but it is immediately rebound  to a new object, ""foo:bar"".

It's not possible to change `a` completely to a new value and have this reflected outside the function.  You'll always assign the variable name to a new value.

When node bootstraps a module, it actually wraps it in a function - this function receives as parameters, `require`, `exports`, `module`, `__filename` and `__dirname`

So the problem is if all you have is `exports` you can't overwrite it completely to export, say, a function.  You'll just set `exports` to something else (your function)

fortunately, `module` is also provided - this is a class that wraps the file you're in now - and it just so happens to have `exports` on it, so you can use `module.exports` to create a default export.

The function invocation is literally, 

    compiledWrapper.call(this.exports, this.exports, require, this, filename, dirname)",1518152959.0
sshaw_,https://nodejs.org/api/modules.html#modules_exports_shortcut,1518313534.0
,[deleted],1518109815.0
del_rio,"Legitimately good article here. I've always wanted coding courses to be along these lines, like ""Rust for people who know Ocaml"" or ""Android/Scala development for Angular devs"". Being able to directly see how stuff `Array.map` and `async` transfer (and differ) to golang's approach is a great way to hit the ground running.

Nitpick if the author is reading this: The justified text alignment is fairly distracting in a lot of places, plus kinda ruins the point of using a monospace font for body copy.",1518123627.0
dangerzone2,"If go had something like npm, and the node community, it would be the best web dev backend out there.  ::puts on flame suit::",1518123719.0
deadcoder0904,Wow you write so good. To the point without BS. Thanx & do write more 😉,1518117827.0
TLI5,Hey this is a great intro! I’m also a nodejs dev trying to learn go. The receiver functions have been throwing me in for a loop lately.,1518109014.0
Lichtenstein_USA,"Don't use Gin. Anyway, I use both Go and Node in PROD where I work. Honestly, working with Go is way more fun.",1518135391.0
alfredmuffin,Fantastic little article.,1518118566.0
ThePandaGuitar,"Good article, thank you. Does anyone know more guides like these for Node devs?",1518155403.0
,"Never used Go, always look at it and think it might be a nice language to use. What sort of things are you all using it for in production environments? It might motivate me to pull my finger out.

For bonus points, Rust also intrigues me for different reasons. Anyone using that in production for anything?

Thank you :)",1518165028.0
bustyLaserCannon,"This is great however one of the main draws of Go in my opinion is the incredible standard lib. I’ve written 3/4 Go apps running in prod (disclaimer: on a small scale) and I’ve barely had to use any third party libraries which is the polar opposite of Node.

Things like Gin and the asynchronous library aren’t required. 

The standard http package and goroutines and channels will do and aren’t difficult to write.",1518168408.0
menixator,This is a well written article. Definitely got me interested in go.,1518176623.0
thatgibbyguy,I think we'd need to see what's in `../controllers/searchController`,1518106996.0
DamnItDev,"Node is a blast. I have been programming for 10 years on various platforms (LAMP, .NET/ASP, etc) and recently found node. Javascript is a very forgiving programming language, and it has become very fast. I also find using express for routing to be really easy and intuitive.

Also, node has NPM which is possibly the best package manager library in existence. This is also one of the main criticisms of node; it is easy to end up with hundreds of packages in your /node_modules folder. This can make your project very bloated.

For databases, you should probably learn with mySQL. It is free, and it is one of the more common platforms. Most SQL languages are similar with minor syntax differences depending on the maker, so once you know one type of SQL you basically understand them all.

MongoDB is a powerful tool, but it can also teach you bad habits. There is nothing to give structure to your data unless you impose the structure yourself. Mongo doesn't stop you from putting your users and your product inventory in the same ""table"". None of the ""rows"" have to have matching ""columns"". It basically just stores whatever JSON object you give it. The biggest benefit of NoSQL is scalability: if your database is slow, you can just add another server in parallel. With traditional SQL servers, it is difficult to get them to work together; it is usually better to add more resources (RAM, etc) to a single server.",1518105326.0
Mingli91,"Node will be good place to start since you’ll be able to pick up the concepts without fiddling around learning a new language. Node is a perfectly good backend language, a lot of people give it grief because JavaScript but I wouldn’t pay them any attention as long as you’ve done the research and know it’s right for your project.

Also if you plan on still doing front end then learning Node will definitely help as you may be asked to do serverside rendering at some point.

Database depends on each project, there aren’t really good and bad databases, just ones more suited to certain tasks. Learning any SQL derivative would not hurt. I use Postgres the most often, it’s totally fine to use with Node, an ORM always makes things easier however.",1518104850.0
kapv89,"If you are planning on using node.js with PostgreSQL, the top of the line solution  the most mature ORM library for that right now is bookshelf http://bookshelfjs.org/ ,

I'd also like to pitch in my ORM, tabel, for the same use case. Do check out the docs: http://tabel.fractaltech.in/",1518126783.0
SalemBeats,"- **MongoDB**: Trendy around maybe 6 years ago. Became trendy when Node became trendy, likely due to the allure of *""Javascript Everywhere""*. Not as terrible as some people think, nor as great as some others do. Benefits from relatively simple scaling just like Node itself does. Not as effective as SQL for generalized database solutions *(very application-specific)*.  
  
- **SQL**: The Tom Brady of database query languages *(has stood the test of time, people hate its success, etc.)*. The various popular flavors *(MySQL, Postgre, etc.)* are basically the Peyton Mannings, Philip Rivers, etc. - the same basic pattern with relatively minor variances. SQL is to databases as C is to compiled system software.  
You can use SQL with any language, but it has first-class support in PHP because PHP was written with SQL in mind. In fact, it's so easy to do SQL in PHP that you might enable your users to do it accidentally. SQL injection in PHP is a bit of a meme by now. 
  
- **GraphQL**: The new hipster fad tech that everyone is learning. Different paradigm. Probably gonna turn out like Mongo all over again. Disclaimer: I've only skimmed GraphQL and don't use it, so this is an outsider's perspective.",1518192613.0
aust1nz,"> Because I know JS, should I just go with node? Are there a good amount of jobs using node?

Sure! Node is javascript, after all. And there are lots of projects built in node, many of which need good developers to extend and maintain. Job markets can be somewhat local, though. So, if you're learning a language specifically to improve your job opportunities, it might be worth scanning your own market. (For example, bigger businesses might be likely to build their applications in Java or C#, which are ""enterprise-friendly."" Startups are more likely to use node, Ruby on Rails, or other languages that are more friendly in open-source communities.

But javascript isn't going anywhere, so applying your javascript skills on the back-end will probably help your job prospects as much as anything else.

>  Which database? Can that DB you chose be used with node(and possibly express)?

MySQL and PostgreSQL are both pretty good choices. The reason PostgreSQL is preferred over MySQL is because a lot of developers have head to deal with weird quirks of MySQL over time. That's not as big of a concern as it used to be, as MySQL has improved.

Both databases have clients that can be used directly with Node/Express, as you noticed. You'll write raw SQL to change/update the DB. But many developers use tools called ORMs (Object Relation Mappers) to make it a bit easier to interact with databases. In the node environment, [Sequelize](https://www.npmjs.com/package/sequelize) is a popular choice.

> For mySQL, what language do you even use for it? I'm checking courses on mySQL and top ones are: SQL, PHP (And I think i saw Python).

This is sort of addressed above, but to interact directly with a database, you use SQL. (Each database has its own 'flavor' of SQL, but for basic interaction they're all pretty much the same.) The programming language you're using doesn't actually play a big role, as long as you can send a string over to your database. For example `SELECT Id, Name FROM Users WHERE Id = 1` is SQL you could send to a database.

If you're using an ORM, you can just write Javascript. The ORM translates your JS to SQL:

    User.findById(1).then(user => {
      // Interact with user, which will have attributes from database.
    });
ORMs can help organize your code; you'll be able to think in terms of User objects instead of users database rows. And if you switch from MySQL to PostgreSQL, an ORM can help make that switch pretty painless. But some developers prefer to write direct SQL because it gives them more direct control. (A warning: direct SQL also exposes you to a few more risks that ORMs help mitigate against.)

If you go down the Mongo route, Mongoose provides similar ORM wrapping.",1518103599.0
e_to_the_pi_i,Finally,1518088209.0
freeall,Took them long enough,1518107772.0
code_barbarian,"Time to start working on my The Rock impression. Finally, proper error handling has come back to Node.js, for the millions (and millions) of the Node.js developers out there",1518216312.0
Aurelsicoko,"You're describing one of the most common use cases of why we decided to create [Strapi](https://strapi.io). However, there are two features missing for you: upload & WYSWYG. We are currently working on them... but if you don't need it should fit your needs.

PS: I'm one of the authors",1518103799.0
Swingline0,"I've always wanted to try out [Contentful](https://www.contentful.com/) for a use case like that. Their interface allows for trivial customization of content data structures. Worth a look, I suppose. ",1518091509.0
Gezzoplasser,"Most CMS's I know dont support customizable tables. So I would say you're best off creating your own CMS. If you need someone to help you with it, PM me ;)",1518086447.0
eXilz,"I use Drupal with a php extension in order to connect to mongoDB.

This way, I can simply execute mongo requests with drupal hooks whenever I create/update/delete something in the CMS.


Drupal has a shit-ton of features, is widely spread and is user friendly. If you need to provide a content management system for your clients that updates their app, I'd definitely recommend it.",1518098555.0
reeferd,Check out enonic xp. A small norwegian cms with elasticsearch as database. Pretty flexible and you write javascript or java for backend.,1518089886.0
icemelt7,wordpress,1518086024.0
horvathlg,"I think the MEAN an overkill but I also think that you should choose whatever stack is the most comfortable for you to work with. So go for it and if you don't like it look for another one.

It's OK to experiment. That's how you learn.",1518082436.0
alphmz,"Opinion from a new guy in webdev:
I started my learn in webdev few months ago, to do a project with 2 friends. I'm using MERN to help in the mobile part. I don't think it's a overkill, there a lot to learn and lot of freedom, but it's provides all you need. It's just good to have a solid knowledge in Javascript.

Don't know what are your plans after this project yours, but MEAN will serve you very well after too. ",1518089836.0
xaricx,"I agree with what others have said. I personally don't like angular, and prefer Marko.js. To each their own. Jump in and learn. :)",1518092780.0
ebo113,"It would be worth your time to do some reading on micro service architectures. What you really describe is a number of applications that would all benefit from different technology stacks. For the web interface MEAN would be perfect. For analytics you could write a python or Java API to do the heavy lifting. For mobile you would be looking at a PWA, native development (Java/Kotlin and Swift), or something like React Native. My advice would be work on one feature at a time and focus more on building the house than worrying about wether you're using the right hammer. ",1518096166.0
zayelion,"Im personally not to fond of Angular, but you are in about the correct place. What you use for the front end is completely upto you. I think Ractive is kinda cool and React can be fun at times depending on the project.

All that said, make sure the API to your server is 100% so that ANY UI can connect to it.",1518198263.0
matthewsilas,"You'll probably need to use a conv net, 3D if it's video. Use open pose, track joints, then fine tune against your instructor videos. I'm not gonna tell you to abandon the idea, but, well, you'll be in for a long journey.",1518063802.0
purpledollar,"I don’t know much about this specifically but don’t just focus on searching for JavaScript libraries. Something computer vision related might be written in python/c++/etc and you could write an adapter/rest service around it. 

Look at research papers too.",1518053003.0
cspotcode,Your processor has only 4 or 8 cores.  Factor in hyper threading.  That's still way less than 100.  What is going on in these parallel libraries of which you speak that makes them more parallel?,1518053033.0
botrunner,"Maybe I don‘t get the problem correctly, but this is possible with promises. Promise.all will collect the results.",1518042175.0
IUsedToBeACave,"I'm confused why this isn't doing what you want. There is a max sockets setting on the Node http agent, but it is set to Infinity by default. So there is no restriction on the number of parallel calls (other than kernel limits on open sockets of course).

This code does 1000 requests at once on my local express server in less than a second.
    
    const http = require('http');
    
    function reqPromise(data) {
        return new Promise((resolve, reject) => {
            http.get(`http://127.0.0.1:8080/${data}`, (res) => {
                res.setEncoding('utf8');
                let rawData = '';
                res.on('data', (chunk) => {
                    rawData += chunk;
                });
                res.on('end', () => {
                    resolve(rawData);
                });
            });
        });
    }
    
    reqArray = [];
    
    for (let i = 0; i < 1000; i++) {
        reqArray.push(reqPromise(i));
    }
    
    Promise.all(reqArray)
        .then((results) => {
            console.log(results);
        });",1518048100.0
Jake_Jeremy,"It is not possible to do this with Node. Node does not support parallel code, only asynchronous. You might want to look into something like C++ for this.",1518043736.0
oldyoyoboy,"I think I had the same problem, and it wasn't because of anything I was doing on the client side, it was the server itself had issues with it's certs.  I ended up using ""request"" and passing in strictSSL = false in my request headers to get it to work consistently.

From the request docs:
strictSSL - if true, requires SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that CA as an option.",1518038929.0
djslakor,Surprised to see so much support still for MongoDB.,1518102997.0
TheOneRavenous,"I use nodejs on a thumbstick with NPM. it works great for carrying around an exectuable node environment with a server and database also on the thumbstick. 

I haven't run into any issues. Then again I made sure the nodejs executable was a 64bit version which works on most people's computers.

Only downside you have to have the thumb stick. You can even have git installed and do verision control. 
",1518029569.0
thingsthings,Thanks for sharing. The most tedious thing for me was Let's Encrypt SSL certs. Here's my code: https://github.com/59023g/docker-nginx-letsencrypt-upstream,1518019956.0
PraveenWeb,"Step by step guide to build highly optimized docker images for Node.js web-app development and deployment. Incrementally builds a basic Dockerfile for Node.js, with hot reloading and then extend the same to create a highly optimized production-ready image with 10x reduction in size.",1518011242.0
kurashu89,"Would hardly call this exhaustive, but a good start nonetheless.",1518061617.0
Ariquitaun,Why would you deploy an image with nodemon? ,1518044026.0
mrdiggu,"Have you ever experienced webpack stop detecting changes via exposed volume when developing React front end?

Been working on a React front end built with webpack and after compose up after some time webpack doesn’t see changes anymore and stops hot reloading. 

Tried running webpack dev server with watch poll option. Didn’t seem to help. 

Any pointers?",1518052879.0
BlueBockser,"What about package-lock.json? Using wildcards allows you to copy it from the host to the container, but how do you get it to the host in the first place? Either you manually copy it out of the container (very tedious) or you run npm install in the host directory, at which point I don't see any advantage to using npm install in the image build process instead of just copying the host node_modules folder.",1518069479.0
flipperdeflip,"Child process environment variables can be passed to the exec/spawn functions as `options.env` (see manual). 

You can test this works by spawning node with a little script to prints its `process.env`.

Sidenote: why use sync? You could run a few concurrently; should be a fun exercise after everything works (basically rig a little async queue thing).",1518012441.0
ecares,Are you asking for C# help on a Node.js sub ?,1518001598.0
ehansen,You need to reboot it first to make sure it works. ,1518001730.0
martiandreamer,Did you try turning it off and on again?,1518010526.0
123GAMPER321,"No. I am new to these things ,but from what i know i am running the program with node",1518002935.0
andrefilimono,Nginx.,1517997771.0
,Years of development but dont use Nginx reverse Proxy lol? Try reverse proxy and websockets so you can run multiple nodes for more availability,1518001009.0
R3DSMiLE,"Reading the final paragraph,

> While most people think that JS’s type system is incredible illogical, there is a reason behind the madness for nearly everything you can think of. Yes, it may be frustrating, but that is the price JS developers pay for having a language that allows you to freely interconvert between types. And yeah…I’d pay that price every day.

Makes me think _why_ we need typescript. 

i'm not bashing it, I actually fell in love with the typing of the scripting - but I do see myself making those `(<any>variable).something = 'something';` and I feel like it's cheating but in trueness I'm just doing javascript ""like it's supposed to"" :x",1518024393.0
kxerr,"Are you sure this is happening for every NPM package? I've tried and can't install this package, but no problems with others.

Also there is this issue on the repo.. https://github.com/imsobear/node-browser/issues/1",1517981523.0
gautamsinghleo,"Try to use LTS version , current version may be unstabble for some machines.",1517990056.0
hatch_bbe,"You are doing this all wrong. Simply do a find for all the ids in the array and return them on result of the promise. 
        	
    QuestionModel.find({id: {$in: this.GeneralArguments.questionIds}}).then((questions) => {
      return questions;
    })",1517957340.0
zombie_kiler_42,This seems to be happening because of the synchronous functions try using promises to resolve elements being pushed to the array,1517956424.0
skarfacegc,"/u/hatch_bbe seems to have the right answer.  However, if you really want to do these one at a time 


    loadQuestions() {
      const resultTracker = [];
      
      this.GeneralArguments.questionIds.forEach( qid => {
        resultTracker.push(QuestionModel.findOne({id: qid}))
          .then(question=>{
            //do stuff 
          });
      }
    
      return Promise.all(resultTracker)
    }
    
    
    loadQuestions.then({
      // do Stuff
    })



note: I don't know mongoose at all, piecing this together based on other answers in this thread. I'm assuming that findOne returns a promise. The pattern is the key bit, you can make the mongoose stuff work if I've botched any of that. Also looks like you're using typescript/flow, I haven't included it in the example.  Not tested etc. 

edit: [http://mongoosejs.com/docs/promises.html#queries-are-not-promises](http://mongoosejs.com/docs/promises.html#queries-are-not-promises) seems relevant",1517975276.0
,[deleted],1517972328.0
MrOCDx3,"Storing values in a text file is normally done as a json formatted file.

    //write to json file
    var fs = require(""fs"");
    var myJson = {
        date1: ""123"", data2:""456""  
    };
    fs.writeFile( ""filename.json"", JSON.stringify( myJson ), function(err) {
    if(err) return console.error(err);
        console.log('done');
    });

    //Read data
    var data = JSON.parse(fs.readFileSync('filename.json'));
    console.log('Data:' + data.data1 + "":"" + data.data2);

",1517959883.0
elrodrix,"Yes, you can.",1517945270.0
SkaterDad,"Why not use IIS since you're on Windows Server?
https://blogs.msdn.microsoft.com/friis/2016/08/25/setup-iis-with-url-rewrite-as-a-reverse-proxy-for-real-world-apps/",1517947381.0
,I'm curious: why the dollar signs everywhere? ,1517943526.0
o1_complexity,help ty,1517923492.0
rjx89,Windows has file paths using back-slashes instead of forward slashes.  You probably just need to update some file paths.,1517960247.0
,[removed],1517933483.0
galaxaxy,New Relic,1517949309.0
pitops,For uncaught exceptions you can use Sentry or Rollbar any other alternative. ,1517990030.0
panbhatt,Have you tried promsthesus. ?,1518011864.0
haidermalik12,"Node.Js: Learning Koa.Js By Building REST APIs | Udemy
https://www.udemy.com/learning-koajs-by-building-rest-apis/?couponCode=CUP_18",1517978254.0
,[deleted],1517934452.0
satchmoto,Link broken for anyone else?,1517945585.0
zokker13,"Tokens only allow you to 

* verify a caller 
* verify the payload

Even when I don't add a token to the request, your server will always see it and has to act on it.
But even when you have some kind of public API that doesn't need ""protection"" you still should add tokens to identify an account and ban it if it turns out to spam you all day and cause more load.

So tokens _can_ apply security but don't have to. If you allow anyone to get a new token with no effort you should rethink your strategy.

Protection against bots:

* Email auth (+verification)
* google bot verification

Protection against Hooligans:

* Tokens with account id

The good thing is most of that stuff is already figured out and you don't need to implement it on your own. Have a read on [jwt](https://jwt.io/introduction/)",1517907512.0
submoon311,"Normally, you have to regenerate your token after some time (a few minute maybe?) So if it get compromised, it's not for long.
You can also use https to encrypt your data when you're sending something to the server, so you're less vulnerable to a man in the middle attack.

But I'm far from being a security pro, so you might want another answer...",1517901458.0
kurple,"Like u/zokker13 said, [JSON Web Tokens](https://jwt.io/) can be used pretty effectively. Using [jwt-simple](https://www.npmjs.com/package/jwt-simple), you can encode a new jwt with a few lines of code and within the jwt you can store anything.

I've used it on a few projects where I store a user's database ID so I can authenticate routes whiles also identifying the user sending the request.

If used correctly, they should be pretty hard to crack.
",1517919645.0
," There are four general kinds of automated test.

1) Unit tests. Tests code in isolation with all relevant dependencies mocked or excluded.

2) Component tests (often included in Unit tests) many pieces of code tested together for some higher functionality. External network dependencies are still mocked or excluded where relevant

3) Integration tests. Tests the external use cases as completely as possible, typically including network dependencies like dbs (wiped and seeded with temporary repeatable data), redis, or http service dependencies. Typically does not test your own web layer, but instead calls the code your web layer calls.

4) End to end tests (often included in integration tests). Calls your web layer through http to test everything integrated. Typically used for smoke tests or validation that the web API has not changed.

The generally accepted rule is the lower the number, the more  of those tests you should have. Some people feel differently and hate unit tests, relying exclusively on integration/end-to-end tests. Try it and make your own judgment.

Mocha et al are suitable for making all these tests happen. There are other ways too, but it's not a Bad Thing to use mocha.",1517876359.0
,"Try something like Postman, and hit the specific API routes directly, using GET/POST requests",1517873385.0
dk01,"Let me ask you this, what do you want to test? That when a given rest endpoint is hit then some side effects happen? That a DB write happens? That an event gets pushed on an event bus? You mention redid so your options are to unit test and mock / fake out redis with something like https://www.npmjs.com/package/fakeredis or to do an e2e test where you have an actual redis instance that is only used for tests that is cleared before and after testing. To test just the API response you may want https://blog.codeship.com/testing-http-apis-supertest/",1517880608.0
mauitikitiki,"NodeJS app deployed using Elastic Beanstalk is a really easy to manage system and gives you time to do other things, just deployed our production app using EB. You can add NGINX as web server later to speed things up, once you get some load.",1517883691.0
NewFuturist,"Having run a startup over the last few years, I recommend and ask the following:

* Is there a need for redis? It is more infrastructure which requires maintenance, and can get expensive. You may think you need it, I think that we realised that it is nice to have but not necessary.

* Just using MongoDB Atlas. It's free at the small scale and as you scale it doesn't get excessively expensive. It is managed well by MongoDB Atlas, and ultimately made me feel that MongoDB is awesome.

* Do you need automatically scaling of servers? NodeJS Elastic Beanstalk is pretty damned easy to use. The only problem is that the cloudfront can get expensive. Not a huge problem, but if you are trying to be super lean, there is a minimum price you can't get away from.",1517875561.0
ELIPhive,"r/vegan

This is an interesting idea, especially if it could be modified to parse online recipes(might be a good browser extension idea). 

It’s already good, something I think would make it better would be to return the list of non-vegan ingredients instead of just a false value in such a situation. 

You could try changing your ingredientsToCheck.some(...) to

ingredientsToCheck.filter(
ingredient => !isVeganIngredient(ingredient));


This will give you an array of all ingredients which aren’t vegan. You can then check if the array is empty or holds values, printing an appropriate response accordingly. 

Best of luck! Let me know if you move forward with the browser extension idea ;); that’s one I’d love to use. 
",1517868621.0
maximusprime2328,"I'm just curious, why use Webpack for this? You're importing an excessive amount of dependencies just to filter arrays.",1517892422.0
medeor,"General question: Wouldn't it make more sense to have a whitelist instead of (or at least in addition to) a blacklist?

Moreover, I'd love to see this information maintained somewhere in Wikipedia/Wikidata.",1517934012.0
SpeakThunder,"As a vegan, I'm stoked. It'd be rad to some day also suggest alternatives. Like Oreos, alternative, Hydrox (or whatever). But that might require some effort. Maybe user generated?",1517882804.0
TheTratz,Super cool project!,1517974795.0
,Are you fucking kidding?,1517917642.0
dvlsg,"Structure your code to use composition / dependency injection. Not necessarily with a container. Make a composite root to wire all your dependencies together to start the application.

Then when you have to test, you won't have to rely on hacking apart the module system to test with dependencies. You can just hand your mocks in the same way you hand over your actual dependencies. ",1517864858.0
tommygeek,"I'm of the opinion that an integration test shouldn't really be using mocks. Unit tests can use mocks because the unit level is at such a level of detail that  should only require a few deps anyway. Integration tests, to me, are actually testing your real components as they interact. If you build a mock for one side of this, you're not really testing the component, but how you've set up the mock.

This can lead to a double implementation scenario where a refactor or feature addition now has to incorporate changes to how the mock is set up as well as to the code itself. And since setting up a mock is more complicated (and harder to reason about in the test code without a deep understanding of the mocked dep) this can discourage future developers from making changes to any part of the process unless they really have to.

I always strive to test the business logic not the wiring, to avoid just this problem. For instance, if I'm building a typical web app (with communication between FE and BE defined in an API), I'll unit test my functions that take inputs and do business logic things to return outputs. In this step, I'll skip anything that just calls another method (wiring functions). Then, I'll set up another set of tests that spin up the whole backend connected to an in memory type of DB and mock out any other external service (not code) dependencies and test the API endpoints directly in those integration tests.

Because the integration tests are running against the code stood up in an environment that's closer to production than a mock, I can ensure that my wiring is all good and that I'm not duplicating effort between code and mocks. I can also check that my responses are well formed and that the model and marshalling code works. You can write these in the same test framework that you're using for unit tests so you can get an accurate coverage report without having to do much more work.

Anyway, that's just what I would recommend. Use mocks super sparingly... I've seen them cause good developers to not refactor a process because of the risk involved with changing the mocks and the time it would take to get the tests to pass again. Anything that ties your future devs hands should be carefully thought through before you implement it. ",1517881946.0
dark-marouane,"A word of caution: It's actually extremely easy to escape the sandbox

    const {createContext, run} = require('crossvm');
    const context = createContext();
    run('this.console.log=()=> { throw new Error(\""pwnd\"");}', context);
    console.log(""Hello world"");

Even if you try renaming 'this' you can always do `Function('return t'+'his')()`to get it. Same thing for node & the browser.",1517867279.0
shlunko6,Has the rollback functionality been tested? Please?? ,1517856450.0
4dr14nh5u,cool,1517844700.0
drowsap,Mobile support? I imagine most events happen while you're not at a desktop computer.,1517852709.0
DominusBelli,Can I fork Bill Gates' life?,1517885010.0
,[deleted],1517874613.0
SalemBeats,"If the flexing emoji doesn't stand for *""lift weights""*, you need more iron in your life.  
  
Also can't imagine *""fall in love + heart broken""* being used that much unless you're in middle school or you frequent stripclubs.",1517934496.0
eloc49,"Just want to let you know, on an iPhone SE in the reddit browser this opens in, you can’t reach the arrow to enter the article.",1517840893.0
,"You want to generate random phone numbers, distribute them to users,  and have the users text them? That can't be right. Phone numbers are quite limited. ",1517807824.0
eggy900,"Ghost is probably the one with the biggest eco system, I think it uses sql lite for storage though",1517786947.0
DueDueProcess,Gatsby. Gatsby. Gatsby. ,1517834454.0
64_g,Keystone js is another good one,1517788380.0
thingsthings,"I made this the other day: https://github.com/59023g/post

In production: https://mep.im/blog

stack: node ( express ), leveldb, no javascript on client

As light weight as I could make it. Does authentication ( using jwt ), state ( leveldb - no separate service like mongo, redis ), and very basic views with media uploads ( no frameworks - just string interpolation ).

I'd be curious to see what others think or add to it. It's open source. I chose leveldb to start off with so easily replicable. As of now, the data is immutable, but it's not chained. 

Make an issue if you want my docker-compose, let's encrypt ( A+ ) nginx config. I haven't got around to putting it up yet. 

Peace ",1517881902.0
nk2580,Seems someone can’t let go of jquery,1517775795.0
trout_fucker,"I think you're promoting your own project. If it is, then you'd probably get further by being up front about it. 

Personally, it looks far too opinionated and dated for my liking.",1517776998.0
nothingduploading,never heard of it but the presentation of the framework looks promising without ever having used it.,1517775753.0
FINDarkside,"If it's made by you, you should probably get someone to proofread everything. For example:

> The main idea of the framework is be complex

> Our support plan can help to new developers and companies.

Even in cases where there aren't any obvious grammatical errors it's still really clumsy for the most part.",1517824690.0
DiesFuechschen,"In your client, you are always settingthe coordinates of the sprite to the same (x,y) variables, so the variables will always have the values of the last added client.

So as soon as you draw the sprites, it it will only draw the sprite of the second player.",1517782387.0
jaunkst,Bug is in client code your iterating over players and setting a single position. U need an array or dictionary to represent your players position state. And you need to draw each one in the drawcall. Also you could just iterate over players and then in the draw call since you already have a structure to represent the. Or even better add a draw function on your entities and pump them through a drawing function,1517782412.0
jaunkst,Pretty much,1517893126.0
phihag,"These tools start by collecting all the source files of your program and its dependencies. Since you can do fancy stuff like `require(Math.random() + '.js')`, you may be required to give a list of all program sources in some form. Either way, all of the source files get packed, for instance in a zip file in memory.

The final executable file then consists of:

1. start code
2. the node.js runtime
3. your code (e.g. in zip file representation)

Upon executing, the start code - typically written in C, C++, or assembler - initializes the node.js runtime, [like this](https://blog.continuation.io/building-and-embedding-node-js-as-a-shared-library/). It sets things up so that `require` fetches files from the zip data structure in the executable file, instead of from the filesystem. Then, instead of running a normal node (with all the options), it is hardwired to always execute the main file of your application.

That's all there is to it - you basically run your program as you always would, but instead of the node binary, the node library, and your code and libraries being in separate files, it all gets mashed into one large file.

To speed up the start and make it harder for users to understand what the program is doing, it is possible to use another representation of the source code. In the simplest case, the packing tool could strip all comments and whitespace.
More advanced packing tools use a binary intermediate representation of the source code, typically the ones used by v8 internally. As an example, assume you have the source code

    var x = 1 + 2; // calculate stuff
    var y = x + x;

then intermediate representations would be:

    var x=1+2;var y=x+x;

or an [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree):

    ['=', 'x', ['+', 1, 2]]
    ['=', 'y', ['+', 'x', 'x']]

or, intermediate code (using a stack-based machine as an example):

    LOAD_INT 1
    LOAD_INT 2
    ADD
    STORE 0
    LOAD_VAR 0
    LOAD_VAR 0
    STORE 1

or, assembler code (let's use a simple x86, but again this is a heavily simplified contrived example):

     movl %eax, 1
     addl %eax, 2
     movl %ebx, %eax
     addl %ebx, %eax

Note that starting with the second, all of the above representations would be binary - easy to read for computers, but hard to read for humans.

A clever compiler could do stuff like compute constants and remove unnecessary variables, i.e. start with `x = 3`.",1517777518.0
zayelion,Cool to see someone write up one of these. Its surprisingly simple to roll your own for this weird functionality test. Make a todoMVC without a framework is a good hiring test.,1517846208.0
theadammorganshow,Here are controllers I have in an API for [users](https://github.com/thecodecompanion/lets-get-lunch-api/blob/master/src/controllers/users/users.ts) and its [model](https://github.com/thecodecompanion/lets-get-lunch-api/blob/master/src/models/user/user.ts). My controller for [sessions](https://github.com/thecodecompanion/lets-get-lunch-api/blob/master/src/controllers/sessions/sessions.ts). Maybe those can help.,1517788220.0
nothingduploading,You have to parse out the message.,1517764586.0
nepobot,"The only part of that did not make sense to me is the ever changing hash. In this example it is not saving a user but instead just generating and returning the information that we would save? The changing hash is just reflecting that there is some sort of time or randomness added to the salt when a user attempts to create an account?

Going forward when that user attempts to login it will then always produce the same hash that was previously stored?",1517777773.0
GazZy422,"Vue routes and express routes are completely different things.

dev-server will serve your vue app and try to get the route from that (done with vue-router client side and nothing to do with express)

The way you can set it up is:

* Have an express server with only '/' route which returns the vue application page
* Have 404 routes redirect to '/' so that Vue handles them instead
* Now all routes will be handled by Vue-router in your vue app instead",1517741735.0
oorza,Have you looked into [Nest](https://github.com/nestjs/nest)?  IMO Express is a little lacking in features and opinions to use directly.,1517710481.0
scaleable,"Don't use classes at all.

Classes are unnecessary and redundant boilerplate in javascript in most cases. When not redundant, they encourage bad patterns and mixing of multiple concerns into one single thing.

C# and java make heavy use of classes because its part of their way of handling modules and dependencies. Javascript already ships with its own module system (which are the files themselves). When you create a file to export a single class, you are being redundant and longing of you terrible past java experiences.

For state management/encapsulation, the use of lexical scope (variables inside closures = a file is a closure itself) is recommended. Everything you do with a class, you do better with factories and lexical scope. Code becomes simpler to read and to extend.

Regarding typescript (or flow), remember its main purpose is to be a **type checker**. You should write the code as you would, but with the addition of some type hints. TS and flow feature powerful type inference, and a well written TS/flow code usually requires really few type annotations, and makes heavy use of the inference (DRY).

Although you can use them in any editor, those tools actually are part of ecossystems, and IMHO it is a bit pointless to use them if not along with their main ecossystems. I mean, if you are to use TS, use Visual Studio Code, if you are to use Flow use Atom + Nuclide, because those tools bring along huge benefits to the use of the type checkers.

Last but not least: for a ts project in 2018, create a tsconfig.json by calling tsc -init in the command line, then press F1 > type ""build"" > Run build task > ""tsc : watch"" (on VS code). You might want to output the generated files in other folder or hide them in the editor, that can be done by editing the tsconfig or the vs code config. No gulp ou grunt bullshit.",1517762221.0
ecares,don't use typescript or any kind of transpilation,1517707437.0
nicholaiii,"Yeah, I would try using JSON5.parse",1517697902.0
Remedcu,Solved it by using jsondata.qwe to get the value. Someone from stackoverflow helped.,1517864219.0
skarfacegc,Not entirely following what you're trying to do.  Does [PM2](http://pm2.keymetrics.io/) do what you want?,1517716701.0
MinicD,"    new Buffer(array)

Creating new Buffer with this syntax is deprecated. Now it should be like:

    Buffer.from(array)",1517686859.0
Bibliophile777,"Thanks for this amazing contribution, I'm just starting to learn Node.JS",1517680211.0
feature_creep,"    exports.area = function (r) {
      return 3.14 * r * r;
    };

 Should be:

    exports.area = function (r) {
      return Math.PI * r * r;
    };",1517684561.0
deadcoder0904,"Thanks for it. Why don't you contribute to https://devhints.io !

I think it has better UI but you have better CheatSheet.",1517689604.0
HeyGuysImMichael,Good goosh this is nice,1517681199.0
1-800-BICYCLE,I've been using Node.js for years and didn't know about `ref` and `unref`. Thanks!,1517685736.0
NoInkling,Should probably add `util.promisify()` in there.,1517707043.0
TrainedWrongAsAJoke,Thank you very much!,1517682016.0
DeleteMyOldAccount,Huh anyone know why this page is super laggy on mobile?,1517697422.0
supamerz,"This is great, good work. Very nice and readable. Its like a beautiful walkthrough to Node",1517702811.0
JonnyBoy89,Thank you for sharing this awesome sheet! Just learning Node and this is a huge help,1517921838.0
DrRandomMortis,Sweet! I am just about to start working on project in NodeJS. Thanks a lot! ,1517686103.0
scriptfailmatrix,Sweeeeeetnesszz,1517686440.0
Tillhony,Learning a lot going through this,1517686795.0
,[deleted],1517703183.0
,It's really helpful. Thank you,1517722839.0
texasbruce,Thanks. Forked.,1517726918.0
brainseating,"thank you for this and all the other cheatsheets, this is a godsend for the stuff I kinda-sorta remember reading about but agonize over having to refer to official docs for",1517740976.0
clockdivide55,"I'm starting a new job tomorrow where I'll be doing Node development. This will be very useful, thanks.",1517763306.0
SkaterDad,"Watched the series through this video.  Hapi is a great framework, so it's awesome to see someone making tutorials!

Some constructive feedback (I hope):

 * Hapi has built-in support for input validations (payload, query, params, etc), which I hope you will explore in your future videos.  You define a schema, and 400 errors are automatically returned.

 * Hapi includes the `Boom` library, which makes returning errors simpler.  [There's a simple example here in the API docs.](https://github.com/hapijs/hapi/blob/master/API.md#errors).

 * The registration POST handler could be simplified a bit using `async/await` syntax, I think.  By making the handler an `async function`.   Hapi will automatically catch errors and return `500` errors also.   If you need logging, wrapping parts in `try/catch` will work, but I bet there's an option on Hapi or Good to log the stack traces automatically.

Keep up the great work!

    export default async function(request, h) {
      const { firstName, lastName, email, password } = request.payload;

      //skip the validation, that can be done in the route options

      const user = new user({ firstName, lastName });

      await user.save();

      const auth = new Auth({
        email,
        hashedPassword: password,
        user
      });

      await auth.save();

      return auth;
    }
",1517770455.0
headyyeti,"What are you asking? Pooling practices, santization, packages?",1517664069.0
country_dev,I'm not quite sure what you're asking specifically?  Are you using an ORM?  I normally use sequelize for sql applications. ,1517662618.0
,[deleted],1517679994.0
boukers,"Id recommend using an ORM like Sequelize if its a fairly large site with many developers. It makes it easy for people to understand what is going on, and also you benefit from their documentation and feature set which somewhat standardizes everything. 

For smaller sites just using Knex is fine but in the long run might take longer to do everything if it keeps growing. 
",1517771141.0
QoQers,"Learning about web sockets and then doing a project using socket.io helped me:

* https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
* https://socket.io/docs/
",1517628565.0
shilale45,"Socket.io is definitely the holy grail for websocket programming wiithin node. I wanted to learn more so I dove into other people’s repo’s that used it to figure out how it worked.

If you don’t want to use websockets though, express makes it fairly simple to listen to http requests via simple GETS and POSTS, and from here you can do whatever you’d like with the messages coming in from the front end.

Either way, maybe look for a chat app? Simple enough that it updates the front end each time someone types a new message,  but still uses node to send the messages back and forth. Socket.io has a decent chat app tutorial to get you started.

I can help further if you’d like more information or have more questions, just pm me. When I first started with node I could’ve saved myself weeks of headaches if I just asked the questions I spent so long figuring out.",1517643289.0
martiandreamer,"Typically what I’ve seen is you’ll have separate Node processes used for different purposes. For example in your package.json you may have an npm script defined which runs your UI-building toolchain (in your case webpack; I use fusebox).

Additionally you’ll have a second script to run your server application, which starts up, perhaps makes connections to database, cache, etc, then listens on a port for incoming connections. 

First, try to treat these as entirely separate steps that, independently, can be run without reliance on the other. For e.g. you decide to move your UI build to a kind of CDN or Nginx hosting which instead of running webpack perpetually as a dev server, runs it in production mode to render HTML once then exit. 

Then, to satisfy your original request, simply make your webpack-execution part of your initialization step; use the Node core library ‘child_process’ to spawn or fork a webpack run, wait for a certain kind of output from webpack (e.g. “webpack ready” text unless there’s a signal or better way; check it’s docs for that), then resume the remainder of your server startup process. 

I’m kind of glad you asked this, as this is something I’ve been wanting to do but never took the opportunity; it’s relatively simple and is definitely a time-saver during development!

You could even add bells and whistles, and watch top-level things like your webpack config for changes, and restart the child process if you detect them. Normally dev mode lets you hot reload modules (“HMR”) but it only goes so far up the chain before you have to watch parts yourself :-)",1517653529.0
headyyeti,"The 2 best courses I've taken that deal with this are Andrew Mead's Node course (teaches Socket.io as well) and if you are cool with React as well, Stephen Grider's Fullstack React/Node course.",1517656085.0
ddwrt1234,"You can use webpack for building the different pieces into separate bundles (client, server, websocket) etc",1517683793.0
kdesign,I think [manual mocks](https://facebook.github.io/jest/docs/en/manual-mocks.html) are the answer for this. ,1517604494.0
jpkdc,"I use Sinon for this type of requirement, but I would love to know if there is a way to do this with Jest directly.",1517602272.0
tswaters,"This may or may not work for you, 

But you can use something like proxyquire.  This will inject itself into `require` statements and if you tell it to, it will return your stub instead of what would normally have been required.

So if you have a controller that references a service, you load the controller with proxyquire with the service require mocked out - load a minimal express app, use the controller (and any other middleware you might need, i.e. body parser) and tell the stub to return values based on your testing requirements.

    // controller.js
    
    const service = require('./service')

    exports.route = async (req, res, next) => {
      try { res.json(await service.doSomething()) }
      catch (err) { return next(err) }
    }
    
    // service.js

    exports.doSomething = () => ({ok: true})
    
    // controller.test.js

    let app = null
    const serviceStub = sinon.stub()    

    beforeEach(done => {
      controller = proxyquire('./controller', {'./service': {doSomething: serviceStub}})
      app = express()
      app.use('/controller', controller.route)
      app.listen(3001, next)
    })
    
    afterEach(done => {
      serviceStub.reset()
      app.close(done)
    })

    it('handles errors', async () => {
      serviceStub.rejects(new Error('aw snap!'))
      return request.get('./controller').expect(500)
    })


That's off the top of my head - so it may not be entirely functional, but it gives you an idea of how you could approach something like this.

This uses sinon for the stub... I've never used jest, but I imagine it gives you something similar...",1517625261.0
niksko,"Isn't this sort of an integration test? In which case you probably shouldn't be mocking any piece of code, you should be setting up some sort of web server that you can treat like a mock and programmatically tell it what to return when you hit that route.

My rule with testing is that it should usually be easy. If you're having trouble testing a component, generally you're either crossing the boundaries of the system under test, you're testing something that doesn't need to be tested, or your interfaces are poorly designed which makes them hard to test. Here you haven't designed the interface, so 3 is out. That points to 1 or 2, and this test seems very integrationy if you're hoping to mock dependencies a few levels deep.",1517614149.0
gulliwuts,"Are you the owner of app? You should refactor it so that you can instantiate it with an injected dependency, in this case the store containing whichever state is necessary for that test to pass. You cant really magically stub/spy on external dependencies at runtime (at least, not in a non-brittle, non-flaky way). Hope this helps.",1517617240.0
sheffmaster,"Again, if you are down voting my videos please leave some solid feedback for me. I’d like to make awesome and helpful videos and it would be super helpful to get some constructive criticism!

Thank you.",1517598191.0
Thommasc,Haven't found better. I love supertest. Get shit done as it's supposed to.,1517585882.0
djslakor,"I prefer supertest-as-promised, but basically the same thing :)

Just makes your test code look a little cleaner.",1517586216.0
bpadair31,"This is so hard to read. It is poorly written to the point that I cannot tell if it is even making something close to a good point, but I don't think that it is. It seems like it is trying to push a particular product/library.",1517579362.0
xylempl,"The example of code readability shows that the code using the library is even less readable than the one using Promises, despite claiming otherwise, and the article itself admits that `async/await` is cleaner anyway, so to make `async/await` look bad some asinine arguments are presented.

Quoting the article:
> As a code reviewer, I want to see business logic the way which clearly mimics traditional “synchronous” code without complex unrelated constructs.

Suddenly, when it comes to `async/await`, it can be a problem that ""it’s easy to miss async operation while looking at code from high level""? Seriously?

A waste of time for everyone involved.",1517582253.0
FINDarkside,"> As developer and code reviewer, I want to see a clean async loop code without dependency on additional libraries.

That's exactly what your async/await example was. On the other hand, AsyncSteps code wasn't any easier to read **and** has dependency on additional library, which you don't want as a developer and code reviewer, right?
 
In my opinion the biggest flaw in your article is that you intentionally write hard to read code instead of using async/await, and then in the end throw some bogus reasons why it's bad. If the performance is an issue, post some benchmarks. If it makes programming too easy, then recommend assembler or something I guess.

Also, most of the problems you said can't be achieved with Promises can be achieved with promises. Cancellable promises with cancellation tokens, BlueBird, or using Observable instead of promises. Yeah maybe you need some more code for it, or maybe you need a dependency but you need to realize that AsyncSteps is a dependency too.
",1517594012.0
toastyghost,My daily reminder that I'm thankful for uBlock came early today...,1517586125.0
shitfaceddick,Can anyone just post to medium?,1517730798.0
CrypticOctagon,[config](https://www.npmjs.com/package/config) has been my go-to for a while now. ,1517560638.0
timrs2998,"More for programmers than users, but I wrote a Usenet client library in NodeJS. I looked around, didn't quite see libraries that I was looking for and decided to write my own. It's written in TypeScript, has good test coverage (basically the RFC's in test form), and has several examples.

I was thinking I'd like to write a newsreader one day, and it doesn't look like I'll get there anytime soon, so I'm releasing this as my [first] public NodeJS library.",1517539910.0
hotel2oscar,But can it flip tables?,1517541828.0
SoInsightful,"I first questioned why someone would put so much ambitious effort into making a fun little tool like this, but it made more sense when I saw how beautifully succinct the code was with good use of dependencies, and that it's a fun project by a 15-year-old.

Amazing dude. I'm going to see you doing great things in the future.",1517567586.0
cgijoe_jhuckaby,"Cool library dude!  But please note, these are not emoji.  These are **emoticons**.  From the [Emoji Wiki](https://en.wikipedia.org/wiki/Emoji):

> They are much like emoticons, but emoji are actual pictures instead of typographics.

Your library is actually producing [emoticons](https://en.wikipedia.org/wiki/Emoticon).",1517722025.0
danielstaleiny,"problem with your code is that it doesn't wait for promise to resolve so it basically fires 40 calls to your api as fast as it can which slows down your calls. also it is memory leak and if you have array of 1000 you would run out and crash. Max callstack something something...

use promise resolver based on time.
you don't want to limit requests based on time if you don't have to. use array of promises how match you want in batch and wait to resolve them to continue. add next batch  and resolve etc. 


to make it even simpler you can just await for each and resolve them one by one.  use async function and await promise 

if you want to you can await Promise.all([])


",1517518487.0
omgboobz,"if you also need to queue the api calls because of rate limit issues, check out async.queue
https://caolan.github.io/async/docs.html#queue",1517521864.0
bryanzera,You can also use  the `queue` feature of the `async` package to only allow 2 calls to be occurring at any time: https://caolan.github.io/async/docs.html#queue,1517521908.0
iBlacky,"If you are developing the api also, you could just make a method that takes an array in the request body and do this all in a batch",1517523256.0
djslakor,"Ugh, courses are STILL using mongodb?

The rest of the world has moved on to Postgres.",1517524918.0
levif11,This sounds oddly like the top udemy course on node.js....,1517523839.0
Drunken__Master,"I'm torn, this IS a really good course with a fantastic teacher, but these posts that are just links to Udemy courses should be stopped .",1517528199.0
danielstaleiny,"return Promise.all(data.map(underPrice.bind(this,payload)))



and why are you using Promise.all(console.log(data)) when you can just console.log(data) ? 


remember every time you don't use return statement it automatically returns undefined for you 


also you want to have .catch() to catch exceptions ",1517517995.0
schlenkster,"You should be returning your promises from within your then methods. Otherwise it is being resolved to undefined, which immediately allows the next then to run. ",1517503184.0
joseleg176,"In your brand schema you called the reference field ""category"" and in your query you use ""category._id"" and that field is not declared in any schema
Try brandSchema.find({""category"": some_id}).exec()",1517496467.0
315835th_user,"https://devcenter.heroku.com/changelog-items/688
Try unsetting NODE_ENV, apparently it defaults to production",1517501073.0
315835th_user,Have you tried moving our config folder into the app/ folder..?,1517512559.0
masterJ,Please file a support ticket at https://help.heroku.com/ and we'll be happy to help you,1517608405.0
digitallimit,Stop promoting Test Cafe.,1517567245.0
,"Normally you see a headline like that and expect a five line example which uses a 12,000,000 line NPM package. This actually seems to be a minimal implementation so Kudos!",1517492383.0
kastooDevTeam,"With a bit of bad luck we'll have 10 new coins tomorrow.

Jokes aside, looks interesting! Have you also seen the minimal cryptocurrency-software in Python? (I can't recall the name right now)",1517516453.0
oiirme,"Looks cute, is this intended for any practical purposes or just a little POC in typescript?",1517492690.0
herve76,+2 NIM /u/NimiqTipbot,1530342100.0
993VQzn06,"It doesn’t provide a REST api but it gives you a bunch of methods and constructs that allow you to create a REST api.

Your best bet is to really read the docs 

https://expressjs.com/en/4x/api.html

Also look into the MVC pattern.

So you use express to define your endpoints and what they need to do - CRUD.

Then you need a way to interact with a DB, mongoose is great for interaction with MongoDB. Now your endpoint code block can access, and change a DB.

In React you use your endpoints to populate the UI or post new items to the DB.
",1517490470.0
Razoyo,"Nodejs can provide you a server that will serve up the data you need for your device app. However, it can also serve up HTML directly and/or your app. Using a framework like Express or Hapi can make it really easy to start.  This is probably my favorite tutorial for newbies: https://www.youtube.com/playlist?list=PL4cUxeGkcC9gcy9lrvMJ75z9maRw4byYp",1517516461.0
bc_tech,"Here's an upcoming, online workshop dedicated to Node.js and Express you may be interested in. The presenter, [Mark Volkmann](https://github.com/mvolkmann), is well-known in the JavaScript community.

[Javascript Web Applications Using Node.js & Express](https://objectcomputing.com/training/catalog/web-application-development/javascript-web-applications-using-nodejs-and-express/)",1518623679.0
dancrumb,"I've honestly never understood people's aversion to using semicolons and to rely on ASI. It's like skipping braces around if-blocks. Sure, it's valid, but it's inviting confusion and subtle errors.",1517493373.0
zayelion,"I couldn't agree more, semicolon your code!",1517511698.0
EntroperZero,"ASI should never have been a feature of Javascript.  It comes from the old days of browsers just accepting any old BS in their HTML, and trying to give their ""best effort"" to render the page, no matter how badly you followed the syntax.  The ECMAScript standard even says:

> When, as the program is parsed from left to right, a token (called the *offending token*) is encountered that is not  allowed  by  any production of the grammar and the parser is not currently parsing the header of a for statement, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true...

Emphasis not mine.  The *offending token!*  ""is not allowed by any production of the grammar""!  Meaning, you've done something wrong here, but we're going to let it slide.  Javascript isn't a semicolon-optional language, it's a semicolon-required language, but when you write something ambiguous, the parser will do its best to try to figure out what you meant anyway.",1517531766.0
BenZed,"Don't care. I'll continue to not use semicolons, anyway.",1517518525.0
TG__,The most infuriating thing is that standard js eslint config specifically outlaws semicolons,1517515307.0
1-800-BICYCLE,"Tbh they should add a new feature to put lexical ASI behind a pragma (e.g. ""use lexical asi"") so that the semi-free folks can rest easy.

What I really don't like about this documentation addition is that it's a very passive-aggressive way to publicly shame a growing JS movement, especially under the guise of authority over the language. There's 0 value in prescribing semi-full style when even *that* doesnt protect you from the pitfalls of ASI.",1517509050.0
bobbyjball3,"It looks like stop() is meant to stop the blink or pulse Led operations. Which you're not using. If you're looking to just turn the LED on and off, just use led.on() and led.off()

**Disclaimer**: I literally have never used any of these libraries other than readline. I just read the johnny-five source/API docs and am making a guess. ",1517463132.0
CryptoTrader20,Nvm,1517466388.0
jinwoo68,"Re: duplicate outputs, don't specify `output` when you call `readline.createInterface()`. That's not for what you think it is.",1517475911.0
joWebDev,"some answers here: https://www.reddit.com/r/javascript/comments/7uf73v/rasperry_pi_node_and_johnnyfive_yes_this_is_a/
",1517539369.0
ddwrt1234,"The notable changes always seem so small in comparison to the number of new commits, what the heck am I upgrading. 

¯\\\_(ツ)_/¯",1517463164.0
MyPostsAreRetarded,I'll download but only after [this sexual harasser](https://twitter.com/ag_dubs) steps down.,1517460512.0
PM__YOUR__GOOD_NEWS,"I lay out what I need to do then figure out what dependencies I'll need.

FWIW I find patterns to be more useful than dependencies, if you're looking to collect something. 

Libraries, frameworks and such come and go, but once you master a given pattern you can break it out whenever appropriate in any language.",1517449044.0
bamfomet,"I always seem to require HTML as a dependency in my projects. Like, why? I'm just going to replace everything with JavaScript anyways!",1517449818.0
kxerr,"Regarding best practices for production - express compression middleware is expensive. If possible it would be better to gzip from nginx or another service.

For dependencies, are you looking for performance, security, or just helpful modules?

csurf is a good one to throw in the mix for best practices",1517518522.0
,"I find the caolan/async package very helpful for managing callbacks (the dreaded xmas tree), and find it in all my node systems as a result. That way I dont have to worry about promisifying stuff",1517887375.0
djslakor,lodash,1519930204.0
kxerr,"Have you considered using something like Zombie.js?

http://zombie.js.org/",1517439804.0
PM__YOUR__GOOD_NEWS,"It's funny, TypeScript is such a polarizing language. People either have a strongly positive or negative opinion of it.

For my part it's made my work a lot easier and I'm excited it's actively being developed. Especially when it comes to refactoring TS is a godsend.",1517449072.0
krizzje,Love the new ES modules interoperability... 😃,1517424926.0
rotharius,"I enjoy TypeScript as a language that reduces complexity in large and/or complex applications. Using types and interfaces (and proper classes) makes it easier to convey intent and helps maintainability. 
I think it helps mature the JS (and especially Node) community.",1517486511.0
davidmdm,Typescript: part of microsofts ongoing effort to ruin the internet. See dotnet as reference. ,1517429315.0
linuxenko,How does it related to this subreddit ? ,1517435920.0
scaleable,"I usually also do that, I mean, wrapping express request handlers with async + try catch and sending the error to ‘next’ (which routes to the error middleware). Although I dont see many others doing that.

Express is quite an “old” framework, from the times when we didn’t have promises (what to say about async/await!). Some patterns used in old express apps (like encapsulating small async actions in middlewares) were things mostly used to help with the callback madness back then. Some things that were done in the past dont make sense anymore since now async/await is a much better tool for the async problem.",1517478927.0
Dirkj143,"Looks good to me. The only thing you don't need in your `getPostComments` are the try and catch blocks, because the error will always 'go up' to the `comments` catch block",1517425179.0
zayelion,"Thats a whole different bucket of worms.

Think of it like building a building. It starts with a client and an architect. The architect doesn't immediately run out to a site and start digging and laying concrete. They write up documents that explain how the building is laid out and what materials it is made of. They draw out diagrams, make a few small scale prototypes, and iterate a few times.

Only after all that is done do they pass the plans off to a Builder. You are the builder. Your question is conflating the roles. These decisions need to be made first, before you start coding. If you dont have a clear picture of how a new project is structured you shouldnt be writing code but asking for more designs. 

Now sometimes you might be the person that does both roles. You need to finish the architectrole first. Remember, measure twice, cut once. Same with large scale software.",1517419903.0
anssip,"The first step is always athe big confusion when everyone in the team is wondering about different technologies, tools, frameworks, version control, processes",1517419247.0
,[deleted],1517417940.0
tinyroar_ps,"Depending on how many images you want to compress, I would recommend http://tinypng.com.",1517420865.0
jessnotjass,"What you're looking for is the 'Single Responsibilty Principle'. Each module/class has a specific purpose.

*Edit
For example, in your index.js are your post functions, etc. Yet, your database queries are required from a module you've exported (another js file)",1517399148.0
Mingli91,"There are lots of ways to organise your code, google express project structure.

I usually break an API into services, controllers, and routes. Services will be the one to get data and should be organised by feature, controllers and routes is pretty self-explanatory.

Controllers just call services and routes should be organised by feature too.

As your app grows you might want to break it up further and add more components, but it’s a good starting point for a small-medium sized API.",1517413052.0
onedownx,"I messed around with nodejs a little and made a small api for authentication and forgotten PW. Might give you an idea of a starting point to break stuff up?  
https://github.com/awilkinsx/authbp",1517877678.0
flipperdeflip,The pantone organizes codes by color.,1517405256.0
sdawson26,"You can store authorization in many different ways. 
 
 - it can be as simple as having a role field on an account. Role:client/admin. I like to clearly state roles as strings so there is no confusion. I like this field to define if it's me (a super admin) or a client (which can be a user or admin to their own area of the app).
 
 - you can store an account _id on a post to ensure only that account can make changes.
 
 - if you tie account authorizations like a one-to-many relationship, you can have something like a ""permission"" table which tracks the account _id, plus the _id of the other thing, and set a role on it.
 
You don't need an outside package to pull this off. Use middleware in Express to authorize if a given requestor is permitted to make any given request. Build the front end to be smart enough to handle unauthorized activity, but enforce it on the back end for security purposes.",1517397155.0
facingmonday,"I think the word you're looking for is multi-tenacy and yeah, I haven't found a good package or framework that handles this out of the box. From 30k feet, I basically had to attach ""groups"" to users and make custom queries that override mongoose queries to include restrictions like _id, or groups. Then every record has to have an association. With Feathers, I was able to accomplish this with before and after hooks that append restrictions to queries. ",1517406985.0
goodwid,"Here's how I handled it on a project, where it was decided that either the author or a site admin could delete a post:

    // additional routes deleted for brevity..  see 
    // https://github.com/conference-connect/confcon/blob/master/routes/posts.js for the complete code

     .delete('/:id', bodyParser, (req, res, next) => {
        Post.findById(req.params.id)
          .then(result => {
            if (result)
              if ((result.author._id === req.user.id) || (req.user.roles.indexOf('admin') > -1))
                return Post.findByIdAndRemove(req.params.id);
              else next({code: 403,error:'only post authors and admins may delete posts.'});
            else next({code: 404,error:'post not found'});
          })
          .then(result => res.json(result))
          .catch(err => next(err));
      });

It worked well enough.  Dunno if it's the best solution, but it's **a** solution.",1517416249.0
klaxxxon,"This looks...slick, but after skimming through all the examples, I still don't entirely get what it is trying to do. Is this supposed to be used within otherwise normal React code, or is it its replacement? How does this integrate into a react application? How compatible is it with existing React components?  What actual problems does it solve?",1517388867.0
mansfall,"I mean... while the MEAN stack is neat, I feel like there's just far too many tutorials out there that teach newer folks to use NoSQL databases.  Honestly I don't know why.  Then folks perceive this as the answer to how to build some system, when it's so far from the truth. Often there's zero explanation of ""why"" mongo is being used vs a relational database.  It sets people up for a trap when they start digging in the weeds and hitting road blocks due to relational data. 

I wish there were just more tutorials on the express/angular/node/<insert relational db here>",1517384646.0
WeaponizedMath,"MEAN was nice once, I think. But I don't know if where we are if MEAN is too much for too little return",1517415779.0
Defualt,How much is MEAN a thing because it’s a cool acronym ,1517443043.0
mansfall,"Careful!  While mongo is a NoSQL implementation, the data you're describing is quite relational.  A user has a profile.  A user is tied to a payment system.  Etc.  You might get it to work, and get a certain distance down the road... only to realize implementing other features and maintaining correct data integrity becomes a MASSIVE problem.

Please first read articles on when to use NoSQL vs a relational db.  Don't pick it ""just because it's what you've worked with"".  If you think you have unstructured data, then go for it, go w/ mongo.  If you think you don't (which, based on your description, it sounds like you do..), then stick with relational (MySQL, Postgresql, etc).

Postgresql is actually quite amazing as it support a TON of json capabilities.  So even though it's relational, you could still use it to store unstructured data.",1517349024.0
mrm8488,"In this field (like in the most in programming) there is not silver bullet. Sequelize is an ORM for relational databases. It works fine. My team and me used it for production apps. When designing ""social apps"", usually data is related. The theory says:

- related data:  use MySQL, PostgreSQL, etc (RDBMS). 

- Strongly related data: use a graph database (Neo4j for instance).

As mentioned above, we started with MySQL and Sequelize as ORM but when we needed to create a suggestion system (for profiles, posts and so on) MySQL was not enough. We migrated our data to Neo4j. It worked fine. (Let's remember Neo4j scales horizontally. Traditional RDBMS, don't).

Then, we had to develop a powerful search engine. Neo4j neither traditional RDBMS are good at this. We had to use a full-text search database. We could use between Elastic Search or Apache Solr.

I forgot to mention, business people wanted to know how the application was used by final users to take decisions and make mkt strategies. So we started to store every event of every user (login, follow, like, search...) on a MongoDB database. (Full-text search databases are also good for this)

Conclusion: you will finally have an application with different databases systems/technologies because for each feature there is one that works best than other.

How to start to build your app:

- **Follow Event Driven Architecture**. Launch an event for each user action queue this event and manage it with workers (for instance, a worker for store it in the MySQL/Neo4j database, another for store it in a MongoDB database for business/mkt people, another to index it in the full-text search database, etc.)

- The idea behind this approach is **register everything** and then decide how to manage it . If you are not happy with the results, you only have to adapt your worker (the event manager to a new database system/technology). **This architecture is highly scalable** (you will have to choose a message broker to operate with queues. I used Rabbit MQ and it worked fine)

- **In the beginning you should use a single database that accomplish the most of features your app needs and do not overengineering it.**

MongoDB has a lot of features: Schemaless, its powerful Aggregation Framework, full-text search, geo queries, etc. And it includes (last version $lookup operator that makes SQL like left outer JOINS). As it is schemaless, it adapts so good to changes in your app. If you want to add the payment feature in an early stage of your app, remember that MongoDB only guarantees atomicity to document level. It means you cannot do SQL like transactions. Last versions include and operator to simulate a transaction ($isolated) but if something fails while performing it, there is not rollback.

RDBMS such as MySQL and specially PostgreSQL are obviously much better when you need joins, specially for complex queries with several joins. And both are including features like JSON columns (it adapts better to changes), text search and so on.

Another important thing to consider: ORMs like Sequelize, Knex, etc usually includes their own syntax to create migrations. **NEVER use it because if you have to create complex migrations its syntax don't cover it. Use migrations in raw SQL mode.**
",1517356238.0
adcoord,"PostgresSQL would probably be the better bet, especially since you are handling payments. As many people have already said, your data set is going to look relational. Aggregating data from multiple collections can be simplified with simple joins in SQL.

If you insist on going with NoSQL, consider using DynamoDB. MongoDB is harder to scale on larger data sets (I've run into a lot of issues on our AI layer, and we are actually making a shift to Cassandra), but for our application, we are going to make the shift to DynamoDB just because it's a lot easier to scale with a click. On top of that most of the current infrastructure is already on AWS.",1517353016.0
fullheap,"SQL is probably better than MongoDB here because you'll have a lot of relational data sets.

I'd suggest you to check out GraphQL instead of REST for your APIs though, it's perfect for this use-case.

If you think you'll grow fast and big, Cassandra might be a decent DB too, but it's probably overkill.",1517351416.0
Thommasc,+1 for Postgresql being the best of both world.,1517388450.0
KyleG,"Honestly I think doing a nosql DB is fine in the startup phase because your datatypes will be constantly changing as you implement new features, pivot, etc.

Once you've sort of finalized everything, consider moving to a relational DB if you have a lot of relational data. If you were working with hierarchical data, you might consider a graph database instead. Etc.

The point is that it will be annoying as shit to constantly have to add new fields as you're refining your prototype but with a nosql DB you don't have to worry about that.

You shouldn't have too much important data to migrate once you have a better handle on things, so transitioning it all from non-relational to relational database shouldn't be a problem.

IMO that's the real killer argument for nosql: it doesn't slow startups down during rapid refinement

Also FWIW consider not using Sequelize but hard-coding your queries. My company worked with the government, and they had some big, hierarchical data structures stored in a relational DB. It was annoying. Loading a specific datapoint took *forever* with Sequelize because of all the cross joins it was trying that didn't actually need to be tried, but it didn't know any better because of how the relations were defined (1-m, n-m, etc.) in the Sequelize config.

I bailed and changed our loading queries (only the loading queries) to pure SQL statements and it went from 30 second load time to near instantaneous load time.

Yeah, a big part of this problem was the inefficient choice of DB, but I'm convinced that ORMs are useful only sometimes.",1517375783.0
scottomaton,"It's hard to say for sure without really knowing how you'd like your app to function, but it pretty much comes down to this: if you're going to be doing a lot of joining between different collections of data then a relational database will save you a ton headache (MySQL, Postgres, etc.). If you just need something to store unrelated documents, like user profiles, then MongoDB is great. I've used MongoDB for most of my projects, and truthfully I've had a lot of painful moments of realization (usually 80% of the way into development) that the datasets we were working on absolutely needed to be modeled relationally, despite the conclusions we reached in our initial project design - so be warned.

Another technology that you might want to look into are graph databases, like Neo4j. I've not used them, so I can't speak with any authority, but my understanding is that they are designed to model the sorts of things you're talking about.",1517349381.0
shilch,Here is a comment I wrote some months ago on the same topic http://www.reddit.com/r/node/comments/678u9h/-/dgoje81,1517356894.0
smith64fx,ArangoDB. OpenSource. Document AND Graph oriented. Scalable. Beautiful ,1517385266.0
jingle66,"Check arangodb. It lets you mix graph docstore keyvalue. Very scalable, It also has a node like server layer (foxx) that generates a full http api in front of the db. You can also build custom micro services for email, file management etc.  Of course you can also build your own app server in front of arangodb.",1517385630.0
martiandreamer,"I went with MongoDb for a multiplayer game I’m building. Coming from a RDBMS world, it’s certainly got its differences. Some things I learned, that I hope will help you make your decision:

- Read and learn the Six Rules of Thumb. See https://keon.io/mongodb-schema-design/

- Use mongoose and wrap everything!

- Learn about denormalization for performance

- Spend some time on the esoteric bits like db security; you’ll set it once and forget it, so make sure it’s handled properly

- Try to use a registration/login/password recovery system out-of-the-box. It’s a fugly wheel to have to reinvent. 

- Robots and script kiddies will fuck with you. Add Captcha to your signup process early on. 

- Build for load. When everyone logs in after dinner to flirt with each other, your caching and storage mechanisms will be stressed to the max. 

- Follow test-driven development, and automate as much as you can that prevents bad code from getting into production. It won’t seem to matter until you start spending hours tracking down regression bugs. ",1517403052.0
maxwellsmart84,Mysql/Knex/ObjectionJS FTW,1517354860.0
panbhatt,"take PostgreSql, its JSONB data type can handle all your future modifications to the table and plus with NodeJS it is going to shine. ",1517403795.0
SomeRandomBuddy,"Blah blah but muh relations! Muh postgres!


This use case is fine for nosql. ",1517402962.0
leland-kwong,"I actually worked on a dating app a few months back. I don't have any experience with sql databases, but Mongodb or even firebase should be solid choices. I'd lean more towards Mongodb because it has a much richer querying features, but firebase does give you the great realtime benefits out of the box. I'd say unless you really need realtime, then Mongodb will probably be the better option. Also, the cto of webflow.com gave a pretty nice detailed answer on quora about the best mongodb hosting services. https://www.quora.com/What-is-the-best-MongoDB-hosting/answer/Bryant-Chou?share=91881c28&srid=h5HL",1517348059.0
Mingli91,"Yeah it’s ace. I never touched Node (or any JS) in university or the first few months of my career, I only really knew Java, and this course cleared up a lot of things and enabled me to write production ready Node pretty quickly!",1517413447.0
VanGoFuckYourself,Can anyone vouch for this being any good? ,1517350695.0
cirsca,I've always used some sort of client that handles the opening/closing of the connection ( similar to `mongoose` or `knex` for DB connections ) instead of manually opening/closing them. [This](https://www.npmjs.com/package/amqplib) package seems like it would work for what you are wanting in that respect.,1517428262.0
headyyeti,Look into AWS SQS. You could use API Gateway to send data to the queue.,1517369788.0
AceBacker,If anyone has a guide to getting flow errors into eslint With the Airbnb extension that would be great.  For some reason when I have tried this it fails.,1517331849.0
ConservativeToilet,How much do you get paid to post this? Every single one of your comments and submissions relates to `stackimpact` ,1517342000.0
thezadmin,"Why don't you use a custom system. You can just generate a unique 3/4 letter code for each page, and once that page is visited you write that code, plus user info into a table in the DB.

You'll very quickly start building data of what your users are viewing and doing, with this info you are easily able to generate dashboards with graphs and pretty much whatever you want.

You can build that process into some custom middleware and include it for all your routes.",1517320366.0
qti3e,"Hi
How about this [SlyeAnalysis](https://github.com/Slye-team/SlyeAnalysis)
It works fine with multi-clustered applications and heavy distributed as well",1517357782.0
BobClanRoberts,"You could configure an S3 bucket to be a web host endpoint to serve the files in it (similar to Nginx) and then each node server would just put the uploaded file into the S3 bucket. Another option mentioned in the comments is having your Nginx server export an NFS share that each node server mounts. They write the file to the local NFS mount, which gets stored on the Nginx server.",1517330409.0
oiirme,"just have node store the files where nginx uses them, what's stopping you from doing that?",1517317974.0
erulabs,"You need a distributed file system. S3 (or AWS EFS) serves this purpose, but since you dont want to use S3, I would suggest an open source distributed file system like GlusterFS.

There are also solutions like OpenStack's Swift - but that's quite a bit more complex.

Assuming this is a project meant to accomplish something (rather than as a learning experience), I would use a hosted solution like S3 or Google Cloud Storage, etc.",1517343546.0
0x6e617468616e,"Track where the files are stored and redirect the download urls to the server which has the files. Something like mongo would work fine, and just assign the files a unique ID and location.",1517318351.0
RoryH,What about a NFS mount on all the app servers where you can write files to?,1517333193.0
flipperdeflip,"No JSON doesn't protect you because it would be trivial to change a regular form attack into something that sends JSON instead.

CORS is about resource sharing so is not really relevant. 

CSRF would be relevant if for example only your authorized users could use the form and the evil actors would try to trick these users into sending contact requests from other sites. 

Recapcha should be enough to block spam bots and most malicious actors as it is very much battle hardened.",1517322137.0
ecares,You can't call `alreadyExists` synchronously. Use `async/await` if you want your code to look synchronous.,1517316384.0
oiirme,"The chances of duplication is relative to the number of ids, although 40 bits (10 hex) characters seems like a lot, if you have over 10000000 ids the odds of a collision becomes an almost mathematical certainty. i'd use a longer id, also, why not use the build in crypto? crypto.randomBytes(24).toString('hex') ?",1517301674.0
LJQTKY,"You may want to re-write the value of _default_ as a function:

    default: () => generate('1234567890abcdef',10)

This way, the default value is generated every time a new instance of the review model is created, rather than just once when the schema is defined.

http://mongoosejs.com/docs/defaults.html#default-functions",1517308926.0
alc6379,"If I understand what it's doing, that set of letters/numbers gives you 29,059,430,400 different permutations. That's a pretty big space, unless you're actually working with 29 billion records that all need IDs. ",1517299247.0
bablador,"Would be interesting if it actually showed converting to string value from Buffer, not just the raw Buffer content.",1517301837.0
oiirme,"I generally like the format but I think it's a bit too trivial

Might be nice to add support for async (eg: pass a function that if has an argument expects it to be of a `done` style and check if the returned value is a promise) ",1517303526.0
hopingforabetterpast,Beautiful cli output.,1517290929.0
OptimisticLockExcept,"I haven't used it and don't know whether or not this would work for you but I've heared good things about https://github.com/zserge/webview.

You don't get node as far as I can tell but maybe you could use some bundler or something... It's probably not just a plug and play solution... ",1517296051.0
mherrmann,"You posted this in r/node but your question does not exclude other technologies. If Python is an option for you, you could consider (my) open source library [fbs](https://build-system.fman.io). It uses Qt and thus fulfills your requirement of being more lightweight. Other than existing solutions, it also solves packaging: You can produce an installer that you can distribute to your users on all three major OSs in seconds.",1526028663.0
monsto,"To answer your question: [NW.js](https://nwjs.io/)

My question tho is what are you wanting to do that electron won't do? How big is ""too big""?

100mb is 0.0001 the size of the average HD these days, and my experience with the likes of VSCode is that it uses dozens of MBytes of ram, not gigs, in an era where 16gb is average.

And, as VSCode vs Sublime has shown, the performance problems aren't necessarily Electron's fault.

I dunno man it kinda sounds like you're putting the cart before the horse here. Yes the parameters you mention can be problematic, but how far have you gotten thus far?

If the answer there is ""not far"", then consider that end-project performance isn't as important as beginning the project.

That being said, I liked working in NW.js. It configured well, and was dog-ass simple to get started.",1517288790.0
psayre23,"I wonder if React Native might have better options. There are plugins for different platforms. Not sure what the perf or file size looks like on these, though.

Mac: https://github.com/ptmt/react-native-macos
Windows: https://github.com/Microsoft/react-native-windows
Linux: https://github.com/status-im/react-native-desktop",1517294988.0
flipperdeflip,"Make it a browser extension. It's pretty easy these days, and there are helpers to make it work for different browsers.",1517315315.0
sime,"A platform which runs JavaScript fast and has all the web APIs available is going to be quite heavy simply by nature of what it has to do and support. So, what can you go without? What are your minimum requirements for a platform?
",1517317200.0
sleepybrett,... yeah actual native code. Electron is a resource sucking hog.,1517280353.0
GrzegorzWidla,"Sadly no.

Windows 10 is best equipped for that but it gives you no cross platform ability. UWP apps can be built fully with HMTL and JavaScript with access to all OS features and starting in late March PWAs will be deployable to Microsoft Store.

It would be great to have something that abstracts common APIs and allows deploying to several platforms' native web browser engines. ",1517293270.0
pcmaster160,Worth noting Electrino [seems like it will get Windows 10 support soonish](https://github.com/pojala/electrino/pull/11),1517321991.0
XalAtoh,Caret,1517419795.0
shalithasuranga,See [neutralinojs](https://neutralinojs.github.io),1529322562.0
oorza,"Rust is out there.

Go is out there.

Java is out there.

C/C++ is out there.

Node is not now, nor likely will ever be, well suited to writing GUI apps for a variety of reasons:   

* No native GUI libraries: Slack doesn't look like anything other than a (shitty) webapp running by itself.  It doesn't look, feel, or behave like a GUI app is expected to on any of its platforms.  Why would you want to opt out of native behavior and a lifetime of built up user expectations?
* Single threaded: *can* be fixed, but not likely to happen (any time soon).  Without the ability to dedicate threads to the interface and etc., you can never guarantee a smooth experience.
* Lack of type system means runtime memory and CPU overhead: the language itself is resource-expensive to use.  The lack of type system means the compiler can't do as much work and has to waste words and CPU cycles to handle types, type coercion, inspection, etc.
* The dynamism of the language and immaturity of the runtime: JS is built on tons and tons of dynamic callsites that can't be inlined.  As good as v8 is at inlining stuff, polymorphic callsites that are dynamic are not (usually, if ever) inlined and come with a hefty overhead... and it's still more than a decade behind the JVM and CLR.  That lodash-fp code you love?  That's the sort of stuff that really exposes the immaturity of the platform compared to the JVM or CLR, let alone a compiled language that elides and eliminates a lot of function calls.

If you want to write a GUI app, you should probably just bite the bullet and learn a language well suited for GUI development.  Every tool has its place and if you only use a hammer, everything looks like a nail.  A GUI app is a screw, so get a screwdriver.   I don't believe a lighter Electron *can* exist, unless someone implements the entire framework in a performant language and exposes an API in JS-land; Electron itself is working towards this.

If you want to actually build the interface with web technology, there are plenty of options available to you:

* The CEF exists and is fundamentally the basis for Electron.  You could embed it in another application (like Spotify does, although Spotify's performance itself doesn't lend itself to any belief that CEF is going to be worth the effort vs. Electron).
* Servo is so fast and so light and embeddable in Rust apps.
* There is a built in web browser in .NET core and libraries for exposing chromium instead.
* There's a ton of options in Java land: Swing browser, JavaFX, etc.
* Neje-Go and CEF2Go both exist for Go and have their pros/cons.
 
",1517272396.0
mrm8488,https://github.com/i0natan/nodebestpractices,1517269772.0
kxerr,"I find the Rising Stack blog pretty good.

https://blog.risingstack.com/tag/node-js-best-practices/",1517300070.0
voiping,"This was recently floating around, it's pretty nice!

https://github.com/wearehive/project-guidelines",1517343372.0
emersonbroga,Airbnb code styles are good practices to follow,1517283829.0
jeffus,"I'd probably start with Express--Marko has several examples in Express, so it'll help as you seek help from the community. You can easily switch to Koa once you're comfortable with Marko basics.

On Marko itself, it can be tricky to get, but a few pointers: try to understand what's going by starting simple. For example, run markoc on your base Marko file, read through the generated javascript file, require that file, render the template to a string, make a simple express app, return the rendered template. Ask questions. Once you have a sense of what's going on, play with Lasso and then make Lasso/Marko work with Express. From there, you should be able to start trying things like Koa, webpack, etc.

Good luck!",1517284234.0
yvonnemontegut,"I liked The Complete Node.js Developer Course (2nd Edition)

This course was designed for professionals who wants to know in & out of node.js and jump right into developing production ready applications, after completing the course.

Andrew really steals the show with his presentation skills and excellent course contents.

[https://www.udemy.com/the-complete-nodejs-developer-course-2/](http://www.udemy.vip/the-complete-nodejs-developer-course-2)",1517255709.0
dksch123,https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg  The Net Ninja... best tutorials I have found yet on YouTube he explains things so well and is easy to follow along,1517272750.0
Drunken__Master,"If you're a video learner there's no better course than Andrew Mead's Udemy course The complete Node.js Developers Course . (Which happens to also be the same course the other guy recommended, but it needs to be reiterated how good of a teacher Andrew is ) . You can always do a google search for ""$10 Udemy course"" if Udemy courses aren't currently ""on sale"" .",1517261100.0
Pud11es,"If you have cash to spare you can buy a course on treehouse/udemy. I really like was bos teaching style and he has a course on node here 

https://learnnode.com/

If you can't invest money you can find resources all over the internet but you'll often find opinionated gunk and the learning process will be slower and more frustrating.

Imho the best way to learn nodeJS is to decide on a project(to-do lists are a good beginner exercise for node) and start googling one problem after another until you get it done.

Knowing modern JavaScript techniques is a big help, there's a really good article on it here https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript.

If you've never looked at node or the JavaScript eco system before be prepared for chaos but ultimately a really enjoyable platform to work with.",1517267900.0
headyyeti,+1 for Andrew Mead's course,1517268592.0
bel9708,egghead.io,1517287246.0
DiesFuechschen,"Apache is specifically made to be on the open international and has quite some capabilities for filtering traffic. If you just want to filter by IP addresses, look into iptables on Linux. If you need support for a scripting language, take a look into nginx or haproxy and their lua scripting engines.

Node isn't really a good fit for that kind of application since it has just too much overhead compared to languages which use native APIs like C.",1517251862.0
southern_dreams,Just use nginx ,1517266099.0
mistralol,"
It doesn't really matter what language you use. There is 2 main models for this. A proxy style program like nginx. Or apache (most web servers will do it). Or there is a transparent proxy which you would put on a router like mitm

The transparent proxy is somewhat harder to do. It need a special type of socket and redirection added to iptables to ""intercept"" the connection as it passes though the machine.

The big difference here is with a transparent proxy. You can make it look like a connection came from the same origin ip address. By turning off non local binding.


",1517270298.0
thajunk,"Nice, im a big fan of hapi, glad to see it get some more notice.",1517287637.0
sheffmaster,"Hey all, if you’re down voting my stuff I’d love to hear your feedback.  I’m new to making these videos and would love to hear some constructive criticism.  Thank you.",1517261813.0
,"Or use RxJS/Observables. Being able to use the same patterns to deal with iterables, events, and async code makes everything so much cleaner and more cohesive. After you start to grok it, everything else just feels clunky and limited.",1517284366.0
zayelion,"""not open""?",1517261826.0
iBlacky,Why not redirect them off the login page once the login is successful? ,1517340342.0
localhostdev80,Some code would be useful.,1517244270.0
erulabs,"""Schema"" and ""Model"" are pretty generic words that could apply to a ton of different libraries, etc. I see from the screenshot this is Mongoose.

I would guess you're _declaring_ the model _inside_ the route handler. Don't do that ;)

Posting code / details about what libraries you're using / which libraries are throwing the error is very helpful for asking questions here :)",1517256505.0
oiirme,"kudos on the work but this seems very unnecessarily complex and rigid. ultimately what you do is run a few remote commands on a list of servers, why do you force a directory structure for that, why force a specific process manager? just include the target directory and install your tool in global node_modules/.bin (eg nodelegion [action] /project/dir)

where [action] can be init/sync/restart etc whatever and corresponds to a preset of deployment procedures or a custom procedure the user providers

or alternatively use the endless supply of deployment tools already available for nodejs (eg: flightplan) that are quite easy to use already and do exactly the same thing in a more flexible way",1517228357.0
Seus2k11,Why mongodb? Just because your using node? A shopping cart and orders from users of items all are relational data. Personally I'd strip it out and put in an RDBMS.,1517241071.0
L33-the-3rd,"Looks like your cart total calculation uses session data, rather than getting the most up to date data from the DB. 

Please correct me if I’m wrong, I’ve only had a quick mooch, but what if the product prices are updated and all your existing customers session prices are wrong? 

Unless there’s another function to keep session data updated, you might be running the risk of people buying stuff at the wrong prices.

Also MongoDB isn’t really suited to ecommerce, I can recommend ArangoDB however - similar but relational and scales better.",1517244322.0
richraid21,Should probably avoid using a synchronous hash generation/check function. You will tie up the event loop. ,1517247615.0
ynp7,We're you guys expecting anything out of this? I stopped reading when he suggested people download a zip file to install. #AmateurHour,1517259399.0
djslakor,"TJ (author of both Express and Koa) has stated that Koa is the ""superior"" framework.  However, he's speaking specifically to the middleware framework.

The reality is, both of these frameworks are used to glue together middleware, which does the actual work (body parsers, etc.).  The middleware in Express has been vastly more battle tested than Koa.  Just look at npmjs stats.  Way way way way more downloads in express land than Koa.  So, you're less likely to have bugs and get problems resolved sooner by choosing Express since far more people use it.  Additionally, you can still write async/await style code with Express, you just add a wrapper around your route callbacks.

Having said that, though, we use Koa at work since 1.x (now 2.x), and it has worked pretty great.  Either choice will likely serve you fine.  I'm curious to see if Express 5.x ever happens.  It isn't looking likely.",1517236730.0
panbhatt,"Its better to use KOA. as it comprises of all the new async/await features that you can use and there are multiple Starter kit also available. KOA is written by the same person who wrote Express (so you can imagine, its one step ahead in the game). Let me know, if I can help you anywhere on this. I am node.js developer and worked on multiple API based projects. ",1517233103.0
BipVanWinkle,"I've build a lot of APIs using express. That being said I don't have any experience with Koa so I can't speak to the comparison. Here is a article that does an interesting comparison that if you haven't already read might be helpful. 

https://www.airpair.com/node.js/posts/nodejs-framework-comparison-express-koa-hapi",1517207623.0
spmaster007,"Koa looks much more modern, you can feel it even after 10m of use.",1517252310.0
dev0urer,"There really isn't enough information in your post I'm afraid. You didn't explain what framework you're using, if any, what rendering engine you're using, or if you're even using node as a server or just getting the mongo collection from a REST API.",1517202672.0
kgram,"Regarding your added code, you are creating two different things. a is a function returning a promise *when invoked*, b is already a promise. You need to call a for it to return the promise you expect. You should change the definition of b to 'const b = () => Promise.resolve()' (or '() => new Promise(r => r())' if you insist on using the constructor) if you want a and b to be equivalent. The important part is the initial arrow function, resolving the promise is just to more closely match the async behavior. 

Apologies for missing formatting, I'm on my phone.",1517209038.0
kishichi,An Async function returns a promise and you can use ``await`` keyword to get that value. Async/Await is just syntactical sugar over Promises which make Async code look synchronous.,1517202734.0
tima101,"Yeah, you need to resolve Promise, say, with **resolve(""Resolved"")**:

    var delay = async () => {
      var foo = new Promise((resolve, reject) => {
        setTimeout(() => resolve(""Resolved""), 2000)
      });

      console.log('Line BEFORE await');
      var result = await foo;
      console.log('Line AFTER await');

      alert(result);
    }

    delay();

Also notice that **await** will only pause JavaScript if **foo** returns Promise.",1517246137.0
,[deleted],1517200692.0
burtgummer45,"Isn't it strange how things like this are missing from the node world?

This is one of the reasons I gave up on server side javascript, its like a debris field left over from the node hype-storm around 8 years ago.",1517192034.0
mansfall,"Check out knex.  It does all that seeding for you, as well as tracking database migrations.  I use it with postgres in a node environment, along with Jasmine for testing, and it works exceptionally well.  ",1517194361.0
dvlsg,"Depends on what you're testing, really.

What db are you using, anyways? You could maybe use a sqlite in-memory connection.",1517198416.0
qti3e,"You can create a Mock server and test your front-end with that  

[Node Fake Server](https://github.com/qti3e/node-fake-server)",1517407387.0
sumdudeinhisundrware,Cookies,1517197447.0
cyberst0rm,"https://loopback.io/doc/en/lb2/Create-AngularJS-client.html

Not sure what client you have, but usually you put the auth stuff in header.",1517189900.0
flipperdeflip,https://loopback.io/doc/en/lb3/Making-authenticated-requests.html,1517221880.0
ExpatTeacher,"Possibly related to hosting on vps with reverse proxy to the express server. This worked just fine on heroku.

The Anchor with href

    <a href=""/esi/oauth/login"">Login</a>


The JS Http GET

    import axios from ""axios"";
    const esiInstance = axios.create({
    	baseURL: ""/esi""
    });
    esiInstance.get(""/oauth/login"")
			.then(res => console.log(""got esi oauth login"", res))
			.catch(err => console.error(""Error getting esi oauth login: "", err.message));

Most of my router

    // ----------
    // *** routes/index.js ***
    const router = (app, conn) => {
      const rdbAccess = data.rdb(conn);

      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded({ extended: true }));

      app.use((req, res, next) => {
        console.log(""hit main routes"");
        next();
      });

      app.use(""/esi/oauth/login"", (req, res, next) => {
        console.log(""hit esi oauth login route"", req.originalUrl);
        next();
      });

      session(app);

      const authRouter = auth(rdbAccess);
      app.use(""/auth"", authRouter); // app login
      app.use(""/esi"", esiRouter); // esi api stuff, including esi/oauth
    };

    module.exports = router;

    // ----------
    // *** routes/esi/index.js ***
    const router = require(""express"").Router();

    const esiAuth = require(""./esi-auth"");
    const esiPublic = require(""./esi-public"");
    const esiPrivate = require(""./esi-private"");

    router.use((req, res, next) => {
      console.log(""hit esi routes"");
      next();
    });

    router.use(""/oauth"", esiAuth);

    module.exports = router;

    // ----------
    // *** routes/esi/esi-auth.js
    const router = require(""express"").Router();
    const esiAuth = require(""../../data/esi/esi-auth"");

    const calcExpiryTime = (secondsFromNow) => {
      return new Date(new Date().getTime() + secondsFromNow * 1000);
    };

    const handleAuth = (req, res) => {
      const authCode = esiAuth.handleAuthorizationCode(req);

      if(authCode) {
        esiAuth.requestAccessToken(authCode)
          .then(esiRes => {
            if(esiRes.status === 200 && esiRes.statusText === ""OK"") {
              req.session.esi = esiRes.data;
              const expiry = calcExpiryTime(esiRes.data.expires_in);
              console.log(""set expiry: "" + typeof expiry, expiry);
              req.session.esi.expiryTime = expiry;
              return req.session.esi;

            } else {
              throw new Error(""Error requesting access token."");
            }
          })
          .then(esiAuth.getCharacterData)
          .then(esiRes => {
            const character = {
              id: esiRes.data.CharacterID,
              name: esiRes.data.CharacterName
            };
            req.session.character = character;
            console.log(""character"", character);
            res.redirect(""/characters"");
          })
          .catch(err => {
            console.error(err);
            res.redirect(""/"");
          });
      }
    };

    const handleLogin = (req, res) => {
      console.log(""handling login"");
      esiAuth.requestAuthorizationGrant(res);
    };

    router.use((req, res, next) => {
      console.log(""hit esi-auth routes"");
      next();
    });

    router.get(""/callback"", handleAuth);
    router.get(""/login"", handleLogin);

    module.exports = router;
",1517184629.0
t0ren,Few demos would be awesome :),1517186450.0
bobbyjball3,"Kind of strange how neither your ""pain-free"" or detailed guides make any mention of saving your dependencies (that I saw).",1517200167.0
ecares,https://nodejs.org/dist/latest-v9.x/docs/api/child_process.html,1517167793.0
qti3e,You can use WS (WebSocket) or SSE (Server-Sent Events),1517399749.0
Furryamigo,I saw your portfolio https://akepinski.me/ linked from your github. You just stole the code from Brittany Chiang https://brittanychiang.com/ and put your own copyright on it. Not cool.,1517164563.0
fallen77,If you're just using Chalk why should someone add XA and add additional dependencies? ,1517162792.0
Pig743,"Right now this is just a bad chalk wrapper.

At least go and mess around with ANSI escape codes. 

Also drop the buzzwords and emojis.",1517164530.0
DrBobbyBarker,"Just to reiterate what a couple others have said.. I think you've really got the wrong idea of how open source is supposed to work. If you're going to take someone else's code and ask for money for it, at least make it better.",1517169050.0
Sunwukung,"It depends on the grade you’re going in at, but here’s some ideas. 
Understand networking and http, and REST. have a basic understanding of express.
brush up on data access and nosql/sql design patterns. have a basic understanding of mongo.
get a handle on security, authentication and authorization. 
understand sessions, and how to scale that across a load balanced cluster. have a basic idea of what redis is.
Demonstrate some understanding of algorithms and functional programming, since computation intensive stuff tends to happen on the server. 

",1517162534.0
MCShoveled,"> Asking for a friend :D 

OMG, LMAO 😂 

Sorry, but I don’t really have any advice as to study materials. You will get there unprepared, and sometimes that’s okay. They will either let you learn on the job, or they will fire you. I don’t think “cramming” for it is going to help. 

Just keep in mind that friendships can make all the difference. Being someone that everyone enjoys being around and wants to work with will usually make up for any lack of experience, assuming you can learn and listen. 

Edit: PS: You are welcome to pm me if you need to ask anything. ",1517177506.0
calsosta,"1. Find the most popular stacks on https://stackshare.io/ 

1. Learn every buzzword

1. Then when you start insist you do a throwaway prototype for 2 Sprints

Kidding aside I started a brand new product from scratch and we did a prototype for ~ a month.  We set clear goals about what we wanted to learn knowing full well we would throw away the code.  I think this let people experiment more than they normally would and we learned a lot.

We did spend a couple of weeks before that just doing TODO apps and tuts for various stacks.",1517171365.0
nothingduploading,Start reading code.,1517157638.0
cirsca,"I would build 3 different apps, time-boxing myself to 1-2 days per app:

App 1: Kafka/Cassandra/Bullshit Hype Word DB
  - Most startups I know use these hyped up DBs and if you can say ""I remember this!"", you'll be ahead the other person.
  - Cassandra is actually pretty cool and solve some complex issues that startups will be ""thinking about"" long before they need to so you'll use it while Postgres works even better.

App 2: Microservices/SOA
  - Another buzzword but one that actually makes sense. Any startup Ive worked at or heard about uses these now and will expect you to be able to build/maintain/integrate against.

App 3: Some WebSocket/Live Updating application
  - Once again,shouldn't be needed but most startups I know about use it because it's Dope Hot Shit or whatever.
  - Actual problem of keeping WebSocket servers connected during scaling comes up a whole bunch in the backend world of startups.

If you don't want to do that and instead just want to focus on 1 thing, ask for their stack and build an app in it. ",1517161890.0
aveoon,"In general I would ask them what technologies they use (should probably already be on their job requirements/post) and go through the tutorials for them if you're not already familiar. In general though, a decent company will give you time to ramp up and you'll learn on the job. A week isn't going to make a huge difference outside of gaining a basic understanding. 

If were you I'd focus more on tooling. Do they use webpack, gulp, etc. Do they host on AWS or self hosted? Do they use some specific IDE that you have to use? Learning the basics of stuff like that will save you a bit of pain on the first few weeks and allow you to focus on learning their stack.",1517164429.0
Wollbro,I started as a full-stack developer at a startup last year and how I did to prepare was to ask for access to the code and what ever planing tools they use and started digging in to it and learn as much as I could about the project so I could just jump right in and start contribute to the project.,1517175743.0
runvnc,"   Realistically if you don't have most of the skills and knowledge already you're not going to learn them in a week.  Ask them directly for more information about the specific software systems they use and problems they are having, look it up and maybe play around with it for half a day.  Then take a six and a half day vacation.  You are going to be working hard to catch up with their particular way of doing things.  Try to go in there relaxed.

",1517193348.0
gonatee,"Did the working time 9-5 or some 14-a-day-til-midnight? If later, Rest beforehand while reading the primary language/framework of that startup uses",1517162000.0
fullheap,"If you're comfortable with the code itself you should learn how to express your thoughts and ideas. If you get a coding interview they don't really care if you manage to write the solution in a flawless and fast way, they care if your problem solving process is very good and you can explain your thoughts.",1517178658.0
linuxenko,For a week you can try to find something better ))),1517170626.0
festhk,May your productivity increase!,1517142264.0
dev0urer,"You've got a road ahead of you my friend. Look into expressjs and handlebars or a similar templating framework. Basically if you want to use node to get that information onto a HTML page you're going to need to run a server, and then have the server call that API and pass the data to a page.

Another option is that you can do a static HTML page and just use JavaScript and the fetch API to call that API. Then you'll have to use a DOM manipulation framework to add elements to the DOM. An example of this is jQuery, but there are plenty of better alternatives if you look.

There are plenty of tutorials online on how to use express with node. Good luck!",1517125660.0
terry_ds,"Call the API using fetch or AJAX frameworks like Axios. The format returned by API is called JSON. You need to know how to ""play"" with it using JSON.parse(data) to make a JSON Object from the JSON string.
Once you've got the object, it's easy to access it such as result.status.msg which is ""Success"", and so on..

I recommend you to take a beginner course for NodeJS on edX if you're very new to NodeJS. ",1517156572.0
bradleyprice,"So, when you say token, I am assuming you're using jwt tokens.

When you generate a token, you can add additional information in your token. For instance, if you wanted to keep track of the userId, you could have something like this:

    {
      ""exp"": 1547985530,
      ""userId"": 1
    }      

In your code, you would first, check to make sure the token is valid (hasn't been tampered with), then you could use the userId to fetch the user's profile or transaction data.",1517126538.0
rhosnopy,There is a similar project like phpBB but written in node called [nodeBB](https://github.com/NodeBB/NodeBB) ,1517126922.0
Suepahfly,"I would say phpBB is the easier choice. Most hosting providers even offer a simple installer through their admin panels.

Anything node powered requires a virtual server.",1517151441.0
Jake_Jeremy,"There's no reason for you not to use phpBB just because PHP might lose a little bit of it's userbase. It still powers most of the web, and things like board software have become mature over the years.",1517128198.0
dvlsg,"Yeah, read `process.env` once, then pass a config object around which contains the values from it.",1517110813.0
tswaters,"This is I believe because `process.env` is defined on the C side an exposed as a getter to the runtime. Every access of `process.env` needs to drop down to C to get the value out - that is the performance penalty.

When you reference `process.env` make sure you pull out the values once near any require statements at the top of a file - any performance problems will be isolated to startup. Don't do it in hot code paths.  

React used to have checks for `process.env.NODE_ENV==='production'` spread throughout the codebase to determine if they should log developer warnings or not - if this issue is true, https://github.com/facebook/react/issues/812 - it resulted in a 30% performance hit for server rendering.   my understanding is they now build out two files, `production` and `development` and there are no references to `process.env` in either of them.

Here's some additional discussion in the nodejs repo:  https://github.com/nodejs/node/issues/3104",1517129980.0
cjbprime,"It's because it's synchronous -- while the system call is in flight, nothing else can happen. The system call does not take a long time, but someone might naively put that check in a network handler. It's letting you know not to do that.",1517112303.0
mansfall,"1.  Hard to say based on the data and the intent.  Not much description you've given.... but for a simple API, there's lots of tutorials out there to do this quite easily.
2. Just google it.  You'll find tons out there.
3. Hard to say.  Depends if your data you're storing is relational or not.  I'd highly suggest you research this.  Just slamming together a NoSQL database because it's the ""new, easy"" thing, doesn't mean it's the right answer.  You can program yourself into a nightmare that's incredibly difficult to fix or implement correctly.",1517102229.0
oiirme,"It seems a bit `slim` to justify a module, think there'll be better way to promote best practices in encryption. but if it's just a learning exercise, it's cool 

about the code itself.

great comments, README is clear and concise

there was no reason to wrap the functions in `SymmetricCryptoHelper`, you can just export them in a plain object (eg: module.exports = { generateSecretKey256... })

returning an object with { error } is a less common API, especially for such small utilities, it would have been better if you allowed the user to catch the error themselves (also try/catch blocks hinder v8 optimization) eg:

`

function encryptAes256Gcm (key = '', iv = '', plaintext = '') {

	assert.equal(iv.length, 12, 'IV for GCM mode should be 12 bytes');

	assert.equal(key.length, 32, 'Only 256 bit key size is supported');


	const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);

	const ciphertext = Buffer.concat([cipher.update(plaintext, 'utf8'), cipher.final()]);
	

	return {

		ciphertext,

		iv,

		authenticationTag: cipher.getAuthTag();

	}

}

`",1517090587.0
oiirme,"inside parseCSV you probably want to return a promise and resolve it once you're done processing the stream (or promisify fs.readFile or use readFileSync.. whatever you want) either way as you're not awaiting anything in there then there is no reason to set the method as async, just return a promise from there, returning data from the callback pass to fs.readFile does nothing, you probably want to accumulate that somewhere 

eg:

```

parseCSV () {

    return new Promise((resolve, reject) => {

       // do whateer with the stream
       resolve(result)
    })
}

```",1517089832.0
zokker13,"The general rule is, if you do something asynchronously (using promises) you await for that call. Await needs async in the function signature.

You don't use promises here so using async doesn't make sense.


Additionally to that, you use fs.readFile wrong. Multiple times. You might want to read the [documentation](https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_readfile_path_options_callback) about it.

As I see it:

* `fs.readFile` doesn't return a stream
* `fs.readFile` doesn't allow buffer as second parameter
* returning from any callback like you did is futile and actually won't return.",1517132567.0
Taubin,"I like it, however, using only logos is not the greatest. I have no idea what most of the logos are for in the showcase. It would be great to have a caption to state what they actually are. ",1517088334.0
greatwhitehype,Me gusta. This has potential and I hope it keeps growing.,1517088099.0
hackrboy,"The Node.js Application Showcase - Amazing apps, products and projects built with Node.js
https://foundation.nodejs.org/resources/app-showcase",1517090014.0
monsto,"What happened to that fork of Node from about, what was it, June-ish of last year?

Exactly.",1517163326.0
oiirme,"but.... why? 

I guess I'd just base64 encode it when sending over under { ""source"": ""BASE64..."" } or something",1517078973.0
njaaah,Maybe save lexer output to file? :),1517097909.0
GrzegorzWidla,If only debugging frames was as simple as pure HTTP requests. It's gotten better but still not nearly as easy. ,1517082065.0
voidvector,"Did you try HTTP2 vs Websocket? Most of the technical advantage of Websocket goes away. Some people even suggest you can replace Websocket entirely with combination of HTTP2 request and push, though I haven't seen any implementation of that.",1517101606.0
bobbyjball3,"Did you consider using [WS](https://github.com/websockets/ws) ? It is a faster, lighter-weight, Rfc-compliant WebSocket implementation. 

If you wanted to muck with swapping websocket libraries in and out , I did some work with Primus last year, and found it to be handy when I was assessing WebSocket libraries. ",1517130859.0
dvlsg,"Try running it with `--exit`.

More info [here](https://boneskull.com/mocha-v4-nears-release/#mochawontforceexit), it's a breaking change they released with mocha v4.",1517072998.0
Buckwheat469,"Add a `done` variable to the function argument list and call `done()` at the end of the function. It looks like you're testing an asynchronous method and while it once worked, perhaps the code has changed now such that you need to call `done()`.",1517077010.0
skarfacegc,"I'm pretty sure I have a dangling event handler somewhere. I read the mocha5 release notes, but not the mocha4 notes. --exit should work but I'm going to fix the test/code (same with putting the done() in)",1517087705.0
fahq2m8,"Or you know, just use 'response-time' which does exactly the same thing, but better and configurable. Oh and its years and years old by this point.

But nice blog post tho.",1517084951.0
sirmcallister,"I did go pg-node in async after sequelize and other ORM failed me. Or better said I failed them. I found them bloated and I had to go raw query anyway for everything a bit more difficult where my queries do a lot more work. 

PG has some serious awesomeness under the hood which ORMs will have to abstract away for broad SQL dialect support.

I found my time better spend learning SQL to make results to my liking rather learn and get stuck with an ORM out there.

Tip:
Look out for a way to migrate your database. I mean you should git track the db generating and altering .sql code files to track history and replicate the db Schema state. ",1517040713.0
dblaa,"I started doing these video tutorials using node and postgres. Stopped going after I saw little interest, but could help you as a starting point?

http://perkframework.com/v1/video-reel/index.html",1517080114.0
mamoen,"Massive js is a nice orm for PG, it's based on pg, has nice concepts around document storage and table access. 
There are some nice examples on how to use it in their docs.",1517046563.0
boogermann,"You can use objection.js, sequalize or pg-promise. I would recommend objection.js and to learn knex.js alongside. My stack is node, express, graphql and postgres on the backend and vue with vuex on the frontend.  Are you learning everything from scratch or do you code already?",1517036304.0
AlphaDelete,"I have a startup kit kinda similar of what you want, but I use Koa instead Express.
https://github.com/RafaelDelboni/koa-api-startup-kit
I use KnexJS to do all the db stuff.",1517051469.0
sheshbabu,"I've one that uses Knex/PostgreSQL, Express and React - https://github.com/sheshbabu/wpt-ui/tree/master/src",1517055248.0
Ariquitaun,"Node is good for many things, but not relational databases. Dbal and orm libraries are substandard, connection libraries are slow and the looseness of input and types are a nightmare to reign in to give you any semblance of security. ",1517142031.0
Ariquitaun,Node has terrible tooling for postgres beyond the simplest use cases. Not the right tool for that job. ,1517101701.0
nothingduploading,camelCase,1517025787.0
RobLoach,"[PSR-2](http://www.php-fig.org/psr/psr-2/) states camelCase.

Edit: But that's for PHP code, haha. I've used [xo](https://www.npmjs.com/package/xo) to validate syntax. It uses a common set of eslint rules.",1517026719.0
steven447,"Depends if the technology that I'm using has a style guide. I prefer to use camel case in PHP and Javascript. 

However WordPress for example dictates that you should use snake case in your code. So when I'm building wp plugins I use snake case.",1517047108.0
csixty4,"Stick to the idioms of the language you're using. For JavaScript, that tends to be camelCase for everything.",1517072690.0
localhostdev80,camelCase... but I use that in PHP too,1517075129.0
calligraphic-io,AirBnB code standards + ESLint. I would say there's fairly strong consensus for the coding style expressed with AirBnB's standards. ,1517527177.0
cyanawesome,"Just follow this:

http://www.php-fig.org/psr/psr-2/",1517026745.0
neilhuntcz,"PascalCase for functions

camelCase for variables

_camelCase for private variables

Edit: yeah for PHP who knows or cares. Who in their right mind uses that anymore?",1517050599.0
mikegsound,We’ve been working hard on this project over the last month. Any feedback is appreciated!,1517012341.0
jiminykbob,"I'm curious to see how others feel about this concept. There is definitely a special attraction in the idea of decentralization, and I really look forward to seeing the future of this tech.",1517022392.0
fridgefreezer,"Hey, I’m a total noob in the programming game, but one thing I’ve been into for a whole lot of time was the p2p file sharing thing, back when you could literally see how Napster effectively used IRC to work - I had a look at webRTC ages ago but didn’t have the understanding to make head nor tail of it, I’m kinda early in the filling in my missing knowledge period (I have got a socket.io app up and running though which is pleasing for me).

Without knowing the nuts and bolts of how, I’ve always wondered if webRTC and WebTorrent could be used to reduce the one to many bandwidth issues of live video - I kinda look at HQ Trivia and how seemingly unreliable their video is (don’t get me wrong, I’m still pretty impressed with the synchronisation and the video side of things, but it does go wrong / lag a fair bit). I have always wondered in a P2P / torrenty kind of set up, would live video be realistic (or maybe ‘nearly’ live)? How long of a delay would you realistically have to have to allow for getting parts of the ‘feed’ from many different sources and would it be acceptable / fast / reliable enough for live video.

Appreciate it’s not directly related to this post (which I have read and understood most of it) but it’s the closest thing I’ve seen to potentially having people reading that would have any idea if my thoughts about nearly live are just mental or if it could happen.

Peace.",1517066278.0
haytherecharlie,"I honestly can recommend anything better than this tutorial. It teaches mongo, express and mongoose as well as authenticating your api. Basically when you’re done you’ll have a very solid foundation to do pretty much anything in node. 

http://scottksmith.com/blog/2014/05/02/building-restful-apis-with-node/",1517008771.0
cowboy8038,I'll definitely second anything by Traversy Media. I'm going to wind up finishing this one tonight and definitely recommend it. It really starts at ground zero with node and slowly adds in stuff like express and Mongo. Its not till the 3rd or 4th project that you deal with any sort of front end. https://www.udemy.com/the-complete-nodejs-developer-course-2/,1517016582.0
omar-hydrah,"[The net ninja](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg/playlists)

[Traversy Media](https://www.youtube.com/user/TechGuyWeb/playlists)

[Academind](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w/playlists)

[Manthan Dave - node.js tutorials](https://www.youtube.com/playlist?list=PLVBXNyNyLNq3MGbopdcvWc25xijtWaA6X)",1517009517.0
dixncox,"Why do you want to learn mongo DB? Don’t learn buzzwords, learn how to build software!",1517022289.0
OddState,"I am doing the complete web development course on Udemy by Colt Steele. Its a 0 - hero kind of thing where it's the basics of html, CSS and javascropt. I already knew most of this though there were some good topics for refreshing. Builds into using node in the backend with mongo. It definitely focuses on the backend at the end of the course but I really like how the front end gets tied into it too. 

I also did one from Andrew Mead which was good. Built a really nice Todo-list API and some small command line applications . 

The one from Andrew is more focused on node itself rather than the overall picture of web development so if it's just node you want I would suggest him. ",1517033690.0
drkgrntt,"I, like some others, learned this material from Colt Steele's Web Dev Boot Camp. It covers everything very thoroughly. If you want to take it a step further, Stephen Grider has a fantastic React/Redux course and then a Mongo, Express, React/Redux, Node course. I've come to love building full stack React projects because of those courses!

Edit: punctuation",1517060868.0
headyyeti,"Andrew Mead's $10 course on Udemy has been the best one I've done where it all finally clicked.

https://www.udemy.com/the-complete-nodejs-developer-course-2/learn/v4/",1517061561.0
PM__YOUR__GOOD_NEWS,"I'm a fan of [egghead.io](http://egghead.io/), mostly because of their bite size lessons (~3 minutes each) that form a course I can do in between other tasks during my day.

If you sign up for their email subscription they'll email you when new courses come out and the courses are free for a week or something then they go behind a pay wall. If you're clever you can download them and watch them later.

Pricing is all you can watch at $30 a month for a user or $750 a year for a five pack of licenses. Actually the five pack nets you six licenses. They don't advertise it but your ""admin"" account also gets a license.

I got my work to foot the bill for my team.",1517064656.0
GrzegorzWidla,If real time is essential portion of the app go with Feathers. It's sick.,1517000184.0
trycat,"I love Adonis (sounds weird when I say it like that) but I never used the real time stuff.  It makes much more sense to me than any other Node framework I’ve tried, whenever I want to rig something up quickly that’s my go-to. 

Why are you moving away from Firebase?",1516995437.0
Aurelsicoko,"[Strapi](http://strapi.io) seems the perfect Firebase replacement in your case. It provides an authentication system, works with MongoDB and SQL databases. And there is also a dashboard to manage your data and everything is open-source. If you need real-time, you just need to add Socket.IO to your project.",1517049633.0
jingle66,"Check prismagraphql.com
You can build your own graphql server with an autogenerated sql api.
It also offers a cloudservice (graphcool)
Graphql is a VERY cool technology. Also check www.apollographql.com

Realm.io might also be a good option with react native. It's not sql, but offers good offline online syncing out of the box.",1516994716.0
wrobbinz,"I have dabbled into both enough to decide that I prefer adonis. I'm actually super excited about it. Another user stated that you should pick feathers if you need realtime/socket support, but I believe adonis's generator *does* support sockets. I've found the docs for adonis to be better and at the end of the day, I'm just being more productive with it. ",1517009254.0
programmatical,Adonis is great however the latest major release (v4) does not include websockets because Virk is working on a new concept to handle them ,1517028017.0
voiping,What exactly does this do?,1517078089.0
localhostdev80,"Looks like you are binding the array to only one parameter.

INSERT INTO table (data,ex,fv,b,a) VALUES (?, ?, ?, ?, ?)

Should do the trick.",1516971992.0
endjynn,Try reverting to the latest 8.xx version of Node. Sometimes it takes a while for packages to be updated for use with the latest version (v9.xx as of writing).,1516972650.0
MUDrummer,"Without seeing your configuration, I doubt anyone can help you. 

Would highly suggest creating a sample repo that reproduces the problem on github., leaving out your specific urls and such. ",1516973936.0
dom_optimus_maximus,Download fiddler... set breakpoints on your code and run in debug mode through your ide. ,1517351620.0
StoneCypher,[They've been in experimental release behind a compiler flag for some months now](https://nodejs.org/api/esm.html).,1516919043.0
ecares,"In the sources mostly. There a still a lot of reasons not to use this (import() and import.meta) for instance.

This import syntax is terrible and is a pain to implement.",1516917181.0
desnoth,The best tool is nodemon,1516954315.0
erulabs,"Hard to say based on your question - maybe you could show some example code?

I would for sure look into [streaming rows](https://github.com/mysqljs/mysql#streaming-query-rows) out of mysql - rather than running a ton of individual queries.

In any case, a single query that returns all the data you want is going to be better than looping over the results of multiple queries in node. It's probably possible you can do all the work you want purely in SQL, and have the ""report"" handed to node as a query output. This is how SQL was used for years and years before web developers started making applications with it.

+1 for ""bookmarked scans"" tho (using the last seen primary key to select the next ""page"" is _wildly_ better than `LIMIT x OFFSET y`, which is a terrible anti-pattern that should be avoided at all costs)",1516909267.0
elrodrix,async await is the solution.,1516909908.0
,"May I ask why you are writing queries by hand instead of an ORM or at least Knex? 

You always want to use promises. Preferably using async/await syntax. ",1516917115.0
tryAndCatchEmAll,"Based on your code, you had some issues with control execution. In express, you always need to send a response. Your code will be easier to understand if you break it up into a few functions instead of trying to do everything in one callback.

I suggest trying to get the first part of your code working first (return a cvId). From there, you can start populating the cv object, testing each item you add (employment, skills, education). Don't try to do it all at once! Just take it one step at a time :)

I would not worry about promises yet; what I do suggest is looking into sql pools though. If you're using the mysql node library, check this out: https://github.com/mysqljs/mysql#pooling-connections


I refactored your code a bit (but didn't run it)


    //connection initialization code goes up here, don't reuse the same connection for different requests
    //close the connection when you're done with the request (don't have a global connection obj!!)
    var connection = db.connection; //TODO: Make this into a mysqlPool instead of a single connection
    function getCVInfo(req, res) {
        var cv = {
            candidate: {},
            education: [],
            skills: [],
            employment: []
        };
        getTopCVId(function (cvId) {
            if (cvId) {
                cv.id = cvId; //So you know which record you're looking at
                getEmploymentResults(cvId, function(results){
                    if(results){
                        cv.employment = results;
                    }
                    //TODO: Two more nested callbacks to be added! skills, education
                    //Send a response
                    res.status(200); //yay
                    res.json(cv);
                    res.end();
    
                })
            } else {
                //Always need to send a response, so the request can close
                res.send(""Missing cvId"");
                res.end();
            }
        })
    }
    
    function getTopCVId(callback) {
        var query = 'SELECT id, created, summary, lang, preferredPosition, totalMonthsWorkExperience, totalYearsWorkExperience' +
            ' FROM cv ORDER BY id ASC LIMIT 1'; //You have to tell order by to be asc or desc
    
        doQuery(query, function (error, results) {
            var cvID = null;
            for (var i = 0; i < results.length; i++) {
                cvID = results[i].id;
            }
            if (callback) {
                callback(cvID);
            }
        });
    }
    
    function getEmploymentResults(cvId, callback) {
        var query = 'SELECT employerOrgType, endDate, startDate, monthsOfWork, employerOrgName, orgName, location, country, positionType, jobArea AS industry, description  ' +
        'FROM cv_employment_history WHERE cvID = ? ORDER BY id ASC'; //You have to tell order by to be asc or desc
    
        doQueryWithParam(query, cvId, function (error, results) {
            if (callback) {
                callback(results);
            }
        });
    }
    
    function doQuery(query, queryCallback) {
        connection.query(query, function (err, rows) {
            if (err) {
                console.log('fuck an error :(');
                console.log(query);
                console.log(err.stack);
            }
            if (queryCallback) {
                queryCallback(err, rows);
            }
        });
    }
    function doQueryWithParam(query, param, queryCallback) {
        connection.query(query, param, function (err, rows) {
            if (err) {
                console.log('fuck an error :(');
                console.log(query);
                console.log(err.stack);
            }
            if (queryCallback) {
                queryCallback(err, rows);
            }
        });
    }",1516929776.0
TheLegendOfZero,"I'm not sure what the problem is exactly so forgive me if I'm completely off. Would it be more appropriate to do the entire thing in a single query? I notice that in a lot of scenarios where a loop is used to iterate through results, the problem can also be solved with a couple of JOINs.",1516948664.0
kksandyrox,"Read about async.js
Its a really good library. You can use its functions, and will work as expected. ",1516955547.0
SonOfStorms,"jsut use let instead of var for you iterrator variable, for(let i...",1516970531.0
codeintheshade,"I use ES6 for most of my development and haven't touched TypeScript, so I can't really advise you either way in that regard.

If you are just starting out go with Express and use Mongoose for your ORM. Both are easy to get up and running with and there's plenty of tutorials/support out there to help you learn. If you already have some experience with Express then Feathers.js should be a natural jump or you can check out GraphQL for a different approach to API development.

Regardless of what you choose, I personally steer people away from Sequelize - it's unpleasant to use, to say the least. Highly recommend avoiding it ....like, forever. 

 ",1516922725.0
davidmdm,Dont go for mongoose if you want to have a sql database. I agree with the person above who doesn't like sequelize though. I use knexjs and it's been very kind to me. Also express is excellent. Low level enough to give you great control and flexibility but still manages to abstract a lot of http stuff away. ,1516977465.0
jamesism,"Check out the module [child_process](https://nodejs.org/api/child_process.html) that you can use to execute shell commands. If you feel like you can get the info you need, slap an http api around it with express (or whatever other flavour you like) and bob is your father’s wife’s brother. ",1516897369.0
psayre23,"I use Node for most of the plumbing between my home automation systems and various services. It works pretty well for that stuff.

After building several control systems, I still fall back to using the PM2 console. It does everything I need and it’s easy to use, even from my phone. ",1516954319.0
flipperdeflip,Node.js is fine although it must be noted Python is traditionally widely used in automation tasks and system scripting. Whatever works for you.,1516955006.0
BelowTheBenthic,"I've used [pm2](https://github.com/Unitech/pm2)

Edit: maybe I misread",1516894773.0
infeeeee,"I use [pkg](https://www.npmjs.com/package/pkg):

- Make a commercial version of your application without sources
- Make a demo/evaluation/trial version of your app without sources
- Instantly make executables for other platforms (cross-compilation)
- Make some kind of self-extracting archive or installer
- No need to install Node.js and npm to run the packaged application
- No need to download hundreds of files via npm install to deploy your application. Deploy it as a single file
- Put your assets inside the executable to make it even more portable
- Test your app against new Node.js version without installing it",1516914200.0
veswill3,"I dont know what the best or most formal way to do it, but one easy method would be to create an alias in your `.bashrc`

in `~/.bashrc` you can add something like

    alias mycmd='node ~/some/dir/app.js'


then when your terminal starts it will load that alias and you can run it like

    $ mycmd [args]

I have some setup like this to run python commands like this too",1516913319.0
klwt,You could consider making an NPM package that you could install globally.,1516947063.0
Razoyo,Can you point us to a Github repo of your code?,1516912907.0
ecares,https://en.wikipedia.org/wiki/Git has been designed for these cases...,1516890507.0
driftmaniac7,"As already said, GitHub is probably the best way, make branches, merge it when something's done and ur golden",1516901165.0
robhybrid,https://www.youtube.com/watch?v=u8qgehH3kEQ,1516919759.0
rotharius,"Or use GitLab. It has free private repo's, groups and even CI pipelines.",1516967089.0
Aurelsicoko,"Hey guys, I would love to know how you're doing this step in your company? I suppose there is a better way to do this and I'm very interested in it.",1516876888.0
jamesism,Did you do this knowing about npm link?,1516911472.0
r33beers,">Making sure that your npm package works as expected after publishing on npm can be a nightmare.

This sounds like there is a lack of CI setup for the supported environments.

Npm supports installing from git urls, file directories, and tarballs. Publishing to any registry ahead of testing seems very wrong. ",1516922659.0
flameridest,Great to see you at uoft hacks this weekend! Loved working with stdlib and super excited to write some services at work with it :) cheers!,1516898960.0
flipperdeflip,The audacity and arrogance to call a shitty 3rd-party lib 'StdLib' is mind-blowing.,1516883937.0
user501230,This deserves to be on top. Thanks for sharing. ,1516904670.0
keatz55,Bookmarked!,1516935212.0
thornag,r/node is such a slow paced sub that I don't believe splitting the audience even more is a good thing,1516868518.0
liox,"This site is quite awful for mobile. Also, not sure what the point is. ",1516875428.0
zQpNB,"It looks like passport has soem AD related strategies. That'd be cool. Probably a nightmare though.

http://www.passportjs.org/

Is it going to run on a domain name? HTTPS is a pain on the local network? You should get them to make a cert for yourapp.internal.factory.com if possible. ",1516845937.0
tswaters,"I'd question why you need two different code paths for the different users - are they really so different that you can't find commonality (i.e. only do this thing if I have this certain user type)?

If I wanted to do this, I'd attach some middleware before the routes to set up some kind of `res.locals` variable and reference that inside the controller/views and do different things if a certain type is found.
    
    const router = new Router()

    router.use((req, res, next) => {
      res.locals.user_type = some_condition
        ? 'userTypeA'
        : 'userTypeB'
      next()
    })

    router.post('/request-password-reset', (req, res, next) => {

      const method = res.locals.userType === 'userTypeA'
        ? SubUserA.resetPassword
        : SubUserB.resetPassword

      method({...etc...}, (err, result) => {
        if (err) { return next(err) }
        res.render('response', {...etc...})
      })

    })

    app.use('/auth', router)

response.ejs

    <h1><%= title %></h1>
    <% if (userType === 'userTypeA') {%>
      <p>User type A encountered!</p>
    <% } %}
    <% if (userType === 'userTypeB') {%>
      <p>User Type B encountered!</p>
    <% } %}
    <% if (typeof content !== 'undefined') { %>
      <p><%= content %></p>
    <% } %>
    <a href=""<%= redirectTo %>""><%= redirectToLinkText %></a>
    ",1516859726.0
jamesism,"Node absolutely can act as a webserver, check out the standard modules http and https. I’ve always used nginx (or Apache when need was be) as a reverse proxy, because at least for a time the overhead for SSL in node was not cool. I vaguely recall reading that that is no longer the case. ",1516844254.0
alexzim,"As I understand it, PHP is designed to work as a module for webserver. Node.JS is not. It's an independent application which provides you an integrated API for the http protocol. In other words, it has a simple http server built in standard library. That means you might write your own advanced webserver using that API, but you most likely don't really want to do it, cause basic use of that API (which you actually won't do, frameworks would do it for you) and use of the popular webserver like nginx in proxy mode is the most popular way to go.",1516886196.0
zayelion,"    $> npm install http-server -g
    $> http-server var/www/html -p 80

You are on the right track. What Apache does by configuration or convention, nodejs does programmatically. Issue is you have to code it but thats about it. Its not a silver bullet, each way of doing things has its pros and cons but your analyse is correct. The web server is baked into the application. This is rather convenient when distributing stuff to people. They dont have to configure a full stack, just maybe set up a database.

You can write nodejs (think of it as JavaScript in a different browser that gives you file and network access) for your app till you need to scale it. Then you can learn to cluster it, the put a reverse proxy in front of it, and then cut it up into lambdas and put it on AWS. 

Its about as powerful as C# with most micro-solutions to problems being a command line away thanks to npm.",1516898071.0
runvnc,"I usually use Node to serve everything.  A lot of people seem to think nginx is necessary, which is not true.  You just want to watch out for scaling issues related to for example static assets which many projects won't have but if you do then nginx may be an easy way to help with that (but not the only way and not automatically part if it).  I don't think people should use Apache anymore even for PHP.

Personally even though Express has a lot of tools available and might be the easiest path, I am kind of off of it because it is old, the original creator moved on a long time ago, etc.  I personally prefer stuff built off of HTTP/2 core or Koa.",1516853230.0
scaleable,"While Rails and PHP are designed to connect with an http server through some other mechanism, node.js chose to include a whole web server within its API.

You may see similar approaches in frameworks for Java, C# and python.

What node can do? Basically it’s just a javascript runtime plus some basic core libraries. These libs include basic network handling, file handling, C++ interop, among other things.

If you came from PHP, you might find strange at first that in node your script represents a running/long lived instance, not an ephemeral script tied to an http request. Most other languages also work like this, its just that PHP is a solution made with a very specific and limited purpose in mind.",1516858536.0
sumdudeinhisundrware,"Node can be a web server but in a single process it can't keep up with Apache or Nginx. You would need to run multiple instances of the process on one or more server and balance them with HAProxy or Nginx.  Also use a CDN for static content. Never serve images, script etc. from Node. In case you need PHP support its also possible to run PHP under Node using php-fpm and FastCGI but you'll need to implement that yourself for the most part. I do all of this for a 4 million+ unique per day site.",1516858600.0
DiglidiDudeNG,Executables reverse-engineering tools and lots of patience.,1516836752.0
lemonizer,"Not sure what you meant by ""innovating"", sockets are just a much lower level abstraction for network communication and is used by all other protocols.


Are you trying to compare websockets to http perhaps?",1516837620.0
,Your question is wrong u cant compare http and websockets standarts... ,1516840520.0
Capaj,only one reason-http has no way to call a client from the server.,1516835460.0
scaleable,"What if games used http instead of bidirectional connection? Imagine asking the server for info 10 times per second. Doesnt seem optimal, right?

Http has its motivation and use case. Use the right tools for the right jobs, dont try to hammer a nail with a spoon.",1516860200.0
LOL_BUTTS_,"tl;dr: ""I used to think JavaScript programmers weren't Real Programmers, but then I made a toy app in Node and I like JS now""",1516842195.0
SomeRandomBuddy,I used to hate Hacker Noon. And I still do!,1516844451.0
jiub144,This is the general consensus on most new frameworks and languages I come accross.,1516843858.0
jaunkst,This ability to spin up MVPs so quickly was very prevalent in Ruby on Rails. ,1516850203.0
Randy_Watson,Not the free rider problem.,1516849124.0
djslakor,"I just wish a Rails/Django/Laravel kitchen sink like thing for node that the community rallies around would happen.
  
Using Koa/Express is great, but it still requires stitching a lot of stuff together that the aforementioned products just give you out of the box, which is more than enough for a ton of projects.

I'm aware of Sails/Adonis/Feathers/Loopback ... but it doesn't seem like the community has embraced any of those at levels seen for the other 3 products I mentioned.",1516887442.0
RavernKohDev,Another one bites the dust,1516841612.0
tuananh_org,Stockholm syndrome i guess,1516863225.0
fuddlesworth,Much useful. Very yes.,1516820845.0
trout_fucker,"Node scales well horizontally. Most of the time your bottleneck will be your datastore, not your server. Scaling out web servers across multiple nodes is fairly trivial anymore and is solved well enough the same basic idea can be applied no matter what language you're working in. 

Node has the power of being able to use the exact same code, such as validation, on both the front and back end. When you have a client heavy app this becomes very important and can *almost* eliminate discrepancies between frontend and backend code which always seem to pop up in any project of considerable size. 

Besides validation and common utilities, the current trend now is rendering everything on the frontend and pushing your template language to the frontend. However, it's still valid to do serverside rendering to achieve a faster first paint. Node can do this using the same code. ",1516818080.0
zayelion,"Imagine JavaScript that escaped the browser.

- No DOM API
- No rogue code clobbering your vars
- No security features telling you no
- Access to the file system
- Access to ports
- Access to starting and stopping programs
- There are plugins for everything still, BUT THEY DONT REQUIRE jQuery! Some of these plugins even run C++ code!
- Pure logic, in pure JS
- No context syntax jumps

Setup Apache for a static server?
> `npm install http-server -g` done

It has templating for server side, it has routers, it has access to various DB's, (no damn configuration of apache, or Fast-CGI, you just start coding) 

Nodejs can be converted into desktop applications pretty easy to. ",1516900092.0
ecares,"Have you looked at https://github.com/hapijs/boom

https://www.npmjs.com/package/express-boom",1516815588.0
tswaters,"I usually follow a pattern like this,

    async function find_widget (id, user_token) {

      const user = await token_store.find({user: user_token})
      if (!user) {
        throw new Error(401)
      }
      
      const result = await widget_store.find({id})
      if (!result || result.user !== user.id) {
        throw new Error(404)
      }

      return result
    }
    ",1516860015.0
_bhb,"Great resource.

This guide suggest structuring projects by ""module"" rather than by ""role"" (and I've seen this in [other guides](https://github.com/i0natan/nodebestpractices#1-project-structure-practices) as well) e.g.:

BAD:

    ├── controllers
    |   ├── product.js
    |   └── user.js
    ├── models
    |   ├── product.js
    |   └── user.js

GOOD:

    ├── product
    |   ├── index.js
    |   ├── product.js
    |   └── product.test.js
    ├── user
    |   ├── index.js
    |   ├── user.js
    |   └── user.test.js

I like the idea but find it hard to implement, especially when many tools or frameworks use the ""BAD"" structure, for instance:

* The [Express generator](https://expressjs.com/en/starter/generator.html) separates code by ""routes"" and ""views""
* Popular ORM [Sequelize](https://github.com/sequelize) has a cli generator and examples that are all based on a separate ""models"" directory
* The [MEAN.io stack](https://github.com/linnovate/mean/tree/master/server) structures server side code by role (controllers, models, routes, etc)

Does anyone have any concrete examples of the ""good"" module-based structure?

edit: formatting",1516819761.0
voiping,"A lot of useful, concise, well presented good-practices here!",1516816102.0
sotimting,"""Cool GitHub project"" might be a bit of a stretch.",1516821062.0
davidmdm,"I am not sure how you are getting your files although i'll assume through multer.
What i would do is create a function which pipes the file to fsGrid, but returns a promise. Then for i would Promise.all / pmap all of these files.

    function uploadPromise(file) {
        const grid = new Grid();
        return new Promise((resolve, reject) => {
            grid.on('error', reject);
            grid.on('finish', resolve);
            file.pipe(grid);
         });
     }

     const pMap = require('p-map') // Basically like bluebird's Promise.map but native.
     return pMap(req.files, uploadPromise)
          .then(results => {
               res.send(results);
           });

Now obviously there is a couple issues with my code. my promises aren't resolving anything as it stands. so there are no results.
but i leave that to you to decide what you want to resolve once the upload is finished.
Let me know if anything was unclear. hope this helps. 
     ",1516800832.0
dickangstrom,"Yes! I can vouch for this course. Andrew Mead is an extremely knowledgeable teacher of the subject of node.js (and Javascript in general), and his examples become immediately useful for someone trying to build a project. He also keeps the course updated. When one of the libraries/modules used in the course gets breaking changes in the latest updates, he re-records the corresponding video to work with the new code or provide a workaround. I cannot recommend this course enough.",1516776072.0
headyyeti,I liked the course. Does anyone have a recommendation for more Advanced node course now?,1516802077.0
SepticReVo,One of the courses I recommend to anyone wanting to jump into Node. ,1516805042.0
drboyfriend,I just finished going through this course. Very thorough and well worth it. Andrew is a good teacher and everything is to the point and stays updated. If you get stuck along the way the discussion forums are very active.,1516810557.0
Phrate,"Currently on lecture 61. Hands-down an amazing course with thorough explanation, and Andrew gives you challenges throughout the sections that boost your confidence. 

Superb course indeed!",1516828921.0
Lolerwaffles,10 bucks? I'll give it a shot,1516762170.0
sizzlefriz,Finished this course recently. Liked it a lot.,1516778435.0
mouseplaycen,I've taken it and it's solid. Andrew Mead and Stephen Grider are my two fav teachers,1516780793.0
Khif,"OP's account (one of at least two) exists to spam obfuscated affiliate links, just so you know what you're clicking.",1516819455.0
erulabs,"You now have two vague posts with unreasonable expectations without asking any real questions. You could _very easily_ create a PHP file _full_ of wrong decisions and generate a lot of errors. Nothing about NPM is different. Both this and https://www.reddit.com/r/node/comments/7si5nw/npm_install_ridiculous_cpuram/ have to do with _your specific project_.

Fix the warnings, use pure javascript packages that dont need a compiler, swap to a project that isn't full of warnings/heavy packages... lots of solutions....",1516751562.0
dom_optimus_maximus,Sooo... go back to PHP and good riddance haha. NPM is a great tool that gives warnings often log for before breaking changes. If you can’t deal with that then it is doubtful that you will have any meaningful contribution to the JS community anyway.,1516850858.0
coolcosmos,"It's called compilation.

https://en.wikipedia.org/wiki/Compiler",1516746283.0
voidvector,"You are probably using a module that requires native code, the most common module I know is `libsass`, but pretty much all database binding require it too. If the installer cannot find a pre-built binary for your OS/architecture/Node version, it would try to compile it on your computer, which usually takes a long time. 

I would try to figure out which module is causing it, then go to their GitHub and figure out which OS/arch/Node version they have pre-build binaries for, and switch to use those versions. 

Usually when this happens, its not advised to delete your `node_modules` without discretion, as you would need to recompile again.  Also use the current LTS version of Node tend to also help. 
",1516748078.0
twlatl,"8GB of RAM is not enough for development. I have 16GB of RAM (macOS on an i7) and running a node build process or install process can easily peg the CPU at 100% during the process. 

Seriously. The minimum I would recommend for a Node developer is 16GB. 32GB or more is optimal. ",1516759410.0
supertoughfrog,You only have to experience this once per project... once the dependencies are installed you won't to do this again (unless the dependencies change).,1516829824.0
zayelion,"The others explained it pretty well but it could also be transpilers, like is anything using babel, webpack, typescript, ect...? This isnt really a ""node"" problem, its that the previous developer of that project added a dependency without weighing the consequences of doing so.",1516902490.0
edanceee,it's not node or sage. It's your pc. ,1516751434.0
Glutchpls,"I created this wrapper for myself a couple of months ago and i find myself using it a lot. So i thought i might as well share it with you guys

> This is how you would use lowdb

    const low = require('lowdb')
    const FileSync = require('lowdb/adapters/FileSync')

    const adapter = new FileSync('db.json')
    const db = low(adapter)

    // Set some defaults
    db.defaults({ posts: [], users: []})
      .write()

    // Add a post
    db.get('posts')
      .push({title: 'lowdb, good stuff'})
      .write()

    // add user
    db.get('users')
      .push({name: 'lowdb'})
      .write()


> This is how you use ninjadb

    const ninjadb = require('ninjadb')
    const posts = ninjadb.create('posts')
    const users = ninjadb.create('users')

    // add a post
    posts.push({title: 'ninjadb, pretty simple'})

    // add user
    users.push({name: 'ninjadb'})",1516735276.0
apearsonio,"https://kiwiirc.com/embedding

Do you have any more info?  That link should give you everything you need to embed it into a website.",1516747170.0
MyPostsAreRetarded,"Well, I recommend using Postgres because you can query JSON. And when you query JSON, you'll be getting optimal performance since it coincides wonderfully with Douglas Crockford's native JSON parser. The performance will be immense. MongoDB not so much, as Electron / Godot have just started to transition to it, and  their users are currently not happy. And the column issue is no problem because of JSON native binary storage within postgres. Hell, even Path of Exile uses postgres for their game server storage as well. Hope that helps a bit. Good luck",1516729458.0
FlamerBreaker,Move to MongoDB documental datasets where you don't need to cross reference 'tables'. Keep your relational data sets in SQL databases.,1516729654.0
darkdigitaldream,"Your example of storing users is exactly the use case mongodb doesn't play nice with. Mongodb is non-relational. This means any time you want to make a new subset of data that includes users (and that will be very frequently) you will have to do many things by hand and hope you get it 100% right or else you have old or corrupted data. 

",1516730279.0
vanrysss,no,1516747098.0
Modestyiswimpy,"Depends on your data.

If you just need a document store, then go for it. Otherwise no. There are other relational databases out there you may enjoy.",1516729413.0
rebelrexx858,"Answer the following question: does the schema of the database constantly change? If the answer is yes, then move to Mongo, otherwise stay in MySQL. 

As for the other piece, what do you mean has too many columns? It sounds like you need to split you're data a little better.",1516732587.0
MCShoveled,"OMFG 🤦‍♂️

Just ask yourself:

1. How will I host this?
2. Who will maintain the install?
3. How will I do backups?
4. How will I do disaster recovery?
5. Where will I get production support?
6. Will they support my deployment?
7. How will I test security patches?
8. How will I produce reports?
9. How will I prune a user on demand?
10. How will I find/prune inactive users?

Yeah MongoDB is fast/flexible and all, but consider this from a DevOps perspective. If your SQL user table has too many fields, there are better answers than moving it to MongoDB. ",1516756079.0
darkdigitaldream,"Your example of storing users is exactly the use case mongodb doesn't play nice with. Mongodb is non-relational. This means any time you want to make a new subset of data that includes users (and that will be very frequently) you will have to do many things by hand and hope you get it 100% right or else you have old or corrupted data. 

",1516730303.0
ingrown_hair,"I’d be hard pressed to _move_ to mongo. The quick start flexibility is appealing for a new project. For existing code, I’d stay with an RDBMS.
",1516745764.0
MondayMonkey1,"In before snarky remarks.  

Many developers do not like mongodb for a number of reasons, some of them historical.  I approach the issue by asking: what are you lacking with traditional relational dbs?  If its ease of serializing, then you probably arent using an ORM.  Mongo throws out a lot of the nice features with relational dbs: transactions, key constraints, joins and dozens of nice to haves developed over 50 years of refinement.  If you decide to switch to mongo make sure you don't accidentally shoot yourself in the foot when you need another feature.  ",1516818351.0
mitchitized,"I used to start new projects with three databases in my stack: MongoDB, Redis and Postgres. With jsonb and hstore I just install Postgres for now, and add MongoDB or Redis if they are actually needed. Since the original goals of Pg7 were full ANSI SQL support, they have been refactoring for ages, the other RDBMS are still adding features to be competitive and simply aren't as mature.

The tooling around Postgres is absolutely awesome, and there's a huge community behind the project. And I'm MongoMaster #1 or #2, you'd think I'd prefer to run in the other direction but I need my datastores to JUST WORK, BABY.",1516801362.0
Macmee,"At my job we're moving from mongo to postgres because mongo is using far more storage, it's slower, and it doesn't support joins ^(in the same way as SQL)

edit: see my edit/typo",1516743322.0
Vpicone,"Express, body-parser and serve? Yikes. ",1516728043.0
bit_cmdr,"The graph points out:

> Severity shown here only indicates the maximum severity possible for reports submitted to the Asset.

It is a list of modules that they are actively investigating. The column on the right is the maximum level of severity that _can_ be applied i.e. they are examples. There is no additional information for those modules because the investigation is not complete. ",1516749457.0
AmishPanda00,"Are there any more details or steps to take?  Express having a ""Critical"" security issue with no more info is not ideal. ",1516728714.0
danielstaleiny,"I don't know what is keystone list but you can use. 

[].push method to push one by one item to array.
or use spread operator: 

var mergeArray = []

var array1 = [item1, item2]

var array2 = [item3, item4]

mergeArray = [...array1, ...array2]

// should be mergeArray = [item1,item2,item3,item4]

",1516712551.0
one_byte_stand,What’s your schema for the list?,1516720552.0
alchemoria,I don't get it ,1516708473.0
_MORSE_,What,1516711671.0
coolcosmos,You make no sense.,1516731087.0
flipperdeflip,Why not link to the actual hackerone report instead of some random Twitter user's non-contributing tweet?,1516716425.0
bobbyjball3,"If you don't pass res/req into the function, it won't have access to them because the variables are function-scoped. 

Check out [Express middleware](https://expressjs.com/en/guide/writing-middleware.html). If I have a function that I need to use to do the same pre-validation or authorization on multiple routes, I like to use middleware. ",1516685770.0
cloudster314,"Great to see the node community focusing on performance, benchmarking, and N-API. Node has come such a long way in a short period of time. It's a serious platform for serious applications now. Like how it's compared to the Java community. Look forward to seeing more large enterprises adopting node.",1516661324.0
MyPostsAreRetarded,"Not sure why they [have HTML 5's Drag n Drop functionality](https://i.gyazo.com/a27f32f258926a471e8545b862c81c2a.png) in their article that talks about exciting things for Nodejs. Nodejs and HTML 5 doesn't have any correlation (besides recursive node_module issues with Electron apps). GDScript can actually be used instead with Godot for an app, and achieve higher performance. That's for another post though. In any event, seems a bit odd they'd mention that.

In any event, native HTML 5 drag and drop is not good at all. I recommend using [interactjs](http://interactjs.io/). Also, if you need even better performance, using Visual Studio's toolbox can help as well.",1516676933.0
,"Is the path/file typed in the right case?

Windows and Mac are case insensitive, but Linux is not.

In other words if you create a file called Latest.json, it will be found when you type latest.json on Windows or Mac, but not on Linux.

Same goes for the folder names.",1516644660.0
,You can also do this without using Nginx with Node's built in HTTPS server which is cool. ,1516654340.0
vagmi,I would also like to give a shout out to [Caddy](https://caddyserver.com/) which enables TLS with LetsEncrypt with two lines of config. It performs similarly to Nginx. I have been using it for a bunch of sites internally and it is awesome.,1516658128.0
,"Yes this is my way for developing atm too,  additionally you are able to use reverse proxy to run multiple nodes on other servers.  With redis and express,  not bad for prototyping and small apps... ",1516660567.0
voidvector,In newer version of nginx it's also trivial to provide HTTP2 with Node backend. Just need to change one line in Nginx config,1516662662.0
xAdakis,"This is funny, because I had just setup HTTPS with my little server using Let's Encrypt and NGINX. ",1516672929.0
bmf___,"What does this have to do with node?
Also as others have posted, caddy will get the job done even quicker.",1516689106.0
africandev,"I came across some opensource project called CaptainDuckDuck. I no longer have to think of HTTPS anymore. Automatically does it.

",1516705172.0
RecLuse415,So I have a personal portfolio using the GitHub pages feature. Is it possible to hose that page with this technique? Or would I have to create another/new repository to home the portfolio?,1516718880.0
shredgnarrr,You can do this in AWS in 10 minutes and only deal with a minimal amount of config,1516721908.0
dev0urer,You can also use Caddy in place of Nginx and do the same thing in 30 seconds.,1516677928.0
archetherium,Why would you wanna use nginx and not the built in server with node?,1516654801.0
flipperdeflip,"Good effort. Electron app's memory use is terrible for the features they offer. 

People ranted about Java, Flash and AIR but this is even worse.",1516622246.0
Pentafloppy,"[Why not import those modules using git in NPM?](https://stackoverflow.com/a/17509764) (I know it's not really what you asked for, but still something you might want to consider)",1516620117.0
dom_optimus_maximus,"If you are using node modules for clientside code, you can use NPM for dev but for production configuration I would try to use a CDN for the libraries you need clientside. ",1516851914.0
,[deleted],1516622648.0
furious_heisenberg,"Most modern browsers support more than 5 concurrent requests, so I’m not convinced you need anything other than switching this:

const first = await getFirst()
cont second = await getSecond()
const third = await getThird()

To this:

const [first, second, third] = await Promise.all([
    getFirst(),
    getSecond(),
    getThird(),
])",1516634782.0
flipperdeflip,"What is ""linear loading""? Do you mean sequential? 

Why not load all five in paralel? You can do a bunch of AJAX requests at same time. (this is easier if it isn't raw AJAX XMLHTTPRequest but a wrapper thing using Promise's (like fetch API + Promise.all())

Or why nor merge the 5 calls into one call on the server side? Doing HTTP requests isn't free, you might saves a bit of server load and user battery life as well.",1516625844.0
boukers,"First of all, linear ajax requests on the client side have nothing to do with having microservices..

That being said, if you want to implement it on the backend, you can take a look at this: https://github.com/ice-services/moleculer

Ive used it with his boilerplate https://github.com/icebob/vue-express-mongo-boilerplate, but i think you have to switch to his ice-services branch",1516649905.0
Thommasc,"> Is there any way to achieve this using Node?

Yes you can.

I recommend using ExpressJS to handle the routing and put your requests in your controller.

Be careful with deployment, there's a lot of things to learn before you can deploy a secured node app in production.

Alternatively if you like the new shiny tools, you can try AWS lambda using the serverless framework.",1516619504.0
MyPostsAreRetarded,"Good article, not bad. Wish he used Golang or GDScript though (little bit better in performance). And doesn't have to worry about generics / callbacks since GDScript has coroutines as well.",1516613423.0
billymeetssloth,"Why not just use JWTs? Are you dealing with some incredible amount of scale? Honestly, the only real pain in the ass with JWTs is dealing with private cert rotation.

1. User authenticates with client side OAuth
2. You take the provider access token and send it (over ssl) to your backend
3. Verify it server side via your provider application credentials. 
4. Once the validatity of the provider access token is verified, generate the user a JWT and send it back
5. Store JWT in localstorage or whereever
6. Modify you http interceptor (like axios) and attach the JWT to every outbound call from there on out.",1516575605.0
,[deleted],1516570584.0
grajagandev,"This part of Node is a bit tricky and non-intuitive.  'exports' is just shorthand - it is an alias of 'module.exports' so you can use either:

exports.func =functions.database.function(ev){...}

module.exports.func =functions.database.function(ev){...}

Great question",1516551182.0
Sfaith13,Love the command line. Where did you learn node?,1516559881.0
lucasvmiguel,awesome!,1516639550.0
whatadewitt,Nice! But I can’t help but think you should have learned Go...,1516563676.0
MyPostsAreRetarded,Rather jerk off to Gophers in /r/golang than use express,1516540056.0
HeyGuysImMichael,"What exactly do you need help with? I wouldn't consider myself an expert, however I've used node and express on many applications and can get around.",1516544178.0
jamesism,"Don’t know sequelize, but can dm me ",1516556224.0
,"I've never tried it, but PluralSight do one to one training as well as their normal pre-recorded courses. If no one volunteers it might be an option :)",1516535788.0
Lichtenstein_USA,"You have the access token.

> A signed request identifies an application’s identity in addition to the identity accompanying granted permissions of the end-user the application is making API calls on behalf of, represented by the user’s access token

You can start making requests on that user's behalf...since they would have granted you whatever permissions based on the scope (in Twitter's parlance -- Application permission model, I guess)

It appears the library is more or less handling using the access token for you. Once you have it, you can start making requests `client.get(path, params, callback);`

[Twitter docs explain it all in detail](https://developer.twitter.com/en/docs/basics/authentication/guides/authorizing-a-request)",1516517234.0
e_to_the_pi_i,Node allows you to run JavaScript outside of the browser and provides many APIs that turn JavaScript into a general purpose language.,1516483440.0
mycentstoo,"This seems to tie you strongly into third-party platforms - lambda, this serverless framework, and MongoDB Atlas.  For all the supposed gain of using microservices, there's going to be a lot of feature lock by tying yourself strongly to these platforms.  I'd much rather build a containerized application, a boring server and host on generic cloud computers EC2 or otherwise.  Whatever cost you incur by paying for idle computers (which shouldn't be much if it's the entire API you are hosting) you likely gain back in flexibility.",1516515212.0
whatsmyline,No,1516498130.0
tobsn,what’s cli “sls”?,1516473641.0
BimboDickins,TIL about Lambda & Serverless. Thank you for this post. I have a use case for it already. Awesome concept!,1516522036.0
Cofbof,Article doesn't load for me..,1516507399.0
kjnsn01,Just download the static binary and copy it to /usr/local/bin/,1516453231.0
null-undefined,Install termux :),1516460086.0
martiandreamer,"I’m unfamiliar with Node.js setup on Chromebook, but is nvm an option?",1516457140.0
,[deleted],1516451870.0
bobbyjball3,"I see people have recommended S3, which is awesome, but no one has explained why. S3 is really two things: 1) a durable network filesystem that supports cross-region replication, and 2) an object store (as apposed to file store). The former is likely the main point you're interested in. The latter may or may not be relevant, but doesn't hurt. However, there are other solutions to supplying network file systems that are redundant. To name a few: Network Attached Storage (NAS), Storage Area Network (SAN), Microsoft's distributed filesystem (DFS), Software-based Object Stores (e.g. Ambry or Minio), and a smathering of other less frequently used options.

If it's a personal project, and you have a little money to throw at it, S3 is fantastic. If it's an enterprise project, SAN storage is a possibility (assuming your enterprise has it available). Also, if it's an enterprise project, putting your company's or your customer's data in the cloud may not be an option. It's good that you're thinking about this, but if you're doing this professionally, do ask your security and legal teams about data residency restrictions. ",1516466480.0
kjnsn01,Use S3,1516456732.0
oiirme,nginx is not a file server. there are many ways of achieving backup and data consistency across servers. what _exactly_ are you trying to save?,1516460404.0
BeerRush,Most Databases can do that for you. It's hard to implement transactional completeness yourself.,1516443599.0
BobClanRoberts,You could look at GlusterFS as well. ,1516466839.0
oiirme,I've taken a look at your signature.json to figure out how it actually works. What is the purpose of signing each file individually? ,1516453124.0
mistralol,"
Its cool that you can sign packages (except with npm). But what does this actually give?

So how can I verify the signature has not been messed with? Or more importantly is actually signed by somebody I can trust?",1516488415.0
Jake_Jeremy,You could just write a Node script to copy files. There are actually NPM packages for that.,1516400499.0
BenjiSponge,"This is super, super cool.",1516461173.0
unikartoshka,"So, it subscribes on `http.Server` events and forwards them via ws? I think it's not really apt to compare it to `node-inspector`, the name is a bit confusing. this is a web logger hardwired to use ws as its logging facility.

Not sure if it's a broad enough use, if anything I would have thought a more general purpose logger using this method would be more interesting (eg: make a pino/bunyan transport that uses ws)",1516387408.0
hfeeri,"Stay up to date with Node.js - Week #3:

* Learn Node.js — We created a directory of top articles from last year (v.2018)
* A crash course on TypeScript with Node.js
* How does Node load built-in modules?
* Building Secure JavaScript Applications
* Migrating your Node.js REST API to Serverless
* Handling Node.js Microservices with Kubernetes (February 22-23) - Barcelona:
* Meet Middy, - The stylish Node.js middleware engine for AWS Lambda
* Internationalizing Node.js
* Announcing The Node.js Application Showcase",1516369439.0
Drunken__Master,"To me this error looks like a wrong file path from an import or maybe you npm installed something  without stopping the server .  Does anything happen if you run npm install ? 

Tbh I’m newish at Node, these are just the first things I would try . ",1516369495.0
StrangeSound,"VS Code have their github repo where you can raise issues. 

I recommend you have a look through what's already there, and if you can't find anything, raise on yourself.

https://github.com/Microsoft/vscode/issues",1516366930.0
tuilop,"I forgot to mention that the line of code causing this error is the following :
> var MongoClient = require('mongodb').MongoClient

So it could be caused by the mongodb module (I tried to uninstall/install it again without success)",1516372741.0
tuilop,"I managed to solve it by creating a new project and copy all files to the new project. Not the best solution, but it works...",1516543023.0
flipperdeflip,"Instead of piping your incoming stream directly to a single upload stream you pipe it to a 'tee' or 'fork' stream that passes it to a bunch of upload streams. 

Check npm for some implementations (its been a while since I did this so not sure which one is current). You probably want something with shared backpressure to deal with slow servers. It is also in http://highlandjs.org/#fork 

",1516359764.0
goriunovd,"You will need to use socket io client to be able to connect to socket io server. As socket io does some stuff on background which u will need to implement is ws to work properly. If u are interested to go under the hood of socket io then u can try it out,  otherwise use already created socket io client libraries. ",1516371922.0
goriunovd,If u want some scalability in your node js server u can try other libraries such as ClusterWS.,1516372017.0
tclineks,r/golang discussion pointed out how this was initially unfair to node as the complexity of the algorithms was different: https://www.reddit.com/r/golang/comments/7rdd4i/aws_lambda_go_vs_nodejs_performance_benchmark/,1516394842.0
Kamek_pf,"> However, these requests don’t take into account any “warming up” of the Lambda containers.

That's another point in favor of Go. Node's JIT takes a significant amount of time on cold functions and fresh containers.",1516491411.0
TheOnlyArtz,EDIT: the last two numbers became `00` my bad.,1516354810.0
panbhatt,"Read the bitbucket API and create a simple Node.js project (using npm init) and add bitbucked API to the package.json via NPM install and use either REQUEST package or (r2/phin) package to make HTTP request. 
ping me  if you want to do it together. ",1516367915.0
MoTTs_,"Personally, I think currying is one of the bad parts of functional programming. Bad because:

1. The ""data last"" requirement imposes an unnatural and unintuitive parameter order.
2. That same unintuitive, data last order still won't be the right order for all situations.
3. It makes optional parameters harder.

My go-to example is the XHR.open function.

    XMLHttpRequest.open(method, url, async, user, password)

If we re-ordered these parameters to be curry-friendly, it'd probably be something like this:

    XMLHttpRequest.open(password, user, async, method, url)

That's weird and awkward and unintuitive. It also assumes I'll only ever want to partially apply user and password and supply the URL last. But what if instead I want to partially apply the URL and supply the user and password last? Or what if I want to partially apply just the method? Or what if I don't want to supply a user and password at all? Currying is arbitrarily restrictive, and there's no benefit in return. I think it's better to use ordinary partial application by writing ordinary functions on the occasions that you actually need it.

    const withCredentials = (method, url, async) => XMLHttpRequest.open(method, url, async, ""admin"", ""P@ssw0rd"");

    const googleIt = (method, async, user, password) => XMLHttpRequest.open(method, ""https://www.google.com/"", async, user, password);

    const getRequest = (...args) => XMLHttpRequest.open(""GET"", ...args);

----

> compose

>     const map = curry((fn, arr) => arr.map(fn));
      const join = curry((str, arr) => arr.join(str));
      const property = curry((obj, name) => obj[name]);
      const prefix = curry((prefixStr, str) => prefixStr + str);
      const toHex = (x) => x.toString(16);

>      const namedColorToHex = compose(
        prefix('#'),
        join(''),
        map(toHex),
        property(rgbColors)
      );

Just FYI, the ordinary, imperative version of that would look like this:

    const namedColorToHex = (colorName) => '#' + rgbColors[colorName].map(n => n.toString(16)).join('');

Now, I understand that toy examples exist just to demo a concept, and often that makes the concept look like overkill, so I'm just saying, in real life programs, make sure you don't apply functional concepts religiously. They can be overkill in real life too.

> Now we have a new, more general concept of a mappable — something which has a reasonable definition for map. Functional programming (and math) calls this idea of a mappable a Functor.

The math definition may have served as *inspiration* -- same as how the mathematical set theory concept of a class was inspiration for the programming concept of a class -- but at the end of the day, the functional programming definition and the mathematical definition of a functor are actually quite different. In [math](https://en.wikipedia.org/wiki/Functor#Definition), a functor more closely resembles the *callback function* we pass to map. ""A functor F associates to each object X in C an object F(X) in D."" In other words, in math, functor is the mapp**er**, whereas in functional programming, functor is the map**able**.

> Maybe 

The Maybe type is genuinely interesting and can be useful. My only suggestion is to describe right at the beginning what problem it's meant to solve, rather than mentioning it only in passing at the end. It's an alternative way to handle null values or to communicate errors.

    const divide = (dividend, divisor) => {
        if (divisor === 0) {
            return Maybe.Nothing;
        }

        return Maybe.Just(dividend / divisor);
    };

    const plusOne = n => n + 1;

    // If divide was successful, then call plusOne and log the result
    // If divide failed, then do nothing and return Nothing
    const maybeResult = divide(42, 0).map(plusOne);
    maybeResult.map(console.log);

    // Report the error
    if (maybeResult.is(Maybe.Nothing)) {
        console.log('Oops. Something went wrong');
    }

Though, as interesting as it is the way this code works, let's not undersell exceptions. They come out pretty clean too.

    const divide = (dividend, divisor) => {
        if (divisor === 0) {
            throw new Error();
        }

        return dividend / divisor;
    };

    const plusOne = n => n + 1;

    try {
        // If divide was successful, then call plusOne and log the result
        // If divide failed, then do nothing
        const result = plusOne(divide(42, 0));
        console.log(result);
    } catch (e) {
        // Report the error
        console.log('Oops. Something went wrong');
    }

> So in a way we’ve made the Maybe type a more powerful tool by equipping it with some interfaces like map and flatMap. This kind of type we call an Algebraic Data Type.

This mention of algebraic data type seems waaaay out of place. You make it sound like an algebraic data type is something that implements map and flatMap. But actually an algebraic data type is either something with multiple fields (product type) or multiple value constructors (sum type). Whether those types implement map or flatMap is irrelevant here.",1516394339.0
ecares,"SO, you means a company like NearForm, which basically has some of the greatest nodejs expert in the world (because they actually build node) is not in your top 10 ?

I call BS",1516348058.0
kxerr,Surprised that Rising Stack or Toptal didn't make that list,1516495833.0
Caeander,"You need to run that command on the command line, not within Node.",1516327894.0
,[deleted],1516331409.0
haloweenek,Serverless - so it runs on paper ? What a idiotic terminology.... ,1516341101.0
TheOneRavenous,Check out Johnny five for node. I can't remember the competitor but I believe there are two modules out there for talking with hardware.,1516379677.0
iLikeComputers,"Yes, I have done things like this before for industrial automation equipment. ",1516325137.0
mrm8488,"I have worked with several nodejs services and we used RabbitMQ as message broker to communicate. It worked fine. If you finally use RabbitMQ, use Tortoise as RabbitMQ API wrapper.",1516317903.0
headyyeti,I use [multer-s3](https://www.npmjs.com/package/multer-s3) for this,1516319185.0
RedditorFor8Years,Will the progress bar still work on client side ? Also why not bypass server all together and use aws signed upload process ?,1516330856.0
ncgreco1440,"I do something similar to this. All logic is broken into a separate ""main"" file which gets imported into its corresponding ""route"" file, which just imports the main express router appending all the definitions from the ""main"" file to the express router on startup. 

     ../Module
          main.js
          routes.js


Every definition is an object that looks something like this within the routes.js file

     {
          method: 'get',
          url: '/here-be-pirates',
          fn: importedFunction //comes from the main.js file
     }

And then attached to express like so...

     module.exports = function(expressRouter) {
          MyRoutes.forEach((route) => {
               expressRouter[route.method](route.url, route.fn);
          });     
     }

There is some other global routes file that imports all route files which are short and sweet like the one above and I just go through em one by one. 

     ...
     home(expressRouter);
     blogs(expressRouter);
     contact(expressRouter);
     ...",1516292013.0
robotixs,"Thought to add a note about Express Gateway - would love to get ya'lls feedback on it since you're working with express.js and routing. 

LINK: www.express-gateway.io

Thoughts?",1516345722.0
MrJohz,"Isn't the point of using a static site to be blazingly fast and lightweight all by itself?  Does adding React to that really improve the situation significantly?  It seems to me that adding a not-insignificantly sized framework to the page, and having to load and run that every time I want to view the site defies the whole point of using a static site, which is that the page loads quickly and without bells and whistles.

I can understand the whole thing being slightly more maintainable, and I can understand using JSX for templating and things like that, but surely a blog is the opposite to what SPAs should be used for?",1516312786.0
imnotonit,How is this a static blog? You're using a backend that requires a database. The frontend is a SPA. There is no static content in this article.,1516291243.0
Jake_Jeremy,The documentation has a section which might help you: http://requirejs.org/docs/node.html,1516275712.0
mrjking,"> Node.js is less elegant. Traditional concurrent programming in Javascript is done with event callbacks. This can get messy quickly. However, there are people working on this problem with things like JS promises that will do the job in most cases.

Nodejs does not do concurrent (multi threaded) just asynchronous. Async/await and promises are all standard these days, silly to talk about callback hell. Whoever wrote this article does not have very deep knowledge about node.",1516307570.0
danielstaleiny,bias comparison in my opinion. ,1516283971.0
ecares,"NodeJS is not a language.

AFAIK the Go language is not named Golang.

Go was created in 2009 and JS in 1996, they are not really ""next-gen"".

I have not even opened the article, I spotted 3 stupid statements",1516284892.0
rotharius,"A combination of domain and type driven development and clean or hexagonal architecture, which is easier to maintainably do in TypeScript, has really improved JavaScript for me. The fact that I can use (transpile time) interfaces makes it easier to code against abstractions instead of concretions. This, in turn, offers more options to create an intelligent architecture and project structure. ",1516273331.0
idontknowstufforwhat,"I have been working with a legacy codebase at a new job that uses typescript and I must say I do not enjoy it. I am still only a month or so in, so I am open to it being getting used to it, but it so far feels frustrating.

Compiling to browser-friendly JS takes way too long (not a small codebase). I think lots of the pain is due to general structure of the code, but I still dislike the typing, and definitely don't like waiting for compilation. 

I do very much prefer working with the concept of failables, so a uniform return type, within systems I write. Because of this, I think the typing is more painful. 

Sorry, maybe this is just a rant with frustrations of my current codebase! I promise I won't hold it against typescript and will give it it's own shot.",1516233425.0
__bagels__,Is ts-node something that is acceptable in production?,1516293653.0
davidmdm,JavaScript > typescript ,1516240845.0
davidmdm,What are you looking to know? There isn't really a difference between one and two. The only thing to note is that transactions do not exist in mongo.,1516240716.0
theigor,"There's _authentication_ and _authorization_.  Authentication is what passport handles. Authorization is access to _specific_ functionality. An endpoint is specific functionality. So using isLoggedIn is probably too trivial for most use cases and passport has no way to know your _authorization_ rules. 

Edit: pressed send before finishing. ",1516194019.0
chrisdefourire,"- redirect for a website
- no such redirect for an API
- different redirects depending on user role
- maybe I need to redirect & log

etc... I can imagine many reasons...

However, it's mostly a non-problem if using something like

    app.use('/api', ensureAPILoggedIn)
    app.use('/app', ensureUserLoggedIn)

Dont add `loggedIn` to each route...",1516198186.0
DamnItDev,I had good results using the [permission](https://www.npmjs.com/package/permission) package,1516229779.0
poom0nster,"Is it possible to implement service to service messaging with response via Hazelcast? We are using Redis and Kue for it right now.

Our situation:
We have a bunch of Microservices in Kubernetes that need to talk to each other via messaging service. Right now we are using Redis and Kue, but I'm not very happy with it.

Is it possible to implement it via Hazelcast?",1516184949.0
flipperdeflip,"- Enterprise pricing indication on the website would be nice. I don't want to deal with emails from sales people just to get an idea of costs.
- Open Source version on .ORG is almost not mentioned on .COM site, not part of feature comparison and I only found it in download menu. I had to go to Github to find the licence
- Random visitors don't know your product and feature names and that makes it very hard to get overview from the website; it is written as if people already know all about the whole suite",1516198967.0
Pedrock10,You can manage the process with pm2 and use its programmatic API to start or stop the process.,1516180955.0
unikartoshka,"Not exactly sure what you're asking, do you mean execute a process from within node? https://nodejs.org/api/child_process.html",1516177686.0
omar-hydrah,"I don't know about the `mssql` module, but if you're building your fear on the notion of sql injection, you should really look into prepared statements. 

https://www.npmjs.com/package/mssql#prepared-statement

There's a nice playlist on the net ninja channel, explaining how to build a [REST application](https://www.youtube.com/playlist?list=PL4cUxeGkcC9jBcybHMTIia56aV21o2cZ8) 

Unfortunately, it uses mongodb. But the basic idea stays the same. You protect against sql injection using prepared statements. If you're really serious about your security, create authentication tokens for your users to access your api. If some one misbehaves on your routes, block his authentication token. Look into JWT tokens.",1516143609.0
nospambert,"Holy crap, i have been doing the same thing! Please post back about how you addressed this!",1516179776.0
poom0nster,"Show us the code where you're building your queries. Are you using it like this?
    await sql.query`select * from mytable where id = ${value}`

I think you've got the SQL injection prevention fundamentally wrong. There's probably nothing you need to change in your routes, you only need to think about how you build your queries again.",1516189615.0
fancy_panter,36) Writing listicles longer than 10 things.,1516154555.0
GoatseGapAnalyst,"http://mindprod.com/jgloss/unmain.html

How to write unmaintainable code. Do the opposite of that essay, you'll be ok.",1516159325.0
gimmeslack12,Can't wait for the follow up article: _93 Coding Mistakes That Will Get You Fired_.,1516164791.0
onbehalfofthatdude,"""You might love vim or emacs, but that doesn’t mean that it’s the right tool for every job.""

...

...

Shut up!",1516202610.0
knutkirkhorn,Thanks for the article. There are a lot of good tips that I will keep in mind when writing code!,1516130636.0
TheOneRavenous,This is better for learning JavaScript subreddit.,1516129552.0
dmvjs,"the title question differs from the post question.

use the correct installed versions in package.json
remove tildes and carets",1516128526.0
evantahler,`npm shrinkwrap`,1516136167.0
cointoss3,Remove the carats and tildes from package.json and replace with the exact version. You can also check npm docs for flags when doing ‘npm install’. ,1516130357.0
ecares,Just JavaScript https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals,1516117870.0
tehhax0rs,Do you mean like using nginx to proxy the calls to node?,1516116469.0
TheOneRavenous,"Yea you can do that here take a look 
[Proxy NodeJs App](http://lmgtfy.com/?q=Can+I+use+a+proxy+for+nodejs)",1516117795.0
cazzer548,"This is an awesome library. It works best with a deep understanding of Postgres, using row level security is especially awesome.

Still missing a few key GraphQL features though. Last night I couldn't find a way to use nested mutations :(",1516122228.0
danielstaleiny,"Loopback is using swagger internally. Loopback is framework to quickly define REST API. You define schema and endpoints are auto generated for you. It has pros and cons. It is opinionated. 

Swagger is for generating ui of documentation and you use yaml to define endpoints and you end up with pretty ui but without api. 

So Loopback is using their own logic to create rest api and swagger to generate pretty  ui to call this api. 

Check their official pages for more info and perhaps try to create dummy project. 

Good luck",1516105641.0
melanke,"I never used loopback, looks like it is a tool for building model and Rest API.
Swagger is a different thing: it is only used to generate a documentation of the API you build yourself previously.",1516103472.0
Earhacker,"If Node isn't installed on your server, and you can't install it, then forget it. NPM is not what you're looking for.

You can still use Swiper, though. Either [download](https://github.com/nolimits4web/Swiper/releases) it locally (it's in the `dist` folder inside the zip) or get it from a [CDN](https://cdnjs.com/libraries/Swiper), and load it straight to your HTML with script tags, e.g.:

Locally:

    <script src=""dist/js/swiper.min.js""></script>
    <link rel=""stylesheet"" href=""dist/css/swiper.min.css"">

From CDN:

    <script src=""https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.1.0/js/swiper.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.1.0/css/swiper.min.css"">

Most JavaScript front-end libraries can be loaded this way. Only certain things require NPM (e.g. Webpack).",1516052784.0
orebright,"I would highly checking out webpack. You could create an entry JavaScript file which imports all your scripts, webpack would handle concatenation, minification and transpiling with plugins (like babel and uglify). Then you end up with your distribution version of js, you don't need node_modules, npm or node on your server.",1516098100.0
zcold,Why not write a script that downloads fresh copies of what you need and uploads them where you need them? Like npm but not npm because that's not what it does.. I mean I guess it could.. but if you can't install it..,1516083393.0
stlbucket,postgraphile rocks,1516074808.0
borgnish,"Been using this project for about a year now.  Love it, and Benjie- the maintainer - is super helpful",1516106889.0
ddwrt1234,Can this schema be stitched into a graphql-tools schema?,1516242661.0
unikartoshka,"good overviews about deployment of nodejs projects, convering the various approaches and tools, explaining and pros and cons. i see a lot of questions but never seen a good overview trying to clarify that side of the ecosystem as  whole",1516020213.0
Pedrock10,Proper authentication for JWT with blacklisting and renewal? ,1516020917.0
Drunken__Master,Databases that aren’t Mongo . ,1516039328.0
MWrathDev,"The JS stuff is pretty intrinsic (given that you have to know it for npm), so i'd say native modules (C / C++).",1516016102.0
billy_tables,Streams. Streams are so powerful. But there's only 1 library that's workable and it seems to be hibernating: http://highlandjs.org/,1516051364.0
,[deleted],1516036788.0
SomeRandomBuddy,"Zalgo and how he is unleashed. Tons of people can write node.js code but remarkably few know about the node internals (setImmedite/process.nextTick). 

This specifically has to do with code paths that can return synchronously and asynchronously, making sure that specific operations do not block the event loop (or complete out of order) and can be a bit of a rabbit hole for casual developers ",1516040420.0
headyyeti,I'm really hoping to check this again soon with some answers on really good advanced Node tutorials.,1516070763.0
8solutions,I'm just diving into creating my own npm modules -- and I realize that I have no idea how to manage versioning. I'm used to working on the latest version of node for my projects (or transpiling to node 6.10) -- but I'm not sure whether I can use any version I want for my npm package and still be able to import correctly.,1516127390.0
64bitHustler,"I don't feel there's enough deep dive into any one topic.  There's a lot of 5% coverage of the most basic default features of each package.  If I were to make an assessment of the nodeJS community based on what's out there, I'd think it was nothing but people who write To-Do apps, never deploy them, and don't have any actual users.

But personally, I'd like to see somebody do a series on their own highly-opinionated nodeJS app structure that has worked for them in the real world.  How do you setup YOUR dev environment...webpack, ESLint...what style guide?

What about application structure?  Folder structure and where certain code is located.  What are some common custom objects, classes, utility functions, or middleware that all your apps use?

I know these things are personal and variable, but I feel like people stuck at the novice or intermediate level need sort of a starter kit beyond the defaults that helps them move forward on real world apps.  Not having these foundation elements defined is what likely contributes to people ending up in the deadly framework of the month cycle.
",1516204437.0
rotharius,"Proper architecture through design principles. I see so many weak node applications it's almost saddening. Globals, no clear separation of concerns, anemic domain model and weak abstractions.",1516095948.0
zQpNB,Logging? ,1516035195.0
putty27,"Different kinds of file structures and architectures for Node.js projects.

There are tons of these options for different kinds of apps. I'd love seeing a concise, coherent and fully documented article/screencast/whatever that covers the best of those, along with their respective upsides and downsides.

Thanks for doing this, you rock \m/ :)",1516060188.0
kxerr,Best practices for using IISNODE,1516428512.0
mikkelhoegh,"> we’ve all been waiting for

ಠ_ಠ ",1516008239.0
unikartoshka,"hand crafted by indigenous basement dwellers, locally sourced framework, made by upcycled angular parts

not sure why this article made me cringe so bad",1516020045.0
CzechsMix,But... new frameworks come out on Thursday.,1516019302.0
OzziePeck,Everyone knows about this. How about we stop focusing on frameworks and actually do our jobs. ,1516008175.0
uNki23,Can't see any benefit over plain Node.js + Express setup..,1516019074.0
alsiola,"    @Get()
    async root(): Promise< object > {
        const response = await this.weatherService.forCity('New York');
        return response;
    }

Or without pointless fluff...

    @Get()
    root() {
        return this.weatherService.forCity('New York');
    }",1516022038.0
ecares,"Openning post, seeing

    import { Component } from '@nestjs/common';

closing post",1516009569.0
fuddlesworth,I feel like going back to the MVC model is a step backward.,1516153296.0
unikartoshka,What's your reason to do it that way? Java has no shortage of tools to set up a restful API and as it is your main language what's the added value of introducing a layer whose only job is to provide a thin abstraction?,1515945955.0
ezbakedowen,We do this at work. Backend is mostly java based rest services. Middle tier is node + graphql (apollo server). Works pretty well and the front end guys love hitting a single graph server vs multiple rest servers.,1515983348.0
4_gainz,"I believe Airbnb does something like this, with React as a frontend, Rails as a data/API layer and Java services over the database. ",1515973271.0
,You can communicate with different backends from one frontend. From Angular oyu can talk to many microservices; personally I would use React bc I love it.,1515975443.0
omar-hydrah,"> when restarting my pc

Does your browser loose cookies on PC restart? Have you had a similar experience with other sites? Have you tried from different browsers?

> There's a new session ID

Before logging in, you get a new session id? How was it created? 

When you inspect your cookies before logging in, can you confirm the existence of the cookie you had before restarting your PC?",1515956327.0
simoncpu,"* Check the session expiry duration.
* Check if your browser retains the cookies after a restart.",1515980646.0
unikartoshka,"Looks nice, I don't use tidal but thanks for the `blessed` throw back, whoever wrote that was insane ",1515964742.0
bikasv,"Your admin has a value of [""101""], but you're comparing with ""101"". This is the reason you're getting false all the time.

If you want to check for values, you can use includes (ES6) or loop through this array to find the value.

Your logic can be

if (admin.includes('101')) {...}",1515929628.0
pm_me_ur__labia,"     JSON: { ""AdminID"": [""101""] }
    if(admin == ""101"")

The AdminID returns an array. You are checking for it to be a string. ",1515929768.0
simoncpu,"If the JSON format doesn't change (i.e., AdminID will always have an array with a single element), the quickest way to fix this is:

    var admin = config.AdminID[0];
",1515976814.0
fr0z3nph03n1x,This is like the opposite of JavaScript The Good Parts.,1515968532.0
Tomseph,"The pipeline operator is a [Stage 1 feature](https://github.com/tc39/proposals). It's a JS thing you didn't know existed because it's _not yet a JS thing_. Please don't make the mistake of using < Stage 3 features in anything near production code, you'll save yourself a _lot_ of trouble in the long run. ",1515983421.0
veswill3,"I wish the pipe example did not repeat a fn and instead used a third one so you could tell what direction they occur in compared to the ""before"" example.
Does `f(g(h(x)))` become `x |> h |> g |> f` or `x |> f |> g |> h`? I know I can figure this out but I wish you could tell from the example.",1515944023.0
,[deleted],1515938005.0
stompinstinker,The label statements just tore a while in my mind.  I know nothing. ,1515951264.0
AUTplayed,the setTimeout params are actually quite useful! nice,1516147790.0
,[deleted],1515931524.0
TheOneRavenous,"Damn this was not a best practices or a use mongoose better. 

It's more of a beginners guide to mongoose if you can't understand the mongoose docs. 

OP tha ks for taking the time though as you will surely save someone some heart ache. 

My issue is OP said ""reading"" from the database is simple straight forward. BUT OP didn't even mention the select() method! What In the world! That's one of the more important things in mongoose is use of select so you don't pollute the process with huge objects in memory. You also remove sensative data from the object by using select so any malicious code that gains access to the process and runs a query is limited by the selection. You also don't have to filter through portions of the object of you use select correctly since MongoDB will do the filtering for you thence you offload that filter processing to mongoDB server.

Didn't even mention geoNear which I'd another great reason to use mongoDB and also mongoose.

Didn't mention aggregate function for weird queries. ",1515972902.0
fahq2m8,"> How to use Mongoose better?

Throw Mongo away and use a real DB like Postgres?",1515999044.0
TheOneRavenous,"With out looking at the docs...

Why are you using a static NONCE??? Those are generated per request and are valid Once.

Edit: tried looking at docs but there's only the one page. Where's the rest of the docs.

Website wouldn't load a menu to find other parts of the docs.",1515973441.0
Jake_Jeremy,"The docs say that your post params should be base64-encoded JSON, but you have a string.",1515926315.0
zokker13,What kind of error are you getting?,1515950879.0
funkbone,Did you get this to work?  I'm trying to write one as well,1517334406.0
cryptobeing,"Hi guys, 

Anybody managed to get it working? I m also trying to authenticate but no luck",1530705419.0
FountainsOfFluids,"Did you install node after downloading it? 

Are you familiar with the command line?

Are you using Windows, MacOS, or Linux?

Basically, node is a program that runs JavaScript on a command line instead of in a web browser.

So you should be able to go to a command line and enter

`node -v`

and it will tell you your node version, or if node is not found.

Once you have it installed, you would then need to go to the directory where you have your app and run it like it says in the ""Syntax"" section on the github page you linked.

`node Server.js --help`

Then you'll have to figure out how to change around the command so that the program does what you want it to.",1515920492.0
Jake_Jeremy,"So it allows you to copy a file, and applying a transform function beforehands? You should state that a little more explicitly. But seems neat! Though you should consider adding Promise support for async/await.",1515926215.0
omar-hydrah,"Before having to review your code, the error you're getting is probably because of using `res.redirect()` after a response header was already sent. 

Depending on the description you provided on your `user` setup, and taking into consideration that your app fails in the `serialization` process; I would look inside the `user-model`.  There's a big chance that your model is not compatible with your description of the app.

Are you reaching the console logs, before using `user.save()`? The lines in which you log `req.body.email` and `req.body.password`.

In `postClientSignup`, that last part `(req, res, next)`; where is it coming from? Is it the middleware that will take the request after a successful signup? ",1515867117.0
_dramaBoy,Did you try to limit it to one instance using “pm2 start <yourserverscript.js> -i 1” when you start the scripts?,1515873091.0
codearoni,"Does your application have the ability to spawn additional processes or fork? If so, that could explain it.

Regarding mem usage, perhaps you have a mem leak? PM2 has a max-mem-restart setting, where it will restart your app when it reaches a mem threshold.",1515863465.0
migg24,"Can you have a look into the logs whether you have a stream of ""unknown id _...""? Then pm2 was not able to kill some processes. ""pm2 kill"" usually solves it but then you still have to find out why that happens.",1515866802.0
tknew,"There is no issue at all here. Node.js spawn multiple threads to handle synchronous operations (e.g. accessing to the filesystem).

Can you do a screenshot of htop in tree view mode again? (so we can see if there are detached processes)",1515902373.0
unikartoshka,"Two possible reasons I can think of is you've got some additional startup mechanism (systemd etc) that keeps spawning it or pm2 has issues with its unix socket lock file. pm2 is, to be honest, a bit crappy but there are few alternatives if you dont want to go the docker route. what is your ~/.pm2/pm2.log output?",1515861911.0
unikartoshka,when you require a directory path node expected to find the module inside index.js (line 17),1515832751.0
tony-husk,How do you expect this to work?,1515859125.0
oorza,"Seriously, RTFM https://nodejs.org/api/modules.html#modules_all_together",1515860614.0
TheOnlyArtz,[NOTE]: get.js inside /routes is a module being exported.,1515831861.0
TheOnlyArtz,"Simply because the entries don't have an element equals to the ID.
Try to debug the code by logging entries + ID and check if the ID is inside the entries",1515837004.0
bobbyjball3,"RTFM mate: https://redis.io/topics/pubsub

But to be a little more helpful. ""auth"" just authenticates your client to the server. There's no magic to Redis clients (except a little bit with Redis Sentinel). All they're doing is sending Redis built in commands over the wire. I'd suggest you play around with Redis CLI to familiarize yourself with the commands and then start worrying about programmatic access. The commands you're looking for are ""publish"" and ""subscribe"". 

Side note, Redis pub/sub is similar but entirely tangential to key space notifications. They are completely separate/independent, and unlike keyapace notifications, pub/sub spans Redis DBs. 

edit: Here's an example handler that I'd probably use in this situation. The handler map object would just be an object with the channel being the key and the value being a function that takes a standardized arg (perhaps the message?). https://pastebin.com/h2BdLLxA",1515805513.0
tswaters,"You could create two clients, one to subscribe to each channel and the listeners won't need if statements because it was only subscribed to the one channel.",1515812792.0
Max_Stern,OK what to use instead of mongoose when starting a new project? ,1515833869.0
davidmdm,"Sure. However by that logic mongoose is the drug dealer and the users are the addicts. I mean you can blame the addicts. It's a chicken or the egg and problem. I don't need to respect the dealer or think he is providing a public service. 

Mongoose is a mistake. I don't think that is arguable. 

(Also drugs are fine but be safe and responsible) 

Mongoose is not safe nor responsible.",1515818822.0
davidmdm,Mongoose is a bad idea ,1515809610.0
,"* Traversy Media course on NodeJS/ExpressJS/MongoDB->beginner
* Wes Bos-Learn node,if you are familiar with basics
* The complete NodeJS developer course 2nd edition

Also if anyone knows a good video tutorial with project that you create is more than CRUD app",1515788262.0
headyyeti,"Andrew Mead's ""Complete NodeJS Developer Course 2nd Edition"" on Udemy.  
Maximillian Schwarzmueller's Free course on Youtube (Recent)",1515810200.0
LekeH5N1,"As mentioned, Traversy Media, but also The Net Ninja has several node based courses. I think that guy is even more beginner friendly than Brad (Traversy media).

Also Node school is pretty good as it forces you to read the docs as part of the course. ",1515832776.0
petertheill,"Take Stephen Grider's courses about Node.js on Udemy. That guy is AMAZING -- see https://www.udemy.com/courses/search/?q=Stephen%20Grider

I'm basically now just auto-buying whatever courses he's making :)",1515838376.0
Drunken__Master,"The very best Node course I've ever taken was Stephan Grider's Udemy course 
The Complete Developers Guide to MongoDB, I say it's the best because of it's structure, presentation and how thorough Grider is about explaining databases in general and how Mongo differs from relational databases, as well as how much emphasis is put on testing (using Mocha) . While the focus of the course is Mongo, it does go into Node enough to be considered a Node course .

A close second would be Stephan Grider's Udemy course Node with React: Fullstack Web Development, it does a great job explaining how to program and deploy both ends and clears up any confusion of the relation of front and back end as well as teaching oauth, stripe and sendgrid (for mail) . It's not an introductory course though, it does assume previous knowledge of Node and React/Redux .

The best introductory course I've taken was Colt Steel's web developer bootcamp, it does a good job simplifying and introducing the concepts of authorization and CRUD using Node, Mongo and Express .",1515788832.0
theskillwithin,https://learnnode.com/,1515798630.0
umib0zu,The book NodeJS The Right Way. ,1515800220.0
drboyfriend,"I second Andrew Mead's *[The Complete Node.js Developer Course \(2nd Edition\)](https://www.udemy.com/the-complete-nodejs-developer-course-2/)* Easily worth $5-10. Relevant, concise, and easy to follow.",1515825032.0
Tvde1,Write discord bots and you'll learn everything ,1515833602.0
TheOnlyArtz,Completely self thought using the web to  showcase me whatever I wanted to do.,1515836421.0
roger_smith999,Life...you learn more from solving real problems as opposed to making simple todo applets,1515861795.0
mbael,Github,1515865981.0
a1454a,"If you already know JavaScript, I'd say the best source is start to read open source packages lots of people are using e.g. express, and just learn the many different ways of doing things from them",1515796565.0
simplicius_,"My question might out of context but I eagerly want to know can I use Apostrophe as of now, with Meteorjs?",1515838871.0
OzziePeck,Yet another framework?!?! Oh for god sake. ,1515770101.0
fullheap,"Your code never runs. There is no call to any of the functions you defined.

Also, some of the file seems to be missing because some variables are not defined anywhere.",1515753734.0
unikartoshka,"It's likely you are not calling module.check() correctly or your exceptions are being swallowed, initializePromise is not returned so I assume you are not expecting a promise back at module.check(), it's likely you are exiting for some reason before that promise tick is reached",1515762200.0
omar-hydrah,"I had a similar problem, and had to comment out that `successRedirect` command. 

In your passport configuration, have you written a `passReqToCallback` ?

I would try hunting the bug inside the callback of the strategy. 

    new LocalStrategy({
        usernameField: ""email"", // html input name
        passwordField: ""password"", // html input name
        passReqToCallback: true
    }, function(req, email ,password, done){
        // Check for username and password fields. You might have used the wrong way to compare passwords.
        // This can be used as a login strategy, or a signup strategy
        // Create a new user, or find an existing user.
        // return done(err, user)

    });


Check this [passport configuration file](https://github.com/Omar-Hydrah/maktup/blob/master/config/passport-config.js), and the implementation is in the [router](https://github.com/Omar-Hydrah/maktup/blob/master/routes/home-router.js). 

As a side note, it might be a good idea to use [flash messages](http://npmjs.com/package/connect-flash).",1515761070.0
DiesFuechschen,The 403 Status Code doesn't trigger a redirect for the client browser. You will have to use the 302 status code,1515747063.0
zonq,"For anyone finding this via search:

I had to return any status I wanted from the backend. Redirect did not work, because it only redirects the API call from the frontend,  not the user himself. So in my case I returned 401, and in the frontend, you can add a so-called interceptor to the axios instance which acts as a middleware. There you catch your 401 statuses and redirect via window.location.href to the url you want the user to be :)",1516647387.0
unikartoshka,"From my experience, it has a lot of performance benefits even against simple TCP sockets, but there are a lot of variables in there you'd need to consider. Don't think you'd know until you run your own tests pertaining to your specific use case ",1515745200.0
ecares,please stop,1515744083.0
ShitFromMyAss,That's stack I use for just about everything. Super simple to use and you can get a new project up and running in < 5 minutes. ,1515727812.0
luke3br,"If you're just starting out, check out [Feathers](https://feathersjs.com). It's a layer on top of express that gives you quite a bit out of the box (or not much at all if you prefer) with plenty of flexibility. The community + slack group is great. 

Most people tend to go with sequelize for a DB adapter, but knex works too.

",1515729954.0
unikartoshka,"I think the only half decent module i've encountered is objection.js, or straight up knex. i find all the others quite messy and limiting",1515756730.0
,"Koa, Postgres, Typeorm is my stack. 

What is your application for? A REST API perhaps?",1515768350.0
calligraphic-io,"How much experience do you have with Node? That seems a key question. The MySQL driver API is continuation-passing style, as is Express, so they go well together if that's your cup of tea. Koa is built on `co` and generators for async. Personally, I find MySQL painful to use by itself. Why not use a standards-compliant RDBMS, like PostgreSQL?",1515797766.0
flipperdeflip,"MySQL itself is a steaming heap of garbage, maybe try MariaDB or Postgres.",1515768566.0
inabahare,I like it https://imgur.com/EKydO0u,1515740519.0
,[deleted],1515715424.0
cooliobing,"This is a fantastic first step, and I hope it sets the ball rolling for something that is eventually baked into npm. Great work!

Many have cited poor support on Windows or complex technical steps or key management hassle as reasons for not having signed packages yet. Or the fact that module authors [don't really care](https://htmlpreview.github.io/?https://github.com/grant-olson/rubygems-openpgp-ca.org/blob/master/public/blog/nobody-cares-about-signed-gems.html) or don't feel its something that should concern them. This requires tremendous support from the community and module authors.

I think the right tooling around crypto and gentle nudges can help ease people into adopting it. For instance, in case of SSL certs, letsencrypt has done a fantastic job guiding people through icky steps. From the cross-platform support to single-binary install to cert storage management to installation and renewal, the end user is completely insulated from the gory technical details.",1515864604.0
tswaters,"> That means you could download what you intend to one minute, and the next minute be served a compromised package with the exact same name

Then,

>You can then publish your package as normal, and the signature.json file that was added by pkgsign can be used to verify your package contents.

Maybe I'm misunderstanding this - but if an attacker had the ability to change the contents of a npm tarball and serve it to an unsuspecting `node_modules` directory - could they not also include a `signature.json` file with it as well?",1515725988.0
unikartoshka,"what's is the relevancy of vue? or are you referring to some nodejs backend API you're connecting it to?

1. generally people tend to use a dedicated web server as both a reverse proxy to a node server and to serve static files, but that's just a general practice, node is perfectly capable of serving static files

2. that still means you have a node server running, just that it goes through nginx

3. express is a module that sits on top of nodejs's `http` internal module and adds some bells and whistles, one of those is running the request through middlewares",1515702846.0
omar-hydrah,"This is confusing. Are you using callbacks? I don't see any callbacks from your functions.

In your mongo file, do you connect to mongodb every time you execute a function? Why not just connect in the root of your app?

Why are you passing the `res` object to the `loadTwit()` function? Is it a middleware? You should get the results from the `loadTwit()` function, and then respond inside your app.js file with the proper data in the callback of `loadTwit()`.

Any way, what's the error you're getting? Why do you need to render the page multiple times? How are you failing to use ajax requests?",1515702066.0
dangerzone2,"Is pull data really in your EJS template? If so, thats definitely the wrong way to do it.  Put it in a script on the front end.  

EJS (and any template engine) is a one time, stepping stone between the backend controller and the front end.  Once the front end gets the HTML page, it will never be re-rendered by the template engine.  Now if you refresh the page it will go through the same steps backend controller -> template engine -> front end.  

Hope that makes sense and helps.

  ",1515708271.0
tswaters,"You should share the error you get so we can help.

It's kind of weird you connect and disconnect with each request.  Usually you'll want to keep the connection open and close it if the server stops (I think mongodb will handle closing the connection for you).

I don't think you're handling errors properly.  If you throw inside a callback, it blows up hard.  Consider the following:

    app.get('/lucky', (req, res) => {
      setImmediate(() => {
        if (Math.random() < 0.5) {
          throw new Error('unlucky')
        } else {
          res.json({lucky: true})
        }
      })
    })
    
This has a 50% chance to crash the server.  If you're in a callback, you need to call into `next` with the error, if the desire is to let the express error handler deal with it:

    app.get('/lucky', (req, res, next) => {
      setImmediate(() => {
        if (Math.random() < 0.5) {
          next(new Error('unlucky'))
        } else {
          res.json({lucky: true})
        }
      })
    })
    
Note that outside a callback it's totally OK to throw the error - it will be caught properly and returned to user as a 500:

    app.get('/unlucky', () => {throw new Error('unlucky')})

To fix this, you'll probably need to modify each function to include a callback that returns either an error or data.  If error encountered, `return next(err)`. Also, you're missing error handling in the `db.collection('tweets')` callback and in the `T.get` callback.

Another option is to use promises, or the async and await keywords.  Last I checked the mongoclient supports returning promises instead of callbacks, so you should be able to pull it all together into something like this:

    exports.route = async (req, res, next) => {
      try {
        const results = await exports.pullData(twitter)
        const data = await Promise.all(results, twit => exports.loadTwit(twit))
        res.render('db', {data})
      } catch (err) {
        next(err)
      }
    }
    
    exports.pullData = async twitter => {
      const db = await MongoClient.connect(url)
      const collection = await db.collection('tweets')
      const results = await collection.find({}).toArray()
      await db.close()
      return results
    }
    
    exports.loadTwit = async value => new Promise((resolve, reject) => {
      T.get('statuses/show/'+value, function (err, data, response) {
        if (err) { return reject(err) }
        resolve(data)
      });
    }
    
That still has db open/close in route - pulling this out into global scope is left as an exercise for you.
",1515727768.0
erulabs,"This isn't something a stand alone node package is going to be able to do - it requires a bit of distributed systems design.

One or many ""queuers"" (a tiny nodejs application) should, on an interval, query an ACID compliant SQL database for ""work"" - if there is work to do, they should put jobs onto a de-duplicating RabbitMQ channel (using, for example, the primary key from the SQL database as a de-duplication key).

One or many ""workers"" should take jobs from RabbitMQ, ensure the SQL database is in the expected state (state === 'WAITING_FOR_WORKER') and then process the job - the window between message acceptance and acknowledgment needs to match the ""delay"" before the job is to start - for example:

1. Put job into SQL database asking for work to be done in 1 hour
2. 55 minutes pass
3. ""Queuer"" sees a job whos ""due date"" is within 5 minutes of the current time
4. Places job onto RabbitMQ, using primary key as de-duplication mechanism, sets state to WAITING_FOR_WORKER
5. A ""worker"" picks up the job and begins waiting the remaining time until due date (less than 5 minutes)
6. When the work is complete and the database has been updated (state === 'COMPLETE'), the job is ack'ed
7. Should the ack no occur (the work failed), the job is returned to the top of the queue

The time windows should be tuned for your needs - as it depends on if you can do work ""ahead of time"" / how important is it that work is never done ""after due date"", etc. But this design means you can have multiple instances of each application (queuer and worker) - with a sharded database and clustered RabbitMQ, this architecture can handle more or less any amount of work you can afford to process.

You should carefully monitor the number of messages in queue - if the queue grows, you will want to scale up the ""worker"" fleet. This can be done pretty easily by exporting the RabbitMQ Queue-Length metric to your cloud provider and using it as a scaling factor (1 worker is probably enough, until it isn't). The de-duplication is also hopefully _never_ required, since you're modifying the SQL database immediately after sending the message to RabbitMQ, but you always want to design your systems so that ""more than 1"" is easy to do. The de-duplication here means blue-green deployments are possible (briefly running 2 queuers shouldn't be an issue)

Also, be aware of RabbitMQ's ""prefetch"" (the number of messages a worker can handle at once). Because of the nature of NodeJS (being single threaded), I recommend a `prefetch(1)` - simply launch more ""worker"" instances to handle more messages. This assumes your work is resource-intensive and not time-intensive (if the work is just querying a remote API or something, maybe a high prefetch would be fine).

I would leverage `amqplib` and `mysql2` directly for this task - sorry if that's not the answer you're looking for tho :)",1515704976.0
endjynn,Having used rxjs in Angular 2/4/5 etc. Apart from some very specific use cases I honestly don't see the benefits of using rxjs. In my opinion it adds unnecessary complexity and makes your code harder to reason about and debug for very little gain. I think this might be the reason why we're not seeing widespread adoption of rxjs outside of Angular.,1515715133.0
VertiGuo,"By migrations, do you mean database migrations?

In my experience, the solution to not having to tell people to run `npm install` is to have a standardized way of starting the application. `npm install` can then be included in that process. For example, you could put `npm install &&` into your `npm start` script.",1515689770.0
eablokker,"Yes definitely interested. There are a few migrations libraries out there already. Not sure if they’re any good. I ended up using a seeding library instead, because it seemed easier to simply replace the db with new data instead of meticulously writing each change as a mongo query. But the seeding libraries I found are not super high quality. Kind of disappointed in the lack of mature and high quality migration and seeding libraries for Node.",1515689505.0
rotharius,"> run npm on next pull

You could use a git hook for this. AFAIK, there is no post-pull hook. But there is a post-merge one.

",1515698477.0
brogramming102,"http://www.npmtrends.com/angular-vs-ember-source-vs-react-vs-vue

I never realized this but the heavy fall in popularity for React is over the holiday which seems to indicate that React is popular because people use it at their job. 

Thinking about it makes sense since React is something that I would use in heavier applications developed for companies. But it isn't something that a hobby coder would play around with.",1515688187.0
fyzbo,"Reddit pointing to twitter pointing to Udemy?  Should I just assume affiliate link?

Here is the direct link - https://www.udemy.com/understand-nodejs/

Does anyone know if this course has value?",1515684935.0
cordev,"Do you have anything to say about the course? Udemy generally has sales, so that part of your post isn't notable, but if you've taken the course - even part of it - and found it to be worthwhile, then I'd be interested in hearing what you have to say about it. These are the things I'm curious about:

What level of experience did you have going into the course?

What have you built on your own since sitting through it? Was there any other supplementary material that you used, and was that material recommended by the course or did you find it elsewhere?

Are there lessons or suggested materials in the course that you did not find helpful?

The course says that it goes over ""core Javascript concepts."" For someone who is already proficient with JavaScript, are these lessons easily skipped or are they interspersed with other lessons?

How does it compare to these courses? Would it be a good follow-up to the second and third courses in this list if I were interested in learning more about Node.js?

* The 2nd Edition of [The Complete Node.js Developer Course](https://www.udemy.com/the-complete-nodejs-developer-course-2/)
* The ~4.5 hours of Node.js content in [The Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/learn/v4/content) which has 3 times as many students enrolled
* [Node with React: Fullstack Web Development](https://www.udemy.com/node-with-react-fullstack-web-development/learn/v4/overview)",1515685188.0
pratiks3,Mods why is this allowed on here? These types of ads are contributing to a nodejs discussion.,1515685931.0
jonathan_seitz,"Well first off, the linked gist is a 7 year old fork of https://gist.github.com/isaacs/579814, but both scripts have the same problem in the last line:

    curl https://www.npmjs.org/install.sh | sh    

If you try running just the curl command in your shell (without piping to sh), you'll see that what comes back is not a shell script but an nginx notice saying that the content has moved permanently (the new url is a **.com** not a **.org**)

**That being said,** you'll probably be better off using [NVM](https://github.com/creationix/nvm/blob/master/README.md#installation), the node version manager, to manage the node and npm installation for just your user account. It offers a much easier update path, and it's what [NPM recommends using on the official website](https://docs.npmjs.com/getting-started/installing-node).",1515678371.0
flipperdeflip,"IIRC the salt is concatenated with the actual hashed password as the single value you store in the database. 

So where it says `hash` in the compare signature it means like `hash_plus_salt_and_stuff` instead of only `hash`.",1515666819.0
nodexplained,middleware functions are always invoked in the order in which they appears. The order of middleware loading is very important: middleware functions that are loaded first are also executed first...,1515646125.0
omar-hydrah,"There's no way the socket.io server would be intercepting your http requests.

Have you tried this package: [express-socket.io-session](https://www.npmjs.com/package/express-socket.io-session) ? It makes the session object available to your socket server. So you can authenticate inside the socket server it self.

My socket server setup for this project is working just fine:

https://github.com/omar-hydrah/maktup

The authentication for chat messages is happening inside the socket server. And I'm receiving some ajax requests on certain routes. There's not a single problem.
",1515613636.0
mush33room,"As far as I know, there is not, they only provide one port.
Is there a reason why you're using a separate port for socket.io? You can use the same httpserver object to init both socket.io and express app.",1515608969.0
dangerzone2,"Grunt doesn't bring anything to the project other than automation of tasks.  If you have to do any manual commands (moving files, transpiling, linting, uglify, minify, etc...) while building your app, you can use Grunt to do it for you. ",1515606283.0
sir_eeps,"build tools tend to play a smaller role with the back-end. If your using older versions of node and want to use the latest JavaScript features, or if you want to use TypeScript - then transpiling, but even then - that tends to be a simple enough step that a npm script tag can usually do the trick.

If your not finding a need for it yet - don't try and force it in. Grunt is also a little dated and isn't used much anymore - although can still have it's uses. 

If you hit a point where you start hitting a bunch of repetitive tasks that you want to automate, or turn them into a simple one-liner command - then start looking into task runners, but even then - npm scripts can get you pretty far. 

But task runners in general (grunt, gulp, makefiles, whatever) can do things like

* running tests, doing lint checks, generating coverage reports etc
* compiling/transpiling 
",1515630741.0
boron_rage,"Compiling code, such as typescript or a JS to a version compatible to your version of node. Handling running of test suites loads of things",1515606223.0
Wickity,"> I suggest reading up on them. NoSQL and document based databases are, in my opinion, the future of the web, if not already. MySQL is far too rigid, and as websites start to move away from PHP and start to use javascript, these document based storage systems will come into their own.

[https://i.imgur.com/AS95rDo.gif](https://i.imgur.com/AS95rDo.gif)",1515623123.0
L33-the-3rd,"Hey there r/node. A few weeks ago I commented on a thread about using Node for e-commerce. I've got some experience in this area - I don't class myself as a Node genius, but I've setup 3 successful e-commerce sites recently using it, and a few people wanted to know more. Thought I'd share it here too.

If anyone has anything they'd like me to expand upon, I'd be happy to update the document, so any feedback is definitely welcomed.",1515602537.0
drunkcatsdgaf,"I worked on a node.js/mongo cart about 1.5 years ago that ended up being migrated away from mongo to postgres because the data was relational after all.
   
   
Once you start adding complexity; IE product variations, you will see issues arise. I recommend postgres over mongo because it can act like a nosql database when needed, and still have the great features sql supplies. ",1515639107.0
SoiledShip,"A document database is literally the exact opposite of what you need for an ecommerce platform. You need a database that is ACID compliant and capable of multi-table transactions otherwise you can't guarantee some very important and basic things. 

For example you cant remove an item from inventory and add it to their order at the same exact time (thinking of mongo as the initially but applies to most/all document stores). What happens when someone manages to trip over that? You can't say it won't happen and people really hate it when you fuck up something dealing with their money.

In very specific circumstances its okay to have eventual consistency and non atomic operations. You could even do part of an ecommerce platform in mongodb for parts where there is less relationships like comments and ratings. But sql is and will always be necessary because most things are more relational than you may initially perceive.",1515664411.0
mshthn,Enjoyed every paragraph! Brilliant.,1515623187.0
iceman198,"I have to say, this was an educational read.",1515673596.0
LekeH5N1,Jesus Christ ,1515679371.0
infernal_toast,Rails 5.2 adds a security policy file to prevent this now #pwned,1515624514.0
autotldr,"This is the best tl;dr I could make, [original](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) reduced by 92%. (I'm a bot)
*****
> Our penetration testers would see it in their HTTP request monitoring tools!What hours do they work? My code doesn&#039;t send anything between 7am and 7pm. It halves my haul, but 95% reduces my chances of getting caught.

> Did somebody tell you that this would prevent malicious code from sending data off to some dastardly domain? I hate to be the bearer of bad news, but the following four lines of code will glide right through even the strictest content security policy.

> I&#039;ll send you a thank you card with a photo of the stuff I bought with your money.


*****
[**Extended Summary**](http://np.reddit.com/r/autotldr/comments/7qo074/im_harvesting_credit_card_numbers_and_passwords/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ ""Version 1.65, ~282476 tl;drs so far."") | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr ""PM's and comments are monitored, constructive feedback is welcome."") | *Top* *keywords*: **send**^#1 **code**^#2 **request**^#3 **CSP**^#4 **see**^#5",1516059112.0
SomeRandomBuddy,This absolute trash hackernoon article again? Kindly fuck right off,1515615425.0
MrOCDx3,Not sure what you are asking. The dependencies are are standard fair for a project if it's complexity. Are you thinking of cloning it?,1515605161.0
dathappysheep,Yeah I might be able to help. I have no experience making chrome extensions so this could be interesting,1515599783.0
xluryan,"Hi, I'm a software engineer and work a lot with web technologies.

How are you planning to measure internet speed?",1515600346.0
noradbase,"Check your code for how it is making the API requests. For example, testing the code locally you can GET: localhost:8080/api/example, but on deploy that would need to be GET: www.mywebsite.com:8080/api/example.

What you can do is append the relative location to the api call using window.location.origin. In this case you would do GET: window.location.origin + '/api/example'


Unrelated, but you may also want to look into using NGINX on your server. With NGINX you can have it listen on port 80/443, while leaving your node server running on a different port that NGINX will reroute to.

This will do two things. 
1) You won't have to append the port # to your site to visit it. 
2) Node won't have to be open to the world directly as you'll have a NGINX reverse proxy in between.
",1515598750.0
blackshadev,"First check your network tab in the Chrome debug tools (or which ever browser debug tools you use). Let you website perform the API calls and 10 triple check the used routes and URLs most of the time you will find 5he issue this way. Maybe the 404 is because of an preflight request (Options). Please Google on CORS (if you are unfamiliar with it). If  you know that the website calls are fine and CORS is not the issue. Perform the requests manually via a rest client and compare between the browsers network version. If  that is not the issue and the rest calls do work. Please paste the Ajax request code in a pastebin, without any more information it is hard to help. ",1515624513.0
sockjuggler,"A stored procedure is executed with SQL, node (or any choice language/framework) is not relevant here. I do not know of any libraries that help with _managing_ MySQL stored procedures, but it's possible one exists. 

fwiw, requiring stored procedures on a project is... very strange. ",1515570352.0
richraid21,Node itself is not what is interacting with your database. Whatever MySQL driver you choose to use is what actually interfaces with the database instance. Typically most people use [mysql](https://www.npmjs.com/package/mysql) which can handle stored procedure calls just fine. ,1515564085.0
reeferd,"Sorry, bit of a node n00b here. I've used foreverjs to run my node applications in the past, if you were to run your processes with forever, you can have your main application get information about the other processes using it.

Another option is to run a shell command like: ""ps |grep node"" and parse that result in to something useful.",1515567086.0
unikartoshka,"Well, I haven't the slightest idea as to the _why_ you're doing it, but you can just run a reverse proxy inside node and forward varying endpoints to the user, how you distinguish between requests is up to you, if via url rewritting or headers or whatever. no idea why anybody would ever want to do anything this way, but that's your prerogative",1515588897.0
TheOneRavenous,NPM Search: Current-process module. ,1515617397.0
robinjoseph08,You should add a [`repository`](https://docs.npmjs.com/files/package.json#repository) property to your `package.json` and push up a new version. That’s how npm knows where to link to. ,1515555397.0
,"Before moving your aggregations to code, I'd check two things:  
1. Make sure you have all the necessary indexes. If you're using `$lookup` you'll want to make sure you have an index for the lookup.  
2. I'd try and optimize my aggregation to reduce the number of documents down to as few as possible. Also remember only the first `$match` will use your indexes.  
  
I would also try and narrow down what part of the aggregation is actually running slowly. If you comment out all steps except for the first and run it, then comment out all except for the first two and run it, etc. you can get a good profile of what step is taking the longest and potentially come up with a solution (a new index? maybe changing the aggregation?).",1515544285.0
davidmdm,"Also, what is your use case for such high amounts of data? Are you doing transformations  and writing to disk or a différent db? Are you calculating some value and sending an http response back to a user? The use case will dictate whether you need to adapt to streams or not. ",1515559743.0
richraid21,"The validity of the third option is completely dependent on: 

a) How your data is structured: both logically and physically      
b) What kind of transformations you are doing to it

",1515563751.0
skarfacegc,What is your data? What documents are you storing?,1515603266.0
QAFY,"We were using DynamoDB and seeing pretty poor performance, mostly due to the fact we had to manually join multiple tables or do things like run order N operations to filter and sort data due to lack of support for certain types of queries/aggregations, etc. We switched to Postgres and saw massive performance improvements. There were some other added benefits of switching such as the availability of much more powerful ORM's (we use Sequelize now), functions, transactions, etc.

I'll tell you one thing... There is no better time to make a decision like this than A.S.A.P. Your database will only get larger and more complicated going forward, making any migration harder. Our database was not even that large (a dozen tables, maybe 100k rows) and it still took an engineer a few weeks to do the migration.",1521270739.0
ImtheDr,"You need to set ejs as your view engine, like this (if you were to use express)

    app.set('view engine', 'ejs');

and then, on the specific route you want it, run your code and send it to your view (ejs file)

[here's a scotch's tutorial](https://scotch.io/tutorials/use-ejs-to-template-your-node-application)",1515538774.0
Anafartalar,"Great work, Vincent’s OpenCV library also looks awesome. I will give it a try at the first opportunity.",1515569433.0
_bit,"Hi there - I'm a developer advocate at NodeSource. 👋

Definitely interested in the response from the community - I'm obviously biased, but would be happy to hear your thoughts and answer any questions.",1515536163.0
,http://nodesource.com/,1515536183.0
calligraphic-io,"I have a an application that I plan to open source, and that is about (I would guess) a year away (it incorporates a lot of work that I am doing for a private client now). I believe strongly I need to utilize something like Nodesource's certified modules system, because the app involves e-commerce. There is simply no way to trust the NPM package repository for such an application. So, I've watched Nodesource for a while. I have a positive impression of them and what their goals are. I've been meaning to research how to leverage their certified modules for an open-source project, but haven't been close enough to take the time yet.

Maybe _bit has some input?",1515797613.0
,"The reason why I ask Is to understand if node js really needs commercial support and tools in-order to scale to mission critical apps. If the answer is no, cool. But how can a dev or architect grow their career and profile on apps that are not mission critical without help. ",1515564895.0
alchemoria,"Shrinkwrap? It's almost impossible for anyone to help without more info. 
1. What error are you getting? Any kind of exception/trace?
2. What are the differences in node_modules?
3. Are you using shrinkwrap? What do your dependencies look like? ",1515545073.0
bdvx,"pipe npm ls into a file on both environments then diff the two files. that will tell you which packages got updated meanwhile

then you can fix the version number of the package in the package.json to the working one, but this way you'll lose updates ",1515545668.0
CodingWithChad,"I found the answer. I needed to add   --prebuildDirectory ./node_modules
    `node-lambda deploy --prebuiltDirectory ./node_modules`

 ",1515539030.0
OzziePeck,"2018 is going well, isn’t it. ",1515617899.0
chrwei,"if you have a local cloud9 setup, you just need nginx to act as a reverse proxy to your node process.

",1515529500.0
fahq2m8,"I never understood this... Did you just ask this question and expect to twiddle your thumbs until someone came by to answer?

I mean fuck, typing ""cloud9 self hosted nginx"" into google gives you 3-4 results that will hold your hand.",1515524923.0
bogas04,"Hi!

So this is a library I made to help with chunking of responses. If you've ever tried to stream parts of your web-app, or split it into separate chunks (App Shell model?), this might make sense to you.

If you've ever tried lit-html, this library works very much like it.

So now you can probably stream your react app, stream your CSS, and your meta tags, without having to listen to end events of each stream and manually piping one into another. While at it, you can also await promises (API calls?), or pass through a complex function. This can be seen as a alternative to templating libraries, but it isn't quite verbose.

Please let me know what you think about it, especially if it helps you. Thank you so much!",1515517461.0
unikartoshka,"Interacting with the filesystem is not particularly hard, you can just use the builtin `fs` module directly and have pretty much everything you'd need ",1515509241.0
noomretsim,`fs-extra` is a nice extended version of `fs`: https://github.com/jprichardson/node-fs-extra,1515511470.0
cjrutherford,"let me know, I'd love to contribute to the project.",1515515354.0
azuosxela,"I use pm2 process manager to deploy my node.js apps. Is very easy to use, I recommend you to look that. ",1515491085.0
bjelke2,Personally i have a good experience with pm2 aswell. Very easy to use.,1515492109.0
Eliaslfox,Always write return res.send. Also only modify the response object in the last line of the last handler. ,1515455880.0
davidmdm,"nope. There is no downfall to using the return. And after 10 minutes it will look and feel so normal. It will allow you to never reset the headers or mess up your express response state. Look how elegant this is: 

    if (faultCondition) {  
        return res.status(400).send(""Invalid application state"");
    }
    return res.send(""success"");




",1515467396.0
allelseistaken,"Put it this way to make it look natural: A ""return"" indicates very clearly where execution ends. If you're using an IDE or an editor that highlights code and given it's one of the longest, if not the longest keyword, it will also be easy to identify skimming through the code.",1515468504.0
Schweppesale,"Arrow functions maybe?

    const handler = (execute, res) => execute()
        .then(((code, message}) => res.code(code).send(message))
        .catch(err => res.code(500).send(err));

    app.post('/resource', (req, res) => 
        handler(() => service.create(req.body), res);

    app.get('/resource/:id', (req, res) => 
        handler(() => service.get(req.params.id), res);",1515477038.0
tswaters,"Only ever put one `res.send` in a router.  You can create an eslint rule (if one doesn't already exist) to enforce this - can also enforce passing the third parameter to a route (`next`)

If you need to handle a bad case, `return next(err)` - be it a db error, or a custom validation/unauth/forbidden error, whatever else.

In the error handler, always make sure to check `res.headersSent`.",1515482384.0
noomretsim,"In case you want to return a JSON object, you can use `res.json`, for example: `res.json({key:'value'})`",1515512072.0
Earhacker,Unzip the zip file to a directory and use [require-all](https://www.npmjs.com/package/require-all),1515452630.0
Jake_Jeremy,"This package allows you to read specific files from a zip, without extracting everything: https://github.com/antelle/node-stream-zip",1515458439.0
peanutbutterandbeer,"What exactly is in the ""listOfRequestObjects""?

typically you would do something like this... (you can paste this in to the chrome devtools console and run it)

    (() => {
    
    const fakeRequest = (time, result) => new Promise((resolve,reject) => setTimeout(() => resolve(result), time));
    const logResults = ([result1, result2, result3]) => console.log(result1, result2, result3);
    
    Promise.all([
        fakeRequest(3000, 'req1'),
        fakeRequest(2000, 'req2'),
        fakeRequest(5000, 'req3')
    ]).then( logResults );
    
    })()

... The output should be ""req1 req2 req3"".

One reason your Promise.all might not be working could be the ""request objects"" your passing in are not actually Promises (that are returning the results).",1515459619.0
redditpentester,"And if there is a better subreddit like 'nodehelp' or something, I'll stop bugging you guys for a solution. I just didn't find any subreddit like that.
",1515444019.0
will123195,Look at Bluebird's props() method,1515445436.0
MrOCDx3,"const results = mysql.query( ...

Don't think that is legal.

Use the results returned in the callback.",1515445623.0
dolphinboy1637,I'd check out heroku to host it. They have a free tier and there's tons of documentation out there to set up a web app. ,1515431777.0
bogas04,Use https://now.sh to deploy in one command.,1515435551.0
Jake_Jeremy,If you are a student you could look into DigitalOcean - it's really interesting (and easy) to set up your own little server. Then you just have nginx running as a reverse proxy which forwards data to Node running on any port (you could even keep 3000).,1515458606.0
JulieSundar,"You could try using openshift hosting the last i remebered it was free.
",1515480221.0
tjhmusic11,"There are some great options already suggested. But let me throw another one in the ring. Check out Docker, it’s not too difficult to get a basic set up going, but there are a ton of awesome features that scale beautifully.  Also, the container paradigm works great cross platform if you use MacOS or Windows.

If you just want an easy short term solution, Heroku is great. But If you plan on developing production/ complex apps in the future, I’d recommend taking an evening to get the Docker basics down, then you’ll have a tool that can take you much farther than a platform as a service like Heroku can. 

The Docker documentation is fantastic, but if you are a online course kind of person there is a whole course on Udemy called “Docker Mastery” that is terrific.
",1515481137.0
mayhempk1,You would have to change the port to 80 since that is what HTTP/the Internet (WWW) uses. ,1515440596.0
,[deleted],1515433634.0
CashWilliams,"The main issue for me around npm was the claimed ability to have some code on github but have *different* code come down in the actual package from npm (something about /lib/ ?)

Anyone know if this is possible and/or likely. Thats the main point for me as people reviewing a package would never see the backdoor unless they unminified the deployed JS. ",1515463866.0
jayellis68,The only way I was able to get nodemon to work in a Docker dev environment was to dockerise my editor (vim). Which has its own benefits. ,1515492215.0
TheOneRavenous,"Doesn't load without JavaScript. Only assets that loaded were the bottom social media buttons. No headings no text no images. 

So no server side rendering? ",1515511941.0
simonepri,"Do you believe that can make sense to create a scaffolding cli using this skeleton?  
Would you use it?  
Thanks for any feedback!",1515490304.0
De_Wouter,"Every decent web developer needs to work with JavaScript at some point, so why not the same language for the back-end as well?",1515436116.0
zayelion,Using JavaScript without the DOM is pure joy.,1515426156.0
djslakor,"I think most developers could build just about anything they wanted in just about any web capable language, one way or another.  I previously used PHP for backend stuff.  After using Node long enough, I realized there wasn't anything PHP gave me that I couldn't also do in Node.  So it came down to just being able to use the same langauge all day since I work just as much on the frontend as the backend.  I personally prefer ES6 as a language over PHP.  Plus I can use the same functions and utility libraries such as lodash on both ends.",1515439122.0
Jake_Jeremy,"Javascript is a great scripting language, and being able to use that for scripting and for prototypes is awesome.",1515423660.0
zigzeira,Because nodejs open my mind to a new world using the language that I like most. ,1515425069.0
OldSchoolBBSer,One flexible language across the web stack. Excellent JSON support. Even better code features with ES6+. Excellent module ecosystem with clear documentation most of the time. Snyk. You can't pay me enough to touch PHP/Apache combo anymore. ,1515468692.0
codearoni,"Even if it's not the perfect solution for your end-game, node is arguably the best thing for rapid prototyping web services. You can do a lot with a little, and drive home a proof-of-concept for your business in record time.",1515479914.0
bmarkovic,"Async-style concurrency is IMHO a great paradigm, and with `Promise` and `async`/`await` it's also become very nice to develop in JavaScript. In general, with ES6+ features JavaScript became a very nice language if you mind your way around the crazy bits. Writing HTTP servers is really nice in Node, nicest HTTP server experience I've had yet. And finally, the whole platform, incl. V8 runtime performs really well compared to Python, Ruby or PHP, and in my experience, makes it easier to write high-request-serving services than with Java not to mention that with the right toolchain, the development experience is much nicer.",1515503852.0
guorbatschow,Set on June 1st while JSConfEU is on 2nd and 3rd. Not sure whether that's good choice.,1515468645.0
bigfatbird,Too bad I can’t contribute something yet 😂,1515457068.0
bryanzera,This sounds a little like pjax: https://github.com/defunkt/jquery-pjax,1515423687.0
flipperdeflip,"CGI? XSL? Dad, is this you? :D

Anyway, interesting approach. Maybe it would be cool to do a TodoMVC instead-of/based-on the notes demo.

",1515422026.0
ecares,"what are these names ?! 

xdhq

xdhq-node

xdhwebq-node

Hopla Claude, t'en as trop pris :p",1515423907.0
Epeios,There is a *v0.1.1* available that fixes installation problems on *macOS*.,1515596045.0
Thommasc,"That's why at my computer science we used to say the best testers are sadistic people. You need to look for unconceivable input that could potentially break the code. And it takes some experience and imagination to do so.

That's why I always say to my team, I'm building V0 or V1 test layer. I know there is always a V2,3,4 that would be more solid.

To know how much test is enough in a mid size project. This is usually my checklist:

Level 1

- 100% unit test code coverage

- 90%+ functional test code coverage

Level 2

- Reinforce the assertions for both unit and functional tests

- Test more complex scenario especially when async or listeners are involved and a piece of code might break another part",1515417224.0
billy_tables,"I don't write typical test cases. I use property-based testing.

https://github.com/jsverify/jsverify

It's pretty good but the equivalents in Python (hypothesis) and Scala (ScalaCheck) feel slightly nicer to use.

The point is the same in any case - dont write assertEqual(2, add(1 + 1)) for every input you can think of.

Design your functions so they are as pure as possible and some properties always hold. Then the rest of your code just becomes glue that you can be confident not testing or rely on e2e or integration tests for.",1515455596.0
grajagandev,"Great point - it is impossible for humans to think of even a small fraction of possible edge cases. Machines should generate most of the tests.

My solution is to use a fuzzer to generate many, many test cases - I have developed one that finds uncaught exceptions and other bugs missed by unit tests and linters.

",1515424131.0
soulsizzle,"Problems with User input seems to be the largest reoccurring issue my team runs into. Users will find every possible edge case you can imagine when it comes to providing input. And it is, at times, difficult to predict those issues in your tests. So we've found it important to make sure to test that our data sanitization catches everything under the sun. Make sure the following are handled properly and don't cause problems. This is by no means a comprehensive list:

• Non-english characters
• Special characters (unicode and otherwise)
• Anything doesn't make sense in the context of that particular input)
• Leading and trailing spaces (Be aware that different languages trim different character sets)
• Strings that are longer than their database fields
• etc
",1515444724.0
OldSchoolBBSer,"I'd say fuzzing and variations around inputs. I almost always find bugs around inputs and combinations of inputs. Also, some end to end using a logic table to try and hit all variations of ordering related to a process. (Do this first, then that. Next test, do that first, then this. Did both behave as expected or sensibly if unknown?) ",1515468226.0
Jake_Jeremy,"Node is not a server, and Node does not use multithreading for its' event-driven and asynchronous architecture. You should really get your facts straight before publishing an article.",1515423807.0
nospambert,I love nodejs!,1515423403.0
Hidja,"Write RESTful APIs with node, it's important for a server side guy",1515403970.0
omar-hydrah,"[The net ninja](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg/playlists)

[Traversy Media](https://www.youtube.com/user/TechGuyWeb)

[Academind](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w/)

[Manthan Dave](https://www.youtube.com/playlist?list=PLVBXNyNyLNq3MGbopdcvWc25xijtWaA6X)

Express tutorial from Ryan Hemrick: 

[part 1](https://www.youtube.com/watch?v=NALxjuyRXaE)

[part 2](https://www.youtube.com/watch?v=TVrfhONc8Jw)
",1515407736.0
theweedlover420,My guy https://learnnode.com/,1515416461.0
kiksen1987,Learn programming in general. Learn design patterns. Learn clean code.,1515421815.0
sandeepsb,You’d probably have to install TinyMCE and the backend on your local machine and analyse the web requests that are being made. Then recreate the responses in your NodeJS App,1515400478.0
flipperdeflip,"Are you sure this is the one for you? 

$10/month for an editor with .NET and PHP backend you cannot use? Hmm.. I'd look to a non-premium plugin. Google for ""TinyMCE file manager plugin""

Besides TinyMCE there is also CKEditor and a few others, each with its own plugins.",1515419437.0
MattBlumTheNuProject,"This is probably a really dumb question, but why?",1515478232.0
geon,Have you edited https://github.com/c9/core/blob/master/settings/local.js,1515414184.0
davidmdm,"Ok. This is going to sound rough. But define your own Multer Storage engine. All you have to do is define two functions.
Here is the link https://github.com/expressjs/multer/blob/master/StorageEngine.md

Read the doc, but here is my pseudo-code for your problem:

    function MediaServerStorage() {
   
        this._handleFile = function(req, file, cb) {
            const writePath = // your write path , perhaps make it uniq
            file.stream.pipe(YourCompressorTransform)
                .on('finish', () => cb(null, { writePath })
                .on('error', cb);
          });

       this._removeFile = // ... (this is more generic) look at the docs... 
    }

This will take the file stream, and you can write it to disk whichever way you want. The second argument passed to the cb will be what is present on req.files in your route. 

Happy coding. my code isn't very sophisticated, so if you have any questions after reading the doc feel free to ask. 

            ",1515382381.0
TheOneRavenous,"If you're using MongoDB it has a gridfs stream which will compress the files and write to the database. You then stream the files back when needed. 

Doesn't sound like you're using mongo so the other method of adding a listener to multer is viable. You extend multer to have that functionality.",1515441463.0
SkaterDad,You should give `sharp` a try.  `sharp` can do the compression on the file stream before it hits the file system (just `pipe` to it).  In my uses it has been really fast:  https://github.com/lovell/sharp,1515420403.0
oiirme,"> We don’t discuss all of our security processes and technologies in specific detail for what should be obvious reasons

_should be_

> Unfortunately, the process was complicated by well-meaning members of the npm community who believed that a malicious actor or security breach was to blame and independently attempted to publish their own replacements for these packages. Ensuring the integrity of the affected packages required additional steps and time.

wtf is it still possible to publish over previously existing names, either block those names for all eternity or require manual approval for taking over a name that previously existed. either way the intended result should never be getting package B in a path previously reserved for package A",1515358145.0
runvnc,"I will probably get buried for this but.. it seems like most people are not commenting (which is probably the most reasonable response), with a few people slamming them. npm has been rock solid, one incident isn't a reason to condemn them.

I mean back in the old days when it actually was unreliable, I was pushing for cutting edge distributed system.  But since they have actually had resources it's been extremely reliable.  To come up with a distributed system or even a competing company that has this service level with the same type of load would be incredibly hard.",1515388453.0
GFandango,"I can't blame them.

They are very busy working on gender diversity, social justice and gender-neutral pronouns for npm packages.

Who has time for security.",1515384751.0
Earhacker,"TIL npm's official blog is on Tumblr, which is built with Scala, Ruby and PHP, and not on Node.",1515355971.0
banned_main_,"> Automated systems perform static analysis in several ways to flag suspicious code and authors. **npm personnel then review the flagged items to make a judgment call whether to block packages from distribution.**

> In yesterday’s case, we got it wrong, which prevented a publisher’s legitimate code from being distributed to developers whose projects depend on it.

- npm

[3 Months earlier]

> If you are not a white dude and have things to say about JavaScript testing, please submit a talk to Assert(js) https://www.assertjs.com 

- [npm CEO](http://archive.is/Ticgi)",1515376536.0
bluntm,"""Hey that free thing I used stopped working for 30mins, WTF this is total bullshit....""
They found and fixed it in quick time on a weekend. Good job NPM",1515420955.0
oiirme,"it depends, if those heavy computations are going to be blocking anyway, that is, calculating the next state depends on their completing. then there is not much point in sending it off to different process, you might aswell utilize those resources to spawn an additional process for your cluster.


exchanging JSON objects is not more or less expensive than any other IPC communication and V8 is quite good at parsing JSON. do you plan to send over the entire game state every time or do you just send a delta and expect a decision delta back?


Can't say if node.js is a good or bad idea based on that description, it's _ok_ at number crunching, not the best but not terribly bad",1515338263.0
thedude42,"I've contemplated this scenario much and have implemented some toy apps that use node's process.fork to establish the IPC between the main script and a second node.js script as a worker. This works very well, but you need to manage the amount of work you are doing and be aware of the workloads you are generating because if you fork enough node.js instances on your system, you can *easily* generate enough workload to grind your system to a complete halt. One per physical core is a good way to start. 

A rule of thumb I have heard is to avoid node.js (JavaScript in general) for any compute workloads if possible. This was told to me directly by professional services trainers from Node Source as a general ""best practices"" back in 2015... I'm not sure if anything in this respect has changed in the node.js landscape where magically V8 can do way more efficient general computation. In general I just took this advice to mean that you never, ever want to block the event loop for a node.js process that is handling tons of asynchronous events, and that if you spin up a separate process for the single purpose of doing other work it really didn't matter what language technology you used and this advice doesn't apply... but others may know better than me on this front. That said, I know people do non-trivial computation with JavaScript successfully, regardless if it is the most optimal solution.

For IPC on the same host, if you can use unix sockets or named pipes (one of these are the underlying IPC for process.fork) you get a better efficiency than using TCP sockets, so keep that in mind. On a multicore system this can be really efficient and you get a nice lightweight message passing framework doing it like this. The down side is that when you scale out your work to multiple hosts you may need to use network sockets, so my advice here is to build your app such that it abstracts what IPC you are using, and that you use some environment configuration to allow your app logic to inject either the local IPC or network IPC dependencies at runtime.

At this time I'll point out that since you're developing a game, latencies may be a concern you must manage for the whole system to function correctly. If this is the case then the issue of scale out in your design may require some additional consideration, i.e., switching from local IPC to remote IPC will guarantee an order of magnitude increase in latency for each additional hop in the packet forwarding path. This concern comes up if you want to deploy your app on a cloud provider where you have no latency SLA's. If game instances only ever run on a single host, you're completely covered, but if you split work across hosts and the main node.js process needs to pass time-constrained work to processes on different hosts, then latency concerns needs to be looked at and designed for closely.

If you use a different language technology then setting up unix sockets or named pipes manually will also work just fine, you just need to manage the multiple concurrent apps with some kind of glue code. You can use an external shell script that is kicked off with npm, or you can kick off the external process within node.js, or even setting up a Docker environment to manage the processes... whichever fits your use case best and is simplest to manage.

I read this and was slightly confused:

> ... That is, having player actions on event loop and having a worker thread handle NPCs?

Not sure what a ""worker thread"" is in this case. For a single instance of a node.js process backed by an instance of V8 you are never running your code in separate threads as far as the OS is concerned. All your asynchronous work shares the same event loop and *any* long running work will block all other events from firing and other waiting work from completing. Unless you're referring to some other feature I'm simply unaware of, I think you may be mixing terms from other languages here. The only threads I'm aware of in node.js are the unless used by libuv to manage file system IO and timers, which are never exposed directly to the user.",1515358344.0
ggolemg2,"The way I have been trying it is to have an all game object state database.  Clients write to that database and the changes are reflected on all other clients.  It's slower as each client gathers up changes then sends them out to the database, database verifies/validates, sends it's own chunk back and updates with any new information on the client store.  This can include server side clients, i.e. node child processes.  I only download to a particular client the 9 x chunk around the player with the database updates as that's all the edge cases they'll see, viewport being the center chunk.

Have a look at:

https://github.com/SyntheticSemantics/List-of-Parallel-JS-Projects

https://redis.io/

http://gun.js.org",1515418801.0
SamuelDev,you don't have threads?,1515338849.0
ecares,"Not with express, but hapi has been rewritten with async/await",1515320208.0
PatskyPat,"Not sure what you mean async/await **for** express.js, I mean whether there is a specific place you would like to see async/await used, as async await can be used anywhere you want to have async functions and/or you used to use callbacks or promises.

I learnt a lot from these excellent tutorial videos on YT:
[Full Stack Web App using Vue.js & Express.js](https://www.youtube.com/watch?v=Fa4cRMaTDUI&list=PLWKjhJtqVAbnadueQ-C5keMQQiQau_i0D)

the source code is here: https://github.com/codyseibert/tab-tracker  I'd recommend watching the videos first.

it uses vue.js for client but you can see how express.js and also async/await things are used for the server part. 

Also if you just want to learn about async/await have a look here https://javascript.info/async (btw. it's hands down the best tutorial / guide on javascript imho). 
Read about callback and promises first as it is nicely shown how you can change that code to async/await.",1515321734.0
goorpy,"I'm using that pattern in a project right now, but its a private repo.

Honestly, it is so much nicer to use than the traditional promise/then nested pattern. Granted you have to understand the changing flow (waiting/blocking instead of carry on), but usually for api process flows this is what I want.

",1515312111.0
QW4K,Check out koajs 2. Its made especially to use with promises and async await. Its like express but better :->,1515326889.0
ryanfuji,I use this it’s pretty easy https://www.npmjs.com/package/express-promise-router,1515340023.0
chinkuSj,"That's all you need to get going.
   
     router.get('/', async (req, res, next) => {
            let response;
        
            try {
                response = await aPromise(); // or an array of promises 
                // inside a Promise.all([promise1, promise2])
            } catch (e) {
                return next(e);
            }
        
            // send out json
            res.json(response);
        });    ",1515408184.0
abugee1029,"It might be advanced for you, but I setup myself webpack with babel and async/await babel plugins. If you don't have time to setup, this is the first result in google that I found https://github.com/vmasto/express-babel.",1515375458.0
omar-hydrah,"Ajax is a decent choice. That means, you will have to upload the photo by ajax as well.

A typical ajax request using jquery:

    $.ajax({
        url: ""/image-upload"",
        data: formData,
        method: ""POST""
    }).done(function(response)){
        // You can confirm here that the file has been uploaded.
        // The link you want to display, can be displayed here.
    }

You can go with raw javascript if you want.

You will have to use FormData object to upload files:

https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects

Ajax documentation on jquery:

https://api.jquery.com/jQuery.ajax/",1515281372.0
,Leftpadcalypse was almost two years ago,1515278973.0
BaconBrad,It doesn't leave it open to malware outright. To claim a previously used package name you must email NPM and state your reasons. While you could convince them a widely used package wouldn't be given to just anyone and they will likely handle it like they did with left-pad. You have a better chance of introducing malware by comprising an account with access to an existing active package and pushing a new version.,1515293347.0
metallic,"> module.exports = typeof Promise === 'function' ? Promise : require('pinkie');

That’s the entirety of the package, I’m beyond flabbergasted that some major packages have taken on an external dependency for something this trivial. ",1515285494.0
oiirme,hopefully this would add pressure to figuring out npm alternatives ,1515279444.0
cooliobing,"> The same is happening today, for ""pinkie-promise"". The author's NPM account (@floatdrop) was deleted, opening opportunities for malware in all the packages he's written.

Not quite like the leftpad issue, based on what we now know. But it did affect productivity for a large no. of people and the widespread impact of a rather small incident just goes to show how fragile things can be.

Aside: is anyone here using JFrog Artifactory with npm? Would caching the dependency trees for our projects have helped mitigate the issue of disappearing and/or tampered packages? Or would Artifactory have checked upstream and deleted its local copy? ",1515326429.0
oiirme,"You could fudge about with iptables/selinux to achieve this but I think it'll be better to encase the process in a vm or docker and allow port exposure through internal network forwarding. you could also proxy those services through an additional process that can manage all the ""ports"" by being aware of all users settings",1515260990.0
simoncpu,The simplest way is to set up a VM (or maybe Linux container?) and expose all your user's ports through an nginx reverse proxy. Problem solved.,1515758480.0
oiirme,"* would not work when setting nested objects (eg: jsonObj.nested.foo = 'bar)

* would save entire object each time 

* writes on get (why??)

* blocks the tick while doing so making this a performance clusterfuck (why not just writeFile() it and add an error even handler to the class (extend event emitter) 

* using proxy for no good reason

* variable assignment following condition

* no tests

* functionality too minor to justify a module


2/10 would not clone",1515256681.0
Srokap,"Would you like to talk about our lord and savior, Sqlite? http://sqlite.org/",1515262472.0
lemon1993,Yes Node.js can do it no problem. You could even make the two (or more if you wanted) requests in parallel using Promise.all(). ,1515247295.0
bindik,I recommend GraphQL. Great tool for this type of a thing.,1515252385.0
stack_pusher,"Yeah it’s possible, you can use JavaScript promise chaining or just normal callbacks to build the combined response. 

Something like this pseudo-code:

In your node endpoint:
Call weather service 1
If call is successful, call weather service 2

The obvious downside is that this will happen synchronously because you are dependent on getting the results from call 1 before making call 2. But realistically if you are only making two calls the slowdown in speed should be negligible.

Let me know if this doesn’t make sense or is still confusing.",1515247309.0
jpsi314,"Yep, it's not hard. You'll have a callback function in Node associated to this endpoint. If you're using Node Express, the basic callback takes the form 

callback(request, response)

where request and response are Express objects that hold request parameters and allow you to return the response. The callback with two API calls might look something like this:


    function callback(request, response) {
         //do some stuff
        apiCallOne(params1, function(apiResponse1) {
            //do some more stuff
           apiCallTwo(params2, function(apiResponse2) {
             //do the final stuff. you have access to apiResponse1 
             //here so you can use those results
             response.send(whateverYouWantToReturn)//returns response
            })
        })
    }



That is the ""nested callback"" approach and can get pretty ugly and hard to maintain, but will work. You can write more elegant code if you use promises or async/await. If you're going to write a lot of code in Node then I totally recommend moving away from the nested callback style and learn promises and async/await but it is not 100% necessary. Also, I'm using old style function definitions, but arrow functions will generally keep your code cleaner (but again not 100% necessary). Finally, although Express takes a little time to get into, it is also worth the time to learn if you'll be doing this a lot IMO.

I'm afraid I don't really have good suggestions for tutorials on this particular issue. There are tons of tutorials on making basic RESTful services with Node Express so just Google and poke around to see who's writing clicks with you.

edit: shit, my nicely spaced function definition did not format right. I'll try to fix it",1515252389.0
jwadhwani,"I write backend services and here is one way of doing it at its simplest level. 

CLIENT:
To your request to the server:
1. Add in a unique id(an uuid perhaps) in the request to the server. This id will allow you to distinguish between clients calls.
2. Add in callback(web hook) url. This will be a URL which the server will call when it has the final result ready.
3. Make the call to the nodeJS server

SERVER
When the server receives the request:

1. Create and store away an object which will store the unique id, the callback url and all the results
2. Example: const data = {""some-unique-id"": {callbackUrl: ""https://callbacklurl.example.com"",  yahooResults: """", accuWeather: """"}}
3. Make the calls to the two services - in parallel. Many NPM packages such as async will allow you do this.
4. When each call returns with the results check to see if both results are in. If both results are not in do nothing. If both results are in then make a call to the callback client URL with the results package. Make sure to include the unique id. The client will need this for tracking.
5. Once the callback call to the client is successful delete the stored object with the results and the url. Remember good server are stateless. 

If you need more specifics on anything please let me know.

",1515428135.0
enry_straker,"Yup. You can.

But you need to make sure that the call is async - or your user might experience poor perceived performance.

Search for batching, a common performance enhancing technique, and also check out if data can be cached after fetching from multiple data source.

NodeJS is async by nature, and it might be a good idea to write a separate js module, with promises (or async/await) for batching multiple calls to different backend services, and then returning a custom response.

EDIT: Check out the following npm module for ideas - [express-batch](https://www.npmjs.com/package/express-batch)",1515247343.0
Bluecodejs,"Why not use GrapQL, you can even bypass your server for the API for fetching the data from like from your example yahoo weather?",1515259723.0
beejei,"I had same question some years ago, and I implemented it by server side. But if you can call it twice via http/2, it'll make almost same result in the performance aspect and I recommend it.",1515259920.0
mistralol,"
Of course it is. Its your program you can make it do what you want :/",1515247871.0
thisisRio,Got any documentation?,1515248398.0
davidmdm,"The problem is that you are doing a for loop to trigger multiple asynchronous calls. The for loop is a synchronous construct with its own block scope... Difficult. 

You have two possible solutions:

first: Change your mongo query. You can query what you need in one call:
    
    const revistaIds = revistas.map(r => r._id);
    Nota.find({ revista: {$in: revistaIds} }).exec(function(err, notas) {
        //If it is an api that returns json
          res.json(notas);
        //If you are rendering some view
          res.render('myPage', { notas, revista });
    })

If you do not want to query this way (although you should since you save many trips to the database), the way to do many asynchronous operations are either to use a library... Somebody suggested async. I don't recommend it . I would say learn to use Promises instead. 

    // Calls to mongodb's exec() returns a Promise
    const notaPromises = revistas.map(r => Nota.findOne({ revista: r._id }).exec());
    Promise.all(notaPromises)
        .then(notas => {
            // notas is the array of all the note promises resolved
            res.render('myPage', { notas, revista });
         })

If you don't understand what promises are you should look them! Also the better solution was the first one. More efficient. 
Anyways let me know if this helps. Good luck with your code.
",1515255162.0
omar-hydrah,"Why are you getting all the magazines, then getting all the stories of those magazines? Why not just get all stories directly? Porque? You're already getting all the stories but only after getting all the magazines. 

That middle step is useless. You can definitely avoid it.

I can guess what you're trying to achieve. You're probably trying to create categories for your stories -every category is a magazine-, but a simple property in your stories objects, might be enough to refer to the parent magazine.

As for your question, you will respond with the data, right inside the callback of `Nota.find()`. 

As for creating the categories for the magazines, you can just create a controller that will decide which portion of the `notas[]` array, get sent to the client. You can figure the requested magazine of course, from req.params.

The more `notas` you have, the more you will have to design pagination for your application. Or else, you will just be occupying more memory.
",1515245747.0
AssholeInRealLife,"On mobile and in bed awake at 05:45 on a Saturday because I'm on call and got called at 4am... So please excuse some brevity...

You need to understand closure. Add this immediately after `revistasobj[notas[0].mes]...` and before any closing brackets or parenthesis:

    return res.json(revistasobj);

This assumes you want to send the data back as JSON because you didn't specify, but you can call any of the res functions in the same spot instead.",1515235917.0
kksandyrox,I suggest you have a look at async library. Async.waterfall for example. And call your res.render function at the end as last function call. ,1515240018.0
spel3o,"I created a small project as a take-home interview for some new applicants at my workplace. The position will be for data visualization using Node.JS and web-app development.

The goal is to make a project that would take someone <3 hours to complete and would demonstrate competency in asynchronous programming, the Express web framework, basic UI design, code quality, and general organization of code.

All of the details are in the Readme. Do you think this satisfies that bill? Is it too big of a project for a take home interview? Did I make things too broad?",1515204503.0
mjr_a_hole,Are you expecting unit tests? or are you assuming the applicants will add their own?,1515213501.0
TheRahulShaw,"Ummm, why not consider `node-opencv` - https://github.com/peterbraden/node-opencv

I remember to have used it in one of my Python Projects (OPENCV for Python) and it served the purpose quite well and coincidentally my requirement was pretty much alike yours :)

>  Here's my code

    import os
    import cv2
    import numpy as np

    a = cv2.imread(""random_name.jpg"")
    resized_a = cv2.resize(a, (300, 300))

    similar_images = []
    ignored_images = []

    for root, dirs, files in os.walk(""D:/photos/"", topdown=True):
        for name in files:
            try:
                b = cv2.imread(""D:/photos/%s"" % name)
                resized_b = cv2.resize(b, (300, 300))
                difference = cv2.subtract(resized_a, resized_b)    # You can grab this :)
                result = not np.any(difference)
                if result:
                    similar_images.append(name)
                    print(""Added "" + name.strip('.jpg'))
                else:
                    continue
                except cv2.error as error:
                    ignored_images.append(name.strip('.jpg'))
                    continue
    print(str(len(similar_images)) + "" similar images found!"")
    print(str(len(ignored_images)) + "" images ignored "" + str(ignored_images))


Good luck !",1515217723.0
yokode_kyusu,Take a look at the [blockhash-js](https://github.com/commonsmachinery/blockhash-js) library. I've used it to write a program which filters out all duplicate images in a folder. It is not well documented but the tests were clear enough for me.,1515311731.0
erulabs,perceptual hashing might be what you're after: http://bertolami.com/index.php?engine=blog&content=posts&detail=perceptual-hashing,1515789794.0
,[deleted],1515261424.0
burtgummer45,"> Now, it is much more clean, fluid, 100% mobile responsive and faster than ever.

""About 29 results in 9.076 seconds""



",1515187159.0
dayzeqt,It's nice ! It'll be nice if we could sort the result :),1515183464.0
GazZy422,"Sorting would be nice (by seeders, etc.)",1515184779.0
trexreturns,"It's pretty cool. Good job on keeping it responsive. I am sure many of these would already be on your list but still here are some recommendations

* Sort by Seeders desc. 
* Ability to sort on the UI
* A search box on the results page. Right now I have to go back to search again. 
* Pagination seems to be wonky. 
* Home page loads slow. Maybe do something about that as well since there is very little to load there.",1515222457.0
,Code? Very cool though (:,1515185362.0
neofreeman,I recently moved my chat system to Node.js as well https://github.com/maxpert/raspchat/releases/tag/v1.0.0-alpha got a lot of useful critique. But so far I am happy with my choice of tools.,1515225643.0
,I love how it renders on phone browser and the fast results ,1515473857.0
FearAndLawyering,Nice!,1515181865.0
OzziePeck,"Cool, but search is rather slow. Open source?",1515422805.0
lucifer2198,can you share the source code?? so I can play with it a bit!,1515862177.0
sysrex,love it,1515190796.0
davidmdm,"There is a great npm package called json-stream-stringify. Essentially you give it an object and it will give you a stream that you can pipe to a writestream. This will remove all CPU related issues. No need for a child worker.  https://www.npmjs.com/package/json-stream-stringify

Also, if your server is receiving this giant object on req.body for example, you could write your route without the body parser and stream the request directly to a file. Though here I am just guessing what your use case might be. ",1515192921.0
xylempl,"In that case, yes, adding a worker process would help - your application will be more laggy for other users for the period that stringification occurs, but in your current situation the app would not respond at all. However, the stringification itself will take more time as the CPU will be switching between those tasks. If you had multiple cores available, the OS would most likely assign one core to the stringification process, while the other cores could handle other incoming requests. ",1515175470.0
a1454a,"Is the object getting stringyfied different every time? Can it be cached in it's stringyfied form?

Edit: correcting auto correct",1515175695.0
supersoap,"What's the huge object?

If it's data you load externally, you can write a second webservice to handle the serialization. Your server can call it as necessary and continue to handle other requests. This would still require a second core to be efficient, though. ",1515175802.0
Calgoo_,"if the load is IO related (writing to disk for example) then there should not be any issues sharing 1 core. If the issue is CPU based then you could take up a lot of CPU time and possible delay other connections. 

However, even then there is normally other resources using the system and have different priorities. If you run in different threads on the OS with workers like you said, the OS will normally try to balance the load for you.",1515176024.0
ecares,Ask the Java guys?,1515163416.0
oldyoyoboy,"Puppeteer is awesome, I use it for scraping all kinds of data from my company's intranet.  Everything is behind various SSON authentication walls, so I can't just use wget.  Puppeteer can even run in ""observer"" mode, where you can actually interact with the browser it launches (to figure things out and ""get it working"").  This is especially useful if you have to get your browser ""authenticated"" (I have to enter an SMS ""code"" first time I use a new browser).",1515180387.0
simoncpu,I'm currently using this for a project. Headless Chrome is awesome!,1515758549.0
Tvde1,Are you getting errors?,1515169866.0
omar-hydrah,"index.html appears, you can upload a file through index.html, but you can't access the uploaded file with index.html?

express documentation says you have to use a `multipart-handling middleware`:

http://expressjs.com/en/api.html#req

In theory, you will get the file from the form data and then write the file to disk. To display the uploaded file, you will have to get the file name from the `req.params` object, read the file from disk, then display that file to the user.


These sources might help in managing uploaded files:

https://www.w3schools.com/nodejs/nodejs_uploadfiles.asp

https://www.mindstick.com/Articles/1499/upload-and-download-file-in-node-js

https://codeforgeek.com/2014/11/file-uploads-using-node-js/


Traversy Media youtube channel has a video on using `multer` to handle file uploads. ",1515155617.0
rightturnclyde34,"Maybe this will help - [How To Upload Files Using React To A Node/Express Server](https://blog.stvmlbrn.com/2017/12/17/upload-files-using-react-to-node-express-server.html)

This includes example React code, which you can ignore. Just focus on the server/express code.",1515181634.0
_lux0n,"Try `app.use('/', express.static(\`${__dirname}/public\`));`",1515142280.0
goriunovd,"U can try to make conversationController.ts file which exports a function where server is a param and pass it to websocket,  then call this function from inside of your server.ts file and pass server to that function.",1515150066.0
danboy,"I often pass my socket server in ass middleware, that allows you to keep the logic where it belongs. It'as a bit old, but see if [this](https://github.com/onedesign/express-socketio-tutorial) helps.",1515164370.0
omar-hydrah,"I had a similar problem in this project:

https://github.com/omar-hydrah/maktup

The way I solved it, is by creating a file for socket events, and exporting the events/contents as an function that requires the socket server object.

In `socket-events.js`:

    module.exports = function(io){
        // Module content
        // io object is used extensively to broadcast and listen to different events
    }

The socket server is declared in `app.js` -main server file- as:

    
    var express = require(""express"");
    var app       = express(); // Used for middleware and routers assignments 
    var server   = require(""http"").Server(app);

    // No need to attach the socket server to express immediately.
    var io = require(""socket.io"")();
    
    io.attach(server, {
        pingInterval: 10000,
        pingTimeout: 5000,
        cookie: false
    });

    require(""./socket-events.js"")(io);

    server.listen(80);

I don't remember my reasons for not immediately attaching the socket server to express server upon declaration, but I spent three days -at the time- reading the socket.io documentation, just to figure out how to separate socket events from app.js. The amount of effort I put on researching this matter makes me confident about this method of separating these two critical components of the application; the express server and the socket server.

[app.js](https://github.com/Omar-Hydrah/maktup/blob/master/app.js)

[socket-events.js](https://github.com/Omar-Hydrah/maktup/blob/master/socket-events.js)

Any notes on my approach are welcome.",1515181951.0
,Who the FUCK writes nodejs in TypeScript? What is wrong with you guys?,1515142355.0
codis122590,You haven't built it yet,1515130323.0
MaxUumen,"I don't think there is a way to raise the limit once the process is running.

When it requires 8 gigs of memory, haven't you thought that maybe you are doing it wrong? Couldn't you stream the date so that you wouldn't have to hold as much in memory at once and keep the memory footprint possibly somewhere in the hundreds?",1515105994.0
mistralol,"
| My use case is pulling in millions of rows from multiple tables and multiple databases into a single DB

You know most decent db engines support some kinda federated mode and you can probably skip the processing in node completely?

eg mysql can do something like INSERT INTO newtable (SELECT * FROM somedb.sometable)

You can also use UNION to lift the data from multiple select statements at the same time. aka multiple databases.

You will probably find this also runs 1000's of times faster than trying to run inserts from node. eg the sql only solution's can do 100,000+ rows / second but network based insert statements can only may by run 5,000-10,000 / second on really high end hardware. You should also probably find that it will put the machine under so much load that you won't need to make it any more parallel.
",1515109873.0
davidmdm,"here is how you increase a node process's memory limit :
node --max-old-space-size=8192 myScript.js 
This would allow it to take up to 8 gigs of ram.

Although I am sure you can do it with nodejs just setting up your own custom readable streams and writes. 

I do not know what your streaming implementation is but if you are using the old stream implementation ie: 

    source.on('data', handleData)

This needs you to implement your own backpressure management using source.pause() and such internals.

An easier solution would be to extend your own instance of Readable stream, and use the stream 2 implementation:

    source.pipe(dest)

This already has backpressuring taken care for you under the hood. You can then play with buffer sizes by setting the highWaterMark option.

Then all you would have to do is set up your Read to write pipeline and invoke it once for each database. 

If you have any questions feel free to message me. Good luck. ",1515115865.0
chrwei,"you need help running ""node yourfilename.js""?  

it didn't come with instructions?  ",1515106501.0
ineffabular,An exception will be thrown if the toString method has been overridden to return something that doesn’t have parentheses. ,1515116180.0
Jake_Jeremy,Why do they fuck with my scrolling? Never fuck with user scrolling.,1515169784.0
chrwei,"google maps and open street maps both have fairly easy APIs.  I'm sure there's several modules for each, but maybe not angular specific.",1515094203.0
drupol,Try leaflet or openlayers? ,1515194784.0
stratoscope,"Just use the the browser JavaScript API for the mapping service of your choice, e.g. Google Maps or Open Street Maps and /u/chrwei suggested.

You don't need an npm module for this; I have trouble imagining how an npm module could make those APIs any easier to use. Here are [a few Google Maps examples](https://stackoverflow.com/questions/3059044/google-maps-js-api-v3-simple-multiple-marker-example).",1515136837.0
iWantedMVMOT,Some gems in there for sure.  Thanks for sharing,1515121116.0
SlaydeBTA,Someone tried Puppet? How good it is compared to Selenium?,1515090039.0
ecares,Why the binary answer for the gender question?,1515086286.0
Maharyn,"Your best bet is to examine what general categories of attacks are out there, and how to defend against them. For this, https://www.owasp.org/ is an excellent resource. You can then look into modules that help you protect against those vulnerabilities. Or, in many cases, you need to look into how you write code that is secure. While Helmet, as suggested in another post, is a good start, it doesn't come even close to covering all the various things you should try to defend against.",1515080748.0
uNki23,Helmet,1515070119.0
Lapter,Use npm link,1515023006.0
omar-hydrah,"Won't these two projects eventually end up as two different sites? Then you won't get to use ""cd"", so you will have to work with the API provided by module B's project.

In my opinion, publish module B to npm. Whenever you make a change to B, issue the command npm patch, and then republish B with the new changes.

If you run npm install ""module B"", you should get the latest version.",1515044225.0
lirantal,I describe it with yarn but it's the same with npm as well: https://hackernoon.com/node-js-yarning-for-local-packages-9a7970edea7,1515142805.0
tswaters,"Weird.  Bloom filters usually have false positives - it's not possible to have a false negative.

It basically hashes a given value a bunch of times and stores a `1` in a bit array index corresponding to each of the generated hash values. So, if you do the same hashes on the same value, you'll get the same indexes, and find the same 1s that were set when the value was added.

The false positive comes from all the values being stored in the same bit array - with enough elements, all the bit array elements will eventually make their way to 1, and any value you give to `contains` will return a false positive.

You get around this by increasing the size of the array (`size` option in bloom-redis) and the number of hash indexes it generates (`numHashes` option). 

I'd read through the wikipedia page: https://en.wikipedia.org/wiki/Bloom_filter 

And maybe look through the keys that got saved into redis for more information about what happened.  You can also perform the hashes manually on given values, see what the indexes are and query redis manually to see if you got a 1.

Assuming defaults, 5M lines would blow the default 2048 bit array length out of the water and I'd expect you'd see false positives everywhere.",1515060856.0
itamarhaber,Somewhat OT and a shameless plug: http://rebloom.io,1515097926.0
fvilers,"You will override the method when defining your schema. Then, before returning date to the client, you'll call `toJSON()`. If your backend is an express application, you probably want to do `res.status(200).send(user.toJSON());`.",1515049224.0
a1454a,"I built an ad server for the previous company I worked for that handled 1+ million impression per minute with node. 

From that experience what I learned is:

Node is not really the right choice for this, use something lower level (not going to say which one I'm going to use because this is Reddit and I don't want a war)

If you like JavaScript, perhaps looking into breaking the service down into different component so you can run some most heavily hit code using AWS lambda instead of actual instances. 

Ad traffic seem benign, it may appear to be as easy as design your system to handle X amount of traffic per day. In reality depends on where your ads are being served, your whole day traffic could come in all at once as a single massive peak. Even EC2 instances in auto scaling pool with ELB in front may not scale fast enough.

Cache the shit out of everything. If you have to access DB per impression, it most likely will fail to handle peak. Or your DB cost will sky rocket.",1515040237.0
theguysperry,"Node is not necessarily THE right choice, but with Docker or similar and NGINX or similar it will absolutely do what you describe.",1515014936.0
cooliobing,"> I'm talking +10k redirects internationally with occasional ~5k bursts at random hours of the day.

is that 10k redirects per hour? that'd be fine. you could even go with a barebones solution with just the `http` module. if you're comfortable with node.js and mongodb, go for it.

however, is sharding the only reason you're picking mongodb over mysql/postgres? mysql is mature and stable - you could shard data across multiple dbs just as well. you'd probably want to check what data can be cached since your data store is likely to be _the_ bottleneck. 


> trying to achieve maximum horizontal scaling, as much as possible for the lowest costs

You have a set of costs you can easily estimate before hand. You're going to need a CDN for images. You're going to have decent bandwidth bills. Avg redirect request probably isn't going to be a lot of bytes, but you'll have many of them. Designing a horizontally scalable system is a good idea, but make sure you're prepared for the bills. 

No matter what hip and insanely fast platform (node.js/Go/openresty) you pick, when traffic arrives, you are going to hit a ceiling at some point and you'll have two options then:

*  boot more machines + load balance (throw money at the problem)
*  spend sleepless nights looking for things to optimise, maybe even rewrite everything in C ...until you hit the ceiling again

if you/your team are low on tech skills, the former option works better and you should prepare for it.",1515056396.0
,"I would rather use go for something like this. Is basically a programming language created by an advertising company (google). Small memory footprint, native performance and similarly easy as node. 

Or as someone else said, aws lambdas or azure functions. Depending on your hosting plans. 

I always wanted to build something like this, but since I don’t have the advertisers I will probably never do it. Have fun. 👍

Pd: downvotes for suggesting go. Lol. Is built by google for google, and what does google face? Massive scale problems. What is building an ad server? Big scale computing. So, Go is built by someone with the same problems for the same problems.",1515052997.0
flipperdeflip,"I don't think it'll matter much what frontend server you use as long as it does tons of parallel short connections well, so Node would work fine, or Go or even async Python. 

Bottleneck is the IO for the redirect lookup and storage of impressions. You probably need to cache as much of this on the instance and use some high-peak capacity queue to offload the storage of information and process it in background at predictable rate. 

I'm curious if this would be cost-effective as serverless functions, if you can make it 100% managed it could scale infinitely. (AWS Lambda, DynamoDB, SQS, S3). You could maybe even run the redirect stuff on Lambda-on-Cloudfront.",1515054484.0
Fuzz_Stati0n,Wow - look at the New Contributors graph from a hockey stick starting in 2015,1515019029.0
davidmdm,"Have you tried what I suggested? We aren't tampering with the actual read stream or the files data or anything. I am just suggesting you ignore your first 6 ""json"" events, which must be using your header (first row) to build these json objects. Should work. ",1515007393.0
omar-hydrah,"Have you tried reading the content and removing the first couple of lines? Regular expressions might be useful here.

Let's assume that the last part of the line you want to remove ends with a dash ""-"". 


    // Sample data from parse-o-matic.com: 
    // useless information -""REVIEW_DATE"",""AUTHOR"",""ISBN"",""DISCOUNTED_PRICE""
    // ""1985/01/21"",""Douglas Adams"",0345391802,5.95
    
    var fs = require(""fs"");
    fs.readFile(""file.csv"", (err, data){
        if(err){throw err;}
    
        // To find the first quote: data.match(""(\"".*)"");

        var stringMatch = data.match("".+-(.*)"");
        // If there's a match, there should be more than 2 indexes in the array.
        // The second index will contain text from after the dash.
        if(stringMatch.length > 1){
            var data = stringMatch[1];

            // You can rewrite the file, or directly start parsing its content.
            fs.writeFile(""file.csv"", data, (err){
                if(err){throw err;}
            });
        }else{
            // Assuming that all the csv files have text to be removed from.
            // If we weren't able to remove text, it means a case slipped through the expression.
            console.log(""Regular expression failed. Review file"");
        }
    });

",1514998098.0
davidmdm,Do you only need some lines at the top removed? Or need to filter out certain entries upon some condition ? I can help you with transform streams. ,1515000840.0
davidmdm,"Ok, without writing anything new , would it be simple since you have the Json row index to just return if the index is less than equal to 5? Hence essentially skipping the first 6 rows ? 

    If(rowIndex <= 5) {
        Return
    }

Sorry for caps, my phone is uncooperative. ",1515005895.0
brosky26,"It's is likely that your ""node_modules"" folder is in your .gitignore file, which means git does not track it. 


When deploying to your server, you would run the 'npm install' command. This will read the package.json file, and install all the dependencies into the 'node_modules' folder.",1514989303.0
jgierer12,"It does usually show up by default, maybe c9 has configured Git to exclude `node_modules` even without a `.gitignore` file. You should never, ever upload `node_modules` to your server since it contains hundreds or thousands of files and sometimes contains files specific to your system. Instead, you should upload only the `package.json` file (and your own code, of course), install node and npm on the server and run `npm install`.",1514989677.0
oiirme,"Interesting, why did you decide to write a new wrapper instead of using objection.js for example?",1514996086.0
oorza,"Whatever the differences between this and Objection, they should probably be delimited and explained (pros and cons) in the README imo.",1515002321.0
citycide,"This is pretty cool! I wrote [trilogy](https://github.com/citycide/trilogy) for some of the same reasons - ORMs hit limits and I'm not a fan of fluent APIs, and also so it'd work better with Electron - but its built strictly for sqlite.

Also interesting to me because I've been toying with writing trilogy in typescript, so we'll see where that goes.

Nice work!",1515057758.0
rtorc,a template engine needs 'else if'. I don't see how you can do that in your engine.,1514982823.0
oiirme,"Clear description, Clear purpose, Compatible API, No dependencies. 9/10 would clone again",1514967878.0
proyb2,"Cool, just like Fastify?",1514970431.0
indeyets,"Will I notice the difference on highload app with 15 routes?

Is it possible to add domain-based routing to the equation? I use custom middleware for domains currently ",1514987386.0
saadq_,Really cool to see this as it seems like koa-router hasn't been maintained much lately.,1515179179.0
paocomel,you're not using the backtick in the third example. so it's a string with no variables inside.,1514934132.0
imguralbumbot,"^(Hi, I'm a bot for linking direct images of albums with only 1 image)

**https://i.imgur.com/kEXjeLk.png**

^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&subject=ignoreme&message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&subject=delet%20this&message=delet%20this%20ds3nms6) ",1514933730.0
EntroperZero,It's just punishing you for not leaving spaces around your curly braces.,1515003999.0
barvsenal,"You know, this is a good course, but I got bored really quickly. I ended up just learning everything on my own and it was more fun than sitting through 40 hours of lectures",1514940716.0
styleNA,"I believe everything on Udemy is this cheap right now. I have yet to try a course on there though. Has anyone had any good experiences? My typical learning (outside school) tends to be buying books and YouTube. Is it that much better? I mean, I suppose for that cheap I just really should try one out, but I think one like this would be way too bland/general knowledge for me. Anyone know any good AI ones, perhaps on natural language processing, data mining/machine learning, etc? ",1514944454.0
facingmonday,I had already been developing in react/redux and purchased the Modern React with Redux course right before christmas because it was on sale. I had a few days off over the holiday break and wanted to watch it to get a more fundamental understanding of what was going on. It was totally worth it.,1514948472.0
Bash4195,I always recommend this course. It's wear I learned most of my skills that got me into a job. Took an angular course on udemy too so I could build a MEAN stack application for my portfolio.,1514938556.0
ForGoodnessJake,I've been taking this course over break! So far so good! ,1514957029.0
tophimos,"The author of this class an SQL class as well that I recommend if you're interested in learning or want a refresher.  He's informative and goes through things at a good pace for beginners.  If you're already working with the material he goes over you can usually skip through, which seems important for this course (coughhtmlcsscough).  ",1515000082.0
grinde,"Neat, but I think the reason minimist et. al. are a bit larger is that they give you options to eliminate ambiguity (and defaults, but that's fairly trivial imo). Without those options you've got a usability nightmare, and saving a few dozen kb in size isn't nearly as much of a selling point in node as it is in the browser. For example consider the following:

    -x -y -z one two three
    -z -y -x one two three
    -xyz one two three
    one two three -x -y -z

You'd parse them with minimist using

    minimist(process.argv.slice(2), { boolean: ['x', 'y', 'z'] })

and it would give you the same result for each of those.

    { _: [ 'one', 'two', 'three' ], x: true, y: true, z: true }

On the other hand gar's results are highly inconsistent. They depend on the order of arguments, and require boolean switches to come after any lone arguments.

    { x: true, y: true, z: 'one', _: [ 'two', 'three' ] }
    { z: true, y: true, x: 'one', _: [ 'two', 'three' ] }
    { xyz: 'one', _: [ 'two', 'three' ] }
    { x: true, y: true, z: true, _: [ 'one', 'two', 'three' ] }
    
You may want to try looking at other packages' test suites to see what kinds of edge cases they're accounting for that you may have missed.",1514936372.0
haganbmj,Stop spamming these. ,1514963827.0
cryonine,"It’s great you’re doing these projects, but it’s quite disingenuous when you spam your projects over and over again, deleting the previous posts in the process.",1515039860.0
flipperdeflip,"lightweight == lacks features, robustness, real-world-use",1514972500.0
Jake_Jeremy,You posted this two days ago. How often to you want to spam your stuff on here?,1514937168.0
half_lurker,"Neat. I usually just write my own arg parser as needed. 

You could also create a tag for your release. As a consumer I would rather download or reference the tag (which is immutable) than clone or fork code.",1514944684.0
chrwei,"have you looked at the array object's methods?  from your code I think you want `.indexOf()`, but to me ""compare something to everything"" might be more of a `.forEach()`?
",1514921394.0
peanutbutterandbeer,"    const value = {""ID"": [""001"", ""002"", ""003""]};
    const zeroZeroOne = ""001"";
    
    // use 3 equals otherwise 1 (as opposed to ""01"" or ""001"") will equal ""001""
    const compare = (id) => id === zeroZeroOne;
    
    let results = value.ID.map(compare); 
    console.log(results); // [true, false, false]
    
    // only give values that are true
    results = value.ID.filter(compare); 
    console.log(results); // [""001""]",1514942632.0
vfeskov,"There's also ""some"" for more advanced search, your case would look like this:
if(json.ID.some(id => id === x)) {
...
}",1514945985.0
,"A different way to do it: 

    var x = ""001""
    var obj = {""ID"":[""001"",""002"",""003]}

    for(var i = 0; i < obj.ID.length;i++){
         if(obj.ID[i] ===  x){
              //DO STUFF HERE
              break;
         }
    }

basically all search functions have to use some form of iteration to find something. The break statement in the for loop, just stops you from continuing the loop once the object has been found. 

EDIT: peanutbutterandbeer's answer is very elegant and short. ",1515423259.0
Wickity,"`indexOf` is old, use [`includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)",1514929735.0
skisauveur,"    const x = JSON.parse('{""id"": [""001"",""002"", ""003""]}')
    if (x.id.indexOf('001')>-1) // Found",1514923913.0
ForScale,"Sounds like you want to iterate over an array, and compare each of the arrays elements to a predetermined value.

Iterating over an array can be achieved many ways.. You could run a while loop or a for loop. You could use a for of loop. You could also use higher order array methods like filter, map, reduce.

Here's a dirt simple for loop you can use:

    const myArray = [""001"", ""002"", ""003""],
      myArrayLength = myArray.length,
      x = ""001"";

    for (let i = 0; i < myArrayLength; i++) {
      if (myArray[i] === x) {
        console.log(true);
      } else {
        console.log(false);
      }
    }

Here's a declared function that uses higher order Array methods and returns a new array with info about each element of the input array:

    const myArray = [""001"", ""002"", ""003""];

    function arrayChecker(array, valueToCheckFor) {
      return array.map((arrayElem, indexOfTheElem) => {
        return {
          matches: arrayElem === valueToCheckFor,
          index: indexOfTheElem,
          value: arrayElem
        }
      });
    }

    console.log(arrayChecker(myArray, ""001""));",1514924146.0
Jake_Jeremy,Your code is really clean. The only change I'd make is moving on to let/const instead of functions and vars (as functions can be overwritten and vars are just funky).,1514941546.0
voiping,"Seems that this is provided within lodash-fp's sortBy, except the fluent part, so you can just use fp.flow.

Other than the fluent API, did you add more functionality, not know it existed, or just wanted to try your hand at it?",1514963914.0
oiirme,"Seems a bit trivial for an entire module when you can just do `const result = await myAsyncTask().catch(err => callback(err));
if (!result) return`",1514911092.0
davidmdm,"I have seen people going this route for error handling of async/await in blog posts, at work... This is so overkill. Wrapping you awaited statements in this way is just so much overhead and causes you to have to handle so many or all errors. Its like seeing the most annoying part of go in nodejs (i love go by the way)

Most async functions should NOT have their errors handled locally. there should rarely be a need for more than one try catch. That would be at the top level of say your express route or script. 
In most cases when local error handling is needed you can just add a catch that might return a null or undefined value which you can handle instead of having to use many try catches.
tldr this suggested approach is trying to solve a problem that does  not exist.                               ",1514925968.0
poom0nster,"You could have also used this one: 
https://github.com/scopsy/await-to-js

Your package does exactly the same thing, except for the name, but it also has the ability to pass some extra info in case of error happens and has nice TypeScript support. Their implementation is also better because it returns a two element array in case of error, which behaves more consistently and predictably.",1514913110.0
TheOneRavenous,"Wasn't there a post a month ago discussing the memory usage of using async/await to traditional callbacks and the fact that callbacks still reigned supreme in both memory allocation and in garbage collection. 

To say that Asyn/Await is ""the way"" to code might be an overstatement. Not to mention why do huge amounts of syncronous coding in an asynchronous environment? I get it if you're wanting to wait for Database transactions and want to use that data in the response but beyond that I don't see a hard need.",1514912759.0
oiirme,"Generally any error that made it all the way down to where you are not expecting to get any error (eg: process.on('uncaughtException')) is a sign of a major failure in the code, it could mean your api layer has failed and exited, the db layer failed and can not be recovered etc etc, each one of those can mean the server is in a broken state and can not serve any more requests, a reasonable way to deal with it before somebody gets to look at the logs is a full restart ",1514911672.0
yonatannn,"It can happen also when a developer simply forgot to wrap a route handler with try-catch and a minor error might crash a process that currently serves 3000 paying customers. It can also happen when some middleware (e.g. body parser) received invalid JSON. Can happen when some 3rd party library uses setTimeout and there an exception occures (wont get caught in try-catch).
",1514915350.0
sotimting,I spent my Christmas spending quality time with my friends and family.,1514933961.0
Bl00perTr00per,"Perhaps this is my own naive opinion, but for me, it's much less confusing to roll out my own with using JWTs.

Once you understand what's happening for Auth, it's really quite simple to hand roll it. Just my 2 cents.",1514925050.0
justdash,What is Redis and why is it used for Sessions?,1514937550.0
dermusikman,"Screenshots or it didn't happen.

(In all seriousness, though; I'm not going to shut down my X session to try a brand new WM, and I can't imagine I'm alone in that thought. Screenshots or video clips of it in action would probably be very helpful.)",1514868433.0
RushPL,Neat but looks harmful if overused.,1514830087.0
sanex3339,"JavaScript obfuscator is a powerful free obfuscator for JavaScript and Node.js with a wide number of features which provides protection for your source code.

It gives many obfuscation features like dead code injection, control flow flattening, strings encryption.",1514815258.0
sieabah,"That's pretty neat, now if only the performance hit wasn't so huge.",1514820043.0
recrof,does it also have option to minify the code? I'm sure variable names could be way shorter.,1514849241.0
apatheorist,Because AST isn't a thing now. This only obfuscates code for people who are no threat.,1514861232.0
tknew,really awesome work,1514843393.0
stompinstinker,"I have used this on a large scale project.  Never had a problem, and it works great.  I see some concerns in here about it being slow, it isn’t if you stay away from things like dead code injection. ",1514871486.0
bidi82,"If you have a piece of code that is so sensitive that you need to
obfuscate it, would it not be best to **never** deliver it to the end user's browser? 

Instead access that code/logic via some REST service in your backend?",1514898398.0
BehindTheMath,"`window.someVar = 1` for the browser, and `global.someVar = 1` for Node. ",1514815029.0
nobillygreen,"The better answer is: don't.

If you need some global state being tracked, declare the variable outside of function. Yes, use ""global.foo"" if you really really need to, but doing this more than once is going to turn your code into a nightmare.",1514817928.0
impaled_dragoon,Sounds like maybe you want a [singleton](https://en.m.wikipedia.org/wiki/Singleton_pattern) .,1514828040.0
cooliobing,"globalVars.js
--------------------
    const myStashOfGlobalValues = {}
    module.exports = myStashOfGlobalValues
=========================

test.js
--------------------
    const m = require('./globalVars')

    function myFunc() {
      m.myvar = 'value is set'
    }

    console.log('before', m.myvar)
    myFunc()
    console.log('after', m.myvar)",1514849456.0
Patman128,"> How can I use knexjs to return an array of values based on a has many relation for tables?

AFAIK, you can't. SQL just doesn't work that way. The results set is always a set of flat rows, not nested data structures. But you can get all the `<threadId, boardId, subject, author, ...>` rows and then use a loop to build the objects you want from the rows.",1514787505.0
Pedrock10,You can do that with Objection.js which works on top of Knex.js.,1514821593.0
xenopticon,"If you don't want to drop Knex for an ORM, you can work around relations with something like [treeize](https://www.npmjs.com/package/treeize).",1514907926.0
siric_,Looks like you need a monorepo. Check out [lerna](https://github.com/lerna/lerna).,1514809529.0
cled,"1) the latter
2) looks good
3) nope, use workers to asynchronously offload processor intensive tasks from the main node app
4/5) don't use synchronous file access, eg. use readFile() not readFileSync()",1514767690.0
AlexMeah,Look into using nginx as a reverse proxy ,1514814365.0
codearoni,"nodemon has an exec argument to run other commands

> nodemon server.js --exec 'npm run lint'",1514769160.0
lirantal,"I don't think you want to mix the 'standard' and eslint-plugin-standard libs. It's really just one or the other. And if you want to change standardjs own rules then there's a case for eslint.

I simply install eslint for other rules (i.e: eslint-plugin-security, etc) and standard and just run them one after the other basically like:
    
""lint"": ""standard && eslint .""


I have an npm-starter repo I use as a boilerplate all the time and constantly update it as I make changes and improvements - you're welcome to chime in: https://github.com/lirantal/npm-starter
",1514837309.0
Existential_Owl,"I love Javascript just as much as the next dev, but I definitely disagree with the article.

Just because we can *write* JS everywhere doesn't mean that it's *won* everywhere.

Also, Unreal.js would've been a better example over UnityScript.  Not only has UnityScript been dropped, it was a terrible shell of a JS language.

Also v2, React Native isn't the Javascript framework that dominates the mobile market, Ionic is.  By a wide margin.  

(Although, obviously, you get better quality apps with React Native).",1514778630.0
T-Dot1992,"What a stupid article. There is no ""war"" between programming languages ffs. ",1514771055.0
imizaac,"Maybe I just don't get how the frameworks work, but why do the front end frameworks of react, angular, and vue owe their success to node?",1514759702.0
KyleLarson_,"> And while Unity did recently announce they’ll be dropping UnityScript support, I’m still going to say:

> And like that… JavaScript won gaming.

Are we just gonna attribute the successes of similar-looking langages to javascript?  It's not even Javascript.  It's being discontinued ffs.  If my brother quit the basketball team, that doesn't qualify me as the team captain.",1514779483.0
grinde,">When Unity 3D first introduced their JavaScript-based “UnityScript” as a means of game development, I saw then, that JavaScript was going to do some really cool things...

I'd just like to point out that UnityScript is actually based on [JScript .NET](https://en.wikipedia.org/wiki/JScript_.NET) (not JavaScript), only loosely implements ECMA 3 (and blatantly conflicts with the spec in many areas), and includes some C#-like syntax that isn't present in JavaScript. [Here](http://wiki.unity3d.com/index.php?title=UnityScript_versus_JavaScript) is a quick overview of the main syntax differences, though it is a bit dated at this point.",1514790205.0
ECrispy,"""Just like that, Node won the desktop""

just might be the most ill-informed and of course untrue statement about Node/JS/development.

Never mind the fact that almost nothing beyond dev tools (like VsCode) actually uses Electron, its still nowhere close to regular desktop apps in capability or prevalence.

You can say that a lot of traditional apps are migrating to web based SPAs, which is fine, but its not the tool of choice for writing a desktop app.",1514803992.0
jpambrun,Why does so many people come to think that the only programming language that they know is the best thing in the world..,1514760676.0
Martinspire,Quality in coding never is and als totally depends on who made it. It's also no guarantee at all,1514818438.0
oorza,"The only people who would *want* to use JS everywhere, for things like desktop apps, are people who have never used a better programming language for hard tasks.  JS itself falls apart on moderate scale, which is why both Flow and TS exist; even if it was performant enough (and it's definitely not, see slack/atom/etc.) no sane person would build something like Firefox or an IDE in JS because development time cost would be too high.  Hell, Mozilla decided the dev costs of C++ were higher than inventing a safer language and using that, why anyone would think there'd be low dev costs if you built your massive application in arguably the most unsafe language that helps you the least boggles the mind.

This is a fanboy post and it's clear OP has never worked in depth within probably any other language.  As soon as JS dies on the web, and people are moving hard and fast on that, Node will die too, because people won't have to write JS.  Hell, the history of coffeescript, TS, Flow and friends shows that people already don't want to write JS, so how can you say it's won anything?  The fundamental thesis of the OP (that not having to learn multiple programming languages is a significant benefit) is only true for junior developers who have not yet gained experience in many languages of many paradigms (which itself is a necessary thing to do to become a good developer).",1514759856.0
HeWhoWritesCode,"> it has allowed the once-simple front-end dev to do so much more.

Want to put a year on those simpler(sane) times?",1514790627.0
spinlock,"This is just stupid. The author claims people “embraced” the classless nature of js but that is complete bullshit. The arrow function is popular because it lets script kiddies write OO code in js easier. 

Js is the Donald Trump of programming languages. It’s a cruel joke that has been plaid on dumb people who don’t know any better. It is true that there are more dumb people than smart people so it’s very popular. 

It just boggles my mind that choosing the worst option is called “winning”. 2017 was truly the year of the trolls. ",1514786643.0
real-cool-dude,Use nginx with proxy-pass to a port that pm2 or forever is running express on. Use certbot to sign a certificate for free. (You may need to make changes to the api to allow for serving a special .well-known file to certbot),1514744487.0
ark4nos,"You can just use the certificate and the key files straight with Express:

var fs = require('fs'),
    http = require('http'),
    https = require('https'),
    express = require('express');

var port = 8000;

var options = {
    key: fs.readFileSync('./privatekey.pem'),
    cert: fs.readFileSync('./certificate.pem'),
};

var app = express();

var server = https.createServer(options, app).listen(port, function(){
  console.log(""Express server listening on port "" + port);
});
",1514756989.0
asn007,Actually the best option would be to use caddy / nginx as a proxy server. Caddy even sets up SSL by default,1514744125.0
pier25,The most straightforward? Deploy to Heroku. Done.,1514754005.0
humpier,"I use Cloudflare for simple/free SSL. You can route your DNS through it to get caching, redirects, and SSL. Then you don't have to maintain another proxy server.",1514792076.0
JoMa4,"If you are using a load balancer, it would be typical scenario to install the certificate on it and have it forward traffic to non-ssl endpoints.  The traffic will be encrypted on the Internet, but not your local network, which can sometimes help when troubleshooting.  It also keeps all the SSL setup in one place, which can be helpful if the service were to grow to need multiple servers.",1514762447.0
gngeorgiev,You can also use Caddy instead of nginx. I like it so much more.,1514778798.0
neonlibra,"So this is something I'm interested in as well -- at least modern production/deployment practices.

What's the difference between what Caddy and Let's Encrypt are doing? Should I be building my own docker images? What's a/the preferred host for a small outfit?

I'm pretty sure I want to use Let's Encrypt -- but so far it seems rather convoluted to get an automated setup in a container service (like Azure/AWS) for what I think should be simple.

I've done stuff on hosts that I have complete control over, and have always felt a lot more comfort compared to working with containers.

I mostly just want to write code and build stuff, not have to look after servers or even have a mess of a multi-stage deployment. Any and all advice appreciated.

EDIT: Ignore my comment about Caddy and Let's Encrypt (just found the relevant section on their site; it uses Let's Encrypt.)",1514800834.0
xxchoicexx,"Please get informed. It will be good for you!
You can go to Lisk FAQ here on reddit or go to https://lisk.support/knowledge-base/ or https://lisk.io/learn_more
",1514705485.0
,[deleted],1514748422.0
,"Traditionally, a callback function. You could also use promises or async/await.. but these are newer and if you're unfamiliar with these topics just look up callback functions and think of the other two as callback functions that just look different. This is a very fundamental topic in javascript, you will be glad you looked it up (:",1514696193.0
pool-is-closed,You're in for a wild ride.,1514735423.0
rubblebath,"When you're dealing with asynchronous code (e.g., your ""getapi"" function is probably asynchronous) you need a callback. Callbacks look like this:

    function getApi(url, callback) {
        // does a bunch of stuff to get a result from the url, then...
        callback(result)
    }

    getApi('http://api.address.com', function(result) {
        console.log(result)
    })

Instead of returning your result, you're feeding another function in to handle the result. This way, it properly ""waits"" for the result. 

It takes a while to wrap your head around it if you've never dealt with asynchronous code before, but after dealing with it a few times, you'll get it!",1514706358.0
,"Callbacks! 
",1515423469.0
GedoonS,"Check out async/await stuff...
     
     var myVar = await getVarValue();
     console.log('This doesnt print myVar' + myVar);
    
     async  function getVarValue (){
       myvarout = getapi stuff();
       console.log('This prints myVar' + myvarout);
       return myvarout;
     }

Edit: people who downvoted, could you at least explain why? Is there something wrong in my answer above?",1514730103.0
aaronkim234,"What is the motivation for this library? It seems like unnecessarily reinventing the wheel for something that already does it very well?

And what exactly does the smaller program size buy you? Seeing as this is a server-side utility and will never be bundled and shipped to a client over the wire, I don't see how being 13% smaller than minimist is much of a plus other than saving a few kilobytes on your disk.",1514684623.0
Jake_Jeremy,"You already created a post one hour prior to this about the exact same library.

You are really starting to spam your stuff in this subreddit. I hope that you'll stop before the mods have to take action.",1514686601.0
cgijoe_jhuckaby,"Very nice job.  I wrote [one of these](https://github.com/jhuckaby/pixl-args) a couple years ago, but yours is cleaner and simpler.  I like it.",1514681983.0
zQpNB,cool! you could use https://github.com/substack/minimist/tree/master/test for more test ideas!,1514690158.0
StrangeSound,"Taking a look at the code for this, I feel like you should focus more on speed. When looking at 'unknown' packages I usually check the performance of it over writing something as simple as this myself.

Simple stuff such as returning out of the function asap, and replacing the for loop for a while loop that iterates backwards. 

It may be more difficult to read, but it would make people more likely to actually use it. If you need any help in that regard I'd be happy to contribute.",1514729830.0
Earhacker,"Cool but do you prefer Express, Koa or Hapi as a back-end framework?",1514675728.0
kapanaga,"Make sure that your source file gets loaded. Maybe you are using an incorrect path? Open up devtools and check that in network.

Using absolute path that starts with / can also be the cause when you serve from subdirectory eg example.com/tutorial/index.html or from local path.",1514675632.0
omar-hydrah,"Have you tried this: `<script src=""./js/main.js""></script`? 

A good trick is, to hit ctrl+u, to load page source. Then click on the file you're trying to include in your html document. If you get a 404, then you need to check your spelling or the path.",1514676513.0
talexx,"It is extremely annoying to have a full screen popup when you're going to read an article. When I see this, I always immediately close the page. 

By the way, is that an American trend? It seems that this shit happens mostly with sites from the States.",1514686316.0
calligraphic-io,"This was a nice article. I'd like to thank RisingStack for all of the Node content they publish, it's helped me a lot. Happy New Years!",1514748447.0
hfeeri,"We collected the best Node.js tutorials of 2017! We used data from Reddit, Hacker News, Twitter & Medium to search for the most liked stuff out there.
",1514656956.0
apatheorist,Did you misspell miscellaneous on purpose? ,1514679597.0
OzziePeck,What’s Google using Node for?,1514710207.0
sime,"> 10. Node.js is finally more sought after than Java!

...in the Who is Hiring section of Hacker News.

By all means be excited about the community your build, but don't fall into believing your own bullshit. Node.js hasn't got anywhere near the demand in industry of something like Java. The Who is Hiring section of Hacker News isn't remotely representative of anything outside the Hiring section of Hacker News.
",1514710022.0
leetmo,Here’s a tip that will save you a lot of headaches. I’d stay away from using “.local” due to its use in Bonjour on MacOS (mdns or avahi elsewhere). Using it will cause long lookup times as requests are diverted to perform lookups through mDNS first. ,1514636334.0
aars,dnsmasq,1514653945.0
tswaters,"Depends on the OS obviously.  

For linux, nginx works really well.  I typically set up `/etc/hosts` with everything and use nginx to proxy the calls to various ports.

For windows, you can use IISNode - that's what I used ages ago before we switched infrastructure to linux.... ymmv.",1514634169.0
scttmthsn,"Setup a local DNS proxy like dnsmasq and use that to resolve your chosen suffix to 127.0.0.1.

Minimal effort, no need to add or remove entries.

Bonus: get DNS caching and a speed up free.",1514636581.0
wretcheddawn,"A domain doesn't preclude you from having to use the port number.  The way around that is to serve directly on port 80 (your OS will give you trouble with this), or use a reverse proxy to serve on port 80.  I would use nginx for this purpose.  However, if you're developing, it will be probably be easier to use the port number.",1514650500.0
halkeye,https://www.npmjs.com/package/hotel was always a little Util I wanted to try out. It seems to support .dev domains right away,1514651658.0
nothingduploading,I think `-` is more common than `.`. You definitely don't want to use mixed case as a Mac is case insensitive by default. Make sure whatever name you choose that its all lowercase.,1514614436.0
sniuff,namejs,1514638455.0
mariotacke,"If your package `name` is unique enough, just use the `name`. Also, it might make sense to publish a scoped package such as `@bigkefjee/name`. Quite a few package publishers are moving over to scoped packages to avoid naming clashes.",1514656036.0
bugeats,"I like the way that simple action defs imply both state reducer changes and event handling. Assuming of course that’s there’s a bit of magic to reconcile.

I wasn’t expecting to like this, but it looks great for quick prototyping and small apps.",1514654006.0
klaxxxon,"I like the idea of slimmed down React+Redux a lot

Are there any more complex apps developed using this? I only explored those that are linked from the github page? I would be interested to see how this manages complexity. For example, I find the idea of all having actions on one pile that is getting passed around a bit scary (what is the point of passing the actions object around anyways?)

Do I understand correctly that the result of an action is merged into the state object? I ran into this exact thing in my project - you have to figure out how to *remove* things from the state.

BTW the documentation leaves a lot to be desired and needs to be expanded if you want people to start using this (I wasn't able to find information about how the actions work, or about what node types and node attributes are supported). And the logo on the blog looks like one of those hacking puzzles from the first Mass Effect :D",1514659116.0
maximusprime2328,What about server side rendering? It seems the only opinion for server side rendering would be to place the data on the page while still on the server and then rehydrate the whole app when the page loads. ,1514650638.0
xmashamm,Why use this over react or vue?,1514646783.0
Terrance021,??? Is this like bootstrap,1514608085.0
omar-hydrah,What exactly are you worried about?,1514613400.0
emveeoh,"I'm currently working on an EJS website. My structure is as follows:

- (folder) left-nav
- (folder) top-nav
- (folder) body
- (folder) footer
- app.ejs

----------------------------------------
app.ejs is the root of the site.
Each of the ""components"" have their own folder that is 'included' into app.ejs. Pretty much exactly like you are already doing it. I use the Express router to pass the page name to the navigation elements so that the correct nav button is selected on page load/reload. 
",1514673990.0
Wickity,"Node is single threaded, and this is exactly the kind of task I would expect you to struggle with.   You should consider a native strategy.  

 If you want to use Electron as your UI, perhaps write a node native extension that can multi-thread, and return info to Node/Electron for display.

More info: 

* https://nodejs.org/api/addons.html
* https://github.com/nodejs/nan
* https://blog.risingstack.com/node-js-native-modules-with-rust/

Best of luck!",1514601108.0
TheOneRavenous,"Do the ""AI"" updates need to be syncronous? You may be able to use streams and utilize the 'back-pressure"" to your advantage. Listen for data events and pipe the information through the AI that way if the process is getting bogged down you can mitigate it. Also is you're using express you can use response and request that are provided in routes and streams.



[https://nodejs.org/en/docs/guides/backpressuring-in-streams/](https://nodejs.org/en/docs/guides/backpressuring-in-streams/)",1514906405.0
Cessabits,"I'm on my phone but I gotta say, I love your picture and your beard and I wish it was mine ",1514607315.0
nikola1970,Better post your code so people can check.,1514595360.0
mansfall,"Without seeing the code, can only guess based on what you said.  But it sounds like you're not accessing variables correctly due to non blocking code.  You need to first resolve or reject the db queries, then attempt to utilize the results.  ",1514597534.0
davidmdm,"Code would be good, but database functions are asynchronous. That will not work with à for loop. You should create an array of promises / database calls, and Promise.all on that array to await the responses ",1514610485.0
omar-hydrah,"In short, this is related to the asynchronous nature of database related functions, and the synchronous nature of loops.

A theoretical example of a possible solution:

    var User = require(""../models/user-model.js""); // A user model (mongoose)

    function getDevelopers(){
        return new Promise(function(resolve, reject){
            var developers= [];
            
            // User.findAll(function(err, employees)){
            // Returns an array of all employees objects.
            User.find(function(err, employees)){
                if(err){
                    reject(err);
                }
        
                // Non asynchronous inner-phase
                for(var i = 0; i < employees.length; i++){
                    if(employees[i].role = ""developer""){
                        developers.push(employees[i]);
                    }
                }
                resolve(developers);
            });
        });
    }
    getDevelopers().then(function(developers){
        // Do whatever you want with developers[]
    }).catch(function(err){
        // Log error.
    });",1514614641.0
davidmdm,"You should create a authenticated middleware that you use at the top of your stack. Something like:

    App.use(function(req, res, next) {
        If (!req.session.auth) {
            Return res.redirect('/signup');
        }
        next();
    });

That way it matches all routes and if not authenticated redirects to signup .  If not let's the request get handled in other handlers that match it. 

That way your signup only has to handle serving the page , same for your other pages.
Sorry for random caps. Typing from phone. ",1514593885.0
davidmdm,Top of your stack but after passport or whatever you use to create req.session,1514593935.0
davidmdm,Yeah I misled you sorry. Your /signup route has to be defined above this. Or else every redirect will be redirected. ,1514610161.0
davidmdm,Can I see your app.js? ,1514613512.0
omar-hydrah,"The link you provided: `example.com/`, is your ""/"" route. Did you get that route covered in the rest of your code?

Also, is it wise to authenticate users in your home page? If you're redirecting all of your unsigned users from the home page `example.com/` to another page, you would be consuming server resources for all site visits.

    app.get(""/"", (req, res)=>{
        if(!req.session.auth){
            res.sendFile(__dirname + ""/client/public/index.html"");
        }else{
            // No need to redirect to ""/""
            // Handle user request.
        }
    });


Also, have you tried a templating engine? Like ejs?",1514613669.0
furchin,"An infinite amount if you don’t care what the response is. You should see thousands of requests per second if you just reply http/200. The more work you do in processing each request, the less throughout you’ll see. ",1514583455.0
tswaters,Hard to say... stress test it & see,1514582794.0
TheOneRavenous,"Let's just say I have apps that don't bottle neck with 1gb storage, 1gb ram, 4 core 64bit CPU. Under load only hits 200-225mb mem which includes image streaming and database transactions. On idle it's at 82mb mem. But it's a small app so not having a bunch of images streaming at once helps. I'm sure under heavier loads the image streaming functionality of the app would be its downfall. ",1514912317.0
Drunken__Master,I like how the misspelling wasn't caught after the first posting of this and the misspelling was posted to multiple subs .,1514582892.0
Jake_Jeremy,This is starting to become spam...,1514583732.0
Jake_Jeremy,I'd guess that you could force an error to happen if the request times out.,1514539687.0
_lux0n,"```
request({
        url: url,
        method: 'GET'
    }, function(error, response, body) {
        if  (response.statusCode !== 200) {
          // Do error stuff
        } else {
          // Do normal stuff
        }
});
```",1514541386.0
omar-hydrah,"I don't understand the part where you say you want to respond with an object. Do you mean, send an error object to the browser? Have you tried `JSON.stringify()`?

Any way, Can you log to the console what happens when you ask for `req.params.id`? It might be failing there, if `req.params.id` is not defined.

Can you log the `err` object itself before sending it to the client?",1514543413.0
TheOneRavenous,"On the last line instead of .send(err) try .end(err); 

.send() is setting the error ad the body, but... The headers are sent via the .end() event. So it might catch it if you use .end(err) I would need to test it to be sure but based on your linked nodejs document it should send the headers and be caught. ",1514560686.0
svenvarkel,In what ways is it better than request / request-promise?,1514548489.0
agkaiji23,"In what ways is this better than axios and request-promise?
Thanks!",1514552063.0
mansfall,So what benefits does one get by using this over express or koa?,1514535026.0
Jake_Jeremy,Why do you use `var`?,1514538818.0
mrjking,"The documentation is really lacking. Go look at the docs for [request](https://github.com/request/request) and compare. Just a short list of everything missing from Phin docs:

* http auth

* forms

* oauth signing

* custom headers

* proxies

* cookies

* timeout

In the test file, the only thing I see support for is timeout and forms. ",1514621610.0
raphaelarias,Why is the size of node_modules such a big issue?,1514541853.0
neurod1sk,Npm install cors and use it as a middleware in your app,1514503948.0
productionx,"Repost, surely that will fix your issue...",1514511444.0
s5fs,"Neat! Here are some comments from browsing the code for a few minutes. I think it's solid, but there is always room for improvement and since you asked...


* You're using btc-value so I suggest that you pull the supported currencies from there, rather than building the list again by hand in the cli.

* Code organization. I'd suggest defining all functions at the top, and then calling checkAllFlags() at the bottom of the file, rather than having it hidden between function definitions. I almost always try to optimize my code for readability since code is read far more than it is written.

* Don't use setInterval(), use setTimeout() and reschedule the next run after the first one completes.

* Personally, I'd simplify the error handling around processing cli arguments. You are being very helpful but that adds more code than is necessary to get the job done. Most cli utils will simply print out the help if you get the arguments wrong.

* Autorefresh argument is countdownTimer in the config. Consistency here would be great.

* What's the difference between ""quantity"" and ""myquantity""? Not very clear.

Anyways, I had fun reviewing your code, thank you for posting! Most likely I'll install this since I'm curious about btc price and check it daily. Thanks!",1514579850.0
knutkirkhorn,"I just made a simple CLI for retrieving the current Bitcoin value. With posibilities to print the value in different currencies, save local quantity, autorefreshing printing of value every x second and more.",1514499563.0
neurod1sk,Where do you get the data from?,1514504005.0
productionx,Languages? You mean javascript?,1514513748.0
panbhatt,"Hey, I think the best best is right now to go with React 16. However, if your project/team decides to go ahead with Angular 4 then please proceed with Angular 5. Its new on the block (almost 2 months old). Even 5.1 is out last week. The material design is also updated with this. (boot strap component is also in ALPHA for angular). I am about to start a new project in my team on Angular 5. I had good exp of working with AngularJS/react/node. So let me know, how you want to proceed. ",1514574234.0
cgijoe_jhuckaby,"	       _....----""""""----...._
	    .-'  o    o    o    o   '-.
	   /  o    o    o         o    \
	  /__o___o_ _ o___ _ o_ o_ _ _o_\
	/                                 \
	| What even is this library       |
	\_________________________________/
	  \~`-`.__.`-~`._.~`-`~.-~._.~`-/
	   \                           /
	    `-._____________________.-'",1514531370.0
strothjs,Flawed package. Cheese should be above the paddy!,1514568340.0
chrwei,"that's because Passport is middleware, it simply auths to existing external services.  password resets and such get handled on those services directly.",1514488363.0
GodInTheWired,"This is one of those things that isn’t well-suited to being a generic package since there’s so many different ways you might want to implement your user login / logout flow, different databases you could use to store the login info in, etc. Passport is about as plug-and-play as it gets in my experience, though there’s a number of app generators and “boilerplate” sample apps out there that include some default routes and already have the auth middleware set up, just google “node passport boilerplate” and you’ll find some.",1514488611.0
maximusprime2328,What kind of project are you working on? Can you use any 3rd party authentication? Maybe allow users to sign in with Facebook or Twitter? ,1514497503.0
bit_cmdr,"Passport is middle-ware that’s designed to sit between your endpoint entry-point and the code you want the endpoint to execute. For instance if you want to serve a list of restaurants, but only if the user is logged in, you put passport in place to do the auth work, if successful the caller gets the list, otherwise Unauthorized. It has a lot of add-ons for different auth methods. It’s a really well done project for auth work. I like to use it in combination with [oauth2orize](https://www.npmjs.com/package/oauth2orize). Since, I’m usually implementing oauth2. Keep in mind that it provides a framework to implement oath2. It doesn’t provide the storage or logic, but helps with control-flow and endpoints. Don’t forget, no matter what, do your best to avoid storing passwords. If you have to store them, then make sure you’re encrypting them with a salted hash. Never ever store or share passwords in plain-text.",1514497458.0
theguysperry,"Yet another disappointing Node thread. No real answers, just unhelpful opinions.",1514521532.0
SparserLogic,Is your app a web app? I like [Firebase's Auth system](https://firebase.google.com/docs/auth/) as it is very easy to use and includes an optional UI component you can just use.,1514500321.0
neurod1sk,"Passport can be used to set up a username/password scheme for local auth or oauth against major services. 

The thing is, as some were saying, you don’t really set up routes in passport. You define it as a middleware in the routes that you need auth on.",1514503851.0
NoInkling,"Unlike a lot of other languages, Node doesn't really have a turnkey solution for this kinda stuff, you're on your own for a lot of it.",1514506464.0
TheNiXXeD,Auth0 may be able to manage what you want. We use them at work and it's been great.,1514531871.0
metalvackal,"If you are into web dev, meteorJs is a good start that comes with all the basics when building nodeJs web apps i.e. user auth/mgmt

Source: using it myself.",1514488199.0
JakeInDC,"Find a MERN stack generator, generate an app, and tear it apart until u learn the prices u need",1514499070.0
links_own,Does it still happen if you run from the built-in Windows command line? I'm tempted to think it has something to do with MINGW64.,1514468118.0
spmaster007,Phantomjs is gone.,1514458558.0
segphault,"Node's built-in EventEmitter is most likely what you want: https://nodejs.org/api/events.html#events_class_eventemitter 

If you are scaling horizontally and need multiple instances of the application to see events from each other, you could consider using an external message queue instead.
",1514468262.0
fyzbo,"Look into affiliate programs.  Often these will provide a feed or API to pull data from.  Depending on the program it may be worth setting up a quick content site or coming soon page for the application.  You don't have to use the affiliate links, but I don't see any reason not to.",1514484732.0
minentdoughmain,ITA Matrix like every other travel site uses.  Learn the syntax.  Note that Google owns this. ,1514513999.0
nk2580,Scrape a site using phantom.,1514451247.0
ctcrnitv,"https://www.youtube.com/watch?v=YBJFirHSS5Q

I liked this explanation by Mattias Johansson (famous for funfunfunction YT channel). There is a little bit of tech jargon but most of it people should be able to get a general idea. ",1514429189.0
coffeeandlearning,"Not on exactly the same topic but I absolutely love this video (the expert) and feel like it's somewhat relevant (or at least good enough to get away with sharing in this thread)

https://youtu.be/BKorP55Aqvg",1514448127.0
ConstVoidBlog,"high technical debt system: https://www.youtube.com/watch?v=OujWNMpdvHQ

low technical debt system:  https://www.youtube.com/watch?v=S2c161VNkpA
",1514472852.0
GFandango,Sorry to be a downer but I don't think that's something non-programmers are going to ever really get.,1514429743.0
tswaters,"Go to the network tab when you visit `register`

Look at the response headers on the request that goes into 503.  My guess is that there is a device between your application and heroku that is intercepting things and kicking out a 503 for the `OPTIONS` request.

Looking at the response headers (i.e. served by, etc) might give more indication as to where the problem is.  See this comment on a github issue:

https://github.com/axios/axios/issues/191#issuecomment-172102635",1514416994.0
omar-hydrah,Can you provide the code? Are you getting any errors?,1514429540.0
richraid21,"I'm not sure this is such a great design pattern. Exposing state changing functions to anything can quickly increase the complexity flow of components and it may be hard to debug certain events/state transformations. 

It is much better to use some type of central state container such as Redux or Mobx. Have your rendered interface be a function of your state container. 

Regardless, this has nothing to do with Node. Try /r/reactjs    

edit: Oh, you cross-posted to 8 subreddits. Got it. ",1514406941.0
Cuel,Yeah this isn't a very good pattern,1514448398.0
omar-hydrah,"What might be better than a tutorial, is having a look at a real project; the Tutanota email service is an ""open source"" project. It's written in javascript (node.js). Github link:

https://github.com/tutao/tutanota/

I guess you would have to read about internet protocols. 

Beej's guide to network programming might be useful:

https://beej.us/guide/bgnet/

As far as I know, smtp (Simple Mail Transfer Protocol) is used to transfer email between different computers. 

This articles describes some other types of protocols:

http://www.emailaddressmanager.com/tips/protocol.html

Good luck. Try to avoid creating an email service that will be considered a spam by the big companies; or else, all of your users' sent emails will end up the spam folder.",1514386835.0
FrontierPsycho,"Alright, so, I'm confused about what you want. Gmail, Outlook and Roundcube are three completely different things that do not replace each other. Also, if you want your own email server but with a more modern looking interface, you can look at projects that use SOGo, for example. It's much more modern and pretty than Roundcube. On the other hand, Roundcube can be skinned, and the Kolab skins are pretty nice looking.

But this advice might be useless, depending on what you want.

The question is, what problem do you want to solve? Is it simply _viewing_ email on your computer and online? Or is it also _receiving_ email, ie, you want a domain, a server, the whole lot? Or do you already have a server, but you want another web UI, to replace Roundcube?

Please explain and then you can get more accurate help. ",1514406414.0
spinozasrobot,"I'm a little confused by the use of the word ""platform"".  Are you talking about writing a browser based email client, or the backend of an email system that handles store-and-forward mailbox capabilities?

As a real world example, are you trying to make your own version of something like Outlook (client), Exchange (server), or both?",1514391546.0
mistralol,"
Don't.... It seems like an easy problem right to the point where you find you have to parse and deal with email addresses and multichunk mime messages. the gui etc... doesn't take that long to do as a whole but those 2 problem will sink about 3-6 months of your time once you get them integrated into the gui.",1514415997.0
bloodguard,[Zimbra](https://www.zimbra.com/open-source-email-overview/) is mostly open source.     ,1514400558.0
fullheap,"If you're only talking about hosting a mailserver, check out `docker-mailserver`.",1514409675.0
segv,"No. You would need kernel/fuse extensions to store the ""last-modified-by"" attribute (not to be confused with file owner and mtime) for each file on the file system.

Your only other option is to store metadata on a higher level - something like creating a local git repo and tracking the changes from the commit history.
",1514382843.0
nobillygreen,"This problem becomes even more complicated when you have programs that don't just overwrite a file when you save it. Sublime, for instance, actually holds it's own version of the file and doesn't save directly to the open file immediately when you save. I believe Word does something similar.

The problem only becomes compoundingly more difficult as you go across different operating systems.",1514388920.0
zorlan,"Why would you not want to call next?

If you don't want to continue due to a condition you should return an appropriate response / body.

I don't know how this scenario is handled, but it doesn't seem like a sensible approach even if there are no performance implications.",1514336302.0
mistralol,"
Well kinda. If it doesn't then you have to wait for the client to timeout and close the socket. So you probably have a much smaller limit on the number of connurent clients you can have",1514339117.0
burtgummer45,"> What might be the issues if we do not explicitly call next function and requests are left hanging?

If its left hanging doesn't that imply there is *no* performance?  This cannot be what you are asking, you need to clarify. Do you mean for other connections?",1514336026.0
fl0w_io,"What library are we talking about here, express or Koa? Using Koa, instead of omitting calling `next`, just `return` and the promise will resolve normally.",1514362890.0
omar-hydrah,"The real question is, why would you want a request hanging at the feet (or rather ""at the closing parenthesis"") of one of your functions?

Calling next() is cheap, and healthy. But I guess you can monitor your application's consumption of memory for such cases.

Express's documentation:

http://expressjs.com/en/guide/using-middleware.html

`If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function.`
`Otherwise, the request will be left hanging.`",1514387185.0
FranciscoMSM,"There is no performance impact, you’re saving some time because the action doesnt arrive at any of the reducers and doesnt pass in the rest off the middleware chain ",1514360283.0
Snickers_Sneakers,Heroku + Mongolab is an option. Probably the most popular. ,1514312595.0
ggolemg2,"Ovh has docker hosting on their vps for 3.50 a month https://www.ovh.com/us/vps/

Sloppy.io is $5 a month https://sloppy.io/pricing/

Lowendbox.com has many for very cheap as well

For testing you can run everything on c9.io for free but it's not persistent.",1514312790.0
,"I've had a good experience with interserver.net

$6 a month. Pick your distro. Install whatever you want.",1514330726.0
993VQzn06,"You could split the Node features from the Frontend features. Have a separate repo for both and create some API routes for accessing the features from the Frontend. 

Then you can deploy both repos to Heroku. Node is straightforward and Heroku have a great create-react-app buildpack. Literally 5min per each deployment. 

Did I mention basic traffic levels on Heroku are free?!! ",1514320237.0
Nephyst,"I use digital ocean, docker-compose, and letsencrypt.

I have my code in github. My local git has a remote called ""live"" that points to the digital ocean server repo. That repo has git hooks set up so everytime it gets a commit pushed to it it restarts the server with the new code.

To deploy all I have to do is ""git push live master"".

My docker-compose has a containers for nginx, a database, and the application. (It's actually multiple applications, with nginx set up to run each on a different subdomain)

I also have some scripts that make setting up letsencrypt really easy, so I have free https.

I highly recommend using docker or docker-compose for this. The main reason is that you only ever have to set it up once. If I want to deploy to a new host it's super simple. HTTPS, nginx, database, and the app are already done. It's just a matter of doing the leg work to set up the server with user accounts, ssh keys, and setting up the git repo with hooks.",1514313820.0
idarwin,"If you want to avoid Heroku to get a better understanding of the ""nitty-gritty"" of what it takes to get an app deployment pipeline going from scratch for a trivial app, then a lot of the suggestions here are great so far. If your just exploring the technology, you can try to deploying to Microsoft Azure using their Container service (still in preview FYI) and a docker container as you suggested. I think they give something like $100 of free hosting for a new account. If your goal is to eventually turn this into something non-trivial however, I would avoid any kind of containerization unless your application specifically benefits from it.",1514322707.0
_lux0n,Heroku is pretty amazing. Just link it to your github repository and it deploys it automatically.,1514326718.0
mariotacke,"Also check out AWS S3 Static Website Hosting. It is extremely cheap (you pay per use) and won't require a dedicated server. Since most of your content is static, this may be a good use-case. Also, the email functionality can probably be implemented with SNS.

1. Probably not, at least not for deployment. Docker might make sense for your development environment though.
2. AWS S3 + CloudFront, or Github pages.
3. The password should either be injected during your build process (ex: via environment variables or global configs)

RE 3. Take a look at TravisCI for building your portfolio.",1514303654.0
danenania,"For 3 - we built www.envkey.com for this purpose. 

You could also use environment variables on the server and the dotenv library in development. Look into the 12 factor app methodology.",1514356853.0
angryCutlet,"1. You could, I just push my stuff through ftps to the server. 
2. Personally i use digital ocean, it's like $10 a month for their cheapest option. And they have a million tutorials on how to secure the server, deploy stuff etc.. Linode is pretty popular here too which i am sure would work just as well. 
3. I am not sure what the question here is, but if you're talking about setting up password and now uploading to github then just user server variables in your back end that will be defined on the server and you will just have the variable name in your back-end code. ",1514302235.0
iWantedMVMOT,"- Travis ci
- s3
- codedeploy (if needed)
- as for your password you can encrypt environment variables in Travis ci.  This will make it so the cypher text is in the config file and Travis decrypts them at build time ",1514306950.0
marvinfuture,"Seeing as the deployment and email questions were pretty well answered by others I’ll throw something new in the ring regarding hosting. 

Check out a site called vultr.com it’s just like digital ocean, but for like half the cost. I actually use both, but I tend to use vultr for my smaller projects due to the cost savings",1514307930.0
N3KIO,https://www.vultr.com/pricing/,1514325786.0
omar-hydrah,"After having a look at the package, it says that you have to install the package globally.

Type in the console: 

    npm ls -g --depth 0

To list all available global packages, and ""nba-go"" should be present.

To install this package globally you have to write:
    
    npm install -g nba-go

To use it:

    nba-go game -d 2017/12/26",1514296464.0
taboneIO,"Tell me what you think, would you use it? I'd really appreciate some feedback.",1514291360.0
omar-hydrah,"From express api:

http://expressjs.com/en/api.html#res.cookie

    res.cookie('name', 'tobi', { domain: '.example.com', path: '/admin', secure: true });

    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });

    // For cookies:
    req.cookies;
    req.cookies.name;

    // For signed cookies:
    req.signedCookies;
",1514299666.0
,[deleted],1514511465.0
bobbyjball3,"You wrote a thing and gave it away to the community, it adheres to some IEEE standards, (which is great), and your test coverage is good. For that, I thank you. 

But can I ask what your motivation was on this project? From an engineering perspective, this feels like a solution without a problem. I've used yargs a ton, and a few of the others out there, and I've had no issue with them. Quirks, sure, but no deal breakers. Certainly nothing that made me want or need to roll my own. Furthermore, it seems to be a major edge case where you'd be that concerned about cli option parsing speed (unless it were just horrendously slow, which it isn't with other libraries). It's a one time operation. 

Like I said, it's a high quality contribution from what I can see, so good on you. But why?",1514262130.0
geirha,"> 
* **Standard**: Getopts is designed according to the [Utility Syntax Guidelines](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html).

It doesn't actually adhere to the POSIX utility syntax guidelines though. For example, the standard requires that `grep -e -foo` should treat `-foo` as the mandatory argument for the `-e` option, but your module treats it as the four (flag) options `-e`, `-f`, `-o`, `-o` instead.",1514315300.0
ccb621,"1. Ask yourself if you actually need microservices. What problem are they solving? Do you have the personnel and budget to maintain them?
2. Combine your first two services into a single identity/user service. There is no good reason to separate them.",1514253426.0
cooliobing,"Data modeling is a good place to start when deciding what can be a microservice by itself. That is often the hardest part. Components that have a high degree of [coupling](https://en.wikipedia.org/wiki/Coupling_(computer_programming)) do not belong in separate microservices.

As /u/ccb621 suggests, in your case perhaps Accounts and Identity are closely related and you'd want the referential integrity to be maintained 100% of the time (have them in the same DB if you're using an RDBMS).

Billing can be a microservice in most cases. Is there a chance an account/identity could be deleted while a transaction for that user is in progress? Yep. That's when you [decide on tradeoffs](https://martinfowler.com/articles/microservice-trade-offs.html).

",1514269830.0
ConstVoidBlog,"think in terms of operational decomposition; then look for event sourcing & queue opportunities. think less in terms of microservices failing (an operational concern) think more in terms of pending events (a development concern) or unhandled queue records (dev concern). you are def asking the right questions--how will this operate? 

i am not sure how to do this in a native nodejs arch--mr google found http://slides.com/stefankutko/nodejs-microservices-event-sourcing-cqrs#/ which seemed reasonable.",1514286924.0
pro-user,"Apart from everything already mentioned earlier,  proper error handling is a very important topic when using microservices. Especially when calling other microservices, you should write your code to assume failure (e.g. not being able to connect to the other microservice, or not being able to retrieve the object/user you are looking for) instead of that being an exception. And each microservice should be responsible for handling its own errors. A tool like [Chaos Moneky](https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey) can help in testing this.",1514299489.0
dosangst,JsReport perhaps?,1514252081.0
Jake_Jeremy,"This seems like it might be a good fit.

https://github.com/westy92/html-pdf-chrome",1514253694.0
raphaelarias,"We use DocRaptor, as it uses PrinceXML (the same PDF converter used by Google Docs). We are going to test wkhtmlpdf to check if we get the same quality.",1514253741.0
mattandersen,"I use TeX and a PDF converter. The output quality is pretty good, but it seems temperamental if you don’t know it in advance. If you need page and layout control it is super powerful.",1514255852.0
zumbala,"We use http://pdfmake.org/playground.html in an EDI production environment for creating human readable formats.
",1514285546.0
hansek,"I've used [wkhtmltopdf](https://wkhtmltopdf.org/downloads.html) for this purpose before, but now I'd use [puppeteer](https://github.com/GoogleChrome/puppeteer). Make a basic html page styled the way you want (use the css print media) and use Puppeteer to print the page to PDF.",1514294785.0
johnkarap,You can check www.ZetPDF.com library,1518453405.0
nossie1,"You could try https://www.npmjs.com/package/continuation-local-storage
I use it to store per request loggers which are accessible outside the normal req or app chain functions.",1514239386.0
omar-hydrah,"Can you explain more what you mean? Are you referring to using sessions? Are you talking about the notion of ""global variables""? 

Have you looked at:

http://expressjs.com/en/api.html#app.locals 


To use sessions (to store user id and roles):

    var app = require(""express"")();
    var session = require(""express-session"");
    var sessionStore = new session.MemoryStore();
    var sessionSetup = session({
        secret: ""supersecretword"",
        resave: true,
        saveUninitialized: true,
        store: sessionStore
    });

    app.use(sessionSetup);

To store express application local variables (global variables in php):

    app.locals.databasePassword = ""97531"";
    ",1514232593.0
ecares,"Okay, you are touching a real issue in Node.js here. A few solution have been tested such as the Continuation-local-storage (CLS). Right now, a solution is being pushed in Node.js core named Async Hooks.

You can see some slides about this here http://slides.com/vladimirdeturckheim/deck-12",1514240496.0
Crowesco,"Write Models, like `Book`, and have a `static` called `cast` or something that can include any checks you need, and can create a legitimate instance from JSON/JS Object passed in.

Here's an example where it just checks that the properties match:

https://github.com/Gallink/Models/blob/master/src/Model.js#L13",1514227200.0
ecares,joi,1514240581.0
fluidbyte,"Obey; https://www.npmjs.com/package/obey

Similar to Joi with the more JSON-based modelling structure of JSON Schema",1514389515.0
ConstVoidBlog,"data has a classification; classifications have an impact when there is an error; impacts have an importance to stakeholder+user population.  

importance can be critical/essential/non-essential (h/m/l, sev 1/2/3, etc).

critical data elements get validated by both typed class ($float is not date) and validation microservice.
 
essential +crit elements get validated by client.

little boys + girls validate non-essential data elements :)   ... then again, if data is non-essential, why is it being processed?  
",1514287587.0
burtgummer45,"This is a deep question, I don't have the answers myself but I have a better idea where to look, check this out.

https://www.microservices.com/talks/dont-build-a-distributed-monolith/",1514225909.0
bobbyjball3,My experience is that a separate package is better. Especially if you think you'll have to vend clients in other languages. ,1514239393.0
ConstVoidBlog,"if tightly coupled, import, if loosely coupled, copy/paste.

when tightly coupling, embrace blue/green--be ready for srvc W,X,Y to use v1 of srvc A client lib, and srvc Z to use v1.1.

",1514230719.0
De_Wouter,"I’ve never had to build a node.js application for which a single thread wouldn’t suffice, but I can totally imagine this being too limited for bigger scale applications with a lot of simultaneous users.

One approach to scale I could think of is to split nodes into functionality. For example have an instance running to basically just handle the websocket connections and communicate with an internal API to other node instances. Like an input validation node instance and a real-time database instance. And obviously serve static assets like html, css, images and other media on another instance or even server, preferably even using a CDN.",1514231738.0
tswaters,"There are considerations you need to make.  This is mostly due to the internals of a socket connections work - them needing to persist.  You can't bump the user to different servers.  If you do, they'll open a new connection on server #2 and the connection on #1 will stay open.  If you disconnect, you can only disconnect to one of the connections and the other one is likely a memory leak. (I'm not sure if they timeout if so it'll probably get cleaned up)

Take a look at the page here on the socket.io docs:  https://socket.io/docs/using-multiple-nodes/#

The other consideration is kind of mitigated by using sticky sessions -- each user picks a server and stays there -- but the memory isn't shared between processes... so if you have an array of things and each user connected to this server pushes an item there you'll have different array instances on each server.  This might make sense for something like a global counter of connections - you'll need to persist that information somewhere, i.e. database or filesystem.

Also is it a concern that users balanced to #1 won't be able to communicate with users on #2?  If so you'll need to use an alternate adapter (redis is great for this), and persist more information to the db -- use socket.io solely for a transport mechanism.


edit:

scaling an application like this, is in my eyes, is a lot like trying to add multiple languages to an application after it's functional... pulling out all those static strings, replacing them with keys & providing a back-end to populate those keys based on the requested language.  It's a hell of a job if you didn't plan for it from the beginning.",1514238340.0
Wouto1997,"> You are in a relationship. Your girlfriend is constantly nagging you for not being the 'first-one' to like her Instagram pics.

I'd go for new girlfriend rather than an application as workaround for the broken girlfriend",1514205523.0
Nrdrsr,Breakup.exe is my preferred choice when dealing with vain women like this. Fortunately I have found someone who doesn't give a shit about social media. ,1514246178.0
basiclaser,"we feel u buddy
",1514211827.0
TheHeretic,Yikes,1514218767.0
,oh... no...,1514211008.0
jorge2k,But why? ,1514262866.0
baxtersmalls,"Uh, you can set notifications in the Instagram app to let you know when someone posts. Not really sure what this is solving for, liking it right away?",1514268757.0
Tourblion,Why not program a bot that posts fake content and immediately likes it and responds to it so you can nag her back? ,1514231434.0
Tourblion,Why not program a bot that posts fake content and immediately likes it and responds to it so you can nag her back? ,1514231425.0
Asmor,"I've made it a policy to not ""like"" anything on any social media ever. If I like something, I'll comment.",1514251168.0
tswaters,"I see that message when the app crashes, it'll wait for the inspector to close before the process closes.

I would try to run it from the command line via `--inspect` flag and see if you can get that to work.

edit: actually my mistake, the message I see for that is `Waiting for the debugger to disconnect...`

Same advice though, see if you can get the inspector to work without vscode.  it's probably a configuration problem somewhere, share your config.

Could be using new syntax and not loading the process with babel-node?  Typically you'd see an error though... maybe vscode is swallowing it.  Doing this from command line might bright to light more information.",1514188488.0
virtulis,"Um. So I couldn't understand what you're asking, went through your post history and now I'm even more confused. I think before you're worried about efficiency you should figure out how whatever it is you're trying to use actually works (socket.io and actual sockets have very little in common, for a start).",1514176112.0
MrNutty,The bottle neck will be how fast you process the data. But just create one socket. There’s no need for multiple sockets unless you a valid reason. That way you only have to manage one socket connection. ,1514188812.0
mmcnl,"I find it extremely annoying that everyone these days is writing articles that thou shan't do X, avoid Y and laugh at anyone who does Z. 

How about showing the correct way to do things, instead of criticizing others who at least make an effort? Please show me how to do authentication right. 

This article is useless. ",1514167041.0
SomeRandomBuddy,Hackernoon is trash ,1514167250.0
koprulu_sector,"For the record, I think Okta's API docs are pretty solid on using Oauth2 + jwt, and AWS' cognito docs are a great reference, too. ",1514188084.0
Heroiini,ITT: node.js developers are butthurt cuz they can't get authentication right.,1514186673.0
sieabah,Any framework can do this. All you need is keep track of when it started or current play position and replicate that to new joiners.,1514151524.0
thelastknowngod,"I work in live video streaming professionally.. This is not a very easy thing to implement. Definitely not going to do it with a simple node app. 

Your best bet would be to set up a streaming server using something like zixi or wowza. Neither are very good but they are the best options you have at the moment. 

That should be able to handle MPEG-DASH and HLS streams. Then you can just have everyone open the stream in VLC or whatever. Not sure what the state of web based players are these days.. Maybe JWPlayer would work if you really want a web page. Not sure though. 

The reason you want to use a streaming server and not just share a link to a file is so that you have a process dealing with transcoding for adaptive bit rates. ",1514174281.0
hacksparrow,"Node is not recommended for high CPU tasks such as this one. Back when I did a lot of video streaming work, it was either Flash Media Server or Red5 that we used.

Use the right tool for the right job. Be water, my friend.",1514177684.0
,Instead of live streaming the video itself you could just change the src attribute of a video node and seek to the location where your friends are at via javascript.,1514155616.0
TheOneRavenous,"WebRTC is another option for truly live video. The node server only acts to exchange token/WebRTC information to the users and then webRTC streams the live video. 

This is all client side and the webRTC connection handles the tunneling to each peer, it's peer-to-peer. You can then utilize the user who started the video as the source of the stream and provide that to any other user who joins the channel. it will automatically sync to the current frame based on the video stream source in this case a webcam, or potentially a canvas/video element on the DOM.",1514493944.0
Infamous_Brush,"I would say your best bet is to set up a self contained streaming server, either one you can host or one that is hosted for you. The two i had the best luck with was Wowza ([https://www.wowza.com/free-trial](https://www.wowza.com/free-trial)) and VXG ([https://dashboard.videoexpertsgroup.com/](https://dashboard.videoexpertsgroup.com/?started=)), both of which have a free trial you can sign up for. ",1529428118.0
sinedied,"BTW, I just added automated docker builds for it, so you can easily deploy it on your docker-enabled NAS :-)",1514407111.0
konrain,"if you mean legal wise you can ask valve if you could, then do it or, just do it. They most likely wont care unless you're making another game from it.",1514129223.0
trakam,"nice tut but not node, its clientside?",1514409517.0
alppawack,You should use 1 socket per client. 10 socket per client would not be efficient and just use more memory.(sorry for my english),1514107359.0
omar-hydrah,"What do you mean by having the server ""listen"" to 10 different sockets? A socket is a user, or do you have it differently set up? Do you really want to limit the number of your visitors?

If the connection is already established, there's no ""listening"" process. You just wait for data. You ""listen"" for connection attempts only - as far as I know.

What is a ""listening socket""? Do you mean a socket server? How are you going to receive 10x more data from a single socket/user ?

What's your application layout?",1514113770.0
AlexJoverM,I think the way to distribute sockets is one socket per client. ,1514115790.0
bobbyjball3,"NVM is fine for a local Dev environment. It's not appropriate for actual deployments. Though for deployments you typically don't need several different versions of node anyways. Homebrew does have its issues, and switching between node versions is frustrating. I'd stick with NVM for node. 

I've never installed using the ""official"" installer. I've always used either brew, NVM, or the OS package manager (yum, etc). Your uninstallation should be a one time process, so I'd say follow what you find once, then use NVM from there on out on your local Dev environment. It's only painful once. 
",1514095565.0
MWrathDev,"> Some people recommended using Homebrew to install node and npm, but a good amount of people also said that this leads to major issues. The general sentiment is that you shouldn't use a package manager to manage another package manager. I've heard that before with other tools.

Yeah that's bullshit. They serve 2 different purposes thus are Non-overlapping magisteria i.e. 99.999% of the time they will not conflict with each other unless you specifically tell them to.

- Homebrew is a package manager at the OS level (akin to apt-get, yum, pacman, nuget/chocolatey, etc).
- NPM / Yarn / Parcel (via nodeJS) are package managers at the application/developer workflow level.

> If nvm is indeed the best practice, is there a way to have it target an existing node.js installation that's already on the system?

For maintaining multiple node versions on the same machine natively, it is the best.

> The reason I ask the last questions: Is there any sane way to uninstall node.js and npm is you used the official installer? Every resource I've found describes a hideous process...

Not really, but it's not really that hideous just tedious, you're just removing node + global packages... if you intend to reinstall afterwards. If you don't then you must also remove the package cache, and all of that can be easily scripted if you want to automate.",1514095478.0
fancy_panter,"Keep your primary node installation whatever the LTS release is. 

Use NVM for everything else.",1514129560.0
oorza,"I actually don't agree with any of your examples.  Let me give you my suggestion and my reasoning:

	+ src/ # actual Node source files *all* go into this directory
	+ build/ # output from babel/webpack if any
	+ test/ # all tests
	+ docs/ # write docs!
	+ README.md
	+ package.json 
	+ other files # Dockerfile, CI config file, etc.

`src/index.js` (or `build/index.js`) should be the entry point in every application.  If you need to partition inside of src (e.g. `src/server/` and `src/client`) you should either be using two repositories or a properly setup monorepo, but cohabiting two applications in the same source folder is a bad idea.

package.json should define: `start`, `dev`, `test`, and `lint`.  Additionally, `build` should be defined if you're using a compiler.  I also like to define a series of docker commands: `docker:(logs|build|start|stop|clean|dev)` for projects that use docker.

This approach has a few advantages:

1. You can set `files: ['build/']` to omit a ton of nonsense in publication to NPM.
2. CLI options for tools are easier `mocha test/**/*.test.js` or `flow src/ test/`.
3. It's easier for someone to step in your project and immediately see what's going on - source is in the source folder, docs in the docs folder, tests in the test folder, and everything else is probably okay to ignore.
4. It's predictable and consistent, so you can share CI configs and whatnot across your projects.  Or, if you work with a lot of projects, knowing that you can just `yarn docker:watch` and not have to worry about anything else to get going is faaaantastic.",1514095148.0
ic6man,"None of these are any good. 

Separate your source into features. Each feature should have every thing about that feature - the controller, the route, the model, the css the html etc. 

I don’t know why the “divide everything up by it’s functional role” e.g. controllers/models/routes” model is so prevalent.  Probably because it makes sense for trivial apps. When your app grows up and you have 100s of files in the controllers section and hundreds in the model section and you realize that to make one change to the app requires opening up four files in four directories *every single time* it’s only then that you realize it’s a horrible organizational pattern. 

I would go so far as to say that style is an anti-pattern. ",1514144556.0
GodInTheWired,"This is pretty much identical to the folder structure I use for all my projects except I add a top-level `scripts` folder if I have any scripts that don’t make sense to put in the `package.json` (it’s too long, escaping characters hurts the readability, I want to write it in JavaScript, etc).",1514109945.0
franciscopresencia,"For me it really depends on the type and size of the project. Let me give some smaller examples with my personal projects.

For this project: https://comments.network/ I just needed a couple of routes. I could go on and create a whole model/view/controller structure folder, but since most of the code is a scrapper it didn't even make sense. So I created a couple of files in the root and then a `network` with `hackernews.js` and `reddit.js` to scrape each of those separately. Also a `cache` folder where I keep manual cache copies, but in retrospective I wouldn't do that last bit again.

For this project: https://core.cards/ it has two models, users and cards. The list of items are static data so no need for a model there. So I created a couple of folders, `/users` and `/cards` where the logic of each was inside.

For a work project that I cannot link there were a lot of models, controllers and views. They were separated in a more traditional MVC fashion (models, controllers and views folders).

So it depends, IMHO, on these by their importance order:

1. Size of the project. Is it a large, long term project or a prototype kind of thing?
2. Type or project. Is it more of a traditional CRUD app where an MVC makes more sense or a small, one use tool? Long term maintainable project or small flexible one?
3. Team size. Are you a large team where convention might be more important or a single/couple of devs where getting things done quickly is more important?",1514130071.0
omar-hydrah,"Do you mean, tutorials on ""React""? Those are mainly front-end repos (SPA).

The last repo from wesbros, has fire icons in some of its commits. This rules him out as role model in laying projects' structure.


Everyone has his own opinion. 

The structure I'm comfortable with in my ""Node.js"" MVC projects, is:
 
    ./config      - any configuration files (for passport or for database connection)
    ./models      - contains all the mongoose models.
    ./controllers - functionality for models used in my routers.
    ./routes      - all application routes.
    ./views       - presentation files.
    ./public      - publicly served files. 
    ./middleware
    ./functions   - personal helpers.
    
This structure helps me when I'm revisiting an old project. It's a clean layout, that pretty much lays a map for itself.

Take a sample:

https://github.com/omar-hydrah/maktup

For React projects, opinions would differ greatly. 

From the perspective of a back-end developer, I prefer just adding:

    ./components - All react components. Can be divided to multiple folders.
    
And I include my react output bundle file in ./public

Take a sample project:

https://github.com/Omar-Hydrah/world-cup-api


Take a look at tutanota project:

https://github.com/tutao/tutanota/

It's an open source email service. https://www.tutanota.com",1514122373.0
autobotguy,"nothing standing out to me, noticed that you are opperating on addWindow ""addWindow.close()"" but addWindow is never instantiated. Not seeing a addWindow = anything. In your createAddWindow function, you are just changing the reference to mainWindow. That might and probably breaks your ""getWindow"" function. Also, in in your ipcMain event handler for item:add, e or ""event"" has a sender property that you can call ""send"" on (e.sender.send) to respond to the BrowserWindow that send the request to main. I also see no source for this ""getWindow"" function. ",1514094333.0
SydBal,Why are there 10 ads on this video? Yup not even gonna try.,1514099379.0
naypev,"Can you tell me how is this related to node? On the other hand I would suggest using passport and google strategy for login on node servers, very easy to set up.",1514120635.0
jfishersolutions,RemindMe! 12 hours,1514061514.0
Kriem,RemindMe! 12 hours,1514079293.0
zen_devil,RemindMe! 12 hours,1514090527.0
Maharyn,Transform streams can probably do what you want. Though it's hard to say without knowing specifically what you want done.,1514052814.0
TheNumberOneCulprit,"I'm having trouble understanding why you need to write and then read again. You've already got a readable stream, no? Just don't convert it to a writeable stream, or pipe the utf ouput into a buffer or something, and you'll be fine :)",1514073238.0
niksko,"If I'm interpreting your question correctly, you probably need to set up a callback on the write stream once it's finished writing.",1514076042.0
davidmdm,"Eeeeeeeeesh. I think you are overdoing it. You can specify your readable stream as UTF8. 

    const csvstream = fs.createReadStream(path, 'utf8'); 
    

Then pipe it where you need it to go. 

If you are bent on your current implementation , don't pipe it to a write stream, use the data from your transformations directly. 

If anything I said was unclear let me know. ",1514076365.0
QuantumObstructions,So my solution to this was finding Python code for my 9DOF sensor and using python npm. With that I am able to accurately get my data on my server via the i2c bus.,1516716678.0
Incraigulous,"This looks really good! I'm curious, what is the motivation behind building another node Laravel clone? Adonis seems to be picking up stream. I would be worried something like this might fracture it's adoption. How does grind compare with Adonis?",1514042053.0
oorza,"Some notes:

* The header on the documentation page overflows into the content and since the text color is the same color, oops: https://i.imgur.com/OXftax1.png
* According to npm-remote-ls ([source](https://gist.github.com/anonymous/33e983283cb6d6cc0feea0c3266194c6)) pulling in the 3 packages in your web template installs 300 external dependencies.  I understand wanting to not reinvent wheels, but if you're pulling in packages like `recursive-readdir` and `mkdirp` I have to wonder what other corners have been cut in development.
* Speaking of reinvented wheels, why did you invent a new template language and template processor when the JS community has several widely used and accepted template options already?
* Without first-class support (documentation, examples, etc.) for SSR of React/Vue/Angular, why would I choose Grind over something that does offer that support (electrode, hapi, feathers)?
* For something that offers ""opinions"", why is routing and middleware left to the wild wild west same as an express application?  Another big framework built on top of express (feathers) exposes a service interface and allows you to just `app.use(path, service)` and it wires everything together for you.  It looks like I have to manually specify every single route I expose; why should I have to do that in 2018?

All in all, I'm left wondering: who is this for?  Is this specifically targeting Laravel developers who are forced to use Node against their will but don't want to learn any of the Node idiomatic solutions to things? I don't really see anyone else widely adopting this.",1514048952.0
Max_Stern,"Why do they use these UTF8 symbols in documentation? 
",1514040727.0
OzziePeck,...another framework? Great. Do we really need another?? ,1514234539.0
OzziePeck,Don’t install Node with brew. Download the .pkg file from NodeJS.org. Brew can mess it up from what I’ve experienced ,1514234908.0
ecares,https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes,1514034472.0
putty27,Upvoted for Megadeth. <3,1514037791.0
Maharyn,"If we're talking Heroku specifically, you add the postgres addon to your app, and that automatically makes the connection string available as an environment variable. I believe it's DATABASE_URL. If you install Heroku toolbelt, you can handle importing a database dump via that, which I found pretty easy.

Personally, having mostly worked directly with SQL in the past, and done 1 production and 1 hobby project with an ORM - Sequelize - I really am not a fan of Sequelize. I won't write off ORMs in general, though, obviously. Anyway, the only reason I'd use an ORM now is probably if I was working with someone who didn't know even basic SQL, since it does abstract away the SQL in favor of familiar JS.

Migrations can be handled with Sequelize, but you could just as well use the pg module, and then use something like node-pg-migrate to go along with it.

In any case, if you want to use an ORM, then definitely do so. I only posted because you said that you read that you should use an ORM, and you certainly don't have to. At least in my opinion. It's also one more complicating factor, if you're still learning, so it might be better to space it out.",1514023432.0
poom0nster,"Do not go with ORM like like Sequelize, if you do not need ORM in your application. Check out massive.js instead. Using PG native is a good option too.

Sequelize has been criticised a lot recently and a lot of people end up being frustrated with it on more complex projects. If you insisit on using ORM, check out TypeORM too. ",1514024995.0
omar-hydrah,"I can relate to your problem. If this is your first initial steps with programming, I would recommend ""PHP and mysql essential training"" from Kevin Skoglund on Lynda.com. 

Programming is essentially the same across programming languages. 

The MySQL section of the course will help you greatly in understanding what a sql database is. Kevin SKoglund does a great job in bringing you to grounds you're not comfortable with. While you're there -at lynda- try understanding what object oriented programming is, and what web security is. 

You will find courses for these two topics from Kevin Skoglund. They're all on PHP, but the basic principles can be ported to node.js.

Stay away from ORM as long as you can. This is an advanced decision to make. Not suitable for beginners.

This mysql course is also good -and free, as it seems-:

https://www.youtube.com/playlist?list=PLBlpUqEneF0-xZ1ctyLVqhwJyoQsyfOsO

If you're only determined on watching postgres tutorials, Corey Schafer has an excellent playlist on youtube:

https://www.youtube.com/playlist?list=PL-osiE80TeTsKOdPrKeSOp4rN3mza8VHN

Good luck, and avoid Udemy.",1514073896.0
Pedrock10,If you don't know SQL I would recommend that you learn it by don't using an ORM.,1514030197.0
oorza,"Whether to use an ORM is a bit of a lose-lose situation.  If you use one, you have to learn it.  If you don't, you have to spend a lot of time writing queries manually (and in your case, potentially learning how to write them).  The idea of an ORM is that it abstracts the database away from you, so that you don't really interface with the database so much as an interface for data objects.

My experience is that it's generally easier for people to learn some basic SQL (can you create two or three tables, insert data into them, and query/join them from the CLI?) and then use an ORM.  Javascript has been a different experience because every single JS ORM is shit.  The least shit one I have found is Objection and it barely does anything for you (and we evaluated Sequelize, raw Knex, and Bookshelf as well) such that I had to spend a day or so writing several utilities and a base model class to bring Objection up to the point where I felt comfortable telling another developer about it, and even more work to get it ready for prod.  So I'd say ignore the ORM in Node, get familiar with how to write a web app in Node, and then use an ORM when you graduate into a professional programming language.

Knex, on the other hand, is just a query builder that makes your life easier (e.g. `query.select(cols)` instead of ` SELECT ${cols.join(', ')}` or what-have-you and is definitely probably worth looking into for your use case.",1514049563.0
Mcshizballs,I recommend sequelize. It will make your life 10x easier in the long run. Once you get the jist of what an ORM is and how they work others will come easy and you will never look back.,1514020445.0
bdenzer,"> how to send the Pug runtime

While its probably possible to do this, why not use a tool that is actually made for it. Check out Handlebars, Mustache, or AngularJS (old Angular) and you'll have a much easier time.",1514014521.0
KalouAndTheGang,"I think you can do this with a pug mixin and pug syntax...


    mixin itemCard(item = {})
        .item
            .item__header
                .item__header.item__header--name
                    span #{item.name}
            .item__inner
                .item__inner.item__inner--description
                    p #{item.description}
                .item__inner.item__inner--thumbnail
                    img.thumbnail(src=`./thumbnails/${item.thumbnail}` alt=item.name)


and you include and call this mixin in your parent pug file

    include mixins/_itemCard
    
    block content
        .items
            each item in items
                +itemCard(item)

*Edit : I tried to complete the mixin to match your need...*",1514018242.0
omni_whore,If you read my blog about posting on Reddit like a champion,1514000928.0
Nullberri,Please dont expose your node instances to the internet. Use a reverse proxy like nginx to filter out most of the malicious traffic. The proxy can also serve your static files. ,1514007169.0
IwazaruKyu,"In another thread, I described my method to deploy a Node app on production: https://www.reddit.com/r/node/comments/7fdwp0/comment/dqb9h8x?st=JBJ1DBF4&sh=59529394",1514015091.0
fullheap,"Best practice is to not have any local state on your server and use docker to isolate the node process. Then add a reverse proxy like caddy (easy, will give you automatically free SSL as well if you have a domain) or nginx (hard) in front of it.",1514016007.0
burtgummer45,"Check out passenger, it makes it easy.  You then have your choice of nginx or apache to host it

https://www.phusionpassenger.com/",1514011307.0
burtgummer45,"I never bother with distro packages of node or npm, they are always out of date, just get node here, it comes with npm (last time I checked)

https://nodejs.org/en/",1513983187.0
cooliobing,"> Output for nodejs -v:
> v4.8.2

The nodesource script is pretty reliable but you should fix your `apt` before running it.

* Run `apt-get update` and fix any errors that show up
* Temporarily disable any PPAs (e.g. mapbox) that are causing issues
* Once `apt-get update` works without errors, rerun the nodesource script

If it still doesn't work, check to see if `/etc/apt/sources.list.d/nodesource.list` exists.",1513989300.0
nexriz,https://www.npmjs.com/package/node-fetch,1513983021.0
zorlan,"PHP file get contents is abstracting away two different operations here: the http fetch and the reading from the file system.

Look at the http node library and use it in combination with fs to download the file data and then write it to a file, there are loads of examples online.

`var http = require('http'); var fs = require('fs'); var download = function(url, dest, cb) { var file = fs.createWriteStream(dest); var request = http.get(url, function(response) { response.pipe(file); file.on('finish', function() { file.close(cb); // close() is async, call cb after close completes. }); }).on('error', function(err) { // Handle errors fs.unlink(dest); // Delete the file async. (But we don't check the result) if (cb) cb(err.message); }); };`


Edit: read, not write, example",1513982284.0
MasterCommit,Try axios,1514007014.0
omar-hydrah,"The basic idea is: 

1- Making a get request to a web server on a file resource. The response should contain the data of the file.

2- Writing the file(response data) to desk.

So, in theory: 

    axios.get(link).then(function(response){
        fs.writeFile(path, response, function(err){
            console.log(""Data saved to file."");
        });
    }).catch(function(err){
        // log error
    });

I haven't tested this, but it should work with you.

Note that axios uses promises, and the fs.writeFile uses callbacks.

https://www.npmjs.com/package/axios

https://nodejs.org/dist/latest-v8.x/docs/api/fs.html#fs_fs_writefile_file_data_options_callback",1514042459.0
dev_develops,I started 5 months ago. This was the only workshop I've used https://github.com/workshopper/learnyounode. I probably should look for more courses but the need hasn't come up for it yet.,1513975908.0
Bash4195,"So this isn't exactly a good resource for node.js specifically. But since it's typically used for web development and I'm guessing you'll probably want to build web applications with it, this is the course I took that helped me a lot.

https://www.udemy.com/the-web-developer-bootcamp/

Skip the first half unless you want to learn/brush up on the front-end. Last half is mainly express.js and mongodb ran on top of node.js and just generally putting together a working application.

Again, if you're looking to learn how to use the actual node api, then this won't help you. Just thought I'd put this out there.",1513989443.0
omar-hydrah,"My recommended resources:

Youtube channels:

[The net ninja](https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg/playlists)

[Traversy Media](https://www.youtube.com/user/TechGuyWeb/playlists)

[Academind](https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w/playlists)

You can also check Lynda, infiniteskills and pluralsight.

Scotch.io has some good articles.",1514043431.0
patlux,"It's fine, but not necessary to reinvent the wheel. Just use JWT for authentication. 

https://jwt.io",1513969468.0
csman11,"This doesn't sound like an issue from a security perspective, but from an architectural perspective it is suspect. The standard place for authentication is at the service/api level. The standard place for authorization is at the domain level (though you can also do authorization in your service/api if you only expose functionality through that). Doing your security anywhere else is just a basic violation of separate concerns in your architecture.

Don't just go use JWT because someone else recommended it. Using JWT because it is ""hip"" will lead to the same problems using microservices because they are ""hip"" does. Stateless auth tokens solve a very specific type of architectural problem for a very small class of security problems. Some people will talk about their efficiency, but that is only and incidental benefit that they have. In 99% of application security use cases what you are looking for is a solution to ""session validation."" Express has plenty of middleware to do this. If you are using another web framework/library, you can probably figure out a way to incorporate session ids relatively easily, or figure out a way to use the express middleware with it (since express middleware is essentially just a function taking some continuations and deciding which continuation to call, it is very easy to use it with other frameworks).

Do not use JWT because they sound cool or easy. Once you need to deal with issues like invalidating tokens you will have to introduce a stateful session store anyway, and at that point you most likely will be wishing you just did that in the first place.

I hope this helps out. The general rules in crypto are: 1. Don't roll your own crypto 2. KISS. Following these rules basically means just do whatever is standard with the tools you are using and don't get clever unless you know what you are doing and more importantly you know you need to be clever. In my experience it is pretty easy to recognize that you are not a security expert and not break the first rule. It is very difficult to follow the second rule (and KISS is much more general).",1514105394.0
gileze33,"We do this in a number of ways:

- if it's an immediate update, you implement some form of RPC between the API layer and the worker/RPC server

- whenever a change is made in a service, we publish an event into RabbitMQ such as ""orders.order.event.(created/updated)"" (defined as ""service.model.event.eventType"") 
- you can listen on these in a separate service that deals with websockets - as an example, we use a service called Pusher where we have a simple stateful (using a DB) routing layer to route events to the appropriate rooms, and these are subscribed to in the UI layer",1513954232.0
flipperdeflip,"If the app is just a request/response app then updating the central storage from the worker is enough as the next request will see the new data.

But if you need to push data to the client then obviously a signal needs to go from your worker through whatever server is connecting to the user. 

There are different ways to do this, it all depends. There are storages and apps that specialize in this kinda of data synchronization like RethinkDB and many others (see npm etc).

You can roll your own as well: If you have a bunch of node.js processes with a websocket (or SSE or other push connection) open to the end-user then these server processes and your background worker process can use a pub/sub system (like redis or whatever) to communicate. Then the server would subscribe to a channel where relevant events from the workers get published and then route that to the connections of the users interested in that event or data. ",1513946194.0
cooliobing,"""It depends""

If you're already using pubsub features in a cache like Redis, you could persist work results to the db and notify the app via pubsub that work was done.

Or if this is a low traffic simple use-case, you could simply have a `callbackURL` as part of the job you submit to the worker. Let the worker persist the results in some db and then notify the callbackURL via HTTP with a pointer to the results. This also allows you to easily test the workers functionality with integration tests.",1514000302.0
thegigaraptor,"When you say ""Clojure"", did you mean closure?",1513948856.0
,[deleted],1513916904.0
mexican_restaurant,"Just to be clear comparing Wordpress to node.js isn’t really 1:1. You’d be better comparing the languages, node.js to PHP, or the frameworks like Wordpress (php-based) to a node.js one like keystone. 

To get on with the answer, if you’re asking which would be better, it depends on what you’re after. Wordpress is stupid simple to set up, customizable, tons of plugins and whatnot. Most shared hosts offer php hosting dirt cheap, and even 1-click Wordpress installs through your host without setting anything else up manually. One downfall I’ve had is using Wordpress api is weird, it’s inconsistent and just crummy in general and the same can be said generally about php itself. It’s easy to do things the wrong way, lots of security concerns especially if you aren’t careful, etc. I’ve also found Wordpress to be slow. Maybe I have mismanaged the ones I’ve dealt with, just something I’ve noticed. 

I personally like node.js and a framework like keystone better. It’s newer and I like how flexible things are, without installing plugins. Wordpress seems like it’s built for non-devs and keystone is closer to what a developer might pick up and use if that makes sense. That said, your hosting options are a bit different and might require some more work on your end to get up and running. Instead of a shared host you’d probably want amazon aws, or a digital ocean droplet.",1513928575.0
djslakor,You're asking us to compare a CMS to a runtime.,1513957164.0
CunningFatalist,"Hi, I have built some comparison websites and when I joined my company they had a comparison website for web hosting and homepage builders that was built with WordPress. It was very slow and we had to switch. We did one with Code Igniter and jQuery which works just fine and are currently building one with Symfony and Vue which works even better. 

If it must be WordPress or Node, I would go with Node for performance reasons and use TypeScript for some safety. Migrating to TS has killed so many bugs for us, it is amazing. Good luck with your project!",1513930541.0
flipperdeflip,If you need a ton of custom database and application logic then definitely not Wordpress.,1513944969.0
csulok,"Always good when packages don't need c++ compiler anymore, especially on windows, but the elephant in the room in this case is the oracle instant client library.

That still cannot be included in the package because of its licensing, and requires lots of manual steps for a setup or upgrade.

Maybe a good goal for v3.0..",1513957992.0
sittingprettyin,haha why,1513935675.0
penguinbass1,I think you want to save user scheduled notifications to a database and index them by the time they should be sent out. Then you can use node-cron to every minute (or 5 or whatever) search the database for the current time range and send the notifications that the search returns. After each notification is sent I would also delete or flag them in the database so you know not to send them again in case you run into race conditions that may cause them to send twice.,1513913340.0
SableElephant,"Thanks for the input all! Sounds pretty unanimous that I only need one scheduler/timer that checks a store or DB for documents that need to have some action taken on them. 

I think I can mangle something together! :D",1513918008.0
spaghetti-in-pockets,"I'd recommend a system with an existing scheduler, and adapt it to your needs. I believe Jenkins has something for that, but I wouldn't recommend manually creating cron jobs.",1513903213.0
mjr_a_hole,"Allow users to add a notification to a central notification store.  Properties of the notification object could be something like:

* userid
* service [twitter/email/etc]
* time to send
* message

You'd need to track auth tokens/credentials per userid for each service.

Write UI etc for users to manage above.

Write the sender script. This can be a permanent process (or called via cron)  Sender script looks through all of the pending messages, find any that should be sent based on the time to send in the notification object. Call appropriate message send method (twitter/email/etc) on the message, handle post success (delete message/update status of message etc) and handle post failure (requeue/delete/update status etc)

The script can be called periodically from cron, or it can just stay in memory and sleep for a bit between each check/send loop, wouldn't even really need to care when the loop started.  Run through all of the messages, sleep for x minutes, run through all of the messages. The message knows when it should be sent, so you don't need to time the processing, you just need to send the correct messages.
",1513915151.0
,Give node-schedule a try. Complete async operation and a very easy API to understand. I use it to schedule various database cleanup operations. https://www.npmjs.com/package/node-schedule ,1515657842.0
canuck_dev,"What's the url that you're trying to hit?  Are you sure it's not just just returning a 403 because you don't have permissions for the resource? Edit: You wouldn't be getting a 403 if it was an issue with the cert.  In that case I believe you get a 'Certificate not trusted error'. When you get a 403, the https connection has completed successfully but the service is saying you don't have permission at the url.",1513899677.0
oorza,"Named capture groups are coming to JS, so now I can finally write my entire frontend as a single regular expression!",1513931660.0
ecares,have you tried npm install xxx@latest ?,1513878551.0
10xLaCroixDrinker,If they are using a lockfile they could. But if they want to independently control the version why not just install them separately?,1513956925.0
,[deleted],1513889808.0
wuh_happon,What packages are you using?,1513847790.0
fl0w_io,"There's insufficient information to give an answer.

How big is your application, do you load allot of dynamic data, what are your dependencies, does it creep up or is it 3-4 GB on upstart?",1513866206.0
mrm8488,"I think it is not normal but you have to monitor your application to find why and when memory reaches that levels. You can try Prometheus, it's open source. And you can check some https://blog.risingstack.com/ articles about monitoring and memory/cpu profiling",1513888060.0
jesusgn90,And modules like nodemon should be global or maybe —dev ,1513898169.0
jesusgn90,Add —save-dev flag next time ,1513898191.0
Revlack_br,FIXED: My app was instancing multiple sql server connection pools. ,1515524048.0
inabahare,Maybe something like [this](https://stackoverflow.com/a/2792879)?,1513844719.0
bjelke2,"This is now solved. thx to the awesome guy on stack overflow.
didnt expect it to bet hat simple, just to use mongoose sort like in the end of the function like this: 
Blog.find((err, blogs) => {
  if (err) {
    console.log(err);
  } else {
    res.render(""index"", { blogs: blogs });
  }
}).sort({ created: 'desc' });",1513846070.0
coolnat,"This is a shot in the dark, but is the system clock set correctly on the VPS?",1513847419.0
tswaters,"I would take sequilize out of the equation - just see if you can connect to the server and run a few queries to see what happens.

If it happens without sequilize, all signs point to some kind of problem between your node app and the server.",1513851034.0
DiesFuechschen,Can you try setting Pool.min to 1 or more?aybe sequelize has a Problem with Connection pooling,1513852883.0
thecoolbrian,"Don't forgot to append @host to your username.
Username ""MyUsername@MyAzDB"" 
Host ""MyAzDB.mysql.database.azure.com"". Also you can try setting the allowed ip range to allow all ip's for mysql.",1514374166.0
redditpentester,Do you want a starred repository? Because this is how you get a starred repository.,1513867307.0
chillerfx,i could suggest integrating npm package cctx for more data sources instead of inventing the wheel on more time :) great job,1513876440.0
__pulse0ne,"I’ve used this in the past with success:
https://github.com/claus/flac-metadata

It’s kind of unwieldy, but there’s no reliance on external c libraries (libflac), which can be a headache to work with in node sometimes. ",1513819931.0
hallcyon11,Is this a joke?,1513830362.0
StrangeSound,"Forgive me for being rude, but isn't this just a single-line function?

```
const delay = (time) => new Promise((resolve) => setTimeout(resolve, time));
```


EDIT: Well...not far off: [link](https://raw.githubusercontent.com/ethanent/poky/master/index.js)
```
module.exports = (ms) => new Promise((resolve) => setTimeout(resolve, ms))
```

At least you added a test I guess :) ",1513862626.0
RedditorFor8Years,"Please stop giving any attention to that shit stain.
I am down voting this post for that reason. There are better things to do with your time.",1513856216.0
hallcyon11,fake,1513825608.0
UtterlyPreposterous,"Your options are either:

 periodically request page, parse the parts you are interested in, diff against previous result and fire event on change

or

Use a headless browser library like puppeteer and inject code that would react to the changes

or

Go through the website code and find how it gets the updates and try to make the http requests directly to the API;",1513813099.0
omar-hydrah,"One of the ways to get live changes from a web page is by using sockets - or other old techniques such as polling and continuous ajax requests. If the website you're scraping from doesn't have a socket server, you wouldn't be able to connect using sockets. 

If they have sockets that change the web page while it's being displayed, you should spend sometime dissecting the flow of the website. I don't know how to do this with sockets (analyzing their flow). 

Maybe if you spend sometime with the network tab from the web console, you might find a clue on the structure of their website, and when it's being changed.

Your only choice is to continuously check for changes against previous values. Maybe you should save the previous results in a database so you can compare against them.
",1513822038.0
rapscallion4life,"Painful to watch how slow this guy talks about very common security issues. Didn't watch it all but I'm pretty sure he just explains 0day exploit, then shows how easy finding older exploits can be, and how script kiddies can hit servers that don't stay up to date, but it takes him 40 mins to say that. ",1513807426.0
theambiguouslygayuno,"I've been thinking about looking for something similar. I would think in exchange for mentorship, I'd be doing work under my mentor and helping them with their projects. That way both people get something out of it. Very practical.",1513820191.0
jadbox,"Message me if you can't find a mentor. I'm fairly busy, but I'll take anyone that needs mentoring but cannot find someone to help.",1513821799.0
from-nibly,I love helping people learn how to code. What time zone are you in?,1513871045.0
GreyRobe,"not a mentor, but [this](https://www.udemy.com/the-complete-nodejs-developer-course-2/) could be a cheap way to get a learning session. As far as actual coding, just try to make a prototype of what you want and go from there.",1513808614.0
WeaponizedMath,What have you done already?,1513809237.0
,"I hate receiving SMS marketing. It’s very invasive. I stay away from companies who do this because it’s rude. 

I buy from companies that I associated with good experiences. The ones that have good products and don’t hassle me. ",1513800805.0
omar-hydrah,"Just to address things in their real names, you've got two different servers running on two different ports.

A session is stored in memory. A session id is stored in the browser(cookie). React -as a front end module-, might access the cookie. But it will not access the session. The server that operates behind React, can access the session for that server. Any javascript code for React, is a browser property.


If you're storing the same session for both servers (React, and Express), you might be able to access the cookie, and read the same value for both sessions - from React.

You will not be able to access the React session from Express, and vice-versa. 

When you launch the React server, the Node.js process/(program) gets a portion of memory, and this is were the React server session is stored.

When you launch the Express server, the Node.js process would do the same step as mentioned above.

Maybe if you write a c++ module and store the memory address of either of the sessions, maybe then you would be able to access both sessions from both environment - Maybe, Perhaps. I'm not sure. I don't know how you would get the memory address for the sessions in the first place. Javascript doesn't allow conversations with memory.


You can store both sessions in a database - I read that redis is good-. And query the database from both servers to check the session. 

Or you can unify the server for both cases. What you need from React is a bundled javascript file. I don't think there's a need for a separate React server when you've got an Express one up and running.",1513791262.0
poom0nster,"> Should I be declaring my required modules inside the export?

No, although I'm not sure whether it has any real-life impact. You may want to declare your imports like most of the world does - before anything else.

> Are callbacks acceptable in smaller code? Or should I focus more on async/await?

It's a good practice to choose one style and stick with it throughout your application. Pick async/await and try to use it whenever possible.

>Should I end the connection inside the connection.query()?
>Should I even be using two connections as in the code snippet, or should I wrap it all into one and then close?

I'd think about creating the connection in your anonymous function in ""cron.scheduleJob"", pass the connection to the functions somehow and then close it after both functions are called. You do NOT want to create a new connection for every query you do.",1513766705.0
chrwei,"`s/people in tech/tech company marketing press releases/`

I'd like to see actual quotes from actual developers and designers.",1513782129.0
jzapp,"HashBrown CMS is built in node. We use express.js, but we don't really need it, so we are thinking of leaving it behind.

We generally avoided using dependencies whenever possible for the sake of maintainability. If one was used, we thoroughly assessed how future proof it was. You also learn a lot more by rolling your own solutions sometimes.",1513746324.0
raphaelarias,"My startup product (its live and we have users): https://geteducation.link

It’s a platform for the international education sector. CRM, some marketing automation, and accounting.

With Meteor too, not just Node.",1513750255.0
reeferd,I started working on my own cms using elasticsearch as database.,1513763535.0
geilt,I use it as a backend processor for my LAMP app. It manages relay data to other servers and queues up large amounts of data to send over time. Much more efficient than PHP at long running processes like that. ,1513785942.0
jrop,[nerf](https://www.npmjs.com/package/nerf) - A logger that logs to an HTML file that generates an interactive UI to browse the log entries,1513785989.0
,Game server : ),1513789902.0
jzapp,"Your beard is amazing! 

 I like the structure in your project, it seems extensible. I only have a few  comments about style:  

- You could use pointer checks and return statements in the beginning of your methods more to avoid unnecessary indentations in ""if"" blocks   
- The naming convention for libraries is a bit inconsistent. Camel case or pascal case?  
- You could use JSDoc to document your code   

",1513745975.0
squarepushercheese,"Cool. Is it possible to have multiple users with different configs? (e.g. a login or unique url that loads a different config). For example I want everyone in my office to use this with a different exchange URL. 

Really nice :)",1513756633.0
Melcma,"That's exactly what I wanted to build, a dashboard that combines all that social media stuff, but I'd do it in Electron and as desktop app with drag&droppable widgets.

Do you know if with Twitter/Facebook/Instagram API you have a full access to all private messages and posts? Or is it a public stuff available only.",1513761753.0
sysrex,Love it,1513802779.0
squarepushercheese,Awesome. Keep going! I’m a watcher on GitHub ;)  (re: the react app! ),1513886763.0
codearoni,You'd be better off describing the business objective if you want good  feedback on whether or not node is right for the job.,1513736173.0
omar-hydrah,"Sounds like you're trying to write a brute-forcer. Python is the way to go for beginners. 

You might need modules like requests, beautifulsoup and re.",1513790395.0
,[deleted],1513764639.0
marinespl,"> I have been migrating to a lighter and faster blog generator

Blog with 11 entries needs a lighter and faster blog generator. Yup, OP has the true JS spirit.",1513770405.0
adumidea,"You want ""4.x"" if you only want node 4.x",1513726096.0
HatchedLake721,hapi - https://www.reddit.com/r/node/comments/7kudvo/developing_restful_apis_with_hapi/?st=JBE6UNCH&sh=5736c369,1513721774.0
TwedditPay,"Was there a shortcoming with Express that you would like to overcome, or are you mostly just curious?

Because, if you are just curious, I would actually recommend not using any framework at all to really learn vanilla node and to know what the frameworks are abstracting away from you in the first place.",1513806072.0
djslakor,We use Koa v2 on all of our projects at work (previously v1).  It's been great for us.,1513864223.0
thajunk,Hapi is the easiest framework to get up to production ready code in node. Mixing in typescript has made my job at work genuinely enjoyable.,1513711772.0
kkogovsek,guys try fastify its on fire 🔥 compared to any other web franeworks ,1513718483.0
ambirex,"Not really, as far as I can tell

The base64 is a text representation of binary data. Many image formats (PNG and JPEG for sure) have height and width encoded in the header/beginning of the file. It would be very difficult to work with the string to change the header information in each file.

You will likely have to construct a new image out of the two images and then encode it as base64",1513695226.0
AdrieanKhisbe,"I just release 1.0 version of the configue library.

It's a config library to easily customize your app with argv, env, files and more.

A demo runkit is available at https://runkit.com/adrieankhisbe/configue-little-demo.

Feel free to post any question here, or issues on the repositery
",1513677719.0
ecares,Awesome!!,1513722449.0
texasbruce,So JavaScript will be the next Java?,1513757048.0
Earhacker,[This git flowchart](http://justinhileman.info/article/git-pretty/) has saved my ass more than I'd like to admit.,1513684888.0
llourenci,"Oh shit, I misspelled the branch name:

`git branch -m new-branch-name`
    ",1513674141.0
rotharius,"Super cool!

Maybe advocate the use of `-p` while you're at it as it will prevent some common accidents. Also, `git rebase -i {ref}` is a lifesaver for tiny mistakes and keeping the commit history clean.",1513676940.0
kodedninja,The only thing I can say is: thank you! ,1513664896.0
mgsmus,"Thanks mate, this is quite useful!",1513666576.0
mayhempk1,"That's actually pretty cool, thanks for sharing.",1513667895.0
Grimko,"Bookmarked, thanks OP!",1513670673.0
enygmaeve,Not all heroes wear capes.  ,1513677228.0
vihila,I use this all the time :),1513702151.0
TBNL,Nice guide. Why the sudo in the last example? Better not encourage sudo unless really necessary.,1513683281.0
Wanderduene,I prefer the last tip for any problem,1513691046.0
dangerzone2,Nice!  I always have to google these things and guess that the random stack overflow comment is correct.  Thanks for putting this together!,1513701330.0
MrButttons,That's awesome. Heroku is also a free option for setting up the bot. Much more easier setup than AWS. ,1513658394.0
N3KIO,"if bitcoin drops 2k in 15 seconds what do you do?

this bot needs constant baby sitting to stay relevant to drastic market shifts every single day.

you're better off doing it manually until market stabilizes...

but yeah nice bot.",1513662955.0
alc6379,"It all depends on where the session state is stored. 

If you're storing the state in a database, then it really doesn't matter: the application should just pull back the state that the user was in and keep going. At worst, you'd get a 500 error and have to refresh your page. 

If you're relying upon the Node application itself to store that information in some type of volatile cache, like in-memory, then you just lost that user's state, and they have to restart whatever process they were doing. 

Storing state external to the server is always a good idea if you're doing something load balanced, or you can't guarantee that from one moment to the next that the client will always hit the exact same server during their session. But, you definitely have to build it into your application. 

If the application is stateless, though, the client would just need to refresh the page, and by then either the Node process has restarted, or the load balancer has swapped the session over to another host that's functioning properly. ",1513635132.0
idontknowstufforwhat,My interest is definitely piqued. I will have to check this out when I am not on my phone. ,1513631033.0
sotimting,"> ""Everything You Need To Know About Parcel: The Blazing Fast Web App Bundler""

Not another one. Please - make it stop.",1513689643.0
naranha,"> Node.js might excel in terms of high throughput but that it surely lacks when an app requires heavy CPU extensive tasks. In that case, PHP is best suited for handling the back end of your web application.

I wouldn't say that's PHP's strong suit either. I think for CPU-intense stuff it still performs worse than node (with cluster). Sure in node you are blocking the main thread, but in PHP you are also blocking apache threads. I think for CPU and memory intense stuff there is no way around Java or perhaps Go. But as long you are not putting gigabytes of data in the memory and do really intense number crunching you should be fine with PHP or node. Otherwise you should probably do the calculations outside of your server processes anyway in a dedicated process or on another machine entirely.",1513601255.0
skarfacegc,"I'd pick slamming my hand in a car door over php.  So my answer would be Node.

I didn't see many 'Why this is the case' or any evidence for the claims at all in the article.  PHP is better for large things?  How?",1513617324.0
XalAtoh,I like the language and platform of Node.js. So I personally try to stick with it.,1513621852.0
djslakor,"Meh, I actually like just writing JS all day. :)  There's nothing I can do with PHP that I can't also do with Node, so i'd rather just use one language.",1513706228.0
grajagandev,Node.js is much more secure.,1513627069.0
BehindTheMath,Why do you need babel-node? The newer versions of Node natively support a good portion of ESNext features. ,1513608016.0
QuesoLoco01,"Hey!

Fellow Windows / Node admin here! Some notes from what I've learned over the year and a half I've been doing this.

There are 2 main ways to do node apps:
* Scheduled services (good for service level apps); I have found that if you rely on any form of globals... don't. It's messy on scheduled apps
* Web Service - Use Node-IIS, you can use AD to do auth for you in the background; and there's a config that I can send you to do a long-running service; otherwise it spins up and down as needed on requests.

TypeScript with VS Code is by far the easiest environment for me, and Git on W10 is actually pretty good to spin new modules out. This allows you to compile and then build services. I built a standard powershell that I include in all modules to register services if I need to; and node-powershell will allow you to write to the Event Log for debugging; which is the easiest place in windows.

Also if you're using SSIS, absolutely recommend the mssql module as it allows you pretty much native support; it's what I do with a local MSSQL dev instance.",1513659357.0
BehindTheMath,"Why don't you like what you're using now?

There are tools that can compile the code to a .exe, but I don't know if that is better. ",1513621672.0
omar-hydrah,"I got lost when you started explaining about the ""limit"" variable. Is the limit on the price, or is it on the number of times you can get a ""value""? Is it your limit, or the user's limit?

What do you want to do to the limit variable and when? How many times?",1513605800.0
iends,The script tag supports pointing to different host and ports...,1513583351.0
lau2222,Are you the owner of /usr/local?,1513599403.0
fl0w_io,"I recommend against using brew for node.js on macOS.
Take a look at [nvm.sh](http://nvm.sh/) or [n](https://github.com/tj/n).

They're different only in how they're installed and thus available on your system. I personally prefer nvm. Both are valid choices IMO and have their pros and cons.",1513586951.0
kiksen1987,"Don't really understand this blog post.
Why isn't it: Become a better developer in 2018. Most of the points aren't specific to Node.js. Good read nonetheless.",1513592457.0
Glensarge,"so basically, learn javascript",1513611396.0
TwedditPay,"After having messed around with some of those web-tech-to-mobile systems, I would actually recommend just learning how to build the damn thing natively. 

I say this because, while they can do 95% of what you need very well, getting that last 5% will involve you having to learn some native code anyway, that you will then need to work with all the other stuff you are using to build the app.",1513809075.0
DiesFuechschen,"Habe you Installer Visual Studio and Python? Node-Sass, a dependency of ionic, needs them to build it's binary.

Edit: Easiest way to do this is to install the [Windows Build Tools](https://github.com/felixrieseberg/windows-build-tools)",1513553072.0
Felecorat,Is #! still a thing?,1513546828.0
Pumpuli,"I don't know anything about Browsersync, but basically you need to respond with your index.html from all the URLs that the client side routing uses.

Quick solution is to return index.html from a 404 handler.",1513551567.0
CouponTheMovie,"Are you using Express? This will redirect all requests to a url pattern to a ‘home’ view, so that way you can hit Angular html5mode urls directly and refresh them.

app.all('*', function(req, res, next) {
    res.render('home', { root: __dirname });
});
",1513552286.0
mrcelophane,"There was some sort of NPM package that did this that I used, but I am mobile at the moment and only used it once so I don’t remember the name. ",1513541919.0
tswaters,"Sounds like this guy got word from up high that they were to replace the existing XMLRPC implementation with REST and he's been brooding about how terrible a decision this was ever since.

For my two cents, I think he's overthinking a lot of this.  Never have I pondered the intricacies of POST vs. PUT vs. PATCH.  I honestly use POST for most things and never send everything back to the service.  Is this not ""REST""?  [frankly my dear I don't give a damn](https://i.imgur.com/TFUdQxC.jpg).... As for status codes it could be as simple as ""200 OK"", ""400 you fucked up"", ""500 I fucked up"".

I may be biased here because I loath SOAP with a passion.  REST by comparison is not nearly as difficult to implement - and is considerably more loose and variable with inputs and outputs, for better or worse.  It is what you make of it... REST purists be damned.",1513566418.0
JustADirtyLurker,"I disagree with the other commenters's dismissal, i've felt some of the same frustrations. Also i'm glad to finally get a medium.com article not written by a script kiddie.",1513592386.0
ehansen,"Disagree with 99% of what I read, which was up to the complaining about PUT in REST.

Author seems oblivious to the fact that rest is vague to fit within the means of your project.  What is restful to one team may not be to the other but it still has a basic understanding between the two. ",1513533738.0
richraid21,"90% of this article is him ranting about improperly documented REST APIs and really has nothing to do with the concept of restful architecture. 

The most important part of exposing a set of APIs is deciding on a public contract for interaction, then adhering to that contract for the remainder of that major software version.  

It doesn't matter how you implement almost any part of an API, as long as the behavior is properly defined. Yes you could argue REST semantics, or industry standards or anything down that path, but the truth of the matter is 99% of the time it just doesn't matter as long as the behavior is consistent. ",1513571409.0
TomFrosty,"How does this improve upon the more mainstream solutions like Sequelize and Waterline?

(I don’t mean for this to sound combative— I’m considering using an orm for an upcoming project and am legitimately interested in how your approach differs)",1513544950.0
dotnil,"I always find myself frustrated when it comes to ORM for Node.js. The ORM solutions in JavaScript aren't very promising to me due to helper methods like `.orWhere()` or `.AndOn()`. And I'm a big fan of Active Record for its simplistic yet powerful querying API. Anyway, Leoric is my two cents of an ORM in JavaScript. All comments welcome.",1513528371.0
Nefs,"I like the look of this. Thanks for sharing.

However I've been using [ObjectionJS](https://github.com/Vincit/objection.js) recently which is pretty solid.",1513550988.0
tswaters,"Posting what I answered on SO:



You need to pass additional parameters to the callback via yieldsTo. e.g.,
    
    const getJwtTokenStub = sinon.stub()
    const authenticateUserStub = sinon.stub().yieldsTo('onSuccess', {
      getIdToken: sinon.stub().returns({getJwtToken: getJwtTokenStub})
    });
    
    // then later, 
    assert.equal(getJwtTokenStub.callCount, 1)

That said, there may not be valuable in having this stuff unit tested. You're basically stubbing out a slew of third party functionality and to do what - verify a function gets called?

Having test coverage for this might be better as an integration test - where you take out the stubs and actually hit aws with credentials specifically used for testing to make sure your app is calling everything correctly.
",1513545030.0
Seaoftroublez,"Errors are pretty generic. If you want help you have to also post the section of code where the error is raised.

From the error message itself, I'd guess you passed in an object instead of a string somewhere. Check brackets () on function calls in function arguments.",1513518344.0
omar-hydrah,"Since you said it happens when you run ""npm start"", it could be a problem with package.json. It might be a programming error, but you said the repo works well with other users.

Can you share the contents of the ""scripts"" property from package.json?",1513538196.0
cport1,"and 580,000 of them are useless ",1513522208.0
_lawliet29,And almost all of them are already in your node_modules.,1513534178.0
TBNL,Must be at least a million lines of code then...,1513531205.0
,[deleted],1513512244.0
Buckwheat469,"I hate comment sections like this. Having 600,000 packages available means you are bound to find something relevant to your needs. Whether you need it or not, sometimes it's easier to find a package that does what you need. 

Having this many packages available also goes to show the popularity of the language and how easy it is to build plugins with. 

It also shows that people are adhering to open source guidelines when they fork a package and redistribute it with their changes. This behavior is exactly what the pioneers of open source wanted and that unavoidably leads to an excessive number of packages that do very similar things.

The thing that people forget is that the npm repository does a very good job of finding the most popular project for your needs, instead of the 40 forks.",1513538552.0
T-Dot1992,JavaScript 4 lyfe muthafuckas ,1513548978.0
kidsincatacombs,/r/titlegore,1513521129.0
master5o1,"Create a ""voter id"" cookie on first visit to site that carries through registration and login.",1513482780.0
skunkreturns,"You could also do a captcha, to at least prevent automated voting. But like other comments here are saying, there's no real way to prevent abuse. The best you can do is slow them down. ",1513488516.0
tswaters,"I'm not sure how yarn does it but with npm you get access to all the modules with a bin entry in the package - so something like this should work:

    ""scripts"": {
      ""lint"": ""eslint ."", // or whatever
      ""test"": ""npm run lint && jasmine""
    }

I'm pretty sure travis has yarn (or it can be made to use yarn) so you could very well use `yarn run lint && jasmine` - if people don't have yarn it's only an `npm i -g yarn` away.",1513489667.0
jbenner,"So a quick follow up. Using `$_ run lint && jasmine` failed in my Travis-CI builds returning `sh: 1: run: not found`. This was remedied when I changed my ""test"" script over to `$npm_execpath run lint && jasmine` however.",1513476258.0
runvnc,https://stackoverflow.com/a/10813149,1513511159.0
Blue_2525989,"Just ordered this one, looks interesting.

nodejs-design-patterns-second-edition-mario-casciaro",1513483834.0
A4_Ts,"I feel like the most important thing to do before you start coding with node is know how the backend works. Know concepts like ssl, dns, https, crypto, REST, API, etc. 

There’s a certain way that computers/ phones go on the internet and then go on a website and connect to a site. There’s also a way that your browser gets and posts  information to the server. You should be able to make a diagram and draw out how that all works. 

Once you understand all that, node will come easier because you’ll be able to understand what the code is being used for in the diagram you just made. 

Ps. Also functions and callbacks  in node are a huge deal so definitely brush up on your JS if you haven’t. ",1513511403.0
styleNA,"I'd love if you end up posting on this comment if you choose one. I've worked with NodeJS and express a lot, however I definitely have a lot to learn on the subject, and I think a book would really help.

Thanks!",1513488995.0
OmisNomis,"Is there something the online resources don't give you, that you're looking for?",1513498412.0
Tvde1,"Who still thinks reading books will help?

Just start your project and google everything you don't know.",1513507247.0
omar-hydrah,"The best books for node.js and express would be the online documentations. 

https://nodejs.org/en/docs/

http://expressjs.com/en/api.html

Try reading books on oop, design patterns and web security. They would probably be on Java or c++ for the first two or PHP or python for the last one.

Programming is the same across all programming language. Javascript is a bit difficult to master, because of its loose nature.

If you're looking for books on javascript, that's another post. But you can sort books on amazon, and check the best reviews.",1513538460.0
GazZy422,"Could just do 

    res.json({
      ""firstArray"": dataChunk, 
      ""secondArray"": results[1]
    });

or make an array with 2 arrays

    let responseArray = [];
    responseArray[0] = dataChunk;
    responseArray[1] = result[1];
    
    res.json(responseArray);

or am I misunderstanding something",1513451818.0
,An array is valid JSON afaik. Maybe try with an array of arrays.,1513462549.0
techtalkftw,let’s see your whole .get endpoint,1513449112.0
_lux0n,"`res.json([...dataChunk, ...results[1]])`

Using the array spread operator",1513701986.0
_lux0n,"`res.json([...dataChunk, ...results[1]])`

Using the array spread operator",1513702244.0
fl0w_io,"It completely depends on your application generally. You can probably achieve anything with either stack. Which is better depends on how you build your application, what requirements the product has, and on your experience with both stacks.

""Better"" is always a tricky word, and in this case it's irrelevant IMO. If you feel like trying out a frontend framework, do it. If you dislike that approach, do it server side. There's no ""better"" for beginners. Usually only ""in retrospect, had I done the same product again I would have ..."", because it boils down to experience.",1513442254.0
burtgummer45,"This is a very important question!  It boils down to do I need a 'web app' or 'web site'

https://www.amberbit.com/blog/2017/9/20/why-you-should-not-build-your-startup-as-spa/

https://news.ycombinator.com/item?id=13315444

https://adamsilver.io/articles/the-disadvantages-of-single-page-applications/

My rule of thumb is if your users rely heavily on the back-button you want a website (like reddit), but if they don't, like a banking app, you're better off with an SPA.

But whether you do it the 'right way' or 'wrong way', you'll learn lot a lot about it.",1513497569.0
lobsterbreakfast,"imo, if you are new to web dev, i would totally recommend learning a front-end framework.  React and Vue are extremely popular right now and it wouldn't be bad to learn.",1513455411.0
dev0urer,"Really it comes down to what you hope to accomplish with your app. If you want a real time app with nice amimations, transitions, etc you're going to be hard pressed to do that without a good front end framework.

On the flip side, if you don't need anything fancy you can get by just fine without.

Personally I prefer one for most cases. ",1513451861.0
HiDeHiDeHiDeHi,"Use .catch for unexpected results, not only for exceptions. EG: A not-found optional avatar is expected. A not-found required profile is unexpected.",1513431085.0
Buckwheat469,"Any 200-level response should be a .then-able response. Any 400+ level response is a .catch-able error. Even a 404 should be caught because by default the response is sent to the catch block from any AJAX framework. If you were designing your own AJAX system and wanted to send a 404 response to a .then block then you'd be going against every other system, but that's your choice.

If you were making your own response types and always returned a 200-level response even for exceptions then it would create unnecessary code to parse those responses and determine the correct course of action. Of course this can be made easier by knowing exactly what an exception response looks like, but then you're creating response object lock-in. Meaning your code design is based on your response object and can't be transitioned to another response type in the same way an AJAX .then().catch() method might.",1513413486.0
idontknowstufforwhat,"I fully agree with you here, I think that should be a resolve scenario as it is within the range of expected cases. 

Rejections, if anything, should be for exceptions. In this case, failing to connect to the database and the like.

That being said, I prefer resolving in all scenarios and use the failables paradigm for flow control. I prefer the uniform return type (obj) that indicates the success/failure and either the payload/error in question. I do this for all async operations and has really helped clean up my code.",1513400379.0
1-800-BICYCLE,"I use catch if several failure modes all recover in the same way (e.g. log an error and return an empty array or whatever).

They might also be using catch if the db itself errors out and the previous dev was attempting to preserve as much of the raw db api as possible. In that case I think it’s fine to create a convenience wrapper around the raw promisified API that recovers with sane defaults in some cases. ",1513408182.0
tswaters,"If something happens that deviates from the happy 200 path, we'll throw.  We have a series of error classes that extend `Error` with basically status code defined and a key identifying what went wrong.... e.g.,  `throw new UnauthorizedError('user-not-found')` or `throw new NotFoundError('todo-not-found)` or `throw new ValidationError('todo-body-not-provided')`

We'll throw these for all sort of things... 404, 401, 403, 400.... 502 if we can't talk to external service.  Anything that isn't handled is typically a generic 500 (usually a db problem).  These errors will break out of the code path and eventually bubble up to the application's error handler which will read the status and set it on the response.  We also translate the keys into the user's language.... this keeps everything sane and consistent across the entire app.

    app.put('/todo/:id', async (req, res, next) => {
      try { res.json(await updateTodo(req)) }
      catch (err) { next(err) }
    })

and...

    async function updateTodo (req) {
    
      if (!req.body.todo) { throw new ValidationError('todo-not-provided') }
    
      const user = await authorize(req.session.token)
      if (!user) { throw new UnauthrorizedError('user-not-found') }
    
      const todo = await db.fetch(req.param.id)
      if (!todo || todo.user !== user.id) {
        throw new NotFoundError('todo-not-found')
      }
    
      todo.body = req.body.todo
      await todo.save()
    
      return {todo}
    }

and...

    app.use((err, req, res, next) => {
      if (res.headersSent) { return next(err) }

      if (err instanceof BaseError) { // we inherit everything from base class
        return res.status(err.status).end(translate(req.locale, err.message))
      }

      console.error('unhandled', err)
      res.status(500).end(translate(req.locale, 'unexpected-error'))
    })

If we resolved a blank record, we'd need to check for it and when the code path made it's way to the res.json or whatever we'd need to figure out what the status code should be and translate everything there.... far easier to GTFO if any error and let the error handler deal with it.",1513465730.0
erulabs,"In general, in any language, in my experience, don't use error handling for control flow.

Error should be rare and important. You should want to track them down and solve them - when they become part of control flow an uncaught exception can suddenly have two meanings.",1513465847.0
Eliaslfox,Have you tried setInterval?,1513382153.0
Earhacker,"You're looking for ""cron jobs,"" which are tasks you can ask the server to do at regular intervals. There's a few libraries for them on NPM.",1513381274.0
nstoddar,This might help: https://stackoverflow.com/questions/4018154/how-do-i-run-a-node-js-app-as-a-background-service,1513380837.0
cali_ZX6R,This is what I use and it works great. http://pm2.keymetrics.io/,1513381112.0
guitarromantic,Forever.js is a simple solution for this.,1513381100.0
p3t1tch3v4lr0ux,Check Supervisor or systemd if you have a *nix compatible server,1513380735.0
MoTTs_,"> Functors Definition
Following the [mathematical definition](https://en.wikipedia.org/wiki/Functor), ... In other words, [a functor] is any object we can map...  
[1, 2, 3].map(val => val * 2); //generates [2, 4, 6]

That last half is what the functional crowd often says, but that description doesn't follow from the mathematical definition you were supposedly working from. From your link of the mathematical definition, they say this:

> Let C and D be categories. A functor F from C to D is a mapping that
associates to each object X in C an object F(X) in D,

Working from that mathematical definition you linked to, category C would be `[1, 2, 3]`, category D would be `[2, 4, 6]`, and the functor F would be the callback `val => val * 2`. A functor F (`val => val * 2`) from C (`[1, 2, 3]`) to D (`[2, 4, 6]`) is a mapping that
associates to each object X in C (such as `3`) an object F(X) in D (such as `6`).

The mathematical concept may have served as inspiration, but at the end of the day, a functor in programming bears no more resemblance to the mathematical category theory functor than a class in programming does to the mathematical set theory class.

> ...using a description given by Eric Elliott (I’m a fan of this guy!):

Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/3x91ac/why_not_to_hire_people_who_like_es6_classes/cy2o6zj/)^3 from Eric Elliott. He's a better salesman than programmer.",1513448357.0
rawrmaan,"Hey node folks! This is my first OSS project and I would absolutely love your feedback!

HN discussion: https://news.ycombinator.com/item?id=15934289",1513366558.0
awebofbrown,"
G'day everyone.

This is a project I've been working on for some weeks. The idea is to explore how DataLoader works behind the scenes, while covering the knowledge of the event loop you need to understand it.

The amount of info covered felt rather biblical, so I wouldn't be suprised if there's a few errors around the place. If you find anything significant that needs correcting please ping me here or open an issue. I'd particularly like to get info about the event loop as accurate as possible.

If you enjoy it, tweet it for me :). Cheers guys n gals.",1513351651.0
superwhisky,Very impressive work! I'm gonna study this once the holiday starts.,1513444294.0
tutman96,"Hmm....
> There are other modules out there that can generate charts the server, but they have dependencies that rely on heavy graphics libraries such as Cairo. PlotlyChartExport doesn't rely on those dependencies nor does it rely on those libraries. It uses phantom.js (scriptable browser) to render a Plot.ly chart which gets cropped, base64 encoded and returned in a resolving promise.

So, instead of using a ""heavy"" library like Cairo, lets just run a fully fledged browser, and take a screenshot of it.",1513348823.0
mbejda,https://www.mbejda.com/creating-serverless-plotly-chart-exports/,1513338122.0
vivab0rg,TLDR?,1513384570.0
BehindTheMath,"In app.js:

        var marketData = require('./market/data/market-data');
        marketData(io);

In market-data.js:

        module.exports = function(io){
             io.sockets.emit('send data', {msg: data, stockinfo: stock.price});
        };",1513319138.0
Andreas0607,"Total noob here, but are you loading your file correctly?
var marketData = require('./market/data/market-data');
to
var marketData = require('./market/data/market-data.js');
",1513318993.0
bobbyjball3,"What /u/BehindTheMath is suggesting is a great way to do this (though I'd consider making the module a class since you'll likely have many methods that need the library), and is known as dependency injection (DI). It's very helpful for ensuring your classes/modules/methods are testable since you can easily mock a DI'd resource to simplify your tests. You may wish to [read more about it](https://en.m.wikipedia.org/wiki/Dependency_injection)",1513321519.0
TechnoRave,I would either go with u/BehindTheMaths method or put your socket in its own module. Then you can require your socket module in both app.js and any other module.,1513370945.0
slanger87,"Ok so I'm not sure if there are any downsides to this, if there are any I haven't seen them but what I did in my latest project is this. In my app.js I have:

    const io = require('socket.io')(server)
    app.set('socketio', io)

and then in whatever module I need it I do this:

    var io = req.app.get('socketio')

info about app.set() is [here](http://expressjs.com/en/api.html#app.set)
",1513349545.0
L33-the-3rd,"Ive built a few production ecommerce sites with Node. Works really well. Nginx server in front, proxying to node to serve data from an ArangoDB database. Super fast, easy to plug-in PayPal, finance and credit/debit card payments using official SDKs or stuff from NPM.

One has an Angular front end and a custom SPA tool which is why we didn’t use Magento or other regular CMS. 

It was tough at times, steep learning curve, but it works really well. At certain points I wished we’d used something off the shelf - but I could make it do things and use scripts that would be difficult to add on to a prebuilt CMS. Changing your own code is easier than editing someone else’s, but it’s quite a task getting there in the first place - there’s a lot involved.

It’s not for the faint of heart, but I think the end product is definitely worth it. If your project needs something specific, I can recommend putting in the effort.",1513323843.0
OogieFrenchieBoogie,"Check reaction commerce : 

https://github.com/reactioncommerce/reaction

I think the 1.0 version is out

It's built on Node/Meteor/MongoDB.

I've never used it myself tho",1513331570.0
gaiusobtus,"take a quick look at magento. There are a lot of community modules out there. it's easy enough to manage and set up.
",1513336813.0
HeyGuysImMichael,"Node is a very viable option, as long as you have *some* kind of backend anything would work. I made an e-commerce store using the MEAN stack, I haven't integrated Stripe payment processing, but the full e-commerce functionality is there (admin panel to manage items and view orders, automatically removing items out of stock, etc...)


Here is the github link: https://github.com/Michael-Mancini/mEan-Commerce-store ",1513357920.0
tuhoojabotti,"We're actually building an e-commerce platform for our company. You can see it in action here https://granoshop.fi/en/ I have written a few blog posts here https://medium.com/grano but not very helpful for you probably. We didn't choose a software product because of our various weird integrations and needs.

Send me a message if you'd like to talk about it. 😀",1513368469.0
fraud_93,"I have a question. I have a services website and I have only 3 products to sell, which means having an e-commerce platform is too much. I'm thinking about using just a button to send straight to PayPal checkout.

Is there any Node solution for things like this? I found some e-commerce solutions but they're all raw. Schema.io is not what I want either.

All I need for the sale is the customer to send a file and the payment.",1513399469.0
sumdudeinhisundrware,"Hi, I am a beginner at flying planes and have operated a few drones I bought at CVS until now. Looking to fly commercial airliners now and completely lost on what controls I should be using like rudder, throttle, stick (is the even necessary ?) etc and how exactly I should go about it. Preferably looking to fly using Airbus.

Yeah that's exactly the same thing as what you asked. If you're going to create a site that you will use to take people's money and you don't know what you're doing you are going to fail and possibly have your customers information end up on a the dark web.  Find someone who knows how to do this or take a few years to learn it yourself.",1513350844.0
dk01,This looks like every other framework. Maybe add some more info about the tradeoffs?,1513306512.0
davidmdm,"There is only one reason I wouldn't give this framework a try. You cannot opt out of having your request body parsed (I know it's not parsed per say but you know what I mean). Suppose I wanted to handle the request as a stream, then I could not. ",1513348007.0
mdchad,Thanks for sharing. Was just about to start a new project using typescript for node. Looks like this is what I could use.,1513323920.0
bstriker,"With the mysql module in npm you can do:

async query = (query) => new Promise((Ok, Fail) => connection.query(query, (err, results) => err ? Fail(err) : Ok(results)));

Or use mysql2",1513317234.0
andersevenrud,"[knex](http://knexjs.org/) is preatty neat and has promises, so you can do async/await out of the box :)",1513375817.0
64bitHustler,"Are you developing from scratch?  I have a very large/active API using MySQL based on HAPI v16 which is all promise-based and it works quite well.  I haven't moved to HAPI 17 simply because they changed everything and I don't want to completely refactor it just yet.  But for just raw API's I have been very happy with HAPI (no pun intended)
",1513399446.0
thezadmin,"I know for APIs, JWTs are widely implemented, including my own apis that I have developed. But I am still using cookies for the websites that I develop that are built on top of node.

Is it suggested to switch to JWTs there as well or do plain cookies do the trick?",1513274981.0
,[removed],1513319438.0
darkdigitaldream,"Is the signed token coming back as an unresolved promise? As others pointed out, it could be an async issue",1513323272.0
fl0w_io,"Did you move platforms, or perhaps added a proxy?",1513265456.0
Tanoshikatta,could be an async issue? would possibly explain why it worked before,1513275556.0
ecares,"the T in JWT stands for ""Token"", so ""JWT token"" is ""JSON Web Token token""
",1513284331.0
burtgummer45,"Might be secret encoding crazyness

https://github.com/auth0/node-jsonwebtoken/issues/151",1513277603.0
engnr,Any chance your clocks are out of sync?,1513313219.0
Whiplash17488,"You can install NVM (Node Version Manager) which gives you CommandLine support to change Node version.

Then create a package.json script that does something like: ""nvm use 0.12 && npm run test && nvm use 7.0.0 && npm run test""

So you chain your test script with different version changes. Most likely, its the same script you'll use for continuous integration etc.",1513259121.0
Schweppesale,Couldn't you just use Docker?,1513270648.0
bidi82,"If you are using SAAS solutions for CI such as Travis or Circle-CI
you can easily setup a build matrix to run your build/tests versus multiple versions on node.js",1513275185.0
TheOneRavenous,"I found natural is good but it has some memory overhead. Not alot and it's not a huge issue. But just know it may eat alot of memory depending on how much you process. 

I haven't used Watson so I can't say what it does and doesn't come with. But my assumption would be that it produces an output that is similar (e.g. a percentage/probablitiy) hat it has a statistic related to it's output. You're program will need to implement a threshold to accept the classification or not accept the classification. 

Also from what I remember Natural does not have a reward system built in so it will not learn from any mistakes. ",1513367613.0
BehindTheMath,https://medium.com/the-node-js-collection/the-current-state-of-implementation-and-planning-for-esmodules-a4ecb2aac07a,1513225603.0
rtorc,You can use Babel to transform your code. That's the way i do it.,1513431628.0
Jake_Jeremy,pm2 can do that.,1513207198.0
jzapp,"Do yourself a favour and use [systemd](http://nodesource.com/blog/running-your-node-js-app-with-systemd-part-1/). It comes with any Linux server these days, and it will make sure your app always restarts on exit. pm2 and forever.js are probably fine, but they are ultimately unnecessary, and not as dependable as systemd.",1513226911.0
uhoreg,"For just running a program and restarting it when it exits, a simple shell script will do the job:

    #!/bin/sh
    while :
    do
        ""$@""
    done

Run it as: ""scriptname.sh your server command"" e.g. if you call it `forever.sh`, and your server runs as `node server.js -p 8080`, then you run `forever.sh node server.js -p 8080`.

This will work in any *nix-like environment.  For Windows, it shouldn't be hard to come up with and equivalent script.",1513211017.0
djslakor,We use supervisor.  I know a lot of people use pm2 as well.  We just do it through supervisor since we watch for a lot of other stuff that might need restarting as well.  We use monit for services.,1513261954.0
ArieTimmerman,"Your code looks fine. How to deal with errors always depends a little on the framework used, but if a framework uses Promises, like knex does, this is correct.

The type of the argument `err` depends on the framework. I don't know knex, but based on the documentation I believe knex simply puts a string in the error argument. However, in theory, every type can be provided, objects included. 

I recommend experimenting with creating Promises yourself, for example using this [jsfiddle](https://jsfiddle.net/mp0vk9h5/1/).",1513201057.0
burtgummer45,"I think knex will give you a few different kinds of errors differentiated somehow, things like query format error, trying to insert a taken unique id, loss of db connection.   Play with that and see what it looks like.  Then you have to tell express how to handle that error.  You might just pass the error to the user in a template, or you want express to bomb out and handle the error like this

From: http://expressjs.com/en/guide/error-handling.html

    function logErrors (err, req, res, next) {
      console.error(err.stack)
      next(err)
    }",1513220065.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/amaaggregator] [Live WebAssembly AMA tomorrow. Ask about Node.js!](https://www.reddit.com/r/AMAAggregator/comments/7jlhyn/live_webassembly_ama_tomorrow_ask_about_nodejs/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1513192161.0
mr-developer,Did you deploy package.json file correctly ? Do not deploy your node modules. heroku will generate node modules based on packages in package.json file. ,1513187617.0
hero_complex_volcano,"I fixed it myself by going through everything updating everything and downgrading mongodb to ""mongodb"": ""2.2.33""",1513191625.0
grinde,"Try running

    (cd /home/pi/lamp/onoff/node_modules/epoll && node-gyp rebuild)",1513190187.0
johnyma22,"20 mins!  Too long to showcase one feature...

As the dude who maintained etherpad for a long time it's great to see more real time collaboration land!  

Congrats to VS team for shipping this.  

Let's hope they are using a different OT engine from what's used in office365....   When you go RT your software is only as good as your operational transform engine and MS have a terrible track record with this...",1513203438.0
nobillygreen,"I love everything he's talking about, but god do I hate the sales-pitch way of talking that Microsoft employs for everything.",1513192324.0
mattindustries,"Cooool. I loved this part of Cloud9, but never had a chance to use and have been working on my own allowing of collaboration. Love the sharing of the debug. ",1513189832.0
,[deleted],1513207945.0
digitallimit,"I have a feeling I’d use screen-sharing like Screenhero/Slack before I’d think to use this, but who knows.  ",1513190024.0
MWrathDev,"Yeah there's a reason why the distributed version control model (git) is pretty much the industry standard today...

Nice feature, but ultimately superfluous to git.
",1513216588.0
dev0urer,What's your node version and are you using a linter of any kind?,1513175477.0
littlebear001,"check fs.js  ,  check the definition of function fs.readFile, check the argus of this function. check the format of your json data. google the error messages.",1513176023.0
Ginden,"So as far as I read environment details, Node runs on single core in single process and Tomcat/Apache allow PHP and Java to use 4 cores, am I right?",1513173295.0
myurr,"The first benchmarks seem to be as much a benchmark of the specific SHA256 routine chosen as anything else, with one node library chosen where other options could have been faster.

The Node implementation was also using a single CPU core vs the 4 used with other solutions exacerbating the CPU bound nature of that benchmark.  The page also ignores the fact that await / async can now be used along with Promises as alternatives to callbacks, and may or may not come with improved performance.

I can't speak for the other tests (other than PHP 5.4 being used vs the current stable release of 7.2, and that Apache was used vs other faster implementations) but given those glaring mistakes this benchmark is all but useless for comparison purposes.",1513173221.0
TheHeretic,Why did he use a NPM module to calculate sha256? I'm sure native would be faster.,1513176015.0
luffs,He said in the comments that he's not using cluster for the benchmark...,1513192441.0
iWantedMVMOT,Using weird versions for each platform too 👎,1513194593.0
CzechsMix,"I feel like this wouldn’t be hard to implement yourself.

Not super familiar with js sort methods but other languages I know let you pass in a comparator...

    Items.sort((a,b) -> a.word.compareTo(b.word));


Something similar?",1513141806.0
fablus,Try [lodash](https://www.npmjs.com/package/lodash) ,1513147216.0
aeflash,"Lodash:


    const sorted = _.sortBy(items, 'word')
",1513151988.0
xxSwag_Master420,"Give this a try:

    Items.sort(function(obj1, obj2) { return obj1.word > obj2.word; });",1513142791.0
skunkreturns,"Nobody can answer this accurately for you, because it depends entirely on your application and what it's doing.

With that said, node can be ram hungry, and having a lot of sockets open will consume ram. So, I'd start there as a baseline. ",1513137187.0
GoblinFruitSeed,"I'd say it depends on what your app is doing and how the work load increases with every single connection.

If you know that the computation that the server internally runs will stay approximately the same regardless of how many connections there are, then you just want to worry about emitting messages (and possibly receiving) for every socket. What I mean is that transferring messages from server to client requires some CPU. So the more there will be messages to be transmitted (which happens when you get more and more sockets to service) the more the CPU will have to work to deliver that. Take it this way. If one socket requires the server to send 1 kb of message per seconds, it means that when you have 1000 people connected concurrently, the CPU has to push 1000kb per second. When that number grows too much, if the CPU can't run through all that fast enough, it slows down the whole application because nodejs is not multithreaded, so it has to finish sending before proceeding to do anything else (it's even worst if you're only using one core, more on that below)

That being said, the first thing you could be interested in is the frequency of the CPU you are hosting. The higher CPU frequency, the faster it executes tasks and the more messages it can send in a given interval of time.

However, if a high frequency still doesn't do the job and you need to support even more connections, you should consider using clusters (run multiple child processes of the application, with a potential communication between processes through Redis, so that you can run multiple tasks at a time in the same server, it's an alternative to multithreading with nodejs basically). In this case, the more CPU cores you get the more connections you can handle. And actually, if you start using Redis to communicate between processes, you might as well start using it to communicate between different servers. So it should be easily scalable from here.

Still, all that is assuming that the only sensible additional work that you notice with additional connections is in the transfer of data. If the server also has to internally work more when more connections join in then you would need to know what ""work more"" means. Is it memory that it requires more and more ? In which case the RAM is probably what you are interested in. Or is it more CPU intensive?

Anyways. Not sure what your case is exactly, buy just thought to share what I've learned through my own experience.",1513144989.0
poom0nster,"As other people said, it will probably depend on the application you're building. I'm working on a company management application, which uses Socket.io for 99% of client-server communication. This is a production screenshot of [Kubernetes container resource usage for one pod] (http://prntscr.com/hmu0hk) that has about 800 connected clients. ",1513153331.0
danielbankhead,"Do you have to use socket.io? `uws` and `ws` are much more efficient when it comes to memory usage per websocket connection.

When it comes to cores and total memory usage it can vary - it would be useful to have a plan to scale as you grow.",1513138371.0
astralradish,Doesn't work for me. I'm stuck with npm start and npm test. Npm start doesn't exist for the currently selected git repo. Looks like you need to add support for workspaces,1513160337.0
bidi82,This concept is very useful (from exprience as the IDE I use WebStorm has this built-in...),1513179752.0
irichter,"Hm, it looks like the link is broken",1513135360.0
Earhacker,"I'm not 100% sure, but I think it has to do with Node's event loop, which is [notoriously misunderstood](https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c), and I wouldn't claim to know for certain what's going on with it either.

But the real problem in your code is this:

> Some of those use setTimeout() to delay code execution (I'm retrieving stuff from an online server)

You 100% do **_not_** want to do this. You have callbacks, promises, even native async/await available in Node so that you don't have to do this. Maybe you've never used these tools before, and that's ok. We were all newbies once. But if you've seen them before and you think that `setTimeout` is the answer to your problems, close your laptop and go work on a farm. Never code anything again. You're done.

Let's assume you're using [request](https://www.npmjs.com/package/request) to get stuff from your online server, because it's been the most popular library for this job for years. A simple request takes in two parameters, the URL you want to get stuff from, and a function. The function determines what to do with the stuff you get from the URL, and also handles any errors:

    var request = require('request');

    request('https://api.chucknorris.io/jokes/random', function (error, response, body) {
      var joke = JSON.parse(response.body);
      console.log(joke.value); 
    });

Lately, Node devs seem to prefer [axios](https://www.npmjs.com/package/axios), which does the same thing but in a different way. It uses functions inside promises to define what happens after the response from the server is received:

    const axios = require('axios');

    axios.get('https://api.chucknorris.io/jokes/random')
      .then(response => response.data)
      .then(joke => console.log(joke.value));

Or, we can now use async functions and the await keyword in Node to store a variable from an axios promise:

    const axios = require('axios');

    async function getJoke() {
      const joke = await axios('https://api.chucknorris.io/jokes/random')
        .then(response => response.data);
      console.log(joke.value);
    }

    getJoke();

All of these examples log a cheesy Chuck Norris joke to the console, as if it was still 2009. None of them use setTimeout, and none of them would give me bizarre timing issues if I start firing off more than one request at a time, because all of them have their ""and then do this"" functions tied into the original request.",1513115211.0
msfwebdude,"this was my response from a previous issue

""oh, I know why this happens, I goggled for ages to find it.

Buried deep in a forum thread...

In console window, right click icon, choose properties, then uncheck ""QuickEdit Mode""

This will disable this blocking edit behavior by console window.

hope that helps
""",1513126108.0
bpadair31,"There can be a lot of weird issues with setTimeout(), especially if it is called repeatedly. Try using setInterval() instead.",1513111969.0
iends,The .mjs file extension should be a non-starter.,1513144118.0
aclave1,Thank you! This is a very detailed article. I understand that interoperability between the existing node apis will be difficult but I think that's the ultimate solution for all parties.,1513137050.0
pleerock,"I can recommend you to use typeorm if you want a maintenance heaven and all amazing benefits TypeScript provides for you, your application and your team. Its not 1.0.0 yet but we are planning to do it in next 6 month. Or maybe it will be better if you try both and make decision which one you think is better.",1513112162.0
dvlsg,"I prefer TypeORM. The type system and repositories are great. 

My only real complaint is the lack of ability to build a query straight from a standard Javascript object. Coming from C# and entity framework, I never knew how nice that was until I was using sequelize / mongoose.

Finding a way to use a connection that wasn't a singleton from `require` was important to me too. If I remember right I made it work with TypeORM, but i had to dig to figure out how to do it. ",1513114254.0
poom0nster,"I've been following TypeORM since it was first announced here on /r/node. I love the QueryBuilder, but I hate how models are defined using @decorators. It's not 2007 anymore and I don't want to create code that looks like Java/C# in Node. It makes the code way harder to read and navigate.

The worst thing is that you define a class with 8 members and it will usually take over 20 extra lines, more if you are using relations. Then every time you open that specific model file, you have to scroll a page first before seeing stuff that's actually of any interest. I wish there was a way to externalize the TypeORM part of model definition into a YAML or something. It would also be great if the QueryBuilder was a separate independent package.

However, if you are set on using an ORM and want to use TypeScript, then TypeORM is the only sensible choice. I wouldn't even consider Sequlize in that case.",1513129732.0
scaleable,"In practice, I found typeorms docs quite lacking. Hard to check whats happening under the hood, or where are the errors.

Also, single mantainer for quite a big project.",1513100755.0
dotnil,"To add some fuels to the competition, I've released an ActiveRecord-like alternative called [leoric](https://github.com/dotnil/leoric). It's written in vanilla JavaScript hence the library and your extended model doesn't need compilation (but do require node.js version >= 8).  The query api is much less than TypeORM due to the lack of helpers like `orWhere` but the ability is the same because Leoric support:

    const john = await User.findOne('firstName = ? and lastName = ?', 'John', 'Doe')
    const jsers = await User.find('language = ?', Language.find({ name: 'javascript' }).select('id'))

Currently there's no support of table migration, I'll get to that later. ",1513158070.0
poom0nster,What can this wrapper over Socket.io do that Socket.io cannot?,1513130093.0
flipperdeflip,asm? or webassembly?,1513088490.0
ArguingEnginerd,Am I supposed to see some sort of WASM module in the dev tools when I visit the example you have posted in the README?,1513092729.0
linuxenko,It is a crazy stuff I thought I will never had have to see,1513106811.0
texasbruce,But why?,1513130248.0
BillGR17,"you basically give us nothing to work on....
well all i can say is change throw to console.log(err); or use return err instead....",1513078810.0
cjbprime,No.,1513038729.0
cgijoe_jhuckaby,No.,1513043111.0
elrodrix,No.,1513153028.0
Midasx,"Very curious as to what country that is. 

I imagine you could just get a cheap VPS anywhere and be fine, unless your doing something super illegal.",1513024931.0
OzziePeck,DO server in London?,1513032264.0
,"way offshore, give hostafrica.co.za a go. Paying in dollars will make it dirt cheap. Servers are in south africa, fast as hell. and crypto is legal here. ",1513053796.0
vikyngo,"wait a minute they offer gambling licenses for just 40$ \ month ? please pm me that hosting 

by the way if you want a vps with that specs you should take a look arubacloud  just 1€ \ month",1513052442.0
BadVolt88,"You should check for piping streams. And transform stream if you want to do sth realtime. ""Through"" is a nice implementation of transform stream. ",1513032261.0
,"Your best bet is stream piping. Go have a look at the nodejs documentation with regards to piping a read stream to a write stream. This will also give you the ability to listen for the 'data' event on the read stream so that you can pick up the chunks it is reading. From there you can either write it to file using a method like you proposed or, you can create a read stream from a file or other source, like your loop and it will just keep writing to the file until you stop it. 

Here is the link that helped me get it: https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93 ",1513061782.0
ArieTimmerman,"First, you should find out how the specific websites processes logins and secondly, how it stores your logged in status.

Though there are multiple ways to process logins and to remember the logged in status, most website let you login by sending an HTTP POST message with the username and password. If the credentials are valid, the website returns a Cookie in the HTTP response. Your web browser, automatically sends the cookies related to the domain together with every new HTTP request, and as a consequence, the website can track your logged in status.

Some website don't use cookies for storing the logged in session, such as single page applications. Also, not all websites use HTTP POST data for sending username and passwords, but use the HTTP Authorization header, or possibly other methods as well.",1513026537.0
mrskitch,"Don’t use phantomJS! Use headless Chrome and a library like puppeteer (https://github.com/GoogleChrome/puppeteer). Its API should lend itself well for scraping (and potentially saving cookies so you’ll keep your auth session).

If this is something you’re looking to productionalize you might also find https://browserless.io/ useful as well (full disclosure I’m the author/founder of that).",1513039610.0
BadVolt88,Just check for Passport module. There are lots of tutorials how to use it with cookie-store or JWT,1513032514.0
Notoyota,"I would keep everything as-is, but only *add* node for your real-time needs. Nginx as a proxy. Why rewrite everything to node when your current system allows you to work efficient? What else (besides the real-time stuff) do you *need* node for? Be a polyglot :)",1513025127.0
TheOneRavenous,"You'll want a server frame work so choose one of those. The main one is Express.Js (light weight, not much built in, seems like the fit for custom stuff). There's also two other main competitors Koa.js(also light weight) and  Meteor.js..

Eventually you'll want a build package that wraps up your apps for production. The defacto these days is Webpack ( it will have over lap of your existing app management system most likely so see if this is something you'll want).

As for migration, get one of the server frameworks setup. (I'm going to give examples in ExpressJs as I'm familiar with it).

But generate a REST API for managing your stuff. create URI that is a copy of one of your php methods, then slowly add more and more URIs that replicate the different functions of your management system. Eventually you'll end up with a bunch of routes that are used for you program interface. 

You can think of a route and ""middleware"" (express context for routes) as an individual application program interface. Eventually with your build process and testing you'll have an entire system to interact with. 

Middleware becomes the meat and potatoes, becasue you write modules of JavaScript that are mirroring the methods in PHP that you want and you export them in JavaScript. 

The other way is just build a giant node module with a bunch of sweet dependent modules that all replicate your system. 

Just remember someone has probably coded most if not everything you'll want to use.

Check for security issues on you dependencies using Snyk.

Last note I understand the want and need to code your own things since alot of modules are built for the authors use case and I've found alot of the time it comes with a bunch of fluff and crazy abstractions of Node Core Modules. So if it looks like it's unnecessary it probably is and you can most likely get away with coding a module your self using node core. Definitely less lines of code and way less dependencies. (I do this often as most modules rely on some weird useless abstraction for on section of their modules)",1513012838.0
digitil,"Sorry didn't read most of what you wrote since it's a lot of words for me.

I'd question whether you really need the migration, but assuming your premise, I would start by separating out the frontend into something not php dependent, so it won't have to change when you switch to nodejs.",1513012162.0
cahva,Why not separate that one thing to its own process?,1513009227.0
,[deleted],1513008253.0
Schweppesale,"> There is the NODE_APP_INSTANCE environment variable that is used to make a difference between process, for example you may want to run a cronjob only on one process, you can just check if process.env.NODE_APP_INSTANCE === 0. Two processes can never have the same number, its still true after pm2 restart and pm2 scale commands.

http://pm2.keymetrics.io/docs/usage/environment/",1513072953.0
Mononz,"I think I have a similar setup. I decided to put that method as an endpoint in the API and used the service https://cron-job.org/en/ to trigger it. Only one of the instances should then pick it up. 
Was an easy alternative to writing schedulers etc, also saves the responses as history so you can log and errors and such. 
I personally use it to generate a random chat topic everyday at 10pm, and also flush out some old database data every 15mins.

Side note, I never looked into it to see if it was a bad idea or not, but you don't have to restrict to one instance per cpu. I'm running 2 instances on a single cpu with pm2. Could prob go more but not enough traffic for me yet.

Grats on getting a project popular! :D",1513159710.0
scaleable,"I dont know how is the state of it right now, but in past times node.js cluster module had known load balancing inneficiencies",1513006788.0
DetroitEnglish,"You can easily determine the master process via environmental variables pm2 assigns to each instance 👍

Example here: https://github.com/Unitech/pm2/issues/2035",1513016397.0
robinsio,"If you have access to a MongoDB using agenda as a distributed task scheduler would work well, all your nodes would then work together to distribute the job(API calls). This might be overkill but probably the most enterprise option.",1513037085.0
ecares,I fail to see the link to Node.js,1513015228.0
Gonzaesc,Hi everyone! Hope this can help someone to help logging async requests in the REPL.  ,1512997968.0
jeff3yan,"In terms of filtering you can try out [objection-filter](https://github.com/tandg-digital/objection-filter), I’m the author. In terms of REST scaffolding, I’m doing those all manually but typically with some self written helpers.",1513004315.0
OzziePeck,Just use what ever your more comfortable with. ,1512987739.0
lord_jizzus,Written a bit like a listicle with several mistakes. Feels like a cheap attempt at promoting the domain without providing real value. ,1513010455.0
,[deleted],1512971401.0
SchwarzerKaffee,"Websockets and ability to easily control pins on a Pi.

I mainly use Python, but Python can't compete with Node in these respects.",1513006322.0
Wensosolutions,Nice article..thanks for sharing the link..,1515585641.0
spruce-bruce,"Unfortunately the answer is ""it depends"" and ""yes probably you can integrate WordPress with whatever""

With the information you've given its impossible to tell whether not your developer is ripping you off. Probably not.

He/she probably just realized the truth that building a custom blog in 2017 is stupid",1512952033.0
BimboDickins,"It sounds like they're proposing effective solutions. I would assume a rip off would suggest building a custom blog instead of just using WordPress which seconds to set up.

Why use something other than WordPress for the blog?",1512953582.0
fuzzyblender,"So, ultimately I don't think that you gave enough info to give a helpful answer.  That said, here's some thoughts on your questions:

Am I getting ripped off?

Hard to say; if you are paying $500 probably not...if you are paying 10k...maybe.

Could this work?  How well does Wordpress integrate with a node application?

Yes...BUT, it depends on what your requirements are.  WordPress has a nice REST API that a Node app could use.  


Ultimately, it comes down to what does your contract say?  Does it dictate HOW it works, or just the result?  If is just the result, then trust your developer, and wait until the end and make sure it fulfills all your requirements.

It sounds like you already don't trust your developer.  If that is the case, you should find a new one.

Again, I don't have anywhere near the info I would need to be super helpful, but I know when I have done side work, when the client tells me their initial requirements I offer some suggestions...as requirements ""evolve"" (and they always do) I think of different wants to complete the goal.  IT sounds like your developer (as all of us) is trying to balance giving your what you need, and maximizing their profit (perfectly reasonable).  As long as your requirements are fulfilled (and you are happy)...who cares how they do it?

That said, I would question the mix of a PHP app + MEAN stack app.  Not knowing your project, I would wonder if a custom WordPress Plugin would do what you want.

Just my $0.02...or $0.0263 at a gas station.  :)
",1512959271.0
doshermanoos,"Are you talking about two separate things:

* web application
* blog / landing page

Because if you are then, yes, this makes sense.

The blog / landing page should be Wordpress as that's easy for you to update / good for seo. It will probably contain a link to the register / login page of your web app.

The web app could be done with numerous stacks but MEAN is a good choice (although javascript devs can be expensive. If this is an MVP I would strongly recommend something in PHP as your dev costs will be considerably less).

As for 'integrating' Wordpress and MEAN (using both together in an app): no. This makes no sense",1512962895.0
_gingus_,"Given that your only reply to any comment thus far has been, ""should I ask for a discount"" and the information you've supplied; no you should not. You sound like you've entered into a contract with someone who now has buyers remorse.

When you purchase something that doesn't exist yet, you need a clear and defined sense of what you want. You're paying for someone's time and experience. There's generally a market rate for that + a guess at how long it would take to perform the task when you make a quote.

What did you really ask for?
What are they actually providing?
Was the agreement on commission?
Did they agree to 100% custom, or is giving you a WordPress site 100% OK? 

To answer the question you're really concerned about, no you shouldn't ask for a discount. You didn't understand what you wanted and later found out that it was (a) way easier than you agreed to pay for OR (b) didn't understand how common the thing you wanted for was. ",1512969227.0
mrm8488,"In the last big project I worked, blog was a link to a wordpress blog. The rest was an API using Node.js + Express. Do not reinvent the wheel. But do things as flexible as you can. The API allows you to create different clients (web, Android, iOS). And another question to your team. Why to use MongoDB? Most of times it because the integration with the nodejs ecosystem is easier but you should only use NoSQL databases if you really need it. Many time you can use a SQL like database with the great ORM ""Sequelize"".",1512952499.0
4ever_youngz,"They can be pretty interchangeable. WordPress now has a pretty slick WP-rest-api if you wanted to use the Wordpress data even more for anything outside of the WordPress environment.  I’ve done a lot of cool stuff using WordPress and a MEAN stack application together. 

There is nothing wrong building two separate solutions, usually. However, WordPress, depending on your problem, could be used for ONE solution. With the WP-rest-api, WordPress really doesn’t have many limitations anymore. There is a reason why the platform itself powers 26% of the worlds websites. 

I would suggest asking WHY they are choosing the things they are. ",1512958771.0
country_dev,"You would need to provide more information for me to give you a definitive answer. 

Do the two ""need"" to be integrated?  You're kind of mixing paradigms here. The MEAN stack uses Angular which is a SPA. Wordpress is server rendered technology.  Why not keep the 2 separate and just use a sub domain. Like blog.mysite.com for the blog and mysite.com for the main app?  I would personally keep the two separate.  I don't know what you mean by ""integrate"" the two.   Doesn't really make sense. 

I agree with most of the comments here that it would be very stupid to build out a custom blog application.  That would be very time consuming and expensive.",1512963248.0
marvinfuture,Honestly yes. Wordpress operates on a PHP backend. Your MEAN stack performs more like a app. For them to say they will build you a MEAN blog and then turn around and say they want to use Wordpress means the developer is trying to take a shortcut,1512952983.0
,You can't cut a cost by more than 100%.,1512897747.0
Floppey,Cutting costs by 100% would mean it's free. So cutting them by 400% means heroku now pays you 3 times what you used to pay them?,1512897850.0
,[deleted],1512910155.0
tobsn,by not paying overpriced heroku and using any other service? ;),1512905644.0
largepanda,TL;DR: It's another deploy-it-yourself Heroku clone that runs on a VPS.,1512897660.0
Zaxuhe,Nanobox is also a great alternative to solve this issue ,1512897011.0
identicalBadger,So Heroku is paying the author to use their service? How can we all get in on that?,1512925433.0
equallyunequal,"Lots of negativity in here... this sure is a lot better than my current setup of manually running letsencrypt, configuring nginx, initing bare git repo, cloning, creating post-receive hook, etc for hobby projects. Certainly not production ready but not a bad setup for tinkering.",1512932532.0
lord_jizzus,By learning how to set up a server and push your stuff to it?,1512924728.0
Skankeer,"Why all the hate ? It has an advantage of being self-hosted, with decent gui and cluster support, nice job. ",1512928121.0
kasra85,I meant to say 4x :/,1512898159.0
NoInkling,How does this compare to Dokku? That's the one I seem to see touted the most.,1512955415.0
z4qqq,So happy to see all the Hungarian editors in the list!,1512877424.0
openodeio,"I'm one of the main developer at opeNode. There is no catch, our price are really as shown in the plans page! 

Note: We will soon add more locations (currently only Canada), decrease the cost, and allow bitcoin payments.

",1513083106.0
cgijoe_jhuckaby,"I have not used them, but this sounds too good to be true.",1513043382.0
Trance101,Have a look into websockets. The socket.io module makes this easy in node. [socket.io](https://socket.io/),1512834798.0
omar-hydrah,"We all were beginners; we all asked/searched for a lot of questions.

Have you thought about using ajax after the page has loaded? It seems like a good solution based on your scenario.

Check out the net ninja channel on youtube. On that channel, you will find an ""asynchronous javascript"" playlist. But be aware and don't use promises. Old browsers don't support promises, which are a ""2015"" update as I remember. Instead, you should rely on callbacks.


    $(window).onload = function(){
        getData(function(data){
            addDataToDom(data);
        });
    }

    function getData(callback){
        // Load data from external api using ajax request (usersArray)
        // callback(ajaxResult);
    }

    function addDataToDom(usersArray){
        // Add data (usersArray) to the webpage
    }",1512833758.0
impost_r,Ajax,1512833775.0
humpysausage,"Pretty sure this was posted a week ago!

How is it different to Joi or JSON Schema?",1512858870.0
LetReasonRing,I'll definitely be looking at this for future projects. ,1512875671.0
Ianxcala,Looks nice. Did you make a speed comparison with other validators?,1513007987.0
moneymoneyandmoney,"Very resourceful, thank you op! ✨",1512826055.0
burtgummer45,"Redemption from Callback Hell
https://www.youtube.com/watch?v=hf1T_AONQJU",1512836580.0
vv1z,"I think you need to ask yourself what it is you are trying to validate.  I see no reason why you would want to actually validate twitter's API,  so you will likely want to mock that response. Once mocked you will find the assertion is well within the 2 second threshold.",1512823503.0
omar-hydrah,"Have you tried using express? https://npmjs.com/package/express

Express's method of serving public files:

    app.use(express.static(""./public""));

This would instruct the server to look for any publicly served files inside the ./public directory.

In your html you would write:

    <img src=""/public/image.png"" />

And your image would be magically served. Without any extra code.


If you don't want to try express - or other frameworks, you would have to write a dedicated request handler for every image, and serve that image as a file. Actually every public file you request/include in your html, you would have to make a node.js request handler for it.",1512818429.0
e_to_the_pi_i,"Node is not a front end technology.  Node is a platform for running JS outside of the browser with access to all the standard IO you'd find in a general purpose language.  All of Angular's build tools are written in JS intended to be run on node.  You could theoretically (although I doubt anyone has actually done it) write an Angular app without any build tools but it would be extremely ugly and difficult to work with.  Not to mention you'd lose all the benefits the tooling provides such as static type analysis, tree shaking, module loading, etc.",1512809256.0
uNki23,"Using Node.js as backend and Angular for the frontend you always write one language: JavaScript.
Thus you can reuse many of your snippets, techniques, tools and so on.
For me this is THE killer reason to use Node.js besides the fact that it's just awesome: easy, fast, flexible, nearly no limits. npm has everything you need and the web is full of help and has already answered any question you could probably ask. If you already know JavaScript you just have to learn some frameworks like express and can deploy your backend with rest apis in no time.

Cheers",1512815292.0
yodasbear,"Well, you don’t. Just use the spring api with your angular app instead of writing a node api that connects to the spring api. You can serve the angular app with just an ngnix.",1512818716.0
,[deleted],1512799474.0
Whiplash17488,"As the other have pointed out. A lot of the Angular2 tutorials come with the assumption you use node to transform the TypeScript into minified javascript. Or you use node to enable a live-reload-on-save with Chrome. I've used these node tools in the past to create an angular app and then just uploaded it to my apache webserver, so no node required.",1512918653.0
,[deleted],1512772177.0
elrodrix,"greats,",1512788004.0
1-800-BICYCLE,You should be using steams for this. ,1512966092.0
msudgh,"I think its relate to 'including' templates in ejs.
https://stackoverflow.com/questions/46309842/could-not-find-include-include-file",1512792725.0
omar-hydrah,"You're using:

    <%- include partials/file.ejs %>

What works for me is to just use:

    <% include path/file.ejs %>

Have a look at this file for example:

https://github.com/Omar-Hydrah/maktup/blob/master/views/home.ejs

According to the documentation, the way to use the dash is like this:

    <%- include(""path/file.ejs"")%>

https://www.npmjs.com/package/ejs

Update: The full path should be written; ex: ""./path/file.js"" 

2nd update: (relative path not full - my mistake)",1512821738.0
omar-hydrah,"What output do you have from react? I suppose you've not written React code yet.  

React in itself is not a server. After building/compiling a React project using Webpack or what have you, you would still need an express server (or other servers), to serve the React bundle.js file.

For deployment, React isn't really ""deployed"". It's a simple javascript file that will be included in your html document. Express will serve this React bundle file, just as any other file.


If you're looking for resources, I recommend checking out ""The net ninja"" on youtube. ""Traversy Media"" and ""Academind"" are also good.

Otherwise, you can check some articles on scotch.io

This is an example of a react app served by express:

https://afternoon-cliffs-22690.herokuapp.com

Source Code:

https://github.com/Omar-Hydrah/world-cup-api

To not complicate things, I have the main app.js (server) file, a public, a views and a routes folder.

The React file (bundle.js) is located inside public. When a user visits ""website/"", I accept his request in my routes/home-router.js file. I serve the home view from the ""views"" folder. The home view requests the bundle.js from public; and this is how I integrated React with Express.",1512742299.0
,[deleted],1512740989.0
TheOneRavenous,"Remember Node.js is single threaded so it only uses the capacity of one CPU. Where as python will with tensor flow will utilize all the CPUs. Basically yes you can do it in node. But it's not efficient when you can run a python server. 

That is to say it might be worth while to use node as an API interface to send emails to the trained neural network. 

Also understand that if you use a feed forward network (FFN)then you have to figure out how to effectively pad the data so that it's all the same dimensions or the network won't read the data correctly. 

If I remember correctly though long term short term (LSTM) networks are able to over come this hurdle because you feed it all the data (input and output) all at once. ",1512767931.0
BadVolt88,Start from brain.js,1512746354.0
adamhighdef,Wrong place,1512763587.0
moneymoneyandmoney,Definitely gonna check this out thanks babe ,1512724162.0
Quaddepo,facking love this! need contributors?,1512752823.0
DrSghe,This will be truly a life saver. Thank you for your amazing work,1512739653.0
OldboyNo7,Looks awesome! I will give it a try this weekend.,1512755693.0
mattindustries,"I just paid for Bee Invoicing...but this looks like it could be nicer, at least with it being open source I can make changes if need be. ",1512762139.0
Hakim_Bey,"I animate a community of almost a thousand freelancers, this is sure to be useful to them :)

Is it windows or Linux compatible? ",1512810517.0
DrSghe,"No, I was just thinking of contibuting somehow and I was looking for what to fix!",1512811539.0
DrSghe,"Sure, I'll finish my exams and I'll be yours",1512813234.0
mbael,Nice work. Well done :),1512822713.0
lequochung,"Guys, [Manta is now on Product Hunt](https://www.producthunt.com/posts/manta)! If you find the product useful, an Upvote 👍 would mean a lot to me. 🤗 

Thanks! ",1512878654.0
Evander12345,"Wow this is really cool, been waiting for a good tutorial like this one.",1512708295.0
marune,"Minimal thing you should do is to replace console by winston everywhere and having winston append to a file or stdout itself redirected to a file. You can use debug vs info to filter out stuff you don't want to log in production.

",1512670070.0
richraid21,"Check out [Pino](https://github.com/pinojs/pino) if you know, for a fact, that Winston is too slow for your needs. Furthermore, you can enable `extreme-mode` in Pino which will batch writes to the output stream. ",1512677993.0
jrop,"In our case, we have some batch jobs that run daily and my requirements were as follows:

* create something similar to `console.log/warn/error/etc` that can be a near-drop-in replacement
* have the lib serialize it's output so that it can be viewed later (or have the console output emailed out after program execution)
* be able to view the log output in a similar fashion to the way Chrome's DevTools displays console output

The solution I came up with: [nerf](https://gitlab.com/jrop-js/nerf/).",1512672879.0
MUDrummer,All our stuff runs in docker swarm with GELF logging so we just write json to the console via Winston and it all shows up in our ELK stack. Finding exceptions across our whole stack has never been easier. ,1512698034.0
1-800-BICYCLE,"`bunyan` has worked out really well for me since it’s JSON-based so you can add any extra info you want without screwing up your log parser.

Whatever you come up with, I’d recommend logging to stdout always and redirect to wherever using your process management tooling. If you’re logging to a file, don’t forget to set up `logrotate` since doing any kind of analysis gets incredibly difficult with a gigantic log file. ",1512710232.0
cooliobing,"> should I be logging using a winston logger?

If you're using it already, there's little point in moving away from it. It's a great library and works well for most use-cases.

I prefer to log every possible code branch, every major conditional check with `winston.verbose`. This means the code is quite verbose: no ternary operators, no single-line `if` conditions. You can also think of log statements as a way to document your code. When you go back to fix a bug, you should be able to understand what's going on.

You can use additional winston log levels (verbose/debug/silly) to log stuff you don't need to ship to Graylog and restrict the Graylog transport to only get error/warn/info levels.",1512691196.0
Thommasc,Bunyan + express middleware + promise catch.,1512720158.0
panbhatt,"Try PINO, the fastest logger and provides almost every functionality. ",1512755364.0
bykecode,googleSearch! best logging practices for node ,1512664955.0
AUTplayed,"cool, although I don't think the health checks are useful because you could just add you own healthcheck-routes on the server without this library.",1512656298.0
kevinkace,"I've recently been using `webpack-dev-server`, which you kill with ctrl+c, but the process is still orphaned/running.

Is this useful here?",1512659079.0
1-800-BICYCLE,"> The process manager you are using (no matter if it is Heroku, Kubernetes, supervisor or anything else) will first send a `SIGTERM` signal to the application to let it know, that it will be killed.

You can't get away with just `SIGTERM` for a node.js app. Relatively common scenarios can cause `SIGTERM` to put the app in a mixed state, including hooking into `process.on('exit')` or calling `process.exit()` while `libuv` is blocked (instead of `process.abort()`). Definitely need to have something like a timeout with a `SIGKILL` fallback.

We use a combo of `forever.js` or `systemd` and Nagios for this kind of thing at work, but the integrated approach for containerization makes sense. It's good to see some alternatives to `forever.js` and `pm2`!",1512694507.0
Geldan,"If people want to use this now, with minimal fuss, it's pretty easy to get webpack setup to work with dynamic imports: https://webpack.js.org/guides/code-splitting/#dynamic-imports",1512694666.0
self_refactor,What is your reasoning for not using Yarn? I just don't see a single feature where NPM is better.,1512672153.0
OzziePeck,But why?,1512644460.0
StrangeSound,This looks...pretty cool! I'm going to try it out :),1512656317.0
tswaters,"It's not completely forbidden to put node_modules in `.gitignore`.  In open source projects it makes sense - but corporate closed sourced applications it may not.

* keeping actual changes to node_modules, you can bisect the repository to audit changes to node_modules to see when a problem was introduced.

* If you don't trust `package-lock.json` or `yarnfile.lock` and want to be sure you have everything locked 

* If you have patches in your node_modules and don't want to host a local npm repository / git instance that npm can talk to.

Also, consider you add node modules to a global gitignore and commit your repo without it in its gitignore... someone clones without that change in global and now they see node_modules in list of unchanged files.  You can't guarantee consistency with this sort of thing.",1512614403.0
V1talogy,"I sometimes run into the problem that the cloud distribution which should auto update packages does not do its job correctly. I think the problem is with npm being unreliable in updating. The result being that the local deployment master has different content in node_modules than the cloud distribution. I can imagine that if I don't rely on the auto update of packages based on package.json but include node_modules in the deployment git repository this problem could go away.

So there's a case imaginable where you distribute from git but can't rely on auto update of packages or don't have it available.









",1512604582.0
skarfacegc,"I wouldn't do it globally.  the .gitignore is part of the project's repo. Ignoring (or not) node_modules is a property of the project, not a property of the OS you're developing the project on (like .DS_Store).

You likely want to avoid having this happen ... new developer checks out the repo, adds a file, then executes ..

    git add . && git commit -m 'new file'

If your ignore of node_modules is global, congratulations, you now have 1billion new files in your repo.  If it's part of the repo then this wouldn't accidently happen.
",1512678104.0
,"I personally use a global gitignore in my home directory

it contains 

    .atomignore
    *.swp
    *.swo
    
 
and I ran this so that git would recognize its' contents

`git config --global core.excludesfile ~/.gitignore`

I just use it to exclude files that my editors use or create. I like to add `node_modules/` to it's the repos gitignore in case somebody else uses it or I use it on a different computer. It just seems like the right solution. No weird side effects / less configuring. Also committing node_modules isn't so bad, as the other commenters mention.",1512801630.0
inabahare,"I personally gitignore my node_modules because my packages.json uses the specific version of each package, so I can just npm install later on",1512638291.0
IwazaruKyu,"I like [node-fetch](https://github.com/bitinn/node-fetch) because it’s consistent with the browser’s Fetch API (w3c standard) and it uses Promises.

Here’s an example from the Readme to get Json data from an API :

    import fetch from 'node-fetch';
    
    fetch('https://api.github.com/users/github')
    	.then(res => res.json())
    	.then(json => console.log(json));

And here is a tutorial for the Fetch API : https://davidwalsh.name/fetch",1512605955.0
Earhacker,"You want to look into the [request](https://www.npmjs.com/package/request) library, as it's the simplest way to do this. The example code on NPM tells you everything you need to know; feed it a URL and a callback function to deal with the response or error.

If you prefer promises over callbacks, there's also [request-promise](https://www.npmjs.com/package/request-promise).",1512601819.0
SomebodySocks,"npm has been updated to v5.6 recently, which fixes the incompatibility. you can get it with `npm i npm@next -g`",1512598002.0
dk01,"Npm 9 isn't LTS, thanks for being a guinea pig while I chill on node 8. 

Seriously though it's open source, just give everyone time to work on the issues or open a PR. This is a cheerocracy.",1512609409.0
unscholarly_source,"I swear solely by the even versions of node only, as they're the only ones with LTS support if you follow this release chart: https://github.com/nodejs/Release.

I like to think of the odd versions as experimental as they iron out all the kinks before the next release.",1512611076.0
ndboost,I don't have any issues...  Then again I use NVM.,1512608583.0
MrNutty,Everything works for me. Nothing ever fails. Ever. ,1512623312.0
Triforcey,It's worked excellently for me. Sure you updated NPM too?,1512627809.0
N3KIO,"moved away from npm, use yarn now, it just works.",1512601620.0
Patman128,"> Why is there so much silence regarding the still unresolved incompatibility between Node 9.x.x and npm? I don't see any articles or posts about it and my questions on node/irc received no response.

Had this issue due to the Node version manager I was using. Solution was to uninstall it and just install the official Node build from the website with NPM included. The version of NPM in that seems to be patched to work with Node 9.",1512677786.0
feature_creep,">Why is there so much silence regarding the still unresolved incompatibility between Node 9.x.x and npm?

Why are you using 9.x.x? Just because it's there?? Because it's shiny?
 If so, then that's a terrible reason.
",1512627503.0
lordmyd,Looks like it's still not a standard release. My npm was so borked I couldn't `npm i -g <anything>` so I had to resort to `yarn global add npm@next`. What I don't get is how so little noise has been made about this pretty major WTF.,1512598737.0
coolcosmos,It works for me.,1512602876.0
erulabs,"Wasn't aware of breakage in Yarn since the 9.x branch was released as stable? In any case, ditch NPM.",1512606308.0
iends,I wish there was more transparency in pricing. ,1512609528.0
Fuzz_Stati0n,Excellent UX,1512673149.0
,How are you actually using this code? Where is it initialized?,1512593976.0
PlainReality,Couldn't you just remove that field at the API level?,1512572778.0
oiirme,"
if I understood you correctly. depending on the database you're using, you can either set up the column to automatically add a timestamp on create/update (eg: DEFAULT CURRENT_TIMESTAMP in mysql) or pass now() as the value to knex when you update",1512578424.0
richraid21,"I would really like to discourage you from doing this in your application model. The most important thing for long-term applications is data consistency and having a valid representation invariant for each record.  

I would suggest using triggers, but if you are intent on using the app model to manage the dates, at the very least add a `check` constraint to your table that enforces `modified != NULL & modified >= created`

Also, replace your migration teardown from `dropTable` with `dropTableIfExists` in case you ever need to force migration rollbacks. ",1512583797.0
maxwellsmart84,"So Knex has a function for this off of the connection method.  You can do .table.timestmap('colname').default to(knex.connection.now())

",1512835007.0
rotharius,"Great article. Nice to see some clean and well-thought-out node.js code out there! I'm currently researching the same and thinking about starting a blog.

I really think decoupling of services (microservices, bounded contexts), temporal decoupling (replayable log) and spatial decoupling (replication, isolation and containment) are the future. This extreme flexibility is part of what the whole Reactive movement is all about which is taking the Java world by storm (the Reactive Manifesto, not necessarily Reactive programming,).

For the event store, one could consider Greg Young's EventStore or some replayable log-based bus like NATS Streaming or Kafka.

",1512559069.0
adymitruk,"Interesting to see ""onioning"" being mentioned. I use it to also describe the prioritization of what functionality to write first. Then, onion the other functionality around it. For example, if the core of your application and differentiator is having the cleanest hotel rooms, onion out from the ""room was cleaned"" event in your hotel booking system. This contract nature that event sourced systems give you is usually over looked.",1513014593.0
Thommasc,"As a matter of fact, it's generally considered the worst possible solution to switch your entire project to a different architecture, language and framework.

Microservices would only works if your team is already distributed by 'teams' that could spend lots of time on each independant services.

If you team is small or just yourself, a monolith is the way to go.

What would you gain from node and the js ecosystem that you could not achieve with Zend and the php ecosystem ? Shed some light and I'm sure I can find a php solution for all your issues.",1512550050.0
flashbck,"It sounds like you would be interested in a [strangler application](https://www.martinfowler.com/bliki/StranglerApplication.html). I've done this a few times and it can be very easy to accomplish. You can make the transition seamless to your front end application by using path based routing in Apache, Nginx, AWS ALB, etc.

You'll need to consider where any state is being managed by the original application that would not be accessible by your strangler application. Data that is persisted in session data is an example. Cookies will persist across applications because the domain name will be the same. You can easily replace session data by either storing that data in a cookie or storing the data in an in memory cache like redis and the redis key in the cookie.

If you're particularly fortunate, the PHP application is well covered by useful and valid tests. If you're not fortunate, you should start the entire process by creating functional tests that can be applied to the existing application and the new strangler application.

You never mentioned what scale of traffic that your application is dealing with. Making the decision to convert a monolith to distributed services needs to be carefully considered. Unless you have a specific need that distributed services address, then I wouldn't even consider all of the overhead that you need to take care of to manage it well.",1512579315.0
ArieTimmerman,"If you decouple the frontend from the backend, and you make all your endpoints accessible via REST, it becomes easy to slowly migrate endpoints one by one to new software running on node.js.
In fact, I find it best practice to use a micro services architecture. You could protect your endpoints using OAuth2 and for the time being, use your current PHP Zend application as the authorization server.",1512580396.0
sniegoman,Thank you all for all the opinions and suggestions I will look into it and select something that will fit my needs best.,1512584740.0
Max_Stern,"You should do it from scratch. Like previous commentator stated, switching language and overall platform means that you will end in absolutely different environment with own best practices, tools, solutions for problems, etc. 
I only think that you have to recreate your app, then fill it with needed data, test it, and switch to using it at some point.  
But I doubt that it's worth it.  
Why do you want to go to Node? ",1512556076.0
ndboost,"I have to run to a meeting but this looks interesting. This is basically just an API with a ""admin panel"" for the backend, right?",1512576014.0
mycall,Time to do some big upgrades tomorrow.,1512536876.0
IwazaruKyu,Why don’t you create a single page web-app that consumes your API just as your mobile app does and handles things like redirects on the client-side using JavaScript ? This way you only need one consistent API for your web app and your mobile app.,1512548045.0
stack_pusher,"Hey, Node is great about allowing us to have a lot of flexibility when building services. For an API I️ would recommend implementing a sorta MVC pattern. Consider the following:

Separate your API into models, controllers, and routes. Your models are your mongoose schemas and represent how you want your stored data to look. Your controllers will interact with the models to create them, update them, and delete them. Your routes will make sure the right requests get to the right controllers.

In my opinion, the real goal of an API should be to have a maximum of four actions for each resource. Those actions corresponding to http requests ie. create => POST, read => GET, update => PUT, delete => delete. 

Check out this basic and broad tutorial: https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09

Let me know if this was helpful or if I️ lost you.",1512528087.0
hagnerd,"I’m not very familiar with mongoose but best practice is to set up an Object Relational Map. Abstract the database logic, and tie it to JavaScript functions. 

You’ll typically want the ability to Create, Retrieve, Update, and Delete (CRUD) from the database. 

There may already be an ORM that works with Mongoose and suits your needs. ",1512519817.0
adumidea,"You're just saving the first chunk of data, it's a stream. You need to do something like this:

    let data = '';
    req.on('data', chunk => data += chunk);
    req.on('end', () => fs.writeFile('someAudio.ogg', data));

Or more elegantly

    req.pipe(fs.createWriteStream('someAudio.ogg'));
",1512532851.0
ListeningFrog,"Are you sure the format is actually audio/ogg (as the mime type suggests)? if you are uploading from chrome, the file may actually be a webm file...",1512513217.0
cgijoe_jhuckaby,Try running the Linux [file](https://en.wikipedia.org/wiki/File_%28command%29) command on the downloaded file.  It'll examine the binary contents and tell you what file type it really is.,1512529400.0
Quallic,"    npm uninstall forever -g --save
    npm install pm2 -g
    pm2 start <script>",1512495291.0
jzapp,You don't need pm2 or forever.js when you have [systemd](http://nodesource.com/blog/running-your-node-js-app-with-systemd-part-1/),1512499616.0
matebeatscoffee,It took me a long time (if only there was a word for it) to figure it out.,1512494312.0
adamxp12,"Yeah

forever start server.js

obv change the name of the file you want to run

can also install forever-service if you want to run the app in the background and on startup",1512488770.0
desnoth,"""Forever start youfile.js""

To stop it ""forever stop yourfile.js"" 

Very useful for production. Basicaly Nodemon but in the background",1512492164.0
flipperdeflip,Most likely yes.,1512486923.0
halfmatthalfcat,https://github.com/typestack/class-validator has a much cleaner implementation of decorator based validations imo.,1512499735.0
flipperdeflip,https://stackoverflow.com/questions/47651698/handle-sigterm-with-the-cluster-module,1512471303.0
DiesFuechschen,"Events are processed asynchronous, which means you are printing the variable before it gets assigned. You will need to take a deeper look on how events and callbacks work in node and design your application accordingly.",1512463623.0
desnoth,Try using Promises objects,1512489802.0
Jafit,"You have to learn about Javascript's asynchronous concurrency model and the event loop.

https://www.youtube.com/watch?v=8aGhZQkoFbQ

So to get the value out of the event listener you'll need to wrap it in a promise or an async-await function.

    (async function(){
        const peerID = await new Promise(resolve => {
            ws.on('message', function incoming(data) {
                let p = '';
                data = JSON.parse(data);
                if (data.type == 'route' && data.data != '') {
                    p = data.data;
                } else {
                    p = crypto.createHash('md5').update(crypto.randomBytes(64)).digest('hex');
                    emit(ws, 'route', p);
                }
                resolve(p);
            });
        });
        console.log(peerID)
    }());

Here we're wrapping everything in an async immediately-invoked anonymous function which allows us to use async-await syntax.
Then we wrap the `ws.on()` listener in a promise and resolve whatever the value of p is. By the way crypto is also an asynchronous operation but peerID is awaiting the result of whatever comes out of this promise so it should also await the result of the crypto.

async-await uses promises under the hood so you can use both interchangably, promises are nice but async-await lets you write code in a more synchronous style.

A pure promise-based solution would look more like:

    const peerPromise = new Promise(resolve => {
        ws.on('message', function incoming(data) {
            let p = '';
            data = JSON.parse(data);
            if (data.type == 'route' && data.data != '') {
                p = data.data;
            } else {
                p = crypto.createHash('md5').update(crypto.randomBytes(64)).digest('hex');
                emit(ws, 'route', p);
            }
            resolve(p);
        });
    });
    
    peerPromise.then(peerID => {
        console.log(peerID)
    });

Both of these are better than having to deal with callback functions.

I'd recommend watching the video I linked above if you're having trouble understanding Javascript's asyncrhonous concurrency model. And also learn about promises and async-await.",1512471574.0
burtgummer45,"A more abstract answer that helps me:

Once you are on the async train, whether its callbacks or promises, you aren't getting off.

In other words, once you are inside an async callback or promise, you have to think in terms of before and after, and not what you see sequentially in the code ( unless you are inside the same promise or async callback )",1512487503.0
omar-hydrah,"What sockets module are you using? Do you have any error messages?

Could the error be because of line 9:
    
    emit(ws, ""route"", p);

Where are you getting your emit function from?
Is the operation on line 8 synchronous? 

Try moving your line 14, right before the parentheses on line 12. You might get the result you want. 

socket.io is much easier for beginners.

In the client you can write:
    
    var socket = io.connect(""/"");
    socket.emit(""new-user"", ""user-name"");

In your server:
    
    io.on(""connection"", (socket)=>{
        socket.on(""new-user"", (userName)=>{
            console.log(userName);
        });
    });

You can find resources on youtube on ""the net ninja"" channel for both sockets and asynchronous programming. Or you can try scotch.io website.",1512468721.0
acidwang,"I typed ""microphone"" into npmjs.com and got back https://github.com/MexXxo/node-microphone as the first result. I've never used this library but it looks like it wraps different platform processes and returns their stdout, so rather than piping it to another stream you'd do something like:

    const Mic = require('node-microphone');
    const mic = new Mic();
    const bufs = [];
    const micStream = mic.startRecording();
    
    micStream.on('data', d => bufs.push(d));
    micStream.on('end', () => {
        const buf = Buffer.concat(bufs);
        // do something with the buffer
    }",1512477989.0
boogermann,[RecordRTC: WebRTC JavaScript Library for Audio+Video+Screen Recording](https://github.com/muaz-khan/RecordRTC) ,1512463945.0
psayre23,Depends what you are trying to do with it. For my dryer detector. I ended up using sox and parsing the output from that.,1512498283.0
psayre23,"Like a washer and dryer, for washing clothes.",1512505431.0
mansfall,So what exactly is your question?,1512458842.0
kiksen1987,"Well. Most likely it's just a question of transforming Json to whatever format you like.

Just make methods that maps the part of the data you want to keep and put it in a database.",1512460925.0
omar-hydrah,"How much node.js do you know?

For ""http"" requests to the api, you can use ""axios"" module. For saving to the database you can use mongoose for mongo databases, or sqlite3 or mysql.",1512468886.0
Shaper_pmp,"Tsk - what a *terrible* article.  It's poorly-presented, contains no real insight or interesting information about the languages at all, not all languages have comparable figures, and this is a six-month-old article using data from 2016(!).

Still, in order:

* Swift (262% growth)
* Javascript (97%)
* Go (93%)
* C# (88%)
* Ruby (66%)
* Java (63%)
* Python (54%)
* PHP (43%)
* C++ (43%)
* C (not even given a growth figure - WTF?)",1512476595.0
pcdinh,Very boring article,1512470546.0
lordmyd,The TIOBE index is a complete joke. Someone please `kill -9` it.,1512597507.0
taserlick,http://www.evontech.com/what-we-are-saying/entry/top-10-programming-languages-of-2017-so-far.html,1512457016.0
danielstaleiny,"Auth with google. Send token to your api in auth endpoint. On api take token and make request for information like email, id or some identity to know that this is this user. Issue your own token and send it to your browser, phone what have you. From now on you are using your own token. Whenever user needs to auth you check for your identifier trough google’s token and reissue your token. ",1512447765.0
DrBroccoli,"When a user first authenticates with google, they’ll be given an `id_token` (among other things).  This `id_token` can be validated on the server-side with google’s public keys (preferable), or via their tokeninfo endpoint.  You can choose to send this id_token to your server with each request, or exchange it for a new token your server created, with the information you care about now encoded in it.

See googles docs on this here: https://developers.google.com/identity/sign-in/web/backend-auth

(If you’re asking more generally, outside of google, your application is serving as a “resource server”, in OAuth2 parlance, which varies slightly from googles specific recommended usage.)",1512448443.0
N3KIO,https://github.com/danielfsousa/express-rest-es2017-boilerplate,1512435055.0
BadVolt88,"run from script dir:
npm filter
Or
Node query.js

and looks like there are parameters to run it. Anyway, you will see them after running. ",1512436647.0
BadVolt88,"No no. You are running script through node, while you should start it from cmd.
Win - run - cmd
>
node C:\script\query.js",1512462342.0
grinde,"If you're using this with node you should be using a [native addon](https://nodejs.org/api/addons.html) that compiles using node-gyp (note that [NAN](https://github.com/nodejs/nan) is available this way). If you want to use it in the browser emscripten is the way to go, but I don't don't see any [bindings](https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/embind.html) defined anywhere.",1512433155.0
sieabah,We know why. The issue is actually getting people to write testable code as quick as they write normally.,1512437005.0
burtgummer45,Ultra-fast compared to Ruby on Rails... but so is everything.,1512401976.0
bschwind,"> Node.js

> Ultra-fast

[lol](https://imgur.com/aqSjw1x.png)",1512444969.0
Lapter,I have endpoints at /api/{stuff} with different HTTP verbs. It is not documented properly. However I have tests written in mocha. I wonder if there is a way to generate yaml file by running tests maybe ? I checked npm and but the ones I found need at least apidoc comments. ,1512401757.0
rinserepeatimprove,"This isn't really a helpful comment to the problem but, I had made this mistake on several projects. I've since started documenting before writing any code and life has been so much better; I've been able to have other devs work on front end before I've even finished the back.",1512411001.0
lee_macro,"This doesn't help directly, but you basically want something like Swashbuckle in .Net, where you put attributes on existing endpoints and add some startup swagger options and it generates your swagger json and ui from your code base. I couldn't find anything like it for node when I had a look a year or so ago, but maybe with the rise of decorators now someone could/has created something to do it.",1512411814.0
tiberriver256,Does your API follow a specific design structure that is parsable?,1512398837.0
broofa,"I'd love it if there were a [good] module for this but, frankly, I don't think it's possible... not without dictating a lot of ad-hoc conventions that are contentious and/or onerous.

I say this because this request falls into the broader space of ""auto generating documentation from JavaScript"", which is a problem that's been around for a long time, and for which there is still no canonical solution.  JS is just a horrible language when it comes to auto-doc tooling.  Untyped language + prototypal inheritance + no established doc-comment conventions = lots of ad-hoc conventions and breaking edge cases.

Historically, auto-generating docs from JS involves picking a tool (ESDoc, JSDoc, whatevs), figuring out what notation is/isn't supported (JavaDoc, generally), then learning all the quirks, foibles, and edge cases where the tooling breaks down because, fundamentally, the JS language doesn't capture much of what you'd like to express in your documentation.

Swagger docs are no different.  They're arguably worse since teasing information about things like resource schemas, parameter types, and response codes from the source code is nigh impossible in a general way.   So as a developer you have to add a lot of ad-hoc markup to your source comments.

That said, I have a system in place for my current work project that does an okay job of auto-generating Swagger docs.  But it works because it was never designed as a general purpose tool.  Instead, I simply set out to build a tool that can capture the basic information that can be automatically parsed from the source by adhering to a few internal conventions we have, rather than expecting devs to annotate source comments with lots of structured markup.  It does things like ...

- Introspects the [private/undocumented] express `stack` structure
- Requires you specify a regex to tag related endpoints
- Requires method-level doc-comments go *inside* the functison rather than preceding the function. (So they're available as part of the function source.)
- Ad-hoc regex to identify HTTP response status.
- Ad-hoc logic for translating Sequelize models into Swagger schemas
- Ad-hoc regex to identify parameter names

It's been a fun exercise and, trust me, if I felt there were a viable way of creating a module that had utility to anyone other than my immediate team, I'd open source it.  But most of the code is specific to our particular way of coding and it's simply not general enough to warrant that.

If you find something, definitely let me know.  I'll be very curious to see what it's capable fo.",1512431002.0
,We'll probably need more code in order to try to help. Can you post more in pastebin or a similar service?,1512389394.0
omar-hydrah,"Because you've not included your error message, I will have to speculate.

The error could be because you're treating an html file, as a template file. But this wouldn't explain the case of ""data"" variable being undefined. If my guess is correct, res.render() should produce an error itself.

Try writing contents of ""data"" variable before reaching res.render().

What changes have you done to your main server file? Particularly; with the command of:

    app.set(""view engine"", ""ejs"");

I don't know if html can be treated as a ""templating-engine"" in node.js, but to stay safe; you might have to serve it as a file:

    res.sendFile(""./path/file.html"");

I'm also wondering why you're receiving a ""response"" third parameter in gotData(), but treating it as a ""res"" variable.
Try making your functions as pure as possible, without any side effects. If that ""res"" variable is public, I highly doubt that it will stay the same in such an environment. ",1512398646.0
lostpx,Flawless system if there are videos which can be promoted the top. Thanks anyways,1512459568.0
tselatyjr,Thanks for the link. I think this is just a bunch of intro tutorials mostly... :-),1512448410.0
MattBD,"My website uses [Lunr.js](https://lunrjs.com) for full-text search and it might be a good fit for your use case, especially if the data is already available on the client side.",1512342407.0
nikoz_rh,"In the backend try with PostgreSQL, with ts_vector column",1512343299.0
ndboost,I too am curious,1512340650.0
mcsballer,SOLR /s,1512361367.0
TheCommentAppraiser,"Check out Lunr, Elasticlunr and Fuse.js",1512441293.0
inkubux,How does It compare to lokijs? I started a project last week with loki and really like it.,1512347139.0
hunter_lol,"I like it, any tutorials using it?",1512347753.0
rebelrexx858,or check out json-server :),1512404204.0
sieabah,[Why not use neDB](https://github.com/louischatriot/nedb)?,1512337968.0
Cilph,Lodash? How outdated. Mine are powered by left-pad.,1512390011.0
victor-wayward,"would you like to check:
https://github.com/victor-wayward/ironode
demo:
http://35.202.159.73/",1512343877.0
omar-hydrah,"Can you add the error message to your question? It will help greatly to see what mongoose thinks about your schema choice.

I think the error might be with the schema itself. Passport shouldn't interfere with your schemas.
I would remove away all the complicated mongoose options, just stick with the ""type"" properties only, to help track the error. 

The schemas I have here work just fine:
https://github.com/Omar-Hydrah/maktup/

You can find one schema under:
maktup/models/room-model.js

Try building on something that works, and one a step at a time. Errors can be hard to track sometimes, especially if they're the silent type.

Esta probablemente que tienes errors porque los errors de ""mongoose"" estan en spanol, y los errors de passport estan en ingles. Deberias traer un traductor.",1512400094.0
TacoHead30,"not sure if this is the issue, if you're using the new schema, your user query would be:
    
    User.findOne({ email :  email })

If that doesn't help, could you post some error messages you're seeing?",1512355591.0
kellyjandrews,"Hi - developer advocate at Codeship :)
Depending on your setup, you can write a shell script to restart the server or use the commands via ssh - either way it would be similar result. 

Here is a post from a friend of mine that is really good on how to do this - https://zaiste.net/posts/a_few_ways_to_execute_commands_remotely_using_ssh/

Unless you are using one of the integrated hosts that has some restarts built in, you will need to use some sort of custom script. This would basically hold true for any other service provider as well, since they have not integrated with your server as well. 

At the simplest form - 

ssh $HOST pm2 restart all

Hope this helps, feel free to reach out anytime and I can help you through it. ",1512332026.0
ccb621,"There are not tools that are simpler than a shell script. Complex tools may make the overall orchestration seem simpler but, at the end of the day, they are mostly running shell scripts. 

If you want to explore those tools, checkout GoCD and Jenkins. If you just need to get something running, perhaps as a proof of concept (POC), a shell script that uploads code alongside a task that monitors the code directory for changes to restart the process might is good enough. ",1512309621.0
calsosta,"I wrote my own.  I use pm2 to spawn an updater process, then I use git to check for new commits to a deploy branch.  If I find one then I pause the main process threads, pull the new files, then restart pm2 all within node.

Works fine but no one ended up using it. ",1512310997.0
fwertz,Check out bitbucket pipelines.,1512330186.0
Triptcip,"You could add a process.json file to your repo and then run `pm2 startOrRestart process.json` in your deployment script once all the tests and new build complete.

If your process.json requires confidential environment variables such as passwords etc, then there are ways to handle that as well.",1512315642.0
Adoroam,Circle ci,1512326525.0
Thommasc,"I like jenkins, takes a lot of time to build the pipeline, but after that it's good to go.

Underneath it's obviously just a tons of shellscript : D (go script for pipeline 2.0).",1512376347.0
andreasblixt,"If the package.json dependency and require statement takes more bytes than the code of the module it's importing, is it truly worth it?

Not to mention it's another attack vector (any dependency that's not pinned can be used to inject code in dependents down the chain) and that it adds time to the install and update processes.

Edit: I feel like I should address the inevitable ""They say it's partly a joke in the README"". I don't want to be a buzzkill but since this is a fully published and, to some people, a practical package, it's only going to be a joke until it isn't.

GitHub conveniently gives you a [list of dependents](https://github.com/sindresorhus/yoctodelay/network/dependents) which shows there's a Chrome extension with over 1,500 users that's depending on this package. Now if the maintainer thinks this package was made in jest and hands over the reins to someone who's not got the best intentions in mind, they could just release v1.2.0 with any extra code they'd like and that code would probably end up running in people's browsers.",1512306461.0
kingbin,"I wrote something a couple years ago and can’t remember what npm pkg I started with. I remember having issues with the core logic and handling promises. It used qgis cli if I remember correctly.

I remember I ended up writing a procedure in postgres with postgis to do all the geom manipulation and cleaning. I could then call it from js and it handled promises quite well. 

Again this was several years ago and I’m sure things have changed. That maybe an option to look at to get what you need. I found it easy to write queries and test my postgis function.",1512309536.0
jd_chum,"But the standard Node HTTP API is already a simple, dependency-free solution.",1512291222.0
MUDrummer,"This is super verbose and I have no interest in having to promisify a module every time I use it. 

Honestly this is so verbose that it doesn’t feel any different than building an http request with the standard lib http module. ",1512297803.0
VAST_BLINKER_SHRINK,How does this compare to https://github.com/axios/axios,1512315735.0
nodejs5566,I think the best http client is fetch ported to node.,1512302064.0
celesfar,How does it handle territorial disputes? ,1512283750.0
veswill3,I am sure this is something cool but your title and readme is so cryptic that I'll just skip. Any chance you can provide and eli5?,1512270886.0
wung,"I first thought the demo would be broken, but then opened the console and saw that it downloads **36 megabytes** of json blob, just to be able to determine a country code. 

Please don't *ever* think about using this on client side. ",1512761728.0
OogieFrenchieBoogie,"After cloning the project, and using npm i

I can't start the app, I have the following errors : 

https://imgur.com/a/TJgGm

I am using node v8.5.0 and npm v5.4.1

EDIT: same if starting the app with node server.js or nodemon server.js 

[nodemon] starting `node server.js`
(node:74847) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 logged listeners added. Use emitter.setMaxListeners() to increase limit
(node:74847) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 error listeners added. Use emitter.setMaxListeners() to increase limit
[nodemon] app crashed - waiting for file changes before starting...",1512258199.0
ggolemg2,Looking good.  It's nice to see it all together.,1512230633.0
bracesthrowaway,Is there a demo site?,1512255849.0
comma84,Sweet boilerplate! I would love to check it out. Any idea where the memory leak errors that don’t allow it to launch would be coming from?,1512270019.0
victor-wayward,"OK I should write ""install"" instructions.

There is a config dir and a default file in it. This is the file to configure your app. I reckon this error is related to the connection with mongodb. After you install mongo set db-uri. Please let me know how it goes!

install packages: npm install
start app: npm start
visit localhost:3000",1512284932.0
victor-wayward,demo: ironode.com,1512344550.0
swyx,"i always suggest deploying a demo on to heroku so pple can actually see the site not just the code. anyway, nice share.",1512257846.0
eastofboundary,"awesome collection! Any plans to add a license? I would love to ""borrow"" the boilerplate :P",1512248189.0
KristianSakarisson,Can you explain why you can't just write them directly in the js file? I avoid functions in pug files when I can,1512295400.0
danielstaleiny,"https://github.com/FormidableLabs/nodejs-dashboard
with tools like this and debug mode ",1512216998.0
TheOneRavenous,"Look at the node core module ""process"" it has ways of monitoring memory usage. You would obviously increase memory usage by polling the process to find the memory at a given time but the impact can be minimal. 

Also you can use ""heap' which is apart of process module.

All of which can be implemented with very minimal impact when compared to some things on npm.  ",1512275694.0
cderm,"I quite like this. On mobile at the moment but will take a closer look later, thanks for sharing. ",1512211985.0
cgijoe_jhuckaby,"This seems rather suspicious to me.  The YouTube link is a 404.  Also, a google result finds: http://nobsimreviews.com/ethconnect-scam/

> > Is EthConnect A Scam / Ponzi Scheme?

> Honestly there is a good chance it is.

> > EthConnect Conclusion

> I won’t be recommending it because I think it’s too risky.

EthConnect looks like a referral MLM scheme (a.k.a pyramid scheme) to me.  Invest at your own risk.  Apparently there is a chance on a short term gain, but I would warrant extreme caution.
",1512194311.0
ccb621,Is your question about deployment or performance? Those are two different things.,1512178958.0
alexzim,"I'm sorry if I get you in a wrong way, but Heroku and Azure are just hosters, which make some of their business on simplifying the whole setting up process, and not ways to deploy.
And deploying a node app is pretty much the same as any other: you're taking your app, uploading it using any handy way, then you're starting it. Simple as that.

And if you want some example apps, don't look for such as PayPal or Medium. Those are too big and they may use a whole lot of technologies. And you know, it's just a trendy thing to use a new technology for like a few pages, then write a huge article about their modern ways to make stuff.",1512247531.0
hamdans1,This is great. Always looking for ideas to help bolster my portfolio. ,1512188912.0
slapfestnest,why is this a photo of someone working on music in the dark tho ,1512212468.0
nitinsh99,Can someone put a similar list for server side/ backend service ideas using java/node? ,1512225136.0
bwfcwalshy,"Wow this is really nice, I'm someone who is learning React and this has given me a nice list of things I can do with it. Appreciate it!",1512242625.0
fallendev,"Thanks so much for this, I’ve been struggling with ideas on what to build. I’m definitely going to be using this list. ",1512194633.0
androidboy86,Nice,1512217963.0
nobillygreen,This is an awesome idea. I'd love to see something like this continue to grow.,1512232694.0
tapu_buoy,Can someone put on a list of tutorials may be for the same projects or any other different projects for a beginner to learn Node.js ^with ^Top-to-Bottom ^aproach,1522297905.0
emersonbroga,I usually build these clone apps when I’m learning a different language/framework! It’s indeed very useful to build “code muscles “,1512189849.0
SparserLogic,"> Should I decouple these and have them both running as separate scripts under pm2?

Likely. You could just write this as, say, a lambda that you trigger on a timer but if you're sticking with a single server you likely want this running independently of your webserver which should be focused on serving resource files.

Chron jobs in Node are just `setInterval` invocations running inside a managed process. There are fancier approaches but they mostly boil down to that.",1512161601.0
victor-wayward,"since serving a web page is a completely different task from loading the db, I would go for the separate solution, distinct scripts. 
no microservices has nothing to do with it
",1512251297.0
cooliobing,Very neat!,1512170331.0
JidokaUS,I was going through the same thing last night. Huge amount of lag when waiting for event notifications. At this point I would switch to self hosted or mailchimp,1512149353.0
victor-wayward,is mailgun any good?,1512345871.0
NetOperatorWibby,I roll my own custom generator but this had some nice tips. Thanks for sharing!,1512135581.0
toadkicker,Or you could build a site with a text editor,1512118896.0
EntroperZero,"The client looks fine to me, but is anything listening?  I just see a client, where's the server?",1512104500.0
morkaitehred,"You're sending `world\u0000\u0000\u0000\u0000` instead of `foo\u0005world`. The second `write()` should have an offset:

    buf.write('foo', 0);  
    buf.writeUInt8(5, 3);  
    buf.write('world', 4);",1512159626.0
Felecorat,"Check out p2.now.sh/_src for code. Remove the /_src to see it in action. Depending on where you are in the world it will work fine or go very wrong. Open it in two or more browser windows and have fun. If things bug out close all windows wait and reconnect.

Ask if you have questions I might be able to answer them. ",1512088556.0
IwazaruKyu,socket.io’s « Getting started » shows you how to create a chat https://socket.io/get-started/chat/,1512133033.0
pietras93,"Yes, socket.io would be great in this case. It would also allow you to easily have authorization working. For example, if you're using access tokens you could do it like this:

    io.use(async (socket, next) => {

      try {
      
        // 'Authorization': 'Bearer ACCESS_TOKEN'
        let authorization = socket.request.headers.authorization
        let token = authorization.split(' ')[1]
      
        if (!token) {
          return next(new Error('User is not authenticated'), false)
        }

        let access_token = await AccessToken.findOne({ token }).populate('user', '-salt -password').then()

        if (!access_token || !access_token.active || !access_token.user) {
          return next(new Error('User is not authenticated'), false)
        }

        socket.request.user = access_token.user.toObject()

        return next(null, true)
      } catch (err) {
        return next(new Error('User is not authenticated'), false)
      }
    })

In the example I use access token sent via extraHeaders option. You could use cookies or querystring as well, however, I would refrain from the latter for both security and convenience reasons.",1512149685.0
