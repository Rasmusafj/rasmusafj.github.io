author,comment,timestamp
PrimozDelux,Is there any way to get the opaque type to work in 2.13? Because that looks sweet ,1543616690.0
joshlemer,Also see the [thread on contributors.scala-lang.org](https://contributors.scala-lang.org/t/announcing-dotty-0-11-0-rc1/2630),1543599000.0
poluserthrowaway,Here's hoping there will be a dotty dot net too,1543626649.0
PoseidonInChains,Yaaay. I'm pretty excited to see Dotty coming along so nicely.,1543669356.0
wookievx,"Can opaque types be parameterized (have generic arguments)? It would be quite useful, for example as a way to implement monad transformers:

    opaque type EitherT[F[_], A, B] = F[Either[A, B]]
    
    object EitherT {
       // constructors, type-class instances etc.
    }",1543704884.0
affjskedbd,It'd be nice to see a post-mortem on whyit took so long for this implementation. And what actions they will take to prevent this for the ongoing releases of Scala.,1543585828.0
abdolence,"Good news, although Spark was still the first :)",1543583174.0
,[deleted],1543582348.0
lihaoyi,"There is no inherently superior option

- Do you need to routes to be ordered? use a `List`
- Do you not care about ordering but need string-based lookup? Use a `Map`
- Do you need both ordering and string-based lookup? Use a `LinkedHashMap`
- Do you need index-based lookup? Use a `Vector`
",1543561358.0
minhthai,"I think generally, you will lose the insertion order when traversing the nodes in the map. Otherwise, specific usecase should be considered.",1543549700.0
Milyardo,"Why have a data structure at all?

    case class Routes(maptoEndPoints: String => Option[Routes], endpoint: Option[String])

Perhaps you still want to know something about the structure of the routes?

    case class Routes[Find[_,_]](mapToEndPoints: Find[String, Option[Routes], endpoint: Option[String])

Sometimes it's worth deferring a choice unless a specific semantic is required.",1543638520.0
acjohnson55,"That only seems appropriate if you're representing a completely static tree. Most websites where you'd have to implement routing would need something more flexible.

It's an interesting question, but I'm having a tough time thinking of a scenario where I'd want exactly nested maps, as opposed to one flat map or something more expressive. ",1543678966.0
Semi_Functional_Ken,Love that they're using the DAG architecture at Constellation. Much easier to scale than blockchain.,1543522442.0
gbersac,I didn't undersand.,1543507637.0
terence_shill,you could also post to /r/gamedev ;o),1543655682.0
sake_92,"I also did something similar with [hepek-starter static site template](https://github.com/sake92/hepek-starter), it's using sbt.  
Netlify is really great, you can make forms [only in HTML](https://hepek-examples.netlify.com/form/form-example.html), add ""netlify"" attribute, and it will provide a ""backend"" for you, store results in a CSV.. :D  
I think they also provide AWS Lambdas and stuff.",1543496629.0
tanin47,"Wow, I'm glad to see a startup in Bay Area using Scala.",1543523090.0
rco8786,Just a link to your careers page? Kinda lazy...,1543433228.0
PlaceIQ,Sorry everyone. This is the direct link to the job posting  [http://app.jobvite.com/m?3ZVNfkwL](http://app.jobvite.com/m?3ZVNfkwL) ,1543454926.0
Daenyth,Does this cover Scala js or the bindings for it? I don't see how this is on topic here,1543415486.0
FunctionalMiles,"Just to share some more light on this: This is the chance to work for a fantastic energy company who are using Scala in order to power changes in the energy market. They are doing this through a variety of products such as: Smart Meters and an app, Lumo where Pay as You Go customers can top up their energy via mobile and see real-time analytics on their gas and energy usage.

They have a new product, **V-Net**, is a cloud-based platform helping to unlock smart charging capabilities for electric vehicles on a national scale. They have created a network that can redistribute energy amongst their customer base. What this means is that you are able to sell any unused energy stored in your car back to the National Grid, and then re-purchase when the demand on the National Grid is lessened, or when the energy is cheaper!

They have a key team of engineers who are all using Scala alongside other technologies including but not limited to: Akka, Cats, fs2 and Spark. They are paying up to £85k for the right person and are a great group of people!

&#x200B;

If you are interested or have any questions, please do reach out!",1543320225.0
nutsack_dot_com,This looks cool!  We do a bunch with Neo4j at my work.  I'll try this out soon.,1543280911.0
jokasx,Oh nice. I'll investigate when I have time. I also suffer from neo4j at work and having a bunch of Anys in my code :D,1543368705.0
HalfFull102,Nice work! I briefly looked into Neo4j and hoped there was a type-safe driver like this. I'm gonna check it out!,1543435056.0
Roberto_ua,Would anyone recommend using Gradle with Scala?,1543315624.0
jcgretton,"seen a lot of press about Awair, would have been interesting to see how bad the air quality got in SF these past weeks. ",1543250505.0
i_am_erip,No chance of remote?,1543315651.0
teknocide,"I really enjoyed this post. The fact that `[A, B <: List[A]](b: B)` enables a more detailed type description than `[A](as: List[A])` was especially eye-opening.

I'll have to digest this for a bit.",1543339560.0
JoanG38,"I am just waiting on web socket support on the Http4s client to completely remove Akka-Http.  
[https://github.com/http4s/http4s/issues/330](https://github.com/http4s/http4s/issues/330)

Let me know what you think.",1543239138.0
mrxtravis,"I'm working on a project meant to reduce the boilerplate for REST/CRUD applications.

First, using a DSL, one describes the data they are expecting to receive/return.  For instance:

```
case class Person(name: String, age: Int)
val personSchema = (
  kvp(""name"", string(sv.matchesRegex(""\^\[a-zA-Z \]\*$"".r))) ::
  kvp(""age"", int(iv.min(0))) ::
  KvpNil
).convert[Person]

case class WithId[P](id: Long, p: P)
val personWithId =
  (kvp(""id"", long) :: personSchema :: KvpNil).convert[WithId[Person]]


case class Error(error: String)
val errorDef = (kvp(""error"", string) :: KvpNil).convert[Error]
```

Next we describe the available operations:  
```
 val personService = ServiceOps.withPath(""person"")
   .withCreate(personSchema, personWithId, errorDef)
   .withRead(personWithId, errorDef)
   .withUpdate(personSchema, personWithId, errorDef)
   .withDelete(personWithId, errorDef)
```

The service description is the schema which can be passed to different interpreters.  For instance the OpenAPI interpreter will print OpenAPI/Swagger compliant documentation of the service base on the schema.

```
val openApi = new OpenAPI() 
CrudOasInterpreter.jsonApiForService(personService).apply(openApi)
println(io.swagger.v3.core.util.Json.mapper().writeValueAsString(openApi)
```

The http4s interpreter will generate HttpRoutes\[IO\] for each of the defined operations.  The interpreter is responsible 
for generating a runtime which will unmarshal,validate and marhsall based on the schema.
```
      val http4Service = service.forService(
        personService,
        createF, // createF, readF, updateF and deleteF is the actual business logic 
        readF,    // where the inputs and output match the schema, so for readF
        updateF,  // the function must match (long) => Either[Error,PersonWithId]
        deleteF
      )

      BlazeBuilder[IO].bindHttp(8080, ""localhost"").mountService(http4Service, ""/"")
        .serve
        .compile.drain.as(ExitCode.Success)
```

Here is the complete [Example](https://github.com/OleTraveler/bones/blob/master/examples/src/main/scala/com/bones/PersonEndpoint.scala).

I like this approach because updates to the schema will be reflected in each interpreter.
(The doc stays up to date with the application!)

The next interpreter I'm interested in writing is one which can marhsall/unmarshall a non JSON interchange format.  This would be integrated in the http4s 
interpreter so that a config switch would generate endpoints which could accept a different format.

I'd also like to experiment with Scala.js to see if a reasonable React application
can be generated using the schema which would be compatible with the personService.

I call the project [Bones](https://github.com/OleTraveler/bones)

",1543288610.0
vickumar,"I'm working on a fuzzy distance string library:  [https://github.com/vickumar1981/stringdistance](https://github.com/vickumar1981/stringdistance)  


I added a few algorithms that are used in DNA sequencing:    
  \- Needleman-Wunsh ([https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch\_algorithm](https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm))  
  \-  Smith-Waterman  & Smith-Waterman-Gotoh ([https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman\_algorithm](https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm))",1543710477.0
raghar,"Macro used for implementing a method cannot create anything outside a method. You might calculate the return type and make it ""dynamic"", and this way pass some information outside, e.g. with refined types, but running a `def method = macro Macro.impl` and having some value appear is not possible.

You can only add things into the class/object using macro annotations (that's why we use them after all), but surely the way you want.

And for a good reason. While normal macros can generate implementation using some compiler's internal information and decide a return value's type - they are encapsulated. The cannot pollute/break code outside of the place they are used. If I could inject new value/method just by running macro in some place, it would be really easy to break code in a way that is almost impossible to guess where it came from. Notice, that we use run a method implemented with a macro you see no difference between that method and a normally implemented one. That `macro Macros.impl` stays inside.

Macro annotations on the other hand can mess around with the internals of your class, but they are more explicit about it. You have to have this `@IAmAnnotation` there which always warns you about trickery ahead.",1543188209.0
hmemcpy,"This is a first (pre) release of the Scala edition for Bartosz Milewski's ""Category Theory for Programmers""!

This edition contains both Haskell and Scala code one after the other.

Huge thanks to [Typelevel contributors](https://github.com/typelevel/CT_from_Programmers.scala) for the Scala snippets!

&#x200B;

Please get the PDF and report any issues you may find :)",1543154152.0
WhatBaron,This is fantastic. : ),1543156135.0
b4d3,"Great! I'll buy a print copy as soon as it becomes available.

Just a question: why leave Haskell code in Scala version?",1543160235.0
shawty-13,Thank-you,1543178098.0
dxplq876,Amazing! ,1543171111.0
Krever,Is printed version planned? ,1543171585.0
strawman53,"Thanks so much to those that worked on this. I had read several chapters into the original version of Category Theory for Programmers, but the C++ code snippets did nothing for me as I don't have background in that language. It will make a huge difference for me to be able to see the code in Scala as well as Haskell in this new version.",1543355953.0
darksniper87,That's amazing!!!!! Why is that not posted on Twitter?,1543415962.0
beeeeeeeeeeeeen,"Hi reddit. It's pitched firmly at intermediate scala devs, hopefully some of you find it interesting. I've never written anything for the public before so any feedback is much appreciated.",1543068276.0
arylcyclohexylameme,"Good work.


> despite the great documentation, I don’t think the EitherT docs do a great job explaining why something like this exists. 


This part specifically I connect with man, with a decent amount of Cats stuff I can read it and go through the examples fine, but I always ask ""wtf is this for"" and never end up using fancy FP abstractions where I can because I don't actually know where to use them.


Hope to see more from you.",1543077496.0
doMynation,"Great article, thank you. I have a beginner question — how would you handle a failure in the Future using EitherT. Say you want to handle all 3 scenarios:

- Validation error via Left(error)
- Success via Right(pubs)
- Exception thrown inside the Future

From what I understand, the last one (which would normally be handled via ‘recover/recoverWith’ can no longer be handled. Are we losing that ability or am I missing something ?",1543073854.0
Apterygiformes,"Really kind post, thanks",1543103185.0
yourbank,"kind of got it, but kind of didn't, actually nah I still am confused, wait maybe not, actually no. Would be less mental overhead to write articles without type alias'.

Too much context switching to go back and figure out what it actually is and mentally substitute it every time.",1543103280.0
PrimozDelux,Composes well ,1543064572.0
pazqo,"I live in Milan, so I now why you posted this here. We even wanted to organize Scala @ La Scala, but in the end we just held Scala Italy somewhere else.

&#x200B;

But in the end, this is the wrong sub :D",1543064820.0
anterak13,"there are already quite a few working solutions for the expression problem, one of them is language agnostic, based on object algebras:  

[https://www.cs.utexas.edu/\~wcook/Drafts/2012/ecoop2012.pdf](https://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf)

another good one by odersky et al

[https://www.scala-lang.org/docu/files/IC\_TECH\_REPORT\_200433.pdf](https://www.scala-lang.org/docu/files/IC_TECH_REPORT_200433.pdf)

typeclasses are also a way to go,  tagless final is also worth looking at: [http://okmij.org/ftp/tagless-final/index.html](http://okmij.org/ftp/tagless-final/index.html)

however in my own experience, the amount of boiler plate to put in place around your core logic to make it extensible sometimes can exceed the work you would put to update your code in place. So unless your code is really frequently extended, or needs to be extended by distinct people, sometimes the good old GADT and pattern matching is the way to go if you need to match actual subtrees to implement your logic and your data structure will not evolve that much, and sometimes object oriented single dispatch is the way to go if you will mainly extend data variants and have a somehow fixed set of operations. Like everything else it is a tradeoff.

&#x200B;

&#x200B;",1543020268.0
Holothuroid,"This is pretty similar to Noel's analysis 'Uniting Church and State':

https://underscore.io/blog/posts/2017/06/02/uniting-church-and-state.html

https://www.youtube.com/watch?v=IO5MD62dQbI",1542967503.0
v66moroz,"How adding another arm to `match` in `print` is better than extending objects? When you say ""it doesn't modify existing code"" it depends on a definition of ""existing code"". `print` **is** existing code and belongs to objects. If you really want to show how FP does it, you should probably try typeclasses. The big difference is **where** you define extension and how compiler helps you.",1543010205.0
zzodoo,[doobie](https://tpolecat.github.io/doobie/)?,1542956112.0
volpegabriel,"Nice blog post, keep it up :)",1542943206.0
Lanfranc_di_Cambria,Is Scalia the name of Scala framework?,1542858158.0
duhace,"your last line of ```fibonacci```, you do ```fib_(n,1,0)```, and your end condition for your recursive loop is ```count==n```. since you set ```count``` to ```n``` immediately when calling ```fib_```, it immediately exits and returns ```secondToLast```, which you set as 0.

the first step towards fixing this function is to change the last line of ```fibonacci``` to ```fib_(0,1,0)```

also, if you'd like you can change the last line of your code from ```(0 to 100).foreach(n => println(fibonacci(n)))``` to ```(0 to 100).map(fibonacci).foreach(println)```. it's entirely optional, and there are benefits to the way you've written it, but I think the latter looks nicer.",1542856196.0
yang_bo,It caches resolved compile-time ASTs instead of runtime values. You should never use `cachedImplicit` unless compilation is too slow.,1542809729.0
fokot2,"Scala compilation might get slow because of implicits resolution. To see how much you can use these flags  \`-Xshow-phases -Ydebug\`. In project I'm working on the full compilation is 2 minutes and around half of that is implicit resolution. It  helps when you use the same implicit more than once in a project  and it is derived by macro or composed of more implicits.. Then you cache it and it will be done only once. Imagine \`asJson\` method needs Encoder\[X\] implicit. Compiler will look for it twice. In  this case it will create the implicit only once in x and the calling of \`asJson\` will find this implicit in its scope so it will be fast.  


implicit val x: Encoder\[X\] = implicitly\[Encoder\[X\]\]

x1.asJson

x2.asJson

  
And why you need cachedImplicit marco  is here. It is not much code and you can do it yourself even without macro, but why to bother..

[https://stackoverflow.com/questions/34399288/caching-implicit-resolution](https://stackoverflow.com/questions/34399288/caching-implicit-resolution)",1542833279.0
kag0,"I think in the object is a reasonable place to put it since it ensures you don't accidentally use a variable outside the object's scope.

My classes are almost always immutable, so I put helpers in the class just because I'm lazy and I know they aren't going to inadvertently get affected by state. 

But really in the object is the ""safest"" place to put it.",1542772719.0
anterak13,"Companion objects are meant to hold that kind of ""static"" methods. Or package objects. It depends on the scope you need this method to have. with the ""protected\[<id>\]"" qualifier you can control the scope in which the method is visible.",1542831877.0
aphexairlines,An interesting perspective on OOP+FP (a common theme in Scala) from someone who works on another language at Oracle.,1542752594.0
alexelcu,"This is a pretty good presentation. Overall some of his points are pretty good.

I think Brian is wrong towards the end where he's saying that FP is bad at resource management. It really depends on what kind of resources you're talking of. If we're talking about RAM memory, then yes, FP is pretty bad at working with memory. But if we are talking about managing file / socket handles, then the abstractions I've seen in the FP world are far better. 

Speaking of the big picture, a language like Rust can go further and protect against resources being prematurely closed, which is pretty cool. People are trying to solve this in Haskell by introducing ""linear types"", but it's unclear to me if that helps.

This has more to do with the type system however, than with OOP vs FP.",1542989846.0
oleksandrb,"I totally agree. It's useful to use objects for make big boundaries, and use FP inside the boundaries.",1542883852.0
Milyardo,"That neo-nazi reference at 8 minutes is hilariously out of place. I'm 100% certain Brian doesn't know that Rise Above is a classic neo-nazi slogan, and that exact tattoo is common with the Aryan brotherhood, which makes the juxtaposition with the topic of the talk about getting along with multiple paradigms even more funny.",1543434290.0
tanin47,We use 0Auth with Playframework for one of our internal systems. The first free 1000 logged-in users is pretty generous.,1542741087.0
mr___,"Spam with Ramirod, who posts dozens and dozens of self-promotions pointed to auth0.com a year!",1542734160.0
mdedetrich,"I prefer Quill because of the following reasons

1. Its not just a wrapper over JDBC, which means it has other drivers (such as PostgresAsync) as well as supporting databases such as Cassandra with their own SQL dialects (i.e. CQL)
2. Although Doobie makes writing SQL less of a trainweck, doing so is still a PITA. A lot of your business logic in your app (at least the business logic in the DB layer) ends up being stringly typed. Even though there are ways to remedy this (i.e. Doobie has an ability to verify the SQL at compile time by introspecting SQL table structure) it doesn't solve all of the issues (i.e. refactoring in the context of SQL). Quill allows you to write strongly typed SQL using Scala like collections, and you can always write raw SQL in the same way Doobie can for the corner cases where you need to write raw SQL.
3. The above means that Quill tends to be much more performant than Doobie (and also Slick). Queries that are written in its own EDSL are transformed at compile time into the equivalent SQL, which means that at runtime you are basically just sending raw Strings down the wire. Queries also default to compile time queries, dynamic queries (i.e. ones that require input) are opt-in which I think is the default strategy you should be using (Slick queries are dynamic by default which is one of the main reasons behind its performance issues)
4. Doobie used to break (talking about bincompat/source) somewhat fairly often due to its dependency on cats and cats-effect. This is now less of an issue since cats is now released as stable however Quill is advertized to be dependency free (as much as possible) which is an asset for some.",1542732017.0
yunfeng_lin,"We use both at work briefly. but we don't use db extensively. we use db to persist configs. so the use case might be too simple

Doobie Pros

\- plain sql, maximum flexibility

\-integrate with typelevel eco very well (cats effect io, fs2, etc)

\- May not integrate with scala type system very well, so it is a bit more boilerplate compared with Quill

\* Quill

\- Just magic for simple use case. simple queries/updates like scala codes..

&#x200B;",1542731967.0
dagoberts_revenge,"I have used both extensively in the past and it is a toss-up. Note: all the following is over a year old so big changes may have been made in both libraries. 1) Quill compilation times are PAINFUL. I was using it in a project to autogenerate rather large helper objects for case classes that had Rails-like ""magic"" accessors, eg: getById, getByFirstName, etc... hundreds of such methods were generated and compilation was downright painful. 2) Doobie is awesome but, in my experience, I had to write a large handful of helper functions to make it truly easy to use. For example, a generic method that knew how to query for any type \`M\` by id. Once those were in place using Doobie was an absolute breeze!",1542732523.0
jlward4th,I've used Quill on a number of projects recently because of it's support for Async Postgres.  Overall very satisfied with it.  The only issue that required help was dealing with JSONB query.,1542816371.0
JimmyFloydRaynor,If you want to get rid of the boilerplate in slick I recommend using ActiveSlick.,1542731335.0
veenliege,I prefer pure jdbc + hikaricp for small projects.,1542802945.0
wi101,"Hi, I'd like to share with you my experience,

My first job was using Scala, we began learning Scala the all team together, there was a colleague (man) who helped me a lot to get started. When I made some improvements at work, it was unexpected to him and he regretted that he taught me (...)  he suggested to work on Women's job. (I never think about programming is *only* for men)

I was in other planet, I only learned from some blogs to do my work, but after that bad experience with this colleague, I decided to invest in myself to find another source of learning and to make progress, I have a nice friend from Germany who told me about a Scala Conferences, I started attending conferences right away, I told people there about how much I was enthusiastic about learning, I invested my money for that (3 x months of work = able to attend 1 conference), some people said that I was crazy, and they couldn't understand the reason, they asked me what is my goal after that ? ""I am enthusiastic"" wasn't a good reason? I want to improve my knowledge and I want to communicate with the speakers, I want to contribute in open source projects, I want to create my own libraries, I want to be a speaker, I want to be able to teach people and share my knowledge. Is that enough?Unfortunately the most of people didn't understand, maybe they thought about ""my enthusiasm"" = I was flirting them? Oh :'( I don't want to imagine that.

I tried to ignore all of that, to continue and make progress.

There are many good person though, I am grateful to know them, and to learn from them. I got a job in Europe thanks to conferences too.

I had and still have problems in and out conferences. So the major problem is the mentality.

I respect men, and if they explain things I listen to them and I learn from them but sometimes when I try to explain something I see the EGO from them instead of respecting what I was going to say.. at that moment the motivation is gone.

&#x200B;",1542839702.0
lucid8,"> No, it's not ok to hit on women at a conference

I think this assumes that only men would hit on women at a conference.


Would be more fair for the rule to go both ways & include gay people too.",1542727821.0
BigBlueChevrolet,"Welcome to planet earth, where people flirt with each other",1542729769.0
emilypii,"Thanks for this, /u/eed3si9n, it's very appreciated. Since moving to Haskell, I am continually in awe of the severe contrast in communities, not just in intellectual curiousity, but in diversity, too. You rightfully focused on 2 major pain points for women (or at least, for myself), which are unwelcome romantic advances, and a lack of assumed competence. The latter is by far the most frustrating for me, and it's one of the reasons why I have started to use more agender handles on social media (obviously barring this site). 

I would like to add 2 additional pain points to the list: 

1. **Insulation vs accommodation.** Some communities, in response to women asking to gain entry, will opt out of advertising their communities, and opt out of explicitly locating a diverse population, locking down the status quo. If communities are allowed to perpetuate these old-boy's clubs and silent meeting spaces, it only perpetuates Scala's diversity problems. Secret Slack rooms, secret gitter rooms, irc channels, etc.

2. **No Zero Tolerance Rules.** You want a more diverse population in Scala? Great! Then this needs to be taken into account when moderation rules are applied during interactions with more diverse members. Is this a call for a separate set of rules? No. This is a call for considering the context of Scala's diversity goals when applying the same rule set to different people. The anecdata suggests that women have wildly different experiences within tech, and many of them traumatic to varying degrees. Consider this when making decisions.  

Without going into specifics, the Old Boys Clubs, the moderation tactics, and the assumed incompetence were some of the most infurating parts of working with Scala, and were a heavily weighted factor in why I left (along with 2 other women, all of us to Haskell). Consider being dropped into Scala and getting hit with a Do Not Hire list threat as a woman in tech. Good Luck. ",1542728217.0
Finch_A,">  treat [people] as professional peers.

How do I know that they're my peers and not some random wannabe interns?",1542972994.0
estsauver,Website seems to be down for me.,1542719518.0
kudah,"Never use monad transformers, kids!",1542713076.0
kkweon,"There are already many articles about it

For example, [http://eed3si9n.com/learning-scalaz/State.html](http://eed3si9n.com/learning-scalaz/State.html)  for state monads

The article is calling a nested pattern match as a sequential pattern match. The state monad can solve this as you've seen.
",1542681201.0
fwlega,"Usually jobs find us via LinkedIn. :) Now, seriously. I think [Signify Technology](https://www.signifytechnology.com) has roles for several countries. ",1542658758.0
vitalijzad,Sometimes in the Big Data space,1542659723.0
jangchoe,"LinkedIn. Recruiters hit me up a lot with random Scala jobs. I live in Atlanta, and there seems to be a number of companies working with Scala here, much more than I expected. ",1542662320.0
suj1th,Have you tried Stackoverflow jobs? I have had a great experience using it to find Scala/Spark positions in Germany. Am sure it works in a host of other markets as well.,1542705173.0
dustinmichaels,Credit Karma is hiring scala developers. We have a few offices around the country but most of us work out of the San Francisco office.,1542695145.0
sant016,"what about relocating jobs?   
I work down South America in Scala but I'm not sure if there are good relocation job offers.",1542729838.0
Seth_Lightbend,[https://gitter.im/scala/job-board](https://gitter.im/scala/job-board) allows job and job-wanted posts,1542748749.0
havok2191,"Check out functional-works and your local Scala meetup :)

Where are you located?",1542657436.0
Leobenk,omg the focus issue is horrible. My eyes are hurting haha ,1542736720.0
haimez,"Looks like those dips occur every 30 minutes which corresponds to HikariCP’s maxLifetime default value. That would seem to imply that what you’re seeing is corresponding to connections reaching their max age and being retired / replaced which is normal and generally desirable. I wouldn’t worry about it unless you’re seeing performance issues and even then, the max lifetime isn’t necessarily the first config setting to start tuning.",1542644704.0
y0y,"Use 4-space indentation for code blocks on Reddit. Github markdown isn't supported, alas.

**question1**

Nope. That's it. I am not sure what actually happens behind the scenes, ie: whether `=> A` is just syntactic sugar for automatic call-site wrapping and usage-site unwrapping, but it's the equivalent functionality. That is to say, any expression passed by-name is executed every time the by-name argument is accessed by the function, equivalent to you having passed a function in yourself and then calling the function on every usage.

**repl (ammonite) output:**

    @ def byVal(x: Int) = {
          println(x)
          println(x)
       }
    defined function byVal

    @ byVal({ println(""test""); 5 })
    test
    5
    5


    @ def byName(x: => Int) = {
          println(x)
          println(x)
        }
    defined function byName

    @ byName({println(""test""); 5})
    test
    5
    test
    5

Notice how with `byVal`, we only see ""test"" printed once. This happens when the expression is evaluated *prior* to being passed into the function body - strict evaluation. With `byName`, we see ""test"" printed twice because it is executed each time the parameter is accessed inside the function body.

**question2**

Lazy vals are scoped to the function body and can be closed over like any other val. The difference is that the expression assigned to a lazy val is only executed upon the *first* usage of the val, after which it is *memoized* for the remainder of its scope lifetime - usually when the function body exits, but longer if it has been closed over in another function which is part of the return value. Note that lazy vals differ from by-name parameters in that expressions stored in by-name parameters are re-executed on *every* usage. However, the *scope* of the val doesn't change just because it's lazy.

    @ def foo() {
          lazy val x = { println(""test""); 5 }
          println(x)
          println(x)
        }
    defined function foo

    @ foo()
    test
    5
    5


    @ foo()
    test
    5
    5

Note how see ""test"" printed on both calls to `foo()`. This is because we execute the lazy expression on each invocation of `foo()` - the scope of the memoization is per invocation, like any other function-scoped val.

And when closures are involved:

    @ def foo(x: => Int) = {
        lazy val y = x
        () => println(y)
      }
    defined function foo

    @ val x = foo({println(""test""); 5})
    x: () => Unit = ammonite.$sess.cmd21$$$Lambda$1983/1698141055@41dd3d0f

    @ val y = foo({println(""test""); 5})
    y: () => Unit = ammonite.$sess.cmd21$$$Lambda$1983/1698141055@688bed52

    @ x()
    test
    5

    @ y()
    test
    5


    @ x()
    5

    @ y()
    5


    @ x()
    5

    @ y()
    5

Notice how we only see ""test"" printed on our first invocation of either `x()`and `y()` but not on later invocations of each, respectively? The scope of our lazy value in `foo` still exists per-invocation of `foo`, meaning that it isn't shared between `x()` and `y()` which hold the return values of two separate `foo()` invocations. But, we can see that both `x()` and `y()` have their own, individual value memoized which is why `y()` still printed out ""test"" after `x()` did.

By the way, there is a common pattern utilizing both by-name arguments and lazy vals. Let's say you have an expensive expression that you want to pass into a function by-name but which you also need to access multiple times. A by-name parameter alone won't suffice since it will execute it on every access. Instead, you use a combination of a by-name argument and a lazy val.

    @ def foo(expensive: => Int) = {
          lazy val v = expensive
          println(v)
          println(v)
        }
    defined function foo

    @ foo({println(""test""); 5})
    test
    5
    5

**question3**

Took me a minute to see what you were asking here, but I think I can help you out.

If we look at `constant`'s implementation, it does accept its parameter by-value which means it's strictly executed. Since the point of this function is to pass it a pure, constant value, this is, generally speaking, not inefficient.

    def constant[A](a: A): Stream[A] = cons(a, constant(a))

Here, we see it uses `cons` along with recursion. Two things to point out here. First, `cons`, being our constructor function, employs by-name parameters for both head and tail. That means that neither the constant value `a` nor the recursive call to `constant` will be evaluated within `cons` until they are used within it. And if we look at its definition more closely, lo and behold, it's using the by-name + lazy val pattern I described above to ensure we only ever evaluate `hd` and `tl` once and once only. `Cons`, meanwhile, accepts a thunk (zero-argument function/lamda expression) for each of its head and tail parameters, so when we get our `Stream` object back, we have still never executed `hd` and `tl`, and, thus, **if** `constant`'s argument was by-name, we still would never have executed it, not until we performed and operation such as `take`. You seemed to understand this much. So far, so good.

    def cons[A](hd: => A, tl: => Stream[A]): Stream[A] = {
      lazy val head = hd
      lazy val tail = tl
      Cons(() => head, () => tail)
    }

But, looking again at `constant`, we come to our second observation:

    def constant[A](a: A): Stream[A] = cons(a, constant(a))

Since we are using functional recursion, we can see that we will continue to copy the value of `a` and instantiate *new* `Cons` objects for each value accessed in our stream, even though there's actually only one real value since this is a *constant* stream. So, while it is efficient in terms of not re-evaluating the expression, it is inefficient from a data structure perspective. If we `.take(5)` do we really want to instantiate 5 separate `Cons` objects given that we *know* the value will be the same every time? Why not continue to return the *same* instance every time? That's what `constant_1` does to improve efficiency:

      def constant_1[A](a: A): Stream[A] = {
        lazy val stream: Stream[A] = Cons(() => a, () => stream)
        stream
      }

Sure, it is still taking its argument by-value, but instead of being a recursive function, it uses a lazy val. In scala, you can't define a val in terms of itself unless it's a lazy val. So, that's what's happening here. It then uses the `Cons` `apply` method directly instead of the `cons` constructor so that it can create its own thunk referencing itself, thus closing over the memoized value. I *think* `cons` would work just fine here, but it's unnecessary to have the extra layer of indirection / laziness when we're implementing it here directly anyway. Someone else can correct me if I'm wrong on that point.

Either way, this all means that as we continue to call methods such as `take` on the resulting `Stream` object returned by `constant_1`, we will continue to return the *same* object over and over, ie: the one defined in `lazy val stream`. No functional recursion is happening here, just the self-referencing kind. The object's `tail` is the object itself, so no new allocations are ever made.

In your ""improved"" version, you maintain the improvement of returning the same object, but what you've done is ensure that instead of the object storing the evaluated *value* of the expression `a`, it stores it *unevaluated* and thus must evaluate it on every usage. That's why you are seeing your printed statement on every `take`.

      def constant_2[A](a: => A): Stream[A] = {
        lazy val stream: Stream[A] = Cons(() => a, () => stream)
        stream
      }

You could achieve what you want by doing this instead

      def constant_2[A](a: => A): Stream[A] = {
        lazy val v = a
        lazy val stream: Stream[A] = Cons(() => v, () => stream)
        stream
      }

But, again, that's not really the inefficiency of `constant`. The inefficiency was in the object allocation due to the recursion.
",1542638329.0
qu1j0t3,"Re question 1, the compiler provides syntax sugar for by-name method arguments. A thunk (lambda with zero arguments) is equivalent in concept (if evaluating it has no side-effects) but if the signature is a lambda then you must provide a lambda value (e.g. \`\_ => ...\`). Another consequence of by-name sugar is that the compiler controls evaluation of the argument, while if a lambda is used, its evaluation is explicit in the callee (e.g. in the body of \`def x(foo: () => T)\`, it is evaluated by \`foo()\`). A third point about by-name syntax is that it is only available in method signatures. If you need lazy evaluation in other contexts (e.g. a member of a case class value), you must use a thunk (lambda). This is why Cons is defined in terms of lambdas. 

Re question 2, I think by ""scope"" you mean ""lifetime""? A lambda is just a value so their lifetime is the same as any other value. Creating a lambda value creates a closure as is familiar from any language with lexical scope.

Re question 3, not clear what you're asking. The by-value and by-name definitions seem to be behaving as expected?",1542638113.0
fwlega,"What's the FP side of the community advice on private methods? Many of the techniques of pure FP improve testability, but I've never seen a private method being tested during my Java days. Should private methods be avoided? Tested by increasing the scope of the method-in-test so that it can be seen by the test code? Am I overthinking this? :)",1543178661.0
Philluminati,"I asked a [question](https://www.reddit.com/r/scala/comments/9ud0bc/got_a_quick_question_ask_here_november_05_2018/e95d65p/) last time and wasn't really happy with the answers, so let me ask a more generic question:

If I type ""sbt test"" on a default Play application, how can I find out:

1. how many threads get used? Is there a jvm inspection tool I can use?
2. how would I configure this value?
3. Is there Play specific documentation anywhere?
4. why would future created like this `Future.successful(1)` ever timeout? If there are 50,000 other futures in the queue to run, or one blocking Future before it?
5. How can I reason about and debug Futures that timeout?
6. Why are people's solution to test failures immediately to switch off running in parallel?
7. I understand the fork-join executor queues Futures up and reuses threads. How can I see those queue sizes and manipulate and fix those types of issues?

It's frustrating that Futures are supposed to simplify concurrent programming, but given my issues, it's just moved the complexity else-where. How can I fill in the holes in my knowledge?",1542797026.0
Plysak,"Hi, I'm learning Scala (coming from F# and Haskell) and find curious the fact that the language seems to discourage function composition. When writing code in a functional style, I write small functions and then compose them into bigger functions. In Scala this is extremely tedious, the `andThen` and `compose` functions seem like an afterthought that no one uses, ever. Not to mention that not all functions are curried (seems to me that for-expressions could be a reason for this?) Can anyone tell me what the reasoning is behind this design decision? Or just point me to an article that discusses this.",1543420037.0
roelofwobben,"What is the best way to learn scala. I tried it by the books of underscore.io but when I try that knowlegde on ""real"" world problems like AdventOfCode I still have the feeling I miss something ",1543431928.0
vitalijzad,"Is it possible to automatically generate CRUD (create, read, update and delete) pages for different database tables in Play?",1542631681.0
lapelotanodobla,"Anyone with protobuf experience? 
I’m currently using scalapb but I don’t want to couple myself to the generated classes so I have to write mapping functions back and forth in every component...
I found protoless which seems a more direct translation between my model and protobuf, but it seems abandoned (and it also lacks verification between the .proto file and the encoding)

TL;DR, does anyone have a nice approach to use protobuf without writing boilerplate everywhere?",1542634617.0
Philluminati,"I used to use the release plugin to automatically commit a bumped version number for my libraries and stuff, but for security, my new stack (drone) can't run git commands such as tag or pushing commits.

What I'd ideally like is for my libraries to be tagged with a git sha and imported with them. Can that work in sbt? e.g.

    libraryDependencies += ""com.github.tototoshi"" %% ""scala-csv"" % ""7181eaff""

If not, the build environment can use tags with a git sbt plugin but as far as I can tell they always look for v1.2.3 style tags. I find tagging after every release a bit irritating and prone to mistakes. I've seen other teams in other languages successfully use a plugin that counts that number of commits from the last major version number so you would tag ""v.1.2"" and every commit after would be 1.2.0, 1.2.1, 1.2.2 etc (with branches being 1.2.1-bxx). Do any of the sbt git plugins other that feature?",1542705909.0
zzyzzyxx,"Is there a way to get SBT to check for the existence of an artifact in the `publishTo` resolver? I want to make my build fail fast before the compile/test/package steps if I can determine its publish will eventually fail due to a conflict. I have not been able to find anything in the release plugin that supports this, nor a path through an `sbt.Resolver` to an underlying Ivy `DependencyResolver` which does support such a query. I'd prefer to not have to have to issue and parse a curl command myself when all the pieces are theoretically available to give me the answer I want. So far Google and StackOverflow have not yielded anything other someone saying ""I do this manually"" and a years-old issue in the release plugin github that's sort of related but unresolved.",1542763613.0
guevesala,"What is the most widely used web framework for Scala programming? If it is Play, why doesn't Twitter use it?",1542792512.0
guevesala,Do you guys use Finatra at your work?,1543084236.0
fwlega,"If `MyContainer` is invariant, why does this compile? I guess I don't understand variance after all...

```scala
class Animal(name: String)
case class Duck(name: String) extends Animal(name)


case class MyContainer[A](value: A)


def doStuffWithAnimals(animals: MyContainer[Animal]): String = ""Stuff done""
doStuffWithAnimals(MyContainer(Duck(""Donald"")))
```",1543276760.0
7kemZmani,"Hello!

I have a simple word counter spark application, and the source file `src/main/scala/org/apache/spark/Counter.scala` looks like this:

    package org.apache.spark
    
    object Counter {
    	def main(args: Array[String]): Unit = {
    		val sc = new SparkContext(new SparkConf())
    		val lines = sc.textFile(getClass.getResource(""/Message.txt"").getPath)
    		val wordsCount = lines
    			.flatMap(line => line.split(""\\s"", 2))
    			.map(word => (word, 1))
    			.reduceByKey(_ + _)
    
    		wordsCount.foreach(println)
    	}
    }

in line 6, the spark context is reading the text file in `src/main/resources/Message.txt`

after building the source with sbt, I use spark submit to run the code, and it throws the following exception:

>Exception in thread ""main"" java.lang.NullPointerException  
>  
>at org.apache.spark.Counter$.main(Counter.scala:6)  
>  
>at org.apache.spark.Counter.main(Counter.scala)  
>  
>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  
>  
>at sun.reflect.NativeMethodAccessorImpl.invoke([NativeMethodAccessorImpl.java:62](https://NativeMethodAccessorImpl.java:62))  
>  
>at sun.reflect.DelegatingMethodAccessorImpl.invoke([DelegatingMethodAccessorImpl.java:43](https://DelegatingMethodAccessorImpl.java:43))  
>  
>at java.lang.reflect.Method.invoke([Method.java:498](https://Method.java:498))  
>  
>at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:775)  
>  
>at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:180)  
>  
>at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:205)  
>  
>at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:119)  
>  
>at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)

It seems that `getPath` is not providing a full path to `sc.textFile`,

any idea why?!",1543387229.0
fwlega,"To improve my Scala knowledge, I decided that I should read more Scala code and I started from \`monix/minitest\` (easy domain, has ""mini"" in its name and has Alex as its author: sounds like a great combination!).

&#x200B;

Minitest targets multiple runtimes: JVM, ScalaJS and ScalaNative. However, when loading the project on IntelliJ I always get an error saying it can't resolve ScalaCheck Native (\`unresolved dependency: org.scalacheck#scalacheck\_native0.3\_2.11;1.14.0: not found\`). 

&#x200B;

\`sbt compile\` and \`sbt test\` work fine. This is the first time I bump into a project that produces artefacts for multiple runtimes and I am a bit lost.

&#x200B;

Is there any recommended reading you guys suggest so that I'll be able to understand the build definition of this project? To be fair, I would just like the project to be indexed by IntelliJ as it makes a beginner's life easier :)

&#x200B;

Btw, suggestions for other, maybe simpler projects I should begin with are also a good answer :)",1543757701.0
vitalijzad,"The  speech\_number is an int, an empty string is not an int

Try this in the schema:

`{""name"" : ""line_number"", ""type"" : [""null"", ""int""]}`

Then pass nulls when they are needed.",1542627773.0
poluserthrowaway,"Bad news but you gotta hear so improvements can be worked on

Tldr:

Scala native is very damn slow, slower than jvm. Too slow. Don't even look.

My comment- the absolute first step is getting everything to work native. Optimizations probably won't even be a part of v1. ",1542683415.0
johnynek,Graal is really exciting. I hope to see more experience reports of the wins. Thanks to Twitter for blazing the trail on Graal in prod.,1542690152.0
know_not_much,"He has delivered a companion talk on deep learning as well. 

https://slideslive.com/38907971/dive-into-deep-learning-with-scala",1542575684.0
amazedballer,He talked about this at [Scaladays](https://na.scaladays.org/schedule/preparing-for-scala-3).  There are some patterns that are better expressed at a higher level.,1542405879.0
mlopes,"This is all nice and good until you realise that it brings yet more syntax to a language that is already syntax heavy (replaces 1 thing with at least 3). It also makes what are still essentially implicits less visible (specially the |=> business). Thirdly, it reuses `with`, so it introduces more syntax ambiguity.

So, while Odersky has a point about the implicits, witnesses seem like a bad solution that makes the language even more impenetrable.",1542420098.0
l-forite,"Do those changes go through the SIP process ? If not, why ? 

&#x200B;

While it's good to bring some novelties, they always seem super controversial when they are about language syntax changes; and rather spending X days coding the feature and arguing with the community afterward, why not proposing the feature and adopt it through the SIP process? 

&#x200B;

Is it because Dotty does not go through this process ?

&#x200B;

Thanks for enlighting me",1542458044.0
Krever,Sorry for the click-bait. I couldn't resist.,1542404374.0
sciss_,"Also

> `witness StringToToken for ImplicitConverter[String, Token] {`

this is so much more inelegant than

> `implicit def stringToToken(s: String): Token = ...`

Nothing is gained with introducing the `witness` keyword IMO. Except adding another keyword, and Scala 3 seems to already suffer a bit from keyword inflation. With this verbosity, it all starts to look like a version of Ceylon (in other words, awkward).",1542541114.0
kkchaurasia13,I just got comfortable with using implicits and use of it in typeclasses. Now again I have to start over :sad,1542431752.0
kudah,His proposal for witness-style implicit conversions seems to miss the ability to define dependent function implicit conversions.,1542456457.0
sciss_,"> Witnesses for Extension Methods

And there the new modifier name makes zero sense. What does `StringOps` witness?

It's an attempt to replace heterogenous uses of `implicit` with heterogenous uses of `witness`. The same with type classes, witnesses is not a good choice as a name. You gain near to nothing at the cost of having everyone learn new syntax. I'd say leave the witnesses with the TV crime series. Of course one would want a concise term, and seemingly one that works both as verb and noun. Perhaps `implicit` is quite good at this? Or probe a number of alternatives, `evince`, `manifest`, `case` (this would probably be best if it wasn't already taken), `instance`, `detail`, `member`, ...

Ok as an experiment, but for getting really into the language, I would recommend consulting a native English speaking person (otherwise the danger is running into things like 'pimp my library'), plus use names familiar in other programming languages.

-------

__Edit:__ In contrast, I find the change from second parameter list with `implicit` modifier to infix `with` quite convincing; having the same syntax for application seems very nice and clear. Also implicit function type `A |=> B` looks good to me.",1542534936.0
red__what,They can't go away soon enough.,1542416455.0
SQLNerd,"A new way to type implicits is not a solution to the mess that implicits brings. Also, this seems to be a nightmare for backwards compat efforts. 

Why not just work on enforcing good use of implicits via compiler flags?

These types of decisions are why people are saying that Scala 3 is a new language and not an upgrade to Scala 2.",1542457778.0
hyperforce,Shitty clickbait title.,1542480956.0
drinkaplentyofwater,Does anybody know if there is a future for Metals? Its github page still says it's an experiment.,1542452176.0
nornagon,How does this compare with [mill](https://github.com/lihaoyi/mill)?,1542400556.0
poluserthrowaway,"This may seem like bad form- mentionining competitors, but I feel like it needs to be noted that there area lot of sbt alternatives so that people don't assume sbt being default-

* cbt
* mill",1542433829.0
2bdb2,Anything that gets me closer to never using SBT again is a good thing in my eyes. ,1542385058.0
nutsack_dot_com,Private beta?  It doesn't seem like there's a lot of *there* there.,1542396067.0
lutzh-reddit,Announcement: https://twitter.com/propensive/status/1063231451125010432,1542377096.0
fwlega,There's a good talk from John going over what Fury is all about: https://youtu.be/OZoQmh0NR4w. ,1542410392.0
poluserthrowaway,I like their approach to testing if I understand it correctly its easier to write testonly and testquick kinda stuff. I don't know how mill handles this. ,1542435330.0
geggo98,"Nice!

Your lack of plugins could lead to a great feature: lightning fast Scala comes. The idea is to natively compile both, the build to and the Scala compiler with GraalVM. For the Scala compiler you would need different distributions containing different macros (or compile one distribution in the fly for the current project).

You would then have basically no startup time for each command and a much faster throughout in the computer. First benchmarks look really [promising](https://medium.com/graalvm/compiling-scala-faster-with-graalvm-86c5c0857fa3): no startup time, 30% more throughout.

This could become an USP for Furry that the competing build systems (SBT, CBT, mill) cannot easily get.",1542441630.0
threeseed,Be interested to see a comparison with Coursier. ,1542386125.0
affjskedbd,Maybe nice to add a disclaimer that dataArtisans provide commercial support for Apache Flink.,1542371565.0
geggo98,"The code looks quite readable and concise. I would wish for some tests, but that's not strictly necessary.

Nice!

You could add Scala Native or GraalVM to your build. Then you would get a statically linked binary file, that runs without any JavaVM.",1542356519.0
Philluminati,"So you want to turn (101,100,010) into (1,0,1,1,0,0,0,1,0) ?

    val a= (101,100,010).toSeq.flatMap(_.toString.chars)

Idk I’m on my phone, something like that?",1542392626.0
mkantor,"I don't think I understand exactly what you're looking for, but if you just want to count all occurrences of each number then you could do something like this: https://scastie.scala-lang.org/QVRKf2scQayK9zbrJIK5Dg",1543960263.0
fwlega,"I did this workshop and it is really good for people with an OOP background. I found it specially good to build a notion of the big picture, something I couldn't get by reading blog posts. And John is a really cool guy. He's always keen to answer every question the group has and he's okay with spending time explaining some detail the group finds confusing. This interactivity is a real plus as opposed to just watching talks online. If you can afford to pay it (companies usually have budgets for staff training), I recomment it.",1542561364.0
emilypii,"Dude is going around offering world class training and the best the Scala community can muster are some snide points about whether or not he's involved in Scala anymore, and downvoting his training course. Real class act, Scala.",1542489461.0
agbell,"I just went to this training in San Francisco and loved it.  You will read and write a lot of code, in a structured format, where code builds up in complexity.",1543171962.0
sudkcoce,I thought this bloke abandoned Scala. ,1542344902.0
Martissimus,A possibly better alternative to learnings answers to those questions is learning scala.,1542268604.0
monkjack,If you need a guide to tell you what a case class is then you'll not get far in a real interview.,1542274471.0
StrangeAeons,Half of these are just plain wrong.,1542282231.0
PrimozDelux,This is spam ,1542315955.0
sake_92,You can bundle it in an uber JAR and then `java -cp my-jar.jar MyMainClass`,1542266979.0
Holothuroid,"So what's your problem? - `s""""""${args.directory}/data/${args.fileName}""""""`

Or are you looking to make your own interpolator with custom prefix and return type? @propensive has you covered there: 
https://www.youtube.com/watch?v=8adgkDUUxDU",1542219125.0
naftoligug,"What do you want to do, produce a separate `String` for each pair?

Also, is it really `Map[String, String]` -- only one file per directory? If so you can do

```scala
for((dir, file) <- args) yield s""$dir/data/$file""
```

If you have a `Map[String, Seq[String]]` you would do

```scala
for((dir, files) <- args; file <- files) yield s""$dir/data/$file""
```
",1542389210.0
gmartres,Have a look at https://github.com/scala/scala-dev/issues/139 and https://github.com/scala/scala-dev/issues/559,1542239729.0
Milyardo,"Scala already does releases every 6 months and done so for some time. As for specific JDK features, many of the things you list exists has improvements in the Java language/compiler and don't have a bytecode or VM feature to implement. Others you listed aren't finished features, or features in preview.",1542230434.0
nutsack_dot_com,Is this homework?,1542302688.0
kbielefe,"The most noticeable difference between a `Task` and a `Future` is a `Task` is lazily executed. That has benefits like not having to track the execution context everywhere, and is sometimes simpler to compose a lot of tasks together because you don't have to create it at the point where it's okay to immediately start executing. However, there is nothing you *need* Monix to be able to do, and it requires a shift in your thinking to use cleanly. It's largely a matter of style and preference.",1542214304.0
paul_f_snively,"I think, if you look at [http4s](https://http4s.org) and [Doobie](https://tpolecat.github.io/doobie/), with whatever effect monad has the appropriate Cats typeclass instances (which [Monix Task does](https://monix.io/docs/3x/intro/cats.html)), you'll find that describing _exactly_ the behavior you want—not more, not less—including concurrency, error handling, data conversion, all of it—becomes significantly easier.

As I pointed out in another thread, one case in point is precisely `traverse` or `sequence` on `Future`. They don't belong on `Future`; they belong on a typeclass called `Traverse`, and additionally require that the elements of the `Traverse` have instances of a typeclass called `Applicative`. In the Cats ecosystem, that's where they are. So you absolutely can have a `List[Task]` and `.sequence` it, or better yet, `.parSequence` it because [Monix Task has a cats.Parallel instance](https://monix.io/docs/3x/eval/task.html#parallelism-catsparallel).

The larger point to me, however, is: there is a limited sense in which _just_ switching from `Future` to `Task` makes sense. Switching to `Task` mostly makes sense if you're going to take advantage of more of the FP ecosystem, which is why I mentioned http4s and Doobie above. Grafting pure FP constructs like effect monads into non-pure-FP constructs like the rest of the Scala ecosystem is part of what tends to persuade people that ""pure FP isn't worth it"" (ironically, when they aren't doing anything near pure FP). It's really when your whole program is just an expression, the types line up, and your effects are guaranteed to happen when they're supposed to, and _only_ when they're supposed to, that the approach really shines.",1542326892.0
pixelflat,"We started with `Future` as well but later moved to `Task`. Other than the benefits /u/kbielefe already mentioned, it is sometimes a lot easier to do [parallel processing](https://monix.io/docs/3x/tutorials/parallelism.html) (batching / limits). And it also has an `Observable` implementation.",1542276454.0
joshlemer,"Removing for not being a post with actual specific questions about Scala. I'm not going to say that homework assignments are always forbidden, but they should at least be actual well-formulated questions about Scala, not just asking for PM's of help.",1542213729.0
jackcviers,"Um. We don't do homework here. What you need to do is look up what you want to do and do it. 

&#x200B;

If it really is a small bit, here's how you can make progress, quickly:

&#x200B;

1. Use the repl. That's sbt console. Copy and paste your code into it. It will fail when things don't compile.
2. Map out your types from what is coming into your code to what you want your code to be:  
Map\[String, Char\] => List\[Char\] => (Foo => (Foo, String)) => (Foo, String)
3. Write function signatures that match your types  
val mapToList: Map\[String, Char\] => List\[Char\] = ???  
val listAndFooAdder: List\[String\] => (Foo => (Foo, String)) => (Foo, String) = ???  
val assignment: Map\[String, Char\] => (Foo, String) = ??? //use partial application (google it) and function composition (google it) to combine your previous two functions.
4. Write some simple tests that call your code and assert an equality on the return.

If you do things this way, you will end up with many small, independent parts that are easy to test and build together. The type signatures will help you understand how to implement them. If you get stuck on one particular problem, move on to the next one. Repeat till you are done.

&#x200B;

If you fail, you will have learned an important lesson about procrastination. The sidebar has a ton of info. For specific questions, (not answers to homework, but things like, what is map), you should be able to look them up on stack overflow.

&#x200B;

Good luck.",1542211318.0
joshlemer,"I'll leave this here because there's already discussion in this thread, but for next time, if there is a Who's Hiring thread on the front page, like there is right now, please post these advertisements there.",1542213797.0
cwblon,160k? Can you afford rent and food or do you have to sleep at the office?,1542199412.0
EdmundWorks,"Bit more info on this one, they are open to paying a relocation package within the USA if you're keen on a move to the Bay Area. There product is an IoT air quality device, they've got some great enterprise level applications as well including in the Salesforce building! The last engineer I placed there speaks very highly about life there, and points to getting to work closely with each team, from hardware engineers to data scientists and the technical challenges of building a backend that ingests real-time data from 6 different sensors in the device as some of the standouts. FYI, he was primarily from a LISP background, so if you've been using another JVM language and can demonstrate projects in Scala I can definitely advocate for you. The job posting lists commercial Scala experience as a requirement but I have a good relationship with the technical team there and can make a case for a strong Java engineer who is excited about using Scala in production if we both feel its a good match!",1542195237.0
Sarwen,"Oh sounds great!! Here is the question I would like to ask:

Considering that both languages are going towards dependent types, dependent object types for Scala and DependentHaskell to Haskell. I wonder how they plan to handle proofs.

More precisely DOT would benefit greatly from the ability to witness equalities of paths and could rely on a solver to do so like FStar does with Z3. Is it something that is studied/planned? Same question in Haskell about plans to integrate Liquid Haskell ideas into mainline GHC.

Thank you very much.",1542148900.0
amazedballer,"One of the things that interests me about Scala is all the things that fall out of implicits -- the typeclass pattern, implicit contexts, and so on.  It's clear that implicit function types will provide far more power in terms of providing an implicit context to Scala (and possibly a step towards coeffects?), but to what extent are the use case scenarios are planned, rather than happy accident?  Put another way, has there been anything surprising that has popped out of the language that you didn't expect?",1542126096.0
valenterry,"We will probably get heterogenous lists built into the language / std lib in a generic form. Will we also get the same for coproducts?

Can pattern matching be made to just be syntatic sugar, built upon plain old functions and types when we have the generic products/coproducts, similar to for-comprehensions? (at least for the typesafe part of pattern matching - compare with the scalazzi subset of Scala)

&#x200B;",1542138906.0
poluserthrowaway,"I would ask him what the intended audience and use case for Scala native is. There are a lot of wonderful native languages right now with a great ecosystem of their own. Where does he see scala-native fitting in, and as a niche language or a general language? Who would the users be? 

I would follow up that with whether a Scala.NET wouldn't be a much better choice, more appealing to the kind of audience using Scala? 

I am a developer invested I Scala and my selfish reasoning is that any effort should play to Scala's strengths. I don't mean this to belittle Scala.native. If anything, I admire the thinking both as a research work and as the implementation that I tried so far. And I of course love scala-Js and would love if there were more optimizations in that space, and perhaps some marketing once it reaches 1.0 

Edit: Also- who would he ideally but realistically like to see use Scala.native, if that's different from my first question.",1542184421.0
bas_mh,"Some questions that I have:

* Given that you could talk to yourself (and other core developers involved), what would you tell yourself? In other words what are some design decisions that are there because of backwards compatibility reasons that you wish would be different? For instance, would it be make sense to make all classes and methods final by default, and only open for extension deliberately, like Kotlin has?
* Scala has always been about mixing types, objects and functions. How does imperative programming play in this (imperative in my mind is not the same as object oriented)? Especially given that imperative programming is quite contradictory to functional programming. Is imperative programming just there for Java interop and performance reasons? And how will this be in the future? Are \`var\` and \`while\` part of idiomatic Scala?
* How do you want Scala (or Haskell) to look like in 10 years? What are some larger things on the horizon that will not make it any time soon?
* What is a third-party library that conveys the spirit of the language the best in your opinion (can be answered for both Scala and Haskell)?",1542202399.0
pedrorijo91,"now that I see this thread, I think my question could fit here: https://www.reddit.com/r/scala/comments/9x25zt/whats_the_scala_plan_to_keep_up_with_the_new_jdk/?

> 
> JDK started releasing new versions at every 6months. What's the scala plan to keep up with the new release cadence?
>
> furthermore, are there any plans to use new java and jvm features to backup scala features, probably increasing performance and/or bytecode generation? for instance: java var, value classes, records, and maybe even fibers/coroutines?",1542228377.0
kudah,"What do you think of the recent practice of tagged types (e.g. `shapeless.tag`, creating subtypes out of nothing with casts)? Is there an overlooked design opportunity for a language / type system that cleanly separates nominal and structural typing, allowing direct manipulation of nominal tags over underlying structurals - like Haskell's newtype coercions, but first-class, with subtyping and multiple tags?",1542235041.0
sciss_,"Scala is often described as having the feel of a dynamic language. Personally, I find it very nice as an embedded language, running in a REPL or interpreter. I don't know enough about the ultimate goals and developments of TASTY, but my feeling is it will open up the possibilities for using ""interpreted Scala"" with less clunkiness of dealing with IMain, class loaders etc. and perhaps gaining on the latency front (response time to executing code compiled on the fly), also making it more safe to store serialised / half-compiled code. This is something I'm struggling with in my computer music environment, along with the fact that there is no ""IDE library"", a modular system that allows me with relatively managable effort to embed a Scala development environment (even just a customisable powerful editor) in my desktop applications. So this compiled language versus developing ""interpretedly"" in a running system is something that where I would be interest to hear perspectives and visions. I guess SPJ could chip in as well, since Haskell has actually gotten popular with a number of music live coding people (more than Scala). A perhaps related matter is platforms on which the languages run - is WebAssembly an interesting target?",1542144732.0
yawaramin,My question is: is there any work to bring effect handlers (like Koka or future OCaml) to Scala? Or maybe an effect tagging system like Nim?,1542151200.0
Philluminati,"On the Scala marketing side, what impact is Kotlin having on the language in terms of adoption? Is it a half-way house in terms of Functional programming that people will regretting not committing all the way and coming to Scala?",1542131480.0
new--kido,"I'd ask about the nature of open source and how important it was for the development/take up of their languages.

Also what's this event - will be it streamed?",1542190129.0
ScottSkillsMatter,Thank you for some amazing questions so far!,1542207398.0
ScottSkillsMatter,"Hello everyone, just want to say thank you for all the questions provided, we've put them together for the event in December. I'll update you with the recording when it goes live!",1543232102.0
pellets,"In `ExternalService.doException` you throw an exception immediately rather than inside an AsyncResult. You need to create the AsyncResult or Future first. I don't know about your AsyncResult, but if you were using `scala.concurrent.Future`, you could do it like

      def doException(): Future[Int] = Future.failed {
        println(""do exception"")
        new NullPointerException(""run time exception"")
      }

which creates the result in the current thread, or

          def doException(): Future[Int] = Future {
            println(""do exception"")
            throw new NullPointerException(""run time exception"")
          }

which creates the exception in another thread.",1542124549.0
joshlemer,"I'm going to remove this and ask you to repost your job posting in the Who's Hiring thread, which is currently almost at the top of the subreddit. ",1542129068.0
RandomName8,I am utterly confused by the presence of this post in this subreddit. And why would the person tag it as scala and ocaml?,1542058466.0
kag0,"A JOSE (including JWT) library focused on simplicity of use and type safety.   
It's currently listed on jwt.io and looking for contributors / feedback!
https://github.com/blackdoor/jose",1542164655.0
sake_92,"Trying to make Scala spec PDF: https://github.com/scala/scala/pull/7432
Download here (1,5 MB): https://www.dropbox.com/s/8acy7qrwuicaw9u/Scala%20Spec.pdf?dl=0",1542274850.0
dehun,"I am writing series of articles about programs composition in scala - mtl, tagless final, free. 

Part 1 - [http://dehun.space/articles/29\_oct\_2018-Better%20than%20IO,%20part%201.html](http://dehun.space/articles/29_oct_2018-Better%20than%20IO,%20part%201.html)

Part 2 - [http://dehun.space/articles/15\_nov\_2018-Better%20than%20IO,%20part%202.html](http://dehun.space/articles/15_nov_2018-Better%20than%20IO,%20part%202.html)

Feedback would be appreciated!",1542482051.0
Linq20,"Paytm | Software engineer / data engineer / data scientist | Toronto, ON | onsite | full time | competitive

Option for travel if that's up your alley.

",1542030998.0
Nihilisteria,"Citrine | Backend, Frontend, Infrastructure, and Scientific Software Engineers | Redwood City, CA; Pittsburgh, PA, Remote (US only) | | ONSITE or REMOTE (US only) | Full-time | [https://citrine.io/](https://citrine.io/) |

Contact Info : You can PM me here, or reach out at apatel AT citrint DOT io (I am an engineer with backend team)

Citrine Informatics is building the next-generation materials development platform from the ground up, using the power of domain expertise, data, and machine learning to bring new materials to market faster, and capture materials-enabled product value.

The org is remote friendly, especially engineering, where a 50% of us are remote FT (Seattle, Salt Lake City, Ann Arbor, Tampa to name a few).You can also work out of our offices in Bay area (Redwood City), Pittsburgh, choice is totally yours.

Positions:

* Scientific Software Engineer : https://citrine.io/careers/#scientific-software-engineer

* Backend Eengineer : https://citrine.io/careers/#senior-backend-software-engineer

* Infra Engineer: https://citrine.io/careers/#infrastructure-engineer

* Full Stack Engineer: https://citrine.io/careers/#senior-full-stack-software-engineer

* Link to general job page: https://citrine.io/careers/

Tech stack (Just for the feel of it, please dont hesitate to reach out even if you don’t tick everything below)

Backend: Java/Scala, Ruby (RoR), Python


DS: Scala, Python

Frontend: Angular, React

DataStores: PostgreSQL, ElasticSearch, DynamoDB, Redis.

Others:  AWS, Jenkins, JUnit, Maven, SBT, etc.",1542129072.0
colindean,"Arcadia.io | Multiple | Pittsburgh, PA, USA / Boston, MA, USA | ONSITE | Full Time

We're a data analytics firm currently focusing on healthcare in the population health space. We've got a customized big data processing stack built on top of a host of open source software packages. 

Most teams are writing new software in Scala and Groovy. The main customer app is Ruby on Rails. My team has a Ruby on Rails app as well as Rust app in addition to our Scala apps.

Our big data engineering team is mostly in Pittsburgh with a few positions in Boston, where the company is headquartered. Some teams are more remote-friendly than others but no positions are full-remote.

https://careers-arcadia-io.icims.com/jobs/search?ss=1&searchCategory=55145&searchLocation=12781--",1542046551.0
labyj,"Lucid Software | Software Engineer in Application, Dev Tools, or Site Reliability Engineering | Salt Lake City, UT, USA | Onsite | Full Time


Lucid Software is the creators of Lucidchart and Lucidpress - world-class web applications that push the boundaries of what is possible in your browser. The entire application back end is written in Scala. The frontend stack uses TypeScript, Angular, WebGL, and the Google Closure Compiler. The build system is Bazel. We are hosted in AWS.

We are a ~400 person company outside of Salt Lake City Utah, that is growing like mad. 

We are looking for 

- Application engineers to help build applications that users love.
- Development tools engineers to help build a development experience that engineers love.
- Site reliability engineers to help build a scalable, reliable, and performance production system.

More information and the application can be found here

- [Application Engineer](https://www.golucid.co/careers/f9cb83be-e016-4be5-91dc-598e17e8d04c?team=Engineering)
- [Development Tools Engineer](https://www.golucid.co/careers/c8de139c-6da7-44dc-a4af-95052aa2a086?team=Engineering)
- [Site Reliability Engineer](https://www.golucid.co/careers/be16cacc-4cd3-4be0-9ec0-070646f9ec69?team=Engineering)

Please DM me if you would like to chat about any of the positions. Please mention this Reddit thread if you apply :D",1542140922.0
incrowdjobs,"**InCrowd | Mid - Senior Backend Software Developer | Watertown, MA, USA | Onsite | Full Time**

&#x200B;

Simplify, Automate and Disrupt

&#x200B;

InCrowd is changing the way Life Sciences companies do primary research about their products. The InCrowd dev team has already created a revolutionary self-service survey engine that allows customers to achieve in days what previously took weeks. We're building on that success to transform other areas of research through automation and simplification.

&#x200B;

We're Agile and Semi-Full-Stack

&#x200B;

We follow the agile methodology pretty closely, with two week sprints, daily scrum, and retrospectives. We're also striving to increase our ""bus number"" by working across disciplines often.

&#x200B;

In this role you'll be an integral part in improving our existing Scala API and helping us take it into the future as we build out our next series of event and data driven services.

&#x200B;

**Responsibilities:**

Build internal and external facing APIs that are easy to reason about, testable and scalable

&#x200B;

Work closely with product, design and stakeholders to plan new features that help our users streamline their workflow

&#x200B;

Identify and improve performance bottlenecks in existing services

&#x200B;

Help onboard, mentor and grow junior developers into the codebase

&#x200B;

**Minimum qualifications:**

BS degree in Computer Science or related technical field, or equivalent practical experience

&#x200B;

3+ years experience with Scala in a production environment (Scala is preferred however, we are more than happy to talk to Java developers who are interested in learning Scala. In this case, some previous exposure to functional programming languages or the Java Streams api would be beneficial.)

&#x200B;

A strong understanding and production experience with SQL/RDBMS. Comfort with NoSQL databases desired

&#x200B;

**Bonus Points:**

You value test driven development and have experience with testing in production (ScalaTest, ScalaCheck, JUnit)

&#x200B;

Experience with some of the following: Cats, Scalaz, Monix, Shapeless, Doobie, HTTP4S

&#x200B;

Front end experience with Javascript in a production environment (additional bonus points for React)

&#x200B;

Production grade devops experience with AWS and Docker

&#x200B;

**Tech Stack:**

Scala (Play, Akka, Monix), some backend services in Racket, JavaScript

&#x200B;

MySQL, DynamoDB, Kinesis, SQS, S3

&#x200B;

AWS Lambda (Java, Node and Python)

&#x200B;

**Company Benefits:**

Stock options

Health Insurance at 70-80% paid

Generous vacation time

401k

Flex remote days

Weekly catered Lunches

Modern, comfortable office (cafeteria and gym onsite)

&#x200B;

Please email [techjobs@incrowdnow.com](mailto:techjobs@incrowdnow.com) with your resume to apply",1542218112.0
valenterry,"**Hivemind-Technologies | Scala Developer | Cologne, Germany | ONSITE or REMOTE (EU/EEA only)**

**Contact:**

[jobs@hivemindtechnologies.com](mailto:jobs@hivemindtechnologies.com)

You can also write me a private message if you have any questions. :)

**About us:**

Hivemind Technologies specializes in the development of high-performance and scalable big data systems. We help our customers gain more from their data and advise them how to use state-of-the-art technology to process, store and analyze their data.

We are a small team of skilled Scala developers which like to write pure functional and clean Scala code. We are working mostly fullstack with little frontend but quite a bit of DevOps. Our stack includes a lot of OSS, including Jenkins, Spark, git, kafka, elasticsearch and libraries including cats, circe, monix, fs2, akka streams, http4s and shapeless. We make heavily use of AWS and cloud computing.

We are  nice work with, we have flexible working times and embrace  remote work. We also sponsor visits to conferences and are offering free coffee and fruits in the office.

Remote work is possible for all EU / EEA nationals or when having permission to work within Germany and live in one of these timezones: GMT, CET or EET. (No Visa sponsorship)

Also visit **our website** for a more detailed job description:

[http://www.hivemindtechnologies.com/jobs](http://www.hivemindtechnologies.com/jobs)",1542794718.0
Graf_Blutwurst,"So I am currently tinkering around with pretty much exactly the same problem. A better interim solution is to use `mapPartitions` rather than `map` this will allow you to use caches per partition rather than per row. 

Now basically the problem is that you end up with `Dataset[IO[A]]` and I don't know if it's even possible to sensibly implement a `.traverse` for `Dataset` let's assume no for now. So for now you probably have to do `.unsafeRunSync` in your `mapPartitions`. Frameless might be interesting but I do not know how they do suspension internally. 

I am currently trying to figure out how to keep cache state alive over the whole executor lifetime using broadcasts but this will be impure code due to spark. Basically after each `mapPartitions` iteration you'll have to pull out cache state and put it into the broadcastable but I haven't figured out yet how to do this for things that aren't serializable. This should be possible because everything can be executor local.",1542019140.0
asdrubale33,"The cache should be created probably once in your main program, not for every time you run unsafeRunSync.",1542008357.0
chuwy24,"We'll have exactly same task soon and I *think* we should not have a problem if we won't call `unsafeRunSync()` in each `map` invocation, but instead wrap everything in `IO` in driver. At least this is how I see Frameless' approach with [SparkDelay](https://github.com/typelevel/frameless/blob/master/dataset/src/main/scala/frameless/SparkDelay.scala) ([instance](https://github.com/typelevel/frameless/blob/master/cats/src/main/scala/frameless/cats/SparkDelayInstances.scala)).",1542011675.0
pellets,I would use a broadcast variable. [https://spark.apache.org/docs/latest/rdd-programming-guide.html#broadcast-variables](https://spark.apache.org/docs/latest/rdd-programming-guide.html#broadcast-variables),1542124899.0
volpegabriel,"As someone already mentioned the `Cache` should be shared with the components that need to access it. So basically `flatMap` once and pass it as a parameter.

And I would go even further and say that wrapping all the side-effects in `IO` does not mean you're doing FP. I gave a talk about it at Scala IO and going to give a similar talk later this year at Scala eXchange where I talk about ""wrapping all the things in `IO` is not FP"".

TL;DR is abstract over the effect type `F[_]` and operate over interfaces (tagless final algebras).",1542140123.0
gapuchia,Could you provide a snippet of how you are mocking the object?,1542010856.0
Philluminati,"Sounds like you're not using the mock because it's not injected or provided correctly. In a lot of languages doing this `val m = mock[Object]` means all behind-the-scenes-calls to `new Object()` would return the mock instead, but in Scala you need to need to do the wiring yourself.",1542036405.0
whale_song,"I love how every single one goes like:

""So many tutorials about __ are so confusing and overly complicated. I'm gonna break it down for really simple and show you that theres no reason to be scared of it!""

_proceeds to give extremely confusing and esoteric explanation just as bad as all the others_
",1541975393.0
George_Kush_Sr,"I gave up. I got A's in Real Analysis and Abstract Algebra but I have no idea what a Monad is - no thanks to Youtube video #420. 

I mean I can look at a definition and all, but I haven't internalized why I care yet, I guess. ",1541993857.0
y0y,"Can you map it? Probably a functor.

Can you flatmap it? Probably a monad.

Can you combine it? ...maybe a monoid.

I have yet to figure out applicative functors well enough to give it such a short definition. ",1541985762.0
vagol942,"Stuff like this always reminds me to the eightfold path to monads on ""What I wish I knew when learning Haskell"":

1. Don't read the monad tutorials.
2. No really, don't read the monad tutorials.
3. Learn about [Haskell types](http://book.realworldhaskell.org/read/types-and-functions.html).
4. Learn what a typeclass is.
5. Read the [Typeclassopedia](http://wiki.haskell.org/Typeclassopedia).
6. Read the monad definitions.
7. Use monads in real code.
8. Don't write monad-analogy tutorials.

I'm sure there is a Scala version somewhere, but the first 2 and last 3 apply to every language.",1542014072.0
Plippe,"Hey, 

I understand it isn't particularly easy to jump from hello world to real FP applications. I would advice to write small applications over, and over again. Apply a new concept each time. 

An easy way to go about it is with [https://typelevel.org/cats/](https://typelevel.org/cats/). Go through each data type, and then type classes. This will help you generalise your code. Build on top of that with [http://http4s.org](http://http4s.org) for websites, [https://tpolecat.github.io/doobie/](https://tpolecat.github.io/doobie/) for SQL, and [http://fs2.io](http://fs2.io) for streams.

Rome wasn't built in a day. Just stay strong, and you will get there.

Good luck",1541974115.0
shawty-13,I found that watching videos didn't help but as soon as I started looking at examples it all made much more sense ...,1541995462.0
Macrobian,"A monad is just a monoid in the category of endofunctors, what's the big deal?",1541981587.0
Storini,"I really liked John de Goes' presentation on Free Applicatives: [https://www.youtube.com/watch?v=H28QqxO7Ihc](https://www.youtube.com/watch?v=H28QqxO7Ihc) . It might seem that taking things up to the Free level would complicate things further, but I found the conceptual insights presented there very helpful in clearly distinguishing the underlying concepts.",1542060368.0
valenterry,"You have four options here for making `SomeCompositionFunc(Seq(f1, f2, f3))` work.

1. Give up the syntax and write `f1 andThen f2 andThen f3` as suggested by /u/Milyardo
2. Give up on types and compiletime safety and write a reduce function that works on Any and composes them via reflection.
3. Use a datastructure that captures all the types and combine them at typelevel. You could use shapeless `HList` and it would look like this: `someCompositionFunc(f1 :: f2 :: f3 :: HNil)`  and it is composable, i.e. combine a few functions, storing the result in a val and then combining that with some more functions and so on.
4. Use macros (please don't...)

Honestly, if your motivation is only about syntax, go for first solution. The ones writing this will probably be able to cope with it.",1541885281.0
Milyardo,"Is there a reason you want put these functions into a `Seq`? It's unclear why you would bother with the collection at all and just do `val f4: Int => Double = f1 andThen f2 andThen f3`? Are you attempting to generalize over `andThen` to replace composition with your own operator?

   ",1541836945.0
mlopes,"If you have a function from A => B and a function from C => D, by the very nature of composition, you can’t compose them. What you can do, is create a third function that knows how to make a C out of a B (B =>C) and compose the three functions instead C => D • B => C • A => B, which will give you a function from A => D.",1541817635.0
emilypii,"If you're interested in getting involved, you should look at contributing to the new [scalaz-actors](https://github.com/scalaz/scalaz-actors) project. I hear it needs maintainers :) ",1542048904.0
pm_me_broken_code,Thanks for creating this! Have you seen akka typed? What is different with your project?,1541866314.0
domlebo70,This is very cool. ,1541981973.0
vitalijzad,[You can use the Cassandra Alpakka connector](https://developer.lightbend.com/docs/alpakka/current/cassandra.html),1541796370.0
kpws,Just in time for the Scala 2.13 release,1541801300.0
dave4420,"What does “experimental Scala 2.12 support” mean?

- are there known bugs or limitations around using Spark from Scala 2.12?
- is there a lack of test coverage around using Spark from Scala 2.12?
- is it simply that it’s not as battle-tested?
- something else?",1541826305.0
janstenpickle,"I understand it's been a long road to support for Scala 2.12. Spark has always been a driving force behind adoption of Scala in a large number of workplaces, so it is great to see the continued support for new language versions.

If any of the dev team are reading this I'd just like to say a huge thank you for all your hard work and continuing efforts. Great job!",1541840044.0
super__mario,"Support for Scala 2.12 is ""experimental"". Also, does not run on JDK 11. Runs fine on JDK 8.",1541870459.0
RandomName8,finally,1541801736.0
DannyDeck,*Experimental* Scala 2.12 support,1541809818.0
denisrosset,"I'd love to have integer literals like `-10` or `9,223,372,036,854,775,808` not correspond directly to the primitive `Int` type, but be promoted to whatever type is required (with a warning or error if it does not fit exactly), given that the type represents a mathematical ring.

It's so painful to special-case `Int` everywhere in mathematical code like Spire, for example to handle expressions like `p + 1` where `p` is a polynomial over the rationals.

There could be a special syntax for `Int`-typed literals such as `-10i` or `-10int`.",1541799152.0
Milyardo,https://www.youtube.com/watch?v=bxU2eqZtYmc,1541788787.0
HaydenSikh,"For context, here's what Scala collection corresponds to a selection of some Java collections, at least logically if not in terms of implementation:

| Java                                                     | Scala                                          |
| ----------------------------------------------- | --------------------------------------- |
| interface List<A>                             | trait Seq[A]                             |
| A[]                                                          | Array[A] extends Seq[A]    |
| ArrayList<A> extends List<A>    | Vector[A] extends Seq[A] |
| LinkedList<A> extends List<A> | List[A] extends Seq[A]        |

Since each of the Scala variants shown are sub types of Seq[A], calling toSeq is just a cast with no overhead.  Converting between Array[A], Vector[A], or List[A] on the other hand will result in data being copied since each has different levels of chunking in memory.  Also note that when creating a Seq[A] through Seq.apply -- for example, like Seq(1, 2, 3) -- then that will end up using a List[A] as the concrete class.

In general I'd recommend defining APIs in terms of Seq[A] since in most cases how the data is laid out in memory is not as much if a concern as how the data is used.  By keeping the API in terms of the trait you encapsulate the implementation detail and make it easier to switch to another implementation if desired.  Of course, if the consumers of your APIs **do** care about how data is laid out in memory then by all means do include that info in the API.

Iterators are a different beast.  In both Java and Scala the only guarantee is that you can get the next element so long as there is one, but no way to look at past elements nor any guarantee that elements exist in memory until you retrieve it.  Calling toSeq changes the implementation to one that guarantees that previous elements can be processed again, and doing something like toVector on it will also eagerly pull remaining elements into memory.

If you know that you only needs a single pss over data, then keep it as an Iterator[A] for the reduced memory footprint.  If you'll need multiple passes over that data then converting to a Seq sooner rather than later will reduce the scope in which some code could inadvertently call the `next` method and make some data unavailable for reprocessing.",1541745505.0
Redundant_Randy,"The built in converters are usually efficient. This is due to polymorphism: the conversion methods have the runtime type of the object, so they can be written to be better optimized for them. You might be able to manually write a slightly faster converter manually if you check the runtime type, but it isn't worth the hassle. The docs usually do a good job with telling you what they do, mostly indicating whether a copy is made or if it's lazy.

A lot of the time, no copy needs to be made. If the runtime type is a subtype of the converted type, then the converter will return the object itself. It's essentially a type caste.

If the type is similar to the converted type without being a subtype, then it can use a wrapper class without copying the data.

This can cause strange behavior though if you convert from a mutable collection, as mutating it could change the data held by the conversion result. If you don't want the result to mutate, then make sure you explicitly convert it to an immutable collection, which forces it to copy.

For your function, just return the `Iterator[Array[String]]`. It's already a subtype of `Iterator[Seq[String]]` so there is no reason to convert anything.",1541745914.0
gmartres,"> When it comes to the various collection converters, is there any cost to using them?

Yes, you're creating a new collection and adding N elements into it, so the cost is linear in the size of your collection. If you want to avoid that, you can use [JavaConverters](https://www.scala-lang.org/api/2.12.7/scala/collection/JavaConverters$.html) which _wraps_ the underlying collection instead of copying it. You could also just not convert it at all and use the Java APIs.",1541763953.0
walksinsmallcircles,Each collection’s underlying storage mechanism has its performance strengths and weakness and you would do well to study them. I suggest you start [here](https://docs.scala-lang.org/overviews/collections/performance-characteristics.html). I base my collections choice on the problem at hand. Also be aware that some collections are pure types and could represent one of many underlying storage mechanisms. [Seq](https://www.scala-lang.org/api/2.12.0/scala/collection/Seq.html) that has many subclasses including List and ArrayBuffer which have very different storage mechanisms. ,1541740836.0
simon_o,I'd recommend avoiding Scala collections completely and using Java streams instead. They are the wrong choice if your collections are large or performance is important.,1541787671.0
ARainyDayInSunnyCA,"The contents of the resources directory is put at the root of the JAR.  You should be able to load them consistently using

    getClass.getClassloader.getResource(""README.txt"")

or

    getClass.getClassLoader.getResourceAsStream(""README.txt"")

I believe that will only work for the packaged files but not for directories; you can load files nested under a directory but not list the contents of the directory.

Since this is bahavior inherited from the JVM doing searches for the Java way of loading resources would lead you in the right direction if you need further details",1541728302.0
amazedballer, Don't use scala.io.Source.  Use `class.getResource`.  Also note that `class.getResource` behaves differently from `classLoader.getResource` in how it [finds resources](https://stackoverflow.com/questions/6608795/what-is-the-difference-between-class-getresource-and-classloader-getresource).,1541731426.0
Itakitsu,Almost missed the buzzwords ty for boldfacing,1541693882.0
runT1ME,Verizon?,1541696439.0
domlebo70,Salary? PM me if not willing to disclose publicly,1541734866.0
arturaz,Option(foo.getMaybeNull).flatMap(Option(_.getNestedMaybeNull)).getOrElse(fallback),1541651790.0
watt,Allowing NPEs to be thrown (instead of testing for null) will kill performance. Pray your code is not used in a tight loop. https://shipilev.net/blog/2014/exceptional-performance/#_conclusion,1541650495.0
oleg-py,"If you're doing it a lot, you might consider spicing it up with some extension method:

    implicit class NullableGet[A](fa: Option[A]) {
      def ?[B](f: A => B) = fa.flatMap(a => Option(f(a)))
    }
    
    Option(thisObj).?(_.getNestedThing).?(_.finalKey).getOrElse(someDefault)

Not that much worse than your version and doesn't rely on exceptions for control flow.",1541658723.0
IngrianFileJunkie,"Not really related to the worst part, but this 'Any' stinks, using a proper generic should be better, IMHO.

Upd: also, Try as 'asOption'.",1541630913.0
fijimf,"&#x200B;

    case SOME_ENUM.FOO => for {
      x<-Option(thisObj.getNestedThing)
      y<-Option(x.finalKey)
    } yield x).getOrElse(fallback)",1541697623.0
lapelotanodobla,Can’t you use scalapb to get more friendly stuff out of protobuf?,1541632467.0
mlopes,"Maybe run your effect inside a MonadError, let it fail when it can’t get the value, and then use something like recoverWith?",1541633644.0
Philluminati,"1. An connected Akka cluster
2. Use a shared dB or state to lock the operation.
3. Use a config so the machines know one is a master.
4. Make the operation idempotent so it can run multiple times without breaking things 
5. Make the code run under an end point and have It triggered by an external process or cron job and let the load balancer pick an available node.

Personally I find 5 is the most reliable and easiest to implement.",1541613971.0
amazedballer,Use Akka Cluster Singleton.,1541611362.0
cmcmteixeira,"1) You could make that task be part of a different microservice/artifact that you schedule separately   
2) You can try and use a database to create a lock across services  
3) I believe Akka works mostly w/ ""At least once"" type of guarantees but there's probably a way  
4) Using kafka / rabbitmq you can set up a queue in such a way that you'll only have only one consumer   


Option 1) would probably be the best way to go though",1541606769.0
amazingdreams,"I had a similar need and created this https://github.com/AmazingDreams/play-scheduler

However, I have made it for play framework specifically

Here is an example using an aka cluster singleton https://github.com/AmazingDreams/play-scheduler/blob/master/play-scheduler/src/main/scala/com/github/amazingdreams/play/scheduler/module/PlaySchedulerStarter.scala",1541611731.0
DucksHaveLowAPM,I'm doing it a bit differently - I pass messages through Kafka and then even if I have multiple consumers vs one stream if they have the same consumer group only one of them picks up the data / task / message and performs logic with it.,1541685933.0
xdannys9,If your microservice is running in K8S we use akka scheduler + leader-elector sidecar. At every job run the pod checks if the current container is the leader.,1541688515.0
,[deleted],1541607977.0
LukaJCB,"Great work, Alex! Monix is such an incredible library :)",1541630876.0
fwlega,"Great tutorial. Thanks Alex!

&#x200B;

I hope you carry on creating more tutorials like this one :)",1541616496.0
volpegabriel,"That's awesome Alex, keep up the good work :)",1541640602.0
bas_mh,Great! Keep up the good work. I really like how this video showed how to go from a common (but error prone) imperative solution to a more functional and streaming one.,1541663464.0
CremboC,"You're probably better off asking in Java as the question is not related to Scala, however..

All you need to do is make sure you point to the `Home` folder of the JDK. Not sure what errors you're getting doing that? In my case it's `/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home`",1541592436.0
cwblon,Great shout. I’ll give that a go 👍🏻,1541593113.0
pauljamescleary,Do you actually compile and test in IntelliJ?  I only ask because I used to and it became so annoying at times that now I code in IntelliJ but do everything else in sbt,1541794735.0
raghar,"Technically, it would be possible once Scala native is mature enough. Writing it on JVM would be pointless as, JVM has to run on _something_, that is operating system.

But still, it would be pretty much impractical. Operating system should have total control over its memory management, time of running tasks and operations, and, in general, anything low level. After all only BIOS is lower. But, let's say, take a micro-controller - with a language suitable of system programming you can write something what would work reliable with 1kB of memory or less. Pretty much impossible when you use things like garbage collector (how do you explain fine-grained memory management and memory protection etc, when GC does it all for you, so you cannot really control it yourself?).

Of all FP languages I know, only Rust has the right tools to enable system programming. There were attempts like JavaOS but they weren't successful. You also have Java ME and Dalvik, but they are more like a JVM on a hardware level, so not something implemented solely with Java.

;TL;DR - there aren't, most likely won't be (technically possible, but impractical)",1541588707.0
shim__,Guess in theory it's doable with scala native but in traditional scala you can't since you would need a jvm. ,1541605322.0
naftoligug,Why would you want to?,1541620578.0
Judheg,"Here's an old book about OS with Java example, perhaps you can reuse it and convert it to scala :)
https://www.amazon.com/Operating-System-Concepts-Abraham-Silberschatz/dp/047050949X",1542177440.0
danielkza,Try the [`init`](https://www.scala-lang.org/api/2.12.0/scala/collection/Traversable.html#init:Repr) method.,1541550830.0
nutsack_dot_com,Which element did you add last?  The first?  The last?  Something in the middle?  ,1541563858.0
walksinsmallcircles,You cannot add or remove anything from a vector. You can create a new reference from the old vector and remove the element using filter or a pair of slices and a concatenation. What you are trying to do sounds weird. Perhaps you need another data structure?,1541566356.0
AlienBirdie,"vec.dropRight(1) or vec.reverse.tail

",1541549716.0
RandomName8,"objects in instances become fields, the encoding is not the same as top level objects (because java has no top level objects), so the variable should be something like `appConfig.FriendApp().baseUrl()`.
Note that `FriendApp()` is of type `FriendApp$`",1541566346.0
jclement_Scala_Sig,"&#x200B;

I forgot to mention that this can be done remotely.

&#x200B;",1541582623.0
Lasering,"Maybe you will find this interesting https://github.com/brettwooldridge/NuProcess mainly because:

> Additionally, on unix-based platforms such as Linux, when creating a new process java.lang.Process uses a fork()/exec() operation. This requires a temporary copy of the Java process (the fork), before the exec is performed. When running tests on Linux, in order to spawn 500 processes required setting the JVM max. memory to 3Gb (-Xmx3g). NuProcess uses a variant of fork() called vfork(), which does not impose this overhead. NuProcess can comfortably spawn 500 processes even when running the JVM with only 128Mb.

",1541504319.0
base2c,This looks very cool.  Also I’d like to say thanks for all your work on Ammonite in general.  It has become a tool I use everyday and that I love to use.  Props! ,1541549883.0
kai10k,Seems the process part is not yet scala native portable?,1541488462.0
pellets,You said the conflicts have different absolute paths. Different paths inside their jars right? It sounds like sbt-assembly shouldn’t need to use a merge strategy in that case. So I feel like I’m misunderstanding your situation or sbt-assembly has a serious bug where it thinks a/x and b/x are duplicates.,1541461035.0
martys_machine,"In case there's interest, I was able to select the Second listed dependency in the following way:

First, exclude the 3rd and 4th dependencies:

libraryDependencies ++= Seq(
  (""org.neo4j"" % ""neo4j"" % ""3.2.3"").
    exclude(""org.neo4j"", ""neo4j-jmx"").
    exclude(""org.neo4j"", ""neo4j-udc"")
)

Then, use MergeStrategy.last to select the second of the remaining two conflicting dependencies.

Unfortunately my program still doesn't run; it looks like BOTH the first and the second dependencies are required for the application to run. At least I know now.",1541522604.0
affjskedbd,"With the tagless final style of writing programs, where do you stop modeling algebras? For example, if I need to read config from a file, do I model a file algebra (and thus capability) and a config algebra, or do I have an algebra and a configFromFileInterpreter?

It seems that putting all logic in the interpreter defeats the purpose of the decoupling, on the other hand having to model/wrap all low-level actions in an algebra seems to be a path away from your program algebra. Any thoughts? ",1541541748.0
tanin47,"What is the best IDE for Scala? I've been using IntelliJ for so long that I don't know all the options out there.

It seems a bit weird that Scala critically depends on IntelliJ (as in I can't write Scala without IntelliJ), but IntelliJ creates Kotlin, which is somewhat a Scala competitor. I'm not assuming evil intent on any side. It just seems vulnerable in terms of strategy.",1541445353.0
scala_questions,"Hi,

from what I've read one reason (the main reason?) that Scala.Net didn't work out was because the CLR uses reified generics.

Why is a platform that uses reified generics harder to compile to compared to the jvm that uses erasure? Only because the CLR doesn't support higher kinded types (from what I've read)? I know the CLR uses reified generics for performance reasons. 

With reified generics Scala.Net would have had the ability to use .Net code and .Net code would have the ability to call Scala.Net code, just like on the JVM.

If Scala.Net would have cared only about the ability to call .Net (in order to use the ecosystem), but ignored the other way around, would that have made the project more likely to succeed? Would a typing file like Scala.Js and Scala.Native use make things easier when it comes to interop?

Also, are there languages with HKTs that also have reified generics? I looked around on lambda the ultimate for a bit but couldn't find any mention of such language.",1541684577.0
Philluminati,"If I write a test suite using Specs 2 and type “sbt test”, how many threads does the code use? Can it fail or deadlock? How do I go about debugging randomly failing tests that only time out when the test suite is running?",1541491934.0
chohw,"I think I'm looking for something to modelize a project? Like the different parts and dependencies between each other. For example I'd write my functions, the functions they use, so that hopefully I can determine which set of things is common to the others, etc. I've heard of UML before, it never made sense to me but that might be it? If so, I could use a ELI5, good clients (emacs integration and android app would be great if they exist), what kind of automation I could get from it (I think I've read that you can automatically generate your classes in Java?); Not sure what kind of monster I'm poking and guidance would be welcome.",1541640748.0
funk_transcender,"I was just wondering if there's any issues in terms of concurrency or performance in having local variables with-in a function but the function is still pure/referentially transparent?

I can only think in certain scenarios you're losing out on tail recursive optimisations to the  stack but that's very specific.

I've worked in environments before where it's been highly frowned upon to have local state but no one's explained what's wrong with it?",1542012384.0
nummer31,I am new to Scala. If you know of any Console or Web Scala starter template then please let me know. I am particularly interested in the project structure and sbt build related configs which I dont know of.,1542249835.0
BrianBoyko,"I am a full stack dev but only for Node. I never picked up Java, what would be the best way for me to learn Scala and the ecosystem around it? ",1542553392.0
madmush3385,"Hi all,
I got few questions for ensime.

1. I am trying to use ensime and emacs. It works perfect, but I wondering does ensime provides auto completion for build. sbt? In other words, is intellij idea your only option for build. sbt complemtion?  If not, could you provide some links so I can dig into? 
",1543164779.0
ebruchez,"I [wrote about this](https://blog.bruchez.name/2013/02/mapmap-vs-mapmapvalues.html) a long time ago. I am not sure it is very useful to know why, as the collections are being overhauled for Scala 2.13. In particular, this specific issues is [addressed in 2.13 by returning a `MapView`](https://www.scala-lang.org/blog/2018/06/13/scala-213-collections.html#groupmap).",1541396956.0
japgolly,"Yeah it's crazy and nearly everyone who discovers it does, after hours of debugging, usually after hours of debugging everything else in their own codebase as they wouldn't suspect the stdlib.

I now carry around extensions methods everywhere to avoid this:
https://github.com/japgolly/microlibs-scala/blob/master/stdlib-ext/shared/src/main/scala/japgolly/microlibs/stdlib_ext/StdlibExt.scala#L224-L235",1541406235.0
Philluminati,"Yeah I encountered this weirdness as well because I was trying to keep a Map of function pointers and use mapValues.

I just wanna say is that even though what they have is confusing, if they had the implementation we were expecting they’d get criticised for pushing people down some poor performing path.",1541489789.0
vitalijzad,"Your class should be located in 

`src/main/scala/com/mypacakge`

And not in

`src/main/scala/com.mypacakge`

&#x200B;",1541360980.0
vitalijzad,"You have to specify the right profile to use, for example

`mvn clean compile -P scala-2.12` ",1541365705.0
minler08,Any reason you’re using Maven rather than SBT? ,1541360321.0
geggo98,"Your object will be written to a class whose name ends with ""$"". So you must adapt the class name in your manifest.",1541393296.0
1Wittgenstein1,"I made a mistake that you may be making. I came from java and decided to stick with maven. After all, it absolutely works and the learning curve is negligible.

However, sbt is a fantastic tool. It took a couple of hours to learn enough and has lots of cool functionality. I regret not getting to it earlier.",1541557795.0
b4d3,"Thank you for this transcription. I quit in the middle of his talk because the video/sound quality was really awful.  
Anyway, does anyone know if one should always have some (case) class that represents the state or are there ""smarter"" ways of handling state in a real-world pure FP apps? How this relates to State or StateT monad?",1541430913.0
pauljamescleary,"I just did a talk on this.  I come from a background of building applications with `Future`.  Here are the benefits...

**No implicit queueing** - If your program does a lot of map, flatMap combinations (for comprehensions), recall that every time one of those things is called we are actually creating an object that is run on a separate thread pool (potentially). If you are handling a lot of load, this will increase memory pressure, potentially resulting in an OOM for your application.

With IO, you need to explicitly declare concurrency, so you are in full control of how that works (another talk will cover concurrency in IO).

**Predictable profiling** - with Future, your for comprehensions map flatMap chains can be nested. When the onComplete call back is actually executed is non-deterministic. This makes profiling your application extremely difficult, and at times impossible.

With IO, you can wrap your program (or an individual IO) and fully understand when it starts and when it stops, as there is no callback chain that the underlying machinery sorts out for you.

**Push your effects to the edges** - With Future you have to think imperatively through your code, when your expression is evaluated, it is evaluated eagerly.

With IO, you are truly ""building programs"", and then execute them ""at the end of the world"" near the edge of your system.

**Eliminate implicit ExecutionContext** - If you have a Future based application, you know the pain of carrying implicit execution with you. With IO, you can get rid of ~~all~~ most of that.  There are times that you do require a `ContextShift` and/or `Timer` to be in implicit scope.  YMMV, for our purposes we dramatically reduced the number of implicits.

**Your application is already largely synchronous!!** If you are using for comprehensions, map, flatMap with Future, your program is already synchronous. There is no need to be executing all these things on a separate thread pool.

**No more unexpected timeout errors in your Future tests** -  If you have seen seemingly sporadic timeout errors in your tests, they can be difficult to stomp out, and usually involve increasing the timeout to a possibly ridiculous value.

With IO, all your tests can safely just .unsafeRunSync, not more unpredictable timeouts!

*Edit:* You don't eliminate all implicits, but a lot of them.
",1541351910.0
anatoliykmetyuk,If you can't find a good argument on how these are better than futures - why sell it in first place? ,1541421360.0
paul_f_snively,"It depends on whether you think the _phrase_ ""referential transparency"" or _what referential transparency implies_ won't convince them.

The former is understandable, at least _ceteris paribus_. ""So I could replace expressions with their definitions without changing the meaning of the program. Why on earth would I want to do that?""

It's a fair question. But it has an answer: ""Because it means no matter how far in or how far out you zoom on the code, it's comprehensible by using a very small handful of rules, all of which have to do with how composition works. Composition of pure functions, composition of functions with effects, all of it. By the way, 'effects' includes not only I/O, but exception handling and concurrency, too.""

Let's look at a straightforward, but real-world, example: [Listing keys in an Amazon S3 bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/ListingObjectKeysUsingJava.html).

Here's my `build.sbt`:


    name := ""delete""
    
    scalaVersion := ""2.12.7""
    
    libraryDependencies ++= Vector(
      ""co.fs2""       %% ""fs2-core""        % ""1.0.0"",
      ""com.amazonaws"" % ""aws-java-sdk-s3"" % ""1.11.442""
    )

and here's my code:

    import scala.collection.JavaConverters._
    
    import cats.effect.IO
    import fs2._
    
    import com.amazonaws.auth.profile.ProfileCredentialsProvider
    import com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration
    import com.amazonaws.services.s3.{ AmazonS3, AmazonS3ClientBuilder }
    import com.amazonaws.services.s3.model.{ ListObjectsV2Request, ListObjectsV2Result, S3ObjectSummary }
    
    object example {
      def getObjectSummaries(s3: AmazonS3)(bucketName: String): Stream[IO, S3ObjectSummary] = {
        val req = new ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(2)
    
        def cont(res: ListObjectsV2Result): Option[String] =
          if (res.isTruncated)
            Some(res.getNextContinuationToken)
          else
            None
    
        def next(maybe: Option[String]): IO[Option[(ListObjectsV2Result, Option[String])]] = {
          IO {
            maybe.map { token =>
              val res = s3.listObjectsV2(req.withContinuationToken(token))
              (res, cont(res))
            }
          }
        }
    
        val ress = Stream.eval(IO(s3.listObjectsV2(req))).flatMap { res =>
          Stream.emit(res) ++ Stream.unfoldEval(cont(res))(next)
        }
    
        ress.flatMap(res => Stream.emits(res.getObjectSummaries.asScala))
      }
    
      def main(args: Array[String]): Unit = {
        val h = Stream.emit(""Listing objects"") to Sink.lines[IO](Console.out)
        
        val l = for {
          s <- Stream.bracket(IO {
            AmazonS3ClientBuilder.standard()
              .withEndpointConfiguration(new EndpointConfiguration(""http://localhost:4572"", ""us-west-2""))
              .withPathStyleAccessEnabled(true)
              .build()
          })(
            s3 => IO(s3.shutdown())
          ).flatMap { s3 =>
            s3.createBucket(""test-bucket"")
            getObjectSummaries(s3)(""test-bucket"")
          }
        } yield s
    
        val o = l.flatMap(os => Stream.emit(s"" - ${os.getKey()} (size: ${os.getSize()})\n"") to Sink.lines[IO](Console.out))
    
        val p = h ++ o
    
        p.compile.drain.unsafeRunSync
      }
    }

The code might be a bit idiosyncratic, given that I knocked it out quickly. Please ask any questions about it you may have. A few notes:

1. You can actually build it and run it against [LocalStack](https://localstack.cloud).
2. If you do, it dutifully prints ""Listing objects"" and then nothing, because it creates the `test-bucket`, which is then empty. :-)
2. By simply removing the `.withEndpointConfiguration` you should be able to run it against real AWS.
3. By changing the name of the bucket and removing the `s3.createBucket(""test-bucket"")` you should be able to list the contents of a real bucket.
4. I deliberately show writing to stdout with `Sink`.
5. I deliberately show building sequences of effects with `++`.
6. I deliberately show properly allocating and releasing the `AmazonS3` with `bracket`.
7. I deliberately don't bother handling failures I can't do anything about.

The point, again, is the whole program is built up algebraically, so I can look at any expression and understand it in isolation, or look at any composition of expressions (e.g. `val p = h ++ o`, literally ""the program `p` consists of printing the `h`eader followed by printing the `o`bject summaries' keys and their sizes"") and understand it the same way.

Again, feel free to ask questions, offer comments, etc. :-)    ",1541288360.0
jackcviers,Cats IO is cancellable. Future is not. Cats IO is nearly identical in usage to Future. Cats IO has its extraction built in. Cats IO handles callbacks internally.  Need more?,1541283881.0
m50d,"I would start by introducing similar style in a code area that's more business-visible, particularly one that's been a cause of bugs in the past. E.g. I've found a ""must happen in a database transaction"" monad is an easy-to-understand case where monads solve an obvious, recognisable problem: you have functions that need to be called in a transaction (and it's an error if they're not), but you want to be able to reuse several of those functions as part of a single transaction for ordinary code-reuse reasons. (You can almost rediscover a free-monad-like construction just by extending from OO ""command pattern"" style with things like hibernate `DetachedCriteria`). Once your team is comfortable with monadic style and the various operations and techniques you use (e.g. `traverse` on collections, monad transformers when combining another effect like `Either`), you can extend the same approach to other sources of side effects (e.g. remote HTTP calls) and it's an easier sell because the costs are now much lower.

Though a lot of the time once you've done that I'm not even sure I'd bother with IO. Once you've done something like [three layer Haskell cake](http://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html) where as much of your business logic as possible is written in completely pure code and the rest is in terms of things like `MonadTime`, is there really a lot of value in interpreting from `MonadLock with UpdateUser` into `IO` (which you're then presumably just going to `unsafePerformIO()` on) rather than just interpreting directly? The only thing `IO` really offers is the ability to re-run the same computation again (because run is the only method you have available on it), which I guess can be useful for something like a top-level retry loop, but that kind of thing tends to be so simple that it's easy enough to just write in direct style and still have it be obviously correct.

So in summary, I'd start by introducing monad typeclasses with more business meaning into the codebase - the likes of `UpdateUser`. Those will put you in a better position to adopt something like `IO` - but might also render it unnecessary.",1541341664.0
emilypii,"If referential transparency doesn't convince them, then I can't see a way forward. The notion that you can reason about your code in a RT manner is The Point. It's not just good for stroking your functional ego. It helps with reducing the burden of maintance and documentation, as well as the legibility of your code, which affects the bottom line. If you are not writing purely functional code, you are _wasting money_. 

Additionally if you were to adopt `F[_]: Effect`, as opposed to just `IO`, you would have the added benefit of being able to easily drop in various effect systems `zio.Task`, `monix.Task`, `cats.IO`, etc, and be able to immediately gauge the performance impact of each on your systems. This saves heaps of money and rending-of-clothing when you enter into the performance testing phase of your project. 

Both of those notions combined lead to a style of coding (typeclass-driven, algebraic) that is known to be self-documenting and consistently more performant than the ad-hoc solutions people come up with as alternatives. If none of that sells them, jump ship and find a modern Scala company to work for. There's boatloads.",1541279915.0
CubemonkeyNYC,"Try convincing me. I've been using Scala since January and still use standard Future and Future.sequence() for many batch operations. I'm curious about cats but ""referential transparency"" isn't helpful. I don't care about philosophy and FP zealotry, I care about speed, code cleanliness, and ease of transitioning code base support. If the next dev to support my code needs to learn A) scala, and B) several scala-ish libraries like cats, it's way harder to get them going.",1541305198.0
RandomName8,"10 years using scala here, been through endless blogs, videos, books, people that came and went, drama, some haskell, some idris, early days of akka, cake pattern, virtualized scala and endless things in between.
I still don't buy cats nor scalaz. My conclusion is that Scala (and to a degree, the JVM and its ecosystem) is not the place for that.",1541393935.0
IntolerableBalboa,Why bother selling it to them?  You can't demo how simple it is?,1541282245.0
volpegabriel,"I recently gave a talk about Cats Effect and got good feedback. People that were not familiar with these concepts or people that knew how to use `IO` but didn't have a clear vision of the whole picture finally got it. Here are the slides but it probably won't make much sense until the video is out which I believe it'll be soon :) https://paidy.github.io/talks/scalaio2018/

TL;DR: Tagless Final + MTL + IO is the way forward :)",1541304226.0
adamfraser,"I think sometimes it can be helpful to generalize a bit when solving these kinds of problems. Consider the function below:

    def pathsFrom[S, A](z: S)(f: S => Stream[(S, A)]): Stream[(S, List[A])] = {
      
      def go(initial: Stream[(S, List[A], Set[S])]): Stream[(S, List[A])] =
        initial match {
          case (s, as, explored) #:: tail =>
            val neighbors = f(s)
            val newNeighbors = neighbors
              .filter { case (s, _) => !explored.contains(s) }
              .map { case (s, a) => (s, a :: as, explored + s) }
            ((s, as)) #:: go(tail #::: newNeighbors)
          case _ => Stream.empty
        }
      
      go(Stream((z, Nil, Set(z))))
    }

This embodies a generalized algorithm that starts with some initial state `S` and a transition function `f` that given a state `S` returns a `Stream[(S, A)]` of all states `S` immediately reachable from that state along with the associated moves `A`. It then returns a `Stream[(S, List[A])]` of all paths from the initial state and the associated final states.

In your case, the initial state would be the starting `Point` and you could write the transition function like so:

    def next(point: Point)(segments: List[Segment]): Stream[(Point, Segment)] =
      segments.filter(_.from == point).map(segment => (segment.to, segment)).toStream

You could then just filter for states ending at your desired end point:

    pathsFrom(tl)(next(_)(segments))
      .filter(_._1 == br)
      .map(_._2.reverse)
      .toList
      .foreach(println)

Assuming the six points as you described and segments going from top to bottom and left to right between adjacent points, this would return:

    List(Segment(Point(tl,0,-10),Point(t,0,0)), Segment(Point(t,0,0),Point(tr,0,10)), Segment(Point(tr,0,10),Point(br,-10,10)))
    List(Segment(Point(tl,0,-10),Point(t,0,0)), Segment(Point(t,0,0),Point(b,-10,0)), Segment(Point(b,-10,0),Point(br,-10,10)))
    List(Segment(Point(tl,0,-10),Point(bl,-10,-10)), Segment(Point(bl,-10,-10),Point(b,-10,0)), Segment(Point(b,-10,0),Point(br,-10,10)))

In other words, to get from top left to bottom right we can go right / right / down, right / down / right, or down / right / right.",1541286069.0
SQLNerd,"Slick has a pretty great write up on this. You can see your question answered in the relationships section: http://slick.lightbend.com/doc/2.1.0/orm-to-slick.html

You're using Quill which is more low level than slick. I believe you'll want to describe your joins more manually. I tend to prefer that because ORMs aren't the best query generators in terms of performance. 

For what you're used to, slick is the closest representation. But I'd consider using Quill's (or doobie's) more low level approach instead. It has led to a lot less complexity in my experience. ",1541252070.0
sake_92,"I don't get it either. For applications without complex queries, JPA/Hibernate seems like godsend to me. :) Even if you do have complex queries, why not use SQL views or functions?

OTOH, in Slick you do a sorted query, get flat results (rows), group them to get some meaningful objects, and voila, you gotta sort it again..?  
Are we missing something?

",1541270489.0
amazedballer,"I would not map Slick directly against Play.  Instead, have a DAO layer that you work with through the controller, and use Slick as the backend implementation.

This means you can write stubs easily without involving the database by swapping out the implementation, and you can keep your data isolated.  There's a Play example here.

https://github.com/playframework/play-scala-isolated-slick-example

If you want to take it another layer, you should add presentation objects into the mix -- DTOs that are explicitly designed to map to forms / rendering, and have the controller work against the presentation objects.

That is, if you've got a table you need to render, then you've got a case class which is `Table`, and you pass that `Table` into the template and have it render cleanly exactly as the template needs.

You may have several queries going on in the backend that map DTOs to your data retrieval service, but that isn't your controller's concern.  Your controller only cares about parsing form and parameter input and rendering pages.",1541438921.0
m4dc4p,"ORMs are really just a local maximum for you. Jump to Doobie, write real SQL and enjoy yourself.",1541302052.0
doMynation,"I too, went through this struggle of being used to an ORM that takes care of fetching relationships automatically, and I ended up using plain SQL query and building those relationships manually. It’s more work, but it’s also far more customizable and performant, especially when you have complex relationships. 

I have a case class for all my entities, and my repository methods (e.g. `getById(...)` have an optional `include: Seq[String]` argument which takes care of fetching additional dependencies. 

I have one DTO for each entity that can be persisted/modified and a repository method that expects such dto as argument (e.g. `editCustomer(customerId: Long, dto: CustomerDTO)` Again, it’s definitely more work, especially for writes but so far I’m liking it. It took me a long time to unlearn the ORM-way of doing things and appreciate the alternative of not using  one.",1541353700.0
spidlaCZR,"All right, thanks everyone for your thoughts. I just started a small personal project and I will try learn the principles while doing that.",1541368160.0
spidlaCZR,"Well, I read the ORM-TO-SLICK document to catch the basic idea. I am now trying to make it happen in Quill. I am trying to map two tables through the join to case classes. However it is still missing something. How to get simple one-to-many result? I am giving you my Quill example, however I guess Slick etc. would be similar.

&#x200B;

`override def getByIdWithTasks(id: Int): Future[Option[(Customer, List[Task])]] = {`  
 `val q = quote {`  
 `for {`  
`(c, t) <- customers.filter(_.id == lift(id)).leftJoin(tasks).on((_c, _t) => _c.id == _t.id)`  
`} yield (c, t.toList)`  
  `}`  


[`db.run`](https://db.run)`(q).map(_.headOption)`  
`}`

I just want to get a Customer object and a List of his Tasks in one DB round trip.

&#x200B;

This code generates error: scala.reflect.macros.TypecheckException: class List is abstract; cannot be instantiated",1542063328.0
ashagari,"Just like the shift in paradigm you have to take from OO/Procedural programming to functional programming, you'll need to look at the problem with a different perspective. I think the issue you are having is the O-R impedance mismatch that you have been used to is no longer present and you can't pretend you are persisting an object. Slick maps the relational model more closely while giving you a typed, immutable way to work on your tables.  I had the same struggle initially but once you make that shift, it's not all that bad. Also you can create dao and service layers that allow you to work on an object graph in your service by combining slick calls to construct your graph. 


http://slick.lightbend.com/doc/3.0.0/orm-to-slick.html",1541253568.0
p220,"\>   I now, I can ""simulate"" the ORM by pulling the objects on my own and building the model tree by myself, but I guess, this goes against the paradigm. 

Does it? You have a layer which reads from DB and constructs model. whether its your own ORM or someone else's..",1541268324.0
ekiwok_,"Lagom is really great. Just ask yourself do you really need it. Do you really need CQRS with Event Sourcing? You need for example good split brain resolver for your cluster. Lightbend offers one for their customers but it ain’t cheap.

",1541234891.0
jeffmess,"I think HighHeathenHammer has some great points, here's my take and personal experience on working with Lagom for the last \~6 months. I've never worked with monix so can't say much about that. 

We had never built a CQRS/ES system so we decided to go with Lagom specifically for guidance on what best practices are and so far I'm grateful we did not roll our own solution. There is freedom in constraint.

1. Personally I have not found it to be restrictive - my team has yet to hit a wall where we need to work around Lagom. 

2. We're building a financial system, auditing and building custom reports is crucial so event sourcing definitely makes that aspect better. There is definitely a learning curve when coming from a CRUD mentality though.

3. When designing your services keep in mind that there will be eventual consistency delays when working with kafka topics, it may only be 10 seconds but if you're sending time based otp's those 10 seconds could be an issue, you need to really think about each service and it's responsibility.

4. We deploy to GCE. 

&#x200B;

Hope that helps.",1541248888.0
HighHeathenHammer,"I haven't used Lagom but I've been working with microservices for a while. I, however, like the way Lagom works, and I think it could be helpful for someone who is starting, but not for those who already developed a stack. Here are my comments:

1. Lagom is a framework and not a library, which means that you have to do things the way the framework expects. This could be a bit limiting but overall leads to code consistency. Another drawback of relying on Lagom is that you're tied to one language for most of the project. Some people tend to use the argument that using multiple languages seamlessly is an advantage of microservices. It is. But adding more languages makes the code more complex and inconsistent across the board. So you should try your best to stick to one language, in which case Lagom will be just fine.

2. CQRS is generally recommended but not absolutely necessary. Adopting it is a design decision that you have to make for your own project.

3. Even sourcing is also pretty useful, and some people go to the extent that if you don't have events then you don't have microservices. I don't really agree with that. It's still a design decision you have to make.

4. The most difficult part, in my opinion, is handling failure when a service is not responding for whatever reason. And just like everything else, your strategy for handling that depends on the project and the particular relation between the two services in question.

Finally, a piece of advice, learn DDD before jumping into Lagom. It should make your life easier and it's also pretty easy and straightforward to get into.",1541230207.0
know_not_much,"I would say start with Finch and PhantomDSL. These two are very light weight and you can accomplish everything with them. The API is beautiful and functional.

I used to like Lagom a lot till I saw their examples. The code is so bloated and ugly.",1541291517.0
rzepaw,Use Lagom. It saved us a lot of time...,1541233853.0
kudah,"Avoid microservices altogether. For modularity use `roles` pattern, see: https://github.com/7mind/slides/raw/master/02-roles/target/roles.pdf",1541273631.0
cwblon,"Ah, the future of Scala, just don’t make any promises ...",1541237817.0
ukralibre,You are the best! Thank you,1541165180.0
ashagari,Thanks!,1541167094.0
know_not_much,Amazing!!,1541171928.0
know_not_much,I started the MOOC and everything is greed out for me in the syllabus section ,1541301550.0
qiguo,Woo\~ so cool\~\~,1541828670.0
thfo,What is the pay like?,1541130286.0
Leobenk,I like the concept and I registered as a mentor. I have an open PR on the mentor repo and I already reviewed a few solution. Thanks for hosting this platform ! My profile: [https://exercism.io/profiles/leobenkel](https://exercism.io/profiles/leobenkel),1541213238.0
kkweon,"I've been occasionally participating **Exercism** since it came out.

I like the platform because it teaches how to perform unit tests while learning a new language. I don't have to worry about which test framework is popular/standard and what a standard way of running a test is.

The only weakness is that most of the problems are too easy and it's almost impossible to get feedbacks for individual problems that are not on the language *track*.

",1541136009.0
kd35a,"Not finished yet, but [Scala High Performance Programming](https://www.oreilly.com/library/view/scala-high-performance/9781786466044/) has been good so far",1541021922.0
plokhotnyuk,"You can learn a lot about that from presentations:

https://www.reddit.com/r/ScalaConferenceVideos/search?q=performance&sort=new&restrict_sr=on&t=all

and projects like:

https://github.com/scalanlp/breeze

https://github.com/plokhotnyuk/jsoniter-scala

https://github.com/non/debox

https://github.com/Sizmek/rtree2d",1543408595.0
danielbetter,Broken link?,1541016539.0
kaeblo,"Can somebody explain to me why printing is considered on the same level as other side effects, say a http call? 

In Scala most of the side effects I see are wrapped in Futures, so you can see those, but I don't see how printing causes any problems. (It can fill up the disk, if it's logged externally, but IO monad won't help you with that either). As I understand a print won't change anything in your program except what I mentioned. So I'm not that interested in a printing effect that I'd want it represented in the type signatures.

",1541068787.0
kkweon,"Because `with` implies a class.
So, when using `with`, it implies that the expression is a ""class/trait template""
And according to the spec, only `ClassTemplate` or `TemplateBody` can come after `new` keyword.

    SimpleExpr   ::=  `new' (ClassTemplate | TemplateBody)

But

    trait A

Here, ""A"" is just a trait definition. 

    TmplDef          ::=  `trait' TraitDef

So `new A` is not enough.
You need to make it a `TemplateBody` by explicitly defining its body `{...}`

    TemplateBody    ::=  [nl] `{' [SelfType] TemplateStat {semi TemplateStat} `}'
",1541013027.0
nutsack_dot_com,"Wow, that's really surprising.",1541011161.0
m50d,"I don't know but I can speculate. Logically a class has exactly one constructor (overloaded constructors are syntax sugar) whereas a trait has no constructor, which is what makes traits possible to mix in but the flipside is making them impossible to instantiate. So anything you can instantiate must be a class, and the only way to instantiate a trait is to form a class that extends it, one way or another. It makes sense to me that that means `new A` is not allowed but `new A {}` (which is really creating an anonymous class) is allowed.

So possibly the most interesting question is why `A with B` is considered to define an anonymous class rather than being regarded as a trait. Which I don't have a good answer to. Maybe just pragmatism, as I can't think of a situation where you would write `A with B` and have it be important that it's a `trait`?

Note the same thing happens with `abstract class`:

    scala> abstract class A
    defined class A

    scala> trait B
    defined trait B

    scala> new A
    <console>:13: error: class A is abstract; cannot be instantiated
           new A
           ^

    scala> new A {}
    res1: A = $anon$1@7a1ddbf1

    scala> new A with B
    res2: A with B = $anon$1@7497a554",1541070100.0
scalalalaguy,"If you don't want to carry the type of the as a parameter everywhere, you can 'hide' it inside the implementation.

    trait BaseModel {
        type ID
    }
    case class ModelA extends BaseModel { type ID = UUID }
    case class ModelB extends BaseModel { type ID = String }
",1541004541.0
btmc,"You could give the trait BaseModel a type parameter, say `ID`, then use a different type for each BaseModel subtype. 

    trait BaseModel[ID] {
        def id: ID
    }
    case class ModelA(id: UUID) extends BaseModel[UUID]
    case class ModelB(id: String) extends BaseModel[String]",1540990357.0
valenterry,"Have you thought about using composition instead of inheritance?

case class BaseModel(...)

case class ModelWithId[Id](id: Id, model: BaseModel)

type ModelUUID = ModelWithId[UUID]

type ModelStr = ModelWithId[String]

def doNotCareAboutId(model: ModelWithId[_]) = ???

def onlyUUID(model: ModelUUID) = ???

Feel free to name them better. Also, maybe take a look at CoFree.

Code tags on mobile are horrible...",1541005333.0
m50d,"What is it that you want to have in common between these two types? What do you want to be able to do with `BaseModel#id`, given that it's going to be a different type for different models?",1541081305.0
jackcviers,"Blaze runs http4s, for those who aren't familiar. Colossus is an actor-based, event-based http framework from tumblr. It's nice to see scala web frameworks at the top of these benchmarks, as they tend to not seem to do as well in techempower.",1540998174.0
kkweon,"If anyone is curious, you can read all codes in their github. https://github.com/TechEmpower/FrameworkBenchmarks

You can even run it for yourself. You can contribute. 

Although the benchmark doesn’t depict real world applications, it is still pleasant to see scala in the top of the list. ",1541005348.0
Milyardo,"This benchmark is nonsense, how is blaze number3, but http4s with blaze number 143? What is it using to serialize json? blaze is just an http parser. json libraries on this list, like jawn for some reason on near the bottom?",1541001778.0
Holothuroid,"So, what real life type may be a Semigroupal or a Semiringal?",1540991509.0
amazingdreams,Just wanted to say thanks! I use it in a couple of projects and it's great,1540949526.0
yanshuai,Congrats :D,1540956710.0
DanielShuy,Anyone compared this with [ScalaMock](https://scalamock.org/)?,1540960173.0
amdelamar,Cool! This is great,1540963073.0
Kemichal,"""Scala is a programming language created in 2014 by Martin Odersky."" Nope.",1540929417.0
Seth_Lightbend,"I like this article. The writing is clear and simple and the examples are well chosen. Well done!

It overlaps a lot, in purpose and content, with [https://docs.scala-lang.org/tour/tour-of-scala.html](https://docs.scala-lang.org/tour/tour-of-scala.html). We'd love to get pull requests at [https://github.com/scala/docs.scala-lang/pulls](https://github.com/scala/docs.scala-lang/pulls) with improvements to the language tour, perhaps taking some inspiration from this article.",1540996678.0
teknocide,The return inside println is *not* the same as the one without,1540952032.0
DanielShuy,"I feel like we need something like the [Typescript Progression Ladder](http://www.techladder.io/?tech=typescript), but for Scala",1540969344.0
shadowmint,"Do implicit adapters really count as type classes?

I'm new to scala, so you know, take my comments as worth the $0.02 they are actually worth, but I'm not really seeing them as the same thing.

I mean... is it really *meaningfully* different to just passing an `AdaptorFactory` that returns `Adaptor[T]` to the method, which can apply the various operations?

Sure, it's not exactly the same, but it's not really that different, it's just using some scala magic hand waving (implicit) to be slightly more ergonomic instead of explicitly implementing `AdaptorFactory`.

By comparison, in rust for example, you can create a trait and implement it on arbitrary types, eg. int, float, etc.

```
trait Foo {
    fn foo(&self) -> f32;
}

impl Foo for i32 {
    fn foo(&self) -> f32 {
        *self as f32
    }
}

impl Foo for &'static str {
    fn foo(&self) -> f32 {
        self.parse::<f32>().unwrap()
    }
}

fn sum_foo_like(t: Vec<impl Foo>) {
    let sum: f32 = t.iter().map(|i| i.foo()).sum();
    println!(""Sum of values that are FOO: {:?}"", sum);
}

fn main() {
    sum_foo_like(vec!(1, 3, 4));
    sum_foo_like(vec!(""1"", ""3"", ""4""));
}
```

NB. `<impl Foo>` is basically rust syntax sugar for `sum_foo_like<T>(...) where T : Foo`

Anyhow; the point is *this* is a type class right?

You arbitrarily associate the interface Foo with any other type, and Foo itself is not a concrete type; you cannot 'have an instance' of Foo; you can only have an instance of T, where T is 'foo-like'. You can only ever have a single implementation of Foo for T.

Where as... `NumberLikeDouble` is a case class, it's actually just an adaptor. You can have as many as you want and pick the one you want at runtime.

It's... a different thing right?

I mean, I'm happy to accept people call these type classes, but I thought, you know, type theory and all that... they're not actually language constructs, so really it's not actually meaningfully different from just having a bunch of adaptors in java with some sort of DI container to pick the right one to use...",1540953637.0
vjroby,I think he's cheating with implicits. He's providing an adapter that is implicitly called. So you need to create a new implicit for every new type. I don't see any benefit in this.  ,1540968840.0
Holothuroid,"Not quite. You can cheat, like naming an object like a command prompt:

    val >> = new Assembly8085

    >> IN 00

&#x200B;

&#x200B;",1540909293.0
Lasering,https://stackoverflow.com/questions/13011204/scalas-postfix-ops,1540912058.0
dima_mendeleev,"It's possible with postfix operator, but you will have to change `00` so it can be valid method name.

    object IO {
      def OO: Unit = {println(""IO OO"");}
    }

    >> IO OO

also if you want `OO` part be dynamic you may use `Dynamic`.

    import scala.language.dynamics

    object IO extends Dynamic {
      def OO: Unit = {println(""IO OO"");}
  
      def selectDynamic(name: String): Unit = {println(s""IO $name"");}
    }

    IO SS
    >> IO SS",1540912481.0
teknocide,Never even heard of it before this. Looks great!,1540891470.0
ukralibre,"Interesting

&#x200B;",1540894563.0
kininja08,"This was a nice read. I've dabbled in compilers and built a scripting language so I was particularly interested the phases in the pipeline. It's also interesting, although not too surprising, that the longest phase was the typer as it checks implicits/macros. ",1540866776.0
Milyardo,"Also, there is already a syntax for explicit thunks in Scala, if you this is what you actually want, use that. It will actually produce a compile error if you don't correctly apply a thunk.

    scala> class Evaluator( codeA: () => Any , codeB: () => Any , codeC: () => Any ) { ... }
    scala> val ev1 = new Evaluator(() => println(""a""), () => println(""b""), () => println(""c""))
    ev1: Evaluator = Evaluator@6f911326

    scala> val ev1 = new Evaluator(println(""a""), println(""b""), println(""c""))
    <console>:12: error: type mismatch;
     found   : Unit
     required: () => Any
           val ev1 = new Evaluator(println(""a""), println(""b""), println(""c""))
                                      ^
    <console>:12: error: type mismatch;
     found   : Unit
     required: () => Any
       val ev1 = new Evaluator(println(""a""), println(""b""), println(""c""))
                                                    ^
    <console>:12: error: type mismatch;
     found   : Unit
     required: () => Any",1540836663.0
Milyardo,How about we as a community stop using call-by-name parameters for things that are not call-by-name. Then it won't matter what the callsite looks like. Stick to referentially transparent expressions and everything will be fine.,1540825960.0
emilypii,:'),1540837484.0
mdharris,"> It would be perfectly logical for a developer to assume that afoo has changed, since it appears that the three .cat()s were called first, and then Evaluator's constructor was given their results.

This seems like one of the roots of the problem here - is that ""perfectly logical"" in a language with by-name parameters? That's an assumption that might be being carried over to scala from another language where it would might have been more reliable.

The other root of the problem might be the side-effecting `cat` method. Were this itself referentially transparent, it wouldn't matter how many times it was (or wasn't) evaluated.

As for the convention, off the top of my head we use by name parameters in two situations
1) Enabling new syntax

For example, https://docs.scala-lang.org/tour/by-name-parameters.html

2) A performance optimisation on a ""normal"" parameter that might not be used.

Logging is the classic example here - most logging frameworks take a by-name parameter for messages, avoiding the construction of a potentially expensive string if it's not going to be useful.

In the former (rarer) case, the annotation wouldn't hurt, but wouldn't really add anything that wouldn't (hopefully) be clear from the name of the function, and in the latter case it would add unnecessary clutter, eg:
```
log.info({{s""Frobnicating widgets ${widget1} and ${widget2} together.""}})
```

So I don't know that I'd find this terribly helpful personally.",1540915475.0
japgolly,"I've just started work on Scala/Graal polyglot integration. The [list of features --complete and planned--](https://github.com/japgolly/scala-graal) is in the [repo](https://github.com/japgolly/scala-graal).

My main ""real-world"" purpose is to have really fast (~1ms) React SSR (server-side rendering) in the JVM. As usual (like test-state), I'll be building this up in layers that are abstract and reusable outside of just SSR.

I'm quite excited about this and it feels fun. Contributions welcome!

*(Also, Twitter discussion: [here](https://twitter.com/japgolly/status/1058657919254679552))*",1541285784.0
buaya91,"I have been playing with an idea of parsing partial/incomplete json, the core is finally working, the main idea is to extract data from json as quick as possible without having to wait for the whole json to be available, I am not sure if there's much use yet, it's more of a POC

https://github.com/buaya91/basil

Feedback and comments are welcome :D",1541334978.0
kevinpet,Is it thematically suitable for children? I have a couple elementary school kids I’d like to move beyond hour of code.,1540764578.0
ragnarlodbrokk,There's a typo to your website in the description.,1540771815.0
danielbetter,"Looks very interesting. Good work! 

Would you be so kind as to elaborate on exact 'material' that will be covered in phases 1-4 ?

&#x200B;

In the video it's displayed like implicits and ADT's are going to be covered but I couldn't see a reference to that within the site. Thanks.",1540835388.0
3rdkulturekyd,Awesome news! Me and the guys at Functional Works have been looking forward to this :),1540985958.0
y0y,"It's the difference between **parametric polymorphism** (generics) and **ad-hoc polymorphism** (type classes). 

# What is Polymorphism?

**The idea behind polymorphism is always the same:** we are trying to increase code re-use by writing code in a more generic fashion. That is to say, in a higher level of abstraction.


**There are three main forms of polymorphism:** ^[1](https://en.wikipedia.org/wiki/Polymorphism_\(computer_science\))

- **Subtype Polymorphism** *(Inheritance)*
> when a name denotes instances of many different classes related by some common superclass

- **Parametric Polymorphism** *(Generics)*
> when one or more types are not specified by name but by abstract symbols that can represent any type

- **Ad-Hoc Polymorphism** *(Type Classes)*
> defines a common interface for an arbitrary set of individually specified types

I think a quick review of how all three achieve the goal of code re-use will make it most clear to you what the fundamental differences are.
",1540788534.0
LateHuckleberry9,"No, they are different things.

A typeclass defines a set of behaviors you then implement for specific types.

For example I might have at a typeclass ""Printer"" that prints a string representation of a type.

I then can define instances for String, MyObject and so on.

One example of where there's some interaction with generics: I can define functions that accept any type as long as there's a typeclass instance in scope for it:

    def foo[A](value: A)(implicit printer : Printer[A]) = printer.print(value)

Think of it as a more flexible way to add behavior to a type.  Rather than altering its superclass or adding a decorator, I can add on little bits of behavior in a flexible, composable way ",1540747844.0
phazer99,"No, they are different concepts, but the synergies between them is what makes for example Haskells and Scalas type systems really powerful. 

Generics are basically type parameters that can be added to data types and functions (and methods) to make them polymorphic, i.e. they can be used with many different types. It's an old concept from functional programming ([System F](https://en.wikipedia.org/wiki/System_F)) used in languages like ML and Haskell. Most modern statically typed languages have generics in some form. If the language support subtyping the type parameters can often be constrained with sub- and supertypes.

Type classes are a newer form of polymorphism first introduced in Haskell and they are not as commonly available in programming languages (but Haskell, Scala, Rust, Swift have them in some form). They are used for constraining type parameters (generics) to types which have certain properties (i.e. belong to a certain type class). So in Haskell you use type classes to constrain type parameters while in Scala you can use both sub- or supertype constraints **and** type classes (implicit parameters).",1540748841.0
zzyzzyxx,"Generics are a language-level feature allowing you to write code that works uniformly for any type, getting the same behavior regardless of the eventual type, like what you see with data structures. It's more formally called ""parametric polymorphism"".

Typeclasses in Scala are not language-level. They are a pattern for how to construct your code in order to gain one form of ""ad-hoc polymorphism"" and get different behaviors depending on the type. A more familiar form of ad-hoc polymorphism is simple function overloading.

The typeclass pattern makes use of the generics feature combined with the implicit feature.",1540748959.0
mlopes,"Regarding generics (I’ve addressed type classes on the other thread), I take it you’re talking about type variables (which are a bit more powerful that just generics).
What they do, is what their name suggest, at the basic level, they allow you to have variables at the type level instead of the value level. This allow amongst other things for what in some languages is called generics.
The way they relate to type classes in scala is that the implementation that relies on the type class doesn’t know which types will implement the type class, so they rely on type variables constrained by the type class. This way, any implicit implementation of the type class will satisfy this constraint and therefore fit the type that the compiler is looking for when trying to resolve the implicit.

I really suggest you take a high level look at how Haskell implements type classes and type variables, for a better understanding of this, as the Scala implementation is a bit cumbersome with all the implicits and the remnants from OO.",1540803033.0
joshragem,I found the website docs pretty good,1540729410.0
amazedballer,"* https://rerun.me/2014/09/11/introducing-actors-akka-notes-part-1/ 
* https://www.beyondthelines.net/programming/akka-anti-corruption-layer/
* https://www.beyondthelines.net/computing/actor-synchrone-computation/
* https://blog.colinbreck.com/integrating-akka-streams-and-akka-actors-part-i/",1540833725.0
jackcviers,[Akka in Action](https://www.manning.com/books/akka-in-action) is a pretty good tutorial of using akka.,1541017876.0
aeye,i found the docs together with applied akka patterns by michael nash and wade waldron were a great overview and really highlighted not only what you can do but where you can really go wrong and how to avoid it. would recommend!,1541023632.0
know_not_much,A little expensive though 45 for kindle edition. It would have been OK to have 45 for physical copy ;),1540700691.0
codemonk,"Sadly, not available in the AU region.

Not sure why people region-lock ebooks, but here we are. ",1540703465.0
jeffmess,"53 USD if you live in South Africa, paperback will have the 15USD shipping fee + \~8USD import tax. Feelsbadman.",1540800534.0
amazedballer,I am so bored of Kotlin questions in the scala group.,1540612844.0
akaifox,"It's okay. I just find using the higher-kinds trick results in harder to read code.

If they get KEEP-87(?) and other language features into Kotlin, then it could be something great.",1540646690.0
m50d,"The lack of proper higher kinds makes it unwieldy. The continuation encoding means that interaction of unmanaged side-effects and managed effects is *very* confusing, even more so than in Scala. And it will inherently never be able to interoperate nicely with Kotlin's preferred encoding of absence (null) because the nesting behaviour of Kotlin null means that it can't ever be even a functor, yet alone anything fancier.",1540801502.0
kudah,"It's a library for ad-hoc polymorphism and typed abstractions for a language that has no sane ways to model ad-hoc polymorphism and has quite weak types. It's quite useless, IMHO. I've tried to use it casually, but it would also completely destroy intellij IDEA and force hangs due to high amount of extension methods even when trying to implement simple things, like [Day convolution](https://gist.github.com/kaishh/04dccfc82fa6a23618036dd2ead0c507)",1541275079.0
simon_o,"Considering that the library (and the typeclass/HKT proposal) is developed by a member of the Scala Center Advisory Board, I think the i's will be dotted and the t's will be crossed, based on lessons learned in Scala.

It's likely that it will be the most popular functional programming library on the JVM in a short while.",1540745357.0
Holothuroid,Interesting. Is that documented behavior? ,1540615522.0
duhace,"you're breaking my heart martin odersky. i'd kill to work on the scala compiler (and make a bunch more money while doing it), but I got responsibilities to my current lab

maybe next year :(",1540589531.0
tweettranscriberbot,"^The linked tweet was tweeted by [@odersky](https://twitter.com/odersky) on Oct 26, 2018 09:00:00 UTC (120 Retweets | 180 Favorites)

-------------------------------------------------

Would you like to work on the next Scala compiler at the place that invented it? We are looking for two compiler engineers. More info at: [https://contributors.scala-lang.org/t/looking-for-compiler-engineers-to-work-on-scala-3-job-ad/2483](https://contributors.scala-lang.org/t/looking-for-compiler-engineers-to-work-on-scala-3-job-ad/2483)

[https://recruiting.epfl.ch/Vacancies/693/Description/2](https://recruiting.epfl.ch/Vacancies/693/Description/2)

[https://recruiting.epfl.ch/Vacancies/701/Description/2](https://recruiting.epfl.ch/Vacancies/701/Description/2) 

[Attached photo](https://pbs.twimg.com/media/DqbCS3sWkAAQNNS.jpg:orig) | [imgur Mirror](https://i.imgur.com/UFShERW.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1540589481.0
Daxten,"you can use monads with for comprehension.. 
you just can't compose different kinds of monads, but that's something which is also not possible in theory",1540488010.0
m50d,"The historical answer is probably that today's encoding of typeclasses in Scala was not so widely known when the language was originally created.

OO support was and remains a key selling point for Scala; I would expect `for`/`yield` to continue to work on types that define a `flatMap` method directly, in traditional OO style. (Typeclasses are the only way to offer a `point` method, but the `for`/`yield` desugaring doesn't actually need one, only `map` and `flatMap` - in Haskell typeclass terms this is functor plus bind, not necessarily quite monad). That does raise the question of why there's not an OO-style `trait` that values have to implement to be valid for `for`/`yield` desugaring though.

One answer might be a desire to support `for`/`yield` on types that don't form full functors/monads: `TreeSet` is not a functor but can usefully be used in a comprehension (and this is an open problem in Haskell); `BitSet` conforms to the almost-monadic `Set` interface but offers a more specific return type for particular `map` operations which it was felt desirable to preserve.

Another side is that there is still ongoing library work about what these typeclasses should look like. Cats and ScalaZ are taking different approaches to stack safety in monads (not a problem that Haskell has). There's ongoing debate around the extent to which monad/applicative behaviour may vary (less of a pressing issue in Haskell since they have the `ApplicativeDo` language extension which people choose to enable or not). It makes sense for the language-specified syntax to be more permissive in a language that doesn't have an easy/widespread language extension model.

I doubt dotty will include more support for these constructs. Odersky believes that he can come up with a better model for representing effects and that will be built into dotty, so if anything there's likely to be less support for FP style. (I am skeptical to say the least: many smart people have tried to come up with a more lightweight syntax to replace monadic style, including several macro-based libraries in Scala (e.g. thoughtworks Each for a recent example), and it's always turned out to have major problems compared to monads with explicit `for`/`yield`).",1540539737.0
naftoligug,"For comprehensions are more flexible than just monads. And Cats and scalaz includes much more than monads.

Why don't you want to use cats or scalaz? Is it because adding it to a project is an extra step?

If so perhaps a better question is, could adding cats/scalaz (or starting a new project that uses it) be made easier?
",1540538039.0
raghar,"Not happening. Language needs to get simpler not more complex and adding big-ass library wouldn't help achieving that.

Besides, quite o lot of people doesn't want to go cats/scalaz way and the whole ""Thanos approach"" is unrealistic bullshit.",1540506144.0
Oskar_no_number,"Monads are not supported by the real world. Are we finally getting back to APL when we look ""things"" like scalaz (scalaz == APL)? Remember how ""easy"" it was to talk with APL guys about their relation to your real world? Sure with three symbols they were able to take care of processing with costly CPU time (and suck all the juice from 3090 mainframe dimming the lights in the building). CPU time today is more about knowledge acquisition time where Monads and scalz etc are capable of generating big bills if not in really really capable hands which in turn are costly and creating really complex strategies to survive in long term. Consider market situation, long term projections, availability of competences etc. and who is marginal and who has strong focus from business perspective.",1541016496.0
hyperforce,If typeclasses are supposed to be coherent then Scala can't have real typeclasses.,1540566719.0
m50d,"I don't know about Play, but I've found http://scalaxb.org/ to be very useful when working with SOAP.",1540462775.0
ashagari,"I wrote a thin layer that converted the SOAP to rest and put it on top of play. There are many good libs that will generate classes from a wsdl (I used CXF), you can then call your rest service from the thin layer, passing the xml payload which is now an object. Almost all the code including the payload classes were generated see part of the build process",1540471840.0
,[deleted],1540550688.0
birdwastheword,I think I once used this as an example to do it  https://github.com/koofr/play-jax-ws. I'm pretty sure this will only work with a very old Scala version. It's far from perfect but sometimes choices are limited.,1540452760.0
,[deleted],1540450908.0
nutsack_dot_com,"Do you need to call Soap services, or implement a Soap service that others will call?  

The former is pretty easy with jax-ws (a java lib, maybe even built into the JDK, but it's been 10 years since I used it).  The latter could  be very bad, or pretty smooth, it depends.  Integrating with Play is a wild card though.",1540573519.0
amazedballer,You can use https://downloads.typesafe.com/rp/play-soap/Home.html,1540612902.0
PrimozDelux,What's a cloud intelligence? ,1540406905.0
habitats,How does Azure Spark environment compare with Googles Dataproc and accompanied tools?,1540422623.0
workthrowawayexcel,"Sweet stuff. This is going to come in handy with one of my currently clients that we are building out a full Azure Spark / Scala Environment.

Is there a current mall kiosk demo that uses scala? ",1540436370.0
kavedaa,"With `enum` in Dotty, aka. Scala 3, you can do:

    enum Tree[+A] {
      case Empty
      case Node(value: A, left: Tree[A], right: Tree[A])
    }

https://dotty.epfl.ch/docs/reference/enums/adts.html",1540414293.0
freiguy1,"This is pretty neat and beginner friendly. I thought it was going to be way over my head. I've dabbled in each of those four languages with rust being my most familiar. Given that rust is a systems language and compiles down to an architecture-specific binary, it's great to see it's in the same league with these higher level languages. I think elm would've been a great one to compare with typescript since they're in the same space. I believe elm has great support for ADT with their [custom types](https://guide.elm-lang.org/types/custom_types.html).",1540403236.0
CinnamonHeart,"FWIW, if interested, SML ADT:

    datatype 'a Tree = Empty 
                     | Node of 'a * 'a Tree * 'a Tree

Not too far from Haskell. F# and OCaml are reasonably similar.",1540417731.0
jonhanson,"You can get reasonably close with boring old Java:

    public interface Tree<T> {
        final class Empty<T> implements Tree<T> {
        }
    
        final class Node<T> implements Tree<Node> {
            public final Tree<T> left;
            public final Tree<T> right;
    
            public Node(Tree<T> left, Tree<T> right) {
                this.left = left;
                this.right = right;
            }
        }
    }

but it starts to get relatively verbose once you add toString, equals, hashCode and traversal methods. I typically use something like the above in conjunction with [Immutables](https://immutables.github.io/). Although I haven't tried it, [Derive4j](https://github.com/derive4j/derive4j) would almost certainly be even better.",1540406981.0
fijimf,"This does not really address algebraic data types.  ADT's are characterized by sum types (like the examples here) and product types, which are like tuples or records, and not explored in this article.  The bulk of the power of ADT's is in how one decomposes them via pattern matching, which is also not explored here.  In my opinion, the example of a tree is poorly chosen because the posting looks more like a 'data-structures-in-4-languages' piece rather than a 'functional-paradigm-in-4-languages-piece'.",1540485921.0
Apterygiformes,really kind post!,1540404883.0
jl2352,"TypeScript has strict null checks. If you turn this on you could just write ...

    type Tree<T> = null | { left: Tree<T>, right: Tree<T>, value : T }

This makes it a one liner, it's more efficient, and it's still safe from null pointer exceptions.",1541707994.0
l30nid45,"Kotlin Example

    sealed class Tree {
        object Empty : Tree() {
            override fun toString()= ""Empty""
        }
        class Node<V>(val value: V, val left: Tree, val right: Tree) : Tree() {
            override fun toString() = ""Node $value $left $right""
        }
    }
    
    val tree = Tree.Node(42, Tree.Node(0, Tree.Empty, Tree.Empty), Tree.Empty)
    println(tree)

Elm Example

    type Tree v = Empty
                | Node v (Tree v) (Tree v)
    
    tree : Tree
    tree = Node 42 (Node 0 Empty Empty) Empty
    
    Debug.log ""tree"" tree",1540477796.0
HelloImCS,"you could use a 1d array and get/put an element at (row i, col j) with arr(9 * i + j)",1540392955.0
weevyl,"A long time ago, when I wrote a sudoku puzzle solver in Scala, I had the input be a file with the puzzle in it: 9 lines with 9 columns. The content looked like this:

    __1__9_62
    98_253__4
    ____8__9_
    3__1_6__5
    _9__3____
    ____4__76
    6__527_48
    54_9__2__

I chose to use '\_' to represent empty squares.  I read it all as one big string split it into an array and  filtered out \\s and \\n. After that I just converted it to my internal representation of the puzzle.",1540401656.0
m50d,"What have you tried and what have you specifically got stuck on? Are you able to read a string that the user has input? Do you know what format you want them to input in? Is your difficulty in parsing that string to your internal format, or what?",1540539995.0
dnslbr,Hi! What is the technology stack you guys work with?,1540329765.0
duhace,"If you still need someone late next year I might be available. 

I've been working with Play, Akka Typed, and Akka Streams mostly, though I'm starting to dip into cats as well.",1540332529.0
Sreenathc,"I have been playing around with Scala, spark, jupyter etc...but will be available only in April next year...am an Australian citizen so getting a work permit should not be an issue. If you are still looking for passionate developers at that time...would like to throw my hat in the ring!",1540349094.0
machisuji,Where precisely? ,1540336012.0
lu4nm3,"Here, you're only preventing the use of `new Test(3)` which will result in an error.

When you call `Test(3)` you're using the `apply` method that is automatically created in the companion object. If you want this to also result in an error, you need to either 1) make your case class abstract:

    abstract case class Test private (i: Int)

which will prevent the `apply` method from getting created or 2) override the `apply` method yourself and mark it as `private`:

    object Test {
      private def apply(i: Int): Test = new Test(i)
    }",1540311549.0
ronan_michaux,https://gist.github.com/tpolecat/a5cb0dc9adeacc93f846835ed21c92d2,1540328611.0
TheTargeter,"Using string templating to construct SQL is a bad idea. Use a proper database library. [Slick](http://slick.lightbend.com/), for example, has '[plain SQL](http://slick.lightbend.com/doc/3.2.3/introduction.html#plain-sql-support)' support, which I think is similar to what you're looking for. 

Also, I guess you could use [JDBC prepared statements](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html), but I'd really recommend using a library that's built on top of JDBC, not JDBC directly.",1540287410.0
Lasering,"I would recomend Anorm
https://github.com/playframework/anorm
https://playframework.github.io/anorm/

Its almost string interpolation but without being string interpolation. The value will be properly escaped.",1540303323.0
erwan,"Honestly I think that for a simple usage like you describe, string interpolation is the best.

Use three double quotes so you don't have to escape anything, you can even have multiline. And stripMargin if needed.

Just write a function for each template, return the string ",1540274046.0
threeseed,If you don't mind Java you could go with Freemarker or Velocity.,1540286244.0
pavlik_enemy,"You can use Twirl ([https://github.com/playframework/twirl](https://github.com/playframework/twirl)), the template engine from Play Framework. It will generate functions from templates and you can pass the variables to those functions to get the rendered result.",1540280806.0
lu4nm3,Original source: https://www.madewithtea.com/kafka-streams-in-scala-with-schema-registry.html,1540234128.0
zenhue,ZIO is cool. I'll have a try,1540718160.0
jimmyketo,"Hi,

&#x200B;

I'm trying to use Http4s with Monix. Does anyone know if this is a combination that works well ? I read some posts earlier that said you could use the two together but I'm struggling to understand how so if someone has any examples or pointers they could share that would help me a lot.

&#x200B;

Thanks!",1540474507.0
voroninp,"\- Why doesn't `lazy` cache and rethrow same exception, but reevaluates? What is the rationale?  
\- Why are *call by name* and *call by value* visually indistinguishable for the caller? Was it laziness of computation the primary goal or is it just a syntactic sugar over `() => SomeType` ?",1540214075.0
strobegen,"Can you explain your approach for modeling some not trivial domain in terms of Free/TF and GADTs? 

For example how you decouple business things to different algebras if some elements have interconnections.",1540391233.0
tombraideratp,"[https://github.com/japgolly/learning/blob/public/talks/20180827-MelbCompose-Quantifiers/existentials.scala](https://github.com/japgolly/learning/blob/public/talks/20180827-MelbCompose-Quantifiers/existentials.scala)

 my simple question is what's the need for separate trait definition AndQuestion inside companion object can't that be achieved some simpler way with original trait definition i.e SurveyType 

 [https://github.com/japgolly/learning/tree/public/talks/20180827-MelbCompose-Quantifiers](https://github.com/japgolly/learning/tree/public/talks/20180827-MelbCompose-Quantifiers) 

&#x200B;",1540218701.0
Ukonu,"What are the benefits of ""lazy"" being built into the language vs. just a type like: [http://www.vavr.io/vavr-docs/#\_lazy](http://www.vavr.io/vavr-docs/#_lazy)

&#x200B;",1540231291.0
jai-wolf-pup,"I have a quick question about how to select from a dataframe.

If I have a dataframe with two columns:

ColA = 1, 2, 3, 4, 5

ColB = 4, 6, 1, 1, 2

How do I select the value from ColA that had the lowest value in ColB and the lowest index?

The selection should be 3.

&#x200B;

Thanks",1540333488.0
Zelazny7,"Any suggestions for interactive data analysis akin to R or python/pandas that *isn't* Spark? I would like to do the kinds of analyses I do on a single machine in R, but with a more production grade language that offers type checking.

I think Spark is great, but it's overkill when all I want to do do is read modest-sized csv files into a heterogeneous data frame and start exploring and processing data.",1540756679.0
kevin_meredith,Does Circe have this problem?,1540264098.0
theamazingretardo,"Do anyone know how an incoming json would look like that produces this bug? 

&#x200B;",1540278889.0
m50d,"fs2 streams are their own sequence-like type; I'd say with fs2 you generally work in the context of a particular `F[_]` effect. The fs2 operators are generic enough that you could use them with a sequence-like type for `F` but I doubt that's a good idea: what value would you be getting from fs2's operations? The general way you use fs2 is with `F` being a `Task`/`Future`-like type representing async effects, and then an fs2 stream is, roughly, a sequence of elements with `F`-effects. Whereas in Spark's model the `RDD` abstraction covers both the fact that it's a sequence and the fact that there are distribution effects going on, and so there's no way to unpick those two aspects and fit them into FS2's model. You could form a stream of complete RDDs but that's unlikely to be what you want.",1540208197.0
gmartres,"Dotty does not guarantee any kind of compatibility between releases right now, and libraries published using Dotty cannot be used from Scala 2 currently, so using it as the sole compiler for your project isn't recommended. 

However, if you're interested in being forward-compatible, you could cross-compile your code between Scala 2.12 and Dotty, Dotty itself is developed this way currently (https://github.com/lampepfl/dotty-example-project has more information and a link to an example that cross-compiles). Even if you don't publish any Dotty artefact, cross-compiling with Dotty means you get to take advantage of its [IDE support](http://dotty.epfl.ch/docs/usage/ide-support.html).",1540127010.0
WizzieP,"Think of Dotty as Scala 3 now. There won't be Scala 3 before 2.13 and 2.14 at least, so there are almost no libraries available for Dotty and it's still work-in-progress.",1540127060.0
dtechnology,"No. Scala 3 / Dotty is far from complete and the ecosystem is not compatible with it.

The plan is for 2.14 to remedy this. If all goes well 2.14 will be able to call code compiled in 3 and vice-versa.",1540139135.0
,[removed],1540137492.0
teknocide,"Removing the reliance on Twitter's Future moves it in the same direction as HTTP4s, which is both good and bad in that while the api becomes more flexible, the signatures also become more complex.

Maybe this could be made a smoother transition by including some pre-packaged aliases for commonly used effect libraries. For Twitter Futures, the package could look something like

    package io.finch

    package object twitterfutures {
      type Endpoint[A] = io.finch.Endpoint[com.twitter.util.Future, A]
      … more aliases
    }

",1540196806.0
ExtropianPirate,"**I think Kotlin is a better ""better Java"" than Scala**, for a couple of main reasons:

* Better two-way interop: using Java code from Scala is easy, but using Scala code from Java can be a nightmare. It's easy to use Kotlin code from Java.
* Easier to learn: learning Kotlin is easy for a Java programmer, but it's a lot more difficult to learn and to teach Scala. The functional style requires that you think in a completely different way, whereas Kotlin code is not too dissimilar from Java 8

That said, **I still think Scala is a better language**. The assumption made by the question is that Scala was _just_ supposed to be a ""better Java"", which does Scala a disservice. The features that Scala has that neither Java nor Kotlin have give it clear advantages over both, such as implicits (and the patterns that come with them like typeclasses) and the much more powerful type system, and this will only get better in Scala 3 (i'm really looking forward to opaque types).",1540121098.0
amazedballer,"Scala's always been about making [FP accessible](https://www.youtube.com/watch?v=ecekSCX3B4Q).  Scala is what it was intended to be, and the bits they're changing in Dotty (opaque types, implicit function types) are all about adding more power to Scala and removing boilerplate.

The best source to answer your questions is Odersky's keynotes at Scala World.  He's very clear and eloquent about this.",1540082699.0
refriedi,"My impression is that Scala was meant to be a blend and a bridge between OOP and FP, and it has been iteratively improved, yet has some vestigial warts, etc.; whereas Kotlin was a fresh attempt to incorporate some favorite ideas from Scala into a simpler, yet Java-like language.  Disclaimer, I don’t know much about Kotlin.",1540089717.0
WhatBaron,"Personally speaking, I think characteristics of Scala and Kotlin, and the current trend of modern programming are often mixed up. Scala is always widely considered as an unique beauty with both OO and FP elements, but in the past few years,  a lot of things have changed in the landscape of imperative programming. Right now, nearly all the popular imperative languages have absorbed a lot of FP features, like lambda expression, higher order function, immutability and even lazy evaluation. To some limited extends, you can do nice FP things in verbose languages like Java, complex langauges like C++ and even Go which is famous for its simplicity and lack of features. This situation definitely to a certain degree, has weakened Scala's strong position in the world of programming; however, it is still very good, and its syntax absolutely holds an advantage over let's say, that of Java (Java stream is nice though).

Now back to Kotlin, I have programmed a lot in Kotlin and some in Scala. I have to admit that I really have very often deja vu feelings when jumping from one to another occasionally. But in my eyes, eventually for Kotlin and Scala, the ultimate victory is not going to be decided by just language features or designs, instead, decisive factors would be the status of the community, the pace of pushing out new language versions, the amount and influence of written code bases (since a lot of us in the field are just maintaining), and libraries and frameworks.

Kotlin is just a young language with a promising future, waiting for features to be mature enough (like coroutine). On the other hand, Scala 3.0 would be a game changer. I believe a few years later, they would be more different from each other.",1540076785.0
2bdb2,"- Higher Kinded Types
- Typeclasses
- Algebraic Effects
- ""Do"" notation.
- Dependent Types
- Type Members
- Pattern matching
- Compile time metaprogramming

These features are some of the things I would consider ""Minimum viable language"" features.

Don't get me wrong - I really quite like Kotlin, and I have plenty of gripes with Scala. But Kotlin is not even remotely close to being a viable Scala alternative. (And nor is it trying to be)",1540204812.0
Northronics,"I've written games in both. Kotlin has better tooling, Scala is much more ergonomic and productive (for me). Kotlin is more verbose and generally clunky, and using it feels like Scala with extra steps and restrictions. Kotlin doesn't even support automatic conversions of floats to doubles, or ints to floats, which is painful when writing games.",1540122814.0
vitalijzad,"Let Odersky, Spoon and Venners answer you:

>Technically, Scala is a blend of object-oriented and functional programming concepts in a statically typed language. The fusion of object-oriented and functional programming shows up in many different aspects of Scala; it is probably more pervasive than in any other widely used language. The two programming styles have complementary strengths when it comes to scalability. Scala’s functional programming constructs make it easy to build interesting things quickly from simple parts. Its object-oriented constructs make it easy to structure larger systems and to adapt them to new demands.  
>  
>The combination of both styles in Scala makes it possible to express new kinds of programming patterns and component abstractions. It also leads to a legible and concise programming style. And because it is so malleable, programming in Scala can be a lot of fun.

*Programming in Scala*, first edition",1540072489.0
m50d,"At a low level, Scala wasn't intended for the extensively FP style that's the most mainstream way of using it these days (and many of Odersky's comments here make it clear that he doesn't favour that style). It was intended for a closer-to-Java-6 style and had various features that were oriented towards that (e.g. XML literals). So some aspects of Kotlin are closer to the original intentions of 2003-Scala than today's Scala is, sure.

At a higher level Scala was intended as an effective general-purpose programming language (with good Java interop), and I'd argue it remains much better at that than Kotlin.",1540202643.0
kininja08,"Personally, IMHO, I believe so. I actually came to Scala thinking it would be like Kotlin, and I know others who thought it would simply be a **vastly** better Java as well.

Scala has taught me a lot about writing functional code(with full immutability, higher order functions, monads, map/filter/folds/reduce, pattern matching, composition, strong types, etc ). This is enough for me to be quite productive and quickly deliver business/product deliverables that are very stable, without using the long tail of FP features, pure FP, free monads, category theory, etc. 

I'm one of the converts that came to Scala and eventually migrated to Kotlin. I work on Kotlin on side projects but have a full time job in Scala, which gives a nice perspective on both languages and the ecosystems. I also write code in Kotlin **mostly** like it's Scala( see above). I also have a mobile product launching soon that is written in Kotlin (both client and server). 

Scala is a more powerful language, but with this said, I will **not be using Scala for server side anymore.** The reasons for this are many but boil down to:

1. unnecessary complexity in Scala libraries 
2. difficulty in finding Scala developers
3. lack of good interop with Java, 
4. a general **high cost** of Scala
5. current ability to build isomorphic (client and server in 1 language) mobile apps in Kotlin. 

It just makes too much business sense to use Kotlin now for most new development. 

I'm starting to now think that the future of Scala will be one that focuses on pure FP and pushes the limits of FP on the JVM. 

[Edit] Fixed typos/formatting",1540098579.0
springy,"I always saw Scala as a research project, focused on understanding advanced type systems and the complexities of blending OO and FP. Kotlin is more focused on practical concerns for the professional programmer. So, different aims.",1540112094.0
vytah,"First of all, that syntax helper would be usually generic and `AnyVal`, but let's ignore it for a moment.

Imagine, in the first case, that you have a client code that looks like this:

    def f[A: TypedAsString](a:A) = ...

If you call it with an `i : Int`, you'll get, after implicit resolution:

    f(i)(Instances.IntTypedAsString)

Everything is nice and dandy. No extra allocation are happening except for maybe `Int` being boxed due to being passed to a polymorphic function.

Now imagine the second case. Now you can no longer call `f` as is, since there is no implicit value of type `TypedAsString[Int]` in the scope. There is an implicit class, but there's no implicit `Int` to convert into it either. So your code would have to call explicitly as `f(i)(i)`. Or even worse, as `f(i)(1)`. 

Besides, code like `1.asStringWithType(2)` is now also valid.

Let's now assume you replaced `f` with this:

    def g[A](a:TypedAsString[A]) = ...

You can call `g(i)` no problem, but suddenly you have unavoidable pointless boxing (`AnyVal` won't help, since `TypedAsString` is a trait). Also, you cannot access the original integer from within the `TypedAsString` trait. And finally, you cannot use `a.asStringWithType()` inside `g`, you'll have to use `a.asStringWithType(a)`.

",1540063241.0
TheBlueRaja,"One immediate reason could be the possibility of of collisions, in which case the Scala compiler gives up and gives you `error: value asStringWithType is not a member of scala.this.Int println(42.asStringWithType)`.

[Full example at Scalafiddle](https://scalafiddle.io/sf/V58OL9Y/7)

    object CollidingOps {
      implicit class IntTypedAsStringSyntax(a: Int) {
        def asStringWithType(): String = 
          s""$a is a ${a.getClass}""
      }
    }
    
    import CollidingOps._
    import InstanceAndSyntax._
    
    42.asStringWithType
    // compile error: value asStringWithType is not a member of scala.this.Int println(42.asStringWithType)

I know this seems contrived, but is a possibility.

I usually follow patterns similar to what you find in Cats,  Scalaz, Shapeless, etc.:

    trait TypedAsStrin[A] {
    
      def asStringWithType(a: A): String
    }
    
    object TypedAsString {
      // Standard ""Summoning"" constructor.
      def apply[A](implicit ev: TypedAsString[A]): TypedAsString[A] = ev
    }
    
    trait Instances {
    
      implicit val IntTypedAsString = new TypedAsString[Int] {
    
         def asStringWithType(a: Int): String = s""Int($a)""
      }
    }
    
    trait Ops {
    
      implicit class IntTypedAsStringSyntax(a: Int) {
    
        def asStringWithType()(implicit tc: TypedAsString[Int]): String = tc.asStringWithType(a)
      }
    }
    
    object syntax extends Ops
    
    object instances extends Instances
    
    object all extends Instances with Ops

## Failing Example:

    import all._ // Analogous to your implementation. 
    import CollidingOps._ 
    println(42.asStringWithType) // Compile error: value asStringWithType is not a member of scala.this.Int println(42.asStringWithType)

## Passing Example:

    import instances._
    import CollidingOps._
    println(42.asStringWithType)
    println(TypedAsString[Int].asStringWithType(42))
    // Prints:
    // 42 is a int
    // Int(42)

This gives users the option to bring everything or just the things they need.  Choice is a Good Thing™ :)

&#x200B;

EDIT: Some formatting.

EDIT 2: Missed the object definitions.",1540062885.0
teknocide,"Heya!

You could parameterise the methods to return the generic type of the list. Also note that some `Seq`, like the mutable ones, are invariant: You can't pass one of these to a method with a signature like `Seq[Any]`.

Another gotcha is the `seq.size != 1`, which will evaluate the length of the sequence before pulling the first element. For some seqs this is costly (List) and for Stream this is a non-terminating operation.

You can base all your single* methods on a base method `singleOption` which solves the problem in a Scala-idiomatic way, and then use its result to get the other desired behaviours.

    def singleOption[A](seq: Seq[A]): Option[A] = seq match {
      case Seq(single) => Some(single)
      case _ => None
    }
    
    def single[A](seq: Seq[A]): A = 
      singleOption(seq).getOrElse(throw new Exception(""Not a single element""))
    
    def singleOrNull[A](seq: Seq[A])(implicit ev: Null <:< A): A =
      singleOption(seq).orNull


edit: I guess the main reason there's no `single` method on sequences in scala is that `seq match { case Seq(x) => <stuff> }` is pretty short as it is, and the fallback behaviour is very case by case-specific. And, as has been previously mentioned, if you actually do want to convey the meaning of ""either no or one item"" you usually use `Option`.",1540032468.0
Scf37,"`.single()`/ `.singleOrNull()` - one-item list is rare in Scala because if you intend to have a list with zero or one item you can use `Option` and if it is filtered list you can use `find` instead of `filter`
",1540025736.0
Falmarri,">.single() - this method can be chained at the end of any sequence to pull out the lone item from a single item sequence. If there is not only a single item the method will throw an exception.

This is just .head

>.singleOrNull() - this method works the same as single() except it returns null in the even that there is not exactly one item in the sequence.

This is just .headOption

> Example val x = (true) ?? 1 :: 2 will set the variable x to 1 because the boolean value that it implicitly modifies evaluates to true.

This is just `val x = if (true) 1 else 2`",1540009933.0
Falmarri,"This library reminds me of `left-pad` in the npm world. You don't need to pull in a dependency for 3-4 lines of code, that's crazy",1540059437.0
naftoligug,"`repeat` is <Collection>.fill, e.g., `List.fill(10)(math.random).`

It actually goes up to 5 dimensions

```scala
@ List.fill(3, 4, 2)(0) 
res5: List[List[List[Int]]] = List(
  List(List(0, 0), List(0, 0), List(0, 0), List(0, 0)),
  List(List(0, 0), List(0, 0), List(0, 0), List(0, 0)),
  List(List(0, 0), List(0, 0), List(0, 0), List(0, 0))
)
```
",1540100573.0
Storini,Very interesting. The road to Shapeless with ***no macros at all...***,1540325750.0
memorythought,"With a small amount of boilerplate you can have streams that use your own types rather than GenericRecord.  

```
object RecordFormatSerdes {
  def recordFormatSerdes[T <: Product](implicit rf: RecordFormat[T]): Serde[T] = {
    Serdes.serdeFrom(
      new Avro4sSerializer(),
      new Avro4sDeserializer()
    )
  }
}

class Avro4sSerializer[T <: Product](implicit rf: RecordFormat[T])  extends Serializer[T] {
  private var inner = new GenericAvroSerializer()

  override def serialize(topic: String, data: T): Array[Byte] = {
    val gr = rf.to(data)
    inner.serialize(topic, gr)
  }
  override def configure(configs: util.Map[String, _], isKey: Boolean): Unit = {
    inner.configure(configs, isKey)
  }
  override def close(): Unit = {
    inner.close()
  }
}

object ImplicitSerdes {
  implicit val myTypeRecordFormat = RecordFormat[MyType]
  implicit val myTypeSerdes: Serde[MyType] = recordFormatSerdes


  def configure(schemaRegistryUrl: String): Unit = {
    val config: util.Map[String, _] = Map(""schema.registry.url"" -> schemaRegistryUrl).asJava
    myTypeSerdes.configure(config, false)
  }
}
```

Note I've missed out the implementation of `Avro4sDeserializer` because it's basically identical to `Avro4sSerializer`

Now if you import `ImplicitSerdes._` you can use the kafka streams API with your own types.

```
import ImplicitSerdes._
ImplicitSerdes.configure(registryUrl)

val myTypeStream: KStream[_, MyType] = streams.stream(""some-topic"") //Assuming a configured streams instance
```


",1540034982.0
estsauver,"It looks like you're doing a blocking http request in the middle there and a thread.sleep on error. My guess is your CPU is pegged doing thread switching desperately looking for a thread it can do work on while it's waiting for a reply from azure. 

My guess would be you need to tweak threadpool settings for jetty. In the jetty world you're going to need as many threads going as you have concurrent requests. 

You could also always come over to the dark side of non blocking Scala!",1539920400.0
m50d,Jetty is widely used and unlikely to have serious obvious bugs. Troubleshooting CPU use just from the code is virtually impossible. Run the service under profiler and see where that CPU is actually going.,1539940063.0
slackingScalably,There's a stack overflow waiting to happen at line 31.,1539974201.0
estsauver,"The docs you're looking for are here: 

http://slick.lightbend.com/doc/3.1.0/database.html

See the section on connection pools in particular.",1539920568.0
naftoligug,"Slick 2 had a Session object that was passed implicitly in local code blocks.

The Slick 3 way is completely different. You create a Database object and hold onto it yourself however you like. Then you use it to run composed DBIOs.
",1540232124.0
rtk42,Really great work guys. Enjoying the perf/flexibility. Keep it up 😁,1539945314.0
teknocide,"The best thing about these posts is that even if I may never get to use the library, the technical read is really interesting.",1539949892.0
poluserthrowaway,I never cared for the speed of running but damn are they fast to write.,1539886131.0
deceptive_duality,Nice! I found the previous version really useful.,1539883802.0
poluserthrowaway,"To add to my previous comment, I'd prefer fast to write stuff over fast to run stuff. I'm using scala after all. A cursory glances tells me that you haven't changed a lot but I do hope you keep user friendliness on th front as you usually do
",1540024202.0
ukralibre,This man is pure gold,1539962400.0
hyperforce,"Is this a knock on the interpreter pattern?

Great job as always!",1539899153.0
dnoskov,there is a book by chris okasaki on purely functional data structures (but there is haskell as i remember). also here is a repo with some examples https://github.com/vkostyukov/scalacaster/blob/master/README.md,1539876426.0
dnslbr,"You basically need to define a Tree\[Type\] as a trait and then implement two case classes that extend this trait. The case classes are Leaf(value: Type) and Node(left: Tree\[Type\], right: Tree\[Type\]). These case classes you will be using for pattern matching over your Tree data structure. Martin Odersky's book tells a lot about Trees and other ADTs",1539876584.0
m50d,"What kind of trees? What kind of problem are you trying to solve with them? I sometimes use e.g. `case class Tree[A](value:A, children: Vector[Tree[A]])` as a simple tree structure.",1539876821.0
orangeoliviero,The standard library tutorial at scala-examples.org has one,1539879350.0
emilypii,"What kind of tree? Assuming you want something like a binary tree, you have a few options to choose from. The degenerate tree is a list.

    // L a = 1 + a * L a
    sealed trait List[A]
    final case class ::[A](head: A, tail: List[A]) extends List [A]
    final case class Nil[A]() extends List[A]
    
And you have the a binary tree, which may look like this:

    // T a = 1 + a * T^2 a
    sealed BTree[A]
    final case class Branch[A](node: A, left: BTree[A], right: BTree[A]) extends BTree[A]
    final case class Tip[A]() extends BTree[A]

And that's about as complicated as it is to build inductive types!

You can expand this to Rose trees: 

    // T a = 1 + a * L (T a) 
    final case class Branch[A](node: A, subtrees: List[Rose[A]])

In haskell, this would look like

    data List a = Nil | a :. (List a)
    data Tree a = Tip | Branch a (Tree a) (Tree a)
    data Rose a = Rose a [Rose a]


For reference.",1540085626.0
Gnaneshkunal,"You can find a simple Tree implementation in the ""Patten Matching"" section in the [Scala Lang Homepage](https://www.scala-lang.org/).

I've further extended it to make it easier to build trees.

Here's an example of Tree and `inOrder` of a Tree.

The following code uses this [Graph](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Binary_tree.svg/384px-Binary_tree.svg.png).

    sealed abstract class Tree
    case object Leaf extends Tree
    case class Node(elem: Int, 
                    left: Tree = Leaf, 
                    right: Tree = Leaf) extends Tree
    
    val t = Node(2,
                Node(7,
                    Node(2),
                    Node(6,
                        Node(5),
                        Node(11)
                        )
                    ),
                Node(5,
                    Leaf,
                    Node(9,
                        Node(4)
                        )
                    )
                )
    
    def inOrder(t: Tree): List[Int] = t match {
      case Node(e, l, r) => inOrder(l) ::: List(e) ::: inOrder(r)
      case Leaf => List()
    }
    
    println {
      inOrder(t)
    }",1540129372.0
arisdra12,Thank you all for the replies. My problem is that I have big data and I sort them and I will process them like the r-tree and another way in order to reach maxim time efficiency. So that i want is to make a r-tree ,1540485102.0
duhace,"here's how:

    class Tree
    val t = new Tree
    val u = new Tree
    val trees = List(t,u)
",1539944498.0
dnslbr,Is it just a commercial of your moocs?,1539964039.0
user5543,"Clojure is the biggest non-java language? Yeah, I don't think I'll believe anything else in the survey either.",1539845736.0
dtechnology,I'd take the non-Java JVM section with a bit of salt. The survey was sourced mostly from Java User Group members,1539840568.0
Leobenk,"so you need to assign the result to a value. 

&#x200B;

`val myList = input`

&#x200B;

Because your method `input` return the list. 

&#x200B;

Also an other error, I think that you need to have `readLine` inside the `while` loop otherwise the value of `x` does not change. ",1539805585.0
Demius9,"This was a really good article, and i know not a ton of people like to look at things like this, but the implications of this could also show that performance could slow down due to cache misses if you're trying to keep your objects size small enough to fit in the cache while using value classes.",1539800601.0
rjghik,"Nice article, but it doesn't tell the whole story. There's even more surprising limitation of value classes which involves universal traits. For example:

```scala
trait Base extends Any {
  def method: String = ""boxboxbox""
}
class Wrapper(private val str: String) extends AnyVal with Base
```
Now, calling `new Wrapper("""").method` **will** instantiate `Wrapper` in runtime, which is absolutely terrible.

Despite all their limitations, value classes are still worth using. They are statically enforced to be non-null which is nice. However, they can still *wrap* a `null` value but [I wouldn't recommend that](https://github.com/scala/bug/issues/7396).

One place where value classes yield a pretty clear benefit is when they are used as field types (e.g. in a case class). This might significantly reduce memory usage and make heap-stored data structures much faster. For example, [this benchmark](https://github.com/AVSystem/scala-commons/blob/master/commons-benchmark/jvm/src/main/scala/com/avsystem/commons/core/OptBenchmarks.scala) compares simple list-like data structures which use either `Option`, `Opt` (which is `Option` reimplemented as value class) and unwrapped, nullable values. `Option` turns out to be about two times slower which is exactly the expected result, because there are twice as many pointers in memory to traverse.",1539813936.0
BarneyStinson,I can recommend this approach as an alternative that truly does not box: http://nocandysw.com/opaque-types-to-infinity.pdf,1539856656.0
argv_minus_one,"That is syntactically horrible. Why can't we just have a “strict” kind of `AnyVal` that never boxes, and in exchange, doesn't allow overriding any superclass methods? Surely we don't have to sacrifice the cleanness of `AnyVal` syntax just for that.

Also, we really don't need to add an `opaque` modifier, because Scala already has a way to express this: annotations!

    import scala.annotation._
    class Id extends Annotation with TypeConstraint
    
    object Id {
        inline def apply(s: String): String @Id = s.asInstanceOf[String @Id]
    
        implicit class IdOps(val id: String @Id) extends AnyVal {
            def isInDatabase(implicit db: SomeDatabase): Boolean = db.contains(id)
        }
    }
    
    val a: String = ""argv_minus_one""
    val b: String @Id = a     // Doesn't type check, because String ≰: String @Id
    val c: String @Id = Id(a) // OK
    val d: String = c         // OK because String >: String @Id

…Or, it would if [`scala.annotation.TypeConstraint`](https://www.scala-lang.org/api/current/scala/annotation/TypeConstraint.html) was actually implemented.",1539862828.0
Baccata64,That is awesome ! Thank you so much for sharing it ! ,1539772167.0
runchanlfc,This is brilliant. Thank you so much op,1539795070.0
ukralibre,You are awesome,1539817464.0
hmemcpy,"These are really great! Thanks!

Are there videos by any chance?",1539871049.0
yuvalos,Thanks a lot for this!!,1540034958.0
japgolly,Sorry - I posted here accidently. I've moved to /r/ScalaConferenceVideos and deleted this now.,1539766059.0
kkweon,dynamic typing is no fun,1539756417.0
colindean,"I'll bite.

1. Writing code like sentences is pretty rad: `.` optional in places enables that.

2. Use someone else's VM to get their ecosystem.

",1539747469.0
balefrost,"Probably didn't learn much of anything from Elixir. By the time Elixir was released, Scala was pretty established. Maybe some minor things have bled over.",1539747686.0
hallorow,"I am doing a little side project with Elixir and in my work  I use Scala fulltime, this things should be learned by Scala from Elixir (IMHO):

* Pipe Operator syntax sugar is pretty
* A build tool umbrella projects friendly like Mix
* Pattern matching on method definition, less verbose and powerful, it is so powerful that you don't need a static type system. If you want ""compilation"" type checking you can use Dyalizer for type checking.
* A built-in distributed process system, (you don't need external libraries as akka or akka-remote) (This feature came from ErlangVM is not unique of Elixir)
* A hot-reload deploy system with version management....(This feature came from ErlangVM is not unique of Elixir)

This is just my honest opinion :)

&#x200B;",1539779058.0
carlfish,"While ""graph traversal is a well known problem, here's a better way to do it scratch"" is both a valid solution and good advice, I think it's also a good learning exercise to go through the code as it's written and see how we can improve it. 

I'm guessing a little about the requirements here because the code is contradictory in places, but I'm going with ""find all cities reachable in exactly n jumps with no backtracking"" if range is false, and ""find all cities reachable in at most n jumps"" if range is true.

So steps 1-3 are some basic cleanup, and duplication removal so I can understand the code better myself:

1. rename some variables,
2. push responsibility for making sure the origin is a valid city up to the caller
3. add the origin to the set of cities that have already been visited

&#x200B;

    def fromJumps(origin: City, maxJumps: Int, allJumps: Boolean = false): Set[City] = {
      def nextJump(c: City, jump: Int, visited: Set[City]): Set[City] = c match {
        case Spoke(n, _) if (jump == maxJumps && !visited(c)) =>
          if (allJumps) visited + c else Set(c)
        case Spoke(n, _) if (c != origin) => Set()
        case Hub(n, routes) if (jump > 2 && routes.contains(origin) && jump == maxJumps) =>
          if (allJumps) visited else Set(origin)
        case Hub(n, routes) if (jump > 2 && routes.contains(origin)) => Set()
        case _ => {
          val cs = routes(c).diff(visited)
          cs.toList match {
            case Nil => if (allHops) visited + c else Set(c)
            case _ if (jump == maxJumps) => if (allJumps) visited | cs else cs
            case _ => cs.flatMap(c2 => nextJump(c2, jump + 1, visited + c2))
          }
        }
      }
      nextJump(origin, 1, Set(origin))
    }

Now let's look at it piece by piece

     case Hub(n, routes) if (jump > 2 && routes.contains(origin.name) && jump == maxJumps) =>
        if (allJumps) visited else Set(origin)   
     case Hub(n, routes) if (jump > 2 && routes.contains(origin.name)) => Set()

Removing previously-visited cities from candidate next-cities  (`val cs = routes(c).diff(visited)`) is sufficient to prevent loops, so `trip > 2 && routes.contains(origin)` will only ever be true where the  route `hub -> origin` exists, but not the route `origin -> hub`, in which case it seems erroneous to end the trip at this hub because there might be a bunch of other places you can reach from it.

There's also a possible off-by-one error here. The first time we call this function, `c == origin` and `jump == 1`, so `jump == maxJumps` means we still have one city left to visit! Returning the current city here appears to be ending the trip one jump too soon.

    case Spoke(n, _) if (inc == maxTrips && !visited(c)) =>
      if (allJumps) visited + c else Set(c)
    case Spoke(n, _) if (c != origin) => Set()

These cases have the same problems as the previous two. We're already preventing ourselves from revisiting cities, and `inc == maxTrips` means we have one city left to visit.

    case _ => {
      val cs = routes(c).diff(visited)
      cs.toList match {
        case Nil => if (allJumps) visited + c else Set(c)
        case _ if (jump == maxJumps) => if (allJumps) visited | cs else cs
        case _ => cs.flatMap(c2 => nextJump(c2, jump + 1, visited + c2))
      }
    }

1. If there are no places left to visit, the current city is a valid destination regardless of how many jumps remain
2. If we are one our last jump, all unvisited connections are valid destinations
3. Otherwise, jump to each unvisited connection

Case 1 seems contradictory. It means hubs will only be valid destinations if you hit them with exactly the right number of jumps, but spokes will always be valid destinations. It also seems to contradict your statement that you should return ""an empty set if all cities have been traversed"".

Since I don't have access to the original requirements, I'm going to go ahead with the interpretation I started with - we're either looking for all reachable cities in at most `maxJumps` jumps, or all reachable cities in exactly `maxJumps` jumps with no backtracking. In this case we can:

* Remove the special-case handling for hubs and spokes entirely
* Count down instead of up (this is just a preference, but it generally makes recursion easier to understand)
* By the requirements, we should return an empty set if all cities have been traversed but we still have jumps remaining.

&#x200B;

    def fromJumps(origin: City, maxJumps: Int, allJumps: Boolean = false): Set[City] = {
      def nextJump(currentCity: City, jumpsRemaining: Int, visited: Set[City]): Set[City] = {
        val nextCities = routes(currentCity).diff(visited)
    
        if (jumpsRemaining == 1 || nextCities.isEmpty)
          if (allJumps) 
            visited ++ nextCities 
          else 
            nextCities
        else
          nextCities.flatMap(
            c => nextJump(c, jumpsRemaining - 1, visited + c)
          )
      }
    
      if (maxJumps < 1) 
        Set() 
      else 
        nextJump(origin, maxJumps, Set(origin))
    }

A final note, I think if you had tests for this function, or even better if you had written tests while you were implementing the code, you'd have probably found the more straightforward solution yourself pretty easily.",1539725544.0
jonhanson,"TBH, the data model looks slightly odd. Hubs and Spokes seem to have overlap - isn't a Hub just a Spoke with one ref? Modelling them as separate cases just adds more baggage. Get rid of Hub.

Also this is basically just graph traversal - rename Spoke to Edge and Network to Graph. In fact I would be tempted to first rewrite the data model as an Adjacency Matrix. Under that representation operations like fromJumps can be reduced to matrix ops.",1539721335.0
zzyzzyxx,"It feels like there are only a couple sources of complexity here all getting handled at the same time to meet requirements. The code may turn out cleaner if you handle them separately. The requirements I see:

1. Accumulate all visited cities vs only keep the last, i.e. the `range` flag
2. Do not include the origin unless it's reached from a hub on the last jump

I also think trying to make use of the single `acc` and making sure it has the right values at every step is contributing to the complexity compared to tracking a few different pieces at each step.

Here's how I might approach the problem. It uses more of a breadth-first approach instead of depth-first to avoid that `flatMap` problem. Note: I wrote this in-browser and didn't attempt to compile or run it, but it should be a close approximation.

    def fromJumps(originName: String, maxJumps: Int, includeAll: Boolean = false): Set[City] = {
      val origin = graph(originName)
      val lastJump = maxJumps - 1
    
      def isHubToOrigin(c: City): Boolean = c match {
        case Hub(_, rs) => rs contains origin
        case _ => false
      }
    
      @tailrec
      def eval(jump: Int, cities: Set[City], reachedOriginFromHub: Boolean, allVisitedCities: Set[City]): Set[City] = {
        if (jump < maxJumps) {
          var hubToOrigin = false
          val neighbors = cities flatMap { c =>
            hubToOrigin = jump == lastJump && (hubToOrigin || isHubToOrigin(c))
            routes(c)
          }
          eval(jump + 1, neighbors, hubToOrigin, if (includeAll) { cities ++ allVisitedCities } else { Set.empty })
        } else {
          val baseResult = if (includeAll) { cities ++ allVisitedCities } else { cities }
    
          if (reachedOriginFromHub) { baseResult + origin } else { baseResult - origin }
        }
      }
    
      eval(1, routes(origin), Set.empty)
    }

I'd consider breaking out the logic a little more even so that the extra logic for the last jump is really only part of the last jump but I don't know how much that would really improve things.",1539986670.0
softiniodotcom,"Use Akka Streams + Kafka to achieve what you want. Its an awesome combination.

&#x200B;

[https://doc.akka.io/docs/akka-stream-kafka/0.11/introduction.html](https://doc.akka.io/docs/akka-stream-kafka/0.11/introduction.html)",1539702219.0
pavlik_enemy,No. Unfortunately you have to you roll your own.,1539733054.0
bardadymchik,Also would like to see something like celery or resque. At work we end by building basic task queue on  top of redis.,1539711980.0
v_krishna,Akka. It's different than celery (actor model vs queue with workers) but generally will serve the same purposes.,1539700127.0
amazedballer,You mean like Apache gearpump?  I’m not familiar with celery.,1539699071.0
depleteduraniumftw,There is at least 4 different IMDGs for JVM. They all have queues. Also Redis.. or pretty much any other DB. Any shared filesystem would work.,1539744984.0
fokot2,"If you need something simple and already packed in, what bout [ScheduledThreadPoolExecutor](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html) from java?",1539762779.0
Milyardo,"I've never used java gnome, but I imagine there's a jar file in the package you want to include in your [unmanaged dependencies](https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html).

In addition, there's a native binary you want to load with the JVM at runtime by adding `-Djava.library.path=<path_to_shared_object>` using the `javaOptions` key. Because of this, when you run the app you want to fork with a new process, so you'd set `fork` to be `true` as well.",1539624244.0
Philluminati,Look up the documentation for apt and figure out how to view the contents of the deb package. Then you can see what the package provides. I’m guessing a directory under /usr/share with some .class files or some jars. You could put that in your java class path and go from there perhaps?,1539876545.0
lihaoyi,"Published a new version of [Mill](https://github.com/lihaoyi/mill), 0.3.2. Highlights:

- Zero-config creation of executable jars, so you can easily make CLI tools & other things without fussing around with plugins https://pbs.twimg.com/media/Dp7nW9iUwAEPnQ3.png

- 10x faster creation of docJars, speeding up publishLocal and publishSigned

Generally lots of quality of life improvements to make doing the common thing easier and more seamless",1540095563.0
lu4nm3,"For the past year or so, I've been working on an open source library called [nextime](https://github.com/lu4nm3/nextime). It uses strong typing to make working with cron expressions a safer and easier experience. It's still a work in progress but I felt the project was at a good place for an initial release.",1539625685.0
roelofwobben,Exercises of the scala-with-cats before Im going to dive into the red book by Manning,1540222726.0
shadaj,"Finished up the final touches on [supporting 32-bit platforms](https://github.com/scala-native/scala-native/pull/1363) in Scala Native, started work on supporting [React 16.6 features](https://github.com/shadaj/slinky/issues/196) in Slinky, fixed up CPU instruction timing in my work-in-progress Scala NES emulator (mainly just to procrastinate on writing an essay for a class).",1540509426.0
Odersky,"EPFL | Compiler Engineer | Lausanne, Switzerland | ONSITE | Full Time

Between my group at EPFL and the Scala Center we have a couple of vacancies for compiler engineers. The task is to work on the Scala 3 compiler (codebase known as dotty) and its supporting ecosystem of tools (i.e. IDE, build tooling, testing framework, core libraries).

Experience: We are looking for people who are experts in compiler construction and know Scala well. When in doubt, the compiler aspect is the most important one.

Starting date: Dec 1st, 2018, or up to 3 months afterwards (earlier is better).

Salary: Depends on age and experience, as determined by EPFL HR. I would expect it to be somewhere in the 75k to 95k CHF/year range, depending on your experience.

EPFL regulations don’t allow remote work (sorry), so you have to be prepared to move to Switzerland.

Here’s a link to the [job description](https://recruiting.epfl.ch/Vacancies/693/Description/2)",1539699193.0
labyj,"Lucid Software | Software Engineer in Application, Dev Tools, or Site Reliability Engineering | Salt Lake City, UT, USA | Onsite | Full Time


Lucid Software is the creators of Lucidchart and Lucidpress - world-class web applications that push the boundaries of what is possible in your browser. The entire application back end is written in Scala. The frontend stack uses TypeScript, Angular, WebGL, and the Google Closure Compiler. The build system is Bazel. We are hosted in AWS.

We are a ~400 person company outside of Salt Lake City Utah, that is growing like mad. 

We are looking for 

- Application engineers to help build applications that users love.
- Development tools engineers to help build a development experience that engineers love.
- Site reliability engineers to help build a scalable, reliable, and performance production system.

More information and the application can be found here

- [Application Engineer](https://www.golucid.co/careers/f9cb83be-e016-4be5-91dc-598e17e8d04c?team=Engineering)
- [Development Tools Engineer](https://www.golucid.co/careers/c8de139c-6da7-44dc-a4af-95052aa2a086?team=Engineering)
- [Site Reliability Engineer](https://www.golucid.co/careers/be16cacc-4cd3-4be0-9ec0-070646f9ec69?team=Engineering)

Please DM me if you would like to chat about any of the positions. Please mention this Reddit thread if you apply :D",1539626122.0
juli1pb,"Twitter| Software Engineer | San Francisco, New York | ONSITE | Full Time 

My team is hiring developers that are talking Python and Scala. Amazing team, amazing boss and great company. Warning: you will NOT write scala all day but it will be probably 50% python and 50% Scala.

https://careers.twitter.com/en/work-for-twitter/201808/senior-software-engineer-infrastructure-management-services.html

DM me if you have any question.",1539664061.0
pbgeorge,"Pacific Biosciences | Senior Staff Software Engineer | Menlo Park, CA, USA | ONSITE | Full Time

PacBio develops a novel DNA sequencer for researching cancer, infectious disease, and all areas of basic biology. This senior role will develop software in Scala for managing DNA sequencing data, designing and executing scientific analyses and more.

[https://www.linkedin.com/jobs/view/senior-staff-software-engineer-at-pacific-biosciences-920776312/](https://www.linkedin.com/jobs/view/senior-staff-software-engineer-at-pacific-biosciences-920776312/)",1539803673.0
Onedayillsailaway,"Tray.io | Senior Scala developer | London, UK | ONSITE | Full Time |

# Description

Tray.io is ushering in the era of the automated organisation

We believe that any organisation can and should automate. With Tray.io, citizen automators throughout organisations can easily automate complex processes through a powerful, flexible platform, and can connect their entire cloud stack thanks to APIs. Today businesses like IBM, GitHub, Forbes, Lyft, and Digital Ocean rely on Tray.io to connect and automate data flow between the tools they use every day. With Tray.io visual workflow builder our customers create automations to drive their business processes without writing a single line of code. Our challenge is to build a cutting-edge product that is powerful and complete while also being beautiful and easy to use.

You'll contribute directly to this mission with a team that fully supports you to do your best work. You'll join humble but fiercely ambitious people like yourself, who also take great pride in what they do, working in a culture built on friendship, transparency, and above all, looking out for one another. You'll have endless opportunities to learn and grow professionally in a fun, fast-paced, and open environment. Plus, you'll get to make your mark at a rapidly-growing company positioned to completely reinvent a multibillion-dollar industry.

# Your mission

Tray.io backend infrastructure processes millions of requests per day and is a mission-critical component of our customers' businesses. As a Software Engineer working in the Platform team at Tray.io, you’ll be part of a team responsible for designing, building and running the software and systems which underpin our large-scale, real-time, distributed infrastructure. We expect you to build flexible services and tooling which allows Tray.io to rapidly scale whilst delivering a seamless experience to our customers.

The Platform team is responsible for providing a production environment where connectors integrations and automations can run reliably and at scale. This involves dealing with compute providers, networking, packaging, storage, monitoring, logging, and security. This necessitates building the services and APIs that expose these services to internal and external users of our infrastructure.

# Responsibilities:

* Developing flexible services & tooling that allows people to store and run integrations at scale
* Building internal and external facing tooling and API’s that allow our users to fluidly build on our platform
* Working collaboratively with Product managers to deliver key security, scalability and reliability features
* Growing a motivated, high-performing team
* Automate the testing and deployment of your work
* Envision new features that help our users connect services faster and easier

### Minimum qualifications:

* BS degree in Computer Science or related technical field, or equivalent practical experience.
* Solid experience in a stand-out production environment
* Expert knowledge of at least two programming languages and paradigms (e.g. Scala, Java, Kotlin, Groovy, Go)
* An irrational passion for building distributed systems
* The desire to learn, improve and work together
* Good knowledge of internet networking and performance
* Passionate about troubleshooting, debugging, and automation
* Experience building web services and APIs

### Preferred qualifications:

* Experience launching cloud-based services
* Experience with real-time, distributed systems
* Experience with writing multi-threaded software
* Passion for performance and tuning
* Experience in capacity planning and load testing
* Experience with clustering technologies (e.g. Kubernetes, CoreOS, Mesos)
* Previous IaaS or PaaS experience

### Tech Stack

* Scala, Go, JavaScript, TypeScript
* PostgreSQL, Redis, ElasticSearch, Cassandra, AWS SQS, AWS Kinesis
* Docker, Terraform, AWS Lambda, Serverless Framework
* Jenkins, Grafana, Prometheus
* AWS & Linux

# Benefits

Working at Tray.io offers many perks, but most importantly we are a talented team with a passion for the product we are building.

* Competitive salary
* Stock options
* Unrestricted holiday policy & work from home days
* Flexible working hours
* A fun and supportive working environment
* Top of the range equipment budget
* Drinks fridge & stocked kitchen
* Social events (team breakfasts/lunches, evenings out & trips)
* Employer contributory pension scheme
* Cycle to work scheme
* Private healthcare
* 50% off Virgin Active gym membership

# To apply:

Send us your resume here [https://tray-io.workable.com/j/50E49D5631](https://tray-io.workable.com/j/50E49D5631) or shoot me a PM

# Equal Opportunity

Tray.io is proud to be an Equal Employment Opportunity and Affirmative Action employer. We do not discriminate based upon race, religion, colour, national origin, gender (including pregnancy, childbirth, or related medical conditions), sexual orientation, gender identity, gender expression, age, status as a protected veteran, status as an individual with a disability, or other applicable legally protected characteristics.",1540309688.0
FunctionalFlavia,"\[JOB\] - Tech Lead & Mid Level Scala Position In London for Tech Start Up ( Europe Based)

📷

[https://functional.works-hub.com/jobs/software-engineer-platform-team-lead-in-london-united-kingdom-7de9a#utm\_source=reddit&utm\_medium=job&utm\_campaign=f.bojescu](https://functional.works-hub.com/jobs/software-engineer-platform-team-lead-in-london-united-kingdom-7de9a#utm_source=reddit&utm_medium=job&utm_campaign=f.bojescu)",1542191582.0
sentenzazen,"As I've already stated in the title of this thread, it would be absolutely great and utterly amazing to have any help and feedback about this project. I'm looking for developers as well as maintainers and reviewers.  Even starring the repo would be helpful to spread the word.

Helping newcomers to learn a FP language, and in particular Scala is not as simple as it seems, and having the backup of other volunteers makes the real difference. 

You have to consider that, at the moment, it's a lot easier to find a project like that in Case or JS rather than Scala. We should try to make the difference. ",1539729263.0
nutsack_dot_com,"I don't have time at the moment to test this, but I suspect this is due to how the second is desugared.  The assignment (probably) leads to a `map` call producing a tuple of `(date, data)`, and the `if` leads to a `withFilter` call.  

If that's right, then it means that an intermediate collection is made that contains all the tuples (with the results of the DB calls).  Compare that to the first example, where the result of each DB call can be GC'd immediately after it's used.

A workaround for the for-comp way would be to use an iterator, which would prevent making the intermediate collection, ie:

    for {
      date <- dates.iterator
      data: Seq[Data] = findDataOnDate(date)
      if data.nonEmpty
    } {
      // do something
    }  
",1539569944.0
Milyardo,"I'm not sure if there's a relation between the two code samples and the stack trace you've posts. It would help if you describe the type of `dates` and `findDataOnDates`.

In the stack trace above there's a `Future` being evaluated, which is calling `map` on `Try` which is calling a closure in a function anmed `findCollateral` which you've made no mention of before, which is calling `toSet`.  All of those types and methods above make no appearance in wither sample you've made, so there's nothing to really go off of.",1539573543.0
MyFunc,"Are you using `yield` with the for comprehension? You can check how Scala code is desugared in the REPL.

    @ import scala.reflect.runtime.universe._
    import scala.reflect.runtime.universe._
    @ show { reify {
        for {
          x <- Option(""Hi"")
        } yield println(x)
      } }
    res1: String = 
    Expr[scala.Option[Unit]](Option.apply(""Hi"").map(((x) => Predef.println(x))))

    @ show { reify {
        for {
          x <- Option(""Hi"")
        } println(x)
      } }
    res2: String = 
    Expr[Unit](Option.apply(""Hi"").foreach(((x) => Predef.println(x))))
",1539580883.0
joshlemer,"Why do you have a Set of Futures? This seems very strange to me, maybe it should have been an Iterable or Seq?",1539571123.0
RowdyIsCool,"Preface by saying I'm no expert, but it looks about right to me. In that chain, I would await last (Future.sequence, then map future and flatten, then await), but that might just be a personal preference.

Another approach might be to change your Slick query. Obviously this depends on your use case, but it looks like you make repeated calls to the same query and collect the results in a set. Maybe there's a way to write your query so you only have to make one call?",1539559823.0
ikhoon,"If you are familiar with cats, Maybe [flatTraverse](https://github.com/typelevel/cats/blob/191fae4f5bb2bc58af967dcaef0fd97998a7b246/core/src/main/scala/cats/Traverse.scala#L50) works for you. Unfortunately cats don’t have Seq instance. I recommend List or Vector  to you. 

```
xs: List[A]

f: A => Future[List[B]]

import cats.implicits._

ys: Future[List[B]]: xs.flatTraverse(f) 
```
",1539563065.0
volpegabriel,"Avoid using `Await`, just pattern match on the `onComplete` method from `Future`. The rest sounds okay. ",1539566410.0
dtechnology,"Everything relying on macros will have to be rewritten.

I'm not aware of features that will guaranteed stop working, Dotty can do basically everything Scala2 can except for whitebox macros. I don't think scalaz uses/needs those.",1539435977.0
fommil,"Ostensibly, everything in the entire ecosystem will ""stop working"", not just scalaz.

However, the tools and libraries that get migrated to Scala 3 will be a factor of how much time and desire the volunteer contributors have to support a Scala 3 branch (or to continue supporting a Scala 2 branch), and the extent of changes that are necessary. For some projects, it may be trivial, for others it may require a rewrite.

Nobody knows enough about the specifics of Scala 3 to answer your specific question.

It is worth noting that Scalaz does not use any macros. The one compiler plugin it uses (kind-projector) can be replaced with boilerplate if necessary. My guess is that the build will be the biggest problem. Supporting 4+ versions of Scala 2, and cross building to both native and scalajs, is already pushing TravisCI to breaking point.",1539682283.0
volpegabriel,"I believe most people would decode the `json` into a case class and then validate it, unless it's a huge `json` in which case I would probably use something like `circe-fs2` but the idea would be the same.",1539416814.0
mundacho,"Something like this:

    (for {
        type <- (data \ ""type"").validate[String].asOpt.filter(_.equals(""user""))
        userId <- (data \ ""attributes"" \ ""user"").validate[String].asOpt
    } yield {
        // no need to the for all, the for comprehension fails if one of them is not defined
        // if your service returns an Option, the map extracts already the model, you don't need the isDefined in the map block
        myService.find(userId).map(user => {
            // update with the new property and return a Created status code
            // do stuff
            // return created
            Created
        }).getOrElse( NotFound )
    }).getOrElse {
        // here you define what happens when one of the elements in the for was None
        Future { BadRequest }
    }

&#x200B;

&#x200B;",1539439850.0
eeperson,"This would probably be easier to write if you made use of a `for` comprehension:

    def update(id: String) = Action(parse.tolerantJson).async { implicit request =>
      val body = request.body
      val data = body \ ""data""  
      val userIdOpt = for {
        type <- (data \ ""type"").validate[String].asOpt
        if type.equals(""user"")
        userId <- (data \ ""attributes"" \ ""user"").validate[String].asOpt
      } yield userId
        
      userIdOpt.fold(Future(BadRequest)) { userId =>  
        myService.find(userId).map { userOpt =>
          userOpt.fold(NotFound) { user =>
            // update with the new property and return a Created status code
          }
        }
      }  
    }

Any time you are reaching for the `get` method on an Option you are probably doing things in a way that makes things more complicated.  Generally these can be replaced with some combination of `map`, `flatMap` and `filter`.  If you need to use several of these then you probably want a `for` comprehension.

You can also make the above easier if you make use of a monad transformer, such as [OptionT](https://typelevel.org/cats/datatypes/optiont.html) from cats.  Monad transformers make easier to work with stacks of monads, in this case `Future[Option[A]]`.  It allows you to treat a nested monad as if it was a single layer monad.  So, when you write transforms, you only have to unwrap one layer.  Using OptionT you can write the above as:

    def update(id: String) = Action(parse.tolerantJson).async { implicit request =>
      val body = request.body
      val data = body \ ""data""  
      val userIdOpt = for {
        type <- (data \ ""type"").validate[String].asOpt
        if type.equals(""user"")
        userId <- (data \ ""attributes"" \ ""user"").validate[String].asOpt
      } yield userId
        
      userIdOpt.fold(Future(BadRequest)) { userId =>  
        OptionT(myService.find(userId)).fold(NotFound) { user =>
          // update with the new property and return a Created status code
        }
      }  
    }

EDIT - fix copy paste errors",1539397239.0
raghar,"Almost everything can be done with monads, not everything should :P

That said, you can do it all with Future:

    sealed trait Errors extends Exception
    case class ValidationFailed(msg: String) extends Errors
    case class NotFound(msg: String) extends Errors
    
    // I assumend Circe and the result in form Either[SomeErrorFormat, Json]
    // but you can do the same with PlayJSON or whateer you like
    def parseInput(input: String): Future[ApiSth] = parse[ApiSth](input) match {
      case Left(error) => Future.failed(ValidationFailed(error.toString))
      case Right(json) => Future.successful(json)
    }
    
    def getUser(userId: UUID): Future[User] = myService.find(userId).flatMap {
      case Some(user) => Future.successful(user)
      case None       => Future.failed(NotFound(s""Not found user with id = $userId""))
    }
    
    def updateUser(user: User): Future[User] = ...
    
    def endpointAction(input: String) = (for {
      apiSth <- parseInput(input)
      user <- getUser(apiSth.userId)
      _ <- updateUser(user)
    } yield user.asJson) // not sure which library you use, I assume that both returning Status or (Status, body) are allowed
      .map(Created -> _)
      .recover {
        case ValidationFailed(error) => BadRequest -> error
        case NotFound(error)         => NotFound -> error
        case error: Throwable        => InternalServerError -> error.getMessage
      }

Once you are comfortable with things like that, you might think about:

 * replacing Future with Task or IO
 * handling validation with Validated or Validation or Either or \/
 * putting them together with EitherT or Kleisli with whatever
 * going TTFI way to not care which implementation you use",1539424978.0
harit66,another thing you could try is [http://aperiodic.net/phil/scala/s-99/](http://aperiodic.net/phil/scala/s-99/). I have done some in the past and they help a lot,1539383083.0
iseon,"Was looking for something like this, thanks! So far only got half way through reading ""Programming in Scala"" and struggling to write any useful programs (still feels like a very foreign language). Though writing code in imperative ""Java"" style is easy. I should follow your example and make a repository I suppose.",1539381164.0
Daxten,have you take a look at `become`?,1539366413.0
parc,What are you hoping to accomplish by making the connection actor be a child of the torrent (or rather the pool)?,1539375182.0
johnynek,"Thanks for the attention on the project.

I would be happy to have any interested parties send PRs or propose use cases.

That said, there is not yet a super nice API for embedding in JVM apps yet

The CLI (Main.scala) has some documentation on help flags, but again, this is preliminary.

I’m most interested in using it for typed programmable config (think for configuring Kubernetes, builds etc...). There are a few language ergonomics issues I’m still tweaking but the basics are set:

Pure, Immutable, Total, Typed, no subtyping (outside of sum types), python-like syntax where possible.",1539321012.0
jokasx,See a lot of things I like.,1539370376.0
vipercmd,Thank you for the tip to use AshScriptPlugin.  The image size for my current project went from 699MB to 139MB.,1539434212.0
m50d,"I wouldn't - I'd stick to just building a ""fat jar"" (I use the maven shade plugin) as I've found that gives most of the benefits with less complexity. That said, if it does have to be docker I'd look for a plugin that builds docker images via whatever build system you're using - e.g. something like https://github.com/spotify/dockerfile-maven (I can't vouch for any specific plugin).",1539297158.0
mr___,"You don’t, the JVM is already a VM and docker adds nothing but additional complexity and cognitive load to the development process.  Not to mention having to rebuild the container to get security updates...",1539293667.0
yawaramin,"Most modern Scala JSON encoders should be able to automatically convert a `List[CaseClassType]` to a `JsArray[JsObject]`, accounting for empty lists as well. Depends on which one you’re using, the syntax will be slightly different.",1539262769.0
melolife,"I'm confused as to why the if/else is necessary. Conventionally you would do something like:

    JsArray(myService.findModelsByProperty(""mock-property"").map(Json.toJsObject))",1539271751.0
hazza192837465,Could you use pattern matching. Just match on the object and if its empty return an empty list otherwise do your logic.,1539267599.0
mundacho,"That won't work because if the returned list is empty, the map won't do anything. The solution is pattern matching:

&#x200B;

    myService.findModelsByProperty(""mock-property"") match {
        case Nil => JsArray.empty
        case models => models.map(m => Json.toJsObject[A](m))
    }

The code you are showing only makes sense if you return a list of lists, in that case, it should be:

    myService.findModelsByProperty(""mock-property"").map(_ match {
        case Nil => JsArray.empty
        case models => models.map(m => Json.toJsObject[A](m))
    })

&#x200B;",1539441875.0
Baccata64,"In order to consume messages from kafka, you have several libraries at your disposal :

* [https://github.com/monix/monix-kafka](https://github.com/monix/monix-kafka)
* [https://github.com/ovotech/fs2-kafka-client](https://github.com/ovotech/fs2-kafka-client)
* [https://github.com/akka/alpakka-kafka](https://github.com/akka/alpakka-kafka)
* [https://github.com/cakesolutions/scala-kafka-client](https://github.com/cakesolutions/scala-kafka-client)

These libraries will give you a binary blob representation of the kafka messages . Just read the documentation and choose whichever fits your usecase better and your level of knowledge. I personally like fs2 as a streaming abstraction, so I'd personally roll with that (or monix), but you might want to roll with an akka-based solution if you're more comfotable with the actor model.

Then you need to parse the binary to XML using the Scala language. Just google it, there are several decent articles on the subject.

Then you need to validate the parsed XML object against some data structure that matches your model (case classes/sealed trait). I'm not too aware of libraries that automate this process, so you might have to write a little bit of boilerplate there.

Then from your fairly vague question, I assume you need to save that data structure into your relational database. I'd personally roll with [https://tpolecat.github.io/doobie/](https://tpolecat.github.io/doobie/) , but you could decide to go with [https://github.com/getquill/quill](https://github.com/getquill/quill) or [https://developer.lightbend.com/docs/alpakka/current/slick.html](https://developer.lightbend.com/docs/alpakka/current/slick.html)",1539243842.0
LightBrowser,Jackson (look up faster xml) has a scale module  and will easily read an xml formatted string into a case class,1539203050.0
mruts,"Or, you know, you could do your own homework.",1539696792.0
yawaramin,"There's a really nice way to write `sumOfSquares` using a [Stream](https://www.scala-lang.org/files/archive/api/current/scala/collection/immutable/Stream.html). The key is to think of this as a data flow problem, with a few basic operations: start a stream of some values, transform it into a stream of different values, limit that stream based on a criterion, and finally sum up the limited remaining values in the stream. Here's a hint. You can start writing it like this:

    def sumOfSquares(upto: Int): Int = Stream.from(1).//... more stuff here

Spoiler: >!def sumOfSquares(upto: Int): Int = Stream.from(1).map(i => i * i).takeWhile(upto.>=).sum!<",1539264601.0
Ununpentium0,I figured out the second question! All I need help with now is the sumOfSquares function.,1539190885.0
restlesshermit,"`def sumOfSquares(arg: Int): Int = {`  
 `def calcSum(x: Int): Int =`  
 `if(x * x > arg) 0`  
 `else x * x + calcSum(x + 1)`  


 `calcSum(1)`  
`}`  


`sumOfSquares(1)`  
`sumOfSquares(2)`  
`sumOfSquares(3)`  
`sumOfSquares(4)`  
`sumOfSquares(100)`

Make sure you are able to explain *how* this works.",1539195975.0
cynick_uk,"`Int` is a primitive type, not a reference type. Only reference types (such as `String`) can be `null`. All primitive types have equivalent ""boxed"" reference types, e.g. `java.lang.Integer` boxes an `Int`.

This is how Java does it, and since Scala primarily targets the JVM, it inherits this particular quirk.",1539168964.0
WizzieP,"First example does not work, because in \`var x1 = null\` expression you didn't specify what type x1 should be. If you write \`var x1 = 1\` then Scala can infer that x1 should be Int, because 1 is Int. If you pass null Scala will infer type Nothing, because Nothing is the bottom type.

&#x200B;

Second example does not work because of how Java works - Int wraps Java type int, and int in java is a primitive type and can't be null, because in Java only subtypes of Object can be null. String is a subtype of Object, so it can be null.",1539169028.0
LPTK,The support for generic tuples looks very cool. It looks like the implementation is already using match types to achieve it: https://github.com/lampepfl/dotty/blob/master/library/src-scala3/scala/Tuple.scala#L31-L55,1539160878.0
Sarwen,Wow! Type falillies in Scala 😃 I hope it stays.,1539183958.0
jokasx,"Any examples for why I would need or care about those Match Types? It seems even more power and new things to know and I don't see any example for its use besides ""there, it's here, see how cool it is"".",1539256677.0
mosh_java,When is your next meetup?,1539121487.0
TVNSri,Planning to start a slack/some other online channel?,1539122883.0
zzyzzyxx,I haven't used it myself but I did find the [scaladiagrams](https://github.com/mikeyhu/scaladiagrams) project which may do what you need.,1539109657.0
Milyardo,"It's not clear if you're asking if there's some scala-specific approach to designing diagrams, or if you're asking for a tool to generate diagrams.",1539112677.0
harit66,Did you look at [https://www.jetbrains.com/help/idea/class-diagram.html](https://www.jetbrains.com/help/idea/class-diagram.html)? ,1539124801.0
m50d,"The distinction between `abstract class` and `trait` is not important enough to show on a diagram. You may well want to draw a conceptual distinction between ""interface inheritance"" and ""implementation inheritance"" but this will not align neatly with anything at the language level; some `trait`s are interfaces and some are implementation.

At first blush `case class`es are values and should not participate in inheritance, so are not really OO at all and probably should not appear on class diagrams. However:

Traditional `extends` inheritance combines three things: a) composition of datastructures, b) conformance to an interface, and c) implementation of that interface via delegation. Like most languages Scala offers a non-inheritance way of doing a) (`case class`es or indeed regular classes may contain others); *unlike* many OO languages Scala also offers a non-inheritance way of achieving b) via the typeclass pattern (note that typeclasses are a direct language feature with keywords etc. in e.g. Haskell or Rust, but in Scala they're a pattern implemented in terms of lower-level language features). This means that in some Scala codebases, inheritance-like problems are solved with `case class`es and typeclass instances, similar to how you'd solve them in e.g. Rust. But since Scala has no direct support for delegation, emulating a true OO hierarchy this way is cumbersome and relatively rare.

All of which is to say that you might find some limited OO-hierarchy-like behaviour among `case class`es that have typeclass instances, and to the extent that you find inheritance diagrams useful you might also want to represent the existence of typeclass implementations in a similar way (*especially* when a typeclass instance works largely by delegation).",1539298490.0
gbersac,This post answer a question I was asking myself for a long time. Thanks !,1539100551.0
jokasx,"Thanks for the post. We need more explanations like this. Tired of seeing patterns that have no idea why they are done or with ungooglable results. As the other user said, been asking myself for a long time what the self thing was. It seems that if you already know what it is you can google it, but not otherwise. ",1539117532.0
mysyqbai,Thanks for explanation ,1539148736.0
dxplq876,Thank you! I never really understood this,1540944693.0
hyperforce,Why would you invent a name for it? It already has a name. It's called a *self type*.,1539114593.0
sentenzazen,"Very useful, thanks OP. ;)",1539079834.0
ChristianGeek,"I would add “and beyond” to the title of this post, OP...there is plenty of interest here for mid-level and even advanced Scala developers.",1539146058.0
RandomName8,yes please!,1539030932.0
simon_o,"This seems to be a rather reasonable approach, although `JavaNull` is probably not the best name, considering that types with unknown nullability can not only arise from Java.",1539024050.0
pellets,"It’d be interesting to see this incorporated into Option. For example, Some would not allow JavaNull.",1539059299.0
dxplq876,This is amazing!  Except... I don't like the JavaNull.  I think all types that don't come from Scala should just be A | Null.  Much simpler,1539048476.0
non-private,"This sounds great and very welcomed!

I was wondering, what does it mean that `JavaNull` is transparent. I would have thought that in the examples, `y.length()` (where y :: String|JavaNull) should not type-check, to avoid NPE.",1539053534.0
dtechnology,"Yes please!

Typescript, Kotlin, Swift and C# have all shown in their own way that null need not forever be the bane of programmers and language support for optional values is a very welcome QoL improvement.

The ""Elvis operator"" ?: and null safe de-referencing operator .? are very useful in this context


    implicit class NullOps[T](val t: T | Null) extends AnyVal {
    
     def ?:[U](fallback: U): T | U = if(t == null) fallback else t
    
     // I don't think this is writable, would need language syntax
     // Intended as t.?field
     def .?[U](call: MethodCall[T, U]): U | Null = if(t == null) null else call(t)
      
    }",1539062623.0
ryantheleach,How does this handle Null annotations etc in Java Libraries?,1539848716.0
restlesshermit,"Is it just me, or are Scala and TypeScript starting to look identical?",1539045180.0
Arrgh,"Looks pretty great! If you want to focus on memory efficiency instead, I wonder if there's anything better than [debox](https://github.com/non/debox)? ",1539044903.0
ab624,Any good resource in reagrds with basics which will help me to get going in Apache Spark.. ,1539007576.0
quicknquiet,"If I’m considering Scala as my first programming language to learn.. After long survey I’m impressed with possibilities to compile both to native code through LLVM and JS. Is it a good idea? Or maybe the language is too hard for the total beginners? If so, what my choise should be, considering my later Scala plans?",1539047955.0
wand_er,Novice Question: Can someone suggest a good learning resource from basics to advanced other than Alvin Alexander or scala docs? Went through a couple of courses on Udemy but weren't satisfactory. I am from a Java background. Anyone here done that transition from java to scala?,1539002243.0
dsebban1,"I would suggest programming Scala 2nd edition from Dean Wampler, there is a good chapter on FP there but before FP I would start with the basics and IMO this is the best book to learn Scala.",1539012001.0
1Wittgenstein1,"Scala mllib 2.2.0 k means. Number of runs

&#x200B;

As per the [documentation](https://spark.apache.org/docs/2.2.0/mllib-clustering.html#k-means), the \`runs\` parameter does nothing.

I have looked at the actual scala code for k means and it appears that the \`train\` method only does one start. There is no way to change this.

&#x200B;

\*\*QUESTION:\*\*

Am I correct that if I want 5 starts I need to write my own code that calls \`train\` 5 times (or until some criteria has been met)?

&#x200B;",1539033970.0
ArsenLupus,"Hi, I want to force implementers of a trait to define a `case class`.
Currently, the best I came up with is this:
```
trait A {
  type T
  //...
}

class B extends A {
  case class C(c: String)
  Type T = C
  //...
}
```

Although I mostly use `T` as a type, I also need it to be a case class, something you can do pattern matching on. But this does not force `T` to be a case class.

I wish I could to write
```
trait A {
  case class C
  //...
}
class B extends A {
  case class C(c: String)
  //...
}
```

Any insights ? =) 


**Edit**:
It seems that at least, this works
```
trait A {
  type C
  //...
}
class B extends A {
  case class C(c: String)
  //...
}
```",1539183074.0
ArsenLupus,"How to check at compile time if a conversion is possible ? The best I came up with it this:

    case class A(a1: Int, a2: String)
    case class B(a2: String)
    
    def mapper (x: A): B  = {
    new B(x.a2)
    }

Which is okay, but **in my use case I have lots of large case classes, most of which are just subsets of others**  (with the same attribute names). Is there a way to this from a higher level of abstraction and spare me the implementation of all these ""dumb"" conversion function ?",1539250365.0
MikeJizzraetel,What's the recommended way to install the compiler and related tools? Should I just be using sbt for everything (seems a little over kill if I just want to compile a file or play around) or install scalac via my package manager. What are you guys doing?,1539256332.0
sanketpatil,"Any examples of scala using built-in json parser from std library?
  
Previously it was in scala.util.parsing.json._   
But now in latest version seems to be missing?",1539338452.0
roelofwobben,"Why does yearOfRelease not being found in the oldestDirectorAtTheTime

``` 
package Objects

class Director2(val firstName: String,
                val lastName: String,
                val yearOfBirth: Int)

object Director2 {

  def apply(firstName: String, lastName: String, yearOfBirth: Int) =
    new Director2(firstName, lastName, yearOfBirth)

  def older(director1: Director2, director2: Director2): Director2 =
    if (director1.yearOfBirth < director2.yearOfBirth) director1 else director2

}

class Film2(val name: String,
            val yearOfRelease: Int,
            val imdbRating: Double,
            val director: Director2)

object Film2 {

  def apply(name: String,
            yearOfRelease: Int,
            imdbRating: Double,
            director: Director): Film =
    new Film(name, yearOfRelease, imdbRating, director)

  def highestRating(film1: Film2, film2: Film2): Film2 =
    if (film1.imdbRating < film2.imdbRating) film2 else film1

  def oldestDirectorAtTheTime(director1: Director2,
                              director2: Director2): String =
    if (yearOfRelease - director1.yearOfBirth > yearOfRelease - director2.yearOfBirth)
      director1.lastName
    else director2.lastName

}

``` ",1539971660.0
roelofwobben,"How do I combine these two filters to one filter 

```
def directedMoreThenOneFilm( numberOfFilms: Int):Seq[String]  = directors.filter(_.films.size > 1 ).map(_.lastName)

    def bornBefore(year: Int):Seq[String] = directors.filter(_.yearOfBirth > year).map(_.lastName)
 ``` ",1540068103.0
gbersac,Web use Azure at work and WE hate it. Most peole I speak to also hate Azure. What's your opinion about it ?,1538996897.0
justajrdev,I work exclusively in Azure and was excited to learn that I can easily run Scala in Azure Functions with a little bit of build & deploy tweaking. Hope someone else will find this useful! ,1538969635.0
teknocide,"I recently read somewhere that with AWS Lambda the warmup time of the JVM impairs performance for short-lived processes. From what I understand you're better off writing such functions in something like JavaScript to avoid the overhead.

I'm curious if this is somehow handled differently on Azure Functions, as Scala is usually even a bit slower than Java. Or maybe this problem not as big as it is made out to be..

What's your opinion?",1538986938.0
GrafDiffuzzor,One way is to ask on Lightbend forum: [https://discuss.lightbend.com/c/akka](https://discuss.lightbend.com/c/akka),1538982198.0
Nbovenko,"Perhaps, you'll find this talk useful https://engineers.sg/video/scala-akka-real-world-example-of-high-traffic-application-design-singapore-scala-programmers--2843 Not exactly what you asked for, but may be interesting as well.",1538987316.0
ghostdogpr,"When I was working with Akka, I found their own code to be quite useful for real-life examples. Modules other than akka-actors are using actors themselves.

For example, you can see how they implemented cluster Sharding using actors: https://github.com/akka/akka/tree/master/akka-cluster-sharding/src/main/scala/akka/cluster/sharding",1538998157.0
volpegabriel,"I'd suggest to focus on problem solving rather on learning a specific framework. My guess is that if you're relatively new to Scala you are still not sure whether Akka can help solving your problem or not.

If you take this path you will find different ways of solving your problem (hopefully) so then you can compare which solution will be the best for your use case.",1538966466.0
vishbar,"It's an interesting video, but I just cannot get over the name!",1538912496.0
joshlemer,"You are missing something. Let's take the `Option[Boolean] => Option[Boolean]` example.  
  
There are 3 possible inputs -- `None`, `Some(false)`, `Some(true)`. Each of these inputs can _independently_ be mapped to any of 3 possible outputs. So, there are three possibilities for the output corresponding to input `None`. Each of those three, could then have 3 possibilities for the output corresponding to input `Some(false)`, and each of those 9, has three possibilities for output corresponding to input `Some(true)`.  
  
For example, here is one possible mapping:  

    None => None
    Some(false) => None
    Some(true) => None  
An other:   

    None => None
    Some(false) => None
    Some(true) => Some(false)
And an other:  

    None => None
    Some(false) => None
    Some(true) => Some(true)
And an other...  

    None => None
    Some(false) => Some(false)
    Some(true) => None    
and so on... until  

    None => Some(false)
    Some(false) => Some(true)
    Some(true) => Some(true)    
and then finally  

    None => Some(true)
    Some(false) => Some(true)
    Some(true) => Some(true)     
  
",1538880172.0
balefrost,"Yeah, I'm not sure. Functions are degenerate relations, and relations are essentially tuples (we can define a relation as the set of tuples that comprise it). So I'm not sure what the author is getting at. 

I've also never seen ""complexity"" measured in this way. I'm certainly fairly familiar with FP, but I'm not plugged into the research space. Maybe that concept is more common there. 

**edit**

Nevermind, I'm thick. Take `Option[Boolean] => Option[Boolean]`. There are 3 possible inputs. For each possible input, you need to pick an output. So a given function can be encoded as the three values that you would assign to its three inputs.

Say we encoded `Option[Boolean]` as `0`, `1`, or `2`. Then the truth table would look like this:

|Input|Output|
|-|-|
|0|X|
|1|Y|
|2|Z|

There are three unknowns (`X`, `Y`, and `Z`), each of which can take on any of three values (`0`, `1`, or `2`). There are 27 combinations.",1538880073.0
andrewcooke,On your first point - it's the number of functions. In the 3rd example you don't list the possible functions. To get a function pick one output for each possible input. Then count how many you have. ,1538879903.0
maubalpes,Another description about this topic is available in the subsection named **Exponentials** of [this useful blog post](https://bartoszmilewski.com/2015/03/13/function-types/) by Bartosz Milewski.,1539081817.0
m0l0ch,"You don't actually need the recursion, you can just do it with ranges:

    def stars(n: Int): String = ((1 to n).reverse ++ (2 to n)).map(""*"" * _).mkString(""\n"")

Let's say you'll pick 4: The first range will be 1 to 4, you reverse that. The 2nd range will be 2 to 4, you'll take that as is and add it to the first range (using ++). Then you'll get a list:

    List(4, 3, 2, 1, 2, 3, 4)

Then you map each element and multiply ""*"" by the element, giving you the stars for each line. Finally, you'll join them all together using mkString.

A recursive solution would probably be possible, alltough more complicated. At least I can't think of an easy solution right now.",1538876242.0
simerplaha,Great work! [Here](http://simerplaha.github.io/html-to-scalatags-converter/) is another one though :),1538875332.0
naftoligug,"I wrote [https://gist.github.com/nafg/112bf83e5676ed316f17cea505ea5d93](https://gist.github.com/nafg/112bf83e5676ed316f17cea505ea5d93), FWIW

&#x200B;",1539026182.0
naftoligug,Can anyone give a comparison of these alternatives?,1539026200.0
emilypii,"Good on you for going through it and implementing the exercises for yourself. Here are some more [solutions](https://bitbucket.org/jwesleysmith/yow-monads) you can compare your answers to, written a while ago by our own @jedws. ",1538839744.0
Hugo_ijslijk,"Hi! Thanks for sharing! I'm one of the main developers behind Stryker4s. If you are interested in mutation testing, have a look at the [rest of the website](https://stryker-mutator.io) (it's pretty cool). We are also [working on a sbt plugin](https://github.com/stryker-mutator/stryker4s/issues/2) to greatly increase performance and ease of use. If you have any questions, don't hesitate to ask :)",1538842271.0
PrimozDelux,"Can I use this to make my program work?

asking for a friend",1539172229.0
watt,"Java is GPL now, and you don't need to rely on Oracle branded builds. Use https://adoptopenjdk.net/ builds.",1538808450.0
vitalijzad,"In both cases, you will have to install OpenJDK instead of Oracle Java.",1538802310.0
mdedetrich,"This isn't entirely correct. Old versions of Java no longer be free (i.e. future updates of Java 8 SE will not be free, however you will have Java 10 at the time). In 2019 the oracle JDK won't be free, but they have ported basically all functionality of Oracle JDK to OpenJDK (such as mission control). Furthermore, Oracle JDK is actually built intop of OpenJDK (ever since Java 8)

&#x200B;

There is a lot of FUD going around in this area",1538830438.0
MaxInertia,The most up to date LTS version will still be free.,1538805654.0
SystemFw,\\o/,1538752593.0
BarneyStinson,Awesome! I was waiting for this. I hope that a new version of fs2-kafka will be following soon. ,1538768168.0
PrimozDelux,Cheers to the best library I've ever had the pleasure of using. You guys are great!,1538819504.0
duhace,"> This tool helped me the most
>
>Getting confused about compilation errors? Scala-clippy can make some of them less vague.

does it come with a poorly animated 3d paperclip that suggests sbt tasks for me to run?",1538743469.0
lazic_,Woa! That tip for Akka Persistence is really valuable. Thanks I guess.,1538779214.0
XavierLightman,"No, but you pay $59.95 per error and get a feeling of pride and accomplishment ;-)",1538766890.0
amazingdreams,"Mine 😂 no just kidding I have some personal GitHub projects mainly for code reuse, they're not very well documented

I think the play framework has a lot of documentation but is lacking real world examples. I've built up a lot of experience in the past couple of years so it's not a big deal but I remember at first I had trouble seeing things up properly. For instance the slick examples only cover the bare minimum and don't really scale well. I have personally created a Table -> DAO -> Service -> Controller structure but it would be nice if something like this can be documented more extensively",1538730320.0
m50d,"fs2 is the place where I think better documentation would have the best power-to-weight. It's an extremely powerful/general/useful library (and there's a bit of similarity with spark in terms of building pipelines etc., though also a lot of differences in what the implementation is), but the interface is a huge pile of methods that makes it very hard to know where to even start.",1538732268.0
Avasil2,"You have mentioned Cassandra and there is actually a project related to it and (already mentioned) fs2!
   
https://github.com/Spinoco/fs2-cassandra/issues",1538743772.0
katameru,"    val l = List(1,1,1,2,2,3,1,4,4,4,1,1,9)
    l.foldRight[List[(Int, Int)]](Nil) {
      case (elem, (headElem, count)::rest) if elem == headElem => (elem, count + 1)::rest
      case (elem, ls) => (elem, 1) :: ls
    }
    res0: List[(Int, Int)] = List((1,3), (2,2), (3,1), (1,1), (4,3), (1,2), (9,1))",1538721805.0
PrimozDelux,fs2 has this as groupAdjecentBy ,1538723116.0
Milyardo,"It's hard to go wrong with http4s, I personally don't care much for play.",1538687709.0
PrimozDelux,"Http4s is pretty damn good, however there is a barrier of entry wrt effects. On the other hand, other approaches are not exempt, http4s just refuses to sweep it under the rug ",1538688394.0
m50d,"I would recommend akka-http as the best starting point; it's lightweight, reasonably popular, and strikes a good balance between traditional programming style and starting to leverage some of the power of Scala.

Play adds a bunch of complex functionality (e.g. templating, some kind of build plugin) that you don't need if you're just writing a backend, makes some questionable decisions that I think negate many of Scala's strongest selling points (it has a number of non-typesafe functions, it uses a bunch of custom config files with their own formats for routing and config), and is actually implemented on top of akka-http.

http4s has a lot going for it and you'll see a lot of more experienced Scala programmers recommending it, but I don't think it's a good starting point for someone new to Scala, unless you like jumping in at the deep end of explicitly managed effects. If you do want to use it I'd recommend using rho as a layer on top of it rather than using http4s directly.

Other options don't feel mainstream enough in terms of having tutorials and experienced people around. I've heard good things about twitter's web framework, but twitter scala is kind of in its own bubble and doesn't seem to have a lot of crossover with mainstream scala in terms of libraries/tutorials/etc.",1538733351.0
threeseed,"I would recommend Playframework.

The documentation and community is excellent. It's full featured so will help with config, logging, routing, testing, JSON, templating. And plenty of examples on Github.",1538696571.0
pedrorijo91,"admired no one questioned your requirements...

firstly: we do you NEED to do the backend in Scala? if you are not experienced with the language, maybe you should use one that you are more experienced with, to start no? I personally prefer to start digging into new languages in pet projects, small experiments, and sometimes I do try to do in more than 1 framework for that language, so that I can have some feeling. But if it's really a requirement...

then, what kind of project are you talking about? It's a project for your company, that will need to scale to 1M users? Do you need user authentication? do you need DB? do you need to maintain the project for 10 years, or for 2 weeks?

I think play it's the easiest framework to get intro: it's the classic MVC framework (just like rails), with a big community behind, and its not heavily fp-concepts focused. It has a lot of plugins for authentication, storage, async and so on. On the other hand each play framework version upgrade is a pain in the ass. They break a ton of stuff (maybe they are better now), and releases are kind of frequent. If i was for a pure http backend, then I've heard very well of akka-http, and highly scalable.",1538754165.0
sniggel,"I would say that you don't need templating (ie. Play framework) because you already have a front-end written, what you want is HTTP endpoints.

It depends what you want to do with it, do you think you will need scalability ? Will you need some clustering ? Is it going to run inside kubernetes ? Is it going to run inside many datacenters and need data replication ?

You can't go wrong with Akka Http, but it can be a little painful to pickup. I think you could also use Lagom which is based on Akka and it comes with all the Akka stuff, abstracted onto a framework. However, it is a very opinionated framework using event sourcing / CQRS.

I will not repeat the other suggestions, they seemed appropriate (ie. http4s, scalatra).",1538705886.0
Babsgenuine,"I think you can should go for Akka-http as it has the needed flexibility for your project and as other comments mentioned Play is rather a full framework. I recently built a back-end service with akka-http for the first time, whole project with integrating with some other frameworks like Kafka and spark took roughly 1 month.",1538721602.0
ludflu,"akka-http is my go-to. its mature, has a clean api and nice support for things like streaming and websockets. scalatra is easy to use, but feels pretty clunky compared to akka-http. Here's a [little akka-http demo](https://github.com/ludflu/akka-http-simple-test/blob/master/src/main/scala/WebServer.scala) that shows some basic things.",1538703437.0
duhace,"akka-http is really low level and I wouldn't suggest it. Play is a full featured framework, and I use it myself. Scalatra is more barebones than play last I used it, but not as much as akka-http. I don't know much about http4s",1538687406.0
fwlega,"Cask can also be a good option for someone without knowledge of Scala: http://www.lihaoyi.com/cask/. 

I've never used it myself, but I know it was inspired by Python's Flask. So, maybe this would be a easy option, although not the most functional one.",1538689144.0
Demius9,"What are the constraints?
Is it REST based?
Do you need database backing?
How good of an engineer are you? What other things have you done?
Why did you choose scala? Are you an OO or FP programmer?

The fact that you said ""but not sure exactly what they are"" is a huge red flag for me.. mainly because if you don't know what the frameworks are after finding them, then it means you haven't really explored their documentation or even tried to build something quick and dirty with any of them. We need a LOT more information to truly answer this question.",1538761932.0
simerplaha,"Hi all, I'm sorry if anyone opened the website and couldn't read it's content due to overlapping menus. This is fixed now.",1538756079.0
Krever,"Can I ask: why? 

&#x200B;

It looks awesome but whats the motivation for creating this? :D",1538832442.0
Tommassino,"Very curious situation. How do you go from never programmed anything -> getting asked to code full time in scala? Would your job be a full time programmer, or would you manage a spark project? I can imagine that to manage a big data project properly you might want to learn something about the technologies used, but I doubt you would have to actually learn programming. 

If your job is actually to program full time id say, considering no programming experience, a year or two to be a proficient programmer (in any language you pick). Learning the language is not the hard part, a programmer can learn a new language in a few weeks or months. What will be the major roadblock for you is all the general programming skills and just applying programming in general to solve problems, and thats whats important. ",1538653076.0
m50d,"I've seen people do 4-year CS degrees and fail to learn how to program; I've seen people pick up enough to work with and the habit of learning more in a couple of weeks (not to say that you'd memorize the whole language/framework/... in that time, but you'd be able to write programs that worked and look up new things as you needed them). I've seen a study that gave people a simple programming test at the start and end of a programming course and got the same results each time, and argued that students either understood the concepts immediately or not at all. I appreciate that this isn't a terribly useful answer for basing a decision on, but I fear it may be the reality.",1538654615.0
,[deleted],1538641496.0
Resquid,Would you be learning full time? It's hard to ballpark if we don't know how much time you're spending learning.,1538641096.0
justinhj,"Sounds like you found the best books already. Advanced Scala using Cats is really an introduction to the basic Cats stuff, and doesn't go into how to build a real world app. It is however very nicely written and has exercises, I think it's worthwhile. 

Sam's book FP for Mortals describes building a real world app and is good guide to Scalaz. I believe one of the final chapters wraps things up using the finally tagless method.

Less often cited but still really good from a business apps kind of point of view is Functional and Reactive Domain modelling. It covers FP concepts from a practical point of view including the usual suspects of GADT, Functors Monads and Applicatives. It covers Free Monads briefly but not finally tagless. Well worth a read. 

After that I'd go straight to the gitter channels and the individual documentation sites. ",1538605097.0
pauljamescleary,"As far as ""functional way"", I am still learning a lot myself.  The community has been great in answering questions to that end.

&#x200B;

The way I think about FP these days is to think about ""principles"".

&#x200B;

In OOP, you have fundamental principles that you do not question, but greatly influence how you build systems.  OOP has principles like encapsulation, marrying state and behavior, and everything is an object.  This has a profound impact on how you write software.  What is the first thing you ask yourself in OO when you have new behavior?  A: Who (which class) this belongs on.  All of a sudden when everything is a class, and you follow good separation of responsibilities, then how do all the classes ""know"" about each other?  A: Dependency Injection / IoC, gave rise to Spring, Guice, and the rest.  Solving problems using interfaces, base classes, and concrete classes gave rise to things like GoF design patterns.  I can go on.

&#x200B;

In FP, you have different fundamental principles.  Again, you do not question, and once accepted greatly influence the way you build software.  Principles include a) a function always returns a value (no throws) b) a function does not know of anything else in the world other than it's arguments, c) a function can make no assertions on its arguments and d) immutable everywhere (you can use vars inside if need be, there are good reasons to).

&#x200B;

This also greatly influences the way you write software.  New behavior?  Write a function.  Dependency Injection?  Function arguments.  Don't throw or use null.  No setters, use copy.

&#x200B;

Since you cannot throw, how do you short circuit processing?  Use Monads.  Since you cannot use null, use Option.  Once these are pervasive in your code, you have to deal with them, so you naturally use for comprehensions (short circuiting), map, flatMap without even thinking about it.

&#x200B;

Also, you avoid things that violate your principles.  For example List().head throws an exception, so you do not use it.  String.toInt also does, so you avoid it.  You avoid all throws and use a suitable Monad (Either if you can do something with the error, or IO if you cannot).

&#x200B;

Anyway, long winded.  But accepting those foundation principles I mentioned and do not violate them, and then everything seems to fall into place pretty naturally.",1538610374.0
mart187,"I've been on nearly the same page about half a year ago. FP Mortals gave me the overview on how to architect an application (hint: it's Tagless final). It was a great book and together with Advanced Scala with cats the primer on fp in scala. A list of good talks I heard at Scala days:

https://youtu.be/MfpXcaG-Wog - (Advanced) Introduction to interpreters.
https://youtu.be/yEYPf44rS2U - (Basic) Introduction to Monoids / Traverse
https://youtu.be/w7FuQiSi48w - (General) Leverage the type system
https://youtu.be/GWDyIV7Oxyc - (Basic) Monads etc. made simple
https://youtu.be/y7QfAWIun2k - (General) Introduction to Monix

Last words: Focus on one ecosystem (I chose cats) and bring a service to production. Had some wow moments when doing this. Testing async stuff is for example very easy with Tagless final, since you can plugin Id Monad instead of Task or whatever. Then your tests become sync and voila le wow!",1538632776.0
pauljamescleary,"Hey, will be glad to help out with any questions on the pet store.

&#x200B;

I covered it in my 15 minute talk last year - [https://www.youtube.com/watch?v=CEv9KrjTF8g](https://www.youtube.com/watch?v=CEv9KrjTF8g)

&#x200B;

Things have changed since, but that is a decent overview of it.  Also, would be interested if you did watch it if it helped at all.",1538609526.0
m50d,"When you see a fancy functional technique used, it's usually because it would be hard to write the desired code in terms of ordinary (i.e. RT) functions and values without using the technique. So I've found the best way to learn the techniques is in terms of the problems they solve: start writing code, and when you find yourself writing code that wouldn't be refactor-safe (e.g. ""I need to do this sequence of database queries and it's important that query A happens before query B, but I still want them to be separate reusable functions"") then look for a technique that will let you solve that particular problem in plain old refactor-safe code.

I'd also say that the most important thing is working code that solves real problems. Don't be afraid to put an impure bodge in place if it lets you keep working; usually you'll find that this causes problems, but by experiencing those problems you'll better understand the benefits of doing it the pure way, and having a specific example of what can go wrong can make it easier to understand what the general property that you needed was.

> For instance, sometimes I see tagless final solutions where every function just returns a F (I can understand what a higher kindest type is) that ends up being materialised in an IO type like Monix Task, but I've also read somewhere that we should constrain (say from an IO to a Writer or Reader) for easier testability. Did this paragraph even made any sense?

It did (though I wouldn't use ""constrain"" in that sense because it tends to have a specific meaning in these conversations). I found http://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html to be a very good perspective. The functional techniques are powerful but ultimately they exist to make it easier to use plain old functions and values; whenever you can write code directly in terms of plain functions and values it's better to do that.",1538644391.0
harit66,"Shameless Plug: I am author of [https://app.pluralsight.com/library/courses/scala-big-picture/table-of-contents](https://app.pluralsight.com/library/courses/scala-big-picture/table-of-contents) and have got good feedbacks so far!

Nonetheless, I have focussed more on the functional style of Scala than on the object-oriented pieces. 

Please reach me out if you have any specific questions on Scala. Thanks",1538606997.0
Leobenk,"I like this website, it has cool exercises: [https://www.scala-exercises.org](https://www.scala-exercises.org) ",1538670305.0
iLikeOPHeroines,"Here's a bible: 
https://www.manning.com/books/functional-programming-in-scala ",1538601969.0
elcric_krej,"What are you trying to write ?

Various FP concepts can be useful for various styles, various style can be useful for various projects. 

What projects are you working on ?

If you want to write ""functional"" code simply avoid all in-pure function and never use mutable data structures.. done, that's FP.

But various concepts can be expanded on and becomes useful depending on the problems you are tackling.

Programming languages are tools, they have little inherent sense in them until you can think about using them to solve problem. You can't learn a hammer, you can only learn how to use a hammer in order to hammer nails.",1538600857.0
refriedi,"Take a break from reading to start writing. :-)

What are some of your personal FP projects?  If you don't have one, you definitely need some!  You can even try writing without any dependencies, as an exercise.  Unless you need http or sql; don't reimplement http4s or doobie. :-)

If you go into withdrawal and do need another talk, check out [this one] (https://m.youtube.com/watch?v=M258zVn4m2M) by Rúnar of the Red Book if you haven't already.",1538622275.0
softiniodotcom,"consider attending this course:

&#x200B;

[https://www.eventbrite.com/e/functional-scala-by-john-a-de-goes-sf-silicon-valley-edition-tickets-49652715609](https://www.eventbrite.com/e/functional-scala-by-john-a-de-goes-sf-silicon-valley-edition-tickets-49652715609)

&#x200B;

Then start coding and practicing. Joining and contributing to an open source project might be a good way to practice and learn too.",1538642456.0
adrice727,You may find some useful exercises [here](https://www.scala-exercises.org/).,1538524993.0
dehun,"for functional programming you can try [https://github.com/dehun/learn-fp](https://github.com/dehun/learn-fp)

master branch - TDD style course, answers branch - all the answers filled in",1538540276.0
Leobenk,"I like this website for Scala exercise: [https://www.scala-exercises.org/](https://www.scala-exercises.org/)

&#x200B;",1538600469.0
m50d,The easiest thing is probably to do the prepend at the `Iterable` level if that works for your use case? Something like `Seq(char) ++: buf.toIterable`.,1538558422.0
joshlemer,"What do you need the result type to be? If it's fine to have it as an `Iterator[Char]` you could do `Iterator(char) ++ buf`. If you need it as a `Source`, you could do  
  
    new Source { override protected val iter = Iterator(char) ++ buf }  

",1538520487.0
pauljamescleary,Http4s,1538506155.0
codespair,"http4s seems promising, but beware that might require you to look at some Cats and fs2, sometimes",1538503987.0
rjghik,"I'm going to make a shameless plug here. At my company we've been working on a REST framework of our own for the last couple of months. You can find it in our [commons library](https://github.com/AVSystem/scala-commons/blob/master/docs/REST.md).

I'm actually really excited about it. It lets you build REST web services simply by writing Scala traits. In this aspect it's analogous to ""classic"" frameworks like Java's JAX-RS. However, it leverages compile-time reflection, typeclasses and other Scala powers for much better type safety and platform independence. It can also automatically generate [OpenAPI documents](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md) for your REST API.

It's a very fresh thing and so far it has never been really announced to the public (even though it has always been available on github). For this reason frequent breaking changes in upcoming versions are very much possible. Nevertheless, I encourage you to take a look!",1538515155.0
mdedetrich,Would recommend http4s or akka-http depending on which side of the scala spectrum you sit,1538506473.0
AlexITC,"If you end up going with on the Play path, please take a look to [playsonify](https://github.com/AlexITC/playsonify), it is a kind of micro framework built on top of Play having authentication as a first-class citizen, as you talked about JWT, integrating it with playsonify is as simple as [this](https://github.com/AlexITC/crypto-coin-alerts/blob/develop/alerts-server/app/com/alexitc/coinalerts/services/JWTAuthenticatorService.scala).

I have built several other pieces that i used to copy to different applications, hopefully, someone else will benefit from it.

&#x200B;

P.S. I forget to say, I'm planning to port playsonify to akka-http soon.",1538518682.0
sdelmore,The last web service I built I used Finch and was very pleased with it.  ,1538543600.0
Kivihirvio,I have had some success with Scalatra.,1538505685.0
aphexairlines,Twilio's [Guardrail](https://github.com/twilio/guardrail) generates an akka-http route from a Swagger/OpenAPI schema.,1538568276.0
harit66,You may also want to look into Akka HTTP ([https://doc.akka.io/docs/akka-http/current/](https://doc.akka.io/docs/akka-http/current/)),1538519155.0
colindean,"I've spent the last several months built with Scalatra a few REST web services that involve JWT. It's been alright. If I were to go back and do it again, I'd probably use http4s based on what I've heard about it and what people I've hired since I started on them know about it. I don't regret using Scalatra, though.",1538513470.0
viktortnk,"I might be the only one suggesting Finatra here. It might be not as idiomatic as akka-http or Finch, but allows to get job done quickly. It has lot of batteries included",1538648705.0
softiniodotcom,"AKKA-HTTP or http4s would be my pick. 

&#x200B;

There is a new one around that has similarities to Python's Flask if you want to look at but I have no experience with it: 

&#x200B;

[http://www.lihaoyi.com/cask/](http://www.lihaoyi.com/cask/)

&#x200B;

&#x200B;",1538667470.0
heytao,akka http,1538508623.0
ichaida,"The best way is to go with Akka Http, there is already the support of Lightbend behinds it, you can find also all another ecosystem that scale your application further.",1538510111.0
stephen789,"I like http4s because I like pure fp. I would recommend play framework if your not drinking the kool aid. I also like akka http, however it's easy for people to make a mess of actors, so be careful of that. Akka streams is really good though. ",1538558333.0
m50d,"In terms of specifically ""functional"" things, I think laziness is the wrong choice and kills usability of Haskell (because it means performance is noncompositional). In principle I'd be interested in moving to Idris, but there are a bunch of practical things that Scala does better than Idris (and often even than Haskell): dependency/project management, availability of non-memory-unsafe libraries, IDE support, top-notch compile-to-JS support, companies that will pay me to write it.

And fundamentally I'm not entirely convinced that the disadvantages of having methods on objects outweigh the discoverability advantage. And while I'm willing to believe that there might be a better solution to record-like problems than OO subtyping, I don't think Haskell has found it. Of course in principle there's no reason there couldn't be a language with OO-style records and Haskell-style purity, but I'm not aware of one at even an Idris-like level of maturity/usability.",1538495564.0
Milyardo,Why link to a an 8 month old post?,1538495903.0
Jasper-M,Funny how some people put away every single language that doesn't enforce purity at the language level as a BetterJava™.,1538495592.0
DanielShuy,"I'm surprised no one has mentioned it yet, but if you wanted purity in Scala, can't you just use Scalaz or Cats?",1538531967.0
Milyardo,"It's one of the avian combinators, this one is the particular is a variant of the Kestrel that returns `Unit` instead of being polymorphic.",1538446322.0
CinnamonHeart," I'm not sure if it has a name, but it reminds me a lot of Clojure's style of interop with mutable objects + void/Unit methods:

    (doto (new Thing)
          (.update)
          (.update))

https://clojuredocs.org/clojure.core/doto",1538437962.0
DanielShuy,"The technique to constantly display the log at the same position in the terminal is really useful. I've always wondered how certain console applications achieved this.

Can't wait for this feature to be released.",1538443034.0
Krever,"Please do the same for compilation errors. I always have to scroll through all of them , fix first few, recompile and repeat. Everything but the first ~5 errors is completely irrelevant most of the time.

Please please please ;)",1538456227.0
gohshuwei2000,ND4J,1538447082.0
khaberni,Breeze,1538444401.0
retronym_,"Jason from the Scala team at Lightbend.

[Adding an extension point](https://github.com/retronym/scala/pull/27) to the Scala compiler to support caching of information read from the classpath and to support Build Pipelining, where downstream projects in a multi-project build can start compiling before the upstream project emits class files. 

As part of that work, learning about the [Chome Trace Format](https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/edit) to visualise the compilation of multi-project builds, or even the compilation of files/classes/methods themselves.

[Proposed a change](https://github.com/scala/scala/pull/7270) to the way we compile singleton objects that makes better use of static fields, which in turn enables better JIT constant folding. We're also looking to [improve](https://github.com/scala/scala/pull/7297) the way that these are serialized/deserialized.

[Made JITWatch](https://github.com/scala/scala/pull/7294) more convenient to use when analysing the results of our JMH benchmark suite.

Tweaked the display of our [compiler performance charts](https://scala-ci.typesafe.com/grafana/dashboard/db/scala-benchmark?orgId=1) to better show the progress we've made since 2.11.",1538520798.0
Seth_Lightbend,"Seth from the Scala team at Lightbend, here.

I've been working on:

* booking travel to Lausanne in early November for several days of intensive SIP (Scala Improvement Process) meetings to discuss Scala 3 SIPs
   * see https://contributors.scala-lang.org/t/second-batch-of-scala-3-sips-additions-to-scalas-type-system/2376)
* booking travel to Montreal in late October for the Reactive Summit conference (http://reactivesummit.org)
   * and also the Lightbend engineering meeting the same week
   * a ScalaBridge workshop will be held in Montreal on October 22, please help get the word out: https://www.bridgetroll.org/events/449 . I'm not spearheading but I've helped a bit with the preparation and I hope to be there helping out in person, too.
* getting Scala 2.12.7 out the door
   * which did finally happen last Thursday (https://www.reddit.com/r/scala/comments/9jd5yr/scala_2127_is_now_available/), after the Scala community build (https://www.scala-lang.org/2018/01/16/community-build-growth.html) caught some last-minute issues
   * the release seems to have been a success, so far only two regressions have been reported
      * [https://github.com/scala/bug/issues/11174](https://github.com/scala/bug/issues/11174) is unfortunate; it seems that very few codebases are affected, but scalajs-react is important to the Scala.js ecosystem
      * [https://github.com/scala/bug/issues/11175](https://github.com/scala/bug/issues/11175) has only to do with unused warnings, a somewhat fragile optional feature
      * other than that, no news is good news? time will tell, but it's looking good
      * most users seem to be seeing the same compilation speedups -- or better! -- that we saw in our benchmarks
* getting the Scala community build going on JDK 11 (https://github.com/scala/community-builds/issues/742)
    * after a series of fixes by myself, Kenji Yoshida, and others, 109 projects (of ~180) are green. We'll keep chipping away at it
    * with JDK 11 now released, we've decommissioned our Jenkins jobs for JDK 9 and 10. testing only 8 and 11 going forward
* Scala community build maintenance as always, things constantly break and need updating
    * gory details: https://github.com/scala/community-builds/commits/2.12.x
* Fortify SCA for Scala bugfixes and improvements
    * Fortify is a commercial offering from Lightbend and Micro Focus; see https://developer.lightbend.com/docs/fortify/current/
    * we're now close to a 1.0.12 release with improved handling of traits, improved `override` handling, and more accurate line number information in reported security vulnerabilities
",1538506213.0
monkjack,"I've been spending a lot of time recently on a partial re-write of [Avro4s](https://github.com/sksamuel/avro4s), a library that creates Avro marshallers and schema generators for Scala types at compile time. You can think of it as a bit like Circe but for Avro rather than Json. I've been addressing some of the long standing issues (mostly around corner cases that break the macros). I'm close to having 2.0.0 ready now.",1538616093.0
harit66,"I am working on creating an online course to teach Scala. I have one published via Pluralsight ([https://app.pluralsight.com/profile/author/harit-himanshu](https://app.pluralsight.com/profile/author/harit-himanshu)) and now on to my next course for the year.

Meanwhile, I am also thinking to start YouTube channel to teach Scala/Functional Programming Concepts using Scala (not sure how much value I would add there), but I will give it a try since I love working with the language!",1539124670.0
MrPowersAAHHH,"I'm working on extending the `org.apache.spark.sql.Column` class to include add some methods that are currently defined in the `org.apache.spark.sql.functions` object.  Spark forces you to write `lower(col(""blah"").substr(0, 2))` and I'd rather write `col(""blah"").substr(0, 2).lower()`.  I'm doing this work in [spark-daria](https://github.com/MrPowers/spark-daria) in [this object](https://github.com/MrPowers/spark-daria/blob/master/src/main/scala/com/github/mrpowers/spark/daria/sql/FunctionsAsColumnExt.scala).",1538629325.0
silentraquo,"I'm working on implementing error handling in [Airstream](https://github.com/raquo/Airstream). Existing streaming libraries implementations have characteristics that look weird to me. For example, they mark the stream as completed whenever it errs, and to recover from that failure you generally need to create a new stream that will replace the broken stream.

That doesn't make sense to me. Exceptions in plain code don't work like that. If a function throws, you can still call it again, it doesn't become permanently broken. You don't need to provide a replica of this function to keep it working. I want exceptions in Airstream to work similar to this, but adjusted for observables: propagating down the observables dependency tree instead of up the stack.

So I'm implementing an approach that makes failed observables toxic instead of perma-broken, much like what scala-rx [does](https://github.com/lihaoyi/scala.rx#error-handling). It's challenging because Airstream needs to support both streams and state observables with a unified interface.",1538421131.0
Choc_Panda,I've been experimenting with http://magnolia.work to do derivation of Spray json formats typeclasses with type hints in the resultant objects. I've also started reading FP for Mortals,1539546406.0
GoodJobMate,"Created a streaming app to filter and aggregate some big/""fast"" data using Structured Streaming. It was pretty fun.",1539549257.0
DanielShuy,"Do you need to process/transform the data? If yes, what kind of processing/transformation do you need?",1538445312.0
genseb7,"You can run scala on the JVM just by including scala-library jar, see https://alvinalexander.com/scala/how-to-run-scala-sbt-packaged-jar-file-with-java-command

So I don't see what would prevent you from using the Java functions ",1538250700.0
Aappddeevv,Here’s a blog that might help: http://msdynamicscrmmeanderings.blogspot.com/2018/05/dynamics-crm-azure-functionapps-and-java.html.  It covers using scala even though java is in the title.,1538251344.0
joshlemer,/u/lauchpad45 by the way you never included a link to any article.,1538253154.0
mart187,"We have quite some Scala AWS Lambdas at AutoScout24. As long you have a jvm, you can spit out a jar out of your build process. For the cloud runtime it does not really matter what's in your jar.
You should optimize for start time of the jar though and remove unused dependencies, e.g. by shade plugin to keep the size down.",1538294054.0
mart187,"On AWS they freeze the machines which launch the jars, so if you have a steady stream on data flowing through the machines are recycled which is much cheaper. We are using this for data processing, so this is not really critical. Jar size is about 40-50mb I would say. If you want guaranteed quick response times I'd prefer Node.js, since this is much better on cold starts than jvm.",1538319223.0
bardadymchik,Have you tried graalvm?,1538220622.0
restlesshermit,"I don't have a direct answer, but I would pursue this line of reasoning.

First, the `fit` function appears to be the culprit.

`org.apache.spark.ml.feature.StringIndexer.fit(StringIndexer.scala:113) at`

Then you've got this bit right at the top of the stack trace:  
`Exception in thread ""main"" java.lang.IllegalArgumentException at  org.apache.xbean.asm5.ClassReader.<init>(Unknown Source) at  org.apache.xbean.asm5.ClassReader.<init>(Unknown Source) at  org.apache.xbean.asm5.ClassReader.<init>(Unknown Source) at  org.apache.spark.util.ClosureCleaner$.getClassReader(ClosureCleaner.scala:46)  .......`

Since this appears to be a problem with the Closure Cleaner, you might try taking the fit function out of your current code, creating a function in a top-level `Object`. The idea is to isolate out the closure, effectively manually cleaning it yourself. If that fixes the problem, you can then experiment with moving the code around to figure out why the closure was a problem in the first place. ",1538408368.0
a1russell,Looks great! I am going to be trying this library out in the near future.,1538187483.0
knuthmoris,"Hi, Could you provide some demo app in github.io  similar to other projects like scalajs-react and sri. It will be helpful to know the capability of this library. Thanks!",1538190820.0
sutongorin,But I don't want to.,1538256961.0
2bdb2,Example code?,1538224517.0
rustyBootstraps,OMG YESSSS!,1538208809.0
zzyzzyxx,"You're only shifting by multiples of 8 and with 1k random values your max is highly likely to be large and positive. With large positive numbers and multiples of 8, shifts <= 24 bits are likely to still return something positive, and then shifts start repeating at 32 bits. So you're really only seeing 4 unique values, all of which are likely to be positive. Infinite loop.",1538155678.0
brightwhitedaydream,"Let's step through the program flow.

The executed part of your code is at the end. You have 2 loops, a \`for\` and a \`while\` which occur within the program execution, and all other lines are assignment (which terminate). In mathematical terms, your for loop condition is bounded above and monotonically increasing -- it always goes up in value until it goes above a max value. So it definitely terminates.

So, the only line left over as a possible culprit is `(arr.max >>> (8*it)) > 0`. `arr.max` can potentially be any \*non-negative\* value less than `Int.MaxValue`.

`>>>` Is a bitshift operator. Bytes are 8 bits. And, from the behavior of `>>>` when you shift it a full 4 bytes along, you get back to the value you started with. This is because the default Int length in Scala is 32 bits^(\[1\]), and it was decided that after this point the function would return to the initial Int value.

&#x200B;

Actually, there is a situation in which your code \*doesn't\* loop forever. This is where bitshifting your int by a byte produces 0, most obviously if your max int is === 0, so although there are other numbers for which this would occur, they are improbable to be your array's max value^(\[2\]) :)

1. 32 was chosen as a number for hardware reasons (32 bit ints were standard at the time).
2. The number, call it `n`, would have to be less than 2\^24. The probability of this being any array value is 2^(24) / 2^(32), or 2^(-8), so the probability of it being your maximum is (2^(-8))^(1000) = 2^(-8000).",1538170318.0
dave4420,"I would try stepping through it with a debugger, or I would log values on each iteration, particularly the value you compare to zero.",1538153874.0
restlesshermit,"Put a few `println` statements in `loopsForever`, one just before the `while` loop to print out values of `maxValue` and `it`, and another just inside to print out whatever you would like to see about your boolean test in the while loop. This will take only a few minutes, and you won't have to think too hard about it.",1538408923.0
Philluminati,"Your implicit converts a vertex to an option of model and neither of those findAllModels deal with Option[Model], they deal with List[Model].

Be aware I cannot read your code as it goes off the screen: https://imgur.com/a/tlTVEwM

https://pastebin.com/hXh6yhqh

In this example, we have Vertex and Model and an implicit def.

findAllModels takes a list of option of model, so I can pass in a list of vertex instead and the compiler is happy. What I pass in is a list of vertex, what is inside the method is List[Option[Model]] so I can just flatten to remove all the ""none"" values. I don't know if this helps you at all.

",1538147145.0
replicacl,"You can try this:

    case class Vertex()

    case class Model()

    implicit def vertex2Model(v: Vertex): Option[Model] = ???

    def findAllModels: List[Model] = {
      val all: List[Vertex] = ???

      // all.map(v => vertex2Model(v)).flatten
      // all.flatMap(v => vertex2Model(v))
      // use implicit conversion 
      all.flatMap(v => v: Option[Model])
    }

The reason why (a) doesn't work is because you need a implicit conversion like this:

    implicit def vertexList2ModelList(v: List[Vertex]): List[Model] =
      v.flatMap(v => v: Option[Model])

Or a more general one like this:

    implicit def mapList[A,B](xs: List[A])(implicit ev: A => Option[B]): List[B] =
      xs.flatMap(x => x: Option[B])

    def findAllModels: List[Model] = {
      val all: List[Vertex] = ???
      all
    }",1538147529.0
ulrichsg,"I'm afraid this isn't the right place to ask that question - this subreddit is about Scala the programming language, not Scala the tuning software.

That said, judging from [the documentation](http://www.huygens-fokker.org/scala/scl_format.html), you can create .scl files with any program that supports plain text, so Notepad would be a good choice. (Word would not.)",1538071889.0
Milyardo,"I think you may be confused what whiles with the `.scl` extension are. Scala programming source files are typically use the extension `.scala`, with `.sc` sometimes used for scripted source files.",1538069532.0
joshlemer,"The original post 1 hour ago was the wrong link, and linked to a Clojure position, which I removed as off-topic. This is an actual Scala position, so I'll leave it here.",1538059368.0
HighMaxFX,"Living in Tokyo, what a dream for a weaboo like me :B",1538124002.0
ClojureWorks,"The client have built a cardless payment system, that already had well over 1.5million users, with around 150,000 payments every week. They are using Scala to it's most functional: cats.effect.IO, Monix Task and Scala Future.

Now into their series C with $55 million, they have new products in the pipeline and some big contracts with online retailers to manage.
Able to hire both junior and senior engineers, with a very healthy relocation package on offer that includes: Temporary housing, a relocation budget, a ""rent support scheme"", Japanese lessons, and an office of people very willing to hlep as they have been through the same journey as you!

if you would like to learn more, please follow the link or drop me an email on Tom@functionalworks.com.
",1538058642.0
SQLNerd,"Being able to ctrl-c without exiting is pretty neat:

https://github.com/scala/scala/pull/6479",1538067896.0
peladonz,@Japgolly found a regression unfortunately.  https://twitter.com/japgolly/status/1045449111330119682?s=09,1538095414.0
non-private,"On the one hand, I like how error handling is abstracted away.

On the other hand, this looks not so handy `toJson[Either[String, ?], String](content)` to only handle errors.

Would it be possible to have a `asTry` method that converts the `Either` to a `Try`? So the example would look like this:

```
for {
    fileContent <- readFile()
    parsedFile <- asTry(toJson(fileContent))
} yield parsedFile
```",1538072718.0
joshlemer,"Sorry but this is woefully off topic. First of all, it is better to post jobs in the monthly ""Who's Hiring"" threads, but that's ok. However, this is a post from someone not in the hiring party, and also this is _not even a Scala position_. Try posting in /r/Clojure maybe.",1538057703.0
ClojureWorks,"The client have built a cardless payment system, that already had well over 1.5million users, with around 150,000 payments every week. They are using Scala to it's most functional: cats.effect.IO, Monix Task and Scala Future. 

Now into their series C with $55 million, they have new products in the pipeline and some big contracts with online retailers to manage. 

Able to hire both junior and senior engineers, with a very healthy relocation package on offer that includes: Temporary housing, a relocation budget, a ""rent support scheme"", Japanese lessons, and an office of people very willing to hlep as they have been through the same journey as you!

if you would like to learn more, please follow the link or drop me an email on Tom@functionalworks.com. ",1538055286.0
nixebastian,"I have seen they hired some great engineers this year, good luck to them!",1538056709.0
MasGui,Replied: https://stackoverflow.com/questions/52529517/scalajs-and-webpack4-config-settings-issues#comment92011006_52529517,1538047482.0
Baccata64,"Great post ! 

You can solve the ""losing the logs"" problem by simply acknowledging that Scala's typeclass instances are simple values, and therefore you could simply create an instance of MonadLog wrapping a simple `Ref[IO, Chain[E]]` in the bootstrapping of your application, or when receiving an incoming input, or pretty much whenever. As long as such an instance passes the laws, you're golden. I used a similar approach and it makes it really easy to avoid losing the logs. 

See : 

* http://degoes.net/articles/effects-without-transformers for the general concept 
* https://github.com/oleg-py/meow-mtl for the concept applied to MonadState (and other typeclasses) 
* https://github.com/oleg-py/better-monadic-for/releases/tag/0.3.0-M1 (this POC makes the approach a LOT nicer)
",1538028039.0
Milyardo,"Has the author considered using Writer? If so, why not. I suspect it wouldn't work because WriterT would order the effects incorrectly and there's so equivalent of an IO transformer. Then there's also the issue of parameterizing over the inner effect in a transformer stack. None the less it seems like an omission to not mention Writer.",1537973701.0
kodablah,Neither...I use coflatMap because it's cats,1537892259.0
sanketpatil,We need more of these ‘learn through meme’  posts.,1537940268.0
austeritygirlone,That + should be a •. ,1537896113.0
Milyardo,"Do we allow memes or low effort posts on this subreddit? I'm not against it per say, I just don't know if it's a thing.",1537891097.0
JohnTheB0mb,Wow. The fact that this received such poor reviews disappoints me. For me this is like the most handy thing ever. Like with this I can just click on my code and press (Command + option + down) on Mac or (Ctr+Alt+Down) on non-mac and trace the execution of my code without having to do (Command + f) on Mac or (Ctr + f) on non-mac to find where my print statements are. Like it saves me a lot of time and more importantly it makes it easier to follow the execution of code when you don't have a debugger set up.,1537847478.0
Leobenk,Is that related to the \`pos: org.scalactic.source.Position\`  that you can see in tests? ,1538518212.0
kudah,Airframe doesn't play well with functional programming though. If you want runtime construction of tagless final algebras – try [distage](https://izumi.7mind.io/v0.5.50-SNAPSHOT/doc/distage/),1538047976.0
eaparnell,Can you recommend some well-written articles on understanding Tagless Final? Thanks.,1537803387.0
vitalijzad,Is there a roadmap for Apache Spark to upgrade to Scala 3?,1537868774.0
gatorsya,"          import scala.util.Try
          
          val delete_before_write = true //can be true/false
          
          //Below, x should end up either as valid string or as an empty string
          val x = {
            if (delete_before_write) {
              val reported_time = Try(
                 //intesive operations which can break
                 //finally returns a timestamp
                 ""some_timestamp_as_string""
              ).getOrElse("""")
    
              if (reported_time.nonEmpty)
                s""DELETE FROM tableName WHERE reported_time = $reported_time""
              else
                """"
            }
            else
              """"
          }
          
          println(s""x = $x"")

Better way to code and make it elegant? I feel this can be improved and scala-fy it.

scala-fiddle: [https://scalafiddle.io/sf/xFvNMTM/2](https://scalafiddle.io/sf/xFvNMTM/2)",1538794266.0
ce6ec39,"I'm just starting out with cats and have been looking at libraries that use it: http4s, doobie, etc.

However, I still haven't quite wrapped my mind around the basic concept of structuring the overall application that relies on effectful monads such as \`cats.effect.IO\`. I get that, in theory, the program should be composed of smaller independent pieces that ""snap"" together. However, I'm not very clear on what to do with heavy-weight and/or commonly-used objects - are they supposed to be strung along from the periphery through the entire stack of function calls?

&#x200B;

Consider the following: 

    package com.example
    
    import cats.effect.{ExitCode, IO, IOApp, Resource}
    import doobie.hikari.HikariTransactor
    import org.http4s.client.Client
    
    object ExampleApp extends IOApp {
      def run(args: List[String]): IO[ExitCode] = {
        val httpClientResource: Resource[IO, Client[IO]] = ???
        val txIO: IO[HikariTransactor[IO]] = ???
    
        for {
          tx <- txIO
          code <- httpClientResource.use(client => actuallyRun(client, tx))
        } yield code
      }
    
      def actuallyRun(client: Client[IO], tx: HikariTransactor[IO]): IO[ExitCode] = ???
    }

Above, there's a top-level for-comprehension that ""exposes"" instances of high-level dependencies used throughout the code. Is this the standard approach? Are there alternatives? What happens when an app uses more than just two dependencies?",1538852055.0
silentraquo,"    def foo(name: String, size: Int): Foo = {
      val _name = name
      val _size = size
      new Foo {
        override val name: String = _name
        override val size: Int = _size
      }
    }

Is there a better way to let the foo method and the Foo trait have params / members with matching names? Needing these temp variables in this scenario is really annoying. Am I missing something? Is this considered an anti pattern?",1537926707.0
Ununpentium0,How would I go about writing a code which takes a date as input from the user and outputs the following date? ,1538088742.0
vishbar,"What is a ""newtype""? I see this mentioned a lot, but I don't really get what is is or what the motivation for something like that would be.",1538140712.0
Philluminati,"Anyone have any thoughts about this subject?

https://blog.philliptaylor.net/the-closed-source-scala-code-problem/",1538153499.0
1Wittgenstein1,Is there a decent job board for remote scala jobs?,1538268701.0
domlebo70,"How do people structure their error ADT's in a Scala app. Do you wrap exceptions? Do you not use exceptions, and instead try and provide contextual information about an error (eg userId) etc?

Do you have an ADT heirachy? I.e. product types containing several suberrors?",1538517060.0
iLikeOPHeroines,Wtf is this post history of yours? For an entire year you've been spamming this video?,1537752848.0
ianwcarlson,Could be a bot ,1537754793.0
trenobus,"> Is it possible to refactor the foldRight to be tail recursive and still allow early termination when the predicate is evaluated to true in the exists function?

I don't believe this is possible, certainly not in the general case. Even though `exists` is short-circuiting the recursion of `foldRight` by taking advantage of the non-strict evaluation of its second argument, `foldRight` normally accumulates its result from the end of the sequence to the beginning. If the result of `exists` is `false`, then the (non-tail) recursion has to go to the end of the sequence to determine that.

For a sequence which has a natural traversal from beginning to end, but not from end to beginning, `foldRight` must store information somehow to support an end to beginning traversal. In this particular implementation, `foldRight` is using stack frames (via recursion) to store that information. If you were dealing with a reasonably short list, you could implement `foldRight` by reversing the list (using tail recursion), and then `foldLeft` (tail recursively) on the resulting list. In that case the information would be stored in the heap, in the form of the `Cons` elements that you use to build the reversed list. If you had a doubly-linked list, then you could tail recursively traverse it from end to beginning as easily as from beginning to end. So whether tail recursion is possible really depends upon the type of data structure you're traversing and whether that order of traversal is natural for the data structure.

In this particular case you are dealing with a Stream, and Scala Streams (if not the ones in this example) actually can be of infinite length. So reversing such a Stream in order make a tail recursive `foldRight` is not an option.

On the other hand, if you implement `exists` without using `foldRight`, it is possible to do it tail recursively, because `exists` doesn't care about the order in which elements are evaluated. If the data structure supported it (e.g. an array), you could even use multiple threads to implement `exists` in parallel. That is not the case for `foldRight` and `foldLeft`, which are inherently sequential operations.

",1537918621.0
tel,"Early termination arises out of `true` being a fixed-point of `||`. In its general form, `foldRight` doesn't know properties like that of its `f` argument and therefore cannot exploit them.

You can write `exists` in a tail-recursive form and exploit your knowledge of the properties of `||` to affect early termination. It looks like

    @tailrec def exists(p: A => Boolean): Boolean = this match {
      case Nil => false
      case Cons(h, t) => if (p(h)) true else t.exists(p)
    }",1537937122.0
yawaramin,"As I suggested yesterday, I would express this as a `while` loop:

    def foldRight[Accum](accum: Accum)(f: (A, => Accum) => Accum): Accum =
      if (isEmpty) accum else {
        var _accum = f(head, accum)
        var _tail = tail

        while (!_tail.isEmpty) {
          _accum = f(_tail.head, _accum)
          _tail = _tail.tail
        }

        _accum
      }",1537816114.0
ukralibre,"Just terminate the next call. The condition must be accessible. There is a lot of ways to do it. I would use closures. You can use function parameter.

Sorry can't give example now",1537769376.0
aphexairlines,"See also the ScalaDays NY 2018 presentation about this: https://www.youtube.com/watch?v=lQNXwb66eQ8

It's too bad that the compiler itself needs to be re-compiled with macro libraries when your code uses macros.  Otherwise it wouldn't be too much work to use this in Gradle as a replacement for the ScalaCompile task (or the equivalent in sbt, mill, bazel, maven, ant, etc).",1537727657.0
RandomName8,makes you wonder why continue scala-native at all,1537728487.0
know_not_much,Aren’t these videos old? They were already published when the event took place in June. I guess they have been republished on the YouTube channel. Earlier they were made available on some other site ,1537675127.0
humanthrope,The little voice in the back of my head that kept repeatedly screaming “WHAT BLACK MAGIC IS THIS?!” as I read through this article would like to thank you for it.,1537686675.0
CircusAct,"Really great write up, definitely shows how the abstractions provided by cats/scalaz can really make code clearer and simpler. ",1537866196.0
sudkcoce,Odersky’s Programming in Scala is imo your best bet. ,1537638514.0
dinopraso,The Scala Lang website has a Really Great getting started guide which will guide you through all of Scala’s most important features. It is better if you previous experience with Java ,1537638988.0
melolife,"One of the most interesting things about Scala is that it's very gramatically consistent in the sense that there aren't many restrictions on where language constructs can be used.

Everything is lexically scoped, which permits some interesting approaches (e.g. method-scoped classes). In fact, you can think of Scala classes as closures carrying both state and behaviors.",1537662992.0
yawaramin,"Scala differs from Java in the compiler. After compilation is finished both the Java and the Scala compilers output functionally compatible JVM bytecode. There are other Scala compilers that output native code and JavaScript, but you will probably be concerned with the JVM target.

Scala differs from C++ in that it is garbage-collected like Java, and of course in a variety of semantic and syntactic differences. An interesting similarity to C++ is Scala's implementation of typeclasses–a polymorphism technique similar to C++'s concepts.

For syntax gotchas, check out http://scalapuzzlers.com/

For experienced devs new to Scala, either Odersky's _Programming Scala_ or Cay Horstmann's _Scala for the Impatient._ You can access them online on Safari, likely through your public library.

For practice, try http://www.scalakoans.org/",1537720050.0
tel,"* How does Scala differ from Java/C++? How is it similar?
 
  Scala offers Java-like OO capabilities, but has different sensibilities. Coding in Scala you'll rapidly be exposed to new ideas arising from Functional Programming techniques as they are applied in Scala. As an example, Java has generics but Scala takes them much further.

* What syntax gotchas should I be looking out for?

  There are a whole ton of syntax gotchas in Scala---it's pretty complex syntactically. Some that come to mind include implicit conversions, the awful `++` implicit syntax, automatic method conversion failures, and case-sensitivity in pattern matches. It's hard to answer this question conclusively.

* Since Scala compiles to bytecode and is compatible with Java, is it safe to assume that garbage collection occurs?

  Yep, absolutely.

* Is there a good primer resource for experienced devs who are new to Scala?

  There are a whole load of resources on the side bar. If you're familiar with Java and trying to dig into Scala, however, then you may want to challenge yourself to learn the functional side of Scala. For this, Runar and Pauls _Functional Programming in Scala_ is by far the best. It can be quite challenging, though.

* What would you recommend for practice to learn Scala?

  FPiS will start as a primer and then dig deep on examples of functional design and architecture. If you're able to jump up to speed with Scala basics well enough then it will carry you a long way.",1537937497.0
derricg,"Scala has a lot of similarities to Java, but you'll find it more of a kitchen sink language with multiple paradigms. 

If you haven't coded in another functional programming language like javascript, erlang, or haskell, then I would start with an overview of functional programming. 

Implicits are one Scala syntax style that takes folks awhile to wrap their heads around. I would stay away from them during the early days until you understand when implicits make sense. 

Yes, the bytecode still runs on the  JVM and uses the same garbage collection. Nothing special or unique for Scala vs Java.

List of good Scala guides we recommend for new hires:

[https://www.gitbook.com/book/wrobstory/python-to-scala/details](https://www.gitbook.com/book/wrobstory/python-to-scala/details)

[https://www.scala-exercises.org/](https://www.scala-exercises.org/)

[https://twitter.github.io/effectivescala/](https://twitter.github.io/effectivescala/)

[https://pavelfatin.com/scala-collections-tips-and-tricks](https://pavelfatin.com/scala-collections-tips-and-tricks) 

[https://kukuruku.co/post/java-8-vs-scala-the-difference-in-approaches-and-mutual-innovations/](https://kukuruku.co/post/java-8-vs-scala-the-difference-in-approaches-and-mutual-innovations/)

[https://www.infoq.com/articles/java-8-vs-scala](https://www.infoq.com/articles/java-8-vs-scala)

[https://www.codeproject.com/Articles/893211/Differences-Between-Scala-and-Java-Part](https://www.codeproject.com/Articles/893211/Differences-Between-Scala-and-Java-Part)

[http://www.wiredmonk.me/rest-api-with-scala-play-slick-postgresql-redis-and-aws-s3-part-2.html](http://www.wiredmonk.me/rest-api-with-scala-play-slick-postgresql-redis-and-aws-s3-part-2.html)",1537656522.0
joshlemer,"Hey there! I started this a week or so back, but haven't had the time to start filling it out. See [here](https://github.com/awesome-scala/not-yet-awesome-scala). I'd really love for a lot of people to get involved!",1537631525.0
strawman53,"Symbolics library similar to Symja in Java, but based on mathematical typeclasses as in Spire. ",1537745046.0
ArneTreholt,"A good XML library is something Scala is missing imo. The java stuff works, and scalaxb does its thing generating classes out of wsdl files, but something more like circe/argonaut would be great.",1537950492.0
joshlemer,Haha I saw this and thought that maybe we were getting Union Types in 2.X ,1537560447.0
lbrent,"The problem with your code is that you have defined the status argument to be an instance of type S. Ok is indeed a singleton instance and therefore 

    count(list, Ok)

works.

    count(list, Error)

on the other hand does not, because Error is a type and not an instance. Error(""whooaa"") would be a corresponding instance.

What you could do is make count take a type as the second argument.

    def count[S <: Status](list: List[S], c: Class[_ <: Status]): Int = list.count(_.getClass == c)

Then you can call it as

    count(list, Ok.getClass)

and

    count(list, classOf[Error])

respectively.

There is probably and hopefully a cleaner way to do this, but maybe this will point you into the right direction.",1537554989.0
sant016,"you're requiring a Status **object** and not the class itself.  
for it to work you would have to call the method as  
`count(list, Error(""whooaa""))`

&#x200B;",1537555611.0
jokasx,You can probably use collect function on lists of pass a partial function yourself to do the matching. I'll try to think of a little code example for it if I have time.,1537560019.0
Daenyth,If you remove the S and just say List[Status] it should work fine,1537564988.0
pfcoperez,"`count` type parameter can be the one used to set the filter:

```scala
def count[S <: Status : ClassTag](list: List[Status]): Int = list.count { case _: S => true; case _ => false} 
 
count[Error](list) 
count[Ok.type](list) 
```",1537620675.0
hierro31,"You can always do something like:  

```
scala> list.partition(_ == Ok)
res0: (List[Product with Serializable with Status], List[Product with Serializable with Status]) = (List(Ok, Ok),List(Error(whooaa)))

scala> list.partition(_ == Ok)._1.size
res1: Int = 2

scala> list.partition(_ == Ok)._2.size
res2: Int = 1
```",1537640895.0
tel,"This isn't a place where you need generics/type parameters. Instead, exploit `case class` equality.

```
def count(list: List[Status], target: Status): Int = 
  list.count(_ == status)
```",1537937737.0
dtechnology,"Do you want to check for a specific error or want the more general count of errors?

If the first: `count(list, Error(""myError""))`

If the second, there's numerous alternatives
```
def isError(s: Status) = s match {
  case Ok => false
  case _: Error => true
}
def isError(s: Status) = s != Ok
def isError(s: Status) = s.isInstanceOf[Error]

list.count(isError)

// Or ""OOP-style""
sealed trait Status { def isError: Boolean }
case object Ok extends Status { override def isError = false }
case class Error(mesg: String) extends Status { override def isError = true }

list.count(_.isError)
```",1537557341.0
amazedballer,"`javaOptions := Seq(""-Xdebug"", ""-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"")`

and then use the [remote debug](https://www.jetbrains.com/help/idea/run-debug-configuration-remote-debug.html) option in IntelliJ IDEA.",1537547009.0
szienze,Perhaps this might help: https://stackoverflow.com/questions/4150776/debugging-scala-code-with-simple-build-tool-sbt-and-intellij,1537540490.0
SubMachineGhost,I always use these [Scala flags](https://tpolecat.github.io/2017/04/25/scalac-flags.html) that /u/tpolecat recommends.,1537519497.0
duhace,"I just started enabling -Xlint and -Xfatal-warnings, among a boatload of other wart catching flags in my projects. It's really helped keep my code clean. The most common thing that blocks compilation for me now is -Ywarn-unused, but I love it since it points out where code/imports i'm not using are so I can remove them.

Also, been using wartremover. Wanted to use scalafix but the lack of support for 2.12.6 until recently blocked it's introduction into my projects, and if it lags scala versions like that in the future I may never use it since I prefer to live on the bleeding edge (i've been thinking of transitioning to 2.13 recently if I can.)",1537514244.0
LPTK,"I never understood what people like so much about `-Xfatal-warnings`. I guess it just really doesn't play well with my coding habits, which are mostly: code like a pig to make it work, and then clean up before committing.

When prototyping or developing code, I just really want to get the code to type-check and pass the tests ASAP, so I can _then_ focus on making it clean, robust and beautiful (doing these prematurely seems like a huge waste of time). During that first phase, all other concerns are superfluous and just slowing me down.

For example, it is very common that I comment different versions of the same pieces of code just so I can quickly experiment  (both statically and dynamically) with varying combinations of them. So it's very often the case that I have unused warnings (and others) floating around during that phase.

But I won't feel comfortable committing code that contains warnings, so I know that I will end up cleaning the code and removing the warnings in time. And even failing that, isn't the CI the tool supposed to make sure that we actually do? As opposed to micro-managing it on every single compiler run.
",1537563658.0
brb_im_bulkin,There's always [r/ScalaConferenceVideos](https://www.reddit.com/r/ScalaConferenceVideos/),1537491448.0
harit66,"This is an awesome topic. I totally hear what you are saying. Every conference video is at least an hour long, and since there are so many of them, and as a learner you are looking for nuggets which might be 

* Better ways to use the language
* A new library which makes the work easier
* A better way to design the programs and projects
* A better way to test
* A better explanation to the concepts

I thought about this in past and started with something like [https://medium.com/@harittweets/conference-video-review-field-guide-to-ddd-cqrs-using-the-scala-type-system-and-akka-ce6d1bb2bbe0](https://medium.com/@harittweets/conference-video-review-field-guide-to-ddd-cqrs-using-the-scala-type-system-and-akka-ce6d1bb2bbe0), however, I never got time to make more of these. But honestly, I loved the experience.

I am willing to do more as I see, I totally love working with Scala.",1538755002.0
asarturas,"You can check out scala exchange videos, for example (skills matter are generally sharing all videos from their hosted conferences and meetups the next day): https://skillsmatter.com/conferences/8784-scala-exchange-2017",1537517542.0
Milyardo,You should probably mention a location if that's important.,1537398822.0
Seth_Lightbend,You could try posting something on [https://gitter.im/scala/job-board](https://gitter.im/scala/job-board) . I see in another answer that remote work is a possibility; you'll want to mention that.,1537407682.0
ratherbefuddled,"Try softwaremill, they have deep scala skills and are experienced at effective remote working. ",1537474006.0
PrimozDelux,"https://imgur.com/a/NLfYzcq

This is not OK ",1537421686.0
thinkingincode,"I’m the author of this article. Thanks for your feedback, I’ll see what I can do about getting this fixed. ",1537482964.0
EsperSpirit,"Decent article, horribly bloated website... ",1537479930.0
dozzinale,"I have to say that the course, at least in the first stages, isn't really a course on Scala but on the basics of the recursive model of thinking needed for the functional programming. Anyway, take care at the estimated time: for the first week, the programming assignment has an estimated time of 3 hours which, if you really think about it, are really far enough for doing these three exercises. Just give it another chance and take it calm.",1537358524.0
WallyMetropolis,What did you struggle with in the 1st assignment?,1537356907.0
beltedgalaxy,"I found that [Functional Programming in Scala published by Manning](https://www.manning.com/books/functional-programming-in-scala) is a better resource for learning functional programming (regardless if it is Scala or not), than the Coursera course.",1537373895.0
Domesticated_Animal,I tried this [https://www.scala-exercises.org/](https://www.scala-exercises.org/),1537357184.0
Milyardo,"The course is as introductory as it gets. If you don't mind, would you recite the first lesson here, explaining the material as much as you can in your own understanding, from there we can identify where you get lost and reenforce the objectives and lessons of the course, and hopefully prepare you the rest of the course.",1537369196.0
gardenerboy,"I'm in the same situation as you. I started the course 3 days ago and I was thinking it would be a basic one, but I had problems even with sbt installation. If you can find some help I would appreciate if you share it with me. We wont despair!! 💪",1537362152.0
m50d,"It's a bit roundabout, but I learnt functional style via *ML for the Working Programmer*, which is available for free on the author's site. Standard ML is maybe not the most practical language (though I know people who'd disagree), but it forces you to adopt a functional style by simply not giving you any other option (the book doesn't even mention e.g. mutable variables until quite late on).",1537370145.0
mlopes,"Hum, the first 3 weeks or so are supposedly very basic. As someone said, can you be a bit more specific about what got you stumped?",1537364436.0
iLikeOPHeroines,"The course is basic and introductory. You need to rewire your head to use recursion so its not going to come instant to you. If you have questions, just ask them on SO or here until you understand them. It'll take time. 

There are other resources to learn recursion like SICP, FP in Scala, HtDP etc... But the first two will definitelybe harder and the last one is very verbiose. 

",1537362972.0
raghar,"Unless you use something similaro to \`testOnly\` all tests are run, regardless of what was (re)compiled.

Actually, it would be pretty challenging to figure out which changes in code affected which parts of tests - that difficulty in figuring out what was affected by changes is the reason we have regression tests in the first place. (BTW, unit tests are usually very fast. Like one or two orders of magnitude faster than compilation).

When it comes to caching you probably set up everything correctly. About recompilation... you probably underestimate the number of dependencies between definitions in files - change in one file might result in changes of things available in explicit and implicit scope of many other files. And in order to run even one test all of compile and test dependencies have to be compiled, as well as all files in currently tested module. You cannot say: hey, I just want to run tests from this suite, so  skip compiling all the other files.

Whether it's Scala (JVM), Scala.js or Native Scala is not important. As long as you use compiled language it works the same way in virtually all build systems on all platforms.",1537348737.0
LukaJCB,"I think this article has some misunderstandings as to why a lot of people enjoy pure functional programming. Furthermore I don't think the author fully grasps how monads are used in pure FP Scala, which is unfortunate.

> In addition, the notion of isolating side effects by putting them in monads is stupid. Take the following two blocks of code:

    def main(args: Array[String]): Unit = {
      putStringLine(""Hello World"")
    }

> versus

    def main(args: Array[String]): IO = {
      _ <- putStringLine(""Hello World"")
    }

> Now the first way is the way pretty much every single programming language does it and the second way is the was Haskell does it. In Haskell, you know that a function is impure or it has some sort of side effect because it has IO in the function signature. That's all well and good, but I don't need fucking IO in the function signature to tell me that the main method of an application that does something has a side effect. 

First of all, I think calling it stupid and swearing in a technical article like this is really unnecessary.
Secondly, this is really missing the point. We don't use `IO` to define which functions have side effects or not, we use them because it's the only way to achieve equational reasoning.
Equational reasoning is a great tool that can help immensely when trying to understand what exactly a piece of code does, because it allows us to reason entirely locally.
Of course `IO` is not a silver bullet, but claiming that isolating effects with `IO` is ""stupid"" is needlessly antagonistic and ignores a large body of research and empirical data.

> In addition, if it isn't totally 100% obvious that something has a side effect, or if I have two functions with the exact same name and one has a side effect and the other does not, I can just add an exclamation point to the function that has a side effect and that convention tells the reader that it has a side effect.

Again, this is not the point of `IO`.

> But wait, one more thing. What about the Comonad Kleisli arrow semigroup endofunctor yada yada. Isn't that an integral part of functional programming? Well, yes and no. Yes in that it's an integral part of category theory which is the mathematical foundation of Haskell which influenced modern day functional programming, but no in that you don't actually need that stuff and 99% of the population never took a course in Master's level Algebra, topology, or category theory and frankly they have no fucking idea what you are talking about. So even though these things are heavily used in ""pure"" functional programming, when it comes to production code, with the exception of some internal libraries, these things aren't really used much and they're not really necessary. So basically, functional programming as a means of improving the correctness, maintainability, and testability of code is great, but trying to write Haskell code in a not-Haskell programming language with not-Haskell programmers is fucking terrible.

I really don't appreciate most of my work being called ""fucking terrible"" and I think it does nothing to further your point. FWIW, I never took a single course in algebra, topology or category theory and you don't need any of that at all to use pure FP.
Pure FP does rely on some abstractions borrowed from category theory, but you don't need to take a single course to understand the abstractions. 

In conclusion, I have to unfortunately say this is not a well researched article and seems to needlessly attack a subset of everyday Scala programmers. I'm sorry the author feels this way and hope he reconsiders soon.

",1537270307.0
joshlemer,"I would echo what other commenters here have said, that if the author wants to get a better reception of their articles, they should completely cut out the swearing and the antagonistic adjectives (""terrible"", ""stupid""). It comes off really abrasive and immediately makes anyone reading it check out.",1537271321.0
beezeee,Are you sure you want this out for future prospective employers to see? I don't think this helps you even at an imperative shop ,1537279640.0
JohnTheB0mb,*sigh* My opinion pieces never get thumbs ups.,1537269264.0
m50d,"I struggled with the formatting of your code examples, but to construct a stack-overflowing example look at the cases where the stack will get deeper.

    case FlatMap(x, f) => run(f(run(x)))

This will first call `run(x)`, so you want to form a case where `x` is another `FlatMap`. I don't understand that definition of `forever`, but if you create a deeply nested pile of `FlatMap`s via e.g.

    val p = Suspend(() => println(""abc""))
    (1 to 10000).foldLeft(p){(a, b) => a.flatMap(x => Return(x))}

(note that I had to override `IO#toString` to make the interpreter not stack overflow when trying to print this)

then calling `run` on the result of that (which will look like `FlatMap(FlatMap(FlatMap(...`) does stack overflow as expected, and the fixed version of `run` does work correctly.

The idea of the resequencing of the nested `flatMap`s is that `FlatMap(FlatMap(..., g), f)` becomes `FlatMap(..., g andThenK f)` (where the point is that `g andThenK f` is a function value that does the thing that `g` and `f` together did). So any long chain of `FlatMap(FlatMap(FlatMap(...)))` is gradually reduced to a single `FlatMap` which can then be executed without a stack (or rather, the stack has been pushed into a large function object that we've constructed on the right of the `FlatMap` - but function objects are stored on the heap and don't overflow).",1537269508.0
FeydPL,All informations about stack safe free monad you can find in this paper: [http://days2012.scala-lang.org/sites/days2012/files/bjarnason\_trampolines.pdf](http://days2012.scala-lang.org/sites/days2012/files/bjarnason_trampolines.pdf),1537263521.0
tel,"m50d got it already, but I'll try to describe it another way.

The key issue with tail-recursive handling of `FlatMap` is that `FlatMap(x, f)` is composed of two `IO` stacks, the `x` and the result of `f`.

We could simplify `FlatMap` slightly to the following form `case class FlatMap[A, B](x: IO[A], f: IO[B]) extends IO[B]` where I've just made the second argument into a direct value instead of a function. Now we see the underlying structure that was hidden by that function: `FlatMap` induces a binary tree!

Any binary tree requires some form of care if we want to traverse it in a stack-safe manner. In particular, we can maintain a manual stack and manage it ourselves (similar to the trampoline method) or we can continuously rotate the tree so that it unfolds into a list as we traverse it.

The complex `run` method does the latter. It ""reassociates the flatmaps"" to the right which you can see as a tree rotation pushing the nested structure on the left on to the right so that we can make incremental progress in a single step (and don't need to maintain a stack).

So this then gets to why `forever` isn't poorly behaving. Despite being infinite, it's _always right associated_ and therefore has a ""tree"" structure that's just a totally right-biased linked list. This won't trigger a need to maintain a large stack and thus works perfectly. The trick that's required to make `forever` go is the way that laziness interacts with the function parameter of `FlatMap`.",1537938273.0
joshlemer,"Please repost this thread in the ""Who's Hiring thread""",1537216352.0
GratefulTony,Why not post this in the who's hiring thread?,1537207723.0
denisrosset,Looks pretty cool! Love the fact that Martin is working hand in hand with Cats maintainers to remove the warts from the type class syntax.,1537211906.0
kpws,"Minor nitpick, but I'd prefer not to be required to type `(c: Circle)` for every method. As it is, the current implicit value class syntax is simpler and cleaner.",1537219345.0
Ukonu,"I like that this is moving forward but the syntax is kind of awkward. Maybe I just need to get used to it, but I never felt this way when I was 1st introduced to extension methods thru C# many, many years ago.

I'd just borrow their syntax. Instead of:

    def (x: Int).combine(y: Int): Int = x + y

Something C#-like:

    def combine(this x: Int)(y: Int): Int = x + y

See: [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods#example](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods#example)

Or just leverage implicit classes  + AnyVal somehow? At least with those I'd only have to pass the ""this"" object once - in a constructor - instead of multiple times - in the beginning part of every method. I'm sure there are some negatives to that approach tho.",1537286253.0
zzyzzyxx,"I like the spirit of this but not the syntax. The `def (target: Type).method` syntax is not insurmountable, of course, but it is rather...unique.

I think I'd prefer something like ""just make `implicit class Ops(target) extends AnyVal` slightly easier"". To that end, maybe `extension class Ops(target: Type) { def method }` is good enough? Then you can have type parameters and context bounds in the usual places.

While I think the `extension class` strawman is one of the best available options, I think taking a page from C#'s book would be nice too, e.g. `object Ops { def method(this target: Type) }` or `def method(extension target: Type)` or `extension def method(target: Type)` would be better. No doubt I'm missing something that makes the more familiar syntax less desirable.

Fundamentally all that's happening writing a free function with `n` parameters but allowing it to be called with the same syntax as it were a method of the first parameter with `n-1` parameters. That is, `def method(target: Type, arg: Arg)` <=> `class Type { def method(arg: Arg) }` <=> `def method(target: Type)(arg: Arg)`. So I like `extension class` for evoking the notion of ""adding methods to a type"" and not needing to specify the target type of every method, but despite `class` I'd expect it's possible to encode this as just static method calls.",1537287611.0
,[deleted],1537213688.0
simon_o,"Some might joke that [this](https://github.com/lampepfl/dotty/pull/5114/files#diff-c9e9d747cc67122c0a70671bedd3f683R80) is another instance of ""those who don't learn from history are doomed to repeat it""; on more serious terms though: Kotlin literally changed their language syntax to avoid having this construct, because they thought the problems associated with it were that bad.",1537208790.0
yawaramin,"First off, aren’t these supposed to be SIPs? Or am I misunderstanding and this is a SIP?

Anyway, IMHO, these new syntax features should start life as macros or annotations (do any exist for extension methods? It would be good to see prior art in proposals). As language extensions they can be tested with less risk. Similar to what Scala Centre is doing with e.g. sbt-errors-summary or what Haskell does—instead of spending a large effort on compiler refactoring, spend a small(er) effort on tooling.",1537798692.0
pellets,"You might be able to get what you want by using the Runner with -t.

http://www.scalatest.org/user_guide/using_the_runner#selectingSuitesAndTests",1537214642.0
px_dp,Can use add a tag to those tests then run just the tag?,1537208448.0
Kesomir,"tag the test names with something unique, e.g xxx, then testOnly -- -z xxx",1537209844.0
lihaoyi,"with uTest you could do 

    testOnly -- {pkgone.OneSuite.myTestOne ,pkg2.TwoSource.myTestTwo}",1537228708.0
Seth_Lightbend,"Seth from the Scala team at Lightbend, here. I'm working on:

* helping Adriaan and Jason get Scala 2.12.7 out the door. We merged two more PRs today and are QA'ing a new release candidate. Details at https://contributors.scala-lang.org/t/2-12-7-release/2301/7 , even gorier details at https://github.com/scala/scala-dev/issues/558
* getting the Scala community build going on JDK 11 (https://github.com/scala/community-builds/issues/742)
* constantly tinkering with Scala community build as always, things constantly break and need updating. gory details: https://github.com/scala/community-builds/commits/2.12.x
* publishing Scala modules for Scala 2.13.0-M5. scala-xml is out, scala-parser-combinators is out, genjavadoc is out. details at https://github.com/scala/make-release-notes/blob/2.13.x/projects-2.13.md
* working with library authors to help get their libraries published for M5
* setting up some more structure around Scala Code of Conduct enforcement online (working with folks at the Scala Center on this). stay tuned at https://contributors.scala-lang.org
* fixing a bug in Fortify SCA for Scala (https://developer.lightbend.com/docs/fortify/current/) involving Scala 2.11 trait forwarders

My ""Compiler Plugins 101"" talk from SF Scala is now online, longer 90 minute version (early-2018 version was 30 minutes): https://twitter.com/SethTisue/status/1042864355279163392

And also a 16 minute interview with me about Scala 2.13, Scala 3, compiler plugins, Lightbend, etc.: https://twitter.com/SethTisue/status/1042864944767590400",1537474503.0
DarthAbel,"I am learning the basics with Horstmann's ""Scala for the impatient"", made it to Chapter 4 and I am would like to pickup a framework to practice the stuff I am learning, I am considering Play for that purpose.  
",1537537363.0
pwliwanow,"Lately, in my spare time, I was writing Scala client for [FoundationDB](https://www.foundationdb.org/) \- [foundationdb4s](https://github.com/pwliwanow/foundationdb4s).

It wraps official Java client (still not everything is covered). It aims to provide more type safety and be idiomatic for Scala.

It's still in early stages of development, so I would love to hear suggestions (here or on GitHub as an issue) what to improve and what should be implemented to make it an attractive alternative to other libraries.

&#x200B;",1537217611.0
sake_92,"I am trying to help with https://github.com/scala/bug/issues/10218 issue called ""Somehow make the spec searchable (e.g. by generating PDF version)"".  
Here is the [site](https://scala-spec-hepek.netlify.com) and [pdf](https://scala-spec-hepek.netlify.com/pdfs/SLS.pdf).  
Source code is [here](https://github.com/sake92/scala-spec-hepek).  ",1538253518.0
BitgateMobile,"Need to find more time to do so, but I'm still working on the Scattersphere project.  Would love some input as to which direction to take it with the distributed server.  Current release will be a stand alone server, but I plan on adding support for etcd/zookeeper support.

My plan is to still keep it simple, so if it means making my own mechanism for keeping contact (ie. master/slave election), I would prefer that.  Introducing new libraries generally means a large number of dependencies that I don't want/need.

Either way, [the project is here](https://www.github.com/KenSuenobu/scattersphere/) - would love some feedback!",1537332943.0
dmoliveira,"I'm doing an IRC server in Akka.  A few months ago I've read a post from Eric Raymond:

&#x200B;

>My chosen learning project in Rust was to write a simple IRC server. As a service daemon with no real-time requirements written around a state machine of the kind I can code practically in my sleep, I thought this would make a good warmup for NTP.

&#x200B;

So I thought it would be a good project to practice Akka. Well, it is, I'm being able to figure out the advantages of the actor model and async I/O.

&#x200B;

Still I'm felling insecure about my Scala/Akka skills. I'm afraid the code I'm writing is crap from the point of view of a experienced developer. I cannot provide the code yet, but when I have an alpha version, may I ask for some review? I would like to know if I can improve and write more ""idiomatic"" Scala/Akka code. 

&#x200B;",1537342988.0
oheldarkaa,"Hello guys. Right now I'm working on project in the direction of analyzing social. networks for some local company. Could you help me with akka-http configurations for Messages.{Strict,Streamed} for akka-http ws server please.

I already know that sizes of posts from social networks are these:

Facebook 63.206chars - 252.284bytes (4b for char) - 247kB

Twitter 280chars - 1.120bytes - 2kB

Instagram 2200chars - 8.800bytes - 9kB

Is possible to handle incoming Message as **Message.Strict**, if the size of it less than **250kB**? If yes, what I should change in configuration?

I already set up **akka.http.server.http2.request-entity-chunk-size = 250 kB** , but it didn't work for me.

And one more question.

For example, got a new msg like that, TextMessage.Streamed(Source(SourceShape(Collect.out(1748224623))))

**1748224623** are bits or what? **209MB? (oO)**",1537524008.0
,[deleted],1537196096.0
Sadadar,"Credit Karma | almost all roles and levels | SF, LA, and Charlotte, NC | Onsite | Full Time

Credit Karma has 85M users and champions their financial progress. With 5 stars in both app stores and a user base who loves us we are the largest personal finance product in the US (and Canada). Our engineering team handles large amounts of financial data, with high security requirements, and translates that into insights for our members. We use a bunch of scala and akka in our stack, especially for data processing, and we’d love to add more people to our teams. 

Reach out to me if interested and I’ll forward you to the right team: matt (at) creditkarma (dot) com. ",1537194338.0
env0der,"moovel group | software engineer | Berlin, Germany | Onsite | Full time

&#x200B;

Moovel is building  solutions in MAAS (mobility as a service) domain. On the backend we are doing micro-services. My team is using Scala and we are hiring. Stack: AWS, PostgreSQL, Playframework. All new stuff is built with Scala, but still have some legacy services built in Java (Spring Boot). We have started with using Scala as a better Java about 1.5 years ago and since then have progressed to mostly pure FP. We are looking for good engineers with a right mindset. If you are a beginner in Scala it does not matter as long as you have solid experience in other backend technologies and are keen to learn Scala and FP together with us. If interested, please contact me: anton.onyshchenko at moovel dot com.",1537199494.0
anickelsen,"LEO Innovation Lab | Data Engineer/Software Engineer | Copenhagen, Denmark | Onsite | Full Time

LEO Innovation Lab’s mission is to innovate to improve the lives of people living with a skin condition. As part of the Lab, Imagine develops image recognition-based artificial intelligence to give both patients and doctors a better understanding of the development of skin diseases, improve diagnosis, and make it easier to find the right personalized combination of treatment and lifestyle.

Your main responsibility will be to ensure high-performant, consistent and increasingly automated data pipeline flows including images – sourced from thousands of users through our mobile apps, labelled by medical experts, and used for training AI models. 

Our stack: Scala.js, Scala, AWS, Lambda, MySQL, Akka

Job ad:https://leoinnovationlab.com/careers/data-engineer-sw-developer/ 

If interested, please contact me: anders.nickelsen at leoilab dot com.",1537257504.0
crunchbasehq,"Crunchbase | Platform Engineer | SF | ONSITE | Full Time

Crunchbase is hiring platform engineers. Come help me build scala services with akka-http, postgres, redis, elastic, kafka, kubernetes, and AWS. Scale is currently about 5k requests/minute for a fairly busy service.

Team: Platform engineers at crunchbase build our microservice-based reactive, eventually consistent core data storage and retrieval machinery alongside the systems that enable us to choose an optimal balance between performance and flexibility at each step in the data lifecycle.

Company: Crunchbase helps millions of entrepreneurs make the world a better of place.

themba (at) crunchbase dot com",1537283183.0
AesaKamar,"## **SeamlessDocs** | Software Engineer (Backend) | New York City (SoHo) |  *$120k-$165k* | Onsite


### We fundamentally believe that government is beautiful.
Too often we hear the opposite angle, but we really do believe in the power of a well-run, well-designed, well-meaning government. One that exists in the physical world, but embraces the digital one too. That, to us, is a truly beautiful thing. 


We are committed to debunking the myth that interacting with government has to be an experience citizens dread. We are working to spread our vision that government can, and should be beautiful. As it deserves to be.

### What it's like working with the Engineering team
- **SeamlessDocs <3 FP.** We make liberal but pragmatic use of many FP concepts and are no strangers to pushing on the type-system. We'd be happy to talk your ear off about math and would be very interested to hear what ideas you have to bring to the table. 
- **Learning is front-and-center.** We participate in weekly code golf exercises to play with new techniques and sharpen our skills. We engage in weekly company wide learning sessions where someone gets to share an idea or learning they think is worth sharing. 
- **Well fed and hydrated (and optionally caffeinated).** We've got some of the best food spots probably in the whole world right in our back yard. Catered lunches are supplied daily. Fridges and pantries are stocked. 
- **Flexibility to work how you need.** Unlimited vacation and flexible scheduling. Core hours are between 11:30am and 4:30pm. 

### Our Tech
- Scala with a lot of FP niceness
- Kubernetes for manageable deployments and infrastructure
- Flow-typed React on the front-end
- Some* (actually not that bad) legacy PHP 

###Finding out more
- **Apply here:** https://grnh.se/df7b17b32
- **Contact:** `talent@seamlessdocs.com`  
- **About:** https://www.seamlessdocs.com/about ",1537533562.0
juli1pb,"Twitter | Senior Software Engineer | SFO, CA | onsite | full time | (N/A

My team is hiring developers that are talking Python and Scala. Amazing team, amazing boss and great company. Warning: you will NOT write scala all day but it will be probably 50% python and 50% Scala.

https://careers.twitter.com/en/work-for-twitter/201808/senior-software-engineer-infrastructure-management-services.html

DM me if you have any question.",1537629503.0
lvauthrin,"**iHeartRadio | Senior Software Engineer | New York, NY USA | ONSITE | Full Time**

&#x200B;

I'm looking for a detail-oriented software engineer to join our backend services team.  Our team develops the core APIs that power the client applications used by millions of users daily.  We primarily use Scala (with a few legacy Java components) and deploy/run our code in Kubernetes.  We also create and maintain some data pipelines to import/export data to other internal consumers.  As part of our team, your responsibilities would include designing/building new features, maintaining high code quality via tests/code reviews/metrics, and keeping a focus on continuous improvement on all parts of the development process. Our team takes prides in having high quality code and developing in a principled fashion.

&#x200B;

For more info (and to apply) please see our job description ([http://jobs.iheart.com/job/senior-software-engineer-scala-1077327/?gh\_jid=1077327](http://jobs.iheart.com/job/senior-software-engineer-scala-1077327/?gh_jid=1077327)) or message me!",1537902272.0
joshlemer,You can see at around 8:20 when Martin Odersky begins working on Dotty.,1537184874.0
japgolly,Ha! Very cool. I didn't expect to watch all the way though but did,1537229548.0
zzyzzyxx,"I haven't used Evil Plots but looking at the API it appears you can show a rendered plot in a new window (which should work when debugging) or you can write the plot to a file and load the file in IntelliJ.

Is there another workflow you need?",1537204452.0
strobegen,also you can use notebooks like zeppelin or jupyter (via Apache toree) and embed resulted image to your notebook,1537683947.0
nrlb,http://nbviewer.jupyter.org/github/twosigma/beakerx/blob/master/doc/groovy/ClasspathMagicCommands.ipynb,1537140578.0
Tommassino,"Hey, was seriously considering using this. We were considering generating a default config file with comments from code. During my testing it worked pretty well.

Unfortunately in the end decided we would rather write the default config by hand. ",1537184747.0
anatoliykmetyuk,Cute! What use cases motivated you to write it? ,1537263215.0
sjrd,"The amount of work you keep doing to keep up to date with upstream React, *and* improve it with type safety to boot is amazing! Thank you for that!",1537092095.0
vish4life,"is there a giter8 template, or some other project template? I would like to know what is the best way to do Webapps using Scala.
",1537131353.0
minhthai,The amount of effort put into this is amazing. Even better since this is very nice to work with.,1537263366.0
emilypii,"[Here you go](https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/ComonadStore.scala)

",1537045422.0
Ironballs,"Yes, that would be the [Store comonad](https://eli-jordan.github.io/2018/02/16/life-is-a-comonad/). ",1536994830.0
volpegabriel,With `IO.sleep` there's no thread-blocking.,1537015583.0
teknocide,It's a non-blocking effect. Info in the API reference: https://github.com/typelevel/cats-effect/blob/c62c6c76b3066c500fca2f9e0897605bc12eb2a0/core/shared/src/main/scala/cats/effect/IO.scala#L1234-L1272,1536972790.0
poluserthrowaway,Congratulations Sébastien. ,1536981710.0
expatcoder,"Hah, hah, hah, the rascal, I suspect he's been hiding this for quite some time :)

Congrats, hopefully his new office won't be too far from Scala.js (figuratively speaking that is).",1537018651.0
tweettranscriberbot,"^The linked tweet was tweeted by [@and_prf](https://twitter.com/and_prf) on Sep 14, 2018 08:01:58 UTC (9 Retweets | 32 Favorites)

-------------------------------------------------

After a great time with [@heathercmiller ](https://twitter.com/heathercmiller ) I wish a bright future to the Scala center with [@sjrdoeraene](https://twitter.com/sjrdoeraene)  !!! Congrats and all the best! Things you spot at \#ScalaItaly2018 

[Attached photo](https://pbs.twimg.com/media/DnCjMUqX0AAiOTy.jpg:orig) | [imgur Mirror](https://i.imgur.com/iGUDKHX.jpg)

-------------------------------------------------

^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1536928602.0
1Wittgenstein1,"For the uninitiated, what is Cats?",1536897559.0
hyperforce,"OSS question. When cats core is upgraded in this way, do ALL the downstream libraries need to be re-released as well? Cats effect, mouse, etc.",1536941160.0
IngrianFileJunkie,"Berlin again :-/ There are good cities in Germany, not just Berlin.

At least it's remote.",1536858671.0
hyperforce,"Big fan of your work, but can we not with the undefined use of ""this"" in post titles.

> Scala got better with THIS ONE TRICK

It's clickbait and it's opaque.",1536868711.0
joshlemer,"I agree, I use this all the time and it is sooooooo amazing!",1536856124.0
lsivashov,How did you make it inline implicits ?,1536858438.0
Shinosha,Ctrl + Shift + P to see where implicits come from too !,1536911712.0
paul_f_snively,"Briefly, on the whole, yes, but we can summarize why as ""because type-checking is faster than type inference."" This is a little hand-wavy because the compiler will still almost certainly need to do some type inference in the body of the function, and it may even take _longer_ to infer whatever you do in the body and check it against the return type than it would to just infer the return type. But broadly speaking, it helps to declare the return type, both because it helps the compiler and because it makes your intention explicit—the compiler will _tell you_ if you don't actually return a value of the right type.",1536853088.0
hyperforce,"Maybe the real question is ""how do different kinds of type annotations affect compiler speed and by how much"".

""Does x affect y"" will illicit answers like ""yeah well technically"".",1536868818.0
Milyardo,"In theory it will, but not in most cases not in anyway you will find observable.",1536873853.0
rjghik,"Here's a commit from IntelliJ Scala plugin which claims 17% reduction of compilation time after adding type annotations:
https://github.com/JetBrains/intellij-scala/commit/5b61302e6d11375ace2972a570b2200efe508437",1537308529.0
1Wittgenstein1,That was really well explained! Would that all tech notes were so clear,1536826718.0
RandomName8,"Thanks, I had to solve this very issue myself some days ago.",1536790519.0
wTheRockb,"If we're being frank, starting you're own internal project which you lead in Scala is the only way i see you could do that. Entire codebases and teams don't change overnight, and if you want to convince them, showing how great Scala is would be much better evidence than being ""that guy who talks about how much better Scala is"".

No one else sounds experienced in this language / paradigm, so would this truly be more productive if you have to teach other team members for the steep difficulty curve that Scala can have?

I think one of the largest problems facing the community is people's over expecting that FP or Scala will be inherently better than other imperative languages like you listed. ",1536791355.0
tanin47,"Changing a language is a very difficult decision. Even if we had a language that is far superior than anything, familiarity/expertise would still be the winning criterion.

One good plan of introducing Scala is to use it on a small low-risk independent system. As the time grows, the system will grow. People will see how easier it is to maintain a Scala system.

\----

Now let's do some talking points:

* C++: we should never use C++ unless we have a strong reason to do so. Writing anything in C++ would litter codebase with memory corruption and security vulnerabilities. One reason for using C++ nowadays might be: you need the speed that other languages can't give you because you can manage memory yourself. As a side note, Rust has increasingly become a better choice.
* Python doesn't offer type safety. This becomes a huge maintenance pain as the system grows bigger and older (e.g. upgrading pip package, refactoring). Using dynamic language (e.g. Ruby and Python) is very punitive if you initially use a wrong design.
* Go is like speaking English with 7-year-old vocabulary. It will be verbose trying to capture complexity of your requirements. Go aims at specific goals (e.g. compile much faster than Java, difficult to make mistake, easy to learn). It is created to solve Google problems (e.g. large codebase that takes hours to compile in Java , many engineers writing code with inconsistent quality, onboarding thousands of engineers every year). Fun fact: Rob Pike, Go creator, said that newbie engineers were not capable to understand brilliant languages; They won't have problems with learning Golang. ([http://nomad.uk.net/articles/why-gos-design-is-a-disservice-to-intelligent-programmers.html](http://nomad.uk.net/articles/why-gos-design-is-a-disservice-to-intelligent-programmers.html)). For a smaller company, I'd avoid Golang because Go requires a lot more code. This requires hiring more engineers.

For me, Scala seems to strike a good balance (not the best though, the language seems unnecessarily complicated). Type safety, less verbose than other typed language (e.g java, go), Decent performance (e.g. faster than python, slower than Java). Two disadvantages of Scala are, of course, slow compilation and steep learning curve. These two disadvantages can be addressed by (1) avoiding a large codebase (Try  separating them into JARs), avoiding excessive implicit conversion and macros usage and (2) having a Scala expert (which is you, I assume) in house

Please also keep in mind that these talking points don't matter much when comparing against familiarity/expertise within a team.",1536804168.0
ancientmatingcalls,How new are you to the startup? You might want to try to understand their decisions behind going with those languages before trying to introduce anything new.,1536791454.0
Kaitaan,"*Why* do you think they should change? You haven't mentioned that.

Honestly, my advice, don't be ""that guy"" who shows up to a company who thinks they know better than everybody and tries to change something that's so fundamental without understanding what decisions let them to where they are now.

They probably have a ton of tooling, monitoring, etc that work for their current languages, and introducing new ones may take a too if effort to do properly (emphasis on ""properly"").

If they're a startup, chances are that there now interested in trying to get shit done than they are in introducing a ton of new complexity into their systems.",1536822749.0
llaammaaa,"Be explicit. Give concrete examples of the benefits. What problems does Scala solve? Why does it solve them better than the alternatives? What are the cons of Scala?

If you just say ""another team used this and I liked it"" you won't get far.",1536786581.0
hyperforce,"Changing people is a lost cause.

Focus on changing the folks who want to be changed.",1536789013.0
Daenyth,"If you just joined and you're not in a leadership position then frankly I see it as super unlikely you will get much traction.

If you have the leeway to run a project on your own and make that call then that's likely the only way. You also need to be extremely fluent in Scala to be able to do education. Do be prepared for Scala and/or yourself to be viewed pretty negatively if the project goes poorly.

You also need to evaluate if it's a good for for the team - what happens to your project if you change jobs? If no one can take care of it then you've cost the company quite a lot money.",1536846533.0
jangchoe,"How high are you in the company? Realistically, unless there's a clear business case, you probably won't be able to ""sell"" them on Scala. It will be an uphill battle because you got to show them explicitly how much it will benefit their business with Scala. Then you need to answer on how to train people in Scala, how to find new developers, etc. 

In the companies I've been with, it has to start from the top, almost CTO level for Scala to be sold to the engineering team. Then you gotta deal with developers who aren't convinced of the benefits of functional programming. I've been at a companies where a few imperative programmers used Scala and was decent at staying in the functional paradigm, but they didn't think it was a big deal. They still preferred their imperative languages. ",1536872088.0
edvmorango,"Change peoples mind is really hard, but as a person who really wanna use Scala in my current job, I'm doing weekly workshops focusing initially into APIs like Scala collections and functional programming concepts.",1536789890.0
kag0,"Well, one thing I'd push on is the difference between imperative/declarative and functional/mutating. 

&#x200B;

You can write functional code in almost any language (although it may be harder/more boilerplate than you'd prefer). But if your goal is to have code in a functional style, then write functional code in the languages you have and make a case for why that approach has advantages. If/when people come to appreciate that, then point out how much easier/less boilerplate you could have if you did the same in Scala.    
Similarly, you can write declarative code in the languages you have and if you get traction then show how it can be done in Scala.",1536806746.0
acjohnson55,"The best you can do is build the case over a long period of time. You can educate people on where Scala could make an impact as you see how people approach concrete problems with the tools they're using. Translate functional idioms into the code that's already in use, and educate people on the upsides of that style. Then show how it would look in Scala, with the benefit of a more natively functional language.

Also acknowledge the places where their chosen tools are working well, and know enough about other non-Scala alternatives to speak to them as well.

If you're lucky, you may be empowered to pilot use of Scala on a project. If you get that opportunity, make sure to bring people into the fold and let them do the work with your coaching to ease the learning curve. ",1536893726.0
chewybacon,"One good way to influence a team to switch to functional programming is to encourage your team to take an online class together. 

Our team is currently taking the Functional Programming with Scala course on Coursera. 

It also helps your company by offering continuous learning opportunities, because that shows that you are willing to invest in your team and your employees. 

It's a win-win, you get to expose your team to new ways of thinking and your company gets better trained developers. If you can't get your company to recognize the value then your likely not going to get your team to ever switch to Scala. In which case your time would be better spent looking for a different job that already uses Scala then trying to swim upstream against your company culture.",1537048219.0
depleteduraniumftw,"Scala versus

C++: All the same ability to write cryptic unmaintainable bullshit but with garbage collection.

Go: As good or better concurrency tools but with generics.

Python: Basically the same syntax but with 100x the power and speed.",1536793457.0
Itakitsu,Port the entire codebase to scala ,1536803746.0
dehun,"For introduction of anything into the team the main question will be - what are the business benefits? If you want to introduce it only because it benefits you then team will not listen.

* Is it shorter time to market? How exactly it will be shorter if you only one in the team who can use than language?
* Is it less errors due to superior type system?  Is business in the domain where having less errors will be beneficial? I personally saw several successful businesses testing right on the production.
* Is it cheaper developers? Or less developers needed? We know that scala developers will not be cheaper, on contrary they usually more expensive.

Also think about

* expanding team - searching for scala developers is harder than for c++/go/python
* performance - c++ will be faster and has potential to be as fast as possible. Also no gc pauses - predictable latency. Maybe that's the business requirement?
* python is faster to write in some cases. It is also awesome for end 2 end tests automation. Like QA engineer writing scala code - forget about this... They all use python.

Why you joined that startup in the first place if you want to work with functional programming?

You are missing out a lot of things now. The only realistic way in that startup will be to start a new project using scala. But who will review your code? How will you learn if you are there alone? Best scenario - people who only started to learn language will review your code. How do you plan to progress in such environment? How exactly you utilizing team/work in the office in your favor in such case? You can work alone remotely with same benefits.",1536827837.0
2cool2beNull,"The following talk is an awesome inspiration for those attempting to adopt FP principles at work. Give it a try :)  
[YOW! 2017 Ken Scambler - Adopting FP: A Human-First Approach](https://www.youtube.com/watch?v=vpcKnqyNdSQ)",1536849270.0
pythonicus,If you push Scala at your workplace you best be sure that the market you're in can support recruiting. I've been at two shops now that have both abandoned Scala because they struggle to recruit. ,1536956345.0
Milyardo,"> I'm very grateful to eed3si9n for starting the conversation and showing us how to make this kind of program.

What exactly is the conversation started here? How to interactively work with the console on the JVM, or write a functional game loop? Eugene's post seems to be clearly about the former while for some reason you're focused on the later.",1536776515.0
gmartres,"Note that there's already a mostly complete but under-tested xml interpolator implementation for Scala 2: https://github.com/densh/scala-xml-quote

See https://contributors.scala-lang.org/t/proposal-to-remove-xml-literals-from-the-language/2146 for more context.",1536772760.0
grizzly_teddy,Why the question mark? ,1536769762.0
CroptyCrypto,"<Goodbye, XML?>",1536785500.0
litan,"Highlights:

* New dark theme
* Windows gaming improvements
* Enhancements for generative art
* Embedded mode for devices like the Raspberry Pi
* Improvements to the Kojo-Arduino bridge
* Scala upgrade to 2.12.6

More info in the [release notes](https://kojoenv.wordpress.com/2018/09/02/new-kojo-release-2-7-03/).",1536741021.0
volpegabriel,I think you're probably looking for `Optics`. A simple Scala library is `quicklens` or a more sophisticated one `monocle`.,1536725121.0
cmcmteixeira,"You can create an Object for the base trait and implement an unnaply method that extracts the field/fields you're after  
You would still have to implement the match statement but at least the bulk of it would be centralized in the object .  


The other alternative I can see is trying to use shapeless and deconstruct the obj into a tagged HList and extract the field you're after.. I'm not 100% sure of the details or if it would work but from what I can gather those are your two only options..",1536750155.0
aebrett,"I'd be tempted to combine your two approaches by defining traits with associated unapply methods:

```
trait HasA {
  def a: Int
}
object HasA {
  def unapply(arg: HasA): Option[Int] = Some(arg.a)
}
```

Then have `One` extend `HasA with HasB with HasC with HasD with HasE`. That gives you the nice API for pattern matches that you're looking for while keeping the `unapply` methods very simple, and also means you can pass around the instances themselves to methods which take arguments of type `HasA` if you find you have situations where that makes sense (eg. `def foo(x: HasA)`).

Obviously this approach comes with some extra boilerplate to define the traits and companion objects, and that may or may not be worthwhile depending on how extensively your case class hierarchy is going to be used.",1536760575.0
marcinzh,"> bunch of traits like HasA, HasB, HasC (...) But this doesn't feel like a great solution.


    sealed trait Thing { 
        def a_? : Option[A] = None 
        def b_? : Option[B] = None 
    }
    sealed trait HasA extends Thing { val a : A; override def a_? = Some(a) }
    sealed trait HasB extends Thing { val b : B; override def b_? = Some(b) }
    
    case class One(a : A, b : B) extends HasA with HasB
    case class Two(a : A) extends HasA
    case class Three(b : B) extends HasB

",1536761315.0
hyperforce,Maybe there's a bit of XY going on here. Why are you extracting fields from all the possible objects as an `Option`?,1536942268.0
joshlemer,"Hey sorry, this article is very close, but I think slightly too off-topic for this subreddit. Maybe if this post were a self-post with some kind of body of text to start a discussion, it would be more appropriate, but as it is it seems not very relevant.",1536699036.0
hyperforce,I know some of these words.,1536686124.0
mart187,"Yes, fucking awesome! Will have a look for sure, although I believe that Tagless final is so basic that not many helpers would be needed...",1536695983.0
derekjw,Do you have a plan in place to move away from scalameta paradise? Or some way of getting new updates?,1536730019.0
Doikor,What is the support in IntelliJ IDEA for this like? If I use these macros will everything end up as squiggly red or just work?,1536757316.0
HighGaiN,"Nice article, it's good to see both the pros and cons of each approach, I find many times people just try to sell their idea without discussing the downsides",1536703203.0
volpegabriel,"Great post, thanks for sharing!

One thing I disagree with is this sentence:

> Consider a scenario where you want to serialize a tagged value to JSON using play-json. play-json has a contravariant typeclass for this: Writes[-A]. Since A @@ B <: A then Writes[A] <: Writes[A @@ B]. This means you do not have to write a single line of code to implement JSON serialization. For instance, Writes[Int] <: Writes[Int @@ UserId], which implies that the default implementation will be picked up. That’s a much bigger problem with the case-class approach, where you simply need to re-implement everything and, as explained in the next section, it turns out that you cannot really do this as generically!

I'm not sure about `play-json` but with `circe` this is only two lines for value classes:

```scala
implicit def valueClassEncoder[A: UnwrappedEncoder]: Encoder[A] = implicitly
implicit def valueClassDecoder[A: UnwrappedDecoder]: Decoder[A] = implicitly
```",1536743739.0
nsvir,"Interesting. How about using types definition ? We usualy just define `type TransactionId = Int` and we are good to go. The downside is when we need to define a generic type like, let's say: Content, that might be a String or Array[Byte]. In that case tags are more elegant (Content @@ Array[Bytes])",1536733057.0
vishbar,"What's the best way to handle CPU-bound parallelism when writing using IO (or abstracting over an effect using tagless final)?

If, for example, I have a `inputs: List[AnInput]` that I want to transform into `outputs: List[AnOutput]` via `veryExpensiveCalculation: AnInput => AnOutput`.

I know I could do something like this, presumably:

    for {
      inputsDelayed = inputs.map(Sync[F].delay(veryExpensiveCalculation(_)))
      outputs <- inputsDelayed.parSequence
    } yield outputs

but it feels really weird to have to wrap up my pure calculation in an effect--not to mention that the type signature will be misleading, as my code just does a bunch of number crunching without any side effect.",1537278077.0
duhace,"has there been any progress on opaque types? every day i want them more and more, and if they could be added they'd be a huge boon",1537513650.0
roelofwobben,"Hello, 

For a challenge of the ""Essentails Scala"" book I have this solution :  h[ttps://scalafiddle.io/sf/e0S0cxD/0](https://scalafiddle.io/sf/e0S0cxD/0)

&#x200B;

Can I refractor this so it's better Scala. I did not learn things like for/yield yet",1536776527.0
DontKarmaMeBro,"hi friends, anyone know how to use libgdx with scala in the current year of 2018? i'm finding all these great resources from 4+ years ago, such as this one giter8 template that didn't work. the libgdx doc for ""other jvm languages"" includes scala but also just points to the same template that hasn't been updated in 4 years.",1536909389.0
jamakai,"For the `sbt-release` plugin, does anyone know how to see what the release version would be from the sbt shell? I've set the releaseVersion task to a custom function, and I want to test that it works",1536960450.0
crabsiemens,Hey! I'm a total scala and IDEA newbie and I want to know how to import Play framework source to an existing project (rather than creating another project).,1537311573.0
blanonymous,I'm gonna finish the red book today. Any suggestions on what I should do next to learn more about FP? I thought about building something but also going through cats docs and how they allow to do FP sounds good. Any suggestions? Thanks,1537600690.0
thesuperching,"Does there javascript equivalence of Bindi ng.scala?
I recently  am learning Vue.js. I hate it because it adds so many extra language feature and rules and corner case , the language is too ugly to work with.",1536584396.0
HighMaxFX,">trait EventSource { this: Actor =>   
>  
>import EventSource.\_  
>  
> // We're going to use a Vector but many structures would be   
>  
>// adequate   
>  
>var listeners = Vector.empty\[ActorRef\]   
>  
>// Sends the event to all of our listeners   
>  
>def sendEvent\[T\](event: T): Unit = listeners foreach { \_ ! event }  
>  
>...

&#x200B;

&#x200B;

What is happening in this part???? 

&#x200B;

> this: Actor => 

&#x200B;",1537629227.0
mr___,"Why not just ask questions in the sub itself? I’d rather see questions by people and discussion in the sub, and all the blog spam posts corraled to a single sticky!",1536583788.0
sake_92,"Just out of curiosity, why did you need ScalaJS?  
Because I'm also planning to make some components for revealjs in Hepek (which is just a static file generator). :D",1536576862.0
olafurpg,"Very cool! I did something similar with Scalatex (http://www.lihaoyi.com/Scalatex/). In my setup I generated static html files on the JVM, no Scala.js. I wrote slides in markup like here https://github.com/olafurpg/thesis/blob/master/slides/src/main/scalatex/cake2017.scalatex that compiles to Scala code. ""slide decks"" are case classes, themes are auto-completed https://github.com/olafurpg/thesis/blob/27672678f858ef1b936cc660cc902e75434eabfa/slides/src/main/scala/Main.scala#L39-L43 The end result can be seen here https://geirsson.com/assets/nextgen-devtools-2017/#/
",1536665193.0
elacin,"Very cool, I've wanted to do something like this myself but never put in the time :)",1536677029.0
gbersac,"If you could derive client and server from one single api definition, could you also derive a swagger ? Or a javascript client ?

Also, strange operators like `:|:` or `:=` make the code barely readable.",1536567968.0
letalvoj,"This is like an ultimate dream of mine (if ever finished). I hate working with Play. Generating swagger from it is pain. And usually you end up with incomplete specification anyway, since you need to manually enumerate even the implicit outcomes, such as malformed payload etc. I still do not understand how is it possible that the individual handlers are not typed in Play.

Back to you project. Do you have any vision regarding Dotty? The combination of union types + singleton literal types might come handy. For example if the following

`{ if(???) Ok(...) else BadRequest(...) } }`

had a type

`Ok[...] | BadRequest[...]`

you would be able to generate pretty much complete swagger doc.

&#x200B;

Yet, there is one thing, which I am missing both in my example and your project. How do you plan to provide descriptions of the individual cases for the swagger? Annotations?

&#x200B;",1537630839.0
Baccata64,"Holy cow I've been wanting this for such a long time, thank you so much !",1536558315.0
mdedetrich,"I actually made a suggestion for a SIP (or SLIP) for this and iirc Martin said this wasn't really possible to do generally, it would be nice if we could integrate this work into the official scalac.  


It looks like a very obvious oversight for a language that is meant to have great support for implicits.",1536579047.0
dehun,"Actors are mostly useful for error handling hierarchies and distributed programming.

In case if those two are not the main concerns - other models will suit way better because of more strict typing.

You can use various IO/Task/Future monads and you can also use akka streams - they will be more managable.

&#x200B;

As for error handling hierarchies - see [https://doc.akka.io/docs/akka/2.5/general/actor-systems.html#hierarchical-structure](https://doc.akka.io/docs/akka/2.5/general/actor-systems.html#hierarchical-structure)

As for distributed computing - see this article - [https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/](https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/)

&#x200B;

Also if you have some spare time/interest you can learn erlang and OTP framework.",1536582833.0
ChrisNH,Akka doesn’t really use any of that which is part of what makes it cool. I think you will want to be comfortable with Scala in general but otherwise  I would go ahead and dive right in.,1536501012.0
critter,"Go for it, you already know enough to get started. Learn by doing (and occasionally reading up)!",1536511701.0
kag0,"I found [https://danielwestheide.com/blog/2013/02/27/the-neophytes-guide-to-scala-part-14-the-actor-approach-to-concurrency.html](https://danielwestheide.com/blog/2013/02/27/the-neophytes-guide-to-scala-part-14-the-actor-approach-to-concurrency.html) handy when I was first grasping actors. 

&#x200B;

Are you familiar with the immutable/functional approach to concurrency? Actors are super cool and can be quite handy, but I think the immutable/functional style of concurrency is probably more useful most of the time and might be worth learning first.",1536520984.0
SystemFw,"```scala
import cats._, data._, implicits._
import cats.effect._

type Error

val a = EitherT.pure[IO, Error](())
val b: EitherT[IO, Error, Unit] = EitherT.pure(())
val c = ().pure[EitherT[IO, Error, ?]]
```

Remember to enable partial-unification and add kind-projector to your build.",1536497231.0
soltar25,Better ask on stackoverflow,1536493670.0
BarneyStinson,"I use ScalaTest but mostly just use `assert(result == expected)` because I don't like the pseudo-english matcher syntax. I chose ScalaTest for our new project because the team already knew it (I was using specs2 before). 
If I was starting a new project today I would probably check out a testing library such as `testz` instead of using a traditional framework.",1536486650.0
beep_dog,"The flexible syntax is just to accommodate different testing styles. Some folks like to write proper English, and others don't. I personally don't mind, and usually use a `shouldBe(` syntax.


Just pick the style that you like and use it? If you need your test framework to enforce the way you write tests, ScalaTest definitely isn't for you.",1536506925.0
aphexairlines,"I just use JUnit, `org.scalatest.junit.AssertionsForJUnit`, and `org.scalatest.mockito.MockitoSugar`.",1536484544.0
KrumKey,"uTest works quite well, in scala.js is attractive as it compiles faster than scalatest ",1536501942.0
pellets,"Try scalatest’s FunSuite style. No funny dsl to learn. Just

    test(“name”) {
      assertResult(4)(2)
    }",1536639856.0
tanin47,"I prefer utest because my taste doesn't seem to get along with Scalatest's taste. For example, scalatest doesn't supports sharing nested logic. It also doesn't support more than 3 levels of tests. For example:

    describe(""aaa"") {
      describe(""bbb"") {
        doSomething(); // This is executed only once for these 2 tests.
    
        it(""ccc"") { 
          // This 3-level nesting isn't allowed.
        }
        
        it(""ddd"") {
          // This 3-level nesting isn't allowed.
        }
      }
    }

PS. I use FunSpec because I like fun.

Edit: I was wrong. Nested describe works.",1536520464.0
m50d,I've found all the fancier test libraries to be more trouble than they're worth; I stick to plain JUnit and find that makes it much easier to see what any given test is actually doing.,1536767713.0
yawaramin,"Have you tried ScalaTest’s RefSpec style? It could not be easier (though it’s JVM only):

    class FooSpec extends RefSpec {
      object `add` {
        def `adds` {
          assert(add(2, 2) === 4)
        }

        def `does not subtract` {
          assert(add(2, 2) !== 0)
        }
      }
    }",1537052936.0
kjetulf,[testz!](https://github.com/scalaz/testz),1536571113.0
juwking,"My favourite ones are

   - Web Crawler
   - Using Akka Streams to poll a service(weather for example) and trigger a warning if weather is too high for some time(<30c for 10 hours)

",1536401428.0
aethermass,"Real-time trading engine. Could exercise streaming data, analytics, and you could make a simple web portal to view status in real-time with Play.

I am doing this “for real” at this time. ",1536406219.0
mutcianm,"The links inside the blogpost are indeed outdated, but you can check out our wiki page on GH: https://github.com/JetBrains/intellij-scala/wiki/Library-Injector

Under ""Available extension points"" you can find links to the API and example usages you'll need to implement support for your library. 

Regarding the distribution model there are currently two options: publishing a standalone IntelliJ plugin which depends on Scala plugin(described in 2015 blogpost), or publishing support as a jar alongside with your original library(the GH wiki link)

You can also get additional help on our gitter channel https://gitter.im/JetBrains/intellij-scala or even ping me there directly",1536335159.0
Baccata64,Quick googling gave me this : https://blog.jetbrains.com/scala/2015/10/14/intellij-api-to-build-scala-macros-support/,1536312548.0
RandomName8,"Is anyone taking a look at the so promised null safety using intersection types? We are reaching the point of feature freezing scala 3 and still no sigh of them. In my book, if after 15 years of experiments in these regards in scala, there's *still* no way to do null safety then version 3 is a major disappointment.",1536429262.0
cynick_uk,"Does anyone know of a more detailed description of ""match types""? The best I can find is an [example of a problem](https://github.com/lampepfl/dotty/pull/4964#issuecomment-417221115).

Odersky mentions:
> Revert from rewrite methods to the preceding scheme for inlining.

and:

> Keep the idea of rewrite matches (probably call them inline matches instead), which are executed at compile time in inlined code.

Is this the scheme [originally defined](https://github.com/lampepfl/dotty/blob/dbaf1245da25d36c86b6792d9364cca625fafbaf/docs/docs/typelevel.md) for ""transparent"" methods? ",1536310248.0
teknocide,"I like circle-ci myself. It's been some time since I played around with it but it still does its job and I much prefer it over wercker and, well, Jenkins.",1536247988.0
amazingdreams,Gitlab,1536251021.0
Seth_Lightbend,"I'd be curious to hear more about what you think the underlying cause of the failures you're seeing is. (My own experience, anecdotal of course, is that I maintain or contribute to a bunch of projects that use Travis-CI and haven't been dissatisfied, either in general or in recent days.)",1536258111.0
joshlemer,I think you're going to have a harder time getting a remote position as a junior dev for sure.,1536241286.0
pythonicus,"I've worked remote as a Scala dev but I can operate pretty much autonomously. I think it would of been very difficult and frustrating for both sides if I attempted it early in my career. If you had a local mentor, maybe not as much.",1536254272.0
cmcmteixeira,"My personal experience is that:  
1) I couldn't find that many Scala companies open to remote and the ones that exist are usually looking for seniors

2) The few remote Scala positions that exist (the Scala market is relatively small and usually only a small percentage of companies in any language/area offer remote positions) are usually sought out by a lot of people so it's also harder for a junior to stand out  
3) Being a junior (I was one not so long ago) you'll progress much faster by being next to people that can coach you and with whom you can speak easily.. Some of the bigger ""revelations""/""learning experiences"" I've had where when I  paired w/ someone or by just going w/ a colleague to get a coffee or something  


3.a) It's still possible to do all of that as a remote dev, it just requires a bit more effort and it's less ""natural""  


So, even though it's not impossible, you're probably better of relocating for a few years at least and then trying again.  
",1536256138.0
alexelcu,"I accidentally posted the link to the GitHub repository instead of the release notes:

https://github.com/typelevel/cats-effect/releases/tag/v1.0.0

If any admins can edit the link, I’d appreciate it.",1536230189.0
tdonnell,IO { println(“Great job !”) },1536227283.0
acjohnson55,A bit of feedback -- the README doesn't really illustrate \*what\* Cats-Effect is used for. Some examples would go a long way!,1536240464.0
LukaJCB,Woohoo!,1536226658.0
volpegabriel,Awesome! :tada:,1536231113.0
vitalijzad, For when purity just isn’t impure enough.  LOL,1536226771.0
,"The new cats-effect 1.0.0 release breaks http4s 0.18.16, fs2 0.10.5 and cats-1.2+ code:

java.lang.NoSuchMethodError: cats.effect.Effect.runAsync(Ljava/lang/Object;Lscala/Function1;)Lcats/effect/IO;

at fs2.async.package$.unsafeRunAsync(async.scala:148)

**Answered** on gitter/cats-effect: cats-effect 1.0.0, fs2 1.0 (currently at M5), and http4s 0.19 (currently there's a SNAPSHOT with the latest fs2 and cats-effect) is the correct dependency matrix. Yet http4s 0.19 has a ways to go.",1536363711.0
dehun,"You can solve tasks from coursera course on scala - they involve some functional programming and laziness(Streams mostly).

Also consider solving small tasks from hackerrank(or any similar platform)  using functional programming style.

Also if you would like some practice on functional programming basics please consider [https://github.com/dehun/learn-fp](https://github.com/dehun/learn-fp)

&#x200B;

&#x200B;",1536235892.0
WallyMetropolis,"The Red Book is really about functional programming with bent towards library design. So if you really want to practice the concepts in the Red Book, you should try writing a library. Basically, writing some code that you would import and use in other projects. 

Because you'd be trying to learn, it's fine if your library does something that other, better libraries already do (and, in fact, you can compare your approach to theirs.) 

So suggestions may be: 
- A simple router (and compare to Cask)
- Some kind of data structure (Maybe a tree, with implementations for red/black trees etc)

You can also try working on an app of some sort, like a chat app, or a personal scheduler, or a budgeting and expense tracker. ",1536481701.0
deds_the_scrub,"I'm currently on Chapter 5. I've done some simple services using http4s. This is really good video ( including an example of where laziness is useful ). 

https://youtu.be/urdtmx4h5LE",1536204292.0
sieabah,[Are you talking about this book?](https://www.manning.com/books/functional-programming-in-scala),1536263376.0
HighMaxFX,I feel like a brainlet when I open this book. It is too hard for me :(,1536226857.0
Holothuroid,So what's the trick?,1536175570.0
justinhj,"Does anyone know how easy it would be to add random access to this data structure? Like Vector's apply(n) which calls getElem(n) and updated which allows you to mutate a value at position n. Looking at the code it wasn't clear to me. Would be nice to have take and drop too,",1536358254.0
hyperforce,"I find this so interesting.

Have other languages come across a need for this? Like is there any prior work on this? Seems to be a lazily constructed collection that optimizes for append/prepend.",1536170367.0
SystemFw,"Hey people, turns out we broke compatibility by mistake. Fix is on its way, so probably expect a 1.3.1 soon",1536164638.0
drizzlelicious,Here's a newer project that integrates really well with cats and circe/arguonaut: https://http4s.org/v1.0/client/,1536082946.0
mart187,Http4s is pretty cool!,1536087206.0
lu4nm3,"Check out https://github.com/softwaremill/sttp. It's agnostic as to what async backend you use and it supports alternatives to Akka such as Scala Future, Monix, Scalaz, Fs2, etc",1536075829.0
carlfish,[okhttp](http://square.github.io/okhttp/) from Square is pretty straightforward if you don't mind a straight Java interface.,1536099964.0
Amendmen7,"Surprised nobody is mentioning the great /u/lihaoyi 's [requests-scala library](https://github.com/lihaoyi/requests-scala), based off the super simple python _requests_.

Integrating is just:

    // build.sbt
    libraryDependencies += ""com.lihaoyi"" %% ""requests"" % ""0.1.4""

and then

    // yourfile.scala
    val r = requests.get(""https://api.github.com/users/lihaoyi"") // no imports needed
    
    r.statusCode
    // 200
    
    r.headers(""content-type"")
    // Buffer(""application/json; charset=utf-8"")
    
    r.text
    // {""login"":""lihaoyi"",""id"":934140,""node_id"":""MDQ6VXNlcjkzNDE0MA=="",...
",1536096840.0
ExtropianPirate,"Gigahorse is an option, which supports various backends and is relatively easy to use: https://github.com/eed3si9n/gigahorse

Dispatch used to be fairly popular but I would avoid it, the syntax is pretty weird and it has some pretty leaky abstractions.",1536081394.0
Philluminati,"Hi, I've had the same problem. ws-client in Play and ws-client-standalone are *incompatible* with earlier versions of Play because of the versions of Akka they depend on. I pulled something out of the app , ported it to ws-client, realised it couldn't run alongside a different version of Akka, then had to go back and rewrite it out.

I went back to a former implementation based on a Java library called ""ning"" (which I had to shade because tht's what ws also uses), so that also didn't conflict with Play.

Anyway, this works:

https://gist.github.com/philliptaylorpro/2e5f0e83c8b87879a5e7a29810d5e1b2
",1536136629.0
Falmarri,"Most of what you posted isn't actually a problem...

    2- Then I run the project. It crashed :
    
    [info] Running shopifyClient.Main
    SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
    SLF4J: Defaulting to no-operation (NOP) logger implementation
    SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
    SLF4J: Failed to load class ""org.slf4j.impl.StaticMDCBinder"".
    SLF4J: Defaulting to no-operation MDCAdapter implementation.
    SLF4J: See http://www.slf4j.org/codes.html#no_static_mdc_binder for further details.
    
This isn't actually an error. It's just telling you that there's no logging implementation, so it's falling back to the defaults.


    - Stakoverflow tell me to add a dependecy (which I don't need either in my app) to a SL4J implementation. I add the dependency : `""com.typesafe.akka"" %% ""akka-slf4j"" % ""2.5.0""`

This isn't actually a slf4j implementation, it's just an akka interface to slf4j. A slf4j implementation is like logback


    It is just like 10 lines of code, not a big deal, but I'd prefer to avoid that

How is that 10 lines of code? It should be 1 line.

    8- The program is still not exiting properly despite a call to `actor.terminate()`. Why ? I don't know. Still no solution found.

actor.terminate()? Or system.terminate(). This could be any non daemon thread that still exists. take a thread dump and see which threads those are",1536095770.0
syamaoka,"Apache http client library is another option, which is not actually scala library but java one. 

[https://github.com/apache/httpcomponents-client](https://github.com/apache/httpcomponents-client)

I used the library for my previous scala project and it worked excellently.

> 8- The program is still not exiting properly despite a call to `actor.terminate()`. Why ? I don't know. Still no solution found.

I guess you might not close your HTTP client object properly. JVM never stops if there is any running user thread.",1536085938.0
Milyardo,Low effort troll post. Do you have an actual problem with sbt you'd like to address?,1536069286.0
xwinus,"Great job guys, Scala.js is really amazing piece of software.",1536043599.0
dennisvdbij," I took that course last year. There are no videos recordings that I know of. The book (TPL) explained the subjects in the same way as Prof. Odersky did. However, the books goes into more subject and details, and had exercices which were very relevant for the exams and assignments. TPL's author explains the subjects very well.",1536181754.0
,[deleted],1536075470.0
melolife,"Probably header related, maybe `Accept`. Run `curl` with `-v` and then try Akka with some of those.",1535989479.0
rberenguel,"Add

    import akka.http.scaladsl.model._

and

     val futureResponse = Http().singleRequest(Get(uri).addHeader(headers.Accept(MediaTypes.`application/xml`)))

Although unless you need an actor system for any other reason, I'd recommend either using sttp or scalaj-http if you are just going to be creating requests and handling them. They are a bit easier to reason about unless you need to have Akka around for other reasons",1536001571.0
LukaJCB,Have you checked http4s? IMO its simplicity is its biggest selling point. It's fast and easy and gets the job done :),1535977849.0
a1russell,Cask: https://github.com/lihaoyi/cask,1535979622.0
thesuperching,"Flask in Scala [https://github.com/lihaoyi/cask](https://github.com/lihaoyi/cask)

I presume you like Python. You can look Cask author's other librarys, many are python-alike.(requests, ujson, ...)",1535986585.0
alexelcu,"I’m also going to suggest Http4s.

It’s a very light, but awesome library for building web services.

It does so by emphasizing FP and usage of libraries in the FP/Typelevel ecosystem, but the design is modular so you can pick and choose.

The community is friendly too and you’ll find plenty of help.

—

Btw, I worked a lot with Django and it’s not simple, being a framework. Django is more like a Rails-style monolithic, tightly integrated thing.

If you want that, then Playframework might be better for you, but I still recommend Http4s.",1536060911.0
abdolence,Akka HTTP is pretty good. ,1535998770.0
haochi,Scalatra? It’s a lightweight Scala framework.,1535977896.0
Milyardo,"I don't know about Flask, but Django certainly does all those things you listed. I assume from context you want a http library? [http4s](https://github.com/http4s/http4s) a gerat choice for that.",1535995977.0
abonafide,Have a look at Vert.X. It's a simple powerful toolkit that doesn't get in your way.,1536143365.0
teknocide,"It feels like Django has all of those (DI, IoC, wSGI-plug)...

Anyway, you may want to look into this new HTTP-framework [cask](https://github.com/lihaoyi/cask). It seems like might be what you want without getting into particulars (thread-pools and stuff)",1535977859.0
joshlemer,"I am working on improving performance of Maps and Sets in the new collections by experimenting with builders that mutate the underlying tree structures of the hashMap/Set, while building them   
  
https://github.com/scala/scala/pull/7118  
https://github.com/scala/scala/pull/7138",1536029334.0
Seth_Lightbend,"now that Scala 2.13.0-M5 is out the door 🎉, I'm working on:

* publishing Scala modules for M5. [sbt-scala-module](https://github.com/scala/sbt-scala-module) needs some love
* working with library authors to help get their libraries published for M5
* maintenance of the Scala community build, as usual; for example we're now on [newer Play](https://github.com/scala/community-builds/pull/779) and [assorted newer Typelevel library versions](https://github.com/scala/community-builds/pull/775)
* giving my ""Compiler Plugins 101"" talk [at SF Scala on September 11](https://www.meetup.com/SF-Scala/events/254191025/)
* planning travel to Lausanne for an in-person Scala Improvement Process meeting after the Reactive Summit
* setting up some more structure around Scala Code of Conduct enforcement online (working with folks at the Scala Center on this)

",1536100248.0
Philluminati,"I’ve adding memcache to a Play app. The @NamedCache features seem really powerful but I’ve come to accept Play is not designed to mix running both EhCache and Memcache at the same time. Not only that, but EhCache has a global instance per JVM that means I can’t use it without turning off Parallel running in the test suite. So I’ve resorted to not using EhCache at all during the test runs. I tried not loading the Play Modules and doing it all programmatically but there’s a lot of initialisation I can’t figure out and EhCache is apparently written in Java. It’s all a bit less than ideal.",1536132252.0
justinhj,"I finished the 2017 Advent of Code puzzles, and it only took 10 months. 

&#x200B;

Nearly all of the solutions use immutable data. Some use scalaz, Cats and fs2 in various ways

&#x200B;

[https://github.com/justinhj/scalaadvent2017](https://github.com/justinhj/scalaadvent2017)

&#x200B;

&#x200B;",1536960202.0
LukaJCB,"Sure, in your example you compose the `List` functor with the `Option` functor nested in each other.

Two Applicatives can also be composed by nesting them in each other.So for example:

    def getUser(info: UserInfo): Future[Option[User]]
    def getAccount(info: UserInfo): Future[Option[Account]]
    
    case class UserAccount(user: User, account: Account)
    
    Applicative[Future].compose[Option].map2(getUser(info), getAccount(info))(UserAccount)

This will yield a `Future[Option\[UserAccount]]`

Another example where this comes in real handy is when using `traverse`:

    def getAllUsers(userInfos: List[UserInfo]): Future[Option[List[User]]] =
      userInfos.traverse(userInfo => Nested(getUser(userInfo))).value

`Nested` is a very simple wrapper class for exactly this kind of composition.You can check out the documentation here: [https://typelevel.org/cats/datatypes/nested.html](https://typelevel.org/cats/datatypes/nested.html)",1535968368.0
alexelcu,"These pics are meant for being integrated in Cats-Effect’s documentation.

The author is very talented, follow him on Twitter.",1536037793.0
tryx,"I'm really confused by what ""strawman"" means in this context. Usually a strawman would be an unusually weak or contrived definition but these look accurate to me, unless I'm missing something.",1535987457.0
adiscgolfer,"Honestly I can't read Twitter threads in a useful way, even on a modern phone. Would much prefer a blog post.",1535997183.0
squalche,"Just pick one build tool and one IDE/editor and stick with that until you at least know how to actually write Scala programs.

You are not going to be creating major projects from scratch for quite a while. All you need is something that will manage your dependencies, and which you can click/type ""build/run/whatever"" and get a running program.

I'd recommend Intellij and use the maven or SBT plugin, but to be honest, until you need to download and use packages, vim/emacs/notepad and scalac are fine.",1535920281.0
adriaaanm,"My teammates and I use IntelliJ to develop the Scala compiler itself, and really like it! (I lead the Scala team at Lightbend). It's not perfect, and has red squigglies sometimes on more advanced code patterns, like macros and fancy typelevel tricks, but I would recommend avoiding those anyway (at least for the first few years ;-)).",1535979459.0
ukralibre,This is a great idea. SBT is not really good for noobs. Better to use it the simplest way you can. ,1535919935.0
alexelcu,"> In my reading I found many Scala devs hate Intellij

By now a majority of Scala developers use IntelliJ IDEA, because it's the best IDE. It has some quirks, but you get over it and move on.

You can use a plain editor, like Emacs or VSCode or Vim of course. It's better for learning actually. But if you're thinking about installing IDE-like capabilities in these tools, like Ensime, you're not going to be better off than just going with IntelliJ IDEA.

SBT is also the canonical choice at the moment. You could use Maven or Gradle. And we have competitors like CBT, or Mill, but at the moment most Scala projects use SBT. Speaking from experience, it might be slow or confusing at first, but it's one of the best build tools I've ever used, in any language ecosystem.

You can just the compiler for learning of course, no build tool, but it becomes important as soon as you need library dependencies.",1535950399.0
pauljamescleary,"I use IntelliJ and SBT. Most projects I come across use SBT. It is kind of the default for Scala.  I have seen a couple use gradle, can’t say I have ever seen a scala project use Maven YMMV. 

Definitely recommend ammonite for tinkering.",1536005204.0
m50d,"I use and recommend Maven - it's simpler, better documented, and has better IDE integration than any of the alternatives IME. I haven't seen any bugginess with large projects nor anyone claiming that (the main criticism of Maven is that it isn't very flexible, which is true but I find to be more of an advantage than a disadvantage - the build system is not a good place for complex logic IMO. Since your whole problem is overwhelming choice, a build system where there's only one way to do it might help you out).

But as others have said, the main thing is to pick one and work with it. Stop worrying so much about how things build, and start making useful programs. You'll be able to make a more informed choice of IDE and build system once you've got a bit more experience working in Scala and know which things are important to you.",1536066504.0
LPTK,"Now that we're at it, why not also make the `FunctionN` classes extractors as well?
This way, we can have an equivalent to Haskell's [view patterns](https://ghc.haskell.org/trac/ghc/wiki/ViewPatterns#Basicviewpatterns).

Though we already have extractor objects, which diminishes the usefulness of view patterns, it's sometimes very verbose to declare an extractor, especially if it's defined in some nested scope and depends on what's in scope so it cannot be taken out.

So it would be nice if we could write:

    val content = (_:Node).content
    ...
      case ... content(0 | 1 | 2) ... => ...
    ...

instead of:

    object content {
      def unapply(n: Node): Some[Content] = Some(n.content)
    }
    ...",1535941952.0
johnynek,"You might also look at Spire: https://github.com/non/spire/blob/master/core/src/main/scala/spire/math/ULong.scala

If you need something related to math, it will often be there.",1535833833.0
alexelcu,"Nice. Just one suggestion ... can't `Unsigned` be declared as an `AnyVal`? It seems to me that it can and it might avoid boxing sometimes.
",1535830370.0
Herku,/r/yesyesyesyesno,1535733790.0
mudpizza,uuugh. blockchain.,1535732471.0
jackie_pwn_asses,go away blockchain ,1535735282.0
Milyardo,"You should expand your question to at least include what examples you have seen, and why they don't solve the problem you're looking to solve.",1535731401.0
raghar,You mean static annotations? Because normal java annotations are done the same way as on JVM.,1535724733.0
naftoligug,[https://github.com/lihaoyi/cask](https://github.com/lihaoyi/cask) is based on custom annotations,1535726288.0
plokhotnyuk,https://github.com/plokhotnyuk/jsoniter-scala/blob/master/jsoniter-scala-macros/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsonCodecMaker.scala#L18-L25 - used in macro below for tuning of generation of JSON codecs,1535728899.0
havok2191,Check out Jon's library: [https://github.com/propensive/adversaria](https://github.com/propensive/adversaria),1535751831.0
xwinus,"I've created a small library that's nothing but a small annotation macro, producing compilation error if the date parameter set in the annotation is older than the current date: https://github.com/norcane/reminder",1535839179.0
kiviok,thanks to all.,1535963506.0
yodawg32,"Ahh, if this posted a year later I would apply straight away. Good luck ",1535744179.0
SharpesDoomBar,"How big is your team, how big is the London office? How do you find the culture? Snap doesn't have the greatest reputation for being a good place to work, is the London office different? ",1535802360.0
daron_,Is it onsite?,1535785635.0
missingfaktor,Do you sponsor visa?,1535810695.0
dominodave,Would you be okay with SF based remote?  I've been working with computer vision tooling and creative rendering systems in scala for the past year on a project that sounds similar.,1536046905.0
plokhotnyuk,"Stats from Kyiv, UA: https://profile.codersrank.io/user/yarulan

Scala: 467/1555/214668

Kotlin: 240/886/99885",1535729687.0
Storini,Markup/rendering looks hosed...,1535665870.0
silkroad_throwaway,"I'm a little confused by the suggestion that side-effects work better with lazy evaluation. I was under the impression that the two were essentially mutually exclusive, because in a stateful environment a lazily evaluated expression could evaluate differently at different times.",1536643241.0
alf239,"I would go with ""no"" for the main question of the article; it is not a good sales pitch. It's long (I needed two attempts to reach the end); it goes in circles about how bad Java is (still, it's out there in the wild, and feels fine, so are those problems **that** important? Maybe they are, I don't know, but maybe not), and then there goes a standard description of what FP is.

​

But that's not the point. For a *move* to Scala, one needs to understand the **current** process, and the **current** problems. If it's a pitch for a company, what is the pain? Why would one even bother switching to anything? The ""managers"" (they're always there, those pesky managers) have raised a point: *“If we start using Scala, we need to validate it with the company hierarchy first. To find Scala developers is more difficult than Java ones”* — and this point is reiterated, *""it’s already hard to find Scala developers: therefore it‘s a risky bait,""*— but still not addressed.

​

Finally, the conclusion: *""I think going to Scala is the best step Java developers can do""*— our imaginary managers are of course convinced by now. Of course, let's do what's good for developers, what else company is supposed to do?

​

So, alas, you're preaching to the choir and *ignore the very people you were about to sell to.*",1535629072.0
DanielShuy,"Very well raised points. I just wanted to add another point regarding performance - sometimes code written in Scala can even outperform the same code in Java, due to lazy evaluations.

I've been trying to introduce Scala to my friends/colleagues, but most of them feel that its too big a jump from Java, so I've kinda resorted to introducing Kotlin first, to give them a taste of some of the more basic Scala features, before introducing to them the more advanced features in Scala.",1535597987.0
Seth_Lightbend,keep an eye on [https://github.com/scala/make-release-notes/blob/2.13.x/projects-2.13.md](https://github.com/scala/make-release-notes/blob/2.13.x/projects-2.13.md) to track availability of libraries for M5,1535725115.0
joshlemer,"Hey sorry for having to remove this but this is in fact a scala forum, so kotlin specific articles are off topic. Thanks.",1535550925.0
rberenguel,"It's more like it lacks the relative salary size (context: from Barcelona, working part remote in London, having been offered many Scala positions in Barcelona and Madrid)",1535555441.0
johnatanb,"I'm spanish and I was looking for decent Scala-related job in Spain for 2 years (about 4 years ago). Everyone was like ""uh, if you know Scala, you can do Java, don't you?"". And salary mostly was mediocre of course.

In the end, I got network engineering job on Costa Blanca (don't ask) and suddenly I'm very happy with it. Though I still love Scala and use it in my small projects.

I'm really happy that Scala is finding its way into Spain.",1535572572.0
a2549229,Every country in the world lacks scala devs man. Quite hard to hire :(,1535629789.0
stringsfordays,From what I hear pay in Spain is laughably low for software engineers. ,1535637882.0
kininja08,"Apparently my company has an incredibly difficult time finding Scala devs here in New York City! I think it's a combination of most startups using Ruby/Rails, or NodeJS, and  other enterprise level jobs are still in Java. Most of the mobile positions are Swift/Kotlin as expected. So it's a combination of finding people and also availability of Scala roles.",1536104886.0
volpegabriel,Short answer is `flatMap` once and pass the dependency as a parameter at construction site (eg. before invoking `main`). The concept of sharing state in FP is a common problem that has a very simple solution. I wrote a blog post about it: [https://typelevel.org/blog/2018/06/07/shared-state-in-fp.html](https://typelevel.org/blog/2018/06/07/shared-state-in-fp.html),1535534778.0
dehun,"you can have [https://scalaz.github.io/scalaz-zio/usage/ref.html](https://scalaz.github.io/scalaz-zio/usage/ref.html) as somethingToReuse val in your tokenizerIO.

and do lazy init in tokenize.

In here [https://scalaz.github.io/scalaz-zio/usage/ref.html#compare-and-swap](https://scalaz.github.io/scalaz-zio/usage/ref.html#compare-and-swap) you can see how it is first get created and then used from another functions.

​

​",1535533605.0
fommil,"btw, you don't need to type \`IO.syncException(...)\` you can just use \`Task(...)\`

&#x200B;

if you need to do some effect on construction, put it on the companion's apply method and return \`Task\[Tokenizer\[Task\]\]\`",1535542430.0
m50d,"> Now let's say that my impure code needs to initialize an object and I want to re-use it between each call for performance reasons. Creating this object is effectful.

The purpose of using something like `Task` is to separate your business logic from your implementation plumbing, so depending what kind of object this is and what kinds of effects creating it has, you could come in at a number of levels.

If it's internal to the implementation of your tokenizer and that creation is simple/direct enough to be obviously correct, I'd say it's fine to just perform the effects as part of instantiating your tokenizer implementation. If instantiating your tokenizer is complex enough that you want to treat it as its own piece of business logic (with its own tests etc.) then as /u/fommil says you can use `Task` for that code as well, though personally I'd prefer to keep a clear distinction between the things that run at application-start time and the things that run at request-processing time. (You may want to interpret both into `Task` ""at the end of the world"", but you want the distinction most of the time when you're working on the code, IME).

At the other end, if the caching is something you want to be visible in your business logic then most `IO`-like types provide safe cache constructs. ZIO seems to only have a primitive `Ref` available but you could implement a cache on top of that.

Ideally you might want to have a high-level implementation that implements the caching, implemented in terms of the lower-level interpreter (that interprets into `IO`) and a `Ref` for the cache itself. So you might have an implementation of the interface that used a free applicative for `F`, that you can then analyze to gather and deduplicate all the requests from, a la fetch (or haxl, in Haskell). Then you can swap out the implementation when testing etc., using both the caching and the direct version as appropriate.",1535732710.0
ukralibre,"I tuink the first resource is your company code. You cannot bring your rules to the established team, better start off with their recommended reads.",1535468584.0
Mosho1,"I'm completely new to Scala, so take this with a huge grain of salt, but RealWorld is usually well regarded:

[https://github.com/gothinkster/scala-play-realworld-example-app](https://github.com/gothinkster/scala-play-realworld-example-app)",1535481087.0
colindean,"Follow the established conventions of the existing code. Absent that, I tend to keep related classes, traits, and objects in the same file until they get past a certain SLOC size that feels like they should be a separate file for the sake of readability. 

The exceptions:

* case objects or case classes that refer to a sealed trait _must_ be in the same file as the trait.
* helper objects (objects with the same name as a class) ~_must_ be in the same file as the class. The sole exception is when it gets to be HUGE – like more than 1,000 lines – in which case it's probably appropriate to refactor it into smaller units.

Think of it like this, as well: You're not going to be wrong if you structure it like Java. Java in Scala syntax still ""better"" than Java. The annoyance will be only with those who want ""everything"" in one file.",1535478480.0
pauljamescleary,"I would check out [https://github.com/pauljamescleary/scala-pet-store](https://github.com/pauljamescleary/scala-pet-store)

&#x200B;

I am the author, so this is a little self-serving.",1535635851.0
m50d,"It's worth noting that Scala is generally easy to refactor automatically/safely since you tend to make stricter use of the type system than in Java. So there's less need to get the code layout right first time and ensure every class starts in the right place; rather it's fine to start by putting everything in one place and then split up classes/packages/projects as they grow too unwieldy. You definitely want to avoid any kind of ""every business area needs these 4 layers"" structure; rather let the structure of the code in each area reflect the requirements in that area. Or put another way, when you see a pattern in your code that's usually a sign that there's a higher-level common structure that you could factor out.",1535723660.0
Seth_Lightbend,I hope this will help people interested in participating in the open source effort around Scala get oriented and get started.,1535691343.0
joshlemer,Reposting because the previous post mispelled the speaker's name :-),1535409166.0
AlexITC,"From my experience, I know what you mean, sometimes it could be far from easy to start contributing to OSS projects and I'm willing to help.

At the moment, I'm actively maintaining 3 projects, they are far from popular but if you like any of them, I suggest you to look at them and ping me on [gitter](https://gitter.im/AlexITC) in case something interest you, I would be happy to help you to get started (in case the docs aren't enough) or even, create tickets for you to work on.

- [Crypto Coin Alerts](https://github.com/AlexITC/crypto-coin-alerts) is a web app for notifying users with events related to the cryptocurrency world, I have some interesting features to build, also, the documentation should give you a general overview.
- [XSN Block Explorer](https://github.com/X9Developers/block-explorer) is a UTxO based block explorer (again, cryptocurrencies), there are a lot of improvements to do here, you can start looking to the open tickets.
- [playsonify](https://github.com/AlexITC/playsonify) is a micro framework / library to build REST APIs on top of Play, there are certain useful things that I built that could be shared among other frameworks and I'm considering to start splitting the pieces.
",1535383950.0
Avasil2,"[Http4s](https://github.com/http4s/http4s/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) has few labelled issues that might be good starting point.
    
[Frameless](https://github.com/typelevel/frameless/issues/164) has a lot of straightforward issues and it's a solid way to polish/learn Spark and Shapeless stuff.
    
In my opinion even just asking on gitter might give you a good direction. It is probably harder to start contributing to more mature projects because they usually either don't have a lot of work planned or it's too advanced. Nonetheless, good first issues happen from time to time so if you really like specific project I recommend to track what's going on and something will come up eventually. :)
   
Also, have in mind that giving feedback, writing blog posts, documentation, doing workshops, helping out other users on gitter etc. are all great ways to contribute.",1535388959.0
sake_92,"I'm still waiting for first contributor to https://github.com/sake92/hepek 😁 It is very simple project. You can contribute whatever you'd like, new JS/CSS frameworks, RSS feed helpers etc. Welcome! If you need any help, join gitter channel.",1535385447.0
KagakuNinja,"I hear you. I'm a 5 year Scala veteran, yet found a supposed ""good issue for newbies"" of the Scala library to involve a confusing tangle of micro-traits parameterized by lambdas.

Now I am back to full time work and no longer motivated to help.",1535397149.0
hyperforce,We should make one!,1535392554.0
JoanG38,[https://github.com/scalacenter/sprees](https://github.com/scalacenter/sprees),1535460354.0
know_not_much,"Thanks to everyone who responded to this thread. Sorry if I gave the impression that I was trolling. I was not looking for open source projects to contribute to. I already have a long list of projects to which I want to contribute to. The problem is that despite good intentions I can't contribute to those projects.

So here is a proposal. Is it possible that every major Scala open source project say (SBT, Cats, Http4s etc) do a yearly 1 hour new-hire orientation event. This can be advertised via twitter and reddit and recorded and published on youtube for future viewing.

I always feel that using CATs vs contributing to CATs is two very different things. this 1 hour event should be dedicated to providing the minimum information needed by someone to start contributing to CATs. (mind you that CATs is just an example here).

I think Seth did a talk already on the Scala compiler (thanks for posting that here). I guess we need something similar for other big libraries like SBT, Cats, ScalaZ etc etc.

(Edit: I believe ScalaZ library already did that. I wonder if the material of that event is available for view/reference offline).",1535477874.0
fommil,"ENSIME has quite a detailed one [http://ensime.github.io/server/contributing/](http://ensime.github.io/server/contributing/)

&#x200B;",1535395531.0
Seth_Lightbend,"I've tried to provide something like this for the Scala organization (which includes the compiler, standard library, language spec, websites, modules, and so on) in my “You Are a Scala Contributor” talk. Video and slides here: [https://na.scaladays.org/schedule/you-are-a-scala-contributor](https://na.scaladays.org/schedule/you-are-a-scala-contributor)",1535389570.0
know_not_much,"May be I should have worded my original post more carefully. I meant a ""mainstream"" Scala OSS project. ",1535387875.0
Arisngr,"As someone coming from a Python background, I am thoroughly confused as to how packages work in Scala (and I guess the JVM ecosystem in general). I'm learning Scala in order to learn [Figaro](https://www.cra.com/work/case-studies/figaro), a probabilistic programming language, and to get my hands dirty with functional programming. And online resources explaining package management are scarce or really counter-intuitive for me. Could someone please give a quick rundown on the process of installing and importing packages in Scala? Do I always need to use the sbt? And if so, how on earth does that work anyway?

&#x200B;

Thanks!!",1535810080.0
HannesHendrik,"Is there a short-circuit ternary operator?

I have installed scala 2.12.6, and tried the following

    ❯ sbt console
    [warn] No sbt.version set in project/build.properties, base directory: ...
    [info] Set current project to zeppelin-notes (in build file:...)
    [info] Starting scala interpreter...
    Welcome to Scala 2.12.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_102).
    Type in expressions for evaluation. Or try :help.

    scala> val myVal = null
    myVal: Null = null

    scala> if (myVal == null || myVal.equals("""")) Seq() else myVal.split("","")
    <console>:13: error: value split is not a member of Null
           if (myVal == null || myVal.equals("""")) Seq() else myVal.split("","")

I would have expected `myVal.split("","")` to **not** be evaluated, but obviously it did.

I know that the condition really evaluates to true, since I also tried:

    scala> if (myVal == null || myVal.equals("""")) 1 else 2
    <console>:13: warning: comparing values of types Null and Null using `==' will always yield true
           if (myVal == null || myVal.equals("""")) 1 else 2
                     ^
    res4: Int = 1",1535377754.0
vishbar,"This might be a dumb question and may betray a lack of understanding, but what is the idiomatic way of specifying operations should (or could) be run in parallel when writing in a tagless final style? For example, if I have List[F[String]] and I want to convert it to F[List[String]], how can I specify this to happen in parallel?

I've tried to use the .sequence on the Traversable on the using the Applicative on F, but it happens sequentially when my effect type is a Monix Task or Cats Effect IO. I've read Task.gather can do this, but I don't want to ""pollute"" my core program with knowledge of the effect type and would rather keep that as far to the edge as possible. ",1535380536.0
naked_number_one,"Akka question. A have a bunch of workers which pulls job from master by sending JobRequest message. How should I initialize workers, so they start pulling job. How to ensure they keep pulling jobs after failure?",1535391872.0
scalahunt,"In JDG's video [FP to the Max](https://www.youtube.com/watch?v=sxudIMiOo68) he defines a `Random` trait, a companion object and then there is another `nextInt` inside the app, that nextInt on an implicit instance of Random.

The relevant lines in this gist: [https://gist.github.com/jdegoes/1b43f43e2d1e845201de853815ab3cb9#file-fpmax-scala-L65-L71](https://gist.github.com/jdegoes/1b43f43e2d1e845201de853815ab3cb9#file-fpmax-scala-L65-L71)

My question is: why having this external \`nextInt\` is desirable? It seems like unnecessary boilerplate. The code that needs this capability might as well changed from:

`def gameLoop[F[_]: Program: Random: Console](name: String): F[Unit] =`

to

`def gameLoop[F[_]](name: String)(implicit p: Program[F[_]], r: Random[F[_]], c: Console[F[_]]): F[Unit]`

and invoke `nextInt` directly on the `r` instance.

What am I missing?

&#x200B;

&#x200B;",1535602137.0
dmoliveira,"Hi, 

Let's assume I want to create a reddit or whatever clone with a plain file backend instead of a database. Let's assume each thread will be placed in a different file. Does it make sense to wrap a text file which will be appended by many concurrent users in an Akka actor with an AsynchronousFileChannel instance?",1535975512.0
vwibrasivat,"How do I create a spontaneous Set[A] from two items and an A* ? 

Code follows which does NOT compile , but you should be able to see what I'm trying to do. I need to take a general iteratable and spontaneously convert it into a Set[A] inline.


final class Boxing[A]( max  :Int , ropes: Set[A] ) {


/** Auxiliary constructor **/


def this(max: Int , firstItem : A , secondItem:A , otherItems : A* ) =


this( max , 
{otherItems ++ firstItem} ++ secondItem );


// Will not compile.  What needs changed?

}

",1536086850.0
vishbar,"So, a quick followup to my [previous question](https://www.reddit.com/r/scala/comments/9aofbi/got_a_quick_question_ask_here_august_27_2018/e4x1zwk/)

I am able to run things in parallel via tagless final using Cats's Parallel typeclass. However, when using Cats Effect or Monix, I can't use Parallel[F, F]; instead, each use a newtype (IO.Par/Task.Par) for the applicative, so I have to carry around an additional type argument. My function ends up looking like:

    def doStuff[F[_], G[_]](implicit P: Parallel[F, G]): F[List[String]] = 
        Parallel.parSequence(List(firstThing, secondThing))

I end up having to thread this additional type argument throughout my entire program.

I tried defining a ParSequence typeclass like this:

    trait ParSequence[F[_]] {
      def parSequence[T[_] : Traverse, ?](s: T[F[?]]): F[T[?]]
    }
  
    object ParSequence {
      def apply[F[_]](implicit P: ParSequence[F]) = P
  
      implicit val ParSequenceTask: ParSequence[Task] = new ParSequence[Task] {
        override def parSequence[T[_] : Traverse, ?](s: T[Task[?]]): Task[T[?]] =
          Parallel.parSequence[T, Task, Task.Par, ?](s)
      }
    }

which works, but it seems like a lot of duplication, especially if I need more stuff from the Parallel typeclass.

Any suggestion as to an elegant way to solve this, or am I best off just biting the bullet and threading that extra class through?",1536107019.0
AlexDiru,"What was the design choice behind not allowing temporary variables in the constructor of classes? 

&#x200B;

I understand a few ways around it, but for me it still seems like it would be a lot easier to have temporary variables in the constructor then have to create workarounds.",1535440908.0
blanonymous,"I would like to build a REST service (just CRUD functionality) in a functional way. I finished part 2 of the red book and tinkled around with defining my own algebra in other projects, I kinda followed their approach for library design. But now I don't know how functional I'm gonna be if I don't use IO and stuff because this is contained in chapter 4. Should I just keep trying to build the system or continue with the book? Also I would like to use Doobie and Akka HTTP, are these enough or is there some good library for JSON marshalling? ",1535695806.0
themoofinman,"Having an issue figuring out what a good way to sanitize a string with a set of characters that need replacing. For example, below, if I chain a bunch of `replace(a,b)` together, it will do the trick, but it's not very elegant. Any advice on away to clean this up in a logical way?

```
  def sanitiseName(name: String): String = {
    val replacedName = name.replace(""\\"", ""-"").replace(""/"", ""-"").
    replace(""*"", ""-"").replace(""["", ""-"").
    replace(""]"", ""-"").replace("":"", ""-"").replace(""?"", ""-"")
  }
```",1535802968.0
tombraideratp,"I have question regarding Scala Promise .

I want to assign prmise.future to some other future task which matches with promise.future. But getting error . Same thing is working if used with promise.completeswith(future)

&#x200B;

See code below:-

  
`var  p = Promise[Option[User]]()`  


`// not working`  
`p.future= userRef.get().map(snapshot => snapshot.getValue(classOf[User])) // gives future[Option[User]]`  
`p.future.foreach(x=> print(x.get.email))`  


`//working`  
`var a =userRef.get().map(snapshot => snapshot.getValue(classOf[User]))// gives future[Option[User]]`  
`p completeWith(a)`  
`p.future.foreach(x=> print(x.get.email))` ",1536425001.0
moschles,"What are the correct imports for Unit Testing keywords for , 

    fail(""a message"") 
    
    x should be > 100

I have tried import org.scalatest.Matchers._     

import org.scalatest.Assertions._

import org.scalatest.FunSuite  

import org.scalatest.MustMatchers._

And I also extended my testing class with  

    class MyTestingClass extends FunSuite with BeforeAndAfterEach { 

Absolutely none of the above strategies work.  ""should"" is perpetually highlighted in red as unresolved.

The fail(""a message"")  resolves  but underlines a squiggle in my IDE.   The reported error here is  

    Method apply is not a member of type Nothing. Method isDefinedAt is not a member of type Nothing.


Googling these error messages verbatim goes nowhere.  The bulk of unit testing websites just tell lies about which imports match unit testing keywords.

Your thoughts?

",1536449959.0
JohnTheB0mb,"Since I liked programming in Scala, for my Google interview, I asked them to give me a Scala / functional style question. The Scala functional style question that I got was as follows:

&#x200B;

You have two strings consisting of alphabetic characters as well as a special character representing the backspace symbol. Let's call this backspace character '/'. When you get to the keyboard, you type this sequence of characters, including the backspace/delete character. The solution you are to implement must check if the two sequences of characters produce the same output. For example, ""abc"", ""aa/bc"". ""abb/c"", ""abcc/"", ""/abc"", and ""//abc"" all produce the same output, ""abc"". Because this is a Scala / functional programming question, you must implement your solution in idiomatic Scala style.

&#x200B;

I wrote the following code (it might not be exactly what I wrote, I'm just going off memory). Basically I just go linearly through the string, prepending characters to a list, and then I compare the lists.

&#x200B;

Pastebin: [https://pastebin.com/wHfRRxaj](https://pastebin.com/wHfRRxaj)

&#x200B;


    def processString(string: String): List[Char] = {
      string.foldLeft(List[Char]()) { case (accumulator: List[Char], char: Char) =>
        accumulator match {
          case head :: tail => if (char != '/') { char :: head :: tail } else { tail }
          case emptyList => if (char != '/') { char :: emptyList } else { emptyList }
        }
      }
    }
  
    def solution(string1: String, string2: String): Boolean = {
      processString(string1) == processString(string2)
    }

&#x200B;

So far so good? He then asked for the time complexity and I responded linear time (because you have to process each character once) and linear space (because you have to copy each element into a list). Then he asked me to do it in linear time, but with constant space. I couldn't think of a way to do it that was purely functional. He said to try using a function in the Scala collections library like ""zip"" or ""map"" (I explicitly remember him saying the word ""zip"").

Here's the thing. I think that it's physically impossible to do it in constant space without having any mutable state or side effects. Like I think that he fucked up the question. What do you think?",1536468230.0
avatarwanshitong,"I started the book at the beginning of the summer, and while I'm not as diligent as I was for the first ~2 months I'm at the chapter on IO and figured I might be able to help.  Here's what helped me move quickly: 

1. Follow along on the GitHub.  I started each chapter by copying (at least mostly) the code under the <chapter>/exercises folder.  One of my issues with the text was that it was hard for a beginner like me (I had very limited Scala experience in the past) to understand what the structure of the exercises might look like, or what import statements they might be using, just from the snippets printed in the book.  Looking at the outline of each chapter's code helped a lot with that.

2. After doing some set of problems, check the GitHub for the answers.  I don't consider this cheating because I only did so after giving each section my best shot - either completing the problems or spending ~1 hour (give or take depending on the difficulty of a problem) trying to figure it out.  Doing so helped me a lot because there are some things in the book that they don't lay out explicitly but you can still gleam from reading their source code.  Since this is a problems-based book, they won't print the answers later in the text so it can be hard to learn what you did right/wrong just from the theory and short examples that they actually do print.  I would also copy the solutions alongside my own code with some comments marking each one as mine or the book's, just so that when I looked back on my work I had some more info right there.

3. After you finish a section, copy the entire <chapter>/answers files into your own project.  In the following chapters, whenever you have to import a previous chapter import from the book's copy instead.  The reasoning behind this is that each chapter will assume you have completely finished and debugged each previous chapter and heavily rely on that code.  If you miss a few exercises, or find that you just can't finish one but still want to move on for now, then doing this will prevent you from being blocked in further chapters.  If you do this then you can also go back to previous chapters and edit/play around with old code without worrying about breaking something in a later chapter.

Those are the important bits for me.  The red book wasn't my first look at FP, but it was my first dive into Scala so it's possible if you're in the reverse situation this might not work best for you.  Hopefully this is helpful regardless.
 ",1535337198.0
beezeee,"my .02 is do FP for mortals or advanced scala with cats first. both take a more practical approach and at least for my learning style got me going faster than the red book.

red book is a bit more abstract and a bit more steeped in theory, and could make a better 2nd book if you haven't gone through those others yet.",1535331186.0
softiniodotcom,"Have you seen this companion book to the Red Book: 

[https://www.amazon.com/gp/product/1508537569/ref=dbs\_a\_def\_rwt\_bibl\_vppi\_i1](https://www.amazon.com/gp/product/1508537569/ref=dbs_a_def_rwt_bibl_vppi_i1)

&#x200B;",1535429068.0
kai10k,"i started by implementing every exercise under one  project, companion with [lihaoyi's utest](https://github.com/lihaoyi/utest), which gives me instant feedback. Scala has quite a few unit test frameworks that one can choose from, the point is instant feedback of unit test makes the exercises pleasant and rewarding, WARNING, after a few days it can even get addicted to FP ;-)",1535435912.0
deds_the_scrub,You could also start taking the coursera course: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1). This maybe a good way to put the skills you're learning into practice.,1535350898.0
dehun,"Hi. 

I have created a small course for learning basic functional programming ideas in scala - [https://github.com/dehun/learn-fp](https://github.com/dehun/learn-fp) 

It's learn-by-doing course - you have to implement functors, applicatives and monads from scratch and pass all unit tests. 

This would be probably an additional resource that will help you to look at the problem from different angle.",1535383269.0
Storini,"Can you pair up/collaborate with someone else? Being able to kick around ideas verbally is a godsend in this sort of situation. Now, how you might acquire such partner/s is an open question... post a tweet, ask here?",1535494427.0
teknocide,"You can do something like this:

    trait ModelRepo[M <: GenericModel] {
      def checkUnique(model: M): Boolean
      def insert(model: M): Option[M]
    }

And then have your generic helper defs take an implicit repo that matches the model:

    def insert[M <: GenericModel](model: M)(implicit modelRepo: ModelRepo[M]): Option[M] = modelRepo.insert(model)
    def checkUnique[M <: GenericModel](model: M)(implicit modelRepo: ModelRepo[M]): Boolean = modelRepo.checkUnique(model)

Your `ModelRepo` instances should be instantiated as a part of your application bootstrap if you need them to be dynamic, or could be members of an `object ModelRepo` companion object if they can be static.

If the only thing that differs between the ModelRepo instances is stuff like name and such you can keep most of the implementation in the trait and add an extra `def name` member to fill in the blanks.",1535355142.0
Leobenk,"If you have access to ModelA and ModelB , you can store a link to modelBRepo. If this is an `object` you can pass it using `.type` otherwise you can implement a parent class for both Repos. ",1535331585.0
nutsack_dot_com,"I've done this sort of thing before using something my coworkers and I called ""double dispatch"":

    trait DAO {
      def checkUnique(ma: ModelA): Boolean
      def checkUnique(mb: ModelB): Boolean

      def insert(ma: ModelA): Option[ModelA]
      def insert(mb: ModelB): Option[ModelB]
    }

    trait GenericModel[M <: GenericModel[M]] {
      def checkUnique(dao: DAO): Boolean
      def insert(dao: DAO): Option[M]
    }

    class ModelA extends GenericModel[ModelA] {
      override def checkUnique(dao: DAO): Boolean = dao.checkUnique(this)
      override def insert(dao: DAO): Option[ModelA] = dao.insert(this)
    }

    class ModelB extends GenericModel[ModelB] {
      override def checkUnique(dao: DAO): Boolean = dao.checkUnique(this)
      override def insert(dao: DAO): Option[ModelB] = dao.insert(this)
    }

Note that I haven't compiled this, I just sketched it out.  

The downside is that it's hard to factor out the implementations of `checkUnique` and `insert` in `ModelA` and `ModelB`.  The repetition is minimized, though.  This avoids pattern matching on `GenericModels`, but that feels like 6-and-half-dozen.

The upside is that if you have a `GenericModel` (or a bunch of them) and a `DAO`, you can insert and check for uniqueness, without having to inspect the actual types of your `GenericModels`.

This was smooth in a system where we had a bunch of messages coming in over the network, and couldn't know at compile time that they were anything more specific than some base type (like `GenericModel` here).  We also had a ""processor"" that could handle any type of message (like the `DAO`) here.",1535402635.0
vagtasticle,"I think an easy way would be to just have a def repository in your trait. Then model a and model b implement the repository then you would not have to do special logic per model in the base class

Another option if you don't want that type of logic in your model classes, is that you could also pass in the repo as another parameter. You could make it implicit so you don't need to pass it around always.",1535346289.0
depleteduraniumftw,"https://projects.spring.io/spring-data-jpa/

Why reinvent the wheel?",1535339335.0
BarneyStinson,I don't understand - you want to take an expensive course twice and then do some tutorials? ,1535319354.0
m50d,Personally I find there's no substitute for doing; particularly if we're talking about an expensive course I would see how far you can get on your own and where you get stuck. But you presumably know how you learn best. ,1535361140.0
bdavisx,"$11,000??? How about buy the red book (Functional Programming in Scala) and one of the Programming Scala books on the right?",1535323703.0
know_not_much,"I had the same question. http4s now has very good examples. I followed the examples and whenever I got stuck I approached the gitter channel. I was able to learn the library easily with this method.

https://github.com/http4s/http4s/tree/master/examples

Also have a look at these two talks

https://old.reddit.com/r/ScalaConferenceVideos/search?q=http4s&restrict_sr=on

If you have difficulty in following examples DM me. I'll walk you through a complete working example. ",1535382912.0
pauljamescleary,"https://github.com/pauljamescleary/scala-pet-store

Not a road (but working on that) but can show a sample setup",1536005956.0
killermouse0,This is the only scala kernel for jupyter I actually managed to get going. Forever grateful to the author! ,1535305015.0
yang_bo,"I created some Docker images for `almond`:

 * https://hub.docker.com/r/popatry/almond-images/

You can run Jupyter with almond kernel from Docker:

    docker run -P popatry/almond-images:almond-2.12.6-0.1.5",1536146495.0
dyltotheo,"Based on some googling I believe the the byte array is compressed with run length encoding. Where each ""run"" is an expressed as an Int where the first byte in the int represents the run-length and the remainder is the number to use in the run. For example:

    Array(0x02, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x01)

would result in `Array(4, 4, 1)`

## For the actual scala code:

`source.map(_ & 0xFF)` : I'm not sure if this is required but it could be ensuring the bytes are the right size. It is taking each byte and bitwise ANDing it against the byte `0xFF`

`.grouped(4)` : subdivides our array into arrays of 4 (4 bytes to an int)

`.map({ case Array(run, a, b, c) => })` : This extracts out all the pieces in the subdivided array getting us 4 the bytes per Int (`run`, `a`, `b`, `c`)

`Array.fill(run)((a << 16) | (b << 8) | c)` This fills an array of the length of our run with the 3 other bytes. We bit shift those bytes up into an integer.

`.flatten`: this takes our array of arrays and joins all the sub arrays into 1 array

`.toArray`: I've called most returned values arrays but in reality they're mostly scala collections. This turns the scala collection into an Array",1535217283.0
joshlemer,"I definitely agree that the personal drama going on is pretty annoying and doesn't look great, but as you can see, removing these posts is not universally approved of. That being said, there are now enough of these posts lately that I don't think there's reason for any more, and will be forwarding any more questions on this topic to /u/m50d 's excellent summary [here](https://www.reddit.com/r/scala/comments/9a11p1/newbie_wondering_about_the_history_of_the/e4utzsa/)",1535398604.0
naftoligug,"I'm not a fan of solving problems by forcing them underground. Sunlight is the best disinfectant. We need to solve problems by recognizing they exist and getting to their root.
",1535275902.0
threeseed,"We just need to be careful not to throw the baby out with the bathwater.

Much of the drama is rooted in technical issues and many of the concerns are legitimate and relevant to the 99.9% of us who are mostly quiet and hidden.",1535236430.0
,"I don't feel it's that big of a problem. Most of the concerns that people have seem to be valid. For example, a library/tool development is halted to wait for Scala 3. The infinity war talk has legitimate criticism. They are not trolls like ""lol Scala suckssss"". Their complaints are insightful to me.  I'd rather not have these people banned.",1535237362.0
amazedballer,Seconded,1535215490.0
KagakuNinja,"I don't think there really is that much drama. There have been some threads about it the last couple weeks, but they are easy to ignore, if that is your wish.",1535224723.0
colindean,Aye. There's not a succinct way to understand the history of the drama and its current state. I say keep that drama outside of this forum as much as possible.,1535221393.0
estsauver,It could also be restricted to 1 day/week or one Auto mod thread.,1535267557.0
monnef,"I  don't really like censorship anywhere and this topic seems to be on-topic of this subreddit. After all it is about Scala community and Scala library developers (as far as I know, but I don't know much about it as explained later).

> To outsiders, it probably makes the Scala community look like a bunch of petty divas, when in reality it’s 99.9% professionals trying to get things done.

If this was true, then why aren't those ""toxic"" threads down-voted to oblivion?

I tried to learn more about this (specifically if/why leading FP devs are leaving FP libraries) and got a lot of responses saying it's not an issue without explaining anything at all. Only post which actually provided some source, some facts, wasn't very encouraging (essentially a quote of threatening of silencing a library developer [which I think did happen] and possibly seizing an open-source library [not sure about this one, got conflicting responses without any sources]).

Maybe get together a wiki page (with sources and quotes) to objectively summarize what actually did happen instead of trying sweep it under a rug again and again?

Edit: Another idea - why not simply add flairs (tags/labels not sure how it is called) support? I have seen in other subreddits that you can filter posts by flair. I don't think r/Scala has that much content, but if you like self-imposed censorship this could work.",1535224887.0
juli1pb,"Seconded too, happy to help moderation if necessary.",1535219159.0
kevinpet,I just downvote anything that isn’t about scala or using scala.,1535239282.0
beezeee,Why not scalacheck?,1535206801.0
elacin,"It's been a while since i worked with scalacheck, but isn't it possible to supply your own `Arbitrary[String]` with less wild data?",1535221300.0
fsanaulla,I'm already create a small [library](https://github.com/fsanaulla/scalacheck-generators) that may help with it. Using scalacheck. ,1535227528.0
paul_f_snively,"There are definitely organizations doing pure FP in Scala. When you're ready to start looking, get in touch, and I'll be happy to make sure you know who to talk to.",1535153849.0
juli1pb,"(most) companies do not care if you have experience in FP or not. What is important is you degree of awareness, if you want to learn and if you are a good problem solver.

My two cents: continue to do projects, read books, do exercise, try to contribute. And you will be fine. Do not demonstrate *only* your Scala abilities but your overall skills in computer science and problem solving.

Source: I was hired at Twitter, had no scala experience and developed lot of Scala code within my first 6 months.",1535158061.0
stsdema28,"100% agree with @juli1pb. 
As a graduate/junior, you should focus on your computer science and software engineering foundation.
If you can demonstrate that you have proper foundations, companies will hire you, no matters if you have previous experience with scala and FP. 

What it is really matter is to show that you are capable to catch up quickly, solve problems and that you can actually learn from the seniors around you.

I moved to a new job working with Scala about a year ago without having any scala experience. (I was using java before)

Personally, I would avoid any company where they ask language specific questions in the interview. 
I am not a Java developer, I am not a Scala developer. 
I am a software engineer.

Obviously, you can always demonstrate your skills with the language or with FP in a coding exercise and they will take that into consideration. ",1535201529.0
ysihaoy,You don't need to read this book to find a Scala job.,1535357676.0
alf239,"The job market is pretty hot for all experience levels. If by ""finishing"" the red book you mean, ""going through all the examples and actually implementing the code,"" you'll be okay with most Scala interviews. 

What's left is the experience and the Java trivia; well, Java trivia is easily covered in a few months by doing mock tests over and over again, as for experience, you'll need your first project. I would try and contribute to a relatively high-profile open source project; that won't be easy, and that'll likely to hurt, but such is the real world: things aren't necessarily easy. As a compensation, you'll have something to show and talk about.

Oh, and I assume you've already written a CV as sent it out to at least 30 companies? If not, try doing that. Or, you can target a specific person in a specific company; never saw that working, but some people say it works for them. Not sure if I believe.",1535150143.0
Philluminati,I would write some non trivial Scala. I’m not sure the book puts together the sort of real production style code you might really be writing because it’s so focused on teaching you things.,1535366950.0
m50d,"I don't believe trying to keep these things secret helps anyone, so I'll tell my perspective. It will be incomplete and one-sided, and the order in which I encountered things is not necessarily the order they happened or came to prominence in, but hopefully it'll give you some idea.

   * The dim and distant past
      * I first hear about Scala as an interesting new language from Martin Odersky, the creator of Generics Java (and, therefore, the author of the Java 1.5 compiler). Apparently, Generics Java had reached the limits of what it was possible to to do in a language that stuck to being a superset of Java.
      * Lift reaches some prominence as the first vaguely mainstream native-to-Scala web framework. It follows a different design from most contemporary frameworks (and enforces this quite strictly) and makes heavy use of symbolic operators. Its founder, David Pollak, is outspoken and unsympathetic to those who disagree or have difficulty learning (""Yes Virginia, Scala is Hard"" is a much later talk but gives an idea of his general ethos); many dislike this attitude, but Lift is, for now, the only game in town.
      * ScalaZ is created at some point by Tony Morris (I don't encounter it until later). It offers many useful general-purpose operations (apparently largely taken from Haskell), to the point where some see it as a ""second standard library"" (a la guava); it also gains some notoriety for heavy use of symbolic names, refusal to include documentation (except for type signatures), and a communication style that ranges from nonconstructive (e.g. Morris' explanation of the removed `Pointed` typeclass on the scalaz website consists of several lines about how it was a bad idea but no explanation of what it was) to downright abusive (I believe the Morris' ""Kevin's tanties"" post to the Scala mailing list, and consequent banning from said mailing list, happened in this era). Since the library is very general and foundational, other libraries begin to depend on it, and even those who dislike the library and/or its community often end up with it on their classpath.
      * Scala already seems to be becoming a magnet for criticism. Much of this focuses on overuse of symbols (in Lift, ScalaZ, and also Dispatch, which is the only native-to-Scala http client library), an arrogant ""this is the right way to do it"" attitude, and a community that's unwelcoming to newcomers. Steve Yegge dismisses the language; Rod Johnson (Spring creator) gives a meandering but negative take. Various rants go viral; ""Scala – 1 Star – Would Not Program Again"" is from slightly later but gives a good idea of the reception Scala is often getting. There's criticism from inside the community as well: Chris Marshall posts a pointed Stack Overflow question about the major, compatibility-breaking rewrite of the collections library in Scala 2.8, titled ""Is the Scala 2.8 collections library a case of “the longest suicide note in history”?"".
   * The incident
      * Scala continues to grow. Alternatives to Lift and Dispatch emerge; ScalaZ remains the only mainstream option for a lot of important functionality. While ScalaZ 7 makes small steps towards alphabetical rather than symbolic names, its community remains unpleasant and many people are unhappy. See [this archived post](https://www.reddit.com/r/scala/comments/4x4wa9/is_it_a_shame_to_use_scalaz/) for various people's takes including mine.
      * Typelevel is formed (I don't know exactly by who, but Miles Sabin and Lars Hupel are the most prominent) as an umbrella organisation for foundational libraries, initially including Shapeless and Spire. (Morris has subsequently claimed that this is a fabrication, but refuses to substantiate his claims and goes on irrelevant tangents when asked to elaborate. This is not unusual for Morris). Typelevel adopts a code of conduct at a time when this is a controversial subject; this particular code of conduct also attracts criticism for some very unclear wording.
      * At some point Sabin sends a message to Morris asking him to step down from ScalaZ and dissociate himself from the project for the sake of the community, with the final phrase along the lines of ""if you refuse I will pursue other plans that are already in place"". In the light of subsequent intents, some interpret this as a threat to have Morris removed as maintainer of ScalaZ; Sabin claims he was only talking about setting up Cats.
      * Hupel announces that ScalaZ has a code of conduct, is part of Typelevel, and that Morris has been banned for violating the code of conduct. Morris is visibly banned from the IRC channel. The code of conduct is rather unclear. Hupel (and subsequently Sabin) gives several contradictory explanations as to what has just happened: first that Morris had obviously violated the code in a linked IRC log (there was no such obvious violation; the code as written only seemed to be about discrimination rather than general unpleasantness), then that he'd violated the code elsewhere (no details given), or that he'd refused to agree to the code and so been pre-emptively banned, or that his ban was nothing to do with the code of conduct.
      * Many ScalaZ channel members express confusion and concern about this unclear code, and press Hupel for details. Hupel disconnects for a month or so, claiming this is necessary for his mental wellbeing. Morris sets up an alternative IRC channel and a fork of the project (scalazeta); the fork README makes vigorous statements about ""restoring the original goals"" of the ScalaZ project, while providing no details of what those goals are (Morris goes on irrelevant tangents when asked to elaborate), but is widely understood to be a reaction to previous events.
      * A few months later Morris is back in ScalaZ, ScalaZ is not part of Typelevel, and *no-one is saying anything about what happened*. Cats exists as a Typelevel project with a code of conduct offering much the same kind of functionality as ScalaZ; it's widely seen as a less-complete knockoff, though sometimes with better documentation.
   * Aftermath and other controversies
      * Several prominent libraries migrate to Cats; some use libraries or code generation to build against both ScalaZ and Cats. For a while ScalaZ development appears stalled while Cats is actively developed and improving; on the other hand ScalaZ is reasonably complete and still offers some things that Cats is missing. Typelevel discussion tends to happen on Gitter under a (still unclearly worded) code of conduct; Scala proper switches to do the same at some point.
      * Odersky announces Dotty, a... new language? Playground for prototyping some features for future Scala? Messaging is unclear and many fear that this will distract Odersky from work on Scala proper. Typesafe renames itself to Lightbend and puts out a roadmap for Scala that seems very focused on Java interop, with effectively a 4-year or more moratorium on new features (Scala 2.12 will be 100% source compatible with (non-experimental) Scala 2.11, containing only Java 8 compatibility changes and internal improvements). Many functional-first programmers are unhappy. Typelevel creates a fork of the compiler offering new features that much of the functional/pure community considers important (singleton types, better type lambdas, better partial unification, better desugaring of `for`/`yield`).
      * Paul Phillips quits work on the Scala compiler, attacks the collections library in particular, creates his own alternative collections library.
      * The typelevel compiler fork mysteriously disappears/is rebooted as a place for incubating PRs onto official Scala. Sabin's implementations of several substantial functional-focused features (in particular, partial unification) are accepted into mainline Scala, contrary to the previously announced roadmap which has also mysteriously vanished.
      * Visible development of ScalaZ resumes, with talk of designs for ScalaZ 8 and a series of documentation/tutorial blog posts from John de Goes. Many wish the community would conclusively pick one of ScalaZ or Cats; some see competition as beneficial.
      * Odersky puts out an RFP for a compatibility-breaking rewrite of Scala collections. While there's a lot of initial interest, it becomes clear that the backwards-compatibility constraints in the RFP prevent resolving most of the issues that functional/purist programmers had (including many of Phillips' criticisms). In the end the lightbend ""strawman"" proposal is the only complete one that meets their compatibility requirements, and is expected to form part of 2.13. It's widely seen as an incremental improvement over current Scala collections, but there are concerns that it represents too little progress compared to the scale of the issues, and that a source compatibility break is too big a cost for the relatively small benefits that will actually be delivered.
      * Lightbend announces that Dotty will become Scala 3. While most like the design of Dotty there is a lot of concern about compatibility with existing Scala, and about Scala 2 getting adequate maintenance and investment in between now and whenever Scala 3 is released.

I think that's most of the things that people hint at and don't talk about; there are plenty of other controversies around e.g. macros but I think they tend to take place more in the open?",1535278352.0
grizzly_teddy,I didn’t even know there was drama,1535148901.0
kailuowang,"I have been maintaining Cats for more than 2 years. I don't think I know the ""history"" much more than you. To me what matters is the principles Cats and typelevel strive for. And arguably as a result, I see a rapidly expanding ecosystem of FP libraries in the last couple of years. There is also a trend of tighter collaboration between Lightbend, epfl and Typelevel the pure FP community. I don't know what could be more important than those two things for FP in Scala.

I hope you will enjoy developing Scala as much as I do, or, at least, you won't be told by someone that you shouldn't. ",1535202103.0
jokasx,"You will have to read everything and try to read between the lines and understand what happened so many years ago... They think that by not just telling the story or the timeline of what exactly happened they are helping it. They aren't. It took me years after following a bunch of people on twitter and conversations here on reddit to have somewhat of an idea of what the hell even happened. Things as is just leave a very bad taste in the mouth for anyone that came after it. Just like you and like myself it leaves us wondering with a huge shadow figure around us, always needing to be careful who you are talking with and what you are saying. It's like there are forbidden words and discourse that we shouldn't be allowed to speak but nobody tells you what exactly you can't speak about. It's very weird and chill effecting.

The TLDR for me is: ignore most of it, get all the information you need from all the useful info around and blog posts and learn all you can about the language. Anything else is overhead. Anyway the holy war seems to be about some conflict that happened and the consequence of it was a bunch of hurt egos and cats as a fork of scalaz. That's the summary I got.",1535152158.0
juli1pb,"First of all, welcome to the Scala community! My sincere opinion is that after looking at it for 10 mins, I believe this is a total waste of time and energy I'd rather invest in learning the language.

In case you are interested in learning more about Scala and what are the great resources, this is the link I give when I teach the language: http://julien.gunnm.org/scala/programming/2018/06/12/how-to-learn-scala-in-2018/

",1535158691.0
emilypii,"It's probably best to just let it go. Maybe some folks from either typelevel/general or #scalaz on freenode would be happy to tell you, but there's been a lot of drama here in the past few days, and it's probably not a good time atm.",1535147042.0
swaggler,"Why? Once you understand Scala well enough, both technically and politically, and if you're an independently thinking person, you'll leave it alone like the rest of us.",1535586870.0
eli_jordan,"Some facts to add to the mix.  
[https://groups.google.com/forum/#!topic/scalaz/EBP\_7sfB2ks](https://groups.google.com/forum/#!topic/scalaz/EBP_7sfB2ks)

[https://groups.google.com/forum/#!topic/scalaz/OjUf4hfjyyw](https://groups.google.com/forum/#!topic/scalaz/OjUf4hfjyyw)

[https://groups.google.com/forum/#!topic/scalaz/EqoQaL\_yH4U](https://groups.google.com/forum/#!topic/scalaz/EqoQaL_yH4U)

[https://groups.google.com/forum/#!topic/scalaz/ki3MjAxD3Bs](https://groups.google.com/forum/#!topic/scalaz/ki3MjAxD3Bs)

[https://groups.google.com/forum/#!topic/scalaz/9X\_putSGoCY](https://groups.google.com/forum/#!topic/scalaz/9X_putSGoCY)",1535637808.0
hyperforce,"> Can someone maybe give a TLDR on what the issue was, who fought who, and what happened in general?

The value returned by this function depends on who you ask. Such is with drama.",1535147906.0
monnef,"Yeah, I would like to know too and preferably got facts together (not just opinions, retold history by one side). I got one response suggesting that even politics were involved. And from the other responses which were lacking any sources and seemed to only discourage me from even asking about the topic, I get a feeling it might be true which is quite sad. I really hate pushing propaganda to movies, series, games and (unrelated to real life politics) communities like this one.

Other thread is suggesting censoring this kind of topics, how ""progressive"".",1535225770.0
joehillen,https://youtu.be/v8IQ-X2HkGE,1535152660.0
m50d,"It's perfectly normal for people to want attention. I'm sure most programming languages will encounter people who trumpet how much they've contributed [1] and then flounce out. The more salient question is why we're paying attention to them.

Scala has always attracted a disproportionate amount of criticism, and I think that's ultimately all that's going on here - people want to attack Scala and here is an issue they can use to do so. I'm not sure why there would be so many anti-Scala folk, but if I had to guess: partly people who took a quick look at the language and were treated rudely by the community (which happened a lot, especially in the early days) and partly because the design is inherently an awkward compromise between OO and functional that will always be subject to (entirely legitimate as far as it goes) criticism from purists on both sides.

[1] Though Scala does seem to attract this strange cult-of-personality style where people talk about their libraries/projects but really emphasize how it was them specifically who made them. I don't know why that is - maybe just an accident of history where early conference speakers did it and later ones followed them?",1535121619.0
SQLNerd,"I think there's a few considerations for this:

- There's a lot of concern about Scala's newest direction w/ Scala 3, and whether that will cause a similar problem that Python 3 did by splitting the community. I'm not trying to stamp my own opinion on this matter, but it does seem to be a common concern among maintainers of Scala libraries and tooling. 
- Writing FP in Scala isn't particularly satisfying when compared to Haskell. There has been a significant number of people that joined the Scala community -> Learned Scala FP via Cats/Scalaz -> Learned Haskell -> Got a job to code in Haskell. There's some truth to Orderskey's joke regarding Scala being a Haskellator.
- Many come into Scala and simply use it for a better-Java. Unfortunately, Java and Kotlin have made significant gains on their feature sets since Scala's introduction. Java and Kotlin also provide a much better tooling experience than Scala, particularly in the IDE. Kotlin also has an advantage of being a first-class Android language, while Scala struggles a lot here. So many users see no reason to continue to use Scala, and gravitate back towards Java/Kotlin.",1535119892.0
BarneyStinson,"You're adding to the noise with this thread, you know. ",1535121553.0
Ironballs,"Are you sure you are not blowing this out of proportion? There has been one ""loud"" exit recently and that was /u/fommil. The other one I can remember was /u/simon_o from last year. 

That's *two*. Within a *year*. Two is, I don't know, your average *day* (or week? IDK) in /r/javascript or /r/golang or /r/python or any language with a large user base.
 
It's certainly natural for people to feel strongly about a language they care so strongly about. Both /u/fommil and /u/simon_o were long-time contributors to the language and its ecosystem. 

I don't know about you, but I'm more scared of the veteran contributors who *don't* say anything, and just leave. It's not anger or frustration that we have to look out for. It's indifference or silence.",1535120042.0
pellets,It’s not that many people. They’re just loud. Also you’re not hearing about every time someone starts learning Scala.,1535128998.0
raghar,"1. Usually, when people slam the door they are leaving not entering.
2. How many newcomers are people with 3k Twitter followers shouting ""I am starting Scala!""? None. Because, to get these 3k followers they would have to build a recognition a way before.
3. People with recognition in FP communities usually have their own opinions and language of choice already.

To balance the ""I'm leaving"" wave you would have to take a lot of known developers from e.g. Java or Kotlin or Go or whatever, convert them to Scala, then make them loud about the fact. But somehow, many people outside Scala and Haskell are not so radical that they blow up because they cannot implement that one thing as elegantly as in this paper they read last night...

And I don't blame the languages. It's more like the people with such personality trait gravitate towards languages that let them express their radical stance the best. But not every Haskell or Scala programmer is like that, is just any of such people stand out 1000x more than 1000 other devs that wouldn't crucify you for not using/using wrong IO monad.",1535122501.0
jackie_pwn_asses,"As someone who is newish to Scala and not aware of the context, it mostly feels like toxic people dramatically ejecting themselves from the community. Scala3 is their excuse to yell ""uh you're the assholes!!!!"" and save face.

Personally, I've had nothing but positive interactions with the typelevel community and I've seen nothing but childish bile and whining from the anti-typelevel crew. So, as far as I'm concerned, all of these people leaving is a good thing. ",1535119900.0
DevIceMan,"> but the amount of people making waves around Scala and splashing water is too big.

If it was only a few people, I'd probably agree with you and dismiss these complaints as purely drama.  However, like you said, it's a lot of people doing this!  Plus, most programmers despise drama.

You really need to be asking **why a large number of people are complaining** and vocal, not dismissing them as drama.

I'd imagine a lot of us in the community used to primarily program in Java, and most of us probably also found Java to be verbose, limiting, and stagnant.  After doing this for several years, we stumble across Scala, which seems to fix many of our major complaints.  They also discover that not only is Scala awesome, but clean/correct functional programming also REALLY powerful.  It's only natural that many people who really ""get"" (understand with depth) can become very passionate about FP and Scala.

After a lot of hard work they finally get an offer for a Scala job, or convince their current employer to use Scala for production.  ""Finally, I don't have to write Java!""  ""I can't wait to work with and learn from other Scala/FP devs!""  Sounds like a fairy-tale ""happily ever after,"" right?

Unfortunately, this is where the story takes a dark turn.  As this person starts to integrate into the team, they start to notice the code is riddled with FP anti-patterns.  People make mistakes, or maybe are new to Scala, so that's forgivable, and addressable with PR comments nudging them in the right direction.

The situation then gets even worse.  Their teammates no only refuse to make simple changes, but they also argue or imply that pure FP is anal and impractical.  They're literally the only person who cares about FP, and nobody else gives a fuck.  The team's refusal to grow and learn basically means they're only unlocking maybe 10% of what Scala & FP has to offer.

I'm fairly confident that most of the ""I'm leaving Scala drama"" is because of stories similar to the above.  This ""drama"" is an expression of passion and love for Scala, but also a lot of frustration around ""writing Java in Scala devs.""",1535189228.0
softiniodotcom,"Scala and its community are wonderful. Super excited about Scala 3.

&#x200B;

See it happens in other programming language communities too: 

[https://www.reddit.com/r/haskell/comments/9awvvw/what\_happened\_to\_bryan\_osullivan\_don\_stewart/](https://www.reddit.com/r/haskell/comments/9awvvw/what_happened_to_bryan_osullivan_don_stewart/)

&#x200B;",1535466731.0
hyperforce,Can you cite such posts?,1535130264.0
craigglespuss,"> Q: How does this book compare to the red book?
>
> A: This book is blue.",1535071414.0
,[deleted],1535108499.0
sudkcoce,Will I start hating Scala if I read it? ,1535089060.0
jmelan,Where is the free PDF link?,1535073906.0
fommil,This is the worst book ever written. The author doesn't have a clue what he's talking about. And he smells.,1535107183.0
emilypii,"Congrats Sam, I'm happy for you and the book is incredible as usual!

I hope it becomes as standard and well-distributed as PFIS, and I imagine it will be, since the context is both more modern, and provides some very juicy stuff previous books left out. 

- Your PR hypewoman

",1535113313.0
,[deleted],1535115297.0
littlenag,"I've had extra reading time recently and purchased and read what was published of the book at the time (what looks like most of chapters 1-7, but missing the now added 8 and 9). I'm very grateful that this resource exists and found it both an enjoyable read and a good explanation of the material.

My only worry is that with Sam leaving the community that it won't be updated. Are there any plans to make sure the content stays fresh/relevant?",1535145248.0
mrt181,When and where will the dead tree copy be available?,1535198751.0
kudah,"> When we introduce a type parameter into an ADT, we call it a Generalised Algebraic Data Type (GADT).
> scalaz.IList, a safe alternative to the stdlib List, is a GADT

LMFAO",1535459044.0
Baccata64,"Although I sympathise with the general point the article is trying to make, the following statement is clearly wrong : 

> Task and IO both have an instances of Traverse.

This would mean that you can transform a `IO[Option[A]]` into a `Option[IO[A]]`, which is simply impossible. 
",1535027299.0
aphexairlines,"Passing around the execution context will get easier with implicit function types:

​

    type Async[T] = implicit ExecutionContext => Future[T]
        
    def httpPost(...): Async[HTTPResponse]
    def parseServiceResponse(httpResponse: HTTPResponse): ServiceResponse
    def callSomeService(args): Async[ServiceResponse] =
      httpPost(...).map(parseServiceResponse)

​",1535028751.0
m50d,"You can reuse typeclasses like `Applicative` with stdlib `Future`, and have the typeclass instance carry the `ExecutionContext`, then it's just as easy as using `Future` directly, and code that's written in `F[_]` style doesn't have to worry about execution contexts at all.

If you believe that precise control over sequencing and parallelism is vital then even `Task`/`IO`/... don't give you the level of control you need - look at the discussions around having `Applicative` instances for these things, where the conclusion was that since in Scala generally we consider computing the same value at different speeds to be equivalent, we can consider running two tasks in parallel and running them serially to be equivalent. That's not an invalid perspective, but it does reduce `Task`/`IO`/... to (semantically) an overly complicated `Eval`. So I think there's something a little hypocritical about the scorn being poured on stdlib `Future` in terms of lawfulness etc.: stdlib future is a perfectly lawful monad if used with pure code, and `Task`/`IO`/... don't provide any nontrivial law-abiding semantics in terms of async/parallelism/concurrency. It *is* true that `Task`/`IO`/... can be used to encapsulate impure code a la `Eval` and stdlib `Future` cannot, but that's really a side issue; if that was what you cared about you'd just use `Eval`. In the context of being a best-effort unprincipled ""run this (presumed pure) code in parallel as much as you can"", *which is all the semantics that `Task`/`IO`/... offer*, both memoization and starting immediately are legitimate choices, may well align better with user expectations, and can sometimes yield better performance.

(I've been playing around in [tierney](https://github.com/m50d/tierney) with the possibility of offering some more concrete serial-versus-parallel semantics that the applicative/monad laws would respect, but that's an experimental project rather than something production-ready).

I do think stdlib `Future` makes some design decisions that were wrong in retrospect; I think the implicit `ExecutionContext` on `map`/`flatMap` is a mistake and implicit function types represent a worrying doubling-down on it. But I don't like the ""`Future` is awful and broken and `Task`/`IO`/... are right"" narrative. `Future` not only works, but sometimes offers better performance than the alternatives; `Task`/`IO`/... represent a tidying up of some warts and a change of focus rather than a massive improvement that everyone should immediately leap to.",1535109634.0
simon_o,"One of the few questions in headlines where one can answer with a resounding ""Yes!"".

Now apply these lessons to collections and you'll understand why they will never be fast, or even remotely competitive with Java streams.",1535029116.0
aeye,"I feel like this was very related to my comment on the last article here (https://www.reddit.com/r/scala/comments/97s9bc/types_never_commit_too_early/e4aqo9d). I have thought a lot about this problem in the meantime since, and for the most part, I agree. In fact, personally, I found that was the toughest part about getting accustomed to Akka (its tight coupling to futures, I mean). 

I think that one advantage (correct me if I'm wrong) of using futures in Akka is because of the dispatcher configuration - by pipelining the results through a single context, we lose the ability to configure different execution contexts for each part of the program, which can have performance implications. Using futures also provides certain message ordering guarantees. If we were to ""deprecate"" futures, we would need some method of addressing these problems. Do you (or anybody reading this) have any ideas for this? I tried working on this a little bit actually, but as /u/SystemFw mentioned, finding meaningful abstractions between Future/Task/IO is not easy in the context of Akka specifically.",1535073163.0
gmartres,"Before starting something new, you should survey what others are doing, here's some pointers in no particular order:

- https://slideslive.com/38908105/six-steps-from-zero-to-ide
- https://geirsson.com/post/2018/03/ide/
- https://slideslive.com/38908727/integrating-ides-with-dotty-the-experimental-scala-compiler
- http://guillaume.martres.me/ide_paper.pdf
- https://www.scala-lang.org/blog/2018/06/15/bsp.html
- http://ensime.github.io/lsp-wg/",1534790653.0
qadet,"Why are you thinking about building a new one? May be just contribute to existing ones?

[http://ensime.github.io](http://ensime.github.io) is already functional and [https://github.com/scalameta/metals](https://github.com/scalameta/metals) is promising and most likely will become the base of the future scala ide.",1534794590.0
,This is a very hard problem. The most promising project in this realm is [Metals](https://github.com/scalameta/metals) so you might check out what they're doing.,1534790037.0
onwuka,Does IntelliJ allow you to build on top of it? Sounds like that would be the quickest,1534830674.0
grillorafael,I use IntelliJ on my day to day work and I have very little to no complains. What are the complains on Idea?,1534840108.0
juli1pb,"For auto-complete, my first guess would be to rely on introspection: as the user build code, it will compile and you can use the latest version that was compiling to suggest names. That would be easy and cheap. The second way to proceed is to build your own parser but this would be more tricky and might not catch all cases.

Also, since you are talking about building a Scala IDE in particular, looking at introspection might not be enough because it will not understand all tricks of the Scala syntax (implicits and all). To catch this, having your own parser might be the only solution.",1534789243.0
Philluminati,"1. First build a text editor
2. Build a file explorer/tabs
3. Work out how to do colour coding of keywords
4. Look at ensime . It’s a server for compiling and getting information about Scala classes and programs. There are plugins for lots of different editors. You could build their stuff into your editor. I use ensime-vim with my text editor. It’s that hard but you’re worried about:

http://ensime.github.io/getting_started/",1534798295.0
jackcviers,"Dragos-scala-mode in vscode and ensime in emacs has these things already. If you are looking to learn, that project needs maintainers at the server level.",1534824066.0
duhace,"You should probably look into the presentation compiler and the [SBT LSP stuff](http://eed3si9n.com/scala-language-server-using-sbt). The work being done right now seems to be going more and more towards using the language server protocol with a build system to get auto-complete, type checking, and syntax checking done. 

If you do end up making your own IDE, I hope you build it in JavaFX. Also, if you go about making an IDE using the above recommendation, you'd really just be making an IDE, not specifically a scala one. Still, would be nice.",1534789225.0
Philluminati,We are less trendy than php?,1534958436.0
alexelcu,"I work on Monix and Cats-Effect and I contribute to Cats too.

These days I don’t even work with Scala at work, I work with Python,Javascript and Java. Not by choice mind you, I love Scala, the problem being that the startup I joined has had no use for it yet and personally I pick projects and people, technologies being low on my list of priorities. I do miss it though.

That said, I contribute to Scala libraries _in my free time_, without being paid for it, even though I do not use Scala at work. 

On celebrities leaving Scala, I don’t get what the big issue is:

1. celebrities are the ones you notice when leaving, but let me tell you, as a project leader I’m noticing new contributors all the time; and a few of them are shaping up to be the next celebrities you’ll talk about
2. people’s circumstances change (e.g. I’m actually one of the outliers for contributing to Scala without using it at work), we change jobs, we also get bored easily

I also know Haskell, learning more about its ecosystem gradually and some day I might end up working in Haskell if I’ll find a good project; would that say anything about Scala? If anything consider that I’ve been using Scala since approximately 2011 and given that I also worked with a dozen other languages in production, the newsworthy part as far as I’m concerned is that I’ve been staying with a language and a community for so long 😉

Personally I think Scala the language and its community have been awesome. Also I’ve noticed several ex-Scala developers that migrated to Haskell and that keep trolling Scala ... but for me that has been a turnoff for Haskell. I put people first, as I believe the ecosystem is the most important part when making a choice. A language like Haskell has plenty to offer, being currently the lingua franca of FP, but it has plenty of drama in it, drama created by some of the same developers that left Scala, just saying 😐",1534833098.0
japgolly,"Not to speak for others but I've been doing FP in Scala for 6 years now and I've published a bunch of FP Scala OSS libs. I'm not going anywhere. :)

Don't believe the hype about mass exodus or Scala 3 being technically doomed.",1534805072.0
raghar,"Well, take any language and you'll see that (unless someone's bills are paid by developing the language), devs migrate from one language to another after several years.

Some people are leaving (ATM I can only think of Sam Halliday). But, it's not like it's a massive migration that will end up with all libraries abandoned. New people will step in and whole things will roll - maybe these parts of ecosystem that were developed by few super-geniuses will slow down, but at some point they would leave anyway (retirement and stuff) so it might be actually beneficial for community to slowly take over their responsibilities and not over-rely on a few people.

What do you understand by loosing momentum? Scalaz is (being?) rewritten to improve the quality of the codebase, Cats reached a stable version, 2.13 is incoming with fixed collections, Akka Actors got Typed, both Scalaz and Cats has quite rich ecosystems, you have a plenty of books and articles available (The Red Book, Typelevel books, Sam Halliday's book), Akka Streams and Akka HTTP are production-ready, more HTTP and streaming libraries are available, several IO libraries to choose from...

Tons of thins happening, if there is something to complain about is that *major developers* are so preoccupied with rewriting IO and introducing another FP-flavour-of-the-month that *less known developers* are more often responsible for writing integrations and utilities.

Things could be better, but everyone is aware of that and they make a slow but steady effort towards improving things. But I understand if it might be too slow (IDE other than IntelliJ, shorter build times, thing with macros, etc).",1534777640.0
Astr4c,"I've been a Scala developer for the last 5 years, both as my main profession and in my spare time. 

This feeling that Scala is dying or that there is something fundamentally wrong with it is 95% due to some noisy preachers in search of proselytes and some people who need to vent their frustrations on the public square; most of these people end up spreading FUD to serve their own ego at the expense of a community which is actually pretty alive and diverse (and couldn't give less of a s*** about their holy wars).

For example, there is this FUD spreading about Scala 3 breaking every library out there (and possibly causing an aniticipated heath death of the universe according to some); to see how it is purely FUD it is enough to notice that some of the people who actually maintain the libraries who are more likely to be broken (e.g. because they heavily rely on macros or implicit resolution quirks) are actually active contributors to the language and regularly participate in SIP discussions or open PRs against the compiler.

I wish there was a way to really show the real proportion between the quantity of people who just get on with their work and are good citizens of the communitiy and those who instead spread toxicity.",1534841105.0
Daenyth,"Everything I've seen points to FP projects in Scala getting bigger with more contributors. There have been developers who have left, but I'm extremely skeptical that this indicates anything bad for the community",1534776967.0
paul_f_snively,"From where I sit (as a professional developer in Scala doing purely-functional programming):

The Typelevel (Cats etc.) ecosystem is doing fine.

The Scalaz ecosystem seems to be getting a shot in the arm, perhaps ironically largely thanks to John De Goes. It remains to be seen how the newly-announced ""scalaz-stream reboot"" fares against fs2, and how whatever else emerges competes with, e.g. http4s and Doobie. But it does seem like there's some motion there, or at least some publicity around it, that's heartening.

That said, it's also true that Rúnar Bjarnason, Sam Halliday, Emily Pillmore, Tony Morris, and no doubt others I'm forgetting have moved on to work in Haskell. To some extent I imagine this just reflects that pure FP in Scala is needlessly painful (just, to me, not so painful that going back to Java or, God help us, Go, or something _worse_ is indicated). But I think it also reflects a dawning realization in industry that pure FP really is a superior approach to imperative/OO programming, and so some uptick in the available Haskell jobs.

Of _much_ greater concern to me regarding Scala is that the Scala IDE for Eclipse is now unmaintained, ENSIME is unmaintained, Metals is still for developers-of-Metals only, and the IDEA plugin still struggles with most FP or macro-heavy code. Scala tooling has always been three-steps-forward-two-steps-back at best; recently it's two-steps-forward-three-steps-back.

I'm also not looking forward to the Scala 3 transition the way I once was. I think the libraries that make professional work in Scala tolerable will take years to adapt, if they ever do.

So I suppose all of this adds up, I would say, to being cautiously pessimistic about Scala at the moment. Which is one reason among several I'm glad to be joining a half-FP-Scala, half-Haskell company soon.",1534777589.0
,"> Is it true that major developers behind FP libraries are leaving Scala?

No, it's FUD and it's ridiculous. FP in Scala has never been stronger, there are more ""major developers"" than ever before, and the language itself is changing in ways that will make FP in Scala easier and better. 

I use and contribute to the Typelevel/Cats ecosystem and honestly is growing so quickly I can't even keep up.",1534789913.0
asheshambasta,"I’m not a celebrity Scala programmer by any standards.  Most of my work in Scala has been closed source albeit extensive.  I’ve been using Scala to implement the entire backend infrastructure at CentralApp.  Even being humble I’d still consider my work in Scala non trivial. 

I’ve spent a good five years with Scala and I’ve learnt a lot from the language and the ecosystem behind it.  However that’s not the reason why I’ve started to think about leaving. 

For me, it has to do with the paradigm of the language.  Somehow FP in Scala always feels like it’s second class.  It isn’t as seamless as it is in Haskell.  Haskell is built from the ground up with FP in mind and it shows.  Scala isn’t and that also shows.  

While Scala has its merits and it is hugely applicable to many problems, and you can come up with elegant solutions in it, it still treats FP as a second class citizen.  I’m personally not swayed by the ‘celebrities’ leaving Scala at all but I can say from my own experience is that the reason to leave is mostly because one starts yearning for a language that puts functional programming at a more accessible distance.  Moreover as you dabble with parts of category theory you cannot help but realise that these ideas are more naturally expressed in Haskell.  It’s very attractive. 

Also while Scala is at the forefront of the merger between imperative and functional programming, the choice is clearer in Haskell.  It’s a matter of taste really.  I got attracted to Scala as I was getting interested in functional programming and as my knowledge and interest progressed, I grew more interested in solving problems applying what I had learnt.  I just enjoyed this process more in Haskell. 

In the end it’s not a good vs bad question at all.  Both languages have their merits and so do their ecosystems.  Just that people entering the Scala world with a keen eye on functional programming will yearn for more naturally expressive functional programming languages.  That’s what has happened, in my opinion, with many of these celebrity programmers. 

Having said that, I do think drastic changes in the language convince me further that I have no wish to write newer services in Scala.  It’s just too much pain.  That has been a large factor in my case as well. ",1534882622.0
m50d,"I don't/can't watch videos, so I can't comment on whatever's in your video.

Turnover happens in every language community for any number of reasons, and is normal and healthy. (You're correct that there are cases where one person leaving could sink a library, but if the library in question was so heavily dependent on one person then it was probably already unhealthy, unimportant, or both).

In terms of ScalaZ specifically, a lot of people and projects have switched to using Cats for the same functionality (mostly for community-politics reasons), so a decline in ScalaZ does not mean a decline in FP in Scala. (My personal experience is that several (people who represent themselves as) ""pioneers of FP in Scala"" are deeply unpleasant; if certain ""major developers"" are leaving because the rest of the community has finally tired of their behaviour (particularly in terms of bullying newcomers) then that's no bad thing, indeed I'd say it's the best thing that could possibly happen for the long-term future of the language).

Scala attracts a lot of FUD for some reason, but I haven't seen any decline in FP libraries (and frankly they're one of the easier things to fix yourself if there ever was a problem with them). I really wouldn't worry.",1534777564.0
pellets,"If you like doing FP in Scala, there's no reason stop doing it. People leave the community from time to time, but that's normal. People join it, too. The worst thing you can do is give up, unless you really feel that's the best course for you.

I watched that video too. He makes some good points and it's sad, but it's not hopeless.",1534797415.0
amazedballer,"No, it's not true.  Cats is doing very well.  There are always people who join and people who leave, and it's completely normal.

Please see https://kubuszok.com/2018/scala-fud-faq-for-newbies/ as well.
",1534816537.0
royci,"Can anyone give insight how much Scala3 is different than Scala2?From the video, he mentioned that it seems like going to be Python3. ",1534795453.0
naftoligug,"Anyone remember the ""Java is Dead"" FUD from not that many years ago? How about the terrifying thought of creating an SBT 1.0?

If there was a stampede (and there isn't), just remember that stampedes are not necessarily evidence of actual danger. [Wikipedia](https://en.wikipedia.org/wiki/Stampede#Cattle_stampedes) says,

>Anything unusual may start a stampede among cattle. Especially at night, things such as lighting a match, someone jumping off a horse, a horse shaking itself, a lightning strike, a tumbleweed blown into the herd, or ""a horse running through a herd kicking at a saddle which has turned under its belly"" have been known to cause stampedes.

Let's not start one.",1534845954.0
dustingetz,"I personally see signals that Scala may have the same problem MongoDB and Meteor.js have, which is that it's amazing up front but the better you get at it, the more you hate it. However for scala this might not be fatal because scala is so strong in enterprise.",1534797531.0
jeffmess,"So much drama. It's like that ex-girlfriend who keeps telling you how much better her new boyfriend is. We get it, he's amazing... ",1534847572.0
hyperforce,Toxic threads for 500.,1534886505.0
simon_o,"Yes it is, but it's not limited to devs of FP libraries though.

I recommend having a look at the GitHub stats to come to a conclusion whether this is just some normal turnover or something different.

As an example, Scala's main contributor did twice as much work in half the time as the person in the second position.

So after paulp's departure, you would need either one new person doing as much work he did, or four persons doing a quarter of his work each, or 10 people doing 10% of his work. The numbers show whether such an amount of contributions materialized.

Same with Sam (Ensime lead) who left, or Simon S. (ScalaIDE main developer) who left, or the JetBrains team lead for the Scala plugin (who left), all within a few months of each other. Have a look at the activity of their projects before/after.

Here are links which might provide some information on why people are leaving: Paulp [1](https://www.youtube.com/watch?v=TS1lpKBMkgg) [2](https://www.youtube.com/watch?v=uiJycy6dFSQ) [3](https://www.youtube.com/watch?v=4jh94gowim0) [4](https://news.ycombinator.com/item?id=8277178), [Sam](https://medium.com/@fommil/scala-3-considered-as-a-new-programming-language-a335ff67e075), [me](https://soc.github.io/scala/departure).

Jon De Goes made also a few interesting points [here](https://www.youtube.com/watch?v=v8IQ-X2HkGE).

Hope this helps deciding!",1534798494.0
,Yes. ,1535039225.0
swaggler,"Yes, lots of highly skilled programmers have left Scala behind. Many of those programmers do not comment in public, especially on Scala forums, due to reasons, so you won't know those people exist.

You'll likely hear responses about political tribes such as Scalaz and Cats and how that is somehow relevant to your question. It is relevant, but at a meta level.

Technically, Scala is very obviously doomed. You cannot do Functional Programming in Scala to any practical extent. Anyone who has genuinely tried, has failed, and subsequently moved on. Some are in the process of still trying before acknowledging failure.",1534798978.0
m50d,"Kafka might be a step too far, but having a bunch of threads running whenever worries me. I'd like to see something like fs2 with more controlled/explicit interleaving of events and their handling. Perhaps I'll try to fork the code and see what I can come up with.",1534780237.0
SystemFw,"Tagless final in Scala means the same as tagless final everywhere else :)

I'm having trouble understanding your question because is ill-kinded:

If you have `add :: Repr -> Repr -> Repr`  , `Repr` can't be a `Functor` because it has the wrong kind: `*`, whereas it should be `* -> *` (`F[_]`). Also it seems you are referring to be beginning of the paper, since in your code `Repr` is a concrete type, whereas you'll see that it's generally put it in a typeclass (so it will be a typeclass parameter, lowercase `repr`). There's absolutely no problem having a higher-kinded `repr a`, and putting a Functor (or Monad, or whatever ) bound there (that's the `F[_]: Monad` you often see), so I guess I don't understand

> Which means `Repr` cannot be Functor because function passed to `map` will fall out of  `AST`

Btw in tagless final there isn't necessarily an AST, that's what makes it final",1534773655.0
m50d,"Monadic `flatMap` in the typical Scala uses is behaving much like `add` does in your example: it's an operation that `F` must support. You're right that this breaks serialization, so for some purposes it wouldn't be good enough. But often for all the cases you care about, a pure expression is equivalent to its evaluation (or rather, because that's the definition of purity, we should say: functions that are pure in Scala are also pure in your algebra) and you want to allow `map`-ing with pure functions. What properties are you concerned about this breaking?",1534773988.0
joshlemer,"I have been working on the new collections in Scala 2.13. In particular, I have been working on trying to make views completely stack- and heap-safe in this and other PRs https://github.com/scala/scala/pull/7048. This change should allow you to do things like:

`(1 to 100).view.drop(1).slice(5, 90).appendedAll(1 to 100).....` infinitely many times without consuming any more stack or heap.",1534768044.0
sake_92,"Trying to make Ammonite docs site faster and prettier :D, see https://github.com/lihaoyi/Ammonite/pull/854",1535401727.0
hrbrmstr,Put together a [small library](https://github.com/hrbrmstr/scala-splash) for working with ScrapingHub's [Splash](https://splash.readthedocs.io) javascript-enabled web scraping API.,1534842526.0
Seth_Lightbend,trying to get Scala 2.13.0-M5 out the door. we're very nearly there. details at [https://contributors.scala-lang.org/t/2-13-0-m5-release-train/2125/18](https://contributors.scala-lang.org/t/2-13-0-m5-release-train/2125/18),1535419615.0
bobbybobbyer,"(student)
small [strawpoll clone](https://github.com/cnguy/strawpoll) (without the auth stuffs for now) with http4s backend and ReasonReact on the frontend. Didn't choose Scala.js because I'm already comfortable with ReasonML and I'm new to Scala. I'm having a lot of fun! (normally I use JavaScript / TypeScript).

I'm not doing auth stuffs, but I'm trying to mimic mostly their UX (not necessarily their UI though, I can use whatever CSS and designs I want).

Ultimately I should be able to create a poll, share it with someone, and have them vote. Then the poll should update in real-time via whatever method I use (I think I'll start with short-polling for now).

I'll spam checking, and then auth, once I got all the UI/UX set up.",1534972867.0
minhthai,"I'm trying to add support for value class in Spark, see [https://github.com/apache/spark/pull/22309](https://github.com/apache/spark/pull/22309).

This allows me to have specialized [ScalaCheck](https://github.com/rickynils/scalacheck) generator for 1 of the integer columns (says \`user\_id\`) while at run time, they are still all integers.",1535901357.0
PnzrDrgoon,"I Got Games Vancouver | Senior Server Engineer | Vancouver, BC, Canada | ONSITE | Full Time

As a Senior Server Engineer, you will be responsible for developing services and frameworks for our mobile games. A server engineer is responsible for working with designers and other engineers to determine requirements, design and architect solutions, document services, and write, modify, integrate, and test their solutions.

Responsibilities 

•	Develop game services and supporting applications
•	Assess, develop, test, debug, and maintain game services
•	Strong ability to scope and define project requirements
•	Propose creative solutions to meet product goals
•	Work effectively in cross-functional teams and collaborate with internal and remote teams to identify, produce, and deliver tasks on time

Qualifications

•	5+ years of professional software engineering experience
•	Professional use of Java 7+ in a production environment
•	Akka and Scala experience a plus, or learn upon hire
•	Experience with all phases of product development lifecycle, including requirement definition, development, testing, product releases, and live operations
•	Experience developing HTTP/REST web services and TCP/IP socket services
•	Solid understanding of distributed systems and micro service development (SOA, SaaS)
•	Redis, Memcache, or other key value stores
•	MySQL, PostgreSQL, or DB2 relational databases
•	MongoDB, Cassandra, or other NoSQL databases
•	Git source control skills

Pluses

•	Undergraduate degree in Computer Science or a related field
•	Solid understanding of functional and reactive programming
•	Ansible, Chef, Puppet, or Docker deployment automation
•	Production grade cloud platforms (AWS) or large bare metal server farms
•	Linux: shell commands and scripting
•	Mobile game development (iOS and Android)
•	Agile/SCRUM processes
•	Polyglot (You know other languages too!)

http://ca.careers.igg.com/view.php?jobid=278

I actually have no affiliation with IGG, but know they're usually looking and thought I'd share.  Good luck people!",1534782439.0
Krever,"Sony Europe | Automation Engineer | Europe | REMOTE | Full time contract | 200€/day

&#x200B;

Sony Europe (Electronic Global Information Security department) is looking for a remote Scala Developer. We are working on various business problems regarding information security, such as incident management, watermarking and many others. The codebase is split into microservices, some of them are written in Python but most of them use Scala which is currently our language of choice.  

Technology stack: varies between services, from play+slick up to akka-http+doobie+monix. Recently we started to heavily invest in Camunda (BPM solution). We work in 7-people team distributed mostly across Europe. We all work in mostly the same timezone and we want it to stay this way. 

&#x200B;

If you're interested send your cv to Cezary.Lada@sony.com

&#x200B;",1535025842.0
jastice,"JetBrains | Senior Software Developer | Munich, Germany or St. Petersburg, Russia | Onsite preferred | Full Time

Tired of red code in IntelliJ Scala? You can help improve the situation now by joining our team: https://www.jetbrains.com/company/jobs/#senior-sw-dev-idea-munich

Please apply via the site, but feel free to ask me directly about any questions you have!

--- 

If you program Scala, you probably know our product. We still have room for development and strive to make Scala support even better.

We’ll be happy to have you on our team if you:

* Are eager to solve challenging tasks.
* Have at least 3 years of development experience in Scala and/or other functional languages.
* Can design and write code that is easy to read and maintain.
* Understand the code you write and the algorithms behind it.
* Have strong teamwork skills: you are open to diverse viewpoints and can support your opinion with sound reasoning.
* Are willing to grow as a professional, to explore and apply new approaches and technologies.
* Feel proud of the work you do.

We’ll be super excited if you:

* Have participated in open-source projects or developed projects of your own.
* Are familiar with compiler development and code analysis technologies.

What tasks we tackle:

* The tasks that we have at hand can be broken down into three categories:
  * Tasks related to Scala code analysis. Unlike other teams, we do not use compiler data and calculate everything ourselves. The language is constantly evolving, and we must be ready to support the new opportunities that it provides.
   * Application of the obtained data to various IDE features, such as refactorings, code completion, various hints, etc.
   * Integration with external tools: the compiler, debugger, build system, test frameworks, as well as supporting new features of the IntelliJ IDEA platform.
* You may take on the task of improving any of the subsystems or implement new features of your own design.

How we work:

* Source code is stored in Git repositories, most of which are available on GitHub
* Most of the source code is written in Scala, for project builds we use sbt.
* For effective team collaboration, we employ our own products: Upsource for code review, TeamCity for test auto-running and product integration, YouTrack for tracking bugs and features.
",1535136271.0
jbgi,"Lombard Odier Investment Managers | Scala developer | Geneva, Switzerland | ONSITE | Full Time

**About the team and company**

Lombard Odier Investment Managers (“LOIM”) is the asset management business of the Lombard Odier Group. With more than 120 investment professionals, we are a global business with a network of 13 offices across Europe, Asia and North America. LOIM has a unique approach, combining the best of alternative and traditional asset management to offer its clients and prospects a diversified range of investment solutions, including a number of new and innovative approaches.

Our technology team works directly with the business. We run a fully agile, cloud-ready, infrastructure which allows us to response quickly to new business needs. We use a microservice-based architecture and state-of-the-art open sources platforms to maximize development efficiency and reusability.

To further strengthen our team, we are looking for a Geneva based Software Engineer / Scala developer

**Primary responsibilities:**

* Develop excellent quality software
* Convert business requirements into elegant technical solutions
* Take an active role in the technical design of our solutions
* Help us stay up-to-date with latest technology trends and programming evolutions

**Desired profile:**

* Degree in information technology
* Several years of experience in a similar role (or in the open-source community) with a proven track-record of delivering
* Strong programming skills. Scala experience a plus
* Proven interest for the functional programming and event sourcing approach. Kafka experience a plus
* Experience in distributed architecture and “infrastructure as code” a plus (Azure cloud, Kubernetes, Docker, Terraform, Nix)
* Experience in distributed computation a plus (ML, Hadoop, Spark)
* Strong willingness and ability to learn and drive the use of new technologies/languages
* Passion, drive and energy
* Knowledge of the Finance or Asset Management industry a plus
* Fluent in English

**Contact information**

If you recognize yourself in this description, we look forward to receiving your application (CV, cover letter) at [loim.hr.switzerland@lombardodier.com](mailto:loim.hr.switzerland@lombardodier.com)

​

ps: you can also message me for more info.",1535462187.0
KameliyaA,"Pontica Solutions| Scala Developer |Sofia, Bulgaria | ONSITE | Full Time| Relocation

Our client is a leading all-in-one email service provider that not only enables customers to send transactional and marketing email to their contacts, but also better understand them, email after email. The intuitive tools deliver results for both marketing and technology-focused emailers as they give senders the right amount of analytics to get the most value from each campaign and to reach each inbox. They are now looking for a skilled Java/Scala Developer to join their growing team.

**YOUR ROLE:**

* Participate in the core development and work with cutting-edge technology.
* Maintain good test coverage of existing and developing features.
* Develop high-volume, low-latency applications for mission-critical systems and delivering high-availability and performance.
* Collaborate with other developers to design and optimize code.
* Investigate bugs and determine appropriate fixes.
* Collaborate and provide technical assistance to others.
* Carrying out the code review and validating the compliance with the standards and best practices of the company.
* Implementing the principles of continuous integration and maintaining them.

**REQUIRED SKILLS:**

* 2+ years of experience in Java/Scala programming and common Java/ JEE frameworks.
* A significant advantage will be:

– experience with scalable Databases (PostgreSQL, Cassandra);

– experience with queuing technologies (Kafka);

               – working with SCRUM methodology;

– developing, debugging, testing and deploying cloud solutions.

* Excellent knowledge of English (French will be considered an advantage).
* Ready to move to new technology architectures.
* Leadership potential would be a plus since the position could evolve towards management.

**WHAT WE OFFER:**

* An attractive remuneration.
* Exclusive discounts & offers.
* Additional health insurance and other social benefits.
* Constant trainings and extensive performance improvement programs.
* Great opportunities for career development.
* Excellent business environment and a friendly atmosphere.
* Open-minded management team promoting innovation, personal and professional development.
* Work with an amazing and diverse team from around the globe.
* Employee referral bonuses.
* Fixed-working hours (10:00-19:00).
* Permanent employment; full-time.
* Employer: Pontica Solutions Ltd.

CONTACTS:

[http://ponticasolutions.com/job/software-developer-java-scala/](http://ponticasolutions.com/job/software-developer-java-scala/) 

[work@ponticasolutions.com](mailto:work@ponticasolutions.com) or [k.atanasova@ponticasolutions.com](mailto:k.atanasova@ponticasolutions.com)",1535468872.0
aphexairlines,"Snap | Software Engineer | London, UK | Onsite | Full Time 👻

Our team in London builds systems to help creative people make the best content. We are looking for Software Engineers to help us keep pushing what can be done with content on a mobile device.

We build full-stack systems for people to create content, maximize engagement, analyze performance and provide actionable insights. You will work on our Story Studio product, bringing together narrative arrangement, creative tools and content management that can scale to Snapchat-size audiences.  Technical curiosity, willingness to learn and a focus on the end user are keys to success in our space.

We are investing heavily on functional programming and cloud computing.  We use Scala for our new services deployed to AWS and Google Cloud, and we use statically typed functional programming techniques for our web applications as well.

What you’ll do:
- Help build a world class content creation platform
- Perform code reviews and ensure exceptional code quality
- Ensure our products are robust, lasting and scalable
- Iterate quickly without compromising quality
- Collaborate and work well with others

What we’re looking for:
- BS/BA, MS, or PhD in a technical field such as Computer Science or equivalent
- Someone who gets excited by tough technical challenges
- Someone who loves to learn, and is passionate about helping others
- Experience with web applications, user interface design and web performance
- Experience with service-oriented architecture and API design
- A passion for Snapchat and for creativity!

",1535720436.0
CrisXing,"XING Networking Spain SL | Senior Backend Developer | Barcelona, Spain | {ONSITE} | {Full Time} | 45.000-63.000 EUR Gross p.year

&#x200B;

XING is the social network for business professionals with millions of members all over the world.  **Help us shape the future** **–** **for a better working life!**

&#x200B;

You will be working on our journey to migrate from a few monolithic services to a micro services & event sourcing based architecture  
You will build and extend existing backend services that power our Jobs & Job Search product lines   
You will be applying and coming up with best practices for continous deployment and automated testing using cutting edge technologies like Kubernetes   
You will mentor your team members on best practices for backend development  
You will be part of a cross-functional team of backend, React/iOS/Android engineers, designers and product owners  


**A convincing background**

You have experience with micro service architectures and distributed systems 

You have experience with Scala & Java ecosystems, and will not be shy about delving into a Ruby codebase and contribute 

You have a test-driven development mindset, and strive for building testable, predictable and simple code  
You have experience with functional programming and concurrency concepts 

You are polyglot and know multitude of languages and can pick the right ones for the task  

You have ideally been contributing to open source projects

You enjoy working in agile teams with a focus on sharing knowledge with your colleagues sitting next to you or on the other side of Europe  
You pay attention to detail without losing sight of the goal, have a sense of ownership and pride in the quality of your work  
You have a good sense of humor, an unpretentiousness and humbleness towards other people and are eager to work in a multicultural environment  
You are fluent in English  


Bonus points: 

Experience with modern web technologies across the whole stack: React, Backbone JS, Marionette. 

Regular contributions to open source projects.   


**An inspiring environment**

Training, conferences and many opportunities to learn, experiment and grow.  
A great, multicultural and diverse environment.  
Regular innovation weeks  
Flexible working hours and some days “work from home”  
Restaurant tickets, fresh fruit, coffee, snacks and much more.  
Spanish / German lessons.  
A mobile device of your choice as well for private use (iPhone, iPad, Android…).  
A sunny office located in the centre of Barcelona, with a large terrace.  
Flexible Compensation Plan: Health insurance/ Transport/ Nursery Tickets  
Extended holidays  
Bicycle park and package reception  
Large, highly distributed platform with over 14 million users.  
A variety of technologies and languages: Perl, Ruby on Rails, Java, Scala, Elasticsearch, REST, React, AMQP, Linux, Hadoop, Riak, MongoDB, MySQL, Solr, iOS, Android, Backbone.js, Git, Jenkins…• Relocation pack if needed. 

***We're looking forward to hearing from you!***

We're an Open Source contributor (r/https://github.com/xing) and we also organise public user groups and coding events, such as Ruby on Rails and other Tech Meetups. 

Check our Twitter account! r/https://twitter.com/xing_bcn

&#x200B;

Send your application to [hr-spain@xing.com](mailto:hr-spain@xing.com) ",1537175865.0
raghar,"For convenience:

* [part 1](https://kubuszok.com/2018/kinds-of-types-in-scala-part-1/)
* [part 2](https://kubuszok.com/2018/kinds-of-types-in-scala-part-2/)
* [part 1-3 combined](https://kubuszok.com/compiled/kinds-of-types-in-scala/)",1534728163.0
JoanG38,Mad!,1535035063.0
vitalijzad,"The question is: has SBT integration become faster? If the answer is no, people will keep on using Visual Studio Code.

JetBrains, good luck with Kotlin!",1534660743.0
zzyzzyxx,"I think you have a few options here.

First is to change the signature of `create` to require an `OWrites`.

    def create(model: M)(implicit w: OWrites[M], ex: ExecutionContext): Future[Boolean]

This allows the caller to specify the format on each call.

Second is to change the definition of `MongoDAO` to include an abstract `OWrites` member.

    implicit val owrites: OWrites[M]

This implies that every implementation must supply a single format which will be used throughout its lifetime. You could also use `implicit def` if you wanted to allow the implementation to potentially change the format between calls. The caller here has no control over the format other than what a particular implementation exposes.",1534614848.0
fuzzkill254,"Hi, since you are using PlayJson I'd recommend adding this PlayJsonSupport ([https://github.com/hseeberger/akka-http-json](https://github.com/hseeberger/akka-http-json)) in your dependency, and extend it to your trait. And yes you'll need an implicit to convert you Model to Json e.g:

`implicit val catFormat: OFormat[Cat] = Json.format[Cat]`

Happy coding :)",1534616559.0
kag0,I think the concept you're not familiar with here might be [type classes](https://danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html). ,1534618123.0
juli1pb,The first thing would be to tell us what is the `MongoDAO` trait you are using and what library it comes from (cannot tell without looking at the imports). There is just a chance it requires an implicit value that needs to be brought in the scope of your program.,1534613710.0
shim__,Shouldn't this be a macro instead of being integrated into the language?,1534598339.0
grizzly_teddy,Simple http services yes!,1534510652.0
fish-,"Looks great, even simpler and better documented than Scalatra. ",1534509309.0
killingRadio,"Awesome, just like your other Scala projects.",1534527539.0
nmoncho,"The syntax seems very nice and lightweight, how's the footprint? ",1534535582.0
colindean,I'd love to see an objective comparison of this to Scalatra. I'm already interested enough because of some use cases I have where even Scalatra seems like overkill and a lot of _stuff_ to manage.,1534532125.0
eaayoata,...... Respect .....,1534542561.0
thesuperching,"So ,... Why reinventing the wheel. If I am using Python Flask and I'm also able to write Scala, do I have good reason to use Cask ?",1534559071.0
ticofab,"Nice work! I love the annotations, they make routes more readable (compared for instance to how one defines routes in Akka Http). The callback approach seems to be a little verbose - like the Websocket example.",1534590572.0
hyperforce,Why the name `cask`? Seems in use.,1534521946.0
juli1pb,That looks very simple and neat. Congratulations!,1534625464.0
gapuchia,"I noticed some parts of algorithm was mutable (`visited: Array[Array[Boolean]]`) and I took a crack at it to see if I can make it immutable, plus some personal changes. I switched the double array of boolean to a list of `Vertex`, a case class that I  used to track location. Here's what I got for recursive function:

    case class Vertex(x: Int, y: Int)
    
    val neighbors = List(
        Vertex(-1, -1), Vertex(-1, 0), Vertex(-1, 1),
        Vertex(0, -1), Vertex(0, 1),
        Vertex(1, -1), Vertex(1, 0), Vertex(1, 1))
    
    def outOfBounds(index: Vertex): Boolean = {
        case Vertex(x, y) => x < 0 || y < 0 || x > board.size || y > board(x).size
    }
    
    def dfs(word: List[Char], index: Vertex, visited: List[Vertex]): Boolean = {
        word match {
          case Nil => true
          case firstChar :: restOfWord if firstChar == board(index.x)(index.y) =>
            neighbors
              .map({ case Vertex(xDelta, yDelta) => Vertex(index.x + xDelta, index.y + yDelta) })
              .filter(!outOfBounds(_))
              .filter(!visited.contains(_))
              .exists(newIndex => dfs(restOfWord, newIndex, visited :+ newIndex))
          case _ => false
        }
    }

The first call of this function would be `listAllVerticesOfBoard.exists(dfs(word.toList, _, List.empty[Vertex])`

Edit: Cleaned up code, grammar andwhatnot",1534487714.0
paul_f_snively,"Reminder: Verizon has a nice functional graph library, [Quiver](https://verizon.github.io/quiver/).",1534516671.0
,"I have been using Mockito (through scalatest) heavily with Playframework, and the syntax is a little bit off. 

This new work is really great. Glad you've been working on it!",1534517878.0
pellets,Keep up the good work!,1534466648.0
Storini,The Session capability ([https://medium.com/@bbonanno\_83496/introduction-to-mockito-scala-part-3-383c3b2ed55f](https://medium.com/@bbonanno_83496/introduction-to-mockito-scala-part-3-383c3b2ed55f)) seems a potential match for Scala ARM ([http://jsuereth.com/scala-arm/usage.html](http://jsuereth.com/scala-arm/usage.html)) ; what do you think? Test failures would be thrown exceptions in the finalizer presumably but it should work?,1534689972.0
Bolitho,Hm... Better invest the seven minutes into reading the main page of Scala-lang.org. 😉,1534451955.0
paul_f_snively,"Very nice! Just a couple of very minor thoughts:

1. Maybe try to use the term ""tagging"" vs. ""labelling,"" just for the sake of terminological consistency with other resources/tools.
2. Maybe add a section on deploying locally to [Minikube](https://kubernetes.io/docs/setup/minikube/) first. A lot of people, in my experience, get overwhelmed with setting up Kubernetes, even on something with as much simplification layered onto it as GKE has.

Anyway, nice job!",1534438110.0
juli1pb,Thanks for doing this. There is (in my opinion) a lack of doc or support for docker or k8s in the scala community ,1534439274.0
amazedballer,You don't need to add `enablePlugins(DockerPlugin)` explicitly.  It should be taken care of by `JavaAppPackaging`.,1534442410.0
insaneivan,"Last I looked, remote actors are notoriously slow.  Is this still the case?",1534452346.0
v_krishna,How do salaries in Japan compare to the SF Bay Area? & what about cost of living?,1534453961.0
Sirflankalot,"In the process of learning scala, I occasionally get hit with sentences that I totally can't make heads or tails of, can anybody help me out:

> Since a while now, the community talks about the tagless final encoding where you write an algebra and let the effect type be a F[_].

Write an algebra?",1534437376.0
SystemFw,"Nice article! 

A couple of corrections:

> And look, we can even change the order in the stack, it does not matter:



That's not true in general, but it just so happens that `ReaderT` commutes. Try with `EitherT` and `WriterT` and you'll see that chaining the order changes the behaviour (one keeps the log in case of errors, the other discards it).


```scala
case class SimpleState[F[_]: Monad, S](var state: S) extends DefaultMonadState[F, S] {
  override val monad: Monad[F] = Monad[F]
  override def get: F[S] = Applicative[F].pure(state)
  override def set(s: S): F[Unit] = (state = s).pure[F]
}
implicit val st = SimpleState[IO, Ads](ads)
```

As written, this is impure for several reasons:
you can't use `Monad.pure` to suspend a side effect like `state = s`, you need something like cats-effect `IO.apply` (`F.delay` on `Sync`). 
The video linked uses `Task.delay`, but it's still impure because the creation of mutable state (`create` in the video, `st` in the post) needs to be wrapped in `IO/Task` as well.

 I suggest using cats-effect `Ref` (or something equivalent), which always does the right thing (ops are suspended, including creation), and it's concurrency safe as well.",1534891823.0
aeye,"Regarding writing libraries abstracting Future/Task/IO, I noticed that the future implementation requires an implicit ExecutionContext in order to actually create futures as they are eager, whereas the other two do not as they are lazy. In this implementation, is the global ExecutionContext usually assumed? What if (for example in Akka) we would like to use a different ExecutionContext instead? How do I avoid polluting the interface with an implementation detail specific to futures?

Also, I was curious about the conversion between Futures and Tasks. In the article, it mentioned that the isomorphism was 
> quite straight-forward

Is there somewhere that I can find an example of this? ",1534434345.0
Baccata64,"Great article, i personally abide by these principles but trying to convey their value in a clear and concise way is a constant struggle for me (not being a native English speaker doesn't help)",1534451024.0
m50d,"The trouble with using `F[_]` for everything is that you're making your interface more complex. You've gone from functions that return custom types to functions that require the caller to provide an instance of a particular interface, [which is more complicated to work with](http://www.lihaoyi.com/post/StrategicScalaStylePrincipleofLeastPower.html#published-interfaces).

There are cases where it's worthwhile, but if `F` is only ever going to be monix `Task` I'd rather express my code in terms of `Task` than have an extra layer of indirection. Scala is an easy language to refactor in, so if it turns out the code needs to be flexible over different `F`s then it's easy enough to change that as and when needed.",1535111991.0
joshlemer,"Wow this looks really really cool, thanks!",1534429750.0
shangc,"I used vscode for everything other than scala/sbt, there's simply nothing better than the scala plugin in Intellij",1534355543.0
amazedballer,"There is a VSCode integration using LSP in the latest version of sbt:

[https://developer.lightbend.com/blog/2017-11-30-sbt-1-1-0-RC1-sbt-server/#vs-code-extension](https://developer.lightbend.com/blog/2017-11-30-sbt-1-1-0-RC1-sbt-server/#vs-code-extension)",1534360056.0
jaguarul,"You can use this Ensime-based VSCode plugin (disclaimer, I'm the main author): [marketplace link](https://marketplace.visualstudio.com/items?itemName=dragos.scala-lsp).

The extension is based on Ensime, a Scala language ""toolkit"" that supports several build tools, including Maven:

[http://ensime.github.io/build\_tools/](http://ensime.github.io/build_tools/)

You'll need to follow the Ensime instructions for obtaining the .ensime file, and from there on the VSCode extension would pick it up. It's still rough around the edges, but it seems to work for many people.",1534362042.0
WizzieP,"While currently the situation is not so good, there is https://scalameta.org/metals/ on the horizon, which will hopefully provide an amazing vscode experience in a few months.",1534414354.0
m50d,"> If there isn't a good plugin setup, would you recommend any educational resources that would allow me to learn how to use Scala with Maven from the command line? That would at least allow me to write scripts I could use in VSCode.

I'd recommend looking at ordinary maven tutorials e.g. https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html , rather than anything Scala-specific. Maven is very plugin-based and so Scala support is just a matter of enabling the/a scala plugin for compilation and then everything else works the same way it would with Java. So a lot of what you'll find about Maven will assume you're using Java, but almost everything works the same. If you get stuck on anything specific feel free to ask me here, or I'm lmm on the discord linked from the sidebar.",1534413502.0
paul_f_snively,"Please see the [Scalor Maven Plugin](https://github.com/random-maven/scalor-maven-plugin). I assume you already have the [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven) plugin. I just successfully cloned the Scalor repo, `cd`ed to the `demo` directory, did `code .` in my shell, expanded the `Maven Projects` section of the `Explorer`, right-clicked on `scalor-maven-plugin-demo`, chose `install` from the pop-up menu, and it built successfully.

To use in your own projects, look at the demo and pay attention to the plugin configuration and how it varies, e.g. depending on whether you're compiling for the JVM, Scala.js, etc. and what the plugin's various goals are. It's reasonably straightfoward.

Hope this helps, but please don't hesitate to ask questions!

**Update:** Of course, use this with the VSCode Scala support plug-in of your choice. I use a lightly patched version of [Iulian Dragos' plug-in](https://marketplace.visualstudio.com/items?itemName=dragos.scala-lsp).",1534438923.0
edrec,"Twitter. It might not be ""hardcore"" enough for you (not a lot of scalaz or cats) but most teams lean heavily on scala's functional concepts. Definitely goes beyond ""better java"".",1534311065.0
kailuowang,"Here is a list of Cats adopters. I haven't looked at which of them are in NYC (the only one I know is the one I am working for which is iHeartRadio. )  


[https://github.com/typelevel/cats#adopters](https://github.com/typelevel/cats#adopters)",1534352144.0
goedelsoup,"CompStak. Feel free to reach out! Cota has a pretty good FP codebase but the culture is pulling away from it.

Disclaimer: I work at the former and formerly worked at the latter.",1534346788.0
gregK,Morgan Stanley,1534291426.0
goedelsoup,"There are several 50-50 teams I've interviewed with and also some 70-30 OO teams who do some great tooling for all. I won't pitch for them, as they can speak up themselves, not quite fitting the topic. Pure FP is pretty hard to come about and, based on interviewing experience, seems centralized around academic centers. You're going to sift through a lot of fast data fluff in NYC.",1534376956.0
real_human__bean,x.ai,1534635410.0
shrink_and_an_arch,"You could just use the `getOrElse` function on Option like so: `opt.getOrElse(Nil)`. Despite the fact that `Option` and `List` are monads, they aren't the same monad and have different unit values (`None` for Option and `Nil` for List). You'd need a monad transformer like Cats' [`OptionT`](https://typelevel.org/cats/datatypes/optiont.html) to deal with the nested monad in this example (although OptionT does the exact inverse of what you're trying to do).",1534285626.0
gapuchia,"I would say `.getOrElse(Nil)` would be your best bet. Another way to do it, though:

    val optList : Option[List[T]] = ...
    
    val list = optList match {
      case Some(x) => x
      case None => Nil
    }

The second way allows you to execute a block of code if you wanted to some operations. (Although if you were doing operations on the List, you ideally would do a `map` on the Option and then apply `.getOrElse(...)`)",1534286998.0
juli1pb,"You can transform the `Option` into a `List` and just `flatten` afterwards. There is an example in the REPL. 

```
scala> val v = Some(List(1,2,3,4))
v: Some[List[Int]] = Some(List(1, 2, 3, 4))

scala> v.toList
res0: List[List[Int]] = List(List(1, 2, 3, 4))

scala> v.toList.flatten
res1: List[Int] = List(1, 2, 3, 4)",1534286490.0
teknocide,"First question is answered by: Monads do not compose. An Option is not a List and cannot be treated as such. When explaining Option to a newcomer a common description is ""it's like a list with either one or no elements"", but it's not technically a list.

Thinking about this again, if you had something like `Future[List[Int]]`, you could pretty clearly see that it would not be feasible to flatten it, ""despite"" both Future and List being a monad (or ""monadic"" for puritans.)

For the second question, the simplest way (which may or may not be the most Scalactic way to some) is to use `.getOrElse`. This cleanly allows you to get either the list inside the option, or an alternative list (which can be Nil). This looks like flattening but it's really conflating the two cases of ""there is a list"" and ""there is no list"".",1534326729.0
Kesomir,The reason you can't flatten is because option is not a list. Flatten is for flattening nested contexts into a flatter structure e.g. M[M[\_]] to M[\_]. ,1534286010.0
eclement,"I mean what's wrong with just exhaustively cover your world:

    val x: Option[List[T]] = ???  
    x match {
      case Some(l) => // do something with `l` here
      case None => // what do you want to happen in this case
    }",1534287005.0
dehun,"You can just convert you option into list and then flatten.

Like this :

`@ Some(List(1, 2, 3)).toList.flatten` 

`res11: List[Int] = List(1, 2, 3)`

`@ None.toList.flatten` 

`res12: List[Nothing] = List()`",1534322492.0
Kesomir,"You can fold it. The syntax varies between monads, either curried or comma separated something like: Optlist.fold[List[T]](List.empty)(identity). Where optlist is your Option[List[T]]. Have a look at the fold signature on option.",1534285784.0
Martissimus,"The monad thing is a red herring. You wouldn't expect to be able to turn `Option[Int => A]` into `Int => A`, even though both `Option` and `Int => _` are perfectly cromulent monads - that the stdlib offers some automatic conversion between collections is mostly unrelated to monads.

`opt.toList.flatten` is a reasonable thing to do, but if `None` and `Some(Nil)` actually represent the same thing, not having an `Option[List[T]]` in the first place but having a `List[T]` instead is the better idea. ",1534332509.0
MyFunc,"I guess this is the most general way to do it -

    >>> import Data.Foldable
    >>> asum $ Just [1,2,3]
    [1,2,3]
    >>> asum (Nothing :: Maybe [Int])
    []
    >>> :t asum
    asum :: (Alternative f, Foldable t) => t (f a) -> f a
I'm guessing there's a way to do something similiar in Cats or Scalaz. Put me down for using `.getOrElse` though :)
",1534350779.0
pipocaQuemada,"Monads, like monoids, come from math - particularly, abstract algebra and category theory.

In object oriented programming, it's really common to think of different implementations of an abstraction as being interchangeable and mix-and-matchable.  For example, being able to append any traversable collection to a list, whether or not it's a map, set, vector, etc.

By contrast, abstract algebraic abstraction is about characterizing common behavior of very, very different and non-interchangeable things.  Why?  Because you can prove something is true for the abstraction, you don't need to prove it for each concrete instance.

So a monoid, for example, is a type with some well behaved combining function and an identity element for that operation.  Integers, for example, form a monoid under both addition and multiplication.  Lists form a monoid under list concatenation.  `A => A` forms a monoid under function composition.  But you can't combine an int with a list or a function.  You can only combine ints with ints, lists with lists, and functions with functions.

Similarly, you can't flatMap across different monads.",1535119062.0
zeek979,Whats the Scala strategy to adopt developer mindshare?,1534219304.0
channingwalton,Has anyone got Emacs and lsp-mode working for Scala?,1534280674.0
dushbagery,what hardware mostly effects compilation times? has anyone noticed improvement for scala compilation with macbook's new 2.9ghz 6-core processor? or is motherboard the limiting factor? ,1534380296.0
sake_92,"I want to acheive this, but it doesn't compile:
```
trait Page { implicit self => ... }
```
This is what I can do:
```
trait Page { implicit def selfRef = this ... }
```
Is there a better name/convention for `selfRef`?",1535009904.0
n0lledge,"At my Job we are currently concerning to build a *simple CMS toolkit*. Kind of a custom made headless CMS. I am not very excited with the idea of implementing file upload, user acls and all of that stuff (once more). How do you treat the need for content in some applications? Does everyone build those custom solutions?",1535012249.0
,What are your favorite (and probably unknown to many people) tricks of customising IntelliJ to make it better?,1535239644.0
Rushfarms,These SIPs are not very controversial. ,1534173217.0
,"What about something like this ?

`implicit val showAnimal: Show[Animal] = Show.show {`  
 `case Dog() => ""dog""`  
 `case Cat() => ""cat""`  
`}`",1534152220.0
m50d,"There are two directions you can go here. You could use shapeless typeclass derivation to define your typeclass in a way that can automatically derive an instance for `Animal`, [see this example code](https://github.com/milessabin/shapeless/blob/master/examples/src/main/scala/shapeless/examples/shows.scala#L74).

Or you could use a `HList` instead of a `List` so that you keep the specific types of each element as part of the list type.",1534150744.0
,[deleted],1534173360.0
joshlemer,"Oh hey! This is something that really annoys me too about typeclasses, especially since I learned that Rust supports this which kind of whet my appetite. You should check out [this discussion](https://contributors.scala-lang.org/t/trait-objects-for-better-use-of-type-classes/1684), where I also link to existing library [polymorphic](https://github.com/alexknvl/polymorphic) which contains an implementation of ""trait objects"" which they call ""instance"". ",1534158211.0
Philluminati,"I don’t know anything and am miles from a machine but could you define a function in the trait that’s abstract and must return a Show[T] object, forcing the callers to explicitly offer up their type classes?",1534792000.0
vertexshader,"Think of type classes as the inverse of classes.  With classes you have a type - a class - and you put within it all its methods.  With type classes you have a method, and you implement it for many different types.  Its kinda like classes just inside out.",1534084429.0
Holothuroid,"A type class in Scala is a strategy object. It encapsulates behavior and is used as a parameter for methods as per the strategy pattern. Except, it's an implicit parameter.

tldr A type class is an autowired strategy. ",1534096952.0
ifanything,"The two definitions are indeed capturing the same idea, although from a slightly different angle. I'll break them down for you:

> ""Type classes define classes of types in the same way types define classes of objects""

A type defines a class of objects, e.g. ""int"" defines the set of the possible integers (1, 2, ... MaxInt). You define a type based on what you can do with it: you expect to able to ""add"" two integers togethers, etc.

In the same way the type ""Int"" denotes the set of *objects* that are integers, a type class denotes the set of *different types* that can do *the same thing*, or, in your other definition:

> A type class is an interface or API that represents some functionality we want to implement.

In the Guardian article the interface (the thing we want different types to do) is to chat:

    trait CanChat[A] {
      def chat(x: A): String
    }

So that provided you implement the interface for every different type (explain what it means for your concrete type to chat), you can make different types ""chat"", so that you could do

    chat(10) // integers can chat
    chat(new Foo()) // Foos can chat

I hope that's clear :)",1534085105.0
GoAwayStupidAI,"A slightly different view that may be helpful for intuition. 

Ignore the OO definition of ""class"" and consider the set theoretic definition: ""a class is a collection of sets (or sometimes other mathematical objects) that can be unambiguously defined by a property that all its members share.""


In this case the mathematical object is ""types"" and the trait directly defines the properties that all its members must share. 


The properties that define a type class (in Scala) include kind, related types, values and functions. Others have discussed the value and function properties. The ""kind"" property is worth mentioning because it's a bit obtuse. The kind is communicated by the structure of the type parameter of the trait. EG: ""trait Bar[T]"" and ""trait Zab[F[_]]"" express different kind properties. Specifically ""*"" and ""* -> *"". 


(I'm glossing over poly kinds)",1534097415.0
paul_f_snively,"Part of the problem, IMO, is there are several ways you can represent the ""typeclass"" concept in Scala. In fact, that motivated Michael Pilquist to develop the wonderful [Simulacrum](https://github.com/mpilquist/simulacrum) library for providing simple syntax support for defining typeclasses in Scala in a perspicuous way.

One thing that all of the definitions do seem to have in common is an understanding that a typeclass must have a type parameter, e.g. `Semigroup[A]` (stealing from the Simulacrum page). You can read that as ""`A` forms a `Semigroup`"" assuming there is, in fact, an instance of `Semigroup[A]`. The machinery Simulacrum generates makes it possible, with just an `import` or two, to say things like `foo |+| bar` for values `foo` and `bar` of any type `A` for which there is a `Semigroup[A]`.

That's an admittedly trivial example. Where this becomes more useful is in using libraries providing many such basic typeclasses (`Semigroup`, `Monoid`, `Functor`, `Applicative`, `Traverse`, `Monad`, etc.) along with their relationships (all `Monad`s are `Functor`s and `Applicative`s, too) and the functions and/or syntax to make using them straightforward.

What's a bit surprising, maybe, is: once you get used to saying things like `(implicit M: Monad[M])` and using `M.bind` to sequence operations and the like, it becomes apparent that you're automatically excluding a raft of incorrect behavior patterns, because you don't even know what the type `M` actually is, so you can't accidentally use any weird, inconsistent behavior it might possess. If it has a `Monad` instance `Monad[M]`, then you can constrain yourself to _only_ using its `Monad` (or `Applicative`, or `Functor`...) features, and those features satisfy a handful of laws guaranteeing that using them together works in an orderly, predictable way.

And this is why those of us who do functional programming in Scala do so.",1534111151.0
io_geekabyte,"Let me try by combining parts of the two snippets you shared:

**Type classes define classes of types**, by acting like an *interface or API that represents some functionality we want to implement* and the classes that implement the type class can be said to belong to a class of types...**same way types define classes of objects** and objects that are instances of that class, can be said to belong to the same class of objects.

Did this help?",1534083653.0
wookievx,"Nice work, but unfortunately this is not quite full-proof, mainly when your service goes down while the request is processed (normal operations or reverts) one end-up with corrupted state regardless. (Yes quite rare issue, but still it would be nice if someone came up with solution to this problem)",1534232081.0
GoAwayStupidAI,"Hi! The Scalaz group is currently organizing several collaborative projects at all skill levels.

https://scalaz.mobilize.io


If that link doesn't work let me know. On mobile and not entirely sure. ",1533968183.0
sake_92,"If you like web dev, see my  https://github.com/sake92/hepek project. It's really simple and fun, welcome! :)",1533982085.0
AlexITC,"If you want to try web development, I'm the author of [https://github.com/AlexITC/crypto-coin-alerts](https://github.com/AlexITC/crypto-coin-alerts), happy to help if you want to contribute.",1534003524.0
Krever,"Do you want something targeting end users (as suggested by your experience) or it can be any project, including libraries and tools?",1534018129.0
thearw357,Plus one on this ,1534019247.0
ryan_the_leach,"[https://github.com/SpongePowered/Ore/](https://github.com/SpongePowered/Ore/) Is a 'package manager' for Minecraft Plugins for the SpongeAPI Using Scala + Play. We desperately need help from \*\*experienced\*\* Scala developers (beginner-intermediate is great!), rather then just Java dev's that have a little experience.

I've spent a fair amount of time splitting tickets into [milestones](https://github.com/SpongePowered/Ore/milestones), and what direction we are heading in, But I'm an extreme Scala novice.

It's supposed to be the SpongeAPI equivalent of say [dev.bukkit.org](https://dev.bukkit.org) or [https://minecraft.curseforge.com/](https://minecraft.curseforge.com/) Except with the long term goals of having reviewed jar's by volunteers, as well as nice API's + maven like structure so developers can easily and automatically depend on other plugins API for better and larger interoperability.

If you are interested, drop by our Discord, [https://www.spongepowered.org/chat](https://www.spongepowered.org/chat) Or hit us up on #spongeore on EsperNet",1534023798.0
anatoliykmetyuk,"I am working on Thera, the static site generator for Scala: https://github.com/anatoliykmetyuk/thera

Contributing to thera, you will not only learn purely functional programming but also will most likely pick up blogging skills.

To see whether you would enjoy it, I suggest the following steps:

1. Follow Thera's documentation and generate your own blog. You can use my blog sources as an example (linked from thera readme). 
2. Write an article or two for your blog about your Breeze experience. What projects did you work on? What was the challenge and how did you solve it? 
3. By now, you will have ideas on what features and fixes thera needs. You can also look through issue tracker for ideas. Let's discuss them! 

If interested, shoot me an email and let's discuss it in more details. ",1534548820.0
Mimshot,Are those normal salaries for Europe? They're absurdly low for the US. ,1533958932.0
Pmgubbey1,"Yep there is a huge gap between EU and US salaries, especially in tech. But that salary in Europe is still a very decent salary for any industry. The living costs here in comparison to say New York or San Fran are also very far apart. That salary for a developer in for example Poland, which is 5 times cheaper to live in to New York, is fantastic. All depends on your local economic situation :)

But I think this role will be better suited for an EU based developer anyway as even though it’s remote they’ll need the person to work standard CEST working hours!",1533992902.0
agluszak,"Okay, I have a few style issues to report. So basically you should never use nulls in Scala. If you want to signal that a value can be absent - that's what Options are for. So I would start with redefining your case class as follows:

`case class Person(marriedTo: Option[Person], birthDate: Date)`

Also, you shouldn't be using vars if you want to write idiomatic Scala code, so personX definitions could rather look like this:

val person1 = Person(None, new Date()) etc.

Functions getSpouse and getBirthday are unnecessary, because you can access case class fields directly. If you wanted to make birthDay field optional, then, again, it should be reflected in the field's type inside the case class. (I didn't make this one optional though)

To be honest, there is no need to use monad transformers at all to achieve what you've described. Function `getBirthdays` can look like this:

`def getBirthDays(persons: List[Person]): List[Option[Date]] = persons.map(spouseOpt => spouseOpt.map(spouse => spouse.birthDay))`

After calling getBirthdays(persons) you will end up with List(None, Date(...), None, Date(...)) as expected.

If you want to avoid writing this nested map (that's the reason to use monad transformers in the first place - to ""unnest maps""), you can do

    def getBirthdaysMonadTransformer(persons: List[Person]): List[Option[Date]] = {
        val spouses: List[Option[Person]] = persons.map(_.marriedTo)
        val spousesT: OptionT[List, Person] = OptionT(spouses)
        spousesT.map(_.birthDay).value
    }

Here is the complete code: [https://gist.github.com/agluszak/400b95f063dcd4b580b0bc1a277ba2f6](https://gist.github.com/agluszak/400b95f063dcd4b580b0bc1a277ba2f6)

I recommend reading Cats documentation on OptionT ([https://typelevel.org/cats/datatypes/optiont.html](https://typelevel.org/cats/datatypes/optiont.html)) and - if you want to know more - these books: 

[https://www.manning.com/books/functional-programming-in-scala](https://www.manning.com/books/functional-programming-in-scala)

[https://underscore.io/books/scala-with-cats/](https://underscore.io/books/scala-with-cats/)",1534009685.0
denisx,"You can totally do that:

    def getBirthdays(persons: List[Person]): OptionT[List, Date] = {
      OptionT(persons.map(getBirthday))
    }

If you take a look at how `OptionT` is defined:

    final case class OptionT[F[_], A](value: F[Option[A]])

You'll see that it is a case class that wraps a value of type `F[Option[A]]`. In your case `F == List` so you need to transform `List[Person]` into `List[Option[Date]]`. To achieve that you just map over the list with the provided `getBirthday` function.",1533910869.0
juli1pb,"I do not know \`cats\` but would this code just work fine for what you want? It removes the use of `null` (do not use it!) and just normal map operations.

    package demo
    
    import java.util.Date
    
    class MonadTrans {
    
      var person1 = Person(None, new Date())
      var person2 = Person(Some(person1), new Date())
      var person3 = Person(None, new Date())
      var person4 = Person(Some(person3), new Date())
    
      var persons : List[Person] = List(person1, person2, person3, person4)
    
      def getBirthdays(persons : List[Person]) : List[Option[Date]] = persons.map( p => p.marriedTo.map(spouse => spouse.birthDay))
      def getSpouse(person:Person) = Option(person.marriedTo)
      def getBirthday(person:Person) = Option(person.birthDay)
    }
    case class Person(marriedTo:Option[Person], birthDay:Date)",1534085658.0
esumitra,"I agree with [agluszak](/u/agluszak) that it is better to model Person as

    case class Person(marriedTo: Option[Person], birthDate: Date)

Using the definition above one can get the spouse birthdays using nested maps as below

    def getBirthdays(persons: List[Person]): List[Option[Date]] = 
      persons.map(_.marriedTo.map(_.birthDay))  

and using a for comprehension with monad transformer as below

    def getBirthdays(persons : List[Person]) : OptionT[List, Date] = for {
      spousesT <- OptionT(persons.map(_.marriedTo))
    } yield spousesT.birthDay

Hope this helps.",1534093760.0
theNikki12345,"Anyone who might hit his head with the wall this make sure the types line up. For example functions must accept ""raw"" value and return ""correct"" type for the ""monad composition"" (for example List\[Option\[Integer\]\] ) , for example I made following stupid program which demonstrates this

      def even(list : List[Integer]) : List[Option[Integer]] = {
        list.map(v => if (v % 2 ==0) Option(v) else None)
      }
    
      def negativeValueWithTotalValue(x : Integer) : List[Option[Integer]] = {
        List(Option(x), Option(-1*x))
      }
    
      def valueAndAnotherAdd100(x : Integer) : List[Option[Integer]] = {
        List(Option(x), Option(x+100))
      }
    
      def myTest() = {
        (for{
          e <- OptionT(even(List(1,2,3,4,5,6)))
          x <- OptionT(negativeValueWithTotalValue(e))
          a <- OptionT(valueAndAnotherAdd100(x))
        }
          yield a).value
      }",1534426067.0
mart187,Better examples for Monad Transformers are Option or Either in something like Task or IO Monad. You need those to compose multiple steps in your Program in a for comprehension. I think List is a very poor example.,1533927903.0
TJSomething,Shouldn't `???` just be `(x: A) => Some(f(x))`? Or you could do `f.andThen(Some.apply)`.,1533889565.0
Daxten,"btw, a ""function accepting function"" is called a ""higher order function"" :)",1533890524.0
Baccata64,"You might be interested in the `Kleisli` abstraction : 

https://typelevel.org/cats/datatypes/kleisli.html 

In particular, it comes with the ability to `lift` : https://github.com/typelevel/cats/blob/38c52ad439d759739daa63bc2489ab8522e7776e/core/src/main/scala/cats/data/Kleisli.scala#L320",1533898884.0
theNikki12345,"As a follow up question I assume one needs to explicitly ""use the optionLiftable"". Is this assumption correct?

So I can do 

`Some(1).flatMap(optionLiftable.lift(x => x+1))`

but not

`Some(1).flatMap(lift(x => x+1)) //doesnt compile`

I know the implicit thing with function parameters, so my question isnt about that.. It would just be nice to be able to use the latter syntax..",1533891250.0
theNikki12345,"Another follow up question, why  

    optionLiftable is null?",1533891934.0
johnynek,"No. If you must return Unit, you have to have a side effect or just the pure function that does nothing but return `()`.

A question is can you turn things inside out and put the Java method inside an IO.",1533884842.0
volpegabriel,"That's fine. Sometimes you don't have a better choice when interacting with Java libs. I do the same here: https://github.com/gvolpe/fs2-rabbit/blob/master/core/src/main/scala/com/github/gvolpe/fs2rabbit/interpreter/AMQPClientStream.scala#L43

Just keep it encapsulated in a single place.",1533888025.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/programming] [Continuous Delivery Implemented with Event Sourcing at eBay](https://www.reddit.com/r/programming/comments/962gmy/continuous_delivery_implemented_with_event/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1533863959.0
joshlemer,"Support for native Time-To-Live state is very welcome, as is the ability to store timer state outside of memory (in rocksdb). We have an application at work which stores a timer per key, and the memory required to store that many timers posed the biggest scalability issues.",1533842639.0
jackcviers,"No.

However, you can do this:

`for{`

`_ <- Future.successful(())`

`f = foo()`

`b = bar()`

`fooResult <- f`

`barResult <- b`

`} yield (fooResult, barResult)`

And \`foo()\` and \`bar\` will run in parallel.

Of course this is annoying, so if you bring in cats you can do this

`import cats.syntax.apply._`

`import cats.instances.future._`

`import scala.concurrent.Future`

`import` [`scala.concurrent.ExecutionContext.Implicits.global`](https://scala.concurrent.ExecutionContext.Implicits.global)

`def foo: Future[Int] = Future.successful(1)`

`def bar: Future[String] = Future.successful(""Hello"")`

`(foo, bar).mapN(Tuple2.apply _)`",1533846499.0
Storini,"    For a pair of futures, just use f1 zip f2 which works fine. For 3 futures, see https://gist.github.com/tomaszperek/a6863bba0b169a4bb08d
    In the general case, Applicative is what you need.",1534024357.0
HighGaiN,"You can test this yourself, make foo() and bar()  do Thread.sleep with a reasonable time and see how long it takes to execute. This should help you figure it out. Remember for comprehension is just syntactic sugar for a series of flatMap and map operations. If you want them to run in parallel you can use Future.sequence or evaluate the futures before the for comprehension.",1533838219.0
bgoat20,"Option(null) == None, so Option(javaObj.getNullableField) will safely obtain the value if it exists.
Keep in mind that Some(..).map(null) will produce Some(null) so it can't be properly chained.",1533832464.0
pixelflat,`Try(getIt()).toOption` ?,1533832077.0
d00derman,"val t = scala.Try {
    yourPojo.getNullableProperty
}

Later, whenever you like

t match {
   case Success(t) => .....
   case Failure(e) => .....
}


",1533878415.0
Milyardo,"I feel like I'm stating the obvious, but just define a function and catch it?

    def npe[T](t: => T): Option[T] = try { 
      Option(t) 
    } catch { 
      case npe: NullPointerException => None
    }

    npe(foo.getBar())",1533832276.0
medgetable,Are you using a framework like Play or just the standard sbt-native-packager? Usually that error means you are missing an entry in plugins.sbt or Ivy resolution didn't complete successfully,1533821148.0
ASpotySpot,"There's some nice libraries I've played around with in general in their repo. 

eg.) [https://github.com/ovotech/kafka-serialization](https://github.com/ovotech/kafka-serialization)

Also they're hiring in London, UK: [https://stackoverflow.com/jobs/197192/fullstack-developer-ovo-energy](https://stackoverflow.com/jobs/197192/fullstack-developer-ovo-energy)",1533837617.0
amdelamar,Nice work!,1533774954.0
oleg-py,"This is purely my opinion, and I'm only barely scratching Scala at frontend myself, but I've found [slinky](http://slinky.shadaj.me/) and [react4s](http://react4s.org/) superior to scalajs-react. Both provide better compile times and add way less concepts to learn. Slinky is very close to React in terms of API and its DSL it's nicer, while react4s is more lightweight, has no macro magic (hence compiles faster) and actually greatly reduces React's API surface, especially component lifecycle.",1533750057.0
m50d,"I wrote a small project in ScalaJS a couple of weeks ago (a mahjong rank calculator, https://github.com/m50d/plus-minus-zero - still need to write a readme etc. but the basic code works) and was pleasantly surprised at how easy all of it was, so I would recommend giving it a go if you know/like Scala.

(I don't know about scalajs-react specifically, and that game is blocked where I'm working)",1533742396.0
paul_f_snively,"Let me recommend [docker-it-scala](https://github.com/whisklabs/docker-it-scala), especially its PostgreSQL support. If it's not clear how to use it, please feel free to follow up with questions. :-)",1533769338.0
ExorXmas,"Maybe you can setup an in memory database?
https://www.playframework.com/documentation/2.6.x/Developing-with-the-H2-Database
",1533741450.0
nambitable,"Why is the fact that it's a database relevant? 

Just mock the interfaces?",1533736625.0
pauljamescleary,"I use integration tests for database. And docker and docker compose to hit a Mysql database. It certainly isn’t as fast as h2, but it isn’t slow either. I have confidence all my queries work and can test some edge cases and more features if I need to. There is an sbt docker compose plugin that makes this easier. Can share code if interested ",1533768826.0
LukaJCB,I usually go with something like the `State` monad from Cats if I want to with something that doesn't just return dummy results :),1533803649.0
pellets,I don't mock databases. I run an instance using a convenient wrapper. Examples are https://github.com/vorburger/MariaDB4j and https://github.com/yandex-qatools/postgresql-embedded,1533842708.0
Philluminati,"A common pattern to to put all calls to external systems (ws client, db access) into a class with Repository in the name.

When writing controllers, mock out your business logic. When writing unit tests for your models and business logics mock out the repositories.

For the repositories you have now massively simpler situation regarding what to test. I normally just have those functions write to my regular local testing database but use Unique ids, to isolate my test data from the rest of the data.",1534267444.0
ablx000,"What does your code really do? If it is just accessing the database, I’d say you need not to unit test it, as you can expect that the DB (and the API) work without any problems. If you transform the data in any kind after reading / before writing, extract that in an own function and test that function; no need to mock the DB",1533734464.0
Axatarr,"You could try mock the HttpResponses you are supposed to receive, or at least their status.

Mockito example:

    when(queryDb).thenReturn(Status.Forbidden)",1533740775.0
shvimas,Convert your list to map then build two sets for names and fruits. After that just print fruits' names and for each name print corresponding map's values with zero as default ,1533715757.0
Martissimus,"Transposing usually means swapping the rows and colums in something like a `List[List[A]]` that represents a matrix. That's not what you're trying to do -- your data is not a `List[List[A]]`, so transposing is not the thing you want.

The tricky part is what you want to have as a result type (and why!). You show a table, but what do you want to do with that? Lookup? Print? Different use-cases have different demands on the resulting data, and trade-offs in getting there.",1533724461.0
pheymann,"You could do the following:


    val list = ...

    type FruitScores = (Double, Double, Double, Double)

    def extractScore(fruit: String, score: Double): FruitScores = fruit match {
      case ""Apple"" => (score, 0.0, 0.0, 0.0)
      case ""Orange"" => (0.0, score, 0.0, 0.0)
      ...
    }

    def addScores(a: FruitScores, b: FruitScores): FruitScores = ...

    list.foldLeft(Map[String, FruitScores]()) { case (agg, ((name, fruit), score)) =>
      val scores        = extractScores(fruit, score)
      val currentScores = agg.get(name).getOrElse((0.0, 0.0, 0.0, 0.0))

      agg.update(name, addScores(currentScores, scores))
    }

EDIT 1:

Here, you fold over the list which basically means you create some new data structure (Map) which should be the result of your fold action and you describe how you incorporate each element of your list into this data structure.

Btw, `agg` is the intermediate Map state.",1533716415.0
trenobus,"    val list = List(
      ((""Anna"", ""Apple""), 450.0),
      ((""Anna"", ""Orange""), 450.0),
      ((""Anna"", ""Kiwi""), 450.0),
      ((""Bob"", ""Apple""), 450.0),
      ((""Bob"", ""Kiwi""), 450.0),
      ((""Bob"", ""Papaya""), 450.0)
    )
    
    val names = list.map{case ((n, _), _) => n}.distinct
    val fruits = list.map{case ((_, f), _) => f}.distinct
    
    val listAsMap = list.toMap

    val result = names.map { n => n :: fruits.map { f => listAsMap.getOrElse((n, f), 0.0) } }

*Edit: simplify final expression (doh!)
",1533759190.0
junesalad,"If you don't mind cats dependency, you can use its provided Monoid. The idea is to convert your original data into Map[Name, Map[Fruit, Num]] and then collapse that using Cats' Monoid instances.

The idea is all values will be combined into the same entry i.e. all records with the same name will be combined into some form and get assigned to the common key.

    import cats._
    import cats.implicits._

    val rawData = List(
      (""Anna"", ""Apple"", 450.0),
      (""Anna"", ""Orange"", 450.0),
      (""Anna"", ""Kiwi"", 450.0),
      (""Bob"", ""Apple"", 450.0),
      (""Bob"", ""Kiwi"", 450.0),
      (""Bob"", ""Papaya"", 450.0)
    ).map { case (a,b,c) =>
      Map((a, Map((b,c))))
    }

    Monoid.combineAll(rawData)
    .map { case (name, data) =>
      List(
        name,
        data.getOrElse(""Apple"", 0),
        data.getOrElse(""Orange"", 0),
        data.getOrElse(""Kiwi"", 0),
        data.getOrElse(""Papaya"", 0)
      ).mkString("", "")
    }.foreach(println)",1533835071.0
raghar,"Personally, I would build a `Map[String, Map[String, Double]]` which for each name stores how much of things a person has:

    val data: List[((String, String), Double)]
    val thingsByName: Map[String, Map[String, Double]] = data
      .groupBy { case ((name, _), _) => name }
      .mapValues { nameThingAmountList =>
        nameThingAmountList.map { case ((_, thing), amount) =>
          thing -> amount
        }.toMap
      }

Then I would figure out the list of all possible things to own:

    val possibleThings: List[String] = thingsByName
      .values
      .toSet
      .flatMap((_: Map[String, Double]).keys.toSet)
      .toList

And then I could print it:

    println((""Name"" +: possibleThings).mkString("", ""))
    thingsByName
      .map { case (name, things) =>
        (name +: possibleThings.map(thing => things.get(thing).getOrElse(0.0).toString)).mkString("", "")
      }
      .foreach(println)",1533730735.0
blanonymous,"Probably the same as some other already mentioned, but here goes my solution:

    val list = List(
      ((""Anna"", ""Apple""), 450.0),
      ((""Anna"", ""Orange""), 450.0),
      ((""Anna"", ""Kiwi""), 450.0),
      ((""Bob"", ""Apple""), 450.0),
      ((""Bob"", ""Kiwi""), 450.0),
      ((""Bob"", ""Papaya""), 450.0)
    )
    
    val byFruit = list
      .groupBy { case ((_, f), _) => f }
      .mapValues(_.groupBy { case ((p, _), _) => p }
          .mapValues(_.head._2))
    val persons = list.groupBy { case ((p, _), _) => p }.keys.toList.sorted
    
    val fruits = byFruit.keys.toList.sorted
    
    val table = persons.map { person =>
      val prices = for {
        fruit <- fruits
        value = byFruit(fruit).getOrElse(person, 0.0)
      } yield value
      (person, prices)
    }
    
    val tableFormatted = table
        .map { case (p, prices) => s""$p ${prices.mkString("" | "")}"" }
        .mkString(""\n"")
    println(s""Name ${fruits.mkString("" | "")}"")
    println(tableFormatted)

Maybe a more readable version: 

    val list = List(
      ((""Anna"", ""Apple""), 450.0),
      ((""Anna"", ""Orange""), 450.0),
      ((""Anna"", ""Kiwi""), 450.0),
      ((""Bob"", ""Apple""), 450.0),
      ((""Bob"", ""Kiwi""), 450.0),
      ((""Bob"", ""Papaya""), 450.0)
    )
    
    type Person = String
    type Fruit = String
    type Price = Double
    type Payment = ((Person, Fruit), Price)
    
    def person(p: Payment): Person = p._1._1
    def fruit(p: Payment): Fruit = p._1._2
    def price(p: Payment): Price = p._2
    
    def sortByKeys(m: Map[String, _]): List[String] = m.keys.toList.sorted
    
    def createMap(l: List[Payment]): Map[Fruit, Map[Person, Price]] =
      (l groupBy fruit)
        .mapValues(
          l =>
            (l groupBy person)
              .mapValues(r => price(r.head))
        )
    
    def getPrices(map: Map[Fruit, Map[Person, Price]],
                  person: Person): List[Price] =
      for {
        fruit <- sortByKeys(map)
        value = map(fruit) getOrElse (person, 0.0)
      } yield value
    
    
    
    val byFruit = createMap(list)
    
    val persons = sortByKeys(list groupBy person)
    
    val fruits = sortByKeys(byFruit)
    
    val table = persons map (person => (person, getPrices(byFruit, person)))
    
    val tableFormatted = table
        .map { case (person, prices) => s""$person ${prices.mkString("" | "")}"" }
        .mkString(""\n"")
    
    
    
    println(s""Name ${fruits.mkString("" | "")}"")
    println(tableFormatted)
    ",1533732077.0
KeinBaum,"Here's a version with minimal overhead:

    object Main extends App {
        val list = List(
            ((""Anna"", ""Apple""), 450.0),
            ((""Anna"", ""Orange""), 450.0),
            ((""Anna"", ""Kiwi""), 450.0),
            ((""Bob"", ""Apple""), 450.0),
            ((""Bob"", ""Kiwi""), 450.0),
            ((""Bob"", ""Papaya""), 450.0)
        )

        val fruits = list.foldLeft(Set.empty[String])((s, t) => s + t._1._2)

        val default = Map(fruits.toList.zip(Stream.continually(0)):_*)

        val res = list.foldLeft(Map.empty[String, Map[String, Double]].withDefaultValue(default))((m, t) => 
            m + (t._1._1 -> (m(t._1._1) + (t._1._2 -> t._2))))

         println(res)
    }

It could be more readable but that's as far as I could be bothered on mobile.",1533738760.0
KeinBaum,"Well, for one, you don't need to put everything in one line:

    users
      .groupBy(user => (user.Id, user.productType))
      .mapValues(_.map(_.productValue))
      .mapValues(list => list.sum / list.size)
      .toList
      .sortBy(_._1)
      .foreach(println)",1533692591.0
ARainyDayInSunnyCA,"Coding on mobile. Please forgive formatting issues. 

The smallest change would be to just add line breaks when chaining the method calls:

    users
      .groupBy(user => (user.Id, user.productType))
      .mapValues(_.map(_.productValue))
      .mapValues(list => list.sum / list.size)
      .toList
      .sortBy(_._1)
      .foreach(println)

You can introduce a value name at any step along the way. Often useful to document intent or expected types:

    val avgSpendByKey: Map[(String, String), Double] = users
      .groupBy(user => (user.Id, user.productType))
      .mapValues(_.map(_.productValue))
      .mapValues(list => list.sum / list.size)

    avgSpendByKey.toList
      .sortBy(_._1)
      .foreach(println)

You can also define functions to handle some parts of the chain or for the mapping:

    def avgSpend(users: Seq[]): Double = {
      val productValues = users.map(_.productValue)
      productValues.sum / users.size
    } 
    
    def avgSpendByKey(users: Seq[User]): Map[(String, String), Double] = users
      .groupBy(user => (user.Id, user.productType))
      .mapValues(avgSpend)

    avgSpendByKey(users).toList
      .sortBy(_._1)
      .foreach(println)",1533692743.0
gapuchia,"Along with everyone else's answer, another thing you can do to make it more readable is to use pattern matching to access values in a tuple. I never really liked how scala use \_1, \_2 to access values in a tuple.

    .sortBy(_._1)

for example can be changed to

    .sortBy({ case (userId: String, _) => userId })

To me, it is more explicit on how it is being sorted. Just a personal preference.",1533693719.0
Odersky,"Aligning vertically with leading `.` helps readability. 

But if the meaning is still not obvious, name intermediate results with `val`s. Well-chosen names are key to understanding code, so it pays to invest some thought choosing the right names.
",1533834738.0
m50d,"I think best practice is to keep with the one-liners, adding line breaks to keep them to screen width. Being able to fit more code on a single screen is a huge advantage for overall code readability even if it doesn't feel like it - bug rates go way up once a function or class gets too long to fit on a single screen (whatever size a ""single screen"" is for you, it's the having to scroll that triggers it).",1533718606.0
U2aLffOKCiYC1vk,"you can simplify some code blocks using the **for** generator. Anything with a flatmap and map could be converted into a **for** generator.

for example: (taken from martin's course on Coursera)

    
    (1 until n)
    
    .flatMap(i => (1 until i)
    
    .withFilter(j => isPrime(i + j))
    
    .map(j => (i, j)))
    
    
    for {
    
    i <- 1 until n
    
    j <- 1 until i
    
    if isPrime(i + j)
    
    } yield (i, j)
    

Although , it doesn't work for every use case its a nice way to write when it is possible. ",1533706524.0
mr___,Insert newlines. Preferably after open braces/parens and before the period of chained method calls,1533692573.0
joshlemer,/u/mrxtravis Removing because this was posted here 5 days ago,1533655050.0
volpegabriel,Duplicated: https://www.reddit.com/r/scala/comments/93t4mu/fp_to_the_max_with_john_de_goes/,1533652051.0
drfisk,Personally I really like sttp (https://github.com/softwaremill/sttp),1533645557.0
bluphoenix22,Not sure on the specifics of the reddit api but I like play-ws library https://github.com/playframework/play-ws,1533634868.0
lihaoyi,"Using [Requests-Scala](https://github.com/lihaoyi/requests-scala) to match the same thing you are doing down below with STTP:

      requests.post(
        ""https://www.reddit.com/api/v1/access_token"",
        data = Map(""grant_type"" -> ""password"", ""username"" -> ""peet"", ""password"" -> ""slimo""),
        headers = Map(""User-Agent"" -> ""Get Pics""),
        auth = new requests.RequestAuth.Basic(""name"", ""secret"")
      ).text()

Basically the same as what you have below; I like it more, but it's just a matter of preference",1533724883.0
CinnamonHeart,"What have you tried? It's been about a year, but I remember this page as being fairly easy to follow: https://github.com/reddit-archive/reddit/wiki/OAuth2

and I just tried this curl example out:
https://github.com/reddit-archive/reddit/wiki/OAuth2-Quick-Start-Example#curl-example which still works as expected.

Just about any HTTP library should work.",1533643718.0
kiviok,"[https://github.com/lihaoyi/requests-scala](https://github.com/lihaoyi/requests-scala)

very simple. I like it",1533654465.0
techempower,"# Gigahorse[ ](http://eed3si9n.com/gigahorse/#Gigahorse)

Gigahorse is an HTTP client for Scala that can wrap either [Square OkHttp](http://square.github.io/okhttp/), [Async Http Client](https://github.com/AsyncHttpClient/async-http-client/tree/1.9.x), or [Akka HTTP](http://doc.akka.io/docs/akka-http/current/scala.html) underneath. ",1533677375.0
mlopes,"Surprised no one suggested this yet:

https://github.com/http4s/http4s",1533704625.0
DanielShuy,"This has got to be the slickest CLI I've ever seen.

As a plugin author, I'm a little disappointed by the lack of a plugin interface, but his proposal of flipping the responsibility around (by allowing other tools to query Fury for the information of the project/build) is an interesting one, and I'm really looking forward to how it pans out.",1533625061.0
truGrog,"really neat demo, looking forward to seeing the finished work!",1533833802.0
m50d,"You use the same `ConcurrentHashMap`, the same `computeIfAbsent`, and just return a scala `Future` instead of a `Deferred`. There's nothing Kotlin-specific there as far as I can see.

If you're talking about a more functional approach, you wouldn't get yourself into this position in the first place because you wouldn't have pervasive implicit concurrency. Rather you'd do something like Haxl and similar frameworks: form a free applicative for the operations you want to perform, analyze that to find the set of requests you need to perform, perform the requests you actually need to perform (so you naturally only perform each request once, no need for a mutable cache) and then interpret the applicative using those results.",1533641272.0
volpegabriel,I don't know whether that technique is provided out of the box by some library but my impression is that it can be easily implemented in a few lines of code using `cats-effect`'s `IO` and `Deferred`.,1533607208.0
NovaX,"Most often cache stampede prevention is handled by the caching library itself. As the article shows, `ConcurrentHashMap#computeIfAbsent` provides this mechanism. One might use [Scaffeine](https://github.com/blemale/scaffeine) `AsyncLoadingCache` for an asynchronous Scala version using futures. In DoorDash's case it would be a cache that immediately evicts, though typically one would hold the result for a longer duration. Sometimes the RPC layer will automatically debounce for you, such as in memcached clients, rather than require the optimization be placed in every application call-site.

The technique is often referred to as memoization and you'll find a lot of Scala articles and libraries using that term.",1533609847.0
paul_f_snively,"fs2 has [`debounce`](https://github.com/functional-streams-for-scala/fs2/blob/v0.10.5/core/jvm/src/test/scala/fs2/SchedulerSpec.scala#L26-L39) as part of its API.

**Update:** I should have read more closely. As others rightly noticed, you want to race the same operation replicated N times, but only get the winning result. With fs2 0.10.5 and the version of cats-effect it brings along, here's what my friend and colleague Chris Davenport came up with:

```scala
for { 
  p <- async.promise[IO, Unit] 
  a <- List.fill(10)(IO(println(""Hi!""))).map(_.flatMap(p.complete)).traverse(_.start) 
  i <- p.get 
  _ <- a.traverse(_.cancel) 
} yield i 
```

Obviously you'd want to refactor this off-the-cuff example to take the `IO(println(""Hi!""))` and `10` as arguments, and presumably `println`'s `Unit` result type as a type variable. But the pattern is reasonably straightforward: create an fs2 `Promise` whose contents are the same type as the result type, fill a `List` with `n` copies of the effect, arrange for each one to `complete` the `Promise` with its value after doing its thing, then `start` all the `IO`s. Next, `get` the value from the `Promise`. Semantically, this will block until a result is available. Finally, `cancel` the losers.

Hope this helps!",1533657686.0
mvonthron,"At [Mnubo](https://mnubo.com/) we use a combination of [Akka-Http LruCache](https://doc.akka.io/docs/akka-http/current/common/caching.html) and a `ConcurrentHashMap` to do that, that's pattern we use a lot when calling cachable external services. 

We use it in two flavors:
  1. if the data is older that X, refresh, update the cache and return it
  2. if the data is older that X, launch a future that will update the cache in the background but return the previous value immediately  

Version 2:
```
private val cache = LruCache[K](timeToLive = ttl)
private val lastKnownCache = new ConcurrentHashMap[K, V]()
    
def getData(key: K): Future[V] = {
  val fromCache: Future[V] = cache(key, () => actuallyFetchData())
  if(lastKnownCache.contains(key))
    Future.successful(lastKnownCache.get(key))
  else
    fromCache
}
```",1533728617.0
Daenyth,"Jetbrains has this in most of their editors. Almost certain it works for Java, it works pretty well for python, especially if you use typing, works great for cpp",1533596523.0
zqvt,"not limited to scala, type info is integrated into many language servers. Haskell and intero for example can show you types interactively as well, as do f# and ocaml in various ides/editors

In Emacs C-c C-t seems to be the convention for most language modes. ",1533596587.0
jvican,"IntelliJ has very specific requirements about presentation compilers because they need to make it compatible with their IDE infrastructure (called PSI). That is one of the reasons why IntelliJ implemented its own presentation compiler and didn't use Scala's.
  
However, I've been chatting with the IntelliJ guys and they are interested in using Tasty as the interchange format to re-use Dotty's backend in Scala 3. That will give a coherent IDE experience to all Scala developers (no matter if they use IntelliJ or vscode).",1533626138.0
niktrop,"It may be bound to different shortcut for other languages. For example, for Java it is Ctrl + Shift + P.",1533630140.0
amdelamar,Nice work!,1533589570.0
dhlbrk,"Thanks, looks great!",1533592969.0
cmcmteixeira,Cool! You won't get any hate from me :),1533595705.0
kontrolk3,"I haven't felt much pain using MockitoSugar from scalatest along with core mockito matchers, but I will check this out next time I run into issues. Could definitely see liking the by-name and mixins support.",1533607029.0
bluphoenix22,"This is exciting! Will definitely try it out. 

One thing I was wondering was whether you have looked into scalamock library at all? I’ve only use mockito but curious to know pros/cons of building on top of mockito vs Scala specific library ",1533634347.0
Krever,"I recently wanted to create my own wrapper around mockito. I expressed the main features in this \`mockit-scala\` issue: [https://github.com/mockito/mockito-scala/issues/17](https://github.com/mockito/mockito-scala/issues/17)

cross-posting here so more people have chance to see it and discuss/propose improvements.",1533751313.0
DisruptiveHarbinger,"I was looking for something exactly like your `ValueClassMatchers` a few weeks ago. I realize using a macro makes a lot of sense. There's a way with Shapeless but it's not perfect, or so I've heard.

As someone who knows nothing about macros, could you briefly comment on how it works?",1533658947.0
ysihaoy,Awesome. Wondering anyone has tried Scala Mock and compare both?,1533740796.0
Mtraxx,"I'm using intellij IDE and want launch a compiled program in windows promt console/ gitbash. In visual studios it felt like i could test making my own program with c++. I really dislike intellij console but want it to handle all the lib and class stuff.

Is it possible to run obj ext App in such a way? Or pointing me to an environment/framework to do similar is good. The totality of a language like scala, and how it is made useful as a program is hard to grasp for a pleb(Advice here is welcome too). I could make a GUI with scalaFX but want the simplicity.   ",1533677420.0
enverest,"Where is /r/scala description now? There was cool list of books etc.

UPD: it's looks like moderators should copy it from old reddit: [how\_do\_i\_access\_subreddit\_community\_info](https://www.reddit.com/r/redesign/comments/8p2nj2/how_do_i_access_subreddit_community_info/).",1533741363.0
ryantheleach,"https://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html

Describes path dependent types, using fan fiction.

But in the example of where it's a compile error due to mis-matching PDTs How could I define a method/class that accepts Characters from different franchises (on purpose) in a class or method called CrossoverSpecial() for example.

e.g. that crossing franchises is allowed, but only specifically in this class / method that's designed for it?",1533786754.0
sake_92,"What are the benefits of using curried functions? I understand how they work but don't see very much of it's practical every-day use.  
It's kinda similar to partial application.  
Alternative to both is to make a helper `def` to call the original function... Right?  
Not trying to be dismissive, I'm surely missing something here?",1533561683.0
Philluminati,"Simple question. I want to create a future that takes 30 seconds to complete and the does so successfully. I have an existing app with some questionable locking solution associated with it. Rewriting in Akka or anything isn't a possibililty. My understanding is that Thread.sleep effectively puts the whole thread to sleep so can effectively just block the whole app and everything grinds to a halt until after the future has finished. (This is a test suite test, with parallel testing enabled)

This works:

  import scala.concurrent._
  import scala.concurrent.duration._


    def hang() :Future[Boolean] = {
        val t = new java.util.Timer()
        val delayedPromise = Promise[Boolean]
        val task = new java.util.TimerTask {
            def run() = {
               delayedPromise.success(true)
               println(""done"")
           }
       }
       t.schedule(task, 20000L, 40000L)
      delayedPromise.future
     }

     hang()
     // race condition check...
     Await.result(hang, Duration.Inf)

Is there anything better/cleaner/nicer?

",1533568869.0
beisenhauer,"Spark Datasets have the following signature for `flatMap`: `def flatMap[U : Encoder](func: T => TraversableOnce[U]): Dataset[U]` The type bound on U appears prevent using a Dataset in a for comprehension; at least I have a piece of code that breaks when I try to convert it. It compiles, but I get a run time error about what I think is the missing implicit Encoder. Is there any way to make a for comprehension work with this? I'm using Scala v2.11.x and Spark 2.2.0.",1533596878.0
SubMachineGhost,"Any advice about how i can prepare for a technical interview where i will be discussing my solution to a technical assignment ? the job is for a backend engineer.

what i have noted so far are:

* read the documentation of the used stack.
* take notes about what can be improved.
* try to improve the solution.
* try to anticipate some the solutions to some problems they may ask, for example what if we need to scale this to double or triple the users...
* prepare some questions about their stack.

I don't have any experience with this style of interviews, so any advice would be much appreciated.",1533650359.0
Philluminati,"I have a bunch of JavaScript files in app/assets/js/. I want to Minify them and concatinate them into a single file called app.js. I’m unsure if sbt-uglifyjs would do this, or if I need require.js, both of which I’ve played with but don’t really understand the difference or application for them. Can some explain please?

My understanding is that uglify makes a .min.js file for each source file but does not concatinate them and requirejs is something unrelated all together. Also I think uglify only works in prod and does nothing in dev so it’s hard for me to test things.",1533718710.0
volpegabriel,https://github.com/typelevel/cats/pull/2365,1533517996.0
agilesteel,"If you wish to contribute to the discussion about the cake pattern, please consider doing so in the comment section for the first part of this video, which you can find [over here](https://www.reddit.com/r/scala/comments/90wpce/a_fully_working_example_of_the_good_old_cake/e2vimuq). Thank you!",1533463274.0
johnynek,"Stripe has several scala remotes in Canada (the data org uses a lot of scala): https://stripe.com/jobs

You can DM me on Twitter: posco",1533409992.0
tombraideratp,Do you have experience with scalajs and react bindings ,1533395342.0
agbell,"Hit me up, remote Canadian Scala dev who's team is hiring",1533434291.0
dispalt,We are fully remote and have a person in Canada. Shoot me a dm.,1533500249.0
Scf37,I believe it is applicable for and useful to Scala community.,1533370305.0
jeffmess,He's moving on. Nothing to see here. Thanks for all the hard work Sam and good luck in your endeavors.,1533474426.0
joxzaren,Looks like Scala is coming down with a major case of the Osborne effect. People are waiting for Scala3 (Dotty) and not investing in developing Scala 2. The longer it takes before Scala 3 is available the worse it will get.,1533432103.0
dtechnology,"This is premature and FUD. Dotty is nowhere near finished yet, and there are several strategies in development to prevent a split. Everyone is keenly aware of Python 2/3 and trying to prevent that ",1533335655.0
joshlemer,"I really am tired of official final-departure/last-words/goodbye posts. It serves no purpose other than to spread FUD and flip a middle finger to all the people that one has worked with to contribute to Scala over the years, and from which he has undoubtedly learned a great deal.  
  
It also seems really unnecessarily tribalistic or something. The language I have used most, and continue to use the most, is Scala, but that doesn't mean I don't learn other languages like Kotlin and Rust. But just because I learn them doesn't mean I ""left Scala"". In fact, I think it's really important to learn what new things are happening in other communities so we can adopt their successes when possible, just as Kotlin and others have adopted many of Scala's. 
  
With very little effort, these style blog posts have a much greater negative impact to an ecosystem's reputation than the equivalent positive impact yielded by spending the same amount of effort trying to improve things, and that's probably why they get written so much.  ",1533397666.0
,"Sam's ideas about Scala 3, and other's, have been recently debunked by Martin and his team. Yet if you believe Sam, the newly self-ascribed Haskellator, then clearly you must seek Haskell nirvana. /sarcasm",1533332050.0
naftoligug,FUD,1533324047.0
duhace,supposedly TASTY is going to mitigate compatibility issues between scala 2 and scala 3.,1533305797.0
Bomgar85,"Tooling is one of the big problems with scala right now. And instead of providing better tooling now they go for a breaking change that kills a lot of the existing scala tooling.
I know they want to provide a language server but that will only be available when scala 3 is released. In the meantime a lot of scala developers lost interest in maintaining their project until it gets replaced by scala 3. So until then we're left with unmaintained tooling for scala 2.",1533372647.0
mart187,I believe in tasty unless proven otherwise,1533311500.0
GoAwayStupidAI," I wish Sam all the best. I appreciate his contributions.

This does highlight an issue with Scala ecosystem I've encountered recently. Given the organization of certain projects, i understand why a migration to Scala 3 would appear unmanageable.

 (I removed specific project references below)

For example, ??? could have progressively evolved into exactly the design desired. A choice was made to start from scratch. This choice was executed poorly.  Resulting in a significant, potentially unmanageable, increase in project complexity. For instance, the treatment of ??? tickets was amateur. The result is, imo, quiet a mess and arguably a regression for customers. From an engineering perspective I could imagine this appearing unwinnable. 

This is a volunteer role for Sam and i doubt his professional projects are run the same. That said if the opensource projects are representative, then i won't consider the migration issues listed having the claimed cost. 

That's all organizational aspects. Unrelated to technical. 

For technical, I can't say much.  I may have lucked out by joining Scala relatively late (and from Haskell). Looks like I avoided a lot of (now) bad advice that was popular even a few years back. ",1533317142.0
sake_92,"Idk why are people complaining so much... You'll get a far better language and features. So what if you'll have to rewrite some of your old code? If it doesn't pay off, stay on Scala 2 and that's it? 
Don't like Scala 3 at all? Pick another language and stop ruining the fun for the rest of people..",1533311224.0
emilypii,"Thanks for being amazing Sam! I'm glad you could turn Scala into your Haskellator and join us all in the promised land.

You'll find that both Haskell and Eta simultaneously appear, and _are_ greener pastures for competent developers. ",1534342897.0
Upio,This comes across as whining,1533348700.0
jvican,"I haven't read your blog post @fommil (and I don't have the time for it unfortunately). However, I'd like to say that I wish you the best and that you're a great person! We have not always agreed, but our long discussions (both online and offline) have always been fruitful and actionable, and I have enjoyed quite a bunch hanging out with you in conferences. People come and go, for sure, but it's important for me to acknowledge publicly that I appreciate all your work around tooling (I may have been one of the persons that has benefitted the most from it one way or another) despite the fact that it's no secret that we disagree quite a lot in social media (:P). You were one of the first people to motivate me to hack on Ensime and improve my Scala several years ago (I bet you didn't know that), so I hope that your enthusiasm to fix and improve things is now of some use in the Haskell community and, most importantly, that you have fun.",1533588686.0
acjohnson55,"I posted this and then forgot about it. And now I'm sad I even posted it at all. I thought /u/fommil's post was a really nice farewell. I implicitly assumed this would be a celebration of the things he contributed. I, for one, loved spray-json-shapeless.

The fact that this thread is dominated by what I'd consider mean-spiritedness and defensiveness does not speak well of the community of my favorite programming language. It's a sad reminder of the reputation this community had when I was first starting out. And it's a reputation that continues to follow the community.

We can do better than this.",1533614070.0
1Wittgenstein1,"Am I correct that while Scala charges ahead, anyone integrating with Spark (most of us?) are still stuck on 2.11?

I get why this is the case, but does anyone know when we can port our spark apps to 3?",1533362042.0
Baccata64,"Farewell Sam, all the best with your new venture, and thanks for all the contributions over the years :) ",1533633625.0
nieuweyork,"Same problem the Python community faces. Much as I don't like how fast Python 3 moves, it hasn't seemed to hurt adoption. ",1533310439.0
,[deleted],1533514698.0
swaggler,Never change.,1533426714.0
ysihaoy,"Oh, come on please go to Haskell and never join Kotlin world. I don't want to see Kotlin is ruined by FP hipsters.",1533741167.0
johnynek,Data infrastructure at Stripe is in Scala. Stripe is also a great place to work.,1533269393.0
,Twitter uses Scala extensively.,1533264604.0
KagakuNinja,"I've been working at 3 different companies in the Bay Area that use Scala, for the last 5 years (although not doing ""pure FP"").

Places to look: all the companies that sponsor or give presentations at local Scala conferences and meet ups, like Scala by the Bay, etc. Check out any forums for those groups, there may be job postings.

Look on craigslist.

Check out this [""survey""](https://stackoverflow.com/jobs/salary/); enter your location and scala, it will bring up a bunch of job listings.

There are teams in large companies using Scala; the Apple maps group (you will find listings on craigslist); also Verizon labs (some pure FP guys from Verizon used to post here a lot). I don't know about Google / Facebook...",1533265419.0
dustinmichaels,We use Scala for services here at CreditKarma. Feel free to message me if you want me to forward your resume to HR. We are located in downtown San Francisco.,1533271201.0
clhodapp,"We're not huge like the companies you mentioned but my team is hiring. https://jobs.lever.co/rocketlawyer/362a41de-29fa-4256-9a1f-ab80a548a52e

PM me if you want to chat.",1533272327.0
erwan,"Not as big as those, but we use a lot of Scala at Zendesk.",1533287301.0
juli1pb,"Very happy Twitter SWE there: We are using Scala a lot, you can check out our github to get an idea [https://github.com/twitter](https://github.com/twitter)",1533681203.0
Semi_Functional_Ken,"Our hiring platform, Functional Works, focuses solely on FP jobs. We have a few SF companies looking for functional scala developers. Here's one: [https://functional.works-hub.com/jobs/Scala-Engineer-San-Francisco-California-United-States-Aug-2017-57d2d?utm\_source=reddit&utm\_medium=post&utm\_campaign=k.cadima](https://functional.works-hub.com/jobs/Scala-Engineer-San-Francisco-California-United-States-Aug-2017-57d2d?utm_source=reddit&utm_medium=post&utm_campaign=k.cadima) Would love to hear your fb",1542655839.0
kpws,just in time for the scala 2.13 release,1533237059.0
DFEN5,"woah, what a surprise! congratulations Spark team!",1533231991.0
Martissimus,This is wonderful. I wonder how much it will take to build against 2.13.0-M4. I'm going to have to try this weekend.,1533237052.0
LowerEarthOrbit,Fucking finally!,1533250593.0
minhthai,"this is awesome, meanwhile I'm still stuck with old Spark version at work :(",1533272419.0
joshlemer,This was a really excellent tutorial.,1533169949.0
tweaqslug,"It took a while to get rolling, but it was well worth the watch in the end. It was really helpful to see how IO and State arise rather simply out of the need to defer side effects and keep things composable.",1533201549.0
joshlemer,"How do people build these type classes like his:

    trait Command[F[_]] {
      def getStrLn(): F[String]
      def get2StrLns(): F[String] = getStrLn().flatMap(a => getStrLn().map(b => a + ""\n"" + b))
      def putStrLn(string: String): F[Unit]
    }
    
When you want to provide a richer typeclass with many methods implemented in terms of the others? You need a context bound on the F[_] like Monad, in order to combine results from the other methods, but context bounds don't work with traits because there's no trait params yet. Do people instead use abstract classes?",1533215128.0
yourbank,"Id love more of these videos. I still dont really understand typeclasses and what `F[_]` and `self` represents, the video kind of ramped up very quick from this point but I feel like I am a step closer to understanding what `IO` actually is while not really getting it just yet.",1533248916.0
naftoligug,Now this is the kind of thing we need more of!,1533604635.0
justinhj,"First thing I learned was when JDG used a fold with an option, essentially a neat expression of get or else ",1533735421.0
m50d,"I don't know much gradle (I use maven), but you probably need some kind of scala compilation plugin to get gradle to actually run the scala compiler on your code. Once you're actually compiling it, running it should be no different from running a java main (since it's the same kind of bytecode once it's compiled).",1533135332.0
testube_babies,"Use the [application](https://docs.gradle.org/current/userguide/application_plugin.html) plugin, which among other things adds a ""run"" task:

    plugins {
        id 'scala'
        id 'application'
    }

    mainClassName = 'com.example.App'

    repositories {
        jcenter()
    }

    dependencies {
        compile 'org.scala-lang:scala-library:2.12.6'
    }",1533138467.0
George_Kush_Sr,"Yes, but you want to dig up the jars/drivers that Teradata provides for doing this sort of thing and you want to use JDBC. 

If you happen to be using Spark, then you can use some of the DataFrame methods as well.

Unfortunately it's been a couple of years since I've done it so I can't dig up any example code for you, but I have done this, if it makes you feel more emboldened in your search. ",1533125539.0
joshlemer,Please post this in the monthly who's hiring threads,1533124617.0
haakon,"This is in London, if anyone else is wondering.",1533145301.0
Milyardo,"I don't think there's a meaningful difference between 'functional reactive programming' and 'reactive programming', other than the later might imply a more data driven approach. They're both still declarative approaches to defining the propagation of change.

> But is it needed to do FRP to perhaps make a game?

No. People often mention FRP in the context of games, but I never understood the appeal. Having your game loop be a endomorphic function for some game state, and having a separate function describe operations to render a given game state always seemed like a much more appealing design to me.",1533100982.0
continuational,"FRP is just one model. [Elm](http://elm-lang.org/) is a good example of how to make web applications with simple pure functional code that doesn't mention FRP concepts like signals, streams or behaviors. 

To some degree, you can also make games with Elm. However, since Elm produces HTML, there's no model for collision detection and response, or anything like that, so you'd have to write a lot of code to handle that. One could imagine an ""Elm for games"" that produced a 3D scene graph instead, where you could listen for collisions in the same manner you can listen for clicks in Elm.

For Scala, see the side bar for a list of libraries. I maintain a React-based library, [React4s](http://www.react4s.org/), that comes with support for writing purely functional webapps. ",1533112278.0
virus_dave,"""-Xlint:infer-any""

Not perfect, but should help a bunch.",1533093187.0
Daenyth,"In practice I've found this to basically never matter because it trips a compile error on a type annotation somewhere near the error, and on top of that I find it very rare to use inheritance much at all barring ADTs",1533074697.0
m50d,"It's useful when you're actually using subtyping - you want `List(dog) :+ cat` to return `List[Animal]`. I'm not the right person to make the case for subtyping except to say that it's what sets Scala apart from other functional languages, so I don't see it going away (at least I hope not).",1533122516.0
Martissimus,"You're describing a bunch of different annoyances, but you're not identifying them correctly.

You say 

> Of course what is causing this is the type widening ""feature"" of the apply method of List, or more generally the fact that Functions are ""contravariant""

This is flat out wrong. Close, but no cigar.

The problem is subtyping, plain an simple. The problem is that given

    trait Animal
    class Cat extends Animal
    class Dog extends Animal

a valid `Cat` is also a valid `Animal` and also a valid `Any`, and that you can pass a value of type `Animal` to a method that expects an argument of type `Any`.

In other words, that if

    val felix = new Cat
    val fido = new Dog

then 

`List.apply[Any](felix, fido)` returns a `List[Any]`, and scalac sees is no problem, because both `felix` and `fido` are perfectly cromulent `Any`'s that can be passed to the method `List.apply[Any]`

Likewise, `List.apply[Animal](felix, fido)` returns a `List[Animal]`, and scalac is fine with this.

`List.apply[Cat](felix, fido)` or `List.apply[Dog](felix, fido)` are compile errors.

lastly, the unannotated `List.apply(felix, fido)` is inferred to be `List.apply[Animal](felix, fido)`, because Animal is the LUB of `Cat` and `Dog`.

Your suggestion to use scalaz IList is a nice suggestion - sometimes you want an invariant list. But using IList doesn't fix the problem you describe.

It also has nothing to do with FunctionN being contravariant in its argument type.

You have some (IMO) real and reasonable issues with some language features, but the way you present this, where you present what's ""obviously"" the problem, and where you insert scare quotes around ""features"" while you completely misidentify the issues causing you grief don't make for a great post IMO.

EDIT: Anti-strawman note: I'm not saying that inferring `Any` or `Product with Serializable` tends to be useful. I'm also not saying subtyping is great or terrible. ",1533286516.0
Daxten,images for text is not a good idea :),1533111867.0
marcosspereira,"We do not have a date yet. The current version we are working on is 2.7. There are milestone releases for it already: 

https://blog.playframework.com/play-2-7-0-m2-released/

Anything you are specially interested?",1533095601.0
ancientmatingcalls,JDK 9,1533064533.0
Philluminati,You’re getting no comments because there isn’t really much to say. A good article. Even more so for people wanting to write their first action builders and struggling with the docs. I’m sure Google will send a lot of traffic your way.,1533058582.0
phazer99,"I can only speak from personal experience working as a software engineer for 20 years. Most of the Java concepts I learned in the 90's (class inheritance, design patterns, XML configurations etc.) I would never use today and would gladly unlearn. They were just work arounds for limitations in the Java (and to a certain extent C++) programming language, and FP provides much simpler and better solutions. My take away from this was to focus on learning stuff that has a solid theoretical foundation in math or type theory, not best practices based on ""experts"" opinions and experiences. Those are the things that will stand the test of time.",1532993513.0
colindean,I think that unlearning the acceptance of null and of varying values of truthiness would go a long way. Those concepts would probably never go away but rather strongly learning to reject them would go really long way.,1533005827.0
chetanbhasin,"The first thing that comes to my mind that I find hard switching to FP style code is mutable state.
I think you should avoid using mutable state as much as possible. Use pure functions as much as possible. Of course, depending on the language, sometimes it just makes more sense to use variables instead of values and have some mutable state and some impure functions, but it's about how you approach a problem.

A lot of problems can be solved without mutable state and mostly pure code with just as much complexity if not less. Some can't. 

This doesn't just go for Scala. Having learned Scala/Haskell has made me a better programmer even when I write Python code (or something else) and I'm really glad I did it.",1533026761.0
justAGuyFromBrooklyn,"I couldn’t say one particular thing. If I had to pick it’s - never think you know everything.

Example: some guy wrote a script to leverage something for us. Read what he wrote, pages and pages of code. I was mind boggled. He’s a 10+ year veteran.

I rewrote it in 6 lines.

Edit: he’s a senior compared to my experience ",1532985472.0
m50d,"Things I think we overuse due to legacy and would be better off moving away from (which is not to say there aren't niches where they still make sense, just that I don't think they should be the default that everyone learns to use):

 * IEEE754 floating-point
 * Non-UTF8 strings
 * Regular expressions
 * Exceptions
 * SQL
 * Relational databases
 * Control flow keywords
 * ACID
 * Fixed-precision arithmetic
 * Multi-user operating systems
 * General recursion

Honestly I don't find much of the CS part of my degree that useful in retrospect - if anything I think I use more from the Maths course, even as a regular programmer working in industry.",1533030368.0
teknocide,I'm not sure what you're asking for.,1532971208.0
hyperforce,"> Where you use these tons of implicits in practice?)

Implicits are a very powerful tool for library/DSL authors to make the syntax more palatable while retaining a lot of power/flexibility.

I'd say best not to worry about them.

They do not have a strong use case for ""simple"" code. It's a tool to make more advanced code look simple.",1532974561.0
channingwalton,"I use implicits a great deal because the libraries I use require it - doobie, cats, http4s, circe, etc.

I tend not to have to write many implicits because those libs provide what I need usually.",1532983499.0
amazedballer,"\>  Does such strong language have no simpler examples of application? 

[https://github.com/lightbend/lightbend-emoji](https://github.com/lightbend/lightbend-emoji) :-)",1533003664.0
Philluminati,"One thing you can do with implicits is implicit classes, so you can add functions to other peoples objects. This sounds simple but in java and other languages is actually requires inheritance.",1533019072.0
lihaoyi,"If you use [uJson](http://www.lihaoyi.com/upickle/#uJson), you don't need to choose:

- Just need case classes? Read/write directly to case classes

- Need an AST? Read/write directly to the AST

- Specifically want some *other* AST that's not the uJson AST? You can read/write directly to the circe/play-json/etc. ASTs too

- Don't need case classes or an AST, and just want to pretty-print JSON? Read/write directly `String -> String`

- Don't need any output at all, and just want to parse+validate your JSON? You can do that too.

ASTs are a thing you sometimes want, but they don't need to be in the critical path if you want some other thing. If you want one, great, if you want something else, a visitor-based library like uJson can give you that something else directly and without fuss.",1532959079.0
mdedetrich,"This is already fixed in Circe and the upcoming Scala JSON AST, also this issue isn't restricted to using AST's. If you were to parse directly into a case class you would get the same issue.",1533128714.0
rtorres3,"Recently go laid off from a NYC startup and decided to use my newly found free time to re-write my **mini-java compiler** in Scala. It was our final project for the compilers course in college two years ago. Planning on implementing the Language Server Protocol using play and ANTLR4 for the parsing and syntax errors. Should be fun. Also, if anyone is looking for an experience Scala dev in the NYC area then lemme know :) .",1532958506.0
bobbybobbyer,"CS student working on a Trello clone using this as the base project: [https://github.com/pauljamescleary/scala-pet-store](https://github.com/pauljamescleary/scala-pet-store).

I'm a beginner to FP and Scala, but so far this has been really fun (follow the types!). I really like http4s. :) Just trying to figure out how I should combine services now (creating a new Board should also create an initial task column for example).

The code feels really clean and easy to follow and all the logic seems to me very decoupled. Like I can look at a single file and understand its purpose because it's a lot of simple pure code that I can understand in a few lines. Maybe that's just good project organization though (by the original creator).

edit: Changing it to reddit clone for simplicity since I'd have to deal with websockets if I'm doing Trello",1532965926.0
silentraquo,"I've just added integration with Futures to [Airstream](https://github.com/raquo/Airstream), my state propagation and event streaming library. Not much time for open source work in the summer, so pretty happy that I squeezed that in! Overall I'm working on polishing [Laminar](https://github.com/raquo/Laminar) to production level.",1533020037.0
hyperforce,I'm currently working on how to use `scalacheck` more effectively with SQL queries.,1532970298.0
BitgateMobile,"Currently working on a development plan for Scattersphere 0.3.0, which will be the first cut at a server-based implementation of the API.  While I've had a lot of experience writing servers, I'm struggling with which server framework to use to keep this small(ish), short, and sweet.

As a result, [I've been working on some documentation](https://github.com/KenSuenobu/scattersphere/blob/ticket-114/scattersphere-docs/SINGLE_SERVER.md) to help guide me through the process.  I could use a set of eyes (or many) on the design docs.

Anyone curious can take a look at the API as a whole [at this link](https://www.github.com/KenSuenobu/scattersphere).  It's slowly gaining popularity, and I want to keep it small and simple.",1533161326.0
sake_92,"I'm adding support for [PureCSS](https://purecss.io/) framework to [hepek](https://github.com/sake92/hepek/pull/16). Using same abstractions, you only need to switch `trait` you extend/import and you get your page rendered with different framework. Currently, only Bootstrap3 and Pure are supported. Help/feedback is welcome! :)",1533503205.0
AesaKamar,"Working on a data visualization project which graphically shows links between related subtopics in Mathematics. 
Based on data from MathSciNet.",1532962459.0
m50d,"The link to ""Ask anything threads"" is broken. Possibly unrelatedly, the current ""Got a quick question?"" thread has unpinned. Could these be updated? IMO having a quick questions thread available is very important as a place for beginners to be able to get help.",1533556683.0
ludflu,We have a akka-http api that provides a layer over a graph database. I'm building a job to import and export graph data. It uses gremlin-scala but I wish it used RDF instead.,1533915385.0
justinhj,"I've added Scalaz ZIO to my fp starter pack that makes it easy to get up and running with functional programming libraries.

https://github.com/justinhj/fp-starter-pack.g8

Another thing I'm working on is solving 25 days of xmas problems using various fp techniques. I don't spend much time per week on this but I aim to finish it before next xmas :)

https://github.com/justinhj/scalaadvent2017",1533924621.0
volpegabriel,"Paidy | Software Engineer (semi-senior / senior) | Tokyo, Japan | ONSITE | Full Time

We are expanding very quickly and are in need of hiring more devs to join our different teams.

At the moment we have 3 different teams (using different tech stack).

1. Eff, Grafter, Akka (actors, cluster, persistence, http), Cats, Monix
2. Typelevel stack: Cats, Cats-Effect, Http4s, Fs2, Circe, Shapeless, etc (the team I'm leading).
3. Data Science team: Spark, Akka persistence, Sttp, Http4s, Fs2.

Contact me if interested: gabriel.volpe at paidy dot com. 

I'm also frequently in the `http4s`, `fs2`, `cats-effect` and `cats` Gitter channels.

",1533001903.0
tryx,"The real takeaway for me from that was that ArchUnit existed.

```
noClasses().that().resideInAPackage(""..domain.."")
.should().accessClassesThat()
.resideInAPackage(""..application.."")
```
Is some black magic right there.",1533008147.0
1Wittgenstein1,are you still looking for a technical writer?,1540234422.0
dtechnology,"Yep, using the swagger generators for Scala is a pretty bad experience.

I've defaulted to writing the .yaml file by hand (it's pretty easy) and include a small parser + validator in a test that checks for typos and the like.",1532927763.0
z0mghii,https://github.com/twilio/guardrail,1532915268.0
aphexairlines,"Why not use the rest+json support for protobuf or for thrift?

protobuf rest library:
https://github.com/googleapis/googleapis/blob/master/google/api/http.proto

protobuf json support:
https://developers.google.com/protocol-buffers/docs/proto3#json

thrift-over-http:
https://medium.com/airbnb-engineering/building-services-at-airbnb-part-1-c4c1d8fa811b

thrift human readable json:
https://www.parsable.com/parsable-blog/using-human-readable-json-endpoints-with-thrift-for-free
",1532917230.0
reactormonk,You could try it with https://github.com/http4s/rho - they have built-in generation.,1532943108.0
etaty,"Another alternative =>  
[https://sangria-graphql.org/](https://sangria-graphql.org/)",1532940268.0
Daxten,"I have not worked on my template for some time, but this terrible spaghetti code:

https://github.com/Daxten/bay-scalajs.g8/blob/master/codegen/src/main/scala/app/SwaggerCodegen.scala

generates play routes as traits, which then have to be implemented by you. It also uses circe for encoding/decoding, but doesn't support constraints.

It's not great but it was way easier to write this and use it then to use the other options for scala for me :/",1532943721.0
mart187,"Nobody should be using this anymore. There is a reason why this is called cake anti pattern. This has a number of downsides, e.g. high compile times, ultra long list of mixed in stuff. There are far better options, e.g. macwire.",1532893093.0
raghar,"Reasons to know cake pattern:

1. when you see it you know you should run",1532893188.0
mmmdaaa,Return state is not stored anywhere because the purpose of this example is to show a bug when using just `nonNegativeLessThan` and not to show how to use the rng in general case. You are right that you have to pass in the state to execute `rollDie`which they do by passing `SimpleRNG(5)`. With the initial state `SimpleRNG(5)` they show the result is `0` which is not a valid die value. They fix it later by changing the definition to `def rollDie: Rand[Int] = map(nonNegativeLessThan(6))(_ + 1)`,1532852727.0
esumitra,"Here's another way to view the approach outlined in the chapter. Say the program we wish to write involves stateful transformations like random number generation. One approach to write such a program is to use state actions i.e., functions that take an input state and return the next state. One can then write combinators that take input actions and return new output actions. One example is the *map* combinator that takes an input action s, and a function f, and returns a new output action that applies f to the random value and a new state. Since the map combinator returns an action, i.e., a function that takes an input state and returns an output state, there is no need to reference the state explicitly while defining the map combinator. The type signature for an action is *type Rand[+A] = RNG => (A, RNG)* and the map combinator can be defined as

    def map[A,B](s: Rand[A])(f: A => B): Rand[B] =
      rng => {
        val (a,rng2) = s(rng)
        (f(a), rng2)
      }

As you can see from example map function, there is no need to explicitly reference the state since the state is passed as input to the action and not the map combinator. The red book is not a simple read but well worth it, especially if one does the exercises in the book as you are doing. Good luck!",1533315324.0
volpegabriel,"Hi, can you paste the code you don't understand please? I remember that example but not any of the details. It would help you to get better help :)",1532825604.0
haimez,I think that section in particular has an errata item mentioning this as a mistake in the published version. You are not taking crazy pills.,1532826326.0
fromscalatohaskell,"well if you depend on it then you must pass it as argument on every call. Simple as that. Why do you need more magic? And if you ask if we can do better than pass it at every function, yes we can, without magic. Proceed with book and you'll learn how.",1532887118.0
channingwalton,Have a look at what John Carmack has to say about FP in game dev - here is a start [https://www.gamasutra.com/view/news/169296/Indepth\_Functional\_programming\_in\_C.php](https://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php),1532810463.0
Northronics,"It's very practical. I write all my games using functional programming (except for rendering), nowadays in Scala. There are no good game libraries written specifically for Scala as far as I know, but [LibGDX](https://libgdx.badlogicgames.com/) can be used with Scala and provides all you need to write a game, and there are many successful games running on the JVM.

Compared to writing a game using Java or C++, you're definitely saving time once you've gotten used to it. Rendering code will be mostly the same, while game features will be both quicker to implement and easier to test. 

Performance is more or less equivalent to a C++ game core with Lua scripting, and game developers rarely find issue with *that*, so it shouldn't be an issue. And if it is, optimizing pure Scala code isn't *too* hard. ",1532857783.0
jackie_pwn_asses,"> So is it less efficient than the imperative and oop coutnerparts?

It depends on what you're doing. For games, absolutely. 

>  Would I actually be saving time writing code? 

Why do you think you're going to save time by writing a game in a language that doesn't have lots of support for writing games, in a programming paradigm you're unfamiliar with?


If your goal is to learn FP while making a game: scala will be great. But you seem to be concerned with efficiency of both your program and the time you spend writing your program. If those are your concerns, you'll be swimming against the current if you go with Haskell/Scala. ",1532806899.0
DannyNullZwo,"Some of the Scala developers tried to do a game engine in a reactive programming way back in 2014. He has a nice presentation. He is talking about ask the things you have to look out for. GC problems on the jvm and so on.

https://speakerdeck.com/axel22/a-reactive-3d-game-engine-in-scala?slide=19

Ps: generally speaking is it no problem to develop a game on the JVM. There are so many successful ones out there. So just pick the programming language you are most comfortable
 with.",1532853835.0
Milyardo,"Could it be done? Probably. People typically don't use the JVM when they have real-time performance requirements. Garbage collection and JIT make realtime performance nearly impossible to reason about.

You could use scala-native without a GC, but you're one of a few people in the world to attempt game development in that context. So if you're looking to save time, it's not going to happen.",1532810247.0
CinnamonHeart,"It's not Scala, but I found F#+Monogame to be an enjoyable development experience. It was a very simple game, though -- it wasn't anything particularly intensive, so I can't speak to efficiency.",1532831891.0
mysticfallband,"I really wish someone could write a Scala binding for Godot game engine. As far as I know, it should be possible since the engine supports variety of ways to integrate non-official languages, and there are many open source language extensions even for such a language like Haskell.",1532879293.0
MyFunc,There are a huge number of companies using Spark. Far too many to list here I would guess. Going looking at job advertisements if you want to get an idea on what kinds of companies are using it.,1532716578.0
zinofire,Johnson Controls uses spark,1532714100.0
Gregabit,[This should give you more information on how companies in the UK are using Spark.](https://www.itjobswatch.co.uk/jobs/uk/apache%20spark.do),1532716991.0
joshlemer,"We are using Flink at www.districtm.ca which is in the adtech sector, not sure I'm really at liberty to say what exactly it does though. We also use spark quite a bit.

If you have more specific questions I could answer those maybe.",1532717167.0
colindean,"These kinds of under the hood articles really let the syntactic-sugar of Scala shine. Imagine if you had to do this all by hand for every class you wanted to have as a case class. Oh, wait, that's Java!",1532735644.0
Philluminati,"A nice article, thanks.",1532711305.0
kodablah,"Nice, will be even more useful when, per the roadmap, it supports non-AWS tech. Is there anywhere I can read what all the API calls are? Also, to confirm, this doesn't contain a built-in DNS server but instead just aggs zones and zone changes and then the outside is expected to update their DNS server w/ zone changes from this?

EDIT: Ok, I see https://github.com/vinyldns/vinyldns/tree/master/modules/docs/src/main/tut/apidocs",1532709656.0
ronaldc82,"We were also looking at overops but their prices are insane, so we are now checking out google stack driver error reporting plus debugger. Also sentry looks decent. Of course overops looks great but as a startup we cannot afford 50k a year",1532630250.0
cittatva,An elasticsearch+logstash+kibana stack is pretty easy to setup.  ,1532636770.0
lihaoyi,"Cool post. I think more Scala libraries should do things like this: using clever type-system magic, but in a way that even an un-sophisticated user can benefit from without needing to fully understand the cleverness. Far too often, I see libraries end up forcing the user to learn everything the library-author had to learn, which is tough given library authors are almost by definition more advanced than the typical user.

One rule of thumb I've used regarding implicits (everyone's favorite bugbear) is to only by-default use implicits present in companion objects, whether implicit conversions or implicit parameters. 

That way they are always automatically resolved, and a user can benefit from you e.g. using implicit constructors/typeclasses for method-type ""overloading"" at a callsite, but never have to deal with issues like missing imports or implicit-name-collisions themselves. As an example, my [Requests-Scala](https://github.com/lihaoyi/requests-scala) library has tons of implicit conversions, but they're all in companion objects so a user will never have to import them, and at call-sites it looks no different from overloading.

Furthermore, if they do get confused by the unfamiliar type in the signature that is being implicitly-constructed, it's only one jump to go to the companion object of that type, which we have by-convention declared all implicits to reside within. So at least they can puzzle through the implicit behavior based on what's immediately in front of them, rather than having to go duck hunting high and low all over a library's codebase for the missing implicits they need e.g. to import.",1532596237.0
Jasper-M,Neat trick. Unfortunately \`U#Value\` will no longer work in dotty/scala 3.,1532615345.0
u_tamtam,Reminds me of https://medium.com/@maximilianofelice/builder-pattern-in-scala-with-phantom-types-3e29a167e863 with a good illustration of how phantom types help enforcing such rules.,1532861455.0
hyperforce,"The new ""show implicits"" feature is insanity. It's like exploring a hidden world.",1532615744.0
1Wittgenstein1,Will they now let me open two projects in the same window.....It drives me nuts switching windows all the time,1532595115.0
BroodmotherLingerie,"Backup your `*.iml` files, because this version re-generates them differently, in case something went wrong. (We keep those in `.gitignore`).",1532556049.0
vitalijzad,"Dear JetBrains, I never wanted to create Kotlin classes and never will. Please allow me to remove Kotlin support from IntelliJ.",1532580935.0
naftoligug,"The title should be Scala improvements, as the link is to the Scala anchor on the page",1532555425.0
,"Why don't Scala developers ever say thanks to JetBrains for all their hard work on Intellij? Since you folks won't, I will. Thanks! To JetBrains for doing an all too often thankless job for so many Scala developers! I sincerely appreciate your hard work on Scala!",1532737844.0
elacin,"Those are some cool features!

I've been wanting the auto completion of pattern matching branches since forever, 
and the implicit hints must be great for diving into new code/libraries - can't wait to play more with it.

",1532735009.0
yawaramin,"I recently installed the latest. It's gotten a lot faster, and feels more lightweight. Right now, it's certainly the best tooling for Scala. Nothing I've tried comes close.",1532837646.0
m2spring,"Started to use 2018.2 today on Ubuntu (xfce with ""focus follows mouse""): Whenever I switch the desktop workspace away from  where Intellij is on and move back, Intellij has changed its z-order to be underneath all other windows (on that workspace). Somewhat annoying. It looks like a regression.",1532566083.0
falconepl,"Have you noticed that the underline that marked implicit conversion application is not shown anymore? It's still enabled by default in IntelliJ's Scala options, but when I write e.g. `val someRange: Range = 1 to 5` I don't see `to` method being underlined in 2018.2, as it was in previous version.",1534358284.0
,"I don't know what it means either, but the maintainers of a library can probably help guide you if you want to study in depth. And that's usually where I start … read the doc and then talk to the maintainers if I have questions. Like, for [Cats](https://typelevel.org/cats/) I recommend reading [Scala with Cats](https://underscore.io/books/scala-with-cats/) and maybe exploring the [Infographic](https://github.com/tpolecat/cats-infographic) and asking questions on [Gitter](https://gitter.im/typelevel/cats).

In any case I think most of those lists on job descriptions are aspirational … ideally you know something about some of these. But I wouldn't worry about it too much.",1532544226.0
jackcviers,"How did you learn Spring?

Edit: I realize that is a vague question, but what I'm really asking is: how do you learn anything that you are unfamiliar with?",1532543764.0
beezeee,"> in my opinion it brings no actual value

This suggests you would not be happiest working somewhere that invests in functional programming. Is there a reason you feel inclined to learn FP beyond seeing job openings that mention cats?

I believe there's still a reasonable job market for scala-as-better-java (my impression is that FP shops are still the minority,) and FP is a pretty deep topic that takes a reasonable commitment to progress with. Personally I think it's absolutely worth the effort, but I don't know if it's a terribly efficient way to widen your options for employment.",1532545234.0
eeperson,"For cats, I recommend ignoring the type classes for now and learning things one [data type](https://typelevel.org/cats/datatypes.html) at a time.  These are all fairly isolated and serve a specific purpose (so you won't have a need for all of them).  For me the gateway drug was [OptionT](https://typelevel.org/cats/datatypes/optiont.html).  I understanding the motivation for this type is pretty easy.

Do you ever have to call a web service that may or may not return a result?  If you do you might end up with results that have the type `Future[Option[A]]`.  If you have results of this type what happens if you want take that result and do some calculation so you end up with a new value of `Future[Option[B]]`?  You end up having to do something kind of awkward:

    val apiResponse = ... // webservice response value
    val calculatedValue = apiResponse.map(
      _.map { actualResponse =>
        // ... do stuff
      }
    )

You have to unwrap it twice to do anything.  This gets even worse if you have 2 values of similar structure that you need as inputs to a calculation.  This is where `OptionT` comes in.  It allows you to treat these double layer wrappers as a single layer wrapper.  So, the above example can be rewritten as:

    val apiResponse = ... // webservice response value
    val calculatedValue = OptionT(apiResponse).map { actualResponse =>
      // ... do stuff
    }.value

From there it is not hard to see the utility of `EitherT` and `Nested`.  Once those make sense you will start to the utility of the type classes since that is the only way you can write those data types.  ",1532577835.0
beezeee,"Future is a really poor abstraction when you need this kind of control.

There are several popular streaming solutions (akka streams, fs2, monix) that can throttle and rate limit fairly easily, either using built-in features, minimal custom code, or add-on libraries.

As soon as you start to want any more say in how your async code is evaluated, you would do well to look into one of these options, or you just start re-implementing things that they've already solved for you.",1532529551.0
Daxten,"https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/throttle.html

I started using streams for this kind of things, you can do sth a la:

    val urls = List(""url1"", ...)

    Source(urls).throttle(5, 1.second).mapAsync(parrallelism = 3)(e => Get(e)).runForeach(e => println(e.result))
",1532530351.0
m50d,"There might be, but the right thing is to separate concerns. Put a limit in the thing that actually needs to be limited (probably `barService`?) rather than trying to do something at the `Future.traverse` level.",1532530912.0
jackie_pwn_asses,"I work with Twitter Futures and not Scala Futures, so this may be subtly wrong, but you can do something like this: 

    def traverseGrouped[A, B](xs: List[A], chunkSize: Int = 50)(f: A => Future[B]): Future[List[B]] = {
        val grouped = xs.grouped(chunkSize)
        grouped.foldLeft(Future(List.empty[B])) { (intermediateResult: Future[List[B]], group: List[A]) =>
            for {
                completed      <- intermediateResult
                processedGroup <- Future.traverse(group)(f)
            } yield completed ++ processedGroup
        }
    }

There's some way to extend the Future companion object to add this method but it's not really worth it unless you're building a library, IMO. ",1532536447.0
pellets,"You can use `grouped` on myList to get N elements, where N is the number of operations per unit time. Then traverse over each group with a sleep in between.",1532568182.0
beleaguered_penguin,https://medium.com/anyjunk/how-to-traverse-sequentially-a071afacc84d,1532687264.0
Daxten,"You defined it for List[Double], so List[String] is not a valid argument for this function. The implicit stuff you saw has nothing to do with the Nil here.

An Empty List is Nil, that's different to ""An empty list is actually a list of just Nil"".
List is always either Nil or a head element + tail list

the second case just makes it return a value faster, since if you have 1 billion other numbers after the 0, you won't have to calculate those",1532505331.0
m50d,"> Why exactly does case Nil return 1.0? I ran some tests in the REPL and an empty list of type List[String] results in an exception that hints that there is an implicit value available for an empty list of types List[Double] and List[Int] (I didn't test any others). Is it Nil itself that has the implicit value when it's part of one of these list types? (An empty list is actually a list of just Nil, correct?)

No implicits are involved. `Nil` is the empty list, not a list of `Nil` (these are historical names).

> Is the second case really necessary? I did not run any tests, but the 3rd case should cover the second and give the same result, no? (If any element in the list is 0.0 you'll get 0.0 back unless I'm missing something.)

Agreed. I guess it short-circuits the recursion since once the product is `0.0` it will always be `0.0` whatever else you multiply by.",1532506558.0
beleaguered_penguin,"Imagine you were doing a recursion. Eventually, you would have to do `something * product(Nil)`, when you get to the base case.

Imagine you're just doing it on a single item list if it helps: `3 :: Nil` So,

`product(3 :: Nil) = 3 * product(Nil)`

If it were anything other than 1, it would ruin the rest of the calculation. If it were zero, the whole product would be zero. If it were 2, your result would be twice what you'd expect (in this case 6).

`Nil.product` has no choice but to be 1.",1532507555.0
odolha,">(An empty list is actually a list of just Nil, correct?)

No, an empty list IS Nil, it's not a List of Nil (e.g. it's not List(Nil))

> Is the second case really necessary? 

I think you're right, it might just be to showcase match use case, and also might provide slight performance benefits",1532505303.0
anterak13,"Hi,

it is fairly common to use the neutral element of the binary operation as default when folding/reducing over some empty collection. 

For the second case in your pattern matching example, it is the absorbant element of the binary operation that is used. It is a performance optimisation, because there is no need to look at the tail of the list if you hit the absorbant element.

The standard library implementation of product for lists requires an implicit instance of the Numeric trait ```def product[B >: A](implicit num: Numeric[B]): B ``` 

The Numeric trait has a ```def one: A``` and ```def zero: A``` method which give you these special values, and implicit instances for common types Double, Float, Int, Long, etc. are readily available.

https://www.scala-lang.org/api/2.12.6/scala/math/Numeric.html

The pattern can generalize beyond numerics to any binary operation with  neutral and absorbant elements. So you can have it work for  (Double, _ * _, 1.0, 0.0), for (Boolean, _ && _, true, false),  (Boolean, _ || _, false, true), etc.

If you don't have an absorbant element, just a neutral element and an associative operation then you are using a Monoid you can implement reduce once and have it work for any monoid. 
",1532506770.0
_gDanix_,"I don't think this is a Scala version issue, since Apache POI is designed for Java, and, as far as I know, Scala isn't involved in its development. Have you tried a clean build?",1532504164.0
rialmat,"Looks interesting! But the job page says ""We are not able to offer Visa sponsorship at this time"". So just to confirm, is it still the case? I'm currently working in the US on an H1b visa, do you guys support H1b transfer?",1532462744.0
aethermass,"Lol. Trump is the president. The government functions horribly even when a decent administration is in place. This is coming from someone with 15 years of government service. I quit government service last year and will NEVER go back.

Be warned, fellow Redditors. ",1532476015.0
havok2191,"If you have callbacks that emit a single Event you can use Future/Task/IO to model convert those. If you have callbacks that will get invoked multiple times, you need a streaming abstraction like Akka Streams, Observables, or FS2",1532440529.0
SystemFw,"Note that fs2 already has a file watcher:

https://github.com/functional-streams-for-scala/fs2/blob/series/1.0/io/src/main/scala/fs2/io/file/Watcher.scala

",1532519522.0
gwogan,"Just a note there is a weekly jobs thread here. Also, you haven't posted any information about the company or how to apply.",1532454385.0
duhace,if you still need someone late next year i might apply. I have work I have to get done here first though,1532474903.0
sciss_,Congratulations! I hope you find opportunity to work on these things in your post-doc life :),1532425885.0
ikamthania,Congratulations!,1532426855.0
elacin,"I finally had the time to sit down and finish reading it now. 

Scala.js is huge achievement, and the thesis is very well written as well.

It makes me happy to see how such a principled development process pays off and leads
to the friction free, performant and stable project we have today. 

Cheers for that, and congrats! :)
 
",1532736145.0
terence_shill,"Congratulations on writing this thesis. Even more so since english is not your mother tongue I assume (unless you grew up bilingually). 

I wanted to dive into the the inner workings of Scala.js and Scala Native out of curiosity since a while ago and this seems like the perfect starting point. 

Out of curiosity, are there requirements that a platform/runtime needs to fulfill in order to target it with a compiler plugin like Scala.js or Scala Native?

* like having a GC available, or at least the possibility to provide your own like Native did with boehm and now immix?
* would the reified generics in .NET/IL be problematic/make things more compilcated? I would assume for just running scala they can be ignored but that ignoring them would make interop painful/impossible?
* what about interpreted languages like PHP which eliminate all state after a request is done?

Also, would there be a clear winner between compiling to a language (let's say Java) vs compiling to the platforms bytecode to which the language compiles (in this case Java)?

Cheers",1532536058.0
majorpasza,"Just yesterday I've watched this thing, where this guy has a very strong opinion on driving the future of a language by a PhD projects. 
It is worth watching IMO. I have no strong opinion here, but maybe some one will be interested in this one.

https://m.youtube.com/watch?v=v8IQ-X2HkGE&feature=youtu.be",1532434418.0
volpegabriel,"Hi, author here. 

Fs2 Redis is a purely functional Redis client built on top of Lettuce, Fs2 and Cats Effect. Expect more documentation to come soon! And here's the release tag: https://github.com/gvolpe/fs2-redis/releases/tag/0.1.0

Please give it a try if interested and report any bugs you might find, much appreciated it!
",1532395277.0
Weavile_,"> immutable variables and while loop are discouraged

I’m confused. I know while loops are discouraged but shouldn’t this be mutable variables?",1532398725.0
Daenyth,"One note: fs2 is a cats library, not scalaz",1532379885.0
beep_dog,"Gradle doesn't have ""reasonable support for scala"" ?

At least as a non-library developer, gradle has worked perfectly fine building anything scala. So I might dispute that one. And it's probably easier to stay away from SBT, as it's painfully complex.",1532382405.0
amdelamar,"> Scala believes you know what you do, and lets you do things in your way.

This. I'm new to Scala, but I've quickly found out you can use as much or as little Scala/FP sugar in your code as you like. There are dozens of ways to accomplish the same work. And thats what excites me about the language in general. ",1532438942.0
m50d,"Would be worth addressing the FUD that Kotlin folks put out around `null`, as there are some subtleties. Is Scala less null-safe than Kotlin? No: pure Scala code is completely safe because it never uses null and uses `Option[T]` where Kotlin would use `T?`, Scala code that interoperates with Java can be unsafe if you don't explicitly check nullable return values (by wrapping them in `Option(myJavaMethod())`) just as Kotlin code that interoperates with Java can be unsafe if you don't explicitly check nullable return values (by assigning them to `T?` rather than `T`).

The history of Typelevel given here is false, FWIW; Typelevel predates cats (indeed scalaz was at one point part of typelevel). I'd also dispute the ""they boil down to don’t be a jerk"" characterization; I don't think that's a fair reflection of the written CoC (I wouldn't have a problem signing up to their code if that was all it was) or how it has historically been applied by typelevel moderators.

Would be worth being more concrete about what SBT does and doesn't help with. Personally in nearly a decade of Scala I've never found SBT to be worth the trouble. Maven didn't support cross-building against multiple versions of Scala until recently, but it's very rare that a newbie would actually cross-build: applications obviously only need to be built for one version of Scala, and unless you're actively working on applications that use multiple different versions of Scala, your personal libraries only need to be built for one version too. Even organisations of ~100 people often don't need to maintain internal libraries on an older version of the language. SBT is visibly in use by very core libraries like cats or shapeless (which *do* need to actively maintain their previous-version-of-scala versions) so I think people sometimes get the impression it's ""the"" Scala build tool, but what makes sense for those libraries isn't necessarily what makes sense for newbies.",1532425814.0
vivri,"Unfortunately, in the mobile version in Reddit's web-view, the header takes up the entire screen, without the option to close it.",1532708403.0
Philluminati,"Cake feel like a huge anti-pattern. You’re choosing inheritance over has-a relationships and losing control of how many instances of traits/objects/connections get created or shared, in order to get some ugly god objects with compile time DI. That’s how it feels to me. However I don’t blog articles on the internet nearly as harsh as my opinion. Why is this? ",1532363943.0
thesuperching,"I heard that cake patten is anti-pattern. 
Is thin-cake pattern an anti-pattern ?
http://di-in-scala.github.io/#modules",1532485346.0
aeriaglorisss,How practical is it to develop android apps in scala-android?,1532806527.0
n0lledge,"I'am currently looking for a scala client for redis. I came across these two: 

* [Rediscala](https://github.com/etaty/rediscala)
* [scala-redis](https://github.com/debasishg/scala-redis)

The first one considers itself non blocking (how does this work  for the single threaded redis anyhow?) while the second is favored on the redis website. Rediscala seems to lack maintenance...

Can you recommend one of these clients or a different one? We are planning to run a redis cluster..",1532435082.0
Darksant,"How could you compute the difference of diagonals of matrix in a more functional way? I have tried this but feels really imperative, however I can't think of a better solution. Could you help me?

    def diagonalDifference(arr: Array[Array[Int]]): Int = {

    val dimensions = arr.length
    var diagonal1 = 0
    var diagonal2 = 0

    for (i <- 0 until dimensions) {
      diagonal1 += arr(i)(i)
      diagonal2 += arr(i)(dimensions-1 - i)
    }

    return Math.abs(diagonal1 - diagonal2)

    }
",1532709553.0
d3ve10p3r,What framework to use for Rest API integration tests? ,1532741307.0
Tayacan,"I'm new to Scala. What are some libraries that everyone should know? So far, it seems that cats and fs2 implement a lot of useful fp stuff (I am familiar with functional programming already).

I am also looking specifically for libraries for:
* http, the simpler the better - if I can make a function from requests to responses and call it a day, I'll be happy. So far, http4s looks promising.
* Databases - specifically, I'd like to interact with a postgres db. I prefer something strongly typed. Slick looks promising.
* Json serialization. Haven't gotten around to look at these yet, so suggestions are welcome.

If you know any alternatives that you feel are better than the ones I've listed, please let me know! ",1532783190.0
thesuperching,"Is mixin-composition useless, since always in my cases that it can be replaced with object composition.",1533095061.0
know_not_much,Great talk. Those audience are so brilliant. Some of their observations clearly surprise Martin.,1532330750.0
inchester,">Does this mean through this mechanism we don't need pattern matching on the types?

What does Martin mean by ""that's a very deep realization""? What is pattern matching on types? Is that something like how shapeless handles recursion on `HList` when differentiating between `HNil` and `::` for example? What would pattern matching on types look like in that case? Any examples for languages that do this?",1532357690.0
wookievx,"For me implicit functions are gonna be great for tagless final programming style. As most are aware monad transformers are rather inefficient in Scala (question is, will opaque types help with that, would be great if there is someone who knows something about that). So the best solution we know so far is usage of libraries like [cats-mtl ](https://github.com/typelevel/cats-mtl)and [meow-mtl](https://github.com/oleg-py/meow-mtl). But unfortunatly to avoid performance overhead one have to write interpreter using quite cumbersome code, like:

    for {  
        //setup MVars, Refs, etc  
        res <- Consumer(var1.put) runTell { implicit tell =>  
            ref1 runAsk { implicit ask =>  
                ref2 runState { implicit st =>  
                    //run your program  
                }  
            }  
        }  
    } yield res

And using implicit functions it should be possible to simplify it to something like this:

    for {  
        //setup MVars, Refs, etc  
        res <- setupInstances(var1, ref1, ref2) {
            //run your program
        }  
    } yield res

Previous code snipet can't be simplified like this because `{ implicit arg ... }` accept only one parameter.",1532337366.0
BroodmotherLingerie,Are implicit function types getting a backport to 2.x?,1532333823.0
Ukonu,"This might help with a common mistake I've seen at some companies I've worked with. When creating a route with akka-http (and spray), like the following:

    path(""/things"") {
      get {
        HttpResponse(???)
      } ~
      post {
        HttpResponse(???)
      }
    }

If you don't add the tilde, making the GET and POST a single expression, then only the POST gets registered. It looks minor but I've seen someone spend almost an hour not understanding what was happening.

While very cool, I was still a little skeptical even after thinking about the table/row example and the ""avoid passing arguments"" example. This ScalaDays presentation helped me think of even more possibilities: [https://slideslive.com/38908156/applications-of-implicit-function-types](https://slideslive.com/38908156/applications-of-implicit-function-types)",1532357412.0
jackcviers,"A curried function is a function that returns another function.

    A => B => C

Represents two functions:

    type Second = B => C
    type First = A => Second

Written this way, it is clearer that a curried function returns a function.

You call it by calling apply on the first function,  then by calling apply on the second function. 

    first.apply(a).apply(b)

In scala you can omit the word apply on Function objects:

    first(a)(b)

uncurry takes a curried function of arity 2 (two arguments) and returns a regular Function2 object. So, you've got to return

    (a,b) => f(a)(b)

This return type is

     (A,B) => C

.

",1532298773.0
niteshadow53,I’m just going to drop this here... https://github.com/fpinscala/fpinscala,1532315113.0
Bolitho,"I struggled also when I started to read and *work* through this book. Lately I discovered the book ""Functional programming simplified"" by Alvin Alexander. It takes a totally different approach: it tells everything to the reader and repeats it twice or more often. So if the former book is kinda *dense*, the latter is very in detail. I am almost through it right now and hope to acquire enough knowledge and competence to go back to ""Functional programming in Scala"" again and then having a better time with it. I believe it covers the theory behind many functional concepts more accurate and makes you reimplement many of them. So having read both and worked through their exercises will hopefully enabling me to really get into consistent functional programming finally. ",1532294076.0
Milyardo,"> I was not shown how to do this in the preceding chapter. There was no mention of currying being in the form of f(a)(b)

This isn't currying, and you implement currying in 2.3, which I assume you had no problem with. This is an example of function application, which you've been doing all throughout this chapter. The what seems to be confusing you is how to apply two functions in a row for some reason.

>Am I expected to struggle throughout this entire book trying to figure out these little subtleties?

The point of this section is not to learn how to apply functions, but that parametrcity only allows one correct implementation of the function, anything else you could possibly write would fail to compile. Which is exactly what happened in your case. The problem here might be that the compiler error was unhelpful instead of anything the book has done wrong.

> I get that this is a difficult book, but to me, I want to focus on the functional programming part and not the syntax.

It's an intermediate level Scala book, so you shouldn't be having problems with syntax if you're prepared to see this book to the end.",1532285282.0
Milyardo,"As an aside, why did you expect your solution to work? I don't think it's just a matter of syntax like you claim, the solution doesn't make any sense semantically.",1532285703.0
szienze,"Even if you did not get a syntax issue regarding tuples, your solution would not have compiled as you are trying to apply a `B` to a function that is defined over `A => B => C`. Note that `f` does not change when you apply `a` to it.

When you apply `a` to `f`, you end up with an anonymous function that is `B => C`. You can then apply a value of type `B` to this to obtain a value of type `C`. Therefore `f(a)` gives you `B => C`. You have to apply `b` to this to obtain `C`. If the syntax confuses you, the following is the same as the solution:

    def uncurry[A,B,C](f: A => B => C): (A, B) => C = 
      (a, b) => {
        val intermediate: B => C = f(a)
        val result: C = intermediate(b)
        
        result
    }

Or if you want to be explicit in your types, we can change this as the compiler suggests. (Note the curly brackets)

    def uncurry[A,B,C](f: A => B => C): (A, B) => C = { 
        case (a: A, b: B) => 
          val intermediate: B => C = f(a)
          val result: C = intermediate(b)
        
          result
    }",1532290102.0
brees-no-football,"If it makes you feel any better, I am in the same spot of this book and feel exactly the same way you do. I find myself poring through sections 4 and 5 times to see if I missed something because the answers seem to be things that haven't yet been explained to me.",1532297346.0
know_not_much,Does more harm than good. Why to teach it to young programmers entering Scala? The whole reason I code in Scala is to avoid boiler plate code. but cake introduces so much boiler plate code if done at a project level.,1532318439.0
red__what,Isn't it an anti-pattern though? I tried implementing it and found it to be nasty,1532299967.0
AesaKamar,"I had never actually seen this much in the wild since it is so generally lambasted.   
Thanks for sharing the cautionary tale. ",1532525624.0
jokasx,"Thank you for this series and please continue. I will see it soon.

I'm happy someone goes to the effort of explaining this since the documentation I found around the web was confusing about it and never saw a clear working example of it working.

Although I have seen it used in internal projects or variations of it which were never understandable or really useful. So these kind of videos and information is really good for people that will see this in other codebases and have no idea what they are looking at.",1532912635.0
reactormonk,John Pretty (original author of the cake pattern) has a good conclusion: https://twitter.com/propensive/status/856150425304780801,1532260085.0
thesuperching,How about thin cake pattern? http://di-in-scala.github.io/#modules,1532356079.0
Arneball,"Love it. This could be what actually makes is feasible to create Scala scripts.  I don't care about actor systems and other ceremonial crap. Just let me get an url.
Finally.",1532195405.0
ciberon,"I get that you wanted a very simple API to interact with, but I have two questions:

Why have it throw exceptions when the request fails?  


Why synchronous?  
The questions are because this design decision makes this library look much better for scripting than actual production applications. This may be intended and there's nothing wrong with that. Just trying to understand.  
",1532180450.0
dtechnology,"Interesting, especially the decision to make a synchronous HTTP client.

The main two points seem to be simplicity (both in LoC and mental overhead). However, in practice the HTTP library does not add any. In the examples all of the ""overhead"" would already exist in your project (like ActorSystems, `unsafeAsync` etc). So at very little cost you gain async and/or pure by using the matching HTTP library.

Seems useful in the context of scripting, but not something I would use in a continually running production system.
",1532170642.0
pheymann,"There is also:
   
   https://github.com/scalaj/scalaj-http

for people looking for a simple Http Client written in Scala (not the author).",1532204403.0
geggo98,"Nice. For me it looks like this library is conceptually more locate on the ""Kotlin side"" than on the ""Haskell side"" of Scala. So it looks like it's a nice addition for the Scala ecosystem on a side where it's really needed: the pragmatic, engineering and scripting side!",1532195794.0
u_tamtam,"Hi /u/lihaoyi , this looks great!

By chance, do you have any plans to publish requests-scala against scala-native? I can see it coming well in hand with short-lived scripts server-side which I'm currently rewriting from python :)",1532863055.0
fish-,I've wanted this for a while! Thank you,1532174080.0
SystemFw,"The name `mtl` is an historical accident, at this point. The `mtl` library in haskell used to provide the concrete monad transformers types, which are now in `transformers`.

What `mtl` is now is _a final tagless encoding of common effects_ : like state, reading from an environment, and so on.

The term `mtl-style` is used to refer to an application of `final tagless` to encode effects, since `final tagless` is a more general term for a technique to encode DSLs (so it's linked to the interpreter pattern).

I have an in-depth explanation of what `final tagless` means here:

 https://gitter.im/scala/scala?at=5a97f40de4ff28713adf49d7

and an example repo using final tagless + transformers to write a complex interpreter here:

https://github.com/SystemFw/Befunge-93

These days, final tagless abstraction backed by fs2 + cats-effect implementations is my go-to technique for both business logic and custom concurrent abstractions, it's really nice.

Btw, the article you were missing in Haskell is:

https://blog.jle.im/entry/mtl-is-not-a-monad-transformer-library.html
",1532122733.0
beezeee,"> all my code will be monadic

I personally don't see a problem with this. We use Free algebras through a majority of our codebase, at a low-level over a co-product of algebras that model the different effects required for implementation, and at a higher level modeling specific domains, targeting that lower level.

The vast majority of our code exists in for-comprehensions or applicative combinations.

Where we have complex logic, we put in extra effort to extract ""pure"" functions for ease of testing, but the truth is that it's trivial to test even the monadic code using a substitute interpreter for our lower level algebras that just threads generated values through.

Ultimately when you define your programs in terms of a free algebra, your code is all pure anyway. I think it's fine to have monadic code everywhere.

If you're worried about type-plumbing adding noise to a codebase, there's ways to mitigate that. I think Freestyle aims towards this, and includes support for both Free and Tagless. [freek](https://github.com/ProjectSeptemberInc/freek) accomplishes it for Free, trading a little bit of verbosity for added flexibility in program composition.We use our own solution [composefree](https://github.com/mblink/composefree) which commits more heavily to a given source algebra in exchange for near-zero type plumbing noise, and gives you out-of-box support for arbitrary nesting of free monad/applicative based programs.",1532093579.0
paul_f_snively,"I only have a couple of comments:

> However, would this not mean that basically all my code will be monadic

Yes.

> complicating type signatures and hampering readability?

No, but this is really an observation about familiarity, not anything more objective than that. At this point (after doing pure FP in Scala for the last six years or so), I can't readily read _non_ monadic code!

First, I assume we're talking about a REST API today, in which case, as far as I'm concerned, we're talking about [http4s](https://http4s.org/). In http4s, we want to write an `HttpService[F[_]]`, which is a type alias for `Kleisli[OptionT[F, ?], Request[F], Response[F]]`. Usually you use some [syntax support for building `Response`s](https://github.com/http4s/http4s/blob/v0.18.15/dsl/src/main/scala/org/http4s/dsl/impl/Responses.scala), so you can just say something like `Ok(""This is a perfectly good plain-text response."")`. But thanks to some cleverness with `EntityEncoder`s, such as [this](https://github.com/http4s/http4s/blob/v0.18.15/core/src/main/scala/org/http4s/EntityEncoder.scala#L185-L191), you can also say something like `Ok(IO(""This is a perfectly good plain-text response.""))`. The latter is a bit silly, of course, since the ""effect"" is a pure value. But the point is you can replace it with whatever effectful computation you like.

So this is where your algebra and `Free` or finally-tagless program comes in. Personally, I'm pretty drawn to [Diesel](https://github.com/lloydmeta/diesel) for defining finally-tagless algebras and, most importantly, their composition, with a minimum of muss and fuss. Just interpret into `F[_]` where `F: Effect[F]`, use that same `F[_]` to parameterize your `HttpService[F[_]]`, and things both read and work very well.",1532095455.0
jackie_pwn_asses,"Personally, I'd rather my codebase be littered with well understood monads than with custom types that do who knows what. 

With that said: I'm working at a scala shop that is not huge into the type-theoretic world of cats/scalaz (we use finatra). As much as *I* would like to be using cats, it's just not gonna happen here. I've tried using these tools and it just ends up causing confusion for the next person. I work with smart people but none of them have spent the 100+ hours I've spent working specifically on understanding cats, HKTs, tagless final, free, etc. It's not their thing and that's fine.

(I just wish I could convince them to use OptionT/EitherT and I wish they'd use Either instead of throwing errors. But that's life). 

   
",1532133328.0
m50d,"> However, would this not mean that basically all my code will be monadic, complicating type signatures and hampering readability? I understand that it's bad to have IO littered all over the codebase and I'd guess having Free[T] (or an alias thereof) littered everywhere would be equally undesirable.

http://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html might help? Your domain-action code will be monadic (or, from another perspective, imperative), but performing actions should be a small proportion of your code: most of your business logic should be pure, well, logic.

> Writing this, I kind of realize that it's probably smart to only expose a sort of world-facing API as such algebras and compose the inner logic out of simpler functions. Intuitively I'd say such an API is by definition effectful. Am I way off here? 

It's normal for the outermost layer of your program to be effectful - your program eventually does something, after all. But ideally you'll have a thin imperative shell around a functional core, and your domain algebra is a way of shifting effectful operations out of the core.

Layer 1 is outright imperative, layer 2 is your domain action algebra which, like any monadic code, you can equally validly view as effectful procedures or (somewhat more complex) pure values, depending on what questions you need to answer about it. But ideally most of your code should be right down in layer 3 where it's all pure.",1532094975.0
teknocide,I found this presentation on the subject of finally tagless quite interesting  https://youtu.be/1h11efA4k8E,1532091847.0
SystemFw,"I would suggest you start with final tagless rather than Free, since:

- Composing multiple algebras is easier.
- It's easier to model things that are more specific than Monad (e.g. MonadError).

Using any kind of interpreter pattern is a really, really powerful means of abstractions, it's worth investing your time there.

> However, would this not mean that basically all my code will be monadic, complicating type signatures and hampering readability?

I'll flip this on its head: all of your code will be made of first-class _programs as values_, which you can operate on not just monadically, but with many other principled and powerful abstractions like Applicative or Traverse, as well as store in data structures, manipulate, and so on. This is a powerful concept, I have written down some of its advantages recently

https://www.reddit.com/r/scala/comments/8ygjcq/can_someone_explain_to_me_the_benefits_of_io/e2jfrg8/


> I understand that it's bad to have IO littered all over the codebase and I'd guess having Free[T] (or an alias thereof) littered everywhere would be equally undesirable.

No, that's not correct :)

The reason why is good advice to not have `IO` littered all over is not to avoid monadic code (and btw having `IO` all over is _a million times better than side effects_, as I explain in the link), but because `IO` is too powerful, it can do too much, so a more constrained power in your functions makes things a bit easier to reason about.

Having `Free[ConstrainedLanguage, A]` all over solves this problem, since you only have the subset that your DSL has defined. Final tagless is even more interesting in this regard, because even though your whole program will eventually be in `IO` (when you instantiate your `F[_]` to `IO`), all the individual functions are still constrained, since they only see `F[_]: DomainSpecificAlgebra1 : DSL2]`
",1532123405.0
hyperforce,"This is an interesting question. But I'm curious, why did you post it to /r/scala specifically, rather than somewhere else?",1532118574.0
AlexITC,"You might want to look the approach that I built for [playsonify](https://github.com/AlexITC/playsonify), the idea is simply to extend the [FieldOrderingParser](https://github.com/AlexITC/playsonify/blob/master/playsonify/src/com/alexitc/playsonify/parsers/FieldOrderingParser.scala) specifying the expected type and you get the validations, for example, I use the [FieldOrderingSQLInterpreter](https://github.com/X9Developers/block-explorer/blob/master/server/app/com/xsn/explorer/data/anorm/interpreters/FieldOrderingSQLInterpreter.scala) which uses the typeclass pattern to map the condition to SQL, this is an implementation: [BalanceOrderingParser](https://github.com/X9Developers/block-explorer/blob/master/server/app/com/xsn/explorer/data/anorm/interpreters/FieldOrderingSQLInterpreter.scala).",1532090941.0
kennyOliveira,"Other way of doing it is like that, remember you can define variables in for comprehensions:

    for {
      p           <- all
      parentName  = p.name // you can define variables in for comprehensions
      child       <- p.children
    } acc = acc ++ Seq(parentName, child.property1, child.property2, child.property3)
    

My example is just to remember that you can also do that, but the /u/tpolecat is more idiomatic and I would suggest you using his way",1532061280.0
,"It sounds like you want something like
    
    val names: Seq[String] =
      all.flatMap { p => 
        p.name +: p.children.flatMap { c => 
          Seq(c.property1, c.property2, c.property3) 
        } 
      }
      
",1532060246.0
somehappyendings,"
Edit: the for comprehension with temporary variables solution is cleaner.  Somehow I missed that when posting this.  

If you want an alternative, what about some small one-liner functions for clarity:

    def enumerateChild(c: Child) = c.produ ctIterator.toSeq
    def enumerateParent(p: Parent)  = p.name +: p.children.flatMap(enumerateChild)
    def enumerateAll(a: All) = a.all.flatMap(enumerateParent)

Note: I have not tested this code.

Side note: why All and not just a naked Seq[Parent]?

Edit: I suspect most Scala people will find the code above way too verbose.  It is not hard to read tpolecat's example once you are fluent in idiomatic Scala, and in his example you don't have to refer to enumerateParent's implementation to see what it's doing. 

However, this solution attacks the problem of making your code super explicit and clear by breaking the work to be done down into small, pure functions and gluing them together via composition, which seems like a very FP thing to so.",1532064718.0
Milyardo,"I would define a fold function for `All` and use that to compute your list of names.

    def foldMap[A : Monoid](all: All)(p: Parent => A, c: Child => A): A =
      all.all.foldMap(parent => p(parent) |+| parent.children.foldMap(c))

    foldMap[Seq[String]](all)(p => Seq(p.name))(c => Seq(c.name, c.property1, c.property2, c.property3))",1532100890.0
joshlemer,Removing this because it has already been posted today :-),1532034671.0
ancientmatingcalls,This isn't the place for this. ,1532027625.0
drfisk,"It's nice you enjoy Scala as the rest of us. And I'm sorry about the bipolar/psychotic symptom you describe in that thread -- that sounds pretty scary when it happens - definitely check that out. Maybe it's nothing to worry about, we all got our cross to bear (mine is general anxiety), but that's just life sucking from time to time. Still good to be alive and a great time to be a (Scala) programmer!

That said, I don't think you're ""punishing"" Lightbend by leaving this thread here. This is a forum for and by Scala enthusiasts, and have nothing to do with Lightbend the company afaik. Odersky is here once a month or so, but that's about it. You should probably try emailing them or something; and give it some time. Maybe they'll call you next week?",1532036492.0
lazic_,Please remain professional. Bashing people or organizations on the internet because of issues that happened between you and them is far from that.,1532253870.0
Philluminati,I’m joining your protest. I demand a telephone interview too!,1532161930.0
enverest,In the age of the Internet there exist such thing as phone interview? Wow.,1532121338.0
somethingconcon,"Some people might not agree with your choice to post but as a person who also suffers from some of the brain bugs I can sympathize.  And truthfully I feel that you are within your own right to post something like this.  This forum represents the Scala community, yup that's you and yup that's Lightbend as well. Cheers my dude.  Hope you get that interview :D",1532497271.0
yala3,I am not deleting this until they give me a phone interview.,1532028179.0
Ukonu,">John de Goes mentioned some of the OO features which are useful in the purely-functional approach as well: **first-class modules** (via object composition), **dot syntax** (calling methods on objects) and **first-class type classes/instances**

I'm starting to think 90% of the hate for OO is really targeted towards sub-type inheritance and the brittle hierarchies they sometimes lead to - people actually really like the rest.

Kind of like how 90% of the hate for implicits is probably exclusively for implicit conversions. Most people like Haskell typeclasses and C# extension methods. But those concepts got combined with something that sometimes looks like Javascript-level ""type safety"".

During my Spark courses, Scala newcomers occasionally tell me how they hate ""implicits"". I don't really blame them for the lack of nuance in that statement; this just might be a marketing problem. I'm excited by Mr. Ordersky's ScalaDays keynote about potentially fixing that. I'm also excited about the potential of combining implicit with defaults (see: [https://github.com/lampepfl/dotty/issues/1260#issuecomment-390894673](https://github.com/lampepfl/dotty/issues/1260#issuecomment-390894673)). All of this would make the ideas so much simpler to teach.",1532030086.0
RandomName8,"If anything, the way the Scala involved parties are addressing the language evolution is very professional, they care a lot, and are doing a lot with the scarce resources they have, specially when compared to languages backed by companies such as Oracle, Google, JetBrains and Microsoft. Props to them.",1532015040.0
sudkcoce,"""However, I think that Scala is still the “better Java”, despite Kotlin."" - 👍

The Scala community must emphasise this fact more in order to attract more users from the Java community. Because it's TRUE.",1532007392.0
aphexairlines,"> Parallelism is very tricky to get right, and Scala offers a number of libraries which make this task easier, by building abstractions. There are two main approaches: an actor-based, represented by Akka, and an FP-based one, represented by Monix/cats-effect and Scalaz/ZIO 

Finagle handles probably the most traffic in the Scala ecosystem (Twitter and its backend services) and it doesn't use either actors or monix/scalaz/cats tasks.  Finagle's Twitter futures are fairly similar to `scala.concurrent.Future`, and futures are one of the main approaches to parallelism in Scala.  I didn't see any usage of akka or tasks at Amazon either.  See also ""Parallel and Concurrent Programming"" in https://docs.scala-lang.org/overviews",1532007220.0
mr___,One business reason is that you get smart people eager to use a language other than Ruby/JavaScript applying for your job openings,1532007753.0
vjroby,"For more then one year I used Scala every day at work. Besides using it for Spark jobs on Hadoop, when I had to build an API from scratch using Play2 and Slick, it took a lot of time for every new feature. I followed the repository pattern for data access and I used ScalaTest for unit testing. I remember I tried to use Wiremock for integration testing (I was accessing an external service) and I can't because of Play2.  I had a lot of issues when integrating Mockito at first. And for every new repo using Slick I had to write a lot of code every time. Everyone in the company used Scala so I had a lot of people to reach out when I felt stuck. Out of curiosity, how do you guys handling things like that? Even the error handler in Play2 took a lot to implement it. After this experience I'm switching back to Spring and Java. I admit that learning FP in Scala is pretty awesome. I don't mind writing code but reinventing the wheel every time can be a bit frustrating. :)",1532009893.0
momslatin_dadsasian,"For a new project / codebase that's being started, what can be done to ensure that migrating to scala 3 won't be a problem or will just work out of the box?",1532019938.0
DreamOfKoholint,"""As competent, responsible software engineers, **we are more than capable to** **choose** how to best solve a specific problem.""

I see this as a business reason to not use Scala. With any team, you will have many people choosing the ""best"" way to solve a specific problem and which will lead to divergence.

In my experience at my workplace, even something as simple as picking a formatting rule in scalariform leads to divergence and wasted time. This is why I prefer prescriptive languages like Elm. Though, I will note this lack of prescriptiveness is an issue I see that not only lies with Scala.",1532037845.0
continuational,"It has a modern type system: sum types (sort of), type inference (although limited) and no primitive types that need special treatment.

It's hackable: Scala lets you take a lot of technical debt if the business needs you to do something quick and dirty, due to its weak treatment of effects.

It has a sufficiently advanced IDE: Type-based auto-completion, go to definition and find usages.

It has a production ready JavaScript backend. That means you can use Scala for essentially everything in most businesses.
",1532104851.0
MasGui,"> Mastery of the Giphy plugin in Slack

Shit, I'm underqualified for this job.",1531993591.0
,[deleted],1531996600.0
dandxy89,Any use of FP (functional programming) in the role?,1532972406.0
joshlemer,Removing because this was recently posted here and is still on the front page and has 257 comments.,1531954592.0
tetrapede,Ahah so true,1531932120.0
Philluminati,I’m doing a play framework upgrade from 2.3 to 2.6. I have to change 60 test suite files BEFORE I can testOnly on the first one. Or I need to empty the entire directory structure...,1531934320.0
m0l0ch,"I've come to realize that it's often very desireable to split your play project in many small projects:

Often big parts of the project don't actually have anything to do with play (db layer, webservice calls, business logic, ...). I make those separate projects, which compile very fast.

This helps a lot with compilation times - and also helps me structure the code.",1532079401.0
,"Map keys are unique, so when `.toMap` is building the map left-to-right it replaces `0 -> 1` with `0 -> 2`. You can illustrate this with `scanLeft`:

    scala> relationships.scanLeft(Map.empty[Int, Int])(_ + _).foreach(println)

    Map() 
    Map(0 -> 1)
    Map(0 -> 2)
    Map(0 -> 2, 1 -> 2)
    Map(0 -> 2, 1 -> 2, 3 -> 4)

So perhaps you don't want `Map` here?",1531884973.0
transducer,You cannot have duplicate keys in a map. The second tuple whose key is 0 overwrite the first one.,1531885075.0
homebeer,"Its because you have a duplicate key, 0.",1531888124.0
MasGui,"You can use a multimap.

    val input =
      """"""|5
         |0 1
         |0 2
         |1 2
         |3 4"""""".stripMargin

    val lines = input.split(System.lineSeparator)

    val size = lines.head.toInt

    // http://blog.xebia.com/multimap-in-scala/
    implicit class SetMultiMap[A,B](private val map: Map[A, Set[B]]) extends AnyVal {
      def addBinding(key: A, value: B): Map[A, Set[B]] = 
        map + (key -> { value :: map.getOrElse(key, Set()) })

      def removeBinding(key: A, value: B): Map[A, Set[B]] = map.get(key) match {
        case None => map
        case Some(Set(`value`)) => map - key 
        case Some(set) => map + (key -> set - value))
      }
    }

    val relationships =
      lines.tail.foldLeft(Map.empty[Int, Set[Int]]){ case (acc, line) =>
        val Array(x, y) = line.split(' ')
        acc + relationshipsBuilder.addBinding(x.toInt, y.toInt)
      }

    relationships.get(0) // Some(Set(1, 2))




",1531951460.0
nieuweyork,"Why do I need a framework for this? Between higher order functions, callables, and implicit parameters, I don't see why I would need this.

Also, monads and kleisli. ",1531856884.0
MercurialHacked,"I knew I wouldn't like this article as soon as I got through the first few paragraphs, which included fallacies like:

* To fully understand the benefits of DI, we need to use an actual DI framework in parctice
* Management of service lifecycles, such as start-up and shutdown processes, has anything at all to do with DI

Yes, those two bullet points are actually in the article almost verbatim. For point number one, what JVM-based software developer has been blessed enough by the powers of heaven to not yet have had a DI framework forced down their throats as they inherit code written by another team? I'm pretty sure everyone that dislikes DI frameworks has had plenty of experience using them already.

DI is providing dependencies to code rather than that code explicitly accessing its dependencies. It is merely the difference between passing a value to a ""function"" or some block of code versus that code directly accessing a value, which usually means it is using a global variable. That's it. No framework needed, thank you.

A major problem I have seen with most DI framework usages is that the magic pieces are not modular, composable, or good software design. In fact, they often lead to code that is almost as bad as directly accessing global state. For instance, autowiring by type or by name is essentially autowiring a global variable into your code.

The guice devs say that they save hundreds of thousands of boilerplate lines of code at Google, but, frankly I think they might be exaggerating, or at least the boilerplate they are saving on is not hard to maintain. I've written or seen several services without a DI framework and I have never missed them.

An even bigger problem I have seen with all uses of DI frameworks is that the developers using them don't actually understand DI very well, which is sad because DI is a very simple concept. As such, they end up writing code in their DI framework that isn't actually doing DI properly, and so they end up with a giant mess of code that also happens to be slow to start up and incredibly difficult to debug when things go wrong. Some of this I think is the fault of the frameworks themselves. I feel like they market features that look flashy because they reduce boilerplate but are actually really bad ideas in practices, like for instance autowiring period, and especially the egregious sin of autowiring private fields.
",1531925019.0
kudah,"Disclaimer: I'm a maintainer of [distage](https://izumi.7mind.io/distage/index.html)

In your article, you talk a lot about a choice between Pure FP vs. OOP dependency injection, but one possibility that wasn't expounded on is – **why not both**? In [distage](https://izumi.7mind.io/distage/index.html), we have first-class support for tagless final style. Let's see how [freestyle tagless example](http://frees.io/docs/core/handlers/#tagless-interpretation) looks in distage:

    class Program[F: TagK: Monad] extends ModuleDef {
      make[TaglessProgram[F]]
    }
    
    object TryInterpreters extends ModuleDef {
      make[Validation.Handler[Try]].from(tryValidationHandler)
      make[Interaction.Handler[Try]].from(tryInteractionHandler)
    }
    
    // Combine modules into a full program
    val TryProgram = new Program[Try] ++ TryInterpreters

where

    class TaglessProgram[F[_]: Monad](validation: Validation[F], interaction: Interaction[F]) {
      def program = for {
          userInput <- interaction.ask(""Give me something with at least 3 chars and a number on it"")
          valid     <- (validation.minSize(userInput, 3), validation.hasNumber(userInput)).mapN(_ && _)
          _         <- if (valid) interaction.tell(""awesomesauce!"") else interaction.tell(s""$userInput is not valid"")
      } yield ()
    }
    
    val validationHandler = new Validation.Handler[Try] {
      override def minSize(s: String, n: Int): Try[Boolean] = Try(s.size >= n)
      override def hasNumber(s: String): Try[Boolean] = Try(s.exists(c => ""0123456789"".contains(c)))
    }
    
    val interactionHandler = new Interaction.Handler[Try] {
      override def tell(s: String): Try[Unit] = Try(println(s))
      override def ask(s: String): Try[String] = Try(""This could have been user input 1"")
    }

Notice how the program module stays completely polymorphic and abstracted from its eventual interpeter or what monad it will run in? Want a program in different Monad? No problem:

    val IOProgram = new Program[IO] ++ IOInterpreters

Want a program in the **same** Monad, but with different interpreters? No problem at all:

    val DifferentTryProgram = new Program[Try] ++ DifferentTryInterpreters

Distage makes tagless final style easier and safer by making your implicit instances explicit and configurable as first-class values. It even enforces typeclass coherence by disallowing multiple instances, so one wrong `import` can't ruin your day. Distage is still [in active development](https://github.com/pshirshov/izumi-r2/) and somewhat lacks documentation, but as of now we've been using it for months in production and it allowed to port our legacy code from Akka/Guice stack to pure FP http4s/cats without losing neither ease of configuration and variability of a runtime DI framework, nor parametricity and equational reasoning of pure FP tagless final style.

> The code below shows an example of reading configurations from a YAML file

We also have first-class support for configs, so your first example with manual config reading is not necessary. Just put your config into typesafe-config and in distage you can request it in any module:

    final case class Config(different: Boolean)
    
    class ConfiguredTaglessProgram[F](
      @ConfPath(""program.config"") config: Config,
      primaryProgram: TaglessProgram[F] @Id(""primary""), 
      differentProgram: TaglessProgram[F] @Id(""different"")) {
    
        val program = if (config.different) differentProgram else primaryProgram
    }
    
    class ConfiguredTryProgram[F: TagK: Monad] extends ModuleDef {
      make[ConfiguredProgram[F]]
      make[TaglessProgram[F]].named(""primary"")
      make[TaglessProgram[F]].named(""different"")
    }

Where your config file looks like this:

    program {
        config {
            different = true
        }
    }

> If you prefer compile-time check, consider using MacWire

Unfortunately, MacWire is fully static and cannot change dependencies at runtime. It would seem like the only choice is between unsafe, but flexible, runtime dependency injection vs. safe, but rigid, compile-time schemes. That's not true, however. **[Why not have both?](https://github.com/pshirshov/izumi-r2/issues/51)** By giving appropriate types to our modules we can allow runtime variation, while at the same time guaranteeing correct instantiation. The proposed typing scheme is currently a work in progress in distage, but already implementing a basic check is as easy as running the exact same wiring code in compile-time macro instead of at runtime.",1531917213.0
kerobinson,This is a tutorial that explains how to get up and running with Spark & Zeppelin - I talked about this at Scala Days this year! [https://www.youtube.com/watch?v=3HjjxP0-uFE&t=1s](https://www.youtube.com/watch?v=3HjjxP0-uFE&t=1s),1531767649.0
TunaBoo,Any new benchmark on how this compares to JVM scala in real world apps?,1531782617.0
nieuweyork,"Not necessarily new, but this is interesting, and implies that the whole scala stdlib is available: http://www.scala-native.org/en/latest/lib/index.html",1531769733.0
szienze,Thanks a lot for your work.,1531935026.0
Scf37,"According to my own (biased) measurements, Scala Native is approximately 2 times slower than Java but uses very little memory (11Mb).

Could be good fit for command-line tools and small daemons on memory-restricted boxes.

Test application source:

    object Main {
      def main(args: Array[String]): Unit = {
        println(""Hello, world!"")
        println(Seq(1, 2, 3))
        var t = System.nanoTime
        var n = 0
         var k = 0
        while (true) {
          val seq = Seq(1, 2, 3)
          seq.foreach(k += _)
          n += 1
          if (System.nanoTime - t > 1000 * 1e6) {
            println(n)
            n = 0
            t = System.nanoTime
          }
        }
      }
    }",1533373255.0
gbersac,"\> We’re more interested in your approach than having lots of experience in specific frameworks and libraries.

If only more employers understood it !

\> You will be developing a Scala / ScalaJS / ReactJS

A scala job which is not related to spark, great ! And with scalaJS ! I really wonder how many scalaJS is in production. At work another team created this project in full scalaJS : [https://frsa.nestincloud.io/#/](https://frsa.nestincloud.io/#/)

That being said, they didn't used react JS for scalaJS, but monadic HTML : [https://github.com/OlivierBlanvillain/monadic-html](https://github.com/OlivierBlanvillain/monadic-html) Why using react in scalaJS while there is more lightweight way to create webapp in scalaJS ?",1531820587.0
,"I finished a school project two days ago. Our instructor jokingly described it as ""Photoshop"" - briefly, it's a command line image manipulation tool. It includes translatable opaque-to-transparent layers of other images, selections of rectangles on which to apply the operations, and various mathematical operations and functions, including user-definable composite or sequential operations or functions (this is where the ""functional"" part really paid off). Oh, it also can save or load the current context to a file. 

It was my first non-trivial Scala project, and I really loved it! Adding a GUI (Swing, I guess) might be a next step, but I'm open to extension suggestions for it.",1531755479.0
joshlemer,"Yesterday I worked on changing case classes so that their toString method displays the field name beside the field value https://github.com/scala/scala/pull/6936. 
  
",1531766336.0
joshlemer,"I was working on a library called `DMap` which allows for Python-like dynamic (but safe) heterogeneous Maps.  
  
https://github.com/joshlemer/DMap",1532294090.0
skenlrc,"I'm working on a bitcoin n-versioning system:

https://github.com/lktkorg/bp2p 

the intention is to connect to the bitcoin cash or bitcoin core network and then relay messages to a set of client nodes developed by different dev teams. Then act if there are discrepancies found between them. The bitcoin network needs all of its nodes to react the same way in order to maintain consensus. The bitcoin core development team justify their monopoly due to this. this is why bitcoin core is the client used in 99% in the network. In bitcoin cash this is not the case there are two prominent dev teams that have a 70/30 ratio share, plus other minor ones. The intention of this software is to avoid potential forks if and when discrepancies happen while maintaining a diverse ecosystem in clients. 

Right now im struggling with FS2 and wondering if its the right tool. I will look into Monix as well",1532126438.0
_gDanix_,"I'm writing an Spark version of JRip, as much functional as I can, as part of my end-of-master thesis. It's a pain to read JRip's code in order to recreate it's behaviour, so I think this functional version is easier to read and much more elegant, so maybe it can be useful for didactic purposes.",1531814945.0
Katrix400,"Been working on and off on a proper Discord API library in Scala, [AckCord](https://github.com/Katrix/AckCord), for quite some time now.

I've tried to address many of the annoyances I've encountered while working with many of the current Java libraries, like mixing up different types of ids (solved using tagged types), difficult to reason about concurrency, invisible side effects, lot's of indirection, not being able to go more low level when needed and more.

Been a long project, but I feel like I'm getting closer to something I can be truly happy with soon. I'm planning to release version `0.11` soonish (as soon as I can get back to my GPG key).",1531942050.0
stymiedcoder,"I just finished putting together a finger-like tool using the GitHub API (and Scala, of course!):

blog post: [http://codeninja.blog/2018/github-finger/](http://codeninja.blog/2018/github-finger/)

web page: [http://finger.codeninja.blog/?q=massung](http://finger.codeninja.blog/?q=massung)",1532108194.0
Baccata64,"I'll like it if it's modular enough that you plug the resolver to another build tool, in order to benefit from what this advocates whilst retaining the goodies of whichever build tools we're most comfortable with. 

I appreciate that it delegates to bloop for compilation. That's a really good decision. What I'm less a fan of is the ""hype-building"" without even a partial demo ...  ",1531750059.0
theQuatcon,"Supporting code generation => This just became a build tool. Why? Because people will need to have some sort control over ordering if the code generator depends on code (which must be compiled) inside the project itself.

I think the only way to really deal with this is to either:

- *not* have the fancy fury init, etc. stuff, but to actually restrict Fury to just be a ""publish a source project in a way that makes it easy to consume"", very similar to how ""sbt bloopInstall"" works but at at a 'network' level. Include compiler versions, compiler switches, etc. in the published artifacts and bob's your uncle.

* Actually embrace that it's going to have to become a build tool, and go with Applicative as the abstraction for building like e.g. Bazel, Mill, etc. It's really the only sane way to build[1] and if you need anything more complicated than that, then I think it's fine to force people to adapt (or just use a different build system which can publish ""Fury artifacts"").

[1] At least if expect to be doing distributed builds, sane caching of build output for identical code (something which I think might become necessary when everything is build for source), etc.",1531755968.0
poluserthrowaway,Would someone  TLDR this for me? It was too slow even for 2x youtube speed  but i sense that the speaker is intelligent and has important stuff to say so I'm curious to know what he said.,1531826403.0
ryantheleach,Using git as an example of a friendly user experience is laughable at best.,1531991267.0
Milyardo,Functional Dependencies or Fundeps(like `CanBuildFrom`) are an implicit pattern worth mentioning.,1531699218.0
raghar,"Previous parts:

* [Implicits, type classes, and extension methods, part 1: with type classes in mind](https://kubuszok.com/2018/implicits-type-classes-and-extension-methods-part-1/)
* [Implicits, type classes, and extension methods, part 2: implicit derivation](https://kubuszok.com/2018/implicits-type-classes-and-extension-methods-part-2/)",1531692662.0
Milyardo,"I think the message here is somewhat derailed by the `ZIO` sales pitch. Functions with side-effects are not functions. They're something different. It doesn't really matter what you call them, procedures, routines, methods, thunks, callables, impure, or programs. The important thing is they are not functions. Scala(and I should also mention Haskell, because comparisons to Haskell derailed the last discussion about this) does not make the distinction in the language. `IO` is that tool you use to compose programs like you do functions.

Is that distinction worth always making? No, just like with any type, not always worth being more specific, but most of the time it is. If you function only returns uppercase Strings, should you go out of your way to create a `UppercaseString` type? The fact that we use functions to model `IO` doesn't mean they're still the same thing. Just like the fact that we would use an array of characters to model our `UppercaseString` does not make them the same thing.

A practical example is logging. Logging effects are not functions. However that doesn't mean they're a side effect. You can log a value and still be referentially transparent. You can log a value end up not being referentially transparent. Should you use IO on that logging effect? It really depends if your usage ends up being in the former or later category.

In the standard library, under this philosophy I think `Future` and `Try` are still `IO` types. Even if I think they're bad at what they attempt to do. `IO` is not about eager or lazy evaluation. It's not about what concurrency or threads or execution contexts. Those are just details about what kinds of non-function programs they emphasize.

`IO` is about representing non-function programs as values. I you walk away recognizing anything from this post, I would implore it be this. I think both /u/jdegoes's and /u/odersky's post on the subject touch on this, but don't emphasize this point as much as it should.",1531626738.0
sudkcoce,"Armies, wars, exactly what the world (of Scala) needs now? 

I really think the way some people advocate FP is the biggest reason for newcomers running away from Scala.",1531636713.0
yawaramin,"ZIO is, without the slightest doubt, a truly impressive project. It's something that can and should be used to build solid, performant functional libraries and apps in Scala. At the same time, it doesn't preclude people from using OOP techniques like traits, classes, SOLID etc. for structuring their programs. I believe Scala's philosophy is 'OOP in structure, FP in operations'. If it helps, think of classes and instances as functors and modules. The fact that we can combine different styles gives us way more flexibility. It's a matter of perspective.",1531692968.0
silentraquo,"Something that really irks me with all these posts is they never show the best way to implement something without <the way of doing things> (IO in this case). They just show examples of how nice it is with IO. But that's not the argument they're trying to make, they're trying to say that this is **better** than... _something_? This needs a **comparison** to that anonymous _something_.

And the reason for that, I think, is that the benefits IO provides over plain ""FP-OOP"" Scala are not nearly as significant as the proponents make it out to be, and so they are actually implicitly comparing it to imperative Java OOP programming style rather than a good non-IO Scala style.

I mean, I can do `def retry[A](fn: () => Future[A]): Future[A]` I guess? Implementation would be longer, but how many retry functions do you write per year?

If you write good ""FP-OOP"" Scala, the only benefit of `IO` is really ""Type-Based Reasoning"". And whether you personally want that is debatable. I honestly can't remember the last time my code was doing unintended DB access or network IO, it must have been years. If that happens to you often, perhaps you should look into organizing systems / modules / classes / methods better.

I don't even care about IO that much – to each their own – but the author rejects the notion that he likes IO for ideological reasons, and I just want to point out that this post doesn't disprove that, even though I think it was intended to.",1531624111.0
kininja08,"Scala and FP have made me a better programmer. This is exactly why i have a bit of a bias, and cheesy soft spot for Scala. I also have a full time job coding in Scala.

Unfortunately, at the same time all this division/polarization/fragmentation between pure FP and OO-FP is absolutely fucking killing this Scala ecosystem. TBH, pure FP and general complexity in libraries over pragmatism has been pushing me away from Scala for some time now.

While there are valid points in this article and in the ""infinity war Scala"" presentation, it's also exacerbating the division between writing OO-FP vs Pure FP. And there is a sizable  negative atmosphere generated for newcomers. 

Lastly, I'm inclined to now believe that the hybrid model of OO-FP as the basis for the Scala language is incompatible with the purist/absolutist mindset of the vocal, leading external contributors of this ecosystem.",1531687524.0
EsperSpirit,"In his latest keynote he bemoans a (perceived) exodus of good scala devs from the community and now he cites ""growing armies of devs using IO"" as evidence that his lib is great. Sure, whatever dude.

Always bending words (or outright lying) to fit his narrative. Nothing new to see here... ",1531654057.0
liaohaohui,"I don't understand why don't these FP people just show the applications they developed using FP instead of explaining what is FP every day.  I want to play with FP but all the things I need to use (e.g. Apache POI or DocX) are OOP and I don't see how FP actually make development quicker.  From all the Youtube videos on FP that I see are just FP advocates who tells you FP solves everything but produces nothing except SUPER ABSTRACTION.  Even for Haskell, so far, the only wonderful thing that comes out of Haskell is Pandoc.  Is it easy to port Haskell to Scala FP?  And How?  Scala FP people are also split: Why do we need FS2 and Monix and being recommended to know both?  Why do we need both Cats and Scalaz (and when will the Scalaz 8 come?).  If FP is so great, why is it SO UNPRODUCTIVE?",1531639458.0
MercurialHacked,"""After all, the growing armies of developers using IO to solve everyday problems can’t all be crazy! (Or can we?)""

How many people banded together make up an army these days? I guarantee you the ""army"" of people not tracking effects in their type systems is much much larger. Are we crazy? I think not.

Look at any well-used and highly performant code on the JVM. Does it use ZIO, IO, coproducts and free monads, or anything else similar to track effects? No, it doesn't, and here are some examples:

* Apache Kafka
* Apache Spark
* any performant math or stats library on the JVM
* any performant web framework or library on the JVM (see techempower benchmarks or any other benchmark, imperative frameworks rule the roost)
* any performant database driver on the JVM (see for instance http://lucidsoftware.github.io/relate/, JDBC is the raw baseline for performance)

At the end of the day, when I see these paradigms pushed by the Scala FP community I am entirely unconvinced of their usefulness. In my day-to-day I never wish effects were encoded in my type system. It looks like it takes far too much effort for far too little gain, and I have other more important things to worry about. 

Also keep in mind that all of this advocacy comes from the Haskell community. Clojure and other Lisp developers aren't trying to track effects via any type system, be it runtime or compile-time. The ML communities don't bother either. There are more ways to consider yourself a functional programmer than one, and at the end of the day the Haskellers are a small minority.",1531625567.0
Storini,"IIRC the original keynote didn't highlight one of the principal possible reasons for Kotlin's success, namely that it (allegedly) significantly reduces the clutter when developing Android apps. I must say, having developed a relatively trivial Android app in Java, it was a boiler-plate-city and really a PITA.  A possible counter-argument to this is that Android development in Scala is equally a PITA due to tooling issues, combined with (allegedly) very large library jars due to bloat in the Scala standard library. As ever, what is your market is the question, but why not include compact performant easy-to-develop Android apps in Scala's goals? Or is it to be 2010's J2EE 3 framework?",1531867329.0
colindean,"Is there something out there that will generate Scala classes from Avro that is just a file on disk? Choosing the name of `sbt-Avro` seems a little bit wide for a functionality that is rather specific.

Also I am interested in this because I am actively doing stuff with Scala and Avro outside of the Spark ecosystem.",1531598801.0
poluserthrowaway,"I will look if it doesn't follow the ""fluent"" testing fad. ",1532075411.0
balefrost,"Just FYI, since this seems to have a transparent background, the black text disappears against the black background when you click through the link.

For everybody else, the text says ""car salesman: *slaps roof of Java* this bad boy can fit so much fuckin boilerplate code in it"". ",1531572363.0
amazedballer,"Configuration is historical.  It predates Typesafe Config itself.  The advantage of using Configuation is that it can do Option and make use of Typeclass patterns using as[], but if you are writing domain code or want to use libraries like Ficus, then Config is more appropriate.

Better yet, parse the Config in a Provider and return a typesafe case class when parsed, as mentioned in other comments. Then inject the case class.  See the HttpConfiguration code as example.

Never call ConfigFactory.load unless you have no other option.  It will reparse the entire tree and you have the injected Config available anyway.",1531571629.0
jokasx,"I entered a project recently where instead of injecting the Conf or a subset of that conf as a case class it was using the load() directly everywhere on class constructors and object constructors... It's crazy. I'm still having a bad time just thinking about it. Love the true gods of side effects.

There's no good reason to not pass the necessary conf as a parameter.  


As a plus, take a look into [https://github.com/pureconfig/pureconfig](https://github.com/pureconfig/pureconfig) . With it you could just read the whole config one time in one single place, having it all typed as case classes and then just insert the required parts wherever you need.",1531524302.0
BarneyStinson,"I wouldn't recommend that library, but if you must you should definitely have it injected into the constructor for all the reasons that are usually cited about why DI is good. ",1531550674.0
kpws,Neither. Create a class `MyConfig` and put all your `getString` and etc. there.,1531509452.0
amazedballer,"So the way I came to Scala: I was a ruby programmer, and I wanted something with the expressiveness of Ruby but the typing and speed of Java.

Try one of the Play examples and see how  features like Future and Option work.  ",1531504098.0
zzyzzyxx,"> Why would you use Scala as opposed to any of the languages listed above?

For me, Scala's defining feature is its type system, and you're doing yourself a disservice if you do not attempt to take advantage of it. There are other benefits, to be sure, but I feel you don't really ""unlock"" Scala until you can work at the type level effectively. It's combination of features like higher-kinded types, path-dependent types, declaration-site variance, subtyping, implicits, and more, allows you to write code that is expressive, reusable, and correct. In this case I mean _guaranteed_ to be correct, because incorrect code would not even compile.

> What are some of the cooler design features I'd want to explore?

Implicits and traits, eventually getting to the typeclass pattern. Among all the type system features I mentioned implicits are probably the most unique to Scala and also some of the most pervasive features you'll find. Be aware that implicits are very flexible and powerful, so not all usages of them are good and helpful; it's easy to use them in costly and confusing manner.

> Is more like a ""glue"" that holds other languages together? Or is it a self-contained language like C++/C#?

I'd consider more like C# in this regard. Specifically, it is its own language and projects can be built in 100% Scala, but it can also make use of libraries written in other languages due to running on the JVM. In particular, Scala is designed to inter-operate nicely with Java. C# works the same way on the .NET virtual machine and how it inter-operates with languages like F#.

> I get that it must work on a computer that's running JVM... but, I don't know the significance of that

Just like running something on .NET, it means you can develop on one kind of machine (say, Windows) and have the code execute effectively the same on another (say, a Linux server), or your co-worker's Mac. You also get the benefit of all the performance work that has been put into the JVM, which is pretty much best-in-class.

I don't have a lot of input on projects. I've used Scala on Android. People use Scala to create frontend websites (via scala.js). It's starting to get into the high-performance space (via scala-native). I'd guess the most prevalent stuff you'll find in the wild are business-related since that's where a big portion of Scala use (and JVM use in general) actually lies. Data science is big right now due to the Spark project. But people are using it for all kinds of things if you go looking for them.",1531512507.0
dnslbr,"You can use Scala for building web apps(with Play framework and Akka) or use it for Big data apps(with Spark). Scala is a general purpose language, so you can build any app that you'd build with other langs. Scala is good for backend on JVM env as it deals with parallelism and stream processing effectively. You can also try ScalaFX which is a wrapper around JavaFX for building desktop UI app",1531521144.0
markcanlas,"> That being said, I don't really know what Scala's niche is.

Being able to entertain OOP and FP styles simultaneously.

> Why would you use Scala as opposed to any of the languages listed above?

If you want to explore FP. If you want to work on the JVM.

> What are some of the cooler design features I'd want to explore?

Type inference. Anything you find that's related to FP or making FP work (e.g. implicits).

I'll amend this by saying certain kinds of folks might chime in with things like ""the type inference in Scala isn't that great"" or ""implicits are a universal evil"", but those are a matter of perspective. I think there's a lot to learn, if you look at it through a nonjudgemental lens.

> If I were to encounter Scala, what kind of project should I expect?

In my experience, Scala projects tend to be... Ideology driven. Anything from ""I want to write a Scala wrapper around this well-established Java library so that it feels easier to use in Scala"" to ""I want to re-envision common conventions around some workflow and do it with the latest and greatest in FP machinery"".

> Is more like a ""glue"" that holds other languages together? Or is it a self-contained language like C++/C#? If its not any of the above, then what is it?

It's more like a full-bodied language like C++ and C#. As someone else mentioned, you'll definitely see things that are written completely in Scala.

It's not a convenient glue/scripting language. But maybe some people are trying to change that (Ammonite).

> I get that it must work on a computer that's running JVM... but, I don't know the significance of that. Does that just mean its more portable? Or is there something more important going on there?

The sell is that anywhere a JVM runs, your app can run. The JVM platform is popular among employers. Good support on AWS. Any performance enhancements that go into the JVM you get for free when running on it.",1531522056.0
pythonicus,"Check out the free chapters from the book Functional Domain Modeling by Debasish Ghost. If it resonates with you, I highly recommend the book.

https://www.manning.com/books/functional-and-reactive-domain-modeling",1531522845.0
raghar,"IMHO it's great at domain modelling:

* case classes and immutable data structures are great for modelling entities, value objects, events
* you have (Akka) streams and other forms of modelling your processes as piping the data (map and flatMap for Futures, and Taska, FS2 streams, Spark)
* above + FP (pattern matching, foldLeft at all)  makes it natural for writing event sourcing
* once you learn a bit about type system quite often you are able to make invalid states unrepresentative - if you cannot compile invalid code it won't happen at runtime

Additionally with metaprogrammning you are able to generate quite a lot of code that would be

* trivial and repetivive
* a bother to maintain, because you could make a stupid mistake

In one of the projects I could go full DDD and I was almost sad I didn't had any opportunity to write a framework:

* I could express all my read models, write models and events as case classes
* all services were simply functions returning Monix's \`Task\`s - so async + error handling + control over execution
* my hand were not tied by a uniform model (same models for API and for domain internally), yet with metaprogramming I could convert one representation into the other (library - [chimney](https://github.com/scalalandio/chimney/), by my friend and me ;) )

As for projects: Scala is very flexible, so you might meet projects that use it as OO Haskell on JVM, you can see projects where it is used as Java without semicolons, you can see projects where people use it only because of Spark or Akka.

It uses JVM interoperability, so you might use it as a glue code, but you will feel \*yuck\* doing so: Java returns nulls and throws exceptions, so any interop with Java usually involves \`Option\`s and \`Try\`s that will be pattern matched immediately. (So people from Java that use Java libs intensively will consider then ove-rengeeniered \`if\`s and \`try\`-\`catch\`s).

JVM implies that you can run your code on anything that has: Java SE, Open JDK, Zing, Zulu, IBM JDK, GraalVM etc installed. Actually you could use it on Android though it is uncommon. Also you have access to whole JVM ecosystem: Maven, Ivy2. There are ongoing efforts to make Scala also compilable to JS (Scala.js afaik it is consider production-ready) or native code (Scala Native, not as mature).

My advises:

* know your type system
* don't stuck with Slick - it might look nice at first, but over time I see more and more limitations
* nowadays you almost never need (untyped) actors - I had to write about 1 actor over last year, as a scheduler. now I would do away without it - learn akka streams instead, try out alpakka integrations. typed actors see like something reasonable to know but I had no use case for them so far
* play is really nice, but it involves a lot of magic (IMHO), so more than few times you might think that you have no idea why it works (hint: code generation)
* don't try to understant sbt from the day 0 - it does quite a lot of stuff, so it is easier to understand once you get more familiar with Scala (shameless self-advertising: [I wrote a post about sbt](https://kubuszok.com/2018/relearn-your-sbt/) :))
* learn one thing at a time. If you try to learn a syntax, a framework, few libraries, category theory etc at once it will look much harder than it actually is.",1531526568.0
,"I have coded in large systems with Ruby, Python, Java, and Scala.

Scala is in the middle of these languages. It's more terse than Java (because of complex type and etc.) and more robust than Ruby/Python (because of static typing).

With the power of Scala, you can have a smaller team that can manage a large system. Type system means you can manage larger codebase. Terse code means you can build more features with smaller codebase.

Now you might be able to guess the disadvantages of Scala. Yes, it's complex and has slower compiler.

If you are onboarding engineers at quicker pace and have an extremely large codebase, Scala becomes problematic. Think of Google and LinkedIn where they hired 1,000 engineers in a year. In fact, these two reasons, I believe, are why Golang has been invented. It's simple (and more verbose, of course) and compiles quickly. Golang basically opposes almost everything Scala represents.

And, to answer one of your questions, Scala is good for server and map-reduce. Mainly because JVM is good for these things. It's not good for command-line tools and desktop applications (e.g. complex installation for end-users, large binary size, and etc.).
",1531856868.0
ClydeMachine,"The other answers here are very complete. I'll reiterate the popularity within the data science community for production ML deployments thanks to Spark. Although I don't think that's necessarily a niche it's known for (I could be mistaken), performant data science work does come to mind for things Scala is used for.",1531544280.0
,[deleted],1531503835.0
SystemFw,"/u/Odersky 's post shows some common misconceptions about `IO`, which imho end up derailing the whole conversation because we argue about different things. In particular:

> First, the type of a function tells you whether it is referentially transparent or has side-effects when run.
> The other argument for going to monads and IO is that it makes composition of effectful code more cumbersome than composition of pure code. So some people like this for the educational aspect: Using effects should be painful, so that you are pushed towards referentially transparent solutions instead.
> So, in summary, IO is a very good solution for a lazy language like Haskell. For a strict language like Scala, it's currently the most common solution if you insist that the distinction between pure and impure should be reflected in the types of your program.

The implication here is that IO is good at separating pure and impure code, and therefore it's a signalling mechanism, which is better done with capabilities.

Except, **IO is 100% pure (referentially transparent)**, so let me unpack a few things.

**Referential transparency:** replacing an expression by its bound value doesn't alter the behaviour of your program. This gives huge benefits, which I'll talk about later.

**Side effects:** This is the main issue, because I think we definitely don't share the same language here, and that causes heaps of confusion. In pure FP, a side-effect is a breakage of referential transparency. That's it. Doing i/o, state, concurrency or what have you is not _inhererently_ a side-effect. Traditionally, these things are done in a way that breaks referential transparency, and are therefore side-effects, but they cease to be if you do them in a referentially transparent manner (hence why the term *purely functional IO* is not an oxymoron).

**Purely functional programming:** programming exclusively through referentially transparent expressions (i.e. without side effects, as per the definition above).

**Value:** a referentially transparent expression. That's what _program as values_ means. A value can be put anywhere, passed to functions, stored in data structures, manipulated, replced by its name, without altering program behaviour. That's only true in the presence of referential transparency, by definition.

----------------------

Now, this statement:

> First, the type of a function tells you whether it is referentially transparent or has side-effects when run.

is wrong because it's a false dichotomy. `IO` is something that can have side effects _when run_, but that doesn't mean that it isn't referentially transparent. `IO` is 100% referentially transparent. This is very easily seen and I've shown it multiple times already, for example:

https://youtu.be/x3GLwl1FxcA?t=3m9s
https://www.reddit.com/r/haskell/comments/7ykrv3/xkcds_prediction_for_a_haskellrelated_cve_in_2018/dui4eya/
https://www.reddit.com/r/haskell/comments/7ykrv3/xkcds_prediction_for_a_haskellrelated_cve_in_2018/dujbmid/

-----------------------

So, given this definition of side-effects, `IO` is not about signalling side-effects, it's about _avoiding_ them altogether, so this

>  it's currently the most common solution if you insist that the distinction between pure and impure should be reflected in the types of your program.

is very wrong as well, given that `IO` is completely pure.

-----------------------

> The other argument for going to monads and IO is that it makes composition of effectful code more cumbersome than composition of pure code. So some people like this for the educational aspect: Using effects should be painful, so that you are pushed towards referentially transparent solutions instead.

Same thing here: programming with effects (IO but also State or anything else) _is_ a referentially transparent solution, that's the point, and I also disagree that composing IO-based code is cumbersome. The examples shown are always about `for`, but they neglect the million combinators defined for `IO`, and more importantly the fact that `IO` can be built upon to create abstractions that are much more expressive than imperative-looking code, for example streaming/FRP-like like fs2.
Matter of fact, most of the code I write is effectful (like I suspect the majority of server side programmers), and doing this purely (in my case with fs2 and cats-effect) it's not only not cumbersome at all, but in fact extremely convenient and powerful, and it allows me to build complex behaviour at a speed and correctness I could never achieve when writing side-effectful, non functional code. Effects aren't a weak point of Haskell-style FP, they're a strength.

(I think /u/Jasper-M and others wanted some details on why the post was considered incorrect).

-------------------------

Now, to the OP (/u/arbitrarycivilian), you say:

> 3) It makes all your code referentially transparent - but that's only because it doesn't do anything. As soon as you actually execute the IO, you lose referential transparency

But that's not quite true. Referential transparency (or more correctly, a breakage thereof) is something that _the caller_ of your code observes. So it's true that when you execute `IO` you lose it, but if you use it correctly and execute it at the very last point of your code, there's no code left to observe the breakage, so all of your code enjoys the benefits of it. Haskell takes this the extra mile, running the `IO` is done directly by the runtime system, so there's literally no code to observe the breakage of purity.
Note that that I can express _any_ IO computation, in _any_ point of the code (not just the boundaries, that's an architectural choice and not a constraint, and therefore another red herring), without ever having to ""run"" the IO (calling `unsafeRunSync`). This is what programs in Haskell look like.
",1531833716.0
adamw1pl,"It's a very good question, and one that I asked myself as well. The first step to consider is why would we want to wrap our computations in any kind of wrapper in the first place (think `Future`, `Task`, `IO`)? Why not just code synchronously like ""in the old days""?  Scala's definitely not the only one doing it (consider e.g. JavaScript and `Promise`s), so there might be good reasons. The long version of the answer is here: https://blog.softwaremill.com/synchronous-or-asynchronous-and-why-wrestle-with-wrappers-2c5667eb7acf, but to sum it up in 2 points:

1. most of the power comes from **representing programs as values**. This really changes the way you write code, but at least for me, it came with time. The simplest example is composing a number of asynchronous computations to run in parallel - it's so much easier and more readable when operating on values. But that's only a start. Another great example is working with SQL databases and transactions. Instead of relying on annotations, thread-local transactional contexts, or even implicitly passed transaction/connections, one can define values which **describe a computation** that should be run in a transactional context. Any number of these can be composed (at any point in the program - we can re-use already defined values) into the final computation description to be run, given an open connection. The logic that creates the descriptions of the computations is completely separate to how the connections, or transactions are managed, and doesn't need to be aware of it. That's exacty what Slick is doing with `DBIOAction` and Doobie with `ConnectionIO`.

2. the clear demarcation of methods which are side-effecting / perform I/O is also very valuable for code readability - the signature of a method tells you so much more, than when using synchronous functions. Having method signatures which reveal as much as possible about what the method can, and more importantly *cannot* do, is crucial for the ""explorability"" of a codebase.

With more complex control flows, wrappers are more of an obstacle than help. Luckily, we have the `async`/`await` mechanism - available both for Scala's Futures (through scala-async) or for any cats/scalaz monad (through monadless/effectful), which allow you to locally use synchronous-like syntax, having the code automatically translated to the wrapped version. (As a side note, Javascript and Kotlin have very similar constructs, but baked into the language: async/await and coroutines).

Now that we know that wrappers are actually useful, which flavor of wrappers to use? Futures, which represent an eagerly executing computation, are a very popular option, but what about the lazy version, Tasks/IOs? Even Akka recently introduced a lazy wrapper for computations (`Behavior`s in akka-typed), so the lazy wrappers seem to be an increasingly popular option. What do they give us?

As you write, Tasks/IOs are essentially lazy computations. There isn't much more to them. But that's powerful enough - this, and being able to represent a computation as a value. In addition to freely manipulating and composing asynchronous computations, thanks to laziness you can do so **without fear**. It's a liberating change - calling a method and not worrying what might be the side-effects (e.g. getting a running future), as they are all deferred and encapsulated.

Take for example the already mentioned `retry` method, or a rate-limiting function (described in detail in the blog I link later). Yes, you can implement them using by-name parameters `def retry[T](f: => Future[T])`. However, you need to be extra careful no to create the `Future` before passing it to the method (e.g. capturing it as a val, or passing a previously captured result of another computation). With lazy wrappers like Tasks/IOs, this whole class of bugs goes away.

Another advantage is that you can specify the exact configuration of how a computation should execute after it's defined. In the Akka-typed case, that can mean specifying the recovery logic after the main actor behavior is specified. All captured as a value, which can be refined and used multiple times, on multiple threads, without a chance to get a threading bug! With `Task`s/`IO`s, we can fork computations to run in the background, retry them, handle errors, etc. This can be done on an arbitrary computation defined by arbitrary methods; thanks to laziness, we can instruct the interpreter how to execute about logic after it's created.

Excuse me for linking twice to my own blogs, but as I said, I've asked myself the same question, and the blogs are the long version of how I arrived at a conclusion that using lazy wrappers **is** the preferable way to write code which performs I/O and runs asynchronous computations. So, here: https://blog.softwaremill.com/scalaz-8-io-vs-akka-typed-actors-vs-monix-part-1-5672657169e1 you can find the first part of a series which tries to compare the `Future`-based approach of Akka, with Akka-typed `Behavior`s, Monix `Task`s and ZIO `IO`s.",1531553139.0
Odersky,"It's a very good question. I was working on Haskell in Paul Hudak's group when IO got invented (in 1992). At the time, many people were trying to find ways to combine FP with mutable state and other effects. 

The trick of IO was to essentially split the program in two: A purely functional program that constructed an effectful program in the IO monad. This is somewhat a slight of hand: we simply declare that a function returning an IO type may have arbitrary effects without going into detail in how these come about. The scheme has two consequences: First, the type of a function tells you whether it is referentially transparent or has side-effects when run. Second, the syntax to compose programs is also different: normal function application for combining pure functions, monadic bind for combining effectful ones. I believe that the first distinction is very good, but the second is an unfortunate accident.

Let's do a thought experiment. Instead of having a ""magical"" IO monad, let's have a magical *capability* `CanIO`. Then, instead of returning an `IO[T]`, a function would instead return a `CanIO => T`. So this says ""give me the capability to do IO and I return a `T`"". Assume the `CanIO` capability is produced only by the runtime that executes a program. Then every program and every function that has side effects has to be of type `CanIO => T`, since there is no other way to get the capability. This is exactly the effect of an IO monad. However, instead of opaque IO components which are cobbled together with cumbersome monad operations, you now have regular functions that you can compose functionally! No more pains to express recursion, need to trampoline, and so on. 

To avoid boilerplate, you want to make the capability parameter implicit and abstractable; that's exactly what Scala 3's implicit function types are about (to find out more: google for ""Simplicitly, POPL 2018""). In the end, this gives you a system that can run exactly like a regular side-effecting system, except at each step the types tell you whether something belongs to the pure or the effectful half. Also, pure and effectful functions are composed in the same way, no more need to go monadic, no need to do monad transformer acrobatics to achieve any sort of composition. 

Aside: I have never understood the fascination with monadic syntax (e.g. in Scala's for expressions). They are fine when they are needed, but I find regular composition with `val` and function application much preferable. In a way, computing the monadic binds/for expressions is like writing assembly instructions, where every step has to be spelled out in detail and sequenced properly. So why did Haskell do it that way? It has to do with laziness. In a lazy language, function application is not a practical way to sequence effects, so something else was needed. But Scala is not lazy, so this argument does not apply to it. 

The other argument for going to monads and IO is that it makes composition of effectful code more cumbersome than composition of pure code. So some people like this for the educational aspect: Using effects should be painful, so that you are pushed towards referentially transparent solutions instead. I understand the point of view but don't subscribe to it. A good analogy is `var` and `val`. Scala makes you declare your intentions (and prefers the functional `val`), but there's no syntactic penalty for using `var`. Some people argue this is bad, too, and that writing imperative code should be different (and more convoluted) than writing functional code. 

So, in summary, IO is a very good solution for a lazy language like Haskell. For a strict language like Scala, it's currently the most common solution if you insist that the distinction between pure and impure should be reflected in the types of your program. But it is far from ideal, and I believe that in Scala 3 we can do a lot better. My personal choice is simply to not reflect effects in the types now, but at the same time taking care to minimize them in my programs, and wait until implicit function types are generally available. But other teams might well make different choices.

EDIT: One aspect that I did not mention was that IO is often used for expressing futures or tasks. That's a usage that cannot be addressed directly with implicit function types, because it would require also continuations. In other word, IFTs are good for ""boring"" effects like mutation, exceptions, or dependencies, but by themselves they are not powerful enough to express control effects. There was an interesting paper by Jonathan Brachthaeuser at the last Scala Symposium where he showed how to do general algebraic effects with IFTs and a continuation monad. So, control effects are still a good use case for IO. I would just expect that, in the future, IO will be more specialized to cater for that use case only (Monix Task comes to mind here).",1531490552.0
fosskers,"Hi there. Quick background for context: I came to Scala from Haskell, wrote Scala professionally for 4 years. Was sad that pure functions are left as a ""best practice"" in Scala, but very happy to see IO-based libs popping up (`doobie`, etc). With that in mind...

> It allows you defer side effects - ok, so why not just call your side effects when you actually need them?

This is tied to (4). If your application is architected correctly, then the point at which you need the effects is precisely at the boundaries of your application. This lets you write most of your functions as pure code, the benefit of which is one of **maintenance burden**. The ability to point at a function and say ""It's (near) impossible that this code is the source of the bug"" is a strong one.

Another way of looking at it: if I notice that most of my application is in `IO`, including business logic, and that I'm fighting my code to impose my will upon it, I think to myself that something is probably wrong with my architecture. In these cases I let the compiler tell *me* how everything should be laid out, and it's almost always right.

> We could change the implementation of IO and you would get a completely different execution semantics

That's a weird one. You're probably right that this doesn't happen in practice. I trust the `IO` people to provide good defaults.

> It makes all your code referentially transparent - but that's only because it doesn't do anything. As soon as you actually execute the IO, you lose referential transparency

I personally wouldn't call safely executing an `IO` action the same thing as losing RT. ""Losing RT"" happens when you have something like:

    def foo(s: Int): String = {
      println(""hi!"")
      s.toString
    }

If you've executed an `IO`, you have its final result forever. It can't change willy-nilly on you, which is the usual fear of not having RT.

> It pushes side effects to the boundaries of your program - it doesn't, the effects still occur in the same order

The ""boundaries"" bit refers to physically *where* in your code the effects are defined, not necessarily where they're run. Again, the goal is to try to maximize the number of pure, total functions we have in our code bases.

**Summary**

- `IO` let's us logically separate effectful functions from non-effectful ones. This lets us reason about our code better, reducing bugs and maintenance costs.
- If we stick to `IO`, in means we have lots of pure functions too. These are easy to unit test when we know they don't have effects.
- `IO` usually comes with bundled with a `Fiber` type, a `Future`-like construct with stronger safety guarantees.

If you're looking for some sort of ""`IO` will reduce your bugs by 87%"" figure, I don't think anyone has such a thing. All I (or anyone) has is anecdote, having written in both styles for years and seeing the difference. Personally I can't live without `IO` anymore - I don't trust myself enough to write perfectly rigourous code without it being compiler-enforced.

Cheers, hope that helps!",1531454339.0
paul_f_snively,"The condensed, and therefore obviously inadequate, answer is:

Because `IO` is a monad, in other words, a type of value we can manipulate algebraically. Because types define legal operations on values, then, the compiler can make guarantees about the behavior of whole classes of operations if our code compiles. Because those operations obey certain laws governing composition, composition of these values ""makes sense"" and our defect rates go down.

There's a lot in there I'm happy to unpack, if you decide to want to ask any questions about it.",1531581503.0
friedbrice,"Thinking of functions as first-class values represents a paradigm shift in programming. You could accomplish all the same things with GOTO statements and switches, but it's error prone and isn't very easy to conceptualize, reuse, or maintain.

In a similar way, IO data structures allow programers to think of side-effects as first-class values. A function that returns an IO action encodes a whole program as a first class value. It can be passed around, manipulated, tested, refactored, inlined, factored out, abstracted, etc, just like first class functions.

It took a long time (and a lot of convincing people) to achieve the benefits of replacing GOTOs with structured loop and procedure calls. Likewise, the ramifications of treating effects as first-class values have not yet fully panned out, and it'll take a long time to convince people of their utility.

Now, think of first-class functions: if your language doesn't support them well they will be painful to use. Basically all classical OOP patterns arise from trying to model first-class functions in languages that don't support first-class functions. Since effects as first-class values is still a new concept, our languages don't really have the features to support it well. Haskell and Scala are really the only languages that let you abstract over effects (you need higher-kinded types and type classes), but doing so is still awkward even in those languages. While I love me some Haskell and Scala, I'm hopeful for the next crop of languages.",1531549873.0
Baccata64,"Hi, I'm very much a blue-collar. My first job was one of a java dev, and I've (very slowly) converted to FP aficionado. 
Rather than trying to answer your question generally, I'll give you a small convincing example :  

implementing `def retry(fut : Future[Int]) : Future[Int]` is impossible. The reason is that when that method receives the Future, the Future is already running, and you've already lost the ability to re-construct what it does. So in order to retry a Future, you either need to : 

* have the knowledge of how the Future is constructed in the first place, and write a retry for that : `def myFun(x : Int, y : String) : Future[Int] ; def retryMyFun(x : Int, y : String) : Future[Int] = ???`. This doesn't scale. If you have to write retry logic for a few functions, you'll get annoyed at how you can't refactor. 
* use a by-name param `def retry(fut : => Future[Int])` but you'll have to wrap all the futures that you want retried during their definition, which pollutes your function with additional logic. 
* Express the fact that your retry function works on a deferred future : `def retry(() => Future[Int])`. Well, you don't even have to know it's working on an Int, you can do `def retry[A](() => Future[A])`. So it means that you now have an incentive to have your functions return `() => Function[A]` ... aaaaaand you've re-invented IO. 
    
This is only a simple example, but in general IO gives you a lot of really useful constructs (or the ability to implement them), and the ability to separate the calls to these constructs from your core logic. Another example that worked for me : I was able to write a piece of code (that our devops understand) that polls AWS to know whether a stack was up (timeing out after a while), with only 7 lines of code,  using monix's Task which is another implementation of IO. My coworkers wanted to roll-in Akka, which would have costed a couple (annoying to test classes) and would have been much less readable. 

But the main piece of advice is : just code with the style you (and your team) are productive with. If you don't want to buy into this stuff, it's ABSOLUTELY FINE. People have created a lot of value for their clients using php, java, etc, and at the end of the day that's what matters. ",1531462148.0
,"IO gives you referential transparency, as you noted. So now we have reduced the question to ""why is referential transparency desirable?"" … it's desirable because it makes it easier to maintain programs. You can refactor confidently because your program is guaranteed to be invariant under a large class of syntactic transformations. This ends up being very useful, in fact it's the whole point of doing FP. If you're not convinced of this then IO will seem silly. If you are convinced then IO is essential.",1531468045.0
jdegoes,"I'm one of those crazy functional programming zealots and the architect of [ZIO](http://github.com/scalaz/scalaz-zio), a purely-functional effect system for Scala.

I use the purely-functional `IO` in Scala to model _all_ my effects&mdash;not out of any ideological commitment to functional programming, but because it makes my life easier and makes my programs faster, clearer and better.

In general, we functional programmers prefer to use `IO` in Scala for all of the following reasons:

1. **Uniform Reasoning**
2. **Uniform Purity**
3. **Reified Programs**
4. **Performance & Power**
5. **Flexibility**
6. **Industry Proven**

Because of this question, I wrote a [blog post](http://degoes.net/articles/fpoop-vs-fp) to explain each of these benefits.

Please check it out and let me know what you think!",1531613276.0
IamZelenya,Referential Transparency has been mentioned a lot here. If you wonder why should one care: [thread](https://twitter.com/impurepics/status/1017844414578905088),1531513146.0
drole_,"Great question! Thank you for asking it!

I am going to assume that most software written are ""servers"" of some kind. This means they need to process requests in a parallel fashion. Generally you will need to process more concurrent requests than are threads in the underlying operating system. For this to work you will need some way to turn long running actions (like HTTP requests or database queries) into asynchronous actions. If you don't your threads will block and throughput will plummet. This part in non-negotiable. You want to build servers on the jvm then you need this kind of abstraction, period. So you must use *some* kind of container. The question then becomes which container? You could use Future, but I think its shortcomings are well established.

If we are going to use a container for effects, which we must, then we would like our containers to behave in an orderly fashion, your points go right to the heart of the issue.

\- Not being able to defer side effects in one of the primary problems with future and why you should user a better IO monad. It makes code reuse considerably easier that you can just change the definitions with referential transparency instead of having to watch yourself every time to make sure a future is not eagerly evaluated when you did not want it to.

\- Different implementations are in fact used in practice. Again once you wrap your code in containers, which you must, then if a better container comes along (say it is faster) then you want to migrate.

\- I understand your conclusion, but the truth lies a little deeper. Again; you need a container. But some containers break referential transparency, like the Scala Future. Having a container that does not is a massive mental burden you don't need to carry.

\- You are absolutely right. The effects still occur and in the same order, which is what we want. Except for the cases where they don't, again the Scala Future is a nice example.

In summary;

The reason for needing an IO monad can be many, but on the JVM we absolutely need an asynchronous IO monad if we are to build efficient servers. Once we accept that we must use an IO monad it becomes interesting what kind of other guarantees we can get if we have to pay the price of using one. Monix, Cats and Scalaz all have different answers to this question, and I will leave it up to you to figure out which one is best for you.",1531475467.0
stymiedcoder,"This is a post I put together for some friends that may help.

http://codeninja.blog/2018/monads/

I don't get to IO until the end, mostly because there's nothing really special about it. 

It sounds like you generally have a working understanding about monads, so the post may be a bit too simplistic. But it may help explain what exactly IO is there for by first explaining some of the other monads.",1531577476.0
Ukonu,"Great question.

**A huge benefit of IO is stronger static typing**. Look at the following signatures and think about which you have the most information on:

    def func(a: Any): Any = ???
    def func(a: Int): String = ???
    def func(a: Int): IO[String] = ???

We can express the same function in all three ways. But one of them gives you the best understanding of what's actually happening without having to read all the code.

The IO type gives you more information about one of the most critical parts of any program. It also gives your compiler and your IDE that same information; now your compiler and IDE can help prevent you from making mistakes. This particular type also provides a bunch of helper methods (map, flatMap, filter, etc.) to help you cleanly compose instances of it with other parts of your code.

EDIT: Laziness is another huge benefit of IO, but I decided to take a different perspective than the other posts defending IO.",1531496996.0
SQLNerd,"IO has a couple of major benefits: 

- Maintainability. You mention things like ""just use a lazy value"". That's great if you have the discipline to design your control flow with these in mind. Thing is, you probably aren't the only developer on the project. I've seen multiple bugs caused by bad declarations of Futures, which IO does not allow. Having that .run call really avoids problematic bugs like this, increasing efficiency across your team.

- Performance, particularly for async applications. IO doesn't require an ExecutionContext, and as a result, its not tied to the overhead of one. Any function called on a Future (e.g. .map) requires the context, and thus can be much more expensive to call than the same on IO. 

- Functional fun. You can use IO from cats or scalaz to design a wealth of functional programs, leveraging all the fancy Monads, Transformers, etc that come with them. ",1531486263.0
Milyardo,"If having programs as values, in the same vein of having functions as values doesn't strike you as profoundly powerful, then I'm not sure anything is going to convince you.

Also I don't understand what number 2 has to do with IO.",1531452940.0
hyperforce,Why not just use the existing NY Scala meetup group? Seems incredibly niche...,1531420493.0
,"I find people overdo it with Mockito and miss bugs in code that would otherwise be tested, but was instead mocked. I find if you only mock at the boundary of a service (ie mocking the database or mocking something upstream) it’s much easier to use Mockito in a way that doesn’t inhibit correctness of your program.",1531355721.0
sissobr,"We hate because those that love it, uses it wrong.

People that like it use everywhere and in every invalid way of use it. Just take a look on they own documenation, they describe many of those anti-patterns.  For instance: ""Don't mock type you don't own!"".

https://github.com/mockito/mockito/wiki/How-to-write-good-tests

If you use it correctly, is very handy tool. 

So is better to hate it and use only when it need to be used, that love it and use it wrong :D",1531383448.0
SplashAttacks,"I personally like Mockito.  I guess to each their own.  Mockito is not without its issues, but every mock library has some.

specs2 has a nice [Scala version](https://etorreborre.github.io/specs2/guide/SPECS2-3.4/org.specs2.guide.UseMockito.html) of it also for ScalaTest, so there is definitely support out there for it and not completely frowned upon by the community.

It makes code more Scala like:

    val daoM = mock[SomeDao]
    daoM.foo1.returns(2)",1531354149.0
m50d,"The immediate, if subtle, problem with mocking like example 1 is magic that you can't refactor according to the normal rules of the language. In normal Scala your code would be obviously equivalent to:

    val p1 = when(daoM.foo1)
    when(daoM.foo2).thenReturn(4)
    p1.thenReturn(2)

    assert(testSubject.bar() == 8)

But in fact this will fail. In a small example like this it doesn't matter so much, but in a larger test it can be harder to see; what tends to happen is you get a chilling effect where people simply stop trying to refactor their tests to remove code duplication etc. (because you can never tell when a simple refactor will mess up the mocking) and the code quality of the tests goes down and down.

Whereas example 2 is plain old Scala that follows the normal rules for Scala and can be refactored normally. (And as you say, interfaces should normally be smaller than this, so the problems with example 2 are much less of a problem in real Scala codebases; for ""repositories and daos"" you might be able to write a generic method, or avoid needing a separate service at all).

There are a couple of other issues that make mockito worse than other mock libraries:

 * It has poor support for strict mocking (the default is to return `null` for calls that weren't explicitly mocked and in practice nothing will work properly if you try to change this default), meaning tests often pass by accident or fail miles away from the actual failure.
 * It has explicitly no support for multithreaded use. If you use the same mock from multiple threads it will break nondeterministically and bugs will be closed as WONTFIX.
",1531387125.0
rjghik,"I would not recommend using Mockito in Scala for technical reasons - Mockito is heavily based on runtime reflection, dynamic proxy generation and sometimes may be very surprised of what it finds in Scala classes. For example: try mocking a method that takes or returns a value class.",1531386406.0
,[deleted],1531350854.0
DanielShuy,"For mocking in Scala, I personally prefer [ScalaMock](https://scalamock.org/), but I still love using Mockito for Java.

Like any other tool, tools are supposed to ease our work. Problem is, many developers are using tools without fully understanding them, eg. due to company mandate, which leads to them to use it wrongly, defeating the purpose of the tool.",1531364787.0
alexanderjamesking,"Mockito also behaves weirdly when dealing with default arguments (you’ll see double on some of the call counts).

I don’t think the library itself is hated, the technique can be incredibly useful in some cases but I have memories of Java code with about 10 layers, mocking at every level, refactoring that code was a nightmare.",1531372443.0
lapelotanodobla,"I quite like it, to the point contributed mockito-scala to the main framework which is soon to be released, this is to overcome many of the problems mentioned here. 

I know I could just use scalamock, but in some companies, for different reasons use mockito so let’s better have a more scala friendly one

Please check out https://github.com/mockito/mockito-scala, binaries will be in maven central soon, comments, contributions and constructive criticism are welcome.

As others said, some tools get hate because some people use them incorrectly, but in that case you have a people problem, and those problems don’t get solved that easily ",1531411146.0
sdelmore,"I prefer scalamock to mockito as well but rarely use either.  I believe much of the mocking hate comes from the values love.  Even in java, nobody mocks values.  You don’t mock an Int, or a String.  I think in general if you have a community advocating programming with values, they are not going to be advocating mocking, because they won’t really see much value in it.

That said, if I come into an existing codebase that is hard to test I might reach for mocks, but would probably think this is a crutch I am reaching for to deal with a design issue rather than a nice solution.  Also, I don’t think there is much hate in the Scala community for test implementations, just mocking libraries which are historically used for code that is hard to create a test version of.  If you have an interface that typeclass based for example, making a TestDb interface shouldn’t take any more time than mocking your RealDb interface and there will be zero magic behind the implementation and no need to read docs on a new tool.",1531373882.0
mdedetrich,"I don't think people specifically hate Mockito, but if you write in a more FP (or pure FP) way, mocking is basically almost never done, you just end up passing different arguments to functions (or set up your `case class` in a different way).

Mocking is something that you need if you mix state with data, which is something that typically you shouldn't be doing in idiomatic Scala.",1531394426.0
ratherbefuddled,"Hate it?  No.  It's just unnecessary.  I mean, your average application has http and databases at the edges of the system and the popular libraries for those offer abstractions that are always going to be easier to use than some sort of reflective  magic.  All the rest of it can be composed of pure functions - why do I care which functions get called if the values are right?",1531421367.0
jokasx,"Oh yes, I kind hate it. Also specs2 and scalatest. 

After many tests written and trying to understand how to use the lib there's always some corner case you are constantly hitting with it where I've spent hours searching the web on how to do it, or how to solve the specific mock problem, mostly to read somewhere ""oh it's not so well supported because you're doing something wrong."" or the classic nulls being thrown everywhere or exceptions being thrown. Also the magical counting of method calls that fails sometimes but other times is ok... grrr, too much. Also it feels like a java api first most of the time and leaves you scratching your head constantly.

I think I hate all those testing libraries. Always too many options and choices on how to do things, different words that all do the same, lacking documentation, assuming you know java, etc. I don't want to spend hours constantly learning the specific dsl of each of those libraries to just write a simple test. It's annoying.",1531435336.0
Tohnmeister,TIL that everyone hates Mockito. I've used it for several years with great satisfaction.,1531400434.0
,[removed],1531347914.0
llaammaaa,"One thing I never understood about akka's supervisors... In the example given, one actor pipes a future to itself, which fails, and so it gets a Failure(e). At this point the actor chooses to throw to let the supervisor take over. Why not just send a regular message to the parent (and maybe terminate yourself too)? It seems like an artificial distinction between communicating errors and non-errors.

Ok now one answers is: what happens when when an actor does throw? There needs to be some way to handle that... So you need something like supervisors.

But in Akka, all io is going to happen in a Future, so that might fall, but that's different than the actor throwing, and sure a programmer might make a mistake and get say a null pointer exception, but a programming mistake won't be able to be handled by the supervisor. And, of course, anything synchronus and dangerous can be wrapped in a try.

Anyway it seems to me that the *authors* of Akka need to assume that an actor might throw and so created supervisors, but the users of Akka should probably just never throw and ignore supervisors. ",1531367039.0
m50d,"A shared screen feels like a much more realistic programming environment than a whiteboard, so I'm happy about that, though less happy if I'm obliged to solve a problem without a proper IDE.

Some people seem to worry about whether things like looking up APIs will make them look bad which I frankly don't understand. The way I see it I'm confident in the skills I have and if your interview process doesn't help you figure out whether I have the abilities you need then that's a problem with your process. Looking up the API is what I'd do for a real programming task, you bet it's going to be what I do in an interview situation. I haven't rote-memorised a bunch of APIs and frankly I'd be suspicious of a programmer who did.

Other people seem to have a chip on their shoulder about being asked to do basic coding exercises which I also don't understand. Of course an employer wants to check that I can actually write programs. I'd be wary of an employer that didn't check that.",1531315050.0
juli1pb,"I had to do this during my last interview wave. I prefer this to a blackboard. Much more realistic to real-life coding. Also, what is the problem with watching you: if they are hiring you, they will have around you all the time, review your code and other stuff. Better know how you are working, that seems a pretty safe and reasonable process.",1531757973.0
,"> solve a specific situation in a given time while the interviewer(s) watching you

no",1531326686.0
coniurare,Will this be recorded so people can watch later if they don't have time to watch it live etc?,1531300638.0
softiniodotcom,Thanks for sharing! Awesome!,1531253609.0
tombraideratp,!remindme 1 day,1531297656.0
know_not_much,It’s today (12th),1531415745.0
Knigh7z,Was this recorded? ,1531967925.0
trenobus,"The main strength of Scala is that it is a bridge to FP. I knew next to nothing about FP when I started using Scala about 7 years ago. Over time both my understanding and programming style have progressed more toward FP. But I still have a ways to go, so I'd hate to see Scala wither and die.

I think people like me should be the main target audience for Scala. I suspect there are lots of OO programmers who would like to learn FP. And not necessarily all at once by moving to Haskell.

Another thing with the potential to greatly expand the Scala base is Scalajs. At some point webasm is going to be a viable target for a number of languages, and there are huge numbers of JavaScript programmers who have known nothing but JavaScript. So once again, Scalajs could be their bridge to a ""real"" programming language. The Scala community should make it a priority to court JavaScript programmers with Scalajs.

I don't have any experience with Scala Native, but it sounds like it also has the potential to greatly expand the reach of Scala.

From my point of view, the problems with Scala are what they've always been: tooling, documentation, and library standardization. Yes, tooling and documentation have improved a great deal since I started, but tooling in particular still is lacking. By ""library standardization"" I mean the problem of multiple libraries for any particular area of functionality, be it FP or HTTP or database, or any number of things. The community really needs to get better at making libraries which have the mantle of ""standard"". That doesn't rule out people experimenting with alternative libraries, but the focus should be on making standard libraries better.

So I say, let Scala be Scala.
",1531287132.0
b0ggl3,"The remarks on dotty are somewhat FUD. There's going to be tooling for moving scala 3 to scala 2 code, calling scala 3 a different language is an exaggeration, and dotty aims to be binary backwards compatible with scala 2 so gradual adoption has been planned for.",1531258682.0
naftoligug,"IMO one of scala's biggest achilles heels is the fact that its staunchest supporters are its most vocal critics. Scala users love to criticize Scala. (They love to criticize most other languages even more, but they don't usually do so unprovoked.)

In contrast, for most other newer languages, I always hear people going on about how great it is. I think it's because Scala tends to attract people that have seen it all, many have the perspective that software in general is terrible (which is true in many ways) and Scala is just orders of magnitude less bad than $SOME_OTHER_LANG.

On a more practical level, there are tons of talks at lots of conferences with people advocating any technology you can think of, Kubernetes, Kotlin, Sprint Boot, React, and so on. While Scala developers give ""teaching"" talks at Scala conferences, but how often do you see talks at Java or general programming conferences about how awesome Scala, Play, or any other Scala-related technology is?

Similarly, the state of documentation would be a lot better if the Scala camp had a similar percentage to other languages' of people who love blogging about existing features. (I feel like most blog posts in the Scala community are about sharing new ways to do things in FP, which is great, but doesn't address the issue at hand.) Maybe I'm exhibiting grass-on-the-other-side syndrome. But there are a lot of ways people in the community can make Scala more interesting to people who haven't gotten too acquainted yet.

Anyway, one thing to keep in mind is that in the last few years, there has been a sort of explosion in programming languages. The pie is being divided into many more slices. (The good news is the pie is growing too...)

And of course, most of the popular languages are backed by a lot of muscle. C# and Typescript have MS (no longer taboo in OSS quarters), Kotlin has Jetbrains, Go has Google (which also has Dart, and supports Typescript and Kotlin), and Java has Oracle. And Javascript has the web itself. So most of those aren't fair competitors.

There are a lot more points in the talk I could counter. But the bottom line is, I agree that we need to get better at this game, but I don't think giving talks about how dire things are is going to attract more people to Scala. I mean if you really tried every other channel and it's the only way to get people's attention, fine.

So again, if you want Scala to improve, you need to engage in dialog. That means open, bidirectional settings (like gitter, etc). And yes, that means you are forced to phrase it in a more civilized and less theatrical way. And you (along with everyone) need to accept that your view, like everyone else's, is only part of the picture, and issues are complex and have multiple sides to them and are usually subjective.

And if you want Scala's popularity to improve, then give talks about how awesome Scala is, at conferences where people aren't already in the Scala choir.",1531372497.0
silentraquo,"I guess I'm one of those people who don't exist. I don't care for Haskell-style FP, and very much appreciate the mix of OOP and FP that Scala allows for.

In my view, Scala is a very general and a remarkably unopinionated language. It efficiently encodes and integrates multiple programming paradigms in one language, letting you pick and choose what you want.

Yes, you can make another Haskell-on-the-JVM language that is better suited for that specific paradigm than Scala is, but then it'd be worthless for anything else, whereas Scala is useful to a wider range of programmer preferences and skill sets. It's a feature, not a bug.",1531245492.0
techempower,"The number of pull request is pretty good in Github for Scala #12:

[GitHut 2.0](https://madnight.github.io/githut/#/pull_requests/2018/2)",1531329759.0
sudkcoce,"Mr. De Goes, thank you, you have just reduced my chances to introduce Scala for our next project by 90%. And now I will have to do it in Java. You probably forgot how that feels like. And how fckn distant _any_ form of FP is when using Java...

I don't understand the almost constant bashing on Scala by people that ""care"" about it. I really think you should program in Java every now and then - you will fast appreciate Scala as it is...",1531488735.0
TheInfestation,"Oh man, I would hate to be the speaker following up here. Hey guys... so uhh... I added another feature, the virtual inheritence monad! ... for my thesis﻿ ",1531408386.0
justinhj,"* While I have great respect for jdg there are some issues with this talk:
* Typelevel ecosystem is thriving and has great fp projects including Cats, Monix, Doobie, Circe and Fs2. This is not mentioned.
* Having Oop is a great gateway so we can convince our pointy haired bosses and mainstream colleagues that Scala can be gradually adopted into a project.
* Reactive and actor based patterns, Lightbend and so on don’t get a mention and yet are used throughout industry and are very valuable tools
* ZIO maybe 100x faster than Future in certain benchmarks but can I get a 100x speed up on my real world oop code, my actor code, even my future based code, by switching to ZIO? I feel like that's false advertising.",1531373011.0
hyperforce,"Is it a coincidence that Thanos and John are both large, muscular, bald men?",1531252452.0
djsumdog,"He talks about Scala3/Dotty and I can't help but think to Python2/3. 

Today, almost all new projects are started in Py3, and most of the libraries on the python3 wall of superpowers are in the green. A few years ago Django totally killed all it's py2 backwards comparability imports.

At the same time, Python is a much more used language. It also took several years to get everyone on board with python3, and many academics still use python2 (as do old, closed, proprietary apps that embed Python).

And let's not forget the classic failure of Perl6, which nobody migrated to. ",1531254559.0
ivanovich_ivan,"Its funny that a lot of people here think Kotlin will be the next Java and beat Scala. Nothing can be far from the truth. I have been observing kotlin since its launch, it has been brought up many times in the company that I work for(not by me) and it has been declined every time for back end development since Java is fast catching up. 

It's making a lot of noise in the android space since Java 8 and higher versions cannot be used there. Yes, Scala is niche, but its usage is steadily increasing. I think its best for Scala to be in the FP + OOP form. If Scala goes down the path of pure FP, it will definitely lose. Eta will at-least take two to three years to be production ready and will be much better in pure FP in comparison with Scala since it is a Haskell port. And also, what is preventing people from moving to Haskell if its so appealing? Pure FP becoming mainstream is far from reality. It might not even be that way in the foreseeable future. Scala covers a lot of middle ground i.e become a better Java + ability to do decent FP is what many people want. 
",1531383281.0
fromscalatohaskell,Tldr?,1531245299.0
naftoligug,"Re the Scala 3 fearmongering, does anyone remember the SBT 1.0 fearmongering? Or we all forgot it because the transition was executed so well and all the dire predictions didn't come to pass?",1531364557.0
cphoover,Great talk.,1531339924.0
domlebo70,"This talk really resonated with me. I feel embarassed everytime I need to onboard a new development into our scala code base. The tooling, sbt, docs, type inference issues, the compile times... Ugh. ",1531263222.0
drippel,"Frankly, if John could take all the FP bigots with him and leave, Scala would be better off. 

Scala is great specifically because it combines OOP and FP.  That's at its very core.  If that's not your cup of tea, then move on.

People like him who love nothing better than to lecture others about monads, correctness, and purity are exactly the reason for poor adoption and creating a less than friendly culture around the language.  And other FP languages as well.

&#x200B;

 ",1535133732.0
stevbov,"The JVM already has a great FP programming language in Clojure, which is surprisingly lacking any mention in the presentation.  Doing what this video suggests will torpedo Scala's popularity.  At that point you may as well just send OOP to Kotlin, FP to Clojure, then kill the language.",1531255941.0
AEtherSurfer,"Rúnar just made two new Scala libraries

https://github.com/runarorama/latr

https://github.com/runarorama/scala-mset
",1533060238.0
tombraideratp,**Very important factor for scala is to bring tools that can convert OOPs code into functional code for debugging and learning e.t.c. That way new breed of OOPs guys from JAVA world  can pick up scala and start maturing into Functional prototyping.**  Currently due to time constraint with projects and lack of senior flocks in industry that appreciation  is lacking. Put effort in above words your future self  will give me gold .,1531295603.0
mr___,This is turning into /r/programming... all blog spam no community,1531397913.0
joshlemer,"There are in fact [monthly who's hiring threads](https://www.reddit.com/r/scala/search?q=Who%27s+hiring&restrict_sr=on&sort=relevance&t=all) here. In addition, I see a lot of postings on LinkedIn, Indeed.com, as well there are more links to job boards in the ""Scala Jobs"" section of the sidebar. ",1531177948.0
hyperforce,"Hey man!

* Hacker News threads
* Threads here
* Stack Overflow careers
* Functional Works",1531245488.0
CinnamonHeart,I see them on https://functionaljobs.com/ sometimes,1531185152.0
Spleek17,There's also a [gitter room](https://gitter.im/scala/job-board).,1531268083.0
FunctionalCodey,"Hi, we have a bit over a hundred Scala jobs here at Functional Works:

[https://functional.works-hub.com/jobs/?search=scala](https://functional.works-hub.com/jobs/?search=scala)",1531468826.0
AesaKamar,"Thanks, everyone

I managed to find [this month's monthly hiring thread](https://www.reddit.com/r/scala/comments/8vi5nq/who_is_hiring_monthly_rscala_job_postings_thread/) as well!",1531318099.0
Linq20,We are hiring a lot of Scala developers in Toronto.,1531484300.0
y0y,"Scalaz 8 IO (ZIO) looks neat.


...how can I try it out? There's a repo but it doesn't look like there are any releases pushed? I don't see much info about roadmap, but maybe I'm not looking in the right place.",1531556496.0
kaeblo,"Not a question, but I look forward to *toIntOption* a new *String* method in 2.13.
[link](https://github.com/scala/scala/blob/4d39d4f849cbab5d6ad61d74e07aba41c08c6340/src/library/scala/collection/StringOps.scala#L801)",1531815118.0
Weavile_,"I’ve been a developer for about 5 years now (primarily in java, C and C#, doing application development and creating web services). With that, I’ve been using OO paradigm and have wanted to branch my horizons toward other paradigms. Functional programming caught my attention and Scala seemed like the appropriate choice since it’s similar to java syntactically.

The syntax is easy enough and I’ve been able to make small applications with ease. My biggest hindrance is I don’t naturally think in curried functions. I realize this is an important and powerful aspect of functional programming and I want to develop a perspective to approach problems this way when using a FP language.

I would like to know what helped you develop a mindset to see problems in this style? What are good problems to go over to exercise this thinking? Is there any other advice that could aid me with this that I didn’t ask for? Thank you for your time.",1531143343.0
zinofire,"Currently working on a dogstatsd project in scala and I'm having some trouble really understand what is going on. I'm not exactly sure why the dogstatsd's default hostname is localhost considering it has to be sent to the datadog website. I thought maybe I am missing something and I need to run a statsd server on the localhost, but then I woudn't exactly know how to then send to datadog. Does anyone have experience with dogstatsd with scala that can help me out?",1531145369.0
viso_laci,"Hi there i joined a team, they often (mostly) use sync scala and sometimes Future. The team is very much open for improvements.

I think to start using monix.Task could be one big improvement, but i am not sure how to explain the benefits and not confuse them. 

I started to work on some presentation but its too abstract. Any ideas or old presentations? The typical effect in our project is db read/write.",1531317700.0
ipoppo,"Hi, I will join a team using scala and spark next month. I have background in Java, javascript/es6, python. Have some knowledge about FP but not using extensively. As a scala newbie, what you think i should focus to be a good scala programmer.",1531402026.0
Nicofisi,"    def x = List.fill(10); 
    x(1)


how to write that so it works?",1532182703.0
AesaKamar,"Where does the community look for hiring opportunities? 
I haven't really been able to find much that's specific  to the Scala community. 

Maybe even somewhere mkre tailored towards the FP flavor of Scala, but that might be a lot to ask for. 🤞",1531177554.0
domlebo70,Anything that speeds up scalac/dotty is worthy of an upvote,1531185044.0
U2aLffOKCiYC1vk,"I work at AWS, which uses plenty of Java and most of my peers are moving away from it and are mostly developing new projects in scala. Many of its constructs and concepts render the language very powerful. 
Its compatibility with java makes it very quick to adopt it for developing new features that depend on legacy java code. An added benefit is scala is pretty good for developing distributed applications and addresses many shortcomings of developing concurrent applications in java.
On a personal note, I found it to be a fun exercise learning and working with scala.
",1531113688.0
kag0,"Career wise? I don't see why not. I don't know where you're located, but most cities with a high demand for software engineers will have Scala opportunities. 35 is only ancient if you're the kind of coworker who insists on using whatever stack you got comfortable with when you started your career (which doesn't sound like you).

As for if it's a good language for your taste, hard to say. Try it and find out.  
My pointer would be to nail down the basic (classes, objects, inheritance, pattern matching, etc) Scala equivalents to the C# concepts you already know before diving into the standard library (it's big, and the collections library can be intimidating if you're not already familiar with type classes).",1531109522.0
OffPiste18,"If your primary motivation is job prospects, Scala is not the right language, realistically. There are probably 50x the opportunities in one of the really major languages like Java or Python.

The majority of Scala jobs are also based around spark, so that's another thing to keep in mind.

The flip side of this is that there aren't comparatively many people who know Scala, and data engineering is pretty in-demand, so if you do end up with one of those jobs they can generally pay pretty high.

But it sounds like you're mainly looking for a safe bet, and that's probably not Scala at the moment, as much as I wish it were. I love the language and I use it for all of my personal projects, but the pool of companies using it is just so much smaller that it's quite hard to find one that ticks all the other boxes too.",1531115555.0
homermanson,"Dude/dudess, please, I'm way older than you, and I started learning Haskell, and I'm going to try to get a project with Haskell as main language. I was way older than you when I've learned Scala, and I'm now in my first Scala project. My point is I guess, it's not too late, learn Scala, it's an awesome language, incredibly powerful, and rewarding. And I'm pretty sure it'll be used more and more in the industry, so it's worth it.",1531115907.0
m50d,"I'm a huge Scala fan and have been using the language for nearly a decade. I think on a technical/ecosystem level it's the best language going at the moment. I bet on Scala and it's gone very well for me, both subjectively and monetarily.

But honestly I'd hesitate to jump in right now. I feel like the language has lost a lot of momentum in the long gap between 2.11 and 2.13, and the shadow of Dotty takes away air while threatening a difficult migration (and I'm scared of the effects proposal and expansion of implicit parameters, which to my mind threaten the things that make Scala great). There are more options in a similar language space, which is good but makes your choice harder - Swift, Rust, a resurgent OCaml/ReasonML - and a dirty-tricks campaign from Kotlin pushers. The cats/scalaz split in the ecosystem looks like it's here to stay, with everything on top having to go to extra effort to work with both - competition has its upsides but a lot of this particular competition is just wasted duplication of effort.

There are grounds for hope: 2.13 seems like a restart of real language improvement with the collections rewrite. Perhaps Dotty will be released soon and migration will be easy. Few other languages have higher-kinded types, which give Scala a huge amount of flexibility in adopting new ideas without major language changes, and the tooling and ecosystem situation is better than most languages, for all our constant complaints that IDE support could still be better. The language remains popular and lucrative, and if anything I've seen more acceptance of older Scala developers than in other languages. But it'd be a roll of the dice.

I would definitely recommend picking up an ML family language - at a minimum, doing so will make you a better programmer and broaden your repertoire of techniques. I'm not sure Scala is the best option for a first ML-family language, particularly if you don't have JVM experience already - it's a relatively messy language and has some awkward corners that exist for Java interop (these things serve the language well in a pragmatic context for writing real business code but can make it less good for learning). But there's no perfect option - F# may be cleaner but is harder to find jobs in and lacks HKT, Haskell forces you to jump in at the deep end and has limited tooling, OCaml has limited tooling and limited jobs, Rust has limited jobs and no HKT and limited tooling and is immature.

So maybe Scala's as good as it gets. I feel like the whole industry is in a weird place at the moment and could go in many different directions, so there really aren't any safe options. I think Scala has the technical merit that I hope will shine through, but a reasonable person could certainly pick a language with a bigger name behind it, or stick closer to the herd, or...",1531135502.0
Siltala,"By adopting scala you are leaning in the correct direction. A strictly typed language with functional aspects will give you a good grasp of most things. 

Choosing a language is not a career choice, however. Your career is learning. ",1531117324.0
know_not_much,"By reading your post above, I see that your only motivation seems to be money. 

Now you can make money by doing react and node. you can make money by Go and definitely with Scala. but that's a bad motivation.

Find a good motivation to learn Scala. Do you find functional code more succinct and beautiful? do you hate factory of a factory of a factory. Do getter and setter methods and boiler plate code to convert an object to JSON make you angry? If yes, Scala is a good choice. 

if no, then you can easily get good money by doing React and Node.

Also, a lot of Scala jobs in the NYC area are actually Spark jobs. So just learning Scala will not help. you will need to learn the whole bigdata ecosystem. ",1531113514.0
dhlbrk,"If you just are interested in lots of job prospects, you should probably focus on one of the major top 5 languages (Java, Javascript, C++ Python, C#) as your primary tool.

Scala is a great language and I love working in it (have been for about 5 years, remotely for companies in the Bay Area) but if you are interested in application development, it hasn't got quite enough critical mass yet.  It feels to me like all the oxygen in the application development room has been sucked out by Spark and other data frameworks.

I'm in my late 40s and still doing software.  Just don't on the sidelines, keep learning even if it isn't something you plan on using right away.  Meet other software folks (meetups, conferences or whatever) and say engaged. 

Good luck!",1531156656.0
binkabir,"I work at [africastalking.com](https://africastalking.com) a kenyan SMS, Payment, Voice and Airtime company building a pan Africa solution, we use scala and Akka extensively(90&#37; of our codebase). 

 Scala is awesome, I bet you. we never regretted moving to it.

yes there are some challenges for newbies, but the overall advantages out way them. ",1531404755.0
1r13h,"First of all no matter how good a programmer someone is, if they scoff at anyone earning 80k a year they are an idiot.  It sounds like your killing it career wise if not fulfillment wise, take credit for that you earned it.

Second of all you are not a glorified anything, you are a programmer whose domain happens to be databases right now. You want to change domains, programmers do it all the time, people in other industries do it all the time. You wouldn’t think a carpenter who made tables was crazy for learning how to weld and churning out spiral staircases. 

Third, I dropped out of computer science when I left school because I couldn’t handle the maths. Almost a decade later when I decided to give becoming a programmer chance I chose front end and html and JavaScript because ‘compiled languages where especially hard’ and i thought I wasn’t smart enough to figure them out. 

5 years later, because of the play framework tbh, I have found , and write for a living now, scala. I am well on my way to understanding and being able to utilize the more advanced corners of the language as well as getting a handling on the, frightfully mathematics filled, pure functional community of scala programmers.  None of which I would have really thought possible 6 years ago. On top of all that they pay me great money to do it.

I don’t know if scala is going to eat Java’s lunch and be the next next in Vogue language. Probably not. I do know that the syntax you write is just the tool you choose to do your job. With scala you can start relatively small and easy yet have so many paths to choose as you grow laid out in front of you , all the while learning up to date, foundational and advanced techniques that should serve you no matter what your next language turns out to be.

If it’s what you want.... you got this, good luck, have fun.",1531458839.0
ziano_x,"IMHO  every programmer should definitely give Scala a shot. I have been mostly a Java programmer for the past 8 years but I have also worked on Node.js and PL/SQL a lot. I tried Scala in a project few months back and fell in love with it instantly. The harmony between OOP and FP is a big win. Also smart features like implicits and extensibility are major features.

I would advise you to carry on your path of learning. Since you have good SQL experience, I assume you might be having a good understanding of databases. Couple that with good understanding of Scala, you could try out as a Data Engineer. Many projects that use traditional ETL and BI workflows are moving to a more scalable, distributed data processing architecture. Scala is turning out to be a very popular tool in this domain. Since you are also dabbling with other languages, I would also suggest you to pick up Python which should be relatively easier to get comfortable with. 

&#x200B;

All the Best!! Just keep learning and keep applying for the right jobs. You will make it!",1537491205.0
dave4420,Can you write an `OFormat[SaveableModel]` that decodes into the correct subclass based on the fields in the JSON?,1531082357.0
amazedballer,You could use a union type: https://github.com/hmrc/play-json-union-formatter,1531083069.0
param_module,"I'm that asshole that goes against the grain and uses an ML / C# like package naming convention, and only uses com.xxx.xxx for the releases in sbt, honestly Java has pretty much shut everybody up, with most of their grievances towards it, but it's packaging system will be the ugly thing that remains for eternity. ",1531063620.0
grizzly_teddy,Can someone tell me how good the compilation performance is compared to 2.x?,1531019046.0
chaotic3quilibrium,"Tysvm! That was excellent! From each different perspective I can learn and understand FP terms like Monad as they are practically and pragmatically applied. And that helps me grok and integrate FP even more effectively!

Thank you for your time investment here.",1530972210.0
m50d,"Seems to leap to a conclusion without really justifying it. I don't disagree, but if you're going to make the argument that we should use cats because it has other useful functionality, you really ought to show what that other useful functionality is.",1531227016.0
domlebo70,"I really dislike writing code in  interviews. A good question I use is: Whatyour favourite feature about scala? What is your least favourite feature? What things do you think they should remove from the language? What do you think they should add?

This tells me a lot about what they value, and how they write code. It also tells me a bit how there depth of knowledge on various parts of the language, and often leads to good followup discussions. ",1530929810.0
carlfish,"""If you were going to do <recent major project listed on resume> again, what would you do differently?""

In 15-or-so years of interviewing, I've found the interview questions with the least predictive power are the algorithmic ones, and the most useful ones are where you tease out what the candidate _actually accomplished_ in previous jobs, and what they learned in the process.",1530951206.0
,"By the time someone is sitting in front of me I already know they can write a program. We can establish this by looking at OSS contributions, by asking for a code sample, by giving a *small* homework problem, etc. So then we can talk about the code they wrote, consider alternatives, etc., and just kind of chat about programming for an hour. I try really hard to make it relaxed and fun because by far the most important thing to learn is whether we want to work together or not.

I realize this is probably not a helpful answer but I'm honestly disgusted by the ritualized hazing that we call ""interviewing"" in this industry.",1531002683.0
type_enthusiast,"Here's my favorite first question to determine a candidate's approach to Scala:

Given a list of tuples `(A, B)`, return a `Map[A, List[B]]`. I don't proscribe any philosophy nor forbid any use of standard library - if they know to do it with `list.groupBy(_._1).mapValues(_.map(_._2))` so much the better. But if they do it in a Java way, with a mutable hash map collecting the results, it opens a conversation. The way they've done it is perfectly practical and will totally work, so I don't count it against them at all. But I ask if they can do it without mutating, even though it will be less efficient in all likelihood.

It's a great way to see how people think without giving them a stupid ""gotcha"" algorithm test. And it's really surprising how many candidates spend the whole hour thrashing on the original question, no matter how much you engage or how much you try to nudge them.

Side note: I try to avoid whiteboarding coding questions. So these people are working in an IDE with completion and access to Google if they don't assume it's off the table. Even so, most candidates either get it within 5 minutes or spend the whole hour struggling.",1530945056.0
pedrorijo91,"I always like to question about the most appropriated data structure for a given problem. It's somehow a easy question, but important on efficient code, and a good filter for candidates.

I also like to know if the candidate can understand the potential for code reuse with higher order functions. ",1530995950.0
Storini,"For a role for an experienced Scala dev,  how about ""Write me a typeclass to add method .*some-name* to *SomeType""*, where you pick something relatively easy, e.g. add a `.backwards` method to `Int` \- 123.backwards = 321. An essential concept in our world, I think.",1531339884.0
yuvalos,"Not a favorite, just something we ask during phone screening interviews: What is a for comprehension in Scala? Looking to hear that it is syntax sugar over flatMap, etc, and that the interviewee understands how it differs from a for loop. ",1530995327.0
a2549229,I like asking them to write a function which simply reverses a List. The function should not use loops nor the built-in ‘.reverse’. I’m basically looking for a recursive solution without saying it explicitly. That may sound simplistic but you’d be surprised how many candidates fail at it.,1530933058.0
kpws,write a scala macro to tell whether a piece of code has an infinite loop,1530928164.0
amazedballer,"Inventory management is a near perfect use case for akka cluster sharding.  Each SKU is a persistent actor and only gets loaded when an event hits.

You can use Lagom to manage the CQRS and clustering for you and that will help with ordering of events and the eventual consistency issues as well, which is important in inventory.",1530906709.0
ArneTreholt,"Although I've only used akka sparingly, having one actor per item in a warehouse seems very strange to me. If that is a clean way to model the problem, I'd love to see some example code.",1530909042.0
dtechnology,"That is fine, altough I would use akka typed with akka persistence. You can either using akka cluster or stop irrelevant actors with a timer.",1530910651.0
beezeee,"It is boilerplate. Usually you would have more than one persisted model, and this approach doubles the number of types you need to define and likely requires you to manage some kind of transormation code from X to PersistedX for each. You could just do

case class Persisted[A](id: Long, data: A)

And now you can model Persisted[Customer] or any other persisted type you need.",1530874360.0
valenterry,"There are a few things here.

First, an even more FP idomatic approach is, to not use inheritance but typeclasses.
Like `trait Customer[A] { ... }` (with some syntax from an implicit class) and make your application then use it like `doSth[C: Customer](customer: C)`. If you have complete control over the code all the time, then inheritance is also okay.

Second, use different case classes for different things. That is, in your application, you have some csv serialized form of a customer? Well that's a `case class CsvPeristedCustomer(...)` to me, probably with csv formats automatically derived from this class. Later there might be a `case class JsonTransmittedCustomer(...)` or something like that, with json format generated from e.g. circe. And then, you have a Customer how you business people see it like. This is your domain model your use within your whole application.
On the boundaries of your application you convert all the json/csv/whatever things into your domain model customer and your are done. Some for requests, responses and literally everthing else which is about input/output. Your domainmodel should never change because there was a new output/input format added.

And third, you might want to take a look into how you can model multiple views on one customer from a domain perspective - that means we are now talking only about the domain model customer, no input/output/csv/json stuff. So, from your business view you still have customers in a context where they can be identified with an id. And you have them in a context where they don't have an id. You can give it two different names, but chances are high that, semantically, they are both the same entity and just one of them has an additional information (in this case the id). How to model this? /u/tpolecat has held a great talk about that. I think it was this one: https://www.youtube.com/watch?v=7xSfLPD6tiQ

I really recommend to watch this. You will very likely stumble across the problems addressed in this talk in almost every application. ",1530879724.0
Bolitho,You could also consider to use an ID generated by the *client*; or a [mixture](http://blog.ploeh.dk/2014/08/11/cqs-versus-server-generated-ids/) of this approach.,1530893854.0
sutongorin,"Haven't seen udash before. I might give it a try. Seems interesting.

Although I don't like the API in one regard at least already:

```
div(
    TextInput.debounced(input, 
      placeholder := ""Type a number and press enter..."",
      width := 270
    )(
      onkeyup := { (ev: KeyboardEvent) =>
        if (ev.keyCode == ext.KeyCode.Enter) 
          parseInput()
      }
    )
  )
```

The options for everything like `placeholder := ""Type a number and press enter...""` are just not very discoverable. If it were actual named parameters the IDE could help you out with auto completion but like this you have no help and don't know what you can actually pass.",1530960965.0
cynick_uk,"If anyone is interested in following the development of this fast-moving document, the conversation around it appears to largely begin here: https://github.com/lampepfl/dotty/pull/4616#issuecomment-402703134

There's a bunch of background further up in that thread and spread across several older issues and PRs. The link above is for the discussion of the design introduced in the document.

Edit: it's now been moved here, but the previous thread still exists for background: https://github.com/lampepfl/dotty/pull/4768",1530869669.0
Lasering,"Awesome!

Does this example hint at a possible way to ""solve"" type erasure?
    
    transparent def defaultValue[T]: Option[T] = anyValue[T] match {
      case _: Byte => Some(0: Byte)
      case _: Char => Some(0: Char)
      case _: Short => Some(0: Short)
      case _: Int => Some(0)
      case _: Long => Some(0L)
      case _: Float => Some(0.0f)
      case _: Double => Some(0.0d)
      case _: Boolean => Some(false)
      case _: Unit => Some(())
      case _: t >: Null => Some(null)
      case _ => None
    }
    ",1530829384.0
RandomName8,no one is bothered by the similarity of transparent and inline? ,1530849987.0
joshlemer,Wow this looks really amazing! ,1530829719.0
Daxten,"hi, don't know if I understand your problem correctly. If you use sbt to build your program, it already uses zinc to decrease your compile time. You can also use ""~"" to make compilation happen automaticly when you have any file changes, e.g. `$ sbt ~run`",1530781295.0
raghar,"I agree with everyone else: scalac is slow and sbt adds its own overhead. With such simple project best you can do is keep JVM warm: use bloop or run sbt in shell and don't close it.

If your project grow bigger there might appear other opportunities to optimize (or actually, there will be opportunities to slow things down that you need to look out to avoid).

I've written a [post about the topic](https://kubuszok.com/2018/speed-up-things-in-scalac-and-sbt) some time ago, but in you case bloop and/or sbt shell is the best call. You can have some speedup (in my case \~15&#37;) if you replace OpenJDK with GraalVM, but don't hope for any order-of-magnitude one-liner optimization.",1530792835.0
rob505,"Intellij Community Edition (free) integrates well with SBT. You'll get incremental compilation by default, and it will spin up a persistent SBT instance which means you pay the startup cost only once. It also has a ton of features which, in my opinion, will help you learn Scala better and faster. For example, the ability to infer the type of anything that is a valid expression really helps when you start writing in a functional style.",1530817570.0
anferneed,"You can also use an in-memory cache such as the one provided by Google/Guava.

Set a X second TTL on the cache, have each request check the cache, if there's a hit, return the result from the cache.  If there isn't a hit, fetch from HTTP, store result in cache/return response to end user.",1530764295.0
Hegemon_of_the_toad,I'm using [Scaffeine](https://github.com/blemale/scaffeine) to cache HTTP calls and it's worked well for me so far. ,1530730944.0
pythonicus,"I would store the data in Redis without a TTL. Then, have another process on a timer which updates the data in Redis every X seconds. Your service will always use/return data from Redis.",1530738490.0
jangchoe,You can have ops install Varnish in front of your web service with TTL of X seconds.  Edit: provided that your proxy is a web service. ,1530811853.0
mr297,"Author here, feel free to ask me any questions here that you might not want to ask on Medium. Hope this is useful.",1530684876.0
vitalijzad,TensorFlow is a C++ library that has a Python wrapper. It also has Java and Go wrappers.,1530628257.0
vickumar,Breeze is pretty good for Scala - it's akin to numpy for python.,1530725695.0
bhrgunatha,"If you want to learn Scala, then I don't know, but if you know Scala and just want to use it while learning about algorithms, try Stanford's Algorithm courses by Tim Roughgarden.

*  [Engineering Algorithms Part 1](https://lagunita.stanford.edu/courses/course-v1:Engineering+Algorithms1+SelfPaced/info)  
*  [Engineering Algorithms Part 2](https://lagunita.stanford.edu/courses/course-v1:Engineering+Algorithms2+SelfPaced/info)  

A major advantage is that the exercises are marked based on answers produced by your algorithm implementations and so you're free to use whatever language you want. 


 ",1530594018.0
queny0,"Have you seen https://www.scala-exercises.org? 

You can try the Scala Tutorial and FP in Scala courses. ",1530605372.0
softiniodotcom,"Last time I was looking for the same I came across this: 

[https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504](https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504)

Have not had chance to buy and read but on my wish list to do so when time. If you get let me know what you think of it ? ",1530632055.0
aeriaglorisss,Why would it matter what language they are in. Language is irrelevant to this topic,1530748076.0
know_not_much,"Also lot of algorithms books and courses teach by doing inplace mutations which is optimal but as a Scala programmer I always think in terms of immutability.

Also there is always a conflict between me and the course. Even though I want to become a better programmer by learning algorithms. I find the course hideously teaching mutability at each and every step of the algo. 
",1530748693.0
m50d,"An actor that doesn't encapsulate state is pointless, isn't it? And since scala doesn't have second-class functions, there's no way to make an actor's state available to functions defined in other classes without, well, making it available to functions defined in other classes, which would break the encapsulation/isolation of that state which is the purpose of the actor.

Of course you can make an actor that accepts zero-argument functions and runs them. But at that point why use an actor in the first place? If you just want a mutex, use a mutex, and then you don't have any type-safety issues. If you're going to get any use out of the actor then there's no way to get away from having to be able to send the actor a representation of a command which is not just the actual invocation of the command, as far as I can see.",1530607678.0
CarelessEstimate,"I am not quite sure what you are asking. Are you asking if there is a way to pass a lambda function to an actor and have that actor execute that function, but only if that actor ""recognizes"" that function? I think that could be done with case classes as well, as you mentioned above.",1530584017.0
Philluminati,"If a actor had the job of just calling a function, whats it really doing and where does that fit into the design? That may be hard to read that code later on, rather than it being with the function creation.",1530774688.0
pheymann,"A colleague of mine is using vim for almost everything (including Scala development). I think his current setup boils down to running sbt with ~compile. Not sure how good the Ensime integration is.

I for myself use exclusively Emacs for all my work (including Scala with Ensime) and I have to say it is great. Very small resource footprint, fast and just a huge amount of plugins/features you can install. I basically switched all my task I do on a notebook to Emacs, except for browsing the web. Furthermore, I get the impression that productivity increased after improving my Emacs skills over time (highly subject). The same could be true for vim.

I would say give it a try.

EDIT 1:
As a side note, I started with IntelliJ but switched because my notebook produced heat like a power plant and the battery didn't last longer than 2h. After that switch, I started to learn the other benefits of Emacs.

EDIT 2: http://ensime.github.io/",1530597533.0
wfish,"Remember when you used to heat up the metal edge on a school ruler by rubbing it on an eraser and then you and your friends would see who could hold it on their arm the longest?  That’s what I would consider writing scala in vi.   I mean, it’s cool to suffer stoically.  But you don’t have to.

IntelliJ took a lot of time and effort to write, no sense in letting all that work go to waste just to see the children of Uganda message.  Not to mention all the hints and suggestions that IntelliJ provides to help you learn scala and visualize all the functions and sugar the variable you’re working with provides.

But don’t get me wrong, I love vi.  I’ve been using vi for more than twenty years.  I get to laugh at people trying to use vi like they get to laugh at me using emacs.  But when it comes to anything more than messing with configuration files or quick edits, i fire up a proper IDE.

But...vi does provide scala syntax highlighting last I looked.",1530574060.0
Philluminati,Good: https://blog.philliptaylor.net/vim-as-a-scala-ide/,1530637861.0
scabel,"I use both

* **Intellij-with-vim-mode** \- great for Jumping around source code you're not familiar with and has a nice ""code-review"" feature, but it gets prohibitively slow overtime
* **Vim** \- great editing tool but has its limitations. vim knows nothing about the object graph in the source. All it sees is a bunch of text. Well, you can try to solve that with ensime but it is slow, and doesn't work that well (I've used it for over a year).

So, my solution is to keep them both open and mainly use vim however every time, I wanna check source code quickly switch to Intellij.

Plugins I use, YouCompleteMe, vim-surround, vim-scala, vim-taglist (with ctags), ctrlp and a few others.

Given that lightbend is now working on improving scala tooling, I am hopeful, eventually things will get better.",1530697759.0
gimbal_lock,"Vim works fine, I use it more than intellij. I don't find myself sticking for very long with any plugins for Scala. I sometimes leave a split running a terminal emulator with a warm sbt instance. That's about it.

Intellij is fine for an ide, but people make it sound like writing Scala without an ide is this painful thing.  I think this is mostly projecting Java's problems (unfairly) onto Scala.",1530592572.0
softiniodotcom,"Hi 

I use neovim for Scala development. I have to admit I do occasionally use Intellij still but do try to mostly stick to neovim.

Basically main pointers about my setup are: 

* Use ensime [http://ensime.github.io](http://ensime.github.io)
* I use [https://github.com/pjrt/stags](https://github.com/pjrt/stags) 
* I have a terminal window open and I use SBT to compile and run tests and I use this to display the errors inside vim: [https://github.com/aloiscochard/sarsi](https://github.com/aloiscochard/sarsi) (note building this broken with latest version of Haskell you may need older version)

Feel free to take a look at my neovim setup dot files here: 

[https://github.com/softinio/dotfiles/tree/master/vim](https://github.com/softinio/dotfiles/tree/master/vim)

(I keep my plugins used in a separate file to my vimrc)

Let me know if you have any questions.

VIM support can only get better especially as both scala tools team and contributors of the ensime project are working on adding full LSP support: 

[https://github.com/ensime/ensime-server/pull/1951](https://github.com/ensime/ensime-server/pull/1951)",1530630519.0
Demius9,"I've been a VIM user for quite some time and do all of my development in VIM. For work I use Scala 100% of the time and in some side projects I've been toying around with C/C++11. There are some changes to the way you may have to think about things, but for the most part it works well. Some of the workflows that I do...

Finding Usages of a function or variable:
In an IDE like IntelliJ they index the entire project and use a massive index file to be able to tell you detailed information about where variables are declared, where they're used, and everything in between. In VIM you don't have this, and this is the main difference between an IDE and a text editor. This isn't to say that you can't get the same level of functionality with a little more work. Since I'm in the unix command line i take advantage of all of the unix tools to figure this out. This particular issue can be solved with a variety of tools including `grep`, `ack`, or on mac `silver searcher` and there should be various plugins in VIM that show you the information you need. For example, for me if i type `:Ags ""myFunctionName""` it will show me a snippet of all the places with that function and a few lines above and below

Type information:
Normally in the editor you can hit ""alt-enter"" and it will show you the type information. This is quite a bit more work and if you really rely on this functionality and don't want to ensure that `sbt ~compile` gives it to you, then you can try a language server or ensime. Both of these are good but require some setup. Ensime works fantastically in emacs but i've had some issues with it in VIM. I mainly rely on `~compile`

Auto completion:
Many many many different ways to accomplish this, but the built in auto-complete in vim is really good. `:h ins-completion` has some information if you want to look this up.

So yes, you can do a lot in VIM if you really want to. I never say ""going to an IDE is bad"" because to me, being a programmer is using the tools you're comfortable with and the tools where you feel the most productive. If thats vim, awesome.. if its an editor like intellij, keep at it. ",1530635654.0
Milyardo,"For pure Scala projects it works fine, I've never been successful in getting a good experience with projects mixed with Java and Scala.",1530636822.0
azzie_elbab,"In my experience feedback from ensime-vim is super slow when compared to emacs. I've used spacemacs for a while,  eventually ensime borked . InteliJ with vim emulator works fine ",1530716044.0
lafing_dumonde,"Erm, you guys do know you can use Vim as your default editor ....in.... IntelliJ right? Makes life a WHOLE lot simpler... 

Heres a link to a plugin... not entirely sure if its the correct one for your env.. believe there are a couple, but result is the same. 

[https://plugins.jetbrains.com/plugin/164-ideavim](https://plugins.jetbrains.com/plugin/164-ideavim)

And here is an alternate with some examples for configuring terminal shortcuts:  
[https://www.jetbrains.com/help/pycharm/using-product-as-the-vim-editor.html](https://www.jetbrains.com/help/pycharm/using-product-as-the-vim-editor.html)",1530598427.0
AesaKamar,"I personally don't use it.
But my good friend is a vim user and developed a library to facilitate his usage of it with Scala.

Hopefully it's of use to you.

https://github.com/pjrt/stags/
",1531177909.0
tombraideratp,Already spark team is working on  model serving .  Then why work on this .,1530545916.0
gbersac,I didn't knew Microsoft used scala. How much is scala in use there ? Only for spark related stuff I gess.,1530785186.0
shyamsk,"Silly question, but why not on Github or will it move there eventually?",1530610322.0
zzyzzyxx,"Yeah, json4s is particularly poor in this regard; definitely not designed with performance as a primary goal. It's doubly bad in the case that your serializer matches because this fold gets executed twice via, essentially, `if (findCustomSerializer isDefinedAt elem) { findCustomSerializer apply elem }`. And it does this for every element so the more fields in the object you're serializing (recursively, because it serializes sub-objects) the more this gets executed.

Probably your best bet is to pre-compose all your custom serializers into one big one and register that instead of registering them individually. At least that way there's only one thing to fold over instead of `n`.

The situation is not much better for field serializers where it traverses a linked list trying to find matches instead of using any kind of lookup. So you might try to do a similar thing there.",1530547386.0
plokhotnyuk,"Try jsoniter-scala instead. It is designed for safety and high performance. Also it is handy in derivation of codecs for standard cases, while has ability to use custom user defined codecs without any penalties.

Here are results of benchmarks which compare it with other JSON libraries for Scala:

http://jmh.morethan.io/?source=https://plokhotnyuk.github.io/jsoniter-scala/oraclejdk8.json

Moreover if there are no lot of fractional numbers it can compete on par with the best binary serializers for Java and Scala: 

https://github.com/dkomanov/scala-serialization/pull/8",1530819493.0
argv_minus_one,">`java++ 10!`

What in the world is that syntax supposed to mean?",1531258504.0
jokasx,Ctrl+C fixes wow. Not expecting things like that to ever happen. Thanks <3 ,1530782624.0
yang_bo,Will `CompositeProject`  become a replacement of  `crossProject`?,1533137419.0
MasGui,"Wow, this is a great release, well done! Semantic Versionning dsl + Project matrix!",1530563424.0
BitgateMobile,"Still working on [Scattersphere 0.2.2](https://www.github.com/KenSuenobu/scattersphere).  Lots of motivation to head toward distributed architecture in the next major releases.

Next release should include:

  - Ability to start a job with parameters (prep work for CLI)
  - Controllable, Pausable JobExecutor as a controller class, not a master class
  - Introduce docker support
  - Ability to register a job by name with the JobExecutor class
  - Ability to run a job by name
  - Distribution to Maven Central/JFrog

Lots of exciting stuff coming soon.  I hope to have tighter integration with Spark and Mesos in the next few releases!",1530590195.0
gr3gg0r,"I'm working on a chrome extension created with Scala.js that gets rid of those annoyingly long preambles found on a lot of recipe websites. If anyone would want to try it out, let me know. I'd be happy to send a crx file.",1531611624.0
mrxtravis,"What I have been working on, is not exactly a new web framework, but instead a Generalized Abstract Data Type Algebra to describe CRUD applications.  I finally have a proof of concept where once the CRUD-GADT is defined, it is interpreted into a running REST service expecting JSON that is validated and then saved to Postgres.  Another interpreter can create Swagger compliant JSON documentation and finally another interpreter that spits out the DB Schema.  Each of these interpreters are incomplete, but the POC is there.

The purpose of this library is to remove as much boilerplate as possible out of a CRUD application.Some REST services can be written in as little as 5 expressions -- including the generation of Swagger doc.

I call this project Bones: [https://github.com/OleTraveler/bones](https://github.com/OleTraveler/bones)

It is similar to [https://github.com/nuttycom/xenomorph](https://github.com/nuttycom/xenomorph) .",1531666110.0
zartemz,"**Amazon** **|** **Software Development Engineer II, AWS IoT Core** **| Seattle, WA, US | ONSITE | Full Time**

# DESCRIPTION

Are you a software developer who wants to make an  impact and connect billions of smart things to AWS eco-system? Do you  want to design and build back-end services that route, transform and  enrich data from and to devices on a global scale? Come join the AWS  Internet of Things (IoT) team, and be part of a revolution!  


**The team:**  
The  Rules Engine of Amazon’s Internet of Things platform (AWS IoT) enables  customers to filter, enrich, process and route data from devices to the  full eco-system of AWS services in a fully managed environment.  Companies from all over the world can build their smart features and  apps without having to worry about building scalable infrastructure that  scales with their message traffic from billions of users and devices –  because we do it for them. From simple sensors and actuators that barely  have enough memory to run an OS and implement connectivity - to  full-blown industrial gateways – they all can benefit from AWS IoT’s  Rules Engine to receive, store and process data to implement an ever  growing set of features without having to touch the device’s software  itself by using the power of the AWS cloud.  


**You:**  
We’re seeking  software developers with industry experience who are passionate about  enhancing customer satisfaction, operational performance, and growing  Amazon’s IoT business. If highly concurrent systems, distributed  functionality, programming language processing and difficult  synchronization problems make you want to take control, we have the  right challenge for you. The Rules Engine of AWS IoT is a high  performance, distributed system that connects customer data with the AWS  eco-system by enabling customers to create rules to filter,  pre-process, transform, enrich their message data before calling to  other AWS and external services to extract value. We are building and  operating a highly efficient instructions interpreter to process device  data at high rates. All of our development is very customer-centric, and  you should feel strongly not only about building and releasing good  software, but about making that software highly reliable under extreme  load. Experience with web-services, especially at massive scale, will be  helpful.  


You should be someone who enjoys working and having fun  with some of the smartest software engineers in the industry - building  complex system software to deliver significant impact for the rapidly  growing AWS IoT business.  


# Key Responsibilities 

* Design,  build and optimize the software to run a highly scalable communication  protocol engine and front-end to connect billions of devices to the AWS  eco-system
* Define intuitive web-service APIs and use AWS’s cutting edge technologies to develop and deploy new features quickly
* Empower developers from around the world to use our SDKs to connect their devices to AWS IoT to enable intelligent systems
* Automate deployment and monitoring of your service to track down performance issues before our customers get affected
* Recruit, interview and hire software developers
* Mentor junior software developers and grow their skills
* Drive development process improvements and establish best practices to ensure highest quality software

### Basic Qualifications

* Master’s or Bachelor’s Degree in Computer Science or related field of studies
* Minimum of 2 years of industry software development experience using Scala, JAVA, C#, OR C++
* Possess an extremely sound understanding of basic areas of Computer  Science such as Algorithms, Data Structures, Object Oriented Design,  Databases
* Be able to write high quality, testable and maintainable code
* Must have good written and oral communication skills  


### Preferred Qualifications 

* Strong analytical skills with excellent problem solving abilities
* Proven ability to learn fast and ability to adapt quickly to a fast-paced development environment
* Excellent understanding of resource and design requirements for highly scalable systems
* Experience with the Linux operating system environment
* Experience with web service development, distributed systems, and/or networking
* Knowledge of system performance and operational readiness monitoring
* Strong desire to build, deliver results, take ownership, and drive projects
* Proven ability to mentor other software developers and to improve development best practices
* Ability to optimize code for memory and CPU utilization to support  hundreds of thousands of simultaneous connections and tens of thousands  of message per second per server

# Apply at

* [https://www.amazon.jobs/en/jobs/688437/software-development-engineer-ii-aws-iot-core](https://www.amazon.jobs/en/jobs/688437/software-development-engineer-ii-aws-iot-core)
* [https://www.amazon.jobs/en/jobs/686690/software-development-engineer-ii-aws-iot-core](https://www.amazon.jobs/en/jobs/686690/software-development-engineer-ii-aws-iot-core)",1531512265.0
Daenyth,"# Teikametrics | Software Engineer III | Boston MA, US | ONSITE | Full Time

##Teikametrics##

Teikametrics is a leading maker of software for online, third-party sellers.  The company is profitable, with significant monthly-recurring-revenues and has not had to raise any capital. Teikametrics is on target for over 100% revenue growth this year. 

Online, third-party sellers account for over half of Amazon’s sales volume and 80% of Amazon’s catalogue. The addressable market for Teikametrics, in North America alone, consists of over 2.5 MM sellers accounting for $200 BN in sales revenue. Teikametrics provides broad-ranging tools for sellers that cover supply logistics, inventory management, marketing, advertising, sales and competitive intelligence. 

If you’re looking for an opportunity to join a proven, profitable, early-stage startup with massive growth potential, Teikametrics is a unique opportunity in the Boston job-market.

##Software Engineer III##

Teikametrics is looking for a software engineer with strong computer science fundamentals and a background in application development. 

Our primary tech stack is built on Scala with cats, fs2, akka-http, slick, and typescript with react and redux. We also use ruby, python, javascript, and postgresql. We follow a ""functional first"" programming paradigm.

Strong candidates will have

- 7+ years of experience working as a professional software developer. Comfort with working on a SaaS system at scale. 
- Proficiency in Scala, Java, Javascript, Haskell, or related languages
- Knowledge of databases and experience with writing code that interfaces with the database layer. SQL/RDBMS experience required; experience with various NoSQL databases desired.
- Experience writing well designed and testable code, and writing effective unit and integration tests.
- Experience working in a mature production environment (Deployment, CI, Monitoring/Alerting)
- Passion for working with a small team of world-class developers, solving challenging problems.
- A desire to work in a collaborative environment focusing on continuous learning; participating in mentoring, tech talks, code review, and some pair programming.

If you'd like to hear more please email gbisesi@teikametrics.com",1530554596.0
colindean,"# Arcadia.io | Software Engineer | Pittsburgh, PA, USA | ONSITE/REMOTE | Full time

Arcadia.io is a privately-owned healthcare analytics company founded in 2002 and based in the Boston, Massachusetts area with offices in Burlington, Massachusetts; Rockford, Illinois; Seattle, Washington; and Pittsburgh, Pennsylvania with dozens of remote employees nationwide. 

Phrased succinctly, we use patient records to help doctors tell patients how they can be healthier and how they can get better when they're sick by enabling those doctors to see a patient's record with every doctor they see.

We have a variety of positions available:

* Senior Software Engineer
* Software Engineer, Systems Generalist
* Software Engineer, Backend Web Development
* Software Engineer - Data Warehouse
* Software Engineer in Data Pipeline Integration

The company has a handful of web services written in Scala and a ton of Spark code also in Scala. I'm the manager on the team with the Scala web services.

There are also some other positions open on our Ruby on Rails teams, including a manager position.

Our [careers link](https://careers-arcadia-io.icims.com/jobs/search?ss=1&searchLocation=12781-12822-Pittsburgh) is the best place to read more and apply. Feel free to ask questions via PM, too.",1530555840.0
Onedayillsailaway,"**Tray.io | SCALA DEVELOPER | LONDON UK | ONSITE | Full Time**

Tray.io is ushering in the era of the automated organisation

We believe that any organisation can and should automate. With Tray, citizen automators throughout organisations can easily automate complex processes through a powerful, flexible platform, and can connect their entire cloud stack thanks to APIs. Today businesses like IBM, GitHub, Forbes, Lyft, and Digital Ocean rely on Tray to connect and automate data flow between the tools they use every day. With Tray's visual workflow builder our customers create automations to drive their business processes without writing a single line of code. Our challenge is to build a cutting-edge product that is powerful and complete while also being beautiful and easy to use.

You'll contribute directly to this mission with a team that fully supports you to do your best work. You'll join humble but fiercely ambitious people like yourself, who also take great pride in what they do, working in a culture built on friendship, transparency, and above all, looking out for one another. You'll have endless opportunities to learn and grow professionally in a fun, fast-paced, and open environment. Plus, you'll get to make your mark at a rapidly-growing company positioned to completely reinvent a multibillion-dollar industry.

**Your mission**
Tray's backend infrastructure processes millions of requests per day and is a mission-critical component of our customers' businesses. As a Software Engineer working in the Platform team at Tray, you’ll be responsible for designing, building and running the software and systems which underpin our large-scale, real-time, distributed infrastructure. We expect you to build flexible services and tooling which allows Tray to rapidly scale whilst delivering a seamless experience to our customers.

The Platform team is responsible for providing a production environment where connectors integrations and automations can run reliably and at scale. This involves dealing with compute providers, networking, packaging, storage, monitoring, logging, and security. This necessitates building the services and APIs that expose these services to internal and external users of our infrastructure.


**Responsibilities:**

* Leading the development of flexible services & tooling that allows people to store and run integrations at scale
* Building internal and external facing tooling and API’s that allow our users to fluidly build on our platform
* Working collaboratively with Product managers to deliver key security, scalability and reliability features
* Growing a motivated, high-performing team
* Automate the testing and deployment of your work
* Envision new features that help our users connect services faster and easier



**REQUIREMENTS**
Minimum qualifications:
* BS degree in Computer Science or related technical field, or equivalent practical experience.
* Solid experience in a stand-out production environment
* Expert knowledge of at least two programming languages and paradigms (e.g. Scala, Java, Kotlin, Groovy, Go)
* An irrational passion for building distributed systems
* The desire to learn, improve and work together
* Good knowledge of internet networking and performance
* Passionate about troubleshooting, debugging, and automation
* Experience building web services and APIs


**Preferred qualifications:**
* Experience launching cloud-based services
* Experience with real-time, distributed systems
* Experience with writing multi-threaded software
* Passion for performance and tuning
* Experience in capacity planning and load testing
* Experience with clustering technologies (e.g. Kubernetes, CoreOS, Mesos)
* Previous IaaS or PaaS experience
* Tech Stack



**Our current tech stack:**

* Scala, Go, JavaScript, TypeScript
* PostgreSQL, Redis, ElasticSearch, Cassandra, AWS SQS, AWS Kinesis
* Docker, Terraform, AWS Lambda, Serverless Framework
* Jenkins, Grafana, Prometheus
* AWS & Linux



**BENEFITS**
Working at Tray offers many perks, but most importantly we are a talented team with a passion for the product we are building. Benefits include:


* Competitive salary
* Stock options
* Unrestricted holiday policy & work from home days
* Flexible working hours
* A fun and supportive working environment
* Top of the range equipment budget
* Drinks fridge & stocked kitchen
* Social events (team breakfasts/lunches, evenings out & trips)
* Employer contributory pension scheme
* Cycle to work scheme
* Private healthcare
* 50% off Virgin Active gym membership


To apply contact luciano@tray.io",1530626873.0
AesaKamar,"## **SeamlessDocs** | Software Engineer (Backend) | New York City (SoHo) |  *$120k-$165k* | Onsite


### We fundamentally believe that government is beautiful.
Too often we hear the opposite angle, but we really do believe in the power of a well-run, well-designed, well-meaning government. One that exists in the physical world, but embraces the digital one too. That, to us, is a truly beautiful thing. 


We are committed to debunking the myth that interacting with government has to be an experience citizens dread. We are working to spread our vision that government can, and should be beautiful. As it deserves to be.

### What it's like working with the Engineering team
- **SeamlessDocs <3 FP.** We make liberal but pragmatic use of many FP concepts and are no strangers to pushing on the type-system. We'd be happy to talk your ear off about math and would be very interested to hear what ideas you have to bring to the table. 
- **Learning is front-and-center.** We participate in weekly code golf exercises to play with new techniques and sharpen our skills. We engage in weekly company wide learning sessions where someone gets to share an idea or learning they think is worth sharing. 
- **Well fed and hydrated (and optionally caffeinated).** We've got some of the best food spots probably in the whole world right in our back yard. Catered lunches are supplied daily. Fridges and pantries are stocked. 
- **Flexibility to work how you need.** Unlimited vacation and flexible scheduling. Core hours are between 11:30am and 4:30pm. 

### Our Tech
- Scala with a lot of FP niceness
- Kubernetes for manageable deployments and infrastructure
- Flow-typed React on the front-end
- Some* (actually not that bad) legacy PHP 

###Finding out more
- **Apply here:** https://grnh.se/df7b17b32
- **Contact:** `talent@seamlessdocs.com`  
- **About:** https://www.seamlessdocs.com/about ",1531316589.0
georginaengima,"Looking for four contractors to fill four Java/Scala Developer roles in either Glasgow, Edinburgh, Herfordshire or Belfast: [http://www.enigmapeople.com/job-details/226445000005772152/](http://www.enigmapeople.com/job-details/226445000005772152/) ",1533125720.0
,"`val` establishes an immutable binding from a name to a value, but the value may itself have internal mutable state (as with `StringBuilder`). So the *reference* is constant.",1530502512.0
shoopler1,finally a comprehensive resource on scala implicits! I’ve been wanting to get a better handle on these.,1530491588.0
MontyAnup,"Thanks for the these videos, they are really helping me revisit some of my basics",1530454526.0
grillorafael,Looks cool but a config library that brings scalaz does sound a bit overkill,1530368319.0
Scf37,"Looks cool indeed. 

What I think is cool:

- printing config values as a table to showcase overrides

Field for improvement:

- detect mistyped configuration parameters even for environment variables. Idea is to fail on unknown parameter starting with known prefix `db.` 

- help. Any good software must be self-documenting, at least print help on parameters

- typesafe config is the best config library I know. Can you generalize your implementation so it can be used with typesafe config?

- custom operators generally suck. They confuse IDE, they provide no hint of their meaning in code or autocomplete list. Consider 
having alternative way to define config using method names

- is it possible to get rid of `import japgolly.clearconfig._` ? IDE autocomplete can not help with this import, user just must know about it.

- converting tuples to case classes via shapeless is not a purpose of config library. Is it possible to isolate that?

- masking keys and passwords in report",1530428144.0
naftoligug,I agree that such reporting is a useful feature but can't it just be added to an existing library?,1530422476.0
scalator2,"I would just do this in SparkSQL rather than DataFrames API: 

SELECT NVL( (df.val2 - df.val1), df.val2) AS Diff FROM df

This works so long as val2 is never null. Your StructType should enforce that. Replace the 2nd parameter with "" NVL(df.val2, 0)"" if val2 is nullable as well",1530340292.0
Alfiercio,"Use when(<all non null>, value 1-value2).when(<first null>, value-2).otherwise(<value for rest of cases>)",1530366804.0
japgolly,Really sad that these aren't on YouTube. I would like to add a bunch to my Watch Later list.,1530324252.0
srparish,Is there no way to adjust the playback speed on this slideslive site?,1530298946.0
jatcwang,"Thanks for much for the subreddit! Really appreciate the effort you've spent on posting all the Scala conference videos there.
",1530337518.0
endzeit_,"Are there any talks which are especially recommendable/""must watch""?",1530305738.0
havok2191,"Awesome man, thanks for this! :D",1530377698.0
brophd,"Excellent post with a strong focus on solving the actual problem in an as precise manner as possible. Too often programmers just hammer around at the screws they see, wondering why they bent in such strange manners ;). ",1530597575.0
buth3r,"isnt it overly complicated? like you can do it, but why even bother?",1530303570.0
GratefulTony,nice,1530298511.0
Storini,"ISTR reading an article with a very similar title a year or so ago, but couldn't find it when searching for it a few months ago. However this article is an excellent and comprehensive toolkit for addressing Java API adaptation.",1530306053.0
,val me: Witness,1530285241.0
tsec-jmc,"Being frank: I find this is so insanely overcomplicated.

\- [Type-safe claims](https://github.com/jmcardon/tsec/blob/master/jwt-core/src/main/scala/tsec/jwt/JWTClaims.scala#L37). You don't need to differentiate \`Expires\` from \`NotBefore\` at the type level.... There's almost no situation where you'll use those directly for some reason, other than checking stuff like ""is it expired"". If you \_did\_ need to do this, you could do it at translation time, and not enforce this tax onto every single user.

\- You have covariance in your JWTClaims. Why? It just leads to \`JWTClaims\[Any\]\` inference down the line.

\- ~~There are no such thing as ""private claims"" in the standard~~ I was wrong. I thought they were called ""custom claims""- I can sincerely tell you, that from implementing JWS tokens, that the implementation of signed JWTs (or JWS) with compact encoding (which is the dot encoding) is far simpler than your entire labelledGeneric and it won't make the compiler significantly slower.

There's a lot of instances where type safety is something you want and love, and there exists overabstracting for the sake of ""wow I can express this with the compiler"". I find this to be the latter.",1530311488.0
ysihaoy,Sound nice but just wondering how many people will actually do it and use it to just solve a problem?,1530533071.0
somethingconcon,"""As a functional backend developer I’ve always been surprised by how **DevOps** stayed away of all the **functional programming paradigm"".**

I think there is some fear, some skepticism. Total misunderstanding.  

FP ideas are constructed from the top down as categories and the bottom up as functions.  In the middle is just more functions.  That's scary to some people because you're not talking about an object at a specific address you're talking about a hypothetical.  Everything from the first effect becomes speculation. probabilistic.  

Concepts become more abstract because you're describing execution instead of performing it.  The most frustrating part of this situation for me is that using pipe in terminal is the only evidence anyone should ever need.  The problem is we're not good at explaining things to each others across domains.  FP could do this but that would mean FP would have to be the foundation of knowledge for tech and not an ad-hoc thing that only the mathy people messed around with.

I will say that I think the examples people use are so foolishly trivial that it's hard to put the big picture FP stuff together and that kinda sucks for new learners.  ",1530211472.0
JoanG38,"Feel free to ask any questions here.

Thanks",1530204309.0
sutongorin,"> Alright, let’s have a look at the UI and see how **beautiful** it is

Heh.

I mean I really like the idea and everything. Especially defining the UI in code and not having to worry about how it is rendered. I will definitely give it a try. But beautiful is not the word I would choose [here](https://i.imgur.com/Re5n9l0.png).",1530219962.0
littlenag,This is one of the cooler things I've run across!,1530223488.0
CarelessEstimate,"Thanks for sharing. Wanted to give you a heads up that I got a 404 on this link:

>The full code that extracts the 50-day subsequences, performs vectorization, and builds and trains the neural network is available [in a Zeppelin notebook using Scala](https://github.com/deeplearning4j/deeplearning4j/blob/master/dl4j-).",1530583393.0
PrimozDelux,"[and Scala as the functional Java.](https://i.imgur.com/Qg4HfwR.jpg)

(otherwise good article)",1530264826.0
xwinus,"Hello folks, this is my first first time I used Scala annotation macros for some real world usage, and inspired by tons of forgotten TODOs like *//FIXME later* in our codebase, I decided to create this small library. Any ideas, improvements and criticism welcomed :-) Maybe someone will find this useful.",1530130241.0
prayagupd,This sounds great. People will scream don't have TODOs blah blah. I understand that as I myself like to keep code clean but sometimes I find it useful to TODO/FIXME (specially with small projects/ personal projects) than to spend an hour to create Jira ticket.,1530139058.0
sjrd,    $ git grep TODO,1530141272.0
AlienBirdie,"Maybe include a version parameter also. Like, @reminder(“v3.0”) which checks if the current project version is below v3.0 and throws a compiler error otherwise. ",1530139005.0
DrDub_yvr,A tool that transforms these annotations into tickets during code reviews would be golden...,1530139531.0
stevebakh,"I don't mean to be a stick in the mud, but the use of to-do comments _and_ this new annotation are bad practices, at least in the professional environment. 

If one finds themselves writing a to-do in their code, one should stop. If it's a requirement, it should already be captured in a ticket or whichever tracking tool is getting used. If it's just a nice to have, or a new idea, but isn't yet captured anywhere, then capture it! Raise a ticket, get it prioritised, do the work.

The only exception should be using these comments as a reminder during development of a feature, like a bookmark to remind you where to come back to. These things should never be merged into trunk/master/release branches. I've seen far too many code bases littered with old to-do comments that developers forgot about.",1530134557.0
,Neat idea. Does it work with an arbitrary line of code?,1530322330.0
thesuperching,"Look forward in the future It includes a dashboard for TODOs after compilation, so as to give information about order by priority or deadline or group by issue types or packages.",1530429020.0
Scf37,"Should be warning, not error. Otherwise it will hurt build reproducibility.

If your colleagues ignore compilation warnings, this annotation won't help them as well.",1530429383.0
m50d,"> What should be considered for performance if we are using scala(playframework) for a REST backend.

99.9% of the time, nothing. Or rather, the only important consideration for performance is maintainability: if your code is maintainable then you will be able to optimise performance in the future, and that will give a much better return than trying to optimise performance now.

Write simple, direct, clear code. Get it working right, get it tested. Then benchmark. 99.9% of the time you'll find performance is more than adequate. In the rare case where it isn't, profile and then you can optimise the specific hotspot.",1530101029.0
raghar,"Well, most of the time such micro-optimizations don't matter. Hardly ever are you sorting 10M objects on backend.

I'd say most of the time you are only dealing with small number of objects - so all micro-optimizations with imperative stuff doesn't matter at all. So you write things in a declarative way, chop pieces of behavior into small functions and if there is something slow you need to just focus on that one part.

When you are doing REST backend I would risk the statement that most of your slowness can come from the database (and other external IOs) and how you query it. Any significant speed up will be about either improving schema, or about what you do with queries results: stream instead of fetching all data upfront, cache results, avoid recalulations and n+1s...

To be blunt you'll find that all you do is just put a layer of glue code combining outputs from external IO which does the heavy lifting for you. (Performance-wise, the domains knowledge is still mainly in your code). As such most of the time it doesn't matter whether you use imperative stuff of declarative fr handling 100-item-arrays. (Besides, the libraries usually use imperative code deep inside to make it fast while having declarative API).

Focus on writing the most readable code, and later on just take a closer parts if they will *really* slow anything down.",1530092277.0
2bdb2,"In regards to the article you mentioned - Quicksort *by definition* requires in-place sorting. There is no such thing as an immutable Quicksort. It cannot be implemented that way.

The ""Functional"" version is useful for teaching functional programming by giving an example of something similar to quicksort, but it's not actually quicksort and is otherwise useless for real world purposes. 

If I wanted to use quick-sort in a pure functional language, I'd have a function that internally copies and then sorts in-place. This is still a pure function, and you can use an ST monad to enforce referential transparency if you wish.

tl;dr Functional implementations of Quicksort perform identically to imperative implementations of quicksort, since Quicksort is by definition an imperative algorithm.",1530111682.0
amazedballer,"/u/raghar and /u/m50d are absolutely correct. Your database is going to be the bottleneck.  

For an asynchronous web framework like Play, there's basically two things to consider:

* Are you using a custom execution context for JPA, so you're not doing database calls with the same execution context that Play uses for rendering
* Is your CPU utilization at around 70%, at which point you're going to get lag spikes. (at this point you need to either optimize your CPU bound tasks, or get another server and load balance)

If you're not blocking on database access, and your load is low, then you're fine.  

Here's a Play REST API example in Java:

https://github.com/playframework/play-java-rest-api-example

Note the JPA repository uses a `PostExecutionContext` so that there's a different thread pool specifically for database access:

https://github.com/playframework/play-java-rest-api-example/blob/2.6.x/app/v1/post/JPAPostRepository.java

and that is sized appropriately for the database connection pool:

https://github.com/playframework/play-java-rest-api-example/blob/2.6.x/conf/application.conf#L10

See ""[the formula](https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing)"" for how you size your database thread pool appropriately.
",1530114043.0
larsga,"I would seriously look at [Finatra](https://twitter.github.io/finatra/). We use it for a very high-performance REST endpoint that receives about 1 billion requests/day. Works very well, but you have to be aware that you can't spend a long time processing the requests without using async. Because it achieves high performance by being [event-driven](http://berb.github.io/diploma-thesis/original/042_serverarch.html) it only has a few worker threads.

We've also used Play in Scala, and that was fine for a web application, but IMHO it doesn't give you much for a REST service. And in the end we had to abandon that application because the code Play generated kept causing the scala compiler to hang. We never managed to find out why, and in the end rewrote in Finatra.",1530092664.0
Philluminati,"Scala is slower in the general case AND uses lots more memory for that specific use-case.

If you can distribute your code across several cores or servers by using a distributed techniques or algorithms your solution could be quicker. In place sort with a couple of thousand rows may not qualify but for heavier workloads, distributed is the only way to go. In that Scenario, Scala code is easier to write correctly and less likely to go wrong compared to languages that rely on shared memory locking or exception handling.

Take your code for example.. what happens if you want to add a new record? You have to copy the array to a larger one.. and means any references to the old array may cause program exceptions and crashes.

Perhaps try writing one that uses the merge sort algorithm and compare..",1530118063.0
Milyardo,"You might be intererested in the [talks](https://www.youtube.com/watch?v=j7BArZJxL9M) of Dr. Eugenia Cheng. I don't know if she covers application of category theory to music specifically (I know someone has, I just can't recall where I've seen that presentation before).",1530117313.0
Storini,"When I hear or play a Bach fugue, it's obvious it's a proof: subject = proposition, episode = lemma, counter-subject = contrapositive, modulation = typeclass invocation, stretto = proof assembly, cadence = QED.",1530132937.0
sullija722,Dr. Martin J.M. Codrington's YouTube videos may be of interest. It has been a while since I watched them but I believe he uses music for his examples. Category Theory: The Beginner’s Introduction (Lesson 1 Video 1) https://www.youtube.com/watch?v=P6DvIfTJhx8,1530176764.0
szienze,"I'd say that your ideas are more in the domain of mathematics than programming. Euler has done some work on music and mathematics, might be of interest to you: http://eulerarchive.maa.org/pages/E033.html.",1530201072.0
beezeee,"Recently stumbled across this https://github.com/DimaSamoz/mezzo

I don't know if it's specifically what you were thinking, but it seems very relevant and as a former music student and current FP dev, it's on my shorter list of things to dig into.",1530712713.0
Hugo_ijslijk,"Are there any logging frameworks that make testing logged statements easy? I am using grizzled-slf4j and logback-classic, but mixing in a trait makes mocking impossible, and there are no other easy ways to test logging with it.

And yes, I know not all logging statements *should* be tested, but in some cases it can be important",1530046356.0
sublimesinister,"I would really like a logging library that could:

* Log key-value information `info(""message"", ""key"" -> value)`
* Support context passing through MDC `withCtx(""key"" -> value) { ??? }`, this should work with Twitter and Scala futures
* Emit JSON with key-values included
* I don't need any log rotation or anything, just stdout is sufficient, since we use Docker logging collected with Filebeats
* As few dependencies as possible

So far I have not been able to find a library that would fulfill all of these.",1530120057.0
poluserthrowaway,"Good work, I have been looking for a replacement to the awful. `.*4j` family. I have one question though if you could answer- how did you conclude that logback source position is slow? What happens behind the scenes there? ",1530270035.0
strartem,slf4j + log4j2 does the job perfectly. Didn't get from the article why should I try this lib. ,1530038877.0
amazedballer,"Development mode implies you're running in SBT and recompiling the code on every page load.  This typically doesn't happen in Docker, because Docker's philosophy is to have static images and ephemeral containers.  

If you want to run Play in development mode from code, then running it embedded with and setting the application's mode to Dev explicitly with `GuiceApplicationBuilder` is the surest way to do it.  But it's not designed to be run like that, and you won't get the reloading behaviour, if that's what you're after.

The actual code starts here, and you can see it's working with the reloader to start a new server every time:

https://github.com/playframework/playframework/blob/master/framework/src/sbt-plugin/src/main/scala/play/sbt/run/PlayRun.scala#L80",1530027890.0
teknocide,"`CMD sbt run` should do it, provided your working directory is the project root and you have installed sbt in a preceding docker image step.",1530013094.0
Daxten,"what is bin/run? As far as I know you have to use sbt if you want to use play in dev mode (and for building)

is this play 1?",1530024851.0
ysihaoy,"Hi, please take a look of my Play docker image, https://hub.docker.com/r/ysihaoy/scala-play/",1530144845.0
ingvij,"So.. I've been pretty much on the full spectrum.. I've used mostly clojure on prod and scala as hobby, both scala and clojure on prod and now scala on prod and clojure as hobby.

I believe both languages have good (different) strengths and it's totally worth learning both. You'll know where to use them.

I was thinking on moving to clojure over scala, but I can't get any more excited about the upcoming scala 3, so I guess I'll keep swinging between both for some time.

I think clojure is better for rapidly having things up and running. It is less bureaucratic in its build system and faster to write (once you master paredit/vim-sexp/parinfer). On the other hand, scala gives you additional guarantees due to type safety. This can be really helpful when you actually need to distinguish between types in the detail. Interacting with external parties, specially on non-standard protocols is much better with scala in this sense.

Hope I helped you, but feel free to ask anything else.

Cheers ",1529997460.0
alexelcu,"I haven't worked much with Clojure, but enough that I learned the language and got a taste of the ecosystem, plus given my experience with Scala, along with other dynamic programming languages, I feel confident in comparing them.

Clojure is a dynamic language and while it is much, much saner than other dynamic languages that I worked with due to its FP tendencies, namely Ruby, Python and JavaScript, in my experience it's not helping enough in reducing accidental complexity and bugs. While using Clojure I did not feel like I learned anything new over what I learned already in Scala's ecosystem and my productivity did not improve.

>  I like Scala compared to Java, but still after 3 years, there are so much concept I don't know especially the Functional concepts from category theory, still no cats or Scalaz on any of my projects. 

That's a pity, you should use libraries like Cats or Scalaz in your projects. For me learning functional programming has been the single, biggest boost for productivity I've had since the start of my career and Scala is in fact much better at it than Clojure, in spite of Clojure's marketing 😉

You don't need to know category theory btw. I bet that's nice, but I still don't know much category theory, whereas I know the ins and outs of the Cats library, among others in the Typelevel ecosystem. That you have to know category theory is a myth. But you do have to get familiar with abstractions popularized by Haskell's ecosystem and implemented in libraries like Cats — because they are great and you're missing in on a lot of great tools that you can use in your day to day job.

So if you're getting bored, learn actual FP instead. The [red book](https://www.manning.com/books/functional-programming-in-scala) is pretty good and I've heard good things about [Scala with Cats](https://underscore.io/books/scala-with-cats/). If you really want to learn another language, then I recommend [Haskell Programming](http://haskellbook.com/) as the best book I could find, as the concepts you'll learn will definitely help in Scala, Haskell being currently the lingua franca of FP — and here I'd like to say Haskell helps with Clojure, but no, not really.",1530017068.0
dustingetz,"I was a huge Scala advocate in 2011-2013 but eventually switched to Clojure so here is some pro-Clojure koolaide. The big idea is Clojure's culture of simplicity means in 20 years, mom and dad may be able to program.

Karl and my project http://www.hyperfiddle.net originated many years ago as a Scala/Play prototype. I remember spending like a week trying to get the JSON payloads to work the way I needed. (Maybe a problem with Play being a shitshow back in 2013, but I don't care. Clojure is a shitshow too and yet still gets that stuff done in an afternoon.)

The typed FP culture causes some weird rabbit holes of type tetrising for the dopamine hits instead of taking a step back, and searching the big picture for a simpler way. Scala has these SQL query type checkers, so you can compose up these monsterous queries and keep them straight in our heads with types. Clojure solves the same problem with a new kind of database that uses Clojure as the stored procedure language [for example a generic clojure graph traversal library running inside Datomic](http://www.hyperfiddle.net/:cookbook.recipe!datomic-query-loom/), so we don't need mosterous queries but rather can just write regular code on regular in memory graph/maps/sets, except they are durable/ACID and lazy— only the working set is actually in memory. (If I had some monster legacy database, I'd definitely choose Scala)

Setting aside Scala's complexity, Clojure has some other unique properties that may or may not matter to most projects. clojure.core is very simple so there are many efforts to bring it to more and more platforms. Many people don't care about platform reach but I care a lot: Hyperfiddle is a monadic interpreter that runs on browser/node/jvm/Datomic stored procedures, same portable codebase in all these places, which means we can automatically predict and coordinate I/O in ways a client/server architecture cannot. Also we expose eval to userland and store lots of usercode in the database - instead of files on the filesystem and in git, a very forward thinking model. We actually believe that 20 year old ""wordpress freelancer"" type kids will be able to make web applications without much programming knowledge. Obviously, they will not be building fault tolerant video streaming systems with backpressure or whatever. Maybe Typed FP may end up being the path forward for that.",1530014813.0
DevIceMan,"\>   there are so much concept I don't know especially the Functional concepts from category theory, still no cats or Scalaz on any of my projects.

I'm in a similar position, which is why I created this thread:

[https://www.reddit.com/r/scala/comments/8rsm89/preparing\_for\_scalafp\_engineer\_interviews\_and/](https://www.reddit.com/r/scala/comments/8rsm89/preparing_for_scalafp_engineer_interviews_and/)

Regardless of whether you go with Scala, Clojure, Haskell, or some other language, you will probably need to read up and study these concepts on your own if you aren't learning those on the job.  Personally, I'd recommend picking one language, and focus on that one until you feel more confident about your FP skillset.    Splitting your efforts across two would probably only slow you down.",1529997477.0
peeeq,"I usually use Scala or Java (Java when I work with people who don't know/like Scala), but a colleague and mine built a bigger webapp in Clojure just to give it a try.

It turned out to be a pain to develop in Clojure compared to Scala:

- 95% of the errors we got would have been prevented by a type system. Sure, these errors are easy to fix but it always takes some time to discover them and figure out what the real input format of a function or the invariant of a datatype is.
- Surprisingly the time between changing code and seeing the changes in the browser is higher than Scala/Play or Java/Spring, which usually is one of the few advantages of dynamically typed languages. (there are some solutions for hot code reloading but in combination with macros they often did not work as advertised)
- For me coding is much slower, since I always have to lookup the documentation of functions before calling them. In Scala/Java I directly see it in my IDE.
- Refactoring Clojure without breaking stuff is very complicated

The result was that we ditched Clojure and reimplemented the project in Java. The project now has twice the lines of code, but also less bugs and more functionality.

The only plus side I saw for Clojure was the design of the collections in the standard library. For every kind of data manipulation that we wanted to do there was some function that already did most of it. Transforming data kind of feels like working with SQL queries but with a more regular syntax. I think that is kind of difficult to replicate in Scala since every intermediate result needs a type.

",1530039765.0
mdedetrich,"I mainly used Scala in production, but did a lot of coding in my spare time with Clojure, my immediate take aways (which are mainly due to the dynamic vs static axis)

* Clojure is much simpler, and they really try to reinforce this. You don't have to deal with complex type hierarchies, weird compile errors (by weird I mean that getting some really obfuscated error about types lining up), monad transformers, etc etc. For this reason its quite easy to learn for reasons why Python is easy to learn
* Tooling seems to be better (although this is generally a side effect of being a dynamic language). In Clojure you don't have to deal with slow build tools (leiningen is much nicer than SBT), you also don't have to deal with IDE's being slow.
* A Scala project is much easier to maintain. Although the cognitive overhead of having to work with types/typeclasses (and other things) are harder, this has the benefit that maintaining Scala projects are ridiculously easy. Refactoring is easy (and often total), making additions are also easy. In 80-90% of cases you can often rely on just the compiler, and then just before you commit you can run your integration tests to see if you have broken anything. In clojure you spend a lot more time having to verify properties of your program (although this is now remedied with things like `clojure.spec`)
* There is less divergence in what is considered idiomatic Clojure which I think is a net benefit. Typical clojure style roughly corresponds to ML/OCaml with LISP syntax/expressions + hygienic macros. There aren't really endless debates about the merits of pure FP vs better than Java style.
* Both languages are really good when it comes to DSL's, in clojure its easier to create DSL's but in Scala you can verify them much more at compile time
* Clojure tends to be slower unless you really try to optimize. Although its true that early optimization is an evil, with idiomatic Scala code you will generally have good performance
* Both have very good support for concurrency

The biggest takeway/differences is that Scala is more complex but also more correct in a mathematical sense. It takes longer to learn Scala but if you are working with systems where correctness is a very high priority (banking/telecoms/defence, etc etc) this matters. On the other hand since Clojure is much simpler (and also has a better definition of whats considered idiomatic clojure), clojure may make more sense for projects that have to rapidly iterate and change.

Due to also the fundamental differences in the languages, there are some things which Scala will be superior in Clojure. Since Scala heavily relies on erasure, its much easier for Scala to target platforms like Android and Native, where as Clojure for Android is pretty much a no go because the produced jar's are enormous (and tools like proguard/techniques like DCE are not as effective because its really hard to tell which methods are called in LISP like languages)",1530022100.0
zogulus,You should ask the same question on /r/clojure for balance. ,1530037714.0
arstylianos,"\- Used both in production. Came from mostly Java/Javascript in university, to my first job in Scala and now working with Clojure.

\- Definitely worth it to learn both (at least for me). Both are great languages with different approaches.

\- I have no definite plans to stick to one. I am happy working in any of them. 

  
I agree with a lot of what was said here, but I think (from what I read) that no one mentioned what for me is one of the biggest draws of Clojure: the REPL. Coming from a background of write, compile, test and repeat, the feedback you get with the REPL, and how interactive it is, is eye opening.  


A summary of what I see as their biggest strenghts:  


\- Clojure: tends to lead us to simpler code; developing with the REPL is amazing; it's usually faster to develop things; the development of the language itself seems more focused; ClojureScript and awesome libraries for frontend development.  


\- Scala: Awesome type system; less potential to break things; easier refactoring; Dotty looks like it's going to be a big improvement.",1530037799.0
,"I developed a highish-frequency trading bot that I eventually wrote both in Clojure and Scala. I wrote the initial version in Python, which was basically a proof-of-concept, and then, after a detour in Erlang, landed on Clojure as my language of choice. Trying to build something that robust (finance is a domain where failure is expensive, to say the least) in Clojure was, in a word, nightmarish. The amount of NullPointerExceptions was hellish. On the other hand, the libraries I used were mature and the concurrency features were powerful yet simple.

Regardless, Scala plus Akka made Clojure look like a toy. Honestly, there is no replacement for Scala's blend of functional and object oriented goodness. One of the things that I really appreciated in Scala is the ability to effectively and efficiently accomplish major refactors to code. In Clojure I would rather die than refactor, but Scala makes it simple to clarify assumptions and dependencies in a safe and succinct way, so that, when the times comes, all a refactor takes is a new type signature and everything else falls into place after that. Scala is magical.",1530081846.0
addamsson,"I thought that the two groups did not have an intersection. I mean I love Clojure (and LISP in general) and after using any LISP on a real project programming in any other language feels like wearing a straitjacket. They are also at the far ends on a baroqueness scale: Scala is an abomination, LISP in general has virtually no syntax.",1531415972.0
acjohnson55,"Posted, since it mentions a shift from Scala to Elixir.

But one of the things I'm interested in is whether it's possible to help manufacture the same warm & fuzzy feeling about Scala as people seem to be getting with Elixir and Kotlin. I guess Scala's a bit unique in that it arguably overlaps both of those languages, and then some. Maybe that generality makes it more difficult for people to feel the same happiness ramping up.

I do think Dotty is a big step in the right direction as it makes the language less quirky, IMO. Collections will be simpler. Type design will be simpler (e.g. \`trait\` params and \`enum\`). SBT is already simpler than a couple years ago.",1529946888.0
joshlemer,"For what it's worth, I heard a rumour that this was actually just one guy, and that they're now rewriting those services in Scala :-P",1529952628.0
yawaramin,"Elixir is great, I want to see it get traction. That said, it's interesting to compare these kinds of articles. A few years ago, people were describing this on-boarding experience about Scala. Here's an example from a Toronto-based company that switched from C#: http://seanglover.com/blog/2013/10/technology-change-net-to-scala/",1530070657.0
fromscalatohaskell,"What will happen to all scala tools once dotty is out? Scalameta, scalafix... all progress on perf optim on scalac... all new compiler flags, linters... is it maintained 1:1 with Dotty?",1529929685.0
tombraideratp,"# [spark submit finished without completing thread based task within app](https://stackoverflow.com/questions/51076578/spark-submit-finished-without-completing-thread-based-task-within-app)

I am doing some doing some separate thread based work with spark submit app. In client mode application waits till scala future completed but in cluster mode application finished without completing scala future task.

**I tried some spark conf**

    --conf spark.yarn.submit.waitAppCompletion=true

**scala future to do some separate copy task**

    val hdfsCopyProc = Process(Seq(""hadoop"" ,""distcp"" ,""-overwrite"",  s""$filenameWithLocation"" , s""$destinationLocation"" )) val hdfsCopyFut: Future[Process] = Future {       hdfsCopyProc.run     } val aggFut = for{        hdfsCopyRes <- hdfsCopyFut     } yield (hdfsCopyRes)      aggFut onComplete{ case tr => println(tr) }

but in client mode it is fine , only issue is in cluster mode

[https://stackoverflow.com/questions/51076578/spark-submit-finished-without-completing-thread-based-task-within-app](https://stackoverflow.com/questions/51076578/spark-submit-finished-without-completing-thread-based-task-within-app)",1530169667.0
galkowskit,"So - as I have heard in the previous ""Ask here"" Akka is not a good thing. If so - how would you go about creating a browser based game? I wish to create multiple microservices that would take on different tasks: player characters, world events, simulating economy, etc. everything pretty simple, but that would give me a good idea on how to structure larger systems.

I was thinking about:

1. Scala (duh).
2. Lagom (it has Akka ""inside"").
3. MongoDB (for event sourcing?).

[https://github.com/piyushknoldus/lagom-scala-wordcount.g8](https://github.com/piyushknoldus/lagom-scala-wordcount.g8) maybe this is a good example (seems like Cassandra and Kafka)?",1530368806.0
gazpacho_arabe,"Hi all, just trying a simple scala project for the first time and I've got a bit confused with versions and how scala works. On my system I installed scala (from apt repos) but also used the sbt. I had real issues where on system my version was 2.11.6 and on sbt was 2.12.6. This introduced some weird issues- removing scala from my system however made everything ok. 

Point being, is the correct way to run scala through the sbt? Coming from a Java/python background it doesn't feel quite right not having a monolith installed on my PC somewhere... ",1530445874.0
0one0one,"I am looking at utilizing the incremental compilation aspect of sbt.   
I have done a bit of research and it would seem that the most apt tool for the job is Zinc, the documentation is

not as comprehensive as I may like though. Does anyone have any experience with using zinc that they would be willing to share ? ",1530776807.0
GimmickNG,"How are functions in Scala ""first-class""? I get that they can be passed around as arguments to other functions and even returned by a function, but how different is this from Java - which most assuredly does not seem like a language with first-class functions?

That is, if every function in Scala is really a FunctionN trait object (0...22 arguments) then what's the difference between doing this, in Scala:

    def a(a: (Int, Int) => Int):Int = ???
    a((x:Int, y:Int) => x + y)

and this, in Java:

    interface IFunc2<T> {
        T apply(a: T, b: T);
    }
    int a(func:IFunc2) {
        throw new NotImplementedException();
    }
    a(new IFunc2<Integer> {
        Integer apply(a:Integer, b:Integer) {
            return a + b;
        }
    })

The only difference seems to be the type inference and the verbosity (my Java's a bit rusty so I'm not really sure if I'm missing something else out, though.)

TL;DR if every scala function is an object with `apply`, what makes it a first class function, when there's an almost 1:1 correspondence with Java anonymous classes with a single apply() method, and Java doesn't support first class functions? Is the difference purely syntactic sugar?",1530715083.0
teknocide,"Kojo is one of those projects that's been around since I started out with Scala and I'm really happy to see it's still alive and kicking.

I think the project is selling itself short/needs more recognition for what it provides. It's a really cool platform!",1529941390.0
merkucjo,"Scala, better than sudoku and you are getting paid playing that ",1529923282.0
GoAwayStupidAI,"Cool!

One note tho: those screenshots are *tiny*.",1529937503.0
Bendickmonkeybum,"FYI, the second link under ""getting started"" on the github readme is returning 404.",1529906834.0
whale_song,"wow, VERY in depth. Thanks for turning me onto this channel, Ill check out his other videos as well.",1529856512.0
a_bee_sees,"In addition to the `StreamApp` suggestion by /u/cheriot to address your `while` issue, your route matches a distinct path /hello/{name}, but you're curl doesn't request it. Try `curl http://localhost:8080/hello/world`.",1529781384.0
cheriot,"Extend the http4s StreamApp and override stream. The page you link to has an example at the bottom.

    object Main extends StreamApp[IO] {
    override def stream(args: List[String], requestShutdown: IO[Unit]): Stream[IO, ExitCode] = ???
    }
",1529780080.0
Philluminati,http://localhost:8080/hello/Phillip is the kind of url it will match. There’s no root -> response for / which is what your curl is asking for.,1530256913.0
LuciaDenniard,"You can either use StreamApp for older releases, or IOApp if you're on the latest 0.18, I recommend using `sbt new` to print out an example program to get you going, like it says in the Quick Start.",1529781302.0
oleg-py,"I've been working on this little lib for a while and I finally got the things I wanted there to be.

If you're not familiar with the idea, I suggest watching [this talk](https://www.youtube.com/watch?v=GZPup5Iuaqw). It's Haskell, but fairly penetrable :)

Feel free to open an issue or poke me on Gitter if something is unclear or you have something to suggest.",1529775524.0
SystemFw,"This looks great, fantastic work Oleg.",1529807007.0
somethingconcon,Love this.  Thanks so much !,1529819074.0
volpegabriel,"`State[S,A]` is an alias for `StateT[Id,S,A]` and `StateT[F[_],S,A]` is an alias for `IndexedStateT[F,S,S,A]`. You might want to look into the latter one. Here's a [quick talk](https://www.youtube.com/watch?v=JPVagd9W4Lo) explaining it. 

You don't need to know about CT to understand this. If you already understand `State` it shouldn't be difficult to understand `IndexedState`. Good luck!",1529723732.0
hebay,"for your specific use case, I would just a map with valid moves and check it before actually moving, hopefully there is a better way with cats.",1529717011.0
joyoyoyoyoyo,"such hard workers, they look exhausted",1529702615.0
briancodes,TL;DW ?,1529747680.0
ukralibre,Improvement goes hard ),1529763235.0
Milyardo,"From what I remember from a Scala Center meeting a long while ago, IBM was planning on getting Spark running with scala-native. Outside of that, depending on what your definition of large is, coursier and scalafmt have had native ports for a while now.",1529672881.0
merb,"well since there is graalvm with native-image, which is probably superior in many use cases, I doubt that anybody will use it for a large project.",1529614872.0
MakeCyberGreatAgain,"I don't own this but I've had my eye on it for a bit:
https://shop.lightbend.com/products/scala-t-shirt",1529598626.0
somethingconcon,kinda sounds like somebody at typelevel needs to get off their bottom and get some merch for their projects.,1529645421.0
shrink_and_an_arch,Really nice presentation - I've used Monix's Kafka integration quite a bit and found it to be really pleasant and easy to work with.,1529704154.0
l26liu,Any idea when it’s been rescheduled to?,1530255736.0
m50d,"Your `Node` definition looks good except that `next` shouldn't be a `var` (you don't want to mutate these things in place, you want to form new lists with changes). You could use Matryoshka to define it as a recursive type and that would provide a lot of standard traversal methods for you if you wanted, but that probably defeats the point of the exercise.

Rather than the extra wrapping of a `case class`, I might define `List` as a type alias. I *think* you can do this in a mutually recursive way:

    case class NonEmptyList[T](data: T, next: List[T])
    type List[T] = Option[NonEmptyList[T]]

Don't use an `isDefined`/`get`, that way you give yourself an opportunity to mix them up and accidentally do an unsafe `get`. The simplest step up is to use a pattern-match and tail recursion:

    @tailrec def traverse(l: List[T]): Unit = l match {
       case Some(Node(data, next)) => traverse(next)
       case None => ()
    }

Note that this way you don't need a mutable `var` either; `data` takes a different value on each step through the list but the language is handling that for you.",1529588275.0
Milyardo,"This implementation is going to double the object overhead for List, which is already pretty high. Since for every Some(List(t)) you're allocating 2 objects instead of one. This will also probably end up being less optimizable by the JIT.


> Although I think the second object creates a null equivalent by using MyNil and allowing MyList to accept covariant param +A

I don't understand the equivalency you're trying to draw. Why would `None` also not be equivalent to `null` by your logic? `Nil` is the empty list. Nothing more, nothing less.",1529596975.0
merb,it would be amazing if this would have 2.11 and 2.13 support as well.,1529615659.0
cynick_uk,"Fantastic! Have you considered some kind of `Hostname` type with a means to `resolve` to an `IpAddress`? I assume that as this would likely require a dependency on an effect type (cats-effect/scalaz) the omission was deliberate?

Edit: looking in to it, I see JavaScript has no support for executing DNS queries as it doesn't permit cross-domain networking. I imagine this also plays in to the omission.",1529656751.0
Krever,"1. autowire is rpc, it may be good if thats what you need (may be hard to call from other langauges)
2. never used
3. never used but seems to be specific to udash and hard to use without it
4. its higher level api that leaves the choice of actual client up to you (for now only xhr client is supported) and would give you the single definition of api for both client and server
5. rpc, see point 1.

There are also 2 other options:

6. typedapi - seems to be quite new project, similar to endpoints but heavy-using typelevel programming

7. sttp got scala.js support recently if I recall correctly.",1529568333.0
PrimozDelux,"Udash is nice, but it's not a light dependency. I use it for my project, but it's not for everyone, and I had to do some work to wrangle it into my project ",1529570191.0
MasGui,"[The Scala Code of Conduct](https://www.scala-lang.org/conduct/) starts with the following:

> We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other such characteristics.
>
> [...]
> 
>Show empathy towards other community members.

I believe it's important we respect the concept of the code of conduct. I don't think it's acceptable to say: let's keep politic out of tech because it does not fit your custom/morals. The role of the CoC is to protect developers from abuses of other developers (harassments, etc). We should strive for having a healthy environment.",1529615153.0
pellets,"+1 for sexual freedom

+1 for Scala

+1 for sex with Scala",1529525268.0
insincere_caring,"It would be nice if, well, politics were kept out of the professional programming community. Especially since some pride events have elements like those shown in these images (should be safe for work): [https://imgur.com/a/2zW6jRG](https://imgur.com/a/2zW6jRG).",1529531390.0
yawaramin,"Heather is playing three-dimensional chess. On top of supporting the LGBT community, we get to weed out some trolls 😂",1529773708.0
HighMaxFX,"I do not mind this one, the only way the mixing between politics and TI triggers me is when there are special opportunities only for woman.

If I was born with a vagina, with the same computer skills I have know, I would have a job in some big company now due those programs.

LOL",1529581184.0
jackie_pwn_asses,A bunch of smug white dudes getting triggered as fuck in this thread.,1529627471.0
yawaramin,"I’m not quite getting the usage here. Maybe I just need to read all the way through, but it seems like ‘capabilities’ here are being used like ordinary traits. One use was also the Cake Pattern by another name. The basic thesis looks like what I’ve read before in Oleg’s ‘Lightweight static capabilities’ paper, but I’m not quite seeing the crux of it here—that capabilities are marker types for enforced business logic.",1529772901.0
acjohnson55,"Very cool! Is there a great way to configure this in IntelliJ for running SBT, compiling, and running? Would doing the first thing take care of the other two?",1529526416.0
aphexairlines,"Where can we find the Mac and Linux native executables for the Scala 2.12.6 compiler as generated in this article?  Seems wasteful to have everyone compile it themselves.

Does the Graal team foresee native-image outputs being vended as Maven/Ivy artifacts as well?",1529518749.0
IndiscriminateCoding,"If you can easily implement something using IO/Futures, you shouldn't use akka at first place.

However there is the cases when you really needs actors, and if you try to stick with Futures, you will be doing all queues/supervision/routing by-hand.

Actors are just more powerful, so this article is more like comparing apples to oranges.",1529572900.0
Daenyth,"I feel like using Monix streaming for another implementation of this behavior is a clear next step.

",1529531400.0
PrimozDelux,?????,1529514196.0
m50d,"Because `Either` has two type parameters, the compiler can't figure out how to treat `Either[String,Option[Long]]` as an `F[_]` type properly unless you build with `-Ypartial-unification`.

The best solution is to build with `-Ypartial-unification`.

If that's not an option, you can pass the type parameters explicitly: `OptionT[Either[String, ?], Long](findUserById2(id))` if you can use the kind-projector plugin.

Without kind-projector you have to write it as `OptionT[({type L[A]=Either[String, A]})#L, Long](findUserById2(id))`. Or a separate type alias might be more comprehensible:

    type EitherStringOr[A] = Either[String, A]
    OptionT[EitherStringOr, Long](findUserById2(id))",1529508740.0
Philluminati,"I want to upgrade a Play application from 2.3 to 2.6. The app depends on a hand full of libraries themselves depending on a handful of libraries. To perform the upgrade I apparently need to cross compile each library for scala 2.12 (as well as the former 2.11).

Why I can appreciate the flexibility it gives the language designers, it is the opposite of write once, run anywhere. It is, write once, have to recompile continuously. I’ve run into a number of defunct libraries too as a result of this, which is further increasing the time a small play upgrade should take. I’m am forced to rewrite code to get each library to the minimum supported Scala 2.12 compiled library.

Maybe there is a “better way”. (I mean the source code for these libraries IS generally available)",1529427988.0
legopiraat,"My  colleague and I have been working on a Scala mutation testing framework for a while now. It was his graduation assignment and he did a great job! 

We finally made it open source, there is still a long way to go till it's fully functional and have the required speed it needs. But the future seems bright!

Take a look if your interrested [https://github.com/stryker-mutator/stryker4s](https://github.com/stryker-mutator/stryker4s) !",1529870932.0
wanderingLearner,"I'm trying to figure out a way to use Scalaz 8 to build a purely functional GUI program via JavaFX ([https://github.com/JordanMartinez/JavaFXFunctional](https://github.com/JordanMartinez/JavaFXFunctional)). In the process, I hope to become better at writing pure code.",1529334192.0
vytah,"I've been continuing working on my programming language targeting Commodore 64 and other 6502 machines (including other Commodore computers, Apple II, NES, BBC Micro, and Atari computers): https://github.com/KarolS/millfork The goal of the project is to have something that is almost as efficient as assembly, but also almost as convenient as C – and in some aspects even more convenient.

I just released version 0.3.0 and this is the first version that I can say is actually almost production-ready. No more stupid code generation bugs as in the previous version. I have two C64 game projects in the works and I caught most of the compiler bugs thanks to them.

I also improved the code generation and the optimizer a lot. According to my benchmarks (which I might publish in the future), Millfork is now faster than C (at least than what CC65 generates). Millfork also generates smaller binaries, but that was a feature from day 1.

The future of the project is not so clear now. I have at least the following things on mind:

* Complete the standard math library.

* Improve the libraries for platforms other than C64.

* Add compound datatypes.

* Complete the 65816 and/or HuC6280 support so I can at least run a ""hello world"" on SNES and/or NEC PC-Engine.

* Add support for a totally different CPU architecture, like Z80 or 8086.

* Re-write the parser, so it's faster; I'm currently using Li Haoyi's [fastparse](https://github.com/lihaoyi/fastparse), but it's not actually that fast.",1529963210.0
amazedballer,"Writing documentation on [ocaps](https://wsargent.github.io/ocaps), which seems to just keep growing...",1530158910.0
peppeweb,Recently migrated an API from Spray to Akka-http... Quite impressed from the different (lower) performance. ,1530162852.0
AssistingJarl,"Today begins my journey to refamiliarize myself with Scala after a few years of almost exclusively using ^^^^Java and ^^^^^^^^JavaScript (please don't hate me). I'm mostly just going to be working on toy projects from /r/dailyprogrammer to get started, but as long as I'm here, any hot tips on what I've missed out on since ~2015?",1529356787.0
prayagupd,I'm trying to learn Free Monads with little knowledge of Functor and Applicative Functor. I read [Free monads - what? and why?](https://softwaremill.com/free-monads/) but did not grasp much at all. Recommendation with cats or scalaz with real life example would be helpful.,1529624882.0
ClojureWorks,"We are working with an awesome Fin-Tech company based out of Tokyo, Japan. 

They are changing the way people pay for products and services in Japan using Scala. 

BIG fans of functional code and functional architecture, using such technologies as Eff Monad and Effect Stacks, they are hoping to find engineers who feel the same way. 

So, if you are fed up of using Scala in an OO style, and have dreamed of a company who thrives on functional code, then we are keen to hear from you. 

All relocation support provided including a healthy relocation budget, full visa support (just a signature needed) and temporary housing for 2 months. 🏡

Let me know if you have any questions",1529317305.0
duhace,"How long will you be looking for people? I am not moving on yet, because my current work needs me to complete my work, but maybe late next year.",1529938460.0
jayvbe,"Yup, it works when your POM is configured properly, however I remember doing quite a bit of trial and error too. 
Many examples online are outdated. Once maven manages to build your project on the cli, intellij should just work after a project reimport.",1529305150.0
raghar,"If this is Scala-only project, maybe it would be easier to use sbt to generate POM? Like write a simple build, make sure it compiles, generate POM and then remove sbt files?

    sbt makePom

I am assuming that you considered sbt, mill or gradle and didn't want to use any of them.",1529331767.0
midenginedcoupe,"Er, yes? Every Scala team I’ve worked in have used IntelliJ.

Perhaps you could explain what’s not working?",1529301806.0
p220,"What error do you have? need more info... many many people do this, same for gradle and sbt",1529370734.0
zzyzzyxx,"Yep. Here's [a comment of mine](https://www.reddit.com/r/scala/comments/4jkuea/weekly_scala_ask_anything_and_discussion_thread/d393x0q) from a couple years ago on the topic explaining a pom setup I used. I made [a gist of the parent pom](https://gist.github.com/anonymous/bf179eebc6a153eb4c4c9e9a56b7d693) when I last mentioned this [a year ago](https://www.reddit.com/r/scala/comments/4sk4j2/can_someone_help_me_get_started_with_scala/d59ybjn).

I've been stuck in SBT land since then and haven't maintained the pom so the versions are likely to be outdated and the compiler args are not what I would use today, but hopefully that's enough to get you going. Let me know if something doesn't work; I might recall enough Maven magic to help.
",1529474660.0
volpegabriel,"Still in early development so the API is subject to change. For now I focused on a limited amount of features mentioned in the README file such as `PubSub`, `Streams` and a limited support for basic operations. Feedback very welcome :)",1529283230.0
gbersac,"Interesting.But I don't need those feature so I'll stick with lightbend scala.

That being sait, the project seems interesting. Will some of those improvements be backported to the lightbend scala compiler ?",1529316210.0
commithook,Great progress. Is there a published artifact on MavenCentral yet? Thanks,1529293824.0
,"By far the best way to learn this stuff is to hang out with people who know it, and ask questions. And this turns out to be pretty easy. Get on the `scala/scala` and `typelevel/cats` Gitter channels, and go to conferences if you're able to (in particular those held in conjunction with a Typelevel Summit).",1529278044.0
DevIceMan,"Similar question:  What are some good ""passive listening"" resources (podcasts, audio books, youtube lectures, etc) you might recommend?

I did just start reading ""Functional Programming in Scala"" but I didn't want to anchor the topic too much if people had better or different suggestions.",1529257703.0
wanderingLearner,"Read Sam Halliday's book on Scalaz [https://leanpub.com/fpmortals](https://leanpub.com/fpmortals) I'd say it's the ideal ""sequel"" to the Red Book and may even be better in some cases. I've read it and fully recommend it.

I'd also recommend joining the scalaz gitter chat (see the link on their GitHub ReadMe). They often talk about various topics relating to FP and category theory that underlies FP. They are a good source of information and other materials that can help you tremendously.",1529262276.0
endzeit_,"Probably the ""red book"": https://www.manning.com/books/functional-programming-in-scala

Edit: Oh, you edited your top-level comment. Now my comment looks stupid. :D",1529257876.0
lu4nm3,"For books take a look at underscore's free open source books they put out, especially the essential Scala one and the one that covers the cats library. For podcasts, checkout CoRecursive with Adam Bell.",1529258122.0
IcedDante,"I would look at Functional and Reactive Domain Modeling. It illustrated a lot of important functional programming concepts that would be applicable across a lot of disciplines (although Scala is the focus of this book). I haven't read the red book yet so I'm curious to know how they compare. I would also check out 99 Scala problems online.

BTW - let me know how your job search goes. I don't see a lot of advertised positions for Scala and am not sure how useful my knowledge of it will be. FYI - I know capital one has quite a few Scala projects. ",1529341236.0
kythzu,This is a great question with kind and helpful answers. Really encouraging as someone just starting out learning scala. I have a JavaScript background so interested in diving straight into the functional programming patterns (there's some of it in js but scala goes further). These resources will help me find my way around. Thanks all :),1529360619.0
clhodapp,"This is some truly impressive work (arguably getting into the same league as a warm hotspot, just wow) but as a user, as the performance of Scala Native gets better and better, the lack of multithreading looms larger and larger as the blocker to moving real workloads onto it.",1529208422.0
fbertra,Impressive work.  I'm starting to believe idiomatic Scala can match imperative C.,1529281636.0
Krnpnk,"Sounds really promising!
Although it would have been cool if all those optimizations would be available for all three backends... ",1529246009.0
dns99,Where is spark in this new development? ,1529221435.0
XavierLightman,impressive!,1529154355.0
aphexairlines,broken link -- should be https://www.scala-lang.org/blog/2018/06/15/bsp.html,1529093959.0
argv_minus_one,Here's hoping it catches on like LSP did.,1529093730.0
aphexairlines,"This looks really promising.  When BSP support arrives for multi-language build tools like Gradle, Maven, Pants, and Bazel, how will it handle different languages?  Will the BSP implementation for those tools need to know about each language that the build tool supports?",1529095334.0
Katrix400,"Are there any plans to make work with SBT without going through bloop? I don't need a tool like bloop, it's too much of a hassle, and doesn't suit my needs.",1529116745.0
duhace,"used this with intellij today. one of the problems was with indexing times, though that might be because of some of my source files being overly complex.

another problem was compilation errors **not** being highlighted. I'm not sure how that happens, as bloop was picking them up fine, but whatever.

what i'm hoping for most with bloop is that it can be subbed in as handling sbt's basic compile phase. right now that does not seem to be the case. but in any case, a warm jvm really speeds up scala compilation, and that's especially true if you're using graalvm.",1529275924.0
Jasper-M,Doesn't this fall outside of the scope of what a JIT compiler should do?,1529094431.0
raghar,"I think that the whole `ListFusion(...).map(...).map(...).fuse` approach is not much different API-wise than monad transformers - most people I know that ever used them, decided they prefer to rewrite their code so that they won't have to use them.

Besides, wouldn't it be possible to use method fusion internally in *lazy* collections? Streams sound like something that could use them without much issue to the user.

Additionally, AFAIR there is an implicit assumption, that your collection follows functor laws, while if I am not mistaken e.g. `Set` doesn't follow.

The last thing, method fusion cannot work any longer when you start using flatMaps. Considering, than in some contexts `map` is a minority of transformations (IO and async computations, Try, Future, Task, other IO monads) I can imagine, that method fusion would only have chance of being used in lazily-evaluated-lawful-functor collections.",1529168400.0
johnynek,"I’m confused. If you have List(...).map(f).map(g) when is it not safe to convert to .map(f andThen g)?

You know the intermediate List never escapes and thus we don’t need to allocate it. This can be communicated by the List library author or an external package in terms of a rewrite rule, which is what they propose.

I know your whole shtick here is pooping on scala, so it’s probably a waste of time to discuss, but can we talk specifically about their proposal and why the List example fails?",1529260407.0
snaket2003,"Have you tried running the Spark code on a Zeppelin notebook with a subset of the data? Where are you ingesting the data from? How are you triggering the job?

Hard to say without looking at the cluster’s performance during the write operation but, running it in Zeppelin and breaking down your data frames in smaller chunks will allow you to more easily debug the issue - it could be one of a million things but blindly throwing memory at it doesn’t sound like a good solution. 

Good luck!! ",1529091603.0
,[deleted],1529091531.0
selbatpordybbob,Depends what you're doing. Joins can run out of memory as can writes. How many partitions are you writing to? A common problem with big files is that the default 200 partitions is too few to handle the volume of data (since 1/200th of your data ends up on a single executor),1529447244.0
lihaoyi,"All the examples could be written using Applicative parser combinators rather than Monadic parser combinators. You only need Monadic parsers if you're doing things like parsing indentation-grammars (e.g. Python) or grammars containing length-prefixed-strings (more common in binary than textual formats)

Applicatives master category!",1529109605.0
myliverhatesme,"I was skeptical when I saw the word ""simple ""and sure enough this isn't simple at all.

> It’s quite easy to understand what it represents. Each symbol <Exp> <Term> <Factor> is defined ""::="" by an expression (symbols, literals, combinations).

Stop saying things are simple or easy! I'll decide that for myself. Now if it seems difficult am I supposed to feel like even more of an idiot? I have no idea what that crazy ""::="" symbol means.",1529076677.0
MasGui,"If you have any questions, I'm here to answer.",1529005826.0
michaelmalak,Looks like COBOL,1529042558.0
satan-repented,You mixed up the s and a in the example text.,1529080754.0
MyFunc,"Interesting stuff, I guess the other major limitation is for those with physical disabilities that make it hard to input code using a conventional keyboard. I am aware of people using voice recognition for coding but there are still barriers with this.

It would be great if there was more ""intelligence"" surrounding voice to code. I think there are major productivity and health benifits to be had, even for those without physical disabilities.",1529130418.0
volpegabriel,A few steps further and you'll end up with a tagless final design :),1529031134.0
LPTK,"I only had a cursory look at the article, but I'm failing to see how this has anything to do with the [decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern). Or is this another ""decorator"" concept?",1529010853.0
Daenyth,This approach works really nicely with fs2 streams. I've been having a much nicer time testing with that structure,1528985012.0
rberenguel,"Not 100% sure if I follow, but you can parameterise the trait with Report[T], then you can define cells[SpecificWorkbook] in each extending class",1528930799.0
joshlemer,"/u/rberenguel is right, you need to put the type param on `Report[T <: Workbook]` like  
  
    trait Report[T <: Workbook] {
      def cells(wb: T): Unit 
    }
      
    class ReportXSSF extends Report[XSSFWorkbook] {
      def cells(wb: XSSFWorkbook): Unit = ???
    }  
",1528948401.0
,"`op.toRight(""error message"")`",1528914721.0
Demius9,"there is also `Either.fromOption(myOption, ""error message"")` but it sounds like you want something more like what is described from tpolecat. Personally I love using the more verbose in cases like this since most of my team needs a little more info about what is going on. ",1529085180.0
ClickableLinkBot,"##r/mxnet
---------------------------------------------
^(For mobile and non-RES users) ^| 
[^(More info)](https://np.reddit.com/r/botwatch/comments/6xrrvh/clickablelinkbot_info/) ^| 
^(-1 to Remove) ^| 
[^(Ignore Sub)](https://np.reddit.com/r/ClickableLinkBot/comments/853qg2/ignore_list/)",1528912345.0
,[deleted],1528907761.0
illogical_commentary,"I hope they continue work on types for autocompletion purposes. When I was starting with Scala having only done a little bit of Java, I couldn't understand anything the IDE was telling me about the type signature.",1528902986.0
marcinzh,"`Map`'s `mapValues` and `filterKeys` are still lazy, in otherwise fully eager collection. These are boobytraps. There should be no surprise-lazyness. Especially now, when `View`s are advertised for that role.

At the very least, please don't let make it into Dotty.
",1529017845.0
yang_bo,"Announcing the removing of `Traversable` might disappoint me, considering https://github.com/scala/collection-strawman/issues/15 is still open.",1528953982.0
acjohnson55,"\`groupMap\`, FTW!

Existing collections are pretty fantastic by the standards of most programming language standard libraries (\*cough\* JavaScript \*cough\*). I'm looking forward to an even more pragmatic new collections lib!",1528983341.0
ahel,">LazyList Is Preferred Over Stream  
>  
>Stream is deprecated in favor of LazyList. As its name suggests, a LazyList is a linked list whose elements are lazily evaluated. An important semantic difference with Stream is that in LazyList both the head and the tail are lazy, whereas in Stream only the tail is lazy.

what's the benefit of having both head and tail lazy?",1528973165.0
LPTK,"I like the new design, and I'm glad that [my proposal](https://github.com/scala/collection-strawman/issues/42) for saner grouping methods (`groupMap` and `groupMapReduce`) has been followed through!

However, I really don't get the reasoning behind the last point:

> mutable collection types do not inherit immutable insertion and removal operations.

Having both `+` and `+=` makes total sense, and I'd wager that it's one of the few things that should be intuitive for almost all programmers new to Scala, as many other languages and data types use the same convention for 'in-place addition' versus 'immutable addition'. In fact, not having `+` on mutable maps only makes their design less consistent, and will sow confusion/breakage for no good reason at all.

Also, a simple use case: if I want to populate a mutable map and then pass it somewhere with only a slight temporary modification, before going back to the original unmodified mutable map, I may want to use `+`. As an example, I may want write a recursive function that threads some inductive context contained in a map, where the context between two recursive invocations is distinct, but it is in addition _still_ mutable within one given invocation...

    def foo(ctx: mutable.Map[A,B]): C = { ... ctx += k1 -> v1; ... foo(ctx + (k2 -> v2))  ... }",1528907624.0
chetanbhasin,"It's a bit strange asking someone to just put a bunch of technologies together without discussing how it solves the problem at hand.

What is the problem at hand, anyway? If it's about just writing an example application to demonstrate the understanding of different technologies then it's a different topic altogether.

Personally, I'd stay away from someone who likes to use something for the sake of using it.",1528905639.0
MasGui,What is NeoPipe ?,1528895653.0
XavierLightman,any progress? doesn’t work for me at all atm 👽,1529154326.0
geggo98,"Did anyone benchmark the different approaches? Would be interesting to see, how the behave with regards of throughput and latency.

And in the case nobody did this: how would a good approach look like, that gives a meaningful result? Benchmarking is hard, especially when dealing with concurrency.",1528831840.0
blitzkr1eg,As a scala beginner I always wanted this kind of info: seeing how one would rewrite actors into other abstractions.,1529052418.0
thesuperching,Great! When is next part out ?  Looking forward to see how Task handle complex communication.,1529122855.0
LukaJCB,"This is cool, though I really really wonder how they got these results, given that 2.13 isn't released yet has 30% of usage. 
I don't think these results can be taken at face value.",1528796044.0
_gDanix_,It really surprised me that Mill doesn't appear as a build tool. Given the complexity I thought Mill had a stronger adoption. Maybe Mill is too young? Or maybe Scala programmers aren't afraid of sbt?,1528969782.0
csjrgoals,When did you realize the years of using and learning Scala were precious?,1528726372.0
prayagupd,What do you think about dotty compiler? Is it going to be merged back to scala(scala 3.0) or going to be separate compiler?,1528769008.0
_gDanix_,"I'm very excited with scalameta/metals, and want to know when it's planned that metals reach the production\-ready stage. I'd like to contribute but right now it's impossible for me (maybe in a couple of months).

Thanks.",1528969440.0
Philluminati,"I’m working at a new place and using casbah mongo for the first time. I wrote a test that checked some mongo collection fins command was working with testOnly and it was. When I ran the whole test suite my app failed with a class cast exception that joda DateTime cannot be cast to java.util.Date. I eventually this down to a unit test that used: https://github.com/mongodb/casbah/blob/master/casbah-commons/src/main/scala/conversions/ScalaConversions.scala This function, which I can’t tell if used by a mongo library we depend on, but isn’t in our app, but is our test suite, when hit, changes the way mongo results are returned Globally, and predictably. Does everyone else agree this is really bad behaviour and library design? Given my limited understanding of every library my app depends or changes that may occur in the future in them.. I cannot reason about how a simple mongo query would respond and thus am forced to handle the issue by doing a case match on both java.util.Date and org.joda.time.DateTime!",1529005352.0
roelofwobben,"On haskell I did this challenge where I must read a log and tell the activity and the duration. 

example log : 

    -- wheee a comment
    # 2025-02-05
    08:00 Breakfast
    09:00 Sanitizing moisture collector
    11:00 Exercising in high-grav gym
    12:00 Lunch
    13:00 Programming


I wonder if I can make the same with scala and how it then looks like ",1529176887.0
galkowskit,"Good materials for Node.js (though kinda functional programming leaning) developers migrating to Scala? I'm mostly interested in a ""roadmap"" of sorts.  


I'm not fond of Coursera and already read through underscore's free eBooks. I've done some easy guides on Akka, event sourcing and CQRS but I just need more info on the language and libraries, etc.",1529667403.0
BitgateMobile,"Got a question regarding deploying to Bintray, if anyone knows.

I've been spending about 3 days trying to get Scattersphere to publish to Bintray, and I keep getting ""Unauthorized"" messages.  What I've boiled it down to is a faulty API Key, but the API Key I've tried using is what I've been given by JFrog.

Ultimately, the error I get is:

Failed to deploy artifacts: Could not transfer artifact io.buildfactory:scattersphere:pom:0.2.1 from/to bintray-kensuenobu-scattersphere (https://api.bintray.com/maven/kensuenobu/scattersphere/;publish=1): Failed to transfer file: https://api.bintray.com/maven/kensuenobu/scattersphere/;publish=1/io/buildfactory/scattersphere/0.2.1/scattersphere-0.2.1.pom. Return code is: 401, ReasonPhrase: Unauthorized.

Hoping someone can help.  This is endlessly frustrating.",1529866011.0
galkowskit,WTF is Dotty? Is it something like sbt?,1529667498.0
,"Test are programs, and you can abstract over tests the same way you abstract over anything else. Define a set of laws for your Queue (like `q.push(a).pop === a`) and associated property-based tests (check out Scalacheck if you have not done so) defined in terms of the abstract interface. This set of tests can be a concrete class that takes an implementation as a constructor argument, or an abstract class that requires the implementation to be specified by filling in some abstract definitions. Anything more complicated is probably a distraction.

Note that Cats and scalaz both provide setups for law-checking so if you're using either of those you already have a leg up.",1528689084.0
nutsack_dot_com,"> Is this a case for dependency injection? I.e., I pass in (or ""inject"") the appropriate implementation to the same group of tests and see if they all run?

Yes, but don't overthink it.  DI often boils down to passing parameters, and the usefulness of DI frameworks is *not* a matter of consensus.  If it were me, I'd do something like

    trait Queue { ... }
    final class LinkedListQueue extends Queue { ... }
    final class StackQueue extends Queue { ... }
    final class ArrayQueue extends Queue { ... }

    ...

    def doQueueTest(queue: Queue): Unit = {
      // assertions about what all Queues should do, like
      assert(queue.push(a).pop === a) //ScalaTest-style
      // more
    }

    doQueueTest(new LinkedListQueue)
    doQueueTest(new StackQueue)
    doQueueTest(new ArrayQueue)

Or in other words, put common, repeated code into a method, and call it with different params.",1528755477.0
Terran-Ghost,"This is in Java, but is still relevant to Scala unless you're trying to write pure functional test:  https://webcourse.cs.technion.ac.il/236700/Spring2017/ho/WCFiles/02-Testing_fixed.pdf#page=16

tl;dr: [template pattern](https://en.wikipedia.org/wiki/Template_method_pattern) / dependency injection.",1528737877.0
mart187,This screams for Property based testing. Look for scalacheck. ,1528743588.0
alf239,"I did it the following way: there's a [shared test for all the queues](https://github.com/alf239/okasaki/blob/master/src/test/scala/okasaki/QueueSpec.scala) there are, and it describes the expectations for the interface:

    abstract class QueueSpec[E, Q](queue: Queue[E, Q]) extends Specification with ScalaCheck {
      implicit def elements: Arbitrary[E]
    
      ""A queue"" should {
        ""Maintain the order"" ! prop {
          xs: List[E] =>
            val xs1 = drain(fromList(xs))
            xs1 === xs
        }
      }
    
      ""An empty queue"" should {
        ""allow snoc"" ! prop {
          e: E =>
            val q = queue.snoc(queue.empty, e)
            queue.head(q) === e
        }
    
        ""be empty for head"" ! prop {
          e: E =>
            val q = queue.empty
            queue.head(q) should throwAn[IllegalStateException]
        }
    
        ""be empty for tail"" ! prop {
          e: E =>
            val q = queue.empty
            queue.tail(q) should throwAn[IllegalStateException]
        }
      }
    
      def fromList(xs: List[E]): Q =
        xs.foldLeft(queue.empty)(queue.snoc)
    
      def drain(q: Q): List[E] =
        iterate(q)(queue.tail)
          .takeWhile(!queue.isEmpty(_))
          .map(queue.head)
          .toList
    }

Then there are specific test classes like

    class BatchedQueueSpec
      extends QueueSpec(new BatchedQueue[Int])
      with IntElements

for batched queues,

    class HoodMelvilleQueueSpec
      extends QueueSpec(new HoodMelvilleQueue[Int])
      with IntElements

for Hood\-Melville queues, etc.

So as soon as you can provide the implementation of Queue, you're all set.",1528909610.0
kpws,http://www.scalatest.org/user_guide/sharing_tests,1528740684.0
acjohnson55,"Dude, you're publishing some great work. Keep it up, and thanks!",1528775485.0
elacin,"start sbt like this to avoid the shell escape codes:
    sbt -no-colors",1528670968.0
martin_mauch,"You can do a

    less -SR foo.log

to make less interpret the ANSI color codes correctly.",1528708335.0
stusmall,Those are escape codes.  [Here](https://en.wikipedia.org/wiki/ANSI_escape_code) is a link with more details.  They are usually used for colors or formating on the console.    I've never tried cleaning them out of output.  A lot of programs either offer an non-interactive mode or I think some will even detect if output is being redirected and not use them.,1528669659.0
,"Each package declaration imports the symbols from the declared package. So more stuff is in scope in the first example, which can see everything in `server` *and* `server.api`. In the second example you can't see stuff in `server` and would have to import it explicitly.",1528599507.0
SystemFw,"Perhaps you could expand a bit on the safety thing: in general `Ref` _is_ safe for concurrent access, that's part of the point, and doesn't require a Semaphore.

You do need a Semaphore where the modification function is `A => F[A]`(because you can't express it with `update` or `modify`, but separate `get` and `set`), but the two very common cases of `A => A` (modify the state), and `A => (A, F[B])` (modify the state and run an action, typical of state machines) can be done using `Ref`only.",1528578753.0
youguysdonthonestly,@oleg-py Can I get a more in-depth explanation of how `Semaphore` is helping provide safe access here? I think I'm missing the benefit it is providing. ,1528675878.0
akaifox,"Different tools for different people. 

You only have to take a peek at the top threads in each subreddit to see how Kotlin is after Android and your classic Java projects: Spring, Hibernate, etc. Those who actually enjoy that stack are looking at Kotlin and enjoying it as a better Java. 

Whereas Scala is a different ecosystem with a stronger FP focus that no-longer is seen as just a better Java -- similar to Clojure. It's very rare to see a post about old Java frameworks in Scala.",1528534364.0
kpws,"kotlin is so envious of scala.

most of us here don't give a shit about kotlin, yet kotlin is always trying to measure itself against scala.

kotlin: scala for those who love to hate scala.",1528540315.0
NOLAnuffsaid,"The survey used in the title post is from JetBrains, the creator of Kotlin. ",1528543601.0
acjohnson55,Cool! I'm still quite happy in Scala land. ,1528598281.0
trout_fucker,"Android adopted it after the lawsuit.

https://developer.android.com/kotlin/",1528521534.0
silentraquo,"I'm really confused by Java's new [non-overlapping free support periods](http://www.oracle.com/technetwork/java/javase/eol-135779.html).

How is anyone going to stay sane without paying thousands of dollars to Oracle (or someone else)? Updating the JVM version (with potentially breaking changes) every half year does not seem feasible for a project that has even a moderate number of dependencies.

I _must_ be misunderstanding something... Is https://adoptopenjdk.net/ supposed to address this somehow?",1528521450.0
amazedballer,"You should use a custom execution context:

https://www.playframework.com/documentation/2.6.x/ScheduledTasks#Using-a-CustomExecutionContext

and set up the dispatcher as a thread-pool dispatcher with fixed-size=10.

https://www.playframework.com/documentation/2.6.x/ThreadPools#Using-other-thread-pools",1528495747.0
teknocide,"It should be noted that having 10 threads does NOT limit something like the http client to 10 concurrent requests (unless the requests are explicitly blocking).

If you aren't performing any kind of asynchronous calls you can safely ignore this advice",1528499917.0
midenginedcoupe,"How is limiting this in your app going to work in practice, surely it’s going to be deployed to more than one node?",1528519364.0
jackcviers,"  
  ExecutionContext.fromExecutorService(java.util.concurrent.Executors.newFixedThreadPool(10))",1528491782.0
,"Oh, neat, I needed something like this for a project a few months back and didn't find many good options. I'll check it out.",1528493606.0
,"There's kind of a lot going on here.

- Is this a school assignment?
- If not, what is your intent? Why are you doing this?
- There's not enough detail to implement this.

I would suggest you look at an introductory book on programming language theory like [PLAI](http://www.plai.org) to understand how to structure an interpreter. There's a lot of subtlety to it.",1528476550.0
non-private,"I think `interpret` should return an updated map, too.

Then, you can recursively call interpret with an updated Map. You won't do it with `for`, but with fold, starting with `varEnv` and updating the map at each step. A bit like this:

    def interpret(env0:Map, expr:Node): (Map, ExpValue) = expr match {
      case Block(exprs: List\[Node\]) =\> {
        newEnv = exprs.fold(env0, (expr, env) =\> {
          (newEnv, _) = interpret(env, expr);
          newEnv})
        }
      }
     }

From your post, the semantics of your interpreted language is not clear (is it rather statement-like or a series of expressions? Are variables names that are bound to values or are they aliases for memory locations? etc.) Depending on the semantics, you would like to have a different interpreter implementation.",1528394344.0
ubiqu1ty,"If you add a new entry with the same key as one that already exists in a Map, it will replace the old value (see [additions and updates](https://docs.scala-lang.org/overviews/collections/maps.html)). This should allow you to shadow variables.",1528384603.0
larsga,"From the source code you give it looks like you haven't really built the abstractions you need to make this easy to do. For example, you should have a `Scope` trait/class to represent the current evaluation context. And `Function` should also be a trait/class.

I just implemented the exact same thing for a JSON query/transformation language I've developed. For comparison, the call method there looks like this:

    public JsonNode call(JsonNode input, JsonNode[] arguments) {
      // build scope inside function body
      Map<String, JsonNode> params = new HashMap(arguments.length);
      for (int ix = 0; ix < arguments.length; ix++)
        params.put(parameters[ix], arguments[ix]);
      Scope scope = Scope.makeScope(params);
  
      // evaluate body
      return body.apply(scope, input);
    }

Yeah, I know it's Java. This is going to be a very widely reused library so we want minimal dependencies (and we don't want to worry about Scala major versions etc). Only runtime dependency is Jackson. The concepts should be the same, though.",1528365300.0
threeseed,"You don't ""run"" your Scala JS app.

It builds a Javascript file which you then include in your Play index.html file and use accordingly.

Lots of working examples here:

[https://github.com/search?q=playframework\+scalajs](https://github.com/search?q=playframework+scalajs)",1528348327.0
alastor1796,Did you have a repo for us to look at your project?,1528342698.0
Shbla,"Why not return everything as `Future[T]`, using `Future.successful(value)` for non-asynchronous cases?",1528331631.0
amazedballer,"Where did you define `SyncEventMapperFunc`?  I think your definition there is off.

What you're doing is generally correct, it's called ""tagless final"" approach, and the trait with the `C[_]` bit is called an object algebra.  [https://typelevel.org/blog/2017/12/27/optimizing\-final\-tagless.html](https://typelevel.org/blog/2017/12/27/optimizing-final-tagless.html)",1528333755.0
Technius,"What this error is saying is that `ObjectMapperFunc` needs a type constructor but you've only given it a `_` as an argument (e.g. the type supplied is `ObjectMapperFunc[String]`, but what is needed is something like `ObjectMapperFunc[Future]`). But we can't just use `ObjectMapperFunc[_[_]]`, since we can't use wildcards in the type signature. It looks like you're trying to use an [existential type](https://dzone.com/articles/existential-types-in-scala), which can be used like this:

    trait ObjectMapperFunc {
      type Container[_]
      def mapFunc(input: InputObject): Container[OutputObject]
    }
    
    object OutputAMapperFunc extends ObjectMapperFunc {
      override type Container[A] = Id[A]
      override def mapFunc(input: InputObject): Id[OutputObject] = ???
    }
    
    class OutputCMapperFunc extends ObjectMapperFunc {
      override type Container[A] = Future[A]
      override def mapFunc(input: InputObject): Future[OutputObject] = ???
    }
    
    class ObjectMapper {
      def mapInputObject(contentType: String): ObjectMapperFunc =
        contentType match {
          case ""A"" => OutputAMapperFunc
          case ""C"" => new OutputCMapperFunc
        }
    }

While this compiles, extracting an actual value becomes very difficult, since we don't know anything about the `Container` used in `ObjectMapperFunc`. You'll probably need to cast or use dependent types (e.g. like in shapeless) to get the actual value out.
",1528350406.0
Milyardo,"`OutputAMapperFunc` probably doesn't need to know what kind of effect it wants to return, you should change it's signature to:

    class OutputAMapperFunc[F[_] : Applicative] extends ObjectMapperFunc[F] {
      override def mapFunc(input: InputObject): Id[OutputObject] = Applicative[F].point(???)
    }

Next, if the caller of `mapInputObject` doesn't know, or care what the effect is, it should parameterize over the effect as well.

    def mapInputObject[F[_]](contentType: String, input: InputObject): ObjectMapperFunc[F] = {
        contentType match {
          case 'A': OutputAMapperFunc
          case 'C': new OutputCMapperFunc
        }
      }

Your only problem now is `OutputCMapperFunc` returns a `Future` where `F` is expected. 

You may concede that OutputCMapperFunc can't change and have `mapInputObject` return Future as well. If you do this then then at least `OutputAMapperFunc` will still be generalized, requiring only it's effect have an Applicative(or something that just `point`/`pure` if your functional programming library has that) instance.

You may be able to generalize `OutputCMapperFunc` using a typeclass like you did with `OutputCMapperFunc`. Instead of applicative you would constrain `F` to be some effect that is `Async` or `Sync`, or just any `Monad/MonadError` depending what you're using from Future.

The third option is to add another parameter(maybe implicitly) that will be a function `f: ObjectMapperFunc[Future] => ObjectMapper[F]`, and applying `OutputCMapperFunc` to that function. This is more or less just generalizing over the effect like you would with a typeclass in the previous option in a more naive way, but may work in this particular narrow case if this is your only use for this, and do not want to depend on a specific effect library.",1528349500.0
ryan_the_leach,"I don't know if https://blog.scalac.io/2015/05/28/scala-modes.html remains to be relevant, but it did seem to be a very good solution to this type of problem.",1528562300.0
dxplq876,Have you heard of elasticsearch?  It may be just what you need.  It supports horizonal scalability and sharding.  I'm not sure if it supports fuzzy searching though,1528312805.0
ElasticZebra,I second Elasticsearch. I love the product. It’s based on Apache Lucene which itself gives you the search/autocomplete without having the additional overhead of elastic on top. Both are easy to configure from an API point of view. ,1528345855.0
domlebo70,How many items are we talking about?,1528325716.0
chetanbhasin,I've done the exact same thing before on ElasticSearch and it works wonderfully!,1528357049.0
chrisokasaki,"It would be easy to build this on top of Hinze and Paterson's finger trees, of which there are several Scala implementations.  The resulting complexity for indexing and insertion should be logarithmic.  Finger trees support many operations that you may not need, in which case you may be able to get faster results with a custom data structure (faster by a constant factor, not with a better big\-O).  However, unless this is really your bottleneck or you're just doing it for fun, I doubt a custom data structure would be worth the effort.",1528306482.0
lropol,"xs(m) is take:
https://www.scala-lang.org/api/current/scala/collection/immutable/IndexedSeq.html#take(n:Int):Repr
for insertion you are looking for patch method:
https://www.scala-lang.org/api/current/scala/collection/immutable/IndexedSeq.html#patch(from:Int,that:scala.collection.GenSeq[A],replaced:Int):scala.collection.immutable.IndexedSeq[A]
you need to create some convenience method around patch method to do exactly what you described.

The bad news is that Vector, which is the default IndexedSeq implementation, is slow at concatenating other vectors: https://github.com/scala/bug/issues/4442
There is a mention of RRB-Vector in comments. RRB (Relaxed Radix Balanced) Trees provide efficient immutable vector concatenation.
There is a prototype: https://github.com/nicolasstucki/scala-rrb-vector

Finger trees look good on paper but tend to have bad memory locality meaning performance is usually bad in practice. But they might solve the problem.

One alternative is to use Red-Black tree based Vector implementation. Red-Black trees are bit mediocre solution for linear random access structure. But if insertion performance is important then the red-black trees might be one option.

So, you most likely a RRB based vector implementation would be the right one. Finger tree or red-black tree based version might do the job as well.",1528659023.0
Daxten,"https://docs.scala-lang.org/overviews/collections/performance-characteristics.html

do you know this site? This may help you",1528301428.0
hyperforce,"What is it about the standard collections library that isn't sufficient for your use case?

What exactly is your use case?",1528382242.0
XavierLightman,It’s summer - why would the features freeze? 🤔,1528221380.0
buth3r,"i really appreciate those tutorials you do, keep it up!

one question: what are the best resources to learn proper FP? 

im trying to write FP style scala, but as im from OO world and surrounded mostly by java devs it's very hard to move forward and abandon java practices. what i do id call writing java in scala with FP elements. how to break free?",1528224926.0
strartem,Great tutorials. Thank you.,1528226425.0
sirsai,"In Scala 2.12 Either have the method.

    def toTry(implicit ev: <:<[A, Throwable]): Try[B]

it only needs to know how to go from A to Throwable",1528158289.0
raghar,"Either to Try is not that common, so I would be surprised if there was such util already.

But you could still implement it yourself in a minute e.g.

    class EitherTryOps[E <: Throwable, A](val either: Either[E, A]) extends AnyVal {
    
      def toTry: Try[A] = either match {
        case Left(throwable) => Failure(throwable)
        case Right(value)    => Success(value)
      }
    }",1528150182.0
,With cats `e.liftTo[Try]` will get you a `Try[Option[A]]`. If you want to treat `None` as a failure you might consider using `.unique` instead of `.option` on your doobie query.,1528150715.0
Judheg,Would projects without shapeless and macros benefits from this tool?,1528134807.0
kpws,`Reads` https://www.playframework.com/documentation/2.6.x/ScalaJsonCombinators,1528117463.0
mr___,"Write case classes with native types.

Write companion objects with an implicit val of type Reads[Whatever] or Format[Whatever], use Json.format[Whatever] to create the serializer for common types or write your own.

For types without a Format[T] already defined, define one. For example if your case class has a java.time.Instant, you’ll need to provide an implicit conversion that converts the instant to a JSNumber(BigDecimal(...)).

Json.parse(string).validate[Whatever] will find your implicit formatters (and the ones defined for base types) and use them to recursively transform the input ",1528117810.0
Doikor,"I made this https://github.com/qvantel/jsonapi-scala in my previous job for working with [jsonapi](http://jsonapi.org/). It does work (is used in production) but it is very opinionated and you need to carefully follow the instructions (what little there is) to get it to work. Also the macros generate some dead code which annoys me greatly but never had the time to take a look what causes it (also my first time using macros and it kinda shows)

In my experience most of the ""normal"" ways to write serializers/deserializers for jsonapi kinda don't work as you need to flatten out the structure (all the things behind the nested relationships are in the included array flattened out). But your thing seems to be in a single level without any relationships so it should still be possible without using a specific library.",1528348996.0
deadeight,"At a new company \(mostly Python\), with a brand new team \(varied experience: C#, Clojure, PHP\), we've just successfully built a proof of concept and are now beginning to move it to being a production system to iterate on. We built it using Scala and Akka, and it feels like a really good fit as there's a lot of parallelism going on with some longer running tasks, and a bunch of external integrations that're nicely handled in an event driven manner.

For context, the company is a non\-profit, and we're building a system to manage research data with the ultimate aim of making it open and free \([a recent relevant news article](https://www.theguardian.com/science/blog/2018/may/29/why-thousands-of-ai-researchers-are-boycotting-the-new-nature-journal)\).  


Does anyone have any good links or info specifically about making a scala codebase production ready? E.g. static code analysis, style guidelines, logging, monitoring, performance testing, etc. Vague request as I'm basically trying to find out what I don't know.",1528225866.0
BitgateMobile,"Scattersphere 0.2.0 is under way with Spark support.  Currently has rudimentary Spark support, with the ability to submit jobs and collect results.  As I write this, I am currently in the process of converting a ""real world test"" to a Spark implementation which is about 80% complete.

Could use some extra eyes on the project, would love additional feedback, and more ideas on what to do with it.  This project is great fun, and a way for me to experiment with writing a public API.  I hope someone out there finds it useful.

Check out the project [here](https://www.github.com/KenSuenobu/scattersphere)

Thanks!",1528161301.0
Philluminati,"I need to upgrade a project from play 2.3 to Play 2.6. The switch gets rid of the old global play application so it’s a pretty big change. Because the mongo drivers are unsupported as well we decided to move some of the data to an external system at the same time. So I wrote a library using Play standalone ws client.

Long story short, play 2.3 and he standalone ws client don’t play nicely together. I was able to shade the standalone ws client library to make everything appear to work, but I then ran into issues with Akka versions later on. 

Long story short. Keep your apps up to date!",1528391599.0
smortimer003,Going to play around with [scala-parser-combinators](https://github.com/scala/scala-parser-combinators) due to a possible use case for them at work. Hoping it could lead to something interesting! ,1528435638.0
maciej-adamiak,"An asynchronous [Twitch Scala client](https://github.com/maciej-adamiak/twitch-scala-sdk). I am working on a data science project. I would like to use Twitch game and stream data during analysis. Unfortunately, I did not find a suitable library written in Scala and simultaneously supporting the newest API version (helix), so I've decided to write my own.

I would be grateful for your feedback.

Thanks!",1528701588.0
coyle_trydan,"Mascoma Bank | Senior Software Developer | Windsor, Vermont, USA | Onsite | Full time

We're looking to expand our small internal development team at Mascoma Bank. We build software to support business functions within the bank, primarily in Python and Scala (although we're currently ramping up with Scala \- we'd love to add more Scala experience to the team). You can apply at [mascomabank.com/careers](https://www.mascomabank.com/careers).

*Requirements:*

* Experience consistent with 5\+ years of professional software development
* Strong understanding of software development concepts and practices
* Strong understanding of how design decisions may impact performance, security, scalability, and maintainability of an application
* Strong understanding of networking concepts
* Expert familiarity with Python and/or Scala
* Experience with front\-end client application development
* Experience with REST API development
* Experience writing automated tests
* Ability to take general functionality requirements and use experience, best practices, and clarifying questions to implement them effectively in code
* Passion for learning new things and applying them to create a better product

As a Certified B Corporation, our vision is to be a force for positive change for our customers, communities, and employees.

Mascoma Bank is an Affirmative Action and Equal Opportunity Employer, M/F/D/V

Feel free to message me (I'm the hiring manager), or email [careers@mascomabank.com](/)",1528399767.0
Maravedis,"Teads.tv | Backend Software Engineer | Montpelliers, France | Onsite | Full time

I'm not directly affiliated with HR in my company, I just relay the offer in case some French scala dev is on the lookout.

I currently work there and I'm loving it. 

[Job Description](https://boards.greenhouse.io/teads/jobs/188474?gh_jid=188474)

You can apply under the job description directly, or you can send me the CV + CL that I'll forward to the relevant persons.",1528126918.0
plug1plug2,"BAMTECH Media | Scala Engineers at all levels (Jun, Mid, SNR) | New York, Manchester (UK), London and remote (US).

BAMTECH Media is a leader in building DTC streaming platforms for Live and On-Demand customers, and with Disney backing the business in the summer of 2017, we have already launched ESPN+ and EuroSport, as well as commencing work on the marque Disney SVOD, due for release in 2019.

If you're interested, either visit the careers page https://www.bamtechmedia.com/careers or contact me on sam.facer@bamtechmedia.com",1528127950.0
rbrinda,"Etsy, Inc. | Senior Engineer for Search / ML Infrastructure engineering | San Francisco, CA, USA | Onsite | Full\-time

I am the hiring manager at Etsy for Search/ML Infrastructure Engineering teams. Looking for Scala experts with experience building large scale distributed systems.

You can apply [here](https://www.etsy.com/careers/job/34772b87-55db-4c77-a6ed-7899ec2f2701) or send me your resume or Linkedin profile for review.",1528219070.0
adamlondero,"EveryLIFE Technologies | Scala Developer | Farnborough, UK | Onsite | Full Time

I'm the Head of Engineering at a small, lean and agile healthcare startup. Our vision is to continuously improve the quality of care given to people by making care more visible, consistent and reducing the possibility of mistakes in administering care by maintaining a single view of truth.

In my experience it's rare to find a small, disrupting company outside of London, who operate with agility at its core, and are brave to use new technologies to best deliver value. 
As a Scala developer, you'd be working as part of a team developing the APIs that drive our mobile applications as develop the web front-end. You can find more details on our careers page here https://www.everylifetechnologies.com/about-us/careers/full-stack-developer/

If you're interested either apply directly to careers@everylifetechnologies.com or connect with me on LinkedIn and we can talk more https://www.linkedin.com/in/adamlondero/.",1528298005.0
thinkingincode,"Skedulo| Senior Backend Engineer | Brisbane, Australia | ONSITE | Full Time

Skedulo is the leading mobile workforce scheduling platform. We help companies around the world transform the way they manage and schedule their mobile workforce teams.

We are looking for a Senior Backend Engineer with the following skills:

* 3+ years experience in backend development
* Ideally experienced with one or more of the following:
  * Scala
  * Functional programming languages.
  * Java 8 and the latest features and functionality
  * Other open source object-oriented languages, with aptitude and interest in Scala 
* Solid computer science fundamentals in data structures, design patterns, and ideally complex scheduling and optimization algorithms.
* Experience with cloud hosting (AWS, Azure or Google Cloud)
* Understands the importance of contributing to the CI/CD pipeline and automation
* Full stack experience in either mobile (ideally C#/Xamarin) or web (ideally React/Typescript) would also be beneficial

Full Position Description:

https://hire.withgoogle.com/public/jobs/skedulocom/view/P_AAAAAACAAADNo85h2ncrA_

Contact:

russelladcock@skedulo.com",1528333244.0
alokahuja,"Apple | Backend Software Engineer | Cupertino, CA | Onsite | Full time

I'm the hiring manager. https://g.co/kgs/RAD643

All levels of Scala experience are welcome. Remote is not an option at this time.

Feel free to send me your CV/LinkedIn Profile. 

",1528386181.0
jamuth,"Consistec GmbH | Scala Developer | FULL-TIME | Saarbrücken, DE | ON-SITE

Interested in developing a scalable analysis system for network data? We work with a high-performance multithreaded environment which can be distributed over several systems. Different NoSQL databases help us to save the data depending on the scaling and to make it available for further analysis over as long a period as possible. A central REST-API connects our systems with each other and offers a uniform interface to the outside. For further analysis we use our dynamic web UI which can be configured individually. We use the following technologies, among others:

* Akka & Kafka
* ElasticSearch & InfluxDB
* Scala & Play Framework
* Typescript & React

Apply at bewerbung@consistec.de

http://www.consistec.de/de/stellenangebote.html",1528695697.0
Jasper-M,This should be somewhere very prominent in the main cats(-effect) docs.,1528101243.0
nambitable,What is this symbol `*>`?,1528106292.0
arbitrarycivilian,Serious question: why is this useful? How does it improve the readability and maintainability of my code?,1528142299.0
somethingconcon,"Alex, great work to you and the cats\-effect contributors.",1528037977.0
SystemFw,"This is a fantastic release :)

From the point of view of fs2, we pushed important abstractions down (Ref, Deferred and Semaphore) so that people can use them without depending on a streaming library, and the changes to Concurrent mean that the fs2 api will soon get rid of ExecutionContext and Effect in most places.",1528060664.0
oleg-py,"I'm very excited about this release. In my eyes, addition of things like `Ref` and `IOApp` greatly increases merit of `cats-effect` to application developers, shifting it from being just ""slf4j for effect types"".

This has actually motivated me to contributing to cats-effect. And together with /u/alexelcu's amazing work on `cats.effect.IO` cancelability and performance, and changes I pushed to its API (no longer needing to `IO.shift` everywhere for parallelism, mostly), it is also well-suited for the apps where I don't need the full power of Monix.

Unfortunately, we'll have to wait for a bit for ecosystem to catch up, since it's a bincompat breaking release, but I know there's already work being done on it and some exciting changes are coming in as well. (SPOILER: fs2 will be way less reliant on `Effect` and `ExecutionContext` :)",1528041530.0
IndiscriminateCoding,Very interesting. How does it compares to kafka's [MirrorMaker](https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/tools/MirrorMaker.scala)?,1528129767.0
talst,Great stuff!,1528154893.0
bigkahuna1uk,This seems to be out of date. Spring dropped Scala support years ago.,1527879327.0
vivri,"DI frameworks were created to compensate for the deficiencies of Java, the language, and constitute a run-time, ""stringly-typed"" interpreter on top of the compiled language. 

It's not uncommon for a Spring project to just be dangling pieces of ""bean"" and imperative code, wired together and ""enriched"" via annotations.

Shudder.",1528201789.0
,[deleted],1527990020.0
CremboC,"Why not just using implicits for dependency injection? I don’t see anything benefit of these libraries, IMO they only make sense in Java world...",1527929405.0
sidragon,"MacWire, hands down.",1527959628.0
strartem,No idea why people bring Java DI approach into Scala if it has powerful mixin composition. Just using cake pattern. ,1528227093.0
cibobecker,"It's all on a case by case basis, no hard yes or no. 
",1527876806.0
nutsack_dot_com,Is remote work a possibility?  I live in northern New England but work remotely for a place in Cambridge now.,1527885918.0
chetanbhasin,"These methods are useful if you're willing to deal with a couple of things, such as Graal, which sometimes show regression against their conventional alternatives.
However, if you can cut it by using tools like Bloop and Coursier or build tools like Mill then that should already give you very reasonable speed-ups.",1527853074.0
jvican,"I'm glad to see Bloop mentioned! The speedups you get from using bloop do not only come from the fact that you keep hot compilers around, but they are also architectural: we see around 20% better compilation performance in projects like guardian/frontend, apache/spark, sbt/sbt, etc than compiling these projects with sbt.

We're working on a new design of the compilation pipeline that will yield higher speedups than the ones we already have. I'll be presenting this work in Scaladays New York and gave a sneak peek in Scaladays Berlin two weeks ago.",1528095990.0
silentraquo,"""a few seconds"" is pretty much as good as it gets with Scala.js.

In my opinion if you want to be happy in Scala.js you have to choose libraries which let you write correct-at-compile-time code. Needing to check your code in the browser every 5 seconds is a Javascript developer's curse. If you use Scala.js and you still have to do that, you're not really getting the benefits of Scala.js.

As a corollary, you should probably keep CSS generation outside of the Scala world – feed LESS or SASS files to webpack for much faster hot reload instead of using ScalaCSS or inline styles. I'm saying this because those tools guarantee syntatic correctness of CSS, which is most assuredly not enough for what you actually care about with CSS – visual correctness.

And really, if all you need are shared models, there are plenty of tools that let you define a model in a common format and generate Scala case classes and Typescript classes / interfaces out of that.
",1527875218.0
dtechnology,"At my project we keep the backend interfaces in sync with our home-grown [scala-tsi](https://github.com/code-star/scala-tsi), which exports Scala types to Typescript interfaces on compile.

This keeps things in sync while being unobtrusive in the front-end toolchain",1527850509.0
Daxten,"you are not missing anything, scala.js workflow is in that case slower then ts",1527851035.0
tom91136,"4 seconds sounds quite good actually. 

So after using Scala for general programming for almost a full year, I finally got time to look into ScalaJS. The experience was OK, the compilation time was slow as you described; it's even slower for me as I'm using cats and shapeless for better type safety.

I tried to cut down the feedback time by simply relying on the compiler in that if it compiles, it probably works and will look alright. I'm using [Bindings.scala](https://github.com/ThoughtWorksInc/Binding.scala) for the presentation and in almost all cases, things just work. 
If you're interested, the project I wrote is [here](https://github.com/tom91136/jmh-view/) if you want to take a look .

",1527851380.0
continuational,"Implicits and macros may be the culprit here - they can slow down compilation time significantly.

Maybe you'd like to try [React4s](http://www.react4s.org/) (shameless plug)? It's tiny and uses neither implicits nor macros. It should be pretty quick to incrementally compile React4s projects with sbt ~fastOptJS.

Edit: Some numbers from my modest laptop:

    7. Waiting for source changes... (press enter to interrupt)
    [info] Compiling 1 Scala source to [snipped] ...
    [info] Done compiling.
    [info] Fast optimizing [snipped]react4s-samples-fastopt.js
    [success] Total time: 3 s, completed Jun 1, 2018 7:42:52 PM

This is when changing an inline syle in the [react4s.org](https://github.com/Ahnfelt/react4s-samples) sample site, which is itself a React4s project.
",1527865207.0
flylikeabanana,"Are you using [sbt-revolver](https://github.com/spray/sbt-revolver)? It helped my workflow significantly, but it's still not as fast as a js setup. I've found that leveraging the compiler - i.e. using more expressive types - helps a lot because I'm not waiting on the js to render, I'm spending lots of time lining up my types comparatively.",1527869626.0
Aappddeevv,"I found the hot reload compile/bundle under the web pack dev server to take longer than the scala compile.  Across several areas, the compile or bundle time varied quite a bit depending in the mix of ts or scala involved.  I found the compile cycle due to twidddling to be less of the overall cost of development since I did less twiddling and made fewer mistakes so my productivity went up.  But, I had to invest the time before my scala js productivity was higher...did not happen quickly until I learned new patterns.  I use a css-in-js solution from fabric that is exposed in scala and with that I also had an improvement in css productivity.  The style funcs are in separate files with little if any compiler magic involved so scala compilation time is smaller.  I’m the author of a reason react based scala js react facade.

With a robust UI 3rd party framework, once my components became css-in-js driven and the components more self contained, I seemed to twiddle less on the UI side. I also found that doing some small twiddling in the browser gave me the css that I needed to change pretty quickly at that point.

If your key measure is twiddling time and you cannot put in place some other things that would offset twiddle time and your front end does mostly presentation of server provided/computed results, I would not change.",1528077781.0
beep_dog,"I've found [Elm](http://www.elm-lang.org/), and I love it. Elm is purely functional, and has a strong type system. It follows the react style, in that it inspired the react style. 

So far, it's my favorite frontend development language. Easy to get started with, easy to refactor, because the compiler will tell you when you did it wrong.",1527949536.0
silentraquo,Scala.js happened and has grown into a mature platform with a good variety of libraries available from both JS and Scala land. Building a full stack Scala app is a real option we have now.,1527833814.0
,"If you're interested in a functional approach I highly recommend the Typelevel setup with cats, circe, http4s, and fs2. Residents of the related gitter channels are always happy to answer questions.",1527799720.0
amazedballer,"Writing for the Lightbend stack, others can tell you about Monix / http4s.  I don't see anything in here that points to FP specifically, though.

Play is now built on top of akka\-http by default, and uses Akka throughout.  It supports streaming through Akka Streams.  Kafka integration is done through Reactive Kafka, which is again Akka Streaming based.  You can add and remove publish / subscribe to a stream dynamically through MergeHub/BroadcastHub.  Play does support Macwire, and it works great as a [compile time DI solution](http://di-in-scala.github.io/).

* [https://github.com/playframework/play\-scala\-rest\-api\-example](https://github.com/playframework/play-scala-rest-api-example)
* [https://github.com/playframework/play\-scala\-macwire\-di\-example](https://github.com/playframework/play-scala-macwire-di-example)
* [https://github.com/playframework/play\-scala\-chatroom\-example/](https://github.com/playframework/play-scala-chatroom-example/)
* [https://doc.akka.io/docs/akka\-stream\-kafka/current/home.html](https://doc.akka.io/docs/akka-stream-kafka/current/home.html)

So you'd set up a controller to write into the Akka Streams Flow, which would go into Reactive Kafka, get published, and then provide an HTTP result.   The data store is something you can manage through [akka distributed data](https://doc.akka.io/docs/akka/2.5.4/scala/distributed-data.html) if you want to get fancy \-\- you can set up multiple Play servers to load balance, and then set up them up as an Akka cluster.  Otherwise, you can set up [Akka Persistence with Kafka](https://github.com/krasserm/akka-persistence-kafka).",1527815374.0
j3pl,"Not Scala, but for the caching side of things definitely take a look at Apache Ignite. It's Java, but I've used it in multiple Scala projects with great results. It has a lot of power under the hood and goes way beyond (distributed) caching.",1527835138.0
acjohnson55,"I second u/amazedballer's recommendation. Especially when it comes to what you've mentioned as your previous experience with the ecosystem. You would be right at home, and likely appreciative of all the development in all of those techs. With one other person who had no prior Scala experience, I successfully launched a project similar to what you're describing in about 6 months and it was a big win for my company. That's not to say anything bad about going the functional route. I'm just enthusiastic because my experience went really well.",1527827599.0
plokhotnyuk,"Just wondering how ""diff"" objects will work with eventually consistency and other chaos...



My 2 cents on lib recommendations:

1) Scalacheck or something other from the quickcheck family.

2) If you are going to scale efficiently then consider using of Blaze or Colossus instead of http4s or akka-http: 
https://www.techempower.com/benchmarks/previews/round16/#section=data-r16&hw=ph&test=json

3) These days, for serialization you can pick an efficient JSON parser/serializer which competes on par with best _binary_ serializers for Java and Scala: https://github.com/dkomanov/scala-serialization/pull/8
",1527861722.0
ipeesometime,FWIW I have found scalatest easier to use than specs2. I spend less time reading the docs and more time writing tests.,1527860472.0
joshlemer,">It isn't clear to me how to deal with multiple Options in a nice way.  
  
You could do it like this:

      override def degf: Int = {
        (cluster, strada) match {
          case (None, None) => df.count().toInt - 1
          case (Some(c), None) => df.select(c).distinct().count().toInt - 1
          case (None, Some(s)) => df.count().toInt - df.select(s).distinct().count().toInt
          case (Some(c), Some(s)) => df.groupBy(s).agg(countDistinct(c).alias(""total"")).agg(sum(""total"")).head().getLong(0).toInt - df.select(s).distinct().count().toInt
        }",1527791885.0
jonhanson,"The TsDesign methods are selecting behaviour based on the Strata and cluster members, however these are fixed at construction so it seems uneccessarily complicated and inefficient as it stands.

I would be tempted to replace it with a type that's the union of 4 case classes, one for each None/Some combination of strata and cluster. Then the methods don't need the big if/then/else expression.",1527804589.0
Judheg,"Try not to repeat similar pattern, extract method if you could. Just by relying on IntellijIdea without knowing what you're doing I found this pattern repeated 17 times and that it actually can be extracted as method within surveyDesign trait.

    private def thisIsRepeated17Times(est: Column): DataFrame = {
        df.withColumn(pweight.toString(), when(est.isNotNull, pweight).otherwise(0))
        .withColumn(est.toString(), when(est.isNotNull, est).otherwise(0))
    }
",1527864275.0
depleteduraniumftw,"All of those if/else could be match:

    if (strata.isEmpty && cluster.isEmpty)

Could be:

    (strata, cluster) match {
        case (Some(s), Some(c)) =>
        case (Some(s), None)) =>
        case (None, Some(c)) =>
        case (None, None) =>
    }

You could also extract out all that repetition to a function.",1527794357.0
Falmarri,"`val EventListnerPoolOfActors = ActorSystem().actorOf`

Why are you creating a new actorsystem inside your actor?",1527823744.0
legiominerva,"Looks like the *ReceivedJobStart()* message is sent twice to the *EventJob* actor (according to code). Once during *preStart()* and once by scheduler. 

Also, do you wait for *doWork()* future to complete anywhere?",1527769703.0
Sir_Stoke,Apparently it's because of [trampolining](https://github.com/typelevel/cats/issues/122#issuecomment-73435779) capabilities,1527774804.0
mrt181,The website is broken when visited through Android's Firefox,1527697920.0
m50d,"Does the test result tell you which cases violated the laws?

Maybe you could explain what you're doing with the eval/defer stuff? I don't really get it. Isn't your `foldLeft` actually just doing a `foldRight`?

(Can't view gists where I am, which is making it a bit fiddly to be specific)",1527669228.0
fromscalatohaskell,I dont know who wins but I know who loses. ,1527609693.0
haderp,"I do rather like the Camel API, though I agree about the issues of type safety and more advanced concurrency. Also, the matter of the ""magic"" that happens with the Exchange object is kind of annoying when you are first learning the API.

However, I will say I would rather see Camel get improved and support the more advanced features rather adopting a new framework. Perhaps Camel could learn quite a bit from Alpakka, but I think the Camel userbase and community proves it has more staying power.

*edit just changed some grammar and clarified a few thoughts. I don't think anyone had time to vote on it yet.",1528248234.0
DanielShuy,How I wish this article existed before I started learning SBT! I had to learn all these the hard way by digging into the SBT source code.,1527653100.0
domlebo70,Great work!,1527660179.0
haderp,This is a very practical and well thought out article. This should be sbt 101 for anyone starting off on a multi-module project. I wish I'd seen all this when I was starting off.,1528247368.0
chuwy24,"Very nice. I always struggled to understand what so special about `Kleisli`. In the end you can do all same stuff with `for`-comprehensions. But in fact what `Kleisli` gives us is a ""point-free"" notation, much nicer and we're eliminating one of two hardest problems in programming (which is ""naming things"").",1527617308.0
m0l0ch,"Cool, that was really easy to understand! Thanks!",1527595485.0
fxdz,Thank you for explaining!,1527716407.0
oelang,"I wouldn't draw big conclusions, optimizing compilers are a moving target. It's more interesting to ask the graal developers why certain code patterns are slow & what prevents them from being optimized.

The slowdowns caused by the high cost of polymorphic dispatch on small lambdas (like summation) is being worked on. ",1527604665.0
fromscalatohaskell,"Don't put managed state in your objects. Create config in you app main and pass it around (that would be one option). Objects are for constants and stateless functions.

Your approach does not compose well, as you can already see.",1527578142.0
domlebo70,Great work,1527543208.0
commithook,"Looks neat! 

Where is the artfact published? I can't seem to find it on maven central.",1527573910.0
Shelenio,"Hi! We have a new project about making a control panel to monitor the infrastructure of the client \(server health, response times, put servers up and down, etc\).

We plan to do the back\-end in scala and the front\-end with scala\-play.

Do you know any graphical libraries that can come at hand? Thanks!",1528100410.0
BitgateMobile,"Couple of questions regarding SparkConf/SparkContext lifetimes.

1. How long do SparkContext/SparkConf objects live?  Are there timeouts, and if so, is there a way to ping/refresh the objects so they stay live?

2. Can multiple SparkContext objects be used at the same time?

Thanks!",1527565570.0
Szulcu,"I have a question about tagless final encoding. If I understand correctly \(and correct me if I'm wrong\), its main purpose is to abstract over the effect type used throughout our application. But what are the benefits of using that style, if my effect usually ends up being a Future/Task, and I don't care about the boilerplate related to using *Future.successful\(...\)* or Task.now\(...\) in tests \(i.e. I don't see that much of a value in being able to use the Id Monad\)?",1527632798.0
BitgateMobile,I've looked all over the map for interoperability between Scala 2.11 and 2.12 with Spark.  Can anyone offer insight?,1528056571.0
mbo1992,"There's probably a more general way to frame this, but here goes: Say I have an actor system with 4 instances of an actor, all running within the same service, running in debug under IntelliJ. Is there any way I can separate the logs from these 4 instances into 4 different terminals, instead of having them all in the same page mixed together?",1528408577.0
,"These days I'm thinking that the asynchronous way of coding \(e.g. Future, map, flatMap\) is counter\-intuitive and can easily get complex. I understand its benefit \(e.g. performance\), and I hope there's a better of writing asynchronous code.

The code should look like:

    a = doA();
    doB(a);

As opposed to

    doA().flatMap { a => doB(a) }

Anyone is thinking the same thing? There should be a better way, but I can't even come up with one...",1528225001.0
ArcanFire,"For the life of me, I can't understand how map is written.

.map\(x =\> x \* 2\)

I know that this example will iterate over a list and multiply each element by 2... but why is it x =\> x? \(I know it can also be written as .map\(\_\*2\)

The specific example I have is:

.map\(blahblah =\> *ColumnNum*\(game.indexOf\(blahblah\)\)

Why can I use blahblah, why can I use anything in those places?",1527817377.0
viso_laci,"Hi, what is a good alternative for scala cats OptionT in terms of performance (memory) ? Last few days i did read about some alternatives in scalaz that look cool but i dont wish to migrate right now.
thx",1527955702.0
vitalijzad,Has anyone used Scalding for Hadoop instead of Spark? How did it go? Are there real advantages ove Spark?,1528647896.0
domlebo70,"Does anyone have a Scala and Sbt docker image? One that preferably has SBT actually installed, and not one where it's just the install script.",1528702571.0
,[deleted],1528714568.0
VIOLETSTETPEDDAR,"Found the answer: This is currently not possible with Lagom unfortunately.  
  
[See issue here](https://github.com/lagom/lagom/issues/1353) ",1527511491.0
v_krishna,These are all pretty small datasets but would be interesting to see spark mllib compared as well. I think you'd have to do job time against an already running cluster though or else spark startup time would definitely kill you.,1527461818.0
vitalijzad,Here: [https://github.com/lauris/awesome\-scala](https://github.com/lauris/awesome-scala),1527449674.0
raghar,If you are interested in libraries in general and not only framework then look at https://index.scala-lang.org/,1527450643.0
agilesteel,"In the previous few videos we started exploring the object\-oriented world, but maybe we should not swim too far. In this video we discuss issues that arise from programming language dependent interpretations of object\-orientation. This is the first of two videos in this series, which concentrates on issues with comparing two computational objects for equality and provides an outlook to the future of Scala.",1527422684.0
DanielShuy,"Thanks for linking to the [Multiversal Equality](http://dotty.epfl.ch/docs/reference/multiversal-equality.html) in Dotty, wasn't aware of that before watching this video, really looking forward to it.

Also looking forward to your next video.",1527485713.0
fromscalatohaskell,Straight out of upwork,1527439723.0
GuyWithLag,"Not wanting to sound snarky, but you should read the sidebar. Also, /r/lostredditors...

Beyond that, there is no concrete question in your post.",1527399258.0
-jp-,"I think both you and your coworkers are right. Whatever makes the code clearest is what you should do, and if that does have performance implications you can address them whenever that actually becomes a problem.

The way I think of it, performance is just another feature, which means you can weigh it against any other feature and decide where you want to spend your effort.",1527356696.0
Mimshot,"I decided to run a test. I built this silly test class:



    object Test {
      def fun1(a: Int): Int = {
        def fun1Impl(x: Int): Int = x + 1
        fun1Impl(a)
      }

      private[this] def fun2Impl(x: Int): Int = x + 1
      def fun2(a: Int): Int = fun2Impl(a)
    }

And disassembled it:

    Compiled from ""Test.scala""
    public final class Test$ {
      public static Test$ MODULE$;

      public static {};
        Code:
           0: new           #2                  // class Test$
           3: invokespecial #12                 // Method ""<init>"":()V
           6: return

      public int fun1(int);
        Code:
           0: iload_1
           1: invokestatic  #18                 // Method fun1Impl$1:(I)I
           4: ireturn

      private int fun2Impl(int);
        Code:
           0: iload_1
           1: iconst_1
           2: iadd
           3: ireturn

      public int fun2(int);
        Code:
           0: aload_0
           1: iload_1
           2: invokespecial #25                 // Method fun2Impl:(I)I
           5: ireturn

      private static final int fun1Impl$1(int);
        Code:
           0: iload_0
           1: iconst_1
           2: iadd
           3: ireturn

      private Test$();
        Code:
           0: aload_0
           1: invokespecial #26                 // Method java/lang/Object.""<init>"":()V
           4: aload_0
           5: putstatic     #28                 // Field MODULE$:LTest$;
           8: return
    }

At least with this toy example, the nested function should be minutely more performant. It doesn't have the extra `aload`. Is that because it's reusing the caller's stack frame? I'm not sure.",1527356977.0
Milyardo,"local functions, if you're not assigning them to `val`s should have no difference in performance. they encoding of them in bytecode is exactly the same. ",1527372937.0
Jasper-M,"What do you mean with ""unwrapping those functions and using good variable names""? I don't really see how using good variable names is the opposite of using local functions.

If you are talking about local defs, I am pretty sure they are compiled to private ~~instance~~ static methods, so there should be no effect on performance.",1527356193.0
MarrusAstarte,"Moving code blocks into named functions has the effect of documenting the intent of that code block, which loose code does not, unless you explicitly add comments.

I prefer my code to express it's intention to human readers through variable and function names rather than comments (when practical), so I would probably side with your coworkers.

How about showing us an example that illustrates your case?

As far as performance considerations, modern compilers already inline functions and unroll loops, etc. when they believe it will help performance, so you won't be able to use performance considerations to support your preference.",1527532622.0
Philluminati,"Don’t use Scala and performance in the same sentence.

When you combine difficult to spot implicit class conversations, maps that duplicate data structures and just the overhead of unboxing Options, you realise that asking questions like “is there a performance hit with feature X” is always a losing argument.  You’ve been slapped in the face with a hundred performance-impacting cocks. You can’t justify not taking one more to the chin.

People who say that’s bad code because of the performance impact are writing programs in the wrong language here.",1527405551.0
fxdz,"Looks really cool! I'm wondering if it helps web developers to integrate with [Outwatch](https://github.com/OutWatch/outwatch) \(and other libraries\), to use Hepek Objects in outwach components and vice versa. These projects are probably also useful: [https://github.com/raquo/scala\-dom\-types](https://github.com/raquo/scala-dom-types) [https://github.com/raquo/scala\-dom\-builder](https://github.com/raquo/scala-dom-builder)",1527713262.0
Milyardo,"Go straight in part 2, part 2 is actually about applying the knowledge learned in part 1 to create a few mini-libraries of your own.",1527277174.0
raghar,"* start pet project
* keep it small
* install ammonite
* embed it to your pet project
* try out new ideas with repl on steroids
* keep reasonable ones in your pet project's code
* don't be afraid to throw out half the shit and rewrite it (because project is small)
* stop listening to advises, learn by trial and error and figure out which level of abstraction sit well with you when you work on something bigger

But seriously just start coding. Cats, Scalaz and Shapeless are godsend but I wouldn't be able to not be annoyed with them when I still had issues with reading the syntax.

Besides, why not finishing reading the book? Worst case you find it useless, put it on shelve and go to underscore books. You don't risk anything other than few evenings ;)",1527292319.0
thetdotbearr,"Personally I stopped after part 1 and went on to read Learn You a Haskell for Great Good and am partway through reading Scala with Cats. I have no doubt that I'd be comfortable now going back to the red book.

Scala with Cats in particular is nice \(and free\) with exercises to practice as you go along, highly recommend it.",1527278505.0
somethingconcon,"This is actually a really great question.  I think that part II as recommended is a MUST.   While doing so take a look at scalaz and cats.  These are the two top FP libraries in Scala.  The red book won’t get you fully prepared to jump right in but the concepts like type classes and data classes are thing you should start to investigate.  The red book walks you through mock impls but here you can start to see how FP is done in the real.

Also highly recommended is to check out the other  Type Level projects. Doobie, http4s, Pureconfig.  These are taking those concepts and applying them to their own domain.  

Good luck and ask as many questions to knowledgeable people as you can!",1527284070.0
Holothuroid,"Scala does not have an enum keyword (yet). 

To create an equivalent make a `sealed trait Foo`. A sealed trait can only be extended by objects and classes in the same file. The compiler can thus check for exhaustiveness.",1527274781.0
yawaramin,"Scala can do exhaustivity checks on:

- sealed trait hierarchies, as the other commenter mentioned
- Java enums. You can just write up some enums in Java, keep them in your project, and use them from Scala",1527280577.0
zzyzzyxx,"The talk claims the new typeclass encoding is ""way better than Odersky's proposal"". While I like the effects of the encoding I saw in the video, what is Odersky proposing and how is this better? I imagine Odersky is proposing language-level changes in Dotty, which should be a good thing, right? The same sentiment is echoed later in the video that better language support is desirable here.",1527197469.0
LPTK,"Interesting. I will finally be able to give my [type-safe metaprogramming](https://github.com/epfldata/squid) types the (generalized) applicative functor instances I always felt they deserved :\^)

	trait Functor[F[_]] {
	  type FromObj[A]
	  type FromCat[A, B]
	  type   ToCat[A, B]
	  def map[A : FromObj, B : FromObj](f: FromCat[A, B]): ToCat[F[A], F[B]]
	}
	def codeIsFunctor[C] = new Functor[Code[?,C]] {
	  type FromObj[A]    = CodeType[A]
	  type FromCat[A, B] = Code[A => B, C]
	  type   ToCat[A, B] = A => B
	  def map[A: CodeType, B: CodeType](f: Code[A => B, C]): Code[A, C] => Code[B, C] =
	    a => code""$f($a)""
	}

I'm not sure what to make of the `ToObj`/`obj` definitions that are shown in the slides as part of the `Functor` definition, though. Are they required? The only sensible thing I could do is to make `ToObj = Option` and have `obj[T]` return the code representation of zero value of `T` if `T` is a primitive type.
",1527245946.0
PoseidonInChains,"This kind of makes me want to learn scalaz. I'm wondering what makes their new IO-monad allegedly so much faster than cats-effects (I think he mentioned this in some other talk), and if cats will catch up.",1527197198.0
Digonne,"In this whirlwind tour, maintainer John A",1527202339.0
gbersac,I'll bet that next underscore's book will be about ScalaJS ! I'd love to read this book.,1527236810.0
q3ert,"With regard to skills on your resume, most of the Scala jobs I see are looking for Spark developers, so it might not be a bad idea to get familiar with the Hadoop ecosystem.",1527024465.0
aphexairlines,"Stripe is probably hiring and they use Scala:

https://github.com/bazelbuild/bazel/wiki/Bazel-Users#stripe",1527025331.0
tetrapede,"I am hiring in Switzerland, don't hesitate to pm me!",1527045894.0
aphexairlines,"Barclays is probably hiring.

https://underscore.io/jobs/2017-11-02-barclays/",1527025391.0
aphexairlines,"Searching for Scala on the website for jobs at the New York Times shows 10 positions:

https://nytimes.wd5.myworkdayjobs.com/Tech
",1527025645.0
estsauver,We’re hiring (Apollo agriculture) and I’d be happy to offer resume feedback.,1527026229.0
pbericcc,"Foursquare is hiring in NYC, SF, and Chicago, and uses Scala as its primary language! https://foursquare.com/careers",1527032916.0
3321thec,"eero is hiring, and we use Scala for our entire cloud environment!",1527036492.0
labyj,"Lucid Software is hiring. We make https://www.lucidchart.com and https://www.lucidpress.com. All of our backend services are in Scala. Frontend is TypeScript, Angular, and WebGL. 

If you're interested in applying, our careers page is here https://www.golucid.co/careers/

Feel free to shoot me a DM as well.",1527036795.0
falkster,"I'm hiring in San Francisco! Small empowered teams building our own financial system, and lots of growth potential.

https://jobs.lever.co/tally/4f6b044f-9110-4d2e-bbb5-ba7cea2700ac
https://www.meettally.com/
",1527037266.0
Sadadar,I’m hiring at Credit Karma. Looking for a couple dozen engineers. Would love experienced scala engineers. Hit me here or matt (at) credit karma (.) com,1527037800.0
geoffjentry,The Broad Institute \([https://www.broadinstitute.org/careers/software\-engineering](https://www.broadinstitute.org/careers/software-engineering)\) frequently is hiring software developers for scala based positions. They come and go and not all software positions are scala based so you do need to read the individual reqs,1527040926.0
aphexairlines,"Here are a bunch of job postings at Amazon citing that they use Scala:

https://www.linkedin.com/jobs/amazon-scala-jobs/?country=gb

https://www.indeed.co.uk/cmp/Amazon.com/jobs?q=scala&l=London%2C+Greater+London

https://www.amazon.jobs/en/search?base_query=scala&loc_query=",1527025253.0
aphexairlines,"Morgan Stanley's always hiring.  Here's evidence of Scala there:

https://www.reddit.com/r/scala/comments/480ral/scala_at_morgan_stanley/

https://www.linkedin.com/jobs/morgan-stanley-scala-jobs/?country=gb",1527025363.0
aphexairlines,"Twitter is probably hiring

https://github.com/twitter?utf8=%E2%9C%93&q=&type=&language=scala",1527025405.0
aphexairlines,"Apple has a number of open job positions.

https://www.quora.com/Does-Apple-use-Scala",1527025481.0
aphexairlines,"The Guardian is known for using scala.  Here's a job listing mentioning it:

https://jobs.theguardian.com/job/6718753/fellowship-programme-2018-digital-development/?LinkSource=PremiumListing",1527025745.0
HAL8990,"Hi somethingconcon I'd recommend checking out [Functional Works](https://functional.works-hub.com/#utm_source=reddit&utm_medium=de&utm_campaign=lukas), they are recommended in the scala jobs section in the right hand column too.  ",1528195156.0
Onedayillsailaway,We are also hiring at Tray.io London. We work to help big clients automate! We have a very talented team of engineers and we're looking for top team players to join us. Hit me up at luciano(at)tray(dot)io or check our open positions here: https://tray.io/jobs,1531403404.0
craigwilsonmusic,Bit late to the party but I'm recruiting Scala devs for a number of interesting opportunities with a couple of my cleints. Anyone interested please drop me a message!,1534760572.0
gbersac,"If new release contain only bug fix, maybe it will be time to go 1.0 ?",1527069769.0
domlebo70,"What exactly does ""competitive"" compensation mean? Can we just talk dollars?",1527038755.0
depleteduraniumftw,Can't see the ad. Post description here.,1527004675.0
volpegabriel,"Remote only if you live in the US.

    We are looking for a highly skilled senior consultant with a proven track record for high quality and impactful delivery. A true craftsman with solid experience using elements of our platform (Java/Scala, Spark, Kafka, Akka - especially Akka Streams, Flink, HDFS, and other Streaming technologies)who also enjoys breaking down tough problems, and enabling clients to deliver critical solutions.

    Our team is fully distributed and we will consider applicants from anywhere in North America!",1527038016.0
simon_o,"Looks like a reasonable improvement over the status quo.

Mixing default parameters and implicits has been considered to be a bad idea in the past though, not sure if this proposal has any impact on the number and severity of interactions and corner cases.",1526995639.0
denisrosset,What's the interplay of that new notation with implicit function types?,1527019656.0
Holothuroid,"I think this is much more sensible than calling `.explicitely`on a function, as Martin Odersky has proposed lately.",1527000981.0
lucid8,"Denoting it with ""?"" looks counterintuitive though. ",1527061084.0
porl,"I'm only a relative novice but I have always found implicits tricky to follow. This makes a lot more sense to me. Obviously I could get used to either given enough time, but just wanted to say that as a relative beginner this all looks logical and simple to learn.",1527032693.0
Isvara,"So if you have two implicit `Int` parameters, how does the complier know what value to use for each one?",1527036128.0
Mimshot,Am I not understanding this right or does there very first example show that this syntax is broken? Doesn't it imply there are two different implicit Ints in scope? How does that resolution work?,1527045433.0
,[deleted],1526983193.0
JoanG38,This is a first draft and probably left some parts unexplained but let me know your thoughts and if you are using Kafka Streams on a Scala code base I'd be really interested to know.,1526947575.0
vitalijzad,"Why should anyone use Kafka Streams if you can use Storm, Samza, Flink, Spark Streaming, and Spring Streams?",1526957690.0
giltig,"Hi,
Great article.
We also use Kafka Streams and Scala 

2 things:
1. How do you handle with user interactions that requires validation feedbacks with cqrs?
Optimistic update won’t cut it because you need to give a server feedback to the user such as adding a user that already exist
2. You put posts as a map with user Id a the key. 
That seems highly inefficient because every time some post will change you won’t be able to update the delta but the entire byte array (the way the map is being serialized and saved to rocksdb)
How did you solve it?",1537201219.0
iodylemma,"I have this sort-of-hobby, helpful-for-work project for writing parsers for XML files. Here's the elevator pitch:

> When dealing with XML files you have to trade off between the convenience and simplicity of loading the whole DOM and querying it, and the memory-safety of dealing with the file as a stream of ""xml events"". [xml-spac](https://github.com/dylemma/xml-spac) gets rid of that tradeoff by adding convenience and simplicity to the stream-based model. It's a wrapper layer around java's ""StAX"" parsing model, letting you write code similar to a DOM query but still not OOM if you try to handle a giant file.

I'm actually very happy with how xml-spac has turned out. I've been making tweaks and upgrades over the past couple years, and replacing some of the old custom-written StAX parsing logic that we had at work with xml-spac-based parsing has actually fixed some bugs that we didn't realize were there!

Over the weekend, I started a concerted effort to bring this same approach to JSON parsing, using Jackson as the underlying stream model. I did a bunch of work splitting the ""core"" spac functionality from the xml-specific code, and making sure I'd be able to reuse the biggest conveniences from ""core"" in the new ""json"" module.

I have high hopes for it!",1526911022.0
justinhj,"I found I was developing these monolithic test beds full of junk while experimenting with pure functional libraries such as Scalaz and Cats. I decided to make a giter8 template that comes with the ones I use most often along with Li Haoyi's Ammonite repl and other sensible default settings. So now I can make a new project in a few seconds to  experiment with a particular library or start something longer term. 

I also added some recommended settings and plugins from sources such as Functional Programming for Mortals.

If this sounds useful to you it's here on github https://github.com/justinhj/fp-starter-pack.g8",1526921780.0
irrational_skeptic,Just started learning scala two or three weeks ago.  Been working through some project euler problems to adjust to some of the functional thinking and get the language under my fingers.  Hoping to roll some spark in eventually and conquer some of the bigger datasets on kaggle.,1526945558.0
estsauver,"I started my Open Pair Programming project about a week ago and have already done 4 sessions with people. It's been really great, I think it's been helpful to others, and I've definitely learned a couple things. I'm super excited to write up some of the results.",1527492224.0
sciss_,"TIOBE is not a serious index, though. Everything beyond the top-10 shows the craziest oscillations. So while it's great news, I'd be cautious.",1526947407.0
PrimozDelux,Coolio ,1526903697.0
TunaBoo,"Sql is a programming language?

That said this is huge. A big community is really important for library support and hiring ease. I think most business should stick to the top 10 or so languages unless they have a compelling use case, but how much it takes to convince me to use a language is a lot different from slot 20 vs 50.",1526914599.0
h2698693,Kotlin worse than Haskell,1526902375.0
denisftw,"Scala has been fluctuating between 13-14 on RedMonk for a couple of years. RedMonk is definitely a more accurate rating than Tiobe, which doesn't really work beyond the top 10, but RedMonk also has some problems. I compared some of the ratings in my article about 2 years ago, and I would say it's still pretty relevant:
http://appliedscala.com/blog/2016/scala-popularity/ ",1527124928.0
Determinant,TIOBE now has Scala at position 27.  If TIOBE can be taken seriously that would mean that Scala has lost half of it's market share (percentage wise) in the last 3 months (which doesn't seem plausible).,1533408997.0
volpegabriel,"Hi, author of `Fs2 Rabbit` (Scala client for RabbitMQ) here. Just wanted to share that a lot of documentation has been added including some advanced examples that popped up in the Gitter channel and the API is getting a lot more stable.",1526896571.0
jtcwang,"Can you format your code so it actually appears in code blocks? It's a bit bit hard to follow without it :/ Paste the code, highlight it, and press the code button in the editor (`<>` icon).

Anyway, I think your problem is that `OFormat`/`OWrites` are typeclasses belonging to the ReactiveMongo library, while `play.api.libs.json.JsObject` is play's JSON type.

[This SO post](https://stackoverflow.com/questions/31142366/no-json-serializer-as-jsobject-found-for-type-play-api-libs-json-jsobject?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa) might help",1526897629.0
franklinwritescode,"Solution was simply to import a JSONDocumentWriter object, see comment below:

[https://stackoverflow.com/questions/31142366/no\-json\-serializer\-as\-jsobject\-found\-for\-type\-play\-api\-libs\-json\-jsobject?utm\_medium=organic&utm\_source=google\_rich\_qa&utm\_campaign=google\_rich\_qa#comment87919287\_31145557](https://stackoverflow.com/questions/31142366/no-json-serializer-as-jsobject-found-for-type-play-api-libs-json-jsobject?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa#comment87919287_31145557)",1526925401.0
eaayoata,You rock!,1526851975.0
ukralibre,Our hero!,1526892451.0
yawaramin,"Just tried it, very cool. The builds really are blazing fast.

Is there any way to lay out the directory structure in a standard way (`src/main/scala/...`, `src/test/scala/...`, etc.)?",1526879345.0
-P-e-t-e-r-,"Wow, this is a great opportunity here. I recently started learning Scala because I'm drawn toward it's type system but I've been finding myself drawn toward the functional aspects as I go. I don't know Scalaz, and I'm not sure what most of the projects are doing (let alone _improving_), so I'll take a thorough look through the list of projects before signing up :)",1526860151.0
acehack,"This looks like a great idea.
One concern: Is there a reason you are asking for a Twitter handle but not a Github handle? Isn't Github/Gitlab/Bitbucket much more relevant here?",1526847428.0
freechoice,"Such great oportunity, thank you! I suppose we will get some more information after 5/25 (if one has decided to participate)? Some confirmation email would be great!",1526895013.0
zzyzzyxx,"Man, I'd love to do this, especially as a lead. Going to conferences, doing design, and working with you would be great. Sadly I'm just not sure I have the time to spare and wouldn't want to commit to something I can't finish :\

I will think on this the next few days. Maybe I can convince myself to give it a go.",1526855173.0
chetanbhasin,"This is a great opportunity for someone interested in learning more about FP with Scala.

Just out of curiosity, what's the motivation for this?",1526988571.0
somethingconcon,Just look at that beautiful list of projects coming to scalaz!!! ,1526877946.0
heraldryaq,"Your videos are super cool sir...The way you explain each concepts deserve a big round of applause.﻿

",1526858655.0
agilesteel,"In this video we will learn about the majority of use cases for traits \- interfaces on steroids. We will learn how to add functionality to existing classes, even the ones whose code we cannot access! We will learn how to modify behavior with the ""Stackable modifications"" pattern, which can also be used to intercept behavior. Most importantly we will learn about linearization \- a solution for the issues which commonly arise with multiple inheritance and diamonds.",1526808810.0
btmc,"You might look into Anorm if you haven’t already. It’s Play Framework’s SQL library, essentially just a wrapper over JDBC that lets you write plain SQL in your Scala code by using string interpolation to properly escape named parameters.

The justification for it is much like what you describe:

> SQL is already the best DSL for accessing relational databases. We don’t need to invent something new. Moreover the SQL syntax and features can differ from one database vendor to another.

And it’s a stand-alone library, so you don’t have to pull in all of Play to use it. ",1526821426.0
somethingconcon,Forgive my psuedo code.  If it's confusing I'll try to fix it...trying to express the simple stuff so the idea might take more shape for people not exactly sure what I am talking about.  Something I think I'm being super clear and I'm really not. Sorry.,1526800712.0
Ymatigoosa,"First of all: select is not equivalent for filter. Select in sql performs *mapping* from one set to another so fp quivalent will be the map. Zip is also not eq to join. Its usually called lookup or smth.

As for idea i think it is very ambitious and many scientists tried to do that. For example C# + Entity Framework. They offer sql-like syntax for collection traversal and sql queries but there is defferent interfaces for inmemory collection and external-database collections, so methods s are slightly different for them (and its kinda limited for sql collections so you have to switch to plain sql for complex queries)

if you are looking for a simple scala persistence libs you should have a look at http://slick.lightbend.com/ or http://getquill.io/
I think none or them have an ability to join collection from dirrerent data sources. But they both at least can deterime which actions must be performed as sql queries, and which must be done inmemory. (for exaple if you want to apply some fuction to table row, it will be applied in memory and will not produce an not-supported-in-sql-exeption)

If you are willing to try you idea anyway i can suggest have a look at free monad / Typed Tagless Final Interpreters theory to be able to construct abscruct syntax trees from your syntax and then pass it to some interpreter which will run is agains appropriate data targets.",1526810626.0
Philluminati,I like Scala more than any of typed language but some of the features are really painful things that only exist to confuse. Like it’s really difficult to mock a function whose type in an anonymous inner classes type. Classes inside other classes shouldn’t be possible.,1526886206.0
franklinwritescode,"Questions & comments:

Are you using IntelliJ Community? Or the professional edition? If you're like me, your company pays for a lot of fancy tools like IntelliJ Professional. A lot of the cool features of IntelliJ like code desugaring and automated type insertions/disambiguation is amazing. But I worry about my productivity with Scala if those features were to go away. I learned to program using Python and VIM so needless to say I don't like my reliance on a lot of the IntelliJ magic.

>I would say the biggest hurdle is learning FP. Once you know say Haskell \(and you have already learned Java\), Scala isn't that hard. My first object oriented programming language took six months to learn. It makes sense for someone to take a good chunk of time to learn their first functional programming language as well.

Also yes. Totally agree that FP is the biggest hurdle. \(Although you don't have to learn Haskell if you want to pick up Scala.\)  I wanted to do everything FP for about 4 months before I realized, as you said, that sometimes mutable state is the way to go. But Scala does give you the option of never using mutable vars again, if you want it.",1526862724.0
yawaramin,"These are indeed pretty good reasons why Scala rocks. One small thing to note, explicitly annotating the type doesn’t mean the compiler skips inferring the type. In fact it still goes ahead with the inference and then doubles back to check the annotated type against the inferred type. You can check this yourself by annotating with a wrong type, e.g.:

    val x: Int = ""Hello""",1526879669.0
acjohnson55,"Sounds like you made it to the other side of the mountain and into the valley of success :)

It seems like most people who stick with it long enough eventually do. Although they may eventually end up on the far side of the valley where some of those inconsistencies and limitations live.",1527008017.0
aporetical,"Yes:

    class Person(implicit val name: String, val age: Int)
    implicit val n : String = ""aporetical""
    implicit val a : Int = 28
    
    scala> (new Person).age
    
    res2: Int = 28",1526798618.0
royandrew,I believe every arg in this case becomes implicit.,1526784314.0
acjohnson55,"To rephrase what everyone else has said, the `implicit` keyword applies to an entire parameter list, rather than to an individual parameter. That's a little confusing, but I can't think of a syntax that would accomplish this, while still making it clear that the parameter list works just as well with explicit arguments provided.",1526911516.0
Philluminati,Everything inside the brackets becomes implicit.,1526886252.0
SubMachineGhost,"Mods, can we please have a sticky thread where people can offer or ask for pair programming sessions ? 

For a while now i was thinking about contacting some active members of the community to ask if they can do a pair session with me or mentor me, but my shyness got in the way.

I already sent a request to Earl, and i would love to send you one, but i am in Europe so finding an hour when we're both free and awake would be a challenge, but thank you for this for the community!",1526715296.0
curious_fatbastard,OP you are ducking awesome for doing this.,1526726137.0
kpws,[it's a trap](https://www.reddit.com/user/yala2/posts/),1526731919.0
BitgateMobile,"Would love to hear feedback as to whether or not people find this useful.  It's meant to be lightweight, simple, and easy to use.  A roadmap will be published in the Wiki soon, as there are a lot of ideas that I have for the project moving forward.

If you find this project useful, and want to contribute, by all means, please do!",1526695197.0
BitgateMobile,"Just released 0.0.3 - includes a few changes to the API and the Wiki.  More to come soon!

EDIT: 0.0.3 was released a day after 0.0.2.  Major change to the API in regards to creating a new Task.  Check it out!  0.1.0 branch will be very creative - got lots of plans for this project!",1526778248.0
JoanG38,"Pretty close to what we've done with Orchestra:
https://drivetribe.github.io/orchestra/",1526897664.0
Storini,Really bad sound :\(,1526672469.0
acehack,"This sounds like a really nice and well-motivated idea!

I was thinking I could write blog articles about some of this stuff to achieve a similar goal. For instance, a simple way to setup your first akka-http web service. Although your idea sounds much more helpful in real terms.",1526653467.0
Thatnoobagain,"Care to elaborate on the details of the startup, why you went with Scala, and how it integrates with ML? By the way, that's a really nice initiative.",1526673734.0
,The concept of an online Scala Genius Bar is interesting. The Earl of One could be the beginning of something big.,1526688602.0
,"What's your experience? In my opinion pair programming is only useful when the two programmers are somewhat evenly matched on skills. If you get paired with someone WAY more experienced than you, they'll become annoyed and it'll be a bad experience for you. If you're more experienced than the other, you won't learn much and may actually find the whole thing to be a waste of time.

Is your goal actually to pair program (i.e. produce something AND learn) or is it strictly a learning exercise?",1526656390.0
somethingconcon,"Man, you're a pretty stellar dude.  This is great!",1527057684.0
Razalhague,I'd prefer as little shadowing as possible. Being able to rebind a symbol to a different value brings with it much of the same cognitive load as using variables.,1526635113.0
CatpainCalamari,"I wouldn't like this feature. The usefulness of immutability is, well... That the values are immutable. If we allow shadowing, then the value where 'foo' points to can change, therefore we have no immutability. Or am I misunderstanding something? ",1526628998.0
silentraquo,"I feel like intermediate local variables as described in the example should generally have distinct, meaningful names. If you can't come up with a meaningful name, chances are you shouldn't extract it into a variable.

One of my common code quality gripes are weird temporary variables that represent something you can't even express in English without a full-length sentence (with correspondingly complicated types), let alone a concise variable name. In my experience in such cases there is always a clearer way to structure or split the variables.",1526638076.0
argv_minus_one,"Yes, please.",1526637513.0
Philluminati,This is basically a way to turn immutable variables into mutable variables. You may as well just say “var name” if the value changes and be done with it. This is not a good addition to the language.,1527057864.0
argv_minus_one,"Now the code is very incorrect. Quasiquotes are not hygienic, with unpleasant implications:

* All references to top-level symbols **must** begin with `_root_`, e.g. `_root_.org.scalacheck.whatever`.

* `implicitly` is not guaranteed to have its usual definition; you need to say `_root_.scala.Predef.implicitly` first.

* Importing inside a quasiquote is unsafe, because the imported names may shadow names from the surrounding context. What if `c.prefix` contains a reference to some unrelated symbol named `Arbitrary`?

Note that 2.10-style `reify` *is* hygienic, and therefore doesn't have these problems. I suggest using that instead of quasiquotes where possible.",1526638280.0
Milyardo,"I'm not sure what this macro achieves. Why not just do:
    
    import org.scalacheck.Arbitrary
    import org.scalacheck.Arbitrary.abitrary
    object Maker {
       def apply[T: Arbitrary] = arbitrary[T].sample.get
    }",1526663711.0
kpws,"> scala.Seq is now an alias for scala.collection.immutable.Seq (no longer scala.collection.Seq)

🎇🎆🎇",1526594954.0
naftoligug,"> The compiler performance in 2.13 is 5-10% better compared to 2.12.

Most important sentence, clearly ;)",1526637855.0
yespunintended,"> * The scala-xml library is no longer bundled with the release, and scala-compiler no longer has a scala-xml dependency

Finally!

I really hope that in the future we can produce small JAR files using just sbt-assembly.",1526625861.0
plokhotnyuk,"List of scala projects which are released for 2.13.0-M4:
https://index.scala-lang.org/search?q=fullScalaVersion%3A2.13.0-M4&page=1&sort=stars",1526826631.0
domlebo70,Great! Good luck with it. Let's fix sbt,1526542969.0
naftoligug,When will the results become available?,1531694765.0
CremboC,"Not really. Scala compile times are notoriously slow, and while progress is being made, esp. as now we've had compiler benchmarks for a while, we really need a N times improvement for them to be impactful. I don't see that coming unless the compiler is completely rewritten.

That being said, there is some work being done in that front along others:
https://github.com/twitter/rsc
https://github.com/scalacenter/bloop
",1526540404.0
Pas__,"Do you have a running sbt session and perhaps you do testOnly some.tastyTest? (Or maybe play with auto reload?) On a non-trivial codebase on a 4 core i5-4310U I don't feel Scala slow. Sure, doing a full sbt stage takes ~3 minutes. ",1526598415.0
,"In this case you would not use `null` (we don't use it in Scala) or `if` … you would do something like this:

    def method(a: Option[String], b: Option[String]): Foo =
      for {
        s1 <- a
        s2 <- b
      } yield foo(s1, s2)

or with [cats](https://typelevel.org/cats/) you could say

    def method(a: Option[String], b: Option[String]): Foo =
      (a, b).mapN(foo)

It turns out that `if` is very infrequent in Scala. More often combinators like `.map`, `.flatMap`, `.filter`, etc. get you where you need to go without venturing into the dreaded land of the booleans.",1526500389.0
zajondz,"pattern matching, pattern matching all the way...",1526499596.0
simon_o,"I wonder what the ""I Object!"" actually does. Given that contributors have already signed the CLA (and the CLA doesn't limit the license under which the code is distributed) it seems they don't need to ask anyone.

Slightly related to that, I wonder how they are able to claim copyright ownership, e. g.

    Copyright (c) 2002-2018 EPFL
    Copyright (c) 2011-2018 Lightbend, Inc.

without having the copyright of contributors assigned to them.",1526518291.0
jokasx,And this is why no one should ever sign a CLA. I won't at least. Even if I really wanted to contribute to scala compiler or Play framework for example. Just fork and keep your code changes.,1526545828.0
heraldryaq,"Apache Spark is becoming a must tool for big data engineers and data scientists.

",1526858664.0
depleteduraniumftw,https://www.reddit.com/r/ScalaConferenceVideos/comments/8c7t72/northeast_scala_symposium_moving_beyond_defensive/,1526462873.0
Milyardo,"Effects and Monads aren't introductory subjects, so I don't think they should be covered in an introductory course.

An introductory course should be focused on first principles like equational reasoning and substitution, functions as values and higher order functions. These first principles are applicable in every functional programming language, even the weakly typed ones. Monads however matter more in strongly typed functional programming languages. Implicits don't have anything to do with functional programming, they're a Scala language feature. 

The course's aim is to teach just enough Scala to instruct on the first principles mentioned earlier. It's not a course to learn Scala the programming language. It's not a course to go go from nothing to proficient in using scalaz. It's an intro to functional programming, using Scala. It's a great place to start. It's not where you should end.

It sounds like you and your coworkers have some misaligned expectations about what the course is supposed to be.",1526442695.0
knoam,"I took it and I really enjoyed it. I didn't continue with Scala after it but it jumpstarted my understanding of functional for my daily use of Java 8.

There's only so much you can fit in a single course. Also everything comes at you so fast it's hard to develop an appreciation for a lot of it within the setting of the course. A full appreciation comes from living FP day in and day out for an extended period of time.",1526437120.0
shrink_and_an_arch,"I took the course along with the rest of the courses in that sequence and liked them; that being said, the initial Principles course is more about FP application in Scala and less about the theories behind it. I can easily see how people would end up with the sort of gaps you mention.

While I do think the course helps people get into a more functional programming\-oriented mindset, I don't think it's sufficient to prepare people for working on real life FP projects.",1526447014.0
raghar,"I had pretty good memories - I started with Coursera, then read *Scala in Depth* and over the time learned more concepts till I reached some relatively high level.

I think it's a serious expectation mismatch on your colleagues part. Kind of like: I just finished introductory Java course and my manager want me to set up JEE server with Hibernate and stuff by the next week. Trying to run before knowing how to walk.

I mean: [underscore has whole book dedicated to subject of just Cats](https://underscore.io/books/), Akka is a whole ecosystem where each part (Actors, Typed Actors, Streams, Akka HTTP, ...) deserve a separate book, similarly type-level programming (vide *type astronaut's guide to shapeless*), then you have effects in form of Scalaz's IO, Cats' Effects, Monix...

Start with getting comfortable with syntax. `trait`, `class`, `sealed`, `match`, `apply`, `unapply`, `case class`, type bounds and stuff... Then move on to learning what are functors and monads, immutablity, `andThen`, etc. With that you can move on to Cats/Scalaz, start replacing Future with something else. Also learn a thing or 2 about actors if you want to understand internals of Akka Streams and Akka HTTP better (though you can do quite a lot without that knowledge). In the meantime you might pick Shapeless and macros (if you need them).

But I have to admit - even with a lot of curiosity and time spent on learning after work it took me about a year - 1.5 year to say that I am quite proficient with all these FP concepts.

Meanwhile Coursera focus on teaching you stuff you can use at work from day 0, so you know. Nobody would sign up for a year long course :P",1526485878.0
carlfish,"I took it a while back to see what it was like, and my recollection is in line with one of the one-star reviews for the course:

> The name creates the false impression that the course is about functional programming. This is certainly not the case. It touches the topic during the first and second week, but covers only some basics. Afterwards it is really a Scala course with the regular Scala focus on objects and the later weeks also facilitate imperative programming which is fine, but not good for teaching functional programming.

It's an ""Introduction to Scala, assuming you already know Java, but higher-order functions and pattern matching are new to you"", not ""Introduction to FP in Scala"".",1526443356.0
locker47,"I have taken this course, and currently taking up the other courses in the specialization. More advanced FP concepts are touched upon in the [second course](https://www.coursera.org/learn/progfun2) \(but not extensive\). I think going through the first two courses should help in getting comfortable with a\) Scala, and b\) thinking functionally on a high level.

For grokking FP \(and the type systems\), I think a good approach would be 1\) go through the red book, 2\) go through learning scalaz or herding cats by [eed3si9n](http://eed3si9n.com/), and 3\) reinforce it by using it, either on practice or real\-world problems. There are other great resources and communities out there, but this is the strategy I'd go for \(especially #3\).",1526455020.0
K_Zorori,"It's an introductory course, alternatively a more comprehensive introduction would be to read and complete the exercises in the ""Big Red Book"" aka Functional Programming in Scala.

The Red Book does eventually get on to Monads, Monoids, etc. However, the exercises are harder than the Coursera ones, so doing the first Coursera prior to the book may be beneficial.",1526553249.0
acjohnson55,"I deeply enjoyed the course. It's the only Coursera course I've properly completed. It gave me a taste for Scala, and I've been programming the language ever since.

At roughly the same time, I was working my way through the early chapters of the [Red Book](https://www.manning.com/books/functional-programming-in-scala), and I found the two resources complementary in their very different approaches. The Red Book gets much more into monads.

I think I learned about your points 3, 4, and 5 via other resources, but I'm not sure I remember which ones. Certainly, algebraic data types were a revelation for me.

The one piece I kind of had to learn on my own was how to structure entire systems. And I think this is also the place where the community is all over the place between free monads and other approaches.",1526969056.0
Philluminati,"I think I took it. It’s the Martin Odersky intro one? Incredibly painful and delivery is boring as hell. I don’t think I learnt anything.

It takes times to get into functional programming. The best book is the read fp in programming book.",1527323737.0
George_Kush_Sr,"I liked it but it's not for grokking in a few weeks, no. Monads aren't even really covered in the first course and I still don't know what they *really* are two years later, although that's because I quit caring due to what seems like circlejerk to me and I'll deal with that later. I use all those types at work but not because of the class. The class is just...fun. ",1526439970.0
mendrique2,"I was tricked. Project needed a full stack coder and I was told it's basically like java. It was scalaz and shapeless, and it was nothing like java. 2.5 years later I actively look for scala projects. Great language.",1526418311.0
Apterygiformes,I like to think that Scala learned me,1526417917.0
carlfish,"At first, because it was a better Java. These days, because it's a worse Haskell.",1526418512.0
amphoterous,Because writing Spark code in Scala is so much nicer than Java. ,1526422422.0
hyperforce,"I learned Scala for work. And because I was a Perl programmer.

Perl programmers usually have such an impoverished view of design and types. And I thought it would be good for me to learn a statically-typed language.

I'm so glad I did it. I agree with another poster, you could look at it as a better Java or a worse Haskell. Both are very illuminating views compared to Perl.",1526419112.0
rberenguel,"It started by deciding _not to_ learn Scala. A few (6? 7?) years ago, I wanted to learn some language making concurrent stuff easy. The JVM drove me off, and I went with Go (also sharpened my Python meanwhile). I avoided it for a while thanks to PySpark, but then, a couple years ago I was in a greenfield Spark project and we decided to go for Scala for performance. I liked it a lot, dove more into the funny stuff (the T word, the M word, etc), and here I am, still learning and still enjoying it a lot.",1526418090.0
Supernumiphone,"I wanted to learn FP and the red book seemed to be pushed as one of the best resources, as well as the courses on Coursera.  So Scala won by having the best learning resources.",1526425451.0
chetanbhasin,"Me and my friend started working on a project. Mine was in NodeJS, his was in Scala. He finished long before me, and the outcome of his work was much better than mine. That drove me nuts, and I wanted to learn the language he used.",1526456973.0
sevcsik,Because you have a better chance selling Scala to Java  devs than Haskell,1526432551.0
silentraquo,"I wanted a more powerful, safer language for frontend development that I could also use on the backend. Scala and Scala.js fit my criteria much better than Typescript, Flow, etc.

Unlike most others here, I've never used Java professionally.",1526447135.0
beisenhauer,I wanted to apply for a job that wanted knowledge of functional programming and JVM languages. Scala looked less foreign than Clojure. ,1526422582.0
KeinBaum,"Because I liked the whole JVM write once, run anywhere approach but Java was just so verbose. I compared other JVM languages and Scala won me over with type inference and the whole functional stuff, especially type classes. All while still staying somewhat readable, unlike certain other functional languages.",1526422628.0
locker47,"Back then I was looking to improve my programming skills \(only knew C and Java\), and I had read that learning a functional paradigm coming from imperative would be beneficial. Flipped a coin between Scala and Groovy \-\- but looking back it didn't matter which one I chose. The more I learn about FP the more I enjoy it.",1526422702.0
fpggot,I was too much of a pleb to learn Haskell,1526448940.0
irrational_skeptic,"Trying to get into data science.  Learned some python and sql, but I'm not getting any offers where I apply.  Hoping this sets me apart from the rest of the field a bit.",1526425652.0
halonet1,Like Neo would say - “Because I choose to “,1526435944.0
errorkode,"We switched from PHP to Scala at work for ""the big rewrite"". No one in the team had every written more than a toy project in it. It was a horrible idea (I told them as much). I took us years to get back on track - but I did fall in love with Scala on the way.",1526481638.0
7kemZmani,Why did YOU decide to post this question in 6 other programming languages subreddits?,1526429977.0
grizzly_teddy,"They told me I had to at work, and I really enjoyed how much depth there was in the language - and the concise syntax really drew me in. I get mad having to type `;` at the end of Java lines...",1526418978.0
amdelamar,I’m still learning it but it’s so far a better Java. I also saw more jobs asking for Scala experience so that intrigued me. My latest project is Spark heavy and I wanted to try Akka microservices eventually.,1526430286.0
denisrosset,"I wanted to write an online database of mathematical results, and wanted a language 1) that would interface with Matlab/Mathematica/Python easily through the JVM 2) could run a web server 3) would have static types as to decrease the ""bus factor"" so prevalent in academia.

I ended up enjoying it a lot, to the point of rewriting a lot of the missing stuff.",1526430823.0
dwianto_rizky,Spark.,1526446221.0
Alpinedweller,"RPG/Delphi programmer. I want to know a modern language! Also, I'm a mathematician at heart so the functional style massively appeals.",1526451576.0
pseohy,The red book is really awesome,1526461163.0
ChrisNH,Python and ocaml language features on top of the JVM combined with robust concurrency features. It has been a great choice for my student work. Would love to use it professionally.,1526472284.0
sergigp,"In my last workplace we worked in PHP... Some of my mates were start learning Clojure and they were talking every lunchtime about how magic is functional programming and Clojure. So I decided to learn a similar language but with a chance of being paid for work with it :troll:

This was 4 years ago aprox... Nowadays some of my mates work with me in another company with Scala. Some others, the most stubborn ones, now work with Java 6. ROFL",1526472440.0
gardyna,"A job I was applying to used play framework.... and I continued learning because I really like functional languages (maybe I should give Haskell a go when I have the chance, I did quite a bit of LISP while I was in scool)",1526477508.0
drfisk,"I've always been curious about different programming languages, and one day (~6 years ago) I just stumbled upon Scala and it was just love at first sight. It really had everything I wanted in a language and still today makes me very happy programmer. Being a former Ruby fan, Scala had everything ruby had, but with excellent tooling thanks to a strong static typesystem. Also they've got ""monkey patching"" right (implicit classes) so there was no looking back for me.

Yep, I'm a huge Scala fan ;) I wouldn't trade it for anything. (Although the compiler could be a tad faster)",1526485395.0
i_have_a_gub,"I became interested in functional programming while writing JavaScript full-time, so I decided to start learning Haskell.  After a while, I decided to spend my time on something more *practical*, so I moved to Go.  I appreciate the simplicity of Go, but it's not fun to write.  I finally decided to take a look at Scala, which I had avoided up until that point because I associated it with Java, and thought, ""Ah, this is what I've been looking for.""",1526494472.0
whifff,"We started using Apache Spark at my job. Most of our previous codebase was in Java, but at the time the resources for Spark in Scala seemed better. I also prefer writing Spark code in Scala because it's much cleaner.",1526432168.0
adrenal8,"I was working on a team doing Python and we wanted to share code with another team doing Java. I had a background in Erlang (and a little Haskell) so I was pretty comfortable with functional programming, but Scala taught me about static typing and the JVM.",1526447709.0
,Work decided to use Scala for a Big Data project.,1526447729.0
m50d,"I used Lombok and the Checkers Framework and realised that while they offered very useful improvements to Java, they didn't work unless every tool you were using (IDEs, code analysis, profilers, that kind of thing) supported them, and support in those tools was always breaking because it was seen as an optional extra. So I tried Scala as a language where those improvements were built in rather than bolted on.",1526460008.0
sudkcoce,"Because I have a strong dislike for incidental complexity, boilerplate code and overengineering that Java based projects cannot avoid.",1526572913.0
Sloshy42,"Wanted to learn a new language and was introduced to Haskell in college. Thought Scala seemed like a practical alternative where I could move over slowly from my older Java mindset. Now I'll never look back, though I still code Java at my day job.",1526669460.0
Yala2,"I was a student in undergrad. My teacher let me use any language. I shopped around. At the time, Haskell had no good IDE and I hated microsoft, so Haskell and F# were out of the question. Java got old and boring and C# was part of Microsoft. Eventually I stumbled upon Scala. The IDE integration was good and it was like Java but better.",1526708419.0
stefanobaghino,"At the time (2013) I was working with Java and JavaScript for work and learned on a news site that Twitter was using this new fancy language to replace Ruby. Working a Twitter at the time was my dream and coincidentally the famous Odersky MOOC on Coursera started, so I took the chance. I remember that at the time I was very much in love with JavaScript, or rather with the way in which it was possible to pass a function as a parameter (amazing, right? :D), so I was hooked with Scala right from the very beginning.

Bonus fact: a couple of years afterwards I actually interviewed at Twitter and everything went good until Jack Dorsey became the CEO and laid off a lot of developers (https://www.wired.com/2015/10/twitter-layoffs/), so much so that the open position I applied for became unavailable. Too bad, but I'm still very happy to have learned this language and learned so much more along the way. :)",1526712336.0
Philluminati,"Company did both Java and Perl. Couldn’t find Perl devs so we switched to Scala, supposedly a happy medium. I personally felt a bit forced and have never been overly keen on Scala. Turns out the company now can’t hire Scala devs and I actually do like it. (I mean it was always going to be better than Perl)",1526899966.0
justinhj,"I got into Scala the same way I got into Common Lisp. A friend of mine was into it and sent me some code, and I said that looks ridiculous and gave a list of reasons why. Then went down a huge rabbit hole that's lasted seven years trying to prove him wrong and ending up liking it a lot. My friend left Scala for Clojure.",1527116544.0
DevIceMan,"Around 4 years ago, I joined a company where the architect promoted FP every opportunity he could get.  The problem was we were a Java shop, and couldn't switch since our customers also used Java.  So instead, the architect would force us to use FP patterns in our Java code, even the specific pattern wasn't very applicable to our code.  The result was a mess.  Our types were verbose and difficult to reason about, and forcing immutability everywhere made many classes 4x longer than your normal verbose Java class.

While I may have been highly annoyed at the architect, he was the reason I discovered Scala.  He also exposed me to many FP patterns, and even if I thought the way he used them was wrong, it was also somewhat obvious to me what the value of these FP patterns would be if they were used correctly.  A pattern being applied terribly doesn't mean it's a bad pattern.

It also took almost no time for me to recognize Scala was a much superior language.  Taking the immutable classes example, a 50\-line java class with getters and setters might be 50 lines, the immutable version in Java would be around 200 lines, and the Scala case class was one line.

From there I moved onto another job where I thought I would be writing Scala, but it turned out that I spent only 1 week out of an entire year working in Scala.  Thankfully, at the job after that I finally found a full time Scala position.",1527172144.0
pythonicus,I wanted to get into FP and a had an opportunity to write Scala at a cool company.,1528238226.0
ReactDOM,Because Java. [Learning Scala](https://reactdom.com/scala) shows you how much java has fallen behind and how those concerns can be addressed.,1535391374.0
outzider,"I started working with Play 2 in a Java world, and Scala intrigued me. A few years ago, I joined a company that made the decision to go Scala for new web services and projects. Now I actively dislike Scala, or at least the cult of it. Oh well. :)",1526422415.0
Holothuroid,"A friend told me, he'd really like to work with a modern leakage for once, like Scala. What might that be?, I thought. ",1526445065.0
cricketsavant,"Can anyone tell me what the difference is between the following function calls:

    def double(i: Int) = i * 2
    val double = (i: Int) => i * 2

They both seem to do the same thing.  Is there an advantage of one way over the other?",1526756040.0
stormicex,someone have a good dark theme for scalaIDE like the darcula theme of intellij?,1526303209.0
franklinwritescode,"[This blog]([https://www.beyondthelines.net) has been everywhere recently & with good reason; the content is truly excellent.

Anyways, I was reading [this article](https://www.beyondthelines.net/programming/leveraging-the-type-system-to-avoid-mistakes/) and it talks about using wrappers around primitives to leverage the Scala type system to avoid trying to coerce, for instance, a `ProductId` into a `UserId`.

I'm trying to use the same thing for a field of type `BigDecimal`, for example:

```
sealed trait Purchase

def purchase(purchasePrice: Price[Purchase])

```

The article indicates that I need to write a custom json marshalling function.

Here's what I got:

```
case class Price[A](v: BigDecimal) extends AnyVal

object Price {

  // Here's where I'm having trouble.
  implicit def jsonFormat[A]: Format[Price[A]] = {
    // Not sure if this is right.
    // My reasoning is that the data will come in as a String (json) and it must be
    // marshalled into a BigDecimal?
    val value: String => BigDecimal[A] = ??? 
    Format(
      // Don't know what to do here.
    )
  }
}
```

For `Reads`, the compiler is expecting a type of `String => NotInferedB` (so it's expecting a function that maps a String to type `NotInferedB`, not sure what `NotInferedB` is). I can't simply put in `BigDecWrapper.apply[A]` as in the example because I think that apply method converts a `BigDecimal` to `BigDecimal` wrapped in `BigDecWrapper`, i.e, `BigDecimal => BigDecWrapper[A]`.

Is the solution to use `Reads.FloatReads`? If so then won't I need to create a BigDecimal from Float? Not sure what the best course of action is.


",1526412755.0
thesuperching,"Why Play is said to be non-blocking, isn't JDBC call in Future is blocking ?",1526460471.0
Judheg,"Has anyone use this new vim feature with SBT ? https://www.vim.org/vim-8.1-released.php

How's your setup and experience?",1526600158.0
,"What is your style when chaining multiple methods?

    doSomething(
      c = d,  
      e = f
    ).map { a =>
      b
    }.somethingElse { c =>
      d
    }

Or

    doSomething(
        c = d,
        e = f
      )
      .map { a =>
         b
      }
      .somethingElse()",1526675986.0
thesuperching,"What constitutes a value in functional programming?        
Is an object a value ?   
Is a function a value ?    
Is an object with setter methods and mutable states a value ?   
Is an object with mutable states and works as a state machine a value ?   

I am asking myself of these questions after seeing a sentence:
> Task has a constructor that captures side-effects as values,",1526685146.0
thatsadsid,Is there a tutorial on how to run a Scala program in an ide like intellij or eclipse? ,1526738050.0
ThatVeterinarian,"What does this do? Not sure about the implicit
`class Something[T[_]](value: Int)(implicit T: Stream[T]) ...`
and why would T be used twice here for AnotherThing?
`class Something[T[_]](thing: AnothingThing[T, Stream[T]]) ...`",1526789124.0
BitgateMobile,"Hi all, I have a question regarding adding code to a class without having to create a definition ... that's about as best as I can describe it.

For example:

    class MyCode extends RunnerClass {
        override def run(): Unit = {
            ... do some block of work here ...
        }
    }

    val runner: RunnerClass = new MyCode()

    runner.run()

But ultimately, I want to do define the code this way:

    def myClass = RunnerClass {
        ... do something here ...
    }

    myClass.run()

I'm not sure how to code something like that.  You can see that in the second example, the code is much more concise, and easier to read.  Ultimately, it means less typing for the programmer.",1526843059.0
scalacoder,"When using [sbt-pgp](https://github.com/sbt/sbt-pgp) to `checkPgpSignatures` I'm getting `java.lang.IllegalArgumentException` errors:

    [error] (sbt-pgp/*:updatePgpSignatures) java.lang.IllegalArgumentException: 
    Cannot add artifact 'sbt-pgp_2.10.jar' to configuration 'compile' of module 
    com.jsuereth#sbt-pgp_2.10;1.0-362db608157e066125b850127da6babbae08482b because 
    this configuration doesn't exist!

Anybody has an idea what is going wrong?
",1526929676.0
Arya_XO,"    object MainObject {  
    def main(args: Array[String]) = {  
         functionExample(25, multiplyBy2)                   // Passing a function as parameter 
        }  
    def functionExample(a:Int, f:Int=>AnyVal):Unit = {  
            println(f(a))                                   // Calling that function  
        }  
    def multiplyBy2(a:Int):Int = {  
            a*2  
        }  

Im on [https://www.javatpoint.com/scala\-higher\-order\-functions](https://www.javatpoint.com/scala-higher-order-functions) and it says the output is 60 and I am so confused on how can somebody please explain this to me, I understand the second example but this one I don't get",1527024426.0
jkxcool,"How do I install SBT/Scala on a Raspberry Pi 3? The SBT instructions for Linux are not working.

When I google the question I only get results from people who are trying to do Apache Spark clusters on RPis.",1527143519.0
m50d,"The final approach might as well hardcode `Stream` rather than giving it as an extra parameter, if it's only ever going to be used with `Stream`. What I suspect Pilquist was getting at was that if you do want to be able to test with lists, you can pass `ListT` for `S`.

The full tagless-final approach would, I think, be to require a `Hoist[F, G]` rather than a `join` function, and require a list/stream-like operation to be available on `G`. `process` can then be implemented by lifting `save` to return `G` and then just using `flatMap`; it will return `G[Unit]` which is the correct return type for that operation.",1526291865.0
havok2191,"FYI the link is broken, here is the fixed up one: http://appddeevvmeanderings.blogspot.ca/2018/05/cats-effect-and-webservice-composition.html",1526251012.0
m50d,"Rather than flattening after, I'd compose within the combined monad context first:

    for { 
      a <- OptionT(ioa)
      b <- OptionT(iob)
      r <- OptionT.liftF(useIt(a, b))
    } yield r

",1526316347.0
Aappddeevv,I made some changse to the post based on CremboC and m50d comments.,1526333933.0
Aappddeevv,Thanks for pointing that out. Must be cut and paste error.,1526253686.0
CremboC,"You don’t have to do
flatMap { _ match {
...
  }
}

You can simply use 
flatMap {
  case Some(v) => ...
  case None => ...
}

IntelliJ is very good for things like this as it suggestions auto fixes like that...",1526281556.0
sciss_,"Just pass the particular orderings directly (explicitly) to the PQ:

    val data = Seq(""a"" -> 3, ""c"" -> -3, ""b"" -> 0)
    val keyOrd = Ordering.by { t: (String, Int) => t._1 }
    val valOrd = Ordering.by { t: (String, Int) => t._2 }
    val pqk = collection.mutable.PriorityQueue(data: _*)(keyOrd)  // explicit ordering
    val pqv = collection.mutable.PriorityQueue(data: _*)(valOrd)  // explicit ordering
    pqk.head // ""c"" is highest
    pqv.head // 3 is highest
",1526239821.0
jackcviers,"It cannot take two orderinggs for the same type at one call site. In the case of two implicits in scope, you must choose by passing a specific one in the second argument list, just like you must choose between spring beans within the same context in a spring app.

If you want to use different ones at different call sites, or methods, you can use phantom types and scalaz/shapeless tagged types to choose a specific ordering.",1526239410.0
agilesteel,"In this video we will learn about inheritance \- a mechanism for achieving modular design which as a by product allows for code reuse even though the code reuse part is frowned upon lately. We will discuss semantic differences between inheritance and subtype polymorphism and learn about object\-oriented design patterns such as the ""Template method"" pattern. We will also dive into visibility and inheritance modifiers.",1526208593.0
anything_but,"When you are often using the same combination of monads, such as scalaz.Validation[Throwable] contained in a Future, it may make your life easier  to create a new helper class, e.g. FutureTValidation. In this new class you can override flatMap, map, withFilter etc. to enforce monadic behavior at one place that is otherwise repeated all over the code base. In our case, a few years ago we had literally thousands of places in our code with deeply nested pattern matchining, flatMaps, future error handling etc. That code often behaved differently in subtle ways (e.g. one puts an error into the Future.failed, the other puts the error into a scalaz.Failure). With a custom combined monad, the deeply nested pattern matching often disappeared completely, with the only thing left being a slick and beautifully linear for-comprehension.",1526205470.0
stephen789,"I love a good Future[Either [E, A]]",1526208628.0
raghar,"Personally I'd say at future level it is already too late - something like Monix Task would work there.

So you build a pipeline of async operations, fork them on specific schedulers (executor contexts on steroids) where needed, and decide when to run them yourself.

This would return CancelableFuture but you should be able to make it complete Completable Future.",1526158990.0
volpegabriel,"I think this is one of the problems that's solved by using functional programming. 

I'd use `cats.effect.IO` or `monix.eval.Task` to model your program, and you would be able to tell by reading the code that no threads / executions will be fired off without you being explicitly in control.

I'm currently working with the horrible `aws-java-sdk` that uses Java Future and I'm wrapping everything in a parametric `F[_]` that is interpreted to `IO` at the edge of my program. With `CompletableFuture` is much easier to wrap it in `IO`.",1526175502.0
NovaX,"You could use `new CompletableFuture<Void>()` as a trigger and use the obtrude method to fire it. If you add a trigger guarding each task, you could inspect a pause flag and queue up the work instead, firing when resuming. This way you can delay the task dependencies from being executed until you’re ready.",1526195395.0
kpws,"It is not a bug if it is documented:

> Unicode conversion is done early during parsing, so that Unicode characters are generally equivalent to their escaped expansion in the source text

https://www.scala-lang.org/files/archive/spec/2.12/01-lexical-syntax.html

There should also be something about it here: https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html",1526082901.0
senatorpjt,"It's not executing comments as code, it's reading newlines as newlines.",1526140420.0
refriedi,Scala executes a lot of different things you put in your source file as code!,1526131152.0
simon_o," ¯\\\_(ツ)_/¯

Reported this 8 years ago. Decision was to not improve over Java.",1526084531.0
,[deleted],1526057603.0
haimez,You could also switch to the netty backend for a 4x performance improvement.,1526082073.0
JoanG38,"The offer would have been more attractive if the key words Java, Spring, Gradle, JPA, Hibernate and Hudson were not there :)",1526037810.0
volpegabriel,"You're in the wrong Reddit channel, try here -> https://www.reddit.com/r/java/",1526048723.0
yawaramin,Please post jobs in one of the forums mentioned in the sidebar under the section 'Scala Jobs'.,1526076768.0
denisrosset,"That's fantastic! I've used ggplot2 and always wondered if a similar library would see the light in Scala.

The blog article does not do justice to the variety of plots that can be obtained in that way, please check it out!",1526048128.0
beeeeeeeeeeeeen,This looks pretty cool!,1526024047.0
commithook,Looks great! Thanks ,1526050612.0
GrantZ,"This is absolutely fantastic! Would it be difficult to support it in https://scalafiddle.io/ ? scalafiddle supports medium, so it would open the possibility of making the code examples interactive.",1526138417.0
GrantZ,"Would you please explain the difference between the ""combinator pattern"" and ""monadic composition""? I'm new to FP.",1526209229.0
jtcwang,"I'll repost a comment I made on /r/haskell in a thread on error handling.

This is something I've been thinking about and I think this gets really unwieldly unless the language supports first class extensible records(Purescript) or open unions (Dotty/Scala3). 

The reason I say this is because sum types don't work well for representing possible error values that a function can return.

Imagine we have two layers of function with the following call graph: (e.g. `funcA1` calls `funcC2` and `funcE2`)

    funcA1         funcB1
      |   \       /    |
    funcC2  funcD2    funcE2

All of layer 2 (funcX2) can fail with errors. Let's say they only have one error type each so for example `funcC2` has the signature `Either ErrorC2 ()`.

What should the signature be for `funcA1` and `funcB1`? You will need to construct a new sum type for each of `funcA1` and `funcB2`.

Now imagine you have 3 layers of this (Validation/Business Logic/Database Access) where each layer can have its own failures. When I tried this for the sake of
typesafety the result was:

* Very unwiedly to write and refactor
* Not helpful at all - because 99% of the time you simply just rewrap the error and pass it up
* Doesn't really provide any more safety than simply catching exceptions at the top layer. You often don't pattern match on the sum type so the exhaustiveness benefit is not even exploited.

If you work in a system where you're calling out to multiple other 3rd parties where the data fetched can be invalid 1% of the time, strongly typed errors is very unwieldly. Currently we define our own base exception where our errors extend, and handle it at the top level to provide good error messages & error reporting. 

Over the last ~3 years I've been bitten exactly once by not having strongly typed errors (where I actually wanted to handle the error not at the top level). It doesn't feel clean but I think is the right trade-off between ergonomics and safety for my situation.

Keen to give it another shot though, working with bifunctors are a lot better now than 3 years ago.
",1526026096.0
,[deleted],1525973064.0
sideEffffECt,"[Exceptions Are Shared Secrets](https://existentialtype.wordpress.com/2012/12/03/exceptions-are-shared-secrets/)

In the blogpost, Bob Harper is stressing the importance of exceptions as ""shared secrets"", shared by the thrower and the catcher. On the other hand, the intermediary code is oblivious of such exceptions that could be thrown ""through"" it.

Could something like that be achieved here, given a type `IO[E, A]` for some abstract type `E`, so that nobody can interfere/interact with the exception `E` potentially being thrown though it?

As far as I understand it, the existence of `attempt` (`IO[E, A] -> IO[E2, E \/ A]`) would break this principle of non-interference, since it enables the intermediary code to ""mess"" with the exception, even though it doesn't know the *class* of the exception object (ie is not supposed/can't decipher the exception).

Am I understanding Harper's point correctly? Is this new bifunctor IO better than what he proposes? What do you guys think?
",1525994965.0
yawaramin,"This is admittedly the first time I'm hearing about unrecoverable errors and a supervision hierarchy for fibers. Has this been the intended design all along, or is it a more recent development?

I guess my other question is, what can you do with supervision functions? Can we implement restarting with an exponential backoff, for example?",1525999093.0
argv_minus_one,"Boxing. Boxing everywhere.

Java checked exceptions were supposed to do basically this. Unfortunately, nobody bothered integrating them with Java generics, making them a mostly-useless irritant in modern Java code.

I'm of the opinion that Scala should reintroduce checked exceptions, but integrate them into the type system. A method that returns `A` or throws `E` would have the return type `A|throw E`:

	def readAThing(in: InputStream): AThing|throw IOException = …

These could be used in generic types. For instance, this returns an `Iterator` whose `next()` method may throw `IOException`:

	def iterateOverThings(in: InputStream): Iterator[AThing|throw IOException] = …

Thrown exceptions could be passed around as values, like `scala.util.Try` but more transparently (and preferably without boxing):

	def processThingOrException(t: AThing|throw IOException): Unit = t match {
		case thing: AThing => …
		case e: throw IOException => e.printStackTrace()
	}

	// This will read a thing, then pass the thing or the thrown exception to processThingOrException.
	processThingOrException(readAThing(in))",1525991365.0
vitalijzad,"I am using Scala inside Cloudera Distribution including Hadoop (CDH) https://www.cloudera.com/products/open-source/apache-hadoop/key-cdh-components.html

It contains Hadoop, Spark, Kafka, HDFS, YARN, Flume, etc.",1525956518.0
kag0,"What is it you're interested in doing? How you do something at ""scale"" greatly depends on what it is you're trying to do.  
You mentioned websockets, so let's pretend you want to build a chat application at scale (and pretend you don't want to use any actors). You could do this simply with a Scala native http sever that supports websockets, and a Kafka cluster. If you know how to use both those things (and there are plenty of videos on how to do them separately) then combining them is trivial.

An aside as you mentioned online games, most online game servers are still run from one stateful process. Network latency is just too high to manage really real-time distributed state.",1525967613.0
amazedballer,"Cluster solutions aren't really the same as microservices.   They build on top of each other.

[Akka Cluster Sharding](https://doc.akka.io/docs/akka/current/cluster-sharding.html) is the Lightbend stack piece of the Cluster Solution, but it doesn't detail how persistence works in a microservice.

[Lagom](https://www.lagomframework.com/) is the Lightbend stack piece of microservices, not Akka.  Lagom handles the [persistence piece](https://www.lagomframework.com/documentation/1.4.x/java/ES_CQRS.html) by adding CQRS and event sourcing on top of Akka Cluster Sharding.

> Let's say for an online game, you can't afford to save something in DB and only then respond to a user like it's done in Akka persistence.

Well, you can and its not nearly as expensive as you think.  But to your point, you would use [Akka Distributed Data](https://doc.akka.io/docs/akka/2.5/distributed-data.html) or another CRDT solution if you were okay with some data lag.  Or you can just do everything on a single node -- there's lots of server implementations of Minecraft, for instance https://github.com/konstructs/server that do that.",1525980387.0
yawaramin,"Outside of Akka, the only other thing I know is scalable (because it’s from and used by Twitter) is Finagle: https://twitter.github.io/finagle/

I personally haven’t used it, but I think it has a solid and simple design, a client and a server are are mirror images of each other and both modelled by the same type: `Request => Future[Reply]`

Just did some research and it looks like there’s a service discovery solution for Finagle servers: https://github.com/ncbi/finagle-consul",1525957072.0
ryan_the_leach,"It's because the bulk of large data tasks are usually somewhat asynchronous compared to the needs of real time applications, so most of the examples are going to revolve around that.

I'm not saying it's impossible, I'm not knowledgeable enough to know if it's a completely bad fit. ",1525958611.0
acjohnson55,"We have done this at my job using Akka. I don't go into any great detail about how it all fits together, but I talk about it a bit on my blog post here: http://artsy.github.io/blog/2016/08/09/the-tech-behind-live-auction-integration/.

Basically, Akka Cluster and Akka Distributed Pub/Sub are a great tool for implementing cluster-wide broadcasting of push updates. We use Akka HTTP's Web Sockets support for client connectivity. See this post for an example of how to push updates, in the form of Akka messages, to web socket subscribers: https://www.reddit.com/r/scala/comments/8fih41/theres_one_thing_i_cant_seem_to_do_in_scala_at_all/dy95bhb/?context=0",1526395877.0
elcric_krej,"Do you need distribution or redundancy ?


If you need distribution, for what do you need it ? Can't a single machine  that's well positioned (global network wise) server all your audience. 256 CPUs and 2TBs of ram do the trick for most apps.

If you want top performance you usually have to either:

a) Not have distribution. or
b) Understand your language and tooling well enough that you don't have to ask this question on reddit

99% of projects can work just fine with a)

Again, remember, distribution is not the only way to achieve redundancy",1526007656.0
ipeesometime,"Is there something about Akka in particular you are trying to avoid? It is a good tool for building sharded statefull applications

As mentioned before finagle/finatra works quite well but unclear what service discovery would look like as I've never had to handle that myself in that stack",1525957445.0
sudkcoce,Lagom,1526022219.0
elufimov,Sbt by examples was really helpful.  It showed me some tricks. ,1525925422.0
scabel,"I am having issue with sbt 1.1.4 and sbt 1.1.5 that it exits immediately after printing 

    [info] Loading settings from idea.sbt,plugins.sbt,global.sbt,watch.sbt ...
    [info] Loading global plugins from /Users/aterefe/.sbt/1.0/plugins
    [info] Loading settings from play.sbt,plugins.sbt ...

Does anybody else have these issues? I have tried it with both play and http4s projects.
",1526032069.0
,"Yeah you should be able to do that, and there's no reason in principle why you can't. The pieces just aren't assembled that way for whatever reason. 

+1 for Dash ",1525907041.0
kpws,https://www.scala-lang.org/api/current/,1525882872.0
yawaramin,"A couple of options.

If it's available, load up the published Scaladoc on the project's website. The Scala library docs are available and so are a lot of others.

If you can't find one, search for the package in [Maven Central](https://search.maven.org/) and download its `javadoc.jar`, e.g. https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22coursier_2.12%22 . The JAR is just a zip file, you can change the extension and open it, it will contain an `index.html` page which is the starting point of the library docs.

If you're using IntelliJ IDEA, you can jump to the definition of anything under the cursor. The sources should be annotated with Scaladocs. Or if you're using Emacs with ENSIME, the keycombo `C-c C-v d` will (should) open the Scaladoc page for anything under the cursor.",1525914868.0
m50d,"I'm not sure if ensime is actively maintained at all; certainly the previous maintainer is no longer maintaining it.

If your concern is maven integration specifically, I've found eclipse/scala-ide (with m2eclipse-scala) handles that significantly better than any alternative (though bear in mind that's also in a not-great maintenance situation).

But it sounds like your issue is more about general IDE performance? Many (maybe all) IDEs are slow when working with large Scala codebases. I find IntelliJ is mostly ok in speed terms but sometimes inaccurate with error highlights; eclipse/scala-ide is accurate and fast most of the time but then has moments when the entire UI locks up for seconds or more. I haven't worked with VS Code. Honestly I'd suggest trying all of them on your codebase, as different people's experiences seem to differ quite a lot.",1525868541.0
pure_x01,This is really cool. Being able to script with scala is excellent for automation. ,1525808290.0
elacin,"That's fantastic! I'm enthusiastic about ammonite since it offers for scala what I consider one of the main arguments for using python: a seamless path from script to application!

I was bummed out when it didn't work well with intellij back when i tried, but will certainly try again now :)",1525825024.0
yang_bo,"When you are using Ammonite inside an sbt project, you may want to use classes defined in the project. Unfortunately, your sbt projects may have complex dependencies, which would not be imported automatically by IntelliJ IDEA. [sbt-ammonite-classpath](https://www.reddit.com/r/scala/comments/8i3x14/sbtammoniteclasspath_an_sbt_plugin_to_export/) could help in the scenario.

### Step 1: Generate the classpath file at `target/scala-2.12/fullClasspath-Runtime.sc`
```
sbt Runtime/fullClasspath/exportToAmmoniteScript
```

### Step 2: Import the classpath by adding the following statement in your Ammonite Script

```
import $file.target.`scala-2.12`.`fullClasspath-Runtime`
```",1525850276.0
strawman53,"This looks like a great development, I look forward to trying it out. It also looks like perhaps the easiest way to get ammonite running on a Windows machine. ",1525823112.0
ryantheleach,"I was hoping /u/lihaoyi would chime in the comments, but then saw that he posted this to scallit",1525845123.0
grizzly_teddy,So I can't use Intellij's Scala worksheet?,1525826095.0
yang_bo,"Note that Monix / Cats Effect / Scalaz Concurrent is implemented as `sealed trait`s and `case class`es, along with some delicate optimization in the inner trampoline loop.

What is surprise is that simple vanilla continuation-passing style functions (preferred effect type in Dsl.scala) have comparable performance to those delicately optimized implementations (won in some scenarios, loss in others scenarios).

On the other hand, Dsl.scala's !-notation beats `for` comprehension and other direct style DSLs in computational performance, especially when you want to use different types of effects in one direct style control flow.

",1525800539.0
emilypii,"In the interest of a more fair outcome, do you mind running the benchmarks with a more up to date [Scalaz IO effect](https://github.com/scalaz/ioeffect)? ",1525952506.0
alexelcu,"Hi /u/yang_bo,

Some notes on your Monix testing:

- you're not testing with the latest 3.x release, which has optimizations for `map` for example, or the latest cats-effect 1.0.0-RC1 (although this one is the same as 0.10)
- when benchmarking Monix, you need a `Scheduler` configured for `ExecutionContext.SynchronousExecution`, otherwise you're comparing apples with oranges, unless the other abstractions also deal with fairness concerns and they don't (except for Scala's `Future`)
- in the context of IO/Task implementations, testing a bind chain of a small size, like your size=50 is ... less than ideal, because values of these data types end up being composed in large ones that are preferably evaluated only once in a `SafeApp`
- testing with `ListT` and then seeing that Cats doesn't have a `ListT` should highlight that we probably don't care about `ListT` — actually in such cases you're testing Scalaz vs Cats, which isn't the test that the benchmarks are claiming to do, so either build your own data structures that can work for all, or drop such tests
- that goes for other helpers, like `traverseM`, `flatTraverse`, `liftM` or others, because you're effectively testing the performance of the provided type class instances — which in the case of Monix 2.x for example, the technique used to provide Scalaz instances is very inefficient
- actually for the tests to have any validity I would drop all Scalaz code from them, except for the Scalaz Task tests of course

Also, the ""*Dsl.scala's !-notation*"" is cool, but in the context of IO/Task data types it's irrelevant. That's because for such data types it's only `map` and `flatMap` that matter, and possibly `ap` and `map2`, due to the way they end up being used. You can't use anything else in recursive data structures, or in describing workflows in general.

I also don't understand if you're abstraction suspends side effects or if it's a pure data type. In general when you test performance, it needs to offer a comparable feature set, unless it's an upgrade. For example Monix's `Task` can be shown how it compares against `Future`, because it's a higher level type than `Future` and usable in more contexts.
On the other hand you can make an eager `Future`-like data type be very fast, if you let go of certain assumptions or behaviors, see [trane.io](http://trane.io/), which can be a lot faster because it doesn't really do the same thing.

And notably absent from this tests is the performance on error handling.

That said, I'm happy to see other developments, keep it up 👍",1525958435.0
Milyardo,"I think problem solving and exploring with `inspect` should be greatly expanded, and used repeatedly in the other examples. 

Want to add a resource directory when compiling? Use inspect on `compile` to find out how sbt finds resource directories. 

Add a bunch of plugins. One of them has added a dependency to my project. Use inspect to figure out which plugin it is. 

Use inspect to find why a setting has a different value in two different configurations.

Teach a man to fish and all that would go a very long way in this context.",1525798222.0
m50d,"> Unfortunately, while it compiles and runs, the route doesn't resolve and I can't connect to it. 

Sounds like your problem is nothing to do with websockets or the code you're showing, and something at the routing level.

Try swapping out just the one class/method between Java and Scala (i.e. have a mixed Java/Scala project). There must be something you're doing differently in the two cases. You can worry about the lambda stuff (under 2.11 it's probably a matter of compiling with `-Xexperimental`) after you've got the basics working.",1525792387.0
jrduncans,"Scala function compatibility with Java lambda requires Scala 2.12+.

I would guess somehow that means your app.ws call doesn’t do what you intended.",1525838399.0
yawaramin,"Use Java 8. Javalin was designed to make heavy use of Java 8 lambdas and since Scala 2.11 can't use them, you'd be losing much of Javalin's succinctness in your server code.

The other option is to spin out your Javalin service into a separate package from your Spark code so you can use Scala 2.12.",1525915780.0
silentraquo,"I'm just gonna say that even though I'm only an individual using Scala.js (not a company with a budget), I am also willing to pitch in on the order of hundreds of dollars (euros?) to fund Scala.js development if that will be required after Sebastian finishes his PhD.

Hopefully Scala.js work will continue on its own, but if not, I think / hope that enough people and companies are invested in Scala.js to be willing to financially support it if needed.",1525802077.0
gmartres,"As many other things, it's a work in progress: https://github.com/lampepfl/dotty/pull/3481. The limiting resource here is time, not money.",1525781595.0
hbmkylex,It may reassure some that SAP is currently using Scala.js for some of their projects. Unofficially they already said that they will invest people/momey into maintaining a fork if it's required.,1526481560.0
acjohnson55,"Curious what the story is behind this, in the context of the macro roadmap?",1525721637.0
erwan,"So what version would that be in, 2.13? Or a dot release in 2.12?",1525760494.0
thesuperching,"I think you need to look more into Jsoup docs, it can return all elements matched, and you can turn it into Scala collection and map then to get your interesting attributes.
So, first learn about Jsoup API, then learns about Scala <-> Java conversion,  last but not least -- remove  Actor.",1525746088.0
base2c,"Try the scala-scraper library.  It provides a nifty extraction DSL with support for scala collections 
https://github.com/ruippeixotog/scala-scraper",1525780483.0
justinhj,"I’ve been reading a lot about Monix and  other effect types recently and wrote a blog post about my experience so far:
http://justinhj.github.io/2018/05/05/hacker-news-api-4.html",1525703870.0
colindean,"This month, I am putting into production three small web services written in Scala with Scalatra!",1525713192.0
adrice727,"[Firebase4s](https://github.com/firebase4s/firebase4s).  If anyone knows, or would like to learn, about macros, I could use some help implementing support for case classes.",1525709260.0
yawaramin,"I've been writing some tests recently at work and wanted to give a shout-out to https://github.com/commodityvectors/scalatest-snapshot-matchers , kudos /u/grillorafael for this gem of a library that makes writing tests easy and fun. I was looking for a snapshot testing solution for Scala last year ( https://groups.google.com/d/msg/scalatest-users/yrEJmt7RBXk/mjQzKQdpDAAJ ) but couldn't find anything approaching Jest's ease of use ... until this.

For people who don't know, and are wondering why you should bother, see the above message:

> I'm finding my aging and ever-weary eyes struggle to see what went wrong when I get failed assertions.

With a snapshot matcher, you get a textual diff that tells you exactly what the difference is.",1525739629.0
eniacsparc2xyz,"I've been using Scala to build cross platform utilities and custom development tools, for instance:

* [Jmhttp](https://github.com/caiorss/jmhttp/) \- An easy to use single\-file micro standalone http server to share files and directories across local network. The server app also has mDNS / zeroconf \(Apple's bounjour protocol\) \- service discovery which allows any device or app which supporting this protocol to find the server location such as Apple's Safari browser.
* [Netmon](https://github.com/caiorss/netmon) \- A system tray desktop application for monitoring, debugging and diagnosing connection problems.
* [Jarget](https://caiorss.github.io/jarget) \- A custom Swiss army knife development tool for Java and Scala which allows to  fetch dependencies from remote repository caching them for future use and offline usage; pass dependencies' classpath to Scala's repl for quick experimentation; build Uber jars by packing the scala compiled code with the dependencies and scala run\-time library and also embed Uber jars in shell scripts or Windows native executable for easy usage and deployment. 

Scala is really scalable, an application can grow quickly from a simple script to full\-fledge application.",1525832064.0
CaffeinatedT,I built an in memory single site crawler/command line search with an inverted index using Akka for an interview for first scala job that I'll probably start extending to using hadoop and crawling multiple sites into a real project that I'd love to have pulled apart by people who know what they're doing  [Akka Search Engine](https://github.com/TRReeve/AkkaSearchEngine),1526065466.0
BitgateMobile,"I've been working on an API to help quickly build a Job with a DAG of Tasks that can be run (a)synchronously.  It's still got a lot of work to do, and I've got a huge roadmap of functions, but it's been fun so far!

Anyone interested in helping out, please feel free to fork and contribute, or write me!  I'm hoping to turn it into a distributed job coordination server (soon) that can coordinate jobs to Mesos, Spark, and [datafusion-rs](https://github.com/datafusion-rs/datafusion) amongst others!

The project is called [Scattersphere](https://www.github.com/KenSuenobu/scattersphere).  (Yes, I'm aware there's a few others out there; this one is intended to be very lightweight and simple.)

Not quite at a 0.0.1 yet, as there's no Quick Start guide, but I'm working on one.  It just takes a lot of time to write that guide!  >_<",1526424666.0
bananamadafaka,"In making a portfolio for my gf with customized Bulma (which I just discovered, and I love).",1525717181.0
monumentshorts,"Just published a queue batch tracking service: https://github.com/paradoxical-io/carlyle

It helps you track queue fanouts: one message creates N other messages down the queues and you want to know when all N are done determistically",1526488643.0
,"We are using Scala/Playframework at [GIVE.asia](https://GIVE.asia), deploying to Heroku, and using Postgresql.

This month \(or next month\) we hope to open\-source some of our in\-house libraries: 

* An SBT plugin to compile Vue's single components for both \`sbt stage\` and \`sbt run\`
* A basic background job framework for Heroku that uses Postgresql as a queue.",1526619125.0
Yala2,"I'm curious if there is anything I can do to help with work on the Dotty Compiler. Creating my own programming language from scratch, while a cute little exercise, doesn't really help anyone where as I think that working on a fresh new Scala might be both educational and helpful. I only have a bachelor's degree and a copy of ""Compiler Construction: Principles and Practice"".",1526746127.0
m50d,"> 1. Composition Destroys Specific Error Types
> 2. You Don't Recover From Errors Often

The article is right that most users of any given library throw away the specific error type. But I think throwing it away in the library itself is a step too far - at that point you make the decision for *all* library users, and the 5% who really wanted to handle the specific error are screwed. Given that the worst-case of composition is decaying to a non-specific error type, it's hard to argue that using a non-specific error type throughout is better.

The part where checked exceptions went wrong is that you couldn't pass them through without caring about the details; you had to add `throws Exception` to all your functions. Libraries that implemented `map`-like functions ended up offering two variants, one that takes an `f` that `throws E` and `throws E` and one that does not. `Either` does not have this problem, because it's a plain old type in the ordinary type system.

> 3. The Error Type is an Encapsulation Leak

If my code is written to care about the specific error then the encapsulation *should* leak here. If I was catching `FileNotFoundException` and the library changes to using HTTP instead of a file, I need to know about this, I *want* to find out at compile time rather than having my code silently go wrong.

If my code doesn't care about a specific error, then changing the specific error that gets used shouldn't break compatibility. I believe the given example *wouldn't* break compatibility if the specific exception was never used, thanks to type erasure. So what's the problem?",1525769242.0
LukaJCB,"I said it before, but I think the comparison to checked exceptions isn't all that convincing. Most of us are already using `Either` to represent failure in a typed way, there's `Try` as well, but using `Either` to be more precise seems to be the most accepted way of doing error handling without `IO`.

If the idea behind checked exceptions (modeling errors as types) is generally a failure, then so are `Either` and `EitherT`, which I fundamentally disagree with.

That said, I do agree with a lot of different points made in the article and you can see further discussion in this issue: https://github.com/typelevel/cats-effect/issues/189",1525688866.0
Milyardo,"I find the comparisons here to Checked Exceptions very unconvincing here.

> That's right, you'll have a Throwable on your hands.

I mean sure, if you choose to. You could also choose a better type to capture all three error types. You could a coproduct with all three cases. You could make an your own sum type for describing the errors. This is the same weak argument people who misunderstand Either make, nothing changes because they're exceptions.

> So we are executing 3 operations in sequence and each of them can fail, we don't know which or how.

>Does it matter? Most of the time, you don't care.

I mean, I do care how many different states of error my program can be in. I don't care to have those states interfere with describing with what my program is doing, but in the end I do care in how many states I can end up in for any input.

> Empirical evidence suggests that most checked exceptions in Java are either ignored or rethrown, forcing people to write catch blocks that are meaningless and even error prone.

Yeah, what they're doing in Java is not convincing me at all they I should not care.

> The Error Type is an Encapsulation Leak

Just use a better type to describe the error like the first problem. Parameterize over the the error type when you don't know or care about what the total type of the error is, and use `Inject` when you do care to handle a specific error out of a larger set of possible errors. Handling errors isn't really any different how you describe the rest of your program. Maybe this would be more obvious to people if Scala had a more ergonomic coproduct.

> The Bifunctor IO[E, A] looks cool, but what happens downstream to the types using it? Monix's Iterant for example is Iterant[F[_], A]

I don't know, does `Iterant` care about the type of an error in any way? If not, what's wrong with just applying `IO[E, ?]` to `F[_]`?",1525642803.0
tsec-jmc,"Disagreements with this from my pov:

> Composition Destroys Specific Error Types

Maybe the entire point is to force the handling of these in an explicit way? I mean this is fairly obvious in that only `IO[E, A]` with the same `E` will compose unless you widen.

> You Don't Recover From Errors Often

This is, in my opinion, your _worst_ point Alexandru, especially when you bring up java consciously knowing that handling exceptions in java is completely non-composable and transforming them is super cumbersome, wherein `IO[E1, A] => IO[E2, A]`  is fairly easy. you can't even compare the two fairly bringing up two imperative langs with error handling that's completely different than with `IO`. Really, this is somewhat of a strawman. 

>The Error Type is an Encapsulation Leak

This point is interesting to me because _that's exactly what I want_ when I'm writing business code. I _want_ to handle my errors like this, and to know this `IO` means ""my file upload failed"". For the record, OOP principles violated in FP don't even make me blink.

>  It Pushes Complexity to the User

Again, _this is what many of us want_. I _want_ my business applications to do this because it's much easier to enumerate errors in certain operations this way. To be honest, I am pro-not 2-param IO for something like http4s dev, where the number of unforseen errors is gigantic, but for business code _on top of http4s_ hell yeah. I want this to happen, and I want to handle the unforseen errors in an explicit way, and narrow them, or carry around a particular error type myself. 

> If I parameterize the error in Iterant, how could it keep on working with the current IO that doesn't have a E parameter? And if Iterant works with IO[Throwable, _], then what's the point of IO[E, A] anyway?

Your `Iterant` example only applies to your library. I mostly refer to the fact that this is not the first time you use `Iterant` as a crutch to explain a design decision (Cancellability too),  but `Iterant` is really not a perfect leak-free abstraction. It's fine if you like it, I just don't think `Iterant` as a weaker version of Iteratee is something that the ecosystem relies on much at all.

> Martin Odersky already expressed his dislike for type classes of multiple type parameters

Odersky is the last person that gives a damn about FP in Scala and I'm sure you are well aware of this. Not a strong point either.

> a Bifunctor IO needs to pretend that developers on top of the JVM can work only with total functions, on top of an environment that actively proves you wrong, thus applying the ""let it crash"" philosophy on top of a runtime that makes this really expensive to do so

Constraining the error this way is something many of us want. Really. This is a fundamental disagreement and definitely not a point towards your cause.

I think I'll respectfully disagree with every single one of your points here. ",1525641406.0
SQLNerd,"No additional comments to the article, but I must say that this thread has been really refreshing to read. I see a lot of mutual respect and good discussion on contentious items. Its really interesting to follow the conversation!

Ya'll are good people. :)",1525883341.0
sideEffffECt,"late to the party, but I think [Exceptions Are Shared Secrets](https://existentialtype.wordpress.com/2012/12/03/exceptions-are-shared-secrets/) by Bob Harper is relevant here",1525938139.0
trenobus,"Seems like union types in Dotty might provide a way to avoid type widening during composition. But from what I've read, it sounds like the union type would have to be explicitly declared as the error result of the composition.
",1526168227.0
sake_92," Throwing more types on stuff doesn't magically make it better, simpler, useful...  

Am I right? :p",1525641331.0
arbitrarycivilian,"I find using `F[_]` particularly confusing because I automatically assume `Functor`, which is not necessarily the case",1525892272.0
seumarlanuh,They will also learn how to pass options to the Scala compiler (scalac) from the Scala Build Tool (SBT).,1525820287.0
yawaramin,"You’re right, developer happiness is important and Java is usually not known for that. You need to find some other tech stack which will bring you developer happiness. Typically a few languages come to mind:

- Ruby explicitly targets developer joy by aiming to look easy on the eyes and a welcoming community
- Clojure brings joy to the Lispers who find themselves in a JVM world and are looking for flexibility from the constraints of typeful programming
- ReasonML is trying to introduce simplicity, type safety and efficiency into the JavaScript developer’s daily workflow
- Elixir like Ruby aims for developer joy with its syntax and some other enhancements (like pipe-forward operator) on top of the massively concurrent and highly reliable Erlang platform.

Out of these choices, personally I prefer the latter two for frontend and backend work respectively.

As to the question of how to align your choice of language with your work, sometimes the most you can do is champion it and hope that your team and corporate agree. If you’re persuasive and lucky, they might. But look at it this way, the more languages you can find joy in, the more likely you are to work with something that provides that joy.",1525547284.0
pedrorijo91,"Scala solves some problems Java has regarding readibility and code conciseness. But there are many other solutions:

- you can try to introduce kotlin in a Java team. The transition shouldn't be hard, and it's a mid step between java and scala
- lmmutables are a lib to add 'case class'es to java: https://immutables.github.io/
- VAVR adds functional capabilities to java: http://www.vavr.io/
- project lombok adds tons of utilities to java
 
and etc",1525543565.0
dtechnology,"Kotlin and C# are two ""hella better than Java"" languages that at least ease the pain.",1525553401.0
TunaBoo,"I went back to Java and barfed so then i switched to Python. Happy again.

Honestly your coworkers make the job not the language.  A good team in COBOL beats divas in Scala.",1525568071.0
noel,Where do you live? Everyone we work with can't hire quickly enough.,1525545894.0
arstylianos,"\+1 for Clojure from me as well.

I faced a situation similar to the one described. I went from mainly Java in university to working with Scala and Javascript. I really enjoyed using Scala, but Javascript not so much. I was worried about leaving Scala but took a shot and ended up changing jobs to a place where I use Clojurescript full time and I love it.

Working with Clojure really made me enjoy the simplicity of it, and working with the REPL is amazing. Scala as a language is much, much more complex to work with. But at the same I do miss at times the assurances that come with a type systems such as the one Scala has. The thing is that there's no perfect language, and having experience with different languages just broadens your horizons.

Main advice: Try to pinpoint what it is that you like about Scala, and search for languages that have similar features. Maybe one of those languages will lack something Scala has, but make up for it by having something Scala doesn't have. You mentioned Java and Python, but both are far from providing the main things that draw people to Scala.

If I were to change jobs now I would certainly aim to keep working with Clojure, but if that weren't possible I would try going for one of Scala, Haskell, Ocaml/ReasonML, F# or at least Kotlin, Elixir.",1525563255.0
sdelmore,"If you can code well, and have done enough to educate yourself on the basics of computer science, plus demonstrate the self-awareness that you know there may be gaps in your knowledge due to the lack of a degree, I have never found it to be a problem in practice.  Everyone asks for it as third party proof you can code, or have a certain base skill set, but if you can demonstrate that yourself, then the value gained by a university vouching for you is minimal and people just overlook it.

TLDR, don’t let a request for a specific degree stop you from applying for a job you feel you are qualified for.  Let the company meet you and decide for themselves how important that really is to them.",1525547840.0
ewgxyz,"Haven't used Scala professionally, but definitely making full use of the functional programming features in Java 8+ and JavaScript since learning Scala. And final/const.",1525543188.0
naftoligug,Have you looked at Typescript?,1525573108.0
pythonicus,I'm noticing more and more remote Scala jobs if that's a possibility for you.,1525566806.0
kkanojia,"I took up a java job after doing scala for 3 years. I had similar problems of no fitting scala roles here in Singapore. Hated it at first, my first 2 months were spent looking for scala jobs. But now after a year I don't hate it so much. Intelij does a good job of generating boilerplate and hiding it when you are reading the code. Again I focus on solving the big problem at hand. Also I don't miss the slow compilation times and breaking changes. Give the java role a try maybe the problem will be interesting enough for you to forget about the language flaws.

My colleague who did the same introduced kotlin in his java team. Now he prefers kotlin over scala.

I would suggest go for the role and the problem the company solves. That should bring you greater joy!

My 2 cents.
[ BTW I also like JavaScript when no one is watching :) ] ",1525604087.0
snaket2003,Take a look at seek.co.nz lots of banks hiring - big data stuff mostly,1525644890.0
CremboC,"While the contents of the article are definitely interesting to read, I also get the feeling it's written very pretentiously... Every other paragraph I'm getting the vibe of ""cats is shit, scalaz is the best, ..."". I really don't think it adds anything and in fact only makes the content lose its credibility.

Regardless, thank you for your contribution to open source Scala, John.",1525525865.0
yawaramin,"Great write-up, but two questions:

(1) Why can't we avoid allocations in monad transformers using `AnyVal`? E.g., `case class OptionT[F[_], A](run: F[Option[A]]) extends AnyVal { ... }`

(2) Why do we need to define typeclass instances with newtypes like Haskell? Scala allows multiple instances, after all. Is it that you want to avoid having to manage instances manually? I think nowadays in Scala we've become pretty good at managing instances...",1525544059.0
estsauver,/u/jdegoes any chance you could provide some rough order of magnitude benchmarks for slowdown? Itd be great to know when this is something to really worry about at an order of magnitude level and I don’t have a good intuition for something like metamorphic methods impacts on performance.,1525628444.0
zzyzzyxx,"> If the type class syntax is not free

I didn't quite follow this. ""Free"" in what sense?",1525539005.0
BarneyStinson,How does Haskell avoid these problems? ,1525553989.0
yang_bo,"Yeah. We all know monad transformers are inefficient.

Recently I proposed another approach for extensible effects in [Dsl.scala](https://github.com/ThoughtWorksInc/Dsl.scala/).

Would you like to contribute a benchmark in https://github.com/ThoughtWorksInc/Dsl.scala/wiki/Benchmarks:-Dsl.scala-vs-Monix-vs-Cats-Effect-vs-Scalaz-Concurrent-vs-Scala-Async-vs-Scala-Continuation , to compare Scalaz 8 with Dsl.scala?",1525800492.0
dxplq876,Can you upload your project to GitHub so someone could actually look at the setup?,1525499760.0
niels_learns_python,"Open a terminal and navigate to the project root. Either your project is just a folder with a `.scala` file in it, or it's a ""proper"" sbt structure with a `build.sbt` and some folders (`src/main/scala/`, for example - [alternatively check out the sbt docs](https://www.scala-sbt.org/1.0/docs/Directories.html))

If you're on Linux or Mac, you can use `cd` to change directories, and check the current directory using `pwd`

Then you can run `sbt console` and your should be able to import the objects and/or classes of your scala files.

So suppose you open a terminal and find yourself in `/Users/niels` or `/home/niels`, you can find the project folder by listing the contents of the current dir with `ls`. Suppose the project is located in `/home/niels/my-project`, you can go to the folder by typing `cd my-project`.

So if you for example have a file called `Greetings.scala` that contains the following

```
object Greetings {
    def hello = println(""Hello, world"")
}
```

You can run `sbt console`:

```
$ pwd
/home/niels
$ ls
my-project/
$ cd my-project
$ pwd
/home/niels/my-project
$ ls
Greetings.scala
$ sbt console
...
scala>
scala> import Greetings._
import Greetings._
scala> hello
Hello, world
```",1525517893.0
MasGui,"Hi, the best place to ask this question is on the Coursera forum.",1525704423.0
Isvara,"IntelliJ + Scala is one of the most pleasant programming experiences I've had. I hit bugs from time to time, but never anything that makes me regret using it.",1525457455.0
estsauver,"Literal type support is exciting! I've started doing some stuff with building a shapeless records Queryable interface for our db, and this will be nice!
",1525442300.0
monnef,"It's nice that at least something with Scala plugin is progressing. Last time I tried using trivial map from Shapeless, it resulted in red squiggly lines all over the place (4 years after report and bug is still not fixed). Other libraries suffer from this as well - e.g. ScalaCSS or Udash. Without macro support, Scala plugin is a bit ""meh"".

I don't want to hear about macro support for Dotty, like few years back when JetBrains employee responded to my critique of current (lack of) support of macros. It still won't be here for like a year and even then I fear it won't be anywhere close to 100%, since IDEA fails handling even basic Scala code after so much time (e.g. ""Good code red: pimp method call in trait with self-type"" or ""Good code red: overloading with implicit class"").

Don't get me wrong, it is probably still the best Scala IDE, but using it one cannot use language and libraries fully (or at all), or one have to leave IDE and start using dumb editors without any dev features. I will probably be moving from Scala partially for this reason.",1525444874.0
heraldryaq,"Primary resources to fuel brain has been videos, books and online documentation.",1525645025.0
seumarlanuh,This post will discuss the process and learnings as first time author,1525820301.0
emilypii,">plain old manual argument passing - no need to explain that

Should be in bold, size 72 font and covered in blinking lights. The lengths developers go to not pass arguments is _astounding_.",1525391150.0
amazedballer,"> It was default DI mechanism for Play Framework, but because of all these issues authors decided to switch to Guice - yes, functional programmers preferred runtime reflection to type-safe cake, so that tells a lot.

This is incorrect.  Cake was never the DI mechanism for Play Framework -- instead, there were singleton objects that were directly referenced, and a single Global and single Application.  There was no dependency injection at all.

Likewise, Play doesn't ""prefer"" Guice -- it's [one option of many](https://www.schibsted.pl/blog/dependency-injection-play-framework-scala/).  Play also supports [Macwire](https://github.com/playframework/play-scala-macwire-di-example) and [Dagger 2](https://github.com/playframework/play-java-dagger2-example), for example.

The decision to switch to Guice as the default was based more around Play's background as having first class Java and Scala APIs.  For Java, JSR-330 type runtime reflection is what people are familiar with, and for Scala there are several different compile time options, all of which compete and require domain knowledge.  Guice is a well documented, well known and targeted DI framework, so it was the least common denominator -- you may not use Guice, but you'll understand what to do if you see Guice being used in examples.",1525445456.0
vivri,"What about partial application as DI? Seems much cleaner, reusable, caveat-free.",1525406108.0
aphexairlines,"From the comparison with other DI libraries:
http://wvlet.org/airframe/docs/comparison.html

> Both of MacWire and Dagger2 requires all of the dependencies should be found in the same scope. There are pros and cons in this approach; A complex example is Guardian’s frontend code, which lists 30 dependencies, including transitive dependencies, in a single trait to resolve dependencies at compile time. In runtime DI, we only need to write direct dependencies.

MacWire could handle transitive dependencies after this gets implemented: https://github.com/adamw/macwire/issues/122",1525382781.0
mdedetrich,"> So those 2 traits will be very often compiled together, and Zinc incremental compiler will not help with that. Additionally changes to any of the components in a cake will trigger recompilation of stuff above it in dependency graph.

This is no longer true as of SBT 1.x (when it turned on name bashed hashing of classes/traits to detect if files needed to be recompiled).

Ever since the change to SBT, I would say that Guice (runtime DI) is much worse than cake pattern. The biggest issue with cake pattern in the past was that it was overused and greatly increased compile times (which has recently been resolved).

Resorting to just argument passing without any other abstractions is also much harder and worse to maintain in non trivial projects.",1525383826.0
,[deleted],1525395673.0
wargotad,Hi! This is my very first attempt at a blog post. I very much welcome your feedback. Cheers!,1525344142.0
sciss_,"Interesting, however I believe it's just a more complicated way of doing what [an STM already provides](https://nbronson.github.io/scala-stm/syntax_cheat_sheet.html) \(e.g. versioning\).",1525346391.0
grizzly_teddy,"Confused by 

> As an example, here is how one could, using atomic primitives,

Atomics in Java are not primitives, so I'm not sure what you mean.",1525359549.0
beezeee,"BondLink | Junior/Senior Software Engineer | Boston, MA, US | ONSITE | Full Time

We are a small team of Scala engineers using advanced functional techniques to ship reliable, rot-proof software. We use lots of shapeless and scalaz, a free monad based program/interpreter architecture, monadic logging, and more. If these things are familiar you will feel right at home, if they are interesting to you and you want to learn, you will find a safe and supportive environment to grow on the job.

About the company:

BondLink provides a SaaS platform to bond issuers in the $4 trillion municipal bond industry. We have recently raised a large Series A, we have strong revenue growth, and we are already working with many of the largest issuers in the country.

The company was founded by a former Massachusetts Assistant State Treasurer who raised nearly 25 billion in funding for the state and set the gold standard in the industry for transparency and investor outreach, partnered with a multiple-time startup founder with several successful exits under his belt.

We have deep expertise and credibility in the industry we serve, great product-market fit, a strong footing with a ton of momentum, and a great handle on our software delivery.

If this sounds like something you'd want to be a part of, shoot me a PM.",1525311073.0
sideEffffECt,"Barclays | Senior Scala Developer | Prague, Czech Republic | ONSITE | Full Time | Visa/Relocation assistance

TL;DR: We're looking for a Scala developer to grow our team in **Prague (CZ)**. **Akka** expertise is a plus, **Spark** expertise is even a bigger plus. Working language is English.

> ...

> The Fiscus Model Execution Engine (MEE) platform is an innovative Scala and Spark based application offering self-service modelling capabilities to a user-base across Treasury. It is developed by a distributed team, with the future focus of the development team being in Prague, London and Łódź. Working language for the whole team is English, so no worries if you're not Czech native.

> ...

The *Job Number* is `90171772`, you can look up the details in the [job portal](https://barclays.taleo.net/careersection/2/moresearch.ftl) using this ID.

PM me for details or send me your CV straight away, I can answer any question you might have.
",1525306973.0
joshlemer,"Hey so by the way, the monthly ""Who's Hiring"" threads are actually on a timer and get posted automatically by /u/AutoModerator. I'll leave this one up but let's not do this too much because now I'll have to go and delete the one that is scheduled to appear in about a week from now.",1525356056.0
RedditWithBorders,"Leapfin | Software Engineer | San Francisco, CA, US | Onsite or Remote | Full Time | $120k+

We are an enterprise b2b finance software startup based in SF SOMA.
Because we work with finance, we deal with lots and lots of data. We have found product/market fit and are growing rapidly. We are looking for a technical leader who can help us scale.

We are looking for someone able to collaborate well in a team environment and who always puts the customer first.

Job Posting: https://leapfin.com/careers

About: https://leapfin.com/about

Let me know if you have any questions!",1525372487.0
yawaramin,"LoyaltyOne | Senior Software Engineer, API Services | Toronto, ON, Canada | ONSITE | Full Time

Several of our teams are looking for Scala devs. We're mostly using Akka and its ecosystem to split up our Air Miles reward platform into scalable microservices. Air Miles is Canada's largest coalition rewards system. Among other things, we host the Scala Toronto Meetup, here's a video of our last one: [Deploying an Akka Cluster to AWS EC2 Container Service](https://youtu.be/EPNBF5PXb84)

Apply at https://www.linkedin.com/jobs/view/536892724/",1525311001.0
mwd410,"True Fit | Senior or Principal Scala/Java Engineer | Boston, MA, USA | ONSITE | Full Time | Not the hiring manager, but I'd guess ~100k (very rough guess)

We're looking for an engineer on our engine team, which develops the core of our business. Candidate should be comfortable with mathematical equations, and transforming them into software. Should be experienced in multi-threaded software and distributed architecture.

For Men it's less of an issue, but for Women especially, buying clothing online is difficult, and hit-or-miss at best. In one brand you could be a 2, in another you could be a 6. Even within a brand, different lines can fit differently. Our software equalizes these discrepancies between brands. We are also working on Discovery -- think Pandora for clothing.

We're a Scala shop, but more than 50% of our hires were Java Engineers. I had only heard of Scala a week before I got a call for the interview. We have a lot of great Scala engineers and do a lot of training, send people to NE Scala symposium, etc.

PM me if you're interested.",1525316065.0
plug1plug2,"Cake Solutions - A BAMTECH Media Company | Manchester (Visa, Onsite)| London (Visa, onsite) | New York (Remote avail)
Senior Scala Developers

Until last year (2017) Cake had operated as a Scala Consultancy, helping businesses globally build Reactive, Distributed and Resilient Systems using our hybrid Agile method of small cross functional teams. We're big advocates of the tech community, and have been blogging, hosting meetups and presenting/sponsoring conferences for 5 years.

We were acquired last year by BAMTECH Media, and are now building the next-gen DTC media streaming platforms for partners like ESPN+, Disney, Riot Games, and EuroSport, as well as migrating existing partners (MLB, NHL, MLS, WWE, HBO) to our new multi-tenant platform.

Most of our current roles are at the Senior level (Scala) so we would like engineers who have experience with the Lightbend Stack, reactive and distributed computing, and functional programming concepts (futures, category theory).  https://www.cakesolutions.net/careers

Any questions to me samf@cakesolutions.net",1525793243.0
Onedayillsailaway,"Tray.io | Senior Scala developer | London, UK | ONSITE | Full Time | 

# Description

Tray.io is ushering in the era of the automated organisation

We believe that any organisation can and should automate. With Tray.io, citizen automators throughout organisations can easily automate complex processes through a powerful, flexible platform, and can connect their entire cloud stack thanks to APIs. Today businesses like IBM, GitHub, Forbes, Lyft, and Digital Ocean rely on Tray.io to connect and automate data flow between the tools they use every day. With Tray.io visual workflow builder our customers create automations to drive their business processes without writing a single line of code. Our challenge is to build a cutting-edge product that is powerful and complete while also being beautiful and easy to use.

You'll contribute directly to this mission with a team that fully supports you to do your best work. You'll join humble but fiercely ambitious people like yourself, who also take great pride in what they do, working in a culture built on friendship, transparency, and above all, looking out for one another. You'll have endless opportunities to learn and grow professionally in a fun, fast-paced, and open environment. Plus, you'll get to make your mark at a rapidly-growing company positioned to completely reinvent a multibillion-dollar industry.

# Your mission

Tray.io backend infrastructure processes millions of requests per day and is a mission-critical component of our customers' businesses. As a Software Engineer working in the Platform team at Tray.io, you’ll be part of a team responsible for designing, building and running the software and systems which underpin our large-scale, real-time, distributed infrastructure. We expect you to build flexible services and tooling which allows Tray.io to rapidly scale whilst delivering a seamless experience to our customers.

The Platform team is responsible for providing a production environment where connectors integrations and automations can run reliably and at scale. This involves dealing with compute providers, networking, packaging, storage, monitoring, logging, and security. This necessitates building the services and APIs that expose these services to internal and external users of our infrastructure.

# Responsibilities:

* Developing flexible services & tooling that allows people to store and run integrations at scale
* Building internal and external facing tooling and API’s that allow our users to fluidly build on our platform
* Working collaboratively with Product managers to deliver key security, scalability and reliability features
* Growing a motivated, high-performing team
* Automate the testing and deployment of your work
* Envision new features that help our users connect services faster and easier

### Minimum qualifications:

* BS degree in Computer Science or related technical field, or equivalent practical experience.
* Solid experience in a stand-out production environment
* Expert knowledge of at least two programming languages and paradigms (e.g. Scala, Java, Kotlin, Groovy, Go)
* An irrational passion for building distributed systems
* The desire to learn, improve and work together
* Good knowledge of internet networking and performance
* Passionate about troubleshooting, debugging, and automation
* Experience building web services and APIs

### Preferred qualifications:

* Experience launching cloud-based services
* Experience with real-time, distributed systems
* Experience with writing multi-threaded software
* Passion for performance and tuning
* Experience in capacity planning and load testing
* Experience with clustering technologies (e.g. Kubernetes, CoreOS, Mesos)
* Previous IaaS or PaaS experience

### Tech Stack

* Scala, Go, JavaScript, TypeScript
* PostgreSQL, Redis, ElasticSearch, Cassandra, AWS SQS, AWS Kinesis
* Docker, Terraform, AWS Lambda, Serverless Framework
* Jenkins, Grafana, Prometheus
* AWS & Linux

# 

# Benefits

Working at Tray.io offers many perks, but most importantly we are a talented team with a passion for the product we are building.

* Competitive salary
* Stock options
* Unrestricted holiday policy & work from home days
* Flexible working hours
* A fun and supportive working environment
* Top of the range equipment budget
* Drinks fridge & stocked kitchen
* Social events (team breakfasts/lunches, evenings out & trips)
* Employer contributory pension scheme
* Cycle to work scheme
* Private healthcare
* 50% off Virgin Active gym membership

# To apply:

Send us your resume here [https://tray-io.workable.com/j/50E49D5631](https://tray-io.workable.com/j/50E49D5631) or shoot me a PM

# Equal Opportunity

Tray.io is proud to be an Equal Employment Opportunity and Affirmative Action employer. We do not discriminate based upon race, religion, colour, national origin, gender (including pregnancy, childbirth, or related medical conditions), sexual orientation, gender identity, gender expression, age, status as a protected veteran, status as an individual with a disability, or other applicable legally protected characteristics.",1534421064.0
ciberon,"I stay way from it because it's more of a framework than a library. It's more probable than not that it spreads through the codebase.

That's why it didn't make it into production when I tried it so I don't really have the answer you want. ",1525287280.0
raghar,"TTFI should not have (much) overhead - you are basically injecting type-class(es) for your algebra and call it the same way you would call e.g. `Future.successful`, `Task.pure`, etc. It would be harder though to do things like: creating AST, modifying it before running, and then interpreting. (There was some blog post about how you can optimize in runtime with TTFI, but all-in-all it is more difficult to understand).

Free monads will always have this 3 steps: lift to monads, build program as an AST, interpret it. If you don't do anything with AST, but use it to feed interpreter then it is pretty much useless overhead. However if you do some interesting things with e.g. recursive schemes, then free monads are the way to go.

Both concepts should not be understood as a ""FP-feature I use in code"" - they are architectural decisions impacting whole codebase, similarly to:

 * deciding that you will encode services as `Request => Future[Response]`
 * replacing Futures with Twitter's Futures, Scalaz's or Monix's Task
 * running whole domain on top of Akka Actors, Typed Actors or Akka Streams

except both TTFL and FM want to decouple implementation from particular algebra (so you say you want to use monad or applicative or whetver, but don't bind whole codebase to particular implementation).

The more I work with FP and domain modelling, the more these concepts make sense to me... except I wouldn't recommend them to people who don't worked with functional-style for a while. I also wouldn't recommend it if the decision wasn't approved by more senior members of the team that already wrote a whole project with them (even a toy project). Otherwise it would be like giving GoF Design Pattern book to people who just switched from assembly to C++ and expect them to write enterprise-ready project. There has to be someone that already feels like it should work guiding the rest, otherwise you'll end up with crappy code thinking that these patterns are shit.

Whether it is freestyle, cats or scalaz implementation is irrelevant. Prototype some code and show it the the rest of the team. If they cannot get to the point where they could contribute in a reasonable amount of time (e.g. 1 day?), then the jump is too huge, so stick to something they already can maintain.",1525293831.0
m50d,"I avoided it just because I don't trust macros and don't feel the benefit is worth the cost. I use (plain Scala) free monads in production and have for years, and am starting to use final tagless style in one corner of a production system.",1525337622.0
LukaJCB,"I'd absolutely use it in production, free Monads are great, but using them requires a ton of ceremony. Of course, I personally prefer tagless final myself, but if you want to do free Monads then freestyle is a good idea :)",1525432079.0
acjohnson55,"With Akka Streams it's pretty easy. Something like:

    val dbParallelism = 5 // or whatevs
    val postProcessParallelism = 10 // or whatevs

    // Whatever operations you want the DB to do should be baked into the query action
    val singleYearQuery = for {
      year <- Parameters[Int]
      row <- DataTable.filter(_.year === year)
    } yield row
    
    def postProcess(row: DataTableRow) = {
      Future.successful(row.toString)
    }

    Flow[Int]
      .mapAsync(dbParallelism) { year => db.run(singleYearQuery(year)) }
      .mapAsync(postProcessParallelism)(postProcess)
      .runWith(Source(1980 to 2012), Sink.seq)
      .foldLeft("""")(_ + _)

If your reducing step is commutative, then you might choose `mapAsyncUnordered` for greater efficiency.

I've used Akka Streams's `mapAsync` with Slick for this very purpose -- doing work in parallel, while bounding the number of DB connections a single request can use.

Hopefully you can play with that to get something that fits your needs.",1525231036.0
amazingdreams,"I've been thinking about doing something like this for a while. I see you've implemented more or less the basic functionalities? Like raw block data, proof of work with fixed difficulty etc. Are there any specific things you want to do with it?

I'm not sure I'm parsing correct since I'm on mobile and can't run anything. But does your block hash effectively contain the entire history of your chain (including raw data)?",1525192565.0
ComonUsername,FYI I wrote an educational Scala miner. https://github.com/rlavolee/scala-educational-miner,1525268844.0
kpws,"This is awesome. I'm glad macros have a bright future in Scala 3.

For those of us worried not about the future but about the *present* of macros, here is a quick overview of the current situation. Please correct me if I'm wrong on any of my points, I have no inside knowledge.

* v1 (aka ""scala.reflect""), even though experimental, is currently the only working solution we have. Don't expect any new features or improvements, although we were promised they will keep it working in 2.13 and, I presume, by extension 2.14. That is in spite of the fact that some features seem to be [kind of abandoned already](https://github.com/scala/bug/issues/10755).
* v2 (aka ""scala.meta""), which was promised as the real deal, is relegated to be basically a glorified parser. The Scalameta Paradise subproject, which offered most of the advanced macro features, is dead, dead, dead.
* v3 (aka ""scala.macros""), which was promised as the *real* real deal ""[this time we mean it, for sure](https://www.scala-lang.org/blog/2017/10/09/scalamacros.html)"", is DOA. The [last commit](https://github.com/scalacenter/macros/commits/master) was over five months ago and last week they finally [declared the project officially dead](https://github.com/scalacenter/macros/blob/master/README.md).",1525139276.0
Martissimus,"Will ""performance macros"" like translating a for loop over an array into an inlined while loop over the arrays indices like the JVM likes them be supported by scala 3 macros?",1525178621.0
MercurialHacked,"Does Scala ever plan to expose a macro system for untyped ASTs that are spliced before typing? Honestly as someone with a small scheme/racket background I prefer untyped whitebox macros. Perhaps it is the best Scala can do though given that the language was never designed with macros in mind. 

From my research in the past the nemerle programming language looks To have the kind of macro system you'd get if macros were integral to the language: http://nemerle.org/About",1525188363.0
ARainyDayInSunnyCA,"At the unit test level you shouldn't worry about testing the functionality of libraries.  Assume that they implement their APIs as documented.  If the concern is that you're using the cache as you intend then you can mock out the underlying resource and verify that multiple calls for the same key only hit that mock once.

Outside of unit tests, I'd recommend capturing metrics on the cache such as counts of hits, misses, and how often the key is found/not found in the underlying resource.  Those could be checked explicitly in integration tests but they could also be monitored when the code is in production to verify to cache's parameters continue to meet production needs and that upstream callers aren't making fruitless look ups, if avoidable.",1525108691.0
totallymike,"In a way you’re correct. Referential transparency is desirable. But you could also consider a partially applied function to be a closure, and those are extremely common and useful. 

As with all things, it’s a pragmatic decision. If your function with a closure won’t move very far before execution, and the closure isn’t mutating the closed-over value, I don’t see anything particularly wrong with it.

The caveat is that if you’re closing over a value in a function, the closed-over value should be immutable, and it should be immediately obvious everywhere that matters that your function carries a closure. No surprises, please :)",1525105714.0
,[deleted],1525169742.0
,[removed],1525124120.0
a_masculine_squirrel,"So I'm new to Scala and I'm learning to work with the language without really *learning* the details of the syntax (normally I'd pick up a book to learn a new language but it's for work and I'm against the clock), but there's something I keep seeing and don't understand. 

I'm using the Scala Play library, and here's a line of code from an example: 

    import play.api.libs.json._
    import play.api.libs.functional.syntax._
    
    implicit val locationReads: Reads[Location] = (
      (JsPath \ ""lat"").read[Double] and
      (JsPath \ ""long"").read[Double]
    )(Location.apply _)

Syntactically, what is Reads[Location]? I just learned about Options today and it reads similarly but I don't know the name of the action that's being done, so I can't read up about it. I should also say I'm new to functional programming. 

Thanks! ",1525205420.0
giuinktse7,"Hi! I'm trying to select a case object depending on the ""real type"" of a value. Given a Request, I want to get a Consumable. Let's say we have these types:

    trait Request
    case class FoodRequest(name: String) extends Request
    case class DrinkRequest(name: String) extends Request
    
    trait Consumable
    case object Food extends Consumable
    case object Drink extends Consumable
    
The caveat is that the Request types cannot use the Consumable types. I.e. doing something like

    trait Request {
      def toConsumable: Consumable
    }
    case class FoodRequest(name: String) extends Request {
      def toConsumable = Food
    }
    case class DrinkRequest(name: String) extends Request {
      def toConsumable = Drink
    }

is not possible for this use case. My best solution so far is pattern matching on the ""real"" request type to select a Consumable value. How can I avoid having to perform this pattern match on the request type?

    trait Request
    case class FoodRequest(name: String) extends Request
    case class DrinkRequest(name: String) extends Request
    
    trait Consumable
    case object Food extends Consumable
    case object Drink extends Consumable
    
    val request: Request = FoodRequest(""pasta"")
    
    val consumable: Consumable = request match {
      case _: FoodRequest => Food
      case _: DrinkRequest => Drink
    }

I would like to just be able to say something like

    val request: Request = FoodRequest(""pasta"")
    val consumable: Consumable = consumableFor(request) // == Food

I've been trying to figure this out for days now, but haven't been able to find a solution that removes the need for the pattern matching. Any help is greatly appreciated!",1525160038.0
SQLNerd,"I've got a play app that I've been tooling with for a while now. I have a base controller trait depends on other classes that I've created for database interactions, serialization and data models for the endpoints. I use Generic types for this via type params, and it has resulted in both self-recursive and bloated type signatures, which I think is having a significant impact on compilation times. Surely there is a better way to do this. Would I be able to take this in a better direction?:

		trait Controller[IDTYPE,
						 STATEMODEL <: StateModel[IDTYPE, EVENTMODEL, STATEMODEL],
						 EVENTMODEL <: EventModel[IDTYPE, STATEMODEL],
						 REQUESTTYPE <: Request[IDTYPE, STATEMODEL],
						 RESPONSETYPE <: Response[SERIALIZATIONTYPE],
						 SERIALIZATIONTYPE,
						 SERIALIZER <: Serializer[IDTYPE, STATEMODEL, EVENTMODEL, SERIALIZATIONTYPE],
						 RRSERIALIZER <: RRSerializer[IDTYPE,
						    						  STATEMODEL,
													  EVENTMODEL,
													  REQUESTTYPE,
													  RESPONSETYPE,
													  SERIALIZATIONTYPE],
						 FILTERTYPE <: Filter[_],
						 CHAINTYPE <: FilterChain[FILTERTYPE]]",1525179192.0
,[deleted],1525808240.0
johnynek,Which law is cats lacking on MonadError that would rule in Either but Try out? I don’t know of any except something like: fa.map(throw e) must throw. But if you do that you’d also rule out lazy types like Eval. Can you share a law so people can see what law cats has left out of MonadError?,1525059754.0
emilypii,"What do you mean by 'the way the type is used'? The left/right bias allows you to treat `Either` as a monad, and it works just fine via `fold`, `bimap`, and the usual monad operations. If you're referring to the ability to call `.right` or `.get`, it's difficult because *it's unsafe and you shouldn't do it*.  The fact that you can project is a hack, and an unfortunate consequence of Scala's data encoding. If you want something that looks ""either a, b, or both a, b"", then you can use [These aka 
\\&/](https://github.com/scalaz/scalaz/blob/3b3f5fdb2d7430cd89e027c7384db3b51954b830/core/src/main/scala/scalaz/These.scala).

If anything, what they should do for `Either` is remove the variance issues it has, and replace it with something closer to scalaz's invariant `\/`.

In general (or at least, production), I stay away from `Try` because it's not referentially transparent. ",1525045595.0
argv_minus_one,"Scala 3 has union types, making some uses of `Either` unnecessary.",1525063596.0
ryan_the_leach,I wonder if there's an elegant encoding of checked exceptions waiting to be found too,1525045118.0
Philluminati,"I would be good if they can fix the type errors when you say Right(x) and don’t declare the type of the left, which defaults to Nothing.",1525265699.0
yawaramin,It would be very helpful if you could give a minimal complete example that we can copy and paste and see a compile error.,1525027916.0
teknocide,"Since the definition only allows for one type to be assigned to `SuitableFood` you need to make both Grass and Cookies a subtype of this type in order to be allowed to pass both to the method. This is a natural limitation of the type definition and an effect of object oriented solutions in general.

edit: In dotty it is possible to declare `type SuitableFood = Grass | Cookies` for `Cow`",1525215114.0
S11001001,"Write

    type SuitableFood = Either[Grass, Cookies]

and see what you can build from that.

`eat` must have a way to distinguish `Grass` from `Cookies`, and this is one way to indicate the difference.",1525087931.0
carlfish,"From my perspective, `UserAlgebra` is the ""API"", and `F[_]` is the effect that API is being performed in.

If ""This function could either find or not find a user"" is part of the API, then it should return `F[Option[User]]`. 

If ""This function will always return a user, but we ultimately can't control whether the effect produces one or not"", then the function should return `F[User]` and your F type should represent the failure.

So in my code, I would return `F[Option[User]]`, because ""a user may or may not exist for a particular ID"" is a property of your user algebra, and your types should represent that regardless of what effect that algebra is run in.",1524975244.0
teknocide,Nice to see a well-presented entry level fun project in Scala! Higher-kinded types and Spark-jobs are all nice and good but doesn't lend itself well to everyone.,1525191221.0
geggo98,"I'm on mobile, so it took me a while to find the slides. To spare everyone else the hassle: [the slides are on GitHub](https://github.com/changlinli/types_presentation_slides/blob/v0.2.0/slides.md).",1524989922.0
heraldryaq,"That is very useful advice. It's even restricted to Scala.﻿


",1525645064.0
seumarlanuh,"Great talk, thanks!﻿


",1525820334.0
yawaramin,"This is a very cool idea, called 'lightweight static capabilities'. The 'labels' that Changlin talks about are the capabilities. I summarised and spoke about Oleg Kiselyov's paper on LSC: https://github.com/yawaramin/lightweght-static-capabilities",1525019340.0
Jasper-M,What's the use of having `HutRepository.empty` return an `IO` when you immediately call `HutRepository.empty.unsafeRunSync()`? Otherwise nice post.,1524932037.0
heraldryaq, Hopefully this should give you enough to get started with a real API.,1525645035.0
tombraideratp," 

[Hi , ](https://medium.com/@atp.iitk/hi-7210ff1b2306?source=responses---------0---------------------)

[this code as well as your github is compiling but intellij is giving error on mouse hover :-](https://medium.com/@atp.iitk/hi-7210ff1b2306?source=responses---------0---------------------)

[http://tinypic.com/r/95pq4w/9](https://medium.com/@atp.iitk/hi-7210ff1b2306?source=responses---------0---------------------)

[Could you tell what is the issue](https://medium.com/@atp.iitk/hi-7210ff1b2306?source=responses---------0---------------------)",1536570851.0
threeseed,"This works:
https://www.playframework.com/documentation/2.6.x/ScalaWebSockets

",1524916668.0
channingwalton,"The example is a good one. To send messages to the client you need to understand a bit about fs2 streams so that you can add that to the returned stream.

I’ll try to modify that example over the next couple of days to show you.",1524920190.0
rankwally,"It sounds like what you're trying to do is combine some sort of synchronous action (imperatively send a message whenever I want) with a stream interface.
There's usually two ways of having synchronous actions combine with streams: convert the synchronous action into a stream itself and use the normal set of stream combinators or use an intermediate ""store"" between your synchronous actions.

This is a common theme in all streaming systems, all the way from single-machine streaming libraries, to message brokers such as Kafka. I'll give an example of the latter.

In this fs2 case there are a lot of choices you could use for your store. The most straightforward is probably a queue. Here's the most straight-forward translation of your Node code.

```
// Probably doesn't quite compile, but should be close; I don't happen to have a compiler handy unfortunately

val wss: IO[HttpService] = HttpService {
  // We'll do the exact same thing for every incoming HTTP handshake request so we're ignoring it
  _ => for {
    // This number determines when to start blocking if your websocket client isn't 
    // consuming quickly enough.
    // Change the kind of queue to change the behavior (e.g. you could have a circular
    // buffer that throws away responses if the client isn't consuming quickly enough
    // instead of blocking)
    ws <- Queue.bounded(5) 
    dealingWithIncoming = Sink.lift(x => IO(println(s""Received: $x"")))
    httpHandshakeResponse <- WebSocketBuilder[F].build(ws.dequeue, dealingWithIncoming)
    _ <- ws.enqueueOnce(Text(""something""))
    
  } yield httpHandshakeResponse
}
``` 

You might ask why don't `akka-http` or `fs2` provide an equivalent of the `ws` object in your Node example? It turns out that this intermediate store is exactly the equivalent of `ws` (which is why I've named it such) and you gain added flexibility in getting control by creating the store yourself and as I said before, it's a common idiom you'll see in streaming libraries and frameworks that is language-agnostic.

As an example of this flexibility, apart from the kind of queue that I mentioned earlier, you might want to have the store persist across multiple websocket connections so that if a client disconnects and later reconnects, it sees all the notifications it's missed in the interim. In that case you'd lift the `Queue.bounded` out of the scope of `HttpService {...}` and build it outside `wss`.

Another way is to convert your synchronous actions into streams, which can be nicer architecturally depending on what you're doing, but it's harder to give an off-the-shelf example since this depends more on what exactly your synchronous action is.",1524962656.0
acjohnson55,"Akka Streams are tricky to learn, but once you get the hang of it, it's not so bad. This is admittedly trickier to standup than your JS version, but I believe this more or less does the same thing.

    import akka.http.scaladsl.model.ws.{ BinaryMessage, Message, TextMessage }
    import akka.http.scaladsl.server.Directives._
    import akka.stream.scaladsl.{ Flow, Source }

    object WebSocketHandler {
      val outflow = Source.single(""send"")

      val webSocketFlow = Flow[Message]
        .collect { case TextMessage.Strict(rawString) => logger.info(s""received: $rawString"") }
        // Output nothing given any possible input message
        .filter(_ => false)
        // Output our individual outgoing message
        .merge(outflow)
        .map(output => TextMessage(output))    
    
      // Concatenate this with the rest of your HTTP routes.
      val websocketRoutes = path(""socket"") { handleWebSocketMessages(webSocketFlow) }
    }

I'm assuming you want to have that outgoing message triggered by some event elsewhere in your app. For this, you could take advantage of [Akka's event stream](https://doc.akka.io/docs/akka/current/event-bus.html?language=scala#event-stream) and replace that `Source.single` with a `Source.actorRef` like so:

    val outputBufferSize = 10
    val outflow = Source.actorRef[Update](outputBufferSize, OverflowStrategy.dropHead)
      .mapMaterializedValue { self =>
        // Anything received by `self` becomes a message generated by this Source
        system.eventStream.subscribe(self, classOf[SomeDataType])
      }
      .map(_.toString) // Or however you want to serialize SomeDataType",1525151516.0
yang_bo,"This project seems to use websocket for communication between Scala.js client and Scala JVM server:

https://github.com/walfie/gbf-raidfinder/blob/master/docs/project.md

Hope it help you.",1524910602.0
oanpa,"You can use the java websocket

[Here](http://www.baeldung.com/java-websockets) you have a guide in java,but it is easy to adapt it to scala",1524914906.0
yawaramin,"Check out https://javalin.io/documentation#websockets

It’s designed to look like Node websocket libraries. You can use the same approach you would in Node, i.e. stuff the connection in a mutable optional value and do `sessionOpt.foreach(_.send(""message""))`",1525015134.0
rellbits,"There are many components to GraalVM. Twitter is only using the compiler, called Graal.

As far as I understand, they use OpenJDK 8 as base for their TwitterJDK. So what they did is just switched the server compiler for Graal.  But still use the client compiler to run in [tiered compilation](https://dzone.com/articles/client-server-and-tiered-compilation). The \-11&#37; improvement comes from the open source version of Graal. The enterprise version of Graal \(GraalVM EE\) has more optimizations that increase that performance. But also depends on the code that you run.",1524869002.0
sideEffffECt,[Twitter have abandoned **C2**!](https://www.youtube.com/watch?v=pR5NDkIZBOA),1524878654.0
mdedetrich,"Investigating to use the GraalVM at work, but we may not be able to use the enterprise edition (which contains the profiler) due to licensing restrictions (same issue as using OracleJDK in Docker)

Looks promising, but I think it also depends on the code. If you have a look at https://twitter.com/lukasz_bialy/status/989091065033625606, Graal was actually giving worse runtime performance until the profiling feature was provided (which is part of the Graal enterprise edition)",1525091859.0
mustang0168,"I would have to disagree, at least personally I’m not a big fan of implicit magic ",1524862103.0
softiniodotcom,"https://github.com/rtyley/scala-git
",1524839515.0
rberenguel,"
    val serialized = MessagesToBytesSerializer.serialize(RemoteActionsResults(List(ErroneousRemoteAction(""""))))
    MessagesToBytesSerializer.deserialize(serialized.right.get)

is a Left, also in Main. The test is failing because it expects all deserialisations to be Right(command)
",1524843251.0
dzamlo,"If you run with `sbt run` you will see that the error is here too. From here you can conclude that the difference is not run vs test, but sbt vs without sbt.

If you search a relevant part of the exception (like `cannot assign instance of scala.collection.immutable.List$SerializationProxy`) with the keyword sbt with your favorite search engine,  you should find some explanation of the issue, and a workaround: add `fork := true` in build.sbt.",1524960185.0
continuational,"It's nice to be able to see the type, but it makes editing awkward, since it inserts ""voids"" in the source code where your text cursor skips over. It doesn't feel finished to me.",1524837934.0
replicacl,"I found this setting in IntelliJ IDEA today. I am not sure which IntelliJ IDEA/Scala plugin version added this feature, so maybe you need update your IDEA/Scala plugin version if you want this feature.

Though a lot of people here were getting used to type inference, it may still good for beginner or reading someone else's code.",1524834572.0
monnef,"I really wish Jebrains would finally fully support Scala, now it's only half baked. When using (even popular) libraries IDEA shows completely broken code (red everywhere) while in reality it's a valid code (e.g. ScalaCSS, Udash, Shapeless). There are even issues with Scala code without macros :-(.",1524905803.0
silentraquo,"I quite dislike that feature for my own code. IMHO If you want to see hints all the time, just write out the types. IDEA is not smart enough to know when a hint is needed. Could be useful for legacy or third party code, I guess.",1524949148.0
flylikeabanana,"So for comprehensions are generally syntactic sugar for `flatMap`, the method that characterizes a Monad. `Option`, `Either`, and `Future` are all monads. You can read about the flatMap desugaring [here](https://docs.scala-lang.org/tutorials/FAQ/yield.html). [doobie](https://github.com/tpolecat/doobie) is one of several libraries that lift database operations into a monadic type, but what's cool about doobie is that you can take actual sql, interpolate the values you're passing as inputs, and build up a program in a particular monad - `ConnectionIO` - which can then run as a single transaction and return a more general effect type like `IO` or `Task`.",1524838049.0
fwbrasil,[Quill](http://getquill.io) is a LINQ based on this [paper](http://homepages.inf.ed.ac.uk/slindley/papers/practical-theory-of-linq.pdf). It allows users to express queries in Scala (including for-comprehensions) and run them on a target language like SQL and CQL (cassandra).,1524864879.0
,for expressions in Scala are generally only useful when working with monads. Slick gives you a nice monadic type that represents a DB I/O call. I don't know about the performance tradeoffs but the nice part from what I've seen is it lets you easily wrap a complex operation in a transaction.,1524857300.0
pme1234,"I use https://github.com/portable-scala/sbt-crossproject in my project (https://github.com/pme123/scala-adapters)

But my project:

 - only compiles to 2.12

 - only has 3 sub-projects: client - server - shared

 - has no native-js (put this plugin supports it)


I think it is a good starting point for your requirements.",1524831453.0
,The typelevel libraries have mostly converged on a mono-build style that works pretty well for me. A simple one is [atto's build](https://github.com/tpolecat/atto/blob/series/0.6.x/build.sbt) which does all the things you ask.,1524837340.0
Milyardo,"Most of the functionality you're asking for is being implemented in the `sbt-crossproject` his plugin. It's unclear form your post if you know about this plugin, if not it's where you want to be.",1524847817.0
Avasil2,"I'm very fond of Monix to the point I became contributor. I've switched to its `Observable` from `Akka Streams` and I didn't look back. :) What I like about it is that it feels pretty high-level but exposes so many useful operators that it still allows me to express complex transformations with precise control without getting into internals. Not to mention performance which in my use cases was way above expectations.
    
Unfortunately [documentation](https://monix.io/docs/3x/) isn't quite complete and is still in process of being updated to upcoming 3.0 release but that's something we are aware of and are actively working on. I hope to give it even more focus after we're done with 3.0 release so we actually have more ""real world"" examples.
    
On the bright side, implementation for streaming data types (`Observable` and `Iterant` ) is actually quite simple to understand most of the time + ScalaDocs are rich in information so you can find a lot of answers there. Just [skim through that](https://github.com/monix/monix/blob/master/monix-tail/shared/src/main/scala/monix/tail/Iterant.scala) to know what I mean. The `Observable` is based on ReactiveX so any documentation for that will be useful too. Also we are happy to answer any questions and help out on monix/monix gitter channel. 

If you decide to check out Monix and ecounter any issues related to documentation, learning curve etc. please let us know either on gitter or through issue on github (monix.io or monix) - any feedback is appreciated. :)",1524823805.0
BigDaveNz1,"Use Circe, it is by far the best json library IMO.

https://circe.github.io/circe/

Note: I use a derivation of case classes a lot, and then use custom decoders and encoders for different things.",1524822827.0
lihaoyi,"If `sending me down a new rabbit hole of learning about stuff` is a major concern of yours, you should definitely try using [uJson/uPickle](http://www.lihaoyi.com/upickle/) for your work.

It's [very fast](http://www.lihaoyi.com/upickle/#Performance), easily [customizable](http://www.lihaoyi.com/upickle/#Customization), has the best documentation of the lot, can [seamless integrate with every other JSON library](http://www.lihaoyi.com/upickle/#OtherASTs), and itself has zero dependencies meaning no conflicts, minimal size/complexity and no rabbit holes.

If you come from a Python background, uJson's `ujson.read(""..."")` or uPickle's `upickle.default.read[Foo](""..."")` are the closest you'll get to Python's `import json; json.loads`",1524844899.0
burchalka,Thought about this when reading the OP: http://www.lihaoyi.com/post/uJsonfastflexibleandintuitiveJSONforScala.html,1524818175.0
plokhotnyuk,"Try jsoniter-scala: 

https://github.com/plokhotnyuk/jsoniter-scala

It parses from input streams or byte arrays immediately to your case classes and Scala collections without usage of reflection API in runtime and without producing any intermediate representation like strings, hash maps, etc.

So jsoniter-scala is much safer and efficient than any other JSON-parser for Scala. 

It has methods for scanning through multi-Gb value streams or JSON arrays and parse from all values without need to hold them all in memory:

https://github.com/plokhotnyuk/jsoniter-scala/blob/master/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/package.scala#L79

Also, it has outstanding features like fast skipping of not needed fields (key/value pairs) or crazily fast parsing and serialization of java.time.* classes from/to ISO-8601 representation, just see benchmark results here:

http://jmh.morethan.io/?source=https://plokhotnyuk.github.io/jsoniter-scala/oraclejdk8.json

In most cases, when there not lot of fractional numbers, it works on par with best _binary_ serializers for Java and Scala:

https://github.com/dkomanov/scala-serialization/pull/8",1524841873.0
GuyInIssaquah,"We rolled our own macro\-based serializer a few years ago: [https://github.com/frugalmechanic/fm\-serializer](https://github.com/frugalmechanic/fm-serializer) I think its worth checking out, and it supports JSON.

    import fm.serializer.json.JSON
    case class Hello(name: String, list: List[Int])
    val hello = Hello(""World"", List(1,2,3,4,5))
    
    val json: String = JSON.toJSON(hello)
    val hello2: Hello = JSON.fromJSON[Hello](json)
    
    require(hello == hello2)",1524851189.0
amazedballer,">  new rabbit hole of learning about play and akka stuff when I just want to import JSON and complete another object before running off with this new stuff.

Play JSON is split off from Play itself, in https://github.com/playframework/play-json so you don't need to go down that rabbit hole -- just use the README.  The only dependency is Jackson, I think.

Most of the time you'll want to use [automated mapping](https://github.com/playframework/play-json#automatic-conversion) -- you'll specify a `object LogEntry { implicit val format = Json.format[LogEntry] }` and that will be it for the definition.  Then you call `json.validate[LogEntry]` and that gives you a `JsSuccess` or `JsError` that you will pattern match.

Also checkout 

* https://www.wlangiewicz.com/2016/03/23/json-in-play-framework-techniques-for-making-compatible-mappings/
* https://www.wlangiewicz.com/2016/03/25/json-play-framework-advanced-libraries/
 ",1524852505.0
mbo1992,"Just curious, why is there so much discussion regarding json libraries? I see a new post here every couple days. Is there really that much difference between the various libraries in terms of performance and usability? And is json parsing really the part of most applications that needs the most optimization?  
  
Not complaining, just curious.",1525121262.0
Stannu,"As Scala is compitable with Java you could use Java libraries for such tasks. Something to look into for this would be:

- Gson - library made by Google (https://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.2)

- Jackson (https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.9.5)

- Json (https://mvnrepository.com/artifact/org.json/json)

Gson and Jackson are quite powerful libraries.",1524817824.0
nambitable,"There's nothing to learn. Lift-Json is easy to pick up and start using. Think of it as a library. 

Here's a case class

    case class Blah(a: String, b: Int)

Here's how you serialize it into JValue:

    val jsonBlah = Extraction decompose Blah(""asd"", 1)

Here's how you deserialize it back to case class

    val blah = jsonBlah.extract[Blah]",1524821361.0
oleg-py,"A number of people have been asking me on how I made MDC work with Monix Task in my http4s app, so I put up a post with working code and some nuances explained for people willing to try it out.",1524745911.0
mdedetrich,"Nice, I ended up using `Logger.takingImplicit` to solve the same problem (as a bonus it actually enforces that you log this value otherwise it won't compile).

This is definitely a much better solution than what I had to do previously, i.e. manually having to update the maps whenever the context switches. I suspect this solution will have better performance than the others, due to avoiding contention on the MDC's underlying map.

This is speculation though, haven't benchmarked anything",1524754427.0
yang_bo,"We should get rid of slf4j and create a Scala library for logging.

MDC is a terrible concept for asynchronous programming.",1525259874.0
singham,You should do streamlined video tutorials as well. That might take more time and editing but it will be much more beneficial.,1524670813.0
scubadoobidoo,One small suggestion - change the IceCream class to a case class - its a better default type for data holders - as you are a probably going to want to pattern match on flavour?,1524610216.0
Murbarron,"Haha, nice, I love it:
WHAT IS DATA?
Data is stuff our program can process",1524646127.0
renfieldist,"Just to weigh in on the pro-sbt side: I'm looking to get up to speed on some basic Scala so I can read, and offer basic pull requests on, the code of a team that I work with. Stuff like tweaking API behaviours, extending options etc. I've done plenty of backend FP, just never in Scala, or Java for that matter.

Because they are a typical Scala team, their projects ALL use sbt, so I'm very glad to have an intro that uses sbt. It's just a practical, pragmatic thing for me.",1524838722.0
aphexairlines,"Nice work on the stepwise explanations.

Question about this step:
Step 1. sbt

Is this avoidable?  Maybe Mill, or Gradle, or Pants, or Bazel instead?",1524599902.0
continuational,"My goto example for UI frameworks is a tree editor ([like this](http://www.react4s.org/examples/tree-editor)), because it's a relatively short example that demonstrates:

- How to compose UI together from smaller parts recursively.
- How to update a small subset of the model (eg. a node).
- How much of the whole tree that must be rerendered (to virtual DOM or otherwise) on each edit.
- How much the framework types leak into the model.

How would that look with this approach?",1524684075.0
HaydenSikh,"The sbt dependencyTree command does include transitive dependencies.  Given that output, you only have two direct dependencies and I was able to cofirm neither have transitive dependencies.

Is the project set up to have submodules?  If so and if you didn't configure the root module to aggregate the other moduels, then running `sbt dependencyTree` by itself will only show the dependencies of just the root.  You can run the command against a specific submodules I stead if you give it a prefix.  For example, if you have a submodules named ""foo"" then you could run `sbt foo/dependencyTree` to run the command in the context of that submodule.",1524544666.0
olafurpg,"If you use sbt-coursier there is `coursierDependencyTree`

https://github.com/coursier/coursier#printing-trees",1524552551.0
adamw1pl,You can also use UpdateImpact (https://app.updateimpact.com) to view the tree in graphical form or view a tree of a single artifact available publicly using https://app.updateimpact.com/treeof,1524571349.0
kudah,Check out [https://github.com/estatico/scala\-newtype](https://github.com/estatico/scala-newtype),1524598881.0
clhodapp,I'm not a fan of the ability to insert the runtime test. It effectively makes every conversion to the newtype an extremely unsafe cast.,1524541022.0
yawaramin,"There are various 'value class' or 'newtype' options available for Scala, but I don't think I've seen the 'opaque type alias' trick wrapped up in an easy-to-use way before.

Detailed usage is in the gist, but quick example:

    object Main {
      import newtype.Newtype

      val Km = Newtype[Double](0.<=)
      type Km = Km.T

      def main(args: Array[String]): Unit = {
        val dist1 = Km(1)
        val dist2 = Km(2)
        val totalDist = Km(Km.value(dist1) + Km.value(dist2))
      }
    }",1524539373.0
yang_bo,What is the benefit in comparison to [refine](https://github.com/fthomas/refined)?,1524567670.0
yawaramin,"Slick operations are all expressed in terms of `DBIOAction`, which is a custom effect type. You get a `Future` only after running a `DBIOAction`. Queries can be composed lazily entirely using `DBIOAction` values, and only run when you need the results.",1524536139.0
jackie_pwn_asses,"I am not super familiar with DBIOAction, but if you look at how the conversion between DBIOAction and Future works, it's probably possible to adapt the code so that it instead returns an IO.

While this is probably better than going DBIOAction -> Future -> IO, you'll still want to be careful to understand the semantics of how your conversion works. ",1524536418.0
naftoligug,"If someone made a PR to Slick abstracting away Future, without breaking normal usage, I think a lot of people would be really happy about that.
That said, one big challenge is what to do about the fact that most of the DBIO APIs take an implicit ExecutionContext, to use when it's turned into a Future. Maybe those operations could be written independently for the different monad types. Or you could replace ExecutionContext with an abstract type, and in the IO implementation use DummyImplicit or something. Or maybe someone has a better idea.",1524549044.0
emilypii,"Here, go nuts and never touch `Future` - 

      def fromTheFuture[F[_], A](
        ff: F[Future[A]]
      )(implicit F: Effect[F], ec: ExecutionContext): F[A] =
        ff >>= (
          f =>
            F.async { cb =>
              f.onComplete(
                r =>
                  cb(r match {
                    case Success(a) => Right(a)
                    case Failure(e) => Left(e)
                  })
              ) // continue on ec
            }
        )

Whenever you have anything returning `Future`, wrap the call in either `Effect[F].pure` or `delay`, and pass it to this function and you don't have to deal with `Future`'s api pollution, and you can keep your codebase relatively clean for any `Effect`.",1524541719.0
pythonicus,Why not use a message queue and run nodes with subscribers to handle the background work?,1524506546.0
domlebo70,Maybe we should write a sidekiq like tool based around fs2,1524516599.0
,[deleted],1524537771.0
Milyardo,"Spark has a Job Scheduler, but that might be too large a dependency. As an aside, why do you care if the job scheduling library is Akka based? Not sure if I understand your concerns about dependencies.

You could schedule jobs with a Mesos client. There's probably some way to run mesos embedded.
 
It's a Java library, but there's [Quartz](http://www.quartz-scheduler.org/). Could also be considered a large dependency.
",1524504188.0
pavlik_enemy,"As far as I know, there is only one non-Ruby solution that is similar to Sidekiq - that is Celery for Python. No Java library provides the same set of features. Mike Perham (author of Sidekiq) wrote Faktory, but it also doesn't have ability to run jobs written in Java.",1524502025.0
ARainyDayInSunnyCA,"It depends on what on want you want to do in the background.  For the vast majority of the things I would push to Sidekiq in a Rails app I'd instead just execute in a Future inside the same process in Scala and use that work queue.  If it needs to be executed after a delay or repeatedly, and the task can be recreated if needed or it's ok to lose, then a scheduled thread pool can be used to create ScheduledFuture instances.  Usually this the thread pool is restricted to a single thread, and all the actual work is done in another future on the default ExecutionContext.

The tasks that remain tend to be more specialized and so are less likely to have a generic solution.  If you want to execute the work on a remote process but do so immediately then the task would be put on a message queue of some sort, like RabbitMQ, SQS (if on AWS), or Akka mailbkxes.
If you want to persistently store a delayed task then persist the details of the task in the data store of your choice and have a scheduled future that checks that, either in the same process or on a separate worker.",1524534054.0
jackcviers,Try [alpakka](https://developer.lightbend.com/docs/alpakka/current/),1524517006.0
kag0,"> is this the idiomatic way of making the actor system/materializer available to the http client?

No, you should probably be giving those to your client via some kind of dependency injection (see constructor dependency injection or the cake pattern).

Another HUGE thing: do not use `await`. Try 

     val r: Future[ToResponseMarshallable] = for {
       barData <- ...
       totoData <- TotoService.listToto(code)
     } yield barData match {
       case Some(c) => Toto(c, totoData)
       case None => StatusCodes.NotFound
     }

instead",1524537045.0
zzyzzyxx,"> is this the idiomatic way of making the actor system/materializer available to the http client?

I'd say no, because you don't need to instantiate a new client on every request. You can construct it once and reuse it. I'd say better would be to

- have `TotoService` as a constructor parameter for whatever class is creating this route
- have the `TotoService` constructor take the `ActorSystem` and `ActorMaterializer` as constructor parameters
- create the `HttpExt` instance inside `TotoService`, e.g. `private val http: HttpExt = Http()`
- call `http.singleRequest` inside `listTotos`, which now only accepts the parameters needed for the request
- remove the `extract*` directives from the route

Depending on how you're using this you might even be able swap out `singleRequest` for a cached connection pool instead of creating one each time, though `singleRequest` certainly is simpler.

> should i use the same thread pool as my server's actor system when making these service calls

If you do any kind of heavy processing when the future is done, no; use a different thread pool. However unless this is a super high-demand route, chances are you won't interfere with other actors and it won't make a big difference, plus you can always swap it out later if you find it is in fact an issue. On the other hand, putting things on different named thread pools can help debugging and be a nice conceptual separation of concerns.",1524501296.0
parc,"Don’t use await. Chain the futures together. Using await is going to block at least 2 threads to handle your request.

“Idiomatic Akka” would have you send a message to a worker to handle the client call, then when the client is complete send back a message to the original caller, which then completes the original request. At no point would await be used. 

Edit: I missed the async part (sorry I’m on mobile). I’d still recommend messaging over async/await",1524501250.0
m50d,"> is this the idiomatic way of making the actor system/materializer available to the http client?

Yes (though remember you can use `&` as a more concise way to combine multiple directives).

(I get confused by `async`/`await` but I'll assume they're doing the same thing as a `for`/`yield` here. I don't think `r` needs to be its own variable but that's subjective I guess).

> should i use the same thread pool as my server's actor system when making these service calls (i am now using import system.dispatcher inside the TotoService

If you trust that TotoService is implemented efficiently, or if your web service isn't usable at all without it, then yes; if TotoService is unreliable and/or secondary then no. Using the same thread pool for all operations is more efficient and avoids the risk of priority inversions etc., but at the cost that if you accidentally block inside TotoService (e.g. because you made a non-async HTTP call - not a problem if you're using akka-http client all the time) then you've blocked a web dispatcher thread and if you block all of those then your server can't respond to requests until one of them unblocks. If you give it its own thread pool then it's more compartmentalized, but the cost of that is that threads from both thread pools will be competing for CPU (or you'll have to run half as many threads in each pool).",1524500375.0
continuational,I'm working on polishing up [React4s](http://react4s.org/) for release 1.0.0.,1525229039.0
inejc,"Added a hyperparameter search functionality to [doddle\-model](https://github.com/picnicml/doddle-model) \(an ML library I've been working on\). The API looks like this:

`val search = HyperparameterSearch[LogisticRegression](crossValidation, numIterations)`

`val bestModel = search.bestOf(x, y) {` `LogisticRegression(lambda = gamma.draw())` `}`

For other examples see [doddle\-model\-examples](https://github.com/picnicml/doddle-model-examples).",1524595723.0
kag0,"A library implementation of the JOSE suite (the standards JWT are built on) for scala. I'm running up against trying to balance making things extensible but still type safe when parsing them.  
Does anyone have patterns they like for parsing things into one of potentially many classes, and allowing the user to define some of those classes?",1524549024.0
sjrd,"Writing my thesis ...

which is about the design of Scala.js, so it's almost relevant 😅",1525412291.0
JiminHsieh,"I created an Scala and sbt Docker images. The difference between mine and others are:

* My images only use JVM passed TCK.
* I uses Azul Zulu and AdoptedOpenJDK's OpenJ9 for now.

My plan is:

* If AdoptedOpenJDK releases HotSpot's version that passes TCK in the future, I will add that too.
* Add Dotty.

Any suggestions are appreciated! :\)

[https://github.com/jiminhsieh/scala\-sbt\-docker\-images](https://github.com/jiminhsieh/scala-sbt-docker-images)

[https://hub.docker.com/r/jiminhsieh/scala\-sbt/](https://hub.docker.com/r/jiminhsieh/scala-sbt/)",1525311929.0
adrice727,"I'm working on [firebase4s](https://github.com/firebase4s/firebase4s).  I would really like to add `case class` support, but I'm pretty much lost with `macros`.  ",1525360518.0
justinhj,"I spent the weekend playing around with Monix Task and wrote this blogpost
http://justinhj.github.io/2018/05/05/hacker-news-api-4.html
",1525662459.0
emilypii,"With the new `http4s` backend, we (meaning myself and [@jmcardon](https://github.com/jmcardon)) were able to push a [minimal application](https://github.com/jmcardon/IOPort) to 60,000rps on a single `m4.large` node using different `Effect` backends, including the new Scalaz 8 IO bifunctor (others include `monix.eval.Task`, and `cats.effect.IO`). 

Now, while this wasn't sustained for long periods of time, it shows that in Scala, we've reached a point where purely functional code is now outperforming more imperative solutions such as `play` or `akka-http`, and I would urge you to consider looking to `http4s` for performance.

That being said, performance isn't the prerogative of functional programming in general. Correctness and composition are the point, less the naive interpretation of ""speed"" people tend to use to describe a program.

Also, I notice someone dropped Techempower. Take them with a grain of salt - I'm currently working to implement a new `http4s` benchmark, as the one that was previously used for the February test was 2 years and 3 major versions out of date. Also notice that the `akka` and `Play` benchmarks feature some highly non-standard JVM flags to prop up scores. I've raised an issue with Techempower about this, who have agreed to standardize all benchmarks on the JVM with a standard set of flags.",1524457586.0
jackcviers,"Ok. 8k per second should be relatively easy.

If you are relying on your rest server to be read after write consistent, stop. Writes need to be asynchronous -- you post, it goes into a queue, and gets handled in due course by a worker.  Your client app should manage any state you post internally, and reconcile that with the server.  That's what the entity manager does in Spring, for example. If you delete, and the delete comes back successfully, remove the object from any internal client app storage without immediately reading via get. If you don't control the clients, put a cache in front of the backend storage, read from the cache and only refresh it after each worker queue process success or some small period of time.

Basically, don't do processing in post, delete, or update, just shove it onto a queue and return success.

Your reads should be cached for some period of time, generally your average queue processing latency. Any writes you do will eventually show up on the read side, but they shouldn't really do any processing either. Just read from storage.

Now your concern becomes latency -- how quickly you can process your worker queues. The nice thing here is that, since each event is separate, you can pull huge batches off the queue, group events that have to do with the same object together, and process the groups concurrently. Fs2/akka streams/scalaz/monix are great at this stuff. You can use a separte cluster. By and large, you can scale workers horizontally by queue depth, or shard on event contents and scale horizontally with the different events you are getting, meaning you can scale more or less infinitely, and very reactively depending on overall load. Just make sure your memory or cpu (whatever yor processing bound is) is being fully used on your workers. Otherwise you aren't using as much of your box as you could be and are cost inefficient. You are free to reject requests while scaling your queue, just indicate that the client should retry the request via rate limiting or some other status code -- (420 enhance your calm status from twitter is an example of rate limiting, google it).

This means you have separated your concerns -- handling requests quickly is the webservers' job. Processing requests into domain data quickly is the queue workers' job, and that's easier when you don't have to boil the ocean on each request and can do 100s at a time.

If you stop waiting on io and post processing to return success, your servers will handle more requests per second. If your queue processing scales, your latency will be really small, meaning your reads will be consistent. Happy hunting.",1524491441.0
ysihaoy,What's wrong with Alka http?,1524452936.0
threeseed,"So 500K/minute = 8333 requests/second.

From these benchmarks:
https://www.techempower.com/benchmarks/#section=data-r15

You should be able to hit them with any of the frameworks provided you use them appropriately e.g. lots of async/futures etc.

But I guess http://fintrospect.io is the fastest.",1524453087.0
HaydenSikh,"We use Finagle and have had good success, though I would have expected similar from akka_http.  

Some questions for you to consider:

* what are the performance characteristics of the business logic code separate from the REST framework? Could the bottleneck be there?  
* Have you verified that you're not blocking any threads, spiking on CPU, thrashing memory with GCs?  
* How large are the bodies of the request and response, and how does that compare to the bandwidth available to the machine?
* Are you able to get enough connections from the OS or is the process hitting a ulimit?
* Are there other processes running on the same node that might be cannibalizing resources?
* my assumption is that you'd set thus up as multiple instances operating behind a load balancer to make it HA if nothing else. Does the total number of resources make sense for your load? For example, do you have enough cores for a reasonable requests per second per core?",1524491931.0
yawaramin,"You mention that you’re stuck on the JVM but open to anything reasonable, does that mean you’re considering reasonable options outside of the JVM? Or only JVM?",1524466132.0
,Are you not able to scale horizontally? Do these requests have to return sync or can they be dispatched as async tasks?,1524757721.0
amazedballer,"Use Play.  You should be able to get [10k per second out of the box](https://twitter.com/kevinbowling1/status/764188720140398592) easily.  Use the [REST API guide](https://developer.lightbend.com/guides/play-rest-api/index.html) with the Gatling load test.

Note that scalability and throughput are different: scaling means the performance you get when you add more servers, while throughput is the total number of requests, so it's possible to have a system that has great throughput, but doesn't add more throughput when you add more servers.",1524498785.0
littlenag,"Sorry to say it, but idiomatic Scala code won't scale to that kind of load. I've found that you have to drop back to writing either Java, or writing Java in Scala, when you need to support that kind of speed. For one project in particular there was at least an order of magnitude difference between elegant and concise Scala in a tight loop and the optimized Java version. Not surprising, I know, but the point is that you can't use the nice stuff if you are too resource constrained.",1524455333.0
Baccata64,Thanks for the dedication ! ,1524392900.0
truGrog,"These were great, thanks for posting them",1524498310.0
depleteduraniumftw,I'm not familiar with libsvm format. Why dynamic columns instead of rows? Rows would almost certainly be faster.,1524272954.0
JiminHsieh,"It seems you are beginning to approach to sbt. I will suggest you can read this slide \- [Sbt baby steps](https://www.slideshare.net/MarinaSigaeva/sbt-baby-steps). I think this slides is really great for anyone using sbt in the beginning. 

BTW, I notice a lot of people still use SBT to indicate this build tool. I just learned recently that it's only called **sbt.**

> the name sbt doesn’t stand for anything, it’s just “sbt”, and it should be written that way.

There is [more detail explanation](https://www.scala-sbt.org/1.0/docs/Faq.html#Frequently+Asked+Questions) at sbt web side.",1524279809.0
ewgxyz,You could try Mill http://www.lihaoyi.com/mill/,1524246669.0
ScalaWilliam,Please see: [https://github.com/sbt/website/issues/658](https://github.com/sbt/website/issues/658#issuecomment-382598236),1524281002.0
m50d,"> Alternatively, any suggestions on easier-to-understand build tools that work with Eclipse (and mixed Scala/Java projects) would be welcome.

Maven. Maven has excellent integration with eclipse (e.g. you can add library dependencies from a UI in eclipse, and they'll be added to the ""pom"" (build config file) and simultaneously updated in the eclipse project (no need for a manual regenerate step or anything like that)), is simple and well-documented, and builds Scala fine (you will want to add the scala maven plugin to your pom, and install m2eclipse-scala in eclipse). If and when you get to the point where you want to ""cross-build"" libraries (i.e. release and publish libraries for multiple versions of Scala), then it might be worth looking at SBT.

> Also, I'd like to be able to add external JARs to the classpath from a third-party library (in this case, JMonkeyEngine for a game project).

The best way to work with ""custom"" jars in maven is to install them into your local repository: https://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html (I mention this because one trap people sometimes fall into is trying to use ""system"" scoped dependencies for this; don't do that). But really you should avoid needing ""external"" dependencies entirely, and instead find the jars you need as maven dependencies. In the case of JMonkeyEngine: https://jmonkeyengine.github.io/wiki/jme3/maven.html .",1524486912.0
Milyardo,What resources on SBT have you been looking at already?,1524249801.0
eeperson,"It sounds like you want [this](https://www.scala-sbt.org/1.x/docs/Multi-Project.html) and [this](https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html).  Since you are using sbteclipse to generate your eclipse configuration, you should get the correct eclipse config if you have the correct SBT config.  My guess is that your current SBT won't run your project.

If you are having trouble with understanding SBT, I highly recommend reading the appropriate section in the [getting started guide](https://www.scala-sbt.org/1.x/docs/Getting-Started.html).",1524263458.0
Odersky,"I am happy to take any questions people might have on this.
",1524227443.0
emilypii,">become more opinionated by promoting programming idioms we found to work well

Do you mind elaborating on a few of these idioms?

>IDE support is provided by having dotc implement LSP

Is this necessarily a good idea? I understand the desire for a single, unified framework for working Scala 3, but then doesn't this couple LSP improvements with compiler release cycles, and therefore require Lightbend's commercial support? Additionally, this would harm 3rd party tooling working with the LSP. There is a robust subset of productive Scala programmers who disown IJ and VS in favor of things like `ensime`, which, though it may support LSP, would have improvements hindered by the aforementioned coupling.",1524235524.0
metaden,Just how fast is Dotty compiler? dotc (0 until 10) foreach println takes 15 seconds. scalac takes 9 seconds. But the generated bytecode is different. There is an extra private deserializeLambda in scalac version.,1524292285.0
acehack,"Slightly off-topic: Curious whether we'd see better support for non-IDEA and non-VS-code editors (the blog mentions exclusive VS-code support for now).

Scala has been my favorite and go-to language since a few years, yet the lack of stable Emacs support makes me sad. Ensime tries to do its job, but it crashes/gets stuck way too frequently :/ I know I'm supposed to investigate and file reports, but I'd love if there was a common and awesome tool which works across editors.",1524244549.0
Krever,"I always wonder if posting your own content is spam or not. Hopefully not :\) OTOH, if every speaker would post his talk here it would be kind of spammy.

Endpoints: [https://github.com/julienrf/endpoints](https://github.com/julienrf/endpoints)

Slides: [http://w.pitula.me/presentations/scalar\-2018/#/](http://w.pitula.me/presentations/scalar-2018/#/)",1524207374.0
aphexairlines,"Nice work -- this library looks great.

It would be interesting to see how interaction from non-Scala consumers would look like.  For example, suppose a different team working on Android and iOS apps needs to call your service -- where should they look for your service definition and which type-safe clients would they use?

The comparison to Thrift and Protobuf (or protobuf-based RPC like gRPC or Twirp) discards them based on the fact they use a custom IDL and code generation, but would be nice to also discuss how Endpoints solves the problems they tackle: cross-language service specs, compact data on the wire, type-safe clients in a variety of languages.",1524212271.0
JoanG38,"Hey!

We open sourced recently our CI/CD as we do all our DevOps with Scala at DriveTribe.
No unsafe Yaml files, no Jenkins pipeline Groovy script. Bringing the functional goodness to the DevOps world!

Do not hesitate to ping me if you have any questions.

Thanks",1524175764.0
astevetime,I tried a couple of plugins for vim for awhile and eventually gave up. I now use vim bindings in Intellij. ,1524154547.0
volpegabriel,"I suggest you to keep an eye on [Scala Metals](https://github.com/scalameta/metals) which is a Language Server for Scala. It's not production ready yet but I think it will be one of the best solutions out there in no time.

I wrote some instructions and the features that I got working on `NeoVim` at the moment [here](https://github.com/gvolpe/vim-setup).",1524189699.0
CaffeinatedT,IntelliJ has an option to use Vim style controls if you want. Personally as someone who used Vim for a long time before picking up scala and intelliJ I went for their interface and keep Vim as something for small scale modifications. ,1524157095.0
yoohaemin,I'm using Spacemacs with Ensime and it's great. Spacemacs supports all of the vim keybindings but with its own shortcuts that are a joy to use as well. (and it's prefixed with a spacebar so there are no conflicts),1524160227.0
Milyardo,"For a similar setup, we're going to need a few more clues to what environment you're referring to. Are you asking for help with setting up ensime specifically? If not, might be better to /r/vim on what non-scala specific plugins may have been used.",1524154903.0
ancientmatingcalls,"The setup describe in this article is pretty nice:
https://medium.com/@alandevlin7/neovim-scala-f392bcd8b7de",1524159642.0
SoftwareDevStoner,I have a basic guideline listed at  https://github.com/DeveloperMeier/dotfile for setting up Vim to work as a Scala IDE but as most others have already stated it just ended up being easier to use IntelliJ with Vim bindings overall.  ,1524167781.0
DrKedorkian,"Derek Wyatt has a Scala plugin for vim.  Ensime is good , also there are ctags things out there, on my phone atm.

Also I've been using neovim lately, pretty nice",1524176227.0
flylikeabanana,"One vim plugin that served me well while I was using it was ctags. It doesn't natively support Scala, but you can use a few simple regexes to get it configured properly. It enables a JTD that doesn't rely on any language server, and complements the vim style much better than ensime IMHO",1524235427.0
bogoris76,"This is an illiterate setup (no attempt to be  an IDE) I use: 
[sctags](https://github.com/luben/sctags)
[fzf](https://github.com/junegunn/fzf)
[vim-scala](https://github.com/derekwyatt/vim-scala)
[vim-lsp](https://github.com/prabirshrestha/vim-lsp) (with sbt 1.x)

Did try ensime several times, but it was either broken in vim or sublime and resource hog. I use gvim in combination with Zeal, tmux and zsh. For refactoring, heavy typed stuff or implicits foo I use idea.
",1524518883.0
Panthros,"Give NeoVim a try

[https://neovim.io/](https://neovim.io/)

NeoVim \+ Scala

[https://medium.com/@alandevlin7/neovim\-scala\-f392bcd8b7de](https://medium.com/@alandevlin7/neovim-scala-f392bcd8b7de)",1525293800.0
time2java,You can use vim but WHY?,1524223013.0
raghar,"Now, it makes be sad, since Monix Task that I use looks the slowest. Hopefully Scalaz 8 is released soon, and Monix optimization will resume (because it will have still target to benchmark against).",1524129558.0
oleg-py,"The benchmarks on other libraries look suspicious. It seems it's comparing Arrow composition vs Function1 + your Task / IO / Monix composition, as opposed to using Tasks / IO directly.

Looks promising though. Worst case is that maybe we can get a faster Kleisli :)",1524130023.0
haimez,"I'm curious to see the benchmark results running in Graal. Just speculating, but I'd guess that the synchronous benchmark results would improve across the board in terms of inlining and allocation rate with as a result of partial escape analysis and better optimizations.",1524188859.0
stonerbobo,whats the usecase for something like this?,1524078098.0
Milyardo,"It's not as though Scala Native was started as a project with ignorant of what Graal and Truffle has been up to. It's really not a replacement. Scala Native still offers a way to build scala programs without a GC, which Graal does not offer. It also provides a way to express C structs and primitives in Scala, which Graal does not. In the case of the linker and whole program optimizer, it's has still needed on the JVM even without graal, it's also needed in Scala.js still.

> As a bonus GraalVM also makes polyglot interop with languages like C++ and Rust much easier than was previously possible.

That was a pretty easy thing to before using the LLVM toolchain, you just had to leave the JVM runtime behind. Now you don't have drop the JVM with the Graal toolchain, however there's no shortage of people who want to use Scala without the JVM none the less.",1524062836.0
raghar,"While I like the idea behind Graal, I think you are proposing is dangerous.

We do not know how long it will take for Graal to achieve its goals.

We do not know when companies will consider it production ready.

Whole program optimizer - that I am certain - will do a better job then even AST-based optimizer for Graal. It will supports non-Graal JVM, Scala.js and Scala native.

IMHO it would only result in a similar issues like with game developers and graphic drivers developers: game devs want to optimize things, but drivers are doing smart things, so developers try to guess what driver will do and write the game they predict driver will try to opimize things, then driver devs, try to guess how game devs changed their flow...

As a result instead of one, solid, predictable driver you get game-specific hacks by NVidia and AMD, than no new game can benefit from unless they cooperate with corporation to add new hacks for them. Except here Scala compiler devs would have to cooperate with Oracle. GraalVM has a fuck up in optimization? You cannot fix anything, only wait for next update. Then you could end up with situation where GraalVM opitimizes wrong way, but Scala is blamed for the result.

If with time Graal prove to be reliable enough, they might use their experience to use Graal for achieving their goals. Right now it is JUST a hype and at best Scala team can draft a PoC for Graal, but not support it officially.",1524063044.0
geggo98,"> To me it seems like it's time to scrap the Scala whole program optimizer, linker and Scala native projects, and instead focus on contributing to the Graal project. 

Scraping these projects is a little bit over the top. While they might not be useful for you, these projects are doing fine and ate useful for a lot of people.

But of course you are totally free to contribute to GraalVM, e.g. provide better integration with Scala. A plug-in for sbt could be a start (or cbt or mill).

Some competition between the different Scala projects is always good. Even the scalaz / cats schism sparked some nice projects.",1524084019.0
argv_minus_one,Is this meant to replace HotSpot?,1524105798.0
bgeron,"I would be very wary. Rumour has it that Oracle, the company behind Graal, has just taken an app off the App Store [for having the word Javascript](https://twitter.com/BrendanEich/status/986605049987002368) in the title because Oracle owns the trademark on Javascript. The trademark is believed to be not defensible in this case, but good luck fighting Oracle's lawyers...

Who knows what other shit they will pull once you rely on Graal. Oracle has no morals.",1524073395.0
jackcviers,"I think you would need to make a sip proposal for the scala center to consider for this to happen. You also would need to come up with a strategy for DOTTY, as I think both scala and DOTTY use the same compiler backend, though I may be remembering that incorrectly.",1524061952.0
sciss_,"Anybody know if Graal will work with wasm? That would interest me a lot for Scala, and wasm is declaredly not going to happen with Scala native.",1524088648.0
tibodelor,"Sounds awesome! Oh wait, it's Oracle... No thanks...
",1524103604.0
CarelessEstimate,"I'm not sure I know what you mean. Are you saying that you have lines that can be either ""2_label2_1"" or ""2_label2_2"", and that you want to split them by the last character? In that case you could do something like this...

    val Array(one,two) = scala.io.Source.fromFile(filename).getLines.groupBy(x => -x(x.length-1)).values.toArray

Where one is an Array of the lines that end in one and two the lines that end in two. Probably not the best way but if your file is relatively short then this should work well enough.",1524029207.0
StrangeAeons,This is great!,1523991751.0
chaotic3quilibrium,Excellent! Tysvm for investing here.,1524058341.0
,[deleted],1524155130.0
volpegabriel,"Great article, I enjoyed reading it and just retweeted it! 

PS: As I went through it I noticed some small typos and mistakes you might want to fix :)

> all three notations does the same

do

> As said, the kind-projector is simply a sbt plugin

scalac plugin is the answer as you fixed it at the beginning of the article :)

> Here, we need more parameter, a Comonad, to be able to run the Free[S[_], A]

one more parameter? parameters?

> With lefty, it would resolved [T, U]InferToLeft.V[Tuple3, Boolean, T, U] <=> [T, U](U, T, Boolean), NOT our definition!

would have",1524021503.0
Milyardo,kind-projector is not a sbt-plugin. It's a scalac plugin.,1523986009.0
marcinzh,"Would there be need for partial unification, if Scala had variadic **type** parameters? Something like:

    def show[F[_, _*], A](f: F[A, _*])
    def show2[F[_, _, _*], A, B](f: F[A, B, _*])

Where `_*` has double meaning, just like `_` has currently. On the left it indicates kind, and on the right it means existential type(s).",1523992686.0
johnynek,Performance benchmarks would be nice. It would be nice to make this API as fast as fastparse.,1524284271.0
WallyMetropolis,"You may also consider using Zeppelin. It works great with Scala, Python, JS, and quite a few other languages, databases, and frameworks. ",1523983020.0
nrlb,I have been using and enjoying beakerx for jvm kernels.  Very easy to install and get up and running.,1523984005.0
LPTK,"I've tried it, and it worked well for me. [Here is me](https://youtu.be/u3OE61-6bUk?t=255) using it live during a presentation.

There is an easy way of adding a dependency that I think was not very well documented when I started (and the other ways did not work), which is to use the way ammonite does it:

    import $ivy.`organization:project_2.11:version`",1523985520.0
oleg-py,"I have tried two kernels, IIRC those were IScala and jupyter-scala. The latter is usable, but the experience was not too enjoyable and I ended up switching to Ammonite + Scastie + Intellij worksheets / scratches. In particular, no kernel supported 2.12, and it doesn't seem anything has changed on this.

Scastie is nice when I suddenly have an idea and want to check it out, because it's very easy to add 3rd-party dependencies and edit the code after you've ran it. Intellij worksheets automatically give me all dependencies I have in my classpath and my own classes, so for experimenting with actual project code it's quite awesome. Ammonite is a better REPL which I often use to check the code before posting for somebody's question on Gitter.

YMMV, of course. I use Scala for libraries and webapps, mostly in a purely functional style too.",1523978963.0
TinBryn,"Just a small correction you stated that `Cons` takes a `Cons` as it's tail, but it actually takes a `List` as it's tail.",1524011150.0
yawaramin,"Hi, has anyone been able to get Ensime + VSCode Scala Language Server extension to work as shown in the readme? I’ve done the following:

- Set `JDK_HOME` correctly in both Windows environment and Git Bash
- Run `sbt ensimeConfig` successfully on my project
- Started VSCode in my project root directory so that the `.ensime` file is in the project root

I’m seeing the following issues:

- Hover tooltip message is consistently ‘Loading...’
- Jump to definition doesn’t work

However, I am seeing error messages prefixed with `[Scala]`. So it looks like errors from the presentation compiler are showing up, but not the messages from Ensime.

Would appreciate any thoughts on this.",1523902145.0
WallyMetropolis,"This one is super general and vague. I've been looking into the fundamental FP structures (Functor, Monad, etc) and for the most part, they're either straightforward, or there are lots of good examples of how to apply them. But I'm having trouble seeing where Applicative Functors fit in. 

What does `apply` get me that `map` doesn't, and what is a common use for it? It seems to me that both `map` and `apply` let me take an `F[A] -> F[B]` if I have some way to go from `A -> B`. 

Where do I find a `F[A -> B]`, for example? I can easily imagine having an `A -> B` that I want to use, and then I suppose I could lift it into my functor with `unit`, but then, why wouldn't I just use `map`?",1523897045.0
antilogos,"Hello there!
I currently got a bug for more than two weeks that I decided to spend a hours to delve into the root cause.  
I shortened my code to this and I can't understand why Scala is doing this, though I have some idea:  

    val test = {
    if(1 == 1) List(""A"")
    else {
      List(""B"")
    } ++: List(""C"", ""D"")
      }  
  
Is returning A, and:  
  
    val test = {
    (if(1 == 1) List(""A"")
    else {
      List(""B"")
    }) ++: List(""C"", ""D"")
      }  
  
Is returning A,C,D. (I also used +: and works the same, using scala 2.10.5, in console line)  
Anyone with a clear explanation would be welcome.  
Thanks.  ",1523886008.0
strawman53,"In algebra and also referencing the Spire library, if multiplication of alike types is defined by the typeclass `MultiplicativeSemigroup[A]` and multiplication of unalike types yielding one of the same types is defined (with some caveats) by `Module[A,V]`, what is the name for multiplication of unalike types yielding a third (Out) type? As you would use for say, Voltage = Current * Resistance, or Mass = Volume * Density.
",1523927289.0
dxplq876,"Does shapeless have anything like a type constructor list?  I've been looking, but I've only been able to find hlist",1523898776.0
strawman53,"I have a hobby project where I want to be able to build a function graph using the usual mathematical operators (and other simple mathematical functions) to simulate something. I want to be able to both run this 'forward' as a Simulation, and also express it as an Optimisation Problem of the usual form (Min/Maximise y as a function of variables x1, x2..., subject to constraints a, b, c). This would be translated via typeclass to a solver or language, for argument's sake, let's say translate to [AMPL](https://ampl.com/). 

There seem to me two obvious ways to approach this and I've explored both a little. I'd like advice:

1. Simulation-first. This follows the expected usage pattern. Build the function graph using regular functions and/or lambdas (and/or a general function like `trait HFunction[A<:Hlist, B<:HList](transform: A=>B)`). Constraints are expressed as predicates. To translate, need to de-compose the functions into individual operations, which I suppose would have to be done using macros. That's the biggest unknown for me as I haven't used macros before. What's possible and what's not, what are the tricky bits (perhaps closures)?. How difficult would it be?
2. Optimisation-problem-first. Build an embedded DSL in the usual way based on an `Expression[A]` trait and with lots of Ops classes to provide the desired operators. Translation/Interpretation is easily defined after this. It's much more obvious how to transform from this expression tree to a function graph than the reverse. I'm leaning towards this approach for this reason. What's holding me back is that I think the usage of this library would typically start by expressing the simulation-side *first* i.e. the function graph, and this approach complicates the API. The things flowing through the function graph then need to all be `Expression[A]` or containers thereof, and not plain old Case Classes, which is what I initially envisaged. I might be able to neaten or hide this, but think I'd have to abandon regular scala functions and define some lovely new operator like `=====>>>>>` to do so, which I'm not that enthusiastic about. Any suggestions here? 

I'm relatively new to the functional and shapeless side of Scala (and enjoying it) and have done quite a lot of reading, but missing actual experience in some of these features. Answers to my specific questions and any relevant examples from elsewhere would be much appreciated.",1523925887.0
a_masculine_squirrel,"So I'm a software engineer and I'm learning Scala on the side, and I'm trying to understand what exactly sbt is. Is it possible to separate Scala from sbt, because I could only install Scala with sbt which was a little strage. 

It's a build tool I get that, but it's also a package manger? Am I understanding that correctly? I'm working through a tutorial of Scala and I'm seeing:

    sbt new scala/scalatest-example.g8

What exactly are .g8 files? I didn't find anything sufficient through Google. Also, why *wouldn't* I use sbt if sbt is build tool that scala provides? 

Thanks! 

",1523993584.0
minato-yellow-flash,"Any `Semigroup` can be extended to a `Monoid` by adding an identity element right? Is there, a `Monoid` instance for any `T` for which there is a `Semigroup`  instance by wrapping that in `Option` in `cats`? I have been searching for that a while.",1524197655.0
fromscalatohaskell,When is https://github.com/scala/scala/milestone/72 hitting maven ?,1524225281.0
Sloshy42,"I'm exploring Akka and the utility of actors as a concurrency model to help build a small application that can take advantage of event sourcing. I have some questions about the intended ""patterns"" I should try to use with actors in my situation. A brief description of my problem domain is as follows:

I'm writing basically a glorified to-do list that works like a directed graph. Each node is a ""goal"" that has some attributes and references some data related to some media item (movie, book, game, tv series). All of the top-level nodes will refer to the set of all ""current"" goals that are being worked on, and goals are removed from the graph when they are finished, setting the next goal nodes as ""current"".

I'm wondering if it makes structural sense to model this kind of graph structure using actors, or to see if it would make sense to use some other concurrency abstraction. I'd like to do things like, say, execute reminder notifications at a certain time for each working node, or to be able to communicate with other nodes in order to distribute the graph structure and keep track of changes. At the very least, using actors for the currently-active goals and persisting the others until necessary seems like it's reasoable enough, albeit less flexible in terms of asynchronous messages coming from nodes (like, what if a goal you haven't started yet wants to send a notification or reminder to hurry up?)

With that out of the way, here are my questions:

* With akka actors, am I wasting my time if most of my actors do not have any kind of internal state? It seems to me like akka excels at stateful concurrency by enforcing a single task to execute at any given time for some data. Which of course is why I think it would make sense for my use case, but if I had a different use case, would I maybe be better off with just using some other concurrency abstraction?
* Where would reactive streams come into this? I'm familiar with Reactive Extensions, Project Reactor, Monix, etc. but I've never used Akka Streams. Can I just use a library I'm already familiar with or does Akka Streams somehow play better with actors?
* I've looked into Lagom quite a bit and it seems fascinating, albeit a little ""magical"" in how it handles things behind the scenes. One thing I find interesting is how ""Persistent Entities"" in Lagom are gotten rid of if they haven't been used in a while, for efficiency's sake. With Akka Persistence, is such a mechanism easily doable on my own?

Thanks in advance if anyone can point me in the right direction on this. I'll continue playing around with Akka, Lagom and other frameworks and abstractions but I thought I'd put this out there to see what people have to say.",1524325847.0
MichaelKirkham,"Probably a question you get often, but I wanted input from real users. I'm new to programming as in looking to start this summer learning wise. I would put me in the intermediate to advanced computer user. I understand how to manage pretty much all aspects of the gui component of windows and Mac computers, but haven't dabbled extensively in Linux builds. I understand enoigh to probably get entry level networking certifications from what I gather. But I'm not expert, and my limitations are also restricted by my lack of learning extensive use of cmd lines, but understand the importance and significance, laugh if you will. That's my ignorance and laziness.

All that aside as it's background info, I'm trying to determine the best programming course of action for me moving forward. From what I gather, everyone on quora and many reddit posts in non specialized it areas refer new people to python. They also suggest Java but primarily python.

Now, I'm not expert in web design by any means and only know how to read source code enough to understand locations of framework, and changes mostly in html, but a tiny bit in case, basics at least learned from a course in college 8 years ago. Though Its helped a bit over the years when I needed to look at source code for whatever reason.

Is Scala primarily more useful for website development? What benefits does it really entail for web creation?

How does it differ from python as far as web work goes?

Do I need to learn Java before going to Scala (seems like Scala intrigued me more than Java).

And would I best be served, focusing on python to learn app building and script writing, and getting used to local and cmd line aspects before jumping to Scala?
And lastly, why other programs do you recommend? 

Either way I want to dabble in both applications and web stuff. Can scan focus on application building and how fast is it in complete builds, am I referring to compiling or benchmark performance? Idk.


Any real user insight will absolutely be taken into consideration and I value all input and would appreciate anyone who would take the time to answer a question or give some information so I can pinpoint the best initial direction. ",1524867734.0
valenterry,"Very nice and a good proposal.
I find it really annoying to have `.attempt` return just a plain `IO` which could still contain an error.

I have one remark though (explaining it on IO).

In the beginning we just had IO which could contain an error or no error.

With the new approach we now have two ""types"". The old IO which can contain an error or no error and the new IO, which never contains an error. But there is still one case missing: what if we *know* for sure, that there is an error?
E.g. even with this new approch `raiseError` will give us a type that says `I may or may not contain an error`, but it definitely contains an error. We know that for sure but it is still not explicit.

I cannot really think of many usecases yet, other than `IO[A].raiseError(...).unsafeRunSync` should not return `A` but directly give the error because we know it *must* fail.

Maybe it is worth to model this explicitly, maybe the added complexity makes it not worth it. However, this new approach still feels to be missing something if we really want to make all the things we know for sure to be explicit at compiletime.",1523871530.0
grillorafael,"Do you have any CPU restriction on kubernetes? The company I work for is using and we are having no problems so far.
 
Flags that we use: 

`-J-XX:+UnlockExperimentalVMOptions -J-XX:+UseCGroupMemoryLimitForHeap -J-XX:MaxRAMFraction=1`",1523822476.0
rberenguel,We have an akka-http service under docker (we use the hseeberger/sbt image as base) and the service throughput is essentially the same as native from what we could see (at least under test loads).,1523816792.0
,"Have you tried it without the flags ?  I never did any official benchmarks, but have run several things on the JVM inside a docker container and didn't notice a slow down ( not to say there wasnt one ).",1523817037.0
NinjaPirate9797,"We use scala in production in a docker container, also from the hseeberger/sbt image as base. No performance drop, by packaging it as a fatjar and then running with java -jar.

Try debugging performance with perf, see if you're making a ton of syscalls that docker is choking on.",1523925695.0
JiminHsieh,"From that peper:
> As we expect given their implmentations, containers and VMs impose almost no  overhead  on  CPU  and  memory  usage;  they  only  impact I/O  and  OS  interaction.

If you really worry about the network I/O performance, you could use **host network** at Docker instead of default network - **bridge network**. By using default network, your packets need to traverse through NAT, this why it will be higher latency than native in the paper.",1524057635.0
Judheg,"I thought I am going to wait until I have more material before sharing it to other people, but it seems I started to not have enough time for this, so if you guys have feedback or feel like contributing you will be most welcome.",1523741049.0
Mimshot,Just found out about scalaz3. Looks interesting. Is there any documentation on the dsl or usage examples? I can't find any. ,1523823892.0
NinjaPirate9797,"Resolved!

Here's some SMTLIB to solve GI, which can be backed out into scala pretty easily.

This intsantiation tries to find an isomorphism between a graph that has one node being the root, and two children in a complete graph.

    (declare-fun I!3 () Int)
    (declare-fun I!2 () Int)
    (declare-fun I!1 () Int)
    (declare-fun I!0 () Int)
    (declare-fun I!6 () Int)
    (declare-fun I!5 () Int)
    (declare-fun I!4 () Int)
    (declare-fun adj-g1-!7 (Int Int) Bool)
    (declare-fun adj-g2-!8 (Int Int) Bool)
    (declare-fun inj!9 (Int) Int)
    (declare-fun invinj!10 (Int) Int)
    (assert (distinct I!4 I!5 I!6 I!0 I!1 I!2 I!3))
    (assert (=> (adj-g1-!7 I!4 I!5) true))
    (assert (=> (adj-g1-!7 I!4 I!6) true))
    (assert (=> (adj-g2-!8 I!2 I!3) true))
    (assert (=> (adj-g2-!8 I!2 I!0) true))
    (assert (=> (adj-g2-!8 I!3 I!0) true))
    (assert (=> (adj-g2-!8 I!0 I!3) true))
    (assert (=> (adj-g2-!8 I!2 I!1) true))
    (assert (=> (adj-g2-!8 I!0 I!2) true))
    (assert (=> (adj-g2-!8 I!3 I!1) true))
    (assert (=> (adj-g2-!8 I!1 I!3) true))
    (assert (=> (adj-g2-!8 I!1 I!2) true))
    (assert (=> (adj-g2-!8 I!0 I!1) true))
    (assert (=> (adj-g2-!8 I!1 I!0) true))
    (assert (=> (adj-g2-!8 I!3 I!2) true))
    (assert (forall ((x!1 Int) (x!2 Int))
               (=> (adj-g1-!7 x!2 x!1) (adj-g2-!8 (inj!9 x!2) (inj!9 x!1)))))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!0 true)
                                                        I!1 
                                                                                 true)
                                          I!2 
                                                            true)))
               (= (select (store a!1 I!3 true) (inj!9 I!4)) true)))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!4 true)
                                                        I!5 
                                                                                 true)
                                          I!6 
                                                            true)))
               (= (select a!1 (invinj!10 I!0)) true)))
    (assert (= (inj!9 (invinj!10 I!0)) I!0))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!4 true)
                                                        I!5 
                                                                                 true)
                                          I!6 
                                                            true)))
               (= (select a!1 (invinj!10 I!1)) true)))
    (assert (= (inj!9 (invinj!10 I!1)) I!1))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!4 true)
                                                        I!5 
                                                                                 true)
                                          I!6 
                                                            true)))
               (= (select a!1 (invinj!10 I!2)) true)))
    (assert (= (inj!9 (invinj!10 I!2)) I!2))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!4 true)
                                                        I!5 
                                                                                 true)
                                          I!6 
                                                            true)))
               (= (select a!1 (invinj!10 I!3)) true)))
    (assert (= (inj!9 (invinj!10 I!3)) I!3))
    (assert (= (invinj!10 (inj!9 I!4)) I!4))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!0 true)
                                                        I!1 
                                                                                 true)
                                          I!2 
                                                            true)))
               (= (select (store a!1 I!3 true) (inj!9 I!5)) true)))
    (assert (= (invinj!10 (inj!9 I!5)) I!5))
    (assert (let ((a!1 (store (store (store ((as const (Array Int Bool)) false) I!0 true)
                                                        I!1 
                                                                                 true)
                                          I!2 
                                                            true)))
               (= (select (store a!1 I!3 true) (inj!9 I!6)) true)))
    (assert (= (invinj!10 (inj!9 I!6)) I!6))",1523925377.0
loicd,"20 years later, Java has generics, function pointers and should soon have data classes/pattern matching. And Scala went way further, thanks M. Odersky!",1523720383.0
merkucjo,"great find OP, I like what Odersky did with this pizza :D",1523719398.0
kpws,Humble beginnings,1523717872.0
sciss_,"> Two Ways to Bake Your Pizza (1766)

Over 250 years later, still the same. Pizza or Foccacia? To pineapple or not to pineapple?",1523783486.0
know_not_much,"I think this thread has gone sideways. I was not asking for ""generic"" DI approaches for Scala. I was very specifically asking for Dagger2. ",1523674646.0
amazedballer,"It’s a part of Play example projects. 

https://github.com/playframework/play-java-dagger2-example

It’s more suitable for Java though.",1523660072.0
volpegabriel,One of the approaches I like the best to do DI in Scala is using NO libraries! Write your code as Tagless Final algebras and you're done :),1523670698.0
TheOsuConspiracy,"Try macwire, I really enjoy using it.",1523662419.0
thesuperching,"I know Ariframe and Macwire.   
However I'm just using light cake pattern (learned it from Macwire's Guide to DI in Scala)",1523668459.0
kudah,"If you want a simple and straightforward DI framework, take a look at [DIStage](https://github.com/pshirshov/izumi-r2) – its logic is based on simple Scala collections, it's easily introspectable and can run at both runtime and compile\-time or even mixed!",1524063062.0
elcric_krej,Wait... Why the f*** do you need DI in Scala ? Companion object should be enough for that.,1523707684.0
phazer99,"I wouldn't go as far as MercurialHacked and say that asynchronous programming is a fad, but it's definitely overused, especially in the Scala world (actors are probably the worst offender). Asynchronous code using futures or actors is orders of magnitude slower and more memory hungry than plain synchronous Scala code, and if the database is the bottleneck an asynchronous system will not scale better, just waste more CPU cycles. So before deciding on an asynchronous system make sure that what you lose in code simplicity and performance is compensated for in terms of scalability.",1523654442.0
MercurialHacked,"asynchronous programming is a fad that would be best off dying. Most people aren't writing services where the performance difference between blocking and non-blocking matters. Are you writing a service that executes individual requests in microseconds of CPU time, and does the majority of its work by performing network I/O operations against other services? If not, blocking code is going to perform fine for you. If you are, then even the abstraction of completable futures has a high enough performance and/or memory pressure penalty that you're probably better off sticking to callbacks. And, no, finagle/finatra services I've seen aren't operating at that level of performance. Even in most microbenchmarks the twitter stack fails to outperform Tomcat and the Servlet API.

On the other hand, writing synchronous code really *is* much easier. For those cases where you need to do things concurrently, it's *still* easier to write in a blocking style. Kotlin ""coroutines"" (they aren't really coroutines, they are ""one-shot"" delimited continutations) are definitely an improvement, and probably the best attempt I've seen at making asynchronous code easier on the JVM, definitely better than anything in Scala, but they fundamentally still have the same red/blue code problem as all other approaches.

Java/Scala programmers are generally wasting their time and money shifting to this paradigm. Maybe if the JVM gets continuations and fibers, then it may be worth revisiting, but at the same time those VM/runtime features usually come with a performance cost as well.",1523645509.0
fpggot,"I think this belongs here:
https://www.reddit.com/r/scala/comments/8axynb/who_is_hiring_monthly_rscala_job_postings_thread/",1523598918.0
JoanG38,"Hi,

We open sourced Orchestra (https://github.com/drivetribe/orchestra) recently, which is a job engine running on Kubernetes.

The transfer of context can be done with the return result of jobs, they just need to have a Circe Encoder/Decoder.

We've been using this for all our DevOps tasks, it replaced ou Jenkins CI/CD Groovy pipelines and Ansible YAML/bash playbooks, making everything with typesafe Scala.

Let me know if you need any help with it, I'm happy to help.

Cheers",1523614825.0
Christo4B,"We use [Chronos](https://mesos.github.io/chronos/) at Reddit, which is fantastic. It runs on top of [Mesos](https://mesos.apache.org/). I know it allows you to configure dependent jobs \(as well as the commonly used 'scheduled' jobs\). I don't know if it will handle the context transfer like you hope.",1523578953.0
volpegabriel,Sounds like a 20 lines program using [fs2](https://functional-streams-for-scala.github.io/fs2/) ;),1523587741.0
drodspectacular,"Check out Apache airflow. Jenkins and other CI tools do this too. You might also check out What's available with Finagle, Akka or Play for handling asynchronous tasks if you want any of this to be event or request driven within a service.",1523591144.0
threeseed,You could just use Spark Job Server to manage jobs. Then use JGraphT to handle the dependent management. ,1523575387.0
BitgateMobile,"One of the more important things I would want this job to do is this:

Consider the following scenario.

You have a job that's made up of multiple sub-tasks.  These tasks could include:

    Job 1
    - task 1: import data from website
    - task 2: process data using csv or some other similar tool
    - task 3: load data into a database
    - task 4: process data, retrieve specific fields, and calculate result
    - task 5: take calculated results and store in a database

Now, let's say tasks 1, 2, and 3 take about 10-15 minutes to run.  This means, each time you run the job, you can be guaranteed about 10-15 minutes of runtime.  And let's say something in task 4 failed after tasks 1 - 3.

Task 3 is a very simple task.  It's perhaps 30 lines of code.  But now, to debug what's going on, you are forced to re-run tasks 1 - 3 and watch the logs for task 4.

Let's further say that task 4 is assigned a payload ID as data moves down the line.  This means, task 1 has a payload ID, task 2, task 3, and so on.  Let's say that task 4 failed, and its payload ID was 195.

Well, now I can recompile the task, re-submitting a request to run my job from task 4, with payload ID 195.  Now it runs, and you see lots more debugging, but for some reason, it still fails, but only in a distributed setting.

So, now, tweak the job setting so it runs on a single partition, resubmit the job, run task 4, payload 195.

And on and on.  You can see, now, how powerful a debugging tool this could be.  Yes, an argument could be made that you can ""run the task from the command line and watch it.""  But you won't have the same distribution available, and payload mechanism that this server provides.

There's a lot to be said about being able to run a job at a certain point with a known dataset.  For us, it would save many hours of debugging and testing, and would gain productivity back.",1523589389.0
lu4nm3,Have you looked into Faktory? https://github.com/contribsys/faktory,1523597716.0
abracadabrazx,"Interestingly I have a need for a similar tool - a dependency graph (https://blogs.ncl.ac.uk/andreymokhov/graphs-in-disguise/) executor. In contrast, my domain is related to data analytics and machine learning so context transferring could be done by storing the intermediate results in HDFS. 

Also, I need to give the user an ability to define a job using other (more primitive) jobs and job combinators similar to those used in Akka Stream API (https://doc.akka.io/docs/akka/2.5/stream/stream-flows-and-basics.html#operator-fusion) via Python code.

Also, I have PoC implementation that uses RabbitMQ (via AMQP) to store job definitions and execute them in async manner occupying all of the available resources in a cluster. Plan to use Akka Cluster later (to get rid of RabbitMQ dependency).

Sadly I am unable to share that PoC work (because it's ugly) but would be interested to discuss and to see other ideas which try to solve similar problem ",1523613421.0
BitgateMobile,"I'll probably be creating something for this based on my needs.  I have a project that I've had in mind for a while, called Scattersphere.  As a result, I've created the project on http://www.github.com/KenSuenobu/Scattersphere

Feel free to take a look and follow it.  I should have drawings and such up soon, and should have some feedback from a work colleague regarding some job/task scenarios for the design.

Hope to have something design in the next few weeks.",1523846175.0
figaro42,"Have you looked at flowable?

https://www.flowable.org/",1523577157.0
AlexITC,"I haven't seen an open source doing this, it is not so hard to design a job processor that process a directly acyclic graph, we did this in a company I worked for and it was worked quite well.",1523574992.0
know_not_much,"I am also interested in this. PM me. We can team up and share resources.

So far it seems that libraries like Kamon and DropWizard have NewRelic plugins. So if we use these in our scala code, then we can publish to drop wizard.

Although it would be very interesting if there was OOB support available from the product (like finagle) directly.",1523583232.0
m50d,"I haven't used it with Finatra, but I used Kamon to get New Relic reporting from a scala app that used (scalaz) async and it worked nicely. Kamon apparently has support for Finagle futures as well, so that ought to work correctly.",1523619869.0
,[deleted],1523378445.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/functionalprogramming] [\[Blog\] The Science Behind Functional Programming](https://www.reddit.com/r/functionalprogramming/comments/8b7btp/blog_the_science_behind_functional_programming/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1523364496.0
lihaoyi,"Been grinding out Mill bugs recently and released version 0.2.0:

- https://github.com/lihaoyi/mill#020

There are a lot of fixes in this one; perhaps the biggest is first class Java support. The build files remain in Scala, but you can now build/test/publish pure Java modules & projects using Mill just as easily as Scala modules.",1523422425.0
paul_noth,I created simple Scala lib called [Tschingt](https://github.com/PaulNoth/tschingt). A reimplementation of [five.js](https://github.com/jackdclark/five) to Scala during my Scala/SBT learning process.,1523276399.0
estsauver,"I've been working on a typeclass/shapeless based approach to building admin pages. 

The common problem I was finding was building tables to display a plain Seq[SomeCaseClass] was getting really repetitive so I wanted to see if I could do better. 

I'm thinking I want to build an analogous crud db-fetcher for those case classes and show off a typeclassed based version of something that looks a lot like a RailsAdmin for scala.",1523448816.0
sciss_,"I have implemented a persistence layer for my [Patterns](https://github.com/Sciss/Patterns) library, an adaptation of SuperCollider patterns, that will be available in the computer music system SoundProcesses. Now the streams created from patterns can have their state preserved, which I think will open a lot of new possibilities for the compositional process. (that's work in progress)

Meanwhile, I realised I don't really like editing Scala code in my system (with its front-end Mellite), because the Scala editor is just too weak. Once again, I looked into alternatives of getting strong editing capabilities for Scala. The situation still seems desolate if you want anything beyond syntax highlight. So I warmed up again to the idea of utilising the Scala plug-in for IntelliJ. After looking into the IDEA-CE source code, it became obvious that there is simply no chance to create a stripped down ""library"" that would provide the editor. So I decided to give the opposite direction a go, see if I could instantiate Mellite from within IntelliJ. It basically seems to be possible, although I anticipate a lot of problems, e.g. my app uses its own database persistence and transactions which would need bridging to IntelliJ's state model, plus the windowing system is fundamentally different (docking vs. individual frames).

Here's my [proof of concept](https://github.com/Sciss/Mellite-IDEA) that the app can be embedded:

https://files.gitter.im/JetBrains/intellij-scala/3Woc/Screenshot-from-2018-04-15-13-38-13m.png

The big next question is if and how the Scala editor could be used from my program.",1523793161.0
EksitNL,"Ive been trying out scalaFX by building a small gui to encypt plain text using AES. Still figuring it all out but FX does look much nicer than swing imho!

 https://github.com/RobertLemmens/AES-Encrypter",1523824475.0
volpegabriel,"Paidy | Scala Engineer | Tokyo, Japan | ONSITE | Full Time | Competitive

I'm currently working here: https://engineering.paidy.com/

EDIT:

Here's something the website doesn't say yet (a new careers website is being built).

There are currently 3 backend teams using different technologies:

- API: cats, cats-effect, http4s, fs2, circe, quicklens, pureconfig, shapeless, scalacheck, scalatest.
- CORE: eff, grafter, http4s, akka, akka-http, cats, shapeless, pureconfig, quicklens, circe, among others.
- DATA: spark, hadoop, yarm, cats, cats-effect, among others.

I'm only sure about the API team that is where I work, the others could not be 100% correct.",1523279805.0
emilypii,"Cake Solutions | Scala Engineers (mid-senior) | NYC | Onsite | FT | Competitive

The NYC team is a fun, competent, and close-knit team of functional programmers (as in ref. transparency purely functional) working on large-scale distributed systems (think millions of users for your services). We work with libraries such as Cats, Scalaz, AWS (including libraries built to make it usable, like Scanamo). There are opportunities for internal talks, training other teams, as well. 

feel free to take a look, or pm for more info - [Full listing](https://cakesolutions.bamboohr.co.uk/jobs/view.php?id=6)",1523356776.0
BenFradet,"Snowplow Analytics | Scala engineer intern, consulting data engineer | London, UK | REMOTE | Full time | Competitive

We are looking for a remote Scala intern for the summer to work on [our open source codebases](https://github.com/snowplow/).
The internship will be centered around migrating our libraries from scalaz and json4s to cats and circe.
This is a paid internship and we're looking for candidates in UTC+/-5.

Job posting: https://snowplowanalytics.com/company/careers/?gh_jid=1107068

Additionally, we're looking for a Consulting Data Engineer to work with our customers to solve their data processing problems using batch and stream (Spark, Flink, Beam) on AWS and GCP.

Job posting: https://snowplowanalytics.com/company/careers/?gh_jid=1083969",1523359428.0
VigRoco,"APS Payroll | API Engineer III | Shreveport, LA | REMOTE | Full Time | Competitive

We are a payroll SaaS provider looking for a Senior-level scala engineer to help us build the next generation of our RESTful API services with the AKKA framework. We've not yet publicly posted this job, so you guys can have the first crack at it.

Responsibilities include providing technical leadership for our RESTful API platform, mentoring junior engineers, and working with me, the engineering manager, on creating a roadmap to meet the needs of the applications that rely on our API.

[company website](https://www.apspayroll.com/)

Questions, or to apply: jcraft@apspayroll.com

You can also PM for more info.",1523482478.0
RedditWithBorders,"Leapfin | Software Engineer | San Francisco, CA, US | Onsite or Remote | Full Time | $120k+

We are an enterprise b2b finance software startup based in SF SOMA.
Because we work with finance, we deal with lots and lots of data. We have found product/market fit and are growing rapidly. We are looking for a technical leader who can help us scale.

We are looking for someone able to collaborate well in a team environment and who always puts the customer first.

Job Posting: https://leapfin.com/careers

About: https://leapfin.com/about

Let me know if you have any questions!",1523318026.0
v_krishna,"Demandbase | ML Engineer, Principal Data Engineer, Data Integration Architect, others | SF & Seattle | ONSITE | Full Time | Very competitive 

We have a handful of engineering openings in both San Francisco and Seattle.  Check out https://www.demandbase.com/company/careers/#current-openings and feel free to message me on here or email vramesh@demandbase.com if you have questions. ",1523319765.0
openlawofficial,"OpenLaw | Scala Developer | Brooklyn, NY | REMOTE | Full Time | Competitive

ConsenSys is a venture production studio and the leading technology firm in blockchain globally. OpenLaw is a ConsenSys spoke. At its core, OpenLaw is a multi-module blockchain-based protocol and markup language to prepare, manage, and execute smart legal agreements.

We use Scala as our main programming language with JavaScript / React for our frontend. We have a strong focus on functional programming in our codebase. Experience with Akka and CQRS a strong plus.

Our team is currently remote across four continents.

Job Posting: https://new.consensys.net/careers/?gh_jid=1061221

Website: https://openlaw.io ",1523369198.0
pcejrowski,"Tapad | Software Engineer, Senior Software Engineer, Technical Lead, Site Reliability Engineer, Senior Data Scientist | New York City, US & Oslo, Norway | ONSITE | Full Time | Very Competitive

We are the team that cracked the code on cross-device marketing technology and a former Scala Center Advisory Board member. 
Join us!

Careers page: https://www.tapad.com/careers?gh_src=76cadk6s1",1523382107.0
mart187,"Autoscout24 | Scala / Software Engineer | Munich, Germany | ONSITE | Full Time | Competitive

I'm working as a developer there and am looking for future team mates to help with migrating some key components of our platform to Scala. The company has a huge non messy AWS infrastructure and a lot of developers dedicated to produce good software.

Tech we use (non exhaustive):

Play2, Cats, Shapeless, Monix, Circe, PureConfig, AWS (Lambda, most other available services)

Message me if you're interested.",1525898337.0
tsec-jmc,"I'd be against fragmenting communicating further in sparse chats.

Gitter is _very_ active. Especially the subchannels like http4s, scalaz, etc",1523293713.0
continuational,How does it compare to the existing forums/channels in the side bar?,1523274806.0
Nebu,I wasn't familiar with the idea. Very interesting concept. Thanks for sharing.,1523220426.0
richdougherty,"Some more reading on this idea from 2012, with updates about Akka and Cassandra:

> In Dean’s experiments, BigTable’s 99.9th percentile latency dropped to 50ms when he sent out a second, redundant request if the initial request hadn’t come back in 10ms—a 40x improvement.

http://www.bailis.org/blog/doing-redundant-work-to-speed-up-distributed-queries/
",1523229731.0
jvallet,I did [this](https://www.coursera.org/learn/progfun1) course in Coursera 2 years ago. It's a little bit to academic but do not regret doing it.,1523202645.0
ancientmatingcalls,"Like you, I bought the red functional programming book to start out. I found myself getting quickly overwhelmed by the syntax. I decided to pick up Scala for the Impatient and I'm really liking it.",1523206457.0
expatcoder,"Don't bother with FPiS (i.e. the Red Book) to learn Scala the language, you'd be much better off with Programming in Scala (3rd edition) for that.

If you want to learn functional programming, sure, by all means pick up FPiS, it's an amazing resource.",1523263516.0
ukralibre,Download underscore's books for free. It's a good start,1523202545.0
isomoar,"I'd recommend this guide https://gist.github.com/d1egoaz/2180cbbf7d373a0c5575f9a62466e5e1
",1523205692.0
silentraquo,"Unpopular opinion: don't bother with scalaz / cats / red book / other hardcore functional stuff until you've felt the pain of needing those things first hand. Otherwise you'll just end up cargo-culting complicated constructs with no benefit whatsoever.

The need for things like e.g. typed effects is entirely subjective. Only a subset of the Scala community values those things, while everyone else simply doesn't care to say anything, which is why it sometimes seems that there is a general agreement that haskell-in-scala is the only way to do Scala.

But it's not. Simple functional features like passing functions as values will take you very far, with a much gentler learning curve. Plenty of Scala teams work just fine without ever touching cats / scalaz / shapeless / eff / etc or being able to recite various FP definitions and laws from memory.

The coursera course linked in the comments is a great resource for things you should actually be learning as a beginner.",1523301862.0
PrimozDelux,"Ask a question on gitter! Start with a simple one to test the waters, and don't be dissuaded when the topic is a little abstract

(don't know why I'm getting downvoted, gitter has been super-helpful for learning scala for me)",1523203808.0
WizzieP,"I recommend working with the red book second, after you are finished with the resource you chose.",1523206920.0
blargeyparble,"To get the basics down, exercism.io is good across most languages.",1523243443.0
llaine33600,"I don't know if it's relevant but building stuff using Elm helped me a lot to program with Scala on a daily basis. 
Teaches you a lot of concept of FP with a simple syntax which makes coming to Scala afterward way easier. ",1523265736.0
naftoligug,Should say scalaz 8 vs...,1523164586.0
refrigerator11,"Not trying to be offensive but I think going for one extreme is a bit incorrect. Future/IO/Task are definitely a simpler and conciser approach. They are suitable for general use cases which are the huge majority, so it actually makes sense using them most of the time. On the other hand, Akka actors are a bit more flexible (and a bit more verbose at the same time). Just a few use cases that come in my mind:

* ES + Persistence (although this one is arguable, depending on what system you are trying to build you may want to use a distributed messaging system like Apache Kafka instead). 
* Speaking of Apache Kafka, it feels like Kafka Consumer Actors (from [Scala Kafka Client](https://github.com/cakesolutions/scala-kafka-client)) are more flexible than Kafka Streams (although I must confess I haven't used it, this is mainly based on a quick research and general knowledge about streaming). Is it possible to have IO based Kafka consumers that are flexible enough to have things like an in-memory thread-safe cache? 
* Another use case for actors is distributed computing that looks like it was covered in the presentation. It has its own disadvantages but it still covers some use cases that IO/Task/Future don't.

It is important to have a pragmatic approach and pick a tool that is most suitable for that job. Most of the time IO/Task/Future are the simpler and conciser solution but we shouldn't forget that sometimes Akka Actors are very handy.",1523193140.0
Mimshot,Is there code somewhere? This seems like a comparison between vaporware and a mature platform currently being used in production at scale. Of course the fake interface will be cleaner.,1523206159.0
yawaramin,I think John is conveniently forgetting the main value proposition of an actor system: fault tolerance. With the IO type I’m manually implementing failure handling and recovery at the individual function level. With a supervision tree I’m designing my error recovery strategy top-down over my whole system.,1523171030.0
argv_minus_one,"Saying scalaz is “easier to understand” is like God telling you He doesn't understand why you're trying to make a warp drive, when it's so much easier to just alter the laws of physics. It's only easier if you're God!",1523172377.0
The_Ghost_Light,"Second Google result gets this: https://github.com/jakehschwartz/finatra-swagger

This is a fork of xiaodongw's library, but updated for Scala 2.12 and newer Finatra versions.

edit: sorry for all the edits. The more I look in the more context I see. Xiaodongw api is different from paradoxical or jakehschwartz's. getWithDoc takes the place of get("""", swagger{}). The jakehschwartz link above has a proper readme to walk you through it.",1523154391.0
monumentshorts,"I own https://github.com/paradoxical-io/finatra-extensions and use finatra with it. If you give it a shot feel free to ask me questions if you have issues 

Also a fork of the original swagger you linked. I also added support for value class wrappers with swagger too. It’s available on maven central

My version also exposed redoc as well as swagger for your favorite flavor of api documentation 

Just noticed you said you already tried this but didn’t know how to set it up.  Paradoxical is literally the same as the old swagger lib just it’s available for 2.12

If you wanna use the other finatra tools you can look at my sample server https://github.com/paradoxical-io/finatra-extensions/tree/master/finatra-server/src/test/scala/io/paradoxical/finatra/sample

Api endpoints are at /api-docs/ui and /api-docs/model

Redoc is at /api-docs/redoc 

https://github.com/paradoxical-io/finatra-extensions/blob/master/finatra-swagger/src/main/scala/io/paradoxical/finatra/swagger/SwaggerController.scala

The paradoxical lib also adds swagger resolvers for finatra wrapper types or paradoxical wrapped types (I use paradicail wrapped types since I put them in a lightweight dependencyless library, unlike finatras which are tied to finatra) https://github.com/paradoxical-io/finatra-extensions/blob/master/finatra-server/src/main/scala/io/paradoxical/finatra/swagger/SwaggerResolvers.scala

https://github.com/paradoxical-io/scala-global/blob/master/global/src/main/scala/io/paradoxical/global/tiny/Tiny.scala

And if you go that route I also have jackson modules to serialized and deserialize tiny types as their proper underlying newtype. https://github.com/paradoxical-io/scala-global/tree/master/jackson/src

I also have a spattering if other utils available https://github.com/paradoxical-io/scala-global/tree/master/util/src/main/scala/io/paradoxical

Including stuff like scala to java future conversions, string implicit tooling, etc. check the tests if you are curious 

If you want to learn more I can spend some time this week and make readmes so it’s less hidden away :)",1523716512.0
Daxten,"ah nice, I could need this! Will test it out soon :)",1523094814.0
v_krishna,"What would list do for a redis backed store? Keys with a glob? It's a big no no to do that in production, but I don't see what else you could do besides scanning all the keys and pattern matching client side.",1523123825.0
SystemFw,"This is cool stuff and in fact we've already added it to our README :)

One question on the example code:

    srcStore.list(path).filter(!_.isDir).evalMap { p =>
      val contents: fs2.Stream[F, Byte] = store.get(p, 4096)
      val sink: fs2.Sink[F, Byte] = dstStore.put(p)
      val transfer: fs2.Stream[F, Unit] = contents to sink
      transfer.compile.drain
    }

Any reason why you did `.evalMap { ...; transfer.compile.drain }` instead of simply `.flatMap {...; transfer}` ?",1523220487.0
TheOsuConspiracy,"Looks way overcomplicated for no reason imo. When programming in Scala, best to just forget most of Java's design patterns.",1523031197.0
Ironballs,You don't really need to do any of this. You can use [path-dependent types](http://danielwestheide.com/blog/2013/02/13/the-neophytes-guide-to-scala-part-13-path-dependent-types.html) to achieve what you're after.,1523034989.0
noel,"This method

    def build(isMaster: Boolean): Box[T] = {
      if (isMaster) buildMaster() else buildSlave()
    }

is trying to shift information from run-time (when the *value* of the `Boolean` is known) to compile-time (when types are known). That isn't going to work.

I'm not really clear on what you are trying to achieve. You described the component part, but you just kinda stopped when you got to describing the product part.",1523033580.0
Milyardo,"I'm not sure I understand the root of the problem being solved. There's too many accidental complexities and things wrong with the example to begin addressing the root problem.

Why is `MasterSlave` not sealed? Why is Covariant on `T`?

why is `Box` Covariant on `T`?

Why have both `Component` and `MasterSlave`?

How married are you to this nonsensical pattern? Why not just use a type class?",1523053779.0
volpegabriel,Sounds like a very complicated way to see such a simple thing. You should look into Phantom Types and Path Dependent Types if you want a more functional approach.,1523112420.0
m50d,"The usual way to do this is with the cake pattern, mixing in traits that have type members, something like:

    sealed trait Mode
    case class Master() extends Mode
    case class Slave() extends Mode
    trait ModalContext {
      type Mode
    }
    trait Component[M <: Mode]
    class MasterComponent extends Component[Master]
    class SlaveComponent extends Component[Slave]
    trait ComponentBuilder extends ModalContext {
      def buildComponent: Component[Mode]
    }
    // Box doesn't need to know about master/slave-ness, that's all in Component, right?
    // Certainly you don't seem to need two layers of sealed trait - either you have two different
    // kinds of boxes in which case there is no need for a shared Component trait, or you have
    // one kind of box and two different kinds of Component
    case class Box[M <: Mode](component: Component[M])
    trait BoxBuilder extends ComponentBuilder {
      final def buildBox: Box[Mode] = Box(buildComponent)
    }
    class MasterComponentBuilder extends ComponentBuilder {
      final override type Mode = Master
      final override def buildComponent = new MasterComponent
    }
    class SlaveComponentBuilder extends ComponentBuilder {
      final override type Mode = Slave
      final override def buildComponent = new SlaveComponent
    }

    def boxBuilder(master: Boolean): BoxBuilder = if(master) new MasterComponentBuilder with BoxBuilder
       else new SlaveComponentBuilder with BoxBuilder

    boxBuilder(true).buildBox

Bear in mind that even this much is often considered unnecessary overengineering. As others have said, maybe clarify what you're trying to achieve with all these layers of components. Often a ""factory"" is overkill in a language with first-class functions, a ""builder"" is unnecessary in a language with named parameters, and so on.",1523283820.0
jokasx,Thank you. It's great. Helped me bridging some gaps between actors and streaming.,1523061164.0
Apterygiformes,"Really kind presentation, thanks",1523101975.0
cairadacb,"Great summary. Thank you﻿

",1523208637.0
ivanovich_ivan,I honestly feel that the Akka streams API is very crude at this point. Can anyone recommend good books/tutorials to get started with it.,1523127897.0
amazingdreams,"You could try marking your test directories as src directory in the create assembly task.

Maybe you're better off creating a subproject specifically for the tests which depends on the main project so this sub project is treated as regular code by default",1523014929.0
MasGui,What is the output of `test:assembly`?,1523261813.0
aphexairlines,"I gave up and let scalafmt win over scalastyle or intellij's formatter.  I enabled auto-scalafmt on save in intellij.  Here's my scalafmt config:

    align = none
    rewrite.rules = [AvoidInfix, RedundantBraces, RedundantParens]
    maxColumn = 120
    runner.optimizer.forceConfigStyleMinArgCount = 3
",1523026382.0
Thatnoobagain,"I have the same problem so bump. By the way, do you use the ""space-instead-of-dot"" syntactic sugar in IntelliJ? I find it very easy to read (and aesthetic) but IntelliJ will only autosuggest when a dot is used. Have you figured something out for this?",1523014799.0
CyclonusRIP,"I don't recall ever seeing -p documented as an argument that java supports.  
System.getProperty reads properties set on command line with the -Dname=value convention.
System.getenv will read a shell variable.  

You could use the mkyong example /u/vytah linked, but sometimes it can be a little complicated referencing the file you want from within a java process, especially if you are using relative paths or loading from the classpath.  The TypeSafe Config library that /u/threeseed mentioned makes that a lot easier and has good options for default configs, overriding, and composing configs built in out of the box.  It also handles reading into numbers, boolean, and list types for you instead of you having to read a string and manually parse.",1522979833.0
threeseed,"Maybe just use TypeSafe Config .. it's pretty much the standard:

https://github.com/lightbend/config",1522973097.0
vytah,Use the Properties class: https://www.mkyong.com/java/java-properties-file-examples/,1522973077.0
tombraideratp,"""""""
    val config = fileNameOption.fold(
    ifEmpty = ConfigFactory.load() )(
    file => ConfigFactory.parseFile(new File(file) ))
""""""

typeconfig will read default config file exist in class path or if you provide the propertyfilepath as argumnet it will read from there

see complete code:-
https://github.com/ashu2012/scala-casandra/blob/master/src/main/scala/mainClass.scala
",1522995849.0
joshlemer,"Not strictly Scala-related, but the bulk of this is talking about how Uber handles batch and streaming huge amounts of data on Spark and Flink.",1522854170.0
plokhotnyuk,"Try Netflix FlameScope with perf and perf-map-agent for JVM: https://github.com/Netflix/flamescope

...and you will able to check any millisecond of what is happening with CPU of your server: https://www.youtube.com/watch?v=cFuI8SAAvJg",1522862012.0
anomie-p,"On a  first-pass at “cpu utilization is high and we haven’t changed code”, how the GC is behaving is something I’d want to look at.

But maybe you already have.",1522850519.0
ratherbefuddled,"Symptoms do sound like memory saturation causing very frequent and expensive GC.  If you can't reproduce and profile you're left with guesswork.

What could have caused the app to suddenly use more memory?  It was the financial year end for many organisations in the last few days.  Anything in the app behave differently around that?",1522858087.0
justinhj,Assuming you already tried VisualVM to get a basic profile maybe a more detailed profiler like YourKit will help. One thing to look into is thread deadlocks. We have sometimes noticed high cpu when the server is relatively idle and it was caused by incorrect configuration of Slick. The latest version of Slick can warn against this. ,1522849644.0
m50d,"If you can reproduce the condition, JProfiler. If you want to instrument your servers to catch things happening in production, look at Takipi (and maybe also New Relic).",1522850086.0
CyclonusRIP,I'd probably look into GC to start with.  If you enable the java opts to log GC you should be able to get an idea.  Taking some thread dumps can be a good idea too.  Generally kill -3 on the java process will produce a thread dump with stack traces on all your threads.  It will also print a heap usage summary at the end of the dump as well.  If you take several thread dumps spaced 10-30 seconds apart you can then review and see if them and see if you spot threads executing in similar parts of your code.  Essentially the flame graphs are gathering the same info and streamlining the analysis.  Taking a few thread dumps manually can sometimes get you the answer without having to set up any additional tooling though.,1522875687.0
amazedballer,"If you get a Lightbend subscription, you can use Cinnamon, their telemetry project.  Instruments Akka and Akka HTTP automatically.",1522853004.0
hurril,"Thank you, Erik! A really good and entertaining talk.

So is it fair to say that this is akin to the newtype in the languages that provde that?",1522864049.0
BroodmotherLingerie,"I don't know if the speaker mentioned it, but [someone found a way to emulate opaque types in today's Scala with abstract types](https://failex.blogspot.com/2017/04/the-high-cost-of-anyval-subclasses.html).",1522830433.0
simon_o,"It's a bit concerning that there is still no mention of JVM value types.

Pretty much all the reasons why Scala value types are ""bad"" are obsolete with Valhalla.

(That Scala value types ended up this way was more or less an explicit decision to a) avoid ""compiler fiction"", and b) bet on Java introducing value types so that the ""temporary"" restrictions of Scala value types could be dropped.)",1522826500.0
volpegabriel,Not completely sold on the idea yet. Can anybody tell how it compares with [newtypes](https://github.com/alexknvl/newtypes) that supports opaque types in today's Scala?,1522889132.0
moatra,Akka has finite state machine support built in:  [Documentation](https://doc.akka.io/docs/akka/2.5/fsm.html),1522775109.0
Mysthik,"You could separate initialization/authentication and request into separate actors.
Your actor that handles the request can itself have children on its own for each request or for each request type.

Something like this:

    class ConnectionHandler extends Actor {
         def receive: Receive => {
             case Authenticate => 
               val handler = context.actorOf(Props[RequestHandler])
               context become authenticated(handler)
         }
          
         def authenticated(handler: ActorRef): Receive => {
              case r:Request(...) => handler forward r
              case _ => ...
        } 

    }
",1522775573.0
TJSomething,"Looking at the direction Akka Typed is going, I think they want you to put all state into the receive method. It makes it easier to avoid closing over the actor's state, Also, with if-else and class members, you often end up with uninitialized members that don't make sense in all states, clogging up your class.

I think that Akka FSM is overkill for almost everything.",1522776757.0
Philluminati,Multiple receive functions is covered in chapter 2 or 3 of Akka in Action. They want you to be doing that.,1522826322.0
trapxvi,"I would probably use an algebraic datatype together with a rule like (S, M) -> S, that consumes a message and updates that state.

This allows you to pattern match on both the current state and message.

Instead of stashing in the framework, I'd probably store deferred messages in the state value itself, just so it's more explicit that the deferral is related to the state.",1522774914.0
parc,"It's perfectly valid to use multiple receives with become here, although that may have scaling penalties down the road.  However, don't let ""down the road"" blind you to ""getting it done.""

That aside, a more scalable way to handle this is to combine the two methods mentioned in the other responses.  Use a ""registration"" actor that is ""guaranteed"" to be up and takes a message like ""I need a Foo Actor.""  The registration actor spins up and initializes a Foo.  Once Foo is up and running, ~~it~~ the new Foo sends a message to the original requester saying, ""hey, I'm your Foo.""

The original requester can then take care of things like ""that service isn't available"" on its own.  Note this violates the ""fire and forget"" model that says you shouldn't depend on a service being able to run -- the caller has to understand the service availability and store enough data to be able to handle the return of the service.  Fixing that would require some persistence to get right, but is certainly doable.

edit: unclear pronoun",1522776944.0
matthedev,The [FSM](https://doc.akka.io/docs/akka/2.5.11/fsm.html) ([ScalaDoc](https://doc.akka.io/api/akka/2.5.11/akka/actor/FSM.html)) trait is specifically designed to model finite state machines using Akka actors.,1523147231.0
yawaramin,"Perhaps you could model this more simply by having the request actor try to authenticate as soon as it’s spawned. If it successfully authenticates, then it’s obviously in a valid state and can make requests. If it fails to authenticate, it lets the failure propagate as an exception up to its supervisor, which can restart it perhaps with an exponential backoff strategy.

The point here is to encode authenticated (‘ready’) state into the supervision tree itself instead of trying to shoehorn it into the state of a particular actor.",1523170471.0
sergigp,"Hi, I usually use context.become and stash for handle simple states such are “loading data from db” or initializing clients.",1522781922.0
teknocide,"Monix's `Observable` can handle this. Initiate the stream by telling it to get/generate the token at a specified interval and then use `replay(1)` to have it multicast the latest fetched value every time a subscriber connects.

To use the token in requests you pull the head from the stream which yields a Task/IO/what-have-you with the most recently fetched token, and flatMap it into a request.",1522717475.0
PrimozDelux,"I use fs2 for this, which I think does a fantastic job of combining purity and IO. Monix is another option which I've only heard good things about. ",1522744804.0
m50d,"The pure-functional way to do this would be to represent ""get the current token"" as a monadic command using either a free monad + interpreter or tagless final style. Then you could have multiple implementations e.g. a naive one that always fetches the token, one that caches, one that supplies a fixed value for testing...

(If you can express your logic in a free applicative way then doing this kind of ""optimization"" using `analyze` is more or less standard. One of the things I'm hoping to achieve with [Tierney](https://github.com/m50d/tierney) is to make it possible to do that kind of thing in the context of a computation that involves some dependent (i.e. monadic, non-applicative) steps as well, but I haven't got that far yet)",1522750063.0
affinehyperplane,"Thank you very much for your input, guess I will have to read through some documentation!",1522752751.0
Aappddeevv,"Here's some specific examples:

* [adal auth renewal](https://github.com/aappddeevv/dynamics-client/blob/master/adal/src/main/scala/dynamics/client/adal.scala)
* [retry policy](https://github.com/aappddeevv/dynamics-client/blob/c034fd01ec267b6dcf4e7965ea2f9b3fe99d6e94/http/src/main/scala/dynamics/http/retry.scala)
* [unfoldEvalWithDelay](https://github.com/aappddeevv/dynamics-client/blob/c034fd01ec267b6dcf4e7965ea2f9b3fe99d6e94/common/src/main/scala/dynamics/common/streams.scala) which is kind-of like a monix observable.

The key to slicing your token in to be a ""middleware"" in the HTTP call and add the bearer token to the request headers and then pass the immutable copy of the request down the chain to something that actually makes the web service call.

You could also use the latest cats effect to ""sleep"" an effect for a certain amount of time and renew itself in a stack safe way. the code above was written before that was available and fs2 was used. monix should also be straight forward.
",1522802924.0
joshlemer,"Hey there, for some reason your thread isn't showing up on the front page, but it is showing up on /new, not sure what's going on. However, it's funny you ask this question because I just wrote something like this, which I have posted on [gist](https://gist.github.com/joshlemer/b9d36779048de5d21197b66886907a1d).  
  
It's not purely functional by any stretch of the imagination, but it should do what you want it to do. Basically, you give it a way to ""fetch a new item"" aka a `Token` or whatnot. And it will manage multi-threaded access to the latest token, and also multi-threaded access to invalidating the token (say, one of your threads will eventually find that the token is expired, then it can in a thread-safe way invalidate that token).  The main interface is [here](https://gist.github.com/joshlemer/b9d36779048de5d21197b66886907a1d#file-revisioned-scala-L281), and both a synchronous (blocking) and asynchronous (backed by an akka actor) are implemented. In the synchronous version I would like to have used recursion rather than a while loop but there's a person at my work who won't tolerate recursion :-/  
",1522706111.0
ForrestTrump,I'm just a learner at the moment and I'm wondering if android development in Scala be taken seriously right now. I would consider Kotlin more for that but I happen to also be very interested in functional programming.  Learning two languages at once where the syntax is pretty similar sounds like a good way to make too many mistakes. ,1522692317.0
_funktional,Can you recommend a good online resource to learn scala? Pdf or videos.  Something from this year or last.,1522678587.0
enverest,"Does `Option.apply` method implements [Factory method pattern](https://en.wikipedia.org/wiki/Factory_method_pattern)?

Here what says in Wikipedia:
>This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes",1522757644.0
continuational,"Is the new example on http://www.react4s.org/ appetizing?

Edit: I'm asking because I'm torn between a simple example and a longer/more interesting example, and I've stared at that front page for too long to see it clearly by now.",1522781828.0
ivanovich_ivan,"Any good resources on learning akka streams. The documentation is very raw and hard to follow. Please don't suggest monix/fs2, I really dont have a choice on choosing the framework where I work.",1523127983.0
zero_coding,"Hi all   
Would be happy, if something could help me.     
https://stackoverflow.com/questions/49629964/how-to-determine-resources-for-fatjar  

Thanks",1522762466.0
i_dont_like_reddit_6,"I'm learning scala from ""Scala for the Impatient"" but it doesn't cover sbt or how to work with and use resources out there in the Scala community. What should I go through next to learn that stuff?

Edit: Note - I have no Java background. Coming from Ruby.",1522782603.0
mbo1992,"I have a small follow up from my post on [Akka actors - how to model different states](https://www.reddit.com/r/scala/comments/89fqox/akka_actors_how_to_model_different_states/). One of the many things I learnt is that it's a good idea for error states to be handled by the parent actor (eg child actor hits an exception, gets according to parent actor's supervision strategy).  
  
I don't understand how to do this if the child actors are created dynamically (in response to a message), and need some dependency.  Taking the example in my post, the client actor has a dependency (the client itself) that is supplied by it's supervisor. How does this work? Every example I've looked at shows a more simplified scenario where a single child actor is statically defined and has no dependencies, so I dunno how to make it work.",1523479200.0
kaeblo,"I'm new to macros. I have a similar problem to this: https://stackoverflow.com/questions/36344046/scala-macro-inspect-tree-for-anonymous-function

If there's a macro I can work with the AST of a lambda defined as the argument of the macro, but if the macro gets a lambda which is defined elsewhere, it only shows something like this: ""Ident(TermName(""f""))"".

Is there any way to get parents in the AST or somehow get a lambda if we only know the TermName(name) or some other way to solve this problem ?",1523541526.0
fromscalatohaskell,When is 2.12.6 hitting maven? The milestone has been finished.,1523805690.0
,[removed],1522744389.0
zero_coding,"Scala IDE or Intellj? Which one for Scala development?  
Thanks",1523250622.0
lu4nm3,"""Scala for the Impatient"" is good if you want to get up to speed on Scala",1522641928.0
sudkcoce,"Programming in Scala, 3rd edition.",1522646576.0
ghisvail,"[Essential Scala](https://underscore.io/books/essential-scala/) and [Advanced Scala with Cats](https://underscore.io/books/scala-with-cats/) are quite good, free and opensource.",1522671287.0
,[deleted],1522635327.0
vedmak,Found this awhile ago https://gist.github.com/d1egoaz/2180cbbf7d373a0c5575f9a62466e5e1,1522668073.0
denisftw,"My ""Modern Web Development with Scala"" will work if you also know the basics of Web development. Odersky's ""Programming in Scala"" is also a good choice.",1522662419.0
ItchyEntrance,"Having recently moved from Java to Scala, I'd say just dive in, start coding and when ever you get stuck look up for the ""Scala way"" of doing it. The Scala cookbook by Alvin Alexander as well as the supporting blog post are all very helpful.",1522681288.0
KagakuNinja,"I just jumped in and built a toy project. I had solid knowledge of Java and C++, made a number of embarrassing decisions, but it was a learning experience...

Others have made good suggestions, but I'll emphasize that you don't have to learn any category theory to use Scala, and the ""pure functional"" style of cats / scalaz is completely optional.

At the start, you can program in an imperative OO style, and add more functional principles as you learn.",1522695889.0
pythonicus,"After the basics with Odersky book/coursera/tutorials etc.

Functional Domain Modeling, Scala with Cats, and then FP in Scala",1522699327.0
joyoyoyoyoyo,"Personally, I recommend the [scala-exercises](https://www.scala-exercises.org/) after getting past the Programming in Scala book, and the Coursera course. It will help get familiar with some of the libraries and current EcoSystem",1522706045.0
thesuperching,"learn Scala.js from JavaScript (90% are still Scala)
https://www.scala-js.org/doc/sjs-for-js/
",1522719413.0
estsauver,"Atomic Scala is also good, but is a bit dated. The O'Reilly Scala Cookbook is also pretty good. ",1522763156.0
thesuperching,"https://www.scala-js.org/doc/sjs-for-js/
learn scala from javascript.",1522805399.0
Ukonu,"The hybrid approach makes it much easier to create functional abstractions backed by performant, imperative implementations. For example, a map combinator backed by a while loop and mutation.

It also serves as an excellent gateway drug to move the masses towards functional programming and its associated tooling (e.g. immutability, type classes, pattern matching, destructuring, type inference). I personally would probably have never entered functional programming (and subsequently Big Data and Streaming Data) if not for Scala. I made a career and entire consultancy business on it. It changed my career and maybe my life.

The only downside is that the flexibility can quickly lead to problematic code bases unless there was strong stewardship of the team from the beginning. But that strong stewardship is rarely the case; I've been to many clients and witnessed problematic code bases first hand and wished there were more guard rails in place: stronger type safety, more deprecations, and stronger linters and compiler warnings.",1522613762.0
Ironballs,"Logging. It's much easier with an imperative side-effectful called to `logger.debug` or something. Using a monad transformer or some other pure construct sounds  horrifying.

On the other hand, logging is the only side-effectful thing I would even consider approved *a priori* in a Scala application. Another occasion where it's ""fine"" to do so is when working with an imperative Java library, but that's generally out of necessity. ",1522616842.0
continuational,"In [React4s](http://www.react4s.org), the Attachables often use imperative style and mutable variables on the inside, but expose a declarative interface on the outside. See the [Spotify example](http://www.react4s.org/examples/spotify-search) for instance.

In general, when exposing effects, imperative programming is fine on the inside, as long as it doesn’t leak out into the interface.",1522615132.0
drfisk,"FP by default, imperative when necessary. 

Even though I love FP and pure functions, there's still a lot of places where imperative / side effects are easier to both write, read and reason about.

I often find that having all the ""decision making""-code as pure functions, and have some imperative effectful code at the edges is the perfect eat your cake and have it too. You can unit test easily, while still having easy-on-the-mind imperative code at the edges (without having to deal with the complexity that comes with certain monadic approaches of writing your code).

My only wish for Scala would be a clearer distinction between pure functions and effectful functions (or procedures). E.g. Pure functions starting with `fn` instead of `def`.",1522686361.0
chaorace,"I personally program in an overarching FP style, but frequently fall back on imperative structures. I still avoid the big no-nos like side effects, but I have absolutely no issues with basically just switching my brain to Java-mode whilst implementing individual functions if I think that's the easier way.",1522613939.0
,"Assuming you mean pure vs. impure. Side-effects are acceptable in the small, locally, unobservably, as necessary to accommodate limitations of the JVM. Otherwise programs should be purely functional because this is how you gain compositionality, which is how you manage complexity.",1522688649.0
sjrd,"The way I write Scala, I very often interleave *layers* of OO/imperative with layers of functional code. You could even say that's one of the architectural patterns I use. At one layer, you'll provide a functional API, but somewhere inside you want to use some imperative approach for performance/caching/incrementalization/etc., but inside that one, you use functional programming again, at a smaller scale. And you can go as many layers deep as you want, with this game.

For example, the Scala.js `Linker`--the thing that takes the .sjsir files (kind of .class files but for Scala.js), optimizes them, and emits one .js file--has a pretty functional API at the top-level:
https://github.com/scala-js/scala-js/blob/134c8e456a4ade626091c74de780e03eb22aee83/linker/shared/src/main/scala/org/scalajs/linker/Linker.scala#L17
It basically has *one* functional method:

    def link(irFiles: Seq[VirtualScalaJSIRFile],
        moduleInitializers: Seq[ModuleInitializer],
        output: WritableVirtualJSFile, logger: Logger): Unit

(OK, it writes to a file instead of returning the string, but still: the output in the file is a *function* of the `irFiles` and `moduleInitializers`)

Somewhere inside that, though, I have several phases, which are all functions. The first one is the [`BaseLinker`](https://github.com/scala-js/scala-js/blob/134c8e456a4ade626091c74de780e03eb22aee83/linker/shared/src/main/scala/org/scalajs/linker/frontend/BaseLinker.scala#L39-L46). The main job of that phase is to compute a so-called *reachability analysis* and return a trimmed-down codebase (what is often called dead code elimination). Now, even if at a high-level view, this is a pure function, the *implementation* would be dead slow if it were implemented in a purely functional style (it's basically a giant fix-point computation on a big graph). So inside of that thing you'll find the very imperative [`Analyzer`](https://github.com/scala-js/scala-js/blob/134c8e456a4ade626091c74de780e03eb22aee83/linker/shared/src/main/scala/org/scalajs/linker/analyzer/Analyzer.scala#L25), with plenty of mutations everywhere.

At an even smaller scale, the `Analyzer` uses again some functional constructs, like [`map`s and `flatMap`s in for comprehensions](https://github.com/scala-js/scala-js/blob/134c8e456a4ade626091c74de780e03eb22aee83/linker/shared/src/main/scala/org/scalajs/linker/analyzer/Analyzer.scala#L191-L196). And guess what? Those `map`s and `flatMap`s are, in turn, implemented with mutation inside the Scala standard library.

There are plenty of other examples in this linker, it's amazing! One other is the optimizer, whose main thing is [`GenIncOptimizer` and its `update` method](https://github.com/scala-js/scala-js/blob/134c8e456a4ade626091c74de780e03eb22aee83/linker/shared/src/main/scala/org/scalajs/linker/frontend/optimizer/GenIncOptimizer.scala#L99), which is a purely functional interface. But inside, it uses very fancy caches and incremental computations, all within parallel computations using shared state (I'm not kidding). And down below all that, to actually the hard job of optimizing *one* method in isolation, there is [`OptimizerCore.optimize`](https://github.com/scala-js/scala-js/blob/134c8e456a4ade626091c74de780e03eb22aee83/linker/shared/src/main/scala/org/scalajs/linker/frontend/optimizer/OptimizerCore.scala#L123), which again has a purely functional interface (which is why the caches at the upper layer are sound). But hey! Inside, there's mutations again! And it goes on an on ...

I think you get the idea. To me that's where Scala shines: at each layer of the architecture of your program, choose the style that applies best.",1522672018.0
eniacsparc2xyz,"> Has anyone here encountered any places where the hybrid approach really shines?

Yes, in servers, command line tools, servers and GUIs. For user interfaces, I use the higher order functions to set up the event handlers and OOP to write the observer pattern. For command line applications, I can write the whole program with pattern matching of command line arguments. I also use the object/singleton as module to group utility functions with some set of related functionality. For instance, I use functions such as Utils.withTimeout[Unit](timeoutMs, => Unit), UtilsSerialiaze.byteArrayToBase64, serializeToBytes ... .... 


> Are we allowed/encouraged/supposed to have programs that follow both imperative and functional patterns?

Everything in Scala is already mixed in both ways, as everything are objects like in Smalltalk, even functions. And the monads are encoded as for-expressions which expands to the methods .map, .flatMap and foreach.

> . It makes me wonder, is this how Scala was intended to be used? 

I guess that with all styles of programming. For instance, you cannot build Java Swing GUIs in purely functional way since the widgets are stateful by default, but the functional features can hep to write the event handlers. Another situation, where it is not possible are Linear algebra algorithms that needs mutability for performance reasons, but in this case it is possible to hide the imperative computations inside function in a way that the function is immutable externally.

You should use in the way that best fits the problem as there are no silver bullet. I also remember that functional programming, is not just about pure functions as most FP languages are not pure, including OCaml, F#, Scheme and so on.",1522636288.0
v66moroz,"The hybrid approach in Scala is actually heavily leaning towards OO and has a lot of FP shortcomings, e.g.:

1. Immutability is only reference based, no guarantee that an object the reference points to is immutable. ""Use immutable structures, Luke""? Sure, but  what's wrong with Javascript then? Just don't add a string to an integer. Besides it can be hidden, like a closure which uses mutable object, you never know. So no referential transparency in a general case, unless you check every object you use,

2. No native sum types (hopefully we'll have them in Dotty),

3. Typeclasses are ugly (they kind of work, but too much boilerplate and magic),

4. Constant confusion between a method and a function.

Probably it's not the end of the list. 

So doing clean FP requires a lot of care, and given that Scala is touted as a gateway to FP for Java developers, i.e. those who have no or little experience with FP, it doesn't usually end well. Most companies hiring Scala developers I applied to (possibly not a representative sample) sounded like ""we had a guy who wrote all this Scala mess and we need somebody to rewrite it in Java"". Ironically Rust is much more FP language than Scala (except for the lack of HKT).
  ",1522680322.0
yawaramin,"Check out OCaml for inspiration. It has been using a hybrid functional/object/imperative approach and was a direct influence on Scala.

I would reiterate the good advice you got here that side effects should be kept contained inside function boundaries as much as possible; they shouldn’t be observable to the outside world.

However at runtime you of course need to run all your effects and get your actual work done. Effect types are a great way of managing that. Scala comes with one, `Future[A]`, but it has some drawbacks so many people like the `IO` or `Task` types provides by cats and Scalaz.

Your mileage may vary, but I find `Future` to be good enough to start with for effect management as long as you remember that futures are executed immediately as soon as they’re evaluated, so the trick is to delay their evaluation, by putting them inside methods instead of vals.

Then you control when they’re executed, by calling the methods.",1524521393.0
tsec-jmc,"How is this not literally a regression compared to what we have now?!?!

> It does the job, but at a cost of lots of boilerplate! The required boilerplate is very technical, advanced, and, I believe, frightening for a newcomer. The complexity of typeclasses does not end with their definition, either. It continues to the use sites, which typically need one extra type parameter per typeclass argument. Scala is a language set out to eliminate boilerplate and promote the simplest possible style of expression. But it seems in this area it has utterly failed to do so.

So you go from three steps, a trait, an impl and an optional syntax object, to:
    
    trait SemiGroup extends TypeClass {
      def add(that: This)
    }
    trait Monoid extends SemiGroup {
      common def unit: This
    }

How is this more coherent? You add essentially three keywords (Typeclass, common and `This` type), of which it's not even clear what the f*** it's supposed to be doing because I don't get how a monoid returns a `This`. And that's only this example. Continuing to dive into every link this stuff has I see `common`, `impl`, `for` (in an inheritance style), `Injector` and `extension`.

This is going from a relatively simple definition of typeclasses in pure scala, which is what we currently have, to some weird OO conglomerate where you have `.impl`s and a bunch of different keywords that translate to the same code we have now.

Jesus Christ I hate hopping into the Scala pessimist crew because I actually enjoy the language and what it gives me access to, both in the community and the code it enables me to write, but this is some convoluted for the sake of keeping some weird as golly OO style fusion with typeclasses. Why not just

    typeclass SemiGroup[A] {
      def combine(l: A, r: A): A
    }

Is that so hard?!?!?!?",1522618851.0
Krever,"Anyone knows the reason for ""The kind of annotation macros required by simulacrum will almost certainly only be supported in Dotty as code generation tools, requiring a separate build step."" ?

Dotty won't have compiler plugins?",1522606736.0
sciss_,"It's an interesting construction, one has to read all .md to understand how to parts come together. I'm not putting a reply below /u/tsec-jmc 's comment, because I think it should be either edited or removed, being unnecessarily _full_ of swearing. But I'll refer to it, as it seems a natural reaction when you only read half through the proposal (which is an experiment now).

I agree that `This` is a confusing type member name. So you have

    trait TypeClass {
      type This
    }

instead of

    trait TypeClass[A]

The same with ""OO"" style `add(that: This): This` (I think the return type was accidentally omitted) instead of `def add(a: A, b: A): A`. Ultimately, in my understanding, the reason behind that is to avoid the duplication of old-style type class (implicit class, `def (A, A): A`) and syntax-extension methods (`implicit class HasTypeClass[A: TypeClass](x: A) { def add(that: A): A = implicitly[TypeClass[A]].add(x, that) }`). This becomes clear when looking at the use of `extension` to define instances.

    extension IntSemiGroup for Int : SemiGroup {
      def add(that: Int): Int = this + that
    }

This collapses the FP type class and the OO extension syntax into one construct. It may look weird at first, but then after groking it, I think it's actually quite nice. (Again, not sure that `This` is such a great type member name).

----

The same goes for `common`. At first, it looks weird, and yes, do we need another reserved keyword? What it does, if I read it correctly, is to ""spread"" a method across class plus its companion object. If you read a bit in the current (2.12) collections library, you can see all sorts of boiler plate for getting from a collection instance back to its ""factory"" via `companion`, which must then be overriden by sub-classes. The `common` construction seems to solve this thing in a quite elegant manner, if you discount the costs of adding another keyword.
",1522626182.0
argv_minus_one,"I like it, but does the rest of Dotty really need to be held up for this?",1522602444.0
amazedballer,"/u/oleg-py is correct
. If you look at https://github.com/playframework/playframework/blob/master/framework/src/play-filters-helpers/src/main/resources/reference.conf#L157 the allowedOrigins is already null by default.  You don't need to set it again.

I think the request is failing because you have an OPTIONS and only GET and HEAD are allowed in your config.  The default is all of the above: https://github.com/playframework/playframework/blob/master/framework/src/play-filters-helpers/src/main/scala/play/filters/cors/AbstractCORSPolicy.scala#L38

Documentation is here:

https://www.playframework.com/documentation/2.6.x/CorsFilter#Configuring-the-CORS-filter",1522607495.0
oleg-py,"I'm not a Play user, so no guarantees I'm right.

Seems like `allowedOrigins = null` is not correct. According to [doc](https://www.playframework.com/documentation/2.5.x/CorsFilter), if you want all origins enabled, you should just remove the line completely. Same for `allowedHttpHeaders`.",1522588059.0
estsauver,"If you look in the network panel on chrome, can you out show what all the headers are?",1522592250.0
continuational,"What does your benchmark measure? And what's the unit?

And how does it compare to [ujson](http://www.lihaoyi.com/post/uJsonfastflexibleandintuitiveJSONforScala.html)?
",1522575033.0
plokhotnyuk,It would be fastest if jsoniter-scala wasn't existed https://github.com/plokhotnyuk/jsoniter-scala,1522604417.0
estsauver,"This is really neat. Our data science team is thinking about migrating slowly from python to Scala and so this sort of library is a wonderful addition to the ecosystem.

I’d love to see an additional example in the sbt docs. For example, if I want to package this with sbt-native-packager, how do I sort out the right platform specific reps for a different prod/development OS?",1522567048.0
snylekkie,But why? We have BigDL and ML in Spark,1522569469.0
continuational,"> Redmonk Language Rankings Sees Rapid Rise for Kotlin and Swift

Why was the full title obscured?",1522570350.0
lihaoyi,"Wrote up a blog post about uJson, the new standalone library backing uPickle. Although I already posted the new version of uPickle on this board, I think uJson is cool enough that it deserves some attention of it's own.

Questions, comments & opinions welcome! ",1522509947.0
BarneyStinson,"Very cool. Although I have to say that I do not find the example very compelling. Sure, updating the value in-place is simpler than with e.g. circe where everything is immutable, but the need to do so does not arise very often in my code. I usually decode/encode the JSON object at the very ""edge"" of the program and apply any transformations to domain objects.

EDIT: The zero-overhead conversion is very cool! Minor typo: ""there are definitely still a lot of _long_ hanging fruit"". ",1522511088.0
tsec-jmc,"I'll be honest, I love your work Haoyi but I come to Scala to _not_ deal with people treating code like python/ruby. It's great that you empower these types of people, but your claim that you need to become an ""Expert in X library"" is unsubstantiated. It doesn't take a lot of brain space to use (for example) circe efficiently, even manipulating jsons with lense-type solutions, and it's a bit of a stretch to say something along the lines of ""X library is preventing you from becoming an expert in Y"".

All in all, it's great you're putting out a competitor in this same space. It's just a lot of people _prefer_ to not have the ""_intuitiveness that someone coming from Python, Ruby or Javascript might expect working with JSON data types._"", because I'd rather not have any code whatsoever that looks like the spaghetti that comes from passing mutable references in those languages. As such I won't be using the api from uJson in my own stuff personally.

That said, great work, and I'm glad your library gives people with different styles than mine an access into scala.",1522521322.0
mustang0168,So many json libraries..,1522519075.0
geggo98,"How does the in-place mutation deal with concurrency (or out-of-order execution)? When I mutate such a JSON structure on the edge and then send it to a worker (or actor / ...) living in a different thread, isn't there a possibility that the worker will see an outdated version of the object? Or is the backing structure generated with synchronized or volatile all over the place?

From my understanding, with immutable data structures, the Java memory model allows to skip synchronized and volatile. But with mutable structures these guarantees don't hold generally and one must consider synchronization primitives.",1522526262.0
sudkcoce,Bravo! 👍,1522516561.0
rusins,This is awesome. Having a simple JSON parsing library with little code + effort needed on the programmer's behalf is a must. Having multiple options on how to do things is one of Scala's largest benefits.,1522550130.0
yang_bo,"What does `str` mean? struct, stream, strong or strict?

Why not just use `toString` / `toInt` to cast types?

`str` looks like an API designed 50 years ago, similar to `strcmp`, `strlen`, etc.",1522561229.0
ekrich,How does the performance compare to jsoniter-scala?,1527627693.0
ghisvail,You can use DL4J / ND4J or their corresponding Scala wrappers (ScalNet and ND4S). It's got support for GPUs.,1522506917.0
sjrd,"Nice! If you want take ""take it further"", maybe a SIP? (TBH I don't think it can succeed, because it *is* a silent breaking change, whether we like the new semantics better or not.)",1522506406.0
Odersky,"I think in this example there should be no need for a `withFilter` since you know that the pattern match will succeed by just looking at the types. The compiler has machinery to check for ""irrefutable patterns"", I am surprised it did not kick in in this case.
",1522524888.0
ciberon,"Hey. This seems like a good idea. Gotta hate unchecked stuff.

On your README, on the example where you change the desugared code to:

getCounts
  .map(_ match { case (x, y) => x + y })

why not change it to the following:


getCounts
  .map{ case (x, y) => x + y }

Just wondering if you think the current is better for some reason I'm missing.

Keep up the nice work, will follow the repo. Kudos.",1522503669.0
m50d,Doesn't typelevel scala include this already under a compiler flag (`-Zirrefutable-generator-patterns` or some such)?,1522750387.0
naftoligug,Twilio uses scala?,1522870628.0
room-23,Finally java.lang.Process is supported :),1522337117.0
ScalaWilliam,"Updated the scala-native-libpcap article & source code accordingly:
- https://www.scalawilliam.com/scala-native-libpcap/
- https://github.com/ScalaWilliam/scala-native-libpcap/commit/eaa8117926c9e148e70868c3c1d29694b117e519",1522376173.0
r1w0ApHWEN,Another wonderful prerelease,1522503717.0
raghar,"This library is something my friend and I started some time ago. Since we finally managed to put together some documentation we decided to share it, and gather larger feedback :)",1522269793.0
MeLostMeShoe,"It is a truly great library! I started using it and just like that I've burned a lot of useless boilerplate. 
Thank you guys! Now my code is so clean I could make soap out of it!",1522328232.0
oleg-py,"- How is Intellij support? I'm assuming autocomplete and other stuff works fine?
- Any noticeable impact on compile time?

I've been using shapeless records for this purpose, but we have to ""make faces"" at IDEA for shapeless code to not produce false highlights and compile messages are scaring the hell out of my colleague. Would gladly try the library out.",1522272165.0
acjohnson55,Reminds me of: https://github.com/kailuowang/henkan,1522357791.0
Krever,Looks amazing! Thanks!,1522309477.0
volpegabriel,"LGTM, thanks for sharing! :)",1522316148.0
silentraquo,"Well that looks awesome.

Question regarding Scala.js usage – any insight into how much code is added to runtime? Not in KB but just conceptually – is it pretty much as lightweight as writing out similar transformations by hand, or is the generated code significantly larger than that?",1522359036.0
m4dc4p,"This is a fantastic idea! I wish I had had this when writing a compiler in school. I wrote it in Haskell and had 5 or 6 data definitions representing the same abstract syntax tree with slightly different items attached to the same basic values ('expression', 'conditional', 'application', etc.)",1522427629.0
allengeorge,"There’s little incentive to upgrade to Scala 2.12 vs . investing in additional Spark features. Keep in mind that a lot of people come to Scala *because* of Spark, not the other way around. It’s incredibly frustrating to have to upgrade a complicated application because your language version changed; at some point the effort involved isn’t worth it.",1522288197.0
LPTK,"inb4 Simon's comment that Scala is dying, that ""leadership"" is not doing anything about it, and that Kotlin will prevail – oh, and by the way the Scala website really sucks.",1522258366.0
m50d,"As a user and library maintainer I can't blame the Spark folks. Scala 2.12 is a thoroughly underwhelming release in terms of user-facing features - indeed since it drops JDK6/android support it's kind of a downgrade. If switching my libraries to 2.12 had involved substantial work I probably wouldn't've bothered either.

The flipside of not involving many user-facing changes is that migration to 2.12 should be easy, so I imagine spark will get to it sooner or later. But really, what's the rush? What's the compelling thing that you get from 2.12 that's not there in 2.11?",1522316283.0
vitalijzad,"Cloudera is the top player in the Big Data space. If you have a Cloudera cluster, the default Spark version is 1.6.0.

If you want to upgrade to Spark 2.x, you will have [many known issues](https://www.cloudera.com/documentation/spark2/latest/topics/spark2_known_issues.html), like the lack of access control layer, dynamic allocation, HBase support.

So I guess that the Scala version of Spark 2.3 is not the main issue.",1522274295.0
estsauver,"I think that's probably a pretty good sign for Scala. At the same time, I think we probably have more centralization on a tool chain then most other languages. 

",1522236485.0
alexelcu,"IntelliJ IDEA is the best IDE right now, in general.

I use it for Scala mostly, but it handles just about everything I care about ... JavaScript, TypeScript, Python, Clojure, Ruby, Haskell. I use VS Code as well and I'm a long time Emacs user, but it's not the same level of smartness.",1522266112.0
Philluminati,"I expect Kotlin will eclipse Scala given IntelliJ makes Kotlin, unless they include that support by default.",1522826894.0
,"I think a good way to do this might be to hang out on [Gitter](https://gitter.im/scala/scala) and chat with other developers, go to conferences, listen to talks online, get involved in an open-source project, etc.; so you can get to know other good Scala programmers and learn how they think about things. A lot of it will come down to style and interest. I'm an ok functional programmer but would get tossed out on my ass if I tried to interview for an Akka job. Nobody is good at everything … Scala is a big language.",1522172796.0
,"I'm in a similar place. I have been using Scala less than a year and have fallen in love. I recommend getting the ""red book"" and trying out some of the middle chapters when you're feeling ambitious. It helps give you a grounding on the type system and what is possible.

Finally I will say that I dislike job interviews that focus on obscure details of languages to test your knowledge. I find that language quirks can be quickly learned as needed but having an intuitive sense of how to solve problems in a given language is much more important.",1522216825.0
m50d,"The [lambdaconf ladder of functional programming](http://lambdaconf.us/downloads/documents/lambdaconf_slfp.pdf) got a lot of mockery and criticism when it came out, but I do think it's a good effort in this direction (though of course specific to one particular style of programming) of making you aware of what skills and techniques are out there that you might want to learn.",1522229542.0
silentraquo,"See Scala Competency Levels by Odersky: http://www.scala-lang.org/old/node/8610

This kind of thing is subjective of course, but it's a good list of topics to explore.",1522222408.0
amazedballer,"I tell people Scala is like a swimming pool -- you don't have to dive in the deep end to learn how to swim.  

Martin Odersky put together a [list](http://www.scala-lang.org/old/node/8610) of Scala skills for application developers and library developers.

Generally, I'd say the learning curve of Scala are the bits not covered by Java: learning how to use functions, and then how to use implicits, and then how to use the type system.  Don't get discouraged if you don't get it all at once -- the contributors have been doing this for years and sometimes forget how long it took to wrap their heads around. ",1522180174.0
aphexairlines,"[wartremover](http://www.wartremover.org/) inspects your code a bit more deeply than scalastyle.  You can avoid more javaisms with the OptionPartial, Throw, and TryPartial rules documented here:

http://www.wartremover.org/doc/warts.html",1522187898.0
aphexairlines,"You can use [Scalastyle](http://www.scalastyle.org/) to avoid javaisms.  For example, these rules can help you avoid `null`, `return`, `var`, and `while` in your code:

      <check enabled=""true"" class=""org.scalastyle.scalariform.NullChecker"" level=""error""/>
      <check enabled=""true"" class=""org.scalastyle.scalariform.ReturnChecker"" level=""error""/>
      <check enabled=""true"" class=""org.scalastyle.scalariform.VarFieldChecker"" level=""error""/>
      <check enabled=""true"" class=""org.scalastyle.scalariform.VarLocalChecker"" level=""error""/>
      <check enabled=""true"" class=""org.scalastyle.scalariform.WhileChecker"" level=""error""/>


See also http://twitter.github.io/effectivescala for other rules you might want to apply either with scalastyle or other tools.",1522186938.0
thedogeness,"Just keep looking at the code behind popular Scala libraries and looking at idiomatic Scala code and it will come naturally. If you can, contribute to OSS Scala projects in small ways and benefit from the community code reviews.

Also helps to try and build hello-world or better apps using interesting scala frameworks. In no particular order:

- akka
- play
- cats/scalaz
- finagle
- algebird

Each of these give you exposure to new patterns and paradigms.

Worth noting that w.r.t Spark specifically, most of the contributors are writing (very good) Scala that looks like Java for a variety of reasons. Especially the memory management, concurrency and performance optimization code. As a result, the source code tends to be less focused on idiomatic Scala and more focused on code that works as fast and correctly as possible.",1522205298.0
aphexairlines,I wouldn't worry about applying for Scala jobs specifically.  Almost nobody asks in an interview if you know some specific part of a programming language.,1522186208.0
jackcviers,"> Judging from open source code, even the top professionals tend to be frugal in their use of, say, implicits, currying, and other more specialist functions. At the same time, I can't help but feel that I am basically using scala as java with Option and much much better lambda functions.

If you are looking at ""most"" as the spark apis, sure. That's because of the databricks style guide, which explicitly states to avoid implicits: https://github.com/databricks/scala-style-guide

Many other open source projects, such as fs2 and Monix and Play! use implicits liberally (about 1% of the sloc):

https://github.com/monix/monix -- 868 lines in main code of the word implicit out of 73946 lines of code according to sloc
https://github.com/functional-streams-for-scala/fs2 -- 262 lines of main code with the word implicit out of 12636 according to sloc

https://github.com/playframework/playframework - 1015 lines with the word implicit in main code out of 82585 lines according to sloc.

This is opposed to Spark (note that it is a much larger project in terms of lines of code, it hand 534707 objects in git!):
1051 occurrences of the word implicit in main code. It has 615813 lines of code according to sloc.

Note that implicit is mainly used for paramaters to functions, in monix, out of 4578 defs in main, 868 of them take implicit arguments, for example.  That's ~25% of the methods.

The thing is, unless you are writing your own applications outside of a framework, you should be following the conventions of the framework you are using. So in Spark -- use fewer implicits. In https -- yeah, probably using currying and implicits.

If you follow the convention of your framework, and can test and change things easily, you are writing quality code for your domain.",1522175931.0
oleg-py,Thanks for all the efforts put into Scala plugin!,1522213709.0
alnp1987,Awesome!,1522193037.0
tsec-jmc,Awesome. Now if only IJ didn't freeze for multiple minutes when trying to `alt+enter` autocomplete stuff sometimes...,1522177557.0
Ukonu,"Wow, it must suck to put some good open source work out into our community and pretty much get berated every single time.

That's not to say there aren't problems, but I think *everyone* involved would be better off with links to bug reports, succinct examples of problematic code, and PRs. Everything else is just annoying, childish prattle.

Anyway, thanks for this great plugin. For the most part it works great for me. I've been looking at the code recently to see how I can get more involved.",1522255056.0
duhace,"When is the IJ team going to get around to fixing their scala parser? Ensime does better parsing and typechecking cats and other code, and it's maintained by only a few people.",1522223094.0
rco8786,Wayyy over engineering this and absolutely no need for micro services. Just build the website with the features you need in a single app/database. Figure out what a *minimal* set of useful features are and build those first. What you’re describing abstractly above could take years to build. Start small and build up over time. ,1522123514.0
TheOsuConspiracy,"I suspect you're way over-engineering. You should start with small modules that you grow organically. This doesn't sound like it requires the throughput/scalability that you think it will. Just write clean modular code, and break things out as required.",1522096492.0
amazedballer,"Play will handle the HTTP side of things, but it does not handle business logic and domain functionality that you are talking about.  I'd recommend keeping the service logic and database backend in different modules so that you can keep your database backend logic distinct from your service logic, along the lines of https://github.com/playframework/play-scala-isolated-slick-example

I think [Implementing Domain Driven Design](http://a.co/cGOoi0m) would be a really good fit for what you're talking about, as it directly talks about the design of business logic like this.  I don't see the need for microservices in your use case -- as long as you keep everything well factored to modules and APIs, you should be able to evolve to microservices when you need them.",1522092903.0
Martissimus,"The current state is ""in limbo"".

Scala reflect macros are, just as they always were, experimental. That will not change for 2.13.

They will eventually be retired. Their replacement is not here yet. That means it's also unclear what the transition path will be, and what features will and won't be present in a new system.

White box macros in particular - where the macros return type is determined during expansion - may not have a future.

For now, you can use scala refect macros. They won't stop working, but they may stop working post 2.14. 

Also, consider not using macros.",1522083056.0
olafurpg,"Use scala-reflect macros that are included with the compiler, are used by most major libraries and are documented here https://docs.scala-lang.org/overviews/macros/overview.html",1522086654.0
argv_minus_one,`scala.reflect` macros will continue working through the 2.x series. They will no longer work in Scala 3. It has not yet been entirely decided how macros will work in Scala 3.,1522091783.0
,Macros are a tool of last resort. Are you sure you have reached that point?,1522102292.0
kpws,[previously on reddit](https://www.reddit.com/r/scala/comments/818qar/),1522088193.0
simon_o,"I think the current status could be described as:

- scala.reflect: [abandoned](https://github.com/scala/scala/tree/2.13.x/src/reflect/scala/reflect), also [quasi-quotes](https://github.com/scala/bug/issues/10755)
- scala macros: [abandoned](https://docs.scala-lang.org/sips/minutes/2017-09-21-sip-minutes.html)
- scala macro paradise: [abandoned](https://contributors.scala-lang.org/t/stepping-down-as-the-maintainer-of-scalamacros-paradise/1703)
- scala meta: pivoted to focus on tooling
- scala meta paradise: [abandoned](https://index.scala-lang.org/scalameta/paradise/paradise/3.0.0-M11?target=_2.12.4)
- ScalaCenter macros: [abandoned](https://gitter.im/scala/center?at=5ab94964458cbde5577ae116)

Some people are going back to compiler plugins, which might be an option for you.

E. g. you can emit/change trees with a compiler plugin, but like macros you can't use plugins to bug fix later stages of the compiler.

You have to roll some of the things you get for free with macro manually, for instance resolving annotations (so that you don't have to match annotations by string comparison).

Introducing members is also quite painful to figure out, and anything related to `Flags.STATIC` is compleley broken and produces invalid bytecode that fails verification.

Also, you have to publish your plugins for each minor version of Scala.

If you steer clear of the broken pieces in the compiler you can get a few things done, just extend `AnalyzerPlugin` and `MacroPlugin`.",1522084381.0
rberenguel,"I used a very small amount of reflection macros in the past, and would definitely recommend Meta instead (specially if you are already using 2.12). Much easier to use and understand. But I'm no expert, and IIRC a couple of Meta maintainers/active developers are active here so I guess they'll be able to chime in.",1522082853.0
oleg-py,"You should be prepared that your macros will break in some future Scala version. They have always been ""experimental"" (which never stopped people from using them quite a bit)

If possible, avoid using macros. Maybe implicits / shapeless will work for your use-case, thus you can push maintenance burden to other developers. Shapeless in particular likely to be supported in one way or another in newer Scala version.

If you need `def` macros and not annotations (e.g. functions that are inlined at the call site). Also if you need actual type information and not just syntax transforms, meta is not an option at all. Use reflect macros.

If you need good Intellij support, use scalameta / paradise. I had written two scalameta macros, one for tagless algebras, another for defining enumeratum enums without repetitive boilerplate [(here)](https://github.com/oleg-py/enumeratum-macro), and both writing and using them is fairly decent in IDEA.",1522154513.0
acjohnson55,"Also consider code generation. I've become a big fan of using some form of data as input to a code generator that runs and produces source code before your application code compiles. That way, you get output you can actually see and work with with all your fancy IDE tooling. You can use tools like string interpolation or templating for simple stuff, or Scala Meta for complex code generation.",1522208147.0
TunaBoo,"So yah, you are making a lazy val and then using it on the next line. All this really does is slow your code down by a tiny bit as it does some atomic cruft around and then immediately gets used.

In this example - You are printing every single record. So lazy val will not help you.

If you can provide a different example where say only 1/2 or 1/10th of the possible values are used - there is a logical way to use lazy vals to save you processing 50% or 90% of the records.. but anytime you are going to just churn through 100% of the inputs, lazy val is just a nuisance.

",1522073712.0
Daenyth,"There are two ways I'd handle this. The first one is a little simpler, but not as robust in the long term. You'd change your case class field to have a function that returns the content, `() => String`. That's not ideal because it's blocking and side effecting.

The more idiomatic way would be to use a type for explicitly managing side effects like cats-effect IO, and have either your case class contain IO[String] or suspend the entire case class construction in IO",1522074219.0
pheymann,"When you pass `lazy val content` as a parameter to `NewsItem`'s `content` (which is strict) it is evaluated.

What you can do is:

    case class NewsItem(source: NewsSource, title: String, uri: String, content: () => String)

    ...
    lazy val content = Jsoup.connect(e.getLink).get.html
    NewsItem(source, e.getTitle, e.getLink, () => content)

This will be evaluated only when `NewsItem.content()` is called and it is only evaluated once.

The other way would be to go with `IO` as was already said in another post.",1522078560.0
killermouse0,"Also, I'm a Scala rookie so feel free to tear that code apart...",1522073296.0
Daenyth,"You might want to reconsider the implicit part of this, because most of the Scala FP ecosystem will be using them at least for typeclasses if nothing else, and cutting yourself off from that will definitely reduce the amount of benefit you get from being in Scala.

What's the reason you'd like to avoid those aspects of the language?",1522074844.0
amazedballer,"[Play](https://github.com/playframework/play-scala-starter-example/) is actively maintained, has non-blocking IO, doesn't require you to declare implicits (I assume you mean implicit conversion or type enrichment) or import wildcards (again, I assume for implicits defined in the package object), and new symbolic operators / translation is not required.

There are some parts of the Play API where it's convenient to use an implicit -- for example, declaring an implicit request or ExecutionContext -- but you can always pass it explicitly.",1522074173.0
aphexairlines,"Finagle looks nice, but conversions between Twitter futures and Scala futures could get tiring.",1522073066.0
aphexairlines,"http4s is really ""http 4 cats"" -- the first line of the first example in their website wildcard-imports `cats.effect._`.  You need to ramp up on and buy into cats if you want to commit to maintaining an http4s server in production.  It also encourages wildcard importing the server API and defines a number of custom operators in https://http4s.org/v0.18/dsl",1522073333.0
tsec-jmc,"> Is there an actively-maintained HTTP server project for Scala with non-blocking IO that doesn't require users to declare implicits, 

Too bad implicits do a very good job of handling the issue of dependency injection in scala. Would you rather annotations like java and play framework? Spoiler alert: Only one of the two typechecks, and it's not java annotations.

Also Blaze on http4s also has non-blocking IO.

> import wildcards

This only simplifies it, but there's never a real _need_ to. Whats your deal with import wildcards? In common libraries there's an ""import everything"" import, then some specific sub imports that don't bring in so much.

> use new symbolic operators

Http4s (note: biased since am maintainer) has very few symbols. Our DSL is pretty verbose.

> or translate between Scala futures and other futures?

Is this a fault of the library or the things you may have to work with though? Often enough a good chunk of the problem is that to use a java library, you have to use either their stdlib future, completableFuture or guava future, or amazon callback.... etc. This is not only a problem in the scala space.

",1522081746.0
naftoligug,"If it floats your boat, you can write a server in Scala with spark (http://sparkjava.com, not to be confused with the big data framework Apache Spark). It's a very minimalist web framework written in Java.
Most frameworks written in Scala take advantage of Scala's features. Maybe I misunderstood what you're avoiding.",1522128219.0
aphexairlines,"Akka HTTP seems to check most of those boxes.  The examples on their website encourages implicit conversions from HTTP routes to Akka Streams flows, but it looks like you can call `Route.handlerFlow(route)` manually.  Separately it seems odd to spin up an actor system and materializer for a server API for request handlers that deal with futures instead of actors.",1522073039.0
Falmarri,What do you mean by doesn't require users to declare implicits? What about execution contexts for future transformations?,1522094999.0
oleg-py,"I'm working on a web app with/for a colleague who has strong Java background and wanted to try out Scala showing no fear of hardcore things like shapeless as long as I explain them. So we're using it, and a lot of Typelevel libraries.

While I'm at it, I'm putting things that alleviate some of our pains into open. One of those is macro for defining enums for enumeratum without too much boilerplate:
https://github.com/oleg-py/enumeratum-macro

We use a handful of enums, and for somebody with Java background syntax of defining one in idiomatic Scala looks like an ugly hack, and other macro-based solutions don't really have a good support for Intellij, which we both use. Any suggestions / issues are welcome.


Another one is for easy integration of Quill and Monix: https://github.com/oleg-py/quill-monix
This is still in the works (only JDBC/H2 that we use is implemented), and affected by an [issue with TaskLocal](https://github.com/monix/monix/issues/612), but it's quite promising - no longer do we have to wrap impure calls in `Task.eval` manually, I can tweak thread pool used for DB separately, and transactions with async code are as easy as they are for synchronous code with plain Quill.",1522096301.0
estsauver,"I've been playing with Shapeless to try building generic web forms. It's funny, but so much of programming is still quite boilerplate wiring of fields to values, and I was wondering how far and how much of it all I could replace with a few specific type classes. 

I made a ""Table"" typeclass that lets you render any case class out as a normal nice looking table. I think something like a ""Rails Admin"" approach is definitely possible and is something I think I'm going to start building towards. ",1522763091.0
AlexITC,"Working building the second part of the [XSN Block Explorer](https://xsnexplorer.io/), at the moment it works querying the RPC server directly, a database is being integrated to be able to perform complex queries, it is [open source](https://github.com/bwang22/xsnblockexplorer).",1522462143.0
lihaoyi,"Hi! 

I just published this. If you've used uPickle before, or you didn't use uPickle before because it wasn't really good, this new release is much better in every way: simpler (e.g. in [dealing with the JSON AST](http://www.lihaoyi.com/upickle/#Construction)), faster (200% faster than 0.5.1, [200% faster the play-json, 30-50% faster the circe](http://www.lihaoyi.com/upickle/#Performance)), more flexible (e.g. you can [stream your JSON to/from the AST of any JSON library you want](http://www.lihaoyi.com/upickle/#OtherASTs)).

Try it out!",1522023239.0
peladonz,"Thanks for your effort!  I've been using uPickle in a 130,000 line ScalaJS business app I've been writing.  It's been very useful.  You the man.",1522029808.0
Daxten,"does it still use defaults which are optimized for shared models? e.g. nulled properties are dropped or if value equals default value it is dropped

or is it supposed to be used as a ""standard"" json library now?",1522058086.0
lutzh-reddit,"Hmm.. given the post's author is ""Team Lead for Kotlin libraries @JetBrains"", it's not very surprising that he favors Kotlin over Scala, is it?
",1521911145.0
ancientmatingcalls,Originally saw that post in a Medium daily digest email. Was hoping for a good post about the issues of JDK 10...but instead was met with practically an ad for Kotlin.,1521944699.0
Jasper-M,"Great, another Kotlin thread.",1521911675.0
acjohnson55,"Breaking: Scala doesn't make a great ""better Java""",1521977385.0
Shbla,Is Kotlin tooling really that much better than Scala if you don't use JetBrains products?,1521975194.0
volpegabriel,"Did you look into [fs2](https://functional-streams-for-scala.github.io/fs2/)? It's pretty easy to schedule effects by using `fs2.Scheduler`, no akka machinery needed. [Monix](https://monix.io/) also supports scheduling of effects out of the box.",1521893482.0
estsauver,"Akka Quartz Scheduler works pretty well. To create a scheduler, I create a singleton that looks like this: 

    @Singleton
    class Scheduler @Inject()(
        system: ActorSystem,
        @Named(""missile-launcher"") missileLauncher: ActorRef) {
    
      private[this] val scheduler = QuartzSchedulerExtension(system)
      scheduler.schedule(""JohnBoltonTime"", missileLauncher, Run)
      scheduler.start()
    }
    case object Run


in your application.conf then it expects you to have something that looks like:


    akka.quartz.schedules {
          JohnBoltonTime {
            description = ""Every night at 5pm""
            expression = ""0 0 17 * * ?""
            timezone = ""Africa/Nairobi""
          }
    }
",1521902924.0
Falmarri,There's also cron4j,1521940235.0
tweettranscriberbot,"The linked tweet was tweeted by [@http4s](https://twitter.com/http4s) on Mar 23, 2018 22:00:55 UTC

-------------------------------------------------

http4s-0.18.4 released:
- Timeout middleware cancels effect
- Multipart parsing is streaming, faster
- New expectOr method on client

-------------------------------------------------

^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •",1521844353.0
watt,".. because it is a hotfix. All actual features are pushed to 2.12.7 - ""2.12.7 is tentatively planned for August 2018.""",1521956708.0
aphexairlines,"If I run into a problem with `(fetch _ :|: create _ :|: =:)` then how can I search google, stackoverflow, github issues, etc for it?",1521832988.0
volpegabriel,"People that complain for not liking the syntax might have never heard of Servant nor used it. Although there are things that could be improved (as with any software) I think what you have achieved is pretty awesome, keep up the good work! 

If I manage to find some time these days I will definitely look into https://github.com/pheymann/typedapi/issues/2, taking it as a personal challenge now XD",1521984460.0
,[deleted],1521819962.0
Krever,"Checkout [endpoints](https://github.com/julienrf/endpoints), we re doing pretty much the same thing ;) Not on type level but it's still perfectly typesafe.",1521871973.0
albireox,What do you think of GraphQL?,1521823583.0
yang_bo,Would it interest more people if the title is changed to `Writing unit tests in your Scaladoc`?,1521811988.0
kpws,"/u/joshlemer, can we ban this bot: https://www.reddit.com/user/TheDataIncubator",1521752477.0
theQuatcon,"A very interesting episode and while I usually agree with JDG on mostly everything technical, I think he's incorrect about the the reason for the backward-compat problems Haskell has regarding typeclasses. The fact that the fundamental ones were decided ages ago *is* a problem to be sure[1], but the problem is not that they're part of the standard library. (I think it's actually a huge problem that they're *not* part of the stdlib in Scala, but for different reasons.)

I think the real reason is that very few Scala users are actually *using* and *relying* critically on these fundamental typeclasses (Monad, Functor, etc.) in Scala. At least in my experience, type classes in Scala tend to be much more ad-hoc and since you don't have to consider effects specially, you just end up with this mish-mash of imperative type-classes that just avoid Monad/Functor by accident of being imperative. In Haskell you can't really avoid M/F sensibly because you must use them to gain access to effects.

That is, my hypothesis is that the #(developers using Haskell) is actually greater than #(developers using Scala using Monad, Functor, etc. abstractions). At least that's my experience.

[1] There just wasn't the necessary experience as to which mathematical abstractions were most useful *for programming*. They were also far to zealous to group unrelated things, see the infamous `Num` type class.",1521837847.0
CremboC,I'm using JDK 10 as a runtime. Looks like it's working fine. Compiled with JDK 8 though.,1521755526.0
nonconvergent,Honestly I won't think about updating any project till 11. GA's out now so maybe a good time to do A-B breaking/performance testing and get a leg up on September.,1521735516.0
RandomName8,sbt doesn't work with it because it checks the jvm version and it's too new so it doesn't recognize it and asks you to download java newer than 6.,1521730989.0
plokhotnyuk,"I have added benchmark results with JDK 10: https://plokhotnyuk.github.io/jsoniter-scala/

In general results are the same as with JDK 9. No new big (>50%) regressions or improvements was detected comparing with changes from JDK 8 to JDK 9: http://jmh.morethan.io/?sources=https://plokhotnyuk.github.io/jsoniter-scala/jdk8.json,https://plokhotnyuk.github.io/jsoniter-scala/jdk9.json

No changes was detected in benchmarks with samples of realistic messages, but some differences can be spotted for special cases.

Most of benchmarks where throughput was decreased on 5-10% are with higher allocation rate, than others. It looks like changes in GC work or default options.

Also in these results some improvements can be spotted in String to Int and back conversions, and in encoding/decoding of long (more than 100 chars) ASCII strings to/from bytes.

",1521820063.0
refriedi,"scalac on JDK 10 crashes when compiling our project with scalac optimizations enabled.  Haven't had much chance to dig into it yet, so for now it's JDK 8/9 with optimizations enabled, or optimizations off for JDK 10.",1528563558.0
_gDanix_,"I found it simple enough to contribute to it. But first of all I have to ask, has this library any advantage over [Sloth](https://github.com/cornerman/sloth) or [Autowire](https://github.com/lihaoyi/autowire)? Is Spark using it?",1521710579.0
naftoligug,"Looks really nice! But it needs more documentation.
",1521702614.0
Krever,What benefit do you see in RPC over HTTP communication? If RPC is not a must I would consider encoding protocol with [endpoints](https://github.com/julienrf/endpoints),1521720270.0
m50d,Have you looked at Scrooge? My instinct for things like this is to rely on existing standards as much as possible; if this is nicer than existing solutions then the README should explain those selling points.,1521718345.0
naftoligug,"Why does it need to generate case class? Why not use tuples, or even Seq (since you don't need type checking at that level anyway)?",1521943928.0
JoanG38,This might solve my issue with autowire. I need to look into this!,1522157122.0
s_t_m_j_r,Watch out with the upgrade if your project depends on macros: https://github.com/scala/scala-dev/issues/480,1521581870.0
,"UPDATE [ 3.21 ] The Homebrew install works now!

I don't think I've ever had an error upgrading Scala via Brew on the Mac. But, then, there's always a first time:

==> Upgrading 1 outdated package, with result:
scala 2.12.5
==> Upgrading scala 
==> Downloading https://downloads.lightbend.com/scala/2.12.5/scala-2.12.5.tgz
Already downloaded: /Users/objektwerks/Library/Caches/Homebrew/scala-2.12.5.tgz
==> Downloading https://raw.githubusercontent.com/scala/scala-tool-support/0a217bc/bash-completion/s

curl: (22) The requested URL returned error: 503 Loop detected
Error: Failed to download resource ""scala--completion""
Download failed: https://raw.githubusercontent.com/scala/scala-tool-support/0a217bc/bash-completion/src/main/resources/completion.d/2.9.1/scala",1521576414.0
plokhotnyuk,The string interpolation throughput improved in more than 2 times with Scala 2.12.5 compiler: https://sizmek.github.io/fast-string-interpolator/,1521822693.0
estsauver,"I've had a hard time wrapping by head around typed actors, but this makes sense. I guess the ""Is everything a state machine now?"" feeling I had was actually the result of a very conscious design decision. ",1521718995.0
,[deleted],1521820311.0
Pmgubbey1,"Sinisa Louc follows on from his first article on 'Demystifying the Monad in Scala' with his Part 2, which approaches the subject from a more theoretical point of view.",1521546823.0
jtcwang,Monix is one of my favorite libraries in the Scala ecosystem. Thank you for all your work!,1521545337.0
IndiscriminateCoding,"I'm curious, what is the story for network IO when using monix and cats-effect? Does it have integration with NIO/netty or is it using thread pool to read/write data?",1521577911.0
ingvij,"You shouldn't use exception-based extractions.
Put your regexes in a list and map the list with the according extraction function, something like `regex => Option[element]` and flatten the list after. ",1521532838.0
MasGui,"Off topic: try/catch in Scala can use `PartialFunction[Throwable, T]` in it's handler

    import util.control.NonFatal
    
    val arithmetic: PartialFunction[Throwable, String] = {
      case e: java.lang.ArithmeticException => ""division by zero""
      // more ...
    }
    
    val catchAll: PartialFunction[Throwable, String] = {
      case NonFatal(e) => ""catch all: "" + e.toString
      // more ...
    }
    
    try (1/0) catch(arithmetic /* more ... */ orElse catchAll)",1521724835.0
Philluminati,"Use the try Monad to on the smallest parts of the code and use Options, Eithers and maps for the rest.",1522831768.0
acjohnson55,Everyone read the survey last week. ,1521523929.0
ebruchez,[Already disscussed](https://www.reddit.com/r/scala/comments/830ckl/for_the_third_quarter_in_a_row_scala_dropped_in/).,1521523971.0
simon_o,"Doesn't seem to be an isolated measurement:

It is consistent with other metrics like the [Stack Overflow survey](https://insights.stackoverflow.com/survey/2018/), [PYPL](http://pypl.github.io/PYPL.html), [GitHub data](https://www.benfrederickson.com/ranking-programming-languages-by-github-users/), [Google trends](https://trends.google.com/trends/explore?q=%2Fm%2F0_lcrx4,%2Fm%2F091hdj), sentiment analysis on [Twitter](https://twitter.com/search?f=tweets&vertical=default&q=scala%20kotlin&src=typd).",1521531681.0
selbatpordybbob,"Awesome looks great! Thanks for the continued effort on this /u/alexeclu!
When would you personally suggest to use the new cats effect over this? Do they fit different niches or is it eventually going to replace monix?",1521491259.0
Baccata64,/u/alexelcu so which one are you using ? IO or Task ? ,1521487036.0
m50d,"Scala is a general-purpose programming language. To my mind the strengths of Scala are in large systems, which are inherently difficult to demonstrate. That said, DSLs and custom effects (via HKT) are the biggest places where it solves pain points that exist elsewhere in the industry.

One idea that's fairly simple and where I don't know a good existing solution: translations. Translators aren't generally programmers so a lot of existing solutions involve the translator editing an external config file in a weird custom syntax. Bugs where code fails to distinguish between strings that need to be localised and strings that don't are common, as are bugs where the translation filter/interceptor is simply missed off from a given page or endpoint.

So you could do something like: a web API with text endpoints (for simplicity) that returns objects where some fields are meant to be localised and some aren't, that ensures these things are used safely (and dovetails with unit-testing) where the translations are specified in files that should be readable for non-programmers.

   * Start with a basic REST endpoint in akka-http or rho. Make sure you can use version control and do (tagged) releases at each step. The data can just be some static scala files (of, I don't know, users and pets and codenames - a bunch of `case class`es with different fields) to keep things simple, and then the endpoints do something like return textual stories with some user-facing data and some metadata keywords, some of which need to be translated and some of which don't.
   * Create a distinct type for markers that must be replaced with appropriate translation
      * Possibly using `AnyVal`
      * Use wartremover to enforce that you never call the built-in `toString` so you can't accidentally use these as ordinary strings
   * Implement an embedded DSL that allows translators to write translation specifications in Scala that's as close to plain text as possible
   * Turn your marker type into a higher-kinded type that can represent any kind of value that needs to have the ""translation filter"" applied
      * Make this marker type an applicative or monad
         * Show using it in `for`/`yield` composition, or in cats' applicative sugar
      * Enforce (using `private` etc.) that there's no way to instantiate a ""needs to be translated marker"" directly without getting a value in the higher-kinded type
   * Extend the translation-specification DSL to allow placeholders in the translations (e.g. ""Happy (21st) Birthday (Bob)!"")
   * Reimplement the marker using `FreeApplicative` or `Free`
      * Show the use of a stub ""translation filter"" in unit tests compared to the ""real"" implementation
   * Implement a custom directive or marshaller that handles the marker type, so that you can use routes that return values that need to be translated directly in the HTTP routing DSL.
   * Extension: show combining error handling (using `Either`) with translation on the same endpoints, to show that you can manage multiple effects without them interfering with each other - if you're using a monad you'll have to use `EitherT`, free coproducts, and/or final tagless style.
   * Observe that you were able to continuously refactor your project in a safe way over its whole lifetime - you started with a simple app and gradually extended it to add more functionality, and at every stage the type system helped show everywhere that you needed to change something to work with the new way of doing things. This is a key part of Scala's usefulness in the industry.",1521481118.0
Philluminati,"I would read the first three chapters of Akka in Action which is a unique to Scala, distributed systems framework that’s easy to use.

Maybe make a website (using Akka-http) that can read a file off of data.gov.uk such as staff salaries csv and generate some reports from it or maybe some graphs.",1522831997.0
emilypii,"Good post! Some critiques: It'd be nice if you finalized the post with a kind of ""best practice"" solution using `raiseError` and `attempt` so there's no confusing mismatch between `Try` and `IO` (no dirty `.left`s or `toEither` is a bonus). `EitherT` is fundamentally useless here, and defeats the purpose as well as any errors will propagate through your program within `IO`. ",1521507897.0
pellets,The transformer stack needs to die in a fire. It should be a transformer set.,1521479496.0
not-amalia-rodrigues,"Judging by the # of posts on ""Scala Times"" mailing list, Poland is a Scala superpower.",1521535211.0
LukaJCB,"There's https://functionalconf.com/, but yeah I see your point, the simplest explanation probably is supply/demand.",1521464856.0
thesuperching,"seems that main user in Asia is Japan.
I'm also thinking explanations,  tech maturity? or education?",1521547943.0
sdelmore,"I love this change.  Besides helping out blind users I think it will be useful for the community in a wider sense if it helps people standardize on the verbal representation of code as I have noticed many of us read the same code aloud in different ways which can hurt communication, for example when pair programming.",1521543339.0
Macrobian,"[Copy pasting from the [/r/rust thread](https://www.reddit.com/r/rust/comments/85qyoq/accessibility_of_the_scala_compiler/)]

Great to see this here!

I hacked out the little [proof of concept](https://github.com/scalacenter/advisoryboard/pull/37) in the original proposal. If anyone wants to help, we need more [input / expected output](https://github.com/MaxwellBo/scala-verbal-descriptions/issues/3) tests. 

I did a [similar thing for Python](https://github.com/MaxwellBo/neoreader) a while ago, that actually turned out pretty well!",1521538466.0
danielnixon,It'd be great to see a similar initiative to fix the accessibility issues in the API documentation too. E.g. http://www.scala-lang.org/files/archive/api/2.12.4/ has a nasty keyboard trap where you can move focus to the search input and then never move it elsewhere. See https://www.w3.org/TR/UNDERSTANDING-WCAG20/keyboard-operation-trapping.html,1521542459.0
duhace,how would this be implemented? will new keywords come into the language to describe the operators like in the example? or will there be utilities to convert from spoken to code scala and vice-versa?,1521491950.0
fromscalatohaskell,"Great! How important is it? I mean, is there audience that wishes to use Scala but can't due to unaccessibility? How common is for langs to be accomodating?",1521483434.0
thesethingshappenl,"I was looking at the jobs at zalando Berlin, plenty of scala there. Does anyone know what they use it for exactly? Same for Akka, it's huge so I guess they mostly use specific parts. Anyone interviewed there? What's the process like?",1521995036.0
SubMachineGhost,"Why does this code

    String.format(""%02X"", 2.toByte)

generates this error?

    overloaded method value format with alternatives:
     (x$1: java.util.Locale,x$2: String,x$3: Object*)String 
     (x$1: String,x$2: Object*)String
     cannot be applied to (String, Byte)



",1522144149.0
oleg-py,Is anybody here using Scala as a better Java? What is your opinion on Scala so far?,1522162224.0
fromscalatohaskell,"Does scala run faste run faster on java9 than java8? Does anyone measure it? How about compile times etc.? Or is it in realm of ""make no sense""",1521634124.0
humblehound,"I'm trying to find a simple hosting/pipeline solution for a medium sized Scala app. All I need is a mongoDB DB and a single instance of my app, rebuild and redeployed with each push to github. No load balancers and other fancy stuff, only one port exposed. The app will be idle most of the time, so paying for actual usage would be great. Can anyone recommend a simple solution that fits my needs? ",1521646642.0
themoofinman,"I've been doing a crash course of scala recently. I don't come from a scala or java background, and I'm having some issues finding good information on how projects should be structured. I've done a lot of small exercises and I'm at the point where I'd like to build my first small app, but unsure of how everything I've learned so far translates into a full app. Any resources about this sort of thing or examples would be super helpful. Thanks!",1521691168.0
AIienreborn,"Is there something like python requests in Scala? My requirement is to send simple rest API calls to elastic from spark, would prefer it to be asynchronous. 

Things that came up from little research:


- https://www.implicitdef.com/2015/11/19/comparing-scala-http-client-libraries.html


- Looks like this is recommended way? https://github.com/playframework/play-ws


- of course there is another library posted right now on front page: http4s? ",1521888782.0
ForrestTrump,"I was wondering if there is any good reason to think that Scala will continue to stay strong, with those Redmonk Index reports showing that it's popularity has dropped three quarters in a row. ",1521511549.0
plokhotnyuk,Is it safe for a library (and its users) to be compiled with `-opt:l:inline` option if it depends only on `scala-library` and `scala-reflection` jars?,1521931621.0
sjrd,"What exactly do you call a *hybrid* Scala/Scala.js project? That you say you need both `./sbt compile` and `./sbt fastOptJS` seems a bit weird to me, because `fastOptJS` *depends on* `compile` anyway, so doing `fastOptJS` is enough to get `compile` as well.

You don't have a single sbt `project` that you use *both* as a JVM project and as a JS project, do you? Because that's not supported, and can have very weird consequences. If you need the same code compiling both to the JVM and to JS, you need a `crossProject`.",1521460915.0
yawaramin,"Also based on your wording, you’re not _actually_ running separate sbt commands for each of the tasks, right? Sbt startup easily takes up most of the runtime of each run. Keep sbt open and run the tasks from an active sbt session, that will dramatically cut down on run time.",1521737174.0
khvatov,I was attending. Just didn't check this channel. It was a great talk. The other his talk on Composing Programs was also pretty good.,1521510888.0
killermouse0,"Have been using it because it's simple enough to get going, but still looking for a way to draw a simple pie chart to this day.

I think matplotlib is still leagues beyond.

Agree that viz is a weak point and also time series analysis!

Let us know if you find good visualization packages. Been looking for one for a long time!
",1521357171.0
zjffdu,Here's one tutorial of how to use it in zeppelin https://www.zepl.com/viewer/notebooks/bm90ZTovL3pqZmZkdS9mOThiNjg5YTcxNmQ0Njk0OGE2YzE0OGZiMWU4NTgxMS9ub3RlLmpzb24,1521381645.0
commithook,"Thanks, Jsoniter looks great! Is it possible to have a scala.js version?",1521353342.0
BroodmotherLingerie,"Any convenient way to decouple deserializers for nested structures from the outer deserializer and dispatch them dynamically?

    abstract class Blackbox

    case class Message (foo: String, boxes: Seq[Blackbox])

    implicit val codec1: JsonValueCodec[Blackbox] =
        <custom implementation that fans out to JsonValueCodecs for concrete implementations>

    implicit val codec2: JsonValueCodec[Message] = JsonCodecMaker.make[Message](... codec1 ...)

",1521395818.0
Apterygiformes,I have never dreamed of that and hope I never will!,1521326920.0
Tywien,JSON can never be parsed as fast as any binary serialized data simply because the JSON format is longer and thus needs longer to load...,1521398184.0
ScalaWilliam,"This will be highly useful in specialised cases, such as reloading an event-sourced JSON-based journal/log upon application start-up, as the typical bottleneck is the parsing.

These cases however are rare.",1521345111.0
Mimshot,"Sounds great. When can we see it?

I mean don't get me wrong, it looks like you've got a fast json parser here, but if you're going to claim performance is what distinguishes you, show me a benchmark agains avro, colfer, acyclic kryo, or protobuf.",1521852344.0
joshlemer,"if you right click on the text itself of `object Hello` is there a ""run""?",1521316255.0
jimschubert,I've found that sometimes you need to close the project and reopen it to get all the SBT features.,1521375739.0
polypus74,"i just started Scala on Idea a few days ago and was having similar troubles. I'm a noob to both, so caveat emptor.

my advice, once you are sure you have the JDK and Scala plugin installed is:

'exit project' so you see all your projects, and remove them all. just so you start with a clean slate. 

start a new scala/sbt project.

make sure that src/main/scala is blue, i.e. 'sources root', and that src/test/scala is green, .i.e. 'test sources root'. you can change these via right clicking folder 'Mark directory as' in Project sidebar. note that the first couple of projects i created did not seem to be set up properly automatically, but once Idea 'stabilized' it seemed to work on subsequent projects. it should be set up for you, just something to look out for though.

make sure you create your `object WTF extends App...` under src/main/scala. if right click still doesn't work, save and then under file -> 'invalidate caches/restart'. the latter is a good thing to do (afaikt) whenever there is any kind of weirdness.

it almost drove me crazy a couple of days ago, but it finally worked, although i have not gotten packages to work yet.

hope that helps




",1521482807.0
LukaJCB,"I'd suggest going with http4s, it's got the same simplicity as Scalatra with some really great support and a really neat model that closely follows functional programming. I've used Play, Scalatra and Akka-Http and never did I have as much fun as using http4s!",1521309851.0
SQLNerd,"One of the benefits you get with Play! is the vast amount of documentation that comes with it, so I'm surprised to see that this is a pain point for you. Yes, googling may lead to older versions of the doc, but that's not a knock on Play!... rather a benefit that Play! maintains documentation for older versions. Navigate their doc on the website itself and you should have a better time.

You certainly wont get _better_ documentation than Play's in another framework, so if that's what your main gripe is, then you are out of luck.

RE the listed modules that you linked, these are not maintained by Play. Instead these are open source modules that they kindly list on their website. Just like with anything 3rd party, said party is responsible for maintaining the module. If you are concerned with a given module's compatibility, it is a topic for that module's maintainer. 

Play is flexible enough that you don't really need modules to do tasks. Don't like the modules that are available? Make a class that you inject into a controller for whatever you're looking to accomplish.

Anything included within the framework itself is of course compatible as it is typically packaged with the framework. 

I'm not saying Play is better than what's available but I don't think your criticism of it is indicative of, well, problems with the framework.",1521301048.0
softiniodotcom,"I must admit I like the play documentation so I don't share your pain point there. 

If you are looking for a lighter weight framework take a look at: 

http://http4s.org
",1521301748.0
v_krishna,"When googling do ""play framework"" instead of just play. E.g., ""authorization play framework"". It tends to help.",1521323062.0
kag0,"Everyone has already commented on the docs, and I think play is pretty good. But if you plan on setting up more of a SPA than an MVC app, and you can deal with a library rather than a framework, then I'm a really big fan of Akka HTTP. It manages to be very minimal and just take care of the http part of your application while still being extremely comprehensive (the Scala Uri class in there is the best I've seen anywhere).",1521313590.0
amazedballer,"If you are using Google, then using a query and sticking ""site:playframework.com 2.6.x"" on the end will usually give you what you want.  

If you are looing for something general, then looking for ""play framework"" gives you more specific options in the way of blogs and articles.",1521333075.0
DevIceMan,"> First of all, googling ""play"" is a recipe for disaster,

Just a small observation:

* It appears that many of the people here who like the documentation might be going directly to the documentation, and then looking for an answer.
* Conversely you seem to be going to google and typing in a query.

(I'm not an expert on Play, but I think this might be something other responses are almost saying, but not quite saying it directly)",1521305927.0
Florian-Dojker,"Welcome to opensource, where documentation can be a mess and is often an afterthought (i'd say play is an exception to the rule). 

As a rule of thumb, for the most recent info, look as close to the source as possible. So for the mongo driver, go from the play website, to the reactivemongo website (you'll land on the 0.11 version docs, so go further) to main site, and find out that yes play 2.6 is supported in the most recent version.

Play is pretty high level, lots of batteries included. When i started with it, i found the docs good enough, but yes, high level, not much low level docs. If you're looking for something more low-level (which might be a better match for your requirements, since you might just want a rest server if you plan a fullfledged single page app with scala js) just look at this reddits sidebar under ""Web Development and Microservices"".  I like http4s, but there are other options. I'd avoid vert.x, it's stringy-typed and you might as well python then. (also look at https://index.scala-lang.org/ and https://github.com/lauris/awesome-scala to see what libraries are available).

",1521301179.0
jika_,"I faced a similar issue when working on a project at work. A previous programmer decided to use Play to serve a REST API. I took over after he left, and the project started getting more requirements, including adding authentication and authorization. I was surprised that there wasn't a straight forward way to do it in the latest version of Play. Googling for ""play authentication"" leads you to [this link](https://www.playframework.com/documentation/2.1.1/JavaGuide4), which is obviously out dated. I found a couple of other plugins which were not even supported in 2.6. One of them had a github issue open since august of 2017 and to upgrade compatibility to 2.6 and it was still open. I ended up switching to Spring Boot.",1521313710.0
,[deleted],1521361249.0
amazedballer,"> First of all, googling ""play"" is a recipe for disaster, and it is very difficult for me to zero-in on something useful, and more often than not you are taken to the documentation of modules for 1.x release (where I would expect a big banner telling you it's old stuff, but no (for instance, google ""play framework mongodb"", get here, get excited, get disappointed)

There actually is a warning:

""You are viewing the documentation for Play 1. The documentation for Play 2 is here.""

However, it's not a big banner.  Filed https://github.com/playframework/playframework.com/issues/200 to make it bigger.
",1521480424.0
,[deleted],1521295565.0
LukaJCB,"This release includes the (long awaited) NonEmptySet and NonEmptyMap as well as contravariant coyoneda and stack safe Kleisli, so get it while it's hot!",1521282052.0
eeperson,"Those `DEBUG` look like they are coming from the tests themselves and not SBT.  So, if you want them to go away you will probably have to turn down logging in the application.",1521237356.0
jackcviers,"1. Make a src/test/resources/logback-test.xml
2. set the root log level to error:

    <root level=""error"">
      <appender-ref ref=""console""/>
    </root>
",1521255095.0
joshlemer,"This was posted here less than a year ago  
https://www.reddit.com/r/scala/comments/6357s9/scala_interview_questions/  
  
I don't know what's going on with functional.works-hub.com but they are now basically spamming this sub with old, re-hosted blog posts, by users who are new. ",1521221102.0
TheOsuConspiracy,"Kinda noob here, how does this differ from Monix's Task?

I mean from a semantics point of view, seems like it's nearly a drop in replacement? ",1521221383.0
emilypii,"It's been a pleasure working with `cats.effect`, and I would encourage people to not be afraid of working with `cats.effect.IO` en lieu of Futures. The learning curve is slight, and the benefits are fantastic.",1521226100.0
zzyzzyxx,"I'm curious how this will end comparing to `IO` in Scalaz 8, on which there was some discussion [a few months ago](https://www.reddit.com/r/scala/comments/7dg6fx/scalaz_8_io_pull_request_by_jdegoes_pull_request/).",1521236184.0
yawaramin,"Alex, this is amazing work. The guide is easy to read and flows naturally from topic to topic. Just for the sake of argument though, I’d ask: wouldn’t the `Future` example become pure and referentially transparent if we lifted it from a `val` to a `def`? It really seems to me that would have the delayed evaluation property that makes `IO` RT.",1521296773.0
erwan,How does it compare to ScalaZ MonadIO?,1521220892.0
Jasper-M,"What do you think about having some sort of [SafeApp](https://github.com/scalaz/scalaz/blob/series/8.0.x/effect/jvm/src/main/scala/scalaz/effect/SafeApp.scala)? It's a small thing, but it looks fun to have a pure entrypoint.",1521235861.0
chemacortes,"The recommendation is not use the infix notation with methods with symbolic name when has more than one parameter (https://docs.scala-lang.org/style/method-invocation.html). Use long names instead (eg: `foldLeft`).

In this case, `/:` expecte two curried arguments. With the first argument you has a method `(0 /: myList)`. In order to convert it into a function you must use `(_)` with parenthesis:

    val partiallyApplied = (0 /: myList)(_)

But the (*actual*) scala compiler needs the type of this second argument, then:

    val partiallyApplied = (0 /: myList)(_:(Int,Int)=>Int)

or, also:

    val partiallyApplied = (0 /: myList)(_:Function2[Int,Int,Int])
",1521206419.0
Ghonesis,Does the second one give a compiler error or does it give incorrect results?,1521187361.0
jackie_pwn_asses,"Sometimes, I briefly pause to puzzle over questions of this nature, and then I move on. ",1521159909.0
alexelcu,"UPDATE (hours later 😀) — the release happened:

- [Release notes](https://github.com/typelevel/cats-effect/releases/tag/v0.10)
- [Website](https://typelevel.org/cats-effect/)
- [ScalaDoc](https://typelevel.org/cats-effect/api/)

---

Hi all — the website for Cats Effect is in progress, I'm writing some docs as we speak, because it is incomplete and the 0.10 release is ongoing.

I did not plan for this to be announced yet, until the latest is in, but I guess people are happy to see it 😀 So keep in mind that the website you're seeing today is going to change until tomorrow 😜

The cancelable `IO` is coming!

Cheers,",1521194441.0
acjohnson55,"Very cool! As a suggestion, it could use more of an explanation for what it does and how it's used.",1521165714.0
kailuowang,Thanks to /u/alexelcu,1521141496.0
teiteiteii,"Anyone have heard of this book ? any thought on whether it's a ""good"" starting point to learn machine learning through scala ?",1521134436.0
tsec-jmc,"Not gonna lie, this sounds like a meme.

Just needs `Kubernets Cloud BlockChain` added to the beginning of it for maximum 💯💯💯💯💯💯",1521170487.0
know_not_much,MEAP is dog shit.. books are stuck there for years ... like this one. ,1521139636.0
tombstone312125,"I'm in a situation similar to yours, and I still struggle with this.  The introduction of Scala was done about eight years ago at my company.  The manager who introduced it moved up in the company and away from the Scala projects.  

I'm experienced with the language, but not on the level of the using fancy functional concepts like coyoneda or coproducts, and not so much on the type system programming either.  But I am familiar with nearly all of the language features.  

There's still plenty of features that Java 8 doesn't have:

* implicits -- allow for the pimp my library pattern, and conversions of similar types without a lot of boiler plate.  I've used them to unify date APIs.  
* implicit parameters -- allow you to stop (explicitly) passing around those ""context"" objects to all your classes and methods
* case classes -- an immutable data object with equals and hashCode and copy implemented for you, all in one line of code
* pattern matching -- way more powerful than anything you ever see in a Java switch statement.  Match, cast, extract and assign on the same line of code.
* stronger types -- hard to argue for unless both parties have a good understanding of this stuff.  But the type system in Scala is stronger than Java's will likely ever be.
* better type inference -- hurry up, I hear this is coming in Java 10 with ""var""
* immutable by default -- Scala encourages immutability by default.  Immutability will eliminate a bunch of bugs, and allows for easier concurrency
* defaulted arguements -- stop overloading to provide default values, specify them in the function definition
* named arguements -- if you wanna skip specifying a few parameters you can just call out the ones you're passing in.  Eliminates most use cases of the builder pattern.
* multiple inheritance -- trait composition essentially allows for multiple inheritance

Even considering Java 8 streams, the syntax is still awful, and using them can be a bit clunky, especially when compared to Scala's.  Lambda syntax is still also kinda ugly.  It's not ever going to be as nice as Scala's.

Scala is still hands down a better language, but convincing Java Programmers of that is going to be pretty hard.  In my experience most of these programmers just want to stick with what they know, get their job done, then move on to the next task, get paid, repeat.  No time for learning new things.

You'll have to become a Scala evangelist, and even then there's a good chance you'll just turn into that ""Scala guy"".

But also look at the companies point of view.  When hiring, the pool for Java candidates is way bigger than Scala.  So using something not many know will mean more on-the-job training (which seems like waste to those business people who don't know the difference between Java and Javascript).  

You've got a lot of barriers to overcome.  I have been trying to overcome these for years, but it's hard as one man in a Java shop to push for change.  Maybe you can find an ally in this fight.  I've managed to show a few other engineers the light, and I hope one day there will be enough of us to make a better push for a change.

",1521126732.0
pythonicus,"You should use technology that the team, on average, can be effective. That being said, imho, pattern matching by itself is worth using Scala over Java 8. ",1521131702.0
EsperSpirit,"Java8 has only introduced lamdas. While lambdas are somewhat of a requirement for functional programming, Java8 still actively works against you if you really want to do functional programming.

Also, even if Java8 as a language would be suitable, the Java ecosystem hasn't changed in the slightest and is still a shit show of fragile mutable-everything, sideeffects-everywhere code you cannot escape. ",1521152917.0
raghar,"In Scala functional features are embedded into language and it shows everywhere: in standard library, ecosystem and recommended practices.

In Java AFAIR maps allow `Null`s, monads have kind of clumsy interface, that you can only access once you write `.stream()`, immutable data structures are second class citizens, because everybody and their mother uses mutable ArrayLists, Maps and Sets. (And immutable data in e.g. Guava had the same interface as mutable, but they were throwing exceptions on mutable ops...).

That's why Java's 8 new features are not so convincing to me. Besides Scala still have much more to offer:

 * type classes and type class derivation (Java won't let you achieve sth like Circe in compile-time)
 * better type system (type bounds, variances, higher-kinded types)
 * ADT
 * macros

If you want a good example of Java vs Scala I think implementing something with Akka HTTP and Akka Stream and comparing the implementations would show how much troublesome is Java when one needs to obtain the same power of expression.",1521127508.0
kudah,"* No null
* Safe, Concise, Productive
* Doesn't need brittle, unmaintainable codegens for basic functionality (Lombok etc)
* Doesn't need brittle. unmaintainable runtime reflection and bytecode generation for basic functionality (AOP, Spring etc)
* Never have to deal with runtime reflection in general
* Best OOP support in any language currently, traits are far, far more expressive than anything Java can offer
* World-class FP support with implicits, for comprehensions & macro materializers
* Higher-qualified and more passionate candidates on average
",1521139733.0
pellets,Compile time dependency injection via implicits is something I like very much.,1521126435.0
zzyzzyxx,"People often need to understand there is a problem before they can understand the motivation for the solution. One tactic you might try is to find pieces of your Java codebase that are rather verbose, or complicated because Java doesn't have a way to express it cleanly/simply (have any wildcard bounds, for instance?), or doesn't quite do what you want, or polluted with null checks, or caused an issue in production, or any other real issue you've had, and then show how Scala can help solve, prevent, or otherwise improve that situation.",1521137884.0
m50d,"For me the compelling case for Scala is that it offers safe replacements for reflection and AOP. In Scala you can do ""walk the object graph"" things like JSON serialisation with compile-time type safety (via shapeless-style typeclass derivation), whereas in Java you have to use unsafe reflection. And you can do things like `@Transactional` in a type-safe way (particularly helpful when it comes to unit testing - you can immediately see which methods need access to a database and which don't) by using HKT and custom monads; Treelog is another good, simpler example of the kind of thing that you'd have to use a ""magic"" interceptor to do in Java. Since reflection and AOP were two of the biggest sources of production bugs when I worked in Java, I find it's well worth being able to replace them with ""plain old code"", even when that code is a bit uglier than the ""magic"" solution.

The other advantage I've found is that the language is flexible enough to replace config files with code - e.g. the rho or akka-http routing DSLs let you write Scala instead of a routing definition file, Slick database mappings are defined in code rather than an external file, Scala makes it practical to ""wire up"" your application by hand without needing a configured, reflection-based engine like Spring, there's a rules DSL somewhere that can replace using Drools with external rules config files... Misapplied changes to config files, or forgetting a config file when refactoring, are again big sources of production bugs in my experience.",1521127084.0
SpeakngFrmExperience,">Everyone I work with has either recently graduated or still studying and all they have ever known is Java. Our manager is conscious of this and is of the opinion that Java 8 introduces functional programming in Java so we should phase out our use of Scala.

I get the feeling that the company just cannot afford to hire senior developers (or does not get the value..)  and your manager wants to avoid Scala to keep labour costs down.  I'm curious: where are you based ? 

It may be the case that you need to convince your manager that adopting Scala does not make it harder to hire developers (i.e. it used to be very hard a few years ago but now it's easier). ",1521142099.0
ebruchez,"Beyond safety and concision, I love Scala because it allows me to *model* problems in better ways than with most if not all mainstream languages.

I can use a panoply of tools such as case classes, objects, pure functions, ADTs, smart constructors, traits, extension methods, typeclasses, and more, yet all of these features are overall quite neatly integrated together, some in fact building on others.

Problem domains can be complex, and too often languages lack the tools to express them. You cannot reach perfection in modeling, but Scala gets you quite a few steps ahead.
",1521131855.0
cantbelieveitsbacon,"The racket goes like this: 

8 year ago, through the then revolutionary art of data-mining (ahem online survey) , some blog published an article stating that proficient scala developers are hyper productive 10xers. So every upstart switched to scala - not for its technical merits - so that they would be staffed with 10xers. This was a move initiated by bean counters.

Scala 10xers soon all flocked to Google and Amazon. Now these companies are back to hiring 1xer developers and college grads and realize that on average, well people are average!

Now it dawns on bean counters that the scala candidate pool is much smaller than java.

Can you read the bean counter's mind? Thou shalt know his next move!",1521176090.0
senatorpjt,"It sounds like you have a lot of turnover at your company, if you need to be able to replace people easily with ""commodity developers"" then you should just stick to Java.

However you might also want to look at Kotlin, it gets you about 80% of the advantages of Scala while remaining much more approachable to the average Java developer. Plus Google has thrown some weight behind it by officially supporting it for Android development.",1521154778.0
diesalbla,"You may want to watch Kevin Webber's talk about his transition from Java to Scala, and how to satisfy all stakeholders involved on the decision: https://vimeo.com/217843501

It may give you some arguments, and how to approach your problem. 

",1521163013.0
p220,"Worth pointing out that it doesn’t have to be an either/or.  They mix well, with some discipline.",1521155274.0
vitalijzad,"Just one example: print multiples of 3 from 0 to 30.

Scala:

    (0 to 30 by 3).foreach(println)

Java 8:

    IntStream.range(0,30).filter(n->n%3==0).forEach(System.out::println);",1521129226.0
Christo4B,"Why are you fighting for the language? If there aren't features that you absolutely need in Scala that aren't present in Java 8, that should be obvious. Otherwise, it sounds like a better organizational decision to write new code in Java.",1521143423.0
michaelmalak,"Scala is my preferred language (I use it with Spark), but it is hard to justify its use on a team.

See:

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.261.3185&rep=rep1&type=pdf

Also (disclosure: I wrote this ""Criticism"" subsection of three sentences of the article):

https://en.wikipedia.org/wiki/Scala_(programming_language)#Criticism",1521133940.0
Ray192,"Just write some code in Scala and compare them to the equivalent Java 8 implementation, using the features people have mentioned.

The biggest hurdle is getting people to buy into functional programming as a whole. Once that's done, it's easy enough to show java developers how annoying it is to write a bunch of sequential flatMaps vs. a nice for-comprehension, or just not needing to type out insanely long types every time.",1521239846.0
Judheg,"Source of inspiration Julien R. Foy : https://www.youtube.com/watch?v=6j5kZj17aUw

I personally think this is a clearer style of FP for  OOP guys like me than the original Type Class.
",1521098210.0
Judheg,"Maybe I should provide a link that this was continued part of my attempt to learn typeclass : https://www.reddit.com/r/scala/comments/84hhs3/speaking_creature_a_gist_from_trying_to/

Shared here just in case there are others who are learning about it also. 

Not for those who are expert.",1521145339.0
emilypii,You're on your way! ,1521074081.0
Judheg,"This is just a rehash from examples on Scala with Cats, and FP Simplified, which I personally find easier to understand.",1521065873.0
lu4nm3,"Don't get too caught up with actors. They are good for things like asynchronously managing state but can otherwise add a lot of overhead especially due to their lack of typesafety. It can also be easy to fall into the trap of using actors for everything which can lead to an overly complex system with very deep hierarchies.

I would highly recommend you read the book ""Functional and Reactive Domain Modeling"" by Debashish Gosh. In it, he walks through real-world use cases using Scala for modeling your domains which I believe is the sort of knowledge you're looking. For me, this book gave me the ""aha!"" moment that helped me understand how to take a functional and reactive approach to structuring applications.",1521058378.0
olafurpg,"> Are there any cool other libraries or concepts (in Scala) you recommend? 

Check out https://monix.io/",1521106912.0
stradling,"Definitely subjective, I would recommend against using spring with Scala given what I believe is your current company’s situation.  I mean it could make sense as a gateway to more things scala but am not sure if the switch to a new language and using spring would be a huge advantage.

https://blog.redelastic.com/work-stealing-what-makes-the-play-framework-fast-4b71fa7758d5 is a good article on the async side of things.  It is directed at play framework but the general concept applies period.  Whether that performance difference either cost or performance wise matters for your use case is a fair question to ask.

I tend to prefer light weight frameworks and so gravitate to the scala ecosystem because it seems to be more the norm in my experience.      

Also, I like immutability by default and find time can be spent on other things than tracking down deadlocks, too wide of critical sections, etc in code reviews. 

I agree Akka in most cases can be an implementation detail in some libraries to use besides in some cross machine processing or cqrs scenarios.  So unless you have a use case around that architecturally I would not focus too much on Akka.",1521080062.0
m-in,"Synchronicity wastes a thread. Ideally, nothing should be synchronous. And also, ideally, all resource accesses should be submitted as early as possible, in a scatter-gather fashion. Synchronous code doesn’t scale and is a poor fit to the asynchronous reality. ",1521083581.0
dxplq876,"> Are there any cool other libraries or concepts (in Scala) you recommend? I like trying new things or things that give a new perspective on old things.

https://github.com/lauris/awesome-scala is a cool repo of interesting Scala projects",1521069288.0
m50d,"> I tried building a microservice-like backend with actors and akka-http but I kept stepping on my own toes with the asynchronous nature of it all.

I'd recommend using ordinary functions and `Future`s (with `for`/`yield` composition) rather than actors. That way you get the performance benefits of async but the control flow is still simple and you still have type safety.

> I know I can use spring with scala but that cant be the solution, can it?

Take it slow, don't feel like you have to change libraries and paradigms at the same time that you're already changing languages. I think after a year or two of Scala you'll get to a point where Spring is holding you back more than it's helping (that's how it went for me anyway), but it's fine to use it if it works for you.

(Protip: use constructor injection, `class MyService @Autowired() (dependentService: OtherService){ ... }`. It's good practice anyway, and in Scala it actually looks much better than setter or field injection)

> Real world use cases for actors (just examples of when to actually use that pattern). The official tutorial doesnt even touch on where actors shine, statefullness, right?

Honestly, I've been doing Scala for 8 years and I've never seen a use case for actors that couldn't be done better without actors.

> Some libraries for synchronous relational database access and synchronous rest services. 

You can write synchronous services with akka-http and any JVM database access library (I tend to use Hibernate, personally, augmented with a slightly custom way of doing transaction management, but there are arguments for other options). You can even mix and match sync and async endpoints. 

> Also I'm making the bold but random claim that 90+% of all rest services ever need to be synchronous on the backend. Am I wrong? When shouldnt it be synchronous?

Any I/O going further than local disk or within-the-rack network will be less efficient if done synchronously. At the same time performance is often less important than people think, and realistically synchronous is good enough for a lot of use cases. That said, with something like akka-http, going async (with `Future`s) is so lightweight that I don't see any reason not to go async even if the performance isn't an immediate problem.

> Are there any cool other libraries or concepts (in Scala) you recommend?

Honestly the akka-http routing DSL is one of the coolest things IMO - it looks like a routing config file, but as soon as you click through in an IDE you see that all the directives are just plain code, and as soon as you need to reuse some common routing logic you realise it's all just plain old functions and you can use your normal automated refactoring tools.

Treelog is pretty cool. Combining the two by writing a custom directive or metamarshaller so that you get the logged version of an endpoint if you pass a particular header or some such is really cool, and starts to show the benefits of having these things be plain old code rather than magical frameworks. But personally I wouldn't try to jump straight to the ""wow"" stuff; if you can just write the same kind of code with the same libraries you would in Java but in a more lightweight, readable way, that's a much clearer win (and an easier sell) than trying to compare a whole different paradigm.",1521111031.0
cheriot,"What kind of problems are you solving? Data pipelines? Web/mobile API?

Starting with the technology and then looking for a problem makes simple things complex.
",1521092212.0
amazedballer,"> microservice-like backend with actors and akka-http but I kept stepping on my own toes with the asynchronous nature of it all.

It seems like Lagom would be more your use-case for microservices.  There's an interview that talks about [synchronous vs asynchronous REST](https://thenewstack.io/synchronous-rest-turns-microservices-back-monoliths/) and much of the theory behind Lagom is based on Pat Helland's [Data on the Inside vs Data on the Outside](https://blog.acolyer.org/2016/09/13/data-on-the-outside-versus-data-on-the-inside/), which is very relevant to microservices.  Lagom also goes in depth into CQRS vs CRUD style data repositories.

For the stuff you're doing, you don't really need to think about akka-actors specifically.  Akka-HTTP works more off streams anyway.  When you do need actors, they're useful, but it's all about what you can build up from them, i.e. Akka Persistence with Cluster Sharding, etc.",1521060317.0
moose_cahoots,"I'm not a huge fan of actors. One of their big benefits is the supervisor, which restarts actors if they crash. Well, microservices today typically run in some sort of environment (Kubernetes, ECS) that monitors container health and restarts them for you. So just let the service crash and your deploy environment restart it.

Another is the asynchronous calls. Again, not really important in microservices. Can it add performance? Certainly. Will you spend more time writing your code than just adding proper concurrency as needed? Almost certainly. Keep things simple. Just write your code, and if it would benefit significantly from a concurrency boost, do it. But chances are You Ain't Gonna Need It.

As for Akka Http, write a service in Go using any of the many available muxxers, then tell me that Akka Http is even close to a good idea.

",1521121020.0
Ray192,"https://www.manning.com/books/reactive-design-patterns

This is a good book by the Akka crew that discusses most of your points. Including:

1. Why Asynchronous is better in most cases.
2. Why your system should prioritize BASE over ACID in most cases.
3. Compares actors against various other tools.
4. Example usages of Reactive/Functional concepts.

And more.

Also you seem to be under the impression that something is synchronous if the REST response responds with the data it wants; it can also be asynchronous if it doesn't block other requests, even if it ""blocks"" itself from returning until something is done. 

Suppose you get a request for a piece of data, and you make 3 different requests to 3 different services to assemble the response and return it. Is that synchronous? In the sense that you get a synchronous response back instead of an async handle, yes. Do you make the 3 requests in order, one after the other, is that synchronous? Sure, but that's obviously waste of time. But if you parallelize all 3 requests that you make, is that still synchronous? If your server thread sets that work aside, while waiting for those requests to finish, and move on to handling the next request on the queue, is that still synchronous?

That's the point of async: don't block on things you don't need to block for. Which is true in 90% of the time: you don't need to block your main thread on task A if you can just move on to task B while other services and threads work on task A. It's not just about the response you're getting back, it's about whether or not your service is not doing other work while it's working on your request. 

And honestly, after you learn about how to use futures inside a for comprehension, everything becomes easier. Defining sequential operations is easy (just flatmap), defining async is easy, everything is easy and I basically never have to touch manual thread management. What's the problem? 

The book also talks about why other synchronous libraries ""feel"" better: they hide a lot of the complexity away from you. And it spends a chapter discussing why that's harmful in the long run by making your system not resilient towards failure. ",1521240953.0
denisftw,"I wouldn't recommend Akka or Slick, especially at the beginning. In my book - ""Modern Web Development with Scala"", I give an example of building a Web application using Play, MacWire and ScalikeJDBC among others. All of these technologies are definitely better than their Java counterparts. 

In a Play web app, you can use Akka actors for repetitive scheduled tasks.",1521528474.0
K_Zorori,"For a simple web api, you really don't need to even think about Actors. They have a different use case (distributed state, etc).

Web APIs are best created using a library that on an async type: std library Futures, Twitter Futures, Cats.IO, Monix, etc. 

If you're new to Scala, many will suggest Play Framework as a reasonable gateway (it is an opinionated framework like Spring). Personally I prefer lightweight configurable stacks such as Finch or Http4s.",1521210088.0
yaroslav_h,"Check here https://github.com/ornicar/lila https://lichess.org . It uses akka, but I can't remember purpose",1521064233.0
m50d,"I would always see akka actors as a last resort, since they mean giving up type safety. If you can solve your problem without them - and it sounds like you can - then it's better to avoid them. Generally you'd only use actors if you needed to also have shared state that was entangled with the async operations - that's where they tend to shine (though personally even then I'd look to other alternatives).",1521043811.0
erwan,"Actors are good when you need to manage concurrent access to a shared state.

If you don't have states, you don't need actors and can just use Futures.",1521051805.0
Ray192,"Well, I find the responses here rather unhelpful, so I'll play devil's advocate:

The main attributes of Actors are the following:

1. Message driven architecture (useful for a large system, in a small service it doesn't matter too much).
2. Built in supervision: ability to pause, resume, and control the life cycle of child actors. 
3. Location transparency: actors can be easily distributed across nodes. So if you want to scale your service horizontally, it's very easy. You can't distribute futures like that.
4. Mutable state allowed inside each actor. May be useful for various optimizations. 
5. Actors can stash away messages for future processing if it doesn't/can't handle it right now. 

So benefits for using actors may include:

1. If you want to distribute load across multiple nodes easily.
2. If you validate the data as you go, you can have one actor return the error as soon as it sees something and then you can tell the other actors to stop working.
3. If an actor goes down due to memory problems or whatever, you can easily restart it and not have it crap out.
4. If you want an actor to maintain local mutable state for something (time series data?)
5. If an actor detects a dependency is too overworked, it can stash the message and work on something else for a while. 

That being said, if you're actually doing data crunching, I recommend something like Spark which has built in support for distributed computation. I see actors as primarily useful for managing lots of services more easily.",1521247857.0
Milyardo,"This is borderline incoherent. You don't need a dozen paragraphs to explain ""Parenthesis are optional parameter lists with a single parameter; this is often used with block expressions"".

I'm not sure if you understand still even after reading your conclusion.

take this example:

    class Foo {
     def bar(f: Foo): Foo  = f
    }
    val foo: Foo = new Foo
    val baz: Foo = new Foo
    val qux: Foo = foo bar baz

How would you interpret the last line of this expression? In the scala language specification this form of method invocation is called Infix Notation.",1521139922.0
Falmarri,Are you saying that adding the doProcessing stage is what causes your execution time to go up? Or the objectScanner? What does `doProcessing` actually do? You could try doing it in a future with .mapAsync,1520982129.0
continuational,"That sounds really interesting. I'm really keen on getting transactions back in a distributed setting.

Beaker could be set apart from other transactional distributed kv stores by making it possible to store a strongly consistent log at each key, instead of just the latest value. That would be a good fit for the Event Sourcing pattern, which seems to be gaining interest.",1520970691.0
phazer99,How does this database compare to [TiKV](https://github.com/pingcap/tikv)? In particular what are the differences between the consensus algorithms (Paxos vs Raft)?,1520961535.0
joshlemer,"This was [posted here 1 month ago](https://www.reddit.com/r/scala/comments/7ses42/top_15_scala_libraries_for_data_science_in_2018/), in the form of a medium article. Someone else also reposted [Literal Types: A Case Study](https://www.reddit.com/r/scala/comments/83veda/literal_types_a_case_study/dvl49h6/?context=0) which got re-hosted on functional.works-hub.com as well. I don't know what's going on, if some people are rearranging their blog posts on one site but let's just post new articles to this sub (at least, ones that haven't been posted here in the last few months).",1520952447.0
m50d,Per https://github.com/akka/akka-http/issues/891 you can adapt one to the other (though you have to use a slight hack to treat a Java route as a Scala route).,1520935867.0
thesuperching,"Scala don't provide resource handling for monadic operation Try, and force me fall back to use try block(or has to find third-party libs ). I think that's one of reason that Scala is often said to be complex.(I have to learn 2 ways of error handling where one is promoted as idiomatic but however not as powerful as tranditional one)",1520901238.0
johnynek,Cats effect is also working on this space. See the Bracket typeclass being worked on: https://github.com/typelevel/cats-effect/pull/113,1520915067.0
argv_minus_one,"Hold it. Do **not** use `Try` or `NonFatal` here. Resources must *always* be closed, even on fatal exceptions.

The [better-files](https://github.com/pathikrit/better-files/) library has a correct try-with-resources implementation.",1520928850.0
m50d,"I don't see that this is something that needs to be part of the core language, which benefits from being small and moving as much as possible out into libraries. What would be good is for a ""platform"" effort (like the Scala Platform) to recommend a ""standard"" way of doing resource management (e.g. scala-arm) and ensure that all libraries that were part of the ""platform"" did resource management the same way.",1520943843.0
dbcfd,"Given that you're posting this as an example, can you make it more idiomatic? At a minimum, attempt to remove the usage of null and var.

Scala also provides a Try class that may be useful for what you're attempting.",1520980350.0
joshlemer,Removing this because it was posted here a few days ago  https://www.reddit.com/r/scala/comments/7x8q0y/literal_types_a_case_study/,1520877936.0
vytah,"I've been working on my programming language targeting Commodore 64 and other 6502 machines: https://github.com/KarolS/millfork I just released version 0.2, compared to 0.1 it is actually usable.

The most interesting new feature is support for NES, which from now on is going to be the second most important target platform.

There's also some partial support for 65816, which could mean that SNES could be supported in the future.",1521311139.0
AlexITC,"I was working releasing [playsonify 1.1.0](https://github.com/AlexITC/playsonify), you can now play with it, [release notes](https://github.com/AlexITC/playsonify/releases/tag/1.1.0).",1520915662.0
wejher,I am working on library for processing Time Series: https://github.com/carldata/timeseries,1521152132.0
thehenkan,"I'm trying to improve a neural net I trained to play Connect 4 against other AIs at [riddles.io](www.riddles.io). It's my first machine learning project, and while I notice some really obvious mistakes when I watch the bot play, it's been doing pretty well at moving up the leaderboard so far.",1520903342.0
ma-silva,"I’m currently working on a Scala validator that is based on a value classes mechanism, https://github.com/ma-silva/dingo. I’m open to comments or suggestions to help improve.",1520914694.0
mendrique2,"I'm working on a rest API that maps to a JSON document where nodes and arrays are mapped to dynamic endpoints. there will different UI editors like date pickers and rich text boxes for different types.

so at first one could use that to manage translation files for other software where customer can edit those in a user friendly manner, but it could be also used to organise arbitrary data, like workout progress, personal wine collections, etc.

in stage three there will be also lenses onto other data sources, like email boxes or databases. 

it's could be a behemoth of a software one day, but I do it mostly for fun. using play framework, slick and for frontend feather-ts, my own frontend framework in typescript. 

I don't have much yet, since I've been working a lot on the UI framework, but my silhouette setup with slick stands and one can register, login, and change passwords already.",1521408777.0
continuational,"I'm working on a front page for [react4s.org](http://www.react4s.org), since the current one is a bit dull. Overall, I'd like to emphasize these points (suggestions welcome):

* No boilerplate.
* Elm/Redux like emit-system.
* Simple lifecycle: just componentWillRender and componentWillUnmount.
* Lifecycle code can be made declarative through Attachables.
* CSS classes can be defined directly in Scala.
* Automatic shouldComponentUpdate(), ie. you don't need to memoize your functions to get performance.
* Little namespace pollution. E.*/A.*/S.* for elements, attributes and styles.
* Small code base, ~1k lines. No dependencies besides react.js.

Does you have an example of a good landing page format for a feature list like this?",1521713004.0
mart187,"Autoscout24 |  Senior Scala Engineer | Munich, Germany | ONSITE | Full Time
    
It's a great place to work. Good engineering culture and engineers, agile and devops mindset all over the place. Job posting see: https://grnh.se/6tl5x3hj1
    
For any questions DM me or reply.",1520920773.0
RedditWithBorders,"Leapfin | Senior Software Engineer | San Francisco, CA, US | Onsite or Remote | Full Time | $120k+

We are an enterprise b2b finance software startup based in SF SOMA.
Because we work with finance, we deal with lots and lots of data. We have found product/market fit and growing rapidly, and we are looking for a technical leader who can help us scale.

Job Posting: https://leapfin.com/careers

About: https://leapfin.com/about

Let me know if you have any questions.",1521065183.0
volpegabriel,"The company I'm currently working for is hiring Scala Engineers and Data Engineers. Particularly in my team, we are using `Http4s`, `Fs2` and `Cats Effect` among others, writing pure FP code. In other team guys are using `Eff`, `Cats Effect` and `Akka` as well. And in general we follow a `tagless final` design.

Last but not least, the company is located in Tokyo, Japan, so you must be able to relocate. The company offers a relocation package.

Take a look at the engineering site: https://engineering.paidy.com/ and please contact me if you think you could be a good fit :)",1521079671.0
sergigp,"Letgo | Software Engineer | Barcelona (Spain) | Onsite | Full time

Job description: https://gist.github.com/sergigp/e3da12968b6c28ece2aaa6438f49c3a3

contact: sergi@letgo.com",1520862805.0
Amendmen7,"Instrumental | Software Engineer | San Francisco Bay Area (Los Altos), CA, USA | ONSITE | Full Time

Instrumental makes intelligent, data-driven tools to help companies identify issues on their assembly lines so they can ship higher quality products faster. We are working to improve the manufacturing of millions of things each day. 

We're growing our Software Engineering team to increase development of our core application so we can provide the most value possible for our users. While we do not ask for familiarity with the following, our stack includes a main Scala application, AWS hosting, a Python machine learning cluster, and TypeScript on our front-end. Instrumental Engineering values good tools, robust tests, and frequent deploys.

We're a small but mighty team that consistently works collaboratively, are supportive of each other, and are all highly energized by the opportunity for such a large impact. We actively work to promote an inclusive environment. 

contact information
jordan@instrumental.com",1521007585.0
alex_signifytech,"Signify Technology | Scala Developers | Across the World | Onsite | Freelance/Contract or Permanent/Full-time 

We are a Scala specialist where we do a lot within the community. We are working on a number of roles around the world for both contract and permanent. Have a look on our website at our roles - www.signifytechnology.com/job-search and if there isn't something for you on there, still get in touch as we might have something else. 

You can contact me on alexandra.staniland@signifytechnology.com or +44 (0) 203 865 0621

All the best! :) ",1523019972.0
raghar,"I would say it is perfectly safe to pattern match List in Scala. Things like:

    list match {
      case head :: tail => ...
      case Nil => ...
    }

are quite normal. I see an issue with mixing interfaces and cherry-picking cases, and then being surprised that match is exhaustive only because quite a lot of things land into `case _ =>`.

With given `Seq` example I would probably do something like:

    seq.toList match {
      case a :: b :: Nil => a + b
      case a :: tail => 0 // 0 doesn't make much sense to me...
      case Nil => -1
    }
    // ... but I handle all cases explicitly and let the compiler inform me if this is not exhaustive",1520860370.0
mechkg,"You have a more general type Seq and a more concrete type List that extends Seq. Since any given Seq could be a List (but not necessarily), this match clause is doing exactly what it's supposed to do, i.e. testing whether your Seq is a List, and since it isn't, it's dropping to the catch-all clause.

Try to avoid catch-all clauses if possible because they tend to hide subtle bugs and don't mix Lists and Seqs in your match block:

    def specialSum(numbers: Seq[Int]): Int = {
      numbers match {
        case Seq() => -1
        case Seq(a, b) => a + b
        case Seq(_*) => 0
      }
    }
 ",1520865182.0
l26liu,Isn’t this intended behaviour?  ,1520858611.0
azzie_elbab,"Seen a lot of feet shot in this exact way. Btw, you wont even get compiler warning, no matter what options you enable",1520890111.0
Daxten,thank you for all the time you put into this,1520850635.0
JoanG38,"Thanks, I already upgraded",1520870076.0
emilypii,"This is *not* a good way to write modular code. It's a gateway to writing very lazy, poor code, and every single one of those examples could potentially throw exceptions at runtime because the author was too lazy to handle the domain in a total way. That's not ""great"" by any means.",1520833539.0
kraigmckernan,"I'm still not aware of any uses for partial functions that couldn't be solved just as easily as with a `A => Option[B]`. 

Does anyone have any applications for it besides for interacting with standard library methods?",1520809106.0
_gDanix_," This seems to me pretty much like the R lang way-of-life (automaticly & silently recover from deep errors), which led me to endless debug sessions. One of the mainly benefits of Option/Try vs null (or things like this) is that Option/Try enforces you to define a way of fix things in runtime.",1520857114.0
vjroby,I used partial functions in Future.recover() or recoverWith(),1520816817.0
,"CT and FP can help us construct programs that are correct (as is often suggested), but the true killer app is that they help our programs *stay* correct as they evolve.

CT gives us a very precise way to talk about *composition* and what it means, which is very important because this is how we manage complexity. FP gives us *equational reasoning* which lets us apply these compositional rules (and other lawful substitutions) freely, giving us the ability to refactor our programs confidently. Taken together, the practical super-power we gain is *maintainability*.

",1520805360.0
drole_,"> if the answer is it gives you ""equational reasoning and allow you to write less buggy code"" then I feel that is not strong enough a case to justify the investment in learning these abstractions.

I am a little curious about this one. What would in your mind be a strong enough case then?

Let me preface this by saying that I think it is far more important that you write pure code that is referentially transparent than it is that you use fancy abstractions from category theory. The fancy abstractions are simple solutions to problems that tend to crop up once you do choose to walk the path of purity.

As for the ""killer app"". I dont think you can point to any specific problem and say ""that is where it is needed"". It is much more the case that as your system becomes bigger you need to structure it to keep the system manageable. Category theory provides a set of tools for structuring large systems that are much more concise, clear and quantifiable than anything OOP has ever produced. The GOF design patterns are fine, but they are also incredibly vague. Category theory is not the only tool to provide structure to large code bases, but it is sane one that makes sense and has a solid logical foundation much like sql is a solid foundation for database queries.",1520805085.0
GuyWithLag,"> if the answer is it gives you ""equational reasoning and allow you to write less buggy code"" then I feel that is not strong enough a case to justify the investment in learning these abstractions.

I would recommend reading Paul Graham's [Beating the averages](http://www.paulgraham.com/avg.html), specifically about The Blub Paradox.
",1520806138.0
Baccata64,"Here's an simple example where I greatly benefited from these abstractions in a real world use case. My team had to set up a performance test program that runs daily in CI in a small timeframe. It required to implement a sequence of steps that, taken individually, are relatively easy to implement, but the sum of them was a pain, because each step had to deal with a different library / piece of infrastructure that none of us was too familiar with, and parallelising the work was gonna be hard if we worked using the classic OO approach.  

We adopted the ""finally-tagless"" approach to describe interfaces (or algebra if you prefer, though algebra usually come with invariants that are hard to come up with), and composed those interfaces together in a program. Each interface referenced NO CONCRETE-TYPE whatsoever. This let the implementor make the decision of what data is needed / what data is produced. And the return types of each method was wrapped into a higher-kinded type `F[_]`, representing the ""effect"" the computation was going to run in. This let you defer answering questions like ""are we synchronous/asynchronous"" . 

An algebra for us looks like : 

    import cats.{ Functor, ~> }

    abstract class ArtifactRepository[F[_], ArtifactInfo, JarFile] { self =>

      def fetchArtifact(artifactReference: ArtifactInfo): F[JarFile]

      def mapK[G[_]](fk: F ~> G): ArtifactRepository[G, ArtifactInfo, JarFile] =
        (artifactReference: ArtifactInfo) => fk(self.fetchArtifact(artifactReference))

      def map[B](
        f: JarFile => B
      )(implicit F: Functor[F]): ArtifactRepository[F, ArtifactInfo, B] =
        (artifactReference: ArtifactInfo) => F.map(self.fetchArtifact(artifactReference))(f)

     def contramap[B](f: B => ArtifactInfo): ArtifactRepository[F, B, JarFile] =
       (artifactReference: B) => self.fetchArtifact(f(artifactReference))

    }

This algebra for instance represent the ability to fetch a jar from a maven repository. Because none of the types are set, we can provide transformation methods that takes functions as parameters to help moving from one type to another. When you compose the algebras together, the types they operate on have to align. 

Then, when you have a bunch of those algebras, you can compose them in an abstract, sequential program by passing the algebras as parameters, aligning the types so that the result of one call can be passed to the next one, and stating that the abstract F[_] has an associated monad instance from scalaz or cats, which lets you describe the sequence in a for-comprehension. This makes the flow extremely readable and does not let the function cater to superfluous concerns. 

Then we divided the work between ourselves, each of us picked an algebra and provided an interpreter for it (read : choosing concrete types and implementing the interface), and since all the types were abstract we could work in isolation and not have to worry about the concrete types our coworkers needed. Then when we had all the implementation / unit-tests that go with it, we only had to bootstrap our application (write the main), leveraging the different transformation methods to align the types. 

Not only did it allow us to parallelise very efficiently, we also were able to switch from one interpreter to another one for one of the algebras, and no refactoring whatsoever was required. 

So what did this approach required from us : 
* knowing what a functor is (category theory) 
* knowing what a monad is  (category theory) 
* knowing what a natural transformation is (category theory) 
* refrain ourselves from defining case classes as soon as we start solving the problem 
* a little knowledge of the ecosystem to decide what is the best library to implement an interpreter to an algebra 

What was the gain : 
* efficient parallelisation of tasks 
* ease of pivoting when you have to reverse a decision and switch a component/library for another 
* code that doesn't feel dirty because concerns aren't mixed 
* feeling great with ourselves for applying an approach that doesn't leave you feel like you've delivered a bowl of spaghetti 
",1520844925.0
nateforpresident,"I can only speak from personal experience as I have not really read deeply into the philosophical arguments for FP, but as I see it, functional programming really shines by allowing a developer to forget about edge cases and state. Whenever I have had access to mutable objects, I tend to keep the same object around for an entire pipeline of processing. From construction through use of that object, whenever it changed I would use the requisite getters/setters. This is typically not a problem, but to cover your ass you have to write a lot of explicit edge case handlers (e.g. what happens if my data is corrupt, what happens if I am waiting on a locked resource, etc.). Monads abstract away a lot of that edge case complexity, which allows you to write more straightforward code. The most useful case I can think of for this is of the form:

    val transformedListOfObjects = listOfObjects.flatMap((f: ImmutableObject) => 
        try {
            Some(arbitraryFunction(f))
        } catch {
            case e: com.some.exception.SomeArbitraryException => None
        }
    )

You will notice there is no explicit filtering that happens here for the error cases, and the resulting list will only contain objects that can be transformed without error. You will also notice that if later on I wanted to access the same set of untransformed objects, because they are immutable I don't have to worry about what state they are in (e.g. I don't have to think about if they have been half transformed or something crazy). 

I would say that in the end, the difference really comes down to what you are comfortable thinking about. For functional programming, it seems like there is less explicit edge handling you have to write with the trade off of being moderately messy with your memory (because you create many more objects, but in reality modern compilers can actually handle things pretty efficiently). For imperative OOP, you have all the stubs of every possible case which is very explicit, but often times can get quite verbose.",1520800030.0
brophd,"I think the answer lies in the direction of ""less buggy code"" but goes much deeper than that. To me FP and its close relation to CT is a good step in the direction of making software engineering more mature. One could perhaps say the same about OOP related concepts but the problem I have with those is that they in no way increase our ability to reason formally about the correctness of our software. FP on the other hand makes it a lot easier to formally prove that a program is correct. We're not there yet, I.e. we can't yet prove at scale that the software we produce is formally correct. As I see it this is related in part due to lack of tooling and in part due to the minimal place formal prove gets in education. In any case, as software is defining society and culture pretty heavily, I see a need for producing more correct software (and to bring morality into the equation but that is a whole differ argument).",1520802747.0
DevIceMan,"> what edge do these abstractions give over traditional imperative OOP approach to modeling a problem?

It's very difficult to give a good answer to this question without first knowing your audience.  My answer to someone who knows some Scala might be very different from Someone whose stuck in Java and has barely even touched lambdas.

OOP and FP are tools; or perhaps more precisely they're collections of tools, each of which has advantages or disadvantages for solving different kinds of problems. 
 Each set of tools can of course be used properly or improperly.  Although if comparing Scala vs Java, you'll find Scala has removed a lot of the safety cages which means people are free to write much better or worse code.

Narrowing in closer on FP vs OOP, I might ask why someone wouldn't want to have FP tools available.  It's an unnessecary handicap.  Even if your software is almost entirely OOP, there are many advantages to being able to introduce FP as you either add new features, or improve existing ones.

If you've seen what happens with Java programmers get way too much free time on their hands, and perhaps understand OOP abstractions perhaps a little too well, you'll find they come up with some very complex patterns ... when the equivalent job can be done much simpler and easier using FP.

> What special edge do these abstractions give that would be hard to get by in other paradigms?

Try doing even the slightest bit of FP style code in Java-7 or earlier.  My last employer had about 75% of their apps in Java-6, so despite knowing Java-8 features quite well, I couldn't use them most of the time.

Java 8 barely scratches the surface of what FP has to offer, but even just lambdas and Streams are enough to make Java significantly less painful to work with.",1520823102.0
vagif,">""equational reasoning and allow you to write less buggy code""

I do not think you understand the impact pure FP has on your programming techniques. Most imperative programmers think that the strong types result in less bugs and that's why it does not look like I big deal to you.

But the true reason FP results in less bugs is because it greatly simplifies your code. You have to deal with less things therefore you make less mistakes.

Take for example map fusion in haskell.

    groupBy thisCriteria . sorBy thisFunction . map doSomething . filter removeSomething

Look at this chain of transforming input data into some result you need. The task is split into smaller simpler steps and the data flows from one step into another. An imperative programmer would never write it like this because he would be afraid that iterating the same list 4 times (!!!) would be too slow. Imperative programmer would try to rewrite it to loop once (for performance reasons),  greatly complicating the code and in the process introducing a lot of subtle bugs. It will take him much more time to write it than for a haskell programmer to write that one line. And it will most likely contain bugs that are absent in the haskell version.

But how can a haskell programmer ignore performance implications and loop 4 times? Well, because pure functions can be optimized by the compiler much more aggressively than any optimizations imperative compilers could possibly utilize. In this case haskell has something called map fusion, where it would rewrite these 4 loops to be one loop, doing a lot for complicated work for you for free. Offloading a lot of mundane and complex work to compiler is the true power FP and category theory abstractions provide.
",1520924115.0
,"Having recently completed most of the Underscore book on Cats 1.0, I thought of asking a similar question - what are the killer features of Cats? I could only find minor conveniences over standard Scala. The answers you received to your question, is exactly what I expected. Because it stands to reason that the pursuit of mathematical purity in software engineering is difficult to explain to developers in concrete terms. And while developers are increasingly happy to use hybrid OO-FP languages, they are not yet rushing to use languages or libraries rooted in the purity of category theory.",1520948078.0
nrlb,"Could try ScalaFX

http://www.scalafx.org/",1520816819.0
mechkg,scala.js with HTML GUI could be a reasonable option,1520868276.0
raghar,"I wonder if someone is tracing the list of all monad tutorials. How many of them are out there, how many reuse these pictures, how many use tacos, tortilla or shopping bags as metaphors?

So many questions, so little answers...",1520730497.0
romanemperorme,"That’s it? Monads are nothing but things with map, flat map. I thought they were more complicated than that. 

Don’t we have Monads in Java as well then? ",1520745500.0
romanemperorme,"Interesting article I found about java monads.
https://dzone.com/articles/whats-wrong-java-8-part-iv",1520753114.0
romanemperorme,"Oh yeah. They don’t have them in List and other collections like in Scala. I wonder why they didn’t add map and flat map to List and other collections like in Scala? 
Why do they have to add monadic  feature only to  to Streams ? Backward compatibility? ",1520749110.0
SQLNerd,Really interesting conversation. Love the way that discussion went and completely agree with its conclusion.,1520692757.0
Supernumiphone,"I have yet to see the front page for a programming language, library, framework, etc. that actually tells me anything meaningful about it.  It seems to always be marketing-speak that conveys little useful information.  Every time I have to go elsewhere...read answers on stackoverflow, an article on wikipedia, discussions on forums, etc.  But the project's actual page is useless for decision making.  Only good for downloads and documentation once I've already decided to use it.",1520699797.0
sudkcoce,Kudos to Mr. Li Haoyi!,1520710574.0
jokikinen,"That’s a lot of bikeshedding. A lot of effort for a very small changes which are ultimately based on assumptions I do not think are that obvious.

Jargon is not good, but it’s a stronger part of Scala’s culture than many other languages’ and changing the copy here and there won’t change that. If you want to push that perception, you need a more integrated message which spans the official resources. Doing it piece by piece is going to make the whole disconnected. 

If you want to get something like this right you’d need marketing—finding which groups to target and with what you can do it with. It’d be very exciting to see contributions from marketers actually, that sort of cross-functionality would be great to see. Maybe some Uni could take it up as a project? Branding & marketing a language. That information could be used to steer Scala’s development as well. It’s an exciting prospect in my opinion. 

What I do love about this PR is how open and willing people were to look for a new solution. Many seemed to have motivations which revolved around making the landing page more approachable which is compassionate and commendable. Those sort of things are sometimes hard to come by—great to se that Scala has them in such force. 

And I think the resulting change does do a better job at describing what good things come out of Scala’s features—so it’s not a bad change by no means in my opinion. ",1520753126.0
jgghn,"They really made a mistake losing the OO meets FP line. *That* is the main selling point of Scala, IMO.",1520724040.0
grizzly_teddy,Wow LI Haoyi really stuck to his gums and got Martin to go along! ,1520990815.0
simon_o,"Interesting how different people describe Scala so differently!

2015:

> Scala is a statically typed programming language
> that lets you enjoy the best of both worlds.

> Develop fast, expressive applications and libraries
> with broad editor support\* and great tooling\*.

> Run them on the JVM\*, in the browser\*, on Android\*
> – and soon – compiled to native code\*.

2018:

> Scala is a concise high-level programming language.

> Scala's compiler helps you avoid bugs when writing
> complex applications, its fast runtime lets you build
> efficient, high-performance systems, with easy
> access to a huge ecosystem of libraries.

Second time's the charm!",1520687695.0
vtscala,It was an enormous strategic blunder for the Typesafe/Lightbend/Scala-Center folks to never officially support Scala on Android.  ,1520702866.0
erwan,"It's possible to use Scala for Android, but there are many issues.

One is the size of the bundle makes proguard mandatory.

The other is that the Android API is very far from what you would want in Scala. So you either write pseudo-Java in Scala (which is painful) or you use one of the lib/frameworks written to make Android development more scalaish. Problem is they're often incomplete and poorly documented.",1520677997.0
NinjaPirate9797,"I wrote a scala on android app not too long ago.

It’s a pain to get set up, there’s some things that have changed that aren’t reflected in the docs.

Once it’s up though, it’s pretty fantastic. I remember my incentive for trying it was that the example app that takes a video was 1kloc of Java, and I was able to do it with well under half that in scala. 

Language features like futures and promises saved me from callback hell, and made the overall experience of programming for Android much more pleasant ",1520714743.0
joaofsoares,"I think it is better you try Kotlin for Android.
And use Scala on back end if possible.",1520680792.0
fxdz,"I think you should try. I Recently started to build an android app myself using https://github.com/scala-android/sbt-android and https://github.com/47deg/macroid, and it looks promising so far.",1520704633.0
sciss_,"I don't work with Android, but you could try to source more answers at https://gitter.im/scala-android/sbt-android",1520680661.0
simon_o,"The author of Scala on Android has really done some amazing work.

Considering how he (and the project) have been treated, I wouldn't be surprised if he isn't too motivated going forward though (not taking some happy life events into account, that probably take a lot of his time currently :-D).

The updates I made to make sbt-android run on a recent version of SBT 0.13 have been sitting in the PR queue for quite some time already.

Best to ask in the Gitter channel.",1520687194.0
kininja08,"I would consider Kotlin once again ( even though you seem against it). Scala on Android is a lost cause. Also, there is a lot of similarity between Kotlin and Scala ( immutability, pattern matching, higher order functions, data/case classes). If you really want to use Scala, then, just like someone said on this thread, use it on the server side. Scala is a more powerful language thank Kotlin but you can still do FP in Kotlin. Also, depending on your use cases ( learning Scala vs generating legitimate apps/products for revenue ), I would go with Kotlin for both Android and Sever (this is what I'm doing now), but if you want to learn /invest in Functional Programming then do Scala on the server side.",1520739853.0
Milyardo,"Yeah if support matters to you, your're not going to get any besides from anywhere besides the community. However since you want to to do this to expand your knowledge of scala why not just join in on the community effort to support the platform and dive on with [scala-android](https://github.com/scala-android)?",1520873799.0
ebruchez,"Being at position 14 sounds pretty incredible to me. The competition consists of top mainstream languages which have been historically strong or newer languages pushed by very large corporations with infinite amounts of money (Swift, TypeScript, Go).",1520549794.0
,"I view all language rankings as pure entertainment, yielding critical as well as entertaining discussions. And that's a good thing, because such discussions have the potential to foment change for the good.

I've been doing Scala work for the past 5 years. I love working with Scala. And I've found no other. Yet, I'm also well aware of its profound shortcomings. I'm not blind.

I feel choice of language is a passion of the heart, pure and simple. And without passion, who are we? Worry not about rankings. Obsess about all else.

",1520631359.0
johnynek,"I think it is easy to overestimate the signal here. Scala has probably been inflated due to hype around Spark, Kafka and Flink. I think some of that hype is dying down as, for instance Tensorflow starts to eat into the hype space that Spark is also occupying.

A second issue is, as others have noted, Kotlin is kind of a scala lite, so users who want a cleaner java may be pulled off a bit.

After that, there is real, and I believe growing interest in FP, and scala is still the best FP option on the JVM.",1520660612.0
sanketpatil,"I am recent scala/spark developer and these are the reasons stopping me to go all in scala:  
1. Tool support. scala ide/ eclipse/ intellij? sbt /maven???  
2. Less simple applications built around scala that people talk about here or on github and more about libraries. Its just overwhelming at once.

",1520601519.0
simon_o,Here is the subthread on r/programming about it: https://www.reddit.com/r/programming/comments/82wpiw/the_redmonk_programming_language_rankings_january/dvdiguw/,1520545031.0
HighMaxFX,"Scala and Common Lisp are the best languages in the world. 

I don't care if peasants don't use them.",1520598868.0
cantbelieveitsbacon,Java master race.,1520571375.0
Ghonesis,I'm familiar with the Scala team but I don't know who the 'virtually present' people are. Are they all from companies using Scala? (I see one of them is representing Twitter),1520586732.0
simon_o,"The thing about package objects seems to be a bit confused.

Yes, some languages like Kotlin get away with top-level functions, but Scala has implicits and stuff that drastically changes the equation.

In Kotlin you can just jump to the definition, because all calls need to be explicit. With the same change in Scala, you would need to go hunting through every file to figure out what is in scope.

That's one of the benefits of package objects: You can read one file and be sure that's it.

If anyone wonders how this proposal would work out in practice, look no further than Scala's global namespace: 

The namespace consists of close to 400 things coming from three different places. Also, the contents of the global namespace change, depending on the Java version.",1520588393.0
mgrandi,What version of java are you using? What operating system?,1520537442.0
ScalaWilliam,Great question.,1520533154.0
Falmarri,We were having the exact same issue on our Jenkins server. We upgraded the JVM version and it seems to have fixed it...,1520534627.0
MasGui,"[sbt launcher](https://github.com/sbt/sbt-launcher-package/blob/v0.13.16/src/universal/bin/sbt#L96-L110)

    JAVA_OPTS          environment variable, if unset uses ""$java_opts""
    .jvmopts           if this file exists in the current directory, its contents are appended to JAVA_OPTS
    SBT_OPTS           environment variable, if unset uses ""$default_sbt_opts""
    .sbtopts           if this file exists in the current directory, its contents are prepended to the runner args
    /etc/sbt/sbtopts   if this file exists, it is prepended to the runner args

In the case of duplicated or conflicting options, the order above shows precedence: JAVA_OPTS lowest, command line options highest.

[sbt-revolver:](https://github.com/spray/sbt-revolver)

    javaOptions in reStart += ""-Xmx2G""

[sbt forking](https://www.scala-sbt.org/0.13/docs/Forking.html)

    fork in run := true
    javaOptions in run += ""-Xmx2G""

If you have forking + sbt launcher set to 2GB it will be the sum of those two (4GB).",1520547661.0
naftoligug,"Anything you can put it JAVA_OPTS or .jvmopts you can prefix with -J and put in SBT_OPTS or .sbtopts, or on the SBT command line.",1520818344.0
Philluminati,sbt -men 512M run,1520890604.0
tsec-jmc,"This sounds pretty cool in that it allows for people coming from those other languages that rely on those constructs to use scala like they did in their source lang.

That said, I personally write scala to _not_ every have to write DSLs like this, so it's a two sided coin the way I see it.",1520535585.0
m50d,"Using `Any` is bad practice. What if your `Option`s compared some types which couldn't be compared? The usual approach would be to define an implicit ordering that uses an implicit ordering for the specific type you want to compare:

    implicit def optionOrdering[A](implicit ordering: Ordering[A]): Ordering[Option[A]] = ... 
        //use the Ordering[A] here to compare the contents when they're both Some",1520516937.0
mmmdaaa,"You can do something like
    
    import play.api.libs.json._
    import play.api.libs.functional.syntax._
    object PersonalInfo {
      implicit val reader: Reads[PersonalInfo] = (
        (JsPath \ ""email"").read[String](Reads.email) and
          (JsPath \ ""password"").read[String].map(_.trim) and
          (JsPath \ ""firstName"").read[String].map(_.trim) and
          (JsPath \ ""lastName"").read[String].map(_.trim)
      )(PersonalInfo.apply _)
    }",1520482944.0
birdwastheword,"If you don't need to do anything special a macro can do all of the heavy lifting for you

`import play.api.libs.json._`

`implicit val residentReads = Json.reads[PersonalInfo]`
https://www.playframework.com/documentation/2.6.x/ScalaJsonAutomated
",1520530832.0
,"We have had good luck with Flyway. It's very simple and reliable.

Just as a side note: I *highly* recommend you use the same database for testing and production. Vendor differences are immediate, significant, and often quite subtle. ",1520443723.0
AlexITC,"I can talk about Play Evolutions and Flyway:

- Play Evolutions, it has worked good enough to me, the auto commit thing is probably related to databases without transactional DDL (I'm looking at you MySQL), I would use them if I work with Play Framework because they are already integrated.
- Flyway, it has worked good enough to me, I would use them without Play Framework, you just need to write the code for performing the migration when the application starts, I had a bad experience with the SBT plugin.
  
  
Last, using pure SQL has the advantage to let you write anything specific to PostgreSQL, like check constraints that I use a lot, on the H2 for testing, I recommend you to use a real database instead, you can get it using the docker-it-scala plugin ([example](https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/test/com/alexitc/coinalerts/commons/PostgresDataHandlerSpec.scala)).",1520443091.0
Demius9,I've used flyway pretty heavily and highly suggest it. Currently working on a way to migrate the database prior to integration tests using the flyway system. ,1520455829.0
know_not_much,"I use flyway and I find it a huge pain in the butt. The problem of flyway is that the files need to follow a special numbering convention. If the team is distributed, sometime people chose the same name in different branches. which leads to all sorts of problems with the branches are merged.

This problem is made worse because once a migration has been applied its very hard to roll it back (specially when the applied migration is in between two migrations).

",1520459003.0
parc,"I’ve used both systems in real life production. The integration for both is simple.

The con of flyway is that rollback support is nearly nonexistent. The author specifically thinks you shouldn’t need them. Frankly, after a little bit of thought and integration test setup, I tend to agree. I’ve never actually seen a successful automated rollback in production.

The con of the ANorm migrations in Play is that they don’t support parallel execution. You have to have a specific deployment step to migrate. It ends up being operationally a significant lift to make it work reliably. 

In the end, were I starting a new project, I’d use Play with migrations turned off, Slick for database access, and Flyway for migrations. For testing use either opentable’s embedded Postgres or whatever will embed for your dbms of choice. That pr bed to be a winning solution last I used it, although the spin up time for integration testing was _brutal_. Proper service database decoupling is crucial for sanity. ",1520474050.0
sdelmore,"I’ve used Flyway, it’s alright depending on how critical your uptime is, but I have always preferred frameworks that allow you to write rollback scripts (no automated rollback scripts, that would be destructive).  When uptime is critical I always tick/tock my service/db upgrades, so each only has to be compatible with a rolling 2 versions.

My favorite was one I wrote myself but it was for $JOB so I can’t share it, but the general pattern that has always worked well for me is:

Deploy db v1
Deploy app v1
Deploy db v2 (w/ support for app v2 features, compat with app v1)
Deploy app v2
Deploy db v3 (cleanup unused features for app v1 support, add support for app v3)
Deploy app v3

Db, app, db, app, db, app.  Works a treat.  Sooner or later, you will think everything is good, you’ll pass all tests, deploy, head home, then find out a day later something has regressed, and then you will be greatful that you can just rollback whatever you deployed that caused the issue.

And remember, db rollback scripts have to be data preserving, which basically means if you added a new column in your v2-v3 upgrade script (which is optional so old and new app can work with it) then you need to store the data in a separate table when you rollback, then when you roll forward again you need to make sure your upgrade script checks for data in the rollback table and adds it back to the newly added column.  A good (but older book now) on refactoring/migrating db schema in non-destructive ways is Scott Ambler’s Refactoring Databases.",1520487476.0
naftoligug,"Flyway with flyway-play: the power of flyway with the same experience as play evolutions.

By the way, postgres is one of the few databases that can run ddl in a transaction, which means if you have an error halfway through a migration you don't end up in an in-between state. If you're using it in production that's another reason it's worth using in development. I'd recommend learning how to run it in docker so you can easily have as many throwaway instances as you need. It's still slightly less convenient than H2 but not by all that much.
",1520818979.0
Ukonu,"I **love** the changes to the enum syntax. Puts things back on my favorite side of the expression problem.
It reminds me of the Rust syntax which I'm similarly a fan of: https://rustbyexample.com/custom_types/enum.html#enums
Except they have top level functions so don't have to put things in companion objects. Of course, companion objects are a nice way of namespacing things. So I could go either way on that.",1520460844.0
Odersky,"Regarding Java interop, I would _love_ if someone made a detailed proposal how to do it, and, even better, contributed to the implementation. So far I did everything alone, but for this I need help from others. Please do help achieve this!
",1520540642.0
simon_o,"Looks like the design keeps getting closer to the discarded enum SIP drafts from January/November 2013.
(Except for the lack of Java interop.)",1520457527.0
sciss_,"I also like the new enum syntax, I'm just worried about performance implications if you cannot define members in the sub-types, e.g. for Option which is arguably one of the most pervasive types in Scala, having to go through a pattern match for each and every method - isn't that incurring a performance hit compared to an abstract interface and implementations on the sub-types, for which I guess the JVM is highly optimised?",1520511829.0
duhace,i hope the lsp hooks that dotty has are being backported to scala 2.13. I'm sick of Intellij's buggy typechecking and ensime doesn't seem to be doing well at the moment...,1520464649.0
vtscala,Serious question: does anyone actually use Lagom?,1520529008.0
Baccata64,"I would highly recommend passing it as a parameter to retain type safety and avoid the situation where you found yourself without context because something failed to initialise/propagate it properly (especially when you evolve in a multi-threaded environment which is gonna be your case) 

If you want to disregard this and are comfortable spending more time debugging, then `MDC` for `Mapped Diagnostic Context` can be a solution. A couple links : 

* http://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework/
* https://github.com/lightbend/scala-logging

Note that even Play has some notes in the documentation warning about the fact that MDC is hard to work with : 
*https://www.playframework.com/documentation/2.6.x/ScalaLogging#Using-Markers-and-Marker-Contexts

",1520411142.0
AlexITC,"That's basically a request-scoped object, I have created a plugin that appends a request-id to each log using this approach, it is not quite simple and you need to be aware that the whole dependency graph is created for each request (not for performance-critical applications), as Baccata64 said, I would recommend to just pass the object manually or implicitly from your controllers.  
  
You could see my plugin source code to check how to create request-scoped objects: [play-request-tracer](https://github.com/AlexITC/play-request-tracer).",1520449271.0
amazedballer,"You would add your logging context to the request using `WrappedRequest`, and pass that through in a custom action.  This is essentially the same approach that `MessagesRequest` uses:

https://github.com/playframework/playframework/blob/master/framework/src/play/src/main/scala/play/api/mvc/MessagesRequest.scala",1520830134.0
niels_learns_python,"You probably want pathSingleSlash. Check this out:

https://doc.akka.io/docs/akka-http/current/routing-dsl/directives/path-directives/pathSingleSlash.html",1520402158.0
againstmethod,"Try path("""") instead.

That being said, I found running nginx in front of such services and doing reverse proxies much easier. It can do all the basic HTTP stuff for you in a much simpler manner and your akka code can focus on the real routes.

https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/

",1520390108.0
io_geekabyte,"Softwarewill has a blog post where they compared some of the notable relational database access libraries in the Scala ecosystem...

Find the blog here: https://softwaremill.com/comparing-scala-relational-database-access-libraries/

Maybe you want to look that up? Perhaps you find something that can help you with your task in there.",1520347107.0
outzider,"After getting really ticked off at Slick, I've really been enjoying Quill. I don't know how well it'll scale to a larger project.",1520347428.0
flylikeabanana,Have you seen [doobie](https://github.com/tpolecat/doobie)? It's purely functional and at the end of the day you just end up writing SQL.,1520347157.0
labyj,"There is also Relate, which is what we at Lucid use. We also wrote it, but it's pretty nice to use: http://lucidsoftware.github.io/relate/",1520357136.0
i_hate_pigeons,"I've used scalikejdbc and was alright, but never hear it being mentioned so not sure how widely used it is (I just needed basic queries/procs I haven't used any of the orm features)",1520347759.0
gbersac,Anorm is a great library : https://github.com/playframework/anorm . I don't know of any ORM in scala and I am glad not tu use one !,1520353543.0
babaganoosh43,http://getquill.io/ is fantastic,1520358840.0
macroexpanse,Have you checked out JOOQ? https://www.jooq.org/doc/2.6/manual/getting-started/jooq-and-scala/,1520346742.0
,"Quite honestly, there’s a lot more Java support than Scala support for relational DBs. I would go with JDBC or anything else with a long and rock solid history over anything fancy/new. Your database is the heart of your application. Getting fancy there isn’t worth it. ",1520350377.0
naftoligug,Slick is not an orm. It maps SQL concepts directly to scala concepts. So it has no more concept of many-to-many than SQL does.,1520367599.0
haakon,"Been using ScalikeJDBC for an good while, and it's really nice to work with.",1520377175.0
Philluminati,"We generate our models from the sql itself:

http://slick.lightbend.com/doc/2.1.0/code-generation.html

This is worth you looking into as it solves the problem I think you are describing",1520366942.0
deathbychuck,Doogie has been working mostly well for me. ,1520375366.0
,If you look at the sidebar there is a section with links to database libraries. It will come down to the features you want and the kind of code enjoy writing. There are a lot of good options in Scala.,1520353853.0
stusmall,I did a couple Scala + play 2.4 + postgres apps a few years back and had no issues.  I did one with slick and one using standard SQL.  At the time my biggest complaint was how slow slick builds were.  I don't remember what I was using librarywise for the SQL app but it wasn't anything strange.,1520346909.0
pellets,https://github.com/rocketfuel/sdbc,1520348690.0
lukaseder,https://manuel.bernhardt.io/2014/02/04/a-quick-tour-of-relational-database-access-with-scala/,1520433057.0
Storini,"Why not break away from the past: https://neo4j.com/developer/graph-db-vs-rdbms/ ?

;-)",1520377801.0
Milyardo,"AFAIK there's no real reason, they just choose to use maven first, before SBT was widely used, needed to add sbt later, and never dropped support for the maven build because some developers have a workflow they still prefer with maven. Pretty similar situation to why the Scala compiler sill has an Ant build.",1520354557.0
jika_,"Probably because it's faster, and has a larger, more mature set of plugins.",1520329881.0
m50d,"What does maven do that SBT doesn't? Reliable backwards compatibility, reliable IDE integration, more readable build definitions (verbose XML is better than symbol-soup code IMO) that are more amenable to declarative reasoning, enforces that all custom build steps are properly encapsulated as plugins, conventions that promote consistent build processes across all projects.",1520343098.0
6nop_,"i believe that part of being an Apache project is that it must  use Maven to build artifacts. Jira is also the required issue tracker. 

sorry i couldnt find a reference for this info. ",1520332572.0
nieuweyork,"I believe it's a combination of legacy, need to support java, need to support maven publication, at the time the project started. ",1520360864.0
kpws,"'cos spark is the most ""java without semicolons"" project ever. just look at their [code conventions](https://github.com/databricks/scala-style-guide), the whole thing could be replaced with a single line: ""just pretend it's java""",1520339356.0
DevIceMan,"Generally, what I hear from my coworkers is ""Why is spark built?"" 

Apparently, dependencies are a nightmare every time we update Spark.",1520383133.0
joshlemer,Fixed!,1520271718.0
know_not_much,"I want to write slick support for snowflake database. I tried reading through the code of the existing MySQL slick driver, but I could find any patterns which would allow me to extract rewrite something similar for snowflake. is there any guidance available anywhere to add support for new databases in slick 3?",1520310192.0
killermouse0,"Is there any good and maintained library to do machine learning on timeseries with Spark in Scala ? I've been looking around and found a spark-ts package which, unfortunately, seems unmaintained as of today.

Cheers!",1520313289.0
Nicofisi,"After a year of programming in Scala I decided to dig a bit deeper by reading books about concepts and stuff, and reading docs of every single interesting thing that I stumble upon. 

During that today I've been reading the style docs and I stumbled upon this ([link](https://docs.scala-lang.org/style/naming-conventions.html)):
> Note that the Java getter/setter paradigm was often used to work around a lack of first class support for Properties and bindings. In Scala, there are libraries that support properties and bindings. **The convention is to use an immutable reference to a property class that contains its own getter and setter.**

I wonder how the correct use would exactly look here.. how should I define/name the getter and setter? Could someone please show me the simplest possible example of the idea mentioned here? Thank you",1520883304.0
zzyzzyxx,"Any tips for debugging compilation time? I'm working with the scalaxb library to interface with some rather old services, and the code it generates for my wsdl/xsd files takes over a minute to compile if it's successful at all, occasionally causes stack overflows during type specialization, and occasionally generates ""file name too long"" errors (apparently for anonymous classes).

Given the stack overflow, I assumed it was something with implicit conversions/resolution maybe being recursive, so I've tried `-Ytyper-debug`, `-Ydebug`, `-Xprint-types`, and maybe some others but haven't been able to discern anything useful from the output (I have no idea what I'm looking for). Adding the arguments seems to change the errors, e.g. `sbt clean compile` will have different errors depending on whether `-Ydebug` was used. I also tried `-Ybreak-cycles` in case the types were recursive but that had no effect.

I'm on 2.11 and won't be able to move to 2.12 for this project because none of our internal libraries are cross-built.

There are some obvious deficiencies in the generated code like generating a 12kloc file full of implicits and  anonymous functions, so I'm currently playing around with a clone of scalaxb to see if I can improve the generation and make it faster by accident, but to no avail yet. Most of the non-trivial functions and implicits have fully-specified signatures, so I don't _think_ it's spending too much time re-analyzing function bodies to figure out what all the types are.

The fact that it's intermittent indicates to me that compilation order is important, but I don't know how to control that, or how to figure out what the problematic ordering is.",1520301406.0
TJSomething,"I've been using Gradle for my current project and I really like it, but I've been getting grumpy about the build times. Would switching to a build tool that supports keeping the compiler warm and Zinc 1.0's incremental compilation help much? Since I'm looking for something that's production-ready, I think the options for that would be SBT, Maven, and Pants.

I'm a bit nervous about switching to SBT: I have bad memories of the last time I used it, about 5 years ago. And I don't really remember how it works. I've read that people just use templates for their builds. I'm not really comfortable with templates and not knowing how my build tool works. But I'm willing to put in some reading if this is really the best solution.

I actually don't know Maven that well either. I think I last wrote a simple project even further back, but I remember it being somewhat tedious, but well-documented and straightforward. I probably won't go for Maven, but I'd like a second opinion.

Pants seems promising, but I'm not sure the monorepo approach makes sense for a small team with only a couple projects.

tl;dr: My compiles are slow. Would a new build tool help? How are the various build tools?",1521019078.0
Philluminati,"Is normal programming languages you transform data by write groups of statements to execute in chains of functions....

In Scala you put data in monads that describe transformations and use a functor (called map) to sequence those transformations.

Is that a loose but accurate description of how Scala works or their devs think?

Is there a relationship between map and a Functor or is a functor more general?",1520583388.0
continuational,"React4s recently reached 0.9.x, so I thought it was time for some more documentation and examples. Are there any more examples you'd like to see? General feedback is also very much appreciated!",1520254037.0
hrjet,"If I can make an off-topic suggestion, please enable `https` for the site.

My previous ISP would inject scripts into http websites, that's why I have

  * changed my ISP
  * stopped enabling JS on `http` sites.

My current ISP probably doesn't inject scripts, but I don't want to find out the hard way. And moreover, there would be other peope who might be using not-so-good ISPs.",1520316020.0
tony_roberts,"Any problems, questions or feedback please email info@exceljava.com.",1520263260.0
tombraideratp,"what are using under the hood to converty scala UDf to Excel macros?
Are you using Jinx stuff to convert .jar to .exe ?",1520511903.0
Holothuroid,"Wow, you invented syntactic coke: An obscure, yet sweet solution. ",1520146962.0
jackcviers,"Congratulations! You've discovered Iteratees. Fs2 and Play iteratee are built off of this exact idea.

If you introduce an element holder, `El` and wrap that around your inputs, you can get rid of hasNext. Simply emit El.Empty when you have nothing to give. You can implement infinite streams by including El.EOF to indicate that the source is done producing (and not terminating your computation until EOF is emitted). You can add errorhandling by putting in El.Error.  Now, when you loop,  you can be in several states and you need to handle them. 

Anyway, I appreciate the simple interface over the more complicated ones already in the ecosystem, and feel this really cuts to the essence of iteratees.",1520177531.0
pellets,Fascinating and practical,1520145679.0
accidentally_myself,The `next(A): unit` method is slightly throwing me off but I guess it's in the name of efficiency like `Iterator`.,1520171875.0
simon_o,"There was some work on supporting the definition of runtime annotations in Scala, but this never shipped.

You need to define them in Java, and then you can use them in Scala.",1520122307.0
reactormonk,"Why do you need to use annotations? Because Scalas compile-time is more powerful, runtime reflection is rarely needed.",1520098852.0
hywelbane,"Yeah - Java annotations are basically the only way to go.  You'll get a bunch of answers telling you you're doing it wrong if you need them present at runtime, but that's not an answer to the fact that sometimes you really do need that information there.

An example is a argument parsing library I helped create - we used a pair of [Java annotations](https://github.com/fulcrumgenomics/sopt/tree/master/src/main/java/com/fulcrumgenomics/sopt/cmdline), and then [`type` defs](https://github.com/fulcrumgenomics/sopt/blob/master/src/main/scala/com/fulcrumgenomics/sopt/package.scala) to make them feel a bit more scala-ish.",1520099319.0
Baccata64,Can you upload a minimal project in github (or somewhere else) that reproduce the behaviour ? Hard to understand where it could come from without seeing your setup. ,1520167092.0
LukaJCB,"I can't recommend http4s enough, it's super clean and really really fun to use!",1520030771.0
Plippe,"Hey,

There are a few. 

The most common one would be Play from typelevel. It is an MVC framework that is very Java like.  

Another is akka-http, a minimal framework built on top of Akka.

Lastly, http4s is a minimal functional framework. If you like cats, fs2 and the sorts.

Pick what suits you best.",1520021731.0
Krever,You can try julienrf/endpoints and select a backend of your choice (Akka http or play),1520119755.0
davdonkin,"Try [Finch](https://github.com/finagle/finch)

Purely functional, fast enough.
Still under active development, but we've been using it in production for last two years and happy with the choice.",1520026555.0
amazedballer,"Play Slim:

https://github.com/lloydmeta/slim-play#slim-play-app-

with the PlayService module:

https://www.playframework.com/documentation/2.6.x/Highlights26#PlayService-sbt-plugin-(experimental)

and using julianrf/endpoints

https://julienrf.github.io/endpoints/

or use the Play REST API  example:

https://developer.lightbend.com/guides/play-rest-api/part-1/index.html#routing-post-requests

REST APIs have to deal with a number of things that are not always set up out of the box, and so I'd look at [Playing Nice: Designing Well Behaved REST APIs](http://danielwestheide.com/talks/playbb2015/slides/index.html) as well.

",1520217534.0
4b1d,Check out scalatra ,1520052277.0
spyk,"Had great experience with Finatra. Straightforward and easy to use, even exposes a detailed monitoring admin endpoint by default.",1520060845.0
nominal_handle,spark itself uses jersey for that ( presuming you mean apache spark ),1520021179.0
Milyardo,"While this does address a real problem, I feel as though it wouldn't be a problem if we didn't have a proliferation of IO types in the ecosystem.",1520012290.0
yaroslav_h,"Actors are about work with shared state and are overkill for fetch-aggregate flow.
Future is the best choice in your situation.",1519985956.0
Martissimus,You could consider actors when you have mutable state that needs to be modified concurrently. Otherwise use something less complex.,1520042588.0
beleaguered_penguin,"I have never seen a valid use-case for actual actors in a commercial environment. In all examples I've seen, futures would have been better, simpler and more easy to deal with.

Obviously uses for them exist, and we wouldn't have a telephone network without them, but if you think there's even a chance it will work with something other than actors... don't use actors.

Things that use actors under the hood like Akka Streams are a different matter.",1520159254.0
AlexITC,"I don't know what you mean by Scala page, I have built cryptocoinalerts.net using Play Framework and you can look to the source code: https://github.com/AlexITC/crypto-coin-alerts",1520019494.0
thesuperching,"https://www.slideshare.net/brikis98/nodejs-vs-play-framework
page 150.",1519984865.0
continuational,"No sure what you mean by Scala page, but if you haven't decided on a framework, I'm currently working on an examples page for React4s. The page itself is made in React4s:

http://www.react4s.org/
",1519988216.0
channingwalton,"You need to install the Scala plugin. I use the EAP releases and they are almost always good, and they come with Scala. See https://www.jetbrains.com/idea/nextversion/",1520030107.0
MasGui,"Take a look at: https://www.reddit.com/r/scala/comments/7v515l/opening_oss_project_with_intellij/

Once again, shame on you reddit Scala for downvoting a perfectly valid question.",1520345677.0
Jasper-M,"Quoting Seth Tisue: ""I want to be 1000% clear with you and with everyone that there has been zero change in the maintenance and/or supported status of anything. we're just trying to not have so many stale tickets that nobody has looked at in years.""",1520018120.0
kpws,"this is f\*ing great.

first we had scalameta (v2), which was supposed to be the new scala macro system, being relegated to live life as a [glorified parser](http://www.scala-lang.org/blog/2017/10/09/scalamacros.html).

then we have the *new* new macro (v3) not being touched [in over three months](https://github.com/scalacenter/macros/commits/master), a week before their last [blog post](http://scala-lang.org/blog/2017/11/27/macros.html).

and now this. scala has three macro systems, none of them compatible among themselves, none of them with any clear migration path, none of them in fully finished working condition, none of them supported, and none of them being properly maintained.

i've spent the last many months working on a project that heavily relies on macros. i might as well throw it all in the garbage now, 'cos it doesn't matter what i do, it most certainly won't be supported by scala 2.13.

scala macros is a dead end. i feel like the only reason i'm still using scala as primary language is because i have nothing else to move to. i'm open to suggestions.",1519966030.0
arturaz,Show us your code and complete error,1519935108.0
erwan,"I'm the original author of play json (before Pascal Voitot made it so much better!) and I now mostly use Circe, so I guess I have some insights.

At the core they share the same philosophy, namely they're based on typeclasses to encode/decode json. So in that sense I think they're similar. However they have a few differences:

- Play Json exposes its AST, along with a DSL to make it easy to traverse and modify Json. Circe hides its AST on purpose: https://github.com/circe/circe/blob/master/DESIGN.md to encourage to work with case classes
- Circe is based on cats, and provides stuff like `Show` for example
- Circe's result is an Either[Failure, T] while Play uses a custom sealed trait. The Either makes it nicer because it's part of the standard lib so it's composable, but the `Result` of Play Json comes with helpers that can be handy
- Circe's macros are more powerful, in particular the @ConfiguredJsonCodec

In short: 

- Play Json is easier to use if you're new to Scala, or don't used advanced Scala features (you can easily find a value inside a Json for example)
- You'll see circe's value if you already use cats, or use Either a lot in your codebase
- If you accept circe's philosophy that Json is only a transport and you should only manipulate case classes, it's fine - if you want to work directly with Json then Play Json will be more convenient

Disclamer: I haven't used Play Json recently so some of my info might be outdated.",1519926949.0
travisbrown,"I maintain circe, so some of this comment is likely to be kind of defensive, but I also really am curious to hear more about your experiences and those of your team.

About the Shapeless dependency: as other people have pointed out here, Shapeless isn't a core dependency. You can use circe without it, either by writing your own encoders and decoders by hand (which we try to make as convenient as possible through methods like `forProductN`), or by replacing circe-generic with [circe-derivation](https://github.com/circe/circe-derivation), which is a little like Play JSON's ""inception"" macros plus a few extra pieces of functionality (e.g. snake case key transformations, etc.).

For what it's worth, our Sonatype download stats suggest that a non-trivial proportion of adopters (roughly 10%) don't use circe-generic. So you definitely can avoid the Shapeless dependency if you don't want it. You mention a ""depenency conflict with another library"", and I'd be curious to hear what that was. It's true that you can't avoid the Cats dependency, but that's the only dependency you can't avoid, and now that Cats has a 1.0 release this should be less of a concern. 

About the ""`List` everywhere"" part: I'm not sure what this means, since circe provides efficient type class instances for many collection types, and where it does use `List` we've chosen `List` at least in part with performance considerations in mind. We definitely care about performance, and [our benchmarks](https://github.com/circe/circe-benchmarks) suggest that circe is at least competitive with other Scala JSON libraries, and in many cases is much faster than most of them for common use cases. If you've run into situations where this isn't the case, I'd like to hear about them.

About the comparison with Play JSON: [erwan's comment](https://www.reddit.com/r/scala/comments/814lyh/why_do_people_love_circe/dv0y70a/) does a good job of highlighting most of the big differences, but I wanted to point out a few other things:

* While it's true that circe hides its JSON representation's constructors, it does provide ways to work with JSON directly that are arguably as comfortable as Play's. `Json#fold` is one of these, and circe-optics provides a wide range of others (including pattern matching, if that's what you're looking for).
* circe is integrated with many, many other libraries (optionally, via small modules), and is more actively developed.
* I'm not sure what the Scala.js experience is like for Play JSON. I see that it now has Scala.js artifacts (fairly recently?), but I've not really heard anything about people using it on Scala.js. circe has supported Scala.js more or less from the beginning, and has some Scala.js-specific utilities.
* circe's just a lot faster than Play JSON for many common use cases (see the benchmarks linked above, and other people's benchmark projects linked from the main circe README).
* circe provides lots of features that Play JSON doesn't (or that are third-party additions for Play), such as JSON literals.
* Many people seem to find circe's approach to error accumulation useful, and the ability to choose the failure mode is much more difficult in libraries like Play (see [my original blog post](https://meta.plasm.us/posts/2015/12/17/error-accumulating-decoders-in-circe/) about this topic for a comparison with Play JSON specifically).
* circe's approach to JSON numbers is much more robust. Try `play.api.libs.json.Json.parse(""1e2147483647"")` and you'll get a weird `NegativeArraySizeException`. Knock one digit off the end of that string and Play JSON will hang indefinitely. circe just works for large (or small) numbers like this, and it will do the right thing as you decode them into Scala's numeric types as well.

None of this is to discourage you or your team from using Play JSON. I think it's a great library. There _are_ plenty of reasons to prefer circe, though, even if you don't care at all about functional purity or any of the Typelevel stuff. :)",1519966075.0
BarneyStinson,When you are working with the typelevel ecosystem then circe just fits right in. What about the API did you find counter-intuitive? ,1519908290.0
noel,"In what way did you find the API unintuitive?

The Shapeless dependency is for automatic derivation. Don't use that and you don't get the dependency.",1519907281.0
Milyardo,`Seq` is a useless type that doesn't describe anything. Why would you want an API that uses `Seq`?,1519915620.0
plokhotnyuk,"Try jsoniter-scala: https://github.com/plokhotnyuk/jsoniter-scala

Initially this library was developed for requirements of real-time bidding in ad-tech and goals are simple:

-  do parsing & serialization of JSON directly from UTF-8 bytes to your case classes & Scala collections and back but do it crazily fast w/o reflection, intermediate trees, strings or events, w/ minimum allocations & copying

- do validation of UTF-8 encoding, JSON format & mapped values efficiently with clear reporting, do not replace illegally encoded characters of string values by placeholder characters

- define in compile-time classes that will be instantiated during parsing to minimize a probability of runtime issues, generated sources can be inspected to prove that there are no security vulnerabilities during parsing

Here are results of benchmarks that compare the performance of the library with other JSON parsers for Scala: 

https://plokhotnyuk.github.io/jsoniter-scala


EDIT: If you still wondering if any of JSON parsers for Scala are vulnerable - just follow links below to see that almost all are affected (excluding jsoniter-scala for sure):

https://www.reddit.com/r/scala/comments/9qctso/denial_of_service_during_parsing_in_argonaut/

https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062",1520014154.0
Marsupiallad,"Shapeless does lend a lot of flexibility, and it made it a lot easy for me when I started working with JSON in Scala initially.",1519904741.0
oleg-py,"Um, `Seq` codecs actually work:

https://scastie.scala-lang.org/eUjEGLjWSQKmW7bZC9owJg

For not having shapeless / faster derivation, there is https://github.com/circe/circe-derivation project

I have no problems with `circe` API (which I actually barely have to use directly), although I've been doing FP in Scala for a while already so that might be subjective.",1519918326.0
tsec-jmc,"You shouldn't ever use `Seq`. It's a silly abstraction in my honest opinion. You care about the runtime properties of your data structures and lookups between list and `IndexedSeq` are not the same.

 > the api is counter untuitive

HOW?! It maps to case classes seamlessly, with _much_ less boilerplate than play json.

> Circe is a library I'll try to avoid in the future and yet I encounter many open source projects which use it

See ya. 
",1519945232.0
jackcviers,"The api is the same shape as Jackson's low level api except for that you can chain cursor calls and you don't need to cast when reading fields. It's .hCursor.downField(fieldName)

That's not terribly complex. It also has optics

> import io.circe.optics.JsonPath._

>val _phoneNum = root.order.customer.contactDetails.phone.string

>val phoneNum: Option[String] = _phoneNum.getOption(json)

That's pretty intuitive...",1519915597.0
loicd,Play Json is good but you have to declare json encoders/decoders for  all types. Circe avoids this thanks to shapeless derivation.,1519912093.0
m50d,"Shapeless is a dependency you need in any serious Scala project IME, and far better to reuse it than reimplement it (especially if the alternative is implementing your own custom macros - macro programming is inherently error-prone so it's especially important to rely on a few widely-used macros like the ones in shapeless rather than each project implementing its own macros). You also need proper dependency management whatever you're doing.

Whether to use `Seq` is a difficult design decision because it's a lot of extra work to write your code in a way which will work correctly with `Stream` (which is a subtype of `Seq`), so some people prefer to use concrete finite sequence types. Personally I avoid this problem by banning `Stream` in my codebases, but a general-purpose library can't assume that everyone will do that, and it's not good to offer an API that appears to accept any `Seq` but will break when passed an infinite `Stream` (which presumably must be what play-json does).

Personally I have a good impression of Circe because of its clear design document that articulates a philosophy that makes a lot of sense. Whereas I have a poor impression of Play in general (it encourages a programming style that relies on unsafe casts and custom build steps, and doesn't really make much use of the power of Scala) so would instinctively avoid libraries from it.",1519906227.0
naftoligug,"Last I checked, play-json didn't do ADTs (sealed trait with case classes) unless you wrote the code out by hand. That's a deal breaker.",1520015755.0
Scf37,"Jackson Jackson all the way.

We had hard time choosing JSON library for our Scala project but had to stop on Jackson. Reasons:

- performance
- ability to fail on excess JSON fields (must have if you value backward compatibility)
- ability to distinguish null and missing field (required for PATCH/partial PUT)
- nice json tree manipulation (sometimes we have to parse JSON that cannot be represented as scala model)",1520146351.0
Philluminati,Circe gives you easy translations between case classes and Json. Play json makes you write format macros which you end littering everywhere. Circe makes me feel like I’m not littering my controller code into my deeper backend components.,1520271758.0
grizzly_teddy,What's circle?,1519936941.0
danielgenetics,Thanks for sharing,1519898601.0
colindean,This is one of those features that I feel exists in Scala for Java interoperability and should otherwise not be used. It's insufficiently explicit and requires looking at the called method's signature in order to tell what's happening. ,1519912080.0
Judheg,"I asked because I can compile build and install the plugin on my Idea, but no idea how to use it in vim :)",1519856954.0
lewis6991,"Nice.

I'd highly suggest using [stags](https://github.com/pjrt/stags) over ctags. It works so much better.",1519854417.0
BerserkerAstra,">	My first piece of advice: don’t get vim — get neovim. Neovim has support for asynchronous commands

While I use neovim, this isn’t true. As of Vim 8, vim now supports async. If you stick with vim, FZF is an excellent fuzzy-find-everything plugin instead of neovim-fuzzy the author is suggesting. FZF is also written by junegunn, the same dev who wrote the vim-plug manager author mentions.",1519861956.0
eed3si9n,See also http://eed3si9n.com/sbt-server-with-neovim,1519932822.0
duhace,i'm trying to use this and I get no error highlighting period. kinda kills this for me at the moment.,1519865762.0
grizzly_teddy,"So what about my existing plugins, for example vim-airline? Do those work on neovim too? I've never tried neovim don't really know what I'm missing",1519865769.0
know_not_much,Don't we already have language server protocol coming up in dotty? ,1519933921.0
n0rad,"This is my one loop version

    import Math._
    
    /* Helper function for powers of integers */
    def ipow(n: Int, a: Int): Int = pow(n, a).toInt
    
    /* returns the integer n^(1/a) if it exists */
    def integerRoot(n: Int, a: Int): Option[Int] = {
      val k = round(pow(n, 1.0/a)).toInt
      ipow(k, a) == n match {
        case true => Some(k)
        case false => None
      }
    }
    
    /* find all possible (x, y) with n = x^a + y^a */
    def twoPartitions(n: Int, a: Int): List[(Int, Int)] = {
      val range = 0 to floor(pow(n/2, 1.0/a)).toInt
      range.toList.map { k: Int =>
        integerRoot(n - ipow(k, a), a).map((k, _))
      }.flatten
    }
    
    twoPartitions(1729, 3)
    List((1,12), (9,10))
    > twoPartitions(13, 2)
    List((2,3))
    > twoPartitions(10,1)
    List((0,10), (1,9), (2,8), (3,7), (4,6), (5,5))
    
    > (1 to 4200).map((n: Int) => (n, twoPartitions(n, 3))).filter(_._2.length > 1)
    Vector((1729,List((1,12), (9,10))), (4104,List((2,16), (9,15))))

So the next number is 4104
​
",1520028883.0
beisenhauer,"`for` comprehensions. The equivalent to your example would look like:

    for {
      f <- foo()
      b <- f.bar()
    } yield b.baz()
",1519819498.0
m50d,"Others have said `for`/`yield` is probably the closest equivalent. If you really want to write Rust-style and are willing to use a macro there's https://github.com/ThoughtWorksInc/each , but I wouldn't really recommend it - it's not idiomatic Scala.",1519897415.0
valenterry,"Something like that could work:

```
(foo andThenK _.bar() andThenK _.baz())()
```

This is simpler and less powerful than `map`/`flatmap` as you cannot access the results of previous calls. You cannot do this with Rusts `?` operator either, so it's the same level of power.

Bonus: it works not only for `Option` but other types like `Either` or `Future` as well.",1519833020.0
Holothuroid,"Not really, no. You can write it as an extension method, though. ",1519826013.0
pheymann,"Hi,
author here. This library is my result of trying to implement an API definition on the type level, as it is done by Haskells Servant.

I hope you find it useful and maybe consider adding support for other client libraries (besides htt4s which is already included).

Cheers",1519810797.0
simon_o,"I think the handling of do-while complicated the proposal quite a bit.
I would probably just have removed do-while altogether to avoid the complexity of having to specify how do-while interacts with all the other places using do.

`then` would have been nice, because it made the `then` branch line up with the `else` branch.
But whether a simplification is substantial enough to go forward with it ... that's a hard question to answer, because the standards around that are rather arbitrary in Scala.",1519775142.0
,[deleted],1519766353.0
vtscala,Are you hitting ctrl?  I don't see hyperlinks unless I hover while holding ctrl.,1519769840.0
simon_o,How did you create (did you use sbt-eclipse?) and open the project?,1519774333.0
m50d,Not a problem I've ever encountered. What versions are you using? Does it happen with a clean install of eclipse (just the Scala plugin)? You could try bisecting which plugins you have installed - the Eclipse plugin ecosystem is big and sometimes two plugins will interfere with each other.,1519897576.0
nerga,"I would say type inference, pattern matching , and case classes would be a few easy examples for why you would use Scala over Java.",1519776623.0
notenoughstuff,"Scala is one of the programming languages that support (ML-style) functional programming very well. Java has gotten closer, but is still very far from good support; and some of its support is... not so nice, like all the many different overloads (https://docs.oracle.com/javase/9/docs/api/java/util/function/package-summary.html covers many or all of them in the standard library) for something so simple as `Function0`, `Function1` and `Function2` in Scala.

Why is (ML-style) functional programming great? Well, for one thing, it means you either have to worry a lot less or not worry at all about certain very bitter facets of concurrency, especially memory consistency, memory models and happens-before relationship, etc. The reason is that when you modify memory from one or more threads (or, typically similar abstractions like goroutines in Go), and read it from one or more other threads, race conditions are not the only thing that can go very wrong. For more information on what can go wrong on for instance the JVM, I (strongly) recommend the book `Java: Concurrency in Practice`. Try also skimming through some examples on its website: http://jcip.net/ (for instance code example 3.15 is especially ""fun""). While on the JVM the behaviour that can happen if memory consistency is not ensured, is not as bad as undefined behaviour in C++ (where absolutely anything can happen), it is still in that direction. The reason for the strange behaviour when memory consistency is not ensured is stuff like JIT-optimization, which relies on memory consistency being ensured when it does its optimizations.

You could then use locks and synchronization primitives and abstractions similar to locks, but locks can be very difficult to get right to ensure that you protect everything you need to protect, especially if you use locks not just to prevent race conditions but also to ensure memory consistency. Furthermore, locks can lead to deadlocks, livelocks and starvation. And the maintainability of locks thus tends to be very bad if you use them more than in a very limited way.

But if you use functional programming, you either do not read and mutate memory from multiple different threads (or mutate memory ever), or you do so only to a very, very limited degree, which makes this either a non-issue or much, much easier. And then there are all the other benefits of functional programming in addition, like not having to worry about global mutable state used for computation (1) in regards to maintainability, refactoring, correctness, modularity and dependencies, etc.

(1): (I write ""global mutable state used for computation"" because databases, at least as far as I understand them, are both global and mutable. But they are generally used for persistent state, not computation, which helps considerably, and relational databases tend to provide a number of very nice guarantees. There are also functional databases, but I do not believe they are used widely, and I do not have experience with them. They might be useful in at at least a number of scenarios, I believe).",1519810024.0
vlavrov,Alternative language on JVM. You can leverage existing java ecosystem and earn good money making commercial software while using experimental language. There is no best language of all times. It depends on what you like. To be happy with Scala you must be a bit of programming languages enthusiast.,1519766194.0
srparish,"[Shapeless](https://github.com/milessabin/shapeless) is a killer feature, especially when used with implicits. It let's you write code that can generically decompose and operate on recursive case classes, in a completely type-safe way.

This can be used for all kinds of things: type-safe serialization/deserialization of json, csv; automatically generating sql to insert or select data, converting case classes from one form to another (dropping fields, changing field types, adding fields).",1519953462.0
,[deleted],1519809859.0
kag0,"In addition to what people have said about type inference, pattern matching, and case classes: if you wanted to get more advanced, showing things like json mappers with type classes is an example that's easy to see the power of.

Something like play json's `Json.fromJson[MyModel](myJson)` that is compile and type safe is going to be uncommon in other languages.",1519841170.0
scalway,"No one said about scala.js? Weird :)
I'm using it from ~2 years without any problems (many libraries/cross compiled code/nice js interop).",1520028445.0
m50d,"http4s is looking decent though, right?",1519722920.0
emilypii,"I've used both of them in production, and optimizing either always meant minimizing as much of the framework as possible, including migrating away from `akka-http` on Play and using strictly Netty. It's not terribly surprising. You'll also notice the overhead comparisons are not favorable either.",1519704268.0
know_not_much,I have been curious to know why do finagle based frameworks (finatra or finch) don't appear on this list? is it because they were not benchmarked? or is it because they never even made it to the list because of being too low in performance.,1519714279.0
,"I'm happy to see these benchmarks posted. I can only hope the folks behind Http4s take these results to heart, having placed behind Akka-Http in 5 out of 6 benchmarks.",1519752136.0
amazedballer,"Technically speaking, the Techempower benchmarks don't give a good accounting of what it's actually like to run a web application, and historically speaking there have been rounds where Play wasn't even running.  Every so often a contributor will go in and clean it up and it'll magically improve, but's it's always been a time sink.  

It's not just Play, of course -- some of their benchmarks are against frameworks that are [5 years old](https://www.reddit.com/r/programming/comments/7xrcju/techempower_framework_benchmarks_round_15/dubjg40/).

Play has its own performance benchmarks, [prune](https://github.com/playframework/prune), and it can run forwards and backwards through commits for regression analysis.  You can see the charts -- they are available at https://playframework.github.io/prune/

Here's Greg's [post on the early round 15 preview](
https://groups.google.com/forum/#!topic/play-framework/9WIyCTdxaiI) going into more detail:

> I have not looked into the individual TechEmpower tests yet. I can tell you that in the past we've had issues with TechEmpower, with things like other processes holding onto the port Play is trying to use, so that may be the issue with the failed tests. There are also possibly some issues with configuration that has not been properly updated to 2.6. It would be great to have some help from the community on this if someone has the time.

> I just ran a quick test on my Macbook Pro and here are the results I'm seeing. I tested with https://github.com/playframework/play-scala-starter-example/, adding a simple GET endpoint and a POST endpoint receiving a small JSON body.

> Play 2.5 (GET):

    wrk -d30s -c1000 -t8 --latency http://localhost:9000/test                                        ~
    Running 30s test @ http://localhost:9000/test
      8 threads and 1000 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    20.84ms    8.47ms 139.83ms   73.75%
        Req/Sec     4.98k     1.32k   12.26k    82.98%
      Latency Distribution
         50%   23.72ms
         75%   25.89ms
         90%   28.97ms
         99%   31.60ms
      1189187 requests in 30.10s, 145.16MB read
      Socket errors: connect 0, read 1089, write 0, timeout 0
    Requests/sec:  39505.79
    Transfer/sec:      4.82MB

Play 2.6 (GET):
    
    wrk -d30s -c1000 -t8 --latency http://localhost:9000/test                                        ~
    Running 30s test @ http://localhost:9000/test
      8 threads and 1000 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    16.93ms    9.76ms 191.80ms   62.94%
        Req/Sec     5.28k     1.77k   14.76k    83.46%
      Latency Distribution
         50%   17.76ms
         75%   24.59ms
         90%   28.21ms
         99%   31.58ms
      1262238 requests in 30.07s, 154.08MB read
      Socket errors: connect 0, read 1575, write 0, timeout 0
    Requests/sec:  41981.22
    Transfer/sec:      5.12MB

> Play 2.5 (POST):
    
    wrk -d30s -c1000 -t8 -s post.lua --latency http://localhost:9000/testPost                        ~
    Running 30s test @ http://localhost:9000/testPost
      8 threads and 1000 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    40.47ms   18.94ms 529.91ms   78.19%
        Req/Sec     2.53k     0.88k    4.10k    69.94%
      Latency Distribution
         50%   38.41ms
         75%   48.64ms
         90%   60.88ms
         99%   92.34ms
      598509 requests in 30.09s, 73.06MB read
      Socket errors: connect 0, read 1179, write 0, timeout 0
    Requests/sec:  19887.66
    Transfer/sec:      2.43MB

> Play 2.6 (POST):
    
    wrk -d30s -c1000 -t8 -s post.lua --latency http://localhost:9000/testPost                        ~
    Running 30s test @ http://localhost:9000/testPost
      8 threads and 1000 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    18.50ms   19.85ms 616.06ms   98.96%
        Req/Sec     5.15k   838.81     8.74k    85.08%
      Latency Distribution
         50%   16.73ms
         75%   22.85ms
         90%   25.57ms
         99%   39.57ms
      1231158 requests in 30.08s, 150.29MB read
      Socket errors: connect 0, read 1283, write 0, timeout 0
    Requests/sec:  40934.58
    Transfer/sec:      5.00MB

> Of course these are not completely scientific tests, but they seem to show we provide about the same or better performance. The only modification I made from https://github.com/playframework/play-scala-starter-example/ is disabling all filters by setting play.http.filters = play.api.http.NoHttpFilters. This is because there are some filters enabled by default in 2.6 such as the CSRFFilter, and I wanted to test with identical configuration. If you actually needed a CSRF filter on 2.5 you'll also need it on 2.6, so there should be no difference, and if you were concerned about performance and did not need certain filters, you would disable them. This is something we should also check in the TechEmpower tests.
",1519787519.0
silentraquo,"Nice work!

Any chance prop-passing could be made more concise than `div(new DivProps { className = ""divClassName"" })(...children...)`?

ETA: Nice demo too! The address thingy seems a bit broken though (does not preserve selection state across tab switches, and the address is shown below the list instead of to the right which is what was intended I think)",1519695038.0
HaydenSikh,"As the other comment said, the DataFrame API is often not the best when it comes to parsing and extraction of columns.  In my own workflows I tend to use RDDs for the initial processing and then dump the columnar data in parquet format for later processing using DataFrames.

If you do need to extract starting from  a DataFrame then I'd recommend defining a plain old (but pure) function that does the extraction to produce a case class of the fields, making that into a UDF, and then using that in a single `withColumn`.  That will produce a column with the extracted fields nested underneath.  If that's good enough for you then you're done.  If you need / want them flattened out then you can use `select` and `drop` to do so:

<code>
case class ExtractResult(foo: String, bar: Int)

def extract(in: String): ExtractResult = ExtractResult(in, in.length)

val extractUDF = udf { (in: String) =>
  // wrap in an Option since Spark passes nulls around
  Option(in).map(extract)
}

myDataFrame
  .withColumn(""temp"", extractUDF($""some_column""))
  .select($""\*"", $""temp.\*"")
  .drop($""temp"")
</code>

(Sorry if that came out funky, trying to type code on mobile).

In any case, that `extract` function can live in a library somewhere where it can be tested or pull in other libraries (so long as it stays pure and serializable).

Edit: formating",1519704791.0
Mimshot,This code illustrates one of the reasons I'm not a fan of the data frame interface. If you used RDDs this would be one map with a function that converts one case class to another. That function would be about the same number of lines but much more legible. ,1519694341.0
emilypii,"My usual question when I see other people's Spark code: Why aren't you using a dataset when this is exactly the use-case for datasets?

Define your domain and make use of Spark the way it was intended, not as a glorified SQL wrapper.",1519773305.0
m50d,What's the error message?,1519656808.0
silentraquo,"I just finished v0.1 of my streaming and state propagation library for Scala.js, [Airstream](https://github.com/raquo/Laminar/tree/master/src/main/scala/com/raquo/laminar/experimental/airstream). It's designed for safely representing both state and events in hierarchical UI components. My own [Laminar](https://github.com/raquo/Laminar) library uses it now instead of xstream.js. Couldn't be happier with this transition.

Airstream is different from other reactive solutions in these ways:

* **Mandatory ownership of leaky resources** – it is impossible to create a subscription without specifying when it shall be destroyed. This helps prevent memory leaks and unexpected behavior.

* **No FRP glitches** – neither observables themselves nor their observers will ever see inconsistent state within a transaction, at no runtime cost.

* **One integrated system for three core types of observables** – Event streams alone are not a good enough abstraction for anything other than events.

* **Small size, simple implementation** – easy to understand, easy to create custom streams. Does not bloat your Scala.js bundle size.

When integrated into a reactive UI library such as Laminar, Airstream allows for a safe and largely automatic subscription lifecycle management, whereas other UI libraries typically allow the end user to accidentally create unmanaged subscriptions that they will eventually forget to kill.

More details in docs. I'm going to publish it as a separate package in a couple weeks when I release the next Laminar version.",1519781627.0
sake_92,"Wrote a few paragraphs for my hepek static stuff generator [documentation](https://sake92.github.io/hepek/).  
Markdown is supported, prismjs for code highlighting, typesafe bootstrap rows/columns/grid, helpers of all sorts. Templates are just traits, contents are objects.  
Feedback welcome. :)",1520239760.0
wannabeproprogrammer,"So I recently started learning Scala as part of a project for school and I am in love with everything it has to offer. I've currently been working on writing a small compiler as a learning excercise. I was thinking of releasing it open source once it's done

Anyways what are some things beginners should definately know about Scala that most people don't. I feel like there might be some hidden features I'm unaware of completely",1519647928.0
continuational,[react4s.org](http://www.react4s.org) - I'm working on launching a site full of React4s examples. Feedback appreciated!,1519657592.0
owlandrews,"[sbt-thanks](https://github.com/hywelandrews/sbt-thanks)

Finds all of your maven dependencies, their github.com repository from metadata hosted on sonatype, and star's their GitHub repositories. This was inspired by a similar plugin for Cargo (https://github.com/softprops/cargo-thanks).
",1520701459.0
inejc,"I've recently started working on a machine learning library called [doddle-model](https://github.com/picnicml/doddle-model). It can be summed up with three main characteristics:

* it is built on top of [Breeze](https://github.com/scalanlp/breeze)
* it provides immutable objects
* it exposes its functionality through a scikit-learn-like API

For a list of examples see [doddle-model-examples](https://github.com/picnicml/doddle-model-examples).

If you have any questions/suggestions feel free to comment, I'd love to get feedback and contributors. Cheers.",1520787809.0
jabbalaci,"Would you share with us why you move away from Python? Python is strong in data science (numpy, pandas, etc.). I'm just curious.",1519584340.0
AlienBirdie,I find DL4J to be just as capable as TensorFlow. Just requires more boilerplate for certain applications. ,1519585792.0
ClydeMachine,"[MXNet supports Scala](https://mxnet.incubator.apache.org/api/scala/index.html), although it might be lacking some in documentation compared to other libraries. As a bonus, depending on your low-level needs, you can take advantage of its [Gluon interface](https://mxnet.incubator.apache.org/api/python/gluon.html), launched last year, for getting up and running quickly.",1519593324.0
osamc,Write neural net in Tensorflow in Python. Load it into Scala.,1519593314.0
realfeeder,"I have recently switched from MLLib to h2o(with Sparkling Water). So far it has been an awesome decision - h2o is way more customizable and user friendly.

Data munging and transformation is still getting done with Spark tho, h2o serves just as ML engine.
",1519626405.0
valenterry,"To use a different Syntax than /u/joshlemer, I'd write it like this:

```
def runApp(fileDirectority: String): List[String] = function1 andThen 
function2 ... andThen function7 andThen function8
```

or even:

```
val runApp: String => List[String] = function1 andThen 
function2 ... andThen function7 andThen function8
```

BTW: It is a good idea to use precise types, instead of primitives. For this example it's okay, but in real world, please use something like a `Directory` type and not `String`.",1519493250.0
jokasx,The replies suggesting implementing the pipeOps and/or using andThen are interesting but I suggest you be careful as those suggestions quickly break appart and are confusing when going over functions with different number of paramenters. I've tried a few times already and it just becomes a huge ugly mess usually. ,1519503242.0
parc,"Look at map, flat map, and for comprehensions. ",1519487792.0
AlexITC,"The best suggestion that I can make is that you seem to not be considering possible errors, based on the `runApp` function, it seems that you are probably interacting with a file system where you always need to check for errors, assuming that I'm correct, the result type from `runApp` function doesn't specify that an error could occur.  
  
As there are no error results encoded in the result type from your function, you are very probably required to handle exceptions which break pure functions, a way for improving this would be to encode possible errors like using `Either[ApplicationError, List[String]]` in the result type instead (here is the main usage that I have seen on scalaz and cats).  
  
You could be able to get quite clean code using the for-comprehension syntax while keeping the errors (if any), quoting a [piece of code](https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/services/UserService.scala#L84), you could get something like this:

    def setPreferences(userId: UserId, preferencesModel: SetUserPreferencesModel): FutureApplicationResult[UserPreferences] = {
      val result = for {
        validatedPreferences <- userValidator.validateSetUserPreferencesModel(preferencesModel).toFutureOr
        userPreferences <- userDataHandler.setUserPreferences(userId, validatedPreferences).toFutureOr
      } yield userPreferences

      result.toFuture
    }",1519516505.0
raghar,"You can use andThen or combine to chain functions directly (only difference is order of functions).

If you had  them all return results in the same ""container"" (List, Option Future, Task), you could chain them with map or flatMap (or with for comprehension that desugars to them). Simplifiyng, such interface you can call ""monadic"", and if they have some properties (monad laws) you could call the container type ""monad"". ",1519487901.0
joshlemer,"Seems fine to me, some people like to use a pipe operator for things like this.
    
    implicit class PipeOps[A](val a: A) extends AnyVal {
      def |>[B](f: A => B): B = f(a)
    }

    fileDirectory
      .|>(function1)
      .|>(function2)
      .|>(function3)
      ...
      .|>(function7)
    

or you could also just compose the functions themselves like

    function1
      .andThen(function2)
      .andThen(function3)
      ...
      .andThen(function7)(fileDirectory)",1519488091.0
vytah,"Looks fine for me. Partial results are properly named, the code is easy to refactor or reformat, it's not too tall and not too wide.

I also assume here that you're using exceptions for error handling and the partial results can be considered opaque. If not and if you want to make the code more monadic, then you'd put it in a `for`, but you'd already do it if that was the case.",1519520191.0
strawman53,"This question immediately reminded me of Haoyi's excellent blog entry [What's Functional Programming All About?](http://www.lihaoyi.com/post/WhatsFunctionalProgrammingAllAbout.html) - the essence of which is to produce a  'recipe' where the state values are explicitly passed from one function to another in a data-flow graph. This looks exactly like your example code; I would say you are capturing the essence of Functional Programming.

That's not to say you shouldn't look at the slightly more advanced features such as composition, monads, for-comprehensions etc. and certainly the encapsulation of errors in Either or Try.",1519605824.0
lihaoyi,Wrote this up for those of you who are curious about the new Mill build tool.,1519438859.0
Mimshot,"For me, especially with work projects, not having complete IntelliJ support is a non-starter. By complete I mean IntelliJ supports Mill not the other way around -- need to be able to attach the debugger, import libraries automatically, etc.

Have you thought about adding an IntelliJ plugin?",1519497882.0
AlexITC,"To anyone considering to give mill a try, I just tried it and successfully built and released a library ([playsonify](https://github.com/AlexITC/playsonify)).  
  
My experience was really good, the learning curve was light and when i wasn't able to find something in the documentation, being able to navigate to the task source code using IntelliJ was quite useful.  
  
The biggest advantages that I could list are:

- The build definition is more intuitive than sbt, for example, I was able to abstract common pieces for two modules easily because, well, it's scala, I have never built a definition with several modules before as simple as with mill.
- Releasing a library to Sonatype is straightforward, when I did it with sbt, I spent most of the day on the task with several frustrating experiences.
- As I understand, mill uses coursier which gives a quite better experience while compiling the project.
- I got several answers fast on the gitter channel.
  
  
On the negative side:

- You need to run `mill mill.scalalib.GenIdeaModule/idea` each time that the build definition is updated, this is something that I didn't know and the development gets simpler with this.
- Personally, I like how the application logs are not colored and the test results are colored when using scalatest with sbt, with mill, you get a single color only.

   
Give it a try!",1519622841.0
hywelbane,"Mill looks fantastic, and a real breath of fresh air after living with sbt.  One quick question that I could find an answer to in your post or the Mill docs: does Mill handle mixed scala/java builds?  I'm assuming it must, but couldn't find a definitive answer.",1519487312.0
LPTK,"Seems like a nice tool, but:

 * what's the advantage over, say CBT?

 * I'm not a big fan that [the command-line tools](http://www.lihaoyi.com/mill/index.html#command-line-tools)' syntax is different from the shell syntax. I understand it's because the shell is ammonite, but I think it would be worth it to unify the two syntaxes (otherwise it's one more thing to learn). For example, I find it surprising that I can do `mill describe foo.compile` but not `echo ""describe foo.compile"" | mill`. Like for SBT, people will probably spend most of their time in the shell anyway, so what's the point of the special command-line tool syntax?

Some typos:

> While of these snippets are trivially understandable

Missing ""most""?

> It's output will be 

> [...]

> learning from it's mistakes

`it's` -> `its`",1519494758.0
mdedetrich,"The support for custom build matrix's is perfect and its the exact issue that I experience with my scalajson library (see https://github.com/mdedetrich/scalajson/issues/34 and https://github.com/portable-scala/sbt-crossproject/issues/47)

Unfortunately I am forced to use SBT due to this library being part of the Scala Platform, otherwise I would definitely try it out (I think the main thing missing from the list is an equivalent to sbt-jmh or sbt-scalameter and scala-native support)",1519575649.0
duhace,"I might use this for a couple of my projects. Unfortunately, some require sbt-native-packager to use jdkPackager, but otherwise it might be a nice replacement for some of my simpler builds.",1519451249.0
jabbalaci,"How could I use Mill with a project that was created with IntelliJ IDEA? Here is a screenshot: https://i.imgur.com/dILwvyT.png . The author of Mill provides an example but that has a different project layout. For example, how to run the project with Mill from the command line? Thanks.",1519497171.0
AlexITC,"Great post! Now I have enough reasons to give Mill a try for my next library, thanks.",1519500992.0
RowdyIsCool,"I'm starting a project soon and am looking at using playframework as a RESTful backend.  I will also be running machine learning inferences using JPMML and/or deeplearning4j.  Potentially in the future, we might need to build Spark streaming/job processes as well.

/u/lihaoyi or any other developers on the team: I understand this might be a broad question, but do you see any roadblocks to using Mill over sbt in this environment?

If we do go down the Mill route, I would love to contribute to Mill as we use it!",1519616474.0
eaayoata,"I am having an issue when trying to add unmanaged jars to my project..

Has anyone seen this error: 

    build.sc:19: type mismatch;

     found   : mill.util.Loose.Agg[_1] where type _1 <: ammonite.ops.Path
 
    required: mill.util.Loose.Agg[mill.eval.PathRef]
    
    
    if (!ammonite.ops.exists(millSourcePath / ""lib"")) Agg()
    
    ^

    build.sc:18: `T.command` definitions must have 1 parameter list
  
    def unmanagedClasspath = T{
      ^

    Compilation Failed


This is how my   unmanagedClasspath looks like (from the docs):


    def unmanagedClasspath = T{

    if (!ammonite.ops.exists(millSourcePath / ""lib"")) Agg()

    else Agg.from(ammonite.ops.ls(millSourcePath / ""lib""))
  
    }",1527931143.0
argv_minus_one,"Cool! A Scala build tool without all of sbt's problems, but also without CBT's ridiculous boilerplate.",1519494457.0
Mimshot,Is this a new feature or just hypothetical? I can't find anything on it in the docs. ,1519506791.0
notenoughstuff,Repost: https://www.reddit.com/r/scala/comments/7xyce9/towards_a_brighter_tooling_future_for_scala/.,1519495205.0
colindean,How does this compare to log4s?,1519431435.0
Apterygiformes,I literally just Had a curry haha,1519502498.0
Drisku11,"> We should be able to have these mappings gracefully fall back to no sorting at all.

That seems rather dangerous. If someone is passing you a sorting object, wouldn't they expect (i.e. depend on) you to sort it? As you add more sorting objects, you introduce more likelihood that you forget to implement one on a table (which already has other sortings) and cause runtime failures or worse in some other code.",1519402456.0
raghar,"Other way of achieving it, is to use implicit class with new operations you want to support. One of those operations might be sorting by Sorting ADT but also filtering (each filter would be a case class/object).

With that you can have API nicely reflecting your domain.",1519399166.0
pellets,"I wanted to read it, but got this from sophos:

    Access has been blocked as the threat C2/Virut-A has been found on this website.",1519415924.0
Isvara,"I've never used Shapeless. I've never found a reason to use it, because I've no idea how to apply it. What are some good resources from that perspective?",1520255654.0
raghar,"While this is nice exercise to the reader, for actual coding you might want to install [slickless](https://github.com/underscoreio/slickless) which does something similar with a different syntax:

    def * = (id :: name :: age :: HNil).mappedWith(Generic[Person])

DB insert is actually the only part when you do not have ID for everything else do, so IMHO it's better to just split the representations and:

    persons.map(p => (p.name, p.age)) += insertTupleOrSimilar

BTW - it might be considered a bad taste/antipattern but if id is NOT NULL and auto incremental then:

    persons += person.copy(id = 0)

Slick (at least on Postgres) will fill that id with default value. In such case there is even less reason to bother with wrappers. Still on domain level I would prefer to have explicitly case class Person and case class NewPerson - the later would be converted to Person with missing values filled with defaults.",1519396691.0
naftoligug,"Curious, why is it on the mailchi.mp domain?",1519396318.0
billy_tables,"""Scala is still a pioneer""?",1519327230.0
PoseidonInChains,Nice read. Thanks for posting it. I really like how relaxed and down-to-earth Martin comes across.,1519337393.0
joshlemer,"You can ask any question like this in the bi-weekly ""Ask Anything and Discussion threads"" which are usually stickied at the top of this subreddit. [Here](https://www.reddit.com/r/scala/comments/7ym8w1/fortnightly_scala_ask_anything_and_discussion/) is the current one.

You can also ask in the official gitter channel (see sidebar), the official Scala User Forum (again see sidebar) and while I haven't used it, [the Code Review Stack Exchange](https://codereview.stackexchange.com/) might be what you're looking for.",1519323465.0
noel,"In addition to the suggestions made by /u/joshlemer, Underscore have a [Gitter channel](https://gitter.im/underscoreio/scala) where you can (and have!) post your questions. It isn't that active so you might have to wait a little while for an answer. You can also email the authors directly. I'm fairly sure their email addresses are in the book.",1519332106.0
notenoughstuff,"GUESSING:

(I have an unfair advantage since I have worked a little with parsers and compilers before. On that note, I can strongly recommend at least the first 14 chapters of ""Types and Programming Languages""; it is a really great book).

    val a = 1

    implicit class RichInt(val x: Int) { 
      def s: Int = {
        println(s""got x = $x"")
        2
      }
    }

    /*
    Expression | Print      | Returns
    -----------|------------|---------
    -(1.s)     | got x = 1  | -2
    -(a.s)     | got x = 1  | -2
    -a.s       | got x = 1  | -2
    -1.s       | got x = -1 | 2
    */

.

- 1.1: ""1"" is parsed as literal integer 1.
- 1.2: Same as 1.1.
- 1.3: In ""-a.s"" the method call with dot has higher precedence. 
- 1.4: ""-1.s"" is parsed as literal integer ""-1"" and then the method is called on that.

.

    implicit class RichInt2(val x: Int) { 
      def s: String = {
        println(s""got x = $x"")
        s""returning x = $x""
      }
    }

    /*
    Expression | Compiles | Print      | Returns
    -----------|----------|------------|---------
    -(1.s)     | No       | ???        | ???
    -(a.s)     | No       | ???        | ???
    -a.s       | No       | ???        | ???
    -1.s       | Yes      | got x = -1 | ""returning x = -1""
    */

.

- 2.1: Parsing is same as the former similar expression 1.1, but the `String` type does not have the `-` operator method AFAIK without checking.
- 2.2: Same as 2.1.
- 2.3: Similarly parsed and precedence as 1.3, but the same issue as in 2.1.
- 2.4: Similarly parsed and precedence as 1.4. Does compile.

On a side note, parsing ""-1"" as integer literal 1 and then a method call to negate it can have other negative consequences. I recall Kotlin parsing it in this direction. I personally prefer it either Scala's way of parsing or a similar way; I vaguely recall there are some further details and some extra checks possible. But it is not something I have thought about a lot.

AFTER GUESSING:

Yes, I got it right :-).

EDIT: On a more appropriate note regarding book references, regarding parsing this book is probably much more relevant: ""Introduction to Automata Theory, Languages, and Computation"", and I have had good experiences with it.

EDIT2: Regarding why I prefer Scala's general way of parsing this over how Kotlin would parse it, consider how the string representing the most negative 64-bit integer is parsed using the two different ways (remember to append ""L"" whether in Java, Scala or Kotlin). For some reason, it still works in Kotlin for 32-bit integers, but it fails in Kotlin for 64-bit integers.",1519237945.0
,"I'm gonna go for the suspiciously simple answer: the first one prints ""got x = 1"" and returns 2 every time, and second one prints ""got x = 1"" and returns ""returning x = 1"" every time.

What's the catch?",1519232893.0
Storini,"Great work by the Underscore guys. I found this work much more engaging than the ""Red"" book; the exercises interwoven in the eBook are perfectly integrated with the content and really help in grasping the ideas.",1519243932.0
ebruchez,"I am not done reading it but I can say that so far (page 150) ""Scala with Cats"" contains the best writing on these topics I have ever read. Kudos to the authors for clear and engaging writing and for making just the right amount of assumptions necessary to the reader.",1519232874.0
Shinosha,"Sooo, where can I buy a physical copy ?",1519225210.0
teknocide,"Great post! It feels as if I've skimmed the book by reading through the review and I'm hungry for more.

It's almost unbelievable that these books are available for free. much appreciation to underscore.io!",1519244275.0
jo_wil,"IMO underscores books are some of the best written programming books I have ever read! With the combination of clear but detailed explanations and relevant examples/exercises mixed in to the text they do a great job of teaching Scala, cats, etc. ",1519236066.0
thors_secret,"""Beyond the preliminary stuff of getting cats (weirdly enough squirrelled away in the preface)""

...I see what you did there.",1519265231.0
gbersac,"Read it, did exercises few month ago. Good stuff, I approve this book !",1519647288.0
parc,Nicely done!,1519220986.0
joshlemer,"Yep! It's called the [Kind Projector](https://github.com/non/kind-projector) and here you would basically use it like:  

    apply[T[C, ?], A, B]

",1519187251.0
blyxa,"Figured out what is going on

    var data:String = null

Get converted into two steps 

1. variable declaration
2. value assignment

In this case value assignment happens twice.

1. when Parents constructor calls initData
2. when Weird constructor happens(assigns as null)

",1519172130.0
m50d,"The same thing happens in almost every OO language: the way `extends` is implemented is that constructing a new `Weird` will run `Parent`'s constructor first, and then run `Weird`'s constructor; the part that's most likely to be confusing is that the constructor is less separated from the rest of the class in Scala than in other languages.

So on construction the following lines will run in this order:

    initData()
    val myData = getData()
    System.out.println(s""myData $myData"")
    var data:String = null

`initData()` will set `data` to a value and the call to `getData()` will return that value, but then `data` will be set to `null` before construction finishes.

`var data: String = _` was probably what you wanted?",1519214341.0
emilypii,Great proposal! Thanks Sam!,1519135880.0
MasGui,"**TL;DR:** This is a proposal to help blind and partially-sighted developers.

For example, the following code

    def foo[A: Wibble](s: String, b: Wobble[A]): Int = ...

may be read by a text-to-speech engine, such as espeak, as

    def space foo open square bracket capital s colon space
    wibble close square bracket open bracket a colon space
    string comma space b colon space wobble open square bracket
    capital a close square bracket close bracket colon
    space Int space equals space ...

Indeed such a description is necessary to enable precision editing.

However, the following would convey the same information more efficiently:

    def foo
    type A, context Wibble
    from s String and b Wobble for A
    to Int",1519128363.0
naftoligug,"I'm assuming this is based on the feedback of actual blind people?

Years ago there was a very active member of the Scala community that was blind. I don't recall him ever complaining about Scala's syntax. (I did find an email from 2010 where he complained that yourkit wasn't accessible, in contrast.)",1519144895.0
,[deleted],1519124726.0
Sarwen,"Type classes and OOP sub typing are both ad-hoc pomymorphism. It actually opposes to parametric polymorphism. The distinction is whether or not a polymorphic function (value) is agnostic on the type parameter. If the function treats its type parameter as a black box, doing exactly the same regardless of the actual value of the type parameter, then it is parametric. For example `List.length` is parametric, you don't need to know the type of the elements inside the list to compute its size.

On the contrary,  if the function needs to perform some operations based on what the type is, then it is ad-hoc. For example `List.sum`. You can sum lots of things: integers, floats, double, big decimals, matrices, etc. But summing list of integers is not the exact same thing as summing a list of matrices. The addition operation is different for each type, so this is ad-hoc.

If you have not already read the paper ""Theorems for free"", I recommand doing so. It clarifies this a lot!",1519120649.0
mr___,"Tl;dr: sampling the clock when you start an async http operation, and then when it yields the response object, can lead to inaccurate timing results if the entire stream has yet to be read",1519052827.0
__gyre__,Its probably better to use the monitoring already built in to your reverse proxy in production. Nginx-VTS or HaProxy both can do this more efficiently.,1519058258.0
acjohnson55,"I had to make a change to this so that it wouldn't fail when wrapping a web socket endpoint


    def aroundRequest[T](onRequest: RequestContext => Try[RouteResult] => Unit)(implicit ec: ExecutionContext): Directive0 = {
      extractRequestContext.flatMap { ctx =>
        val onDone = onRequest(ctx)
        mapRouteResult {
          case c @ Complete(response) =>
            Complete(response.mapEntity { entity =>
              if (entity.isKnownEmpty()) {
                // On an empty entity, `transformDataBytes` unsets `isKnownEmpty`.
                // Call onDone right away, since there's no significant amount of
                // data to send, anyway.
                onDone(Success(c))
                entity
              } else {
                entity.transformDataBytes(Flow[ByteString].watchTermination() {
                  case (m, f) =>
                    f.map(_ => c).onComplete(onDone)
                    m
                })
              }
            })
          case r: Rejected =>
            onDone(Success(r))
            r
        }
      }
    }",1519330499.0
joshlemer,Removed for being unrelated to Scala and/or spam.,1519049549.0
know_not_much,"I may be asked to implement a geospatial application in Scala pretty soon. I know there are bunch of databases and libraries which provide this functionality. which one is the best for the Scala ecosystem?

My company already uses Cassandra so if I can build a geospatial solution around that then it will be awesome. We also use MySQL but its usually a pain because it gets hammered pretty fast.",1519779515.0
fromscalatohaskell,"Does anyone find F-bounded type super useful? I don't know if Im doing something wrong, but very often I find the need for F bounded types... could it be with relation that current project does not use typeclasses, as a way to get back some reusability with traits?",1519998514.0
IcedDante,"Hello Scalars- I'm a developer that is very comfortable with functional programming in a Java 8 context. I have an assignment coming up that requires functional programming with Scala. Because I have never used Scala before I need to find the right venue to learn about it. I'm considering a few different resoures: there's a Functional Programming class on Coursera, There's the book ""Functional and Reactive Domain Modeling"" and another book ""Functional Programming in Scala"" by Paul Chiusano.

I'm trying to avoid something that might be too basic for a senior developer and just sort of cut to the meat of things. Do you all have any recommendations?",1519046069.0
roelofwobben,"Im doing the Essentails Scala book by underscore.io  and I wonder if i did this exercise well : 

    Write companion objects for Director and Film as follows:

    • the Director companion object should contain:
    – an apply method that accepts the same parameters as the constructor of the class and returns a
    new Director;
    – a method older that accepts two Directors and returns the oldest of the two

    • the Film companion object should contain:
     – an apply method that accepts the same parameters as the constructor of the class and returns a
    new Film;
    – a method highestRating that accepts two Films and returns the highest imdbRating of the
    two;
    – a method oldestDirectorAtTheTime that accepts two Films and returns the Director who
    was oldest at the respecঞve ঞme of filming.

this is my code :  

    class Director(val firstName : String,val lastName : String, val yearOfBirth : Int){}

    object Director{

      def name(director : Director):String = { director.firstName + "" "" + director.lastName}

       def apply(firstName : String, lastName : String, yearofBirth: Int) = new Director(firstName, lastName, yearofBirth)

      def older(director1 : Director, director2 : Director) : Director =
    if (director1.yearOfBirth <  director2.yearOfBirth) director1 else director2
    }

    class Film(val name : String, val yearOfRelease : Int, val idbmRating : Double, val director : Director ){}

    object Film {

      def DirectorsAge(film : Film) = film.yearOfRelease - film.director.yearOfBirth

      def isDirectedBy(possibleDirector : Director, film : Film) = possibleDirector == film.director

      def copy(film : Film) (name: String =  film.name, yearOfRelease : Int = film.yearOfRelease, imdbRating : Double = film.idbmRating., director: Director = film.director) =
    new Film(name, yearOfRelease, imdbRating, director)

      def toString(film: Film): String = s""Name : ${film.name}, yearofRelease : ${film.yearOfRelease}, imdbrating : ${film.idbmRating}, director: ${film.director}""

      def apply(name : String, yearofRelease : Int, idbmRating: Double, director: Director) =
    new Film(name, yearofRelease, idbmRating, director)

      def highestRating(film1 : Film, film2 : Film):Film = if (film1.idbmRating < film2.idbmRating) film2 else film1

      def oldestDirectorAtTheTime(film : Film, director1: Director, director2: Director): Director = if (film.yearOfRelease - director1.yearOfBirth > film.yearOfRelease - director2.yearOfBirth) director1 else director2

    }

Any improvements for this code. Things like case class are explained in the next chapter so im not allowed to use them ",1519494104.0
emilypii,This was a fantastic post. 10/10. I'm glad someone else is using the `counit` terminology to drive home the duality perspective.,1518990125.0
tobbe2064,"Hi, thanks a lot for this post. I've also been struggling with comonads the same way you did but I wasn't thrifty enough to do anything about it. Thanks to your clear presentation I don't have to. 

One question, did you find any adjunctions that gives us streams?",1518980460.0
HighMaxFX,"My godness, I think I'll never master FP in my remaining lifespan. So much to learn...",1519049311.0
eli_jordan,The link should be https://eli-jordan.github.io/2018/02/16/life-is-a-comonad/,1518957123.0
jackie_pwn_asses,Can't attest to its accuracy since I'm still learning this stuff but this was really good/helpful to me. ,1518965990.0
Ironballs,`F[A] => A` is the signature of `counit`. The type signature of the Observer pattern is also `F[A] => A`. Interestingly the observer pattern — streams — is an excellent alternative to dependency injection in most cases. Thanks to comonads DI is essentially anti-pattern in Scala!,1519024250.0
janstenpickle,"Excellent blog, thanks very much for sharing!",1519028833.0
colindean,Is anybody yet working on a Play build module for this?,1518981984.0
TJSomething,Is it weird that I think this looks like a more object-oriented Gulp?,1518985402.0
chetanbhasin,"I love this project. Also, like always, a very nice blog post.

I have a few questions though.

1. Why, unlike other ""standard"" tools that put the output in `target`, Mill puts them in the `out` directory? Don't you think it would be nicer to use the same standards?

2. Does this have anything to do with [this](http://www.scala-lang.org/blog/2018/02/14/tooling.html) announcement?

3. Is there any documentation for writing plugins/extensions or using the existing ones from SBT/Maven/Gradle etc.?

4. How can others help/contribute to this project?

5. I see that assembly comes default with mill. That's great! However, does it have support for things like shading and dependency overriding and selection in cases of conflicts?

I would love to see where this is going.",1519204697.0
gbersac,"Looks interesting, but I can't see how it could succeed without a sbt interop.",1519030696.0
jabbalaci,"Using this, how to add the Main-Class line in the manifest file?",1519037303.0
ghisvail,Sounds very sensible and quite straightforward from the content of this blog post. Looking forward to seeing it in action within a more realistic project.,1519124230.0
porl,Looks a lot more sane to me. But I'm only a novice so I wouldn't notice any shortcomings etc.,1519004140.0
sake_92,Nobody loves Windows these days... :'(,1519051401.0
vivri,"My vote, at this point, would be for a ""SaneBT"", which would use sbt as its target. The reason: plugins.",1519072117.0
,"I thought it might be useful to put forth a few http4s code examples for those struggling with the http4s docs:

https://github.com/objektwerks/typelevel/blob/master/src/main/scala/objektwerks/app/NowHttp4sApp.scala

https://github.com/objektwerks/typelevel/blob/master/src/test/scala/objektwerks/http4s/Http4sTest.scala

I worked through these examples the hard way, verifying some of the more important http4s docs and making the code my own. See the readme.md for sbt details.
",1518825461.0
Apterygiformes,be careful!,1518814405.0
ivanovich_ivan,About time that this was recognized as a serious problem. Glad that there will be effort put into this. ,1518784136.0
argv_minus_one,Conspicuously absent from said future: a good build system.,1518793380.0
RandomName8,"> waiting another decade for a new tooling ecosystem to be invented is not an option.

Of course it's not, but I don't see anything else happening. Today's scala's tooling support is practically the same it was back in 2010, that's how little it has improved in 8 years.

If they manage to deliver something in a 1 year time frame, color me impressed, more than that and I'm sure they will lose focus, interest, and it'll become just another botched project.",1518785311.0
Daenyth,"Actors are super low level and usually cause way more pain than the solve. 

Make sure you're using case classes for the actor messages. Declare the message type in the same file of the actor that receives them.

Don't put logic in the actor, put it in an object that the actor manages. This helps you write tests easier",1518780276.0
havok2191,I like to use Akka Streams whenever I can if you don't deal with state and you are just doing data transformation and integration with other systems. I tend to use Actors when trying to capture some state-machine-like behavior. Have you considered using Typed Actors? Those look very promising. Actors + Cluster Sharding are a great tool when very strong consistency requirements are in place but to be honest they can be a bit overkill otherwise. ,1518891985.0
emilypii,">Akka toolkit on a large project without loosing their mind?

No, that's why people avoid it.

>For those who use Akka a lot, which is the best way to manage a large Akka project along with the documentation?

Large Akka projects are impossible to manage. Small projects, however, can have the Akka portion quarantined as much as possible. This is the only way to gaurantee maintainability.

>Actors are not very transparent when it comes to managing async calls. If there are futures in the actors, you cannot really set the individual timeouts for them

Every one of your points are correct, and very large headaches for people using Akka. Message when you find a solution. 

>I just being too picky?

No, this is why `Monix`, and `Scalaz#Task` exist. Actors are incredibly hard to maintain and do not scale well (in terms of codebase complexity).

>I was looking for advice on how others are doing it.

I stay away from using it, as I rarely have a case warranting bidirectional communication, and I stick with `IO`, the `Async` monad, or `Task`. If i need backpressure, we either defer to `Monix`, whose `Task`s have backpressure support, or don't worry about it. So far, for highly performant async services serving millions concurrently, we really haven't needed Akka. Especially not untyped actors. I would never let untyped actors into my codebase.",1518789953.0
MasGui,"Take a look at [Netflix/vizceral](https://github.com/Netflix/vizceral). Lightbend has a product that does traffic visualization at runtime with vizceral (https://developer.lightbend.com/blog/2017-11-07-cinnamon-2-6-with-vizceral-support/index.html).

You can also use scalameta to extract some information statically (actors and messages) and try to construct a graph by reverse engineering.",1518875684.0
parc,"1: yep. An ActorRef is just a generic actor reference. In the past I’ve used HOFs to get a semblance of safety that I’m asking for the right actor. 

2: ActorTyped should hep here. In absence of that, you can either setup a “WTF?” Message or understand that you’re not supposed to be introducing that dependency. In the past I’ve found that requiring a certain message type be received by an actor is a sign that I need to rethink how my message flow is designed (look at the worker registration pattern in the docs). 

3: accomplishing this is no different than how it would be done in any other code where you want to shadow an existing implicit.

Edit: I’m on mobile. ",1518791202.0
,"You can use a typeclass to represent a type-level function. Shapeless does this all over the place. For example

    @annotation.implicitNotFound(""Don't know how to make a new thing from ${A} and ${B}"")
    trait Make[A, B] {
      type Out
      def make: Out
    }
    object Make {
      // quick way to construct an instance
      def apply[A, B] = new Partial[A, B]
      class Partial[A, B] {
        def apply[O](o: O) =
          new Make[A, B] {
            type Out = O
            def make = o
          }
      }
    }

We can use this to define a generic `make` method.

    def make[A, B](implicit ev: Make[A, B]): ev.Out =
      ev.make

And define some instances

    implicit val m1 = Make[String, Int](true)
    implicit val m2 = Make[String, Object](1.23f)

And try it!

    scala> make[String,Int]
    res8: m1.Out = true

    scala> make[String,Object]
    res9: m2.Out = 1.23

    scala> implicitly[m2.Out =:= Float] // types are equal
    res10: m2.Out =:= Float = <function1>

    scala> make[Object,Int]
    <console>:21: error: Don't know how to make a new thing from Object and Int
          make[Object,Int]
              ^
",1518725519.0
pheymann,"One approach could be to use type classes together with `HList`.

    trait PropabilityDistribution { ... }
    ...
    trait Rule[H <: HList] {
      type Out <: PropabilityDistribution

      def prop: Out
    }

    implicit val rV = new Rule[T :: U :: HNil] { ... }
    implicit val rW = new Rule[T :: V :: HNil] { ... }
    ...

    def resolve[H <: HList](implicit rule: Rule[H]): rule.Out = rule.prop

This at least works for fixed, ordered list and Scala is able to tell you if it cannot find any `Rule` that matches the input.

EDIT 1:
You could also just use tuples if you don't want to add shapeless to your project:

    trait Rule[T] { ... }

    implicit val rV = new Rule[(T, U)] { ... }

    def resolve[T](implicit rule: Rule[T]): rule.Out = rule.prop",1518725575.0
m50d,"Your code works fine for me - how are you trying to run it? If you want to be able to do this in the REPL you have to use `:paste` or put all the lines on one line with `;`s, since otherwise it will try to run each line one at a time.",1518716748.0
vtscala,"The code looks fine, and works ok in my IDE (Eclipse/ScalaIDE).  I'm not sure how you're running it, but I wonder if the name `Pair` is clashing with the deprecated `scala.Predef.Pair` and causing problems.  (Note that everything in `scala.Predef` is in scope by default.)",1518721815.0
vchunduru93,"Yep, I'm pretty sure `Pair` was conflicting with `scala.Predef.Pair`--when I switch it to `MyPair`, it works! Thanks guys!",1518745620.0
teknocide,"Source info from  http://www.scalatest.org/user_guide/using_selenium and http://doc.scalatest.org/3.0.0/index.html#org.scalatest.selenium.WebBrowser

val eles: IndexedSeq[Element] = findAll(cssSelector("".className li""))",1518706043.0
sciss_,"> My best practice is creating an open-source project in a monorepo, that is a single GitHub project that contains several sub modules. For example, twitter/util is a famous monorepo example in Scala.

I think that's a really _bad_ advice. From a user perspective, you get presented with a monster and don't even know where to start. That's why I will actually never look at a repo such as twitter/util. From a developer perspective, yes, updating multiple interdependent library repos can be painful, but you can then work on each library at its own pace, release minor updates etc. and keep the specific focus of each module in mind, have individual bug tracker, read-me etc.",1518719067.0
m50d,"I don't see a monorepo as a good idea; what I prefer is (with maven) setting versions of library dependencies in an organisational parent pom. That way projects can use ""FooCorp Parent 3.4"" and get a known-working set of versions for the core libraries we use everywhere, but each project can do the upgrade at its own pace particularly for big changes like Scala version upgrades (and EOLed projects can stay on ""FooCorp Parent 3.2"" or whatever), and if a given project really needs to override a particular library version (carefully) then it can.

I assume other build systems have ways to achieve the same thing.",1518694073.0
kod,"https://nerdland.net/2010/06/code-mass-noun-versus-count-noun/

https://english.stackexchange.com/questions/20455/is-it-wrong-to-use-the-word-codes-in-a-programming-context",1518903019.0
beleaguered_penguin,"does `Witness` use `Poly` anywhere? There's a similar problem with `Poly`, where associativity seems to be broken and you must use brackets as you have.

https://www.reddit.com/r/scala/comments/774byb/composing_shapeless_polymorphic_functions_over/

Other than the problem looking similar, I'm not familiar with `Witness` so can't help much.",1518683224.0
pheymann,"A colleague mine found the source of this issue:

    @ desugar { ""hello"" :>: ""world"" :>: Do }
    res23: Desugared = {
      val x$2 = ""hello"";
      ({
        val x$1 = ""world"";
        ammonite.$sess.cmd4.Do.:>:[this.T](shapeless.Witness.mkWitness[x$1.type](x$1.asInstanceOf[x$1.type]))
      }).:>:[this.T](shapeless.Witness.mkWitness[x$2.type](x$2.asInstanceOf[x$2.type]))
    }

    @ desugar { Do.:>:(""world"").:>:(""world"") }
    res24: Desugared = ammonite.$sess.cmd4.Do.:>:[this.T](shapeless.Witness.mkWitness[String(""world"")](""world"")).:>:[this.T](shapeless.Witness.mkWitness[String(""world"")](""world""))

It seems like a side effect of syntactic sugar resolution in Scala.",1518687967.0
pheymann,"A colleague of mine found the source of this issue:

    @ desugar { ""hello"" :>: ""world"" :>: Do }
    res23: Desugared = {
      val x$2 = ""hello"";
      ({
        val x$1 = ""world"";
        ammonite.$sess.cmd4.Do.:>:[this.T](shapeless.Witness.mkWitness[x$1.type](x$1.asInstanceOf[x$1.type]))
      }).:>:[this.T](shapeless.Witness.mkWitness[x$2.type](x$2.asInstanceOf[x$2.type]))
    }

    @ desugar { Do.:>:(""world"").:>:(""world"") }
    res24: Desugared = ammonite.$sess.cmd4.Do.:>:[this.T](shapeless.Witness.mkWitness[String(""world"")](""world"")).:>:[this.T](shapeless.Witness.mkWitness[String(""world"")](""world""))

It seems like a side effect of syntactic sugar resolution in Scala.",1518687991.0
DisruptiveHarbinger,"Is `repository` a mutable Map?

I believe you're trying to do something like that:

    def update(postId: UUID, newViews: Long) = {
      repository.get(postId) match {
        case None => Left(""Unknown postId"")
        case Some(p) =>
          val updated = p.copy(views = p.views + newViews)
          repository.update(postId, updated)
          Right(updated)
      }
    }",1518628250.0
AlexITC,"As someone else said, you could use pattern matching to transform the `Option` into an `Either`, another approach is to use the `Option.fold` method.  
  
> updatedPost.foreach(p => repository.update(postId, p))

This is what I would improve, you are discarding the result from the repository, as someone else said, if you are using SQL, there is a syntax to return the modified value.  
This could also probably thrown exceptions where you might want to differentiate between errors and failures.
Last, this is not safe on concurrent updates because you are reading the whole object, and then, write the whole new object (if there are changes after the read, you'll lost them).  
  
If you like, take a look to these examples where I do something similar: [UserPostgresDataHandler#setPreferences](https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/data/anorm/UserPostgresDataHandler.scala#L71) and [UserPostgresDAO#setPreferences](https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/data/anorm/dao/UserPostgresDAO.scala#L126), the main difference could be that I use scalactic `Good or Bad` which is quite similar to `Either`.  
  
**EDIT**, another thing that is important (in my opinion), is to avoid plain strings as the error and use ADTs instead, when you start testing that code, it would be far simpler to verify if certain class is returned instead of matching a text.",1518633525.0
Holothuroid,"You probably want `Option[Post]`, not `Optional`; `p.copy`not `s.copy`.

Otherwise it's readable, it probably gets the job done. No problem.",1518627533.0
Daenyth,"Scala wise it's fine. You might want to use Future or an IO type like cats-effect IO to wrap up the side effect.

The bigger issue is that you have a race condition from doing read-modify-set",1518713969.0
Shinosha,"On a side note, your service method looks like a repository one. I don't know your database but in SQL this can probably be handled straight away with a UPDATE ... WHERE ... RETURNING clause or something. Just return a Left if RETURNING returned nothing.",1518628706.0
Scf37,"    def updatePost1(postId: UUID, newViews: Long): Either[String, PostInfo] = {
      repository.get(postId) match {
  
        case Some(post) =>
          val updatedPost = post.copy(views = post.views + newViews)
          repository.update(postId, updatedPost)
          Right(PostInfo(postId, updatedPost.views))
  
        case None => Left(""Unknown postId"")
      }
    }
  
    def updatePost2(postId: UUID, newViews: Long): Either[String, PostInfo] = {
      val post = repository.get(postId).getOrElse(return Left(""unknown postId"")) // be careful of return semantics in scala
  
      val updatedPost = post.copy(views = post.views + newViews)
      repository.update(postId, updatedPost)
      Right(PostInfo(postId, updatedPost.views))
    }
  
    def updatePost3(postId: UUID, newViews: Long): Either[String, PostInfo] = {
      repository.get(postId).map { post =>
        
        val updatedPost = post.copy(views = post.views + newViews)
        repository.update(postId, updatedPost)
        Right(PostInfo(postId, updatedPost.views))
      }.getOrElse(Left(""Unknown postId""))
    }

Also, it is better to use separate id types for every entity type, e.g. Post#Id

",1518773685.0
simon_o,Anyone in favor of this who can make the case for it? I have a hard time seeing the point.,1518611833.0
simon_o,"Interesting article!

> CanBuildFrom was a clever solution to an exagerated problem, but you'll no longer have to worry about it

I agree that it was a dead end, but it only exacerbated an underlying design problem, it didn't cause it:

The requirement that every operation collection needs to immediately return a result of the same collection type  is a complete game-over for performance and re-usability of the API.

Rewriting the implementation along the same faulty design requirements cannot fix this.
People have spent years trying to address the fundamental performance issues of this design with macros, compiler plugins etc. without success.

Cherry-picking the `Seq` section to comment on:

I think both positions have valid arguments, although I'd position myself slightly on the ""pro"" side solely due to the need to have ""something"" that makes sure that e. g. immutable and mutable APIs don't drift apart.

Although if the only thing that some API needs to do is iterate it, then I'd opt for taking an `Iterator` as an argument.

The worst problem about `Seq` is not `Seq` itself, but `Stream`:

- at least 60% of all the code ever written that accepts a `Seq` will horribly break when passed a `Stream`
- probably 80% of the code authors have never even considered the possibility of someone passing a `Stream` for a `Seq`
- 90% of the code has no tests to make sure `Stream` works

`Stream` should have been deprecated a long time ago. I really regret pushing for `LazyList` as a better name, because that made it look like this type was salvageable. It is not.",1518600218.0
LPTK,"Thanks for this thorough and excellent article, which makes us see both sides of the coin. There is a loud (at times vociferous?) minority who like to push the idea that type classes are the only way forward, but obviously the problem is more nuanced. For one thing, a full type class-based approach is not realistic as a replacement of the current collections, as it would surely break absolutely all the existing Scala code out there – whereas the new design (which is not perfect by any means) only breaks a subset of uses of the most advanced features.

I think you explained very well why the new design is still a worthy improvement over the old/current one. Hopefully the performance holds up.

I actually like the second `IteratorTypeClass` design you propose. I don't think ""but this will leak implementation details"" is a valid criticism of it: it is very easy to hide such details (making the `Pointer[T]` type effectively opaque). Anyway, as long as you program against the interface as a user, I don't see why there would be binary compatibility problems.

It is clear that the first `IteratorTypeClass` design you propose introduces some overhead (you have to allocate options and tuples), but saying it's not feasible because data structures like `Array[T]` have inefficient `tail` is misleading: in this case, we'd use a saner wrapper over `Array[T]` that simply stores the array along with an index into that array. This is not ""relying on `List`'s encoding"", but it's true that it may still be slower, and is why I prefer the other approach.
",1518604266.0
m50d,"> Wrong - if you're passing that type-class instance around, that's effectively a vtable so congratulations, you have an OOP encoding with extra garbage.

Explicit can be better than implicit. There's value in saying ""I am passing around a value of some unknown type and a dictionary of method implementations appropriate to that type"" as such, rather than hiding this behind a magical keyword (`extends`) that brings several other bits of baggage depending on what context you're doing it in. You might still prefer the conciseness of the OOP encoding, but there's a real tradeoff here. (I think it might be possible to get the best of both worlds by defining a language in which `extends` was lightweight syntactic sugar for composition, delegation, and typeclass implementation, but Scala isn't that language).

> Can you do that with Foldable / Traverse? No, you can't!

Why not?

> But this will leak implementation details - not bad for our Array instance, but what if we had some sort of self-balancing tree which you then changed to a HAMT. In that case our Pointer would be some sort of node with links to its neighbors, so is it wise exposing it like that?

If you don't want to expose it, don't; use an existential to say that the type exists but the user doesn't get to see what it is.

> How is Haskell's binary compatibility anyway? Does it even support dynamic linking?

I don't know, but the existential-based solution above should work fine in Scala without breaking binary compatibility - if a type is not accessible to client code then it'll necessarily be erased at runtime.",1518623722.0
SubMachineGhost,"Can someone please clarify this to me, why is OP not considering the Number class as a monoid? Number does expose both an identity and an operation members

    import scala.math.Numeric

    def sum[A](list: Seq[A])(implicit A: Numeric[A]): A =
      list.foldLeft(A.zero)(A.plus)

>> Note we are already using Numeric, which is a type class exposed by Scala's standard library. And it's actually not the best type class we could use, as what we'd need here is a Monoid, but ignore that.

",1518612437.0
swaggler,"CanBuildFrom was ""clever""? There does not exist a problem which CanBuildFrom solves, that cannot also be solved with a superior abstraction. This was noted over a decade ago. No such problem has ever successfully been put forward.

Scala cracks me up.",1518646092.0
LPTK,"> Another useful property is that literal values inherit from Singleton:

>     ""hello"": Singleton              // Works

>     ""hello"": Singleton with String  // Works

Actually, any value is a singleton value, by definition:

    (x:Any) => (x:Singleton) : Any => Singleton

I.e., `Singleton` is only useful for constraining types, not values.

Also, I hope that support for unions of literal types will be there eventually, so we can use them as lightweight enums:

	type MyEnum = ""On"" | ""Off"" | ""Unknown""
	def parse(str: String): Option[MyEnum] = 
	  str match { s: MyEnum => Some(s) case _ => None } // compiles isInstanceOf correctly
	def use(state: MyEnum) = x match { case ""On"" => } // warns about non-exhaustive pattern matching
	use(state = ""On"")
	use(state = ""Up"") // raises a type error here
",1518524909.0
bobotronic,Sbt for me. Still a couple things in projects that I plopped in because stack overflow said it would solve my problem. Sure enough it did but still not quite sure why.,1518534005.0
somethingconcon,"implicits...

I came to a team already in the process of a Rails -> Reactive transition. Nobody really knew what they were doing and I was tasked with a small internal API with some strong performance demands.  The way spray (and now akka-http) constructed their dsls for rounting and json just didn't make any sense to me.  I was really frustrated until I learned what implicits were and how awesome they can be.  For a long time I hated the idea of implicits and still feel there's too much room to fuck up unless your team have rules about using implicits.  Used correctly though they can help to create some seriously clean, understandable code.

Had the use of spray been a personal project there's no way I would have kept with it.  With Scala and the surrounding ecosystem there's so many little gotchas hidden in plain sight that make it not so great for new programmers.  I don't believe scala is an introductory CS level language.  As a relatively new programmer (back in my starting days) who had always dealt with scripting languages it took a few years of all that freedom to start realizing I needed something more controlled, and reasonable.  Moving to scala after working on a 10 yo rails app has been a dream.",1518534300.0
CremboC,"For me, at least initially, documentation was an abomination. The only issue is I can't tell if it's better now compared to 1~2 years ago or my 1~2 years of experience made me understand everything better!",1518515186.0
dtechnology,"Sbt is impenetrable for a beginner

Implicits are difficult to get",1518557716.0
Storini,"Trait initialization is a bit of a minefield: https://docs.scala-lang.org/tutorials/FAQ/initialization-order.html

Is this fixed in Dotty?",1518557862.0
LPTK,"I remember spending way too much time trying to make things work with type projections, only later fully understanding that objects were really modules and that you were meant to pass actual objects to root path-dependent types in (otherwise the type checker easily goes bonkers, sometimes for a good reason and sometimes not). In that sense, the language doesn't provide much guidance at all – but also it's also my fault, as I never liked reading TFM and always preferred to tinker.

Another thing is that for the longest time, the rules for the provenance of implicits have been mysterious and obscure to me, and I did not take the time to properly learn about it until recently; now I feel much more confident when defining type class instances and extension methods.",1518524217.0
enverest,"Type erasure and which one correct to use ClassTag, TypeTag or third one I don't remember now.


The Implicits were pretty simple for me.",1518613798.0
butterslime,"One thing that was tricky for me was the subtle difference between {} and ().

e.g. all the differences between 

    xs.map(x => whatever)

and 

    xs.map { x => whatever }

",1518631985.0
m50d,"I learn best through pair-programming with more experienced people. I can't really remember having any pains, but I learned Scala very gradually.",1518529682.0
jackie_pwn_asses,"I still don't understand `F[_]` as a return type. I understand higher kinded types just fine but I don't really understand:
     
    def foo(f: Option[_]): Option[_] = f

It seems like it means `Any` in this context. Is that all it is?",1518571026.0
Storini,"One surprise for Java developers moving to Scala is that **for** statements look superficially similar, however generated code can differ massively in run-time performance. A Scala **for** is syntactic sugar for a set of code transformations, and the result is not at all like a simple mutative loop. Efforts have been made to optimize common cases, but beware.",1518646034.0
jokasx,"I was really really confused about the multiple ways to declare and write functions, the differences between procedure syntax and the proper one with equals and then the similar types Function when assigning to vals that are actually a completely different thing... grrr. And sbt, that thing is completely impenetrable. Also lack of proper documentation and examples for things not in easy begginer mode and not in the max hard level. There's a huge gap for documentation. Also doesn't help that over the years it seems scala changed a lot and we still find pretty old information totally not relevant to current usage of scala. I started on scala 2.10 and quickly jumped on 2.11 so I have no idea of what it means when people talk about some changes related to older versions.",1518660044.0
acjohnson55,"I caught on to a lot of the basic language stuff pretty quickly but it took me lots of bikeshedding to develop the principles of organizing a large system I use today (when to use traits or classes, parameters or abstract members, etc etc etc).

Stack Overflow was immensely helpful for me in getting context to make better decisions and Gitter more recently has been useful.

On the bright side, I find the Scala has sort of a ""bumpy valley of success"", where the first instinct is pretty decent, and subsequent refactors just make things better and better.",1518671062.0
beep_dog,"I got it through the coursera courses. [Functional Programming with Scala](https://www.coursera.org/learn/progfun1) and the follow up something-something(reactive, I couldn't find it on coursera easily). There's now a 5 course thingy: https://www.coursera.org/specializations/scala

I learned it quite well from here, and then started using it as simply a better java. I stayed away from implicits, except when experimenting, or when they're used by well designed libraries (like the kinds lightbend publishes). From there I just did lots of experimenting, slowly pulling in more neat functional things.",1518707939.0
theamazingretardo,"i just started with scala this week. im ok with JAVA so i got alot out of this one video for the imperative and OO part of scala: https://m.youtube.com/watch?v=DzFt0YkZo8M

ive been doing project euler exercises since that. the syntax of the functional parts and some of the concepts look pretty alien tbh, ill try and see if i can get some lamdas working.. im taking over scala projects for my first assignments as a coder for work, so i expect a steep learning curve.",1518562062.0
DontKarmaMeBro,"* I still don't understand sbt
* I didn't understand for a long time what's up with how I can use () or {} interchangeably in some places but breaks in other places but it DOESNT BREAK BUT CHANGES SEMANTICS in other places
* I still don't understand the type system entirely tbh but my biggest pain was trying to figure out what the gosh darn heck is going on in the popup window in intellij when I look at the signature of something as basic as a Map",1518677948.0
kudah,"Nothing, I pretty much picked it up in a week. I had lots of trouble learning Java though.",1518773158.0
io_geekabyte,"* Too much Ambiguity and Heavy overloading of concepts/symbols. For example, the ""_"" looks like it could mean a thousand and one different things depending on the context it is used. ""=>"" could also be used with functions, but also to express self types or alias for ""this"". Another example is the overloading of `for` which is used for both sequencing monadic computation and also for looping. You also have () and {} which seems ambiguous and could be needed or optional or mean different things based on the context they are used.

* Deceptive in the feeling of familiarity it gives. Especially for someone with previous experience with Java. I feel this similarity is dangerously deceptive because as soon as you go a little deeper with Scala, you encounter syntax/concepts that do not just fit with your previous mental models, and then you get frustrated. I feel the initial idea (i think this is mostly not the case now) of positioning Scala as a better Java contributes to this deception.

* It functional aspect is not as explicit as its OOP aspects. For example, I never could deeply appreciate the `for comprehension` in Scala until I understood monads and `do notation` in Haskell. I also never really understood the whole seal trait pattern until I grokked the idea of ADT while learning Haskell. There are lot more instances of this, where particular FP concepts did not click until I learned it from another language that makes those FP concepts bare. I feel Scala makes it hard for someone not familiar to FP to be quickly exposed to the needed concepts. It feels it intentionally obfuscate its FP side and instead of making the concepts bare and obvious in its syntax, it leaves these FP concepts to be encoded using its other language features. This makes learning it harder.
 
* SBT! 

* Documentations are generally not helpful especially the ones on the Scala website and also libraries maintained by Lightbend -> (I am looking at you Play Framework and SBT). Most of the documentation has a dismissive tone; as if it is written for someone who already knows the topic, instead of it to be written with a beginner in mind.


>  how do you learn most effectively

It's ironic that I have to say first learning Haskell was maybe one of the most effective things I did that helped in making learning Scala less of a pain.",1519151340.0
dominodave,"Initially the hardest part about learning Scala was having to re-reverse my thought process, after spending a decade reversing it by having to learn C++/Java.  It was frustrating because I knew that I had been conditioned by programmers who acted more knowledgeable than they were.  What I wouldn't do to have had just one person around who could have whispered ""lisp"" in my ear.  When I started coding, which was a while ago, it was a lot like it is now, where there are 100:1 people who pretend to know what they are talking about, to the one person who actually knows, and in the case of functional programming, it's more like 10k:1, and then 100k:1 of people who are in opposition to it because it would require them to learn, so that's at least 109k extra pretenders trying to get in your way for no reason other than their own pride.

I saw this article a while back, and found it to be insightful:
[What are some of the negative aspects of using Scala](https://www.quora.com/What-are-some-of-the-negative-aspects-of-using-Scala)

People in general are so unwilling to learn, let alone admit it, and especially not when they are already a ""genious.""  Even in the article there are a lot of people commenting and unwilling to admit that it might be more complex than they are comfortable with, and instead talk about how it is ""formatted poorly,"" or leads to ""illegible"" code, which is nonsense, as a scala programmer, I find it easier to read concise albeit ""complex-looking"" code.

At least we have r/scala now!",1519176936.0
tobbe2064,"I should probably start by saying that I like Scala, but I've only used it for toy examples, come coursera courses, and as a overpowered calculator. I have tried to do some smaller/mid-size projects but never finished.

1. SBT, still don't know if there is any real accessible documentation for it or if ts secret knowledge held by some underground cabal

2. Structuring a project. Which folder / namespace structure to use

3. Typeclasses
",1519217337.0
amazedballer,"The one thing that really screwed me up learning Scala was the syntactical sugar.  I don't know why, but when I first looked at it, things like:

     def helloWorld(f: String => Int): Int = f(""42"") 

made absolutely no sense, because I was looking at the `=>` and trying to figure out what the operator was.   I didn't realize that `String => Int` was really chrome for `Function2[String, Int]`, I actually thought that `=>` was some kind of magic ""functionate"" that took an `f: String`.  I had the same problem with `(String -> Int)` vs `Tuple2[String, Int]` 

Once I realized that the variable was on the left and the type was on the right and putting parens would always make it clear, I went through a period of labelling everything `f: (String => Int)` or `f: (String -> Int)` just to be sure I was getting it right.  And I mentally label `=>` as ""produces"" in my head.

And now I'm okay reading higher kinded types and Shapeless stuff.  So it does get better.",1519668478.0
mslinn,"This is why I created ScalaCourses.com five years ago. I have worked with dozens of languages. Scala is the hardest. Scala is also one of my favorite languages.

It took years to get the course content right so students can travel a learning path built right through the tall mountain of capability that is Scala. getscala.com",1518578669.0
mrn1,Any idea if those books are worth it (both money and time)? Especially Programming Scala and Functional Thinking in top tier.,1518518844.0
AlexITC,"it's funny, I forget to share the link: https://www.meetup.com/Remote-Scala-Meetup/",1518478881.0
hazza192837465,"Its splitting on a regular expression, which is a way of representing specific patterns in a string. Capital w is any non word character (not a-z or 0-9) and the plus means to match continuously. So if you had abc$xyz it would split on the dollar, similarly for abc $$xyz it would split on tje double dollar.

Have a google of regular expressions, they're pretty easy to grasp if hard to master!",1518471701.0
,"This is the `split` method on `java.lang.String`, it's not a Scala thing. `\W` matches a non-word character, so you're basically yanking the words out.

    @ ""foo, bar    baz!"".split(""""""\W+"""""") 
    res0: Array[String] = Array(""foo"", ""bar"", ""baz"")

So this expression filters out non-empty strings (`.nonEmpty` would be better here) and then ""expands"" each one into its constituent words via `flatMap`, yielding a list of words.
",1518471505.0
blaze3k,"/u/youngflash aka /u/808hunna/ is using a referral/affiliate link, his entire post history is just spamming his referral link around which is against Humble/FCC rules. Also, he's using his alt /u/blazek_amdrt to try and shame people out of posting Humble charity links so that he gets more referral money. He got his other alt /u/13378/ banned for exactly this nonsense.",1518482356.0
GoldFat,"**Reported for referral link spam.**

https://www.reddit.com/user/UnkindTabore/submitted/

https://www.reddit.com/user/fegertsa/overview/

https://www.reddit.com/user/trukirukia/submitted/

https://www.reddit.com/user/buyuksd/submitted/",1518463523.0
sciss_,"I have been working on [a library](https://github.com/Sciss/Patterns/tree/try_keep_pat) inspired by [SuperCollider patterns](http://doc.sccode.org/Tutorials/A-Practical-Guide/PG_01_Introduction.html). You can think of patterns as immutable descriptors of iterators or streams. My aim is to integrate this with Mellite, a computer music environment I'm working on. Part of that deal is that I want patterns to be serialisable, and I want to avoid having to store closures, so I'm wrapping my head around ways to still implement `map`, `flatMap`, `sortWith` etc. kind of functionality.  This seems all to work, but recursive operations such as `foldLeft` have been very tough, and I still haven't finished `FoldLeft` in a workable manner.",1518719394.0
dxplq876,The final part of the Scala specialization on coursera,1518919304.0
meaty_and,"I've been playing w/ reactive streams for real-world use-cases. 

It's led me to go a bit overboard, writing my own io, config, etc utils on top of the usual suspects:

https://github.com/aaronp/agora

At the moment I'm using akka io to host REST service as a pub/sub lookup so I can distribute local reactivestreams publishers/subscribers.

The 'api' part of that is in support of a work-pulling exchange where workers/clients can find each other based on some matching criteria.

A lot of that is playground stuff to work to work through some libraries, as well as a means for people to say ""why don't you just use XYZ? That does that already but better!""

In my mind though a lot of this is relatively light-weight, so potentially easier to bring into things instead of e.g. kafka. Maybe",1518444381.0
io_geekabyte,"Working on a library to convert the Regional Internet Registries snapshots of the state of IP resources to JSON. https://github.com/ip-num-tools/rir-stats-json-converter. It uses the JSON Schema I defined here https://github.com/ip-num-tools/rir-statistics-exchange-schema

Main conversion functionality is done. Next thing would be to provide an Ammonite Script, and a REST API that can be used to perform this conversion, some documentation etc...and obviously more improvement and more tinkering around to learn concepts I am interested in :) ",1519131019.0
continuational,"I'm working on some more examples and documentation for [React4s](https://github.com/Ahnfelt/react4s). The library recently reached 0.9, and no incompatible changes are planned until after 1.0. There are no known bugs, I'd just like to gather some more feedback on 0.9 before I bump it to 1.0.",1519218348.0
joshlemer,"There's this one that started recently:  
https://corecursive.com/  
  
In more general I like Software Engineering Daily, and Software Engineering Radio. ",1518410875.0
softiniodotcom,"https://www.functionalgeekery.com 

occasionally covers scala. Overall a great podcast even when not about scala
",1518454674.0
HugDewey,"I haven't touched it in a while, but I enjoyed Udash: https://udash.io",1518393238.0
SilasNordgren,"Scala.js is an absolute gem, and it's super-easy to share code between server and client. There's been a few posts about using Scala.js on the frontend recently, so it seems I'm not the only one excited about using Scala on both frontend and backend.

Unfortunately, scalajs-react isn't very ergonomic, and there aren't any established Scala.js view libraries. I'm writing one - [Domino](https://github.com/scalacode/domino) - for declarative web UI rendering. I'm currently using it to write the frontend for a website, and it is solid like a rock - no bugs, no unexpected issues. Documentation is lacking, but the core idea is simple: generate HTML based on your state, tell Domino to render it to the DOM, and Domino will ensure that the DOM matches the tags you sent it. This is all implemented and working already.",1518425026.0
silentraquo,"That code you quoted is how writing React in Scala.js looks and feels.

That Scalajs React library is very powerful and type safe, even allowing you to use native React.js components (IIRC). Achieving such interop with a JS library that was not meant for Scala's type system is incredibly hard, and so the Scala.js interface to React is not very thin, bringing in its own concepts and methods. React.js itself has no Backend / BackendScope / JsCallback (duh) / renderPC / builder / build / etc.

I've worked a lot with both Scala and React.js (I mean separately, without Scala.js), and I don't like dealing with React code in Scala.js. The end code is not easy to read, and does not feel like good Scala or good React.

I suggest you look into native Scala.js reactive UI libraries instead of React.js wrappers. I'm writing my own – [Laminar](https://github.com/raquo/Laminar) – that you might want to consider if you don't mind using something so early stage.

I started my Scala.js explorations a while ago by writing a type safe interface to Cycle.js, another alternative to React, and I definitely understand how excruciatingly painful it is to wrestle Javascript's dynamically typed wildlife into a decent Scala API. Although I made it work I've abandoned that effort because it's just not worth it, IMHO. If you want the core of your application to work in a JS framework like React it is more productive to simply use JS.",1518423066.0
env0der,"I agree with your feelings about scalajs-react. Take a look at https://slinky.shadaj.me/ I've not tried it myself yet, but it looks less complex than scalajs-react.",1518523625.0
continuational,"I felt the same about the existing React wrappers for Scala, so I created a simpler alternative:

https://github.com/Ahnfelt/react4s

Perhaps that'll be more to your taste?",1519217896.0
JWooferZ,"Honestly: Go with either typescript or purescript. Scalajs is a labor of love from the community that you will always have to write your own wrappers to call js from, for anything nontrivial. I can't comment on production readyness, only on how cumbersome it can be to have to work on porting everything to it, when I personally have little to no motivation to write client-side code.

If you want pure FP, there's purescript as well.

Typescript in particular has massive industry backing. There's loads of applications for scala, I just am not sold on client side being one of them.",1518392950.0
emilypii,"`WSClient` operates on a different type of actor library - Akka Streams, as opposed to Akka (core). In order to use the Standalone, you need an `ActorMaterializer`, which drives the async nature of the client. `ActorMaterializer`s are additional structure that wrap an `ActorSystem` - the base abstraction that produces and manages standard Akka Actors. To instantiate the standalone, you need:

  
    implicit val as: ActorSystem = ActorSystem(""my-system"")
    
    // implicitly uses the actor system to construct the materializer
    implicit val mat: ActorMaterializer = ActorMaterializer()
    
    val client: WSClient = StandaloneAhcWSClient()

You can store these values in the class or (better) as lazily evaluated values in the companion object to your class. Alternatively, you can dependency inject all 3, and bind instances of each.",1518411318.0
know_not_much,"Create the actor implicit in as soon as you enter your code. and then pass it along as an implicit wherever its needed

    implicit val actor : ActorSystem = ActorSystem(""MyClient"")

This way the users of your MyClient will not have to know anything about the actor system",1518391527.0
IzzyWithAnIzze,Link is broken for me,1518283632.0
tomer-ben-david,"https://www.youtube.com/watch?v=i1Mhcu9aIHs . hopefully, youtube cooperates this time. :)",1518287913.0
jabbalaci,Very nice review. Is the presentation (the text file) available? I would like to study it in more detail.,1518562205.0
harrychin2,Excellent review,1518307516.0
dh44t,"""Marketing manager.""

Random phrases with a loosely connected and no real depth, not even a single code comparison ",1518450073.0
haimez,Cool.,1518227614.0
LPTK,"Why not compare apples with apples and show the difference between, say, the old and new `List` implementations, assuming no new optimizations have been applied?

In the presence of a JIT, I'd be careful making statements like ""_there is no reason for them to be slower since the execution path, when calling an operation, can be made exactly the same as in the old collections_"". I would need more to be convinced (realistic empirical evidence).",1518192307.0
austeritygirlone,How were those benchmarks obtained? To me they appear to be a bit jumpy.,1518191816.0
emilypii,"Good to know the devs at EPFL are willing to repeat historical mistakes over and over, despite community feedback. Again, we've arrived at Builders. Again, people say no. Again, they go ahead with it.",1518323223.0
TJSomething,I wonder if this enables stream fusion?,1518250271.0
jvican,"Can you check what I just said in this useful Scala Contributors ticket? I think you may find the ScalaBridge resources valuable.

https://contributors.scala-lang.org/t/total-beginner-to-programming-scala-what-would-you-suggest-to-get-them-started/450/25?u=jvican",1518195925.0
janstenpickle,"Scala exercises are always good: https://www.scala-exercises.org.

Also all the books accompanying the Underscore courses are now available as free ebooks https://underscore.io/training/.",1518217233.0
vitalijzad,"Try https://www.hackerrank.com/

Most developers learn imperative style Scala first, and some time after they learn functional style Scala. That is the main advantage of Scala: you can learn functional programming gradually.

Please, next time, use [this thread](https://www.reddit.com/r/scala/comments/7vedog/fortnightly_scala_ask_anything_and_discussion/)",1518178163.0
m50d,"What languages do you know already? Something like Atomic Scala is more of a from-scratch approach.

(The most important course on my own path to Scala was probably one based on [ML for the Working Programmer](https://www.cl.cam.ac.uk/~lp15/MLbook/pub-details.html), but it's not really fair to recommend learning another language before you can learn Scala).",1518184949.0
Milyardo,Why give up on the exercises and just ask for help on them here?,1518192056.0
Sir_sevenboo,"Check DR MARK LEWIS playlists : 

https://www.youtube.com/user/DrMarkCLewis

a way more gentle introduction to scala (you can also check his books)

also a small book called ""Scala for the impatient"" may also be a fast introduction to scala if you have prior knowledge of java.",1518263715.0
jtcwang,There's https://gitter.im/scala/scala if you need help. (Beginner questions are welcome),1518264137.0
naftoligug,Creative Scala https://gumroad.com/l/creative-scala,1518309808.0
MasGui,Try http://aperiodic.net/phil/scala/s-99/,1518179847.0
LPTK,"Unfortunately I don't have a good answer to you, but as a tip, instead of `a.tree.tpe.typeSymbol.toString.substring(6,symbolString.length)` you can just write `a.tree.tpe.typeSymbol.name.toString`.",1518171781.0
l26liu,T => R is a Function that takes an argument of type T and returns a result of type R,1518066695.0
non-private,"This converts a `JavaFunction` object into a Scala `Function` object to help use the twitter util in Java code. `T` and `R` are type parameters that can be any (or the same) type, say `Int => String`.",1518075339.0
dtechnology,"In addition to the other commenters, you shouldn't need this any more in Scala 2.12+

Scala 2.12 does the same thing as Java 8, where you can use something with a single method (SAM) in place for any function",1518087272.0
joshlemer,"It's simply the type of a function from T to R. It's an alias for Function1[T, R]",1518065789.0
GamingFelix,This would be amazing but yeah I haven't found anything like this either.,1518041350.0
JWooferZ,"So this:

    require(is != null, ""is should not be null"")

Defeats the purpose of `IO` because it will strictly throw an illegal argument exception. You're not suspending a side effect there, it will strictly throw on evaluation. i.e: `unzipFirst(null, null)` will throw eagerly. `require` is not encouraged in a functional style. That said, it begs the question why you're null checking at all instead of using `Option`, which is what it's for.

> is the correct approach to wrap the creation of this outputstream in an IO or should i just create it before start working with the IO?
    
Depends. Is there a side effect on creation or not? If not, you can use `IO.pure` (which is essentially `Applicative[IO].pure`) to lift a pure value into it. If it's something that say, eagerly opens a connection on instantiation, then yes, surround it in `IO` all you want.

Btw square brackets in a for comprehension on the same line looks weird dude. `stuff <- IO(otherstuff)` is fine.

> The same doubt applies when using the code, for example here is a piece which uses the first method to unzip a file in the middle of a Akka Streams Pipeline

If you're using akka your logic depends on side effects. Akka is a framework that literally lives off of side effects (though it's direct dependency on stdlib future). Using `IO` in an akka project is like putting a mercedes hood ornament on an old Renault 4 buggy because it's cool and shiny. Pretty moot IMO. 

",1517984148.0
m50d,"`IO` is used for modelling coarse-grained I/O operations; it's a very crude ""execute this thing"" abstraction. You should never have an `IO[A]` with some stateful type `A` inside (like an input/output stream) - an `IO[A]` should represent a task that you can run to get a plain value of type `A`. There are two reasonable options here:

 1. Put a single `IO { ... }` block around the whole body, everywhere you're using input/output streams, and only allow it to be a final `IO[Array[Byte]]` or what-have-you.
 1. Use a more fine-grained abstraction that can capture the fact that you're opening and closing stateful streams.",1518010274.0
Milyardo,"    IO { new ZipInputStream(is) } // this needs to be wrapped in an IO?

Maybe, the Javadocs for `ZipInputStream` doesn't say it has an effect, wouldn't entirely surprised if it did. You can lift the value into IO with `point` or `pure` if you don't want to capture creating a new instance.

    _      <- IO { zipOut.close() }

This line will not close `zipOut` if an exception occurs on any of the previous lines. Instead of `flatMap` you want to use a combinator that will always run a given `IO`. Particularly, you can refer to the bracket combinator I suggested last time you asked a question about [cats](https://www.reddit.com/r/scala/comments/7rtmgp/cats_handling_resource_closing/dszkgak/).

    firstEntry <- IO { zis.getNextEntry }

`ZipEntry` is also close-able IIRC.",1517986084.0
MercurialHacked,"You may have better luck getting an answer if you reword your question and/or provide code examples. As-is, I can't make sense of what you are actually asking. What is ""java-compatible async feature""?",1517957553.0
Milyardo,Sounds like you should just dive into the Red Book IMO.,1517950762.0
littlenag,"I own both Scala in Depth and Functional Programming in Scala (ie the red book) and have read both. 

They are very different books and overlap very little with their content. I would still recommend reading both books, to be honest, though Scala in Depth is starting to show it's age. Regardless there is enough good content in that book, and enough existing code following the discussed patterns, that it is worth having read/skimmed the book. I do hope there is a follow-up book once Scala 3 (dotty) hits.

But if as you say you want to know the FP part of Scala, then just jump into the red book. It will walk you through everything you need to know. 
",1518015157.0
,"The Red Book is nice when you get to the point in Scala where you want to understand why for comprehensions are set up to call `flatMap`. That was the point where I started asking questions and one of my coworkers told me to pick up that book. The first few chapters IMO are a bit slow, but once you get into the definition of `map`, `flatMap`, etc., it begins to make a lot of intuitive sense. However I think it's hard to get this intuitive level of understanding without having built a few complex projects that needed to do lots of flatmapping.",1518550197.0
S11001001,"*Scala in Depth* is about Scala. Specifically, ""advanced topics"". Despite its reputation, it is a perfectly good introduction to the language, moving on to teach more exotic language features and why you'd use them. Chapter 11 ""Patterns in functional programming"" should be skipped, though. Chapters 5-7 are the most valuable and unique.

To quote the very beginning of the red book, ""This is not a book about Scala. This book is an introduction to *functional programming*…"" This is not a cheeky lie. Only enough Scala features to cover its material are introduced, i.e. enough of a language to teach all the FP abstraction and design they want. This is not nothing (some necessary features don't exist in Java), but is beside the point.

So, do you want a book about Scala, or a book about FP?",1518911602.0
midianite_rambler,"Well, if it ain't broke, don't fix it. The time you save not rewriting this component can be spent on other, presumably more interesting, stuff. Just my 2 cents.",1517941590.0
skyluc,"There is a library for supporting socket.io in the Play framework:
https://github.com/playframework/play-socket.io

It work pretty well.
The interfaces are using Akka Streams, so some knowledge of it is needed.",1518012816.0
bschwind,I would first ask yourself [if you need Socket.io at all](https://codeburst.io/why-you-don-t-need-socket-io-6848f1c871cd),1518076758.0
dnslbr,Hi! Check Alvin Alexander Scala Cookbook. It has lots of ready examples and might help you with your tasks,1517934693.0
AlexITC,"I'm linking you a project where you can see an application that is in production, it uses Play Framework and it has a bit of documentation that might help you, the code is not pure FP and hopefully it is simpler enough to understand it: https://github.com/AlexITC/crypto-coin-alerts

  
There is a specific package that consumes external web services using Play WS, and you could see a simple way to test them:

- services: https://github.com/AlexITC/crypto-coin-alerts/tree/master/alerts-server/app/com/alexitc/coinalerts/services/external
- tests: https://github.com/AlexITC/crypto-coin-alerts/tree/master/alerts-server/test/com/alexitc/coinalerts/services/external  
  
  
I would happily answer any question that you have about the code, good luck!",1517938992.0
v_krishna,"After learning scala well enough to do spark etl + ml jobs, I just downloaded one of the activator templates (i think play + akka api) and got in running. Then I started building out the endpoints I needed to support following the template example and doing a lot of googling. Now maybe 7 months after starting my first play service i've made a few more and generally feel comfortable with understanding how I should structure things, how to have good unit and integration tests, etc.",1517938695.0
non-private,The playframework home page has ['starter' projects for 'newbies'| https://playframework.com/download#starters] and [many examples|https://playframework.com/download#examples] like web sockets and rest apis.,1517952260.0
m50d,"I'd start by doing what you were doing in Java - using the same libraries and the like. The result won't be good idiomatic Scala, but it will let you stay productive, and then you can gradually introduce more functional aspects as and when you feel comfortable.",1518010382.0
p220,"you won't have to really learn a ton of functional programming to do play... what you really want to do is get comfortable with the scala core language, after that you can reason about the play APIs fairly easily. Scala language takes a bit more initial investment than Java, but without it, it's going to be terribly hard to make sense of the API syntax or compiler errors. It's useful to know FP to understand Scala, but you won't need to do a lot of FP style programming in play if you don't want to",1518150804.0
denisftw,"> I've started doing the Coursera course that pretty much everyone recommends (https://www.coursera.org/learn/progfun1/) , as well as I gotten the Scala for the impatient, book + Functional Programming one.

Honestly, I wouldn't recommend any of those. The Red Book is probably the most useful of them, but it is not about learning the language and it will definitely not help with Play. You can check out my bundle here:
 
https://leanpub.com/b/complete-scala-bundle

The first book of the bundle basically summarizes my first year experience with Play, and the fact that nobody here mentioned it means that I'm doing something incredibly wrong in the marketing department.",1518870709.0
elasticbuttreduce,You should learn the basics of functional before trying to write a Play service,1517938294.0
astevetime,3,1517882079.0
cloaca,Yes.,1517883595.0
z0mghii,No,1517884140.0
rco8786,3 experience units,1517888734.0
m50d,"I've been doing professional Scala for ~8 years and while I might call myself an expert at this point, I'm still learning new things. Even if you know all the basics of the language, the techniques you can achieve by combining things might surprise you.",1517925424.0
osamc,3 story points.,1517918404.0
emilypii,"Martin Odersky (der Funktionaler Führer himself!) gave us a [checklist](http://www.scala-lang.org/old/node/8610) :\^)













",1517924487.0
jimschubert,"10,000 hours.",1517967093.0
Scf37,"""expert at scale"" - sounds just right for linkedin profile.",1518029108.0
romanemperorme,"Interesting. Thanks , guys! ",1517929326.0
romanemperorme,3 months? ,1517882505.0
romanemperorme,3 years? ,1517882571.0
WesleyBatista,"I've been working on an article about using Scala to extract data from Salesforce REST API. I am a beginner using the language. 

Would appreciate feedback from you guys :)

“How to integrate Salesforce data into your Data Warehouse using Scala” @WesleyBatistaS https://medium.com/@wesleybatista/how-to-integrate-salesforce-data-into-your-data-warehouse-using-scala-9959026b5f6

",1517889513.0
silentraquo,How do you decide when to stop supporting Scala 2.11 in your libraries?,1517888587.0
SubMachineGhost,"
what is the recommended way to read a file inside an actor? 

because doing so the classic way with java.io._ is going to block the current thread until the file is read.",1517846619.0
Philluminati,What is an applicative?,1518091706.0
jackie_pwn_asses,"Heyo, 

I'm integrating with a Java package (OpenSaml) that needs to be initialized before anything can be done with it, eg:

    InitializationService.initialize

It must be called once per process before library functions can be used. 

What's the best way to deal with this? I could make it the user's responsibility, but wondering if there's perhaps a better way. My first thought was to define an initialize method that that uses an atomic boolean to initialize the library only once, and then call the initialize method as needed, eg:

    object Initialize {
      private val isInitialized = new AtomicBoolean(false)
      def initialize = {
        if (isInitialized.compareAndSet(false, true)) {
          // Initialize Library
        } else {
          // Noop
        }
       }
    } 

I wouldn't need to check for initialization often so this seems fine to me, but wondering if there's a problem with this. Not particularly concerned with having an answer idiomatic to scala (although I'll take one if provided), I'm happy with a JVM friendly solution.",1518290116.0
zero_coding,"What is type unification in scala?  
Thanks",1518006145.0
zero_coding,I have question about Show. Is show a type and at the same time typeclass https://github.com/typelevel/cats/blob/master/core/src/main/scala/cats/Contravariant.scala ?,1518098523.0
zero_coding,"Hi all   

I have the following code:  

    object ContraCats {
    
      val showString = Show[String]
    
      def main(args: Array[String]): Unit = {
    
        val m = showString.contramap[Symbol](_.name).show('dave)
        val a = showString.contramap[Symbol](_.name)('dave)
    
      }
    }

As you can see, it is possible to write as currying version and the other as method call. How it is possible?  Here is the source of `Show` trait.",1518181532.0
Storini,Nice!,1517861779.0
joshlemer,"When I do it it works, even when I import it into a worksheet.",1517761703.0
balefrost,It looks like those line numbers don't match up. Make sure your code is compiled before evaluating the worksheet. IIRC there's a toolbar toggle button that controls whether your code will be auto-compiled before evaluating the worksheet.,1517762089.0
shvimas,"This may be unconnected but it is wrong to compare a Double to zero using ""=="" operator",1517824281.0
jvican,You should probably report this in the intellij-scala repository: https://github.com/JetBrains/intellij-scala-bundle/. Looks like a bug.,1518197220.0
MasGui,"Wow so many downvotes, Shame on you reddit Scala.

Here is how you do it:

* 1) Install java 8
* 2) If you have Intellij already, you need to make sure you have the Scala plugin. (File -> Settings -> Install JetBrains plugin... -> Search for Scala -> Install).
* 3) Close Intellij
* 4) edit with a texteditor project/build.properties to sbt.version=1.1.0 (see https://stackoverflow.com/questions/46827010/no-scala-library-jar-in-every-new-intelij-scala-project)
* 5) delete the folder .idea if it exist (hidden folder)
* 6) On the menu bar: File -> Open -> select sangria-akka-http-example (It's a sbt project, Intellij knows how to import it).
* 7) open build.sbt
* 8) Click import sbt project (popup on the bottom right of the screen)
* 9) On the menu bar:  Run -> Debug... -> Edit Configuration (popup) -> + (top left of the popup) -> sbt Task
  Name: Debug Server
  Tasks: run
* 10) Click Debug on the popup
* 11) On the console window you will see: [log](https://gist.github.com/MasseGuillaume/efc6a780a8e3378afeb7739dd9c6557f)
* 12) Set a breakpoint at line 25 in src/main/scala/Server (`val JsObject(fields) = requestJson`)
* 13) On annother terminal: 

`    curl -X POST localhost:8080/graphql \
      -H ""Content-Type:application/json"" \
      -d '{""query"": ""{hero {name, friends {name}}}""}'`

(This is from the README.md)

* 14) Bingo you should see Line 25 is hit",1517740992.0
sciss_,"I had no problem doing this straight away. I'm using latest IntelliJ IDEA CE 2017.3.4 and Scala plugin:

- clone the repository: `git clone https://github.com/sangria-graphql/sangria-akka-http-example.git`
- launch IntelliJ
- in the start screen choose 'open'
- find and select the _directory_ `sangria-akka-http-example` (the icon has a tiny bronze circle, indicating that IntelliJ sees this is an sbt project).
- confirm the next dialogue (if you've never used this, check that you have a JDK installed and selected)

https://imgur.com/a/77ozu",1517761527.0
stephen789,What happens when you try. If you have the idea scala plugin it should auto config. Then 'sbt run' from the cli should as the readme says.,1517725268.0
nikhil909,"Could you make a post about what idea to use and why and 

When to use ide",1517724129.0
ivanovich_ivan,"How much of this can be adapted to Scala? Since the compiler does a lot of optimization of its own and we cannot control the compiler behaviour.
",1517827771.0
jimschubert,"I'm the author of the Finch template for Swagger Codegen (the link you posted is code generated by this template).

Finch doesn't currently support generating swagger docs (there's an issue requesting this feature: https://github.com/finagle/finch/issues/73). Swagger annotations really only work when applied to methods, so you might be able to tweak the template so you could apply annotations. Just know that anything that's `Option[A]` in Scala has to be explicitly documented since the annotations in Swagger Core are Java based. A Finatra server would be much easier to modify for Swagger support (I do this at work). I've not released a Finatra template yet, but you can modify the Scalatra template pretty easily, then extend Finatra's RouteDSL to register swagger definitions when you register routes.

I would think it would be quite a bit of work to make Finch code less finch-like. For Finch, I would suggest maintaining a json or yaml schema document manually and serving the file directly.",1517634085.0
Scf37,"""adding scaladocs"" part really rocks. I believe staring at the sources is the best way to understand sbt and why it does not work as expected.

As for suggestion, I would really like to see bugfixing release. Not all combinations of  `.value`, `taskDyn` and `:=` are behaving well.",1518028998.0
merb,"would've prefered:

* performance
* better http client
",1517703195.0
midianite_rambler,"OP, this is an interesting question, but I suspect nobody on r/scala is really qualified to answer it. Maybe you can somehow ask someone at Lightbend directly? Just thinking out loud here.",1517602293.0
ratherbefuddled,Lagom targeted companies with complex Java enterprise monoliths who wanted to migrate to microservices.  Companies using scala rarely had that problem so Java APIs first made sense to them. ,1517649208.0
lutzh-reddit,"I think it's more like: They used to be seen as ""the Scala company"", which hurt adoption of their multi-language products (Akka, Play, Lagom all have Scala and Java APIs) in non-Scala enterprises. People would think: We don't use Scala, so we can't use their products. The point they wanted to make is: Yes, we fund Scala development, use Scala internally, build products for Scala devs, but we also have products for enterprises using Java, so even if you're a big Java shop with no plans to move to Scala, we might have something for you. 
Afaik, despite the name change from Typesafe to Lightbend and this Java emphasis in marketing, they have not cut back on Scala compiler development. 
",1517654888.0
srparish,"I was just wondering that. I Was looking into using slick after postgresql-async was abandoned, and found that slick also seems to be abandoned. Going to lightbend.com I see lots of lagom java stuff, but not a single link to slick. If they quietly abandon products, it makes me really nervous to use their other products.",1517648397.0
pellets,They might be referring to JVM features that come with Java 8.,1517615732.0
DevIceMan,"They announced probably 2 years ago that they were moving towards better supporting Java, although that doesn't necessarily imply they're doing any less Scala.  Their Java APIs were absolutely atrocious at the time.",1517628728.0
TunaBoo,"They have given up on the Scala dream...

Not a lot of big players support Scala, which is part of the reason I have personally moved on.

I am fine using a niche LIBRARY, but it is really hard to use a niche FRAMEWORK or especially a niche LANGUAGE.",1517594402.0
amazedballer,"Has anyone noticed scalapar only posts language trolls? 

https://www.reddit.com/user/scalapar ",1517784316.0
eed3si9n,"Unless you want to turn it into a command, which would emulate you typing in ""package"" into the shell, you'd have to manually aggregate the non roots. Here's what I've done using ScopeFilter.

    lazy val packageAll = taskKey[Unit](""package all the projects"")
    lazy val myTask = inputKey[Unit](""foo"")

    lazy val root = (project in file("".""))
      .settings(
        scalaVersion in ThisBuild := ""2.12.4"",
        packageAll := {
          (packageBin in Compile).all(nonRootsFilter).value
          ()
        },
        myTask := {
          packageAll.value
        }
      )

    lazy val sub1 = (project in file(""sub1""))

    lazy val sub2 = (project in file(""sub2""))

    def nonRootsFilter = {
      import sbt.internal.inc.ReflectUtilities
      def nonRoots: List[ProjectReference] =
        allProjects filter {
          case LocalProject(p) => p != ""root""
          case _               => false
        }
      def allProjects: List[ProjectReference] =
        ReflectUtilities.allVals[Project](this).values.toList map { p =>
          p: ProjectReference
        }
      ScopeFilter(inProjects(nonRoots: _*), inAnyConfiguration)
    }

",1517617042.0
olafurpg,"Does this work?

```
Mytask := Mytask.dependsOn(package).value
```",1517572813.0
Milyardo,It would help if you included which version of sbt you're using and explain how you're verifying package isn't running first.,1517604401.0
CyberphobicDeveloper,"For number eight, you want to yield(assign to new Val) a list of numbers corresponding to an index of the negative elements in the initial array omitting the first negative number. Then using a for loop, you will use the remove method each of the indexed positions created during the yield.

If you figure out the code for that, let me know and I’ll spend the time explaining number nine.  ",1517529740.0
emilypii,"Please feel free to skip any and all exercises that have you working with mutable datastructures. In fact, looking at the exercises and topics in this book, I'd steer clear of it, and pick up something like [Functional programming in Scala](https://www.manning.com/books/functional-programming-in-scala) so you aren't wasting your time learning bad habits that you'll later need to unlearn to be employable in the industry.",1517536105.0
olaf_from_norweden,why did you feel the need to give us both nonsensical and its definition in the title?,1517583043.0
Holothuroid,"In the first article you linked they say exactly when and why you might want to do it: To insert table and field names. In that case prepared statements do not work. 

But you probably wouldn't expect a user to give a table name to select from. So how should there be SQL injection? If you still fret, you can of course make sure, that what you get is a single table or field name.",1517515175.0
Milyardo,"So you have 4 different monad effect types you're working with. You can either eliminate some those effects, or your can stack them. Or you can do both.

You've already hinted at there being an isomorphic relation between `Try`, `Either`, and `JsResult` and reducing these down to one type is probably a good idea.

It's also possible that some of the method returning these types don't actually care about what kind of Monad they're working with. In these cases you should parameterize over the monad you're working with.

Let take for example a function that gets a user, and then finds the first comment made by that user.

    def getUser(name: String): Future[User] = ...
    def getComments(user: User): Future[List[Comment]] = ...

    def getUserFirstComment(name: String): Future[Option[Comment]] = for {
      user <- getUser(name)
      comments <- getComments(user)
    } yield comments.headOption

In the above example, `getUserFirstComment` may seem like it need to be a `Future` because `getUser` and `getComments` are Futures but it really doesn't have to be. The first thing we'll do is remove the explicit dependencies on the above methods.

    def getUserFirstComment(getUser: String => Future[User], getComments: User => Future[List[Comment]])
      (name: String): Future[Option[Comment]] = for {
      user <- getUser(name)
      comments <- getComments(user)
    } yield comments.headOption

Now that we don't explicitly depend on a particular implementation of `getUser` and `getComments` we can parameterize over information we don't need to know. Specifically we don't need to know that either function uses `Future`. To parameterize over `Future` we're going to a higher kinded type `F[_]` and constrain that type to be a `Monad` using a typeclass(you can find a definition in scalaz or cats).

    def getUserFirstComment[F[_]: Monad](getUser: String => F[User], getComments: User => F[List[Comment]])
      (name: String): F[Option[Comment]] = for {
      user <- getuser(name)
      comments <- getComments(user)
    } yield comments.headOption

This version of  `getUserFirstComment` is completely independent of any dependencies or explicit effects but in reality we'd probably stuff this method into a module with `getUser` and `getComments`. When doing so, we can parameterize over effects at the module level.

    trait UserOperations[F[_]] {
      def getUser(name: String): F[User]
      def getComments(user: User): F[List[Comments]]
      def getUserFirstComment(name: String)(implicit F: Monad[F]) = for {
       user <- getuser(name)
       comments <- getComments(user)
     } yield comments.headOption
    }

Here in module form, we only constrain `F[_]` to be a `Monad` when we need to, specifically when we call `getUserFirstComment`. It is typically best to constrain effects to only what you need, other constraints you might use would include `MonadError`(a monad that has some kind of Error path that can be recovered from, this includes all 4 of the effects you mentioned above), `Traverse`, and `Applicative`.",1517510273.0
LukaJCB,"Sounds like you need to check out Monad transformers. Converting `Try` and `JsResult` to `Either` should be trivial, so you'd probably just need something like `EitherT[IO, Error, A]` or `EitherT[Future, Error, A]`: https://typelevel.org/cats/datatypes/eithert.html",1517487207.0
marcinzh,"> Do others have this problem? How do you deal with it? 

The ideal solution, would be to have a programming language with extensible effects as a core language feature. Then every library maker would create their own monadic effects within the same standard framework, and the world would be a better place.

Back to harsh reality: You could use one of several available libraries for extensible effects. Each requires some investment.

> The problem I see with this is that not all the contexts might be smoothly converted to Either. For example, It might be tricky to convert a result in Future context to an Either context. Also, It just a little bit like the language is forcing me to write extra boilerplate before I can sanely work with the values I need for computations. 

If you are adventurous enough to use an experimental library, you might consider my pet project: [Skutek](https://github.com/marcinzh/skutek). 

- Either - You use `.toEff` extension method to convert any `Either` value to Skutek's `Error` effect, which will then gluelessly compose with other Skutek's effects.

- Try - ~~Similar method should be provided, but as of now it's not. A handful of lines will fix this.~~

  Use `.toEff` extension method to convert any `Try` value to Skutek's `Error` effect. 

- Future - ~~Same as above, an omission (I'm treating this thread as accidental feature request). Skutek has `Concurrency` effect, a simple wrapper for Scala's `Future`, whose sole purpose is to allow composition with other Skutek's effects.~~

  Use `.toEff` extension method to convert any `Future` to  Skutek's `Concurrency` effect.

- JsResult - I'm not familiar with Play, but I took a brief look at the source for JsResult. It seems to me that the solution would be to create new Skutek effect, by taking Skutek's native `Validation` as a template. `Validation` uses an `Either` istance as underlying data, and in our new effect it should be replaced with `JsResult`. 

",1517498689.0
carlfish,"My quick answer is: ""find the smallest type that can represent all the things you want to compose, and convert them to that.""

Looking at your list you have one effect type (```Future```), and three disjunction types (```Either```, ```Try```, ```JSResult```). What I would do in this situation is create a ```type Program[E, A] = EitherT[Task, E, A]``` to use as the 'backbone' of your program (substitute 'Task' with your preferred effect type that is compatible with, but better behaved than Future). Whenever you get a future, you convert it into a Task and lift it into your Program. When you get a JSResult or a Try, you turn them into an Either and lift it into your Program.

You can do the same thing with extensible effects instead of monad transformers. Or you can write your own specific Monad instance for whatever ""shape"" your program becomes (I have a monad instance for ""```I => F[(O, Either[E, A])]```"" that keeps showing up in a lot of the apps I write, because ""Take Input, return either Error or A while accumulating Output, all inside some Effect"" is a reasonable generic definition of a program, and having a monad for it means I can build bigger programs by composing smaller ones).",1517510481.0
Judheg,"Found interesting blog in combining monad: http://immutables.pl/2016/05/14/for-comprehensions-with-combined-monads/

Haven't read it thoroughly, but it seems to be more than your usual 'at most 2 context' post, since I saw transformation helpers to create Result from ofTask, ofOption and ofEither.
",1517524939.0
volpegabriel,If you only have these four Monads you might need to check out Monad Transformers. Now if your real stack is larger then you might want to check out Eff -> https://github.com/atnos-org/eff,1517525710.0
thesuperching,"I'm also deal with the 5 Monad type, but in reality it's 2 from perspective of what we noramlly care about.
 
The 2 are the Try-like type and Future. the others are convertable to Try:  
- Option.toRight(NotFoundError).toTry  
- Either.toTry  
- JsResult ? replace Play-Json with Circe then you get Either.toTry
  
",1521880110.0
paddymahoney,"parametrize over your Monads, consider using higher-kinds",1517470450.0
snylekkie,"Serialize to comma separated values CSV file.
Each line is 1 object's fields values put as string, separated by comma.
Excel loads that natively",1517436963.0
osamc,"Nice article, but comparing frameworks on fully connected MLP does not tell much about them. Better comparision would be to compare frameworks flexibility e.g. in handling variable length sequences and maybe pretraning (like here https://arxiv.org/abs/1511.01432). Other example is https://arxiv.org/abs/1704.00028 where you have complicated custom loss function.

Flexibility is actually something, which has hurt me in past when using less mature frameworks like DL4J.",1517476902.0
jcgretton,Great resource that,1517411844.0
SeveralBritishPeople,"One caution is that Spark is really limited to ETL and iterated mapreduce types of operations - the former buzz around it as The Data Science Solution has died off, and it comes with a lot of overhead. MLlib on a Spark cluster is often slower than other tools running on a single node, and it’s now mostly a sales tool for Databricks. It’s better than Hadoop, but worse than other tools. We use Spark in production for a lot of stuff, but ML happens outside Spark. 

Many ML libraries are using C or C++ for the bulk of the work, and provide wrappers for R and Python. Unfortunately, JVM support is less common, with H2O and xgboost being the big exceptions. 

Python has a much richer ecosystem than Scala, particularly in NLP. I personally don’t like working in Python, in part because I really like functional programming and most Python stuff just doesn’t work that way. There are exceptions like Keras and Apache Ray that encourage functional style and are also just really cool tools to play with. 
",1517374292.0
m50d,"I used to work at a company that did this. Everyone used Spark because that was where the data was, but often our data scientists would implement something in Python or R first, and then we'd port it to Scala as and when we needed tighter integration with the rest of our code and/or to ""productionize"" it.

I got the impression the Python libraries were richer in theory, but I found everything our data scientists were actually using was available in MLLib. I maybe had to implement one or two distributions by hand that were builtins in Python, but we're talking one-liners. Of course that may not be true in every domain.",1517390192.0
thiseye,"It's possible. I did some Scala for ML at my current company because it was the language I liked the most and we're mostly a jvm shop. So interoperability was easy and Scala made it easier to experiment. As mentioned, Spark ML is good and there are Java ML frameworks. But I did eventually switch our ML projects to put Python for various reasons. I would encourage you to try it out with Scala. It may be sufficient for most needs but you may out grow it. I'm really hating Python but you can't argue with the ML/NLP tooling around it.",1517371945.0
osamc,"Compared to Python it is quite bad.
Lucene analysers, which you can use for doing some text preprocessing have terrible API. Spark ML requires Spark runtime, which you usually do not want. Then there is Smile library, which looks very good on first look, but misses things like handling sparse data (you need that when dealing with text) and L1 regularization (again often needed when dealing with text). DL4J is sort of joke compared to any serious deep learning library.
On the bright side you can load Tensorflow model and make predictions in Scala (and in many other languages). With some hacking effort, you can even train the model in Scala, but you need to setup its structure in Python. 
Then there are some less used libraries like MXNet also available from Scala.

Your best bet, when you want to use Scala is either of following:

- write required stuff from scratch (strongly not recommended), only good thing here is that you do not need to reimplement whole scikit-learn, only the portions you need (like sparse linear models)
- use some less known library like MXNet
- do predictions (or optionally training) in Scala using Tensorflow",1517387228.0
sammyrulez,"I just found this repo with a lot of interesting stuff about DL in Scala on Spark https://github.com/JeremyNixon/sparkdl

I hope it helps",1517409026.0
midianite_rambler,"I have a lot of experience with ML. I looked at Spark MLlib a couple of years ago and from what I could tell, MLlib was pretty limited in the kinds of models that you could work with, and there were idiosyncrasies in the stuff that was implemented. I think you might end up having to reinvent some wheels and smash some square pegs into round holes if you really want to use MLlib. My advice is to use Python or R. Just my 2 cents, I never did any substantial projects with MLlib, and your mileage may vary.",1517420076.0
v_krishna,"Spark and MLLib are written in scala. Tons of nlp stuff is written in java. 
",1517363355.0
vonnik,"If you want deep learning and scientific computing, there are libraries like Scalnet and ND4S, which are linked with Eclipse Deeplearning4j. 

https://github.com/deeplearning4j/scalnet

https://github.com/deeplearning4j/nd4s
",1517415685.0
,I have done a lot with Free but at this point I'm pretty convinced tagless/MTL style is better. [This talk](https://www.youtube.com/watch?v=1h11efA4k8E) by Luka Jacobowitz is a long worked example and is very good.,1517332309.0
xalyama,"One 'pitfall' I have encountered with using mtl/free is choosing the right granularity for operations.

For example, imagine an application with a database. We could model our operations as very simple `get(table: Table, key: Key): F[S]` and `put(table: Table, key: Key, value: S): F[Unit]`, which we can compose to create our actual domain-specific operations. This has different implications than if we immediatly model these domain-specific operations as is, for example: `getPictures(album: Album): F[List[Picture]]`, `getAlbums(): F[List[Album]]`.

There is no right or wrong choice, it depends on what you want to get out of abstracting away your effects. In the first case you can test a lot more logic as unit tests, but you must basically remodel the idea of a database in these tests. The question is if this is needed.

In the second case you abstract away a lot more, which means unit testing the logic becomes simpler. But this means that the actual effectful code in the handler will be larger and thus will need to be tested more thoroughly.

But this doesn't really have anything to do with mtl vs free in itself, as it applies to both. The actual difference between mtl (n^2 instance problem) and free (only algebraic effects, possible performance loss) will probably not be as relevant when you are only beginning with experimenting with them. I suggest you try them all and use the one which syntax you like the most.",1517345160.0
havok2191,"Hey there,
I recently wrote an article and took some of the learnings we did at work and documented it here https://medium.com/@calvin.l.fer/deferring-commitments-tagless-final-704d768f15cb 

Both Free Monads and Tagless Final have their pros and cons. Tagless Final has a lot less boilerplate compared to Free but with frameworks like FreeStyle you have some nice options",1517411680.0
m50d,"I find free coproduct style easier to understand and work with - my domain operations are plain values, and then I run them however I see fit. Whereas tagless final style feels more like passing in a bunch of callbacks (because at implementation level that's what it is) and so it's less clear what's going on. In theory tagless final should perform better, but I'd only adopt it in cases where I knew the performance of free was going to be an issue, which I haven't had happen yet.",1517331750.0
Milyardo,"Currently the advantages of Tagless is that it's encoding is more ergonomic, and performant. Free on the other hand makes it much easier to inspect and rewrite programs. For most people I think tagless final encoding should be their default, but I have found cases where reasoning about programs others write with Free to be incredibly useful. Particularly when you want to validate, serialize, or optimize those programs given to you.",1517420634.0
mrks_,"What is Java Next? Do they just mean the next version, i.e. 10?",1517330135.0
m50d,"(scalaz-stream is different from scalaz)

A quick search found https://github.com/functional-streams-for-scala/fs2/issues/333 which seems to be the actual issue he's talking about.",1517311226.0
mr___,"Scala definitely helped us pull in some good devs,  they sought it as a good addition to their skillset and have had no trouble coming up to speed.  ",1517268170.0
silentraquo,"A bit surprised to see OCaml have such poor love/hate rating. Anyone knows why could that be? I haven't used it personally, but I've never heard overly strong opinions against it, other than a few specific issues which every language has.",1517386771.0
SilasNordgren,"There's scalajs-react, though that's a facade for React (React's very popular though), along with facades for Vue and Ractive. There's binding.scala but I don't know anything about that.

I would prefer a Scala.js presentation layer library too, and I'm working on one at https://github.com/snordgren/domino. It's still super-early in development, but it's written to be easy to use, efficient, and to run on both client and server. It's faster than Scalatags for server-side rendering, and has support for rendering to a DOM. If you've used React in a functional style (or Elm) it should be very familiar. 

I'm the sole developer right now and the kinks haven't been ironed out yet, but the scope is small and the code is simple, and I always respond to GitHub issues. Let me know what you think.",1517273710.0
expatcoder,"Probably Play WS, Akka Http, or Http4s for websocket handling.

[ScalaJs React](https://github.com/japgolly/scalajs-react) is probably the most well maintained/supported frontend library. There's also [Binding.scala](https://github.com/ThoughtWorksInc/Binding.scala) for a pure Scala.js approach to data binding.

[ScalaTags](https://github.com/lihaoyi/scalatags) is quite popular for markup. Tons of json libraries available as well.

You certainly can build SPAs with Scala.js, but not everything is supported (Angular, for example, has no modern option available, just the 1.x series).",1517271991.0
yawaramin,"Try out an example project and see how it goes: https://github.com/tastejs/todomvc/tree/gh-pages/examples/scalajs-react (if anyone can suggest a better ScalaJS-React example project, even better).

Be sure to build it from scratch, start a build in ‘watch’ mode with sbt, and note the edit-compile workflow. The ScalaJS-React binding is really great, btw; I’ve used it in the past.",1517440635.0
olafurpg,There is https://olivierblanvillain.github.io/monadic-html/examples/ for a pure Scala.js solution,1517318736.0
polypus74,"Thanks guys for the input. I need to do a bit of evaluation and will be back here with my findings/decisions, in a week or two.",1517601425.0
AlienBirdie,Just the breeze package for linear algebra? ,1517248570.0
MasGui,This is how I learned Scala: http://aperiodic.net/phil/scala/s-99/.,1517304054.0
pathikrit,This is how I learned Scala: https://github.com/pathikrit/scalgos,1519698777.0
virtualoverdrive,"Finagle and TwitterServer, two service frameworks that Twitter uses to power it's services, are backed by Netty. It works.",1517250217.0
m50d,"I don't have experience with Netty directly. Most Java libraries/frameworks are usable from Scala but not necessarily idiomatic. While using Netty for this is not wrong, I have to ask what you expect to gain from doing so, and whether using a native-to-Scala library  for the same thing like akka-io might not be better?",1517242502.0
iNCQRiT,"The [play framework](https://www.playframework.com/documentation/2.6.x/NettyServer) used to have netty as the server backend by default, so it is definitely possible.

They changed the default to akka HTTP. 

In my experience play framework with netty worked just as well as a server backend, but with akka http we no longer need an adapter dependency to use akka-streams.",1517245962.0
kod,"You can write scala code that directly uses netty, but I'd recommend against it unless you have a lot of netty experience.

Finagle is a much easier to use abstraction.",1517259705.0
vytah,"I've been working for a while on a programming language targeting Commodore 64 (it can work on other 6502-based machines too):

https://github.com/KarolS/millfork

It's the first compiler I wrote that goes all the way from the source to the final machine code. Therefore it contains some design mistakes.

The language was tailored to the features of the 6502 processor, so the final code is almost as efficient as hand-written assembly. I wrote it for two reasons: writing assembly is long and tedious and the result is hard to refactor, and all the higher-level languages generate large and inefficient code.

And before you ask: no, I haven't gotten it to work on NES yet.",1517230265.0
SilasNordgren,"I've been writing a web UI library inspired by React and Elm for Scala.js called [Domino](https://github.com/snordgren/domino). It's a small and lightweight alternative to scalajs-react. 

HTML generation is fast and typesafe, and there are no components, favoring an Elm-style architecture.

What do you think? ",1517248623.0
fromscalatohaskell,Whats happening with Slick? It seems there's very little progress all around,1517813194.0
kai10k,"I've been writing a demo in Scala.js, it is a POC that Scala.js and SBT could be a solid development platform for WeChat, more information regarding WeChat and WeApp is in the issue fired to Scala.js website

https://github.com/scala-js/scala-js-website/issues/400

the demo itself

https://github.com/kaiwu/weui-scalajs",1517369326.0
zero_coding,"Hi all  
What is the difference between definition of     

    implicit val 

and   

    implicit def   

When do I have to use what?    
THanks

  ",1517395026.0
NaughtSleeping,"Wonder why Scala, and functional languages in general, seem to be flattening out or even declining since 2014.",1517194782.0
kthejoker,"As a neutral outside observer, I feel like there isn't a super strong ""dev marketing"" push for Scala.

I see lots of posts on HackerNews, Medium, Twitter feeds, etc. on Go, Kotkin, Rust, Python, etc

My general takeaway is Scala isn't gaining traction in SV and startup land.
",1517241640.0
ivanovich_ivan,"These rankings are almost always flawed.

1) Not all development happens in Github. Infact, most of the companies use their own git repo such as Gitlab CE or some other open source/in house tool.

2) Github is like the cool kids party place. Rust, Swift, Go are all hot now because it is all being talked about a lot. Developers in general like to try out stuff which are new and shiny, just for fun. So, it really depends on which popularity we are talking about. Is it popular with cool kids or actual industry usage?

3) Kotlin/Swift is being used increasingly by mobile app developers. I have nothing against mobile apps, but there are a ton of crap apps in play store and app store. Mostly repetitive stuff. The cool factor is multiplied here and almost everyone today have an app published there.

4) Machine learning is the hot thing right now. Everyone today seems to write a classifier, post it on github with some dataset and claim they are a data scientist. And guess which language they are doing this in? - Python. 

Thats enough rant. Popularity != Usability. I would choose Scala any day over Java/Kotlin/Clojure simple because I can do things better. Scala is used in the backend more. The best way to determine a language's popularity is by looking at job postings of companies and see what language they are using and for what role. 

The JVM is in fact a very good platform to develop in with a healthy mix of almost many language flavours.






",1517218231.0
volpegabriel,"I wonder what drives you to think you need DI in Scala? Maybe for hybrid OOP / FP apps? I'd rather invest more time learning FP and make use of pure functions  (which ironically represents what DI is, eg f: A => B has a dependency A).",1517217975.0
raghar,"Hmm, on one hand I'd like some reliable compile-time DI for Scala (which inspired me for writing my own DI library), on the other hand I find lifecycle a different responsibility that should be handled separately.

However, author compares this to Spring, which is quite tangled with Java EE and its lifecycle issues. In my Play/Akka-HTTP applications I dumped resource management on streams and terminated DB and ActorSystem in shutdown hooks, so perhaps a dirrefent use case.",1517193576.0
,There are a few outstanding errors that I need to correct. Please open issues if you see anything amiss.,1517162973.0
gr3gg0r,"This is awesome, thanks! Although you should have used Lucidchart to make the diagram since we actually use cats ;)",1517241812.0
Andalo,"Hey, Do you just want to mock request/response?
You can use MockWs (https://github.com/leanovate/play-mockws) instead of playing with scalaMock/mockito and Ws client. MockWs allow to record demanded response for given requests.",1517165641.0
AlexITC,"I've successfully mocked json responses in a project, this is the general idea of what I did:

    val ws = mock[WSClient]
    val responseBody = ""{...}""
    ...
    ""availableBooks"" should {
      ""retrieve available books"" in {
        val expectedBooks = ""BTC_DASH ETH_DASH USDT_LTC BNB_LTC"".split("" "").map(Book.fromString).map(_.get).toList

        val request = mock[WSRequest]
        val response = mock[WSResponse]
        val json = Json.parse(responseBody)

        when(ws.url(anyString)).thenReturn(request)
        when(response.status).thenReturn(200)
        when(response.json).thenReturn(json)
        when(request.get()).thenReturn(Future.successful(response))

        whenReady(service.availableBooks()) { books =>
          books.size mustEqual expectedBooks.size

          books.sortBy(_.string) mustEqual expectedBooks.sortBy(_.string)
        }
      }
    }

The complete test: 
https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/test/com/alexitc/coinalerts/services/external/BinanceServiceSpec.scala",1517333519.0
Krever,"Stack that I typically use:

* sttp for http calls
* circe for json

You may also want to try 47deg/fetch library.",1517059816.0
flylikeabanana,"Http4s treats response bodies as streams, which are nice for big payloads since you can transform them in-place as you consume the stream. It's a great model, and plays well with circe",1517064111.0
esquilax,We're using OkHttp and json4s to do similar work. ,1517062310.0
scalaprog2518,"I agree with the other posts as those stacks will keep things basic and are a low step from bash-into-scala.

&nbsp;

If you or others coming across this post are interested the [Akka](https://akka.io/docs/) team offers solutions for each of your stated questions:

* The akka-http client can be used for [requests](https://doc.akka.io/docs/akka-http/current/client-side/request-level.html)
* They also maintain the [spray-json](https://github.com/spray/spray-json#readme) json library
* akka-streams can provide [throttling](https://doc.akka.io/docs/akka/current/stream/stream-quickstart.html#time-based-processing)

&nbsp;

The APIs are not as simple as others mentioned in these comments. Still Akka is relatively popular and has a lot of documentation, support, and community. Plus if you _really_ get into trouble there is also paid support from the Akka authors at Lightbend. ;)

&nbsp;

You also mentioned you are working with elasticsearch. Be sure to checkout the [elastic4s](https://github.com/sksamuel/elastic4s#readme) library too. elastic4s internally uses the Apache Http Client. However one could still throttle the elastic4s requests wrapping the calls with akka-streams.

&nbsp;

Also while spray-json is maintained by Akka [circe](https://circe.github.io/circe/) is growing in popularity and is also supported by both elastic4s and as an akka-http [extension](https://index.scala-lang.org/hseeberger/akka-http-json/akka-http-circe/1.19.0?target=_2.12).

&nbsp;

Buyer beware: While I personally like each of the libraries mentioned above, for any library there are pros and cons. I will leave those for other google searches / debates.",1517073587.0
yakattak,Spark.,1517061424.0
swoogles,"One fun practical FP project I've been working on recently is coming up with a
scripted alternative for the manual ""Setup your workstation"" documentation we 
have at my company.

There are several types of tasks in this process, such as:

- Clone a repo
- Change permissions on a directory
- Install apt package
- Personalize config file with your personal info

I think cloning a repo is the most important one to keep in mind when trying
to weigh the significance of value vs a function that produces a value. Picture 
the difference in bandwidth of:

  * Downloading a multi-gig repo, then doing something with the results
  * Defining a function that downloads a repo, then manipulating that function.

I started scripting this as a direct translation of bash commands, using
Ammonite Ops (http://ammonite.io/#Ammonite-Ops) & Scala Scripts
(http://ammonite.io/#ScalaScripts) . I got the first version of it
working, and it was...fine. It executed the commands in the order I had
specified, and that was it. Every task would be executed each time you ran the
script.

At that point, my entire script effectively had the signature 

    () => Unit. 

I would run it, it would do *everything*, maybe print different pieces of info,
and ultimately return nothing.

Though I hadn't actually realized it at this point, each individual task was also a 

    ()=> Unit. 

If a particular task was acting up, I would add a print statement to it, and
then re-run the entire expensive script.

The first major change I made was giving each task a return type. I went with
Try[String], so now each task was a 


    () => Try[String]

Now that I had a proper
return type, I could start chaining the different sections together, so that
they would only execute if the previous step had completed, eg:

    cloneRepoA
      .flatMap(cloneRepoB)
      .flatMap(editFiles)
      .flatMap(cloneRepoC)

Now the signature of my script was closer to 

    () => Try[String] => Try[String] => Try[String] => Try[String]

So you could execute it, it would execute a series of functions that returned
Try[String]'s, and it would ultimately return a single Try[String] result.

This was certainly progress, but I still had major gripes.

  - If I wanted to add println's (or any behavior) for debugging, I had to manually 
    add it to every step.
  - Every step, including cloning the expensive repos, happened every time.

Before going further, let's make a typedef for all these () => Try[String]'s that we're
going to be dealing with.

    typdef Task = () => Try[String]

This allowed me to rethink the previous signature of my script as:

    Task => Task => Task => Try[String]


Once I realized that all my tasks fit the same rough shape of a () =>
Try[String], I could collect them in a Stream. Now my script was a

    Stream[Task] => Try[String]

With this structure, I could now short circuit the operations in a different
way, namely using .takeWhile, rather than directly chaining each operation to
the next.
    
    val tasks: Stream[Task] =
      Stream(
        cloneRepoA,
        cloneRepoB,
        editFiles,
        cloneRepoC
      )

    tasks
      .map{ task => task.apply } // Still not actually executing here!
      .takeWhile{ result => result.isSuccess } // *Now* they will be run and checked


 Now I could do some fun things to them. To start, I gave each of the tasks 
 a number, via .zipWithIndex. So I had a script that was roughly:

    // Every item in the Stream is a tuple- (index, theFunctionToRun)
    () => Stream[(Int, Task)] => Try[String]


Now I could add some decent logging to each step, ala:

    tasks
      .map{ case (index, task) => {
        println(s""Beginning step $index."")
        val result = task.apply()
        println(s""Finished step $index with result: $result"")
        result
      }
      .takeWhile{ result => result.isSuccess }

Producing:

    Beginning step 1.
    Finished step 1 with result: Success(""Cloned repoA"")
    Beginning step 2.
    Finished step 2 with result: Success(""Cloned repoB"")
    Beginning step 3.
    Finished step 3 with result: Success(""Edited config files"")
    Beginning step 4.
    Finished step 4 with result: Failure(""Could not download repoC"")


More excitingly, now that each task had a number associated with it, I could
keep track of which tasks had executed successfully on previous runs.

    tasks
      .map{ case (index, task) => {
        int lastSuccessfulStep = readFromProgressFile()
        if ( index < lastSuccessfulStep ) 
          Success(""This step was completed by an earlier run of the script!"")
        else {
          // Function is never actually invoked, so repos are never cloned.
          val result = task.apply()
          if ( result.isSuccess ) 
            writeToProgressFile(index)
          result
        }
      }
      .takeWhile{ result => result.isSuccess }

Producing:

    Success(""This step was completed by an earlier run of the script!"")
    Success(""This step was completed by an earlier run of the script!"")
    Success(""This step was completed by an earlier run of the script!"")
    Failure(""Could not download repoC"")

With this approach:

  - No tasks will execute if a previous one has failed
  - No tasks will execute if they have completely successfully on a previous
    run

So we've completely eliminated redundant executions of any given task.
I'm happy to talk further about this, but I'll cut it off there for the time
being!

Disclaimer- I edited this several times, and it's now late at night. I'm sure typos
were made and type signatures butchered. ",1517028746.0
Kyivafter12am,"The best thing you can do to understand theoretical concepts is to apply them in practice. I would suggest writing a pet project where you can practice operations on functional data structures and error handling. A JSON parser might work well, for example. ",1517026419.0
SgtLionCobra,"For what it's worth, I find monad transformers troublesome. I eventually ended up using the [eff](https://github.com/atnos-org/eff) library for extensible effects, basically sort of mashing monads together _painlessly_. Pretty practical stuff, imo.",1517056558.0
kod,"I don't think the red book is actually a good way to learn functional programming if you have no prior experience.

Try

http://www.htdp.org/

or

http://www.ccs.neu.edu/home/matthias/BTML/
(If you go with this one, keep a bookmark obscuring the right hand side of the page, and do the exercises in a repl)

",1517260370.0
barelas,"It is not written in scala, but why not just use [grep](https://en.wikipedia.org/wiki/Grep)?",1516999036.0
PrimozDelux,This really did not bring anything new to the table,1516990466.0
CyberphobicDeveloper,"Zero to Hero?  Do the Scala specialization on Coursera.  To learn basic syntax, check out Scala on TutorialPoint or “Scala for the Impatient” by Cay Horstmann",1516937179.0
sudkcoce,I ihink Programming in Scala 3rd edition (by Odersky) is probably the best way to learn the Scala language. ,1516946714.0
oplav,"I used (and still reference) Twitter's Scala School.

https://twitter.github.io/scala_school/",1516943095.0
griningcat,Coursera is quiet a good start to get in touch with the programming language itsself. maybe you should also take a look at „Functional programming in Scala“ this is a book containing the principles of functional programming.,1516951025.0
Holothuroid,"I enjoyed, https://alvinalexander.com/scala",1516954170.0
kaeblo,I think this is one of the best summaries if you want to learn scala: https://gist.github.com/d1egoaz/2180cbbf7d373a0c5575f9a62466e5e1,1516959566.0
DuploJamaal,">The for loop is not what I thought it was

Why not? 

for( a <- 1 to 10){
    println( ""Value of a: "" + a )
}

That's really not that much different than for-loops in other languages.

You might have seen a for-comprehension (for with ""yield"" at the end) and mixed it up.

for{
   db <- connectDB() 
   data <- sendQuery(selectStuff) 
   convertedData <- data.convert
} yield convertedData.head 

That's not a loop, that's closer to a bunch of try/catch. 
   
>there are so many shorthand operations for manipulating collections, etc. Does anyone have a good resource that goes from zero to hero? ;)

Functional Programming in Scala helped me. In the first few chapters you will implement all those shorthand functions yourself and thus will have a good understanding of what they each do. ",1516968815.0
elcric_krej,"If you are confident in your general programming knowledge,  pragmatic scala is a very good book... A bit old being from 2015, but little to none of the things it presents are outdated.  It's very good at explaining the syntax and the common coding practices when working with the std. ",1516967782.0
,[deleted],1516972024.0
OHotDawnThisIsMyJawn,"If it’s a team of Java developers who don’t have any interest in learning Scala and you can’t procide even one good argument for why they should do it then you absolutely should not convince them to rewrite everything in Scala.  It will be a disaster.  

If you want to introduce Scala to the team then start with a small project that doesn’t require buy in from anyone else.  Ideally it’s something you own and one other person is excited to work on it with you (so that it doesn’t become siloed with you).  If there are benefits then the team will see them and Scala can be slowly phased in. ",1516930008.0
beep_dog,"Usually the goal of microservices is to decouple the deployment of the individual components. They don't need to all go at the same time, and can deploy functionality separately from eachother. Contracts become very important. Something like [gRPC](https://grpc.io/) might make it easier to ensure that contracts exist, and are reasonably well structured, as well as providing a high performing over the wire protocol.

As for whether or not to use scala, scala makes your build times take longer, but it does a lot more checking for you. It's a bit easier to do concurrency in scala, if you follow the functional transform model. You can do this in java8, but it's not as intuitive (IMHO).

Most scala code that compiles the first time, runs the first time, correctly. Most scala code that does the same thing as java code is less verbose, and is easier to read without the unnecessary ceremony. Most scala code is immutable by default, which is a necessary thing when trying to do concurrency. That being said, most of this can be accomplished in Java, it's just a different style.",1516924009.0
tibodelor,"I have done exactly that, breaking a java monolith in scala micro services.
I won't dive in the details of why going micro services is often a bad idea...
About Scala, I was the only person who had done scala professionally in the past. Because Scala isn't opiniated, you can easily do some horrible design, which we did. Compile time was horrible and code was unreadable because each of us were eager to try this new monad that will solve all our problem.

If i had to redo it now, that would be a completely different story because now I understand functional programming and i have 5 years of Scala filled with good and bad stories.

Going Java isn't necessarily a bad idea. If i were you, i would go for kotlin because it's more like a better Java, while Scala requires a shift of mindset.",1516929598.0
kurashu89,"To pile on with the ""you probably don't want microservices"" crowd.

Unless you're also breaking up your database into smaller independent databases, you're actually building a distributed monolith. You now have the worst of both worlds.",1516933804.0
TunaBoo,"Most likely you should not use microservices.

Most likely, your team will ignore your advice, as 95% of Java devs are stuck on Java, and advise from ""the new guy"" almost never wins.

Source - Converted several Java teams to Scala, all reverted to Java after I left the job. Converted crappy microservice apps back to monoliths for massive performance gains.
",1516921276.0
merb,"if you are a small team, do not use micro services.
if you are a big team, you could use micro services, but you should also allow a bigger set of languages, else you would not have that many benefits other which a micro services architecture would provide.",1516922390.0
Daenyth,I believe Doobie tries to do stuff like this for you out of the box,1517249551.0
DooDooSlinger,Im not hating on FP but I'm having trouble seeing how these kind of libraries make any sense for everyday programming. Just look at the syntax of the library they're promoting. Just defining a simple class is horrendous ,1516912538.0
vtscala,"> Specifically what is the /: operator?

It's `foldLeft`.  Use of `/:` instead of `foldLeft` is strongly discouraged; the code is either old or the author never got the memo.",1516831870.0
LPTK,"Protip: put that code in an editor (such as IntelliJ) and {ctrl/cmd}+click on any symbols you don't know to see the definitions.

In general, I have a really hard time reading Scala code bases without an IDE, because you never know what is defined where, what the types of intermediate expressions are, which implicits are passed, what is being implicitly converted, etc. etc.",1516834946.0
OffPiste18,"This is a quite succinct implementation of the iterative approach described here: https://en.wikipedia.org/wiki/Levenshtein_distance#Iterative_with_two_matrix_rows

Note that understanding the full-matrix iterative approach first will make this approach a lot easier to understand.

I rewrote it slightly in the hopes of giving some more meaningful names to help clarify what's going on in the context of that linked algorithm:

    def editDist2[A](a: Iterable[A], b: Iterable[A]): Int = {
      val startRow = (0 to b.size).toList
      a.foldLeft(startRow) { (prevRow, aElem) =>
        (prevRow.zip(prevRow.tail).zip(b)).scanLeft(prevRow.head + 1) {
          case (left, ((diag, up), bElem)) => {
            val aGapScore = up + 1
            val bGapScore = left + 1
            val matchScore = diag + (if (aElem == bElem) 0 else 1)
            List(aGapScore, bGapScore, matchScore).min
          }
        }
      }.last
    }

Each iteration within the `foldLeft` calculates one more row from the previous row. And each iteration within the `scanLeft` calculates one more value within that row.",1516916237.0
non-private,"I don't think this is a good example of overly complex implementations. To the contrary, it looks like a non-recursive implementation of its [definition|https://en.wikipedia.org/wiki/Levenshtein_distance#Definition]. 

It's a bit complicated, though, because the author decided to avoid recursion (as the definition is not tail-recursive) and uses nested `zip`.",1516888232.0
joshlemer,"The `/:` operator is `foldLeft`, because it is supposed to look like a little picture of a [left-slanted tree](https://camo.githubusercontent.com/cd9c4e0c3502ba1caf93cfedb2efabfbfdf18906/68747470733a2f2f6a6f656c6e65656c792e66696c65732e776f726470726573732e636f6d2f323030382f30342f666f6c646c666f6c6472312e6a70673f773d33393826683d323030).",1516831662.0
non-private,"`/:` : https://www.scala-lang.org/api/current/scala/collection/immutable/List.html#/:[B](z:B)(op:(B,A)=%3EB):B",1516887323.0
5hredder,This is hilarious,1516816302.0
,"You have [at least] three choices here.

1. Write them all yourself. I recommend this as it's a good exercise. Note that everything you can do with a cons list can be done in terms of `foldRight`, so if you define that first you're off to a good start.
2. Extend a stdlib collection type and inherit the implementations. I don't recommend this because it's basically impossible.
3. Use [cats](https://github.com/typelevel/cats) and implement a `Foldable` instance. This will give you a bunch of operations including those you mention. This is the best option but it may require some language features that are unfamiliar to you.

Good luck.

",1516809974.0
scalaprog2518,"Not sure what your total goal is, but you mentioned building your own ""myList"" and curiosity about giving definitions of `foldLeft` and `foldRight`.

If you are interested in learning more about the topic, and if you can get a copy, check out the book [*Functional Programming in Scala*](https://www.manning.com/books/functional-programming-in-scala). It is available in a number of forms. For example I am reading it through my company subscription to [Safari Books Online](https://www.safaribooksonline.com/library/view/functional-programming-in/9781617290657/).

By ""Chapter 3. Functional data structures"" there are already examples showing `foldRight`, plus an exercise (with solutions [online](https://github.com/fpinscala/fpinscala#readme)) where you will write your own `foldLeft` for a custom `sealed trait List[+A]`.

n.b. when we actually need to _use_ `foldLeft` and others we just use the wonderful libraries provided by cats/scalaz/etc.",1516898125.0
vtscala,"> I built my own scala class named ""myList"" which has no mention of scala inherent List class. Thats basically means i cannot use monoids and call foldLeft etc on myList ? Do i need to give defination for foldleft and foldright functions ?

Yes.  Your class doesn't define `foldLeft`, and doesn't inherit anything called `foldLeft`, so it doesn't have a member called `foldLeft`.  Trying to access a field or method that doesn't exist won't (and shouldn't) compile.

 ",1516816141.0
agbell,Here is an interview I did with Debashish.  I like way he is trying to codify functional domain modelling and present the functional paradigm in a way that makes sense to people who are more experienced with a traditional OO/DDD approach to structuring software.,1516747774.0
sciss_,"I would strongly recommend not to support [Scalalab](https://github.com/sterglee/scalalab); the mess of the codebase notwithstanding, since several years the author pisses on open source projects, simply ignoring their license terms. It's not a coincidence neither the SourceForge project site nor the GitHub repository contain the word ""license"". If you look into his ""collection"" of stuff in lib, you easily find GPL'ed things (JFreeSVG to give an example) that require much more care than just dumping them into a fat jar. Plus multiple libraries whose code is simply pasted into the src directory without mentioning, including an edited version of my own ScalaInterpreterPane code which violates the terms of the LGPL.

I find that attitude very disrespectful of open source.",1516728152.0
joshlemer,"Thanks for the write up, but I have no idea why anyone would be recommending Spray (especially when also recommending Akka, which absorbed Spray), when it is literally officially dead and has been for 3 or 4 years.  
  
In big bold letters in a pop up on www.spray.io:
>spray is no longer maintained and has been superseded by Akka HTTP.
Please check out the migration guide for help with the upgrade.
Commercial support is available from Lightbend.",1516722029.0
rorlov1812,Nice!,1516718327.0
ud3p,"interesting, thank you!",1516718460.0
icemanx7,Is there any Scala data science library that supports 3D matrices?,1516865759.0
osamc,"Seriously, article about libraries without no direct links to libraries?",1516787650.0
strawman53,"I know this is an old thread, but I just saw that plotly has a Scala API now too. https://plot.ly/scala/getting-started/",1518656468.0
CatpainCalamari,"Upvote for the name alone, it's perfect. And I hate you a little bit for coming up with it and not me. ;-)
As for the code, I'm on mobile atm, I'll check it out later. ",1516731920.0
parc,"> Every event must be processed, zero lost events.

This is not a situation that Akka alone is going to be good at.  You're going to need a queue of some sort.  The typical suggestion would be Kafka for durable queuing.  You could also use Akka persistence.  Both can be wired up to streams.

> Our second problem is since the service itself is reading the events, we can't run replicas 'cos each one is subscribing to the same stream, and processes the same events.

You should rethink this.  To give more color on that: if you only have one Sink for your Source, why are you even bothering with the stream to begin with?  If it's for durability, you already know you aren't getting the job done.

More details would be good, but at first blush you need to analyze how you can properly parallelize your processing of requests.
",1516640703.0
havok2191,"Could you describe your pipeline some more? It's a bit vague right now. Please tell us where you are using Actors, Streams, etc.
Visuals would help :-)",1516636866.0
depleteduraniumftw,SQS,1516639471.0
Mimshot,"Honestly, the best open source project to contribute to is one that you use every day. Anything you use enough will eventually annoy you in some way that seems like someone should have made that easy fix. That someone is you, and that's the project you contribute to.",1516673020.0
joshlemer,"The Scaladex has a ""contributing search"" feature [here](https://index.scala-lang.org/search?q=&contributingSearch=true)",1516632752.0
Avasil2,"There are a lot of easy issues in [frameless](https://github.com/typelevel/frameless) like [issue 163](https://github.com/typelevel/frameless/issues/163) and [issue 164](https://github.com/typelevel/frameless/issues/164) about implementing missing operators.
   
Those shouldn't be very hard and if you get stuck - there are many people willing to help :) Just join typelevel/frameless gitter channel and say hi.
   
You can also pick your favorite libraries and either check issues for ""beginner friendly/low-hanging fruit etc."" (I did that with monix a while ago and now I'm pretty active contributor, yay! :))or just say hi in respective gitter channel and I'm sure people will try to guide you!

",1516643687.0
dtechnology,"The best thing to do is contribute to an open-source library you're actually using within a project. You'll identify the problems/irritants in it and can solve them for yourself and everybody else.

If there are no candidates from that, pick something in an area you have expertise in or are interested in.",1516702114.0
Krever,One of the easiest way of contributing is joing one of the [scala sprees](https://github.com/scalacenter/sprees). Sadly they are not so often but its a very nice way to work on opensource when you are a newcomer.,1516694407.0
tektektektektek,"This question sounds like a ""I want to get my name on Open Source so I become more attractive to potential employers"" question.

It concerns me because surely you want to make *positive* contributions to Open Source for the benefit of *other people*? In which case wouldn't you prefer to become more skilled in the language, or more invested in the particular project, before making a carefully considered and helpful contribution?

I am very much an enthusiast of contributions to Open Source - because of the potential benefit to society as a whole - and as a thank you for the effort other people have made that has benefited me, personally, so much over the years.

But I'm not going to start recklessly submit patches on a product I don't understand well or in a language that I can only navigate through [programming by coincidence](https://en.wikipedia.org/wiki/Programming_by_permutation).

I would suggest a better question for a beginner would be ""what is a beginner friendly Open Source project I could learn from?"" - and have patience, when it becomes time for you to make contributions you'll know.",1516695313.0
Vinay2310,How can I better understand the concept of Future,1516636048.0
DontKarmaMeBro,"So, I am using this debugger in intellij. I just press the debug run button, put in my breakpoints, and it all just works. Why does it work? Is this debugger sbt related? Is it just from the scala plugin and agnostic of sbt? ",1516746672.0
tombraideratp,"has anybody used scala in Online interviews with tech companies like Facebook, google or competitions like HackerRank and Codecheff where we have to solve 2-3 question in 1 hr time? what was your experience with coding interview in Scala?

For example  some online interviewer asked me to code Fibonacci series sum with memoization , i am able to complete it in 30 minute using java imperative with hash table optimization but , i find it hard to believe it can be done in scala way of functional thinking . Is cracking online interview in scala difficult? or shall we keep other language like python and java for online competitions?",1516892637.0
baczkob,Thanks! After year of Java programming I was curious about Scala and you are of a big help :) ,1516664079.0
,"You don't need any category theory (or abstract algebra in general) to use cats, but if you want to understand the rules, like *where do the monad laws come from?*, then it can be helpful to understand a little bit of the mathematics. None of it is hard though; this is very very basic stuff we're doing. 90% of what you might need is in Chapter 1 of any CT book.",1516560089.0
mcaruso,"Like others have said, you don't *need* to know category theory at all.

But just in case anyone here *wants* to learn category theory, I can recommend Bartosz Milewski's [Category Theory for Programmers](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/).",1516552219.0
fromscalatohaskell,Not at all. You can use it just like any other scala library. Except this one will work more often.,1516545169.0
Zynque,"Everyone says you don't need to know Category Theory to use Cats (or Haskell, or understand the monad etc.) and to a certain extent that may be true, but man it sure helps! I struggled for years trying to understand these concepts, but my brain seemed to keep fighting back, wanting to know the deeper meaning behind all that funny terminology. After learning a bit of Category Theory everything all fell into place. I highly recommend Bartosz Milewski's blog and YouTube videos. https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/",1516554617.0
colindean,"It is certainly a thing that is useful when carefully applied with the agreement of your team but it can be very confusing to people who have not studied it for quite some time. Category theory is not that important to a new or even seasoned Scala developer. I view it as kind of a next-level type thing that can greatly improve the functional side of programming in Scala at the expense of readability and approachability. If those trade-offs are worth it then by all means, bring in cats or Scalaz.",1516550446.0
Milyardo,"Depends on how you define ""knowing' category theory. Having a strong sense of diction on the subject is one thing. Actually being able to solve original problems by applying category theory is another. Even among the many Scala developers who are quite familiar with with the former, would be in unfamiliar territory in the later. For using cats most people would probably say having the former is all that is necessary.",1516571971.0
m50d,"Nullability as a special case in the language model is a terrible idea, because it doesn't compose properly in generic cases. (In fact, this case has convinced me that union types in general are a bad idea). Kotlin will never be able to have an information-carrying result type that can be used the same way as an absence type, which is an incredibly common way for a codebase to evolve (i.e. you start out by using `Option` but then you realise you need to carry a reason/explanation in the ""failure"" case, so you switch to `Either` - in Scala this is a couple-of-lines change).

I prefer words to symbols for type names, so I think `Option` is probably better than `?`. And while I like short syntax, I don't think `?.` is common enough to justify a special case in the language; certainly what I've found when maintaining code that works with futures is that Future-specific operations are more confusing than the general-purpose `for`/`yield` even in cases when the latter is slightly longer. A language has a syntax budget and a semantics budget, and it's worth holding on to both for the most general use cases you can.",1516617127.0
colindean,"There are times that I wish that Scala had the nullable `?` operator _strictly_ for when dealing with Java libraries that could return null. I think that it could be a better indicator that ""a null can be expected here"" than wrapping nullable returns in an Option, which could hide the acknowledgment of the legacy null return value.

However, the `?` operator would end up getting used too often and Scala's ""don't ever use null, and abstract it away when it is given to you"" would fall by the wayside.",1516506457.0
kodablah,"Half like it, half hate it. 

I like some of the guarantees. I like the elvis operator and the chained null-call operators (e.g. `foo?.bar()?.baz ?: error(""fail"")`). One place where the null checks did shine for me recently was in Kotlin Native with nullable `CPointer` values.

I hate that some of the guarantees are thread-safe strict (i.e. if you check that an instance's property is non-null, it isn't assumed it is non-null after that like it would be with a local variable). I also hate that they inject bytecode to maintain some of the null accuracy at runtime. I hate some of the other oddities (e.g. `foo?()` and `foo?[i]` don't work on a nullable function/indexable last I checked, you have to `foo?.invoke()` or `foo?.get(i)`). Finally, I hate that they have to have `map` and `mapNotNull` because they can't use `flatMap` because nullability isn't like an option.

Now smart casts? Those are awesome.

I have written a ton of Scala and now a ton of Kotlin, so feel free to ask if curious.",1516516914.0
Arneball,"I like kotlin. T?.let { it.foo }
No box. No allocation of closure. No indy. No cognitive load. ",1516536599.0
balefrost,"For the most part, I like it. I think it only works because of ""smart casts"" (i.e. when a nullable reference is known to not be null in a particular branch, you can treat it as a non-nullable reference within that branch). Without smart casts, Kotlin's approach would be incredibly verbose. 

Kotlin's nullable types are like a very restricted union type. That means they don't nest like `Option` can. There is no such thing as `String??` - it's just `String?`. That can lead to some slightly awkward situations, like having a `Map<Int, String?>`. In Scala, the `get` method is able to wrap the key type in a layer of `Option` (so you might end up with an `Option[Option[String]]`). In Kotlin, that collapses down to `String?`. 

I think the lack of for comprehension syntax or ""do"" syntax makes nullable values a slight pain to deal with in Kotlin. The `?.` chaining operator is great for navigating a deep chain originating from a nullable value, but it doesn't help in the common case of needing to work with two nullable values. 

    val a: String?
    val b: String?

    //yuck
    val c = a?.let { aval ->
        b?.let { bval -> aval + bval }
    }

    //ahh... refreshing
    for {
        aval <- a
        bval <- b
    } yield a + b

All told, I feel like Kotlin's nullable types make a lot of sense when you look at Kotlin from the perspective of a Java developer. No, they're not monadic. No, they're not as pure as a solution involving `Option` (or even a solution with proper union types). But they directly solve a problem that Java developers have, using a representation that isn't completely alien for Java developers. I think making nullable types more first-class in the language is a good move: the `?.` operator probably couldn't be implemented on `Option` in Scala without direct support from the compiler. ",1516554887.0
alexelcu,"The ability to represent nullable types is orthogonal to `Option`.

After using TypeScript for a while, which can do `A | null` (untagged unions), I definitely miss them in Scala as well. Yes, it's a pain that the JVM has `null`, but as long as the JVM has it, then languages that want direct interop, like Scala or Kotlin, must represent it in the type-system. AFAIK untagged unions should be coming in Dotty.

Also idiomatic, high-level code should use `Option`, but `Option` implies boxing and sometimes a dev gotta do what a dev gotta do.

Just a sample from [monix's codebase](https://github.com/monix/monix) of ""null"" occurrences, which is an otherwise well grown repository by all metrics that count:

    monix$ grep -r 'null' . | grep -v target | grep -v ^Binary | wc -l
         926

Cheers,",1516639218.0
notenoughstuff,"I recall some arguments that it does not compose as nicely. I do not know how well it works with generics, for instance. Nullability is in some ways (as least as far as my very superficial understanding goes) a part of the type system of Kotlin, which increases the type system's complexity, and possibly also how it interacts with other features and parts of the language. And that is some of the philosophy of Scala, namely to try to have few fundamental abstractions that are very flexible and where the interaction between those few fundamental abstractions are well-defined and try to build upon those (the original XML literals are an example of a feature that runs counter to this philosophy). I think one of the important properties of a programming language is that it is true that for all sets of two or more of the features and functionalities in that language, the interaction between those features and functionalities is well-defined. And I believe that that property is the main weakness of macros and similar like bytecode generation, reflection etc. (though my experience with macros are very, very limited), since while you can keep the interaction between a macro and the core features and functionalities of a given language well-defined, two macros that were defined independently of each other do not necessarily have that property.

But, getting back on track I am not in any way an expert in Kotlin, so whether nullability works well in the language or not, and how it affects or will affect the language, I do not know.",1516510628.0
acjohnson55,"I'm a fan of nullables in application APIs and `Option`s in library APIs.  The former leads to more obvious code, but the latter leads to more composability. Looking forward to union types in Dotty so that I'll have the choice.",1516517142.0
replicacl,"The Kotlin null type system is more convenient than `Option`, because it is easier to write `Int?` than `Option[Int]`. And it interoperates well with Java code, so you needn't wrap/unwrap nullable values in `Option` sometimes.

The `Option` is just a type/class, so it is easier than adding a new syntax for a language to handle nullable type.

I think it is good for Scala to add a new syntax like Kotlin in the future, we can desugar `T?` into the unboxed `Option` or `T | Null` (Eclipse Ceylon does this) in Scala.",1516508056.0
fish-,"I think it sucks lol. Option, try, and either are much better",1516494975.0
philpee22,Seems like overall it's safer than Scala,1516496634.0
jackcviers,"According to /u/m50d it breaks parametricity

https://www.reddit.com/r/scala/comments/6ee77n/scala_vs_kotlin/diagwtz/",1516685116.0
Milyardo,"Constrain `F` to `MonadError` like this:

    def bracket[F[_], E, R, A](open: F[R], close: R => F[Nothing])(f: R => F[A])(implicit F: MonadError[F, E]): F[A] =
      for {
        resource <- open
        attempt <- f(resource).attempt
        _ <- close(resource)
        a <- attempt.fold(F.raiseError, F.pure)
      } yield a

EDIT: Example usage:

    def openFile[F[_] : LiftIO](path: String): F[File] = IO(new File(path).liftIO
    def closeFile[F[_] : LiftIO](file: File): F[Unit] = IO(file.close()).liftIO

    def withFile[F[_]: LiftIO : MonadError, A](path: String)(f: File => F[A]): F[A] =
      bracket(openFile(path), closeFile(_))(f)

    def myProgram[F[_]: LIftIO: MonadError]: F[Config] = for {
      path <- readConfigPath
      config <- withFile(path)(file => parseConfig(file))
      service <- connectToMyService(config)
    yield config",1516491599.0
CremboC,"Perhaps use cats effect and its IO monad?
```
for {
  res  <- IO(openResource)
  f    <- IO.fromFuture(asyncTask(res))
   _   <- IO(res.close())
} yield f
```
",1516489226.0
Judheg,"Found something that might be relevant for you : 

https://www.phdata.io/try-with-resources-in-scala/

Your  *callAsyncMethodWithResource* will not only need resource as parameter but also a way to close it. 
In Java try with resource accept Closeable interface, maybe that's also an idea to improve the article above to suite your need.
",1516533752.0
raghar,"Maybe some sort of variation over the load pattern?

    // normal load pattern for comparison
    def withResource[T](thunk: Resource => T): T = {
      val resource = ...
      try {
        thunk(resource)
      } finally {
        resource.close()
      }
    }
    // use like: withResource { resource => doStuff }

    def withResourceFuture[T](thunk: Resource => Future[T]): Future[T] = {
      val resource = ...
      val future   = thunk(resource)
      future.onComplete { _ => resource.close() }
      future
    }

Then you could do like something:

    for {
      x <- doSomething
      y <- withResourceFuture(callAsyncMethodWithResource) // handled closing resource for you
      z <- doSthElse
    } yield result
withResourceFuture {}",1516492721.0
joshlemer,Removed because this is already linked to in the sidebar and is of cours an ad,1516464824.0
sjrd,"Oh seriously? Yet another blog post on a union type that is strictly inferior (in terms of user experience) than the one in Scala.js ([source](https://github.com/scala-js/scala-js/blob/master/library/src/main/scala/scala/scalajs/js/Union.scala) and [tests](https://github.com/scala-js/scala-js/blob/master/test-suite/js/src/test/scala/org/scalajs/testsuite/library/UnionTypeTest.scala))?

They mention in the beginning that their original thing used implicits that were constructive, and that is why they had issues with it. The implicits in Scala.js do not have this problem, yet are able to encode commutativity, associativity and more (covariance).

Moreover, the union type of Scala.js solves all the restrictions mentioned in the conclusion. And to top that, it can be used straightforwardly in any place where a type is accepted (including in type parameters), without all the typeclass noise.",1516472849.0
dima_mendeleev,How does this compare to [Miles solution](https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0#coproducts-and-discriminated-unions)?,1516623249.0
beezeee,Is it me or does this look a lot like just using a Reader monad.,1516642960.0
GoAwayStupidAI,Is there a paper that covers the implicit function types?,1516464599.0
Riny_Burkhart,"I'm a bit confused. Aren't the implicit functions described in this talk completely equivalent to declaring fields in a class?

Fields are essentially an implicit parameter that functions can reference without that parameter being passed to them, explicitly or implicitly. It seems to me this new functionality is just a more cumbersome and convoluted version of fields.

What am I missing?
",1516483945.0
enpassant2,"Implicit parameter is very powerful solution. => **Don't use it!**

*Why?*

[Principle of Least Power](http://www.lihaoyi.com/post/StrategicScalaStylePrincipleofLeastPower.html) (a.k.a KISS, Occam's razor, YAGNI, Worse is better, Less is more, ...) is (are) the most important principle.

If you have a less powerful solution, use that!

There are many of them (by Li Haoyi) (from less powerful to most):

1. First, hard-code the dependency

2. Second, pass it as a parameter to the method which needs it

3. Third, inject it into multiple methods by passing it into a containing class

4. Fourth, if your containing class is split into traits in multiple files, use abstract members

5. (Fifth, make the method parameter implicit)

and others:

* use simple Monads (maybe slower)

* Publish/Subscribe

* Actors

* Free, Reader monad (maybe slower)

* Tagless final (maybe slower) ",1518104395.0
Daxten,"something like jtidy? 

http://infohound.net/tidy/

it's implemented in java",1516363487.0
justinpitts,"It's a perfectly fine language to do so in. Lots of people have published image processing libraries for Scala, many of them purely functional. Go for it, and tell us how you do!",1516329346.0
colindean,"I can't speak to the libraries, but the operations I think are something Scala can do pretty well. You can build a pipeline using what are effectively composable functions that operate on input image data and output a result.

Scala Streams might lend itself to this, although it's meant more for text data.",1516330323.0
,"Sure, why not? You might look at [PureImage](https://github.com/stephenjudkins/pureimage) for inspiration.",1516333332.0
sciss_,"Scala is a good choice, you can balance performance and expressive API.

[Here](https://github.com/Sciss/FScape-next/blob/0103085728e9fe04c892eec914b5a4537d5b3c36/core/src/test/scala/de/sciss/fscape/ImageFileOutTest.scala) is an example of system I built on top of Akka stream - it targets audio processing, but image processing works as well. [This](https://imgur.com/a/wwNEn) is the picture generated by the example.",1516357179.0
elasticbuttreduce,"Not really, image processing is a lot of bit manipulation and side effecty stuff. Not really something Scala was made to do. I did a bit and I'd say it's a lot easier in other languages.",1516328564.0
ripoffman,"/u/irregular_regular have you tried the [readme](https://ssl.icu-project.org/repos/icu/tags/release-60-2/icu4j/readme.html#download), or [this](https://maven-repository.com/artifact/com.ibm.icu/icu4j/60.2)?",1516311749.0
,[deleted],1516312487.0
kpws,"0. It's not Java
0. It's not Kotlin
0. It's not Groovy
0. It's not JavaScript
0. It's not PHP",1516324859.0
bannerad,"1.  Scala pays well
2.  It runs on the JVM but the syntax is more ""dense"" than Java.  Less code to get the same stuff done.
3.  You like to take breaks because your code is ""compiling"" (https://xkcd.com/303/); I don't think there is anything in the tech world today slower than SBT
4.  Scala pays well
5.  Scala pays well",1516321141.0
sudkcoce,"1. Because it will make you a better programmer

2. Because you will start enjoying your job

3. Because you want to use functional programming and avoid all the boilerplate and incidental complexity

4. Because you want to be expressive and produce readable and concise code

5. Because you always lurk enviously towards Python coders and want similar experience while having static types ",1516341402.0
ChrisNH,"I went to it for my school projects because it runs on the JVM (cross platform including Pi,  decently fast), supports a lot of the cool syntax and reduced punctuation of Python, and has the pattern matching I loved from OCAML.

ed: Also has some fun concurrency models (akka, futures) which is something of a fail for Python.",1516310169.0
parc,"Because it mostly works with all that java code the Corp already has. 
Because it makes you think THEN code. 
Because it’s the easiest procedural Java to functional path you can take. 

That’s not five, but I’m on mobile so that’s all you get. ",1516313721.0
Scf37,"1. Modern best practices with less lines of code: immutable classes, final vals and fields, nice closure syntax, local functions, by-name method parameters (bye-bye builders!), concise testing stubs and more
2. Scala collections. Language advantages makes them much more powerful than Java/Guava counterparts.
3. Scala technology. Java really lags behind in asynchronous programming. Scala has better high-performance async networking libraries. ScalaJS is also very promising for enterprise applications.
4. experimental language: compile-time macros, complex type system, implicits. While it hurt newbies if overused, it can be used to  solve complex software problems.
5. FP language. While I'm yet to see production-quality application on pure functions, it certainly has its uses.",1516432990.0
SL4M_DunkN,"Scala introduces variant types, which in turn allow you to avoid null pointer exceptions, handle errors across scopes, etc cleanly. That said, they aren't quite sumtypes, scala uses a weird case class syntax for them, and I actually recommend the reason documentation for learning variant types over scala's. 

Scala will soon support the three biggest compiler targets in the world.

Scala's type system is less cumbersome than most.

I ran out of things other people haven't said...",1516371644.0
m50d," 1. ML features
 1. Higher-kinded types
 1. Safe generic object graph traversal (shapeless-style typeclass derivation)
 1. Strict evaluation
 1. A decent library/tool ecosystem

Plenty of languages have most of these, but I think Scala's the only one that combines them all.",1516373668.0
,"I got into Scala because it was a functional language that is also a practical OOP language. I worked enough with Java to know OOP with static typing leads to maintainable systems, but with Java there is so much boilerplate that it obscures the actual intent of the code. Scala was like Java++. That is all before you get into the FP features borrowed from Haskell.

Scala is also really nice for analytics. A lot of 'big data' analytics tooling has great Scala support and the language itself makes it easier to do distributed computing especially with patterns like monoid. I can't imagine doing analytics in another language after using Scala for a while.",1516661947.0
Balduracuir,Nobody talked about clojure? What is the main advantage of scala compared to clojure?,1516400134.0
PrimozDelux,It's webscale,1516311894.0
thesuperching,compare Scala to Javascript https://www.scala-js.org/doc/sjs-for-js/es6-to-scala-part3.html  I choose Scala.,1517025482.0
,"The immediate problem is that you're trying to use the `+` operator on an arbitrary type and you have not defined what it means. So you end up invoking an implicit conversion called `any2stringAdd` which lets you add strings to things, which not only is unhelpful but it doesn't typecheck. This is widely considered to be a misfeature.

The second problem is that your method doesn't work for empty lists. Ideally you would want to return some kind of ""zero"" in that case.

So, if you want a generic ""sum"" method you have to define what `+` means *and* what zero means for the element type `A`. There is an abstraction that does this, called a monoid. I have an example [here](http://tpolecat.github.io/2013/10/12/typeclass.html) that walks through how you can model this in Scala.

Hope this helps. Good luck!",1516250814.0
havok2191,"The problem is that you are trying to add two types together (two As) and you haven't defined a way to add them together. This works intuitively for Ints but consider something arbitrary like Orders which could look like case class `Order(value: BigDecimal, quantity: Int)`, what now?

What you can do is abstract over this by specifying a function to combine two A's and return an A

    def fold[A](lst: List[A])(combine: (A, A) => A): A = 
        lst.tail.foldLeft(lst.head)((acc, i) => combine(acc, i))

The user needs to provide a way to combine those two types together. Now you use this like 

    fold(List(1, 2, 3, 4))((x, y) => x + y)

This pattern is in fact so common, there's a typeclass called `Semigroup` which functional programming libraries like Cats and ScalaZ provide which defines how to combine two types together. Here's a Semigroup typeclass implementation for integer addition

    implicit val intAddSemigroup: Semigroup[Int] = new Semigroup[Int] {  
        override def combine(x: Int, y: Int) = x+ y 
    }

    def fold[A](as: List[A])(implicit sg: Semigroup[A]): A =
      as.foldLeft(as.head)(sg.combine)

    fold(List(1, 2, 3))

underneath the hood, this becomes `fold[Int](List(1, 2, 3))(intAddSemigroup)`

Typeclasses are a form of ad-hoc polymorphism. Hope that helps",1516251051.0
joshlemer,"Hey there, the problem is that we don't know at compile time that any type `A` has addition (`+`) defined on it. What you are going to need to do is put a constraint on your type `A` that ensures that addition is defined on it. The two typically used ways of doing this in scala are the following:  
  
1) Type bounds:
This approach ensures that your type conforms to an other type in a subtyping relationship. You would have to do something like defined a trait and program to that trait:

    trait Addable[A] {
      def + (that: A): A
    }
    def sum[A <: Addable](lst: List[A]): A = { 
      lst.tail.foldLeft(lst.head)((acc, i) => i + acc) 
    }  
  
However this has the downside that your list only works for things that explicitly extend Addable. It doesn't even work for `Int`'s, unless you wrap each in a wrapper like   
  
class IntAddable(i: Int) extends Addable[Int] {
  def + (that: Int) = new IntAddable(i + that)
}
sum(List(1,2,3).map(i => new IntAddable(i)))  
  
2)  Type classes

you can encode the type class pattern using scala's implicit search mechanism to define this `sum` method for any type for which an `Addable` exists like so:

    trait Addable[A] {
      def add(left: A, right: A): A
    }

implicit val intAddable: Addable[Int] = new Addable[Int] { def add(left: Int, right: Int): Int = left + right }

    def sum[A](lst: List[A])(implicit addable: Addable[Int]): A = { 
      lst.tail.foldLeft(lst.head)((acc, i) => addable.add(i, acc)) 
    }  

in fact this is such a common pattern in scala that the language has built a special syntax for this (which you don't have to use if you don't want to)

    def sum[A: Addable](lst: List[A]): A = { 
      lst.tail.foldLeft(lst.head)((acc, i) => implicitly[Addable[A]].add(i, acc)) 
    }  ",1516251601.0
expatcoder,"Lift is more or less dead, though they still have some active users (check their google group, or gitter channel if they have one).

All of Play, Scalatra, Http4s, and many other web/rest frameworks in the Scala ecosystem will likely fit the bill for your project requirements.",1516237050.0
rzdallaway,The best way to get help is to get on the Lift google group: that’s the project’s preferred way to talk. See: https://liftweb.net/community,1516311424.0
v_krishna,"Out of curiosity is that a pretty standard salary for ""senior engineer"" in Germany? I haven't been to Berlin in almost a decade but would assume it's as expensive as the sf bay area or Boston, but I'd expect a senior engineer position (esp for something a bit niche like Scala) would pay at least 50% more in either of those places...",1516210839.0
jcgretton,Great! Are they open to relocation within Europe?,1516199103.0
monumentshorts,"We do something similar except we load overrides from s3. The idea being a config is alwaus a Relodable[T] and the current config is a merging of the application conf and remote Hocon. Then you just use hocon fallbacks to merge the configs together in priority order and behind the scenes periodically poll an s3 bucket.  Secrets are managed by public private key decryption. Services are loaded with a public key and secrets encrypted with the private.  Since remote configs are always a nice to have and should be able to fall back to the default, if you cycle the secret keys you just need to redeploy with the update key you need ",1516332330.0
hebay,"I would add two things:  
1. adding a random but small timing factor between each retry could lead to better performance.  
2. it is simple to abstract a function that let you retry any operation based on another function that identifies retryable errors, I've used this approach for SQL operations.",1516159620.0
havok2191,"Monix Tasks are also another great option
https://monix.io/docs/2x/eval/task.html#restart-on-error",1516204975.0
colindean,"Oh man. I implemented an exponential back off Library in Scala at my last job. We were using it in a minor product. I wanted to open source it but never got around to filing all the paperwork.

It was based off of a Java version in a product moving potentially hundreds of terabytes of data across our customer base. 

",1516163703.0
dtechnology,"If you already have akka, just use the exponential backoff supervisor or akka-streams operator.",1516171341.0
kevin_meredith,Perhaps it's related - https://gist.github.com/viktorklang/9414163.,1516452056.0
jackie_pwn_asses,"Hey, thanks for this. I'm not a backpacker so I'm not super interested in the product, but I *am* just getting started with the ""typelevel stack"" and seeing a relatively finished application is really helpful. 

I've only been looking for a few minutes and this looks great. *Immensely* helpful. I am going to steal so much from this!",1516162235.0
volpegabriel,"For those not very familiar with the Typelevel stack, this project is written in a 100% FP Style (or at least most of it) using libraries such as Http4s, Circe, Cats Effect and Doobie (part of Typelevel) and also Fs2, Tsec (these two also based on latest version of Cats) and Shapeless.

https://github.com/SmartBackpacker/core",1516219551.0
agbell,"Here is an interview I did with Runar, co-author of functional programming in scala.  I think I failed at pronouncing his name, but succeeded in having a great discussion with him about functional programming.",1516060924.0
sonac007,"Great, was just recently looking for some scala podcast",1516095170.0
Avasil2,"I don't contribute to Scala Native but I think joining scala-native/scala-native gitter channel and asking the very same question might do the trick :) 
        
From my experience people from open source communities are very friendly and don't mind hand holding new contributors.",1516021246.0
Doikor,Probably worth mentioning that [union](http://dotty.epfl.ch/docs/reference/union-types.html) and [intersection](http://dotty.epfl.ch/docs/reference/intersection-types.html) types are coming in as language features in Dotty,1516022745.0
sjrd,"That is a very old trick, which has been superseded years ago by the encoding of the union type in Scala.js:

Source: https://github.com/scala-js/scala-js/blob/master/library/src/main/scala/scala/scalajs/js/Union.scala

Tests: https://github.com/scala-js/scala-js/blob/master/test-suite/js/src/test/scala/org/scalajs/testsuite/library/UnionTypeTest.scala

Advantage: doesn't need an additional complicated implicit parameter everywhere you want to receive a union. Instead, just have

    def foo(x: Int | String): Unit = ...

and call it with

    foo(5)

or

    foo(""hello"")",1516045314.0
copopeJ,"Is there a good source for understanding how to read the symbolism here? I've got a background in formal logic, and so I know things like DeMorgan's law, and I work with Scala every day, but I just can't see through the symbolism in this post to understand what's actually happening.",1516080102.0
justinpitts,"[Kilowatch-collector](https://gist.github.com/justinpitts/162e9ec7847ea09870c0b89e402e553e) is something I whipped up last weekend to make use of [ Itron AMR decoding](https://github.com/bemasher/rtlamr) and grab readings from my power meters.

It is a [Ammonite Scala Script](http://ammonite.io/#ScalaScripts) and it uses [Doobie](http://tpolecat.github.io/doobie-scalaz-0.4.2/00-index.html) for the database insert. Thanks to Li and Rob.",1516023218.0
adrice727,"I recently started working on [firebase4s](https://github.com/firebase4s/firebase4s), a Scala Firebase SDK.  If you take a look at this [blog post](https://medium.com/@RICEaaron/scala-firebase-da433df93bd2) about using the Java SDK with Scala, you can see that there is a lot of boilerplate required.  The biggest pain point is that you can't directly use case classes and need to first convert them to JavaBean classes when setting values (and vice versa when getting).  My plan is to make everything more Scala-friendly and to enable to use of case classes via macros. 

**Update** 

I published an early version (0.0.1) to Maven. If anyone is interested in working on the project, send me a message here or on [gitter](https://gitter.im/firebase4s/firebase4s).      ",1516036886.0
wolfendale,I’ve been working on a library to generate scalacheck generators from regular expressions https://github.com/wolfendale/scalacheck-gen-regexp,1516049860.0
DanielShuy,"I created a SBT plugin for SBT plugin authors to test their SBT plugins using ScalaTest:
https://github.com/daniel-shuy/scripted-scalatest-sbt-plugin",1516275313.0
the_true_potato,I'm writing a small programming language called [Raza](https://github.com/mpardalos/Raza) as a learning project. I have never used Scala before (or any functional language) but I'm trying to write as idiomatic code as I can.,1516035568.0
AlexITC,"I was building some ADT for representing filters for a collection, specifically  I wanted to be able to support http query parameters like `key:true,anotherKey:*` and then use the typed filters to query my SQL schema, it has worked surprisingly well until now.  
  
I'm trying to get a clean and simple way to reject repeated filters, like `key:true,key=false`.  
  
The ADT: https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/models/FixedPriceAlertFilter.scala  
  
The parser: https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/parsers/FixedPriceAlertFilterParser.scala ",1516043554.0
joshlemer,"I was trying to port [sttp](https://github.com/softwaremill/sttp) to scala-js, but as it turns out there are quite a few things in the JDK that are still unavailable in scala-js (particularly, the `java.net` package, which can be [pretty hairy](https://github.com/softwaremill/sttp/issues/57) to rewrite (without looking at the original source that is)). 

",1516043589.0
zero_coding,"Hi all   
Could someone please explain to me, for what is the libs https://github.com/non/kind-projector good for?   
Thanks
",1516549949.0
yaroslav_h,There is typeclass Parallel for that kind of things,1516011234.0
Baccata64,"The way the traverse instance is implemented in `cats` will run the Futures in parallel, because the futures will be instantiated before being flatmapped. If you want a proof that it's the case, run 

    import scala.concurrent.{ Await, Future }
    import scala.concurrent.duration._
    import scala.concurrent.ExecutionContext.Implicits.global
    import cats.implicits._
  
    object Main extends App {
  
    val f: Int => Future[Unit] = i =>
      Future {
        Thread.sleep(1000)
        println(i)
      }
  
    val before = System.currentTimeMillis()
    val _      = Await.ready((1 to 10).toList.traverse(f), 5.seconds)
    val after  = System.currentTimeMillis()
    println(s""Ran for ${(after - before) / 1000.0} seconds"")
  
    }


I got 2.209 seconds. 

If you want pure functions, and rely on an `IO monad` implementation rather than Future, you'll have to use `Parallel`, which basically compose a monad implementation and an applicative that wasn't derived from that monad, in order to discriminate between when to run things sequentially and when to run things in parallel. ",1516011681.0
nerga,I don't know of anything like this specifically. I don't think there would be though. Specific Scala libraries that are more used would probably be something like spark or akka or Scala.js. But the thing is that Scalas big strength is the entire java ecosystem bring available. ,1515973275.0
Milyardo,"I had to look up what Anaconda was, and your description doesn't seem to match what it's website says. Either way from the Anaconda's website I think the closet analog would be Apache Spark.",1515990792.0
NinjaPirate9797,"Anaconda as a distribution is made up of packages, mostly from the scientific python community (IMO) — Numpy, scipy, matplotlib, etc. Creating your own Anaconda-like thing in python is pretty easy, write a `requirements.txt`, slap your name on it, and you’re golden (somewhat simplified).

In the context of scala, there doesn’t exactly exist a one-to-one mapping of python -> scala packages, so you have to roll your own. Pick some packages you like and build a fatjar — push that to your artfactory and you have your own “distribution”",1515997108.0
SubMachineGhost,"Hello there, give https://scastie.scala-lang.org a short, you can write, compile and save scala code online, you also have the option to add the libraries you want. ",1516002806.0
colindean,"There has not been a new episode in more than a year but

https://twitter.com/thescalawags

The podcasts are still available on most major services.",1515908151.0
smclean13,I'd recommend the lightbend podcast: https://www.lightbend.com/blog/podcast,1515934526.0
softiniodotcom,"This is a great podcast with some of its episodes related to Scala:

https://www.functionalgeekery.com
",1515944597.0
joshlemer,"While not strictly Scala related, these two podcasts are of excellent(!) quality and they do often have on guests to talk about Scala. They've even had Martin Odersky on 2 or 3 times.

http://www.se-radio.net/  
https://softwareengineeringdaily.com/",1515957545.0
agbell,"I have a fairly new podcast call CoRecursive:  https://corecursive.com/  It is not only about scala, but its been fairly scala focused so far.  The first 3 episodes I did as a guest host for software engineering daily, but I'm now doing my own thing.  Check it out and let me know what you think.  I have at new episode coming out soon about Functional and Reactive Domain Modeling with Debasish Ghosh and my last interview was with Runar Bjarnason about fp.",1516032229.0
enverest,Scala podcast in Russian: http://scalalaz.ru,1516033546.0
CyclonusRIP,Scala is a pretty crazy giant language.  Since it has so many features it's really hard to find many consistent rules for how people should write Scala.  Honestly the only way I've ever managed to convince anyone to change their coding style is just by leading by example.  Work fast and produce quality code and sooner or later everyone has to kind of ask themselves why you're so much more productive than they are.,1515885528.0
carlfish,"> ""I've seen what happens when teams write too many tests.""

In my experience, an institutional mistrust of automated tests is one of the strongest signals that code quality just isn't a priority, and if it's something you care about you're going to have a bad time.

If getting out isn't an option, I'd recommend letting go. Spend an hour a day before work writing code for a side project the way you would want to write code at work. At work, do your best to make sure the code you're responsible for is as clean and solid as possible, but don't waste emotional energy on battles you can't win, and don't create more work for other people by breaking team conventions.

Regular meditation might help too.",1515879941.0
Jacoby6000,"What the other people are saying is worth listening to. I'd also like to add, most companies doing Scala don't really do FP.  If they say they're doing FP, be very skeptical. Usually they mean they just like using lambdas, or they pulled in some libs that claim to be functional... regardless of how true that is. 

For example, some companies would say they're functional because they use akka-http. Akka-http barely scratches the surface of functional programming, and isn't easy to write functional abstractions for.  Directives are Monads, but not really. Well, technically they should be MonadErrors but they're not, because they have nonsensical constraints. This means if you're really wanting to do functional programming and use use akka-http, you'll just wind up confused. ",1515880289.0
aphexairlines,"Which best practices are you trying to push, and how are you going about it?

People don't like to change how they write software for its own sake.  Even ignoring colleagues or management, you may not be right about the changes being an improvement, so be explicit about the costs of changes when proposing them, not just the expected benefits.  A common technique in proposal docs is to write an FAQ section with questions the readers might ask -- it prepares you for when they do ask, and it shows that you've thought about different sides of the issue.

It's also easier to introduce systemic changes as a response to current problems (bugs, operational pain, etc) or as a means of accelerating some other upcoming work.",1515888131.0
channingwalton,"Your instincts seem to be correct, and you managers position is typical of someone lacking in confidence, expertise, and emotional intelligence. He'd rather shutdown conversation than learn from someone.

He is completely wrong to assert that the kinds of practices you suggest are ""anal, strict, and outdated."".

I've introduced Scala into a number of places over the last 10 years to so, and find that there are a whole range of reactions from the very enthusiastic to the hostile. I don't waste energy with the hostile any more.

I suggest you post here more often with specific issues so that we can help you help your team. Encourage them to come here too.",1515968966.0
,"> His responses were argumentative, and mostly along the lines of these best practices being (paraphrased) ""anal, strict, and outdated."" This wasn't just limited to PRs or FP, any time best-practices in general are mentioned he often uses it to take pot-shots including ""I've seen what happens when teams write too many tests.""

This is an office politics question.

Managers, CTOs, and team leads always have their limits of experience and knowledge, but they have to maintain their authority or they will lose control of the team, which may cost them their job. I have found that the best way to operate as an individual contributor to push people toward a best practice that you know is to be strategic about it.

Try to help your boss succeed instead of trying to run the team yourself. Know the difference between these two things. Don't get on your boss's bad side by coming out swinging and contradicting him constantly. Don't make your boss look weak or feeble in front of the team. Agree with him most of the time, especially on minor stuff, and disagree only when it's a battle worth winning. Start by introducing some of the concepts you are interested in during a 1-on-1 and frame it always as suggestions for how to improve the team, then start implementing it in your own work.

When you do offer criticism, practice the ""shit sandwich"" technique. Say something nice (""Our deploy process is working great""), then something critical (""I think we don't have enough tests""), followed by something nice (""The team works well together""). The sad reality is that you are never going to agree with your boss on everything. But most of the time you can make a case.

(That is, of course, assuming your boss is competent. If you're on a hopeless team, it's time to either give up and check out emotionally, or else start looking for a new job.)",1516054091.0
japgolly,"> I'm looking for good intermediate resources for learning Scala best practices including patterns, code-smells, what to do instead of the code-smell.

I think the best resource for you would be to buy and read [FP in Scala](https://www.manning.com/books/functional-programming-in-scala).

Also this is a good list of anti-patterns: http://www.wartremover.org/doc/warts.html

> Do you have any advice, or experience dealing with someone who likes Scala, but is constantly trash-talking best practices?

Understand them fully, then argue honestly and logically against their understanding. (When I say *honestly*, I mean that once you fully understand their PoV, you should be willing to accept that maybe they have a valid concern that you're not addressing. Often people just have different values in mind, say he/she's thinking project budget, you're thinking quality. In such a case trying to convince them that A is better than B for code quality is futile, but an argument that quality is important (because …) and can be achieved without blowing the project budget is likely to be much more productive.)",1515885197.0
elcric_krej,"> Do you have any advice, or experience dealing with someone who likes Scala, but is constantly trash-talking best practices?

If you have some minimum knowledge of C and C++, I can recommend you this talk:

https://www.youtube.com/watch?v=D7Sd8A6_fYU

It makes no mention of Scala, but it's the psychological tricks that an old contractor/mentor in the embedded space uses to convince people to switch from C to C++ (and from bad practices in C++ to better practices in C++). It also goes into details as to why it's hard to make people change their behaviors and biases (be that coding style, library, language, favorite political party or eating habits) and how to take a more ""zen"" attitude about the subject as to not go mad whilst trying to do so.

Sadly enough, making a team or even a single person change their coding style (even assuming all the changes you introduce are 100% positive), is going to range from hard to impossible depending on the team and person, that's just how human brains work (yours included), sorry :/

Also, remember that you are biased and are presenting the problem assuming you are 100% correct and the manager is 100% incorrect in his beliefs, which is likely not the object truth (if we can even define an objective truth). Generally speaking it serves well to see where your teammates are ""right"" and admitting defeat and encouraging them in that direction, since they will feel better about giving way to your advice in another direction.

(Sorry if the advice sounds a bit defeatist, but you seem to have a human problem more than a code problem, humans are very complex compared to computers and it takes a lot of effort and personal touch to make any one individual take actions in a certain direction)",1515928692.0
ChainReplication,"Honestly my opinion on the best way of how to write scala code that isn't a fucking mess is to learn a more strictly functional language and write your scala code like it's in that language. 

The majority of people who use this approach pick haskell, in my case I chose Erlang and Ocaml + SML.

If you write a lot of code using Akka, knowing OTP behaviours and thinking in modules can prevent you from writing an unholy mess of mixins.

If you do a lot of meta programming and have a lot of parametric polymorphism going on, well knowing haskell + the typelevel stack is probably the easiest way of going about it. 

If you want to write code that is very self contained and extensible and pretty functionally pure, while being willing to use OO when it's necessary and don't mind having a bit more boiler plate than doing things the Haskell/Typelevel way Ocaml  is the way to go and you can pretty much substitute objects with structs, traits with sigs, classes with functors, case classes with records, and type declarations everywhere inside singletons. 

Another approach is Twitters effective scala guide, which gives you a good comprehension of most of the major language features, and what should you use and how. 
",1516129955.0
Isvara,"You shouldn't have to compromise quality on some insecure person's say-so. Sounds like you need to discuss this with someone above him. Also, maybe seek advice on the Workplace Stack Exchange.",1515875709.0
midianite_rambler,"OP, you come off as bright, but a little full of yourself. Maybe you can consider that it's possible you don't know what's best for everybody else. Something to think about.

",1515898587.0
Scf37,"If you are newbie, just use Scala, forget about FP.

Scala is still immature language and there are no best practices everyone agrees on.

Good start will be to use modern Java best practices, Scala allows to implement them with little to no boilerplate.",1516131819.0
,"I looked at it briefly. From what I can tell it's just a bit of sugar around the Kafka streams client, it doesn't add any real functionality. Kafka Streams' client API is written for Java 8 so unfortunately it doesn't have a native Scala feel out of the box. If you look on Confluent's github account they have some examples in Scala that do some similar sugaring to make writing Kafka Streams apps more palatable.

On a side note, I like the Kafka streams lib, but I've found it very hard to work with if you can't run 2.12. The SAM conversions are extremely hard to puzzle out in <2.12.",1516055669.0
kpws,"Just a quick-and-dirty sketch to get you started:

    class SList[A] private (a: List[A], b: List[A])(implicit ord: math.Ordering[A]) {
      def isEmpty: Boolean = a.isEmpty && b.isEmpty
      def head: A = {
        if (a.isEmpty) b.head 
        else if (b.isEmpty) a.head
        else ord.min(a.head, b.head)
      }
      def tail: SList[A] = {
        if (a.isEmpty) new SList(a, b.tail)
        else if (b.isEmpty) new SList(a.tail, b)
        else if (ord.lt(a.head, b.head)) new SList(a.tail, b) 
        else new SList(a, b.tail)
      }
    }

    object SList {
      def apply[A: math.Ordering](a: List[A], b: List[A]) = new SList(a.sorted, b.sorted)
    }",1515857232.0
Baccata64,"There's a sorting algorithm called the merge sort that involves recursively splitting lists in the middle until you have two elements, putting them back in order, and building the list back up. It's fairly efficient, and is really easy to implement in Scala : 

https://en.wikipedia.org/wiki/Merge_sort
",1515938720.0
blackdew,"Usually you can easily convert from iteration with mutable state to recursion with immutable data... in your case i'd do something like

    @tailrec
    def mergeSorted[T](a: List[T], b: List[T], m: List[T] = List.empty)(implicit ord: Ordering[T]): List[T] = (a, b) match {
        case ((headA :: restA), (headB :: restB)) =>
          if (ord.gt(headA, headB))
            mergeSorted(a, restB, m :+ headB)
          else
            mergeSorted(restA, b, m :+ headA)
        case _ => m ++ a ++ b
    }

Note that if performance was a concern i'd have the list sorted in reverse orders to begin with then prepend instead of appending to the result. ",1516007896.0
niels_learns_python,"Generally when I see a problem that I would have solved with a `for` or `while` loop, I can solve this functionally using a recursive function in scala.

edit: I can come up with a solution with this format:

    val listA = List(1,2,5,6,2,3,1,5,6,2)
    val listB = List(6,3,7,7,8,2,1,2,5,1)
    def merge(as: List[Int], bs: List[Int], result: List[Int] = List.empty[Int]): List[Int]
    merge(listA.sorted, listB.sorted) // result single sorted list

Are you planning on creating a solution yourself, or should I just go head and post mine?",1515842867.0
quests,"I'm not sure this is worth anything in the eyes of any employer, but I liked it.  https://www.coursera.org/learn/progfun1",1515832988.0
TheEphemeralDream,I have never personally hired someone because they had a certificate.  IMHO if it would help you learn spark then it might be useful but the actual certificate itself is not necessarily very useful.  In the last two years I've done 57 interviews personally and my team has hired 15 devs who work on a 90% scala code base.,1515872604.0
merb,"Well this could've been easily prevent when following the following practise:

Never run a Method on the Future (like map,flatMap) within the same ExecutionContext the Blocking Code was scheduled. Always Thread switch.
If you're code is so performance critical you probably need to do it differently (like creating a fusing Future).
But always have a Application ExecutionContext and the ones for blocking Code, i.e. database execution, filesystem execution, etc.",1515758824.0
dolu1990,"This example is testing a dual clock FIFO by forking 3 simulation threads :   
- One to generate the two clocks  
- One to push data into the FIFO  
- One to pop data from the FIFO and check the value  

The `fork` is using coroutine instead of the native JVM threading. The reason is that their are way much faster to switch context.

The low level coroutine/Scala-continuation magic is there :  
https://github.com/SpinalHDL/SpinalHDL/blob/master/sim/src/main/scala/spinal/sim/SimThread.scala#L7

",1515710477.0
RandomName8,Did you have to target scala 2.11 because the continuations plugins is otherwise dead?,1515903421.0
pythonicus,What version of SBT are you using?,1515701851.0
joshlemer,"Please resubmit this question with a lot more details. We have no idea what you're talking about. What kind of application are you running? What are you trying to do? What sbt command did you run? What have you tried, in attempts to solve this? What are you even talking about??",1515691466.0
enverest,Look to the right block on this subreddit.,1515697127.0
mark104,Everything from underscore.io,1515659474.0
LimbMissing,It's possible to do the coursera modules individually for free. ,1515673759.0
dehun,"I have created free learn-by-doing course for functional programming on scala.
It is test driven - all tests are already written, and you have to implement stubs for functor, monoid, applicative, monad, monad transformer, traversable/foldable, free monad and pass that tests. 
Check it out at https://github.com/dehun/learn-fp/
It is more into advanced Scala though",1515680229.0
lutzh-reddit,https://scala.epfl.ch/#education,1515672508.0
thesuperching,"what you want to learn?
better Java or Functional programming?",1515678362.0
,[deleted],1515614204.0
lu4nm3,"I haven't tried it myself yet but in the release notes (https://developer.lightbend.com/blog/2017-11-30-sbt-1-1-0-RC1-sbt-server/?final?final#vs-code-extension) for sbt 1.1.0, they announced the availability of a new VS plugin that uses the new sbt server functionality: https://marketplace.visualstudio.com/items?itemName=lightbend.vscode-sbt-scala
Seems like it's worth a try.",1515601268.0
ancientmatingcalls,"Most used is this one but the reviews are pretty bad:
https://marketplace.visualstudio.com/items?itemName=itryapitsin.Scala#review-details

If you don't want to use that one, there's plugins for Scala syntax, sbt, and scalafmt.",1515595579.0
emilypii,">I also looked at Haskell, but I felt more confident with a JVM compiled language that could use all the existing Java libraries.

Boy is he going to be stoked to hear about Eta!",1515677045.0
doot,"""we love the jvm and debugging complex jvm issues""",1515615977.0
m50d,"Working cross-build in maven? Excellent, will be switching straight away. Can I use it to publish libraries for scala.js as well?",1515577273.0
,Try `(style: EggStyle)` ... the type name is uppercased.,1515519857.0
DJDarkViper,Yay for Spark! Love that little framework ,1515518735.0
jCalamari,"Were all the services running in docker, on single machine, at the same time, while the tests were executed? If this is the case, the results are unreliable.",1515516655.0
danO1O1O1,"Who still uses or chooses Spring? 

Edit: rhetorical question guys, calm down. I'm just glad I've never had a project to be stuck with it, so maybe I don't know. ",1515540224.0
Milyardo,What's your merge strategy for `reference.conf`/`application.conf`? You're probably discarding configuration file.,1515482046.0
beleaguered_penguin,"Are you using SBT 1.something? I ran into an unexpected 'akka' config error when upgrading. I never found the solution though, and abandoned it for a later date.",1515498192.0
softiniodotcom,"Try adding this to your build.sbt dependencies: 

""com.typesafe"" % ""config"" % ""1.3.2""

Explicitly including this in my dependencies fixed an issue similar to this before so doesn't hurt to try it.",1515501804.0
Cyph0n,"Sounds like you want to [transpose](http://www.mathwords.com/t/transpose_of_a_matrix.htm) the grid before flattening.

In Scala:

    val grid: Vector[Vector[Int]] = Vector(Vector(1,2,3), Vector(4,5,6))
    val transposed = grid.transpose // = Vector(Vector(1, 4), Vector(2, 5), Vector(3, 6))
    println(transposed.flatten) // Vector(1, 4, 2, 5, 3, 6)
    
Let me know if I misunderstood the question lol.",1515449492.0
shvimas,You could sequentially zip inner arrays and then flatten the whole structure,1515448514.0
CyberphobicDeveloper,Coursera would by my recommendation.  You can do everything but the certification for free and very in depth.,1515441615.0
drfisk,"I've only ever followed the Coursera courses. They're fine, but imo the fastest and most fun way to learn is by actually writing and playing with code. I recommend https://scastie.scala-lang.org for just getting started. 

Of course, you should probably have some reading/watching material on the side. Perhaps someone has a good book recommendation.",1515451535.0
loicd,"http://docs.scala-lang.org/ seems to be a good start, then http://danielwestheide.com/scala/neophytes.html is a excellent web site. 

This one could be very useful too : https://github.com/alexandru/scala-best-practices/",1515510201.0
Rohlowe,"There is a new update of SBT (1.1.0.1) which the fixes installer for Windows (I assume you are on Windows).

There was an issue with an environment variable in .bat file. If you want to change it yourself, change line 132 in <path_to_sbt>/bin/sbt.bat to:
    
    set rtexport=!SBT_HOME!java9-rt-export.jar",1515466470.0
nerga,I think you need to install java 8. I don't believe that sbt or Scala is working with java9 yet.,1515428322.0
Shinosha,"I had this issue just yesterday. How did you install SBT ?

This jar should be in the bin folder of your SBT install. I believe you have this problem because your SBT is not properly setup in your PATH. Maybe java9-rt-export.jar need to be in it too. ",1515430251.0
,[deleted],1515419253.0
Philluminati,"If I want to be a scala contractor in London (England) rather than a permy... how much work and demand is there around? If I were to secure a 3 month contact, would I expect to be swamped with offers afterwards or would it be a hard fight to secure another contract with me being unemployed for a time afterwards? What's the market like for Scala contractors at the moment? Can anyone reel off a list of companies that take scala developers in London? How important is LinkedIn for finding work?",1516097301.0
Szulcu,"Hi all,

I'm curious what's your opinion on [type all the things](http://jto.github.io/articles/type-all-the-things/) (the first paragraph) approach? This is something we've been doing in my previous company and we were more than happy. We used to have a separate, lightweight type (value class or tagged type) representing various entities in our system, e.g. user's age had a different type than user's tax identification number (even though the underlying value was still an integer). 

Even though it required writing more code, we liked the benefits: increased type safety, more precise validations, impossibility to represent a lot of illegal states, method signatures that often tell you all without looking at the name of the method, etc. Refactoring of such code was also a breeze - compiler was informing you of every place in your codebase where something ""isn't clicking"". 

In my current company however, we're not using that approach. I've tried to convince my colleagues and the team leader, but the response usually was one of: ""too much boilerplate"", ""too complex"", ""not beneficial enough"", ""unnecessary performance penalty"", etc. 

That's why I have a couple of questions to all of you:

1. What's your opinion on *type all the things* approach?
2. Do you use it in your commercial codebases? 
3. Are you concerned about the performance penalty of using it?
4. Do you think that even non-domain entities should have their own type? For example, should Kafka's port have a different type than PostgreSQL's port?

Thanks",1515450973.0
ryantheleach,"I've been revisiting Scala after a long hiatus, and people have asked me for help with this project: https://github.com/SpongePowered/Ore/tree/master/app/db

But I'm not 100% sure of what is going on in the db package.

Would anyone care to give a quick rundown/code review on what they are doing? 
The original developer is mostly unavailable for questioning due to timezones and work commitments.",1515655631.0
monumentshorts,"I’d like to know what the deal is with java 9 support. Java 10 is looming and it seems like scala can’t run on 9 without some hacks, or am I totally wrong?",1516332000.0
vitalijzad,"In the Scala interprester, is there a way to find the package of a standard Scala class starting from the name of the class?",1516356617.0
zero_coding,"Hi all
Could someone explain me, for what is `https://github.com/non/kind-projector`good for? 

Thanks",1515952672.0
zero_coding,"Hi all 

I have following function, that does not compile:

      private def save(pea: KStream[String, String])
      : Unit
      = {
        pea
          .groupByKey()
          .aggregate(() => """"""{folder: """"}"""""",
            (_: String, _: String, value: String) => value,
            EventStoreTopology.Store)
      }

the error message is:

    [error]   [VR](x$1: org.apache.kafka.streams.kstream.Initializer[VR], x$2: org.apache.kafka.streams.kstream.Aggregator[_ >: String, _ >: String, VR], x$3: org.apache.kafka.streams.processor.StateStoreSupplier[org.apache.kafka.streams.state.KeyValueStore[_, _]])org.apache.kafka.streams.kstream.KTable[String,VR] <and>
    [error]   [VR](x$1: org.apache.kafka.streams.kstream.Initializer[VR], x$2: org.apache.kafka.streams.kstream.Aggregator[_ >: String, _ >: String, VR], x$3: org.apache.kafka.common.serialization.Serde[VR])org.apache.kafka.streams.kstream.KTable[String,VR] <and>
    [error]   [VR](x$1: org.apache.kafka.streams.kstream.Initializer[VR], x$2: org.apache.kafka.streams.kstream.Aggregator[_ >: String, _ >: String, VR], x$3: org.apache.kafka.streams.kstream.Materialized[String,VR,org.apache.kafka.streams.state.KeyValueStore[org.apache.kafka.common.utils.Bytes,Array[Byte]]])org.apache.kafka.streams.kstream.KTable[String,VR]
    [error]  cannot be applied to (() => String, (String, String, String) => String, io.khinkali.eventstore.EventStoreTopology.Persistent)
    [error]       .aggregate(() => """"""{folder: """"}"""""",
    [error]        ^
    [error] one error found
    [error] (eventstore/compile:compileIncremental) Compilation failed 

the signature of aggregate is:

    <VR> KTable<K, VR> aggregate(final Initializer<VR> initializer,
                                 final Aggregator<? super K, ? super V, VR> aggregator,
                                 final Materialized<K, VR, KeyValueStore<Bytes, byte[]>> materialized);

And the `EventStoreTopology.Store` is defined as: 

    object EventStoreTopology {

      type Persistent = Materialized[String, String, KeyValueStore[Bytes, Array[Byte]]]
    
      val StoreName: String = ""EventStore""
    
      val Store: Persistent
      = Materialized.as(StoreName)

What am I doing wrong?    

Thanks





",1515419553.0
carlfish,I'd recommend hooking your favourite JVM profiler up to the sbt process and asking it where the time is being spent.,1515434377.0
raghar,"Have you checked how you run tests? What I mean:

 * I have several modules
 * because of reasons I run them as fork
 * then, when I run test SBT needs to run them by forking whole JVM, then initializing everything, then process ends, repeat

Such setup can slow down even very simple tests. Also *sequential* - this option prevents things from run in parallel, so it will make things slower.

I have it tests, where I needed to run things sequentially in fork, because of some Slick limitations. It made things noticeably slower, but without it tests were unstable.

What is your case? Could you tell something more about your setup?

edit: typos",1515416876.0
Falmarri,How long does `sbt compile` take?,1515461038.0
Maravedis,Oh my god those sbt server changes look awesome. I really hope I'll be able to leave Intellij soon! ,1515195127.0
zenhue,Can I use the LSP in Emacs? Ensime offen loose response.,1515477199.0
lihaoyi,"> 2003 - A drunken Martin Odersky sees a Reese's Peanut Butter Cup ad featuring somebody's peanut butter getting on somebody else's chocolate and has an idea. He creates Scala, a language that unifies constructs from both object oriented and functional languages. This pisses off both groups and each promptly declares jihad.

- http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html",1515216757.0
gmartres,"Check out https://www.artima.com/scalazine/articles/origins_of_scala.html.

The other articles in the same series might interest you too:

- http://www.artima.com/scalazine/articles/goals_of_scala.html
- http://www.artima.com/scalazine/articles/scalas_type_system.html
- http://www.artima.com/scalazine/articles/pattern_matchingP.html

Going further back, the paper introducing [Pizza](https://en.wikipedia.org/wiki/Pizza_(programming_language\)), arguably the direct ancestor of Scala, is also worth looking at: https://infoscience.epfl.ch/record/64384/files/popl97.ps.gz. My favorite quote from this paper is:

> We would like for Pizza to support tail calls [SS76], but this is difficult without support in the Java Virtual Machine. We hope for such support in future versions of Java.

It's been 20 years and we're still waiting :).  [But surely this time it's going to happen, for real!](http://mail.openjdk.java.net/pipermail/discuss/2017-September/004390.html)",1515249053.0
emilypii,"It was created as part of an unholy ritual in which a human soul, type safety, and a compiler were sacrificed in order to summon objects and JVM interoperability. ",1515187797.0
naftoligug,Can you explain better what you mean by derivative? Do you mean you want to create an entirely new language from scratch whose syntax and semantics are inspired by Scala? Do you mean you want to use Scala but modify it a little (like SBT and Ammonite)? Etc.,1515284192.0
,"Try googling ""history of scala""",1515187885.0
Jasper-M,"Your question sounds like you want to learn about the history of Scala and the conception of the ideas behind it. But I don't really see how that knowledge is relevant for making a derivative of Scala. 
If you are actually asking how one develops a compiler for a programming language, making a derivative of Scala might not be the best idea for now...",1515190933.0
philpee22,"Scala is supported in CoderPad, which is the interview tool I see used most often. But I find that dynamically typed scripting languages are best suited for the kinds of questions that interviewers tend to ask. ",1515181594.0
bunsandbunnies,"When I've asked to use a functional language I've been encouraged to use something concise like OCaml and Haskell (for the same reasons why Python is encouraged). 


I've only ever been told to explicitly write Scala by two small (5-15 employee) startups who said they would be fine if I wrote Java too.

EDIT: Fixed typo",1515181629.0
RegisPL,"We're recruiting mainly Scala devs, so Scala is obviously a must-have for any tool / editor (but we accept pretty much any modern language - it's about ability to solve problems, not about knowing any specific language; of course FP skills are massive plus, but not mandatory). Codility allows you to pick Scala and as much as I don't like these kind of tests, I have to say that their selection of languages is quite decent.",1515183911.0
colindean,"I will interview a candidate in whatever language they are most able to prove their skill in. I expect my developers to be able to learn just about any language at a speed commensurate with their experience.

That said, some of the best interview candidates I have seen did their technical portion, a pairing exercise, in Go or Scala. I gave offers to both. This does not necessarily mean that if somebody interviews with me in one of those languages that they will get an offer!",1515190600.0
runT1ME,"HackerRank supports Scala, that's what Verizon Labs uses for online screening. I imagine some other companies are using this option. ",1515192801.0
sukumaar,"It is not because companies aren't using scala but companies doesn't have any expertise on the same.

This happened in my current organisation too.",1515213553.0
,"My current job is using Scala, but I knew very minimal Scala going in so I interviewed in Java. I also knew some Clojure but I didn't bother trying to do the interview in Clojure because only one person interviewing me was knowledgable of the language enough to evaluate it. I did do a sort of pseudo-code Clojure program for a few problems to show that I had some background in a functional language.

For coderpad type phone screening tools, I tend to prefer to stick with a ""boring"" language like Java to avoid getting tripped up on syntax. There is a lot of boilerplate in Java but most interview questions can be solved in a way that avoids it.",1515528174.0
,[deleted],1515153640.0
acjohnson55,"One thing I didn't see mentioned was [Unison](unisonweb.org)-style programming where programs are type-safe ""by construction"", because the editor won't let you commit a line with a type error. Also, because it discards text-serialization, a whole bunch of programming language design conundrums become irrelevant. You don't need type annotations at all if the type information is just a property in the data structure you're editing. But that's just the tip of the iceberg. I definitely recommend giving some of the blog posts a read.",1515134234.0
theQuatcon,"Well, you can read more about it here: https://github.com/milessabin/shapeless

... but IMO, it's **usually** not a good idea to use it frivolously. The ideas, concepts, typeclasses, etc. are **GREAT**, it's just that it can cause absolutely insane compilation times (and various weird internal compiler failures).

The basic reason for this is that Shapeless ""abuses"" the compiler in the same way that e.g. C++ template code[1] ""abuse"" the compiler by recursively expanding to huge amounts of code. In Scala it's done through implicit search, but that's not really much better.

[1] Well, it used to be a crazy amount of abuse, but these days C++ has constexpr which helps to avoid the ""use-compiler-as-lambda-calculus"" issue.",1515101940.0
i_hate_pigeons,"If I have to go on what the final code looks like I'd say the poster took something that anybody that knows spark could easily understand and made it infinitely more complicated and hard to maintain, at least in that sample, is not worth it in my humble opinion",1515330098.0
drfisk,"I have yet to find a use-case for it personally. (I've been programming Scala full-time for almost 5 years).

I am a big fan of macros for things like e.g. json serialization though. But those things are already handled by my json library; be it play-json or circe.",1515143328.0
argv_minus_one,A bizarre hack that bends Scala's type system in very uncomfortable ways.,1515177087.0
ochrons,"For more information, check out the ScalaFiddle integration site at https://github.com/scalafiddle/scalafiddle-core/tree/master/integrations",1515064615.0
theQuatcon,"Personally, I would go with ""sbt-pack"". It doesn't require the weird workarounds associated with packaging everything into a single jar.",1515102402.0
vitalijzad,"This is a great article on how to create fat Jars for any SBT project, not only Spark.",1515063172.0
Scf37,"Can't say fat jar is a good idea for application packaging.

It strips jar digital signatures, messes JRE ServiceLoader and other classpath tools as same-named files in different jars will be overwritten.

+1 to sbt pack. In any case, it is not that hard to collect jars from SBT manually.
",1515341316.0
enderusaf,"If you're interested in looking at it for yourself you can check it out at ctf.hackmethod.com . it's one of their crypto challenges for this month.  Just don't spoil any answers for anyone if you find it out.  I'm working on layer2 of the crypto challenge, but am just stuck figuring out what it even is.  :)",1515015291.0
Holothuroid,"Unless you are missing spaces at one or more positions and mixed up single and double quotations, no this is not valid Scala. ",1515051708.0
joshlemer,Where did you find this text? Was it in a .scala file? Why do you think it might be scala?,1515005020.0
mr___,Perhaps a python pickled object?,1515007078.0
emilypii,"Needs some work. A few points:


- Applicative's signature Is very screwed up: 
```abstract class Applicative[A, R, F[_]](implicit f:Functor[F]) {
  def <*>(fx:F[A => R])(a:F[A]):F[R]
  def pure[A](a:A):F[A]
}```
You should not be binding `A` and `R` at the instance level; Applicative is only a statement about the quality of the Functor `F`. You should bind `A` and `R` at the method level. 

- If you're going to use implicits at the instance level, `Monad` needs an implicit `Applicative`, rather than `Functor`.

- Without `Functor` constraints, your `Free` is not actually ""free"". Consider lifting `final case class Weird[A](a: A, f: A => A)`. You could `LiftF` an instance of `Weird` into a free monad (or even contort it into a `FlatMap`), but `Weird` is not even a functor.
- `PairMonoid` has an infinite number of potential solutions, it's probably best to make it `PairAdditive` or `PairMultiplicative` to narrow down the options a bit.
- `Traversable` needs `Foldable`, but i don't see a definition for either, and the signature for `traverse` and `sequence` is incorrect.
- I'd stay away from the implicits at the definition level, and just go with very judicious subtyping for performance reasons, but I understand where you're coming from, and it definitely illustrates the typeclass hierarchy. Consider this project I wrote as a good [starting point](https://github.com/emilypi/InterviewQuestions)

Otherwise, this looks good! I like the idea of people filling in their own answers for this stuff. It'd the best way to learn :)



",1515074309.0
,"I disagree with /u/m50d's assessment. This is the worst bug in Scala and sadly it cannot be fixed. It's a consequence of the way Scala classes are compiled to JVM classes and is complicated by the fact that you can override a `def` with a `val`. In fact until 2.10 (iirc) you wouldn't even get a warning, so it could be worse.

If you compile with `-Xcheckinit` the compiler will insert code to throw an exception if a field is referenced prior to initialization, rather than silently propagating an ""empty"" value. There is a slight performance cost in doing this but I [recommend](http://tpolecat.github.io/2017/04/25/scalac-flags.html) it nonetheless.

It's common to work around initialization order problems by using `lazy`, although this isn't always possible. In this case it is:

    @ class Foo {
        println(a)
        lazy val a = ""foo""
      } 
    defined class Foo

    @ new Foo 
    foo
    res3: Foo = ammonite.$sess.cmd2$Foo@1e8fd198

Note that this is only an issue with variables in a class/object body that are compiled to JVM class fields. Forward references are disallowed for locals, as you would expect:

    @ def foo = {
        println(a)
        val a = ""foo""
      } 
    cmd2.sc:2: forward reference extends over definition of value a
      println(a)
              ^
    Compilation Failed


",1514999564.0
vytah,"I think this snippet of decompiled code will explain the behaviour (note this is decompiled code, and decompilers don't handle Scala classes 100% correctly):
    
    public final class TestClass$
    {
        public static TestClass$ MODULE$;
        private final String a;
        
        static {
            new TestClass$();
        }
        
        public String a() {
            return this.a;
        }
        
        public void main(final String[] args) {
        }
        
        private TestClass$() {
            (TestClass$.MODULE$ = this).a();
            Predef$.MODULE$.println((Object)this.a());
            this.a = ""b"";
        }
    }


Scala treats every declaration directly inside a class/object as a member declaration and every piece of code (including initializers) as the code for the default constructor. There's nothing that prevents you from printing a field in the constructor before initializing said field, except for common sense.",1515014246.0
didyoumean,Here's a [stackoverflow answer](https://stackoverflow.com/questions/7762838/forward-references-why-does-this-code-compile) about this topic.,1514984807.0
m50d,"What kind of ""why"" do you expect? It doesn't generate a compile-time error because that's not how the language is defined - this isn't a compiler bug or anything if that's what you're asking, the behaviour is exactly what I'd expect. Are you asking why the language was designed that way?",1514990958.0
,[deleted],1514987513.0
pvratsalis,What if you explicitly provide the return type of the method? (i.e. private def foo(): Future[Int] = { ... } ) ? Would this be adequate in your case?,1514961403.0
m50d,"Wartremover can make inferred `Any` a warning/error, and using `-Ywarn-value-discard` can avoid the risk of discarding a future. I don't think there's any way to prevent `Future[Future[Int]]` but you'd have to flatten it sooner or later or discard it, so I wouldn't worry so much.",1514968990.0
emilypii,"***Types are tests***. Annotate your methods, annotate your values, and constrain everything. That's how you do it.

```def foo: Future[Int] = fetch(1).map(r1 => fetch(2).map(_+r1)) //compiler error, provided fetch: Future[Int]```",1515081271.0
naftoligug,"I believe intellij has an inspection for this. I think it's called nested monads. It still needs work though. (The Scala plugin is open source, in case someone wants to help perfect it.)",1515139076.0
xalyama,"Interesting post! Some thoughts:

- This method is set up so that optimization points in the program are explicitly marked. On one hand this means that there is a clear distinction which parts are optimized and which are not. On the other hand, the fact that optimizations are happening is unchangeable. This last point might not seem like a bad point, but sometimes we want to leave it open whether we want the 'optimized' or 'unoptimized' versions. Take for example errors with `Either` ('unoptimized') or `Validation` ('optimized').

- When involving multiple effects, namely multiple algebra traits, you sometimes have to restructure your program to avoid `Monad` constraints popping up on the `F[_]` because you need to thread variables through different effects. For example, logging intermediate results with a logging effect.

- This style seems basically equivalent to the Haskell mtl-style where the `Monad` constraints are left out. I posed a question related to this style on /r/haskell some days ago: https://www.reddit.com/r/haskell/comments/7hqst3/is_there_any_reason_why_mtlstyle_is_focused_on/ ",1515002694.0
Storini,Are the Rank-N issues mentioned eliminated in Dotty?,1515016979.0
emilypii,"Awesome posts, as usual :)",1515077825.0
,This is an A+ article. Great stuff.,1514927049.0
jackie_pwn_asses,I think I'm going to learn a lot from this!,1514950235.0
dima_mendeleev,"How would this technique work with branches present in program?


        store.get(""X"").flatMap {
            case None => store.get(""A"") *> store.get(""A"")
            case Some(x) => store.get(x) *> store.get(x)
        }
",1514997082.0
Milyardo,"I don't think Free and Tagless final are as mutually exclusive as implied here. Why not use Tagless final and have your first interpreter evaluate `F` to be `Free[MyCoproduct, ?]` turning your tagless program into a tagged program, and do all the advanced optimizations you would with Free from there?

in this example you'd take `KVStore` and define

    sealed trait KVStoreF[A]
    object KVStoreF {
      case class Get(key: String) extends KVStoreF[Option[String]]
      case class Put(key: String, a: String) extends KVStoreF[Unit]
    }
    object TaggedStore extends KVStore[Free[KVStoreF, ?]] extends KVStore {
      def get(key: String): Task[Option[String]] = Free.liftF(Get(key))
      def put(key: String, a: String) = Free.liftF(Put(key))
    }

then compose this interpreter and your effectful one into an optimizing interpreter that uses the resulting Free program.",1514958438.0
dima_mendeleev,[Here](https://youtu.be/gUPuWHAt6SA?t=2533) is an interesting application of `Free` representation. I doubt it's possible to achieve the same with proposed approach. So it's early to *farewell Free*.,1515007390.0
lihaoyi,"While I've made the repo public, it is not yet ready for use.

- If you are interested in helping write code to build a new Scala build tool, I'd love your help. We have a vision, a plan, and most importantly working code that can already build several (small) open-source repositories. IntelliJ support, watch-&-re-evaluate (for both project files and build files), incremental re-builds (both inter-compilation-unit and intra-compilation-unit using Zinc), a build console & plugin system (using Ammonite), sonatype publishing support, uber-jaring, etc. all work. This isn't a toy experiment that'll disappear tomorrow

- If you are looking to *use* a new Scala build too, you probably should hold off until we announce that it's ready for use

- If you are happy with SBT (or Bazel, Gradle, etc.) then you probably should just ignore this project",1514942062.0
Martissimus,At this point I am convinced that lihaoyi is actually at least identical triplets who all pretend to be a single lihaoyi.,1514967101.0
ukralibre,Li Haoyi is making another cool software :),1514925024.0
peladonz,You the man Li Haoyi. Looking forward to seeing this project progress. ,1514929026.0
expatcoder,"> This should hopefully happen by the end of 2017.

[/u/lihaoyi](https://www.reddit.com/user/lihaoyi) should probably be 2018.",1514938992.0
,[deleted],1514927175.0
pellets,"It looks good, although I'm somewhat against the use of macros. You can run into things like https://github.com/sbt/sbt/issues/3057.",1515108486.0
silentraquo,"I am now trying to build a streaming library that could power the reactive part of Scala.js UI libraries such as Outwatch or my own Laminar. There are a few problems that I want to solve at the same time:

- Philosophically correct distinction between three types of observables: event streams (lazy, no current value), signals (lazy, with current value), and state (eager, with current value). (lazy means it needs an observer to be evaluated)

- Proper integration between these types in one system

- On-demand avoidance of FRP glitches such as in case of the diamond pattern (imagine calling .sync() on any observable to make it wait for all of its dependencies to resolve before triggering its observer or propagating downstream)

- A mandatory concept of ownership for leaky resources: All State and Subscriptions must belong to an Owner that knows when to release resources (e.g. it could be a UI component that knows when it's being unmounted). This is important because it lets the end user write code without worrying about killing subscriptions, even those that they created manually (as opposed to those created implicitly by the UI library / framework they're working with).

Frankly, I need a few pages of fine print to go with all of the above to explain all the details and especially limitations, but that will have to wait.

I'm writing this library because existing streaming and state propagation solutions don't fit well to my use case for the reasons listed above and a few others. I also wanted to deeply understand what exactly is wrong (or well, unsuitable-to-me I guess would be more correct) with all the other things I've tried.

For me personally this has been the most interesting and exciting Scala project I've worked on (sorry, Laminar, but I'm doing this for you), and I can't wait to work through all remaining tasks, first and foremost being more tests.

I don't have any docs yet – they were becoming obsolete faster than I could write them, but I'm working on the code in the open here: https://github.com/raquo/laminar/pull/8",1514888204.0
SgtLionCobra,"Writing [scalajs-react](https://github.com/japgolly/scalajs-react/) wrappers for [Material UI v1.0.0-beta^](https://material-ui-next.com/). I'm aware of [scalajs-react-components](https://github.com/oyvindberg/scalajs-react-components/) (SJRC) but the API has changed drastically from the latest stable versions. Right now, I'm writing them by hand and not using macros/metaprogramming like in SJRC, mostly because I'm very new to macros. Once I'm done with the manual wrappers, I might move on to doing it the SJRC way eventually and maybe even submitting a PR.",1514860644.0
thewhizz,"Attempting to build a video stream processor with Akka. I have an api endpoint with a camera feed and need to process each frame through a Graph and send data at different stages to different endpoints. 

Right now I’m having trouble with the source stream — receiving multipart boundary =—donotcross and working on the image bytes. Thoughts? I’m new to a Akka and not super familiar with Scala. ",1514842762.0
Scf37,"Nice one but too small. 

Could be great to see something like this but of production quality. With service layer, logging, transaction management, timeouts, configuration, lifecycle management(graceful shutdown) proper error handling (HTTP 200/201/400/500) etc.etc.etc.",1514804280.0
joshlemer,You should also post this in /r/webdev ,1514733339.0
analytically,Interesting! Thanks!,1514674610.0
TotesMessenger,"I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:

- [/r/programming] [Binding.scala v11 – a reactive templating language for both web and desktop GUI](https://www.reddit.com/r/programming/comments/7n32su/bindingscala_v11_a_reactive_templating_language/)

- [/r/webdev] [Binding.scala v11 – a reactive templating language for both web and desktop GUI](https://www.reddit.com/r/webdev/comments/7nd0j2/bindingscala_v11_a_reactive_templating_language/)

&nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*",1514778059.0
leonardo7253,"          private val baseRoute = getFromFile(buildPath+ ""index.html"")
          private val publicRoute = pathPrefix(""static"")(getFromDirectory(buildStaticPath))
          Http().bindAndHandle(publicRoute ~ baseRoute, ""0.0.0.0"", 9000)

/static/* will serve from build/static

/* will serve index.html",1514645338.0
__gyre__,Using react you can make index.html static and just host it from S3 or some other file storage. IT will be easier to manage and faster to set up. Not to mention cheaper if you start throwing any volume of traffic at it.,1514626587.0
softiniodotcom,"You may find this useful: 

https://github.com/japgolly/scalajs-react",1514641118.0
,"Score! Just a few days late, though, on the xmas tree.;)",1514586569.0
fromscalatohaskell,"guys check this out, he did it, a tree.

HIRED!",1514584275.0
Plippe,"Hey,

I know you have done some research already, but I am surprised you picked Scalatra. Have you seen [http4s](http://http4s.org/), and [akka http](https://github.com/akka/akka-http) ? The first could be too hard, but the second should be easy enough for all.

If Scalatra is your final choice, just mimic other micro framework logic. Apply your knowledge of [Sinatra](http://sinatrarb.com/), and you should be fine. 

If you really need example projects, you can broaden your search with 
 [finagle](https://github.com/twitter/finagle), [flask](flask.pocoo.org) (python), or even [http4s](http://http4s.org/). They will all share very similar ideas. 

Don't worry about dependencies on quill, and co. SBT will manage that for you.

Lastly, your frontend should be its own service. Just build good APIs, and let the frontenders do their magic. 

Sorry for the lack of clear examples, hope it helps anyways.

",1514569351.0
,"Scalatra, 5 years ago, was my choice for a ScalaFx app that embedded a Scalatra rest and web app in a single jar. Having used Jetty many times previously, with great success, it all worked brilliantly.

Today, though, it's not clear to me that Scalatra can compete with Play, Akka-Http and others in terms of a reactive concurrency model, implying pool threads, smart dispatchers, async handling and intelligent IO blocking.

Hopefully, others can chime in with a few worthy sea stories, not just fanboy 'use this' recommendations.

Naturally, it goes without saying, do your own prototyping, testing and come to your own conclusions. Cheers!",1514588575.0
insaneivan,"I'm really not sure how you decided upon Scalatra when Play is the defacto standard for Scala webdev.  It stands heads and shoulders above any other scala-based framework and has far more support and documentation.  Did you wanna keep it super lightweight or something?  Just use Play, trust me.",1514763363.0
,"To make testing easier you can pass the database as an argument rather than using a global `DB` reference, and abstract over implementations using a trait. This will allow you to pass an in-memory database (for instance) for testing. You can abstract over this argument-passing with `Reader` (or `Kleisli` more generally) if you like, but you can do this later.

As for removing side-effects, you will need to use something like cats `IO` rather than `Future`, which can't do what you need here.",1514483322.0
hebay,"I have some observations that could help you:
  
- Passing `Option[T]` as a method argument is usually a bad practice, passing just the value usually simplifies the code.
- As I understand, `DB` would be a scala object and it is where most side effects are occurring, you could abstract a base trait and create the implementation that actually uses the database, with this approach you could write a custom in-memory implementation that doesn't have side effects, here your method (or the class constructor) would receive the base trait and you can exchange between the real database and the in-memory implementation.
- Your method is doing quite a lot of things, you might benefit by breaking it into several specific methods.",1514481462.0
caente,"disclaimer: I would never put the code I'll show you in production, I consider passing closures this way an anti-pattern,  but I guess it helps to show how you can remove futures from your code, while still using them

    import scalaz._, Scalaz._
    def shipOrders[F[_]:Applicative:Monad](
         ids: List[String], 
         shipmentMethod: Shipment => Option[Shipment],
         getShipment:String => F[Option[Shipment]],
         updateShipment:Shipment => F[Shipment]
         ): F[List[Shipment]] = {
         // not all ids are valid, get the list shipments that exists
         val futureShipments:F[List[Shipment]] = 
             ids.traverse(id => getShipment(id)).map(_.flatten)
     
         // not all shipments are processable by shipmentMethod, return list of processed shipments
         val processedShipments:F[List[Shipment]] = 
              futureShipments.map(list => list.flatMap(s => shipmentMethod(s)))
     
         // save updated shipments back to database
         val updatedShipments: F[List[Shipment]] =
           processedShipments.flatMap(list =>
             list.traverse(s => updateShipment(s)))
         updatedShipments
     } 

    shipOrders[Option](
        ids = List(""a""),
        shipmentMethod = Option(_),
        getShipment = id => Option(Option(Shipment(id))),
        updateShipment = s => Option(Shipment(s.id + ""_updated""))
    )

    import scala.concurrent.{Future, ExecutionContext}
    // you'll need the Applicative instance for Future, I haven't found it on scalaz o_O
    implicit def FutureApplicative(implicit executor: ExecutionContext) = new Applicative[Future] {
      def point[A](a: => A) = Future(a)
      def ap[A,B](fa: => Future[A])(f: => Future[A => B]) =
        (f zip fa) map { case (f1, a1) => f1(a1) }
    }

    import scala.concurrent.ExecutionContext.Implicits.global
    shipOrders[Future](
        ids = List(""a""),
        shipmentMethod = Option(_),
        getShipment = id => Future(Option(Shipment(id))),
        updateShipment = s => Future(Shipment(s.id + ""_updated""))
    )


the above works and is testable, but you definitely should consider ways to break that code into smaller chunks",1514481376.0
yawaramin,"Your side effects here are basically coming from interacting with the DB, right? /u/tpolecat 's Doobie and Lightbend's Slick both provide database effect types (`ConnectionIO` and `DBIO`) that describe database effects in a referentially transparent way. They will wrap your database calls and execute lazily when you ask for the result, rather than eagerly running Futures like you have now.

Good for testing because you can build up pure descriptions of database actions in the code and then run them with transaction rollback during integration testing.",1514508329.0
Scf37,"Here is how I'd do it. First of all, i removed `updatedCancellations` from your code as it is undefined.

    trait ShipmentDao {
      def getShipment(id: String): Future[Shipment]
      def updateShipment(id: Shipment): Future[Shipment]
    }
    
    class ShipmentService(dao: ShipmentDao) {
    
      def shipOrders(ids: Seq[String], processShipments: Shipment => Option[Shipment]): Future[Seq[Shipment]] = {
        // processing every order in parallel
        val futures: Seq[Future[Option[Shipment]]] = ids.map { id =>
          dao.getShipment(id).flatMap { shipment =>
            processShipments(shipment) match { //could use Option.fold but match is more readable
              case None => Future successful None // no shipment - skip
              case Some(shipment) => dao.updateShipment(shipment).map(Some.apply) // save it
            }
          }
        }
    
        Future.sequence(futures).map(_.flatten)
      }
    }

Some comments on design:

- Immutable objects as dependencies are Bad Thing. Simply because you can't mock them. Mutable objects are even worse.
- immutable classes instead of pure functions are better choice than passing all dependencies to function as parameters. In second case, some parameters will always be the same still forcing you to specify them on every call which is wasteful. Immutable classes with constructor parameters can be seen as some form of currying, letting you to specify rarely changed parameters/dependencies once. Constructors together with dependency injection frameworks like Guice also saves from blowing up number of arguments because every function takes only direct dependencies as input. Pure function design forces you to pass transitive dependencies for entire tree of functions as well.
- Don't use `Future.sequence` early - it limits concurrent execution of your code 
",1514799830.0
kailuowang,"1. Scala provides some basic building blocks for functional programming but it doesn't come with the functional abstractions required by pure functional programming. 

2. In short, to enable pure functional programming which has several benefits: e.g. simplify composition, isolate side effects, reduce boilerplate, managing mutable states without mutable variables, etc. This is rather a big topic. I wrote a blog post https://tech.iheart.com/why-fp-its-the-composition-f585d17b01d3 mainly focused on the composition aspect of it. Rob Norris gave a somewhat overlapping but more broad talk on FP with effects: https://www.youtube.com/watch?v=po3wmq4S15A. If you get interested in this topic, you can find more comprehensive resources on Cats' website here https://typelevel.org/cats/resources_for_learners.html

3. Cats use powerful tool called type class, you can find more about it, again on Cats website. https://typelevel.org/cats/typeclasses.html. For a custom monadic type `CMT[_]`, you would need to implement an implementation of the `Monad` trait `Monad[CMT]` for it and make it implicitly available (e.g. an implicit val in the companion object of `CMT`

4. Using cats in your library does not automatically require your downstream users to use cats as well. However, you can enhance your API by providing Cats type class instances to your users, with which your users will be able to take advantage of all syntax enhancement provided by Cats. 
E.g. if you provide an implicit instance of `Monad` for your `CMT` type, your user will automatically have methods like `map`, `flatten`, `product` available on any instances of `CMT` if they `import cats.implicits._`

For examples of a working project using Cats you can find some here. https://github.com/typelevel/cats#general-purpose-libraries-to-support-pure-functional-programming, there are quite a few of them whose domain is simple such as hammock, scanamo.

Also feel free to ask any questions in Cats' gitter channel. https://gitter.im/typelevel/cats. It's a lot more responsive than here. ",1514480144.0
kod,"Yes, you absolutely can just implement a flatMap method yourself (you'll also need to implement map).

I would recommend doing that first.  If you need more details on how for yield syntax translates to calls to map/flatMap, see https://www.artima.com/pins1ed/for-expressions-revisited.html

Once you've done that, the underscore.io book ""scala with cats"" posted by lu4nm3 is a good resource, but you don't need to start there.",1514483220.0
volpegabriel,"So [/u/kailuowangalready](https://www.reddit.com/user/kailuowang) already gave you some good advice and pointed you in the right direction if you want to use Cats (I recommend it). Anyway, you need to know that you can implement your own Monad without bringing any dependency into scope. For example:

EDIT: For the sake of formatting (Reddit code parser is horrible) and the example running -> https://scalafiddle.io/sf/Hefue1b/5

    object MonadDemo {

       // Simple definition of the Monad typeclass
       trait Monad[F[_]] {
         def pure[A](a: A): F[A] // Normally defined in Applicative

         def map[A, B](fa: F[A])(f: A => B): F[B] = // Normally defined in Functor
           flatMap(fa)(a => pure(f(a)))

         def flatMap[A, B](fa: F[A])(f: A => F[B]): F[B]
       }

      // Companion object so you can do Monad[Algebra].flatMap(..) for instance
      object Monad {
        def apply[F[_] : Monad]: Monad[F] = implicitly[Monad[F]]
      }

     // Rename your algebra as you wish
    sealed trait Algebra[+A]
    object Algebra {
      final case class Value[A](a: A) extends Algebra[A]
      case object ErrorA extends Algebra[Nothing]
      case object ErrorB extends Algebra[Nothing]

      // A Monad instance of your Algebra
      implicit val algebraMonadInstance: Monad[Algebra] =
        new Monad[Algebra] {
          override def pure[A](a: A) = Value(a)

          override def flatMap[A, B](fa: Algebra[A])(f: A => Algebra[B]): Algebra[B] =
            fa match {
              case Value(a)   => f(a)
              case e @ ErrorA => e
              case e @ ErrorB => e
            }
        }

    // Creating syntax so you can use invoke x.flatMap and use it in for-comprehentions
    implicit class AlgebraOps[A](fa: Algebra[A])(implicit M: Monad[Algebra]) {
      def pure(a: A): Algebra[A] = M.pure(a)
      def map[B](f: A => B): Algebra[B] = M.map(fa)(f)
      def flatMap[B](f: A => Algebra[B]): Algebra[B] = M.flatMap(fa)(f)
      }
    }   

    def myFunction(x: Int): Algebra[Int] = {
      if (x == 0) ErrorA
      else if (x < 0) ErrorB
      else Value(x)
    }

    // For-comprehention
    val r0: Algebra[Int] =
      for {
        v <- myFunction(5)
      } yield {
        // Not recommended to perform side effects in a pure function transformation
        println(s""Got value: $v"")
        v
      }

    val r1: Algebra[Int] =
      for {
        x <- myFunction(5)
        y <- myFunction(3)
      } yield x + y

    // Using flatMap syntax
    val r2: Algebra[Int] = myFunction(0).flatMap(_ => ErrorB)

    // Using the Monad instance implicitly
    val r3: Algebra[Int] = Monad[Algebra].map(myFunction(4))(_ * 2)

    }

Cheers,
Gabriel.",1514496362.0
runT1ME,"Hello, let me give your questions a shot:

*  Scala is already functional, but a lot of the machinery for doing *pure* functional programming is missing in the standard library.  Plenty of people do heavy FP without Scalaz or Cats, but eventually you may find yourself reinventing some of the things those libraries provide.

* Scalaz or Cats are libraries, think of them like a swiss army knife.  You may only need one or two core data structures, or you may want to use tons of them, it really depends on the problem. My gateway drug into using Scalaz was needing to easily work with 
    Future[Option[String]] 
types, without having to nest maps.  Those are called Monad Transformers, and make life easier.  

*   You don't extend Monad, you provide a type class instance. [TypeClasses](http://michele.sciabarra.com/2015/11/11/scala/Scalaz-and-Typeclasses/)

*  Eh, sort of.  Cats/Scalaz will be on the classpath, so it may cause issues if another library uses a different version of Cats. But that is the case with any scala library.  However it's up to you if you want to return a Scalaz type class or just always go to a standard library class. 

Anyway, I recommend checking out Scalaz, and here's a good book for getting started [Functional Programming for Mortals](https://leanpub.com/fpmortals)",1514503896.0
BarneyStinson,"You don't need cats for this, just use `Either`:

    case class ReturnedValue(value: Int)

    sealed abstract class MyErrorType 
    case class ErrorTypeA() extends MyErrorType 
    case class ErrorTypeB() extends MyErrorType

    def callMyFunction(x: Int, y: Int, z: Int): Either[MyErrorType, ReturnedValue] =
      if (x < y) Left(ErrorTypeA())
      else if (x < z) Left(ErrorTypeB())
      else Right(ReturnedValue(x))

    callMyFunction(7, 2, 3).fold({
      case ErrorTypeA() => println(""Oops, something went wrong"")
      case ErrorTypeB() => println(""Something else went wrong"")
    }, ret =>
      println(s""Got back ${ret.value}"")
    )
",1514496175.0
lu4nm3,"This is a pretty good resource for learning Cats:

https://underscore.io/books/scala-with-cats/

It has examples of how to use many of the abstractions that Cats provides",1514480147.0
caente,"this an example using scalaz instead of cats, but it shouldn't be too different

    import scalaz._, Scalaz._
    @{
     sealed trait Returned[A]
     object Returned{
         case class Value[A](v:A) extends Returned[A]
         case class Error1[A]() extends Returned[A]
         case class Error2[A]() extends Returned[A]
     }
     } 
    defined trait Returned
    defined object Returned
    @implicit object monad extends Monad[Returned] {
      def point[A](a: => A): Returned[A] = Returned.Value(a)
      def bind[A, B](fa: Returned[A])(f: A => Returned[B]): Returned[B] = 
          fa match {
              case Returned.Value(v) => f(v)
              case Returned.Error1() => Returned.Error1()
              case Returned.Error2() => Returned.Error2()
          }
     } 
    defined object monad
    @def returnSomething(a:Int):Returned[String] = a match{
     case 1 => Returned.Value(""oh yeah"")
     case 2 => Returned.Error1()
     case _ => Returned.Error2()
     } 
    defined function returnSomething
    @for {
      v <- returnSomething(1)
     } yield v 
    res14: Returned[String] = Value(""oh yeah"")
    @for {
      v <- returnSomething(2)
     } yield v 
    res15: Returned[String] = Error1()
    @for {
      v <- returnSomething(22222)
     } yield v 
    res16: Returned[String] = Error2()
",1514479142.0
Holothuroid,"You don't necessarily need Cats to achieve this particular effect. In order to use your class in a for comprehension it just needs map and flatmap methods.

For comprehension is just syntactic sugar.

",1514483494.0
gmartres,"Looks like a compiler bug. `type R[V] = Unbox[V]` shouldn't compile, in fact it already doesn't when it's defined by itself, but apparently does when it's part of a refined type like in your example. I suggest filing an issue at https://github.com/scala/bug/issues/.",1514392957.0
merb,"this article is wrong, because a tuple (String, Int) could be encoded as (MyGoodString, ProductId).
So the whole article is likely a poor bias.",1514380319.0
channingwalton,"""If you have a case class, you can add a new field, and the code will compile everywhere; now you’d just need to use the new field everywhere you want the extra info, and the remaining code can be left exactly the same.""

Playing devil's advocate, one could argue that having the code compile after such a change is not a good thing since code using the changed case class might need to account for it.

Bit of a stretch though.",1514409611.0
acjohnson55,"I generally think that tuples should not leak out of a function's scope, but they are very useful for pattern matching logic -- bundling up variables to match on multiple things at once and packing up multiple outputs for assignment.

Sometimes, it's okay for them to leak out, though. I ask myself, is it more obvious to have a bundle of data simply represented by its components, or for the bundle itself to have a name? Normally, the latter wins out, but not *always*. ",1514408470.0
drfisk,"There's no absolute right or wrong here, which is why I don't like the title. The rest if the article is actually pretty good.

Like others have mentioned, well named types is a good alternative to well named (case class) fields, and sometimes even better. 

The end goal is the same: have some sort of name to make sense of the data at hand.",1514724332.0
naftoligug,https://github.com/KyleU/scala-js-typescript,1514386229.0
darzolne,Yes so the “best paying jobs in scala” are in big data or machine learning in general. I’m an engineer doing “traditional” back-end development on scala micro-services and I don’t get a significantly different salary than the java engineers in my company. It’s really about the value you bring rather than the tools you use.,1514373224.0
lihaoyi,"Alternative interpretation: all the entry-level Scala developers are unemployed and don't turn up in the statistics, whereas there is great demand for entry-level PHP/JS/C# developers who can always find a job

(Not saying that this is the case, just showing how you can really see what you want to see from this statistic)",1514398556.0
Isvara,Where are the best places to find Scala jobs? (Remote in particular.),1514352334.0
Vitamon,"number crunching, seriously?",1514395674.0
peladonz,Merry Christmas! ,1514278057.0
raghar,"Nice! I wanted to migrate several of my libraries in typelevel ecosystem, but I was held back by the fact that all of them were ""RC"" or ""M3"" or ""hash-version"" and their API was still subject to change (until Cats releases). Now I can expect that stable versions will follow and I'll finally migrate :D",1514295775.0
zero_coding,"awesome
",1514291897.0
Apterygiformes,This is large and in charge news,1514278603.0
pure_x01,Is there any good documentation on this ?,1514308224.0
benevolent001,"Many times while reading code in scala I find the strange symbols in code. How do I tell Google to search what's meaning of it. Example :> Should I say ""colon greater than scala"" as Google query ?

",1514239865.0
haterofallcats,"I’ve heard a few stories of scala developers migrating away from actors.

Has anyone removed actors from their production codebase to replace it with something else?  If so, why?  And what was that something else?",1514261445.0
lovdev,"Hey guys, how about Junior jobs or internships in Scala? Or only who have experience can get a job?",1514458194.0
vitalijzad,What can you do if you can't find the package you want to use in the right combination of Scala version and sbt version?,1515141230.0
zero_coding,"Hi all  
I am trying to set environment variable for subprojects as following:  

    
    scalacOptions += ""-Ypartial-unification""
    scalacOptions += ""-feature""
    addCompilerPlugin(""org.scalamacros"" % ""paradise"" % ""2.1.0"" cross CrossVersion.full)
    
    
    val Cats = ""1.0.0""
    val Shiro = ""1.4.0""
    val Logback = ""1.2.3""
    val CatsEffect = ""0.5""
    val Kafka = ""1.0.0""
    val Bean = ""1.9.3""
    val Circe = ""0.9.0-M3""
    val Log4j = ""1.7.25""
    val ScalaCheck = ""1.13.4""
    val Scalactic = ""3.0.4""
    val Scalatest = ""3.0.4""
    val JavaJwt = ""3.3.0""
    val Simulacrum = ""0.11.0""
    val Http4s = ""0.18.0-M7""
    
    
    lazy val commonSettings = Seq(
      organization := ""io.khinkali"",
      version := ""0.1.0-SNAPSHOT"",
      scalaVersion := ""2.12.4"",
      libraryDependencies ++= Seq(
        ""org.slf4j"" % ""slf4j-simple"" % Log4j,
        ""ch.qos.logback"" % ""logback-core"" % Logback,
        ""org.apache.shiro"" % ""shiro-all"" % Shiro,
        ""org.typelevel"" %% ""cats-core"" % Cats,
        ""org.typelevel"" %% ""cats-effect"" % CatsEffect,
        ""org.apache.kafka"" % ""kafka-streams"" % Kafka,
        ""org.apache.kafka"" % ""kafka-clients"" % Kafka,
        ""commons-beanutils"" % ""commons-beanutils"" % Bean,
        ""io.circe"" %% ""circe-core"" % Circe,
        ""io.circe"" %% ""circe-generic"" % Circe,
        ""io.circe"" %% ""circe-parser"" % Circe,
        ""io.circe"" %% ""circe-literal"" % Circe,
        ""com.github.mpilquist"" %% ""simulacrum"" % Simulacrum,
    
        ""org.scalactic"" %% ""scalactic"" % Scalactic,
        ""org.scalatest"" %% ""scalatest"" % Scalatest % ""test"",
        ""org.scalacheck"" %% ""scalacheck"" % ScalaCheck % ""test"",
      ),
      resolvers ++= Seq(
        ""Sonatype OSS Snapshots"" at ""https://oss.sonatype.org/content/repositories/snapshots""
      ),
      fork in run := true,
      envVars in Test := Map(""KAFKA_SERVER"" -> ""localhost:9092"")
    )
    
    lazy val root = (project in file("".""))
      .settings(commonSettings)
      .settings(
        name := ""bary"",
        organization := ""io.khinkali"",
        moduleName := ""bary""
      ).
      aggregate(
        kafka_api,
        auth_stream,
        rest)
    
    lazy val kafka_api = (project in file(""kafka-api"")).
      settings(commonSettings).
      settings(
        name := ""kafka-api"",
        moduleName := ""kafka-api""
      )
    
    lazy val auth_stream = (project in file(""auth-stream"")).
      settings(commonSettings).
      settings(
        name := ""auth-stream"",
        moduleName := ""auth-stream"",
        libraryDependencies ++= Seq(
          ""com.auth0"" % ""java-jwt"" % JavaJwt,
        )
      ).dependsOn(kafka_api)
    
    lazy val rest = (project in file(""rest"")).
      settings(commonSettings).
      settings(
        name := ""rest"",
        moduleName := ""rest"",
        libraryDependencies ++= Seq(
          ""org.http4s"" %% ""http4s-dsl"" % Http4s,
          ""org.http4s"" %% ""http4s-blaze-server"" % Http4s,
          ""org.http4s"" %% ""http4s-blaze-client"" % Http4s,
          ""org.http4s"" %% ""http4s-circe"" % Http4s,
        )
      ).dependsOn(kafka_api, auth_stream)  

Then start the test:

	[IJ]sbt:bary> test
	[info] AuthServiceSpec:
	[info] io.khinkali.rest.auth.AuthServiceSpec *** ABORTED ***
	[info]   java.util.NoSuchElementException: None.get
	[info]   at scala.None$.get(Option.scala:349)
	[info]   at scala.None$.get(Option.scala:347)
	[info]   at io.khinkali.rest.auth.AuthServiceSpec.<init>(AuthServiceSpec.scala:22)
	[info] KkConsumerSpec:
	[info] A Consumer
	[info] - should get all messages send by producer *** FAILED ***
	[info]   java.lang.Exception: System variable KAFKA_SERVER is not set.
	[info]   at io.khinkali.consumerspec.KkConsumerSpec.$anonfun$new$1(KkConsumerSpec.scala:14)  

As you can see, the error says, that the System variable KAFKA_SERVER is not set.  
What am I doing wrong?  

Thanks",1514365216.0
SubMachineGhost,does java have an equivalent function of scala.Predef.require() ?,1515148315.0
mingp,"There is `java.awt.Robot` in the Java standard library ([Javadocs here](https://docs.oracle.com/javase/7/docs/api/java/awt/Robot.html)), which you can use from Scala, which provides mouse access and other automation functionality.",1514175883.0
naftoligug,You want to automate clicking on other programs?,1514180472.0
drfisk,"There's ScalaFX and scala swing. Maybe there's some methods in there?

Also, remember that you can use any Java library from scala too.

Also, since you're new, I highly recommend just getting IntelliJ (with Scala) plugin right away :P  It's very nice to see syntax errors right away",1514174331.0
teknocide,"Sure why not! It's pretty close to what we have with `Either` or `Try` today, but a bit more light weight syntax wise. It would perhaps encourage the use of `throw` more. Not sure how I feel about that.

Checked exceptions always sounded like a good idea but it got clunky for reasons I'm not going to explore in depth here. If return types were dynamically coloured by throw statements that'd be pretty cool, but I'm not sure how it would actually help in the end. The sole point of exceptions is that they bubble through the stack after all, and so you'd either have to enforce a check at the calling side like with checked exceptions, or let them bubble through implicitly in which case the end result would pretty much be what we're seeing today",1514156944.0
simon_o,"- The problem with throws clauses is not necessarily writing them down, but the inability to compose and abstract over them.
- I think `Int|SomeException` can't work as there is a difference between returning an exception instance and throwing it. Your signatures looks like the former, but you want it to be the latter.
- I don't think the distinction between checked and unchecked exceptions, especially the hierarchy as it exists in Java, makes sense to emulate.
- I think instead of handling it with a return type and making the place that receives the result deal with it, it makes more sense to investigate a capability-based approach, in which throwing an exception requires some implicit evidence at the call-site of the method that might want to throw. So if you want to make sure that no method you are calling can throw an exception, don't provide that capability to your caller.
- In the end, the practicality of any approach hinges on Java interop. If interop requires every existing Java library to be rewritten or manually annotated, the pain will never be worth the benefit. See nullability as another example of this not working out.",1514285832.0
Holothuroid,"I think Odersky's talk ""Plain functional programming"" is all about this ",1514179681.0
m50d,"You need to distinguish between throwing an exception and returning it, since exceptions can be used as values. But that's easy enough to fix: make a new type `ThrownException[T <: Throwable]` (that *doesn't* extend `java.lang.Object` and so can't participate in Java generics), and represent that as `def foo(): Int | ThrownException[SomeException]`.

It seems like a nicer representation to me (I've played with this idea on paper before). It would require the compiler to insert suitable `catch`es around all invocations of methods that throw checked exceptions, which probably destroys the ability to use the language in low-level mechanical-sympathy style performance-critical code. For the kind of use cases I have that's a more than worthwhile trade, but I'm not sure Dotty would accept it.",1514328504.0
colindean,"I feel like that is less expressive than using a Try, other than being able to explicitly state the exception expected within the Try. I feel like for that reason I would be disinclined to use a union type in this way.",1514162246.0
,This is from July.,1514147770.0
paspro,I hope that with this money they will put more effort in Scala Native and provide a viable alternative to dinosaurs like C/C++.,1514134819.0
joshlemer,I wonder what they are raising money to do.,1514137082.0
simonhez,"As a new Scala developer, this makes me happy :)",1514134587.0
vitalijzad,What would happend to Scala if some day Lightbend won't pass a funding round?,1514127575.0
TunaBoo,"Wasnt the name typesafe to lightbend a move away from Scala exclusive work?

Scala is seriously lacking in bit hitter support. I think both rust and golang have a lot more power behind them. I would love scala to get more popular in the next 5 years but i cannot see it. My last last startup I chose Scala and hiring was a bear. Current startup i chose Python and it is worlds easier. Will see if I ever make it back to Scala....",1514160164.0
fromscalatohaskell,"mod, delete these spams/ads?",1514117777.0
pedrorijo91,"to whoever wants an introduction on Play + Slick, I wrote an article sometime ago (play 2.4 I think): http://pedrorijo.com/blog/play-slick/

I've been thinking about updating the post and code example to play 2.6, but no time yet :)",1514038810.0
carlfish,"I almost didn't watch this because the title (and intro) made it look like it was just going to be a rant about Java object overhead, but it turned out really interesting: it's an introduction to [scala-packed](https://github.com/findify/scala-packed), a library that flattens Scala case classes into bytes (using Shapeless to derive codecs) and packs them in memory-efficient collections.

",1513988343.0
hunyeti,"I'd be interested if the same applies to scala native, or if it's not a problem there.",1514030647.0
silentraquo,"This was beaten to death already, and I'm not sure whether it fits into the definition of a platform module, but I would really like to see Scala.js have a commitment level similar to other core Scala projects like Dotty or collections.

And I don't mean that as many engineers should be working on Scala.js as are working on those other projects. I just want to have complete certainty that Scala.js will not wither away / be slowly abandoned, that it is as core to Scala as everything else, because in my frontend-heavy use case, it is.

I understand that Scala Center has long ago accepted the ""Ensure continuity of Scala.js"" proposal, and that as part of it you actually did spend valuable resources on Scala.js and scala-js-bundler with great results (thank you). But what I'm trying to say is, you'd never have an ""Ensure continuity of the collections library"" proposal, because for something as core as collections, such continuity is implied.

I hate mentioning this because in all likelihood this is just FUD – it's hard for me to imagine something as immensely valuable as Scala.js withering away, but the uncertainty is real when you're considering Scala.js for mission critical applications with expected lifespan of 10+ years (not even ""enterprise"", just normal business projects).

It is entirely possible that Lightbend / ScalaCenter are already fully committed to Scala.js as a platform, but for some reason I just don't quite _feel_ that way. Perhaps marketing / communication is what could be improved, I'm honestly not sure. Sorry, I don't have specific action items on this.",1513972300.0
Krever,"sttp for http client - after having continuous problems everytime I had to choose a http client this is a blessing. You can choose your response container type, synchronicity, its well documented and has a nice API. Its way above any other http client, mostly because its not one. Its just a wrapper, but very convenient one.",1514023329.0
jackcviers,"Json parser/serializer -- something other than spray-json. Circe actually maps pretty easily to concepts from Jackson, and can auto-generate from scala case classes without any extra help. Docs for generating your own encoders and decoders by hand or autogenerated are easy to follow.

files and streaming processing - fs2-io and cats-effect -- these libs have streaming interfaces similar to Java 8's stream. They are useful when working with any buffered content, including files. IO makes sync and async programming easy and safe. Again, the readme docs are easy to follow to get started and also have depth.

http library -- gotta say http4s. Performance scales well with number of processors and the dsl is simpler than akka-https. The docs are also easy to follow and have depth.

Mongo -- reactivemongo is your only hope,
and it's easy to learn and work with too, with great docs. It is difficult to mock, but running mongo in-memory with testcontainers is easy.

testing - utest, but not sure if /u/lihaoyi is ready for that to become the default testing lib.

build tool - sbt.

",1513962931.0
naftoligug,lihaoyi/sourcecode,1514088890.0
simon_o,"Call me old-fashioned, but I'd rather have a maintained, well-curated standard library.",1514006217.0
Isvara,Am I missing something? Where's the list of libraries?,1513986952.0
m50d,"Disclaimer: my views don't always reflect those of the community as a whole or accepted ""best practice"".

I hate mocking frameworks, they're full of incomprehensible magic and just not useful enough to justify it IMO. But yes, with most mock frameworks you can't ""partially"" mock an object - what the mock framework is actually doing is constructing a reflective proxy that captures all calls to methods of the object. When you call `manager.processCancellation`, that's just a call to this proxy - there's no actual instance of `CancellationsManager` here, so the real body of `CancellationsManager#processCancellation` can never run.

> What's the best way to test this?

If you really don't want to change the code you could use PowerMock which allows partial mocks through bytecode manipulation.

You could do what a mock would do ""by hand"", by implementing a subclass of `CancellationsManager` directly, something like:

    var statusCheckCount: Int = 0
    val manager = new CancellationManager {
      override def checkStatus = { statusCheckCount += 1; true }
    }
    manager.processCancellation(request)
    assert(statusCheckCount == 1)

Though ideally I'd suggest separating the logic of what needs to be done from the execution of it. Then you can test the logic by just checking it gives the right outputs for the right inputs, and the code that actually executes the things can be so simple that it's obviously correct and doesn't need unit testing. (If you start getting complex logic in that layer, it's time to carve out another layer of interpretation: rather than executing high-level commands directly, you create a function that interprets higher-level commands into (sequences of) lower-level commands, and you can test that function in an outputs-for-inputs way). E.g. maybe you could create a `PartiallyProcessedSalesOrder` type that contains the results of doing `task1` and `task2` and whatever remaining information is needed from the `SalesOrder`, and then the `PartiallyProcessedSalesOrder` can tell you which tasks need to be run next, and you can test that that's correct. Better still, maybe you can have two different subtypes of `PartiallyProcessedSalesOrder`, and then all you'd have to test is that doing `task1` and `task2` returned the right type for the different possible cases.

> Is it failing because I'm calling a method of the mocked object directly? Do I need to move all the task methods to it's own class then mock it, which seems a little strange to me just to be able to write test for it.

Some TDD advocates would argue that this indicates that your `CancellationsManager` is mixing too many different levels of abstraction - that the very fact that you're having this difficulty testing indicates that moving the task methods out into lower-level classes would improve your design.",1513956944.0
wdhandy,"If this spec is for CancellationsManager you don't want to mock that class. Rather you would mock the dependencies of that class, such as a dao or rest client. If you find you need to ""partially mock"" CancellationsManager I'd agree with the other comment that you should break it up into two classes, then mock the second one with the individual operations.",1513988001.0
habitats,"are any of these (other) approaches used in the while to any extent? my biggest issue with spark is error handling and decrypting exceptions, but I feel like wrapping it in another layer of abstraction would only make it harder in the long run",1513932127.0
volpegabriel,Good article! I'm not really into Big Data stuff but it's great seeing people advocating FP and its benefits. ,1513955150.0
havok2191,"Hoping to see an article where you use Tagless Final :-)
I found what you had to say very valuable",1521956607.0
raghar,"Did you check Quasar?

https://github.com/quasar-analytics/quasar

Or Kafka? Big part of it is written in Scala.

EDIT: Typos on mobile",1513880052.0
Demius9,"Sadly, I think most of the applications written in scala are backend applications written by organizations that have no intentions of open sourcing their Code base. ",1513894500.0
joshlemer,"There aren't that many sadly.   
www.lichess.org  
www.gitbucket.com  
http://bdgenomics.org/  
",1513880733.0
ifanything,"The Guardian has a ton of stuff open-sourced, including their Frontend, and they use Scala: https://github.com/guardian/",1513898159.0
threeseed,"Many people who chose to write applications in Scala came via Play.

http://playframework.com

It's a very popular web app framework for JVM.",1513895959.0
joshlemer,Oh also https://www.querki.net/,1513893921.0
moatra,"Here are two apps that I open-sourced while working at RetailMeNot:

* [Shield](https://github.com/RetailMeNot/shield) - HTTP edge router with middleware
* [Hydra](https://github.com/RetailMeNotSandbox/hydra) - A graph database that provides changefeeds for JsonAPI documents

I chose Scala for those projects because of it's great async story.  Both of those projects are used in environments with thousands of requests per second, and the async design behind Akka and Play allow for a easy/efficient scaling on individual hardware.",1513897311.0
jackcviers,"Here's a query for github:

https://github.com/search?utf8=%E2%9C%93&q=%22application%22+AND+NOT+%22example%22+AND+NOT+%22sample%22++AND+NOT+%22library%22+AND+NOT+%22reference%22++language%3AScala&type=Repositories&ref=advsearch&l=&l=

Shows about 1000 applications.",1513889548.0
Avasil2,"I think [FiloDB](https://github.com/filodb/FiloDB) is something you might be interested in.   

Check out [those slides](https://www.slideshare.net/EvanChan2/2017-high-performance-database-with-scala-akka-spark). They contain some arguments for Scala.",1513893816.0
channingwalton,"I'm curious, you said, ""I'm looking for good examples of why Scala was chosen for a particular project."", so why not include libs?",1513895088.0
amazedballer,"There's lots of examples in https://www.lightbend.com/case-studies if you're looking for end user applications, and there are a ton of Play projects and examples out there.  

The larger open source applications tend to be government agencies, such as [https://github.com/hmrc](https://github.com/hmrc) or [delving](https://github.com/delving/culture-hub).",1513905504.0
orionmatrix,"Apache Spark is written in Scala, and here's a Quotation answer from the CTO about why they did:

https://www.quora.com/Why-is-Apache-Spark-implemented-in-Scala",1513916842.0
channingwalton,"Http4s can be run as an application but of course it’s not domain specific, but there would have been many decisions about how to build a functional web server. 

You can ask questions on their gitter. 
",1513931530.0
Scf37,"Why no one mentioned Twitter Finagle?
Tons of battle-proven, high-performance, real-life scala code.

Not that functional but totally practical example on how to build large applications in Scala.
",1513956365.0
jlward4th,"Here are two of my non-trivial, open source Scala projects:
https://github.com/webjars/webjars
https://github.com/Salesforce/salesforce-cla

I only occasionally work on these projects and Scala / FP has really helped with the intermittent maintenance because when I come back to the code base after a long break, it is easily understandable.  This isn't the case with other languages due to mutability, lack of pure functions, and limited expressiveness.",1513956460.0
sciss_,Perhaps search through https://index.scala-lang.org/search?q=-library&page=1&sort=stars,1514114313.0
volpegabriel,"Maybe you could describe more in details what you're really looking for? We can't guess what you're not interested in.

There are plenty of amazing open source Scala projects out there. For example look here: https://typelevel.org",1513878697.0
adrice727,"[Programming in Scala](https://www.amazon.com/Programming-Scala-Updated-2-12/dp/0981531687/ref=sr_1_1?ie=UTF8&qid=1513816444&sr=8-1&keywords=programming+in+scala) is very good and gave me a real understanding of and appreciation for the decisions made in designing the language.  If I were starting over, I would probably do Odersky's first [course](https://www.coursera.org/learn/progfun1) on Coursera, read the book, and then jump into a project.",1513816801.0
yanshuai,I think [this](https://gist.github.com/d1egoaz/2180cbbf7d373a0c5575f9a62466e5e1) is a great resource :) ,1513840651.0
amazedballer,"The great thing about Scala is that you don't need to use a strict OO or a strict FP paradigm.  Scala works with you to make things possible through rich types and implicits, and doesn't force a particular style on you.

The tour of Scala is a good way to get an overview of what's going on, but it doesn't tell you about the idioms of the language, and why things like type variance matter.  But when you want to define your types as strictly as possible, it starts to matter more.  

As you get into things like type safe builder patterns, you may start using F-bounded polymorphism so you can return the most specific type.  

When you start using type enrichment and type conversion, things like low priority implicits defined on the singleton objects and the type class implicit pattern start to matter more.  Implicits especially tie a lot of magic together.

I got many tips from Age's presentation, especially when it comes to using implicits:

https://www.slideshare.net/NLJUG/scala-design-patterns-age-mooij

Konrad has a great website all about the fun you can get up to with types:

https://ktoso.github.io/scala-types-of-types/

And David Coupland's Tour of Scala is also useful:

http://naildrivin5.com/scalatour/

In terms of ""what can you do with implicits"", I wrote an emoji handling library mostly as a joke, but it does show how you can use implicits in your API:

https://github.com/lightbend/lightbend-emoji

Although it's when you combine implicits with type parameters that things start getting really fun and strange (the ""context bound"" syntax you'll see is really some chrome to hide the underlying implicit evidence).",1513825593.0
sudkcoce,"I think you chose the right language. I found this to be a nice resource, too.:

The Neophyte’s Guide to Scala http://danielwestheide.com/scala/neophytes.html

",1513841280.0
felixbr_,[A collection of resources I found useful over the years which I recommend to coworkers](https://gist.github.com/felixbr/8d880365c3cd6673935e) ,1513845551.0
mrn1,"I find videos from conferences a very good source of information, for example:

[Scala for the Intrigued](https://www.youtube.com/watch?v=grvvKURwGNg)

[Scala Tricks](https://www.youtube.com/watch?v=tY11Jtj-SA8)

and from sidebar [/r/ScalaConferenceVideos](https://www.reddit.com/r/ScalaConferenceVideos/)
",1513806927.0
kkchaurasia,Try to learn about the term/concept mention in http://www.scala-lang.org/old/node/8610. ITS simply the best .,1513847066.0
GratinB,"Honestly, I would recommend playing with haskell first. I was in the same position as you and the functional programming aspects didn't really make sense for me. I read a few chapters of learn you a haskell for greater good and the functional pattern really just kind of clicked. It became a lot easier to learn scala imo and I really didn't put much time into haskell. Haskell also forces you to be pure. The only thing I've done in it is write a program that takes a number and finds the prime factorization using only the concepts I learned from 2 or 3 chapters of the book. It will give you a better understanding of what you need to learn to make use of functional programming in Scala.

this book by is also really good

https://www.amazon.com/Programming-Scala-Updated-2-12/dp/0981531687

http://learnyouahaskell.com/chapters",1513809006.0
acjohnson55,The right rail of this subreddit has tons of good stuff.,1513827821.0
YoppWorks,Here's a free Beginners Guide to Scala! http://yoppworks.com/scala-guide/  ,1513869123.0
truhly,"see:
https://scalabridge.gitbooks.io/curriculum/content/resources.html",1513878338.0
LPTK,"Feel free to ask any questions you may have here.

Also let me know if you need help experimenting with the framework, and if you would like to try and use it in your own projects ;\^)",1513874475.0
emilypii,"This is one of those jobs that I would ask the client to completely refactor. The code features some very questionable practice including:

- Printing out a large subset of the target offset table (data reification)
- Printlns everywhere, instead of using a logging framework (unnecessary use of system resources, poor practice)
- `toString.to(Int|Long)` conversions (scala 101, unnecessary)
- Using a `ListBuffer` to concat data that was collected from an rdd (this will be your main memory abuse - data reification abusing, Stack and Heap and IO resources)
- `val ltDf = hivecontext.createDataFrame(ltRdd.map { x => getRow(x) }, explSchema).toDF()` (potential massive memory abuse - Heap, IO)
- Calling `df.unionAll`, just to repartition, and then partition again in the same statement. (2nd largest memory abuse - data reification - potential heap and IO resource abuse)
- Using `return` to return your streaming context (scala 101 don't do this)
- No type annotations (scala 101 do this)
- Minimal use of Dataframes (prefer dataframes and datasets - 75% reduction in memory usage and 40% improvement in speed)
- Absence of Datasets, which make sense in several places (the work you're doing with IPStuff is exacty the usecase for Datasets, and can be done in a one-liner conversion from the RDD - `rdd.as[IPStuff]`)
- `val topics = Array(topicName).toSet`. No need to say more. If you don't understand the collections API, then it's going to be very difficult to understand a complex framework with an API built to *look* like the collections API.

Yes, I'm being very harsh here. You need to learn Scala to a reasonable degree and understand the frameworks you're using before you start using them for production tasks. I have resources for you if you do feel like improving. Right now, I see a Java programmer who was forced to learn Spark and Scala, and was given a week to do it.",1513836038.0
ag3mo,"You're bringing each data batch from Kafka into the driver with this collect statement.

>val data = rdd1.map(_._2).collect()

By doing that you have no parallelization of the string splits, timestamp checks and the creation of your objects. Also you're throwing that into a ListBuffer which could easily blow out your memory allocation for the driver as your data set increases in size.

Also I'd take a look at those hive calls. Running something on hive that's not just requesting data from the partitions can be very time consuming since it needs to initialize and run its own job on the cluster. msck repair table can also be pretty expensive in terms of runtime since it needs to scan the entire table's directory on hdfs and also query the hive metastore for all the partitions for that table. Try running those commands outside of this spark job to get an idea of runtime.",1513809109.0
nerga,"Have you done anything yourself to check the performance? Have you looked at jvm flag arguments?

This is an engineering field. measuring things it useful. Pull out jprofiler or jmh and see where your code is slow. Take specific data sets to Target certain conditions.",1513795838.0
MasGui,"assert and ensuring will throw an exception, this is why it's not used a lot. We use Either, Option or any data structure that can imply success/failure. For example in [FastParse](http://www.lihaoyi.com/fastparse) you have Parsed.Success and Parsed.Failure.",1513768058.0
Milyardo,Encode your invariants into the type system instead of checking at runtime.,1513785075.0
Holothuroid,"You might the Refined library. You can do stuff like `String Refined Url` or `Char Refined Digit`.

https://github.com/fthomas/refined",1513795641.0
MasGui,`ensuring` and `required` can also be used in [stainless](http://stainless.epfl.ch/). Contracts are at the runtime and can fail unexpectedly. Stainless verify your program to make sure it's correct before it's run.,1513773915.0
jackcviers,"How deep do you want to encode your contracts.

[Refined](https://github.com/fthomas/refined) let's you constrain your primitive types (https://github.com/fthomas/refined#provided-predicates) at compile time rather than runtime with assert.

[Shapeless](https://github.com/milessabin/shapeless/wiki/Feature-overview:-shapeless-2.0.0#collections-with-statically-known-sizes) can encode heterogeneous lists, extensible records, and dependently sized collections (among other things).

[Value Types](https://docs.scala-lang.org/overviews/core/value-classes.html) can differentiate between a StreetNumber Int and an Age Int.

[Leon](http://leon.epfl.ch/) and its scala subset Pure Scala can statically verify scala code.

[`EitherT[IO, Throwable, A]`](https://typelevel.org/cats/datatypes/eithert.html) can encode side effects and error handling as a data type, so that even error handling is encoded as data, so that if you are reading data from disk and deserializing it into your model fails, you can encode the failure as data without having to use try/catch flow control statements.

You pay varying degrees of compiler execution time penalty with these things.",1513795879.0
amazedballer,"I use them!  Especially in Java exposed code, where people potentially pass in nulls and such, require is very useful.  But exceptions are for the unexpected failures, and otherwise you're better off returning an explicit failure type.  More here:

https://tersesystems.com/blog/2012/12/27/error-handling-in-scala/

If there's pre/post conditions then I would usually define a state machine and only transition from one state to another when conditions are met, and the same for a saga / process manager.  

The one thing that error handling doesn't manage well is error accumulation, which you can manage using things like [Or and Every](http://www.scalactic.org/user_guide/OrAndEvery), which I prefer over Scalaz's Validation.",1513795448.0
,[deleted],1513799808.0
,[deleted],1513772708.0
claudiok,"I've compiled the sources. You can download the pdf from
https://coding.plus/think-scala.pdf",1513719115.0
LPTK,"    > val str = ""-iPhone\n clicks 123\n likes 55\n follow 23\n -Android\n clicks 45\n likes 22\n follow 34\n reshare 2\n""
    > str.split('\n').map(_.trim).foldLeft(List.empty[(String,List[String])]) {
        case((x,xs)::tl,s) => if (s startsWith ""-"") (s,Nil)::(x,xs)::tl 
                              else (x,s::xs)::tl 
        case (Nil,s) => (s,Nil)::Nil }
    res: List[(String, List[String])] = List((""-Android"", List(""reshare 2"", ""follow 34"", ""likes 22"", ""clicks 45"")), (""-iPhone"", List(""follow 23"", ""likes 55"", ""clicks 123"")))
",1513724077.0
jackcviers,"Are the `[` present in the data and `category` consists of some comma-separated values?

Can you give us an actual line of input, please?",1513714951.0
vtscala,"If you can get your lines as an `Iterator[String]`, say from `scala.io.Source.getLines`, you can used `grouped()` to group your iterator of lines into an iterator of chunks/groups of 4 lines.  Then it's just a matter of turning chunks of 4 lines into chunks of 3 lines.",1513716144.0
jackcviers,"    val ex = ""-iPhone\n clicks 123\n likes 55\n follow 23\n -Android\n clicks 45\n likes 22\n follow 34\n reshare 2\n""
    ex
    .split(""-"")
    .filterNot(_.isEmpty)
    .map(
      _.split(""\\n"")
        .map(_.trim)
        .filterNot(_.isEmpty)
    ).flatMap{ l =>
    l.headOption.toList.flatMap( category =>l.drop(1).map(v => s""$category $v""))
    }.mkString(""\n"")

Alternatively, as a for-comprehension:


    (for{
      string <- ex
        .split(""-"")
        .filterNot(_.isEmpty)
      l = string.split(""\\n"")
      .map(_.trim)
      .filterNot(_.isEmpty)
      category <- l.headOption.toList
      value <- l.drop(1)
    } yield s""$category $value"").mkString(""\n"")

Either encoding outputs:

    res0: String = iPhone clicks 123
    iPhone likes 55
    iPhone follow 23
    Android clicks 45
    Android likes 22
    Android follow 34
    Android reshare 2",1513797081.0
Milyardo,"I don't entirely understand the problem thats being solved, but what makes you think casting is a solution for it?",1513709365.0
parc,Look up parser combinators. I don’t mean this as a smart-ass answer — the examples in the documentation for them are almost exactly this use case. ,1513715156.0
habitats,you should consider using ammonite for this:) ,1513668814.0
,[deleted],1513693721.0
wookievx,"Interesting talk, but the end was a bit worrying. I totally agree with striping obsolete and rarely used language parts, like procedure syntax but things like implicit scope or implicit conversions are quite established and widely used in the community (does not mean one should use implicit conversions everywhere but there are occasions they are quite usefull, for example overcoming limitations of HO-types regarding variance). Can someone explain part about existential types, cause i did not understand it properly.",1513685244.0
denisrosset,Slides here https://adriaanm.github.io/reveal.js/scala-2.13-beyond.html,1513768077.0
osamc,"Short answer: they do not exist in required quality.

You can use spark for some things.
You can load tensorflow model graph and do predictions (and also training if you are brave enough).
And yes there is weka and couple of projects with small traction.",1513639621.0
fommil,"Give smile a try https://github.com/haifengl/smile

It's built on top of netlib-java, which is [pretty damn fast](http://fommil.com/scalax14/#/)",1513794878.0
nerga,Apache Spark and Elastic Search for big data. If you need high performance computing I like [ND4J](https://nd4j.org/). I am not how much of the scientific ready made libraries that Numpy and Scipy has available are available through ND4J though. For visualization maybe Kibana?,1513639685.0
galqbar,"As other people have said, they don’t really exist. 

Now that said, the Spark data frame API was heavily influenced by pandas and is fairly rich. I’ve been using it long enough I find it more natural than pandas. For graphing ad hoc stuff I’d look at Jupyter notebook on top of spark. This is not a competitor to matplotlib but it communicates the idea. ",1513747699.0
teknocide,Thank you for managing that subreddit!,1513645779.0
know_not_much,Thanks everyone for complements. ,1513695691.0
habitats,any recommendations? ,1513668700.0
PrimozDelux,Really appreciate the work you put in managing that sub. Props!,1513679817.0
SubMachineGhost,"I am working on a tool that lets you compare the information of two flat files (delimited and fixed length).

The tools lets you compare files containing different types of rows, for examples headers, records and trailers. It also lets you select which columns you want to use during the comparison, so effectively you can leave out some columns from the comparison. there are other helpful features too. Like matching column values with regex, ignoring case, ignoring leading and trailing white space...

This tool really shines during the creation and automation of  regression tests for batch processes that output files or write to a database. 

You can easily check that a code change did not introduce a regression by verifying that the batch process' output have not changed. this is achieved by retrieving the batch's current output, either from files or database tables, and comparing it using this tool with the output from a previous batch execution.

I am still in the process of writing the documentation, so if this tool interests you, send me a PM, and i will help you get started.

[the code and the binary can be found here](https://github.com/MouslihAbdelhakim/Quick).

[some usage examples can be found here](https://github.com/MouslihAbdelhakim/Quick-examples).",1513779452.0
m50d,"I just released version 1.0 of [Tierney](https://github.com/m50d/tierney), a generic hybrid free monad/applicative library. It lets you compose commands to be interpreted later, with explicitly serial and parallel composition - essentially it's a library for doing [this talk](https://speakerdeck.com/markus1189/free-monads-and-free-applicatives) with less manual work (e.g. no need to define `GitHubApplicative` ""by hand"").",1514195986.0
justinhj,I'm working on solving the 25 2017 puzzles in advent of code in Scala. I was too busy at work in December to solve them all but I've been doing a few during the xmas break. Trying to stretch my working knowledge of Cats and FS2 a little while solving them. https://github.com/justinhj/scalaadvent2017,1514664379.0
zzyzzyxx,"I have some experience with akka-streams, though not its XML processing, so while I can't definitively answer all your questions I think I can provide insight on a few.

> needs to be fast. very fast.

My experience is that everybody says this but it's almost never true. You might _want_ it to be ""very fast"", but it's unlikely to _need_ to be as fast as you think. Avoid whatever obvious performance pitfalls you know of, maybe put in like an hour's research on pieces which simply feel too inefficient, and forget about the rest at the start. Chances are it'll be fast enough, and getting something working at all is already infinitely faster than if it didn't exist. Optimize after you have measured a program that works and found it lacking. In a sense, if you don't have numbers you don't have a problem.

> Do you really need to build everything in your application into a stream?

My opinion is that the real value in akka-streams is less about the incremental aspect of streaming and more about the automatic back-pressure. If you're not making use of the back-pressure, then I feel you're not gaining much over writing standard functions and avoiding the library. If you are making use of it, it works best when everything in the system is built to understand back-pressure. So I'd hesitate to say everything must be a stream, but I would say that if it benefits from back-pressure and can be processed in stages, then it might make sense to include that in a stream.

> Sinks take a second type parameter which is ""emitted"" during processing. What is this for?

Ah, the ""materialized value"". It took me a while to form a mental model for this and my last attempt to explain it wasn't super effective but I'll try anyway. There may be some technical inaccuracies here - I'm just trying to convey the intuition for what happens - though I'd appreciate corrections on the technical aspects where they are wrong. The materialized value is a pretty general notion so I will be talking in pretty general terms, followed be a couple more specific examples.

With akka-streams you construct a graph which describes your data processing pipeline (the `RunnableGraph`). This graph actually does nothing until you ""materialize"" it. During materialization, the graph is validated to ensure all sources and sinks have been connected and you haven't, e.g., connected an output to more than one input. If you're using the `ActorMaterializer` (and you probably are) that's also when the various actors that will process the messages get created. As a side effect of all this construction you can get a value which is not part of the data processing pipeline but which may tell you something about the stream or let you interact with it: the materialized value.

Many stages in the graph may have their own materialized value created upon construction of the graph. These tell you something about the stage and it is up to you how you handle all of them together to give you information about the graph. When you wire one stage to the next you can choose what do with each stage's materialized value using `Keep.left` or `Keep.right` or `Keep.both` or whatever combination function you choose. So, for instance, if you need to do something with the first stage's materialized value you'll have to pipe that through the whole graph so that it gets created and returned (""materialized"") at the end.

More concretely, one kind of materialized value could be a `Future[Done]`, which might indicate when your stream has processed all the elements that it's going to and is complete, either successfully or with an exception. This `Future` isn't part of the stream and isn't sent through the stages, but does give you some extra info about what's happened within the graph.

Another kind of materialized value is one I used through the `ActorPublisher` trait. This materialized an `ActorRef` to which I could send messages, and the result of that actor's processing could be emitted into the rest of stream. So again, the materialized actor itself doesn't go through the graph, but the actor is sort of a ""handle"" which lets me interact with the stream. I used this to get some RabbitMQ messages from a third library into the akka-streams pipeline as this was before the Alpakka AMQP connector supported late acknowledgment of messages. In fact I needed multiple such actors for different queues, so I made sure I preserved the materialized value from each stage in order to handle them correctly later, outside the graph.",1513503029.0
wdhandy,"I've used akka-stream to solve a very similar problem, except that it was mostly CSV, not XML. I've extended the app to do XML as well since then, but my initial use case was CSV. Additionally I needed to be able to swap out several different CSV ""schemas"". Once parsing the data I needed to transform it into an object in our application domain, and then store it in a database. Statistics about what was produced also need to be aggregated and saved for later analysis or potential reprocessing of the file.

So I have 2 (or 3) main functions or flow types:
1. Parse a row of a CSV into a domain type. This needs to be aware of the source file. Something also has to be responsible for opening and closing the stream.
2. Store a domain type in the database. In our case this logic is defined per domain type.

Once these concepts are defined and only then, I went about writing the akka-stream code, which simply wires everything together. Each individual function is testable (mostly) without involving akka at all, but when needed, different pieces can implement their flow using the akka-stream API.

I'm out of time to write this now but hopefully that helps.",1513515401.0
Storini,"Any particular reason why akka-streams? FS2 appears at least as appropriate, though I am no expert.

What I'd like to see is some kind of guide to picking an FP streaming library, however given the pace of evolution in this space it would be a challenge to maintain fairness over time...",1513539695.0
runT1ME,"I gave a talk on how to achieve this type of compile time enforced ordering in an API at *Scale by the Bay* this year. 

https://youtu.be/JPVagd9W4Lo",1513450461.0
BarneyStinson,"Why even use Maps where each key maps to the same value? 

EDIT: I just read that each state would be a case class, so it would not be the same value. My bad.",1513426563.0
,This is great. I met the author at SBTB and he's looking for feedback and contributions. I think this should be a Typelevel project ;-),1513445879.0
scalatronn,"This looks good, too bad Dobbie doesnt have schema creation from classes. Also no login, registration plug-in from http4s. Project also needs front end.

I like how elixir's Phoenix and elm plays together",1513458020.0
,[deleted],1513390971.0
,"2nd Ed came out in Jan 2011 when the current version was 2.8 and there have been a ton of changes since then (we're now approaching 2.13). So I would encourage you to get the third edition if you can. Also see *Programming Scala, 2nd Ed.* by Dean Wampler (O'Reilly).",1513378457.0
jtcwang,Does your method have implicit parameters? I don't use scalamock but forgetting to pass in implicit explicitly is a common mistake I make as well when using other mocking libraries,1513366300.0
agbell,"Andre had a great write up on moving key infrastructure to scala [here on r/scala](https://www.reddit.com/r/scala/comments/5rapf6/duolingo_rewrites_its_engine_in_scala/). I thought it served as an interesting case study of the benefits of FP and static typing.  We had a great chat in the linked interview.  It is probably a bit basic if you are already a scala dev, but Andre has an interesting perspective on real world software rewrites.",1513352141.0
MasGui,"One great way to learn is to contribute to projects. Here are some ideas from our Scala Center projects. We are at your disposition to fix those issues.

* [Scastie #50 Support for Scala-Native](https://github.com/scalacenter/scastie/issues/50)
* [Scalafix #485 Add --blame show offending commit](https://github.com/scalacenter/scalafix/issues/485)
* [Scalafix #357 Proxy -Xlint warnings](https://github.com/scalacenter/scalafix/issues/357)",1513343392.0
ScalaWilliam,"https://www.scalawilliam.com/essential-sbt/
https://github.com/ScalaWilliam/ActionFPS",1513474804.0
enverest,Maybe you will like chess [server](https://github.com/ornicar/lila) for lichess.org,1513353031.0
sake_92,"How about rendering static sites, XMLs etc? You can play with this all you like: https://github.com/sake92/sbt-hepek 
I made my website with it: https://github.com/sake92/sake-ba-source

It is VERY simple, just calls your `render` method. You can do all sorts of interesting things with it. You can use the **same structures** to build HTML, XML sitemap, PDF document etc.

I'm planning to make it abstract, to support *pluggable themes*, like Jekyll and similar.  
But it is more **intuitive**, you have autocomplete, whole Scala language in your toolbox etc.",1513697457.0
amazedballer,"You're on the wrong page, and Play 2 uses SLF4J configured for Logback by default.  Use the sentry logback appender:

https://docs.sentry.io/clients/java/modules/logback/",1513281945.0
teknocide,"Hmm, the page says ""You are viewing the documentation for Play 1. The documentation for Play 2 is here.""

I assume you're running Play 2?

https://www.playframework.com/documentation/2.6.x/ScalaLogging",1513275462.0
Doikor,"There are some misconceptions in the article. One that to me pops out:

> Conversely, Scala uses the actor model which is more modern and efficient.

No it doesn't. Scala has a library that allows you to use the actor model (akka) but you can use it from java too. The akka java api is actually quite nice.",1513250175.0
LPTK,"> As Java was created in the 1990’s it was designed like other conventional object-oriented programming languages. However, it has since been upgraded with functional programming capability.

I'd like to know where this myth comes from that Java is functional-programming-ready. 

When you don't have pattern matching, an expression-oriented syntax and facilities for immutable structures, I hardly see how you can call yourself functional. 

Lambdas are just syntax sugar for single-abstract method classes. In fact, IntelliJ used to _display_ SAM class instantiations as lambdas before Java actually had lambdas, so at least for IntelliJ users adding lambdas to Java changed practically nothing.",1513250984.0
phazer99,"While Java could possibly get improved support for functional programming with things like [pattern matching](http://openjdk.java.net/jeps/305) ([switch expressions](https://bugs.openjdk.java.net/browse/JDK-8192963)), [local type inference](http://openjdk.java.net/jeps/286), [data classes](http://cr.openjdk.java.net/~briangoetz/amber/datum.html) etc. in the near future, I don't think it will ever obtain features like HKT's and typeclasses/implicit parameters. These are the features that make Scala suitable for more advanced functional programming. So, Java is more likely to occupy the same spot as Kotlin rather than replacing Scala.",1513256483.0
know_not_much,"10 upvotes for this low quality, click bait article? ",1513290060.0
phazer99,"You can use `Try` to encapsulate exceptions (but there are alternatives like the new [Scalaz 8 effect library](https://www.youtube.com/watch?v=wi_vLNULh9Y)) and then use `map`, `flatMap` etc. to process the result further. Your `takeMovieWithId`, `viewMovies` etc. methods should really return `Try[ResultType]` instead of using some ""magical"" value to indicate an error.",1513246711.0
sudkcoce,"If you want to go the  pure fp route, this would be a good start:
 http://tpolecat.github.io/doobie/",1513282947.0
lu4nm3,"If you aren't constrained to using the default Java sql library, there are other Scala libraries for database access like Slick, Quill, or Doobie. Most of them expose error handling functionality that you can leverage.",1513275797.0
m50d,"I don't have access to gist where I am, so just guessing:

> 1) Does anyone have a good Idea how to encode the Typerestriction on AVRO Union. Avro Unions cannot contain other Unions directly, but can for example contain Records which then again can contain Unions. So union -> union is not allowed but union -> record -> union is ok.

The most direct way to model this is with types; you can have two mutually recursive sealed traits:

    sealed trait RecordMember
    sealed trait UnionMember
    case class Record(members: Map[String, RecordMember]) extends UnionMember
    case class Union(members: Seq[UnionMember]) extends RecordMember
    ...

If you want to do this in a fixed-point way, you have the problem that there are two equivalent ways to define the fixedpoint, and there's a direct conversion between the two (so you can define an `Iso` or something) so they're equivalent but not equal:

    case class RecordF[A](members: Map[String, A])
    case class UnionF[A](members: Seq[A])
    type Record1 = Fix[({type L[X] = RecordF[UnionF[X]]})#L]
    type Union1 = UnionF[Record1]
    type Union2 = Fix[({type L[X] = UnionF[RecordF[X]]})#L]
    type Record2 = RecordF[Union2]
    def record1AsRecord2(r1: Record1): Record2 = r1.cata {rur2: RecordF[UnionF[Record2]] => rur2.map {ur2 => fix(ur2 map unfix)}}

If you're using boxed fixpoints then `record1AsRecord2` is massively inefficient at runtime, which may or may not be a problem for you. If you're using unboxed fixpoints then in theory it's a no-op, and you could even implement it as an `asInstanceOf` for efficiency.

There might be a more elegant answer to working with this kind of fixed point - I'm not that experienced with these things.

> 2) would using fixpoint recursion in form of Fix, Free and CoFree make the querying later easier? I'm somewhat on the fence since I have no experience using these yet.

I don't know about querying (I implemented TQL on top of fixed points but sadly that implementation was private to my client at the time; I'm not aware of a public equivalent). It gives you access to a bunch of nice traversal functions that you don't have to reimplement yourself. But it's always possible to write your own `cataM` etc. by hand.",1513864395.0
amund91,"Not really helpful for your problem, but have you looked at https://github.com/sksamuel/avro4s ?  ",1513251062.0
joshlemer,"Formatted:  
  
    import scala.io.StdIn._

    object Question_match {

      def main(args: Array[String]): Unit = {

        print(""Enter first integer: "")

        var value1: Int = readInt()

        print(""Enter second integer: "")

        var value2: Int = readInt()

        value1 match {
          case 1 => value2 += 1
          case 2 => value2 -= 4
          case 3 => value1 = value2 * 2
          case 4 => value1 -= 3
          case 5 => value2 += 1
          case _ => value1 = value2 + 1
        }

        println(""value1 = "" + value1 + "", value2 = "" + value2)
      }
    }",1513225564.0
joshlemer,What's your question? I'm kinda confused.,1513225666.0
affinehyperplane,"Wow, thats awesome! The native cryptography capabilities of Java are such a pain to work with in idiomatic Scala, great to see a carefully designed functional alternative! Now I have to think of a project to use  this library (related: https://i.redd.it/79yl0lwl2yzz.jpg).",1513202712.0
jokasx,Great work. Been waiting for fart too long for something like this. Thank you <3. The APIs look very nice.,1513218528.0
goralph,"This looks really good, impressive effort. I'll definitely be checking this out soon and maybe even trying to contribute ! ",1513245960.0
MasGui,"This is really cool. What would be the use case for crypto in Scala? I mean, do you use this library for a specific application?",1513252205.0
joshlemer,"Thanks for this. I love the website, documentation and motivation. Great stuff!",1513268574.0
manojlds,"We are extracting out things from our data pipeline platform as open source components, and Schemer is the first piece. Feedback and thoughts will help us know if people are finding it helpful..

Here's my talk about our data pipeline platform - https://www.youtube.com/watch?v=UbzMuEXt59c

Part of the demo includes the schema registry features.",1513197231.0
lu4nm3,Some documentation would be nice...,1513200082.0
know_not_much,"If I were you. I would make a small sample project with some code similar to your actual project. That way, we can look at the code and then give you some hints on what may be going wrong. otherwise its very hard to say why you are getting low throughput in prod vs your dev.",1513215342.0
PrimozDelux,You could try out the scala gitter channel too.,1513173741.0
joshlemer,"Could you please post where the position is for, or if it is remote?",1513173829.0
nonsleepr,Scala and Angular to fix the calendar bug sounds like a pretty weird mix. I would assume you're using Scala.js there. Are you looking for someone who would fix that particular problem you have or is there more to it?,1513175805.0
liorchen86,"Hi

My name is Lior. I'm an experienced scala developer working as a freelancer these days.
I have a rich background with many technologies/environments. I have experience and ability to build products from scratch to production level by myself. this is my email: liorchen2@gmail.com . feel free to reach me out any time.",1513234826.0
acjohnson55,"I'm no expert in this, but it seems to me like maybe you wan the kill switch to terminate the input to your system, ahead of where you buffer. That way, the completion of the stream would be buffered as well. I think.

I've tried to do a similar thing with an Akka HTTP web socket server, to establish tight semantics around termination. But I got to the ""good enough"" point and stopped trying to get it rock solid.",1513185971.0
JWooferZ,"> Go is great.

Lost me there. I don't see anything great about a language that is practically an enemy of abstraction and proper polymorphism.

Note that I don't mean to rag on your article. I think your effort is cool that you're trying to educate, but it's the simple fact you're bringing in a language which forgoes even the most basic elements of abstraction (so neither generics, nor the OO side inheritance, nor the FP first-class typeclasses) and trying to implement something from another language, which only highlights how awful the target language is in the firstplace.

If I had to write  ```new IntTry``` in scala I would've ditched the langauge a long time ago. It's a language that's essentially ""C with a gc and some baked in concurrency"", which is _awful_ to use for any sort of applications where you need logic that's not just networking stuff and basic concurrency of primitives.",1513137218.0
dolshansky,One word - generics,1513145593.0
thehenkan,"I prefer articles with unintentional sarcasm, personally ¯\\\_(ツ)_/¯",1513133911.0
emilypii,Great post! It's interesting to see the benchmarks for something like this. ,1513171417.0
jackcviers,"> Personally speaking, when using all this stuff in my own work projects, I often find it nice to provide two sets of interfaces:

> A low-level ecosystem of algebras, raw data types, logic, etc. Usually an entire package.
> A high-level DSL that very cleanly exposes common high-level functions and hides all the algebra composition, calls to cata and other morphisms, etc. Usually a single object.
This approach allows all devs to get the most common types of work done without any knowledge of recursion schemes or theory. They just see a small, high-level DSL that's easy to skim, understand and use.

This is a great approach to building maintainable libraries and applications in - general. ",1513173836.0
zzyzzyxx,"Unrelated to the post itself but from part 1 linked at the top:

> Note: You could also use an implicit object but it can cause implicit resolution problems later. I can't remember why/when anymore, it's just become habit.

Does anyone know what they're talking about? I've not encountered resolution problems with implicit objects compared to implicit vals before.",1513211933.0
BarneyStinson,"I think what you're looking for is a monad transformer, e.g. `EitherT`:

    import scala.concurrent.Future
    import cats.data.EitherT
    import cats.instances.future._

    implicit val ec = scala.concurrent.ExecutionContext.global
    val one: Future[Either[String, Int]] = Future(Right(1))
    val two: Future[Either[String, Int]] = Future(Left(""boom""))

    val six = for {
      a <- EitherT(one)
      b <- EitherT(two)
      c  = 3 + b
    } yield a + b + c

    six.value // gives Future(Success(Left(boom)))

You can find this in cats or scalaz.",1513025606.0
dae_breaker,Exactly the same as your map function but instead of Right(f(r)) you would just put f(r),1513026570.0
erwan,Question not just for you but anyone using the same pattern: why use Future[Either] rather than putting your errors in Future.failed?,1513033137.0
AlexITC,"This looks very similar to what I have done in a project, I use a `FutureOr` monad transformer that uses the `scalactic` library instead of `Either` (see https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/commons/FutureOr.scala).  
  
What I did is to define a custom type `FutureApplicationResult[A]` instead of linking to `Future[A Or Every[ApplicationError]]`, I'm using `ApplicationError` in the whole application anyway, you could see usage example here: https://github.com/AlexITC/crypto-coin-alerts/blob/master/alerts-server/app/com/alexitc/coinalerts/services/UserService.scala#L28  
  
It should be trivial to adapt the logic to work with `Either`, one advantage of scalactic is that it has a non empty list.",1513040432.0
gstraymond,"This is what I'm using in production. Note that I use a case class (to simplify creation) and extends `AnyVal`
for better performance (https://docs.scala-lang.org/overviews/core/value-classes.html#extension-methods)


    case class FutureE[+L, R](future: Future[Either[L, R]]) extends AnyVal {
  
      def flatMap[S, G >: L](f: R => FutureE[G, S])
                          (implicit ec: ExecutionContext): FutureE[G, S] =
        FutureE {
          future.flatMap {
            case Left(l) => Future.successful(Left(l))
            case Right(r) => f(r).future
          }
        }
  
      def map[S](f: R => S)
                (implicit ec: ExecutionContext): FutureE[L, S] =
        FutureE {
          future.map(_ map f)
        }
    }",1513072660.0
wandernotlost,Nothing you described requires platform-specific tests or behavior. Abstracting that away is part of the function of the java.io platform. I’d write platform-agnostic code and trust the Java implementation to properly handle the platform-specific details.,1513013683.0
Daenyth,"Have one test that checks the system type and runs one or the other of the specific code?

",1513004874.0
amazedballer,"You can write system dependent tests, or you can use testing filesystems such as https://github.com/sbridges/ephemeralfs that let you mock out the internal behavior.",1513006986.0
Bolitho,"Can you explain further, why comparing pathes involves interaction with the filesystem? Perhaps you can show us your test? ",1513012727.0
zero_coding,"I have following setting:  

      lazy val commonSettings = Seq(
        organization := ""io.khinkali"",
        version := ""0.1.0-SNAPSHOT"",
        scalaVersion := ""2.12.4"",
        libraryDependencies ++= Seq(
          ""org.slf4j"" % ""slf4j-simple"" % Log4j,
          ""ch.qos.logback"" % ""logback-core"" % Logback,
          ""org.apache.shiro"" % ""shiro-all"" % Shiro,
          ""org.typelevel"" %% ""cats-core"" % Cats,
          ""org.typelevel"" %% ""cats-effect"" % CatsEffect,
          ""org.apache.kafka"" % ""kafka-streams"" % Kafka,
          ""org.apache.kafka"" % ""kafka-clients"" % Kafka,
          ""commons-beanutils"" % ""commons-beanutils"" % Bean,
          ""io.circe"" %% ""circe-core"" % Circe,
          ""io.circe"" %% ""circe-generic"" % Circe,
          ""io.circe"" %% ""circe-parser"" % Circe,
          ""com.github.mpilquist"" %% ""simulacrum"" % Simulacrum,

          ""org.scalactic"" %% ""scalactic"" % Scalactic,
          ""org.scalatest"" %% ""scalatest"" % Scalatest % ""test"",
          ""org.scalacheck"" %% ""scalacheck"" % ScalaCheck % ""test"",
        ),
          resolvers ++= Seq (
          ""Sonatype OSS Snapshots"" at ""https://oss.sonatype.org/content/repositories/snapshots""
          ),
        fork in run := true
      )  

Could someone please explain it to me what does `fork in run := true` mean?  
Thanks",1513699552.0
mbo1992,Is there any practical difference between using a companion object's apply method vs using the class' constructor? Not having to use the new keyword doesn't seem like enough of an advantage to warrant a new language feature.,1513709190.0
ryantheleach,"Not 100% Scala, but does anyone know why the following HOCON doesn't parse in lightbend config, but parses fine on www.hoconlint.com

https://gist.githubusercontent.com/DMCK96/bbadf6e7dbb8f0f1f1f34cfcc583cbfc/raw/d4f0a2608889d620c95099d6251dd98bd691b98e/rewards.conf",1513814225.0
,[deleted],1513003742.0
Philluminati,"Regarding the writer monad found in free monads texts for logging...

If the logging is delayed til the business domain objects are run through the interpreter.. how do you debug the actual building of the tree of building domain objects?",1513291886.0
zero_coding,"Hi all   
I would be very happy, if someone knows the answer: https://stackoverflow.com/questions/47859294/object-kkapi-is-not-a-member-of-package  
Thanks",1513590558.0
emilypii,"The math looks solid - the implementation needs work. I see no type annotations, POJO style objects, and mutable data structures. If you'd consider reimplementing the bulk of this in the FP paradigm or even in Scala (this not Scala - it's Java with Scala keywords), I'd be happy to help.",1513722958.0
cittatva,This looks cool and I’ve got an application that I want to analyze for bottlenecks.  Can this help?   How does one read these graphs?,1512953812.0
hebay,do you allow remote engineers?,1512763419.0
Odersky,"I find this is a very interesting and convincing article, and am shocked by the negativity of some of the other comments, as well as being disgusted by their implied arrogance. ",1512813803.0
l-forite,"You can actually checkout [Waves blockchain](https://github.com/wavesplatform/Waves). They are doing some asset management on top of a in house blockchain, if I understood it correctly. It's written in Scala / Akka and is ranked around [~20th in the cryptos](https://coinmarketcap.com/) (sorted by market cap). So indeed, it is very possible to code a blockchain in Scala and succeed :)",1512946399.0
jackie_pwn_asses,For my part I'd prefer Scala not get embroiled in the blockchain.,1512763603.0
mortal_esteban,"What's the author's main argument for using Scala? I saw something about ""your code will run anywhere and everywhere"" but that's true of a lot of things these days. What did I miss? Did he even say the word, ""Monad?"" ",1512746913.0
joshlemer,"Hahaaaaaaa quote of the month:  
Miles:   
People are already pretty widely using this stuff (Refinement Types, etc) in production  
Adrian:   
Yeah well people are using Node.js in production so..",1512605335.0
lutzh-reddit,"It's sad in a way, because I could imagine an actually interesting discussion about if Scala will still ""take off"" and all the things around it (what does it even mean, what has been achieved, what could have gone (or could still go) better, what should we learn from other languages/communities etc.). But instead, it's just another re-iteration of the same old..  following the pattern laid out by https://www.linkedin.com/pulse/scala-way-out-owen-rubel/ almost 2 yrs ago:

* find some statistic that Scala use is declining
* link to Yammer article from 2011 and to isolated statements from LinkedIn and Twitter
* claim that Scala is just too complicated for the average programmer (make sure to include the word ""academic"")
* make some speculations about what Martin and/or Lightbend really want, opposed to whatever they may say
* optional: the real solution to everyone's problems is Groovy (or Go or Kotlin, depending on when the post was written).

No serious arguments, no accounts from personal experience, no statistics seem to be able to debunk those beliefs. If you engage in a discussion around this, I admire you for your stamina. Personally I'm just so tired of this.
",1512559894.0
Ironballs,"The Twitter quote in the top post is stupid. I spoke to Twitter engineers at ScalaDays 2017 and their usage of Scala is increasing, not lowering.",1512563571.0
ivanovich_ivan,"That quora answer is so full of bullshit.

There was a discussion that I initiated in this sub previously and later I started to work with Kotlin. Honestly I don't understand what the fuss is all about. It is just simple syntactic sugar over Java. They even ran a reddit AMA and didn't have a proper answer to ""What is going to happen if Java itself gave some of the features you have done?"" - https://www.reddit.com/r/Kotlin/comments/7hoytl/kotlin_team_ama_ask_us_anything/dqtd07k/

From that thread

> We finally have it. Kotlin is Java 2.0. The future of Java is Kotlin.

Seriously WTF? 

I can't take these trolls anymore, they are all over the god damn place. Reddit, Hackernews, Quora. Seriously, I think the Scala core team should write some rebuttal so that people can link to that. 

",1512575865.0
ewgxyz,"Whether it takes off or not, learning Scala has improved the code I write for work in Java and JavaScript. Thank you, Scala!",1512574709.0
PrimozDelux,I feel really sad for the people who spout their hot opinions on quora,1512566719.0
sciss_,"Those type of questions are silly, but nice to see that there is a [GitHit 2.0](https://madnight.github.io/githut/), where Scala is in good position at #12, still with upward trend.",1512559526.0
DGolubets,"> At the very least you will combine Scala and Java, so why not just limit yourself to Java

* At the very least you will have to write some unsafe code in Rust, so why not just limit yourself to C?

* At the very least you will have to eat cornflakes once in a while, so why not just limit yourself to eating cornflakes?",1512662792.0
hyperforce,"What does ""take off"" mean? And is it a metric worth caring about?",1512579278.0
oniltonmaciel,"To explain why I posted this here, it was more to make people more qualified than me post a better and sane answer there :)",1512584641.0
kailuowang,"Funny the answer claimed that scala is going down *despite* of Spark, while in the chart he gave, Scala's PR percent raised from 1.4% to 2.0% since Spark is released. That's a 40% growth in 3 years. ",1512582284.0
mslinn,"I believe that the percentage of Scala vs Java programmers is unlikely to ever increase appreciably. I expect Scala will remain a niche technology.

Full disclosure: I program in Scala every day, I operate ScalaCourses.com, I am the founder of SF Scala, and I ran the world's largest Scala user group until a few years ago.",1512620008.0
phazer99,"Nothing new under the sun there. I think there's about zero correlation between a language ""taking off"" and its technical merits (although Rust might be an exception).",1512557846.0
moonlightingquacker,"Godz, these baiting questions are getting *so* bloody tiresome.  Let's encourage the moderates to nuke these from orbit.",1513035644.0
arulselvan1234,"Regardless of whether scala is going to take off or not, I started learning scala in my free time and really loving it so far. I believe it is making me a better programmer and enables me to apply the right tool for the right job. That's the most important thing that I care about.",1513193313.0
phazer99,"I assume you mean that the problem is that `playWith` in `Dog` and `Wolf` has different signatures. You can partly solve that with F-bounded polymorphism or by using typeclasses. [This blog post](https://tpolecat.github.io/2015/04/29/f-bounds.html) contains a good discussion of the possible solutions.

Also you should really reconsider your inheritance hierarchy, a wolf is really not a dog (but they are both canine) and a pony definitely isn't a dog :) In general avoid inheritance unless you are sure the is-a relationship will always hold, even considering future additions. For polymorphism you can instead use typeclasses or just passing around function objects as arguments.",1512555817.0
ratherbefuddled,"In the code above, Wolf does not extend Dog and Dog does not extend Animal. They are unrelated. ",1512548706.0
fosskers,"**In essence:** Choose based on use-case. The two libraries have similar APIs and performance, and the [shims](https://github.com/djspiewak/shims) library means you can use any Cats' sublibrary with Scalaz and vice versa.

I wrote this comparison originally as internal R&D for work. We have a number of several-year-old Scala projects that we'd love to apply more FP too, but needed to make an informed decision about the benefits and trade-offs of Scalaz and Cats.

I intend to maintain this as long as necessary, for instance by updating the benchmark results as new releases appear.",1512493174.0
,"Good writeup. A few more data points:

- fs2 depends on cats now.
- http4s wasn't mentioned (it depends on cats as well).
- a recursion schemes lib for cats is in the works.
",1512503671.0
pellets,Reminder that you can use either one with libraries that require the other. You just need one import from https://github.com/shawjef3/Harmony,1512512833.0
mdedetrich,"The only thing I am missing in cats is a DAG library, same in style to the old scalaz tree.

On the other hand, cats has a lot of stuff which doesn't really exist in Scalaz, such as a http library (http4s) and database library (doobie). Hope we can get to a point where we don't have to depend on both libraries in the project.",1512510093.0
jdegoes,"One thing that is probably worth mentioning in light of some of the other comments is that Scalaz emphasizes building an inclusive and professional community.

This is evident in how the Scalaz community behaves. Scalaz doesn't restrict participation to any particular group. Scalaz welcomes contributions from anyone (even me!), and judges them only on their merits, not on the political alignment or ideological purity of their authors. Scalaz doesn't block anyone on Github, and personally I don't block anyone anywhere. Scalaz contributors don't contact employers to get people they don't like fired.

In my opinion, this type of behavior is the essence of true inclusion and professionalism, and it's a welcome change of pace for some people like me who were angrily shunned and told to go away from other projects.

Another thing worth mentioning regarding Scalaz's historically ""unfriendly"" reputation is that Scalaz has a focus on a culture of technical excellence. While ad hominem of any kind is _unprofessional_ and _not_ part of the Scalaz ethos, critiques of code, architecture, and abstractions are strongly encouraged, and no effort is made to police tone or to mandate flowery language. While it can take a while to learn that _we are not our code_, ultimately I'd argue that a culture that focuses on technical excellence leads to real innovation and uncompromising, principled designs that will not emerge in an environment obsessed with ""protecting"" people from disagreement.

Anyway, thanks for putting this helpful resource together, and I look forward to the update of your comparison post-Scalaz 8!",1512577886.0
kailuowang,"This is awesome! I think it can help users make an educated decision when choosing between the two. One thing that might be worth mentioning is that Cats emphasizes on building a warm and welcoming community. And a good metric for that would be the number of contributors. Cats, being a younger project, has over 183 contributors now.
Another thing that might also be worth mentioning is that Cats will start to guarantee binary compat post 1.0, that will make life a lot easier for projects having diamond dependencies against such foundational libraries.  
",1512510883.0
raghar,"First of all: nice summary! :)

I have just small request to OP - I needed to look into benchmark source code to understand what those numbers are and if bigger is better or smaller is better. I kind of understood that they represents average time of execution in ns, correct? Could you add some description to the table? :)

EDIT: damn, I am blind, I haven't noticed this text in italic.",1512553120.0
domlebo70,"I'd have to check the licensing of the original one. I got verbal permission to use it internally, but not sure about externally",1512519578.0
domlebo70,There is https://github.com/markhibberd/pirate if you want to write CLI parsers using Scalaz.,1512512926.0
domlebo70,"Shrug. We have a forked copy and maintain it internally. We heavily use it, and it's fantastic. It's much closer to optparse applicative than the one you linked (grantee, not use that one)",1512518200.0
MasGui,"Some context:

I'm working on a feature in scalafix to only apply lint message on the recently modified code. We run git diff and we extract all the line that was modified. This gives us a set of intervals, eg between line 1 and 10, 14 and 20. see https://github.com/MasseGuillaume/scalafix/blob/drop-in-jgit/scalafix-cli/src/main/scala/scalafix/internal/jgit/DiffDisable.scala",1512491460.0
knoam,Why not use an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)?,1512537591.0
Baccata64,"Note that the fork of the compiler from the Typelevel organisation has better exhaustivity checks, dramatically reducing the risks of match error (ie you would need to tag your pattern matching with an @unchecked annotation to risk it) 

https://github.com/typelevel/scala/blob/typelevel-readme/notes/typelevel-4.md#exhaustivity-of-extractors-guards-and-unsealed-traits-pull5617-sellout",1512484993.0
LPTK,"Well, that's what most non-dependently-typed functional programming languages do (OCaml, Haskell, etc.) so I don't see a contradiction.",1512468463.0
,Yeah it's a bummer. The compiler can't tell in general whether a match is exhaustive or not (consider guard expressions for instance). But we can do better than what you get out of the box. If you use [Typelevel Scala 4](https://github.com/typelevel/scala/blob/typelevel-readme/notes/typelevel-4.md) with `-Xstrict-patmat-analysis` and `-Xlint:strict-unsealed-patmat` along with `-Xfatal-warnings` you'll get much better checking.,1512503901.0
ratherbefuddled,"There's nothing stopping you wrapping all your pattern matches in Try, but also no real need to inflict it on the rest of us!

Scala's design choice was to allow pattern matching to be very general, rather than restricted to sealed types.  When types are unsealed the compiler can't do exhaustive checking because it can't be sure that there aren't other matching types available at run time.  It's more powerful but less safe.  

I don't like the use of exceptions much but I wouldn't want to have to use Try when most of the time I'm using a sealed type.",1512462436.0
TaroKong,"So in your opinion every pattern matching should generate result wrapped in Try? Please, try and write down such a code (it would be something horrible). 

Also, you get a warning for incomplete match.
",1512461034.0
DooDooSlinger,"I agree it's kind of meh, but the compiler simply can't catch all cases of non exhaustive matches. The only way to avoid this would be to restrict pattern matching to sealed abstract classes / traits, or to throw a compilation error on matches lacking a default match",1512461124.0
Jacoby6000,"If you have fatal warnings enabled, then match errors shouldnt be possible unless the compiler is failing exaustivity checks.

You are correct though. It is not functional to throw exceptions. Also, Try would be a bad substitute here, because the failure type is known.  If we were to allow match errors and remain functional, you'd return an Either with MatchError on the Left, and the result on the Right. However, like I said before, MatchError just shouldn't ever happen. In a better language, they would be impossible. ",1512486584.0
pellets,"I think what you're missing is that pattern matching in scala has multiple uses, some of which don't lend themselves to compile time checking. For sealed traits, you can rely on the compiler. For other cases, add a `case _ =>` and handle it properly.",1512594901.0
Doikor,"The performance impact of wrapping every pattern match into a Try and checking it would be massive. Also the codebase would be annoying to use.

Then you would probably need some different construct that would not wrap the result into a Try for sealed traits as there the compiler can make sure during compile time that all possible cases were handled.",1512472097.0
dima_mendeleev,"Nice. Btw you can use native lambdas to construct DSL lambda terms

    (x: Term) => something

by computing them passing some fresh literal in place of `x` (building this fresh literal might be tricky though).",1512473174.0
Daxten,can we please put this into the std lib?,1512492618.0
haimez,"I can only hope that everyone finds this article as amusing and clever as I do. If ever there were a Trojan horse against copy-pasta, this is it.",1512705250.0
,"Huh. It's an inference trick but I confess I have never seen it before. For `open` the compiler must infer a type `T` no more specific than `S` but no more general than `Closed`, which is only possible if `T =:= S =:= Closed`. If the example when you call `close` there is no such type and inference fails.

I would write it like this, which I think is much easier to reason about.

    case class Door[S]() {
      def open(implicit ev: S =:= Closed) = Door[Open]()
      def close(implicit ev: S =:= Open) = Door[Closed]()
    }

    val myDoor = Door[Closed]
    myDoor.open.open // fails, can't open twice



",1512425001.0
amazedballer,"Those indicate bounds on types.  All types are bounded -- as an example, for a normal class Foo, the type is bounded between Any and Nothing.

So T >: U means type T is a supertype of type U"" or ""type T has type U as lower bound"".

T <: U means ""type T is a subtype of type U"" or ""type T has type U as upper bound"".

* http://naildrivin5.com/scalatour/wiki_pages/TypeBounds/
* https://docs.scala-lang.org/tour/upper-type-bounds.html
* https://docs.scala-lang.org/tour/lower-type-bounds.html",1512424888.0
dnslbr,"That's called covariance and invariants if I'm not mistaking. Basically, the Child <: Parent. ",1512460813.0
mawaworht,"Just did something I thought was cool and would like to show off :) (TLDR; at the end )


I'm working on a project where I need code generation of a lot of files. So I was thinking first to just make a dedicated code generation program or use quasiquotes. Tried that for a bit but then it occurred to me that if I have a couple of different generation ""templates"" which generate a lot of files based on many small configuration fragment, I'd have to program an ugly (relatively speaking) dedicated program for each template. And also, I can't see any advantage to doing any compilation during the code generation phase when instead I can just do the generation, and then let the project compilation catch any problems.

So then it occurred to me that what could really be great is a template engine (like the HTML ones) where I can write a template and then just apply it to a lot of configuration files (or a big configuration file with a lot of small configuration fragments).

Enter scalate! I've already used it in the past for HTML templates, so I thought I might give it a try here. Long story short, here's some code:

Generation task:    

    val res = getClass.getResource(""template.ssp"").getFile
    val output = new TemplateEngine().layout(res, Map(""A"" -> ""AV"", ""B"" -> List(""BV1"", ""BV2"")))

    Files.write(Paths.get(""out.scala""), output.getBytes)

template.ssp:
    
    <%@ var A : String %>
    <%@ var B : List[String] %>
    
    object ${A} {
    
        def x = ""${B.mkString("""")}""
    }

output (out.ssp):
    
    object AV {
    
        def x = ""BV1BV2""
    }

build.sbt:  

    libraryDependencies ++= Seq(
      ""org.scalatra.scalate"" %% ""scalate-core"" % ""1.8.0""
    )

In the end I'm happy with the result since it's very little work and the (code generation) code  looks very elegant IMO  (haven't actually implemented the generation I need though, so I'm sure I'll have many complaints later).

Next I'll probably use typesafe config for easy parsing of the configuration files, and hopefully that'll be exactly what I need.

**TLDR; used a template engine (scalate) to do very readable code generation with very little effort (that isn't related to actual code generation logic).**
",1512577891.0
tzotopia,"If anybody wants some help on a project let me know. I work full time in java, and just studied scala at home, but I would like to get more hands on experience with the language + libraries. ",1512420178.0
westernsam,"I've open-sourced a web framework we've been using at work (documentation, such as is, is here https://github.com/springernature/samatra-extras/wiki). It looks a lot like Scalatra but with a few small differences:

1. you have to return an expression from the route, no contextType = 'text/plain' in the middle of your definition
2. no funky thread local state
3. matching routes on query params is not supported
4. support for testing controllers, and apps without running a server

It's a pretty small routing lib over the servlet api, so gzip, http2, jmx monitoring all come for free with jetty. I don't know if anyone else would find it useful.

I've also open-sourced a drop in replacement for scala xml (https://github.com/springernature/vtdxml4s). It's made quite a difference to the performance of some of our apps (particularly in reducing gc).",1512568388.0
zero_coding,"Hi all    
I have a monadic recursion and want to know, if it is thread safe or not:

    private def pool[A]
    (consumer: => IO[Consumer[String, String]])
    (cb: Vector[KkConsumerRecord] => IO[A])
    : IO[Unit] = {
      consumer.flatMap { c =>
        val records: ConsumerRecords[String, String] = c.poll(Long.MaxValue)
        val converted = records.iterator().asScala.map(rec => {
          KkConsumerRecord(rec.key(),
            rec.value(),
            rec.offset(),
            rec.partition(),
            rec.topic(),
            rec.timestamp())
        })

        val vec = converted.foldLeft(Vector.empty[KkConsumerRecord]) { (b, a) =>
          a +: b
        }
        cb(vec).flatMap(_ => pool(consumer)(cb))
      }
    }
Could someone please tell me if it is thread safe or not?  
Thanks",1512921777.0
joshlemer,"[Here](https://github.com/himzo-tahic/practice-functional-todolist/blob/master/src/main/scala/ToDoListGroup.scala#L18) the idiomatic scala way of doing this would be to use an `Option[TodoListGroup]` rather than to return a nullable result. In fact, except for java interoperability, and extremely performance sensitive pieces of code, nobody should / does ever use nulls in Scala.  
  
[This line](https://github.com/himzo-tahic/practice-functional-todolist/blob/master/src/main/scala/ToDoListGroup.scala#L9) will throw exception if the list is empty. Instread of useing a reduce, you can use a foldLeft, returning an `Option` like...  
  
    toDoListGroup.toDoLists
      .map(list => s""${ToDoListUtils.stringify(list)}"")
      .foldLeft(Option.empty[String])((opt,b) => opt.map(a => s""$a  ${Properties.lineSeparator} $b""))   
  
Or if it is okay to return an empty string in the case of an empty List, you can just do
  
    toDoListGroup.toDoLists
      .map(list => s""${ToDoListUtils.stringify(list)}"")  
      .mkString(s"" ${Properties.lineSeparator} "")   
  
The nulls thing also applies here https://github.com/himzo-tahic/practice-functional-todolist/blob/master/src/main/scala/ToDoList.scala#L25  
  
Other than that, looking good!
",1512342807.0
zaxme,"First of all - congrats on joining the world of Functional programming :) 

I am planning to make a pull request where I can put up all my comments. I will then link it here so that other people can pitch in.",1512377405.0
m50d,"I wouldn't have all these methods that just call `copy` with some parameters - IMO those are clearer just left inline.

A `while` loop with a mutable `var` at top-level is fine, but not terribly functional if that's what you're aiming for.",1512393916.0
kraigmckernan,"You seem to define all of your methods for a type on a utils object, which works fine. However, you can define those functions on the class itself as well to make syntax slightly better. For example findTaskByTitle can go from:

    object ToDoList {
        def findTaskByTitle(taskTitle: String, toDoList: ToDoList) : Task =
            toDoList.tasks.find(task => task.title == taskTitle).orNull
    }

to:

    case class ToDoList(...) {
        def findTaskByTitle(taskTitle: String) : Task =
            tasks.find(task => task.title == taskTitle).orNull
    }

Then your calling convention just becomes `toDoList.findTaskByTitle(title)`.



I would also hesitate using `orNull` in any of my programs. It reduces your confidence that your program is actually going to complete without throwing a runtime exception.",1512424123.0
raghar,"Everyone uses them, not everyone knows that. :)",1512336928.0
zzyzzyxx,"Monads are pervasive in Scala because 1) they're all over the standard library (`Option`, `Either` (from 2.12 on), `Future` (more or less), `Seq` (more or less), ...), and 2) the language has `for` expressions which, while not limited to monads, can make working with monads much simpler and more consistent.",1512330116.0
danO1O1O1,"After 5 years of Scala, if you're not using Monads, you're doing it wrong. Note: Majority of that time I spent not knowing what a monad was. ",1512363984.0
,"Monad is a useful idea because it defines *very precisely* what it means to compose functions that compute effectful values. This ends up being useful because it lets us recover a lot of the expressiveness we seem to give up when we start doing FP. I gave a [talk](https://www.youtube.com/watch?v=po3wmq4S15A) on this a few weeks ago.

You can do monadic computations with concrete data types in any language; but to abstract over them and have any chance of getting everything to line up correctly you need higher-kinded types, and as practical matter you need some kind of machinery for passing arguments implicitly. Very few languages let you do this.",1512413398.0
sudkcoce,"Concepts like Monads (and typelevel programming in general) are so popular in the Scala-verse that they ""scare"" a lot of Java developers away from Scala (to Kotlin). 
I've personally experienced that way too many times. 

Pure Functional programming is a nice and useful concept but it does not do any good if someone is just getting started in Scala since it steepens the learning curve by quite a margin and is IMHO not needed in idiomatic Scala application programming...

To tell the truth, I think this Haskellesque movement has done a lot of damage to the Scala language with regards to Scala adoption rate when considering Java developers.

",1512387619.0
thehenkan,"While I haven't tried it myself, I believe people regularly use monads in OCaml as well.",1512362300.0
lyomi,Monads are widely used except that there are those people every time nitpicking that they don't follow the theoretical definition precisely,1512338570.0
ford_madox_ford,"Monads are like a box a chocolates, you never know what you're gonna get.",1512329738.0
joshlemer,"Or how about when you change the SBT build and recompile, and then the intelliJ autoimport starts, then the two sbt instances fight over a lock on .ivy2.. ",1512253739.0
stonerbobo,"All I can say is GOD BLESS `sbt 1.1 RC1` LSP + Visual Studio Code (and Eugene, and the many other people who made it possible)

Its the first time I thought of a small new Scala project, tried to get started and didn't give up frustrated 40 mins later waiting for SBT/3 million dependency downloads/IntelliJ/looking for the right `build.sbt` file to copy/encountering some version issue etc etc. Well the download times almost made me give up, but thats just my 50KBps DL speed.

Some day we will have the power of Scala with the ease of Python. It will be glorious..",1512322002.0
Milyardo,"15k keys isn't a whole lot, shouldn't take that long to resolve, not that I think key resolutions takes particularly long anyways",1512261783.0
sake_92,"Here's mine, not directly Scala, but my experience... :D

https://pbs.twimg.com/media/DPj9gKJXcAAxPUD.jpg",1513112431.0
Krever,"For some reason, I missed the fact that Spotify is using Scala. What else big players am I missing? I know about Twitter, Verizon and recently IBM. ",1512333645.0
enverest,"I've switched from Secure Social to Silhouette over an year ago.
http://silhouette.rocks/",1512157507.0
mslinn,"I wrote my own, inspired by SecureSocial. 
https://github.com/mslinn/play-authenticated

Jorge Aliss was never properly compensated for the groundbreaking work he did on SecureSocial.",1512266967.0
c2mey,We use this well-maintained OAuth2 library: https://github.com/nulab/play2-oauth2-provider,1512163220.0
enlil_reddit,"Supports OAuth, CAS, SAML, OpenID Connect, LDAP, JWT...

https://github.com/pac4j/play-pac4j",1512258327.0
Kesomir,I've used silhouette with play if you're looking for suggestions to evaluate yourself.,1512724424.0
ghostdogpr,"The way I understand the documentation is not that it’s bad to use futures in actors in general, but only in the context of a blocking call if you don’t use a dedicated dispatcher.
If the future is not blocking, or if you use a separate dispatcher for the blocking part, it’s fine. ",1512226002.0
JWooferZ,"People here have raised fine points, but also part of it, actually, is the nondeterministic nature of futures combined with the use of actors.

Actors are often used to isolate state, and you may use something like the `sender()` function by mistake in a future, only to have it refer to someone else after the future has returned. Another thing that can happen, is that if you hold some state in the actor and use it for at-most-once processing or something, you may find the state reference inside the actor you've been using not to be what you expected, as it may have been changed by the time the future returned.

You _can_ use futures just fine as long as you don't expect them to handle state, though.

P.s. Note: I don't advocate the use of akka actors at all.",1512257448.0
,[deleted],1512152086.0
,[deleted],1512162432.0
phazer99,"Now that dependent function types has been added, would it also be possible to add polymorphic function types with type parameters (for example `[T <: Entry] (t: T) => T#Key`)?",1512382218.0
,[deleted],1512411666.0
,You could print out the [cats infographic](https://github.com/tpolecat/cats-infographic) … I have been meaning to do that :-),1512150706.0
mr___,https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/MIT_GNU_Scheme_Logo.svg/500px-MIT_GNU_Scheme_Logo.svg.png,1512136250.0
StrangeAeons,"https://shop.spreadshirt.com/47-Degrees/scala+division+unisex-A107561599 
If you can get that as a poster :)",1512137403.0
MarrusAstarte,"Get this printed on a big poster: ""A monad is just a monoid in the category of endofunctors, what's the probleⅿ?""",1512156383.0
inchester,"There's also this as a T-shirt: https://www.zazzle.co.uk/hindley_milner_type_inference_t_shirt-235812502357339841

Wouldn't be hard to make a poster of it.",1512390789.0
Vinnytsia,"If you're looking to save time in the future, or would like to see other implementations, Spatial4j has Haversine, Law of Cosines and Vincenty methods available and is Apache licensed: https://locationtech.github.io/spatial4j/apidocs/org/locationtech/spatial4j/distance/GeodesicSphereDistCalc.html

It's really easy to use from Scala as well.",1512137979.0
swaggler,Try Vincenty.,1512129733.0
,Command history should work in the default REPL. You might look at [Ammonite](http://ammonite.io/#Ammonite-REPL) for a richer experience.,1512112615.0
acjohnson55,Weird to see such handy new features from a company that's trying to kill our language and replace it with Kotlin! ;) ,1512127040.0
ikhoon,Ammonite script enables by `Language &amp; Frameworks > Scala > Worksheet > Treat .sc as Ammonite`,1512096645.0
joshlemer,"Love these guys, they are always coming up with something :-). I really like the sbt automatic import!",1512096599.0
acjohnson55,"Slash syntax seems like such a massive improvement to me. I'm the surface, it seems to go a long way toward the axis system Just Working in an intuitive way.",1512127536.0
softiniodotcom,"This is great news. Really looking forward to the SBT Server support. Exciting stuff.

On a mac can use brew to install an RC Release? ",1512650908.0
japgolly,"Still much slower than 0.13 for me.

Here are the times in seconds for two `;clean;test:compile`, cold and hot:

    SBT 0.13.15 - 174 & 130
    SBT 1.0.4   - 211 & 162
",1512091209.0
Sloshy42,"Really glad that 2.13-M2 builds work now. I've been waiting for that to support 2.13 in a personal project for the past week or two.

Also I'm very glad that the SBT team and community are taking all of the constructive criticism and such to heart and people are trying their best to make SBT better. Honestly it's already one of my favorite build systems but it is very complex and was quite a deep dive for me to figure out how to configure beyond the basics. Anything that makes it easier to jump in and more powerful is much appreciated.",1512089726.0
