{{About|AngularJS|Angular 2+|Angular (application platform)}}
{{Infobox software
| name = AngularJS
| logo = [[File:AngularJS logo.svg|250px|AngularJS logo]]
| developer = [[Google]]
| released = {{Start date and age|2010|10|20}}<ref>[https://github.com/angular/angular.js/releases?after=v0.9.4 Earliest known releases]</ref>
| latest release version = 1.7.5
| latest release date = {{Start date and age|2018|10|04}}<ref name="AngularJS Releases">{{cite web|url=https://github.com/angular/angular.js/releases|website=GitHub|title=Releases}}</ref>
| latest preview version = 1.7 rc0
| latest preview date = {{Start date and age|2018|04|19}}<ref name="AngularJS Releases"></ref>
| programming language = [[JavaScript]]
| platform = [[Cross-platform]], see [[#Legacy browser support|Legacy browser support]]
| size = 167&nbsp;kB production<br />1.2&nbsp;MB development
| genre = [[JavaScript]], [[Single-page application]] Framework
| license = [[MIT License]]
| website = {{url|https://angularjs.org/}}
}}
'''AngularJS''' (also written as '''Angular.js''') is a [[JavaScript]]-based   [[open-source software|open-source]] front-end [[web application framework]] mainly maintained by [[Google]] and by a community of individuals and corporations to address many of the challenges encountered in developing [[single-page application]]s. The JavaScript components complement [[Apache Cordova]], a framework used for developing cross-platform mobile apps. It aims to simplify both the development and the [[software testing|testing]] of such applications by providing a framework for client-side [[model–view–controller]] (MVC) and [[model–view–viewmodel]] (MVVM) architectures, along with components commonly used in [[rich Internet application]]s. (This flexibility has led to the acronym MVW, which stands for "model-view-whatever" and may also encompass [[model–view–presenter]] and [[model–view–adapter]].) In 2014, the original AngularJS team began working on the [[Angular (Application Platform)|Angular application platform]].

The AngularJS framework works by first reading the [[Hypertext Markup Language]] (HTML) page, which has additional custom [[HTML attribute|tag attributes]] embedded into it. Angular interprets those attributes as [[Directive (programming)|directives]] to bind input or output parts of the page to a model that is represented by standard [[JavaScript]] [[Variable (computer science)|variables]]. The values of those JavaScript variables can be manually set within the code, or retrieved from static or dynamic [[JSON]] resources.

According to [[JavaScript]] analytics service [[Libscore]], AngularJS is used on the websites of [[Wolfram Alpha]], [[NBC]], [[Walgreens]], [[Intel]], [[Sprint Nextel|Sprint]], [[ABC News]], and about 12,000 other sites out of 1 million tested in October 2016.<ref>{{Cite web|url=http://libscore.com/?#angular|title=Libscore|website=libscore.com|access-date=2016-10-17}}</ref> AngularJS is currently in the top 100 of the most starred projects on [[GitHub]].<ref>{{cite web|url=https://github.com/search?o=desc&q=stars%3A%3E1&s=stars&type=Repositories|title=GitHub search results sorted by number of stars}}</ref>

AngularJS is the frontend part of the [[MEAN (software bundle)|MEAN stack]], consisting of [[MongoDB]] database, [[Express.js]] web application server framework, Angular.js itself, and [[Node.js]] server runtime environment.

==AngularJS==

AngularJS is built on the belief that [[declarative programming]] should be used to create [[user interface]]s and connect [[software component]]s, while [[imperative programming]] is better suited to defining an application's [[business logic]].<ref>{{cite web |url=https://docs.angularjs.org/guide/introduction |title=What Is Angular? |deadurl=no |accessdate=12 February 2013}}</ref> The framework adapts and extends traditional HTML to present dynamic content through two-way data-binding that allows for the automatic synchronization of models and views. As a result, AngularJS de-emphasizes explicit [[Document Object Model]] (DOM) manipulation with the goal of improving testability and performance.

AngularJS's design goals include:
*to decouple DOM manipulation from application logic. The difficulty of this is dramatically affected by the way the code is structured.
*to decouple the client side of an application from the server side. This allows development work to progress in parallel, and allows for reuse of both sides.
*to provide structure for the journey of building an application: from designing the UI, through writing the business logic, to testing.

AngularJS implements the MVC pattern to separate presentation, data, and logic components.<ref>[https://docs.angularjs.org/guide/component Understanding Components]</ref> Using [[dependency injection]], Angular brings traditionally [[server-side]] services, such as view-dependent controllers, to client-side web applications. Consequently, much of the burden on the server can be reduced.

==Scope==
AngularJS uses the term "scope" in a manner akin to the fundamentals of computer science.

[[Scope (computer science)|Scope]] in computer science describes when in the program a particular [[Name binding|binding]] is valid. The [[ECMA-262]] specification defines scope as: a lexical environment in which a Function object is executed in client-side web scripts;<ref name=es5-x10.2>{{cite web|title=Annotated ECMAScript 5.1, Section 10.2 Lexical Environments|url=https://es5.github.io/#x10.2|accessdate=2015-01-03}}</ref> akin to how scope is defined in [[lambda calculus]].<ref name="BarendregtBarendsen">{{Citation
  | last = Barendregt
  | first = Henk
  | author-link =
  | last2 = Barendsen
  | first2 = Erik
  | author2-link =
  | title = Introduction to Lambda Calculus
  | place =
  | publisher =
  | year = March 2000
  | volume =
  | edition =
  | url = ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf
  | doi =
  | id =
  | isbn = }}</ref>

As a part of the "MVC" architecture, the scope forms the "Model", and all variables defined in the scope can be accessed by the "View" as well as the "Controller". The scope behaves as a glue and binds the "View" and the "Controller".

In AngularJS, "scope" is a certain kind of [[Object (computer science)|object]]<ref name=angular-scope>{{cite web |title= AngularJS: Developer Guide: Scopes |url= https://docs.angularjs.org/guide/scope |accessdate= 2015-01-03}}</ref> that itself can be in scope or out of scope in any given part of the program, following the [[Scope (computer science)#JavaScript|usual rules]] of [[Variable (computer science)#Scope and extent|variable scope]] in JavaScript like any other object.<ref name=ecmascript-scope>{{cite web |title= ECMA-262-3 in detail. Chapter 4. Scope chain. |url= http://dmitrysoshnikov.com/ecmascript/chapter-4-scope-chain/ |accessdate= 2015-01-03}}</ref> When the term "scope" is used below, it refers to the Angular scope object and not the scope of a name binding.

==Bootstrap==
The task performed by the AngularJS [[bootstrapper]] occur in three phases<ref name="Writing Directives">{{cite web |url= https://www.youtube.com/watch?v=WqmeI5fZcho&list=TLJUxRYO87UWA |title= Writing Directives |date= November 28, 2012 |publisher= angularjs.org |accessdate= 2013-07-21 }}</ref> after the DOM has been loaded:
#Creation of a new Injector
#Compilation of the directives that decorate the DOM
#Linking of all directives to scope

AngularJS directives allow the developer to specify custom and reusable HTML-like elements and attributes that define data bindings and the behavior of presentation components. Some of the most commonly used directives are:

;<code>ng-animate</code>: A module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
Since '''<code>ng-*</code>''' attributes are not valid in HTML specifications, '''<code>data-ng-*</code>''' can also be used as a prefix. For example, both '''<code>ng-app</code>''' and '''<code>data-ng-app</code>''' are valid in AngularJS.
;<code>ng-app</code>: Declares the root element of an AngularJS application, under which directives can be used to declare bindings and define behavior.
;<code>ng-aria</code>: A module for accessibility support of common [[WAI-ARIA|ARIA attributes]].
;<code>ng-bind</code>: Sets the text of a DOM element to the value of an expression. For example, <code><nowiki><span ng-bind="name"></span></nowiki></code> displays the value of ‘name’ inside the span element. Any change to the variable ‘name’ in the application's scope reflect instantly in the DOM.
;<code>ng-class</code>: Conditionally apply a class, depending on the value of a boolean expression.
;<code>ng-controller</code>: Specifies a JavaScript controller class that evaluates HTML expressions.
;<code>ng-if</code>: Basic if statement directive that instantiates the following element if the conditions are true. When the condition is false, the element is removed from the DOM. When true, a clone of the compiled element is re-inserted.
;<code>ng-init</code>: Called once when the element is initialized.
;<code>ng-model</code>: Similar to <code>ng-bind</code>, but establishes a two-way data binding between the view and the scope.
;<code>ng-model-options</code>: Provides tuning for how model updates are done.
;<code>ng-repeat</code>: Instantiate an element once per item from a collection.
;<code>ng-show</code> & <code>ng-hide</code>: Conditionally show or hide an element, depending on the value of a boolean expression. Show and hide is achieved by setting the CSS display style.
;<code>ng-switch</code>: Conditionally instantiate one template from a set of choices, depending on the value of a selection expression.
;<code>ng-view</code>: The base directive responsible for handling routes<ref>[https://docs.angularjs.org/guide/component-router Component Router]</ref> that resolve JSON before rendering templates driven by specified controllers.

==Two-way data binding==
AngularJS two-way [[data binding]] is its most notable feature, largely relieving the server backend of templating responsibilities. Instead, templates are rendered in plain HTML according to data contained in a scope defined in the model. The <code>$scope</code> service in Angular detects changes to the model section and modifies HTML expressions in the view via a controller. Likewise, any alterations to the view are reflected in the model. This circumvents the need to actively manipulate the DOM and encourages bootstrapping and rapid prototyping of web applications.<ref>{{cite web |url=http://net.tutsplus.com/tutorials/javascript-ajax/5-awesome-angularjs-features/ |title=5 Awesome AngularJS Features |deadurl=no |accessdate=13 February 2013}}</ref>
AngularJS detects changes in models by comparing the current values with values stored earlier in a process of dirty-checking, unlike [[Ember.js]] and [[Backbone.js]] that trigger listeners when the model values are changed.<ref name="Misko Hevery">{{cite web | title = Databinding in angularjs | author = Misko Hevery | url = https://stackoverflow.com/a/9693933/146423 | accessdate= 2014-03-09 }}</ref>

;<code>$watch</code>
: is angular method, for dirty checking. Any variable or expression assigned in $scope automatically sets up a {{mono|$watchExpression}} in angular. So assigning a variable to {{mono|$scope}} or using directives like {{mono|ng-if, ng-show, ng-repeat}} etc. all create watches in angular scope automatically. Angular maintains a simple array of {{mono|$$watchers}} in the {{mono|$scope}} objects
:Different ways of defining a watcher in AngularJS.
:* explicitly $watch an attribute on {{mono|$scope}}.
:*: <code>$scope.$watch('person.username', validateUnique);</code>
:* place an interpolation in your template (a watcher will be created for you on the current $scope).
:* ask a directive such as {{mono|ng-model}} to define the watcher for you.
:*: <code><input ng-model="person.username" /></code>

; <code>$digest</code>
: is angular method, which is invoked internally by angularjs in frequent intervals. In {{mono|$digest}} method, angular iterates over all {{mono|$watches}} in its scope/child scopes.

;<code>$apply</code>
: is an angular method, internally invokes {{mono|$digest}}. This method is used when you want to tell angular manually start dirty checking (execute all {{mono|$watches}})

;<code>$destroy</code>
: is both a method and event in angularjs. {{mono|$destroy()}} method, removes a scope and all its children from dirty checking. {{mono|$destroy}} event is called by angular whenever a $scope or $controller is destroyed.

==Development history==
AngularJS was originally developed in 2009 by Miško Hevery<ref name=angularishere>{{cite web|title=Hello World, <angular/> is here|url=http://misko.hevery.com/2009/09/28/hello-world-angular-is-here/|accessdate=2014-10-12}}</ref> at Brat Tech LLC<ref name=getangular-archive.org>{{cite web|title=GetAngular|archive-url=https://web.archive.org/web/20100413141437/http://getangular.com/ |archive-date=2010-04-13 |url=http://getangular.com/ |deadurl=yes |publisher=Angular / BRAT Tech. LLC|accessdate=2014-10-12}} {{cbignore}}</ref> as the software behind an online [[JSON]] storage service, that would have been priced by the megabyte, for easy-to-make applications for the enterprise. This venture was located at the web domain "GetAngular.com",<ref name="getangular-archive.org"/> and had a few subscribers, before the two decided to abandon the business idea and release Angular as an open-source library.

The 1.6 release added many of the concepts of [[Angular (Application Platform)|Angular]] to AngularJS, including the concept of a component-based application architecture.<ref name="angularjs-158-dev-guide-components">{{cite web|title=AngularJS: Developer Guide for v1.5.8: Components|url=https://code.angularjs.org/1.5.8/docs/guide/component|publisher=Google|accessdate=2017-09-26}}</ref> This release among others removed the Sandbox, which many developers believed provided additional security, despite numerous vulnerabilities that had been discovered that bypassed the sandbox.<ref name="angularjs-github-changelog">{{cite web|title=angular.js/CHANGELOG.md|url=https://github.com/angular/angular.js/blob/master/CHANGELOG.md|website=GitHub|accessdate=2017-09-26}}</ref> The current (as of June 2018) stable release of AngularJS is 1.7.0<ref>{{Cite web|title=Github Release 1.7.0|url=https://github.com/angular/angular.js/releases/tag/v1.7.0
}}</ref>

In January 2018, a schedule was announced for phasing-out AngularJS: after releasing 1.7.0, the active development on AngularJS will continue till June 30, 2018. Afterwards, 1.7 will be supported till  June 30, 2021 as [[long-term support]].<ref>{{Cite news|url=https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c|title=Stable AngularJS and Long Term Support|last=|first=|date=2018-01-26|work=Angular Blog|access-date=2018-03-16|archive-url=|archive-date=|dead-url=}}</ref>

===Legacy browser support===
Versions 1.2 and later of AngularJS do not support [[Internet Explorer]] versions 6 or 7.<ref name=angularjs-ie-compat>{{cite web|title=AngularJS: Developer Guide: Internet Explorer Compatibility|url=https://docs.angularjs.org/guide/ie|publisher=Google|accessdate=2014-10-12}}</ref> Versions 1.3 and later of AngularJS dropped support for Internet Explorer 8.<ref name=angularjs-13>{{cite web|last1=Minar|first1=Igor|title=AngularJS 1.3: a new release approaches|url=http://angularjs.blogspot.com/2013/12/angularjs-13-new-release-approaches.html|website=AngularJS Blog|accessdate=2014-10-12}}</ref>

===Angular and AngularDart===
Angular 2+ versions are simply called [[Angular (application platform)|Angular]]. Angular is an incompatible rewrite of AngularJS. It is  a [[TypeScript]]-based open-source front-end web application platform. Angular 4 was announced on 13 December 2016, skipping 3 to avoid a confusion due to the misalignment of the router package's version which was already distributed as v3.3.0.<ref>{{Cite web|url=http://angularjs.blogspot.kr/2016/12/ok-let-me-explain-its-going-to-be.html|title=Ok... let me explain: it's going to be Angular 4.0|website=angularjs.blogspot.kr|access-date=2016-12-14}}</ref>

AngularDart works on [[Dart (programming language)|Dart]], which is an [[object-oriented programming|object-oriented]], [[class-based programming|class defined]], [[single inheritance]] programming language using [[C Sharp (programming language)|C#]] style [[Syntax (programming languages)|syntax]], that is different from Angular JS (which uses [[JavaScript]]) and Angular 2/ Angular 4 (which uses [[TypeScript]]). Angular 4 released in March 2017, with the framework's version aligned with the version number of the router it used. Angular 5 was released on November 1, 2017.<ref>https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced</ref> Key improvements in Angular 5 include support for progressive Web apps, a build optimizer and improvements related to Material Design.<ref>{{cite web|url=https://www.infoworld.com/article/3225511/javascript/angular-5-javascript-framework-delayed.html|title=Angular 5 JavaScript framework delayed}}</ref> Angular 6 was released on May 3rd of 2018<ref>{{cite web |last1=Fluin |first1=Stephen |title=Version 6 of Angular Now Available – Angular Blog |url=https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4 |website=Angular Blog |accessdate=8 June 2018 |date=3 May 2018}}</ref>, with Angular 7 showing up in September/October 2018. 
Angular follows Semantic Versioning standards, with each major version number indicating potentially breaking changes. Angular has pledged to provide 6 months of active support for each major version followed by 12 months of long term support. Major releases are bi-yearly with 1 to 3 minor releases for every major release.<ref>{{cite web |title=Angular versioning and releases |url=https://angular.io/guide/releases#release-schedule |website=angular.io |publisher=Google |accessdate=8 June 2018}}</ref>

===Angular Universal===
A normal Angular application executes in the browser, while Angular Universal generates static application pages on the server through server-side rendering (SSR).<ref>{{cite web|url=https://medium.com/@MarkPieszak/angular-universal-server-side-rendering-deep-dive-dc442a6be7b7|title=Dynamic SSR & Static Pre-rendering}}</ref>

==Chrome extension==
In July 2012, the Angular team built an extension for the [[Google Chrome]] browser called Batarang,<ref name=batarang-github>{{cite web|title=angular/angularjs-batarang (GitHub)|url=https://github.com/angular/angularjs-batarang|accessdate=2014-10-12}}</ref> that improves the debugging experience for web applications built with Angular. The extension aims to allow for easy detection of performance bottlenecks and offers a GUI for debugging applications.<ref name=introbatarang>{{cite web|last1=Ford|first1=Brian|title=Introducing the AngularJS Batarang|url=http://angularjs.blogspot.com/2012/07/introducing-angularjs-batarang.html|website=AngularJS Blog|accessdate=2014-10-12}}</ref> For a time during late 2014 and early 2015, the extension was not compatible with recent releases (after v1.2.x) of Angular.<ref>{{Cite web|url = https://stackoverflow.com/questions/23506526/batarang-chrome-extension-for-angularjs-appears-broken|title = batarang Chrome extension for AngularJS appears broken|date = |accessdate = |website = |publisher = |last = |first = }}</ref> The last update made to this extension was on April 4, 2017.

==Performance==
AngularJS sets out the paradigm of a ''digest cycle''. This cycle can be considered a loop, during which Angular checks if there is any change to all the variables watched by all the <code>$scopes</code>. If <code>$scope.myVar</code> is defined in a controller and this variable was marked for watching, Angular will monitor the changes on myVar in each loop iteration.

This approach potentially leads to slow rendering when AngularJS checks on too many variables in the <code>$scope</code> every cycle. Miško Hevery suggests keeping fewer than 2000 watchers on any page.<ref name="Misko Hevery"/>

==See also==
{{Portal|Free software}}
* [[React.js]]
* [[Vue.js]]
* [[Polymer (library)]]
* [[Comparison of JavaScript frameworks]]

==References==
{{Reflist|30em}}
<ref> [https://www.cronj.com/blog/angular-6-features/ "Angular 6 Features"], to reduce the compilation time,
 to reduce the code size, Service workers, CDK, - ''Cronj Blog'', 25 March 2018</ref>

==Further reading==
{{refbegin}}
*{{cite book
| first1      = Brad
| last1       = Green
| first2      = Shyam
| last2       = Seshadri
| date        = March 22, 2013
| title       = AngularJS
| publisher   = [[O'Reilly Media]]
| edition     = 1st
| page        = 150
| isbn        = 978-1449344856
| url         = http://shop.oreilly.com/product/0636920028055.do
}}
*{{cite book
| first1      = Pawel
| last1       = Kozlowski
| first2      = Peter Bacon
| last2       = Darwin
| date        = August 23, 2013
| title       = Mastering Web Application Development with AngularJS
| publisher   = [[Packt Publishing]]
| edition     = 1st
| page        = 372
| isbn        = 978-1782161820
| url         = https://www.packtpub.com/angularjs-web-application-development/book
}}
*{{cite book
| first1      = Lukas
| last1       = Ruebbelke
| date        = January 1, 2015
| title       = AngularJS in Action
| publisher   = [[Manning Publications]]
| edition     = 1st
| page        = 325
| isbn        = 978-1617291333
| url         = 
}}
{{refend}}

==External links==
{{Commons category|AngularJS}}
* [https://www.angularjs.org/ Official website]

{{JS templating |state=autocollapse}}
{{Rich Internet applications}}
{{Application frameworks}}
{{ECMAScript}}
{{NodeJs}}

[[Category:Ajax (programming)]]
[[Category:Google software]]
[[Category:Rich Internet application frameworks]]
[[Category:Software using the MIT license]]