{{Redirect|CXX|the Roman numerals|120 (number)}}
{{pp-move-vandalism|small=yes}}
{{Use dmy dates|date=January 2012}}
{{Infobox programming language
| name = C++
| logo = File:ISO C++ Logo.svg
| logo_size = 140px
| paradigm = [[Multi-paradigm programming language|Multi-paradigm]]: [[procedural programming|procedural]], [[functional programming|functional]], [[object-oriented programming|object-oriented]], [[generic programming|generic]]<ref name="stroustruptcpppl">{{Cite book |last=Stroustrup |first=Bjarne |authorlink=Bjarne Stroustrup |title=The C++ Programming Language |year=1997 |edition=Third |chapter=1 |isbn=0-201-88954-4 |oclc=59193992 }}</ref>
| year = {{Start date and age|df=yes|1985}}
| designer = [[Bjarne Stroustrup]]
| latest release version = ISO/IEC 14882:2017
| latest release date = {{Start date and age|2017|12|01|df=yes}}
| typing = [[Static type|Static]], [[Nominal type system|nominative]], [[Type inference|partially inferred]]
| implementations = {{nowraplinks|[[Clang|LLVM Clang]], [[GNU Compiler Collection|GCC]], [[Microsoft Visual C++]], [[C++Builder|Embarcadero C++Builder]], [[Intel C++ Compiler]], [[IBM XL C++]], [[Edison Design Group|EDG]]}}
| influenced by = [[Ada (programming language)|Ada]], [[ALGOL 68]], [[C (programming language)|C]], [[CLU (programming language)|CLU]], [[ML (programming language)|ML]], [[Simula]]
| influenced = [[Ada (programming language)|Ada 95]]<!-- 1995 -->, [[C Sharp (programming language)|C#]]<!-- 2001 -->,<ref name="influenceSharp">{{cite journal |last=Naugler |first=David |date=May 2007 |title=C# 2.0 for C++ and Java programmer: conference workshop |journal=Journal of Computing Sciences in Colleges |volume=22 |issue=5 |quote=Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.}}</ref> [[C99]]<!-- 1999 -->, [[Chapel (programming language)|Chapel]],<ref name="chplspec">{{cite web|title=Chapel spec (Acknowledgements)|url=https://chapel-lang.org/spec/spec-0.98.pdf|date=1 October 2015|accessdate=14 January 2016|publisher=Cray Inc}}</ref> [[Clojure]],<ref>{{cite web |url=https://web.archive.org/web/20170111184835/http://www.codequarterly.com/2011/rich-hickey/ |title=Rich Hickey Q&A by Michael Fogus |access-date=2017-01-11}}</ref> [[D (programming language)|D]]<!-- 1999 -->, [[Java (programming language)|Java]]<!-- 1995 -->,<ref>{{cite web | url=https://books.google.com/books?id=0rUtBAAAQBAJ&lpg=PA133&pg=PA133#v=onepage&q&f=true|title=Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans |author=Harry. H. Chaudhary |accessdate=29 May 2016 |date=28 July 2014}}</ref> [[Lua (programming language)|Lua]]<!-- 1993 -->, [[Nim (programming language)|Nim]],{{citation needed|date=April 2017}} [[Perl]]<!-- 1987 -->, [[PHP]]<!-- 1995 -->, [[Python (programming language)|Python]],<ref>{{Cite web|url=https://docs.python.org/tutorial/classes.html|title=9. Classes — Python 3.6.4 documentation|website=docs.python.org|access-date=2018-01-09}}</ref> [[Rust (programming language)|Rust]]
| programming_language = C++ or C
| license = 
| file_ext = .C, .cc, .cpp, .cxx, {{nowrap|.c++}}, .h, .hh, .hpp, .hxx, {{nowrap|.h++}}
| website = {{URL|https://isocpp.org/}}
| wikibooks = C++ Programming
| caption = 
}}

'''C++''' ({{IPAc-en|ˌ|s|iː|ˌ|p|l|ʌ|s|ˈ|p|l|ʌ|s}} "see plus plus"<!-- "cee" is the name of letter "c" -->) is a [[general-purpose programming language]]. It has [[imperative programming|imperative]], [[object-oriented programming|object-oriented]] and [[generic programming|generic]] programming features, while also providing facilities for [[Low-level programming language|low-level]] [[Memory (computing)|memory]] manipulation.

It was designed with a bias toward [[system programming]] and [[embedded software|embedded]], resource-constrained and large systems, with [[performance (software)|performance]], efficiency and flexibility of use as its design highlights.<ref name=Stroustrup1>{{cite web|url=https://www.youtube.com/watch?v=86xWVb4XIyE|author=Stroustrup, B.|title=Lecture:The essence of C++. University of Edinburgh. |date=6 May 2014|accessdate=12 June 2015}}</ref> C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,<ref name=Stroustrup1 /> including [[application software|desktop applications]], servers (e.g. [[e-commerce]], [[Web search engine|Web search]] or [[SQL]] servers), and performance-critical applications (e.g. [[telephone switches]] or [[space probes]]).<ref name="applications">{{cite web |url=http://www.stroustrup.com/applications.html |title=C++ Applications |date=17 February 2014 |accessdate=5 May 2014 |first=Bjarne |last=Stroustrup |website=stroustrup.com}}</ref>  C++ is a [[compiled language]], with implementations of it available on many platforms.  Many vendors provide [[List of compilers#C.2B.2B compilers|C++ compilers]], including the [[Free Software Foundation]], [[Microsoft]], [[Intel]], and [[IBM]].

C++ is standardized by the [[International Organization for Standardization]] (ISO), with the latest standard version ratified and published by ISO in December 2017 as ''[[#Standardization|ISO/IEC 14882]]:2017'' (informally known as [[C++17]]).<ref name="isocpp2017"/> The C++ programming language was initially standardized in 1998 as ''ISO/IEC 14882:1998'', which was then amended by the [[C++03]], [[C++11]] and [[C++14]] standards. The current [[C++17]] standard supersedes these with [[C++17|new features]] and an enlarged [[#Standard library|standard library]].  Before the initial standardization in 1998, C++ was developed by [[Bjarne Stroustrup]] at [[Bell Labs]] since 1979, as an extension of the [[C (programming language)|C language]] as he wanted an efficient and flexible language similar to C, which also provided high-level features for program organization.<ref>{{cite web |title=Bjarne Stroustrup's Homepage |url=http://www.stroustrup.com |website=www.stroustrup.com}}</ref> [[C++20]] is the next planned standard thereafter, keeping with the current streak of a new version every three years<ref>{{cite web |title = C++; Where it's heading |url=https://dzone.com/articles/c-where-is-it-heading-and-what-are-the-new-feature}}</ref>.

Many other programming languages have been influenced by C++ including [[C Sharp (programming language)|C#]], [[D (programming language)|D]], [[Java (programming language)|Java]], and newer versions of C.

== History ==
[[File:BjarneStroustrup.jpg|thumb|[[Bjarne Stroustrup]], the creator of C++]]

In 1979, [[Bjarne Stroustrup]], a Danish [[computer scientist]], began work on "{{visible anchor|C with [[Class (computer programming)|Classes]]}}", the predecessor to C++.<ref name="invention3">{{cite web |url = http://www.stroustrup.com/bs_faq.html#invention|title = Bjarne Stroustrup's FAQ: When was C++ invented?|first = Bjarne|last = Stroustrup|website = stroustrup.com|date = 7 March 2010|accessdate = 16 September 2010}}
</ref> The motivation for creating a new language originated from Stroustrup's experience in programming for his Ph.D. thesis. Stroustrup found that [[Simula]] had features that were very helpful for large software development, but the language was too slow for practical use, while [[BCPL]] was fast but too low-level to be suitable for large software development. When Stroustrup started working in [[AT&T Bell Labs]], he had the problem of analyzing the [[Unix|UNIX]] [[Kernel (computer science)|kernel]] with respect to [[distributed computing]]. Remembering his Ph.D. experience, Stroustrup set out to enhance the [[C (programming language)|C]] language with [[Simula]]-like features.<ref name="evolving">{{cite web |url = http://stroustrup.com/hopl-almost-final.pdf|title = Evolving a language in and for the real world: C++ 1991-2006|first = Bjarne|last = Stroustrup}}
</ref> C was chosen because it was general-purpose, fast, portable and widely used. As well as C and Simula's influences, other languages also influenced C++, including [[ALGOL 68]], [[Ada (programming language)|Ada]], [[CLU (programming language)|CLU]] and [[ML (programming language)|ML]].

Initially, Stroustrup's "C with Classes" added features to the C compiler, Cpre, including [[class (computer programming)|classes]], [[derived class]]es, [[strong typing]], [[inlining]] and [[default argument]]s.<ref name="hopl2">{{cite web|last1=Stroustrup|first1=Bjarne|title=A History of C ++ : 1979− 1991|url=http://www.stroustrup.com/hopl2.pdf}}</ref>

In 1983, "C with Classes" was renamed to "C++" (<code>++</code> being the [[increment operator]] in C), adding new features that included [[virtual function]]s, function name and [[operator overloading]], references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL style single-line comments with two forward slashes (<code>//</code>).  Furthermore, it included the development of a standalone compiler for C++, [[Cfront]].

In 1985, the first edition of ''[[The C++ Programming Language]]'' was released, which became the definitive reference for the language, as there was not yet an official standard.<ref name="1st-edition3">{{cite web |url = http://www.stroustrup.com/1st.html|title = The C++ Programming Language|edition = First|first = Bjarne|last = Stroustrup|accessdate = 16 September 2010}}
</ref> The first commercial implementation of C++ was released in October of the same year.<ref name="invention3"/>

In 1989, C++ 2.0 was released, followed by the updated second edition of ''The C++ Programming Language'' in 1991.<ref name="2nd-edition3">{{cite web |url = http://www.stroustrup.com/2nd.html|title = The C++ Programming Language|edition = Second|first = Bjarne|last = Stroustrup|accessdate = 16 September 2010}}</ref> New features in 2.0 included multiple inheritance, abstract classes, static member functions, [[const correctness|const member functions]], and protected members. In 1990, ''The Annotated C++ Reference Manual'' was published. This work became the basis for the future standard. Later feature additions included [[template (programming)|template]]s, [[exception handling|exceptions]], [[namespaces]], new [[cast (computer science)|cast]]s, and a [[Boolean datatype|boolean type]].

After the 2.0 update, C++ evolved relatively slowly until, in 2011, the [[C++11]] standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor [[C++14]] update released in December 2014, various new additions were introduced in [[C++17]], and further changes planned for 2020.<ref name="herbsutter.com">https://herbsutter.com/2016/06/30/trip-report-summer-iso-c-standards-meeting-oulu/ "the next standard after C++17 will be C++20"</ref>

As of 2017, C++ remains the third most popular programming language, behind [[Java (programming language)|Java]] and C.<ref>"Latest news." TIOBE Index | TIOBE - The Software Quality Company. N.p., n.d. Web. 5 June 2017.</ref><ref>Krill, Paul. "Java, C, C face growing competition in popularity." InfoWorld. InfoWorld, 10 February 2017. Web. 5 June 2017.</ref>

On January 3, 2018, Stroustrup was announced as the 2018 winner of the [[Charles Stark Draper Prize]] for Engineering, "for conceptualizing and developing the C++ programming language".<ref> https://www.nae.edu/177355.aspx "Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering"</ref>

=== Etymology ===
According to Stroustrup: "the name signifies the evolutionary nature of the changes from C".<ref name="name">{{cite web |url=http://www.stroustrup.com/bs_faq.html#name |title=Bjarne Stroustrup's FAQ&nbsp;– Where did the name "C++" come from? |accessdate=16 January 2008 }}</ref> This name is credited to Rick Mascitti (mid-1983)<ref name="hopl2" /> and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a [[tongue-in-cheek]] spirit. The name comes from C's <code>++</code> [[operator (programming)|operator]] (which [[increment and decrement operators|increments]] the [[value (computer science)|value]] of a [[variable (programming)|variable]]) and a common [[naming convention]] of using "+" to indicate an enhanced computer program.

During C++'s development period, the language had been referred to as "new C" and "C with Classes"<ref name="hopl2" /><ref>{{cite web|title=C For C++ Programmers|url=https://www.ccs.neu.edu/course/com3620/parent/C-for-Java-C++/c-for-c++-alt.html|publisher=[[Northeastern University]]|accessdate=7 September 2015|archive-url=https://web.archive.org/web/20101117003419/http://www.ccs.neu.edu/course/com3620/parent/C-for-Java-C++/c-for-c++-alt.html|archive-date=17 November 2010|dead-url=yes|df=dmy-all}}</ref> before acquiring its final name.

=== Philosophy ===
Throughout C++'s life, its development and evolution has been guided by a set of principles:<ref name="evolving"/>

* It must be driven by actual problems and its features should be useful immediately in real world programs.
* Every feature should be implementable (with a reasonably obvious way to do so).
* Programmers should be free to pick their own programming style, and that style should be fully supported by C++.
* Allowing a useful feature is more important than preventing every possible misuse of C++.
* It should provide facilities for organising programs into well-defined separate parts, and provide facilities for combining separately developed parts.
* No implicit violations of the [[type system]] (but allow explicit violations; that is, those explicitly requested by the programmer).
* User-created types need to have the same support and performance as built-in types.
* Unused features should not negatively impact created executables (e.g. in lower performance).
* There should be no language beneath C++ (except [[assembly language]]).
* C++ should work alongside other existing [[programming language]]s, rather than fostering its own separate and incompatible [[programming environment]].
* If the programmer's intent is unknown, allow the programmer to specify it by providing manual control.

=== Standardization ===
{| class="wikitable floatright" style="margin-left: 1.5em;"
|-
! Year !! C++ Standard !! Informal name
|-
! 1998
| | ISO/IEC 14882:1998<ref name="isocpp1998">{{cite web |title=ISO/IEC 14882:1998|publisher=International Organization for Standardization|url=https://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?ics1=35&ics2=60&ics3=&csnumber=25845 }}</ref> || [[C++98]]
|-
! 2003
| | ISO/IEC 14882:2003<ref name="isocpp2003">{{cite web |title=ISO/IEC 14882:2003|publisher=International Organization for Standardization|url=https://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?ics1=35&ics2=60&ics3=&csnumber=38110 }}</ref> || [[C++03]]
|-
! 2011
| | ISO/IEC 14882:2011<ref name="isocpp2011">{{cite web |title=ISO/IEC 14882:2011|publisher=International Organization for Standardization|url=https://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?ics1=35&ics2=60&ics3=&csnumber=50372 }}</ref> || [[C++11]], C++0x
|-
! 2014
| | ISO/IEC 14882:2014<ref name="isocpp2014">{{cite web |title=ISO/IEC 14882:2014|publisher=International Organization for Standardization|url=https://www.iso.org/iso/home/store/catalogue_ics/catalogue_detail_ics.htm?csnumber=64029&ICS1=35&ICS2=60 }}</ref> || [[C++14]], C++1y
|-
! 2017
| | ISO/IEC 14882:2017<ref name="isocpp2017">{{cite web |title=ISO/IEC 14882:2017|publisher=International Organization for Standardization|url=https://www.iso.org/standard/68564.html}}</ref> || [[C++17]], C++1z
|-
! 2020
| | to be determined || [[C++20]]<ref name="herbsutter.com"/>
|}

C++ is standardized by an [[International Organization for Standardization|ISO]] working group known as [[ISO/IEC JTC 1/SC 22|JTC1/SC22/WG21]]. So far, it has published five revisions of the C++ standard and is currently working on the next revision, [[C++20]].

In 1998, the ISO working group standardized C++ for the first time as ''ISO/IEC 14882:1998'', which is informally known as ''C++98''. In 2003, it published a new version of the C++ standard called ''ISO/IEC 14882:2003'', which fixed problems identified in [[C++98]].

The next major revision of the standard was informally referred to as "C++0x", but it was not released until 2011.<ref name="0xapprove">{{cite web|url=https://herbsutter.com/2011/08/12/we-have-an-international-standard-c0x-is-unanimously-approved/|title=We have an international standard: C++0x is unanimously approved|website=Sutter's Mill}}</ref>  [[C++11]] (14882:2011) included many additions to both the core language and the standard library.<ref name="isocpp2011"/>

In 2014, [[C++14]] (also known as C++1y) was released as a small extension to [[C++11]], featuring mainly bug fixes and small improvements.<ref name="The Future of C">{{cite web|title=The Future of C++|url=https://channel9.msdn.com/Events/Build/2012/2-005}}</ref>  The Draft International Standard ballot procedures completed in mid-August 2014.<ref>{{cite web|title=We have C++14! : Standard C++|url=https://isocpp.org/blog/2014/08/we-have-cpp14}}</ref>

After C++14, a major revision [[C++17]], informally known as C++1z, was completed by the ISO C++ Committee in mid July 2017 and was approved and published in December 2017.<ref name="Toronto meeting report">[https://herbsutter.com/2017/07/15/trip-report-summer-iso-c-standards-meeting-toronto/ Trip report: Summer ISO C++ standards meeting (Toronto)]</ref>

As part of the standardization process, ISO also publishes [[International Organization for Standardization#International Standards and other publications|technical reports and specifications]]:
* ISO/IEC TR 18015:2006<ref>{{cite web|publisher=International Organization for Standardization|title=ISO/IEC TR 18015:2006|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=43351}}</ref> on the use of C++ in embedded systems and on performance implications of C++ language and library features,
* ISO/IEC TR 19768:2007<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=43289|title=ISO/IEC TR 19768:2007|publisher=International Organization for Standardization}}</ref> (also known as the [[C++ Technical Report 1]]) on library extensions mostly integrated into [[C++11]],
* ISO/IEC TR 29124:2010<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=50511|title=ISO/IEC TR 29124:2010|publisher=International Organization for Standardization}}</ref> on special mathematical functions,
* ISO/IEC TR 24733:2011<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=38843|title=ISO/IEC TR 24733:2011|publisher=International Organization for Standardization}}</ref> on [[decimal floating point]] arithmetic,
* ISO/IEC TS 18822:2015<ref>{{cite web|url=https://www.iso.org/iso/catalogue_detail.htm?csnumber=63483|title=ISO/IEC TS 18822:2015|publisher=International Organization for Standardization}}</ref> on the standard filesystem library,
* ISO/IEC TS 19570:2015<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=65241|title=ISO/IEC TS 19570:2015|publisher=International Organization for Standardization}}</ref> on [[Parallel computing|parallel]] versions of the standard library algorithms,
* ISO/IEC TS 19841:2015<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=66343|title=ISO/IEC TS 19841:2015|publisher=International Organization for Standardization}}</ref> on software [[transactional memory]],
* ISO/IEC TS 19568:2015<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=65238|title=ISO/IEC TS 19568:2015|publisher=International Organization for Standardization}}</ref> on a new set of library extensions, some of which are already integrated into [[C++17]],
* ISO/IEC TS 19217:2015<ref>{{cite web|url=https://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=64031|title=ISO/IEC TS 19217:2015|publisher=International Organization for Standardization}}</ref> on the C++ [[concepts (C++)|concepts]]
More technical specifications are in development and pending approval, including concurrency library extensions, a networking standard library, ranges, and modules.<ref>See a list at https://en.cppreference.com/w/cpp/experimental visited 16 January 2016.</ref>

== Language ==
The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as "a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions";<ref name="Stroustrup1" /> and "offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages".<ref>{{cite web|url=https://www.infoq.com/news/2015/04/stroustrup-cpp17-interview|author=B. Stroustrup (interviewed by Sergio De Simone)|date=30 April 2015|accessdate=8 July 2015|title=Stroustrup: Thoughts on C++17 - An Interview}}</ref>

C++ inherits most of [[C syntax|C's syntax]]. The following is Bjarne Stroustrup's version of the [[Hello world program]] that uses the [[C++ Standard Library]] stream facility to write a message to [[Standard output#Standard output (stdout)|standard output]]:<ref>{{Cite book |first=Bjarne |last=Stroustrup |year=2000 |page=46 |title=The C++ Programming Language |edition=Special |publisher=Addison-Wesley |isbn=0-201-70073-5 }}</ref><ref>{{cite web |url=http://www.stroustrup.com/3rd_issues.html |title=Open issues for The C++ Programming Language (3rd Edition) |first=Bjarne |last=Stroustrup |postscript=. This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of <code>'\n'</code> rather than <code>std::endl</code>. Also see [http://www.stroustrup.com/bs_faq2.html#void-main Can I write "void main()"?] for an explanation of the implicit <code>return 0;</code> in the <code>main</code> function. This implicit return is ''not'' available in other functions.}}</ref>

<!--

***************************************************************
*
* PLEASE NOTE:
*
* BEFORE MAKING CHANGES to the "Hello World" example
* please establish consensus by discussing your proposed changes
* on the Talk page. This is not the place to "Be Bold"; this
* has been discussed before at length.
*
* If you change the sample program without discussion, it will be
* reverted within a few minutes.
*
* Yes, you could say "using namespace std;" or "using std::cout;".
* Yes, you could use "std::endl" rather than "\n".
* Yes, you could add "return 0;" at the end.
* Yes, you could add "int argc, char ** argv" to main.
* Yes, your ancient compiler might require "#include <iostream.h>".
* Yes, you could use "printf" from the Standard C Library.
*
* But don't
*
* The latest consensus is ''not'' to make any of those changes.
* This is the example "Hello, world!" by Bjarne Stroustrup,
* the author of the C++ language, and is used in
* his book, "The C++ Programming Language (3rd edition)".
*
***************************************************************

--><source lang="cpp" line="1">
#include <iostream>

int main()
{
    std::cout << "Hello, world!\n";
}
</source><!--

*** PLEASE NOTE:****
* BEFORE MAKING CHANGES to the "Hello World" example
* please establish consensus by discussing your proposed changes
* on the Talk page. This is not the place to "Be Bold"; this
* has been discussed before.
*
* If you change the sample program without discussion, it will be
* reverted within a few minutes.
*
* Yes, you could say "using namespace std;" or "using std::cout;".
* Yes, you could use "std::endl" rather than "\n".
* Yes, you could add "return 0;" at the end.
* Yes, you could add "int argc, char ** argv" to main.
* Yes, your ancient compiler might require "#include <iostream.h>".
* Yes, you could use "printf" from the Standard C Library.
*
* But don't.
*
* The latest consensus is ''not'' to make any of those changes.
* This is the example "Hello, world!" by Bjarne Stroustrup,
* the author of the C++ language, and is used in
* his book, "The C++ Programming Language (3rd edition)".
*
*************************************************************** -->

=== Object storage ===
As in C, C++ supports four types of [[memory management]]: static storage duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.<ref name="C++11 3.7">[[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]]. ''[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf Programming Languages – C++11 Draft (n3797)] §3.7 Storage duration [basic.stc]''</ref>

==== Static storage duration objects ====
Static storage duration objects are created before <code>main()</code> is entered (see exceptions below) and destroyed in reverse order of creation after <code>main()</code> exits. The exact order of creation is not specified by the standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that "shall last for the duration of the program".<ref name="C++11 3.7.1">[[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]]. ''[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf Programming Languages – C++11 Draft (n3797)] §3.7.1 Static Storage duration [basic.stc.static]''</ref>

Static storage duration objects are initialized in two phases. First, "static initialization" is performed, and only ''after'' all static initialization is performed, "dynamic initialization" is performed.  In static initialization, all objects are first initialized with zeros; after that, all objects that have a constant initialization phase are initialized with the constant expression (i.e. variables initialized with a literal or <code>constexpr</code>). Though it is not specified in the standard, the static initialization phase can be completed at compile time and saved in the data partition of the executable.  Dynamic initialization involves all object initialization done via a constructor or function call (unless the function is marked with <code>constexpr</code>, in C++11). The dynamic initialization order is defined as the order of declaration within the compilation unit (i.e. the same file). No guarantees are provided about the order of initialization between compilation units.

==== Thread storage duration objects ====
Variables of this type are very similar to static storage duration objects. The main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined.<ref name="C++11 3.7.2">[[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]]. ''[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf Programming Languages – C++11 Draft (n3797)] §3.7.2 Thread Storage duration [basic.stc.thread]''</ref>

==== Automatic storage duration objects ====
The most common variable types in C++ are local variables inside a function or block, and temporary variables.<ref name="C++11 3.7.3">[[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]]. ''[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf Programming Languages – C++11 Draft (n3797)] §3.7.3 Automatic Storage duration [basic.stc.auto]''</ref> The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable. They are created and potentially initialized at the point of declaration (see below for details) and destroyed in the ''reverse'' order of creation when the scope is left. This is implemented by allocation on the [[Stack-based memory allocation|stack]].

Local variables are created as the point of execution passes the declaration point. If the variable has a constructor or initializer this is used to define the initial state of the object. Local variables are destroyed when the local block or function that they are declared in is closed. C++ destructors for local variables are called at the end of the object lifetime, allowing a discipline for automatic resource management termed [[Resource Acquisition Is Initialization|RAII]], which is widely used in C++.

Member variables are created when the parent object is created. Array members are initialized from 0 to the last member of the array in order. Member variables are destroyed when the parent object is destroyed in the reverse order of creation. i.e. If the parent is an "automatic object" then it will be destroyed when it goes out of scope which triggers the destruction of all its members.

Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated (usually at the <code>;</code> at the end of a statement).

==== Dynamic storage duration objects ====
{{Main article|new and delete (C++)}}

These objects have a dynamic lifespan and are created with a call to {{cpp|new}} and destroyed explicitly with a call to {{cpp|delete}}.<ref name="C++11 3.7.4">[[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]]. ''[https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf Programming Languages – C++11 Draft (n3797)] §3.7.4 Dynamic Storage duration <nowiki>[</nowiki>basic.stc.dynamic<nowiki>]</nowiki>''</ref>

=== Templates ===
{{See also|Template metaprogramming|Generic programming}}

[[C++ templates]] enable [[generic programming]]. C++ supports function, class, alias and variable templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by ''instantiation'' at compile-time. To instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase "[[Substitution failure is not an error]]" (SFINAE). Templates are a powerful tool that can be used for [[generic programming]], [[template metaprogramming]], and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand.<ref name=":0" /> This is in contrast to run-time generics seen in other languages (e.g., [[Generics in Java|Java]]) where at compile-time the type is erased and a single template body is preserved.

Templates are different from [[Macro (computer science)|macro]]s: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols. Templates are a tool for static [[Polymorphism in object-oriented programming|polymorphism]] (see below) and [[generic programming]].

In addition, templates are a compile time mechanism in C++ that is [[Turing-complete]], meaning that any computation expressible by a computer program can be computed, in some form, by a [[template metaprogramming|template metaprogram]] prior to runtime.

In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction.

=== Objects ===
{{Main article|C++ classes}}

C++ introduces [[object-oriented programming]] (OOP) features to C. It offers [[class (computer science)|class]]es, which provide the four features commonly present in OOP (and some non-OOP) languages: [[Abstraction (computer science)|abstraction]], [[Information hiding|encapsulation]], [[Inheritance (object-oriented programming)|inheritance]], and [[Polymorphism (computer science)|polymorphism]]. One distinguishing feature of C++ classes compared to classes in other programming languages is support for deterministic [[destructor (computer science)|destructors]], which in turn provide support for the [[Resource Acquisition is Initialization]] (RAII) concept.

==== Encapsulation ====
[[Information hiding|Encapsulation]] is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C++ provides the ability to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class ("friends"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends.

The object-oriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type. C++ supports this principle via member functions and friend functions, but it does not enforce it. Programmers can declare parts or all of the representation of a type to be public, and they are allowed to make public entities not part of the representation of a type. Therefore, C++ supports not just object-oriented programming, but other decomposition paradigms such as [[Modularity (programming)|modular programming]].

It is generally considered good practice to make all [[data]] private or protected, and to make public only those functions that are part of a minimal interface for users of the class. This can hide the details of data implementation, allowing the designer to later fundamentally change the implementation without changing the interface in any way.<ref name="cppcs">{{Cite book |first1=Herb |last1=Sutter |first2=Andrei |last2=Alexandrescu |authorlink1=Herb Sutter |authorlink2=Andrei Alexandrescu |year=2004 |title=C++ Coding Standards: 101 Rules, Guidelines, and Best Practices |publisher = Addison-Wesley }}</ref><ref name="industrialcpp">{{Cite book |last1=Henricson |first1=Mats |last2=Nyquist |first2=Erik |title=Industrial Strength C++ |publisher=Prentice Hall |year=1997 |isbn=0-13-120965-5 }}</ref>

==== Inheritance ====
[[Inheritance (computer science)|Inheritance]] allows one data type to acquire properties of other data types. Inheritance from a [[base class]] may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class. Only public inheritance corresponds to what is usually meant by "inheritance". The other two forms are much less frequently used. If the access specifier is omitted, a "class" inherits privately, while a "struct" inherits publicly. Base classes may be declared as virtual; this is called [[virtual inheritance]]. Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance.

[[Multiple inheritance]] is a C++ feature not found in most other languages, allowing a class to be derived from more than one base class; this allows for more elaborate inheritance relationships. For example, a "Flying Cat" class can inherit from both "Cat" and "Flying Mammal". Some other languages, such as [[C Sharp (programming language)|C#]] or [[Java (programming language)|Java]], accomplish something similar (although more limited) by allowing inheritance of multiple [[Interface (computer science)|interfaces]] while restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual functions, often known as an [[abstract base class]] or "ABC". The member functions of such an abstract base class are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called [[Dominance (C++)|dominance]].

=== Operators and operator overloading ===
{| class="wikitable" style="float: right; margin: 0.5em 0 1em 2em;"
|+ Operators that cannot be overloaded
! style="text-align: center" | Operator
! style="width: 9em" | Symbol
|-
! style="text-align: center" | Scope resolution operator
| {{C-lang| ::}}
|-
! style="text-align: center" | Conditional operator
| {{C-lang| ?:}}
|-
! style="text-align: center" | dot operator
| {{C-lang| .}}
|-

|-
! style="text-align: center" | Member selection operator
| {{C-lang| .*}}
|-
! style="text-align: center" | "sizeof" operator
| {{C-lang| sizeof}}
|-
! style="text-align: center" | "typeid" operator
| {{C-lang| typeid}}
|}
{{Main article|Operators in C and C++}}
C++ provides more than 35 operators, covering basic arithmetic, bit manipulation, indirection, comparisons, logical operations and others. Almost all operators can be [[Operator overloading|overloaded]] for user-defined types, with a few notable exceptions such as member access (<code>.</code> and <code>.*</code>) as well as the conditional operator. The rich set of overloadable operators is central to making user-defined types in C++ seem like built-in types.

Overloadable operators are also an essential part of many advanced C++ programming techniques, such as [[smart pointer]]s. Overloading an operator does not change the precedence of calculations involving the operator, nor does it change the number of operands that the operator uses (any operand may however be ignored by the operator, though it will be evaluated prior to execution). Overloaded "<code>&&</code>" and "<code>||</code>" operators lose their [[short-circuit evaluation]] property.

=== Polymorphism ===
{{See also|Polymorphism (computer science)}}

[[Type polymorphism|Polymorphism]] enables one common interface for many implementations, and for objects to act differently under different circumstances.

C++ supports several kinds of ''static'' (resolved at [[compile-time]]) and ''dynamic'' (resolved at [[Run time (program lifecycle phase)|run-time]]) [[polymorphism (computer science)|polymorphism]]s, supported by the language features described above. [[Compile-time polymorphism]] does not allow for certain run-time decisions, while [[runtime polymorphism]] typically incurs a performance penalty.

==== Static polymorphism ====
{{See also|Parametric polymorphism|ad hoc polymorphism}}

[[Function overloading]] allows programs to declare multiple functions having the same name but with different arguments (i.e. [[ad hoc polymorphism|''ad hoc'' polymorphism]]). The functions are distinguished by the number or types of their [[Parameter (computer science)|formal parameter]]s. Thus, the same function name can refer to different functions depending on the context in which it is used. The type returned by the function is not used to distinguish overloaded functions and would result in a compile-time error message.

When declaring a function, a programmer can specify for one or more parameters a [[default arguments|default value]]. Doing so allows the parameters with defaults to optionally be omitted when the function is called, in which case the default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters at the end of the parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters.

[[Generic programming#Templates|Templates]] in C++ provide a sophisticated mechanism for writing generic, polymorphic code (i.e. [[parametric polymorphism]]). In particular, through the [[curiously recurring template pattern]], it's possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions. Because C++ templates are type-aware and [[Turing-complete]], they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through [[template metaprogramming]]. Contrary to some opinion, template code will not generate a bulk code after compilation with the proper compiler settings.<ref name=":0">{{cite web |accessdate=8 March 2010 |publisher=EmptyCrate Software. Travel. Stuff. |location=articles.emptycrate.com/ |title=Nobody Understands C++: Part 5: Template Code Bloat |date=6 May 2008 |url=https://articles.emptycrate.com/2008/05/06/nobody_understands_c_part_5_template_code_bloat.html |quote=On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, "self, if the code does exactly the same thing then the compiled code cannot really be any bigger, can it?" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes! }}</ref>

==== Dynamic polymorphism ====

===== Inheritance =====
{{See also|Subtyping}}

Variable pointers and references to a base class type in C++ can also refer to objects of any derived classes of that type. This allows arrays and other kinds of containers to hold pointers to objects of differing types (references cannot be directly held in containers). This enables dynamic (run-time) polymorphism, where the referred objects can behave differently depending on their (actual, derived) types.

C++ also provides the <code>dynamic_cast</code> operator, which allows code to safely attempt conversion of an object, via a base reference/pointer, to a more derived type: ''downcasting''. The ''attempt'' is necessary as often one does not know which derived type is referenced. (''Upcasting'', conversion to a more general type, can always be checked/performed at compile-time via <code>static_cast</code>, as ancestral classes are specified in the derived class's interface, visible to all callers.) <code>dynamic_cast</code> relies on [[run-time type information]] (RTTI), metadata in the program that enables differentiating types and their relationships. If a <code>dynamic_cast</code> to a pointer fails, the result is the <code>nullptr</code> constant, whereas if the destination is a reference (which cannot be null), the cast throws an exception. Objects ''known'' to be of a certain derived type can be cast to that with <code>static_cast</code>, bypassing RTTI and the safe runtime type-checking of <code>dynamic_cast</code>, so this should be used only if the programmer is very confident the cast is, and will always be, valid.

===== Virtual member functions =====
Ordinarily, when a function in a derived class [[Method overriding (programming)|overrides]] a function in a base class, the function to call is determined by the type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called [[dynamic dispatch]]. [[virtual functions|Virtual member functions]] or ''methods''<ref>{{Cite book |quote=A virtual member function is sometimes called a ''method''. |first=Bjarne |last=Stroustrup |year=2000 |page=310 |title=The C++ Programming Language |edition=Special |publisher=Addison-Wesley |isbn = 0-201-70073-5 }}</ref> allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using [[virtual function table]]s. If the object type is known, this may be bypassed by prepending a [[fully qualified name|fully qualified class name]] before the function call, but in general calls to virtual functions are resolved at run time.

In addition to standard member functions, operator overloads and destructors can be virtual. As a rule of thumb, if any function in the class is virtual, the destructor should be as well. As the type of an object at its creation is known at compile time, constructors, and by extension copy constructors, cannot be virtual. Nonetheless a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object. In such a case, a common solution is to create a <code>clone()</code> (or similar) virtual function that creates and returns a copy of the derived class when called.

A member function can also be made "pure virtual" by appending it with <code>= 0</code> after the closing parenthesis and before the semicolon. A class containing a pure virtual function is called an ''abstract class''. Objects cannot be created from an abstract class; they can only be derived from. Any derived class inherits the virtual function as pure and must provide a non-pure definition of it (and all other pure virtual functions) before objects of the derived class can be created. A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is ill-formed.

=== Lambda expressions ===
C++ provides support for [[anonymous function]]s, also known as lambda expressions, with the following form:

<source lang="cpp">
[capture](parameters) -> return_type { function_body }
</source>

The <code>[capture]</code> list supports the definition of [[Closure (computer programming)|closures]]. Such lambda expressions are defined in the standard as [[syntactic sugar]] for an unnamed [[function object]]. An example lambda function may be defined as follows:

<source lang="cpp">
[](int x, int y) -> int { return x + y; }
</source>

=== Exception handling ===
Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled.<ref>{{Cite web|url = http://www.cl.cam.ac.uk/teaching/1314/CandC++/lecture7.pdf|title = <nowiki>C and C++ Exceptions | Templates</nowiki>|date = 2013|accessdate = 30 August 2016|website = Cambridge Computer Laboratory - Course Materials 2013-14|publisher = |last = Mycroft|first = Alan}}</ref> It permits this to be done in a uniform manner and separately from the main code, while detecting all errors.<ref name="exception_summary">{{Cite book|title = The C++ Programming Language|last = Stroustrup|first = Bjarne|publisher = Addison Wesley|year = 2013|isbn = 9780321563842|location = |pages = 345}}</ref> Should an error occur, an exception is thrown (raised), which is then caught by the nearest suitable exception handler. The exception causes the current scope to be exited, and also each outer scope (propagation) until a suitable handler is found, calling in turn the destructors of any objects in these exited scopes.<ref>{{Cite book|title = The C++ Programming Language|last = Stroustrup|first = Bjarne|publisher = Addison Wesley|year = 2013|isbn = 9780321563842|location = |pages = 363–365}}</ref> At the same time, an exception is presented as an object carrying the data about the detected problem.<ref>{{Cite book|title = The C++ Programming Language|last = Stroustrup|first = Bjarne|publisher = Addison Wesley|year = 2013|isbn = 9780321563842|location = |pages = 345, 363}}</ref>

Note that many C++ "styles" like Google's,<ref>https://google.github.io/styleguide/cppguide.html#Exceptions</ref> forbid usage of exceptions in C++ programs, restricting the language thusly.

The exception-causing code is placed inside a <code>try</code> block. The exceptions are handled in separate <code>catch</code> blocks (the handlers); each <code>try</code> block can have multiple exception handlers, as it is visible in the example below.<ref>{{Cite book|title = The C++ Programming Language|last = Stroustrup|first = Bjarne|publisher = Addison Wesley|year = 2013|isbn = 9780321563842|location = |pages = 344, 370}}</ref>
<!--"#include <iostream.h> is deprecated"-->
<source lang="cpp" line="1">
#include <iostream>
#include <vector>
#include <stdexcept>

int main() {
    try {
        std::vector<int> vec{3, 4, 3, 1};
        int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)
    }
    // An exception handler, catches std::out_of_range, which is thrown by vec.at(4)
    catch (std::out_of_range &e) {
        std::cerr << "Accessing a non-existent element: " << e.what() << '\n';
    }
    // To catch any other standard library exceptions (they derive from std::exception)
    catch (std::exception &e) {
        std::cerr << "Exception thrown: " << e.what() << '\n';
    }
    // Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)
    catch (...) {
        std::cerr << "Some fatal error\n";
    }
}
</source>

It is also possible to raise exceptions purposefully, using the <code>throw</code> keyword; these exceptions are handled in the usual way. In some cases, exceptions cannot be used due to technical reasons. One such example is a critical component of an embedded system, where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the maximum time required for an exception to be handled.<ref>{{Cite book|title = The C++ Programming Language|last = Stroustrup|first = Bjarne|publisher = Addison Wesley|year = 2013|isbn = 9780321563842|location = |pages = 349}}</ref>

== Standard library ==
{{Main article|C++ Standard Library}}
The C++ [[standardization|standard]] consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types ([[sequence container (C++)#Vector|vectors]], lists, maps, sets, queues, stacks, arrays, tuples), [[algorithm]]s (find, for_each, binary_search, random_shuffle, etc.), input/output facilities ([[iostream]], for reading from and writing to the console and files), filesystem library, localisation support, [[smart pointers]] for automatic memory management, [[regular expression]] support, [[multithreading (software)|multi-threading]] library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that doesn't use C++ [[exception handling|exceptions]] into C++ exceptions, a [[random number generator]] and a slightly modified version of the [[C standard library]] (to make it comply with the C++ type system).

A large part of the C++ library is based on the [[Standard Template Library]] (STL). Useful tools provided by the STL include [[container (data structure)|container]]s as the collections of objects (such as [[array data structure|vector]]s and [[linked list|lists]]), [[iterator]]s that provide array-like access to containers, and [[algorithm]]s that perform operations such as searching and sorting.

Furthermore, (multi)maps ([[associative array]]s) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the [[feature (software design)|feature]]s of the [[library (computing)|library]] are accessed by using the <code>#include</code> [[directive (programming)|directive]] to include a [[standard header]]. The [[C++ Standard Library]] provides 105 standard headers, of which 27 are deprecated.

The standard incorporates the STL that was originally designed by [[Alexander Stepanov]], who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as "STL", as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.).<ref>{{cite web|url=http://www.stlport.org/resources/StepanovUSA.html |author=Graziano Lo Russo |title=An Interview with A. Stepanov |year=2008 |accessdate=8 October 2015 |website=stlport.org}}</ref>

Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library.

== Compatibility ==
To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of [[name mangling]], [[exception handling]], and other implementation-specific features. The downside of this decision is that [[object code]] produced by different [[compiler]]s is expected to be incompatible. There were, however, attempts to standardize compilers for particular machines or [[operating system]]s (for example C++ ABI),<ref>{{cite web |url=https://mentorembedded.github.io/cxx-abi/ |title=C++ ABI Summary |date=20 March 2001 |accessdate=30 May 2006 }}</ref> though they seem to be largely abandoned now.

=== With C ===
{{Details|Compatibility of C and C++}}

C++ is often considered to be a superset of [[C (programming language)|C]] but this is not strictly true.<ref name="superset">{{cite web |url=http://www.stroustrup.com/bs_faq.html#C-is-subset |title=Bjarne Stroustrup's FAQ&nbsp;– Is C a subset of C++? |accessdate=5 May 2014}}</ref> Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from <code>void*</code> to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as <code>new</code> and <code>class</code>, which may be used as identifiers (for example, variable names) in a C program.

Some incompatibilities have been removed by the 1999 revision of the C standard ([[C99]]), which now supports C++ features such as line comments (<code>//</code>) and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support were incompatible or redundant in C++, such as [[variable-length array]]s, native complex-number types (however, the <code>std::complex</code> class in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, [[C syntax#Compound literals|compound literals]], and the <code>restrict</code> keyword.<ref>{{cite web |url=http://home.datacomm.ch/t_wolf/tw/c/c9x_changes.html |title=C9X – The New C Standard |accessdate=27 December 2008 }}</ref> Some of the C99-introduced features were included in the subsequent version of the C++ standard, [[C++11#Improved C compatibility|C++11]] (out of those which were not redundant).<ref>{{cite web |title=C++0x Support in GCC |url=https://gcc.gnu.org/projects/cxx0x.html |accessdate=12 October 2010}}</ref><ref>{{cite web |title=C++0x Core Language Features In VC10: The Table |url=https://blogs.msdn.com/b/vcblog/archive/2010/04/06/c-0x-core-language-features-in-vc10-the-table.aspx |accessdate=12 October 2010 }}</ref><ref>{{cite web|url=https://clang.llvm.org/cxx_status.html |title=Clang - C++98, C++11, and C++14 Status |publisher=Clang.llvm.org |date=12 May 2013 |accessdate=10 June 2013}}</ref> However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character pointer, which remains valid C.

To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an <code style=white-space:nowrap>extern "C" {/*...*/}</code> block. Such a function may not rely on features depending on [[name mangling]] (i.e., function overloading).

== Criticism ==
{{Main article|Criticism of C++}}

Despite its widespread adoption, some notable programmers have criticized the C++ language, including [[Linus Torvalds]],<ref name=torvalds>{{cite mailing list |url=https://lwn.net/Articles/249460/ |title=Re: [RFC] Convert builin-mailinfo.c to use The Better String Library |date=6 September 2007 |accessdate=31 March 2015 }}</ref> [[Richard Stallman]],<ref>{{cite mailing list |url=http://harmful.cat-v.org/software/c++/rms |title=Re: Efforts to attract more users? |date=12 July 2010 |accessdate=31 March 2015 }}</ref> [[Joshua Bloch]], [[Ken Thompson]],<ref>{{cite web |url=https://www.drdobbs.com/open-source/interview-with-ken-thompson/229502480 |title=Dr. Dobb's: Interview with Ken Thompson |author=Andrew Binstock |date=18 May 2011 |accessdate=7 February 2014}}</ref><ref name="Seibel2009">{{cite book|author=Peter Seibel|title=Coders at Work: Reflections on the Craft of Programming|url=https://books.google.com/books?id=nneBa6-mWfgC&pg=PA475|date=16 September 2009|publisher=Apress|isbn=978-1-4302-1948-4|pages=475–476}}</ref><ref name="gigamonkeysWordpress">https://gigamonkeys.wordpress.com/2009/10/16/coders-c-plus-plus/</ref> and [[Donald Knuth]].<ref name="dobbsKnuth">https://www.drdobbs.com/architecture-and-design/an-interview-with-donald-knuth/228700500</ref><ref name="knuth1993">http://tex.loria.fr/litte/knuth-interview</ref>

One of the most often criticised points of C++ is its perceived complexity as a language, with the criticism that a large number of non-orthogonal features in practice necessitates restricting code to subset of C++, thus eschewing the readability benefits of common style and idioms. As expressed by [[Joshua Bloch]]: <blockquote> I think C++ was pushed well beyond its complexity threshold and yet there are a lot of people programming it. But what you do is you force people to subset it. So almost every shop that I know of that uses C++ says, “Yes, we’re using C++ but we’re not doing multiple-implementation inheritance and we’re not using operator overloading.” There are just a bunch of features that you’re not going to use because the complexity of the resulting code is too high. And I don’t think it’s good when you have to start doing that. You lose this programmer portability where everyone can read everyone else’s code, which I think is such a good thing. </blockquote> 

[[Donald Knuth]] (1993, commenting on pre-standardized C++), who said of [[Edsger Dijkstra]] that "to think of programming in C++" "would make him physically ill":<ref name="dobbsKnuth" /><ref name="knuth1993" /> <blockquote> The problem that I have with them today is that... C++ is too complicated. At the moment, it's impossible for me to write portable code that I believe would work on lots of different systems, unless I avoid all exotic features. Whenever the C++ language designers had two competing ideas as to how they should solve some problem, they said "OK, we'll do them both". So the language is too baroque for my taste. </blockquote>

[[Ken Thompson]], who was a colleague of Stroustrup at Bell Labs, gives his assessment:<ref name="Seibel2009" /><ref name="gigamonkeysWordpress" /> <blockquote> It certainly has its good points. But by and large I think it’s a bad language. It does a lot of things half well and it’s just a garbage heap of ideas that are mutually exclusive. Everybody I know, whether it’s personal or corporate, selects a subset and these subsets are different. So it’s not a good language to transport an algorithm—to say, “I wrote it; here, take it.” It’s way too big, way too complex. And it’s obviously [[Design by committee|built by a committee]]. 
Stroustrup campaigned for years and years and years, way beyond any sort of technical contributions he made to the language, to get it adopted and used. And he sort of ran all the standards committees with a whip and a chair. And he said “no” to no one. He put every feature in that language that ever existed. It wasn’t cleanly designed—it was just the union of everything that came along. And I think it suffered drastically from that. </blockquote>

However [[Brian Kernighan]], also a colleague at Bell Labs, disputes this assessment:<ref>{{cite video|people=Brian Kernighan|date=July 18, 2018|title=Brian Kernighan Q&A - Computerphile|url=https://www.youtube.com/watch?v=zmYhR8cUX90&t=5m17s}}</ref> <blockquote>C++ has been enormously influential. ... Lots of people say C++ is too big and too complicated etc. etc. but in fact it is a very powerful language and pretty much everything that is in there is there for a really sound reason: it is not somebody doing random invention, it is actually people trying to solve real world problems. Now a lot of the programs that we take for granted today, that we just use, are C++ programs. </blockquote> 

Stroustrup himself comments that: "within C++, there is a much smaller and cleaner language struggling to get out".<ref>http://www.stroustrup.com/bs_faq.html#really-say-that</ref>

Other complaints may include a lack of [[reflection (computer programming)|reflection]] or [[garbage collection (computer science)|garbage collection]], slow compilation times, perceived [[feature creep]],<ref>{{cite web |url=https://commandcenter.blogspot.mx/2012/06/less-is-exponentially-more.html |title=Less is exponentially more |year=2012 |last=Pike |first=Rob}}</ref> and verbose error messages, particularly from template metaprogramming.<ref>{{cite web|url=https://yosefk.com/c++fqa/defective.html|title=Defective C++|first=Yossi|last=Kreinin|date=13 October 2009|accessdate=3 February 2016}}</ref>

== See also ==
{{Portal|Computer programming}}
* [[Comparison of programming languages]]
* [[List of C++ compilers]]
* [[Outline of C++]]
* [[:Category:C++ libraries|C++ Libraries (category)]]

== References ==
{{Reflist|30em}}

== Further reading ==
{{Refbegin|30em}}
* {{Cite book |first=David |last=Abrahams |authorlink=David Abrahams (computer programmer) |first2=Aleksey |last2=Gurtovoy  |title=C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond |publisher=Addison-Wesley |isbn=0-321-22725-5 }}
* {{Cite book |first=Andrei |last=Alexandrescu |authorlink=Andrei Alexandrescu |year=2001 |title=Modern C++ Design: Generic Programming and Design Patterns Applied |publisher=Addison-Wesley |isbn=0-201-70431-5 }}
* {{Cite book |first=Andrei |last=Alexandrescu |authorlink=Andrei Alexandrescu |first2=Herb |last2=Sutter |authorlink2=Herb Sutter|year=2004 |title=C++ Design and Coding Standards: Rules and Guidelines for Writing Programs |publisher=Addison-Wesley |isbn=0-321-11358-6 }}
* {{Cite book |first=Pete |last=Becker |authorlink=Pete Becker |year=2006 |title=The C++ Standard Library Extensions : A Tutorial and Reference |publisher=Addison-Wesley |isbn=0-321-41299-0 }}
* {{Cite book |first=Frank |last=Brokken |year=2010 |title=C++ Annotations |publisher=University of Groningen |isbn=90-367-0470-7 |url=http://www.icce.rug.nl/documents/cplusplus/ }}
* {{Cite book |first=James O. |last=Coplien |authorlink=James O. Coplien |origyear=reprinted with corrections, original year of publication 1992|date=1994 |title=Advanced C++: Programming Styles and Idioms |isbn=0-201-54855-0 }}
* {{Cite book |first=Stephen C. |last=Dewhurst |year=2005 |title=C++ Common Knowledge: Essential Intermediate Programming |publisher=Addison-Wesley |isbn=0-321-32192-8 }}
* {{Cite book |author=Information Technology Industry Council |authorlink=Information and Communications Technology Council |publisher=ISO/IEC |location=Geneva |title=Programming languages&nbsp;– C++ |id=14882:2003(E) |edition=Second |date=15 October 2003 }}
* {{Cite book |first=Nicolai M. |last=Josuttis |title=The C++ Standard Library, A Tutorial and Reference |edition=Second|year=2012 |publisher=Addison-Wesley |isbn=0-321-62321-5}}
* {{Cite book |first=Andrew |last=Koenig |authorlink=Andrew Koenig (programmer) |first2=Barbara E. |last2=Moo |year=2000 |title=Accelerated C++ – Practical Programming by Example |publisher=Addison-Wesley |isbn=0-201-70353-X }}
* {{Cite book |first=Stanley B. |last=Lippman |authorlink=Stanley B. Lippman |first2=Josée |last2=Lajoie |first3=Barbara E. |last3=Moo |year=2011|edition=Fifth |title=C++ Primer |publisher=Addison-Wesley |isbn= 0-321-71411-3}}
* {{Cite book |first=Stanley B. |last=Lippman |year=1996 |title=Inside the C++ Object Model |publisher=Addison-Wesley |isbn=0-201-83454-5 }}
* {{Cite book |first=Scott |last=Meyers |authorlink=Scott Meyers |year=2005 |title=Effective C++ |edition=Third |publisher=Addison-Wesley |isbn=0-321-33487-6 }}
* {{Cite book |first=Bjarne |last=Stroustrup|authorlink=Bjarne Stroustrup |year=2013 |title=The C++ Programming Language |edition=Fourth |publisher=Addison-Wesley |isbn=978-0-321-56384-2 }}
* {{Cite book |first=Bjarne |last=Stroustrup|authorlink=Bjarne Stroustrup |year=1994 |title=The Design and Evolution of C++ |publisher=Addison-Wesley |isbn=0-201-54330-3 }}
* {{Cite book |first=Bjarne |last=Stroustrup|authorlink=Bjarne Stroustrup|year=2014 |title=Programming Principles and Practice Using C++ |edition=Second |publisher=Addison-Wesley |isbn=978-0-321-99278-9 }}
* {{Cite book |first=Herb |last=Sutter|authorlink=Herb Sutter |year=2001 |title=More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions |publisher=Addison-Wesley |isbn=0-201-70434-X }}
* {{Cite book |first=Herb |last=Sutter|authorlink=Herb Sutter |year=2004 |title=Exceptional C++ Style |publisher=Addison-Wesley |isbn=0-201-76042-8 }}
* {{Cite book |first=David |last=Vandevoorde |first2=Nicolai M. |last2=Josuttis |year=2003 |title=C++ Templates: The complete Guide |publisher=Addison-Wesley |isbn=0-201-73484-2 }}
{{refend}}

== External links ==
{{Sister project links|n=no|s=no|b=Subject:C++ programming language}}
* [http://www.open-std.org/jtc1/sc22/wg21/ JTC1/SC22/WG21]{{snd}} the ISO/IEC C++ Standard Working Group
* [https://isocpp.org/ Standard C++ Foundation]{{snd}} a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization.

{{ISO standards}}
{{Programming languages}}
{{C++ programming language}}
{{List of International Electrotechnical Commission standards}}
{{Authority control}}

{{DEFAULTSORT:C}}
[[Category:Algol programming language family]]
[[Category:C++| ]]
[[Category:C++ programming language family]]
[[Category:Class-based programming languages]]
[[Category:Cross-platform software]]
[[Category:High-level programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Programming languages created in 1983]]
[[Category:Programming languages with an ISO standard]]
[[Category:Statically typed programming languages]]