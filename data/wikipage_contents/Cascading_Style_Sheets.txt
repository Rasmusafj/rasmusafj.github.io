{{short description|style sheet language}}
{{redirect|CSS}}
{{redirect|Pseudo-element|pseudoelement symbols in chemistry|Skeletal formula#Pseudoelement symbols}}
{{selfref|For the use of CSS on Wikipedia, see [[Help:Cascading Style Sheets]].}}
{{Infobox file format
| name = Cascading Style Sheets (CSS)
| extension = .css
| logo = 
| icon = [[File:CSS-shade.svg]]
| screenshot = 
| mime = text/css
| uniform type = public.css
| developer = {{hlist |[[Håkon Wium Lie]] |[[Bert Bos]] |[[World Wide Web Consortium]]}}
| owner = [[World Wide Web Consortium]]
| genre = [[Style sheet language]]
| released = {{release date and age|1996|12|17}}
| standards =
 {{unbulleted list |class=nowrap
  | [http://www.w3.org/TR/1999/REC-CSS1-19990111 Level 1 {{small|(Recommendation)}}]
  | [http://www.w3.org/TR/2008/REC-CSS2-20080411/ Level 2 {{small|(ditto)}}]
  | [http://www.w3.org/TR/2011/REC-CSS2-20110607/ Level 2 Revision 1 {{small|(ditto)}}]
 }}
}}

{{CSS}}
{{HTML}}

'''Cascading Style Sheets''' ('''CSS''') is a [[style sheet language]] used for describing the [[presentation semantics|presentation]] of a document written in a [[markup language]] like [[HTML]].<ref>{{Cite web|title = CSS developer guide|url = https://developer.mozilla.org/en-US/docs/Web/Guide/CSS|website = Mozilla Developer Network|accessdate = 2015-09-24}}</ref> CSS is a cornerstone technology of the [[World Wide Web]], alongside HTML and [[JavaScript]].<ref>{{cite book|last1=Flanagan|first1=David|title=JavaScript - The definitive guide|page=1|edition=6|quote=JavaScript is part of the triad of technologies that all Web developers must learn: HTML to specify the content of web pages, CSS to specify the presentation of web pages, and JavaScript to specify the behaviour of web pages.}}</ref>

CSS is designed to enable the separation of presentation and content, including [[page layout|layout]], [[color]]s, and [[typeface|fonts]].<ref>{{cite web|title=What is CSS?|publisher=World Wide Web Consortium|url=http://www.w3.org/standards/webdesign/htmlcss#whatcss|access-date=2010-12-01}}</ref> This separation can improve content [[accessibility]], provide more flexibility and control in the specification of presentation characteristics, enable multiple [[web page]]s to share formatting by specifying the relevant CSS in a separate .css file, and reduce complexity and repetition in the structural content.

Separation of formatting and content also makes it feasible to present the same markup page in different styles for different rendering methods, such as on-screen, in print, by voice (via speech-based browser or [[screen reader]]), and on [[Braille display|Braille-based]] tactile devices. CSS also has rules for alternate formatting if the content is accessed on a [[mobile device]].<ref>{{cite web|title=Web-based Mobile Apps of the Future Using HTML 5, CSS and JavaScript|publisher=HTMLGoodies|url=http://www.htmlgoodies.com/beyond/article.php/3893911/Web-based-Mobile-Apps-of-the-Future-Using-HTML-5-CSS-and-JavaScript.htm}}</ref>

The name ''cascading'' comes from the specified priority scheme to determine which style rule applies if more than one rule matches a particular element. This cascading priority scheme is predictable.

The CSS specifications are maintained by the [[World Wide Web Consortium]] (W3C). Internet media type ([[MIME media type|MIME type]]) <code>text/css</code> is registered for use with CSS by RFC 2318 (March 1998). The W3C operates a free [[W3C Markup Validation Service#CSS validation|CSS validation service]] for CSS documents.<ref>{{cite web | title = W3C CSS validation service | url = http://jigsaw.w3.org/css-validator/}}</ref>

In addition to HTML, other markup languages support the use of CSS including [[XHTML]], [[Plain Old XML|plain XML]], [[Scalable Vector Graphics|SVG]], and [[XUL]].

==Syntax==
CSS has a simple [[syntax]] and uses a number of English keywords to specify the names of various style properties.

A style sheet consists of a list of ''rules''. Each rule or rule-set consists of one or more ''selectors'', and a ''declaration block''.

===Selector===
In CSS, ''selectors'' declare which part of the markup a style applies to by matching tags and attributes in the markup itself.

Selectors may apply to:

*all [[HTML element|elements]] of a specific type, e.g. the second-level headers [[HTML element#Basic text|h2]]
*elements specified by [[HTML attribute|attribute]], in particular:
**''id'': an identifier unique within the document
**''class'': an identifier that can annotate multiple elements in a document
*elements depending on how they are placed relative to others in the [[Document Object Model|document tree]].

Classes and IDs are case-sensitive, start with letters, and can include alphanumeric characters, hyphens and underscores. A class may apply to any number of instances of any elements. An ID may only be applied to a single element.

''Pseudo-classes'' are used in CSS selectors to permit formatting based on information that is not contained in the document tree. One example of a widely used pseudo-class is {{code|lang=css|:hover}}, which identifies content only when the user “points to” the visible element, usually by holding the mouse cursor over it. It is appended to a selector as in {{code|lang=css|code=a:hover}} or {{code|lang=css|code=#elementid:hover}}. A pseudo-class classifies document elements, such as {{code|lang=css|code=:link}} or {{code|lang=css|code=:visited}}, whereas a ''pseudo-element'' makes a selection that may consist of partial elements, such as {{code|lang=css|code=::first-line}} or {{code|lang=css|code=::first-letter}}.<ref>{{cite web|url=http://www.w3.org/TR/CSS21/selector.html#pseudo-elements |title=W3C CSS2.1 specification for pseudo-elements and pseudo-classes |publisher=World Wide Web Consortium|date=7 June 2011 |accessdate=30 April 2012}}</ref>

Selectors may be combined in many ways to achieve great specificity and flexibility.<ref>see [http://www.w3.org/TR/CSS21/selector.html the complete definition of selectors at the W3C Web site].</ref> Multiple selectors may be joined in a spaced list to specify elements by location, element type, id, class, or any combination thereof. The order of the selectors is important. For example, <source inline lang=css class=nowrap>
div .myClass {color: red;}</source> applies to all elements of class myClass that are inside div elements, whereas <source inline lang=css class=nowrap>.myClass div {color: red;}</source> applies to all div elements that are in elements of class myClass.

The following table provides a summary of selector syntax indicating usage and the version of CSS that introduced it.<ref>{{cite web|url=http://www.w3.org/TR/selectors/ |title=Selectors Level 3 |publisher=W3.org |accessdate=2014-05-30}}</ref>
{| class="wikitable"
|-
! Pattern !! Matches !! First defined<br/>in CSS level
|-
| {{code|2=css|1=E}} || an element of type E || 1
|-
| {{code|2=css|1=E:link}} || an E element is the source anchor of a hyperlink of which the target is not yet visited (:link) or already visited (:visited)  || 1
|-
| {{code|2=css|1=E:active}} || an E element during certain user actions || 1
|-
| {{code|2=css|1=E::first-line}} || the first formatted line of an E element || 1
|-
| {{code|2=css|1=E::first-letter}} || the first formatted letter of an E element || 1
|-
| {{code|2=css|1=.c}} || all elements with class="c" || 1
|-
| {{code|2=css|1=#myid}} || the element with id="myid" || 1
|-
| {{code|2=css|1=E.warning}} || an E element whose class is "warning" (the document language specifies how class is determined) || 1
|-
| {{code|2=css|1=E#myid}} || an E element with ID equal to "myid" || 1
|-
| {{code|2=css|1=E F}} || an F element descendant of an E element || 1
|-
| {{code|2=css|1=*}} || any element || 2
|-
| {{code|2=css|1=E[foo]}} || an E element with a "foo" attribute || 2
|-
| {{code|2=css|1=E[foo="bar"]}} || an E element whose "foo" attribute value is exactly equal to "bar" || 2
|-
| {{code|2=css|1=E[foo~="bar"]}} || an E element whose "foo" attribute value is a list of whitespace-separated values, one of which is exactly equal to "bar" || 2
|-
| {{code|2=css|1=E<nowiki>[foo|="en"]</nowiki>}} || an E element whose "foo" attribute has a hyphen-separated list of values beginning (from the left) with "en" || 2
|-
| {{code|2=css|1=E:first-child}} || an E element, first child of its parent || 2
|-
| {{code|2=css|1=E:lang(fr)}} || an element of type E in language "fr" (the document language specifies how language is determined) || 2
|-
| {{code|2=css|1=E::before}} || generated content before an E element's content || 2
|-
| {{code|2=css|1=E::after}} || generated content after an E element's content || 2
|-
| {{code|2=css|1=E > F}} || an F element child of an E element || 2
|-
| {{code|2=css|1=E + F}} || an F element immediately preceded by an E element || 2
|-
| {{code|2=css|1=E[foo^="bar"]}} || an E element whose "foo" attribute value begins exactly with the string "bar" || 3
|-
| {{code|2=css|1=E[foo$="bar"]}} || an E element whose "foo" attribute value ends exactly with the string "bar" || 3
|-
| {{code|2=css|1=E[foo*="bar"]}} || an E element whose "foo" attribute value contains the substring "bar" || 3
|-
| {{code|2=css|1=E:root}} || an E element, root of the document || 3
|-
| {{code|2=css|1=E:nth-child(n)}} || an E element, the n-th child of its parent || 3
|-
| {{code|2=css|1=E:nth-last-child(n)}} || an E element, the n-th child of its parent, counting from the last one || 3
|-
| {{code|2=css|1=E:nth-of-type(n)}} || an E element, the n-th sibling of its type || 3
|-
| {{code|2=css|1=E:nth-last-of-type(n)}} || an E element, the n-th sibling of its type, counting from the last one || 3
|-
| {{code|2=css|1=E:last-child}} || an E element, last child of its parent || 3
|-
| {{code|2=css|1=E:first-of-type}} || an E element, first sibling of its type || 3
|-
| {{code|2=css|1=E:last-of-type}} || an E element, last sibling of its type || 3
|-
| {{code|2=css|1=E:only-child}} || an E element, only child of its parent || 3
|-
| {{code|2=css|1=E:only-of-type}} || an E element, only sibling of its type || 3
|-
| {{code|2=css|1=E:empty}} || an E element that has no children (including text nodes) || 3
|-
| {{code|2=css|1=E:target}} || an E element being the target of the referring URI || 3
|-
| {{code|2=css|1=E:enabled}} || a user interface element E that is enabled || 3
|-
| {{code|2=css|1=E:disabled}} || a user interface element E that is disabled || 3
|-
| {{code|2=css|1=E:checked}} || a user interface element E that is checked (for instance a radio-button or checkbox) || 3
|-
| {{code|2=css|1=E:not(s)}} || an E element that does not match simple selector s || 3
|-
| {{code|2=css|1=E ~ F}} || an F element preceded by an E element || 3
|}

===Declaration block===
A declaration block consists of a list of ''declarations'' in braces. Each declaration itself consists of a ''property'', a colon (<code>:</code>), and a ''value''. If there are multiple declarations in a block, a semi-colon (<code>;</code>) must be inserted to separate each declaration.<ref>{{cite web|url=http://www.w3.org/TR/CSS21/syndata.html#q10 |title=W3C CSS2.1 specification for rule sets, declaration blocks, and selectors |publisher=World Wide Web Consortium|date=7 June 2011 |accessdate=2009-06-20}}</ref>

Properties are specified in the CSS standard. Each property has a set of possible values. Some properties can affect any type of element, and others apply only to particular groups of elements.<ref>{{cite web|url=http://www.w3.org/TR/CSS2/propidx.html |title=Full property table |publisher=W3.org |accessdate=2014-05-30}}</ref>

Values may be keywords, such as "center" or "inherit", or numerical values, such as {{mono|200px}} (200 pixels), {{mono|50vw}} (50 percent of the viewport width) or {{mono|80%}} (80 percent of the window width). Color values can be specified with keywords (e.g. "{{mono|{{red|red}}}}"), hexadecimal values (e.g. {{mono|{{color|#FF0000|#FF0000}}}}, also abbreviated as {{mono|{{color|#F00|#F00}}}}), RGB values on a 0 to 255 scale (e.g. <code>{{color|#FF0000|rgb(255, 0, 0)}}</code>), RGBA values that specify both color and alpha transparency (e.g. {{code|code=rgba(255, 0, 0, 0.8)}}), or HSL or HSLA values (e.g. {{code|code=hsl(000, 100%, 50%)}}, {{code|code=hsla(000, 100%, 50%, 80%)}}).<ref>{{cite web |url=https://developer.mozilla.org/en-US/docs/Web/CSS/color |title=CSS Color |publisher=Mozilla Developer Network |date=2016-06-28 |accessdate=2016-08-23}}</ref>

===Use===
Before CSS, nearly all presentational attributes of HTML documents were contained within the HTML markup. All font colors, background styles, element alignments, borders and sizes had to be explicitly described, often repeatedly, within the HTML. CSS lets authors move much of that information to another file, the style sheet, resulting in considerably simpler HTML.

For example, headings (<code>h1</code> elements), sub-headings (<code>h2</code>), sub-sub-headings (<code>h3</code>), etc., are defined structurally using HTML. In print and on the screen, choice of [[Typeface|font]], [[Point (typography)|size]], [[color]] and [[Emphasis (typography)|emphasis]] for these elements is ''presentational''.

Before CSS, document authors who wanted to assign such [[Typography|typographic]] characteristics to, say, all <code>h2</code> headings had to repeat HTML presentational markup for each occurrence of that heading type. This made documents more complex, larger, and more error-prone and difficult to maintain. CSS allows the separation of presentation from structure. CSS can define color, font, text alignment, size, borders, spacing, layout and many other typographic characteristics, and can do so independently for on-screen and printed views. CSS also defines non-visual styles, such as reading speed and emphasis for aural text readers. The [[W3C]] has now [[deprecation|deprecated]] the use of all presentational HTML markup.<ref>{{cite web|author=W3C HTML Working Group|title=HTML 5. A vocabulary and associated APIs for HTML and XHTML|url=http://www.w3.org/TR/html/introduction.html#presentational-markup|publisher=[[World Wide Web Consortium]]|accessdate=28 June 2014}}</ref>

For example, under pre-CSS HTML, a heading element defined with red text would be written as:
<source lang="html5">
<h1><font color="red"> Chapter 1. </font></h1>
</source>

Using CSS, the same element can be coded using style properties instead of HTML presentational attributes:
<source lang="html4strict">
<h1 style="color: red;"> Chapter 1. </h1>
</source>

The advantages of this may not be immediately clear (since the second form is actually more verbose), but the power of CSS becomes more apparent when the style properties are placed in an internal style element or, even better, an external CSS file. For example, suppose the document contains the style element:

<source lang="html5">
<style>
h1 {color: red;}
</style>
</source>

All <code>h1</code> elements in the document will then automatically become red without requiring any explicit code. If the author later wanted to make <code>h1</code> elements blue instead, this could be done by changing the style element to:

<source lang="html5">
<style>
h1 {color: blue;}
</style>
</source>

rather than by laboriously going through the document and changing the color for each individual <code>h1</code> element.

The styles can also be placed in an external CSS file, as described below, and loaded using syntax similar to:

<source lang="html5">
<link href="path/to/file.css" rel="stylesheet" type="text/css">
</source>

This further decouples the styling from the HTML document, and makes it possible to restyle multiple documents by simply editing a shared external CSS file.

===Sources===
CSS information can be provided from various sources. These sources can be the web browser, the user and the author. The information from the author can be further classified into inline, media type, importance, selector specificity, rule order, inheritance and property definition. CSS style information can be in a separate document or it can be embedded into an HTML document. Multiple style sheets can be imported. Different styles can be applied depending on the output device being used; for example, the screen version can be quite different from the printed version, so that authors can tailor the presentation appropriately for each medium.

The style sheet with the highest priority controls the content display. Declarations not set in the highest priority source are passed on to a source of lower priority, such as the user agent style. This process is called ''cascading''.

One of the goals of CSS is to allow users greater control over presentation. Someone who finds red italic headings difficult to read may apply a different style sheet. Depending on the browser and the web site, a user may choose from various style sheets provided by the designers, or may remove all added styles and view the site using the browser's default styling, or may override just the red italic heading style without altering other attributes.

{| class="wikitable"
|+ CSS priority scheme (highest to lowest)
|-
! Priority !! CSS source type !! Description
|-
| 1 || Importance || The ‘{{code|lang=css|code=!important}}’ annotation overwrites the previous priority types
|-
| 2 || Inline || A style applied to an HTML element via HTML ‘style’ attribute
|-
| 3 || Media Type || A property definition applies to all media types, unless a media specific CSS is defined
|-
| 4 || User defined || Most browsers have the accessibility feature: a user defined CSS
|-
| 5 || Selector specificity || A specific contextual selector ({{code|lang=css|code=#heading p}}) overwrites generic definition
|-
| 6 || Rule order || Last rule declaration has a higher priority
|-
| 7 || Parent inheritance || If a property is not specified, it is inherited from a parent element
|-
| 8 || CSS property definition in HTML document || CSS rule or CSS inline style overwrites a default browser value
|-
| 9 || Browser default || The lowest priority: browser default value is determined by W3C initial value specifications
|}

===Specificity===
''Specificity'' refers to the relative weights of various rules.<ref name="Cascading">{{Cite book | edition = 3rd | publisher = O'Reilly Media, Inc. | isbn = 0-596-52733-0 | last = Meyer | first = Eric A. | title = Cascading Style Sheets: The Definitive Guide | url = http://shop.oreilly.com/product/9781565926226.do | year = 2006}}</ref> It determines which styles apply to an element when more than one rule could apply.  Based on specification, a simple selector (e.g. H1) has a specificity of 1, class selectors have a specificity of 1,0, and ID selectors a specificity of 1,0,0. Because the specificity values do not carry over as in the decimal system, commas are used to separate the "digits"<ref>{{cite web|url=http://www.w3.org/TR/CSS21/cascade.html#specificity|title=Assigning property values, Cascading, and Inheritance|publisher=}}</ref> (a CSS rule having 11 elements and 11 classes would have a specificity of 11,11, not 121).

Thus the following rules selectors result in the indicated specificity:
{| class="wikitable"
|-
! Selectors !! Specificity
|-
| <source lang="css" inline>H1 {color: white;}</source> || 0, 0, 0, 1
|-
| <source lang="css" inline>P EM {color: green;}</source> || 0, 0, 0, 2
|-
| <source lang="css" inline>.grape {color: red;}</source> || 0, 0, 1, 0
|-
| <source lang="css" inline>P.bright {color: blue;}</source> || 0, 0, 1, 1
|-
| <source lang="css" inline>P.bright EM.dark {color: yellow;}</source> || 0, 0, 2, 2
|-
| <source lang="css" inline>#id218 {color: brown;}</source> || 0, 1, 0, 0
|-
| <source lang="css" inline>style=" "</source> || 1, 0, 0, 0
|}

====Example====

Consider this HTML fragment:
<source lang="HTML5">
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <style>
    #xyz { color: blue; }
    </style>
  </head>
  <body>
    <p id="xyz" style="color: green;"> To demonstrate specificity </p>
  </body>
</html>
</source>
In the above example, the declaration in the <code>style</code> attribute overrides the one in the <code><style></code> element because it has a higher specificity, and thus, the paragraph appears green.

===Inheritance===
Inheritance is a key feature in CSS; it relies on the ancestor-descendant relationship to operate. Inheritance is the mechanism by which properties are applied not only to a specified element, but also to its descendants.<ref name="Cascading"/> Inheritance relies on the document tree, which is the hierarchy of [[XHTML]] elements in a page based on nesting. Descendant elements may inherit CSS property values from any ancestor element enclosing them.
In general, descendant elements inherit text-related properties, but they are box-related properties are not inherited. Properties that can be inherited are color, font, letter-spacing, line-height, list-style, text-align, text-indent, text-transform, visibility, white-space and word-spacing. Properties that cannot be inherited are background, border, display, float and clear, height, and width, margin, min- and max-height and -width, outline, overflow, padding, position, text-decoration, vertical-align and z-index.

Inheritance can be used to avoid declaring certain properties over and over again in a style sheet, allowing for shorter CSS.

Inheritance in CSS is not the same as [[Class-based programming#Inheritance|inheritance in class-based programming languages]], where it is possible to define class B as "like class A, but with modifications".<ref>{{Cite web|title = Can a CSS class inherit one or more other classes?|url = https://stackoverflow.com/questions/1065435/can-a-css-class-inherit-one-or-more-other-classes|website = StackOverflow|accessdate = 2017-09-10}}</ref> With CSS, it is possible to style an ''element'' with "class A, but with modifications". However, it is not possible to define a CSS ''class'' B like that, which could then be used to style multiple elements without having to repeat the modifications.

====Example====
Given the following style sheet:
<source lang="css">
h1 {
   color: pink;
}
</source>
Suppose there is an h1 element with an emphasizing element (em) inside:
<source lang="html5">
<h1>
   This is to <em>illustrate</em> inheritance
</h1>
</source>
If no color is assigned to the em element, the emphasized word "illustrate" inherits the color of the parent element, h1. The style sheet h1 has the color pink, hence, the em element is likewise pink.

===Whitespace===

Whitespace between properties and selectors is ignored. This code snippet:
<source lang="CSS">
body{overflow:hidden;background:#000000;background-image:url(images/bg.gif);background-repeat:no-repeat;background-position:left top;}
</source>
is functionally equivalent to this one:
<source lang="CSS">
body {
   overflow: hidden;
   background: #000000;
   background-image: url(images/bg.gif);
   background-repeat: no-repeat;
   background-position: left top;
}
</source>
One common way to format CSS for readability is to indent each property and give it its own line. In addition to formatting CSS for readability, you can use shorthand properties to write out the code faster which also gets processed more quickly when being rendered,<ref name="Mozilla Developers">{{cite news |url=https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties |title=Shorthand properties |work=Tutorial |publisher=Mozilla Developers |date=2017-12-07 }}</ref> like so:

<source lang="CSS">
body {
   overflow: hidden;
   background: #000 url(images/bg.gif) no-repeat left top;
}
</source>

===Positioning===
CSS&nbsp;2.1 defines three positioning schemes:
;Normal flow: ''Inline'' items are laid out in the same way as the letters in words in text, one after the other across the available space until there is no more room, then starting a new line below. ''Block'' items stack vertically, like paragraphs and like the items in a bulleted list. Normal flow also includes relative positioning of block or inline items, and run-in boxes.
;Floats: A floated item is taken out of the normal flow and shifted to the left or right as far as possible in the space available. Other content then flows alongside the floated item.
;Absolute positioning: An absolutely positioned item has no place in, and no effect on, the normal flow of other items. It occupies its assigned position in its container independently of other items.<ref name="W3C-positioning">{{cite web|last=Bos|first=Bert|title=9.3 Positioning schemes|url=http://www.w3.org/TR/CSS2/visuren.html#positioning-scheme|work=Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification|publisher=W3C|accessdate=16 February 2011|date=7 December 2010|display-authors=etal}}</ref>

====Position property====
There are four possible values of the <code>position</code> property. If an item is positioned in any way other than <code>static</code>, then the further properties <code>top</code>, <code>bottom</code>, <code>left</code>, and <code>right</code> are used to specify offsets and positions.
;Static: The default value places the item in the ''normal flow''
;Relative: The item is placed in the ''normal flow'', and then shifted or offset from that position. Subsequent flow items are laid out as if the item had not been moved.
;Absolute: Specifies ''absolute positioning''. The element is positioned in relation to its nearest non-static ancestor.
;Fixed: The item is ''absolutely positioned'' in a fixed position on the screen even as the rest of the document is scrolled<ref name="W3C-positioning"/>

====Float and clear====
The <code>float</code> property may have one of three values. ''Absolutely'' positioned or ''fixed'' items cannot be floated. Other elements normally flow around floated items, unless they are prevented from doing so by their <code>clear</code> property.

;left: The item ''floats'' to the left of the line that it would have appeared in; other items may flow around its right side.
;right: The item ''floats'' to the right of the line that it would have appeared in; other items may flow around its left side.
;clear: Forces the element to appear underneath ('clear') floated elements to the left ({{code|lang=css|code=clear:left}}), right ({{code|lang=css|code=clear:right}}) or both sides ({{code|lang=css|code=clear:both}}).<ref name="W3C-positioning"/><ref>{{cite book|last=Holzschlag|first=Molly E|authorlink=Molly Holzschlag|title=Spring into HTML and CSS|year=2005|publisher=Pearson Education, Inc|isbn=0-13-185586-7}}</ref>

==History==
[[File:Håkon Wium Lie.jpg|thumb|right|upright|[[Håkon Wium Lie]], chief technical officer of the Opera Software company and co-creator of the CSS web standards]]

CSS was first proposed by [[Håkon Wium Lie]] on October 10, 1994.<ref name="chss-proposal">{{cite journal|last=Lie|first=Hakon W|title=Cascading HTML style sheets - a proposal|date=10 Oct 1994|issue=0.92|url=http://www.w3.org/People/howcome/p/cascade.html|accessdate=25 May 2014|publisher=CERN|format=Proposal}}</ref> At the time, Lie was working with [[Tim Berners-Lee]] at [[CERN]].<ref name="chapter20">{{cite book|title=Cascading Style Sheets, designing for the Web|year=1999|publisher=Addison Wesley|isbn=0-201-59625-3|url=http://www.w3.org/Style/LieBos2e/history/|accessdate=23 June 2010|authorlink1=Håkon Wium Lie|first1=Håkon Wium|last1=Lie|authorlink2=Bert Bos|first2=Bert|last2=Bos}}</ref> Several other style sheet languages for the web were proposed around the same time, and discussions on public mailing lists and inside [[World Wide Web Consortium]] resulted in the first W3C CSS Recommendation (CSS1)<ref name="w3c-css1">{{cite web|title=Cascading Style Sheets, level 1|url=http://www.w3.org/TR/1999/REC-CSS1-19990111|publisher=World Wide Web Consortium}}</ref> being released in 1996. In particular, a proposal by [[Bert Bos]] was influential; he became co-author of CSS1, and is regarded as co-creator of CSS.<ref name="WWW3">{{cite web|title=Simple style sheets for SGML & HTML on the web |url=http://www.w3.org/People/Bos/style.html|publisher=World Wide Web Consortium|accessdate=20 June 2010|authorlink=Bert Bos|first=Bert|last=Bos|date=14 April 1995}}</ref>

Style sheets have existed in one form or another since the beginnings of Standard Generalized Markup Language ([[SGML]]) in the 1980s, and CSS was developed to provide style sheets for the web.<ref name="css-phd">{{cite web|title=Cascading Style Sheets|url=http://people.opera.com/howcome/2006/phd/|publisher=University of Oslo|accessdate=3 September 2014|authorlink=Håkon Wium Lie|archive-url=https://web.archive.org/web/20060906211843/http://people.opera.com/howcome/2006/phd/#|archive-date=2006-09-06|dead-url=yes|df=}}</ref> One requirement for a web style sheet language was for style sheets to come from different sources on the web. Therefore, existing style sheet languages like [[Document Style Semantics and Specification Language|DSSSL]] and [[Formatting Output Specification Instance|FOSI]] were not suitable. CSS, on the other hand, let a document's style be influenced by multiple style sheets by way of "cascading" styles.<ref name="css-phd"/>

As HTML grew, it came to encompass a wider variety of stylistic capabilities to meet the demands of [[web development|web developers]]. This evolution gave the designer more control over site appearance, at the cost of more complex HTML. Variations in [[web browser]] implementations, such as [[ViolaWWW]] and [[WorldWideWeb]],<ref name="IEEE">{{cite web|last1=Petrie|first1=Charles|title=Interview Robert Cailliau on the WWW Proposal: "How It Really Happened."|url=http://www.computer.org/portal/web/computingnow/ic-cailliau|publisher=[[Institute of Electrical and Electronics Engineers]]|accessdate=18 August 2010|authorlink2=Robert Cailliau|first2=Robert|last2=Cailliau|date=November 1997}}</ref> made consistent site appearance difficult, and users had less control over how web content was displayed. The browser/editor developed by Tim Berners-Lee had style sheets that were hard-coded into the program. The style sheets could therefore not be linked to documents on the web.<ref name=cssdftw>{{cite book|last=Bos|first=Håkon Wium Lie, Bert|title=Cascading style sheets: designing for the Web|date=1999|publisher=Addison-Wesley|location=Harlow, Essex, England|isbn=0-201-59625-3|edition=2nd}}</ref> [[Robert Cailliau]], also of CERN, wanted to separate the structure from the presentation so that different style sheets could describe different presentation for printing, screen-based presentations, and editors.<ref name="IEEE" />

Improving web presentation capabilities was a topic of interest to many in the web community and nine different style sheet languages were proposed on the www-style mailing list.<ref name="css-phd"/> Of these nine proposals, two were especially influential on what became CSS: Cascading HTML Style Sheets<ref name="chss-proposal" /> and Stream-based Style Sheet Proposal (SSP).<ref name="WWW3"/><ref name=ssp>{{cite web|title=Stream-based Style sheet Proposal|url=http://www.w3.org/People/Bos/stylesheets.html|accessdate=3 September 2014|authorlink=Bert Bos|first=Bert|last=Bos|date=31 March 1995}}</ref> Two browsers served as testbeds for the initial proposals; Lie worked with [[Yves Lafon]] to implement CSS in [[Dave Raggett]]'s [[Arena (web browser)|Arena]] browser.<ref>{{cite web|title=Libwww Hackers|url=http://www.w3.org/Library/Collaborators.html|publisher=World Wide Web Consortium|accessdate=6 June 2010|authorlink=Henrik Frystyk Nielsen|first=Henrik Frystyk|last=Nielsen|date=7 June 2002}}</ref><ref>{{cite web|url=http://www.w3.org/People/Lafon/|title=Yves Lafon|accessdate=17 June 2010|publisher=World Wide Web Consortium}}</ref><ref>{{cite web|url=http://www.w3.org/People/domain?domain=Technology+and+Society|title=The W3C Team: Technology and Society|publisher=World Wide Web Consortium|accessdate=22 January 2011|date=18 July 2008}}</ref> Bert Bos implemented his own SSP proposal in the [[Argo (web browser)|Argo]] browser.<ref name="WWW3"/> Thereafter, Lie and Bos worked together to develop the CSS standard (the 'H' was removed from the name because these style sheets could also be applied to other markup languages besides HTML).<ref name="chapter20"/>

Lie's proposal was presented at the "[[Mosaic and the Web]]" conference (later called WWW2) in Chicago, Illinois in 1994, and again with Bert Bos in 1995.<ref name="chapter20" /> Around this time the W3C was already being established, and took an interest in the development of CSS. It organized a workshop toward that end chaired by [[Steven Pemberton]]. This resulted in W3C adding work on CSS to the deliverables of the HTML editorial review board (ERB). Lie and Bos were the primary technical staff on this aspect of the project, with additional members, including [[Thomas Reardon]] of Microsoft, participating as well. In August 1996, [[Netscape|Netscape Communication Corporation]] presented an alternative style sheet language called [[JavaScript Style Sheets]] (JSSS).<ref name="chapter20" /> The spec was never finished, and is deprecated.<ref>{{cite web|title=JavaScript-Based Style Sheets|url=http://www.w3.org/Submission/1996/1/WD-jsss-960822|publisher=W3C|accessdate=23 June 2010|author=[[Lou Montulli]] |author2=[[Brendan Eich]] |author3=[[Scott Furman]] |author4=[[Donna Converse]] |author5=[[Troy Chevalier]]|date=22 August 1996}}</ref> By the end of 1996, CSS was ready to become official, and the CSS level 1 Recommendation was published in December.

Development of HTML, CSS, and the [[Document Object Model|DOM]] had all been taking place in one group, the HTML Editorial Review Board (ERB). Early in 1997, the ERB was split into three working groups: [[HTML Working group]], chaired by [[Dan Connolly (computer scientist)|Dan Connolly]] of W3C; DOM Working group, chaired by Lauren Wood of [[SoftQuad]]; and [[CSS Working group]], chaired by [[Chris Lilley (W3C)|Chris Lilley]] of W3C.

The CSS Working Group began tackling issues that had not been addressed with CSS level 1, resulting in the creation of CSS level 2 on November 4, 1997. It was published as a W3C Recommendation on May 12, 1998. CSS level 3, which was started in 1998, is still under development as of 2014.

In 2005, the CSS Working Groups decided to enforce the requirements for standards more strictly. This meant that already published standards like CSS&nbsp;2.1, CSS&nbsp;3 Selectors, and CSS&nbsp;3 Text were pulled back from Candidate Recommendation to Working Draft level.

===Difficulty with adoption===
The CSS&nbsp;1 specification was completed in 1996. Microsoft's [[Internet Explorer 3]]<ref name="chapter20" /> was released in that year, featuring some limited support for CSS.  [[Internet Explorer 4|IE 4]] and [[Netscape Navigator|Netscape 4.x]] added more support, but it was typically incomplete and had many [[Software bug|bugs]] that prevented CSS from being usefully adopted. It was more than three years before any web browser achieved near-full implementation of the specification. [[Internet Explorer for Mac|Internet Explorer 5.0]] for the [[Apple Macintosh|Macintosh]], shipped in March 2000, was the first browser to have full (better than 99 percent) CSS&nbsp;1 support,<ref>{{cite web|title=CSS software|publisher=W3.org|url=http://www.w3.org/Style/CSS/software.en.html#w26|accessdate=2011-01-15}}</ref> surpassing [[Opera (web browser)|Opera]], which had been the leader since its introduction of CSS support 15 months earlier. Other browsers followed soon afterwards, and many of them additionally implemented parts of CSS&nbsp;2.

However, even when later ‘version 5’ web browsers began to offer a fairly full implementation of CSS, they were still incorrect in certain areas and were fraught with inconsistencies, bugs and other [[Quirks mode|quirks]]. [[Internet Explorer 5|Microsoft Internet Explorer 5.x for Windows]], as opposed to the very different [[Internet Explorer for Mac|IE for Macintosh]], had a seriously incorrect implementation of the ‘[[CSS box model]]’, as compared with the CSS standards. This is a set of rules that specify certain aspects of the sizing and layout of components of a web page. Such inconsistencies and variation in feature support made it difficult for designers to achieve a consistent appearance across browsers and [[Computing platform|platform]]s without the use of [[workaround]]s termed [[CSS hack|CSS hacks and filters]]. The IE/Windows box model bugs were so serious that, when [[Internet Explorer 6]] was released, Microsoft introduced a backwards-compatible mode of CSS interpretation (‘[[quirks mode]]’) plus an alternative, corrected 'standards mode'. Other non-Microsoft browsers also provided this very same ‘mode’-switch behavior capability. Unfortunately, ever since the release of IE 6 in 2001,  it has become necessary for the authors of webpages’ [[html]] files to make sure that the html contains a special distinctive [[Document type declaration#HTML5 DTD-less DOCTYPE|‘standards-compliant CSS intended’ marker]] to show that the authors intend CSS to be interpreted correctly, in compliance with standards, as opposed to being intended for the now long-obsolete [[Internet Explorer 5|IE5/Windows browser]]. Without this marker, web browsers that have the ‘quirks mode’-switching capability will size objects in web pages as IE5/Windows would rather than following CSS standards.

Problems with browsers' patchy adoption of CSS, along with errata in the original specification, led the W3C to revise the CSS&nbsp;2 standard into CSS&nbsp;2.1, which moved nearer to a working snapshot of current CSS support in HTML browsers. Some CSS&nbsp;2 properties that no browser successfully implemented were dropped, and in a few cases, defined behaviors were changed to bring the standard into line with the predominant existing implementations. CSS&nbsp;2.1 became a Candidate Recommendation on February 25, 2004, but CSS&nbsp;2.1 was pulled back to Working Draft status on June 13, 2005,<ref>{{cite web|url=http://annevankesteren.nl/2005/06/css-21|title=CSS 2.1&nbsp;– Anne’s Weblog|author=[[Anne van Kesteren]]|accessdate=2011-02-16}}</ref> and only returned to Candidate Recommendation status on July 19, 2007.<ref>{{cite web|url=http://www.w3.org/News/2007.html#entry-7058|title=Archive of W3C News in 2007|publisher=[[World Wide Web Consortium]]|accessdate=2011-02-16}}</ref>

In addition to these problems, the <code>.css</code> extension was used by a software product used to convert [[Microsoft PowerPoint|PowerPoint]] files into Compact Slide Show files,<ref>{{cite web|last=Nitot |first=Tristan |title=Incorrect MIME Type for CSS Files |url=https://developer.mozilla.org/en/Incorrect_MIME_Type_for_CSS_Files |work=[[Mozilla Developer Center]] |publisher=[[Mozilla]] |accessdate=20 June 2010 |date=18 March 2002 |archive-url=https://web.archive.org/web/20110520044919/https://developer.mozilla.org/en/Incorrect_MIME_Type_for_CSS_Files |archive-date=2011-05-20 |deadurl=yes |df= }}</ref>
so some web servers served all <code>.css</code><ref>{{cite web|last=McBride|first=Don|title=File Types|url=http://donsnotes.com/tech/filetype.html|accessdate=20 June 2010|date=27 November 2009}}</ref> as [[Internet media type|mime type]] <code>application/x-pointplus</code><ref>{{cite web|title=css file extension details|url=http://extensions.pndesign.cz/css-file|publisher=File extension database|accessdate=20 June 2010|date=12 March 2010}}</ref> rather than <code>text/css</code>.

===Variations===
CSS has various levels and profiles. Each level of CSS builds upon the last, typically adding new features and typically denoted as CSS&nbsp;1, CSS&nbsp;2, CSS&nbsp;3, and CSS&nbsp;4. Profiles are typically a subset of one or more levels of CSS built for a particular device or user interface. Currently there are profiles for mobile devices, printers, and television sets. Profiles should not be confused with media types, which were added in CSS&nbsp;2.

====CSS 1====
The first  CSS specification to become an official W3C Recommendation is CSS level 1, published on December 17, 1996.  [[Håkon Wium Lie]] and [[Bert Bos]] are credited as the original developers.<ref>{{cite book|last=Bos|first=/ Håkon Wium Lie, Bert|title=Cascading style sheets: designing for the Web|date=1997|publisher=Addison Wesley Longman|location=Harlow, England ; Reading, MA.|isbn=0-201-41998-X|edition=1st print.}}</ref><ref>[[W3C]]: ''[http://www.w3.org/TR/CSS1 Cascading Style Sheets, level 1] CSS 1 specification''</ref> Among its capabilities are support for

* [[Typeface|Font]] properties such as typeface and emphasis
* Color of text, backgrounds, and other elements
* Text attributes such as spacing between words, letters, and lines of text
* [[alignment (typesetting)|Alignment]] of text, images, [[Table (HTML)|tables]] and other elements
* Margin, border, padding, and positioning for most elements
* Unique identification and generic classification of groups of attributes

The W3C no longer maintains the CSS 1 Recommendation.<ref>[[W3C]]: ''[http://www.w3.org/TR/2008/REC-CSS1-20080411/ Cascading Style Sheets level 1 specification] CSS level 1 specification''</ref>

====CSS 2====
CSS level 2 specification was developed by the W3C and published as a recommendation in May 1998. A superset of CSS&nbsp;1, CSS&nbsp;2 includes a number of new capabilities like absolute, relative, and fixed positioning of elements and [[z-index]], the concept of media types, support for aural style sheets (which were later replaced by the CSS 3 speech modules)<ref>{{cite web|url=http://www.w3.org/TR/CSS21/aural.html#aural-media-group|title=Aural style sheets|publisher=}}</ref> and bidirectional text, and new font properties such as shadows.

The W3C no longer maintains the CSS&nbsp;2 recommendation.<ref>[[W3C]]: ''[http://www.w3.org/TR/2008/REC-CSS2-20080411/ Cascading Style Sheets, level 2] CSS&nbsp;2 specification (1998 recommendation)''</ref>

====CSS 2.1====
CSS level 2 revision 1, often referred to as "CSS 2.1", fixes errors in CSS&nbsp;2, removes poorly supported or not fully interoperable features and adds already implemented browser extensions to the specification. To comply with the W3C Process for standardizing technical specifications, CSS&nbsp;2.1 went back and forth between Working Draft status and Candidate Recommendation status for many years. CSS 2.1 first became a [http://www.w3.org/TR/2004/CR-CSS21-20040225/ Candidate Recommendation] on February 25, 2004, but it was reverted to a Working Draft on June 13, 2005 for further review. It returned to Candidate Recommendation on 19 July 2007 and then updated twice in 2009. However, because changes and clarifications were made, it again went back to Last Call Working Draft on 7 December 2010.

CSS 2.1 went to Proposed Recommendation on 12 April 2011.<ref>[[W3C]]:''[http://www.w3.org/TR/2011/PR-CSS2-20110412/ Cascading Style Sheets, level 2 revision 1] CSS 2.1 specification (W3C Proposed Recommendation)''</ref> After being reviewed by the W3C Advisory Committee, it was finally published as a W3C Recommendation on 7 June 2011.<ref name="w3.org">W3C: [http://www.w3.org/2011/05/css-pr.html.en Cascading Style Sheets Standard Boasts Unprecedented Interoperability]</ref>

CSS 2.1 was planned as the first and final revision of level 2—but low priority work on CSS 2.2 began in 2015.

====CSS 3====
[[File:CSS3 taxonomy and status-v2.png|thumb|360px|Taxonomy and status of CSS3 '''modules'''.
&nbsp; &nbsp;<span  style="color:#83af40; font-size:180%;">●</span>&nbsp;Recommendation
&nbsp; &nbsp;<span  style="color:#8a8a3c; font-size:180%;">●</span>&nbsp;Candidate&nbsp;Recommendation
&nbsp; &nbsp;<span  style="color:#c3642f; font-size:180%;">●</span>&nbsp;Last&nbsp;Call
&nbsp; &nbsp;<span  style="color:#ed1e24; font-size:180%;">●</span>&nbsp;Working&nbsp;Draft.
<!-- fig not use &nbsp; &nbsp;<span  style="color:#0FF; font-size:150%;">&#9679;</span>&nbsp;Obsolete;-->
]]
{{redirect|CSS3}}

Unlike CSS&nbsp;2, which is a large single specification defining various features, CSS&nbsp;3 is divided into several separate documents called "modules". Each module adds new capabilities or extends features defined in CSS&nbsp;2, preserving backward compatibility. Work on CSS level 3 started around the time of publication of the original CSS&nbsp;2 recommendation. The earliest CSS&nbsp;3 drafts were published in June 1999.<ref name="World Wide Web Consortium">{{cite web|url=http://www.w3.org/Style/CSS/specs|title=Descriptions of all CSS specifications|publisher=[[World Wide Web Consortium]]|date=18 February 2011|accessdate=3 March 2011|first1=Bert|last1=Bos|authorlink1=Bert Bos}}</ref>

Due to the modularization, different modules have different stability and statuses.<ref>{{cite web|url=http://www.w3.org/Style/CSS/current-work|title=CSS current work|publisher=[[World Wide Web Consortium]]|date=26 February 2011|accessdate=3 March 2011|first1=Bert|last1=Bos|authorlink1=Bert Bos}}</ref>

Some modules have ''[[W3C Recommendation#Candidate Recommendation (CR)|Candidate Recommendation]]'' (''CR'') status and are considered moderately stable. At ''CR'' stage, implementations are advised to drop vendor prefixes.<ref>{{cite web|url=http://www.w3.org/TR/css-2010/#css|title=Cascading Style Sheets (CSS) Snapshot 2010|publisher=[[World Wide Web Consortium]]|date=12 December 2010|accessdate=3 March 2011|first1=Elika J.|last1=Etemad|authorlink1=Elika Etemad}}</ref>

{| class="wikitable sortable"
|+ Summary of main module-specifications<ref>{{cite web|url=http://www.w3.org/Style/CSS/specs |title=All CSS specifications |publisher=W3.org |date=2014-05-22 |accessdate=2014-05-30}}</ref>
|-
!Module
!Specification title
!Status
!Date
|-
|<samp>css3-background</samp>
|[http://www.w3.org/TR/css3-background/ CSS Backgrounds and Borders Module Level 3]&nbsp;
|''Candidate'' Rec. ||align="right"| {{dts|2017|Oct}}
|-
|<samp>css3-box</samp>
|[http://www.w3.org/TR/css3-box CSS basic box model]
|Working ''Draft'', ||align="right"| {{dts|2018|Jul}}

|-
|<samp>css-cascade-3</samp>
|[http://www.w3.org/TR/css-cascade-3/ CSS Cascading and Inheritance Level 3]&nbsp;
|''Candidate'' Rec. ||align="right"| {{dts|2016|May}}
|-
|<samp>css3-color</samp>
|[http://www.w3.org/TR/css3-color CSS Color Module Level 3]
|''Recommendation'' ||align="right"| {{dts|2018|Jun}}
|-
|<samp>css3-content</samp>
|[http://www.w3.org/TR/css-content-3/ CSS3 Generated and Replaced Content Module]&nbsp;
|Working ''Draft'' ||align="right"| {{dts|2016|jun}}
|-
|<samp>css-fonts-3</samp>
|[http://www.w3.org/TR/css-fonts-3/ CSS Fonts Module Level 3]
|''Candidate'' Rec. ||align="right"| {{dts|2018|Jun}}
|-
|<samp>css3-gcpm</samp>
|[http://www.w3.org/TR/css-gcpm-3/ CSS Generated Content for Paged Media Module]
|Working ''Draft'' ||align="right"| {{dts|2014|May}}
|-
|<samp>css3-layout</samp>
|[http://www.w3.org/TR/css-template-3/ CSS Template Layout Module]
|''Note'' ||align="right"| {{dts|2015|Mar}}
|-
|<samp>css3-mediaqueries</samp>&nbsp;
|[http://www.w3.org/TR/css3-mediaqueries/ Media Queries]
|''Recommendation'' ||align="right"| {{dts|2012|Jun}}
|-
|<samp>mediaqueries-4</samp>&nbsp;
|[https://www.w3.org/TR/mediaqueries-4/ Media Queries Level 4]
|''Candidate'' Rec. ||align="right"| {{dts|2017|Sep}}
|-
|<samp>css3-multicol</samp>&nbsp;
|[https://www.w3.org/TR/css-multicol-1/ Multi-column Layout Module Level 1]
|Working ''Draft'' ||align="right"| {{dts|2018|May}}
|-
|<samp>css3-page</samp>
|[http://www.w3.org/TR/css3-page/ CSS Paged Media Module Level 3]
|Working ''Draft'' ||align="right"| {{dts|2013|Mar}}
|-
|<samp>selectors-3</samp>
|[http://www.w3.org/TR/css3-selectors/ Selectors Level 3]
|''Candidate'' Rec. ||align="right"| {{dts|2018|Jan}}
|-
|<samp>selectors-4</samp>
|[https://www.w3.org/TR/selectors-4/ Selectors Level 4]
|Working ''Draft'' ||align="right"| {{dts|2018|Feb}}
|-
|<samp>css3-ui</samp>
|[http://www.w3.org/TR/css-ui-3/ CSS Basic User Interface Module Level 3 (CSS3 UI)]
|''Recommendation'' ||align="right"| {{dts|2018|Jun}}
|}

====CSS 4====
There is no single, integrated CSS4 specification,<ref>{{cite web|last=Atkins Jr|first=Tab|title=A Word About CSS4|url=http://www.xanthir.com/b4Ko0|accessdate=18 October 2012}}</ref> because it is split into separate "level 4" modules.<ref>{{cite web|url=http://www.w3.org/TR/2011/WD-selectors4-20110929/ |title=W3C CSS Selectors Level 4 |publisher=W3.org |accessdate=2014-05-30}}</ref>

Because CSS3 split the CSS language's definition into modules, the modules have been allowed to level independently. Most modules are level 3—they build on things from CSS 2.1. A few level-4 modules exist (such as Image Values,<ref>{{cite web|url=http://www.w3.org/TR/css4-images/|title=CSS Image Values and Replaced Content Module Level 4}}</ref><ref>http://dev.w3.org/csswg/css4-images/</ref> Backgrounds & Borders,<ref>{{cite web|url=http://dev.w3.org/csswg/css4-background/|title=CSS Backgrounds and Borders Module Level 4|publisher=}}</ref> or Selectors),<ref>{{cite web|url=http://www.w3.org/TR/selectors4/|title=Selectors Level 4|first1=Elika J.|last1=Etemad|first2=Tab Atkins|last2=Jr.|date=2 May 2013|publisher=}}</ref> which build on the functionality of a preceding level-3 module. Other modules defining entirely new functionality, such as [[Flexbox]], have been designated as "level 1".<ref>{{cite web|url=http://www.w3.org/TR/css3-flexbox/|title=CSS Flexible Box Layout Module Level 1|publisher=}}</ref>

The CSS Working Group sometimes publishes "Snapshots", a collection of whole modules and parts of other drafts that are considered stable, interoperably implemented and hence ready to use. So far, four such "best current practices" documents have been published as Notes, in 2007,<ref>{{cite web|url=http://www.w3.org/TR/css-beijing/ | title= Cascading Style Sheets (CSS) Snapshot 2007 | date=12 May 2011}}</ref> 2010,<ref>{{cite web|url=http://www.w3.org/TR/css-2010/ | title= Cascading Style Sheets (CSS) Snapshot 2010 | date=12 May 2011}}</ref> 2015,<ref>{{cite web|url=http://www.w3.org/TR/css-2015/ | title= CSS Snapshot 2015 | date=13 October 2015}}</ref> and 2017.<ref>{{cite web|url=http://www.w3.org/TR/css-2017/ | title= CSS Snapshot 2017 | date=31 January 2017}}</ref>

==Browser support==
{{Further information|Comparison of web browser engines (CSS support)}}
Each web browser uses a [[Web browser engine|layout engine]] to render web pages, and support for CSS functionality is not consistent between them. Because browsers do not parse CSS perfectly, multiple coding techniques have been developed to target specific browsers with workarounds (commonly known as [[CSS hacks]] or CSS filters). Adoption of new functionality in CSS can be hindered by lack of support in major browsers. For example, Internet Explorer was slow to add support for many CSS 3 features, which slowed adoption of those features and damaged the browser's reputation among developers.<ref>{{Cite news|url=https://www.smashingmagazine.com/2010/04/css3-solutions-for-internet-explorer/|title=CSS3 Solutions for Internet Explorer – Smashing Magazine|date=2010-04-28|newspaper=Smashing Magazine|language=en-US|access-date=2016-10-12}}</ref> In order to ensure a consistent experience for their users, web developers often test their sites across multiple operating systems, browsers, and browser versions, increasing development time and complexity. Tools such as [[BrowserStack]] have been built to reduce the complexity of maintaining these environments.

In addition to these testing tools, many sites maintain lists of browser support for specific CSS properties, including [http://caniuse.com/ CanIUse] and the [[Mozilla Developer Network]]. Additionally, the CSS 3 defines feature queries, which provide an <code>@supports</code> directive that will allow developers to target browsers with support for certain functionality directly within their CSS.<ref>{{Cite web|url=https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/|title=Using Feature Queries in CSS ★         Mozilla Hacks – the Web developer blog|website=hacks.mozilla.org|access-date=2016-10-12}}</ref> CSS that is not supported by older browsers can also sometimes be patched in using Javascript [[Polyfill (programming)|polyfill]]s, which are pieces of Javascript code designed to make browsers behave consistently. These workarounds—and the need to support fallback functionality—can add complexity to development projects, and consequently, companies frequently define a list of browser versions that they will and will not support.

As websites adopt newer code standards that are incompatible with older browsers, these browsers can be cut off from accessing many of the resources on the web (sometimes intentionally).<ref>{{Cite news|url=https://arstechnica.com/information-technology/2014/04/looking-at-the-web-with-internet-explorer-6-one-last-time/|title=Looking at the Web with Internet Explorer 6, one last time|newspaper=Ars Technica|access-date=2016-10-12}}</ref> Many of the most popular sites on the internet are not just visually degraded on older browsers due to poor CSS support, but do not work at all, in large part due to the evolution of Javascript and other web technologies.

==Limitations==
Some noted limitations of the current capabilities of CSS include:

; Selectors are unable to ascend: CSS currently offers no way to select a ''parent'' or ''ancestor'' of an element that satisfies certain criteria.<ref name="css-missing">{{cite web|url=http://www.creativebloq.com/css3/seven-things-still-missing-css-1126553 |author=[[Molly Holzschlag]] |title=Seven Things Still Missing from CSS |publisher=.net Magazine |date=January 2012}}</ref><!--{{clarify|what criteria exactly?|date=November 2011}}--> CSS Selectors Level 4, which is still in Working Draft status, proposes such a selector,<ref>{{cite web|url=http://www.w3.org/TR/selectors4/#subject |title=Selectors Level 4 – Determining the Subject of a Selector |publisher=W3.org |accessdate=2013-08-13}}</ref> but only as part of the "complete" selector profile, not the "fast" profile used in dynamic CSS styling.<ref>{{cite web|url=http://www.w3.org/TR/selectors4/#profiles |title=Selectors Level 4 – Fast vs Complete Selector Profiles |publisher=W3.org |accessdate=2013-08-13}}</ref> A more advanced selector scheme (such as [[XPath]]) would enable more sophisticated style sheets. The major reasons for the CSS Working Group previously rejecting proposals for parent selectors are related to browser performance and [[incremental rendering]] issues.<ref name="why-not-parent-selector">{{cite web|url=http://snook.ca/archives/html_and_css/css-parent-selectors |first=Jonathan |last=Snook |title=Why we don't have a parent selector |publisher=snook.ca |date=October 2010}}</ref>
; Cannot explicitly declare new scope independently of position: Scoping rules for properties such as z-index look for the closest parent element with a position:absolute or position:relative attribute. This odd coupling has undesired effects. For example, it is impossible to avoid declaring a new scope when one is forced to adjust an element's position, preventing one from using the desired scope of a parent element.
; Pseudo-class dynamic behavior not controllable: CSS implements pseudo-classes that allow a degree of user feedback by conditional application of alternate styles. One CSS pseudo-class, "{{code|lang=css|code=:hover}}", is dynamic (equivalent of JavaScript "onmouseover") and has potential for abuse (e.g., implementing cursor-proximity popups),<ref>{{cite web|url=http://meyerweb.com/eric/css/edge/popups/demo.html |title=Pure CSS Popups |publisher=meyerweb.com |accessdate=2009-11-19}}</ref> but CSS has no ability for a client to disable it (no "disable"-like property) or limit its effects (no "nochange"-like values for each property).
; Cannot name rules: There is no way to name a CSS rule, which would allow (for example) client-side scripts to refer to the rule even if its selector changes.
; Cannot include styles from a rule into another rule: CSS styles often must be duplicated in several rules to achieve a desired effect, causing additional maintenance and requiring more thorough testing. Some new CSS features were proposed to solve this, but (as of February, 2016) are not yet implemented anywhere.<ref>{{cite web|url=https://tabatkins.github.io/specs/css-apply-rule/|author=Tab Atkins Jr.|title=CSS apply rule|publisher=GitHub|accessdate=2016-02-27}}</ref>
; Cannot target specific text without altering markup: Besides the {{code|lang=css|code=:first-letter}} pseudo-element, one cannot target specific ranges of text without needing to utilize place-holder elements.

===Former issues===
Additionally, several more issues were present in prior versions of the CSS standard, but have been alleviated:
; Vertical control limitations: Though horizontal placement of elements was always generally easy to control, vertical placement was frequently unintuitive, convoluted, or outright impossible. Simple tasks, such as centering an element vertically or placing a footer no higher than bottom of the viewport required either complicated and unintuitive style rules, or simple but widely unsupported rules.<ref name="css-missing" /><!--{{Clarify|what are the widely unsupported rules?|date=March 2009}}--> The Flexible Box Module improved the situation considerably and vertical control is much more straightforward and supported in all of the modern browsers.<ref>{{cite web|url=http://caniuse.com/flexbox|title=Can I use... Support tables for HTML5, CSS3, etc.|publisher=CanIUse.com|accessdate=2016-02-27}}</ref> Older browsers still have those issues, but most of those (mainly Internet Explorer 9 and below) are no longer supported by their vendors.<ref>{{cite web|url=https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support|title=Internet Explorer End of Support|publisher=Microsoft|accessdate=2016-02-27}}</ref>
; Absence of expressions:There was no standard ability to specify property values as simple expressions (such as {{code|lang=css|code=margin-left: 10% – 3em + 4px;}}). <!-- However server-side scripts can do the calculations and present a constant to the browser --> This would be useful in a variety of cases, such as calculating the size of columns subject to a constraint on the sum of all columns. Internet Explorer versions 5 to 7 support a proprietary expression() statement,<ref name="properties1">{{cite web|url=http://msdn.microsoft.com/en-us/library/ms537634.aspx|title=About Dynamic Properties|last=|first=|date=|website=|publisher=Msdn.microsoft.com|archive-url=https://web.archive.org/web/20171014054847/https://msdn.microsoft.com/en-us/library/ms537634.aspx|archive-date=2017-10-14|dead-url=|accessdate=2009-06-20}}</ref> with similar functionality. This proprietary expression() statement is no longer supported from Internet Explorer 8 onwards, except in compatibility modes. This decision was taken for "standards compliance, browser performance, and security reasons".<ref name="properties1"/> However, a [[W3C recommendation|candidate recommendation]] with a calc() value to address this limitation has been published by the CSS WG<ref>{{cite web|url=http://www.w3.org/TR/css3-values/#calc |title=CSS3 Values and Units |publisher=W3.org |accessdate=2009-06-20}}</ref> and has since been supported in all of the modern browsers.<ref>{{cite web|url=http://caniuse.com/calc|title=Can I use... Support tables for HTML5, CSS3, etc.|publisher=CanIUse.com|accessdate=2016-02-27}}</ref>
; Lack of column declaration: Although possible in current CSS&nbsp;3 (using the <code>column-count</code> module),<ref>{{cite web|url=http://www.w3.org/TR/css3-multicol/ |title=CSS Multi-column Layout Module |publisher=World Wide Web Consortium|accessdate=2011-05-01}}</ref> layouts with multiple columns can be complex to implement in CSS&nbsp;2.1. With CSS&nbsp;2.1, the process is often done using floating elements, which are often rendered differently by different browsers, different computer screen shapes, and different screen ratios set on standard monitors. All of the modern browsers support this CSS 3 feature in one form or another.<ref>{{cite web|url=http://caniuse.com/columns|title=Can I use... Support tables for HTML5, CSS3, etc.|publisher=CanIUse.com|accessdate=2016-02-27}}{{Dead link|date=November 2018 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>

==Advantages==
;Separation of content from presentation: {{Main article|Separation of presentation and content}} 
:CSS facilitates publication of content in multiple presentation formats based on nominal parameters. Nominal parameters include explicit user preferences, different web browsers, the type of device being used to view the content (a desktop computer or mobile Internet device), the geographic location of the user and many other variables.
;Site-wide consistency: {{Main article|Style sheet (web development)}} 
:When CSS is used effectively, in terms of inheritance and "cascading", a global style sheet can be used to affect and style elements site-wide. If the situation arises that the styling of the elements should be changed or adjusted, these changes can be made by editing rules in the global style sheet. Before CSS, this sort of maintenance was more difficult, expensive and time-consuming.
;Bandwidth: A stylesheet, internal or external, specifies the style once for a range of HTML elements selected by <code>class</code>, type or relationship to others. This is much more efficient than repeating style information inline for each occurrence of the element. An external stylesheet is usually stored in the [[browser cache]], and can therefore be used on multiple pages without being reloaded, further reducing data transfer over a network.
;Page reformatting: {{Main article|Progressive enhancement}}
:With a simple change of one line, a different style sheet can be used for the same page. This has advantages for accessibility, as well as providing the ability to tailor a page or site to different target devices. Furthermore, devices not able to understand the styling still display the content.
;Accessibility: Without CSS, web designers must typically lay out their pages with techniques such as HTML tables that hinder accessibility for vision-impaired users (see [[Tableless web design#Accessibility]]).

==Standardization==
===Frameworks===
{{Main article|CSS framework}}
[[CSS framework]]s are pre-prepared [[Library (computing)|libraries]] that are meant to allow for easier, more [[standards-compliant]] styling of [[web page]]s using the Cascading Style Sheets language. CSS frameworks include [[Foundation (framework)|Foundation]], [[Blueprint (CSS framework)|Blueprint]], [[Bootstrap (framework)|Bootstrap]], [[Cascade Framework]] and Materialize. Like programming and scripting language libraries, CSS frameworks are usually incorporated as external .css sheets referenced in the HTML {{code|lang=html|code=<head>}}. They provide a number of ready-made options for designing and laying out the web page. Although many of these frameworks have been published, some authors use them mostly for rapid prototyping, or for learning from, and prefer to 'handcraft' CSS that is appropriate to each published site without the design, maintenance and download overhead of having many unused features in the site's styling.<ref>{{cite book|last=Cederholm|first=Dan|title=Handcrafted CSS: More Bulletproof Web Design|year=2009|publisher=New Riders|isbn=978-0-321-64338-4|url=https://books.google.com/books?id=UgrUeIwsS60C&pg=PA114|author2=Ethan Marcotte|accessdate=19 June 2010|page=114}}</ref>

===Design methodologies===
As the size of CSS resources used in a project increases, a development team often needs to decide on a common design methodology to keep them organized. The goals are ease of development, ease of collaboration during development and performance of the deployed stylesheets in the browser. Popular methodologies include OOCSS - object oriented CSS, ACSS - atomic CSS, oCSS - organic Cascade Style Sheet, SMACSS - scalable and modular architecture for CSS, and BEM - block, element, modifier.<ref>
{{cite web|last1=Antti|first1=Hiljá|title=OOCSS, ACSS, BEM, SMACSS: what are they? What should I use?|url=http://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/|website=clubmate.fi|publisher=Hiljá|accessdate=2 June 2015}}</ref>

==References==
{{Reflist|30em}}

==Further reading==
{{update|section|date=July 2012}}
{{Refbegin|colwidth=35em}}
* [[Jeffrey Zeldman]] (2009): ''Designing With Web Standards'', New Riders, {{ISBN|978-0321616951}} (paperback) ([http://www.zeldman.com/dwws/ book's companion site])
* [[Dan Cederholm]] (2009): ''Web Standards Solutions, The Markup and Style Handbook'', Friends of Ed, {{ISBN|978-1430219200}} (paperback) ([https://web.archive.org/web/20060409154734/http://www.simplebits.com/publications/solutions/ Author's site])
* {{Cite book |title=Cascading Style Sheets: The Definitive Guide, Third Edition |last=Meyer |first=Eric A. |authorlink=Eric A. Meyer |year=2006 |publisher=O'Reilly Media, Inc |isbn=0-596-52733-0 |url=http://www.oreilly.com/catalog/csstdg3/ |accessdate=}}
* [http://more.ericmeyeroncss.com/ More Eric Meyer On CSS] (2004) {{ISBN|0-7357-1425-8}}
* [http://www.ericmeyeroncss.com/ Eric Meyer On CSS] (2002), {{ISBN|0-7357-1245-X}}
* Meyer, Eric A. (2001) ''Cascading Style Sheets 2.0 Programmer's Reference'', McGraw-Hill Osborne Media, {{ISBN|0-07-213178-0}}
* ''[[The Zen of CSS Design]]'' (2005) (co-authored by CSS Zen Garden Owner, [[Dave Shea (web designer)|Dave Shea]], and [[Molly E. Holzschlag]]), {{ISBN|0-321-30347-4}}
* Kynn Bartlett: ''Teach Yourself CSS in 24 Hours'', 2nd Edition (2006), Sams Publishing, {{ISBN|978-0672329067}}
* [https://web.archive.org/web/20050310045939/http://www.aw-bc.com/catalog/academic/product/0,1144,0321193121,00.html ''Cascading Style Sheets: Designing for the Web''] (2005) by Håkon Wium Lie and Bert Bos, {{ISBN|0-321-19312-1}}
* [https://web.archive.org/web/20060906211843/http://people.opera.com/howcome/2006/phd/ Cascading Style Sheets] ''Cascading Style Sheets'', PhD thesis, by Håkon Wium Lie&nbsp;– provides an authoritative historical reference of CSS
* [[Keith Schengili-Roberts]] (2003): ''Core CSS, 2nd Edition'', Prentice Hall, {{ISBN|0-13-009278-9}}
* [http://dl.acm.org/citation.cfm?doid=2187836.2187946 On the Analysis of Cascading Style Sheets], [[Pierre Geneves]], Nabil Layaida, and Vincent Quint, Proceedings of the 21st International Conference on World Wide Web (WWW'12), pp.&nbsp;809–818, 2012.
{{Refend}}

==External links==
{{wikibooks|Cascading Style Sheets}}
{{commons category}}
<!--| DO ''not'' ADD MORE LINKS TO THIS ARTICLE. WIKIPEDIA IS ''not'' A COLLECTION OF |-->
<!--| LINKS. If you think that your link might be useful, do not add it here, |-->
<!--| but put it on this article's discussion page first or submit your link |-->
<!--| to the appropriate category at the Open Directory Project (www.dmoz.org)|-->
<!--| and link back to that category using the {{dmoz}} template. |-->
<!--| |-->
<!--| Links that have not been verified WILL BE DELETED. |-->
<!--| See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details |-->
<!--===========================({{NoMoreLinks}})===============================-->
* {{Official website|https://www.w3.org/Style/CSS/}}
* {{dmoz|Computers/Data_Formats/Style_Sheets/CSS/|CSS}}

{{Stylesheet languages}}
{{W3C Standards}}
{{Web browsers}}

{{Authority control}}

[[Category:Cascading Style Sheets| ]]
[[Category:Computer-related introductions in 1996]]
[[Category:Stylesheet languages]]
[[Category:Typesetting programming languages]]
[[Category:Web design]]
[[Category:World Wide Web Consortium standards]]