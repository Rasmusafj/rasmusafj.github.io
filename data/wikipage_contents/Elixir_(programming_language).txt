{{Infobox programming language
| name = Elixir
| title = 
| logo = [[File:Elixir_programming_language_logo.png|frameless|100px|elixir programming language]]
| caption = Elixir
| paradigm = [[multi-paradigm programming language|multi-paradigm]]: [[functional programming|functional]],  [[concurrent programming|concurrent]], [[distributed programming|distributed]], [[process-oriented programming|process-oriented]]
| typing = [[type system|dynamic]], [[strong typing|strong]], [[duck typing|duck]]
| influenced = [[LFE (programming language)|LFE]]
| platform = [[Erlang (programming language)|Erlang]]
| license = [[Apache License|Apache License 2.0]]<ref>{{cite web|url=https://github.com/elixir-lang/elixir/blob/master/LICENSE|title=elixir/LICENSE at master · elixir-lang/elixir · GitHub|work=GitHub}}</ref>
| website = {{URL|https://elixir-lang.org}}
| year = {{start date and age|2011}}
| influenced_by = [[Clojure]], [[Erlang (programming language)|Erlang]], [[Ruby (programming language)|Ruby]]
| creator = [[José Valim]]
| latest_release_version = 1.7.4
| latest_release_date = {{Start date and age|df=yes|2018|10|24}}<ref>{{cite web|title = Releases - elixir-lang/elixir|url=https://github.com/elixir-lang/elixir/releases|accessdate=26 October 2018|via=[[GitHub]]}}</ref>
| file_ext = .ex, .exs
}}

'''Elixir''' is a [[functional language|functional]], [[concurrent computing|concurrent]], general-purpose [[programming language]] that runs on the [[Erlang (programming language)|Erlang]] [[virtual machine]] ([[BEAM (Erlang virtual machine)|BEAM]]).<ref>{{Cite news|url=https://www.eliteinfoworld.com/blog/popular-programming-languages-2018/|title=Most Popular Programming Languages of 2018 - Elite Infoworld Blog|date=2018-03-30|access-date=2018-05-08|language=en-US}}</ref> Elixir builds on top of Erlang and shares the same abstractions for building distributed, fault-tolerant applications. Elixir also provides a productive tooling and an extensible design. The latter is supported by compile-time [[metaprogramming]] with [[Macro (computer science)|macros]] and [[polymorphism (computer science)|polymorphism]] via protocols.<ref>{{cite web |url=https://elixir-lang.org|title=Elixir | work=José Valim | accessdate=2013-02-17}}</ref>

Elixir is used by companies such as E-MetroTel, [[Pinterest]]<ref>{{Cite web|title = Introducing new open-source tools for the Elixir community|url = https://engineering.pinterest.com/blog/introducing-new-open-source-tools-elixir-community|accessdate = 2016-08-01}}</ref> and [[Moz (marketing software)|Moz]].<ref>{{Cite web|title = Unlocking New Features in Moz Pro with a Database-Free Architecture|url = https://moz.com/devblog/moz-analytics-db-free/|accessdate = 2016-08-01}}</ref> Elixir is also used for web development, by companies such as [[Bleacher Report]], [[Discord_(software)|Discord]], and Inverse,<ref>{{Cite web|title = What big projects use Elixir?|url = https://www.quora.com/What-big-projects-use-Elixir|accessdate = 2016-08-01}}</ref> and for building embedded systems.<ref>{{Cite web|title = Elixir in production interview: Garth Hitchens|url = http://blog.plataformatec.com.br/2015/06/elixir-in-production-interview-garth-hitches/|accessdate = 2016-08-01}}</ref><ref>{{Cite web|title = Nerves - Craft and deploy bulletproof embedded software in Elixir |url = http://nerves-project.org/|accessdate = 2016-08-01}}</ref> The community organizes yearly events in United States<ref>{{Cite web|title = ElixirConf|url = http://elixirconf.com/|accessdate = 2018-07-11}}</ref>, Europe<ref>{{Cite web|title = ElixirConf|url = http://elixirconf.eu/|accessdate = 2018-07-11}}</ref> and Japan<ref>{{Cite web|title = ElixirConf.jp|url = http://www.elixirconf.jp/|accessdate = 2018-07-11}}</ref> as well as minor local events and conferences.<ref>{{Cite web|title = Elixir LDN|url = http://www.elixir.london/|accessdate = 2018-07-12}}</ref><ref>{{Cite web|title = EMPEX - Empire State Elixir Conference|url = http://empex.co/|accessdate = 2018-07-12}}</ref>

On July 12, 2018, Honeypot released a mini-documentary on Elixir.<ref>{{Cite web|title = Elixir: A Mini-Documentary|url = http://doc.honeypot.io/elixir-documentary-2018/|accessdate = 2018-07-12}}</ref>

==History==
José Valim is the creator of the Elixir programming language, an R&D project of [http://plataformatec.com.br Plataformatec]. His goals were to enable higher extensibility and productivity in the Erlang VM while keeping compatibility with Erlang's ecosystem.<ref>{{ cite AV media |url=http://vimeo.com/53221562|title=Elixir - A modern approach to programming for the Erlang VM | accessdate=2013-02-17}}</ref> <ref>{{ cite AV media |url=https://www.youtube.com/watch?v=IZvpKhA6t8A|title=José Valim - ElixirConf EU 2017 Keynote | accessdate=2017-07-14}}</ref>

==Features==
* A language that [[Compiler|compiles]] to [[bytecode]] for the [[Erlang (programming language)|Erlang]] Virtual Machine (BEAM)<ref name="elixirhome">{{ cite web |url=https://elixir-lang.org/|title=Elixir | accessdate=2014-09-07}}</ref>
* Everything is an [[Expression (computer science)|expression]]<ref name="elixirhome" />
* Erlang functions can be called from Elixir without [[Run time (program lifecycle phase)|run time]] impact, due to compilation to Erlang bytecode, and vice versa
* Meta programming allowing direct manipulation of [[Abstract syntax tree|AST]]<ref name="elixirhome" />
* [[Polymorphism (computer science)|Polymorphism]] via a mechanism called protocols. Like in [[Clojure]], protocols provide a [[dynamic dispatch]] mechanism. However, this is not to be confused with [[multiple dispatch]] as Elixir protocols dispatch on a single type.
* Support for documentation via Python-like docstrings in the Markdown formatting language<ref name="elixirhome" />
* [[Shared nothing architecture|Shared nothing concurrent programming]] via message passing ([[Actor model]])<ref>{{cite book|last1=Loder|first1=Wolfgang|title=Erlang and Elixir for Imperative Programmers|date=12 May 2015|publisher=Leanpub|location="Chapter 16: Code Structuring Concepts", section title "Actor Model"|url=https://leanpub.com/erlangandelixirforimperativeprogrammers|accessdate=7 July 2015}}</ref>
* Emphasis on [[recursion (computer science)|recursion]] and [[higher-order function]]s instead of [[side-effect (computer science)|side-effect]]-based [[loop (computing)|looping]]
* Lightweight concurrency utilizing Erlang's mechanisms<ref name="elixirhome" />
* Railway oriented programming via the <code>with</code> construct
* [[Mix (build tool)|Built-in tooling]] for managing dependencies, code compilation, running tests, formatting code, remote debugging and more
* [[Lazy evaluation|Lazy]] and [[Futures and promises|async collections]] with streams
* [[Pattern matching]]<ref name="elixirhome" /> to promote assertive code<ref>{{Cite web|title = Writing assertive code with Elixir|url = http://blog.plataformatec.com.br/2014/09/writing-assertive-code-with-elixir/|accessdate = 2018-07-05}}</ref> 
* [[Unicode]] support and [[UTF-8]] strings

==Examples==
The following examples can be run in an iex shell or saved in a file and run from the command line by typing <code>elixir ''<filename>''</code>.

Classic [[Hello world]] example:

<source lang="iex">
iex> IO.puts("Hello World!")
Hello World!
</source>

Comprehensions
<source lang="iex">
iex> for n <- [1,2,3,4,5], rem(n, 2) == 1, do: n*n
[1, 9, 25]
</source>

Pattern Matching (destructuring)
<source lang="iex">
iex> [1, a] = [1, 2]
iex> a
2

iex> {:ok, [hello: a]} = {:ok, [hello: "world"]}
iex> a
"world"
</source>

Pattern Matching (multiple clauses)
<source lang="iex">
iex> case File.read("path/to/file") do
iex>   {:ok, contents} -> IO.puts("found file: #{contents}")
iex>   {:error, reason} -> IO.puts("missing file: #{reason}")
iex> end
</source>

Pipe Operator
<source lang="iex">
iex> "1" |> String.to_integer() |> Kernel.*(2)
2
</source>

Modules
<source lang="elixir">
defmodule Fun do
  def fib(0), do: 0
  def fib(1), do: 1
  def fib(n), do: fib(n-2) + fib(n-1)  
end
</source>

Sequentially spawning a thousand processes
<source lang=elixir>
for num <- 1..1000, do: spawn fn -> IO.puts("#{num * 2}") end
</source>

Asynchronously performing a task
<source lang=elixir>
task = Task.async fn -> perform_complex_action() end
other_time_consuming_action()
Task.await task
</source>

==Noteworthy Elixir projects==
* [https://github.com/absinthe-graphql/absinthe Absinthe] is a GraphQL implementation for Elixir
* [https://github.com/elixir-ecto/ecto Ecto] is a database wrapper and language integrated query for Elixir
* [[Mix (build tool)|Mix]] is a build automation tool for Elixir projects
* [https://github.com/nerves-project/nerves Nerves] is framework and platform for embedded software
* [[Phoenix (web framework)|Phoenix]] is a web framework built on Elixir
* [https://github.com/elixir-plug/plug Plug] is a specification and conveniences for composable modules between web applications

==See also==
{{Portal|Free software}}
* [[Concurrent computing]]
* [[Distributed computing]]
* [[Erlang (programming language)]]

==References==
{{Reflist|30em}}

==External links==
{{Portal|Free software}}
* [https://elixir-lang.org Elixir language website]
* [https://github.com/elixir-lang/elixir/ Code on GitHub]
* [http://vimeo.com/53221562 Elixir - A modern approach to programming for the Erlang VM] (video presentation)
* [https://pragprog.com/book/elixir16/programming-elixir-1-6 Dave Thomas: "Programming Elixir ≥ 1.6 Functional |> Concurrent |> Pragmatic |> Fun" (book)]
* [http://shop.oreilly.com/product/0636920030584.do Simon St. Laurent, J. David Eisenberg: "Introducing Elixir" (book)]
* [http://shop.oreilly.com/product/9781680500417.do Chris McCord: "Metaprogramming Elixir " (book)] 

{{Programming languages}}

[[Category:Concurrent programming languages]]
[[Category:Pattern matching programming languages]]
[[Category:Programming languages]]
[[Category:Programming languages created in 2012]]
[[Category:Software using the Apache license]]