{{For|the language released in 2003 by McCabe and Clark|Go! (programming language)}}
{{Redirect|Google Go|the computer program by Google to play the board game Go|AlphaGo}}
{{Infobox programming language
| name = Go
| logo = Go Logo Aqua.svg
| paradigm = [[Multi-paradigm programming language|Multi-paradigm]]: [[concurrent programming|concurrent]], [[functional programming|functional]],<ref>{{cite web|title="First-Class Functions in Go"|quote="Go supports ... a functional programming style in a strongly typed language."|url=https://golang.org/doc/codewalk/functions/|accessdate=November 14, 2018}}</ref>  [[procedural programming|procedural]]
| year = {{start date and age|2009|11|10}}
| designer = [[Robert Griesemer]]<br />[[Rob Pike]]<br />[[Ken Thompson]]
| developer = The Go Authors<ref name="license"/>
| latest_release_version = 1.11.2
| latest_release_date = {{start date and age|2018|11|2}}<ref name="release_page">{{cite web|title=Release History - The Go Programming Language|url=https://golang.org/doc/devel/release.html|accessdate=November 4, 2018}}</ref>
| latest_test_version = 
| latest_test_date = <!--{{start date and age|2016|08|08}}<ref name="preview_page">{{cite web|title=Release History - The Go Programming Language|url=https://golang.org/dl/|website=golang.org|accessdate=August 8, 2016}}</ref>-->
| typing = [[strong typing|Strong]], [[static typing|static]], [[type inference|inferred]], [[structural typing|structural]]<ref name="structural_typing">{{cite web |title=Why doesn't Go have "implements" declarations? |url=https://golang.org/doc/faq#implements_interface |work=golang.org |accessdate=October 1, 2015}}</ref><ref>{{cite web |url=https://twitter.com/rob_pike/status/546973312543227904 |title=Rob Pike on Twitter |last=Pike |first=Rob |date=December 22, 2014 |accessdate=March 13, 2016 |quote=Go has structural typing, not duck typing. Full interface satisfaction is checked and required. }}</ref>
| implementations = gc, gccgo
| programming language = Go, [[assembly language]] (gc); [[C++]] (gccgo)
| dialects = 
| influenced_by = [[Alef (programming language)|Alef]], [[APL (programming language)|APL]],<ref name="hgophers">{{cite web |url=https://talks.golang.org/2014/hellogophers.slide#21 |title=Hello Gophers |last=Pike |first=Rob |date=April 24, 2014 |accessdate=March 11, 2016 }}</ref> [[BCPL]],<ref name="hgophers"/> [[C (programming language)|C]], [[Communicating sequential processes|CSP]], [[Limbo (programming language)|Limbo]], [[Modula]], [[Newsqueak]], [[Oberon (programming language)|Oberon]], [[Occam (programming language)|occam]], [[Pascal (programming language)|Pascal]],<ref name="langfaq"/> [[Smalltalk]]<ref>{{cite web |title=The Evolution of Go|url=https://talks.golang.org/2015/gophercon-goevolution.slide#19|accessdate=September 26, 2015}}</ref>
| influenced = [[Crystal (programming language)|Crystal]]
| operating_system = [[DragonFly BSD]], [[FreeBSD]], [[Linux]], [[macOS]], [[NetBSD]], [[OpenBSD]],<ref name=openbsd>{{cite web |url=http://ports.su/lang/go |title=lang/go: go-1.4 – Go programming language |work=OpenBSD ports |date=December 23, 2014 |accessdate=January 19, 2015}}</ref> [[Plan 9 from Bell Labs|Plan 9]],<ref>{{cite web|url=http://go-lang.cat-v.org/os-ports|title=Go Porting Efforts|date=January 12, 2010|work=Go Language Resources|publisher=cat-v|accessdate=January 18, 2010}}</ref> [[Solaris (operating system)|Solaris]], [[Windows]]
| license = [[BSD licenses|BSD]]-style<ref name="license">{{cite web |url=http://golang.org/LICENSE |title=Text file LICENSE |work=The Go Programming Language |publisher=Google |accessdate=October 5, 2012}}</ref> + [[software patents|patent]] grant<ref>{{cite web |url=http://golang.org/PATENTS |title=Additional IP Rights Grant |last= |first= |date= |work=The Go Programming Language |publisher=Google |accessdate=October 5, 2012}}</ref>
| website = {{Official URL}}
| file_ext = .go
}}

'''Go''' (often referred to as '''Golang'''<ref>{{cite web|url=https://tip.golang.org/doc/faq#go_or_golang|title=Frequently Asked Questions (FAQ)|accessdate=October 6, 2018}}</ref>) is a [[programming language]] designed by [[Google]]<ref name="techcrunch">{{cite news|url=https://techcrunch.com/2009/11/10/google-go-language/|title=Google’s Go: A New Programming Language That’s Python Meets C++|last=Kincaid |first=Jason |date=November 10, 2009 |newspaper=TechCrunch |accessdate=January 18, 2010}}</ref> engineers Robert Griesemer, [[Rob Pike]], and [[Ken Thompson]].<ref name="langfaq">{{cite web |url=http://golang.org/doc/go_faq.html |title=Language Design FAQ |date=January 16, 2010 |work=golang.org |accessdate=February 27, 2010}}</ref> Go is [[static typing|statically typed]], [[compiled language|compiled]], and [[syntax (programming languages)|syntactically]] similar to [[C (programming language)|C]], with the added benefits of [[memory safety]], [[garbage collection (computer science)|garbage collection]], [[structural type system|structural typing]],<ref name="structural_typing"/> and [[communicating sequential processes|CSP]]-style [[concurrency (computer science)|concurrency]].<ref name="boldly">{{cite web |title=Google Go boldly goes where no code has gone before |website=The Register |url=https://www.theregister.co.uk/2011/05/05/google_go/ |date=May 5, 2011 |first=Cade |last=Metz}}</ref> The [[compiler]], tools, and source code are all [[Free software|free]] and [[open-source software|open source]].<ref>{{cite web|url=https://golang.org/LICENSE|title=LICENSE - The Go Programming Language|website=golang.org}}</ref>

==History==
Go was conceived in 2007 to improve [[programming productivity]] at Google, in an era of [[multi-core processor|multicore processors]], [[computer network]]s, and large [[codebase]]s.<ref>{{cite web|title=Go at Google: Language Design in the Service of Software Engineering|url=https://talks.golang.org/2012/splash.article|accessdate=October 8, 2018}}</ref> The designers wanted to resolve common criticisms of other languages, while retaining many of their useful characteristics:<ref>{{cite web |url= http://www.stanford.edu/class/ee380/Abstracts/100428.html |title= Another Go at Language Design |last= Pike |first= Rob |date= April 28, 2010 |work= Stanford EE Computer Systems Colloquium |publisher= [[Stanford University]]}} [https://www.youtube.com/watch?v=7VcArS4Wpqk Video available].</ref>

* Static typing and efficiency (like [[C++]] or [[Java (programming language)|Java]])
* Productivity and ease of use (like [[Python (programming language)|Python]] or [[JavaScript]])<ref>{{cite web
|url= https://golang.org/doc/faq#different_syntax
|title= Frequently Asked Questions (FAQ) - The Go Programming Language
|work= golang.org
|accessdate= February 26, 2016
}}</ref>
* High-performance [[computer network|networking]] and [[multiprocessing]]

The designers cited their shared [[Criticism of C++|dislike of C++]] as a primary motivation for designing a new language.<ref>{{cite web |url= http://www.drdobbs.com/open-source/interview-with-ken-thompson/229502480 |title= Dr. Dobb's: Interview with Ken Thompson |author= Andrew Binstock |date= May 18, 2011 |accessdate= February 7, 2014}}</ref><ref>{{cite web |url= http://commandcenter.blogspot.mx/2012/06/less-is-exponentially-more.html |title= Less is exponentially more |year= 2012 |last= Pike |first= Rob}}</ref><ref>{{cite web |url= https://talks.golang.org/2015/gophercon-goevolution.slide#4 |title= The Evolution of Go |year= 2015 |author= Robert Griesemer}}
</ref>

Go was publicly announced in November 2009,<ref>{{cite web|last1=Griesemer|first1=Robert|last2=Pike|first2=Rob|last3=Thompson|first3=Ken|last4=Taylor|first4=Ian|last5=Cox|first5=Russ|last6=Kim|first6=Jini|last7=Langley|first7=Adam|title=Hey! Ho! Let's Go!|url=https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html|website=Google Open Source|publisher=Google|accessdate=May 17, 2018}}</ref> and version 1.0 was released in March 2012.<ref>
{{cite news
| last1                 = Shankland
| first1                = Stephen
| title                 = Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google.
| url                   = https://www.cnet.com/news/googles-go-language-turns-one-wins-a-spot-at-youtube/
| department            = News
| website               = CNet
| publisher             = CBS Interactive Inc
| publication-date      = March 30, 2012
| access-date           = August 6, 2017
| quote                 = Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++.
}}
</ref><ref>
{{cite web
|url= https://golang.org/doc/devel/release.html
|title= Release History
}}
</ref> Go is widely used in production at Google<ref name="faq">
{{cite news
|url= http://golang.org/doc/faq#Is_Google_using_go_internally
|title= Go FAQ: Is Google using Go internally?
|accessdate= March 9, 2013}}</ref> and in many other organizations and open-source projects.

In April 2018, the original logo (Gopher mascot) was replaced with a stylized GO slanting right with trailing streamlines. However, the mascot remained the same.<ref>{{Cite web|url=https://blog.golang.org/go-brand|title=Go's New Brand - The Go Blog|website=blog.golang.org|access-date=2018-11-09}}</ref>

In August 2018, the Go principal contributors published two ″draft designs″ for new language features, [[generic programming|Generics]] and [[exception handling|Error Handling]], and asked Go users to submit feedback on them.<ref>
{{cite web |url= https://go.googlesource.com/proposal/+/master/design/go2draft.md |title= Go 2 Draft Designs |accessdate= September 12, 2018}}</ref><ref>
{{cite web |url= https://blog.golang.org/go2draft |title= The Go Blog: Go 2 Draft Designs |date= August 28, 2018}}</ref>
Lack of support for generic programming and the verbosity of error handling in Go 1.x had drawn considerable [[#Criticism|criticism]].

[[File:Golang.png|thumb|Current Gopher mascot and old logo.]]

===Version history===
Go 1 guarantees compatibility<ref>{{cite web | url=https://golang.org/doc/go1compat | title=Go 1 and the Future of Go Programs}}</ref> for the language specification and major parts of the standard library. All versions up to the current Go 1.11 release<ref>{{cite web | url=https://golang.org/doc/go1.11#introduction | title=Go 1.11 Release Notes}}</ref> have maintained this promise.

Each major Go release is supported until there are two newer major releases.<ref>{{cite web | url=https://golang.org/doc/devel/release.html#policy | title=Release History}}</ref>
{| class="wikitable"
|+
!Major version
!Initial release date
!Language changes<ref>{{Cite web|url=https://golang.org/doc/devel/release.html|title=Release History - The Go Programming Language|website=golang.org|access-date=August 24, 2018}}</ref>
!Other changes
|-
|1 - 1.0.3
|2012/03/28
|Initial release
|
|-
|1.1 - 1.1.2
|2013/05/13
|
* In Go 1.1, an integer division by constant zero is not a legal program, so it is a compile-time error.
* The definition of string and rune literals has been refined to exclude surrogate halves from the set of valid Unicode code points.
* Loosened return requirements rules. If the compiler can prove that a function always returns before reaching the end of a function, a final terminating statement can be omitted.
|
* The language allows the implementation to choose whether the <code>int</code> type and <code>uint</code> types are 32 or 64 bits.
* On 64-bit architectures, the maximum heap size has been enlarged substantially, from a few gigabytes to several tens of gigabytes.
* Addition of a race detector to the standard tool set.
|-
|1.2 - 1.2.2
|2013/12/01
|
* The language now specifies that, for safety reasons, certain uses of nil pointers are guaranteed to trigger a run-time panic.
* Go 1.2 adds the ability to specify the capacity as well as the length when using a slicing operation on an existing array or slice. A slicing operation creates a new slice by describing a contiguous section of an already-created array or slice.
|
* The runtime scheduler can now invoked on (non-inlined) function calls.
* Go 1.2 introduces a configurable limit (default 10,000) to the total number of threads a single program may have.
* In Go 1.2, the minimum size of the stack when a goroutine is created has been lifted from 4KB to 8KB.
|-
|1.3 - 1.3.3
|2014/06/18
|There are no language changes in this release.
|
* The Go 1.3 memory model adds a new rule concerning sending and receiving on buffered channels, to make explicit that a buffered channel can be used as a simple semaphore, using a send into the channel to acquire and a receive from the channel to release.
* Go 1.3 has changed the implementation of goroutine stacks away from the old, "segmented" model to a contiguous model.
* For a while now, the garbage collector has been ''precise'' when examining values in the heap; the Go 1.3 release adds equivalent precision to values on the stack.
* Iterations over small maps no longer happen in a consistent order. This is due to developers abusing implementation behaviour.
|-
|1.4 - 1.4.3
|2014/12/10
|
* Range-expression without assignment
* Automatic double-dereference on method calls is now disallowed in gc and gccgo. This is a backwards incompatible change but inline within the language specification.
|
* In 1.4, much of the runtime code has been translated to Go so that the garbage collector can scan the stacks of programs in the runtime and get accurate information about what variables are active.
* The language accepted by the assemblers <code>cmd/5a</code>, <code>cmd/6a</code> and <code>cmd/8a</code> has had several changes, mostly to make it easier to deliver type information to the runtime.
* Addition of internal packages.
* New subcommand go generate.
|-
|1.5 - 1.5.4
|2015/08/19
|
* Due to an oversight, the rule that allowed the element type to be elided from slice literals was not applied to map keys. This has been corrected in Go 1.5.
|
* The compiler and runtime are now implemented in Go and assembler, without C. Now that the Go compiler and runtime are implemented in Go, a Go compiler must be available to compile the distribution from source. The compiler is now self-hosted.
* The garbage collector has been re-engineered for 1.5. The "stop the world" phase of the collector will almost always be under 10 milliseconds and usually much less.
* In Go 1.5, the order in which goroutines are scheduled has been changed.
|-
|1.6 - 1.6.4
|2016/02/17
|There are no language changes in this release.
|
* A major change was made to cgo defining the rules for sharing Go pointers with C code, to ensure that such C code can coexist with Go's garbage collector.
* The Go parser is now hand-written instead of generated.
* The <code>go vet</code> command now diagnoses passing function or method values as arguments to <code>Printf</code>, such as when passing <code>f</code> where <code>f()</code> was intended.
|-
|1.7 - 1.7.6
|2016/08/15
|
* Clarification on terminating statements in the language specification. This does not change existing behaviour. 
|
* For 64-bit x86 systems, the following instructions have been added: <code>PCMPESTRI</code>, <code>RORXL</code>, <code>RORXQ</code>, <code>VINSERTI128</code>, <code>VPADDD</code>, <code>VPADDQ</code>, <code>VPALIGNR</code>, <code>VPBLENDD</code>, <code>VPERM2F128</code>, <code>VPERM2I128</code>, <code>VPOR</code>, <code>VPSHUFB</code>, <code>VPSHUFD</code>, <code>VPSLLD</code>, <code>VPSLLDQ</code>, <code>VPSLLQ</code>, <code>VPSRLD</code>, <code>VPSRLDQ</code>, and <code>VPSRLQ</code>.
* This release includes a new code generation back end for 64-bit x86 systems, based on [[Static single assignment form|SSA]].
* Packages using cgo may now include Fortran source files (in addition to C, C++, Objective C, and SWIG), although the Go bindings must still use C language APIs.
* The new subcommand “<code>go</code> <code>tool</code> <code>dist</code> <code>list</code>” prints all supported operating system/architecture pairs.
|-
|1.8 - 1.8.7
|2017/02/16
|
* When explicitly converting a value from one struct type to another,  as of Go 1.8 the tags are ignored. Thus two structs that differ  only in their tags may be converted from one to the other.
|
* For 64-bit x86 systems, the following instructions have been added: <code>VBROADCASTSD</code>, <code>BROADCASTSS</code>, <code>MOVDDUP</code>, <code>MOVSHDUP</code>, <code>MOVSLDUP</code>, <code>VMOVDDUP</code>, <code>VMOVSHDUP</code>, and <code>VMOVSLDUP</code>.
* Garbage collection pauses should be significantly shorter than they  were in Go 1.7, usually under 100 microseconds and often as low as  10 microseconds.  See the  document on eliminating stop-the-world stack re-scanning  for details.
* The overhead of deferred  function calls has been reduced by about half.
* The overhead of calls from Go into C has been reduced by about half.
|-
|1.9 - 1.9.7
|2017/08/24
|
* Go now supports type aliases.
* Force the intermediate rounding in floating-point arithmetic.
|
* The Go compiler now supports compiling a package's functions in parallel, taking  advantage of multiple cores.
|-
|1.10 - 1.10.3
|2018/02/16
|
* A corner case involving shifts of untyped constants has been clarified.
* The grammar for method expressions has been updated to relax the syntax to allow any type expression as a receiver.
|
* For the X86 64-bit port, the assembler now supports 359 new instructions, including the full AVX, AVX2, BMI, BMI2, F16C, FMA3, SSE2, SSE3, SSSE3, SSE4.1, and SSE4.2 extension sets. The assembler also no longer implements <code><small>MOVL</small></code> <code><small>$0,</small></code> <code><small>AX</small></code> as an <code><small>XORL</small></code> instruction, to avoid clearing the condition flags unexpectedly.
|-
|1.11 - 1.11.1
|2018/08/24
|There are no changes to the language specification.
|
* Go 1.11 adds an experimental port to [[WebAssembly]].
* Go 1.11 adds preliminary support for a new concept called “modules,”  an alternative to GOPATH with integrated support for versioning and  package distribution.
* The assembler for <code>amd64</code> now accepts AVX512 instructions.
* Go 1.11 drops support of Windows XP and Windows Vista.<ref>https://golang.org/doc/go1.11</ref>
|}

== Implementations ==
Two major implementations exist:

* Google's Go toolchain, targeting multiple platforms including [[Linux]], [[Berkeley Software Distribution|BSD]], [[macOS]], [[Plan 9 from Bell Labs|Plan 9]], [[Windows]], and (since 2015) mobile devices.<ref>{{cite web|url=https://www.wired.com/2015/08/googles-house-programming-language-now-runs-phones/|title=Google's In-House Programming Language Now Runs on Phones|date=August 19, 2015|website=[[wired.com]]}}</ref> The primary Go compiler became [[self-hosting]] in version 1.5.<ref>{{cite web|url=https://golang.org/doc/go1.5#implementation|title=Go 1.5 Release Notes|accessdate=January 28, 2016|quote=The compiler and runtime are now implemented in Go and assembler, without C.}}</ref>
* A second compiler, gccgo, is a [[GNU Compiler Collection|GCC]] frontend.<ref>{{cite web|url=http://golang.org/doc/go_faq.html#Implementation|title=FAQ: Implementation|date=January 16, 2010|work=golang.org|accessdate=January 18, 2010}}</ref><ref>{{cite web|url=https://gcc.gnu.org/install/configure.html|title=Installing GCC: Configuration|accessdate=December 3, 2011|quote=Ada, Go and Objective-C++ are not default languages}}</ref>

A third Go compiler, known as GopherJS,<ref>https://github.com/gopherjs/gopherjs</ref> also exists. GopherJS compiles Go code into [[JavaScript]] code, and enables Go to be used for [[Front-end web development|frontend development]].

[[File:Go_Logo_Aqua.svg|thumb|New logo.]]

==Language design==
Go is recognizably in the tradition of [[C (programming language)|C]], but makes many changes to improve brevity, simplicity, and safety. The language consists of:

* A syntax and environment adopting patterns more common in [[dynamic programming language|dynamic language]]s:<ref name=go_lang_video_2009>{{cite web|last=Pike|first=Rob|title=The Go Programming Language|url=https://www.youtube.com/watch?v=rKnDgT73v8s|publisher=YouTube|accessdate=July 1, 2011}}</ref>
** Optional concise variable declaration and initialization through [[type inference]] (<code>x := 0</code> not <code>int x = 0;</code> or <code>var x = 0;</code>).
** Fast compilation times.<ref name="techtalk-compiling">{{cite video |people=[[Rob Pike]] |date=November 10, 2009 |title=The Go Programming Language |url=https://www.youtube.com/watch?v=rKnDgT73v8s#t=8m53 |format=flv |medium=Tech talk |publisher=Google |time=8:53}}</ref>
** Remote package management (<code>go get</code>)<ref>[http://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies Download and install packages and dependencies - go - The Go Programming Language]; see [http://godoc.org godoc.org] for addresses and documentation of some packages</ref> and online package documentation.<ref>{{cite web |url=http://godoc.org |title=GoDoc |work=godoc.org}}</ref>
* Distinctive approaches to particular problems:
** Built-in concurrency primitives: [[light-weight process]]es (goroutines), [[channel (programming)|channel]]s, and the <code>select</code> statement.
** An [[protocol (object-oriented programming)|interface]] system in place of [[virtual inheritance]], and type embedding instead of non-virtual inheritance.
** A toolchain that, by default, produces [[static library|statically linked]] native binaries without external dependencies.
* A desire to keep the language specification simple enough to hold in a programmer's head,<ref>Rob Pike, on [http://5by5.tv/changelog/100 The Changelog] podcast</ref> in part by [[Go (programming language)#Omissions|omitting features which are common in similar languages]].

===Syntax===
Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write <code>i := 3</code> or <code>s := "Hello, world!"</code>, [[type inference|without specifying the type]]s of variables. This contrasts with C's <code>int i = 3;</code> and <code>const char *s = "Hello, world!";</code>. Semicolons still terminate statements,{{efn|but "To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }".<ref>{{cite web |url=https://golang.org/ref/spec#Semicolons |title=Go Programming Language Specification, §Semicolons|work=golang.org}}</ref>}} but are implicit when the end of a line occurs.{{efn|“if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon”.<ref>{{cite web |url=https://golang.org/doc/effective_go.html#semicolons |title=Effective Go, §Semicolons|work=golang.org}}</ref>}} Functions may return multiple values, and returning a <code>result, err</code> pair is the conventional way a function indicates an error to its caller in Go.{{efn|Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See [[Semipredicate problem#Multivalued return|Semipredicate problem: Multivalued return]].}} Go adds literal syntaxes for initializing struct parameters by name, and for initializing [[Associative array|maps]] and [[Array slicing|slices]]. As an alternative to C's three-statement <code>for</code> loop, Go's <code>range</code> expressions allow concise iteration over arrays, slices, strings, maps, and channels.{{citation needed|date=December 2016}}

===Types===
Go has a number of built-in types, including numeric ones ({{mono|byte}}, {{mono|int64}}, {{mono|float32}}, etc.), [[boolean data type|boolean]]s, and character strings ({{mono|string}}). Strings are immutable; built-in operators, and keywords (rather than functions) provide concatenation, comparison, and [[UTF-8]] encoding/decoding.<ref>Rob Pike, [http://blog.golang.org/strings Strings, bytes, runes and characters in Go], October 23, 2013</ref> [[Record (computer science)|Record type]]s can be defined with the {{mono|struct}} keyword.<ref>{{cite web |last1=Doxsey |first1=Caleb |title=Structs and Interfaces — An Introduction to Programming in Go |url=https://www.golang-book.com/books/intro/9 |website=www.golang-book.com |accessdate=15 October 2018}}</ref>

For each type {{mono|''T''}} and each non-negative integer constant {{mono|''n''}}, there is an [[array data type|array type]] denoted {{mono|[''n'']''T''}}; arrays of differing lengths are thus of different types. [[Dynamic array]]s are available as "slices", denoted {{mono|[]''T''}} for some type {{mono|''T''}}. These have a length and a ''capacity'' specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.{{r|append}}<ref>Andrew Gerrand, [http://blog.golang.org/go-slices-usage-and-internals Go Slices: usage and internals]</ref><ref>The Go Authors, [http://golang.org/doc/effective_go.html#slices Effective Go: Slices]</ref>

[[Pointer (computer programming)|Pointer]]s are available for all types, and the pointer-to-{{mono|''T''}} type is denoted {{mono|*''T''}}. Address-taking and indirection use the {{mono|&amp;}} and {{mono|*}} operators as in C, or happen implicitly through the method call or attribute access syntax.<ref>The Go authors [https://golang.org/ref/spec#Selectors Selectors - The Go Programming Language Specification] and [https://golang.org/ref/spec#Calls Calls - The Go Programming Language Specification]</ref> There is no pointer arithmetic,{{efn|name=noPointerArith}} except via the special {{mono|unsafe.Pointer}} type in the standard library.<ref>{{cite web |url=https://golang.org/ref/spec#Package_unsafe |title=Go Programming Language Specification, §Package unsafe|work=golang.org}}</ref>

For a pair of types {{mono|''K''}}, {{mono|''V''}}, the type {{mono|map[''K'']''V''}} is the type of [[hash table]]s mapping type-{{mono|''K''}} keys to type-{{mono|''V''}} values. Hash tables are built into the language, with special syntax and built-in functions. {{mono|chan ''T''}} is a ''channel'' that allows sending values of type ''T'' between [[Go (programming language)#Concurrency|concurrent Go processes]].{{citation needed|date=December 2016}}

Aside from its support for [[#Interfaces|interfaces]], Go's type system is [[nominal type system|nominal]]: the {{mono|type}} keyword can be used to define a new ''named type'', which is distinct from other named types that have the same layout (in the case of a {{mono|struct}}, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly.<ref>{{cite web |url=http://golang.org/ref/spec#Assignability |title=The Go Programming Language Specification |work=golang.org}}</ref> For example, the {{mono|type}} keyword can be used to define a type for [[IPv4]] addresses, based on 32-bit unsigned integers.{{citation needed|date=December 2016}}

<syntaxhighlight lang="go">
type ipv4addr uint32
</syntaxhighlight>

With this type definition, {{mono|ipv4addr(x)}} interprets the {{mono|uint32}} value {{mono|x}} as an IP address. Simply assigning {{mono|x}} to a variable of type {{mono|ipv4addr}} is a type error.{{citation needed|date=December 2016}}

Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.<ref>{{cite web |url=http://golang.org/ref/spec#Constants |title=The Go Programming Language Specification |work=golang.org}}</ref>

[[Subroutine|Function]] types are indicated by the {{mono|func}} keyword; they take zero or more [[parameter (computer programming)|parameter]]s and [[return statement|return]] zero or more values, all of which are typed. The parameter and return values determine a function type; thus, {{mono|func(string, int32) (int, error)}} is the type of functions that take a {{mono|string}} and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type {{mono|error}}.{{citation needed|date=December 2016}}

Any named type has a [[method (computer programming)|method]] set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard.

<syntaxhighlight lang="go">
// ZeroBroadcast reports whether addr is 255.255.255.255.
func (addr ipv4addr) ZeroBroadcast() bool {
    return addr == 0xFFFFFFFF
}
</syntaxhighlight>

Due to nominal typing, this method definition adds a method to {{mono|ipv4addr}}, but not on {{mono|uint32}}. While methods have special definition and call syntax, there is no distinct method type.<ref>{{cite web |url=http://golang.org/ref/spec#Calls |title=The Go Programming Language Specification |work=golang.org}}</ref>

===={{anchor|Interfaces}} Interface system====
Go provides two features that replace [[inheritance (object-oriented programming)|class inheritance]].{{citation needed|date=December 2016}}

The first is ''embedding'', which can be viewed as an automated form of [[object composition|composition]]{{r|gohotdraw}} or [[delegation (object-oriented programming)|delegation]].<ref name="summerfield">{{cite book |title=Programming in Go: Creating Applications for the 21st Century |first=Mark |last=Summerfield |publisher=Addison-Wesley |year=2012}}</ref>{{rp|255}}

The second are its ''[[protocol (object-oriented programming)|interface]]s'', which provides [[runtime polymorphism]].<ref name="balbaert">{{cite book |title=The Way to Go: A Thorough Introduction to the Go Programming Language |first=Ivo |last=Balbaert |publisher=iUniverse |year=2012}}</ref>{{rp|266}} Interfaces are a class of types and provide a limited form of [[structural type system|structural typing]] in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. Go interfaces were designed after [[protocol (object-oriented programming)|protocol]]s from the Smalltalk programming language.<ref>{{cite web |url=https://talks.golang.org/2015/gophercon-goevolution.slide#19 |title=The Evolution of Go |website=talks.golang.org |access-date=March 13, 2016}}</ref> Multiple sources use the term [[duck typing]] when describing Go interfaces.<ref>{{cite web |url=http://www.drdobbs.com/architecture-and-design/duck-typing-and-the-go-programming-langu/228701527 |title=Duck Typing and the Go Programming Language |last=Diggins |first=Christopher |publisher=[[Dr. Dobb's Journal|Dr. Dobb's]] |date=November 24, 2009 |accessdate=March 10, 2016 }}</ref><ref>{{cite web |url=https://medium.com/@matryer/golang-advent-calendar-day-one-duck-typing-a513aaed544d#.ebm7j81xu |title=Duck typing in Go |last=Ryer |first=Mat |date=December 1, 2015 |accessdate=March 10, 2016}}</ref> Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Since conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term ''structural typing''.<ref>{{cite web|url=https://golang.org/doc/faq|title=Frequently Asked Questions (FAQ) - The Go Programming Language|website=golang.org}}</ref>

The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example,
if {{mono|Shape}}, {{mono|Square}} {{mono|and Circle}} are defined as:

<syntaxhighlight lang="go">
import "math"

type Shape interface {
    Area() float64
}

type Square struct { // Note: no "implements" declaration
    side float64
}

func (sq Square) Area() float64 { return sq.side * sq.side }

type Circle struct { // No "implements" declaration here either
    radius float64
}

func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) }
</syntaxhighlight>

Both a {{mono|Square}} and a {{mono|Circle}} are implicitly a {{mono|Shape}} and can be assigned to a {{mono|Shape}}-typed variable.{{r|balbaert}}{{rp|263–268}} In formal language, Go's interface system provides [[structural type system|structural]] rather than [[nominal type system|nominal]] typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.{{r|balbaert}}{{rp|270}}

The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of {{mono|Reader}} and {{mono|Writer}}.{{r|balbaert}}{{rp|282–283}}

Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the ''type assertion'',<ref>{{cite web|url=http://golang.org/ref/spec#Type_assertions|title=The Go Programming Language Specification|work=golang.org}}</ref> which checks against a single potential type, and the ''type switch'',<ref>{{cite web |url=http://golang.org/ref/spec#Type_switches |title=The Go Programming Language Specification |work=golang.org}}</ref> which checks against multiple types.{{citation needed|date=December 2016}}

The ''empty interface'' <code>interface{}</code> is an important base case because it can refer to an item of ''any'' concrete type. It is similar to the {{mono|Object}} class in [[Java (programming language)|Java]] or [[C Sharp (programming language)|C#]] and is satisfied by any type, including built-in types like {{mono|int}}.{{r|balbaert}}{{rp|284}} Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the <code>interface{}</code> value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's <code>reflect</code> package.<ref>[http://golang.org/pkg/reflect/#ValueOf reflect.ValueOf(i interface{})] converts an <code>interface{}</code> to a <code>reflect.Value</code> that can be further inspected</ref> Because <code>interface{}</code> can refer to any value, it is a limited way to escape the restrictions of static typing, like <code>void*</code> in C but with additional run-time type checks.{{citation needed|date=December 2016}}

Interface values are implemented using pointer to data and a second pointer to run-time type information.<ref>{{cite web |url=http://research.swtch.com/interfaces |title=Go Data Structures: Interfaces |accessdate=November 15, 2012}}</ref> Like some other types implemented using pointers in Go, interface values are <code>nil</code> if uninitialized.<ref>{{cite web |url=http://golang.org/ref/spec#Interface_types |title=The Go Programming Language Specification |work=golang.org}}</ref>

===Package system===
In Go's package system, each package has a path (e.g., <code>"compress/bzip2"</code> or <code>"golang.org/x/net/html"</code>) and a name (e.g., <code>bzip2</code> or <code>html</code>). References to other packages' definitions must ''always'' be prefixed with the other package's name, and only the ''capitalized'' names from other packages are accessible: <code>io.Reader</code> is public but <code>bzip2.reader</code> is not.<ref>{{cite web |url=http://golang.org/doc/go_tutorial.html |title=A Tutorial for the Go Programming Language |work=The Go Programming Language |publisher=Google |accessdate=March 10, 2013 |quote=In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared.}}</ref> The <code>go get</code> command can retrieve packages stored in a remote repository <ref>{{cite web |url=http://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies |title=go - The Go Programming Language |work=golang.org}}</ref> and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.<ref>{{cite web |url=https://golang.org/doc/code.html |title=How to Write Go Code |work=golang.org |quote=The packages from the standard library are given short import paths such as "fmt" and "net/http". For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have a Example account at example.com/user, that should be your base path}}</ref>

Proposals exist to introduce a proper package management solution for Go similar to [[Rust (programming language)|Rust]]'s cargo system or [[Node.js|Node]]'s npm system.<ref>{{cite web |url=https://docs.google.com/document/d/18tNd8r5DV0yluCR7tPvkMTsWD_lYcRO7NhpNSDymRr8/edit?pref=2&pli=1 |title=Go Packaging Proposal Process}}</ref>

==={{anchor|Concurrency}} Concurrency: goroutines and channels===
The Go language has built-in facilities, as well as library support, for writing [[concurrent programming|concurrent program]]s. Concurrency refers not only to CPU parallelism, but also to [[asynchronous I/O|asynchrony]]: letting slow operations like a database or network-read run while the program does other work, as is common in event-based servers.<ref name="concurrency-is-not">Rob Pike, [http://vimeo.com/49718712 Concurrency is not Parallelism]</ref>

The primary concurrency construct is the ''goroutine'', a type of [[light-weight process]]. A function call prefixed with the {{mono|go}} keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of [[thread (computer science)|operating system thread]]s, similar to the scheduling performed in [[Erlang (programming language)|Erlang]].{{r|phrasebook}}{{rp|10}}

While a standard library package featuring most of the classical [[concurrency control]] structures ([[mutex]] locks, etc.) is available,{{r|phrasebook}}{{rp|151–152}} idiomatic concurrent programs instead prefer ''channels'', which provide [[message passing|send message]]s between goroutines.<ref>{{cite web |url=http://golang.org/doc/effective_go.html#sharing |title=Effective Go |work=golang.org}}</ref> Optional buffers store messages in [[FIFO (computing and electronics)|FIFO]] order{{r|summerfield}}{{rp|43}} and allow sending goroutines to proceed before their messages are received.{{citation needed|date=December 2016}}

Channels are typed, so that a channel of type {{mono|chan ''T''}} can only be used to transfer messages of type {{mono|''T''}}. Special syntax is used to operate on them; {{mono|<-ch}} is an expression that causes the executing goroutine to block until a value comes in over the channel {{mono|ch}}, while {{mono|ch <- x}} sends the value {{mono|x}} (possibly blocking until another goroutine receives the value). The built-in {{mono|switch}}-like {{mono|select}} statement can be used to implement non-blocking communication on multiple channels; see [[#Concurrency example|below]] for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.<ref>{{cite web|url=http://golang.org/ref/mem|title=The Go Memory Model|accessdate=April 10, 2017}}</ref>

The existence of channels sets Go apart from [[actor model]]-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.{{r|phrasebook}}{{rp|147}}

From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others.<ref>{{cite web |url=http://talks.golang.org/2012/concurrency.slide |title=Go Concurrency Patterns |work=golang.org}}</ref> Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,<ref>John Graham-Cumming, [http://blog.cloudflare.com/recycling-memory-buffers-in-go Recycling Memory Buffers in Go]</ref> implementing coroutines (which helped inspire the name ''goroutine''),<ref>{{cite web|url=http://golang.org/doc/play/tree.go|title=tree.go|publisher=}}</ref> and implementing iterators.<ref>Ewen Cheslack-Postava, [http://ewencp.org/blog/golang-iterators/ Iterators in Go]</ref>

Concurrency-related structural conventions of Go ([[channel (programming)|channel]]s and alternative channel inputs) are derived from [[C. A. R. Hoare|Tony Hoare's]] [[communicating sequential processes]] model. Unlike previous concurrent programming languages such as [[Occam (programming language)|Occam]] or [[Limbo (programming language)|Limbo]] (a language on which Go co-designer Rob Pike worked),<ref>Brian W. Kernighan, [http://www.vitanuova.com/inferno/papers/descent.html A Descent Into Limbo]</ref> Go does not provide any built-in notion of safe or verifiable concurrency.<ref name="memmodel">{{cite web |url=http://golang.org/doc/go_mem.html |title=The Go Memory Model |publisher=Google |accessdate=January 5, 2011}}</ref> While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see {{slink||Lack of race condition safety}}, below.{{citation needed|date=December 2016}}

====Suitability for parallel programming====
Although Go's concurrency features are not aimed primarily at [[parallel computing|parallel processing]],{{r|concurrency-is-not}} they can be used to program [[shared memory architecture|shared memory]] [[multiprocessing|multi-processor]] machines. Various studies have been done into the effectiveness of this approach.<ref>{{cite conference |last=Tang |first=Peiyi |title=Multi-core parallel programming in Go |conference=Proc. First International Conference on Advanced Computing and Communications |year=2010 |url=http://www.ualr.edu/pxtang/papers/acc10.pdf}}</ref> One of these studies compared the size (in [[lines of code]]) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for [[Chapel (programming language)|Chapel]], [[Cilk]] and [[Intel Threading Building Blocks|Intel TBB]]. The study found that the non-expert tended to write [[fork–join model|divide-and-conquer]] algorithms with one {{mono|go}} statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor. The expert's programs were usually faster, but also longer.<ref>{{cite conference |last1=Nanz |first1=Sebastian |first2=Scott |last2=West |first3=Kaue |last3=Soares Da Silveira |title=Examining the expert gap in parallel programming |conference=Euro-Par 2013 |url=http://se.inf.ethz.ch/people/west/expert-gap-europar-2013.pdf |citeseerx=10.1.1.368.6137}}</ref>

====Lack of race condition safety====
There are no restrictions on how goroutines access shared data, making [[race condition]]s possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.<ref name="memmodel"/> Furthermore, Go's ''internal data structures'' like interface values, slice headers, hash tables, and string headers are not immune to race conditions, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.<ref>Russ Cox, [http://research.swtch.com/gorace Off to the Races]</ref><ref name="SPLASH2012">{{cite web |first=Rob |last=Pike |authorlink=Rob Pike |date=October 25, 2012 |title=Go at Google: Language Design in the Service of Software Engineering |url=http://talks.golang.org/2012/splash.article |publisher=Google, Inc.}} "There is one important caveat: Go is not purely memory safe in the presence of concurrency."</ref> Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called "aliases [[exclusive or|xor]] mutable", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.{{r|phrasebook}}{{rp|155}}

=== Binaries ===
The linker in the gc toolchain creates statically-linked binaries by default therefore all Go binaries include the Go runtime.<ref>https://golang.org/doc/faq</ref><ref>https://hackernoon.com/a-story-of-a-fat-go-binary-20edc6549b97</ref>

===Omissions===
Go deliberately omits certain features common in other languages, including [[inheritance (object-oriented programming)|(implementation)&nbsp;inheritance]], [[generic programming]], [[Assertion (software development)|assertions]],{{efn|Language FAQ "Why does Go not have assertions? …our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting…."<ref name="langfaq"/>}} [[pointer arithmetic]],{{efn|name=noPointerArith|Language FAQ "Why is there no pointer arithmetic? Safety … never derive an illegal address that succeeds incorrectly … using array indices can be as efficient as … pointer arithmetic … simplify the implementation of the garbage collector…."<ref name="langfaq"/>}} [[type conversion#Implicit type conversion|implicit type conversion]]s, [[untagged union]]s,{{efn|Language FAQ "Why are there no untagged unions…? [they] would violate Go's memory safety guarantees."<ref name="langfaq"/>}} and [[tagged union]]s.{{efn|Language FAQ "Why does Go not have variant types? … We considered [them but] they overlap in confusing ways with interfaces…. [S]ome of what variant types address is already covered, … although not as elegantly."<ref name="langfaq"/> (The tag of an interface type<ref>{{cite web |url=https://golang.org/ref/spec#Interface_types |title=Go Programming Language Specification, §Interface types|work=golang.org}}</ref> is accessed with a type assertion<ref>{{cite web |url=https://golang.org/ref/spec#Type_assertion |title=Go Programming Language Specification, §Type assertions|work=golang.org}}</ref>).}} The designers  added only those facilities that all three agreed on.<ref>{{cite web|url=http://www.informit.com/articles/article.aspx?p=1623555|website=informIT|title=All Systems Are Go|date=August 17, 2010|access-date=June 21, 2018}}</ref>

Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of [[protocol (object-oriented programming)|interface]]s to achieve dynamic dispatch{{efn|Questions "How do I get dynamic dispatch of methods?" and "Why is there no type inheritance?" in the language FAQ.<ref name="langfaq"/>}} and [[composition over inheritance|composition]] to reuse code. Composition and [[delegation (programming)|delegation]] are in fact largely automated by {{mono|struct}} embedding; according to researchers Schmager ''et al.'', this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.<ref name="gohotdraw">{{cite conference |last1=Schmager |first1=Frank |first2=Nicholas |last2=Cameron |first3=James |last3=Noble |title=GoHotDraw: evaluating the Go programming language with design patterns |conference=Evaluation and Usability of Programming Languages and Tools |publisher=ACM |year=2010}}</ref>

The designers express an openness to generic programming and note that built-in functions ''are'' in fact type-generic, but these are treated as special cases; Pike calls this a weakness that may at some point be changed.<ref name="append">{{cite web |title=Arrays, slices (and strings): The mechanics of 'append' |first=Rob |last=Pike |website=The Go Blog |url=http://blog.golang.org/slices |date=September 26, 2013 |accessdate=March 7, 2015}}</ref> The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.<ref>{{cite web |title=E2E: Erik Meijer and Robert Griesemer – Going Go |website=Channel 9 |publisher=Microsoft |date=May 7, 2012 |url=http://channel9.msdn.com/Blogs/Charles/Erik-Meijer-and-Robert-Griesemer-Go}}</ref> They are also open to standardizing ways to apply code generation.<ref>Rob Pike, [https://blog.golang.org/generate Generating code]</ref>

Initially omitted, the [[exception handling|exception]]-like {{mono|panic}}/{{mono|recover}} mechanism was eventually added, which the Go authors advise using for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package (but not across package boundaries; there, error returns are the standard API).<ref>[https://code.google.com/p/go-wiki/wiki/PanicAndRecover Panic And Recover], Go wiki</ref><ref>{{cite web |url=http://golang.org/doc/devel/weekly.html#2010-03-30 |title=Weekly Snapshot History|work=golang.org}}</ref><ref>{{cite web |url=https://groups.google.com/group/golang-nuts/browse_thread/thread/1ce5cd050bb973e4 |title=Proposal for an exception-like mechanism |date=March 25, 2010 |work=golang-nuts |accessdate=March 25, 2010}}</ref><ref>{{cite web |url=https://golang.org/doc/effective_go.html#panic |title=Effective Go |work=golang.org}}</ref>

===Criticisms===

Go critics assert that:

* The lack of [[parametric polymorphism]] for [[generic programming]] leads to [[duplicate code|code duplication]] or unsafe [[type conversion]]s and flow disrupting verbosity.<ref name="yager">{{cite web
 | first = Will
 | last = Yager
 | url = http://yager.io/programming/go.html
 | title = Why Go is not Good
 | access-date = 4 November 2018
}}</ref><ref>{{cite web
 | first = Egon
 | last = Elbre
 | url = https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/preview
 | title = Summary of Go Generics discussions
 | access-date = 4 November 2018
}}</ref><ref name="dobronszki">{{cite web
 | first = Janos
 | last = Dobronszki
 | url = http://crufter.com/2014/12/01/everyday-hassles-in-go/
 | title = Everyday Hassles in Go
 | access-date = 4 November 2018
}}</ref><ref>{{cite web 
 | last = Fitzpatrick
 | first = Brad
 | title = Go: 90% Perfect, 100% of the time
 | url = https://talks.golang.org/2014/gocon-tokyo.slide#50
 | accessdate = January 28, 2016
}}</ref>
* Go's ''[[null pointer|nil]]'' combined with the lack of [[algebraic types]] leads to difficulty handling failures and [[Base case (recursion)|base case]]s.<ref name="yager"/><ref name="dobronszki"/>
* Go lacks a number of modern language features, critics believe this leads to more verbose and error prone code, these are features like:
** [[operator overloading]]<ref name="yager"/><ref name="dobronszki"/>
** [[type inference]]<ref name="yager"/>
** [[immutable]] data types<ref name="yager"/>
** [[pattern matching]] data types<ref name="yager"/>

The designers argue these omissions were simplifications that contribute to Go's strength<ref>{{ cite web
 | first = Rob
 | last = Pike
 | url = http://commandcenter.blogspot.de/2012/06/less-is-exponentially-more.html
 | title = Less is exponentially more
 | access-date = 4 November 2018
}}</ref> (See {{section link||Omissions}} above).

==Conventions and code style==
{{OR-section|date=January 2018}}
The Go authors put substantial effort into molding the style and design of Go programs:

* Indentation, spacing, and other surface-level details of code are automatically standardized by the <code>gofmt</code> tool. <code>golint</code> does additional style checks automatically.
* Tools and libraries distributed with Go suggest standard approaches to things like API documentation (<code>godoc</code>),<ref name="eff">{{cite web |url=http://golang.org/doc/effective_go.html |title=Effective Go |work=golang.org}}</ref> testing (<code>go test</code>), building (<code>go build</code>), package management (<code>go get</code>), and so on.
* Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables or imports, and implicit type conversions.
* The ''omission'' of certain features (for example, functional-programming shortcuts like <code>map</code> and Java-style <code>try</code>/<code>finally</code> blocks) tends to encourage a particular explicit, concrete, and imperative programming style.
* On day one the Go team published a collection of Go idioms,<ref name="eff" /> and later also collected code review comments,<ref>{{cite web |title=Code Review Comments |url=https://github.com/golang/go/wiki/CodeReviewComments |accessdate=July 3, 2018}}</ref> talks,<ref>{{cite web |title=Talks |url=https://talks.golang.org/ |accessdate=July 3, 2018}}</ref> and official blog posts<ref>{{cite web |title=Errors Are Values |url=http://blog.golang.org/errors-are-values |accessdate=July 3, 2018}}</ref> to teach Go style and coding philosophy.

==Tools==
Go includes the same sort of debugging, testing, and code-vetting tools as many language distributions. The Go distribution includes, among other tools,

* <code>go build</code>, which builds Go binaries using only information in the source files themselves, no separate makefiles
* <code>go test</code>, for unit testing and microbenchmarks
* <code>go fmt</code>, for formatting code
* <code>go get</code>, for retrieving and installing remote packages
* <code>go vet</code>, a static analyzer looking for potential errors in code
* <code>go run</code>, a shortcut for building and executing code
* <code>godoc</code>, for displaying documentation or serving it via HTTP
* <code>gorename</code>, for renaming variables, functions, and so on in a type-safe way
* <code>go generate</code>, a standard way to invoke code generators

It also includes profiling and debugging support, runtime instrumentation (to, for example, track garbage collection pauses), and a race condition tester.

An ecosystem of third-party tools adds to the standard distribution, such as <code>gocode</code>, which enables code autocompletion in many text editors, <code>goimports</code> (by a Go team member), which automatically adds/removes package imports as needed, and <code>errcheck</code>, which detects code that might unintentionally ignore errors. Plugins exist for adding language support to several text editors. Several [[integrated development environment|IDEs]] are available. For instance, LiteIDE, which is branded as "a simple, open source, cross-platform Go IDE",<ref>{{cite web|url=https://github.com/visualfc/liteide|title=visualfc/liteide|website=GitHub}}</ref> and GoLand, which claims to be "capable and ergonomic."<ref>{{cite web|url=https://www.jetbrains.com/go/|title=GoLand: A Clever IDE to Go by JetBrains|website=JetBrains}}</ref>

==Examples==
===Hello world===
Here is a [[Hello world program]] in Go:

<syntaxhighlight lang="go">
package main

import "fmt"

func main() {
    fmt.Println("Hello, World")
}
</syntaxhighlight>

===Concurrency example===
The following simple program demonstrates Go's [[#Concurrency|concurrency feature]]s to implement an asynchronous program. It launches two "goroutines" (lightweight threads): one waits for the user to type some text, while the other implements a timeout. The {{mono|select}} statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall book).<ref name="phrasebook">{{cite book |title=The Go Programming Language Phrasebook |first=David |last=Chisnall |publisher=Addison-Wesley |year=2012 |url=https://books.google.com/books?id=scyH562VXZUC}}</ref>{{rp|152}}

<syntaxhighlight lang="go">
package main

import (
    "fmt"
    "time"
)

func readword(ch chan string) {
    fmt.Println("Type a word, then hit Enter.")
    var word string
    fmt.Scanf("%s", &word)
    ch <- word
}

func timeout(t chan bool) {
    time.Sleep(5 * time.Second)
    t <- false
}

func main() {
    t := make(chan bool)
    go timeout(t)

    ch := make(chan string)
    go readword(ch)

    select {
    case word := <-ch:
        fmt.Println("Received", word)
    case <-t:
        fmt.Println("Timeout.")
    }
}
</syntaxhighlight>

==Projects ==
{{Primary sources|section|date=November 2015}}
Some notable [[open-source software|open-source]] applications in Go include:<ref>{{Citation|title=avelino/awesome-go: A curated list of awesome Go frameworks, libraries and software|url=https://github.com/avelino/awesome-go|accessdate=January 10, 2018}}</ref>

* [[Caddy (web server)|Caddy]], an open source HTTP/2 web server with automatic HTTPS capability.
* [[CockroachDB]], an open source, survivable, strongly consistent, scale-out SQL database.
* [[Decred]], a [[cryptocurrency]] with on-chain governance integrated into its [[blockchain]].<ref>{{Citation|title=dcrd: Decred daemon in Go (golang)|date=December 18, 2017|url=https://github.com/decred/dcrd|publisher=Decred|accessdate=December 19, 2017}}</ref>
* [[Docker (software)|Docker]], a set of tools for deploying [[Linux]] containers
* [[Ethereum]], The ''go-ethereum'' implementation of the Ethereum Virtual Machine blockchain for the ''Ether'' cryptocurrency <ref>{{Cite web|url=https://github.com/ethereum/go-ethereum|title=Official Go implementation of the Ethereum protocol|publisher=ethereum|website=GitHub}}</ref>
* [[Hugo (software)|Hugo]], a static site generator
* [[InfluxDB]], an open source database specifically to handle time series data with high availability and high performance requirements.
* [[InterPlanetary File System]], a content-addressable, peer-to-peer hypermedia protocol.<ref>{{Cite web|url=https://github.com/ipfs/go-ipfs|title=ipfs/go-ipfs|website=GitHub|language=en|access-date=June 1, 2018}}</ref>
* [[Juju (software)|Juju]], a service orchestration tool by [[Canonical Ltd.|Canonical]], packagers of [[Ubuntu (operating system)|Ubuntu]] Linux
* [[Kubernetes]] container management system
* [[Lightning Network]], a [[bitcoin]] network that allows for fast Bitcoin transactions and scalability.<ref>{{Citation|title=Lightning Developers Network installation guide|url=http://dev.lightning.community/guides/installation/}}</ref>
* [[OpenShift]], a cloud computing platform as a service by [[Red Hat]]
* [[Snappy (package manager)|Snappy]], a package manager for [[Ubuntu Touch]] developed by Canonical.
* [[Syncthing]], an open-source file synchronization client/server application
* [[Terraform (software)|Terraform]], an open-source, multiple [[Cloud computing|cloud]] infrastructure provisioning tool from [[HashiCorp]].

Other notable companies and sites using Go (generally together with other languages, not exclusively) include:<ref>Erik Unger, [https://gist.github.com/ungerik/3731476 The Case For Go]</ref>{{self-published inline|date=November 2015}}<ref>Andrew Gerrand, [http://blog.golang.org/4years Four years of Go], The Go Blog</ref>

* [[Cacoo (software)|Cacoo]], for their rendering of the user dashboard page and microservice using Go and gRPC.<ref>{{Cite news|url=https://cacoo.com/blog/test-driven-development-in-go/|title=Test driven development in Go {{!}} Cacoo|date=July 29, 2016|work=Cacoo|access-date=June 1, 2018|language=en-US}}</ref>
* [[Chango (company)|Chango]], a programmatic advertising company uses Go in its real-time bidding systems.<ref>{{cite web |url=https://github.com/chango/ |title=Chango |work=GitHub}}</ref>
* [[Cloud Foundry]], a [[platform as a service]]{{citation needed|date=July 2016}}
* [[CloudFlare]], for their delta-coding proxy Railgun, their distributed DNS service, as well as tools for cryptography, logging, stream processing, and accessing SPDY sites.<ref>John Graham-Cumming, [http://blog.cloudflare.com/go-at-cloudflare Go at CloudFlare]</ref><ref>John Graham-Cumming, [http://blog.cloudflare.com/what-weve-been-doing-with-go What we've been doing with Go]</ref>
* [[CoreOS]], a Linux-based operating system that uses [[Docker (software)|Docker]] containers<ref>{{cite web |url=https://blog.gopheracademy.com/birthday-bash-2014/go-at-coreos/ |title=Go at CoreOS}}</ref> and [[rkt]] containers.
* [[Couchbase]], Query and Indexing services within the Couchbase Server<ref>{{cite web |url=https://github.com/couchbase |title=Couchbase |work=GitHub}}</ref>
* [[Dropbox (service)|Dropbox]], who migrated some of their critical components from Python to Go<ref>Patrick Lee, [https://tech.dropbox.com/2014/07/open-sourcing-our-go-libraries/ Open Sourcing Our Go Libraries], July 7, 2014.</ref>
* [[Google]], for many projects, notably including download server dl.google.com<ref>{{cite web |url=http://talks.golang.org/2013/oscon-dl.slide |title=dl.google.com: Powered by Go |work=golang.org}}</ref><ref>Matt Welsh, [http://matt-welsh.blogspot.com/2013/08/rewriting-large-production-system-in-go.html Rewriting a Large Production System in Go]</ref><ref>David Symonds, [http://talks.golang.org/2013/highperf.slide High Performance Apps on Google App Engine]</ref>
* [[Heroku]], for Doozer, a lock service{{r|boldly}}
* [[Hyperledger Fabric]], an open source, enterprise-focused distributed ledger project
* [[MercadoLibre]], for several public APIs.{{Citation needed|date=July 2016}}
* [[MongoDB]], tools for administering MongoDB instances<ref>{{cite web |url=https://github.com/mongodb/mongo-tools#building-tools |title=Mongo DB |work=GitHub}}</ref>
* [[Netflix]], for two portions of their server architecture<ref>{{cite web |url=http://techblog.netflix.com/2016/05/application-data-caching-using-ssds.html?m=1 |title=The Netflix Tech Blog: Application data caching using SSDs}}</ref>
* [[Novartis]], for an internal inventory system<ref>{{cite web
|url=https://plus.google.com/114945221884326152379/posts/d1SVaqkRyTL
|title=Google+ post by Don Dwoske
|work=Google+
|language=en-US
|access-date=January 21, 2017
}}</ref>
* [[Nutanix]], for a variety of micro-services in its Enterprise Cloud OS.<ref>{{cite web|url=https://github.com/golang/go/wiki/GoUsers|title=golang/go|website=GitHub}}</ref>
* [[Plug.dj]], an interactive online social music streaming website.<ref>{{cite web |url=https://tech.plug.dj/2015/06/09/search-advances/ |title=Search & Advances |author=Steven Sacks |work=plug.dj tech blog}}</ref>
* [[SendGrid]], a Boulder, Colorado-based transactional email delivery and management service.<ref>{{cite web |url=https://sendgrid.com/blog/convince-company-go-golang/ |title=How to Convince Your Company to Go With Golang |author=Tim Jenkins |work=SendGrid's Email Deliverability Blog}}</ref>
* [[SoundCloud]], for "dozens of systems"<ref>Peter Bourgon, [http://backstage.soundcloud.com/2012/07/go-at-soundcloud/ Go at SoundCloud]</ref>
* [[Splice (platform)|Splice]], for the entire backend (API and parsers) of their online music collaboration platform.<ref>{{cite web |url=http://blog.golang.org/io2014 |title=Go at Google I/O and Gopher SummerFest - The Go Blog |work=golang.org}}</ref>
* [[ThoughtWorks]], some tools and applications for [[continuous delivery]] and instant messages ([[CoyIM]]).<ref>{{cite web |url=https://github.com/twstrike/coyim/ |title=CoyIM |author=TWSTRIKE |work=ThoughtWorks STRIKE team}}</ref>
* [[Twitch.tv]], for their IRC-based chat system (migrated from Python).<ref>Rhys Hiltner, [https://blog.twitch.tv/gos-march-to-low-latency-gc-a6fa96f06eb7#.wykex6pkr Go’s march to low-latency GC], July 5, 2016.</ref>
* [[Uber (company)|Uber]], for handling high volumes of [[Geo-fence|geofence]]-based queries.<ref>{{cite web
|url=https://eng.uber.com/go-geofence/
|title=How We Built Uber Engineering’s Highest Query per Second Service Using Go
|work=Uber Engineering Blog
|language=en-US
|access-date=March 2, 2016
}}</ref>
* [[Zerodha]], for realtime peering and streaming of market data{{Citation needed|date=November 2015}}

==Reception==
The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of [[Standard ML]], calling it "a shame that no popular language has followed [this] particular route".<ref>{{cite news |url=http://www.artima.com/weblogs/viewpost.jsp?thread=274019 |title=Interfaces vs Inheritance (or, watch out for Go!) |last= Simionato |first=Michele |date=November 15, 2009 |publisher=artima |accessdate=November 15, 2009}}</ref>

Dave Astels at [[Engine Yard]] wrote:<ref>{{cite news|url=https://www.engineyard.com/blog/ready-set-go|title=Ready, Set, Go!|last=Astels|first=Dave|date=November 9, 2009|work=|accessdate=November 9, 2009|publisher=engineyard}}</ref>
{{quote |Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the [[syntax (programming languages)|syntax]] is clean and designed to be clear and unambiguous.

Go ''is'' still experimental and still a little rough around the edges.|sign=|source=}}

Go was named Programming Language of the Year by the [[TIOBE Programming Community Index]] in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,<ref>{{cite web |author=jt |title=Google's Go Wins Programming Language Of The Year Award |url=http://jaxenter.com/google-s-go-wins-programming-language-of-the-year-award-10069.html |publisher=jaxenter |accessdate=December 5, 2012}}</ref> surpassing established languages like [[Pascal (programming language)|Pascal]]. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than [[COBOL]] and [[Fortran]].<ref>{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html |title=TIOBE Programming Community Index for June 2015 |date=June 2015 |publisher=TIOBE Software |accessdate=July 5, 2015}}</ref> But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was awarded TIOBE programming language of the year 2016.

[[Bruce Eckel]] has stated:<ref>{{cite web |url=http://www.artima.com/weblogs/viewpost.jsp?thread=333589 |title=Calling Go from Python via JSON-RPC |date=August 27, 2011 |author=Bruce Eckel |accessdate=August 29, 2011}}</ref>
{{quote|The complexity of [[C++]] (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.}}

A 2011 evaluation of the language and its {{mono|gc}} implementation in comparison to C++ ([[GNU Compiler Collection|GCC]]), Java and [[Scala (programming language)|Scala]] by a Google engineer found:

{{quote|Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.|R. Hundt<ref>{{cite conference |last=Hundt |first=Robert |title=Loop recognition in C++/Java/Go/Scala |conference=Scala Days |year=2011 |url=https://days2011.scala-lang.org/sites/days2011/files/ws3-1-Hundt.pdf}}</ref>}}

The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then did optimize the Go code, as well as the C++ code, and got the Go code to run slightly faster than C++ and more than an order of magnitude faster than the code in the paper.<ref>{{cite web |title=Google Go strikes back with C++ bake-off |first=Cade |last=Metz |date=July 1, 2011 |website=[[The Register]] |url=https://www.theregister.co.uk/2011/07/01/go_v_cpluplus_redux/}}</ref>

==Naming dispute==
On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the [[Go! (programming language)|Go! programming language]] (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing.<ref>{{cite news |url=http://www.geek.com/news/google-didnt-google-go-before-naming-their-programming-language-977351/ |title=Google didn't google "Go" before naming their programming language' |last=Brownlee |first=John |date=November 13, 2009}}</ref> McCabe raised concerns that "the 'big guy' will end up steam-rollering over" him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some<ref name="infoweek">{{cite news |url=http://www.informationweek.com/news/software/web_services/showArticle.jhtml?articleID=221601351 |title=Google 'Go' Name Brings Accusations Of Evil' |last=Claburn |first=Thomas |date=November 11, 2009 |publisher=InformationWeek |accessdate=January 18, 2010}}</ref> even saying the issue contradicts Google's motto of: [[Don't be evil]].<ref name="issue9">{{cite web |url=https://code.google.com/p/go/issues/detail?id=9|title=Issue 9 - go&nbsp;— I have already used the name for *MY* programming language |work=Google Code |publisher=[[Google Inc.]] |accessdate=October 12, 2010}}</ref>

On October 12, 2010, the issue was closed by Google developer Russ Cox (@rsc) with the custom status "Unfortunate" accompanied by the following comment: <blockquote>"There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."<ref name="issue9"/></blockquote>

==See also==
{{Portal|Free software}}
* [[Comparison of programming languages]]
* [[Dart (programming language)|Dart]], another programming language developed at [[Google]]
* [[UFCS]], a way of having "open methods" in other languages

==Notes==
{{Notelist}}

==References==
{{Hatnote|This article incorporates material from the [http://golang.org/doc/go_tutorial.html official Go tutorial], which is licensed under the Creative Commons Attribution 3.0 license.}}
{{Reflist}}

==External links==
{{Commons category|Go (programming language)}}
* {{Official website}}

{{Z148}}
{{Prone to spam|date=June 2013}}<!--     {{No more links}}

       Please be cautious adding more external links.

Wikipedia is not a collection of links and should not be used for advertising.

     Excessive or inappropriate links will be removed.

 See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details.

If there are already suitable links, propose additions or replacements on
the article's talk page, or submit your link to the relevant category at
the Open Directory Project (dmoz.org) and link there using {{Dmoz}}.

-->
{{Programming languages}}

{{Google Inc.}}
{{Rob Pike navbox}}
{{Ken Thompson navbox}}

{{Authority control}}

{{Use mdy dates|date=October 2018}}

[[Category:American inventions]]
[[Category:C programming language family]]
[[Category:Concurrent programming languages]]
[[Category:Cross-platform software]]
[[Category:Free compilers and interpreters]]
[[Category:Google software]]
[[Category:Procedural programming languages]]
[[Category:Programming languages created in 2009]]
[[Category:Software using the BSD license]]
[[Category:Statically typed programming languages]]
[[Category:Systems programming languages]]
[[Category:Programming languages]]
[[Category:Go (programming language)| ]]
[[Category:High-level programming languages]]
[[Category:2009 software]]
[[Category:Cross-platform free software]]