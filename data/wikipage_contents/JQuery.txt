{{primary|date=July 2018}}
{{lowercase title}}
{{Infobox software
| name  = jQuery
| logo = [[File:JQuery logo.svg|220px]]
| author = [[John Resig]]
| developer = [https://jquery.org/team/ The jQuery Team]
| released = {{start date and age|2006|08|26}}
| latest release version = 3.3.1
| latest release date   = ({{Start date and age|2018|1|20}})<ref>{{cite web|url=https://blog.jquery.com/2018/01/20/jquery-3-3-1-fixed-dependencies-in-release-tag/|title=jQuery 3.3.1 Released!|publisher=jQuery Foundation|work=jQuery Blog}}</ref>
| latest preview version = 
| latest preview date    =
| programming language   = [[JavaScript]]
| platform = See [[#Browser support|Browser support]]
| genre = [[JavaScript library]]
| license = [[MIT License|MIT]]<ref name="jqorg-license">{{cite web
 | url = https://github.com/jquery/jquery/blob/master/LICENSE.txt
 | title = jQuery Project License 
 | accessdate = 2017-03-11
 | publisher = jQuery Foundation
}}</ref>
| website = {{URL|https://jquery.com}}
| size = {{aligned table|cols=4|class=wikitable|style=margin:0
| {{abbr|ver|version}} | {{abbr|gzip|compressed and gzipped}}
| {{abbr|prod|compressed, production mode}} | {{abbr|dev|uncompressed, development mode}}
| 1.x | 31kb | 90.9kb | 266kb
| 2.x | 27.7kb | 81.6kb | 236kb
| 3.x | 29.9kb | 86.3kb | 263kb
}}
([[Kilobyte#Base 2 definition|KB]])
}}
'''jQuery''' is a [[JavaScript library]] designed to simplify [[HTML]] [[Document Object Model|DOM]] tree traversal and manipulation, as well as [[event handling]], animation, and [[Ajax (programming)|Ajax]].<ref name="jquery.com">{{cite web|url=//jquery.com/|title=jQuery: The write less, do more, JavaScript library|publisher=The jQuery Project|accessdate=29 April 2010}}</ref> It is [[free and open source software|free, open-source software]] using the permissive [[MIT License]].<ref name="jqorg-license"/> [[World Wide Web|Web]] analysis indicates that it is the most widely deployed JavaScript library by a large margin.<ref>{{cite web |url=http://w3techs.com/technologies/overview/javascript_library/all |title=Usage of JavaScript libraries for websites|accessdate=2017-02-11}}</ref><ref name="libscore.com">{{cite web|url=http://libscore.com/#libs|title=Libscore|accessdate=2017-02-11}}</ref>

jQuery's syntax is designed to make it easier to navigate a document, select [[Document Object Model|DOM]] elements, create [[animation]]s, handle [[event (computing)|event]]s, and develop [[Ajax (programming)|Ajax]] applications. jQuery also provides capabilities for developers to create [[plug-in (computing)|plug-in]]s on top of the JavaScript library. This enables developers to create [[abstraction (computer science)|abstraction]]s for low-level interaction and animation, advanced effects and high-level, themeable widgets. The modular approach to the jQuery library allows the creation of powerful [[dynamic web page]]s and Web applications.

The set of [[#Features|jQuery core features]]—DOM element selections, traversal and manipulation—enabled by its ''selector engine'' (named "Sizzle" from v1.3), created a new "programming style", fusing algorithms and DOM data structures. This style influenced the architecture of other [[Comparison of JavaScript frameworks|JavaScript frameworks]] like [[YUI Library|YUI v3]] and [[Dojo Toolkit|Dojo]], later stimulating the creation of the standard ''Selectors API''.<ref>"[http://www.w3.org/TR/selectors-api/#queryselector Selectors API Level 1, W3C Recommendation]" (21 February 2013). This standard turned what was jQuery "helper methods" into JavaScript-native ones, and the wide use of jQuery stimulated the [http://caniuse.com/queryselector fast adoption] of <tt>querySelector/querySelectorAll</tt> into main Web browsers.</ref>

[[Microsoft]] and [[Nokia]] bundle jQuery on their platforms.<ref name="2008-09-28">{{cite web |url=//jquery.com/blog/2008/09/28/jquery-microsoft-nokia/ |title=jQuery, Microsoft, and Nokia |date=2008-09-28 |last=Resig |first=John |publisher=jQuery |work=jQuery Blog |accessdate=2009-01-29 }}</ref> Microsoft includes it with [[Microsoft Visual Studio|Visual Studio]]<ref>{{cite web |url=http://weblogs.asp.net/scottgu/archive/2008/09/28/jquery-and-microsoft.aspx |title=jQuery and Microsoft |last=Guthrie |first=Scott |work=ScottGu's Blog |date=2008-09-28 |accessdate=2009-01-29 }}</ref> for use within Microsoft's [[ASP.NET AJAX]] and [[ASP.NET MVC]] frameworks while Nokia has integrated it into the Web Run-Time widget development platform.<ref>{{cite web|url=http://wiki.forum.nokia.com/index.php/Guarana_UI:_a_jQuery-Based_UI_Library_for_Nokia_WRT|title=Guarana UI: A jQuery Based UI Library for Nokia WRT|work=Forum Nokia|archiveurl=https://web.archive.org/web/20110816054350/http://www.developer.nokia.com/Community/Wiki/Guarana_UI:_a_jQuery-Based_UI_Library_for_Nokia_WRT|archivedate=2009-11-23|deadurl=yes|accessdate=2010-03-30}}</ref>

==Overview==
jQuery, at its core, is a [[Document Object Model]] (DOM) manipulation library. The DOM is a tree-structure representation of all the elements of a Web page. jQuery simplifies the syntax for finding, selecting, and manipulating these DOM elements. For example, jQuery can be used for finding an element in the document with a certain property (e.g. all elements with an [[HTML element#heading|h1]] tag), changing one or more of its attributes (e.g. color, visibility), or making it respond to an event (e.g. a mouse click).

jQuery also provides a paradigm for event handling that goes beyond basic DOM element selection and manipulation. The event assignment and the event callback function definition are done in a single step in a single location in the code. jQuery also aims to incorporate other highly used JavaScript functionality (e.g. fade ins and fade outs when hiding elements, animations by manipulating [[Cascading Style Sheets|CSS]] properties).

The principles of developing with jQuery are:
* Separation of JavaScript and HTML: The jQuery library provides simple syntax for adding [[Event (computing)|event]] handlers to the [[Document Object Model|DOM]] using JavaScript, rather than adding [[HTML attribute#Event attributes|HTML event attributes]] to call JavaScript functions. Thus, it encourages developers to [[Separation of concerns|completely separate]] JavaScript code from HTML markup.
* Brevity and clarity: jQuery promotes brevity and clarity with features like "chainable" functions and shorthand function names.
* Elimination of cross-browser incompatibilities: The JavaScript engines of different browsers differ slightly so JavaScript code that works for one browser may not work for another. Like other JavaScript toolkits, jQuery handles all these cross-browser inconsistencies and provides a consistent interface that works across different browsers.
* Extensibility: New events, elements, and methods can be easily added and then reused as a plugin.

==History==
jQuery was originally created in January 2006 at [[BarCamp]] NYC by [[John Resig]], influenced by Dean Edwards' earlier [[cssQuery]] library.<ref>{{cite book | last=York | first=Richard | title=Beginning JavaScript and CSS Development with jQuery | page=28 | publisher=Wiley | isbn=978-0-470-22779-4 | year=2009 | url=//books.google.com/books?id=L9otyT4crSQC&pg=PA515}}</ref><ref>{{cite web
| url=http://www.slideshare.net/jeresig/history-of-jquery
| title=History of jQuery
| date=2007-10-31
| last=Resig|first=John
| accessdate=2017-01-28}}</ref> It is currently maintained by a team of developers led by Timmy Willison (with the jQuery selector engine, Sizzle, being led by Richard Gibson). {{Citation needed|date=August 2018}}

jQuery was originally licensed under the [[CC BY-SA 2.5]], and [[Software relicensing|relicensed]] to the [[MIT license]] in 2006.<ref>[https://blog.jquery.com/2006/05/27/jquery-under-the-mit-license/ jquery-under-the-mit-license] on jquery.org (2006)</ref> At the end of 2006, it was [[dual-license]]d under [[GPL]] and MIT licenses.<ref>[https://web.archive.org/web/20100301130833/http://jquery.org/license license] on jquery.org (archived 2010)</ref> As this led to some confusion, in 2012 the GPL was dropped and is now only licensed under the MIT license.<ref>[https://blog.jquery.com/2012/09/10/jquery-licensing-changes/ jquery-licensing-changes] on jquery.org (2012)</ref> 

In 2015, jQuery was used on 63% of the top 1 million websites (according to [[BuiltWith]]), and 17% of all Internet websites.<ref>{{Cite web|url=https://www.maxcdn.com/blog/maxscale-jquery/|title=Handling 15,000 requests per second: The Growth Behind jQuery|last=|first=|date=20 June 2015|website=www.maxcdn.com|publisher=[[MaxCDN]]|language=en-US|archive-url=|archive-date=|dead-url=|access-date=2018-07-02}}</ref> As of June 2018, jQuery is used on 73% of the top 1 million websites, and by 22.4% of all websites (according to BuiltWith).<ref>{{Cite web|url=https://trends.builtwith.com/javascript/jQuery|title=jQuery Usage Statistics|website=trends.builtwith.com|language=en|access-date=2018-07-02}}</ref>

==Features==
jQuery includes the following features:
* [[Document Object Model|DOM]] element selections using the multi-browser open source selector engine ''Sizzle'', a spin-off of the jQuery project<ref>{{cite web |title=jQuery 1.3 and the jQuery Foundation |url=https://blog.jquery.com/2009/01/14/jquery-13-and-the-jquery-foundation/ |last=Resig |first=John |date=2009-01-14 |work=jQuery Blog | accessdate=2009-05-04 }}</ref>
* DOM manipulation based on CSS selectors that uses elements' names and attributes, such as id and class, as criteria to select nodes in the DOM
* Events
* Effects and animations
* [[Ajax (programming)|Ajax]]
* [[Futures and promises|Deferred and Promise]] objects to control asynchronous processing
* [[JSON]] parsing
* [[Extensibility]] through plug-ins
* Utilities, such as feature detection
* Compatibility methods that are natively available in modern browsers, but need fallbacks for older browsers, such as <code>jQuery.inArray()</code> and <code>jQuery.each()</code>.
*[[Cross-browser]] support

===Browser support===
jQuery 3.0 & newer supports "current&minus;1 versions" (meaning the current stable version of the browser and the version that preceded it) of [[Firefox]] (and ESR), [[Google Chrome|Chrome]], [[Safari (web browser)|Safari]], and [[Microsoft Edge|Edge]] as well as [[Internet Explorer]] [[Internet Explorer 9|9]] & newer. On mobile it supports [[iOS]] 7 & newer and [[Android (operating system)|Android]] 4.0 & newer.<ref>[//jquery.com/browser-support/ Browser Support | jQuery]</ref>

==Distribution==
The jQuery library is typically distributed as a single JavaScript file that defines all its interfaces, including DOM, Events, and Ajax functions. It can be included within a Web page by linking to a local copy, or by linking to one of the many copies available from public servers. jQuery has a [[content delivery network]] (CDN) hosted by MaxCDN.<ref>{{cite web|url=https://code.jquery.com/|title=jQuery CDN|first=jQuery Foundation -|last=jquery.org|publisher=}}</ref> Google and Microsoft host the library as well.<ref>{{cite web|url=https://code.google.com/apis/ajaxlibs/documentation/#jquery |title=Google Libraries API - Developer's Guide |publisher=code.google.com |date= |accessdate=March 11, 2012}}</ref><ref>{{cite web | url=http://www.asp.net/ajaxlibrary/cdn.ashx | title=Microsoft Ajax Content Delivery Network | publisher=Microsoft Corporation | work=ASP.net | accessdate=June 19, 2012}}</ref>

Example of linking a copy of the library locally (from the same server that hosts the Web page):

<source lang=html5>
<script src="jquery.js"></script>
</source>

Example of linking a copy of the library from jQuery's public CDN:

<source lang=html5>
<script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
</source>

== Interface ==

===Functions===

jQuery provides two kinds of [[Subroutine|functions]], [[Method (computer programming)|static utility functions]] and jQuery [[Method (computer programming)|object methods]]. Each has its own usage style.

Both are accessed through jQuery's main identifier: <code>jQuery</code>. This identifier has an alias named <code>$</code><ref>{{Cite web|url=https://api.jquery.com/jQuery/|title=jQuery() {{!}} jQuery API Documentation|last=js.foundation|first=JS Foundation -|website=api.jquery.com|language=en-US|access-date=2018-07-02}}</ref>. All functions can be accessed through either of these two names.

==== jQuery methods ====
The <code>jQuery</code> function is a [[Factory method pattern|factory]] for creating a jQuery object that represents one or more DOM nodes. jQuery objects have methods to manipulate these nodes. These methods (sometimes called ''commands)'', are [[method chaining|''chainable'']] as each method also returns a jQuery object.

Access to and manipulation of multiple DOM nodes in jQuery typically begins with calling the <code lang="jQuery">$</code> function with a CSS selector string. This returns a jQuery object referencing all the matching elements in the [[HTML]] page. <code lang="jQuery">$("div.test")</code>, for example, returns a jQuery object with all the <code lang="html5">div</code> elements of class <code lang="html5">test</code>. This node set can be manipulated by calling methods on the returned jQuery object.

==== Static utilities ====
These are utility functions and do not directly act upon a jQuery object. They are accessed as static methods on the jQuery or $ identifier. For example, <code>$.ajax()</code> is a static method.

===No-conflict mode===
jQuery provides a <code>$.noConflict()</code> function, which relinquishes control of the <code>$</code> name. This is useful if jQuery is used on a Web page also linking another library that demands the  <code>$</code> symbol as its identifier. In no-conflict mode, developers can use <code>jQuery</code> as a replacement for <code>$</code> without losing functionality.<ref>{{cite web|url=//api.jquery.com/jquery.noconflict/| title=jQuery.noConflict() jQuery API Documentation}}</ref>

===Typical start-point===

Typically, jQuery is used by putting initialization code and event handling functions in <code lang="jQuery">$(''handler'')</code>. This is triggered by jQuery when the browser has finished constructing the DOM for the current Web page.

<syntaxhighlight lang="javascript">
$(function () {
        // This anonymous function is called when the page has completed loading.
        // Here, one can place code to create jQuery objects, handle events, etc.
});
</syntaxhighlight>

or

<syntaxhighlight lang="javascript">
$(fn); // The function named fn, defined elsewhere, is called when the page has loaded.
</syntaxhighlight>

Historically, <code lang="javascript">$(document).ready(callback)</code> has been the de-facto idiom for running code after the DOM is ready. However, since jQuery 3.0, developers are encouraged to use the much shorter <code lang="javascript">$(handler)</code> signature instead.<ref name="howToUseReady">{{cite web|url=https://jquery.com/upgrade-guide/3.0/#deprecated-document-ready-handlers-other-than-jquery-function|title=jQuery Core 3.0 Upgrade Guide - jQuery|first=jQuery Foundation -|last=jquery.org|publisher=}}</ref> 

===Chaining===

jQuery object methods typically also return a jQuery object, which enables the use of ''method chains'':

<source lang="javascript">
$('div.test')
  .on('click', handleTestClick)
  .addClass('foo');
</source>
This line finds all <code lang="HTML">div</code> [[HTML element|element]] with class attribute <code lang="HTML">test</code> , then registers an event handler on each element for the "click" event, then adds the class attribute <code lang="HTML">foo</code> to each element.

Certain jQuery object methods retrieve specific values (instead of modifying state). An example of this is the <code>val()</code> method, which returns the current value of a [[Text box|text input]] element. In these cases, a statement such as <code lange="jQuery">$('#user-email').val()</code> cannot be used for chaining as the return value does not reference a jQuery object.

===Creating new DOM elements===
Besides accessing existing DOM nodes through jQuery, it is also possible to create new DOM nodes, if the string passed as the argument to $() factory looks like HTML. For example, the below code finds an HTML <code lang="jQuery">select</code> element, and creates a new <code lang="jQuery">option</code> element with value "VAG" and label "Volkswagen", which is then appended to the [[Drop-down list|select menu]]:
<source lang="javascript">
$('select#car-brands')
  .append($('<option>')
    .attr({ value: 'VAG' })
    .text('Volkswagen')
  );
</source>

===Ajax===

It is possible to make [[Ajax (programming)|Ajax]] requests (with [[cross-browser]] support) with <code lang="jQuery">$.ajax()</code> to load and manipulate remote data.
<source lang="javascript">
$.ajax({
  type: 'POST',
  url: '/process/submit.php',
  data: {
    name : 'John',
    location : 'Boston',
  },
}).then(function(msg) {
  alert('Data Saved: ' + msg);
}).catch(function(xmlHttpRequest, statusText, errorThrown) {
  alert(
    'Your form submission failed.\n\n'
      + 'XML Http Request: ' + JSON.stringify(xmlHttpRequest)
      + ',\nStatus Text: ' + statusText
      + ',\nError Thrown: ' + errorThrown);
});
</source>

This example posts the data <code>name=John</code> and <code>location=Boston</code> to <code>/process/submit.php</code> on the server. When this request finishes the success function is called to alert the user. If the request fails it will alert the user to the failure, the status of the request, and the specific error.

The above example uses the  <code>.then()</code> and <code>.catch()</code> methods to register callbacks that run when the response has completed. These [[Futures and promises|promise callbacks]] must be used due to the asynchronous nature of [[Ajax (programming)|Ajax]] requests.

== jQuery plug-ins ==
jQuery's architecture allows developers to create [[Plug-in (computing)|plug-in]] code to extend its function. There are thousands of jQuery plug-ins available on the Web<ref name="plugins.jquery.com">{{cite web|title=Plugins|url=http://plugins.jquery.com/|publisher=The jQuery Project|accessdate=26 August 2010}}</ref> that cover a range of functions, such as Ajax helpers, [[Web service]]s, datagrids, dynamic lists, [[XML]] and [[XSLT]] tools, [[drag and drop]], events, [[HTTP cookie|cookie]] handling, and [[modal window]]s.

An important source of jQuery plug-ins is the plugins subdomain of the jQuery Project website.<ref name="plugins.jquery.com"/> The plugins in this subdomain, however, were accidentally deleted in December 2011 in an attempt to rid the site of spam.<ref>{{cite web|url=https://blog.jquery.com/2011/12/08/what-is-happening-to-the-jquery-plugins-site/#pluginstldr|title=What Is Happening To The jQuery Plugins Site?|work=jQuery Blog|accessdate=22 April 2015}}</ref> The new site is a [[GitHub]]-hosted repository, which required developers to resubmit their plugins and to conform to new submission requirements.<ref>{{cite web|url=https://github.com/jquery/plugins.jquery.com|title=jquery/plugins.jquery.com|work=GitHub|accessdate=22 April 2015}}</ref> jQuery provides a "Learning Center" that can help users understand JavaScript and get started developing jQuery plugins.<ref>{{cite web|title=jQuery Learning Center|url=//learn.jquery.com/|publisher=jQuery Foundation |accessdate=2014-07-02}}</ref>

==Release history==
{| class="wikitable sortable"
|-
! Version number
! Release date
! Latest update
! Size Prod (KB)
! Additional notes
|-
| 1.0
| {{start date|2006|08|26}}
|
|
| First stable release
|-
| 1.1
| {{start date|2007|01|14}}
|
|
|
|-
| 1.2
| {{start date|2007|09|10}}
| 1.2.6
| 54
|
|-
| 1.3
| {{start date|2009|01|14}}
| 1.3.2
| 55.9
| Sizzle Selector Engine introduced into core
|-
| 1.4
| {{start date|2010|01|14}}
| 1.4.4
| 76
|
|-
| 1.5
| {{start date|2011|01|31}}
| 1.5.2
| 83
| Deferred callback management, ajax module rewrite
|-
| 1.6
| {{start date|2011|05|03}}
| 1.6.4
| 89
| Significant performance improvements to the attr() and val() functions
|-
| 1.7
| {{start date|2011|11|03}}
| 1.7.2 ({{start date|2012|03|21}})
| 92
| New Event APIs: .on() and .off(), while the old APIs are still supported.
|-
| 1.8
| {{start date|2012|08|09}}
| 1.8.3 ({{start date|2012|11|13}})
| 91.4
| Sizzle Selector Engine rewritten, improved animations and $(html, props) flexibility.
|-
| 1.9
| {{start date|2013|01|15}}
| 1.9.1 ({{release date|2013|02|04}})
| 90
| Removal of deprecated interfaces and code cleanup
|-
| 1.10
| {{start date|2013|05|24}}
| 1.10.2 ({{start date|2013|07|03}})
| 91
| Incorporated bug fixes and differences reported from both the 1.9 and 2.0 beta cycles
|-
| 1.11
| {{start date|2014|01|24}}
| 1.11.3 ({{start date|2015|04|28}})
| 95.9
|
|-
| 1.12
| {{start date|2016|01|08}}
| 1.12.4 ({{start date|2016|05|20}})
| 95
|
|-
| 2.0
| {{start date|2013|04|18}}
| 2.0.3 ({{start date|2013|07|03}})
| 81.1
| Dropped IE 6–8 support for performance improvements and reduction in filesize
|-
| 2.1
| {{start date|2014|01|24}}
| 2.1.4 ({{start date|2015|04|28}})
| 82.4
|
|-
| 2.2
| {{start date|2016|01|08}}
| 2.2.4 ({{start date|2016|05|20}})
| 85.6
|
|-
| 3.0
| {{start date|2016|6|9}}<ref>{{cite web|url=https://www.infoq.com/news/2016/06/jQuery-3|title=Long-awaited jQuery 3.0 Brings Slim Build|last=Chesters|first=James|date=2016-06-15|publisher=infoq.com|accessdate=2017-01-28}}</ref>
| 3.0.0 ({{start date|2016|6|9}})
| 86.3
| Promises/A+ support for Deferreds, $.ajax and $.when, .data() HTML5-compatible
|-
| 3.1
| {{start date|2016|7|7}}
| 3.1.1 ({{start date|2016|9|23}})
| 86.3
| jQuery.readyException added, ready handler errors are now not silenced
|-
| 3.2
| {{start date|2017|3|16}}<ref>{{cite web|title=jQuery 3.2.0 Is Out!|work=jQuery Blog|url=https://blog.jquery.com/2017/03/16/jquery-3-2-0-is-out/|accessdate=12 March 2018|date=16 March 2017}}</ref>
| 3.2.1 ({{start date|2017|3|20}})
| 84.6
| Added support for retrieving contents of <code><nowiki><template></nowiki></code> elements, and deprecation of various old methods.
|-
| 3.3
| {{start date|2018|1|19}}
| 3.3.1 ({{start date|2018|1|20}})
| 84.8
| Deprecation of old functions, functions that accept classes now also support them in array format.
|}

==Testing framework==
[[QUnit]] is a [[test automation framework]] used to test the jQuery project. The jQuery team developed it as an in-house unit testing library.<ref name="qunit-history">{{Cite web|url = http://qunitjs.com/#History|title = History|date = |accessdate = 2014-07-02|website = qunitjs.com|publisher = |last = |first = }}</ref> The jQuery team uses it to test its code and plugins, but it can test any generic JavaScript code, including server-side JavaScript code.<ref name="qunit-history"/>

As of 2011, the jQuery Testing Team uses [[QUnit]] with [[TestSwarm]] to test each jQuery codebase release.<ref>{{cite web|url=http://jquerytesting.pbworks.com/w/page/41556026/FrontPage|title=jQuery Testing Team Wiki|publisher=}}</ref>

==See also==
{{Portal|Free software}}
* [[Comparison of JavaScript frameworks]]
* [[jQuery Mobile]]
* [[jQuery UI]]
* [[Globalize]]

==References==
{{Reflist|2}}

==Further reading==
* {{cite video
 | url = https://www.youtube.com/watch?v=m5J4Yl0RV7w
 | title = John Resig: Advancing JavaScript with Libraries
 | people = John Resig (speaker)
 | format = YouTube video
 | publisher = YUI Theater
 | date = 2007-04-13
 | accessdate = 2018-01-09
}}
* {{cite web
 | title = JavaScript, .Net developers aided in separate project
 | last = Krill | first = Paul
 | work = [[InfoWorld]]
 | url = http://www.infoworld.com/d/developer-world/javascript-net-developers-aided-in-separate-projects-531
 | date = 2006-08-31
 | accessdate = 2009-05-04
}}
* {{cite web
 | title = jQuery Eases JavaScript, AJAX Development
 | last = Taft | first = Darryl K.
 | work = [[eWeek]]
 | url=http://www.eweek.com/c/a/Application-Development/jQuery-Eases-JavaScript-AJAX-Development/
 | date = 2006-08-30
 | accessdate = 2009-05-04
}}

==External links==
{{Commons category|JQuery}}
* {{Official website|//jquery.com}}

{{ECMAScript}}
{{Application frameworks}}
{{Widget toolkits}}

{{Authority control}}

{{DEFAULTSORT:Jquery}}
[[Category:2006 software]]
[[Category:Ajax (programming)]]
[[Category:Free software programmed in JavaScript]]
[[Category:JavaScript libraries]]
[[Category:Software using the MIT license]]
[[Category:Web development]]
[[Category:Web frameworks]]