{{primary sources|date=September 2015}}
{{Infobox software
| name = Node.js
| logo = [[File:Node.js logo.svg|frameless]]
| author = [[Ryan Dahl]]
| developer = [[Joyent]]
| released = {{Start date and age|2009|05|27}}<ref>{{cite web | url=https://github.com/joyent/node/tags?after=v0.0.4 | accessdate=2 August 2014|title=node-v0.x-archive on GitHub}}</ref>
| latest release version = 11.4.0
| latest release date = {{Start date and age|2018|12|07}}<ref>{{cite web|url=https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V11.md|accessdate=23 October 2018|title= Node.js 11 ChangeLog|via=[[GitHub]]}}</ref>
| programming language = [[C (programming language)|C]], [[C++]], [[JavaScript]]
| operating system = [[Linux]], [[macOS]], [[Microsoft Windows]], [[SmartOS]], [[FreeBSD]], [[IBM AIX]]<ref name="supportedOS">{{cite web|url=https://github.com/nodejs/node/blob/master/BUILDING.md|title=nodejs/node|website=GitHub}}</ref>
| genre = [[Runtime system|Run-time environment]]
| license = [[MIT license]]<ref>{{cite web|title=node/LICENSE at master|url=https://github.com/nodejs/node/blob/master/LICENSE|website=GitHub|publisher=Node.js Foundation|accessdate=17 September 2018|date=17 September 2018}}</ref><ref>{{cite web|title=The MIT License|url=https://opensource.org/licenses/MIT|website=Open Source Initiative|accessdate=17 September 2018|date=17 September 2018}}</ref>
}}

'''Node.js''' is an [[Open-source software|open-source]], [[cross-platform]] [[JavaScript]] [[Runtime system|run-time environment]] that executes JavaScript code outside of a browser. Typically, JavaScript is used primarily for [[client-side scripting]], in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript to write Command Line tools and for [[server-side scripting]]â€”running scripts server-side to produce [[dynamic web page]] content ''before'' the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,<ref>{{cite web|url=https://www.ibm.com/developerworks/community/blogs/gcuomo/entry/javascript_everywhere_and_the_three_amigos?lang=en|title=JavaScript Everywhere and the Three Amigos (Into the wild BLUE yonder!)|first=|last=gcuomo|date=24 October 2013|website=www.ibm.com}}</ref> unifying [[web application]] development around a single programming language, rather than different languages for server side and client side scripts.

Though <code>.js</code> is the conventional [[filename extension]] for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an [[event-driven architecture]] capable of [[asynchronous I/O]]. These design choices aim to optimize [[throughput]] and [[scalability]] in web applications with many input/output operations, as well as for [[real-time Web]] applications (e.g., [[real-time communication]] programs and [[browser game]]s).<ref name="readwrite">{{cite web | url = http://readwrite.com/ | title = What You Need To Know About Node.js | date = 2013-11-07 | author = [http://readwrite.com/author/lauren-orsini Laurent Orsini] | publisher = readwrite | archiveurl = http://readwrite.com/2013/11/07/what-you-need-to-know-about-nodejs | archivedate = 2013-11-07 | accessdate = 2016-01-22}}</ref> 

The Node.js [[distributed development]] project, governed by the Node.js Foundation,<ref>{{cite web|url= https://nodejs.org/foundation/|title= Node.js Foundation - Node.js|publisher= |accessdate= 4 July 2015}}</ref> is facilitated by the [[Linux Foundation]]'s Collaborative Projects program.<ref>{{cite web|url= http://collabprojects.linuxfoundation.org/|title= Linux Foundation Collaborative Projects|publisher= |accessdate= 4 July 2015}}</ref> 

Corporate users of Node.js software include [[GoDaddy]],<ref>[https://venturebeat.com/2015/02/10/why-godaddys-nodejitsu-deal-is-great-for-node-js/ Why GoDaddy's Nodejitsu deal is great for Node.js], [[VentureBeat]], February 10, 2015</ref> [[Groupon]],<ref>{{cite web|last= Geitgey|first= Adam|title= I-Tier: Dismantling the Monoliths|url= https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/|publisher= Groupon|accessdate= 30 April 2014|date= 30 October 2013}}</ref> [[IBM]],<ref>{{cite web|url= http://www.ibm.com/bluemix|title= IBM Bluemix|publisher= |accessdate= 4 July 2015}}</ref> [[LinkedIn]],<ref name="vbliipad">{{cite web | url= https://venturebeat.com/2012/05/02/linkedin-ipad-app-engineering/ | title= You'll never believe how LinkedIn built its new iPad app | publisher= VentureBeat | date= May 2, 2012 | accessdate= May 10, 2012}}</ref><ref>{{cite web | url= http://engineering.linkedin.com/nodejs/blazing-fast-nodejs-10-performance-tips-linkedin-mobile | title= Blazing fast node.js: 10 performance tips from LinkedIn Mobile | accessdate= 7 April 2015}}</ref> [[Microsoft]],<ref name="guardianMS">{{cite news | url= https://www.theguardian.com/technology/blog/2011/nov/09/programming-microsoft | title= Here's why you should be happy that Microsoft is embracing Node.js | publisher= The Guardian | date= November 9, 2011 | accessdate= May 10, 2012 | location= London | first= Matthew | last= Baxter-Reynolds}}</ref><ref>{{cite web | url= http://www.hanselman.com/blog/WebMatrix2FrontEndWebDevelopersTakeNoteASPNETPHPNodejsAndMore.aspx | title= WebMatrix - Front End Web Developers take note (ASP.NET, PHP, node.js and more) | accessdate= 2 August 2014}}</ref> [[Netflix]],<ref>[http://techblog.netflix.com/2014/11/nodejs-in-flames.html Node.js in Flames] November 19, 2014</ref> [[PayPal]],<ref>{{cite web | url= https://www.youtube.com/watch?v=tZWGb0HU2QM | title= Clash of the Titans: Releasing the Kraken, NodeJS @paypal | publisher= fluentconf.com | date= May 28, 2013 | accessdate= September 11, 2013}}</ref><ref>{{cite web | url= https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node | title= All such companies and their products in which Node.js is used | accessdate= 2 August 2014}}</ref> [[Rakuten]], [[SAP SE|SAP]],<ref name="sapappbuilder">{{cite web|url=https://web.archive.org/web/20140515000000*/http://help.sap.com/appbuilder|title=SAP AppBuilder|last=|first=|date=March 10, 2014|website=|publisher=SAP|archive-url=https://web.archive.org/web/20140212112431/http://help.sap.com/appbuilder|archive-date=February 12, 2014|dead-url=|accessdate=October 10, 2018}}</ref> [[Voxer]],<ref>[https://www.theregister.co.uk/2011/03/01/the_rise_and_rise_of_node_dot_js/ The Node Ahead: JavaScript leaps from browser into future], [[The Register]], March 1, 2011</ref> [[Walmart]],<ref name="vbwalmart">{{cite web | url= https://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/ | title= Why Walmart is using Node.js | publisher= VentureBeat | date= January 24, 2012 | accessdate= May 10, 2012}}</ref> and [[Yahoo!]].<ref>{{cite web | url= https://codebrahma.com/node-js-development-company// | title= Why You Really Need (A) node.js development services| publisher= codebrahma | date= January 10, 2018 | accessdate= January 10, 2018}}</ref>

== History ==
[[File:Ryan Dahl.jpg|thumb|Ryan Dahl, creator of Node.js, in 2010]]
Node.js was originally written by [[Ryan Dahl]] in 2009,<ref name="training.com">{{cite web|title=About Node.js, and why you should add Node.js to your skill set?|url=http://blog.training.com/2016/09/about-nodejs-and-why-you-should-add.html|website=Training.com|publisher=Training.com|accessdate=23 October 2016|ref=training.com}}</ref> about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.<ref>{{Cite news|url=https://www.cnet.com/news/netscape-opens-intranet-attack/|title=Netscape opens intranet attack|work=CNET|access-date=2017-04-20|language=en}}</ref> The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by [[Joyent]].<ref name="Google Groups post by Ryan Dahl about Joyent">{{cite web |url= https://groups.google.com/forum/#!topic/nodejs/lWo0MbHZ6Tc|title= Joyent and Node|author= Ryan Dahl|publisher= Google Groups|date= 2010-11-09|accessdate= 2015-02-05}}</ref>

Dahl was inspired to create Node.js after seeing a file upload [[progress bar]] on [[Flickr]]. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.<ref name="readwrite" /><ref>{{cite web|url=http://devopsangle.com/2013/04/01/the-birth-of-node-where-did-it-come-from-creator-ryan-dahl-shares-the-history/|title=The Birth of Node: Where Did it Come From? Creator Ryan Dahl Shares the History|last=Harris|first=Amber|date=April 1, 2012|publisher=Devops Angle|accessdate=26 October 2013}}</ref>

Dahl criticized the limited possibilities of the most popular web server in 2009, [[Apache HTTP Server]], to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.<ref>{{cite web | url=https://belitsoft.com/php-development-services/php7-vs-nodejs |title=PHP 7 vs Node.js? They Can Be Partners, Not Competitors For a Developer! | accessdate=21 December 2016}}</ref>

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.<ref name="b3">[https://books.google.com/books?id=KGt-FxUEj48C&pg=PT24&dq=nodejs&hl=en&sa=X#v=onepage&q=nodejs&f=false Sams Teach Yourself Node.js in 24 Hours], Sams Publishing, 05-Sep-2012</ref><ref>{{cite web|url=http://jsconf.eu/2009/speaker/speakers_selected.html|title=Ryan Dahl at JSConf EU 2009}}</ref><ref>{{cite web|url=https://www.youtube.com/watch?v=ztspvPYybIY|title=Ryan Dahl at JSConf EU 2009 Video}}</ref> Node.js combined [[Google]]'s V8 JavaScript engine, an [[event loop]], and a low-level [[Input/output|I/O]] [[Application programming interface|API]].<ref name="b1">[https://books.google.com/books?id=ZH6bpbcrlvYC&printsec=frontcover&dq=nodejs&hl=en&sa=X#v=onepage&q=nodejs&f=false Professional Node.js: Building JavaScript Based Scalable Software], John Wiley & Sons, 01-Oct-2012</ref>

In January 2010, a [[package manager]] was introduced for the Node.js environment called [[Npm (software)|''npm'']].<ref>{{cite web |url=https://github.com/npm/npm/releases?after=v0.1.1 |title=Earliest releases of npm |website=GitHub |accessdate=27 July 2016}}</ref> The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.<ref name="b1"/>

In June 2011, Microsoft and Joyent implemented a native [[Microsoft Windows|Windows]] version of Node.js.<ref>{{cite web | url=https://nodejs.org/en/blog/uncategorized/porting-node-to-windows-with-microsofts-help/ |title=Porting Node to Windows With Microsoft's Help | accessdate=17 April 2016}}</ref> The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and ''npm'' creator Isaac Schlueter to manage the project.<ref>{{cite web|url=//groups.google.com/forum/#!topic/nodejs/hfajgpvGTLY|title=New gatekeeper|last=Dahl|first=Ryan|accessdate=26 October 2013}}</ref> In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.<ref>{{cite web|url=https://nodejs.org/en/blog/uncategorized/tj-fontaine-new-node-lead/|title=The Next Phase of Node.js|last=Schlueter|first= Isaac|date=January 15, 2014|accessdate=21 January 2014}}</ref>

In December 2014, Fedor Indutny started io.js, a [[Fork (software development)|fork]] of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an [[open governance]] alternative with a separate technical committee.<ref name="Krill, Paul">{{cite web | url=http://www.javaworld.com/article/2855639/open-source-tools/qanda-why-io-js-decided-to-fork-node-js.html | title=Why io.js Decided to Fork Node.js | publisher=JavaWorld | date=Dec 4, 2014 | accessdate=Dec 15, 2014 | author=Krill, Paul}}</ref><ref name="iwtw">[http://www.infoworld.com/article/2855057/application-development/why-iojs-decided-to-fork-nodejs.html Q&A: Why io.js decided to fork Node.js], [[Infoworld]] Tech Watch</ref> Unlike Node.js,<ref>{{cite web | url=https://code.google.com/p/v8/issues/detail?id=3692#c3 | title=Issue 3692: function suddenly becomes undefined | publisher=V8 JavaScript Engine Issues | author=Ben Noordhuis | date=Nov 12, 2014 | accessdate=2 February 2015}}</ref> the authors planned to keep io.js up-to-date with the latest releases of the [[V8 (JavaScript engine)|Google V8]] JavaScript engine.<ref name="Mikeal, Rogers">{{cite web | url=https://medium.com/node-js-javascript/state-of-io-js-2b3094e6f923 | title=State of io.js | date=January 28, 2015 | accessdate=2 February 2015 | author=Mikeal, Rogers}}</ref>

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.<ref>{{cite web|url=https://www.linuxfoundation.org/news-media/announcements/2015/06/nodejs-foundation-advances-community-collaboration-announces-new|title=Node.js Foundation Advances Community Collaboration, Announces New Members and Ratified Technical Governance|publisher=|accessdate=4 July 2015|deadurl=yes|archiveurl=https://web.archive.org/web/20150624075643/http://www.linuxfoundation.org/news-media/announcements/2015/06/nodejs-foundation-advances-community-collaboration-announces-new|archivedate=24 June 2015|df=}}</ref>

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.<ref>{{cite web|url=https://nodejs.org/en/blog/announcements/foundation-v4-announce/|title=Node.js Foundation Combines Node.js and io.js Into Single Codebase in New Release|publisher=|accessdate=28 Jan 2016}}</ref> This brought V8 [[ECMAScript#ES6|ES6]] features into Node.js, and a long-term support release cycle.<ref>{{cite web | url=https://medium.com/node-js-javascript/io-js-week-of-may-15th-9ada45bd8a28 | title=io.js and Node.js merge | accessdate=27 June 2015}}</ref> As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merge.<ref>[https://iojs.org/en/ Io.js, JavaScript I/O], ''"io.js has merged with the Node.js project again. There won't be any further io.js releases. All of the features in io.js are available in Node.js v4 and above."''</ref>

== Overview ==
Node.js allows the creation of [[Web server]]s and networking tools using [[JavaScript]] and a collection of "modules" that handle various core functionality.<ref name="b3"/><ref name="b1"/><ref name="b2"/><ref name="b4"/><ref name="b5">[https://books.google.com/books?id=G1y_5kpmatUC&printsec=frontcover&dq=nodejs&hl=en&sa=X#v=onepage&q=nodejs&f=false Smashing Node.js: JavaScript Everywhere], John Wiley & Sons, 14-Aug-2012</ref> Modules are provided for [[file system]] I/O, networking ([[Domain Name System|DNS]], [[HTTP]], [[Transmission Control Protocol|TCP]],  [[Transport Layer Security|TLS/SSL]], or [[User Datagram Protocol|UDP]]), [[Binary file|binary]] data (buffers), [[cryptography]] functions, [[Stream (computing)|data stream]]s, and other core functions.<ref name="b1"/><ref name="b4"/><ref>[https://nodejs.org/api/ Modules], Nodejs Website</ref> Node.js's modules use an API designed to reduce the complexity of writing server applications.<ref name="b1"/><ref name="b4">[https://books.google.co.nz/books?id=dPaoCwAAQBAJ&dq=nodejs&hl=en&sa=X&redir_esc=y Node.js Essentials], Packt Publishing, 10-Nov-2015</ref>

Though initially the module system was based on commonjs module pattern, the recent introduction of modules in the [[ECMAScript|ECMAScript specification]] has shifted the direction of using ECMAScript Modules in Node.js by default instead.<ref>{{Cite news|url=https://www.wisdomgeek.com/web-development/how-to-import-export-es6-modules-in-node/|title=How to import/export ES6 modules in Node - Wisdom Geek|date=2018-06-19|work=Wisdom Geek|access-date=2018-06-20|language=en-US}}</ref> 

Node.js is officially supported on [[Linux]], {{nowrap|[[macOS]]}}, [[Microsoft Windows]], [[SmartOS]], [[FreeBSD]], and [[IBM AIX]].<ref name="supportedOS" /> The provided source code may also be built on similar operating systems or be modified by third parties to support others such as [[NonStop]]<ref name="bomBora - Node.js for NonStop">{{cite web|url=http://infrasoft.com.au/bomBora.html|title=bomBora - Node.js for NonStop|publisher=Infrasoft|accessdate=14 August 2015}}</ref> and [[Unix]] servers. Alternatively, they can be written with [[CoffeeScript]]<ref name="b6">{{cite web |url=https://books.google.com/books?id=Oda-MgEACAAJ&dq=nodejs&hl=en&sa=X |title=CoffeeScript on Node.js |publisher=O'Reilly Media, Inc. |date=April 15, 2013 |accessdate=May 17, 2015}}</ref> (a JavaScript alternative), [[Dart (programming language)|Dart]] or [[TypeScript]] ([[strongly typed]] forms of JavaScript), or any other language that [[Source-to-source compiler|can compile to JavaScript]].<ref name="b6"/><ref>{{cite web |url=https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js |title=List of languages that compile to JS |accessdate=October 19, 2017}}</ref>

Node.js is primarily used to build network programs such as Web servers.<ref name="b2">[https://books.google.com/books?id=KZQQAlhTOBgC&printsec=frontcover&dq=nodejs&hl=en&sa=X#v=onepage&q=nodejs&f=false Node.js for PHP Developers], O'Reilly Media, Inc., 2013</ref> The biggest difference between Node.js and [[PHP]] is that most functions in PHP [[Asynchronous I/O|block]] until completion (commands execute only after previous commands finish), while Node.js functions are [[Asynchronous I/O|non-blocking]] (commands execute [[Concurrent computing|concurrently]] or even in [[Parallel computing|parallel]],<ref name="node_cluster_module_doc">{{cite web |url=https://nodejs.org/api/cluster.html |title=Node.js's cluster module |accessdate=October 19, 2017}}</ref><ref>{{cite web |url=https://nodejs.org/api/child_process.html |title=Node.js's child_process module |accessdate=October 19, 2017}}</ref> and use [[Callback (computer programming)|callbacks]] to signal completion or failure).<ref name="b2"/>

=== Platform architecture ===
Node.js brings [[event-driven programming]] to [[web server]]s, enabling development of fast web servers in JavaScript.<ref name="b1"/> Developers can create highly scalable servers without using [[Thread (computing)|threading]], by using a simplified model of [[event-driven programming]] that uses callbacks to signal the completion of a task.<ref name="b1"/>  Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.<ref name="b1"/>

Node.js was built on the [[Google]] [[V8 JavaScript engine]] since it was open-sourced under the [[BSD license]]. It is extremely fast and proficient with internet fundamentals such as [[HTTP]], [[DNS]], [[Transmission Control Protocol|TCP]].<ref name="b3"/> Also, [[JavaScript]] was a well-known language, making Node.js immediately accessible to the entire [[web developer|web development community]].<ref name="b3"/>

=== Industry support ===
There are thousands of open-source libraries for Node.js, most of them hosted on the [[Npm (software)|npm]] website. The Node.js developer community has two main mailing lists and the [[IRC]] channel #node.js on [[freenode]]. There are multiple developer conferences and events that support the Node.js community including [http://nodeconf.com/ NodeConf], [http://events.linuxfoundation.org/events/node-interactive Node Interactive] and [http://www.nodesummit.com/ Node Summit] as well as a number of regional events.

The open-source community has developed [[web framework]]s to accelerate the development of applications. Such frameworks include Connect, [[Express.js]], [[Socket.IO]], [[Feathers.js]], Koa.js, Hapi.js, [[Sails.js]], [[Meteor (web framework)|Meteor]], Derby, and many others.<ref name="b1"/><ref name="b7">[https://books.google.com/books?id=5eGRAwAAQBAJ&printsec=frontcover&dq=nodejs&hl=en&sa=X#v=onepage&q=nodejs&f=false Express.js Guide: The Comprehensive Book on Express.js], Azat Mardan, 28-May-2014</ref> Various packages have also been created for interfacing with other languages or runtime environments such as [[Microsoft .NET]].<ref>[http://www.techrepublic.com/article/edge-js-bridges-the-gap-between-node-js-and-net/ Edge.js bridges the gap between Node.js and .NET], TechRepublic, Tony Patton, July 1, 2014</ref>

Modern desktop [[Integrated development environment|IDE]]s provide editing and debugging features specifically for Node.js applications. Such IDEs include [[Atom (text editor)|Atom]], [[Brackets (text editor)|Brackets]], [[JetBrains MPS|JetBrains]] [[WebStorm]],<ref>[https://www.jetbrains.com/webstorm/help/node-js.html Node.js], WebStorm supports integration with the Node.js runtime environment, WebStorm Help</ref><ref>[https://www.jetbrains.com/webstorm/help/running-and-debugging-node-js.html Running and Debugging Node.js], WebStorm Help</ref> [[Microsoft Visual Studio]] (with Node.js Tools for Visual Studio,<ref>{{cite web|url= https://www.visualstudio.com/en-us/features/node-js-vs.aspx|title= Node.js Tools for Visual Studio|accessdate= 1 Feb 2016}}</ref> or [[TypeScript]] with Node definitions,<ref>[https://github.com/soywiz/typescript-node-definitions soywiz/typescript-node-definitions TypeScript's typings for some popular node.js modules], GitHub</ref><ref>[https://github.com/DefinitelyTyped/DefinitelyTyped DefinitelyTyped], GitHub</ref><ref>[http://definitelytyped.org/ The repository for high quality TypeScript type definitions] {{webarchive |url=https://web.archive.org/web/20160203083254/http://definitelytyped.org/ |date=February 3, 2016 }}</ref><ref>[http://www.typescriptlang.org/Samples#ImageBoard ImageBoard, A Node.js + Express + MongoDB application built using TypeScript on the server], TypeScript Samples</ref>) [[NetBeans]],<ref>{{cite web|url= http://www.infoworld.com/article/3003414/java/nodejs-takes-center-stage-in-netbeans-81.html|title= Node.js takes center stage in NetBeans 8.1|first= Paul|last= Krill|publisher= [[InfoWorld]]|date= 2015-11-10}}</ref> [[Nodeclipse]] Enide Studio <ref>[http://www.nodeclipse.org/ Nodeclipse, Enide -- Node.JS development in Eclipse], Nodeclipse Website</ref> ([[Eclipse (software)|Eclipse]]-based), and [[Visual Studio Code]].<ref>[https://channel9.msdn.com/Blogs/cloud-with-a-silver-lining/hello-visual-studio-code-nodejs Hello Visual Studio Code (with NodeJS)], Channel 9, Microsoft
</ref><ref>
[https://code.visualstudio.com/Docs/runtimes/nodejs Node.js Applications with VS Code], Visual Studio Code
</ref>
Certain online web-based IDEs also support Node.js, such as [[Codeanywhere]], [[Codenvy]], [[Cloud9 IDE]], [[Koding]], and the visual flow editor in [[Node-RED]].

== Releases ==
{| class="wikitable" style="float:right; text-align:center; margin-left:1em; margin-right:0"
!Release
!Code name
!Release date
!LTS status
!Active LTS start
!Maintenance start
!Maintenance end
|-
|v0.10.x
|
|2013-03-11
| {{Version|o|End-of-life}}
| -
|2015-10-01
|2016-10-31
|-
|v0.12.x
|
|2015-02-06
| {{Version|o|End-of-life}}
| -
|2016-04-01
|2016-12-31
|-
|4.x
|Argon<ref name="Release" />
|2015-09-08
| {{Version|o|End-of-life}}
|2015-10-01
|2017-04-01
|2018-04-30
|-
|5.x
|
|2015-10-29
|No LTS
| colspan="2" |N/A
|2016-06-30
|-
|6.x
|Boron<ref name="Release" />
|2016-04-26
| {{Version|co|Maintenance}}
|2016-10-18
|2018-04-30
|April 2019
|-
|7.x
|
|2016-10-25
|No LTS
| colspan="2" |N/A
|2017-06-30
|-
| 8.x
| Carbon<ref name="Release" />
| 2017-05-30
| {{Version|c|Active}}
| 2017-10-31
| April 2019
| December 2019
|-
| 9.x
|
| 2017-10-01
| No LTS
| colspan="2" |N/A
| 2018-06-30
|-
| 10.x
| Dubnium<ref name="Release" />
| 2018-04-24
| {{Version|c|Active}}
| 2018-10-30
| April 2020
| April 2021
|-
| 11.x<ref name="Release" />
|
| 2018-10-23
| No LTS
| colspan="2" |N/A
| June 2019
|-
| 12.x<ref name="Release" />
|
| 2019-04-23
| {{Version|p|Pending}}
| October 2019
| April 2021
| April 2022
|}

New major releases of Node.js are cut from the [[GitHub]] master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.<ref name="Release">{{Cite web|url=https://github.com/nodejs/Release|title=nodejs/Release|website=GitHub|language=en|access-date=2018-05-03}}</ref> The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

== Technical details ==
{{Technical|section|date=August 2015}}
Node.js is a JavaScript runtime environment that processes incoming requests in a loop, called the [[event loop]].

=== Threading ===
Node.js operates on a [[Single threading|single thread]] event loop, using [[non-blocking I/O]] calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread [[context switch]]ing.<ref>{{cite web|url=http://blog.caustik.com/2012/08/19/node-js-w1m-concurrent-connections/|title=Node.js w/1M concurrent connections!|work=caustik's blog}}</ref> The design of sharing a single thread among all the requests that use the [[observer pattern]] is intended for building highly concurrent applications, where any function performing I/O must use a [[Callback (computer programming)|callback]]. To accommodate the single-threaded event loop, Node.js uses the [[libuv]] libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.<ref name="readwrite" />

A downside of this single-threaded approach is that Node.js doesn't allow [[vertical scaling]] by increasing the number of [[CPU core]]s of the machine it is running on without using an additional module, such as cluster,<ref name="node_cluster_module_doc" /> StrongLoop Process Manager,<ref>{{cite web|url=http://strong-pm.io/|title=StrongLoop Process Manager|publisher=}}</ref> or pm2.<ref>{{cite web|url=https://github.com/Unitech/pm2|title=GitHub - Unitech/pm2: Production process manager for Node.js applications with a built-in load balancer|work=GitHub}}</ref> However, developers can increase the default number of threads in the libuv thread pool. The server [[operating system|operating system (OS)]] is likely to distribute these threads across multiple cores.<ref>{{cite web|url=http://www.future-processing.pl/blog/on-problems-with-threads-in-node-js/|title=On problems with threads in node.js - Future Processing|author=Aleksander Kasiuk|date=22 April 2015|publisher=}}</ref>

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.{{citation needed|date=March 2017}}

=== V8 ===
[[Chrome V8|V8]] is the JavaScript execution engine which was initially built for [[Google Chrome]]. It was then open-sourced by Google in 2008. Written in [[C++]], V8 compiles JavaScript source code to native [[machine code]] instead of interpreting it in real time.<ref name="readwrite" />

Node.js uses [[libuv]] to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and [[POSIX]]-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

=== Package management ===
[[npm (software)|npm]] is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the [https://www.npmjs.com/ npm registry], organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as [[Lodash]] to task runners such as [[Grunt (software)|Grunt]].

=== Unified API ===
Node.js can be combined with a browser, a database that supports JSON data (such as [[PostgreSQL|Postgres]],<ref>{{Cite web|url=https://www.postgresql.org/docs/9.4/static/datatype-json.html|title=PostgreSQL: Documentation: 9.4: JSON Types|website=www.postgresql.org|access-date=2016-10-20}}</ref> [[MongoDB]], or [[CouchDB]]) and [[JSON]] for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as [[Modelâ€“viewâ€“controller|MVC]], [[Model View Presenter|MVP]], [[Model View ViewModel|MVVM]], etc., Node.js allows the [[code reuse|reuse]] of the same model and service interface between client-side and server-side.

=== Event loop ===
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small [[heap allocation]]. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.<ref>[https://nodejs.org/about/ About Node.js], Node.js Website</ref> In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

== Project governance ==
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."<ref>{{Cite web|url=https://nodejs.org/en/foundation/|title=Node.js Foundation {{!}} Node.js|last=Foundation|first=Node.js|website=nodejs.org|language=en|access-date=2017-03-08}}</ref>

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.<ref>{{Cite web|url=https://github.com/nodejs/TSC|title=nodejs/TSC|website=GitHub|language=en|access-date=2017-03-08}}</ref> The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.<ref>{{Cite web|url=https://nodejs.org/en/about/working-groups/|title=Working Groups {{!}} Node.js|last=Foundation|first=Node.js|website=nodejs.org|language=en|access-date=2017-03-08}}</ref> 

In August 2017, a third of the TSC members resigned due to a dispute related to the project's code of conduct.<ref>Whittaker, Zack, ''[http://www.zdnet.com/article/after-governance-breakdown-node-js-leaders-fight-for-its-survival/?loc=newsletter_large_thumb_related&ftag=TREc64629f&bhid=24465828771686428160302951310435/ After governance breakdown, Node.js leaders fight for its survival]'', ZDNet, August 25, 2017</ref>

== See also ==
{{Portal|Free software}}

* [[List of server-side JavaScript implementations]]
* [[List of JavaScript libraries]]
* [[MEAN (software bundle)]]
* [[Online JavaScript IDE]]
* [[Rhino (JavaScript engine)]]
* [[Application server]]

== References ==
{{Reflist|30em}}

== Further reading ==
{{Refbegin}}
* {{citation | title = Up and Running with Node.js | date = April 2012 | last1 = Hughes-Croucher | last2 = Wilson | first1 = Tom | first2 = Mike | page = 204 | edition = First | publisher = [[O'Reilly Media]] | isbn = 978-1-4493-9858-3 }}
* {{citation | title = Sams Teach Yourself Node.js in 24 Hours | date = September 2012 | last1 = Ornbo | first1 = George | page = 440 | edition = First | publisher = [[SAMS Publishing]] | isbn = 978-0-672-33595-2 }}
* {{citation | title = Professional Node.js | date = October 2012 | url = http://eu.wiley.com/WileyCDA/WileyTitle/productCd-1118185463,descCd-authorInfo.html | last1 = Teixeira | first1 = Pedro | page = 408 | edition = First | publisher = [[John Wiley & Sons]] | isbn = 978-1-118-22754-1 }}
* {{cite podcast | url = http://twit.tv/show/floss-weekly/237 | title =Episode 237: Node.js | website = twit.tv/show/floss-weekly | publisher = [[TWiT.tv]] | host = [[Randal L. Schwartz]] and Aaron Newcomb | date = 9 January 2013 | time = 1:08:13 | accessdate = 9 January 2013 }}
* {{citation | title = Nodejs Programming By Example | date = July 2012 | last1 = Kurniawan | first1 = Agus | page = 67 | edition = First | publisher = [[PE Press]] }}
* {{citation | title = Node.js Recipes: A Problem-Solution Approach | date = October 2013 | last1 = Gackenheimer | first1 = Cory | page = 376 | edition = First | publisher = [[Apress]] | isbn = 978-1-4302-6058-5}}
* {{citation | title = Building APIs with Node.js | date = February 2016 | url = https://leanpub.com/building-apis-with-nodejs | last1 = Ribeiro Pereira | first1 = Caio | page = 152 | edition = First | publisher = [[Leanpub]] | isbn =  }}
{{refend}}

== External links ==
{{Commons category}}
* {{Official website}}

{{NodeJs}}
{{JavaScript}}
{{Authority control}}

[[Category:Free software programmed in C++]]
[[Category:Free software programmed in JavaScript]]
[[Category:JavaScript libraries]]
[[Category:Joyent]]
[[Category:Linux Foundation projects]]
[[Category:Software using the MIT license]]