{{About|the scripting language}}
{{Good article}}
{{Infobox programming language
| logo = PHP-logo.svg
| logo size = 50px
| caption = PHP: Hypertext Preprocessors
| file ext = .php, .phtml, .php3, .php4, .php5, .php7, .phps, .php-s, .pht
| paradigm = [[imperative programming|Imperative]], [[functional programming|functional]], [[object-oriented programming|object-oriented]], [[procedural programming|procedural]], [[reflective programming|reflective]]
| released = {{start date and age|1995}}<ref name="mysqlconference">{{cite web|last=Lerdorf | first=Rasmus | title=PHP on Hormones&nbsp;– history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California | date=2007-04-26 | access-date=2009-12-11 | publisher=The Conversations Network | url=http://itc.conversationsnetwork.org/shows/detail3298.html}}</ref>
| designer = [[Rasmus Lerdorf]]
| developer = The PHP Development Team, [[Zend Technologies]]
| Old Name = Personal Home Page (PHP)
| latest release version = 7.3.0<ref>{{cite web|url=http://php.net/archive/2018.php#id2018-11-08-2|title=News Archive&nbsp;— 2018|at=PHP 7.2.12 Released|accessdate=8 November 2018|date=8 November 2018}}</ref>
| latest release date = {{start date and age|2018|12|6}}
<!--| latest preview version = 7.3.0RC6<ref>{{cite web|url=http://php.net/archive/2018.php#id2018-11-22-1|title=News Archive&nbsp;— 2018|at=PHP 7.3.0RC6 Released|accessdate=22 November 2018|date=30 November 2018}}</ref>
| latest preview date ={{start date and age|2018|11|22}}-->
| typing = [[dynamic typing|Dynamic]], [[weak typing|weak]]

'''since version 7.0:'''
[[ gradual typing|Gradual]]<ref>{{cite web|url=https://secure.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict|title=PHP: Function arguments - Manual|website=secure.php.net}}</ref>
| implementations = [[Zend Engine]], [[HHVM]], [[Phalanger (compiler)|Phalanger]], [[Quercus (software)|Quercus]], [[Parrot virtual machine|Parrot]]
| dialects = 
| influenced by = [[Perl]], [[C (programming language)|C]], [[C++]], [[Java (programming language)|Java]], [[Tcl]]<ref name="mysqlconference" />
| influenced = [[Hack (programming language)|Hack]]
| programming language = [[C (programming language)|C]] (primarily; some components [[C++]])
| operating system = [[Unix-like]], [[Windows]]
| license = [[PHP License]] (most of Zend engine under [[Zend Engine License]])
| website = {{official URL}}
| wikibooks = PHP Programming
}}

'''PHP: Hypertext Preprocessor''' (or simply '''PHP''') is a [[server-side scripting]] language designed for [[Web development]], and also used as a [[general-purpose programming language]]. It was originally created by [[Rasmus Lerdorf]] in 1994;<ref name="History of PHP">{{cite web|title=History of PHP|url=http://php.net/manual/en/history.php.php|website=php.net}}</ref> the PHP [[reference implementation]] is now produced by The PHP Group.<ref name="about PHP">{{cite web|access-date=2008-02-25|url=http://www.php.net/history|title=History of PHP and related projects |publisher=The PHP Group}}</ref> PHP originally stood for ''Personal Home Page'',<ref name="History of PHP" /> but it now stands for the [[recursive initialism]] ''PHP: Hypertext Preprocessor''.<ref>[http://php.net/manual/en/preface.php PHP Manual: Preface], www.php.net.</ref>

PHP code may be embedded into [[HTML]] code, or it can be used in combination with various [[web template system]]s, web content management systems, and [[web framework]]s. PHP code is usually processed by a PHP [[interpreter (computing)|interpreter]] implemented as a [[plugin (computing)|module]] in the web server or as a [[Common Gateway Interface]] (CGI) executable. The web server combines the results of the interpreted and executed PHP code, which may be any type of data, including images, with the generated web page. PHP code may also be executed with a [[command-line interface]] (CLI) and can be used to implement [[Computer software|standalone]] [[graphical user interface|graphical applications]].<ref>{{cite web | url = //php.net/manual/en/intro-whatcando.php | work = PHP Manual | title = Introduction: What can PHP do? | access-date = 2009-03-05}}</ref>

The standard PHP interpreter, powered by the [[Zend Engine]], is [[free software]] released under the [[PHP License]]. PHP has been widely ported and can be deployed on most web servers on almost every [[operating system]] and [[computing platform|platform]], free of charge.<ref name="foundations" />

The PHP language evolved without a written [[formal specification]] or standard until 2014, with the original implementation acting as the ''[[de facto]]'' standard which other implementations aimed to follow. Since 2014 work has gone on to create a formal PHP specification.<ref>{{cite web|last1=Jackson|first1=Joab|title=PHP gets a formal specification, at last|url=http://www.itworld.com/software/429534/php-gets-formal-specification-last|website=ITworld|publisher=[[International Data Group|IDG]]|date=2014-07-31}}</ref>

== History ==

=== Early history ===
{{multiple image
| align=left
| width=105
| image1=Rasmus Lerdorf cropped.jpg
| image2=Andi Gutmans 1.jpg
| image3=Zeev Suraski 2005 cropped.jpg
| footer=[[Rasmus Lerdorf]], who wrote the original [[Common Gateway Interface]] (CGI) component, together with [[Andi Gutmans]] and [[Zeev Suraski]], who rewrote the [[parser]] that formed PHP 3.
}}

PHP development began in 1994 when [[Rasmus Lerdorf]] wrote several [[Common Gateway Interface]] (CGI) programs in C,<ref name="php_origins">{{cite web | url = https://twitter.com/rasmus/status/226405807305138176 | title = I wonder why people keep writing that PHP was ever written in Perl. It never was. #php | last = Lerdorf | first = Rasmus | publisher = Twitter | date = 2012-07-20 | access-date = 2014-09-04}}</ref><ref>{{cite web | url = http://itc.conversationsnetwork.org/shows/detail3298.html | title = PHP on Hormones | format = mp3 | last = Lerdorf | first = Rasmus | publisher = The Conversations Network | date = 2007-04-26 | access-date = 2009-06-22}}</ref><ref>{{cite web | url = http://talks.php.net/show/mysql07key/3 | title = Slide 3 | work = slides for 'PHP on Hormones' talk | last = Lerdorf | first = Rasmus | publisher = The PHP Group | year = 2007 | access-date = 2009-06-22}}
</ref> which he used to maintain his [[personal homepage]]. He extended them to work with [[web form]]s and to communicate with [[database]]s, and called this implementation "Personal Home Page/Forms Interpreter" or PHP/FI.

PHP/FI could be used to build simple, dynamic [[web application]]s. To accelerate [[software bug|bug]] reporting and improve the code, Lerdorf initially announced the release of PHP/FI as "Personal Home Page Tools (PHP Tools) version 1.0" on the [[Usenet]] discussion group ''comp.infosystems.www.authoring.cgi'' on June 8, 1995.<ref>{{cite web|url= https://groups.google.com/group/comp.infosystems.www.authoring.cgi/msg/cc7d43454d64d133?pli=1 |title=Announce: Personal Home Page Tools (PHP Tools)|last=Lerdorf|first=Rasmus|date=June 8, 1995|access-date=7 June 2011}}</ref><ref>{{cite newsgroup | title = Announce: Personal Home Page Tools (PHP Tools) | author = Lerdorf, Rasmus | date = 1995-06-08 | newsgroup = comp.infosystems.www.authoring.cgi | url = https://groups.google.com/group/comp.infosystems.www.authoring.cgi/msg/cc7d43454d64d133 | access-date = 2006-09-17}}</ref> This release already had the basic functionality that PHP has today. This included [[Local variable#Local variables in Perl|Perl-like variables]], form handling, and the ability to embed HTML. The [[syntax]] resembled that of Perl, but was simpler, more limited and less consistent.<ref name="about PHP" />

Early PHP was not intended to be a new programming language, and grew organically, with Lerdorf noting in retrospect: "I don't know how to stop it, there was never any intent to write a programming language [...] I have absolutely no idea how to write a programming language, I just kept adding the next logical step on the way."<ref name=itconversations>{{cite web|title = Rasmus Lerdorf, Senior Technical Yahoo: PHP, Behind the Mic|date = 2003-11-19|url =http://itc.conversationsnetwork.org/shows/detail58.html|archiveurl = https://web.archive.org/web/20130728125152/http://itc.conversationsnetwork.org/shows/detail58.html|archivedate = 2013-07-28}}</ref> A development team began to form and, after months of work and [[Beta development stage|beta]] testing, officially released PHP/FI 2 in November 1997.

{{Anchor|ORGANIC}}
The fact that PHP was not originally designed, but instead was developed organically has led to inconsistent naming of functions and inconsistent ordering of their parameters.<ref>{{cite web|title=Problems with PHP|url=http://toykeeper.net/soapbox/php_problems/|access-date=20 December 2010}}</ref> In some cases, the function names were chosen to match the lower-level libraries which PHP was "wrapping",<ref>{{cite web|url=http://news.php.net/php.internals/70950 |title=php.internals: Re: Function name consistency |website=news.php.net |date=2013-12-28 |access-date=2014-02-09}}</ref> while in some very early versions of PHP the length of the function names was used internally as a [[hash function]], so names were chosen to improve the distribution of hash values.<ref name="php-internals-70691">{{cite newsgroup |title=Re: Flexible function naming |author=[[Rasmus Lerdorf]] |date=Dec 16, 2013 |newsgroup=php.internals |url=http://news.php.net/php.internals/70691 |access-date=December 26, 2013}}</ref>

=== PHP 3 and 4 ===
[[File:Custom-software-developement-php-net.JPG|thumb|This is an example of custom PHP code for the CMS [[WordPress]].]]
[[Zeev Suraski]] and [[Andi Gutmans]] rewrote the [[parser]] in 1997 and formed the base of PHP 3, changing the language's name to the [[recursive acronym]] ''PHP: Hypertext Preprocessor''.<ref name="about PHP" /><ref>{{cite web|title=PHP&nbsp;— Acronym Meaning Vote |url=http://il.php.net/vote_listing.php3 |website=PHP.net |archivedate=August 15, 2000 |deadurl=yes |archiveurl=https://web.archive.org/web/20000815063125/http://il.php.net/vote_listing.php3}}</ref> Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new [[rewrite (programming)|rewrite]] of PHP's core, producing the [[Zend Engine]] in 1999.<ref>{{cite web | title = Zend Engine version 2.0: Feature Overview and Design | publisher = [[Zend]] Technologies Ltd. | url = http://www.zend.com/zend/zend-engine-summary.php | access-date = 2006-09-17 | archive-url = https://web.archive.org/web/20060719204721/http://www.zend.com/zend/zend-engine-summary.php | archive-date = 2006-07-19 | dead-url = yes | df =  }}</ref> They also founded [[Zend Technologies]] in [[Ramat Gan]], Israel.<ref name="about PHP" />

On May 22, 2000, PHP 4, powered by the Zend Engine 1.0, was released.<ref name="about PHP" /> As of August 2008 this branch reached version 4.4.9. PHP 4 is no longer under development nor will any security updates be released.<ref name="2007 news">{{cite web|title=php.net 2007 news archive|url=http://www.php.net/archive/2007.php|publisher=The PHP Group|access-date=2008-02-22|date=2007-07-13}}</ref><ref>{{cite web|access-date=2008-03-16|url=http://www.internetnews.com/dev-news/article.php/3725291|title=PHP 4 is Dead—Long Live PHP 5 |publisher=InternetNews|date=2008-02-01|author=Kerner, Sean Michael}}</ref>

=== PHP 5 ===
On July 14, 2004, PHP 5 was released, powered by the new Zend Engine II.<ref name="about PHP" /> PHP 5 included new features such as improved support for [[object-oriented programming]], the PHP Data Objects (PDO) extension (which defines a lightweight and consistent interface for accessing databases), and numerous performance enhancements.<ref>{{cite web|title=Why PHP 5 Rocks!|url=http://www.onlamp.com/pub/a/php/2004/07/15/UpgradePHP5.html|publisher=O'Reilly|access-date=2008-02-22|date=2004-07-15|author=Trachtenberg, Adam}}</ref> In 2008 PHP 5 became the only stable version under development. [[Late static binding]] had been missing from PHP and was added in version 5.3.<ref>{{cite web|url=http://www.digitalsandwich.com/archives/53-Late-Static-Binding-in-PHP.html|access-date=2008-03-25|title=Late Static Binding in PHP|date=2006-02-23|publisher=Digital Sandwich}}</ref><ref>{{cite web|access-date=2008-03-25|url=http://www.php.net/language.oop5.static|title=Static Keyword|publisher=The PHP Group}}</ref>

Many high-profile open-source projects ceased to support PHP 4 in new code as of February 5, 2008, because of the GoPHP5 initiative,<ref name="gophp5_projects">{{cite web | url=http://www.gophp5.org/projects|title=GoPHP5 | deadurl=yes | archiveurl=https://web.archive.org/web/20110717133313/http://gophp5.org/projects | archivedate=2011-07-17}}</ref> provided by a consortium of PHP developers promoting the transition from PHP 4 to PHP 5.<ref name="gophp5">{{cite web |url=http://gophp5.org/sites/gophp5.org/files/press_release.pdf |format=PDF |title=PHP projects join forces to Go PHP 5 |access-date=2008-02-23 |work=GoPHP5 Press Release |author=GoPHP5 | deadurl=yes | archiveurl=https://www.webcitation.org/5lubU9am9?url=http://gophp5.org/sites/gophp5.org/files/press_release.pdf | archivedate=2009-12-10}}</ref><ref>{{cite web|url=http://gophp5.org/|title=GoPHP5|publisher=GoPHP5|access-date=2008-02-22 | deadurl=yes | archiveurl=https://web.archive.org/web/20110427101913/http://www.gophp5.org/ | archivedate=2011-04-27}}</ref>

Over time, PHP interpreters became available on most existing [[32-bit]] and [[64-bit]] operating systems, either by building them from the PHP source code, or by using pre-built binaries.<ref>{{cite web
| url = //www.php.net/manual/en/install.php
| title = PHP Installation and Configuration
| access-date = 2013-10-29
| website = php.net
}}</ref> For the PHP versions 5.3 and 5.4, the only available [[Microsoft Windows]] binary distributions were 32-bit [[x86]] builds,<ref>{{cite web
| url = http://windows.php.net/download/#php-5.3
| title = PHP for Windows: Binaries and sources releases (5.3)
| access-date = 2013-10-29
| website = php.net
}}</ref><ref>{{cite web
| url = http://windows.php.net/download/#php-5.4
| title = PHP for Windows: Binaries and sources releases (5.4)
| access-date = 2013-10-29
| website = php.net
}}</ref> requiring Windows 32-bit compatibility mode while using [[Internet Information Services]] (IIS) on a 64-bit Windows platform. PHP version 5.5 made the 64-bit [[x86-64]] builds available for Microsoft Windows.<ref>{{cite web
| url = http://windows.php.net/download/#php-5.5
| title = PHP for Windows: Binaries and sources releases (5.5)
| access-date = 2013-10-29
| website = php.net
}}</ref>

Official security support for PHP 5.6 will finish in 31 December 2018<ref>http://php.net/supported-versions.php</ref>, but [[Debian|Debian 8.0 Jessie]]  extend support until June 2020. <ref>https://wiki.debian.org/LTS/Jessie</ref>

=== {{Anchor|PHP6-UNICODE}}PHP 6 and Unicode ===
PHP received mixed reviews due to lacking native [[Unicode]] support at the core language level.<ref>{{cite web
| url = //php.net/manual/en/language.types.string.php
| title = Types: Strings (PHP Manual)
| access-date = 2013-09-22
| website = PHP.net
}}</ref><ref>{{cite web
| url = //www.php.net/manual/en/language.types.string.php#language.types.string.details
| title = Details of the String Type (PHP Manual)
| access-date = 2013-09-22
| website = PHP.net
}}</ref> In 2005, a project headed by Andrei Zmievski was initiated to bring native Unicode support throughout PHP, by embedding the [[International Components for Unicode]] (ICU) library, and representing text strings as [[UTF-16]] internally.<ref>{{cite web|url=http://marc.info/?l=php-internals&m=112365908921757&w=1|title=PHP Unicode support design document (mailing list post)|date=2005-08-10|access-date=2014-02-09|author=Andrei Zmievski}}</ref> Since this would cause major changes both to the internals of the language and to user code, it was planned to release this as version 6.0 of the language, along with other major features then in development.<ref>{{cite web|url=http://news.php.net/php.internals/17668|title=PHP 5.5 or 6.0|access-date=2014-02-09}}</ref>

However, a shortage of developers who understood the necessary changes, and performance problems arising from conversion to and from UTF-16, which is rarely used in a web context, led to delays in the project.<ref>{{cite web|title=The Good, the Bad, and the Ugly: What Happened to Unicode and PHP 6|url=http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6|access-date=2014-02-09|author=Andrei Zmievski}}</ref> As a result, a PHP 5.3 release was created in 2009, with many non-Unicode features back-ported from PHP&nbsp;6, notably namespaces. In March 2010, the project in its current form was officially abandoned, and a PHP&nbsp;5.4 release was prepared containing most remaining non-Unicode features from PHP&nbsp;6, such as traits and closure re-binding.<ref>{{cite web|url=http://news.php.net/php.internals/47120|title=PHP 6 (mailing list post)|access-date=2014-02-07|date=2010-03-11|author=Rasmus Lerdorf}}</ref> Initial hopes were that a new plan would be formed for Unicode integration, but {{as of|2014|lc=y}} none had been adopted.

=== {{Anchor|NG|ZE3|PHP7}}PHP 7 ===
During 2014 and 2015, a new major PHP version was developed, which was numbered PHP 7. The numbering of this version involved some debate.<ref>{{cite web|url=https://philsturgeon.uk/php/2014/07/23/neverending-muppet-debate-of-php-6-v-php-7/|title=The Neverending Muppet Debate of PHP 6 v PHP 7|publisher=}}</ref> While the PHP 6 Unicode experiment had never been released, several articles and book titles referenced the PHP 6 name, which might have caused confusion if a new release were to reuse the name.<ref>{{cite web |title=RFC: Name of Next Release of PHP |url=https://wiki.php.net/rfc/php6 |date=2014-07-07 |access-date=2014-07-15 |website=php.net}}</ref> After a vote, the name PHP&nbsp;7 was chosen.<ref>{{cite web|title=Re: [PHP-DEV] [VOTE][RFC] Name of Next Release of PHP (again) |url=https://www.mail-archive.com/internals@lists.php.net/msg68598.html |date=2014-07-30 |access-date=2014-07-30}}</ref>

The foundation of PHP  is a PHP [[Branching (revision control)|branch]] that was originally dubbed ''PHP next generation'' (''phpng''). It was authored by Dmitry Stogov, Xinchen Hui and Nikita Popov,<ref>{{cite web|url=http://news.php.net/php.internals/73888|title=phpng: Refactored PHP Engine with Big Performance Improvement|website=news.php.net}}</ref> and aimed to optimize PHP performance by refactoring the Zend Engine while retaining near-complete language compatibility.<ref>{{cite web |url=https://wiki.php.net/rfc/phpng |title=PHP: rfc:phpng |access-date=16 December 2014 |website=php.net}}</ref> {{As of|2014|07|14}}, [[WordPress]]-based benchmarks, which served as the main benchmark suite for the phpng project, showed an almost 100% increase in performance. Changes from phpng are also expected to make it easier to improve performance in the future, as more compact data structures and other changes are seen as better suited for a successful migration to a [[Just-in-time compilation|just-in-time]] (JIT) compiler.<ref name="phpng">{{cite web|url=https://wiki.php.net/phpng |title=PHP: phpng |website=php.net |access-date=2014-07-15}}</ref> Because of the significant changes, the reworked Zend Engine is called ''Zend Engine 3'', succeeding Zend Engine 2 used in PHP 5.<ref name="ZE2">{{cite web |url=https://github.com/php/php-src/commit/150dc69d6eee35738f505e925ee664c02060196d |website=github.com |date=2014-12-05 |access-date=2014-12-05 |title=Merge branch 'ZendEngine3'}}</ref>

Because of major internal changes in phpng, it must receive a new [[Software versioning|major version]] number of PHP, rather than a minor PHP 5 release, according to PHP's release process.<ref name="releaseprocess" /> Major versions of PHP are allowed to break backward-compatibility of code and therefore PHP 7 presented an opportunity for other improvements beyond phpng that require backward-compatibility breaks. In particular, it involved the following changes:
* Many fatal- or recoverable-level legacy PHP error mechanisms were replaced with modern object-oriented [[Exception (computer science)|exceptions]]<ref name="engine_exceptions" />
* The syntax for variable dereferencing was reworked to be internally more consistent and complete, allowing the use of the operators ''->'', ''[]'', ''()'', ''{}'', and ''::'' with arbitrary meaningful left-hand-side expressions<ref name="uvs">{{cite web |url=https://wiki.php.net/rfc/uniform_variable_syntax |title=PHP RFC: Uniform Variable Syntax |date=2014-05-31 |access-date=2014-07-30 |website=php.net}}</ref>
* Support for legacy PHP 4-style constructor methods was deprecated<ref>{{cite web|url=https://3v4l.org/udRhX|title=Online PHP shell &#124; 150+ versions + stats + vld + hhvm}}</ref>
* The behavior of the [[Foreach loop|''foreach'' statement]] was changed to be more predictable<ref>{{cite web|url=https://wiki.php.net/rfc/php7_foreach|title=PHP RFC: Fix "foreach" behavior|access-date=2015-05-21|website=php.net}}</ref>
* Constructors for the few classes built-in to PHP which returned null upon failure were changed to throw an exception instead, for consistency<ref>{{cite web|url=https://wiki.php.net/rfc/internal_constructor_behaviour|title=PHP RFC: Constructor behaviour of internal classes|access-date=2015-05-21|website=php.net}}</ref>
* Several unmaintained or deprecated [[server application programming interface]]s (SAPIs) and extensions were removed from the PHP core, most notably the legacy ''mysql'' extension<ref>{{cite web|url=https://wiki.php.net/rfc/removal_of_dead_sapis_and_exts|title=PHP RFC: Removal of dead or not yet PHP7 ported SAPIs and extensions|access-date=2015-05-21|website=php.net}}</ref>
* The behavior of the ''list()'' operator was changed to remove support for strings<ref>{{cite web|url=https://wiki.php.net/rfc/fix_list_behavior_inconsistency|title=PHP RFC: Fix list() behavior inconsistency|access-date=2015-05-21|website=php.net}}</ref>
* Support for legacy ASP-style PHP code delimiters (''&lt;%'' and ''%&gt;'', ''&lt;script language=php&gt;'' and ''&lt;/script&gt;'') was removed<ref>{{cite web|url=https://wiki.php.net/rfc/remove_alternative_php_tags|title=PHP RFC: Remove alternative PHP tags|access-date=2015-05-21|website=php.net}}</ref>
* An oversight allowing a [[switch statement]] to have multiple ''default'' clauses was fixed<ref>{{cite web|url=https://wiki.php.net/rfc/switch.default.multiple|title=PHP RFC: Make defining multiple default cases in a switch a syntax error|access-date=2015-05-21|website=php.net}}</ref>
* Support for hexadecimal number support in some implicit conversions from strings to number types was removed<ref>{{cite web|url=https://wiki.php.net/rfc/remove_hex_support_in_numeric_strings|title=PHP RFC: Remove hex support in numeric strings|access-date=2015-05-21|website=php.net}}</ref>
* The [[left-shift operator|left-shift]] and [[right-shift operator|right-shift]] operators were changed to behave more consistently across platforms<ref name="integer_semantics">{{cite web|url=https://wiki.php.net/rfc/integer_semantics|title=PHP RFC: Integer Semantics|access-date=2015-05-21|website=php.net}}</ref>
* Conversions between integers and floating point numbers were tightened and implemented more consistently across platforms<ref name="integer_semantics" /><ref>{{cite web|url=https://wiki.php.net/rfc/zpp_fail_on_overflow|title=PHP RFC: ZPP Failure on Overflow|access-date=2015-05-21|website=php.net}}</ref>

PHP 7 also included new language features. Most notably, it introduces return type declarations for functions <ref name="return-types">{{cite web |url=https://wiki.php.net/rfc/return_types |title=RFC: Return Types |date=2015-01-27 |access-date=2015-01-28 |website=php.net}}</ref> which complement the existing parameter type declarations, and support for the [[Variable (computer science)|scalar]] types (integer, float, string, and boolean) in parameter and return type declarations.<ref name="scalar-types">{{cite web|url=https://wiki.php.net/rfc/scalar_type_hints_v5|title=RFC: Scalar Type Declarations |date=2015-03-16 |access-date=2015-03-17 |website=php.net}}</ref>

=== Release history ===
<!-- Template:Version - for version & release history. Documentation and examples: http://en.wikipedia.org/wiki/Template:Version -->
{| class="wikitable"
|-
! Version
! style="min-width: 10em;" | Release date
! style="min-width: 10em;" | Supported until<ref name="eol">{{cite web|url=http://php.net/eol.php |title=Unsupported Branches |website=php.net |access-date=2015-11-14}}</ref>
! Notes
|-
| {{Version |o | 1.0}}
| {{Date|1995-06-08}}
| 
| Officially called "Personal Home Page Tools (PHP Tools)". This is the first use of the name "PHP".<ref name="about PHP" />
|-
| {{Version |o | 2.0}}
| {{Date|1997-11-01}}
| 
| Officially called "PHP/FI 2.0". This is the first release that could actually be characterised as PHP, being a standalone language with many features that have endured to the present day.
|-
| {{Version |o | 3.0}}
| {{Date|1998-06-06}}
| {{Date|2000-10-20}}<ref name="eol" />
| Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewrite the base for this version.<ref name="about PHP" />
|-
| {{Version |o | 4.0}}
| {{Date|2000-05-22}}
| {{Date|2001-06-23}}<ref name="eol" />
| Added more advanced two-stage parse/execute tag-parsing system called the Zend engine.<ref name="php4changelog">{{cite web|title=PHP: PHP 4 ChangeLog|url=http://www.php.net/ChangeLog-4.php|publisher=The PHP Group|access-date=2008-02-22|date=2008-01-03}}</ref>
|-
| {{Version |o | 4.1}}
| {{Date|2001-12-10}}
| {{Date|2002-03-12}}<ref name="eol" />
| Introduced "superglobals" ({{code|lang=php|$_GET}}, {{code|lang=php|code=$_POST}}, {{code|lang=php|code=$_SESSION}}, etc.)<ref name="php4changelog" />
|-
| {{Version |o | 4.2}}
| {{Date|2002-04-22}}
| {{Date|2002-09-06}}<ref name="eol" />
| Disabled <code>register_globals</code> by default. Data received over the network is not inserted directly into the [[global variable|global]] namespace anymore, closing possible security holes in applications.<ref name="php4changelog" />
|-
| {{Version |o | 4.3}}
| {{Date|2002-12-27}}
| {{Date|2005-03-31}}<ref name="eol" />
| Introduced the [[command-line interface]] (CLI), to supplement the CGI.<ref name="php4changelog" /><ref name="phpclidocs">{{cite web|title= Using PHP from the command line | work = PHP Manual|url=http://php.net/manual/en/features.commandline.php|publisher=The PHP Group|access-date=2009-09-11}}</ref>
|-
| {{Version |o | 4.4}}
| {{Date|2005-07-11}}
| {{Date|2008-08-07}}<ref name="eol" />
| Fixed a memory corruption bug, which required breaking binary compatibility with extensions compiled against PHP version 4.3.x.<ref name="php44announcement">{{cite web|title=PHP 4.4.0 Release Announcement|work=PHP Mannual|url=http://php.net/releases/4_4_0.php|publisher=The PHP Group|access-date=2013-11-24}}</ref>
|-
| {{Version |o | 5.0}}
| {{Date|2004-07-13}}
| {{Date|2005-09-05}}<ref name="eol" />
| Zend Engine II with a new object model.<ref name="php5changelog">{{cite web|title=PHP: PHP 5 ChangeLog|url=http://www.php.net/ChangeLog-5.php|publisher=The PHP Group|access-date=2008-02-22|date=2007-11-08}}</ref>
|-
| {{Version |o | 5.1}}
| {{Date|2005-11-24}}
| {{Date|2006-08-24}}<ref name="eol" />
| Performance improvements with introduction of compiler variables in re-engineered PHP Engine.<ref name="php5changelog" /> Added PHP Data Objects (PDO) as a consistent interface for accessing databases.<ref name="phpPdoDocs">{{cite web|title=PHP manual: PDO|url=http://php.net/manual/en/intro.pdo.php|publisher=The PHP Group|access-date=2011-11-15|date=2011-11-15}}</ref>
|-
| {{Version |o | 5.2}}
| {{Date|2006-11-02}}
| {{Date|2011-01-06}}<ref name="eol" />
| Enabled the filter extension by default. Native [[JSON]] support.<ref name="php5changelog" />
|-
| {{Version |o | 5.3}}
| {{Date|2009-06-30}}
| {{Date|2014-08-14}}<ref name="eol" />
| [[Namespace]] support; [[name binding|late static bindings]], jump label (limited [[goto]]), [[closure (computer science)|closures]], PHP archives (phar), [[garbage collection (computer science)|garbage collection]] for circular references, improved [[Microsoft Windows|Windows]] support, sqlite3, mysqlnd as a replacement for libmysql as underlying library for the extensions that work with [[MySQL]], fileinfo as a replacement for mime_magic for better [[MIME]] support, the Internationalization extension, and deprecation of ereg extension.
|-
| {{Version |o | 5.4}}
| {{Date|2012-03-01}}
| {{Date|2015-09-03}}<ref name="eol" />
| [[trait (computer programming)|Trait]] support, short array syntax support. Removed items: <code>register_globals</code>, <code>safe_mode</code>, <code>allow_call_time_pass_reference</code>, {{code|lang=php|code=session_register()}}, {{code|lang=php|code=session_unregister()}} and {{code|lang=php|code=session_is_registered()}}. Built-in web server.<ref>{{cite web|url=http://php.net/manual/en/features.commandline.webserver.php |title=Built-in web server |access-date=March 26, 2012}}</ref> Several improvements to existing features, performance and reduced memory requirements.
|-
| {{Version |o | 5.5}}
| {{Date|2013-06-20}}
| 10 July 2016<ref name="supportedversions">{{cite web|url=http://php.net/supported-versions.php |title=Supported Versions |website=php.net |access-date=2017-12-13}}</ref>
| Support for [[Generator (computer programming)|generators]], <code>finally</code> blocks for exceptions handling, OpCache (based on Zend Optimizer+) bundled in official distribution.<ref name="55changes">{{cite web|title=PHP 5.5.0 changes|url=http://php.net/manual/en/migration55.new-features.php|access-date=2015-03-03|website=php.net}}</ref>
|-
| {{Version |co | 5.6}}
| {{Date|2014-08-28}}
| {{Date|2018-12-31}}<ref name="supportedversions"/>
| Constant scalar expressions, [[variadic function]]s, argument unpacking, new exponentiation operator, extensions of the <tt>use</tt> statement for functions and constants, new <tt>phpdbg</tt> debugger as a SAPI module, and other smaller improvements.<ref name="56changes">{{cite web |title=Migrating from PHP 5.5.x to PHP 5.6.x |url=http://www.php.net/manual/en/migration56.new-features.php |access-date=2014-03-24 |website=php.net}}</ref>
|-
| style="background:silver;"| 6.x
| {{n/a|Not released}}
| {{n/a}}
| Abandoned version of PHP that planned to include native Unicode support.<ref>{{cite web|url=https://lwn.net/Articles/379909/|title=Resetting PHP 6|quote=There have been books on the shelves purporting to cover PHP 6 since at least 2008. But, in March 2010, the PHP 6 release is not out&nbsp;— in fact, it is not even close to out. Recent events suggest that PHP 6 will not be released before 2011&nbsp;— if, indeed, it is released at all.}}</ref><ref>{{cite web|url=http://www.infoworld.com/article/2841561/php/php-7-moves-full-speed-ahead.html|title=PHP 7 moves full speed ahead|quote=Recent versions of PHP have been part of the 5.x release series, but there will be no PHP 6. "We're going to skip [version] 6, because years ago, we had plans for a 6, but those plans were very different from what we're doing now," Gutmans said. Going right to version 7 avoids confusion.}}</ref>
|-
| {{Version |o | 7.0}}
| {{Date|2015-12-03}}<ref name=php7final>{{cite web |url=http://php.net/archive/2018.php#id2018-07-19-2|title=News Archive&nbsp;–  2018: PHP 7.2.9 Released |date=2018-08-16 |access-date=2018-08-16 |website=php.net}}</ref>
| {{Date|2018-12-03}}<ref name="releaseprocess" />
| Zend Engine 3 (performance improvements<ref name="phpng" /> and 64-bit integer support on Windows<ref>{{cite web|url=https://wiki.php.net/rfc/size_t_and_int64_next|title=PHP: rfc:size_t_and_int64_next|website=php.net|access-date=16 December 2014}}</ref>), uniform variable syntax,<ref name="uvs" /> [[Abstract Syntax Tree|AST]]-based compilation process,<ref>{{cite web|url=https://wiki.php.net/rfc/abstract_syntax_tree|title=PHP: rfc:abstract_syntax_tree|website=php.net|access-date=16 December 2014}}</ref> added {{code|lang=php|code=Closure::call()}},<ref>{{cite web|url=https://wiki.php.net/rfc/closure_apply|title=PHP: rfc:closure_apply|website=php.net|access-date=16 December 2014}}</ref> bitwise shift consistency across platforms,<ref>{{cite web|url=https://wiki.php.net/rfc/integer_semantics|title=PHP: rfc:integer_semantics|website=php.net|access-date=16 December 2014}}</ref> {{code|lang=php|code=??}} ([[Null coalescing operator|null coalesce]]) operator,<ref>{{cite web|url=https://wiki.php.net/rfc/isset_ternary|title=PHP: rfc:isset_ternary|website=php.net|access-date=16 December 2014}}</ref> [[Unicode]] code point [[String literal#Escape sequences|escape syntax]],<ref>{{cite web|url=https://wiki.php.net/rfc/unicode_escape|title=RFC: Unicode Codepoint Escape Syntax|date=2014-11-24|access-date=2014-12-19}}</ref> return type declarations,<ref name="return-types" /> scalar type (integer, float, string and boolean) declarations,<ref name="scalar-types" /> <code>&lt;=&gt;</code> "spaceship" [[three-way comparison]] operator,<ref>{{cite web|url=https://wiki.php.net/rfc/combined-comparison-operator|title=Combined Comparison (Spaceship) Operator|website=php.net|access-date=2015-05-21}}</ref> [[Generator (computer programming)|generator]] delegation,<ref>{{cite web|url=https://wiki.php.net/rfc/generator-delegation|title=PHP RFC: Generator Delegation|access-date=2015-05-21|website=php.net}}</ref> [[anonymous class]]es,<ref>{{cite web|url=https://wiki.php.net/rfc/anonymous_classes|title=PHP RFC: Anonymous Classes|access-date=2015-05-21|website=php.net}}</ref> simpler and more consistently available [[CSPRNG]] API,<ref>{{cite web|url=https://wiki.php.net/rfc/easy_userland_csprng|title=PHP RFC: Easy User-land CSPRNG|access-date=2015-05-21|website=php.net}}</ref> replacement of many remaining internal PHP "errors" with the more modern [[Exception (computer science)|exceptions]],<ref name="engine_exceptions">{{cite web|url=https://wiki.php.net/rfc/engine_exceptions_for_php7|title=PHP RFC: Exceptions in the engine (for PHP 7)|access-date=2015-05-21|website=php.net}}</ref> and shorthand syntax for importing multiple items from a namespace.<ref>{{cite web|url=https://wiki.php.net/rfc/group_use_declarations|title=PHP RFC: Group Use Declarations|access-date=2015-05-21|website=php.net}}</ref>
|-
| {{Version |co | 7.1}}
| 1 December 2016
| 1 December 2019<ref name="supportedversions"/>
| [[Void type|void return type]],<ref>{{cite web|url=http://wiki.php.net/rfc/void_return_type|title=PHP: rfc:void_return_type|website=php.net|date=2015-11-09|access-date=2015-11-14}}</ref> class constant [[information hiding|visibility modifiers]]<ref>{{cite web|url=https://wiki.php.net/rfc/class_const_visibility|title=PHP: rfc:class_constant_visibility|website=php.net|date=2015-10-27|access-date=2015-12-08}}</ref>
|-
| {{Version |co | 7.2}}
| 30 November 2017
| 30 November 2020<ref name="supportedversions"/>
| Object parameter and return type hint<ref>{{cite web|url=https://wiki.php.net/rfc/object-typehint|title=PHP: rfc:object-typehint|website=wiki.php.net}}</ref>, Libsodium extension<ref>{{cite web|url=https://wiki.php.net/rfc/libsodium|title=PHP: rfc:libsodium|website=wiki.php.net}}</ref>, Abstract method overriding<ref>{{cite web|url=https://wiki.php.net/rfc/allow-abstract-function-override|title=PHP: rfc:allow-abstract-function-override|website=wiki.php.net}}</ref>, Parameter type widening<ref>{{cite web|url=https://wiki.php.net/rfc/parameter-no-type-variance|title=PHP: rfc:parameter-no-type-variance|website=wiki.php.net}}</ref>
|-
| {{Version |c | 7.3}}
| 6 December 2018<ref>{{cite web|url=https://wiki.php.net/todo/php73|title=PHP: todo:php73|website=wiki.php.net}}</ref>
| 6 December 2021
| Flexible [[Here_document#PHP|Heredoc]] and Nowdoc syntax<ref>{{cite web|url=https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes|title=PHP: rfc:flexible_heredoc_nowdoc_syntaxes|website=wiki.php.net}}</ref>, support for references and array deconstruction with list()<ref>{{cite web|url=https://wiki.php.net/rfc/list_reference_assignment|title=PHP: rfc:list_reference_assignment|website=wiki.php.net}}</ref>, PCRE2 support<ref>{{cite web|url=https://wiki.php.net/rfc/pcre2-migration|title=PHP: rfc:pcre2-migration|website=wiki.php.net}}</ref>, hrtime() function<ref>{{cite web|url=http://php.net/manual/en/function.hrtime.php|title=PHP: hrtime - Manual|website=php.net}}</ref>
|-
| colspan="4" | <small>{{Version |l |show=111111}}</small>
|}

Beginning on June 28, 2011, the PHP Development Team implemented a timeline for the release of new versions of PHP.<ref name="releaseprocess">{{cite web|title=PHP: Release Process|url=https://wiki.php.net/rfc/releaseprocess|access-date=2013-10-06|date=2011-06-20}}</ref> Under this system, at least one release should occur every month. Once per year, a minor release should occur which may include new features. Every minor release should at least be supported for two years with security and bug fixes, followed by at least one year of only security fixes, for a total of a three-year release process for every minor release. No new features, unless small and self-contained, are to be introduced into a minor release during the three-year release process.

== {{Anchor|ELEPHPANT}}Mascot ==
[[File:Webysther 20160423 - Elephpant.svg|thumb|200px|The elePHPant, PHP mascot.]]

The mascot of the PHP project is the ''elePHPant'', a blue [[elephant]] with the PHP logo on its side, designed by Vincent Pontier<ref>{{cite web|title=PHP: ElePHPant|url=http://php.net/elephpant.php|date=4 Oct 2014|access-date=4 Oct 2014}}</ref> in 1998.<ref>{{cite web|url=https://wwphp-fb.github.io/faq/community/elephpant/|title=Redirecting…|website=wwphp-fb.github.io}}</ref> "The (PHP) letters were forming the shape of an elephant if viewed in a sideways angle."<ref>{{cite web|url=https://7php.com/elephpant/|title=The PHP Mascot's Birth - Creator Of The elePHPant Vincent Pontier Reveals The True Story!|website=7php.com}}</ref> The elePHPant is sometimes differently colored when in [[plush toy]] form.

Many variations of this mascot have been made over the years. Only the elePHPants based on the original design by Vincent Pontier are considered official by the community<ref>{{cite web|title=PHP: ElePHPant|url=http://php.net/elephpant.php}}</ref>. These are highly collectible and some of them are extremely rare. Different variations are listed on [http://afieldguidetoelephpants.net/ A Field Guide to Elephpants].{{clear}}

== Syntax ==
{{Main|PHP syntax and semantics}}

The following [["Hello, World!" program]] is written in PHP code embedded in an [[HTML]] document:

<syntaxhighlight lang="php" highlight=7>
<!DOCTYPE html>
<html>
 <head>
 <title>PHP Test</title>
 </head>
 <body>
 <?php echo '<p>Hello World</p>'; ?>
 </body>
</html>
</syntaxhighlight>

However, as no requirement exists for PHP code to be embedded in HTML, the simplest version of ''Hello, World!'' may be written like this, with the closing tag omitted as preferred in files containing pure PHP code<ref>{{cite web|url=http://www.php.net/manual/en/language.basic-syntax.phptags.php |title=tags&nbsp;— Manual |website=php.net |access-date=2014-02-17}}</ref>

<syntaxhighlight lang="php">
 <?='Hello world';
</syntaxhighlight>

The PHP interpreter only executes PHP code within its [[delimiter]]s. Anything outside its delimiters is not processed by PHP, although non-PHP text is still subject to [[control structure]]s described in PHP code. The most common delimiters are ''<?php'' to open and ''?>'' to close PHP sections. The shortened form ''<?'' also exists. This short delimiter makes script files less portable, since support for them can be disabled in the local PHP configuration and it is therefore discouraged.<ref name="rfc-shortags" /><ref name="basic syntax">{{cite web|title=PHP: Basic syntax|url=http://www.php.net/manual/en/language.basic-syntax.php|publisher=The PHP Group|access-date=2008-02-22}}</ref> However, there is no recommendation against the use of the echo short tag ''<?=''.<ref>{{cite web|access-date=2016-01-03|url=https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md|title=Basic Coding Standard|publisher=PHP Framework Interoperability Group}}</ref> Prior to PHP 5.4.0, this short syntax for ''echo()'' only works with the ''short_open_tag'' configuration setting enabled, while for PHP 5.4.0 and later it is always available.<ref>{{cite web|url=http://www.php.net/echo |title=echo&nbsp;— Manual |website=php.net |access-date=2014-02-17}}</ref><ref>{{cite web|url=http://www.php.net/manual/en/ini.core.php#ini.short-open-tag |title=Description of core php.ini directives&nbsp;— Manual |website=php.net |date=2002-03-17 |access-date=2014-02-17}}</ref><ref name="rfc-shortags">{{cite web|url=http://wiki.php.net/rfc/shortags |title=PHP: rfc:shortags |website=php.net |date=2008-04-03 |access-date=2014-05-08}}</ref> The purpose of all these delimiters is to separate PHP code from non-PHP content, such as [[JavaScript]] code or HTML markup.<ref>{{cite web|access-date=2008-02-25|url=http://www.php.net/manual/en/tutorial.firstpage.php|title=Your first PHP-enabled page |publisher=The PHP Group}}</ref>

The first form of delimiters, ''<?php'' and ''?>'', in [[XHTML]] and other [[XML]] documents, creates correctly formed XML processing instructions.<ref>{{cite web | url = http://www.w3.org/TR/2008/REC-xml-20081126/#sec-pi | title = Processing Instructions | work = Extensible Markup Language (XML) 1.0 (Fifth Edition) | publisher = W3C | date = 26 November 2008 | last = Bray | first = Tim | access-date = 2009-06-18|display-authors=etal}}</ref> This means that the resulting mixture of PHP code and other markup in the server-side file is itself well-formed XML.

{{Anchor|TYPE-HINTING}}
Variables are prefixed with a [[dollar sign|dollar symbol]], and a [[primitive type|type]] does not need to be specified in advance. PHP&nbsp;5 introduced ''type hinting'' that allows functions to force their parameters to be objects of a specific class, arrays, interfaces or [[callback function]]s. However, before PHP 7.0, type hints could not be used with scalar types such as integer or string.<ref name="scalar-types" />

Unlike function and class names, variable names are case sensitive. Both double-quoted ("") and [[heredoc]] strings provide the ability to interpolate a variable's value into the string.<ref>{{cite web|access-date=2008-03-16|url=http://www.php.net/manual/en/language.variables.php|title=Variables |publisher=The PHP Group}}</ref> PHP treats [[newline]]s as [[whitespace character|whitespace]] in the manner of a [[free-form language]], and statements are terminated by a semicolon.<ref>{{cite web|access-date=2008-03-16|url=http://www.php.net/basic-syntax.instruction-separation|title=Instruction separation |publisher=The PHP Group}}</ref> PHP has three types of [[comparison of programming languages (syntax)#Comments|comment syntax]]: <code>/* */</code> marks block and inline comments; <code>//</code> or <code>#</code> are used for one-line comments.<ref>{{cite web|access-date=2008-03-16|url=http://www.php.net/manual/en/language.basic-syntax.comments.php|title=Comments |publisher=The PHP Group}}</ref> The <code>echo</code> statement is one of several facilities PHP provides to output text, ''e.g.'', to a web browser.

In terms of keywords and language syntax, PHP is similar to the C style syntax. ''if'' conditions, ''for'' and ''while'' loops, and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl.

=== Data types ===
PHP stores integers in a platform-dependent range, either a 64-bit or 32-bit [[signed number representations|signed]] [[integer (computer science)|integer]] equivalent to the [[C variable types and declarations|C-language long type]]. Unsigned integers are converted to signed values in certain situations; this behavior is different from other programming languages.<ref>{{cite web | url = http://www.mysqlperformanceblog.com/2007/03/27/integers-in-php-running-with-scissors-and-portability/ | title = Integers in PHP, running with scissors, and portability | date = March 27, 2007 | publisher = MySQL Performance Blog | access-date = 2007-03-28}}</ref> Integer variables can be assigned using decimal (positive and negative), [[octal]], [[hexadecimal]], and [[Binary code|binary]] notations.

[[Floating point]] numbers are also stored in a platform-specific range. They can be specified using floating point notation, or two forms of [[scientific notation]].<ref name="types">{{cite web|access-date=2008-03-16|url=http://www.php.net/manual/en/language.types.php|title=Types |publisher=The PHP Group}}</ref> PHP has a native [[Boolean datatype|Boolean]] type that is similar to the native Boolean types in [[Java (programming language)|Java]] and [[C++]]. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in [[Perl]] and C++.<ref name="types" />

The null data type represents a variable that has no value; <code>NULL</code> is the only allowed value for this data type.<ref name="types" />

Variables of the "resource" type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources.<ref name="types" />

Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in [[hash table|hashes]] with both keys and values, and the two can be intermingled.<ref name="types" /> PHP also supports [[string (computing)|strings]], which can be used with single quotes, double quotes, nowdoc or [[heredoc]] syntax.<ref>{{cite web|access-date=2008-03-21|url=http://www.php.net/manual/en/language.types.string.php|title=Strings |publisher=The PHP Group}}</ref>

The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes.<ref>{{cite web | url = http://www.php.net/spl | title = SPL&nbsp;–  StandardPHPLibrary | date = March 16, 2009 | website = PHP.net | access-date = 2009-03-16}}</ref>

=== Functions ===
PHP defines a large array of functions in the core language and many are also available in various extensions; these functions are well documented in the online PHP documentation.<ref name="functions" /> However, the built-in library has a wide variety of naming conventions and associated inconsistencies, as described under [[#ORGANIC|history]] above.

Custom functions may be defined by the developer, e.g.:
<syntaxhighlight lang="php">
// define a function, this one is named "myAge"
function myAge(Int $birthYear) : String {

 // calculate the age
 $yearsOld = date('Y') - $birthYear;

 // return the age in a descriptive form
 return $yearsOld . ' year' . ($yearsOld != 1 ? 's' : '');
}

// Next, output the text concatenated
// with the return value of myAge()
// As the result of the syntax "myAge()", the myAge function is called.
echo 'I am currently ' . myAge(1995) . ' old.';
</syntaxhighlight>

In {{CURRENTYEAR}}, the output of the above sample program is 'I am currently {{#expr: {{CURRENTYEAR}} - 1995}} years old.'

In lieu of [[function pointer]]s, functions in PHP can be referenced by a string containing their name. In this manner, normal PHP functions can be used, for example, as [[Callback function|callbacks]] or within [[function table]]s.<ref name="variable-functions" /> User-defined functions may be created at any time without being [[Function prototype|prototyped]].<ref name="functions">{{cite web
| url = http://www.php.net/manual/en/functions.user-defined.php
| title = User-defined functions (PHP manual)
| date = 2014-07-04 | access-date = 2014-07-07
| website = php.net
}}</ref><ref name="variable-functions">{{cite web
| url = http://www.php.net/manual/en/functions.variable-functions.php
| title = Variable functions (PHP manual)
| date = 2014-07-04 | access-date = 2014-07-07
| website = php.net
}}</ref> Functions may be defined inside code blocks, permitting a [[dynamic dispatch|run-time decision]] as to whether or not a function should be defined. There is a <code>function_exists</code> function that determines whether a function with a given name has already been defined. Function calls must use parentheses, with the exception of zero-argument class [[constructor (computer science)|constructor]] functions called with the PHP operator ''new'', in which case parentheses are optional.

Until PHP 5.3, support for [[anonymous functions]] and [[Closure (computer science)|closures]] did not exist in PHP. While <code>create_function()</code> exists since PHP 4.0.1, it is merely a thin wrapper around <code>eval()</code> that allows normal PHP functions to be created during program execution.<ref>{{cite web
| url = http://www.php.net/manual/en/function.create-function.php
| title = create_function() (PHP manual)
| date = 2014-07-04 | access-date = 2014-07-07
| website = php.net
}}</ref> PHP 5.3 added syntax to define an anonymous function or "closure"<ref>{{cite web
| url = http://www.php.net/manual/en/functions.anonymous.php
| title = Anonymous functions (PHP manual)
| date = 2014-07-04 | access-date = 2014-07-07
| website = php.net
}}</ref> which can capture variables from the surrounding scope:

<syntaxhighlight lang="php">
function getAdder($x) {
 return function($y) use ($x) {
 return $x + $y;
 };
}

$adder = getAdder(8);
echo $adder(2); // prints "10"
</syntaxhighlight>

In the example above, <code>getAdder()</code> function creates a closure using passed argument {{code|lang=php|code=$x}} (the keyword <code>use</code> imports a variable from the lexical context), which takes an additional argument {{code|lang=php|code=$y}}, and returns the created closure to the caller. Such a function is a first-class object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc.<ref>{{cite web
| url = http://wiki.php.net/rfc/closures
| title = Request for Comments: Lambda functions and closures
| date = 2008-07-01 | access-date = 2014-07-07
| author1 = Christian Seiler | author2 = Dmitry Stogov
| website = php.net
}}</ref>

Unusually for a dynamically typed language, PHP supports type declarations on function parameters, which are enforced at runtime. This has been supported for classes and interfaces since PHP&nbsp;5.0, for arrays since PHP&nbsp;5.1, for "callables" since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP&nbsp;7.0.<ref name="scalar-types" /> PHP&nbsp;7.0 also has type declarations for function return types, expressed by placing the type name after the list of parameters, preceded by a colon.<ref name="return-types" /> For example, the <code>getAdder</code> function from the earlier example could be annotated with types like so in PHP&nbsp;7:

<syntaxhighlight lang="php">
function getAdder(int $x): \Closure {
 return function(int $y) use ($x) : int {
 return $x + $y;
 };
}

$adder = getAdder(8);
echo $adder(2); // prints "10"
echo $adder(null); // throws an exception because an incorrect type was passed
$adder = getAdder([]); // would also throw an exception
</syntaxhighlight>

By default, scalar type declarations follow weak typing principles. So, for example, if a parameter's type is <code>int</code>, PHP would allow not only integers, but also convertible numeric strings, floats or booleans to be passed to that function, and would convert them.<ref name="scalar-types" /> However, PHP 7 has a "strict typing" mode which, when used, disallows such conversions for function calls and returns within a file.<ref name="scalar-types" />

=== PHP Objects ===
Basic [[object-oriented programming]] functionality was added in PHP 3 and improved in PHP 4.<ref name="about PHP" /> This allowed for PHP to gain further abstraction, making creative tasks easier for programmers using the language. Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance.<ref name="php 5 objects" /> In previous versions of PHP, objects were handled like [[value type]]s.<ref name="php 5 objects">{{cite web|access-date=2008-03-16|url=http://mjtsai.com/blog/2004/07/15/php-5-object-references/|title=PHP 5 Object References |website=mjtsai.com}}</ref> The drawback of this method was that code had to make heavy use of PHP's "reference" variables if it wanted to modify an object it was passed rather than creating a copy of it. In the new approach, objects are referenced by [[handle (computing)|handle]], and not by value.

PHP 5 introduced private and protected [[member variable]]s and methods, along with [[abstract type|abstract classes]], [[final type|final classes]], [[abstract method]]s, and [[final method]]s. It also introduced a standard way of declaring [[constructor (computer science)|constructors]] and [[destructor (computer science)|destructors]], similar to that of other object-oriented languages such as [[C++]], and a standard [[exception handling]] model. Furthermore, PHP 5 added [[interface (computing)|interface]]s and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. [[object (computer science)|Objects]] implementing ArrayAccess can be used with [[array data type|array]] syntax and objects implementing [[Iterator]] or [[IteratorAggregate]] can be used with the <code>foreach</code> [[language construct]]. There is no [[virtual table]] feature in the engine, so [[static variable]]s are bound with a name instead of a reference at compile time.<ref name="zend engine 2">{{cite web|access-date=2008-03-16|url=http://www.php.net/zend-engine-2.php|title=Classes and Objects (PHP 5) |publisher=The PHP Group}}</ref>

If the developer creates a copy of an object using the reserved word <code>clone</code>, the Zend engine will check whether a <code>__clone()</code> method has been defined. If not, it will call a default <code>__clone()</code> which will copy the object's properties. If a <code>__clone()</code> method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so the programmer can start with a by-value [[wikt:replica|replica]] of the source object and only override properties that need to be changed.<ref>{{cite web|access-date=2008-03-16|url=http://www.php.net/language.oop5.cloning|title=Object cloning |publisher=The PHP Group}}</ref>

The following is a basic example of [[object-oriented programming]] in PHP:

<syntaxhighlight lang="php">
class Person
{
   public $firstName;
   public $lastName;

   public function __construct($firstName, $lastName = '') { // optional second argument
     $this->firstName = $firstName;
     $this->lastName = $lastName;
   }

   public function greet() {
     return 'Hello, my name is ' . $this->firstName .
       (($this->lastName != '') ? (' ' . $this->lastName) : '') . '.';
   }

   public static function staticGreet($firstName, $lastName) {
     return 'Hello, my name is ' . $firstName . ' ' . $lastName . '.';
   }
}

$he = new Person('John', 'Smith');
$she = new Person('Sally', 'Davis');
$other = new Person('iAmine');

echo $he->greet(); // prints "Hello, my name is John Smith."
echo '<br />';

echo $she->greet(); // prints "Hello, my name is Sally Davis."
echo '<br />';

echo $other->greet(); // prints "Hello, my name is iAmine."
echo '<br />';

echo Person::staticGreet('Jane', 'Doe'); // prints "Hello, my name is Jane Doe."
</syntaxhighlight>

The [[visibility (computer science)|visibility]] of PHP properties and methods is defined using the [[keyword (computer programming)|keywords]] <code>public</code>, <code>private</code>, and <code>protected</code>. The default is public, if only [[variable (programming)|var]] is used; <code>var</code> is a synonym for <code>public</code>. Items declared <code>public</code> can be accessed everywhere. <code>protected</code> limits access to [[inherited class]]es (and to the class that defines the item). <code>private</code> limits visibility only to the class that defines the item.<ref>{{cite web|url=http://theserverpages.com/php/manual/en/language.oop5.visibility.php |title= Visibility (PHP Manual) |website=theserverpages.com |date=2005-05-19 |access-date=2010-08-26}}</ref> Objects of the same type have access to each other's private and protected members even though they are not the same instance.

== Implementations ==
The original, only complete and most widely used PHP implementation is powered by the [[Zend Engine]] and known simply as PHP. To disambiguate it from other implementations, it is sometimes unofficially called "Zend PHP". The Zend Engine [[Compiler|compiles]] PHP [[source code]] on-the-fly into an internal format that it can execute, thus it works as an [[Interpreter (computing)|interpreter]].<ref>{{cite web|access-date=2009-11-04|url=http://www.linux-tutorial.info/modules.php?name=Howto&pagename=Unix-and-Internet-Fundamentals-HOWTO/languages.html|title=How do computer languages work?}}</ref><ref>{{cite book|title=Beginning PHP and MySQL 5: From Novice to Professional|author=Gilmore, W. Jason |page=43 |date=2006-01-23 |publisher=Apress |isbn=1590595521 }}</ref> It is also the "reference implementation" of PHP, as PHP has no formal specification, and so the semantics of Zend PHP define the semantics of PHP. Due to the complex and nuanced semantics of PHP, defined by how Zend works, it is difficult for competing implementations to offer complete compatibility.

PHP's single-request-per-script-execution model, and the fact the Zend Engine is an interpreter, leads to inefficiency; as a result, various products have been developed to help improve PHP performance. In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine's internal format by using an [[opcode]] cache, which works by [[Cache (computing)|caching]] the compiled form of a PHP script (opcodes) in [[Shared memory (interprocess communication)|shared memory]] to avoid the overhead of [[parsing]] and [[compiling]] the code every time the script runs. An opcode cache, [[Zend Opcache]], is built into PHP since version 5.5.<ref>{{cite web
| title = [VOTE] Integrating Zend Optimizer+ into the PHP distribution
| url = http://news.php.net/php.internals/66531
| access-date = 2013-03-08
| website = news.php.net
}}</ref> Another example of a widely used opcode cache is the [[Alternative PHP Cache]] (APC), which is available as a [[PHP Extension Community Library|PECL]] extension.<ref>{{cite web
| url = http://www.php.net/manual/en/book.apc.php
| title = Alternative PHP Cache
| access-date = 2013-09-21
| website = PHP.net
}}</ref>

While Zend PHP is still the most popular implementation, several other implementations have been developed. Some of these are [[compiler]]s or support [[JIT compilation]], and hence offer performance benefits over Zend PHP at the expense of lacking full PHP compatibility. Alternative implementations include the following:

* [[HHVM]] (HipHop Virtual Machine)&nbsp;–  developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an [[intermediate language]]), which is then translated into x86-64 machine code dynamically at runtime by a [[Just-in-time compiler|just-in-time]] (JIT) compiler, resulting in up to 6× performance improvements.<ref>{{cite web|url=http://www.hhvm.com/blog/2813/we-are-the-98-5-and-the-16 |title=We are the 98.5% (and the 16%) « HipHop Virtual Machine |website=hhvm.com |date=December 2013 |access-date=2014-02-23}}</ref>
* [[Parrot virtual machine|Parrot]]&nbsp;–  a virtual machine designed to run dynamic languages efficiently; Pipp transforms the PHP source code into the [[Parrot intermediate representation]], which is then translated into the Parrot's bytecode and executed by the virtual machine.
* [[Phalanger (compiler)|Phalanger]]&nbsp;–  compiles PHP into [[Common Intermediate Language]] (CIL) bytecode
* [[Quercus (software)|Quercus]]&nbsp;–  compiles PHP into [[Java bytecode]]
* [[HipHop for PHP|HipHop]]&nbsp;–  developed at Facebook and available as open source, it transforms the PHP scripts into [[C++]] code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favor of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the <tt>create_function()</tt> and <tt>eval()</tt> constructs.<ref>{{cite web|title=Announcement on GitHub removing HPHPc support|url=https://github.com/facebook/hiphop-php/commit/fc5b95110ff75110ad55bb97f7c93a8c4eb68e3b|access-date=2013-05-24}}</ref>

== Licensing ==
PHP is [[free software]] released under the [[PHP License]], which stipulates that:<ref>{{cite web|url=http://www.php.net/license/3_01.txt |title=The PHP License, version 3.01|access-date=2010-05-20}}</ref>

{{quote
| Products derived from this software may not be called "PHP", nor may "PHP" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying "[[Foo]] for PHP" instead of calling it "PHP Foo" or "phpfoo".
}}

This restriction on use of "PHP" makes the PHP License incompatible with the [[General Public License]] (GPL), while the Zend License is incompatible due to an advertising clause similar to that of the original [[BSD license]].<ref>{{cite web | title = GPL-Incompatible, Free Software Licenses | url = https://www.gnu.org/licenses/license-list.html#GPLIncompatibleLicenses | work = Various Licenses and Comments about Them | publisher = Free Software Foundation|access-date=2011-01-03}}</ref>

== {{Anchor|PDO|ZEPHIR}}Development and community ==
PHP includes various [[list of PHP libraries|free and open-source libraries]] in its source distribution, or uses them in resulting PHP binary builds. PHP is fundamentally an [[Internet]]-aware system with built-in modules for accessing [[File Transfer Protocol]] (FTP) servers and many database servers, including [[PostgreSQL]], [[MySQL]], [[Microsoft SQL Server]] and [[SQLite]] (which is an embedded database), [[Lightweight Directory Access Protocol|LDAP]] servers, and others. Numerous functions familiar to C programmers, such as those in the [[stdio.h|stdio]] family, are available in standard PHP builds.<ref>{{cite web|access-date=2015-01-14|url=//php.net/manual/en/indexes.functions.php|title=PHP: Function and Method listing&nbsp;— Manual |publisher=The PHP Group}}</ref>

PHP allows developers to write [[Software extension|extensions]] in [[C (programming language)|C]] to add functionality to the PHP language. PHP extensions can be compiled statically into PHP or loaded dynamically at runtime. Numerous extensions have been written to add support for the [[Windows API]], process management on [[Unix-like]] [[operating system]]s, multibyte strings ([[Unicode]]), [[cURL]], and several popular [[archive format|compression formats]]. Other PHP features made available through extensions include integration with [[Internet Relay Chat|IRC]], dynamic generation of images and [[Adobe Flash]] content, ''PHP Data Objects'' (PDO) as an abstraction layer used for accessing databases,<ref>{{cite web|url=http://www.php.net/manual/en/intro.pdo.php |title=Introduction&nbsp;— Manual |website=php.net |date=2013-06-07 |access-date=2013-06-13}}</ref><ref>{{cite web|url=http://www.onlamp.com/pub/a/php/2004/08/05/dataobjects.html|title=Simplify Business Logic with PHP DataObjects&nbsp;— O'Reilly Media|author=Darryl Patterson|date=5 August 2004|website=ibm.com|access-date=16 December 2014}}</ref><ref>{{cite web|url=http://www-128.ibm.com/developerworks/db2/library/techarticle/dm-0612xia/|title=IBM&nbsp;— United States|work=IBM&nbsp;— United States|access-date=16 December 2014}}</ref><ref>{{cite web|url=http://www-128.ibm.com/developerworks/library/os-php-dbmistake/index.html |title=Five common PHP database problems |website=ibm.com |date=2006-08-01 |access-date=2013-06-13}}</ref><ref>{{cite web|url=http://www.redbooks.ibm.com/abstracts/sg247218.html|title=IBM Redbooks&nbsp;— Developing PHP Applications for IBM Data Servers|website=redbooks.ibm.com|access-date=16 December 2014}}</ref><ref>{{cite web|url=http://www.phparch.com/issue.php?mid=65|title=php[architect] Magazine - The Journal for PHP Programmers|website=www.phparch.com}}</ref><ref>{{cite web|url=http://www.infoworld.com/article/05/10/19/HNphpshow_1.html|title=PHP catching on at enterprises, vying with Java|last=Krill|first=Paul|date=19 October 2005|publisher=InfoWorld|archiveurl=https://web.archive.org/web/20140713004345/http://www.infoworld.com/d/developer-world/php-catching-enterprises-vying-java-708|archivedate=13 July 2014}}</ref> and even [[speech synthesis]]. Some of the language's core functions, such as those dealing with strings and arrays, are also implemented as extensions.<ref>{{cite web|url=http://lxr.php.net/xref/PHP_5_4/ext/standard/|archive-url=https://web.archive.org/web/20120316010914/http://lxr.php.net/xref/PHP_5_4/ext/standard/|dead-url=yes|archive-date=16 March 2012|title=Cross Reference: /PHP_5_4/ext/standard/|website=php.net|access-date=16 December 2014}}</ref> The [[PHP Extension Community Library]] (PECL) project is a repository for extensions to the PHP language.<ref>{{cite web|access-date=2008-02-25|url=http://www.devnewz.com/090902b.html|title=Developing Custom PHP Extensions |website=devnewz.com |date=2002-09-09 |archiveurl = https://web.archive.org/web/20080218045752/http://www.devnewz.com/090902b.html |archivedate = 2008-02-18}}</ref>

Some other projects, such as ''Zephir'', provide the ability for PHP extensions to be created in a high-level language and compiled into native PHP extensions. Such an approach, instead of writing PHP extensions directly in C, simplifies the development of extensions and reduces the time required for programming and testing.<ref>{{cite web
| url = http://docs.zephir-lang.com/en/latest/motivation.html
| title = Why Zephir?
| date = 2015-10-20 | access-date = 2015-12-14
| website = zephir-lang.com
}}</ref>

The PHP Group consists of ten people ({{as of|2015|lc=on}}): [[Thies C. Arntzen]], [[Stig Bakken]], [[Shane Caraveo]], [[Andi Gutmans]], [[Rasmus Lerdorf]], [[Sam Ruby]], [[Sascha Schumann]], [[Zeev Suraski]], [[Jim Winstead]], [[Andrei Zmievski]].<ref>{{cite web|title=PHP Credits|url=http://php.net/credits.php|website=php.net|access-date=2015-07-29}}</ref>

[[Zend Technologies]] provides a [[Zend Certified Engineer|PHP Certification]] based on PHP 5.5<ref>{{cite web|url=http://www.zend.com/en/services/certification/php-5-certification|title=Zend - Services - Certification - Php Certification|website=www.zend.com}}</ref> exam for programmers to become certified PHP developers.

== {{anchor|PHPFPM}}Installation and configuration ==
There are two primary ways for adding support for PHP to a web server&nbsp;–  as a native web server module, or as a CGI executable. PHP has a direct module interface called [[Server Application Programming Interface]] (SAPI), which is supported by many web servers including [[Apache HTTP Server]], [[Microsoft Internet Information Server|Microsoft IIS]], [[Netscape]] (now defunct) and [[iPlanet]]. Some other web servers, such as OmniHTTPd, support the [[Internet Server Application Programming Interface]] (ISAPI), which is a [[Microsoft]]'s web server module interface. If PHP has no module support for a web server, it can always be used as a [[Common Gateway Interface]] (CGI) or [[FastCGI]] processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.<ref name="installation">{{cite web
| url = http://www.php.net/manual/en/install.general.php
| title = General Installation Considerations
| access-date = 2013-09-22
| website = php.net
}}</ref>

PHP-FPM (FastCGI Process Manager) is an alternative FastCGI implementation for PHP, bundled with the official PHP distribution since version 5.3.3.<ref>{{cite web
| url = http://www.php.net/archive/2010.php#id2010-07-22-2
| title = News Archive: PHP 5.3.3 Released!
| date = 2010-07-22
| website = php.net}}</ref> When compared to the older FastCGI implementation, it contains some additional features, mostly useful for heavily loaded web servers.<ref>{{cite web
| url = http://www.php.net/manual/en/install.fpm.php
| title = FastCGI Process Manager (FPM)
| access-date = 2013-09-22
| website = php.net
}}</ref>

When using PHP for command-line scripting, a PHP [[command-line interface]] (CLI) executable is needed. PHP supports a CLI SAPI as of PHP 4.3.0.<ref>{{cite web
| url = http://www.php.net/manual/en/features.commandline.introduction.php
| title = Command line usage: Introduction
| access-date = 2013-09-22
| website = php.net
}}</ref> The main focus of this SAPI is developing [[command line interface|shell]] applications using PHP. There are quite a few differences between the CLI SAPI and other SAPIs, although they do share many of the same behaviors.<ref>{{cite web
| url = http://www.php.net/manual/en/features.commandline.differences.php
| title = Command line usage: Differences to other SAPIs
| access-date = 2013-09-22
| website = php.net
}}</ref>

PHP has a direct module interface called SAPI for different web servers;<ref name="php-installation2">{{cite web
|url = http://php.net/manual/en/install.general.php|title = General Installation Considerations|access-date = 2013-09-22|website = php.net}}</ref> in case of PHP&nbsp;5 and Apache&nbsp;2.0 on Windows, it is provided in form of a [[Dynamic-link library|DLL]] file called {{Mono|php5apache2.dll}},<ref>{{cite web|url = http://php.net/manual/en/install.windows.apache2.php|title = PHP: Apache 2.x on Microsoft Windows|access-date = 2013-09-22|website = php.net|deadurl = yes|archiveurl = https://web.archive.org/web/20130926122011/http://php.net/manual/en/install.windows.apache2.php|archivedate = 2013-09-26|df =}}</ref> which is a module that, among other functions, provides an interface between PHP and the web server, implemented in a form that the server understands. This form is what is known as a SAPI.

There are different kinds of SAPIs for various web server extensions. For example, in addition to those listed above, other SAPIs for the PHP language include the [[Common Gateway Interface]] (CGI) and [[command-line interface]] (CLI).<ref name="php-installation2" /><ref>{{cite web
|url = http://www.php.net/manual/en/features.commandline.introduction.php|title = Command line usage: Introduction|access-date = 2013-09-22|website = php.net}}</ref>

PHP can also be used for writing desktop [[graphical user interface]] (GUI) applications, by using the [[PHP-GTK]] extension. PHP-GTK is not included in the official PHP distribution,<ref name="installation" /> and as an extension it can be used only with PHP versions 5.1.0 and newer. The most common way of installing PHP-GTK is compiling it from the source code.<ref>{{cite web
| url = http://gtk.php.net/manual/en/tutorials.installation.php
| title = Installing PHP-GTK 2
| access-date = 2013-09-22
| website = php.net
}}</ref>

When PHP is installed and used in [[Cloud computing|cloud]] environments, [[software development kit]]s (SDKs) are provided for using cloud-specific features. For example:
* [[Amazon Web Services]] provides the AWS SDK for PHP<ref>{{cite web|url=http://aws.amazon.com/sdkforphp/ |title=AWS SDK for PHP |website=aws.amazon.com |access-date=2014-03-06}}</ref>
* [[Windows Azure]] can be used with the Windows Azure SDK for PHP.<ref>{{cite web |url=http://www.interoperabilitybridges.com/projects/php-sdk-for-windows-azure.aspx |title=Windows Azure SDK for PHP&nbsp;— Interoperability Bridges and Labs Center |website=interoperabilitybridges.com |access-date=2014-03-06 |deadurl=yes |archiveurl=https://web.archive.org/web/20140320152702/http://www.interoperabilitybridges.com/projects/php-sdk-for-windows-azure.aspx |archivedate=2014-03-20 |df=}}</ref>

Numerous configuration options are supported, affecting both core PHP features and extensions.<ref>{{cite web
| url = http://www.php.net/manual/en/configuration.php
| title = Runtime configuration: Table of contents
| access-date = 2013-09-22
| website = php.net
}}</ref><ref>{{cite web
| url = http://www.php.net/manual/en/ini.list.php
| title = php.ini directives: List of php.ini directives
| access-date = 2013-09-22
| website = php.net
}}</ref> Configuration file <code>php.ini</code> is searched for in different locations, depending on the way PHP is used.<ref>{{cite web
| url = http://www.php.net/manual/en/configuration.file.php
| title = Runtime configuration: The configuration file
| access-date = 2013-09-22
| publisher = PHP.net
}}</ref> The configuration file is split into various sections,<ref>{{cite web
| url = http://www.php.net/manual/en/ini.sections.php
| title = php.ini directives: List of php.ini sections
| access-date = 2013-09-22
| publisher = PHP.net
}}</ref> while some of the configuration options can be also set within the web server configuration.<ref>{{cite web
| url = http://www.php.net/manual/en/configuration.changes.modes.php
| title = Runtime configuration: Where a configuration setting may be set
| access-date = 2013-09-22
| publisher = PHP.net
}}</ref>

== Use ==
[[File:LAMP software bundle.svg|thumb|400px|A broad overview of the LAMP software bundle, displayed here together with [[Squid (software)|Squid]].]]

PHP is a general-purpose scripting language that is especially suited to [[server-side scripting|server-side]] [[web development]], in which case PHP generally runs on a [[web server]]. Any PHP code in a requested file is [[execution (computing)|executed]] by the PHP runtime, usually to create [[dynamic web page]] content or dynamic images used on websites or elsewhere.<ref>{{cite web|url=http://php.net/manual/en/book.image.php |title=PHP Manual Image Processing and GD; |publisher= php.net |access-date=2011-04-09}}</ref> It can also be used for [[command-line]] scripting and [[client-side]] [[graphical user interface]] (GUI) applications. PHP can be deployed on most web servers, many [[operating system]]s and [[computing platform|platforms]], and can be used with many [[relational database management system]]s (RDBMS). Most [[web hosting]] providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.<ref name="foundations">{{cite web|access-date=2008-02-25|url=http://www.onlamp.com/pub/a/php/2001/05/03/php_foundations.html|title=Embedding PHP in HTML |publisher=O'Reilly|date=2001-05-03}}</ref>

[[File:Scheme dynamic page en.svg|thumb|right|400px|Dynamic web page: example of [[server-side scripting]] (PHP and MySQL).]]
PHP acts primarily as a [[filter (software)|filter]],<ref>{{Cite web |url=http://gtk.php.net/manual1/it/html/intro.whatis.php.whatdoes.html |title=Archived copy |access-date=2018-12-04 |archive-url=https://web.archive.org/web/20080611231433/http://gtk.php.net/manual1/it/html/intro.whatis.php.whatdoes.html |archive-date=2008-06-11 |dead-url=yes |df= }}{{Failed verification|date=April 2010}}</ref> taking input from a file or stream containing text and/or PHP instructions and outputting another stream of data. Most commonly the output will be HTML, although it could be [[JSON]], [[XML]] or [[binary data]] such as image or audio formats. Since PHP 4, the PHP [[parser]] [[compiler|compiles]] input to produce [[bytecode]] for processing by the [[Zend Engine]], giving improved performance over its [[interpreter (computing)|interpreter]] predecessor.<ref>{{cite web|access-date=2008-02-25|url=http://cs.ua.edu/457/Notes/PHP%20and%20MySQL.ppt|title=PHP and MySQL |publisher=[[University of Alabama]] |archiveurl = https://web.archive.org/web/20080228003031/http://cs.ua.edu/457/Notes/PHP+and+MySQL.ppt <!-- Bot retrieved archive --> |archivedate = 2008-02-28}}</ref>

Originally designed to create dynamic [[web page]]s, PHP now focuses mainly on [[server-side scripting]],<ref>{{cite web|url=http://webmaster.iu.edu/PHPlanguage/index.shtml|title=PHP Server-Side Scripting Language|publisher=[[Indiana University]]|access-date=2008-02-25|date=2007-04-04}}</ref> and it is similar to other server-side scripting languages that provide dynamic content from a web server to a [[client (computing)|client]], such as [[Microsoft]]'s [[ASP.NET]], [[Sun Microsystems]]' [[JavaServer Pages]],<ref>{{cite web|url=http://java.sun.com/products/jsp/jspservlet.html|title=JavaServer Pages Technology&nbsp;— JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper|publisher=Sun Microsystems|access-date=2008-02-25}}</ref> and <tt>[[mod_perl]]</tt><!-- do not remove the underscore from mod_perl: it is part of the name -->. PHP has also attracted the development of many [[software framework]]s that provide building blocks and a design structure to promote [[rapid application development]] (RAD). Some of these include [[PRADO (framework)|PRADO]], [[CakePHP]], [[Symfony]], [[CodeIgniter]], [[Laravel]], [[Yii Framework]], [[Phalcon (framework)|Phalcon]] and [[Zend Framework]], offering features similar to other [[web framework]]s.

The [[LAMP (software bundle)|LAMP architecture]] has become popular in the web industry as a way of deploying web applications.<ref>{{cite web|url=http://www.ibm.com/developerworks/library/os-5waystunelamp/index.html|title=Five simple ways to tune your LAMP application}}</ref> PHP is commonly used as the ''P'' in this bundle alongside [[Linux]], [[Apache HTTP Server|Apache]] and [[MySQL]], although the ''P'' may also refer to [[Python (programming language)|Python]], [[Perl]], or some mix of the three. Similar packages, [[WAMP (software bundle)|WAMP]] and [[MAMP]], are also available for [[Microsoft Windows|Windows]] and [[OS X]], with the first letter standing for the respective operating system. Although both PHP and Apache are provided as part of the Mac OS X base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date.

{{As of|2007|04}}, over 20 million Internet domains had web services hosted on servers with PHP installed and <tt>mod_php</tt> was recorded as the most popular [[Apache HTTP Server]] module.<ref name="usage">{{cite web
| title=PHP: PHP Usage Stats
| url=http://www.php.net/usage.php
| publisher=SecuritySpace
| access-date=2008-02-24
| date=2007-04-01}}</ref> {{As of|2018|6}}, PHP was used as the server-side programming language on 83.5% of websites where the language could be determined.<ref name="W3Techs usage statistics_2010-10-29">{{cite web
| title=Usage of server-side programming languages for websites
| url=http://w3techs.com/technologies/overview/programming_language/all
| publisher=W3Techs
| access-date=2010-10-29
| date=2010-10-29}}</ref> [[Web content management system]]s written in PHP include [[MediaWiki]],<ref>{{cite web|url=http://www.mediawiki.org/w/index.php?title=Manual:Installation_requirements&oldid=299556#PHP |title=Manual:Installation requirements#PHP |publisher=MediaWiki |date=2010-01-25 |access-date=2010-02-26|quote=PHP is the programming language in which MediaWiki is written [...]}}</ref> [[Joomla]],<ref>{{cite web|url=http://www.joomla.org/about-joomla.html|title=Joomla!&nbsp;— Content Management System to build websites & apps|first=Alex|last=Kempkens|publisher=}}</ref> [[eZ Publish]], [[eZ Platform]], [[SilverStripe]],<ref>{{cite web|url=http://doc.silverstripe.org/framework/en/installation/server-requirements |title=Server requirements of SilverStripe|access-date=13 October 2014|quote=SilverStripe requires PHP 5.3.2+}}</ref> [[WordPress]],<ref>{{cite web|url=http://wordpress.org/about/ |title=About WordPress|access-date=2010-02-26|quote=WordPress was [...] built on PHP}}</ref> [[Drupal]],<ref>{{cite web|url=http://drupal.org/node/176052 |title=PHP and Drupal |publisher=Drupal.org |access-date=2010-06-13}}</ref> and [[Moodle]].<ref>{{cite web|url=http://docs.moodle.org/en/About_Moodle |title= About |publisher=Moodle.org |access-date=2009-12-20}}</ref> Websites written in PHP, in [[Front and back ends|back-end]] and/or user-facing portion, include [[Facebook]],<ref>{{cite web|url=http://blog.facebook.com/blog.php?post=2356432130 |title=PHP and Facebook &#124; Facebook |publisher=Blog.facebook.com |access-date=2009-07-29}}</ref> [[Digg]],<ref>{{cite web|url=http://www.oreillynet.com/onlamp/blog/2006/04/digg_phps_scalability_and_perf.html |title=PHP and Digg |publisher=O'Reilly |access-date=2010-06-13}}</ref> [[Tumblr]],<ref>{{cite web|title=PHP 7 at Tumblr|url=https://engineering.tumblr.com/post/152998126990/php-7-at-tumblr|website=Tumblr Engineering|date=4 November 2016}}</ref> [[Dailymotion]],<ref>{{cite web|title=PHP 7 deployment at Dailymotion|url=http://engineering.dailymotion.com/php-7-deployment-at-dailymotion/|website=Dailymotion engineering blog|date=3 October 2016}}</ref> and [[Slack (software)|Slack]].<ref>{{cite web|title=Taking PHP Seriously|url=https://slack.engineering/taking-php-seriously-cf7a60065329|website=Slack Engineering Blog|date=12 October 2016}}</ref>

For specific and more advanced usage scenarios, PHP offers a well defined and documented way for writing custom extensions in [[C (programming language)|C]] or [[C++]].<ref>{{cite web
| url = http://www.php.net/manual/en/internals2.structure.php
| title = PHP at the core: Extension structure
| access-date = 2013-09-22
| website = PHP.net
}}</ref><ref>{{cite web
| url = http://www.php.net/manual/en/internals2.counter.php
| title = PHP at the core: The "counter" Extension&nbsp;–  A Continuing Example
| access-date = 2013-09-22
| website = PHP.net
}}</ref><ref>{{cite web
| url = http://devzone.zend.com/303/extension-writing-part-i-introduction-to-php-and-zend/
| title = Extension Writing Part I: Introduction to PHP and Zend
| date = 2005-03-01 | access-date = 2013-09-22
| publisher = [[Zend Technologies]]
}}</ref><ref>{{cite web
| url = http://devzone.zend.com/317/extension-writing-part-ii-parameters-arrays-and-zvals/
| title = Extension Writing Part II: Parameters, Arrays, and ZVALs
| date = 2005-06-06 | access-date = 2013-09-22
| publisher = [[Zend Technologies]]
}}</ref><ref>{{cite web
| url = http://devzone.zend.com/318/extension-writing-part-ii-parameters-arrays-and-zvals-continued/
| title = Extension Writing Part II: Parameters, Arrays, and ZVALs (continued)
| date = 2005-06-06 | access-date = 2013-09-22
| publisher = [[Zend Technologies]]
}}</ref><ref>{{cite web
| url = http://devzone.zend.com/446/extension-writing-part-iii-resources/
| title = Extension Writing Part III: Resources
| date = 2006-05-12 | access-date = 2013-09-22
| publisher = [[Zend Technologies]]
}}</ref><ref>{{cite web
| url = http://devzone.zend.com/1435/wrapping-c-classes-in-a-php-extension/
| title = Wrapping C++ Classes in a PHP Extension
| date = 2009-04-22 | access-date = 2013-09-22
| publisher = [[Zend Technologies]]
}}</ref> Besides extending the language itself in form of additional [[Library (computing)|libraries]], extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true [[compiled language]].<ref>{{cite web
| url = http://stackoverflow.com/questions/1110682/extending-php-with-c/1966341
| title = Extending PHP with C++?
| access-date = 2013-09-22
| publisher = [[Stack Overflow]]
}}</ref><ref>{{cite web
| url = http://stackoverflow.com/questions/1502244/how-can-i-use-c-code-to-interact-with-php
| title = How can I use C++ code to interact with PHP?
| access-date = 2013-09-22
| publisher = [[Stack Overflow]]
}}</ref> PHP also offers well defined ways for embedding itself into other software projects. That way PHP can be easily used as an internal [[scripting language]] for another project, also providing tight interfacing with the project's specific internal [[data structure]]s.<ref>{{cite book
| title = Extending and Embedding PHP
| first = Sara | last = Golemon
| year = 2006
| isbn = 978-0-672-32704-9
}}</ref>

PHP received mixed reviews due to lacking support for [[Multithreading (software)|multithreading]] at the core language level,<ref>{{cite web
| url = https://bugs.php.net/bug.php?id=46919
| title = Bug Request #46919: Multi threading
| access-date = 2013-09-22
| website = PHP.net
}}</ref> though using threads is made possible by the "pthreads" [[PHP Extension Community Library|PECL]] extension.<ref>{{cite web
| url = http://www.php.net/manual/en/intro.pthreads.php
| title = pthreads: Introduction (PHP Manual)
| access-date = 2013-09-22
| website = PHP.net
}}</ref><ref>{{cite web|url=http://pecl.php.net/package/pthreads |title=PECL :: Package :: pthreads |website=pecl.php.net |access-date=2014-02-09}}</ref>

{{As of|2013|1}}, PHP was used in more than 240 million [[website]]s (39% of those sampled) and was installed on 2.1 million [[web server]]s.<ref>{{cite web | url=http://news.netcraft.com/archives/2013/01/31/php-just-grows-grows.html | title=PHP just grows & grows | date=2013-01-31 | access-date=2013-04-01 | author=Ide, Andy}}</ref>

A command line interface, php-cli, and two [[ActiveX]] [[Windows Script Host]] scripting engines for PHP have been produced.

== {{Anchor|REGISTER-GLOBALS}}Security ==
In 2017, 3% of all vulnerabilities listed by the [[National Vulnerability Database]] were linked to PHP;<ref name="CVE">{{cite web | url=http://web.nvd.nist.gov/view/vuln/search/&q=PHP | title=National Vulnerability Database (NVD) Search Vulnerabilities | access-date=2014-03-19}}{{dead link|date=March 2018 |bot=InternetArchiveBot |fix-attempted=yes}}</ref> historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (22 in 2009, about 1% of the total although PHP applies to about 20% of programs listed).<ref name="PHP-related vulnerabilities on the National Vulnerability Database">{{cite web
| url=http://www.coelho.net/php_cve.html
| title=PHP-related vulnerabilities on the National Vulnerability Database
| date=2012-07-05
| access-date=2013-04-01
}}</ref> Recognizing that programmers make mistakes, some languages include [[taint checking]] to automatically detect the lack of [[data validation|input validation]] which induces many issues. Such a feature is being developed for PHP,<ref>{{cite web |title=PHP Taint Mode RFC|url=http://wiki.php.net/rfc/taint}}</ref> but its inclusion into a release has been rejected several times in the past.<ref>{{cite web
| url=http://derickrethans.nl/files/meeting-notes.html#sand-boxing-or-taint-mode <!-- formerly at https://php.net/~derick/meeting-notes.html#sand-boxing-or-taint-mode -->
| title=Developer Meeting Notes, Nov. 2005}}</ref><ref>{{cite web
|url = http://devzone.zend.com/article/2798-Zend-Weekly-Summaries-Issue-368#Heading1
|title = Taint mode decision, November 2007
|deadurl = yes
|archiveurl = https://web.archive.org/web/20090226124957/http://devzone.zend.com/article/2798-Zend-Weekly-Summaries-Issue-368#Heading1
|archivedate = 2009-02-26
|df = 
}}</ref>

There are advanced protection patches such as [[Suhosin]] and [[hardening (computing)|Hardening]]-Patch, especially designed for web hosting environments.<ref>{{cite web
| title=Hardened-PHP Project
| url=http://www.hardened-php.net
| date=2008-08-15}}</ref>

Historically, old versions of PHP had some configuration parameters and default values for such runtime settings that made some PHP applications prone to security issues. Among these, <tt>[[magic quotes|magic_quotes_gpc]]</tt> and <tt>register_globals</tt><ref name="register-globals">{{cite web
| url = http://php.net/manual/en/security.globals.php
| title = Security: Using Register Globals | work = PHP Manual
| access-date = 2013-09-22
| publisher = PHP.net
}}</ref> configuration directives were the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for "[[magic quotes]]" and "register globals" settings has been deprecated as of PHP 5.3.0, and removed as of PHP 5.4.0.<ref name="magic-quotes">{{cite web
| url = http://www.php.net/manual/en/security.magicquotes.php
| title = Magic Quotes | work = PHP Manual
| access-date = 2014-01-17
| publisher = PHP.net
}}</ref>

Another example for the potential runtime settings vulnerability comes from failing to disable PHP execution (e.g. via <tt>engine</tt> configuration directive)<ref>{{cite web
| url = http://www.php.net/manual/en/apache.configuration.php#ini.engine
| title = 'engine' configuration directive
| work = PHP: Runtime Configuration
| access-date = 2014-02-13
| publisher = PHP.net
}}</ref> for the directory where uploaded files are stored; enabling it can result in execution of malicious PHP code embedded within the uploaded files, e.g. when allowing users to upload images.<ref>{{cite web
| url = http://devzone.zend.com/1008/php-security-exploit-with-gif-images/
| title = PHP Security Exploit With GIF Images
| date = 2007-06-22 | access-date = 2013-09-22
}}</ref><ref>{{cite web
| url = http://www.phpclasses.org/blog/post/67-PHP-security-exploit-with-GIF-images.html
| title = PHP security exploit with GIF images
| date = 2007-06-20 | access-date = 2013-09-22
| publisher = PHP Classes blog
}}</ref><ref>{{cite web
|url = http://ha.ckers.org/blog/20070604/passing-malicious-php-through-getimagesize/
|title = Passing Malicious PHP Through getimagesize()
|date = 2007-06-04
|access-date = 2013-09-22
|deadurl = yes
|archiveurl = https://web.archive.org/web/20130921222424/http://ha.ckers.org/blog/20070604/passing-malicious-php-through-getimagesize
|archivedate = 2013-09-21
|df = 
}}</ref> The best practice is to either locate the image directory outside of the document root available to the web server and serve it via intermediary script, or disable PHP execution for the directory which stores the uploaded files. 

Also, enabling the dynamic loading of PHP extensions (via <tt>enable_dl</tt> configuration directive)<ref>{{cite web
| url = http://www.php.net/manual/en/info.configuration.php#ini.enable-dl
| title = 'enable_dl' configuration directive
| work = PHP: Runtime Configuration
| access-date = 2014-02-13
| publisher = PHP.net
}}</ref> in a [[shared web hosting]] environment can lead to security issues.<ref>{{cite web
| url = http://php.net/manual/en/function.dl.php
| title = PHP function reference: dl()
| access-date = 2013-09-22
| publisher = PHP.net
}}</ref><ref>{{cite web
| url = http://www.webhostingtalk.com/showthread.php?t=514779
| title = My host won't fix their Trojan
| access-date = 2013-09-22
| publisher = WebHosting Talk
}}</ref>

Implied [[type conversion]]s that result in different values being treated as equal, sometimes against the programmer's intent, can lead to security issues. For example, the result of the comparison ''<code>0e1234 == 0</code>'' is ''<code>true</code>'', because the first compared value is treated as [[scientific notation]] having the value ({{val|0|e=1234}}), i.e. ''zero''. Errors like this resulted in authentication vulnerabilities in [[Simple Machines Forum]],<ref>{{cite web|url=http://raz0r.name/vulnerabilities/simple-machines-forum/|title= Simple Machines Forum <= 2.0.3 Admin Password Reset|author=Raz0r}}</ref> [[Typo3]]<ref>{{cite web|url=http://blog.nibblesec.org/2010/12/typo3-sa-2010-020-typo3-sa-2010-022.html|title=TYPO3-SA-2010-020, TYPO3-SA-2010-022 EXPLAINED|author=Nibble Security}}</ref> and [[phpBB]]<ref>{{cite web|url=http://ahack.ru/articles/cryptographic-security-and-php-applications.htm|title=Криптостойкость и небезопасное сравнение|author=Ahack.ru}}</ref> when [[MD5]] [[password hashing|password hashes]] were compared. The recommended way is to use [https://secure.php.net/hash_equals hash_equals()] (for [[timing attack]] safety), [[strcmp]] or the identity operator (''<code>===</code>''), as ''<code>0e1234 === 0</code>'' results in ''<code>false</code>''.<ref>{{cite web|url=http://www.php.net/manual/en/language.operators.comparison.php |title=Comparison operators |publisher=PHP.net}}</ref>

In a 2013 analysis of over 170,000 [[website defacement]]s, published by [[Zone-H]], the most frequently (53%) used technique was exploitation of [[file inclusion vulnerability]], mostly related to insecure usage of the PHP functions ''include'', ''require'', and ''allow_url_fopen''.<ref>{{cite web | url=https://ipsec.pl/web-application-security/most-common-attacks-web-applications.html | title=Most common attacks on web applications | publisher=IPSec.pl | date=2013 | access-date=2015-04-15 | author=Pawel Krawczyk}}</ref><ref>{{cite web | url=https://ipsec.pl/application-security/2013/so-what-are-most-critical-application-flaws-new-owasp-top-10.html | title=So what are the "most critical" application flaws? On new OWASP Top 10 | publisher=IPSec.pl | date=2013 | access-date=2015-04-15 | author=Pawel Krawczyk}}</ref>

== See also ==
{{Portal|PHP|Computer programming|Free and open-source software}}

{{Div col|colwidth=25em}}
* [[Comparison of programming languages]]
* [[Comparison of web frameworks]]
* [[Hack (programming language)]]
* [[List of AMP packages]]
* [[List of PHP accelerators]]
* [[List of PHP editors]]
* [[PEAR]] (PHP Extension and Application Repository)
* [[PHP accelerator]]
* [[PHP Extension Community Library]] (PECL)
* [[PHP-GTK]]
* [[Template processor]]
* [[XAMPP]] (Free and open-source cross-platform web server solution stack package)
* [[Zend Server]]
{{div col end}}

== References ==
{{Reflist|30em}}

==Further reading==
* {{cite journal |quote=What's the Absolute Minimum I Must Know About PHP? |url= https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/ |title=What is Code? |author=Paul Ford |date=June 11, 2015 |journal=[[Bloomberg Businessweek]]}}

== External links ==
{{Sister project links|wikt=no|commons=Category:PHP|v=Topic:PHP|n=no|q=no|s=no|b=PHP Programming|voy=no|mw=PHP}}
{{Spoken Wikipedia|En-PHP.ogg|2011-11-23}}

* {{Official website}}
* {{Curlie|Computers/Programming/Languages/PHP}}
* [http://php.net/manual/ PHP Reference Manual]
* {{GitHub|php/php-src|PHP source code repository}}
* [https://www.symfony.fi/entry/php-and-symfony-structure-stability-and-flexibility PHP and Symfony: Structure, Stability and Flexibility]

{{PHP}}
{{Web interfaces}}
{{Programming languages}}
{{FOSS}}

{{Authority control}}

[[Category:Programming languages]]
[[Category:Articles with example code]]
[[Category:Class-based programming languages]]
[[Category:Cross-platform software]]
[[Category:Dynamic programming languages]]
[[Category:Dynamically typed programming languages]]
[[Category:Filename extensions]]
[[Category:Free compilers and interpreters]]
[[Category:High-level programming languages]]
[[Category:Internet terminology]]
[[Category:Object-oriented programming languages]]
[[Category:PHP software]]
[[Category:PHP]]
[[Category:Procedural programming languages]]
[[Category:Programming languages created in 1995]]
[[Category:Scripting languages]]
[[Category:Software using the PHP license]]
[[Category:Text-oriented programming languages]]
[[Category:1995 software]]