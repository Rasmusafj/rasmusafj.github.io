{{Use mdy dates|date=March 2014}}
{{Infobox software
| logo                   = [[File:Postgresql elephant.svg|120px]]
| developer              = PostgreSQL Global Development Group
| released               = {{Start date and age|1996|7|8|br=yes|df=yes}}<ref name="birthday" />
| latest release version = <!-- If you update this, remember to also update [[Comparison of relational database management systems]]-->11.1
| latest release date    = {{Start date and age|2018|11|08|br=yes|df=yes}}<ref>{{Cite web
 | url       = https://www.postgresql.org/about/news/1905/
 | title     = PostgreSQL 11.1, 10.6, 9.6.11, 9.5.15, 9.4.20, and 9.3.25 Released!
 | publisher = The PostgreSQL Global Development Group
 | date      = 2018-11-08
 | website   = PostgreSQL|language=en|access-date=2018-11-09}}</ref>
| latest preview version = 
| latest preview date    = 
| operating system       = Most [[Unix-like]] operating systems and [[Microsoft Windows|Windows]]
| programming language   = [[C (programming language)|C]]
| genre                  = [[Object-relational database|ORDBMS]]
| license                = PostgreSQL License ([[free and open-source]], [[permissive software licence|permissive]])<ref name="about/licence" /><ref name="approved by OSI" /><ref name="OSI" />
| website                = {{URL|https://postgresql.org}}
}}
{{Infobox software license
| name            = PostgreSQL License<ref name="about/licence" />
| image           = 
| caption         = PostgreSQL License
| author          = 
| version         = 
| publisher       = 
| date            = 
| OSI approved    = Yes<ref name="OSI" />
| Debian approved = Yes<ref>{{cite web|url=https://packages.debian.org/sid/postgresql|title=Debian -- Details of package postgresql in sid|work=debian.org}}</ref><ref>{{cite web|url=https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing|title=Licensing:Main |work=FedoraProject}}</ref>
| FSF approved    = Yes<ref>{{cite web|url=http://directory.fsf.org/wiki/PostgreSQL|title=PostgreSQL|work=fsf.org}}</ref>
| GPL compatible  = Yes
| copyleft        = No
| linking         = Yes
| website         = {{URL|https://postgresql.org/about/licence}}
}}

'''PostgreSQL''', often simply '''Postgres''', is an [[object-relational database management system]] (ORDBMS) with an emphasis on extensibility and standards compliance. It can handle workloads ranging from small single-machine applications to large [[Web service|Internet-facing applications]] (or for [[data warehousing]]) with many [[concurrent user]]s; on [[macOS Server]], PostgreSQL is the default database;<ref name="OS X Lion Server" /><!--not listing when first, that version is EOL; assume in all later--><ref name="MySQL not included" /><ref name="OS X" /> and it is also available for [[Microsoft Windows]] and [[Linux]] (supplied in most distributions).

PostgreSQL is [[ACID]]-compliant and [[Transaction processing|transactional]]. PostgreSQL has updatable [[View (SQL)|views]] and [[materialized view]]s, [[Database trigger|triggers]], [[foreign key]]s; supports functions and stored procedures, and other expandability.<ref name="intro-whatis" />

PostgreSQL is developed by the PostgreSQL Global Development Group, a diverse group of many companies and individual contributors.<ref name="contributors" /> It is [[free and open-source]], released under the terms of the PostgreSQL License, a [[permissive software license]].

== Name ==
PostgreSQL's developers pronounce PostgreSQL as {{IPAc-en|ˈ|p|oʊ|s|t|ɡ|ɹ|ɛ|s|_|ˌ|k|juː|_|ˈ|ɛ|l}}.<ref name="Audio sample" /> It is abbreviated as ''Postgres'' because of ubiquitous support for the [[SQL]] standard among (at least [[SQL:2003|early]] version of) most relational databases. PostgreSQL implements features of old and up to [[SQL:2011|later]] versions. Originally named POSTGRES, the name (Post [[Ingres (database)|Ingres]]) refers to the project's origins in that database which was developed at [[University of California, Berkeley]].<ref name="design" /><ref name="about/history" /> The community considered changing the name back to Postgres; however, the PostgreSQL Core Team announced in 2007 that the product would continue to use the name PostgreSQL.<ref name="Project name" />

== History ==
PostgreSQL evolved from the [[Ingres (database)|Ingres]] project at the University of California, Berkeley. In 1982, the leader of the Ingres team, [[Michael Stonebraker]], left Berkeley to make a proprietary version of Ingres.<ref name="design" /> He returned to Berkeley in 1985, and started a post-Ingres project to address the problems with contemporary database systems that had become increasingly clear during the early 1980s. He got the [[Turing Award]] in 2014 for e.g. these projects<ref>{{Cite web|url=https://amturing.acm.org/award_winners/stonebraker_1172121.cfm|title=Michael Stonebraker - A.M. Turing Award Winner|quote=Techniques pioneered in Postgres were widely implemented [..] Stonebraker is the only Turing award winner to have engaged in serial entrepreneurship on anything like this scale, giving him a distinctive perspective on the academic world.|website=amturing.acm.org|language=en|access-date=2018-03-20}}</ref> and techniques pioneered in them.

The new project, POSTGRES, aimed to add the fewest features needed to completely support [[data type|types]].<ref name="Stonebraker" /> These features included the ability to define types and to fully describe relationships{{snd}} something used widely before but maintained entirely by the user. In POSTGRES, the database understood relationships, and could retrieve information in related tables in a natural way using ''rules''. POSTGRES used many of the ideas of Ingres, but not its code.<ref name="pavel-history" />

Starting in 1986, the POSTGRES team published a number of papers describing the basis of the system, and by 1987 had a prototype version shown at the 1988 [[SIGMOD|ACM SIGMOD Conference]]. The team released version 1 to a small number of users in June 1989, then version 2 with a re-written rules system in June 1990. Version 3, released in 1991, again re-wrote the rules system, and added support for multiple storage managers{{citation needed|date=February 2017}} and an improved query engine. By 1993, the great number of users began to overwhelm the project with requests for support and features. After releasing version 4.2<ref name="University POSTGRES" /> on June 30, 1994{{snd}} primarily a cleanup{{snd}} the project ended. Berkeley had released POSTGRES under an [[MIT License|MIT-style license]], which enabled other developers to use the code for any use. At the time, POSTGRES used an Ingres-influenced [[QUEL query languages|POSTQUEL query language]] interpreter, which could be interactively used with a [[console application]] named <tt>monitor</tt>.<!-- See http://db.cs.berkeley.edu/postgres-v4r2/postgres-setup.ps -->

In 1994, Berkeley graduate students Andrew Yu and Jolly Chen replaced the POSTQUEL query language interpreter with one for the SQL query language, creating Postgres95. The front-end program <tt>monitor</tt> was also replaced by <tt>psql</tt>. Yu and Chen announced the first version (0.01) to [[beta tester]]s on May 5, 1995.<!-- email lists are not citeable, however see message 3165 of |url=http://db.cs.berkeley.edu/postgres-v4r2/mail-archive/1995.05.tar.gz |title=Announcement: Postgres95 Beta |author=Andrew K. Yu |date=1 May 1995 --> Version 1.0 of Postgres95 was announced on September 5, 1995, with a more liberal license that enabled the software to be freely modifiable for any purpose.<!-- message 3279 of |url=http://db.cs.berkeley.edu/postgres-v4r2/mail-archive/1995.09.tar.gz |title=ANNOUNCEMENT for postgres95 version 1.0 |author=Jolly Chen |date=September 5, 1995 -->

On July 8, 1996, Marc Fournier at Hub.org Networking Services provided the first non-university development server for the open-source development effort.<ref name="birthday" /> With the participation of Bruce Momjian and Vadim B. Mikheev, work began to stabilize the code inherited from Berkeley.

In 1996, the project was renamed to PostgreSQL to reflect its support for SQL. The online presence at the website PostgreSQL.org began on October 22, 1996.<ref name="20th anniversary" /> The first PostgreSQL release formed version 6.0 on January 29, 1997. Since then a group of developers and volunteers around the world have maintained the software as The PostgreSQL Global Development Group.<ref name="contributors" />

The PostgreSQL project continues to make major releases (approximately annually) and minor bugfix releases, all available under its [[free and open-source software]] PostgreSQL License. Code comes from contributions from proprietary vendors, support companies, and open-source programmers at large.

== Development ==
PostgreSQL does not have a bug tracker (while it "has a bug-submission form that feeds into the pgsql-bugs [[electronic mailing list|mailing list]]"), making it quite difficult to know the status of bugs.<ref>{{Cite web|url=https://lwn.net/Articles/660468/|title=A bug tracker for PostgreSQL? [LWN.net]|website=lwn.net|author=Jake Edge |date=October 14, 2015 |access-date=2017-10-20}}</ref>

== Multiversion concurrency control (MVCC) ==
PostgreSQL manages [[concurrency control|concurrency]] through a system known as [[multiversion concurrency control]] (MVCC), which gives each transaction a "snapshot" of the database, allowing changes to be made without being visible to other transactions until the changes are committed. This largely eliminates the need for read locks, and ensures the database maintains the [[ACID (computer science)|ACID]] (atomicity, consistency, isolation, durability) principles in an efficient manner. PostgreSQL offers three levels of [[isolation (database systems)|transaction isolation]]: Read Committed, Repeatable Read and Serializable. Because PostgreSQL is immune to dirty reads, requesting a Read Uncommitted transaction isolation level provides read committed instead. PostgreSQL supports full [[serializability]] via the [[Snapshot isolation|serializable snapshot isolation]] (SSI) technique.<ref name="ports" />

== Storage and replication ==

=== Replication ===
PostgreSQL includes built-in binary replication based on shipping the changes ([[write-ahead logging|write-ahead logs]]) to replica nodes asynchronously, with the ability to run read-only queries against these replicated nodes. This allows splitting read traffic among multiple nodes efficiently. Earlier replication software that allowed similar read scaling normally relied on adding replication triggers to the master, introducing additional load onto it.

PostgreSQL also includes built-in synchronous replication<ref name="H Online" /> that ensures that, for each write transaction, the master waits until at least one replica node has written the data to its transaction log. Unlike other database systems, the durability of a transaction (whether it is asynchronous or synchronous) can be specified per-database, per-user, per-session or even per-transaction. This can be useful for work loads that do not require such guarantees, and may not be wanted for all data as it will have some negative effect on performance due to the requirement of the confirmation of the transaction reaching the synchronous standby.

There can be a mixture of synchronous and asynchronous standby servers. A list of synchronous standby servers can be specified in the configuration which determines which servers are candidates for synchronous replication. The first in the list which is currently connected and actively streaming is the one that will be used as the current synchronous server. When this fails, it falls to the next in line.

Synchronous [[multi-master replication]] is currently not included in the PostgreSQL core. Postgres-XC which is based on PostgreSQL provides scalable synchronous multi-master replication,<ref name="Postgres-XC" /> available in version 1.2.1 (April 2015 version) is licensed under the same license as PostgreSQL. A similar project is called [[Postgres-XL]]. Postgres-R is yet another older [[Fork (software development)|fork]].<ref name=postgres-r /> Bi-directional replication (BDR) is an asynchronous multi-master replication system for PostgreSQL.<ref name=bdr />

The community has also written some tools to make managing replication clusters easier, such as repmgr.

There are also several asynchronous trigger-based replication packages for PostgreSQL. These remain useful even after introduction of the expanded core capabilities, for situations where binary replication of an entire database cluster is not the appropriate approach:

* [[Slony-I]]
* Londiste, part of SkyTools (developed by [[Skype]])
* Bucardo multi-master replication (developed by [[Backcountry.com]])<ref name="Fischer" />
* [[SymmetricDS]] multi-master, multi-tier replication

=== Indexes ===
PostgreSQL includes built-in support for regular [[B-tree]] and [[Hash table|hash]] indexes, and four index access methods: generalized search trees ([[GiST]]), generalized [[inverted index]]es (GIN), Space-Partitioned GiST (SP-GiST)<ref name="SP-GiST" /> and [[Block Range Index]]es (BRIN). Hash indexes are implemented, but discouraged because they cannot be recovered after a crash or power loss, although this will no longer be the case from version 10.<ref name="crash_safe_hash_indexes" /> In addition, user-defined index methods can be created, although this is quite an involved process. Indexes in PostgreSQL also support the following features:

* [[Expression index]]es can be created with an index of the result of an expression or function, instead of simply the value of a column.
* [[Partial index]]es, which only index part of a table, can be created by adding a WHERE clause to the end of the CREATE INDEX statement. This allows a smaller index to be created.
* The planner is capable of using multiple indexes together to satisfy complex queries, using temporary in-memory [[bitmap index]] operations (useful in [[data warehouse|data warehousing]] applications for joining a large [[fact table]] to smaller [[dimension table]]s such as those arranged in a [[star schema]]).
* [[k-nearest neighbors algorithm|''k''-nearest neighbors (''k''-NN)]] indexing (also referred to KNN-GiST<ref name="KNN-GiST" />) provides efficient searching of "closest values" to that specified, useful to finding similar words, or close objects or locations with [[geographic data and information|geospatial]] data. This is achieved without exhaustive matching of values.
* Index-only scans often allow the system to fetch data from indexes without ever having to access the main table.
* PostgreSQL 9.5 introduced [[Block Range Index]]es (BRIN).

=== Schemas ===
In PostgreSQL, a [[Database schema|schema]] holds all objects (with the exception of roles and tablespaces). Schemas effectively act like namespaces, allowing objects of the same name to co-exist in the same database. By default, newly created databases have a schema called "public", but any additional schemas can be added, and the public schema isn't mandatory.

A {{code|search_path}} setting determines the order in which PostgreSQL checks schemas for unqualified objects (those without a prefixed schema). By default, it is set to {{code|$user, public}} ({{code|$user}} refers to the currently connected database user). This default can be set on a database or role level, but as it is a session parameter, it can be freely changed (even multiple times) during a client session, affecting that session only.

Non-existent schemas listed in search_path are silently skipped during objects lookup.

New objects are created in whichever valid schema (one that presently exists) appears first in the search_path.Schema is an outline of database.

=== Data types ===
A wide variety of native [[data type]]s are supported, including:

* Boolean
* [[Arbitrary-precision arithmetic|Arbitrary precision]] numerics
* Character (text, varchar, char)
* Binary
* Date/time (timestamp/time with/without timezone, date, interval)
* Money
* Enum
* Bit strings
* Text search type
* Composite
* HStore, an extension enabled key-value store within PostgreSQL<ref>https://www.linuxjournal.com/content/postgresql-nosql-database</ref> 
* Arrays (variable length and can be of any data type, including text and composite types) up to 1&nbsp;GB in total storage size
* Geometric primitives
* [[IPv4]] and [[IPv6]] addresses
* [[Classless Inter-Domain Routing|CIDR]] blocks and [[MAC address]]es
* [[XML]] supporting [[XPath]] queries
* [[Universally unique identifier|UUID]]
* [[JSON]], and a faster [[Binary code|binary]] JSONB (since version 9.4; not the same as [[BSON]]<ref name="jsonb" />)

In addition, users can create their own data types which can usually be made fully indexable via PostgreSQL's indexing infrastructures{{snd}} GiST, GIN, SP-GiST. Examples of these include the [[geographic information system]] (GIS) data types from the [[PostGIS]] project for PostgreSQL.

There is also a data type called a "domain", which is the same as any other data type but with optional constraints defined by the creator of that domain. This means any data entered into a column using the domain will have to conform to whichever constraints were defined as part of the domain.

A data type that represents a range of data can be used which are called range types. These can be discrete ranges (e.g. all integer values 1 to 10) or continuous ranges (e.g. any point in time between 10:00&nbsp;am and 11:00&nbsp;am). The built-in range types available include ranges of integers, big integers, decimal numbers, time stamps (with and without time zone) and dates.

Custom range types can be created to make new types of ranges available, such as IP address ranges using the inet type as a base, or float ranges using the float data type as a base. Range types support inclusive and exclusive range boundaries using the {{kbd|[}}/{{kbd|]}} and {{kbd|(}}/{{kbd|)}} characters respectively. (e.g., {{code|[4,9)}} represents all integers starting from and including 4 up to but not including 9.) Range types are also compatible with existing operators used to check for overlap, containment, right of etc.

=== User-defined objects ===
New types of almost all objects inside the database can be created, including:

* Casts
* Conversions
* Data types
* [[Data domain|Domains]]
* Functions, including aggregate functions and window functions
* Indexes including custom indexes for custom types
* Operators (existing ones can be [[operator overloading|overloaded]])
* Procedural languages

=== Inheritance ===
Tables can be set to inherit their characteristics from a "parent" table. Data in child tables will appear to exist in the parent tables, unless data is selected from the parent table using the ONLY keyword, i.e. {{code |lang="sql" | SELECT * FROM ONLY parent_table;}}. Adding a column in the parent table will cause that column to appear in the child table.

Inheritance can be used to implement table partitioning, using either triggers or rules to direct inserts to the parent table into the proper child tables.

{{As of|2010}}, this feature is not fully supported yet{{snd}} in particular, table constraints are not currently inheritable. All check constraints and not-null constraints on a parent table are automatically inherited by its children. Other types of constraints (unique, primary key, and foreign key constraints) are not inherited.

Inheritance provides a way to map the features of generalization hierarchies depicted in [[entity–relationship model|entity relationship diagrams (ERDs)]] directly into the PostgreSQL database.

=== Other storage features ===
* [[Referential integrity]] [[Constraint satisfaction|constraints]] including [[foreign key]] constraints, column constraints, and row checks
* Binary and textual large-object storage
* [[Tablespace]]s
* Per-column collation
* Online backup
* Point-in-time recovery, implemented using write-ahead logging
* In-place upgrades with pg_upgrade for less downtime (supports upgrades from 8.3.x and later)

== Control and connectivity ==

=== Foreign data wrappers ===
PostgreSQL can link to other systems to retrieve data via foreign data wrappers (FDWs).<ref>{{cite book
| last1 = Obe
| first1 = Regina
| last2 = Hsu
| first2 = Leo S.
| chapter = 10: Replication and External Data
| title = PostgreSQL: Up and Running
| url = https://books.google.com/books?id=Q8jkIZkMTPcC
| edition = 1
| location = Sebastopol, CA
| publisher = O'Reilly Media, Inc.
| publication-date = 2012
| page = 129
| isbn = 978-1-4493-2633-3
| access-date = 2016-10-17
| quote = Foreign Data Wrappers (FDW) [...] are mechanisms of querying external datasources. PostgreSQL 9.1 introduced this [[SQL/MED]] standards compliant feature.
}}</ref>
These can take the form of any data source, such as a file system, another [[Relational database management system|RDBMS]], or a web service. This means that regular database queries can use these data sources like regular tables, and even join multiple data-sources together.

=== Interfaces ===
PostgreSQL has several interfaces available and is also widely supported among programming language libraries. Built-in interfaces include libpq (PostgreSQL's official C application interface) and [[ECPG]] (an embedded C system). External interfaces include:

* libpqxx: [[C++]] interface
* Pgfe: [[C++]] interface
* PostgresDAC: PostgresDAC (for Embarcadero RadStudio/Delphi/CBuilder XE-XE3)
* DBD::Pg: Perl DBI driver
* JDBC: [[Java Database Connectivity|JDBC]] interface
* Lua: Lua interface
* Npgsql: [[.NET Framework|.NET]] data provider
* ST-Links SpatialKit: Link Tool to [[ArcGIS]]
* PostgreSQL.jl: [[Julia (programming language)|Julia]] interface
* node-postgres: [[Node.js]] interface
* pgoledb: [[OLE DB|OLEDB]] interface
* psqlODBC: [[Open Database Connectivity|ODBC]] interface
* psycopg2:<ref name="psycopg2" /> Python interface (also used by [[HTSQL]])
* pgtclng: Tcl interface
* pyODBC: Python library
* php5-pgsql: PHP driver based on libpq
* postmodern: A Common Lisp interface
* pq: A pure [[Go (programming language)|Go]] PostgreSQL driver for the Go database/sql package. The driver passes the compatibility test suite.<ref>{{cite web|title=SQL database drivers|url=https://github.com/golang/go/wiki/SQLDrivers#drivers|website=Go wiki|publisher=golang.org|accessdate=22 June 2015}}</ref>
* RPostgreSQL: [[R (programming language)|R]] interface<ref>{{cite web|title=RPostgreSQL: R Interface to the 'PostgreSQL' Database System|url=https://cran.r-project.org/web/packages/RPostgreSQL/index.html|website=CRAN|publisher=cran.r-project.org|accessdate=3 August 2017}}</ref>
* dpq: [[D (programming language)|D]] interface to libpq
* epgsql: [[Erlang (programming language)|Erlang]] interface

=== Procedural languages ===
Procedural languages allow developers to extend the database with custom [[subroutine]]s (functions), often called ''[[stored procedure]]s''. These functions can be used to build [[Database trigger|triggers]] (functions invoked upon modification of certain data) and custom [[aggregate function]]s. Procedural languages can also be invoked without defining a function, using the [[Do loop|DO]] command at SQL level.

Languages are divided into two groups: "Safe" languages are [[sandbox (computer security)|sandboxed]] and can be safely used by any user. Procedures written in "unsafe" languages can only be created by [[superuser]]s, because they allow bypassing the database's security restrictions, but can also access sources external to the database. Some languages like Perl provide both safe and unsafe versions.

PostgreSQL has built-in support for three procedural languages:

* Plain SQL (safe). Simpler SQL functions can get [[inline expansion|expanded inline]] into the calling (SQL) query, which saves function call overhead and allows the query optimizer to "see inside" the function.
* [[PL/pgSQL]] (safe), which resembles Oracle's [[PL/SQL]] procedural language and [[SQL/PSM]].
* [[C (programming language)|C]] (unsafe), which allows loading custom [[shared library|shared libraries]] into the database. Functions written in C offer the best performance, but bugs in code can crash and potentially corrupt the database. Most built-in functions are written in C.

In addition, PostgreSQL allows procedural languages to be loaded into the database through extensions. Three language extensions are included with PostgreSQL to support [[Perl]], [[Python (programming language)|Python]] and [[Tcl]]. There are external projects to add support for many other languages,<ref>{{ cite web | date = 2016-03-31 | title = Procedural Languages | publisher = postgresql.org | url = https://www.postgresql.org/docs/current/static/external-pl.html | accessdate = 2016-04-07 }}</ref> including [[Java (programming language)|Java]], [[JavaScript]] (PL/V8), [[R (programming language)|R]], [[Ruby (programming language)|Ruby]], and others.

=== Triggers ===
Triggers are events triggered by the action of SQL [[Data manipulation language|DML]] statements. For example, an [[Insert (SQL)|INSERT]] statement might activate a trigger that checks if the values of the statement are valid. Most triggers are only activated by either INSERT or [[Update (SQL)|UPDATE]] statements.

Triggers are fully supported and can be attached to tables. Triggers can be per-column and conditional, in that UPDATE triggers can target specific columns of a table, and triggers can be told to execute under a set of conditions as specified in the trigger's WHERE clause. Triggers can be attached to [[View (SQL)|views]] by using the INSTEAD OF condition. Multiple triggers are fired in alphabetical order. In addition to calling functions written in the native PL/pgSQL, triggers can also invoke functions written in other languages like PL/Python or PL/Perl.

=== Asynchronous notifications ===
PostgreSQL provides an asynchronous messaging system that is accessed through the NOTIFY, LISTEN and UNLISTEN commands. A session can issue a NOTIFY command, along with the user-specified channel and an optional payload, to mark a particular event occurring. Other sessions are able to detect these events by issuing a LISTEN command, which can listen to a particular channel. This functionality can be used for a wide variety of purposes, such as letting other sessions know when a table has updated or for separate applications to detect when a particular action has been performed. Such a system prevents the need for continuous polling by applications to see if anything has yet changed, and reducing unnecessary overhead. Notifications are fully transactional, in that messages are not sent until the transaction they were sent from is committed. This eliminates the problem of messages being sent for an action being performed which is then rolled back.

Many of the connectors for PostgreSQL provide support for this notification system (including libpq, JDBC, Npgsql, psycopg and node.js) so it can be used by external applications.

=== Rules ===
Rules allow the "query tree" of an incoming query to be rewritten. Rules, or more properly, "Query Re-Write Rules", are attached to a table/class and "Re-Write" the incoming DML (select, insert, update, and/or delete) into one or more queries that either replace the original DML statement or execute in addition to it. Query Re-Write occurs after DML statement parsing, but before query planning.

=== Other querying features ===
* [[Database transaction|Transactions]]
* [[Full-text search]]
* Views
** Materialized views<ref name="materialized_views" />
** Updateable views<ref name="updatable_views" />
** Recursive views<ref name="recursive_views" />
* Inner, outer (full, left and right), and cross [[join (SQL)|joins]]
* Sub-[[select (SQL)|selects]]
** Correlated sub-queries<ref name="Introduction and Concepts" />
* [[Regular expression]]s<ref name="Bernier" />
* [[Hierarchical_and_recursive_queries_in_SQL#Common_table_expression|Common table expressions]] and writable common table expressions
* Encrypted connections via [[Transport Layer Security|TLS]] (current versions do not use vulnerable SSL, even with that configuration option)<ref name="POODLE" />
* Domains
* [[Savepoint]]s
* [[Two-phase commit protocol|Two-phase commit]]
* TOAST (''The Oversized-Attribute Storage Technique'') is used to transparently store large table attributes (such as big MIME attachments or XML messages) in a separate area, with automatic compression.
* [[Embedded SQL]] is implemented using preprocessor. SQL code is first written embedded into C code. Then code is run through ECPG preprocessor, which replaces SQL with calls to code library. Then code can be compiled using a C compiler. Embedding works also with C++ but it does not recognize all C++ constructs.

=== Concurrency model ===
PostgreSQL server is [[Process (computing)|process]]-based (not threaded), and uses one operating system process per database session. Multiple sessions are automatically spread across all available CPUs by the operating system. Starting with PostgreSQL 9.6, many types of queries can also be parallelized across multiple background worker processes, taking advantage of multiple CPUs or cores.<ref>{{Cite web|url=https://lwn.net/Articles/689387/|title=PostgreSQL 9.6 Beta and PGCon 2016|last=Berkus|first=Josh|date=2 June 2016|website=LWN.net}}</ref> Client applications can use threads and create multiple database connections from each thread.<ref>{{Cite web|url=https://wiki.postgresql.org/wiki/FAQ#How_does_PostgreSQL_use_CPU_resources.3F|title=FAQ - PostgreSQL wiki|website=wiki.postgresql.org|language=en|access-date=2017-04-13}}</ref>

== Security ==
PostgreSQL manages its internal security on a per-[[role-oriented programming|role]] basis. A role is generally regarded to be a user (a role that can log in), or a group (a role of which other roles are members). Permissions can be granted or revoked on any object down to the column level, and can also allow/prevent the creation of new objects at the database, schema or table levels.

PostgreSQL's SECURITY LABEL feature (extension to SQL standards), allows for additional security; with a bundled loadable module that supports label-based [[mandatory access control]] (MAC) based on [[Security-Enhanced Linux|SELinux]] security policy.<ref>{{cite web |url=https://wiki.postgresql.org/wiki/SEPostgreSQL_Documentation |title=SEPostgreSQL Documentation}}</ref><ref>{{cite web |url=https://selinuxproject.org/page/NB_SQL_9.3 |title=NB SQL 9.3}}</ref><!--through the use of "sepgsql extension"; provided in all supported versions; in "contrib"<ref>https://www.postgresql.org/docs/current/static/sepgsql.html</ref>).-->

PostgreSQL natively supports a broad number of external authentication mechanisms, including:

* password (either [[MD5]] or plain-text)
* [[Generic Security Services Application Program Interface|GSSAPI]]
* [[Security Support Provider Interface|SSPI]]
* [[Kerberos (protocol)|Kerberos]]
* [[ident protocol|ident]] (maps O/S user-name as provided by an ident server to database user-name)
* peer (maps local user name to database user name)
* [[Lightweight Directory Access Protocol|LDAP]]
** [[Active Directory]]
* [[RADIUS]]
* certificate
* [[Pluggable authentication module|PAM]]

The GSSAPI, SSPI, Kerberos, peer, ident and certificate methods can also use a specified "map" file that lists which users matched by that authentication system are allowed to connect as a specific database user.

These methods are specified in the cluster's host-based authentication configuration file (<tt>pg_hba.conf</tt>), which determines what connections are allowed. This allows control over which user can connect to which database, where they can connect from (IP address/IP address range/domain socket), which authentication system will be enforced, and whether the connection must use [[Transport Layer Security|TLS]].

== Standards compliance ==
PostgreSQL claims high, but not complete, conformance with the SQL standard. One exception is the handling of unquoted identifiers like table or column names. In PostgreSQL they are folded{{snd}} internal{{snd}} to lower case characters<ref name="identifiers"/> whereas the standard says that unquoted identifiers should be folded to upper case. Thus, {{code|Foo}} should be equivalent to {{code|FOO}} not {{code|foo}} according to the standard.

== Benchmarks and performance ==
Many informal performance studies of PostgreSQL have been done.<ref name="BERKUS" /> Performance improvements aimed at improving scalability started heavily with version 8.1. Simple benchmarks between version 8.0 and version 8.4 showed that the latter was more than 10 times faster on read-only workloads and at least 7.5 times faster on both read and write workloads.<ref name="Vilmos" />

The first industry-standard and peer-validated benchmark was completed in June 2007, using the [[GlassFish|Sun Java System Application Server]] (proprietary version of [[GlassFish]]) 9.0 Platform Edition, [[UltraSPARC T1]]-based [[Sun Fire]] server and PostgreSQL 8.2.<ref name="SPECJ" /> This result of 778.14 SPECjAppServer2004 JOPS@Standard compares favourably with the 874 JOPS@Standard with Oracle 10 on an [[Itanium]]-based [[HP-UX]] system.<ref name="BERKUS" />

In August 2007, Sun submitted an improved benchmark score of 813.73 SPECjAppServer2004 JOPS@Standard. With the [[system under test]] at a reduced price, the price/performance improved from $84.98/JOPS to $70.57/JOPS.<ref name="SPECjAppServer2004" />

The default configuration of PostgreSQL uses only a small amount of dedicated memory for performance-critical purposes such as caching database blocks and sorting. This limitation is primarily because older operating systems required kernel changes to allow allocating large blocks of [[shared memory]].<ref name="Kernel Resources" /> PostgreSQL.org provides advice on basic recommended performance practice in a [[wiki]].<ref name="pg9hiperf" />

In April 2012, Robert Haas of EnterpriseDB demonstrated PostgreSQL 9.2's linear CPU scalability using a server with 64 cores.<ref name="Haas" />

Matloob Khushi performed benchmarking between Postgresql 9.0 and MySQL 5.6.15 for their ability to process genomic data. In his performance analysis he found that PostgreSQL extracts overlapping genomic regions eight times faster than MySQL using two datasets of 80,000 each forming random human DNA regions. Insertion and data uploads in PostgreSQL were also better, although general searching capability of both databases was almost equivalent.<ref>{{cite journal |first=Matloob |last=Khushi |pmid=25560631 |title=Benchmarking database performance for genomic data. |journal=J Cell Biochem |date=June 2015 |volume= 116|doi=10.1002/jcb.25049 |pages=877–83}}</ref>

== Platforms ==
PostgreSQL is available for the following operating systems: [[Linux]] (all recent distributions), [[Microsoft Windows|Windows]] (Windows 2000 SP4 and later; compilable by e.g. [[Microsoft Visual Studio|Visual Studio]], now with up to most recent 2017 version), [[FreeBSD]], [[OpenBSD]],<ref name=openbsd>{{cite web |url= http://ports.su/databases/postgresql,-main |title= postgresql-client-10.5p1 – PostgreSQL RDBMS (client) |work= [[OpenBSD ports]] | |date= 2018-10-04 |accessdate= 2018-10-10}}</ref> [[NetBSD]], OS X ([[macOS]]),<ref name="OS X" /> [[IBM AIX|AIX]], [[HP-UX]], [[Solaris (operating system)|Solaris]], and [[UnixWare]]; and not officially tested: [[DragonFly BSD]], [[BSD/OS]], [[IRIX]], [[OpenIndiana]],<ref name="OpenIndiana" /> [[OpenSolaris]], [[OpenServer]]<!--previously SCO UNIX [..] now owned by Xinuos-->, and [[Tru64 UNIX|Tru64 Unix]]. Most other Unix-like systems could also work; most modern do support.

PostgreSQL works on any of the following [[instruction set architecture]]s: [[x86]] and [[x86-64]] on Windows and other operating systems; these are supported on other than Windows: IA-64 [[Itanium]] (external support for HP-UX), [[PowerPC]], PowerPC 64, [[IBM System/390|S/390]], [[IBM System z|S/390x]], [[SPARC]], SPARC 64, [[ARMv8]]-A ([[64-bit computing|64-bit]])<ref name="AArch64" /> and older [[ARM architecture|ARM]] ([[32-bit]], including older such as [[ARMv6]] in [[Raspberry Pi]]<ref name=raspi />), [[MIPS architecture|MIPS]], [[MIPS architecture|MIPSel]], and [[PA-RISC]]. It is also known to work on [[DEC Alpha|Alpha]] (dropped in 9.5), [[Motorola 68000 series|M68k]], [[M32R]], [[NS320xx|NS32k]], and [[VAX]]. In addition to these, it is possible to build PostgreSQL for an unsupported CPU by disabling [[spinlock]]s.<ref name="Supported Platforms" />

== Database administration ==
{{See also|Comparison of database tools}}

Open source front-ends and tools for administering PostgreSQL include:

; {{anchor|psql}}psql: The primary [[Front and back ends|front-end]] for PostgreSQL is the {{code|psql}} [[command-line program]], which can be used to enter SQL queries directly, or execute them from a file. In addition, psql provides a number of meta-commands and various shell-like features to facilitate writing scripts and automating a wide variety of tasks; for example tab completion of object names and SQL syntax.
; {{anchor|pgAdmin}}pgAdmin: The pgAdmin package is a free and open-source [[graphical user interface]] administration tool for PostgreSQL, which is supported on many computer platforms.<ref name="pgAdmin" /> The program is available in more than a dozen languages. The first prototype, named pgManager, was written for PostgreSQL 6.3.2 from 1998, and rewritten and released as pgAdmin under the GNU General Public License (GPL) in later months. The second incarnation (named pgAdmin II) was a complete rewrite, first released on January 16, 2002. The third version, pgAdmin III, was originally released under the [[Artistic License]] and then released under the same license as PostgreSQL. Unlike prior versions that were written in [[Visual Basic]], pgAdmin III is written in C++, using the [[wxWidgets]]<ref>{{cite web | url=https://packages.debian.org/jessie/pgadmin3 | title=Debian -- Details of package pgadmin3 in jessie | accessdate=2017-03-10}}</ref> framework allowing it to run on most common operating systems. The query tool includes a scripting language called pgScript for supporting admin and development tasks. In December 2014, Dave Page, the pgAdmin project founder and primary developer,<ref>{{cite web|title=pgAdmin Development Team|url=http://www.pgadmin.org/development/team.php|website=pgadmin.org|accessdate=22 June 2015}}</ref> announced that with the shift towards web-based models work has started on pgAdmin 4 with the aim of facilitating Cloud deployments.<ref>{{cite web|last1=Dave|first1=Page|title=The story of pgAdmin|url=http://pgsnake.blogspot.co.uk/2014/12/the-story-of-pgadmin.html|website=Dave's Postgres Blog|publisher=pgsnake.blogspot.co.uk|accessdate=7 December 2014}}</ref> In 2016, pgAdmin 4 was released. pgAdmin 4 backend was written in [[Python (programming language)|Python]], using Flask and Qt framework.<ref>{{cite web|title=pgAdmin 4 README|url=https://github.com/postgres/pgadmin4/blob/master/README|accessdate=15 August 2018}}</ref>.
; phpPgAdmin: phpPgAdmin is a web-based administration tool for PostgreSQL written in PHP and based on the popular [[phpMyAdmin]] interface originally written for [[MySQL]] administration.<ref name="PHPADMIN" />
; PostgreSQL Studio: PostgreSQL Studio allows users to perform essential PostgreSQL database development tasks from a web-based console. PostgreSQL Studio allows users to work with cloud databases without the need to open firewalls.<ref name="POSTGRESQLSTUDIO" />
; TeamPostgreSQL: AJAX/JavaScript-driven web interface for PostgreSQL. Allows browsing, maintaining and creating data and database objects via a web browser. The interface offers tabbed SQL editor with auto-completion, row-editing widgets, click-through foreign key navigation between rows and tables, "favorites" management for commonly used scripts, among other features. Supports SSH for both the web interface and the [[database connection]]s. Installers are available for Windows, Mac and Linux, as well as a simple cross-platform archive that runs from a script.<ref name="TEAMPOSTGRESQL" />
; LibreOffice/OpenOffice.org Base: [[LibreOffice]]/[[OpenOffice.org Base]] can be used as a front-end for PostgreSQL.<ref name="ooAsFrntEnd" /><ref name="loAsFrntEnd" />
; pgBadger: The pgBadger PostgreSQL log analyzer generates detailed reports from a PostgreSQL log file.<ref name="tuningPGinstance" />
; pgDevOps: pgDevOps is a suite of web tools to install & manage multiple PostgreSQL versions, extensions, and community components, develop SQL queries, monitor running databases and find performance problems.<ref>{{cite web|title=pgDevOps|url=https://www.bigsql.org/pgdevops/|website=BigSQL.org|accessdate=4 May 2017|archive-url=https://web.archive.org/web/20170401220832/http://www1.bigsql.org/pgdevops/#|archive-date=April 1, 2017|dead-url=yes|df=mdy-all}}</ref>

A number of companies offer proprietary tools for PostgreSQL. They often consist of a universal core that is adapted for various specific database products. These tools mostly share the administration features with the open source tools but offer improvements in [[data modeling]], importing, exporting or reporting.

== Prominent users ==
<!-- https://www.postgresql.org/about/users
Only add widely recognized organizations and products that use PostgreSQL as their *primary* database, and mention what specifically they are using it for. Do ''not'' add new entries without providing comprehensive reliable sources; see [[Wikipedia:Reliable sources]]
-->

Prominent organizations and products that use PostgreSQL as the primary database include:

* In 2009, the social-networking website [[Myspace]] used [[Aster Data Systems]]'s nCluster database for data warehousing, which was built on unmodified PostgreSQL.<ref name="Cecchet" /><ref name="Aster Data" />
* [[Geni.com]] uses PostgreSQL for their main genealogy database.<ref name="Geni" />
* [[OpenStreetMap]], a collaborative project to create a free editable map of the world.<ref name="OpenStreetMap" />
* [[Afilias]], domain registries for [[.org]], [[.info]] and others.<ref name="Afilias" /><ref name="begPHPpg-book"/>
* [[Sony Online]] multiplayer online games.<ref name="Sony Online" />
* [[BASF]], shopping platform for their agribusiness portal.<ref name="BASF" />
* [[Reddit]] social news website.<ref name="Reddit" />
* [[Skype]] VoIP application, central [[business]] databases.<ref name="Skype" />
* [[Sun xVM]], Sun's virtualization and datacenter automation suite.<ref name="xVM" />
* [[MusicBrainz]], open online music encyclopedia.<ref name="MusicBrainz" />
* The [[International Space Station]] – for collecting telemetry data in orbit and replicating it to the ground.<ref name="ISS" />
* [[MyYearbook]] social-networking site.<ref name="MyYearbook" />
* [[Instagram]], a mobile photo-sharing service.<ref name="Instagram" />
* [[Disqus]], an online discussion and commenting service.<ref name="Disqus" />
* [[TripAdvisor]], travel-information website of mostly user-generated content.<ref name="TripAdvisor" />
* [[Yandex]], a Russian internet company switched its Yandex.Mail service from Oracle to Postgres.<ref>{{Cite web|url=https://news.ycombinator.com/item?id=12489055|title=Yandex.Mail's successful migration from Oracle to Postgres [pdf] {{!}} Hacker News|website=news.ycombinator.com|access-date=2016-09-28}}</ref>
* [[Amazon Redshift|AWS Redshift]], a columnar [[Online analytical processing|OLAP]] system based on [[ParAccel]]'s Postgres modifications.
* [[NOAA]]'s [[National Weather Service]], Interactive Forecast Preparation System (IFPS), a system that integrates data from the [[NEXRAD]] [[weather radar]]s, surface, and [[hydrology]] systems to build detailed localized forecast models.<ref name="begPHPpg-book">{{cite book|author1=W. Jason Gilmore|author2=R.H. Treat|title=Beginning PHP and PostgreSQL 8: From Novice to Professional|url=https://books.google.com/books?id=BiRC4JtQzFIC&pg=PA577|accessdate=30 August 2017|year=2006|publisher=Apress|isbn=978-1-43020-136-6}}</ref><ref name="pg9AdminCookEdt2-book">{{cite book|author1=S. Riggs|author2=G. Ciolli|author3=H. Krosing|author4=G. Bartolini|title=PostgreSQL 9 Administration Cookbook - Second Edition|url=https://books.google.com/books?id=rYrwCAAAQBAJ&pg=PA3|accessdate=5 September 2017|year=2015|publisher=Packt|isbn=978-1-84951-906-9}}</ref>
* [[United Kingdom]]'s national weather service, [[Met Office]], has started swapping Oracle for PostgreSQL in a strategy to deploy more open source technology.<ref name="pg9AdminCookEdt2-book">{{cite book|author1=S. Riggs|author2=G. Ciolli|author3=H. Krosing|author4=G. Bartolini|title=PostgreSQL 9 Administration Cookbook - Second Edition|url=https://books.google.com/books?id=rYrwCAAAQBAJ&pg=PA3|accessdate=5 September 2017|year=2015|publisher=Packt|isbn=978-1-84951-906-9}}</ref><ref>{{Cite web|url=http://www.computerweekly.com/ezine/Computer-Weekly/The-Met-Office-turns-to-open-source/Met-Office-swaps-Oracle-for-PostgreSQL|title=Met Office swaps Oracle for PostgreSQL|website=computerweekly.com|access-date=2017-09-05}}</ref>
* [[WhitePages.com]] had been using Oracle<ref>[[Oracle Database]]</ref>{{Better source|reason=per WP:CIRCULAR|date=October 2017}} and [[MySQL]], but when it came to moving its core directories in-house, it turned to PostgreSQL.  Because WhitePages.com needs to combine large sets of data from multiple sources, PostgreSQL's ability to load and index data at an extremely high rate was a key to its decision to use PostgreSQL.<ref name="begPHPpg-book"/>
* [[FlightAware]], a flight tracking website.<ref>{{cite web|title=Open Source Software|url=https://flightaware.com/about/code/|website=FlightAware|accessdate=22 November 2017}}</ref>
* [[Grofers]], an online grocery delivery service.<ref>{{Cite news|url=https://lambda.grofers.com/ansible-at-grofers-part-2-managing-postgresql-c4069ce5855b|title=Ansible at Grofers (Part 2) — Managing PostgreSQL – Lambda - The Grofers Engineering Blog|date=2017-02-28|work=Lambda - The Grofers Engineering Blog|access-date=2018-09-05}}</ref>
* [[Odoo]], a suite of open source business apps that cover all your company needs: CRM, eCommerce, accounting, inventory, point of sale, project management, etc..<ref name="Odoo"/>

== Service implementations ==
Some notable vendors offer PostgreSQL as [[software as a service]]:

* [[Heroku]], a [[platform as a service]] provider, has supported PostgreSQL since the start in 2007.<ref name="Heroku" /> They offer value-add features like full database "roll-back" (ability to restore a database from any point in time),<ref name="Darrow" /> which is based on WAL-E, open-source software developed by Heroku.<ref name="Kerstiens" />
* In January 2012, [[EnterpriseDB]] released a cloud version of both PostgreSQL and their own proprietary Postgres Plus Advanced Server with automated provisioning for failover, replication, load-balancing, and scaling. It runs on [[Amazon Web Services]].<ref name="Techweekeurope" />
* [[VMware]] has offered vFabric Postgres (also known as vPostgres<ref>{{cite book
| last1 = O'Doherty
| first1 = Paul
| last2 = Asselin
| first2 = Stephane
| chapter = 3: VMware Workspace Architecture
| title = VMware Horizon Suite: Building End-User Services
| url = https://books.google.com/books?id=1mTYAwAAQBAJ
| series = VMware Press Technology
| location = Upper Saddle River, NJ
| publisher = VMware Press
| publication-date = 2014
| page = 65
| isbn = 978-0-13-347910-2
| access-date = 2016-09-19
| quote = In addition to the open source version of PostgreSQL, VMware offers vFabric Postgres, or vPostgres. vPostgres is a PostgreSQL virtual appliance that has been tuned for virtual environments.
}}</ref>) for private clouds on [[VMware vSphere|vSphere]] since May 2012.<ref name="Sargent" />
* In November 2013, [[Amazon.com]] announced the addition of PostgreSQL to their [[Amazon Relational Database Service|Relational Database Service]] offering.<ref name="aws.typepad.com" /><ref name="Williams" />
* In November 2016, [[Amazon Web Services]] announced the addition of PostgreSQL compatibility to their cloud-native Amazon Aurora managed database offering.<ref>{{Cite web|url=https://aws.amazon.com/blogs/aws/amazon-aurora-update-postgresql-compatibility/|title=Amazon Aurora Update – PostgreSQL Compatibility {{!}} AWS Blog|website=aws.amazon.com|access-date=2016-12-01}}</ref>

== Release history ==
{| class="wikitable"
|-
! Release
! First release
! Latest minor version
! Latest release
! End of<br>Life<ref>{{cite web |title=Versioning policy |publisher=PostgreSQL Global Development Group |url=https://www.postgresql.org/support/versioning/ |accessdate=2016-06-01 }}</ref>
! Milestones
|-
! 6.0
| style=white-space:nowrap | 1997-01-29
| {{NA}}
| {{NA}}
| {{NA}}
| First formal release of PostgreSQL, unique indexes, pg_dumpall utility, ident authentication
|-
! 6.1
| style=white-space:nowrap | 1997-06-08
| {{Version |o |6.1.1 |style=text-align:center; white-space:nowrap}}
| 1997-07-22
| {{NA}}
| Multi-column indexes, sequences, money data type, GEQO (GEnetic Query Optimizer)
|-
! 6.2
| 1997-10-02
| {{Version |o |6.2.1 |style=text-align:center}}
| 1997-10-17
| {{NA}}
| JDBC interface, triggers, server programming interface, constraints
|-
! 6.3
| 1998-03-01
| {{Version |o |6.3.2 |style=text-align:center}}
| 1998-04-07
| 2003-04
| SQL-92 subselect capability, PL/pgTCL
|-
! 6.4
| 1998-10-30
| {{Version |o |6.4.2 |style=text-align:center}}
| 1998-12-20
| 2003-10
| VIEWs (then only read-only) and RULEs, [[PL/pgSQL]]
|-
! 6.5
| 1999-06-09
| {{Version |o |6.5.3 |style=text-align:center}}
| style=white-space:nowrap | 1999-10-13
| style=white-space:nowrap | 2004-06
| [[Multiversion concurrency control|MVCC]], temporary tables, more SQL statement support (CASE, INTERSECT, and EXCEPT)
|-
! 7.0
| 2000-05-08
| {{Version |o |7.0.3 |style=text-align:center}}
| 2000-11-11
| 2004-05
| Foreign keys, SQL-92 syntax for joins
|-
! 7.1
| 2001-04-13
| {{Version |o |7.1.3 |style=text-align:center}}
| 2001-08-15
| 2006-04
| Write-ahead log, outer joins
|-
! 7.2
| 2002-02-04
| {{Version |o |7.2.8 |style=text-align:center}}
| 2005-05-09
| 2007-02
| PL/Python, [[Object identifier|OIDs]] no longer required, [[Internationalization and localization|internationalization]] of messages
|-
! 7.3
| 2002-11-27
| {{Version |o |7.3.21 |style=text-align:center}}
| 2008-01-07
| 2007-11
| Schema, table function, [[prepared query]]<ref>{{cite magazine |first=Lisa |last=Vaas|date=2002-12-02 |title=Databases Target Enterprises |url=http://www.eweek.com/c/a/Database/Databases-Target-Enterprises |magazine=[[eWeek]] |access-date=2016-10-29 }}</ref>
|-
! 7.4
| 2003-11-17
| {{Version |o |7.4.30 |style=text-align:center}}
| 2010-10-04
| 2010-10
| Optimization on JOINs and [[data warehousing]] functions<ref>{{cite magazine |last=Krill |first=Paul |date=November 20, 2003 |title=PostgreSQL boosts open source database |url=http://www.infoworld.com/article/2670451/database/postgresql-boosts-open-source-database.html |magazine=[[InfoWorld]] |access-date=2016-10-21 }}</ref>
|-
! 8.0
| 2005-01-19
| {{Version |o |8.0.26 |style=text-align:center}}
| 2010-10-04
| 2010-10
| Native server on [[Microsoft Windows]], [[savepoint]]s, [[tablespace]]s, [[point-in-time recovery]]<ref>{{cite magazine |last=Krill |first=Paul |date=January 19, 2005 |title=PostgreSQL open source database boasts Windows boost |url=http://www.infoworld.com/article/2668622/operating-systems/postgresql-open-source-database-boasts-windows-boost.html |magazine=[[InfoWorld]] |access-date=2016-11-02 }}</ref>
|-
! 8.1
| 2005-11-08
| {{Version |o |8.1.23 |style=text-align:center}}
| 2010-12-16
| 2010-11
| Performance optimization, two-phase commit, table [[Partition (database)|partitioning]], index bitmap scan, shared row locking, roles
|-
! 8.2
| 2006-12-05
| {{Version |o |8.2.23 |style=text-align:center}}
| 2011-09-26
| 2011-12
| Performance optimization, online index builds, advisory locks, warm standby<ref>{{cite magazine |last=Weiss |first=Todd R. |date=December 5, 2006 |title=Version 8.2 of open-source PostgreSQL DB released |url=http://www.computerworld.com/article/2548483 |magazine=[[Computerworld]] |access-date=2016-10-17 }}</ref>
|-
! 8.3
| 2008-02-04
| {{Version |o |8.3.23 |style=text-align:center}}
| 2013-02-07
| 2013-12
| Heap-only tuples, [[full text search]],<ref>{{cite magazine |last=Gilbertson |first=Scott |date=February 5, 2008 |title=PostgreSQL 8.3: Open Source Database Promises Blazing Speed |url=https://www.wired.com/2008/02/postgresql_8dot3_open_source_database_promises_blazing_speed/ |magazine=[[Wired (magazine)|Wired]] |access-date=2016-10-17 }}</ref> [[SQL/XML]], ENUM types, [[Universally unique identifier|UUID]] types
|-
! 8.4
| 2009-07-01
| {{Version |o |8.4.22 |style=text-align:center}}
| 2014-07-24
| 2014-07
| Windowing functions, column-level permissions, parallel database restore, per-database collation, [[common table expressions]] and recursive queries<ref>{{cite magazine |last=Huber |first=Mathias |date=July 2, 2009 |title=PostgreSQL 8.4 Proves Feature-Rich |url=http://www.linux-magazine.com/Online/News/PostgreSQL-8.4-Proves-Feature-Rich/(language)/eng-US |magazine=[[Linux Magazine]] |access-date=2016-10-17 }}</ref>
|-
! 9.0
| 2010-09-20
| {{Version |o |9.0.23 |style=text-align:center}}
| 2015-10-08
| 2015-09
| Built-in binary streaming [[Replication (computing)|replication]], [[hot standby]], in-place upgrade capability, 64-bit Windows<ref>{{cite web |url=https://www.linux.com/news/five-enterprise-features-postgresql-9 |title=Five Enterprise Features in PostgreSQL 9 |last=Brockmeier |first=Joe |date=September 30, 2010 |website=[[Linux.com]] |publisher=[[Linux foundation]] |access-date=2017-02-06 }}</ref>
|-
! 9.1
| 2011-09-12
| {{Version |o |9.1.24 |style=text-align:center}}
| 2016-10-27
| 2016-09
| [[Synchronous replication]], per-column [[collation]]s, unlogged tables, [[serializable snapshot isolation]], writeable common table expressions, [[Security-Enhanced Linux|SELinux]] integration, extensions, foreign tables<ref>{{cite magazine |author=Timothy Prickett Morgan |date=12 September 2011 |title=PostgreSQL revs to 9.1, aims for enterprise |url=https://www.theregister.co.uk/2011/09/12/postgresql_9_1_cloud_server/ |magazine=[[The Register]] |access-date=2017-02-06 }}</ref>
|-
! 9.2
| 2012-09-10<ref>https://www.postgresql.org/about/news/1415/</ref>
| {{Version |o |9.2.24 |style=text-align:center}}
| 2017-11-09
| 2017-09
| Cascading streaming replication, index-only scans, native [[JSON]] support, improved lock management, range types, pg_receivexlog tool, space-partitioned GiST indexes
|-
! 9.3
| 2013-09-09
| {{Version |o |9.3.25 |style=text-align:center}}
| 2018-11-08
| 2018-11
| Custom background workers, data checksums, dedicated JSON operators, LATERAL JOIN, faster pg_dump, new pg_isready server monitoring tool, trigger features, view features, writeable foreign tables, [[materialized view]]s, replication improvements
|-
! 9.4
| 2014-12-18
| {{Version |co |9.4.20 |style=text-align:center}}
| 2018-11-08
| 2019-12
| JSONB data type, ALTER SYSTEM statement for changing config values, ability to refresh materialized views without blocking reads, dynamic registration/start/stop of background worker processes, Logical Decoding API, GiN index improvements, Linux huge page support, database cache reloading via pg_prewarm, reintroducing Hstore as the column type of choice for document-style data.<ref>https://www.infoq.com/news/2013/11/Nested-Hstore</ref>
|-
! 9.5
| 2016-01-07
| {{Version |co |9.5.15 |style=text-align:center}}
| 2018-11-08
| 2021-01
| UPSERT, row level security, TABLESAMPLE, CUBE/ROLLUP, GROUPING SETS, and new [[Block Range Index|BRIN]] index<ref>{{cite magazine |last=Richard |first=Chirgwin |date=7 January 2016 |title=Say oops, UPSERT your head: PostgreSQL version 9.5 has landed |url=https://www.theregister.co.uk/2016/01/07/postgresql_95_lands/ |magazine=[[The Register]] |access-date=2016-10-17 }}</ref>
|-
! 9.6
| 2016-09-29
| {{Version |co |9.6.11 |style=text-align:center}}
| 2018-11-08
| 2021-09
| Parallel query support, PostgreSQL foreign data wrapper (FDW) improvements with sort/join pushdown, multiple synchronous standbys, faster vacuuming of large table
|-
! 10
| 2017-10-05
| {{Version |co |10.6 |style=text-align:center}}
| 2018-11-08
| 2022-10
| Logical replication,<ref>https://www.postgresql.org/docs/10/static/logical-replication.html</ref> declarative table partitioning, improved query parallelism
|-
! 11
| 2018-10-18
| {{Version |c |11.1|style=text-align:center}}
| 2018-11-08
| 2023-11
| Increased Robustness and Performance for Partitioning, Transactions Supported in Stored Procedures, Enhanced Capabilities for Query Parallelism, Just-in-Time (JIT) Compilation for Expressions<ref>{{cite web |title=PostgreSQL 11 Released |url=https://www.postgresql.org/about/news/1894/ |accessdate=18 October 2018}}</ref><ref>{{cite web |title=PostgreSQLRelease Notes |url=https://www.postgresql.org/docs/11/static/release-11.html |accessdate=18 October 2018}}</ref>
|}
{{Version|l|show=111111}}
{{Timeline PostgreSQL}}

== See also ==
{{Portal|Free software}}

* [[Comparison of relational database management systems]]
* [[List of databases using MVCC]]
* [[SQL compliance]]

== References ==
{{reflist|30em|refs=
<ref name="birthday">{{ cite web | url = https://www.postgresql.org/about/news/978/ | title = Happy Birthday, PostgreSQL! | date = July 8, 2008 | website = | publisher = PostgreSQL Global Development Group }}</ref>
<ref name="approved by OSI">{{ cite web | date = 2010-02-18 | title = PostgreSQL licence approved by OSI | url= http://www.crynwr.com/cgi-bin/ezmlm-cgi?17:mmp:969 | publisher = Crynwr | accessdate = 2010-02-18 }}</ref>
<ref name="OSI">{{ cite web | publisher = Open Source Initiative | date = 2010-02-20 |title = OSI PostgreSQL Licence | url = http://www.opensource.org/licenses/postgresql | accessdate = 2010-02-20 }}</ref>
<ref name="about/licence">{{ cite web|url= https://www.postgresql.org/about/licence | title = License | publisher = PostgreSQL Global Development Group | accessdate = 2010-09-20 }}</ref>
<ref name="intro-whatis">{{ cite web | url = https://www.postgresql.org/docs/current/static/intro-whatis.html | title = What is PostgreSQL? | work = PostgreSQL 9.3.0 Documentation | publisher = PostgreSQL Global Development Group | accessdate = 2013-09-20 }}</ref>
<ref name="MySQL not included">{{ cite web | date = 2011-08-04 | title = Lion Server: MySQL not included | url = http://support.apple.com/kb/HT4828 | accessdate = 2011-11-12 }}</ref>
<ref name="OS X Lion Server">{{ cite web | date = 2011-08-04 | title = OS X Lion Server&nbsp;— Technical Specifications | url = http://support.apple.com/kb/SP630 | quote=Web Hosting [..] PostgreSQL |accessdate = 2011-11-12 }}</ref>
<ref name="contributors">{{ cite web | url = https://www.postgresql.org/community/contributors/ | title = Contributor Profiles | publisher = PostgreSQL Global Development Group | accessdate = 2017-03-14 }}</ref>
<ref name="Audio sample">[https://www.postgresql.org/files/postgresql.mp3 Audio sample, 5.6k MP3]</ref>
<ref name="Project name">{{ cite web | date = 2007-11-16 | title = Project name&nbsp;– statement from the core team | publisher = archives.postgresql.org | url = http://archives.postgresql.org/pgsql-advocacy/2007-11/msg00109.php | accessdate = 2007-11-16 }}</ref>
<ref name="design">{{ cite conference | last1 = Stonebraker | first1 = M | last2 = Rowe | first2 = LA | date = May 1986 | title = The design of POSTGRES | conference = Proc. 1986 [[ACM SIGMOD Conference]] on Management of Data | location = Washington, DC | format = PDF | url = http://db.cs.berkeley.edu/papers/ERL-M85-95.pdf | accessdate = 2011-12-17 }}</ref>
<ref name="about/history">{{cite web |url=https://www.postgresql.org/about/history/ |title=PostgreSQL: History |publisher=PostgreSQL Global Development Group |access-date=27 August 2016 |archive-url=https://web.archive.org/web/20170326020245/https://www.postgresql.org/about/history/# |archive-date=March 26, 2017 |dead-url=yes |df=mdy-all }}</ref>
<ref name="Stonebraker">{{ cite conference | url = http://db.cs.berkeley.edu/papers/ERL-M87-13.pdf | title = The POSTGRES data model | last1 = Stonebraker | first1 = M | last2 = Rowe | first2 = LA | date = | publisher = Morgan Kaufmann Publishers | conference = Proceedings of the 13th International Conference on Very Large Data Bases | format = PDF | location = Brighton, England | isbn = 0-934613-46-X | pages = 83–96 }}</ref>
<ref name="pavel-history">{{ cite web | author = Pavel Stehule | date = {{date | 2012-06-09}} | title = Historie projektu PostgreSQL | language = Czech | url = http://postgres.cz/wiki/Historie_projektu_PostgreSQL }}</ref>
<ref name="University POSTGRES">{{ cite web | url = http://db.cs.berkeley.edu/postgres.html | title = University POSTGRES, Version 4.2 | date = 1999-07-26 }}</ref>
<ref name="20th anniversary">{{ cite mailing list | url = https://www.postgresql.org/message-id/CA+OCxozS_cuaLw=nfS=GdJZmS7ygjhdtZbqVt17wPLfCOtFY4g@mail.gmail.com | title = Re: 20th anniversary of PostgreSQL ? | date = 2015-04-07 | accessdate = 9 April 2015 | mailing-list = pgsql-advocacy | last = Page | first = Dave }}</ref>
<ref name="ports">{{ cite journal | title = Serializable Snapshot Isolation in PostgreSQL |author1=Dan R. K. Ports |author2=Kevin Grittner | year = 2012 | journal = Proceedings of the VLDB Endowment | volume = 5 | issue = 12 | pages = 1850–1861 | url = http://drkp.net/drkp/papers/ssi-vldb12.pdf | doi=10.14778/2367502.2367523| arxiv=1208.4179 }}</ref>
<ref name="H Online">{{ citation | publisher = H Online | url = http://www.h-online.com/open/news/item/PostgreSQL-9-1-with-synchronous-replication-1341228.html | type = news | title = PostgreSQL 9.1 with synchronous replication }}</ref>
<ref name="SP-GiST">{{ cite conference | last1 = Bartunov | first1 = O | last2 = Sigaev | first2 = T | date = May 2011 | title = SP-GiST{{snd}} a new indexing framework for PostgreSQL | conference = PGCon 2011 | location = Ottawa, Canada | format = PDF | url = http://www.pgcon.org/2011/schedule/attachments/197_pgcon-2011.pdf | accessdate = 2016-01-31 }}</ref>
<ref name="KNN-GiST">{{ cite conference | last1 = Bartunov | first1 = O | last2 = Sigaev | first2 = T | date = May 2010 | title = K-nearest neighbour search for PostgreSQL | conference = PGCon 2010 | location = Ottawa, Canada | format = PDF | url = http://www.pgcon.org/2010/schedule/attachments/168_pgcon-2010-1.pdf | accessdate = 2016-01-31 }}</ref>
<ref name="Postgres-XC">{{ citation | publisher = Postgres-XC | url = http://postgres-xc.sourceforge.net/ | type = website | title = Postgres-XC project page | deadurl = yes | archiveurl = https://web.archive.org/web/20120701122448/http://postgres-xc.sourceforge.net/ | archivedate = July 1, 2012 | df = mdy-all }}</ref>
<!-- <ref name="TransLattice">{{ citation | publisher = TransLattice | url = http://www.translattice.com/postgres-xl_product.shtml | type = website | title = Postgres-XL product page | archive-url = https://web.archive.org/web/20150213135808/http://www.translattice.com/postgres-xl_product.shtml | archive-date = 2015-02-13 }}</ref> -->
<ref name="Fischer">{{ cite press release | author = Marit Fischer | date = 2007-11-10 | title = Backcountry.com finally gives something back to the open source community | publisher = Backcountry.com | url = http://www.backcountrycorp.com/corporate/section/3/press/a511/Backcountry-finally-gives-something-back-to-the-open-source-community.html | deadurl = yes | archiveurl = https://web.archive.org/web/20101226124550/http://www.backcountrycorp.com/corporate/section/3/press/a511/Backcountry-finally-gives-something-back-to-the-open-source-community.html | archivedate = December 26, 2010 | df = mdy-all }}</ref>
<ref name="jsonb">{{ cite web | first = Peter | last = Geoghegan | date = March 23, 2014 | title = What I think of jsonb | url = http://pgeoghegan.blogspot.com/2014/03/what-i-think-of-jsonb.html }}</ref>
<ref name="psycopg2">{{cite web|url=http://initd.org/psycopg/|title=PostgreSQL + Python &#124; Psycopg|work=initd.org}}</ref>
<ref name="materialized_views">{{ cite web | date = 2013-03-04 | title = Add a materialized view relations. | url = https://www.postgresql.org/message-id/E1UCJDN-00042x-0w@gemulon.postgresql.org | accessdate = 2013-03-04 }}</ref>
<ref name="updatable_views">{{ cite web | date = 2012-12-08 | title = Support automatically-updatable views. | url = http://archives.postgresql.org/pgsql-committers/2012-12/msg00154.php | accessdate = 2012-12-08 }}</ref>
<ref name="recursive_views">{{ cite web | date = 2013-02-01 | title = Add CREATE RECURSIVE VIEW syntax | url = https://www.postgresql.org/message-id/E1U17NB-0006c6-DX@gemulon.postgresql.org | accessdate = 2013-02-28 }}</ref>
<ref name="Introduction and Concepts">{{ cite book | url = https://www.postgresql.org/files/documentation/books/aw_pgsql/15467.html | title = PostgreSQL: Introduction and Concepts | chapterurl = https://www.postgresql.org/files/documentation/books/aw_pgsql/node81.html | chapter = Subqueries | last = Momjian | first = Bruce | publisher = Addison-Wesley | isbn = 0-201-70331-9 | year = 2001 | accessdate = 2010-09-25 | archive-url = https://web.archive.org/web/20100809013228/http://www.postgresql.org/files/documentation/books/aw_pgsql/15467.html | archive-date = August 9, 2010 | dead-url = yes | df = mdy-all }}</ref>
<ref name="Bernier">{{ cite web | url = http://www.oreillynet.com/pub/a/databases/2006/02/02/postgresq_regexes.html | title = Using Regular Expressions in PostgreSQL | last = Bernier | first = Robert | publisher = O'Reilly Media | date = February 2, 2006 | accessdate = 2010-09-25 }}</ref>
<ref name="POODLE">{{cite web|url=http://blog.hagander.net/archives/222-A-few-short-notes-about-PostgreSQL-and-POODLE.html|title=A few short notes about PostgreSQL and POODLE|work=hagander.net}}</ref>
<ref name="BERKUS">{{ cite web | author = Josh Berkus | date = 2007-07-06 | title = PostgreSQL publishes first real benchmark | url = http://blogs.ittoolbox.com/database/soup/archives/postgresql-publishes-first-real-benchmark-17470 | accessdate = 2007-07-10 | authorlink = Josh Berkus | archive-url = https://web.archive.org/web/20070712092901/http://blogs.ittoolbox.com/database/soup/archives/postgresql-publishes-first-real-benchmark-17470 | archive-date = July 12, 2007 | dead-url = yes | df = mdy-all }}</ref>
<ref name="Vilmos">{{ cite web | author = György Vilmos | date = 2009-09-29 | title = PostgreSQL history | url = http://suckit.blog.hu/2009/09/29/postgresql_history | accessdate = 2010-08-28 }}</ref>
<ref name="SPECJ">{{ cite web | publisher = [[SPEC]] | date = 2007-07-06 | title = SPECjAppServer2004 Result | url = http://www.spec.org/jAppServer2004/results/res2007q3/jAppServer2004-20070606-00065.html | accessdate = 2007-07-10 }}</ref>
<ref name="SPECjAppServer2004">{{ cite web | publisher = [[SPEC]] | date = 2007-07-04 | title = SPECjAppServer2004 Result | url = http://www.spec.org/jAppServer2004/results/res2007q3/jAppServer2004-20070703-00073.html | accessdate = 2007-09-01 }}</ref>
<ref name="Kernel Resources">{{ cite web | work = PostgreSQL Manual | publisher = PostgreSQL.org | url = https://www.postgresql.org/docs/current/static/kernel-resources.html | title = Managing Kernel Resources | accessdate = November 12, 2011 }}</ref>
<ref name="tuningPGinstance">{{ cite web | publisher = PostgreSQL.org |author1=Greg Smith |author2=Robert Treat |author3=Christopher Browne |last-author-amp=yes | url = https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server| work = Wiki | title = Tuning your PostgreSQL server | accessdate = November 12, 2011 }}</ref>
<ref name="Haas">{{ cite web | author = Robert Haas | date = 2012-04-03 | title = Did I Say 32 Cores? How about 64? | url = http://rhaas.blogspot.com/2012/04/did-i-say-32-cores-how-about-64.html | accessdate = 2012-04-08 }}</ref>
<ref name="OpenIndiana">{{ cite web | url = http://wiki.openindiana.org/oi/oi_151a+Release+Notes | title = oi_151a Release Notes | publisher = OpenIndiana | accessdate = 2012-04-07 }}</ref>
<ref name="AArch64">{{cite web|url=http://lists.debian.org/debian-devel/2012/07/msg00536.html|title=AArch64 planning BoF at DebConf|work=debian.org}}</ref>
<ref name="Supported Platforms">{{ cite web | title = Supported Platforms | publisher = PostgreSQL Global Development Group | url = https://www.postgresql.org/docs/current/static/supported-platforms.html | accessdate = 2012-04-06 }}</ref>
<ref name="pgAdmin">{{ cite web | title = pgAdmin: PostgreSQL administration and management tools | work = website | url = http://www.pgadmin.org/ | accessdate = November 12, 2011 }}</ref>
<ref name="PHPADMIN">{{ cite web | author = phpPgAdmin Project | date = 2008-04-25 | title = About phpPgAdmin | url = http://phppgadmin.sourceforge.net/?page=about | accessdate = 2008-04-25 }}</ref>
<ref name="POSTGRESQLSTUDIO">{{ cite web | author = PostgreSQL Studio | date = 2013-10-09 | title = About PostgreSQL Studio | url = http://www.postgresqlstudio.org/about/ | accessdate = 2013-10-09 | archive-url = https://web.archive.org/web/20131007084849/http://www.postgresqlstudio.org/about/ | archive-date = October 7, 2013 | dead-url = yes | df = mdy-all }}</ref>
<ref name="TEAMPOSTGRESQL">{{ cite web | date = 2013-10-03 | title = TeamPostgreSQL website | url = http://www.teampostgresql.com | accessdate = 2013-10-03 }}</ref>
<ref name="ooAsFrntEnd">{{ cite web | author = oooforum.org | date = 2010-01-10 | title = Back Ends for OpenOffice | url = http://www.oooforum.org/forum/viewtopic.phtml?p=356180 | archive-url = https://web.archive.org/web/20110928093709/http://www.oooforum.org/forum/viewtopic.phtml?p=356180 | dead-url = yes | archive-date = 2011-09-28 | accessdate = 2011-01-05 }}</ref>
<ref name="loAsFrntEnd">{{ cite web | author = libreoffice.org | date = 2012-10-14 | title = Base features | url = http://www.libreoffice.org/features/base/ | accessdate = 2012-10-14 | deadurl = yes | archiveurl = https://web.archive.org/web/20120107063659/http://www.libreoffice.org/features/base/ | archivedate = January 7, 2012 | df = mdy-all }}</ref>
<ref name="pg9hiperf">{{ cite book | author = Greg Smith | title = PostgreSQL 9.0 High Performance | date = {{date | 2010-10-15}} | publisher = [[Packt Publishing]] | isbn = 978-1-84951-030-1 | url = http://www.packtpub.com/postgresql-90-high-performance/book }}</ref>
<!-- <ref name="Lai">{{ cite news | date = 2008-05-22 | author = Eric Lai | title = Size matters: Yahoo claims 2-petabyte database is world's biggest, busiest | publisher = [[Computerworld]] | url = http://www.computerworld.com/action/article.do?command=viewArticleBasic&taxonomyId=18&articleId=9087918&intsrc=hm_topic }}</ref> -->
<!-- <ref name="Claburn">{{ cite news | date = 2008-05-21 | author = Thomas Claburn | title = Yahoo Claims Record With Petabyte Database | publisher = [[InformationWeek]] | url = http://www.informationweek.com/news/showArticle.jhtml?articleID=207801579 }}</ref> -->
<ref name="Cecchet">{{ cite conference | author = Emmanuel Cecchet | date = May 21, 2009 | title = Building PetaByte Warehouses with Unmodified PostgreSQL | conference = PGCon 2009 | url = http://www.pgcon.org/2009/schedule/attachments/135_PGCon%202009%20-%20Aster%20v6.pdf | accessdate = November 12, 2011 }}</ref>
<ref name="Aster Data">{{ cite web | title = MySpace.com scales analytics for all their friends | series = case study | publisher = Aster Data | url = http://www.asterdata.com/resources/assets/cs_Aster_Data_4.0_MySpace.pdf | format = PDF | date = June 15, 2010 | deadurl = no | archiveurl = https://web.archive.org/web/20101114141918/http://asterdata.com/resources/assets/cs_Aster_Data_4.0_MySpace.pdf | archivedate = November 14, 2010 | accessdate = November 12, 2011 }}</ref>
<ref name="Geni">{{ cite web | date = 2011-08-01 | title = Last Weekend's Outage | publisher = Geni | work = Blog | url = http://www.geni.com/blog/last-weekends-outage-368211.html }}</ref>
<ref name="OpenStreetMap">{{ cite web | work = Wiki | url = https://wiki.openstreetmap.org/wiki/Database | title = Database | publisher = OpenStreetMap }}</ref>
<ref name="Afilias">{{ citation | url = http://www.computerworld.com.au/index.php?id=760310963 | title = PostgreSQL affiliates .ORG domain | publisher = Computer World | place = AU }}</ref>
<ref name="Sony Online">{{ citation | url = http://www.computerworld.com/databasetopics/data/software/story/0,10801,109722,00.html | publisher = Computer World | title = Sony Online opts for open-source database over Oracle }}</ref>
<ref name="BASF">{{ citation | format = PDF | url = https://www.postgresql.org/files/about/casestudies/wcgcasestudyonpostgresqlv1.2.pdf | publisher = PostgreSQL | edition = 1.2 | title = A Web Commerce Group Case Study on PostgreSQL }}</ref>
<ref name="Reddit">{{ cite web | date = {{date | 2014-03-27}} | title = Architecture Overview | work = Reddit software wiki | publisher = Reddit | url = https://github.com/reddit/reddit/wiki/Architecture-Overview#reddit-the-software | accessdate = 2014-11-25 }}</ref>
<ref name="Skype">{{ cite web | year = 2006 | title = PostgreSQL at Skype | publisher = Skype Developer Zone | url = https://developer.skype.com/SkypeGarage/DbProjects/SkypePostgresqlWhitepaper | accessdate = 2007-10-23 }}{{dead link|date=March 2018 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>
<ref name="xVM">{{ cite web | year = 2007 | title = How Much Are You Paying For Your Database? | publisher = Sun Microsystems blog | url = http://blogs.sun.com/marchamilton/entry/how_much_are_you_paying | accessdate = 2007-12-14 | archive-url = https://web.archive.org/web/20090307032257/http://blogs.sun.com/marchamilton/entry/how_much_are_you_paying | archive-date = March 7, 2009 | dead-url = yes | df = mdy-all }}</ref>
<ref name="MusicBrainz">{{ cite web | url = http://musicbrainz.org/doc/Database | title = Database&nbsp;– MusicBrainz | publisher = MusicBrainz Wiki | accessdate = 5 February 2011 }}</ref>
<ref name="ISS">{{ cite web | date = 2010-07-13 | author = Duncavage, Daniel P | title = NASA needs Postgres-Nagios help | url = http://archives.postgresql.org/pgsql-general/2010-07/msg00394.php }}</ref>
<ref name="MyYearbook">{{ cite web | author = Roy, Gavin M | title = PostgreSQL at myYearbook.com | location = USA East | year = 2010 | type = talk | url = https://www.postgresqlconference.org/2010/east/talks/postgresql_at_myyearbook.com | publisher = PostgreSQL Conference | deadurl = yes | archiveurl = https://web.archive.org/web/20110727183016/https://www.postgresqlconference.org/2010/east/talks/postgresql_at_myyearbook.com | archivedate = July 27, 2011 | df = mdy-all }}</ref>
<ref name="Instagram">{{ cite web | url = http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in#replicationread-slaves | title = Keeping Instagram up with over a million new users in twelve hours | publisher = Instagram-engineering.tumblr.com | date = 2011-05-17 | accessdate = 2012-07-07 }}</ref>
<ref name="Disqus">{{ cite web | url = https://speakerdeck.com/mikeclarke/pgcon-2013-keynote-postgres-at-disqus | title = Postgres at Disqus | accessdate = May 24, 2013 }}</ref>
<ref name="TripAdvisor">{{cite conference |url=http://www.pgconf.us/2015/event/95/ |title=At The Heart Of A Giant: Postgres At TripAdvisor |author=Matthew Kelly |date={{date|2015-03-27}} |conference=PGConf US 2015 |access-date=July 23, 2015 |archive-url=https://web.archive.org/web/20150723181100/http://www.pgconf.us/2015/event/95/ |archive-date=July 23, 2015 |dead-url=yes |df=mdy-all }} ([https://www.youtube.com/watch?v=YquXmwZNnfg Presentation video])</ref>
<ref name="Heroku">{{ cite news | date = {{date | 2013-04-01}} | author = Alex Williams | title = Heroku Forces Customer Upgrade To Fix Critical PostgreSQL Security Hole | publisher = TechCrunch | url = https://techcrunch.com/2013/04/01/heroku-forces-customer-upgrade-to-fix-critical-postgresql-security-hole/ }}</ref>
<ref name="Darrow">{{ cite news | date = {{date | 2013-11-11}} | author = Barb Darrow | title = Heroku gussies up Postgres with database roll-back and proactive alerts | url = http://gigaom.com/2013/11/11/heroku-gussies-up-postgres-with-database-roll-back-and-proactive-alerts/ | publisher = GigaOM }}</ref>
<ref name="Kerstiens">{{ cite web | date = {{date | 2013-09-26}} | author = Craig Kerstiens | title = WAL-E and Continuous Protection with Heroku Postgres | publisher = Heroku blog | url = https://blog.heroku.com/archives/2013/9/26/wal_e_and_continuous_protection_with_heroku_postgres }}</ref>
<ref name="Techweekeurope">{{ cite web | url = http://www.techweekeurope.co.uk/news/enterprisedb-offers-up-postgres-plus-cloud-database-57030 | title = EnterpriseDB Offers Up Postgres Plus Cloud Database | publisher = Techweekeurope.co.uk | date = 2012-01-27 | accessdate = 2012-07-07 }}</ref>
<ref name="Sargent">{{ cite news | date = {{date | 2012-05-15}} | author = Al Sargent | title = Introducing VMware vFabric Suite 5.1: Automated Deployment, New Components, and Open Source Support | url = https://blogs.vmware.com/vfabric/2012/05/announcing-vmware-vfabric-suite-51.html | publisher = VMware blogs }}</ref>
<ref name="aws.typepad.com">{{ cite news | date = {{date | 2013-11-14 }} | author = Jeff | title = Amazon RDS for PostgreSQL&nbsp;– Now Available | publisher = Amazon Web Services Blog | url = http://aws.typepad.com/aws/2013/11/amazon-rds-for-postgresql-now-available.html }}</ref>
<ref name="Williams">{{ cite news | date = {{date | 2013-11-14}} | author = Alex Williams | title = PostgreSQL Now Available On Amazon's Relational Database Service | publisher = TechCrunch | url = https://techcrunch.com/2013/11/14/postgressql-now-available-on-amazons-relational-database-service/ }}</ref>
<!-- <ref name="Tamiya">{{ cite web | title = Interview: Bruce Momjian | author = Maya Tamiya | date = 2001-01-10 | url = http://lwn.net/2001/features/Momjian/ | publisher = [[LWN.net]] | accessdate = 2007-09-07 }}</ref>
<ref name="Great Bridge">{{ cite press release | title = Great Bridge ceases operations | publisher = Great Bridge | date = 2001-09-06 | url = http://findarticles.com/p/articles/mi_m0EIN/is_2001_Sept_6/ai_77869978/print | accessdate = 2007-09-07 }}</ref>
<ref name="Bezroukov">{{ cite web | date = {{date | 2004-07-01}} | author = [[Nikolai Bezroukov]] | title = The Sunset of Linux Hype | series = Portraits of Open Source Pioneers | quote = NORFOLK, Va., September 6, 2001 -- Great Bridge LLC, the company that pioneered commercial distribution and support of the PostgreSQL open source database, announced today that it has ceased business operations | url = http://www.softpanorama.org/People/Torvalds/sunset_of_linux_hype.shtml }}</ref>
<ref name="pervasive-support">{{ cite web | author = John Farr | date = 2006-07-25 | title = Open letter to the PostgreSQL Community | publisher = [[Pervasive Software]] | url = http://www.pervasive-postgres.com/letter.asp | accessdate = 2007-02-13 | archiveurl = https://web.archive.org/web/20070225141652/http://www.pervasive-postgres.com/letter.asp | archivedate = 2007-02-25 }}</ref>
<ref name="Gedda">{{ cite news | author = Rodney Gedda | date = 2005-10-05 | title = Sun's software chief eyes databases, groupware | publisher = [[Computerworld]] | url = http://www.computerworld.com.au/index.php/id;116679278;fp;16;fpid;0 | accessdate = 2007-02-13 }}</ref>
<ref name="Solaris 10">{{ cite press release | date = 2005-11-17 | title = Sun Announces Support for Postgres Database on Solaris 10 | publisher = [[Sun Microsystems]] | url = http://www.sun.com/smi/Press/sunflash/2005-11/sunflash.20051117.1.html | accessdate = 2007-02-13 }}</ref>
<ref name="EnterpriseDB">{{ cite press release | date = 2007-08-07 | title = EnterpriseDB Announces First-Ever Professional-Grade PostgreSQL Distribution for Linux | publisher = [[EnterpriseDB]] | url = http://www.enterprisedb.com/news_events/press_releases/07_08_07.do | accessdate = 2007-08-07 }}</ref> -->
<ref name=postgres-r>{{cite web |url=http://www.postgres-r.org/ |title=Postgres-R: a database replication system for PostgreSQL |publisher=Postgres Global Development Group |access-date=27 August 2016}}</ref>
<ref name=bdr>{{cite web |url=http://2ndquadrant.com/en/resources/bdr/ |title=Postgres-BDR |publisher=2ndQuadrant Ltd |access-date=27 August 2016}}</ref>
<ref name=raspi>{{cite web |url=http://raspberrypg.org/2015/06/step-5-update-installing-postgresql-on-my-raspberry-pi-1-and-2/ |title=Step 5 (update): Installing PostgreSQL on my Raspberry Pi 1 and 2 |first=Rubens |last=Souza |date=17 June 2015 |access-date=27 August 2016 |website=Raspberry PG}}</ref>
<ref name="OS X">{{cite web |url=https://www.postgresql.org/download/macosx/ |title=Mac OS X packages |publisher=The PostgreSQL Global Development Group |access-date=27 August 2016}}</ref>
<ref name="Odoo">{{ cite web | version = Odoo ver.12 | title = Database Upgrade. | url = https://www.odoo.com/documentation/12.0/webservices/upgrade.html | accessdate = 2018-11-13 }}</ref>
<!-- <ref name="Postgres Plus">{{ cite web | url = http://www.enterprisedb.com/products-services-training/products-overview/postgres-plus-solution-pack | title = Postgres Plus Solution Pack | publisher = EnterpriseDB | date = | accessdate = 2012-07-07 }}</ref> -->
<!-- <ref name="Advanced Server">{{ cite web | url = http://www.enterprisedb.com/products-services-training/products/postgres-plus-advanced-server | title = Postgres Plus® Advanced Server | publisher = EnterpriseDB | date = | accessdate = 2012-07-07 }}</ref> -->
<!-- <ref name="Cloud Database">{{ cite web | url = http://www.enterprisedb.com/products-services-training/products-overview/postgres-plus-cloud-database | title = Postgres Plus® Cloud Database | publisher = EnterpriseDB | date = | accessdate = 2012-07-07 }}</ref> -->
<!-- <ref name="CitusCloud">{{cite web | url = https://techcrunch.com/2016/04/20/citus-launches-citus-cloud-beta-delivering-postgres-database-as-a-cloud-service/ | title = Citus launches Citus Cloud delivering Postgres database as a cloud service | publisher = Techcrunch | date = | accessdate = 2016-02-17}}</ref> -->
<ref name="crash_safe_hash_indexes">{{cite web | url = https://www.postgresql.org/message-id/E1cnqE2-0008JV-Uv@gemulon.postgresql.org | title = hash: Add write-ahead logging support. | publisher = PostgreSQL | date = 2017-03-14 | accessdate = 2017-06-09}}</ref>
<ref name="identifiers">{{ cite web | url = https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS | title = Case sensitivity of identifiers | date = | website = | publisher = PostgreSQL Global Development Group }}</ref>
}}

== Further reading ==
{{refbegin}}
* {{cite book | title = PostgreSQL: Up and Running | first1 = Regina | last1 = Obe | first2 = Leo | last2 = Hsu | date = July 8, 2012 | publisher = [[O'Reilly]] | isbn = 1-4493-2633-1 | url = http://www.postgresonline.com/store.php?asin=1449326331 }}
* {{cite book | title = PostgreSQL Server Programming | edition = second | first1 = Hannu | last1 = Krosing | first2 = Kirk | last2 = Roybal | date = June 15, 2013 | publisher = [[Packt Publishing]] | isbn = 978-1-84951-698-3 | url = http://www.2ndquadrant.com/books/ }}
* {{cite book | title = PostgreSQL 9 Administration Cookbook | edition = second | first1 = Simon | last1 = Riggs | first2 = Hannu | last2 = Krosing | date = October 27, 2010 | publisher = [[Packt Publishing]] | isbn = 1-84951-028-8 | url = http://www.2ndquadrant.com/books/ }}
* {{cite book | title = PostgreSQL 9 High Performance | first = Greg | last = Smith | date = October 15, 2010 | publisher = [[Packt Publishing]] | isbn = 1-84951-030-X | url = http://www.2ndquadrant.com/books/ }}
* {{cite book | title = Beginning PHP and PostgreSQL 8: From Novice to Professional | first1 = W. Jason | last1 = Gilmore | first2 = Robert | last2 = Treat | date = February 27, 2006 | publisher = [[Apress]] | isbn = 1-59059-547-5 | url = http://www.apress.com/book/view/1590595475 | pp = 896 | access-date = April 28, 2009 | archive-url = https://web.archive.org/web/20090708113944/http://www.apress.com/book/view/1590595475 | archive-date = July 8, 2009 | dead-url = yes | df = mdy-all }}
* {{cite book | title = PostgreSQL | edition = second | first = Korry | last = Douglas | date = August 5, 2005 | publisher = [[Sams Publishing|Sams]] | isbn = 0-672-32756-2 | url = http://www.informit.com/store/product.aspx?isbn=0672327562 | pp = 1032 }}
* {{cite book | title = Beginning Databases with PostgreSQL | edition = second | first1 = Neil | last1 = Matthew | first2 = Richard | last2 = Stones | date = April 6, 2005 | publisher = [[Apress]] | isbn = 1-59059-478-9 | url = http://www.apress.com/book/view/9781590594780 | pp = 664 | access-date = April 28, 2009 | archive-url = https://web.archive.org/web/20090409150911/http://www.apress.com/book/view/9781590594780 | archive-date = April 9, 2009 | dead-url = yes | df = mdy-all }}
* {{cite book | title = Practical PostgreSQL | first1 = John C | last1 = Worsley | first2 = Joshua D | last2 = Drake | date = January 2002 | publisher = [[O'Reilly Media]] | isbn = 1-56592-846-6 | url = http://oreilly.com/catalog/9781565928466/ | pp = 636 <!-- link actually says 640 pages, but "pp=" is to cite a "range of pages in the source that support the content (not an indication of the number of pages in the source)" and "p=" for a single one.. not sure page 636 (and similar for books above) is done here to cite anything special, at least then not changing here for now..--> }}
{{Refend}}

== External links ==
{{Commons category}}
{{Wikibooks|PostgreSQL}}
* {{Official website}}
* {{dmoz|Computers/Software/Databases/PostgreSQL/}}

{{Software in the Public Interest}}

[[Category:Client-server database management systems]]
[[Category:Cross-platform software]]
[[Category:Free database management systems]]
[[Category:Free software programmed in C]]
[[Category:ORDBMS software for Linux]]
[[Category:RDBMS software for Linux]]
[[Category:PostgreSQL| ]]
[[Category:Software that uses wxWidgets]]