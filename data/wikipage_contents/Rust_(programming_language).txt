{{Infobox programming language
| name = Rust
| logo = [[File:Rust programming language black logo.svg|144px]]
| caption = 
| paradigm = [[multi-paradigm programming language|Multi-paradigm]]: [[concurrent programming|concurrent]], [[functional programming|functional]], [[generic programming|generic]], [[imperative programming|imperative]], [[structured programming|structured]]
| designer = Graydon Hoare
| developer = The Rust Project
| typing = [[static typing|Static]], [[strong and weak typing|strong]], [[type inference|inferred]], [[Nominal type system|nominal]], [[Substructural type system#Linear type systems|linear]]
| dialects = 
| influenced = [[Crystal (programming language)|Crystal]], [[Elm (programming language)|Elm]],<ref name="elmresult">{{cite web|url=https://groups.google.com/forum/?fromgroups#!searchin/elm-discuss/rust/elm-discuss/lMX_9miTD2E/QBwdvL4JD9wJ|title=Command Optimizations?|date=2014-06-26|access-date=2014-12-10|quote=I just added the outline of a Result library that lets you use richer error messages. It's like Either except the names are more helpful. The names are inspired by Rust's Result library.}}</ref> [[Idris (programming language)|Idris]],<ref>{{cite web|title="Idris - Uniqueness Types"|url=http://docs.idris-lang.org/en/latest/reference/uniqueness-types.html|accessdate=2018-11-20}}</ref> [[Swift (programming language)|Swift]]<ref>http://nondot.org/sabre/</ref>
| license = [[MIT License]] or [[Apache License]] 2.0<ref name='legal'>{{cite web|url=https://www.rust-lang.org/en-US/legal.html|title=Rust Legal Policies|access-date=2018-04-03|publisher=rust-lang.org}}</ref>
| website = {{URL|https://www.rust-lang.org}}
| year = {{Start date and age|2010|07|07}}
| programming language = Rust
| latest release version = 1.31.0<ref>{{cite web|title=Announcing Rust 1.31 and Rust 2018|url=https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html|website=The Rust Programming Language Blog|date=6 December 2018|access-date=6 December 2018}}</ref>
| latest release date = {{Start date and age|2018|12|06}}
| influenced by = [[Alef (programming language)|Alef]],<ref name="influences">{{cite web |title=The Rust Reference: Appendix: Influences |url=https://doc.rust-lang.org/reference/influences.html |access-date=November 11, 2018 |quote=Rust is not a particularly original language, with design elements coming from a wide range of sources. Some of these are listed below (including elements that have since been removed): SML, OCaml [...] C++ [...] ML Kit, Cyclone [...] Haskell [...] Newsqueak, Alef, Limbo [...] Erlang [...] Swift [...] Scheme [...] C# [...]}}</ref> [[C Sharp (programming language)|C#]],<ref name="influences" /> [[C++]],<ref name="influences" /> [[Cyclone (programming language)|Cyclone]],<ref name="influences" /><ref name="rustwiki-noteresearch-typesystem">{{cite web |url=https://github.com/rust-lang/rust-wiki-backup/blob/master/Note-research.md#type-system |title=Note Research: Type System |date=2015-02-01 |access-date=2015-03-25 |quote=Papers that have had more or less influence on Rust, or which one might want to consult for inspiration or to understand Rust's background. [...] ''Region based memory management in Cyclone'' [...] ''Safe memory management in Cyclone''}}</ref> [[Erlang (programming language)|Erlang]],<ref name="influences" /> [[Haskell (programming language)|Haskell]],<ref name="influences" /> [[Haxe]],<ref name="influences" /> [[Limbo (programming language)|Limbo]],<ref name="influences" /> [[Newsqueak]],<ref name="influences" /> [[Ocaml|OCaml]],<ref name="influences" /> [[Scheme (programming language)|Scheme]],<ref name="influences" /> [[Standard ML]],<ref name="influences" /> [[Swift (programming language)|Swift]]<ref name="influences" /><ref name="rust-if-let">{{cite web |title=RFC for 'if let' expression |url=https://github.com/rust-lang/rfcs/pull/160 |access-date=December 4, 2014}}</ref>
| operating system = [[Linux]], [[macOS]], [[Microsoft Windows|Windows]], [[FreeBSD]], [[OpenBSD]],<ref>{{cite web|title=OpenBSD ports|url=http://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/lang/rust/|access-date=2018-04-03}}</ref> [[Redox (operating system)|Redox]], [[Android (operating system)|Android]], [[iOS]] (partial)<ref>{{cite web |url=https://github.com/rust-lang/rust/wiki/Doc-building-for-ios |title=Rust on iOS |website=[[GitHub]] |dead-url=yes |archive-url=https://web.archive.org/web/20140723023232/https://github.com/rust-lang/rust/wiki/Doc-building-for-ios |date=2015-01-09 |archive-date=2014-07-23 |access-date=2017-06-22 |df= }}</ref>
| file ext = .rs, .rlib
}}

'''Rust''' is a [[systems programming language]]<ref>{{cite web |title=Rust is a systems programming language |url=https://www.rust-lang.org |work=Rust-lang.org |access-date=2017-07-17}}</ref> with a focus on safety, especially safe [[Concurrency (computer science)|concurrency]],<ref>[https://graydon2.dreamwidth.org/247406.html Rust is mostly safety], Graydon Hoare, 2016-12-28.</ref><ref name="FAQ – The Rust Project">{{cite web |title=FAQ – The Rust Project |url=https://www.rust-lang.org/faq.html#project |access-date=2 March 2016 |website=Rust-lang.org}}</ref> supporting both [[functional programming|functional]] and [[imperative programming|imperative]] paradigms. Rust is [[Syntax (programming languages)|syntactically]] similar to [[C++]],<ref>{{cite web|title="Rust vs. C++ Comparison"|quote="Rust is syntactically similar to C++, but it provides increased speed and better memory safety."|url=https://www.apriorit.com/dev-blog/520-rust-vs-c-comparison|accessdate=20 November 2018}}</ref> but its designers intend it to provide better [[memory safety]] while still maintaining performance.

Rust was originally designed by Graydon Hoare at [[Mozilla|Mozilla Research]], with contributions from Dave Herman, [[Brendan Eich]], and many others.<ref name="lamda">{{cite web |url=http://lambda-the-ultimate.org/node/4009 |title=The Rust Language |author=Noel |date=2010-07-08 |publisher=Lambda the Ultimate |access-date=2010-10-30}}</ref><ref name="contributors">{{cite web |author=<!--unstated--> |url=https://github.com/mozilla/rust/contributors |title=Contributors to rust-lang/rust |website=Github.com |date= |access-date=2018-10-12}}</ref> Its designers have refined the language through the experiences of writing the [[Servo (layout engine)|Servo]] [[web browser]] [[Browser engine|layout engine]]<ref name="rustinservo">{{cite web |url=https://arstechnica.com/information-technology/2013/04/samsung-teams-up-with-mozilla-to-build-browser-engine-for-multicore-machines/ |title=Samsung teams up with Mozilla to build browser engine for multicore machines |last=Bright |first=Peter |date=2013-04-03|website=Arstechnica.com |access-date=2013-04-04}}</ref> and the Rust [[compiler]]. The compiler is [[free and open-source software]], [[multi-licensing|dual-licensed]] under the [[MIT License]] and [[Apache License]] 2.0.

Rust won first place for "most loved programming language" in the [[Stack Overflow]] Developer Survey in 2016, 2017, and 2018.<ref>{{Cite web|url=https://stackoverflow.com/insights/survey/2016#technology-most-loved-dreaded-and-wanted|title=Stack Overflow Developer Survey 2016 Results|website=Stack Overflow|access-date=2017-03-22}}</ref><ref>{{Cite web|url=https://stackoverflow.com/insights/survey/2017#most-loved-dreaded-and-wanted|title=Stack Overflow Developer Survey 2017|website=Stack Overflow|access-date=2017-03-22}}</ref><ref>{{Cite web|url=https://insights.stackoverflow.com/survey/2018/#most-loved-dreaded-and-wanted|title=Stack Overflow Developer Survey 2018|website=Stack Overflow|access-date=2018-03-13}}</ref>

== Design and features ==
[[File:Rust 101.webm|thumb|A presentation on Rust by Emily Dunham from [[Mozilla]]'s Rust team (Linux conference, Hobart, 2017).]]

Rust is intended to be a language for highly concurrent and highly safe [[System programming|systems]],<ref name="infoq2012">{{cite web|url=http://www.infoq.com/news/2012/08/Interview-Rust|title=Interview on Rust, a Systems Programming Language Developed by Mozilla|last=Avram|first=Abel|date=2012-08-03|access-date=2013-08-17|publisher=InfoQ|quote='''GH:''' A lot of obvious good ideas, known and loved in other languages, haven't made it into widely used systems languages&nbsp;... There were a lot of good competitors in the late 1970s and early 1980s in that space, and I wanted to revive some of their ideas and give them another go, on the theory that circumstances have changed: the internet is highly concurrent and highly security-conscious, so the design-tradeoffs that always favor C and C++ (for example) have been shifting.}}</ref> and "[[programming in the large]]", that is, creating and maintaining boundaries that preserve large-system integrity.<ref>[https://packages.debian.org/sid/main/rustc Debian package description: rustc]</ref> This has led to a feature set with an emphasis on safety, control of [[memory map|memory layout]], and [[Concurrency (computer science)|concurrency]].

=== Performance of idiomatic Rust===
Performance of idiomatic Rust is comparable to the performance of idiomatic C++.<ref name="cpp-design-goals">{{cite web|url=http://pcwalton.blogspot.com/2010/12/c-design-goals-in-context-of-rust.html|title=C++ Design Goals in the Context of Rust|last=Walton|first=Patrick|date=2010-12-05|access-date=2011-01-21|quote=It's impossible to be 'as fast as C' in all cases while remaining safe&nbsp;... C++ allows all sorts of low-level tricks, mostly involving circumventing the type system, that offer practically unlimited avenues for optimization. In practice, though, C++ programmers restrict themselves to a few tools for the vast majority of the code they write, including stack-allocated variables owned by one function and passed by alias, uniquely owned objects (often used with <code>auto_ptr</code> or the C++0x <code>unique_ptr</code>), and reference counting via <code>shared_ptr</code> or COM. One of the goals of Rust's type system is to support these patterns exactly as C++ does, but to enforce their safe usage. In this way, the goal is to be competitive with the vast majority of idiomatic C++ in performance, while remaining memory-safe&nbsp;...}}</ref><ref name="how-fast-is-rust">{{cite web|url=https://www.rust-lang.org/en-US/faq.html#how-fast-is-rust|title=How Fast Is Rust?|last=|first=|date=|website=The Rust Programming Language FAQ|publisher=|access-date=3 August 2016}}</ref>

=== Syntax ===

The concrete [[Syntax (programming languages)|syntax]] of Rust is similar to [[C (programming language)|C]] and [[C++]], with blocks of code delimited by [[Bracket#Curly brackets|curly brackets]], and [[control flow]] keywords such as <code>[[Conditional (computer programming)|if]]</code>, <code>else</code>, <code>while</code>, and <code>for</code>. Not all C or C++ keywords are implemented, however, and some Rust functions (such as the use of the keyword <code>match</code> for [[pattern matching]]) will be less familiar to those versed in these languages. Despite the superficial resemblance to C and C++, the syntax of Rust in a deeper sense is closer to that of the [[ML (programming language)|ML family]] of languages as well as the [[Haskell (programming language)|Haskell language]]. Nearly every part of a function body is an expression,<ref name="grammar_expr">{{cite web|url=https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src/grammar/parser-lalr.y#L1309-L1573|title=rust/src/grammar/parser-lalr.y|date=2017-05-23|access-date=2017-05-23}}</ref> even control flow operators. For example, the ordinary <code>if</code> expression also takes the place of [[?:|C's ternary conditional]]. A function need not end with a <code>return</code> expression: in this case the last expression in the function creates the return value.

=== Memory safety ===

The system is designed to be [[memory safe]], and it does not permit [[null pointer]]s, [[dangling pointer]]s, or [[data race]]s in safe code.<ref name="cnet">{{cite web|url=http://reviews.cnet.com/8301-3514_7-57577639/samsung-joins-mozillas-quest-for-rust/|title=Samsung joins Mozilla's quest for Rust|last=Rosenblatt|first=Seth|date=2013-04-03|access-date=2013-04-05|quote=[Brendan Eich] noted that every year browsers fall victim to hacking in the annual Pwn2Own contest at the CanSecWest conference. "There's no free memory reads" in Rust, he said, but there are in C++. Those problems "lead to a lot of browser vulnerabilities" and would be solved by Rust, which is a self-compiling language.}}</ref><ref name="lwn">{{cite web|url=https://lwn.net/Articles/547145/|title=A taste of Rust|last=Brown|first=Neil|date=2013-04-17|access-date=2013-04-25|quote=... Other more complex data structures could clearly be implemented to allow greater levels of sharing, while making sure the interface is composed only of owned and managed references, and thus is safe from unplanned concurrent access and from dangling pointer errors.}}</ref><ref name="The Rust Programming Language">{{cite web|title=`unsafe` – The Rust Programming Language|url=https://doc.rust-lang.org/book/first-edition/unsafe.html}}</ref><ref name="The Rustonomicon">{{cite web|title=Data Races and Race Conditions|url=https://doc.rust-lang.org/nomicon/races.html}}</ref> Data values can only be initialized through a fixed set of forms, all of which require their inputs to be already initialized.<ref name="lang-faq">{{cite web  |title=The Rust Language FAQ |website=static.rust-lang.org |url=http://static.rust-lang.org/doc/master/complement-lang-faq.html |dead-url=yes |archive-url=https://web.archive.org/web/20150420104147/http://static.rust-lang.org/doc/master/complement-lang-faq.html |archive-date=2015-04-20 |date=2015 |access-date=2017-04-24}}</ref>  To replicate the function in other languages of pointers being either valid or <code>NULL</code>, such as in linked list or binary tree data structures, the Rust core library provides an [[option type]], which can be used to test if a pointer has <code>Some</code> value or <code>None</code>.<ref name="lwn" />  Rust also introduces added syntax to manage [[object lifetime|lifetime]]s, and the compiler reasons about these through its ''borrow checker''.

=== Memory management ===

Rust does not use an [[Garbage collection (computer science)#AUTOMATIC|automated garbage collection]] system like those used by [[Go (programming language)|Go]], [[Java (programming language)|Java]], or the [[.NET Framework]]. Instead, memory and other resources are managed through [[resource acquisition is initialization]] (RAII), with optional reference counting. Rust provides deterministic management of resources, with very low overhead.{{citation needed|date=December 2017}} Rust also favors [[Call stack|stack allocation]] of values and does not perform implicit [[Object type (object-oriented programming)#Boxing|boxing]].

There is also a concept of references (using the <code>&</code> symbol), which do not involve run-time reference counting. The safety of using such pointers is verified at compile time by the borrow checker, preventing [[dangling pointer]]s and other forms of [[undefined behavior]].

=== Ownership ===

Rust has an ownership system where all values have a unique owner where the scope of the value is the same as the scope of the owner.<ref>{{Cite web|url=https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html|title=What is Ownership? – What is Ownership? – The Rust Programming Language|website=doc.rust-lang.org|language=en|access-date=2018-02-20}}</ref> Values can be passed by immutable reference using <code>&T</code>, by mutable reference using <code>&mut T</code> or by value using <code>T</code>. At all times, there can either be multiple immutable references or one mutable reference. The Rust compiler enforces these rules at compile time and also checks that all references are valid.

=== Types and polymorphism ===

The [[type system]] supports a mechanism similar to [[type class]]es, called "[[Trait (computer programming)|traits]]", inspired directly by the [[Haskell (programming language)|Haskell language]]. This is a facility for [[ad hoc polymorphism]], achieved by adding constraints to type variable declarations. Other features from Haskell, such as [[Type class#Higher-kinded polymorphism|higher-kinded polymorphism]], are not yet supported.

Rust features [[type inference]], for variables declared with the <code>let</code> keyword. Such variables do not require a value to be initially assigned to determine their type. A [[compile time]] error results if any branch of code fails to assign a value to the variable.<ref name="type-inference">{{cite web|url=http://pcwalton.blogspot.com/2010/10/rust-features-i-type-inference.html|title=Rust Features I: Type Inference|last=Walton|first=Patrick|date=2010-10-01|access-date=2011-01-21}}</ref> Variables assigned multiple times must be marked with the <code>mut</code> keyword.

Functions can be given [[Generic programming|generic]] [[Parameter (computer programming)|parameters]], which usually require the generic type to implement a certain trait or traits. Within such a function, the generic value can only be used through those traits. This means that a generic function can be type-checked as soon as it is defined. This is in contrast to [[Template (C++)|C++ templates]], which are fundamentally [[Duck typing|duck typed]] and cannot be checked until instantiated with concrete types. C++ concepts address the same issue and are expected to be part of C++20 (2020).

However, the ''implementation'' of Rust generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts with the [[type erasure]] scheme typically used in Java and Haskell. The benefit of monomorphization is optimized code for each specific use case; the drawback is increased compile time and size of the resulting binaries.

The object system within Rust is based around implementations, [[Trait (computer programming)|traits]] and [[Struct (C programming language)|structured types]]. Implementations fulfill a role similar to that of [[Class (computer programming)|classes]] within other languages, and are defined with the <code>impl</code> keyword. [[Inheritance (object-oriented programming)|Inheritance]] and [[Polymorphism (computer science)|polymorphism]] are provided by traits; they allow [[Method (computer programming)|methods]] to be defined and [[mixin|mixed in]] to implementations. Structured types are used to define fields. Implementations and traits cannot define fields themselves, and only traits can provide inheritance. Among other benefits, this prevents the [[diamond problem]] of [[multiple inheritance]], as in C++. In other words, Rust supports interface inheritance, but replaces implementation inheritance with [[Object composition|composition]]; see [[composition over inheritance]].

==History==

The language grew out of a personal project started in 2006 by Mozilla employee Graydon Hoare,<ref name="FAQ – The Rust Project" /> who stated that the project was possibly named after the [[Rust (fungus)|rust family of fungi]].<ref name="rust-name">{{cite web |last=Hoare |first=Graydon |url=https://www.reddit.com/r/rust/comments/27jvdt/internet_archaeology_the_definitive_endall_source/ |title=Internet archaeology: the definitive, end-all source for why Rust is named "Rust"|website=Reddit.com |date=2014-06-07 |access-date=2016-11-03}}</ref> Mozilla began sponsoring the project in 2009<ref name="FAQ – The Rust Project"/> and announced it in 2010.<ref name="future-tense">{{cite web|url=http://www.slideshare.net/BrendanEich/future-tense-7782010|title=Future Tense|date=2011-04-29|access-date=2012-02-06|quote=At Mozilla Summit 2010, we launched Rust, a new programming language motivated by safety and concurrency for parallel hardware, the “manycore” future which is upon us.}}</ref><ref>{{cite conference |last=Hoare|first=Graydon|title=Project Servo|format=pdf |conference=Mozilla Annual Summit 2010|date=7 July 2010|location=Whistler, Canada|url=http://venge.net/graydon/talks/intro-talk-2.pdf |access-date=22 February 2017}}</ref> The same year, work shifted from the initial [[compiler]] (written in [[OCaml]]) to the [[self-hosting compiler]] written in Rust.<ref name="rust-in-rust">{{cite web|archive-url=https://web.archive.org/web/20140815054745/http://blog.mozilla.org/graydon/2010/10/02/rust-progress/|url=http://blog.mozilla.com/graydon/2010/10/02/rust-progress/|archive-date=2014-08-15|title=Rust Progress|last=Hoare|first=Graydon|date=2010-10-02|access-date=2010-10-30}}</ref>  Named {{mono|rustc}}, it successfully [[Bootstrapping (compilers)|compiled itself]] in 2011.<ref name="rust-compiles-rust">{{cite web|url=https://mail.mozilla.org/pipermail/rust-dev/2011-April/000330.html|title=[rust-dev&#93; stage1/rustc builds|last=Hoare|first=Graydon|date=2011-04-20|access-date=2011-04-20|quote=After that last change fixing the logging scope context bug, looks like stage1/rustc builds. Just shy of midnight :)}}</ref> {{mono|rustc}} uses [[LLVM]] as its [[front and back ends|back end]].

The first numbered [[Software release life cycle#Pre-alpha|pre-alpha release]] of the Rust compiler occurred in January 2012.<ref name="rustc-0.1">{{cite web|url=https://www.reddit.com/r/programming/comments/opgxd/mozilla_and_the_rust_community_release_rust_01_a/|title=Mozilla and the Rust community release Rust 0.1 (a strongly-typed systems programming language with a focus on memory safety and concurrency)|author=catamorphism|date=2012-01-20|access-date=2012-02-06}}</ref> Rust 1.0, the first stable release, was released on May 15, 2015.<ref name="Version history">{{cite web |title=Version History |url=https://github.com/rust-lang/rust/blob/master/RELEASES.md |access-date=2017-01-01}}</ref><ref>{{cite web|url=http://blog.rust-lang.org/2015/05/15/Rust-1.0.html|title=Announcing Rust 1.0|author=The Rust Core Team|date=May 15, 2015|access-date=2015-12-11}}</ref> Following 1.0, stable point releases are delivered every six weeks, while features are developed in nightly Rust and then tested with alpha and beta releases that last six weeks.<ref name="Scheduling the Trains">{{cite web |title=Scheduling the Trains |url=https://blog.rust-lang.org/2014/12/12/1.0-Timeline.html |access-date=2017-01-01}}</ref>

In addition to conventional [[static typing]], before version 0.4, Rust also supported [[Typestate analysis|typestates]].  The typestate system modeled assertions before and after program statements, through use of a special <code>check</code> statement. Discrepancies could be discovered at compile time, rather than when a program was running, as might be the case with [[Assertion (computing)|assertions]] in C or C++ code.  The typestate concept was not unique to Rust, as it was first introduced in the language [[NIL (programming language)|NIL]].<ref name="typestate">{{cite journal |last1= Strom |first1= Robert E. |last2 = Yemini |first2= Shaula |url=http://www.cs.cmu.edu/~aldrich/papers/classic/tse12-typestate.pdf|title=Typestate: A Programming Language Concept for Enhancing Software Reliability|year=1986|publisher=IEEE Transactions on Software Engineering|issn=0098-5589|access-date=2010-11-14}}</ref>  Typestates were removed because in practice they found little use, though the same function can still be achieved with [[branding pattern]]s.<ref name="branding-patterns">{{cite web|url=https://pcwalton.github.io/2012/12/26/typestate-is-dead.html|title=Typestate Is Dead, Long Live Typestate!|last=Walton|first=Patrick|date=2012-12-26|website=Pcwalton.github.com|access-date=2016-11-03}}</ref>

The style of the object system changed considerably within versions 0.2, 0.3 and 0.4 of Rust. Version 0.2 introduced classes for the first time, with version 0.3 adding several features including destructors and polymorphism through the use of interfaces.  In Rust 0.4, traits were added as a means to provide inheritance; interfaces were unified with traits and removed as a separate feature.  Classes were also removed, replaced by a combination of implementations and structured types.{{citation needed|date=August 2016}}

Starting in Rust 0.9 and ending in Rust 0.11, Rust had two built-in pointer types, <code>~</code> and <code>@</code>, simplifying the core memory model. It reimplemented those pointer types in the standard library as <code>Box</code> and (the now removed) <code>Gc</code>.

In January 2014, the editor-in-chief of ''[[Dr Dobb's]]'', Andrew Binstock, commented on Rust's chances to become a competitor to C++, as well as to the other upcoming languages [[D (programming language)|D]], [[Go (programming language)|Go]] and [[Nim (programming language)|Nim]] (then Nimrod): according to Binstock, while Rust was "widely viewed as a remarkably elegant language", adoption slowed because it changed repeatedly between versions.<ref>{{cite web |first=Andrew |last=Binstock |title=The Rise And Fall of Languages in 2013 |website=Dr Dobb's |url=http://www.drdobbs.com/jvm/the-rise-and-fall-of-languages-in-2013/240165192}}</ref>

Rust was the third most loved programming language in the 2015 Stack Overflow annual survey,<ref>{{cite web|url=https://stackoverflow.com/research/developer-survey-2015 |title=Stack Overflow Developer Survey 2015 |website=Stackoverflow.com |date= |access-date=2016-11-03}}</ref> and took first place in 2016, 2017, and 2018.<ref>{{Cite web|url=https://stackoverflow.com/insights/survey/2016#technology-most-loved-dreaded-and-wanted|title=Stack Overflow Developer Survey 2016 Results|website=Stack Overflow|access-date=2017-03-22}}</ref><ref>{{Cite web|url=https://stackoverflow.com/insights/survey/2017#most-loved-dreaded-and-wanted|title=Stack Overflow Developer Survey 2017|website=Stack Overflow|access-date=2017-03-22}}</ref><ref>{{Cite web|url=https://insights.stackoverflow.com/survey/2018#technology-most-loved-dreaded-and-wanted-languages|title=Stack Overflow Developer Survey 2018|website=Stack Overflow|access-date=2018-03-13}}</ref>

The language is referenced in [[The Book of Mozilla#The Book of Mozilla, 11:14|The Book of Mozilla]] as "oxidised metal."

== Code examples ==

=== Hello World ===
Here is a simple [["Hello, World!" program]] written in Rust. The <code>println!</code> [[Macro (computer science)|macro]] prints the message to [[standard output]].<syntaxhighlight lang="rust">
fn main() {
    println!("Hello World");
}
</syntaxhighlight>

=== Factorial function ===

==== Recursive ====
<syntaxhighlight lang="rust">
fn factorial(i: u64) -> u64 {
    match i {
        0 => 1,
        n => n * factorial(n-1)
    }
}
</syntaxhighlight>

==== Iterative ====
<syntaxhighlight lang="rust">
fn factorial(i: u64) -> u64 {
    let mut acc = 1;
    for num in 2..=i {
        acc *= num;
    }
    acc
}
</syntaxhighlight>

==== Using Iterators ====
<syntaxhighlight lang="rust">
fn factorial(i: u64) -> u64 {
    (1..=i).product()
}
</syntaxhighlight>

==Projects using Rust==
{{example farm|section|date=May 2018}}
{{primary sources|section|date=October 2017}}
{{Split section||discuss={{TALKPAGENAME}}#Split proposed for list of projects using Rust|date=October 2016}}
<!--
Please add entries only with independent published sources, e.g., news articles, not GitHub projects with no secondary source(s). For specific guidelines, see: Wikipedia:Identifying reliable sources
-->

The Rust [[compiler]] is written in Rust.<ref name="rust-in-rust"/>

Other projects developed in Rust include:

Web browser oriented:
* [[Firefox]]<ref>{{cite web|last=Herman |first=Dave |url=https://hacks.mozilla.org/2016/07/shipping-rust-in-firefox/ |title=Shipping Rust in Firefox * Mozilla Hacks – the Web developer blog |website=Hacks.mozilla.org |date=2016-07-12 |access-date=2016-11-03}}</ref>
** [[Servo (software)|Servo]] – Mozilla's [[parallel computing|parallel]] web [[browser engine]]<ref>{{cite news |url=http://www.infoworld.com/article/2905688/applications/mozillas-rust-based-servo-browser-engine-inches-forward.html |last=Yegulalp |first=Serdar |date=3 April 2015 |title=Mozilla's Rust-based Servo browser engine inches forward |work=InfoWorld |access-date=2016-03-15}}</ref> developed in collaboration with [[Samsung]]<ref>{{cite news |url=https://techcrunch.com/2013/04/03/mozilla-and-samsung-collaborate-on-servo-mozillas-next-gen-browser-engine-for-tomorrows-multicore-processors/ |last=Lardinois |first=Frederic |date=3 April 2015 |title=Mozilla And Samsung Team Up To Develop Servo, Mozilla’s Next-Gen Browser Engine For Multicore Processors |work=TechCrunch}}</ref>
** [[Quantum (software)|Quantum]] – a project, composed of several sub-projects, to improve the [[Gecko (software)|Gecko]] web [[browser engine]] of [[Firefox]], developed by Mozilla<ref>{{cite web|last1=Bryant|first1=David|title=A Quantum Leap for the Web|url=https://medium.com/mozilla-tech/a-quantum-leap-for-the-web-a3b7174b3c12#.ldic6a78e|website=Medium|access-date=27 October 2016}}</ref>

Build tool oriented:
* Cargo – Rust's [[build automation]] system
* Habitat – a build and deployment tool from [[Chef (software)|Chef Software]]<ref>{{cite web |title=Automate any app, anywhere with Habitat |url=https://www.habitat.sh/ |work=[[Chef (software)|Chef Software]] |access-date=2017-08-01}}</ref>

Operating system oriented:
* Magic Pocket – [[Dropbox (service)|Dropbox]]'s [[file system]] that powers their Diskotech [[petabyte]] storage machines<ref>{{cite web |last=Metz |first=Cade |url=https://www.wired.com/2016/03/epic-story-dropboxs-exodus-amazon-cloud-empire/ |title=The Epic Story of Dropbox’s Exodus From the Amazon Cloud Empire |website=Wired.com |date=2016-03-14 |access-date=2016-11-03}}</ref>
* [[Redox (operating system)|Redox]] – a [[microkernel]] [[operating system]]<ref>{{cite news |last=Yegulalp |first=Serdar |title=Rust's Redox OS could show Linux a few new tricks |url=http://www.infoworld.com/article/3046100/open-source-tools/rusts-redox-os-could-show-linux-a-few-new-tricks.html |access-date=21 March 2016 |publisher=infoworld}}</ref>
* Stratis – a file system planned for Fedora 28<ref>{{cite web |url=https://www.marksei.com/red-hat-deprecates-btrfs-stratis/ |title=Red Hat deprecates BTRFS, is Stratis the new ZFS-like hope? |last=Sei |first=Mark |date=30 August 2017 |work=Marksei, Weekly sysadmin pills}}</ref>
* [[Tock (operating system)|Tock]] – an embedded operating system<ref>{{cite web |url=https://www.tockos.org/ |title=Tock Embedded Operating System |website=Tock Embedded Operating System |language=en-US |access-date=2017-11-13}}</ref>
* Railcar – a [[Operating-system-level virtualization|container runtime]] by [[Oracle Corporation|Oracle]]<ref name="railcar">{{cite news |title=Building a Container Runtime in Rust |url=https://blogs.oracle.com/developers/building-a-container-runtime-in-rust |access-date=8 July 2017 |date=29 June 2017 |quote=Why Rust? (…) Rust sits at a perfect intersection of [C and Go]: it has memory safety and higher-level primitives, but sacrifices no low level control over threading, and thus can handle namespaces properly.}}</ref>

Other projects:
* Alacritty – a cross-platform, GPU-accelerated terminal emulator.<ref>{{Cite web|url=https://github.com/jwilm/alacritty|title=jwilm/alacritty|website=GitHub|language=en|access-date=2018-04-06}}</ref>
* Amethyst – a [[Data-oriented design|data-oriented]], [[Data-driven programming|data-driven]] [[game engine]]<ref>{{cite web |title=Data-oriented game engine written in Rust |url=https://www.amethyst.rs/ |work=Amethyst.rs |access-date=2017-10-07}}</ref>
* CITA – a fast and scalable permissioned [[blockchain]] for production<ref>{{cite web|title=CITA|url=https://github.com/cryptape/cita/|website=Github|access-date=2017-09-09}}</ref>
* Conduit – service mesh for Kubernetes from Buoyant Inc, the makers of Linkerd<ref>{{cite web|title=Conduit|url=https://conduit.io/}}</ref>
* [[exa (command-line utility)|exa]] – a "modern replacement for ls" 
* Exonum – an extensible open-source framework for building secure permissioned [[blockchain]] applications
*[https://github.com/firecracker-microvm/firecracker Firecracker] – secure and fast microVMs for [[serverless computing]]
* Grin – an open source [[distributed ledger]] [[cryptocurrency]] software project that implements a [[MimbleWimble]] [[Blockchain]]<ref>{{cite web|title=Grin|url=https://github.com/mimblewimble/grin/blob/master/doc/intro.md}}</ref>
* [https://gtk-rs.org Gtk-rs] – Bindings of GNOME libraries.<ref>{{Cite web|url=https://gtk-rs.org|title=Gtk-rs organization|website=gtk-rs|language=en|access-date=2016-01-01}}</ref>
* [https://holochain.org/ Holochain] – Scalable distributed applications with data integrity, utilizing an "agent-centric," as opposed to "data-centric" approach<ref>https://holochain.org/</ref>
* Lucidscape Mesh – a distributed real-time simulation engine for virtual reality<ref>{{cite web |title=Building the Metaverse |url=http://lucidscape.com/ |work=Lucidscape.com |access-date=2017-08-01}}</ref>
* [[Microsoft Azure]] IoT Edge – a platform used to run Azure services and artificial intelligence on IoT devices has components implemented in Rust<ref>{{cite web|url=https://github.com/Azure/iotedge |title=The IoT Edge OSS project |website=Github |accessdate=2018-09-26}}</ref>
* OnePush – a notification delivery system developed by OneSignal<ref>{{Cite news|url=https://onesignal.com/blog/announcing-our-new-delivery-backend/|title=OneSignal now sends iOS push notifications 100x faster|date=2016-03-21|newspaper=OneSignal|access-date=2017-01-06}}</ref>
* [[OpenDNS]] – used in two of its components<ref>{{cite book|last1=Balbaert|first1=Ivo|title=Rust Essentials|publisher=Packt Publishing|isbn=1785285769|page=6|url=https://books.google.com/books?id=TeiuCQAAQBAJ&pg=PA6&lpg=PA6&dq=OpenDNS+Rust&source=bl&ots=UL5thAAi8w&sig=Wf-Z5xSRYU-IXyGiyIl2FVEQWEc&hl=en&sa=X&ved=0ahUKEwizzdSk59LLAhVpnoMKHWdbDrQQ6AEINzAF#v=onepage&q=OpenDNS%20Rust&f=false|access-date=21 March 2016}}</ref><ref>{{cite web|last1=Frank|first1=Denis|title=Using HyperLogLog to Detect Malware Faster Than Ever|url=https://umbrella.cisco.com/blog/2013/12/05/hyperloglog-and-malware-detection/|website=OpenDNS Security Labs|access-date=19 March 2016}}</ref><ref>{{cite web|last1=Denis|first1=Frank|title=ZeroMQ: Helping us Block Malicious Domains in Real Time |url=https://umbrella.cisco.com/blog/2013/10/04/zeromq-helping-us-block-malicious-domains/|website=OpenDNS Security Labs|access-date=19 March 2016}}</ref>
* Parity – an implementation of [[Ethereum]] [[blockchain]] technology <ref>https://github.com/paritytech</ref>
* Pijul – a [[distributed version control]] system inspired by [[Darcs]]<ref>{{cite web|title=Pijul|url=https://pijul.org/|website=pijul.org|access-date=8 July 2017}}</ref>
* Piston – a [[game engine]]<ref>{{cite web |title=Piston A modular game engine written in Rust |url=http://www.piston.rs/ |work=Piston.rs |access-date=2017-08-01}}</ref>
* rav1e - an [[AV1]] video encoder currently in active development.<ref>{{cite web |title=xiph/rav1e: The fastest and safest AV1 encoder.  |url=https://github.com/xiph/rav1e|access-date=2018-10-18}}</ref>
* REmacs – a port of [[Emacs]] to Rust<ref>{{cite web|last1=Larabel|first1=Michael|url=https://www.phoronix.com/scan.php?page=news_item&px=Remacs-Rust-Emacs |title=Remacs:Re-Implementing Emacs In Rust|website=phoronix.com|date=2017-01-11|access-date=2017-01-19}}</ref>
* Rustation – a [[PlayStation]] [[emulator]]<ref>{{cite web|title=Rustation|url=https://github.com/simias/rustation|access-date=8 July 2017}}</ref>
* [[SAFE Network]] – a [[peer-to-peer]] (P2P) Internet project currently being developed by company MaidSafe in [[Ayr]], Scotland<ref>{{cite web |title=The SAFE Network – Building the new decentralized Internet |url=https://safenetwork.tech/ |access-date=2018-10-07}}</ref>
* TiKV – a distributed [[storage engine]] for TiDB, a distributed [[hybrid transactional/analytical processing (HTAP)]] [[database]]
* [[Tor (anonymity network)|Tor]] – an anonymity network, written in C originally, is experimenting with porting to Rust for its security features.<ref>{{Cite web|url=https://lists.torproject.org/pipermail/tor-dev/2017-March/012088.html|title=[tor-dev] Tor in a safer language: Network team update from Amsterdam|last=Hahn|first=Sebastian|date=2017-03-31|access-date=2017-04-01}}</ref><ref name="Tor Project actively porting to Rust">{{Cite web |url=https://blog.torproject.org/blog/network-team-hackfest-wilmington-watch |title=The Wilmington Watch: A Tor Network Team Hackfest |last=asn |date=2017-07-05 |website=Tor Blog |access-date=2018-01-03}}</ref>
* ''WitchBrook'' – a [[video game]] by [[Chucklefish]]<ref>{{Cite web|url=https://www.reddit.com/r/rust/comments/78bowa/hey_this_is_kyren_from_chucklefish_we_make_and/|title=Hey, this is kyren from Chucklefish, we make and publish cool video games. One of our two next projects is currently being written in rust, and I'd like to talk to you about it! • r/rust|website=reddit|language=en|access-date=2017-10-27}}</ref>
* Xi – a free modern [[text editor]] from [[Google Open Source]]<ref>{{cite web |url=https://www.recurse.com/events/localhost-raph-levien |title=Xi: an editor for the next 20 years |date=2018-01-23 |publisher=Recurse Center |first=Raph |last=Levien |accessdate=2018-08-08}}</ref><ref>{{cite web |url=https://opensource.google.com/projects/xi-editor |title=xi-editor |publisher=Google Open Source |accessdate=2018-08-08}}</ref>

==Conferences==
* Rust Belt Rust – A #rustlang conference in the [[Rust Belt]]<ref>https://rust-belt-rust.com/past</ref>
** 2018: Ann Arbor, Michigan
** 2017: Columbus, OH
** 2016: Pittsburgh, PA

* RustFest – Europe's @rustlang Conference<ref>https://blog.rustfest.eu/past_events/</ref>
** 2018: Rome, Italy
** 2018: Paris, France
** 2017: Zurich, Switzerland
** 2017: Київ (Kyiv), Ukraine
** 2016: Berlin

==See also==
* [[Comparison of programming languages]]

==References==
{{Reflist|30em}}

==External links==
{{Sister project links |wikt=no |commons=Category:Rust (programming language) |b=no |n=no |q=no |s=no |v=Rust |voy=no |species=no |d=no }}
*{{Official website|https://www.rust-lang.org}}
*[https://mail.mozilla.org/pipermail/rust-dev/ The Rust-dev Archives] – electronic mailing list
*{{GitHub|rust-lang/rust}} – primary source code repository and bug tracker
*{{GitHub|Hoverbear/rust-rosetta}} – implementations of common algorithms and solutions
*[https://www.reddit.com/r/rust/ Rust SubReddit] – active dev community language development and support
*[http://christianrubiales.com/hyperpoly/?q=rust Rust compared to other programming languages] – interactive comparison

{{Programming languages}}
{{Mozilla projects}}

[[Category:Articles with example code]]
[[Category:Concurrent programming languages]]
[[Category:Functional languages]]
[[Category:Mozilla]]
[[Category:Multi-paradigm programming languages]]
[[Category:Pattern matching programming languages]]
[[Category:Procedural programming languages]]
[[Category:Programming languages created in 2010]]
[[Category:Rust (programming language)| ]]
[[Category:Software using the MIT license]]
[[Category:Software using the Apache license]]
[[Category:Statically typed programming languages]]
[[Category:Systems programming languages]]
[[Category:High-level programming languages]]
[[Category:2010 software]]
[[Category:Free software projects]]