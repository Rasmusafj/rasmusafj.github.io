{{Redirect|Typescript|a typewritten manuscript|Manuscript}}
{{Infobox programming language
| name = TypeScript
| logo = [[File:TypeScript Logo.svg|frameless]]
| logo caption = 
| screenshot = 
| screenshot caption = 
| paradigm = [[Multi-paradigm programming language|Multi-paradigm]]: [[scripting language|scripting]], [[object-oriented programming|object-oriented]], [[structured programming|structured]], [[imperative programming|imperative]], [[functional programming|functional]], [[generic programming|generic]]
| released = {{Start date and age|2012|10|01|df=yes}}<ref>{{cite web |url = https://typescript.codeplex.com/releases/view/95554 |title = TypeScript |work = [[CodePlex]] |accessdate = 26 April 2015 }}</ref>
| designer = [[Microsoft]]
| developer = [[Microsoft]]
| latest release version = 3.2.1
| latest release date = {{Start date and age|2018|11|30}}<ref>{{cite web|title=Release . Microsoft/TypeScript | url=https://github.com/Microsoft/TypeScript/releases/latest |
website=TypeScript|accessdate=15 November 2018}}</ref>
| latest preview version =  3.2 RC
| latest preview date = {{Start date and age|2018|11|15}}<ref>https://blogs.msdn.microsoft.com/typescript/2018/11/15/announcing-typescript-3-2-rc//</ref>
| typing = [[Gradual typing|Gradual]], [[dynamic typing|dynamic]], [[Structural type system|structural]]<ref>{{cite web|title=Type Compatibility | url=https://www.typescriptlang.org/docs/handbook/type-compatibility.html |
website=TypeScript|accessdate=21 March 2018}}</ref>, [[duck typing|duck]]
| scope = 
| implementations = 
| dialects = 
| influenced by = [[JavaScript]], [[Java (programming language)|Java]], [[C Sharp (programming language)|C#]]
| influenced = [[AtScript]]
| programming language = 
| platform = 
| operating system = 
| license = [[Apache License|Apache License 2.0]]
| file ext = .ts, .tsx
| website = {{URL|http://www.typescriptlang.org/}}
| wikibooks = 
}}
'''TypeScript''' is an [[open-source software|open-source]] [[programming language]] developed and maintained by [[Microsoft]]. It is a strict syntactical [[superset]] of [[JavaScript]], and adds optional static typing to the language. 

TypeScript is designed for development of large applications and [[source-to-source compiler|transcompiles]] to JavaScript.<ref>{{cite web|url=https://arstechnica.com/information-technology/2012/10/microsoft-typescript-the-javascript-we-need-or-a-solution-looking-for-a-problem/|title=Microsoft TypeScript: the JavaScript we need, or a solution looking for a problem?|last=Bright|first=Peter|date=3 October 2012|work=[[Ars Technica]]|publisher=[[Condé Nast]]|accessdate=26 April 2015}}</ref> As TypeScript is a superset of JavaScript, existing JavaScript programs are also valid TypeScript programs. TypeScript may be used to develop JavaScript applications for both [[client-side]] and [[server-side]] ([[Node.js]]) execution.

TypeScript supports definition files that can contain type information of existing JavaScript libraries, much like [[C++]] header files can describe the structure of existing [[object file]]s. This enables other programs to use the values defined in the files as if they were statically typed TypeScript entities. There are third-party header files for popular libraries such as [[jQuery]], [[MongoDB]], and [[D3.js]]. TypeScript headers for the [[Node.js]] basic modules are also available, allowing development of [[Node.js]] programs within TypeScript.<ref>{{cite web |url = https://github.com/borisyankov/DefinitelyTyped |title = borisyankov/DefinitelyTyped |date =  |work = [[GitHub]] |accessdate = 26 April 2015 }}</ref>

The TypeScript compiler is itself written in TypeScript and [[Source-to-source compiler|compiled]] to JavaScript. It is licensed under the [[Apache License|Apache 2 License]].

TypeScript is included as a first-class programming language in [[Microsoft Visual Studio]] 2013 Update 2 and later, beside [[C Sharp (programming language)|C#]] and other Microsoft languages.<ref>[http://www.typescriptlang.org/ TypeScript Homepage], ''"Visual Studio includes TypeScript in the box, starting with Visual Studio 2013 Update 2"''</ref> An official extension allows Visual Studio 2012 to support TypeScript as well.<ref>[https://visualstudiogallery.msdn.microsoft.com/fa041d2d-5d77-494b-b0ba-8b4550792b4d TypeScript 1.0 Tools for Visual Studio 2012]</ref>

[[Anders Hejlsberg]], lead architect of [[C Sharp (programming language)#|C#]] and creator of [[Delphi (programming language)|Delphi]] and [[Turbo Pascal]], has worked on the development of TypeScript.<ref>{{cite web|url=http://www.zdnet.com/microsoft-takes-the-wraps-off-typescript-a-superset-of-javascript-7000004993/|title=Microsoft takes the wraps off TypeScript, a superset of JavaScript|last=Foley|first=Mary Jo|date=1 October 2012|work=[[ZDNet]]|publisher=[[CBS Interactive]]|accessdate=26 April 2015}}</ref><ref>{{cite web|url=http://blogs.msdn.com/b/somasegar/archive/2012/10/01/typescript-javascript-development-at-application-scale.aspx|title=Somasegar’s blog|last=Somasegar|first=S.|date=1 October 2012|work=Somasegar’s blog|publisher=Microsoft|accessdate=26 April 2015}}</ref><ref>{{cite web|url=http://www.zdnet.com/microsoft-typescript-can-the-father-of-c-save-us-from-the-tyranny-of-javascript-7000005054/|title=Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?|last=Baxter-Reynolds|first=Matt|date=1 October 2012|work=[[ZDNet]]|accessdate=26 April 2015}}</ref><ref>{{cite web|url=http://www.cio.com/article/717679/Microsoft_Augments_Javascript_for_Large_scale_Development|title=Microsoft Augments Javascript for Large-scale Development|last=Jackson|first=Joab|date=1 October 2012|work=CIO|publisher=[[IDG Enterprise]]|accessdate=26 April 2015}}</ref> 

== History ==
TypeScript was first made public in October 2012 (at version 0.8), after two years of internal development at Microsoft.<ref>{{cite web |url = http://www.infoworld.com/d/application-development/microsoft-augments-javascript-large-scale-development-203737 |title = Microsoft augments JavaScript for large-scale development |date = 1 October 2012 |work = [[InfoWorld]] |publisher = [[International Data Group|IDG]] |accessdate = 26 April 2015 }}</ref><ref>{{cite web |url = http://blogs.msdn.com/b/typescript/archive/2014/04/02/announcing-typescript-1-0.aspx |title = Announcing TypeScript 1.0 |date = 2 April 2014 |first = Jonathan |last = Turner |publisher = Microsoft |work = TypeScript Language team blog |accessdate = 26 April 2015 }}</ref> Soon after the announcement, [[Miguel de Icaza]] praised the language itself, but criticized the lack of mature IDE support apart from [[Microsoft Visual Studio]], which was not available on Linux and OS X at that time.<ref>{{cite web |url = http://tirania.org/blog/archive/2012/Oct-01.html |title = TypeScript: First Impressions |date = 2012-10-01 |author = [[Miguel de Icaza]] |quote = ''But TypeScript only delivers half of the value in using a strongly typed language to Unix developers: strong typing. Intellisense, code completion and refactoring are tools that are only available to Visual Studio Professional users on Windows. There is no Eclipse, MonoDevelop or Emacs support for any of the language features'' |accessdate = 2012-10-12 }}</ref><ref>{{cite web |url = http://www.zdnet.com/microsoft-typescript-can-the-father-of-c-save-us-from-the-tyranny-of-javascript-7000005054/ |title = Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript? |date = 2012-10-01 |publisher = [[ZDNet]] |quote = ''And I think this is a pretty big misstep. If you're building web apps that run on anything other than Windows, you're likely using a Mac and most likely not using Visual Studio. You need the Visual Studio plug-in to get the IntelliSense. All you get without Visual Studio is the strong-typing. You don't get the productivity benefits you get from IntelliSense.''. |accessdate = 2012-10-12 }}</ref> Today there is support in other IDEs, particularly in [[Eclipse (software)|Eclipse]], via a plug-in contributed by [[Palantir Technologies]].<ref>{{cite web |url = http://www.heise.de/developer/meldung/TypeScript-Unterstuetzung-fuer-Eclipse-1930408.html |title = TypeScript-Unterstützung für Eclipse |date = 6 August 2013 |work = heise Developer |accessdate = 26 April 2015 }}</ref><ref>{{cite web |url = http://marketplace.eclipse.org/content/typescript#.VAmSNvm1bYg |title = TypeScript |work = Eclipse Marketplace |publisher = Eclipse Foundation |accessdate = 26 April 2015 }}</ref> Various text editors, including [[Emacs]], [[Vim (text editor)|Vim]], [[Sublime Text|Sublime]], [[JetBrains#WebStorm|Webstorm]], [[Atom (text editor)|Atom]]<ref>{{cite web |url = https://github.com/TypeStrong/atom-typescript |title = TypeStrong: The only TypeScript package you will ever need |accessdate = 21 July 2016}}</ref> and Microsoft's own [[Visual Studio Code]] also support TypeScript.<ref>{{cite web |url = http://www.drdobbs.com/windows/working-with-typescript-in-visual-studio/240154792 |title = Working with TypeScript in Visual Studio 2012 |date = 14 May 2013 |work = [[Dr. Dobb's Journal]] |first = Gastón |last = Hillar |accessdate = 26 April 2015 }}</ref>

TypeScript 0.9, released in 2013, added support for generics.<ref>{{cite web |url = https://www.theregister.co.uk/2013/06/18/typescript_update_0_9/ |title = TypeScript 0.9 arrives with new compiler, support for generics |date = 18 June 2013 |work = [[The Register]] |accessdate = 26 April 2015 }}</ref> TypeScript 1.0 was released at Microsoft's [[Build (developer conference)|Build]] developer conference in 2014.<ref>{{cite web |url = http://channel9.msdn.com/Events/Build/2014/3-576 |title = TypeScript |first = Anders |last = Hejlsberg |authorlink = Anders Hejlsberg |date = 2 April 2014 |publisher = Microsoft |work = [[Channel 9 (Microsoft)|Channel 9]] |accessdate = 26 April 2015 }}</ref> [[Visual Studio 2013]] Update 2 provides built-in support for TypeScript.<ref>{{cite web |url = http://www.pcworld.com/article/2101920/microsoft-typescript-graduates-to-visual-studio.html |title = Microsoft TypeScript graduates to Visual Studio |first = Joab |last = Jackson |date = 25 February 2014 |work = [[PC World]] |publisher = [[International Data Group|IDG]] |accessdate = 26 April 2015 }}</ref>

In July 2014, the development team announced a new TypeScript compiler, claiming 5× performance gains. Simultaneously, the source code, which was initially hosted on [[CodePlex]], was moved to [[GitHub]].<ref>{{cite web |url = http://blogs.msdn.com/b/typescript/archive/2014/07/21/new-compiler-and-moving-to-github.aspx |title = New Compiler and Moving to GitHub |date = 21 July 2014 |publisher = Microsoft |work = TypeScript Language team blog |first = Jonathan |last = Turner |accessdate = 26 April 2015 }}</ref>

On 22 September 2016, TypeScript 2.0 was released; it introduced several features, including the ability for programmers to optionally prevent variables from being assigned {{code|null}} values,<ref>{{cite web|first=Peter|last=Bright|url=https://arstechnica.com/information-technology/2016/09/typescript-microsofts-javascript-for-big-applications-reaches-version-2-0/|title=TypeScript, Microsoft’s JavaScript for big applications, reaches version 2.0|work=[[Ars Technica]]|publisher=[[Condé Nast]]|date=22 September 2016|accessdate=22 September 2016}}</ref> sometimes referred to as the [[Null_pointer#History | billion-dollar mistake]].

== Language design ==
TypeScript originated from the shortcomings of JavaScript for the development of large-scale applications both at Microsoft and among their external customers.<ref>{{cite web |url = http://www.hanselminutes.com/340/what-is-typescript-and-why-with-anders-hejlsberg |title = What is TypeScript and why with Anders Hejlsberg |author = Anders Hejlsberg |publisher = www.hanselminutes.com |date = 2012-10-05 |accessdate = 2014-01-15 }}</ref> Challenges with dealing with complex JavaScript code led to demand for custom tooling to ease developing of components in the language.<ref>{{cite web |url = http://blogs.msdn.com/b/somasegar/archive/2012/10/01/typescript-javascript-development-at-application-scale.aspx |title = TypeScript: JavaScript Development at Application Scale |author = S. Somasegar |publisher = msdn.com |date = 2012-10-01 |accessdate = 2013-11-27 }}</ref>

TypeScript developers sought a solution that would not break compatibility with the standard and its cross-platform support. Knowing that the current ECMAScript standard proposal promised future support for [[class-based programming]], TypeScript was based on that proposal. That led to a JavaScript compiler with a set of syntactical language extensions, a superset based on the proposal, that transforms the extensions into regular JavaScript. In this sense TypeScript was a preview of what to expect of ECMAScript 2015. A unique aspect not in the proposal, but added to TypeScript, is optional [[static typing]]<ref>optional static typing is called [[gradual typing]]</ref> that enables static language analysis, which facilitates tooling and IDE support.

=== ECMAScript 2015 support ===
{{main article|ECMAScript#6th Edition - ECMAScript 2015}}

TypeScript adds support for features such as classes, modules, and an arrow function syntax as defined in the ECMAScript 2015 standard.

== Language features ==
TypeScript is a language extension that adds features to [[ECMAScript]] 6. Additional features include:
* [[Type signature|Type annotations]] and [[compile-time]] [[type checking]]
* [[Type inference]]
* [[Type erasure]]
* [[Interface (object-oriented programming)|Interfaces]]
* [[Enumerated type]]s
* [[Generic programming|Generics]]
* [[Namespace]]s
* [[Tuple]]s
* [[Async/await]]

The following features are backported from ECMAScript 2015:
* [[Class (computer programming)|Classes]]
* [[Modular programming|Modules]]<ref>{{cite web |url = https://techcrunch.com/2012/10/01/microsoft-previews-new-javascript-like-programming-language-typescript/ |title = Microsoft Previews New JavaScript-Like Programming Language TypeScript |publisher = TechCrunch |date = 2012-10-01 |author = Klint Finley |accessdate = 2013-11-27 }}</ref>
* Abbreviated "arrow" syntax for [[anonymous function]]s
* Optional parameters and default parameters

Syntactically, TypeScript is very similar to [[JScript .NET]], another Microsoft implementation of the ECMA-262 language standard that added support for static typing and classical object-oriented language features such as classes, inheritance, interfaces, and namespaces.

=== Compatibility with JavaScript ===
TypeScript is a strict superset of [[ECMAScript]] 2015, which is itself a superset of ECMAScript 5, commonly referred to as JavaScript.<ref>{{Cite web |url = https://angular.io/docs/ts/latest/guide/upgrade.html |title = Angular 2 |website = angular.io |access-date = 2016-05-04 }}</ref> As such, a JavaScript program is also a valid TypeScript program, and a TypeScript program can seamlessly consume JavaScript. By default the compiler targets ECMAScript 5, the current prevailing standard, but is also able to generate constructs used in ECMAScript 3 or 2015.

With TypeScript, it is possible to use existing JavaScript code, incorporate popular JavaScript libraries, and call TypeScript-generated code from other JavaScript.<ref name="typescript-home-page">{{cite web |url = http://www.typescriptlang.org/ |title = Welcome to TypeScript |date =  |work = typescriptlang.org |publisher = [[Microsoft]] |accessdate = 26 April 2015 }}</ref> Type declarations for these libraries are provided with the source code.

=== Type annotations ===
TypeScript provides [[static typing]] through type annotations to enable [[type checking]] at [[compile time]]. This is optional and can be ignored to use the regular [[dynamic typing]] of JavaScript.
<source lang="typescript">
function add(left: number, right: number): number {
	return left + right;
}
</source>

The annotations for the primitive types are <code>number</code>, <code>boolean</code> and <code>string</code>. Weakly- or dynamically-typed structures are of type <code>any</code>.

Type annotations can be exported to a separate ''declarations file'' to make type information available for TypeScript scripts using types already compiled into JavaScript. Annotations can be declared for an existing JavaScript library, as has been done for [[Node.js]] and [[jQuery]].

The TypeScript compiler makes use of [[type inference]] to infer types when types are not given. For example, the <code>add</code> method in the code above would be inferred as returning a <code>number</code> even if no return type annotation had been provided. This is based on the static types of <code>left</code> and <code>right</code> being <code>numbers</code>, and the compiler's knowledge that the result of adding two <code>numbers</code> is always a <code>number</code>. However, explicitly declaring the return type allows the compiler to verify correctness.

If no type can be inferred because of lack of declarations, then it defaults to the dynamic <code>any</code> type. A value of the <code>any</code> type supports the same operations as a value in JavaScript and minimal static type checking is performed for operations on <code>any</code> values.<ref>[http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf TypeScript Language Specification p.24] {{Webarchive|url=https://web.archive.org/web/20131117065339/http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf |date=17 November 2013 }}</ref>

==== Declaration files ====
When a TypeScript script gets compiled there is an option to generate a ''declaration file'' (with the extension <code>.d.ts</code>) that functions as an [[interface (computing)|interface]] to the [[Component-oriented programming|component]]s in the compiled JavaScript. In the process the compiler strips away all function and method bodies and preserves only the signatures of the types that are exported. The resulting declaration file can then be used to describe the exported virtual TypeScript types of a JavaScript library or module when a third-party developer consumes it from TypeScript.

The concept of declaration files is analogous to the concept of [[header file]] found in [[C/C++]].
<source lang="typescript">
declare namespace arithmetics {
    add(left: number, right: number): number;
    subtract(left: number, right: number): number;
    multiply(left: number, right: number): number;
    divide(left: number, right: number): number;
}
</source>

Type declaration files can be written by hand for existing JavaScript libraries, as has been done for jQuery and Node.js.

Large collections of declaration files for popular JavaScript libraries are hosted on GitHub in [https://github.com/DefinitelyTyped/DefinitelyTyped DefinitelyTyped].

=== Classes ===
TypeScript supports ECMAScript 2015 classes that integrate the optional type annotations support.
<source lang="typescript">
class Person {
    private name: string;
    private age: number;
    private salary: number;

    constructor(name: string, age: number, salary: number) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    toString(): string {
        return `${this.name} (${this.age}) (${this.salary})`; // As of version 1.4
    }
}
</source>

=== Generics ===
TypeScript supports [[generic programming]].<ref>{{cite web |url = http://blogs.msdn.com/b/typescript/archive/2013/06/18/announcing-typescript-0-9.aspx |title = Announcing TypeScript 0.9 |work = TypeScript Language team blog |publisher = [[Microsoft]] |date = 18 June 2013 |first = Jonathan |last = Turner }}</ref>

=== Modules and namespaces ===
TypeScript distinguishes between modules and namespaces. Both features in TypeScript support encapsulation of classes, interfaces, functions and variables into containers. Namespaces (formerly internal modules) utilize [[immediately-invoked function expression]] of JavaScript to encapsulate code, whereas modules (formerly external modules) leverage JavaScript library patterns to do so ([[Asynchronous module definition|AMD]] or [[CommonJS]]).<ref>{{cite web |url = http://blog.oio.de/2014/01/31/an-introduction-to-typescript-module-system/ |title = An introduction to TypeScript’s module system |publisher = blog.oio.de |date = 2014-01-31 |author = S&ouml;nke Sothmann |accessdate = 2014-02-21 }}</ref>

== Development tools ==
=== Compiler ===
The TypeScript compiler, named <code>tsc</code>, is [[Self-hosting|written in TypeScript]]. As a result, it can be compiled into regular JavaScript and can then be executed in any JavaScript engine (e.g. a browser). The compiler package comes bundled with a script host that can execute the compiler. It is also available as a [[Node.js]] package that uses Node.js as a host.

There is also an [[Alpha test|alpha]] version of a client-side compiler in JavaScript, which executes TypeScript code on the fly, upon page load.<ref>{{cite web |url = https://github.com/niutech/typescript-compile |title = niutech/typescript-compile |date =  |work = GitHub |accessdate = 26 April 2015 }}</ref>

The current version of the compiler supports ECMAScript 5 by default. An option is allowed to target ECMAScript 2015 to make use of language features exclusive to that version (e.g. generators). Classes, despite being part of the ECMAScript 2015 standard, are available in both modes.

=== IDE and editor support ===
* [[Microsoft]] provides a [[Plug-in (computing)|plug-in]] for [[Visual Studio|Visual Studio 2012]] and [[Microsoft WebMatrix|WebMatrix]], full integrated support in [[Visual Studio|Visual Studio 2013]], [[Visual Studio|Visual Studio 2015]], and basic text editor support for [[Sublime Text]], [[Emacs]] and [[Vim (text editor)|Vim]].<ref name="blogs.msdn.com">{{cite web |author = Olivier Bloch |title = Sublime Text, Vi, Emacs: TypeScript enabled! |url = http://blogs.msdn.com/b/interoperability/archive/2012/10/01/sublime-text-vi-emacs-typescript-enabled.aspx |publisher = [[Microsoft]] |date = 2012-10-01 |accessdate = 2012-10-28 }}</ref>
* [[Visual Studio Code]] is an open-source, cross-platform source code editor developed by Microsoft based on [[Electron (software framework)|Electron]]. It supports TypeScript in addition to several other languages, and offers features like debugging and intelligent [[autocomplete|code completion]].
* alm.tools is an open source cloud IDE for TypeScript built using TypeScript, ReactJS and TypeStyle.
* [[JetBrains]] supports TypeScript with code completion, refactoring and debugging in its IDEs built on IntelliJ platform, such as [[PhpStorm]] 6, [[WebStorm]] 6, and [[IntelliJ IDEA]],<ref>{{cite web |title = TypeScript support in WebStorm 6 |url = http://blog.jetbrains.com/webide/2013/02/typescript-support-in-webstorm-6 |publisher = JetBrains }}</ref> as well as their Visual Studio Add-in and extension, [https://www.jetbrains.com/resharper ReSharper] 8.1.<ref>{{cite web |title = TypeScript support in ReSharper 8.1 |url = http://blog.jetbrains.com/dotnet/2013/10/28/typescript-support-resharper-81/ |publisher = JetBrains }}</ref>
* [[Atom (text editor)|Atom]] has a [https://atom.io/packages/atom-typescript TypeScript Plugin] by [[Basarat Ali Syed|Basarat]] with support for code completion, navigation, formatting, and fast compilation.
* The online [[Cloud9 IDE]] and [[Codenvy]] support TypeScript.
* A plugin is available for the [[NetBeans|NetBeans IDE]].
* A plugin is available for the [[Eclipse (software)|Eclipse IDE]] (version Kepler)
* TypEcs is available for the [[Eclipse (software)|Eclipse IDE]].
* [[Microsoft]] provides a TypeScript Plugin for [[Sublime Text]].
* The Cross Platform Cloud IDE [[Codeanywhere]] supports TypeScript.
*Webclipse An Eclipse plugin designed to develop TypeScript and [[Angular (application platform)|Angular 2]].
* Angular IDE A standalone IDE available via npm to develop TypeScript and Angular 2 applications, with integrated terminal support.
* Tide — TypeScript Interactive Development Environment for [[Emacs]].
* [https://github.com/Quramy/tsuquyomi Tsuquyomi] - a [[Vim (text editor)|Vim]] plugin which uses TSServer and provides features like code completion, navigation and syntax and semantic error checking.

=== Integration with build automation tools ===
Using [[Plug-in (computing)|plug-ins]], TypeScript can be integrated with [[build automation]] tools, including Grunt (grunt-ts<ref>{{cite web |url = https://github.com/basarat/grunt-ts |title = TypeStrong/grunt-ts |date =  |work = GitHub |accessdate = 26 April 2015 }}</ref>), [[Apache Maven]] (TypeScript Maven Plugin<ref>{{cite web |url = https://github.com/ppedregal/typescript-maven-plugin |title = ppedregal/typescript-maven-plugin |date =  |work = GitHub |accessdate = 26 April 2015 }}</ref>), Gulp (gulp-typescript<ref>{{cite web |url = https://github.com/ivogabe/gulp-typescript |title = ivogabe/gulp-typescript |date =  |work = GitHub |accessdate = 14 July 2017 }}</ref>) and [[Gradle]] (TypeScript Gradle Plugin<ref>{{cite web |url = https://github.com/sothmann/typescript-gradle-plugin |title = sothmann/typescript-gradle-plugin |date =  |work = GitHub |accessdate = 26 April 2015 }}</ref>).

== Release history ==

{| class="wikitable sortable"
|-
! Version number
! Release date
! Significant changes
|-
| 0.8
| {{start date|2012|10|01}}
|
|-
| 0.9
| {{start date|2013|06|18}}
|
|-
| 1.1
| {{start date|2014|10|06}}
| performance improvements
|-
| 1.3
| {{start date|2014|11|12}}
| <code>protected</code> modifier, tuple types
|-
| 1.4
| {{start date|2015|01|20}}
| union types, <code>let</code> and <code>const</code> declarations, template strings, type guards, type aliases
|-
| 1.5
| {{start date|2015|07|20}}
| ES6 modules, <code>namespace</code> keyword, <code>for..of</code> support, decorators
|-
| 1.6
| {{start date|2015|09|16}}
| JSX support, intersection types, local type declarations, abstract classes and methods, user-defined type guard functions
|-
| 1.7
| {{start date|2015|11|30}}
| <code>async</code> and <code>await</code> support, 
|-
| 1.8
| {{start date|2016|02|22}}
| constraints generics, control flow analysis errors, string literal types, <code>allowJs</code>
|-
| 2.0
| {{start date|2016|09|22}}
| null- and undefined-aware types, control flow based type analysis, discriminated union types, <code>never</code> type, <code>readonly</code> keyword, type of <code>this</code> for functions
|-
| 2.1
| {{start date|2016|11|08}}
| <code>keyof</code> and lookup types, mapped types, object spread and rest, 
|-
| 2.2
| {{start date|2017|02|22}}
| mix-in classes, <code>object</code> type, 
|-
| 2.3
| {{start date|2017|04|27}}
| <code>async</code> iteration, generic parameter defaults, strict option
|-
| 2.4
| {{start date|2017|06|27}}
| dynamic import expressions, string enums, improved inference for generics, strict contravariance for callback parameters
|-
| 2.5
| {{start date|2017|08|31}}
| optional catch clause variables 
|-
| 2.6
| {{start date|2017|10|31}}
| strict function types
|-
| 2.7
| {{start date|2018|01|31}}
| constant-named properties, fixed length tuples
|-
| 2.8
| {{start date|2018|03|27}}
| conditional types, improved <code>keyof</code> with intersection types
|-
| 2.9
| {{start date|2018|05|14}}
| support for symbols and numeric literals in keyof and mapped object types
|-
| 3.0
| {{start date|2018|07|30}}
| project references, extracting and spreading parameter lists with tuples
|-
| 3.1
| {{start date|2018|09|27}}
| mappable tuple and array types
|-
| 3.2
| {{start date|2018|11|30}}
| stricter checking for bind, call, and apply
|}

== See also ==
{{Portal|Free software}}
* [[Closure Compiler]]
* [[Dart (programming language)|Dart]]
* [[CoffeeScript]]
* [[Elm (programming language)]], a compile-to-JavaScript functional language with static typing.
* [http://www.purescript.org/ PureScript] A strongly-typed functional programming language that compiles to JavaScript.

== References ==
{{reflist|39em}}
* [https://www.genuitec.com/products/webclipse/ "Webclipse : Eclipse Plugin"] Genuitec. Retrieved November 9th. 2016.
* [https://www.genuitec.com/products/angular-ide/ "Angular IDE by Webclipse : Standalone IDE"] Genuitec. Retrieved November 9th. 2016.

== External links ==
* {{official website|http://www.typescriptlang.org/}}
* [https://github.com/Microsoft/TypeScript TypeScript] project at [[GitHub]]
* [https://github.com/Microsoft/TypeScript/blob/730f18955dc17068be33691f0fb0e0285ebbf9f5/doc/spec.md TypeScript Language Specification]
* [https://github.com/jbaron/cats CATS Cross Platform TypeScript Editor]
* [http://channel9.msdn.com/Events/Build/2013/3-314 Build 2013 presentation]
* [https://github.com/dzharii/awesome-typescript Awesome-TypeScript: A community-supported list of tools and resources related to TypeScript]
* [http://javascripttrainingcourses.com/JS/Typescript-Training TypeScript Training]
* [https://howtodoinjava.com/typescript/typescript-tutorial/ TypeScript Tutorial]
* [https://facebook.github.io/react-native/blog/2018/05/07/using-typescript-with-react-native Using TypeScript with React Native]

{{Programming languages}}
{{JavaScript|state=collapsed}}
{{Microsoft APIs}}
{{NodeJs}}
{{Use dmy dates|date=July 2017}}



[[Category:Cross-platform software]]
[[Category:JavaScript programming language family]]
[[Category:Microsoft free software]]
[[Category:Object-based programming languages]]
[[Category:Programming languages created in 2012]]
[[Category:Scripting languages]]
[[Category:Software using the Apache license]]
[[Category:Source-to-source compilers]]
[[Category:2012 software]]